\begin{document} \begin{theorem} Take a list of commands such that \begin{verbatim} <var:s1> := <var:K> ; <var:s2> := <var:s1> * <var:K> ; <var:s3> := <var:s2> * <var:K> ; <var:s4> := <var:s3> * <var:K> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:6> ; <var:s4> := <var:s4> * <nat:1> ; <var:W> := <var:s4> <var:W> := <var:W> + <var:s3> <var:W> := <var:W> + <var:s2> <var:W> := <var:W> + <var:s1> <var:W> := <var:W> + <var:s0> \end{verbatim} Assuming that $ <var:K> = <var:q> $ prior to running our set of instructions then we see $ <var:W> = <nat:1> \cdot <var:q> ^ <nat:4> + <nat:6> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:4> \cdot <var:q> + <nat:2> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning results in : \begin{eqnarray} \{ <var:K> = <var:q> \} \\ <var:s1> := <var:K> ; \\ \{ <var:K> = <var:q> \land <var:s1> = <var:q> \} \\ <var:s2> := <var:s1> * <var:K> ; \\ \{ <var:K> = <var:q> \land <var:s1> = <var:q> \land <var:s2> = <var:q> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:K> ; \\ \{ <var:K> = <var:q> \land <var:s1> = <var:q> \land <var:s2> = <var:q> ^ <nat:2> \land <var:s3> = <var:q> ^ <nat:3> \} \\ <var:s4> := <var:s3> * <var:K> ; \\ \{ <var:K> = <var:q> \land <var:s1> = <var:q> \land <var:s2> = <var:q> ^ <nat:2> \land <var:s3> = <var:q> ^ <nat:3> \land <var:s4> = <var:q> ^ <nat:4> \} \\ <var:s0> := <nat:2> ; \\ \{ <var:K> = <var:q> \land <var:s1> = <var:q> \land <var:s2> = <var:q> ^ <nat:2> \land <var:s3> = <var:q> ^ <nat:3> \land <var:s4> = <var:q> ^ <nat:4> \land <var:s0> = <nat:2> \} \\ <var:s1> := <var:s1> * <nat:4> ; \\ \{ <var:K> = <var:q> \land <var:s1> = <nat:4> \times <var:q> \land <var:s2> = <var:q> ^ <nat:2> \land <var:s3> = <var:q> ^ <nat:3> \land <var:s4> = <var:q> ^ <nat:4> \land <var:s0> = <nat:2> \} \\ <var:s2> := <var:s2> * <nat:3> ; \\ \{ <var:K> = <var:q> \land <var:s1> = <nat:4> \times <var:q> \land <var:s2> = <nat:3> \times <var:q> ^ <nat:2> \land <var:s3> = <var:q> ^ <nat:3> \land <var:s4> = <var:q> ^ <nat:4> \land <var:s0> = <nat:2> \} \\ <var:s3> := <var:s3> * <nat:6> ; \\ \{ <var:K> = <var:q> \land <var:s1> = <nat:4> \times <var:q> \land <var:s2> = <nat:3> \times <var:q> ^ <nat:2> \land <var:s3> = <nat:6> \times <var:q> ^ <nat:3> \land <var:s4> = <var:q> ^ <nat:4> \land <var:s0> = <nat:2> \} \\ <var:s4> := <var:s4> * <nat:1> ; \\ \{ <var:K> = <var:q> \land <var:s1> = <nat:4> \times <var:q> \land <var:s2> = <nat:3> \times <var:q> ^ <nat:2> \land <var:s3> = <nat:6> \times <var:q> ^ <nat:3> \land <var:s4> = <nat:1> \times <var:q> ^ <nat:4> \land <var:s0> = <nat:2> \} \\ <var:W> := <var:s4> \\ \{ <var:K> = <var:q> \land <var:s1> = <nat:4> \times <var:q> \land <var:s2> = <nat:3> \times <var:q> ^ <nat:2> \land <var:s3> = <nat:6> \times <var:q> ^ <nat:3> \land <var:s0> = <nat:2> \land <var:W> = <nat:1> \times <var:q> ^ <nat:4> \} \\ <var:W> := <var:W> + <var:s3> \\ \{ <var:K> = <var:q> \land <var:s1> = <nat:4> \times <var:q> \land <var:s2> = <nat:3> \times <var:q> ^ <nat:2> \land <var:s0> = <nat:2> \land <var:W> = <nat:1> \times <var:q> ^ <nat:4> + <nat:6> \times <var:q> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:s2> \\ \{ <var:K> = <var:q> \land <var:s1> = <nat:4> \times <var:q> \land <var:s0> = <nat:2> \land <var:W> = <nat:1> \times <var:q> ^ <nat:4> + <nat:6> \times <var:q> ^ <nat:3> + <nat:3> \times <var:q> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:s1> \\ \{ <var:K> = <var:q> \land <var:s0> = <nat:2> \land <var:W> = <nat:1> \times <var:q> ^ <nat:4> + <nat:6> \times <var:q> ^ <nat:3> + <nat:3> \times <var:q> ^ <nat:2> + <nat:4> \times <var:q> \} \\ <var:W> := <var:W> + <var:s0> \\ \{ <var:K> = <var:q> \land <var:W> = <nat:1> \times <var:q> ^ <nat:4> + <nat:6> \times <var:q> ^ <nat:3> + <nat:3> \times <var:q> ^ <nat:2> + <nat:4> \times <var:q> + <nat:2> \} \end{eqnarray} Thus , this series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <var:s4> : string := " <var:s4> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:K> = <var:q> }} <var:s1> := <var:K> ; <var:s2> := <var:s1> * <var:K> ; <var:s3> := <var:s2> * <var:K> ; <var:s4> := <var:s3> * <var:K> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:6> ; <var:s4> := <var:s4> * <nat:1> ; <var:W> := <var:s4> <var:W> := <var:W> + <var:s3> <var:W> := <var:W> + <var:s2> <var:W> := <var:W> + <var:s1> <var:W> := <var:W> + <var:s0> {{ <var:W> = <nat:1> * <var:q> ^ <nat:4> + <nat:6> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:s1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:s1> = <var:q> /\ <var:s2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:s1> = <var:q> /\ <var:s2> = <var:q> ^ <nat:2> /\ <var:s3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:s1> = <var:q> /\ <var:s2> = <var:q> ^ <nat:2> /\ <var:s3> = <var:q> ^ <nat:3> /\ <var:s4> = <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:s1> = <var:q> /\ <var:s2> = <var:q> ^ <nat:2> /\ <var:s3> = <var:q> ^ <nat:3> /\ <var:s4> = <var:q> ^ <nat:4> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:s1> = <nat:4> * <var:q> /\ <var:s2> = <var:q> ^ <nat:2> /\ <var:s3> = <var:q> ^ <nat:3> /\ <var:s4> = <var:q> ^ <nat:4> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:s1> = <nat:4> * <var:q> /\ <var:s2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:s3> = <var:q> ^ <nat:3> /\ <var:s4> = <var:q> ^ <nat:4> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:s1> = <nat:4> * <var:q> /\ <var:s2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:s3> = <nat:6> * <var:q> ^ <nat:3> /\ <var:s4> = <var:q> ^ <nat:4> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:s1> = <nat:4> * <var:q> /\ <var:s2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:s3> = <nat:6> * <var:q> ^ <nat:3> /\ <var:s4> = <nat:1> * <var:q> ^ <nat:4> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:s1> = <nat:4> * <var:q> /\ <var:s2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:s3> = <nat:6> * <var:q> ^ <nat:3> /\ <var:s0> = <nat:2> /\ <var:W> = <nat:1> * <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:s1> = <nat:4> * <var:q> /\ <var:s2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:s0> = <nat:2> /\ <var:W> = <nat:1> * <var:q> ^ <nat:4> + <nat:6> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:s1> = <nat:4> * <var:q> /\ <var:s0> = <nat:2> /\ <var:W> = <nat:1> * <var:q> ^ <nat:4> + <nat:6> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:s0> = <nat:2> /\ <var:W> = <nat:1> * <var:q> ^ <nat:4> + <nat:6> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:W> = <nat:1> * <var:q> ^ <nat:4> + <nat:6> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 