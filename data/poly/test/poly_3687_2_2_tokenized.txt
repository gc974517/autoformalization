\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P> := <nat:4> ; <var:P> := <nat:2> + <var:P> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Assuming that $ <var:Z> = <var:j> $ before the evaluation of this series of commands it follows that $ <var:P> = <nat:4> * <var:j> + <nat:2> $ after code segment has finished executing . \end{theorem} \begin{proof} Applying typical Hoare techniques gives : \begin{eqnarray} \{ <var:Z> = <var:j> \} \\ <var:P> := <nat:4> ; \\ \{ <var:Z> = <var:j> \land <var:P> = <nat:4> \} \\ <var:P> := <nat:2> + <var:P> * <var:Z> \\ \{ <var:Z> = <var:j> \land <var:P> = <nat:4> \cdot <var:j> + <nat:2> \} \end{eqnarray} Hence , our segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:4> ; <var:P> := <nat:2> + <var:P> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:Z> = <var:j> }} <def:poly> {{ <var:P> = <nat:4> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:P> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:P> = <nat:4> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 