\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:6> ; <var:d1> := <nat:8> ; <var:d1> := <var:d1> * <var:j> ; <var:Q> := <var:d1> ; <var:Q> := <var:Q> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:j> = <var:z> $ given every $ <var:z> $ ahead of the execution of this code segment it follows that $ <var:Q> = <nat:8> * <var:z> + <nat:6> $ after segment of code has exited . \end{theorem} \begin{proof} The course of logic for this set of commands can be done using Hoare techniques . Taking a look at the upcoming line of code in our code , we have the assignment code \verb | <var:d0> := <nat:6> ; | . This moves the precondition $ \{ <var:j> = <var:z> \} $ into $ \{ <var:j> = <var:z> \land <var:d0> = <nat:6> \} $ . This is deduced by the assignment inference rule from usual Hoare logic . Immediately following , we have the binding line \verb | <var:d1> := <nat:8> ; | . This code takes the condition $ \{ <var:j> = <var:z> \land <var:d0> = <nat:6> \} $ toward the postcondition $ \{ <var:j> = <var:z> \land <var:d0> = <nat:6> \land <var:d1> = <nat:8> \} $ . Looking at the next statement in our set of instructions , the assignment statement assigning $ <var:d1> * <var:j> $ into $ <var:d1>$ . This command forwards $ \{ <var:j> = <var:z> \land <var:d0> = <nat:6> \land <var:d1> = <nat:8> \} $ toward the condition $ \{ <var:j> = <var:z> \land <var:d0> = <nat:6> \land <var:d1> = <nat:8> * <var:z> \} $ . This is sound with the assignment scheme in usual Hoare techniques . Moving forward , we see the binding statement assigning $ <var:d1> $ toward $ <var:Q>$ . This command forwards the precondition $ \{ <var:j> = <var:z> \land <var:d0> = <nat:6> \land <var:d1> = <nat:8> * <var:z> \} $ as the postcondition $ \{ <var:j> = <var:z> \land <var:d0> = <nat:6> \land <var:Q> = <nat:8> * <var:z> \} $ . Next , we see the environment update command letting $ <var:Q> + <var:d0$ to $ <var:Q>$ . This code takes $ \{ <var:j> = <var:z> \land <var:d0> = <nat:6> \land <var:Q> = <nat:8> * <var:z> \} $ into the postcondition $ \{ <var:j> = <var:z> \land <var:Q> = <nat:8> * <var:z> + <nat:6> \} $ . This is shown using the assignment rule found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:6> ; <var:d1> := <nat:8> ; <var:d1> := <var:d1> * <var:j> ; <var:Q> := <var:d1> ; <var:Q> := <var:Q> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:j> = <var:z> }} <def:poly> {{ <var:Q> = <nat:8> * <var:z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:d0> = <nat:6> /\ <var:d1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:d0> = <nat:6> /\ <var:d1> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:d0> = <nat:6> /\ <var:Q> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:z> /\ <var:Q> = <nat:8> * <var:z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 