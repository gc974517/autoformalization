\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:5> ; <var:n> := <var:X0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Allow $ <var:u> = <var:o> $ ahead of the execution of the series of commands , then we have $ <var:n> = <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for our code can be done with this decorated set of commands . \begin{eqnarray} \{ <var:u> = <var:o> \} \\ <var:X0> := <nat:5> ; \\ \{ <var:u> = <var:o> \land <var:X0> = <nat:5> \} \\ <var:n> := <var:X0> \\ \{ <var:u> = <var:o> \land <var:n> = <nat:5> \} \end{eqnarray} Applying typical Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <def:poly> := <var:X0> := <nat:5> ; <var:n> := <var:X0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:u> = <var:o> }} <def:poly> {{ <var:n> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:o> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:o> /\ <var:n> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 