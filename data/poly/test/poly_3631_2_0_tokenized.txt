\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:3> ; <var:o> := <var:q0> \end{verbatim} Given it to hold that $ <var:Y> = <var:J> $ before executing this series of instructions it follows that $ <var:o> = <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for this list of instructions can be given with standard Hoare techniques . Advancing to the next step , we have the variable binding line giving $ <nat:3> $ into $ <var:q0>$ . This command forwards the condition $ \{ <var:Y> = <var:J> \} $ to the condition $ \{ <var:Y> = <var:J> \land <var:q0> = <nat:3> \} $ . This is ensured through the assignment scheme from typical Hoare logic . After , we have the assignment statement \verb | <var:o> := <var:q0> | . This takes the precondition $ \{ <var:Y> = <var:J> \land <var:q0> = <nat:3> \} $ into the postcondition $ \{ <var:Y> = <var:J> \land <var:o> = <nat:3> \} $ . This is sound by the assignment law given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Y> = <var:J> }} <var:q0> := <nat:3> ; <var:o> := <var:q0> {{ <var:o> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:o> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 