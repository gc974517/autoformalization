\begin{document} \begin{theorem} Take the following code in \emph{Imp} : \begin{verbatim} <var:r> := <nat:2> ; <var:r> := <var:r> * <var:C> ; <var:r> := <nat:4> + <var:r> * <var:C> ; <var:r> := <nat:1> + <var:r> * <var:C> ; <var:r> := <nat:4> + <var:r> * <var:C> ; <var:r> := <nat:2> + <var:r> * <var:C> ; <var:r> := <nat:3> + <var:r> * <var:C> ; <var:r> := <nat:4> + <var:r> * <var:C> ; <var:r> := <nat:2> + <var:r> * <var:C> ; <var:r> := <var:r> * <var:C> ; <var:r> := <nat:2> + <var:r> * <var:C> ; <var:r> := <nat:2> + <var:r> * <var:C> ; <var:r> := <nat:1> + <var:r> * <var:C> ; <var:r> := <nat:3> + <var:r> * <var:C> \end{verbatim} Allowing ( given some positive coefficients $ <var:x> $ ) it to hold that $ <var:C> = <var:x> $ ahead of executing our segment of code it must be that we see $ <var:r> = <nat:2> \times <var:x> ^ <nat:13> + <nat:4> \times <var:x> ^ <nat:11> + <nat:1> \times <var:x> ^ <nat:10> + <nat:4> \times <var:x> ^ <nat:9> + <nat:2> \times <var:x> ^ <nat:8> + <nat:3> \times <var:x> ^ <nat:7> + <nat:4> \times <var:x> ^ <nat:6> + <nat:2> \times <var:x> ^ <nat:5> + <nat:2> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:x> \} \\ <var:r> := <nat:2> ; \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \} \\ <var:r> := <var:r> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \times <var:x> + \} \\ <var:r> := <nat:4> + <var:r> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \times <var:x> ^ <nat:2> + <nat:4> \} \\ <var:r> := <nat:1> + <var:r> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> + <nat:1> \} \\ <var:r> := <nat:4> + <var:r> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:4> \} \\ <var:r> := <nat:2> + <var:r> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \times <var:x> ^ <nat:5> + <nat:4> \times <var:x> ^ <nat:3> + <nat:1> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:2> \} \\ <var:r> := <nat:3> + <var:r> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \times <var:x> ^ <nat:6> + <nat:4> \times <var:x> ^ <nat:4> + <nat:1> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> + <nat:3> \} \\ <var:r> := <nat:4> + <var:r> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \times <var:x> ^ <nat:7> + <nat:4> \times <var:x> ^ <nat:5> + <nat:1> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> + <nat:4> \} \\ <var:r> := <nat:2> + <var:r> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \times <var:x> ^ <nat:8> + <nat:4> \times <var:x> ^ <nat:6> + <nat:1> \times <var:x> ^ <nat:5> + <nat:4> \times <var:x> ^ <nat:4> + <nat:2> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:2> \} \\ <var:r> := <var:r> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \times <var:x> ^ <nat:9> + <nat:4> \times <var:x> ^ <nat:7> + <nat:1> \times <var:x> ^ <nat:6> + <nat:4> \times <var:x> ^ <nat:5> + <nat:2> \times <var:x> ^ <nat:4> + <nat:3> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> + \} \end{eqnarray} Allowing interpreting our code produces : \begin{eqnarray} <var:r> := <nat:2> + <var:r> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \times <var:x> ^ <nat:10> + <nat:4> \times <var:x> ^ <nat:8> + <nat:1> \times <var:x> ^ <nat:7> + <nat:4> \times <var:x> ^ <nat:6> + <nat:2> \times <var:x> ^ <nat:5> + <nat:3> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> + <nat:2> \} \\ <var:r> := <nat:2> + <var:r> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \times <var:x> ^ <nat:11> + <nat:4> \times <var:x> ^ <nat:9> + <nat:1> \times <var:x> ^ <nat:8> + <nat:4> \times <var:x> ^ <nat:7> + <nat:2> \times <var:x> ^ <nat:6> + <nat:3> \times <var:x> ^ <nat:5> + <nat:4> \times <var:x> ^ <nat:4> + <nat:2> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> + <nat:2> \} \\ <var:r> := <nat:1> + <var:r> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \times <var:x> ^ <nat:12> + <nat:4> \times <var:x> ^ <nat:10> + <nat:1> \times <var:x> ^ <nat:9> + <nat:4> \times <var:x> ^ <nat:8> + <nat:2> \times <var:x> ^ <nat:7> + <nat:3> \times <var:x> ^ <nat:6> + <nat:4> \times <var:x> ^ <nat:5> + <nat:2> \times <var:x> ^ <nat:4> + <nat:2> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> + <nat:1> \} \\ <var:r> := <nat:3> + <var:r> * <var:C> \\ \{ <var:C> = <var:x> \land <var:r> = <nat:2> \times <var:x> ^ <nat:13> + <nat:4> \times <var:x> ^ <nat:11> + <nat:1> \times <var:x> ^ <nat:10> + <nat:4> \times <var:x> ^ <nat:9> + <nat:2> \times <var:x> ^ <nat:8> + <nat:3> \times <var:x> ^ <nat:7> + <nat:4> \times <var:x> ^ <nat:6> + <nat:2> \times <var:x> ^ <nat:5> + <nat:2> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:3> \} \end{eqnarray} Utilizing Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:C> = <var:x> }} <var:r> := <nat:2> ; <var:r> := <var:r> * <var:C> ; <var:r> := <nat:4> + <var:r> * <var:C> ; <var:r> := <nat:1> + <var:r> * <var:C> ; <var:r> := <nat:4> + <var:r> * <var:C> ; <var:r> := <nat:2> + <var:r> * <var:C> ; <var:r> := <nat:3> + <var:r> * <var:C> ; <var:r> := <nat:4> + <var:r> * <var:C> ; <var:r> := <nat:2> + <var:r> * <var:C> ; <var:r> := <var:r> * <var:C> ; <var:r> := <nat:2> + <var:r> * <var:C> ; <var:r> := <nat:2> + <var:r> * <var:C> ; <var:r> := <nat:1> + <var:r> * <var:C> ; <var:r> := <nat:3> + <var:r> * <var:C> {{ <var:r> = <nat:2> * <var:x> ^ <nat:13> + <nat:4> * <var:x> ^ <nat:11> + <nat:1> * <var:x> ^ <nat:10> + <nat:4> * <var:x> ^ <nat:9> + <nat:2> * <var:x> ^ <nat:8> + <nat:3> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> * <var:x> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> * <var:x> ^ <nat:9> + <nat:4> * <var:x> ^ <nat:7> + <nat:1> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> * <var:x> ^ <nat:10> + <nat:4> * <var:x> ^ <nat:8> + <nat:1> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> * <var:x> ^ <nat:11> + <nat:4> * <var:x> ^ <nat:9> + <nat:1> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:6> + <nat:3> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> * <var:x> ^ <nat:12> + <nat:4> * <var:x> ^ <nat:10> + <nat:1> * <var:x> ^ <nat:9> + <nat:4> * <var:x> ^ <nat:8> + <nat:2> * <var:x> ^ <nat:7> + <nat:3> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:r> = <nat:2> * <var:x> ^ <nat:13> + <nat:4> * <var:x> ^ <nat:11> + <nat:1> * <var:x> ^ <nat:10> + <nat:4> * <var:x> ^ <nat:9> + <nat:2> * <var:x> ^ <nat:8> + <nat:3> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 