\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} : \begin{verbatim} <var:E1> := <var:e> ; <var:E0> := <nat:4> ; <var:E1> := <var:E1> * <nat:5> ; <var:g> := <var:E1> <var:g> := <var:g> + <var:E0> \end{verbatim} Given that we have $ <var:e> = <var:Y> $ prior to running the code segment then we see $ <var:g> = <nat:5> \cdot <var:Y> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for the list of instructions is accomplished by standard Hoare techniques . Keeping momentum , we see the assignment statement yielding $ <var:e> $ as $ <var:E1>$ . This takes the condition $ \{ <var:e> = <var:Y> \} $ into $ \{ <var:e> = <var:Y> \land <var:E1> = <var:Y> \} $ . This is sound using the assignment law of Hoare logic . Next , we have the variable update line yielding $ <nat:4> $ into $ <var:E0>$ . This takes the condition $ \{ <var:e> = <var:Y> \land <var:E1> = <var:Y> \} $ toward $ \{ <var:e> = <var:Y> \land <var:E1> = <var:Y> \land <var:E0> = <nat:4> \} $ . Immediately following , the line \verb | <var:E1> := <var:E1> * <nat:5> ; | . This command moves the precondition $ \{ <var:e> = <var:Y> \land <var:E1> = <var:Y> \land <var:E0> = <nat:4> \} $ as the condition $ \{ <var:e> = <var:Y> \land <var:E1> = <nat:5> \times <var:Y> \land <var:E0> = <nat:4> \} $ . This is sound by the assignment inference rule given by Hoare techniques . Taking another step toward the subsequent piece of code contained in the list of commands , we have the binding line \verb | <var:g> := <var:E1> | . This command takes the condition $ \{ <var:e> = <var:Y> \land <var:E1> = <nat:5> \times <var:Y> \land <var:E0> = <nat:4> \} $ as $ \{ <var:e> = <var:Y> \land <var:E0> = <nat:4> \land <var:g> = <nat:5> \times <var:Y> \} $ . This is shown with the assignment law defined in standard Hoare reasoning . Moving forward to the next step , we see the variable assignmet code \verb | <var:g> := <var:g> + <var:E0> | . This line forwards $ \{ <var:e> = <var:Y> \land <var:E0> = <nat:4> \land <var:g> = <nat:5> \times <var:Y> \} $ to the postcondition $ \{ <var:e> = <var:Y> \land <var:g> = <nat:5> \times <var:Y> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:e> = <var:Y> }} <var:E1> := <var:e> ; <var:E0> := <nat:4> ; <var:E1> := <var:E1> * <nat:5> ; <var:g> := <var:E1> <var:g> := <var:g> + <var:E0> {{ <var:g> = <nat:5> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:E1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:E1> = <var:Y> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:E1> = <nat:5> * <var:Y> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:E0> = <nat:4> /\ <var:g> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:g> = <nat:5> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 