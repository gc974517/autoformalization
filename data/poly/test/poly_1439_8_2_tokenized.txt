\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:V> := <nat:1> ; <var:V> := <nat:3> + <var:V> * <var:j> ; <var:V> := <nat:3> + <var:V> * <var:j> ; <var:V> := <nat:4> + <var:V> * <var:j> ; <var:V> := <nat:2> + <var:V> * <var:j> ; <var:V> := <nat:4> + <var:V> * <var:j> ; <var:V> := <var:V> * <var:j> ; <var:V> := <nat:2> + <var:V> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:j> = <var:h> $ before the execution of the series of instructions then $ <var:V> = <nat:1> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions is clear with standard Hoare logic . Considering the next steps in the program , we have \begin{eqnarray} \{ <var:j> = <var:h> \} \, <var:V> := <nat:1> \, \{ <var:j> = <var:h> \land <var:V> = <nat:1> \} \\ \{ <var:j> = <var:h> \land <var:V> = <nat:1> \} \, <var:V> := <nat:3> + <var:V> * <var:j> \, \{ <var:j> = <var:h> \land <var:V> = <nat:1> \cdot <var:h> + <nat:3> \} \\ \{ <var:j> = <var:h> \land <var:V> = <nat:1> \cdot <var:h> + <nat:3> \} \, <var:V> := <nat:3> + <var:V> * <var:j> \, \{ <var:j> = <var:h> \land <var:V> = <nat:1> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:3> \} \\ \{ <var:j> = <var:h> \land <var:V> = <nat:1> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:3> \} \, <var:V> := <nat:4> + <var:V> * <var:j> \, \{ <var:j> = <var:h> \land <var:V> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:4> \} \\ \{ <var:j> = <var:h> \land <var:V> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:4> \} \, <var:V> := <nat:2> + <var:V> * <var:j> \, \{ <var:j> = <var:h> \land <var:V> = <nat:1> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:2> \} \end{eqnarray} Advancing to the next step , we see \begin{eqnarray} \{ <var:j> = <var:h> \} \, <var:V> := <nat:1> \, \{ <var:j> = <var:h> \land <var:V> = <nat:1> \} \\ \{ <var:j> = <var:h> \land <var:V> = <nat:1> \} \, <var:V> := <nat:3> + <var:V> * <var:j> \, \{ <var:j> = <var:h> \land <var:V> = <nat:1> \cdot <var:h> + <nat:3> \} \\ \{ <var:j> = <var:h> \land <var:V> = <nat:1> \cdot <var:h> + <nat:3> \} \, <var:V> := <nat:3> + <var:V> * <var:j> \, \{ <var:j> = <var:h> \land <var:V> = <nat:1> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:3> \} \end{eqnarray} This is guaranteed with the variable update law in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:1> ; <var:V> := <nat:3> + <var:V> * <var:j> ; <var:V> := <nat:3> + <var:V> * <var:j> ; <var:V> := <nat:4> + <var:V> * <var:j> ; <var:V> := <nat:2> + <var:V> * <var:j> ; <var:V> := <nat:4> + <var:V> * <var:j> ; <var:V> := <var:V> * <var:j> ; <var:V> := <nat:2> + <var:V> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:j> = <var:h> }} <def:poly> {{ <var:V> = <nat:1> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:V> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:V> = <nat:1> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:h> /\ <var:V> = <nat:1> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 