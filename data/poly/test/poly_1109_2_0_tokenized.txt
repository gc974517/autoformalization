\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:3> ; <var:s> := <var:X0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Assuming $ <var:Y> = <var:h> $ before running our code , it holds that we see $ <var:s> = <nat:3> $ once series of instructions has terminated . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning results in : \begin{eqnarray} \{ <var:Y> = <var:h> \} \\ <var:X0> := <nat:3> ; \\ \{ <var:Y> = <var:h> \land <var:X0> = <nat:3> \} \\ <var:s> := <var:X0> \\ \{ <var:Y> = <var:h> \land <var:s> = <nat:3> \} \end{eqnarray} Considering the above , the set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <def:poly> := <var:X0> := <nat:3> ; <var:s> := <var:X0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:Y> = <var:h> }} <def:poly> {{ <var:s> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:h> /\ <var:s> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 