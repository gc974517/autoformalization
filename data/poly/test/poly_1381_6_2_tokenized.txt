\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:L> := <nat:3> ; <var:L> := <nat:2> + <var:L> * <var:T> ; <var:L> := <nat:3> + <var:L> * <var:T> ; <var:L> := <nat:3> + <var:L> * <var:T> ; <var:L> := <nat:1> + <var:L> * <var:T> ; <var:L> := <nat:4> + <var:L> * <var:T> \end{verbatim} \end{definition} \begin{theorem} Allow ( given any positive integer coefficients $ <var:l> $ ) that we have $ <var:T> = <var:l> $ ahead of running the list of instructions , it must be that $ <var:L> = <nat:3> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code segment can be given using usual Hoare reasoning . Following , we see the variable update line defining $ <nat:3> $ to $ <var:L>$ . This advances the condition $ \{ <var:T> = <var:l> \} $ as the condition $ \{ <var:T> = <var:l> \land <var:L> = <nat:3> \} $ . This is guaranteed with the assignment inference rule from standard Hoare reasoning . Jumping to the following step seen in our series of instructions , we have the assignment command \verb | <var:L> := <nat:2> + <var:L> * <var:T> ; | . This line moves the precondition $ \{ <var:T> = <var:l> \land <var:L> = <nat:3> \} $ as the postcondition $ \{ <var:T> = <var:l> \land <var:L> = <nat:3> * <var:l> + <nat:2> \} $ . Observing the following command in the code , we have the variable assignmet command \verb | <var:L> := <nat:3> + <var:L> * <var:T> ; | . This forwards the condition $ \{ <var:T> = <var:l> \land <var:L> = <nat:3> * <var:l> + <nat:2> \} $ into $ \{ <var:T> = <var:l> \land <var:L> = <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> \} $ . This is sound through the assignment law defined by usual Hoare reasoning . Taking another step toward the proceeding line of code found in the list of commands , we have the environment update statement \verb | <var:L> := <nat:3> + <var:L> * <var:T> ; | . This command moves $ \{ <var:T> = <var:l> \land <var:L> = <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> \} $ to the postcondition $ \{ <var:T> = <var:l> \land <var:L> = <nat:3> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> \} $ . Advancing to the next step , the variable update code yielding $ <nat:1> + <var:L> * <var:T> $ to $ <var:L>$ . This statement takes the precondition $ \{ <var:T> = <var:l> \land <var:L> = <nat:3> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> \} $ toward the postcondition $ \{ <var:T> = <var:l> \land <var:L> = <nat:3> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> \} $ . This is rigorously given through the assignment scheme found in Hoare techniques . Focusing on the subsequent piece of code found in the set of commands , we have the variable assignmet statement \verb | <var:L> := <nat:4> + <var:L> * <var:T> | . This statement takes $ \{ <var:T> = <var:l> \land <var:L> = <nat:3> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> \} $ to the postcondition $ \{ <var:T> = <var:l> \land <var:L> = <nat:3> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:3> ; <var:L> := <nat:2> + <var:L> * <var:T> ; <var:L> := <nat:3> + <var:L> * <var:T> ; <var:L> := <nat:3> + <var:L> * <var:T> ; <var:L> := <nat:1> + <var:L> * <var:T> ; <var:L> := <nat:4> + <var:L> * <var:T> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:T> = <var:l> }} <def:poly> {{ <var:L> = <nat:3> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:L> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:L> = <nat:3> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:L> = <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:L> = <nat:3> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:L> = <nat:3> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:l> /\ <var:L> = <nat:3> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 