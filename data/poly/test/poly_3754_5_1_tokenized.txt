\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q1> := <var:D> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:1> ; <var:W> := <var:Q1> <var:W> := <var:W> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> . Assuming for every $ <var:I> $ that $ <var:D> = <var:I> $ prior to evaluating our list of commands it holds that we have $ <var:W> = <nat:1> * <var:I> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions can be shown by typical Hoare techniques . Taking another step toward the following line found in the code , we see the variable assignmet statement \verb | <var:Q1> := <var:D> ; | . This transfers the condition $ \{ <var:D> = <var:I> \} $ as the postcondition $ \{ <var:D> = <var:I> \land <var:Q1> = <var:I> \} $ . This is shown by the assignment law defined by Hoare reasoning . Considering the upcoming statement in our program , we see the binding statement binding $ <nat:4> $ to $ <var:Q0>$ . This forwards the precondition $ \{ <var:D> = <var:I> \land <var:Q1> = <var:I> \} $ toward $ \{ <var:D> = <var:I> \land <var:Q1> = <var:I> \land <var:Q0> = <nat:4> \} $ . Keeping momentum , the variable assignmet statement yielding $ <var:Q1> * <nat:1> $ as $ <var:Q1>$ . This command forwards the precondition $ \{ <var:D> = <var:I> \land <var:Q1> = <var:I> \land <var:Q0> = <nat:4> \} $ toward the postcondition $ \{ <var:D> = <var:I> \land <var:Q1> = <nat:1> \cdot <var:I> \land <var:Q0> = <nat:4> \} $ . Now , the code defining $ <var:Q1$ as $ <var:W>$ . This transfers the precondition $ \{ <var:D> = <var:I> \land <var:Q1> = <nat:1> \cdot <var:I> \land <var:Q0> = <nat:4> \} $ into the postcondition $ \{ <var:D> = <var:I> \land <var:Q0> = <nat:4> \land <var:W> = <nat:1> \cdot <var:I> \} $ . This is shown to be logically sound through the assignment scheme defined in usual Hoare logic . Keeping momentum , we see the variable update command assigning $ <var:W> + <var:Q0$ as $ <var:W>$ . This command advances the precondition $ \{ <var:D> = <var:I> \land <var:Q0> = <nat:4> \land <var:W> = <nat:1> \cdot <var:I> \} $ to the postcondition $ \{ <var:D> = <var:I> \land <var:W> = <nat:1> \cdot <var:I> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:D> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:1> ; <var:W> := <var:Q1> <var:W> := <var:W> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:D> = <var:I> }} <def:poly> {{ <var:W> = <nat:1> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:Q1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:Q1> = <var:I> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:Q1> = <nat:1> * <var:I> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:Q0> = <nat:4> /\ <var:W> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:I> /\ <var:W> = <nat:1> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 