\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:r1> := <var:O> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:3> ; <var:q> := <var:r1> <var:q> := <var:q> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assuming , given any $ <var:v> \in \mathbb{Z}^+ $ , that we have $ <var:O> = <var:v> $ before the execution of our program , it follows that we have $ <var:q> = <nat:3> * <var:v> + <nat:7> $ once set of commands terminates . \end{theorem} \begin{proof} The course of logic for this list of instructions can be shown with Hoare reasoning . Jumping to the following statement in our code segment , we see the code \verb | <var:r1> := <var:O> ; | . This transfers the condition $ \{ <var:O> = <var:v> \} $ as the postcondition $ \{ <var:O> = <var:v> \land <var:r1> = <var:v> \} $ . Moving forward , the assignment code \verb | <var:r0> := <nat:7> ; | . This line takes the precondition $ \{ <var:O> = <var:v> \land <var:r1> = <var:v> \} $ toward $ \{ <var:O> = <var:v> \land <var:r1> = <var:v> \land <var:r0> = <nat:7> \} $ . Going forward , the statement \verb | <var:r1> := <var:r1> * <nat:3> ; | . This statement moves the precondition $ \{ <var:O> = <var:v> \land <var:r1> = <var:v> \land <var:r0> = <nat:7> \} $ into $ \{ <var:O> = <var:v> \land <var:r1> = <nat:3> \times <var:v> \land <var:r0> = <nat:7> \} $ . Shifting focus toward the upcoming statement contained in the program , we see the variable assignmet code \verb | <var:q> := <var:r1> | . This advances the precondition $ \{ <var:O> = <var:v> \land <var:r1> = <nat:3> \times <var:v> \land <var:r0> = <nat:7> \} $ into the postcondition $ \{ <var:O> = <var:v> \land <var:r0> = <nat:7> \land <var:q> = <nat:3> \times <var:v> \} $ . This is sound through the assignment law found in Hoare reasoning . Next , the variable update code yielding $ <var:q> + <var:r0$ into $ <var:q>$ . This line transfers the precondition $ \{ <var:O> = <var:v> \land <var:r0> = <nat:7> \land <var:q> = <nat:3> \times <var:v> \} $ into the condition $ \{ <var:O> = <var:v> \land <var:q> = <nat:3> \times <var:v> + <nat:7> \} $ . This is guaranteed using the assignment inference rule of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r1> := <var:O> ; <var:r0> := <nat:7> ; <var:r1> := <var:r1> * <nat:3> ; <var:q> := <var:r1> <var:q> := <var:q> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:O> = <var:v> }} <def:poly> {{ <var:q> = <nat:3> * <var:v> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:r1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:r1> = <var:v> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:r1> = <nat:3> * <var:v> /\ <var:r0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:r0> = <nat:7> /\ <var:q> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:v> /\ <var:q> = <nat:3> * <var:v> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 