\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:I1> := <var:Y> ; <var:I2> := <var:I1> * <var:Y> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:8> ; <var:I2> := <var:I2> * <nat:3> ; <var:p> := <var:I2> <var:p> := <var:p> + <var:I1> <var:p> := <var:p> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> in \emph{Imp} . Allow that we have $ <var:Y> = <var:U> $ , given some whole numbers $ <var:U> $ , prior to evaluating the set of commands , then $ <var:p> = <nat:3> \cdot <var:U> ^ <nat:2> + <nat:8> \cdot <var:U> + <nat:4> $ when series of commands terminates . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions is demonstrated by usual Hoare techniques . After , we have the environment update line \verb | <var:I1> := <var:Y> ; | . This code moves $ \{ <var:Y> = <var:U> \} $ to the postcondition $ \{ <var:Y> = <var:U> \land <var:I1> = <var:U> \} $ . Immediately after , we see the variable assignmet code giving $ <var:I1> * <var:Y> $ toward $ <var:I2>$ . This transfers the precondition $ \{ <var:Y> = <var:U> \land <var:I1> = <var:U> \} $ as $ \{ <var:Y> = <var:U> \land <var:I1> = <var:U> \land <var:I2> = <var:U> ^ <nat:2> \} $ . This is ensured through the assignment law given by standard Hoare reasoning . Going to the next step , we have the line yielding $ <nat:4> $ as $ <var:I0>$ . This command advances $ \{ <var:Y> = <var:U> \land <var:I1> = <var:U> \land <var:I2> = <var:U> ^ <nat:2> \} $ toward $ \{ <var:Y> = <var:U> \land <var:I1> = <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I0> = <nat:4> \} $ . This is rigorously given through the assignment rule defined in standard Hoare reasoning . Honing in on the following step seen in the code , the statement \verb | <var:I1> := <var:I1> * <nat:8> ; | . This statement transfers the condition $ \{ <var:Y> = <var:U> \land <var:I1> = <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I0> = <nat:4> \} $ as the condition $ \{ <var:Y> = <var:U> \land <var:I1> = <nat:8> \times <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I0> = <nat:4> \} $ . This is rigorously given through the assignment scheme found in standard Hoare reasoning . Advancing , we see the variable update statement defining $ <var:I2> * <nat:3> $ toward $ <var:I2>$ . This line advances the precondition $ \{ <var:Y> = <var:U> \land <var:I1> = <nat:8> \times <var:U> \land <var:I2> = <var:U> ^ <nat:2> \land <var:I0> = <nat:4> \} $ toward the condition $ \{ <var:Y> = <var:U> \land <var:I1> = <nat:8> \times <var:U> \land <var:I2> = <nat:3> \times <var:U> ^ <nat:2> \land <var:I0> = <nat:4> \} $ . This is deduced by the assignment inference rule found in usual Hoare logic . Advancing on , the environment update statement \verb | <var:p> := <var:I2> | . This code forwards the precondition $ \{ <var:Y> = <var:U> \land <var:I1> = <nat:8> \times <var:U> \land <var:I2> = <nat:3> \times <var:U> ^ <nat:2> \land <var:I0> = <nat:4> \} $ as the postcondition $ \{ <var:Y> = <var:U> \land <var:I1> = <nat:8> \times <var:U> \land <var:I0> = <nat:4> \land <var:p> = <nat:3> \times <var:U> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment rule from typical Hoare techniques . Focusing on the proceeding statement found in the series of commands , we see the variable assignmet line \verb | <var:p> := <var:p> + <var:I1> | . This redefines $ \{ <var:Y> = <var:U> \land <var:I1> = <nat:8> \times <var:U> \land <var:I0> = <nat:4> \land <var:p> = <nat:3> \times <var:U> ^ <nat:2> \} $ to the postcondition $ \{ <var:Y> = <var:U> \land <var:I0> = <nat:4> \land <var:p> = <nat:3> \times <var:U> ^ <nat:2> + <nat:8> \times <var:U> \} $ . Going forward , we have the variable update line \verb | <var:p> := <var:p> + <var:I0> | . This redefines the precondition $ \{ <var:Y> = <var:U> \land <var:I0> = <nat:4> \land <var:p> = <nat:3> \times <var:U> ^ <nat:2> + <nat:8> \times <var:U> \} $ to $ \{ <var:Y> = <var:U> \land <var:p> = <nat:3> \times <var:U> ^ <nat:2> + <nat:8> \times <var:U> + <nat:4> \} $ . This is known to be sound by the assignment law of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I1> := <var:Y> ; <var:I2> := <var:I1> * <var:Y> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:8> ; <var:I2> := <var:I2> * <nat:3> ; <var:p> := <var:I2> <var:p> := <var:p> + <var:I1> <var:p> := <var:p> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:Y> = <var:U> }} <def:poly> {{ <var:p> = <nat:3> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:I1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:I1> = <var:U> /\ <var:I2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:I1> = <var:U> /\ <var:I2> = <var:U> ^ <nat:2> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:I1> = <nat:8> * <var:U> /\ <var:I2> = <var:U> ^ <nat:2> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:I1> = <nat:8> * <var:U> /\ <var:I2> = <nat:3> * <var:U> ^ <nat:2> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:I1> = <nat:8> * <var:U> /\ <var:I0> = <nat:4> /\ <var:p> = <nat:3> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:I0> = <nat:4> /\ <var:p> = <nat:3> * <var:U> ^ <nat:2> + <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:p> = <nat:3> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 