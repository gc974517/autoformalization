\begin{document} \begin{theorem} Define a list of commands as follows \begin{verbatim} <var:x1> := <var:z> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:3> ; <var:a> := <var:x1> <var:a> := <var:a> + <var:x0> \end{verbatim} Assume ( for some $ <var:S> \in \mathbb{Z}^+ $ ) $ <var:z> = <var:S> $ prior to running our list of commands , it holds that $ <var:a> = <nat:3> * <var:S> + <nat:1> $ when list of instructions has finished executing . \end{theorem} \begin{proof} Observe that this decorated program . \begin{eqnarray} \{ <var:z> = <var:S> \} \\ <var:x1> := <var:z> ; \\ \{ <var:z> = <var:S> \land <var:x1> = <var:S> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:z> = <var:S> \land <var:x1> = <var:S> \land <var:x0> = <nat:1> \} \\ <var:x1> := <var:x1> * <nat:3> ; \\ \{ <var:z> = <var:S> \land <var:x1> = <nat:3> * <var:S> \land <var:x0> = <nat:1> \} \\ <var:a> := <var:x1> \\ \{ <var:z> = <var:S> \land <var:x0> = <nat:1> \land <var:a> = <nat:3> * <var:S> \} \\ <var:a> := <var:a> + <var:x0> \\ \{ <var:z> = <var:S> \land <var:a> = <nat:3> * <var:S> + <nat:1> \} \end{eqnarray} The application of Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:z> = <var:S> }} <var:x1> := <var:z> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:3> ; <var:a> := <var:x1> <var:a> := <var:a> + <var:x0> {{ <var:a> = <nat:3> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:x1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:x1> = <var:S> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:x1> = <nat:3> * <var:S> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:x0> = <nat:1> /\ <var:a> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:S> /\ <var:a> = <nat:3> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 