\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:5> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:B> ; <var:c2> := <nat:4> ; <var:c2> := <var:c2> * <var:B> ; <var:c2> := <var:c2> * <var:B> ; <var:c3> := <nat:1> ; <var:c3> := <var:c3> * <var:B> ; <var:c3> := <var:c3> * <var:B> ; <var:c3> := <var:c3> * <var:B> ; <var:e> := <var:c3> ; <var:e> := <var:e> + <var:c2> ; <var:e> := <var:e> + <var:c1> ; <var:e> := <var:e> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:B> = <var:T> $ ahead of the execution of the set of instructions , it follows that $ <var:e> = <nat:1> \cdot <var:T> ^ <nat:3> + <nat:4> \cdot <var:T> ^ <nat:2> + <nat:1> \cdot <var:T> + <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands can be demonstrated with usual Hoare techniques . Moving on , we have \[ \begin{tabular} {rcl} \{ <var:B> = <var:T> \} & <var:c0> := <nat:5> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \} \\ \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \} & <var:c1> := <nat:1> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \} \\ \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \} & <var:c1> := <var:c1> * <var:B> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \} \\ \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \} & <var:c2> := <nat:4> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \} \\ \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \} & <var:c2> := <var:c2> * <var:B> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> \} \\ \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> \} & <var:c2> := <var:c2> * <var:B> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> ^ <nat:2> \} \\ \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> ^ <nat:2> \} & <var:c3> := <nat:1> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> ^ <nat:2> \land <var:c3> = <nat:1> \} \\ \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> ^ <nat:2> \land <var:c3> = <nat:1> \} & <var:c3> := <var:c3> * <var:B> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> ^ <nat:2> \land <var:c3> = <nat:1> \times <var:T> \} \\ \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> ^ <nat:2> \land <var:c3> = <nat:1> \times <var:T> \} & <var:c3> := <var:c3> * <var:B> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> ^ <nat:2> \land <var:c3> = <nat:1> \times <var:T> ^ <nat:2> \} \\ \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> ^ <nat:2> \land <var:c3> = <nat:1> \times <var:T> ^ <nat:2> \} & <var:c3> := <var:c3> * <var:B> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> ^ <nat:2> \land <var:c3> = <nat:1> \times <var:T> ^ <nat:3> \} \\ \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> ^ <nat:2> \land <var:c3> = <nat:1> \times <var:T> ^ <nat:3> \} & <var:e> := <var:c3> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> ^ <nat:2> \land <var:e> = <nat:1> \times <var:T> ^ <nat:3> \} \\ \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:c2> = <nat:4> \times <var:T> ^ <nat:2> \land <var:e> = <nat:1> \times <var:T> ^ <nat:3> \} & <var:e> := <var:e> + <var:c2> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:e> = <nat:1> \times <var:T> ^ <nat:3> + <nat:4> \times <var:T> ^ <nat:2> \} \\ \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:c1> = <nat:1> \times <var:T> \land <var:e> = <nat:1> \times <var:T> ^ <nat:3> + <nat:4> \times <var:T> ^ <nat:2> \} & <var:e> := <var:e> + <var:c1> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \land <var:e> = <nat:1> \times <var:T> ^ <nat:3> + <nat:4> \times <var:T> ^ <nat:2> + <nat:1> \times <var:T> \} \end{tabular} Keeping momentum , \[ \begin{tabular} {rcl} \{ <var:B> = <var:T> \} & <var:c0> := <nat:5> & \{ <var:B> = <var:T> \land <var:c0> = <nat:5> \} \end{tabular} This is shown to be logically sound using the assignment law defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c0> := <nat:5> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:B> ; <var:c2> := <nat:4> ; <var:c2> := <var:c2> * <var:B> ; <var:c2> := <var:c2> * <var:B> ; <var:c3> := <nat:1> ; <var:c3> := <var:c3> * <var:B> ; <var:c3> := <var:c3> * <var:B> ; <var:c3> := <var:c3> * <var:B> ; <var:e> := <var:c3> ; <var:e> := <var:e> + <var:c2> ; <var:e> := <var:e> + <var:c1> ; <var:e> := <var:e> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:B> = <var:T> }} <def:poly> {{ <var:e> = <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:T> /\ <var:c2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:T> /\ <var:c2> = <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:T> /\ <var:c2> = <nat:4> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:T> /\ <var:c2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:c3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:T> /\ <var:c2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:c3> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:T> /\ <var:c2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:c3> = <nat:1> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:T> /\ <var:c2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:c3> = <nat:1> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:T> /\ <var:c2> = <nat:4> * <var:T> ^ <nat:2> /\ <var:e> = <nat:1> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:1> * <var:T> /\ <var:e> = <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:c0> = <nat:5> /\ <var:e> = <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:T> /\ <var:e> = <nat:1> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 