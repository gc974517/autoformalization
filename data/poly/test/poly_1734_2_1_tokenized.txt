\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:2> ; <var:M> := <var:U0> \end{verbatim} Assume --- given every positive integer coefficients $ <var:e> $ --- $ <var:w> = <var:e> $ ahead of executing our series of commands it must be that we have $ <var:M> = <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of instructions can be accomplished through usual Hoare techniques . Next , we have the assignment command \verb | <var:U0> := <nat:2> ; | . This moves the condition $ \{ <var:w> = <var:e> \} $ to the postcondition $ \{ <var:w> = <var:e> \land <var:U0> = <nat:2> \} $ . Paying attention to the next step found in the code segment , we see the environment update code \verb | <var:M> := <var:U0> | . This transfers the condition $ \{ <var:w> = <var:e> \land <var:U0> = <nat:2> \} $ into the postcondition $ \{ <var:w> = <var:e> \land <var:M> = <nat:2> \} $ . This is deduced by the assignment inference rule from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:w> = <var:e> }} <var:U0> := <nat:2> ; <var:M> := <var:U0> {{ <var:M> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:M> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 