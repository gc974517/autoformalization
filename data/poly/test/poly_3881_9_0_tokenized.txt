\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:9> ; <var:J1> := <nat:5> ; <var:J1> := <var:J1> * <var:f> ; <var:J2> := <nat:5> ; <var:J2> := <var:J2> * <var:f> ; <var:J2> := <var:J2> * <var:f> ; <var:S> := <var:J2> ; <var:S> := <var:S> + <var:J1> ; <var:S> := <var:S> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:f> = <var:U> $ ahead of interpreting our code segment then we see $ <var:S> = <nat:5> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:9> $ . \end{theorem} \begin{proof} The proof of the code is evident through usual Hoare logic . Observing the upcoming steps contained in the set of instructions , \begin{eqnarray} \{ <var:f> = <var:U> \} \, <var:J0> := <nat:9> \, \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \} \\ \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \} \, <var:J1> := <nat:5> \, \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:J1> = <nat:5> \} \\ \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:J1> = <nat:5> \} \, <var:J1> := <var:J1> * <var:f> \, \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:J1> = <nat:5> * <var:U> \} \\ \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:J1> = <nat:5> * <var:U> \} \, <var:J2> := <nat:5> \, \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:J1> = <nat:5> * <var:U> \land <var:J2> = <nat:5> \} \\ \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:J1> = <nat:5> * <var:U> \land <var:J2> = <nat:5> \} \, <var:J2> := <var:J2> * <var:f> \, \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:J1> = <nat:5> * <var:U> \land <var:J2> = <nat:5> * <var:U> \} \\ \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:J1> = <nat:5> * <var:U> \land <var:J2> = <nat:5> * <var:U> \} \, <var:J2> := <var:J2> * <var:f> \, \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:J1> = <nat:5> * <var:U> \land <var:J2> = <nat:5> * <var:U> ^ <nat:2> \} \\ \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:J1> = <nat:5> * <var:U> \land <var:J2> = <nat:5> * <var:U> ^ <nat:2> \} \, <var:S> := <var:J2> \, \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:J1> = <nat:5> * <var:U> \land <var:S> = <nat:5> * <var:U> ^ <nat:2> \} \\ \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:J1> = <nat:5> * <var:U> \land <var:S> = <nat:5> * <var:U> ^ <nat:2> \} \, <var:S> := <var:S> + <var:J1> \, \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:S> = <nat:5> * <var:U> ^ <nat:2> + <nat:5> * <var:U> \} \\ \{ <var:f> = <var:U> \land <var:J0> = <nat:9> \land <var:S> = <nat:5> * <var:U> ^ <nat:2> + <nat:5> * <var:U> \} \, <var:S> := <var:S> + <var:J0\, \{ <var:f> = <var:U> \land <var:S> = <nat:5> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:9> \} \end{eqnarray} This is guaranteed through the variable assignmet scheme of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J0> := <nat:9> ; <var:J1> := <nat:5> ; <var:J1> := <var:J1> * <var:f> ; <var:J2> := <nat:5> ; <var:J2> := <var:J2> * <var:f> ; <var:J2> := <var:J2> * <var:f> ; <var:S> := <var:J2> ; <var:S> := <var:S> + <var:J1> ; <var:S> := <var:S> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:f> = <var:U> }} <def:poly> {{ <var:S> = <nat:5> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:5> * <var:U> /\ <var:J2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:5> * <var:U> /\ <var:J2> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:5> * <var:U> /\ <var:J2> = <nat:5> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:J0> = <nat:9> /\ <var:J1> = <nat:5> * <var:U> /\ <var:S> = <nat:5> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:J0> = <nat:9> /\ <var:S> = <nat:5> * <var:U> ^ <nat:2> + <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:U> /\ <var:S> = <nat:5> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 