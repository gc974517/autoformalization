\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V1> := <var:s> ; <var:V2> := <var:V1> * <var:s> ; <var:V3> := <var:V2> * <var:s> ; <var:V0> := <nat:8> ; <var:V1> := <var:V1> * <nat:2> ; <var:V2> := <var:V2> * <nat:8> ; <var:V3> := <var:V3> * <nat:8> ; <var:Z> := <var:V3> <var:Z> := <var:Z> + <var:V2> <var:Z> := <var:Z> + <var:V1> <var:Z> := <var:Z> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:s> = <var:E> $ ( taking $ <var:E> $ ) prior to executing our series of commands , it follows that we see $ <var:Z> = <nat:8> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:8> $ after set of commands executes . \end{theorem} \begin{proof} Proving correctness for the list of commands can be seen by standard Hoare logic . Focusing on the subsequent pieces of code in the set of commands , \verb | { <var:s> = <var:E> } <var:V1> := <var:s> { <var:s> = <var:E> \land <var:V1> = <var:E> } | , \verb | { <var:s> = <var:E> \land <var:V1> = <var:E> } <var:V2> := <var:V1> * <var:s> { <var:s> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> } | and \verb | { <var:s> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> } <var:V3> := <var:V2> * <var:s> { <var:s> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> \land <var:V3> = <var:E> ^ <nat:3> } | . Looking at the subsequent lines of codecontained in the code , \verb | { <var:s> = <var:E> } <var:V1> := <var:s> { <var:s> = <var:E> \land <var:V1> = <var:E> } | , \verb | { <var:s> = <var:E> \land <var:V1> = <var:E> } <var:V2> := <var:V1> * <var:s> { <var:s> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> } | , \verb | { <var:s> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> } <var:V3> := <var:V2> * <var:s> { <var:s> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> \land <var:V3> = <var:E> ^ <nat:3> } | and \verb | { <var:s> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> \land <var:V3> = <var:E> ^ <nat:3> } <var:V0> := <nat:8> { <var:s> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> \land <var:V3> = <var:E> ^ <nat:3> \land <var:V0> = <nat:8> } | . This is guaranteed with the environment update scheme obtained from usual Hoare logic . Moving forward to the next step , we have \verb | { <var:s> = <var:E> } <var:V1> := <var:s> { <var:s> = <var:E> \land <var:V1> = <var:E> } | . This is shown to be logically sound by the rule defined by usual Hoare techniques . Going to the next step , \verb | { <var:s> = <var:E> } <var:V1> := <var:s> { <var:s> = <var:E> \land <var:V1> = <var:E> } | , \verb | { <var:s> = <var:E> \land <var:V1> = <var:E> } <var:V2> := <var:V1> * <var:s> { <var:s> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> } | and \verb | { <var:s> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> } <var:V3> := <var:V2> * <var:s> { <var:s> = <var:E> \land <var:V1> = <var:E> \land <var:V2> = <var:E> ^ <nat:2> \land <var:V3> = <var:E> ^ <nat:3> } | . This is known to be sound through the variable assignmet inference rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V1> := <var:s> ; <var:V2> := <var:V1> * <var:s> ; <var:V3> := <var:V2> * <var:s> ; <var:V0> := <nat:8> ; <var:V1> := <var:V1> * <nat:2> ; <var:V2> := <var:V2> * <nat:8> ; <var:V3> := <var:V3> * <nat:8> ; <var:Z> := <var:V3> <var:Z> := <var:Z> + <var:V2> <var:Z> := <var:Z> + <var:V1> <var:Z> := <var:Z> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:s> = <var:E> }} <def:poly> {{ <var:Z> = <nat:8> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:V1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:V1> = <var:E> /\ <var:V2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:V1> = <var:E> /\ <var:V2> = <var:E> ^ <nat:2> /\ <var:V3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:V1> = <var:E> /\ <var:V2> = <var:E> ^ <nat:2> /\ <var:V3> = <var:E> ^ <nat:3> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:V1> = <nat:2> * <var:E> /\ <var:V2> = <var:E> ^ <nat:2> /\ <var:V3> = <var:E> ^ <nat:3> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:V1> = <nat:2> * <var:E> /\ <var:V2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:V3> = <var:E> ^ <nat:3> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:V1> = <nat:2> * <var:E> /\ <var:V2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:V3> = <nat:8> * <var:E> ^ <nat:3> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:V1> = <nat:2> * <var:E> /\ <var:V2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:V0> = <nat:8> /\ <var:Z> = <nat:8> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:V1> = <nat:2> * <var:E> /\ <var:V0> = <nat:8> /\ <var:Z> = <nat:8> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:V0> = <nat:8> /\ <var:Z> = <nat:8> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:Z> = <nat:8> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 