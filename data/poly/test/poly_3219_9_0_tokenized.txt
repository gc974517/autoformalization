\begin{document} \begin{theorem} Take the following series of commands as follows \begin{verbatim} <var:n0> := <nat:1> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:a> ; <var:n2> := <nat:7> ; <var:n2> := <var:n2> * <var:a> ; <var:n2> := <var:n2> * <var:a> ; <var:E> := <var:n2> ; <var:E> := <var:E> + <var:n1> ; <var:E> := <var:E> + <var:n0> \end{verbatim} Assuming it to hold that $ <var:a> = <var:U> $ , taking positive integer coefficients $ <var:U> $ , ahead of the evaluation of our list of commands , it follows that we see $ <var:E> = <nat:7> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:1> $ after list of commands is done executing . \end{theorem} \begin{proof} The application of usual Hoare techniques returns : \begin{eqnarray} \{ <var:a> = <var:U> \} \\ <var:n0> := <nat:1> ; \\ \{ <var:a> = <var:U> \land <var:n0> = <nat:1> \} \\ <var:n1> := <nat:5> ; \\ \{ <var:a> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:5> \} \\ <var:n1> := <var:n1> * <var:a> ; \\ \{ <var:a> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:5> * <var:U> \} \end{eqnarray} Advancing running the series of instructions gives us : \begin{eqnarray} <var:n2> := <nat:7> ; \\ \{ <var:a> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:5> * <var:U> \land <var:n2> = <nat:7> \} \\ <var:n2> := <var:n2> * <var:a> ; \\ \{ <var:a> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:5> * <var:U> \land <var:n2> = <nat:7> * <var:U> \} \\ <var:n2> := <var:n2> * <var:a> ; \\ \{ <var:a> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:5> * <var:U> \land <var:n2> = <nat:7> * <var:U> ^ <nat:2> \} \\ <var:E> := <var:n2> ; \\ \{ <var:a> = <var:U> \land <var:n0> = <nat:1> \land <var:n1> = <nat:5> * <var:U> \land <var:E> = <nat:7> * <var:U> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:n1> ; \\ \{ <var:a> = <var:U> \land <var:n0> = <nat:1> \land <var:E> = <nat:7> * <var:U> ^ <nat:2> + <nat:5> * <var:U> \} \\ <var:E> := <var:E> + <var:n0> \\ \{ <var:a> = <var:U> \land <var:E> = <nat:7> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:1> \} \end{eqnarray} Given the above , our list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:a> = <var:U> }} <var:n0> := <nat:1> ; <var:n1> := <nat:5> ; <var:n1> := <var:n1> * <var:a> ; <var:n2> := <nat:7> ; <var:n2> := <var:n2> * <var:a> ; <var:n2> := <var:n2> * <var:a> ; <var:E> := <var:n2> ; <var:E> := <var:E> + <var:n1> ; <var:E> := <var:E> + <var:n0> {{ <var:E> = <nat:7> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:5> * <var:U> /\ <var:n2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:5> * <var:U> /\ <var:n2> = <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:5> * <var:U> /\ <var:n2> = <nat:7> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:n0> = <nat:1> /\ <var:n1> = <nat:5> * <var:U> /\ <var:E> = <nat:7> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:n0> = <nat:1> /\ <var:E> = <nat:7> * <var:U> ^ <nat:2> + <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:E> = <nat:7> * <var:U> ^ <nat:2> + <nat:5> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 