\begin{document} \begin{theorem} Define the following list of instructions such that \begin{verbatim} <var:e0> := <nat:3> ; <var:e1> := <nat:6> ; <var:e1> := <var:e1> * <var:G> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:G> ; <var:e2> := <var:e2> * <var:G> ; <var:e3> := <nat:3> ; <var:e3> := <var:e3> * <var:G> ; <var:e3> := <var:e3> * <var:G> ; <var:e3> := <var:e3> * <var:G> ; <var:n> := <var:e3> ; <var:n> := <var:n> + <var:e2> ; <var:n> := <var:n> + <var:e1> ; <var:n> := <var:n> + <var:e0> \end{verbatim} Allowing that $ <var:G> = <var:N> $ given all positive integers $ <var:N> $ before evaluating this segment of code , it follows that we have $ <var:n> = <nat:3> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:6> \cdot <var:N> + <nat:3> $ once set of commands executes . \end{theorem} \begin{proof} The flow of logic for the series of instructions is done using usual Hoare reasoning . Going forward , \[ \begin{tabular} {rcl} \{ <var:G> = <var:N> \} & <var:e0> := <nat:3> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \} \\ \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \} & <var:e1> := <nat:6> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \} \\ \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \} & <var:e1> := <var:e1> * <var:G> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \times <var:N> \} \\ \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \times <var:N> \} & <var:e2> := <nat:1> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \times <var:N> \land <var:e2> = <nat:1> \} \\ \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \times <var:N> \land <var:e2> = <nat:1> \} & <var:e2> := <var:e2> * <var:G> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \times <var:N> \land <var:e2> = <nat:1> \times <var:N> \} \\ \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \times <var:N> \land <var:e2> = <nat:1> \times <var:N> \} & <var:e2> := <var:e2> * <var:G> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \times <var:N> \land <var:e2> = <nat:1> \times <var:N> ^ <nat:2> \} \end{tabular} Jumping to the next line seen in our program , we have \[ \begin{tabular} {rcl} \{ <var:G> = <var:N> \} & <var:e0> := <nat:3> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \} \end{tabular} This is given by the binding law obtained from typical Hoare techniques . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:G> = <var:N> \} & <var:e0> := <nat:3> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \} \\ \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \} & <var:e1> := <nat:6> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \} \\ \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \} & <var:e1> := <var:e1> * <var:G> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \times <var:N> \} \\ \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \times <var:N> \} & <var:e2> := <nat:1> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \times <var:N> \land <var:e2> = <nat:1> \} \\ \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \times <var:N> \land <var:e2> = <nat:1> \} & <var:e2> := <var:e2> * <var:G> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:6> \times <var:N> \land <var:e2> = <nat:1> \times <var:N> \} \end{tabular} This is guaranteed through the assignment law given by Hoare reasoning . Next , \[ \begin{tabular} {rcl} \{ <var:G> = <var:N> \} & <var:e0> := <nat:3> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \} \end{tabular} This is guaranteed with the environment update rule defined in standard Hoare reasoning . Looking at the following piece of code found in our series of commands , \[ \begin{tabular} {rcl} \{ <var:G> = <var:N> \} & <var:e0> := <nat:3> & \{ <var:G> = <var:N> \land <var:e0> = <nat:3> \} \end{tabular} This is given with the law in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:G> = <var:N> }} <var:e0> := <nat:3> ; <var:e1> := <nat:6> ; <var:e1> := <var:e1> * <var:G> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:G> ; <var:e2> := <var:e2> * <var:G> ; <var:e3> := <nat:3> ; <var:e3> := <var:e3> * <var:G> ; <var:e3> := <var:e3> * <var:G> ; <var:e3> := <var:e3> * <var:G> ; <var:n> := <var:e3> ; <var:n> := <var:n> + <var:e2> ; <var:n> := <var:n> + <var:e1> ; <var:n> := <var:n> + <var:e0> {{ <var:n> = <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:6> * <var:N> /\ <var:e2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:6> * <var:N> /\ <var:e2> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:6> * <var:N> /\ <var:e2> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:6> * <var:N> /\ <var:e2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:e3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:6> * <var:N> /\ <var:e2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:6> * <var:N> /\ <var:e2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:6> * <var:N> /\ <var:e2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:6> * <var:N> /\ <var:e2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:n> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:6> * <var:N> /\ <var:n> = <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:e0> = <nat:3> /\ <var:n> = <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:n> = <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 