\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:6> ; <var:F1> := <nat:7> ; <var:F1> := <var:F1> * <var:R> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:R> ; <var:F2> := <var:F2> * <var:R> ; <var:V> := <var:F2> ; <var:V> := <var:V> + <var:F1> ; <var:V> := <var:V> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allowing for some integers $ <var:E> $ it to hold that $ <var:R> = <var:E> $ ahead of the evaluation of this list of instructions , it follows that $ <var:V> = <nat:1> \cdot <var:E> ^ <nat:2> + <nat:7> \cdot <var:E> + <nat:6> $ when program has finished executing . \end{theorem} \begin{proof} The proof of the series of instructions is evident with standard Hoare logic . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:R> = <var:E> \} & <var:F0> := <nat:6> & \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \} \\ \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \} & <var:F1> := <nat:7> & \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \land <var:F1> = <nat:7> \} \\ \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \land <var:F1> = <nat:7> \} & <var:F1> := <var:F1> * <var:R> & \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \land <var:F1> = <nat:7> \times <var:E> \} \\ \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \land <var:F1> = <nat:7> \times <var:E> \} & <var:F2> := <nat:1> & \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \land <var:F1> = <nat:7> \times <var:E> \land <var:F2> = <nat:1> \} \\ \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \land <var:F1> = <nat:7> \times <var:E> \land <var:F2> = <nat:1> \} & <var:F2> := <var:F2> * <var:R> & \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \land <var:F1> = <nat:7> \times <var:E> \land <var:F2> = <nat:1> \times <var:E> \} \\ \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \land <var:F1> = <nat:7> \times <var:E> \land <var:F2> = <nat:1> \times <var:E> \} & <var:F2> := <var:F2> * <var:R> & \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \land <var:F1> = <nat:7> \times <var:E> \land <var:F2> = <nat:1> \times <var:E> ^ <nat:2> \} \end{tabular} This is given using the binding law obtained from Hoare techniques . Now , we see \[ \begin{tabular} {rcl} \{ <var:R> = <var:E> \} & <var:F0> := <nat:6> & \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \} \\ \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \} & <var:F1> := <nat:7> & \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \land <var:F1> = <nat:7> \} \end{tabular} This is deduced by the environment update law defined by typical Hoare techniques . After , \[ \begin{tabular} {rcl} \{ <var:R> = <var:E> \} & <var:F0> := <nat:6> & \{ <var:R> = <var:E> \land <var:F0> = <nat:6> \} \end{tabular} This is rigorously given through the variable assignmet law given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F0> := <nat:6> ; <var:F1> := <nat:7> ; <var:F1> := <var:F1> * <var:R> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:R> ; <var:F2> := <var:F2> * <var:R> ; <var:V> := <var:F2> ; <var:V> := <var:V> + <var:F1> ; <var:V> := <var:V> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:R> = <var:E> }} <def:poly> {{ <var:V> = <nat:1> * <var:E> ^ <nat:2> + <nat:7> * <var:E> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:E> /\ <var:F0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:E> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:E> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:7> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:E> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:7> * <var:E> /\ <var:F2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:E> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:7> * <var:E> /\ <var:F2> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:E> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:7> * <var:E> /\ <var:F2> = <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:E> /\ <var:F0> = <nat:6> /\ <var:F1> = <nat:7> * <var:E> /\ <var:V> = <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:E> /\ <var:F0> = <nat:6> /\ <var:V> = <nat:1> * <var:E> ^ <nat:2> + <nat:7> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:E> /\ <var:V> = <nat:1> * <var:E> ^ <nat:2> + <nat:7> * <var:E> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 