\begin{document} \begin{theorem} Let the following set of commands : \begin{verbatim} <var:A1> := <var:O> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:1> ; <var:h> := <var:A1> <var:h> := <var:h> + <var:A0> \end{verbatim} Assuming it to hold that $ <var:O> = <var:o> $ for integers $ <var:o> $ ahead of the evaluation of the list of commands it follows that we have $ <var:h> = <nat:1> * <var:o> + <nat:4> $ . \end{theorem} \begin{proof} Applying typical Hoare logic gives : \begin{eqnarray} \{ <var:O> = <var:o> \} \\ <var:A1> := <var:O> ; \\ \{ <var:O> = <var:o> \land <var:A1> = <var:o> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:O> = <var:o> \land <var:A1> = <var:o> \land <var:A0> = <nat:4> \} \\ <var:A1> := <var:A1> * <nat:1> ; \\ \{ <var:O> = <var:o> \land <var:A1> = <nat:1> * <var:o> \land <var:A0> = <nat:4> \} \\ <var:h> := <var:A1> \\ \{ <var:O> = <var:o> \land <var:A0> = <nat:4> \land <var:h> = <nat:1> * <var:o> \} \\ <var:h> := <var:h> + <var:A0> \\ \{ <var:O> = <var:o> \land <var:h> = <nat:1> * <var:o> + <nat:4> \} \end{eqnarray} Therefore , our series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:O> = <var:o> }} <var:A1> := <var:O> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:1> ; <var:h> := <var:A1> <var:h> := <var:h> + <var:A0> {{ <var:h> = <nat:1> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:A1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:A1> = <var:o> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:A1> = <nat:1> * <var:o> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:A0> = <nat:4> /\ <var:h> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:o> /\ <var:h> = <nat:1> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 