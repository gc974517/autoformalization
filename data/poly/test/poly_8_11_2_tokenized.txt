\begin{document} \begin{theorem} We define the following set of instructions such that \begin{verbatim} <var:z> := <nat:2> ; <var:z> := <nat:4> + <var:z> * <var:w> ; <var:z> := <nat:3> + <var:z> * <var:w> ; <var:z> := <nat:2> + <var:z> * <var:w> ; <var:z> := <nat:1> + <var:z> * <var:w> ; <var:z> := <nat:3> + <var:z> * <var:w> ; <var:z> := <var:z> * <var:w> ; <var:z> := <nat:1> + <var:z> * <var:w> ; <var:z> := <nat:2> + <var:z> * <var:w> ; <var:z> := <nat:2> + <var:z> * <var:w> ; <var:z> := <nat:4> + <var:z> * <var:w> \end{verbatim} Given --- given positive integers $ <var:Z> $ --- it to be that $ <var:w> = <var:Z> $ prior to evaluating our series of instructions it follows that we have $ <var:z> = <nat:2> * <var:Z> ^ <nat:10> + <nat:4> * <var:Z> ^ <nat:9> + <nat:3> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:7> + <nat:1> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions is done through Hoare techniques . Following , we have \begin{verbatim} { <var:w> = <var:Z> } <var:z> := <nat:2> { <var:w> = <var:Z> \land <var:z> = <nat:2> } { <var:w> = <var:Z> \land <var:z> = <nat:2> } <var:z> := <nat:4> + <var:z> * <var:w> { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> + <nat:4> } { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> + <nat:4> } <var:z> := <nat:3> + <var:z> * <var:w> { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:3> } { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:3> } <var:z> := <nat:2> + <var:z> * <var:w> { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + <nat:2> } { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + <nat:2> } <var:z> := <nat:1> + <var:z> * <var:w> { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:4> \cdot <var:Z> ^ <nat:3> + <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:1> } { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:4> \cdot <var:Z> ^ <nat:3> + <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:1> } <var:z> := <nat:3> + <var:z> * <var:w> { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:4> \cdot <var:Z> ^ <nat:4> + <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:3> } { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:4> \cdot <var:Z> ^ <nat:4> + <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:1> \cdot <var:Z> + <nat:3> } <var:z> := <var:z> * <var:w> { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> ^ <nat:6> + <nat:4> \cdot <var:Z> ^ <nat:5> + <nat:3> \cdot <var:Z> ^ <nat:4> + <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + } { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> ^ <nat:6> + <nat:4> \cdot <var:Z> ^ <nat:5> + <nat:3> \cdot <var:Z> ^ <nat:4> + <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + } <var:z> := <nat:1> + <var:z> * <var:w> { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> ^ <nat:7> + <nat:4> \cdot <var:Z> ^ <nat:6> + <nat:3> \cdot <var:Z> ^ <nat:5> + <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:1> } { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> ^ <nat:7> + <nat:4> \cdot <var:Z> ^ <nat:6> + <nat:3> \cdot <var:Z> ^ <nat:5> + <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:1> } <var:z> := <nat:2> + <var:z> * <var:w> { <var:w> = <var:Z> \land <var:z> = <nat:2> \cdot <var:Z> ^ <nat:8> + <nat:4> \cdot <var:Z> ^ <nat:7> + <nat:3> \cdot <var:Z> ^ <nat:6> + <nat:2> \cdot <var:Z> ^ <nat:5> + <nat:1> \cdot <var:Z> ^ <nat:4> + <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> + <nat:2> } \end{verbatim} This is guaranteed by the variable binding law obtained from standard Hoare reasoning . Taking another step toward the subsequent step found in our series of commands , we have \begin{verbatim} { <var:w> = <var:Z> } <var:z> := <nat:2> { <var:w> = <var:Z> \land <var:z> = <nat:2> } \end{verbatim} This is rigorously given using the binding scheme of Hoare logic . Taking a look at the subsequent bit of code found in our list of instructions , we see \begin{verbatim} { <var:w> = <var:Z> } <var:z> := <nat:2> { <var:w> = <var:Z> \land <var:z> = <nat:2> } \end{verbatim} This is deduced using the variable assignmet law defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:w> = <var:Z> }} <var:z> := <nat:2> ; <var:z> := <nat:4> + <var:z> * <var:w> ; <var:z> := <nat:3> + <var:z> * <var:w> ; <var:z> := <nat:2> + <var:z> * <var:w> ; <var:z> := <nat:1> + <var:z> * <var:w> ; <var:z> := <nat:3> + <var:z> * <var:w> ; <var:z> := <var:z> * <var:w> ; <var:z> := <nat:1> + <var:z> * <var:w> ; <var:z> := <nat:2> + <var:z> * <var:w> ; <var:z> := <nat:2> + <var:z> * <var:w> ; <var:z> := <nat:4> + <var:z> * <var:w> {{ <var:z> = <nat:2> * <var:Z> ^ <nat:10> + <nat:4> * <var:Z> ^ <nat:9> + <nat:3> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:7> + <nat:1> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:z> = <nat:2> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:z> = <nat:2> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:z> = <nat:2> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:z> = <nat:2> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:z> = <nat:2> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:z> = <nat:2> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:z> = <nat:2> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:z> = <nat:2> * <var:Z> ^ <nat:8> + <nat:4> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:2> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:z> = <nat:2> * <var:Z> ^ <nat:9> + <nat:4> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:7> + <nat:2> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:z> = <nat:2> * <var:Z> ^ <nat:10> + <nat:4> * <var:Z> ^ <nat:9> + <nat:3> * <var:Z> ^ <nat:8> + <nat:2> * <var:Z> ^ <nat:7> + <nat:1> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 