\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:1> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:E> ; <var:z2> := <nat:2> ; <var:z2> := <var:z2> * <var:E> ; <var:z2> := <var:z2> * <var:E> ; <var:x> := <var:z2> ; <var:x> := <var:x> + <var:z1> ; <var:x> := <var:x> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Assuming $ <var:E> = <var:U> $ prior to evaluating this code , then we have $ <var:x> = <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> $ after segment of code has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:U> \} \\ <var:z0> := <nat:1> ; \\ \{ <var:E> = <var:U> \land <var:z0> = <nat:1> \} \\ <var:z1> := <nat:2> ; \\ \{ <var:E> = <var:U> \land <var:z0> = <nat:1> \land <var:z1> = <nat:2> \} \\ <var:z1> := <var:z1> * <var:E> ; \\ \{ <var:E> = <var:U> \land <var:z0> = <nat:1> \land <var:z1> = <nat:2> \times <var:U> \} \\ <var:z2> := <nat:2> ; \\ \{ <var:E> = <var:U> \land <var:z0> = <nat:1> \land <var:z1> = <nat:2> \times <var:U> \land <var:z2> = <nat:2> \} \\ <var:z2> := <var:z2> * <var:E> ; \\ \{ <var:E> = <var:U> \land <var:z0> = <nat:1> \land <var:z1> = <nat:2> \times <var:U> \land <var:z2> = <nat:2> \times <var:U> \} \\ <var:z2> := <var:z2> * <var:E> ; \\ \{ <var:E> = <var:U> \land <var:z0> = <nat:1> \land <var:z1> = <nat:2> \times <var:U> \land <var:z2> = <nat:2> \times <var:U> ^ <nat:2> \} \\ <var:x> := <var:z2> ; \\ \{ <var:E> = <var:U> \land <var:z0> = <nat:1> \land <var:z1> = <nat:2> \times <var:U> \land <var:x> = <nat:2> \times <var:U> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:z1> ; \\ \{ <var:E> = <var:U> \land <var:z0> = <nat:1> \land <var:x> = <nat:2> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> \} \\ <var:x> := <var:x> + <var:z0> \\ \{ <var:E> = <var:U> \land <var:x> = <nat:2> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:1> \} \end{eqnarray} Applying usual Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z0> := <nat:1> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:E> ; <var:z2> := <nat:2> ; <var:z2> := <var:z2> * <var:E> ; <var:z2> := <var:z2> * <var:E> ; <var:x> := <var:z2> ; <var:x> := <var:x> + <var:z1> ; <var:x> := <var:x> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:E> = <var:U> }} <def:poly> {{ <var:x> = <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:2> * <var:U> /\ <var:z2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:2> * <var:U> /\ <var:z2> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:2> * <var:U> /\ <var:z2> = <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:2> * <var:U> /\ <var:x> = <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:z0> = <nat:1> /\ <var:x> = <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:U> /\ <var:x> = <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 