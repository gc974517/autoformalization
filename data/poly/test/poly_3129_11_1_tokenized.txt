\begin{document} \begin{theorem} Define the following set of commands such that \begin{verbatim} <var:t1> := <var:k> ; <var:t2> := <var:t1> * <var:k> ; <var:t3> := <var:t2> * <var:k> ; <var:t0> := <nat:7> ; <var:t1> := <var:t1> * <nat:6> ; <var:t2> := <var:t2> * <nat:3> ; <var:t3> := <var:t3> * <nat:2> ; <var:F> := <var:t3> <var:F> := <var:F> + <var:t2> <var:F> := <var:F> + <var:t1> <var:F> := <var:F> + <var:t0> \end{verbatim} Allowing that $ <var:k> = <var:N> $ prior to executing this series of instructions then we have $ <var:F> = <nat:2> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:6> \times <var:N> + <nat:7> $ after list of instructions is done executing . \end{theorem} \begin{proof} The proof of this segment of code can be shown through usual Hoare techniques . Moving forward , \begin{verbatim} { <var:k> = <var:N> } <var:t1> := <var:k> { <var:k> = <var:N> \land <var:t1> = <var:N> } \end{verbatim} This is sound with the variable assignmet law of standard Hoare logic . Jumping to the following lines contained in our list of instructions , \begin{verbatim} { <var:k> = <var:N> } <var:t1> := <var:k> { <var:k> = <var:N> \land <var:t1> = <var:N> } { <var:k> = <var:N> \land <var:t1> = <var:N> } <var:t2> := <var:t1> * <var:k> { <var:k> = <var:N> \land <var:t1> = <var:N> \land <var:t2> = <var:N> ^ <nat:2> } { <var:k> = <var:N> \land <var:t1> = <var:N> \land <var:t2> = <var:N> ^ <nat:2> } <var:t3> := <var:t2> * <var:k> { <var:k> = <var:N> \land <var:t1> = <var:N> \land <var:t2> = <var:N> ^ <nat:2> \land <var:t3> = <var:N> ^ <nat:3> } \end{verbatim} This is given using the variable update scheme found in usual Hoare logic . Honing in on the next bits of codein our set of commands , \begin{verbatim} { <var:k> = <var:N> } <var:t1> := <var:k> { <var:k> = <var:N> \land <var:t1> = <var:N> } { <var:k> = <var:N> \land <var:t1> = <var:N> } <var:t2> := <var:t1> * <var:k> { <var:k> = <var:N> \land <var:t1> = <var:N> \land <var:t2> = <var:N> ^ <nat:2> } \end{verbatim} This is ensured by the inference rule obtained from typical Hoare logic . Next , we have \begin{verbatim} { <var:k> = <var:N> } <var:t1> := <var:k> { <var:k> = <var:N> \land <var:t1> = <var:N> } \end{verbatim} This is known to be sound using the variable update rule given in standard Hoare techniques . Advancing on , we see \begin{verbatim} { <var:k> = <var:N> } <var:t1> := <var:k> { <var:k> = <var:N> \land <var:t1> = <var:N> } { <var:k> = <var:N> \land <var:t1> = <var:N> } <var:t2> := <var:t1> * <var:k> { <var:k> = <var:N> \land <var:t1> = <var:N> \land <var:t2> = <var:N> ^ <nat:2> } \end{verbatim} This is rigorously given using the law defined in typical Hoare logic . Jumping to the next line in our program , we have \begin{verbatim} { <var:k> = <var:N> } <var:t1> := <var:k> { <var:k> = <var:N> \land <var:t1> = <var:N> } \end{verbatim} Observing the upcoming line found in the series of commands , we have \begin{verbatim} { <var:k> = <var:N> } <var:t1> := <var:k> { <var:k> = <var:N> \land <var:t1> = <var:N> } \end{verbatim} This is known to be sound through the variable binding scheme defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:k> = <var:N> }} <var:t1> := <var:k> ; <var:t2> := <var:t1> * <var:k> ; <var:t3> := <var:t2> * <var:k> ; <var:t0> := <nat:7> ; <var:t1> := <var:t1> * <nat:6> ; <var:t2> := <var:t2> * <nat:3> ; <var:t3> := <var:t3> * <nat:2> ; <var:F> := <var:t3> <var:F> := <var:F> + <var:t2> <var:F> := <var:F> + <var:t1> <var:F> := <var:F> + <var:t0> {{ <var:F> = <nat:2> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:t1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:t1> = <var:N> /\ <var:t2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:t1> = <var:N> /\ <var:t2> = <var:N> ^ <nat:2> /\ <var:t3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:t1> = <var:N> /\ <var:t2> = <var:N> ^ <nat:2> /\ <var:t3> = <var:N> ^ <nat:3> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:t1> = <nat:6> * <var:N> /\ <var:t2> = <var:N> ^ <nat:2> /\ <var:t3> = <var:N> ^ <nat:3> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:t1> = <nat:6> * <var:N> /\ <var:t2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:t3> = <var:N> ^ <nat:3> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:t1> = <nat:6> * <var:N> /\ <var:t2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:N> ^ <nat:3> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:t1> = <nat:6> * <var:N> /\ <var:t2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:t0> = <nat:7> /\ <var:F> = <nat:2> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:t1> = <nat:6> * <var:N> /\ <var:t0> = <nat:7> /\ <var:F> = <nat:2> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:t0> = <nat:7> /\ <var:F> = <nat:2> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:F> = <nat:2> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 