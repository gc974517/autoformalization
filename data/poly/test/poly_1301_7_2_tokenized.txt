\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:o> := <nat:4> ; <var:o> := <nat:3> + <var:o> * <var:a> ; <var:o> := <var:o> * <var:a> ; <var:o> := <var:o> * <var:a> ; <var:o> := <nat:4> + <var:o> * <var:a> ; <var:o> := <nat:1> + <var:o> * <var:a> ; <var:o> := <nat:2> + <var:o> * <var:a> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:a> = <var:P> $ prior to the execution of our program then we see $ <var:o> = <nat:4> \times <var:P> ^ <nat:6> + <nat:3> \times <var:P> ^ <nat:5> + <nat:4> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of the code segment is shown by Hoare techniques . Shifting focus toward the upcoming step found in the list of commands , we see the environment update statement defining $ <nat:4> $ as $ <var:o>$ . This moves the condition $ \{ <var:a> = <var:P> \} $ as the postcondition $ \{ <var:a> = <var:P> \land <var:o> = <nat:4> \} $ . Observing the following command in our set of commands , we see the variable binding line \verb | <var:o> := <nat:3> + <var:o> * <var:a> ; | . This redefines $ \{ <var:a> = <var:P> \land <var:o> = <nat:4> \} $ as $ \{ <var:a> = <var:P> \land <var:o> = <nat:4> \times <var:P> + <nat:3> \} $ . Next , we see the variable update code \verb | <var:o> := <var:o> * <var:a> ; | . This command takes the condition $ \{ <var:a> = <var:P> \land <var:o> = <nat:4> \times <var:P> + <nat:3> \} $ as the postcondition $ \{ <var:a> = <var:P> \land <var:o> = <nat:4> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + \} $ . This is given through the assignment rule in usual Hoare logic . Moving on , we see the environment update command assigning $ <var:o> * <var:a> $ into $ <var:o>$ . This code moves the condition $ \{ <var:a> = <var:P> \land <var:o> = <nat:4> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + \} $ as the postcondition $ \{ <var:a> = <var:P> \land <var:o> = <nat:4> \times <var:P> ^ <nat:3> + <nat:3> \times <var:P> ^ <nat:2> + \} $ . Jumping to the proceeding bit of code in the segment of code , the statement assigning $ <nat:4> + <var:o> * <var:a> $ into $ <var:o>$ . This line redefines the condition $ \{ <var:a> = <var:P> \land <var:o> = <nat:4> \times <var:P> ^ <nat:3> + <nat:3> \times <var:P> ^ <nat:2> + \} $ as $ \{ <var:a> = <var:P> \land <var:o> = <nat:4> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:3> + <nat:4> \} $ . This is known to be sound by the assignment inference rule defined by standard Hoare reasoning . Honing in on the next piece of code seen in the set of instructions , the variable assignmet statement assigning $ <nat:1> + <var:o> * <var:a> $ to $ <var:o>$ . This command takes the condition $ \{ <var:a> = <var:P> \land <var:o> = <nat:4> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:3> + <nat:4> \} $ as the postcondition $ \{ <var:a> = <var:P> \land <var:o> = <nat:4> \times <var:P> ^ <nat:5> + <nat:3> \times <var:P> ^ <nat:4> + <nat:4> \times <var:P> + <nat:1> \} $ . Further , we see the variable assignmet line yielding $ <nat:2> + <var:o> * <var:a$ as $ <var:o>$ . This line forwards the condition $ \{ <var:a> = <var:P> \land <var:o> = <nat:4> \times <var:P> ^ <nat:5> + <nat:3> \times <var:P> ^ <nat:4> + <nat:4> \times <var:P> + <nat:1> \} $ to the postcondition $ \{ <var:a> = <var:P> \land <var:o> = <nat:4> \times <var:P> ^ <nat:6> + <nat:3> \times <var:P> ^ <nat:5> + <nat:4> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:2> \} $ . This is deduced by the assignment law in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:4> ; <var:o> := <nat:3> + <var:o> * <var:a> ; <var:o> := <var:o> * <var:a> ; <var:o> := <var:o> * <var:a> ; <var:o> := <nat:4> + <var:o> * <var:a> ; <var:o> := <nat:1> + <var:o> * <var:a> ; <var:o> := <nat:2> + <var:o> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:a> = <var:P> }} <def:poly> {{ <var:o> = <nat:4> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:o> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:o> = <nat:4> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:o> = <nat:4> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:o> = <nat:4> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:o> = <nat:4> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:o> = <nat:4> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:4> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:o> = <nat:4> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 