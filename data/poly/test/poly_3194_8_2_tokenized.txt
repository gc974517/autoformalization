\begin{document} \begin{theorem} Take the following code segment : \begin{verbatim} <var:f> := <nat:2> ; <var:f> := <nat:4> + <var:f> * <var:S> ; <var:f> := <nat:4> + <var:f> * <var:S> ; <var:f> := <nat:3> + <var:f> * <var:S> ; <var:f> := <nat:4> + <var:f> * <var:S> ; <var:f> := <var:f> * <var:S> ; <var:f> := <nat:4> + <var:f> * <var:S> ; <var:f> := <nat:4> + <var:f> * <var:S> \end{verbatim} Allowing it to be that $ <var:S> = <var:U> $ before executing the program it follows that $ <var:f> = <nat:2> \cdot <var:U> ^ <nat:7> + <nat:4> \cdot <var:U> ^ <nat:6> + <nat:4> \cdot <var:U> ^ <nat:5> + <nat:3> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> + <nat:4> $ when series of commands is done . \end{theorem} \begin{proof} The course of logic for our list of commands is clear by Hoare techniques . Immediately following , we see the assignment command \verb | <var:f> := <nat:2> ; | . This takes the condition $ \{ <var:S> = <var:U> \} $ toward the postcondition $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \} $ . Observing the upcoming statement found in the list of commands , the variable update command binding $ <nat:4> + <var:f> * <var:S> $ toward $ <var:f>$ . This line advances the condition $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \} $ to the postcondition $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> + <nat:4> \} $ . This is given by the assignment inference rule given in Hoare techniques . Taking a look at the next piece of code contained in our code , the variable assignmet command \verb | <var:f> := <nat:4> + <var:f> * <var:S> ; | . This code takes the condition $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> + <nat:4> \} $ toward the postcondition $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:4> \} $ . This is guaranteed through the assignment scheme given in Hoare reasoning . Honing in on the following bit of code in the program , we see the binding command giving $ <nat:3> + <var:f> * <var:S> $ toward $ <var:f>$ . This line advances $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:4> \} $ to the condition $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:3> \} $ . This is sound using the assignment law from standard Hoare logic . Going to the next step , the variable binding code \verb | <var:f> := <nat:4> + <var:f> * <var:S> ; | . This statement moves $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:3> \} $ to the postcondition $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:4> \} $ . This is shown to be logically sound by the assignment law of standard Hoare techniques . Now , we see the variable update code \verb | <var:f> := <var:f> * <var:S> ; | . This command redefines the precondition $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:4> \} $ into the condition $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:5> + <nat:4> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:3> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + \} $ . Moving on to the next step , the variable assignmet statement defining $ <nat:4> + <var:f> * <var:S> $ to $ <var:f>$ . This statement moves the precondition $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:5> + <nat:4> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:3> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + \} $ as the condition $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:6> + <nat:4> \cdot <var:U> ^ <nat:5> + <nat:4> \cdot <var:U> ^ <nat:4> + <nat:3> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:4> \} $ . This is deduced through the assignment inference rule defined in typical Hoare logic . Immediately following , we have the variable binding statement \verb | <var:f> := <nat:4> + <var:f> * <var:S> | . This statement redefines $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:6> + <nat:4> \cdot <var:U> ^ <nat:5> + <nat:4> \cdot <var:U> ^ <nat:4> + <nat:3> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:4> \} $ into $ \{ <var:S> = <var:U> \land <var:f> = <nat:2> \cdot <var:U> ^ <nat:7> + <nat:4> \cdot <var:U> ^ <nat:6> + <nat:4> \cdot <var:U> ^ <nat:5> + <nat:3> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:4> \cdot <var:U> + <nat:4> \} $ . This is ensured by the assignment rule in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:S> = <var:U> }} <var:f> := <nat:2> ; <var:f> := <nat:4> + <var:f> * <var:S> ; <var:f> := <nat:4> + <var:f> * <var:S> ; <var:f> := <nat:3> + <var:f> * <var:S> ; <var:f> := <nat:4> + <var:f> * <var:S> ; <var:f> := <var:f> * <var:S> ; <var:f> := <nat:4> + <var:f> * <var:S> ; <var:f> := <nat:4> + <var:f> * <var:S> {{ <var:f> = <nat:2> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:U> /\ <var:f> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:U> /\ <var:f> = <nat:2> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:U> /\ <var:f> = <nat:2> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 