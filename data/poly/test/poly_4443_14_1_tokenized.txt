\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} : \begin{verbatim} <var:j1> := <var:T> ; <var:j2> := <var:j1> * <var:T> ; <var:j3> := <var:j2> * <var:T> ; <var:j4> := <var:j3> * <var:T> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:1> ; <var:j2> := <var:j2> * <nat:1> ; <var:j3> := <var:j3> * <nat:3> ; <var:j4> := <var:j4> * <nat:4> ; <var:d> := <var:j4> <var:d> := <var:d> + <var:j3> <var:d> := <var:d> + <var:j2> <var:d> := <var:d> + <var:j1> <var:d> := <var:d> + <var:j0> \end{verbatim} Allow it to hold that $ <var:T> = <var:X> $ prior to interpreting our segment of code , it holds that we see $ <var:d> = <nat:4> \cdot <var:X> ^ <nat:4> + <nat:3> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:1> $ after set of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:X> \} \\ <var:j1> := <var:T> ; \\ \{ <var:T> = <var:X> \land <var:j1> = <var:X> \} \\ <var:j2> := <var:j1> * <var:T> ; \\ \{ <var:T> = <var:X> \land <var:j1> = <var:X> \land <var:j2> = <var:X> ^ <nat:2> \} \\ <var:j3> := <var:j2> * <var:T> ; \\ \{ <var:T> = <var:X> \land <var:j1> = <var:X> \land <var:j2> = <var:X> ^ <nat:2> \land <var:j3> = <var:X> ^ <nat:3> \} \\ <var:j4> := <var:j3> * <var:T> ; \\ \{ <var:T> = <var:X> \land <var:j1> = <var:X> \land <var:j2> = <var:X> ^ <nat:2> \land <var:j3> = <var:X> ^ <nat:3> \land <var:j4> = <var:X> ^ <nat:4> \} \\ <var:j0> := <nat:1> ; \\ \{ <var:T> = <var:X> \land <var:j1> = <var:X> \land <var:j2> = <var:X> ^ <nat:2> \land <var:j3> = <var:X> ^ <nat:3> \land <var:j4> = <var:X> ^ <nat:4> \land <var:j0> = <nat:1> \} \\ <var:j1> := <var:j1> * <nat:1> ; \\ \{ <var:T> = <var:X> \land <var:j1> = <nat:1> \cdot <var:X> \land <var:j2> = <var:X> ^ <nat:2> \land <var:j3> = <var:X> ^ <nat:3> \land <var:j4> = <var:X> ^ <nat:4> \land <var:j0> = <nat:1> \} \\ <var:j2> := <var:j2> * <nat:1> ; \\ \{ <var:T> = <var:X> \land <var:j1> = <nat:1> \cdot <var:X> \land <var:j2> = <nat:1> \cdot <var:X> ^ <nat:2> \land <var:j3> = <var:X> ^ <nat:3> \land <var:j4> = <var:X> ^ <nat:4> \land <var:j0> = <nat:1> \} \\ <var:j3> := <var:j3> * <nat:3> ; \\ \{ <var:T> = <var:X> \land <var:j1> = <nat:1> \cdot <var:X> \land <var:j2> = <nat:1> \cdot <var:X> ^ <nat:2> \land <var:j3> = <nat:3> \cdot <var:X> ^ <nat:3> \land <var:j4> = <var:X> ^ <nat:4> \land <var:j0> = <nat:1> \} \\ <var:j4> := <var:j4> * <nat:4> ; \\ \{ <var:T> = <var:X> \land <var:j1> = <nat:1> \cdot <var:X> \land <var:j2> = <nat:1> \cdot <var:X> ^ <nat:2> \land <var:j3> = <nat:3> \cdot <var:X> ^ <nat:3> \land <var:j4> = <nat:4> \cdot <var:X> ^ <nat:4> \land <var:j0> = <nat:1> \} \\ <var:d> := <var:j4> \\ \{ <var:T> = <var:X> \land <var:j1> = <nat:1> \cdot <var:X> \land <var:j2> = <nat:1> \cdot <var:X> ^ <nat:2> \land <var:j3> = <nat:3> \cdot <var:X> ^ <nat:3> \land <var:j0> = <nat:1> \land <var:d> = <nat:4> \cdot <var:X> ^ <nat:4> \} \\ <var:d> := <var:d> + <var:j3> \\ \{ <var:T> = <var:X> \land <var:j1> = <nat:1> \cdot <var:X> \land <var:j2> = <nat:1> \cdot <var:X> ^ <nat:2> \land <var:j0> = <nat:1> \land <var:d> = <nat:4> \cdot <var:X> ^ <nat:4> + <nat:3> \cdot <var:X> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:j2> \\ \{ <var:T> = <var:X> \land <var:j1> = <nat:1> \cdot <var:X> \land <var:j0> = <nat:1> \land <var:d> = <nat:4> \cdot <var:X> ^ <nat:4> + <nat:3> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:j1> \\ \{ <var:T> = <var:X> \land <var:j0> = <nat:1> \land <var:d> = <nat:4> \cdot <var:X> ^ <nat:4> + <nat:3> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> \} \\ <var:d> := <var:d> + <var:j0> \\ \{ <var:T> = <var:X> \land <var:d> = <nat:4> \cdot <var:X> ^ <nat:4> + <nat:3> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:1> \} \end{eqnarray} The application of usual Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <var:j4> : string := " <var:j4> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:T> = <var:X> }} <var:j1> := <var:T> ; <var:j2> := <var:j1> * <var:T> ; <var:j3> := <var:j2> * <var:T> ; <var:j4> := <var:j3> * <var:T> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:1> ; <var:j2> := <var:j2> * <nat:1> ; <var:j3> := <var:j3> * <nat:3> ; <var:j4> := <var:j4> * <nat:4> ; <var:d> := <var:j4> <var:d> := <var:d> + <var:j3> <var:d> := <var:d> + <var:j2> <var:d> := <var:d> + <var:j1> <var:d> := <var:d> + <var:j0> {{ <var:d> = <nat:4> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:j1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:j1> = <var:X> /\ <var:j2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:j1> = <var:X> /\ <var:j2> = <var:X> ^ <nat:2> /\ <var:j3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:j1> = <var:X> /\ <var:j2> = <var:X> ^ <nat:2> /\ <var:j3> = <var:X> ^ <nat:3> /\ <var:j4> = <var:X> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:j1> = <var:X> /\ <var:j2> = <var:X> ^ <nat:2> /\ <var:j3> = <var:X> ^ <nat:3> /\ <var:j4> = <var:X> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:j1> = <nat:1> * <var:X> /\ <var:j2> = <var:X> ^ <nat:2> /\ <var:j3> = <var:X> ^ <nat:3> /\ <var:j4> = <var:X> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:j1> = <nat:1> * <var:X> /\ <var:j2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:j3> = <var:X> ^ <nat:3> /\ <var:j4> = <var:X> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:j1> = <nat:1> * <var:X> /\ <var:j2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:j3> = <nat:3> * <var:X> ^ <nat:3> /\ <var:j4> = <var:X> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:j1> = <nat:1> * <var:X> /\ <var:j2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:j3> = <nat:3> * <var:X> ^ <nat:3> /\ <var:j4> = <nat:4> * <var:X> ^ <nat:4> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:j1> = <nat:1> * <var:X> /\ <var:j2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:j3> = <nat:3> * <var:X> ^ <nat:3> /\ <var:j0> = <nat:1> /\ <var:d> = <nat:4> * <var:X> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:j1> = <nat:1> * <var:X> /\ <var:j2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:j0> = <nat:1> /\ <var:d> = <nat:4> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:j1> = <nat:1> * <var:X> /\ <var:j0> = <nat:1> /\ <var:d> = <nat:4> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:j0> = <nat:1> /\ <var:d> = <nat:4> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:d> = <nat:4> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 