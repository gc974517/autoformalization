\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} such that \begin{verbatim} <var:j> := <nat:3> ; <var:j> := <nat:1> + <var:j> * <var:P> ; <var:j> := <nat:1> + <var:j> * <var:P> ; <var:j> := <nat:3> + <var:j> * <var:P> ; <var:j> := <nat:2> + <var:j> * <var:P> ; <var:j> := <nat:3> + <var:j> * <var:P> ; <var:j> := <nat:2> + <var:j> * <var:P> ; <var:j> := <var:j> * <var:P> ; <var:j> := <nat:2> + <var:j> * <var:P> \end{verbatim} Given that $ <var:P> = <var:h> $ , for some positive numbers $ <var:h> $ , before evaluating our list of instructions , then we have $ <var:j> = <nat:3> \cdot <var:h> ^ <nat:8> + <nat:1> \cdot <var:h> ^ <nat:7> + <nat:1> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is done by Hoare logic . Taking another step toward the proceeding bits of codeseen in the set of instructions , we see \begin{verbatim} { <var:P> = <var:h> } <var:j> := <nat:3> { <var:P> = <var:h> \land <var:j> = <nat:3> } { <var:P> = <var:h> \land <var:j> = <nat:3> } <var:j> := <nat:1> + <var:j> * <var:P> { <var:P> = <var:h> \land <var:j> = <nat:3> \cdot <var:h> + <nat:1> } { <var:P> = <var:h> \land <var:j> = <nat:3> \cdot <var:h> + <nat:1> } <var:j> := <nat:1> + <var:j> * <var:P> { <var:P> = <var:h> \land <var:j> = <nat:3> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:1> } { <var:P> = <var:h> \land <var:j> = <nat:3> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:1> } <var:j> := <nat:3> + <var:j> * <var:P> { <var:P> = <var:h> \land <var:j> = <nat:3> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:3> } { <var:P> = <var:h> \land <var:j> = <nat:3> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:3> } <var:j> := <nat:2> + <var:j> * <var:P> { <var:P> = <var:h> \land <var:j> = <nat:3> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:2> } { <var:P> = <var:h> \land <var:j> = <nat:3> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:2> } <var:j> := <nat:3> + <var:j> * <var:P> { <var:P> = <var:h> \land <var:j> = <nat:3> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:3> } { <var:P> = <var:h> \land <var:j> = <nat:3> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:3> } <var:j> := <nat:2> + <var:j> * <var:P> { <var:P> = <var:h> \land <var:j> = <nat:3> \cdot <var:h> ^ <nat:6> + <nat:1> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:2> } \end{verbatim} Focusing on the next lines seen in the segment of code , we see \begin{verbatim} { <var:P> = <var:h> } <var:j> := <nat:3> { <var:P> = <var:h> \land <var:j> = <nat:3> } { <var:P> = <var:h> \land <var:j> = <nat:3> } <var:j> := <nat:1> + <var:j> * <var:P> { <var:P> = <var:h> \land <var:j> = <nat:3> \cdot <var:h> + <nat:1> } \end{verbatim} This is shown to be logically sound by the assignment inference rule defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:P> = <var:h> }} <var:j> := <nat:3> ; <var:j> := <nat:1> + <var:j> * <var:P> ; <var:j> := <nat:1> + <var:j> * <var:P> ; <var:j> := <nat:3> + <var:j> * <var:P> ; <var:j> := <nat:2> + <var:j> * <var:P> ; <var:j> := <nat:3> + <var:j> * <var:P> ; <var:j> := <nat:2> + <var:j> * <var:P> ; <var:j> := <var:j> * <var:P> ; <var:j> := <nat:2> + <var:j> * <var:P> {{ <var:j> = <nat:3> * <var:h> ^ <nat:8> + <nat:1> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:j> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:j> = <nat:3> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:j> = <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:j> = <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:j> = <nat:3> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:j> = <nat:3> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:j> = <nat:3> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:j> = <nat:3> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:h> /\ <var:j> = <nat:3> * <var:h> ^ <nat:8> + <nat:1> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 