\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K> := <nat:3> ; <var:K> := <nat:1> + <var:K> * <var:z> ; <var:K> := <nat:2> + <var:K> * <var:z> ; <var:K> := <nat:4> + <var:K> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:z> = <var:d> $ prior to the evaluation of our code segment , it must be that we see $ <var:K> = <nat:3> \times <var:d> ^ <nat:3> + <nat:1> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:4> $ after segment of code has finished executing . \end{theorem} \begin{proof} Using usual Hoare techniques returns : \begin{eqnarray} \{ <var:z> = <var:d> \} \\ <var:K> := <nat:3> ; \\ \{ <var:z> = <var:d> \land <var:K> = <nat:3> \} \\ <var:K> := <nat:1> + <var:K> * <var:z> ; \\ \{ <var:z> = <var:d> \land <var:K> = <nat:3> * <var:d> + <nat:1> \} \\ <var:K> := <nat:2> + <var:K> * <var:z> ; \\ \{ <var:z> = <var:d> \land <var:K> = <nat:3> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> \} \\ <var:K> := <nat:4> + <var:K> * <var:z> \\ \{ <var:z> = <var:d> \land <var:K> = <nat:3> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> \} \end{eqnarray} Considering the above , our code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:K> := <nat:3> ; <var:K> := <nat:1> + <var:K> * <var:z> ; <var:K> := <nat:2> + <var:K> * <var:z> ; <var:K> := <nat:4> + <var:K> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:z> = <var:d> }} <def:poly> {{ <var:K> = <nat:3> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:K> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:K> = <nat:3> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:K> = <nat:3> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:d> /\ <var:K> = <nat:3> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 