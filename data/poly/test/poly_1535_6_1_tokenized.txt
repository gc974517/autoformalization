\begin{document} \begin{theorem} Take the following program : \begin{verbatim} <var:Q1> := <var:N> ; <var:Q2> := <var:Q1> * <var:N> ; <var:Q0> := <nat:9> ; <var:Q2> := <var:Q2> * <nat:5> ; <var:y> := <var:Q2> <var:y> := <var:y> + <var:Q0> \end{verbatim} Allow $ <var:N> = <var:q> $ --- with some positive integer coefficients $ <var:q> $ --- prior to interpreting the code it follows that $ <var:y> = <nat:5> \cdot <var:q> ^ <nat:2> + <nat:9> $ after code terminates . \end{theorem} \begin{proof} Demonstrating correctness of this code is clear through standard Hoare techniques . Advancing to the subsequent lines seen in our list of instructions , we see \verb | { <var:N> = <var:q> } <var:Q1> := <var:N> { <var:N> = <var:q> \land <var:Q1> = <var:q> } | and \verb | { <var:N> = <var:q> \land <var:Q1> = <var:q> } <var:Q2> := <var:Q1> * <var:N> { <var:N> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> } | . This is sound through the variable assignmet law from usual Hoare techniques . Taking another step toward the subsequent pieces of code contained in the list of instructions , we see \verb | { <var:N> = <var:q> } <var:Q1> := <var:N> { <var:N> = <var:q> \land <var:Q1> = <var:q> } | , \verb | { <var:N> = <var:q> \land <var:Q1> = <var:q> } <var:Q2> := <var:Q1> * <var:N> { <var:N> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> } | and \verb | { <var:N> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> } <var:Q0> := <nat:9> { <var:N> = <var:q> \land <var:Q1> = <var:q> \land <var:Q2> = <var:q> ^ <nat:2> \land <var:Q0> = <nat:9> } | . This is sound using the environment update law found in usual Hoare logic . Considering the following bit of code found in the program , \verb | { <var:N> = <var:q> } <var:Q1> := <var:N> { <var:N> = <var:q> \land <var:Q1> = <var:q> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:N> = <var:q> }} <var:Q1> := <var:N> ; <var:Q2> := <var:Q1> * <var:N> ; <var:Q0> := <nat:9> ; <var:Q2> := <var:Q2> * <nat:5> ; <var:y> := <var:Q2> <var:y> := <var:y> + <var:Q0> {{ <var:y> = <nat:5> * <var:q> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:Q1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q2> = <var:q> ^ <nat:2> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:Q1> = <var:q> /\ <var:Q0> = <nat:9> /\ <var:y> = <nat:5> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:y> = <nat:5> * <var:q> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 