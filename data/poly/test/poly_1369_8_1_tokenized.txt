\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:A1> := <var:q> ; <var:A2> := <var:A1> * <var:q> ; <var:A0> := <nat:3> ; <var:A1> := <var:A1> * <nat:9> ; <var:A2> := <var:A2> * <nat:7> ; <var:j> := <var:A2> <var:j> := <var:j> + <var:A1> <var:j> := <var:j> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:q> = <var:w> $ --- given some positive numbers $ <var:w> $ --- ahead of the execution of the set of commands then we have $ <var:j> = <nat:7> \times <var:w> ^ <nat:2> + <nat:9> \times <var:w> + <nat:3> $ when segment of code has terminated . \end{theorem} \begin{proof} The application of typical Hoare techniques produces : \begin{eqnarray} \{ <var:q> = <var:w> \} \\ <var:A1> := <var:q> ; \\ \{ <var:q> = <var:w> \land <var:A1> = <var:w> \} \\ <var:A2> := <var:A1> * <var:q> ; \\ \{ <var:q> = <var:w> \land <var:A1> = <var:w> \land <var:A2> = <var:w> ^ <nat:2> \} \\ <var:A0> := <nat:3> ; \\ \{ <var:q> = <var:w> \land <var:A1> = <var:w> \land <var:A2> = <var:w> ^ <nat:2> \land <var:A0> = <nat:3> \} \\ <var:A1> := <var:A1> * <nat:9> ; \\ \{ <var:q> = <var:w> \land <var:A1> = <nat:9> * <var:w> \land <var:A2> = <var:w> ^ <nat:2> \land <var:A0> = <nat:3> \} \\ <var:A2> := <var:A2> * <nat:7> ; \\ \{ <var:q> = <var:w> \land <var:A1> = <nat:9> * <var:w> \land <var:A2> = <nat:7> * <var:w> ^ <nat:2> \land <var:A0> = <nat:3> \} \\ <var:j> := <var:A2> \\ \{ <var:q> = <var:w> \land <var:A1> = <nat:9> * <var:w> \land <var:A0> = <nat:3> \land <var:j> = <nat:7> * <var:w> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:A1> \\ \{ <var:q> = <var:w> \land <var:A0> = <nat:3> \land <var:j> = <nat:7> * <var:w> ^ <nat:2> + <nat:9> * <var:w> \} \\ <var:j> := <var:j> + <var:A0> \\ \{ <var:q> = <var:w> \land <var:j> = <nat:7> * <var:w> ^ <nat:2> + <nat:9> * <var:w> + <nat:3> \} \end{eqnarray} Hence , this set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <def:poly> := <var:A1> := <var:q> ; <var:A2> := <var:A1> * <var:q> ; <var:A0> := <nat:3> ; <var:A1> := <var:A1> * <nat:9> ; <var:A2> := <var:A2> * <nat:7> ; <var:j> := <var:A2> <var:j> := <var:j> + <var:A1> <var:j> := <var:j> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:q> = <var:w> }} <def:poly> {{ <var:j> = <nat:7> * <var:w> ^ <nat:2> + <nat:9> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:A1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:A1> = <var:w> /\ <var:A2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:A1> = <var:w> /\ <var:A2> = <var:w> ^ <nat:2> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:A1> = <nat:9> * <var:w> /\ <var:A2> = <var:w> ^ <nat:2> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:A1> = <nat:9> * <var:w> /\ <var:A2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:A1> = <nat:9> * <var:w> /\ <var:A0> = <nat:3> /\ <var:j> = <nat:7> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:A0> = <nat:3> /\ <var:j> = <nat:7> * <var:w> ^ <nat:2> + <nat:9> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:w> /\ <var:j> = <nat:7> * <var:w> ^ <nat:2> + <nat:9> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 