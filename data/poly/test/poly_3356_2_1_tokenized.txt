\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:8> ; <var:N> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:A> = <var:x> $ prior to the evaluation of this program , it holds that $ <var:N> = <nat:8> $ when series of commands finishes . \end{theorem} \begin{proof} Showing our claim about correctness for our code segment can be seen with usual Hoare techniques . Honing in on the next pieces of code found in the series of instructions , \verb | { <var:A> = <var:x> } <var:a0> := <nat:8> { <var:A> = <var:x> \land <var:a0> = <nat:8> } | and \verb | { <var:A> = <var:x> \land <var:a0> = <nat:8> } <var:N> := <var:a0{ <var:A> = <var:x> \land <var:N> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:8> ; <var:N> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:A> = <var:x> }} <def:poly> {{ <var:N> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:N> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 