\begin{document} \begin{theorem} We define the following series of instructions such that \begin{verbatim} <var:y> := <nat:3> ; <var:y> := <nat:4> + <var:y> * <var:U> ; <var:y> := <nat:4> + <var:y> * <var:U> \end{verbatim} Assuming assuming some natural coefficients $ <var:j> $ that we have $ <var:U> = <var:j> $ ahead of interpreting this program then we have $ <var:y> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + <nat:4> $ when set of commands has executed . \end{theorem} \begin{proof} Demonstrating correctness of our series of commands can be given by Hoare techniques . Going to the next step , \begin{eqnarray} \{ <var:U> = <var:j> \} \, <var:y> := <nat:3> \, \{ <var:U> = <var:j> \land <var:y> = <nat:3> \} \\ \{ <var:U> = <var:j> \land <var:y> = <nat:3> \} \, <var:y> := <nat:4> + <var:y> * <var:U> \, \{ <var:U> = <var:j> \land <var:y> = <nat:3> \cdot <var:j> + <nat:4> \} \\ \{ <var:U> = <var:j> \land <var:y> = <nat:3> \cdot <var:j> + <nat:4> \} \, <var:y> := <nat:4> + <var:y> * <var:U\, \{ <var:U> = <var:j> \land <var:y> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + <nat:4> \} \end{eqnarray} This is sound using the assignment law from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:U> = <var:j> }} <var:y> := <nat:3> ; <var:y> := <nat:4> + <var:y> * <var:U> ; <var:y> := <nat:4> + <var:y> * <var:U> {{ <var:y> = <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:y> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:y> = <nat:3> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:y> = <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 