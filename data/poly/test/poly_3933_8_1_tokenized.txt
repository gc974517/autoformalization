\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K1> := <var:F> ; <var:K2> := <var:K1> * <var:F> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:9> ; <var:K2> := <var:K2> * <nat:9> ; <var:d> := <var:K2> <var:d> := <var:d> + <var:K1> <var:d> := <var:d> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Given that we have $ <var:F> = <var:f> $ prior to evaluating our set of commands , it must be that we have $ <var:d> = <nat:9> \cdot <var:f> ^ <nat:2> + <nat:9> \cdot <var:f> + <nat:9> $ when code segment terminates . \end{theorem} \begin{proof} Proving correctness for this set of commands is clear through Hoare logic . Advancing on , we see \[ \begin{tabular} {rcl} \{ <var:F> = <var:f> \} & <var:K1> := <var:F> & \{ <var:F> = <var:f> \land <var:K1> = <var:f> \} \\ \{ <var:F> = <var:f> \land <var:K1> = <var:f> \} & <var:K2> := <var:K1> * <var:F> & \{ <var:F> = <var:f> \land <var:K1> = <var:f> \land <var:K2> = <var:f> ^ <nat:2> \} \end{tabular} This is known to be sound with the variable update scheme from typical Hoare logic . Stepping through , we have \[ \begin{tabular} {rcl} \{ <var:F> = <var:f> \} & <var:K1> := <var:F> & \{ <var:F> = <var:f> \land <var:K1> = <var:f> \} \end{tabular} This is rigorously given using the binding law from Hoare reasoning . Moving on to the subsequent commands seen in our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:F> = <var:f> \} & <var:K1> := <var:F> & \{ <var:F> = <var:f> \land <var:K1> = <var:f> \} \\ \{ <var:F> = <var:f> \land <var:K1> = <var:f> \} & <var:K2> := <var:K1> * <var:F> & \{ <var:F> = <var:f> \land <var:K1> = <var:f> \land <var:K2> = <var:f> ^ <nat:2> \} \\ \{ <var:F> = <var:f> \land <var:K1> = <var:f> \land <var:K2> = <var:f> ^ <nat:2> \} & <var:K0> := <nat:9> & \{ <var:F> = <var:f> \land <var:K1> = <var:f> \land <var:K2> = <var:f> ^ <nat:2> \land <var:K0> = <nat:9> \} \\ \{ <var:F> = <var:f> \land <var:K1> = <var:f> \land <var:K2> = <var:f> ^ <nat:2> \land <var:K0> = <nat:9> \} & <var:K1> := <var:K1> * <nat:9> & \{ <var:F> = <var:f> \land <var:K1> = <nat:9> \cdot <var:f> \land <var:K2> = <var:f> ^ <nat:2> \land <var:K0> = <nat:9> \} \end{tabular} Looking at the following bit of code seen in the list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:F> = <var:f> \} & <var:K1> := <var:F> & \{ <var:F> = <var:f> \land <var:K1> = <var:f> \} \end{tabular} This is shown using the variable binding law obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K1> := <var:F> ; <var:K2> := <var:K1> * <var:F> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:9> ; <var:K2> := <var:K2> * <nat:9> ; <var:d> := <var:K2> <var:d> := <var:d> + <var:K1> <var:d> := <var:d> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:F> = <var:f> }} <def:poly> {{ <var:d> = <nat:9> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:K1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:K1> = <var:f> /\ <var:K2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:K1> = <var:f> /\ <var:K2> = <var:f> ^ <nat:2> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:K1> = <nat:9> * <var:f> /\ <var:K2> = <var:f> ^ <nat:2> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:K1> = <nat:9> * <var:f> /\ <var:K2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:K1> = <nat:9> * <var:f> /\ <var:K0> = <nat:9> /\ <var:d> = <nat:9> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:K0> = <nat:9> /\ <var:d> = <nat:9> * <var:f> ^ <nat:2> + <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:f> /\ <var:d> = <nat:9> * <var:f> ^ <nat:2> + <nat:9> * <var:f> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 