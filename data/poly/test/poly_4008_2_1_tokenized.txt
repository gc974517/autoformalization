\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:B0> := <nat:9> ; <var:z> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Allow $ <var:y> = <var:D> $ ahead of evaluating our segment of code it holds that we see $ <var:z> = <nat:9> $ once list of commands has terminated . \end{theorem} \begin{proof} The application of Hoare techniques gives : \begin{eqnarray} \{ <var:y> = <var:D> \} \\ <var:B0> := <nat:9> ; \\ \{ <var:y> = <var:D> \land <var:B0> = <nat:9> \} \\ <var:z> := <var:B0> \\ \{ <var:y> = <var:D> \land <var:z> = <nat:9> \} \end{eqnarray} As a result , this code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:9> ; <var:z> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:y> = <var:D> }} <def:poly> {{ <var:z> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:z> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 