\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:j1> := <var:U> ; <var:j2> := <var:j1> * <var:U> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:1> ; <var:j2> := <var:j2> * <nat:2> ; <var:u> := <var:j2> <var:u> := <var:u> + <var:j1> <var:u> := <var:u> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Allowing it to be that $ <var:U> = <var:x> $ before running the code it follows that we have $ <var:u> = <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> $ after set of commands has finished . \end{theorem} \begin{proof} Arguing the correctness of the program is shown with Hoare logic . Jumping to the proceeding commands seen in the series of commands , \[ \begin{tabular} {rcl} \{ <var:U> = <var:x> \} & <var:j1> := <var:U> & \{ <var:U> = <var:x> \land <var:j1> = <var:x> \} \\ \{ <var:U> = <var:x> \land <var:j1> = <var:x> \} & <var:j2> := <var:j1> * <var:U> & \{ <var:U> = <var:x> \land <var:j1> = <var:x> \land <var:j2> = <var:x> ^ <nat:2> \} \\ \{ <var:U> = <var:x> \land <var:j1> = <var:x> \land <var:j2> = <var:x> ^ <nat:2> \} & <var:j0> := <nat:1> & \{ <var:U> = <var:x> \land <var:j1> = <var:x> \land <var:j2> = <var:x> ^ <nat:2> \land <var:j0> = <nat:1> \} \end{tabular} This is shown to be logically sound using the variable update rule from typical Hoare reasoning . Advancing to the proceeding bits of codecontained in the code segment , \[ \begin{tabular} {rcl} \{ <var:U> = <var:x> \} & <var:j1> := <var:U> & \{ <var:U> = <var:x> \land <var:j1> = <var:x> \} \\ \{ <var:U> = <var:x> \land <var:j1> = <var:x> \} & <var:j2> := <var:j1> * <var:U> & \{ <var:U> = <var:x> \land <var:j1> = <var:x> \land <var:j2> = <var:x> ^ <nat:2> \} \\ \{ <var:U> = <var:x> \land <var:j1> = <var:x> \land <var:j2> = <var:x> ^ <nat:2> \} & <var:j0> := <nat:1> & \{ <var:U> = <var:x> \land <var:j1> = <var:x> \land <var:j2> = <var:x> ^ <nat:2> \land <var:j0> = <nat:1> \} \\ \{ <var:U> = <var:x> \land <var:j1> = <var:x> \land <var:j2> = <var:x> ^ <nat:2> \land <var:j0> = <nat:1> \} & <var:j1> := <var:j1> * <nat:1> & \{ <var:U> = <var:x> \land <var:j1> = <nat:1> \cdot <var:x> \land <var:j2> = <var:x> ^ <nat:2> \land <var:j0> = <nat:1> \} \end{tabular} This is deduced through the variable update inference rule of standard Hoare techniques . Moving forward to the next step , \[ \begin{tabular} {rcl} \{ <var:U> = <var:x> \} & <var:j1> := <var:U> & \{ <var:U> = <var:x> \land <var:j1> = <var:x> \} \end{tabular} This is given through the variable update law obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <def:poly> := <var:j1> := <var:U> ; <var:j2> := <var:j1> * <var:U> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:1> ; <var:j2> := <var:j2> * <nat:2> ; <var:u> := <var:j2> <var:u> := <var:u> + <var:j1> <var:u> := <var:u> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:U> = <var:x> }} <def:poly> {{ <var:u> = <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:j1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:j1> = <var:x> /\ <var:j2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:j1> = <var:x> /\ <var:j2> = <var:x> ^ <nat:2> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:j1> = <nat:1> * <var:x> /\ <var:j2> = <var:x> ^ <nat:2> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:j1> = <nat:1> * <var:x> /\ <var:j2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:j1> = <nat:1> * <var:x> /\ <var:j0> = <nat:1> /\ <var:u> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:j0> = <nat:1> /\ <var:u> = <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:x> /\ <var:u> = <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 