\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} such that \begin{verbatim} <var:H1> := <var:R> ; <var:H2> := <var:H1> * <var:R> ; <var:H3> := <var:H2> * <var:R> ; <var:H4> := <var:H3> * <var:R> ; <var:H0> := <nat:2> ; <var:H2> := <var:H2> * <nat:9> ; <var:H3> := <var:H3> * <nat:9> ; <var:H4> := <var:H4> * <nat:5> ; <var:C> := <var:H4> <var:C> := <var:C> + <var:H3> <var:C> := <var:C> + <var:H2> <var:C> := <var:C> + <var:H0> \end{verbatim} Allow it to be that $ <var:R> = <var:u> $ , for positive coefficients $ <var:u> $ , ahead of executing the set of instructions , it follows that $ <var:C> = <nat:5> \times <var:u> ^ <nat:4> + <nat:9> \times <var:u> ^ <nat:3> + <nat:9> \times <var:u> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code segment can be done with typical Hoare reasoning . Moving on to the next step , the assignment command defining $ <var:R> $ toward $ <var:H1>$ . This statement redefines the precondition $ \{ <var:R> = <var:u> \} $ as the condition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \} $ . Focusing on the proceeding piece of code in our set of instructions , we have the environment update command binding $ <var:H1> * <var:R> $ as $ <var:H2>$ . This code forwards the precondition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \} $ toward the postcondition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <var:u> ^ <nat:2> \} $ . This is rigorously given using the assignment law in standard Hoare reasoning . Focusing on the proceeding command found in the set of instructions , the line giving $ <var:H2> * <var:R> $ toward $ <var:H3>$ . This transfers the condition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <var:u> ^ <nat:2> \} $ into $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <var:u> ^ <nat:2> \land <var:H3> = <var:u> ^ <nat:3> \} $ . Keeping momentum , we see the environment update statement giving $ <var:H3> * <var:R> $ toward $ <var:H4>$ . This code advances the condition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <var:u> ^ <nat:2> \land <var:H3> = <var:u> ^ <nat:3> \} $ into $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <var:u> ^ <nat:2> \land <var:H3> = <var:u> ^ <nat:3> \land <var:H4> = <var:u> ^ <nat:4> \} $ . This is deduced using the assignment scheme given by Hoare techniques . Keeping momentum , the variable assignmet statement \verb | <var:H0> := <nat:2> ; | . This takes the condition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <var:u> ^ <nat:2> \land <var:H3> = <var:u> ^ <nat:3> \land <var:H4> = <var:u> ^ <nat:4> \} $ toward the postcondition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <var:u> ^ <nat:2> \land <var:H3> = <var:u> ^ <nat:3> \land <var:H4> = <var:u> ^ <nat:4> \land <var:H0> = <nat:2> \} $ . Honing in on the upcoming bit of code seen in our code segment , we have the assignment statement \verb | <var:H2> := <var:H2> * <nat:9> ; | . This command forwards the precondition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <var:u> ^ <nat:2> \land <var:H3> = <var:u> ^ <nat:3> \land <var:H4> = <var:u> ^ <nat:4> \land <var:H0> = <nat:2> \} $ as $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <nat:9> \cdot <var:u> ^ <nat:2> \land <var:H3> = <var:u> ^ <nat:3> \land <var:H4> = <var:u> ^ <nat:4> \land <var:H0> = <nat:2> \} $ . Advancing to the following command in the list of commands , the line letting $ <var:H3> * <nat:9> $ as $ <var:H3>$ . This code takes the condition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <nat:9> \cdot <var:u> ^ <nat:2> \land <var:H3> = <var:u> ^ <nat:3> \land <var:H4> = <var:u> ^ <nat:4> \land <var:H0> = <nat:2> \} $ toward $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <nat:9> \cdot <var:u> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:u> ^ <nat:3> \land <var:H4> = <var:u> ^ <nat:4> \land <var:H0> = <nat:2> \} $ . Jumping to the subsequent statement seen in the list of instructions , we have the assignment line defining $ <var:H4> * <nat:5> $ toward $ <var:H4>$ . This code redefines the condition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <nat:9> \cdot <var:u> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:u> ^ <nat:3> \land <var:H4> = <var:u> ^ <nat:4> \land <var:H0> = <nat:2> \} $ toward the postcondition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <nat:9> \cdot <var:u> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:u> ^ <nat:3> \land <var:H4> = <nat:5> \cdot <var:u> ^ <nat:4> \land <var:H0> = <nat:2> \} $ . This is ensured using the assignment rule defined in usual Hoare logic . Honing in on the following step seen in the code , the environment update command assigning $ <var:H4$ toward $ <var:C>$ . This command transfers the precondition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <nat:9> \cdot <var:u> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:u> ^ <nat:3> \land <var:H4> = <nat:5> \cdot <var:u> ^ <nat:4> \land <var:H0> = <nat:2> \} $ to the condition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <nat:9> \cdot <var:u> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:u> ^ <nat:3> \land <var:H0> = <nat:2> \land <var:C> = <nat:5> \cdot <var:u> ^ <nat:4> \} $ . This is sound by the assignment law given by Hoare logic . Now , we see the environment update line binding $ <var:C> + <var:H3$ toward $ <var:C>$ . This code forwards $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <nat:9> \cdot <var:u> ^ <nat:2> \land <var:H3> = <nat:9> \cdot <var:u> ^ <nat:3> \land <var:H0> = <nat:2> \land <var:C> = <nat:5> \cdot <var:u> ^ <nat:4> \} $ toward $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <nat:9> \cdot <var:u> ^ <nat:2> \land <var:H0> = <nat:2> \land <var:C> = <nat:5> \cdot <var:u> ^ <nat:4> + <nat:9> \cdot <var:u> ^ <nat:3> \} $ . After , we have the assignment line \verb | <var:C> := <var:C> + <var:H2> | . This statement transfers $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H2> = <nat:9> \cdot <var:u> ^ <nat:2> \land <var:H0> = <nat:2> \land <var:C> = <nat:5> \cdot <var:u> ^ <nat:4> + <nat:9> \cdot <var:u> ^ <nat:3> \} $ to the postcondition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H0> = <nat:2> \land <var:C> = <nat:5> \cdot <var:u> ^ <nat:4> + <nat:9> \cdot <var:u> ^ <nat:3> + <nat:9> \cdot <var:u> ^ <nat:2> \} $ . Now , we see the binding line \verb | <var:C> := <var:C> + <var:H0> | . This moves the condition $ \{ <var:R> = <var:u> \land <var:H1> = <var:u> \land <var:H0> = <nat:2> \land <var:C> = <nat:5> \cdot <var:u> ^ <nat:4> + <nat:9> \cdot <var:u> ^ <nat:3> + <nat:9> \cdot <var:u> ^ <nat:2> \} $ toward the postcondition $ \{ <var:R> = <var:u> \land <var:C> = <nat:5> \cdot <var:u> ^ <nat:4> + <nat:9> \cdot <var:u> ^ <nat:3> + <nat:9> \cdot <var:u> ^ <nat:2> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <var:H4> : string := " <var:H4> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:R> = <var:u> }} <var:H1> := <var:R> ; <var:H2> := <var:H1> * <var:R> ; <var:H3> := <var:H2> * <var:R> ; <var:H4> := <var:H3> * <var:R> ; <var:H0> := <nat:2> ; <var:H2> := <var:H2> * <nat:9> ; <var:H3> := <var:H3> * <nat:9> ; <var:H4> := <var:H4> * <nat:5> ; <var:C> := <var:H4> <var:C> := <var:C> + <var:H3> <var:C> := <var:C> + <var:H2> <var:C> := <var:C> + <var:H0> {{ <var:C> = <nat:5> * <var:u> ^ <nat:4> + <nat:9> * <var:u> ^ <nat:3> + <nat:9> * <var:u> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:H1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:H1> = <var:u> /\ <var:H2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:H1> = <var:u> /\ <var:H2> = <var:u> ^ <nat:2> /\ <var:H3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:H1> = <var:u> /\ <var:H2> = <var:u> ^ <nat:2> /\ <var:H3> = <var:u> ^ <nat:3> /\ <var:H4> = <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:H1> = <var:u> /\ <var:H2> = <var:u> ^ <nat:2> /\ <var:H3> = <var:u> ^ <nat:3> /\ <var:H4> = <var:u> ^ <nat:4> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:H1> = <var:u> /\ <var:H2> = <nat:9> * <var:u> ^ <nat:2> /\ <var:H3> = <var:u> ^ <nat:3> /\ <var:H4> = <var:u> ^ <nat:4> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:H1> = <var:u> /\ <var:H2> = <nat:9> * <var:u> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:u> ^ <nat:3> /\ <var:H4> = <var:u> ^ <nat:4> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:H1> = <var:u> /\ <var:H2> = <nat:9> * <var:u> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:u> ^ <nat:3> /\ <var:H4> = <nat:5> * <var:u> ^ <nat:4> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:H1> = <var:u> /\ <var:H2> = <nat:9> * <var:u> ^ <nat:2> /\ <var:H3> = <nat:9> * <var:u> ^ <nat:3> /\ <var:H0> = <nat:2> /\ <var:C> = <nat:5> * <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:H1> = <var:u> /\ <var:H2> = <nat:9> * <var:u> ^ <nat:2> /\ <var:H0> = <nat:2> /\ <var:C> = <nat:5> * <var:u> ^ <nat:4> + <nat:9> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:H1> = <var:u> /\ <var:H0> = <nat:2> /\ <var:C> = <nat:5> * <var:u> ^ <nat:4> + <nat:9> * <var:u> ^ <nat:3> + <nat:9> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:C> = <nat:5> * <var:u> ^ <nat:4> + <nat:9> * <var:u> ^ <nat:3> + <nat:9> * <var:u> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 