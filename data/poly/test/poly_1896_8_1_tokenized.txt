\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:W> ; <var:M2> := <var:M1> * <var:W> ; <var:M0> := <nat:3> ; <var:M1> := <var:M1> * <nat:1> ; <var:M2> := <var:M2> * <nat:2> ; <var:v> := <var:M2> <var:v> := <var:v> + <var:M1> <var:v> := <var:v> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Assume that we have $ <var:W> = <var:c> $ given all positive numbers $ <var:c> $ prior to interpreting the list of commands it must be that $ <var:v> = <nat:2> \cdot <var:c> ^ <nat:2> + <nat:1> \cdot <var:c> + <nat:3> $ once segment of code has exited . \end{theorem} \begin{proof} The flow of logic for the code segment can be accomplished using this decorated program . \begin{eqnarray} \{ <var:W> = <var:c> \} \\ <var:M1> := <var:W> ; \\ \{ <var:W> = <var:c> \land <var:M1> = <var:c> \} \\ <var:M2> := <var:M1> * <var:W> ; \\ \{ <var:W> = <var:c> \land <var:M1> = <var:c> \land <var:M2> = <var:c> ^ <nat:2> \} \\ <var:M0> := <nat:3> ; \\ \{ <var:W> = <var:c> \land <var:M1> = <var:c> \land <var:M2> = <var:c> ^ <nat:2> \land <var:M0> = <nat:3> \} \end{eqnarray} Allowing the execution of the segment of code produces : \begin{eqnarray} <var:M1> := <var:M1> * <nat:1> ; \\ \{ <var:W> = <var:c> \land <var:M1> = <nat:1> * <var:c> \land <var:M2> = <var:c> ^ <nat:2> \land <var:M0> = <nat:3> \} \\ <var:M2> := <var:M2> * <nat:2> ; \\ \{ <var:W> = <var:c> \land <var:M1> = <nat:1> * <var:c> \land <var:M2> = <nat:2> * <var:c> ^ <nat:2> \land <var:M0> = <nat:3> \} \\ <var:v> := <var:M2> \\ \{ <var:W> = <var:c> \land <var:M1> = <nat:1> * <var:c> \land <var:M0> = <nat:3> \land <var:v> = <nat:2> * <var:c> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:M1> \\ \{ <var:W> = <var:c> \land <var:M0> = <nat:3> \land <var:v> = <nat:2> * <var:c> ^ <nat:2> + <nat:1> * <var:c> \} \\ <var:v> := <var:v> + <var:M0> \\ \{ <var:W> = <var:c> \land <var:v> = <nat:2> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:3> \} \end{eqnarray} Applying Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M1> := <var:W> ; <var:M2> := <var:M1> * <var:W> ; <var:M0> := <nat:3> ; <var:M1> := <var:M1> * <nat:1> ; <var:M2> := <var:M2> * <nat:2> ; <var:v> := <var:M2> <var:v> := <var:v> + <var:M1> <var:v> := <var:v> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:W> = <var:c> }} <def:poly> {{ <var:v> = <nat:2> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:M1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:M1> = <var:c> /\ <var:M2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:M1> = <var:c> /\ <var:M2> = <var:c> ^ <nat:2> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:M1> = <nat:1> * <var:c> /\ <var:M2> = <var:c> ^ <nat:2> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:M1> = <nat:1> * <var:c> /\ <var:M2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:M1> = <nat:1> * <var:c> /\ <var:M0> = <nat:3> /\ <var:v> = <nat:2> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:M0> = <nat:3> /\ <var:v> = <nat:2> * <var:c> ^ <nat:2> + <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:v> = <nat:2> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 