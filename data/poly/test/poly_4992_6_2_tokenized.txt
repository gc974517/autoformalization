\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q> := <nat:1> ; <var:Q> := <nat:1> + <var:Q> * <var:c> ; <var:Q> := <nat:1> + <var:Q> * <var:c> ; <var:Q> := <var:Q> * <var:c> ; <var:Q> := <nat:4> + <var:Q> * <var:c> ; <var:Q> := <nat:1> + <var:Q> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:c> = <var:A> $ , assuming some integers $ <var:A> $ , prior to running this list of instructions it follows that we have $ <var:Q> = <nat:1> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + <nat:1> $ after segment of code has executed . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be given using the following decorated list of commands . \begin{eqnarray} \{ <var:c> = <var:A> \} \\ <var:Q> := <nat:1> ; \\ \{ <var:c> = <var:A> \land <var:Q> = <nat:1> \} \\ <var:Q> := <nat:1> + <var:Q> * <var:c> ; \\ \{ <var:c> = <var:A> \land <var:Q> = <nat:1> * <var:A> + <nat:1> \} \\ <var:Q> := <nat:1> + <var:Q> * <var:c> ; \\ \{ <var:c> = <var:A> \land <var:Q> = <nat:1> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:1> \} \\ <var:Q> := <var:Q> * <var:c> ; \\ \{ <var:c> = <var:A> \land <var:Q> = <nat:1> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + \} \\ <var:Q> := <nat:4> + <var:Q> * <var:c> ; \\ \{ <var:c> = <var:A> \land <var:Q> = <nat:1> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> \} \\ <var:Q> := <nat:1> + <var:Q> * <var:c> \\ \{ <var:c> = <var:A> \land <var:Q> = <nat:1> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + <nat:1> \} \end{eqnarray} The application of Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:1> ; <var:Q> := <nat:1> + <var:Q> * <var:c> ; <var:Q> := <nat:1> + <var:Q> * <var:c> ; <var:Q> := <var:Q> * <var:c> ; <var:Q> := <nat:4> + <var:Q> * <var:c> ; <var:Q> := <nat:1> + <var:Q> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:c> = <var:A> }} <def:poly> {{ <var:Q> = <nat:1> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:Q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:Q> = <nat:1> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:Q> = <nat:1> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:Q> = <nat:1> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:Q> = <nat:1> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:Q> = <nat:1> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 