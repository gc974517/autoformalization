\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:n1> := <var:Q> ; <var:n2> := <var:n1> * <var:Q> ; <var:n3> := <var:n2> * <var:Q> ; <var:n4> := <var:n3> * <var:Q> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:5> ; <var:n2> := <var:n2> * <nat:9> ; <var:n3> := <var:n3> * <nat:4> ; <var:n4> := <var:n4> * <nat:8> ; <var:W> := <var:n4> <var:W> := <var:W> + <var:n3> <var:W> := <var:W> + <var:n2> <var:W> := <var:W> + <var:n1> <var:W> := <var:W> + <var:n0> \end{verbatim} Given that $ <var:Q> = <var:A> $ ( for every positive integers $ <var:A> $ ) ahead of interpreting the code segment it holds that we have $ <var:W> = <nat:8> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:6> $ . \end{theorem} \begin{proof} See that this decorated series of instructions . \begin{eqnarray} \{ <var:Q> = <var:A> \} \\ <var:n1> := <var:Q> ; \\ \{ <var:Q> = <var:A> \land <var:n1> = <var:A> \} \\ <var:n2> := <var:n1> * <var:Q> ; \\ \{ <var:Q> = <var:A> \land <var:n1> = <var:A> \land <var:n2> = <var:A> ^ <nat:2> \} \\ <var:n3> := <var:n2> * <var:Q> ; \\ \{ <var:Q> = <var:A> \land <var:n1> = <var:A> \land <var:n2> = <var:A> ^ <nat:2> \land <var:n3> = <var:A> ^ <nat:3> \} \\ <var:n4> := <var:n3> * <var:Q> ; \\ \{ <var:Q> = <var:A> \land <var:n1> = <var:A> \land <var:n2> = <var:A> ^ <nat:2> \land <var:n3> = <var:A> ^ <nat:3> \land <var:n4> = <var:A> ^ <nat:4> \} \\ <var:n0> := <nat:6> ; \\ \{ <var:Q> = <var:A> \land <var:n1> = <var:A> \land <var:n2> = <var:A> ^ <nat:2> \land <var:n3> = <var:A> ^ <nat:3> \land <var:n4> = <var:A> ^ <nat:4> \land <var:n0> = <nat:6> \} \\ <var:n1> := <var:n1> * <nat:5> ; \\ \{ <var:Q> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <var:A> ^ <nat:2> \land <var:n3> = <var:A> ^ <nat:3> \land <var:n4> = <var:A> ^ <nat:4> \land <var:n0> = <nat:6> \} \\ <var:n2> := <var:n2> * <nat:9> ; \\ \{ <var:Q> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:n3> = <var:A> ^ <nat:3> \land <var:n4> = <var:A> ^ <nat:4> \land <var:n0> = <nat:6> \} \\ <var:n3> := <var:n3> * <nat:4> ; \\ \{ <var:Q> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:A> ^ <nat:3> \land <var:n4> = <var:A> ^ <nat:4> \land <var:n0> = <nat:6> \} \\ <var:n4> := <var:n4> * <nat:8> ; \\ \{ <var:Q> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:A> ^ <nat:3> \land <var:n4> = <nat:8> \cdot <var:A> ^ <nat:4> \land <var:n0> = <nat:6> \} \\ <var:W> := <var:n4> \\ \{ <var:Q> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:n3> = <nat:4> \cdot <var:A> ^ <nat:3> \land <var:n0> = <nat:6> \land <var:W> = <nat:8> \cdot <var:A> ^ <nat:4> \} \\ <var:W> := <var:W> + <var:n3> \\ \{ <var:Q> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n2> = <nat:9> \cdot <var:A> ^ <nat:2> \land <var:n0> = <nat:6> \land <var:W> = <nat:8> \cdot <var:A> ^ <nat:4> + <nat:4> \cdot <var:A> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:n2> \\ \{ <var:Q> = <var:A> \land <var:n1> = <nat:5> \cdot <var:A> \land <var:n0> = <nat:6> \land <var:W> = <nat:8> \cdot <var:A> ^ <nat:4> + <nat:4> \cdot <var:A> ^ <nat:3> + <nat:9> \cdot <var:A> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:n1> \\ \{ <var:Q> = <var:A> \land <var:n0> = <nat:6> \land <var:W> = <nat:8> \cdot <var:A> ^ <nat:4> + <nat:4> \cdot <var:A> ^ <nat:3> + <nat:9> \cdot <var:A> ^ <nat:2> + <nat:5> \cdot <var:A> \} \\ <var:W> := <var:W> + <var:n0> \\ \{ <var:Q> = <var:A> \land <var:W> = <nat:8> \cdot <var:A> ^ <nat:4> + <nat:4> \cdot <var:A> ^ <nat:3> + <nat:9> \cdot <var:A> ^ <nat:2> + <nat:5> \cdot <var:A> + <nat:6> \} \end{eqnarray} Applying usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <var:n4> : string := " <var:n4> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:Q> = <var:A> }} <var:n1> := <var:Q> ; <var:n2> := <var:n1> * <var:Q> ; <var:n3> := <var:n2> * <var:Q> ; <var:n4> := <var:n3> * <var:Q> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:5> ; <var:n2> := <var:n2> * <nat:9> ; <var:n3> := <var:n3> * <nat:4> ; <var:n4> := <var:n4> * <nat:8> ; <var:W> := <var:n4> <var:W> := <var:W> + <var:n3> <var:W> := <var:W> + <var:n2> <var:W> := <var:W> + <var:n1> <var:W> := <var:W> + <var:n0> {{ <var:W> = <nat:8> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:n1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:n1> = <var:A> /\ <var:n2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:n1> = <var:A> /\ <var:n2> = <var:A> ^ <nat:2> /\ <var:n3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:n1> = <var:A> /\ <var:n2> = <var:A> ^ <nat:2> /\ <var:n3> = <var:A> ^ <nat:3> /\ <var:n4> = <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:n1> = <var:A> /\ <var:n2> = <var:A> ^ <nat:2> /\ <var:n3> = <var:A> ^ <nat:3> /\ <var:n4> = <var:A> ^ <nat:4> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:n1> = <nat:5> * <var:A> /\ <var:n2> = <var:A> ^ <nat:2> /\ <var:n3> = <var:A> ^ <nat:3> /\ <var:n4> = <var:A> ^ <nat:4> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:n1> = <nat:5> * <var:A> /\ <var:n2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:n3> = <var:A> ^ <nat:3> /\ <var:n4> = <var:A> ^ <nat:4> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:n1> = <nat:5> * <var:A> /\ <var:n2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:A> ^ <nat:3> /\ <var:n4> = <var:A> ^ <nat:4> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:n1> = <nat:5> * <var:A> /\ <var:n2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:A> ^ <nat:3> /\ <var:n4> = <nat:8> * <var:A> ^ <nat:4> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:n1> = <nat:5> * <var:A> /\ <var:n2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:n3> = <nat:4> * <var:A> ^ <nat:3> /\ <var:n0> = <nat:6> /\ <var:W> = <nat:8> * <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:n1> = <nat:5> * <var:A> /\ <var:n2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:n0> = <nat:6> /\ <var:W> = <nat:8> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:n1> = <nat:5> * <var:A> /\ <var:n0> = <nat:6> /\ <var:W> = <nat:8> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:n0> = <nat:6> /\ <var:W> = <nat:8> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:W> = <nat:8> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 