\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} as follows \begin{verbatim} <var:k> := <nat:1> ; <var:k> := <nat:1> + <var:k> * <var:i> ; <var:k> := <nat:1> + <var:k> * <var:i> ; <var:k> := <nat:3> + <var:k> * <var:i> ; <var:k> := <var:k> * <var:i> ; <var:k> := <nat:3> + <var:k> * <var:i> ; <var:k> := <nat:4> + <var:k> * <var:i> ; <var:k> := <nat:2> + <var:k> * <var:i> ; <var:k> := <nat:4> + <var:k> * <var:i> ; <var:k> := <nat:2> + <var:k> * <var:i> ; <var:k> := <nat:4> + <var:k> * <var:i> ; <var:k> := <nat:2> + <var:k> * <var:i> ; <var:k> := <nat:1> + <var:k> * <var:i> \end{verbatim} Allowing $ <var:i> = <var:Q> $ prior to running the list of instructions then we have $ <var:k> = <nat:1> \cdot <var:Q> ^ <nat:12> + <nat:1> \cdot <var:Q> ^ <nat:11> + <nat:1> \cdot <var:Q> ^ <nat:10> + <nat:3> \cdot <var:Q> ^ <nat:9> + <nat:3> \cdot <var:Q> ^ <nat:7> + <nat:4> \cdot <var:Q> ^ <nat:6> + <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:1> $ . \end{theorem} \begin{proof} The argument for the segment of code can be done with Hoare logic . Honing in on the subsequent lines contained in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:i> = <var:Q> \} & <var:k> := <nat:1> & \{ <var:i> = <var:Q> \land <var:k> = <nat:1> \} \\ \{ <var:i> = <var:Q> \land <var:k> = <nat:1> \} & <var:k> := <nat:1> + <var:k> * <var:i> & \{ <var:i> = <var:Q> \land <var:k> = <nat:1> * <var:Q> + <nat:1> \} \end{tabular} This is given with the variable binding rule defined in Hoare logic . Observing the following lines of codein the series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:i> = <var:Q> \} & <var:k> := <nat:1> & \{ <var:i> = <var:Q> \land <var:k> = <nat:1> \} \\ \{ <var:i> = <var:Q> \land <var:k> = <nat:1> \} & <var:k> := <nat:1> + <var:k> * <var:i> & \{ <var:i> = <var:Q> \land <var:k> = <nat:1> * <var:Q> + <nat:1> \} \end{tabular} Advancing to the subsequent steps in the code segment , we have \[ \begin{tabular} {rcl} \{ <var:i> = <var:Q> \} & <var:k> := <nat:1> & \{ <var:i> = <var:Q> \land <var:k> = <nat:1> \} \\ \{ <var:i> = <var:Q> \land <var:k> = <nat:1> \} & <var:k> := <nat:1> + <var:k> * <var:i> & \{ <var:i> = <var:Q> \land <var:k> = <nat:1> * <var:Q> + <nat:1> \} \\ \{ <var:i> = <var:Q> \land <var:k> = <nat:1> * <var:Q> + <nat:1> \} & <var:k> := <nat:1> + <var:k> * <var:i> & \{ <var:i> = <var:Q> \land <var:k> = <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> \} \\ \{ <var:i> = <var:Q> \land <var:k> = <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> \} & <var:k> := <nat:3> + <var:k> * <var:i> & \{ <var:i> = <var:Q> \land <var:k> = <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> \} \end{tabular} Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:i> = <var:Q> \} & <var:k> := <nat:1> & \{ <var:i> = <var:Q> \land <var:k> = <nat:1> \} \\ \{ <var:i> = <var:Q> \land <var:k> = <nat:1> \} & <var:k> := <nat:1> + <var:k> * <var:i> & \{ <var:i> = <var:Q> \land <var:k> = <nat:1> * <var:Q> + <nat:1> \} \end{tabular} This is known to be sound by the environment update inference rule from standard Hoare techniques . Moving on , \[ \begin{tabular} {rcl} \{ <var:i> = <var:Q> \} & <var:k> := <nat:1> & \{ <var:i> = <var:Q> \land <var:k> = <nat:1> \} \\ \{ <var:i> = <var:Q> \land <var:k> = <nat:1> \} & <var:k> := <nat:1> + <var:k> * <var:i> & \{ <var:i> = <var:Q> \land <var:k> = <nat:1> * <var:Q> + <nat:1> \} \end{tabular} Advancing , we see \[ \begin{tabular} {rcl} \{ <var:i> = <var:Q> \} & <var:k> := <nat:1> & \{ <var:i> = <var:Q> \land <var:k> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:i> = <var:Q> }} <var:k> := <nat:1> ; <var:k> := <nat:1> + <var:k> * <var:i> ; <var:k> := <nat:1> + <var:k> * <var:i> ; <var:k> := <nat:3> + <var:k> * <var:i> ; <var:k> := <var:k> * <var:i> ; <var:k> := <nat:3> + <var:k> * <var:i> ; <var:k> := <nat:4> + <var:k> * <var:i> ; <var:k> := <nat:2> + <var:k> * <var:i> ; <var:k> := <nat:4> + <var:k> * <var:i> ; <var:k> := <nat:2> + <var:k> * <var:i> ; <var:k> := <nat:4> + <var:k> * <var:i> ; <var:k> := <nat:2> + <var:k> * <var:i> ; <var:k> := <nat:1> + <var:k> * <var:i> {{ <var:k> = <nat:1> * <var:Q> ^ <nat:12> + <nat:1> * <var:Q> ^ <nat:11> + <nat:1> * <var:Q> ^ <nat:10> + <nat:3> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:k> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:k> = <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:10> + <nat:1> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:11> + <nat:1> * <var:Q> ^ <nat:10> + <nat:1> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Q> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:12> + <nat:1> * <var:Q> ^ <nat:11> + <nat:1> * <var:Q> ^ <nat:10> + <nat:3> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 