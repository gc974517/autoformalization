\begin{document} \begin{theorem} Define the following series of instructions such that \begin{verbatim} <var:c1> := <var:H> ; <var:c0> := <nat:1> ; <var:c1> := <var:c1> * <nat:2> ; <var:T> := <var:c1> <var:T> := <var:T> + <var:c0> \end{verbatim} Assuming given $ <var:d> \in \mathbb{Z}^+ $ it to hold that $ <var:H> = <var:d> $ before running the code segment , it follows that we see $ <var:T> = <nat:2> \cdot <var:d> + <nat:1> $ after list of instructions executes . \end{theorem} \begin{proof} The proof of the set of instructions is demonstrated with the below decorated list of commands . \begin{eqnarray} \{ <var:H> = <var:d> \} \\ <var:c1> := <var:H> ; \\ \{ <var:H> = <var:d> \land <var:c1> = <var:d> \} \\ <var:c0> := <nat:1> ; \\ \{ <var:H> = <var:d> \land <var:c1> = <var:d> \land <var:c0> = <nat:1> \} \\ <var:c1> := <var:c1> * <nat:2> ; \\ \{ <var:H> = <var:d> \land <var:c1> = <nat:2> * <var:d> \land <var:c0> = <nat:1> \} \\ <var:T> := <var:c1> \\ \{ <var:H> = <var:d> \land <var:c0> = <nat:1> \land <var:T> = <nat:2> * <var:d> \} \\ <var:T> := <var:T> + <var:c0> \\ \{ <var:H> = <var:d> \land <var:T> = <nat:2> * <var:d> + <nat:1> \} \end{eqnarray} Applying standard Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:H> = <var:d> }} <var:c1> := <var:H> ; <var:c0> := <nat:1> ; <var:c1> := <var:c1> * <nat:2> ; <var:T> := <var:c1> <var:T> := <var:T> + <var:c0> {{ <var:T> = <nat:2> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:d> /\ <var:c1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:d> /\ <var:c1> = <var:d> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:d> /\ <var:c1> = <nat:2> * <var:d> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:d> /\ <var:c0> = <nat:1> /\ <var:T> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:d> /\ <var:T> = <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 