\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:2> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:c> ; <var:q2> := <nat:7> ; <var:q2> := <var:q2> * <var:c> ; <var:q2> := <var:q2> * <var:c> ; <var:v> := <var:q2> ; <var:v> := <var:v> + <var:q1> ; <var:v> := <var:v> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:c> = <var:O> $ ( given all natural numbers $ <var:O> $ ) before running this set of instructions it follows that $ <var:v> = <nat:7> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:2> $ when series of commands is done . \end{theorem} \begin{proof} Applying Hoare reasoning gives : \begin{eqnarray} \{ <var:c> = <var:O> \} \\ <var:q0> := <nat:2> ; \\ \{ <var:c> = <var:O> \land <var:q0> = <nat:2> \} \\ <var:q1> := <nat:4> ; \\ \{ <var:c> = <var:O> \land <var:q0> = <nat:2> \land <var:q1> = <nat:4> \} \\ <var:q1> := <var:q1> * <var:c> ; \\ \{ <var:c> = <var:O> \land <var:q0> = <nat:2> \land <var:q1> = <nat:4> \times <var:O> \} \\ <var:q2> := <nat:7> ; \\ \{ <var:c> = <var:O> \land <var:q0> = <nat:2> \land <var:q1> = <nat:4> \times <var:O> \land <var:q2> = <nat:7> \} \\ <var:q2> := <var:q2> * <var:c> ; \\ \{ <var:c> = <var:O> \land <var:q0> = <nat:2> \land <var:q1> = <nat:4> \times <var:O> \land <var:q2> = <nat:7> \times <var:O> \} \\ <var:q2> := <var:q2> * <var:c> ; \\ \{ <var:c> = <var:O> \land <var:q0> = <nat:2> \land <var:q1> = <nat:4> \times <var:O> \land <var:q2> = <nat:7> \times <var:O> ^ <nat:2> \} \\ <var:v> := <var:q2> ; \\ \{ <var:c> = <var:O> \land <var:q0> = <nat:2> \land <var:q1> = <nat:4> \times <var:O> \land <var:v> = <nat:7> \times <var:O> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:q1> ; \\ \{ <var:c> = <var:O> \land <var:q0> = <nat:2> \land <var:v> = <nat:7> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> \} \\ <var:v> := <var:v> + <var:q0> \\ \{ <var:c> = <var:O> \land <var:v> = <nat:7> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:2> \} \end{eqnarray} Thusly , this set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q0> := <nat:2> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:c> ; <var:q2> := <nat:7> ; <var:q2> := <var:q2> * <var:c> ; <var:q2> := <var:q2> * <var:c> ; <var:v> := <var:q2> ; <var:v> := <var:v> + <var:q1> ; <var:v> := <var:v> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:c> = <var:O> }} <def:poly> {{ <var:v> = <nat:7> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:4> * <var:O> /\ <var:q2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:4> * <var:O> /\ <var:q2> = <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:4> * <var:O> /\ <var:q2> = <nat:7> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:4> * <var:O> /\ <var:v> = <nat:7> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:q0> = <nat:2> /\ <var:v> = <nat:7> * <var:O> ^ <nat:2> + <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:v> = <nat:7> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 