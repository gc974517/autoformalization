\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:W> := <nat:4> ; <var:W> := <var:W> * <var:w> ; <var:W> := <nat:3> + <var:W> * <var:w> ; <var:W> := <nat:4> + <var:W> * <var:w> ; <var:W> := <nat:1> + <var:W> * <var:w> ; <var:W> := <var:W> * <var:w> ; <var:W> := <nat:4> + <var:W> * <var:w> ; <var:W> := <nat:4> + <var:W> * <var:w> ; <var:W> := <nat:3> + <var:W> * <var:w> ; <var:W> := <var:W> * <var:w> ; <var:W> := <nat:4> + <var:W> * <var:w> ; <var:W> := <nat:1> + <var:W> * <var:w> \end{verbatim} \end{definition} \begin{theorem} Assume assuming some natural numbers $ <var:r> $ that we have $ <var:w> = <var:r> $ before the evaluation of the code , it follows that we have $ <var:W> = <nat:4> \cdot <var:r> ^ <nat:11> + <nat:3> \cdot <var:r> ^ <nat:9> + <nat:4> \cdot <var:r> ^ <nat:8> + <nat:1> \cdot <var:r> ^ <nat:7> + <nat:4> \cdot <var:r> ^ <nat:5> + <nat:4> \cdot <var:r> ^ <nat:4> + <nat:3> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> + <nat:1> $ once list of commands terminates . \end{theorem} \begin{proof} The flow of logic for our series of commands can be given through the following decorated program . \begin{eqnarray} \{ <var:w> = <var:r> \} \\ <var:W> := <nat:4> ; \\ \{ <var:w> = <var:r> \land <var:W> = <nat:4> \} \\ <var:W> := <var:W> * <var:w> ; \\ \{ <var:w> = <var:r> \land <var:W> = <nat:4> \cdot <var:r> + \} \\ <var:W> := <nat:3> + <var:W> * <var:w> ; \\ \{ <var:w> = <var:r> \land <var:W> = <nat:4> \cdot <var:r> ^ <nat:2> + <nat:3> \} \\ <var:W> := <nat:4> + <var:W> * <var:w> ; \\ \{ <var:w> = <var:r> \land <var:W> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> + <nat:4> \} \\ <var:W> := <nat:1> + <var:W> * <var:w> ; \\ \{ <var:w> = <var:r> \land <var:W> = <nat:4> \cdot <var:r> ^ <nat:4> + <nat:3> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:1> \} \\ <var:W> := <var:W> * <var:w> ; \\ \{ <var:w> = <var:r> \land <var:W> = <nat:4> \cdot <var:r> ^ <nat:5> + <nat:3> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:1> \cdot <var:r> + \} \\ <var:W> := <nat:4> + <var:W> * <var:w> ; \\ \{ <var:w> = <var:r> \land <var:W> = <nat:4> \cdot <var:r> ^ <nat:6> + <nat:3> \cdot <var:r> ^ <nat:4> + <nat:4> \cdot <var:r> ^ <nat:3> + <nat:1> \cdot <var:r> ^ <nat:2> + <nat:4> \} \\ <var:W> := <nat:4> + <var:W> * <var:w> ; \\ \{ <var:w> = <var:r> \land <var:W> = <nat:4> \cdot <var:r> ^ <nat:7> + <nat:3> \cdot <var:r> ^ <nat:5> + <nat:4> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> + <nat:4> \} \\ <var:W> := <nat:3> + <var:W> * <var:w> ; \\ \{ <var:w> = <var:r> \land <var:W> = <nat:4> \cdot <var:r> ^ <nat:8> + <nat:3> \cdot <var:r> ^ <nat:6> + <nat:4> \cdot <var:r> ^ <nat:5> + <nat:1> \cdot <var:r> ^ <nat:4> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:3> \} \\ <var:W> := <var:W> * <var:w> ; \\ \{ <var:w> = <var:r> \land <var:W> = <nat:4> \cdot <var:r> ^ <nat:9> + <nat:3> \cdot <var:r> ^ <nat:7> + <nat:4> \cdot <var:r> ^ <nat:6> + <nat:1> \cdot <var:r> ^ <nat:5> + <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:3> \cdot <var:r> + \} \\ <var:W> := <nat:4> + <var:W> * <var:w> ; \\ \{ <var:w> = <var:r> \land <var:W> = <nat:4> \cdot <var:r> ^ <nat:10> + <nat:3> \cdot <var:r> ^ <nat:8> + <nat:4> \cdot <var:r> ^ <nat:7> + <nat:1> \cdot <var:r> ^ <nat:6> + <nat:4> \cdot <var:r> ^ <nat:4> + <nat:4> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> + <nat:4> \} \\ <var:W> := <nat:1> + <var:W> * <var:w> \\ \{ <var:w> = <var:r> \land <var:W> = <nat:4> \cdot <var:r> ^ <nat:11> + <nat:3> \cdot <var:r> ^ <nat:9> + <nat:4> \cdot <var:r> ^ <nat:8> + <nat:1> \cdot <var:r> ^ <nat:7> + <nat:4> \cdot <var:r> ^ <nat:5> + <nat:4> \cdot <var:r> ^ <nat:4> + <nat:3> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> + <nat:1> \} \end{eqnarray} Applying standard Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:4> ; <var:W> := <var:W> * <var:w> ; <var:W> := <nat:3> + <var:W> * <var:w> ; <var:W> := <nat:4> + <var:W> * <var:w> ; <var:W> := <nat:1> + <var:W> * <var:w> ; <var:W> := <var:W> * <var:w> ; <var:W> := <nat:4> + <var:W> * <var:w> ; <var:W> := <nat:4> + <var:W> * <var:w> ; <var:W> := <nat:3> + <var:W> * <var:w> ; <var:W> := <var:W> * <var:w> ; <var:W> := <nat:4> + <var:W> * <var:w> ; <var:W> := <nat:1> + <var:W> * <var:w> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:w> = <var:r> }} <def:poly> {{ <var:W> = <nat:4> * <var:r> ^ <nat:11> + <nat:3> * <var:r> ^ <nat:9> + <nat:4> * <var:r> ^ <nat:8> + <nat:1> * <var:r> ^ <nat:7> + <nat:4> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:4> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:W> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:W> = <nat:4> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:W> = <nat:4> * <var:r> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:W> = <nat:4> * <var:r> ^ <nat:3> + <nat:3> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:W> = <nat:4> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:W> = <nat:4> * <var:r> ^ <nat:5> + <nat:3> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:W> = <nat:4> * <var:r> ^ <nat:6> + <nat:3> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:W> = <nat:4> * <var:r> ^ <nat:7> + <nat:3> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:4> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:W> = <nat:4> * <var:r> ^ <nat:8> + <nat:3> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:W> = <nat:4> * <var:r> ^ <nat:9> + <nat:3> * <var:r> ^ <nat:7> + <nat:4> * <var:r> ^ <nat:6> + <nat:1> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:W> = <nat:4> * <var:r> ^ <nat:10> + <nat:3> * <var:r> ^ <nat:8> + <nat:4> * <var:r> ^ <nat:7> + <nat:1> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:r> /\ <var:W> = <nat:4> * <var:r> ^ <nat:11> + <nat:3> * <var:r> ^ <nat:9> + <nat:4> * <var:r> ^ <nat:8> + <nat:1> * <var:r> ^ <nat:7> + <nat:4> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:4> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 