\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x> := <nat:2> ; <var:x> := <nat:3> + <var:x> * <var:l> \end{verbatim} \end{definition} \begin{theorem} Assuming for all integers $ <var:S> $ it to hold that $ <var:l> = <var:S> $ before running our code segment , then $ <var:x> = <nat:2> * <var:S> + <nat:3> $ once series of commands has finished . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives : \begin{eqnarray} \{ <var:l> = <var:S> \} \\ <var:x> := <nat:2> ; \\ \{ <var:l> = <var:S> \land <var:x> = <nat:2> \} \\ <var:x> := <nat:3> + <var:x> * <var:l> \\ \{ <var:l> = <var:S> \land <var:x> = <nat:2> \cdot <var:S> + <nat:3> \} \end{eqnarray} Thus , this segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:2> ; <var:x> := <nat:3> + <var:x> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:l> = <var:S> }} <def:poly> {{ <var:x> = <nat:2> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:x> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:S> /\ <var:x> = <nat:2> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 