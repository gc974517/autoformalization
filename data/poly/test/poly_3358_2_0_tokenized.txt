\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:8> ; <var:q> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Given that $ <var:C> = <var:I> $ for all integers $ <var:I> $ prior to the evaluation of our series of commands , it must be that we see $ <var:q> = <nat:8> $ when list of commands finishes . \end{theorem} \begin{proof} Applying typical Hoare logic produces : \begin{eqnarray} \{ <var:C> = <var:I> \} \\ <var:y0> := <nat:8> ; \\ \{ <var:C> = <var:I> \land <var:y0> = <nat:8> \} \\ <var:q> := <var:y0> \\ \{ <var:C> = <var:I> \land <var:q> = <nat:8> \} \end{eqnarray} Considering the preceding argument , our set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:8> ; <var:q> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:C> = <var:I> }} <def:poly> {{ <var:q> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:q> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 