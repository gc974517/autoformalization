\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:i> := <nat:2> ; <var:i> := <nat:2> + <var:i> * <var:V> ; <var:i> := <nat:2> + <var:i> * <var:V> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> . Allowing , with some $ <var:P> \in \mathbb{N} $ , it to hold that $ <var:V> = <var:P> $ ahead of evaluating our set of commands , it follows that we see $ <var:i> = <nat:2> \times <var:P> ^ <nat:2> + <nat:2> \times <var:P> + <nat:2> $ after set of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:P> \} \\ <var:i> := <nat:2> ; \\ \{ <var:V> = <var:P> \land <var:i> = <nat:2> \} \\ <var:i> := <nat:2> + <var:i> * <var:V> ; \\ \{ <var:V> = <var:P> \land <var:i> = <nat:2> * <var:P> + <nat:2> \} \\ <var:i> := <nat:2> + <var:i> * <var:V> \\ \{ <var:V> = <var:P> \land <var:i> = <nat:2> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:2> \} \end{eqnarray} Using standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:i> := <nat:2> ; <var:i> := <nat:2> + <var:i> * <var:V> ; <var:i> := <nat:2> + <var:i> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:V> = <var:P> }} <def:poly> {{ <var:i> = <nat:2> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:P> /\ <var:i> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:P> /\ <var:i> = <nat:2> * <var:P> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:P> /\ <var:i> = <nat:2> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 