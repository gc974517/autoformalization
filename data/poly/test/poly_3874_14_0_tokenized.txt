\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:8> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:W> ; <var:b2> := <nat:7> ; <var:b2> := <var:b2> * <var:W> ; <var:b2> := <var:b2> * <var:W> ; <var:b3> := <nat:6> ; <var:b3> := <var:b3> * <var:W> ; <var:b3> := <var:b3> * <var:W> ; <var:b3> := <var:b3> * <var:W> ; <var:a> := <var:b3> ; <var:a> := <var:a> + <var:b2> ; <var:a> := <var:a> + <var:b1> ; <var:a> := <var:a> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:W> = <var:X> $ with some integers $ <var:X> $ ahead of the execution of this series of commands then we have $ <var:a> = <nat:6> \cdot <var:X> ^ <nat:3> + <nat:7> \cdot <var:X> ^ <nat:2> + <nat:5> \cdot <var:X> + <nat:8> $ when series of commands is done . \end{theorem} \begin{proof} Applying typical Hoare techniques results in : \begin{eqnarray} \{ <var:W> = <var:X> \} \\ <var:b0> := <nat:8> ; \\ \{ <var:W> = <var:X> \land <var:b0> = <nat:8> \} \\ <var:b1> := <nat:5> ; \\ \{ <var:W> = <var:X> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \} \\ <var:b1> := <var:b1> * <var:W> ; \\ \{ <var:W> = <var:X> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:X> \} \\ <var:b2> := <nat:7> ; \\ \{ <var:W> = <var:X> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:X> \land <var:b2> = <nat:7> \} \\ <var:b2> := <var:b2> * <var:W> ; \\ \{ <var:W> = <var:X> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:X> \land <var:b2> = <nat:7> \cdot <var:X> \} \\ <var:b2> := <var:b2> * <var:W> ; \\ \{ <var:W> = <var:X> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:X> \land <var:b2> = <nat:7> \cdot <var:X> ^ <nat:2> \} \\ <var:b3> := <nat:6> ; \\ \{ <var:W> = <var:X> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:X> \land <var:b2> = <nat:7> \cdot <var:X> ^ <nat:2> \land <var:b3> = <nat:6> \} \\ <var:b3> := <var:b3> * <var:W> ; \\ \{ <var:W> = <var:X> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:X> \land <var:b2> = <nat:7> \cdot <var:X> ^ <nat:2> \land <var:b3> = <nat:6> \cdot <var:X> \} \\ <var:b3> := <var:b3> * <var:W> ; \\ \{ <var:W> = <var:X> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:X> \land <var:b2> = <nat:7> \cdot <var:X> ^ <nat:2> \land <var:b3> = <nat:6> \cdot <var:X> ^ <nat:2> \} \\ <var:b3> := <var:b3> * <var:W> ; \\ \{ <var:W> = <var:X> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:X> \land <var:b2> = <nat:7> \cdot <var:X> ^ <nat:2> \land <var:b3> = <nat:6> \cdot <var:X> ^ <nat:3> \} \\ <var:a> := <var:b3> ; \\ \{ <var:W> = <var:X> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:X> \land <var:b2> = <nat:7> \cdot <var:X> ^ <nat:2> \land <var:a> = <nat:6> \cdot <var:X> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:b2> ; \\ \{ <var:W> = <var:X> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \cdot <var:X> \land <var:a> = <nat:6> \cdot <var:X> ^ <nat:3> + <nat:7> \cdot <var:X> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:b1> ; \\ \{ <var:W> = <var:X> \land <var:b0> = <nat:8> \land <var:a> = <nat:6> \cdot <var:X> ^ <nat:3> + <nat:7> \cdot <var:X> ^ <nat:2> + <nat:5> \cdot <var:X> \} \\ <var:a> := <var:a> + <var:b0> \\ \{ <var:W> = <var:X> \land <var:a> = <nat:6> \cdot <var:X> ^ <nat:3> + <nat:7> \cdot <var:X> ^ <nat:2> + <nat:5> \cdot <var:X> + <nat:8> \} \end{eqnarray} Given the above , our series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Definition <def:poly> := <var:b0> := <nat:8> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:W> ; <var:b2> := <nat:7> ; <var:b2> := <var:b2> * <var:W> ; <var:b2> := <var:b2> * <var:W> ; <var:b3> := <nat:6> ; <var:b3> := <var:b3> * <var:W> ; <var:b3> := <var:b3> * <var:W> ; <var:b3> := <var:b3> * <var:W> ; <var:a> := <var:b3> ; <var:a> := <var:a> + <var:b2> ; <var:a> := <var:a> + <var:b1> ; <var:a> := <var:a> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:W> = <var:X> }} <def:poly> {{ <var:a> = <nat:6> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:5> * <var:X> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:X> /\ <var:b2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:X> /\ <var:b2> = <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:X> /\ <var:b2> = <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:X> /\ <var:b2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:b3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:X> /\ <var:b2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:b3> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:X> /\ <var:b2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:b3> = <nat:6> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:X> /\ <var:b2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:b3> = <nat:6> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:X> /\ <var:b2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:a> = <nat:6> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:X> /\ <var:a> = <nat:6> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:b0> = <nat:8> /\ <var:a> = <nat:6> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:X> /\ <var:a> = <nat:6> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:5> * <var:X> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 