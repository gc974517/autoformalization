\begin{document} \begin{theorem} Define a set of instructions as follows \begin{verbatim} <var:N1> := <var:a> ; <var:N2> := <var:N1> * <var:a> ; <var:N3> := <var:N2> * <var:a> ; <var:N0> := <nat:1> ; <var:N1> := <var:N1> * <nat:3> ; <var:N2> := <var:N2> * <nat:2> ; <var:N3> := <var:N3> * <nat:2> ; <var:K> := <var:N3> <var:K> := <var:K> + <var:N2> <var:K> := <var:K> + <var:N1> <var:K> := <var:K> + <var:N0> \end{verbatim} Assume --- given some positive numbers $ <var:V> $ --- it to hold that $ <var:a> = <var:V> $ before evaluating this series of commands it must be that $ <var:K> = <nat:2> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:1> $ when series of commands finishes . \end{theorem} \begin{proof} The method of proof for this program is given with typical Hoare techniques . Jumping to the following commands contained in the set of instructions , \verb | { <var:a> = <var:V> } <var:N1> := <var:a> { <var:a> = <var:V> \land <var:N1> = <var:V> } | , \verb | { <var:a> = <var:V> \land <var:N1> = <var:V> } <var:N2> := <var:N1> * <var:a> { <var:a> = <var:V> \land <var:N1> = <var:V> \land <var:N2> = <var:V> ^ <nat:2> } | , \verb | { <var:a> = <var:V> \land <var:N1> = <var:V> \land <var:N2> = <var:V> ^ <nat:2> } <var:N3> := <var:N2> * <var:a> { <var:a> = <var:V> \land <var:N1> = <var:V> \land <var:N2> = <var:V> ^ <nat:2> \land <var:N3> = <var:V> ^ <nat:3> } | , \verb | { <var:a> = <var:V> \land <var:N1> = <var:V> \land <var:N2> = <var:V> ^ <nat:2> \land <var:N3> = <var:V> ^ <nat:3> } <var:N0> := <nat:1> { <var:a> = <var:V> \land <var:N1> = <var:V> \land <var:N2> = <var:V> ^ <nat:2> \land <var:N3> = <var:V> ^ <nat:3> \land <var:N0> = <nat:1> } | , \verb | { <var:a> = <var:V> \land <var:N1> = <var:V> \land <var:N2> = <var:V> ^ <nat:2> \land <var:N3> = <var:V> ^ <nat:3> \land <var:N0> = <nat:1> } <var:N1> := <var:N1> * <nat:3> { <var:a> = <var:V> \land <var:N1> = <nat:3> \times <var:V> \land <var:N2> = <var:V> ^ <nat:2> \land <var:N3> = <var:V> ^ <nat:3> \land <var:N0> = <nat:1> } | , \verb | { <var:a> = <var:V> \land <var:N1> = <nat:3> \times <var:V> \land <var:N2> = <var:V> ^ <nat:2> \land <var:N3> = <var:V> ^ <nat:3> \land <var:N0> = <nat:1> } <var:N2> := <var:N2> * <nat:2> { <var:a> = <var:V> \land <var:N1> = <nat:3> \times <var:V> \land <var:N2> = <nat:2> \times <var:V> ^ <nat:2> \land <var:N3> = <var:V> ^ <nat:3> \land <var:N0> = <nat:1> } | , \verb | { <var:a> = <var:V> \land <var:N1> = <nat:3> \times <var:V> \land <var:N2> = <nat:2> \times <var:V> ^ <nat:2> \land <var:N3> = <var:V> ^ <nat:3> \land <var:N0> = <nat:1> } <var:N3> := <var:N3> * <nat:2> { <var:a> = <var:V> \land <var:N1> = <nat:3> \times <var:V> \land <var:N2> = <nat:2> \times <var:V> ^ <nat:2> \land <var:N3> = <nat:2> \times <var:V> ^ <nat:3> \land <var:N0> = <nat:1> } | , \verb | { <var:a> = <var:V> \land <var:N1> = <nat:3> \times <var:V> \land <var:N2> = <nat:2> \times <var:V> ^ <nat:2> \land <var:N3> = <nat:2> \times <var:V> ^ <nat:3> \land <var:N0> = <nat:1> } <var:K> := <var:N3{ <var:a> = <var:V> \land <var:N1> = <nat:3> \times <var:V> \land <var:N2> = <nat:2> \times <var:V> ^ <nat:2> \land <var:N0> = <nat:1> \land <var:K> = <nat:2> \times <var:V> ^ <nat:3> } | , \verb | { <var:a> = <var:V> \land <var:N1> = <nat:3> \times <var:V> \land <var:N2> = <nat:2> \times <var:V> ^ <nat:2> \land <var:N0> = <nat:1> \land <var:K> = <nat:2> \times <var:V> ^ <nat:3> } <var:K> := <var:K> + <var:N2{ <var:a> = <var:V> \land <var:N1> = <nat:3> \times <var:V> \land <var:N0> = <nat:1> \land <var:K> = <nat:2> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> } | , \verb | { <var:a> = <var:V> \land <var:N1> = <nat:3> \times <var:V> \land <var:N0> = <nat:1> \land <var:K> = <nat:2> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> } <var:K> := <var:K> + <var:N1{ <var:a> = <var:V> \land <var:N0> = <nat:1> \land <var:K> = <nat:2> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> } | and \verb | { <var:a> = <var:V> \land <var:N0> = <nat:1> \land <var:K> = <nat:2> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> } <var:K> := <var:K> + <var:N0{ <var:a> = <var:V> \land <var:K> = <nat:2> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:1> } | . This is rigorously given with the assignment law given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:a> = <var:V> }} <var:N1> := <var:a> ; <var:N2> := <var:N1> * <var:a> ; <var:N3> := <var:N2> * <var:a> ; <var:N0> := <nat:1> ; <var:N1> := <var:N1> * <nat:3> ; <var:N2> := <var:N2> * <nat:2> ; <var:N3> := <var:N3> * <nat:2> ; <var:K> := <var:N3> <var:K> := <var:K> + <var:N2> <var:K> := <var:K> + <var:N1> <var:K> := <var:K> + <var:N0> {{ <var:K> = <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:N1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:N1> = <var:V> /\ <var:N2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:N1> = <var:V> /\ <var:N2> = <var:V> ^ <nat:2> /\ <var:N3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:N1> = <var:V> /\ <var:N2> = <var:V> ^ <nat:2> /\ <var:N3> = <var:V> ^ <nat:3> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:N1> = <nat:3> * <var:V> /\ <var:N2> = <var:V> ^ <nat:2> /\ <var:N3> = <var:V> ^ <nat:3> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:N1> = <nat:3> * <var:V> /\ <var:N2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:N3> = <var:V> ^ <nat:3> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:N1> = <nat:3> * <var:V> /\ <var:N2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:V> ^ <nat:3> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:N1> = <nat:3> * <var:V> /\ <var:N2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:N0> = <nat:1> /\ <var:K> = <nat:2> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:N1> = <nat:3> * <var:V> /\ <var:N0> = <nat:1> /\ <var:K> = <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:N0> = <nat:1> /\ <var:K> = <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:K> = <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 