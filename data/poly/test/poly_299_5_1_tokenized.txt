\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A1> := <var:c> ; <var:A0> := <nat:6> ; <var:A1> := <var:A1> * <nat:7> ; <var:i> := <var:A1> <var:i> := <var:i> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assume --- for all $ <var:e> \in \mathbb{N} $ --- it to be that $ <var:c> = <var:e> $ ahead of executing the series of commands it must be that we see $ <var:i> = <nat:7> \times <var:e> + <nat:6> $ . \end{theorem} \begin{proof} The method of proof for this series of instructions can be demonstrated with typical Hoare reasoning . Going to the next step , \begin{eqnarray} \{ <var:c> = <var:e> \} \, <var:A1> := <var:c> \, \{ <var:c> = <var:e> \land <var:A1> = <var:e> \} \\ \{ <var:c> = <var:e> \land <var:A1> = <var:e> \} \, <var:A0> := <nat:6> \, \{ <var:c> = <var:e> \land <var:A1> = <var:e> \land <var:A0> = <nat:6> \} \\ \{ <var:c> = <var:e> \land <var:A1> = <var:e> \land <var:A0> = <nat:6> \} \, <var:A1> := <var:A1> * <nat:7> \, \{ <var:c> = <var:e> \land <var:A1> = <nat:7> \cdot <var:e> \land <var:A0> = <nat:6> \} \end{eqnarray} Advancing to the subsequent pieces of code in our series of commands , we see \begin{eqnarray} \{ <var:c> = <var:e> \} \, <var:A1> := <var:c> \, \{ <var:c> = <var:e> \land <var:A1> = <var:e> \} \\ \{ <var:c> = <var:e> \land <var:A1> = <var:e> \} \, <var:A0> := <nat:6> \, \{ <var:c> = <var:e> \land <var:A1> = <var:e> \land <var:A0> = <nat:6> \} \end{eqnarray} This is shown through the binding law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A1> := <var:c> ; <var:A0> := <nat:6> ; <var:A1> := <var:A1> * <nat:7> ; <var:i> := <var:A1> <var:i> := <var:i> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:c> = <var:e> }} <def:poly> {{ <var:i> = <nat:7> * <var:e> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:A1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:A1> = <var:e> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:A1> = <nat:7> * <var:e> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:A0> = <nat:6> /\ <var:i> = <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:i> = <nat:7> * <var:e> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 