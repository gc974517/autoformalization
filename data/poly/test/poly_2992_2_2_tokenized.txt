\begin{document} \begin{theorem} Define the following series of commands such that \begin{verbatim} <var:e> := <nat:4> ; <var:e> := <nat:4> + <var:e> * <var:A> \end{verbatim} Given that we have $ <var:A> = <var:g> $ ahead of executing the series of commands it follows that we see $ <var:e> = <nat:4> \cdot <var:g> + <nat:4> $ after set of commands has finished executing . \end{theorem} \begin{proof} Applying standard Hoare techniques yields : \begin{eqnarray} \{ <var:A> = <var:g> \} \\ <var:e> := <nat:4> ; \\ \{ <var:A> = <var:g> \land <var:e> = <nat:4> \} \\ <var:e> := <nat:4> + <var:e> * <var:A> \\ \{ <var:A> = <var:g> \land <var:e> = <nat:4> \cdot <var:g> + <nat:4> \} \end{eqnarray} Therefore , our code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:A> = <var:g> }} <var:e> := <nat:4> ; <var:e> := <nat:4> + <var:e> * <var:A> {{ <var:e> = <nat:4> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:e> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:e> = <nat:4> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 