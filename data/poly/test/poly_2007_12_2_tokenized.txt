\begin{document} \begin{theorem} Let the following program as \begin{verbatim} <var:z> := <nat:2> ; <var:z> := <nat:4> + <var:z> * <var:o> ; <var:z> := <nat:4> + <var:z> * <var:o> ; <var:z> := <nat:4> + <var:z> * <var:o> ; <var:z> := <nat:3> + <var:z> * <var:o> ; <var:z> := <nat:2> + <var:z> * <var:o> ; <var:z> := <nat:1> + <var:z> * <var:o> ; <var:z> := <nat:3> + <var:z> * <var:o> ; <var:z> := <nat:3> + <var:z> * <var:o> ; <var:z> := <nat:4> + <var:z> * <var:o> ; <var:z> := <nat:3> + <var:z> * <var:o> ; <var:z> := <nat:3> + <var:z> * <var:o> \end{verbatim} Assuming --- assuming some $ <var:r> $ --- that we have $ <var:o> = <var:r> $ prior to interpreting the series of instructions it follows that we see $ <var:z> = <nat:2> * <var:r> ^ <nat:11> + <nat:4> * <var:r> ^ <nat:10> + <nat:4> * <var:r> ^ <nat:9> + <nat:4> * <var:r> ^ <nat:8> + <nat:3> * <var:r> ^ <nat:7> + <nat:2> * <var:r> ^ <nat:6> + <nat:1> * <var:r> ^ <nat:5> + <nat:3> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:3> $ after code segment is done . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be given using usual Hoare reasoning . Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:o> = <var:r> \} & <var:z> := <nat:2> & \{ <var:o> = <var:r> \land <var:z> = <nat:2> \} \\ \{ <var:o> = <var:r> \land <var:z> = <nat:2> \} & <var:z> := <nat:4> + <var:z> * <var:o> & \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> + <nat:4> \} \\ \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> + <nat:4> \} & <var:z> := <nat:4> + <var:z> * <var:o> & \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:4> \} \\ \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:4> \} & <var:z> := <nat:4> + <var:z> * <var:o> & \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:4> \} \\ \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:4> \} & <var:z> := <nat:3> + <var:z> * <var:o> & \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:4> + <nat:4> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:3> \} \\ \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:4> + <nat:4> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:3> \} & <var:z> := <nat:2> + <var:z> * <var:o> & \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:5> + <nat:4> \times <var:r> ^ <nat:4> + <nat:4> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> + <nat:2> \} \\ \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:5> + <nat:4> \times <var:r> ^ <nat:4> + <nat:4> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> + <nat:2> \} & <var:z> := <nat:1> + <var:z> * <var:o> & \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:6> + <nat:4> \times <var:r> ^ <nat:5> + <nat:4> \times <var:r> ^ <nat:4> + <nat:4> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> ^ <nat:2> + <nat:2> \times <var:r> + <nat:1> \} \\ \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:6> + <nat:4> \times <var:r> ^ <nat:5> + <nat:4> \times <var:r> ^ <nat:4> + <nat:4> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> ^ <nat:2> + <nat:2> \times <var:r> + <nat:1> \} & <var:z> := <nat:3> + <var:z> * <var:o> & \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:7> + <nat:4> \times <var:r> ^ <nat:6> + <nat:4> \times <var:r> ^ <nat:5> + <nat:4> \times <var:r> ^ <nat:4> + <nat:3> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> + <nat:3> \} \\ \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:7> + <nat:4> \times <var:r> ^ <nat:6> + <nat:4> \times <var:r> ^ <nat:5> + <nat:4> \times <var:r> ^ <nat:4> + <nat:3> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> + <nat:3> \} & <var:z> := <nat:3> + <var:z> * <var:o> & \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:8> + <nat:4> \times <var:r> ^ <nat:7> + <nat:4> \times <var:r> ^ <nat:6> + <nat:4> \times <var:r> ^ <nat:5> + <nat:3> \times <var:r> ^ <nat:4> + <nat:2> \times <var:r> ^ <nat:3> + <nat:1> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> + <nat:3> \} \\ \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:8> + <nat:4> \times <var:r> ^ <nat:7> + <nat:4> \times <var:r> ^ <nat:6> + <nat:4> \times <var:r> ^ <nat:5> + <nat:3> \times <var:r> ^ <nat:4> + <nat:2> \times <var:r> ^ <nat:3> + <nat:1> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> + <nat:3> \} & <var:z> := <nat:4> + <var:z> * <var:o> & \{ <var:o> = <var:r> \land <var:z> = <nat:2> \times <var:r> ^ <nat:9> + <nat:4> \times <var:r> ^ <nat:8> + <nat:4> \times <var:r> ^ <nat:7> + <nat:4> \times <var:r> ^ <nat:6> + <nat:3> \times <var:r> ^ <nat:5> + <nat:2> \times <var:r> ^ <nat:4> + <nat:1> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> + <nat:4> \} \end{tabular} This is known to be sound with the variable binding rule of typical Hoare reasoning . Moving forward to the next step , we have \[ \begin{tabular} {rcl} \{ <var:o> = <var:r> \} & <var:z> := <nat:2> & \{ <var:o> = <var:r> \land <var:z> = <nat:2> \} \end{tabular} This is rigorously given using the variable update law defined by usual Hoare techniques . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:o> = <var:r> \} & <var:z> := <nat:2> & \{ <var:o> = <var:r> \land <var:z> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:o> = <var:r> }} <var:z> := <nat:2> ; <var:z> := <nat:4> + <var:z> * <var:o> ; <var:z> := <nat:4> + <var:z> * <var:o> ; <var:z> := <nat:4> + <var:z> * <var:o> ; <var:z> := <nat:3> + <var:z> * <var:o> ; <var:z> := <nat:2> + <var:z> * <var:o> ; <var:z> := <nat:1> + <var:z> * <var:o> ; <var:z> := <nat:3> + <var:z> * <var:o> ; <var:z> := <nat:3> + <var:z> * <var:o> ; <var:z> := <nat:4> + <var:z> * <var:o> ; <var:z> := <nat:3> + <var:z> * <var:o> ; <var:z> := <nat:3> + <var:z> * <var:o> {{ <var:z> = <nat:2> * <var:r> ^ <nat:11> + <nat:4> * <var:r> ^ <nat:10> + <nat:4> * <var:r> ^ <nat:9> + <nat:4> * <var:r> ^ <nat:8> + <nat:3> * <var:r> ^ <nat:7> + <nat:2> * <var:r> ^ <nat:6> + <nat:1> * <var:r> ^ <nat:5> + <nat:3> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:z> = <nat:2> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:z> = <nat:2> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:z> = <nat:2> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:z> = <nat:2> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:z> = <nat:2> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:z> = <nat:2> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:z> = <nat:2> * <var:r> ^ <nat:7> + <nat:4> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:z> = <nat:2> * <var:r> ^ <nat:8> + <nat:4> * <var:r> ^ <nat:7> + <nat:4> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:5> + <nat:3> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:z> = <nat:2> * <var:r> ^ <nat:9> + <nat:4> * <var:r> ^ <nat:8> + <nat:4> * <var:r> ^ <nat:7> + <nat:4> * <var:r> ^ <nat:6> + <nat:3> * <var:r> ^ <nat:5> + <nat:2> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:z> = <nat:2> * <var:r> ^ <nat:10> + <nat:4> * <var:r> ^ <nat:9> + <nat:4> * <var:r> ^ <nat:8> + <nat:4> * <var:r> ^ <nat:7> + <nat:3> * <var:r> ^ <nat:6> + <nat:2> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:r> /\ <var:z> = <nat:2> * <var:r> ^ <nat:11> + <nat:4> * <var:r> ^ <nat:10> + <nat:4> * <var:r> ^ <nat:9> + <nat:4> * <var:r> ^ <nat:8> + <nat:3> * <var:r> ^ <nat:7> + <nat:2> * <var:r> ^ <nat:6> + <nat:1> * <var:r> ^ <nat:5> + <nat:3> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 