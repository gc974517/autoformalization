\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:A1> := <var:Z> ; <var:A2> := <var:A1> * <var:Z> ; <var:A3> := <var:A2> * <var:Z> ; <var:A4> := <var:A3> * <var:Z> ; <var:A0> := <nat:6> ; <var:A1> := <var:A1> * <nat:7> ; <var:A2> := <var:A2> * <nat:1> ; <var:A3> := <var:A3> * <nat:5> ; <var:A4> := <var:A4> * <nat:5> ; <var:V> := <var:A4> <var:V> := <var:V> + <var:A3> <var:V> := <var:V> + <var:A2> <var:V> := <var:V> + <var:A1> <var:V> := <var:V> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:Z> = <var:a> $ ( given some integers $ <var:a> $ ) before evaluating the program it follows that we have $ <var:V> = <nat:5> \times <var:a> ^ <nat:4> + <nat:5> \times <var:a> ^ <nat:3> + <nat:1> \times <var:a> ^ <nat:2> + <nat:7> \times <var:a> + <nat:6> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:Z> = <var:a> \} \\ <var:A1> := <var:Z> ; \\ \{ <var:Z> = <var:a> \land <var:A1> = <var:a> \} \\ <var:A2> := <var:A1> * <var:Z> ; \\ \{ <var:Z> = <var:a> \land <var:A1> = <var:a> \land <var:A2> = <var:a> ^ <nat:2> \} \\ <var:A3> := <var:A2> * <var:Z> ; \\ \{ <var:Z> = <var:a> \land <var:A1> = <var:a> \land <var:A2> = <var:a> ^ <nat:2> \land <var:A3> = <var:a> ^ <nat:3> \} \\ <var:A4> := <var:A3> * <var:Z> ; \\ \{ <var:Z> = <var:a> \land <var:A1> = <var:a> \land <var:A2> = <var:a> ^ <nat:2> \land <var:A3> = <var:a> ^ <nat:3> \land <var:A4> = <var:a> ^ <nat:4> \} \\ <var:A0> := <nat:6> ; \\ \{ <var:Z> = <var:a> \land <var:A1> = <var:a> \land <var:A2> = <var:a> ^ <nat:2> \land <var:A3> = <var:a> ^ <nat:3> \land <var:A4> = <var:a> ^ <nat:4> \land <var:A0> = <nat:6> \} \\ <var:A1> := <var:A1> * <nat:7> ; \\ \{ <var:Z> = <var:a> \land <var:A1> = <nat:7> * <var:a> \land <var:A2> = <var:a> ^ <nat:2> \land <var:A3> = <var:a> ^ <nat:3> \land <var:A4> = <var:a> ^ <nat:4> \land <var:A0> = <nat:6> \} \end{eqnarray} Advancing executing the series of commands yields : \begin{eqnarray} <var:A2> := <var:A2> * <nat:1> ; \\ \{ <var:Z> = <var:a> \land <var:A1> = <nat:7> * <var:a> \land <var:A2> = <nat:1> * <var:a> ^ <nat:2> \land <var:A3> = <var:a> ^ <nat:3> \land <var:A4> = <var:a> ^ <nat:4> \land <var:A0> = <nat:6> \} \\ <var:A3> := <var:A3> * <nat:5> ; \\ \{ <var:Z> = <var:a> \land <var:A1> = <nat:7> * <var:a> \land <var:A2> = <nat:1> * <var:a> ^ <nat:2> \land <var:A3> = <nat:5> * <var:a> ^ <nat:3> \land <var:A4> = <var:a> ^ <nat:4> \land <var:A0> = <nat:6> \} \\ <var:A4> := <var:A4> * <nat:5> ; \\ \{ <var:Z> = <var:a> \land <var:A1> = <nat:7> * <var:a> \land <var:A2> = <nat:1> * <var:a> ^ <nat:2> \land <var:A3> = <nat:5> * <var:a> ^ <nat:3> \land <var:A4> = <nat:5> * <var:a> ^ <nat:4> \land <var:A0> = <nat:6> \} \\ <var:V> := <var:A4> \\ \{ <var:Z> = <var:a> \land <var:A1> = <nat:7> * <var:a> \land <var:A2> = <nat:1> * <var:a> ^ <nat:2> \land <var:A3> = <nat:5> * <var:a> ^ <nat:3> \land <var:A0> = <nat:6> \land <var:V> = <nat:5> * <var:a> ^ <nat:4> \} \\ <var:V> := <var:V> + <var:A3> \\ \{ <var:Z> = <var:a> \land <var:A1> = <nat:7> * <var:a> \land <var:A2> = <nat:1> * <var:a> ^ <nat:2> \land <var:A0> = <nat:6> \land <var:V> = <nat:5> * <var:a> ^ <nat:4> + <nat:5> * <var:a> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:A2> \\ \{ <var:Z> = <var:a> \land <var:A1> = <nat:7> * <var:a> \land <var:A0> = <nat:6> \land <var:V> = <nat:5> * <var:a> ^ <nat:4> + <nat:5> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:A1> \\ \{ <var:Z> = <var:a> \land <var:A0> = <nat:6> \land <var:V> = <nat:5> * <var:a> ^ <nat:4> + <nat:5> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:7> * <var:a> \} \\ <var:V> := <var:V> + <var:A0> \\ \{ <var:Z> = <var:a> \land <var:V> = <nat:5> * <var:a> ^ <nat:4> + <nat:5> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:7> * <var:a> + <nat:6> \} \end{eqnarray} Given the above , this segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <var:A4> : string := " <var:A4> " . Definition <def:poly> := <var:A1> := <var:Z> ; <var:A2> := <var:A1> * <var:Z> ; <var:A3> := <var:A2> * <var:Z> ; <var:A4> := <var:A3> * <var:Z> ; <var:A0> := <nat:6> ; <var:A1> := <var:A1> * <nat:7> ; <var:A2> := <var:A2> * <nat:1> ; <var:A3> := <var:A3> * <nat:5> ; <var:A4> := <var:A4> * <nat:5> ; <var:V> := <var:A4> <var:V> := <var:V> + <var:A3> <var:V> := <var:V> + <var:A2> <var:V> := <var:V> + <var:A1> <var:V> := <var:V> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:Z> = <var:a> }} <def:poly> {{ <var:V> = <nat:5> * <var:a> ^ <nat:4> + <nat:5> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:7> * <var:a> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:A1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:A1> = <var:a> /\ <var:A2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:A1> = <var:a> /\ <var:A2> = <var:a> ^ <nat:2> /\ <var:A3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:A1> = <var:a> /\ <var:A2> = <var:a> ^ <nat:2> /\ <var:A3> = <var:a> ^ <nat:3> /\ <var:A4> = <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:A1> = <var:a> /\ <var:A2> = <var:a> ^ <nat:2> /\ <var:A3> = <var:a> ^ <nat:3> /\ <var:A4> = <var:a> ^ <nat:4> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:A1> = <nat:7> * <var:a> /\ <var:A2> = <var:a> ^ <nat:2> /\ <var:A3> = <var:a> ^ <nat:3> /\ <var:A4> = <var:a> ^ <nat:4> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:A1> = <nat:7> * <var:a> /\ <var:A2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:A3> = <var:a> ^ <nat:3> /\ <var:A4> = <var:a> ^ <nat:4> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:A1> = <nat:7> * <var:a> /\ <var:A2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:a> ^ <nat:3> /\ <var:A4> = <var:a> ^ <nat:4> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:A1> = <nat:7> * <var:a> /\ <var:A2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:a> ^ <nat:3> /\ <var:A4> = <nat:5> * <var:a> ^ <nat:4> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:A1> = <nat:7> * <var:a> /\ <var:A2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:a> ^ <nat:3> /\ <var:A0> = <nat:6> /\ <var:V> = <nat:5> * <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:A1> = <nat:7> * <var:a> /\ <var:A2> = <nat:1> * <var:a> ^ <nat:2> /\ <var:A0> = <nat:6> /\ <var:V> = <nat:5> * <var:a> ^ <nat:4> + <nat:5> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:A1> = <nat:7> * <var:a> /\ <var:A0> = <nat:6> /\ <var:V> = <nat:5> * <var:a> ^ <nat:4> + <nat:5> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:A0> = <nat:6> /\ <var:V> = <nat:5> * <var:a> ^ <nat:4> + <nat:5> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:a> /\ <var:V> = <nat:5> * <var:a> ^ <nat:4> + <nat:5> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:7> * <var:a> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 