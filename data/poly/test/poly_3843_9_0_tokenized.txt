\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:4> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:G> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:G> ; <var:b2> := <var:b2> * <var:G> ; <var:A> := <var:b2> ; <var:A> := <var:A> + <var:b1> ; <var:A> := <var:A> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Given , given $ <var:C> $ , it to be that $ <var:G> = <var:C> $ ahead of executing the code segment it follows that we see $ <var:A> = <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions can be accomplished by usual Hoare logic . Next , we have the variable update statement \verb | <var:b0> := <nat:4> ; | . This forwards the condition $ \{ <var:G> = <var:C> \} $ to the condition $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \} $ . This is known to be sound using the assignment inference rule obtained from standard Hoare reasoning . Advancing , the environment update code \verb | <var:b1> := <nat:3> ; | . This redefines the precondition $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \} $ as the condition $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> \} $ . This is given by the assignment scheme given by usual Hoare techniques . Advancing on , we have the code giving $ <var:b1> * <var:G> $ to $ <var:b1>$ . This transfers $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> \} $ as the postcondition $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> * <var:C> \} $ . This is rigorously given using the assignment law obtained from usual Hoare reasoning . Looking at the subsequent line of code found in our code , we see the assignment command binding $ <nat:1> $ to $ <var:b2>$ . This command advances the condition $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> * <var:C> \} $ into the condition $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> * <var:C> \land <var:b2> = <nat:1> \} $ . This is given with the assignment rule given in typical Hoare reasoning . Immediately after , we have the binding statement \verb | <var:b2> := <var:b2> * <var:G> ; | . This transfers $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> * <var:C> \land <var:b2> = <nat:1> \} $ toward the postcondition $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> * <var:C> \land <var:b2> = <nat:1> * <var:C> \} $ . This is guaranteed using the assignment inference rule defined by typical Hoare reasoning . Taking another step toward the following piece of code found in our set of commands , we see the binding line \verb | <var:b2> := <var:b2> * <var:G> ; | . This forwards the precondition $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> * <var:C> \land <var:b2> = <nat:1> * <var:C> \} $ into the postcondition $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> * <var:C> \land <var:b2> = <nat:1> * <var:C> ^ <nat:2> \} $ . Going forward , we have the variable assignmet command \verb | <var:A> := <var:b2> ; | . This line advances the condition $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> * <var:C> \land <var:b2> = <nat:1> * <var:C> ^ <nat:2> \} $ to $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> * <var:C> \land <var:A> = <nat:1> * <var:C> ^ <nat:2> \} $ . Moving onward , the assignment command binding $ <var:A> + <var:b1> $ as $ <var:A>$ . This code takes $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> * <var:C> \land <var:A> = <nat:1> * <var:C> ^ <nat:2> \} $ as the condition $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:A> = <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> \} $ . This is ensured using the assignment law given in Hoare reasoning . Moving onward , we have the binding code binding $ <var:A> + <var:b0$ as $ <var:A>$ . This statement transfers $ \{ <var:G> = <var:C> \land <var:b0> = <nat:4> \land <var:A> = <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> \} $ into the postcondition $ \{ <var:G> = <var:C> \land <var:A> = <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:4> \} $ . This is deduced through the assignment scheme given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b0> := <nat:4> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:G> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:G> ; <var:b2> := <var:b2> * <var:G> ; <var:A> := <var:b2> ; <var:A> := <var:A> + <var:b1> ; <var:A> := <var:A> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:G> = <var:C> }} <def:poly> {{ <var:A> = <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:3> * <var:C> /\ <var:b2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:3> * <var:C> /\ <var:b2> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:3> * <var:C> /\ <var:b2> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:3> * <var:C> /\ <var:A> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:b0> = <nat:4> /\ <var:A> = <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:C> /\ <var:A> = <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 