\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X> := <nat:3> ; <var:X> := <nat:1> + <var:X> * <var:C> ; <var:X> := <nat:2> + <var:X> * <var:C> ; <var:X> := <nat:3> + <var:X> * <var:C> ; <var:X> := <nat:4> + <var:X> * <var:C> ; <var:X> := <nat:1> + <var:X> * <var:C> ; <var:X> := <nat:1> + <var:X> * <var:C> ; <var:X> := <nat:4> + <var:X> * <var:C> ; <var:X> := <nat:1> + <var:X> * <var:C> ; <var:X> := <nat:4> + <var:X> * <var:C> ; <var:X> := <nat:4> + <var:X> * <var:C> ; <var:X> := <nat:4> + <var:X> * <var:C> ; <var:X> := <nat:2> + <var:X> * <var:C> ; <var:X> := <nat:4> + <var:X> * <var:C> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:C> = <var:I> $ prior to executing this series of instructions it must be that $ <var:X> = <nat:3> \cdot <var:I> ^ <nat:13> + <nat:1> \cdot <var:I> ^ <nat:12> + <nat:2> \cdot <var:I> ^ <nat:11> + <nat:3> \cdot <var:I> ^ <nat:10> + <nat:4> \cdot <var:I> ^ <nat:9> + <nat:1> \cdot <var:I> ^ <nat:8> + <nat:1> \cdot <var:I> ^ <nat:7> + <nat:4> \cdot <var:I> ^ <nat:6> + <nat:1> \cdot <var:I> ^ <nat:5> + <nat:4> \cdot <var:I> ^ <nat:4> + <nat:4> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:4> $ when code is done . \end{theorem} \begin{proof} The flow of logic for this code is evident with standard Hoare reasoning . Focusing on the upcoming statements contained in the segment of code , we have \begin{verbatim} { <var:C> = <var:I> } <var:X> := <nat:3> { <var:C> = <var:I> \land <var:X> = <nat:3> } { <var:C> = <var:I> \land <var:X> = <nat:3> } <var:X> := <nat:1> + <var:X> * <var:C> { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> + <nat:1> } { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> + <nat:1> } <var:X> := <nat:2> + <var:X> * <var:C> { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> } { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> } <var:X> := <nat:3> + <var:X> * <var:C> { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:3> } { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:3> } <var:X> := <nat:4> + <var:X> * <var:C> { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> } { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> } <var:X> := <nat:1> + <var:X> * <var:C> { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:1> } { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:1> } <var:X> := <nat:1> + <var:X> * <var:C> { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:1> } { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:1> } <var:X> := <nat:4> + <var:X> * <var:C> { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:4> } { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:4> } <var:X> := <nat:1> + <var:X> * <var:C> { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:1> } \end{verbatim} Stepping through , \begin{verbatim} { <var:C> = <var:I> } <var:X> := <nat:3> { <var:C> = <var:I> \land <var:X> = <nat:3> } \end{verbatim} This is given with the binding inference rule of typical Hoare techniques . Keeping momentum , \begin{verbatim} { <var:C> = <var:I> } <var:X> := <nat:3> { <var:C> = <var:I> \land <var:X> = <nat:3> } { <var:C> = <var:I> \land <var:X> = <nat:3> } <var:X> := <nat:1> + <var:X> * <var:C> { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> + <nat:1> } { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> + <nat:1> } <var:X> := <nat:2> + <var:X> * <var:C> { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> } { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> } <var:X> := <nat:3> + <var:X> * <var:C> { <var:C> = <var:I> \land <var:X> = <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:X> := <nat:3> ; <var:X> := <nat:1> + <var:X> * <var:C> ; <var:X> := <nat:2> + <var:X> * <var:C> ; <var:X> := <nat:3> + <var:X> * <var:C> ; <var:X> := <nat:4> + <var:X> * <var:C> ; <var:X> := <nat:1> + <var:X> * <var:C> ; <var:X> := <nat:1> + <var:X> * <var:C> ; <var:X> := <nat:4> + <var:X> * <var:C> ; <var:X> := <nat:1> + <var:X> * <var:C> ; <var:X> := <nat:4> + <var:X> * <var:C> ; <var:X> := <nat:4> + <var:X> * <var:C> ; <var:X> := <nat:4> + <var:X> * <var:C> ; <var:X> := <nat:2> + <var:X> * <var:C> ; <var:X> := <nat:4> + <var:X> * <var:C> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:C> = <var:I> }} <def:poly> {{ <var:X> = <nat:3> * <var:I> ^ <nat:13> + <nat:1> * <var:I> ^ <nat:12> + <nat:2> * <var:I> ^ <nat:11> + <nat:3> * <var:I> ^ <nat:10> + <nat:4> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:3> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> * <var:I> ^ <nat:10> + <nat:1> * <var:I> ^ <nat:9> + <nat:2> * <var:I> ^ <nat:8> + <nat:3> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> * <var:I> ^ <nat:11> + <nat:1> * <var:I> ^ <nat:10> + <nat:2> * <var:I> ^ <nat:9> + <nat:3> * <var:I> ^ <nat:8> + <nat:4> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> * <var:I> ^ <nat:12> + <nat:1> * <var:I> ^ <nat:11> + <nat:2> * <var:I> ^ <nat:10> + <nat:3> * <var:I> ^ <nat:9> + <nat:4> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:X> = <nat:3> * <var:I> ^ <nat:13> + <nat:1> * <var:I> ^ <nat:12> + <nat:2> * <var:I> ^ <nat:11> + <nat:3> * <var:I> ^ <nat:10> + <nat:4> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 