\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:s0> := <nat:5> ; <var:s1> := <nat:8> ; <var:s1> := <var:s1> * <var:y> ; <var:f> := <var:s1> ; <var:f> := <var:f> + <var:s0> \end{verbatim} Given it to hold that $ <var:y> = <var:J> $ ahead of the evaluation of the series of instructions , then $ <var:f> = <nat:8> \cdot <var:J> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:J> \} \\ <var:s0> := <nat:5> ; \\ \{ <var:y> = <var:J> \land <var:s0> = <nat:5> \} \\ <var:s1> := <nat:8> ; \\ \{ <var:y> = <var:J> \land <var:s0> = <nat:5> \land <var:s1> = <nat:8> \} \\ <var:s1> := <var:s1> * <var:y> ; \\ \{ <var:y> = <var:J> \land <var:s0> = <nat:5> \land <var:s1> = <nat:8> \times <var:J> \} \\ <var:f> := <var:s1> ; \\ \{ <var:y> = <var:J> \land <var:s0> = <nat:5> \land <var:f> = <nat:8> \times <var:J> \} \\ <var:f> := <var:f> + <var:s0> \\ \{ <var:y> = <var:J> \land <var:f> = <nat:8> \times <var:J> + <nat:5> \} \end{eqnarray} Applying Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:y> = <var:J> }} <var:s0> := <nat:5> ; <var:s1> := <nat:8> ; <var:s1> := <var:s1> * <var:y> ; <var:f> := <var:s1> ; <var:f> := <var:f> + <var:s0> {{ <var:f> = <nat:8> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:s0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:s0> = <nat:5> /\ <var:f> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:f> = <nat:8> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 