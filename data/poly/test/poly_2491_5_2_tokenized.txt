\begin{document} \begin{theorem} Take the following series of commands such that \begin{verbatim} <var:q> := <nat:1> ; <var:q> := <nat:1> + <var:q> * <var:g> ; <var:q> := <nat:3> + <var:q> * <var:g> ; <var:q> := <var:q> * <var:g> ; <var:q> := <nat:3> + <var:q> * <var:g> \end{verbatim} Assuming , with some positive integer coefficients $ <var:H> $ , $ <var:g> = <var:H> $ ahead of the execution of our list of commands , it holds that we have $ <var:q> = <nat:1> \cdot <var:H> ^ <nat:4> + <nat:1> \cdot <var:H> ^ <nat:3> + <nat:3> \cdot <var:H> ^ <nat:2> + <nat:3> $ when code has executed . \end{theorem} \begin{proof} Arguing the correctness of our code segment is evident by typical Hoare logic . Now , \begin{eqnarray} \{ <var:g> = <var:H> \} \, <var:q> := <nat:1> \, \{ <var:g> = <var:H> \land <var:q> = <nat:1> \} \end{eqnarray} This is guaranteed through the rule defined in Hoare logic . Next , we have \begin{eqnarray} \{ <var:g> = <var:H> \} \, <var:q> := <nat:1> \, \{ <var:g> = <var:H> \land <var:q> = <nat:1> \} \\ \{ <var:g> = <var:H> \land <var:q> = <nat:1> \} \, <var:q> := <nat:1> + <var:q> * <var:g> \, \{ <var:g> = <var:H> \land <var:q> = <nat:1> * <var:H> + <nat:1> \} \end{eqnarray} This is ensured by the binding law defined in usual Hoare reasoning . Honing in on the next line of code contained in our list of instructions , we have \begin{eqnarray} \{ <var:g> = <var:H> \} \, <var:q> := <nat:1> \, \{ <var:g> = <var:H> \land <var:q> = <nat:1> \} \end{eqnarray} This is shown to be logically sound with the environment update scheme of typical Hoare techniques . Jumping to the next bit of code seen in our series of instructions , we see \begin{eqnarray} \{ <var:g> = <var:H> \} \, <var:q> := <nat:1> \, \{ <var:g> = <var:H> \land <var:q> = <nat:1> \} \end{eqnarray} This is ensured with the variable binding inference rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:g> = <var:H> }} <var:q> := <nat:1> ; <var:q> := <nat:1> + <var:q> * <var:g> ; <var:q> := <nat:3> + <var:q> * <var:g> ; <var:q> := <var:q> * <var:g> ; <var:q> := <nat:3> + <var:q> * <var:g> {{ <var:q> = <nat:1> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:q> = <nat:1> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:q> = <nat:1> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:q> = <nat:1> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:H> /\ <var:q> = <nat:1> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 