\begin{document} \begin{theorem} Take the following series of commands as \begin{verbatim} <var:W0> := <nat:9> ; <var:V> := <var:W0> \end{verbatim} Assuming it to be that $ <var:l> = <var:R> $ for all $ <var:R> $ before evaluating the code segment it holds that we have $ <var:V> = <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:R> \} \\ <var:W0> := <nat:9> ; \\ \{ <var:l> = <var:R> \land <var:W0> = <nat:9> \} \\ <var:V> := <var:W0> \\ \{ <var:l> = <var:R> \land <var:V> = <nat:9> \} \end{eqnarray} Applying standard Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:l> = <var:R> }} <var:W0> := <nat:9> ; <var:V> := <var:W0> {{ <var:V> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:V> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 