\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:4> ; <var:l1> := <nat:6> ; <var:l1> := <var:l1> * <var:D> ; <var:l2> := <nat:6> ; <var:l2> := <var:l2> * <var:D> ; <var:l2> := <var:l2> * <var:D> ; <var:l3> := <nat:8> ; <var:l3> := <var:l3> * <var:D> ; <var:l3> := <var:l3> * <var:D> ; <var:l3> := <var:l3> * <var:D> ; <var:R> := <var:l3> ; <var:R> := <var:R> + <var:l2> ; <var:R> := <var:R> + <var:l1> ; <var:R> := <var:R> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Assuming , given every natural numbers $ <var:H> $ , that we have $ <var:D> = <var:H> $ ahead of interpreting the list of instructions it must be that we have $ <var:R> = <nat:8> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:6> * <var:H> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:H> \} \\ <var:l0> := <nat:4> ; \\ \{ <var:D> = <var:H> \land <var:l0> = <nat:4> \} \\ <var:l1> := <nat:6> ; \\ \{ <var:D> = <var:H> \land <var:l0> = <nat:4> \land <var:l1> = <nat:6> \} \\ <var:l1> := <var:l1> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:l0> = <nat:4> \land <var:l1> = <nat:6> \times <var:H> \} \\ <var:l2> := <nat:6> ; \\ \{ <var:D> = <var:H> \land <var:l0> = <nat:4> \land <var:l1> = <nat:6> \times <var:H> \land <var:l2> = <nat:6> \} \\ <var:l2> := <var:l2> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:l0> = <nat:4> \land <var:l1> = <nat:6> \times <var:H> \land <var:l2> = <nat:6> \times <var:H> \} \\ <var:l2> := <var:l2> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:l0> = <nat:4> \land <var:l1> = <nat:6> \times <var:H> \land <var:l2> = <nat:6> \times <var:H> ^ <nat:2> \} \\ <var:l3> := <nat:8> ; \\ \{ <var:D> = <var:H> \land <var:l0> = <nat:4> \land <var:l1> = <nat:6> \times <var:H> \land <var:l2> = <nat:6> \times <var:H> ^ <nat:2> \land <var:l3> = <nat:8> \} \\ <var:l3> := <var:l3> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:l0> = <nat:4> \land <var:l1> = <nat:6> \times <var:H> \land <var:l2> = <nat:6> \times <var:H> ^ <nat:2> \land <var:l3> = <nat:8> \times <var:H> \} \\ <var:l3> := <var:l3> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:l0> = <nat:4> \land <var:l1> = <nat:6> \times <var:H> \land <var:l2> = <nat:6> \times <var:H> ^ <nat:2> \land <var:l3> = <nat:8> \times <var:H> ^ <nat:2> \} \\ <var:l3> := <var:l3> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:l0> = <nat:4> \land <var:l1> = <nat:6> \times <var:H> \land <var:l2> = <nat:6> \times <var:H> ^ <nat:2> \land <var:l3> = <nat:8> \times <var:H> ^ <nat:3> \} \\ <var:R> := <var:l3> ; \\ \{ <var:D> = <var:H> \land <var:l0> = <nat:4> \land <var:l1> = <nat:6> \times <var:H> \land <var:l2> = <nat:6> \times <var:H> ^ <nat:2> \land <var:R> = <nat:8> \times <var:H> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:l2> ; \\ \{ <var:D> = <var:H> \land <var:l0> = <nat:4> \land <var:l1> = <nat:6> \times <var:H> \land <var:R> = <nat:8> \times <var:H> ^ <nat:3> + <nat:6> \times <var:H> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:l1> ; \\ \{ <var:D> = <var:H> \land <var:l0> = <nat:4> \land <var:R> = <nat:8> \times <var:H> ^ <nat:3> + <nat:6> \times <var:H> ^ <nat:2> + <nat:6> \times <var:H> \} \\ <var:R> := <var:R> + <var:l0> \\ \{ <var:D> = <var:H> \land <var:R> = <nat:8> \times <var:H> ^ <nat:3> + <nat:6> \times <var:H> ^ <nat:2> + <nat:6> \times <var:H> + <nat:4> \} \end{eqnarray} Applying standard Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l0> := <nat:4> ; <var:l1> := <nat:6> ; <var:l1> := <var:l1> * <var:D> ; <var:l2> := <nat:6> ; <var:l2> := <var:l2> * <var:D> ; <var:l2> := <var:l2> * <var:D> ; <var:l3> := <nat:8> ; <var:l3> := <var:l3> * <var:D> ; <var:l3> := <var:l3> * <var:D> ; <var:l3> := <var:l3> * <var:D> ; <var:R> := <var:l3> ; <var:R> := <var:R> + <var:l2> ; <var:R> := <var:R> + <var:l1> ; <var:R> := <var:R> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:D> = <var:H> }} <def:poly> {{ <var:R> = <nat:8> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:6> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:l0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:6> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:l3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:l3> = <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:l3> = <nat:8> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:l3> = <nat:8> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:6> * <var:H> /\ <var:l2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:R> = <nat:8> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:l0> = <nat:4> /\ <var:l1> = <nat:6> * <var:H> /\ <var:R> = <nat:8> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:l0> = <nat:4> /\ <var:R> = <nat:8> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:R> = <nat:8> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:6> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 