\begin{document} \begin{theorem} Define the following program in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:2> ; <var:X> := <var:M0> \end{verbatim} Assuming that $ <var:o> = <var:L> $ prior to executing our set of instructions , then we see $ <var:X> = <nat:2> $ when program executes . \end{theorem} \begin{proof} Let this decorated list of commands . \begin{eqnarray} \{ <var:o> = <var:L> \} \\ <var:M0> := <nat:2> ; \\ \{ <var:o> = <var:L> \land <var:M0> = <nat:2> \} \\ <var:X> := <var:M0> \\ \{ <var:o> = <var:L> \land <var:X> = <nat:2> \} \end{eqnarray} Furthering interpreting the list of instructions gives us : \begin{eqnarray} \end{eqnarray} The application of standard Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:o> = <var:L> }} <var:M0> := <nat:2> ; <var:X> := <var:M0> {{ <var:X> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:X> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 