\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:k> := <nat:3> ; <var:k> := <nat:4> + <var:k> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:O> = <var:F> $ ahead of the execution of our set of instructions then we have $ <var:k> = <nat:3> \cdot <var:F> + <nat:4> $ after segment of code is done executing . \end{theorem} \begin{proof} Arguing the correctness of this series of commands is demonstrated using the below decorated segment of code . \begin{eqnarray} \{ <var:O> = <var:F> \} \\ <var:k> := <nat:3> ; \\ \{ <var:O> = <var:F> \land <var:k> = <nat:3> \} \\ <var:k> := <nat:4> + <var:k> * <var:O> \\ \{ <var:O> = <var:F> \land <var:k> = <nat:3> \cdot <var:F> + <nat:4> \} \end{eqnarray} The application of usual Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:3> ; <var:k> := <nat:4> + <var:k> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:O> = <var:F> }} <def:poly> {{ <var:k> = <nat:3> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:F> /\ <var:k> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:F> /\ <var:k> = <nat:3> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 