\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b1> := <var:X> ; <var:b2> := <var:b1> * <var:X> ; <var:b3> := <var:b2> * <var:X> ; <var:b4> := <var:b3> * <var:X> ; <var:b0> := <nat:1> ; <var:b1> := <var:b1> * <nat:4> ; <var:b2> := <var:b2> * <nat:4> ; <var:b3> := <var:b3> * <nat:2> ; <var:b4> := <var:b4> * <nat:4> ; <var:L> := <var:b4> <var:L> := <var:L> + <var:b3> <var:L> := <var:L> + <var:b2> <var:L> := <var:L> + <var:b1> <var:L> := <var:L> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> in \emph{Imp} . Allowing --- for positive integer coefficients $ <var:B> $ --- it to hold that $ <var:X> = <var:B> $ before interpreting this series of commands it must be that we have $ <var:L> = <nat:4> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:4> \cdot <var:B> + <nat:1> $ once list of commands exits . \end{theorem} \begin{proof} The application of standard Hoare techniques gives us : \begin{eqnarray} \{ <var:X> = <var:B> \} \\ <var:b1> := <var:X> ; \\ \{ <var:X> = <var:B> \land <var:b1> = <var:B> \} \\ <var:b2> := <var:b1> * <var:X> ; \\ \{ <var:X> = <var:B> \land <var:b1> = <var:B> \land <var:b2> = <var:B> ^ <nat:2> \} \\ <var:b3> := <var:b2> * <var:X> ; \\ \{ <var:X> = <var:B> \land <var:b1> = <var:B> \land <var:b2> = <var:B> ^ <nat:2> \land <var:b3> = <var:B> ^ <nat:3> \} \\ <var:b4> := <var:b3> * <var:X> ; \\ \{ <var:X> = <var:B> \land <var:b1> = <var:B> \land <var:b2> = <var:B> ^ <nat:2> \land <var:b3> = <var:B> ^ <nat:3> \land <var:b4> = <var:B> ^ <nat:4> \} \\ <var:b0> := <nat:1> ; \\ \{ <var:X> = <var:B> \land <var:b1> = <var:B> \land <var:b2> = <var:B> ^ <nat:2> \land <var:b3> = <var:B> ^ <nat:3> \land <var:b4> = <var:B> ^ <nat:4> \land <var:b0> = <nat:1> \} \\ <var:b1> := <var:b1> * <nat:4> ; \\ \{ <var:X> = <var:B> \land <var:b1> = <nat:4> * <var:B> \land <var:b2> = <var:B> ^ <nat:2> \land <var:b3> = <var:B> ^ <nat:3> \land <var:b4> = <var:B> ^ <nat:4> \land <var:b0> = <nat:1> \} \\ <var:b2> := <var:b2> * <nat:4> ; \\ \{ <var:X> = <var:B> \land <var:b1> = <nat:4> * <var:B> \land <var:b2> = <nat:4> * <var:B> ^ <nat:2> \land <var:b3> = <var:B> ^ <nat:3> \land <var:b4> = <var:B> ^ <nat:4> \land <var:b0> = <nat:1> \} \\ <var:b3> := <var:b3> * <nat:2> ; \\ \{ <var:X> = <var:B> \land <var:b1> = <nat:4> * <var:B> \land <var:b2> = <nat:4> * <var:B> ^ <nat:2> \land <var:b3> = <nat:2> * <var:B> ^ <nat:3> \land <var:b4> = <var:B> ^ <nat:4> \land <var:b0> = <nat:1> \} \\ <var:b4> := <var:b4> * <nat:4> ; \\ \{ <var:X> = <var:B> \land <var:b1> = <nat:4> * <var:B> \land <var:b2> = <nat:4> * <var:B> ^ <nat:2> \land <var:b3> = <nat:2> * <var:B> ^ <nat:3> \land <var:b4> = <nat:4> * <var:B> ^ <nat:4> \land <var:b0> = <nat:1> \} \\ <var:L> := <var:b4> \\ \{ <var:X> = <var:B> \land <var:b1> = <nat:4> * <var:B> \land <var:b2> = <nat:4> * <var:B> ^ <nat:2> \land <var:b3> = <nat:2> * <var:B> ^ <nat:3> \land <var:b0> = <nat:1> \land <var:L> = <nat:4> * <var:B> ^ <nat:4> \} \\ <var:L> := <var:L> + <var:b3> \\ \{ <var:X> = <var:B> \land <var:b1> = <nat:4> * <var:B> \land <var:b2> = <nat:4> * <var:B> ^ <nat:2> \land <var:b0> = <nat:1> \land <var:L> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:b2> \\ \{ <var:X> = <var:B> \land <var:b1> = <nat:4> * <var:B> \land <var:b0> = <nat:1> \land <var:L> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:b1> \\ \{ <var:X> = <var:B> \land <var:b0> = <nat:1> \land <var:L> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> \} \\ <var:L> := <var:L> + <var:b0> \\ \{ <var:X> = <var:B> \land <var:L> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:1> \} \end{eqnarray} As a result , the segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Definition <var:b4> : string := " <var:b4> " . Definition <def:poly> := <var:b1> := <var:X> ; <var:b2> := <var:b1> * <var:X> ; <var:b3> := <var:b2> * <var:X> ; <var:b4> := <var:b3> * <var:X> ; <var:b0> := <nat:1> ; <var:b1> := <var:b1> * <nat:4> ; <var:b2> := <var:b2> * <nat:4> ; <var:b3> := <var:b3> * <nat:2> ; <var:b4> := <var:b4> * <nat:4> ; <var:L> := <var:b4> <var:L> := <var:L> + <var:b3> <var:L> := <var:L> + <var:b2> <var:L> := <var:L> + <var:b1> <var:L> := <var:L> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:X> = <var:B> }} <def:poly> {{ <var:L> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b1> = <var:B> /\ <var:b2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b1> = <var:B> /\ <var:b2> = <var:B> ^ <nat:2> /\ <var:b3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b1> = <var:B> /\ <var:b2> = <var:B> ^ <nat:2> /\ <var:b3> = <var:B> ^ <nat:3> /\ <var:b4> = <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b1> = <var:B> /\ <var:b2> = <var:B> ^ <nat:2> /\ <var:b3> = <var:B> ^ <nat:3> /\ <var:b4> = <var:B> ^ <nat:4> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b1> = <nat:4> * <var:B> /\ <var:b2> = <var:B> ^ <nat:2> /\ <var:b3> = <var:B> ^ <nat:3> /\ <var:b4> = <var:B> ^ <nat:4> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b1> = <nat:4> * <var:B> /\ <var:b2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:b3> = <var:B> ^ <nat:3> /\ <var:b4> = <var:B> ^ <nat:4> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b1> = <nat:4> * <var:B> /\ <var:b2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:b3> = <nat:2> * <var:B> ^ <nat:3> /\ <var:b4> = <var:B> ^ <nat:4> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b1> = <nat:4> * <var:B> /\ <var:b2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:b3> = <nat:2> * <var:B> ^ <nat:3> /\ <var:b4> = <nat:4> * <var:B> ^ <nat:4> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b1> = <nat:4> * <var:B> /\ <var:b2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:b3> = <nat:2> * <var:B> ^ <nat:3> /\ <var:b0> = <nat:1> /\ <var:L> = <nat:4> * <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b1> = <nat:4> * <var:B> /\ <var:b2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:b0> = <nat:1> /\ <var:L> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b1> = <nat:4> * <var:B> /\ <var:b0> = <nat:1> /\ <var:L> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:b0> = <nat:1> /\ <var:L> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:B> /\ <var:L> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 