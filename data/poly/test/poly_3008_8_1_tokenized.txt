\begin{document} \begin{theorem} Let the following series of commands as \begin{verbatim} <var:g1> := <var:n> ; <var:g2> := <var:g1> * <var:n> ; <var:g0> := <nat:8> ; <var:g1> := <var:g1> * <nat:8> ; <var:g2> := <var:g2> * <nat:4> ; <var:r> := <var:g2> <var:r> := <var:r> + <var:g1> <var:r> := <var:r> + <var:g0> \end{verbatim} Given ( for some positive integer coefficients $ <var:l> $ ) that we have $ <var:n> = <var:l> $ before the execution of this code it holds that we see $ <var:r> = <nat:4> \times <var:l> ^ <nat:2> + <nat:8> \times <var:l> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for this code segment can be accomplished with Hoare reasoning . Keeping momentum , we see \begin{eqnarray} \{ <var:n> = <var:l> \} \, <var:g1> := <var:n> \, \{ <var:n> = <var:l> \land <var:g1> = <var:l> \} \\ \{ <var:n> = <var:l> \land <var:g1> = <var:l> \} \, <var:g2> := <var:g1> * <var:n> \, \{ <var:n> = <var:l> \land <var:g1> = <var:l> \land <var:g2> = <var:l> ^ <nat:2> \} \\ \{ <var:n> = <var:l> \land <var:g1> = <var:l> \land <var:g2> = <var:l> ^ <nat:2> \} \, <var:g0> := <nat:8> \, \{ <var:n> = <var:l> \land <var:g1> = <var:l> \land <var:g2> = <var:l> ^ <nat:2> \land <var:g0> = <nat:8> \} \\ \{ <var:n> = <var:l> \land <var:g1> = <var:l> \land <var:g2> = <var:l> ^ <nat:2> \land <var:g0> = <nat:8> \} \, <var:g1> := <var:g1> * <nat:8> \, \{ <var:n> = <var:l> \land <var:g1> = <nat:8> * <var:l> \land <var:g2> = <var:l> ^ <nat:2> \land <var:g0> = <nat:8> \} \\ \{ <var:n> = <var:l> \land <var:g1> = <nat:8> * <var:l> \land <var:g2> = <var:l> ^ <nat:2> \land <var:g0> = <nat:8> \} \, <var:g2> := <var:g2> * <nat:4> \, \{ <var:n> = <var:l> \land <var:g1> = <nat:8> * <var:l> \land <var:g2> = <nat:4> * <var:l> ^ <nat:2> \land <var:g0> = <nat:8> \} \\ \{ <var:n> = <var:l> \land <var:g1> = <nat:8> * <var:l> \land <var:g2> = <nat:4> * <var:l> ^ <nat:2> \land <var:g0> = <nat:8> \} \, <var:r> := <var:g2\, \{ <var:n> = <var:l> \land <var:g1> = <nat:8> * <var:l> \land <var:g0> = <nat:8> \land <var:r> = <nat:4> * <var:l> ^ <nat:2> \} \end{eqnarray} This is known to be sound with the variable assignmet law of usual Hoare reasoning . Honing in on the proceeding statements in our series of instructions , \begin{eqnarray} \{ <var:n> = <var:l> \} \, <var:g1> := <var:n> \, \{ <var:n> = <var:l> \land <var:g1> = <var:l> \} \\ \{ <var:n> = <var:l> \land <var:g1> = <var:l> \} \, <var:g2> := <var:g1> * <var:n> \, \{ <var:n> = <var:l> \land <var:g1> = <var:l> \land <var:g2> = <var:l> ^ <nat:2> \} \end{eqnarray} This is shown by the variable assignmet scheme defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:n> = <var:l> }} <var:g1> := <var:n> ; <var:g2> := <var:g1> * <var:n> ; <var:g0> := <nat:8> ; <var:g1> := <var:g1> * <nat:8> ; <var:g2> := <var:g2> * <nat:4> ; <var:r> := <var:g2> <var:r> := <var:r> + <var:g1> <var:r> := <var:r> + <var:g0> {{ <var:r> = <nat:4> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:g1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:g1> = <var:l> /\ <var:g2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:g1> = <var:l> /\ <var:g2> = <var:l> ^ <nat:2> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:g1> = <nat:8> * <var:l> /\ <var:g2> = <var:l> ^ <nat:2> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:g1> = <nat:8> * <var:l> /\ <var:g2> = <nat:4> * <var:l> ^ <nat:2> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:g1> = <nat:8> * <var:l> /\ <var:g0> = <nat:8> /\ <var:r> = <nat:4> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:g0> = <nat:8> /\ <var:r> = <nat:4> * <var:l> ^ <nat:2> + <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:r> = <nat:4> * <var:l> ^ <nat:2> + <nat:8> * <var:l> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 