\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:8> ; <var:K> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:M> = <var:B> $ prior to executing the series of instructions it holds that $ <var:K> = <nat:8> $ once set of commands is done executing . \end{theorem} \begin{proof} The flow of logic for the code segment can be accomplished using typical Hoare logic . Further , the variable update line \verb | <var:f0> := <nat:8> ; | . This redefines the precondition $ \{ <var:M> = <var:B> \} $ as the condition $ \{ <var:M> = <var:B> \land <var:f0> = <nat:8> \} $ . Moving on to the next step , we have the statement \verb | <var:K> := <var:f0> | . This takes the precondition $ \{ <var:M> = <var:B> \land <var:f0> = <nat:8> \} $ as the condition $ \{ <var:M> = <var:B> \land <var:K> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:8> ; <var:K> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:M> = <var:B> }} <def:poly> {{ <var:K> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:K> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 