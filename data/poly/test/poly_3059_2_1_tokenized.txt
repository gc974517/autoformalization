\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:1> ; <var:L> := <var:e0> \end{verbatim} Assume it to be that $ <var:J> = <var:T> $ before running the list of commands it follows that we have $ <var:L> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:T> \} \\ <var:e0> := <nat:1> ; \\ \{ <var:J> = <var:T> \land <var:e0> = <nat:1> \} \\ <var:L> := <var:e0> \\ \{ <var:J> = <var:T> \land <var:L> = <nat:1> \} \end{eqnarray} Utilizing Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:J> = <var:T> }} <var:e0> := <nat:1> ; <var:L> := <var:e0> {{ <var:L> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:T> /\ <var:L> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 