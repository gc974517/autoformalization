\begin{document} \begin{theorem} Take the following program in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:7> ; <var:U1> := <nat:2> ; <var:U1> := <var:U1> * <var:R> ; <var:s> := <var:U1> ; <var:s> := <var:s> + <var:U0> \end{verbatim} Allow that $ <var:R> = <var:a> $ ( for any positive coefficients $ <var:a> $ ) prior to evaluating the segment of code it follows that $ <var:s> = <nat:2> \times <var:a> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for the set of instructions can be done with Hoare techniques . Considering the upcoming piece of code seen in the list of commands , we see the variable binding line assigning $ <nat:7> $ into $ <var:U0>$ . This line takes the precondition $ \{ <var:R> = <var:a> \} $ into $ \{ <var:R> = <var:a> \land <var:U0> = <nat:7> \} $ . Going to the next step , the assignment line assigning $ <nat:2> $ as $ <var:U1>$ . This line takes $ \{ <var:R> = <var:a> \land <var:U0> = <nat:7> \} $ as the postcondition $ \{ <var:R> = <var:a> \land <var:U0> = <nat:7> \land <var:U1> = <nat:2> \} $ . This is sound through the assignment scheme obtained from usual Hoare techniques . Observing the next bit of code in the series of instructions , we see the variable assignmet command letting $ <var:U1> * <var:R> $ as $ <var:U1>$ . This command moves the condition $ \{ <var:R> = <var:a> \land <var:U0> = <nat:7> \land <var:U1> = <nat:2> \} $ into the postcondition $ \{ <var:R> = <var:a> \land <var:U0> = <nat:7> \land <var:U1> = <nat:2> \cdot <var:a> \} $ . This is known to be sound using the assignment rule of Hoare techniques . Further , we see the command \verb | <var:s> := <var:U1> ; | . This redefines $ \{ <var:R> = <var:a> \land <var:U0> = <nat:7> \land <var:U1> = <nat:2> \cdot <var:a> \} $ toward the condition $ \{ <var:R> = <var:a> \land <var:U0> = <nat:7> \land <var:s> = <nat:2> \cdot <var:a> \} $ . Paying attention to the next line of code seen in the set of instructions , we see the variable assignmet statement defining $ <var:s> + <var:U0$ into $ <var:s>$ . This code moves the condition $ \{ <var:R> = <var:a> \land <var:U0> = <nat:7> \land <var:s> = <nat:2> \cdot <var:a> \} $ as the postcondition $ \{ <var:R> = <var:a> \land <var:s> = <nat:2> \cdot <var:a> + <nat:7> \} $ . This is given through the assignment scheme defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:R> = <var:a> }} <var:U0> := <nat:7> ; <var:U1> := <nat:2> ; <var:U1> := <var:U1> * <var:R> ; <var:s> := <var:U1> ; <var:s> := <var:s> + <var:U0> {{ <var:s> = <nat:2> * <var:a> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:U0> = <nat:7> /\ <var:s> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:a> /\ <var:s> = <nat:2> * <var:a> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 