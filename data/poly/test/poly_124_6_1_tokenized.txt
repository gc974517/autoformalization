\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Y1> := <var:J> ; <var:Y2> := <var:Y1> * <var:J> ; <var:Y0> := <nat:2> ; <var:Y2> := <var:Y2> * <nat:5> ; <var:e> := <var:Y2> <var:e> := <var:e> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assuming letting positive numbers $ <var:j> $ it to hold that $ <var:J> = <var:j> $ before running our code segment it holds that we see $ <var:e> = <nat:5> * <var:j> ^ <nat:2> + <nat:2> $ when segment of code is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:j> \} \\ <var:Y1> := <var:J> ; \\ \{ <var:J> = <var:j> \land <var:Y1> = <var:j> \} \\ <var:Y2> := <var:Y1> * <var:J> ; \\ \{ <var:J> = <var:j> \land <var:Y1> = <var:j> \land <var:Y2> = <var:j> ^ <nat:2> \} \\ <var:Y0> := <nat:2> ; \\ \{ <var:J> = <var:j> \land <var:Y1> = <var:j> \land <var:Y2> = <var:j> ^ <nat:2> \land <var:Y0> = <nat:2> \} \\ <var:Y2> := <var:Y2> * <nat:5> ; \\ \{ <var:J> = <var:j> \land <var:Y1> = <var:j> \land <var:Y2> = <nat:5> * <var:j> ^ <nat:2> \land <var:Y0> = <nat:2> \} \\ <var:e> := <var:Y2> \\ \{ <var:J> = <var:j> \land <var:Y1> = <var:j> \land <var:Y0> = <nat:2> \land <var:e> = <nat:5> * <var:j> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:Y0> \\ \{ <var:J> = <var:j> \land <var:e> = <nat:5> * <var:j> ^ <nat:2> + <nat:2> \} \end{eqnarray} The application of Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y1> := <var:J> ; <var:Y2> := <var:Y1> * <var:J> ; <var:Y0> := <nat:2> ; <var:Y2> := <var:Y2> * <nat:5> ; <var:e> := <var:Y2> <var:e> := <var:e> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:J> = <var:j> }} <def:poly> {{ <var:e> = <nat:5> * <var:j> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:j> /\ <var:Y1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:j> /\ <var:Y1> = <var:j> /\ <var:Y2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:j> /\ <var:Y1> = <var:j> /\ <var:Y2> = <var:j> ^ <nat:2> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:j> /\ <var:Y1> = <var:j> /\ <var:Y2> = <nat:5> * <var:j> ^ <nat:2> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:j> /\ <var:Y1> = <var:j> /\ <var:Y0> = <nat:2> /\ <var:e> = <nat:5> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:j> /\ <var:e> = <nat:5> * <var:j> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 