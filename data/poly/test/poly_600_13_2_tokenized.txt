\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:A> := <nat:3> ; <var:A> := <var:A> * <var:k> ; <var:A> := <nat:4> + <var:A> * <var:k> ; <var:A> := <nat:1> + <var:A> * <var:k> ; <var:A> := <nat:4> + <var:A> * <var:k> ; <var:A> := <var:A> * <var:k> ; <var:A> := <var:A> * <var:k> ; <var:A> := <nat:1> + <var:A> * <var:k> ; <var:A> := <var:A> * <var:k> ; <var:A> := <nat:2> + <var:A> * <var:k> ; <var:A> := <nat:3> + <var:A> * <var:k> ; <var:A> := <nat:2> + <var:A> * <var:k> ; <var:A> := <nat:3> + <var:A> * <var:k> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:k> = <var:U> $ , for all $ <var:U> \in \mathbb{N} $ , before evaluating this set of commands it follows that we see $ <var:A> = <nat:3> * <var:U> ^ <nat:12> + <nat:4> * <var:U> ^ <nat:10> + <nat:1> * <var:U> ^ <nat:9> + <nat:4> * <var:U> ^ <nat:8> + <nat:1> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> $ . \end{theorem} \begin{proof} The proof of this series of instructions can be demonstrated using usual Hoare reasoning . Next , we see \begin{verbatim} { <var:k> = <var:U> } <var:A> := <nat:3> { <var:k> = <var:U> \land <var:A> = <nat:3> } \end{verbatim} After , \begin{verbatim} { <var:k> = <var:U> } <var:A> := <nat:3> { <var:k> = <var:U> \land <var:A> = <nat:3> } { <var:k> = <var:U> \land <var:A> = <nat:3> } <var:A> := <var:A> * <var:k> { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> + } \end{verbatim} Immediately following , \begin{verbatim} { <var:k> = <var:U> } <var:A> := <nat:3> { <var:k> = <var:U> \land <var:A> = <nat:3> } { <var:k> = <var:U> \land <var:A> = <nat:3> } <var:A> := <var:A> * <var:k> { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> + } { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> + } <var:A> := <nat:4> + <var:A> * <var:k> { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> ^ <nat:2> + <nat:4> } { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> ^ <nat:2> + <nat:4> } <var:A> := <nat:1> + <var:A> * <var:k> { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> ^ <nat:3> + <nat:4> * <var:U> + <nat:1> } { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> ^ <nat:3> + <nat:4> * <var:U> + <nat:1> } <var:A> := <nat:4> + <var:A> * <var:k> { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:4> } { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:4> } <var:A> := <var:A> * <var:k> { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + } { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + } <var:A> := <var:A> * <var:k> { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + } { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + } <var:A> := <nat:1> + <var:A> * <var:k> { <var:k> = <var:U> \land <var:A> = <nat:3> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:1> } \end{verbatim} This is shown by the variable binding inference rule defined by typical Hoare logic . Taking another step toward the proceeding command seen in our code , \begin{verbatim} { <var:k> = <var:U> } <var:A> := <nat:3> { <var:k> = <var:U> \land <var:A> = <nat:3> } \end{verbatim} This is shown to be logically sound by the environment update scheme found in typical Hoare reasoning . Advancing to the next step , we see \begin{verbatim} { <var:k> = <var:U> } <var:A> := <nat:3> { <var:k> = <var:U> \land <var:A> = <nat:3> } \end{verbatim} This is rigorously given using the variable update scheme found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:3> ; <var:A> := <var:A> * <var:k> ; <var:A> := <nat:4> + <var:A> * <var:k> ; <var:A> := <nat:1> + <var:A> * <var:k> ; <var:A> := <nat:4> + <var:A> * <var:k> ; <var:A> := <var:A> * <var:k> ; <var:A> := <var:A> * <var:k> ; <var:A> := <nat:1> + <var:A> * <var:k> ; <var:A> := <var:A> * <var:k> ; <var:A> := <nat:2> + <var:A> * <var:k> ; <var:A> := <nat:3> + <var:A> * <var:k> ; <var:A> := <nat:2> + <var:A> * <var:k> ; <var:A> := <nat:3> + <var:A> * <var:k> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:k> = <var:U> }} <def:poly> {{ <var:A> = <nat:3> * <var:U> ^ <nat:12> + <nat:4> * <var:U> ^ <nat:10> + <nat:1> * <var:U> ^ <nat:9> + <nat:4> * <var:U> ^ <nat:8> + <nat:1> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:A> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:A> = <nat:3> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:A> = <nat:3> * <var:U> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:A> = <nat:3> * <var:U> ^ <nat:3> + <nat:4> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:A> = <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:A> = <nat:3> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:A> = <nat:3> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:A> = <nat:3> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:A> = <nat:3> * <var:U> ^ <nat:8> + <nat:4> * <var:U> ^ <nat:6> + <nat:1> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:1> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:A> = <nat:3> * <var:U> ^ <nat:9> + <nat:4> * <var:U> ^ <nat:7> + <nat:1> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:A> = <nat:3> * <var:U> ^ <nat:10> + <nat:4> * <var:U> ^ <nat:8> + <nat:1> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:6> + <nat:1> * <var:U> ^ <nat:3> + <nat:2> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:A> = <nat:3> * <var:U> ^ <nat:11> + <nat:4> * <var:U> ^ <nat:9> + <nat:1> * <var:U> ^ <nat:8> + <nat:4> * <var:U> ^ <nat:7> + <nat:1> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:A> = <nat:3> * <var:U> ^ <nat:12> + <nat:4> * <var:U> ^ <nat:10> + <nat:1> * <var:U> ^ <nat:9> + <nat:4> * <var:U> ^ <nat:8> + <nat:1> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 