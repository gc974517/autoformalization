\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:5> ; <var:y> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> in \emph{Imp} . Allowing $ <var:G> = <var:O> $ prior to evaluating this list of commands it follows that we see $ <var:y> = <nat:5> $ once list of instructions has terminated . \end{theorem} \begin{proof} Using usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:G> = <var:O> \} \\ <var:h0> := <nat:5> ; \\ \{ <var:G> = <var:O> \land <var:h0> = <nat:5> \} \\ <var:y> := <var:h0> \\ \{ <var:G> = <var:O> \land <var:y> = <nat:5> \} \end{eqnarray} Thus , our code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:5> ; <var:y> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:G> = <var:O> }} <def:poly> {{ <var:y> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:O> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:O> /\ <var:y> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 