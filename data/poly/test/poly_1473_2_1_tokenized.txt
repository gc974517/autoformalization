\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:2> ; <var:J> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> in \emph{Imp} . Assuming that $ <var:F> = <var:g> $ , given some $ <var:g> $ , ahead of executing our set of commands , it holds that $ <var:J> = <nat:2> $ once segment of code has terminated . \end{theorem} \begin{proof} Applying typical Hoare techniques produces : \begin{eqnarray} \{ <var:F> = <var:g> \} \\ <var:y0> := <nat:2> ; \\ \{ <var:F> = <var:g> \land <var:y0> = <nat:2> \} \\ <var:J> := <var:y0> \\ \{ <var:F> = <var:g> \land <var:J> = <nat:2> \} \end{eqnarray} Given the preceding argument , our list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:2> ; <var:J> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:F> = <var:g> }} <def:poly> {{ <var:J> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:J> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 