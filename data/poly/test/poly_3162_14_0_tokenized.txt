\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:7> ; <var:S1> := <nat:5> ; <var:S1> := <var:S1> * <var:o> ; <var:S2> := <nat:1> ; <var:S2> := <var:S2> * <var:o> ; <var:S2> := <var:S2> * <var:o> ; <var:S3> := <nat:8> ; <var:S3> := <var:S3> * <var:o> ; <var:S3> := <var:S3> * <var:o> ; <var:S3> := <var:S3> * <var:o> ; <var:B> := <var:S3> ; <var:B> := <var:B> + <var:S2> ; <var:B> := <var:B> + <var:S1> ; <var:B> := <var:B> + <var:S0> \end{verbatim} Assume it to hold that $ <var:o> = <var:x> $ , for all whole numbers $ <var:x> $ , before the execution of this code , it follows that we have $ <var:B> = <nat:8> \times <var:x> ^ <nat:3> + <nat:1> \times <var:x> ^ <nat:2> + <nat:5> \times <var:x> + <nat:7> $ after series of commands is done . \end{theorem} \begin{proof} Utilizing typical Hoare logic gives : \begin{eqnarray} \{ <var:o> = <var:x> \} \\ <var:S0> := <nat:7> ; \\ \{ <var:o> = <var:x> \land <var:S0> = <nat:7> \} \\ <var:S1> := <nat:5> ; \\ \{ <var:o> = <var:x> \land <var:S0> = <nat:7> \land <var:S1> = <nat:5> \} \\ <var:S1> := <var:S1> * <var:o> ; \\ \{ <var:o> = <var:x> \land <var:S0> = <nat:7> \land <var:S1> = <nat:5> * <var:x> \} \\ <var:S2> := <nat:1> ; \\ \{ <var:o> = <var:x> \land <var:S0> = <nat:7> \land <var:S1> = <nat:5> * <var:x> \land <var:S2> = <nat:1> \} \\ <var:S2> := <var:S2> * <var:o> ; \\ \{ <var:o> = <var:x> \land <var:S0> = <nat:7> \land <var:S1> = <nat:5> * <var:x> \land <var:S2> = <nat:1> * <var:x> \} \\ <var:S2> := <var:S2> * <var:o> ; \\ \{ <var:o> = <var:x> \land <var:S0> = <nat:7> \land <var:S1> = <nat:5> * <var:x> \land <var:S2> = <nat:1> * <var:x> ^ <nat:2> \} \\ <var:S3> := <nat:8> ; \\ \{ <var:o> = <var:x> \land <var:S0> = <nat:7> \land <var:S1> = <nat:5> * <var:x> \land <var:S2> = <nat:1> * <var:x> ^ <nat:2> \land <var:S3> = <nat:8> \} \\ <var:S3> := <var:S3> * <var:o> ; \\ \{ <var:o> = <var:x> \land <var:S0> = <nat:7> \land <var:S1> = <nat:5> * <var:x> \land <var:S2> = <nat:1> * <var:x> ^ <nat:2> \land <var:S3> = <nat:8> * <var:x> \} \\ <var:S3> := <var:S3> * <var:o> ; \\ \{ <var:o> = <var:x> \land <var:S0> = <nat:7> \land <var:S1> = <nat:5> * <var:x> \land <var:S2> = <nat:1> * <var:x> ^ <nat:2> \land <var:S3> = <nat:8> * <var:x> ^ <nat:2> \} \\ <var:S3> := <var:S3> * <var:o> ; \\ \{ <var:o> = <var:x> \land <var:S0> = <nat:7> \land <var:S1> = <nat:5> * <var:x> \land <var:S2> = <nat:1> * <var:x> ^ <nat:2> \land <var:S3> = <nat:8> * <var:x> ^ <nat:3> \} \\ <var:B> := <var:S3> ; \\ \{ <var:o> = <var:x> \land <var:S0> = <nat:7> \land <var:S1> = <nat:5> * <var:x> \land <var:S2> = <nat:1> * <var:x> ^ <nat:2> \land <var:B> = <nat:8> * <var:x> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:S2> ; \\ \{ <var:o> = <var:x> \land <var:S0> = <nat:7> \land <var:S1> = <nat:5> * <var:x> \land <var:B> = <nat:8> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:S1> ; \\ \{ <var:o> = <var:x> \land <var:S0> = <nat:7> \land <var:B> = <nat:8> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:5> * <var:x> \} \\ <var:B> := <var:B> + <var:S0> \\ \{ <var:o> = <var:x> \land <var:B> = <nat:8> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> \} \end{eqnarray} Hence , the code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:o> = <var:x> }} <var:S0> := <nat:7> ; <var:S1> := <nat:5> ; <var:S1> := <var:S1> * <var:o> ; <var:S2> := <nat:1> ; <var:S2> := <var:S2> * <var:o> ; <var:S2> := <var:S2> * <var:o> ; <var:S3> := <nat:8> ; <var:S3> := <var:S3> * <var:o> ; <var:S3> := <var:S3> * <var:o> ; <var:S3> := <var:S3> * <var:o> ; <var:B> := <var:S3> ; <var:B> := <var:B> + <var:S2> ; <var:B> := <var:B> + <var:S1> ; <var:B> := <var:B> + <var:S0> {{ <var:B> = <nat:8> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:5> * <var:x> /\ <var:S2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:5> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:5> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:5> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:S3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:5> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:S3> = <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:5> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:S3> = <nat:8> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:5> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:S3> = <nat:8> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:5> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:B> = <nat:8> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:S0> = <nat:7> /\ <var:S1> = <nat:5> * <var:x> /\ <var:B> = <nat:8> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:S0> = <nat:7> /\ <var:B> = <nat:8> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:x> /\ <var:B> = <nat:8> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 