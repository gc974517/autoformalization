\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:3> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:N> ; <var:J> := <var:g1> ; <var:J> := <var:J> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> . Allow , letting natural numbers $ <var:x> $ , that we have $ <var:N> = <var:x> $ before the execution of our set of instructions , it follows that $ <var:J> = <nat:4> * <var:x> + <nat:3> $ once program executes . \end{theorem} \begin{proof} Using usual Hoare logic returns : \begin{eqnarray} \{ <var:N> = <var:x> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:N> = <var:x> \land <var:g0> = <nat:3> \} \\ <var:g1> := <nat:4> ; \\ \{ <var:N> = <var:x> \land <var:g0> = <nat:3> \land <var:g1> = <nat:4> \} \end{eqnarray} Allowing interpreting our set of instructions gives us : \begin{eqnarray} <var:g1> := <var:g1> * <var:N> ; \\ \{ <var:N> = <var:x> \land <var:g0> = <nat:3> \land <var:g1> = <nat:4> \times <var:x> \} \\ <var:J> := <var:g1> ; \\ \{ <var:N> = <var:x> \land <var:g0> = <nat:3> \land <var:J> = <nat:4> \times <var:x> \} \\ <var:J> := <var:J> + <var:g0> \\ \{ <var:N> = <var:x> \land <var:J> = <nat:4> \times <var:x> + <nat:3> \} \end{eqnarray} Considering the above , our program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:3> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:N> ; <var:J> := <var:g1> ; <var:J> := <var:J> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:N> = <var:x> }} <def:poly> {{ <var:J> = <nat:4> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:g0> = <nat:3> /\ <var:g1> = <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:g0> = <nat:3> /\ <var:J> = <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:J> = <nat:4> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 