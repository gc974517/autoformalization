\begin{document} \begin{theorem} We define a code : \begin{verbatim} <var:t> := <nat:2> ; <var:t> := <nat:1> + <var:t> * <var:B> ; <var:t> := <nat:2> + <var:t> * <var:B> ; <var:t> := <nat:3> + <var:t> * <var:B> ; <var:t> := <nat:2> + <var:t> * <var:B> ; <var:t> := <nat:4> + <var:t> * <var:B> \end{verbatim} Allow ( for any natural coefficients $ <var:a> $ ) that $ <var:B> = <var:a> $ ahead of evaluating this list of commands , it follows that we have $ <var:t> = <nat:2> \times <var:a> ^ <nat:5> + <nat:1> \times <var:a> ^ <nat:4> + <nat:2> \times <var:a> ^ <nat:3> + <nat:3> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> + <nat:4> $ once code segment is done . \end{theorem} \begin{proof} The argument for the code can be shown through Hoare reasoning . Going forward , we see the environment update code \verb | <var:t> := <nat:2> ; | . This command moves $ \{ <var:B> = <var:a> \} $ into the postcondition $ \{ <var:B> = <var:a> \land <var:t> = <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule of Hoare reasoning . Advancing , we see the variable update statement \verb | <var:t> := <nat:1> + <var:t> * <var:B> ; | . This takes the condition $ \{ <var:B> = <var:a> \land <var:t> = <nat:2> \} $ into $ \{ <var:B> = <var:a> \land <var:t> = <nat:2> \times <var:a> + <nat:1> \} $ . Moving onward , we see the binding statement letting $ <nat:2> + <var:t> * <var:B> $ as $ <var:t>$ . This transfers the condition $ \{ <var:B> = <var:a> \land <var:t> = <nat:2> \times <var:a> + <nat:1> \} $ to the condition $ \{ <var:B> = <var:a> \land <var:t> = <nat:2> \times <var:a> ^ <nat:2> + <nat:1> \times <var:a> + <nat:2> \} $ . Observing the proceeding command contained in our series of commands , the binding line \verb | <var:t> := <nat:3> + <var:t> * <var:B> ; | . This takes the precondition $ \{ <var:B> = <var:a> \land <var:t> = <nat:2> \times <var:a> ^ <nat:2> + <nat:1> \times <var:a> + <nat:2> \} $ toward $ \{ <var:B> = <var:a> \land <var:t> = <nat:2> \times <var:a> ^ <nat:3> + <nat:1> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> + <nat:3> \} $ . Keeping momentum , the variable binding command \verb | <var:t> := <nat:2> + <var:t> * <var:B> ; | . This code moves the condition $ \{ <var:B> = <var:a> \land <var:t> = <nat:2> \times <var:a> ^ <nat:3> + <nat:1> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> + <nat:3> \} $ to $ \{ <var:B> = <var:a> \land <var:t> = <nat:2> \times <var:a> ^ <nat:4> + <nat:1> \times <var:a> ^ <nat:3> + <nat:2> \times <var:a> ^ <nat:2> + <nat:3> \times <var:a> + <nat:2> \} $ . This is sound through the assignment inference rule given by usual Hoare logic . Going forward , we see the variable assignmet statement yielding $ <nat:4> + <var:t> * <var:B$ into $ <var:t>$ . This transfers the precondition $ \{ <var:B> = <var:a> \land <var:t> = <nat:2> \times <var:a> ^ <nat:4> + <nat:1> \times <var:a> ^ <nat:3> + <nat:2> \times <var:a> ^ <nat:2> + <nat:3> \times <var:a> + <nat:2> \} $ into $ \{ <var:B> = <var:a> \land <var:t> = <nat:2> \times <var:a> ^ <nat:5> + <nat:1> \times <var:a> ^ <nat:4> + <nat:2> \times <var:a> ^ <nat:3> + <nat:3> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:B> = <var:a> }} <var:t> := <nat:2> ; <var:t> := <nat:1> + <var:t> * <var:B> ; <var:t> := <nat:2> + <var:t> * <var:B> ; <var:t> := <nat:3> + <var:t> * <var:B> ; <var:t> := <nat:2> + <var:t> * <var:B> ; <var:t> := <nat:4> + <var:t> * <var:B> {{ <var:t> = <nat:2> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:a> /\ <var:t> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:a> /\ <var:t> = <nat:2> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:a> /\ <var:t> = <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:a> /\ <var:t> = <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:a> /\ <var:t> = <nat:2> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:a> /\ <var:t> = <nat:2> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 