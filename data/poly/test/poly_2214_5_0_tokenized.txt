\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:5> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:s> ; <var:n> := <var:B1> ; <var:n> := <var:n> + <var:B0> \end{verbatim} Assume that we have $ <var:s> = <var:M> $ , given all whole numbers $ <var:M> $ , prior to the evaluation of our series of commands it must be that we have $ <var:n> = <nat:6> * <var:M> + <nat:5> $ when list of instructions terminates . \end{theorem} \begin{proof} The course of logic for the set of commands is accomplished by Hoare techniques . Advancing to the next step , the variable binding statement \verb | <var:B0> := <nat:5> ; | . This advances $ \{ <var:s> = <var:M> \} $ to the postcondition $ \{ <var:s> = <var:M> \land <var:B0> = <nat:5> \} $ . This is sound with the assignment inference rule given in standard Hoare logic . Advancing , we have the command yielding $ <nat:6> $ as $ <var:B1>$ . This moves $ \{ <var:s> = <var:M> \land <var:B0> = <nat:5> \} $ into the postcondition $ \{ <var:s> = <var:M> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \} $ . This is shown through the assignment inference rule in usual Hoare reasoning . Taking a look at the following statement in our list of commands , the variable update command \verb | <var:B1> := <var:B1> * <var:s> ; | . This advances the precondition $ \{ <var:s> = <var:M> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \} $ toward the condition $ \{ <var:s> = <var:M> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \times <var:M> \} $ . Moving forward to the proceeding statement in our series of commands , we have the line letting $ <var:B1> $ toward $ <var:n>$ . This statement moves the precondition $ \{ <var:s> = <var:M> \land <var:B0> = <nat:5> \land <var:B1> = <nat:6> \times <var:M> \} $ into $ \{ <var:s> = <var:M> \land <var:B0> = <nat:5> \land <var:n> = <nat:6> \times <var:M> \} $ . This is sound through the assignment law obtained from standard Hoare logic . Going forward , we have the variable assignmet statement giving $ <var:n> + <var:B0$ toward $ <var:n>$ . This command transfers $ \{ <var:s> = <var:M> \land <var:B0> = <nat:5> \land <var:n> = <nat:6> \times <var:M> \} $ into $ \{ <var:s> = <var:M> \land <var:n> = <nat:6> \times <var:M> + <nat:5> \} $ . This is guaranteed using the assignment law found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:s> = <var:M> }} <var:B0> := <nat:5> ; <var:B1> := <nat:6> ; <var:B1> := <var:B1> * <var:s> ; <var:n> := <var:B1> ; <var:n> := <var:n> + <var:B0> {{ <var:n> = <nat:6> * <var:M> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:6> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:B0> = <nat:5> /\ <var:n> = <nat:6> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:n> = <nat:6> * <var:M> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 