\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u> := <nat:1> ; <var:u> := <nat:4> + <var:u> * <var:z> ; <var:u> := <nat:4> + <var:u> * <var:z> ; <var:u> := <nat:1> + <var:u> * <var:z> ; <var:u> := <var:u> * <var:z> ; <var:u> := <nat:2> + <var:u> * <var:z> ; <var:u> := <nat:1> + <var:u> * <var:z> ; <var:u> := <nat:3> + <var:u> * <var:z> ; <var:u> := <nat:2> + <var:u> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:z> = <var:i> $ before the execution of our series of instructions then $ <var:u> = <nat:1> \cdot <var:i> ^ <nat:8> + <nat:4> \cdot <var:i> ^ <nat:7> + <nat:4> \cdot <var:i> ^ <nat:6> + <nat:1> \cdot <var:i> ^ <nat:5> + <nat:2> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic returns : \begin{eqnarray} \{ <var:z> = <var:i> \} \\ <var:u> := <nat:1> ; \\ \{ <var:z> = <var:i> \land <var:u> = <nat:1> \} \\ <var:u> := <nat:4> + <var:u> * <var:z> ; \\ \{ <var:z> = <var:i> \land <var:u> = <nat:1> * <var:i> + <nat:4> \} \\ <var:u> := <nat:4> + <var:u> * <var:z> ; \\ \{ <var:z> = <var:i> \land <var:u> = <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> \} \\ <var:u> := <nat:1> + <var:u> * <var:z> ; \\ \{ <var:z> = <var:i> \land <var:u> = <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:1> \} \\ <var:u> := <var:u> * <var:z> ; \\ \{ <var:z> = <var:i> \land <var:u> = <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + \} \\ <var:u> := <nat:2> + <var:u> * <var:z> ; \\ \{ <var:z> = <var:i> \land <var:u> = <nat:1> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> \} \\ <var:u> := <nat:1> + <var:u> * <var:z> ; \\ \{ <var:z> = <var:i> \land <var:u> = <nat:1> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> + <nat:1> \} \\ <var:u> := <nat:3> + <var:u> * <var:z> ; \\ \{ <var:z> = <var:i> \land <var:u> = <nat:1> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:3> \} \\ <var:u> := <nat:2> + <var:u> * <var:z> \\ \{ <var:z> = <var:i> \land <var:u> = <nat:1> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:2> \} \end{eqnarray} Thus , our set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:1> ; <var:u> := <nat:4> + <var:u> * <var:z> ; <var:u> := <nat:4> + <var:u> * <var:z> ; <var:u> := <nat:1> + <var:u> * <var:z> ; <var:u> := <var:u> * <var:z> ; <var:u> := <nat:2> + <var:u> * <var:z> ; <var:u> := <nat:1> + <var:u> * <var:z> ; <var:u> := <nat:3> + <var:u> * <var:z> ; <var:u> := <nat:2> + <var:u> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:z> = <var:i> }} <def:poly> {{ <var:u> = <nat:1> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:u> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:u> = <nat:1> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:u> = <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:u> = <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:u> = <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:u> = <nat:1> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:u> = <nat:1> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:u> = <nat:1> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:u> = <nat:1> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 