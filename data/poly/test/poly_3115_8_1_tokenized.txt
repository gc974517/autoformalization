\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J1> := <var:C> ; <var:J2> := <var:J1> * <var:C> ; <var:J0> := <nat:2> ; <var:J1> := <var:J1> * <nat:8> ; <var:J2> := <var:J2> * <nat:3> ; <var:T> := <var:J2> <var:T> := <var:T> + <var:J1> <var:T> := <var:T> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:C> = <var:x> $ ( for any positive integer coefficients $ <var:x> $ ) ahead of the evaluation of our set of instructions then we have $ <var:T> = <nat:3> \cdot <var:x> ^ <nat:2> + <nat:8> \cdot <var:x> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for the set of instructions can be given by typical Hoare techniques . Advancing to the next step , we have the environment update code \verb | <var:J1> := <var:C> ; | . This takes the precondition $ \{ <var:C> = <var:x> \} $ as the condition $ \{ <var:C> = <var:x> \land <var:J1> = <var:x> \} $ . This is given by the assignment law from usual Hoare logic . Looking at the next statement seen in the set of instructions , we see the assignment statement letting $ <var:J1> * <var:C> $ as $ <var:J2>$ . This moves the precondition $ \{ <var:C> = <var:x> \land <var:J1> = <var:x> \} $ to the postcondition $ \{ <var:C> = <var:x> \land <var:J1> = <var:x> \land <var:J2> = <var:x> ^ <nat:2> \} $ . Stepping forward , we see the environment update statement \verb | <var:J0> := <nat:2> ; | . This code forwards the condition $ \{ <var:C> = <var:x> \land <var:J1> = <var:x> \land <var:J2> = <var:x> ^ <nat:2> \} $ toward $ \{ <var:C> = <var:x> \land <var:J1> = <var:x> \land <var:J2> = <var:x> ^ <nat:2> \land <var:J0> = <nat:2> \} $ . Moving forward , we have the variable assignmet statement giving $ <var:J1> * <nat:8> $ to $ <var:J1>$ . This statement forwards the condition $ \{ <var:C> = <var:x> \land <var:J1> = <var:x> \land <var:J2> = <var:x> ^ <nat:2> \land <var:J0> = <nat:2> \} $ into the condition $ \{ <var:C> = <var:x> \land <var:J1> = <nat:8> * <var:x> \land <var:J2> = <var:x> ^ <nat:2> \land <var:J0> = <nat:2> \} $ . This is rigorously given through the assignment scheme defined in typical Hoare reasoning . Moving on , the variable assignmet line letting $ <var:J2> * <nat:3> $ to $ <var:J2>$ . This transfers $ \{ <var:C> = <var:x> \land <var:J1> = <nat:8> * <var:x> \land <var:J2> = <var:x> ^ <nat:2> \land <var:J0> = <nat:2> \} $ into the postcondition $ \{ <var:C> = <var:x> \land <var:J1> = <nat:8> * <var:x> \land <var:J2> = <nat:3> * <var:x> ^ <nat:2> \land <var:J0> = <nat:2> \} $ . This is ensured with the assignment inference rule found in Hoare reasoning . Moving forward to the next line of code in our series of commands , the variable assignmet code \verb | <var:T> := <var:J2> | . This advances the precondition $ \{ <var:C> = <var:x> \land <var:J1> = <nat:8> * <var:x> \land <var:J2> = <nat:3> * <var:x> ^ <nat:2> \land <var:J0> = <nat:2> \} $ into the postcondition $ \{ <var:C> = <var:x> \land <var:J1> = <nat:8> * <var:x> \land <var:J0> = <nat:2> \land <var:T> = <nat:3> * <var:x> ^ <nat:2> \} $ . Looking at the upcoming step contained in our code segment , we see the code binding $ <var:T> + <var:J1$ toward $ <var:T>$ . This transfers the precondition $ \{ <var:C> = <var:x> \land <var:J1> = <nat:8> * <var:x> \land <var:J0> = <nat:2> \land <var:T> = <nat:3> * <var:x> ^ <nat:2> \} $ as $ \{ <var:C> = <var:x> \land <var:J0> = <nat:2> \land <var:T> = <nat:3> * <var:x> ^ <nat:2> + <nat:8> * <var:x> \} $ . Following , the assignment code \verb | <var:T> := <var:T> + <var:J0> | . This transfers the condition $ \{ <var:C> = <var:x> \land <var:J0> = <nat:2> \land <var:T> = <nat:3> * <var:x> ^ <nat:2> + <nat:8> * <var:x> \} $ toward the condition $ \{ <var:C> = <var:x> \land <var:T> = <nat:3> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:2> \} $ . This is given through the assignment inference rule defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J1> := <var:C> ; <var:J2> := <var:J1> * <var:C> ; <var:J0> := <nat:2> ; <var:J1> := <var:J1> * <nat:8> ; <var:J2> := <var:J2> * <nat:3> ; <var:T> := <var:J2> <var:T> := <var:T> + <var:J1> <var:T> := <var:T> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:C> = <var:x> }} <def:poly> {{ <var:T> = <nat:3> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:J1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:J1> = <var:x> /\ <var:J2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:J1> = <var:x> /\ <var:J2> = <var:x> ^ <nat:2> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:J1> = <nat:8> * <var:x> /\ <var:J2> = <var:x> ^ <nat:2> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:J1> = <nat:8> * <var:x> /\ <var:J2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:J1> = <nat:8> * <var:x> /\ <var:J0> = <nat:2> /\ <var:T> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:J0> = <nat:2> /\ <var:T> = <nat:3> * <var:x> ^ <nat:2> + <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:T> = <nat:3> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 