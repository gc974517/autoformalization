\begin{document} \begin{theorem} Take a list of commands such that \begin{verbatim} <var:E1> := <var:Q> ; <var:E0> := <nat:7> ; <var:E1> := <var:E1> * <nat:7> ; <var:d> := <var:E1> <var:d> := <var:d> + <var:E0> \end{verbatim} Assuming it to hold that $ <var:Q> = <var:S> $ ahead of evaluating the segment of code it holds that we see $ <var:d> = <nat:7> * <var:S> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of commands is clear by Hoare techniques . Focusing on the following commands contained in our program , \begin{verbatim} { <var:Q> = <var:S> } <var:E1> := <var:Q> { <var:Q> = <var:S> \land <var:E1> = <var:S> } { <var:Q> = <var:S> \land <var:E1> = <var:S> } <var:E0> := <nat:7> { <var:Q> = <var:S> \land <var:E1> = <var:S> \land <var:E0> = <nat:7> } \end{verbatim} This is shown to be logically sound through the environment update rule obtained from Hoare techniques . Immediately following , we see \begin{verbatim} { <var:Q> = <var:S> } <var:E1> := <var:Q> { <var:Q> = <var:S> \land <var:E1> = <var:S> } \end{verbatim} Jumping to the proceeding piece of code in our series of commands , we see \begin{verbatim} { <var:Q> = <var:S> } <var:E1> := <var:Q> { <var:Q> = <var:S> \land <var:E1> = <var:S> } \end{verbatim} Further , \begin{verbatim} { <var:Q> = <var:S> } <var:E1> := <var:Q> { <var:Q> = <var:S> \land <var:E1> = <var:S> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Q> = <var:S> }} <var:E1> := <var:Q> ; <var:E0> := <nat:7> ; <var:E1> := <var:E1> * <nat:7> ; <var:d> := <var:E1> <var:d> := <var:d> + <var:E0> {{ <var:d> = <nat:7> * <var:S> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:E1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:E1> = <var:S> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:E1> = <nat:7> * <var:S> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:E0> = <nat:7> /\ <var:d> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:d> = <nat:7> * <var:S> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 