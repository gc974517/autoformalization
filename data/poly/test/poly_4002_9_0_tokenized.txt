\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:E0> := <nat:5> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:F> ; <var:E2> := <nat:2> ; <var:E2> := <var:E2> * <var:F> ; <var:E2> := <var:E2> * <var:F> ; <var:e> := <var:E2> ; <var:e> := <var:e> + <var:E1> ; <var:e> := <var:e> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Given that we have $ <var:F> = <var:d> $ before executing our program , it must be that we have $ <var:e> = <nat:2> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for this series of commands can be given by typical Hoare logic . Now , we have \begin{eqnarray} \{ <var:F> = <var:d> \} \, <var:E0> := <nat:5> \, \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \} \\ \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \} \, <var:E1> := <nat:2> \, \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \land <var:E1> = <nat:2> \} \\ \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \land <var:E1> = <nat:2> \} \, <var:E1> := <var:E1> * <var:F> \, \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \land <var:E1> = <nat:2> \times <var:d> \} \\ \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \land <var:E1> = <nat:2> \times <var:d> \} \, <var:E2> := <nat:2> \, \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \land <var:E1> = <nat:2> \times <var:d> \land <var:E2> = <nat:2> \} \\ \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \land <var:E1> = <nat:2> \times <var:d> \land <var:E2> = <nat:2> \} \, <var:E2> := <var:E2> * <var:F> \, \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \land <var:E1> = <nat:2> \times <var:d> \land <var:E2> = <nat:2> \times <var:d> \} \\ \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \land <var:E1> = <nat:2> \times <var:d> \land <var:E2> = <nat:2> \times <var:d> \} \, <var:E2> := <var:E2> * <var:F> \, \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \land <var:E1> = <nat:2> \times <var:d> \land <var:E2> = <nat:2> \times <var:d> ^ <nat:2> \} \end{eqnarray} This is guaranteed through the variable assignmet law defined in typical Hoare logic . Moving on , we have \begin{eqnarray} \{ <var:F> = <var:d> \} \, <var:E0> := <nat:5> \, \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \} \\ \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \} \, <var:E1> := <nat:2> \, \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \land <var:E1> = <nat:2> \} \\ \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \land <var:E1> = <nat:2> \} \, <var:E1> := <var:E1> * <var:F> \, \{ <var:F> = <var:d> \land <var:E0> = <nat:5> \land <var:E1> = <nat:2> \times <var:d> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:5> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:F> ; <var:E2> := <nat:2> ; <var:E2> := <var:E2> * <var:F> ; <var:E2> := <var:E2> * <var:F> ; <var:e> := <var:E2> ; <var:e> := <var:e> + <var:E1> ; <var:e> := <var:e> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:F> = <var:d> }} <def:poly> {{ <var:e> = <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:2> * <var:d> /\ <var:E2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:2> * <var:d> /\ <var:E2> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:2> * <var:d> /\ <var:E2> = <nat:2> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:E0> = <nat:5> /\ <var:E1> = <nat:2> * <var:d> /\ <var:e> = <nat:2> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:E0> = <nat:5> /\ <var:e> = <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:d> /\ <var:e> = <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 