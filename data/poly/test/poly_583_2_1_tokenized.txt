\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:1> ; <var:z> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:v> = <var:t> $ before executing the segment of code , it holds that we see $ <var:z> = <nat:1> $ when series of commands has finished . \end{theorem} \begin{proof} Arguing the correctness of the list of commands can be given with typical Hoare reasoning . Moving forward to the next command found in our code , the environment update statement yielding $ <nat:1> $ toward $ <var:u0>$ . This advances the precondition $ \{ <var:v> = <var:t> \} $ as $ \{ <var:v> = <var:t> \land <var:u0> = <nat:1> \} $ . Focusing on the next line of code in the list of commands , we see the binding command \verb | <var:z> := <var:u0> | . This redefines the condition $ \{ <var:v> = <var:t> \land <var:u0> = <nat:1> \} $ to the condition $ \{ <var:v> = <var:t> \land <var:z> = <nat:1> \} $ . This is shown by the assignment law defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:1> ; <var:z> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:v> = <var:t> }} <def:poly> {{ <var:z> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:z> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 