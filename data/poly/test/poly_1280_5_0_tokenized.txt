\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:N0> := <nat:1> ; <var:N1> := <nat:6> ; <var:N1> := <var:N1> * <var:Q> ; <var:W> := <var:N1> ; <var:W> := <var:W> + <var:N0> \end{verbatim} Assuming that $ <var:Q> = <var:k> $ ahead of evaluating the set of commands , it holds that we see $ <var:W> = <nat:6> \times <var:k> + <nat:1> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques produces : \begin{eqnarray} \{ <var:Q> = <var:k> \} \\ <var:N0> := <nat:1> ; \\ \{ <var:Q> = <var:k> \land <var:N0> = <nat:1> \} \\ <var:N1> := <nat:6> ; \\ \{ <var:Q> = <var:k> \land <var:N0> = <nat:1> \land <var:N1> = <nat:6> \} \\ <var:N1> := <var:N1> * <var:Q> ; \\ \{ <var:Q> = <var:k> \land <var:N0> = <nat:1> \land <var:N1> = <nat:6> \cdot <var:k> \} \\ <var:W> := <var:N1> ; \\ \{ <var:Q> = <var:k> \land <var:N0> = <nat:1> \land <var:W> = <nat:6> \cdot <var:k> \} \end{eqnarray} Allowing interpreting this code segment yields : \begin{eqnarray} <var:W> := <var:W> + <var:N0> \\ \{ <var:Q> = <var:k> \land <var:W> = <nat:6> \cdot <var:k> + <nat:1> \} \end{eqnarray} Thus , the code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:Q> = <var:k> }} <var:N0> := <nat:1> ; <var:N1> := <nat:6> ; <var:N1> := <var:N1> * <var:Q> ; <var:W> := <var:N1> ; <var:W> := <var:W> + <var:N0> {{ <var:W> = <nat:6> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:N0> = <nat:1> /\ <var:W> = <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:k> /\ <var:W> = <nat:6> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 