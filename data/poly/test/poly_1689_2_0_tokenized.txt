\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:7> ; <var:h> := <var:O0> \end{verbatim} Assuming that $ <var:i> = <var:o> $ ahead of the execution of the list of instructions then we see $ <var:h> = <nat:7> $ . \end{theorem} \begin{proof} The course of logic for the set of commands is clear with usual Hoare reasoning . Moving on to the next step , we see \begin{verbatim} { <var:i> = <var:o> } <var:O0> := <nat:7> { <var:i> = <var:o> \land <var:O0> = <nat:7> } \end{verbatim} Next , \begin{verbatim} { <var:i> = <var:o> } <var:O0> := <nat:7> { <var:i> = <var:o> \land <var:O0> = <nat:7> } \end{verbatim} This is known to be sound using the assignment scheme from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:i> = <var:o> }} <var:O0> := <nat:7> ; <var:h> := <var:O0> {{ <var:h> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:o> /\ <var:h> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 