\begin{document} \begin{theorem} Define a code segment in \emph{Imp} : \begin{verbatim} <var:B1> := <var:c> ; <var:B0> := <nat:1> ; <var:B1> := <var:B1> * <nat:6> ; <var:o> := <var:B1> <var:o> := <var:o> + <var:B0> \end{verbatim} Allow that $ <var:c> = <var:K> $ before evaluating our series of commands , it must be that we have $ <var:o> = <nat:6> * <var:K> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:K> \} \\ <var:B1> := <var:c> ; \\ \{ <var:c> = <var:K> \land <var:B1> = <var:K> \} \\ <var:B0> := <nat:1> ; \\ \{ <var:c> = <var:K> \land <var:B1> = <var:K> \land <var:B0> = <nat:1> \} \\ <var:B1> := <var:B1> * <nat:6> ; \\ \{ <var:c> = <var:K> \land <var:B1> = <nat:6> \cdot <var:K> \land <var:B0> = <nat:1> \} \\ <var:o> := <var:B1> \\ \{ <var:c> = <var:K> \land <var:B0> = <nat:1> \land <var:o> = <nat:6> \cdot <var:K> \} \\ <var:o> := <var:o> + <var:B0> \\ \{ <var:c> = <var:K> \land <var:o> = <nat:6> \cdot <var:K> + <nat:1> \} \end{eqnarray} The application of typical Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:c> = <var:K> }} <var:B1> := <var:c> ; <var:B0> := <nat:1> ; <var:B1> := <var:B1> * <nat:6> ; <var:o> := <var:B1> <var:o> := <var:o> + <var:B0> {{ <var:o> = <nat:6> * <var:K> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:B1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:B1> = <var:K> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:B1> = <nat:6> * <var:K> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:B0> = <nat:1> /\ <var:o> = <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:o> = <nat:6> * <var:K> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 