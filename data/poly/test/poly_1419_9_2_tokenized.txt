\begin{document} \begin{theorem} Define a series of instructions as \begin{verbatim} <var:z> := <nat:4> ; <var:z> := <nat:1> + <var:z> * <var:B> ; <var:z> := <var:z> * <var:B> ; <var:z> := <nat:2> + <var:z> * <var:B> ; <var:z> := <nat:1> + <var:z> * <var:B> ; <var:z> := <nat:2> + <var:z> * <var:B> ; <var:z> := <nat:3> + <var:z> * <var:B> ; <var:z> := <nat:2> + <var:z> * <var:B> ; <var:z> := <nat:2> + <var:z> * <var:B> \end{verbatim} Assuming for all positive numbers $ <var:q> $ it to be that $ <var:B> = <var:q> $ before executing the list of instructions , then we see $ <var:z> = <nat:4> \times <var:q> ^ <nat:8> + <nat:1> \times <var:q> ^ <nat:7> + <nat:2> \times <var:q> ^ <nat:5> + <nat:1> \times <var:q> ^ <nat:4> + <nat:2> \times <var:q> ^ <nat:3> + <nat:3> \times <var:q> ^ <nat:2> + <nat:2> \times <var:q> + <nat:2> $ after segment of code has finished . \end{theorem} \begin{proof} The proof of this segment of code can be accomplished using standard Hoare reasoning . Observing the next statements contained in the segment of code , we have \begin{verbatim} { <var:B> = <var:q> } <var:z> := <nat:4> { <var:B> = <var:q> \land <var:z> = <nat:4> } { <var:B> = <var:q> \land <var:z> = <nat:4> } <var:z> := <nat:1> + <var:z> * <var:B> { <var:B> = <var:q> \land <var:z> = <nat:4> \cdot <var:q> + <nat:1> } \end{verbatim} This is deduced by the assignment law given by usual Hoare reasoning . Going to the next step , we have \begin{verbatim} { <var:B> = <var:q> } <var:z> := <nat:4> { <var:B> = <var:q> \land <var:z> = <nat:4> } { <var:B> = <var:q> \land <var:z> = <nat:4> } <var:z> := <nat:1> + <var:z> * <var:B> { <var:B> = <var:q> \land <var:z> = <nat:4> \cdot <var:q> + <nat:1> } \end{verbatim} Going to the next step , we see \begin{verbatim} { <var:B> = <var:q> } <var:z> := <nat:4> { <var:B> = <var:q> \land <var:z> = <nat:4> } \end{verbatim} This is guaranteed through the variable binding law defined in typical Hoare techniques . Moving on to the next step , we have \begin{verbatim} { <var:B> = <var:q> } <var:z> := <nat:4> { <var:B> = <var:q> \land <var:z> = <nat:4> } { <var:B> = <var:q> \land <var:z> = <nat:4> } <var:z> := <nat:1> + <var:z> * <var:B> { <var:B> = <var:q> \land <var:z> = <nat:4> \cdot <var:q> + <nat:1> } { <var:B> = <var:q> \land <var:z> = <nat:4> \cdot <var:q> + <nat:1> } <var:z> := <var:z> * <var:B> { <var:B> = <var:q> \land <var:z> = <nat:4> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> + } { <var:B> = <var:q> \land <var:z> = <nat:4> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> + } <var:z> := <nat:2> + <var:z> * <var:B> { <var:B> = <var:q> \land <var:z> = <nat:4> \cdot <var:q> ^ <nat:3> + <nat:1> \cdot <var:q> ^ <nat:2> + <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:B> = <var:q> }} <var:z> := <nat:4> ; <var:z> := <nat:1> + <var:z> * <var:B> ; <var:z> := <var:z> * <var:B> ; <var:z> := <nat:2> + <var:z> * <var:B> ; <var:z> := <nat:1> + <var:z> * <var:B> ; <var:z> := <nat:2> + <var:z> * <var:B> ; <var:z> := <nat:3> + <var:z> * <var:B> ; <var:z> := <nat:2> + <var:z> * <var:B> ; <var:z> := <nat:2> + <var:z> * <var:B> {{ <var:z> = <nat:4> * <var:q> ^ <nat:8> + <nat:1> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:z> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:z> = <nat:4> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:z> = <nat:4> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:z> = <nat:4> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:z> = <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:z> = <nat:4> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:z> = <nat:4> * <var:q> ^ <nat:6> + <nat:1> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:z> = <nat:4> * <var:q> ^ <nat:7> + <nat:1> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:z> = <nat:4> * <var:q> ^ <nat:8> + <nat:1> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 