\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:2> ; <var:g> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Allow , with some integers $ <var:N> $ , it to be that $ <var:X> = <var:N> $ ahead of the evaluation of this list of instructions it follows that $ <var:g> = <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this set of instructions can be shown by standard Hoare techniques . Moving onward , we have the variable assignmet command giving $ <nat:2> $ to $ <var:x0>$ . This moves the condition $ \{ <var:X> = <var:N> \} $ to $ \{ <var:X> = <var:N> \land <var:x0> = <nat:2> \} $ . Immediately after , the binding command yielding $ <var:x0$ into $ <var:g>$ . This redefines the condition $ \{ <var:X> = <var:N> \land <var:x0> = <nat:2> \} $ toward the condition $ \{ <var:X> = <var:N> \land <var:g> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:2> ; <var:g> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:X> = <var:N> }} <def:poly> {{ <var:g> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:N> /\ <var:g> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 