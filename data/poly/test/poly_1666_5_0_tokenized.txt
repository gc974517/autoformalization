\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:4> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:v> ; <var:L> := <var:F1> ; <var:L> := <var:L> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:v> = <var:l> $ ahead of interpreting the series of instructions it must be that we see $ <var:L> = <nat:2> * <var:l> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:l> \} \\ <var:F0> := <nat:4> ; \\ \{ <var:v> = <var:l> \land <var:F0> = <nat:4> \} \\ <var:F1> := <nat:2> ; \\ \{ <var:v> = <var:l> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> \} \\ <var:F1> := <var:F1> * <var:v> ; \\ \{ <var:v> = <var:l> \land <var:F0> = <nat:4> \land <var:F1> = <nat:2> * <var:l> \} \\ <var:L> := <var:F1> ; \\ \{ <var:v> = <var:l> \land <var:F0> = <nat:4> \land <var:L> = <nat:2> * <var:l> \} \\ <var:L> := <var:L> + <var:F0> \\ \{ <var:v> = <var:l> \land <var:L> = <nat:2> * <var:l> + <nat:4> \} \end{eqnarray} Advancing executing the list of commands returns : \begin{eqnarray} \end{eqnarray} The application of typical Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:v> ; <var:L> := <var:F1> ; <var:L> := <var:L> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:v> = <var:l> }} <def:poly> {{ <var:L> = <nat:2> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:F0> = <nat:4> /\ <var:L> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:L> = <nat:2> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 