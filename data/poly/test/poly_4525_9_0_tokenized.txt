\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:9> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:D> ; <var:I2> := <nat:8> ; <var:I2> := <var:I2> * <var:D> ; <var:I2> := <var:I2> * <var:D> ; <var:G> := <var:I2> ; <var:G> := <var:G> + <var:I1> ; <var:G> := <var:G> + <var:I0> \end{verbatim} Allow it to be that $ <var:D> = <var:c> $ , for any natural coefficients $ <var:c> $ , prior to interpreting the code segment , it must be that $ <var:G> = <nat:8> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:9> $ when code segment has executed . \end{theorem} \begin{proof} The flow of logic for this set of instructions is given through the following decorated set of commands . \begin{eqnarray} \{ <var:D> = <var:c> \} \\ <var:I0> := <nat:9> ; \\ \{ <var:D> = <var:c> \land <var:I0> = <nat:9> \} \\ <var:I1> := <nat:2> ; \\ \{ <var:D> = <var:c> \land <var:I0> = <nat:9> \land <var:I1> = <nat:2> \} \\ <var:I1> := <var:I1> * <var:D> ; \\ \{ <var:D> = <var:c> \land <var:I0> = <nat:9> \land <var:I1> = <nat:2> \cdot <var:c> \} \\ <var:I2> := <nat:8> ; \\ \{ <var:D> = <var:c> \land <var:I0> = <nat:9> \land <var:I1> = <nat:2> \cdot <var:c> \land <var:I2> = <nat:8> \} \\ <var:I2> := <var:I2> * <var:D> ; \\ \{ <var:D> = <var:c> \land <var:I0> = <nat:9> \land <var:I1> = <nat:2> \cdot <var:c> \land <var:I2> = <nat:8> \cdot <var:c> \} \\ <var:I2> := <var:I2> * <var:D> ; \\ \{ <var:D> = <var:c> \land <var:I0> = <nat:9> \land <var:I1> = <nat:2> \cdot <var:c> \land <var:I2> = <nat:8> \cdot <var:c> ^ <nat:2> \} \end{eqnarray} Continuing running the program gives : \begin{eqnarray} <var:G> := <var:I2> ; \\ \{ <var:D> = <var:c> \land <var:I0> = <nat:9> \land <var:I1> = <nat:2> \cdot <var:c> \land <var:G> = <nat:8> \cdot <var:c> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:I1> ; \\ \{ <var:D> = <var:c> \land <var:I0> = <nat:9> \land <var:G> = <nat:8> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> \} \\ <var:G> := <var:G> + <var:I0> \\ \{ <var:D> = <var:c> \land <var:G> = <nat:8> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + <nat:9> \} \end{eqnarray} Continuing the execution of this program produces : \begin{eqnarray} \end{eqnarray} Utilizing standard Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:D> = <var:c> }} <var:I0> := <nat:9> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:D> ; <var:I2> := <nat:8> ; <var:I2> := <var:I2> * <var:D> ; <var:I2> := <var:I2> * <var:D> ; <var:G> := <var:I2> ; <var:G> := <var:G> + <var:I1> ; <var:G> := <var:G> + <var:I0> {{ <var:G> = <nat:8> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:2> * <var:c> /\ <var:I2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:2> * <var:c> /\ <var:I2> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:2> * <var:c> /\ <var:I2> = <nat:8> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:2> * <var:c> /\ <var:G> = <nat:8> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:I0> = <nat:9> /\ <var:G> = <nat:8> * <var:c> ^ <nat:2> + <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:c> /\ <var:G> = <nat:8> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 