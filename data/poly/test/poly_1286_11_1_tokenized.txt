\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:q> ; <var:f2> := <var:f1> * <var:q> ; <var:f3> := <var:f2> * <var:q> ; <var:f0> := <nat:7> ; <var:f1> := <var:f1> * <nat:7> ; <var:f2> := <var:f2> * <nat:4> ; <var:f3> := <var:f3> * <nat:6> ; <var:t> := <var:f3> <var:t> := <var:t> + <var:f2> <var:t> := <var:t> + <var:f1> <var:t> := <var:t> + <var:f0> \end{verbatim} Assume that we have $ <var:q> = <var:V> $ before evaluating this series of commands it holds that $ <var:t> = <nat:6> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> ^ <nat:2> + <nat:7> \cdot <var:V> + <nat:7> $ when code segment has exited . \end{theorem} \begin{proof} The flow of logic for this list of commands is shown by standard Hoare techniques . Taking a look at the following line in our list of instructions , we have the variable binding command \verb | <var:f1> := <var:q> ; | . This forwards the precondition $ \{ <var:q> = <var:V> \} $ as $ \{ <var:q> = <var:V> \land <var:f1> = <var:V> \} $ . This is given using the assignment scheme from standard Hoare reasoning . Stepping through , the command \verb | <var:f2> := <var:f1> * <var:q> ; | . This takes the condition $ \{ <var:q> = <var:V> \land <var:f1> = <var:V> \} $ as $ \{ <var:q> = <var:V> \land <var:f1> = <var:V> \land <var:f2> = <var:V> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment rule defined by standard Hoare techniques . Stepping forward , we have the variable binding command \verb | <var:f3> := <var:f2> * <var:q> ; | . This statement forwards $ \{ <var:q> = <var:V> \land <var:f1> = <var:V> \land <var:f2> = <var:V> ^ <nat:2> \} $ to the postcondition $ \{ <var:q> = <var:V> \land <var:f1> = <var:V> \land <var:f2> = <var:V> ^ <nat:2> \land <var:f3> = <var:V> ^ <nat:3> \} $ . Jumping to the subsequent command contained in the program , we see the environment update command \verb | <var:f0> := <nat:7> ; | . This command takes the condition $ \{ <var:q> = <var:V> \land <var:f1> = <var:V> \land <var:f2> = <var:V> ^ <nat:2> \land <var:f3> = <var:V> ^ <nat:3> \} $ as the postcondition $ \{ <var:q> = <var:V> \land <var:f1> = <var:V> \land <var:f2> = <var:V> ^ <nat:2> \land <var:f3> = <var:V> ^ <nat:3> \land <var:f0> = <nat:7> \} $ . Stepping through , we have the assignment command \verb | <var:f1> := <var:f1> * <nat:7> ; | . This code forwards $ \{ <var:q> = <var:V> \land <var:f1> = <var:V> \land <var:f2> = <var:V> ^ <nat:2> \land <var:f3> = <var:V> ^ <nat:3> \land <var:f0> = <nat:7> \} $ as the postcondition $ \{ <var:q> = <var:V> \land <var:f1> = <nat:7> \cdot <var:V> \land <var:f2> = <var:V> ^ <nat:2> \land <var:f3> = <var:V> ^ <nat:3> \land <var:f0> = <nat:7> \} $ . This is deduced through the assignment inference rule defined in typical Hoare logic . Taking another step toward the subsequent bit of code found in our series of instructions , we see the environment update code \verb | <var:f2> := <var:f2> * <nat:4> ; | . This code forwards the precondition $ \{ <var:q> = <var:V> \land <var:f1> = <nat:7> \cdot <var:V> \land <var:f2> = <var:V> ^ <nat:2> \land <var:f3> = <var:V> ^ <nat:3> \land <var:f0> = <nat:7> \} $ toward $ \{ <var:q> = <var:V> \land <var:f1> = <nat:7> \cdot <var:V> \land <var:f2> = <nat:4> \cdot <var:V> ^ <nat:2> \land <var:f3> = <var:V> ^ <nat:3> \land <var:f0> = <nat:7> \} $ . Keeping momentum , we have the binding command giving $ <var:f3> * <nat:6> $ to $ <var:f3>$ . This line transfers $ \{ <var:q> = <var:V> \land <var:f1> = <nat:7> \cdot <var:V> \land <var:f2> = <nat:4> \cdot <var:V> ^ <nat:2> \land <var:f3> = <var:V> ^ <nat:3> \land <var:f0> = <nat:7> \} $ toward the postcondition $ \{ <var:q> = <var:V> \land <var:f1> = <nat:7> \cdot <var:V> \land <var:f2> = <nat:4> \cdot <var:V> ^ <nat:2> \land <var:f3> = <nat:6> \cdot <var:V> ^ <nat:3> \land <var:f0> = <nat:7> \} $ . This is deduced using the assignment rule in standard Hoare logic . Paying attention to the subsequent piece of code in our program , the code letting $ <var:f3$ to $ <var:t>$ . This line transfers the condition $ \{ <var:q> = <var:V> \land <var:f1> = <nat:7> \cdot <var:V> \land <var:f2> = <nat:4> \cdot <var:V> ^ <nat:2> \land <var:f3> = <nat:6> \cdot <var:V> ^ <nat:3> \land <var:f0> = <nat:7> \} $ toward $ \{ <var:q> = <var:V> \land <var:f1> = <nat:7> \cdot <var:V> \land <var:f2> = <nat:4> \cdot <var:V> ^ <nat:2> \land <var:f0> = <nat:7> \land <var:t> = <nat:6> \cdot <var:V> ^ <nat:3> \} $ . Advancing on , the environment update command binding $ <var:t> + <var:f2$ to $ <var:t>$ . This command transfers the condition $ \{ <var:q> = <var:V> \land <var:f1> = <nat:7> \cdot <var:V> \land <var:f2> = <nat:4> \cdot <var:V> ^ <nat:2> \land <var:f0> = <nat:7> \land <var:t> = <nat:6> \cdot <var:V> ^ <nat:3> \} $ as the condition $ \{ <var:q> = <var:V> \land <var:f1> = <nat:7> \cdot <var:V> \land <var:f0> = <nat:7> \land <var:t> = <nat:6> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> ^ <nat:2> \} $ . Moving on , we have the variable assignmet command assigning $ <var:t> + <var:f1$ into $ <var:t>$ . This moves the condition $ \{ <var:q> = <var:V> \land <var:f1> = <nat:7> \cdot <var:V> \land <var:f0> = <nat:7> \land <var:t> = <nat:6> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> ^ <nat:2> \} $ to the postcondition $ \{ <var:q> = <var:V> \land <var:f0> = <nat:7> \land <var:t> = <nat:6> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> ^ <nat:2> + <nat:7> \cdot <var:V> \} $ . This is shown to be logically sound with the assignment inference rule obtained from Hoare reasoning . Advancing to the next step , the command \verb | <var:t> := <var:t> + <var:f0> | . This takes the condition $ \{ <var:q> = <var:V> \land <var:f0> = <nat:7> \land <var:t> = <nat:6> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> ^ <nat:2> + <nat:7> \cdot <var:V> \} $ into $ \{ <var:q> = <var:V> \land <var:t> = <nat:6> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> ^ <nat:2> + <nat:7> \cdot <var:V> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:q> = <var:V> }} <var:f1> := <var:q> ; <var:f2> := <var:f1> * <var:q> ; <var:f3> := <var:f2> * <var:q> ; <var:f0> := <nat:7> ; <var:f1> := <var:f1> * <nat:7> ; <var:f2> := <var:f2> * <nat:4> ; <var:f3> := <var:f3> * <nat:6> ; <var:t> := <var:f3> <var:t> := <var:t> + <var:f2> <var:t> := <var:t> + <var:f1> <var:t> := <var:t> + <var:f0> {{ <var:t> = <nat:6> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:7> * <var:V> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:f1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:f1> = <var:V> /\ <var:f2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:f1> = <var:V> /\ <var:f2> = <var:V> ^ <nat:2> /\ <var:f3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:f1> = <var:V> /\ <var:f2> = <var:V> ^ <nat:2> /\ <var:f3> = <var:V> ^ <nat:3> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:f1> = <nat:7> * <var:V> /\ <var:f2> = <var:V> ^ <nat:2> /\ <var:f3> = <var:V> ^ <nat:3> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:f1> = <nat:7> * <var:V> /\ <var:f2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:f3> = <var:V> ^ <nat:3> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:f1> = <nat:7> * <var:V> /\ <var:f2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:f3> = <nat:6> * <var:V> ^ <nat:3> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:f1> = <nat:7> * <var:V> /\ <var:f2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:f0> = <nat:7> /\ <var:t> = <nat:6> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:f1> = <nat:7> * <var:V> /\ <var:f0> = <nat:7> /\ <var:t> = <nat:6> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:f0> = <nat:7> /\ <var:t> = <nat:6> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:t> = <nat:6> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:7> * <var:V> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 