\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:4> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:Q> ; <var:c2> := <nat:7> ; <var:c2> := <var:c2> * <var:Q> ; <var:c2> := <var:c2> * <var:Q> ; <var:c3> := <nat:6> ; <var:c3> := <var:c3> * <var:Q> ; <var:c3> := <var:c3> * <var:Q> ; <var:c3> := <var:c3> * <var:Q> ; <var:r> := <var:c3> ; <var:r> := <var:r> + <var:c2> ; <var:r> := <var:r> + <var:c1> ; <var:r> := <var:r> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:Q> = <var:b> $ ahead of the execution of this list of instructions , it must be that $ <var:r> = <nat:6> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:4> $ . \end{theorem} \begin{proof} The proof of our code segment is shown with standard Hoare logic . Now , the variable binding statement \verb | <var:c0> := <nat:4> ; | . This forwards $ \{ <var:Q> = <var:b> \} $ as $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \} $ . This is sound by the assignment rule given in usual Hoare reasoning . Going to the next step , we see the code binding $ <nat:8> $ as $ <var:c1>$ . This statement takes $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \} $ into the condition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \} $ . This is guaranteed with the assignment scheme given by standard Hoare techniques . Further , we see the binding statement \verb | <var:c1> := <var:c1> * <var:Q> ; | . This command advances the precondition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \} $ toward $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \} $ . This is guaranteed by the assignment rule found in typical Hoare techniques . Advancing to the next line found in the code , the assignment line yielding $ <nat:7> $ toward $ <var:c2>$ . This line forwards the condition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \} $ to $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \} $ . Paying attention to the proceeding step in our code segment , the variable assignmet line defining $ <var:c2> * <var:Q> $ toward $ <var:c2>$ . This forwards $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \} $ toward $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> \} $ . This is ensured by the assignment scheme of Hoare techniques . Taking a look at the subsequent step found in our list of instructions , we see the variable assignmet command \verb | <var:c2> := <var:c2> * <var:Q> ; | . This statement takes the condition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> \} $ to the condition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> ^ <nat:2> \} $ . After , the variable assignmet command binding $ <nat:6> $ as $ <var:c3>$ . This command forwards the precondition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> ^ <nat:2> \} $ toward $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> ^ <nat:2> \land <var:c3> = <nat:6> \} $ . Keeping momentum , we see the line binding $ <var:c3> * <var:Q> $ as $ <var:c3>$ . This takes the precondition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> ^ <nat:2> \land <var:c3> = <nat:6> \} $ as the postcondition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> ^ <nat:2> \land <var:c3> = <nat:6> \cdot <var:b> \} $ . This is sound with the assignment law in typical Hoare logic . Jumping to the proceeding line of code found in the set of instructions , we have the variable assignmet code assigning $ <var:c3> * <var:Q> $ into $ <var:c3>$ . This transfers the precondition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> ^ <nat:2> \land <var:c3> = <nat:6> \cdot <var:b> \} $ to $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> ^ <nat:2> \land <var:c3> = <nat:6> \cdot <var:b> ^ <nat:2> \} $ . Jumping to the subsequent bit of code contained in the set of commands , the binding code \verb | <var:c3> := <var:c3> * <var:Q> ; | . This code advances the condition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> ^ <nat:2> \land <var:c3> = <nat:6> \cdot <var:b> ^ <nat:2> \} $ into $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> ^ <nat:2> \land <var:c3> = <nat:6> \cdot <var:b> ^ <nat:3> \} $ . This is rigorously given by the assignment scheme given in standard Hoare reasoning . Moving forward to the next step , we see the variable binding line defining $ <var:c3> $ to $ <var:r>$ . This takes the precondition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> ^ <nat:2> \land <var:c3> = <nat:6> \cdot <var:b> ^ <nat:3> \} $ into the condition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> ^ <nat:2> \land <var:r> = <nat:6> \cdot <var:b> ^ <nat:3> \} $ . This is known to be sound with the assignment law given in standard Hoare logic . Stepping forward , the line \verb | <var:r> := <var:r> + <var:c2> ; | . This takes the condition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:c2> = <nat:7> \cdot <var:b> ^ <nat:2> \land <var:r> = <nat:6> \cdot <var:b> ^ <nat:3> \} $ into $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:r> = <nat:6> \cdot <var:b> ^ <nat:3> + <nat:7> \cdot <var:b> ^ <nat:2> \} $ . This is guaranteed with the assignment law given by usual Hoare logic . Taking another step toward the following command seen in the set of commands , the statement yielding $ <var:r> + <var:c1> $ into $ <var:r>$ . This redefines the condition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:c1> = <nat:8> \cdot <var:b> \land <var:r> = <nat:6> \cdot <var:b> ^ <nat:3> + <nat:7> \cdot <var:b> ^ <nat:2> \} $ as the postcondition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:r> = <nat:6> \cdot <var:b> ^ <nat:3> + <nat:7> \cdot <var:b> ^ <nat:2> + <nat:8> \cdot <var:b> \} $ . Stepping forward , we have the assignment code binding $ <var:r> + <var:c0$ into $ <var:r>$ . This redefines the condition $ \{ <var:Q> = <var:b> \land <var:c0> = <nat:4> \land <var:r> = <nat:6> \cdot <var:b> ^ <nat:3> + <nat:7> \cdot <var:b> ^ <nat:2> + <nat:8> \cdot <var:b> \} $ into the postcondition $ \{ <var:Q> = <var:b> \land <var:r> = <nat:6> \cdot <var:b> ^ <nat:3> + <nat:7> \cdot <var:b> ^ <nat:2> + <nat:8> \cdot <var:b> + <nat:4> \} $ . This is known to be sound with the assignment rule given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c0> := <nat:4> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:Q> ; <var:c2> := <nat:7> ; <var:c2> := <var:c2> * <var:Q> ; <var:c2> := <var:c2> * <var:Q> ; <var:c3> := <nat:6> ; <var:c3> := <var:c3> * <var:Q> ; <var:c3> := <var:c3> * <var:Q> ; <var:c3> := <var:c3> * <var:Q> ; <var:r> := <var:c3> ; <var:r> := <var:r> + <var:c2> ; <var:r> := <var:r> + <var:c1> ; <var:r> := <var:r> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:Q> = <var:b> }} <def:poly> {{ <var:r> = <nat:6> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:b> /\ <var:c2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:b> /\ <var:c2> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:b> /\ <var:c2> = <nat:7> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:b> /\ <var:c2> = <nat:7> * <var:b> ^ <nat:2> /\ <var:c3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:b> /\ <var:c2> = <nat:7> * <var:b> ^ <nat:2> /\ <var:c3> = <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:b> /\ <var:c2> = <nat:7> * <var:b> ^ <nat:2> /\ <var:c3> = <nat:6> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:b> /\ <var:c2> = <nat:7> * <var:b> ^ <nat:2> /\ <var:c3> = <nat:6> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:b> /\ <var:c2> = <nat:7> * <var:b> ^ <nat:2> /\ <var:r> = <nat:6> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:8> * <var:b> /\ <var:r> = <nat:6> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:c0> = <nat:4> /\ <var:r> = <nat:6> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> + <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:b> /\ <var:r> = <nat:6> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 