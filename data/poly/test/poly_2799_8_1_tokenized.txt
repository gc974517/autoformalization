\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:i1> := <var:H> ; <var:i2> := <var:i1> * <var:H> ; <var:i0> := <nat:8> ; <var:i1> := <var:i1> * <nat:5> ; <var:i2> := <var:i2> * <nat:6> ; <var:E> := <var:i2> <var:E> := <var:E> + <var:i1> <var:E> := <var:E> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- letting $ <var:o> \in \mathbb{Z}^+ $ --- it to be that $ <var:H> = <var:o> $ prior to running the list of commands , it follows that we have $ <var:E> = <nat:6> \cdot <var:o> ^ <nat:2> + <nat:5> \cdot <var:o> + <nat:8> $ when set of commands has finished . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions is given with typical Hoare logic . Moving on , we have \begin{eqnarray} \{ <var:H> = <var:o> \} \, <var:i1> := <var:H> \, \{ <var:H> = <var:o> \land <var:i1> = <var:o> \} \\ \{ <var:H> = <var:o> \land <var:i1> = <var:o> \} \, <var:i2> := <var:i1> * <var:H> \, \{ <var:H> = <var:o> \land <var:i1> = <var:o> \land <var:i2> = <var:o> ^ <nat:2> \} \\ \{ <var:H> = <var:o> \land <var:i1> = <var:o> \land <var:i2> = <var:o> ^ <nat:2> \} \, <var:i0> := <nat:8> \, \{ <var:H> = <var:o> \land <var:i1> = <var:o> \land <var:i2> = <var:o> ^ <nat:2> \land <var:i0> = <nat:8> \} \\ \{ <var:H> = <var:o> \land <var:i1> = <var:o> \land <var:i2> = <var:o> ^ <nat:2> \land <var:i0> = <nat:8> \} \, <var:i1> := <var:i1> * <nat:5> \, \{ <var:H> = <var:o> \land <var:i1> = <nat:5> \cdot <var:o> \land <var:i2> = <var:o> ^ <nat:2> \land <var:i0> = <nat:8> \} \\ \{ <var:H> = <var:o> \land <var:i1> = <nat:5> \cdot <var:o> \land <var:i2> = <var:o> ^ <nat:2> \land <var:i0> = <nat:8> \} \, <var:i2> := <var:i2> * <nat:6> \, \{ <var:H> = <var:o> \land <var:i1> = <nat:5> \cdot <var:o> \land <var:i2> = <nat:6> \cdot <var:o> ^ <nat:2> \land <var:i0> = <nat:8> \} \\ \{ <var:H> = <var:o> \land <var:i1> = <nat:5> \cdot <var:o> \land <var:i2> = <nat:6> \cdot <var:o> ^ <nat:2> \land <var:i0> = <nat:8> \} \, <var:E> := <var:i2\, \{ <var:H> = <var:o> \land <var:i1> = <nat:5> \cdot <var:o> \land <var:i0> = <nat:8> \land <var:E> = <nat:6> \cdot <var:o> ^ <nat:2> \} \end{eqnarray} This is guaranteed by the variable update rule given by typical Hoare logic . Now , we see \begin{eqnarray} \{ <var:H> = <var:o> \} \, <var:i1> := <var:H> \, \{ <var:H> = <var:o> \land <var:i1> = <var:o> \} \end{eqnarray} This is shown with the variable binding rule given in typical Hoare reasoning . Next , we have \begin{eqnarray} \{ <var:H> = <var:o> \} \, <var:i1> := <var:H> \, \{ <var:H> = <var:o> \land <var:i1> = <var:o> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i1> := <var:H> ; <var:i2> := <var:i1> * <var:H> ; <var:i0> := <nat:8> ; <var:i1> := <var:i1> * <nat:5> ; <var:i2> := <var:i2> * <nat:6> ; <var:E> := <var:i2> <var:E> := <var:E> + <var:i1> <var:E> := <var:E> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:H> = <var:o> }} <def:poly> {{ <var:E> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:i1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:i1> = <var:o> /\ <var:i2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:i1> = <var:o> /\ <var:i2> = <var:o> ^ <nat:2> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:i1> = <nat:5> * <var:o> /\ <var:i2> = <var:o> ^ <nat:2> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:i1> = <nat:5> * <var:o> /\ <var:i2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:i1> = <nat:5> * <var:o> /\ <var:i0> = <nat:8> /\ <var:E> = <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:i0> = <nat:8> /\ <var:E> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:E> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 