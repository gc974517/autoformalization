\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as \begin{verbatim} <var:s> := <nat:4> ; <var:s> := <var:s> * <var:d> ; <var:s> := <var:s> * <var:d> ; <var:s> := <nat:4> + <var:s> * <var:d> ; <var:s> := <nat:3> + <var:s> * <var:d> ; <var:s> := <nat:4> + <var:s> * <var:d> \end{verbatim} Assuming it to hold that $ <var:d> = <var:z> $ prior to executing our code segment , it holds that $ <var:s> = <nat:4> \cdot <var:z> ^ <nat:5> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:4> $ when code segment finishes . \end{theorem} \begin{proof} The argument for our series of commands is done by Hoare reasoning . Moving on to the following pieces of code in the set of commands , \begin{eqnarray} \{ <var:d> = <var:z> \} \, <var:s> := <nat:4> \, \{ <var:d> = <var:z> \land <var:s> = <nat:4> \} \\ \{ <var:d> = <var:z> \land <var:s> = <nat:4> \} \, <var:s> := <var:s> * <var:d> \, \{ <var:d> = <var:z> \land <var:s> = <nat:4> \times <var:z> + \} \\ \{ <var:d> = <var:z> \land <var:s> = <nat:4> \times <var:z> + \} \, <var:s> := <var:s> * <var:d> \, \{ <var:d> = <var:z> \land <var:s> = <nat:4> \times <var:z> ^ <nat:2> + \} \\ \{ <var:d> = <var:z> \land <var:s> = <nat:4> \times <var:z> ^ <nat:2> + \} \, <var:s> := <nat:4> + <var:s> * <var:d> \, \{ <var:d> = <var:z> \land <var:s> = <nat:4> \times <var:z> ^ <nat:3> + <nat:4> \} \\ \{ <var:d> = <var:z> \land <var:s> = <nat:4> \times <var:z> ^ <nat:3> + <nat:4> \} \, <var:s> := <nat:3> + <var:s> * <var:d> \, \{ <var:d> = <var:z> \land <var:s> = <nat:4> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> + <nat:3> \} \\ \{ <var:d> = <var:z> \land <var:s> = <nat:4> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> + <nat:3> \} \, <var:s> := <nat:4> + <var:s> * <var:d\, \{ <var:d> = <var:z> \land <var:s> = <nat:4> \times <var:z> ^ <nat:5> + <nat:4> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:4> \} \end{eqnarray} This is rigorously given using the variable update rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:d> = <var:z> }} <var:s> := <nat:4> ; <var:s> := <var:s> * <var:d> ; <var:s> := <var:s> * <var:d> ; <var:s> := <nat:4> + <var:s> * <var:d> ; <var:s> := <nat:3> + <var:s> * <var:d> ; <var:s> := <nat:4> + <var:s> * <var:d> {{ <var:s> = <nat:4> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:s> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:s> = <nat:4> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:s> = <nat:4> * <var:z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:s> = <nat:4> * <var:z> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:s> = <nat:4> * <var:z> ^ <nat:4> + <nat:4> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:s> = <nat:4> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 