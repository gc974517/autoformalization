\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:3> ; <var:a4> := <nat:1> ; <var:a4> := <var:a4> * <var:L> ; <var:a4> := <var:a4> * <var:L> ; <var:a4> := <var:a4> * <var:L> ; <var:a4> := <var:a4> * <var:L> ; <var:V> := <var:a4> ; <var:V> := <var:V> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> in \emph{Imp} . Given $ <var:L> = <var:J> $ ahead of evaluating our series of instructions , then $ <var:V> = <nat:1> \cdot <var:J> ^ <nat:4> + <nat:3> $ after series of instructions has finished executing . \end{theorem} \begin{proof} Utilizing Hoare reasoning results in : \begin{eqnarray} \{ <var:L> = <var:J> \} \\ <var:a0> := <nat:3> ; \\ \{ <var:L> = <var:J> \land <var:a0> = <nat:3> \} \\ <var:a4> := <nat:1> ; \\ \{ <var:L> = <var:J> \land <var:a0> = <nat:3> \land <var:a4> = <nat:1> \} \\ <var:a4> := <var:a4> * <var:L> ; \\ \{ <var:L> = <var:J> \land <var:a0> = <nat:3> \land <var:a4> = <nat:1> \times <var:J> \} \\ <var:a4> := <var:a4> * <var:L> ; \\ \{ <var:L> = <var:J> \land <var:a0> = <nat:3> \land <var:a4> = <nat:1> \times <var:J> ^ <nat:2> \} \\ <var:a4> := <var:a4> * <var:L> ; \\ \{ <var:L> = <var:J> \land <var:a0> = <nat:3> \land <var:a4> = <nat:1> \times <var:J> ^ <nat:3> \} \\ <var:a4> := <var:a4> * <var:L> ; \\ \{ <var:L> = <var:J> \land <var:a0> = <nat:3> \land <var:a4> = <nat:1> \times <var:J> ^ <nat:4> \} \\ <var:V> := <var:a4> ; \\ \{ <var:L> = <var:J> \land <var:a0> = <nat:3> \land <var:V> = <nat:1> \times <var:J> ^ <nat:4> \} \\ <var:V> := <var:V> + <var:a0> \\ \{ <var:L> = <var:J> \land <var:V> = <nat:1> \times <var:J> ^ <nat:4> + <nat:3> \} \end{eqnarray} Given the above , our series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a4> : string := " <var:a4> " . Definition <def:poly> := <var:a0> := <nat:3> ; <var:a4> := <nat:1> ; <var:a4> := <var:a4> * <var:L> ; <var:a4> := <var:a4> * <var:L> ; <var:a4> := <var:a4> * <var:L> ; <var:a4> := <var:a4> * <var:L> ; <var:V> := <var:a4> ; <var:V> := <var:V> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:L> = <var:J> }} <def:poly> {{ <var:V> = <nat:1> * <var:J> ^ <nat:4> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:a0> = <nat:3> /\ <var:a4> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:a0> = <nat:3> /\ <var:a4> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:a0> = <nat:3> /\ <var:a4> = <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:a0> = <nat:3> /\ <var:a4> = <nat:1> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:a0> = <nat:3> /\ <var:a4> = <nat:1> * <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:a0> = <nat:3> /\ <var:V> = <nat:1> * <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:V> = <nat:1> * <var:J> ^ <nat:4> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 