\begin{document} \begin{theorem} Define a series of commands : \begin{verbatim} <var:k> := <nat:3> ; <var:k> := <nat:4> + <var:k> * <var:T> ; <var:k> := <nat:1> + <var:k> * <var:T> ; <var:k> := <nat:4> + <var:k> * <var:T> ; <var:k> := <nat:1> + <var:k> * <var:T> ; <var:k> := <nat:3> + <var:k> * <var:T> ; <var:k> := <nat:1> + <var:k> * <var:T> ; <var:k> := <nat:2> + <var:k> * <var:T> \end{verbatim} Assume that $ <var:T> = <var:g> $ before evaluating the list of commands it holds that we have $ <var:k> = <nat:3> * <var:g> ^ <nat:7> + <nat:4> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:2> $ . \end{theorem} \begin{proof} Using usual Hoare techniques returns : \begin{eqnarray} \{ <var:T> = <var:g> \} \\ <var:k> := <nat:3> ; \\ \{ <var:T> = <var:g> \land <var:k> = <nat:3> \} \\ <var:k> := <nat:4> + <var:k> * <var:T> ; \\ \{ <var:T> = <var:g> \land <var:k> = <nat:3> \times <var:g> + <nat:4> \} \\ <var:k> := <nat:1> + <var:k> * <var:T> ; \\ \{ <var:T> = <var:g> \land <var:k> = <nat:3> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + <nat:1> \} \\ <var:k> := <nat:4> + <var:k> * <var:T> ; \\ \{ <var:T> = <var:g> \land <var:k> = <nat:3> \times <var:g> ^ <nat:3> + <nat:4> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + <nat:4> \} \\ <var:k> := <nat:1> + <var:k> * <var:T> ; \\ \{ <var:T> = <var:g> \land <var:k> = <nat:3> \times <var:g> ^ <nat:4> + <nat:4> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + <nat:1> \} \\ <var:k> := <nat:3> + <var:k> * <var:T> ; \\ \{ <var:T> = <var:g> \land <var:k> = <nat:3> \times <var:g> ^ <nat:5> + <nat:4> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:3> + <nat:4> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + <nat:3> \} \\ <var:k> := <nat:1> + <var:k> * <var:T> ; \\ \{ <var:T> = <var:g> \land <var:k> = <nat:3> \times <var:g> ^ <nat:6> + <nat:4> \times <var:g> ^ <nat:5> + <nat:1> \times <var:g> ^ <nat:4> + <nat:4> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:1> \} \\ <var:k> := <nat:2> + <var:k> * <var:T> \\ \{ <var:T> = <var:g> \land <var:k> = <nat:3> \times <var:g> ^ <nat:7> + <nat:4> \times <var:g> ^ <nat:6> + <nat:1> \times <var:g> ^ <nat:5> + <nat:4> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + <nat:2> \} \end{eqnarray} Given the preceding argument , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:T> = <var:g> }} <var:k> := <nat:3> ; <var:k> := <nat:4> + <var:k> * <var:T> ; <var:k> := <nat:1> + <var:k> * <var:T> ; <var:k> := <nat:4> + <var:k> * <var:T> ; <var:k> := <nat:1> + <var:k> * <var:T> ; <var:k> := <nat:3> + <var:k> * <var:T> ; <var:k> := <nat:1> + <var:k> * <var:T> ; <var:k> := <nat:2> + <var:k> * <var:T> {{ <var:k> = <nat:3> * <var:g> ^ <nat:7> + <nat:4> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:k> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:k> = <nat:3> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:k> = <nat:3> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:k> = <nat:3> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:k> = <nat:3> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:k> = <nat:3> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:k> = <nat:3> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:g> /\ <var:k> = <nat:3> * <var:g> ^ <nat:7> + <nat:4> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 