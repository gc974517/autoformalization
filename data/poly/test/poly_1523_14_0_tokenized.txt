\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:4> ; <var:I1> := <nat:5> ; <var:I1> := <var:I1> * <var:L> ; <var:I2> := <nat:1> ; <var:I2> := <var:I2> * <var:L> ; <var:I2> := <var:I2> * <var:L> ; <var:I3> := <nat:5> ; <var:I3> := <var:I3> * <var:L> ; <var:I3> := <var:I3> * <var:L> ; <var:I3> := <var:I3> * <var:L> ; <var:D> := <var:I3> ; <var:D> := <var:D> + <var:I2> ; <var:D> := <var:D> + <var:I1> ; <var:D> := <var:D> + <var:I0> \end{verbatim} Given $ <var:L> = <var:Y> $ given some positive coefficients $ <var:Y> $ before evaluating this program then we see $ <var:D> = <nat:5> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:5> * <var:Y> + <nat:4> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques yields : \begin{eqnarray} \{ <var:L> = <var:Y> \} \\ <var:I0> := <nat:4> ; \\ \{ <var:L> = <var:Y> \land <var:I0> = <nat:4> \} \\ <var:I1> := <nat:5> ; \\ \{ <var:L> = <var:Y> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \} \\ <var:I1> := <var:I1> * <var:L> ; \\ \{ <var:L> = <var:Y> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:Y> \} \\ <var:I2> := <nat:1> ; \\ \{ <var:L> = <var:Y> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:Y> \land <var:I2> = <nat:1> \} \\ <var:I2> := <var:I2> * <var:L> ; \\ \{ <var:L> = <var:Y> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:Y> \land <var:I2> = <nat:1> \times <var:Y> \} \\ <var:I2> := <var:I2> * <var:L> ; \\ \{ <var:L> = <var:Y> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:Y> \land <var:I2> = <nat:1> \times <var:Y> ^ <nat:2> \} \\ <var:I3> := <nat:5> ; \\ \{ <var:L> = <var:Y> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:Y> \land <var:I2> = <nat:1> \times <var:Y> ^ <nat:2> \land <var:I3> = <nat:5> \} \\ <var:I3> := <var:I3> * <var:L> ; \\ \{ <var:L> = <var:Y> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:Y> \land <var:I2> = <nat:1> \times <var:Y> ^ <nat:2> \land <var:I3> = <nat:5> \times <var:Y> \} \end{eqnarray} Continuing interpreting the code segment returns : \begin{eqnarray} <var:I3> := <var:I3> * <var:L> ; \\ \{ <var:L> = <var:Y> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:Y> \land <var:I2> = <nat:1> \times <var:Y> ^ <nat:2> \land <var:I3> = <nat:5> \times <var:Y> ^ <nat:2> \} \\ <var:I3> := <var:I3> * <var:L> ; \\ \{ <var:L> = <var:Y> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:Y> \land <var:I2> = <nat:1> \times <var:Y> ^ <nat:2> \land <var:I3> = <nat:5> \times <var:Y> ^ <nat:3> \} \\ <var:D> := <var:I3> ; \\ \{ <var:L> = <var:Y> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:Y> \land <var:I2> = <nat:1> \times <var:Y> ^ <nat:2> \land <var:D> = <nat:5> \times <var:Y> ^ <nat:3> \} \\ <var:D> := <var:D> + <var:I2> ; \\ \{ <var:L> = <var:Y> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:Y> \land <var:D> = <nat:5> \times <var:Y> ^ <nat:3> + <nat:1> \times <var:Y> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:I1> ; \\ \{ <var:L> = <var:Y> \land <var:I0> = <nat:4> \land <var:D> = <nat:5> \times <var:Y> ^ <nat:3> + <nat:1> \times <var:Y> ^ <nat:2> + <nat:5> \times <var:Y> \} \\ <var:D> := <var:D> + <var:I0> \\ \{ <var:L> = <var:Y> \land <var:D> = <nat:5> \times <var:Y> ^ <nat:3> + <nat:1> \times <var:Y> ^ <nat:2> + <nat:5> \times <var:Y> + <nat:4> \} \end{eqnarray} Considering the above , this segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:L> = <var:Y> }} <var:I0> := <nat:4> ; <var:I1> := <nat:5> ; <var:I1> := <var:I1> * <var:L> ; <var:I2> := <nat:1> ; <var:I2> := <var:I2> * <var:L> ; <var:I2> := <var:I2> * <var:L> ; <var:I3> := <nat:5> ; <var:I3> := <var:I3> * <var:L> ; <var:I3> := <var:I3> * <var:L> ; <var:I3> := <var:I3> * <var:L> ; <var:D> := <var:I3> ; <var:D> := <var:D> + <var:I2> ; <var:D> := <var:D> + <var:I1> ; <var:D> := <var:D> + <var:I0> {{ <var:D> = <nat:5> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:5> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:Y> /\ <var:I2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:Y> /\ <var:I2> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:Y> /\ <var:I2> = <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:Y> /\ <var:I2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:I3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:Y> /\ <var:I2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:I3> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:Y> /\ <var:I2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:I3> = <nat:5> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:Y> /\ <var:I2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:I3> = <nat:5> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:Y> /\ <var:I2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:D> = <nat:5> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:Y> /\ <var:D> = <nat:5> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:I0> = <nat:4> /\ <var:D> = <nat:5> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:D> = <nat:5> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:5> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 