\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:7> ; <var:v1> := <nat:7> ; <var:v1> := <var:v1> * <var:a> ; <var:v2> := <nat:7> ; <var:v2> := <var:v2> * <var:a> ; <var:v2> := <var:v2> * <var:a> ; <var:v3> := <nat:9> ; <var:v3> := <var:v3> * <var:a> ; <var:v3> := <var:v3> * <var:a> ; <var:v3> := <var:v3> * <var:a> ; <var:U> := <var:v3> ; <var:U> := <var:U> + <var:v2> ; <var:U> := <var:U> + <var:v1> ; <var:U> := <var:U> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Given , assuming some whole numbers $ <var:P> $ , it to be that $ <var:a> = <var:P> $ ahead of the execution of this set of commands , then we have $ <var:U> = <nat:9> \times <var:P> ^ <nat:3> + <nat:7> \times <var:P> ^ <nat:2> + <nat:7> \times <var:P> + <nat:7> $ once series of instructions has exited . \end{theorem} \begin{proof} The method of proof for our code segment can be demonstrated through the below decorated series of instructions . \begin{eqnarray} \{ <var:a> = <var:P> \} \\ <var:v0> := <nat:7> ; \\ \{ <var:a> = <var:P> \land <var:v0> = <nat:7> \} \\ <var:v1> := <nat:7> ; \\ \{ <var:a> = <var:P> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \} \\ <var:v1> := <var:v1> * <var:a> ; \\ \{ <var:a> = <var:P> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:P> \} \\ <var:v2> := <nat:7> ; \\ \{ <var:a> = <var:P> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:P> \land <var:v2> = <nat:7> \} \\ <var:v2> := <var:v2> * <var:a> ; \\ \{ <var:a> = <var:P> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:P> \land <var:v2> = <nat:7> \times <var:P> \} \\ <var:v2> := <var:v2> * <var:a> ; \\ \{ <var:a> = <var:P> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:P> \land <var:v2> = <nat:7> \times <var:P> ^ <nat:2> \} \\ <var:v3> := <nat:9> ; \\ \{ <var:a> = <var:P> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:P> \land <var:v2> = <nat:7> \times <var:P> ^ <nat:2> \land <var:v3> = <nat:9> \} \\ <var:v3> := <var:v3> * <var:a> ; \\ \{ <var:a> = <var:P> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:P> \land <var:v2> = <nat:7> \times <var:P> ^ <nat:2> \land <var:v3> = <nat:9> \times <var:P> \} \\ <var:v3> := <var:v3> * <var:a> ; \\ \{ <var:a> = <var:P> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:P> \land <var:v2> = <nat:7> \times <var:P> ^ <nat:2> \land <var:v3> = <nat:9> \times <var:P> ^ <nat:2> \} \\ <var:v3> := <var:v3> * <var:a> ; \\ \{ <var:a> = <var:P> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:P> \land <var:v2> = <nat:7> \times <var:P> ^ <nat:2> \land <var:v3> = <nat:9> \times <var:P> ^ <nat:3> \} \\ <var:U> := <var:v3> ; \\ \{ <var:a> = <var:P> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:P> \land <var:v2> = <nat:7> \times <var:P> ^ <nat:2> \land <var:U> = <nat:9> \times <var:P> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:v2> ; \\ \{ <var:a> = <var:P> \land <var:v0> = <nat:7> \land <var:v1> = <nat:7> \times <var:P> \land <var:U> = <nat:9> \times <var:P> ^ <nat:3> + <nat:7> \times <var:P> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:v1> ; \\ \{ <var:a> = <var:P> \land <var:v0> = <nat:7> \land <var:U> = <nat:9> \times <var:P> ^ <nat:3> + <nat:7> \times <var:P> ^ <nat:2> + <nat:7> \times <var:P> \} \\ <var:U> := <var:U> + <var:v0> \\ \{ <var:a> = <var:P> \land <var:U> = <nat:9> \times <var:P> ^ <nat:3> + <nat:7> \times <var:P> ^ <nat:2> + <nat:7> \times <var:P> + <nat:7> \} \end{eqnarray} Continuing running the series of instructions gives : \begin{eqnarray} \end{eqnarray} Utilizing standard Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v0> := <nat:7> ; <var:v1> := <nat:7> ; <var:v1> := <var:v1> * <var:a> ; <var:v2> := <nat:7> ; <var:v2> := <var:v2> * <var:a> ; <var:v2> := <var:v2> * <var:a> ; <var:v3> := <nat:9> ; <var:v3> := <var:v3> * <var:a> ; <var:v3> := <var:v3> * <var:a> ; <var:v3> := <var:v3> * <var:a> ; <var:U> := <var:v3> ; <var:U> := <var:U> + <var:v2> ; <var:U> := <var:U> + <var:v1> ; <var:U> := <var:U> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:a> = <var:P> }} <def:poly> {{ <var:U> = <nat:9> * <var:P> ^ <nat:3> + <nat:7> * <var:P> ^ <nat:2> + <nat:7> * <var:P> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:P> /\ <var:v2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:P> /\ <var:v2> = <nat:7> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:P> /\ <var:v2> = <nat:7> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:P> /\ <var:v2> = <nat:7> * <var:P> ^ <nat:2> /\ <var:v3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:P> /\ <var:v2> = <nat:7> * <var:P> ^ <nat:2> /\ <var:v3> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:P> /\ <var:v2> = <nat:7> * <var:P> ^ <nat:2> /\ <var:v3> = <nat:9> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:P> /\ <var:v2> = <nat:7> * <var:P> ^ <nat:2> /\ <var:v3> = <nat:9> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:P> /\ <var:v2> = <nat:7> * <var:P> ^ <nat:2> /\ <var:U> = <nat:9> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:7> * <var:P> /\ <var:U> = <nat:9> * <var:P> ^ <nat:3> + <nat:7> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:v0> = <nat:7> /\ <var:U> = <nat:9> * <var:P> ^ <nat:3> + <nat:7> * <var:P> ^ <nat:2> + <nat:7> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:U> = <nat:9> * <var:P> ^ <nat:3> + <nat:7> * <var:P> ^ <nat:2> + <nat:7> * <var:P> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 