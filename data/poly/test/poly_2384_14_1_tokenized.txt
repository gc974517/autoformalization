\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S1> := <var:P> ; <var:S2> := <var:S1> * <var:P> ; <var:S3> := <var:S2> * <var:P> ; <var:S4> := <var:S3> * <var:P> ; <var:S0> := <nat:1> ; <var:S1> := <var:S1> * <nat:3> ; <var:S2> := <var:S2> * <nat:2> ; <var:S3> := <var:S3> * <nat:2> ; <var:S4> := <var:S4> * <nat:1> ; <var:r> := <var:S4> <var:r> := <var:r> + <var:S3> <var:r> := <var:r> + <var:S2> <var:r> := <var:r> + <var:S1> <var:r> := <var:r> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:P> = <var:g> $ prior to interpreting this set of instructions it holds that we see $ <var:r> = <nat:1> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands can be given by standard Hoare logic . Observing the upcoming piece of code found in the code , the line yielding $ <var:P> $ toward $ <var:S1>$ . This moves the condition $ \{ <var:P> = <var:g> \} $ to $ \{ <var:P> = <var:g> \land <var:S1> = <var:g> \} $ . This is sound through the assignment rule of Hoare techniques . Observing the subsequent bit of code seen in our series of commands , we see the variable assignmet statement assigning $ <var:S1> * <var:P> $ toward $ <var:S2>$ . This transfers the condition $ \{ <var:P> = <var:g> \land <var:S1> = <var:g> \} $ as the postcondition $ \{ <var:P> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \} $ . This is rigorously given through the assignment law given in standard Hoare techniques . Moving forward , we have the variable update command defining $ <var:S2> * <var:P> $ as $ <var:S3>$ . This moves $ \{ <var:P> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \} $ into $ \{ <var:P> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \} $ . This is sound by the assignment inference rule given in standard Hoare techniques . Honing in on the proceeding command in the series of instructions , we see the variable binding statement defining $ <var:S3> * <var:P> $ as $ <var:S4>$ . This command advances the precondition $ \{ <var:P> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \} $ into the postcondition $ \{ <var:P> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S4> = <var:g> ^ <nat:4> \} $ . This is deduced through the assignment law defined in usual Hoare logic . Following , we see the assignment command \verb | <var:S0> := <nat:1> ; | . This line takes the condition $ \{ <var:P> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S4> = <var:g> ^ <nat:4> \} $ toward the condition $ \{ <var:P> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S4> = <var:g> ^ <nat:4> \land <var:S0> = <nat:1> \} $ . Focusing on the proceeding step contained in the series of instructions , the variable update command \verb | <var:S1> := <var:S1> * <nat:3> ; | . This command forwards the precondition $ \{ <var:P> = <var:g> \land <var:S1> = <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S4> = <var:g> ^ <nat:4> \land <var:S0> = <nat:1> \} $ to the postcondition $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S4> = <var:g> ^ <nat:4> \land <var:S0> = <nat:1> \} $ . This is deduced by the assignment law in standard Hoare logic . Considering the following statement seen in the code segment , we see the variable binding line yielding $ <var:S2> * <nat:2> $ into $ <var:S2>$ . This statement takes $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S2> = <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S4> = <var:g> ^ <nat:4> \land <var:S0> = <nat:1> \} $ to the condition $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S4> = <var:g> ^ <nat:4> \land <var:S0> = <nat:1> \} $ . This is guaranteed by the assignment inference rule in standard Hoare reasoning . Going forward , the assignment statement defining $ <var:S3> * <nat:2> $ toward $ <var:S3>$ . This transfers the condition $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:S3> = <var:g> ^ <nat:3> \land <var:S4> = <var:g> ^ <nat:4> \land <var:S0> = <nat:1> \} $ to $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:S3> = <nat:2> \cdot <var:g> ^ <nat:3> \land <var:S4> = <var:g> ^ <nat:4> \land <var:S0> = <nat:1> \} $ . Paying attention to the following statement in our list of commands , we see the variable binding line \verb | <var:S4> := <var:S4> * <nat:1> ; | . This command forwards $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:S3> = <nat:2> \cdot <var:g> ^ <nat:3> \land <var:S4> = <var:g> ^ <nat:4> \land <var:S0> = <nat:1> \} $ as $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:S3> = <nat:2> \cdot <var:g> ^ <nat:3> \land <var:S4> = <nat:1> \cdot <var:g> ^ <nat:4> \land <var:S0> = <nat:1> \} $ . Advancing on , we see the assignment line letting $ <var:S4$ to $ <var:r>$ . This command redefines the condition $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:S3> = <nat:2> \cdot <var:g> ^ <nat:3> \land <var:S4> = <nat:1> \cdot <var:g> ^ <nat:4> \land <var:S0> = <nat:1> \} $ as the postcondition $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:S3> = <nat:2> \cdot <var:g> ^ <nat:3> \land <var:S0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:g> ^ <nat:4> \} $ . This is shown with the assignment rule obtained from standard Hoare logic . Moving on to the next command in the list of commands , the variable binding command \verb | <var:r> := <var:r> + <var:S3> | . This line transfers $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:S3> = <nat:2> \cdot <var:g> ^ <nat:3> \land <var:S0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:g> ^ <nat:4> \} $ toward $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:S0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:g> ^ <nat:4> + <nat:2> \cdot <var:g> ^ <nat:3> \} $ . This is sound by the assignment rule defined by Hoare techniques . Observing the upcoming command seen in the program , the assignment statement yielding $ <var:r> + <var:S2$ to $ <var:r>$ . This code moves $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:S0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:g> ^ <nat:4> + <nat:2> \cdot <var:g> ^ <nat:3> \} $ to the condition $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:g> ^ <nat:4> + <nat:2> \cdot <var:g> ^ <nat:3> + <nat:2> \cdot <var:g> ^ <nat:2> \} $ . Advancing on , we have the line yielding $ <var:r> + <var:S1$ to $ <var:r>$ . This takes $ \{ <var:P> = <var:g> \land <var:S1> = <nat:3> \cdot <var:g> \land <var:S0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:g> ^ <nat:4> + <nat:2> \cdot <var:g> ^ <nat:3> + <nat:2> \cdot <var:g> ^ <nat:2> \} $ toward $ \{ <var:P> = <var:g> \land <var:S0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:g> ^ <nat:4> + <nat:2> \cdot <var:g> ^ <nat:3> + <nat:2> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> \} $ . This is known to be sound by the assignment law in standard Hoare logic . Immediately following , the variable update command \verb | <var:r> := <var:r> + <var:S0> | . This moves the condition $ \{ <var:P> = <var:g> \land <var:S0> = <nat:1> \land <var:r> = <nat:1> \cdot <var:g> ^ <nat:4> + <nat:2> \cdot <var:g> ^ <nat:3> + <nat:2> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> \} $ to the postcondition $ \{ <var:P> = <var:g> \land <var:r> = <nat:1> \cdot <var:g> ^ <nat:4> + <nat:2> \cdot <var:g> ^ <nat:3> + <nat:2> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> + <nat:1> \} $ . This is sound with the assignment scheme given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <var:S4> : string := " <var:S4> " . Definition <def:poly> := <var:S1> := <var:P> ; <var:S2> := <var:S1> * <var:P> ; <var:S3> := <var:S2> * <var:P> ; <var:S4> := <var:S3> * <var:P> ; <var:S0> := <nat:1> ; <var:S1> := <var:S1> * <nat:3> ; <var:S2> := <var:S2> * <nat:2> ; <var:S3> := <var:S3> * <nat:2> ; <var:S4> := <var:S4> * <nat:1> ; <var:r> := <var:S4> <var:r> := <var:r> + <var:S3> <var:r> := <var:r> + <var:S2> <var:r> := <var:r> + <var:S1> <var:r> := <var:r> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:P> = <var:g> }} <def:poly> {{ <var:r> = <nat:1> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:S1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:S1> = <var:g> /\ <var:S2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:S1> = <var:g> /\ <var:S2> = <var:g> ^ <nat:2> /\ <var:S3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:S1> = <var:g> /\ <var:S2> = <var:g> ^ <nat:2> /\ <var:S3> = <var:g> ^ <nat:3> /\ <var:S4> = <var:g> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:S1> = <var:g> /\ <var:S2> = <var:g> ^ <nat:2> /\ <var:S3> = <var:g> ^ <nat:3> /\ <var:S4> = <var:g> ^ <nat:4> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:S1> = <nat:3> * <var:g> /\ <var:S2> = <var:g> ^ <nat:2> /\ <var:S3> = <var:g> ^ <nat:3> /\ <var:S4> = <var:g> ^ <nat:4> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:S1> = <nat:3> * <var:g> /\ <var:S2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:S3> = <var:g> ^ <nat:3> /\ <var:S4> = <var:g> ^ <nat:4> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:S1> = <nat:3> * <var:g> /\ <var:S2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:S3> = <nat:2> * <var:g> ^ <nat:3> /\ <var:S4> = <var:g> ^ <nat:4> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:S1> = <nat:3> * <var:g> /\ <var:S2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:S3> = <nat:2> * <var:g> ^ <nat:3> /\ <var:S4> = <nat:1> * <var:g> ^ <nat:4> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:S1> = <nat:3> * <var:g> /\ <var:S2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:S3> = <nat:2> * <var:g> ^ <nat:3> /\ <var:S0> = <nat:1> /\ <var:r> = <nat:1> * <var:g> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:S1> = <nat:3> * <var:g> /\ <var:S2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:S0> = <nat:1> /\ <var:r> = <nat:1> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:S1> = <nat:3> * <var:g> /\ <var:S0> = <nat:1> /\ <var:r> = <nat:1> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:S0> = <nat:1> /\ <var:r> = <nat:1> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:g> /\ <var:r> = <nat:1> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 