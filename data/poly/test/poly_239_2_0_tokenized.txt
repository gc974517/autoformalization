\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:1> ; <var:w> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:x> = <var:H> $ ahead of the evaluation of our list of instructions , then we see $ <var:w> = <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment is done through Hoare logic . Moving on to the next step , we have the variable update code \verb | <var:k0> := <nat:1> ; | . This transfers the precondition $ \{ <var:x> = <var:H> \} $ as $ \{ <var:x> = <var:H> \land <var:k0> = <nat:1> \} $ . This is rigorously given using the assignment scheme of standard Hoare reasoning . Going to the next step , the statement \verb | <var:w> := <var:k0> | . This line forwards $ \{ <var:x> = <var:H> \land <var:k0> = <nat:1> \} $ toward $ \{ <var:x> = <var:H> \land <var:w> = <nat:1> \} $ . This is rigorously given using the assignment rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:1> ; <var:w> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:x> = <var:H> }} <def:poly> {{ <var:w> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:H> /\ <var:w> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 