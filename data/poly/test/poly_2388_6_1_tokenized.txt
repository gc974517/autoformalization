\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:t1> := <var:B> ; <var:t2> := <var:t1> * <var:B> ; <var:t0> := <nat:8> ; <var:t2> := <var:t2> * <nat:3> ; <var:T> := <var:t2> <var:T> := <var:T> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> . Assume it to hold that $ <var:B> = <var:e> $ before the execution of the segment of code , then we see $ <var:T> = <nat:3> * <var:e> ^ <nat:2> + <nat:8> $ after list of commands is done . \end{theorem} \begin{proof} The way to prove correctness for the set of instructions is evident by typical Hoare reasoning . Stepping forward , we see the command \verb | <var:t1> := <var:B> ; | . This takes the precondition $ \{ <var:B> = <var:e> \} $ to the postcondition $ \{ <var:B> = <var:e> \land <var:t1> = <var:e> \} $ . Going to the next step , the variable assignmet command \verb | <var:t2> := <var:t1> * <var:B> ; | . This line takes $ \{ <var:B> = <var:e> \land <var:t1> = <var:e> \} $ toward the condition $ \{ <var:B> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \} $ . Now , we have the line \verb | <var:t0> := <nat:8> ; | . This forwards the precondition $ \{ <var:B> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \} $ into $ \{ <var:B> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \land <var:t0> = <nat:8> \} $ . This is guaranteed through the assignment scheme from usual Hoare logic . Taking a look at the following statement found in the series of commands , we have the statement \verb | <var:t2> := <var:t2> * <nat:3> ; | . This statement moves the precondition $ \{ <var:B> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <var:e> ^ <nat:2> \land <var:t0> = <nat:8> \} $ toward $ \{ <var:B> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <nat:3> * <var:e> ^ <nat:2> \land <var:t0> = <nat:8> \} $ . This is guaranteed through the assignment law defined in standard Hoare logic . Moving forward to the subsequent statement in our program , we have the command \verb | <var:T> := <var:t2> | . This code advances the precondition $ \{ <var:B> = <var:e> \land <var:t1> = <var:e> \land <var:t2> = <nat:3> * <var:e> ^ <nat:2> \land <var:t0> = <nat:8> \} $ toward the condition $ \{ <var:B> = <var:e> \land <var:t1> = <var:e> \land <var:t0> = <nat:8> \land <var:T> = <nat:3> * <var:e> ^ <nat:2> \} $ . This is rigorously given using the assignment law given in standard Hoare logic . Moving on to the next command seen in the code segment , the variable update statement \verb | <var:T> := <var:T> + <var:t0> | . This statement redefines the precondition $ \{ <var:B> = <var:e> \land <var:t1> = <var:e> \land <var:t0> = <nat:8> \land <var:T> = <nat:3> * <var:e> ^ <nat:2> \} $ as $ \{ <var:B> = <var:e> \land <var:T> = <nat:3> * <var:e> ^ <nat:2> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t1> := <var:B> ; <var:t2> := <var:t1> * <var:B> ; <var:t0> := <nat:8> ; <var:t2> := <var:t2> * <nat:3> ; <var:T> := <var:t2> <var:T> := <var:T> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:B> = <var:e> }} <def:poly> {{ <var:T> = <nat:3> * <var:e> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:t1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:t1> = <var:e> /\ <var:t2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:t1> = <var:e> /\ <var:t2> = <var:e> ^ <nat:2> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:t1> = <var:e> /\ <var:t2> = <nat:3> * <var:e> ^ <nat:2> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:t1> = <var:e> /\ <var:t0> = <nat:8> /\ <var:T> = <nat:3> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:T> = <nat:3> * <var:e> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 