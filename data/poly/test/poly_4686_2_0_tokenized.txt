\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y0> := <nat:7> ; <var:K> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:M> = <var:p> $ prior to evaluating our series of instructions , it holds that we have $ <var:K> = <nat:7> $ after set of commands executes . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is shown through standard Hoare techniques . Advancing to the upcoming statement seen in our set of commands , we have the variable binding command giving $ <nat:7> $ into $ <var:Y0>$ . This code transfers $ \{ <var:M> = <var:p> \} $ into the postcondition $ \{ <var:M> = <var:p> \land <var:Y0> = <nat:7> \} $ . This is sound through the assignment scheme given by typical Hoare reasoning . Shifting focus toward the subsequent command found in the set of instructions , we see the command \verb | <var:K> := <var:Y0> | . This advances the condition $ \{ <var:M> = <var:p> \land <var:Y0> = <nat:7> \} $ toward $ \{ <var:M> = <var:p> \land <var:K> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:7> ; <var:K> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:M> = <var:p> }} <def:poly> {{ <var:K> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:K> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 