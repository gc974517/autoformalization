\begin{document} \begin{theorem} Define a series of commands as \begin{verbatim} <var:V0> := <nat:8> ; <var:V1> := <nat:9> ; <var:V1> := <var:V1> * <var:P> ; <var:b> := <var:V1> ; <var:b> := <var:b> + <var:V0> \end{verbatim} Allow it to be that $ <var:P> = <var:R> $ prior to evaluating the program , it follows that we have $ <var:b> = <nat:9> \times <var:R> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:R> \} \\ <var:V0> := <nat:8> ; \\ \{ <var:P> = <var:R> \land <var:V0> = <nat:8> \} \\ <var:V1> := <nat:9> ; \\ \{ <var:P> = <var:R> \land <var:V0> = <nat:8> \land <var:V1> = <nat:9> \} \\ <var:V1> := <var:V1> * <var:P> ; \\ \{ <var:P> = <var:R> \land <var:V0> = <nat:8> \land <var:V1> = <nat:9> * <var:R> \} \\ <var:b> := <var:V1> ; \\ \{ <var:P> = <var:R> \land <var:V0> = <nat:8> \land <var:b> = <nat:9> * <var:R> \} \\ <var:b> := <var:b> + <var:V0> \\ \{ <var:P> = <var:R> \land <var:b> = <nat:9> * <var:R> + <nat:8> \} \end{eqnarray} Applying Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:P> = <var:R> }} <var:V0> := <nat:8> ; <var:V1> := <nat:9> ; <var:V1> := <var:V1> * <var:P> ; <var:b> := <var:V1> ; <var:b> := <var:b> + <var:V0> {{ <var:b> = <nat:9> * <var:R> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:V0> = <nat:8> /\ <var:V1> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:V0> = <nat:8> /\ <var:b> = <nat:9> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:b> = <nat:9> * <var:R> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 