\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:p> ; <var:P2> := <var:P1> * <var:p> ; <var:P3> := <var:P2> * <var:p> ; <var:P0> := <nat:2> ; <var:P3> := <var:P3> * <nat:4> ; <var:n> := <var:P3> <var:n> := <var:n> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:p> = <var:o> $ ahead of the evaluation of the set of instructions , it follows that we see $ <var:n> = <nat:4> \cdot <var:o> ^ <nat:3> + <nat:2> $ after list of instructions has finished . \end{theorem} \begin{proof} The argument for our list of commands is done through typical Hoare techniques . Moving on to the proceeding bit of code in our code , we see the variable update statement \verb | <var:P1> := <var:p> ; | . This statement redefines the precondition $ \{ <var:p> = <var:o> \} $ toward the condition $ \{ <var:p> = <var:o> \land <var:P1> = <var:o> \} $ . This is shown through the assignment law given by Hoare techniques . Moving on , we see the variable binding statement defining $ <var:P1> * <var:p> $ to $ <var:P2>$ . This command takes $ \{ <var:p> = <var:o> \land <var:P1> = <var:o> \} $ into the postcondition $ \{ <var:p> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \} $ . This is shown through the assignment rule defined in usual Hoare logic . Moving forward , the environment update line \verb | <var:P3> := <var:P2> * <var:p> ; | . This advances the condition $ \{ <var:p> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \} $ toward the postcondition $ \{ <var:p> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P3> = <var:o> ^ <nat:3> \} $ . This is deduced with the assignment inference rule from standard Hoare reasoning . After , we have the variable assignmet statement giving $ <nat:2> $ to $ <var:P0>$ . This line forwards $ \{ <var:p> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P3> = <var:o> ^ <nat:3> \} $ toward the condition $ \{ <var:p> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P3> = <var:o> ^ <nat:3> \land <var:P0> = <nat:2> \} $ . This is shown to be logically sound by the assignment rule of usual Hoare logic . Immediately following , we have the variable assignmet line binding $ <var:P3> * <nat:4> $ as $ <var:P3>$ . This code advances $ \{ <var:p> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P3> = <var:o> ^ <nat:3> \land <var:P0> = <nat:2> \} $ to the postcondition $ \{ <var:p> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P3> = <nat:4> \cdot <var:o> ^ <nat:3> \land <var:P0> = <nat:2> \} $ . Now , we have the environment update command \verb | <var:n> := <var:P3> | . This code takes the condition $ \{ <var:p> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P3> = <nat:4> \cdot <var:o> ^ <nat:3> \land <var:P0> = <nat:2> \} $ as $ \{ <var:p> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P0> = <nat:2> \land <var:n> = <nat:4> \cdot <var:o> ^ <nat:3> \} $ . This is guaranteed through the assignment scheme in typical Hoare techniques . Next , the environment update code yielding $ <var:n> + <var:P0$ to $ <var:n>$ . This moves the condition $ \{ <var:p> = <var:o> \land <var:P1> = <var:o> \land <var:P2> = <var:o> ^ <nat:2> \land <var:P0> = <nat:2> \land <var:n> = <nat:4> \cdot <var:o> ^ <nat:3> \} $ to $ \{ <var:p> = <var:o> \land <var:n> = <nat:4> \cdot <var:o> ^ <nat:3> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <def:poly> := <var:P1> := <var:p> ; <var:P2> := <var:P1> * <var:p> ; <var:P3> := <var:P2> * <var:p> ; <var:P0> := <nat:2> ; <var:P3> := <var:P3> * <nat:4> ; <var:n> := <var:P3> <var:n> := <var:n> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:p> = <var:o> }} <def:poly> {{ <var:n> = <nat:4> * <var:o> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:P1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:P1> = <var:o> /\ <var:P2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:P1> = <var:o> /\ <var:P2> = <var:o> ^ <nat:2> /\ <var:P3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:P1> = <var:o> /\ <var:P2> = <var:o> ^ <nat:2> /\ <var:P3> = <var:o> ^ <nat:3> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:P1> = <var:o> /\ <var:P2> = <var:o> ^ <nat:2> /\ <var:P3> = <nat:4> * <var:o> ^ <nat:3> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:P1> = <var:o> /\ <var:P2> = <var:o> ^ <nat:2> /\ <var:P0> = <nat:2> /\ <var:n> = <nat:4> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:o> /\ <var:n> = <nat:4> * <var:o> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 