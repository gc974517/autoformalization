\begin{document} \begin{theorem} We define the following code in \emph{Imp} as \begin{verbatim} <var:k1> := <var:O> ; <var:k2> := <var:k1> * <var:O> ; <var:k3> := <var:k2> * <var:O> ; <var:k4> := <var:k3> * <var:O> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:9> ; <var:k2> := <var:k2> * <nat:9> ; <var:k3> := <var:k3> * <nat:1> ; <var:k4> := <var:k4> * <nat:6> ; <var:J> := <var:k4> <var:J> := <var:J> + <var:k3> <var:J> := <var:J> + <var:k2> <var:J> := <var:J> + <var:k1> <var:J> := <var:J> + <var:k0> \end{verbatim} Allowing $ <var:O> = <var:z> $ ( for all natural numbers $ <var:z> $ ) prior to evaluating our code segment , it holds that $ <var:J> = <nat:6> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> + <nat:9> * <var:z> + <nat:9> $ once code segment is done executing . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is accomplished by usual Hoare logic . Moving on , we see the binding line letting $ <var:O> $ to $ <var:k1>$ . This redefines the condition $ \{ <var:O> = <var:z> \} $ into the condition $ \{ <var:O> = <var:z> \land <var:k1> = <var:z> \} $ . Considering the next step seen in our set of commands , the assignment statement \verb | <var:k2> := <var:k1> * <var:O> ; | . This command takes the precondition $ \{ <var:O> = <var:z> \land <var:k1> = <var:z> \} $ as the postcondition $ \{ <var:O> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \} $ . This is known to be sound with the assignment rule from typical Hoare techniques . Honing in on the next command in our code , we have the line \verb | <var:k3> := <var:k2> * <var:O> ; | . This line advances the condition $ \{ <var:O> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \} $ toward the condition $ \{ <var:O> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \} $ . This is rigorously given through the assignment rule given in Hoare techniques . Honing in on the following statement found in the set of instructions , we have the variable assignmet code \verb | <var:k4> := <var:k3> * <var:O> ; | . This code forwards $ \{ <var:O> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \} $ toward the postcondition $ \{ <var:O> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \} $ . This is ensured with the assignment scheme obtained from typical Hoare logic . Following , we have the variable binding line \verb | <var:k0> := <nat:9> ; | . This transfers the precondition $ \{ <var:O> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \} $ into the condition $ \{ <var:O> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k0> = <nat:9> \} $ . This is ensured using the assignment law from typical Hoare reasoning . Next , the assignment command \verb | <var:k1> := <var:k1> * <nat:9> ; | . This command moves $ \{ <var:O> = <var:z> \land <var:k1> = <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k0> = <nat:9> \} $ as $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k0> = <nat:9> \} $ . This is rigorously given through the assignment rule given by typical Hoare logic . Further , we see the line \verb | <var:k2> := <var:k2> * <nat:9> ; | . This redefines $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k2> = <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k0> = <nat:9> \} $ toward the postcondition $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k2> = <nat:9> \cdot <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k0> = <nat:9> \} $ . Moving forward to the subsequent command in the program , we have the variable update statement binding $ <var:k3> * <nat:1> $ as $ <var:k3>$ . This forwards $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k2> = <nat:9> \cdot <var:z> ^ <nat:2> \land <var:k3> = <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k0> = <nat:9> \} $ into the condition $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k2> = <nat:9> \cdot <var:z> ^ <nat:2> \land <var:k3> = <nat:1> \cdot <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k0> = <nat:9> \} $ . This is deduced with the assignment inference rule defined in typical Hoare reasoning . Advancing , we have the binding code \verb | <var:k4> := <var:k4> * <nat:6> ; | . This transfers $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k2> = <nat:9> \cdot <var:z> ^ <nat:2> \land <var:k3> = <nat:1> \cdot <var:z> ^ <nat:3> \land <var:k4> = <var:z> ^ <nat:4> \land <var:k0> = <nat:9> \} $ as $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k2> = <nat:9> \cdot <var:z> ^ <nat:2> \land <var:k3> = <nat:1> \cdot <var:z> ^ <nat:3> \land <var:k4> = <nat:6> \cdot <var:z> ^ <nat:4> \land <var:k0> = <nat:9> \} $ . Stepping forward , we have the environment update code letting $ <var:k4$ toward $ <var:J>$ . This command takes the precondition $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k2> = <nat:9> \cdot <var:z> ^ <nat:2> \land <var:k3> = <nat:1> \cdot <var:z> ^ <nat:3> \land <var:k4> = <nat:6> \cdot <var:z> ^ <nat:4> \land <var:k0> = <nat:9> \} $ as the postcondition $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k2> = <nat:9> \cdot <var:z> ^ <nat:2> \land <var:k3> = <nat:1> \cdot <var:z> ^ <nat:3> \land <var:k0> = <nat:9> \land <var:J> = <nat:6> \cdot <var:z> ^ <nat:4> \} $ . Moving on to the next step , we see the binding command \verb | <var:J> := <var:J> + <var:k3> | . This line transfers the precondition $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k2> = <nat:9> \cdot <var:z> ^ <nat:2> \land <var:k3> = <nat:1> \cdot <var:z> ^ <nat:3> \land <var:k0> = <nat:9> \land <var:J> = <nat:6> \cdot <var:z> ^ <nat:4> \} $ as $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k2> = <nat:9> \cdot <var:z> ^ <nat:2> \land <var:k0> = <nat:9> \land <var:J> = <nat:6> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> \} $ . Considering the upcoming line in the code segment , we have the binding command giving $ <var:J> + <var:k2$ toward $ <var:J>$ . This redefines the condition $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k2> = <nat:9> \cdot <var:z> ^ <nat:2> \land <var:k0> = <nat:9> \land <var:J> = <nat:6> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> \} $ to the condition $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k0> = <nat:9> \land <var:J> = <nat:6> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> + <nat:9> \cdot <var:z> ^ <nat:2> \} $ . This is given using the assignment inference rule in Hoare logic . Now , the environment update statement defining $ <var:J> + <var:k1$ into $ <var:J>$ . This code forwards the precondition $ \{ <var:O> = <var:z> \land <var:k1> = <nat:9> \cdot <var:z> \land <var:k0> = <nat:9> \land <var:J> = <nat:6> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> + <nat:9> \cdot <var:z> ^ <nat:2> \} $ as the condition $ \{ <var:O> = <var:z> \land <var:k0> = <nat:9> \land <var:J> = <nat:6> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> + <nat:9> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> \} $ . This is given through the assignment scheme defined in usual Hoare techniques . Moving onward , we have the environment update line \verb | <var:J> := <var:J> + <var:k0> | . This command forwards the precondition $ \{ <var:O> = <var:z> \land <var:k0> = <nat:9> \land <var:J> = <nat:6> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> + <nat:9> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> \} $ into the postcondition $ \{ <var:O> = <var:z> \land <var:J> = <nat:6> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> + <nat:9> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <var:k4> : string := " <var:k4> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:O> = <var:z> }} <var:k1> := <var:O> ; <var:k2> := <var:k1> * <var:O> ; <var:k3> := <var:k2> * <var:O> ; <var:k4> := <var:k3> * <var:O> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:9> ; <var:k2> := <var:k2> * <nat:9> ; <var:k3> := <var:k3> * <nat:1> ; <var:k4> := <var:k4> * <nat:6> ; <var:J> := <var:k4> <var:J> := <var:J> + <var:k3> <var:J> := <var:J> + <var:k2> <var:J> := <var:J> + <var:k1> <var:J> := <var:J> + <var:k0> {{ <var:J> = <nat:6> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> + <nat:9> * <var:z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k1> = <var:z> /\ <var:k2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k1> = <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k1> = <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k1> = <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k1> = <nat:9> * <var:z> /\ <var:k2> = <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k1> = <nat:9> * <var:z> /\ <var:k2> = <nat:9> * <var:z> ^ <nat:2> /\ <var:k3> = <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k1> = <nat:9> * <var:z> /\ <var:k2> = <nat:9> * <var:z> ^ <nat:2> /\ <var:k3> = <nat:1> * <var:z> ^ <nat:3> /\ <var:k4> = <var:z> ^ <nat:4> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k1> = <nat:9> * <var:z> /\ <var:k2> = <nat:9> * <var:z> ^ <nat:2> /\ <var:k3> = <nat:1> * <var:z> ^ <nat:3> /\ <var:k4> = <nat:6> * <var:z> ^ <nat:4> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k1> = <nat:9> * <var:z> /\ <var:k2> = <nat:9> * <var:z> ^ <nat:2> /\ <var:k3> = <nat:1> * <var:z> ^ <nat:3> /\ <var:k0> = <nat:9> /\ <var:J> = <nat:6> * <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k1> = <nat:9> * <var:z> /\ <var:k2> = <nat:9> * <var:z> ^ <nat:2> /\ <var:k0> = <nat:9> /\ <var:J> = <nat:6> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k1> = <nat:9> * <var:z> /\ <var:k0> = <nat:9> /\ <var:J> = <nat:6> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:k0> = <nat:9> /\ <var:J> = <nat:6> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> + <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:z> /\ <var:J> = <nat:6> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:9> * <var:z> ^ <nat:2> + <nat:9> * <var:z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 