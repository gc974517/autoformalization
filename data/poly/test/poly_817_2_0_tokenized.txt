\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:2> ; <var:p> := <var:c0> \end{verbatim} Assuming $ <var:q> = <var:k> $ ahead of the execution of our segment of code then we see $ <var:p> = <nat:2> $ after list of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:k> \} \\ <var:c0> := <nat:2> ; \\ \{ <var:q> = <var:k> \land <var:c0> = <nat:2> \} \\ <var:p> := <var:c0> \\ \{ <var:q> = <var:k> \land <var:p> = <nat:2> \} \end{eqnarray} Using standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:q> = <var:k> }} <var:c0> := <nat:2> ; <var:p> := <var:c0> {{ <var:p> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:p> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 