\begin{document} \begin{theorem} Let the following code segment as \begin{verbatim} <var:L0> := <nat:4> ; <var:X> := <var:L0> \end{verbatim} Given that $ <var:R> = <var:m> $ , for any whole numbers $ <var:m> $ , ahead of interpreting this series of instructions it must be that we see $ <var:X> = <nat:4> $ after set of commands is done . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions can be demonstrated with the following decorated list of commands . \begin{eqnarray} \{ <var:R> = <var:m> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:R> = <var:m> \land <var:L0> = <nat:4> \} \\ <var:X> := <var:L0> \\ \{ <var:R> = <var:m> \land <var:X> = <nat:4> \} \end{eqnarray} Using typical Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:R> = <var:m> }} <var:L0> := <nat:4> ; <var:X> := <var:L0> {{ <var:X> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:m> /\ <var:X> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 