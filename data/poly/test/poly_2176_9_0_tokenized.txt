\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:3> ; <var:V1> := <nat:2> ; <var:V1> := <var:V1> * <var:Q> ; <var:V2> := <nat:2> ; <var:V2> := <var:V2> * <var:Q> ; <var:V2> := <var:V2> * <var:Q> ; <var:z> := <var:V2> ; <var:z> := <var:z> + <var:V1> ; <var:z> := <var:z> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> . Assuming it to be that $ <var:Q> = <var:c> $ , given all natural coefficients $ <var:c> $ , prior to running our code segment , it follows that $ <var:z> = <nat:2> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + <nat:3> $ after code segment has finished . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions can be accomplished through standard Hoare reasoning . Observing the subsequent bit of code contained in our set of instructions , we see the environment update code binding $ <nat:3> $ to $ <var:V0>$ . This command moves $ \{ <var:Q> = <var:c> \} $ as the condition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \} $ . This is known to be sound by the assignment inference rule obtained from Hoare techniques . Further , the variable assignmet code \verb | <var:V1> := <nat:2> ; | . This forwards the precondition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \} $ as the postcondition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:V1> = <nat:2> \} $ . Honing in on the proceeding piece of code found in the code segment , the assignment code yielding $ <var:V1> * <var:Q> $ into $ <var:V1>$ . This statement forwards the condition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:V1> = <nat:2> \} $ toward the postcondition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:V1> = <nat:2> \times <var:c> \} $ . Advancing to the next step , we see the variable binding code \verb | <var:V2> := <nat:2> ; | . This line forwards the precondition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:V1> = <nat:2> \times <var:c> \} $ into the postcondition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:V1> = <nat:2> \times <var:c> \land <var:V2> = <nat:2> \} $ . This is given using the assignment scheme obtained from Hoare techniques . Following , we have the assignment line giving $ <var:V2> * <var:Q> $ into $ <var:V2>$ . This advances the condition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:V1> = <nat:2> \times <var:c> \land <var:V2> = <nat:2> \} $ as the postcondition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:V1> = <nat:2> \times <var:c> \land <var:V2> = <nat:2> \times <var:c> \} $ . Immediately following , we have the statement \verb | <var:V2> := <var:V2> * <var:Q> ; | . This moves $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:V1> = <nat:2> \times <var:c> \land <var:V2> = <nat:2> \times <var:c> \} $ as the postcondition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:V1> = <nat:2> \times <var:c> \land <var:V2> = <nat:2> \times <var:c> ^ <nat:2> \} $ . This is given through the assignment law obtained from Hoare logic . Considering the subsequent statement contained in our series of commands , we have the variable update command letting $ <var:V2> $ into $ <var:z>$ . This advances the precondition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:V1> = <nat:2> \times <var:c> \land <var:V2> = <nat:2> \times <var:c> ^ <nat:2> \} $ into the condition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:V1> = <nat:2> \times <var:c> \land <var:z> = <nat:2> \times <var:c> ^ <nat:2> \} $ . This is shown through the assignment inference rule in Hoare techniques . Advancing on , the environment update code letting $ <var:z> + <var:V1> $ toward $ <var:z>$ . This transfers the condition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:V1> = <nat:2> \times <var:c> \land <var:z> = <nat:2> \times <var:c> ^ <nat:2> \} $ toward the postcondition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:z> = <nat:2> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> \} $ . This is shown through the assignment inference rule defined in usual Hoare reasoning . Next , we have the variable binding statement \verb | <var:z> := <var:z> + <var:V0> | . This statement takes the condition $ \{ <var:Q> = <var:c> \land <var:V0> = <nat:3> \land <var:z> = <nat:2> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> \} $ to the postcondition $ \{ <var:Q> = <var:c> \land <var:z> = <nat:2> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:3> \} $ . This is given with the assignment scheme given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V0> := <nat:3> ; <var:V1> := <nat:2> ; <var:V1> := <var:V1> * <var:Q> ; <var:V2> := <nat:2> ; <var:V2> := <var:V2> * <var:Q> ; <var:V2> := <var:V2> * <var:Q> ; <var:z> := <var:V2> ; <var:z> := <var:z> + <var:V1> ; <var:z> := <var:z> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Q> = <var:c> }} <def:poly> {{ <var:z> = <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:2> * <var:c> /\ <var:V2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:2> * <var:c> /\ <var:V2> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:2> * <var:c> /\ <var:V2> = <nat:2> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:2> * <var:c> /\ <var:z> = <nat:2> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:V0> = <nat:3> /\ <var:z> = <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:z> = <nat:2> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 