\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:x1> := <var:L> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:8> ; <var:H> := <var:x1> <var:H> := <var:H> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:L> = <var:I> $ ahead of interpreting our set of instructions it follows that we have $ <var:H> = <nat:8> \cdot <var:I> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the series of commands can be accomplished using Hoare techniques . Moving forward , \[ \begin{tabular} {rcl} \{ <var:L> = <var:I> \} & <var:x1> := <var:L> & \{ <var:L> = <var:I> \land <var:x1> = <var:I> \} \end{tabular} This is ensured with the assignment inference rule in Hoare techniques . Moving on , \[ \begin{tabular} {rcl} \{ <var:L> = <var:I> \} & <var:x1> := <var:L> & \{ <var:L> = <var:I> \land <var:x1> = <var:I> \} \end{tabular} Focusing on the next statements seen in the program , we see \[ \begin{tabular} {rcl} \{ <var:L> = <var:I> \} & <var:x1> := <var:L> & \{ <var:L> = <var:I> \land <var:x1> = <var:I> \} \\ \{ <var:L> = <var:I> \land <var:x1> = <var:I> \} & <var:x0> := <nat:1> & \{ <var:L> = <var:I> \land <var:x1> = <var:I> \land <var:x0> = <nat:1> \} \end{tabular} This is given using the variable binding law given in typical Hoare techniques . Shifting focus toward the following bit of code contained in the program , we have \[ \begin{tabular} {rcl} \{ <var:L> = <var:I> \} & <var:x1> := <var:L> & \{ <var:L> = <var:I> \land <var:x1> = <var:I> \} \end{tabular} This is sound through the variable binding inference rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x1> := <var:L> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:8> ; <var:H> := <var:x1> <var:H> := <var:H> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:L> = <var:I> }} <def:poly> {{ <var:H> = <nat:8> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:x1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:x1> = <var:I> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:x1> = <nat:8> * <var:I> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:x0> = <nat:1> /\ <var:H> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:H> = <nat:8> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 