\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:8> ; <var:U1> := <nat:1> ; <var:U1> := <var:U1> * <var:Z> ; <var:U2> := <nat:7> ; <var:U2> := <var:U2> * <var:Z> ; <var:U2> := <var:U2> * <var:Z> ; <var:U3> := <nat:2> ; <var:U3> := <var:U3> * <var:Z> ; <var:U3> := <var:U3> * <var:Z> ; <var:U3> := <var:U3> * <var:Z> ; <var:f> := <var:U3> ; <var:f> := <var:f> + <var:U2> ; <var:f> := <var:f> + <var:U1> ; <var:f> := <var:f> + <var:U0> \end{verbatim} Assuming ( assuming some whole numbers $ <var:K> $ ) that we have $ <var:Z> = <var:K> $ ahead of interpreting our program it holds that we have $ <var:f> = <nat:2> \times <var:K> ^ <nat:3> + <nat:7> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:8> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques produces : \begin{eqnarray} \{ <var:Z> = <var:K> \} \\ <var:U0> := <nat:8> ; \\ \{ <var:Z> = <var:K> \land <var:U0> = <nat:8> \} \end{eqnarray} Advancing running the series of commands results in : \begin{eqnarray} <var:U1> := <nat:1> ; \\ \{ <var:Z> = <var:K> \land <var:U0> = <nat:8> \land <var:U1> = <nat:1> \} \\ <var:U1> := <var:U1> * <var:Z> ; \\ \{ <var:Z> = <var:K> \land <var:U0> = <nat:8> \land <var:U1> = <nat:1> \times <var:K> \} \\ <var:U2> := <nat:7> ; \\ \{ <var:Z> = <var:K> \land <var:U0> = <nat:8> \land <var:U1> = <nat:1> \times <var:K> \land <var:U2> = <nat:7> \} \end{eqnarray} Furthering the evaluation of our series of commands results in : \begin{eqnarray} <var:U2> := <var:U2> * <var:Z> ; \\ \{ <var:Z> = <var:K> \land <var:U0> = <nat:8> \land <var:U1> = <nat:1> \times <var:K> \land <var:U2> = <nat:7> \times <var:K> \} \\ <var:U2> := <var:U2> * <var:Z> ; \\ \{ <var:Z> = <var:K> \land <var:U0> = <nat:8> \land <var:U1> = <nat:1> \times <var:K> \land <var:U2> = <nat:7> \times <var:K> ^ <nat:2> \} \\ <var:U3> := <nat:2> ; \\ \{ <var:Z> = <var:K> \land <var:U0> = <nat:8> \land <var:U1> = <nat:1> \times <var:K> \land <var:U2> = <nat:7> \times <var:K> ^ <nat:2> \land <var:U3> = <nat:2> \} \\ <var:U3> := <var:U3> * <var:Z> ; \\ \{ <var:Z> = <var:K> \land <var:U0> = <nat:8> \land <var:U1> = <nat:1> \times <var:K> \land <var:U2> = <nat:7> \times <var:K> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:K> \} \\ <var:U3> := <var:U3> * <var:Z> ; \\ \{ <var:Z> = <var:K> \land <var:U0> = <nat:8> \land <var:U1> = <nat:1> \times <var:K> \land <var:U2> = <nat:7> \times <var:K> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:K> ^ <nat:2> \} \\ <var:U3> := <var:U3> * <var:Z> ; \\ \{ <var:Z> = <var:K> \land <var:U0> = <nat:8> \land <var:U1> = <nat:1> \times <var:K> \land <var:U2> = <nat:7> \times <var:K> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:K> ^ <nat:3> \} \\ <var:f> := <var:U3> ; \\ \{ <var:Z> = <var:K> \land <var:U0> = <nat:8> \land <var:U1> = <nat:1> \times <var:K> \land <var:U2> = <nat:7> \times <var:K> ^ <nat:2> \land <var:f> = <nat:2> \times <var:K> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:U2> ; \\ \{ <var:Z> = <var:K> \land <var:U0> = <nat:8> \land <var:U1> = <nat:1> \times <var:K> \land <var:f> = <nat:2> \times <var:K> ^ <nat:3> + <nat:7> \times <var:K> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:U1> ; \\ \{ <var:Z> = <var:K> \land <var:U0> = <nat:8> \land <var:f> = <nat:2> \times <var:K> ^ <nat:3> + <nat:7> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> \} \\ <var:f> := <var:f> + <var:U0> \\ \{ <var:Z> = <var:K> \land <var:f> = <nat:2> \times <var:K> ^ <nat:3> + <nat:7> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:8> \} \end{eqnarray} Considering the preceding argument , this list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:Z> = <var:K> }} <var:U0> := <nat:8> ; <var:U1> := <nat:1> ; <var:U1> := <var:U1> * <var:Z> ; <var:U2> := <nat:7> ; <var:U2> := <var:U2> * <var:Z> ; <var:U2> := <var:U2> * <var:Z> ; <var:U3> := <nat:2> ; <var:U3> := <var:U3> * <var:Z> ; <var:U3> := <var:U3> * <var:Z> ; <var:U3> := <var:U3> * <var:Z> ; <var:f> := <var:U3> ; <var:f> := <var:f> + <var:U2> ; <var:f> := <var:f> + <var:U1> ; <var:f> := <var:f> + <var:U0> {{ <var:f> = <nat:2> * <var:K> ^ <nat:3> + <nat:7> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:1> * <var:K> /\ <var:U2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:1> * <var:K> /\ <var:U2> = <nat:7> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:1> * <var:K> /\ <var:U2> = <nat:7> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:1> * <var:K> /\ <var:U2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:U3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:1> * <var:K> /\ <var:U2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:1> * <var:K> /\ <var:U2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:1> * <var:K> /\ <var:U2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:1> * <var:K> /\ <var:U2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:f> = <nat:2> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:U0> = <nat:8> /\ <var:U1> = <nat:1> * <var:K> /\ <var:f> = <nat:2> * <var:K> ^ <nat:3> + <nat:7> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:U0> = <nat:8> /\ <var:f> = <nat:2> * <var:K> ^ <nat:3> + <nat:7> * <var:K> ^ <nat:2> + <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:f> = <nat:2> * <var:K> ^ <nat:3> + <nat:7> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 