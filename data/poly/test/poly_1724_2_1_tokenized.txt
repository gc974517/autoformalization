\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:7> ; <var:O> := <var:x0> \end{verbatim} Allowing that we have $ <var:k> = <var:B> $ before the execution of the list of instructions it follows that we see $ <var:O> = <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions can be seen through typical Hoare logic . Moving on to the upcoming step seen in the list of instructions , the variable assignmet code defining $ <nat:7> $ into $ <var:x0>$ . This transfers the condition $ \{ <var:k> = <var:B> \} $ as $ \{ <var:k> = <var:B> \land <var:x0> = <nat:7> \} $ . Moving on to the next piece of code found in the list of instructions , the variable update statement \verb | <var:O> := <var:x0> | . This redefines $ \{ <var:k> = <var:B> \land <var:x0> = <nat:7> \} $ into the condition $ \{ <var:k> = <var:B> \land <var:O> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:k> = <var:B> }} <var:x0> := <nat:7> ; <var:O> := <var:x0> {{ <var:O> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:O> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 