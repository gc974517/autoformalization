\begin{document} \begin{theorem} Take a series of instructions as \begin{verbatim} <var:b1> := <var:E> ; <var:b2> := <var:b1> * <var:E> ; <var:b3> := <var:b2> * <var:E> ; <var:b4> := <var:b3> * <var:E> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:5> ; <var:b2> := <var:b2> * <nat:8> ; <var:b4> := <var:b4> * <nat:1> ; <var:v> := <var:b4> <var:v> := <var:v> + <var:b2> <var:v> := <var:v> + <var:b1> <var:v> := <var:v> + <var:b0> \end{verbatim} Assuming it to hold that $ <var:E> = <var:q> $ prior to evaluating our series of commands it follows that $ <var:v> = <nat:1> * <var:q> ^ <nat:4> + <nat:8> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:4> $ after list of commands is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions can be accomplished with typical Hoare logic . Focusing on the upcoming bit of code in the series of commands , the variable assignmet code \verb | <var:b1> := <var:E> ; | . This forwards the precondition $ \{ <var:E> = <var:q> \} $ toward the postcondition $ \{ <var:E> = <var:q> \land <var:b1> = <var:q> \} $ . This is ensured with the assignment law defined by usual Hoare reasoning . Moving onward , we see the environment update command \verb | <var:b2> := <var:b1> * <var:E> ; | . This statement moves the precondition $ \{ <var:E> = <var:q> \land <var:b1> = <var:q> \} $ into the condition $ \{ <var:E> = <var:q> \land <var:b1> = <var:q> \land <var:b2> = <var:q> ^ <nat:2> \} $ . Further , we see the code \verb | <var:b3> := <var:b2> * <var:E> ; | . This advances the precondition $ \{ <var:E> = <var:q> \land <var:b1> = <var:q> \land <var:b2> = <var:q> ^ <nat:2> \} $ to the condition $ \{ <var:E> = <var:q> \land <var:b1> = <var:q> \land <var:b2> = <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \} $ . This is shown using the assignment law given by Hoare techniques . Moving on to the proceeding command seen in our segment of code , we have the statement letting $ <var:b3> * <var:E> $ into $ <var:b4>$ . This line advances the condition $ \{ <var:E> = <var:q> \land <var:b1> = <var:q> \land <var:b2> = <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \} $ into the condition $ \{ <var:E> = <var:q> \land <var:b1> = <var:q> \land <var:b2> = <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \land <var:b4> = <var:q> ^ <nat:4> \} $ . Focusing on the next command contained in our program , we have the binding line \verb | <var:b0> := <nat:4> ; | . This command moves $ \{ <var:E> = <var:q> \land <var:b1> = <var:q> \land <var:b2> = <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \land <var:b4> = <var:q> ^ <nat:4> \} $ as the condition $ \{ <var:E> = <var:q> \land <var:b1> = <var:q> \land <var:b2> = <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \land <var:b4> = <var:q> ^ <nat:4> \land <var:b0> = <nat:4> \} $ . Advancing on , we see the binding statement defining $ <var:b1> * <nat:5> $ to $ <var:b1>$ . This command advances $ \{ <var:E> = <var:q> \land <var:b1> = <var:q> \land <var:b2> = <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \land <var:b4> = <var:q> ^ <nat:4> \land <var:b0> = <nat:4> \} $ toward the postcondition $ \{ <var:E> = <var:q> \land <var:b1> = <nat:5> \cdot <var:q> \land <var:b2> = <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \land <var:b4> = <var:q> ^ <nat:4> \land <var:b0> = <nat:4> \} $ . This is rigorously given with the assignment rule defined in standard Hoare reasoning . Considering the upcoming piece of code found in our set of commands , we have the variable assignmet statement binding $ <var:b2> * <nat:8> $ into $ <var:b2>$ . This line forwards the precondition $ \{ <var:E> = <var:q> \land <var:b1> = <nat:5> \cdot <var:q> \land <var:b2> = <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \land <var:b4> = <var:q> ^ <nat:4> \land <var:b0> = <nat:4> \} $ to the postcondition $ \{ <var:E> = <var:q> \land <var:b1> = <nat:5> \cdot <var:q> \land <var:b2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \land <var:b4> = <var:q> ^ <nat:4> \land <var:b0> = <nat:4> \} $ . This is rigorously given by the assignment rule of Hoare techniques . Moving forward to the next step , the variable update command \verb | <var:b4> := <var:b4> * <nat:1> ; | . This code advances the condition $ \{ <var:E> = <var:q> \land <var:b1> = <nat:5> \cdot <var:q> \land <var:b2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \land <var:b4> = <var:q> ^ <nat:4> \land <var:b0> = <nat:4> \} $ as the condition $ \{ <var:E> = <var:q> \land <var:b1> = <nat:5> \cdot <var:q> \land <var:b2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \land <var:b4> = <nat:1> \cdot <var:q> ^ <nat:4> \land <var:b0> = <nat:4> \} $ . This is given using the assignment rule in Hoare reasoning . Looking at the subsequent command contained in our code segment , we see the variable binding code assigning $ <var:b4$ as $ <var:v>$ . This code forwards $ \{ <var:E> = <var:q> \land <var:b1> = <nat:5> \cdot <var:q> \land <var:b2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \land <var:b4> = <nat:1> \cdot <var:q> ^ <nat:4> \land <var:b0> = <nat:4> \} $ to the condition $ \{ <var:E> = <var:q> \land <var:b1> = <nat:5> \cdot <var:q> \land <var:b2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \land <var:b0> = <nat:4> \land <var:v> = <nat:1> \cdot <var:q> ^ <nat:4> \} $ . Shifting focus toward the next statement seen in our code segment , the binding code \verb | <var:v> := <var:v> + <var:b2> | . This forwards the condition $ \{ <var:E> = <var:q> \land <var:b1> = <nat:5> \cdot <var:q> \land <var:b2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:b3> = <var:q> ^ <nat:3> \land <var:b0> = <nat:4> \land <var:v> = <nat:1> \cdot <var:q> ^ <nat:4> \} $ into the postcondition $ \{ <var:E> = <var:q> \land <var:b1> = <nat:5> \cdot <var:q> \land <var:b0> = <nat:4> \land <var:v> = <nat:1> \cdot <var:q> ^ <nat:4> + <nat:8> \cdot <var:q> ^ <nat:2> \} $ . Advancing to the next step , we have the variable binding statement \verb | <var:v> := <var:v> + <var:b1> | . This redefines $ \{ <var:E> = <var:q> \land <var:b1> = <nat:5> \cdot <var:q> \land <var:b0> = <nat:4> \land <var:v> = <nat:1> \cdot <var:q> ^ <nat:4> + <nat:8> \cdot <var:q> ^ <nat:2> \} $ into the condition $ \{ <var:E> = <var:q> \land <var:b0> = <nat:4> \land <var:v> = <nat:1> \cdot <var:q> ^ <nat:4> + <nat:8> \cdot <var:q> ^ <nat:2> + <nat:5> \cdot <var:q> \} $ . This is deduced using the assignment rule given in usual Hoare logic . Immediately after , we see the environment update code defining $ <var:v> + <var:b0$ into $ <var:v>$ . This takes $ \{ <var:E> = <var:q> \land <var:b0> = <nat:4> \land <var:v> = <nat:1> \cdot <var:q> ^ <nat:4> + <nat:8> \cdot <var:q> ^ <nat:2> + <nat:5> \cdot <var:q> \} $ as the postcondition $ \{ <var:E> = <var:q> \land <var:v> = <nat:1> \cdot <var:q> ^ <nat:4> + <nat:8> \cdot <var:q> ^ <nat:2> + <nat:5> \cdot <var:q> + <nat:4> \} $ . This is rigorously given using the assignment scheme defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Definition <var:b4> : string := " <var:b4> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:E> = <var:q> }} <var:b1> := <var:E> ; <var:b2> := <var:b1> * <var:E> ; <var:b3> := <var:b2> * <var:E> ; <var:b4> := <var:b3> * <var:E> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:5> ; <var:b2> := <var:b2> * <nat:8> ; <var:b4> := <var:b4> * <nat:1> ; <var:v> := <var:b4> <var:v> := <var:v> + <var:b2> <var:v> := <var:v> + <var:b1> <var:v> := <var:v> + <var:b0> {{ <var:v> = <nat:1> * <var:q> ^ <nat:4> + <nat:8> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:b1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:b1> = <var:q> /\ <var:b2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:b1> = <var:q> /\ <var:b2> = <var:q> ^ <nat:2> /\ <var:b3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:b1> = <var:q> /\ <var:b2> = <var:q> ^ <nat:2> /\ <var:b3> = <var:q> ^ <nat:3> /\ <var:b4> = <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:b1> = <var:q> /\ <var:b2> = <var:q> ^ <nat:2> /\ <var:b3> = <var:q> ^ <nat:3> /\ <var:b4> = <var:q> ^ <nat:4> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:b1> = <nat:5> * <var:q> /\ <var:b2> = <var:q> ^ <nat:2> /\ <var:b3> = <var:q> ^ <nat:3> /\ <var:b4> = <var:q> ^ <nat:4> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:b1> = <nat:5> * <var:q> /\ <var:b2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:b3> = <var:q> ^ <nat:3> /\ <var:b4> = <var:q> ^ <nat:4> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:b1> = <nat:5> * <var:q> /\ <var:b2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:b3> = <var:q> ^ <nat:3> /\ <var:b4> = <nat:1> * <var:q> ^ <nat:4> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:b1> = <nat:5> * <var:q> /\ <var:b2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:b3> = <var:q> ^ <nat:3> /\ <var:b0> = <nat:4> /\ <var:v> = <nat:1> * <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:b1> = <nat:5> * <var:q> /\ <var:b0> = <nat:4> /\ <var:v> = <nat:1> * <var:q> ^ <nat:4> + <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:b0> = <nat:4> /\ <var:v> = <nat:1> * <var:q> ^ <nat:4> + <nat:8> * <var:q> ^ <nat:2> + <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:q> /\ <var:v> = <nat:1> * <var:q> ^ <nat:4> + <nat:8> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 