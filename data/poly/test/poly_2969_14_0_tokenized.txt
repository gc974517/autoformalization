\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:9> ; <var:V1> := <nat:7> ; <var:V1> := <var:V1> * <var:X> ; <var:V2> := <nat:6> ; <var:V2> := <var:V2> * <var:X> ; <var:V2> := <var:V2> * <var:X> ; <var:V3> := <nat:4> ; <var:V3> := <var:V3> * <var:X> ; <var:V3> := <var:V3> * <var:X> ; <var:V3> := <var:V3> * <var:X> ; <var:N> := <var:V3> ; <var:N> := <var:N> + <var:V2> ; <var:N> := <var:N> + <var:V1> ; <var:N> := <var:N> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:X> = <var:w> $ ( letting integers $ <var:w> $ ) before evaluating our set of commands it holds that we have $ <var:N> = <nat:4> \cdot <var:w> ^ <nat:3> + <nat:6> \cdot <var:w> ^ <nat:2> + <nat:7> \cdot <var:w> + <nat:9> $ once code segment finishes . \end{theorem} \begin{proof} Arguing the correctness of our list of commands is accomplished by usual Hoare logic . Considering the next commands seen in the program , we have \verb | { <var:X> = <var:w> } <var:V0> := <nat:9> { <var:X> = <var:w> \land <var:V0> = <nat:9> } | , \verb | { <var:X> = <var:w> \land <var:V0> = <nat:9> } <var:V1> := <nat:7> { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> } | , \verb | { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> } <var:V1> := <var:V1> * <var:X> { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> } | , \verb | { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> } <var:V2> := <nat:6> { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> \land <var:V2> = <nat:6> } | , \verb | { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> \land <var:V2> = <nat:6> } <var:V2> := <var:V2> * <var:X> { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> \land <var:V2> = <nat:6> \times <var:w> } | , \verb | { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> \land <var:V2> = <nat:6> \times <var:w> } <var:V2> := <var:V2> * <var:X> { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> \land <var:V2> = <nat:6> \times <var:w> ^ <nat:2> } | , \verb | { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> \land <var:V2> = <nat:6> \times <var:w> ^ <nat:2> } <var:V3> := <nat:4> { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> \land <var:V2> = <nat:6> \times <var:w> ^ <nat:2> \land <var:V3> = <nat:4> } | , \verb | { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> \land <var:V2> = <nat:6> \times <var:w> ^ <nat:2> \land <var:V3> = <nat:4> } <var:V3> := <var:V3> * <var:X> { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> \land <var:V2> = <nat:6> \times <var:w> ^ <nat:2> \land <var:V3> = <nat:4> \times <var:w> } | , \verb | { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> \land <var:V2> = <nat:6> \times <var:w> ^ <nat:2> \land <var:V3> = <nat:4> \times <var:w> } <var:V3> := <var:V3> * <var:X> { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> \land <var:V2> = <nat:6> \times <var:w> ^ <nat:2> \land <var:V3> = <nat:4> \times <var:w> ^ <nat:2> } | and \verb | { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> \land <var:V2> = <nat:6> \times <var:w> ^ <nat:2> \land <var:V3> = <nat:4> \times <var:w> ^ <nat:2> } <var:V3> := <var:V3> * <var:X> { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> \times <var:w> \land <var:V2> = <nat:6> \times <var:w> ^ <nat:2> \land <var:V3> = <nat:4> \times <var:w> ^ <nat:3> } | . Taking a look at the next lines of codefound in the list of commands , we have \verb | { <var:X> = <var:w> } <var:V0> := <nat:9> { <var:X> = <var:w> \land <var:V0> = <nat:9> } | and \verb | { <var:X> = <var:w> \land <var:V0> = <nat:9> } <var:V1> := <nat:7> { <var:X> = <var:w> \land <var:V0> = <nat:9> \land <var:V1> = <nat:7> } | . This is shown to be logically sound by the variable assignmet inference rule given by Hoare reasoning . Immediately following , \verb | { <var:X> = <var:w> } <var:V0> := <nat:9> { <var:X> = <var:w> \land <var:V0> = <nat:9> } | . Taking a look at the upcoming piece of code seen in our code , \verb | { <var:X> = <var:w> } <var:V0> := <nat:9> { <var:X> = <var:w> \land <var:V0> = <nat:9> } | . This is shown with the binding law defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V0> := <nat:9> ; <var:V1> := <nat:7> ; <var:V1> := <var:V1> * <var:X> ; <var:V2> := <nat:6> ; <var:V2> := <var:V2> * <var:X> ; <var:V2> := <var:V2> * <var:X> ; <var:V3> := <nat:4> ; <var:V3> := <var:V3> * <var:X> ; <var:V3> := <var:V3> * <var:X> ; <var:V3> := <var:V3> * <var:X> ; <var:N> := <var:V3> ; <var:N> := <var:N> + <var:V2> ; <var:N> := <var:N> + <var:V1> ; <var:N> := <var:N> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:X> = <var:w> }} <def:poly> {{ <var:N> = <nat:4> * <var:w> ^ <nat:3> + <nat:6> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:V0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:7> * <var:w> /\ <var:V2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:7> * <var:w> /\ <var:V2> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:7> * <var:w> /\ <var:V2> = <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:7> * <var:w> /\ <var:V2> = <nat:6> * <var:w> ^ <nat:2> /\ <var:V3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:7> * <var:w> /\ <var:V2> = <nat:6> * <var:w> ^ <nat:2> /\ <var:V3> = <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:7> * <var:w> /\ <var:V2> = <nat:6> * <var:w> ^ <nat:2> /\ <var:V3> = <nat:4> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:7> * <var:w> /\ <var:V2> = <nat:6> * <var:w> ^ <nat:2> /\ <var:V3> = <nat:4> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:7> * <var:w> /\ <var:V2> = <nat:6> * <var:w> ^ <nat:2> /\ <var:N> = <nat:4> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:V0> = <nat:9> /\ <var:V1> = <nat:7> * <var:w> /\ <var:N> = <nat:4> * <var:w> ^ <nat:3> + <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:V0> = <nat:9> /\ <var:N> = <nat:4> * <var:w> ^ <nat:3> + <nat:6> * <var:w> ^ <nat:2> + <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:N> = <nat:4> * <var:w> ^ <nat:3> + <nat:6> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 