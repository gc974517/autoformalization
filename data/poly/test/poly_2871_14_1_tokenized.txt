\begin{document} \begin{theorem} Define the following code segment : \begin{verbatim} <var:I1> := <var:t> ; <var:I2> := <var:I1> * <var:t> ; <var:I3> := <var:I2> * <var:t> ; <var:I4> := <var:I3> * <var:t> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:9> ; <var:I2> := <var:I2> * <nat:3> ; <var:I3> := <var:I3> * <nat:5> ; <var:I4> := <var:I4> * <nat:3> ; <var:j> := <var:I4> <var:j> := <var:j> + <var:I3> <var:j> := <var:j> + <var:I2> <var:j> := <var:j> + <var:I1> <var:j> := <var:j> + <var:I0> \end{verbatim} Allow ( with some positive coefficients $ <var:g> $ ) that $ <var:t> = <var:g> $ before evaluating this series of commands it must be that we have $ <var:j> = <nat:3> * <var:g> ^ <nat:4> + <nat:5> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:1> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives : \begin{eqnarray} \{ <var:t> = <var:g> \} \\ <var:I1> := <var:t> ; \\ \{ <var:t> = <var:g> \land <var:I1> = <var:g> \} \\ <var:I2> := <var:I1> * <var:t> ; \\ \{ <var:t> = <var:g> \land <var:I1> = <var:g> \land <var:I2> = <var:g> ^ <nat:2> \} \\ <var:I3> := <var:I2> * <var:t> ; \\ \{ <var:t> = <var:g> \land <var:I1> = <var:g> \land <var:I2> = <var:g> ^ <nat:2> \land <var:I3> = <var:g> ^ <nat:3> \} \\ <var:I4> := <var:I3> * <var:t> ; \\ \{ <var:t> = <var:g> \land <var:I1> = <var:g> \land <var:I2> = <var:g> ^ <nat:2> \land <var:I3> = <var:g> ^ <nat:3> \land <var:I4> = <var:g> ^ <nat:4> \} \\ <var:I0> := <nat:1> ; \\ \{ <var:t> = <var:g> \land <var:I1> = <var:g> \land <var:I2> = <var:g> ^ <nat:2> \land <var:I3> = <var:g> ^ <nat:3> \land <var:I4> = <var:g> ^ <nat:4> \land <var:I0> = <nat:1> \} \\ <var:I1> := <var:I1> * <nat:9> ; \\ \{ <var:t> = <var:g> \land <var:I1> = <nat:9> \times <var:g> \land <var:I2> = <var:g> ^ <nat:2> \land <var:I3> = <var:g> ^ <nat:3> \land <var:I4> = <var:g> ^ <nat:4> \land <var:I0> = <nat:1> \} \\ <var:I2> := <var:I2> * <nat:3> ; \\ \{ <var:t> = <var:g> \land <var:I1> = <nat:9> \times <var:g> \land <var:I2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:I3> = <var:g> ^ <nat:3> \land <var:I4> = <var:g> ^ <nat:4> \land <var:I0> = <nat:1> \} \\ <var:I3> := <var:I3> * <nat:5> ; \\ \{ <var:t> = <var:g> \land <var:I1> = <nat:9> \times <var:g> \land <var:I2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:I3> = <nat:5> \times <var:g> ^ <nat:3> \land <var:I4> = <var:g> ^ <nat:4> \land <var:I0> = <nat:1> \} \\ <var:I4> := <var:I4> * <nat:3> ; \\ \{ <var:t> = <var:g> \land <var:I1> = <nat:9> \times <var:g> \land <var:I2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:I3> = <nat:5> \times <var:g> ^ <nat:3> \land <var:I4> = <nat:3> \times <var:g> ^ <nat:4> \land <var:I0> = <nat:1> \} \\ <var:j> := <var:I4> \\ \{ <var:t> = <var:g> \land <var:I1> = <nat:9> \times <var:g> \land <var:I2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:I3> = <nat:5> \times <var:g> ^ <nat:3> \land <var:I0> = <nat:1> \land <var:j> = <nat:3> \times <var:g> ^ <nat:4> \} \\ <var:j> := <var:j> + <var:I3> \\ \{ <var:t> = <var:g> \land <var:I1> = <nat:9> \times <var:g> \land <var:I2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:I0> = <nat:1> \land <var:j> = <nat:3> \times <var:g> ^ <nat:4> + <nat:5> \times <var:g> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:I2> \\ \{ <var:t> = <var:g> \land <var:I1> = <nat:9> \times <var:g> \land <var:I0> = <nat:1> \land <var:j> = <nat:3> \times <var:g> ^ <nat:4> + <nat:5> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:I1> \\ \{ <var:t> = <var:g> \land <var:I0> = <nat:1> \land <var:j> = <nat:3> \times <var:g> ^ <nat:4> + <nat:5> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:9> \times <var:g> \} \\ <var:j> := <var:j> + <var:I0> \\ \{ <var:t> = <var:g> \land <var:j> = <nat:3> \times <var:g> ^ <nat:4> + <nat:5> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:9> \times <var:g> + <nat:1> \} \end{eqnarray} Thus , this list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <var:I4> : string := " <var:I4> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:t> = <var:g> }} <var:I1> := <var:t> ; <var:I2> := <var:I1> * <var:t> ; <var:I3> := <var:I2> * <var:t> ; <var:I4> := <var:I3> * <var:t> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:9> ; <var:I2> := <var:I2> * <nat:3> ; <var:I3> := <var:I3> * <nat:5> ; <var:I4> := <var:I4> * <nat:3> ; <var:j> := <var:I4> <var:j> := <var:j> + <var:I3> <var:j> := <var:j> + <var:I2> <var:j> := <var:j> + <var:I1> <var:j> := <var:j> + <var:I0> {{ <var:j> = <nat:3> * <var:g> ^ <nat:4> + <nat:5> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:I1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:I1> = <var:g> /\ <var:I2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:I1> = <var:g> /\ <var:I2> = <var:g> ^ <nat:2> /\ <var:I3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:I1> = <var:g> /\ <var:I2> = <var:g> ^ <nat:2> /\ <var:I3> = <var:g> ^ <nat:3> /\ <var:I4> = <var:g> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:I1> = <var:g> /\ <var:I2> = <var:g> ^ <nat:2> /\ <var:I3> = <var:g> ^ <nat:3> /\ <var:I4> = <var:g> ^ <nat:4> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:I1> = <nat:9> * <var:g> /\ <var:I2> = <var:g> ^ <nat:2> /\ <var:I3> = <var:g> ^ <nat:3> /\ <var:I4> = <var:g> ^ <nat:4> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:I1> = <nat:9> * <var:g> /\ <var:I2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:I3> = <var:g> ^ <nat:3> /\ <var:I4> = <var:g> ^ <nat:4> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:I1> = <nat:9> * <var:g> /\ <var:I2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:I3> = <nat:5> * <var:g> ^ <nat:3> /\ <var:I4> = <var:g> ^ <nat:4> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:I1> = <nat:9> * <var:g> /\ <var:I2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:I3> = <nat:5> * <var:g> ^ <nat:3> /\ <var:I4> = <nat:3> * <var:g> ^ <nat:4> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:I1> = <nat:9> * <var:g> /\ <var:I2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:I3> = <nat:5> * <var:g> ^ <nat:3> /\ <var:I0> = <nat:1> /\ <var:j> = <nat:3> * <var:g> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:I1> = <nat:9> * <var:g> /\ <var:I2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:I0> = <nat:1> /\ <var:j> = <nat:3> * <var:g> ^ <nat:4> + <nat:5> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:I1> = <nat:9> * <var:g> /\ <var:I0> = <nat:1> /\ <var:j> = <nat:3> * <var:g> ^ <nat:4> + <nat:5> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:I0> = <nat:1> /\ <var:j> = <nat:3> * <var:g> ^ <nat:4> + <nat:5> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:g> /\ <var:j> = <nat:3> * <var:g> ^ <nat:4> + <nat:5> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 