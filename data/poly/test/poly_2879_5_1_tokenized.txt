\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:V1> := <var:q> ; <var:V0> := <nat:6> ; <var:V1> := <var:V1> * <nat:2> ; <var:J> := <var:V1> <var:J> := <var:J> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Given that $ <var:q> = <var:W> $ before interpreting this set of commands , it holds that we have $ <var:J> = <nat:2> \times <var:W> + <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions is shown through standard Hoare logic . Moving onward , we see \[ \begin{tabular} {rcl} \{ <var:q> = <var:W> \} & <var:V1> := <var:q> & \{ <var:q> = <var:W> \land <var:V1> = <var:W> \} \\ \{ <var:q> = <var:W> \land <var:V1> = <var:W> \} & <var:V0> := <nat:6> & \{ <var:q> = <var:W> \land <var:V1> = <var:W> \land <var:V0> = <nat:6> \} \end{tabular} This is given through the variable binding scheme given in typical Hoare techniques . Taking a look at the proceeding command seen in our segment of code , \[ \begin{tabular} {rcl} \{ <var:q> = <var:W> \} & <var:V1> := <var:q> & \{ <var:q> = <var:W> \land <var:V1> = <var:W> \} \end{tabular} This is shown through the assignment law found in Hoare reasoning . Paying attention to the subsequent lines in our list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:q> = <var:W> \} & <var:V1> := <var:q> & \{ <var:q> = <var:W> \land <var:V1> = <var:W> \} \\ \{ <var:q> = <var:W> \land <var:V1> = <var:W> \} & <var:V0> := <nat:6> & \{ <var:q> = <var:W> \land <var:V1> = <var:W> \land <var:V0> = <nat:6> \} \end{tabular} This is ensured using the environment update inference rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:q> ; <var:V0> := <nat:6> ; <var:V1> := <var:V1> * <nat:2> ; <var:J> := <var:V1> <var:J> := <var:J> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:q> = <var:W> }} <def:poly> {{ <var:J> = <nat:2> * <var:W> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:V1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:V1> = <var:W> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:V1> = <nat:2> * <var:W> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:V0> = <nat:6> /\ <var:J> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:J> = <nat:2> * <var:W> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 