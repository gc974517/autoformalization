\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} as \begin{verbatim} <var:g> := <nat:1> ; <var:g> := <nat:1> + <var:g> * <var:C> ; <var:g> := <var:g> * <var:C> ; <var:g> := <nat:2> + <var:g> * <var:C> ; <var:g> := <nat:1> + <var:g> * <var:C> ; <var:g> := <nat:1> + <var:g> * <var:C> ; <var:g> := <nat:2> + <var:g> * <var:C> ; <var:g> := <nat:3> + <var:g> * <var:C> ; <var:g> := <nat:4> + <var:g> * <var:C> \end{verbatim} Assume that $ <var:C> = <var:y> $ ( letting whole numbers $ <var:y> $ ) ahead of the evaluation of our series of instructions then we see $ <var:g> = <nat:1> \times <var:y> ^ <nat:8> + <nat:1> \times <var:y> ^ <nat:7> + <nat:2> \times <var:y> ^ <nat:5> + <nat:1> \times <var:y> ^ <nat:4> + <nat:1> \times <var:y> ^ <nat:3> + <nat:2> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:4> $ once series of commands is done executing . \end{theorem} \begin{proof} The way to prove correctness for this code segment is shown by usual Hoare logic . Stepping forward , \begin{verbatim} { <var:C> = <var:y> } <var:g> := <nat:1> { <var:C> = <var:y> \land <var:g> = <nat:1> } \end{verbatim} This is sound through the variable binding rule obtained from Hoare techniques . Stepping forward , \begin{verbatim} { <var:C> = <var:y> } <var:g> := <nat:1> { <var:C> = <var:y> \land <var:g> = <nat:1> } { <var:C> = <var:y> \land <var:g> = <nat:1> } <var:g> := <nat:1> + <var:g> * <var:C> { <var:C> = <var:y> \land <var:g> = <nat:1> * <var:y> + <nat:1> } { <var:C> = <var:y> \land <var:g> = <nat:1> * <var:y> + <nat:1> } <var:g> := <var:g> * <var:C> { <var:C> = <var:y> \land <var:g> = <nat:1> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + } { <var:C> = <var:y> \land <var:g> = <nat:1> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + } <var:g> := <nat:2> + <var:g> * <var:C> { <var:C> = <var:y> \land <var:g> = <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> } { <var:C> = <var:y> \land <var:g> = <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> } <var:g> := <nat:1> + <var:g> * <var:C> { <var:C> = <var:y> \land <var:g> = <nat:1> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> + <nat:1> } { <var:C> = <var:y> \land <var:g> = <nat:1> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> + <nat:1> } <var:g> := <nat:1> + <var:g> * <var:C> { <var:C> = <var:y> \land <var:g> = <nat:1> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:1> } \end{verbatim} This is guaranteed by the variable update inference rule from usual Hoare techniques . Stepping forward , \begin{verbatim} { <var:C> = <var:y> } <var:g> := <nat:1> { <var:C> = <var:y> \land <var:g> = <nat:1> } \end{verbatim} This is guaranteed by the variable update inference rule given by typical Hoare reasoning . Jumping to the upcoming statement found in our program , we see \begin{verbatim} { <var:C> = <var:y> } <var:g> := <nat:1> { <var:C> = <var:y> \land <var:g> = <nat:1> } \end{verbatim} This is given using the environment update law defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:C> = <var:y> }} <var:g> := <nat:1> ; <var:g> := <nat:1> + <var:g> * <var:C> ; <var:g> := <var:g> * <var:C> ; <var:g> := <nat:2> + <var:g> * <var:C> ; <var:g> := <nat:1> + <var:g> * <var:C> ; <var:g> := <nat:1> + <var:g> * <var:C> ; <var:g> := <nat:2> + <var:g> * <var:C> ; <var:g> := <nat:3> + <var:g> * <var:C> ; <var:g> := <nat:4> + <var:g> * <var:C> {{ <var:g> = <nat:1> * <var:y> ^ <nat:8> + <nat:1> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:g> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:g> = <nat:1> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:g> = <nat:1> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:g> = <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:g> = <nat:1> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:g> = <nat:1> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:g> = <nat:1> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:g> = <nat:1> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:g> = <nat:1> * <var:y> ^ <nat:8> + <nat:1> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 