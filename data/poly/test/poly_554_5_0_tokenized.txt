\begin{document} \begin{theorem} Define a code segment : \begin{verbatim} <var:G0> := <nat:9> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:t> ; <var:p> := <var:G1> ; <var:p> := <var:p> + <var:G0> \end{verbatim} Assuming that we have $ <var:t> = <var:q> $ before the execution of this series of instructions it must be that we have $ <var:p> = <nat:3> \times <var:q> + <nat:9> $ when set of commands is done . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions is clear by standard Hoare logic . Considering the following lines contained in the set of instructions , we see \verb | { <var:t> = <var:q> } <var:G0> := <nat:9> { <var:t> = <var:q> \land <var:G0> = <nat:9> } | , \verb | { <var:t> = <var:q> \land <var:G0> = <nat:9> } <var:G1> := <nat:3> { <var:t> = <var:q> \land <var:G0> = <nat:9> \land <var:G1> = <nat:3> } | , \verb | { <var:t> = <var:q> \land <var:G0> = <nat:9> \land <var:G1> = <nat:3> } <var:G1> := <var:G1> * <var:t> { <var:t> = <var:q> \land <var:G0> = <nat:9> \land <var:G1> = <nat:3> \times <var:q> } | , \verb | { <var:t> = <var:q> \land <var:G0> = <nat:9> \land <var:G1> = <nat:3> \times <var:q> } <var:p> := <var:G1> { <var:t> = <var:q> \land <var:G0> = <nat:9> \land <var:p> = <nat:3> \times <var:q> } | and \verb | { <var:t> = <var:q> \land <var:G0> = <nat:9> \land <var:p> = <nat:3> \times <var:q> } <var:p> := <var:p> + <var:G0{ <var:t> = <var:q> \land <var:p> = <nat:3> \times <var:q> + <nat:9> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:t> = <var:q> }} <var:G0> := <nat:9> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:t> ; <var:p> := <var:G1> ; <var:p> := <var:p> + <var:G0> {{ <var:p> = <nat:3> * <var:q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:G0> = <nat:9> /\ <var:p> = <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:q> /\ <var:p> = <nat:3> * <var:q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 