\begin{document} \begin{theorem} Define the following list of instructions such that \begin{verbatim} <var:y1> := <var:e> ; <var:y2> := <var:y1> * <var:e> ; <var:y3> := <var:y2> * <var:e> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:7> ; <var:y2> := <var:y2> * <nat:6> ; <var:y3> := <var:y3> * <nat:5> ; <var:z> := <var:y3> <var:z> := <var:z> + <var:y2> <var:z> := <var:z> + <var:y1> <var:z> := <var:z> + <var:y0> \end{verbatim} Assume $ <var:e> = <var:S> $ before running the series of instructions then $ <var:z> = <nat:5> \times <var:S> ^ <nat:3> + <nat:6> \times <var:S> ^ <nat:2> + <nat:7> \times <var:S> + <nat:9> $ when segment of code has exited . \end{theorem} \begin{proof} The argument for the set of commands can be demonstrated with usual Hoare reasoning . Moving forward , we have \begin{eqnarray} \{ <var:e> = <var:S> \} \, <var:y1> := <var:e> \, \{ <var:e> = <var:S> \land <var:y1> = <var:S> \} \\ \{ <var:e> = <var:S> \land <var:y1> = <var:S> \} \, <var:y2> := <var:y1> * <var:e> \, \{ <var:e> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \} \\ \{ <var:e> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \} \, <var:y3> := <var:y2> * <var:e> \, \{ <var:e> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \} \\ \{ <var:e> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \} \, <var:y0> := <nat:9> \, \{ <var:e> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y0> = <nat:9> \} \\ \{ <var:e> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y0> = <nat:9> \} \, <var:y1> := <var:y1> * <nat:7> \, \{ <var:e> = <var:S> \land <var:y1> = <nat:7> \times <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y0> = <nat:9> \} \\ \{ <var:e> = <var:S> \land <var:y1> = <nat:7> \times <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y0> = <nat:9> \} \, <var:y2> := <var:y2> * <nat:6> \, \{ <var:e> = <var:S> \land <var:y1> = <nat:7> \times <var:S> \land <var:y2> = <nat:6> \times <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y0> = <nat:9> \} \\ \{ <var:e> = <var:S> \land <var:y1> = <nat:7> \times <var:S> \land <var:y2> = <nat:6> \times <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y0> = <nat:9> \} \, <var:y3> := <var:y3> * <nat:5> \, \{ <var:e> = <var:S> \land <var:y1> = <nat:7> \times <var:S> \land <var:y2> = <nat:6> \times <var:S> ^ <nat:2> \land <var:y3> = <nat:5> \times <var:S> ^ <nat:3> \land <var:y0> = <nat:9> \} \\ \{ <var:e> = <var:S> \land <var:y1> = <nat:7> \times <var:S> \land <var:y2> = <nat:6> \times <var:S> ^ <nat:2> \land <var:y3> = <nat:5> \times <var:S> ^ <nat:3> \land <var:y0> = <nat:9> \} \, <var:z> := <var:y3\, \{ <var:e> = <var:S> \land <var:y1> = <nat:7> \times <var:S> \land <var:y2> = <nat:6> \times <var:S> ^ <nat:2> \land <var:y0> = <nat:9> \land <var:z> = <nat:5> \times <var:S> ^ <nat:3> \} \end{eqnarray} Advancing on , we have \begin{eqnarray} \{ <var:e> = <var:S> \} \, <var:y1> := <var:e> \, \{ <var:e> = <var:S> \land <var:y1> = <var:S> \} \end{eqnarray} Observing the upcoming command found in our series of commands , \begin{eqnarray} \{ <var:e> = <var:S> \} \, <var:y1> := <var:e> \, \{ <var:e> = <var:S> \land <var:y1> = <var:S> \} \end{eqnarray} This is guaranteed with the variable update law found in standard Hoare reasoning . Observing the upcoming command contained in our list of instructions , we see \begin{eqnarray} \{ <var:e> = <var:S> \} \, <var:y1> := <var:e> \, \{ <var:e> = <var:S> \land <var:y1> = <var:S> \} \end{eqnarray} This is rigorously given using the scheme defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:e> = <var:S> }} <var:y1> := <var:e> ; <var:y2> := <var:y1> * <var:e> ; <var:y3> := <var:y2> * <var:e> ; <var:y0> := <nat:9> ; <var:y1> := <var:y1> * <nat:7> ; <var:y2> := <var:y2> * <nat:6> ; <var:y3> := <var:y3> * <nat:5> ; <var:z> := <var:y3> <var:z> := <var:z> + <var:y2> <var:z> := <var:z> + <var:y1> <var:z> := <var:z> + <var:y0> {{ <var:z> = <nat:5> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:S> /\ <var:y1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:S> /\ <var:y1> = <var:S> /\ <var:y2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:S> /\ <var:y1> = <var:S> /\ <var:y2> = <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:S> /\ <var:y1> = <var:S> /\ <var:y2> = <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:S> /\ <var:y1> = <nat:7> * <var:S> /\ <var:y2> = <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:S> /\ <var:y1> = <nat:7> * <var:S> /\ <var:y2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:S> /\ <var:y1> = <nat:7> * <var:S> /\ <var:y2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:y3> = <nat:5> * <var:S> ^ <nat:3> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:S> /\ <var:y1> = <nat:7> * <var:S> /\ <var:y2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:y0> = <nat:9> /\ <var:z> = <nat:5> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:S> /\ <var:y1> = <nat:7> * <var:S> /\ <var:y0> = <nat:9> /\ <var:z> = <nat:5> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:S> /\ <var:y0> = <nat:9> /\ <var:z> = <nat:5> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> + <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:S> /\ <var:z> = <nat:5> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 