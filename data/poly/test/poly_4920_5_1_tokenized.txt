\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:l1> := <var:y> ; <var:l0> := <nat:1> ; <var:l1> := <var:l1> * <nat:3> ; <var:a> := <var:l1> <var:a> := <var:a> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:y> = <var:B> $ prior to the evaluation of the code segment , then $ <var:a> = <nat:3> * <var:B> + <nat:1> $ when list of instructions exits . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions can be seen by Hoare techniques . Honing in on the subsequent lines of codefound in our code segment , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:B> \} & <var:l1> := <var:y> & \{ <var:y> = <var:B> \land <var:l1> = <var:B> \} \\ \{ <var:y> = <var:B> \land <var:l1> = <var:B> \} & <var:l0> := <nat:1> & \{ <var:y> = <var:B> \land <var:l1> = <var:B> \land <var:l0> = <nat:1> \} \\ \{ <var:y> = <var:B> \land <var:l1> = <var:B> \land <var:l0> = <nat:1> \} & <var:l1> := <var:l1> * <nat:3> & \{ <var:y> = <var:B> \land <var:l1> = <nat:3> \cdot <var:B> \land <var:l0> = <nat:1> \} \\ \{ <var:y> = <var:B> \land <var:l1> = <nat:3> \cdot <var:B> \land <var:l0> = <nat:1> \} & <var:a> := <var:l1& \{ <var:y> = <var:B> \land <var:l0> = <nat:1> \land <var:a> = <nat:3> \cdot <var:B> \} \end{tabular} This is guaranteed through the environment update rule found in standard Hoare reasoning . Immediately following , we have \[ \begin{tabular} {rcl} \{ <var:y> = <var:B> \} & <var:l1> := <var:y> & \{ <var:y> = <var:B> \land <var:l1> = <var:B> \} \end{tabular} This is shown by the scheme of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l1> := <var:y> ; <var:l0> := <nat:1> ; <var:l1> := <var:l1> * <nat:3> ; <var:a> := <var:l1> <var:a> := <var:a> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:y> = <var:B> }} <def:poly> {{ <var:a> = <nat:3> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:l1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:l1> = <var:B> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:l1> = <nat:3> * <var:B> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:l0> = <nat:1> /\ <var:a> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:a> = <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 