\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:8> ; <var:e1> := <nat:8> ; <var:e1> := <var:e1> * <var:P> ; <var:e2> := <nat:7> ; <var:e2> := <var:e2> * <var:P> ; <var:e2> := <var:e2> * <var:P> ; <var:e3> := <nat:2> ; <var:e3> := <var:e3> * <var:P> ; <var:e3> := <var:e3> * <var:P> ; <var:e3> := <var:e3> * <var:P> ; <var:Q> := <var:e3> ; <var:Q> := <var:Q> + <var:e2> ; <var:Q> := <var:Q> + <var:e1> ; <var:Q> := <var:Q> + <var:e0> \end{verbatim} Allow , letting positive integers $ <var:q> $ , $ <var:P> = <var:q> $ prior to the execution of this list of commands , it follows that $ <var:Q> = <nat:2> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:8> $ when series of commands finishes . \end{theorem} \begin{proof} The proof of the series of commands can be accomplished with this decorated program . \begin{eqnarray} \{ <var:P> = <var:q> \} \\ <var:e0> := <nat:8> ; \\ \{ <var:P> = <var:q> \land <var:e0> = <nat:8> \} \\ <var:e1> := <nat:8> ; \\ \{ <var:P> = <var:q> \land <var:e0> = <nat:8> \land <var:e1> = <nat:8> \} \\ <var:e1> := <var:e1> * <var:P> ; \\ \{ <var:P> = <var:q> \land <var:e0> = <nat:8> \land <var:e1> = <nat:8> * <var:q> \} \\ <var:e2> := <nat:7> ; \\ \{ <var:P> = <var:q> \land <var:e0> = <nat:8> \land <var:e1> = <nat:8> * <var:q> \land <var:e2> = <nat:7> \} \\ <var:e2> := <var:e2> * <var:P> ; \\ \{ <var:P> = <var:q> \land <var:e0> = <nat:8> \land <var:e1> = <nat:8> * <var:q> \land <var:e2> = <nat:7> * <var:q> \} \\ <var:e2> := <var:e2> * <var:P> ; \\ \{ <var:P> = <var:q> \land <var:e0> = <nat:8> \land <var:e1> = <nat:8> * <var:q> \land <var:e2> = <nat:7> * <var:q> ^ <nat:2> \} \\ <var:e3> := <nat:2> ; \\ \{ <var:P> = <var:q> \land <var:e0> = <nat:8> \land <var:e1> = <nat:8> * <var:q> \land <var:e2> = <nat:7> * <var:q> ^ <nat:2> \land <var:e3> = <nat:2> \} \\ <var:e3> := <var:e3> * <var:P> ; \\ \{ <var:P> = <var:q> \land <var:e0> = <nat:8> \land <var:e1> = <nat:8> * <var:q> \land <var:e2> = <nat:7> * <var:q> ^ <nat:2> \land <var:e3> = <nat:2> * <var:q> \} \\ <var:e3> := <var:e3> * <var:P> ; \\ \{ <var:P> = <var:q> \land <var:e0> = <nat:8> \land <var:e1> = <nat:8> * <var:q> \land <var:e2> = <nat:7> * <var:q> ^ <nat:2> \land <var:e3> = <nat:2> * <var:q> ^ <nat:2> \} \\ <var:e3> := <var:e3> * <var:P> ; \\ \{ <var:P> = <var:q> \land <var:e0> = <nat:8> \land <var:e1> = <nat:8> * <var:q> \land <var:e2> = <nat:7> * <var:q> ^ <nat:2> \land <var:e3> = <nat:2> * <var:q> ^ <nat:3> \} \\ <var:Q> := <var:e3> ; \\ \{ <var:P> = <var:q> \land <var:e0> = <nat:8> \land <var:e1> = <nat:8> * <var:q> \land <var:e2> = <nat:7> * <var:q> ^ <nat:2> \land <var:Q> = <nat:2> * <var:q> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:e2> ; \\ \{ <var:P> = <var:q> \land <var:e0> = <nat:8> \land <var:e1> = <nat:8> * <var:q> \land <var:Q> = <nat:2> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:e1> ; \\ \{ <var:P> = <var:q> \land <var:e0> = <nat:8> \land <var:Q> = <nat:2> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> + <nat:8> * <var:q> \} \\ <var:Q> := <var:Q> + <var:e0> \\ \{ <var:P> = <var:q> \land <var:Q> = <nat:2> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:8> \} \end{eqnarray} The application of standard Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:P> = <var:q> }} <var:e0> := <nat:8> ; <var:e1> := <nat:8> ; <var:e1> := <var:e1> * <var:P> ; <var:e2> := <nat:7> ; <var:e2> := <var:e2> * <var:P> ; <var:e2> := <var:e2> * <var:P> ; <var:e3> := <nat:2> ; <var:e3> := <var:e3> * <var:P> ; <var:e3> := <var:e3> * <var:P> ; <var:e3> := <var:e3> * <var:P> ; <var:Q> := <var:e3> ; <var:Q> := <var:Q> + <var:e2> ; <var:Q> := <var:Q> + <var:e1> ; <var:Q> := <var:Q> + <var:e0> {{ <var:Q> = <nat:2> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:e0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:8> * <var:q> /\ <var:e2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:8> * <var:q> /\ <var:e2> = <nat:7> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:8> * <var:q> /\ <var:e2> = <nat:7> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:8> * <var:q> /\ <var:e2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:e3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:8> * <var:q> /\ <var:e2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:8> * <var:q> /\ <var:e2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:8> * <var:q> /\ <var:e2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:8> * <var:q> /\ <var:e2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:Q> = <nat:2> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:e0> = <nat:8> /\ <var:e1> = <nat:8> * <var:q> /\ <var:Q> = <nat:2> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:e0> = <nat:8> /\ <var:Q> = <nat:2> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> + <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:q> /\ <var:Q> = <nat:2> * <var:q> ^ <nat:3> + <nat:7> * <var:q> ^ <nat:2> + <nat:8> * <var:q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 