\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:J> ; <var:c2> := <nat:1> ; <var:c2> := <var:c2> * <var:J> ; <var:c2> := <var:c2> * <var:J> ; <var:c3> := <nat:8> ; <var:c3> := <var:c3> * <var:J> ; <var:c3> := <var:c3> * <var:J> ; <var:c3> := <var:c3> * <var:J> ; <var:w> := <var:c3> ; <var:w> := <var:w> + <var:c2> ; <var:w> := <var:w> + <var:c1> ; <var:w> := <var:w> + <var:c0> \end{verbatim} Allow that $ <var:J> = <var:I> $ prior to executing the set of commands , it holds that $ <var:w> = <nat:8> \times <var:I> ^ <nat:3> + <nat:1> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:3> $ once list of instructions executes . \end{theorem} \begin{proof} The application of standard Hoare logic results in : \begin{eqnarray} \{ <var:J> = <var:I> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:J> = <var:I> \land <var:c0> = <nat:3> \} \\ <var:c1> := <nat:3> ; \\ \{ <var:J> = <var:I> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \} \\ <var:c1> := <var:c1> * <var:J> ; \\ \{ <var:J> = <var:I> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \cdot <var:I> \} \\ <var:c2> := <nat:1> ; \\ \{ <var:J> = <var:I> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \cdot <var:I> \land <var:c2> = <nat:1> \} \\ <var:c2> := <var:c2> * <var:J> ; \\ \{ <var:J> = <var:I> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \cdot <var:I> \land <var:c2> = <nat:1> \cdot <var:I> \} \\ <var:c2> := <var:c2> * <var:J> ; \\ \{ <var:J> = <var:I> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \cdot <var:I> \land <var:c2> = <nat:1> \cdot <var:I> ^ <nat:2> \} \\ <var:c3> := <nat:8> ; \\ \{ <var:J> = <var:I> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \cdot <var:I> \land <var:c2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:c3> = <nat:8> \} \\ <var:c3> := <var:c3> * <var:J> ; \\ \{ <var:J> = <var:I> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \cdot <var:I> \land <var:c2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:c3> = <nat:8> \cdot <var:I> \} \\ <var:c3> := <var:c3> * <var:J> ; \\ \{ <var:J> = <var:I> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \cdot <var:I> \land <var:c2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:c3> = <nat:8> \cdot <var:I> ^ <nat:2> \} \\ <var:c3> := <var:c3> * <var:J> ; \\ \{ <var:J> = <var:I> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \cdot <var:I> \land <var:c2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:c3> = <nat:8> \cdot <var:I> ^ <nat:3> \} \\ <var:w> := <var:c3> ; \\ \{ <var:J> = <var:I> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \cdot <var:I> \land <var:c2> = <nat:1> \cdot <var:I> ^ <nat:2> \land <var:w> = <nat:8> \cdot <var:I> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:c2> ; \\ \{ <var:J> = <var:I> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \cdot <var:I> \land <var:w> = <nat:8> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:c1> ; \\ \{ <var:J> = <var:I> \land <var:c0> = <nat:3> \land <var:w> = <nat:8> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> \} \\ <var:w> := <var:w> + <var:c0> \\ \{ <var:J> = <var:I> \land <var:w> = <nat:8> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + <nat:3> \} \end{eqnarray} Thusly , the program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:J> = <var:I> }} <var:c0> := <nat:3> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:J> ; <var:c2> := <nat:1> ; <var:c2> := <var:c2> * <var:J> ; <var:c2> := <var:c2> * <var:J> ; <var:c3> := <nat:8> ; <var:c3> := <var:c3> * <var:J> ; <var:c3> := <var:c3> * <var:J> ; <var:c3> := <var:c3> * <var:J> ; <var:w> := <var:c3> ; <var:w> := <var:w> + <var:c2> ; <var:w> := <var:w> + <var:c1> ; <var:w> := <var:w> + <var:c0> {{ <var:w> = <nat:8> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:I> /\ <var:c2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:I> /\ <var:c2> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:I> /\ <var:c2> = <nat:1> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:I> /\ <var:c2> = <nat:1> * <var:I> ^ <nat:2> /\ <var:c3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:I> /\ <var:c2> = <nat:1> * <var:I> ^ <nat:2> /\ <var:c3> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:I> /\ <var:c2> = <nat:1> * <var:I> ^ <nat:2> /\ <var:c3> = <nat:8> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:I> /\ <var:c2> = <nat:1> * <var:I> ^ <nat:2> /\ <var:c3> = <nat:8> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:I> /\ <var:c2> = <nat:1> * <var:I> ^ <nat:2> /\ <var:w> = <nat:8> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:I> /\ <var:w> = <nat:8> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:c0> = <nat:3> /\ <var:w> = <nat:8> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:I> /\ <var:w> = <nat:8> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 