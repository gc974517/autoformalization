\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:2> ; <var:r> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:U> = <var:G> $ --- given $ <var:G> \in \mathbb{N} $ --- prior to the execution of our set of instructions then we see $ <var:r> = <nat:2> $ after series of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:G> \} \\ <var:V0> := <nat:2> ; \\ \{ <var:U> = <var:G> \land <var:V0> = <nat:2> \} \\ <var:r> := <var:V0> \\ \{ <var:U> = <var:G> \land <var:r> = <nat:2> \} \end{eqnarray} Using typical Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:2> ; <var:r> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:U> = <var:G> }} <def:poly> {{ <var:r> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:r> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 