\begin{document} \begin{theorem} Consider a code such that \begin{verbatim} <var:a1> := <var:Y> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:2> ; <var:I> := <var:a1> <var:I> := <var:I> + <var:a0> \end{verbatim} Given that $ <var:Y> = <var:t> $ before running this code it must be that $ <var:I> = <nat:2> * <var:t> + <nat:3> $ when set of commands has finished . \end{theorem} \begin{proof} The method of proof for this series of commands is shown by standard Hoare logic . Taking a look at the upcoming bits of codefound in our series of instructions , we see \begin{eqnarray} \{ <var:Y> = <var:t> \} \, <var:a1> := <var:Y> \, \{ <var:Y> = <var:t> \land <var:a1> = <var:t> \} \\ \{ <var:Y> = <var:t> \land <var:a1> = <var:t> \} \, <var:a0> := <nat:3> \, \{ <var:Y> = <var:t> \land <var:a1> = <var:t> \land <var:a0> = <nat:3> \} \end{eqnarray} This is known to be sound using the scheme obtained from typical Hoare reasoning . Immediately after , we have \begin{eqnarray} \{ <var:Y> = <var:t> \} \, <var:a1> := <var:Y> \, \{ <var:Y> = <var:t> \land <var:a1> = <var:t> \} \\ \{ <var:Y> = <var:t> \land <var:a1> = <var:t> \} \, <var:a0> := <nat:3> \, \{ <var:Y> = <var:t> \land <var:a1> = <var:t> \land <var:a0> = <nat:3> \} \end{eqnarray} Further , \begin{eqnarray} \{ <var:Y> = <var:t> \} \, <var:a1> := <var:Y> \, \{ <var:Y> = <var:t> \land <var:a1> = <var:t> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:Y> = <var:t> }} <var:a1> := <var:Y> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:2> ; <var:I> := <var:a1> <var:I> := <var:I> + <var:a0> {{ <var:I> = <nat:2> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:t> /\ <var:a1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:t> /\ <var:a1> = <var:t> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:t> /\ <var:a1> = <nat:2> * <var:t> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:t> /\ <var:a0> = <nat:3> /\ <var:I> = <nat:2> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:t> /\ <var:I> = <nat:2> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 