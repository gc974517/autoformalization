\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:u> := <nat:3> ; <var:u> := <nat:1> + <var:u> * <var:Z> ; <var:u> := <nat:2> + <var:u> * <var:Z> ; <var:u> := <nat:2> + <var:u> * <var:Z> ; <var:u> := <nat:4> + <var:u> * <var:Z> ; <var:u> := <nat:3> + <var:u> * <var:Z> ; <var:u> := <nat:3> + <var:u> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:Z> = <var:Y> $ before executing the list of commands then we have $ <var:u> = <nat:3> \cdot <var:Y> ^ <nat:6> + <nat:1> \cdot <var:Y> ^ <nat:5> + <nat:2> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:Y> \} \\ <var:u> := <nat:3> ; \\ \{ <var:Z> = <var:Y> \land <var:u> = <nat:3> \} \\ <var:u> := <nat:1> + <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:Y> \land <var:u> = <nat:3> * <var:Y> + <nat:1> \} \\ <var:u> := <nat:2> + <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:Y> \land <var:u> = <nat:3> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:2> \} \\ <var:u> := <nat:2> + <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:Y> \land <var:u> = <nat:3> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> \} \\ <var:u> := <nat:4> + <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:Y> \land <var:u> = <nat:3> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:4> \} \\ <var:u> := <nat:3> + <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:Y> \land <var:u> = <nat:3> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> \} \\ <var:u> := <nat:3> + <var:u> * <var:Z> \\ \{ <var:Z> = <var:Y> \land <var:u> = <nat:3> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> \} \end{eqnarray} Applying Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:3> ; <var:u> := <nat:1> + <var:u> * <var:Z> ; <var:u> := <nat:2> + <var:u> * <var:Z> ; <var:u> := <nat:2> + <var:u> * <var:Z> ; <var:u> := <nat:4> + <var:u> * <var:Z> ; <var:u> := <nat:3> + <var:u> * <var:Z> ; <var:u> := <nat:3> + <var:u> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:Z> = <var:Y> }} <def:poly> {{ <var:u> = <nat:3> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:u> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:u> = <nat:3> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:u> = <nat:3> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:u> = <nat:3> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:u> = <nat:3> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:u> = <nat:3> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:u> = <nat:3> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 