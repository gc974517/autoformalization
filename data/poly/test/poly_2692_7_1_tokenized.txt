\begin{document} \begin{theorem} Let the following program in \emph{Imp} such that \begin{verbatim} <var:B1> := <var:l> ; <var:B2> := <var:B1> * <var:l> ; <var:B3> := <var:B2> * <var:l> ; <var:B0> := <nat:3> ; <var:B3> := <var:B3> * <nat:1> ; <var:V> := <var:B3> <var:V> := <var:V> + <var:B0> \end{verbatim} Assume letting positive numbers $ <var:n> $ $ <var:l> = <var:n> $ prior to evaluating this program it must be that $ <var:V> = <nat:1> \cdot <var:n> ^ <nat:3> + <nat:3> $ after program finishes . \end{theorem} \begin{proof} The course of logic for this segment of code is clear by standard Hoare logic . Taking a look at the next bit of code found in our list of commands , the variable assignmet code \verb | <var:B1> := <var:l> ; | . This command forwards the condition $ \{ <var:l> = <var:n> \} $ to the condition $ \{ <var:l> = <var:n> \land <var:B1> = <var:n> \} $ . This is sound by the assignment rule defined by usual Hoare reasoning . Paying attention to the next bit of code contained in the list of commands , the statement \verb | <var:B2> := <var:B1> * <var:l> ; | . This advances the condition $ \{ <var:l> = <var:n> \land <var:B1> = <var:n> \} $ toward the postcondition $ \{ <var:l> = <var:n> \land <var:B1> = <var:n> \land <var:B2> = <var:n> ^ <nat:2> \} $ . This is guaranteed with the assignment law of typical Hoare reasoning . Moving forward , the command giving $ <var:B2> * <var:l> $ toward $ <var:B3>$ . This statement redefines $ \{ <var:l> = <var:n> \land <var:B1> = <var:n> \land <var:B2> = <var:n> ^ <nat:2> \} $ as the postcondition $ \{ <var:l> = <var:n> \land <var:B1> = <var:n> \land <var:B2> = <var:n> ^ <nat:2> \land <var:B3> = <var:n> ^ <nat:3> \} $ . Moving forward to the next step , the assignment code \verb | <var:B0> := <nat:3> ; | . This transfers $ \{ <var:l> = <var:n> \land <var:B1> = <var:n> \land <var:B2> = <var:n> ^ <nat:2> \land <var:B3> = <var:n> ^ <nat:3> \} $ to the postcondition $ \{ <var:l> = <var:n> \land <var:B1> = <var:n> \land <var:B2> = <var:n> ^ <nat:2> \land <var:B3> = <var:n> ^ <nat:3> \land <var:B0> = <nat:3> \} $ . Taking another step toward the upcoming statement contained in the list of commands , the statement binding $ <var:B3> * <nat:1> $ into $ <var:B3>$ . This transfers the condition $ \{ <var:l> = <var:n> \land <var:B1> = <var:n> \land <var:B2> = <var:n> ^ <nat:2> \land <var:B3> = <var:n> ^ <nat:3> \land <var:B0> = <nat:3> \} $ to the condition $ \{ <var:l> = <var:n> \land <var:B1> = <var:n> \land <var:B2> = <var:n> ^ <nat:2> \land <var:B3> = <nat:1> \cdot <var:n> ^ <nat:3> \land <var:B0> = <nat:3> \} $ . This is guaranteed using the assignment law from typical Hoare techniques . Honing in on the following line of code seen in the program , the variable update command letting $ <var:B3$ as $ <var:V>$ . This forwards $ \{ <var:l> = <var:n> \land <var:B1> = <var:n> \land <var:B2> = <var:n> ^ <nat:2> \land <var:B3> = <nat:1> \cdot <var:n> ^ <nat:3> \land <var:B0> = <nat:3> \} $ toward $ \{ <var:l> = <var:n> \land <var:B1> = <var:n> \land <var:B2> = <var:n> ^ <nat:2> \land <var:B0> = <nat:3> \land <var:V> = <nat:1> \cdot <var:n> ^ <nat:3> \} $ . This is shown to be logically sound by the assignment rule given in typical Hoare techniques . Observing the next piece of code seen in the list of instructions , we have the variable assignmet code yielding $ <var:V> + <var:B0$ into $ <var:V>$ . This moves the condition $ \{ <var:l> = <var:n> \land <var:B1> = <var:n> \land <var:B2> = <var:n> ^ <nat:2> \land <var:B0> = <nat:3> \land <var:V> = <nat:1> \cdot <var:n> ^ <nat:3> \} $ to the postcondition $ \{ <var:l> = <var:n> \land <var:V> = <nat:1> \cdot <var:n> ^ <nat:3> + <nat:3> \} $ . This is known to be sound through the assignment inference rule obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:l> = <var:n> }} <var:B1> := <var:l> ; <var:B2> := <var:B1> * <var:l> ; <var:B3> := <var:B2> * <var:l> ; <var:B0> := <nat:3> ; <var:B3> := <var:B3> * <nat:1> ; <var:V> := <var:B3> <var:V> := <var:V> + <var:B0> {{ <var:V> = <nat:1> * <var:n> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:B1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:B1> = <var:n> /\ <var:B2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:B1> = <var:n> /\ <var:B2> = <var:n> ^ <nat:2> /\ <var:B3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:B1> = <var:n> /\ <var:B2> = <var:n> ^ <nat:2> /\ <var:B3> = <var:n> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:B1> = <var:n> /\ <var:B2> = <var:n> ^ <nat:2> /\ <var:B3> = <nat:1> * <var:n> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:B1> = <var:n> /\ <var:B2> = <var:n> ^ <nat:2> /\ <var:B0> = <nat:3> /\ <var:V> = <nat:1> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:V> = <nat:1> * <var:n> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 