\begin{document} \begin{theorem} Define a set of commands as \begin{verbatim} <var:o0> := <nat:6> ; <var:P> := <var:o0> \end{verbatim} Given it to be that $ <var:E> = <var:c> $ , letting positive coefficients $ <var:c> $ , before the evaluation of our set of instructions , it holds that we have $ <var:P> = <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:c> \} \\ <var:o0> := <nat:6> ; \\ \{ <var:E> = <var:c> \land <var:o0> = <nat:6> \} \end{eqnarray} Furthering running the segment of code gives : \begin{eqnarray} <var:P> := <var:o0> \\ \{ <var:E> = <var:c> \land <var:P> = <nat:6> \} \end{eqnarray} Utilizing usual Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:E> = <var:c> }} <var:o0> := <nat:6> ; <var:P> := <var:o0> {{ <var:P> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:c> /\ <var:P> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 