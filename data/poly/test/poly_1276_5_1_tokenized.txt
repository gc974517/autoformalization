\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:W1> := <var:C> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:2> ; <var:T> := <var:W1> <var:T> := <var:T> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> . Allow it to hold that $ <var:C> = <var:Z> $ ( given all positive coefficients $ <var:Z> $ ) ahead of executing this segment of code it must be that we see $ <var:T> = <nat:2> \times <var:Z> + <nat:1> $ after set of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:Z> \} \\ <var:W1> := <var:C> ; \\ \{ <var:C> = <var:Z> \land <var:W1> = <var:Z> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:C> = <var:Z> \land <var:W1> = <var:Z> \land <var:W0> = <nat:1> \} \\ <var:W1> := <var:W1> * <nat:2> ; \\ \{ <var:C> = <var:Z> \land <var:W1> = <nat:2> \times <var:Z> \land <var:W0> = <nat:1> \} \\ <var:T> := <var:W1> \\ \{ <var:C> = <var:Z> \land <var:W0> = <nat:1> \land <var:T> = <nat:2> \times <var:Z> \} \\ <var:T> := <var:T> + <var:W0> \\ \{ <var:C> = <var:Z> \land <var:T> = <nat:2> \times <var:Z> + <nat:1> \} \end{eqnarray} The application of Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:C> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:2> ; <var:T> := <var:W1> <var:T> := <var:T> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:C> = <var:Z> }} <def:poly> {{ <var:T> = <nat:2> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:W1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:W1> = <var:Z> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:W1> = <nat:2> * <var:Z> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:W0> = <nat:1> /\ <var:T> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:T> = <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 