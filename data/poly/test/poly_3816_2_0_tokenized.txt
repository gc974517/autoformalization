\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:2> ; <var:P> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:x> = <var:p> $ prior to running this series of instructions , it follows that we see $ <var:P> = <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code is demonstrated through usual Hoare reasoning . Stepping forward , we have the assignment line \verb | <var:j0> := <nat:2> ; | . This code advances $ \{ <var:x> = <var:p> \} $ into $ \{ <var:x> = <var:p> \land <var:j0> = <nat:2> \} $ . Keeping momentum , we have the variable assignmet line yielding $ <var:j0$ as $ <var:P>$ . This forwards the precondition $ \{ <var:x> = <var:p> \land <var:j0> = <nat:2> \} $ into the postcondition $ \{ <var:x> = <var:p> \land <var:P> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:2> ; <var:P> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:x> = <var:p> }} <def:poly> {{ <var:P> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:P> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 