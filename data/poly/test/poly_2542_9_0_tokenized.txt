\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:8> ; <var:O1> := <nat:6> ; <var:O1> := <var:O1> * <var:W> ; <var:O2> := <nat:3> ; <var:O2> := <var:O2> * <var:W> ; <var:O2> := <var:O2> * <var:W> ; <var:w> := <var:O2> ; <var:w> := <var:w> + <var:O1> ; <var:w> := <var:w> + <var:O0> \end{verbatim} Assuming $ <var:W> = <var:h> $ ahead of interpreting our segment of code then we see $ <var:w> = <nat:3> \times <var:h> ^ <nat:2> + <nat:6> \times <var:h> + <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of our code can be accomplished with this decorated program . \begin{eqnarray} \{ <var:W> = <var:h> \} \\ <var:O0> := <nat:8> ; \\ \{ <var:W> = <var:h> \land <var:O0> = <nat:8> \} \\ <var:O1> := <nat:6> ; \\ \{ <var:W> = <var:h> \land <var:O0> = <nat:8> \land <var:O1> = <nat:6> \} \end{eqnarray} Allowing the evaluation of our segment of code yields : \begin{eqnarray} <var:O1> := <var:O1> * <var:W> ; \\ \{ <var:W> = <var:h> \land <var:O0> = <nat:8> \land <var:O1> = <nat:6> \cdot <var:h> \} \\ <var:O2> := <nat:3> ; \\ \{ <var:W> = <var:h> \land <var:O0> = <nat:8> \land <var:O1> = <nat:6> \cdot <var:h> \land <var:O2> = <nat:3> \} \\ <var:O2> := <var:O2> * <var:W> ; \\ \{ <var:W> = <var:h> \land <var:O0> = <nat:8> \land <var:O1> = <nat:6> \cdot <var:h> \land <var:O2> = <nat:3> \cdot <var:h> \} \\ <var:O2> := <var:O2> * <var:W> ; \\ \{ <var:W> = <var:h> \land <var:O0> = <nat:8> \land <var:O1> = <nat:6> \cdot <var:h> \land <var:O2> = <nat:3> \cdot <var:h> ^ <nat:2> \} \\ <var:w> := <var:O2> ; \\ \{ <var:W> = <var:h> \land <var:O0> = <nat:8> \land <var:O1> = <nat:6> \cdot <var:h> \land <var:w> = <nat:3> \cdot <var:h> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:O1> ; \\ \{ <var:W> = <var:h> \land <var:O0> = <nat:8> \land <var:w> = <nat:3> \cdot <var:h> ^ <nat:2> + <nat:6> \cdot <var:h> \} \\ <var:w> := <var:w> + <var:O0> \\ \{ <var:W> = <var:h> \land <var:w> = <nat:3> \cdot <var:h> ^ <nat:2> + <nat:6> \cdot <var:h> + <nat:8> \} \end{eqnarray} Using Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:W> = <var:h> }} <var:O0> := <nat:8> ; <var:O1> := <nat:6> ; <var:O1> := <var:O1> * <var:W> ; <var:O2> := <nat:3> ; <var:O2> := <var:O2> * <var:W> ; <var:O2> := <var:O2> * <var:W> ; <var:w> := <var:O2> ; <var:w> := <var:w> + <var:O1> ; <var:w> := <var:w> + <var:O0> {{ <var:w> = <nat:3> * <var:h> ^ <nat:2> + <nat:6> * <var:h> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:6> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:6> * <var:h> /\ <var:O2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:6> * <var:h> /\ <var:O2> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:6> * <var:h> /\ <var:O2> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:6> * <var:h> /\ <var:w> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:O0> = <nat:8> /\ <var:w> = <nat:3> * <var:h> ^ <nat:2> + <nat:6> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:w> = <nat:3> * <var:h> ^ <nat:2> + <nat:6> * <var:h> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 