\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:r1> := <var:C> ; <var:r2> := <var:r1> * <var:C> ; <var:r3> := <var:r2> * <var:C> ; <var:r0> := <nat:6> ; <var:r1> := <var:r1> * <nat:7> ; <var:r3> := <var:r3> * <nat:2> ; <var:y> := <var:r3> <var:y> := <var:y> + <var:r1> <var:y> := <var:y> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:C> = <var:e> $ prior to the evaluation of the set of instructions , then $ <var:y> = <nat:2> \cdot <var:e> ^ <nat:3> + <nat:7> \cdot <var:e> + <nat:6> $ after series of instructions has finished . \end{theorem} \begin{proof} Observe that this decorated segment of code . \begin{eqnarray} \{ <var:C> = <var:e> \} \\ <var:r1> := <var:C> ; \\ \{ <var:C> = <var:e> \land <var:r1> = <var:e> \} \\ <var:r2> := <var:r1> * <var:C> ; \\ \{ <var:C> = <var:e> \land <var:r1> = <var:e> \land <var:r2> = <var:e> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:C> ; \\ \{ <var:C> = <var:e> \land <var:r1> = <var:e> \land <var:r2> = <var:e> ^ <nat:2> \land <var:r3> = <var:e> ^ <nat:3> \} \\ <var:r0> := <nat:6> ; \\ \{ <var:C> = <var:e> \land <var:r1> = <var:e> \land <var:r2> = <var:e> ^ <nat:2> \land <var:r3> = <var:e> ^ <nat:3> \land <var:r0> = <nat:6> \} \\ <var:r1> := <var:r1> * <nat:7> ; \\ \{ <var:C> = <var:e> \land <var:r1> = <nat:7> \times <var:e> \land <var:r2> = <var:e> ^ <nat:2> \land <var:r3> = <var:e> ^ <nat:3> \land <var:r0> = <nat:6> \} \\ <var:r3> := <var:r3> * <nat:2> ; \\ \{ <var:C> = <var:e> \land <var:r1> = <nat:7> \times <var:e> \land <var:r2> = <var:e> ^ <nat:2> \land <var:r3> = <nat:2> \times <var:e> ^ <nat:3> \land <var:r0> = <nat:6> \} \\ <var:y> := <var:r3> \\ \{ <var:C> = <var:e> \land <var:r1> = <nat:7> \times <var:e> \land <var:r2> = <var:e> ^ <nat:2> \land <var:r0> = <nat:6> \land <var:y> = <nat:2> \times <var:e> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:r1> \\ \{ <var:C> = <var:e> \land <var:r0> = <nat:6> \land <var:y> = <nat:2> \times <var:e> ^ <nat:3> + <nat:7> \times <var:e> \} \\ <var:y> := <var:y> + <var:r0> \\ \{ <var:C> = <var:e> \land <var:y> = <nat:2> \times <var:e> ^ <nat:3> + <nat:7> \times <var:e> + <nat:6> \} \end{eqnarray} Allowing running this segment of code returns : \begin{eqnarray} \end{eqnarray} The application of usual Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:C> ; <var:r2> := <var:r1> * <var:C> ; <var:r3> := <var:r2> * <var:C> ; <var:r0> := <nat:6> ; <var:r1> := <var:r1> * <nat:7> ; <var:r3> := <var:r3> * <nat:2> ; <var:y> := <var:r3> <var:y> := <var:y> + <var:r1> <var:y> := <var:y> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:C> = <var:e> }} <def:poly> {{ <var:y> = <nat:2> * <var:e> ^ <nat:3> + <nat:7> * <var:e> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:r1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:r1> = <var:e> /\ <var:r2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:r1> = <var:e> /\ <var:r2> = <var:e> ^ <nat:2> /\ <var:r3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:r1> = <var:e> /\ <var:r2> = <var:e> ^ <nat:2> /\ <var:r3> = <var:e> ^ <nat:3> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:r1> = <nat:7> * <var:e> /\ <var:r2> = <var:e> ^ <nat:2> /\ <var:r3> = <var:e> ^ <nat:3> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:r1> = <nat:7> * <var:e> /\ <var:r2> = <var:e> ^ <nat:2> /\ <var:r3> = <nat:2> * <var:e> ^ <nat:3> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:r1> = <nat:7> * <var:e> /\ <var:r2> = <var:e> ^ <nat:2> /\ <var:r0> = <nat:6> /\ <var:y> = <nat:2> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:r0> = <nat:6> /\ <var:y> = <nat:2> * <var:e> ^ <nat:3> + <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:e> /\ <var:y> = <nat:2> * <var:e> ^ <nat:3> + <nat:7> * <var:e> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 