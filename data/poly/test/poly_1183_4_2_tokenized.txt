\begin{document} \begin{theorem} Consider the following list of instructions such that \begin{verbatim} <var:G> := <nat:4> ; <var:G> := <nat:1> + <var:G> * <var:i> ; <var:G> := <var:G> * <var:i> ; <var:G> := <nat:2> + <var:G> * <var:i> \end{verbatim} Allowing $ <var:i> = <var:X> $ --- taking positive integers $ <var:X> $ --- prior to interpreting the list of commands , it holds that we see $ <var:G> = <nat:4> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:2> $ when list of commands executes . \end{theorem} \begin{proof} Let this decorated code segment . \begin{eqnarray} \{ <var:i> = <var:X> \} \\ <var:G> := <nat:4> ; \\ \{ <var:i> = <var:X> \land <var:G> = <nat:4> \} \\ <var:G> := <nat:1> + <var:G> * <var:i> ; \\ \{ <var:i> = <var:X> \land <var:G> = <nat:4> * <var:X> + <nat:1> \} \\ <var:G> := <var:G> * <var:i> ; \\ \{ <var:i> = <var:X> \land <var:G> = <nat:4> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + \} \\ <var:G> := <nat:2> + <var:G> * <var:i> \\ \{ <var:i> = <var:X> \land <var:G> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> \} \end{eqnarray} Using Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:i> = <var:X> }} <var:G> := <nat:4> ; <var:G> := <nat:1> + <var:G> * <var:i> ; <var:G> := <var:G> * <var:i> ; <var:G> := <nat:2> + <var:G> * <var:i> {{ <var:G> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:X> /\ <var:G> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:X> /\ <var:G> = <nat:4> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:X> /\ <var:G> = <nat:4> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:X> /\ <var:G> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 