\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:F1> := <var:D> ; <var:F2> := <var:F1> * <var:D> ; <var:F3> := <var:F2> * <var:D> ; <var:F4> := <var:F3> * <var:D> ; <var:F0> := <nat:5> ; <var:F1> := <var:F1> * <nat:2> ; <var:F2> := <var:F2> * <nat:5> ; <var:F3> := <var:F3> * <nat:3> ; <var:F4> := <var:F4> * <nat:6> ; <var:e> := <var:F4> <var:e> := <var:e> + <var:F3> <var:e> := <var:e> + <var:F2> <var:e> := <var:e> + <var:F1> <var:e> := <var:e> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> . Assume ( for some whole numbers $ <var:z> $ ) $ <var:D> = <var:z> $ before the evaluation of this list of commands it must be that $ <var:e> = <nat:6> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:5> $ when code has exited . \end{theorem} \begin{proof} The flow of logic for our list of instructions is demonstrated through this decorated program . \begin{eqnarray} \{ <var:D> = <var:z> \} \\ <var:F1> := <var:D> ; \\ \{ <var:D> = <var:z> \land <var:F1> = <var:z> \} \\ <var:F2> := <var:F1> * <var:D> ; \\ \{ <var:D> = <var:z> \land <var:F1> = <var:z> \land <var:F2> = <var:z> ^ <nat:2> \} \\ <var:F3> := <var:F2> * <var:D> ; \\ \{ <var:D> = <var:z> \land <var:F1> = <var:z> \land <var:F2> = <var:z> ^ <nat:2> \land <var:F3> = <var:z> ^ <nat:3> \} \\ <var:F4> := <var:F3> * <var:D> ; \\ \{ <var:D> = <var:z> \land <var:F1> = <var:z> \land <var:F2> = <var:z> ^ <nat:2> \land <var:F3> = <var:z> ^ <nat:3> \land <var:F4> = <var:z> ^ <nat:4> \} \\ <var:F0> := <nat:5> ; \\ \{ <var:D> = <var:z> \land <var:F1> = <var:z> \land <var:F2> = <var:z> ^ <nat:2> \land <var:F3> = <var:z> ^ <nat:3> \land <var:F4> = <var:z> ^ <nat:4> \land <var:F0> = <nat:5> \} \\ <var:F1> := <var:F1> * <nat:2> ; \\ \{ <var:D> = <var:z> \land <var:F1> = <nat:2> * <var:z> \land <var:F2> = <var:z> ^ <nat:2> \land <var:F3> = <var:z> ^ <nat:3> \land <var:F4> = <var:z> ^ <nat:4> \land <var:F0> = <nat:5> \} \\ <var:F2> := <var:F2> * <nat:5> ; \\ \{ <var:D> = <var:z> \land <var:F1> = <nat:2> * <var:z> \land <var:F2> = <nat:5> * <var:z> ^ <nat:2> \land <var:F3> = <var:z> ^ <nat:3> \land <var:F4> = <var:z> ^ <nat:4> \land <var:F0> = <nat:5> \} \\ <var:F3> := <var:F3> * <nat:3> ; \\ \{ <var:D> = <var:z> \land <var:F1> = <nat:2> * <var:z> \land <var:F2> = <nat:5> * <var:z> ^ <nat:2> \land <var:F3> = <nat:3> * <var:z> ^ <nat:3> \land <var:F4> = <var:z> ^ <nat:4> \land <var:F0> = <nat:5> \} \\ <var:F4> := <var:F4> * <nat:6> ; \\ \{ <var:D> = <var:z> \land <var:F1> = <nat:2> * <var:z> \land <var:F2> = <nat:5> * <var:z> ^ <nat:2> \land <var:F3> = <nat:3> * <var:z> ^ <nat:3> \land <var:F4> = <nat:6> * <var:z> ^ <nat:4> \land <var:F0> = <nat:5> \} \\ <var:e> := <var:F4> \\ \{ <var:D> = <var:z> \land <var:F1> = <nat:2> * <var:z> \land <var:F2> = <nat:5> * <var:z> ^ <nat:2> \land <var:F3> = <nat:3> * <var:z> ^ <nat:3> \land <var:F0> = <nat:5> \land <var:e> = <nat:6> * <var:z> ^ <nat:4> \} \\ <var:e> := <var:e> + <var:F3> \\ \{ <var:D> = <var:z> \land <var:F1> = <nat:2> * <var:z> \land <var:F2> = <nat:5> * <var:z> ^ <nat:2> \land <var:F0> = <nat:5> \land <var:e> = <nat:6> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> \} \\ <var:e> := <var:e> + <var:F2> \\ \{ <var:D> = <var:z> \land <var:F1> = <nat:2> * <var:z> \land <var:F0> = <nat:5> \land <var:e> = <nat:6> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:F1> \\ \{ <var:D> = <var:z> \land <var:F0> = <nat:5> \land <var:e> = <nat:6> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:2> * <var:z> \} \\ <var:e> := <var:e> + <var:F0> \\ \{ <var:D> = <var:z> \land <var:e> = <nat:6> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:5> \} \end{eqnarray} Using Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <var:F4> : string := " <var:F4> " . Definition <def:poly> := <var:F1> := <var:D> ; <var:F2> := <var:F1> * <var:D> ; <var:F3> := <var:F2> * <var:D> ; <var:F4> := <var:F3> * <var:D> ; <var:F0> := <nat:5> ; <var:F1> := <var:F1> * <nat:2> ; <var:F2> := <var:F2> * <nat:5> ; <var:F3> := <var:F3> * <nat:3> ; <var:F4> := <var:F4> * <nat:6> ; <var:e> := <var:F4> <var:e> := <var:e> + <var:F3> <var:e> := <var:e> + <var:F2> <var:e> := <var:e> + <var:F1> <var:e> := <var:e> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:D> = <var:z> }} <def:poly> {{ <var:e> = <nat:6> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:F1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:F1> = <var:z> /\ <var:F2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:F1> = <var:z> /\ <var:F2> = <var:z> ^ <nat:2> /\ <var:F3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:F1> = <var:z> /\ <var:F2> = <var:z> ^ <nat:2> /\ <var:F3> = <var:z> ^ <nat:3> /\ <var:F4> = <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:F1> = <var:z> /\ <var:F2> = <var:z> ^ <nat:2> /\ <var:F3> = <var:z> ^ <nat:3> /\ <var:F4> = <var:z> ^ <nat:4> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:F1> = <nat:2> * <var:z> /\ <var:F2> = <var:z> ^ <nat:2> /\ <var:F3> = <var:z> ^ <nat:3> /\ <var:F4> = <var:z> ^ <nat:4> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:F1> = <nat:2> * <var:z> /\ <var:F2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:F3> = <var:z> ^ <nat:3> /\ <var:F4> = <var:z> ^ <nat:4> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:F1> = <nat:2> * <var:z> /\ <var:F2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:z> ^ <nat:3> /\ <var:F4> = <var:z> ^ <nat:4> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:F1> = <nat:2> * <var:z> /\ <var:F2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:z> ^ <nat:3> /\ <var:F4> = <nat:6> * <var:z> ^ <nat:4> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:F1> = <nat:2> * <var:z> /\ <var:F2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:z> ^ <nat:3> /\ <var:F0> = <nat:5> /\ <var:e> = <nat:6> * <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:F1> = <nat:2> * <var:z> /\ <var:F2> = <nat:5> * <var:z> ^ <nat:2> /\ <var:F0> = <nat:5> /\ <var:e> = <nat:6> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:F1> = <nat:2> * <var:z> /\ <var:F0> = <nat:5> /\ <var:e> = <nat:6> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:F0> = <nat:5> /\ <var:e> = <nat:6> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:z> /\ <var:e> = <nat:6> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 