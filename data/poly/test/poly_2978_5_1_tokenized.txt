\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:j1> := <var:c> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:9> ; <var:y> := <var:j1> <var:y> := <var:y> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Assume it to be that $ <var:c> = <var:O> $ before interpreting our segment of code , it must be that we have $ <var:y> = <nat:9> \cdot <var:O> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the program is evident using standard Hoare reasoning . After , we have \begin{eqnarray} \{ <var:c> = <var:O> \} \, <var:j1> := <var:c> \, \{ <var:c> = <var:O> \land <var:j1> = <var:O> \} \\ \{ <var:c> = <var:O> \land <var:j1> = <var:O> \} \, <var:j0> := <nat:1> \, \{ <var:c> = <var:O> \land <var:j1> = <var:O> \land <var:j0> = <nat:1> \} \\ \{ <var:c> = <var:O> \land <var:j1> = <var:O> \land <var:j0> = <nat:1> \} \, <var:j1> := <var:j1> * <nat:9> \, \{ <var:c> = <var:O> \land <var:j1> = <nat:9> \cdot <var:O> \land <var:j0> = <nat:1> \} \end{eqnarray} Advancing to the subsequent statements seen in our code segment , we have \begin{eqnarray} \{ <var:c> = <var:O> \} \, <var:j1> := <var:c> \, \{ <var:c> = <var:O> \land <var:j1> = <var:O> \} \\ \{ <var:c> = <var:O> \land <var:j1> = <var:O> \} \, <var:j0> := <nat:1> \, \{ <var:c> = <var:O> \land <var:j1> = <var:O> \land <var:j0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j1> := <var:c> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:9> ; <var:y> := <var:j1> <var:y> := <var:y> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:c> = <var:O> }} <def:poly> {{ <var:y> = <nat:9> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:j1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:j1> = <var:O> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:j1> = <nat:9> * <var:O> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:j0> = <nat:1> /\ <var:y> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:y> = <nat:9> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 