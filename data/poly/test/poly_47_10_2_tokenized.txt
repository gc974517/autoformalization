\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} such that \begin{verbatim} <var:h> := <nat:1> ; <var:h> := <nat:3> + <var:h> * <var:B> ; <var:h> := <nat:2> + <var:h> * <var:B> ; <var:h> := <nat:3> + <var:h> * <var:B> ; <var:h> := <nat:3> + <var:h> * <var:B> ; <var:h> := <nat:2> + <var:h> * <var:B> ; <var:h> := <nat:4> + <var:h> * <var:B> ; <var:h> := <nat:3> + <var:h> * <var:B> ; <var:h> := <nat:3> + <var:h> * <var:B> ; <var:h> := <nat:1> + <var:h> * <var:B> \end{verbatim} Assume for all natural numbers $ <var:y> $ that $ <var:B> = <var:y> $ before executing this series of commands it must be that we see $ <var:h> = <nat:1> \times <var:y> ^ <nat:9> + <nat:3> \times <var:y> ^ <nat:8> + <nat:2> \times <var:y> ^ <nat:7> + <nat:3> \times <var:y> ^ <nat:6> + <nat:3> \times <var:y> ^ <nat:5> + <nat:2> \times <var:y> ^ <nat:4> + <nat:4> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:1> $ after code has finished executing . \end{theorem} \begin{proof} We can see that this decorated set of commands . \begin{eqnarray} \{ <var:B> = <var:y> \} \\ <var:h> := <nat:1> ; \\ \{ <var:B> = <var:y> \land <var:h> = <nat:1> \} \\ <var:h> := <nat:3> + <var:h> * <var:B> ; \\ \{ <var:B> = <var:y> \land <var:h> = <nat:1> * <var:y> + <nat:3> \} \\ <var:h> := <nat:2> + <var:h> * <var:B> ; \\ \{ <var:B> = <var:y> \land <var:h> = <nat:1> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> \} \\ <var:h> := <nat:3> + <var:h> * <var:B> ; \\ \{ <var:B> = <var:y> \land <var:h> = <nat:1> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> \} \\ <var:h> := <nat:3> + <var:h> * <var:B> ; \\ \{ <var:B> = <var:y> \land <var:h> = <nat:1> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> \} \\ <var:h> := <nat:2> + <var:h> * <var:B> ; \\ \{ <var:B> = <var:y> \land <var:h> = <nat:1> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> \} \\ <var:h> := <nat:4> + <var:h> * <var:B> ; \\ \{ <var:B> = <var:y> \land <var:h> = <nat:1> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:4> \} \\ <var:h> := <nat:3> + <var:h> * <var:B> ; \\ \{ <var:B> = <var:y> \land <var:h> = <nat:1> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> \} \\ <var:h> := <nat:3> + <var:h> * <var:B> ; \\ \{ <var:B> = <var:y> \land <var:h> = <nat:1> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> \} \\ <var:h> := <nat:1> + <var:h> * <var:B> \\ \{ <var:B> = <var:y> \land <var:h> = <nat:1> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> \} \end{eqnarray} Utilizing Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:B> = <var:y> }} <var:h> := <nat:1> ; <var:h> := <nat:3> + <var:h> * <var:B> ; <var:h> := <nat:2> + <var:h> * <var:B> ; <var:h> := <nat:3> + <var:h> * <var:B> ; <var:h> := <nat:3> + <var:h> * <var:B> ; <var:h> := <nat:2> + <var:h> * <var:B> ; <var:h> := <nat:4> + <var:h> * <var:B> ; <var:h> := <nat:3> + <var:h> * <var:B> ; <var:h> := <nat:3> + <var:h> * <var:B> ; <var:h> := <nat:1> + <var:h> * <var:B> {{ <var:h> = <nat:1> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:h> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:h> = <nat:1> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:h> = <nat:1> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:h> = <nat:1> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:h> = <nat:1> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:h> = <nat:1> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:h> = <nat:1> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:h> = <nat:1> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:h> = <nat:1> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:h> = <nat:1> * <var:y> ^ <nat:9> + <nat:3> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 