\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:2> ; <var:x> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:V> = <var:h> $ --- with some $ <var:h> $ --- ahead of executing this list of instructions , it holds that we see $ <var:x> = <nat:2> $ after set of instructions terminates . \end{theorem} \begin{proof} Applying typical Hoare techniques gives : \begin{eqnarray} \{ <var:V> = <var:h> \} \\ <var:F0> := <nat:2> ; \\ \{ <var:V> = <var:h> \land <var:F0> = <nat:2> \} \\ <var:x> := <var:F0> \\ \{ <var:V> = <var:h> \land <var:x> = <nat:2> \} \end{eqnarray} As a result , our segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:2> ; <var:x> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:V> = <var:h> }} <def:poly> {{ <var:x> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:h> /\ <var:x> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 