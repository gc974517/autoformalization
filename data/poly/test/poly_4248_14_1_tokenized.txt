\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:o1> := <var:m> ; <var:o2> := <var:o1> * <var:m> ; <var:o3> := <var:o2> * <var:m> ; <var:o4> := <var:o3> * <var:m> ; <var:o0> := <nat:9> ; <var:o1> := <var:o1> * <nat:6> ; <var:o2> := <var:o2> * <nat:5> ; <var:o3> := <var:o3> * <nat:4> ; <var:o4> := <var:o4> * <nat:7> ; <var:D> := <var:o4> <var:D> := <var:D> + <var:o3> <var:D> := <var:D> + <var:o2> <var:D> := <var:D> + <var:o1> <var:D> := <var:D> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Allow it to be that $ <var:m> = <var:X> $ , for some positive numbers $ <var:X> $ , prior to interpreting our series of instructions then we see $ <var:D> = <nat:7> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> + <nat:6> * <var:X> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:X> \} \\ <var:o1> := <var:m> ; \\ \{ <var:m> = <var:X> \land <var:o1> = <var:X> \} \\ <var:o2> := <var:o1> * <var:m> ; \\ \{ <var:m> = <var:X> \land <var:o1> = <var:X> \land <var:o2> = <var:X> ^ <nat:2> \} \\ <var:o3> := <var:o2> * <var:m> ; \\ \{ <var:m> = <var:X> \land <var:o1> = <var:X> \land <var:o2> = <var:X> ^ <nat:2> \land <var:o3> = <var:X> ^ <nat:3> \} \\ <var:o4> := <var:o3> * <var:m> ; \\ \{ <var:m> = <var:X> \land <var:o1> = <var:X> \land <var:o2> = <var:X> ^ <nat:2> \land <var:o3> = <var:X> ^ <nat:3> \land <var:o4> = <var:X> ^ <nat:4> \} \\ <var:o0> := <nat:9> ; \\ \{ <var:m> = <var:X> \land <var:o1> = <var:X> \land <var:o2> = <var:X> ^ <nat:2> \land <var:o3> = <var:X> ^ <nat:3> \land <var:o4> = <var:X> ^ <nat:4> \land <var:o0> = <nat:9> \} \\ <var:o1> := <var:o1> * <nat:6> ; \\ \{ <var:m> = <var:X> \land <var:o1> = <nat:6> \cdot <var:X> \land <var:o2> = <var:X> ^ <nat:2> \land <var:o3> = <var:X> ^ <nat:3> \land <var:o4> = <var:X> ^ <nat:4> \land <var:o0> = <nat:9> \} \\ <var:o2> := <var:o2> * <nat:5> ; \\ \{ <var:m> = <var:X> \land <var:o1> = <nat:6> \cdot <var:X> \land <var:o2> = <nat:5> \cdot <var:X> ^ <nat:2> \land <var:o3> = <var:X> ^ <nat:3> \land <var:o4> = <var:X> ^ <nat:4> \land <var:o0> = <nat:9> \} \\ <var:o3> := <var:o3> * <nat:4> ; \\ \{ <var:m> = <var:X> \land <var:o1> = <nat:6> \cdot <var:X> \land <var:o2> = <nat:5> \cdot <var:X> ^ <nat:2> \land <var:o3> = <nat:4> \cdot <var:X> ^ <nat:3> \land <var:o4> = <var:X> ^ <nat:4> \land <var:o0> = <nat:9> \} \\ <var:o4> := <var:o4> * <nat:7> ; \\ \{ <var:m> = <var:X> \land <var:o1> = <nat:6> \cdot <var:X> \land <var:o2> = <nat:5> \cdot <var:X> ^ <nat:2> \land <var:o3> = <nat:4> \cdot <var:X> ^ <nat:3> \land <var:o4> = <nat:7> \cdot <var:X> ^ <nat:4> \land <var:o0> = <nat:9> \} \end{eqnarray} Furthering executing the code gives us : \begin{eqnarray} <var:D> := <var:o4> \\ \{ <var:m> = <var:X> \land <var:o1> = <nat:6> \cdot <var:X> \land <var:o2> = <nat:5> \cdot <var:X> ^ <nat:2> \land <var:o3> = <nat:4> \cdot <var:X> ^ <nat:3> \land <var:o0> = <nat:9> \land <var:D> = <nat:7> \cdot <var:X> ^ <nat:4> \} \\ <var:D> := <var:D> + <var:o3> \\ \{ <var:m> = <var:X> \land <var:o1> = <nat:6> \cdot <var:X> \land <var:o2> = <nat:5> \cdot <var:X> ^ <nat:2> \land <var:o0> = <nat:9> \land <var:D> = <nat:7> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> \} \\ <var:D> := <var:D> + <var:o2> \\ \{ <var:m> = <var:X> \land <var:o1> = <nat:6> \cdot <var:X> \land <var:o0> = <nat:9> \land <var:D> = <nat:7> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:5> \cdot <var:X> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:o1> \\ \{ <var:m> = <var:X> \land <var:o0> = <nat:9> \land <var:D> = <nat:7> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:5> \cdot <var:X> ^ <nat:2> + <nat:6> \cdot <var:X> \} \\ <var:D> := <var:D> + <var:o0> \\ \{ <var:m> = <var:X> \land <var:D> = <nat:7> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:5> \cdot <var:X> ^ <nat:2> + <nat:6> \cdot <var:X> + <nat:9> \} \end{eqnarray} Applying usual Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <var:o4> : string := " <var:o4> " . Definition <def:poly> := <var:o1> := <var:m> ; <var:o2> := <var:o1> * <var:m> ; <var:o3> := <var:o2> * <var:m> ; <var:o4> := <var:o3> * <var:m> ; <var:o0> := <nat:9> ; <var:o1> := <var:o1> * <nat:6> ; <var:o2> := <var:o2> * <nat:5> ; <var:o3> := <var:o3> * <nat:4> ; <var:o4> := <var:o4> * <nat:7> ; <var:D> := <var:o4> <var:D> := <var:D> + <var:o3> <var:D> := <var:D> + <var:o2> <var:D> := <var:D> + <var:o1> <var:D> := <var:D> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:m> = <var:X> }} <def:poly> {{ <var:D> = <nat:7> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> + <nat:6> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:o1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:o1> = <var:X> /\ <var:o2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:o1> = <var:X> /\ <var:o2> = <var:X> ^ <nat:2> /\ <var:o3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:o1> = <var:X> /\ <var:o2> = <var:X> ^ <nat:2> /\ <var:o3> = <var:X> ^ <nat:3> /\ <var:o4> = <var:X> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:o1> = <var:X> /\ <var:o2> = <var:X> ^ <nat:2> /\ <var:o3> = <var:X> ^ <nat:3> /\ <var:o4> = <var:X> ^ <nat:4> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:o1> = <nat:6> * <var:X> /\ <var:o2> = <var:X> ^ <nat:2> /\ <var:o3> = <var:X> ^ <nat:3> /\ <var:o4> = <var:X> ^ <nat:4> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:o1> = <nat:6> * <var:X> /\ <var:o2> = <nat:5> * <var:X> ^ <nat:2> /\ <var:o3> = <var:X> ^ <nat:3> /\ <var:o4> = <var:X> ^ <nat:4> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:o1> = <nat:6> * <var:X> /\ <var:o2> = <nat:5> * <var:X> ^ <nat:2> /\ <var:o3> = <nat:4> * <var:X> ^ <nat:3> /\ <var:o4> = <var:X> ^ <nat:4> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:o1> = <nat:6> * <var:X> /\ <var:o2> = <nat:5> * <var:X> ^ <nat:2> /\ <var:o3> = <nat:4> * <var:X> ^ <nat:3> /\ <var:o4> = <nat:7> * <var:X> ^ <nat:4> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:o1> = <nat:6> * <var:X> /\ <var:o2> = <nat:5> * <var:X> ^ <nat:2> /\ <var:o3> = <nat:4> * <var:X> ^ <nat:3> /\ <var:o0> = <nat:9> /\ <var:D> = <nat:7> * <var:X> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:o1> = <nat:6> * <var:X> /\ <var:o2> = <nat:5> * <var:X> ^ <nat:2> /\ <var:o0> = <nat:9> /\ <var:D> = <nat:7> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:o1> = <nat:6> * <var:X> /\ <var:o0> = <nat:9> /\ <var:D> = <nat:7> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:o0> = <nat:9> /\ <var:D> = <nat:7> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> + <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:D> = <nat:7> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:5> * <var:X> ^ <nat:2> + <nat:6> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 