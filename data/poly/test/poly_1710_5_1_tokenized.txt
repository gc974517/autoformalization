\begin{document} \begin{theorem} Consider a program in \emph{Imp} : \begin{verbatim} <var:Q1> := <var:z> ; <var:Q0> := <nat:2> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:W> := <var:Q1> <var:W> := <var:W> + <var:Q0> \end{verbatim} Allow --- letting $ <var:M> $ --- that $ <var:z> = <var:M> $ ahead of evaluating this segment of code , it must be that we have $ <var:W> = <nat:8> * <var:M> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for this list of commands is clear using usual Hoare logic . Moving on to the next line of code found in our list of instructions , we have the environment update line \verb | <var:Q1> := <var:z> ; | . This statement takes $ \{ <var:z> = <var:M> \} $ toward $ \{ <var:z> = <var:M> \land <var:Q1> = <var:M> \} $ . Moving forward to the proceeding bit of code found in our code segment , we have the line binding $ <nat:2> $ as $ <var:Q0>$ . This moves $ \{ <var:z> = <var:M> \land <var:Q1> = <var:M> \} $ to the condition $ \{ <var:z> = <var:M> \land <var:Q1> = <var:M> \land <var:Q0> = <nat:2> \} $ . Focusing on the next bit of code in our segment of code , the variable binding statement assigning $ <var:Q1> * <nat:8> $ toward $ <var:Q1>$ . This advances the precondition $ \{ <var:z> = <var:M> \land <var:Q1> = <var:M> \land <var:Q0> = <nat:2> \} $ to the postcondition $ \{ <var:z> = <var:M> \land <var:Q1> = <nat:8> * <var:M> \land <var:Q0> = <nat:2> \} $ . This is deduced through the assignment rule defined in standard Hoare logic . Advancing to the next step , we have the binding code \verb | <var:W> := <var:Q1> | . This forwards $ \{ <var:z> = <var:M> \land <var:Q1> = <nat:8> * <var:M> \land <var:Q0> = <nat:2> \} $ as the postcondition $ \{ <var:z> = <var:M> \land <var:Q0> = <nat:2> \land <var:W> = <nat:8> * <var:M> \} $ . After , we have the environment update line letting $ <var:W> + <var:Q0$ to $ <var:W>$ . This takes the precondition $ \{ <var:z> = <var:M> \land <var:Q0> = <nat:2> \land <var:W> = <nat:8> * <var:M> \} $ to $ \{ <var:z> = <var:M> \land <var:W> = <nat:8> * <var:M> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:z> = <var:M> }} <var:Q1> := <var:z> ; <var:Q0> := <nat:2> ; <var:Q1> := <var:Q1> * <nat:8> ; <var:W> := <var:Q1> <var:W> := <var:W> + <var:Q0> {{ <var:W> = <nat:8> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:Q1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:Q1> = <var:M> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:Q1> = <nat:8> * <var:M> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:Q0> = <nat:2> /\ <var:W> = <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:M> /\ <var:W> = <nat:8> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 