\begin{document} \begin{theorem} Consider a list of commands : \begin{verbatim} <var:n1> := <var:U> ; <var:n0> := <nat:2> ; <var:n1> := <var:n1> * <nat:8> ; <var:Y> := <var:n1> <var:Y> := <var:Y> + <var:n0> \end{verbatim} Assuming it to be that $ <var:U> = <var:V> $ before executing the list of instructions , it holds that we have $ <var:Y> = <nat:8> \times <var:V> + <nat:2> $ . \end{theorem} \begin{proof} Applying usual Hoare logic results in : \begin{eqnarray} \{ <var:U> = <var:V> \} \\ <var:n1> := <var:U> ; \\ \{ <var:U> = <var:V> \land <var:n1> = <var:V> \} \\ <var:n0> := <nat:2> ; \\ \{ <var:U> = <var:V> \land <var:n1> = <var:V> \land <var:n0> = <nat:2> \} \\ <var:n1> := <var:n1> * <nat:8> ; \\ \{ <var:U> = <var:V> \land <var:n1> = <nat:8> * <var:V> \land <var:n0> = <nat:2> \} \\ <var:Y> := <var:n1> \\ \{ <var:U> = <var:V> \land <var:n0> = <nat:2> \land <var:Y> = <nat:8> * <var:V> \} \\ <var:Y> := <var:Y> + <var:n0> \\ \{ <var:U> = <var:V> \land <var:Y> = <nat:8> * <var:V> + <nat:2> \} \end{eqnarray} As a consequence , our set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:U> = <var:V> }} <var:n1> := <var:U> ; <var:n0> := <nat:2> ; <var:n1> := <var:n1> * <nat:8> ; <var:Y> := <var:n1> <var:Y> := <var:Y> + <var:n0> {{ <var:Y> = <nat:8> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:n1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:n1> = <var:V> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:n1> = <nat:8> * <var:V> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:n0> = <nat:2> /\ <var:Y> = <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:Y> = <nat:8> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 