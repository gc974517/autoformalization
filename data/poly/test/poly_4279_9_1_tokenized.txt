\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t1> := <var:h> ; <var:t2> := <var:t1> * <var:h> ; <var:t3> := <var:t2> * <var:h> ; <var:t0> := <nat:4> ; <var:t2> := <var:t2> * <nat:2> ; <var:t3> := <var:t3> * <nat:2> ; <var:Q> := <var:t3> <var:Q> := <var:Q> + <var:t2> <var:Q> := <var:Q> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:h> = <var:g> $ ahead of evaluating our program it follows that we have $ <var:Q> = <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the set of instructions can be demonstrated with Hoare logic . Moving on to the next command contained in the series of instructions , the assignment line \verb | <var:t1> := <var:h> ; | . This code takes the condition $ \{ <var:h> = <var:g> \} $ to the condition $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \} $ . This is ensured with the assignment inference rule given by Hoare logic . Jumping to the proceeding line contained in the set of commands , we see the environment update statement assigning $ <var:t1> * <var:h> $ as $ <var:t2>$ . This line forwards the precondition $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \} $ as $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <var:g> ^ <nat:2> \} $ . This is known to be sound with the assignment rule defined by usual Hoare logic . After , we have the variable assignmet code giving $ <var:t2> * <var:h> $ into $ <var:t3>$ . This code advances $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <var:g> ^ <nat:2> \} $ into $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <var:g> ^ <nat:2> \land <var:t3> = <var:g> ^ <nat:3> \} $ . Advancing , we have the variable binding code \verb | <var:t0> := <nat:4> ; | . This redefines the precondition $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <var:g> ^ <nat:2> \land <var:t3> = <var:g> ^ <nat:3> \} $ to the condition $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <var:g> ^ <nat:2> \land <var:t3> = <var:g> ^ <nat:3> \land <var:t0> = <nat:4> \} $ . Advancing on , the environment update line \verb | <var:t2> := <var:t2> * <nat:2> ; | . This line transfers the precondition $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <var:g> ^ <nat:2> \land <var:t3> = <var:g> ^ <nat:3> \land <var:t0> = <nat:4> \} $ to the postcondition $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:t3> = <var:g> ^ <nat:3> \land <var:t0> = <nat:4> \} $ . Honing in on the following line of code contained in the series of instructions , the code \verb | <var:t3> := <var:t3> * <nat:2> ; | . This transfers the precondition $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:t3> = <var:g> ^ <nat:3> \land <var:t0> = <nat:4> \} $ as $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:t3> = <nat:2> \cdot <var:g> ^ <nat:3> \land <var:t0> = <nat:4> \} $ . This is given through the assignment rule defined by usual Hoare reasoning . Honing in on the subsequent step contained in our program , we have the binding command defining $ <var:t3$ as $ <var:Q>$ . This redefines the condition $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:t3> = <nat:2> \cdot <var:g> ^ <nat:3> \land <var:t0> = <nat:4> \} $ as the condition $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:t0> = <nat:4> \land <var:Q> = <nat:2> \cdot <var:g> ^ <nat:3> \} $ . This is deduced by the assignment law given by Hoare logic . Following , we see the variable binding line letting $ <var:Q> + <var:t2$ into $ <var:Q>$ . This command forwards $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:t0> = <nat:4> \land <var:Q> = <nat:2> \cdot <var:g> ^ <nat:3> \} $ as $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t0> = <nat:4> \land <var:Q> = <nat:2> \cdot <var:g> ^ <nat:3> + <nat:2> \cdot <var:g> ^ <nat:2> \} $ . Keeping momentum , we see the code \verb | <var:Q> := <var:Q> + <var:t0> | . This command takes the condition $ \{ <var:h> = <var:g> \land <var:t1> = <var:g> \land <var:t0> = <nat:4> \land <var:Q> = <nat:2> \cdot <var:g> ^ <nat:3> + <nat:2> \cdot <var:g> ^ <nat:2> \} $ toward the postcondition $ \{ <var:h> = <var:g> \land <var:Q> = <nat:2> \cdot <var:g> ^ <nat:3> + <nat:2> \cdot <var:g> ^ <nat:2> + <nat:4> \} $ . This is deduced through the assignment law of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:h> ; <var:t2> := <var:t1> * <var:h> ; <var:t3> := <var:t2> * <var:h> ; <var:t0> := <nat:4> ; <var:t2> := <var:t2> * <nat:2> ; <var:t3> := <var:t3> * <nat:2> ; <var:Q> := <var:t3> <var:Q> := <var:Q> + <var:t2> <var:Q> := <var:Q> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:h> = <var:g> }} <def:poly> {{ <var:Q> = <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:t1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:t1> = <var:g> /\ <var:t2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:t1> = <var:g> /\ <var:t2> = <var:g> ^ <nat:2> /\ <var:t3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:t1> = <var:g> /\ <var:t2> = <var:g> ^ <nat:2> /\ <var:t3> = <var:g> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:t1> = <var:g> /\ <var:t2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:t3> = <var:g> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:t1> = <var:g> /\ <var:t2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:g> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:t1> = <var:g> /\ <var:t2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:t0> = <nat:4> /\ <var:Q> = <nat:2> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:t1> = <var:g> /\ <var:t0> = <nat:4> /\ <var:Q> = <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:Q> = <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 