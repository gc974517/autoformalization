\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:P> ; <var:d2> := <var:d1> * <var:P> ; <var:d3> := <var:d2> * <var:P> ; <var:d4> := <var:d3> * <var:P> ; <var:d0> := <nat:7> ; <var:d1> := <var:d1> * <nat:5> ; <var:d3> := <var:d3> * <nat:1> ; <var:d4> := <var:d4> * <nat:4> ; <var:Q> := <var:d4> <var:Q> := <var:Q> + <var:d3> <var:Q> := <var:Q> + <var:d1> <var:Q> := <var:Q> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:P> = <var:K> $ before interpreting our list of commands it follows that we have $ <var:Q> = <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:5> * <var:K> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for this list of instructions is given through usual Hoare logic . Next , we have \[ \begin{tabular} {rcl} \{ <var:P> = <var:K> \} & <var:d1> := <var:P> & \{ <var:P> = <var:K> \land <var:d1> = <var:K> \} \\ \{ <var:P> = <var:K> \land <var:d1> = <var:K> \} & <var:d2> := <var:d1> * <var:P> & \{ <var:P> = <var:K> \land <var:d1> = <var:K> \land <var:d2> = <var:K> ^ <nat:2> \} \\ \{ <var:P> = <var:K> \land <var:d1> = <var:K> \land <var:d2> = <var:K> ^ <nat:2> \} & <var:d3> := <var:d2> * <var:P> & \{ <var:P> = <var:K> \land <var:d1> = <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <var:K> ^ <nat:3> \} \\ \{ <var:P> = <var:K> \land <var:d1> = <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <var:K> ^ <nat:3> \} & <var:d4> := <var:d3> * <var:P> & \{ <var:P> = <var:K> \land <var:d1> = <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <var:K> ^ <nat:3> \land <var:d4> = <var:K> ^ <nat:4> \} \\ \{ <var:P> = <var:K> \land <var:d1> = <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <var:K> ^ <nat:3> \land <var:d4> = <var:K> ^ <nat:4> \} & <var:d0> := <nat:7> & \{ <var:P> = <var:K> \land <var:d1> = <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <var:K> ^ <nat:3> \land <var:d4> = <var:K> ^ <nat:4> \land <var:d0> = <nat:7> \} \\ \{ <var:P> = <var:K> \land <var:d1> = <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <var:K> ^ <nat:3> \land <var:d4> = <var:K> ^ <nat:4> \land <var:d0> = <nat:7> \} & <var:d1> := <var:d1> * <nat:5> & \{ <var:P> = <var:K> \land <var:d1> = <nat:5> * <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <var:K> ^ <nat:3> \land <var:d4> = <var:K> ^ <nat:4> \land <var:d0> = <nat:7> \} \\ \{ <var:P> = <var:K> \land <var:d1> = <nat:5> * <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <var:K> ^ <nat:3> \land <var:d4> = <var:K> ^ <nat:4> \land <var:d0> = <nat:7> \} & <var:d3> := <var:d3> * <nat:1> & \{ <var:P> = <var:K> \land <var:d1> = <nat:5> * <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <nat:1> * <var:K> ^ <nat:3> \land <var:d4> = <var:K> ^ <nat:4> \land <var:d0> = <nat:7> \} \\ \{ <var:P> = <var:K> \land <var:d1> = <nat:5> * <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <nat:1> * <var:K> ^ <nat:3> \land <var:d4> = <var:K> ^ <nat:4> \land <var:d0> = <nat:7> \} & <var:d4> := <var:d4> * <nat:4> & \{ <var:P> = <var:K> \land <var:d1> = <nat:5> * <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <nat:1> * <var:K> ^ <nat:3> \land <var:d4> = <nat:4> * <var:K> ^ <nat:4> \land <var:d0> = <nat:7> \} \\ \{ <var:P> = <var:K> \land <var:d1> = <nat:5> * <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <nat:1> * <var:K> ^ <nat:3> \land <var:d4> = <nat:4> * <var:K> ^ <nat:4> \land <var:d0> = <nat:7> \} & <var:Q> := <var:d4& \{ <var:P> = <var:K> \land <var:d1> = <nat:5> * <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <nat:1> * <var:K> ^ <nat:3> \land <var:d0> = <nat:7> \land <var:Q> = <nat:4> * <var:K> ^ <nat:4> \} \\ \{ <var:P> = <var:K> \land <var:d1> = <nat:5> * <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d3> = <nat:1> * <var:K> ^ <nat:3> \land <var:d0> = <nat:7> \land <var:Q> = <nat:4> * <var:K> ^ <nat:4> \} & <var:Q> := <var:Q> + <var:d3& \{ <var:P> = <var:K> \land <var:d1> = <nat:5> * <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d0> = <nat:7> \land <var:Q> = <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> \} \\ \{ <var:P> = <var:K> \land <var:d1> = <nat:5> * <var:K> \land <var:d2> = <var:K> ^ <nat:2> \land <var:d0> = <nat:7> \land <var:Q> = <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> \} & <var:Q> := <var:Q> + <var:d1& \{ <var:P> = <var:K> \land <var:d0> = <nat:7> \land <var:Q> = <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:5> * <var:K> \} \\ \{ <var:P> = <var:K> \land <var:d0> = <nat:7> \land <var:Q> = <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:5> * <var:K> \} & <var:Q> := <var:Q> + <var:d0& \{ <var:P> = <var:K> \land <var:Q> = <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:5> * <var:K> + <nat:7> \} \end{tabular} This is deduced by the assignment inference rule obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <var:d4> : string := " <var:d4> " . Definition <def:poly> := <var:d1> := <var:P> ; <var:d2> := <var:d1> * <var:P> ; <var:d3> := <var:d2> * <var:P> ; <var:d4> := <var:d3> * <var:P> ; <var:d0> := <nat:7> ; <var:d1> := <var:d1> * <nat:5> ; <var:d3> := <var:d3> * <nat:1> ; <var:d4> := <var:d4> * <nat:4> ; <var:Q> := <var:d4> <var:Q> := <var:Q> + <var:d3> <var:Q> := <var:Q> + <var:d1> <var:Q> := <var:Q> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:P> = <var:K> }} <def:poly> {{ <var:Q> = <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:5> * <var:K> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:d1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:d1> = <var:K> /\ <var:d2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:d1> = <var:K> /\ <var:d2> = <var:K> ^ <nat:2> /\ <var:d3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:d1> = <var:K> /\ <var:d2> = <var:K> ^ <nat:2> /\ <var:d3> = <var:K> ^ <nat:3> /\ <var:d4> = <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:d1> = <var:K> /\ <var:d2> = <var:K> ^ <nat:2> /\ <var:d3> = <var:K> ^ <nat:3> /\ <var:d4> = <var:K> ^ <nat:4> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:d1> = <nat:5> * <var:K> /\ <var:d2> = <var:K> ^ <nat:2> /\ <var:d3> = <var:K> ^ <nat:3> /\ <var:d4> = <var:K> ^ <nat:4> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:d1> = <nat:5> * <var:K> /\ <var:d2> = <var:K> ^ <nat:2> /\ <var:d3> = <nat:1> * <var:K> ^ <nat:3> /\ <var:d4> = <var:K> ^ <nat:4> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:d1> = <nat:5> * <var:K> /\ <var:d2> = <var:K> ^ <nat:2> /\ <var:d3> = <nat:1> * <var:K> ^ <nat:3> /\ <var:d4> = <nat:4> * <var:K> ^ <nat:4> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:d1> = <nat:5> * <var:K> /\ <var:d2> = <var:K> ^ <nat:2> /\ <var:d3> = <nat:1> * <var:K> ^ <nat:3> /\ <var:d0> = <nat:7> /\ <var:Q> = <nat:4> * <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:d1> = <nat:5> * <var:K> /\ <var:d2> = <var:K> ^ <nat:2> /\ <var:d0> = <nat:7> /\ <var:Q> = <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:d0> = <nat:7> /\ <var:Q> = <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:K> /\ <var:Q> = <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:5> * <var:K> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 