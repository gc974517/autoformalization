\begin{document} \begin{theorem} Consider the following list of commands such that \begin{verbatim} <var:J> := <nat:4> ; <var:J> := <var:J> * <var:k> ; <var:J> := <nat:1> + <var:J> * <var:k> ; <var:J> := <nat:2> + <var:J> * <var:k> ; <var:J> := <nat:1> + <var:J> * <var:k> \end{verbatim} Assuming it to be that $ <var:k> = <var:m> $ ahead of evaluating our set of instructions it holds that we have $ <var:J> = <nat:4> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:1> $ after program exits . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code is evident using typical Hoare logic . Advancing on , we see \[ \begin{tabular} {rcl} \{ <var:k> = <var:m> \} & <var:J> := <nat:4> & \{ <var:k> = <var:m> \land <var:J> = <nat:4> \} \\ \{ <var:k> = <var:m> \land <var:J> = <nat:4> \} & <var:J> := <var:J> * <var:k> & \{ <var:k> = <var:m> \land <var:J> = <nat:4> \times <var:m> + \} \\ \{ <var:k> = <var:m> \land <var:J> = <nat:4> \times <var:m> + \} & <var:J> := <nat:1> + <var:J> * <var:k> & \{ <var:k> = <var:m> \land <var:J> = <nat:4> \times <var:m> ^ <nat:2> + <nat:1> \} \\ \{ <var:k> = <var:m> \land <var:J> = <nat:4> \times <var:m> ^ <nat:2> + <nat:1> \} & <var:J> := <nat:2> + <var:J> * <var:k> & \{ <var:k> = <var:m> \land <var:J> = <nat:4> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> + <nat:2> \} \end{tabular} Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:k> = <var:m> \} & <var:J> := <nat:4> & \{ <var:k> = <var:m> \land <var:J> = <nat:4> \} \end{tabular} This is deduced with the environment update rule given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:k> = <var:m> }} <var:J> := <nat:4> ; <var:J> := <var:J> * <var:k> ; <var:J> := <nat:1> + <var:J> * <var:k> ; <var:J> := <nat:2> + <var:J> * <var:k> ; <var:J> := <nat:1> + <var:J> * <var:k> {{ <var:J> = <nat:4> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:J> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:J> = <nat:4> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:J> = <nat:4> * <var:m> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:J> = <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:J> = <nat:4> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 