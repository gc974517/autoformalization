\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} such that \begin{verbatim} <var:E1> := <var:n> ; <var:E2> := <var:E1> * <var:n> ; <var:E3> := <var:E2> * <var:n> ; <var:E4> := <var:E3> * <var:n> ; <var:E5> := <var:E4> * <var:n> ; <var:E0> := <nat:3> ; <var:E4> := <var:E4> * <nat:2> ; <var:E5> := <var:E5> * <nat:1> ; <var:K> := <var:E5> <var:K> := <var:K> + <var:E4> <var:K> := <var:K> + <var:E0> \end{verbatim} Assume it to hold that $ <var:n> = <var:A> $ before evaluating the series of instructions , then we see $ <var:K> = <nat:1> \cdot <var:A> ^ <nat:5> + <nat:2> \cdot <var:A> ^ <nat:4> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the segment of code can be shown through the below decorated code segment . \begin{eqnarray} \{ <var:n> = <var:A> \} \\ <var:E1> := <var:n> ; \\ \{ <var:n> = <var:A> \land <var:E1> = <var:A> \} \\ <var:E2> := <var:E1> * <var:n> ; \\ \{ <var:n> = <var:A> \land <var:E1> = <var:A> \land <var:E2> = <var:A> ^ <nat:2> \} \\ <var:E3> := <var:E2> * <var:n> ; \\ \{ <var:n> = <var:A> \land <var:E1> = <var:A> \land <var:E2> = <var:A> ^ <nat:2> \land <var:E3> = <var:A> ^ <nat:3> \} \\ <var:E4> := <var:E3> * <var:n> ; \\ \{ <var:n> = <var:A> \land <var:E1> = <var:A> \land <var:E2> = <var:A> ^ <nat:2> \land <var:E3> = <var:A> ^ <nat:3> \land <var:E4> = <var:A> ^ <nat:4> \} \\ <var:E5> := <var:E4> * <var:n> ; \\ \{ <var:n> = <var:A> \land <var:E1> = <var:A> \land <var:E2> = <var:A> ^ <nat:2> \land <var:E3> = <var:A> ^ <nat:3> \land <var:E4> = <var:A> ^ <nat:4> \land <var:E5> = <var:A> ^ <nat:5> \} \\ <var:E0> := <nat:3> ; \\ \{ <var:n> = <var:A> \land <var:E1> = <var:A> \land <var:E2> = <var:A> ^ <nat:2> \land <var:E3> = <var:A> ^ <nat:3> \land <var:E4> = <var:A> ^ <nat:4> \land <var:E5> = <var:A> ^ <nat:5> \land <var:E0> = <nat:3> \} \\ <var:E4> := <var:E4> * <nat:2> ; \\ \{ <var:n> = <var:A> \land <var:E1> = <var:A> \land <var:E2> = <var:A> ^ <nat:2> \land <var:E3> = <var:A> ^ <nat:3> \land <var:E4> = <nat:2> * <var:A> ^ <nat:4> \land <var:E5> = <var:A> ^ <nat:5> \land <var:E0> = <nat:3> \} \\ <var:E5> := <var:E5> * <nat:1> ; \\ \{ <var:n> = <var:A> \land <var:E1> = <var:A> \land <var:E2> = <var:A> ^ <nat:2> \land <var:E3> = <var:A> ^ <nat:3> \land <var:E4> = <nat:2> * <var:A> ^ <nat:4> \land <var:E5> = <nat:1> * <var:A> ^ <nat:5> \land <var:E0> = <nat:3> \} \\ <var:K> := <var:E5> \\ \{ <var:n> = <var:A> \land <var:E1> = <var:A> \land <var:E2> = <var:A> ^ <nat:2> \land <var:E3> = <var:A> ^ <nat:3> \land <var:E4> = <nat:2> * <var:A> ^ <nat:4> \land <var:E0> = <nat:3> \land <var:K> = <nat:1> * <var:A> ^ <nat:5> \} \end{eqnarray} Continuing interpreting this code gives us : \begin{eqnarray} <var:K> := <var:K> + <var:E4> \\ \{ <var:n> = <var:A> \land <var:E1> = <var:A> \land <var:E2> = <var:A> ^ <nat:2> \land <var:E3> = <var:A> ^ <nat:3> \land <var:E0> = <nat:3> \land <var:K> = <nat:1> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> \} \\ <var:K> := <var:K> + <var:E0> \\ \{ <var:n> = <var:A> \land <var:K> = <nat:1> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:3> \} \end{eqnarray} Using Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <var:E4> : string := " <var:E4> " . Definition <var:E5> : string := " <var:E5> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:n> = <var:A> }} <var:E1> := <var:n> ; <var:E2> := <var:E1> * <var:n> ; <var:E3> := <var:E2> * <var:n> ; <var:E4> := <var:E3> * <var:n> ; <var:E5> := <var:E4> * <var:n> ; <var:E0> := <nat:3> ; <var:E4> := <var:E4> * <nat:2> ; <var:E5> := <var:E5> * <nat:1> ; <var:K> := <var:E5> <var:K> := <var:K> + <var:E4> <var:K> := <var:K> + <var:E0> {{ <var:K> = <nat:1> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:E1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:E1> = <var:A> /\ <var:E2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:E1> = <var:A> /\ <var:E2> = <var:A> ^ <nat:2> /\ <var:E3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:E1> = <var:A> /\ <var:E2> = <var:A> ^ <nat:2> /\ <var:E3> = <var:A> ^ <nat:3> /\ <var:E4> = <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:E1> = <var:A> /\ <var:E2> = <var:A> ^ <nat:2> /\ <var:E3> = <var:A> ^ <nat:3> /\ <var:E4> = <var:A> ^ <nat:4> /\ <var:E5> = <var:A> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:E1> = <var:A> /\ <var:E2> = <var:A> ^ <nat:2> /\ <var:E3> = <var:A> ^ <nat:3> /\ <var:E4> = <var:A> ^ <nat:4> /\ <var:E5> = <var:A> ^ <nat:5> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:E1> = <var:A> /\ <var:E2> = <var:A> ^ <nat:2> /\ <var:E3> = <var:A> ^ <nat:3> /\ <var:E4> = <nat:2> * <var:A> ^ <nat:4> /\ <var:E5> = <var:A> ^ <nat:5> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:E1> = <var:A> /\ <var:E2> = <var:A> ^ <nat:2> /\ <var:E3> = <var:A> ^ <nat:3> /\ <var:E4> = <nat:2> * <var:A> ^ <nat:4> /\ <var:E5> = <nat:1> * <var:A> ^ <nat:5> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:E1> = <var:A> /\ <var:E2> = <var:A> ^ <nat:2> /\ <var:E3> = <var:A> ^ <nat:3> /\ <var:E4> = <nat:2> * <var:A> ^ <nat:4> /\ <var:E0> = <nat:3> /\ <var:K> = <nat:1> * <var:A> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:E1> = <var:A> /\ <var:E2> = <var:A> ^ <nat:2> /\ <var:E3> = <var:A> ^ <nat:3> /\ <var:E0> = <nat:3> /\ <var:K> = <nat:1> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:A> /\ <var:K> = <nat:1> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 