\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:4> ; <var:L1> := <nat:4> ; <var:L1> := <var:L1> * <var:g> ; <var:L2> := <nat:1> ; <var:L2> := <var:L2> * <var:g> ; <var:L2> := <var:L2> * <var:g> ; <var:w> := <var:L2> ; <var:w> := <var:w> + <var:L1> ; <var:w> := <var:w> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Assume ( taking $ <var:n> \in \mathbb{N} $ ) that $ <var:g> = <var:n> $ prior to interpreting the set of commands then we see $ <var:w> = <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> $ once segment of code is done . \end{theorem} \begin{proof} The course of logic for the program is shown using standard Hoare techniques . Further , we have \begin{eqnarray} \{ <var:g> = <var:n> \} \, <var:L0> := <nat:4> \, \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \} \\ \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \} \, <var:L1> := <nat:4> \, \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \land <var:L1> = <nat:4> \} \\ \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \land <var:L1> = <nat:4> \} \, <var:L1> := <var:L1> * <var:g> \, \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \land <var:L1> = <nat:4> \cdot <var:n> \} \end{eqnarray} Immediately following , we see \begin{eqnarray} \{ <var:g> = <var:n> \} \, <var:L0> := <nat:4> \, \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \} \\ \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \} \, <var:L1> := <nat:4> \, \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \land <var:L1> = <nat:4> \} \\ \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \land <var:L1> = <nat:4> \} \, <var:L1> := <var:L1> * <var:g> \, \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \land <var:L1> = <nat:4> \cdot <var:n> \} \\ \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \land <var:L1> = <nat:4> \cdot <var:n> \} \, <var:L2> := <nat:1> \, \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \land <var:L1> = <nat:4> \cdot <var:n> \land <var:L2> = <nat:1> \} \\ \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \land <var:L1> = <nat:4> \cdot <var:n> \land <var:L2> = <nat:1> \} \, <var:L2> := <var:L2> * <var:g> \, \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \land <var:L1> = <nat:4> \cdot <var:n> \land <var:L2> = <nat:1> \cdot <var:n> \} \end{eqnarray} Jumping to the following bit of code seen in the code segment , we have \begin{eqnarray} \{ <var:g> = <var:n> \} \, <var:L0> := <nat:4> \, \{ <var:g> = <var:n> \land <var:L0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <def:poly> := <var:L0> := <nat:4> ; <var:L1> := <nat:4> ; <var:L1> := <var:L1> * <var:g> ; <var:L2> := <nat:1> ; <var:L2> := <var:L2> * <var:g> ; <var:L2> := <var:L2> * <var:g> ; <var:w> := <var:L2> ; <var:w> := <var:w> + <var:L1> ; <var:w> := <var:w> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:g> = <var:n> }} <def:poly> {{ <var:w> = <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:4> * <var:n> /\ <var:L2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:4> * <var:n> /\ <var:L2> = <nat:1> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:4> * <var:n> /\ <var:L2> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:4> * <var:n> /\ <var:w> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:L0> = <nat:4> /\ <var:w> = <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:n> /\ <var:w> = <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 