\begin{document} \begin{theorem} We define a program in \emph{Imp} : \begin{verbatim} <var:Q1> := <var:u> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:3> ; <var:V> := <var:Q1> <var:V> := <var:V> + <var:Q0> \end{verbatim} Assume it to hold that $ <var:u> = <var:x> $ ahead of interpreting the code segment , then we have $ <var:V> = <nat:3> \times <var:x> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing Hoare logic produces : \begin{eqnarray} \{ <var:u> = <var:x> \} \\ <var:Q1> := <var:u> ; \\ \{ <var:u> = <var:x> \land <var:Q1> = <var:x> \} \\ <var:Q0> := <nat:7> ; \\ \{ <var:u> = <var:x> \land <var:Q1> = <var:x> \land <var:Q0> = <nat:7> \} \\ <var:Q1> := <var:Q1> * <nat:3> ; \\ \{ <var:u> = <var:x> \land <var:Q1> = <nat:3> \cdot <var:x> \land <var:Q0> = <nat:7> \} \\ <var:V> := <var:Q1> \\ \{ <var:u> = <var:x> \land <var:Q0> = <nat:7> \land <var:V> = <nat:3> \cdot <var:x> \} \\ <var:V> := <var:V> + <var:Q0> \\ \{ <var:u> = <var:x> \land <var:V> = <nat:3> \cdot <var:x> + <nat:7> \} \end{eqnarray} As a consequence , the program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:u> = <var:x> }} <var:Q1> := <var:u> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:3> ; <var:V> := <var:Q1> <var:V> := <var:V> + <var:Q0> {{ <var:V> = <nat:3> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:Q1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:Q1> = <var:x> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:Q1> = <nat:3> * <var:x> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:Q0> = <nat:7> /\ <var:V> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:V> = <nat:3> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 