\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:h> ; <var:d2> := <var:d1> * <var:h> ; <var:d3> := <var:d2> * <var:h> ; <var:d0> := <nat:1> ; <var:d2> := <var:d2> * <nat:4> ; <var:d3> := <var:d3> * <nat:6> ; <var:P> := <var:d3> <var:P> := <var:P> + <var:d2> <var:P> := <var:P> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assume ( for all natural numbers $ <var:Q> $ ) it to hold that $ <var:h> = <var:Q> $ ahead of the execution of this code it follows that we see $ <var:P> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Let the following decorated set of instructions . \begin{eqnarray} \{ <var:h> = <var:Q> \} \\ <var:d1> := <var:h> ; \\ \{ <var:h> = <var:Q> \land <var:d1> = <var:Q> \} \\ <var:d2> := <var:d1> * <var:h> ; \\ \{ <var:h> = <var:Q> \land <var:d1> = <var:Q> \land <var:d2> = <var:Q> ^ <nat:2> \} \\ <var:d3> := <var:d2> * <var:h> ; \\ \{ <var:h> = <var:Q> \land <var:d1> = <var:Q> \land <var:d2> = <var:Q> ^ <nat:2> \land <var:d3> = <var:Q> ^ <nat:3> \} \\ <var:d0> := <nat:1> ; \\ \{ <var:h> = <var:Q> \land <var:d1> = <var:Q> \land <var:d2> = <var:Q> ^ <nat:2> \land <var:d3> = <var:Q> ^ <nat:3> \land <var:d0> = <nat:1> \} \\ <var:d2> := <var:d2> * <nat:4> ; \\ \{ <var:h> = <var:Q> \land <var:d1> = <var:Q> \land <var:d2> = <nat:4> * <var:Q> ^ <nat:2> \land <var:d3> = <var:Q> ^ <nat:3> \land <var:d0> = <nat:1> \} \\ <var:d3> := <var:d3> * <nat:6> ; \\ \{ <var:h> = <var:Q> \land <var:d1> = <var:Q> \land <var:d2> = <nat:4> * <var:Q> ^ <nat:2> \land <var:d3> = <nat:6> * <var:Q> ^ <nat:3> \land <var:d0> = <nat:1> \} \\ <var:P> := <var:d3> \\ \{ <var:h> = <var:Q> \land <var:d1> = <var:Q> \land <var:d2> = <nat:4> * <var:Q> ^ <nat:2> \land <var:d0> = <nat:1> \land <var:P> = <nat:6> * <var:Q> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:d2> \\ \{ <var:h> = <var:Q> \land <var:d1> = <var:Q> \land <var:d0> = <nat:1> \land <var:P> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:d0> \\ \{ <var:h> = <var:Q> \land <var:P> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> \} \end{eqnarray} The application of Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d1> := <var:h> ; <var:d2> := <var:d1> * <var:h> ; <var:d3> := <var:d2> * <var:h> ; <var:d0> := <nat:1> ; <var:d2> := <var:d2> * <nat:4> ; <var:d3> := <var:d3> * <nat:6> ; <var:P> := <var:d3> <var:P> := <var:P> + <var:d2> <var:P> := <var:P> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:h> = <var:Q> }} <def:poly> {{ <var:P> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:d1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:d1> = <var:Q> /\ <var:d2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:d1> = <var:Q> /\ <var:d2> = <var:Q> ^ <nat:2> /\ <var:d3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:d1> = <var:Q> /\ <var:d2> = <var:Q> ^ <nat:2> /\ <var:d3> = <var:Q> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:d1> = <var:Q> /\ <var:d2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:d3> = <var:Q> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:d1> = <var:Q> /\ <var:d2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:d3> = <nat:6> * <var:Q> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:d1> = <var:Q> /\ <var:d2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:d0> = <nat:1> /\ <var:P> = <nat:6> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:d1> = <var:Q> /\ <var:d0> = <nat:1> /\ <var:P> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:P> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 