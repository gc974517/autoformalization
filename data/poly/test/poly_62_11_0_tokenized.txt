\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:3> ; <var:c2> := <nat:8> ; <var:c2> := <var:c2> * <var:M> ; <var:c2> := <var:c2> * <var:M> ; <var:c3> := <nat:6> ; <var:c3> := <var:c3> * <var:M> ; <var:c3> := <var:c3> * <var:M> ; <var:c3> := <var:c3> * <var:M> ; <var:e> := <var:c3> ; <var:e> := <var:e> + <var:c2> ; <var:e> := <var:e> + <var:c0> \end{verbatim} Assume given all integers $ <var:d> $ that $ <var:M> = <var:d> $ prior to the execution of this code segment it holds that we see $ <var:e> = <nat:6> \cdot <var:d> ^ <nat:3> + <nat:8> \cdot <var:d> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of commands is clear by standard Hoare techniques . Taking another step toward the subsequent bit of code seen in our series of instructions , the variable assignmet code \verb | <var:c0> := <nat:3> ; | . This transfers $ \{ <var:M> = <var:d> \} $ as the condition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \} $ . This is given using the assignment law defined in typical Hoare logic . Moving on , we see the binding line yielding $ <nat:8> $ as $ <var:c2>$ . This statement takes the condition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \} $ as the condition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \} $ . Taking a look at the proceeding statement found in the segment of code , we have the assignment statement \verb | <var:c2> := <var:c2> * <var:M> ; | . This line advances $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \} $ as the postcondition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> \} $ . This is known to be sound through the assignment inference rule obtained from Hoare techniques . Going forward , we see the variable binding statement \verb | <var:c2> := <var:c2> * <var:M> ; | . This redefines the condition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> \} $ to the postcondition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment rule found in usual Hoare reasoning . Taking a look at the upcoming bit of code found in the code , the statement assigning $ <nat:6> $ toward $ <var:c3>$ . This command advances $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> ^ <nat:2> \} $ to $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> ^ <nat:2> \land <var:c3> = <nat:6> \} $ . This is sound with the assignment scheme found in standard Hoare logic . Advancing , the statement giving $ <var:c3> * <var:M> $ into $ <var:c3>$ . This advances the precondition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> ^ <nat:2> \land <var:c3> = <nat:6> \} $ as the condition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> ^ <nat:2> \land <var:c3> = <nat:6> \times <var:d> \} $ . This is shown through the assignment scheme from usual Hoare reasoning . Following , we see the binding statement assigning $ <var:c3> * <var:M> $ into $ <var:c3>$ . This advances the precondition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> ^ <nat:2> \land <var:c3> = <nat:6> \times <var:d> \} $ into $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> ^ <nat:2> \land <var:c3> = <nat:6> \times <var:d> ^ <nat:2> \} $ . Stepping forward , the variable assignmet line \verb | <var:c3> := <var:c3> * <var:M> ; | . This statement transfers the condition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> ^ <nat:2> \land <var:c3> = <nat:6> \times <var:d> ^ <nat:2> \} $ into $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> ^ <nat:2> \land <var:c3> = <nat:6> \times <var:d> ^ <nat:3> \} $ . Focusing on the next step in our set of instructions , we have the variable binding statement giving $ <var:c3> $ as $ <var:e>$ . This moves the precondition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> ^ <nat:2> \land <var:c3> = <nat:6> \times <var:d> ^ <nat:3> \} $ as the condition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> ^ <nat:2> \land <var:e> = <nat:6> \times <var:d> ^ <nat:3> \} $ . After , we see the variable update code \verb | <var:e> := <var:e> + <var:c2> ; | . This forwards the condition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:c2> = <nat:8> \times <var:d> ^ <nat:2> \land <var:e> = <nat:6> \times <var:d> ^ <nat:3> \} $ to $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:e> = <nat:6> \times <var:d> ^ <nat:3> + <nat:8> \times <var:d> ^ <nat:2> \} $ . This is known to be sound through the assignment inference rule given by typical Hoare techniques . Now , the variable update command \verb | <var:e> := <var:e> + <var:c0> | . This command transfers the precondition $ \{ <var:M> = <var:d> \land <var:c0> = <nat:3> \land <var:e> = <nat:6> \times <var:d> ^ <nat:3> + <nat:8> \times <var:d> ^ <nat:2> \} $ toward the condition $ \{ <var:M> = <var:d> \land <var:e> = <nat:6> \times <var:d> ^ <nat:3> + <nat:8> \times <var:d> ^ <nat:2> + <nat:3> \} $ . This is shown to be logically sound by the assignment rule given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:M> = <var:d> }} <var:c0> := <nat:3> ; <var:c2> := <nat:8> ; <var:c2> := <var:c2> * <var:M> ; <var:c2> := <var:c2> * <var:M> ; <var:c3> := <nat:6> ; <var:c3> := <var:c3> * <var:M> ; <var:c3> := <var:c3> * <var:M> ; <var:c3> := <var:c3> * <var:M> ; <var:e> := <var:c3> ; <var:e> := <var:e> + <var:c2> ; <var:e> := <var:e> + <var:c0> {{ <var:e> = <nat:6> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:c0> = <nat:3> /\ <var:c2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:c0> = <nat:3> /\ <var:c2> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:c0> = <nat:3> /\ <var:c2> = <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:c0> = <nat:3> /\ <var:c2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:c3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:c0> = <nat:3> /\ <var:c2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:c3> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:c0> = <nat:3> /\ <var:c2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:c3> = <nat:6> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:c0> = <nat:3> /\ <var:c2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:c3> = <nat:6> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:c0> = <nat:3> /\ <var:c2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:e> = <nat:6> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:c0> = <nat:3> /\ <var:e> = <nat:6> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:d> /\ <var:e> = <nat:6> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 