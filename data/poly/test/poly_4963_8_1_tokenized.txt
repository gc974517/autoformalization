\begin{document} \begin{theorem} Define a series of commands such that \begin{verbatim} <var:Z1> := <var:n> ; <var:Z2> := <var:Z1> * <var:n> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Z2> := <var:Z2> * <nat:5> ; <var:l> := <var:Z2> <var:l> := <var:l> + <var:Z1> <var:l> := <var:l> + <var:Z0> \end{verbatim} Allow $ <var:n> = <var:R> $ ahead of the evaluation of this set of instructions , it must be that we have $ <var:l> = <nat:5> \cdot <var:R> ^ <nat:2> + <nat:2> \cdot <var:R> + <nat:2> $ when list of commands is done . \end{theorem} \begin{proof} The flow of logic for the code segment is clear with typical Hoare techniques . Stepping forward , we see \begin{eqnarray} \{ <var:n> = <var:R> \} \, <var:Z1> := <var:n> \, \{ <var:n> = <var:R> \land <var:Z1> = <var:R> \} \\ \{ <var:n> = <var:R> \land <var:Z1> = <var:R> \} \, <var:Z2> := <var:Z1> * <var:n> \, \{ <var:n> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \} \\ \{ <var:n> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \} \, <var:Z0> := <nat:2> \, \{ <var:n> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \land <var:Z0> = <nat:2> \} \\ \{ <var:n> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \land <var:Z0> = <nat:2> \} \, <var:Z1> := <var:Z1> * <nat:2> \, \{ <var:n> = <var:R> \land <var:Z1> = <nat:2> * <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \land <var:Z0> = <nat:2> \} \\ \{ <var:n> = <var:R> \land <var:Z1> = <nat:2> * <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \land <var:Z0> = <nat:2> \} \, <var:Z2> := <var:Z2> * <nat:5> \, \{ <var:n> = <var:R> \land <var:Z1> = <nat:2> * <var:R> \land <var:Z2> = <nat:5> * <var:R> ^ <nat:2> \land <var:Z0> = <nat:2> \} \end{eqnarray} This is given by the binding inference rule found in usual Hoare logic . Honing in on the proceeding lines found in our list of instructions , \begin{eqnarray} \{ <var:n> = <var:R> \} \, <var:Z1> := <var:n> \, \{ <var:n> = <var:R> \land <var:Z1> = <var:R> \} \\ \{ <var:n> = <var:R> \land <var:Z1> = <var:R> \} \, <var:Z2> := <var:Z1> * <var:n> \, \{ <var:n> = <var:R> \land <var:Z1> = <var:R> \land <var:Z2> = <var:R> ^ <nat:2> \} \end{eqnarray} This is guaranteed by the variable assignmet inference rule defined in typical Hoare reasoning . Advancing to the following step seen in our code segment , we see \begin{eqnarray} \{ <var:n> = <var:R> \} \, <var:Z1> := <var:n> \, \{ <var:n> = <var:R> \land <var:Z1> = <var:R> \} \end{eqnarray} This is deduced using the variable assignmet inference rule defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:n> = <var:R> }} <var:Z1> := <var:n> ; <var:Z2> := <var:Z1> * <var:n> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Z2> := <var:Z2> * <nat:5> ; <var:l> := <var:Z2> <var:l> := <var:l> + <var:Z1> <var:l> := <var:l> + <var:Z0> {{ <var:l> = <nat:5> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:Z1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:Z1> = <var:R> /\ <var:Z2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:Z1> = <var:R> /\ <var:Z2> = <var:R> ^ <nat:2> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:Z1> = <nat:2> * <var:R> /\ <var:Z2> = <var:R> ^ <nat:2> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:Z1> = <nat:2> * <var:R> /\ <var:Z2> = <nat:5> * <var:R> ^ <nat:2> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:Z1> = <nat:2> * <var:R> /\ <var:Z0> = <nat:2> /\ <var:l> = <nat:5> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:Z0> = <nat:2> /\ <var:l> = <nat:5> * <var:R> ^ <nat:2> + <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:R> /\ <var:l> = <nat:5> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 