\begin{document} \begin{theorem} Let the following program as follows \begin{verbatim} <var:Y0> := <nat:1> ; <var:Y1> := <nat:4> ; <var:Y1> := <var:Y1> * <var:w> ; <var:z> := <var:Y1> ; <var:z> := <var:z> + <var:Y0> \end{verbatim} Allow it to be that $ <var:w> = <var:W> $ prior to executing the list of commands it holds that we see $ <var:z> = <nat:4> \times <var:W> + <nat:1> $ once code has finished . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions can be accomplished with typical Hoare logic . Moving forward to the next step , we have the environment update command \verb | <var:Y0> := <nat:1> ; | . This takes the precondition $ \{ <var:w> = <var:W> \} $ to the postcondition $ \{ <var:w> = <var:W> \land <var:Y0> = <nat:1> \} $ . This is ensured with the assignment rule given by Hoare techniques . Moving on to the subsequent line seen in the list of instructions , we see the statement \verb | <var:Y1> := <nat:4> ; | . This command transfers the condition $ \{ <var:w> = <var:W> \land <var:Y0> = <nat:1> \} $ as the condition $ \{ <var:w> = <var:W> \land <var:Y0> = <nat:1> \land <var:Y1> = <nat:4> \} $ . Following , we see the environment update command letting $ <var:Y1> * <var:w> $ to $ <var:Y1>$ . This code transfers the precondition $ \{ <var:w> = <var:W> \land <var:Y0> = <nat:1> \land <var:Y1> = <nat:4> \} $ to $ \{ <var:w> = <var:W> \land <var:Y0> = <nat:1> \land <var:Y1> = <nat:4> \times <var:W> \} $ . This is deduced using the assignment law defined in usual Hoare techniques . Immediately after , the line assigning $ <var:Y1> $ as $ <var:z>$ . This line transfers the condition $ \{ <var:w> = <var:W> \land <var:Y0> = <nat:1> \land <var:Y1> = <nat:4> \times <var:W> \} $ into $ \{ <var:w> = <var:W> \land <var:Y0> = <nat:1> \land <var:z> = <nat:4> \times <var:W> \} $ . Immediately after , we have the assignment line binding $ <var:z> + <var:Y0$ as $ <var:z>$ . This statement moves the condition $ \{ <var:w> = <var:W> \land <var:Y0> = <nat:1> \land <var:z> = <nat:4> \times <var:W> \} $ as the postcondition $ \{ <var:w> = <var:W> \land <var:z> = <nat:4> \times <var:W> + <nat:1> \} $ . This is deduced with the assignment rule from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:w> = <var:W> }} <var:Y0> := <nat:1> ; <var:Y1> := <nat:4> ; <var:Y1> := <var:Y1> * <var:w> ; <var:z> := <var:Y1> ; <var:z> := <var:z> + <var:Y0> {{ <var:z> = <nat:4> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:Y0> = <nat:1> /\ <var:Y1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:Y0> = <nat:1> /\ <var:Y1> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:Y0> = <nat:1> /\ <var:z> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:z> = <nat:4> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 