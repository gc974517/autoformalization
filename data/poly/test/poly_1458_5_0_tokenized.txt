\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:4> ; <var:E1> := <nat:5> ; <var:E1> := <var:E1> * <var:I> ; <var:G> := <var:E1> ; <var:G> := <var:G> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Allowing with some whole numbers $ <var:D> $ that we have $ <var:I> = <var:D> $ before the execution of our code , it holds that we have $ <var:G> = <nat:5> \times <var:D> + <nat:4> $ when series of commands has terminated . \end{theorem} \begin{proof} The method of proof for this program is shown with standard Hoare logic . Going forward , we have the variable binding statement \verb | <var:E0> := <nat:4> ; | . This redefines the condition $ \{ <var:I> = <var:D> \} $ into the condition $ \{ <var:I> = <var:D> \land <var:E0> = <nat:4> \} $ . Keeping momentum , we see the variable binding code letting $ <nat:5> $ to $ <var:E1>$ . This command redefines $ \{ <var:I> = <var:D> \land <var:E0> = <nat:4> \} $ to $ \{ <var:I> = <var:D> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> \} $ . This is deduced through the assignment inference rule of usual Hoare techniques . Observing the proceeding piece of code seen in our set of commands , we have the environment update command \verb | <var:E1> := <var:E1> * <var:I> ; | . This transfers $ \{ <var:I> = <var:D> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> \} $ toward the postcondition $ \{ <var:I> = <var:D> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> \times <var:D> \} $ . This is rigorously given with the assignment inference rule defined by Hoare reasoning . Jumping to the subsequent piece of code contained in our list of instructions , we see the environment update line letting $ <var:E1> $ as $ <var:G>$ . This line takes the precondition $ \{ <var:I> = <var:D> \land <var:E0> = <nat:4> \land <var:E1> = <nat:5> \times <var:D> \} $ to the postcondition $ \{ <var:I> = <var:D> \land <var:E0> = <nat:4> \land <var:G> = <nat:5> \times <var:D> \} $ . Moving forward , we see the variable binding command \verb | <var:G> := <var:G> + <var:E0> | . This statement transfers the precondition $ \{ <var:I> = <var:D> \land <var:E0> = <nat:4> \land <var:G> = <nat:5> \times <var:D> \} $ toward $ \{ <var:I> = <var:D> \land <var:G> = <nat:5> \times <var:D> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E0> := <nat:4> ; <var:E1> := <nat:5> ; <var:E1> := <var:E1> * <var:I> ; <var:G> := <var:E1> ; <var:G> := <var:G> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:I> = <var:D> }} <def:poly> {{ <var:G> = <nat:5> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:E0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:E0> = <nat:4> /\ <var:E1> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:E0> = <nat:4> /\ <var:G> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:G> = <nat:5> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 