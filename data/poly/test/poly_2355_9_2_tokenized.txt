\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:j> := <nat:2> ; <var:j> := <nat:1> + <var:j> * <var:x> ; <var:j> := <nat:2> + <var:j> * <var:x> ; <var:j> := <nat:1> + <var:j> * <var:x> ; <var:j> := <nat:3> + <var:j> * <var:x> ; <var:j> := <nat:4> + <var:j> * <var:x> ; <var:j> := <nat:3> + <var:j> * <var:x> ; <var:j> := <nat:3> + <var:j> * <var:x> ; <var:j> := <nat:4> + <var:j> * <var:x> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:x> = <var:X> $ assuming some whole numbers $ <var:X> $ before evaluating the code it follows that $ <var:j> = <nat:2> \cdot <var:X> ^ <nat:8> + <nat:1> \cdot <var:X> ^ <nat:7> + <nat:2> \cdot <var:X> ^ <nat:6> + <nat:1> \cdot <var:X> ^ <nat:5> + <nat:3> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + <nat:4> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:x> = <var:X> \} \\ <var:j> := <nat:2> ; \\ \{ <var:x> = <var:X> \land <var:j> = <nat:2> \} \\ <var:j> := <nat:1> + <var:j> * <var:x> ; \\ \{ <var:x> = <var:X> \land <var:j> = <nat:2> * <var:X> + <nat:1> \} \\ <var:j> := <nat:2> + <var:j> * <var:x> ; \\ \{ <var:x> = <var:X> \land <var:j> = <nat:2> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:2> \} \\ <var:j> := <nat:1> + <var:j> * <var:x> ; \\ \{ <var:x> = <var:X> \land <var:j> = <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:1> \} \\ <var:j> := <nat:3> + <var:j> * <var:x> ; \\ \{ <var:x> = <var:X> \land <var:j> = <nat:2> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> \} \\ <var:j> := <nat:4> + <var:j> * <var:x> ; \\ \{ <var:x> = <var:X> \land <var:j> = <nat:2> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> \} \\ <var:j> := <nat:3> + <var:j> * <var:x> ; \\ \{ <var:x> = <var:X> \land <var:j> = <nat:2> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:3> \} \\ <var:j> := <nat:3> + <var:j> * <var:x> ; \\ \{ <var:x> = <var:X> \land <var:j> = <nat:2> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:3> \} \\ <var:j> := <nat:4> + <var:j> * <var:x> \\ \{ <var:x> = <var:X> \land <var:j> = <nat:2> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> \} \end{eqnarray} As a consequence , the set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:2> ; <var:j> := <nat:1> + <var:j> * <var:x> ; <var:j> := <nat:2> + <var:j> * <var:x> ; <var:j> := <nat:1> + <var:j> * <var:x> ; <var:j> := <nat:3> + <var:j> * <var:x> ; <var:j> := <nat:4> + <var:j> * <var:x> ; <var:j> := <nat:3> + <var:j> * <var:x> ; <var:j> := <nat:3> + <var:j> * <var:x> ; <var:j> := <nat:4> + <var:j> * <var:x> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:x> = <var:X> }} <def:poly> {{ <var:j> = <nat:2> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:j> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:j> = <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:j> = <nat:2> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:j> = <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:j> = <nat:2> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:j> = <nat:2> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:j> = <nat:2> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:j> = <nat:2> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:X> /\ <var:j> = <nat:2> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 