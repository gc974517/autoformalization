\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:Z> := <nat:4> ; <var:Z> := <nat:1> + <var:Z> * <var:d> ; <var:Z> := <nat:4> + <var:Z> * <var:d> ; <var:Z> := <nat:4> + <var:Z> * <var:d> ; <var:Z> := <nat:1> + <var:Z> * <var:d> ; <var:Z> := <nat:4> + <var:Z> * <var:d> ; <var:Z> := <nat:3> + <var:Z> * <var:d> ; <var:Z> := <nat:1> + <var:Z> * <var:d> ; <var:Z> := <var:Z> * <var:d> ; <var:Z> := <nat:2> + <var:Z> * <var:d> ; <var:Z> := <var:Z> * <var:d> ; <var:Z> := <nat:4> + <var:Z> * <var:d> ; <var:Z> := <nat:4> + <var:Z> * <var:d> \end{verbatim} Assume that $ <var:d> = <var:l> $ before interpreting our code it must be that $ <var:Z> = <nat:4> * <var:l> ^ <nat:12> + <nat:1> * <var:l> ^ <nat:11> + <nat:4> * <var:l> ^ <nat:10> + <nat:4> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of our program is shown using typical Hoare reasoning . Jumping to the proceeding step contained in the series of instructions , we have the variable assignmet command \verb | <var:Z> := <nat:4> ; | . This statement moves the precondition $ \{ <var:d> = <var:l> \} $ as the condition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \} $ . Immediately following , the command binding $ <nat:1> + <var:Z> * <var:d> $ to $ <var:Z>$ . This takes $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \} $ into the postcondition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> + <nat:1> \} $ . This is deduced with the assignment scheme found in Hoare techniques . Shifting focus toward the next bit of code found in the series of instructions , the assignment command \verb | <var:Z> := <nat:4> + <var:Z> * <var:d> ; | . This line redefines the precondition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> + <nat:1> \} $ to the postcondition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + <nat:4> \} $ . Keeping momentum , we have the variable update command \verb | <var:Z> := <nat:4> + <var:Z> * <var:d> ; | . This statement takes the precondition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + <nat:4> \} $ as the condition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> + <nat:4> \} $ . This is shown to be logically sound using the assignment scheme in standard Hoare logic . Observing the upcoming step seen in our code segment , we see the environment update command \verb | <var:Z> := <nat:1> + <var:Z> * <var:d> ; | . This command redefines the precondition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> + <nat:4> \} $ into $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> + <nat:1> \} $ . This is guaranteed using the assignment scheme defined by usual Hoare techniques . Moving forward to the subsequent line contained in the set of instructions , we see the environment update code binding $ <nat:4> + <var:Z> * <var:d> $ toward $ <var:Z>$ . This line takes $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> + <nat:1> \} $ to the postcondition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:4> + <nat:4> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + <nat:4> \} $ . Shifting focus toward the proceeding piece of code contained in our series of instructions , we see the variable update code binding $ <nat:3> + <var:Z> * <var:d> $ toward $ <var:Z>$ . This transfers $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:4> + <nat:4> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + <nat:4> \} $ as $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:6> + <nat:1> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> + <nat:3> \} $ . This is shown to be logically sound by the assignment law given in standard Hoare logic . Moving forward to the next step , we have the variable update statement \verb | <var:Z> := <nat:1> + <var:Z> * <var:d> ; | . This advances the precondition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:6> + <nat:1> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> + <nat:3> \} $ to the condition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:7> + <nat:1> \cdot <var:l> ^ <nat:6> + <nat:4> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:3> \cdot <var:l> + <nat:1> \} $ . Next , the variable binding statement \verb | <var:Z> := <var:Z> * <var:d> ; | . This redefines $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:7> + <nat:1> \cdot <var:l> ^ <nat:6> + <nat:4> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:3> \cdot <var:l> + <nat:1> \} $ as the condition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:8> + <nat:1> \cdot <var:l> ^ <nat:7> + <nat:4> \cdot <var:l> ^ <nat:6> + <nat:4> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:4> + <nat:4> \cdot <var:l> ^ <nat:3> + <nat:3> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + \} $ . This is ensured using the assignment inference rule of Hoare techniques . Taking another step toward the proceeding line of code seen in the code segment , the variable update statement \verb | <var:Z> := <nat:2> + <var:Z> * <var:d> ; | . This command advances $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:8> + <nat:1> \cdot <var:l> ^ <nat:7> + <nat:4> \cdot <var:l> ^ <nat:6> + <nat:4> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:4> + <nat:4> \cdot <var:l> ^ <nat:3> + <nat:3> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + \} $ as the postcondition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:9> + <nat:1> \cdot <var:l> ^ <nat:8> + <nat:4> \cdot <var:l> ^ <nat:7> + <nat:4> \cdot <var:l> ^ <nat:6> + <nat:1> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:3> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:2> \} $ . This is shown by the assignment inference rule defined in typical Hoare techniques . Immediately following , the binding code letting $ <var:Z> * <var:d> $ to $ <var:Z>$ . This transfers the condition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:9> + <nat:1> \cdot <var:l> ^ <nat:8> + <nat:4> \cdot <var:l> ^ <nat:7> + <nat:4> \cdot <var:l> ^ <nat:6> + <nat:1> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:3> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:2> \} $ to $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:10> + <nat:1> \cdot <var:l> ^ <nat:9> + <nat:4> \cdot <var:l> ^ <nat:8> + <nat:4> \cdot <var:l> ^ <nat:7> + <nat:1> \cdot <var:l> ^ <nat:6> + <nat:4> \cdot <var:l> ^ <nat:5> + <nat:3> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> + \} $ . This is sound by the assignment scheme defined in standard Hoare reasoning . Observing the following command found in the code segment , we have the environment update line \verb | <var:Z> := <nat:4> + <var:Z> * <var:d> ; | . This code moves the condition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:10> + <nat:1> \cdot <var:l> ^ <nat:9> + <nat:4> \cdot <var:l> ^ <nat:8> + <nat:4> \cdot <var:l> ^ <nat:7> + <nat:1> \cdot <var:l> ^ <nat:6> + <nat:4> \cdot <var:l> ^ <nat:5> + <nat:3> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> + \} $ as the postcondition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:11> + <nat:1> \cdot <var:l> ^ <nat:10> + <nat:4> \cdot <var:l> ^ <nat:9> + <nat:4> \cdot <var:l> ^ <nat:8> + <nat:1> \cdot <var:l> ^ <nat:7> + <nat:4> \cdot <var:l> ^ <nat:6> + <nat:3> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:4> \} $ . Moving on to the following bit of code contained in the code segment , the binding line \verb | <var:Z> := <nat:4> + <var:Z> * <var:d> | . This transfers the precondition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:11> + <nat:1> \cdot <var:l> ^ <nat:10> + <nat:4> \cdot <var:l> ^ <nat:9> + <nat:4> \cdot <var:l> ^ <nat:8> + <nat:1> \cdot <var:l> ^ <nat:7> + <nat:4> \cdot <var:l> ^ <nat:6> + <nat:3> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:4> \} $ into the postcondition $ \{ <var:d> = <var:l> \land <var:Z> = <nat:4> \cdot <var:l> ^ <nat:12> + <nat:1> \cdot <var:l> ^ <nat:11> + <nat:4> \cdot <var:l> ^ <nat:10> + <nat:4> \cdot <var:l> ^ <nat:9> + <nat:1> \cdot <var:l> ^ <nat:8> + <nat:4> \cdot <var:l> ^ <nat:7> + <nat:3> \cdot <var:l> ^ <nat:6> + <nat:1> \cdot <var:l> ^ <nat:5> + <nat:2> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:d> = <var:l> }} <var:Z> := <nat:4> ; <var:Z> := <nat:1> + <var:Z> * <var:d> ; <var:Z> := <nat:4> + <var:Z> * <var:d> ; <var:Z> := <nat:4> + <var:Z> * <var:d> ; <var:Z> := <nat:1> + <var:Z> * <var:d> ; <var:Z> := <nat:4> + <var:Z> * <var:d> ; <var:Z> := <nat:3> + <var:Z> * <var:d> ; <var:Z> := <nat:1> + <var:Z> * <var:d> ; <var:Z> := <var:Z> * <var:d> ; <var:Z> := <nat:2> + <var:Z> * <var:d> ; <var:Z> := <var:Z> * <var:d> ; <var:Z> := <nat:4> + <var:Z> * <var:d> ; <var:Z> := <nat:4> + <var:Z> * <var:d> {{ <var:Z> = <nat:4> * <var:l> ^ <nat:12> + <nat:1> * <var:l> ^ <nat:11> + <nat:4> * <var:l> ^ <nat:10> + <nat:4> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:Z> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:Z> = <nat:4> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:Z> = <nat:4> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:Z> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:Z> = <nat:4> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:Z> = <nat:4> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:Z> = <nat:4> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:Z> = <nat:4> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:Z> = <nat:4> * <var:l> ^ <nat:8> + <nat:1> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:Z> = <nat:4> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:Z> = <nat:4> * <var:l> ^ <nat:10> + <nat:1> * <var:l> ^ <nat:9> + <nat:4> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:2> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:Z> = <nat:4> * <var:l> ^ <nat:11> + <nat:1> * <var:l> ^ <nat:10> + <nat:4> * <var:l> ^ <nat:9> + <nat:4> * <var:l> ^ <nat:8> + <nat:1> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:Z> = <nat:4> * <var:l> ^ <nat:12> + <nat:1> * <var:l> ^ <nat:11> + <nat:4> * <var:l> ^ <nat:10> + <nat:4> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 