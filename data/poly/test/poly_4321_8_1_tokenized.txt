\begin{document} \begin{theorem} Take a series of instructions as follows \begin{verbatim} <var:B1> := <var:w> ; <var:B2> := <var:B1> * <var:w> ; <var:B0> := <nat:9> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:2> ; <var:R> := <var:B2> <var:R> := <var:R> + <var:B1> <var:R> := <var:R> + <var:B0> \end{verbatim} Allow that $ <var:w> = <var:z> $ before evaluating this program it follows that we see $ <var:R> = <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:9> $ . \end{theorem} \begin{proof} Notice this decorated code . \begin{eqnarray} \{ <var:w> = <var:z> \} \\ <var:B1> := <var:w> ; \\ \{ <var:w> = <var:z> \land <var:B1> = <var:z> \} \\ <var:B2> := <var:B1> * <var:w> ; \\ \{ <var:w> = <var:z> \land <var:B1> = <var:z> \land <var:B2> = <var:z> ^ <nat:2> \} \\ <var:B0> := <nat:9> ; \\ \{ <var:w> = <var:z> \land <var:B1> = <var:z> \land <var:B2> = <var:z> ^ <nat:2> \land <var:B0> = <nat:9> \} \\ <var:B1> := <var:B1> * <nat:2> ; \\ \{ <var:w> = <var:z> \land <var:B1> = <nat:2> * <var:z> \land <var:B2> = <var:z> ^ <nat:2> \land <var:B0> = <nat:9> \} \\ <var:B2> := <var:B2> * <nat:2> ; \\ \{ <var:w> = <var:z> \land <var:B1> = <nat:2> * <var:z> \land <var:B2> = <nat:2> * <var:z> ^ <nat:2> \land <var:B0> = <nat:9> \} \\ <var:R> := <var:B2> \\ \{ <var:w> = <var:z> \land <var:B1> = <nat:2> * <var:z> \land <var:B0> = <nat:9> \land <var:R> = <nat:2> * <var:z> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:B1> \\ \{ <var:w> = <var:z> \land <var:B0> = <nat:9> \land <var:R> = <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> \} \\ <var:R> := <var:R> + <var:B0> \\ \{ <var:w> = <var:z> \land <var:R> = <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:9> \} \end{eqnarray} Utilizing typical Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:w> = <var:z> }} <var:B1> := <var:w> ; <var:B2> := <var:B1> * <var:w> ; <var:B0> := <nat:9> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:2> ; <var:R> := <var:B2> <var:R> := <var:R> + <var:B1> <var:R> := <var:R> + <var:B0> {{ <var:R> = <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:B1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:B1> = <var:z> /\ <var:B2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:B1> = <var:z> /\ <var:B2> = <var:z> ^ <nat:2> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:B1> = <nat:2> * <var:z> /\ <var:B2> = <var:z> ^ <nat:2> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:B1> = <nat:2> * <var:z> /\ <var:B2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:B1> = <nat:2> * <var:z> /\ <var:B0> = <nat:9> /\ <var:R> = <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:B0> = <nat:9> /\ <var:R> = <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:z> /\ <var:R> = <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 