\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:2> ; <var:U> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> . Assume that we have $ <var:A> = <var:S> $ --- for every whole numbers $ <var:S> $ --- before evaluating our code then we have $ <var:U> = <nat:2> $ after code segment is done executing . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:A> = <var:S> \} \\ <var:o0> := <nat:2> ; \\ \{ <var:A> = <var:S> \land <var:o0> = <nat:2> \} \\ <var:U> := <var:o0> \\ \{ <var:A> = <var:S> \land <var:U> = <nat:2> \} \end{eqnarray} Furthering executing our set of instructions gives : \begin{eqnarray} \end{eqnarray} Therefore , this list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:2> ; <var:U> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:A> = <var:S> }} <def:poly> {{ <var:U> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:S> /\ <var:U> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 