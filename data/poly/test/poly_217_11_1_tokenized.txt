\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:h1> := <var:p> ; <var:h2> := <var:h1> * <var:p> ; <var:h3> := <var:h2> * <var:p> ; <var:h0> := <nat:3> ; <var:h1> := <var:h1> * <nat:6> ; <var:h2> := <var:h2> * <nat:1> ; <var:h3> := <var:h3> * <nat:1> ; <var:r> := <var:h3> <var:r> := <var:r> + <var:h2> <var:r> := <var:r> + <var:h1> <var:r> := <var:r> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:p> = <var:S> $ before interpreting our series of instructions it must be that we see $ <var:r> = <nat:1> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:3> $ after set of instructions is done . \end{theorem} \begin{proof} Notice this decorated program . \begin{eqnarray} \{ <var:p> = <var:S> \} \\ <var:h1> := <var:p> ; \\ \{ <var:p> = <var:S> \land <var:h1> = <var:S> \} \\ <var:h2> := <var:h1> * <var:p> ; \\ \{ <var:p> = <var:S> \land <var:h1> = <var:S> \land <var:h2> = <var:S> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:p> ; \\ \{ <var:p> = <var:S> \land <var:h1> = <var:S> \land <var:h2> = <var:S> ^ <nat:2> \land <var:h3> = <var:S> ^ <nat:3> \} \\ <var:h0> := <nat:3> ; \\ \{ <var:p> = <var:S> \land <var:h1> = <var:S> \land <var:h2> = <var:S> ^ <nat:2> \land <var:h3> = <var:S> ^ <nat:3> \land <var:h0> = <nat:3> \} \\ <var:h1> := <var:h1> * <nat:6> ; \\ \{ <var:p> = <var:S> \land <var:h1> = <nat:6> \times <var:S> \land <var:h2> = <var:S> ^ <nat:2> \land <var:h3> = <var:S> ^ <nat:3> \land <var:h0> = <nat:3> \} \\ <var:h2> := <var:h2> * <nat:1> ; \\ \{ <var:p> = <var:S> \land <var:h1> = <nat:6> \times <var:S> \land <var:h2> = <nat:1> \times <var:S> ^ <nat:2> \land <var:h3> = <var:S> ^ <nat:3> \land <var:h0> = <nat:3> \} \\ <var:h3> := <var:h3> * <nat:1> ; \\ \{ <var:p> = <var:S> \land <var:h1> = <nat:6> \times <var:S> \land <var:h2> = <nat:1> \times <var:S> ^ <nat:2> \land <var:h3> = <nat:1> \times <var:S> ^ <nat:3> \land <var:h0> = <nat:3> \} \\ <var:r> := <var:h3> \\ \{ <var:p> = <var:S> \land <var:h1> = <nat:6> \times <var:S> \land <var:h2> = <nat:1> \times <var:S> ^ <nat:2> \land <var:h0> = <nat:3> \land <var:r> = <nat:1> \times <var:S> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:h2> \\ \{ <var:p> = <var:S> \land <var:h1> = <nat:6> \times <var:S> \land <var:h0> = <nat:3> \land <var:r> = <nat:1> \times <var:S> ^ <nat:3> + <nat:1> \times <var:S> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:h1> \\ \{ <var:p> = <var:S> \land <var:h0> = <nat:3> \land <var:r> = <nat:1> \times <var:S> ^ <nat:3> + <nat:1> \times <var:S> ^ <nat:2> + <nat:6> \times <var:S> \} \\ <var:r> := <var:r> + <var:h0> \\ \{ <var:p> = <var:S> \land <var:r> = <nat:1> \times <var:S> ^ <nat:3> + <nat:1> \times <var:S> ^ <nat:2> + <nat:6> \times <var:S> + <nat:3> \} \end{eqnarray} The application of Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:p> ; <var:h2> := <var:h1> * <var:p> ; <var:h3> := <var:h2> * <var:p> ; <var:h0> := <nat:3> ; <var:h1> := <var:h1> * <nat:6> ; <var:h2> := <var:h2> * <nat:1> ; <var:h3> := <var:h3> * <nat:1> ; <var:r> := <var:h3> <var:r> := <var:r> + <var:h2> <var:r> := <var:r> + <var:h1> <var:r> := <var:r> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:p> = <var:S> }} <def:poly> {{ <var:r> = <nat:1> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:S> /\ <var:h1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:S> /\ <var:h1> = <var:S> /\ <var:h2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:S> /\ <var:h1> = <var:S> /\ <var:h2> = <var:S> ^ <nat:2> /\ <var:h3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:S> /\ <var:h1> = <var:S> /\ <var:h2> = <var:S> ^ <nat:2> /\ <var:h3> = <var:S> ^ <nat:3> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:S> /\ <var:h1> = <nat:6> * <var:S> /\ <var:h2> = <var:S> ^ <nat:2> /\ <var:h3> = <var:S> ^ <nat:3> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:S> /\ <var:h1> = <nat:6> * <var:S> /\ <var:h2> = <nat:1> * <var:S> ^ <nat:2> /\ <var:h3> = <var:S> ^ <nat:3> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:S> /\ <var:h1> = <nat:6> * <var:S> /\ <var:h2> = <nat:1> * <var:S> ^ <nat:2> /\ <var:h3> = <nat:1> * <var:S> ^ <nat:3> /\ <var:h0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:S> /\ <var:h1> = <nat:6> * <var:S> /\ <var:h2> = <nat:1> * <var:S> ^ <nat:2> /\ <var:h0> = <nat:3> /\ <var:r> = <nat:1> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:S> /\ <var:h1> = <nat:6> * <var:S> /\ <var:h0> = <nat:3> /\ <var:r> = <nat:1> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:S> /\ <var:h0> = <nat:3> /\ <var:r> = <nat:1> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:S> /\ <var:r> = <nat:1> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 