\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J1> := <var:m> ; <var:J2> := <var:J1> * <var:m> ; <var:J0> := <nat:6> ; <var:J1> := <var:J1> * <nat:8> ; <var:J2> := <var:J2> * <nat:8> ; <var:s> := <var:J2> <var:s> := <var:s> + <var:J1> <var:s> := <var:s> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:m> = <var:t> $ before executing our set of commands , then we have $ <var:s> = <nat:8> \times <var:t> ^ <nat:2> + <nat:8> \times <var:t> + <nat:6> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques produces : \begin{eqnarray} \{ <var:m> = <var:t> \} \\ <var:J1> := <var:m> ; \\ \{ <var:m> = <var:t> \land <var:J1> = <var:t> \} \\ <var:J2> := <var:J1> * <var:m> ; \\ \{ <var:m> = <var:t> \land <var:J1> = <var:t> \land <var:J2> = <var:t> ^ <nat:2> \} \\ <var:J0> := <nat:6> ; \\ \{ <var:m> = <var:t> \land <var:J1> = <var:t> \land <var:J2> = <var:t> ^ <nat:2> \land <var:J0> = <nat:6> \} \\ <var:J1> := <var:J1> * <nat:8> ; \\ \{ <var:m> = <var:t> \land <var:J1> = <nat:8> \times <var:t> \land <var:J2> = <var:t> ^ <nat:2> \land <var:J0> = <nat:6> \} \\ <var:J2> := <var:J2> * <nat:8> ; \\ \{ <var:m> = <var:t> \land <var:J1> = <nat:8> \times <var:t> \land <var:J2> = <nat:8> \times <var:t> ^ <nat:2> \land <var:J0> = <nat:6> \} \\ <var:s> := <var:J2> \\ \{ <var:m> = <var:t> \land <var:J1> = <nat:8> \times <var:t> \land <var:J0> = <nat:6> \land <var:s> = <nat:8> \times <var:t> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:J1> \\ \{ <var:m> = <var:t> \land <var:J0> = <nat:6> \land <var:s> = <nat:8> \times <var:t> ^ <nat:2> + <nat:8> \times <var:t> \} \\ <var:s> := <var:s> + <var:J0> \\ \{ <var:m> = <var:t> \land <var:s> = <nat:8> \times <var:t> ^ <nat:2> + <nat:8> \times <var:t> + <nat:6> \} \end{eqnarray} Considering the preceding argument , our set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J1> := <var:m> ; <var:J2> := <var:J1> * <var:m> ; <var:J0> := <nat:6> ; <var:J1> := <var:J1> * <nat:8> ; <var:J2> := <var:J2> * <nat:8> ; <var:s> := <var:J2> <var:s> := <var:s> + <var:J1> <var:s> := <var:s> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:m> = <var:t> }} <def:poly> {{ <var:s> = <nat:8> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:J1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:J1> = <var:t> /\ <var:J2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:J1> = <var:t> /\ <var:J2> = <var:t> ^ <nat:2> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:J1> = <nat:8> * <var:t> /\ <var:J2> = <var:t> ^ <nat:2> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:J1> = <nat:8> * <var:t> /\ <var:J2> = <nat:8> * <var:t> ^ <nat:2> /\ <var:J0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:J1> = <nat:8> * <var:t> /\ <var:J0> = <nat:6> /\ <var:s> = <nat:8> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:J0> = <nat:6> /\ <var:s> = <nat:8> * <var:t> ^ <nat:2> + <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:s> = <nat:8> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 