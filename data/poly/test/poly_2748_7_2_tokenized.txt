\begin{document} \begin{theorem} Take a code in \emph{Imp} such that \begin{verbatim} <var:e> := <nat:4> ; <var:e> := <nat:1> + <var:e> * <var:N> ; <var:e> := <nat:1> + <var:e> * <var:N> ; <var:e> := <nat:2> + <var:e> * <var:N> ; <var:e> := <nat:2> + <var:e> * <var:N> ; <var:e> := <nat:3> + <var:e> * <var:N> ; <var:e> := <nat:1> + <var:e> * <var:N> \end{verbatim} Allowing that $ <var:N> = <var:p> $ before interpreting our list of commands , then we see $ <var:e> = <nat:4> \times <var:p> ^ <nat:6> + <nat:1> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:1> $ when segment of code has terminated . \end{theorem} \begin{proof} The argument for this list of commands is given through typical Hoare logic . Moving onward , \verb | { <var:N> = <var:p> } <var:e> := <nat:4> { <var:N> = <var:p> \land <var:e> = <nat:4> } | , \verb | { <var:N> = <var:p> \land <var:e> = <nat:4> } <var:e> := <nat:1> + <var:e> * <var:N> { <var:N> = <var:p> \land <var:e> = <nat:4> * <var:p> + <nat:1> } | , \verb | { <var:N> = <var:p> \land <var:e> = <nat:4> * <var:p> + <nat:1> } <var:e> := <nat:1> + <var:e> * <var:N> { <var:N> = <var:p> \land <var:e> = <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> } | and \verb | { <var:N> = <var:p> \land <var:e> = <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> } <var:e> := <nat:2> + <var:e> * <var:N> { <var:N> = <var:p> \land <var:e> = <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> } | . This is shown to be logically sound using the variable binding law obtained from typical Hoare logic . Observing the next bits of codein the series of instructions , we see \verb | { <var:N> = <var:p> } <var:e> := <nat:4> { <var:N> = <var:p> \land <var:e> = <nat:4> } | and \verb | { <var:N> = <var:p> \land <var:e> = <nat:4> } <var:e> := <nat:1> + <var:e> * <var:N> { <var:N> = <var:p> \land <var:e> = <nat:4> * <var:p> + <nat:1> } | . This is guaranteed by the binding scheme defined in standard Hoare reasoning . Moving forward to the upcoming statement in the list of commands , \verb | { <var:N> = <var:p> } <var:e> := <nat:4> { <var:N> = <var:p> \land <var:e> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:N> = <var:p> }} <var:e> := <nat:4> ; <var:e> := <nat:1> + <var:e> * <var:N> ; <var:e> := <nat:1> + <var:e> * <var:N> ; <var:e> := <nat:2> + <var:e> * <var:N> ; <var:e> := <nat:2> + <var:e> * <var:N> ; <var:e> := <nat:3> + <var:e> * <var:N> ; <var:e> := <nat:1> + <var:e> * <var:N> {{ <var:e> = <nat:4> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:e> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:e> = <nat:4> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:e> = <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:e> = <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:e> = <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:e> = <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:e> = <nat:4> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 