\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:2> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:G> ; <var:A> := <var:F1> ; <var:A> := <var:A> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Given given positive integers $ <var:Y> $ it to hold that $ <var:G> = <var:Y> $ before the evaluation of our set of instructions , it must be that we have $ <var:A> = <nat:3> \cdot <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands is given with the below decorated series of commands . \begin{eqnarray} \{ <var:G> = <var:Y> \} \\ <var:F0> := <nat:2> ; \\ \{ <var:G> = <var:Y> \land <var:F0> = <nat:2> \} \\ <var:F1> := <nat:3> ; \\ \{ <var:G> = <var:Y> \land <var:F0> = <nat:2> \land <var:F1> = <nat:3> \} \\ <var:F1> := <var:F1> * <var:G> ; \\ \{ <var:G> = <var:Y> \land <var:F0> = <nat:2> \land <var:F1> = <nat:3> * <var:Y> \} \\ <var:A> := <var:F1> ; \\ \{ <var:G> = <var:Y> \land <var:F0> = <nat:2> \land <var:A> = <nat:3> * <var:Y> \} \\ <var:A> := <var:A> + <var:F0> \\ \{ <var:G> = <var:Y> \land <var:A> = <nat:3> * <var:Y> + <nat:2> \} \end{eqnarray} The application of usual Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:2> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:G> ; <var:A> := <var:F1> ; <var:A> := <var:A> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:G> = <var:Y> }} <def:poly> {{ <var:A> = <nat:3> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:F0> = <nat:2> /\ <var:A> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Y> /\ <var:A> = <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 