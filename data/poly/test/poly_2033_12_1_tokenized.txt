\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x1> := <var:Y> ; <var:x2> := <var:x1> * <var:Y> ; <var:x3> := <var:x2> * <var:Y> ; <var:x4> := <var:x3> * <var:Y> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:1> ; <var:x3> := <var:x3> * <nat:1> ; <var:x4> := <var:x4> * <nat:1> ; <var:y> := <var:x4> <var:y> := <var:y> + <var:x3> <var:y> := <var:y> + <var:x1> <var:y> := <var:y> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:Y> = <var:a> $ before the evaluation of this code segment , then we see $ <var:y> = <nat:1> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:1> * <var:a> + <nat:2> $ . \end{theorem} \begin{proof} The proof of this series of commands is done through the following decorated code . \begin{eqnarray} \{ <var:Y> = <var:a> \} \\ <var:x1> := <var:Y> ; \\ \{ <var:Y> = <var:a> \land <var:x1> = <var:a> \} \\ <var:x2> := <var:x1> * <var:Y> ; \\ \{ <var:Y> = <var:a> \land <var:x1> = <var:a> \land <var:x2> = <var:a> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:Y> ; \\ \{ <var:Y> = <var:a> \land <var:x1> = <var:a> \land <var:x2> = <var:a> ^ <nat:2> \land <var:x3> = <var:a> ^ <nat:3> \} \\ <var:x4> := <var:x3> * <var:Y> ; \\ \{ <var:Y> = <var:a> \land <var:x1> = <var:a> \land <var:x2> = <var:a> ^ <nat:2> \land <var:x3> = <var:a> ^ <nat:3> \land <var:x4> = <var:a> ^ <nat:4> \} \\ <var:x0> := <nat:2> ; \\ \{ <var:Y> = <var:a> \land <var:x1> = <var:a> \land <var:x2> = <var:a> ^ <nat:2> \land <var:x3> = <var:a> ^ <nat:3> \land <var:x4> = <var:a> ^ <nat:4> \land <var:x0> = <nat:2> \} \\ <var:x1> := <var:x1> * <nat:1> ; \\ \{ <var:Y> = <var:a> \land <var:x1> = <nat:1> \cdot <var:a> \land <var:x2> = <var:a> ^ <nat:2> \land <var:x3> = <var:a> ^ <nat:3> \land <var:x4> = <var:a> ^ <nat:4> \land <var:x0> = <nat:2> \} \\ <var:x3> := <var:x3> * <nat:1> ; \\ \{ <var:Y> = <var:a> \land <var:x1> = <nat:1> \cdot <var:a> \land <var:x2> = <var:a> ^ <nat:2> \land <var:x3> = <nat:1> \cdot <var:a> ^ <nat:3> \land <var:x4> = <var:a> ^ <nat:4> \land <var:x0> = <nat:2> \} \\ <var:x4> := <var:x4> * <nat:1> ; \\ \{ <var:Y> = <var:a> \land <var:x1> = <nat:1> \cdot <var:a> \land <var:x2> = <var:a> ^ <nat:2> \land <var:x3> = <nat:1> \cdot <var:a> ^ <nat:3> \land <var:x4> = <nat:1> \cdot <var:a> ^ <nat:4> \land <var:x0> = <nat:2> \} \\ <var:y> := <var:x4> \\ \{ <var:Y> = <var:a> \land <var:x1> = <nat:1> \cdot <var:a> \land <var:x2> = <var:a> ^ <nat:2> \land <var:x3> = <nat:1> \cdot <var:a> ^ <nat:3> \land <var:x0> = <nat:2> \land <var:y> = <nat:1> \cdot <var:a> ^ <nat:4> \} \\ <var:y> := <var:y> + <var:x3> \\ \{ <var:Y> = <var:a> \land <var:x1> = <nat:1> \cdot <var:a> \land <var:x2> = <var:a> ^ <nat:2> \land <var:x0> = <nat:2> \land <var:y> = <nat:1> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:x1> \\ \{ <var:Y> = <var:a> \land <var:x0> = <nat:2> \land <var:y> = <nat:1> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> \} \\ <var:y> := <var:y> + <var:x0> \\ \{ <var:Y> = <var:a> \land <var:y> = <nat:1> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> + <nat:2> \} \end{eqnarray} Applying typical Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <var:x4> : string := " <var:x4> " . Definition <def:poly> := <var:x1> := <var:Y> ; <var:x2> := <var:x1> * <var:Y> ; <var:x3> := <var:x2> * <var:Y> ; <var:x4> := <var:x3> * <var:Y> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:1> ; <var:x3> := <var:x3> * <nat:1> ; <var:x4> := <var:x4> * <nat:1> ; <var:y> := <var:x4> <var:y> := <var:y> + <var:x3> <var:y> := <var:y> + <var:x1> <var:y> := <var:y> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:Y> = <var:a> }} <def:poly> {{ <var:y> = <nat:1> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:1> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:x1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:x1> = <var:a> /\ <var:x2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:x1> = <var:a> /\ <var:x2> = <var:a> ^ <nat:2> /\ <var:x3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:x1> = <var:a> /\ <var:x2> = <var:a> ^ <nat:2> /\ <var:x3> = <var:a> ^ <nat:3> /\ <var:x4> = <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:x1> = <var:a> /\ <var:x2> = <var:a> ^ <nat:2> /\ <var:x3> = <var:a> ^ <nat:3> /\ <var:x4> = <var:a> ^ <nat:4> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:x1> = <nat:1> * <var:a> /\ <var:x2> = <var:a> ^ <nat:2> /\ <var:x3> = <var:a> ^ <nat:3> /\ <var:x4> = <var:a> ^ <nat:4> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:x1> = <nat:1> * <var:a> /\ <var:x2> = <var:a> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:a> ^ <nat:3> /\ <var:x4> = <var:a> ^ <nat:4> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:x1> = <nat:1> * <var:a> /\ <var:x2> = <var:a> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:a> ^ <nat:3> /\ <var:x4> = <nat:1> * <var:a> ^ <nat:4> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:x1> = <nat:1> * <var:a> /\ <var:x2> = <var:a> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:a> ^ <nat:3> /\ <var:x0> = <nat:2> /\ <var:y> = <nat:1> * <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:x1> = <nat:1> * <var:a> /\ <var:x2> = <var:a> ^ <nat:2> /\ <var:x0> = <nat:2> /\ <var:y> = <nat:1> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:x0> = <nat:2> /\ <var:y> = <nat:1> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:a> /\ <var:y> = <nat:1> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:1> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 