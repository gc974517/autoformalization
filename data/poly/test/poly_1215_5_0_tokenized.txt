\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:5> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:S> ; <var:F> := <var:x1> ; <var:F> := <var:F> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Assuming $ <var:S> = <var:o> $ ( for every whole numbers $ <var:o> $ ) before the execution of the code segment then $ <var:F> = <nat:9> \times <var:o> + <nat:5> $ once list of commands exits . \end{theorem} \begin{proof} The course of logic for the list of commands is given using the following decorated series of instructions . \begin{eqnarray} \{ <var:S> = <var:o> \} \\ <var:x0> := <nat:5> ; \\ \{ <var:S> = <var:o> \land <var:x0> = <nat:5> \} \\ <var:x1> := <nat:9> ; \\ \{ <var:S> = <var:o> \land <var:x0> = <nat:5> \land <var:x1> = <nat:9> \} \\ <var:x1> := <var:x1> * <var:S> ; \\ \{ <var:S> = <var:o> \land <var:x0> = <nat:5> \land <var:x1> = <nat:9> \times <var:o> \} \\ <var:F> := <var:x1> ; \\ \{ <var:S> = <var:o> \land <var:x0> = <nat:5> \land <var:F> = <nat:9> \times <var:o> \} \\ <var:F> := <var:F> + <var:x0> \\ \{ <var:S> = <var:o> \land <var:F> = <nat:9> \times <var:o> + <nat:5> \} \end{eqnarray} Using usual Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x0> := <nat:5> ; <var:x1> := <nat:9> ; <var:x1> := <var:x1> * <var:S> ; <var:F> := <var:x1> ; <var:F> := <var:F> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:S> = <var:o> }} <def:poly> {{ <var:F> = <nat:9> * <var:o> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:x0> = <nat:5> /\ <var:F> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:F> = <nat:9> * <var:o> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 