\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:t> := <nat:3> ; <var:t> := <nat:3> + <var:t> * <var:A> ; <var:t> := <nat:4> + <var:t> * <var:A> ; <var:t> := <var:t> * <var:A> ; <var:t> := <nat:2> + <var:t> * <var:A> ; <var:t> := <nat:3> + <var:t> * <var:A> ; <var:t> := <nat:2> + <var:t> * <var:A> ; <var:t> := <nat:4> + <var:t> * <var:A> ; <var:t> := <var:t> * <var:A> ; <var:t> := <nat:1> + <var:t> * <var:A> ; <var:t> := <nat:4> + <var:t> * <var:A> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:A> = <var:f> $ prior to the evaluation of this series of instructions , it must be that we have $ <var:t> = <nat:3> \times <var:f> ^ <nat:10> + <nat:3> \times <var:f> ^ <nat:9> + <nat:4> \times <var:f> ^ <nat:8> + <nat:2> \times <var:f> ^ <nat:6> + <nat:3> \times <var:f> ^ <nat:5> + <nat:2> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques returns : \begin{eqnarray} \{ <var:A> = <var:f> \} \\ <var:t> := <nat:3> ; \\ \{ <var:A> = <var:f> \land <var:t> = <nat:3> \} \\ <var:t> := <nat:3> + <var:t> * <var:A> ; \\ \{ <var:A> = <var:f> \land <var:t> = <nat:3> * <var:f> + <nat:3> \} \end{eqnarray} Allowing interpreting the code results in : \begin{eqnarray} <var:t> := <nat:4> + <var:t> * <var:A> ; \\ \{ <var:A> = <var:f> \land <var:t> = <nat:3> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:4> \} \\ <var:t> := <var:t> * <var:A> ; \\ \{ <var:A> = <var:f> \land <var:t> = <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + \} \\ <var:t> := <nat:2> + <var:t> * <var:A> ; \\ \{ <var:A> = <var:f> \land <var:t> = <nat:3> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:2> \} \\ <var:t> := <nat:3> + <var:t> * <var:A> ; \\ \{ <var:A> = <var:f> \land <var:t> = <nat:3> * <var:f> ^ <nat:5> + <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> + <nat:3> \} \\ <var:t> := <nat:2> + <var:t> * <var:A> ; \\ \{ <var:A> = <var:f> \land <var:t> = <nat:3> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> \} \end{eqnarray} Advancing the execution of our series of commands returns : \begin{eqnarray} <var:t> := <nat:4> + <var:t> * <var:A> ; \\ \{ <var:A> = <var:f> \land <var:t> = <nat:3> * <var:f> ^ <nat:7> + <nat:3> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:4> \} \\ <var:t> := <var:t> * <var:A> ; \\ \{ <var:A> = <var:f> \land <var:t> = <nat:3> * <var:f> ^ <nat:8> + <nat:3> * <var:f> ^ <nat:7> + <nat:4> * <var:f> ^ <nat:6> + <nat:2> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + \} \\ <var:t> := <nat:1> + <var:t> * <var:A> ; \\ \{ <var:A> = <var:f> \land <var:t> = <nat:3> * <var:f> ^ <nat:9> + <nat:3> * <var:f> ^ <nat:8> + <nat:4> * <var:f> ^ <nat:7> + <nat:2> * <var:f> ^ <nat:5> + <nat:3> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:1> \} \\ <var:t> := <nat:4> + <var:t> * <var:A> \\ \{ <var:A> = <var:f> \land <var:t> = <nat:3> * <var:f> ^ <nat:10> + <nat:3> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:2> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:1> * <var:f> + <nat:4> \} \end{eqnarray} Given the above , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:3> ; <var:t> := <nat:3> + <var:t> * <var:A> ; <var:t> := <nat:4> + <var:t> * <var:A> ; <var:t> := <var:t> * <var:A> ; <var:t> := <nat:2> + <var:t> * <var:A> ; <var:t> := <nat:3> + <var:t> * <var:A> ; <var:t> := <nat:2> + <var:t> * <var:A> ; <var:t> := <nat:4> + <var:t> * <var:A> ; <var:t> := <var:t> * <var:A> ; <var:t> := <nat:1> + <var:t> * <var:A> ; <var:t> := <nat:4> + <var:t> * <var:A> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:A> = <var:f> }} <def:poly> {{ <var:t> = <nat:3> * <var:f> ^ <nat:10> + <nat:3> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:2> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:1> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:t> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:t> = <nat:3> * <var:f> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:t> = <nat:3> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:t> = <nat:3> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:t> = <nat:3> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:t> = <nat:3> * <var:f> ^ <nat:5> + <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:t> = <nat:3> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:t> = <nat:3> * <var:f> ^ <nat:7> + <nat:3> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:t> = <nat:3> * <var:f> ^ <nat:8> + <nat:3> * <var:f> ^ <nat:7> + <nat:4> * <var:f> ^ <nat:6> + <nat:2> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:t> = <nat:3> * <var:f> ^ <nat:9> + <nat:3> * <var:f> ^ <nat:8> + <nat:4> * <var:f> ^ <nat:7> + <nat:2> * <var:f> ^ <nat:5> + <nat:3> * <var:f> ^ <nat:4> + <nat:2> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:f> /\ <var:t> = <nat:3> * <var:f> ^ <nat:10> + <nat:3> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:2> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:5> + <nat:2> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 