\begin{document} \begin{theorem} Take a set of instructions as follows \begin{verbatim} <var:X1> := <var:O> ; <var:X2> := <var:X1> * <var:O> ; <var:X3> := <var:X2> * <var:O> ; <var:X0> := <nat:7> ; <var:X1> := <var:X1> * <nat:8> ; <var:X2> := <var:X2> * <nat:4> ; <var:X3> := <var:X3> * <nat:6> ; <var:e> := <var:X3> <var:e> := <var:e> + <var:X2> <var:e> := <var:e> + <var:X1> <var:e> := <var:e> + <var:X0> \end{verbatim} Assuming letting positive numbers $ <var:Q> $ it to be that $ <var:O> = <var:Q> $ ahead of the execution of this list of commands it holds that we see $ <var:e> = <nat:6> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:8> \times <var:Q> + <nat:7> $ when set of instructions is done . \end{theorem} \begin{proof} The argument for our series of commands can be given with usual Hoare reasoning . Further , we have the command giving $ <var:O> $ as $ <var:X1>$ . This moves $ \{ <var:O> = <var:Q> \} $ to $ \{ <var:O> = <var:Q> \land <var:X1> = <var:Q> \} $ . This is shown through the assignment rule obtained from standard Hoare techniques . Advancing on , the binding code assigning $ <var:X1> * <var:O> $ to $ <var:X2>$ . This takes the condition $ \{ <var:O> = <var:Q> \land <var:X1> = <var:Q> \} $ toward the postcondition $ \{ <var:O> = <var:Q> \land <var:X1> = <var:Q> \land <var:X2> = <var:Q> ^ <nat:2> \} $ . Taking another step toward the proceeding line of code contained in the list of commands , the environment update statement assigning $ <var:X2> * <var:O> $ to $ <var:X3>$ . This transfers the condition $ \{ <var:O> = <var:Q> \land <var:X1> = <var:Q> \land <var:X2> = <var:Q> ^ <nat:2> \} $ as the postcondition $ \{ <var:O> = <var:Q> \land <var:X1> = <var:Q> \land <var:X2> = <var:Q> ^ <nat:2> \land <var:X3> = <var:Q> ^ <nat:3> \} $ . Moving onward , we have the variable binding statement \verb | <var:X0> := <nat:7> ; | . This advances the precondition $ \{ <var:O> = <var:Q> \land <var:X1> = <var:Q> \land <var:X2> = <var:Q> ^ <nat:2> \land <var:X3> = <var:Q> ^ <nat:3> \} $ to $ \{ <var:O> = <var:Q> \land <var:X1> = <var:Q> \land <var:X2> = <var:Q> ^ <nat:2> \land <var:X3> = <var:Q> ^ <nat:3> \land <var:X0> = <nat:7> \} $ . Moving on to the next step , we see the command assigning $ <var:X1> * <nat:8> $ toward $ <var:X1>$ . This forwards the precondition $ \{ <var:O> = <var:Q> \land <var:X1> = <var:Q> \land <var:X2> = <var:Q> ^ <nat:2> \land <var:X3> = <var:Q> ^ <nat:3> \land <var:X0> = <nat:7> \} $ to the condition $ \{ <var:O> = <var:Q> \land <var:X1> = <nat:8> * <var:Q> \land <var:X2> = <var:Q> ^ <nat:2> \land <var:X3> = <var:Q> ^ <nat:3> \land <var:X0> = <nat:7> \} $ . This is rigorously given by the assignment law found in usual Hoare logic . Considering the subsequent bit of code contained in our code segment , we have the binding code \verb | <var:X2> := <var:X2> * <nat:4> ; | . This code advances the precondition $ \{ <var:O> = <var:Q> \land <var:X1> = <nat:8> * <var:Q> \land <var:X2> = <var:Q> ^ <nat:2> \land <var:X3> = <var:Q> ^ <nat:3> \land <var:X0> = <nat:7> \} $ toward the postcondition $ \{ <var:O> = <var:Q> \land <var:X1> = <nat:8> * <var:Q> \land <var:X2> = <nat:4> * <var:Q> ^ <nat:2> \land <var:X3> = <var:Q> ^ <nat:3> \land <var:X0> = <nat:7> \} $ . Further , we see the variable binding code \verb | <var:X3> := <var:X3> * <nat:6> ; | . This line moves the condition $ \{ <var:O> = <var:Q> \land <var:X1> = <nat:8> * <var:Q> \land <var:X2> = <nat:4> * <var:Q> ^ <nat:2> \land <var:X3> = <var:Q> ^ <nat:3> \land <var:X0> = <nat:7> \} $ into $ \{ <var:O> = <var:Q> \land <var:X1> = <nat:8> * <var:Q> \land <var:X2> = <nat:4> * <var:Q> ^ <nat:2> \land <var:X3> = <nat:6> * <var:Q> ^ <nat:3> \land <var:X0> = <nat:7> \} $ . This is given by the assignment scheme of standard Hoare techniques . Taking a look at the upcoming line of code seen in the series of instructions , the line yielding $ <var:X3$ into $ <var:e>$ . This advances the precondition $ \{ <var:O> = <var:Q> \land <var:X1> = <nat:8> * <var:Q> \land <var:X2> = <nat:4> * <var:Q> ^ <nat:2> \land <var:X3> = <nat:6> * <var:Q> ^ <nat:3> \land <var:X0> = <nat:7> \} $ as the postcondition $ \{ <var:O> = <var:Q> \land <var:X1> = <nat:8> * <var:Q> \land <var:X2> = <nat:4> * <var:Q> ^ <nat:2> \land <var:X0> = <nat:7> \land <var:e> = <nat:6> * <var:Q> ^ <nat:3> \} $ . Moving on , we see the variable binding command \verb | <var:e> := <var:e> + <var:X2> | . This statement advances $ \{ <var:O> = <var:Q> \land <var:X1> = <nat:8> * <var:Q> \land <var:X2> = <nat:4> * <var:Q> ^ <nat:2> \land <var:X0> = <nat:7> \land <var:e> = <nat:6> * <var:Q> ^ <nat:3> \} $ as the condition $ \{ <var:O> = <var:Q> \land <var:X1> = <nat:8> * <var:Q> \land <var:X0> = <nat:7> \land <var:e> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> \} $ . This is ensured through the assignment scheme of Hoare techniques . Now , we see the variable update line \verb | <var:e> := <var:e> + <var:X1> | . This command moves $ \{ <var:O> = <var:Q> \land <var:X1> = <nat:8> * <var:Q> \land <var:X0> = <nat:7> \land <var:e> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> \} $ to the postcondition $ \{ <var:O> = <var:Q> \land <var:X0> = <nat:7> \land <var:e> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> \} $ . This is rigorously given with the assignment rule of usual Hoare reasoning . Stepping forward , we see the line assigning $ <var:e> + <var:X0$ to $ <var:e>$ . This code transfers the precondition $ \{ <var:O> = <var:Q> \land <var:X0> = <nat:7> \land <var:e> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> \} $ as the condition $ \{ <var:O> = <var:Q> \land <var:e> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:7> \} $ . This is given by the assignment scheme from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:O> = <var:Q> }} <var:X1> := <var:O> ; <var:X2> := <var:X1> * <var:O> ; <var:X3> := <var:X2> * <var:O> ; <var:X0> := <nat:7> ; <var:X1> := <var:X1> * <nat:8> ; <var:X2> := <var:X2> * <nat:4> ; <var:X3> := <var:X3> * <nat:6> ; <var:e> := <var:X3> <var:e> := <var:e> + <var:X2> <var:e> := <var:e> + <var:X1> <var:e> := <var:e> + <var:X0> {{ <var:e> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:X1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:X1> = <var:Q> /\ <var:X2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:X1> = <var:Q> /\ <var:X2> = <var:Q> ^ <nat:2> /\ <var:X3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:X1> = <var:Q> /\ <var:X2> = <var:Q> ^ <nat:2> /\ <var:X3> = <var:Q> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:X1> = <nat:8> * <var:Q> /\ <var:X2> = <var:Q> ^ <nat:2> /\ <var:X3> = <var:Q> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:X1> = <nat:8> * <var:Q> /\ <var:X2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:X3> = <var:Q> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:X1> = <nat:8> * <var:Q> /\ <var:X2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:X3> = <nat:6> * <var:Q> ^ <nat:3> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:X1> = <nat:8> * <var:Q> /\ <var:X2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:X0> = <nat:7> /\ <var:e> = <nat:6> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:X1> = <nat:8> * <var:Q> /\ <var:X0> = <nat:7> /\ <var:e> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:X0> = <nat:7> /\ <var:e> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Q> /\ <var:e> = <nat:6> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:8> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 