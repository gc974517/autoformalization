\begin{document} \begin{theorem} Consider a code as \begin{verbatim} <var:S0> := <nat:1> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:f> ; <var:w> := <var:S1> ; <var:w> := <var:w> + <var:S0> \end{verbatim} Allowing $ <var:f> = <var:K> $ ahead of the evaluation of this program it must be that we see $ <var:w> = <nat:6> \times <var:K> + <nat:1> $ once set of instructions finishes . \end{theorem} \begin{proof} Using typical Hoare logic returns : \begin{eqnarray} \{ <var:f> = <var:K> \} \\ <var:S0> := <nat:1> ; \\ \{ <var:f> = <var:K> \land <var:S0> = <nat:1> \} \\ <var:S1> := <nat:6> ; \\ \{ <var:f> = <var:K> \land <var:S0> = <nat:1> \land <var:S1> = <nat:6> \} \\ <var:S1> := <var:S1> * <var:f> ; \\ \{ <var:f> = <var:K> \land <var:S0> = <nat:1> \land <var:S1> = <nat:6> \times <var:K> \} \\ <var:w> := <var:S1> ; \\ \{ <var:f> = <var:K> \land <var:S0> = <nat:1> \land <var:w> = <nat:6> \times <var:K> \} \\ <var:w> := <var:w> + <var:S0> \\ \{ <var:f> = <var:K> \land <var:w> = <nat:6> \times <var:K> + <nat:1> \} \end{eqnarray} As a result , our series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:f> = <var:K> }} <var:S0> := <nat:1> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:f> ; <var:w> := <var:S1> ; <var:w> := <var:w> + <var:S0> {{ <var:w> = <nat:6> * <var:K> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:S0> = <nat:1> /\ <var:S1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:S0> = <nat:1> /\ <var:S1> = <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:S0> = <nat:1> /\ <var:w> = <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:K> /\ <var:w> = <nat:6> * <var:K> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 