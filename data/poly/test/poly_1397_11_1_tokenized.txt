\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as \begin{verbatim} <var:p1> := <var:C> ; <var:p2> := <var:p1> * <var:C> ; <var:p3> := <var:p2> * <var:C> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:4> ; <var:p2> := <var:p2> * <nat:9> ; <var:p3> := <var:p3> * <nat:8> ; <var:E> := <var:p3> <var:E> := <var:E> + <var:p2> <var:E> := <var:E> + <var:p1> <var:E> := <var:E> + <var:p0> \end{verbatim} Assuming that we have $ <var:C> = <var:D> $ ahead of the execution of our code segment it holds that we see $ <var:E> = <nat:8> \times <var:D> ^ <nat:3> + <nat:9> \times <var:D> ^ <nat:2> + <nat:4> \times <var:D> + <nat:1> $ when code has terminated . \end{theorem} \begin{proof} The argument for the code can be accomplished using standard Hoare logic . Honing in on the next command contained in our set of commands , we have the environment update line \verb | <var:p1> := <var:C> ; | . This command transfers $ \{ <var:C> = <var:D> \} $ toward the condition $ \{ <var:C> = <var:D> \land <var:p1> = <var:D> \} $ . This is deduced by the assignment law defined in usual Hoare reasoning . Moving forward to the proceeding piece of code seen in the program , we see the variable update statement \verb | <var:p2> := <var:p1> * <var:C> ; | . This moves the condition $ \{ <var:C> = <var:D> \land <var:p1> = <var:D> \} $ toward the condition $ \{ <var:C> = <var:D> \land <var:p1> = <var:D> \land <var:p2> = <var:D> ^ <nat:2> \} $ . Moving forward , we have the environment update line \verb | <var:p3> := <var:p2> * <var:C> ; | . This advances the precondition $ \{ <var:C> = <var:D> \land <var:p1> = <var:D> \land <var:p2> = <var:D> ^ <nat:2> \} $ to $ \{ <var:C> = <var:D> \land <var:p1> = <var:D> \land <var:p2> = <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment rule from typical Hoare techniques . Immediately following , the binding command giving $ <nat:1> $ toward $ <var:p0>$ . This statement forwards the precondition $ \{ <var:C> = <var:D> \land <var:p1> = <var:D> \land <var:p2> = <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \} $ toward the postcondition $ \{ <var:C> = <var:D> \land <var:p1> = <var:D> \land <var:p2> = <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \land <var:p0> = <nat:1> \} $ . This is guaranteed using the assignment law defined by typical Hoare techniques . Advancing to the next step , we see the variable binding code \verb | <var:p1> := <var:p1> * <nat:4> ; | . This takes the condition $ \{ <var:C> = <var:D> \land <var:p1> = <var:D> \land <var:p2> = <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \land <var:p0> = <nat:1> \} $ to the postcondition $ \{ <var:C> = <var:D> \land <var:p1> = <nat:4> \cdot <var:D> \land <var:p2> = <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \land <var:p0> = <nat:1> \} $ . Moving on , we see the variable assignmet line yielding $ <var:p2> * <nat:9> $ toward $ <var:p2>$ . This transfers the precondition $ \{ <var:C> = <var:D> \land <var:p1> = <nat:4> \cdot <var:D> \land <var:p2> = <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \land <var:p0> = <nat:1> \} $ into the condition $ \{ <var:C> = <var:D> \land <var:p1> = <nat:4> \cdot <var:D> \land <var:p2> = <nat:9> \cdot <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \land <var:p0> = <nat:1> \} $ . This is rigorously given with the assignment law of Hoare reasoning . Observing the subsequent step in our program , we have the statement letting $ <var:p3> * <nat:8> $ to $ <var:p3>$ . This statement advances $ \{ <var:C> = <var:D> \land <var:p1> = <nat:4> \cdot <var:D> \land <var:p2> = <nat:9> \cdot <var:D> ^ <nat:2> \land <var:p3> = <var:D> ^ <nat:3> \land <var:p0> = <nat:1> \} $ as the condition $ \{ <var:C> = <var:D> \land <var:p1> = <nat:4> \cdot <var:D> \land <var:p2> = <nat:9> \cdot <var:D> ^ <nat:2> \land <var:p3> = <nat:8> \cdot <var:D> ^ <nat:3> \land <var:p0> = <nat:1> \} $ . Advancing to the next command found in the list of commands , we see the environment update statement yielding $ <var:p3$ to $ <var:E>$ . This code moves the precondition $ \{ <var:C> = <var:D> \land <var:p1> = <nat:4> \cdot <var:D> \land <var:p2> = <nat:9> \cdot <var:D> ^ <nat:2> \land <var:p3> = <nat:8> \cdot <var:D> ^ <nat:3> \land <var:p0> = <nat:1> \} $ toward the postcondition $ \{ <var:C> = <var:D> \land <var:p1> = <nat:4> \cdot <var:D> \land <var:p2> = <nat:9> \cdot <var:D> ^ <nat:2> \land <var:p0> = <nat:1> \land <var:E> = <nat:8> \cdot <var:D> ^ <nat:3> \} $ . Immediately following , the binding command yielding $ <var:E> + <var:p2$ to $ <var:E>$ . This takes the precondition $ \{ <var:C> = <var:D> \land <var:p1> = <nat:4> \cdot <var:D> \land <var:p2> = <nat:9> \cdot <var:D> ^ <nat:2> \land <var:p0> = <nat:1> \land <var:E> = <nat:8> \cdot <var:D> ^ <nat:3> \} $ as $ \{ <var:C> = <var:D> \land <var:p1> = <nat:4> \cdot <var:D> \land <var:p0> = <nat:1> \land <var:E> = <nat:8> \cdot <var:D> ^ <nat:3> + <nat:9> \cdot <var:D> ^ <nat:2> \} $ . This is known to be sound through the assignment law defined in typical Hoare techniques . Stepping forward , we see the variable update command \verb | <var:E> := <var:E> + <var:p1> | . This code forwards the precondition $ \{ <var:C> = <var:D> \land <var:p1> = <nat:4> \cdot <var:D> \land <var:p0> = <nat:1> \land <var:E> = <nat:8> \cdot <var:D> ^ <nat:3> + <nat:9> \cdot <var:D> ^ <nat:2> \} $ toward the condition $ \{ <var:C> = <var:D> \land <var:p0> = <nat:1> \land <var:E> = <nat:8> \cdot <var:D> ^ <nat:3> + <nat:9> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> \} $ . Advancing on , the assignment statement \verb | <var:E> := <var:E> + <var:p0> | . This statement takes $ \{ <var:C> = <var:D> \land <var:p0> = <nat:1> \land <var:E> = <nat:8> \cdot <var:D> ^ <nat:3> + <nat:9> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> \} $ toward $ \{ <var:C> = <var:D> \land <var:E> = <nat:8> \cdot <var:D> ^ <nat:3> + <nat:9> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:C> = <var:D> }} <var:p1> := <var:C> ; <var:p2> := <var:p1> * <var:C> ; <var:p3> := <var:p2> * <var:C> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:4> ; <var:p2> := <var:p2> * <nat:9> ; <var:p3> := <var:p3> * <nat:8> ; <var:E> := <var:p3> <var:E> := <var:E> + <var:p2> <var:E> := <var:E> + <var:p1> <var:E> := <var:E> + <var:p0> {{ <var:E> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:p1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:p1> = <var:D> /\ <var:p2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:p1> = <var:D> /\ <var:p2> = <var:D> ^ <nat:2> /\ <var:p3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:p1> = <var:D> /\ <var:p2> = <var:D> ^ <nat:2> /\ <var:p3> = <var:D> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:p1> = <nat:4> * <var:D> /\ <var:p2> = <var:D> ^ <nat:2> /\ <var:p3> = <var:D> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:p1> = <nat:4> * <var:D> /\ <var:p2> = <nat:9> * <var:D> ^ <nat:2> /\ <var:p3> = <var:D> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:p1> = <nat:4> * <var:D> /\ <var:p2> = <nat:9> * <var:D> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:D> ^ <nat:3> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:p1> = <nat:4> * <var:D> /\ <var:p2> = <nat:9> * <var:D> ^ <nat:2> /\ <var:p0> = <nat:1> /\ <var:E> = <nat:8> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:p1> = <nat:4> * <var:D> /\ <var:p0> = <nat:1> /\ <var:E> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:p0> = <nat:1> /\ <var:E> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:4> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:E> = <nat:8> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 