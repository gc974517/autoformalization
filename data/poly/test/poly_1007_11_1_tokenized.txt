\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:a1> := <var:t> ; <var:a2> := <var:a1> * <var:t> ; <var:a3> := <var:a2> * <var:t> ; <var:a0> := <nat:6> ; <var:a1> := <var:a1> * <nat:4> ; <var:a2> := <var:a2> * <nat:6> ; <var:a3> := <var:a3> * <nat:3> ; <var:H> := <var:a3> <var:H> := <var:H> + <var:a2> <var:H> := <var:H> + <var:a1> <var:H> := <var:H> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Assuming it to be that $ <var:t> = <var:o> $ before the execution of this list of instructions , it must be that we see $ <var:H> = <nat:3> \cdot <var:o> ^ <nat:3> + <nat:6> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:6> $ . \end{theorem} \begin{proof} We can see that this decorated set of commands . \begin{eqnarray} \{ <var:t> = <var:o> \} \\ <var:a1> := <var:t> ; \\ \{ <var:t> = <var:o> \land <var:a1> = <var:o> \} \\ <var:a2> := <var:a1> * <var:t> ; \\ \{ <var:t> = <var:o> \land <var:a1> = <var:o> \land <var:a2> = <var:o> ^ <nat:2> \} \\ <var:a3> := <var:a2> * <var:t> ; \\ \{ <var:t> = <var:o> \land <var:a1> = <var:o> \land <var:a2> = <var:o> ^ <nat:2> \land <var:a3> = <var:o> ^ <nat:3> \} \\ <var:a0> := <nat:6> ; \\ \{ <var:t> = <var:o> \land <var:a1> = <var:o> \land <var:a2> = <var:o> ^ <nat:2> \land <var:a3> = <var:o> ^ <nat:3> \land <var:a0> = <nat:6> \} \\ <var:a1> := <var:a1> * <nat:4> ; \\ \{ <var:t> = <var:o> \land <var:a1> = <nat:4> \times <var:o> \land <var:a2> = <var:o> ^ <nat:2> \land <var:a3> = <var:o> ^ <nat:3> \land <var:a0> = <nat:6> \} \\ <var:a2> := <var:a2> * <nat:6> ; \\ \{ <var:t> = <var:o> \land <var:a1> = <nat:4> \times <var:o> \land <var:a2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:a3> = <var:o> ^ <nat:3> \land <var:a0> = <nat:6> \} \\ <var:a3> := <var:a3> * <nat:3> ; \\ \{ <var:t> = <var:o> \land <var:a1> = <nat:4> \times <var:o> \land <var:a2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:a3> = <nat:3> \times <var:o> ^ <nat:3> \land <var:a0> = <nat:6> \} \\ <var:H> := <var:a3> \\ \{ <var:t> = <var:o> \land <var:a1> = <nat:4> \times <var:o> \land <var:a2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:a0> = <nat:6> \land <var:H> = <nat:3> \times <var:o> ^ <nat:3> \} \\ <var:H> := <var:H> + <var:a2> \\ \{ <var:t> = <var:o> \land <var:a1> = <nat:4> \times <var:o> \land <var:a0> = <nat:6> \land <var:H> = <nat:3> \times <var:o> ^ <nat:3> + <nat:6> \times <var:o> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:a1> \\ \{ <var:t> = <var:o> \land <var:a0> = <nat:6> \land <var:H> = <nat:3> \times <var:o> ^ <nat:3> + <nat:6> \times <var:o> ^ <nat:2> + <nat:4> \times <var:o> \} \\ <var:H> := <var:H> + <var:a0> \\ \{ <var:t> = <var:o> \land <var:H> = <nat:3> \times <var:o> ^ <nat:3> + <nat:6> \times <var:o> ^ <nat:2> + <nat:4> \times <var:o> + <nat:6> \} \end{eqnarray} Using Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a1> := <var:t> ; <var:a2> := <var:a1> * <var:t> ; <var:a3> := <var:a2> * <var:t> ; <var:a0> := <nat:6> ; <var:a1> := <var:a1> * <nat:4> ; <var:a2> := <var:a2> * <nat:6> ; <var:a3> := <var:a3> * <nat:3> ; <var:H> := <var:a3> <var:H> := <var:H> + <var:a2> <var:H> := <var:H> + <var:a1> <var:H> := <var:H> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:t> = <var:o> }} <def:poly> {{ <var:H> = <nat:3> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:a1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:a1> = <var:o> /\ <var:a2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:a1> = <var:o> /\ <var:a2> = <var:o> ^ <nat:2> /\ <var:a3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:a1> = <var:o> /\ <var:a2> = <var:o> ^ <nat:2> /\ <var:a3> = <var:o> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:a1> = <nat:4> * <var:o> /\ <var:a2> = <var:o> ^ <nat:2> /\ <var:a3> = <var:o> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:a1> = <nat:4> * <var:o> /\ <var:a2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:a3> = <var:o> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:a1> = <nat:4> * <var:o> /\ <var:a2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:o> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:a1> = <nat:4> * <var:o> /\ <var:a2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:a0> = <nat:6> /\ <var:H> = <nat:3> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:a1> = <nat:4> * <var:o> /\ <var:a0> = <nat:6> /\ <var:H> = <nat:3> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:a0> = <nat:6> /\ <var:H> = <nat:3> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:H> = <nat:3> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 