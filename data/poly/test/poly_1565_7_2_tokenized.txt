\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:d> := <nat:2> ; <var:d> := <nat:3> + <var:d> * <var:P> ; <var:d> := <var:d> * <var:P> ; <var:d> := <var:d> * <var:P> ; <var:d> := <nat:4> + <var:d> * <var:P> ; <var:d> := <nat:4> + <var:d> * <var:P> ; <var:d> := <nat:3> + <var:d> * <var:P> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> . Assuming that we have $ <var:P> = <var:w> $ ahead of evaluating this list of instructions , then we see $ <var:d> = <nat:2> \cdot <var:w> ^ <nat:6> + <nat:3> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning produces : \begin{eqnarray} \{ <var:P> = <var:w> \} \\ <var:d> := <nat:2> ; \\ \{ <var:P> = <var:w> \land <var:d> = <nat:2> \} \\ <var:d> := <nat:3> + <var:d> * <var:P> ; \\ \{ <var:P> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> + <nat:3> \} \\ <var:d> := <var:d> * <var:P> ; \\ \{ <var:P> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + \} \\ <var:d> := <var:d> * <var:P> ; \\ \{ <var:P> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + \} \\ <var:d> := <nat:4> + <var:d> * <var:P> ; \\ \{ <var:P> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:4> + <nat:3> \cdot <var:w> ^ <nat:3> + <nat:4> \} \\ <var:d> := <nat:4> + <var:d> * <var:P> ; \\ \{ <var:P> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:5> + <nat:3> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> + <nat:4> \} \\ <var:d> := <nat:3> + <var:d> * <var:P> \\ \{ <var:P> = <var:w> \land <var:d> = <nat:2> \cdot <var:w> ^ <nat:6> + <nat:3> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:3> \} \end{eqnarray} Considering the above , this code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:2> ; <var:d> := <nat:3> + <var:d> * <var:P> ; <var:d> := <var:d> * <var:P> ; <var:d> := <var:d> * <var:P> ; <var:d> := <nat:4> + <var:d> * <var:P> ; <var:d> := <nat:4> + <var:d> * <var:P> ; <var:d> := <nat:3> + <var:d> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:P> = <var:w> }} <def:poly> {{ <var:d> = <nat:2> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:d> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:d> = <nat:2> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:4> + <nat:4> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:w> /\ <var:d> = <nat:2> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 