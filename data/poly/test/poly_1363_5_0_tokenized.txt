\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:5> ; <var:A1> := <nat:2> ; <var:A1> := <var:A1> * <var:o> ; <var:P> := <var:A1> ; <var:P> := <var:P> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:o> = <var:b> $ with some integers $ <var:b> $ prior to interpreting this program , it follows that $ <var:P> = <nat:2> * <var:b> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for our segment of code is clear with standard Hoare logic . Considering the upcoming steps in our series of commands , we see \verb | { <var:o> = <var:b> } <var:A0> := <nat:5> { <var:o> = <var:b> \land <var:A0> = <nat:5> } | and \verb | { <var:o> = <var:b> \land <var:A0> = <nat:5> } <var:A1> := <nat:2> { <var:o> = <var:b> \land <var:A0> = <nat:5> \land <var:A1> = <nat:2> } | . This is shown to be logically sound through the environment update scheme found in typical Hoare techniques . Immediately after , \verb | { <var:o> = <var:b> } <var:A0> := <nat:5> { <var:o> = <var:b> \land <var:A0> = <nat:5> } | , \verb | { <var:o> = <var:b> \land <var:A0> = <nat:5> } <var:A1> := <nat:2> { <var:o> = <var:b> \land <var:A0> = <nat:5> \land <var:A1> = <nat:2> } | and \verb | { <var:o> = <var:b> \land <var:A0> = <nat:5> \land <var:A1> = <nat:2> } <var:A1> := <var:A1> * <var:o> { <var:o> = <var:b> \land <var:A0> = <nat:5> \land <var:A1> = <nat:2> \cdot <var:b> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A0> := <nat:5> ; <var:A1> := <nat:2> ; <var:A1> := <var:A1> * <var:o> ; <var:P> := <var:A1> ; <var:P> := <var:P> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:o> = <var:b> }} <def:poly> {{ <var:P> = <nat:2> * <var:b> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:A0> = <nat:5> /\ <var:A1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:A0> = <nat:5> /\ <var:A1> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:A0> = <nat:5> /\ <var:P> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:b> /\ <var:P> = <nat:2> * <var:b> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 