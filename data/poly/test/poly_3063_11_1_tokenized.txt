\begin{document} \begin{theorem} Let the following set of commands as follows \begin{verbatim} <var:a1> := <var:B> ; <var:a2> := <var:a1> * <var:B> ; <var:a3> := <var:a2> * <var:B> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:2> ; <var:a2> := <var:a2> * <nat:7> ; <var:a3> := <var:a3> * <nat:3> ; <var:C> := <var:a3> <var:C> := <var:C> + <var:a2> <var:C> := <var:C> + <var:a1> <var:C> := <var:C> + <var:a0> \end{verbatim} Assuming it to hold that $ <var:B> = <var:m> $ for positive coefficients $ <var:m> $ ahead of executing this code segment , it must be that we have $ <var:C> = <nat:3> \cdot <var:m> ^ <nat:3> + <nat:7> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions is shown using Hoare techniques . Going forward , we have \begin{verbatim} { <var:B> = <var:m> } <var:a1> := <var:B> { <var:B> = <var:m> \land <var:a1> = <var:m> } { <var:B> = <var:m> \land <var:a1> = <var:m> } <var:a2> := <var:a1> * <var:B> { <var:B> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> } { <var:B> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> } <var:a3> := <var:a2> * <var:B> { <var:B> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> } { <var:B> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> } <var:a0> := <nat:2> { <var:B> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \land <var:a0> = <nat:2> } { <var:B> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \land <var:a0> = <nat:2> } <var:a1> := <var:a1> * <nat:2> { <var:B> = <var:m> \land <var:a1> = <nat:2> \times <var:m> \land <var:a2> = <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \land <var:a0> = <nat:2> } { <var:B> = <var:m> \land <var:a1> = <nat:2> \times <var:m> \land <var:a2> = <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \land <var:a0> = <nat:2> } <var:a2> := <var:a2> * <nat:7> { <var:B> = <var:m> \land <var:a1> = <nat:2> \times <var:m> \land <var:a2> = <nat:7> \times <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \land <var:a0> = <nat:2> } { <var:B> = <var:m> \land <var:a1> = <nat:2> \times <var:m> \land <var:a2> = <nat:7> \times <var:m> ^ <nat:2> \land <var:a3> = <var:m> ^ <nat:3> \land <var:a0> = <nat:2> } <var:a3> := <var:a3> * <nat:3> { <var:B> = <var:m> \land <var:a1> = <nat:2> \times <var:m> \land <var:a2> = <nat:7> \times <var:m> ^ <nat:2> \land <var:a3> = <nat:3> \times <var:m> ^ <nat:3> \land <var:a0> = <nat:2> } { <var:B> = <var:m> \land <var:a1> = <nat:2> \times <var:m> \land <var:a2> = <nat:7> \times <var:m> ^ <nat:2> \land <var:a3> = <nat:3> \times <var:m> ^ <nat:3> \land <var:a0> = <nat:2> } <var:C> := <var:a3{ <var:B> = <var:m> \land <var:a1> = <nat:2> \times <var:m> \land <var:a2> = <nat:7> \times <var:m> ^ <nat:2> \land <var:a0> = <nat:2> \land <var:C> = <nat:3> \times <var:m> ^ <nat:3> } \end{verbatim} Advancing , we have \begin{verbatim} { <var:B> = <var:m> } <var:a1> := <var:B> { <var:B> = <var:m> \land <var:a1> = <var:m> } { <var:B> = <var:m> \land <var:a1> = <var:m> } <var:a2> := <var:a1> * <var:B> { <var:B> = <var:m> \land <var:a1> = <var:m> \land <var:a2> = <var:m> ^ <nat:2> } \end{verbatim} Moving on , \begin{verbatim} { <var:B> = <var:m> } <var:a1> := <var:B> { <var:B> = <var:m> \land <var:a1> = <var:m> } \end{verbatim} This is ensured with the variable binding scheme obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:B> = <var:m> }} <var:a1> := <var:B> ; <var:a2> := <var:a1> * <var:B> ; <var:a3> := <var:a2> * <var:B> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:2> ; <var:a2> := <var:a2> * <nat:7> ; <var:a3> := <var:a3> * <nat:3> ; <var:C> := <var:a3> <var:C> := <var:C> + <var:a2> <var:C> := <var:C> + <var:a1> <var:C> := <var:C> + <var:a0> {{ <var:C> = <nat:3> * <var:m> ^ <nat:3> + <nat:7> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:a1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:a1> = <var:m> /\ <var:a2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:a1> = <var:m> /\ <var:a2> = <var:m> ^ <nat:2> /\ <var:a3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:a1> = <var:m> /\ <var:a2> = <var:m> ^ <nat:2> /\ <var:a3> = <var:m> ^ <nat:3> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:a1> = <nat:2> * <var:m> /\ <var:a2> = <var:m> ^ <nat:2> /\ <var:a3> = <var:m> ^ <nat:3> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:a1> = <nat:2> * <var:m> /\ <var:a2> = <nat:7> * <var:m> ^ <nat:2> /\ <var:a3> = <var:m> ^ <nat:3> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:a1> = <nat:2> * <var:m> /\ <var:a2> = <nat:7> * <var:m> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:m> ^ <nat:3> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:a1> = <nat:2> * <var:m> /\ <var:a2> = <nat:7> * <var:m> ^ <nat:2> /\ <var:a0> = <nat:2> /\ <var:C> = <nat:3> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:a1> = <nat:2> * <var:m> /\ <var:a0> = <nat:2> /\ <var:C> = <nat:3> * <var:m> ^ <nat:3> + <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:a0> = <nat:2> /\ <var:C> = <nat:3> * <var:m> ^ <nat:3> + <nat:7> * <var:m> ^ <nat:2> + <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:m> /\ <var:C> = <nat:3> * <var:m> ^ <nat:3> + <nat:7> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 