\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W1> := <var:L> ; <var:W2> := <var:W1> * <var:L> ; <var:W3> := <var:W2> * <var:L> ; <var:W4> := <var:W3> * <var:L> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:1> ; <var:W2> := <var:W2> * <nat:4> ; <var:W4> := <var:W4> * <nat:1> ; <var:I> := <var:W4> <var:I> := <var:I> + <var:W2> <var:I> := <var:I> + <var:W1> <var:I> := <var:I> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Given ( given all $ <var:D> $ ) that $ <var:L> = <var:D> $ before running this list of commands it must be that we have $ <var:I> = <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> $ when series of instructions has executed . \end{theorem} \begin{proof} Applying usual Hoare techniques gives : \begin{eqnarray} \{ <var:L> = <var:D> \} \\ <var:W1> := <var:L> ; \\ \{ <var:L> = <var:D> \land <var:W1> = <var:D> \} \\ <var:W2> := <var:W1> * <var:L> ; \\ \{ <var:L> = <var:D> \land <var:W1> = <var:D> \land <var:W2> = <var:D> ^ <nat:2> \} \end{eqnarray} Furthering the evaluation of the list of commands results in : \begin{eqnarray} <var:W3> := <var:W2> * <var:L> ; \\ \{ <var:L> = <var:D> \land <var:W1> = <var:D> \land <var:W2> = <var:D> ^ <nat:2> \land <var:W3> = <var:D> ^ <nat:3> \} \\ <var:W4> := <var:W3> * <var:L> ; \\ \{ <var:L> = <var:D> \land <var:W1> = <var:D> \land <var:W2> = <var:D> ^ <nat:2> \land <var:W3> = <var:D> ^ <nat:3> \land <var:W4> = <var:D> ^ <nat:4> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:L> = <var:D> \land <var:W1> = <var:D> \land <var:W2> = <var:D> ^ <nat:2> \land <var:W3> = <var:D> ^ <nat:3> \land <var:W4> = <var:D> ^ <nat:4> \land <var:W0> = <nat:1> \} \\ <var:W1> := <var:W1> * <nat:1> ; \\ \{ <var:L> = <var:D> \land <var:W1> = <nat:1> * <var:D> \land <var:W2> = <var:D> ^ <nat:2> \land <var:W3> = <var:D> ^ <nat:3> \land <var:W4> = <var:D> ^ <nat:4> \land <var:W0> = <nat:1> \} \\ <var:W2> := <var:W2> * <nat:4> ; \\ \{ <var:L> = <var:D> \land <var:W1> = <nat:1> * <var:D> \land <var:W2> = <nat:4> * <var:D> ^ <nat:2> \land <var:W3> = <var:D> ^ <nat:3> \land <var:W4> = <var:D> ^ <nat:4> \land <var:W0> = <nat:1> \} \end{eqnarray} Continuing evaluating our series of commands gives us : \begin{eqnarray} <var:W4> := <var:W4> * <nat:1> ; \\ \{ <var:L> = <var:D> \land <var:W1> = <nat:1> * <var:D> \land <var:W2> = <nat:4> * <var:D> ^ <nat:2> \land <var:W3> = <var:D> ^ <nat:3> \land <var:W4> = <nat:1> * <var:D> ^ <nat:4> \land <var:W0> = <nat:1> \} \end{eqnarray} Advancing executing the code produces : \begin{eqnarray} <var:I> := <var:W4> \\ \{ <var:L> = <var:D> \land <var:W1> = <nat:1> * <var:D> \land <var:W2> = <nat:4> * <var:D> ^ <nat:2> \land <var:W3> = <var:D> ^ <nat:3> \land <var:W0> = <nat:1> \land <var:I> = <nat:1> * <var:D> ^ <nat:4> \} \\ <var:I> := <var:I> + <var:W2> \\ \{ <var:L> = <var:D> \land <var:W1> = <nat:1> * <var:D> \land <var:W0> = <nat:1> \land <var:I> = <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:W1> \\ \{ <var:L> = <var:D> \land <var:W0> = <nat:1> \land <var:I> = <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> \} \\ <var:I> := <var:I> + <var:W0> \\ \{ <var:L> = <var:D> \land <var:I> = <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> \} \end{eqnarray} Thusly , this set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <var:W4> : string := " <var:W4> " . Definition <def:poly> := <var:W1> := <var:L> ; <var:W2> := <var:W1> * <var:L> ; <var:W3> := <var:W2> * <var:L> ; <var:W4> := <var:W3> * <var:L> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:1> ; <var:W2> := <var:W2> * <nat:4> ; <var:W4> := <var:W4> * <nat:1> ; <var:I> := <var:W4> <var:I> := <var:I> + <var:W2> <var:I> := <var:I> + <var:W1> <var:I> := <var:I> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:L> = <var:D> }} <def:poly> {{ <var:I> = <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:W1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:W1> = <var:D> /\ <var:W2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:W1> = <var:D> /\ <var:W2> = <var:D> ^ <nat:2> /\ <var:W3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:W1> = <var:D> /\ <var:W2> = <var:D> ^ <nat:2> /\ <var:W3> = <var:D> ^ <nat:3> /\ <var:W4> = <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:W1> = <var:D> /\ <var:W2> = <var:D> ^ <nat:2> /\ <var:W3> = <var:D> ^ <nat:3> /\ <var:W4> = <var:D> ^ <nat:4> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:W1> = <nat:1> * <var:D> /\ <var:W2> = <var:D> ^ <nat:2> /\ <var:W3> = <var:D> ^ <nat:3> /\ <var:W4> = <var:D> ^ <nat:4> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:W1> = <nat:1> * <var:D> /\ <var:W2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:W3> = <var:D> ^ <nat:3> /\ <var:W4> = <var:D> ^ <nat:4> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:W1> = <nat:1> * <var:D> /\ <var:W2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:W3> = <var:D> ^ <nat:3> /\ <var:W4> = <nat:1> * <var:D> ^ <nat:4> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:W1> = <nat:1> * <var:D> /\ <var:W2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:W3> = <var:D> ^ <nat:3> /\ <var:W0> = <nat:1> /\ <var:I> = <nat:1> * <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:W1> = <nat:1> * <var:D> /\ <var:W0> = <nat:1> /\ <var:I> = <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:W0> = <nat:1> /\ <var:I> = <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:D> /\ <var:I> = <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 