\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E> := <nat:3> ; <var:E> := <var:E> * <var:c> ; <var:E> := <nat:1> + <var:E> * <var:c> ; <var:E> := <nat:1> + <var:E> * <var:c> ; <var:E> := <nat:4> + <var:E> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:c> = <var:M> $ prior to interpreting our list of instructions , then we see $ <var:E> = <nat:3> \times <var:M> ^ <nat:4> + <nat:1> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:4> $ . \end{theorem} \begin{proof} Using Hoare reasoning results in : \begin{eqnarray} \{ <var:c> = <var:M> \} \\ <var:E> := <nat:3> ; \\ \{ <var:c> = <var:M> \land <var:E> = <nat:3> \} \\ <var:E> := <var:E> * <var:c> ; \\ \{ <var:c> = <var:M> \land <var:E> = <nat:3> \cdot <var:M> + \} \\ <var:E> := <nat:1> + <var:E> * <var:c> ; \\ \{ <var:c> = <var:M> \land <var:E> = <nat:3> \cdot <var:M> ^ <nat:2> + <nat:1> \} \\ <var:E> := <nat:1> + <var:E> * <var:c> ; \\ \{ <var:c> = <var:M> \land <var:E> = <nat:3> \cdot <var:M> ^ <nat:3> + <nat:1> \cdot <var:M> + <nat:1> \} \\ <var:E> := <nat:4> + <var:E> * <var:c> \\ \{ <var:c> = <var:M> \land <var:E> = <nat:3> \cdot <var:M> ^ <nat:4> + <nat:1> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:4> \} \end{eqnarray} Thusly , our list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:E> := <nat:3> ; <var:E> := <var:E> * <var:c> ; <var:E> := <nat:1> + <var:E> * <var:c> ; <var:E> := <nat:1> + <var:E> * <var:c> ; <var:E> := <nat:4> + <var:E> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:c> = <var:M> }} <def:poly> {{ <var:E> = <nat:3> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:E> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:E> = <nat:3> * <var:M> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:E> = <nat:3> * <var:M> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:E> = <nat:3> * <var:M> ^ <nat:3> + <nat:1> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:M> /\ <var:E> = <nat:3> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 