\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:6> ; <var:e1> := <nat:2> ; <var:e1> := <var:e1> * <var:W> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:W> ; <var:e2> := <var:e2> * <var:W> ; <var:B> := <var:e2> ; <var:B> := <var:B> + <var:e1> ; <var:B> := <var:B> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:W> = <var:R> $ before interpreting the set of instructions it holds that we have $ <var:B> = <nat:1> \cdot <var:R> ^ <nat:2> + <nat:2> \cdot <var:R> + <nat:6> $ when series of instructions terminates . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions is accomplished with standard Hoare techniques . Looking at the next command found in the series of instructions , we see the variable assignmet code binding $ <nat:6> $ toward $ <var:e0>$ . This moves the precondition $ \{ <var:W> = <var:R> \} $ into the postcondition $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \} $ . Moving on to the following statement found in our code , the binding code defining $ <nat:2> $ into $ <var:e1>$ . This takes the precondition $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \} $ into $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:e1> = <nat:2> \} $ . This is ensured with the assignment rule obtained from Hoare logic . Paying attention to the upcoming piece of code contained in our list of commands , we see the environment update code assigning $ <var:e1> * <var:W> $ to $ <var:e1>$ . This redefines the condition $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:e1> = <nat:2> \} $ as the condition $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:e1> = <nat:2> * <var:R> \} $ . This is shown to be logically sound through the assignment law defined in Hoare reasoning . Shifting focus toward the upcoming line of code in our list of commands , we have the variable binding code \verb | <var:e2> := <nat:1> ; | . This transfers the precondition $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:e1> = <nat:2> * <var:R> \} $ into $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:e1> = <nat:2> * <var:R> \land <var:e2> = <nat:1> \} $ . Moving forward to the next step , the variable binding command letting $ <var:e2> * <var:W> $ as $ <var:e2>$ . This code moves $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:e1> = <nat:2> * <var:R> \land <var:e2> = <nat:1> \} $ as the condition $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:e1> = <nat:2> * <var:R> \land <var:e2> = <nat:1> * <var:R> \} $ . This is ensured with the assignment inference rule defined by standard Hoare techniques . Next , the assignment line \verb | <var:e2> := <var:e2> * <var:W> ; | . This forwards $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:e1> = <nat:2> * <var:R> \land <var:e2> = <nat:1> * <var:R> \} $ as the condition $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:e1> = <nat:2> * <var:R> \land <var:e2> = <nat:1> * <var:R> ^ <nat:2> \} $ . This is ensured through the assignment law in usual Hoare reasoning . Moving on , we have the binding statement \verb | <var:B> := <var:e2> ; | . This transfers the condition $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:e1> = <nat:2> * <var:R> \land <var:e2> = <nat:1> * <var:R> ^ <nat:2> \} $ into $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:e1> = <nat:2> * <var:R> \land <var:B> = <nat:1> * <var:R> ^ <nat:2> \} $ . Stepping forward , we see the assignment line defining $ <var:B> + <var:e1> $ to $ <var:B>$ . This code moves the condition $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:e1> = <nat:2> * <var:R> \land <var:B> = <nat:1> * <var:R> ^ <nat:2> \} $ to the postcondition $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:B> = <nat:1> * <var:R> ^ <nat:2> + <nat:2> * <var:R> \} $ . This is deduced with the assignment law given in usual Hoare reasoning . Focusing on the upcoming line of code in the set of commands , we see the environment update code \verb | <var:B> := <var:B> + <var:e0> | . This line takes the condition $ \{ <var:W> = <var:R> \land <var:e0> = <nat:6> \land <var:B> = <nat:1> * <var:R> ^ <nat:2> + <nat:2> * <var:R> \} $ as the condition $ \{ <var:W> = <var:R> \land <var:B> = <nat:1> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:6> ; <var:e1> := <nat:2> ; <var:e1> := <var:e1> * <var:W> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:W> ; <var:e2> := <var:e2> * <var:W> ; <var:B> := <var:e2> ; <var:B> := <var:B> + <var:e1> ; <var:B> := <var:B> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:W> = <var:R> }} <def:poly> {{ <var:B> = <nat:1> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:e0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:2> * <var:R> /\ <var:e2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:2> * <var:R> /\ <var:e2> = <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:2> * <var:R> /\ <var:e2> = <nat:1> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:e0> = <nat:6> /\ <var:e1> = <nat:2> * <var:R> /\ <var:B> = <nat:1> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:e0> = <nat:6> /\ <var:B> = <nat:1> * <var:R> ^ <nat:2> + <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:R> /\ <var:B> = <nat:1> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 