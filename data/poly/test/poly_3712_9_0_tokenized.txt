\begin{document} \begin{theorem} Take the following code in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:5> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:W> ; <var:x2> := <nat:9> ; <var:x2> := <var:x2> * <var:W> ; <var:x2> := <var:x2> * <var:W> ; <var:h> := <var:x2> ; <var:h> := <var:h> + <var:x1> ; <var:h> := <var:h> + <var:x0> \end{verbatim} Allowing it to be that $ <var:W> = <var:O> $ --- for $ <var:O> \in \mathbb{Z}^+ $ --- before evaluating this segment of code , it must be that $ <var:h> = <nat:9> \cdot <var:O> ^ <nat:2> + <nat:7> \cdot <var:O> + <nat:5> $ once code segment has exited . \end{theorem} \begin{proof} The course of logic for the list of instructions is clear through usual Hoare logic . Immediately after , we have \verb | { <var:W> = <var:O> } <var:x0> := <nat:5> { <var:W> = <var:O> \land <var:x0> = <nat:5> } | , \verb | { <var:W> = <var:O> \land <var:x0> = <nat:5> } <var:x1> := <nat:7> { <var:W> = <var:O> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> } | , \verb | { <var:W> = <var:O> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> } <var:x1> := <var:x1> * <var:W> { <var:W> = <var:O> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> * <var:O> } | , \verb | { <var:W> = <var:O> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> * <var:O> } <var:x2> := <nat:9> { <var:W> = <var:O> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> * <var:O> \land <var:x2> = <nat:9> } | , \verb | { <var:W> = <var:O> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> * <var:O> \land <var:x2> = <nat:9> } <var:x2> := <var:x2> * <var:W> { <var:W> = <var:O> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> * <var:O> \land <var:x2> = <nat:9> * <var:O> } | and \verb | { <var:W> = <var:O> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> * <var:O> \land <var:x2> = <nat:9> * <var:O> } <var:x2> := <var:x2> * <var:W> { <var:W> = <var:O> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> * <var:O> \land <var:x2> = <nat:9> * <var:O> ^ <nat:2> } | . This is shown to be logically sound using the assignment inference rule from typical Hoare techniques . Stepping through , \verb | { <var:W> = <var:O> } <var:x0> := <nat:5> { <var:W> = <var:O> \land <var:x0> = <nat:5> } | . This is given by the environment update inference rule of typical Hoare logic . Advancing to the next step , we see \verb | { <var:W> = <var:O> } <var:x0> := <nat:5> { <var:W> = <var:O> \land <var:x0> = <nat:5> } | and \verb | { <var:W> = <var:O> \land <var:x0> = <nat:5> } <var:x1> := <nat:7> { <var:W> = <var:O> \land <var:x0> = <nat:5> \land <var:x1> = <nat:7> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:W> = <var:O> }} <var:x0> := <nat:5> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:W> ; <var:x2> := <nat:9> ; <var:x2> := <var:x2> * <var:W> ; <var:x2> := <var:x2> * <var:W> ; <var:h> := <var:x2> ; <var:h> := <var:h> + <var:x1> ; <var:h> := <var:h> + <var:x0> {{ <var:h> = <nat:9> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:O> /\ <var:x2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:O> /\ <var:x2> = <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:O> /\ <var:x2> = <nat:9> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:7> * <var:O> /\ <var:h> = <nat:9> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:x0> = <nat:5> /\ <var:h> = <nat:9> * <var:O> ^ <nat:2> + <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:h> = <nat:9> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 