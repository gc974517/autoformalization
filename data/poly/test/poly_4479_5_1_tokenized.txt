\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:J1> := <var:T> ; <var:J0> := <nat:5> ; <var:J1> := <var:J1> * <nat:9> ; <var:V> := <var:J1> <var:V> := <var:V> + <var:J0> \end{verbatim} Assuming given whole numbers $ <var:k> $ that we have $ <var:T> = <var:k> $ before the evaluation of the code , it must be that we see $ <var:V> = <nat:9> \times <var:k> + <nat:5> $ after series of commands has terminated . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:T> = <var:k> \} \\ <var:J1> := <var:T> ; \\ \{ <var:T> = <var:k> \land <var:J1> = <var:k> \} \\ <var:J0> := <nat:5> ; \\ \{ <var:T> = <var:k> \land <var:J1> = <var:k> \land <var:J0> = <nat:5> \} \\ <var:J1> := <var:J1> * <nat:9> ; \\ \{ <var:T> = <var:k> \land <var:J1> = <nat:9> \times <var:k> \land <var:J0> = <nat:5> \} \\ <var:V> := <var:J1> \\ \{ <var:T> = <var:k> \land <var:J0> = <nat:5> \land <var:V> = <nat:9> \times <var:k> \} \\ <var:V> := <var:V> + <var:J0> \\ \{ <var:T> = <var:k> \land <var:V> = <nat:9> \times <var:k> + <nat:5> \} \end{eqnarray} Considering the above , the series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:T> = <var:k> }} <var:J1> := <var:T> ; <var:J0> := <nat:5> ; <var:J1> := <var:J1> * <nat:9> ; <var:V> := <var:J1> <var:V> := <var:V> + <var:J0> {{ <var:V> = <nat:9> * <var:k> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:J1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:J1> = <var:k> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:J1> = <nat:9> * <var:k> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:J0> = <nat:5> /\ <var:V> = <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:V> = <nat:9> * <var:k> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 