\begin{document} \begin{theorem} Let the following list of commands as \begin{verbatim} <var:h0> := <nat:2> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:s> ; <var:h2> := <nat:1> ; <var:h2> := <var:h2> * <var:s> ; <var:h2> := <var:h2> * <var:s> ; <var:g> := <var:h2> ; <var:g> := <var:g> + <var:h1> ; <var:g> := <var:g> + <var:h0> \end{verbatim} Allow that $ <var:s> = <var:P> $ before executing this program then we see $ <var:g> = <nat:1> \cdot <var:P> ^ <nat:2> + <nat:1> \cdot <var:P> + <nat:2> $ when list of commands has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions can be seen through standard Hoare logic . Moving on to the next pieces of code in our program , \[ \begin{tabular} {rcl} \{ <var:s> = <var:P> \} & <var:h0> := <nat:2> & \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \} \\ \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \} & <var:h1> := <nat:1> & \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \land <var:h1> = <nat:1> \} \\ \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \land <var:h1> = <nat:1> \} & <var:h1> := <var:h1> * <var:s> & \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \land <var:h1> = <nat:1> \times <var:P> \} \end{tabular} This is sound by the inference rule from typical Hoare reasoning . Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:s> = <var:P> \} & <var:h0> := <nat:2> & \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \} \\ \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \} & <var:h1> := <nat:1> & \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \land <var:h1> = <nat:1> \} \\ \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \land <var:h1> = <nat:1> \} & <var:h1> := <var:h1> * <var:s> & \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \land <var:h1> = <nat:1> \times <var:P> \} \\ \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \land <var:h1> = <nat:1> \times <var:P> \} & <var:h2> := <nat:1> & \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \land <var:h1> = <nat:1> \times <var:P> \land <var:h2> = <nat:1> \} \\ \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \land <var:h1> = <nat:1> \times <var:P> \land <var:h2> = <nat:1> \} & <var:h2> := <var:h2> * <var:s> & \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \land <var:h1> = <nat:1> \times <var:P> \land <var:h2> = <nat:1> \times <var:P> \} \end{tabular} Moving forward , we see \[ \begin{tabular} {rcl} \{ <var:s> = <var:P> \} & <var:h0> := <nat:2> & \{ <var:s> = <var:P> \land <var:h0> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:s> = <var:P> }} <var:h0> := <nat:2> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:s> ; <var:h2> := <nat:1> ; <var:h2> := <var:h2> * <var:s> ; <var:h2> := <var:h2> * <var:s> ; <var:g> := <var:h2> ; <var:g> := <var:g> + <var:h1> ; <var:g> := <var:g> + <var:h0> {{ <var:g> = <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:1> * <var:P> /\ <var:h2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:1> * <var:P> /\ <var:h2> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:1> * <var:P> /\ <var:h2> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:1> * <var:P> /\ <var:g> = <nat:1> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:h0> = <nat:2> /\ <var:g> = <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:g> = <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 