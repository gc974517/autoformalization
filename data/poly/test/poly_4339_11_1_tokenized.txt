\begin{document} \begin{theorem} Consider a set of commands : \begin{verbatim} <var:a1> := <var:R> ; <var:a2> := <var:a1> * <var:R> ; <var:a3> := <var:a2> * <var:R> ; <var:a0> := <nat:6> ; <var:a1> := <var:a1> * <nat:8> ; <var:a2> := <var:a2> * <nat:8> ; <var:a3> := <var:a3> * <nat:5> ; <var:L> := <var:a3> <var:L> := <var:L> + <var:a2> <var:L> := <var:L> + <var:a1> <var:L> := <var:L> + <var:a0> \end{verbatim} Given that $ <var:R> = <var:U> $ prior to running our list of instructions then $ <var:L> = <nat:5> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:6> $ once list of commands has finished executing . \end{theorem} \begin{proof} The flow of logic for the set of commands can be seen by usual Hoare reasoning . Moving forward , we have the environment update code binding $ <var:R> $ to $ <var:a1>$ . This line forwards the condition $ \{ <var:R> = <var:U> \} $ into the condition $ \{ <var:R> = <var:U> \land <var:a1> = <var:U> \} $ . Focusing on the proceeding line of code contained in our set of commands , we have the statement binding $ <var:a1> * <var:R> $ to $ <var:a2>$ . This redefines the condition $ \{ <var:R> = <var:U> \land <var:a1> = <var:U> \} $ as the condition $ \{ <var:R> = <var:U> \land <var:a1> = <var:U> \land <var:a2> = <var:U> ^ <nat:2> \} $ . This is rigorously given with the assignment rule obtained from typical Hoare techniques . Keeping momentum , we see the binding code assigning $ <var:a2> * <var:R> $ to $ <var:a3>$ . This code takes $ \{ <var:R> = <var:U> \land <var:a1> = <var:U> \land <var:a2> = <var:U> ^ <nat:2> \} $ as $ \{ <var:R> = <var:U> \land <var:a1> = <var:U> \land <var:a2> = <var:U> ^ <nat:2> \land <var:a3> = <var:U> ^ <nat:3> \} $ . This is guaranteed using the assignment scheme found in typical Hoare logic . Looking at the following line in the segment of code , we see the binding code \verb | <var:a0> := <nat:6> ; | . This code moves the precondition $ \{ <var:R> = <var:U> \land <var:a1> = <var:U> \land <var:a2> = <var:U> ^ <nat:2> \land <var:a3> = <var:U> ^ <nat:3> \} $ to the postcondition $ \{ <var:R> = <var:U> \land <var:a1> = <var:U> \land <var:a2> = <var:U> ^ <nat:2> \land <var:a3> = <var:U> ^ <nat:3> \land <var:a0> = <nat:6> \} $ . This is shown by the assignment scheme found in standard Hoare techniques . Advancing to the next piece of code found in our program , we have the environment update statement \verb | <var:a1> := <var:a1> * <nat:8> ; | . This statement redefines the condition $ \{ <var:R> = <var:U> \land <var:a1> = <var:U> \land <var:a2> = <var:U> ^ <nat:2> \land <var:a3> = <var:U> ^ <nat:3> \land <var:a0> = <nat:6> \} $ as $ \{ <var:R> = <var:U> \land <var:a1> = <nat:8> * <var:U> \land <var:a2> = <var:U> ^ <nat:2> \land <var:a3> = <var:U> ^ <nat:3> \land <var:a0> = <nat:6> \} $ . Advancing to the subsequent command seen in the code , the code \verb | <var:a2> := <var:a2> * <nat:8> ; | . This transfers the precondition $ \{ <var:R> = <var:U> \land <var:a1> = <nat:8> * <var:U> \land <var:a2> = <var:U> ^ <nat:2> \land <var:a3> = <var:U> ^ <nat:3> \land <var:a0> = <nat:6> \} $ to the condition $ \{ <var:R> = <var:U> \land <var:a1> = <nat:8> * <var:U> \land <var:a2> = <nat:8> * <var:U> ^ <nat:2> \land <var:a3> = <var:U> ^ <nat:3> \land <var:a0> = <nat:6> \} $ . This is sound through the assignment inference rule of standard Hoare techniques . Considering the next command found in the program , the command letting $ <var:a3> * <nat:5> $ into $ <var:a3>$ . This code redefines $ \{ <var:R> = <var:U> \land <var:a1> = <nat:8> * <var:U> \land <var:a2> = <nat:8> * <var:U> ^ <nat:2> \land <var:a3> = <var:U> ^ <nat:3> \land <var:a0> = <nat:6> \} $ as $ \{ <var:R> = <var:U> \land <var:a1> = <nat:8> * <var:U> \land <var:a2> = <nat:8> * <var:U> ^ <nat:2> \land <var:a3> = <nat:5> * <var:U> ^ <nat:3> \land <var:a0> = <nat:6> \} $ . This is guaranteed with the assignment law obtained from usual Hoare techniques . Moving forward , the binding code defining $ <var:a3$ into $ <var:L>$ . This code moves $ \{ <var:R> = <var:U> \land <var:a1> = <nat:8> * <var:U> \land <var:a2> = <nat:8> * <var:U> ^ <nat:2> \land <var:a3> = <nat:5> * <var:U> ^ <nat:3> \land <var:a0> = <nat:6> \} $ as $ \{ <var:R> = <var:U> \land <var:a1> = <nat:8> * <var:U> \land <var:a2> = <nat:8> * <var:U> ^ <nat:2> \land <var:a0> = <nat:6> \land <var:L> = <nat:5> * <var:U> ^ <nat:3> \} $ . Moving forward to the upcoming bit of code found in our segment of code , the command yielding $ <var:L> + <var:a2$ to $ <var:L>$ . This statement moves the condition $ \{ <var:R> = <var:U> \land <var:a1> = <nat:8> * <var:U> \land <var:a2> = <nat:8> * <var:U> ^ <nat:2> \land <var:a0> = <nat:6> \land <var:L> = <nat:5> * <var:U> ^ <nat:3> \} $ as the condition $ \{ <var:R> = <var:U> \land <var:a1> = <nat:8> * <var:U> \land <var:a0> = <nat:6> \land <var:L> = <nat:5> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> \} $ . This is deduced with the assignment scheme obtained from standard Hoare reasoning . Focusing on the next line of code seen in the set of instructions , the assignment statement \verb | <var:L> := <var:L> + <var:a1> | . This forwards $ \{ <var:R> = <var:U> \land <var:a1> = <nat:8> * <var:U> \land <var:a0> = <nat:6> \land <var:L> = <nat:5> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> \} $ toward $ \{ <var:R> = <var:U> \land <var:a0> = <nat:6> \land <var:L> = <nat:5> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> + <nat:8> * <var:U> \} $ . Advancing to the next step , we have the statement \verb | <var:L> := <var:L> + <var:a0> | . This advances the condition $ \{ <var:R> = <var:U> \land <var:a0> = <nat:6> \land <var:L> = <nat:5> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> + <nat:8> * <var:U> \} $ into $ \{ <var:R> = <var:U> \land <var:L> = <nat:5> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:6> \} $ . This is deduced by the assignment inference rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:R> = <var:U> }} <var:a1> := <var:R> ; <var:a2> := <var:a1> * <var:R> ; <var:a3> := <var:a2> * <var:R> ; <var:a0> := <nat:6> ; <var:a1> := <var:a1> * <nat:8> ; <var:a2> := <var:a2> * <nat:8> ; <var:a3> := <var:a3> * <nat:5> ; <var:L> := <var:a3> <var:L> := <var:L> + <var:a2> <var:L> := <var:L> + <var:a1> <var:L> := <var:L> + <var:a0> {{ <var:L> = <nat:5> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:a1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:a1> = <var:U> /\ <var:a2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:a1> = <var:U> /\ <var:a2> = <var:U> ^ <nat:2> /\ <var:a3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:a1> = <var:U> /\ <var:a2> = <var:U> ^ <nat:2> /\ <var:a3> = <var:U> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:a1> = <nat:8> * <var:U> /\ <var:a2> = <var:U> ^ <nat:2> /\ <var:a3> = <var:U> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:a1> = <nat:8> * <var:U> /\ <var:a2> = <nat:8> * <var:U> ^ <nat:2> /\ <var:a3> = <var:U> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:a1> = <nat:8> * <var:U> /\ <var:a2> = <nat:8> * <var:U> ^ <nat:2> /\ <var:a3> = <nat:5> * <var:U> ^ <nat:3> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:a1> = <nat:8> * <var:U> /\ <var:a2> = <nat:8> * <var:U> ^ <nat:2> /\ <var:a0> = <nat:6> /\ <var:L> = <nat:5> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:a1> = <nat:8> * <var:U> /\ <var:a0> = <nat:6> /\ <var:L> = <nat:5> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:a0> = <nat:6> /\ <var:L> = <nat:5> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> + <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:U> /\ <var:L> = <nat:5> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> + <nat:8> * <var:U> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 