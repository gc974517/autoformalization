\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:1> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:z> ; <var:C> := <var:A1> ; <var:C> := <var:C> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:z> = <var:H> $ before running the list of commands , then we have $ <var:C> = <nat:3> \times <var:H> + <nat:1> $ when code segment finishes . \end{theorem} \begin{proof} See that this decorated list of commands . \begin{eqnarray} \{ <var:z> = <var:H> \} \\ <var:A0> := <nat:1> ; \\ \{ <var:z> = <var:H> \land <var:A0> = <nat:1> \} \\ <var:A1> := <nat:3> ; \\ \{ <var:z> = <var:H> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> \} \\ <var:A1> := <var:A1> * <var:z> ; \\ \{ <var:z> = <var:H> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:H> \} \\ <var:C> := <var:A1> ; \\ \{ <var:z> = <var:H> \land <var:A0> = <nat:1> \land <var:C> = <nat:3> * <var:H> \} \\ <var:C> := <var:C> + <var:A0> \\ \{ <var:z> = <var:H> \land <var:C> = <nat:3> * <var:H> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A0> := <nat:1> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:z> ; <var:C> := <var:A1> ; <var:C> := <var:C> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:z> = <var:H> }} <def:poly> {{ <var:C> = <nat:3> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:H> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:H> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:H> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:H> /\ <var:A0> = <nat:1> /\ <var:C> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:H> /\ <var:C> = <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 