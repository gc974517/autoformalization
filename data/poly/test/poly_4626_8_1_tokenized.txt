\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s1> := <var:L> ; <var:s2> := <var:s1> * <var:L> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:9> ; <var:s2> := <var:s2> * <nat:2> ; <var:W> := <var:s2> <var:W> := <var:W> + <var:s1> <var:W> := <var:W> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:L> = <var:t> $ ahead of the evaluation of the code then we have $ <var:W> = <nat:2> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:2> $ after set of instructions is done . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions can be given through standard Hoare techniques . Moving on to the next step , the assignment line \verb | <var:s1> := <var:L> ; | . This moves the condition $ \{ <var:L> = <var:t> \} $ to $ \{ <var:L> = <var:t> \land <var:s1> = <var:t> \} $ . Moving on , the variable update code \verb | <var:s2> := <var:s1> * <var:L> ; | . This forwards the precondition $ \{ <var:L> = <var:t> \land <var:s1> = <var:t> \} $ into the condition $ \{ <var:L> = <var:t> \land <var:s1> = <var:t> \land <var:s2> = <var:t> ^ <nat:2> \} $ . This is ensured through the assignment scheme from Hoare techniques . Paying attention to the subsequent bit of code found in our series of instructions , the variable assignmet code giving $ <nat:2> $ as $ <var:s0>$ . This moves $ \{ <var:L> = <var:t> \land <var:s1> = <var:t> \land <var:s2> = <var:t> ^ <nat:2> \} $ to the postcondition $ \{ <var:L> = <var:t> \land <var:s1> = <var:t> \land <var:s2> = <var:t> ^ <nat:2> \land <var:s0> = <nat:2> \} $ . Focusing on the proceeding line of code seen in the code , the variable assignmet command \verb | <var:s1> := <var:s1> * <nat:9> ; | . This takes $ \{ <var:L> = <var:t> \land <var:s1> = <var:t> \land <var:s2> = <var:t> ^ <nat:2> \land <var:s0> = <nat:2> \} $ as the condition $ \{ <var:L> = <var:t> \land <var:s1> = <nat:9> \cdot <var:t> \land <var:s2> = <var:t> ^ <nat:2> \land <var:s0> = <nat:2> \} $ . Shifting focus toward the next piece of code seen in the segment of code , we have the variable binding line yielding $ <var:s2> * <nat:2> $ to $ <var:s2>$ . This redefines $ \{ <var:L> = <var:t> \land <var:s1> = <nat:9> \cdot <var:t> \land <var:s2> = <var:t> ^ <nat:2> \land <var:s0> = <nat:2> \} $ as $ \{ <var:L> = <var:t> \land <var:s1> = <nat:9> \cdot <var:t> \land <var:s2> = <nat:2> \cdot <var:t> ^ <nat:2> \land <var:s0> = <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule found in Hoare logic . After , we have the environment update line binding $ <var:s2$ as $ <var:W>$ . This transfers $ \{ <var:L> = <var:t> \land <var:s1> = <nat:9> \cdot <var:t> \land <var:s2> = <nat:2> \cdot <var:t> ^ <nat:2> \land <var:s0> = <nat:2> \} $ as the condition $ \{ <var:L> = <var:t> \land <var:s1> = <nat:9> \cdot <var:t> \land <var:s0> = <nat:2> \land <var:W> = <nat:2> \cdot <var:t> ^ <nat:2> \} $ . Advancing to the next step , we have the code \verb | <var:W> := <var:W> + <var:s1> | . This statement takes $ \{ <var:L> = <var:t> \land <var:s1> = <nat:9> \cdot <var:t> \land <var:s0> = <nat:2> \land <var:W> = <nat:2> \cdot <var:t> ^ <nat:2> \} $ into the postcondition $ \{ <var:L> = <var:t> \land <var:s0> = <nat:2> \land <var:W> = <nat:2> \cdot <var:t> ^ <nat:2> + <nat:9> \cdot <var:t> \} $ . Advancing , the assignment statement \verb | <var:W> := <var:W> + <var:s0> | . This takes the precondition $ \{ <var:L> = <var:t> \land <var:s0> = <nat:2> \land <var:W> = <nat:2> \cdot <var:t> ^ <nat:2> + <nat:9> \cdot <var:t> \} $ into the condition $ \{ <var:L> = <var:t> \land <var:W> = <nat:2> \cdot <var:t> ^ <nat:2> + <nat:9> \cdot <var:t> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s1> := <var:L> ; <var:s2> := <var:s1> * <var:L> ; <var:s0> := <nat:2> ; <var:s1> := <var:s1> * <nat:9> ; <var:s2> := <var:s2> * <nat:2> ; <var:W> := <var:s2> <var:W> := <var:W> + <var:s1> <var:W> := <var:W> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:L> = <var:t> }} <def:poly> {{ <var:W> = <nat:2> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:s1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:s1> = <var:t> /\ <var:s2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:s1> = <var:t> /\ <var:s2> = <var:t> ^ <nat:2> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:s1> = <nat:9> * <var:t> /\ <var:s2> = <var:t> ^ <nat:2> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:s1> = <nat:9> * <var:t> /\ <var:s2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:s1> = <nat:9> * <var:t> /\ <var:s0> = <nat:2> /\ <var:W> = <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:s0> = <nat:2> /\ <var:W> = <nat:2> * <var:t> ^ <nat:2> + <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:W> = <nat:2> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 