\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:8> ; <var:i> := <var:F0> \end{verbatim} Assuming that $ <var:z> = <var:N> $ ahead of the evaluation of this code , it holds that we see $ <var:i> = <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions can be shown using usual Hoare reasoning . Stepping through , we have \begin{eqnarray} \{ <var:z> = <var:N> \} \, <var:F0> := <nat:8> \, \{ <var:z> = <var:N> \land <var:F0> = <nat:8> \} \end{eqnarray} This is shown to be logically sound through the variable assignmet inference rule of typical Hoare logic . Looking at the upcoming line of code found in the list of commands , we see \begin{eqnarray} \{ <var:z> = <var:N> \} \, <var:F0> := <nat:8> \, \{ <var:z> = <var:N> \land <var:F0> = <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:z> = <var:N> }} <var:F0> := <nat:8> ; <var:i> := <var:F0> {{ <var:i> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:N> /\ <var:i> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 