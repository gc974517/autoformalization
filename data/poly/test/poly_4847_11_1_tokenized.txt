\begin{document} \begin{theorem} Take a code segment such that \begin{verbatim} <var:j1> := <var:M> ; <var:j2> := <var:j1> * <var:M> ; <var:j3> := <var:j2> * <var:M> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:2> ; <var:j2> := <var:j2> * <nat:9> ; <var:j3> := <var:j3> * <nat:7> ; <var:J> := <var:j3> <var:J> := <var:J> + <var:j2> <var:J> := <var:J> + <var:j1> <var:J> := <var:J> + <var:j0> \end{verbatim} Allow that we have $ <var:M> = <var:k> $ prior to executing our series of instructions it follows that we have $ <var:J> = <nat:7> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for our series of instructions is accomplished with this decorated set of commands . \begin{eqnarray} \{ <var:M> = <var:k> \} \\ <var:j1> := <var:M> ; \\ \{ <var:M> = <var:k> \land <var:j1> = <var:k> \} \\ <var:j2> := <var:j1> * <var:M> ; \\ \{ <var:M> = <var:k> \land <var:j1> = <var:k> \land <var:j2> = <var:k> ^ <nat:2> \} \\ <var:j3> := <var:j2> * <var:M> ; \\ \{ <var:M> = <var:k> \land <var:j1> = <var:k> \land <var:j2> = <var:k> ^ <nat:2> \land <var:j3> = <var:k> ^ <nat:3> \} \\ <var:j0> := <nat:1> ; \\ \{ <var:M> = <var:k> \land <var:j1> = <var:k> \land <var:j2> = <var:k> ^ <nat:2> \land <var:j3> = <var:k> ^ <nat:3> \land <var:j0> = <nat:1> \} \\ <var:j1> := <var:j1> * <nat:2> ; \\ \{ <var:M> = <var:k> \land <var:j1> = <nat:2> \times <var:k> \land <var:j2> = <var:k> ^ <nat:2> \land <var:j3> = <var:k> ^ <nat:3> \land <var:j0> = <nat:1> \} \\ <var:j2> := <var:j2> * <nat:9> ; \\ \{ <var:M> = <var:k> \land <var:j1> = <nat:2> \times <var:k> \land <var:j2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:j3> = <var:k> ^ <nat:3> \land <var:j0> = <nat:1> \} \\ <var:j3> := <var:j3> * <nat:7> ; \\ \{ <var:M> = <var:k> \land <var:j1> = <nat:2> \times <var:k> \land <var:j2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:j3> = <nat:7> \times <var:k> ^ <nat:3> \land <var:j0> = <nat:1> \} \\ <var:J> := <var:j3> \\ \{ <var:M> = <var:k> \land <var:j1> = <nat:2> \times <var:k> \land <var:j2> = <nat:9> \times <var:k> ^ <nat:2> \land <var:j0> = <nat:1> \land <var:J> = <nat:7> \times <var:k> ^ <nat:3> \} \\ <var:J> := <var:J> + <var:j2> \\ \{ <var:M> = <var:k> \land <var:j1> = <nat:2> \times <var:k> \land <var:j0> = <nat:1> \land <var:J> = <nat:7> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:j1> \\ \{ <var:M> = <var:k> \land <var:j0> = <nat:1> \land <var:J> = <nat:7> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> \} \\ <var:J> := <var:J> + <var:j0> \\ \{ <var:M> = <var:k> \land <var:J> = <nat:7> \times <var:k> ^ <nat:3> + <nat:9> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:M> = <var:k> }} <var:j1> := <var:M> ; <var:j2> := <var:j1> * <var:M> ; <var:j3> := <var:j2> * <var:M> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:2> ; <var:j2> := <var:j2> * <nat:9> ; <var:j3> := <var:j3> * <nat:7> ; <var:J> := <var:j3> <var:J> := <var:J> + <var:j2> <var:J> := <var:J> + <var:j1> <var:J> := <var:J> + <var:j0> {{ <var:J> = <nat:7> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:j1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:j1> = <var:k> /\ <var:j2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:j1> = <var:k> /\ <var:j2> = <var:k> ^ <nat:2> /\ <var:j3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:j1> = <var:k> /\ <var:j2> = <var:k> ^ <nat:2> /\ <var:j3> = <var:k> ^ <nat:3> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:j1> = <nat:2> * <var:k> /\ <var:j2> = <var:k> ^ <nat:2> /\ <var:j3> = <var:k> ^ <nat:3> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:j1> = <nat:2> * <var:k> /\ <var:j2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:j3> = <var:k> ^ <nat:3> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:j1> = <nat:2> * <var:k> /\ <var:j2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:j3> = <nat:7> * <var:k> ^ <nat:3> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:j1> = <nat:2> * <var:k> /\ <var:j2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:j0> = <nat:1> /\ <var:J> = <nat:7> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:j1> = <nat:2> * <var:k> /\ <var:j0> = <nat:1> /\ <var:J> = <nat:7> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:j0> = <nat:1> /\ <var:J> = <nat:7> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:J> = <nat:7> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 