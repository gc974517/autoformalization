\begin{document} \begin{theorem} We define a list of commands such that \begin{verbatim} <var:n0> := <nat:3> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:s> ; <var:C> := <var:n1> ; <var:C> := <var:C> + <var:n0> \end{verbatim} Given that we have $ <var:s> = <var:t> $ ahead of evaluating the code it follows that we see $ <var:C> = <nat:3> * <var:t> + <nat:3> $ after set of commands is done executing . \end{theorem} \begin{proof} Applying typical Hoare techniques gives : \begin{eqnarray} \{ <var:s> = <var:t> \} \\ <var:n0> := <nat:3> ; \\ \{ <var:s> = <var:t> \land <var:n0> = <nat:3> \} \\ <var:n1> := <nat:3> ; \\ \{ <var:s> = <var:t> \land <var:n0> = <nat:3> \land <var:n1> = <nat:3> \} \\ <var:n1> := <var:n1> * <var:s> ; \\ \{ <var:s> = <var:t> \land <var:n0> = <nat:3> \land <var:n1> = <nat:3> \times <var:t> \} \\ <var:C> := <var:n1> ; \\ \{ <var:s> = <var:t> \land <var:n0> = <nat:3> \land <var:C> = <nat:3> \times <var:t> \} \\ <var:C> := <var:C> + <var:n0> \\ \{ <var:s> = <var:t> \land <var:C> = <nat:3> \times <var:t> + <nat:3> \} \end{eqnarray} Therefore , the list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:s> = <var:t> }} <var:n0> := <nat:3> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:s> ; <var:C> := <var:n1> ; <var:C> := <var:C> + <var:n0> {{ <var:C> = <nat:3> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:n0> = <nat:3> /\ <var:n1> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:n0> = <nat:3> /\ <var:C> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:t> /\ <var:C> = <nat:3> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 