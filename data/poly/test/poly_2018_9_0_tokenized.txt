\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:1> ; <var:V1> := <nat:3> ; <var:V1> := <var:V1> * <var:U> ; <var:V2> := <nat:6> ; <var:V2> := <var:V2> * <var:U> ; <var:V2> := <var:V2> * <var:U> ; <var:Y> := <var:V2> ; <var:Y> := <var:Y> + <var:V1> ; <var:Y> := <var:Y> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:U> = <var:c> $ ahead of interpreting this set of instructions then we see $ <var:Y> = <nat:6> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:1> $ . \end{theorem} \begin{proof} Using usual Hoare logic yields : \begin{eqnarray} \{ <var:U> = <var:c> \} \\ <var:V0> := <nat:1> ; \\ \{ <var:U> = <var:c> \land <var:V0> = <nat:1> \} \\ <var:V1> := <nat:3> ; \\ \{ <var:U> = <var:c> \land <var:V0> = <nat:1> \land <var:V1> = <nat:3> \} \\ <var:V1> := <var:V1> * <var:U> ; \\ \{ <var:U> = <var:c> \land <var:V0> = <nat:1> \land <var:V1> = <nat:3> \times <var:c> \} \\ <var:V2> := <nat:6> ; \\ \{ <var:U> = <var:c> \land <var:V0> = <nat:1> \land <var:V1> = <nat:3> \times <var:c> \land <var:V2> = <nat:6> \} \\ <var:V2> := <var:V2> * <var:U> ; \\ \{ <var:U> = <var:c> \land <var:V0> = <nat:1> \land <var:V1> = <nat:3> \times <var:c> \land <var:V2> = <nat:6> \times <var:c> \} \\ <var:V2> := <var:V2> * <var:U> ; \\ \{ <var:U> = <var:c> \land <var:V0> = <nat:1> \land <var:V1> = <nat:3> \times <var:c> \land <var:V2> = <nat:6> \times <var:c> ^ <nat:2> \} \\ <var:Y> := <var:V2> ; \\ \{ <var:U> = <var:c> \land <var:V0> = <nat:1> \land <var:V1> = <nat:3> \times <var:c> \land <var:Y> = <nat:6> \times <var:c> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:V1> ; \\ \{ <var:U> = <var:c> \land <var:V0> = <nat:1> \land <var:Y> = <nat:6> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> \} \\ <var:Y> := <var:Y> + <var:V0> \\ \{ <var:U> = <var:c> \land <var:Y> = <nat:6> \times <var:c> ^ <nat:2> + <nat:3> \times <var:c> + <nat:1> \} \end{eqnarray} Considering the preceding argument , this program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V0> := <nat:1> ; <var:V1> := <nat:3> ; <var:V1> := <var:V1> * <var:U> ; <var:V2> := <nat:6> ; <var:V2> := <var:V2> * <var:U> ; <var:V2> := <var:V2> * <var:U> ; <var:Y> := <var:V2> ; <var:Y> := <var:Y> + <var:V1> ; <var:Y> := <var:Y> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:U> = <var:c> }} <def:poly> {{ <var:Y> = <nat:6> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:3> * <var:c> /\ <var:V2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:3> * <var:c> /\ <var:V2> = <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:3> * <var:c> /\ <var:V2> = <nat:6> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:3> * <var:c> /\ <var:Y> = <nat:6> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:V0> = <nat:1> /\ <var:Y> = <nat:6> * <var:c> ^ <nat:2> + <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:Y> = <nat:6> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 