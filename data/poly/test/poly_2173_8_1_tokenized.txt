\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:Q> ; <var:t2> := <var:t1> * <var:Q> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:5> ; <var:t2> := <var:t2> * <nat:4> ; <var:F> := <var:t2> <var:F> := <var:F> + <var:t1> <var:F> := <var:F> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:Q> = <var:j> $ , letting $ <var:j> \in \mathbb{N} $ , prior to running this list of instructions , it holds that $ <var:F> = <nat:4> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:3> $ when set of instructions terminates . \end{theorem} \begin{proof} Applying typical Hoare reasoning produces : \begin{eqnarray} \{ <var:Q> = <var:j> \} \\ <var:t1> := <var:Q> ; \\ \{ <var:Q> = <var:j> \land <var:t1> = <var:j> \} \\ <var:t2> := <var:t1> * <var:Q> ; \\ \{ <var:Q> = <var:j> \land <var:t1> = <var:j> \land <var:t2> = <var:j> ^ <nat:2> \} \\ <var:t0> := <nat:3> ; \\ \{ <var:Q> = <var:j> \land <var:t1> = <var:j> \land <var:t2> = <var:j> ^ <nat:2> \land <var:t0> = <nat:3> \} \\ <var:t1> := <var:t1> * <nat:5> ; \\ \{ <var:Q> = <var:j> \land <var:t1> = <nat:5> \cdot <var:j> \land <var:t2> = <var:j> ^ <nat:2> \land <var:t0> = <nat:3> \} \\ <var:t2> := <var:t2> * <nat:4> ; \\ \{ <var:Q> = <var:j> \land <var:t1> = <nat:5> \cdot <var:j> \land <var:t2> = <nat:4> \cdot <var:j> ^ <nat:2> \land <var:t0> = <nat:3> \} \\ <var:F> := <var:t2> \\ \{ <var:Q> = <var:j> \land <var:t1> = <nat:5> \cdot <var:j> \land <var:t0> = <nat:3> \land <var:F> = <nat:4> \cdot <var:j> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:t1> \\ \{ <var:Q> = <var:j> \land <var:t0> = <nat:3> \land <var:F> = <nat:4> \cdot <var:j> ^ <nat:2> + <nat:5> \cdot <var:j> \} \\ <var:F> := <var:F> + <var:t0> \\ \{ <var:Q> = <var:j> \land <var:F> = <nat:4> \cdot <var:j> ^ <nat:2> + <nat:5> \cdot <var:j> + <nat:3> \} \end{eqnarray} Given the preceding argument , this set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t1> := <var:Q> ; <var:t2> := <var:t1> * <var:Q> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:5> ; <var:t2> := <var:t2> * <nat:4> ; <var:F> := <var:t2> <var:F> := <var:F> + <var:t1> <var:F> := <var:F> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:Q> = <var:j> }} <def:poly> {{ <var:F> = <nat:4> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:t1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:t1> = <var:j> /\ <var:t2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:t1> = <var:j> /\ <var:t2> = <var:j> ^ <nat:2> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:t1> = <nat:5> * <var:j> /\ <var:t2> = <var:j> ^ <nat:2> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:t1> = <nat:5> * <var:j> /\ <var:t2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:t1> = <nat:5> * <var:j> /\ <var:t0> = <nat:3> /\ <var:F> = <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:t0> = <nat:3> /\ <var:F> = <nat:4> * <var:j> ^ <nat:2> + <nat:5> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:F> = <nat:4> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 