\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:s1> := <var:l> ; <var:s2> := <var:s1> * <var:l> ; <var:s3> := <var:s2> * <var:l> ; <var:s0> := <nat:1> ; <var:s2> := <var:s2> * <nat:1> ; <var:s3> := <var:s3> * <nat:3> ; <var:O> := <var:s3> <var:O> := <var:O> + <var:s2> <var:O> := <var:O> + <var:s0> \end{verbatim} Allowing that we have $ <var:l> = <var:C> $ ahead of the evaluation of the program , it must be that we see $ <var:O> = <nat:3> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Observe that the below decorated code . \begin{eqnarray} \{ <var:l> = <var:C> \} \\ <var:s1> := <var:l> ; \\ \{ <var:l> = <var:C> \land <var:s1> = <var:C> \} \\ <var:s2> := <var:s1> * <var:l> ; \\ \{ <var:l> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <var:C> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:l> ; \\ \{ <var:l> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \} \\ <var:s0> := <nat:1> ; \\ \{ <var:l> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \land <var:s0> = <nat:1> \} \\ <var:s2> := <var:s2> * <nat:1> ; \\ \{ <var:l> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:s3> = <var:C> ^ <nat:3> \land <var:s0> = <nat:1> \} \\ <var:s3> := <var:s3> * <nat:3> ; \\ \{ <var:l> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:s3> = <nat:3> \cdot <var:C> ^ <nat:3> \land <var:s0> = <nat:1> \} \\ <var:O> := <var:s3> \\ \{ <var:l> = <var:C> \land <var:s1> = <var:C> \land <var:s2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:s0> = <nat:1> \land <var:O> = <nat:3> \cdot <var:C> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:s2> \\ \{ <var:l> = <var:C> \land <var:s1> = <var:C> \land <var:s0> = <nat:1> \land <var:O> = <nat:3> \cdot <var:C> ^ <nat:3> + <nat:1> \cdot <var:C> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:s0> \\ \{ <var:l> = <var:C> \land <var:O> = <nat:3> \cdot <var:C> ^ <nat:3> + <nat:1> \cdot <var:C> ^ <nat:2> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:l> = <var:C> }} <var:s1> := <var:l> ; <var:s2> := <var:s1> * <var:l> ; <var:s3> := <var:s2> * <var:l> ; <var:s0> := <nat:1> ; <var:s2> := <var:s2> * <nat:1> ; <var:s3> := <var:s3> * <nat:3> ; <var:O> := <var:s3> <var:O> := <var:O> + <var:s2> <var:O> := <var:O> + <var:s0> {{ <var:O> = <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:s1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:s1> = <var:C> /\ <var:s2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:s1> = <var:C> /\ <var:s2> = <var:C> ^ <nat:2> /\ <var:s3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:s1> = <var:C> /\ <var:s2> = <var:C> ^ <nat:2> /\ <var:s3> = <var:C> ^ <nat:3> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:s1> = <var:C> /\ <var:s2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:s3> = <var:C> ^ <nat:3> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:s1> = <var:C> /\ <var:s2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:C> ^ <nat:3> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:s1> = <var:C> /\ <var:s2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:s0> = <nat:1> /\ <var:O> = <nat:3> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:s1> = <var:C> /\ <var:s0> = <nat:1> /\ <var:O> = <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:C> /\ <var:O> = <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 