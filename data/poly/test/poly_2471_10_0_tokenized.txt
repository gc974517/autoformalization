\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:8> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:s> ; <var:z3> := <nat:7> ; <var:z3> := <var:z3> * <var:s> ; <var:z3> := <var:z3> * <var:s> ; <var:z3> := <var:z3> * <var:s> ; <var:m> := <var:z3> ; <var:m> := <var:m> + <var:z1> ; <var:m> := <var:m> + <var:z0> \end{verbatim} Assume it to be that $ <var:s> = <var:S> $ prior to running the code segment , it holds that we have $ <var:m> = <nat:7> * <var:S> ^ <nat:3> + <nat:8> * <var:S> + <nat:8> $ when series of commands has finished executing . \end{theorem} \begin{proof} The way to prove correctness for this set of commands is shown by typical Hoare reasoning . Keeping momentum , we see the binding line giving $ <nat:8> $ as $ <var:z0>$ . This code advances the precondition $ \{ <var:s> = <var:S> \} $ into the postcondition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \} $ . This is guaranteed by the assignment law of Hoare logic . Moving on to the next step , we see the environment update statement defining $ <nat:8> $ into $ <var:z1>$ . This transfers the condition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \} $ as the postcondition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \} $ . This is sound with the assignment scheme given by Hoare logic . Moving forward , we see the environment update command defining $ <var:z1> * <var:s> $ to $ <var:z1>$ . This forwards the condition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \} $ to the condition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \times <var:S> \} $ . This is given through the assignment scheme obtained from usual Hoare logic . Advancing to the subsequent command in our series of instructions , we see the binding statement binding $ <nat:7> $ to $ <var:z3>$ . This forwards the precondition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \times <var:S> \} $ into the condition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \times <var:S> \land <var:z3> = <nat:7> \} $ . This is ensured using the assignment rule obtained from Hoare techniques . Shifting focus toward the proceeding line in the series of commands , we see the variable binding code \verb | <var:z3> := <var:z3> * <var:s> ; | . This command moves $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \times <var:S> \land <var:z3> = <nat:7> \} $ toward the condition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \times <var:S> \land <var:z3> = <nat:7> \times <var:S> \} $ . Advancing on , we have the variable assignmet command \verb | <var:z3> := <var:z3> * <var:s> ; | . This code redefines the condition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \times <var:S> \land <var:z3> = <nat:7> \times <var:S> \} $ into the condition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \times <var:S> \land <var:z3> = <nat:7> \times <var:S> ^ <nat:2> \} $ . This is given using the assignment inference rule defined by usual Hoare techniques . Advancing on , the variable binding statement defining $ <var:z3> * <var:s> $ to $ <var:z3>$ . This forwards $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \times <var:S> \land <var:z3> = <nat:7> \times <var:S> ^ <nat:2> \} $ toward the condition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \times <var:S> \land <var:z3> = <nat:7> \times <var:S> ^ <nat:3> \} $ . This is known to be sound through the assignment law defined by standard Hoare reasoning . Now , we see the variable assignmet statement yielding $ <var:z3> $ to $ <var:m>$ . This moves $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \times <var:S> \land <var:z3> = <nat:7> \times <var:S> ^ <nat:3> \} $ as the condition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \times <var:S> \land <var:m> = <nat:7> \times <var:S> ^ <nat:3> \} $ . This is given by the assignment scheme found in standard Hoare reasoning . Jumping to the upcoming bit of code found in our program , we have the environment update code \verb | <var:m> := <var:m> + <var:z1> ; | . This line redefines the condition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:z1> = <nat:8> \times <var:S> \land <var:m> = <nat:7> \times <var:S> ^ <nat:3> \} $ to the postcondition $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:m> = <nat:7> \times <var:S> ^ <nat:3> + <nat:8> \times <var:S> \} $ . This is sound through the assignment law given by usual Hoare techniques . Considering the next statement contained in our list of commands , we see the assignment command giving $ <var:m> + <var:z0$ to $ <var:m>$ . This forwards $ \{ <var:s> = <var:S> \land <var:z0> = <nat:8> \land <var:m> = <nat:7> \times <var:S> ^ <nat:3> + <nat:8> \times <var:S> \} $ to the condition $ \{ <var:s> = <var:S> \land <var:m> = <nat:7> \times <var:S> ^ <nat:3> + <nat:8> \times <var:S> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z3> : string := " <var:z3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:s> = <var:S> }} <var:z0> := <nat:8> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:s> ; <var:z3> := <nat:7> ; <var:z3> := <var:z3> * <var:s> ; <var:z3> := <var:z3> * <var:s> ; <var:z3> := <var:z3> * <var:s> ; <var:m> := <var:z3> ; <var:m> := <var:m> + <var:z1> ; <var:m> := <var:m> + <var:z0> {{ <var:m> = <nat:7> * <var:S> ^ <nat:3> + <nat:8> * <var:S> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:S> /\ <var:z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:S> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:S> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:8> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:S> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:8> * <var:S> /\ <var:z3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:S> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:8> * <var:S> /\ <var:z3> = <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:S> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:8> * <var:S> /\ <var:z3> = <nat:7> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:S> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:8> * <var:S> /\ <var:z3> = <nat:7> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:S> /\ <var:z0> = <nat:8> /\ <var:z1> = <nat:8> * <var:S> /\ <var:m> = <nat:7> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:S> /\ <var:z0> = <nat:8> /\ <var:m> = <nat:7> * <var:S> ^ <nat:3> + <nat:8> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:S> /\ <var:m> = <nat:7> * <var:S> ^ <nat:3> + <nat:8> * <var:S> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 