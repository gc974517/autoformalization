\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:S1> := <var:p> ; <var:S2> := <var:S1> * <var:p> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:1> ; <var:S2> := <var:S2> * <nat:5> ; <var:Z> := <var:S2> <var:Z> := <var:Z> + <var:S1> <var:Z> := <var:Z> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> . Assume that $ <var:p> = <var:x> $ prior to the evaluation of this set of instructions it holds that we see $ <var:Z> = <nat:5> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:9> $ after series of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:x> \} \\ <var:S1> := <var:p> ; \\ \{ <var:p> = <var:x> \land <var:S1> = <var:x> \} \\ <var:S2> := <var:S1> * <var:p> ; \\ \{ <var:p> = <var:x> \land <var:S1> = <var:x> \land <var:S2> = <var:x> ^ <nat:2> \} \\ <var:S0> := <nat:9> ; \\ \{ <var:p> = <var:x> \land <var:S1> = <var:x> \land <var:S2> = <var:x> ^ <nat:2> \land <var:S0> = <nat:9> \} \\ <var:S1> := <var:S1> * <nat:1> ; \\ \{ <var:p> = <var:x> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <var:x> ^ <nat:2> \land <var:S0> = <nat:9> \} \\ <var:S2> := <var:S2> * <nat:5> ; \\ \{ <var:p> = <var:x> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:5> \cdot <var:x> ^ <nat:2> \land <var:S0> = <nat:9> \} \\ <var:Z> := <var:S2> \\ \{ <var:p> = <var:x> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S0> = <nat:9> \land <var:Z> = <nat:5> \cdot <var:x> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:S1> \\ \{ <var:p> = <var:x> \land <var:S0> = <nat:9> \land <var:Z> = <nat:5> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> \} \\ <var:Z> := <var:Z> + <var:S0> \\ \{ <var:p> = <var:x> \land <var:Z> = <nat:5> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:9> \} \end{eqnarray} The application of typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S1> := <var:p> ; <var:S2> := <var:S1> * <var:p> ; <var:S0> := <nat:9> ; <var:S1> := <var:S1> * <nat:1> ; <var:S2> := <var:S2> * <nat:5> ; <var:Z> := <var:S2> <var:Z> := <var:Z> + <var:S1> <var:Z> := <var:Z> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:p> = <var:x> }} <def:poly> {{ <var:Z> = <nat:5> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:S1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:S1> = <var:x> /\ <var:S2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:S1> = <var:x> /\ <var:S2> = <var:x> ^ <nat:2> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S2> = <var:x> ^ <nat:2> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S2> = <nat:5> * <var:x> ^ <nat:2> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S0> = <nat:9> /\ <var:Z> = <nat:5> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:S0> = <nat:9> /\ <var:Z> = <nat:5> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:Z> = <nat:5> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 