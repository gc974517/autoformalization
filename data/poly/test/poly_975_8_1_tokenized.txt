\begin{document} \begin{theorem} Let the following code in \emph{Imp} such that \begin{verbatim} <var:D1> := <var:n> ; <var:D2> := <var:D1> * <var:n> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:4> ; <var:D2> := <var:D2> * <nat:9> ; <var:T> := <var:D2> <var:T> := <var:T> + <var:D1> <var:T> := <var:T> + <var:D0> \end{verbatim} Assuming that we have $ <var:n> = <var:u> $ before the evaluation of our code segment , it must be that we see $ <var:T> = <nat:9> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + <nat:4> $ once code segment has terminated . \end{theorem} \begin{proof} See that the below decorated set of instructions . \begin{eqnarray} \{ <var:n> = <var:u> \} \\ <var:D1> := <var:n> ; \\ \{ <var:n> = <var:u> \land <var:D1> = <var:u> \} \\ <var:D2> := <var:D1> * <var:n> ; \\ \{ <var:n> = <var:u> \land <var:D1> = <var:u> \land <var:D2> = <var:u> ^ <nat:2> \} \\ <var:D0> := <nat:4> ; \\ \{ <var:n> = <var:u> \land <var:D1> = <var:u> \land <var:D2> = <var:u> ^ <nat:2> \land <var:D0> = <nat:4> \} \\ <var:D1> := <var:D1> * <nat:4> ; \\ \{ <var:n> = <var:u> \land <var:D1> = <nat:4> \cdot <var:u> \land <var:D2> = <var:u> ^ <nat:2> \land <var:D0> = <nat:4> \} \\ <var:D2> := <var:D2> * <nat:9> ; \\ \{ <var:n> = <var:u> \land <var:D1> = <nat:4> \cdot <var:u> \land <var:D2> = <nat:9> \cdot <var:u> ^ <nat:2> \land <var:D0> = <nat:4> \} \\ <var:T> := <var:D2> \\ \{ <var:n> = <var:u> \land <var:D1> = <nat:4> \cdot <var:u> \land <var:D0> = <nat:4> \land <var:T> = <nat:9> \cdot <var:u> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:D1> \\ \{ <var:n> = <var:u> \land <var:D0> = <nat:4> \land <var:T> = <nat:9> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> \} \\ <var:T> := <var:T> + <var:D0> \\ \{ <var:n> = <var:u> \land <var:T> = <nat:9> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + <nat:4> \} \end{eqnarray} Applying standard Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:n> = <var:u> }} <var:D1> := <var:n> ; <var:D2> := <var:D1> * <var:n> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:4> ; <var:D2> := <var:D2> * <nat:9> ; <var:T> := <var:D2> <var:T> := <var:T> + <var:D1> <var:T> := <var:T> + <var:D0> {{ <var:T> = <nat:9> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:D1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:D1> = <var:u> /\ <var:D2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:D1> = <var:u> /\ <var:D2> = <var:u> ^ <nat:2> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:D1> = <nat:4> * <var:u> /\ <var:D2> = <var:u> ^ <nat:2> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:D1> = <nat:4> * <var:u> /\ <var:D2> = <nat:9> * <var:u> ^ <nat:2> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:D1> = <nat:4> * <var:u> /\ <var:D0> = <nat:4> /\ <var:T> = <nat:9> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:D0> = <nat:4> /\ <var:T> = <nat:9> * <var:u> ^ <nat:2> + <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:T> = <nat:9> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 