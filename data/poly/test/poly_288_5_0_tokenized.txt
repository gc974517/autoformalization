\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:4> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:X> ; <var:z> := <var:F1> ; <var:z> := <var:z> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Assume for every integers $ <var:n> $ that we have $ <var:X> = <var:n> $ prior to the evaluation of our set of instructions then $ <var:z> = <nat:3> \cdot <var:n> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this program can be given through Hoare reasoning . Moving forward to the next step , we have the variable assignmet code binding $ <nat:4> $ into $ <var:F0>$ . This command redefines the precondition $ \{ <var:X> = <var:n> \} $ to the postcondition $ \{ <var:X> = <var:n> \land <var:F0> = <nat:4> \} $ . This is ensured by the assignment inference rule found in usual Hoare logic . Further , we have the variable binding code \verb | <var:F1> := <nat:3> ; | . This command redefines the precondition $ \{ <var:X> = <var:n> \land <var:F0> = <nat:4> \} $ toward the postcondition $ \{ <var:X> = <var:n> \land <var:F0> = <nat:4> \land <var:F1> = <nat:3> \} $ . This is known to be sound using the assignment rule found in standard Hoare reasoning . Immediately following , we have the environment update code yielding $ <var:F1> * <var:X> $ toward $ <var:F1>$ . This code takes the precondition $ \{ <var:X> = <var:n> \land <var:F0> = <nat:4> \land <var:F1> = <nat:3> \} $ to the condition $ \{ <var:X> = <var:n> \land <var:F0> = <nat:4> \land <var:F1> = <nat:3> * <var:n> \} $ . Moving on to the next step , the binding command yielding $ <var:F1> $ as $ <var:z>$ . This moves $ \{ <var:X> = <var:n> \land <var:F0> = <nat:4> \land <var:F1> = <nat:3> * <var:n> \} $ as the condition $ \{ <var:X> = <var:n> \land <var:F0> = <nat:4> \land <var:z> = <nat:3> * <var:n> \} $ . Keeping momentum , the statement giving $ <var:z> + <var:F0$ as $ <var:z>$ . This command moves the precondition $ \{ <var:X> = <var:n> \land <var:F0> = <nat:4> \land <var:z> = <nat:3> * <var:n> \} $ to $ \{ <var:X> = <var:n> \land <var:z> = <nat:3> * <var:n> + <nat:4> \} $ . This is guaranteed with the assignment inference rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:X> ; <var:z> := <var:F1> ; <var:z> := <var:z> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:X> = <var:n> }} <def:poly> {{ <var:z> = <nat:3> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:n> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:n> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:n> /\ <var:F0> = <nat:4> /\ <var:F1> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:n> /\ <var:F0> = <nat:4> /\ <var:z> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:n> /\ <var:z> = <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 