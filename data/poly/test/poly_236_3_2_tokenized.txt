\begin{document} \begin{theorem} Define the following code segment : \begin{verbatim} <var:X> := <nat:3> ; <var:X> := <nat:4> + <var:X> * <var:Q> ; <var:X> := <nat:4> + <var:X> * <var:Q> \end{verbatim} Allow it to hold that $ <var:Q> = <var:n> $ ahead of running the list of instructions , it holds that we see $ <var:X> = <nat:3> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:4> $ when list of commands has finished executing . \end{theorem} \begin{proof} The method of proof for our series of commands is given through Hoare logic . Moving on , the binding statement giving $ <nat:3> $ into $ <var:X>$ . This transfers the precondition $ \{ <var:Q> = <var:n> \} $ to the postcondition $ \{ <var:Q> = <var:n> \land <var:X> = <nat:3> \} $ . This is given with the assignment inference rule given in usual Hoare reasoning . Considering the subsequent line in the program , we see the binding command \verb | <var:X> := <nat:4> + <var:X> * <var:Q> ; | . This moves the precondition $ \{ <var:Q> = <var:n> \land <var:X> = <nat:3> \} $ to the postcondition $ \{ <var:Q> = <var:n> \land <var:X> = <nat:3> * <var:n> + <nat:4> \} $ . This is sound with the assignment law of standard Hoare techniques . Shifting focus toward the subsequent line of code seen in our segment of code , we have the environment update line letting $ <nat:4> + <var:X> * <var:Q$ as $ <var:X>$ . This code transfers $ \{ <var:Q> = <var:n> \land <var:X> = <nat:3> * <var:n> + <nat:4> \} $ into $ \{ <var:Q> = <var:n> \land <var:X> = <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> \} $ . This is known to be sound using the assignment law defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:Q> = <var:n> }} <var:X> := <nat:3> ; <var:X> := <nat:4> + <var:X> * <var:Q> ; <var:X> := <nat:4> + <var:X> * <var:Q> {{ <var:X> = <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:X> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:X> = <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:X> = <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 