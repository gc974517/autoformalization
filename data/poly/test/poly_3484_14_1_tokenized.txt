\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:o1> := <var:G> ; <var:o2> := <var:o1> * <var:G> ; <var:o3> := <var:o2> * <var:G> ; <var:o4> := <var:o3> * <var:G> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:6> ; <var:o2> := <var:o2> * <nat:8> ; <var:o3> := <var:o3> * <nat:2> ; <var:o4> := <var:o4> * <nat:3> ; <var:u> := <var:o4> <var:u> := <var:u> + <var:o3> <var:u> := <var:u> + <var:o2> <var:u> := <var:u> + <var:o1> <var:u> := <var:u> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Given --- letting positive coefficients $ <var:w> $ --- it to be that $ <var:G> = <var:w> $ before evaluating this code segment it must be that we see $ <var:u> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:2> $ when code has executed . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions can be done using standard Hoare techniques . Moving forward to the next step , we have the variable binding statement \verb | <var:o1> := <var:G> ; | . This command advances $ \{ <var:G> = <var:w> \} $ as $ \{ <var:G> = <var:w> \land <var:o1> = <var:w> \} $ . This is shown to be logically sound using the assignment law in standard Hoare logic . Taking another step toward the next line of code contained in our program , the variable update line \verb | <var:o2> := <var:o1> * <var:G> ; | . This code moves the precondition $ \{ <var:G> = <var:w> \land <var:o1> = <var:w> \} $ to $ \{ <var:G> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \} $ . Now , we see the environment update command \verb | <var:o3> := <var:o2> * <var:G> ; | . This forwards the precondition $ \{ <var:G> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \} $ as $ \{ <var:G> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \} $ . Moving on to the next step , we see the variable binding line \verb | <var:o4> := <var:o3> * <var:G> ; | . This forwards $ \{ <var:G> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \} $ into $ \{ <var:G> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \land <var:o4> = <var:w> ^ <nat:4> \} $ . Moving forward to the following line of code seen in our set of instructions , the binding statement \verb | <var:o0> := <nat:2> ; | . This advances the condition $ \{ <var:G> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \land <var:o4> = <var:w> ^ <nat:4> \} $ to the condition $ \{ <var:G> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \land <var:o4> = <var:w> ^ <nat:4> \land <var:o0> = <nat:2> \} $ . This is shown to be logically sound through the assignment law from usual Hoare techniques . Now , the variable assignmet command giving $ <var:o1> * <nat:6> $ into $ <var:o1>$ . This code transfers $ \{ <var:G> = <var:w> \land <var:o1> = <var:w> \land <var:o2> = <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \land <var:o4> = <var:w> ^ <nat:4> \land <var:o0> = <nat:2> \} $ toward $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o2> = <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \land <var:o4> = <var:w> ^ <nat:4> \land <var:o0> = <nat:2> \} $ . This is known to be sound using the assignment rule of typical Hoare reasoning . Going forward , we see the statement defining $ <var:o2> * <nat:8> $ toward $ <var:o2>$ . This code moves $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o2> = <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \land <var:o4> = <var:w> ^ <nat:4> \land <var:o0> = <nat:2> \} $ into the postcondition $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \land <var:o4> = <var:w> ^ <nat:4> \land <var:o0> = <nat:2> \} $ . This is shown to be logically sound by the assignment rule defined by usual Hoare logic . Moving forward to the upcoming line of code found in the code , the variable assignmet code \verb | <var:o3> := <var:o3> * <nat:2> ; | . This statement moves the precondition $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:o3> = <var:w> ^ <nat:3> \land <var:o4> = <var:w> ^ <nat:4> \land <var:o0> = <nat:2> \} $ to the postcondition $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:o3> = <nat:2> \cdot <var:w> ^ <nat:3> \land <var:o4> = <var:w> ^ <nat:4> \land <var:o0> = <nat:2> \} $ . This is known to be sound through the assignment law in usual Hoare logic . Stepping through , we have the variable update code \verb | <var:o4> := <var:o4> * <nat:3> ; | . This redefines the condition $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:o3> = <nat:2> \cdot <var:w> ^ <nat:3> \land <var:o4> = <var:w> ^ <nat:4> \land <var:o0> = <nat:2> \} $ as $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:o3> = <nat:2> \cdot <var:w> ^ <nat:3> \land <var:o4> = <nat:3> \cdot <var:w> ^ <nat:4> \land <var:o0> = <nat:2> \} $ . Immediately following , we have the statement assigning $ <var:o4$ toward $ <var:u>$ . This statement takes the precondition $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:o3> = <nat:2> \cdot <var:w> ^ <nat:3> \land <var:o4> = <nat:3> \cdot <var:w> ^ <nat:4> \land <var:o0> = <nat:2> \} $ to $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:o3> = <nat:2> \cdot <var:w> ^ <nat:3> \land <var:o0> = <nat:2> \land <var:u> = <nat:3> \cdot <var:w> ^ <nat:4> \} $ . This is shown with the assignment scheme in Hoare reasoning . Taking a look at the subsequent step seen in our series of commands , we see the statement \verb | <var:u> := <var:u> + <var:o3> | . This command forwards $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:o3> = <nat:2> \cdot <var:w> ^ <nat:3> \land <var:o0> = <nat:2> \land <var:u> = <nat:3> \cdot <var:w> ^ <nat:4> \} $ as the postcondition $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:o0> = <nat:2> \land <var:u> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> \} $ . This is rigorously given using the assignment law defined in usual Hoare reasoning . Taking another step toward the next bit of code found in our set of instructions , we see the variable assignmet statement defining $ <var:u> + <var:o2$ into $ <var:u>$ . This advances $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:o0> = <nat:2> \land <var:u> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> \} $ into $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o0> = <nat:2> \land <var:u> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:8> \cdot <var:w> ^ <nat:2> \} $ . Taking another step toward the proceeding statement found in our list of commands , we have the assignment command \verb | <var:u> := <var:u> + <var:o1> | . This statement redefines the condition $ \{ <var:G> = <var:w> \land <var:o1> = <nat:6> \cdot <var:w> \land <var:o0> = <nat:2> \land <var:u> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:8> \cdot <var:w> ^ <nat:2> \} $ toward the condition $ \{ <var:G> = <var:w> \land <var:o0> = <nat:2> \land <var:u> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:8> \cdot <var:w> ^ <nat:2> + <nat:6> \cdot <var:w> \} $ . Stepping through , we see the environment update command \verb | <var:u> := <var:u> + <var:o0> | . This line transfers the condition $ \{ <var:G> = <var:w> \land <var:o0> = <nat:2> \land <var:u> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:8> \cdot <var:w> ^ <nat:2> + <nat:6> \cdot <var:w> \} $ as the condition $ \{ <var:G> = <var:w> \land <var:u> = <nat:3> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:8> \cdot <var:w> ^ <nat:2> + <nat:6> \cdot <var:w> + <nat:2> \} $ . This is ensured using the assignment rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <var:o4> : string := " <var:o4> " . Definition <def:poly> := <var:o1> := <var:G> ; <var:o2> := <var:o1> * <var:G> ; <var:o3> := <var:o2> * <var:G> ; <var:o4> := <var:o3> * <var:G> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:6> ; <var:o2> := <var:o2> * <nat:8> ; <var:o3> := <var:o3> * <nat:2> ; <var:o4> := <var:o4> * <nat:3> ; <var:u> := <var:o4> <var:u> := <var:u> + <var:o3> <var:u> := <var:u> + <var:o2> <var:u> := <var:u> + <var:o1> <var:u> := <var:u> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:G> = <var:w> }} <def:poly> {{ <var:u> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:o1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:o1> = <var:w> /\ <var:o2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:o1> = <var:w> /\ <var:o2> = <var:w> ^ <nat:2> /\ <var:o3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:o1> = <var:w> /\ <var:o2> = <var:w> ^ <nat:2> /\ <var:o3> = <var:w> ^ <nat:3> /\ <var:o4> = <var:w> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:o1> = <var:w> /\ <var:o2> = <var:w> ^ <nat:2> /\ <var:o3> = <var:w> ^ <nat:3> /\ <var:o4> = <var:w> ^ <nat:4> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:o1> = <nat:6> * <var:w> /\ <var:o2> = <var:w> ^ <nat:2> /\ <var:o3> = <var:w> ^ <nat:3> /\ <var:o4> = <var:w> ^ <nat:4> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:o1> = <nat:6> * <var:w> /\ <var:o2> = <nat:8> * <var:w> ^ <nat:2> /\ <var:o3> = <var:w> ^ <nat:3> /\ <var:o4> = <var:w> ^ <nat:4> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:o1> = <nat:6> * <var:w> /\ <var:o2> = <nat:8> * <var:w> ^ <nat:2> /\ <var:o3> = <nat:2> * <var:w> ^ <nat:3> /\ <var:o4> = <var:w> ^ <nat:4> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:o1> = <nat:6> * <var:w> /\ <var:o2> = <nat:8> * <var:w> ^ <nat:2> /\ <var:o3> = <nat:2> * <var:w> ^ <nat:3> /\ <var:o4> = <nat:3> * <var:w> ^ <nat:4> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:o1> = <nat:6> * <var:w> /\ <var:o2> = <nat:8> * <var:w> ^ <nat:2> /\ <var:o3> = <nat:2> * <var:w> ^ <nat:3> /\ <var:o0> = <nat:2> /\ <var:u> = <nat:3> * <var:w> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:o1> = <nat:6> * <var:w> /\ <var:o2> = <nat:8> * <var:w> ^ <nat:2> /\ <var:o0> = <nat:2> /\ <var:u> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:o1> = <nat:6> * <var:w> /\ <var:o0> = <nat:2> /\ <var:u> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:8> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:o0> = <nat:2> /\ <var:u> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:u> = <nat:3> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 