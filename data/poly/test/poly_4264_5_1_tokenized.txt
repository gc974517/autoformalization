\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:L1> := <var:C> ; <var:L0> := <nat:2> ; <var:L1> := <var:L1> * <nat:5> ; <var:f> := <var:L1> <var:f> := <var:f> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> in \emph{Imp} . Allowing , given some $ <var:D> \in \mathbb{Z}^+ $ , that we have $ <var:C> = <var:D> $ ahead of the evaluation of our series of instructions , it follows that we have $ <var:f> = <nat:5> \cdot <var:D> + <nat:2> $ once segment of code has terminated . \end{theorem} \begin{proof} See that the below decorated set of instructions . \begin{eqnarray} \{ <var:C> = <var:D> \} \\ <var:L1> := <var:C> ; \\ \{ <var:C> = <var:D> \land <var:L1> = <var:D> \} \\ <var:L0> := <nat:2> ; \\ \{ <var:C> = <var:D> \land <var:L1> = <var:D> \land <var:L0> = <nat:2> \} \\ <var:L1> := <var:L1> * <nat:5> ; \\ \{ <var:C> = <var:D> \land <var:L1> = <nat:5> \cdot <var:D> \land <var:L0> = <nat:2> \} \\ <var:f> := <var:L1> \\ \{ <var:C> = <var:D> \land <var:L0> = <nat:2> \land <var:f> = <nat:5> \cdot <var:D> \} \\ <var:f> := <var:f> + <var:L0> \\ \{ <var:C> = <var:D> \land <var:f> = <nat:5> \cdot <var:D> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L1> := <var:C> ; <var:L0> := <nat:2> ; <var:L1> := <var:L1> * <nat:5> ; <var:f> := <var:L1> <var:f> := <var:f> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:C> = <var:D> }} <def:poly> {{ <var:f> = <nat:5> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:L1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:L1> = <var:D> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:L1> = <nat:5> * <var:D> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:L0> = <nat:2> /\ <var:f> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:D> /\ <var:f> = <nat:5> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 