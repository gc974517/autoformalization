\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y> := <nat:2> ; <var:Y> := <nat:2> + <var:Y> * <var:k> ; <var:Y> := <nat:4> + <var:Y> * <var:k> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:k> = <var:l> $ taking $ <var:l> $ ahead of interpreting our list of commands then $ <var:Y> = <nat:2> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands can be accomplished by standard Hoare techniques . Paying attention to the upcoming line of code seen in the series of commands , \begin{eqnarray} \{ <var:k> = <var:l> \} \, <var:Y> := <nat:2> \, \{ <var:k> = <var:l> \land <var:Y> = <nat:2> \} \end{eqnarray} Observing the upcoming step in the program , we see \begin{eqnarray} \{ <var:k> = <var:l> \} \, <var:Y> := <nat:2> \, \{ <var:k> = <var:l> \land <var:Y> = <nat:2> \} \end{eqnarray} This is known to be sound using the environment update inference rule found in Hoare reasoning . Focusing on the subsequent command in our code segment , we see \begin{eqnarray} \{ <var:k> = <var:l> \} \, <var:Y> := <nat:2> \, \{ <var:k> = <var:l> \land <var:Y> = <nat:2> \} \end{eqnarray} This is shown to be logically sound through the variable update scheme of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Y> := <nat:2> ; <var:Y> := <nat:2> + <var:Y> * <var:k> ; <var:Y> := <nat:4> + <var:Y> * <var:k> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:k> = <var:l> }} <def:poly> {{ <var:Y> = <nat:2> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:Y> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:Y> = <nat:2> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:Y> = <nat:2> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 