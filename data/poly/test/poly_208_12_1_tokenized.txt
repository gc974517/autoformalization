\begin{document} \begin{theorem} Define the following code in \emph{Imp} such that \begin{verbatim} <var:N1> := <var:D> ; <var:N2> := <var:N1> * <var:D> ; <var:N3> := <var:N2> * <var:D> ; <var:N4> := <var:N3> * <var:D> ; <var:N0> := <nat:1> ; <var:N1> := <var:N1> * <nat:2> ; <var:N3> := <var:N3> * <nat:4> ; <var:N4> := <var:N4> * <nat:1> ; <var:a> := <var:N4> <var:a> := <var:a> + <var:N3> <var:a> := <var:a> + <var:N1> <var:a> := <var:a> + <var:N0> \end{verbatim} Assume it to be that $ <var:D> = <var:M> $ before the execution of this series of instructions it holds that we see $ <var:a> = <nat:1> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> + <nat:1> $ . \end{theorem} \begin{proof} The proof of the set of commands can be demonstrated using standard Hoare logic . Focusing on the next lines of codecontained in our series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:D> = <var:M> \} & <var:N1> := <var:D> & \{ <var:D> = <var:M> \land <var:N1> = <var:M> \} \\ \{ <var:D> = <var:M> \land <var:N1> = <var:M> \} & <var:N2> := <var:N1> * <var:D> & \{ <var:D> = <var:M> \land <var:N1> = <var:M> \land <var:N2> = <var:M> ^ <nat:2> \} \\ \{ <var:D> = <var:M> \land <var:N1> = <var:M> \land <var:N2> = <var:M> ^ <nat:2> \} & <var:N3> := <var:N2> * <var:D> & \{ <var:D> = <var:M> \land <var:N1> = <var:M> \land <var:N2> = <var:M> ^ <nat:2> \land <var:N3> = <var:M> ^ <nat:3> \} \\ \{ <var:D> = <var:M> \land <var:N1> = <var:M> \land <var:N2> = <var:M> ^ <nat:2> \land <var:N3> = <var:M> ^ <nat:3> \} & <var:N4> := <var:N3> * <var:D> & \{ <var:D> = <var:M> \land <var:N1> = <var:M> \land <var:N2> = <var:M> ^ <nat:2> \land <var:N3> = <var:M> ^ <nat:3> \land <var:N4> = <var:M> ^ <nat:4> \} \\ \{ <var:D> = <var:M> \land <var:N1> = <var:M> \land <var:N2> = <var:M> ^ <nat:2> \land <var:N3> = <var:M> ^ <nat:3> \land <var:N4> = <var:M> ^ <nat:4> \} & <var:N0> := <nat:1> & \{ <var:D> = <var:M> \land <var:N1> = <var:M> \land <var:N2> = <var:M> ^ <nat:2> \land <var:N3> = <var:M> ^ <nat:3> \land <var:N4> = <var:M> ^ <nat:4> \land <var:N0> = <nat:1> \} \\ \{ <var:D> = <var:M> \land <var:N1> = <var:M> \land <var:N2> = <var:M> ^ <nat:2> \land <var:N3> = <var:M> ^ <nat:3> \land <var:N4> = <var:M> ^ <nat:4> \land <var:N0> = <nat:1> \} & <var:N1> := <var:N1> * <nat:2> & \{ <var:D> = <var:M> \land <var:N1> = <nat:2> \times <var:M> \land <var:N2> = <var:M> ^ <nat:2> \land <var:N3> = <var:M> ^ <nat:3> \land <var:N4> = <var:M> ^ <nat:4> \land <var:N0> = <nat:1> \} \end{tabular} Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:D> = <var:M> \} & <var:N1> := <var:D> & \{ <var:D> = <var:M> \land <var:N1> = <var:M> \} \\ \{ <var:D> = <var:M> \land <var:N1> = <var:M> \} & <var:N2> := <var:N1> * <var:D> & \{ <var:D> = <var:M> \land <var:N1> = <var:M> \land <var:N2> = <var:M> ^ <nat:2> \} \end{tabular} This is sound by the inference rule in Hoare techniques . Jumping to the following bits of codefound in the series of commands , \[ \begin{tabular} {rcl} \{ <var:D> = <var:M> \} & <var:N1> := <var:D> & \{ <var:D> = <var:M> \land <var:N1> = <var:M> \} \\ \{ <var:D> = <var:M> \land <var:N1> = <var:M> \} & <var:N2> := <var:N1> * <var:D> & \{ <var:D> = <var:M> \land <var:N1> = <var:M> \land <var:N2> = <var:M> ^ <nat:2> \} \\ \{ <var:D> = <var:M> \land <var:N1> = <var:M> \land <var:N2> = <var:M> ^ <nat:2> \} & <var:N3> := <var:N2> * <var:D> & \{ <var:D> = <var:M> \land <var:N1> = <var:M> \land <var:N2> = <var:M> ^ <nat:2> \land <var:N3> = <var:M> ^ <nat:3> \} \end{tabular} This is rigorously given with the variable binding inference rule defined in standard Hoare techniques . Shifting focus toward the next statement in the series of instructions , \[ \begin{tabular} {rcl} \{ <var:D> = <var:M> \} & <var:N1> := <var:D> & \{ <var:D> = <var:M> \land <var:N1> = <var:M> \} \end{tabular} This is sound using the variable assignmet rule obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <var:N4> : string := " <var:N4> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:D> = <var:M> }} <var:N1> := <var:D> ; <var:N2> := <var:N1> * <var:D> ; <var:N3> := <var:N2> * <var:D> ; <var:N4> := <var:N3> * <var:D> ; <var:N0> := <nat:1> ; <var:N1> := <var:N1> * <nat:2> ; <var:N3> := <var:N3> * <nat:4> ; <var:N4> := <var:N4> * <nat:1> ; <var:a> := <var:N4> <var:a> := <var:a> + <var:N3> <var:a> := <var:a> + <var:N1> <var:a> := <var:a> + <var:N0> {{ <var:a> = <nat:1> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:2> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:N1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:N1> = <var:M> /\ <var:N2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:N1> = <var:M> /\ <var:N2> = <var:M> ^ <nat:2> /\ <var:N3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:N1> = <var:M> /\ <var:N2> = <var:M> ^ <nat:2> /\ <var:N3> = <var:M> ^ <nat:3> /\ <var:N4> = <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:N1> = <var:M> /\ <var:N2> = <var:M> ^ <nat:2> /\ <var:N3> = <var:M> ^ <nat:3> /\ <var:N4> = <var:M> ^ <nat:4> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:N1> = <nat:2> * <var:M> /\ <var:N2> = <var:M> ^ <nat:2> /\ <var:N3> = <var:M> ^ <nat:3> /\ <var:N4> = <var:M> ^ <nat:4> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:N1> = <nat:2> * <var:M> /\ <var:N2> = <var:M> ^ <nat:2> /\ <var:N3> = <nat:4> * <var:M> ^ <nat:3> /\ <var:N4> = <var:M> ^ <nat:4> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:N1> = <nat:2> * <var:M> /\ <var:N2> = <var:M> ^ <nat:2> /\ <var:N3> = <nat:4> * <var:M> ^ <nat:3> /\ <var:N4> = <nat:1> * <var:M> ^ <nat:4> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:N1> = <nat:2> * <var:M> /\ <var:N2> = <var:M> ^ <nat:2> /\ <var:N3> = <nat:4> * <var:M> ^ <nat:3> /\ <var:N0> = <nat:1> /\ <var:a> = <nat:1> * <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:N1> = <nat:2> * <var:M> /\ <var:N2> = <var:M> ^ <nat:2> /\ <var:N0> = <nat:1> /\ <var:a> = <nat:1> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:N0> = <nat:1> /\ <var:a> = <nat:1> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:a> = <nat:1> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:2> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 