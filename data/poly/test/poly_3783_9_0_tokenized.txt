\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:3> ; <var:x1> := <nat:8> ; <var:x1> := <var:x1> * <var:u> ; <var:x2> := <nat:5> ; <var:x2> := <var:x2> * <var:u> ; <var:x2> := <var:x2> * <var:u> ; <var:c> := <var:x2> ; <var:c> := <var:c> + <var:x1> ; <var:c> := <var:c> + <var:x0> \end{verbatim} Given $ <var:u> = <var:D> $ before the execution of the series of instructions it holds that $ <var:c> = <nat:5> * <var:D> ^ <nat:2> + <nat:8> * <var:D> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this set of commands is accomplished using usual Hoare reasoning . Moving forward to the following lines of codecontained in our list of instructions , \verb | { <var:u> = <var:D> } <var:x0> := <nat:3> { <var:u> = <var:D> \land <var:x0> = <nat:3> } | , \verb | { <var:u> = <var:D> \land <var:x0> = <nat:3> } <var:x1> := <nat:8> { <var:u> = <var:D> \land <var:x0> = <nat:3> \land <var:x1> = <nat:8> } | , \verb | { <var:u> = <var:D> \land <var:x0> = <nat:3> \land <var:x1> = <nat:8> } <var:x1> := <var:x1> * <var:u> { <var:u> = <var:D> \land <var:x0> = <nat:3> \land <var:x1> = <nat:8> \times <var:D> } | , \verb | { <var:u> = <var:D> \land <var:x0> = <nat:3> \land <var:x1> = <nat:8> \times <var:D> } <var:x2> := <nat:5> { <var:u> = <var:D> \land <var:x0> = <nat:3> \land <var:x1> = <nat:8> \times <var:D> \land <var:x2> = <nat:5> } | , \verb | { <var:u> = <var:D> \land <var:x0> = <nat:3> \land <var:x1> = <nat:8> \times <var:D> \land <var:x2> = <nat:5> } <var:x2> := <var:x2> * <var:u> { <var:u> = <var:D> \land <var:x0> = <nat:3> \land <var:x1> = <nat:8> \times <var:D> \land <var:x2> = <nat:5> \times <var:D> } | , \verb | { <var:u> = <var:D> \land <var:x0> = <nat:3> \land <var:x1> = <nat:8> \times <var:D> \land <var:x2> = <nat:5> \times <var:D> } <var:x2> := <var:x2> * <var:u> { <var:u> = <var:D> \land <var:x0> = <nat:3> \land <var:x1> = <nat:8> \times <var:D> \land <var:x2> = <nat:5> \times <var:D> ^ <nat:2> } | and \verb | { <var:u> = <var:D> \land <var:x0> = <nat:3> \land <var:x1> = <nat:8> \times <var:D> \land <var:x2> = <nat:5> \times <var:D> ^ <nat:2> } <var:c> := <var:x2> { <var:u> = <var:D> \land <var:x0> = <nat:3> \land <var:x1> = <nat:8> \times <var:D> \land <var:c> = <nat:5> \times <var:D> ^ <nat:2> } | . This is sound through the variable update scheme of typical Hoare logic . Moving forward to the following commands contained in the set of commands , we see \verb | { <var:u> = <var:D> } <var:x0> := <nat:3> { <var:u> = <var:D> \land <var:x0> = <nat:3> } | and \verb | { <var:u> = <var:D> \land <var:x0> = <nat:3> } <var:x1> := <nat:8> { <var:u> = <var:D> \land <var:x0> = <nat:3> \land <var:x1> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:u> = <var:D> }} <var:x0> := <nat:3> ; <var:x1> := <nat:8> ; <var:x1> := <var:x1> * <var:u> ; <var:x2> := <nat:5> ; <var:x2> := <var:x2> * <var:u> ; <var:x2> := <var:x2> * <var:u> ; <var:c> := <var:x2> ; <var:c> := <var:c> + <var:x1> ; <var:c> := <var:c> + <var:x0> {{ <var:c> = <nat:5> * <var:D> ^ <nat:2> + <nat:8> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:8> * <var:D> /\ <var:x2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:8> * <var:D> /\ <var:x2> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:8> * <var:D> /\ <var:x2> = <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:8> * <var:D> /\ <var:c> = <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:x0> = <nat:3> /\ <var:c> = <nat:5> * <var:D> ^ <nat:2> + <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:c> = <nat:5> * <var:D> ^ <nat:2> + <nat:8> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 