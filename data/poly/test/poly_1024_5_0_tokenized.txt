\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:t0> := <nat:4> ; <var:t1> := <nat:5> ; <var:t1> := <var:t1> * <var:r> ; <var:n> := <var:t1> ; <var:n> := <var:n> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Assume it to hold that $ <var:r> = <var:Z> $ ahead of running our program , it must be that $ <var:n> = <nat:5> * <var:Z> + <nat:4> $ once program has terminated . \end{theorem} \begin{proof} Using usual Hoare logic returns : \begin{eqnarray} \{ <var:r> = <var:Z> \} \\ <var:t0> := <nat:4> ; \\ \{ <var:r> = <var:Z> \land <var:t0> = <nat:4> \} \\ <var:t1> := <nat:5> ; \\ \{ <var:r> = <var:Z> \land <var:t0> = <nat:4> \land <var:t1> = <nat:5> \} \\ <var:t1> := <var:t1> * <var:r> ; \\ \{ <var:r> = <var:Z> \land <var:t0> = <nat:4> \land <var:t1> = <nat:5> \cdot <var:Z> \} \\ <var:n> := <var:t1> ; \\ \{ <var:r> = <var:Z> \land <var:t0> = <nat:4> \land <var:n> = <nat:5> \cdot <var:Z> \} \\ <var:n> := <var:n> + <var:t0> \\ \{ <var:r> = <var:Z> \land <var:n> = <nat:5> \cdot <var:Z> + <nat:4> \} \end{eqnarray} Considering the above , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t0> := <nat:4> ; <var:t1> := <nat:5> ; <var:t1> := <var:t1> * <var:r> ; <var:n> := <var:t1> ; <var:n> := <var:n> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:r> = <var:Z> }} <def:poly> {{ <var:n> = <nat:5> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:Z> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Z> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Z> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Z> /\ <var:t0> = <nat:4> /\ <var:n> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:Z> /\ <var:n> = <nat:5> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 