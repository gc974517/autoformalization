\begin{document} \begin{theorem} We define a code segment in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:C> ; <var:e2> := <var:e1> * <var:C> ; <var:e3> := <var:e2> * <var:C> ; <var:e4> := <var:e3> * <var:C> ; <var:e0> := <nat:9> ; <var:e1> := <var:e1> * <nat:4> ; <var:e2> := <var:e2> * <nat:8> ; <var:e3> := <var:e3> * <nat:6> ; <var:e4> := <var:e4> * <nat:9> ; <var:i> := <var:e4> <var:i> := <var:i> + <var:e3> <var:i> := <var:i> + <var:e2> <var:i> := <var:i> + <var:e1> <var:i> := <var:i> + <var:e0> \end{verbatim} Given --- for every natural numbers $ <var:R> $ --- that $ <var:C> = <var:R> $ before the evaluation of the series of instructions it follows that we see $ <var:i> = <nat:9> \cdot <var:R> ^ <nat:4> + <nat:6> \cdot <var:R> ^ <nat:3> + <nat:8> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:9> $ once list of instructions executes . \end{theorem} \begin{proof} Demonstrating correctness of the segment of code is done through typical Hoare techniques . Taking a look at the upcoming statement in our code segment , we see the command defining $ <var:C> $ as $ <var:e1>$ . This statement forwards the precondition $ \{ <var:C> = <var:R> \} $ into the condition $ \{ <var:C> = <var:R> \land <var:e1> = <var:R> \} $ . Stepping through , we have the binding line \verb | <var:e2> := <var:e1> * <var:C> ; | . This advances the precondition $ \{ <var:C> = <var:R> \land <var:e1> = <var:R> \} $ toward $ \{ <var:C> = <var:R> \land <var:e1> = <var:R> \land <var:e2> = <var:R> ^ <nat:2> \} $ . This is ensured by the assignment inference rule of usual Hoare reasoning . Stepping forward , we see the variable update line \verb | <var:e3> := <var:e2> * <var:C> ; | . This moves the condition $ \{ <var:C> = <var:R> \land <var:e1> = <var:R> \land <var:e2> = <var:R> ^ <nat:2> \} $ as the postcondition $ \{ <var:C> = <var:R> \land <var:e1> = <var:R> \land <var:e2> = <var:R> ^ <nat:2> \land <var:e3> = <var:R> ^ <nat:3> \} $ . Considering the next piece of code found in the list of instructions , we see the variable binding command assigning $ <var:e3> * <var:C> $ as $ <var:e4>$ . This transfers the precondition $ \{ <var:C> = <var:R> \land <var:e1> = <var:R> \land <var:e2> = <var:R> ^ <nat:2> \land <var:e3> = <var:R> ^ <nat:3> \} $ into $ \{ <var:C> = <var:R> \land <var:e1> = <var:R> \land <var:e2> = <var:R> ^ <nat:2> \land <var:e3> = <var:R> ^ <nat:3> \land <var:e4> = <var:R> ^ <nat:4> \} $ . Next , the variable assignmet statement binding $ <nat:9> $ into $ <var:e0>$ . This moves the precondition $ \{ <var:C> = <var:R> \land <var:e1> = <var:R> \land <var:e2> = <var:R> ^ <nat:2> \land <var:e3> = <var:R> ^ <nat:3> \land <var:e4> = <var:R> ^ <nat:4> \} $ as the postcondition $ \{ <var:C> = <var:R> \land <var:e1> = <var:R> \land <var:e2> = <var:R> ^ <nat:2> \land <var:e3> = <var:R> ^ <nat:3> \land <var:e4> = <var:R> ^ <nat:4> \land <var:e0> = <nat:9> \} $ . This is shown through the assignment law from typical Hoare reasoning . Looking at the proceeding step in the code , we have the variable binding statement \verb | <var:e1> := <var:e1> * <nat:4> ; | . This moves the precondition $ \{ <var:C> = <var:R> \land <var:e1> = <var:R> \land <var:e2> = <var:R> ^ <nat:2> \land <var:e3> = <var:R> ^ <nat:3> \land <var:e4> = <var:R> ^ <nat:4> \land <var:e0> = <nat:9> \} $ to the postcondition $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e2> = <var:R> ^ <nat:2> \land <var:e3> = <var:R> ^ <nat:3> \land <var:e4> = <var:R> ^ <nat:4> \land <var:e0> = <nat:9> \} $ . Taking a look at the next bit of code found in the set of commands , we see the variable binding code \verb | <var:e2> := <var:e2> * <nat:8> ; | . This advances the condition $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e2> = <var:R> ^ <nat:2> \land <var:e3> = <var:R> ^ <nat:3> \land <var:e4> = <var:R> ^ <nat:4> \land <var:e0> = <nat:9> \} $ to the condition $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e2> = <nat:8> * <var:R> ^ <nat:2> \land <var:e3> = <var:R> ^ <nat:3> \land <var:e4> = <var:R> ^ <nat:4> \land <var:e0> = <nat:9> \} $ . Moving forward , the environment update command assigning $ <var:e3> * <nat:6> $ to $ <var:e3>$ . This command transfers $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e2> = <nat:8> * <var:R> ^ <nat:2> \land <var:e3> = <var:R> ^ <nat:3> \land <var:e4> = <var:R> ^ <nat:4> \land <var:e0> = <nat:9> \} $ to the postcondition $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e2> = <nat:8> * <var:R> ^ <nat:2> \land <var:e3> = <nat:6> * <var:R> ^ <nat:3> \land <var:e4> = <var:R> ^ <nat:4> \land <var:e0> = <nat:9> \} $ . This is ensured with the assignment inference rule found in standard Hoare reasoning . Shifting focus toward the subsequent step contained in our series of commands , we have the variable assignmet code assigning $ <var:e4> * <nat:9> $ as $ <var:e4>$ . This command takes the condition $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e2> = <nat:8> * <var:R> ^ <nat:2> \land <var:e3> = <nat:6> * <var:R> ^ <nat:3> \land <var:e4> = <var:R> ^ <nat:4> \land <var:e0> = <nat:9> \} $ into the condition $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e2> = <nat:8> * <var:R> ^ <nat:2> \land <var:e3> = <nat:6> * <var:R> ^ <nat:3> \land <var:e4> = <nat:9> * <var:R> ^ <nat:4> \land <var:e0> = <nat:9> \} $ . Taking another step toward the upcoming piece of code in our segment of code , we have the variable binding statement binding $ <var:e4$ as $ <var:i>$ . This redefines $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e2> = <nat:8> * <var:R> ^ <nat:2> \land <var:e3> = <nat:6> * <var:R> ^ <nat:3> \land <var:e4> = <nat:9> * <var:R> ^ <nat:4> \land <var:e0> = <nat:9> \} $ toward the postcondition $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e2> = <nat:8> * <var:R> ^ <nat:2> \land <var:e3> = <nat:6> * <var:R> ^ <nat:3> \land <var:e0> = <nat:9> \land <var:i> = <nat:9> * <var:R> ^ <nat:4> \} $ . This is shown to be logically sound through the assignment scheme defined by standard Hoare reasoning . Looking at the proceeding command in the set of instructions , the environment update code giving $ <var:i> + <var:e3$ as $ <var:i>$ . This redefines the precondition $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e2> = <nat:8> * <var:R> ^ <nat:2> \land <var:e3> = <nat:6> * <var:R> ^ <nat:3> \land <var:e0> = <nat:9> \land <var:i> = <nat:9> * <var:R> ^ <nat:4> \} $ as $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e2> = <nat:8> * <var:R> ^ <nat:2> \land <var:e0> = <nat:9> \land <var:i> = <nat:9> * <var:R> ^ <nat:4> + <nat:6> * <var:R> ^ <nat:3> \} $ . This is known to be sound by the assignment law found in typical Hoare reasoning . Honing in on the proceeding piece of code in our segment of code , we have the variable assignmet command assigning $ <var:i> + <var:e2$ toward $ <var:i>$ . This advances the condition $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e2> = <nat:8> * <var:R> ^ <nat:2> \land <var:e0> = <nat:9> \land <var:i> = <nat:9> * <var:R> ^ <nat:4> + <nat:6> * <var:R> ^ <nat:3> \} $ to the postcondition $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e0> = <nat:9> \land <var:i> = <nat:9> * <var:R> ^ <nat:4> + <nat:6> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> \} $ . Looking at the subsequent statement seen in our list of instructions , we have the variable update statement binding $ <var:i> + <var:e1$ toward $ <var:i>$ . This advances $ \{ <var:C> = <var:R> \land <var:e1> = <nat:4> * <var:R> \land <var:e0> = <nat:9> \land <var:i> = <nat:9> * <var:R> ^ <nat:4> + <nat:6> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> \} $ into the condition $ \{ <var:C> = <var:R> \land <var:e0> = <nat:9> \land <var:i> = <nat:9> * <var:R> ^ <nat:4> + <nat:6> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:4> * <var:R> \} $ . Observing the following line of code seen in our series of commands , we have the variable assignmet statement \verb | <var:i> := <var:i> + <var:e0> | . This takes $ \{ <var:C> = <var:R> \land <var:e0> = <nat:9> \land <var:i> = <nat:9> * <var:R> ^ <nat:4> + <nat:6> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:4> * <var:R> \} $ to the condition $ \{ <var:C> = <var:R> \land <var:i> = <nat:9> * <var:R> ^ <nat:4> + <nat:6> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <var:e4> : string := " <var:e4> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:C> = <var:R> }} <var:e1> := <var:C> ; <var:e2> := <var:e1> * <var:C> ; <var:e3> := <var:e2> * <var:C> ; <var:e4> := <var:e3> * <var:C> ; <var:e0> := <nat:9> ; <var:e1> := <var:e1> * <nat:4> ; <var:e2> := <var:e2> * <nat:8> ; <var:e3> := <var:e3> * <nat:6> ; <var:e4> := <var:e4> * <nat:9> ; <var:i> := <var:e4> <var:i> := <var:i> + <var:e3> <var:i> := <var:i> + <var:e2> <var:i> := <var:i> + <var:e1> <var:i> := <var:i> + <var:e0> {{ <var:i> = <nat:9> * <var:R> ^ <nat:4> + <nat:6> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:e1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:e1> = <var:R> /\ <var:e2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:e1> = <var:R> /\ <var:e2> = <var:R> ^ <nat:2> /\ <var:e3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:e1> = <var:R> /\ <var:e2> = <var:R> ^ <nat:2> /\ <var:e3> = <var:R> ^ <nat:3> /\ <var:e4> = <var:R> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:e1> = <var:R> /\ <var:e2> = <var:R> ^ <nat:2> /\ <var:e3> = <var:R> ^ <nat:3> /\ <var:e4> = <var:R> ^ <nat:4> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:e1> = <nat:4> * <var:R> /\ <var:e2> = <var:R> ^ <nat:2> /\ <var:e3> = <var:R> ^ <nat:3> /\ <var:e4> = <var:R> ^ <nat:4> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:e1> = <nat:4> * <var:R> /\ <var:e2> = <nat:8> * <var:R> ^ <nat:2> /\ <var:e3> = <var:R> ^ <nat:3> /\ <var:e4> = <var:R> ^ <nat:4> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:e1> = <nat:4> * <var:R> /\ <var:e2> = <nat:8> * <var:R> ^ <nat:2> /\ <var:e3> = <nat:6> * <var:R> ^ <nat:3> /\ <var:e4> = <var:R> ^ <nat:4> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:e1> = <nat:4> * <var:R> /\ <var:e2> = <nat:8> * <var:R> ^ <nat:2> /\ <var:e3> = <nat:6> * <var:R> ^ <nat:3> /\ <var:e4> = <nat:9> * <var:R> ^ <nat:4> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:e1> = <nat:4> * <var:R> /\ <var:e2> = <nat:8> * <var:R> ^ <nat:2> /\ <var:e3> = <nat:6> * <var:R> ^ <nat:3> /\ <var:e0> = <nat:9> /\ <var:i> = <nat:9> * <var:R> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:e1> = <nat:4> * <var:R> /\ <var:e2> = <nat:8> * <var:R> ^ <nat:2> /\ <var:e0> = <nat:9> /\ <var:i> = <nat:9> * <var:R> ^ <nat:4> + <nat:6> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:e1> = <nat:4> * <var:R> /\ <var:e0> = <nat:9> /\ <var:i> = <nat:9> * <var:R> ^ <nat:4> + <nat:6> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:e0> = <nat:9> /\ <var:i> = <nat:9> * <var:R> ^ <nat:4> + <nat:6> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:i> = <nat:9> * <var:R> ^ <nat:4> + <nat:6> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 