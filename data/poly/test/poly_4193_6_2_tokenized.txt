\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H> := <nat:4> ; <var:H> := <nat:3> + <var:H> * <var:B> ; <var:H> := <nat:1> + <var:H> * <var:B> ; <var:H> := <nat:1> + <var:H> * <var:B> ; <var:H> := <nat:2> + <var:H> * <var:B> ; <var:H> := <nat:2> + <var:H> * <var:B> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> . Assuming --- given any $ <var:e> \in \mathbb{Z}^+ $ --- it to hold that $ <var:B> = <var:e> $ prior to the execution of the code it holds that $ <var:H> = <nat:4> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> $ once code exits . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands is accomplished with standard Hoare techniques . Taking another step toward the proceeding statement contained in our code , we see \verb | { <var:B> = <var:e> } <var:H> := <nat:4> { <var:B> = <var:e> \land <var:H> = <nat:4> } | . Advancing to the subsequent statement found in our set of commands , we see \verb | { <var:B> = <var:e> } <var:H> := <nat:4> { <var:B> = <var:e> \land <var:H> = <nat:4> } | . Considering the subsequent commands found in our list of commands , \verb | { <var:B> = <var:e> } <var:H> := <nat:4> { <var:B> = <var:e> \land <var:H> = <nat:4> } | and \verb | { <var:B> = <var:e> \land <var:H> = <nat:4> } <var:H> := <nat:3> + <var:H> * <var:B> { <var:B> = <var:e> \land <var:H> = <nat:4> * <var:e> + <nat:3> } | . Stepping forward , we see \verb | { <var:B> = <var:e> } <var:H> := <nat:4> { <var:B> = <var:e> \land <var:H> = <nat:4> } | and \verb | { <var:B> = <var:e> \land <var:H> = <nat:4> } <var:H> := <nat:3> + <var:H> * <var:B> { <var:B> = <var:e> \land <var:H> = <nat:4> * <var:e> + <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:4> ; <var:H> := <nat:3> + <var:H> * <var:B> ; <var:H> := <nat:1> + <var:H> * <var:B> ; <var:H> := <nat:1> + <var:H> * <var:B> ; <var:H> := <nat:2> + <var:H> * <var:B> ; <var:H> := <nat:2> + <var:H> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:B> = <var:e> }} <def:poly> {{ <var:H> = <nat:4> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:H> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:H> = <nat:4> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:H> = <nat:4> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:H> = <nat:4> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:H> = <nat:4> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:e> /\ <var:H> = <nat:4> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 