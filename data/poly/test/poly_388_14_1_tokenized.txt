\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:s1> := <var:E> ; <var:s2> := <var:s1> * <var:E> ; <var:s3> := <var:s2> * <var:E> ; <var:s4> := <var:s3> * <var:E> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:6> ; <var:s2> := <var:s2> * <nat:2> ; <var:s3> := <var:s3> * <nat:6> ; <var:s4> := <var:s4> * <nat:7> ; <var:l> := <var:s4> <var:l> := <var:l> + <var:s3> <var:l> := <var:l> + <var:s2> <var:l> := <var:l> + <var:s1> <var:l> := <var:l> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> in \emph{Imp} . Allowing --- given all $ <var:a> $ --- that we have $ <var:E> = <var:a> $ before evaluating our series of commands it must be that $ <var:l> = <nat:7> \times <var:a> ^ <nat:4> + <nat:6> \times <var:a> ^ <nat:3> + <nat:2> \times <var:a> ^ <nat:2> + <nat:6> \times <var:a> + <nat:3> $ after program has executed . \end{theorem} \begin{proof} The way to prove correctness for the code is given through Hoare reasoning . Moving on to the next step , \verb | { <var:E> = <var:a> } <var:s1> := <var:E> { <var:E> = <var:a> \land <var:s1> = <var:a> } | , \verb | { <var:E> = <var:a> \land <var:s1> = <var:a> } <var:s2> := <var:s1> * <var:E> { <var:E> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> } | , \verb | { <var:E> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> } <var:s3> := <var:s2> * <var:E> { <var:E> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> } | , \verb | { <var:E> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> } <var:s4> := <var:s3> * <var:E> { <var:E> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s4> = <var:a> ^ <nat:4> } | , \verb | { <var:E> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s4> = <var:a> ^ <nat:4> } <var:s0> := <nat:3> { <var:E> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s4> = <var:a> ^ <nat:4> \land <var:s0> = <nat:3> } | , \verb | { <var:E> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s4> = <var:a> ^ <nat:4> \land <var:s0> = <nat:3> } <var:s1> := <var:s1> * <nat:6> { <var:E> = <var:a> \land <var:s1> = <nat:6> \cdot <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s4> = <var:a> ^ <nat:4> \land <var:s0> = <nat:3> } | , \verb | { <var:E> = <var:a> \land <var:s1> = <nat:6> \cdot <var:a> \land <var:s2> = <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s4> = <var:a> ^ <nat:4> \land <var:s0> = <nat:3> } <var:s2> := <var:s2> * <nat:2> { <var:E> = <var:a> \land <var:s1> = <nat:6> \cdot <var:a> \land <var:s2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s4> = <var:a> ^ <nat:4> \land <var:s0> = <nat:3> } | , \verb | { <var:E> = <var:a> \land <var:s1> = <nat:6> \cdot <var:a> \land <var:s2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:s3> = <var:a> ^ <nat:3> \land <var:s4> = <var:a> ^ <nat:4> \land <var:s0> = <nat:3> } <var:s3> := <var:s3> * <nat:6> { <var:E> = <var:a> \land <var:s1> = <nat:6> \cdot <var:a> \land <var:s2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:s3> = <nat:6> \cdot <var:a> ^ <nat:3> \land <var:s4> = <var:a> ^ <nat:4> \land <var:s0> = <nat:3> } | , \verb | { <var:E> = <var:a> \land <var:s1> = <nat:6> \cdot <var:a> \land <var:s2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:s3> = <nat:6> \cdot <var:a> ^ <nat:3> \land <var:s4> = <var:a> ^ <nat:4> \land <var:s0> = <nat:3> } <var:s4> := <var:s4> * <nat:7> { <var:E> = <var:a> \land <var:s1> = <nat:6> \cdot <var:a> \land <var:s2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:s3> = <nat:6> \cdot <var:a> ^ <nat:3> \land <var:s4> = <nat:7> \cdot <var:a> ^ <nat:4> \land <var:s0> = <nat:3> } | , \verb | { <var:E> = <var:a> \land <var:s1> = <nat:6> \cdot <var:a> \land <var:s2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:s3> = <nat:6> \cdot <var:a> ^ <nat:3> \land <var:s4> = <nat:7> \cdot <var:a> ^ <nat:4> \land <var:s0> = <nat:3> } <var:l> := <var:s4{ <var:E> = <var:a> \land <var:s1> = <nat:6> \cdot <var:a> \land <var:s2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:s3> = <nat:6> \cdot <var:a> ^ <nat:3> \land <var:s0> = <nat:3> \land <var:l> = <nat:7> \cdot <var:a> ^ <nat:4> } | and \verb | { <var:E> = <var:a> \land <var:s1> = <nat:6> \cdot <var:a> \land <var:s2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:s3> = <nat:6> \cdot <var:a> ^ <nat:3> \land <var:s0> = <nat:3> \land <var:l> = <nat:7> \cdot <var:a> ^ <nat:4> } <var:l> := <var:l> + <var:s3{ <var:E> = <var:a> \land <var:s1> = <nat:6> \cdot <var:a> \land <var:s2> = <nat:2> \cdot <var:a> ^ <nat:2> \land <var:s0> = <nat:3> \land <var:l> = <nat:7> \cdot <var:a> ^ <nat:4> + <nat:6> \cdot <var:a> ^ <nat:3> } | . This is deduced by the variable assignmet rule of usual Hoare reasoning . Moving on to the upcoming line found in the set of commands , we have \verb | { <var:E> = <var:a> } <var:s1> := <var:E> { <var:E> = <var:a> \land <var:s1> = <var:a> } | . This is given by the environment update rule defined in typical Hoare logic . Taking a look at the subsequent pieces of code found in the list of commands , \verb | { <var:E> = <var:a> } <var:s1> := <var:E> { <var:E> = <var:a> \land <var:s1> = <var:a> } | and \verb | { <var:E> = <var:a> \land <var:s1> = <var:a> } <var:s2> := <var:s1> * <var:E> { <var:E> = <var:a> \land <var:s1> = <var:a> \land <var:s2> = <var:a> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <var:s4> : string := " <var:s4> " . Definition <def:poly> := <var:s1> := <var:E> ; <var:s2> := <var:s1> * <var:E> ; <var:s3> := <var:s2> * <var:E> ; <var:s4> := <var:s3> * <var:E> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:6> ; <var:s2> := <var:s2> * <nat:2> ; <var:s3> := <var:s3> * <nat:6> ; <var:s4> := <var:s4> * <nat:7> ; <var:l> := <var:s4> <var:l> := <var:l> + <var:s3> <var:l> := <var:l> + <var:s2> <var:l> := <var:l> + <var:s1> <var:l> := <var:l> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:E> = <var:a> }} <def:poly> {{ <var:l> = <nat:7> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:6> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:s1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:s1> = <var:a> /\ <var:s2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:s1> = <var:a> /\ <var:s2> = <var:a> ^ <nat:2> /\ <var:s3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:s1> = <var:a> /\ <var:s2> = <var:a> ^ <nat:2> /\ <var:s3> = <var:a> ^ <nat:3> /\ <var:s4> = <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:s1> = <var:a> /\ <var:s2> = <var:a> ^ <nat:2> /\ <var:s3> = <var:a> ^ <nat:3> /\ <var:s4> = <var:a> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:s1> = <nat:6> * <var:a> /\ <var:s2> = <var:a> ^ <nat:2> /\ <var:s3> = <var:a> ^ <nat:3> /\ <var:s4> = <var:a> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:s1> = <nat:6> * <var:a> /\ <var:s2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:s3> = <var:a> ^ <nat:3> /\ <var:s4> = <var:a> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:s1> = <nat:6> * <var:a> /\ <var:s2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:s3> = <nat:6> * <var:a> ^ <nat:3> /\ <var:s4> = <var:a> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:s1> = <nat:6> * <var:a> /\ <var:s2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:s3> = <nat:6> * <var:a> ^ <nat:3> /\ <var:s4> = <nat:7> * <var:a> ^ <nat:4> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:s1> = <nat:6> * <var:a> /\ <var:s2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:s3> = <nat:6> * <var:a> ^ <nat:3> /\ <var:s0> = <nat:3> /\ <var:l> = <nat:7> * <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:s1> = <nat:6> * <var:a> /\ <var:s2> = <nat:2> * <var:a> ^ <nat:2> /\ <var:s0> = <nat:3> /\ <var:l> = <nat:7> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:s1> = <nat:6> * <var:a> /\ <var:s0> = <nat:3> /\ <var:l> = <nat:7> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:s0> = <nat:3> /\ <var:l> = <nat:7> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:6> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:l> = <nat:7> * <var:a> ^ <nat:4> + <nat:6> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:6> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 