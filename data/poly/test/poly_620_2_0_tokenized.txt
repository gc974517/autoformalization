\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:3> ; <var:k> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allowing , given natural numbers $ <var:w> $ , that we have $ <var:O> = <var:w> $ prior to running this list of commands it must be that we see $ <var:k> = <nat:3> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques yields : \begin{eqnarray} \{ <var:O> = <var:w> \} \\ <var:t0> := <nat:3> ; \\ \{ <var:O> = <var:w> \land <var:t0> = <nat:3> \} \end{eqnarray} Allowing evaluating the series of commands returns : \begin{eqnarray} <var:k> := <var:t0> \\ \{ <var:O> = <var:w> \land <var:k> = <nat:3> \} \end{eqnarray} Given the preceding argument , this set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:3> ; <var:k> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:O> = <var:w> }} <def:poly> {{ <var:k> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:w> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:w> /\ <var:k> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 