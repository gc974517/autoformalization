\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:7> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:z> ; <var:W> := <var:I1> ; <var:W> := <var:W> + <var:I0> \end{verbatim} Given that $ <var:z> = <var:k> $ ( given some positive numbers $ <var:k> $ ) ahead of evaluating the program then we have $ <var:W> = <nat:8> \times <var:k> + <nat:7> $ when list of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:k> \} \\ <var:I0> := <nat:7> ; \\ \{ <var:z> = <var:k> \land <var:I0> = <nat:7> \} \\ <var:I1> := <nat:8> ; \\ \{ <var:z> = <var:k> \land <var:I0> = <nat:7> \land <var:I1> = <nat:8> \} \\ <var:I1> := <var:I1> * <var:z> ; \\ \{ <var:z> = <var:k> \land <var:I0> = <nat:7> \land <var:I1> = <nat:8> \cdot <var:k> \} \\ <var:W> := <var:I1> ; \\ \{ <var:z> = <var:k> \land <var:I0> = <nat:7> \land <var:W> = <nat:8> \cdot <var:k> \} \\ <var:W> := <var:W> + <var:I0> \\ \{ <var:z> = <var:k> \land <var:W> = <nat:8> \cdot <var:k> + <nat:7> \} \end{eqnarray} Utilizing standard Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:z> = <var:k> }} <var:I0> := <nat:7> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:z> ; <var:W> := <var:I1> ; <var:W> := <var:W> + <var:I0> {{ <var:W> = <nat:8> * <var:k> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:I0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:I0> = <nat:7> /\ <var:I1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:I0> = <nat:7> /\ <var:I1> = <nat:8> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:I0> = <nat:7> /\ <var:W> = <nat:8> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:W> = <nat:8> * <var:k> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 