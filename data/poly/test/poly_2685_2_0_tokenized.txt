\begin{document} \begin{theorem} We define a list of commands as follows \begin{verbatim} <var:r0> := <nat:3> ; <var:c> := <var:r0> \end{verbatim} Assuming $ <var:q> = <var:B> $ before the evaluation of our program , it holds that we have $ <var:c> = <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands can be given using standard Hoare techniques . Shifting focus toward the subsequent piece of code contained in our set of commands , we have the command letting $ <nat:3> $ to $ <var:r0>$ . This statement redefines the condition $ \{ <var:q> = <var:B> \} $ to $ \{ <var:q> = <var:B> \land <var:r0> = <nat:3> \} $ . This is deduced using the assignment inference rule defined in Hoare reasoning . Considering the subsequent step in our set of commands , the environment update statement binding $ <var:r0$ to $ <var:c>$ . This statement forwards the precondition $ \{ <var:q> = <var:B> \land <var:r0> = <nat:3> \} $ toward $ \{ <var:q> = <var:B> \land <var:c> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:q> = <var:B> }} <var:r0> := <nat:3> ; <var:c> := <var:r0> {{ <var:c> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:c> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 