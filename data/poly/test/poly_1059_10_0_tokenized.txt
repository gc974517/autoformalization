\begin{document} \begin{theorem} Define a series of instructions : \begin{verbatim} <var:G0> := <nat:1> ; <var:G1> := <nat:7> ; <var:G1> := <var:G1> * <var:q> ; <var:G3> := <nat:6> ; <var:G3> := <var:G3> * <var:q> ; <var:G3> := <var:G3> * <var:q> ; <var:G3> := <var:G3> * <var:q> ; <var:T> := <var:G3> ; <var:T> := <var:T> + <var:G1> ; <var:T> := <var:T> + <var:G0> \end{verbatim} Given for any positive integers $ <var:U> $ that $ <var:q> = <var:U> $ prior to executing our code it follows that we see $ <var:T> = <nat:6> \cdot <var:U> ^ <nat:3> + <nat:7> \cdot <var:U> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions can be given through usual Hoare techniques . Paying attention to the following line of code found in our program , the variable update statement \verb | <var:G0> := <nat:1> ; | . This moves the precondition $ \{ <var:q> = <var:U> \} $ toward the condition $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \} $ . Taking a look at the upcoming command in our code , the binding command \verb | <var:G1> := <nat:7> ; | . This command takes the precondition $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \} $ toward the condition $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> \} $ . This is guaranteed by the assignment law defined by standard Hoare techniques . Next , we have the line letting $ <var:G1> * <var:q> $ as $ <var:G1>$ . This advances $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> \} $ into $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> * <var:U> \} $ . This is shown using the assignment inference rule in usual Hoare logic . Moving forward to the following line of code found in our list of commands , we see the binding command binding $ <nat:6> $ toward $ <var:G3>$ . This forwards the precondition $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> * <var:U> \} $ as $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> * <var:U> \land <var:G3> = <nat:6> \} $ . This is given with the assignment scheme in typical Hoare reasoning . Moving on , the assignment line binding $ <var:G3> * <var:q> $ toward $ <var:G3>$ . This command takes $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> * <var:U> \land <var:G3> = <nat:6> \} $ to $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> * <var:U> \land <var:G3> = <nat:6> * <var:U> \} $ . This is deduced by the assignment law given in Hoare reasoning . Immediately after , we have the variable binding statement \verb | <var:G3> := <var:G3> * <var:q> ; | . This command moves the condition $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> * <var:U> \land <var:G3> = <nat:6> * <var:U> \} $ toward $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> * <var:U> \land <var:G3> = <nat:6> * <var:U> ^ <nat:2> \} $ . This is deduced by the assignment scheme found in standard Hoare reasoning . Advancing to the next step found in our list of commands , we have the variable assignmet command yielding $ <var:G3> * <var:q> $ to $ <var:G3>$ . This forwards the condition $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> * <var:U> \land <var:G3> = <nat:6> * <var:U> ^ <nat:2> \} $ toward the condition $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> * <var:U> \land <var:G3> = <nat:6> * <var:U> ^ <nat:3> \} $ . Shifting focus toward the subsequent bit of code found in our series of instructions , we have the variable binding code giving $ <var:G3> $ to $ <var:T>$ . This code forwards $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> * <var:U> \land <var:G3> = <nat:6> * <var:U> ^ <nat:3> \} $ into the postcondition $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> * <var:U> \land <var:T> = <nat:6> * <var:U> ^ <nat:3> \} $ . This is sound with the assignment scheme defined by standard Hoare techniques . Immediately after , the binding code \verb | <var:T> := <var:T> + <var:G1> ; | . This code moves $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:G1> = <nat:7> * <var:U> \land <var:T> = <nat:6> * <var:U> ^ <nat:3> \} $ as the postcondition $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:T> = <nat:6> * <var:U> ^ <nat:3> + <nat:7> * <var:U> \} $ . Focusing on the subsequent piece of code seen in the series of instructions , the line defining $ <var:T> + <var:G0$ toward $ <var:T>$ . This line forwards $ \{ <var:q> = <var:U> \land <var:G0> = <nat:1> \land <var:T> = <nat:6> * <var:U> ^ <nat:3> + <nat:7> * <var:U> \} $ as the condition $ \{ <var:q> = <var:U> \land <var:T> = <nat:6> * <var:U> ^ <nat:3> + <nat:7> * <var:U> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:q> = <var:U> }} <var:G0> := <nat:1> ; <var:G1> := <nat:7> ; <var:G1> := <var:G1> * <var:q> ; <var:G3> := <nat:6> ; <var:G3> := <var:G3> * <var:q> ; <var:G3> := <var:G3> * <var:q> ; <var:G3> := <var:G3> * <var:q> ; <var:T> := <var:G3> ; <var:T> := <var:T> + <var:G1> ; <var:T> := <var:T> + <var:G0> {{ <var:T> = <nat:6> * <var:U> ^ <nat:3> + <nat:7> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:7> * <var:U> /\ <var:G3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:7> * <var:U> /\ <var:G3> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:7> * <var:U> /\ <var:G3> = <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:7> * <var:U> /\ <var:G3> = <nat:6> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:G0> = <nat:1> /\ <var:G1> = <nat:7> * <var:U> /\ <var:T> = <nat:6> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:G0> = <nat:1> /\ <var:T> = <nat:6> * <var:U> ^ <nat:3> + <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:U> /\ <var:T> = <nat:6> * <var:U> ^ <nat:3> + <nat:7> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 