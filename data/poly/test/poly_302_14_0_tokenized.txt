\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:1> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:c> ; <var:Z2> := <nat:7> ; <var:Z2> := <var:Z2> * <var:c> ; <var:Z2> := <var:Z2> * <var:c> ; <var:Z3> := <nat:5> ; <var:Z3> := <var:Z3> * <var:c> ; <var:Z3> := <var:Z3> * <var:c> ; <var:Z3> := <var:Z3> * <var:c> ; <var:s> := <var:Z3> ; <var:s> := <var:s> + <var:Z2> ; <var:s> := <var:s> + <var:Z1> ; <var:s> := <var:s> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> in \emph{Imp} . Given ( with some positive integer coefficients $ <var:r> $ ) that we have $ <var:c> = <var:r> $ before interpreting our list of instructions it follows that we have $ <var:s> = <nat:5> \cdot <var:r> ^ <nat:3> + <nat:7> \cdot <var:r> ^ <nat:2> + <nat:3> \cdot <var:r> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for the segment of code can be seen using Hoare techniques . Moving on , we see \[ \begin{tabular} {rcl} \{ <var:c> = <var:r> \} & <var:Z0> := <nat:1> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \} \\ \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \} & <var:Z1> := <nat:3> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \} \\ \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \} & <var:Z1> := <var:Z1> * <var:c> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \times <var:r> \} \\ \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \times <var:r> \} & <var:Z2> := <nat:7> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \times <var:r> \land <var:Z2> = <nat:7> \} \end{tabular} Shifting focus toward the subsequent steps seen in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:c> = <var:r> \} & <var:Z0> := <nat:1> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \} \\ \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \} & <var:Z1> := <nat:3> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \} \\ \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \} & <var:Z1> := <var:Z1> * <var:c> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \times <var:r> \} \\ \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \times <var:r> \} & <var:Z2> := <nat:7> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \times <var:r> \land <var:Z2> = <nat:7> \} \\ \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \times <var:r> \land <var:Z2> = <nat:7> \} & <var:Z2> := <var:Z2> * <var:c> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \times <var:r> \land <var:Z2> = <nat:7> \times <var:r> \} \end{tabular} This is ensured using the binding inference rule from standard Hoare techniques . Now , we have \[ \begin{tabular} {rcl} \{ <var:c> = <var:r> \} & <var:Z0> := <nat:1> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \} \\ \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \} & <var:Z1> := <nat:3> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \} \\ \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \} & <var:Z1> := <var:Z1> * <var:c> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \times <var:r> \} \\ \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \times <var:r> \} & <var:Z2> := <nat:7> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \times <var:r> \land <var:Z2> = <nat:7> \} \\ \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \times <var:r> \land <var:Z2> = <nat:7> \} & <var:Z2> := <var:Z2> * <var:c> & \{ <var:c> = <var:r> \land <var:Z0> = <nat:1> \land <var:Z1> = <nat:3> \times <var:r> \land <var:Z2> = <nat:7> \times <var:r> \} \end{tabular} This is shown by the environment update inference rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z0> := <nat:1> ; <var:Z1> := <nat:3> ; <var:Z1> := <var:Z1> * <var:c> ; <var:Z2> := <nat:7> ; <var:Z2> := <var:Z2> * <var:c> ; <var:Z2> := <var:Z2> * <var:c> ; <var:Z3> := <nat:5> ; <var:Z3> := <var:Z3> * <var:c> ; <var:Z3> := <var:Z3> * <var:c> ; <var:Z3> := <var:Z3> * <var:c> ; <var:s> := <var:Z3> ; <var:s> := <var:s> + <var:Z2> ; <var:s> := <var:s> + <var:Z1> ; <var:s> := <var:s> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:c> = <var:r> }} <def:poly> {{ <var:s> = <nat:5> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:Z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:Z2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:Z2> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:Z2> = <nat:7> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:Z2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:Z3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:Z2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:Z3> = <nat:5> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:Z2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:Z3> = <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:Z2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:Z3> = <nat:5> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:Z2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:s> = <nat:5> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:Z0> = <nat:1> /\ <var:Z1> = <nat:3> * <var:r> /\ <var:s> = <nat:5> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:Z0> = <nat:1> /\ <var:s> = <nat:5> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:r> /\ <var:s> = <nat:5> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 