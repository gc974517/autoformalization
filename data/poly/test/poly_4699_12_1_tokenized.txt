\begin{document} \begin{theorem} We define a code segment such that \begin{verbatim} <var:p1> := <var:g> ; <var:p2> := <var:p1> * <var:g> ; <var:p3> := <var:p2> * <var:g> ; <var:p4> := <var:p3> * <var:g> ; <var:p0> := <nat:5> ; <var:p2> := <var:p2> * <nat:4> ; <var:p3> := <var:p3> * <nat:3> ; <var:p4> := <var:p4> * <nat:4> ; <var:z> := <var:p4> <var:z> := <var:z> + <var:p3> <var:z> := <var:z> + <var:p2> <var:z> := <var:z> + <var:p0> \end{verbatim} Given it to hold that $ <var:g> = <var:m> $ prior to the execution of our program then we see $ <var:z> = <nat:4> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:5> $ after series of commands exits . \end{theorem} \begin{proof} The application of standard Hoare techniques gives us : \begin{eqnarray} \{ <var:g> = <var:m> \} \\ <var:p1> := <var:g> ; \\ \{ <var:g> = <var:m> \land <var:p1> = <var:m> \} \\ <var:p2> := <var:p1> * <var:g> ; \\ \{ <var:g> = <var:m> \land <var:p1> = <var:m> \land <var:p2> = <var:m> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:g> ; \\ \{ <var:g> = <var:m> \land <var:p1> = <var:m> \land <var:p2> = <var:m> ^ <nat:2> \land <var:p3> = <var:m> ^ <nat:3> \} \\ <var:p4> := <var:p3> * <var:g> ; \\ \{ <var:g> = <var:m> \land <var:p1> = <var:m> \land <var:p2> = <var:m> ^ <nat:2> \land <var:p3> = <var:m> ^ <nat:3> \land <var:p4> = <var:m> ^ <nat:4> \} \\ <var:p0> := <nat:5> ; \\ \{ <var:g> = <var:m> \land <var:p1> = <var:m> \land <var:p2> = <var:m> ^ <nat:2> \land <var:p3> = <var:m> ^ <nat:3> \land <var:p4> = <var:m> ^ <nat:4> \land <var:p0> = <nat:5> \} \\ <var:p2> := <var:p2> * <nat:4> ; \\ \{ <var:g> = <var:m> \land <var:p1> = <var:m> \land <var:p2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:p3> = <var:m> ^ <nat:3> \land <var:p4> = <var:m> ^ <nat:4> \land <var:p0> = <nat:5> \} \\ <var:p3> := <var:p3> * <nat:3> ; \\ \{ <var:g> = <var:m> \land <var:p1> = <var:m> \land <var:p2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:m> ^ <nat:3> \land <var:p4> = <var:m> ^ <nat:4> \land <var:p0> = <nat:5> \} \\ <var:p4> := <var:p4> * <nat:4> ; \\ \{ <var:g> = <var:m> \land <var:p1> = <var:m> \land <var:p2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:m> ^ <nat:3> \land <var:p4> = <nat:4> \cdot <var:m> ^ <nat:4> \land <var:p0> = <nat:5> \} \\ <var:z> := <var:p4> \\ \{ <var:g> = <var:m> \land <var:p1> = <var:m> \land <var:p2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:p3> = <nat:3> \cdot <var:m> ^ <nat:3> \land <var:p0> = <nat:5> \land <var:z> = <nat:4> \cdot <var:m> ^ <nat:4> \} \\ <var:z> := <var:z> + <var:p3> \\ \{ <var:g> = <var:m> \land <var:p1> = <var:m> \land <var:p2> = <nat:4> \cdot <var:m> ^ <nat:2> \land <var:p0> = <nat:5> \land <var:z> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:p2> \\ \{ <var:g> = <var:m> \land <var:p1> = <var:m> \land <var:p0> = <nat:5> \land <var:z> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:p0> \\ \{ <var:g> = <var:m> \land <var:z> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:5> \} \end{eqnarray} As a consequence , the code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:g> = <var:m> }} <var:p1> := <var:g> ; <var:p2> := <var:p1> * <var:g> ; <var:p3> := <var:p2> * <var:g> ; <var:p4> := <var:p3> * <var:g> ; <var:p0> := <nat:5> ; <var:p2> := <var:p2> * <nat:4> ; <var:p3> := <var:p3> * <nat:3> ; <var:p4> := <var:p4> * <nat:4> ; <var:z> := <var:p4> <var:z> := <var:z> + <var:p3> <var:z> := <var:z> + <var:p2> <var:z> := <var:z> + <var:p0> {{ <var:z> = <nat:4> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p1> = <var:m> /\ <var:p2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p1> = <var:m> /\ <var:p2> = <var:m> ^ <nat:2> /\ <var:p3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p1> = <var:m> /\ <var:p2> = <var:m> ^ <nat:2> /\ <var:p3> = <var:m> ^ <nat:3> /\ <var:p4> = <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p1> = <var:m> /\ <var:p2> = <var:m> ^ <nat:2> /\ <var:p3> = <var:m> ^ <nat:3> /\ <var:p4> = <var:m> ^ <nat:4> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p1> = <var:m> /\ <var:p2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:p3> = <var:m> ^ <nat:3> /\ <var:p4> = <var:m> ^ <nat:4> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p1> = <var:m> /\ <var:p2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:p3> = <nat:3> * <var:m> ^ <nat:3> /\ <var:p4> = <var:m> ^ <nat:4> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p1> = <var:m> /\ <var:p2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:p3> = <nat:3> * <var:m> ^ <nat:3> /\ <var:p4> = <nat:4> * <var:m> ^ <nat:4> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p1> = <var:m> /\ <var:p2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:p3> = <nat:3> * <var:m> ^ <nat:3> /\ <var:p0> = <nat:5> /\ <var:z> = <nat:4> * <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p1> = <var:m> /\ <var:p2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:p0> = <nat:5> /\ <var:z> = <nat:4> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:p1> = <var:m> /\ <var:p0> = <nat:5> /\ <var:z> = <nat:4> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:m> /\ <var:z> = <nat:4> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 