\begin{document} \begin{theorem} Take the following series of commands : \begin{verbatim} <var:w> := <nat:3> ; <var:w> := <nat:1> + <var:w> * <var:e> \end{verbatim} Allow , taking whole numbers $ <var:f> $ , that we have $ <var:e> = <var:f> $ prior to the execution of this code it holds that we have $ <var:w> = <nat:3> * <var:f> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of commands can be seen with standard Hoare reasoning . Moving on to the subsequent line of code in the series of commands , \begin{eqnarray} \{ <var:e> = <var:f> \} \, <var:w> := <nat:3> \, \{ <var:e> = <var:f> \land <var:w> = <nat:3> \} \end{eqnarray} This is ensured by the variable assignmet law defined in Hoare reasoning . Considering the following line contained in the set of commands , we see \begin{eqnarray} \{ <var:e> = <var:f> \} \, <var:w> := <nat:3> \, \{ <var:e> = <var:f> \land <var:w> = <nat:3> \} \end{eqnarray} This is guaranteed using the inference rule given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:e> = <var:f> }} <var:w> := <nat:3> ; <var:w> := <nat:1> + <var:w> * <var:e> {{ <var:w> = <nat:3> * <var:f> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:w> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:f> /\ <var:w> = <nat:3> * <var:f> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 