\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S> := <nat:2> ; <var:S> := <var:S> * <var:M> ; <var:S> := <nat:3> + <var:S> * <var:M> ; <var:S> := <var:S> * <var:M> ; <var:S> := <var:S> * <var:M> ; <var:S> := <nat:4> + <var:S> * <var:M> ; <var:S> := <nat:1> + <var:S> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Allowing it to be that $ <var:M> = <var:H> $ before interpreting the series of commands then we see $ <var:S> = <nat:2> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:H> \} \\ <var:S> := <nat:2> ; \\ \{ <var:M> = <var:H> \land <var:S> = <nat:2> \} \\ <var:S> := <var:S> * <var:M> ; \\ \{ <var:M> = <var:H> \land <var:S> = <nat:2> * <var:H> + \} \\ <var:S> := <nat:3> + <var:S> * <var:M> ; \\ \{ <var:M> = <var:H> \land <var:S> = <nat:2> * <var:H> ^ <nat:2> + <nat:3> \} \\ <var:S> := <var:S> * <var:M> ; \\ \{ <var:M> = <var:H> \land <var:S> = <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + \} \end{eqnarray} Furthering running this series of commands gives us : \begin{eqnarray} <var:S> := <var:S> * <var:M> ; \\ \{ <var:M> = <var:H> \land <var:S> = <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + \} \\ <var:S> := <nat:4> + <var:S> * <var:M> ; \\ \{ <var:M> = <var:H> \land <var:S> = <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> \} \\ <var:S> := <nat:1> + <var:S> * <var:M> \\ \{ <var:M> = <var:H> \land <var:S> = <nat:2> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> + <nat:1> \} \end{eqnarray} The application of typical Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:2> ; <var:S> := <var:S> * <var:M> ; <var:S> := <nat:3> + <var:S> * <var:M> ; <var:S> := <var:S> * <var:M> ; <var:S> := <var:S> * <var:M> ; <var:S> := <nat:4> + <var:S> * <var:M> ; <var:S> := <nat:1> + <var:S> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:M> = <var:H> }} <def:poly> {{ <var:S> = <nat:2> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:S> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:S> = <nat:2> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:S> = <nat:2> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:S> = <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:S> = <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:S> = <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:S> = <nat:2> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 