\begin{document} \begin{theorem} Take the following list of commands : \begin{verbatim} <var:X0> := <nat:2> ; <var:X1> := <nat:4> ; <var:X1> := <var:X1> * <var:J> ; <var:R> := <var:X1> ; <var:R> := <var:R> + <var:X0> \end{verbatim} Assume that we have $ <var:J> = <var:W> $ prior to evaluating this segment of code it follows that we have $ <var:R> = <nat:4> \cdot <var:W> + <nat:2> $ when code segment is done . \end{theorem} \begin{proof} Demonstrating correctness of our list of instructions can be accomplished by Hoare logic . Taking another step toward the subsequent line in our set of instructions , the assignment command \verb | <var:X0> := <nat:2> ; | . This takes the condition $ \{ <var:J> = <var:W> \} $ to $ \{ <var:J> = <var:W> \land <var:X0> = <nat:2> \} $ . This is given using the assignment scheme given in standard Hoare techniques . Moving on to the next step , we see the environment update command \verb | <var:X1> := <nat:4> ; | . This takes the precondition $ \{ <var:J> = <var:W> \land <var:X0> = <nat:2> \} $ toward $ \{ <var:J> = <var:W> \land <var:X0> = <nat:2> \land <var:X1> = <nat:4> \} $ . This is ensured by the assignment scheme given by usual Hoare reasoning . Keeping momentum , we have the variable update statement defining $ <var:X1> * <var:J> $ to $ <var:X1>$ . This takes the precondition $ \{ <var:J> = <var:W> \land <var:X0> = <nat:2> \land <var:X1> = <nat:4> \} $ into $ \{ <var:J> = <var:W> \land <var:X0> = <nat:2> \land <var:X1> = <nat:4> \cdot <var:W> \} $ . This is guaranteed with the assignment inference rule defined in Hoare logic . Moving on to the next step , the variable update command letting $ <var:X1> $ to $ <var:R>$ . This takes the precondition $ \{ <var:J> = <var:W> \land <var:X0> = <nat:2> \land <var:X1> = <nat:4> \cdot <var:W> \} $ into the postcondition $ \{ <var:J> = <var:W> \land <var:X0> = <nat:2> \land <var:R> = <nat:4> \cdot <var:W> \} $ . Observing the proceeding bit of code contained in the series of commands , we have the variable binding line \verb | <var:R> := <var:R> + <var:X0> | . This transfers $ \{ <var:J> = <var:W> \land <var:X0> = <nat:2> \land <var:R> = <nat:4> \cdot <var:W> \} $ toward $ \{ <var:J> = <var:W> \land <var:R> = <nat:4> \cdot <var:W> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:J> = <var:W> }} <var:X0> := <nat:2> ; <var:X1> := <nat:4> ; <var:X1> := <var:X1> * <var:J> ; <var:R> := <var:X1> ; <var:R> := <var:R> + <var:X0> {{ <var:R> = <nat:4> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:X0> = <nat:2> /\ <var:X1> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:X0> = <nat:2> /\ <var:R> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:R> = <nat:4> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 