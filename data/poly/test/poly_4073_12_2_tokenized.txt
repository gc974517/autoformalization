\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:I> := <nat:2> ; <var:I> := <nat:2> + <var:I> * <var:Z> ; <var:I> := <nat:1> + <var:I> * <var:Z> ; <var:I> := <nat:2> + <var:I> * <var:Z> ; <var:I> := <nat:1> + <var:I> * <var:Z> ; <var:I> := <nat:3> + <var:I> * <var:Z> ; <var:I> := <nat:1> + <var:I> * <var:Z> ; <var:I> := <nat:4> + <var:I> * <var:Z> ; <var:I> := <nat:1> + <var:I> * <var:Z> ; <var:I> := <nat:1> + <var:I> * <var:Z> ; <var:I> := <nat:2> + <var:I> * <var:Z> ; <var:I> := <nat:4> + <var:I> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Given for all positive coefficients $ <var:g> $ that $ <var:Z> = <var:g> $ ahead of executing our code segment , it follows that we have $ <var:I> = <nat:2> \cdot <var:g> ^ <nat:11> + <nat:2> \cdot <var:g> ^ <nat:10> + <nat:1> \cdot <var:g> ^ <nat:9> + <nat:2> \cdot <var:g> ^ <nat:8> + <nat:1> \cdot <var:g> ^ <nat:7> + <nat:3> \cdot <var:g> ^ <nat:6> + <nat:1> \cdot <var:g> ^ <nat:5> + <nat:4> \cdot <var:g> ^ <nat:4> + <nat:1> \cdot <var:g> ^ <nat:3> + <nat:1> \cdot <var:g> ^ <nat:2> + <nat:2> \cdot <var:g> + <nat:4> $ once code segment exits . \end{theorem} \begin{proof} The flow of logic for our code segment is demonstrated through Hoare reasoning . Looking at the following lines of codeseen in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:g> \} & <var:I> := <nat:2> & \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \} \\ \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \} & <var:I> := <nat:2> + <var:I> * <var:Z> & \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \times <var:g> + <nat:2> \} \\ \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \times <var:g> + <nat:2> \} & <var:I> := <nat:1> + <var:I> * <var:Z> & \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:1> \} \end{tabular} This is shown to be logically sound with the variable binding inference rule obtained from usual Hoare logic . Keeping momentum , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:g> \} & <var:I> := <nat:2> & \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \} \end{tabular} This is given using the environment update inference rule in standard Hoare logic . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:Z> = <var:g> \} & <var:I> := <nat:2> & \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \} \end{tabular} This is known to be sound with the binding inference rule defined by Hoare logic . Following , \[ \begin{tabular} {rcl} \{ <var:Z> = <var:g> \} & <var:I> := <nat:2> & \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \} \\ \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \} & <var:I> := <nat:2> + <var:I> * <var:Z> & \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \times <var:g> + <nat:2> \} \\ \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \times <var:g> + <nat:2> \} & <var:I> := <nat:1> + <var:I> * <var:Z> & \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:1> \} \\ \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:1> \} & <var:I> := <nat:2> + <var:I> * <var:Z> & \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + <nat:2> \} \end{tabular} Further , \[ \begin{tabular} {rcl} \{ <var:Z> = <var:g> \} & <var:I> := <nat:2> & \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \} \\ \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \} & <var:I> := <nat:2> + <var:I> * <var:Z> & \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \times <var:g> + <nat:2> \} \\ \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \times <var:g> + <nat:2> \} & <var:I> := <nat:1> + <var:I> * <var:Z> & \{ <var:Z> = <var:g> \land <var:I> = <nat:2> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:1> \} \end{tabular} This is shown to be logically sound through the variable binding scheme found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:I> := <nat:2> ; <var:I> := <nat:2> + <var:I> * <var:Z> ; <var:I> := <nat:1> + <var:I> * <var:Z> ; <var:I> := <nat:2> + <var:I> * <var:Z> ; <var:I> := <nat:1> + <var:I> * <var:Z> ; <var:I> := <nat:3> + <var:I> * <var:Z> ; <var:I> := <nat:1> + <var:I> * <var:Z> ; <var:I> := <nat:4> + <var:I> * <var:Z> ; <var:I> := <nat:1> + <var:I> * <var:Z> ; <var:I> := <nat:1> + <var:I> * <var:Z> ; <var:I> := <nat:2> + <var:I> * <var:Z> ; <var:I> := <nat:4> + <var:I> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:Z> = <var:g> }} <def:poly> {{ <var:I> = <nat:2> * <var:g> ^ <nat:11> + <nat:2> * <var:g> ^ <nat:10> + <nat:1> * <var:g> ^ <nat:9> + <nat:2> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:I> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:I> = <nat:2> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:I> = <nat:2> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:I> = <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:I> = <nat:2> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:I> = <nat:2> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:I> = <nat:2> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:I> = <nat:2> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:I> = <nat:2> * <var:g> ^ <nat:8> + <nat:2> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:I> = <nat:2> * <var:g> ^ <nat:9> + <nat:2> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:I> = <nat:2> * <var:g> ^ <nat:10> + <nat:2> * <var:g> ^ <nat:9> + <nat:1> * <var:g> ^ <nat:8> + <nat:2> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:6> + <nat:3> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:I> = <nat:2> * <var:g> ^ <nat:11> + <nat:2> * <var:g> ^ <nat:10> + <nat:1> * <var:g> ^ <nat:9> + <nat:2> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 