\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:S> := <nat:3> ; <var:S> := <nat:2> + <var:S> * <var:O> ; <var:S> := <var:S> * <var:O> ; <var:S> := <var:S> * <var:O> ; <var:S> := <nat:1> + <var:S> * <var:O> \end{verbatim} Allow ( letting positive integers $ <var:N> $ ) it to hold that $ <var:O> = <var:N> $ prior to interpreting this set of commands , then we see $ <var:S> = <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> $ after series of commands has finished executing . \end{theorem} \begin{proof} Using usual Hoare logic results in : \begin{eqnarray} \{ <var:O> = <var:N> \} \\ <var:S> := <nat:3> ; \\ \{ <var:O> = <var:N> \land <var:S> = <nat:3> \} \\ <var:S> := <nat:2> + <var:S> * <var:O> ; \\ \{ <var:O> = <var:N> \land <var:S> = <nat:3> * <var:N> + <nat:2> \} \\ <var:S> := <var:S> * <var:O> ; \\ \{ <var:O> = <var:N> \land <var:S> = <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + \} \\ <var:S> := <var:S> * <var:O> ; \\ \{ <var:O> = <var:N> \land <var:S> = <nat:3> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + \} \\ <var:S> := <nat:1> + <var:S> * <var:O> \\ \{ <var:O> = <var:N> \land <var:S> = <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> \} \end{eqnarray} Hence , the series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:O> = <var:N> }} <var:S> := <nat:3> ; <var:S> := <nat:2> + <var:S> * <var:O> ; <var:S> := <var:S> * <var:O> ; <var:S> := <var:S> * <var:O> ; <var:S> := <nat:1> + <var:S> * <var:O> {{ <var:S> = <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:S> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:S> = <nat:3> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:S> = <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:S> = <nat:3> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:N> /\ <var:S> = <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 