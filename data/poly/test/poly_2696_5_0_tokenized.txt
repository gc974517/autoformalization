\begin{document} \begin{theorem} Consider the following code : \begin{verbatim} <var:b0> := <nat:4> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:O> ; <var:H> := <var:b1> ; <var:H> := <var:H> + <var:b0> \end{verbatim} Allowing it to hold that $ <var:O> = <var:h> $ --- assuming some integers $ <var:h> $ --- prior to the execution of the program , then we have $ <var:H> = <nat:3> * <var:h> + <nat:4> $ . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:O> = <var:h> \} \\ <var:b0> := <nat:4> ; \\ \{ <var:O> = <var:h> \land <var:b0> = <nat:4> \} \\ <var:b1> := <nat:3> ; \\ \{ <var:O> = <var:h> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> \} \\ <var:b1> := <var:b1> * <var:O> ; \\ \{ <var:O> = <var:h> \land <var:b0> = <nat:4> \land <var:b1> = <nat:3> * <var:h> \} \\ <var:H> := <var:b1> ; \\ \{ <var:O> = <var:h> \land <var:b0> = <nat:4> \land <var:H> = <nat:3> * <var:h> \} \\ <var:H> := <var:H> + <var:b0> \\ \{ <var:O> = <var:h> \land <var:H> = <nat:3> * <var:h> + <nat:4> \} \end{eqnarray} Thusly , this code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:O> = <var:h> }} <var:b0> := <nat:4> ; <var:b1> := <nat:3> ; <var:b1> := <var:b1> * <var:O> ; <var:H> := <var:b1> ; <var:H> := <var:H> + <var:b0> {{ <var:H> = <nat:3> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:h> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:h> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:h> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:h> /\ <var:b0> = <nat:4> /\ <var:H> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:h> /\ <var:H> = <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 