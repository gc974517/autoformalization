\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:3> ; <var:b> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for every positive coefficients $ <var:E> $ --- that we have $ <var:B> = <var:E> $ ahead of the evaluation of this segment of code , it holds that $ <var:b> = <nat:3> $ when set of instructions finishes . \end{theorem} \begin{proof} See that the following decorated set of commands . \begin{eqnarray} \{ <var:B> = <var:E> \} \\ <var:w0> := <nat:3> ; \\ \{ <var:B> = <var:E> \land <var:w0> = <nat:3> \} \\ <var:b> := <var:w0> \\ \{ <var:B> = <var:E> \land <var:b> = <nat:3> \} \end{eqnarray} The application of standard Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:3> ; <var:b> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:B> = <var:E> }} <def:poly> {{ <var:b> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:E> /\ <var:b> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 