\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:C> := <nat:1> ; <var:C> := <nat:1> + <var:C> * <var:W> ; <var:C> := <nat:4> + <var:C> * <var:W> ; <var:C> := <nat:1> + <var:C> * <var:W> ; <var:C> := <nat:3> + <var:C> * <var:W> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> in \emph{Imp} . Allow it to be that $ <var:W> = <var:G> $ , for some positive integers $ <var:G> $ , before running the code segment it follows that we have $ <var:C> = <nat:1> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> $ . \end{theorem} \begin{proof} The proof of the series of commands can be given with standard Hoare logic . Now , we see \[ \begin{tabular} {rcl} \{ <var:W> = <var:G> \} & <var:C> := <nat:1> & \{ <var:W> = <var:G> \land <var:C> = <nat:1> \} \\ \{ <var:W> = <var:G> \land <var:C> = <nat:1> \} & <var:C> := <nat:1> + <var:C> * <var:W> & \{ <var:W> = <var:G> \land <var:C> = <nat:1> \cdot <var:G> + <nat:1> \} \\ \{ <var:W> = <var:G> \land <var:C> = <nat:1> \cdot <var:G> + <nat:1> \} & <var:C> := <nat:4> + <var:C> * <var:W> & \{ <var:W> = <var:G> \land <var:C> = <nat:1> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:4> \} \\ \{ <var:W> = <var:G> \land <var:C> = <nat:1> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:4> \} & <var:C> := <nat:1> + <var:C> * <var:W> & \{ <var:W> = <var:G> \land <var:C> = <nat:1> \cdot <var:G> ^ <nat:3> + <nat:1> \cdot <var:G> ^ <nat:2> + <nat:4> \cdot <var:G> + <nat:1> \} \\ \{ <var:W> = <var:G> \land <var:C> = <nat:1> \cdot <var:G> ^ <nat:3> + <nat:1> \cdot <var:G> ^ <nat:2> + <nat:4> \cdot <var:G> + <nat:1> \} & <var:C> := <nat:3> + <var:C> * <var:W& \{ <var:W> = <var:G> \land <var:C> = <nat:1> \cdot <var:G> ^ <nat:4> + <nat:1> \cdot <var:G> ^ <nat:3> + <nat:4> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:3> \} \end{tabular} This is ensured using the variable update law given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:1> ; <var:C> := <nat:1> + <var:C> * <var:W> ; <var:C> := <nat:4> + <var:C> * <var:W> ; <var:C> := <nat:1> + <var:C> * <var:W> ; <var:C> := <nat:3> + <var:C> * <var:W> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:W> = <var:G> }} <def:poly> {{ <var:C> = <nat:1> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:C> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:C> = <nat:1> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:C> = <nat:1> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:C> = <nat:1> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:C> = <nat:1> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 