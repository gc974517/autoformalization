\begin{document} \begin{theorem} Consider a code segment : \begin{verbatim} <var:k1> := <var:n> ; <var:k2> := <var:k1> * <var:n> ; <var:k3> := <var:k2> * <var:n> ; <var:k4> := <var:k3> * <var:n> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:2> ; <var:k2> := <var:k2> * <nat:1> ; <var:k4> := <var:k4> * <nat:1> ; <var:x> := <var:k4> <var:x> := <var:x> + <var:k2> <var:x> := <var:x> + <var:k1> <var:x> := <var:x> + <var:k0> \end{verbatim} Given --- given some positive coefficients $ <var:E> $ --- that we have $ <var:n> = <var:E> $ prior to executing our series of commands , it must be that we see $ <var:x> = <nat:1> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:2> $ when list of commands finishes . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands is given through Hoare logic . Observing the proceeding pieces of code in the series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:n> = <var:E> \} & <var:k1> := <var:n> & \{ <var:n> = <var:E> \land <var:k1> = <var:E> \} \\ \{ <var:n> = <var:E> \land <var:k1> = <var:E> \} & <var:k2> := <var:k1> * <var:n> & \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \} \\ \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \} & <var:k3> := <var:k2> * <var:n> & \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \} \\ \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \} & <var:k4> := <var:k3> * <var:n> & \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k4> = <var:E> ^ <nat:4> \} \end{tabular} Jumping to the next lines in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:E> \} & <var:k1> := <var:n> & \{ <var:n> = <var:E> \land <var:k1> = <var:E> \} \\ \{ <var:n> = <var:E> \land <var:k1> = <var:E> \} & <var:k2> := <var:k1> * <var:n> & \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \} \\ \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \} & <var:k3> := <var:k2> * <var:n> & \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \} \\ \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \} & <var:k4> := <var:k3> * <var:n> & \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k4> = <var:E> ^ <nat:4> \} \\ \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k4> = <var:E> ^ <nat:4> \} & <var:k0> := <nat:2> & \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k4> = <var:E> ^ <nat:4> \land <var:k0> = <nat:2> \} \\ \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k4> = <var:E> ^ <nat:4> \land <var:k0> = <nat:2> \} & <var:k1> := <var:k1> * <nat:2> & \{ <var:n> = <var:E> \land <var:k1> = <nat:2> * <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k4> = <var:E> ^ <nat:4> \land <var:k0> = <nat:2> \} \end{tabular} This is given with the assignment law of usual Hoare techniques . After , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:E> \} & <var:k1> := <var:n> & \{ <var:n> = <var:E> \land <var:k1> = <var:E> \} \\ \{ <var:n> = <var:E> \land <var:k1> = <var:E> \} & <var:k2> := <var:k1> * <var:n> & \{ <var:n> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <var:k4> : string := " <var:k4> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:n> = <var:E> }} <var:k1> := <var:n> ; <var:k2> := <var:k1> * <var:n> ; <var:k3> := <var:k2> * <var:n> ; <var:k4> := <var:k3> * <var:n> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:2> ; <var:k2> := <var:k2> * <nat:1> ; <var:k4> := <var:k4> * <nat:1> ; <var:x> := <var:k4> <var:x> := <var:x> + <var:k2> <var:x> := <var:x> + <var:k1> <var:x> := <var:x> + <var:k0> {{ <var:x> = <nat:1> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:k1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:k1> = <var:E> /\ <var:k2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:k1> = <var:E> /\ <var:k2> = <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:k1> = <var:E> /\ <var:k2> = <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> /\ <var:k4> = <var:E> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:k1> = <var:E> /\ <var:k2> = <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> /\ <var:k4> = <var:E> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:k1> = <nat:2> * <var:E> /\ <var:k2> = <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> /\ <var:k4> = <var:E> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:k1> = <nat:2> * <var:E> /\ <var:k2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> /\ <var:k4> = <var:E> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:k1> = <nat:2> * <var:E> /\ <var:k2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> /\ <var:k4> = <nat:1> * <var:E> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:k1> = <nat:2> * <var:E> /\ <var:k2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> /\ <var:k0> = <nat:2> /\ <var:x> = <nat:1> * <var:E> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:k1> = <nat:2> * <var:E> /\ <var:k0> = <nat:2> /\ <var:x> = <nat:1> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:k0> = <nat:2> /\ <var:x> = <nat:1> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:x> = <nat:1> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 