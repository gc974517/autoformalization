\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:2> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:M> ; <var:i2> := <nat:7> ; <var:i2> := <var:i2> * <var:M> ; <var:i2> := <var:i2> * <var:M> ; <var:d> := <var:i2> ; <var:d> := <var:d> + <var:i1> ; <var:d> := <var:d> + <var:i0> \end{verbatim} Allowing , for all positive coefficients $ <var:k> $ , it to be that $ <var:M> = <var:k> $ prior to the evaluation of the list of commands , it holds that we see $ <var:d> = <nat:7> \times <var:k> ^ <nat:2> + <nat:1> \times <var:k> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for the series of commands can be accomplished with Hoare logic . Advancing , we see the variable update command \verb | <var:i0> := <nat:2> ; | . This line advances the precondition $ \{ <var:M> = <var:k> \} $ toward $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \} $ . Now , we see the environment update line \verb | <var:i1> := <nat:1> ; | . This line forwards the precondition $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \} $ into $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \} $ . Moving forward to the next step , we have the variable assignmet command \verb | <var:i1> := <var:i1> * <var:M> ; | . This line takes the precondition $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> \} $ to the condition $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> * <var:k> \} $ . Following , we see the code \verb | <var:i2> := <nat:7> ; | . This advances the precondition $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> * <var:k> \} $ into the postcondition $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> * <var:k> \land <var:i2> = <nat:7> \} $ . Stepping through , we see the variable assignmet code giving $ <var:i2> * <var:M> $ toward $ <var:i2>$ . This takes the condition $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> * <var:k> \land <var:i2> = <nat:7> \} $ toward $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> * <var:k> \land <var:i2> = <nat:7> * <var:k> \} $ . This is sound through the assignment scheme of Hoare techniques . Stepping forward , we see the assignment line \verb | <var:i2> := <var:i2> * <var:M> ; | . This line transfers the condition $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> * <var:k> \land <var:i2> = <nat:7> * <var:k> \} $ to the condition $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> * <var:k> \land <var:i2> = <nat:7> * <var:k> ^ <nat:2> \} $ . This is ensured with the assignment inference rule obtained from usual Hoare techniques . After , we see the environment update statement giving $ <var:i2> $ as $ <var:d>$ . This redefines the precondition $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> * <var:k> \land <var:i2> = <nat:7> * <var:k> ^ <nat:2> \} $ into $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> * <var:k> \land <var:d> = <nat:7> * <var:k> ^ <nat:2> \} $ . Taking a look at the next line of code in the series of commands , we have the variable update code \verb | <var:d> := <var:d> + <var:i1> ; | . This code forwards $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:i1> = <nat:1> * <var:k> \land <var:d> = <nat:7> * <var:k> ^ <nat:2> \} $ as the condition $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:d> = <nat:7> * <var:k> ^ <nat:2> + <nat:1> * <var:k> \} $ . This is ensured with the assignment scheme defined in standard Hoare techniques . Taking another step toward the upcoming command contained in the set of instructions , we see the assignment line \verb | <var:d> := <var:d> + <var:i0> | . This command forwards the precondition $ \{ <var:M> = <var:k> \land <var:i0> = <nat:2> \land <var:d> = <nat:7> * <var:k> ^ <nat:2> + <nat:1> * <var:k> \} $ as the postcondition $ \{ <var:M> = <var:k> \land <var:d> = <nat:7> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:M> = <var:k> }} <var:i0> := <nat:2> ; <var:i1> := <nat:1> ; <var:i1> := <var:i1> * <var:M> ; <var:i2> := <nat:7> ; <var:i2> := <var:i2> * <var:M> ; <var:i2> := <var:i2> * <var:M> ; <var:d> := <var:i2> ; <var:d> := <var:d> + <var:i1> ; <var:d> := <var:d> + <var:i0> {{ <var:d> = <nat:7> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:k> /\ <var:i2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:k> /\ <var:i2> = <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:k> /\ <var:i2> = <nat:7> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:i0> = <nat:2> /\ <var:i1> = <nat:1> * <var:k> /\ <var:d> = <nat:7> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:i0> = <nat:2> /\ <var:d> = <nat:7> * <var:k> ^ <nat:2> + <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:k> /\ <var:d> = <nat:7> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 