\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:4> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:H> ; <var:K2> := <nat:2> ; <var:K2> := <var:K2> * <var:H> ; <var:K2> := <var:K2> * <var:H> ; <var:K3> := <nat:2> ; <var:K3> := <var:K3> * <var:H> ; <var:K3> := <var:K3> * <var:H> ; <var:K3> := <var:K3> * <var:H> ; <var:F> := <var:K3> ; <var:F> := <var:F> + <var:K2> ; <var:F> := <var:F> + <var:K1> ; <var:F> := <var:F> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Assuming given any whole numbers $ <var:C> $ that $ <var:H> = <var:C> $ prior to the evaluation of the list of instructions , it must be that we see $ <var:F> = <nat:2> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:C> \} \\ <var:K0> := <nat:4> ; \\ \{ <var:H> = <var:C> \land <var:K0> = <nat:4> \} \\ <var:K1> := <nat:3> ; \\ \{ <var:H> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \} \\ <var:K1> := <var:K1> * <var:H> ; \\ \{ <var:H> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:C> \} \\ <var:K2> := <nat:2> ; \\ \{ <var:H> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:C> \land <var:K2> = <nat:2> \} \\ <var:K2> := <var:K2> * <var:H> ; \\ \{ <var:H> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:C> \land <var:K2> = <nat:2> \cdot <var:C> \} \\ <var:K2> := <var:K2> * <var:H> ; \\ \{ <var:H> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:C> \land <var:K2> = <nat:2> \cdot <var:C> ^ <nat:2> \} \\ <var:K3> := <nat:2> ; \\ \{ <var:H> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:C> \land <var:K2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:K3> = <nat:2> \} \\ <var:K3> := <var:K3> * <var:H> ; \\ \{ <var:H> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:C> \land <var:K2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:K3> = <nat:2> \cdot <var:C> \} \\ <var:K3> := <var:K3> * <var:H> ; \\ \{ <var:H> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:C> \land <var:K2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:K3> = <nat:2> \cdot <var:C> ^ <nat:2> \} \\ <var:K3> := <var:K3> * <var:H> ; \\ \{ <var:H> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:C> \land <var:K2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:K3> = <nat:2> \cdot <var:C> ^ <nat:3> \} \\ <var:F> := <var:K3> ; \\ \{ <var:H> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:C> \land <var:K2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:F> = <nat:2> \cdot <var:C> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:K2> ; \\ \{ <var:H> = <var:C> \land <var:K0> = <nat:4> \land <var:K1> = <nat:3> \cdot <var:C> \land <var:F> = <nat:2> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:K1> ; \\ \{ <var:H> = <var:C> \land <var:K0> = <nat:4> \land <var:F> = <nat:2> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> \} \\ <var:F> := <var:F> + <var:K0> \\ \{ <var:H> = <var:C> \land <var:F> = <nat:2> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> + <nat:4> \} \end{eqnarray} Applying typical Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <def:poly> := <var:K0> := <nat:4> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:H> ; <var:K2> := <nat:2> ; <var:K2> := <var:K2> * <var:H> ; <var:K2> := <var:K2> * <var:H> ; <var:K3> := <nat:2> ; <var:K3> := <var:K3> * <var:H> ; <var:K3> := <var:K3> * <var:H> ; <var:K3> := <var:K3> * <var:H> ; <var:F> := <var:K3> ; <var:F> := <var:F> + <var:K2> ; <var:F> := <var:F> + <var:K1> ; <var:F> := <var:F> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:H> = <var:C> }} <def:poly> {{ <var:F> = <nat:2> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:C> /\ <var:K2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:C> /\ <var:K2> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:C> /\ <var:K2> = <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:C> /\ <var:K2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:K3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:C> /\ <var:K2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:K3> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:C> /\ <var:K2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:K3> = <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:C> /\ <var:K2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:K3> = <nat:2> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:C> /\ <var:K2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:F> = <nat:2> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:K0> = <nat:4> /\ <var:K1> = <nat:3> * <var:C> /\ <var:F> = <nat:2> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:K0> = <nat:4> /\ <var:F> = <nat:2> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:F> = <nat:2> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 