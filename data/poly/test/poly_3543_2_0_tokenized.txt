\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:2> ; <var:g> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:W> = <var:D> $ ( for every positive integers $ <var:D> $ ) prior to executing the program it must be that we see $ <var:g> = <nat:2> $ once series of instructions exits . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands can be accomplished by Hoare techniques . Honing in on the subsequent bits of codein our list of instructions , we see \begin{verbatim} { <var:W> = <var:D> } <var:e0> := <nat:2> { <var:W> = <var:D> \land <var:e0> = <nat:2> } { <var:W> = <var:D> \land <var:e0> = <nat:2> } <var:g> := <var:e0{ <var:W> = <var:D> \land <var:g> = <nat:2> } \end{verbatim} This is sound using the scheme given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:2> ; <var:g> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:W> = <var:D> }} <def:poly> {{ <var:g> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:g> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 