\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:C1> := <var:u> ; <var:C2> := <var:C1> * <var:u> ; <var:C3> := <var:C2> * <var:u> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:4> ; <var:C2> := <var:C2> * <nat:7> ; <var:C3> := <var:C3> * <nat:8> ; <var:J> := <var:C3> <var:J> := <var:J> + <var:C2> <var:J> := <var:J> + <var:C1> <var:J> := <var:J> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:u> = <var:r> $ , for some whole numbers $ <var:r> $ , before the execution of the list of commands it holds that we have $ <var:J> = <nat:8> \times <var:r> ^ <nat:3> + <nat:7> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:1> $ when series of commands has finished . \end{theorem} \begin{proof} The argument for the segment of code can be done through Hoare reasoning . Moving onward , the variable binding statement binding $ <var:u> $ to $ <var:C1>$ . This command transfers the precondition $ \{ <var:u> = <var:r> \} $ into the postcondition $ \{ <var:u> = <var:r> \land <var:C1> = <var:r> \} $ . Advancing to the following step in the series of instructions , we see the assignment command defining $ <var:C1> * <var:u> $ to $ <var:C2>$ . This command transfers $ \{ <var:u> = <var:r> \land <var:C1> = <var:r> \} $ as the condition $ \{ <var:u> = <var:r> \land <var:C1> = <var:r> \land <var:C2> = <var:r> ^ <nat:2> \} $ . This is deduced through the assignment inference rule obtained from Hoare logic . Considering the upcoming command contained in our series of instructions , we have the variable assignmet statement assigning $ <var:C2> * <var:u> $ as $ <var:C3>$ . This code redefines the condition $ \{ <var:u> = <var:r> \land <var:C1> = <var:r> \land <var:C2> = <var:r> ^ <nat:2> \} $ toward $ \{ <var:u> = <var:r> \land <var:C1> = <var:r> \land <var:C2> = <var:r> ^ <nat:2> \land <var:C3> = <var:r> ^ <nat:3> \} $ . This is known to be sound through the assignment law in standard Hoare logic . Observing the following statement seen in the series of instructions , we have the environment update command assigning $ <nat:1> $ into $ <var:C0>$ . This code transfers the precondition $ \{ <var:u> = <var:r> \land <var:C1> = <var:r> \land <var:C2> = <var:r> ^ <nat:2> \land <var:C3> = <var:r> ^ <nat:3> \} $ into the postcondition $ \{ <var:u> = <var:r> \land <var:C1> = <var:r> \land <var:C2> = <var:r> ^ <nat:2> \land <var:C3> = <var:r> ^ <nat:3> \land <var:C0> = <nat:1> \} $ . Moving forward to the subsequent line contained in the code , the environment update command assigning $ <var:C1> * <nat:4> $ to $ <var:C1>$ . This command takes $ \{ <var:u> = <var:r> \land <var:C1> = <var:r> \land <var:C2> = <var:r> ^ <nat:2> \land <var:C3> = <var:r> ^ <nat:3> \land <var:C0> = <nat:1> \} $ to the postcondition $ \{ <var:u> = <var:r> \land <var:C1> = <nat:4> \cdot <var:r> \land <var:C2> = <var:r> ^ <nat:2> \land <var:C3> = <var:r> ^ <nat:3> \land <var:C0> = <nat:1> \} $ . This is rigorously given by the assignment law found in standard Hoare logic . Moving on to the next step , we have the statement assigning $ <var:C2> * <nat:7> $ into $ <var:C2>$ . This statement transfers $ \{ <var:u> = <var:r> \land <var:C1> = <nat:4> \cdot <var:r> \land <var:C2> = <var:r> ^ <nat:2> \land <var:C3> = <var:r> ^ <nat:3> \land <var:C0> = <nat:1> \} $ toward the condition $ \{ <var:u> = <var:r> \land <var:C1> = <nat:4> \cdot <var:r> \land <var:C2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:C3> = <var:r> ^ <nat:3> \land <var:C0> = <nat:1> \} $ . Moving forward to the upcoming line found in our series of instructions , the assignment line \verb | <var:C3> := <var:C3> * <nat:8> ; | . This code redefines the precondition $ \{ <var:u> = <var:r> \land <var:C1> = <nat:4> \cdot <var:r> \land <var:C2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:C3> = <var:r> ^ <nat:3> \land <var:C0> = <nat:1> \} $ toward $ \{ <var:u> = <var:r> \land <var:C1> = <nat:4> \cdot <var:r> \land <var:C2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:C3> = <nat:8> \cdot <var:r> ^ <nat:3> \land <var:C0> = <nat:1> \} $ . Moving on to the upcoming bit of code seen in our series of commands , we have the variable binding statement defining $ <var:C3$ toward $ <var:J>$ . This forwards the condition $ \{ <var:u> = <var:r> \land <var:C1> = <nat:4> \cdot <var:r> \land <var:C2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:C3> = <nat:8> \cdot <var:r> ^ <nat:3> \land <var:C0> = <nat:1> \} $ toward $ \{ <var:u> = <var:r> \land <var:C1> = <nat:4> \cdot <var:r> \land <var:C2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:C0> = <nat:1> \land <var:J> = <nat:8> \cdot <var:r> ^ <nat:3> \} $ . This is known to be sound using the assignment rule defined in Hoare reasoning . Honing in on the proceeding bit of code seen in the program , we have the variable assignmet statement \verb | <var:J> := <var:J> + <var:C2> | . This moves the condition $ \{ <var:u> = <var:r> \land <var:C1> = <nat:4> \cdot <var:r> \land <var:C2> = <nat:7> \cdot <var:r> ^ <nat:2> \land <var:C0> = <nat:1> \land <var:J> = <nat:8> \cdot <var:r> ^ <nat:3> \} $ toward $ \{ <var:u> = <var:r> \land <var:C1> = <nat:4> \cdot <var:r> \land <var:C0> = <nat:1> \land <var:J> = <nat:8> \cdot <var:r> ^ <nat:3> + <nat:7> \cdot <var:r> ^ <nat:2> \} $ . Moving onward , the variable binding command \verb | <var:J> := <var:J> + <var:C1> | . This line advances the condition $ \{ <var:u> = <var:r> \land <var:C1> = <nat:4> \cdot <var:r> \land <var:C0> = <nat:1> \land <var:J> = <nat:8> \cdot <var:r> ^ <nat:3> + <nat:7> \cdot <var:r> ^ <nat:2> \} $ into the postcondition $ \{ <var:u> = <var:r> \land <var:C0> = <nat:1> \land <var:J> = <nat:8> \cdot <var:r> ^ <nat:3> + <nat:7> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> \} $ . This is sound using the assignment inference rule from typical Hoare reasoning . After , we see the variable update line yielding $ <var:J> + <var:C0$ as $ <var:J>$ . This takes the precondition $ \{ <var:u> = <var:r> \land <var:C0> = <nat:1> \land <var:J> = <nat:8> \cdot <var:r> ^ <nat:3> + <nat:7> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> \} $ toward the condition $ \{ <var:u> = <var:r> \land <var:J> = <nat:8> \cdot <var:r> ^ <nat:3> + <nat:7> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <def:poly> := <var:C1> := <var:u> ; <var:C2> := <var:C1> * <var:u> ; <var:C3> := <var:C2> * <var:u> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:4> ; <var:C2> := <var:C2> * <nat:7> ; <var:C3> := <var:C3> * <nat:8> ; <var:J> := <var:C3> <var:J> := <var:J> + <var:C2> <var:J> := <var:J> + <var:C1> <var:J> := <var:J> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:u> = <var:r> }} <def:poly> {{ <var:J> = <nat:8> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:C1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:C1> = <var:r> /\ <var:C2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:C1> = <var:r> /\ <var:C2> = <var:r> ^ <nat:2> /\ <var:C3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:C1> = <var:r> /\ <var:C2> = <var:r> ^ <nat:2> /\ <var:C3> = <var:r> ^ <nat:3> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:C1> = <nat:4> * <var:r> /\ <var:C2> = <var:r> ^ <nat:2> /\ <var:C3> = <var:r> ^ <nat:3> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:C1> = <nat:4> * <var:r> /\ <var:C2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:C3> = <var:r> ^ <nat:3> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:C1> = <nat:4> * <var:r> /\ <var:C2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:C3> = <nat:8> * <var:r> ^ <nat:3> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:C1> = <nat:4> * <var:r> /\ <var:C2> = <nat:7> * <var:r> ^ <nat:2> /\ <var:C0> = <nat:1> /\ <var:J> = <nat:8> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:C1> = <nat:4> * <var:r> /\ <var:C0> = <nat:1> /\ <var:J> = <nat:8> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:C0> = <nat:1> /\ <var:J> = <nat:8> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:J> = <nat:8> * <var:r> ^ <nat:3> + <nat:7> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 