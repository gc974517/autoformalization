\begin{document} \begin{theorem} Consider a code such that \begin{verbatim} <var:D0> := <nat:3> ; <var:D1> := <nat:4> ; <var:D1> := <var:D1> * <var:b> ; <var:D2> := <nat:2> ; <var:D2> := <var:D2> * <var:b> ; <var:D2> := <var:D2> * <var:b> ; <var:R> := <var:D2> ; <var:R> := <var:R> + <var:D1> ; <var:R> := <var:R> + <var:D0> \end{verbatim} Allow it to hold that $ <var:b> = <var:M> $ prior to executing our list of instructions it holds that we have $ <var:R> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> $ . \end{theorem} \begin{proof} Notice this decorated list of commands . \begin{eqnarray} \{ <var:b> = <var:M> \} \\ <var:D0> := <nat:3> ; \\ \{ <var:b> = <var:M> \land <var:D0> = <nat:3> \} \\ <var:D1> := <nat:4> ; \\ \{ <var:b> = <var:M> \land <var:D0> = <nat:3> \land <var:D1> = <nat:4> \} \\ <var:D1> := <var:D1> * <var:b> ; \\ \{ <var:b> = <var:M> \land <var:D0> = <nat:3> \land <var:D1> = <nat:4> \cdot <var:M> \} \\ <var:D2> := <nat:2> ; \\ \{ <var:b> = <var:M> \land <var:D0> = <nat:3> \land <var:D1> = <nat:4> \cdot <var:M> \land <var:D2> = <nat:2> \} \\ <var:D2> := <var:D2> * <var:b> ; \\ \{ <var:b> = <var:M> \land <var:D0> = <nat:3> \land <var:D1> = <nat:4> \cdot <var:M> \land <var:D2> = <nat:2> \cdot <var:M> \} \\ <var:D2> := <var:D2> * <var:b> ; \\ \{ <var:b> = <var:M> \land <var:D0> = <nat:3> \land <var:D1> = <nat:4> \cdot <var:M> \land <var:D2> = <nat:2> \cdot <var:M> ^ <nat:2> \} \\ <var:R> := <var:D2> ; \\ \{ <var:b> = <var:M> \land <var:D0> = <nat:3> \land <var:D1> = <nat:4> \cdot <var:M> \land <var:R> = <nat:2> \cdot <var:M> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:D1> ; \\ \{ <var:b> = <var:M> \land <var:D0> = <nat:3> \land <var:R> = <nat:2> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> \} \\ <var:R> := <var:R> + <var:D0> \\ \{ <var:b> = <var:M> \land <var:R> = <nat:2> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> + <nat:3> \} \end{eqnarray} Applying typical Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:b> = <var:M> }} <var:D0> := <nat:3> ; <var:D1> := <nat:4> ; <var:D1> := <var:D1> * <var:b> ; <var:D2> := <nat:2> ; <var:D2> := <var:D2> * <var:b> ; <var:D2> := <var:D2> * <var:b> ; <var:R> := <var:D2> ; <var:R> := <var:R> + <var:D1> ; <var:R> := <var:R> + <var:D0> {{ <var:R> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:4> * <var:M> /\ <var:D2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:4> * <var:M> /\ <var:D2> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:4> * <var:M> /\ <var:D2> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:D0> = <nat:3> /\ <var:D1> = <nat:4> * <var:M> /\ <var:R> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:D0> = <nat:3> /\ <var:R> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:M> /\ <var:R> = <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 