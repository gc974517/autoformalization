\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M> := <nat:2> ; <var:M> := <nat:1> + <var:M> * <var:u> ; <var:M> := <nat:3> + <var:M> * <var:u> ; <var:M> := <nat:2> + <var:M> * <var:u> ; <var:M> := <nat:4> + <var:M> * <var:u> ; <var:M> := <nat:2> + <var:M> * <var:u> ; <var:M> := <nat:4> + <var:M> * <var:u> ; <var:M> := <nat:3> + <var:M> * <var:u> ; <var:M> := <nat:3> + <var:M> * <var:u> ; <var:M> := <nat:1> + <var:M> * <var:u> ; <var:M> := <nat:4> + <var:M> * <var:u> ; <var:M> := <nat:1> + <var:M> * <var:u> ; <var:M> := <nat:1> + <var:M> * <var:u> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:u> = <var:p> $ ( for positive coefficients $ <var:p> $ ) before executing this set of commands it holds that $ <var:M> = <nat:2> \cdot <var:p> ^ <nat:12> + <nat:1> \cdot <var:p> ^ <nat:11> + <nat:3> \cdot <var:p> ^ <nat:10> + <nat:2> \cdot <var:p> ^ <nat:9> + <nat:4> \cdot <var:p> ^ <nat:8> + <nat:2> \cdot <var:p> ^ <nat:7> + <nat:4> \cdot <var:p> ^ <nat:6> + <nat:3> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:1> \cdot <var:p> ^ <nat:3> + <nat:4> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:1> $ once code segment terminates . \end{theorem} \begin{proof} The way to prove correctness for the code segment is given with standard Hoare techniques . Honing in on the subsequent statement seen in the code segment , we have the variable update command yielding $ <nat:2> $ to $ <var:M>$ . This moves the condition $ \{ <var:u> = <var:p> \} $ toward the postcondition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \} $ . Advancing on , we have the statement assigning $ <nat:1> + <var:M> * <var:u> $ to $ <var:M>$ . This line forwards $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \} $ toward the postcondition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> + <nat:1> \} $ . This is sound by the assignment inference rule from typical Hoare logic . Taking a look at the proceeding command contained in the list of instructions , we see the assignment command defining $ <nat:3> + <var:M> * <var:u> $ to $ <var:M>$ . This command forwards the condition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> + <nat:1> \} $ toward the condition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:3> \} $ . This is shown to be logically sound by the assignment inference rule found in standard Hoare techniques . Next , the variable update command letting $ <nat:2> + <var:M> * <var:u> $ toward $ <var:M>$ . This line takes the precondition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:3> \} $ to $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:2> \} $ . This is known to be sound by the assignment scheme given by usual Hoare reasoning . Observing the proceeding command in the set of commands , we see the variable assignmet command letting $ <nat:4> + <var:M> * <var:u> $ to $ <var:M>$ . This moves the condition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:2> \} $ toward the condition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:4> \} $ . This is shown to be logically sound through the assignment inference rule defined by typical Hoare techniques . Paying attention to the proceeding piece of code contained in the list of instructions , we have the variable update command giving $ <nat:2> + <var:M> * <var:u> $ into $ <var:M>$ . This advances the condition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:4> \} $ to $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:2> \} $ . This is shown by the assignment rule given by usual Hoare reasoning . Considering the following bit of code in the series of instructions , we see the environment update line assigning $ <nat:4> + <var:M> * <var:u> $ to $ <var:M>$ . This forwards the condition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:2> \} $ into $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:6> + <nat:1> \times <var:p> ^ <nat:5> + <nat:3> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:4> \} $ . This is rigorously given by the assignment rule given in Hoare techniques . Stepping through , the binding code \verb | <var:M> := <nat:3> + <var:M> * <var:u> ; | . This statement transfers the precondition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:6> + <nat:1> \times <var:p> ^ <nat:5> + <nat:3> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:4> \} $ to $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:7> + <nat:1> \times <var:p> ^ <nat:6> + <nat:3> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:3> \} $ . Keeping momentum , the variable binding command \verb | <var:M> := <nat:3> + <var:M> * <var:u> ; | . This code forwards the condition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:7> + <nat:1> \times <var:p> ^ <nat:6> + <nat:3> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:3> \} $ toward the postcondition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:8> + <nat:1> \times <var:p> ^ <nat:7> + <nat:3> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:3> \} $ . This is given by the assignment law given in Hoare logic . Moving on to the next step , the command binding $ <nat:1> + <var:M> * <var:u> $ toward $ <var:M>$ . This statement takes $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:8> + <nat:1> \times <var:p> ^ <nat:7> + <nat:3> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:3> \} $ to the condition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:9> + <nat:1> \times <var:p> ^ <nat:8> + <nat:3> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:1> \} $ . This is guaranteed with the assignment rule given in usual Hoare logic . Following , we see the variable binding line \verb | <var:M> := <nat:4> + <var:M> * <var:u> ; | . This statement forwards the precondition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:9> + <nat:1> \times <var:p> ^ <nat:8> + <nat:3> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:1> \} $ as $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:10> + <nat:1> \times <var:p> ^ <nat:9> + <nat:3> \times <var:p> ^ <nat:8> + <nat:2> \times <var:p> ^ <nat:7> + <nat:4> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:4> \} $ . This is deduced by the assignment scheme found in typical Hoare reasoning . Moving on , we see the variable assignmet code \verb | <var:M> := <nat:1> + <var:M> * <var:u> ; | . This statement redefines the precondition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:10> + <nat:1> \times <var:p> ^ <nat:9> + <nat:3> \times <var:p> ^ <nat:8> + <nat:2> \times <var:p> ^ <nat:7> + <nat:4> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:4> \} $ to the condition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:11> + <nat:1> \times <var:p> ^ <nat:10> + <nat:3> \times <var:p> ^ <nat:9> + <nat:2> \times <var:p> ^ <nat:8> + <nat:4> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:5> + <nat:3> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:1> \} $ . Focusing on the next command contained in the set of instructions , the environment update code yielding $ <nat:1> + <var:M> * <var:u$ toward $ <var:M>$ . This takes the precondition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:11> + <nat:1> \times <var:p> ^ <nat:10> + <nat:3> \times <var:p> ^ <nat:9> + <nat:2> \times <var:p> ^ <nat:8> + <nat:4> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:5> + <nat:3> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:1> \} $ to the condition $ \{ <var:u> = <var:p> \land <var:M> = <nat:2> \times <var:p> ^ <nat:12> + <nat:1> \times <var:p> ^ <nat:11> + <nat:3> \times <var:p> ^ <nat:10> + <nat:2> \times <var:p> ^ <nat:9> + <nat:4> \times <var:p> ^ <nat:8> + <nat:2> \times <var:p> ^ <nat:7> + <nat:4> \times <var:p> ^ <nat:6> + <nat:3> \times <var:p> ^ <nat:5> + <nat:3> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:2> ; <var:M> := <nat:1> + <var:M> * <var:u> ; <var:M> := <nat:3> + <var:M> * <var:u> ; <var:M> := <nat:2> + <var:M> * <var:u> ; <var:M> := <nat:4> + <var:M> * <var:u> ; <var:M> := <nat:2> + <var:M> * <var:u> ; <var:M> := <nat:4> + <var:M> * <var:u> ; <var:M> := <nat:3> + <var:M> * <var:u> ; <var:M> := <nat:3> + <var:M> * <var:u> ; <var:M> := <nat:1> + <var:M> * <var:u> ; <var:M> := <nat:4> + <var:M> * <var:u> ; <var:M> := <nat:1> + <var:M> * <var:u> ; <var:M> := <nat:1> + <var:M> * <var:u> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:u> = <var:p> }} <def:poly> {{ <var:M> = <nat:2> * <var:p> ^ <nat:12> + <nat:1> * <var:p> ^ <nat:11> + <nat:3> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:M> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:M> = <nat:2> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:M> = <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:M> = <nat:2> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:M> = <nat:2> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:M> = <nat:2> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:M> = <nat:2> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:M> = <nat:2> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:M> = <nat:2> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:M> = <nat:2> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:M> = <nat:2> * <var:p> ^ <nat:10> + <nat:1> * <var:p> ^ <nat:9> + <nat:3> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:M> = <nat:2> * <var:p> ^ <nat:11> + <nat:1> * <var:p> ^ <nat:10> + <nat:3> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:M> = <nat:2> * <var:p> ^ <nat:12> + <nat:1> * <var:p> ^ <nat:11> + <nat:3> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 