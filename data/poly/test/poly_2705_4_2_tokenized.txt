\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:H> := <nat:2> ; <var:H> := <nat:3> + <var:H> * <var:t> ; <var:H> := <nat:4> + <var:H> * <var:t> ; <var:H> := <nat:2> + <var:H> * <var:t> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:t> = <var:z> $ taking integers $ <var:z> $ ahead of evaluating this code segment it follows that we see $ <var:H> = <nat:2> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for the list of commands can be demonstrated with standard Hoare reasoning . Considering the subsequent commands seen in the list of commands , \verb | { <var:t> = <var:z> } <var:H> := <nat:2> { <var:t> = <var:z> \land <var:H> = <nat:2> } | , \verb | { <var:t> = <var:z> \land <var:H> = <nat:2> } <var:H> := <nat:3> + <var:H> * <var:t> { <var:t> = <var:z> \land <var:H> = <nat:2> \cdot <var:z> + <nat:3> } | and \verb | { <var:t> = <var:z> \land <var:H> = <nat:2> \cdot <var:z> + <nat:3> } <var:H> := <nat:4> + <var:H> * <var:t> { <var:t> = <var:z> \land <var:H> = <nat:2> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:4> } | . Moving on to the following piece of code in the series of commands , we see \verb | { <var:t> = <var:z> } <var:H> := <nat:2> { <var:t> = <var:z> \land <var:H> = <nat:2> } | . This is sound using the variable binding scheme in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:2> ; <var:H> := <nat:3> + <var:H> * <var:t> ; <var:H> := <nat:4> + <var:H> * <var:t> ; <var:H> := <nat:2> + <var:H> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:t> = <var:z> }} <def:poly> {{ <var:H> = <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:H> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:H> = <nat:2> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:H> = <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:H> = <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 