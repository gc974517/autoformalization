\begin{document} \begin{theorem} Consider a segment of code such that \begin{verbatim} <var:C1> := <var:L> ; <var:C2> := <var:C1> * <var:L> ; <var:C3> := <var:C2> * <var:L> ; <var:C0> := <nat:7> ; <var:C1> := <var:C1> * <nat:5> ; <var:C3> := <var:C3> * <nat:1> ; <var:l> := <var:C3> <var:l> := <var:l> + <var:C1> <var:l> := <var:l> + <var:C0> \end{verbatim} Given it to be that $ <var:L> = <var:n> $ ahead of the evaluation of the segment of code it must be that $ <var:l> = <nat:1> * <var:n> ^ <nat:3> + <nat:5> * <var:n> + <nat:7> $ when list of commands finishes . \end{theorem} \begin{proof} The argument for our set of instructions is evident by standard Hoare logic . Moving on , we see the variable assignmet statement \verb | <var:C1> := <var:L> ; | . This statement takes the condition $ \{ <var:L> = <var:n> \} $ as the postcondition $ \{ <var:L> = <var:n> \land <var:C1> = <var:n> \} $ . Advancing to the next bit of code contained in our series of instructions , the variable update command defining $ <var:C1> * <var:L> $ to $ <var:C2>$ . This advances the precondition $ \{ <var:L> = <var:n> \land <var:C1> = <var:n> \} $ to $ \{ <var:L> = <var:n> \land <var:C1> = <var:n> \land <var:C2> = <var:n> ^ <nat:2> \} $ . Moving forward to the upcoming bit of code found in the segment of code , we see the binding statement giving $ <var:C2> * <var:L> $ toward $ <var:C3>$ . This command advances the condition $ \{ <var:L> = <var:n> \land <var:C1> = <var:n> \land <var:C2> = <var:n> ^ <nat:2> \} $ toward the postcondition $ \{ <var:L> = <var:n> \land <var:C1> = <var:n> \land <var:C2> = <var:n> ^ <nat:2> \land <var:C3> = <var:n> ^ <nat:3> \} $ . Moving on to the following step found in the set of commands , we have the environment update command \verb | <var:C0> := <nat:7> ; | . This advances $ \{ <var:L> = <var:n> \land <var:C1> = <var:n> \land <var:C2> = <var:n> ^ <nat:2> \land <var:C3> = <var:n> ^ <nat:3> \} $ into the postcondition $ \{ <var:L> = <var:n> \land <var:C1> = <var:n> \land <var:C2> = <var:n> ^ <nat:2> \land <var:C3> = <var:n> ^ <nat:3> \land <var:C0> = <nat:7> \} $ . This is known to be sound through the assignment scheme from typical Hoare reasoning . Keeping momentum , we see the assignment line \verb | <var:C1> := <var:C1> * <nat:5> ; | . This line redefines the condition $ \{ <var:L> = <var:n> \land <var:C1> = <var:n> \land <var:C2> = <var:n> ^ <nat:2> \land <var:C3> = <var:n> ^ <nat:3> \land <var:C0> = <nat:7> \} $ to $ \{ <var:L> = <var:n> \land <var:C1> = <nat:5> \cdot <var:n> \land <var:C2> = <var:n> ^ <nat:2> \land <var:C3> = <var:n> ^ <nat:3> \land <var:C0> = <nat:7> \} $ . Moving forward to the next step , we see the variable assignmet command yielding $ <var:C3> * <nat:1> $ as $ <var:C3>$ . This redefines the condition $ \{ <var:L> = <var:n> \land <var:C1> = <nat:5> \cdot <var:n> \land <var:C2> = <var:n> ^ <nat:2> \land <var:C3> = <var:n> ^ <nat:3> \land <var:C0> = <nat:7> \} $ toward the condition $ \{ <var:L> = <var:n> \land <var:C1> = <nat:5> \cdot <var:n> \land <var:C2> = <var:n> ^ <nat:2> \land <var:C3> = <nat:1> \cdot <var:n> ^ <nat:3> \land <var:C0> = <nat:7> \} $ . Moving forward to the proceeding bit of code found in the set of instructions , the binding code \verb | <var:l> := <var:C3> | . This command transfers $ \{ <var:L> = <var:n> \land <var:C1> = <nat:5> \cdot <var:n> \land <var:C2> = <var:n> ^ <nat:2> \land <var:C3> = <nat:1> \cdot <var:n> ^ <nat:3> \land <var:C0> = <nat:7> \} $ toward the postcondition $ \{ <var:L> = <var:n> \land <var:C1> = <nat:5> \cdot <var:n> \land <var:C2> = <var:n> ^ <nat:2> \land <var:C0> = <nat:7> \land <var:l> = <nat:1> \cdot <var:n> ^ <nat:3> \} $ . This is rigorously given by the assignment rule of typical Hoare reasoning . Now , we see the binding command binding $ <var:l> + <var:C1$ to $ <var:l>$ . This line forwards the condition $ \{ <var:L> = <var:n> \land <var:C1> = <nat:5> \cdot <var:n> \land <var:C2> = <var:n> ^ <nat:2> \land <var:C0> = <nat:7> \land <var:l> = <nat:1> \cdot <var:n> ^ <nat:3> \} $ toward the condition $ \{ <var:L> = <var:n> \land <var:C0> = <nat:7> \land <var:l> = <nat:1> \cdot <var:n> ^ <nat:3> + <nat:5> \cdot <var:n> \} $ . Taking another step toward the proceeding line contained in the series of commands , we see the variable binding line binding $ <var:l> + <var:C0$ into $ <var:l>$ . This code takes the condition $ \{ <var:L> = <var:n> \land <var:C0> = <nat:7> \land <var:l> = <nat:1> \cdot <var:n> ^ <nat:3> + <nat:5> \cdot <var:n> \} $ toward $ \{ <var:L> = <var:n> \land <var:l> = <nat:1> \cdot <var:n> ^ <nat:3> + <nat:5> \cdot <var:n> + <nat:7> \} $ . This is deduced with the assignment inference rule obtained from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:L> = <var:n> }} <var:C1> := <var:L> ; <var:C2> := <var:C1> * <var:L> ; <var:C3> := <var:C2> * <var:L> ; <var:C0> := <nat:7> ; <var:C1> := <var:C1> * <nat:5> ; <var:C3> := <var:C3> * <nat:1> ; <var:l> := <var:C3> <var:l> := <var:l> + <var:C1> <var:l> := <var:l> + <var:C0> {{ <var:l> = <nat:1> * <var:n> ^ <nat:3> + <nat:5> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:C1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:C1> = <var:n> /\ <var:C2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:C1> = <var:n> /\ <var:C2> = <var:n> ^ <nat:2> /\ <var:C3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:C1> = <var:n> /\ <var:C2> = <var:n> ^ <nat:2> /\ <var:C3> = <var:n> ^ <nat:3> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:C1> = <nat:5> * <var:n> /\ <var:C2> = <var:n> ^ <nat:2> /\ <var:C3> = <var:n> ^ <nat:3> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:C1> = <nat:5> * <var:n> /\ <var:C2> = <var:n> ^ <nat:2> /\ <var:C3> = <nat:1> * <var:n> ^ <nat:3> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:C1> = <nat:5> * <var:n> /\ <var:C2> = <var:n> ^ <nat:2> /\ <var:C0> = <nat:7> /\ <var:l> = <nat:1> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:C0> = <nat:7> /\ <var:l> = <nat:1> * <var:n> ^ <nat:3> + <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:l> = <nat:1> * <var:n> ^ <nat:3> + <nat:5> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 