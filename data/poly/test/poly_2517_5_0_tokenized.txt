\begin{document} \begin{theorem} We define a set of commands as \begin{verbatim} <var:F0> := <nat:2> ; <var:F1> := <nat:6> ; <var:F1> := <var:F1> * <var:r> ; <var:w> := <var:F1> ; <var:w> := <var:w> + <var:F0> \end{verbatim} Allow $ <var:r> = <var:S> $ given any positive numbers $ <var:S> $ prior to the evaluation of our series of instructions it holds that we have $ <var:w> = <nat:6> * <var:S> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning results in : \begin{eqnarray} \{ <var:r> = <var:S> \} \\ <var:F0> := <nat:2> ; \\ \{ <var:r> = <var:S> \land <var:F0> = <nat:2> \} \\ <var:F1> := <nat:6> ; \\ \{ <var:r> = <var:S> \land <var:F0> = <nat:2> \land <var:F1> = <nat:6> \} \\ <var:F1> := <var:F1> * <var:r> ; \\ \{ <var:r> = <var:S> \land <var:F0> = <nat:2> \land <var:F1> = <nat:6> \cdot <var:S> \} \\ <var:w> := <var:F1> ; \\ \{ <var:r> = <var:S> \land <var:F0> = <nat:2> \land <var:w> = <nat:6> \cdot <var:S> \} \\ <var:w> := <var:w> + <var:F0> \\ \{ <var:r> = <var:S> \land <var:w> = <nat:6> \cdot <var:S> + <nat:2> \} \end{eqnarray} Considering the above , the series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:r> = <var:S> }} <var:F0> := <nat:2> ; <var:F1> := <nat:6> ; <var:F1> := <var:F1> * <var:r> ; <var:w> := <var:F1> ; <var:w> := <var:w> + <var:F0> {{ <var:w> = <nat:6> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:S> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:S> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:S> /\ <var:F0> = <nat:2> /\ <var:F1> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:S> /\ <var:F0> = <nat:2> /\ <var:w> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:S> /\ <var:w> = <nat:6> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 