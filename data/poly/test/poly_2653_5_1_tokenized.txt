\begin{document} \begin{theorem} Define the following program in \emph{Imp} as follows \begin{verbatim} <var:C1> := <var:q> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:7> ; <var:j> := <var:C1> <var:j> := <var:j> + <var:C0> \end{verbatim} Allowing given some integers $ <var:y> $ that we have $ <var:q> = <var:y> $ ahead of the evaluation of this code segment it holds that $ <var:j> = <nat:7> \times <var:y> + <nat:1> $ after list of instructions has terminated . \end{theorem} \begin{proof} Using usual Hoare techniques gives : \begin{eqnarray} \{ <var:q> = <var:y> \} \\ <var:C1> := <var:q> ; \\ \{ <var:q> = <var:y> \land <var:C1> = <var:y> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:q> = <var:y> \land <var:C1> = <var:y> \land <var:C0> = <nat:1> \} \\ <var:C1> := <var:C1> * <nat:7> ; \\ \{ <var:q> = <var:y> \land <var:C1> = <nat:7> \times <var:y> \land <var:C0> = <nat:1> \} \\ <var:j> := <var:C1> \\ \{ <var:q> = <var:y> \land <var:C0> = <nat:1> \land <var:j> = <nat:7> \times <var:y> \} \\ <var:j> := <var:j> + <var:C0> \\ \{ <var:q> = <var:y> \land <var:j> = <nat:7> \times <var:y> + <nat:1> \} \end{eqnarray} As a consequence , this list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:q> = <var:y> }} <var:C1> := <var:q> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:7> ; <var:j> := <var:C1> <var:j> := <var:j> + <var:C0> {{ <var:j> = <nat:7> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:C1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:C1> = <var:y> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:C1> = <nat:7> * <var:y> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:C0> = <nat:1> /\ <var:j> = <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:y> /\ <var:j> = <nat:7> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 