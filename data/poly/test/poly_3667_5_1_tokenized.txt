\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j1> := <var:C> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:3> ; <var:v> := <var:j1> <var:v> := <var:v> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Allowing that we have $ <var:C> = <var:Z> $ ahead of running this series of instructions , it must be that $ <var:v> = <nat:3> \cdot <var:Z> + <nat:6> $ when segment of code has terminated . \end{theorem} \begin{proof} The flow of logic for our set of instructions is given with Hoare logic . Advancing on , we have \verb | { <var:C> = <var:Z> } <var:j1> := <var:C> { <var:C> = <var:Z> \land <var:j1> = <var:Z> } | . This is deduced by the variable assignmet scheme obtained from usual Hoare reasoning . Looking at the following commands found in the program , we have \verb | { <var:C> = <var:Z> } <var:j1> := <var:C> { <var:C> = <var:Z> \land <var:j1> = <var:Z> } | , \verb | { <var:C> = <var:Z> \land <var:j1> = <var:Z> } <var:j0> := <nat:6> { <var:C> = <var:Z> \land <var:j1> = <var:Z> \land <var:j0> = <nat:6> } | , \verb | { <var:C> = <var:Z> \land <var:j1> = <var:Z> \land <var:j0> = <nat:6> } <var:j1> := <var:j1> * <nat:3> { <var:C> = <var:Z> \land <var:j1> = <nat:3> \times <var:Z> \land <var:j0> = <nat:6> } | and \verb | { <var:C> = <var:Z> \land <var:j1> = <nat:3> \times <var:Z> \land <var:j0> = <nat:6> } <var:v> := <var:j1{ <var:C> = <var:Z> \land <var:j0> = <nat:6> \land <var:v> = <nat:3> \times <var:Z> } | . This is rigorously given through the assignment scheme in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j1> := <var:C> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:3> ; <var:v> := <var:j1> <var:v> := <var:v> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:C> = <var:Z> }} <def:poly> {{ <var:v> = <nat:3> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:j1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:j1> = <var:Z> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:j1> = <nat:3> * <var:Z> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:j0> = <nat:6> /\ <var:v> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:v> = <nat:3> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 