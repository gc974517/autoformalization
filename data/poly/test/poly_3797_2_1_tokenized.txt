\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:3> ; <var:E> := <var:O0> \end{verbatim} Allow , letting natural numbers $ <var:X> $ , it to be that $ <var:P> = <var:X> $ before the execution of our segment of code it must be that $ <var:E> = <nat:3> $ when series of commands exits . \end{theorem} \begin{proof} The argument for the code segment is demonstrated by Hoare techniques . Honing in on the upcoming line of code seen in our series of instructions , we have the variable assignmet line defining $ <nat:3> $ into $ <var:O0>$ . This line takes the condition $ \{ <var:P> = <var:X> \} $ to the postcondition $ \{ <var:P> = <var:X> \land <var:O0> = <nat:3> \} $ . Moving forward to the upcoming step in our list of instructions , the variable binding line \verb | <var:E> := <var:O0> | . This takes the condition $ \{ <var:P> = <var:X> \land <var:O0> = <nat:3> \} $ as the postcondition $ \{ <var:P> = <var:X> \land <var:E> = <nat:3> \} $ . This is shown using the assignment scheme obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:P> = <var:X> }} <var:O0> := <nat:3> ; <var:E> := <var:O0> {{ <var:E> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:E> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 