\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:7> ; <var:U1> := <nat:9> ; <var:U1> := <var:U1> * <var:b> ; <var:x> := <var:U1> ; <var:x> := <var:x> + <var:U0> \end{verbatim} Given ( assuming some whole numbers $ <var:o> $ ) it to hold that $ <var:b> = <var:o> $ prior to interpreting this set of commands , then $ <var:x> = <nat:9> \times <var:o> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for this series of commands can be shown through typical Hoare techniques . Honing in on the proceeding lines of codein the set of instructions , we have \begin{eqnarray} \{ <var:b> = <var:o> \} \, <var:U0> := <nat:7> \, \{ <var:b> = <var:o> \land <var:U0> = <nat:7> \} \\ \{ <var:b> = <var:o> \land <var:U0> = <nat:7> \} \, <var:U1> := <nat:9> \, \{ <var:b> = <var:o> \land <var:U0> = <nat:7> \land <var:U1> = <nat:9> \} \\ \{ <var:b> = <var:o> \land <var:U0> = <nat:7> \land <var:U1> = <nat:9> \} \, <var:U1> := <var:U1> * <var:b> \, \{ <var:b> = <var:o> \land <var:U0> = <nat:7> \land <var:U1> = <nat:9> \times <var:o> \} \end{eqnarray} This is known to be sound with the variable assignmet inference rule given in typical Hoare logic . Keeping momentum , we have \begin{eqnarray} \{ <var:b> = <var:o> \} \, <var:U0> := <nat:7> \, \{ <var:b> = <var:o> \land <var:U0> = <nat:7> \} \\ \{ <var:b> = <var:o> \land <var:U0> = <nat:7> \} \, <var:U1> := <nat:9> \, \{ <var:b> = <var:o> \land <var:U0> = <nat:7> \land <var:U1> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:b> = <var:o> }} <var:U0> := <nat:7> ; <var:U1> := <nat:9> ; <var:U1> := <var:U1> * <var:b> ; <var:x> := <var:U1> ; <var:x> := <var:x> + <var:U0> {{ <var:x> = <nat:9> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:U0> = <nat:7> /\ <var:x> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:o> /\ <var:x> = <nat:9> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 