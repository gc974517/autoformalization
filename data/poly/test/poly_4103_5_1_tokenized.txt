\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H1> := <var:n> ; <var:H0> := <nat:7> ; <var:H1> := <var:H1> * <nat:8> ; <var:M> := <var:H1> <var:M> := <var:M> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> in \emph{Imp} . Assume that we have $ <var:n> = <var:O> $ prior to the evaluation of the list of instructions , it must be that we have $ <var:M> = <nat:8> \times <var:O> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions is accomplished by standard Hoare logic . Looking at the proceeding lines found in our program , \begin{verbatim} { <var:n> = <var:O> } <var:H1> := <var:n> { <var:n> = <var:O> \land <var:H1> = <var:O> } { <var:n> = <var:O> \land <var:H1> = <var:O> } <var:H0> := <nat:7> { <var:n> = <var:O> \land <var:H1> = <var:O> \land <var:H0> = <nat:7> } \end{verbatim} Honing in on the next lines found in the list of commands , we see \begin{verbatim} { <var:n> = <var:O> } <var:H1> := <var:n> { <var:n> = <var:O> \land <var:H1> = <var:O> } { <var:n> = <var:O> \land <var:H1> = <var:O> } <var:H0> := <nat:7> { <var:n> = <var:O> \land <var:H1> = <var:O> \land <var:H0> = <nat:7> } { <var:n> = <var:O> \land <var:H1> = <var:O> \land <var:H0> = <nat:7> } <var:H1> := <var:H1> * <nat:8> { <var:n> = <var:O> \land <var:H1> = <nat:8> \cdot <var:O> \land <var:H0> = <nat:7> } \end{verbatim} This is known to be sound using the assignment inference rule given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H1> := <var:n> ; <var:H0> := <nat:7> ; <var:H1> := <var:H1> * <nat:8> ; <var:M> := <var:H1> <var:M> := <var:M> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:n> = <var:O> }} <def:poly> {{ <var:M> = <nat:8> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:H1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:H1> = <var:O> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:H1> = <nat:8> * <var:O> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:H0> = <nat:7> /\ <var:M> = <nat:8> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:O> /\ <var:M> = <nat:8> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 