\begin{document} \begin{theorem} Define a segment of code as \begin{verbatim} <var:F0> := <nat:1> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:Z> ; <var:F3> := <nat:7> ; <var:F3> := <var:F3> * <var:Z> ; <var:F3> := <var:F3> * <var:Z> ; <var:F3> := <var:F3> * <var:Z> ; <var:Q> := <var:F3> ; <var:Q> := <var:Q> + <var:F1> ; <var:Q> := <var:Q> + <var:F0> \end{verbatim} Allowing that $ <var:Z> = <var:H> $ ahead of interpreting this series of commands it holds that we have $ <var:Q> = <nat:7> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> + <nat:1> $ after list of instructions is done executing . \end{theorem} \begin{proof} Using typical Hoare logic yields : \begin{eqnarray} \{ <var:Z> = <var:H> \} \\ <var:F0> := <nat:1> ; \\ \{ <var:Z> = <var:H> \land <var:F0> = <nat:1> \} \\ <var:F1> := <nat:1> ; \\ \{ <var:Z> = <var:H> \land <var:F0> = <nat:1> \land <var:F1> = <nat:1> \} \\ <var:F1> := <var:F1> * <var:Z> ; \\ \{ <var:Z> = <var:H> \land <var:F0> = <nat:1> \land <var:F1> = <nat:1> \times <var:H> \} \\ <var:F3> := <nat:7> ; \\ \{ <var:Z> = <var:H> \land <var:F0> = <nat:1> \land <var:F1> = <nat:1> \times <var:H> \land <var:F3> = <nat:7> \} \\ <var:F3> := <var:F3> * <var:Z> ; \\ \{ <var:Z> = <var:H> \land <var:F0> = <nat:1> \land <var:F1> = <nat:1> \times <var:H> \land <var:F3> = <nat:7> \times <var:H> \} \\ <var:F3> := <var:F3> * <var:Z> ; \\ \{ <var:Z> = <var:H> \land <var:F0> = <nat:1> \land <var:F1> = <nat:1> \times <var:H> \land <var:F3> = <nat:7> \times <var:H> ^ <nat:2> \} \\ <var:F3> := <var:F3> * <var:Z> ; \\ \{ <var:Z> = <var:H> \land <var:F0> = <nat:1> \land <var:F1> = <nat:1> \times <var:H> \land <var:F3> = <nat:7> \times <var:H> ^ <nat:3> \} \\ <var:Q> := <var:F3> ; \\ \{ <var:Z> = <var:H> \land <var:F0> = <nat:1> \land <var:F1> = <nat:1> \times <var:H> \land <var:Q> = <nat:7> \times <var:H> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:F1> ; \\ \{ <var:Z> = <var:H> \land <var:F0> = <nat:1> \land <var:Q> = <nat:7> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> \} \\ <var:Q> := <var:Q> + <var:F0> \\ \{ <var:Z> = <var:H> \land <var:Q> = <nat:7> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> + <nat:1> \} \end{eqnarray} As a result , our series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F3> : string := " <var:F3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Z> = <var:H> }} <var:F0> := <nat:1> ; <var:F1> := <nat:1> ; <var:F1> := <var:F1> * <var:Z> ; <var:F3> := <nat:7> ; <var:F3> := <var:F3> * <var:Z> ; <var:F3> := <var:F3> * <var:Z> ; <var:F3> := <var:F3> * <var:Z> ; <var:Q> := <var:F3> ; <var:Q> := <var:Q> + <var:F1> ; <var:Q> := <var:Q> + <var:F0> {{ <var:Q> = <nat:7> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:1> * <var:H> /\ <var:F3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:1> * <var:H> /\ <var:F3> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:1> * <var:H> /\ <var:F3> = <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:1> * <var:H> /\ <var:F3> = <nat:7> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:1> * <var:H> /\ <var:Q> = <nat:7> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:F0> = <nat:1> /\ <var:Q> = <nat:7> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:Q> = <nat:7> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 