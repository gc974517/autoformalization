\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:A> ; <var:k2> := <var:k1> * <var:A> ; <var:k3> := <var:k2> * <var:A> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:7> ; <var:k2> := <var:k2> * <nat:8> ; <var:k3> := <var:k3> * <nat:1> ; <var:l> := <var:k3> <var:l> := <var:l> + <var:k2> <var:l> := <var:l> + <var:k1> <var:l> := <var:l> + <var:k0> \end{verbatim} Allowing that we have $ <var:A> = <var:H> $ ahead of executing our series of instructions then we have $ <var:l> = <nat:1> \times <var:H> ^ <nat:3> + <nat:8> \times <var:H> ^ <nat:2> + <nat:7> \times <var:H> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for our series of commands is done by the following decorated segment of code . \begin{eqnarray} \{ <var:A> = <var:H> \} \\ <var:k1> := <var:A> ; \\ \{ <var:A> = <var:H> \land <var:k1> = <var:H> \} \\ <var:k2> := <var:k1> * <var:A> ; \\ \{ <var:A> = <var:H> \land <var:k1> = <var:H> \land <var:k2> = <var:H> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:A> ; \\ \{ <var:A> = <var:H> \land <var:k1> = <var:H> \land <var:k2> = <var:H> ^ <nat:2> \land <var:k3> = <var:H> ^ <nat:3> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:A> = <var:H> \land <var:k1> = <var:H> \land <var:k2> = <var:H> ^ <nat:2> \land <var:k3> = <var:H> ^ <nat:3> \land <var:k0> = <nat:2> \} \\ <var:k1> := <var:k1> * <nat:7> ; \\ \{ <var:A> = <var:H> \land <var:k1> = <nat:7> \cdot <var:H> \land <var:k2> = <var:H> ^ <nat:2> \land <var:k3> = <var:H> ^ <nat:3> \land <var:k0> = <nat:2> \} \\ <var:k2> := <var:k2> * <nat:8> ; \\ \{ <var:A> = <var:H> \land <var:k1> = <nat:7> \cdot <var:H> \land <var:k2> = <nat:8> \cdot <var:H> ^ <nat:2> \land <var:k3> = <var:H> ^ <nat:3> \land <var:k0> = <nat:2> \} \\ <var:k3> := <var:k3> * <nat:1> ; \\ \{ <var:A> = <var:H> \land <var:k1> = <nat:7> \cdot <var:H> \land <var:k2> = <nat:8> \cdot <var:H> ^ <nat:2> \land <var:k3> = <nat:1> \cdot <var:H> ^ <nat:3> \land <var:k0> = <nat:2> \} \\ <var:l> := <var:k3> \\ \{ <var:A> = <var:H> \land <var:k1> = <nat:7> \cdot <var:H> \land <var:k2> = <nat:8> \cdot <var:H> ^ <nat:2> \land <var:k0> = <nat:2> \land <var:l> = <nat:1> \cdot <var:H> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:k2> \\ \{ <var:A> = <var:H> \land <var:k1> = <nat:7> \cdot <var:H> \land <var:k0> = <nat:2> \land <var:l> = <nat:1> \cdot <var:H> ^ <nat:3> + <nat:8> \cdot <var:H> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:k1> \\ \{ <var:A> = <var:H> \land <var:k0> = <nat:2> \land <var:l> = <nat:1> \cdot <var:H> ^ <nat:3> + <nat:8> \cdot <var:H> ^ <nat:2> + <nat:7> \cdot <var:H> \} \\ <var:l> := <var:l> + <var:k0> \\ \{ <var:A> = <var:H> \land <var:l> = <nat:1> \cdot <var:H> ^ <nat:3> + <nat:8> \cdot <var:H> ^ <nat:2> + <nat:7> \cdot <var:H> + <nat:2> \} \end{eqnarray} Applying Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:A> = <var:H> }} <var:k1> := <var:A> ; <var:k2> := <var:k1> * <var:A> ; <var:k3> := <var:k2> * <var:A> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:7> ; <var:k2> := <var:k2> * <nat:8> ; <var:k3> := <var:k3> * <nat:1> ; <var:l> := <var:k3> <var:l> := <var:l> + <var:k2> <var:l> := <var:l> + <var:k1> <var:l> := <var:l> + <var:k0> {{ <var:l> = <nat:1> * <var:H> ^ <nat:3> + <nat:8> * <var:H> ^ <nat:2> + <nat:7> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:k1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:k1> = <var:H> /\ <var:k2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:k1> = <var:H> /\ <var:k2> = <var:H> ^ <nat:2> /\ <var:k3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:k1> = <var:H> /\ <var:k2> = <var:H> ^ <nat:2> /\ <var:k3> = <var:H> ^ <nat:3> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:k1> = <nat:7> * <var:H> /\ <var:k2> = <var:H> ^ <nat:2> /\ <var:k3> = <var:H> ^ <nat:3> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:k1> = <nat:7> * <var:H> /\ <var:k2> = <nat:8> * <var:H> ^ <nat:2> /\ <var:k3> = <var:H> ^ <nat:3> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:k1> = <nat:7> * <var:H> /\ <var:k2> = <nat:8> * <var:H> ^ <nat:2> /\ <var:k3> = <nat:1> * <var:H> ^ <nat:3> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:k1> = <nat:7> * <var:H> /\ <var:k2> = <nat:8> * <var:H> ^ <nat:2> /\ <var:k0> = <nat:2> /\ <var:l> = <nat:1> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:k1> = <nat:7> * <var:H> /\ <var:k0> = <nat:2> /\ <var:l> = <nat:1> * <var:H> ^ <nat:3> + <nat:8> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:k0> = <nat:2> /\ <var:l> = <nat:1> * <var:H> ^ <nat:3> + <nat:8> * <var:H> ^ <nat:2> + <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:l> = <nat:1> * <var:H> ^ <nat:3> + <nat:8> * <var:H> ^ <nat:2> + <nat:7> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 