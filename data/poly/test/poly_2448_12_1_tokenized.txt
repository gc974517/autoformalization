\begin{document} \begin{theorem} Define the following program in \emph{Imp} as \begin{verbatim} <var:T1> := <var:N> ; <var:T2> := <var:T1> * <var:N> ; <var:T3> := <var:T2> * <var:N> ; <var:T4> := <var:T3> * <var:N> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:1> ; <var:T4> := <var:T4> * <nat:5> ; <var:W> := <var:T4> <var:W> := <var:W> + <var:T2> <var:W> := <var:W> + <var:T1> <var:W> := <var:W> + <var:T0> \end{verbatim} Allowing it to hold that $ <var:N> = <var:J> $ ahead of interpreting this set of commands then we have $ <var:W> = <nat:5> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> ^ <nat:2> + <nat:7> \cdot <var:J> + <nat:1> $ once list of commands terminates . \end{theorem} \begin{proof} The proof of our program can be accomplished with typical Hoare reasoning . Taking another step toward the proceeding commands in our code , we see \begin{verbatim} { <var:N> = <var:J> } <var:T1> := <var:N> { <var:N> = <var:J> \land <var:T1> = <var:J> } { <var:N> = <var:J> \land <var:T1> = <var:J> } <var:T2> := <var:T1> * <var:N> { <var:N> = <var:J> \land <var:T1> = <var:J> \land <var:T2> = <var:J> ^ <nat:2> } { <var:N> = <var:J> \land <var:T1> = <var:J> \land <var:T2> = <var:J> ^ <nat:2> } <var:T3> := <var:T2> * <var:N> { <var:N> = <var:J> \land <var:T1> = <var:J> \land <var:T2> = <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> } { <var:N> = <var:J> \land <var:T1> = <var:J> \land <var:T2> = <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> } <var:T4> := <var:T3> * <var:N> { <var:N> = <var:J> \land <var:T1> = <var:J> \land <var:T2> = <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> \land <var:T4> = <var:J> ^ <nat:4> } { <var:N> = <var:J> \land <var:T1> = <var:J> \land <var:T2> = <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> \land <var:T4> = <var:J> ^ <nat:4> } <var:T0> := <nat:1> { <var:N> = <var:J> \land <var:T1> = <var:J> \land <var:T2> = <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> \land <var:T4> = <var:J> ^ <nat:4> \land <var:T0> = <nat:1> } { <var:N> = <var:J> \land <var:T1> = <var:J> \land <var:T2> = <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> \land <var:T4> = <var:J> ^ <nat:4> \land <var:T0> = <nat:1> } <var:T1> := <var:T1> * <nat:7> { <var:N> = <var:J> \land <var:T1> = <nat:7> * <var:J> \land <var:T2> = <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> \land <var:T4> = <var:J> ^ <nat:4> \land <var:T0> = <nat:1> } { <var:N> = <var:J> \land <var:T1> = <nat:7> * <var:J> \land <var:T2> = <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> \land <var:T4> = <var:J> ^ <nat:4> \land <var:T0> = <nat:1> } <var:T2> := <var:T2> * <nat:1> { <var:N> = <var:J> \land <var:T1> = <nat:7> * <var:J> \land <var:T2> = <nat:1> * <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> \land <var:T4> = <var:J> ^ <nat:4> \land <var:T0> = <nat:1> } { <var:N> = <var:J> \land <var:T1> = <nat:7> * <var:J> \land <var:T2> = <nat:1> * <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> \land <var:T4> = <var:J> ^ <nat:4> \land <var:T0> = <nat:1> } <var:T4> := <var:T4> * <nat:5> { <var:N> = <var:J> \land <var:T1> = <nat:7> * <var:J> \land <var:T2> = <nat:1> * <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> \land <var:T4> = <nat:5> * <var:J> ^ <nat:4> \land <var:T0> = <nat:1> } { <var:N> = <var:J> \land <var:T1> = <nat:7> * <var:J> \land <var:T2> = <nat:1> * <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> \land <var:T4> = <nat:5> * <var:J> ^ <nat:4> \land <var:T0> = <nat:1> } <var:W> := <var:T4{ <var:N> = <var:J> \land <var:T1> = <nat:7> * <var:J> \land <var:T2> = <nat:1> * <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> \land <var:T0> = <nat:1> \land <var:W> = <nat:5> * <var:J> ^ <nat:4> } { <var:N> = <var:J> \land <var:T1> = <nat:7> * <var:J> \land <var:T2> = <nat:1> * <var:J> ^ <nat:2> \land <var:T3> = <var:J> ^ <nat:3> \land <var:T0> = <nat:1> \land <var:W> = <nat:5> * <var:J> ^ <nat:4> } <var:W> := <var:W> + <var:T2{ <var:N> = <var:J> \land <var:T1> = <nat:7> * <var:J> \land <var:T0> = <nat:1> \land <var:W> = <nat:5> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> } { <var:N> = <var:J> \land <var:T1> = <nat:7> * <var:J> \land <var:T0> = <nat:1> \land <var:W> = <nat:5> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> } <var:W> := <var:W> + <var:T1{ <var:N> = <var:J> \land <var:T0> = <nat:1> \land <var:W> = <nat:5> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> + <nat:7> * <var:J> } { <var:N> = <var:J> \land <var:T0> = <nat:1> \land <var:W> = <nat:5> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> + <nat:7> * <var:J> } <var:W> := <var:W> + <var:T0{ <var:N> = <var:J> \land <var:W> = <nat:5> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> + <nat:7> * <var:J> + <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <var:T4> : string := " <var:T4> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:N> = <var:J> }} <var:T1> := <var:N> ; <var:T2> := <var:T1> * <var:N> ; <var:T3> := <var:T2> * <var:N> ; <var:T4> := <var:T3> * <var:N> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:1> ; <var:T4> := <var:T4> * <nat:5> ; <var:W> := <var:T4> <var:W> := <var:W> + <var:T2> <var:W> := <var:W> + <var:T1> <var:W> := <var:W> + <var:T0> {{ <var:W> = <nat:5> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> + <nat:7> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:T1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:T1> = <var:J> /\ <var:T2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:T1> = <var:J> /\ <var:T2> = <var:J> ^ <nat:2> /\ <var:T3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:T1> = <var:J> /\ <var:T2> = <var:J> ^ <nat:2> /\ <var:T3> = <var:J> ^ <nat:3> /\ <var:T4> = <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:T1> = <var:J> /\ <var:T2> = <var:J> ^ <nat:2> /\ <var:T3> = <var:J> ^ <nat:3> /\ <var:T4> = <var:J> ^ <nat:4> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:T1> = <nat:7> * <var:J> /\ <var:T2> = <var:J> ^ <nat:2> /\ <var:T3> = <var:J> ^ <nat:3> /\ <var:T4> = <var:J> ^ <nat:4> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:T1> = <nat:7> * <var:J> /\ <var:T2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:T3> = <var:J> ^ <nat:3> /\ <var:T4> = <var:J> ^ <nat:4> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:T1> = <nat:7> * <var:J> /\ <var:T2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:T3> = <var:J> ^ <nat:3> /\ <var:T4> = <nat:5> * <var:J> ^ <nat:4> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:T1> = <nat:7> * <var:J> /\ <var:T2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:T3> = <var:J> ^ <nat:3> /\ <var:T0> = <nat:1> /\ <var:W> = <nat:5> * <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:T1> = <nat:7> * <var:J> /\ <var:T0> = <nat:1> /\ <var:W> = <nat:5> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:T0> = <nat:1> /\ <var:W> = <nat:5> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> + <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:J> /\ <var:W> = <nat:5> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> + <nat:7> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 