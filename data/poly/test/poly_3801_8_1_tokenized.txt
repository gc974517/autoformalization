\begin{document} \begin{theorem} Take a code segment such that \begin{verbatim} <var:N1> := <var:v> ; <var:N2> := <var:N1> * <var:v> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:5> ; <var:N2> := <var:N2> * <nat:1> ; <var:I> := <var:N2> <var:I> := <var:I> + <var:N1> <var:I> := <var:I> + <var:N0> \end{verbatim} Given that we have $ <var:v> = <var:W> $ ahead of running the program then we see $ <var:I> = <nat:1> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:2> $ when program executes . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands can be given using standard Hoare reasoning . Next , the environment update line yielding $ <var:v> $ toward $ <var:N1>$ . This code advances the precondition $ \{ <var:v> = <var:W> \} $ into the condition $ \{ <var:v> = <var:W> \land <var:N1> = <var:W> \} $ . This is shown with the assignment scheme defined in standard Hoare logic . Moving onward , we have the variable update statement letting $ <var:N1> * <var:v> $ as $ <var:N2>$ . This statement forwards $ \{ <var:v> = <var:W> \land <var:N1> = <var:W> \} $ into the condition $ \{ <var:v> = <var:W> \land <var:N1> = <var:W> \land <var:N2> = <var:W> ^ <nat:2> \} $ . Moving on to the next step , the binding statement giving $ <nat:2> $ to $ <var:N0>$ . This command redefines $ \{ <var:v> = <var:W> \land <var:N1> = <var:W> \land <var:N2> = <var:W> ^ <nat:2> \} $ to the condition $ \{ <var:v> = <var:W> \land <var:N1> = <var:W> \land <var:N2> = <var:W> ^ <nat:2> \land <var:N0> = <nat:2> \} $ . This is given with the assignment inference rule given by Hoare techniques . Immediately after , we see the variable assignmet statement \verb | <var:N1> := <var:N1> * <nat:5> ; | . This command forwards the condition $ \{ <var:v> = <var:W> \land <var:N1> = <var:W> \land <var:N2> = <var:W> ^ <nat:2> \land <var:N0> = <nat:2> \} $ as $ \{ <var:v> = <var:W> \land <var:N1> = <nat:5> * <var:W> \land <var:N2> = <var:W> ^ <nat:2> \land <var:N0> = <nat:2> \} $ . Honing in on the upcoming line of code in our segment of code , the environment update line \verb | <var:N2> := <var:N2> * <nat:1> ; | . This code moves the precondition $ \{ <var:v> = <var:W> \land <var:N1> = <nat:5> * <var:W> \land <var:N2> = <var:W> ^ <nat:2> \land <var:N0> = <nat:2> \} $ into $ \{ <var:v> = <var:W> \land <var:N1> = <nat:5> * <var:W> \land <var:N2> = <nat:1> * <var:W> ^ <nat:2> \land <var:N0> = <nat:2> \} $ . Looking at the proceeding piece of code found in our list of instructions , we see the assignment statement assigning $ <var:N2$ to $ <var:I>$ . This transfers the condition $ \{ <var:v> = <var:W> \land <var:N1> = <nat:5> * <var:W> \land <var:N2> = <nat:1> * <var:W> ^ <nat:2> \land <var:N0> = <nat:2> \} $ as $ \{ <var:v> = <var:W> \land <var:N1> = <nat:5> * <var:W> \land <var:N0> = <nat:2> \land <var:I> = <nat:1> * <var:W> ^ <nat:2> \} $ . This is sound through the assignment rule found in Hoare logic . Immediately after , we have the variable update command \verb | <var:I> := <var:I> + <var:N1> | . This transfers $ \{ <var:v> = <var:W> \land <var:N1> = <nat:5> * <var:W> \land <var:N0> = <nat:2> \land <var:I> = <nat:1> * <var:W> ^ <nat:2> \} $ toward the condition $ \{ <var:v> = <var:W> \land <var:N0> = <nat:2> \land <var:I> = <nat:1> * <var:W> ^ <nat:2> + <nat:5> * <var:W> \} $ . This is rigorously given through the assignment scheme given by Hoare logic . Next , we see the variable assignmet command \verb | <var:I> := <var:I> + <var:N0> | . This moves the precondition $ \{ <var:v> = <var:W> \land <var:N0> = <nat:2> \land <var:I> = <nat:1> * <var:W> ^ <nat:2> + <nat:5> * <var:W> \} $ to the postcondition $ \{ <var:v> = <var:W> \land <var:I> = <nat:1> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:v> = <var:W> }} <var:N1> := <var:v> ; <var:N2> := <var:N1> * <var:v> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:5> ; <var:N2> := <var:N2> * <nat:1> ; <var:I> := <var:N2> <var:I> := <var:I> + <var:N1> <var:I> := <var:I> + <var:N0> {{ <var:I> = <nat:1> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:W> /\ <var:N1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:W> /\ <var:N1> = <var:W> /\ <var:N2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:W> /\ <var:N1> = <var:W> /\ <var:N2> = <var:W> ^ <nat:2> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:W> /\ <var:N1> = <nat:5> * <var:W> /\ <var:N2> = <var:W> ^ <nat:2> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:W> /\ <var:N1> = <nat:5> * <var:W> /\ <var:N2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:W> /\ <var:N1> = <nat:5> * <var:W> /\ <var:N0> = <nat:2> /\ <var:I> = <nat:1> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:W> /\ <var:N0> = <nat:2> /\ <var:I> = <nat:1> * <var:W> ^ <nat:2> + <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:W> /\ <var:I> = <nat:1> * <var:W> ^ <nat:2> + <nat:5> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 