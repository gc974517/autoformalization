\begin{document} \begin{theorem} We define the following set of commands as follows \begin{verbatim} <var:N0> := <nat:9> ; <var:N1> := <nat:7> ; <var:N1> := <var:N1> * <var:u> ; <var:N2> := <nat:6> ; <var:N2> := <var:N2> * <var:u> ; <var:N2> := <var:N2> * <var:u> ; <var:i> := <var:N2> ; <var:i> := <var:i> + <var:N1> ; <var:i> := <var:i> + <var:N0> \end{verbatim} Allow for every positive coefficients $ <var:s> $ it to be that $ <var:u> = <var:s> $ ahead of interpreting this program it follows that $ <var:i> = <nat:6> \cdot <var:s> ^ <nat:2> + <nat:7> \cdot <var:s> + <nat:9> $ . \end{theorem} \begin{proof} The application of Hoare techniques gives : \begin{eqnarray} \{ <var:u> = <var:s> \} \\ <var:N0> := <nat:9> ; \\ \{ <var:u> = <var:s> \land <var:N0> = <nat:9> \} \\ <var:N1> := <nat:7> ; \\ \{ <var:u> = <var:s> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \} \\ <var:N1> := <var:N1> * <var:u> ; \\ \{ <var:u> = <var:s> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \times <var:s> \} \\ <var:N2> := <nat:6> ; \\ \{ <var:u> = <var:s> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \times <var:s> \land <var:N2> = <nat:6> \} \\ <var:N2> := <var:N2> * <var:u> ; \\ \{ <var:u> = <var:s> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \times <var:s> \land <var:N2> = <nat:6> \times <var:s> \} \\ <var:N2> := <var:N2> * <var:u> ; \\ \{ <var:u> = <var:s> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \times <var:s> \land <var:N2> = <nat:6> \times <var:s> ^ <nat:2> \} \end{eqnarray} Allowing interpreting this set of commands gives : \begin{eqnarray} <var:i> := <var:N2> ; \\ \{ <var:u> = <var:s> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \times <var:s> \land <var:i> = <nat:6> \times <var:s> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:N1> ; \\ \{ <var:u> = <var:s> \land <var:N0> = <nat:9> \land <var:i> = <nat:6> \times <var:s> ^ <nat:2> + <nat:7> \times <var:s> \} \\ <var:i> := <var:i> + <var:N0> \\ \{ <var:u> = <var:s> \land <var:i> = <nat:6> \times <var:s> ^ <nat:2> + <nat:7> \times <var:s> + <nat:9> \} \end{eqnarray} Thusly , the list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:u> = <var:s> }} <var:N0> := <nat:9> ; <var:N1> := <nat:7> ; <var:N1> := <var:N1> * <var:u> ; <var:N2> := <nat:6> ; <var:N2> := <var:N2> * <var:u> ; <var:N2> := <var:N2> * <var:u> ; <var:i> := <var:N2> ; <var:i> := <var:i> + <var:N1> ; <var:i> := <var:i> + <var:N0> {{ <var:i> = <nat:6> * <var:s> ^ <nat:2> + <nat:7> * <var:s> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:s> /\ <var:N2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:s> /\ <var:N2> = <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:s> /\ <var:N2> = <nat:6> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:s> /\ <var:i> = <nat:6> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:N0> = <nat:9> /\ <var:i> = <nat:6> * <var:s> ^ <nat:2> + <nat:7> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:s> /\ <var:i> = <nat:6> * <var:s> ^ <nat:2> + <nat:7> * <var:s> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 