\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:k1> := <var:z> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:6> ; <var:C> := <var:k1> <var:C> := <var:C> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:z> = <var:Z> $ prior to the execution of our set of instructions it follows that we see $ <var:C> = <nat:6> \times <var:Z> + <nat:4> $ when series of commands has finished executing . \end{theorem} \begin{proof} The method of proof for the set of instructions is evident by standard Hoare reasoning . Stepping through , we have the line giving $ <var:z> $ toward $ <var:k1>$ . This line moves the precondition $ \{ <var:z> = <var:Z> \} $ as $ \{ <var:z> = <var:Z> \land <var:k1> = <var:Z> \} $ . Stepping through , we see the environment update code \verb | <var:k0> := <nat:4> ; | . This code forwards $ \{ <var:z> = <var:Z> \land <var:k1> = <var:Z> \} $ to the postcondition $ \{ <var:z> = <var:Z> \land <var:k1> = <var:Z> \land <var:k0> = <nat:4> \} $ . Advancing to the next command seen in the segment of code , we see the assignment line letting $ <var:k1> * <nat:6> $ toward $ <var:k1>$ . This forwards the condition $ \{ <var:z> = <var:Z> \land <var:k1> = <var:Z> \land <var:k0> = <nat:4> \} $ into the condition $ \{ <var:z> = <var:Z> \land <var:k1> = <nat:6> * <var:Z> \land <var:k0> = <nat:4> \} $ . This is shown to be logically sound through the assignment law defined in usual Hoare techniques . Now , we have the environment update line letting $ <var:k1$ toward $ <var:C>$ . This statement redefines $ \{ <var:z> = <var:Z> \land <var:k1> = <nat:6> * <var:Z> \land <var:k0> = <nat:4> \} $ to the condition $ \{ <var:z> = <var:Z> \land <var:k0> = <nat:4> \land <var:C> = <nat:6> * <var:Z> \} $ . This is known to be sound through the assignment scheme given by usual Hoare techniques . Looking at the subsequent piece of code contained in the program , we have the variable binding statement \verb | <var:C> := <var:C> + <var:k0> | . This statement transfers the precondition $ \{ <var:z> = <var:Z> \land <var:k0> = <nat:4> \land <var:C> = <nat:6> * <var:Z> \} $ toward the condition $ \{ <var:z> = <var:Z> \land <var:C> = <nat:6> * <var:Z> + <nat:4> \} $ . This is rigorously given using the assignment scheme defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k1> := <var:z> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:6> ; <var:C> := <var:k1> <var:C> := <var:C> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:z> = <var:Z> }} <def:poly> {{ <var:C> = <nat:6> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:k1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:k1> = <var:Z> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:k1> = <nat:6> * <var:Z> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:k0> = <nat:4> /\ <var:C> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:C> = <nat:6> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 