\begin{document} \begin{theorem} Take the following program in \emph{Imp} such that \begin{verbatim} <var:z> := <nat:3> ; <var:z> := <nat:4> + <var:z> * <var:w> ; <var:z> := <nat:4> + <var:z> * <var:w> ; <var:z> := <nat:3> + <var:z> * <var:w> \end{verbatim} Assume that we have $ <var:w> = <var:b> $ ahead of interpreting the list of commands , then we have $ <var:z> = <nat:3> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:3> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives : \begin{eqnarray} \{ <var:w> = <var:b> \} \\ <var:z> := <nat:3> ; \\ \{ <var:w> = <var:b> \land <var:z> = <nat:3> \} \\ <var:z> := <nat:4> + <var:z> * <var:w> ; \\ \{ <var:w> = <var:b> \land <var:z> = <nat:3> \times <var:b> + <nat:4> \} \\ <var:z> := <nat:4> + <var:z> * <var:w> ; \\ \{ <var:w> = <var:b> \land <var:z> = <nat:3> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:4> \} \\ <var:z> := <nat:3> + <var:z> * <var:w> \\ \{ <var:w> = <var:b> \land <var:z> = <nat:3> \times <var:b> ^ <nat:3> + <nat:4> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:3> \} \end{eqnarray} Therefore , this set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:w> = <var:b> }} <var:z> := <nat:3> ; <var:z> := <nat:4> + <var:z> * <var:w> ; <var:z> := <nat:4> + <var:z> * <var:w> ; <var:z> := <nat:3> + <var:z> * <var:w> {{ <var:z> = <nat:3> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:b> /\ <var:z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:b> /\ <var:z> = <nat:3> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:b> /\ <var:z> = <nat:3> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:b> /\ <var:z> = <nat:3> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 