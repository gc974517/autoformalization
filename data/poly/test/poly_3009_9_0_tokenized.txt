\begin{document} \begin{theorem} Take a set of commands as \begin{verbatim} <var:m0> := <nat:3> ; <var:m1> := <nat:9> ; <var:m1> := <var:m1> * <var:G> ; <var:m2> := <nat:9> ; <var:m2> := <var:m2> * <var:G> ; <var:m2> := <var:m2> * <var:G> ; <var:j> := <var:m2> ; <var:j> := <var:j> + <var:m1> ; <var:j> := <var:j> + <var:m0> \end{verbatim} Allowing ( given any positive integers $ <var:g> $ ) that $ <var:G> = <var:g> $ ahead of executing our list of commands , it must be that we see $ <var:j> = <nat:9> \times <var:g> ^ <nat:2> + <nat:9> \times <var:g> + <nat:3> $ when set of commands has terminated . \end{theorem} \begin{proof} Proving correctness for the series of commands can be accomplished with standard Hoare reasoning . Shifting focus toward the upcoming bits of codeseen in our series of commands , we have \verb | { <var:G> = <var:g> } <var:m0> := <nat:3> { <var:G> = <var:g> \land <var:m0> = <nat:3> } | , \verb | { <var:G> = <var:g> \land <var:m0> = <nat:3> } <var:m1> := <nat:9> { <var:G> = <var:g> \land <var:m0> = <nat:3> \land <var:m1> = <nat:9> } | , \verb | { <var:G> = <var:g> \land <var:m0> = <nat:3> \land <var:m1> = <nat:9> } <var:m1> := <var:m1> * <var:G> { <var:G> = <var:g> \land <var:m0> = <nat:3> \land <var:m1> = <nat:9> \cdot <var:g> } | , \verb | { <var:G> = <var:g> \land <var:m0> = <nat:3> \land <var:m1> = <nat:9> \cdot <var:g> } <var:m2> := <nat:9> { <var:G> = <var:g> \land <var:m0> = <nat:3> \land <var:m1> = <nat:9> \cdot <var:g> \land <var:m2> = <nat:9> } | and \verb | { <var:G> = <var:g> \land <var:m0> = <nat:3> \land <var:m1> = <nat:9> \cdot <var:g> \land <var:m2> = <nat:9> } <var:m2> := <var:m2> * <var:G> { <var:G> = <var:g> \land <var:m0> = <nat:3> \land <var:m1> = <nat:9> \cdot <var:g> \land <var:m2> = <nat:9> \cdot <var:g> } | . This is sound with the binding rule defined in standard Hoare techniques . Going to the next step , we have \verb | { <var:G> = <var:g> } <var:m0> := <nat:3> { <var:G> = <var:g> \land <var:m0> = <nat:3> } | . Moving forward to the next step , \verb | { <var:G> = <var:g> } <var:m0> := <nat:3> { <var:G> = <var:g> \land <var:m0> = <nat:3> } | and \verb | { <var:G> = <var:g> \land <var:m0> = <nat:3> } <var:m1> := <nat:9> { <var:G> = <var:g> \land <var:m0> = <nat:3> \land <var:m1> = <nat:9> } | . This is sound with the variable binding rule defined in typical Hoare logic . Now , \verb | { <var:G> = <var:g> } <var:m0> := <nat:3> { <var:G> = <var:g> \land <var:m0> = <nat:3> } | . This is shown to be logically sound through the inference rule given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:G> = <var:g> }} <var:m0> := <nat:3> ; <var:m1> := <nat:9> ; <var:m1> := <var:m1> * <var:G> ; <var:m2> := <nat:9> ; <var:m2> := <var:m2> * <var:G> ; <var:m2> := <var:m2> * <var:G> ; <var:j> := <var:m2> ; <var:j> := <var:j> + <var:m1> ; <var:j> := <var:j> + <var:m0> {{ <var:j> = <nat:9> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:9> * <var:g> /\ <var:m2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:9> * <var:g> /\ <var:m2> = <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:9> * <var:g> /\ <var:m2> = <nat:9> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:9> * <var:g> /\ <var:j> = <nat:9> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:m0> = <nat:3> /\ <var:j> = <nat:9> * <var:g> ^ <nat:2> + <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:j> = <nat:9> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 