\begin{document} \begin{theorem} We define a series of commands as \begin{verbatim} <var:j1> := <var:A> ; <var:j2> := <var:j1> * <var:A> ; <var:j3> := <var:j2> * <var:A> ; <var:j0> := <nat:3> ; <var:j1> := <var:j1> * <nat:6> ; <var:j2> := <var:j2> * <nat:7> ; <var:j3> := <var:j3> * <nat:3> ; <var:o> := <var:j3> <var:o> := <var:o> + <var:j2> <var:o> := <var:o> + <var:j1> <var:o> := <var:o> + <var:j0> \end{verbatim} Allowing it to hold that $ <var:A> = <var:H> $ prior to the evaluation of our segment of code , it must be that we have $ <var:o> = <nat:3> \cdot <var:H> ^ <nat:3> + <nat:7> \cdot <var:H> ^ <nat:2> + <nat:6> \cdot <var:H> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions can be accomplished with usual Hoare techniques . Moving forward to the next step , we have the assignment code assigning $ <var:A> $ to $ <var:j1>$ . This transfers the condition $ \{ <var:A> = <var:H> \} $ toward the condition $ \{ <var:A> = <var:H> \land <var:j1> = <var:H> \} $ . Observing the subsequent piece of code in the set of commands , we see the line \verb | <var:j2> := <var:j1> * <var:A> ; | . This redefines $ \{ <var:A> = <var:H> \land <var:j1> = <var:H> \} $ toward $ \{ <var:A> = <var:H> \land <var:j1> = <var:H> \land <var:j2> = <var:H> ^ <nat:2> \} $ . Looking at the upcoming command in our series of instructions , we have the assignment line assigning $ <var:j2> * <var:A> $ as $ <var:j3>$ . This forwards $ \{ <var:A> = <var:H> \land <var:j1> = <var:H> \land <var:j2> = <var:H> ^ <nat:2> \} $ toward $ \{ <var:A> = <var:H> \land <var:j1> = <var:H> \land <var:j2> = <var:H> ^ <nat:2> \land <var:j3> = <var:H> ^ <nat:3> \} $ . This is rigorously given through the assignment inference rule given by typical Hoare reasoning . Keeping momentum , the variable assignmet statement letting $ <nat:3> $ to $ <var:j0>$ . This takes the condition $ \{ <var:A> = <var:H> \land <var:j1> = <var:H> \land <var:j2> = <var:H> ^ <nat:2> \land <var:j3> = <var:H> ^ <nat:3> \} $ to the condition $ \{ <var:A> = <var:H> \land <var:j1> = <var:H> \land <var:j2> = <var:H> ^ <nat:2> \land <var:j3> = <var:H> ^ <nat:3> \land <var:j0> = <nat:3> \} $ . This is sound by the assignment law obtained from usual Hoare techniques . Moving forward , we see the line \verb | <var:j1> := <var:j1> * <nat:6> ; | . This code redefines the condition $ \{ <var:A> = <var:H> \land <var:j1> = <var:H> \land <var:j2> = <var:H> ^ <nat:2> \land <var:j3> = <var:H> ^ <nat:3> \land <var:j0> = <nat:3> \} $ as the condition $ \{ <var:A> = <var:H> \land <var:j1> = <nat:6> \cdot <var:H> \land <var:j2> = <var:H> ^ <nat:2> \land <var:j3> = <var:H> ^ <nat:3> \land <var:j0> = <nat:3> \} $ . Immediately after , we see the variable assignmet command \verb | <var:j2> := <var:j2> * <nat:7> ; | . This line forwards $ \{ <var:A> = <var:H> \land <var:j1> = <nat:6> \cdot <var:H> \land <var:j2> = <var:H> ^ <nat:2> \land <var:j3> = <var:H> ^ <nat:3> \land <var:j0> = <nat:3> \} $ into the postcondition $ \{ <var:A> = <var:H> \land <var:j1> = <nat:6> \cdot <var:H> \land <var:j2> = <nat:7> \cdot <var:H> ^ <nat:2> \land <var:j3> = <var:H> ^ <nat:3> \land <var:j0> = <nat:3> \} $ . This is shown using the assignment scheme obtained from typical Hoare logic . Stepping forward , we have the assignment code yielding $ <var:j3> * <nat:3> $ toward $ <var:j3>$ . This forwards $ \{ <var:A> = <var:H> \land <var:j1> = <nat:6> \cdot <var:H> \land <var:j2> = <nat:7> \cdot <var:H> ^ <nat:2> \land <var:j3> = <var:H> ^ <nat:3> \land <var:j0> = <nat:3> \} $ into $ \{ <var:A> = <var:H> \land <var:j1> = <nat:6> \cdot <var:H> \land <var:j2> = <nat:7> \cdot <var:H> ^ <nat:2> \land <var:j3> = <nat:3> \cdot <var:H> ^ <nat:3> \land <var:j0> = <nat:3> \} $ . This is known to be sound with the assignment inference rule obtained from usual Hoare techniques . Taking another step toward the subsequent line in the segment of code , we have the environment update code binding $ <var:j3$ toward $ <var:o>$ . This line takes $ \{ <var:A> = <var:H> \land <var:j1> = <nat:6> \cdot <var:H> \land <var:j2> = <nat:7> \cdot <var:H> ^ <nat:2> \land <var:j3> = <nat:3> \cdot <var:H> ^ <nat:3> \land <var:j0> = <nat:3> \} $ into the condition $ \{ <var:A> = <var:H> \land <var:j1> = <nat:6> \cdot <var:H> \land <var:j2> = <nat:7> \cdot <var:H> ^ <nat:2> \land <var:j0> = <nat:3> \land <var:o> = <nat:3> \cdot <var:H> ^ <nat:3> \} $ . Going forward , the variable assignmet line defining $ <var:o> + <var:j2$ as $ <var:o>$ . This redefines $ \{ <var:A> = <var:H> \land <var:j1> = <nat:6> \cdot <var:H> \land <var:j2> = <nat:7> \cdot <var:H> ^ <nat:2> \land <var:j0> = <nat:3> \land <var:o> = <nat:3> \cdot <var:H> ^ <nat:3> \} $ into the condition $ \{ <var:A> = <var:H> \land <var:j1> = <nat:6> \cdot <var:H> \land <var:j0> = <nat:3> \land <var:o> = <nat:3> \cdot <var:H> ^ <nat:3> + <nat:7> \cdot <var:H> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment scheme defined by standard Hoare reasoning . After , we see the environment update statement \verb | <var:o> := <var:o> + <var:j1> | . This line forwards $ \{ <var:A> = <var:H> \land <var:j1> = <nat:6> \cdot <var:H> \land <var:j0> = <nat:3> \land <var:o> = <nat:3> \cdot <var:H> ^ <nat:3> + <nat:7> \cdot <var:H> ^ <nat:2> \} $ toward the condition $ \{ <var:A> = <var:H> \land <var:j0> = <nat:3> \land <var:o> = <nat:3> \cdot <var:H> ^ <nat:3> + <nat:7> \cdot <var:H> ^ <nat:2> + <nat:6> \cdot <var:H> \} $ . This is shown by the assignment scheme defined in standard Hoare reasoning . Taking a look at the next piece of code seen in the program , we have the environment update code \verb | <var:o> := <var:o> + <var:j0> | . This command moves $ \{ <var:A> = <var:H> \land <var:j0> = <nat:3> \land <var:o> = <nat:3> \cdot <var:H> ^ <nat:3> + <nat:7> \cdot <var:H> ^ <nat:2> + <nat:6> \cdot <var:H> \} $ toward the postcondition $ \{ <var:A> = <var:H> \land <var:o> = <nat:3> \cdot <var:H> ^ <nat:3> + <nat:7> \cdot <var:H> ^ <nat:2> + <nat:6> \cdot <var:H> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:A> = <var:H> }} <var:j1> := <var:A> ; <var:j2> := <var:j1> * <var:A> ; <var:j3> := <var:j2> * <var:A> ; <var:j0> := <nat:3> ; <var:j1> := <var:j1> * <nat:6> ; <var:j2> := <var:j2> * <nat:7> ; <var:j3> := <var:j3> * <nat:3> ; <var:o> := <var:j3> <var:o> := <var:o> + <var:j2> <var:o> := <var:o> + <var:j1> <var:o> := <var:o> + <var:j0> {{ <var:o> = <nat:3> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:6> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:j1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:j1> = <var:H> /\ <var:j2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:j1> = <var:H> /\ <var:j2> = <var:H> ^ <nat:2> /\ <var:j3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:j1> = <var:H> /\ <var:j2> = <var:H> ^ <nat:2> /\ <var:j3> = <var:H> ^ <nat:3> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:j1> = <nat:6> * <var:H> /\ <var:j2> = <var:H> ^ <nat:2> /\ <var:j3> = <var:H> ^ <nat:3> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:j1> = <nat:6> * <var:H> /\ <var:j2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:j3> = <var:H> ^ <nat:3> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:j1> = <nat:6> * <var:H> /\ <var:j2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:j3> = <nat:3> * <var:H> ^ <nat:3> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:j1> = <nat:6> * <var:H> /\ <var:j2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:j0> = <nat:3> /\ <var:o> = <nat:3> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:j1> = <nat:6> * <var:H> /\ <var:j0> = <nat:3> /\ <var:o> = <nat:3> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:j0> = <nat:3> /\ <var:o> = <nat:3> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:6> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:o> = <nat:3> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:6> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 