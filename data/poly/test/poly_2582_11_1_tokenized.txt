\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q1> := <var:k> ; <var:q2> := <var:q1> * <var:k> ; <var:q3> := <var:q2> * <var:k> ; <var:q0> := <nat:7> ; <var:q1> := <var:q1> * <nat:1> ; <var:q2> := <var:q2> * <nat:8> ; <var:q3> := <var:q3> * <nat:3> ; <var:r> := <var:q3> <var:r> := <var:r> + <var:q2> <var:r> := <var:r> + <var:q1> <var:r> := <var:r> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Given that we have $ <var:k> = <var:B> $ prior to executing this code it follows that $ <var:r> = <nat:3> \cdot <var:B> ^ <nat:3> + <nat:8> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> + <nat:7> $ when code segment exits . \end{theorem} \begin{proof} Applying Hoare reasoning results in : \begin{eqnarray} \{ <var:k> = <var:B> \} \\ <var:q1> := <var:k> ; \\ \{ <var:k> = <var:B> \land <var:q1> = <var:B> \} \\ <var:q2> := <var:q1> * <var:k> ; \\ \{ <var:k> = <var:B> \land <var:q1> = <var:B> \land <var:q2> = <var:B> ^ <nat:2> \} \\ <var:q3> := <var:q2> * <var:k> ; \\ \{ <var:k> = <var:B> \land <var:q1> = <var:B> \land <var:q2> = <var:B> ^ <nat:2> \land <var:q3> = <var:B> ^ <nat:3> \} \\ <var:q0> := <nat:7> ; \\ \{ <var:k> = <var:B> \land <var:q1> = <var:B> \land <var:q2> = <var:B> ^ <nat:2> \land <var:q3> = <var:B> ^ <nat:3> \land <var:q0> = <nat:7> \} \\ <var:q1> := <var:q1> * <nat:1> ; \\ \{ <var:k> = <var:B> \land <var:q1> = <nat:1> \times <var:B> \land <var:q2> = <var:B> ^ <nat:2> \land <var:q3> = <var:B> ^ <nat:3> \land <var:q0> = <nat:7> \} \\ <var:q2> := <var:q2> * <nat:8> ; \\ \{ <var:k> = <var:B> \land <var:q1> = <nat:1> \times <var:B> \land <var:q2> = <nat:8> \times <var:B> ^ <nat:2> \land <var:q3> = <var:B> ^ <nat:3> \land <var:q0> = <nat:7> \} \\ <var:q3> := <var:q3> * <nat:3> ; \\ \{ <var:k> = <var:B> \land <var:q1> = <nat:1> \times <var:B> \land <var:q2> = <nat:8> \times <var:B> ^ <nat:2> \land <var:q3> = <nat:3> \times <var:B> ^ <nat:3> \land <var:q0> = <nat:7> \} \\ <var:r> := <var:q3> \\ \{ <var:k> = <var:B> \land <var:q1> = <nat:1> \times <var:B> \land <var:q2> = <nat:8> \times <var:B> ^ <nat:2> \land <var:q0> = <nat:7> \land <var:r> = <nat:3> \times <var:B> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:q2> \\ \{ <var:k> = <var:B> \land <var:q1> = <nat:1> \times <var:B> \land <var:q0> = <nat:7> \land <var:r> = <nat:3> \times <var:B> ^ <nat:3> + <nat:8> \times <var:B> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:q1> \\ \{ <var:k> = <var:B> \land <var:q0> = <nat:7> \land <var:r> = <nat:3> \times <var:B> ^ <nat:3> + <nat:8> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> \} \\ <var:r> := <var:r> + <var:q0> \\ \{ <var:k> = <var:B> \land <var:r> = <nat:3> \times <var:B> ^ <nat:3> + <nat:8> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:7> \} \end{eqnarray} Therefore , the set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <def:poly> := <var:q1> := <var:k> ; <var:q2> := <var:q1> * <var:k> ; <var:q3> := <var:q2> * <var:k> ; <var:q0> := <nat:7> ; <var:q1> := <var:q1> * <nat:1> ; <var:q2> := <var:q2> * <nat:8> ; <var:q3> := <var:q3> * <nat:3> ; <var:r> := <var:q3> <var:r> := <var:r> + <var:q2> <var:r> := <var:r> + <var:q1> <var:r> := <var:r> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:k> = <var:B> }} <def:poly> {{ <var:r> = <nat:3> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:q1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:q1> = <var:B> /\ <var:q2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:q1> = <var:B> /\ <var:q2> = <var:B> ^ <nat:2> /\ <var:q3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:q1> = <var:B> /\ <var:q2> = <var:B> ^ <nat:2> /\ <var:q3> = <var:B> ^ <nat:3> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:q1> = <nat:1> * <var:B> /\ <var:q2> = <var:B> ^ <nat:2> /\ <var:q3> = <var:B> ^ <nat:3> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:q1> = <nat:1> * <var:B> /\ <var:q2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:q3> = <var:B> ^ <nat:3> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:q1> = <nat:1> * <var:B> /\ <var:q2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:q3> = <nat:3> * <var:B> ^ <nat:3> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:q1> = <nat:1> * <var:B> /\ <var:q2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:q0> = <nat:7> /\ <var:r> = <nat:3> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:q1> = <nat:1> * <var:B> /\ <var:q0> = <nat:7> /\ <var:r> = <nat:3> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:q0> = <nat:7> /\ <var:r> = <nat:3> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:B> /\ <var:r> = <nat:3> * <var:B> ^ <nat:3> + <nat:8> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 