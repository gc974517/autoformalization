\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} : \begin{verbatim} <var:V> := <nat:3> ; <var:V> := <nat:2> + <var:V> * <var:b> ; <var:V> := <nat:2> + <var:V> * <var:b> \end{verbatim} Allowing $ <var:b> = <var:f> $ before interpreting the code segment it holds that we have $ <var:V> = <nat:3> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:2> $ once segment of code has finished . \end{theorem} \begin{proof} Notice the below decorated segment of code . \begin{eqnarray} \{ <var:b> = <var:f> \} \\ <var:V> := <nat:3> ; \\ \{ <var:b> = <var:f> \land <var:V> = <nat:3> \} \\ <var:V> := <nat:2> + <var:V> * <var:b> ; \\ \{ <var:b> = <var:f> \land <var:V> = <nat:3> \times <var:f> + <nat:2> \} \\ <var:V> := <nat:2> + <var:V> * <var:b> \\ \{ <var:b> = <var:f> \land <var:V> = <nat:3> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:b> = <var:f> }} <var:V> := <nat:3> ; <var:V> := <nat:2> + <var:V> * <var:b> ; <var:V> := <nat:2> + <var:V> * <var:b> {{ <var:V> = <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:V> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:V> = <nat:3> * <var:f> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:V> = <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 