\begin{document} \begin{theorem} We define the following code as \begin{verbatim} <var:a0> := <nat:9> ; <var:f> := <var:a0> \end{verbatim} Given given some integers $ <var:j> $ it to be that $ <var:J> = <var:j> $ before executing our list of instructions , it follows that we have $ <var:f> = <nat:9> $ . \end{theorem} \begin{proof} The course of logic for this segment of code is demonstrated by this decorated code segment . \begin{eqnarray} \{ <var:J> = <var:j> \} \\ <var:a0> := <nat:9> ; \\ \{ <var:J> = <var:j> \land <var:a0> = <nat:9> \} \\ <var:f> := <var:a0> \\ \{ <var:J> = <var:j> \land <var:f> = <nat:9> \} \end{eqnarray} Utilizing Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:J> = <var:j> }} <var:a0> := <nat:9> ; <var:f> := <var:a0> {{ <var:f> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:j> /\ <var:a0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:j> /\ <var:f> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 