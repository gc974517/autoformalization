\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:C0> := <nat:2> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:m> ; <var:C2> := <nat:1> ; <var:C2> := <var:C2> * <var:m> ; <var:C2> := <var:C2> * <var:m> ; <var:C3> := <nat:1> ; <var:C3> := <var:C3> * <var:m> ; <var:C3> := <var:C3> * <var:m> ; <var:C3> := <var:C3> * <var:m> ; <var:r> := <var:C3> ; <var:r> := <var:r> + <var:C2> ; <var:r> := <var:r> + <var:C1> ; <var:r> := <var:r> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> . Allow that we have $ <var:m> = <var:N> $ ( for any natural numbers $ <var:N> $ ) before the execution of the set of commands , it must be that $ <var:r> = <nat:1> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> $ when series of instructions exits . \end{theorem} \begin{proof} Applying usual Hoare reasoning results in : \begin{eqnarray} \{ <var:m> = <var:N> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:m> = <var:N> \land <var:C0> = <nat:2> \} \\ <var:C1> := <nat:2> ; \\ \{ <var:m> = <var:N> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \} \\ <var:C1> := <var:C1> * <var:m> ; \\ \{ <var:m> = <var:N> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \times <var:N> \} \\ <var:C2> := <nat:1> ; \\ \{ <var:m> = <var:N> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \times <var:N> \land <var:C2> = <nat:1> \} \\ <var:C2> := <var:C2> * <var:m> ; \\ \{ <var:m> = <var:N> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \times <var:N> \land <var:C2> = <nat:1> \times <var:N> \} \\ <var:C2> := <var:C2> * <var:m> ; \\ \{ <var:m> = <var:N> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \times <var:N> \land <var:C2> = <nat:1> \times <var:N> ^ <nat:2> \} \\ <var:C3> := <nat:1> ; \\ \{ <var:m> = <var:N> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \times <var:N> \land <var:C2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:C3> = <nat:1> \} \\ <var:C3> := <var:C3> * <var:m> ; \\ \{ <var:m> = <var:N> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \times <var:N> \land <var:C2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:C3> = <nat:1> \times <var:N> \} \end{eqnarray} Furthering executing our program gives us : \begin{eqnarray} <var:C3> := <var:C3> * <var:m> ; \\ \{ <var:m> = <var:N> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \times <var:N> \land <var:C2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:C3> = <nat:1> \times <var:N> ^ <nat:2> \} \\ <var:C3> := <var:C3> * <var:m> ; \\ \{ <var:m> = <var:N> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \times <var:N> \land <var:C2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:C3> = <nat:1> \times <var:N> ^ <nat:3> \} \\ <var:r> := <var:C3> ; \\ \{ <var:m> = <var:N> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \times <var:N> \land <var:C2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:r> = <nat:1> \times <var:N> ^ <nat:3> \} \\ <var:r> := <var:r> + <var:C2> ; \\ \{ <var:m> = <var:N> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \times <var:N> \land <var:r> = <nat:1> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> \} \\ <var:r> := <var:r> + <var:C1> ; \\ \{ <var:m> = <var:N> \land <var:C0> = <nat:2> \land <var:r> = <nat:1> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> \} \\ <var:r> := <var:r> + <var:C0> \\ \{ <var:m> = <var:N> \land <var:r> = <nat:1> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:2> \} \end{eqnarray} Thusly , the list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <def:poly> := <var:C0> := <nat:2> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:m> ; <var:C2> := <nat:1> ; <var:C2> := <var:C2> * <var:m> ; <var:C2> := <var:C2> * <var:m> ; <var:C3> := <nat:1> ; <var:C3> := <var:C3> * <var:m> ; <var:C3> := <var:C3> * <var:m> ; <var:C3> := <var:C3> * <var:m> ; <var:r> := <var:C3> ; <var:r> := <var:r> + <var:C2> ; <var:r> := <var:r> + <var:C1> ; <var:r> := <var:r> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:m> = <var:N> }} <def:poly> {{ <var:r> = <nat:1> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:N> /\ <var:C2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:N> /\ <var:C2> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:N> /\ <var:C2> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:N> /\ <var:C2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:C3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:N> /\ <var:C2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:C3> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:N> /\ <var:C2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:C3> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:N> /\ <var:C2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:C3> = <nat:1> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:N> /\ <var:C2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:r> = <nat:1> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:N> /\ <var:r> = <nat:1> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:C0> = <nat:2> /\ <var:r> = <nat:1> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:r> = <nat:1> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 