\begin{document} \begin{theorem} Let the following segment of code as follows \begin{verbatim} <var:r1> := <var:q> ; <var:r2> := <var:r1> * <var:q> ; <var:r0> := <nat:8> ; <var:r1> := <var:r1> * <nat:1> ; <var:r2> := <var:r2> * <nat:7> ; <var:O> := <var:r2> <var:O> := <var:O> + <var:r1> <var:O> := <var:O> + <var:r0> \end{verbatim} Assuming that we have $ <var:q> = <var:N> $ before evaluating the set of commands , it follows that we see $ <var:O> = <nat:7> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:8> $ after list of instructions executes . \end{theorem} \begin{proof} Using standard Hoare techniques returns : \begin{eqnarray} \{ <var:q> = <var:N> \} \\ <var:r1> := <var:q> ; \\ \{ <var:q> = <var:N> \land <var:r1> = <var:N> \} \\ <var:r2> := <var:r1> * <var:q> ; \\ \{ <var:q> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <var:N> ^ <nat:2> \} \\ <var:r0> := <nat:8> ; \\ \{ <var:q> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <var:N> ^ <nat:2> \land <var:r0> = <nat:8> \} \\ <var:r1> := <var:r1> * <nat:1> ; \\ \{ <var:q> = <var:N> \land <var:r1> = <nat:1> \times <var:N> \land <var:r2> = <var:N> ^ <nat:2> \land <var:r0> = <nat:8> \} \\ <var:r2> := <var:r2> * <nat:7> ; \\ \{ <var:q> = <var:N> \land <var:r1> = <nat:1> \times <var:N> \land <var:r2> = <nat:7> \times <var:N> ^ <nat:2> \land <var:r0> = <nat:8> \} \\ <var:O> := <var:r2> \\ \{ <var:q> = <var:N> \land <var:r1> = <nat:1> \times <var:N> \land <var:r0> = <nat:8> \land <var:O> = <nat:7> \times <var:N> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:r1> \\ \{ <var:q> = <var:N> \land <var:r0> = <nat:8> \land <var:O> = <nat:7> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> \} \\ <var:O> := <var:O> + <var:r0> \\ \{ <var:q> = <var:N> \land <var:O> = <nat:7> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:8> \} \end{eqnarray} Given the preceding argument , the program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:q> = <var:N> }} <var:r1> := <var:q> ; <var:r2> := <var:r1> * <var:q> ; <var:r0> := <nat:8> ; <var:r1> := <var:r1> * <nat:1> ; <var:r2> := <var:r2> * <nat:7> ; <var:O> := <var:r2> <var:O> := <var:O> + <var:r1> <var:O> := <var:O> + <var:r0> {{ <var:O> = <nat:7> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:r1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:r1> = <var:N> /\ <var:r2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:r1> = <var:N> /\ <var:r2> = <var:N> ^ <nat:2> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:r1> = <nat:1> * <var:N> /\ <var:r2> = <var:N> ^ <nat:2> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:r1> = <nat:1> * <var:N> /\ <var:r2> = <nat:7> * <var:N> ^ <nat:2> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:r1> = <nat:1> * <var:N> /\ <var:r0> = <nat:8> /\ <var:O> = <nat:7> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:r0> = <nat:8> /\ <var:O> = <nat:7> * <var:N> ^ <nat:2> + <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:N> /\ <var:O> = <nat:7> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 