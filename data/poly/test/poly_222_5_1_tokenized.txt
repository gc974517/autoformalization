\begin{document} \begin{theorem} Let the following set of commands as \begin{verbatim} <var:C1> := <var:M> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:3> ; <var:z> := <var:C1> <var:z> := <var:z> + <var:C0> \end{verbatim} Assuming it to hold that $ <var:M> = <var:Q> $ prior to the execution of the list of commands , it follows that we see $ <var:z> = <nat:3> * <var:Q> + <nat:3> $ . \end{theorem} \begin{proof} Applying Hoare techniques gives : \begin{eqnarray} \{ <var:M> = <var:Q> \} \\ <var:C1> := <var:M> ; \\ \{ <var:M> = <var:Q> \land <var:C1> = <var:Q> \} \\ <var:C0> := <nat:3> ; \\ \{ <var:M> = <var:Q> \land <var:C1> = <var:Q> \land <var:C0> = <nat:3> \} \\ <var:C1> := <var:C1> * <nat:3> ; \\ \{ <var:M> = <var:Q> \land <var:C1> = <nat:3> \times <var:Q> \land <var:C0> = <nat:3> \} \\ <var:z> := <var:C1> \\ \{ <var:M> = <var:Q> \land <var:C0> = <nat:3> \land <var:z> = <nat:3> \times <var:Q> \} \\ <var:z> := <var:z> + <var:C0> \\ \{ <var:M> = <var:Q> \land <var:z> = <nat:3> \times <var:Q> + <nat:3> \} \end{eqnarray} Therefore , our list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:M> = <var:Q> }} <var:C1> := <var:M> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:3> ; <var:z> := <var:C1> <var:z> := <var:z> + <var:C0> {{ <var:z> = <nat:3> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:C1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:C1> = <var:Q> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:C1> = <nat:3> * <var:Q> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:C0> = <nat:3> /\ <var:z> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:z> = <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 