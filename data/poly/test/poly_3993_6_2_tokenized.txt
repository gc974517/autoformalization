\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:B> := <nat:2> ; <var:B> := <nat:4> + <var:B> * <var:Q> ; <var:B> := <nat:2> + <var:B> * <var:Q> ; <var:B> := <nat:1> + <var:B> * <var:Q> ; <var:B> := <nat:4> + <var:B> * <var:Q> ; <var:B> := <nat:3> + <var:B> * <var:Q> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:Q> = <var:J> $ prior to interpreting our segment of code it holds that $ <var:B> = <nat:2> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:2> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:3> $ once list of commands finishes . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions is done using usual Hoare logic . Taking a look at the upcoming statement found in our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:Q> = <var:J> \} & <var:B> := <nat:2> & \{ <var:Q> = <var:J> \land <var:B> = <nat:2> \} \end{tabular} Moving forward to the following step found in our set of commands , \[ \begin{tabular} {rcl} \{ <var:Q> = <var:J> \} & <var:B> := <nat:2> & \{ <var:Q> = <var:J> \land <var:B> = <nat:2> \} \end{tabular} Taking another step toward the proceeding lines contained in our code segment , we see \[ \begin{tabular} {rcl} \{ <var:Q> = <var:J> \} & <var:B> := <nat:2> & \{ <var:Q> = <var:J> \land <var:B> = <nat:2> \} \\ \{ <var:Q> = <var:J> \land <var:B> = <nat:2> \} & <var:B> := <nat:4> + <var:B> * <var:Q> & \{ <var:Q> = <var:J> \land <var:B> = <nat:2> \cdot <var:J> + <nat:4> \} \end{tabular} Honing in on the proceeding statements in our program , we see \[ \begin{tabular} {rcl} \{ <var:Q> = <var:J> \} & <var:B> := <nat:2> & \{ <var:Q> = <var:J> \land <var:B> = <nat:2> \} \\ \{ <var:Q> = <var:J> \land <var:B> = <nat:2> \} & <var:B> := <nat:4> + <var:B> * <var:Q> & \{ <var:Q> = <var:J> \land <var:B> = <nat:2> \cdot <var:J> + <nat:4> \} \end{tabular} This is ensured through the variable update inference rule defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:2> ; <var:B> := <nat:4> + <var:B> * <var:Q> ; <var:B> := <nat:2> + <var:B> * <var:Q> ; <var:B> := <nat:1> + <var:B> * <var:Q> ; <var:B> := <nat:4> + <var:B> * <var:Q> ; <var:B> := <nat:3> + <var:B> * <var:Q> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Q> = <var:J> }} <def:poly> {{ <var:B> = <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:B> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:B> = <nat:2> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:B> = <nat:2> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:B> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:B> = <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:J> /\ <var:B> = <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 