\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:2> ; <var:C> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Allow it to be that $ <var:w> = <var:n> $ ( given any natural coefficients $ <var:n> $ ) ahead of the execution of our list of commands it must be that we see $ <var:C> = <nat:2> $ once series of commands has finished . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be demonstrated with Hoare techniques . Keeping momentum , we have the variable binding command defining $ <nat:2> $ to $ <var:p0>$ . This statement forwards $ \{ <var:w> = <var:n> \} $ toward the condition $ \{ <var:w> = <var:n> \land <var:p0> = <nat:2> \} $ . Observing the upcoming line of code contained in our code , the variable binding statement \verb | <var:C> := <var:p0> | . This line forwards the condition $ \{ <var:w> = <var:n> \land <var:p0> = <nat:2> \} $ to the condition $ \{ <var:w> = <var:n> \land <var:C> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:2> ; <var:C> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:w> = <var:n> }} <def:poly> {{ <var:C> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:n> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:n> /\ <var:C> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 