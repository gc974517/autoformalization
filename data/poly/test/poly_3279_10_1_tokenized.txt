\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:S1> := <var:s> ; <var:S2> := <var:S1> * <var:s> ; <var:S3> := <var:S2> * <var:s> ; <var:S4> := <var:S3> * <var:s> ; <var:S0> := <nat:5> ; <var:S1> := <var:S1> * <nat:5> ; <var:S4> := <var:S4> * <nat:5> ; <var:y> := <var:S4> <var:y> := <var:y> + <var:S1> <var:y> := <var:y> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:s> = <var:K> $ --- given any $ <var:K> \in \mathbb{Z}^+ $ --- ahead of interpreting our series of instructions , then $ <var:y> = <nat:5> \cdot <var:K> ^ <nat:4> + <nat:5> \cdot <var:K> + <nat:5> $ when list of commands is done . \end{theorem} \begin{proof} The application of typical Hoare reasoning returns : \begin{eqnarray} \{ <var:s> = <var:K> \} \\ <var:S1> := <var:s> ; \\ \{ <var:s> = <var:K> \land <var:S1> = <var:K> \} \\ <var:S2> := <var:S1> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:S1> = <var:K> \land <var:S2> = <var:K> ^ <nat:2> \} \\ <var:S3> := <var:S2> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:S1> = <var:K> \land <var:S2> = <var:K> ^ <nat:2> \land <var:S3> = <var:K> ^ <nat:3> \} \\ <var:S4> := <var:S3> * <var:s> ; \\ \{ <var:s> = <var:K> \land <var:S1> = <var:K> \land <var:S2> = <var:K> ^ <nat:2> \land <var:S3> = <var:K> ^ <nat:3> \land <var:S4> = <var:K> ^ <nat:4> \} \\ <var:S0> := <nat:5> ; \\ \{ <var:s> = <var:K> \land <var:S1> = <var:K> \land <var:S2> = <var:K> ^ <nat:2> \land <var:S3> = <var:K> ^ <nat:3> \land <var:S4> = <var:K> ^ <nat:4> \land <var:S0> = <nat:5> \} \\ <var:S1> := <var:S1> * <nat:5> ; \\ \{ <var:s> = <var:K> \land <var:S1> = <nat:5> \cdot <var:K> \land <var:S2> = <var:K> ^ <nat:2> \land <var:S3> = <var:K> ^ <nat:3> \land <var:S4> = <var:K> ^ <nat:4> \land <var:S0> = <nat:5> \} \\ <var:S4> := <var:S4> * <nat:5> ; \\ \{ <var:s> = <var:K> \land <var:S1> = <nat:5> \cdot <var:K> \land <var:S2> = <var:K> ^ <nat:2> \land <var:S3> = <var:K> ^ <nat:3> \land <var:S4> = <nat:5> \cdot <var:K> ^ <nat:4> \land <var:S0> = <nat:5> \} \\ <var:y> := <var:S4> \\ \{ <var:s> = <var:K> \land <var:S1> = <nat:5> \cdot <var:K> \land <var:S2> = <var:K> ^ <nat:2> \land <var:S3> = <var:K> ^ <nat:3> \land <var:S0> = <nat:5> \land <var:y> = <nat:5> \cdot <var:K> ^ <nat:4> \} \\ <var:y> := <var:y> + <var:S1> \\ \{ <var:s> = <var:K> \land <var:S0> = <nat:5> \land <var:y> = <nat:5> \cdot <var:K> ^ <nat:4> + <nat:5> \cdot <var:K> \} \\ <var:y> := <var:y> + <var:S0> \\ \{ <var:s> = <var:K> \land <var:y> = <nat:5> \cdot <var:K> ^ <nat:4> + <nat:5> \cdot <var:K> + <nat:5> \} \end{eqnarray} Considering the preceding argument , the list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <var:S4> : string := " <var:S4> " . Definition <def:poly> := <var:S1> := <var:s> ; <var:S2> := <var:S1> * <var:s> ; <var:S3> := <var:S2> * <var:s> ; <var:S4> := <var:S3> * <var:s> ; <var:S0> := <nat:5> ; <var:S1> := <var:S1> * <nat:5> ; <var:S4> := <var:S4> * <nat:5> ; <var:y> := <var:S4> <var:y> := <var:y> + <var:S1> <var:y> := <var:y> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:s> = <var:K> }} <def:poly> {{ <var:y> = <nat:5> * <var:K> ^ <nat:4> + <nat:5> * <var:K> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:S1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:S1> = <var:K> /\ <var:S2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:S1> = <var:K> /\ <var:S2> = <var:K> ^ <nat:2> /\ <var:S3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:S1> = <var:K> /\ <var:S2> = <var:K> ^ <nat:2> /\ <var:S3> = <var:K> ^ <nat:3> /\ <var:S4> = <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:S1> = <var:K> /\ <var:S2> = <var:K> ^ <nat:2> /\ <var:S3> = <var:K> ^ <nat:3> /\ <var:S4> = <var:K> ^ <nat:4> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:S1> = <nat:5> * <var:K> /\ <var:S2> = <var:K> ^ <nat:2> /\ <var:S3> = <var:K> ^ <nat:3> /\ <var:S4> = <var:K> ^ <nat:4> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:S1> = <nat:5> * <var:K> /\ <var:S2> = <var:K> ^ <nat:2> /\ <var:S3> = <var:K> ^ <nat:3> /\ <var:S4> = <nat:5> * <var:K> ^ <nat:4> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:S1> = <nat:5> * <var:K> /\ <var:S2> = <var:K> ^ <nat:2> /\ <var:S3> = <var:K> ^ <nat:3> /\ <var:S0> = <nat:5> /\ <var:y> = <nat:5> * <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:S0> = <nat:5> /\ <var:y> = <nat:5> * <var:K> ^ <nat:4> + <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:K> /\ <var:y> = <nat:5> * <var:K> ^ <nat:4> + <nat:5> * <var:K> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 