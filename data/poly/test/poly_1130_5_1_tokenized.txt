\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:Q> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:3> ; <var:W> := <var:t1> <var:W> := <var:W> + <var:t0> \end{verbatim} Allowing it to be that $ <var:Q> = <var:w> $ prior to the evaluation of the series of commands it must be that we see $ <var:W> = <nat:3> \cdot <var:w> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands can be done through usual Hoare logic . Observing the subsequent line of code in the program , the variable assignmet statement \verb | <var:t1> := <var:Q> ; | . This line advances the condition $ \{ <var:Q> = <var:w> \} $ into $ \{ <var:Q> = <var:w> \land <var:t1> = <var:w> \} $ . This is ensured by the assignment law defined in Hoare techniques . Moving forward , we have the variable assignmet line binding $ <nat:3> $ to $ <var:t0>$ . This forwards $ \{ <var:Q> = <var:w> \land <var:t1> = <var:w> \} $ toward $ \{ <var:Q> = <var:w> \land <var:t1> = <var:w> \land <var:t0> = <nat:3> \} $ . Taking another step toward the subsequent command seen in the set of commands , we see the command \verb | <var:t1> := <var:t1> * <nat:3> ; | . This line takes the precondition $ \{ <var:Q> = <var:w> \land <var:t1> = <var:w> \land <var:t0> = <nat:3> \} $ to the postcondition $ \{ <var:Q> = <var:w> \land <var:t1> = <nat:3> * <var:w> \land <var:t0> = <nat:3> \} $ . This is guaranteed by the assignment rule obtained from typical Hoare logic . Paying attention to the subsequent line contained in the list of instructions , we have the variable binding code \verb | <var:W> := <var:t1> | . This statement transfers the precondition $ \{ <var:Q> = <var:w> \land <var:t1> = <nat:3> * <var:w> \land <var:t0> = <nat:3> \} $ toward the postcondition $ \{ <var:Q> = <var:w> \land <var:t0> = <nat:3> \land <var:W> = <nat:3> * <var:w> \} $ . This is rigorously given by the assignment rule defined by Hoare techniques . Looking at the proceeding command in our set of instructions , we see the command yielding $ <var:W> + <var:t0$ toward $ <var:W>$ . This statement advances $ \{ <var:Q> = <var:w> \land <var:t0> = <nat:3> \land <var:W> = <nat:3> * <var:w> \} $ to $ \{ <var:Q> = <var:w> \land <var:W> = <nat:3> * <var:w> + <nat:3> \} $ . This is known to be sound through the assignment law of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Q> = <var:w> }} <var:t1> := <var:Q> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:3> ; <var:W> := <var:t1> <var:W> := <var:W> + <var:t0> {{ <var:W> = <nat:3> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:t1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:t1> = <var:w> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:t1> = <nat:3> * <var:w> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:t0> = <nat:3> /\ <var:W> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:W> = <nat:3> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 