\begin{document} \begin{theorem} Consider the following code segment : \begin{verbatim} <var:i0> := <nat:1> ; <var:v> := <var:i0> \end{verbatim} Allowing that we have $ <var:Q> = <var:O> $ before the execution of this code segment it must be that $ <var:v> = <nat:1> $ when segment of code exits . \end{theorem} \begin{proof} The proof of our code is clear using standard Hoare logic . Considering the next line in the series of instructions , we see \begin{eqnarray} \{ <var:Q> = <var:O> \} \, <var:i0> := <nat:1> \, \{ <var:Q> = <var:O> \land <var:i0> = <nat:1> \} \end{eqnarray} Advancing to the subsequent step in the list of instructions , we see \begin{eqnarray} \{ <var:Q> = <var:O> \} \, <var:i0> := <nat:1> \, \{ <var:Q> = <var:O> \land <var:i0> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:Q> = <var:O> }} <var:i0> := <nat:1> ; <var:v> := <var:i0> {{ <var:v> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:O> /\ <var:v> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 