\begin{document} \begin{theorem} We define a code such that \begin{verbatim} <var:l0> := <nat:5> ; <var:l1> := <nat:9> ; <var:l1> := <var:l1> * <var:D> ; <var:l2> := <nat:6> ; <var:l2> := <var:l2> * <var:D> ; <var:l2> := <var:l2> * <var:D> ; <var:p> := <var:l2> ; <var:p> := <var:p> + <var:l1> ; <var:p> := <var:p> + <var:l0> \end{verbatim} Allowing ( given every positive integers $ <var:t> $ ) it to hold that $ <var:D> = <var:t> $ prior to evaluating our program it must be that we see $ <var:p> = <nat:6> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of our program is clear with typical Hoare techniques . Taking another step toward the next lines in the list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:D> = <var:t> \} & <var:l0> := <nat:5> & \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \} \\ \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \} & <var:l1> := <nat:9> & \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \} \\ \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \} & <var:l1> := <var:l1> * <var:D> & \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \cdot <var:t> \} \\ \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \cdot <var:t> \} & <var:l2> := <nat:6> & \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \cdot <var:t> \land <var:l2> = <nat:6> \} \\ \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \cdot <var:t> \land <var:l2> = <nat:6> \} & <var:l2> := <var:l2> * <var:D> & \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \cdot <var:t> \land <var:l2> = <nat:6> \cdot <var:t> \} \\ \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \cdot <var:t> \land <var:l2> = <nat:6> \cdot <var:t> \} & <var:l2> := <var:l2> * <var:D> & \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \cdot <var:t> \land <var:l2> = <nat:6> \cdot <var:t> ^ <nat:2> \} \\ \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \cdot <var:t> \land <var:l2> = <nat:6> \cdot <var:t> ^ <nat:2> \} & <var:p> := <var:l2> & \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \cdot <var:t> \land <var:p> = <nat:6> \cdot <var:t> ^ <nat:2> \} \\ \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:l1> = <nat:9> \cdot <var:t> \land <var:p> = <nat:6> \cdot <var:t> ^ <nat:2> \} & <var:p> := <var:p> + <var:l1> & \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:p> = <nat:6> \cdot <var:t> ^ <nat:2> + <nat:9> \cdot <var:t> \} \\ \{ <var:D> = <var:t> \land <var:l0> = <nat:5> \land <var:p> = <nat:6> \cdot <var:t> ^ <nat:2> + <nat:9> \cdot <var:t> \} & <var:p> := <var:p> + <var:l0& \{ <var:D> = <var:t> \land <var:p> = <nat:6> \cdot <var:t> ^ <nat:2> + <nat:9> \cdot <var:t> + <nat:5> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:D> = <var:t> }} <var:l0> := <nat:5> ; <var:l1> := <nat:9> ; <var:l1> := <var:l1> * <var:D> ; <var:l2> := <nat:6> ; <var:l2> := <var:l2> * <var:D> ; <var:l2> := <var:l2> * <var:D> ; <var:p> := <var:l2> ; <var:p> := <var:p> + <var:l1> ; <var:p> := <var:p> + <var:l0> {{ <var:p> = <nat:6> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:9> * <var:t> /\ <var:l2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:9> * <var:t> /\ <var:l2> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:9> * <var:t> /\ <var:l2> = <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:l0> = <nat:5> /\ <var:l1> = <nat:9> * <var:t> /\ <var:p> = <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:l0> = <nat:5> /\ <var:p> = <nat:6> * <var:t> ^ <nat:2> + <nat:9> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:t> /\ <var:p> = <nat:6> * <var:t> ^ <nat:2> + <nat:9> * <var:t> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 