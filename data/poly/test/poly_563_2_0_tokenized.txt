\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:8> ; <var:r> := <var:m0> \end{verbatim} Allowing it to hold that $ <var:C> = <var:E> $ ( given natural coefficients $ <var:E> $ ) before evaluating our program then we have $ <var:r> = <nat:8> $ when set of commands is done . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning returns : \begin{eqnarray} \{ <var:C> = <var:E> \} \\ <var:m0> := <nat:8> ; \\ \{ <var:C> = <var:E> \land <var:m0> = <nat:8> \} \\ <var:r> := <var:m0> \\ \{ <var:C> = <var:E> \land <var:r> = <nat:8> \} \end{eqnarray} Given the preceding argument , our set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:C> = <var:E> }} <var:m0> := <nat:8> ; <var:r> := <var:m0> {{ <var:r> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:r> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 