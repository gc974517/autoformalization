\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:4> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:z> ; <var:O> := <var:p1> ; <var:O> := <var:O> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> . Assuming that $ <var:z> = <var:g> $ prior to executing our series of instructions , it follows that we see $ <var:O> = <nat:1> \times <var:g> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands is done with typical Hoare reasoning . Moving onward , the code \verb | <var:p0> := <nat:4> ; | . This redefines $ \{ <var:z> = <var:g> \} $ to $ \{ <var:z> = <var:g> \land <var:p0> = <nat:4> \} $ . Observing the upcoming piece of code seen in our series of commands , the assignment line \verb | <var:p1> := <nat:1> ; | . This takes $ \{ <var:z> = <var:g> \land <var:p0> = <nat:4> \} $ into the condition $ \{ <var:z> = <var:g> \land <var:p0> = <nat:4> \land <var:p1> = <nat:1> \} $ . This is sound by the assignment law defined in usual Hoare logic . Stepping through , we see the variable binding statement \verb | <var:p1> := <var:p1> * <var:z> ; | . This advances the condition $ \{ <var:z> = <var:g> \land <var:p0> = <nat:4> \land <var:p1> = <nat:1> \} $ as $ \{ <var:z> = <var:g> \land <var:p0> = <nat:4> \land <var:p1> = <nat:1> \times <var:g> \} $ . This is shown through the assignment rule defined by Hoare techniques . Looking at the following statement seen in our set of commands , the binding code assigning $ <var:p1> $ as $ <var:O>$ . This statement forwards the precondition $ \{ <var:z> = <var:g> \land <var:p0> = <nat:4> \land <var:p1> = <nat:1> \times <var:g> \} $ toward the condition $ \{ <var:z> = <var:g> \land <var:p0> = <nat:4> \land <var:O> = <nat:1> \times <var:g> \} $ . This is known to be sound through the assignment law defined by usual Hoare logic . Jumping to the following step found in our code , we have the variable assignmet command \verb | <var:O> := <var:O> + <var:p0> | . This statement advances the precondition $ \{ <var:z> = <var:g> \land <var:p0> = <nat:4> \land <var:O> = <nat:1> \times <var:g> \} $ to the postcondition $ \{ <var:z> = <var:g> \land <var:O> = <nat:1> \times <var:g> + <nat:4> \} $ . This is guaranteed with the assignment scheme defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p0> := <nat:4> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:z> ; <var:O> := <var:p1> ; <var:O> := <var:O> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:z> = <var:g> }} <def:poly> {{ <var:O> = <nat:1> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:p0> = <nat:4> /\ <var:p1> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:p0> = <nat:4> /\ <var:O> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:O> = <nat:1> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 