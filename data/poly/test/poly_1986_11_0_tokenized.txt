\begin{document} \begin{theorem} Consider a series of commands as follows \begin{verbatim} <var:m0> := <nat:1> ; <var:m2> := <nat:3> ; <var:m2> := <var:m2> * <var:C> ; <var:m2> := <var:m2> * <var:C> ; <var:m3> := <nat:2> ; <var:m3> := <var:m3> * <var:C> ; <var:m3> := <var:m3> * <var:C> ; <var:m3> := <var:m3> * <var:C> ; <var:g> := <var:m3> ; <var:g> := <var:g> + <var:m2> ; <var:g> := <var:g> + <var:m0> \end{verbatim} Allow $ <var:C> = <var:x> $ , given any positive coefficients $ <var:x> $ , before running our series of instructions it holds that we have $ <var:g> = <nat:2> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:x> \} \\ <var:m0> := <nat:1> ; \\ \{ <var:C> = <var:x> \land <var:m0> = <nat:1> \} \\ <var:m2> := <nat:3> ; \\ \{ <var:C> = <var:x> \land <var:m0> = <nat:1> \land <var:m2> = <nat:3> \} \\ <var:m2> := <var:m2> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:m0> = <nat:1> \land <var:m2> = <nat:3> \cdot <var:x> \} \\ <var:m2> := <var:m2> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:m0> = <nat:1> \land <var:m2> = <nat:3> \cdot <var:x> ^ <nat:2> \} \\ <var:m3> := <nat:2> ; \\ \{ <var:C> = <var:x> \land <var:m0> = <nat:1> \land <var:m2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:m3> = <nat:2> \} \\ <var:m3> := <var:m3> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:m0> = <nat:1> \land <var:m2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:m3> = <nat:2> \cdot <var:x> \} \\ <var:m3> := <var:m3> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:m0> = <nat:1> \land <var:m2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:m3> = <nat:2> \cdot <var:x> ^ <nat:2> \} \\ <var:m3> := <var:m3> * <var:C> ; \\ \{ <var:C> = <var:x> \land <var:m0> = <nat:1> \land <var:m2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:m3> = <nat:2> \cdot <var:x> ^ <nat:3> \} \\ <var:g> := <var:m3> ; \\ \{ <var:C> = <var:x> \land <var:m0> = <nat:1> \land <var:m2> = <nat:3> \cdot <var:x> ^ <nat:2> \land <var:g> = <nat:2> \cdot <var:x> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:m2> ; \\ \{ <var:C> = <var:x> \land <var:m0> = <nat:1> \land <var:g> = <nat:2> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:m0> \\ \{ <var:C> = <var:x> \land <var:g> = <nat:2> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:1> \} \end{eqnarray} Utilizing standard Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:C> = <var:x> }} <var:m0> := <nat:1> ; <var:m2> := <nat:3> ; <var:m2> := <var:m2> * <var:C> ; <var:m2> := <var:m2> * <var:C> ; <var:m3> := <nat:2> ; <var:m3> := <var:m3> * <var:C> ; <var:m3> := <var:m3> * <var:C> ; <var:m3> := <var:m3> * <var:C> ; <var:g> := <var:m3> ; <var:g> := <var:g> + <var:m2> ; <var:g> := <var:g> + <var:m0> {{ <var:g> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:m3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:m3> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:m3> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:m3> = <nat:2> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:m0> = <nat:1> /\ <var:m2> = <nat:3> * <var:x> ^ <nat:2> /\ <var:g> = <nat:2> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:m0> = <nat:1> /\ <var:g> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:x> /\ <var:g> = <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 