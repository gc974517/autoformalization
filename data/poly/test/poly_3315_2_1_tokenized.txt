\begin{document} \begin{theorem} We define the following code in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:9> ; <var:H> := <var:n0> \end{verbatim} Given that we have $ <var:d> = <var:a> $ before running our series of instructions it must be that $ <var:H> = <nat:9> $ once segment of code executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:a> \} \\ <var:n0> := <nat:9> ; \\ \{ <var:d> = <var:a> \land <var:n0> = <nat:9> \} \\ <var:H> := <var:n0> \\ \{ <var:d> = <var:a> \land <var:H> = <nat:9> \} \end{eqnarray} Using typical Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:d> = <var:a> }} <var:n0> := <nat:9> ; <var:H> := <var:n0> {{ <var:H> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:n0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:H> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 