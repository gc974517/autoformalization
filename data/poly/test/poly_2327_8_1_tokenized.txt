\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} such that \begin{verbatim} <var:p1> := <var:x> ; <var:p2> := <var:p1> * <var:x> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:5> ; <var:p2> := <var:p2> * <nat:6> ; <var:V> := <var:p2> <var:V> := <var:V> + <var:p1> <var:V> := <var:V> + <var:p0> \end{verbatim} Allowing it to be that $ <var:x> = <var:o> $ , given natural coefficients $ <var:o> $ , before evaluating our program , it follows that we see $ <var:V> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:4> $ when list of commands has terminated . \end{theorem} \begin{proof} The way to prove correctness for our code is given by typical Hoare logic . Moving on , we have the binding line \verb | <var:p1> := <var:x> ; | . This forwards $ \{ <var:x> = <var:o> \} $ toward the postcondition $ \{ <var:x> = <var:o> \land <var:p1> = <var:o> \} $ . This is rigorously given using the assignment rule obtained from usual Hoare logic . Honing in on the proceeding step in our list of instructions , the variable update command \verb | <var:p2> := <var:p1> * <var:x> ; | . This line advances the precondition $ \{ <var:x> = <var:o> \land <var:p1> = <var:o> \} $ into the condition $ \{ <var:x> = <var:o> \land <var:p1> = <var:o> \land <var:p2> = <var:o> ^ <nat:2> \} $ . Further , we have the environment update code \verb | <var:p0> := <nat:4> ; | . This advances the condition $ \{ <var:x> = <var:o> \land <var:p1> = <var:o> \land <var:p2> = <var:o> ^ <nat:2> \} $ into the postcondition $ \{ <var:x> = <var:o> \land <var:p1> = <var:o> \land <var:p2> = <var:o> ^ <nat:2> \land <var:p0> = <nat:4> \} $ . This is shown to be logically sound through the assignment scheme given in typical Hoare techniques . Moving forward to the next step found in our list of instructions , we have the variable assignmet code \verb | <var:p1> := <var:p1> * <nat:5> ; | . This statement moves the condition $ \{ <var:x> = <var:o> \land <var:p1> = <var:o> \land <var:p2> = <var:o> ^ <nat:2> \land <var:p0> = <nat:4> \} $ toward $ \{ <var:x> = <var:o> \land <var:p1> = <nat:5> * <var:o> \land <var:p2> = <var:o> ^ <nat:2> \land <var:p0> = <nat:4> \} $ . Taking another step toward the next piece of code found in the set of commands , we see the assignment command binding $ <var:p2> * <nat:6> $ as $ <var:p2>$ . This redefines the condition $ \{ <var:x> = <var:o> \land <var:p1> = <nat:5> * <var:o> \land <var:p2> = <var:o> ^ <nat:2> \land <var:p0> = <nat:4> \} $ as the postcondition $ \{ <var:x> = <var:o> \land <var:p1> = <nat:5> * <var:o> \land <var:p2> = <nat:6> * <var:o> ^ <nat:2> \land <var:p0> = <nat:4> \} $ . Immediately following , we see the variable binding command defining $ <var:p2$ as $ <var:V>$ . This redefines $ \{ <var:x> = <var:o> \land <var:p1> = <nat:5> * <var:o> \land <var:p2> = <nat:6> * <var:o> ^ <nat:2> \land <var:p0> = <nat:4> \} $ as the postcondition $ \{ <var:x> = <var:o> \land <var:p1> = <nat:5> * <var:o> \land <var:p0> = <nat:4> \land <var:V> = <nat:6> * <var:o> ^ <nat:2> \} $ . Jumping to the next command in the list of commands , we see the environment update statement binding $ <var:V> + <var:p1$ into $ <var:V>$ . This code moves the precondition $ \{ <var:x> = <var:o> \land <var:p1> = <nat:5> * <var:o> \land <var:p0> = <nat:4> \land <var:V> = <nat:6> * <var:o> ^ <nat:2> \} $ into the condition $ \{ <var:x> = <var:o> \land <var:p0> = <nat:4> \land <var:V> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> \} $ . This is given through the assignment law found in usual Hoare reasoning . Taking another step toward the following piece of code in our code segment , we have the variable assignmet command assigning $ <var:V> + <var:p0$ into $ <var:V>$ . This transfers $ \{ <var:x> = <var:o> \land <var:p0> = <nat:4> \land <var:V> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> \} $ toward the postcondition $ \{ <var:x> = <var:o> \land <var:V> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:4> \} $ . This is ensured by the assignment inference rule in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:x> = <var:o> }} <var:p1> := <var:x> ; <var:p2> := <var:p1> * <var:x> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:5> ; <var:p2> := <var:p2> * <nat:6> ; <var:V> := <var:p2> <var:V> := <var:V> + <var:p1> <var:V> := <var:V> + <var:p0> {{ <var:V> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:p1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:p1> = <var:o> /\ <var:p2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:p1> = <var:o> /\ <var:p2> = <var:o> ^ <nat:2> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:p1> = <nat:5> * <var:o> /\ <var:p2> = <var:o> ^ <nat:2> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:p1> = <nat:5> * <var:o> /\ <var:p2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:p1> = <nat:5> * <var:o> /\ <var:p0> = <nat:4> /\ <var:V> = <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:p0> = <nat:4> /\ <var:V> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:o> /\ <var:V> = <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 