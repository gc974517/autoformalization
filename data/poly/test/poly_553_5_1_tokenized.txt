\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N1> := <var:Q> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:3> ; <var:I> := <var:N1> <var:I> := <var:I> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:Q> = <var:n> $ before the execution of our series of instructions it holds that we see $ <var:I> = <nat:3> \cdot <var:n> + <nat:2> $ . \end{theorem} \begin{proof} Using Hoare techniques gives : \begin{eqnarray} \{ <var:Q> = <var:n> \} \\ <var:N1> := <var:Q> ; \\ \{ <var:Q> = <var:n> \land <var:N1> = <var:n> \} \\ <var:N0> := <nat:2> ; \\ \{ <var:Q> = <var:n> \land <var:N1> = <var:n> \land <var:N0> = <nat:2> \} \\ <var:N1> := <var:N1> * <nat:3> ; \\ \{ <var:Q> = <var:n> \land <var:N1> = <nat:3> \times <var:n> \land <var:N0> = <nat:2> \} \end{eqnarray} Continuing running the set of commands yields : \begin{eqnarray} <var:I> := <var:N1> \\ \{ <var:Q> = <var:n> \land <var:N0> = <nat:2> \land <var:I> = <nat:3> \times <var:n> \} \\ <var:I> := <var:I> + <var:N0> \\ \{ <var:Q> = <var:n> \land <var:I> = <nat:3> \times <var:n> + <nat:2> \} \end{eqnarray} Therefore , the code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <def:poly> := <var:N1> := <var:Q> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:3> ; <var:I> := <var:N1> <var:I> := <var:I> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:Q> = <var:n> }} <def:poly> {{ <var:I> = <nat:3> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:N1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:N1> = <var:n> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:N1> = <nat:3> * <var:n> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:N0> = <nat:2> /\ <var:I> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:I> = <nat:3> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 