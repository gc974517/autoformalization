\begin{document} \begin{theorem} Let the following code in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:N> ; <var:e2> := <var:e1> * <var:N> ; <var:e3> := <var:e2> * <var:N> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:5> ; <var:e3> := <var:e3> * <nat:8> ; <var:X> := <var:e3> <var:X> := <var:X> + <var:e1> <var:X> := <var:X> + <var:e0> \end{verbatim} Given that we have $ <var:N> = <var:h> $ given any positive numbers $ <var:h> $ ahead of interpreting this code , then we have $ <var:X> = <nat:8> * <var:h> ^ <nat:3> + <nat:5> * <var:h> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the list of commands can be seen through the below decorated list of commands . \begin{eqnarray} \{ <var:N> = <var:h> \} \\ <var:e1> := <var:N> ; \\ \{ <var:N> = <var:h> \land <var:e1> = <var:h> \} \\ <var:e2> := <var:e1> * <var:N> ; \\ \{ <var:N> = <var:h> \land <var:e1> = <var:h> \land <var:e2> = <var:h> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:N> ; \\ \{ <var:N> = <var:h> \land <var:e1> = <var:h> \land <var:e2> = <var:h> ^ <nat:2> \land <var:e3> = <var:h> ^ <nat:3> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:N> = <var:h> \land <var:e1> = <var:h> \land <var:e2> = <var:h> ^ <nat:2> \land <var:e3> = <var:h> ^ <nat:3> \land <var:e0> = <nat:2> \} \\ <var:e1> := <var:e1> * <nat:5> ; \\ \{ <var:N> = <var:h> \land <var:e1> = <nat:5> * <var:h> \land <var:e2> = <var:h> ^ <nat:2> \land <var:e3> = <var:h> ^ <nat:3> \land <var:e0> = <nat:2> \} \\ <var:e3> := <var:e3> * <nat:8> ; \\ \{ <var:N> = <var:h> \land <var:e1> = <nat:5> * <var:h> \land <var:e2> = <var:h> ^ <nat:2> \land <var:e3> = <nat:8> * <var:h> ^ <nat:3> \land <var:e0> = <nat:2> \} \\ <var:X> := <var:e3> \\ \{ <var:N> = <var:h> \land <var:e1> = <nat:5> * <var:h> \land <var:e2> = <var:h> ^ <nat:2> \land <var:e0> = <nat:2> \land <var:X> = <nat:8> * <var:h> ^ <nat:3> \} \\ <var:X> := <var:X> + <var:e1> \\ \{ <var:N> = <var:h> \land <var:e0> = <nat:2> \land <var:X> = <nat:8> * <var:h> ^ <nat:3> + <nat:5> * <var:h> \} \\ <var:X> := <var:X> + <var:e0> \\ \{ <var:N> = <var:h> \land <var:X> = <nat:8> * <var:h> ^ <nat:3> + <nat:5> * <var:h> + <nat:2> \} \end{eqnarray} The application of standard Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:N> = <var:h> }} <var:e1> := <var:N> ; <var:e2> := <var:e1> * <var:N> ; <var:e3> := <var:e2> * <var:N> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:5> ; <var:e3> := <var:e3> * <nat:8> ; <var:X> := <var:e3> <var:X> := <var:X> + <var:e1> <var:X> := <var:X> + <var:e0> {{ <var:X> = <nat:8> * <var:h> ^ <nat:3> + <nat:5> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:e1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:e1> = <var:h> /\ <var:e2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:e1> = <var:h> /\ <var:e2> = <var:h> ^ <nat:2> /\ <var:e3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:e1> = <var:h> /\ <var:e2> = <var:h> ^ <nat:2> /\ <var:e3> = <var:h> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:e1> = <nat:5> * <var:h> /\ <var:e2> = <var:h> ^ <nat:2> /\ <var:e3> = <var:h> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:e1> = <nat:5> * <var:h> /\ <var:e2> = <var:h> ^ <nat:2> /\ <var:e3> = <nat:8> * <var:h> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:e1> = <nat:5> * <var:h> /\ <var:e2> = <var:h> ^ <nat:2> /\ <var:e0> = <nat:2> /\ <var:X> = <nat:8> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:e0> = <nat:2> /\ <var:X> = <nat:8> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:X> = <nat:8> * <var:h> ^ <nat:3> + <nat:5> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 