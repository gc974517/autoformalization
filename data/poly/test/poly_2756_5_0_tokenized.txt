\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:9> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:S> ; <var:u> := <var:r1> ; <var:u> := <var:u> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:S> = <var:s> $ ( for positive integers $ <var:s> $ ) ahead of interpreting the set of instructions , then we see $ <var:u> = <nat:2> * <var:s> + <nat:9> $ after code finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:s> \} \\ <var:r0> := <nat:9> ; \\ \{ <var:S> = <var:s> \land <var:r0> = <nat:9> \} \\ <var:r1> := <nat:2> ; \\ \{ <var:S> = <var:s> \land <var:r0> = <nat:9> \land <var:r1> = <nat:2> \} \\ <var:r1> := <var:r1> * <var:S> ; \\ \{ <var:S> = <var:s> \land <var:r0> = <nat:9> \land <var:r1> = <nat:2> \cdot <var:s> \} \\ <var:u> := <var:r1> ; \\ \{ <var:S> = <var:s> \land <var:r0> = <nat:9> \land <var:u> = <nat:2> \cdot <var:s> \} \\ <var:u> := <var:u> + <var:r0> \\ \{ <var:S> = <var:s> \land <var:u> = <nat:2> \cdot <var:s> + <nat:9> \} \end{eqnarray} Using Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r0> := <nat:9> ; <var:r1> := <nat:2> ; <var:r1> := <var:r1> * <var:S> ; <var:u> := <var:r1> ; <var:u> := <var:u> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:S> = <var:s> }} <def:poly> {{ <var:u> = <nat:2> * <var:s> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:r0> = <nat:9> /\ <var:u> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:s> /\ <var:u> = <nat:2> * <var:s> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 