\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:2> ; <var:S> := <var:P0> \end{verbatim} Allowing that we have $ <var:N> = <var:U> $ ahead of executing the code it holds that we see $ <var:S> = <nat:2> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques produces : \begin{eqnarray} \{ <var:N> = <var:U> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:N> = <var:U> \land <var:P0> = <nat:2> \} \\ <var:S> := <var:P0> \\ \{ <var:N> = <var:U> \land <var:S> = <nat:2> \} \end{eqnarray} Given the preceding argument , this series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:N> = <var:U> }} <var:P0> := <nat:2> ; <var:S> := <var:P0> {{ <var:S> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:U> /\ <var:S> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 