\begin{document} \begin{theorem} Define a program in \emph{Imp} such that \begin{verbatim} <var:o1> := <var:H> ; <var:o2> := <var:o1> * <var:H> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:4> ; <var:o2> := <var:o2> * <nat:3> ; <var:q> := <var:o2> <var:q> := <var:q> + <var:o1> <var:q> := <var:q> + <var:o0> \end{verbatim} Allowing it to be that $ <var:H> = <var:z> $ prior to the evaluation of our segment of code then we have $ <var:q> = <nat:3> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the program can be given with usual Hoare reasoning . Going to the next step , we have the binding code defining $ <var:H> $ as $ <var:o1>$ . This redefines the precondition $ \{ <var:H> = <var:z> \} $ to the condition $ \{ <var:H> = <var:z> \land <var:o1> = <var:z> \} $ . Observing the upcoming line in the series of instructions , the command \verb | <var:o2> := <var:o1> * <var:H> ; | . This advances the condition $ \{ <var:H> = <var:z> \land <var:o1> = <var:z> \} $ to $ \{ <var:H> = <var:z> \land <var:o1> = <var:z> \land <var:o2> = <var:z> ^ <nat:2> \} $ . Advancing on , we have the variable binding command yielding $ <nat:2> $ as $ <var:o0>$ . This statement takes the condition $ \{ <var:H> = <var:z> \land <var:o1> = <var:z> \land <var:o2> = <var:z> ^ <nat:2> \} $ as $ \{ <var:H> = <var:z> \land <var:o1> = <var:z> \land <var:o2> = <var:z> ^ <nat:2> \land <var:o0> = <nat:2> \} $ . Moving on to the next step , the assignment command letting $ <var:o1> * <nat:4> $ as $ <var:o1>$ . This statement forwards the precondition $ \{ <var:H> = <var:z> \land <var:o1> = <var:z> \land <var:o2> = <var:z> ^ <nat:2> \land <var:o0> = <nat:2> \} $ toward the postcondition $ \{ <var:H> = <var:z> \land <var:o1> = <nat:4> \cdot <var:z> \land <var:o2> = <var:z> ^ <nat:2> \land <var:o0> = <nat:2> \} $ . Shifting focus toward the subsequent piece of code in our list of commands , the binding statement \verb | <var:o2> := <var:o2> * <nat:3> ; | . This line moves $ \{ <var:H> = <var:z> \land <var:o1> = <nat:4> \cdot <var:z> \land <var:o2> = <var:z> ^ <nat:2> \land <var:o0> = <nat:2> \} $ as $ \{ <var:H> = <var:z> \land <var:o1> = <nat:4> \cdot <var:z> \land <var:o2> = <nat:3> \cdot <var:z> ^ <nat:2> \land <var:o0> = <nat:2> \} $ . This is given through the assignment law given in Hoare techniques . Jumping to the next piece of code found in the list of instructions , we have the variable assignmet command \verb | <var:q> := <var:o2> | . This moves $ \{ <var:H> = <var:z> \land <var:o1> = <nat:4> \cdot <var:z> \land <var:o2> = <nat:3> \cdot <var:z> ^ <nat:2> \land <var:o0> = <nat:2> \} $ toward the postcondition $ \{ <var:H> = <var:z> \land <var:o1> = <nat:4> \cdot <var:z> \land <var:o0> = <nat:2> \land <var:q> = <nat:3> \cdot <var:z> ^ <nat:2> \} $ . Keeping momentum , we see the command yielding $ <var:q> + <var:o1$ into $ <var:q>$ . This moves the precondition $ \{ <var:H> = <var:z> \land <var:o1> = <nat:4> \cdot <var:z> \land <var:o0> = <nat:2> \land <var:q> = <nat:3> \cdot <var:z> ^ <nat:2> \} $ to the postcondition $ \{ <var:H> = <var:z> \land <var:o0> = <nat:2> \land <var:q> = <nat:3> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> \} $ . This is shown with the assignment inference rule found in typical Hoare logic . Considering the next piece of code found in the program , we have the variable update statement assigning $ <var:q> + <var:o0$ as $ <var:q>$ . This line forwards $ \{ <var:H> = <var:z> \land <var:o0> = <nat:2> \land <var:q> = <nat:3> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> \} $ toward the condition $ \{ <var:H> = <var:z> \land <var:q> = <nat:3> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:H> = <var:z> }} <var:o1> := <var:H> ; <var:o2> := <var:o1> * <var:H> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:4> ; <var:o2> := <var:o2> * <nat:3> ; <var:q> := <var:o2> <var:q> := <var:q> + <var:o1> <var:q> := <var:q> + <var:o0> {{ <var:q> = <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:o1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:o1> = <var:z> /\ <var:o2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:o1> = <var:z> /\ <var:o2> = <var:z> ^ <nat:2> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:o1> = <nat:4> * <var:z> /\ <var:o2> = <var:z> ^ <nat:2> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:o1> = <nat:4> * <var:z> /\ <var:o2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:o1> = <nat:4> * <var:z> /\ <var:o0> = <nat:2> /\ <var:q> = <nat:3> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:o0> = <nat:2> /\ <var:q> = <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:z> /\ <var:q> = <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 