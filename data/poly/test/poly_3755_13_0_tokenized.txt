\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:8> ; <var:O3> := <nat:5> ; <var:O3> := <var:O3> * <var:U> ; <var:O3> := <var:O3> * <var:U> ; <var:O3> := <var:O3> * <var:U> ; <var:O4> := <nat:1> ; <var:O4> := <var:O4> * <var:U> ; <var:O4> := <var:O4> * <var:U> ; <var:O4> := <var:O4> * <var:U> ; <var:O4> := <var:O4> * <var:U> ; <var:a> := <var:O4> ; <var:a> := <var:a> + <var:O3> ; <var:a> := <var:a> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Allow , for positive integer coefficients $ <var:N> $ , that we have $ <var:U> = <var:N> $ ahead of the execution of the code segment , then $ <var:a> = <nat:1> \cdot <var:N> ^ <nat:4> + <nat:5> \cdot <var:N> ^ <nat:3> + <nat:8> $ after set of commands executes . \end{theorem} \begin{proof} The way to prove correctness for our list of commands is done using usual Hoare reasoning . Stepping forward , \[ \begin{tabular} {rcl} \{ <var:U> = <var:N> \} & <var:O0> := <nat:8> & \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \} \end{tabular} This is rigorously given through the variable update scheme in typical Hoare techniques . Taking another step toward the next steps found in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:N> \} & <var:O0> := <nat:8> & \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \} \\ \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \} & <var:O3> := <nat:5> & \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \} \\ \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \} & <var:O3> := <var:O3> * <var:U> & \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \times <var:N> \} \\ \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \times <var:N> \} & <var:O3> := <var:O3> * <var:U> & \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \times <var:N> ^ <nat:2> \} \\ \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \times <var:N> ^ <nat:2> \} & <var:O3> := <var:O3> * <var:U> & \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \times <var:N> ^ <nat:3> \} \\ \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \times <var:N> ^ <nat:3> \} & <var:O4> := <nat:1> & \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \times <var:N> ^ <nat:3> \land <var:O4> = <nat:1> \} \end{tabular} Observing the following pieces of code in our set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:N> \} & <var:O0> := <nat:8> & \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \} \\ \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \} & <var:O3> := <nat:5> & \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \} \\ \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \} & <var:O3> := <var:O3> * <var:U> & \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \times <var:N> \} \\ \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \times <var:N> \} & <var:O3> := <var:O3> * <var:U> & \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \times <var:N> ^ <nat:2> \} \\ \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \times <var:N> ^ <nat:2> \} & <var:O3> := <var:O3> * <var:U> & \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \land <var:O3> = <nat:5> \times <var:N> ^ <nat:3> \} \end{tabular} This is known to be sound through the variable assignmet rule in standard Hoare reasoning . Paying attention to the following piece of code seen in the series of commands , we have \[ \begin{tabular} {rcl} \{ <var:U> = <var:N> \} & <var:O0> := <nat:8> & \{ <var:U> = <var:N> \land <var:O0> = <nat:8> \} \end{tabular} This is shown by the environment update inference rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O3> : string := " <var:O3> " . Definition <var:O4> : string := " <var:O4> " . Definition <def:poly> := <var:O0> := <nat:8> ; <var:O3> := <nat:5> ; <var:O3> := <var:O3> * <var:U> ; <var:O3> := <var:O3> * <var:U> ; <var:O3> := <var:O3> * <var:U> ; <var:O4> := <nat:1> ; <var:O4> := <var:O4> * <var:U> ; <var:O4> := <var:O4> * <var:U> ; <var:O4> := <var:O4> * <var:U> ; <var:O4> := <var:O4> * <var:U> ; <var:a> := <var:O4> ; <var:a> := <var:a> + <var:O3> ; <var:a> := <var:a> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:U> = <var:N> }} <def:poly> {{ <var:a> = <nat:1> * <var:N> ^ <nat:4> + <nat:5> * <var:N> ^ <nat:3> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:O0> = <nat:8> /\ <var:O3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:O0> = <nat:8> /\ <var:O3> = <nat:5> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:O0> = <nat:8> /\ <var:O3> = <nat:5> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:O0> = <nat:8> /\ <var:O3> = <nat:5> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:O0> = <nat:8> /\ <var:O3> = <nat:5> * <var:N> ^ <nat:3> /\ <var:O4> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:O0> = <nat:8> /\ <var:O3> = <nat:5> * <var:N> ^ <nat:3> /\ <var:O4> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:O0> = <nat:8> /\ <var:O3> = <nat:5> * <var:N> ^ <nat:3> /\ <var:O4> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:O0> = <nat:8> /\ <var:O3> = <nat:5> * <var:N> ^ <nat:3> /\ <var:O4> = <nat:1> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:O0> = <nat:8> /\ <var:O3> = <nat:5> * <var:N> ^ <nat:3> /\ <var:O4> = <nat:1> * <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:O0> = <nat:8> /\ <var:O3> = <nat:5> * <var:N> ^ <nat:3> /\ <var:a> = <nat:1> * <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:O0> = <nat:8> /\ <var:a> = <nat:1> * <var:N> ^ <nat:4> + <nat:5> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:4> + <nat:5> * <var:N> ^ <nat:3> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 