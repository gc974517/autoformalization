\begin{document} \begin{theorem} We define the following set of instructions such that \begin{verbatim} <var:f1> := <var:r> ; <var:f2> := <var:f1> * <var:r> ; <var:f0> := <nat:1> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:9> ; <var:m> := <var:f2> <var:m> := <var:m> + <var:f1> <var:m> := <var:m> + <var:f0> \end{verbatim} Assume ( for natural numbers $ <var:c> $ ) it to hold that $ <var:r> = <var:c> $ before evaluating this code it must be that we have $ <var:m> = <nat:9> * <var:c> ^ <nat:2> + <nat:8> * <var:c> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:r> = <var:c> \} \\ <var:f1> := <var:r> ; \\ \{ <var:r> = <var:c> \land <var:f1> = <var:c> \} \\ <var:f2> := <var:f1> * <var:r> ; \\ \{ <var:r> = <var:c> \land <var:f1> = <var:c> \land <var:f2> = <var:c> ^ <nat:2> \} \\ <var:f0> := <nat:1> ; \\ \{ <var:r> = <var:c> \land <var:f1> = <var:c> \land <var:f2> = <var:c> ^ <nat:2> \land <var:f0> = <nat:1> \} \\ <var:f1> := <var:f1> * <nat:8> ; \\ \{ <var:r> = <var:c> \land <var:f1> = <nat:8> \times <var:c> \land <var:f2> = <var:c> ^ <nat:2> \land <var:f0> = <nat:1> \} \\ <var:f2> := <var:f2> * <nat:9> ; \\ \{ <var:r> = <var:c> \land <var:f1> = <nat:8> \times <var:c> \land <var:f2> = <nat:9> \times <var:c> ^ <nat:2> \land <var:f0> = <nat:1> \} \\ <var:m> := <var:f2> \\ \{ <var:r> = <var:c> \land <var:f1> = <nat:8> \times <var:c> \land <var:f0> = <nat:1> \land <var:m> = <nat:9> \times <var:c> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:f1> \\ \{ <var:r> = <var:c> \land <var:f0> = <nat:1> \land <var:m> = <nat:9> \times <var:c> ^ <nat:2> + <nat:8> \times <var:c> \} \\ <var:m> := <var:m> + <var:f0> \\ \{ <var:r> = <var:c> \land <var:m> = <nat:9> \times <var:c> ^ <nat:2> + <nat:8> \times <var:c> + <nat:1> \} \end{eqnarray} The application of typical Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:r> = <var:c> }} <var:f1> := <var:r> ; <var:f2> := <var:f1> * <var:r> ; <var:f0> := <nat:1> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:9> ; <var:m> := <var:f2> <var:m> := <var:m> + <var:f1> <var:m> := <var:m> + <var:f0> {{ <var:m> = <nat:9> * <var:c> ^ <nat:2> + <nat:8> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:c> /\ <var:f1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:c> /\ <var:f1> = <var:c> /\ <var:f2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:c> /\ <var:f1> = <var:c> /\ <var:f2> = <var:c> ^ <nat:2> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:c> /\ <var:f1> = <nat:8> * <var:c> /\ <var:f2> = <var:c> ^ <nat:2> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:c> /\ <var:f1> = <nat:8> * <var:c> /\ <var:f2> = <nat:9> * <var:c> ^ <nat:2> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:c> /\ <var:f1> = <nat:8> * <var:c> /\ <var:f0> = <nat:1> /\ <var:m> = <nat:9> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:c> /\ <var:f0> = <nat:1> /\ <var:m> = <nat:9> * <var:c> ^ <nat:2> + <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:c> /\ <var:m> = <nat:9> * <var:c> ^ <nat:2> + <nat:8> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 