\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:A> := <nat:4> ; <var:A> := <var:A> * <var:I> ; <var:A> := <nat:3> + <var:A> * <var:I> ; <var:A> := <nat:4> + <var:A> * <var:I> ; <var:A> := <nat:3> + <var:A> * <var:I> ; <var:A> := <nat:3> + <var:A> * <var:I> ; <var:A> := <nat:1> + <var:A> * <var:I> ; <var:A> := <nat:4> + <var:A> * <var:I> ; <var:A> := <nat:2> + <var:A> * <var:I> ; <var:A> := <nat:3> + <var:A> * <var:I> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Allowing ( given all positive integers $ <var:h> $ ) that we have $ <var:I> = <var:h> $ before executing our segment of code it must be that we have $ <var:A> = <nat:4> * <var:h> ^ <nat:9> + <nat:3> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of commands is done through usual Hoare logic . Now , we see \begin{verbatim} { <var:I> = <var:h> } <var:A> := <nat:4> { <var:I> = <var:h> \land <var:A> = <nat:4> } { <var:I> = <var:h> \land <var:A> = <nat:4> } <var:A> := <var:A> * <var:I> { <var:I> = <var:h> \land <var:A> = <nat:4> * <var:h> + } { <var:I> = <var:h> \land <var:A> = <nat:4> * <var:h> + } <var:A> := <nat:3> + <var:A> * <var:I> { <var:I> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:2> + <nat:3> } { <var:I> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:2> + <nat:3> } <var:A> := <nat:4> + <var:A> * <var:I> { <var:I> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> + <nat:4> } { <var:I> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> + <nat:4> } <var:A> := <nat:3> + <var:A> * <var:I> { <var:I> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> } { <var:I> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> } <var:A> := <nat:3> + <var:A> * <var:I> { <var:I> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:3> } \end{verbatim} This is shown to be logically sound by the assignment scheme in Hoare techniques . Stepping forward , we see \begin{verbatim} { <var:I> = <var:h> } <var:A> := <nat:4> { <var:I> = <var:h> \land <var:A> = <nat:4> } { <var:I> = <var:h> \land <var:A> = <nat:4> } <var:A> := <var:A> * <var:I> { <var:I> = <var:h> \land <var:A> = <nat:4> * <var:h> + } { <var:I> = <var:h> \land <var:A> = <nat:4> * <var:h> + } <var:A> := <nat:3> + <var:A> * <var:I> { <var:I> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:2> + <nat:3> } \end{verbatim} This is rigorously given by the variable assignmet law defined by standard Hoare logic . Moving on to the subsequent command seen in our code segment , we have \begin{verbatim} { <var:I> = <var:h> } <var:A> := <nat:4> { <var:I> = <var:h> \land <var:A> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:4> ; <var:A> := <var:A> * <var:I> ; <var:A> := <nat:3> + <var:A> * <var:I> ; <var:A> := <nat:4> + <var:A> * <var:I> ; <var:A> := <nat:3> + <var:A> * <var:I> ; <var:A> := <nat:3> + <var:A> * <var:I> ; <var:A> := <nat:1> + <var:A> * <var:I> ; <var:A> := <nat:4> + <var:A> * <var:I> ; <var:A> := <nat:2> + <var:A> * <var:I> ; <var:A> := <nat:3> + <var:A> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:I> = <var:h> }} <def:poly> {{ <var:A> = <nat:4> * <var:h> ^ <nat:9> + <nat:3> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:A> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:A> = <nat:4> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:9> + <nat:3> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 