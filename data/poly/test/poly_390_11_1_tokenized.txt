\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:T1> := <var:c> ; <var:T2> := <var:T1> * <var:c> ; <var:T3> := <var:T2> * <var:c> ; <var:T0> := <nat:5> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:4> ; <var:T3> := <var:T3> * <nat:9> ; <var:A> := <var:T3> <var:A> := <var:A> + <var:T2> <var:A> := <var:A> + <var:T1> <var:A> := <var:A> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:c> = <var:y> $ ( for every positive numbers $ <var:y> $ ) before the execution of this code it follows that we see $ <var:A> = <nat:9> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:7> \cdot <var:y> + <nat:5> $ when series of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:y> \} \\ <var:T1> := <var:c> ; \\ \{ <var:c> = <var:y> \land <var:T1> = <var:y> \} \\ <var:T2> := <var:T1> * <var:c> ; \\ \{ <var:c> = <var:y> \land <var:T1> = <var:y> \land <var:T2> = <var:y> ^ <nat:2> \} \\ <var:T3> := <var:T2> * <var:c> ; \\ \{ <var:c> = <var:y> \land <var:T1> = <var:y> \land <var:T2> = <var:y> ^ <nat:2> \land <var:T3> = <var:y> ^ <nat:3> \} \\ <var:T0> := <nat:5> ; \\ \{ <var:c> = <var:y> \land <var:T1> = <var:y> \land <var:T2> = <var:y> ^ <nat:2> \land <var:T3> = <var:y> ^ <nat:3> \land <var:T0> = <nat:5> \} \\ <var:T1> := <var:T1> * <nat:7> ; \\ \{ <var:c> = <var:y> \land <var:T1> = <nat:7> * <var:y> \land <var:T2> = <var:y> ^ <nat:2> \land <var:T3> = <var:y> ^ <nat:3> \land <var:T0> = <nat:5> \} \\ <var:T2> := <var:T2> * <nat:4> ; \\ \{ <var:c> = <var:y> \land <var:T1> = <nat:7> * <var:y> \land <var:T2> = <nat:4> * <var:y> ^ <nat:2> \land <var:T3> = <var:y> ^ <nat:3> \land <var:T0> = <nat:5> \} \\ <var:T3> := <var:T3> * <nat:9> ; \\ \{ <var:c> = <var:y> \land <var:T1> = <nat:7> * <var:y> \land <var:T2> = <nat:4> * <var:y> ^ <nat:2> \land <var:T3> = <nat:9> * <var:y> ^ <nat:3> \land <var:T0> = <nat:5> \} \\ <var:A> := <var:T3> \\ \{ <var:c> = <var:y> \land <var:T1> = <nat:7> * <var:y> \land <var:T2> = <nat:4> * <var:y> ^ <nat:2> \land <var:T0> = <nat:5> \land <var:A> = <nat:9> * <var:y> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:T2> \\ \{ <var:c> = <var:y> \land <var:T1> = <nat:7> * <var:y> \land <var:T0> = <nat:5> \land <var:A> = <nat:9> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:T1> \\ \{ <var:c> = <var:y> \land <var:T0> = <nat:5> \land <var:A> = <nat:9> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:7> * <var:y> \} \\ <var:A> := <var:A> + <var:T0> \\ \{ <var:c> = <var:y> \land <var:A> = <nat:9> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:7> * <var:y> + <nat:5> \} \end{eqnarray} The application of typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T1> := <var:c> ; <var:T2> := <var:T1> * <var:c> ; <var:T3> := <var:T2> * <var:c> ; <var:T0> := <nat:5> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:4> ; <var:T3> := <var:T3> * <nat:9> ; <var:A> := <var:T3> <var:A> := <var:A> + <var:T2> <var:A> := <var:A> + <var:T1> <var:A> := <var:A> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:c> = <var:y> }} <def:poly> {{ <var:A> = <nat:9> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:7> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T1> = <var:y> /\ <var:T2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T1> = <var:y> /\ <var:T2> = <var:y> ^ <nat:2> /\ <var:T3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T1> = <var:y> /\ <var:T2> = <var:y> ^ <nat:2> /\ <var:T3> = <var:y> ^ <nat:3> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T1> = <nat:7> * <var:y> /\ <var:T2> = <var:y> ^ <nat:2> /\ <var:T3> = <var:y> ^ <nat:3> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T1> = <nat:7> * <var:y> /\ <var:T2> = <nat:4> * <var:y> ^ <nat:2> /\ <var:T3> = <var:y> ^ <nat:3> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T1> = <nat:7> * <var:y> /\ <var:T2> = <nat:4> * <var:y> ^ <nat:2> /\ <var:T3> = <nat:9> * <var:y> ^ <nat:3> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T1> = <nat:7> * <var:y> /\ <var:T2> = <nat:4> * <var:y> ^ <nat:2> /\ <var:T0> = <nat:5> /\ <var:A> = <nat:9> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T1> = <nat:7> * <var:y> /\ <var:T0> = <nat:5> /\ <var:A> = <nat:9> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:T0> = <nat:5> /\ <var:A> = <nat:9> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:y> /\ <var:A> = <nat:9> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:7> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 