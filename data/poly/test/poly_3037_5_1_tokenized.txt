\begin{document} \begin{theorem} Let the following program in \emph{Imp} : \begin{verbatim} <var:j1> := <var:r> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:3> ; <var:Z> := <var:j1> <var:Z> := <var:Z> + <var:j0> \end{verbatim} Assuming it to hold that $ <var:r> = <var:B> $ ( for integers $ <var:B> $ ) prior to the evaluation of this set of instructions it must be that $ <var:Z> = <nat:3> \cdot <var:B> + <nat:1> $ when series of commands has finished executing . \end{theorem} \begin{proof} Proving correctness for the code is given by this decorated series of commands . \begin{eqnarray} \{ <var:r> = <var:B> \} \\ <var:j1> := <var:r> ; \\ \{ <var:r> = <var:B> \land <var:j1> = <var:B> \} \end{eqnarray} Furthering executing our code yields : \begin{eqnarray} <var:j0> := <nat:1> ; \\ \{ <var:r> = <var:B> \land <var:j1> = <var:B> \land <var:j0> = <nat:1> \} \\ <var:j1> := <var:j1> * <nat:3> ; \\ \{ <var:r> = <var:B> \land <var:j1> = <nat:3> \times <var:B> \land <var:j0> = <nat:1> \} \\ <var:Z> := <var:j1> \\ \{ <var:r> = <var:B> \land <var:j0> = <nat:1> \land <var:Z> = <nat:3> \times <var:B> \} \\ <var:Z> := <var:Z> + <var:j0> \\ \{ <var:r> = <var:B> \land <var:Z> = <nat:3> \times <var:B> + <nat:1> \} \end{eqnarray} Applying usual Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:r> = <var:B> }} <var:j1> := <var:r> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:3> ; <var:Z> := <var:j1> <var:Z> := <var:Z> + <var:j0> {{ <var:Z> = <nat:3> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:j1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:j1> = <var:B> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:j1> = <nat:3> * <var:B> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:j0> = <nat:1> /\ <var:Z> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:Z> = <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 