\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:2> ; <var:X> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> . Allow that we have $ <var:u> = <var:d> $ before interpreting this series of commands , it holds that $ <var:X> = <nat:2> $ when program has terminated . \end{theorem} \begin{proof} The way to prove correctness for the list of commands can be accomplished through the below decorated series of instructions . \begin{eqnarray} \{ <var:u> = <var:d> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:u> = <var:d> \land <var:P0> = <nat:2> \} \\ <var:X> := <var:P0> \\ \{ <var:u> = <var:d> \land <var:X> = <nat:2> \} \end{eqnarray} The application of standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:2> ; <var:X> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:u> = <var:d> }} <def:poly> {{ <var:X> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:d> /\ <var:X> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 