\begin{document} \begin{theorem} Consider the following segment of code such that \begin{verbatim} <var:q0> := <nat:5> ; <var:q1> := <nat:1> ; <var:q1> := <var:q1> * <var:u> ; <var:q2> := <nat:3> ; <var:q2> := <var:q2> * <var:u> ; <var:q2> := <var:q2> * <var:u> ; <var:D> := <var:q2> ; <var:D> := <var:D> + <var:q1> ; <var:D> := <var:D> + <var:q0> \end{verbatim} Given it to be that $ <var:u> = <var:W> $ ( assuming some whole numbers $ <var:W> $ ) prior to evaluating our list of instructions it must be that we see $ <var:D> = <nat:3> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:5> $ once set of commands exits . \end{theorem} \begin{proof} The proof of the code segment is accomplished by standard Hoare techniques . Following , we have the environment update command \verb | <var:q0> := <nat:5> ; | . This forwards $ \{ <var:u> = <var:W> \} $ to the postcondition $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \} $ . Advancing to the proceeding step found in our series of instructions , the binding code \verb | <var:q1> := <nat:1> ; | . This forwards the condition $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \} $ into the condition $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:q1> = <nat:1> \} $ . This is sound with the assignment law found in Hoare reasoning . Advancing , the variable assignmet code yielding $ <var:q1> * <var:u> $ to $ <var:q1>$ . This code takes $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:q1> = <nat:1> \} $ as the condition $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:q1> = <nat:1> \cdot <var:W> \} $ . Moving forward to the next step , we have the variable update code \verb | <var:q2> := <nat:3> ; | . This forwards the condition $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:q1> = <nat:1> \cdot <var:W> \} $ into the condition $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:q1> = <nat:1> \cdot <var:W> \land <var:q2> = <nat:3> \} $ . This is rigorously given with the assignment rule obtained from usual Hoare logic . Immediately after , the statement yielding $ <var:q2> * <var:u> $ to $ <var:q2>$ . This code takes $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:q1> = <nat:1> \cdot <var:W> \land <var:q2> = <nat:3> \} $ toward the condition $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:q1> = <nat:1> \cdot <var:W> \land <var:q2> = <nat:3> \cdot <var:W> \} $ . Focusing on the upcoming statement seen in our set of commands , we see the environment update code \verb | <var:q2> := <var:q2> * <var:u> ; | . This line takes $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:q1> = <nat:1> \cdot <var:W> \land <var:q2> = <nat:3> \cdot <var:W> \} $ as the condition $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:q1> = <nat:1> \cdot <var:W> \land <var:q2> = <nat:3> \cdot <var:W> ^ <nat:2> \} $ . This is rigorously given using the assignment rule defined by usual Hoare logic . Advancing to the following line seen in the segment of code , we see the assignment command \verb | <var:D> := <var:q2> ; | . This moves the precondition $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:q1> = <nat:1> \cdot <var:W> \land <var:q2> = <nat:3> \cdot <var:W> ^ <nat:2> \} $ as the condition $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:q1> = <nat:1> \cdot <var:W> \land <var:D> = <nat:3> \cdot <var:W> ^ <nat:2> \} $ . This is sound by the assignment scheme from usual Hoare logic . Now , we have the variable assignmet code letting $ <var:D> + <var:q1> $ to $ <var:D>$ . This line moves the condition $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:q1> = <nat:1> \cdot <var:W> \land <var:D> = <nat:3> \cdot <var:W> ^ <nat:2> \} $ into $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:D> = <nat:3> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> \} $ . Moving on to the upcoming line seen in our segment of code , we see the environment update statement binding $ <var:D> + <var:q0$ into $ <var:D>$ . This moves the condition $ \{ <var:u> = <var:W> \land <var:q0> = <nat:5> \land <var:D> = <nat:3> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> \} $ as the condition $ \{ <var:u> = <var:W> \land <var:D> = <nat:3> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:5> \} $ . This is sound through the assignment inference rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:u> = <var:W> }} <var:q0> := <nat:5> ; <var:q1> := <nat:1> ; <var:q1> := <var:q1> * <var:u> ; <var:q2> := <nat:3> ; <var:q2> := <var:q2> * <var:u> ; <var:q2> := <var:q2> * <var:u> ; <var:D> := <var:q2> ; <var:D> := <var:D> + <var:q1> ; <var:D> := <var:D> + <var:q0> {{ <var:D> = <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:1> * <var:W> /\ <var:q2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:1> * <var:W> /\ <var:q2> = <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:1> * <var:W> /\ <var:q2> = <nat:3> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:q0> = <nat:5> /\ <var:q1> = <nat:1> * <var:W> /\ <var:D> = <nat:3> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:q0> = <nat:5> /\ <var:D> = <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:W> /\ <var:D> = <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 