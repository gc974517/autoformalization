\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} : \begin{verbatim} <var:n0> := <nat:8> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:O> ; <var:L> := <var:n1> ; <var:L> := <var:L> + <var:n0> \end{verbatim} Assume --- letting positive numbers $ <var:i> $ --- it to hold that $ <var:O> = <var:i> $ before executing this segment of code it holds that we see $ <var:L> = <nat:3> \cdot <var:i> + <nat:8> $ after set of instructions has exited . \end{theorem} \begin{proof} The proof of our code segment can be accomplished by the below decorated segment of code . \begin{eqnarray} \{ <var:O> = <var:i> \} \\ <var:n0> := <nat:8> ; \\ \{ <var:O> = <var:i> \land <var:n0> = <nat:8> \} \\ <var:n1> := <nat:3> ; \\ \{ <var:O> = <var:i> \land <var:n0> = <nat:8> \land <var:n1> = <nat:3> \} \\ <var:n1> := <var:n1> * <var:O> ; \\ \{ <var:O> = <var:i> \land <var:n0> = <nat:8> \land <var:n1> = <nat:3> * <var:i> \} \\ <var:L> := <var:n1> ; \\ \{ <var:O> = <var:i> \land <var:n0> = <nat:8> \land <var:L> = <nat:3> * <var:i> \} \\ <var:L> := <var:L> + <var:n0> \\ \{ <var:O> = <var:i> \land <var:L> = <nat:3> * <var:i> + <nat:8> \} \end{eqnarray} Applying typical Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:O> = <var:i> }} <var:n0> := <nat:8> ; <var:n1> := <nat:3> ; <var:n1> := <var:n1> * <var:O> ; <var:L> := <var:n1> ; <var:L> := <var:L> + <var:n0> {{ <var:L> = <nat:3> * <var:i> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:n0> = <nat:8> /\ <var:n1> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:n0> = <nat:8> /\ <var:L> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:i> /\ <var:L> = <nat:3> * <var:i> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 