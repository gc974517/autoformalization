\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:3> ; <var:N1> := <nat:2> ; <var:N1> := <var:N1> * <var:P> ; <var:N2> := <nat:1> ; <var:N2> := <var:N2> * <var:P> ; <var:N2> := <var:N2> * <var:P> ; <var:N3> := <nat:2> ; <var:N3> := <var:N3> * <var:P> ; <var:N3> := <var:N3> * <var:P> ; <var:N3> := <var:N3> * <var:P> ; <var:A> := <var:N3> ; <var:A> := <var:A> + <var:N2> ; <var:A> := <var:A> + <var:N1> ; <var:A> := <var:A> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:P> = <var:Z> $ prior to interpreting the code segment , it must be that $ <var:A> = <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:3> $ after program is done . \end{theorem} \begin{proof} Using standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:P> = <var:Z> \} \\ <var:N0> := <nat:3> ; \\ \{ <var:P> = <var:Z> \land <var:N0> = <nat:3> \} \\ <var:N1> := <nat:2> ; \\ \{ <var:P> = <var:Z> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \} \\ <var:N1> := <var:N1> * <var:P> ; \\ \{ <var:P> = <var:Z> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \times <var:Z> \} \\ <var:N2> := <nat:1> ; \\ \{ <var:P> = <var:Z> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \times <var:Z> \land <var:N2> = <nat:1> \} \\ <var:N2> := <var:N2> * <var:P> ; \\ \{ <var:P> = <var:Z> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \times <var:Z> \land <var:N2> = <nat:1> \times <var:Z> \} \\ <var:N2> := <var:N2> * <var:P> ; \\ \{ <var:P> = <var:Z> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \times <var:Z> \land <var:N2> = <nat:1> \times <var:Z> ^ <nat:2> \} \\ <var:N3> := <nat:2> ; \\ \{ <var:P> = <var:Z> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \times <var:Z> \land <var:N2> = <nat:1> \times <var:Z> ^ <nat:2> \land <var:N3> = <nat:2> \} \\ <var:N3> := <var:N3> * <var:P> ; \\ \{ <var:P> = <var:Z> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \times <var:Z> \land <var:N2> = <nat:1> \times <var:Z> ^ <nat:2> \land <var:N3> = <nat:2> \times <var:Z> \} \\ <var:N3> := <var:N3> * <var:P> ; \\ \{ <var:P> = <var:Z> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \times <var:Z> \land <var:N2> = <nat:1> \times <var:Z> ^ <nat:2> \land <var:N3> = <nat:2> \times <var:Z> ^ <nat:2> \} \\ <var:N3> := <var:N3> * <var:P> ; \\ \{ <var:P> = <var:Z> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \times <var:Z> \land <var:N2> = <nat:1> \times <var:Z> ^ <nat:2> \land <var:N3> = <nat:2> \times <var:Z> ^ <nat:3> \} \\ <var:A> := <var:N3> ; \\ \{ <var:P> = <var:Z> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \times <var:Z> \land <var:N2> = <nat:1> \times <var:Z> ^ <nat:2> \land <var:A> = <nat:2> \times <var:Z> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:N2> ; \\ \{ <var:P> = <var:Z> \land <var:N0> = <nat:3> \land <var:N1> = <nat:2> \times <var:Z> \land <var:A> = <nat:2> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:N1> ; \\ \{ <var:P> = <var:Z> \land <var:N0> = <nat:3> \land <var:A> = <nat:2> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> \} \\ <var:A> := <var:A> + <var:N0> \\ \{ <var:P> = <var:Z> \land <var:A> = <nat:2> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:3> \} \end{eqnarray} Hence , our code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N0> := <nat:3> ; <var:N1> := <nat:2> ; <var:N1> := <var:N1> * <var:P> ; <var:N2> := <nat:1> ; <var:N2> := <var:N2> * <var:P> ; <var:N2> := <var:N2> * <var:P> ; <var:N3> := <nat:2> ; <var:N3> := <var:N3> * <var:P> ; <var:N3> := <var:N3> * <var:P> ; <var:N3> := <var:N3> * <var:P> ; <var:A> := <var:N3> ; <var:A> := <var:A> + <var:N2> ; <var:A> := <var:A> + <var:N1> ; <var:A> := <var:A> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:P> = <var:Z> }} <def:poly> {{ <var:A> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:2> * <var:Z> /\ <var:N2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:2> * <var:Z> /\ <var:N2> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:2> * <var:Z> /\ <var:N2> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:2> * <var:Z> /\ <var:N2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:N3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:2> * <var:Z> /\ <var:N2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:2> * <var:Z> /\ <var:N2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:2> * <var:Z> /\ <var:N2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:2> * <var:Z> /\ <var:N2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:A> = <nat:2> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:2> * <var:Z> /\ <var:A> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:N0> = <nat:3> /\ <var:A> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:A> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 