\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:T0> := <nat:2> ; <var:T1> := <nat:8> ; <var:T1> := <var:T1> * <var:w> ; <var:T2> := <nat:1> ; <var:T2> := <var:T2> * <var:w> ; <var:T2> := <var:T2> * <var:w> ; <var:T3> := <nat:8> ; <var:T3> := <var:T3> * <var:w> ; <var:T3> := <var:T3> * <var:w> ; <var:T3> := <var:T3> * <var:w> ; <var:Z> := <var:T3> ; <var:Z> := <var:Z> + <var:T2> ; <var:Z> := <var:Z> + <var:T1> ; <var:Z> := <var:Z> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:w> = <var:N> $ before interpreting our series of instructions it must be that we have $ <var:Z> = <nat:8> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:8> \cdot <var:N> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our set of commands can be given with this decorated list of commands . \begin{eqnarray} \{ <var:w> = <var:N> \} \\ <var:T0> := <nat:2> ; \\ \{ <var:w> = <var:N> \land <var:T0> = <nat:2> \} \\ <var:T1> := <nat:8> ; \\ \{ <var:w> = <var:N> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \} \\ <var:T1> := <var:T1> * <var:w> ; \\ \{ <var:w> = <var:N> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:N> \} \\ <var:T2> := <nat:1> ; \\ \{ <var:w> = <var:N> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:N> \land <var:T2> = <nat:1> \} \\ <var:T2> := <var:T2> * <var:w> ; \\ \{ <var:w> = <var:N> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:N> \land <var:T2> = <nat:1> \times <var:N> \} \\ <var:T2> := <var:T2> * <var:w> ; \\ \{ <var:w> = <var:N> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:N> \land <var:T2> = <nat:1> \times <var:N> ^ <nat:2> \} \\ <var:T3> := <nat:8> ; \\ \{ <var:w> = <var:N> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:N> \land <var:T2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:T3> = <nat:8> \} \\ <var:T3> := <var:T3> * <var:w> ; \\ \{ <var:w> = <var:N> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:N> \land <var:T2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:T3> = <nat:8> \times <var:N> \} \\ <var:T3> := <var:T3> * <var:w> ; \\ \{ <var:w> = <var:N> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:N> \land <var:T2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:T3> = <nat:8> \times <var:N> ^ <nat:2> \} \\ <var:T3> := <var:T3> * <var:w> ; \\ \{ <var:w> = <var:N> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:N> \land <var:T2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:T3> = <nat:8> \times <var:N> ^ <nat:3> \} \\ <var:Z> := <var:T3> ; \\ \{ <var:w> = <var:N> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:N> \land <var:T2> = <nat:1> \times <var:N> ^ <nat:2> \land <var:Z> = <nat:8> \times <var:N> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:T2> ; \\ \{ <var:w> = <var:N> \land <var:T0> = <nat:2> \land <var:T1> = <nat:8> \times <var:N> \land <var:Z> = <nat:8> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:T1> ; \\ \{ <var:w> = <var:N> \land <var:T0> = <nat:2> \land <var:Z> = <nat:8> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:8> \times <var:N> \} \\ <var:Z> := <var:Z> + <var:T0> \\ \{ <var:w> = <var:N> \land <var:Z> = <nat:8> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:8> \times <var:N> + <nat:2> \} \end{eqnarray} Utilizing Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T0> := <nat:2> ; <var:T1> := <nat:8> ; <var:T1> := <var:T1> * <var:w> ; <var:T2> := <nat:1> ; <var:T2> := <var:T2> * <var:w> ; <var:T2> := <var:T2> * <var:w> ; <var:T3> := <nat:8> ; <var:T3> := <var:T3> * <var:w> ; <var:T3> := <var:T3> * <var:w> ; <var:T3> := <var:T3> * <var:w> ; <var:Z> := <var:T3> ; <var:Z> := <var:Z> + <var:T2> ; <var:Z> := <var:Z> + <var:T1> ; <var:Z> := <var:Z> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:w> = <var:N> }} <def:poly> {{ <var:Z> = <nat:8> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:8> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:N> /\ <var:T2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:N> /\ <var:T2> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:N> /\ <var:T2> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:N> /\ <var:T2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:T3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:N> /\ <var:T2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:T3> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:N> /\ <var:T2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:T3> = <nat:8> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:N> /\ <var:T2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:T3> = <nat:8> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:N> /\ <var:T2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:Z> = <nat:8> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:8> * <var:N> /\ <var:Z> = <nat:8> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:T0> = <nat:2> /\ <var:Z> = <nat:8> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:N> /\ <var:Z> = <nat:8> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:8> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 