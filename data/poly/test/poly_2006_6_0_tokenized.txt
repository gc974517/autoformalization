\begin{document} \begin{theorem} Define a set of instructions as follows \begin{verbatim} <var:o0> := <nat:5> ; <var:o2> := <nat:8> ; <var:o2> := <var:o2> * <var:K> ; <var:o2> := <var:o2> * <var:K> ; <var:D> := <var:o2> ; <var:D> := <var:D> + <var:o0> \end{verbatim} Assume that we have $ <var:K> = <var:M> $ ahead of executing our program , it must be that we have $ <var:D> = <nat:8> \cdot <var:M> ^ <nat:2> + <nat:5> $ once set of commands has terminated . \end{theorem} \begin{proof} The argument for our code is demonstrated by usual Hoare logic . Jumping to the following statement contained in our series of instructions , we see the environment update statement letting $ <nat:5> $ into $ <var:o0>$ . This line transfers the precondition $ \{ <var:K> = <var:M> \} $ to $ \{ <var:K> = <var:M> \land <var:o0> = <nat:5> \} $ . Next , we see the variable binding statement assigning $ <nat:8> $ to $ <var:o2>$ . This redefines the precondition $ \{ <var:K> = <var:M> \land <var:o0> = <nat:5> \} $ as $ \{ <var:K> = <var:M> \land <var:o0> = <nat:5> \land <var:o2> = <nat:8> \} $ . Stepping forward , we see the variable assignmet code giving $ <var:o2> * <var:K> $ toward $ <var:o2>$ . This code transfers the precondition $ \{ <var:K> = <var:M> \land <var:o0> = <nat:5> \land <var:o2> = <nat:8> \} $ to the condition $ \{ <var:K> = <var:M> \land <var:o0> = <nat:5> \land <var:o2> = <nat:8> * <var:M> \} $ . This is known to be sound through the assignment law of typical Hoare logic . Moving on , the variable binding line \verb | <var:o2> := <var:o2> * <var:K> ; | . This redefines the condition $ \{ <var:K> = <var:M> \land <var:o0> = <nat:5> \land <var:o2> = <nat:8> * <var:M> \} $ to the condition $ \{ <var:K> = <var:M> \land <var:o0> = <nat:5> \land <var:o2> = <nat:8> * <var:M> ^ <nat:2> \} $ . Taking a look at the next statement found in the list of instructions , the binding statement assigning $ <var:o2> $ into $ <var:D>$ . This takes the precondition $ \{ <var:K> = <var:M> \land <var:o0> = <nat:5> \land <var:o2> = <nat:8> * <var:M> ^ <nat:2> \} $ to the condition $ \{ <var:K> = <var:M> \land <var:o0> = <nat:5> \land <var:D> = <nat:8> * <var:M> ^ <nat:2> \} $ . Moving forward to the upcoming bit of code contained in our series of commands , the line \verb | <var:D> := <var:D> + <var:o0> | . This moves $ \{ <var:K> = <var:M> \land <var:o0> = <nat:5> \land <var:D> = <nat:8> * <var:M> ^ <nat:2> \} $ into $ \{ <var:K> = <var:M> \land <var:D> = <nat:8> * <var:M> ^ <nat:2> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:K> = <var:M> }} <var:o0> := <nat:5> ; <var:o2> := <nat:8> ; <var:o2> := <var:o2> * <var:K> ; <var:o2> := <var:o2> * <var:K> ; <var:D> := <var:o2> ; <var:D> := <var:D> + <var:o0> {{ <var:D> = <nat:8> * <var:M> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:o0> = <nat:5> /\ <var:o2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:o0> = <nat:5> /\ <var:o2> = <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:o0> = <nat:5> /\ <var:o2> = <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:o0> = <nat:5> /\ <var:D> = <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:M> /\ <var:D> = <nat:8> * <var:M> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 