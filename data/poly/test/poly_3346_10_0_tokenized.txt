\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} such that \begin{verbatim} <var:f0> := <nat:6> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:W> ; <var:f3> := <nat:1> ; <var:f3> := <var:f3> * <var:W> ; <var:f3> := <var:f3> * <var:W> ; <var:f3> := <var:f3> * <var:W> ; <var:I> := <var:f3> ; <var:I> := <var:I> + <var:f1> ; <var:I> := <var:I> + <var:f0> \end{verbatim} Assume it to be that $ <var:W> = <var:H> $ before the evaluation of our segment of code it follows that we have $ <var:I> = <nat:1> \times <var:H> ^ <nat:3> + <nat:8> \times <var:H> + <nat:6> $ once set of instructions has finished executing . \end{theorem} \begin{proof} Arguing the correctness of the list of commands can be shown through typical Hoare techniques . After , \begin{eqnarray} \{ <var:W> = <var:H> \} \, <var:f0> := <nat:6> \, \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \} \\ \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \} \, <var:f1> := <nat:8> \, \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \} \\ \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \} \, <var:f1> := <var:f1> * <var:W> \, \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \times <var:H> \} \\ \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \times <var:H> \} \, <var:f3> := <nat:1> \, \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \times <var:H> \land <var:f3> = <nat:1> \} \\ \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \times <var:H> \land <var:f3> = <nat:1> \} \, <var:f3> := <var:f3> * <var:W> \, \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \times <var:H> \land <var:f3> = <nat:1> \times <var:H> \} \\ \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \times <var:H> \land <var:f3> = <nat:1> \times <var:H> \} \, <var:f3> := <var:f3> * <var:W> \, \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \times <var:H> \land <var:f3> = <nat:1> \times <var:H> ^ <nat:2> \} \\ \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \times <var:H> \land <var:f3> = <nat:1> \times <var:H> ^ <nat:2> \} \, <var:f3> := <var:f3> * <var:W> \, \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \times <var:H> \land <var:f3> = <nat:1> \times <var:H> ^ <nat:3> \} \\ \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \times <var:H> \land <var:f3> = <nat:1> \times <var:H> ^ <nat:3> \} \, <var:I> := <var:f3> \, \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \times <var:H> \land <var:I> = <nat:1> \times <var:H> ^ <nat:3> \} \end{eqnarray} Moving forward to the subsequent statements in our list of commands , \begin{eqnarray} \{ <var:W> = <var:H> \} \, <var:f0> := <nat:6> \, \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \} \\ \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \} \, <var:f1> := <nat:8> \, \{ <var:W> = <var:H> \land <var:f0> = <nat:6> \land <var:f1> = <nat:8> \} \end{eqnarray} This is given using the environment update rule given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:W> = <var:H> }} <var:f0> := <nat:6> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:W> ; <var:f3> := <nat:1> ; <var:f3> := <var:f3> * <var:W> ; <var:f3> := <var:f3> * <var:W> ; <var:f3> := <var:f3> * <var:W> ; <var:I> := <var:f3> ; <var:I> := <var:I> + <var:f1> ; <var:I> := <var:I> + <var:f0> {{ <var:I> = <nat:1> * <var:H> ^ <nat:3> + <nat:8> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:8> * <var:H> /\ <var:f3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:8> * <var:H> /\ <var:f3> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:8> * <var:H> /\ <var:f3> = <nat:1> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:8> * <var:H> /\ <var:f3> = <nat:1> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:8> * <var:H> /\ <var:I> = <nat:1> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:f0> = <nat:6> /\ <var:I> = <nat:1> * <var:H> ^ <nat:3> + <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:H> /\ <var:I> = <nat:1> * <var:H> ^ <nat:3> + <nat:8> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 