\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:G0> := <nat:8> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:w> ; <var:B> := <var:G1> ; <var:B> := <var:B> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:w> = <var:s> $ before the execution of this code it must be that $ <var:B> = <nat:4> \cdot <var:s> + <nat:8> $ once list of instructions executes . \end{theorem} \begin{proof} The argument for our code is done through standard Hoare reasoning . Shifting focus toward the subsequent statement seen in the series of instructions , we have the environment update code binding $ <nat:8> $ to $ <var:G0>$ . This statement moves the condition $ \{ <var:w> = <var:s> \} $ to the postcondition $ \{ <var:w> = <var:s> \land <var:G0> = <nat:8> \} $ . Further , we see the variable update code \verb | <var:G1> := <nat:4> ; | . This code moves the precondition $ \{ <var:w> = <var:s> \land <var:G0> = <nat:8> \} $ into the postcondition $ \{ <var:w> = <var:s> \land <var:G0> = <nat:8> \land <var:G1> = <nat:4> \} $ . Immediately after , the assignment line \verb | <var:G1> := <var:G1> * <var:w> ; | . This code advances the precondition $ \{ <var:w> = <var:s> \land <var:G0> = <nat:8> \land <var:G1> = <nat:4> \} $ to the postcondition $ \{ <var:w> = <var:s> \land <var:G0> = <nat:8> \land <var:G1> = <nat:4> \cdot <var:s> \} $ . Paying attention to the following bit of code seen in the series of commands , we have the binding command \verb | <var:B> := <var:G1> ; | . This command takes the condition $ \{ <var:w> = <var:s> \land <var:G0> = <nat:8> \land <var:G1> = <nat:4> \cdot <var:s> \} $ into the postcondition $ \{ <var:w> = <var:s> \land <var:G0> = <nat:8> \land <var:B> = <nat:4> \cdot <var:s> \} $ . Honing in on the subsequent step in our program , we see the variable update statement \verb | <var:B> := <var:B> + <var:G0> | . This moves the condition $ \{ <var:w> = <var:s> \land <var:G0> = <nat:8> \land <var:B> = <nat:4> \cdot <var:s> \} $ toward $ \{ <var:w> = <var:s> \land <var:B> = <nat:4> \cdot <var:s> + <nat:8> \} $ . This is given by the assignment rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:8> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:w> ; <var:B> := <var:G1> ; <var:B> := <var:B> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:w> = <var:s> }} <def:poly> {{ <var:B> = <nat:4> * <var:s> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:G0> = <nat:8> /\ <var:B> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:B> = <nat:4> * <var:s> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 