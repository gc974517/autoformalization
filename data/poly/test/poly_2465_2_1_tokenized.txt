\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:3> ; <var:z> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> in \emph{Imp} . Assume that $ <var:Q> = <var:H> $ before interpreting this code it follows that we see $ <var:z> = <nat:3> $ after code is done executing . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions is demonstrated with Hoare logic . Moving forward to the next line found in our code segment , we have the binding statement assigning $ <nat:3> $ toward $ <var:m0>$ . This forwards the condition $ \{ <var:Q> = <var:H> \} $ to the condition $ \{ <var:Q> = <var:H> \land <var:m0> = <nat:3> \} $ . This is ensured by the assignment law defined by typical Hoare logic . Jumping to the upcoming piece of code seen in the series of instructions , we see the environment update command \verb | <var:z> := <var:m0> | . This transfers $ \{ <var:Q> = <var:H> \land <var:m0> = <nat:3> \} $ toward the condition $ \{ <var:Q> = <var:H> \land <var:z> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:3> ; <var:z> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Q> = <var:H> }} <def:poly> {{ <var:z> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:H> /\ <var:z> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 