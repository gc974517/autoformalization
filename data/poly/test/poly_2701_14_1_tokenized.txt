\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J1> := <var:r> ; <var:J2> := <var:J1> * <var:r> ; <var:J3> := <var:J2> * <var:r> ; <var:J4> := <var:J3> * <var:r> ; <var:J0> := <nat:5> ; <var:J1> := <var:J1> * <nat:7> ; <var:J2> := <var:J2> * <nat:1> ; <var:J3> := <var:J3> * <nat:4> ; <var:J4> := <var:J4> * <nat:6> ; <var:E> := <var:J4> <var:E> := <var:E> + <var:J3> <var:E> := <var:E> + <var:J2> <var:E> := <var:E> + <var:J1> <var:E> := <var:E> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> . Given it to hold that $ <var:r> = <var:l> $ , assuming some natural numbers $ <var:l> $ , prior to interpreting this set of commands then we have $ <var:E> = <nat:6> \cdot <var:l> ^ <nat:4> + <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:7> \cdot <var:l> + <nat:5> $ after program has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:r> = <var:l> \} \\ <var:J1> := <var:r> ; \\ \{ <var:r> = <var:l> \land <var:J1> = <var:l> \} \\ <var:J2> := <var:J1> * <var:r> ; \\ \{ <var:r> = <var:l> \land <var:J1> = <var:l> \land <var:J2> = <var:l> ^ <nat:2> \} \\ <var:J3> := <var:J2> * <var:r> ; \\ \{ <var:r> = <var:l> \land <var:J1> = <var:l> \land <var:J2> = <var:l> ^ <nat:2> \land <var:J3> = <var:l> ^ <nat:3> \} \\ <var:J4> := <var:J3> * <var:r> ; \\ \{ <var:r> = <var:l> \land <var:J1> = <var:l> \land <var:J2> = <var:l> ^ <nat:2> \land <var:J3> = <var:l> ^ <nat:3> \land <var:J4> = <var:l> ^ <nat:4> \} \\ <var:J0> := <nat:5> ; \\ \{ <var:r> = <var:l> \land <var:J1> = <var:l> \land <var:J2> = <var:l> ^ <nat:2> \land <var:J3> = <var:l> ^ <nat:3> \land <var:J4> = <var:l> ^ <nat:4> \land <var:J0> = <nat:5> \} \\ <var:J1> := <var:J1> * <nat:7> ; \\ \{ <var:r> = <var:l> \land <var:J1> = <nat:7> \times <var:l> \land <var:J2> = <var:l> ^ <nat:2> \land <var:J3> = <var:l> ^ <nat:3> \land <var:J4> = <var:l> ^ <nat:4> \land <var:J0> = <nat:5> \} \\ <var:J2> := <var:J2> * <nat:1> ; \\ \{ <var:r> = <var:l> \land <var:J1> = <nat:7> \times <var:l> \land <var:J2> = <nat:1> \times <var:l> ^ <nat:2> \land <var:J3> = <var:l> ^ <nat:3> \land <var:J4> = <var:l> ^ <nat:4> \land <var:J0> = <nat:5> \} \\ <var:J3> := <var:J3> * <nat:4> ; \\ \{ <var:r> = <var:l> \land <var:J1> = <nat:7> \times <var:l> \land <var:J2> = <nat:1> \times <var:l> ^ <nat:2> \land <var:J3> = <nat:4> \times <var:l> ^ <nat:3> \land <var:J4> = <var:l> ^ <nat:4> \land <var:J0> = <nat:5> \} \\ <var:J4> := <var:J4> * <nat:6> ; \\ \{ <var:r> = <var:l> \land <var:J1> = <nat:7> \times <var:l> \land <var:J2> = <nat:1> \times <var:l> ^ <nat:2> \land <var:J3> = <nat:4> \times <var:l> ^ <nat:3> \land <var:J4> = <nat:6> \times <var:l> ^ <nat:4> \land <var:J0> = <nat:5> \} \\ <var:E> := <var:J4> \\ \{ <var:r> = <var:l> \land <var:J1> = <nat:7> \times <var:l> \land <var:J2> = <nat:1> \times <var:l> ^ <nat:2> \land <var:J3> = <nat:4> \times <var:l> ^ <nat:3> \land <var:J0> = <nat:5> \land <var:E> = <nat:6> \times <var:l> ^ <nat:4> \} \\ <var:E> := <var:E> + <var:J3> \\ \{ <var:r> = <var:l> \land <var:J1> = <nat:7> \times <var:l> \land <var:J2> = <nat:1> \times <var:l> ^ <nat:2> \land <var:J0> = <nat:5> \land <var:E> = <nat:6> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:J2> \\ \{ <var:r> = <var:l> \land <var:J1> = <nat:7> \times <var:l> \land <var:J0> = <nat:5> \land <var:E> = <nat:6> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:J1> \\ \{ <var:r> = <var:l> \land <var:J0> = <nat:5> \land <var:E> = <nat:6> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:7> \times <var:l> \} \\ <var:E> := <var:E> + <var:J0> \\ \{ <var:r> = <var:l> \land <var:E> = <nat:6> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:7> \times <var:l> + <nat:5> \} \end{eqnarray} The application of Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <var:J4> : string := " <var:J4> " . Definition <def:poly> := <var:J1> := <var:r> ; <var:J2> := <var:J1> * <var:r> ; <var:J3> := <var:J2> * <var:r> ; <var:J4> := <var:J3> * <var:r> ; <var:J0> := <nat:5> ; <var:J1> := <var:J1> * <nat:7> ; <var:J2> := <var:J2> * <nat:1> ; <var:J3> := <var:J3> * <nat:4> ; <var:J4> := <var:J4> * <nat:6> ; <var:E> := <var:J4> <var:E> := <var:E> + <var:J3> <var:E> := <var:E> + <var:J2> <var:E> := <var:E> + <var:J1> <var:E> := <var:E> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:r> = <var:l> }} <def:poly> {{ <var:E> = <nat:6> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:7> * <var:l> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:J1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:J1> = <var:l> /\ <var:J2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:J1> = <var:l> /\ <var:J2> = <var:l> ^ <nat:2> /\ <var:J3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:J1> = <var:l> /\ <var:J2> = <var:l> ^ <nat:2> /\ <var:J3> = <var:l> ^ <nat:3> /\ <var:J4> = <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:J1> = <var:l> /\ <var:J2> = <var:l> ^ <nat:2> /\ <var:J3> = <var:l> ^ <nat:3> /\ <var:J4> = <var:l> ^ <nat:4> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:J1> = <nat:7> * <var:l> /\ <var:J2> = <var:l> ^ <nat:2> /\ <var:J3> = <var:l> ^ <nat:3> /\ <var:J4> = <var:l> ^ <nat:4> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:J1> = <nat:7> * <var:l> /\ <var:J2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:J3> = <var:l> ^ <nat:3> /\ <var:J4> = <var:l> ^ <nat:4> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:J1> = <nat:7> * <var:l> /\ <var:J2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:J3> = <nat:4> * <var:l> ^ <nat:3> /\ <var:J4> = <var:l> ^ <nat:4> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:J1> = <nat:7> * <var:l> /\ <var:J2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:J3> = <nat:4> * <var:l> ^ <nat:3> /\ <var:J4> = <nat:6> * <var:l> ^ <nat:4> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:J1> = <nat:7> * <var:l> /\ <var:J2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:J3> = <nat:4> * <var:l> ^ <nat:3> /\ <var:J0> = <nat:5> /\ <var:E> = <nat:6> * <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:J1> = <nat:7> * <var:l> /\ <var:J2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:J0> = <nat:5> /\ <var:E> = <nat:6> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:J1> = <nat:7> * <var:l> /\ <var:J0> = <nat:5> /\ <var:E> = <nat:6> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:J0> = <nat:5> /\ <var:E> = <nat:6> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:l> /\ <var:E> = <nat:6> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:7> * <var:l> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 