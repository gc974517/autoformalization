\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q1> := <var:O> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:5> ; <var:o> := <var:Q1> <var:o> := <var:o> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allow , given $ <var:A> \in \mathbb{N} $ , that $ <var:O> = <var:A> $ ahead of running our series of commands then $ <var:o> = <nat:5> * <var:A> + <nat:4> $ once series of instructions is done executing . \end{theorem} \begin{proof} Using usual Hoare logic gives : \begin{eqnarray} \{ <var:O> = <var:A> \} \\ <var:Q1> := <var:O> ; \\ \{ <var:O> = <var:A> \land <var:Q1> = <var:A> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:O> = <var:A> \land <var:Q1> = <var:A> \land <var:Q0> = <nat:4> \} \\ <var:Q1> := <var:Q1> * <nat:5> ; \\ \{ <var:O> = <var:A> \land <var:Q1> = <nat:5> * <var:A> \land <var:Q0> = <nat:4> \} \\ <var:o> := <var:Q1> \\ \{ <var:O> = <var:A> \land <var:Q0> = <nat:4> \land <var:o> = <nat:5> * <var:A> \} \\ <var:o> := <var:o> + <var:Q0> \\ \{ <var:O> = <var:A> \land <var:o> = <nat:5> * <var:A> + <nat:4> \} \end{eqnarray} As a result , this list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:O> ; <var:Q0> := <nat:4> ; <var:Q1> := <var:Q1> * <nat:5> ; <var:o> := <var:Q1> <var:o> := <var:o> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:O> = <var:A> }} <def:poly> {{ <var:o> = <nat:5> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:Q1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:Q1> = <var:A> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:Q1> = <nat:5> * <var:A> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:Q0> = <nat:4> /\ <var:o> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:o> = <nat:5> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 