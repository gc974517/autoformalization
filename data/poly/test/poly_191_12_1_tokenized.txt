\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:V1> := <var:e> ; <var:V2> := <var:V1> * <var:e> ; <var:V3> := <var:V2> * <var:e> ; <var:V4> := <var:V3> * <var:e> ; <var:V0> := <nat:2> ; <var:V2> := <var:V2> * <nat:2> ; <var:V3> := <var:V3> * <nat:4> ; <var:V4> := <var:V4> * <nat:1> ; <var:O> := <var:V4> <var:O> := <var:O> + <var:V3> <var:O> := <var:O> + <var:V2> <var:O> := <var:O> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Assume it to be that $ <var:e> = <var:K> $ --- given every positive numbers $ <var:K> $ --- prior to executing our segment of code it holds that we have $ <var:O> = <nat:1> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> $ when series of commands has terminated . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is clear using Hoare techniques . Moving on to the next step , we see the assignment line defining $ <var:e> $ toward $ <var:V1>$ . This forwards the condition $ \{ <var:e> = <var:K> \} $ to the condition $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \} $ . Advancing to the next step , we see the variable assignmet statement yielding $ <var:V1> * <var:e> $ to $ <var:V2>$ . This code redefines $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \} $ to $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <var:K> ^ <nat:2> \} $ . Now , the assignment code assigning $ <var:V2> * <var:e> $ as $ <var:V3>$ . This forwards $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <var:K> ^ <nat:2> \} $ to the postcondition $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <var:K> ^ <nat:2> \land <var:V3> = <var:K> ^ <nat:3> \} $ . Taking a look at the next line found in the series of instructions , we see the variable assignmet statement \verb | <var:V4> := <var:V3> * <var:e> ; | . This command transfers the precondition $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <var:K> ^ <nat:2> \land <var:V3> = <var:K> ^ <nat:3> \} $ as the postcondition $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <var:K> ^ <nat:2> \land <var:V3> = <var:K> ^ <nat:3> \land <var:V4> = <var:K> ^ <nat:4> \} $ . This is ensured by the assignment law given by standard Hoare reasoning . Focusing on the upcoming bit of code seen in our series of instructions , the variable binding statement defining $ <nat:2> $ into $ <var:V0>$ . This moves $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <var:K> ^ <nat:2> \land <var:V3> = <var:K> ^ <nat:3> \land <var:V4> = <var:K> ^ <nat:4> \} $ toward $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <var:K> ^ <nat:2> \land <var:V3> = <var:K> ^ <nat:3> \land <var:V4> = <var:K> ^ <nat:4> \land <var:V0> = <nat:2> \} $ . Looking at the next bit of code in our set of commands , we have the assignment command \verb | <var:V2> := <var:V2> * <nat:2> ; | . This takes $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <var:K> ^ <nat:2> \land <var:V3> = <var:K> ^ <nat:3> \land <var:V4> = <var:K> ^ <nat:4> \land <var:V0> = <nat:2> \} $ to $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:V3> = <var:K> ^ <nat:3> \land <var:V4> = <var:K> ^ <nat:4> \land <var:V0> = <nat:2> \} $ . Now , we have the environment update line assigning $ <var:V3> * <nat:4> $ toward $ <var:V3>$ . This command advances $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:V3> = <var:K> ^ <nat:3> \land <var:V4> = <var:K> ^ <nat:4> \land <var:V0> = <nat:2> \} $ to the condition $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:V3> = <nat:4> \cdot <var:K> ^ <nat:3> \land <var:V4> = <var:K> ^ <nat:4> \land <var:V0> = <nat:2> \} $ . Considering the upcoming line in our list of commands , the binding code \verb | <var:V4> := <var:V4> * <nat:1> ; | . This moves the condition $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:V3> = <nat:4> \cdot <var:K> ^ <nat:3> \land <var:V4> = <var:K> ^ <nat:4> \land <var:V0> = <nat:2> \} $ to the postcondition $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:V3> = <nat:4> \cdot <var:K> ^ <nat:3> \land <var:V4> = <nat:1> \cdot <var:K> ^ <nat:4> \land <var:V0> = <nat:2> \} $ . This is shown by the assignment inference rule found in usual Hoare techniques . Moving forward , the environment update command yielding $ <var:V4$ into $ <var:O>$ . This forwards the precondition $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:V3> = <nat:4> \cdot <var:K> ^ <nat:3> \land <var:V4> = <nat:1> \cdot <var:K> ^ <nat:4> \land <var:V0> = <nat:2> \} $ into the postcondition $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:V3> = <nat:4> \cdot <var:K> ^ <nat:3> \land <var:V0> = <nat:2> \land <var:O> = <nat:1> \cdot <var:K> ^ <nat:4> \} $ . Focusing on the proceeding step found in the code segment , we have the assignment code defining $ <var:O> + <var:V3$ as $ <var:O>$ . This statement advances the precondition $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:V3> = <nat:4> \cdot <var:K> ^ <nat:3> \land <var:V0> = <nat:2> \land <var:O> = <nat:1> \cdot <var:K> ^ <nat:4> \} $ to $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:V0> = <nat:2> \land <var:O> = <nat:1> \cdot <var:K> ^ <nat:4> + <nat:4> \cdot <var:K> ^ <nat:3> \} $ . Paying attention to the next step contained in our code , we have the command \verb | <var:O> := <var:O> + <var:V2> | . This redefines the condition $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V2> = <nat:2> \cdot <var:K> ^ <nat:2> \land <var:V0> = <nat:2> \land <var:O> = <nat:1> \cdot <var:K> ^ <nat:4> + <nat:4> \cdot <var:K> ^ <nat:3> \} $ as the postcondition $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V0> = <nat:2> \land <var:O> = <nat:1> \cdot <var:K> ^ <nat:4> + <nat:4> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> \} $ . This is guaranteed through the assignment rule defined in standard Hoare logic . Keeping momentum , the variable assignmet statement \verb | <var:O> := <var:O> + <var:V0> | . This code transfers $ \{ <var:e> = <var:K> \land <var:V1> = <var:K> \land <var:V0> = <nat:2> \land <var:O> = <nat:1> \cdot <var:K> ^ <nat:4> + <nat:4> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> \} $ to the condition $ \{ <var:e> = <var:K> \land <var:O> = <nat:1> \cdot <var:K> ^ <nat:4> + <nat:4> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <var:V4> : string := " <var:V4> " . Definition <def:poly> := <var:V1> := <var:e> ; <var:V2> := <var:V1> * <var:e> ; <var:V3> := <var:V2> * <var:e> ; <var:V4> := <var:V3> * <var:e> ; <var:V0> := <nat:2> ; <var:V2> := <var:V2> * <nat:2> ; <var:V3> := <var:V3> * <nat:4> ; <var:V4> := <var:V4> * <nat:1> ; <var:O> := <var:V4> <var:O> := <var:O> + <var:V3> <var:O> := <var:O> + <var:V2> <var:O> := <var:O> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:e> = <var:K> }} <def:poly> {{ <var:O> = <nat:1> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:V1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:V1> = <var:K> /\ <var:V2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:V1> = <var:K> /\ <var:V2> = <var:K> ^ <nat:2> /\ <var:V3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:V1> = <var:K> /\ <var:V2> = <var:K> ^ <nat:2> /\ <var:V3> = <var:K> ^ <nat:3> /\ <var:V4> = <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:V1> = <var:K> /\ <var:V2> = <var:K> ^ <nat:2> /\ <var:V3> = <var:K> ^ <nat:3> /\ <var:V4> = <var:K> ^ <nat:4> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:V1> = <var:K> /\ <var:V2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:V3> = <var:K> ^ <nat:3> /\ <var:V4> = <var:K> ^ <nat:4> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:V1> = <var:K> /\ <var:V2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:V3> = <nat:4> * <var:K> ^ <nat:3> /\ <var:V4> = <var:K> ^ <nat:4> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:V1> = <var:K> /\ <var:V2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:V3> = <nat:4> * <var:K> ^ <nat:3> /\ <var:V4> = <nat:1> * <var:K> ^ <nat:4> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:V1> = <var:K> /\ <var:V2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:V3> = <nat:4> * <var:K> ^ <nat:3> /\ <var:V0> = <nat:2> /\ <var:O> = <nat:1> * <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:V1> = <var:K> /\ <var:V2> = <nat:2> * <var:K> ^ <nat:2> /\ <var:V0> = <nat:2> /\ <var:O> = <nat:1> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:V1> = <var:K> /\ <var:V0> = <nat:2> /\ <var:O> = <nat:1> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:O> = <nat:1> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 