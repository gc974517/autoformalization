\begin{document} \begin{theorem} We define a segment of code such that \begin{verbatim} <var:k1> := <var:n> ; <var:k2> := <var:k1> * <var:n> ; <var:k3> := <var:k2> * <var:n> ; <var:k0> := <nat:6> ; <var:k1> := <var:k1> * <nat:1> ; <var:k2> := <var:k2> * <nat:1> ; <var:k3> := <var:k3> * <nat:8> ; <var:X> := <var:k3> <var:X> := <var:X> + <var:k2> <var:X> := <var:X> + <var:k1> <var:X> := <var:X> + <var:k0> \end{verbatim} Given $ <var:n> = <var:Z> $ ahead of evaluating this set of instructions it follows that we see $ <var:X> = <nat:8> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:6> $ when segment of code has finished . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning results in : \begin{eqnarray} \{ <var:n> = <var:Z> \} \\ <var:k1> := <var:n> ; \\ \{ <var:n> = <var:Z> \land <var:k1> = <var:Z> \} \\ <var:k2> := <var:k1> * <var:n> ; \\ \{ <var:n> = <var:Z> \land <var:k1> = <var:Z> \land <var:k2> = <var:Z> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:n> ; \\ \{ <var:n> = <var:Z> \land <var:k1> = <var:Z> \land <var:k2> = <var:Z> ^ <nat:2> \land <var:k3> = <var:Z> ^ <nat:3> \} \\ <var:k0> := <nat:6> ; \\ \{ <var:n> = <var:Z> \land <var:k1> = <var:Z> \land <var:k2> = <var:Z> ^ <nat:2> \land <var:k3> = <var:Z> ^ <nat:3> \land <var:k0> = <nat:6> \} \\ <var:k1> := <var:k1> * <nat:1> ; \\ \{ <var:n> = <var:Z> \land <var:k1> = <nat:1> * <var:Z> \land <var:k2> = <var:Z> ^ <nat:2> \land <var:k3> = <var:Z> ^ <nat:3> \land <var:k0> = <nat:6> \} \\ <var:k2> := <var:k2> * <nat:1> ; \\ \{ <var:n> = <var:Z> \land <var:k1> = <nat:1> * <var:Z> \land <var:k2> = <nat:1> * <var:Z> ^ <nat:2> \land <var:k3> = <var:Z> ^ <nat:3> \land <var:k0> = <nat:6> \} \\ <var:k3> := <var:k3> * <nat:8> ; \\ \{ <var:n> = <var:Z> \land <var:k1> = <nat:1> * <var:Z> \land <var:k2> = <nat:1> * <var:Z> ^ <nat:2> \land <var:k3> = <nat:8> * <var:Z> ^ <nat:3> \land <var:k0> = <nat:6> \} \end{eqnarray} Advancing evaluating our code segment gives : \begin{eqnarray} <var:X> := <var:k3> \\ \{ <var:n> = <var:Z> \land <var:k1> = <nat:1> * <var:Z> \land <var:k2> = <nat:1> * <var:Z> ^ <nat:2> \land <var:k0> = <nat:6> \land <var:X> = <nat:8> * <var:Z> ^ <nat:3> \} \\ <var:X> := <var:X> + <var:k2> \\ \{ <var:n> = <var:Z> \land <var:k1> = <nat:1> * <var:Z> \land <var:k0> = <nat:6> \land <var:X> = <nat:8> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:k1> \\ \{ <var:n> = <var:Z> \land <var:k0> = <nat:6> \land <var:X> = <nat:8> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> \} \\ <var:X> := <var:X> + <var:k0> \\ \{ <var:n> = <var:Z> \land <var:X> = <nat:8> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:6> \} \end{eqnarray} Thusly , the program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:n> = <var:Z> }} <var:k1> := <var:n> ; <var:k2> := <var:k1> * <var:n> ; <var:k3> := <var:k2> * <var:n> ; <var:k0> := <nat:6> ; <var:k1> := <var:k1> * <nat:1> ; <var:k2> := <var:k2> * <nat:1> ; <var:k3> := <var:k3> * <nat:8> ; <var:X> := <var:k3> <var:X> := <var:X> + <var:k2> <var:X> := <var:X> + <var:k1> <var:X> := <var:X> + <var:k0> {{ <var:X> = <nat:8> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:k1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:k1> = <var:Z> /\ <var:k2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:k1> = <var:Z> /\ <var:k2> = <var:Z> ^ <nat:2> /\ <var:k3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:k1> = <var:Z> /\ <var:k2> = <var:Z> ^ <nat:2> /\ <var:k3> = <var:Z> ^ <nat:3> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:k1> = <nat:1> * <var:Z> /\ <var:k2> = <var:Z> ^ <nat:2> /\ <var:k3> = <var:Z> ^ <nat:3> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:k1> = <nat:1> * <var:Z> /\ <var:k2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:k3> = <var:Z> ^ <nat:3> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:k1> = <nat:1> * <var:Z> /\ <var:k2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:k3> = <nat:8> * <var:Z> ^ <nat:3> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:k1> = <nat:1> * <var:Z> /\ <var:k2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:k0> = <nat:6> /\ <var:X> = <nat:8> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:k1> = <nat:1> * <var:Z> /\ <var:k0> = <nat:6> /\ <var:X> = <nat:8> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:k0> = <nat:6> /\ <var:X> = <nat:8> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:Z> /\ <var:X> = <nat:8> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 