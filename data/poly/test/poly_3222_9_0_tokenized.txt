\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:5> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:a> ; <var:C2> := <nat:3> ; <var:C2> := <var:C2> * <var:a> ; <var:C2> := <var:C2> * <var:a> ; <var:m> := <var:C2> ; <var:m> := <var:m> + <var:C1> ; <var:m> := <var:m> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> in \emph{Imp} . Allow $ <var:a> = <var:e> $ ahead of interpreting the series of commands it follows that $ <var:m> = <nat:3> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> + <nat:5> $ . \end{theorem} \begin{proof} Applying standard Hoare logic gives : \begin{eqnarray} \{ <var:a> = <var:e> \} \\ <var:C0> := <nat:5> ; \\ \{ <var:a> = <var:e> \land <var:C0> = <nat:5> \} \\ <var:C1> := <nat:4> ; \\ \{ <var:a> = <var:e> \land <var:C0> = <nat:5> \land <var:C1> = <nat:4> \} \\ <var:C1> := <var:C1> * <var:a> ; \\ \{ <var:a> = <var:e> \land <var:C0> = <nat:5> \land <var:C1> = <nat:4> \times <var:e> \} \\ <var:C2> := <nat:3> ; \\ \{ <var:a> = <var:e> \land <var:C0> = <nat:5> \land <var:C1> = <nat:4> \times <var:e> \land <var:C2> = <nat:3> \} \\ <var:C2> := <var:C2> * <var:a> ; \\ \{ <var:a> = <var:e> \land <var:C0> = <nat:5> \land <var:C1> = <nat:4> \times <var:e> \land <var:C2> = <nat:3> \times <var:e> \} \\ <var:C2> := <var:C2> * <var:a> ; \\ \{ <var:a> = <var:e> \land <var:C0> = <nat:5> \land <var:C1> = <nat:4> \times <var:e> \land <var:C2> = <nat:3> \times <var:e> ^ <nat:2> \} \\ <var:m> := <var:C2> ; \\ \{ <var:a> = <var:e> \land <var:C0> = <nat:5> \land <var:C1> = <nat:4> \times <var:e> \land <var:m> = <nat:3> \times <var:e> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:C1> ; \\ \{ <var:a> = <var:e> \land <var:C0> = <nat:5> \land <var:m> = <nat:3> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> \} \\ <var:m> := <var:m> + <var:C0> \\ \{ <var:a> = <var:e> \land <var:m> = <nat:3> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> + <nat:5> \} \end{eqnarray} As a consequence , the set of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <def:poly> := <var:C0> := <nat:5> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:a> ; <var:C2> := <nat:3> ; <var:C2> := <var:C2> * <var:a> ; <var:C2> := <var:C2> * <var:a> ; <var:m> := <var:C2> ; <var:m> := <var:m> + <var:C1> ; <var:m> := <var:m> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:a> = <var:e> }} <def:poly> {{ <var:m> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:4> * <var:e> /\ <var:C2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:4> * <var:e> /\ <var:C2> = <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:4> * <var:e> /\ <var:C2> = <nat:3> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:4> * <var:e> /\ <var:m> = <nat:3> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:C0> = <nat:5> /\ <var:m> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:e> /\ <var:m> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 