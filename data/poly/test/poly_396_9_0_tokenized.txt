\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:9> ; <var:R1> := <nat:3> ; <var:R1> := <var:R1> * <var:j> ; <var:R2> := <nat:9> ; <var:R2> := <var:R2> * <var:j> ; <var:R2> := <var:R2> * <var:j> ; <var:a> := <var:R2> ; <var:a> := <var:a> + <var:R1> ; <var:a> := <var:a> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> . Given that $ <var:j> = <var:q> $ ahead of interpreting this code segment , it must be that $ <var:a> = <nat:9> \times <var:q> ^ <nat:2> + <nat:3> \times <var:q> + <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for our code segment is given with typical Hoare logic . Observing the next commands found in the list of instructions , we see \verb | { <var:j> = <var:q> } <var:R0> := <nat:9> { <var:j> = <var:q> \land <var:R0> = <nat:9> } | , \verb | { <var:j> = <var:q> \land <var:R0> = <nat:9> } <var:R1> := <nat:3> { <var:j> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:3> } | , \verb | { <var:j> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:3> } <var:R1> := <var:R1> * <var:j> { <var:j> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:3> \times <var:q> } | , \verb | { <var:j> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:3> \times <var:q> } <var:R2> := <nat:9> { <var:j> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:3> \times <var:q> \land <var:R2> = <nat:9> } | , \verb | { <var:j> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:3> \times <var:q> \land <var:R2> = <nat:9> } <var:R2> := <var:R2> * <var:j> { <var:j> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:3> \times <var:q> \land <var:R2> = <nat:9> \times <var:q> } | , \verb | { <var:j> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:3> \times <var:q> \land <var:R2> = <nat:9> \times <var:q> } <var:R2> := <var:R2> * <var:j> { <var:j> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:3> \times <var:q> \land <var:R2> = <nat:9> \times <var:q> ^ <nat:2> } | and \verb | { <var:j> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:3> \times <var:q> \land <var:R2> = <nat:9> \times <var:q> ^ <nat:2> } <var:a> := <var:R2> { <var:j> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:3> \times <var:q> \land <var:a> = <nat:9> \times <var:q> ^ <nat:2> } | . This is ensured through the binding law in Hoare techniques . Immediately after , we have \verb | { <var:j> = <var:q> } <var:R0> := <nat:9> { <var:j> = <var:q> \land <var:R0> = <nat:9> } | and \verb | { <var:j> = <var:q> \land <var:R0> = <nat:9> } <var:R1> := <nat:3> { <var:j> = <var:q> \land <var:R0> = <nat:9> \land <var:R1> = <nat:3> } | . This is rigorously given with the assignment law of Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <def:poly> := <var:R0> := <nat:9> ; <var:R1> := <nat:3> ; <var:R1> := <var:R1> * <var:j> ; <var:R2> := <nat:9> ; <var:R2> := <var:R2> * <var:j> ; <var:R2> := <var:R2> * <var:j> ; <var:a> := <var:R2> ; <var:a> := <var:a> + <var:R1> ; <var:a> := <var:a> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:j> = <var:q> }} <def:poly> {{ <var:a> = <nat:9> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:3> * <var:q> /\ <var:R2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:3> * <var:q> /\ <var:R2> = <nat:9> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:3> * <var:q> /\ <var:R2> = <nat:9> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:3> * <var:q> /\ <var:a> = <nat:9> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:R0> = <nat:9> /\ <var:a> = <nat:9> * <var:q> ^ <nat:2> + <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:a> = <nat:9> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 