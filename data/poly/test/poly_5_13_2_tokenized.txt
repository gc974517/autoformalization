\begin{document} \begin{theorem} We define a program in \emph{Imp} as \begin{verbatim} <var:d> := <nat:3> ; <var:d> := <var:d> * <var:F> ; <var:d> := <nat:4> + <var:d> * <var:F> ; <var:d> := <nat:1> + <var:d> * <var:F> ; <var:d> := <nat:3> + <var:d> * <var:F> ; <var:d> := <nat:4> + <var:d> * <var:F> ; <var:d> := <nat:3> + <var:d> * <var:F> ; <var:d> := <nat:2> + <var:d> * <var:F> ; <var:d> := <nat:4> + <var:d> * <var:F> ; <var:d> := <nat:2> + <var:d> * <var:F> ; <var:d> := <var:d> * <var:F> ; <var:d> := <var:d> * <var:F> ; <var:d> := <nat:4> + <var:d> * <var:F> \end{verbatim} Allowing that we have $ <var:F> = <var:J> $ before evaluating our segment of code , it must be that $ <var:d> = <nat:3> * <var:J> ^ <nat:12> + <nat:4> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:9> + <nat:3> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions is evident with Hoare techniques . Considering the upcoming line of code contained in our series of instructions , we have the variable binding command letting $ <nat:3> $ into $ <var:d>$ . This takes the condition $ \{ <var:F> = <var:J> \} $ into the postcondition $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> \} $ . Immediately after , we have the code \verb | <var:d> := <var:d> * <var:F> ; | . This redefines the precondition $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> \} $ as $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> + \} $ . Advancing , we see the assignment code assigning $ <nat:4> + <var:d> * <var:F> $ to $ <var:d>$ . This code redefines $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> + \} $ into the postcondition $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:2> + <nat:4> \} $ . This is rigorously given by the assignment scheme obtained from standard Hoare techniques . Advancing , we have the code \verb | <var:d> := <nat:1> + <var:d> * <var:F> ; | . This command advances $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:2> + <nat:4> \} $ to $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> + <nat:1> \} $ . This is deduced through the assignment scheme obtained from Hoare techniques . Moving on , we see the variable binding statement \verb | <var:d> := <nat:3> + <var:d> * <var:F> ; | . This transfers the condition $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> + <nat:1> \} $ to the condition $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:3> \} $ . This is ensured by the assignment inference rule given in typical Hoare techniques . Jumping to the proceeding statement found in the code segment , the assignment line \verb | <var:d> := <nat:4> + <var:d> * <var:F> ; | . This redefines $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:3> \} $ to $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:4> \} $ . This is sound with the assignment law from standard Hoare techniques . Advancing on , the variable binding statement \verb | <var:d> := <nat:3> + <var:d> * <var:F> ; | . This advances $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:4> \} $ toward the postcondition $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:3> \} $ . Moving forward to the next step , we have the binding statement defining $ <nat:2> + <var:d> * <var:F> $ into $ <var:d>$ . This line moves the precondition $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:3> \} $ to $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:2> \} $ . Paying attention to the following line of code contained in our list of instructions , the binding statement binding $ <nat:4> + <var:d> * <var:F> $ toward $ <var:d>$ . This forwards the precondition $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:2> \} $ into the postcondition $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:4> \} $ . This is guaranteed using the assignment rule in standard Hoare techniques . Moving on to the next step contained in the series of instructions , we see the assignment code \verb | <var:d> := <nat:2> + <var:d> * <var:F> ; | . This advances the condition $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:4> \} $ as $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:2> \} $ . This is guaranteed with the assignment inference rule in standard Hoare logic . Focusing on the following line seen in our set of instructions , we have the variable binding command \verb | <var:d> := <var:d> * <var:F> ; | . This statement forwards the precondition $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:2> \} $ toward the condition $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:10> + <nat:4> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + \} $ . This is shown by the assignment inference rule obtained from Hoare logic . Moving on to the subsequent line of code contained in our series of commands , we see the variable binding line \verb | <var:d> := <var:d> * <var:F> ; | . This statement advances the condition $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:10> + <nat:4> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + \} $ toward $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:11> + <nat:4> * <var:J> ^ <nat:9> + <nat:1> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + \} $ . Taking a look at the proceeding line of code seen in the set of instructions , we see the variable binding line letting $ <nat:4> + <var:d> * <var:F$ toward $ <var:d>$ . This advances $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:11> + <nat:4> * <var:J> ^ <nat:9> + <nat:1> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + \} $ as $ \{ <var:F> = <var:J> \land <var:d> = <nat:3> * <var:J> ^ <nat:12> + <nat:4> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:9> + <nat:3> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:F> = <var:J> }} <var:d> := <nat:3> ; <var:d> := <var:d> * <var:F> ; <var:d> := <nat:4> + <var:d> * <var:F> ; <var:d> := <nat:1> + <var:d> * <var:F> ; <var:d> := <nat:3> + <var:d> * <var:F> ; <var:d> := <nat:4> + <var:d> * <var:F> ; <var:d> := <nat:3> + <var:d> * <var:F> ; <var:d> := <nat:2> + <var:d> * <var:F> ; <var:d> := <nat:4> + <var:d> * <var:F> ; <var:d> := <nat:2> + <var:d> * <var:F> ; <var:d> := <var:d> * <var:F> ; <var:d> := <var:d> * <var:F> ; <var:d> := <nat:4> + <var:d> * <var:F> {{ <var:d> = <nat:3> * <var:J> ^ <nat:12> + <nat:4> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:9> + <nat:3> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:d> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:d> = <nat:3> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:d> = <nat:3> * <var:J> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:d> = <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:d> = <nat:3> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:d> = <nat:3> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:d> = <nat:3> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:d> = <nat:3> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:d> = <nat:3> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:d> = <nat:3> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:d> = <nat:3> * <var:J> ^ <nat:10> + <nat:4> * <var:J> ^ <nat:8> + <nat:1> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:d> = <nat:3> * <var:J> ^ <nat:11> + <nat:4> * <var:J> ^ <nat:9> + <nat:1> * <var:J> ^ <nat:8> + <nat:3> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:J> /\ <var:d> = <nat:3> * <var:J> ^ <nat:12> + <nat:4> * <var:J> ^ <nat:10> + <nat:1> * <var:J> ^ <nat:9> + <nat:3> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:3> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 