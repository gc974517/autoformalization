\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} : \begin{verbatim} <var:T> := <nat:1> ; <var:T> := <var:T> * <var:X> ; <var:T> := <var:T> * <var:X> ; <var:T> := <nat:3> + <var:T> * <var:X> ; <var:T> := <nat:3> + <var:T> * <var:X> ; <var:T> := <var:T> * <var:X> ; <var:T> := <nat:3> + <var:T> * <var:X> \end{verbatim} Allow that we have $ <var:X> = <var:e> $ ahead of executing the series of commands it holds that we have $ <var:T> = <nat:1> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this code can be demonstrated with the following decorated set of commands . \begin{eqnarray} \{ <var:X> = <var:e> \} \\ <var:T> := <nat:1> ; \\ \{ <var:X> = <var:e> \land <var:T> = <nat:1> \} \\ <var:T> := <var:T> * <var:X> ; \\ \{ <var:X> = <var:e> \land <var:T> = <nat:1> \times <var:e> + \} \\ <var:T> := <var:T> * <var:X> ; \\ \{ <var:X> = <var:e> \land <var:T> = <nat:1> \times <var:e> ^ <nat:2> + \} \\ <var:T> := <nat:3> + <var:T> * <var:X> ; \\ \{ <var:X> = <var:e> \land <var:T> = <nat:1> \times <var:e> ^ <nat:3> + <nat:3> \} \\ <var:T> := <nat:3> + <var:T> * <var:X> ; \\ \{ <var:X> = <var:e> \land <var:T> = <nat:1> \times <var:e> ^ <nat:4> + <nat:3> \times <var:e> + <nat:3> \} \\ <var:T> := <var:T> * <var:X> ; \\ \{ <var:X> = <var:e> \land <var:T> = <nat:1> \times <var:e> ^ <nat:5> + <nat:3> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + \} \\ <var:T> := <nat:3> + <var:T> * <var:X> \\ \{ <var:X> = <var:e> \land <var:T> = <nat:1> \times <var:e> ^ <nat:6> + <nat:3> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> + <nat:3> \} \end{eqnarray} Using Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:X> = <var:e> }} <var:T> := <nat:1> ; <var:T> := <var:T> * <var:X> ; <var:T> := <var:T> * <var:X> ; <var:T> := <nat:3> + <var:T> * <var:X> ; <var:T> := <nat:3> + <var:T> * <var:X> ; <var:T> := <var:T> * <var:X> ; <var:T> := <nat:3> + <var:T> * <var:X> {{ <var:T> = <nat:1> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:T> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:T> = <nat:1> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:T> = <nat:1> * <var:e> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:T> = <nat:1> * <var:e> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:T> = <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:T> = <nat:1> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:T> = <nat:1> * <var:e> ^ <nat:6> + <nat:3> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 