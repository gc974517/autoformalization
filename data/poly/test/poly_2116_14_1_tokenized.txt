\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:s1> := <var:A> ; <var:s2> := <var:s1> * <var:A> ; <var:s3> := <var:s2> * <var:A> ; <var:s4> := <var:s3> * <var:A> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:3> ; <var:s4> := <var:s4> * <nat:9> ; <var:e> := <var:s4> <var:e> := <var:e> + <var:s3> <var:e> := <var:e> + <var:s2> <var:e> := <var:e> + <var:s1> <var:e> := <var:e> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Given ( for some natural coefficients $ <var:k> $ ) $ <var:A> = <var:k> $ before the execution of this list of instructions it must be that $ <var:e> = <nat:9> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:4> $ once segment of code terminates . \end{theorem} \begin{proof} The way to prove correctness for our set of commands is shown through standard Hoare reasoning . Moving onward , we have \begin{verbatim} { <var:A> = <var:k> } <var:s1> := <var:A> { <var:A> = <var:k> \land <var:s1> = <var:k> } { <var:A> = <var:k> \land <var:s1> = <var:k> } <var:s2> := <var:s1> * <var:A> { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> } { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> } <var:s3> := <var:s2> * <var:A> { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> } { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> } <var:s4> := <var:s3> * <var:A> { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> \land <var:s4> = <var:k> ^ <nat:4> } { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> \land <var:s4> = <var:k> ^ <nat:4> } <var:s0> := <nat:4> { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> \land <var:s4> = <var:k> ^ <nat:4> \land <var:s0> = <nat:4> } \end{verbatim} This is shown through the scheme in Hoare logic . Paying attention to the following statements in the segment of code , we have \begin{verbatim} { <var:A> = <var:k> } <var:s1> := <var:A> { <var:A> = <var:k> \land <var:s1> = <var:k> } { <var:A> = <var:k> \land <var:s1> = <var:k> } <var:s2> := <var:s1> * <var:A> { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> } { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> } <var:s3> := <var:s2> * <var:A> { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> } { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> } <var:s4> := <var:s3> * <var:A> { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> \land <var:s4> = <var:k> ^ <nat:4> } \end{verbatim} This is deduced with the assignment inference rule of typical Hoare techniques . Going to the next step , we have \begin{verbatim} { <var:A> = <var:k> } <var:s1> := <var:A> { <var:A> = <var:k> \land <var:s1> = <var:k> } { <var:A> = <var:k> \land <var:s1> = <var:k> } <var:s2> := <var:s1> * <var:A> { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> } { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> } <var:s3> := <var:s2> * <var:A> { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> } \end{verbatim} Paying attention to the upcoming bits of codecontained in the segment of code , \begin{verbatim} { <var:A> = <var:k> } <var:s1> := <var:A> { <var:A> = <var:k> \land <var:s1> = <var:k> } { <var:A> = <var:k> \land <var:s1> = <var:k> } <var:s2> := <var:s1> * <var:A> { <var:A> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> } \end{verbatim} This is guaranteed through the variable assignmet scheme in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <var:s4> : string := " <var:s4> " . Definition <def:poly> := <var:s1> := <var:A> ; <var:s2> := <var:s1> * <var:A> ; <var:s3> := <var:s2> * <var:A> ; <var:s4> := <var:s3> * <var:A> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:3> ; <var:s4> := <var:s4> * <nat:9> ; <var:e> := <var:s4> <var:e> := <var:e> + <var:s3> <var:e> := <var:e> + <var:s2> <var:e> := <var:e> + <var:s1> <var:e> := <var:e> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:A> = <var:k> }} <def:poly> {{ <var:e> = <nat:9> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:s1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:s1> = <var:k> /\ <var:s2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:s1> = <var:k> /\ <var:s2> = <var:k> ^ <nat:2> /\ <var:s3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:s1> = <var:k> /\ <var:s2> = <var:k> ^ <nat:2> /\ <var:s3> = <var:k> ^ <nat:3> /\ <var:s4> = <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:s1> = <var:k> /\ <var:s2> = <var:k> ^ <nat:2> /\ <var:s3> = <var:k> ^ <nat:3> /\ <var:s4> = <var:k> ^ <nat:4> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <var:k> ^ <nat:2> /\ <var:s3> = <var:k> ^ <nat:3> /\ <var:s4> = <var:k> ^ <nat:4> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <nat:3> * <var:k> ^ <nat:2> /\ <var:s3> = <var:k> ^ <nat:3> /\ <var:s4> = <var:k> ^ <nat:4> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <nat:3> * <var:k> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:k> ^ <nat:3> /\ <var:s4> = <var:k> ^ <nat:4> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <nat:3> * <var:k> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:k> ^ <nat:3> /\ <var:s4> = <nat:9> * <var:k> ^ <nat:4> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <nat:3> * <var:k> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:k> ^ <nat:3> /\ <var:s0> = <nat:4> /\ <var:e> = <nat:9> * <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <nat:3> * <var:k> ^ <nat:2> /\ <var:s0> = <nat:4> /\ <var:e> = <nat:9> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s0> = <nat:4> /\ <var:e> = <nat:9> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:s0> = <nat:4> /\ <var:e> = <nat:9> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:e> = <nat:9> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 