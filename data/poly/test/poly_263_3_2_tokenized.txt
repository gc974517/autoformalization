\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T> := <nat:3> ; <var:T> := <nat:1> + <var:T> * <var:r> ; <var:T> := <nat:2> + <var:T> * <var:r> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:r> = <var:P> $ before the evaluation of this segment of code , it holds that we see $ <var:T> = <nat:3> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be seen through typical Hoare techniques . Considering the upcoming piece of code in the code segment , we see \begin{eqnarray} \{ <var:r> = <var:P> \} \, <var:T> := <nat:3> \, \{ <var:r> = <var:P> \land <var:T> = <nat:3> \} \end{eqnarray} This is known to be sound using the variable assignmet law defined in usual Hoare techniques . Stepping forward , we see \begin{eqnarray} \{ <var:r> = <var:P> \} \, <var:T> := <nat:3> \, \{ <var:r> = <var:P> \land <var:T> = <nat:3> \} \\ \{ <var:r> = <var:P> \land <var:T> = <nat:3> \} \, <var:T> := <nat:1> + <var:T> * <var:r> \, \{ <var:r> = <var:P> \land <var:T> = <nat:3> \cdot <var:P> + <nat:1> \} \end{eqnarray} This is shown to be logically sound by the variable assignmet law given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:T> := <nat:3> ; <var:T> := <nat:1> + <var:T> * <var:r> ; <var:T> := <nat:2> + <var:T> * <var:r> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:r> = <var:P> }} <def:poly> {{ <var:T> = <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:P> /\ <var:T> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:P> /\ <var:T> = <nat:3> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:P> /\ <var:T> = <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 