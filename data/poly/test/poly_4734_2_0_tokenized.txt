\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:3> ; <var:J> := <var:i0> \end{verbatim} Assuming that we have $ <var:p> = <var:a> $ , for any positive numbers $ <var:a> $ , ahead of executing this set of commands , it follows that $ <var:J> = <nat:3> $ . \end{theorem} \begin{proof} The course of logic for our list of commands is shown by standard Hoare techniques . Advancing on , we have the variable binding code giving $ <nat:3> $ into $ <var:i0>$ . This statement redefines the condition $ \{ <var:p> = <var:a> \} $ toward the postcondition $ \{ <var:p> = <var:a> \land <var:i0> = <nat:3> \} $ . This is given with the assignment rule of usual Hoare techniques . Shifting focus toward the next statement found in our code , we see the variable binding line \verb | <var:J> := <var:i0> | . This line moves the precondition $ \{ <var:p> = <var:a> \land <var:i0> = <nat:3> \} $ into $ \{ <var:p> = <var:a> \land <var:J> = <nat:3> \} $ . This is given through the assignment law of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:p> = <var:a> }} <var:i0> := <nat:3> ; <var:J> := <var:i0> {{ <var:J> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:a> /\ <var:J> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 