\begin{document} \begin{theorem} Define the following code in \emph{Imp} as \begin{verbatim} <var:S> := <nat:2> ; <var:S> := <nat:4> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:2> + <var:S> * <var:t> ; <var:S> := <nat:2> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:4> + <var:S> * <var:t> ; <var:S> := <nat:3> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> \end{verbatim} Allow it to be that $ <var:t> = <var:P> $ prior to the execution of our code segment , then $ <var:S> = <nat:2> * <var:P> ^ <nat:9> + <nat:4> * <var:P> ^ <nat:8> + <nat:1> * <var:P> ^ <nat:7> + <nat:1> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:1> $ when segment of code executes . \end{theorem} \begin{proof} Using Hoare techniques returns : \begin{eqnarray} \{ <var:t> = <var:P> \} \\ <var:S> := <nat:2> ; \\ \{ <var:t> = <var:P> \land <var:S> = <nat:2> \} \end{eqnarray} Advancing the execution of this code gives us : \begin{eqnarray} <var:S> := <nat:4> + <var:S> * <var:t> ; \\ \{ <var:t> = <var:P> \land <var:S> = <nat:2> \cdot <var:P> + <nat:4> \} \\ <var:S> := <nat:1> + <var:S> * <var:t> ; \\ \{ <var:t> = <var:P> \land <var:S> = <nat:2> \cdot <var:P> ^ <nat:2> + <nat:4> \cdot <var:P> + <nat:1> \} \\ <var:S> := <nat:1> + <var:S> * <var:t> ; \\ \{ <var:t> = <var:P> \land <var:S> = <nat:2> \cdot <var:P> ^ <nat:3> + <nat:4> \cdot <var:P> ^ <nat:2> + <nat:1> \cdot <var:P> + <nat:1> \} \\ <var:S> := <nat:2> + <var:S> * <var:t> ; \\ \{ <var:t> = <var:P> \land <var:S> = <nat:2> \cdot <var:P> ^ <nat:4> + <nat:4> \cdot <var:P> ^ <nat:3> + <nat:1> \cdot <var:P> ^ <nat:2> + <nat:1> \cdot <var:P> + <nat:2> \} \\ <var:S> := <nat:2> + <var:S> * <var:t> ; \\ \{ <var:t> = <var:P> \land <var:S> = <nat:2> \cdot <var:P> ^ <nat:5> + <nat:4> \cdot <var:P> ^ <nat:4> + <nat:1> \cdot <var:P> ^ <nat:3> + <nat:1> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> + <nat:2> \} \\ <var:S> := <nat:1> + <var:S> * <var:t> ; \\ \{ <var:t> = <var:P> \land <var:S> = <nat:2> \cdot <var:P> ^ <nat:6> + <nat:4> \cdot <var:P> ^ <nat:5> + <nat:1> \cdot <var:P> ^ <nat:4> + <nat:1> \cdot <var:P> ^ <nat:3> + <nat:2> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> + <nat:1> \} \\ <var:S> := <nat:4> + <var:S> * <var:t> ; \\ \{ <var:t> = <var:P> \land <var:S> = <nat:2> \cdot <var:P> ^ <nat:7> + <nat:4> \cdot <var:P> ^ <nat:6> + <nat:1> \cdot <var:P> ^ <nat:5> + <nat:1> \cdot <var:P> ^ <nat:4> + <nat:2> \cdot <var:P> ^ <nat:3> + <nat:2> \cdot <var:P> ^ <nat:2> + <nat:1> \cdot <var:P> + <nat:4> \} \\ <var:S> := <nat:3> + <var:S> * <var:t> ; \\ \{ <var:t> = <var:P> \land <var:S> = <nat:2> \cdot <var:P> ^ <nat:8> + <nat:4> \cdot <var:P> ^ <nat:7> + <nat:1> \cdot <var:P> ^ <nat:6> + <nat:1> \cdot <var:P> ^ <nat:5> + <nat:2> \cdot <var:P> ^ <nat:4> + <nat:2> \cdot <var:P> ^ <nat:3> + <nat:1> \cdot <var:P> ^ <nat:2> + <nat:4> \cdot <var:P> + <nat:3> \} \\ <var:S> := <nat:1> + <var:S> * <var:t> \\ \{ <var:t> = <var:P> \land <var:S> = <nat:2> \cdot <var:P> ^ <nat:9> + <nat:4> \cdot <var:P> ^ <nat:8> + <nat:1> \cdot <var:P> ^ <nat:7> + <nat:1> \cdot <var:P> ^ <nat:6> + <nat:2> \cdot <var:P> ^ <nat:5> + <nat:2> \cdot <var:P> ^ <nat:4> + <nat:1> \cdot <var:P> ^ <nat:3> + <nat:4> \cdot <var:P> ^ <nat:2> + <nat:3> \cdot <var:P> + <nat:1> \} \end{eqnarray} Considering the preceding argument , our list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:t> = <var:P> }} <var:S> := <nat:2> ; <var:S> := <nat:4> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:2> + <var:S> * <var:t> ; <var:S> := <nat:2> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> ; <var:S> := <nat:4> + <var:S> * <var:t> ; <var:S> := <nat:3> + <var:S> * <var:t> ; <var:S> := <nat:1> + <var:S> * <var:t> {{ <var:S> = <nat:2> * <var:P> ^ <nat:9> + <nat:4> * <var:P> ^ <nat:8> + <nat:1> * <var:P> ^ <nat:7> + <nat:1> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:2> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:2> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:2> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:2> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:2> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:2> * <var:P> ^ <nat:6> + <nat:4> * <var:P> ^ <nat:5> + <nat:1> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:2> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:1> * <var:P> ^ <nat:5> + <nat:1> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:2> * <var:P> ^ <nat:8> + <nat:4> * <var:P> ^ <nat:7> + <nat:1> * <var:P> ^ <nat:6> + <nat:1> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:P> /\ <var:S> = <nat:2> * <var:P> ^ <nat:9> + <nat:4> * <var:P> ^ <nat:8> + <nat:1> * <var:P> ^ <nat:7> + <nat:1> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 