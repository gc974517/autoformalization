\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:L1> := <var:d> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:4> ; <var:h> := <var:L1> <var:h> := <var:h> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:d> = <var:A> $ ( for all natural numbers $ <var:A> $ ) before the execution of our list of commands it holds that we have $ <var:h> = <nat:4> * <var:A> + <nat:4> $ after segment of code exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:A> \} \\ <var:L1> := <var:d> ; \\ \{ <var:d> = <var:A> \land <var:L1> = <var:A> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:d> = <var:A> \land <var:L1> = <var:A> \land <var:L0> = <nat:4> \} \\ <var:L1> := <var:L1> * <nat:4> ; \\ \{ <var:d> = <var:A> \land <var:L1> = <nat:4> * <var:A> \land <var:L0> = <nat:4> \} \\ <var:h> := <var:L1> \\ \{ <var:d> = <var:A> \land <var:L0> = <nat:4> \land <var:h> = <nat:4> * <var:A> \} \\ <var:h> := <var:h> + <var:L0> \\ \{ <var:d> = <var:A> \land <var:h> = <nat:4> * <var:A> + <nat:4> \} \end{eqnarray} The application of typical Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L1> := <var:d> ; <var:L0> := <nat:4> ; <var:L1> := <var:L1> * <nat:4> ; <var:h> := <var:L1> <var:h> := <var:h> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:d> = <var:A> }} <def:poly> {{ <var:h> = <nat:4> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:L1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:L1> = <var:A> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:L1> = <nat:4> * <var:A> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:L0> = <nat:4> /\ <var:h> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:h> = <nat:4> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 