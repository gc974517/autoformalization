\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f0> := <nat:6> ; <var:f1> := <nat:9> ; <var:f1> := <var:f1> * <var:A> ; <var:G> := <var:f1> ; <var:G> := <var:G> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:A> = <var:x> $ prior to evaluating the series of commands then we have $ <var:G> = <nat:9> \cdot <var:x> + <nat:6> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques gives us : \begin{eqnarray} \{ <var:A> = <var:x> \} \\ <var:f0> := <nat:6> ; \\ \{ <var:A> = <var:x> \land <var:f0> = <nat:6> \} \\ <var:f1> := <nat:9> ; \\ \{ <var:A> = <var:x> \land <var:f0> = <nat:6> \land <var:f1> = <nat:9> \} \\ <var:f1> := <var:f1> * <var:A> ; \\ \{ <var:A> = <var:x> \land <var:f0> = <nat:6> \land <var:f1> = <nat:9> \cdot <var:x> \} \\ <var:G> := <var:f1> ; \\ \{ <var:A> = <var:x> \land <var:f0> = <nat:6> \land <var:G> = <nat:9> \cdot <var:x> \} \\ <var:G> := <var:G> + <var:f0> \\ \{ <var:A> = <var:x> \land <var:G> = <nat:9> \cdot <var:x> + <nat:6> \} \end{eqnarray} Thusly , the series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f0> := <nat:6> ; <var:f1> := <nat:9> ; <var:f1> := <var:f1> * <var:A> ; <var:G> := <var:f1> ; <var:G> := <var:G> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:A> = <var:x> }} <def:poly> {{ <var:G> = <nat:9> * <var:x> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:f0> = <nat:6> /\ <var:f1> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:f0> = <nat:6> /\ <var:G> = <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:G> = <nat:9> * <var:x> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 