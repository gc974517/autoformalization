\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:5> ; <var:y1> := <nat:7> ; <var:y1> := <var:y1> * <var:G> ; <var:U> := <var:y1> ; <var:U> := <var:U> + <var:y0> \end{verbatim} Assume it to be that $ <var:G> = <var:N> $ prior to executing this series of instructions it holds that $ <var:U> = <nat:7> \times <var:N> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for our program is clear through Hoare reasoning . Stepping through , we see \begin{verbatim} { <var:G> = <var:N> } <var:y0> := <nat:5> { <var:G> = <var:N> \land <var:y0> = <nat:5> } { <var:G> = <var:N> \land <var:y0> = <nat:5> } <var:y1> := <nat:7> { <var:G> = <var:N> \land <var:y0> = <nat:5> \land <var:y1> = <nat:7> } \end{verbatim} Immediately following , we see \begin{verbatim} { <var:G> = <var:N> } <var:y0> := <nat:5> { <var:G> = <var:N> \land <var:y0> = <nat:5> } \end{verbatim} Advancing , \begin{verbatim} { <var:G> = <var:N> } <var:y0> := <nat:5> { <var:G> = <var:N> \land <var:y0> = <nat:5> } \end{verbatim} Moving forward , we see \begin{verbatim} { <var:G> = <var:N> } <var:y0> := <nat:5> { <var:G> = <var:N> \land <var:y0> = <nat:5> } \end{verbatim} This is deduced by the variable assignmet law in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:G> = <var:N> }} <var:y0> := <nat:5> ; <var:y1> := <nat:7> ; <var:y1> := <var:y1> * <var:G> ; <var:U> := <var:y1> ; <var:U> := <var:U> + <var:y0> {{ <var:U> = <nat:7> * <var:N> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:y0> = <nat:5> /\ <var:U> = <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:U> = <nat:7> * <var:N> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 