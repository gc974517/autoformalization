\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:3> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:e> ; <var:S2> := <nat:7> ; <var:S2> := <var:S2> * <var:e> ; <var:S2> := <var:S2> * <var:e> ; <var:f> := <var:S2> ; <var:f> := <var:f> + <var:S1> ; <var:f> := <var:f> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:e> = <var:O> $ before interpreting this series of instructions then we see $ <var:f> = <nat:7> * <var:O> ^ <nat:2> + <nat:6> * <var:O> + <nat:3> $ . \end{theorem} \begin{proof} The argument for our series of commands can be demonstrated with standard Hoare logic . Advancing on , we have \verb | { <var:e> = <var:O> } <var:S0> := <nat:3> { <var:e> = <var:O> \land <var:S0> = <nat:3> } | . Moving on to the next lines contained in the set of commands , we have \verb | { <var:e> = <var:O> } <var:S0> := <nat:3> { <var:e> = <var:O> \land <var:S0> = <nat:3> } | and \verb | { <var:e> = <var:O> \land <var:S0> = <nat:3> } <var:S1> := <nat:6> { <var:e> = <var:O> \land <var:S0> = <nat:3> \land <var:S1> = <nat:6> } | . Advancing to the proceeding statements seen in the segment of code , \verb | { <var:e> = <var:O> } <var:S0> := <nat:3> { <var:e> = <var:O> \land <var:S0> = <nat:3> } | , \verb | { <var:e> = <var:O> \land <var:S0> = <nat:3> } <var:S1> := <nat:6> { <var:e> = <var:O> \land <var:S0> = <nat:3> \land <var:S1> = <nat:6> } | , \verb | { <var:e> = <var:O> \land <var:S0> = <nat:3> \land <var:S1> = <nat:6> } <var:S1> := <var:S1> * <var:e> { <var:e> = <var:O> \land <var:S0> = <nat:3> \land <var:S1> = <nat:6> \times <var:O> } | and \verb | { <var:e> = <var:O> \land <var:S0> = <nat:3> \land <var:S1> = <nat:6> \times <var:O> } <var:S2> := <nat:7> { <var:e> = <var:O> \land <var:S0> = <nat:3> \land <var:S1> = <nat:6> \times <var:O> \land <var:S2> = <nat:7> } | . Paying attention to the following pieces of code contained in the code , we have \verb | { <var:e> = <var:O> } <var:S0> := <nat:3> { <var:e> = <var:O> \land <var:S0> = <nat:3> } | and \verb | { <var:e> = <var:O> \land <var:S0> = <nat:3> } <var:S1> := <nat:6> { <var:e> = <var:O> \land <var:S0> = <nat:3> \land <var:S1> = <nat:6> } | . This is sound by the variable binding inference rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S0> := <nat:3> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:e> ; <var:S2> := <nat:7> ; <var:S2> := <var:S2> * <var:e> ; <var:S2> := <var:S2> * <var:e> ; <var:f> := <var:S2> ; <var:f> := <var:f> + <var:S1> ; <var:f> := <var:f> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:e> = <var:O> }} <def:poly> {{ <var:f> = <nat:7> * <var:O> ^ <nat:2> + <nat:6> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:6> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:6> * <var:O> /\ <var:S2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:6> * <var:O> /\ <var:S2> = <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:6> * <var:O> /\ <var:S2> = <nat:7> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:S0> = <nat:3> /\ <var:S1> = <nat:6> * <var:O> /\ <var:f> = <nat:7> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:S0> = <nat:3> /\ <var:f> = <nat:7> * <var:O> ^ <nat:2> + <nat:6> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:f> = <nat:7> * <var:O> ^ <nat:2> + <nat:6> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 