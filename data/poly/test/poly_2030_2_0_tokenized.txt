\begin{document} \begin{theorem} Define a code segment such that \begin{verbatim} <var:S0> := <nat:3> ; <var:Q> := <var:S0> \end{verbatim} Given it to be that $ <var:i> = <var:e> $ for whole numbers $ <var:e> $ prior to running this series of instructions , it follows that $ <var:Q> = <nat:3> $ after series of commands terminates . \end{theorem} \begin{proof} Observe the following decorated list of instructions . \begin{eqnarray} \{ <var:i> = <var:e> \} \\ <var:S0> := <nat:3> ; \\ \{ <var:i> = <var:e> \land <var:S0> = <nat:3> \} \\ <var:Q> := <var:S0> \\ \{ <var:i> = <var:e> \land <var:Q> = <nat:3> \} \end{eqnarray} The application of standard Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:i> = <var:e> }} <var:S0> := <nat:3> ; <var:Q> := <var:S0> {{ <var:Q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:Q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 