\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:6> ; <var:u> := <var:O0> \end{verbatim} Given that we have $ <var:K> = <var:I> $ prior to the evaluation of our list of commands then we see $ <var:u> = <nat:6> $ . \end{theorem} \begin{proof} Using usual Hoare logic produces : \begin{eqnarray} \{ <var:K> = <var:I> \} \\ <var:O0> := <nat:6> ; \\ \{ <var:K> = <var:I> \land <var:O0> = <nat:6> \} \\ <var:u> := <var:O0> \\ \{ <var:K> = <var:I> \land <var:u> = <nat:6> \} \end{eqnarray} Given the preceding argument , our segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:K> = <var:I> }} <var:O0> := <nat:6> ; <var:u> := <var:O0> {{ <var:u> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:u> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 