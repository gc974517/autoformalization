\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:T1> := <var:U> ; <var:T0> := <nat:7> ; <var:T1> := <var:T1> * <nat:7> ; <var:J> := <var:T1> <var:J> := <var:J> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> . Allow that $ <var:U> = <var:V> $ for every $ <var:V> $ before executing the code segment it must be that $ <var:J> = <nat:7> \cdot <var:V> + <nat:7> $ . \end{theorem} \begin{proof} The argument for the code segment is demonstrated by typical Hoare techniques . Honing in on the following command in the code segment , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:V> \} & <var:T1> := <var:U> & \{ <var:U> = <var:V> \land <var:T1> = <var:V> \} \end{tabular} This is guaranteed with the variable binding rule of usual Hoare reasoning . Advancing to the next line found in our set of commands , \[ \begin{tabular} {rcl} \{ <var:U> = <var:V> \} & <var:T1> := <var:U> & \{ <var:U> = <var:V> \land <var:T1> = <var:V> \} \end{tabular} Moving on to the upcoming step contained in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:V> \} & <var:T1> := <var:U> & \{ <var:U> = <var:V> \land <var:T1> = <var:V> \} \end{tabular} Moving forward to the following statement contained in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:V> \} & <var:T1> := <var:U> & \{ <var:U> = <var:V> \land <var:T1> = <var:V> \} \end{tabular} Observing the next line contained in the set of instructions , \[ \begin{tabular} {rcl} \{ <var:U> = <var:V> \} & <var:T1> := <var:U> & \{ <var:U> = <var:V> \land <var:T1> = <var:V> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T1> := <var:U> ; <var:T0> := <nat:7> ; <var:T1> := <var:T1> * <nat:7> ; <var:J> := <var:T1> <var:J> := <var:J> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:U> = <var:V> }} <def:poly> {{ <var:J> = <nat:7> * <var:V> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:T1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:T1> = <var:V> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:T1> = <nat:7> * <var:V> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:T0> = <nat:7> /\ <var:J> = <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:J> = <nat:7> * <var:V> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 