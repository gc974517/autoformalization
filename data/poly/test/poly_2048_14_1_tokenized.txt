\begin{document} \begin{theorem} Consider the following program such that \begin{verbatim} <var:P1> := <var:V> ; <var:P2> := <var:P1> * <var:V> ; <var:P3> := <var:P2> * <var:V> ; <var:P4> := <var:P3> * <var:V> ; <var:P0> := <nat:6> ; <var:P1> := <var:P1> * <nat:8> ; <var:P2> := <var:P2> * <nat:9> ; <var:P3> := <var:P3> * <nat:6> ; <var:P4> := <var:P4> * <nat:4> ; <var:C> := <var:P4> <var:C> := <var:C> + <var:P3> <var:C> := <var:C> + <var:P2> <var:C> := <var:C> + <var:P1> <var:C> := <var:C> + <var:P0> \end{verbatim} Assuming $ <var:V> = <var:H> $ --- given every $ <var:H> \in \mathbb{Z}^+ $ --- ahead of running our set of commands it holds that $ <var:C> = <nat:4> * <var:H> ^ <nat:4> + <nat:6> * <var:H> ^ <nat:3> + <nat:9> * <var:H> ^ <nat:2> + <nat:8> * <var:H> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of the segment of code can be shown using typical Hoare logic . Shifting focus toward the upcoming bits of codecontained in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:V> = <var:H> \} & <var:P1> := <var:V> & \{ <var:V> = <var:H> \land <var:P1> = <var:H> \} \\ \{ <var:V> = <var:H> \land <var:P1> = <var:H> \} & <var:P2> := <var:P1> * <var:V> & \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \} \\ \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \} & <var:P3> := <var:P2> * <var:V> & \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \} \\ \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \} & <var:P4> := <var:P3> * <var:V> & \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P4> = <var:H> ^ <nat:4> \} \\ \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P4> = <var:H> ^ <nat:4> \} & <var:P0> := <nat:6> & \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P4> = <var:H> ^ <nat:4> \land <var:P0> = <nat:6> \} \end{tabular} This is known to be sound by the variable update inference rule obtained from Hoare logic . Going to the next step , \[ \begin{tabular} {rcl} \{ <var:V> = <var:H> \} & <var:P1> := <var:V> & \{ <var:V> = <var:H> \land <var:P1> = <var:H> \} \\ \{ <var:V> = <var:H> \land <var:P1> = <var:H> \} & <var:P2> := <var:P1> * <var:V> & \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \} \\ \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \} & <var:P3> := <var:P2> * <var:V> & \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \} \\ \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \} & <var:P4> := <var:P3> * <var:V> & \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P4> = <var:H> ^ <nat:4> \} \\ \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P4> = <var:H> ^ <nat:4> \} & <var:P0> := <nat:6> & \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P4> = <var:H> ^ <nat:4> \land <var:P0> = <nat:6> \} \\ \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P4> = <var:H> ^ <nat:4> \land <var:P0> = <nat:6> \} & <var:P1> := <var:P1> * <nat:8> & \{ <var:V> = <var:H> \land <var:P1> = <nat:8> * <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P4> = <var:H> ^ <nat:4> \land <var:P0> = <nat:6> \} \end{tabular} This is given by the variable assignmet inference rule found in typical Hoare reasoning . Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:V> = <var:H> \} & <var:P1> := <var:V> & \{ <var:V> = <var:H> \land <var:P1> = <var:H> \} \\ \{ <var:V> = <var:H> \land <var:P1> = <var:H> \} & <var:P2> := <var:P1> * <var:V> & \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \} \\ \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \} & <var:P3> := <var:P2> * <var:V> & \{ <var:V> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <var:P4> : string := " <var:P4> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:V> = <var:H> }} <var:P1> := <var:V> ; <var:P2> := <var:P1> * <var:V> ; <var:P3> := <var:P2> * <var:V> ; <var:P4> := <var:P3> * <var:V> ; <var:P0> := <nat:6> ; <var:P1> := <var:P1> * <nat:8> ; <var:P2> := <var:P2> * <nat:9> ; <var:P3> := <var:P3> * <nat:6> ; <var:P4> := <var:P4> * <nat:4> ; <var:C> := <var:P4> <var:C> := <var:C> + <var:P3> <var:C> := <var:C> + <var:P2> <var:C> := <var:C> + <var:P1> <var:C> := <var:C> + <var:P0> {{ <var:C> = <nat:4> * <var:H> ^ <nat:4> + <nat:6> * <var:H> ^ <nat:3> + <nat:9> * <var:H> ^ <nat:2> + <nat:8> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:P1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:P1> = <var:H> /\ <var:P2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:P1> = <var:H> /\ <var:P2> = <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:P1> = <var:H> /\ <var:P2> = <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> /\ <var:P4> = <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:P1> = <var:H> /\ <var:P2> = <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> /\ <var:P4> = <var:H> ^ <nat:4> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:P1> = <nat:8> * <var:H> /\ <var:P2> = <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> /\ <var:P4> = <var:H> ^ <nat:4> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:P1> = <nat:8> * <var:H> /\ <var:P2> = <nat:9> * <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> /\ <var:P4> = <var:H> ^ <nat:4> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:P1> = <nat:8> * <var:H> /\ <var:P2> = <nat:9> * <var:H> ^ <nat:2> /\ <var:P3> = <nat:6> * <var:H> ^ <nat:3> /\ <var:P4> = <var:H> ^ <nat:4> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:P1> = <nat:8> * <var:H> /\ <var:P2> = <nat:9> * <var:H> ^ <nat:2> /\ <var:P3> = <nat:6> * <var:H> ^ <nat:3> /\ <var:P4> = <nat:4> * <var:H> ^ <nat:4> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:P1> = <nat:8> * <var:H> /\ <var:P2> = <nat:9> * <var:H> ^ <nat:2> /\ <var:P3> = <nat:6> * <var:H> ^ <nat:3> /\ <var:P0> = <nat:6> /\ <var:C> = <nat:4> * <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:P1> = <nat:8> * <var:H> /\ <var:P2> = <nat:9> * <var:H> ^ <nat:2> /\ <var:P0> = <nat:6> /\ <var:C> = <nat:4> * <var:H> ^ <nat:4> + <nat:6> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:P1> = <nat:8> * <var:H> /\ <var:P0> = <nat:6> /\ <var:C> = <nat:4> * <var:H> ^ <nat:4> + <nat:6> * <var:H> ^ <nat:3> + <nat:9> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:P0> = <nat:6> /\ <var:C> = <nat:4> * <var:H> ^ <nat:4> + <nat:6> * <var:H> ^ <nat:3> + <nat:9> * <var:H> ^ <nat:2> + <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:H> /\ <var:C> = <nat:4> * <var:H> ^ <nat:4> + <nat:6> * <var:H> ^ <nat:3> + <nat:9> * <var:H> ^ <nat:2> + <nat:8> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 