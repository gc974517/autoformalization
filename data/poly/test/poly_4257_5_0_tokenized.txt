\begin{document} \begin{theorem} Define a code segment such that \begin{verbatim} <var:a0> := <nat:2> ; <var:a1> := <nat:6> ; <var:a1> := <var:a1> * <var:R> ; <var:V> := <var:a1> ; <var:V> := <var:V> + <var:a0> \end{verbatim} Assuming that we have $ <var:R> = <var:L> $ for some positive integers $ <var:L> $ prior to executing this code segment , it holds that $ <var:V> = <nat:6> \times <var:L> + <nat:2> $ once list of commands has terminated . \end{theorem} \begin{proof} Arguing the correctness of our segment of code can be done by usual Hoare techniques . Moving on , we have the code \verb | <var:a0> := <nat:2> ; | . This forwards $ \{ <var:R> = <var:L> \} $ as the postcondition $ \{ <var:R> = <var:L> \land <var:a0> = <nat:2> \} $ . This is shown to be logically sound with the assignment law defined by typical Hoare reasoning . Following , we have the assignment command \verb | <var:a1> := <nat:6> ; | . This forwards $ \{ <var:R> = <var:L> \land <var:a0> = <nat:2> \} $ toward the condition $ \{ <var:R> = <var:L> \land <var:a0> = <nat:2> \land <var:a1> = <nat:6> \} $ . Taking a look at the proceeding line of code in the set of commands , we have the variable binding statement \verb | <var:a1> := <var:a1> * <var:R> ; | . This command advances the condition $ \{ <var:R> = <var:L> \land <var:a0> = <nat:2> \land <var:a1> = <nat:6> \} $ toward the postcondition $ \{ <var:R> = <var:L> \land <var:a0> = <nat:2> \land <var:a1> = <nat:6> \cdot <var:L> \} $ . This is sound using the assignment rule from typical Hoare reasoning . Keeping momentum , we have the assignment command \verb | <var:V> := <var:a1> ; | . This forwards the precondition $ \{ <var:R> = <var:L> \land <var:a0> = <nat:2> \land <var:a1> = <nat:6> \cdot <var:L> \} $ as $ \{ <var:R> = <var:L> \land <var:a0> = <nat:2> \land <var:V> = <nat:6> \cdot <var:L> \} $ . This is rigorously given by the assignment law in standard Hoare logic . Next , we see the variable binding command letting $ <var:V> + <var:a0$ into $ <var:V>$ . This advances $ \{ <var:R> = <var:L> \land <var:a0> = <nat:2> \land <var:V> = <nat:6> \cdot <var:L> \} $ toward the condition $ \{ <var:R> = <var:L> \land <var:V> = <nat:6> \cdot <var:L> + <nat:2> \} $ . This is ensured through the assignment law given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:R> = <var:L> }} <var:a0> := <nat:2> ; <var:a1> := <nat:6> ; <var:a1> := <var:a1> * <var:R> ; <var:V> := <var:a1> ; <var:V> := <var:V> + <var:a0> {{ <var:V> = <nat:6> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:a0> = <nat:2> /\ <var:V> = <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:V> = <nat:6> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 