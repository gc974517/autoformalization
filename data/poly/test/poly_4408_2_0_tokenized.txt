\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:2> ; <var:a> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Allow it to be that $ <var:q> = <var:x> $ before executing the list of instructions it follows that we see $ <var:a> = <nat:2> $ when series of commands is done executing . \end{theorem} \begin{proof} The argument for this set of commands is accomplished using standard Hoare reasoning . Keeping momentum , we see the variable assignmet statement letting $ <nat:2> $ toward $ <var:d0>$ . This line forwards $ \{ <var:q> = <var:x> \} $ as $ \{ <var:q> = <var:x> \land <var:d0> = <nat:2> \} $ . Next , we see the environment update code \verb | <var:a> := <var:d0> | . This moves $ \{ <var:q> = <var:x> \land <var:d0> = <nat:2> \} $ toward the condition $ \{ <var:q> = <var:x> \land <var:a> = <nat:2> \} $ . This is guaranteed with the assignment inference rule given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:2> ; <var:a> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:q> = <var:x> }} <def:poly> {{ <var:a> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:a> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 