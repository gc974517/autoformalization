\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B> := <nat:1> ; <var:B> := <nat:4> + <var:B> * <var:K> ; <var:B> := <nat:3> + <var:B> * <var:K> ; <var:B> := <nat:1> + <var:B> * <var:K> ; <var:B> := <nat:4> + <var:B> * <var:K> ; <var:B> := <nat:2> + <var:B> * <var:K> ; <var:B> := <nat:3> + <var:B> * <var:K> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> . Allow that we have $ <var:K> = <var:s> $ , given any positive numbers $ <var:s> $ , prior to interpreting the code segment , then $ <var:B> = <nat:1> \cdot <var:s> ^ <nat:6> + <nat:4> \cdot <var:s> ^ <nat:5> + <nat:3> \cdot <var:s> ^ <nat:4> + <nat:1> \cdot <var:s> ^ <nat:3> + <nat:4> \cdot <var:s> ^ <nat:2> + <nat:2> \cdot <var:s> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for the code segment is done using the following decorated segment of code . \begin{eqnarray} \{ <var:K> = <var:s> \} \\ <var:B> := <nat:1> ; \\ \{ <var:K> = <var:s> \land <var:B> = <nat:1> \} \\ <var:B> := <nat:4> + <var:B> * <var:K> ; \\ \{ <var:K> = <var:s> \land <var:B> = <nat:1> \cdot <var:s> + <nat:4> \} \\ <var:B> := <nat:3> + <var:B> * <var:K> ; \\ \{ <var:K> = <var:s> \land <var:B> = <nat:1> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> + <nat:3> \} \\ <var:B> := <nat:1> + <var:B> * <var:K> ; \\ \{ <var:K> = <var:s> \land <var:B> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:4> \cdot <var:s> ^ <nat:2> + <nat:3> \cdot <var:s> + <nat:1> \} \\ <var:B> := <nat:4> + <var:B> * <var:K> ; \\ \{ <var:K> = <var:s> \land <var:B> = <nat:1> \cdot <var:s> ^ <nat:4> + <nat:4> \cdot <var:s> ^ <nat:3> + <nat:3> \cdot <var:s> ^ <nat:2> + <nat:1> \cdot <var:s> + <nat:4> \} \\ <var:B> := <nat:2> + <var:B> * <var:K> ; \\ \{ <var:K> = <var:s> \land <var:B> = <nat:1> \cdot <var:s> ^ <nat:5> + <nat:4> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:3> + <nat:1> \cdot <var:s> ^ <nat:2> + <nat:4> \cdot <var:s> + <nat:2> \} \\ <var:B> := <nat:3> + <var:B> * <var:K> \\ \{ <var:K> = <var:s> \land <var:B> = <nat:1> \cdot <var:s> ^ <nat:6> + <nat:4> \cdot <var:s> ^ <nat:5> + <nat:3> \cdot <var:s> ^ <nat:4> + <nat:1> \cdot <var:s> ^ <nat:3> + <nat:4> \cdot <var:s> ^ <nat:2> + <nat:2> \cdot <var:s> + <nat:3> \} \end{eqnarray} Advancing running our code segment returns : \begin{eqnarray} \end{eqnarray} Using typical Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:1> ; <var:B> := <nat:4> + <var:B> * <var:K> ; <var:B> := <nat:3> + <var:B> * <var:K> ; <var:B> := <nat:1> + <var:B> * <var:K> ; <var:B> := <nat:4> + <var:B> * <var:K> ; <var:B> := <nat:2> + <var:B> * <var:K> ; <var:B> := <nat:3> + <var:B> * <var:K> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:K> = <var:s> }} <def:poly> {{ <var:B> = <nat:1> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B> = <nat:1> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B> = <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B> = <nat:1> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B> = <nat:1> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B> = <nat:1> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:B> = <nat:1> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 