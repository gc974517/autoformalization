\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:b> := <nat:2> ; <var:b> := <nat:1> + <var:b> * <var:D> ; <var:b> := <nat:2> + <var:b> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:D> = <var:d> $ , given some whole numbers $ <var:d> $ , prior to the evaluation of the list of commands , it holds that we have $ <var:b> = <nat:2> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:2> $ after code executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:d> \} \\ <var:b> := <nat:2> ; \\ \{ <var:D> = <var:d> \land <var:b> = <nat:2> \} \\ <var:b> := <nat:1> + <var:b> * <var:D> ; \\ \{ <var:D> = <var:d> \land <var:b> = <nat:2> \times <var:d> + <nat:1> \} \\ <var:b> := <nat:2> + <var:b> * <var:D> \\ \{ <var:D> = <var:d> \land <var:b> = <nat:2> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:2> \} \end{eqnarray} Advancing the execution of the code gives : \begin{eqnarray} \end{eqnarray} The application of typical Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:2> ; <var:b> := <nat:1> + <var:b> * <var:D> ; <var:b> := <nat:2> + <var:b> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:D> = <var:d> }} <def:poly> {{ <var:b> = <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:b> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:b> = <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:d> /\ <var:b> = <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 