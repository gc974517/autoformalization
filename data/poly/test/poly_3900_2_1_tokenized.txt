\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:B0> := <nat:3> ; <var:y> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of instructions <def:poly> in \emph{Imp} . Allowing $ <var:k> = <var:W> $ ahead of the execution of the set of instructions , then we have $ <var:y> = <nat:3> $ after code segment executes . \end{theorem} \begin{proof} Applying Hoare reasoning produces : \begin{eqnarray} \{ <var:k> = <var:W> \} \\ <var:B0> := <nat:3> ; \\ \{ <var:k> = <var:W> \land <var:B0> = <nat:3> \} \\ <var:y> := <var:B0> \\ \{ <var:k> = <var:W> \land <var:y> = <nat:3> \} \end{eqnarray} Thus , the series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:3> ; <var:y> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:k> = <var:W> }} <def:poly> {{ <var:y> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:W> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:W> /\ <var:y> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 