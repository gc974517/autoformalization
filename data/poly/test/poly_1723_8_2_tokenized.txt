\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} such that \begin{verbatim} <var:k> := <nat:4> ; <var:k> := <nat:2> + <var:k> * <var:Q> ; <var:k> := <nat:3> + <var:k> * <var:Q> ; <var:k> := <nat:3> + <var:k> * <var:Q> ; <var:k> := <nat:3> + <var:k> * <var:Q> ; <var:k> := <nat:2> + <var:k> * <var:Q> ; <var:k> := <nat:3> + <var:k> * <var:Q> ; <var:k> := <nat:1> + <var:k> * <var:Q> \end{verbatim} Assuming that $ <var:Q> = <var:j> $ prior to the execution of this set of instructions it must be that we have $ <var:k> = <nat:4> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> $ once list of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:j> \} \\ <var:k> := <nat:4> ; \\ \{ <var:Q> = <var:j> \land <var:k> = <nat:4> \} \\ <var:k> := <nat:2> + <var:k> * <var:Q> ; \\ \{ <var:Q> = <var:j> \land <var:k> = <nat:4> \times <var:j> + <nat:2> \} \\ <var:k> := <nat:3> + <var:k> * <var:Q> ; \\ \{ <var:Q> = <var:j> \land <var:k> = <nat:4> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> + <nat:3> \} \end{eqnarray} Furthering running the set of commands produces : \begin{eqnarray} <var:k> := <nat:3> + <var:k> * <var:Q> ; \\ \{ <var:Q> = <var:j> \land <var:k> = <nat:4> \times <var:j> ^ <nat:3> + <nat:2> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:3> \} \\ <var:k> := <nat:3> + <var:k> * <var:Q> ; \\ \{ <var:Q> = <var:j> \land <var:k> = <nat:4> \times <var:j> ^ <nat:4> + <nat:2> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:3> \} \\ <var:k> := <nat:2> + <var:k> * <var:Q> ; \\ \{ <var:Q> = <var:j> \land <var:k> = <nat:4> \times <var:j> ^ <nat:5> + <nat:2> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:2> \} \\ <var:k> := <nat:3> + <var:k> * <var:Q> ; \\ \{ <var:Q> = <var:j> \land <var:k> = <nat:4> \times <var:j> ^ <nat:6> + <nat:2> \times <var:j> ^ <nat:5> + <nat:3> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> + <nat:3> \} \\ <var:k> := <nat:1> + <var:k> * <var:Q> \\ \{ <var:Q> = <var:j> \land <var:k> = <nat:4> \times <var:j> ^ <nat:7> + <nat:2> \times <var:j> ^ <nat:6> + <nat:3> \times <var:j> ^ <nat:5> + <nat:3> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:2> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:1> \} \end{eqnarray} The application of usual Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:Q> = <var:j> }} <var:k> := <nat:4> ; <var:k> := <nat:2> + <var:k> * <var:Q> ; <var:k> := <nat:3> + <var:k> * <var:Q> ; <var:k> := <nat:3> + <var:k> * <var:Q> ; <var:k> := <nat:3> + <var:k> * <var:Q> ; <var:k> := <nat:2> + <var:k> * <var:Q> ; <var:k> := <nat:3> + <var:k> * <var:Q> ; <var:k> := <nat:1> + <var:k> * <var:Q> {{ <var:k> = <nat:4> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:k> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:k> = <nat:4> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:k> = <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:k> = <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:k> = <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:k> = <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:k> = <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:k> = <nat:4> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 