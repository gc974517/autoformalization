\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:h1> := <var:X> ; <var:h0> := <nat:4> ; <var:h1> := <var:h1> * <nat:3> ; <var:d> := <var:h1> <var:d> := <var:d> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Assume it to be that $ <var:X> = <var:V> $ prior to the evaluation of this series of commands , then we have $ <var:d> = <nat:3> * <var:V> + <nat:4> $ once code has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:V> \} \\ <var:h1> := <var:X> ; \\ \{ <var:X> = <var:V> \land <var:h1> = <var:V> \} \\ <var:h0> := <nat:4> ; \\ \{ <var:X> = <var:V> \land <var:h1> = <var:V> \land <var:h0> = <nat:4> \} \\ <var:h1> := <var:h1> * <nat:3> ; \\ \{ <var:X> = <var:V> \land <var:h1> = <nat:3> * <var:V> \land <var:h0> = <nat:4> \} \\ <var:d> := <var:h1> \\ \{ <var:X> = <var:V> \land <var:h0> = <nat:4> \land <var:d> = <nat:3> * <var:V> \} \\ <var:d> := <var:d> + <var:h0> \\ \{ <var:X> = <var:V> \land <var:d> = <nat:3> * <var:V> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h1> := <var:X> ; <var:h0> := <nat:4> ; <var:h1> := <var:h1> * <nat:3> ; <var:d> := <var:h1> <var:d> := <var:d> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:X> = <var:V> }} <def:poly> {{ <var:d> = <nat:3> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:h1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:h1> = <var:V> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:h1> = <nat:3> * <var:V> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:h0> = <nat:4> /\ <var:d> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:d> = <nat:3> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 