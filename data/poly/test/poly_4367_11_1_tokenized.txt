\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:h> ; <var:b2> := <var:b1> * <var:h> ; <var:b3> := <var:b2> * <var:h> ; <var:b0> := <nat:5> ; <var:b1> := <var:b1> * <nat:9> ; <var:b2> := <var:b2> * <nat:7> ; <var:b3> := <var:b3> * <nat:5> ; <var:I> := <var:b3> <var:I> := <var:I> + <var:b2> <var:I> := <var:I> + <var:b1> <var:I> := <var:I> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:h> = <var:j> $ --- letting positive coefficients $ <var:j> $ --- prior to running this series of commands , it holds that $ <var:I> = <nat:5> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:9> * <var:j> + <nat:5> $ once code finishes . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions is clear using usual Hoare reasoning . Moving on to the upcoming statements contained in our code segment , we see \begin{verbatim} { <var:h> = <var:j> } <var:b1> := <var:h> { <var:h> = <var:j> \land <var:b1> = <var:j> } { <var:h> = <var:j> \land <var:b1> = <var:j> } <var:b2> := <var:b1> * <var:h> { <var:h> = <var:j> \land <var:b1> = <var:j> \land <var:b2> = <var:j> ^ <nat:2> } { <var:h> = <var:j> \land <var:b1> = <var:j> \land <var:b2> = <var:j> ^ <nat:2> } <var:b3> := <var:b2> * <var:h> { <var:h> = <var:j> \land <var:b1> = <var:j> \land <var:b2> = <var:j> ^ <nat:2> \land <var:b3> = <var:j> ^ <nat:3> } { <var:h> = <var:j> \land <var:b1> = <var:j> \land <var:b2> = <var:j> ^ <nat:2> \land <var:b3> = <var:j> ^ <nat:3> } <var:b0> := <nat:5> { <var:h> = <var:j> \land <var:b1> = <var:j> \land <var:b2> = <var:j> ^ <nat:2> \land <var:b3> = <var:j> ^ <nat:3> \land <var:b0> = <nat:5> } { <var:h> = <var:j> \land <var:b1> = <var:j> \land <var:b2> = <var:j> ^ <nat:2> \land <var:b3> = <var:j> ^ <nat:3> \land <var:b0> = <nat:5> } <var:b1> := <var:b1> * <nat:9> { <var:h> = <var:j> \land <var:b1> = <nat:9> \times <var:j> \land <var:b2> = <var:j> ^ <nat:2> \land <var:b3> = <var:j> ^ <nat:3> \land <var:b0> = <nat:5> } { <var:h> = <var:j> \land <var:b1> = <nat:9> \times <var:j> \land <var:b2> = <var:j> ^ <nat:2> \land <var:b3> = <var:j> ^ <nat:3> \land <var:b0> = <nat:5> } <var:b2> := <var:b2> * <nat:7> { <var:h> = <var:j> \land <var:b1> = <nat:9> \times <var:j> \land <var:b2> = <nat:7> \times <var:j> ^ <nat:2> \land <var:b3> = <var:j> ^ <nat:3> \land <var:b0> = <nat:5> } { <var:h> = <var:j> \land <var:b1> = <nat:9> \times <var:j> \land <var:b2> = <nat:7> \times <var:j> ^ <nat:2> \land <var:b3> = <var:j> ^ <nat:3> \land <var:b0> = <nat:5> } <var:b3> := <var:b3> * <nat:5> { <var:h> = <var:j> \land <var:b1> = <nat:9> \times <var:j> \land <var:b2> = <nat:7> \times <var:j> ^ <nat:2> \land <var:b3> = <nat:5> \times <var:j> ^ <nat:3> \land <var:b0> = <nat:5> } { <var:h> = <var:j> \land <var:b1> = <nat:9> \times <var:j> \land <var:b2> = <nat:7> \times <var:j> ^ <nat:2> \land <var:b3> = <nat:5> \times <var:j> ^ <nat:3> \land <var:b0> = <nat:5> } <var:I> := <var:b3{ <var:h> = <var:j> \land <var:b1> = <nat:9> \times <var:j> \land <var:b2> = <nat:7> \times <var:j> ^ <nat:2> \land <var:b0> = <nat:5> \land <var:I> = <nat:5> \times <var:j> ^ <nat:3> } { <var:h> = <var:j> \land <var:b1> = <nat:9> \times <var:j> \land <var:b2> = <nat:7> \times <var:j> ^ <nat:2> \land <var:b0> = <nat:5> \land <var:I> = <nat:5> \times <var:j> ^ <nat:3> } <var:I> := <var:I> + <var:b2{ <var:h> = <var:j> \land <var:b1> = <nat:9> \times <var:j> \land <var:b0> = <nat:5> \land <var:I> = <nat:5> \times <var:j> ^ <nat:3> + <nat:7> \times <var:j> ^ <nat:2> } { <var:h> = <var:j> \land <var:b1> = <nat:9> \times <var:j> \land <var:b0> = <nat:5> \land <var:I> = <nat:5> \times <var:j> ^ <nat:3> + <nat:7> \times <var:j> ^ <nat:2> } <var:I> := <var:I> + <var:b1{ <var:h> = <var:j> \land <var:b0> = <nat:5> \land <var:I> = <nat:5> \times <var:j> ^ <nat:3> + <nat:7> \times <var:j> ^ <nat:2> + <nat:9> \times <var:j> } \end{verbatim} This is known to be sound using the environment update rule found in Hoare logic . Going forward , \begin{verbatim} { <var:h> = <var:j> } <var:b1> := <var:h> { <var:h> = <var:j> \land <var:b1> = <var:j> } \end{verbatim} This is guaranteed through the environment update rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Definition <def:poly> := <var:b1> := <var:h> ; <var:b2> := <var:b1> * <var:h> ; <var:b3> := <var:b2> * <var:h> ; <var:b0> := <nat:5> ; <var:b1> := <var:b1> * <nat:9> ; <var:b2> := <var:b2> * <nat:7> ; <var:b3> := <var:b3> * <nat:5> ; <var:I> := <var:b3> <var:I> := <var:I> + <var:b2> <var:I> := <var:I> + <var:b1> <var:I> := <var:I> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:h> = <var:j> }} <def:poly> {{ <var:I> = <nat:5> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:9> * <var:j> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:b1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:b1> = <var:j> /\ <var:b2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:b1> = <var:j> /\ <var:b2> = <var:j> ^ <nat:2> /\ <var:b3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:b1> = <var:j> /\ <var:b2> = <var:j> ^ <nat:2> /\ <var:b3> = <var:j> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:b1> = <nat:9> * <var:j> /\ <var:b2> = <var:j> ^ <nat:2> /\ <var:b3> = <var:j> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:b1> = <nat:9> * <var:j> /\ <var:b2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:b3> = <var:j> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:b1> = <nat:9> * <var:j> /\ <var:b2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:b3> = <nat:5> * <var:j> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:b1> = <nat:9> * <var:j> /\ <var:b2> = <nat:7> * <var:j> ^ <nat:2> /\ <var:b0> = <nat:5> /\ <var:I> = <nat:5> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:b1> = <nat:9> * <var:j> /\ <var:b0> = <nat:5> /\ <var:I> = <nat:5> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:b0> = <nat:5> /\ <var:I> = <nat:5> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:I> = <nat:5> * <var:j> ^ <nat:3> + <nat:7> * <var:j> ^ <nat:2> + <nat:9> * <var:j> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 