\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:H> := <nat:1> ; <var:H> := <nat:1> + <var:H> * <var:F> ; <var:H> := <nat:4> + <var:H> * <var:F> ; <var:H> := <nat:2> + <var:H> * <var:F> ; <var:H> := <nat:3> + <var:H> * <var:F> ; <var:H> := <nat:1> + <var:H> * <var:F> ; <var:H> := <nat:3> + <var:H> * <var:F> ; <var:H> := <nat:1> + <var:H> * <var:F> ; <var:H> := <nat:1> + <var:H> * <var:F> ; <var:H> := <nat:4> + <var:H> * <var:F> ; <var:H> := <nat:4> + <var:H> * <var:F> ; <var:H> := <nat:2> + <var:H> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> in \emph{Imp} . Assume $ <var:F> = <var:X> $ ahead of the execution of our program it must be that we have $ <var:H> = <nat:1> * <var:X> ^ <nat:11> + <nat:1> * <var:X> ^ <nat:10> + <nat:4> * <var:X> ^ <nat:9> + <nat:2> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> $ after set of instructions exits . \end{theorem} \begin{proof} Proving correctness for this segment of code is accomplished through standard Hoare techniques . Moving forward to the subsequent lines of codeseen in the set of instructions , \begin{verbatim} { <var:F> = <var:X> } <var:H> := <nat:1> { <var:F> = <var:X> \land <var:H> = <nat:1> } { <var:F> = <var:X> \land <var:H> = <nat:1> } <var:H> := <nat:1> + <var:H> * <var:F> { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> + <nat:1> } { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> + <nat:1> } <var:H> := <nat:4> + <var:H> * <var:F> { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> } { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> } <var:H> := <nat:2> + <var:H> * <var:F> { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:2> } { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:2> } <var:H> := <nat:3> + <var:H> * <var:F> { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> + <nat:3> } { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> ^ <nat:4> + <nat:1> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> ^ <nat:2> + <nat:2> \cdot <var:X> + <nat:3> } <var:H> := <nat:1> + <var:H> * <var:F> { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> ^ <nat:5> + <nat:1> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> ^ <nat:3> + <nat:2> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + <nat:1> } \end{verbatim} Looking at the upcoming statements seen in our segment of code , we see \begin{verbatim} { <var:F> = <var:X> } <var:H> := <nat:1> { <var:F> = <var:X> \land <var:H> = <nat:1> } { <var:F> = <var:X> \land <var:H> = <nat:1> } <var:H> := <nat:1> + <var:H> * <var:F> { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> + <nat:1> } { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> + <nat:1> } <var:H> := <nat:4> + <var:H> * <var:F> { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> } { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> } <var:H> := <nat:2> + <var:H> * <var:F> { <var:F> = <var:X> \land <var:H> = <nat:1> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + <nat:2> } \end{verbatim} Immediately after , we have \begin{verbatim} { <var:F> = <var:X> } <var:H> := <nat:1> { <var:F> = <var:X> \land <var:H> = <nat:1> } \end{verbatim} Honing in on the upcoming line of code in our segment of code , \begin{verbatim} { <var:F> = <var:X> } <var:H> := <nat:1> { <var:F> = <var:X> \land <var:H> = <nat:1> } \end{verbatim} This is deduced with the variable update scheme given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:1> ; <var:H> := <nat:1> + <var:H> * <var:F> ; <var:H> := <nat:4> + <var:H> * <var:F> ; <var:H> := <nat:2> + <var:H> * <var:F> ; <var:H> := <nat:3> + <var:H> * <var:F> ; <var:H> := <nat:1> + <var:H> * <var:F> ; <var:H> := <nat:3> + <var:H> * <var:F> ; <var:H> := <nat:1> + <var:H> * <var:F> ; <var:H> := <nat:1> + <var:H> * <var:F> ; <var:H> := <nat:4> + <var:H> * <var:F> ; <var:H> := <nat:4> + <var:H> * <var:F> ; <var:H> := <nat:2> + <var:H> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:F> = <var:X> }} <def:poly> {{ <var:H> = <nat:1> * <var:X> ^ <nat:11> + <nat:1> * <var:X> ^ <nat:10> + <nat:4> * <var:X> ^ <nat:9> + <nat:2> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:H> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:H> = <nat:1> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:H> = <nat:1> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:H> = <nat:1> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:H> = <nat:1> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:H> = <nat:1> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:H> = <nat:1> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:H> = <nat:1> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:H> = <nat:1> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:H> = <nat:1> * <var:X> ^ <nat:9> + <nat:1> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:H> = <nat:1> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:9> + <nat:4> * <var:X> ^ <nat:8> + <nat:2> * <var:X> ^ <nat:7> + <nat:3> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:H> = <nat:1> * <var:X> ^ <nat:11> + <nat:1> * <var:X> ^ <nat:10> + <nat:4> * <var:X> ^ <nat:9> + <nat:2> * <var:X> ^ <nat:8> + <nat:3> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 