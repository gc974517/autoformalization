\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:8> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:b> ; <var:C2> := <nat:1> ; <var:C2> := <var:C2> * <var:b> ; <var:C2> := <var:C2> * <var:b> ; <var:C3> := <nat:4> ; <var:C3> := <var:C3> * <var:b> ; <var:C3> := <var:C3> * <var:b> ; <var:C3> := <var:C3> * <var:b> ; <var:Z> := <var:C3> ; <var:Z> := <var:Z> + <var:C2> ; <var:Z> := <var:Z> + <var:C1> ; <var:Z> := <var:Z> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:b> = <var:i> $ ahead of evaluating the series of instructions then $ <var:Z> = <nat:4> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for the series of instructions can be demonstrated with Hoare techniques . Stepping forward , we see the variable assignmet statement \verb | <var:C0> := <nat:8> ; | . This advances $ \{ <var:b> = <var:i> \} $ toward $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \} $ . This is ensured through the assignment scheme defined in usual Hoare logic . Focusing on the upcoming line of code in the series of instructions , we see the binding statement giving $ <nat:4> $ to $ <var:C1>$ . This moves $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \} $ to the condition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \} $ . This is sound with the assignment inference rule in standard Hoare reasoning . Following , the variable update line \verb | <var:C1> := <var:C1> * <var:b> ; | . This advances the precondition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \} $ as the condition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \} $ . This is given using the assignment inference rule given in standard Hoare logic . After , we have the binding code yielding $ <nat:1> $ to $ <var:C2>$ . This statement forwards $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \} $ as the condition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \} $ . This is rigorously given using the assignment inference rule found in Hoare logic . Paying attention to the next piece of code in the set of instructions , we have the line yielding $ <var:C2> * <var:b> $ into $ <var:C2>$ . This command forwards the condition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \} $ as the condition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> \} $ . Next , we see the variable assignmet code \verb | <var:C2> := <var:C2> * <var:b> ; | . This code forwards the condition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> \} $ as the condition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> ^ <nat:2> \} $ . Looking at the subsequent piece of code contained in our code , we have the environment update line assigning $ <nat:4> $ to $ <var:C3>$ . This code redefines the precondition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> ^ <nat:2> \} $ toward the postcondition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:C3> = <nat:4> \} $ . Taking another step toward the proceeding line in the set of commands , the environment update command \verb | <var:C3> := <var:C3> * <var:b> ; | . This code moves $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:C3> = <nat:4> \} $ to $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:C3> = <nat:4> \cdot <var:i> \} $ . Advancing to the subsequent line seen in the code , the code \verb | <var:C3> := <var:C3> * <var:b> ; | . This statement redefines the precondition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:C3> = <nat:4> \cdot <var:i> \} $ to the condition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:C3> = <nat:4> \cdot <var:i> ^ <nat:2> \} $ . This is shown using the assignment law defined by standard Hoare logic . Going to the next step , the variable update line \verb | <var:C3> := <var:C3> * <var:b> ; | . This line forwards the condition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:C3> = <nat:4> \cdot <var:i> ^ <nat:2> \} $ to the postcondition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:C3> = <nat:4> \cdot <var:i> ^ <nat:3> \} $ . Moving forward , we see the variable update code defining $ <var:C3> $ as $ <var:Z>$ . This statement moves $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:C3> = <nat:4> \cdot <var:i> ^ <nat:3> \} $ as the condition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:Z> = <nat:4> \cdot <var:i> ^ <nat:3> \} $ . After , the assignment line defining $ <var:Z> + <var:C2> $ as $ <var:Z>$ . This moves the precondition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:C2> = <nat:1> \cdot <var:i> ^ <nat:2> \land <var:Z> = <nat:4> \cdot <var:i> ^ <nat:3> \} $ into the postcondition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:Z> = <nat:4> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> \} $ . This is shown through the assignment inference rule defined by Hoare techniques . Advancing on , we have the assignment command giving $ <var:Z> + <var:C1> $ to $ <var:Z>$ . This takes the precondition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:C1> = <nat:4> \cdot <var:i> \land <var:Z> = <nat:4> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> \} $ into the condition $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:Z> = <nat:4> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> \} $ . After , the variable update line \verb | <var:Z> := <var:Z> + <var:C0> | . This statement moves $ \{ <var:b> = <var:i> \land <var:C0> = <nat:8> \land <var:Z> = <nat:4> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> \} $ into the condition $ \{ <var:b> = <var:i> \land <var:Z> = <nat:4> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <def:poly> := <var:C0> := <nat:8> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:b> ; <var:C2> := <nat:1> ; <var:C2> := <var:C2> * <var:b> ; <var:C2> := <var:C2> * <var:b> ; <var:C3> := <nat:4> ; <var:C3> := <var:C3> * <var:b> ; <var:C3> := <var:C3> * <var:b> ; <var:C3> := <var:C3> * <var:b> ; <var:Z> := <var:C3> ; <var:Z> := <var:Z> + <var:C2> ; <var:Z> := <var:Z> + <var:C1> ; <var:Z> := <var:Z> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:b> = <var:i> }} <def:poly> {{ <var:Z> = <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:C0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:4> * <var:i> /\ <var:C2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:4> * <var:i> /\ <var:C2> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:4> * <var:i> /\ <var:C2> = <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:4> * <var:i> /\ <var:C2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:C3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:4> * <var:i> /\ <var:C2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:4> * <var:i> /\ <var:C2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:4> * <var:i> /\ <var:C2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:4> * <var:i> /\ <var:C2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:Z> = <nat:4> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:C0> = <nat:8> /\ <var:C1> = <nat:4> * <var:i> /\ <var:Z> = <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:C0> = <nat:8> /\ <var:Z> = <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:Z> = <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 