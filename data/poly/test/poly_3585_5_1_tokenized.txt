\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h1> := <var:y> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:5> ; <var:o> := <var:h1> <var:o> := <var:o> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> . Assuming it to hold that $ <var:y> = <var:m> $ ahead of the execution of the code segment it follows that we have $ <var:o> = <nat:5> * <var:m> + <nat:2> $ when set of commands has finished executing . \end{theorem} \begin{proof} The flow of logic for the series of instructions can be seen through standard Hoare reasoning . Moving on to the next step , the binding command \verb | <var:h1> := <var:y> ; | . This statement moves the precondition $ \{ <var:y> = <var:m> \} $ to the condition $ \{ <var:y> = <var:m> \land <var:h1> = <var:m> \} $ . This is shown to be logically sound with the assignment law of Hoare techniques . Going forward , we see the variable assignmet code binding $ <nat:2> $ to $ <var:h0>$ . This transfers the condition $ \{ <var:y> = <var:m> \land <var:h1> = <var:m> \} $ into the postcondition $ \{ <var:y> = <var:m> \land <var:h1> = <var:m> \land <var:h0> = <nat:2> \} $ . This is rigorously given through the assignment rule defined in Hoare techniques . Keeping momentum , we see the binding line binding $ <var:h1> * <nat:5> $ into $ <var:h1>$ . This redefines the precondition $ \{ <var:y> = <var:m> \land <var:h1> = <var:m> \land <var:h0> = <nat:2> \} $ toward $ \{ <var:y> = <var:m> \land <var:h1> = <nat:5> \cdot <var:m> \land <var:h0> = <nat:2> \} $ . Next , we see the environment update line binding $ <var:h1$ toward $ <var:o>$ . This line takes the condition $ \{ <var:y> = <var:m> \land <var:h1> = <nat:5> \cdot <var:m> \land <var:h0> = <nat:2> \} $ into $ \{ <var:y> = <var:m> \land <var:h0> = <nat:2> \land <var:o> = <nat:5> \cdot <var:m> \} $ . This is rigorously given through the assignment inference rule defined in typical Hoare techniques . Immediately following , we see the binding command yielding $ <var:o> + <var:h0$ toward $ <var:o>$ . This line transfers $ \{ <var:y> = <var:m> \land <var:h0> = <nat:2> \land <var:o> = <nat:5> \cdot <var:m> \} $ into the postcondition $ \{ <var:y> = <var:m> \land <var:o> = <nat:5> \cdot <var:m> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h1> := <var:y> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:5> ; <var:o> := <var:h1> <var:o> := <var:o> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:y> = <var:m> }} <def:poly> {{ <var:o> = <nat:5> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:h1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:h1> = <var:m> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:h1> = <nat:5> * <var:m> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:h0> = <nat:2> /\ <var:o> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:o> = <nat:5> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 