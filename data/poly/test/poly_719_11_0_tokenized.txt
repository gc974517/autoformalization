\begin{document} \begin{theorem} We define a code segment in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:3> ; <var:U2> := <nat:4> ; <var:U2> := <var:U2> * <var:K> ; <var:U2> := <var:U2> * <var:K> ; <var:U3> := <nat:7> ; <var:U3> := <var:U3> * <var:K> ; <var:U3> := <var:U3> * <var:K> ; <var:U3> := <var:U3> * <var:K> ; <var:y> := <var:U3> ; <var:y> := <var:y> + <var:U2> ; <var:y> := <var:y> + <var:U0> \end{verbatim} Assuming it to hold that $ <var:K> = <var:n> $ before the execution of this list of commands , then $ <var:y> = <nat:7> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:3> $ when series of instructions has finished executing . \end{theorem} \begin{proof} Proving correctness for our set of instructions can be shown by standard Hoare logic . Moving on to the following pieces of code found in the series of commands , we see \verb | { <var:K> = <var:n> } <var:U0> := <nat:3> { <var:K> = <var:n> \land <var:U0> = <nat:3> } | , \verb | { <var:K> = <var:n> \land <var:U0> = <nat:3> } <var:U2> := <nat:4> { <var:K> = <var:n> \land <var:U0> = <nat:3> \land <var:U2> = <nat:4> } | , \verb | { <var:K> = <var:n> \land <var:U0> = <nat:3> \land <var:U2> = <nat:4> } <var:U2> := <var:U2> * <var:K> { <var:K> = <var:n> \land <var:U0> = <nat:3> \land <var:U2> = <nat:4> \cdot <var:n> } | , \verb | { <var:K> = <var:n> \land <var:U0> = <nat:3> \land <var:U2> = <nat:4> \cdot <var:n> } <var:U2> := <var:U2> * <var:K> { <var:K> = <var:n> \land <var:U0> = <nat:3> \land <var:U2> = <nat:4> \cdot <var:n> ^ <nat:2> } | and \verb | { <var:K> = <var:n> \land <var:U0> = <nat:3> \land <var:U2> = <nat:4> \cdot <var:n> ^ <nat:2> } <var:U3> := <nat:7> { <var:K> = <var:n> \land <var:U0> = <nat:3> \land <var:U2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:U3> = <nat:7> } | . Jumping to the proceeding bits of codein the series of instructions , we see \verb | { <var:K> = <var:n> } <var:U0> := <nat:3> { <var:K> = <var:n> \land <var:U0> = <nat:3> } | , \verb | { <var:K> = <var:n> \land <var:U0> = <nat:3> } <var:U2> := <nat:4> { <var:K> = <var:n> \land <var:U0> = <nat:3> \land <var:U2> = <nat:4> } | and \verb | { <var:K> = <var:n> \land <var:U0> = <nat:3> \land <var:U2> = <nat:4> } <var:U2> := <var:U2> * <var:K> { <var:K> = <var:n> \land <var:U0> = <nat:3> \land <var:U2> = <nat:4> \cdot <var:n> } | . Taking another step toward the following line of code in the program , we see \verb | { <var:K> = <var:n> } <var:U0> := <nat:3> { <var:K> = <var:n> \land <var:U0> = <nat:3> } | . This is deduced with the variable assignmet scheme obtained from standard Hoare reasoning . Going forward , we have \verb | { <var:K> = <var:n> } <var:U0> := <nat:3> { <var:K> = <var:n> \land <var:U0> = <nat:3> } | and \verb | { <var:K> = <var:n> \land <var:U0> = <nat:3> } <var:U2> := <nat:4> { <var:K> = <var:n> \land <var:U0> = <nat:3> \land <var:U2> = <nat:4> } | . This is known to be sound with the variable assignmet inference rule from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:K> = <var:n> }} <var:U0> := <nat:3> ; <var:U2> := <nat:4> ; <var:U2> := <var:U2> * <var:K> ; <var:U2> := <var:U2> * <var:K> ; <var:U3> := <nat:7> ; <var:U3> := <var:U3> * <var:K> ; <var:U3> := <var:U3> * <var:K> ; <var:U3> := <var:U3> * <var:K> ; <var:y> := <var:U3> ; <var:y> := <var:y> + <var:U2> ; <var:y> := <var:y> + <var:U0> {{ <var:y> = <nat:7> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:U0> = <nat:3> /\ <var:U2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:U0> = <nat:3> /\ <var:U2> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:U0> = <nat:3> /\ <var:U2> = <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:U0> = <nat:3> /\ <var:U2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:U3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:U0> = <nat:3> /\ <var:U2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:U0> = <nat:3> /\ <var:U2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:U0> = <nat:3> /\ <var:U2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:U0> = <nat:3> /\ <var:U2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:y> = <nat:7> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:U0> = <nat:3> /\ <var:y> = <nat:7> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:y> = <nat:7> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 