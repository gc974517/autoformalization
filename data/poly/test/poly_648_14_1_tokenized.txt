\begin{document} \begin{theorem} Consider a segment of code as follows \begin{verbatim} <var:t1> := <var:l> ; <var:t2> := <var:t1> * <var:l> ; <var:t3> := <var:t2> * <var:l> ; <var:t4> := <var:t3> * <var:l> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:2> ; <var:t2> := <var:t2> * <nat:2> ; <var:t3> := <var:t3> * <nat:3> ; <var:t4> := <var:t4> * <nat:3> ; <var:v> := <var:t4> <var:v> := <var:v> + <var:t3> <var:v> := <var:v> + <var:t2> <var:v> := <var:v> + <var:t1> <var:v> := <var:v> + <var:t0> \end{verbatim} Allow ( given any $ <var:k> \in \mathbb{N} $ ) it to hold that $ <var:l> = <var:k> $ prior to executing this list of instructions it holds that $ <var:v> = <nat:3> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:3> $ after code segment finishes . \end{theorem} \begin{proof} Using usual Hoare logic gives : \begin{eqnarray} \{ <var:l> = <var:k> \} \\ <var:t1> := <var:l> ; \\ \{ <var:l> = <var:k> \land <var:t1> = <var:k> \} \\ <var:t2> := <var:t1> * <var:l> ; \\ \{ <var:l> = <var:k> \land <var:t1> = <var:k> \land <var:t2> = <var:k> ^ <nat:2> \} \\ <var:t3> := <var:t2> * <var:l> ; \\ \{ <var:l> = <var:k> \land <var:t1> = <var:k> \land <var:t2> = <var:k> ^ <nat:2> \land <var:t3> = <var:k> ^ <nat:3> \} \\ <var:t4> := <var:t3> * <var:l> ; \\ \{ <var:l> = <var:k> \land <var:t1> = <var:k> \land <var:t2> = <var:k> ^ <nat:2> \land <var:t3> = <var:k> ^ <nat:3> \land <var:t4> = <var:k> ^ <nat:4> \} \\ <var:t0> := <nat:3> ; \\ \{ <var:l> = <var:k> \land <var:t1> = <var:k> \land <var:t2> = <var:k> ^ <nat:2> \land <var:t3> = <var:k> ^ <nat:3> \land <var:t4> = <var:k> ^ <nat:4> \land <var:t0> = <nat:3> \} \\ <var:t1> := <var:t1> * <nat:2> ; \\ \{ <var:l> = <var:k> \land <var:t1> = <nat:2> \times <var:k> \land <var:t2> = <var:k> ^ <nat:2> \land <var:t3> = <var:k> ^ <nat:3> \land <var:t4> = <var:k> ^ <nat:4> \land <var:t0> = <nat:3> \} \\ <var:t2> := <var:t2> * <nat:2> ; \\ \{ <var:l> = <var:k> \land <var:t1> = <nat:2> \times <var:k> \land <var:t2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:t3> = <var:k> ^ <nat:3> \land <var:t4> = <var:k> ^ <nat:4> \land <var:t0> = <nat:3> \} \\ <var:t3> := <var:t3> * <nat:3> ; \\ \{ <var:l> = <var:k> \land <var:t1> = <nat:2> \times <var:k> \land <var:t2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:t3> = <nat:3> \times <var:k> ^ <nat:3> \land <var:t4> = <var:k> ^ <nat:4> \land <var:t0> = <nat:3> \} \\ <var:t4> := <var:t4> * <nat:3> ; \\ \{ <var:l> = <var:k> \land <var:t1> = <nat:2> \times <var:k> \land <var:t2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:t3> = <nat:3> \times <var:k> ^ <nat:3> \land <var:t4> = <nat:3> \times <var:k> ^ <nat:4> \land <var:t0> = <nat:3> \} \\ <var:v> := <var:t4> \\ \{ <var:l> = <var:k> \land <var:t1> = <nat:2> \times <var:k> \land <var:t2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:t3> = <nat:3> \times <var:k> ^ <nat:3> \land <var:t0> = <nat:3> \land <var:v> = <nat:3> \times <var:k> ^ <nat:4> \} \\ <var:v> := <var:v> + <var:t3> \\ \{ <var:l> = <var:k> \land <var:t1> = <nat:2> \times <var:k> \land <var:t2> = <nat:2> \times <var:k> ^ <nat:2> \land <var:t0> = <nat:3> \land <var:v> = <nat:3> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:t2> \\ \{ <var:l> = <var:k> \land <var:t1> = <nat:2> \times <var:k> \land <var:t0> = <nat:3> \land <var:v> = <nat:3> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:t1> \\ \{ <var:l> = <var:k> \land <var:t0> = <nat:3> \land <var:v> = <nat:3> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> \} \\ <var:v> := <var:v> + <var:t0> \\ \{ <var:l> = <var:k> \land <var:v> = <nat:3> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:3> \} \end{eqnarray} Therefore , our list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <var:t4> : string := " <var:t4> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:l> = <var:k> }} <var:t1> := <var:l> ; <var:t2> := <var:t1> * <var:l> ; <var:t3> := <var:t2> * <var:l> ; <var:t4> := <var:t3> * <var:l> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:2> ; <var:t2> := <var:t2> * <nat:2> ; <var:t3> := <var:t3> * <nat:3> ; <var:t4> := <var:t4> * <nat:3> ; <var:v> := <var:t4> <var:v> := <var:v> + <var:t3> <var:v> := <var:v> + <var:t2> <var:v> := <var:v> + <var:t1> <var:v> := <var:v> + <var:t0> {{ <var:v> = <nat:3> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:t1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:t1> = <var:k> /\ <var:t2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:t1> = <var:k> /\ <var:t2> = <var:k> ^ <nat:2> /\ <var:t3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:t1> = <var:k> /\ <var:t2> = <var:k> ^ <nat:2> /\ <var:t3> = <var:k> ^ <nat:3> /\ <var:t4> = <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:t1> = <var:k> /\ <var:t2> = <var:k> ^ <nat:2> /\ <var:t3> = <var:k> ^ <nat:3> /\ <var:t4> = <var:k> ^ <nat:4> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:t1> = <nat:2> * <var:k> /\ <var:t2> = <var:k> ^ <nat:2> /\ <var:t3> = <var:k> ^ <nat:3> /\ <var:t4> = <var:k> ^ <nat:4> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:t1> = <nat:2> * <var:k> /\ <var:t2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:t3> = <var:k> ^ <nat:3> /\ <var:t4> = <var:k> ^ <nat:4> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:t1> = <nat:2> * <var:k> /\ <var:t2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:t3> = <nat:3> * <var:k> ^ <nat:3> /\ <var:t4> = <var:k> ^ <nat:4> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:t1> = <nat:2> * <var:k> /\ <var:t2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:t3> = <nat:3> * <var:k> ^ <nat:3> /\ <var:t4> = <nat:3> * <var:k> ^ <nat:4> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:t1> = <nat:2> * <var:k> /\ <var:t2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:t3> = <nat:3> * <var:k> ^ <nat:3> /\ <var:t0> = <nat:3> /\ <var:v> = <nat:3> * <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:t1> = <nat:2> * <var:k> /\ <var:t2> = <nat:2> * <var:k> ^ <nat:2> /\ <var:t0> = <nat:3> /\ <var:v> = <nat:3> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:t1> = <nat:2> * <var:k> /\ <var:t0> = <nat:3> /\ <var:v> = <nat:3> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:t0> = <nat:3> /\ <var:v> = <nat:3> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:k> /\ <var:v> = <nat:3> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 