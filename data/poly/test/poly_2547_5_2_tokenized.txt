\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:b> := <nat:3> ; <var:b> := <var:b> * <var:l> ; <var:b> := <nat:2> + <var:b> * <var:l> ; <var:b> := <nat:3> + <var:b> * <var:l> ; <var:b> := <nat:1> + <var:b> * <var:l> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Given --- taking integers $ <var:t> $ --- it to be that $ <var:l> = <var:t> $ prior to executing this list of instructions , it holds that we see $ <var:b> = <nat:3> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:t> \} \\ <var:b> := <nat:3> ; \\ \{ <var:l> = <var:t> \land <var:b> = <nat:3> \} \\ <var:b> := <var:b> * <var:l> ; \\ \{ <var:l> = <var:t> \land <var:b> = <nat:3> \cdot <var:t> + \} \\ <var:b> := <nat:2> + <var:b> * <var:l> ; \\ \{ <var:l> = <var:t> \land <var:b> = <nat:3> \cdot <var:t> ^ <nat:2> + <nat:2> \} \\ <var:b> := <nat:3> + <var:b> * <var:l> ; \\ \{ <var:l> = <var:t> \land <var:b> = <nat:3> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> + <nat:3> \} \\ <var:b> := <nat:1> + <var:b> * <var:l> \\ \{ <var:l> = <var:t> \land <var:b> = <nat:3> \cdot <var:t> ^ <nat:4> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:1> \} \end{eqnarray} Using typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:3> ; <var:b> := <var:b> * <var:l> ; <var:b> := <nat:2> + <var:b> * <var:l> ; <var:b> := <nat:3> + <var:b> * <var:l> ; <var:b> := <nat:1> + <var:b> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:l> = <var:t> }} <def:poly> {{ <var:b> = <nat:3> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:b> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:b> = <nat:3> * <var:t> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:b> = <nat:3> * <var:t> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:b> = <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:b> = <nat:3> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 