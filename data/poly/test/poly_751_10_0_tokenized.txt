\begin{document} \begin{theorem} Take a set of instructions : \begin{verbatim} <var:j0> := <nat:6> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:b> ; <var:j3> := <nat:2> ; <var:j3> := <var:j3> * <var:b> ; <var:j3> := <var:j3> * <var:b> ; <var:j3> := <var:j3> * <var:b> ; <var:y> := <var:j3> ; <var:y> := <var:y> + <var:j1> ; <var:y> := <var:y> + <var:j0> \end{verbatim} Allowing it to be that $ <var:b> = <var:L> $ prior to interpreting this code segment it must be that we see $ <var:y> = <nat:2> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> + <nat:6> $ after set of instructions terminates . \end{theorem} \begin{proof} The course of logic for this list of instructions is accomplished with Hoare reasoning . Stepping forward , \[ \begin{tabular} {rcl} \{ <var:b> = <var:L> \} & <var:j0> := <nat:6> & \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \} \\ \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \} & <var:j1> := <nat:4> & \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \land <var:j1> = <nat:4> \} \end{tabular} Moving forward , \[ \begin{tabular} {rcl} \{ <var:b> = <var:L> \} & <var:j0> := <nat:6> & \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \} \\ \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \} & <var:j1> := <nat:4> & \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \land <var:j1> = <nat:4> \} \\ \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \land <var:j1> = <nat:4> \} & <var:j1> := <var:j1> * <var:b> & \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \land <var:j1> = <nat:4> \cdot <var:L> \} \\ \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \land <var:j1> = <nat:4> \cdot <var:L> \} & <var:j3> := <nat:2> & \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \land <var:j1> = <nat:4> \cdot <var:L> \land <var:j3> = <nat:2> \} \\ \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \land <var:j1> = <nat:4> \cdot <var:L> \land <var:j3> = <nat:2> \} & <var:j3> := <var:j3> * <var:b> & \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \land <var:j1> = <nat:4> \cdot <var:L> \land <var:j3> = <nat:2> \cdot <var:L> \} \\ \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \land <var:j1> = <nat:4> \cdot <var:L> \land <var:j3> = <nat:2> \cdot <var:L> \} & <var:j3> := <var:j3> * <var:b> & \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \land <var:j1> = <nat:4> \cdot <var:L> \land <var:j3> = <nat:2> \cdot <var:L> ^ <nat:2> \} \end{tabular} This is shown with the binding rule found in usual Hoare techniques . Advancing to the proceeding statements found in the series of commands , we have \[ \begin{tabular} {rcl} \{ <var:b> = <var:L> \} & <var:j0> := <nat:6> & \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \} \\ \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \} & <var:j1> := <nat:4> & \{ <var:b> = <var:L> \land <var:j0> = <nat:6> \land <var:j1> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:b> = <var:L> }} <var:j0> := <nat:6> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:b> ; <var:j3> := <nat:2> ; <var:j3> := <var:j3> * <var:b> ; <var:j3> := <var:j3> * <var:b> ; <var:j3> := <var:j3> * <var:b> ; <var:y> := <var:j3> ; <var:y> := <var:y> + <var:j1> ; <var:y> := <var:y> + <var:j0> {{ <var:y> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:4> * <var:L> /\ <var:j3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:4> * <var:L> /\ <var:j3> = <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:4> * <var:L> /\ <var:j3> = <nat:2> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:4> * <var:L> /\ <var:j3> = <nat:2> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:4> * <var:L> /\ <var:y> = <nat:2> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:j0> = <nat:6> /\ <var:y> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:L> /\ <var:y> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 