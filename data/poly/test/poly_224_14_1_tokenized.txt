\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} such that \begin{verbatim} <var:p1> := <var:R> ; <var:p2> := <var:p1> * <var:R> ; <var:p3> := <var:p2> * <var:R> ; <var:p4> := <var:p3> * <var:R> ; <var:p0> := <nat:6> ; <var:p1> := <var:p1> * <nat:2> ; <var:p2> := <var:p2> * <nat:9> ; <var:p3> := <var:p3> * <nat:8> ; <var:p4> := <var:p4> * <nat:3> ; <var:u> := <var:p4> <var:u> := <var:u> + <var:p3> <var:u> := <var:u> + <var:p2> <var:u> := <var:u> + <var:p1> <var:u> := <var:u> + <var:p0> \end{verbatim} Allowing it to be that $ <var:R> = <var:k> $ ahead of the evaluation of our series of commands , it must be that we have $ <var:u> = <nat:3> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:6> $ . \end{theorem} \begin{proof} We can see that the following decorated set of instructions . \begin{eqnarray} \{ <var:R> = <var:k> \} \\ <var:p1> := <var:R> ; \\ \{ <var:R> = <var:k> \land <var:p1> = <var:k> \} \\ <var:p2> := <var:p1> * <var:R> ; \\ \{ <var:R> = <var:k> \land <var:p1> = <var:k> \land <var:p2> = <var:k> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:R> ; \\ \{ <var:R> = <var:k> \land <var:p1> = <var:k> \land <var:p2> = <var:k> ^ <nat:2> \land <var:p3> = <var:k> ^ <nat:3> \} \\ <var:p4> := <var:p3> * <var:R> ; \\ \{ <var:R> = <var:k> \land <var:p1> = <var:k> \land <var:p2> = <var:k> ^ <nat:2> \land <var:p3> = <var:k> ^ <nat:3> \land <var:p4> = <var:k> ^ <nat:4> \} \\ <var:p0> := <nat:6> ; \\ \{ <var:R> = <var:k> \land <var:p1> = <var:k> \land <var:p2> = <var:k> ^ <nat:2> \land <var:p3> = <var:k> ^ <nat:3> \land <var:p4> = <var:k> ^ <nat:4> \land <var:p0> = <nat:6> \} \\ <var:p1> := <var:p1> * <nat:2> ; \\ \{ <var:R> = <var:k> \land <var:p1> = <nat:2> \cdot <var:k> \land <var:p2> = <var:k> ^ <nat:2> \land <var:p3> = <var:k> ^ <nat:3> \land <var:p4> = <var:k> ^ <nat:4> \land <var:p0> = <nat:6> \} \\ <var:p2> := <var:p2> * <nat:9> ; \\ \{ <var:R> = <var:k> \land <var:p1> = <nat:2> \cdot <var:k> \land <var:p2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:p3> = <var:k> ^ <nat:3> \land <var:p4> = <var:k> ^ <nat:4> \land <var:p0> = <nat:6> \} \\ <var:p3> := <var:p3> * <nat:8> ; \\ \{ <var:R> = <var:k> \land <var:p1> = <nat:2> \cdot <var:k> \land <var:p2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:p3> = <nat:8> \cdot <var:k> ^ <nat:3> \land <var:p4> = <var:k> ^ <nat:4> \land <var:p0> = <nat:6> \} \\ <var:p4> := <var:p4> * <nat:3> ; \\ \{ <var:R> = <var:k> \land <var:p1> = <nat:2> \cdot <var:k> \land <var:p2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:p3> = <nat:8> \cdot <var:k> ^ <nat:3> \land <var:p4> = <nat:3> \cdot <var:k> ^ <nat:4> \land <var:p0> = <nat:6> \} \\ <var:u> := <var:p4> \\ \{ <var:R> = <var:k> \land <var:p1> = <nat:2> \cdot <var:k> \land <var:p2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:p3> = <nat:8> \cdot <var:k> ^ <nat:3> \land <var:p0> = <nat:6> \land <var:u> = <nat:3> \cdot <var:k> ^ <nat:4> \} \\ <var:u> := <var:u> + <var:p3> \\ \{ <var:R> = <var:k> \land <var:p1> = <nat:2> \cdot <var:k> \land <var:p2> = <nat:9> \cdot <var:k> ^ <nat:2> \land <var:p0> = <nat:6> \land <var:u> = <nat:3> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:p2> \\ \{ <var:R> = <var:k> \land <var:p1> = <nat:2> \cdot <var:k> \land <var:p0> = <nat:6> \land <var:u> = <nat:3> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> + <nat:9> \cdot <var:k> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:p1> \\ \{ <var:R> = <var:k> \land <var:p0> = <nat:6> \land <var:u> = <nat:3> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> + <nat:9> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> \} \end{eqnarray} Allowing executing the code segment gives : \begin{eqnarray} <var:u> := <var:u> + <var:p0> \\ \{ <var:R> = <var:k> \land <var:u> = <nat:3> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> + <nat:9> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:6> \} \end{eqnarray} Utilizing usual Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:R> = <var:k> }} <var:p1> := <var:R> ; <var:p2> := <var:p1> * <var:R> ; <var:p3> := <var:p2> * <var:R> ; <var:p4> := <var:p3> * <var:R> ; <var:p0> := <nat:6> ; <var:p1> := <var:p1> * <nat:2> ; <var:p2> := <var:p2> * <nat:9> ; <var:p3> := <var:p3> * <nat:8> ; <var:p4> := <var:p4> * <nat:3> ; <var:u> := <var:p4> <var:u> := <var:u> + <var:p3> <var:u> := <var:u> + <var:p2> <var:u> := <var:u> + <var:p1> <var:u> := <var:u> + <var:p0> {{ <var:u> = <nat:3> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <var:k> /\ <var:p2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <var:k> /\ <var:p2> = <var:k> ^ <nat:2> /\ <var:p3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <var:k> /\ <var:p2> = <var:k> ^ <nat:2> /\ <var:p3> = <var:k> ^ <nat:3> /\ <var:p4> = <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <var:k> /\ <var:p2> = <var:k> ^ <nat:2> /\ <var:p3> = <var:k> ^ <nat:3> /\ <var:p4> = <var:k> ^ <nat:4> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <nat:2> * <var:k> /\ <var:p2> = <var:k> ^ <nat:2> /\ <var:p3> = <var:k> ^ <nat:3> /\ <var:p4> = <var:k> ^ <nat:4> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <nat:2> * <var:k> /\ <var:p2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:p3> = <var:k> ^ <nat:3> /\ <var:p4> = <var:k> ^ <nat:4> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <nat:2> * <var:k> /\ <var:p2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:k> ^ <nat:3> /\ <var:p4> = <var:k> ^ <nat:4> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <nat:2> * <var:k> /\ <var:p2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:k> ^ <nat:3> /\ <var:p4> = <nat:3> * <var:k> ^ <nat:4> /\ <var:p0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <nat:2> * <var:k> /\ <var:p2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:k> ^ <nat:3> /\ <var:p0> = <nat:6> /\ <var:u> = <nat:3> * <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <nat:2> * <var:k> /\ <var:p2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:p0> = <nat:6> /\ <var:u> = <nat:3> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p1> = <nat:2> * <var:k> /\ <var:p0> = <nat:6> /\ <var:u> = <nat:3> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:p0> = <nat:6> /\ <var:u> = <nat:3> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:u> = <nat:3> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> + <nat:9> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 