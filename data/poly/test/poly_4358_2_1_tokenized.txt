\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:4> ; <var:k> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:F> = <var:z> $ ahead of running the segment of code it follows that we have $ <var:k> = <nat:4> $ once list of instructions has terminated . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be done through standard Hoare reasoning . Next , we see the command \verb | <var:C0> := <nat:4> ; | . This code forwards the precondition $ \{ <var:F> = <var:z> \} $ to the postcondition $ \{ <var:F> = <var:z> \land <var:C0> = <nat:4> \} $ . This is sound by the assignment scheme from typical Hoare reasoning . Next , the binding code \verb | <var:k> := <var:C0> | . This transfers the precondition $ \{ <var:F> = <var:z> \land <var:C0> = <nat:4> \} $ toward the postcondition $ \{ <var:F> = <var:z> \land <var:k> = <nat:4> \} $ . This is guaranteed through the assignment law defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:4> ; <var:k> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:F> = <var:z> }} <def:poly> {{ <var:k> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:z> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:z> /\ <var:k> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 