\begin{document} \begin{theorem} Consider a list of commands such that \begin{verbatim} <var:Z> := <nat:1> ; <var:Z> := <nat:4> + <var:Z> * <var:i> ; <var:Z> := <nat:4> + <var:Z> * <var:i> ; <var:Z> := <nat:2> + <var:Z> * <var:i> ; <var:Z> := <nat:1> + <var:Z> * <var:i> \end{verbatim} Given it to be that $ <var:i> = <var:C> $ , given positive integers $ <var:C> $ , before evaluating our series of instructions , it must be that we see $ <var:Z> = <nat:1> \cdot <var:C> ^ <nat:4> + <nat:4> \cdot <var:C> ^ <nat:3> + <nat:4> \cdot <var:C> ^ <nat:2> + <nat:2> \cdot <var:C> + <nat:1> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning gives : \begin{eqnarray} \{ <var:i> = <var:C> \} \\ <var:Z> := <nat:1> ; \\ \{ <var:i> = <var:C> \land <var:Z> = <nat:1> \} \\ <var:Z> := <nat:4> + <var:Z> * <var:i> ; \\ \{ <var:i> = <var:C> \land <var:Z> = <nat:1> \times <var:C> + <nat:4> \} \\ <var:Z> := <nat:4> + <var:Z> * <var:i> ; \\ \{ <var:i> = <var:C> \land <var:Z> = <nat:1> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:4> \} \\ <var:Z> := <nat:2> + <var:Z> * <var:i> ; \\ \{ <var:i> = <var:C> \land <var:Z> = <nat:1> \times <var:C> ^ <nat:3> + <nat:4> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:2> \} \\ <var:Z> := <nat:1> + <var:Z> * <var:i> \\ \{ <var:i> = <var:C> \land <var:Z> = <nat:1> \times <var:C> ^ <nat:4> + <nat:4> \times <var:C> ^ <nat:3> + <nat:4> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:1> \} \end{eqnarray} Given the above , our list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:i> = <var:C> }} <var:Z> := <nat:1> ; <var:Z> := <nat:4> + <var:Z> * <var:i> ; <var:Z> := <nat:4> + <var:Z> * <var:i> ; <var:Z> := <nat:2> + <var:Z> * <var:i> ; <var:Z> := <nat:1> + <var:Z> * <var:i> {{ <var:Z> = <nat:1> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:Z> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:Z> = <nat:1> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:Z> = <nat:1> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:Z> = <nat:1> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:C> /\ <var:Z> = <nat:1> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 