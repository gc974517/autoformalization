\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f> := <nat:2> ; <var:f> := <nat:3> + <var:f> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:D> = <var:M> $ ( with some $ <var:M> $ ) ahead of evaluating the set of instructions it holds that we have $ <var:f> = <nat:2> \times <var:M> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:M> \} \\ <var:f> := <nat:2> ; \\ \{ <var:D> = <var:M> \land <var:f> = <nat:2> \} \\ <var:f> := <nat:3> + <var:f> * <var:D> \\ \{ <var:D> = <var:M> \land <var:f> = <nat:2> * <var:M> + <nat:3> \} \end{eqnarray} Utilizing standard Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:2> ; <var:f> := <nat:3> + <var:f> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:D> = <var:M> }} <def:poly> {{ <var:f> = <nat:2> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:f> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:f> = <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 