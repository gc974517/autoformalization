\begin{document} \begin{theorem} Consider the following list of instructions : \begin{verbatim} <var:c> := <nat:2> ; <var:c> := <nat:3> + <var:c> * <var:K> ; <var:c> := <var:c> * <var:K> ; <var:c> := <nat:4> + <var:c> * <var:K> \end{verbatim} Assume it to be that $ <var:K> = <var:o> $ for every $ <var:o> \in \mathbb{Z}^+ $ before the evaluation of the program , it follows that we have $ <var:c> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:4> $ once series of instructions has finished executing . \end{theorem} \begin{proof} The flow of logic for our list of commands is given by standard Hoare reasoning . Immediately following , we have \[ \begin{tabular} {rcl} \{ <var:K> = <var:o> \} & <var:c> := <nat:2> & \{ <var:K> = <var:o> \land <var:c> = <nat:2> \} \end{tabular} Paying attention to the proceeding command contained in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:K> = <var:o> \} & <var:c> := <nat:2> & \{ <var:K> = <var:o> \land <var:c> = <nat:2> \} \end{tabular} Advancing , we see \[ \begin{tabular} {rcl} \{ <var:K> = <var:o> \} & <var:c> := <nat:2> & \{ <var:K> = <var:o> \land <var:c> = <nat:2> \} \end{tabular} This is guaranteed with the scheme given by usual Hoare techniques . Going forward , \[ \begin{tabular} {rcl} \{ <var:K> = <var:o> \} & <var:c> := <nat:2> & \{ <var:K> = <var:o> \land <var:c> = <nat:2> \} \end{tabular} This is sound using the binding inference rule given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:K> = <var:o> }} <var:c> := <nat:2> ; <var:c> := <nat:3> + <var:c> * <var:K> ; <var:c> := <var:c> * <var:K> ; <var:c> := <nat:4> + <var:c> * <var:K> {{ <var:c> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:o> /\ <var:c> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:o> /\ <var:c> = <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:o> /\ <var:c> = <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:o> /\ <var:c> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 