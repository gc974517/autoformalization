\begin{document} \begin{theorem} Define a code in \emph{Imp} : \begin{verbatim} <var:r1> := <var:o> ; <var:r2> := <var:r1> * <var:o> ; <var:r3> := <var:r2> * <var:o> ; <var:r0> := <nat:6> ; <var:r1> := <var:r1> * <nat:3> ; <var:r2> := <var:r2> * <nat:9> ; <var:r3> := <var:r3> * <nat:2> ; <var:P> := <var:r3> <var:P> := <var:P> + <var:r2> <var:P> := <var:P> + <var:r1> <var:P> := <var:P> + <var:r0> \end{verbatim} Allow $ <var:o> = <var:w> $ ahead of the evaluation of our program , it follows that $ <var:P> = <nat:2> \times <var:w> ^ <nat:3> + <nat:9> \times <var:w> ^ <nat:2> + <nat:3> \times <var:w> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:w> \} \\ <var:r1> := <var:o> ; \\ \{ <var:o> = <var:w> \land <var:r1> = <var:w> \} \\ <var:r2> := <var:r1> * <var:o> ; \\ \{ <var:o> = <var:w> \land <var:r1> = <var:w> \land <var:r2> = <var:w> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:o> ; \\ \{ <var:o> = <var:w> \land <var:r1> = <var:w> \land <var:r2> = <var:w> ^ <nat:2> \land <var:r3> = <var:w> ^ <nat:3> \} \\ <var:r0> := <nat:6> ; \\ \{ <var:o> = <var:w> \land <var:r1> = <var:w> \land <var:r2> = <var:w> ^ <nat:2> \land <var:r3> = <var:w> ^ <nat:3> \land <var:r0> = <nat:6> \} \\ <var:r1> := <var:r1> * <nat:3> ; \\ \{ <var:o> = <var:w> \land <var:r1> = <nat:3> \cdot <var:w> \land <var:r2> = <var:w> ^ <nat:2> \land <var:r3> = <var:w> ^ <nat:3> \land <var:r0> = <nat:6> \} \\ <var:r2> := <var:r2> * <nat:9> ; \\ \{ <var:o> = <var:w> \land <var:r1> = <nat:3> \cdot <var:w> \land <var:r2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:r3> = <var:w> ^ <nat:3> \land <var:r0> = <nat:6> \} \\ <var:r3> := <var:r3> * <nat:2> ; \\ \{ <var:o> = <var:w> \land <var:r1> = <nat:3> \cdot <var:w> \land <var:r2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:r3> = <nat:2> \cdot <var:w> ^ <nat:3> \land <var:r0> = <nat:6> \} \\ <var:P> := <var:r3> \\ \{ <var:o> = <var:w> \land <var:r1> = <nat:3> \cdot <var:w> \land <var:r2> = <nat:9> \cdot <var:w> ^ <nat:2> \land <var:r0> = <nat:6> \land <var:P> = <nat:2> \cdot <var:w> ^ <nat:3> \} \\ <var:P> := <var:P> + <var:r2> \\ \{ <var:o> = <var:w> \land <var:r1> = <nat:3> \cdot <var:w> \land <var:r0> = <nat:6> \land <var:P> = <nat:2> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:r1> \\ \{ <var:o> = <var:w> \land <var:r0> = <nat:6> \land <var:P> = <nat:2> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> \} \\ <var:P> := <var:P> + <var:r0> \\ \{ <var:o> = <var:w> \land <var:P> = <nat:2> \cdot <var:w> ^ <nat:3> + <nat:9> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:6> \} \end{eqnarray} The application of typical Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:o> = <var:w> }} <var:r1> := <var:o> ; <var:r2> := <var:r1> * <var:o> ; <var:r3> := <var:r2> * <var:o> ; <var:r0> := <nat:6> ; <var:r1> := <var:r1> * <nat:3> ; <var:r2> := <var:r2> * <nat:9> ; <var:r3> := <var:r3> * <nat:2> ; <var:P> := <var:r3> <var:P> := <var:P> + <var:r2> <var:P> := <var:P> + <var:r1> <var:P> := <var:P> + <var:r0> {{ <var:P> = <nat:2> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:r1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:r1> = <var:w> /\ <var:r2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:r1> = <var:w> /\ <var:r2> = <var:w> ^ <nat:2> /\ <var:r3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:r1> = <var:w> /\ <var:r2> = <var:w> ^ <nat:2> /\ <var:r3> = <var:w> ^ <nat:3> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:r1> = <nat:3> * <var:w> /\ <var:r2> = <var:w> ^ <nat:2> /\ <var:r3> = <var:w> ^ <nat:3> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:r1> = <nat:3> * <var:w> /\ <var:r2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:r3> = <var:w> ^ <nat:3> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:r1> = <nat:3> * <var:w> /\ <var:r2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:r3> = <nat:2> * <var:w> ^ <nat:3> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:r1> = <nat:3> * <var:w> /\ <var:r2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:r0> = <nat:6> /\ <var:P> = <nat:2> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:r1> = <nat:3> * <var:w> /\ <var:r0> = <nat:6> /\ <var:P> = <nat:2> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:r0> = <nat:6> /\ <var:P> = <nat:2> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:w> /\ <var:P> = <nat:2> * <var:w> ^ <nat:3> + <nat:9> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 