\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} : \begin{verbatim} <var:z1> := <var:m> ; <var:z2> := <var:z1> * <var:m> ; <var:z0> := <nat:4> ; <var:z1> := <var:z1> * <nat:3> ; <var:z2> := <var:z2> * <nat:3> ; <var:B> := <var:z2> <var:B> := <var:B> + <var:z1> <var:B> := <var:B> + <var:z0> \end{verbatim} Assuming $ <var:m> = <var:I> $ ahead of running our list of instructions , it must be that we have $ <var:B> = <nat:3> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:4> $ . \end{theorem} \begin{proof} Note that the below decorated list of commands . \begin{eqnarray} \{ <var:m> = <var:I> \} \\ <var:z1> := <var:m> ; \\ \{ <var:m> = <var:I> \land <var:z1> = <var:I> \} \\ <var:z2> := <var:z1> * <var:m> ; \\ \{ <var:m> = <var:I> \land <var:z1> = <var:I> \land <var:z2> = <var:I> ^ <nat:2> \} \\ <var:z0> := <nat:4> ; \\ \{ <var:m> = <var:I> \land <var:z1> = <var:I> \land <var:z2> = <var:I> ^ <nat:2> \land <var:z0> = <nat:4> \} \\ <var:z1> := <var:z1> * <nat:3> ; \\ \{ <var:m> = <var:I> \land <var:z1> = <nat:3> * <var:I> \land <var:z2> = <var:I> ^ <nat:2> \land <var:z0> = <nat:4> \} \\ <var:z2> := <var:z2> * <nat:3> ; \\ \{ <var:m> = <var:I> \land <var:z1> = <nat:3> * <var:I> \land <var:z2> = <nat:3> * <var:I> ^ <nat:2> \land <var:z0> = <nat:4> \} \\ <var:B> := <var:z2> \\ \{ <var:m> = <var:I> \land <var:z1> = <nat:3> * <var:I> \land <var:z0> = <nat:4> \land <var:B> = <nat:3> * <var:I> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:z1> \\ \{ <var:m> = <var:I> \land <var:z0> = <nat:4> \land <var:B> = <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> \} \\ <var:B> := <var:B> + <var:z0> \\ \{ <var:m> = <var:I> \land <var:B> = <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:m> = <var:I> }} <var:z1> := <var:m> ; <var:z2> := <var:z1> * <var:m> ; <var:z0> := <nat:4> ; <var:z1> := <var:z1> * <nat:3> ; <var:z2> := <var:z2> * <nat:3> ; <var:B> := <var:z2> <var:B> := <var:B> + <var:z1> <var:B> := <var:B> + <var:z0> {{ <var:B> = <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:z1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:z1> = <var:I> /\ <var:z2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:z1> = <var:I> /\ <var:z2> = <var:I> ^ <nat:2> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:z1> = <nat:3> * <var:I> /\ <var:z2> = <var:I> ^ <nat:2> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:z1> = <nat:3> * <var:I> /\ <var:z2> = <nat:3> * <var:I> ^ <nat:2> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:z1> = <nat:3> * <var:I> /\ <var:z0> = <nat:4> /\ <var:B> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:z0> = <nat:4> /\ <var:B> = <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:I> /\ <var:B> = <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 