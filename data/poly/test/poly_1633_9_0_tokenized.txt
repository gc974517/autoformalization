\begin{document} \begin{theorem} Consider a code : \begin{verbatim} <var:a0> := <nat:4> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:V> ; <var:a2> := <nat:4> ; <var:a2> := <var:a2> * <var:V> ; <var:a2> := <var:a2> * <var:V> ; <var:H> := <var:a2> ; <var:H> := <var:H> + <var:a1> ; <var:H> := <var:H> + <var:a0> \end{verbatim} Given it to hold that $ <var:V> = <var:Z> $ before executing our segment of code , then $ <var:H> = <nat:4> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:4> $ once set of commands is done executing . \end{theorem} \begin{proof} The application of typical Hoare reasoning results in : \begin{eqnarray} \{ <var:V> = <var:Z> \} \\ <var:a0> := <nat:4> ; \\ \{ <var:V> = <var:Z> \land <var:a0> = <nat:4> \} \\ <var:a1> := <nat:4> ; \\ \{ <var:V> = <var:Z> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \} \\ <var:a1> := <var:a1> * <var:V> ; \\ \{ <var:V> = <var:Z> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:Z> \} \\ <var:a2> := <nat:4> ; \\ \{ <var:V> = <var:Z> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:Z> \land <var:a2> = <nat:4> \} \\ <var:a2> := <var:a2> * <var:V> ; \\ \{ <var:V> = <var:Z> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:Z> \land <var:a2> = <nat:4> \cdot <var:Z> \} \\ <var:a2> := <var:a2> * <var:V> ; \\ \{ <var:V> = <var:Z> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:Z> \land <var:a2> = <nat:4> \cdot <var:Z> ^ <nat:2> \} \\ <var:H> := <var:a2> ; \\ \{ <var:V> = <var:Z> \land <var:a0> = <nat:4> \land <var:a1> = <nat:4> \cdot <var:Z> \land <var:H> = <nat:4> \cdot <var:Z> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:a1> ; \\ \{ <var:V> = <var:Z> \land <var:a0> = <nat:4> \land <var:H> = <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> \} \\ <var:H> := <var:H> + <var:a0> \\ \{ <var:V> = <var:Z> \land <var:H> = <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:4> \} \end{eqnarray} As a consequence , the set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:V> = <var:Z> }} <var:a0> := <nat:4> ; <var:a1> := <nat:4> ; <var:a1> := <var:a1> * <var:V> ; <var:a2> := <nat:4> ; <var:a2> := <var:a2> * <var:V> ; <var:a2> := <var:a2> * <var:V> ; <var:H> := <var:a2> ; <var:H> := <var:H> + <var:a1> ; <var:H> := <var:H> + <var:a0> {{ <var:H> = <nat:4> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:Z> /\ <var:a2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:Z> /\ <var:a2> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:Z> /\ <var:a2> = <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:4> * <var:Z> /\ <var:H> = <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:a0> = <nat:4> /\ <var:H> = <nat:4> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:H> = <nat:4> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 