\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:4> ; <var:A1> := <nat:2> ; <var:A1> := <var:A1> * <var:F> ; <var:u> := <var:A1> ; <var:u> := <var:u> + <var:A0> \end{verbatim} Allow that we have $ <var:F> = <var:P> $ before the execution of the set of commands it follows that we have $ <var:u> = <nat:2> \cdot <var:P> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for this series of commands is evident with usual Hoare techniques . Focusing on the subsequent piece of code in our set of instructions , we have the variable assignmet statement \verb | <var:A0> := <nat:4> ; | . This code moves the precondition $ \{ <var:F> = <var:P> \} $ into $ \{ <var:F> = <var:P> \land <var:A0> = <nat:4> \} $ . This is sound with the assignment scheme found in typical Hoare logic . Immediately following , the variable assignmet code \verb | <var:A1> := <nat:2> ; | . This statement redefines the precondition $ \{ <var:F> = <var:P> \land <var:A0> = <nat:4> \} $ toward the postcondition $ \{ <var:F> = <var:P> \land <var:A0> = <nat:4> \land <var:A1> = <nat:2> \} $ . This is guaranteed by the assignment rule given in typical Hoare logic . Moving on to the next piece of code in our code , we have the variable binding command assigning $ <var:A1> * <var:F> $ toward $ <var:A1>$ . This transfers $ \{ <var:F> = <var:P> \land <var:A0> = <nat:4> \land <var:A1> = <nat:2> \} $ toward $ \{ <var:F> = <var:P> \land <var:A0> = <nat:4> \land <var:A1> = <nat:2> * <var:P> \} $ . This is shown by the assignment rule obtained from standard Hoare reasoning . Moving forward to the next step , we have the variable binding code giving $ <var:A1> $ to $ <var:u>$ . This command transfers the precondition $ \{ <var:F> = <var:P> \land <var:A0> = <nat:4> \land <var:A1> = <nat:2> * <var:P> \} $ as the postcondition $ \{ <var:F> = <var:P> \land <var:A0> = <nat:4> \land <var:u> = <nat:2> * <var:P> \} $ . This is shown by the assignment rule of standard Hoare techniques . Moving onward , the variable assignmet line \verb | <var:u> := <var:u> + <var:A0> | . This command moves $ \{ <var:F> = <var:P> \land <var:A0> = <nat:4> \land <var:u> = <nat:2> * <var:P> \} $ into the condition $ \{ <var:F> = <var:P> \land <var:u> = <nat:2> * <var:P> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:F> = <var:P> }} <var:A0> := <nat:4> ; <var:A1> := <nat:2> ; <var:A1> := <var:A1> * <var:F> ; <var:u> := <var:A1> ; <var:u> := <var:u> + <var:A0> {{ <var:u> = <nat:2> * <var:P> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:A0> = <nat:4> /\ <var:A1> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:A0> = <nat:4> /\ <var:u> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:P> /\ <var:u> = <nat:2> * <var:P> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 