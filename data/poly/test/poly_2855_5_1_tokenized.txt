\begin{document} \begin{theorem} Define the following code as \begin{verbatim} <var:V1> := <var:n> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:7> ; <var:i> := <var:V1> <var:i> := <var:i> + <var:V0> \end{verbatim} Assuming $ <var:n> = <var:e> $ prior to the execution of our series of commands , then we see $ <var:i> = <nat:7> \cdot <var:e> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:e> \} \\ <var:V1> := <var:n> ; \\ \{ <var:n> = <var:e> \land <var:V1> = <var:e> \} \\ <var:V0> := <nat:2> ; \\ \{ <var:n> = <var:e> \land <var:V1> = <var:e> \land <var:V0> = <nat:2> \} \\ <var:V1> := <var:V1> * <nat:7> ; \\ \{ <var:n> = <var:e> \land <var:V1> = <nat:7> \cdot <var:e> \land <var:V0> = <nat:2> \} \\ <var:i> := <var:V1> \\ \{ <var:n> = <var:e> \land <var:V0> = <nat:2> \land <var:i> = <nat:7> \cdot <var:e> \} \\ <var:i> := <var:i> + <var:V0> \\ \{ <var:n> = <var:e> \land <var:i> = <nat:7> \cdot <var:e> + <nat:2> \} \end{eqnarray} Applying typical Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:n> = <var:e> }} <var:V1> := <var:n> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:7> ; <var:i> := <var:V1> <var:i> := <var:i> + <var:V0> {{ <var:i> = <nat:7> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:V1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:V1> = <var:e> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:V1> = <nat:7> * <var:e> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:V0> = <nat:2> /\ <var:i> = <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:i> = <nat:7> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 