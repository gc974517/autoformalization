\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:o> := <nat:4> ; <var:o> := <nat:1> + <var:o> * <var:J> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <nat:1> + <var:o> * <var:J> ; <var:o> := <nat:1> + <var:o> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:J> = <var:V> $ ( given every positive numbers $ <var:V> $ ) before interpreting this set of commands , it must be that we see $ <var:o> = <nat:4> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> $ once series of instructions terminates . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands can be shown with typical Hoare techniques . Going forward , \begin{verbatim} { <var:J> = <var:V> } <var:o> := <nat:4> { <var:J> = <var:V> \land <var:o> = <nat:4> } { <var:J> = <var:V> \land <var:o> = <nat:4> } <var:o> := <nat:1> + <var:o> * <var:J> { <var:J> = <var:V> \land <var:o> = <nat:4> \cdot <var:V> + <nat:1> } { <var:J> = <var:V> \land <var:o> = <nat:4> \cdot <var:V> + <nat:1> } <var:o> := <nat:4> + <var:o> * <var:J> { <var:J> = <var:V> \land <var:o> = <nat:4> \cdot <var:V> ^ <nat:2> + <nat:1> \cdot <var:V> + <nat:4> } \end{verbatim} Looking at the next lines seen in our series of commands , \begin{verbatim} { <var:J> = <var:V> } <var:o> := <nat:4> { <var:J> = <var:V> \land <var:o> = <nat:4> } { <var:J> = <var:V> \land <var:o> = <nat:4> } <var:o> := <nat:1> + <var:o> * <var:J> { <var:J> = <var:V> \land <var:o> = <nat:4> \cdot <var:V> + <nat:1> } \end{verbatim} Taking another step toward the next line seen in the segment of code , we see \begin{verbatim} { <var:J> = <var:V> } <var:o> := <nat:4> { <var:J> = <var:V> \land <var:o> = <nat:4> } \end{verbatim} Shifting focus toward the upcoming line seen in the set of instructions , \begin{verbatim} { <var:J> = <var:V> } <var:o> := <nat:4> { <var:J> = <var:V> \land <var:o> = <nat:4> } \end{verbatim} This is known to be sound through the binding law defined in Hoare logic . Jumping to the upcoming line contained in our list of commands , \begin{verbatim} { <var:J> = <var:V> } <var:o> := <nat:4> { <var:J> = <var:V> \land <var:o> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:4> ; <var:o> := <nat:1> + <var:o> * <var:J> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <nat:4> + <var:o> * <var:J> ; <var:o> := <nat:2> + <var:o> * <var:J> ; <var:o> := <nat:1> + <var:o> * <var:J> ; <var:o> := <nat:1> + <var:o> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:J> = <var:V> }} <def:poly> {{ <var:o> = <nat:4> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:o> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:o> = <nat:4> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:o> = <nat:4> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:o> = <nat:4> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:o> = <nat:4> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:o> = <nat:4> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:o> = <nat:4> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:o> = <nat:4> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 