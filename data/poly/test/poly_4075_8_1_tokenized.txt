\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:v> ; <var:Y2> := <var:Y1> * <var:v> ; <var:Y0> := <nat:2> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:Y2> := <var:Y2> * <nat:1> ; <var:y> := <var:Y2> <var:y> := <var:y> + <var:Y1> <var:y> := <var:y> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> . Assume $ <var:v> = <var:j> $ before the evaluation of the series of commands it must be that we have $ <var:y> = <nat:1> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands can be demonstrated by the below decorated series of commands . \begin{eqnarray} \{ <var:v> = <var:j> \} \\ <var:Y1> := <var:v> ; \\ \{ <var:v> = <var:j> \land <var:Y1> = <var:j> \} \\ <var:Y2> := <var:Y1> * <var:v> ; \\ \{ <var:v> = <var:j> \land <var:Y1> = <var:j> \land <var:Y2> = <var:j> ^ <nat:2> \} \\ <var:Y0> := <nat:2> ; \\ \{ <var:v> = <var:j> \land <var:Y1> = <var:j> \land <var:Y2> = <var:j> ^ <nat:2> \land <var:Y0> = <nat:2> \} \\ <var:Y1> := <var:Y1> * <nat:2> ; \\ \{ <var:v> = <var:j> \land <var:Y1> = <nat:2> * <var:j> \land <var:Y2> = <var:j> ^ <nat:2> \land <var:Y0> = <nat:2> \} \\ <var:Y2> := <var:Y2> * <nat:1> ; \\ \{ <var:v> = <var:j> \land <var:Y1> = <nat:2> * <var:j> \land <var:Y2> = <nat:1> * <var:j> ^ <nat:2> \land <var:Y0> = <nat:2> \} \\ <var:y> := <var:Y2> \\ \{ <var:v> = <var:j> \land <var:Y1> = <nat:2> * <var:j> \land <var:Y0> = <nat:2> \land <var:y> = <nat:1> * <var:j> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:Y1> \\ \{ <var:v> = <var:j> \land <var:Y0> = <nat:2> \land <var:y> = <nat:1> * <var:j> ^ <nat:2> + <nat:2> * <var:j> \} \\ <var:y> := <var:y> + <var:Y0> \\ \{ <var:v> = <var:j> \land <var:y> = <nat:1> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:2> \} \end{eqnarray} Using typical Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y1> := <var:v> ; <var:Y2> := <var:Y1> * <var:v> ; <var:Y0> := <nat:2> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:Y2> := <var:Y2> * <nat:1> ; <var:y> := <var:Y2> <var:y> := <var:y> + <var:Y1> <var:y> := <var:y> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:v> = <var:j> }} <def:poly> {{ <var:y> = <nat:1> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Y1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Y1> = <var:j> /\ <var:Y2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Y1> = <var:j> /\ <var:Y2> = <var:j> ^ <nat:2> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Y1> = <nat:2> * <var:j> /\ <var:Y2> = <var:j> ^ <nat:2> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Y1> = <nat:2> * <var:j> /\ <var:Y2> = <nat:1> * <var:j> ^ <nat:2> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Y1> = <nat:2> * <var:j> /\ <var:Y0> = <nat:2> /\ <var:y> = <nat:1> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Y0> = <nat:2> /\ <var:y> = <nat:1> * <var:j> ^ <nat:2> + <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:y> = <nat:1> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 