\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as \begin{verbatim} <var:U1> := <var:c> ; <var:U2> := <var:U1> * <var:c> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:2> ; <var:U2> := <var:U2> * <nat:2> ; <var:p> := <var:U2> <var:p> := <var:p> + <var:U1> <var:p> := <var:p> + <var:U0> \end{verbatim} Allowing ( taking positive coefficients $ <var:V> $ ) it to hold that $ <var:c> = <var:V> $ prior to the evaluation of our segment of code then we see $ <var:p> = <nat:2> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions is accomplished by the following decorated set of instructions . \begin{eqnarray} \{ <var:c> = <var:V> \} \\ <var:U1> := <var:c> ; \\ \{ <var:c> = <var:V> \land <var:U1> = <var:V> \} \\ <var:U2> := <var:U1> * <var:c> ; \\ \{ <var:c> = <var:V> \land <var:U1> = <var:V> \land <var:U2> = <var:V> ^ <nat:2> \} \\ <var:U0> := <nat:2> ; \\ \{ <var:c> = <var:V> \land <var:U1> = <var:V> \land <var:U2> = <var:V> ^ <nat:2> \land <var:U0> = <nat:2> \} \\ <var:U1> := <var:U1> * <nat:2> ; \\ \{ <var:c> = <var:V> \land <var:U1> = <nat:2> * <var:V> \land <var:U2> = <var:V> ^ <nat:2> \land <var:U0> = <nat:2> \} \\ <var:U2> := <var:U2> * <nat:2> ; \\ \{ <var:c> = <var:V> \land <var:U1> = <nat:2> * <var:V> \land <var:U2> = <nat:2> * <var:V> ^ <nat:2> \land <var:U0> = <nat:2> \} \\ <var:p> := <var:U2> \\ \{ <var:c> = <var:V> \land <var:U1> = <nat:2> * <var:V> \land <var:U0> = <nat:2> \land <var:p> = <nat:2> * <var:V> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:U1> \\ \{ <var:c> = <var:V> \land <var:U0> = <nat:2> \land <var:p> = <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> \} \\ <var:p> := <var:p> + <var:U0> \\ \{ <var:c> = <var:V> \land <var:p> = <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:2> \} \end{eqnarray} The application of usual Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:c> = <var:V> }} <var:U1> := <var:c> ; <var:U2> := <var:U1> * <var:c> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:2> ; <var:U2> := <var:U2> * <nat:2> ; <var:p> := <var:U2> <var:p> := <var:p> + <var:U1> <var:p> := <var:p> + <var:U0> {{ <var:p> = <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:U1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:U1> = <var:V> /\ <var:U2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:U1> = <var:V> /\ <var:U2> = <var:V> ^ <nat:2> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:U1> = <nat:2> * <var:V> /\ <var:U2> = <var:V> ^ <nat:2> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:U1> = <nat:2> * <var:V> /\ <var:U2> = <nat:2> * <var:V> ^ <nat:2> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:U1> = <nat:2> * <var:V> /\ <var:U0> = <nat:2> /\ <var:p> = <nat:2> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:U0> = <nat:2> /\ <var:p> = <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:V> /\ <var:p> = <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 