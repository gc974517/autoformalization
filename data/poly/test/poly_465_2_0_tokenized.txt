\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:2> ; <var:B> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:F> = <var:Z> $ , for integers $ <var:Z> $ , before executing our list of commands , it follows that $ <var:B> = <nat:2> $ once series of commands has finished executing . \end{theorem} \begin{proof} Utilizing standard Hoare logic returns : \begin{eqnarray} \{ <var:F> = <var:Z> \} \\ <var:i0> := <nat:2> ; \\ \{ <var:F> = <var:Z> \land <var:i0> = <nat:2> \} \\ <var:B> := <var:i0> \\ \{ <var:F> = <var:Z> \land <var:B> = <nat:2> \} \end{eqnarray} As a result , this set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:2> ; <var:B> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:F> = <var:Z> }} <def:poly> {{ <var:B> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:B> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 