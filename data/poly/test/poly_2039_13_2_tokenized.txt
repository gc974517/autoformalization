\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C> := <nat:3> ; <var:C> := <nat:1> + <var:C> * <var:U> ; <var:C> := <nat:3> + <var:C> * <var:U> ; <var:C> := <nat:3> + <var:C> * <var:U> ; <var:C> := <nat:1> + <var:C> * <var:U> ; <var:C> := <nat:2> + <var:C> * <var:U> ; <var:C> := <nat:4> + <var:C> * <var:U> ; <var:C> := <nat:2> + <var:C> * <var:U> ; <var:C> := <nat:1> + <var:C> * <var:U> ; <var:C> := <nat:2> + <var:C> * <var:U> ; <var:C> := <nat:4> + <var:C> * <var:U> ; <var:C> := <nat:4> + <var:C> * <var:U> ; <var:C> := <nat:4> + <var:C> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Given it to be that $ <var:U> = <var:j> $ ahead of executing the program it must be that we see $ <var:C> = <nat:3> * <var:j> ^ <nat:12> + <nat:1> * <var:j> ^ <nat:11> + <nat:3> * <var:j> ^ <nat:10> + <nat:3> * <var:j> ^ <nat:9> + <nat:1> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for our set of commands is clear through standard Hoare logic . Taking another step toward the upcoming commands contained in the series of instructions , we have \begin{verbatim} { <var:U> = <var:j> } <var:C> := <nat:3> { <var:U> = <var:j> \land <var:C> = <nat:3> } { <var:U> = <var:j> \land <var:C> = <nat:3> } <var:C> := <nat:1> + <var:C> * <var:U> { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> + <nat:1> } \end{verbatim} Further , we see \begin{verbatim} { <var:U> = <var:j> } <var:C> := <nat:3> { <var:U> = <var:j> \land <var:C> = <nat:3> } { <var:U> = <var:j> \land <var:C> = <nat:3> } <var:C> := <nat:1> + <var:C> * <var:U> { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> + <nat:1> } \end{verbatim} Honing in on the following statements contained in the segment of code , \begin{verbatim} { <var:U> = <var:j> } <var:C> := <nat:3> { <var:U> = <var:j> \land <var:C> = <nat:3> } { <var:U> = <var:j> \land <var:C> = <nat:3> } <var:C> := <nat:1> + <var:C> * <var:U> { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> + <nat:1> } { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> + <nat:1> } <var:C> := <nat:3> + <var:C> * <var:U> { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:3> } { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:3> } <var:C> := <nat:3> + <var:C> * <var:U> { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> ^ <nat:3> + <nat:1> \cdot <var:j> ^ <nat:2> + <nat:3> \cdot <var:j> + <nat:3> } \end{verbatim} Looking at the following lines of codecontained in our code , we have \begin{verbatim} { <var:U> = <var:j> } <var:C> := <nat:3> { <var:U> = <var:j> \land <var:C> = <nat:3> } { <var:U> = <var:j> \land <var:C> = <nat:3> } <var:C> := <nat:1> + <var:C> * <var:U> { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> + <nat:1> } { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> + <nat:1> } <var:C> := <nat:3> + <var:C> * <var:U> { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:3> } { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:3> } <var:C> := <nat:3> + <var:C> * <var:U> { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> ^ <nat:3> + <nat:1> \cdot <var:j> ^ <nat:2> + <nat:3> \cdot <var:j> + <nat:3> } { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> ^ <nat:3> + <nat:1> \cdot <var:j> ^ <nat:2> + <nat:3> \cdot <var:j> + <nat:3> } <var:C> := <nat:1> + <var:C> * <var:U> { <var:U> = <var:j> \land <var:C> = <nat:3> \cdot <var:j> ^ <nat:4> + <nat:1> \cdot <var:j> ^ <nat:3> + <nat:3> \cdot <var:j> ^ <nat:2> + <nat:3> \cdot <var:j> + <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:3> ; <var:C> := <nat:1> + <var:C> * <var:U> ; <var:C> := <nat:3> + <var:C> * <var:U> ; <var:C> := <nat:3> + <var:C> * <var:U> ; <var:C> := <nat:1> + <var:C> * <var:U> ; <var:C> := <nat:2> + <var:C> * <var:U> ; <var:C> := <nat:4> + <var:C> * <var:U> ; <var:C> := <nat:2> + <var:C> * <var:U> ; <var:C> := <nat:1> + <var:C> * <var:U> ; <var:C> := <nat:2> + <var:C> * <var:U> ; <var:C> := <nat:4> + <var:C> * <var:U> ; <var:C> := <nat:4> + <var:C> * <var:U> ; <var:C> := <nat:4> + <var:C> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:U> = <var:j> }} <def:poly> {{ <var:C> = <nat:3> * <var:j> ^ <nat:12> + <nat:1> * <var:j> ^ <nat:11> + <nat:3> * <var:j> ^ <nat:10> + <nat:3> * <var:j> ^ <nat:9> + <nat:1> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:C> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:C> = <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:C> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:C> = <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:C> = <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:C> = <nat:3> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:C> = <nat:3> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:C> = <nat:3> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:C> = <nat:3> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:C> = <nat:3> * <var:j> ^ <nat:9> + <nat:1> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:C> = <nat:3> * <var:j> ^ <nat:10> + <nat:1> * <var:j> ^ <nat:9> + <nat:3> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:C> = <nat:3> * <var:j> ^ <nat:11> + <nat:1> * <var:j> ^ <nat:10> + <nat:3> * <var:j> ^ <nat:9> + <nat:3> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:C> = <nat:3> * <var:j> ^ <nat:12> + <nat:1> * <var:j> ^ <nat:11> + <nat:3> * <var:j> ^ <nat:10> + <nat:3> * <var:j> ^ <nat:9> + <nat:1> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 