\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} : \begin{verbatim} <var:P1> := <var:D> ; <var:P2> := <var:P1> * <var:D> ; <var:P3> := <var:P2> * <var:D> ; <var:P0> := <nat:8> ; <var:P1> := <var:P1> * <nat:8> ; <var:P2> := <var:P2> * <nat:7> ; <var:P3> := <var:P3> * <nat:6> ; <var:V> := <var:P3> <var:V> := <var:V> + <var:P2> <var:V> := <var:V> + <var:P1> <var:V> := <var:V> + <var:P0> \end{verbatim} Assuming $ <var:D> = <var:y> $ prior to evaluating the code it must be that we have $ <var:V> = <nat:6> * <var:y> ^ <nat:3> + <nat:7> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for our list of instructions is given through typical Hoare reasoning . Following , we see \begin{verbatim} { <var:D> = <var:y> } <var:P1> := <var:D> { <var:D> = <var:y> \land <var:P1> = <var:y> } { <var:D> = <var:y> \land <var:P1> = <var:y> } <var:P2> := <var:P1> * <var:D> { <var:D> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> } \end{verbatim} After , we see \begin{verbatim} { <var:D> = <var:y> } <var:P1> := <var:D> { <var:D> = <var:y> \land <var:P1> = <var:y> } { <var:D> = <var:y> \land <var:P1> = <var:y> } <var:P2> := <var:P1> * <var:D> { <var:D> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> } \end{verbatim} Moving on , we see \begin{verbatim} { <var:D> = <var:y> } <var:P1> := <var:D> { <var:D> = <var:y> \land <var:P1> = <var:y> } { <var:D> = <var:y> \land <var:P1> = <var:y> } <var:P2> := <var:P1> * <var:D> { <var:D> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> } { <var:D> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> } <var:P3> := <var:P2> * <var:D> { <var:D> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> \land <var:P3> = <var:y> ^ <nat:3> } { <var:D> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> \land <var:P3> = <var:y> ^ <nat:3> } <var:P0> := <nat:8> { <var:D> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> \land <var:P3> = <var:y> ^ <nat:3> \land <var:P0> = <nat:8> } { <var:D> = <var:y> \land <var:P1> = <var:y> \land <var:P2> = <var:y> ^ <nat:2> \land <var:P3> = <var:y> ^ <nat:3> \land <var:P0> = <nat:8> } <var:P1> := <var:P1> * <nat:8> { <var:D> = <var:y> \land <var:P1> = <nat:8> * <var:y> \land <var:P2> = <var:y> ^ <nat:2> \land <var:P3> = <var:y> ^ <nat:3> \land <var:P0> = <nat:8> } \end{verbatim} This is sound by the variable assignmet inference rule found in typical Hoare techniques . Stepping forward , we see \begin{verbatim} { <var:D> = <var:y> } <var:P1> := <var:D> { <var:D> = <var:y> \land <var:P1> = <var:y> } \end{verbatim} Advancing on , we have \begin{verbatim} { <var:D> = <var:y> } <var:P1> := <var:D> { <var:D> = <var:y> \land <var:P1> = <var:y> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:D> = <var:y> }} <var:P1> := <var:D> ; <var:P2> := <var:P1> * <var:D> ; <var:P3> := <var:P2> * <var:D> ; <var:P0> := <nat:8> ; <var:P1> := <var:P1> * <nat:8> ; <var:P2> := <var:P2> * <nat:7> ; <var:P3> := <var:P3> * <nat:6> ; <var:V> := <var:P3> <var:V> := <var:V> + <var:P2> <var:V> := <var:V> + <var:P1> <var:V> := <var:V> + <var:P0> {{ <var:V> = <nat:6> * <var:y> ^ <nat:3> + <nat:7> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:P1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:P1> = <var:y> /\ <var:P2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:P1> = <var:y> /\ <var:P2> = <var:y> ^ <nat:2> /\ <var:P3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:P1> = <var:y> /\ <var:P2> = <var:y> ^ <nat:2> /\ <var:P3> = <var:y> ^ <nat:3> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P2> = <var:y> ^ <nat:2> /\ <var:P3> = <var:y> ^ <nat:3> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P2> = <nat:7> * <var:y> ^ <nat:2> /\ <var:P3> = <var:y> ^ <nat:3> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P2> = <nat:7> * <var:y> ^ <nat:2> /\ <var:P3> = <nat:6> * <var:y> ^ <nat:3> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P2> = <nat:7> * <var:y> ^ <nat:2> /\ <var:P0> = <nat:8> /\ <var:V> = <nat:6> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:P1> = <nat:8> * <var:y> /\ <var:P0> = <nat:8> /\ <var:V> = <nat:6> * <var:y> ^ <nat:3> + <nat:7> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:P0> = <nat:8> /\ <var:V> = <nat:6> * <var:y> ^ <nat:3> + <nat:7> * <var:y> ^ <nat:2> + <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:V> = <nat:6> * <var:y> ^ <nat:3> + <nat:7> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 