\begin{document} \begin{theorem} Consider the following code in \emph{Imp} : \begin{verbatim} <var:S> := <nat:1> ; <var:S> := <var:S> * <var:I> ; <var:S> := <nat:4> + <var:S> * <var:I> ; <var:S> := <var:S> * <var:I> ; <var:S> := <var:S> * <var:I> ; <var:S> := <nat:4> + <var:S> * <var:I> \end{verbatim} Allowing , for all integers $ <var:D> $ , $ <var:I> = <var:D> $ before running this series of commands it must be that $ <var:S> = <nat:1> \cdot <var:D> ^ <nat:5> + <nat:4> \cdot <var:D> ^ <nat:3> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions is done using standard Hoare reasoning . Going forward , we have the assignment line \verb | <var:S> := <nat:1> ; | . This forwards the precondition $ \{ <var:I> = <var:D> \} $ toward the postcondition $ \{ <var:I> = <var:D> \land <var:S> = <nat:1> \} $ . This is rigorously given with the assignment law obtained from standard Hoare techniques . Now , we have the line \verb | <var:S> := <var:S> * <var:I> ; | . This takes the precondition $ \{ <var:I> = <var:D> \land <var:S> = <nat:1> \} $ into the postcondition $ \{ <var:I> = <var:D> \land <var:S> = <nat:1> * <var:D> + \} $ . This is known to be sound with the assignment inference rule found in typical Hoare techniques . Keeping momentum , we have the environment update command \verb | <var:S> := <nat:4> + <var:S> * <var:I> ; | . This advances the precondition $ \{ <var:I> = <var:D> \land <var:S> = <nat:1> * <var:D> + \} $ to the condition $ \{ <var:I> = <var:D> \land <var:S> = <nat:1> * <var:D> ^ <nat:2> + <nat:4> \} $ . Moving forward to the next step , we have the statement giving $ <var:S> * <var:I> $ into $ <var:S>$ . This statement forwards $ \{ <var:I> = <var:D> \land <var:S> = <nat:1> * <var:D> ^ <nat:2> + <nat:4> \} $ as $ \{ <var:I> = <var:D> \land <var:S> = <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> + \} $ . This is given by the assignment scheme obtained from standard Hoare reasoning . Advancing to the subsequent line of code in our code segment , we see the variable assignmet code \verb | <var:S> := <var:S> * <var:I> ; | . This moves $ \{ <var:I> = <var:D> \land <var:S> = <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> + \} $ toward $ \{ <var:I> = <var:D> \land <var:S> = <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> + \} $ . This is given by the assignment scheme defined in standard Hoare techniques . Advancing , we have the line \verb | <var:S> := <nat:4> + <var:S> * <var:I> | . This moves the condition $ \{ <var:I> = <var:D> \land <var:S> = <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> + \} $ into the condition $ \{ <var:I> = <var:D> \land <var:S> = <nat:1> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:3> + <nat:4> \} $ . This is guaranteed through the assignment law from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:I> = <var:D> }} <var:S> := <nat:1> ; <var:S> := <var:S> * <var:I> ; <var:S> := <nat:4> + <var:S> * <var:I> ; <var:S> := <var:S> * <var:I> ; <var:S> := <var:S> * <var:I> ; <var:S> := <nat:4> + <var:S> * <var:I> {{ <var:S> = <nat:1> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:S> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:S> = <nat:1> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:S> = <nat:1> * <var:D> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:S> = <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:S> = <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:S> = <nat:1> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 