\begin{document} \begin{theorem} Consider a segment of code as \begin{verbatim} <var:X1> := <var:D> ; <var:X0> := <nat:7> ; <var:X1> := <var:X1> * <nat:9> ; <var:G> := <var:X1> <var:G> := <var:G> + <var:X0> \end{verbatim} Allow that we have $ <var:D> = <var:U> $ ahead of the evaluation of this segment of code , it holds that we have $ <var:G> = <nat:9> * <var:U> + <nat:7> $ once series of commands finishes . \end{theorem} \begin{proof} The method of proof for the series of commands is shown with typical Hoare techniques . Observing the subsequent commands seen in the program , \begin{eqnarray} \{ <var:D> = <var:U> \} \, <var:X1> := <var:D> \, \{ <var:D> = <var:U> \land <var:X1> = <var:U> \} \\ \{ <var:D> = <var:U> \land <var:X1> = <var:U> \} \, <var:X0> := <nat:7> \, \{ <var:D> = <var:U> \land <var:X1> = <var:U> \land <var:X0> = <nat:7> \} \end{eqnarray} Moving on to the upcoming statement contained in the series of commands , \begin{eqnarray} \{ <var:D> = <var:U> \} \, <var:X1> := <var:D> \, \{ <var:D> = <var:U> \land <var:X1> = <var:U> \} \end{eqnarray} This is shown using the variable update scheme of typical Hoare logic . Focusing on the next step seen in our code , we see \begin{eqnarray} \{ <var:D> = <var:U> \} \, <var:X1> := <var:D> \, \{ <var:D> = <var:U> \land <var:X1> = <var:U> \} \end{eqnarray} Going forward , we have \begin{eqnarray} \{ <var:D> = <var:U> \} \, <var:X1> := <var:D> \, \{ <var:D> = <var:U> \land <var:X1> = <var:U> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:D> = <var:U> }} <var:X1> := <var:D> ; <var:X0> := <nat:7> ; <var:X1> := <var:X1> * <nat:9> ; <var:G> := <var:X1> <var:G> := <var:G> + <var:X0> {{ <var:G> = <nat:9> * <var:U> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:U> /\ <var:X1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:U> /\ <var:X1> = <var:U> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:U> /\ <var:X1> = <nat:9> * <var:U> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:U> /\ <var:X0> = <nat:7> /\ <var:G> = <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:U> /\ <var:G> = <nat:9> * <var:U> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 