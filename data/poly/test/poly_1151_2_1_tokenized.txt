\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:1> ; <var:J> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Allow it to be that $ <var:V> = <var:z> $ ( given any natural coefficients $ <var:z> $ ) before evaluating this list of instructions it follows that we see $ <var:J> = <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of instructions is demonstrated with typical Hoare logic . Moving on to the next step , we have \begin{eqnarray} \{ <var:V> = <var:z> \} \, <var:q0> := <nat:1> \, \{ <var:V> = <var:z> \land <var:q0> = <nat:1> \} \\ \{ <var:V> = <var:z> \land <var:q0> = <nat:1> \} \, <var:J> := <var:q0\, \{ <var:V> = <var:z> \land <var:J> = <nat:1> \} \end{eqnarray} This is rigorously given with the assignment inference rule from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:1> ; <var:J> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:V> = <var:z> }} <def:poly> {{ <var:J> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:z> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:z> /\ <var:J> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 