\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:c1> := <var:l> ; <var:c2> := <var:c1> * <var:l> ; <var:c0> := <nat:5> ; <var:c1> := <var:c1> * <nat:1> ; <var:c2> := <var:c2> * <nat:8> ; <var:j> := <var:c2> <var:j> := <var:j> + <var:c1> <var:j> := <var:j> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Assuming that we have $ <var:l> = <var:t> $ --- for every positive integer coefficients $ <var:t> $ --- ahead of executing our list of instructions it follows that $ <var:j> = <nat:8> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:t> \} \\ <var:c1> := <var:l> ; \\ \{ <var:l> = <var:t> \land <var:c1> = <var:t> \} \\ <var:c2> := <var:c1> * <var:l> ; \\ \{ <var:l> = <var:t> \land <var:c1> = <var:t> \land <var:c2> = <var:t> ^ <nat:2> \} \\ <var:c0> := <nat:5> ; \\ \{ <var:l> = <var:t> \land <var:c1> = <var:t> \land <var:c2> = <var:t> ^ <nat:2> \land <var:c0> = <nat:5> \} \\ <var:c1> := <var:c1> * <nat:1> ; \\ \{ <var:l> = <var:t> \land <var:c1> = <nat:1> \times <var:t> \land <var:c2> = <var:t> ^ <nat:2> \land <var:c0> = <nat:5> \} \\ <var:c2> := <var:c2> * <nat:8> ; \\ \{ <var:l> = <var:t> \land <var:c1> = <nat:1> \times <var:t> \land <var:c2> = <nat:8> \times <var:t> ^ <nat:2> \land <var:c0> = <nat:5> \} \\ <var:j> := <var:c2> \\ \{ <var:l> = <var:t> \land <var:c1> = <nat:1> \times <var:t> \land <var:c0> = <nat:5> \land <var:j> = <nat:8> \times <var:t> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:c1> \\ \{ <var:l> = <var:t> \land <var:c0> = <nat:5> \land <var:j> = <nat:8> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> \} \\ <var:j> := <var:j> + <var:c0> \\ \{ <var:l> = <var:t> \land <var:j> = <nat:8> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> + <nat:5> \} \end{eqnarray} Utilizing standard Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c1> := <var:l> ; <var:c2> := <var:c1> * <var:l> ; <var:c0> := <nat:5> ; <var:c1> := <var:c1> * <nat:1> ; <var:c2> := <var:c2> * <nat:8> ; <var:j> := <var:c2> <var:j> := <var:j> + <var:c1> <var:j> := <var:j> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:l> = <var:t> }} <def:poly> {{ <var:j> = <nat:8> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:c1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:c1> = <var:t> /\ <var:c2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:c1> = <var:t> /\ <var:c2> = <var:t> ^ <nat:2> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:c1> = <nat:1> * <var:t> /\ <var:c2> = <var:t> ^ <nat:2> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:c1> = <nat:1> * <var:t> /\ <var:c2> = <nat:8> * <var:t> ^ <nat:2> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:c1> = <nat:1> * <var:t> /\ <var:c0> = <nat:5> /\ <var:j> = <nat:8> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:c0> = <nat:5> /\ <var:j> = <nat:8> * <var:t> ^ <nat:2> + <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:t> /\ <var:j> = <nat:8> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 