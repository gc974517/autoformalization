\begin{document} \begin{theorem} Define a segment of code in \emph{Imp} as \begin{verbatim} <var:u> := <nat:4> ; <var:u> := <nat:4> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:1> + <var:u> * <var:Y> \end{verbatim} Allow $ <var:Y> = <var:E> $ prior to the execution of the segment of code it must be that $ <var:u> = <nat:4> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:1> $ when list of instructions is done executing . \end{theorem} \begin{proof} The argument for our set of instructions is demonstrated with typical Hoare reasoning . Stepping through , we have \begin{eqnarray} \{ <var:Y> = <var:E> \} \, <var:u> := <nat:4> \, \{ <var:Y> = <var:E> \land <var:u> = <nat:4> \} \\ \{ <var:Y> = <var:E> \land <var:u> = <nat:4> \} \, <var:u> := <nat:4> + <var:u> * <var:Y> \, \{ <var:Y> = <var:E> \land <var:u> = <nat:4> \cdot <var:E> + <nat:4> \} \\ \{ <var:Y> = <var:E> \land <var:u> = <nat:4> \cdot <var:E> + <nat:4> \} \, <var:u> := <nat:2> + <var:u> * <var:Y> \, \{ <var:Y> = <var:E> \land <var:u> = <nat:4> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> + <nat:2> \} \\ \{ <var:Y> = <var:E> \land <var:u> = <nat:4> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> + <nat:2> \} \, <var:u> := <nat:1> + <var:u> * <var:Y\, \{ <var:Y> = <var:E> \land <var:u> = <nat:4> \cdot <var:E> ^ <nat:3> + <nat:4> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:Y> = <var:E> }} <var:u> := <nat:4> ; <var:u> := <nat:4> + <var:u> * <var:Y> ; <var:u> := <nat:2> + <var:u> * <var:Y> ; <var:u> := <nat:1> + <var:u> * <var:Y> {{ <var:u> = <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:u> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:u> = <nat:4> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:u> = <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:u> = <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 