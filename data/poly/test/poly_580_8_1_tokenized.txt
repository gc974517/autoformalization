\begin{document} \begin{theorem} Consider the following series of instructions : \begin{verbatim} <var:C1> := <var:k> ; <var:C2> := <var:C1> * <var:k> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:6> ; <var:C2> := <var:C2> * <nat:3> ; <var:c> := <var:C2> <var:c> := <var:c> + <var:C1> <var:c> := <var:c> + <var:C0> \end{verbatim} Allow $ <var:k> = <var:W> $ prior to the evaluation of our set of instructions , it must be that $ <var:c> = <nat:3> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:1> $ when set of commands has exited . \end{theorem} \begin{proof} Applying Hoare logic gives us : \begin{eqnarray} \{ <var:k> = <var:W> \} \\ <var:C1> := <var:k> ; \\ \{ <var:k> = <var:W> \land <var:C1> = <var:W> \} \\ <var:C2> := <var:C1> * <var:k> ; \\ \{ <var:k> = <var:W> \land <var:C1> = <var:W> \land <var:C2> = <var:W> ^ <nat:2> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:k> = <var:W> \land <var:C1> = <var:W> \land <var:C2> = <var:W> ^ <nat:2> \land <var:C0> = <nat:1> \} \\ <var:C1> := <var:C1> * <nat:6> ; \\ \{ <var:k> = <var:W> \land <var:C1> = <nat:6> \times <var:W> \land <var:C2> = <var:W> ^ <nat:2> \land <var:C0> = <nat:1> \} \\ <var:C2> := <var:C2> * <nat:3> ; \\ \{ <var:k> = <var:W> \land <var:C1> = <nat:6> \times <var:W> \land <var:C2> = <nat:3> \times <var:W> ^ <nat:2> \land <var:C0> = <nat:1> \} \\ <var:c> := <var:C2> \\ \{ <var:k> = <var:W> \land <var:C1> = <nat:6> \times <var:W> \land <var:C0> = <nat:1> \land <var:c> = <nat:3> \times <var:W> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:C1> \\ \{ <var:k> = <var:W> \land <var:C0> = <nat:1> \land <var:c> = <nat:3> \times <var:W> ^ <nat:2> + <nat:6> \times <var:W> \} \\ <var:c> := <var:c> + <var:C0> \\ \{ <var:k> = <var:W> \land <var:c> = <nat:3> \times <var:W> ^ <nat:2> + <nat:6> \times <var:W> + <nat:1> \} \end{eqnarray} Given the preceding argument , this code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:k> = <var:W> }} <var:C1> := <var:k> ; <var:C2> := <var:C1> * <var:k> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:6> ; <var:C2> := <var:C2> * <nat:3> ; <var:c> := <var:C2> <var:c> := <var:c> + <var:C1> <var:c> := <var:c> + <var:C0> {{ <var:c> = <nat:3> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:W> /\ <var:C1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:W> /\ <var:C1> = <var:W> /\ <var:C2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:W> /\ <var:C1> = <var:W> /\ <var:C2> = <var:W> ^ <nat:2> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:W> /\ <var:C1> = <nat:6> * <var:W> /\ <var:C2> = <var:W> ^ <nat:2> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:W> /\ <var:C1> = <nat:6> * <var:W> /\ <var:C2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:W> /\ <var:C1> = <nat:6> * <var:W> /\ <var:C0> = <nat:1> /\ <var:c> = <nat:3> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:W> /\ <var:C0> = <nat:1> /\ <var:c> = <nat:3> * <var:W> ^ <nat:2> + <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:W> /\ <var:c> = <nat:3> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 