\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:2> ; <var:T> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- given natural numbers $ <var:o> $ --- that $ <var:V> = <var:o> $ before executing our set of instructions , it must be that we see $ <var:T> = <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our code segment is evident with Hoare logic . Paying attention to the proceeding line in our list of commands , we see the variable update command \verb | <var:F0> := <nat:2> ; | . This redefines the precondition $ \{ <var:V> = <var:o> \} $ as the postcondition $ \{ <var:V> = <var:o> \land <var:F0> = <nat:2> \} $ . Observing the proceeding line in our list of commands , the variable assignmet statement \verb | <var:T> := <var:F0> | . This moves $ \{ <var:V> = <var:o> \land <var:F0> = <nat:2> \} $ as the condition $ \{ <var:V> = <var:o> \land <var:T> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:2> ; <var:T> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:V> = <var:o> }} <def:poly> {{ <var:T> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:o> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:o> /\ <var:T> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 