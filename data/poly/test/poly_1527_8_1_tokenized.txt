\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:S1> := <var:L> ; <var:S2> := <var:S1> * <var:L> ; <var:S0> := <nat:3> ; <var:S1> := <var:S1> * <nat:3> ; <var:S2> := <var:S2> * <nat:2> ; <var:T> := <var:S2> <var:T> := <var:T> + <var:S1> <var:T> := <var:T> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allow given any positive coefficients $ <var:H> $ that $ <var:L> = <var:H> $ prior to interpreting this series of instructions , it holds that we have $ <var:T> = <nat:2> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:3> $ once set of commands has executed . \end{theorem} \begin{proof} Demonstrating correctness of the code segment can be seen by standard Hoare logic . Going to the next step , we see the variable assignmet command \verb | <var:S1> := <var:L> ; | . This takes the condition $ \{ <var:L> = <var:H> \} $ to the postcondition $ \{ <var:L> = <var:H> \land <var:S1> = <var:H> \} $ . This is ensured through the assignment law defined in usual Hoare reasoning . Keeping momentum , we see the binding line \verb | <var:S2> := <var:S1> * <var:L> ; | . This takes the precondition $ \{ <var:L> = <var:H> \land <var:S1> = <var:H> \} $ to the postcondition $ \{ <var:L> = <var:H> \land <var:S1> = <var:H> \land <var:S2> = <var:H> ^ <nat:2> \} $ . Looking at the proceeding bit of code seen in the series of instructions , we have the binding line \verb | <var:S0> := <nat:3> ; | . This moves the condition $ \{ <var:L> = <var:H> \land <var:S1> = <var:H> \land <var:S2> = <var:H> ^ <nat:2> \} $ as $ \{ <var:L> = <var:H> \land <var:S1> = <var:H> \land <var:S2> = <var:H> ^ <nat:2> \land <var:S0> = <nat:3> \} $ . This is rigorously given with the assignment scheme given by usual Hoare logic . Stepping forward , we have the variable assignmet statement assigning $ <var:S1> * <nat:3> $ toward $ <var:S1>$ . This line advances the condition $ \{ <var:L> = <var:H> \land <var:S1> = <var:H> \land <var:S2> = <var:H> ^ <nat:2> \land <var:S0> = <nat:3> \} $ into the postcondition $ \{ <var:L> = <var:H> \land <var:S1> = <nat:3> \times <var:H> \land <var:S2> = <var:H> ^ <nat:2> \land <var:S0> = <nat:3> \} $ . Moving forward to the proceeding line found in our list of commands , we have the statement \verb | <var:S2> := <var:S2> * <nat:2> ; | . This command transfers the condition $ \{ <var:L> = <var:H> \land <var:S1> = <nat:3> \times <var:H> \land <var:S2> = <var:H> ^ <nat:2> \land <var:S0> = <nat:3> \} $ toward the postcondition $ \{ <var:L> = <var:H> \land <var:S1> = <nat:3> \times <var:H> \land <var:S2> = <nat:2> \times <var:H> ^ <nat:2> \land <var:S0> = <nat:3> \} $ . Moving on , we have the variable assignmet line \verb | <var:T> := <var:S2> | . This advances the condition $ \{ <var:L> = <var:H> \land <var:S1> = <nat:3> \times <var:H> \land <var:S2> = <nat:2> \times <var:H> ^ <nat:2> \land <var:S0> = <nat:3> \} $ toward the condition $ \{ <var:L> = <var:H> \land <var:S1> = <nat:3> \times <var:H> \land <var:S0> = <nat:3> \land <var:T> = <nat:2> \times <var:H> ^ <nat:2> \} $ . This is rigorously given by the assignment inference rule given by Hoare logic . Advancing to the next step , the assignment command yielding $ <var:T> + <var:S1$ as $ <var:T>$ . This advances the condition $ \{ <var:L> = <var:H> \land <var:S1> = <nat:3> \times <var:H> \land <var:S0> = <nat:3> \land <var:T> = <nat:2> \times <var:H> ^ <nat:2> \} $ to the condition $ \{ <var:L> = <var:H> \land <var:S0> = <nat:3> \land <var:T> = <nat:2> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> \} $ . Taking another step toward the upcoming piece of code seen in the code , we have the assignment command binding $ <var:T> + <var:S0$ into $ <var:T>$ . This code moves the precondition $ \{ <var:L> = <var:H> \land <var:S0> = <nat:3> \land <var:T> = <nat:2> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> \} $ into $ \{ <var:L> = <var:H> \land <var:T> = <nat:2> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:3> \} $ . This is given with the assignment scheme defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S1> := <var:L> ; <var:S2> := <var:S1> * <var:L> ; <var:S0> := <nat:3> ; <var:S1> := <var:S1> * <nat:3> ; <var:S2> := <var:S2> * <nat:2> ; <var:T> := <var:S2> <var:T> := <var:T> + <var:S1> <var:T> := <var:T> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:L> = <var:H> }} <def:poly> {{ <var:T> = <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:S1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:S1> = <var:H> /\ <var:S2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:S1> = <var:H> /\ <var:S2> = <var:H> ^ <nat:2> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:S1> = <nat:3> * <var:H> /\ <var:S2> = <var:H> ^ <nat:2> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:S1> = <nat:3> * <var:H> /\ <var:S2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:S1> = <nat:3> * <var:H> /\ <var:S0> = <nat:3> /\ <var:T> = <nat:2> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:S0> = <nat:3> /\ <var:T> = <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:T> = <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 