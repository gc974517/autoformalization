\begin{document} \begin{theorem} We define the following program as follows \begin{verbatim} <var:J0> := <nat:3> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:K> ; <var:J2> := <var:J2> * <var:K> ; <var:J4> := <nat:3> ; <var:J4> := <var:J4> * <var:K> ; <var:J4> := <var:J4> * <var:K> ; <var:J4> := <var:J4> * <var:K> ; <var:J4> := <var:J4> * <var:K> ; <var:Q> := <var:J4> ; <var:Q> := <var:Q> + <var:J2> ; <var:Q> := <var:Q> + <var:J0> \end{verbatim} Assuming it to be that $ <var:K> = <var:l> $ before interpreting our list of commands , it must be that $ <var:Q> = <nat:3> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> ^ <nat:2> + <nat:3> $ when code has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:l> \} \\ <var:J0> := <nat:3> ; \\ \{ <var:K> = <var:l> \land <var:J0> = <nat:3> \} \\ <var:J2> := <nat:2> ; \\ \{ <var:K> = <var:l> \land <var:J0> = <nat:3> \land <var:J2> = <nat:2> \} \\ <var:J2> := <var:J2> * <var:K> ; \\ \{ <var:K> = <var:l> \land <var:J0> = <nat:3> \land <var:J2> = <nat:2> \cdot <var:l> \} \\ <var:J2> := <var:J2> * <var:K> ; \\ \{ <var:K> = <var:l> \land <var:J0> = <nat:3> \land <var:J2> = <nat:2> \cdot <var:l> ^ <nat:2> \} \\ <var:J4> := <nat:3> ; \\ \{ <var:K> = <var:l> \land <var:J0> = <nat:3> \land <var:J2> = <nat:2> \cdot <var:l> ^ <nat:2> \land <var:J4> = <nat:3> \} \\ <var:J4> := <var:J4> * <var:K> ; \\ \{ <var:K> = <var:l> \land <var:J0> = <nat:3> \land <var:J2> = <nat:2> \cdot <var:l> ^ <nat:2> \land <var:J4> = <nat:3> \cdot <var:l> \} \\ <var:J4> := <var:J4> * <var:K> ; \\ \{ <var:K> = <var:l> \land <var:J0> = <nat:3> \land <var:J2> = <nat:2> \cdot <var:l> ^ <nat:2> \land <var:J4> = <nat:3> \cdot <var:l> ^ <nat:2> \} \\ <var:J4> := <var:J4> * <var:K> ; \\ \{ <var:K> = <var:l> \land <var:J0> = <nat:3> \land <var:J2> = <nat:2> \cdot <var:l> ^ <nat:2> \land <var:J4> = <nat:3> \cdot <var:l> ^ <nat:3> \} \\ <var:J4> := <var:J4> * <var:K> ; \\ \{ <var:K> = <var:l> \land <var:J0> = <nat:3> \land <var:J2> = <nat:2> \cdot <var:l> ^ <nat:2> \land <var:J4> = <nat:3> \cdot <var:l> ^ <nat:4> \} \\ <var:Q> := <var:J4> ; \\ \{ <var:K> = <var:l> \land <var:J0> = <nat:3> \land <var:J2> = <nat:2> \cdot <var:l> ^ <nat:2> \land <var:Q> = <nat:3> \cdot <var:l> ^ <nat:4> \} \\ <var:Q> := <var:Q> + <var:J2> ; \\ \{ <var:K> = <var:l> \land <var:J0> = <nat:3> \land <var:Q> = <nat:3> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:J0> \\ \{ <var:K> = <var:l> \land <var:Q> = <nat:3> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:3> \} \end{eqnarray} Using usual Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J4> : string := " <var:J4> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:K> = <var:l> }} <var:J0> := <nat:3> ; <var:J2> := <nat:2> ; <var:J2> := <var:J2> * <var:K> ; <var:J2> := <var:J2> * <var:K> ; <var:J4> := <nat:3> ; <var:J4> := <var:J4> * <var:K> ; <var:J4> := <var:J4> * <var:K> ; <var:J4> := <var:J4> * <var:K> ; <var:J4> := <var:J4> * <var:K> ; <var:Q> := <var:J4> ; <var:Q> := <var:Q> + <var:J2> ; <var:Q> := <var:Q> + <var:J0> {{ <var:Q> = <nat:3> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:J0> = <nat:3> /\ <var:J2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:J0> = <nat:3> /\ <var:J2> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:J0> = <nat:3> /\ <var:J2> = <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:J0> = <nat:3> /\ <var:J2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:J4> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:J0> = <nat:3> /\ <var:J2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:J4> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:J0> = <nat:3> /\ <var:J2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:J4> = <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:J0> = <nat:3> /\ <var:J2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:J4> = <nat:3> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:J0> = <nat:3> /\ <var:J2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:J4> = <nat:3> * <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:J0> = <nat:3> /\ <var:J2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:Q> = <nat:3> * <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:J0> = <nat:3> /\ <var:Q> = <nat:3> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:l> /\ <var:Q> = <nat:3> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 