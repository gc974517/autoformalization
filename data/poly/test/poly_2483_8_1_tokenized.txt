\begin{document} \begin{theorem} Define the following list of commands as \begin{verbatim} <var:a1> := <var:Z> ; <var:a2> := <var:a1> * <var:Z> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:9> ; <var:a2> := <var:a2> * <nat:5> ; <var:H> := <var:a2> <var:H> := <var:H> + <var:a1> <var:H> := <var:H> + <var:a0> \end{verbatim} Allowing that we have $ <var:Z> = <var:E> $ ahead of the evaluation of our set of commands it follows that we see $ <var:H> = <nat:5> \times <var:E> ^ <nat:2> + <nat:9> \times <var:E> + <nat:5> $ once list of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:E> \} \\ <var:a1> := <var:Z> ; \\ \{ <var:Z> = <var:E> \land <var:a1> = <var:E> \} \\ <var:a2> := <var:a1> * <var:Z> ; \\ \{ <var:Z> = <var:E> \land <var:a1> = <var:E> \land <var:a2> = <var:E> ^ <nat:2> \} \\ <var:a0> := <nat:5> ; \\ \{ <var:Z> = <var:E> \land <var:a1> = <var:E> \land <var:a2> = <var:E> ^ <nat:2> \land <var:a0> = <nat:5> \} \\ <var:a1> := <var:a1> * <nat:9> ; \\ \{ <var:Z> = <var:E> \land <var:a1> = <nat:9> \cdot <var:E> \land <var:a2> = <var:E> ^ <nat:2> \land <var:a0> = <nat:5> \} \\ <var:a2> := <var:a2> * <nat:5> ; \\ \{ <var:Z> = <var:E> \land <var:a1> = <nat:9> \cdot <var:E> \land <var:a2> = <nat:5> \cdot <var:E> ^ <nat:2> \land <var:a0> = <nat:5> \} \\ <var:H> := <var:a2> \\ \{ <var:Z> = <var:E> \land <var:a1> = <nat:9> \cdot <var:E> \land <var:a0> = <nat:5> \land <var:H> = <nat:5> \cdot <var:E> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:a1> \\ \{ <var:Z> = <var:E> \land <var:a0> = <nat:5> \land <var:H> = <nat:5> \cdot <var:E> ^ <nat:2> + <nat:9> \cdot <var:E> \} \\ <var:H> := <var:H> + <var:a0> \\ \{ <var:Z> = <var:E> \land <var:H> = <nat:5> \cdot <var:E> ^ <nat:2> + <nat:9> \cdot <var:E> + <nat:5> \} \end{eqnarray} Utilizing Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:Z> = <var:E> }} <var:a1> := <var:Z> ; <var:a2> := <var:a1> * <var:Z> ; <var:a0> := <nat:5> ; <var:a1> := <var:a1> * <nat:9> ; <var:a2> := <var:a2> * <nat:5> ; <var:H> := <var:a2> <var:H> := <var:H> + <var:a1> <var:H> := <var:H> + <var:a0> {{ <var:H> = <nat:5> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:a1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:a1> = <var:E> /\ <var:a2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:a1> = <var:E> /\ <var:a2> = <var:E> ^ <nat:2> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:a1> = <nat:9> * <var:E> /\ <var:a2> = <var:E> ^ <nat:2> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:a1> = <nat:9> * <var:E> /\ <var:a2> = <nat:5> * <var:E> ^ <nat:2> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:a1> = <nat:9> * <var:E> /\ <var:a0> = <nat:5> /\ <var:H> = <nat:5> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:a0> = <nat:5> /\ <var:H> = <nat:5> * <var:E> ^ <nat:2> + <nat:9> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:H> = <nat:5> * <var:E> ^ <nat:2> + <nat:9> * <var:E> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 