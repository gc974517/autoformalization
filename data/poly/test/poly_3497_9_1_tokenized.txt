\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V1> := <var:s> ; <var:V2> := <var:V1> * <var:s> ; <var:V3> := <var:V2> * <var:s> ; <var:V0> := <nat:3> ; <var:V1> := <var:V1> * <nat:1> ; <var:V3> := <var:V3> * <nat:1> ; <var:N> := <var:V3> <var:N> := <var:N> + <var:V1> <var:N> := <var:N> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Allowing , letting natural numbers $ <var:c> $ , that $ <var:s> = <var:c> $ ahead of evaluating our segment of code , it holds that we have $ <var:N> = <nat:1> \cdot <var:c> ^ <nat:3> + <nat:1> \cdot <var:c> + <nat:3> $ once set of instructions has exited . \end{theorem} \begin{proof} We can see that the below decorated code . \begin{eqnarray} \{ <var:s> = <var:c> \} \\ <var:V1> := <var:s> ; \\ \{ <var:s> = <var:c> \land <var:V1> = <var:c> \} \\ <var:V2> := <var:V1> * <var:s> ; \\ \{ <var:s> = <var:c> \land <var:V1> = <var:c> \land <var:V2> = <var:c> ^ <nat:2> \} \\ <var:V3> := <var:V2> * <var:s> ; \\ \{ <var:s> = <var:c> \land <var:V1> = <var:c> \land <var:V2> = <var:c> ^ <nat:2> \land <var:V3> = <var:c> ^ <nat:3> \} \\ <var:V0> := <nat:3> ; \\ \{ <var:s> = <var:c> \land <var:V1> = <var:c> \land <var:V2> = <var:c> ^ <nat:2> \land <var:V3> = <var:c> ^ <nat:3> \land <var:V0> = <nat:3> \} \\ <var:V1> := <var:V1> * <nat:1> ; \\ \{ <var:s> = <var:c> \land <var:V1> = <nat:1> \times <var:c> \land <var:V2> = <var:c> ^ <nat:2> \land <var:V3> = <var:c> ^ <nat:3> \land <var:V0> = <nat:3> \} \\ <var:V3> := <var:V3> * <nat:1> ; \\ \{ <var:s> = <var:c> \land <var:V1> = <nat:1> \times <var:c> \land <var:V2> = <var:c> ^ <nat:2> \land <var:V3> = <nat:1> \times <var:c> ^ <nat:3> \land <var:V0> = <nat:3> \} \\ <var:N> := <var:V3> \\ \{ <var:s> = <var:c> \land <var:V1> = <nat:1> \times <var:c> \land <var:V2> = <var:c> ^ <nat:2> \land <var:V0> = <nat:3> \land <var:N> = <nat:1> \times <var:c> ^ <nat:3> \} \end{eqnarray} Advancing the evaluation of our list of commands returns : \begin{eqnarray} <var:N> := <var:N> + <var:V1> \\ \{ <var:s> = <var:c> \land <var:V0> = <nat:3> \land <var:N> = <nat:1> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> \} \\ <var:N> := <var:N> + <var:V0> \\ \{ <var:s> = <var:c> \land <var:N> = <nat:1> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> + <nat:3> \} \end{eqnarray} Using usual Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V1> := <var:s> ; <var:V2> := <var:V1> * <var:s> ; <var:V3> := <var:V2> * <var:s> ; <var:V0> := <nat:3> ; <var:V1> := <var:V1> * <nat:1> ; <var:V3> := <var:V3> * <nat:1> ; <var:N> := <var:V3> <var:N> := <var:N> + <var:V1> <var:N> := <var:N> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:s> = <var:c> }} <def:poly> {{ <var:N> = <nat:1> * <var:c> ^ <nat:3> + <nat:1> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:V1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:V1> = <var:c> /\ <var:V2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:V1> = <var:c> /\ <var:V2> = <var:c> ^ <nat:2> /\ <var:V3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:V1> = <var:c> /\ <var:V2> = <var:c> ^ <nat:2> /\ <var:V3> = <var:c> ^ <nat:3> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:V1> = <nat:1> * <var:c> /\ <var:V2> = <var:c> ^ <nat:2> /\ <var:V3> = <var:c> ^ <nat:3> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:V1> = <nat:1> * <var:c> /\ <var:V2> = <var:c> ^ <nat:2> /\ <var:V3> = <nat:1> * <var:c> ^ <nat:3> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:V1> = <nat:1> * <var:c> /\ <var:V2> = <var:c> ^ <nat:2> /\ <var:V0> = <nat:3> /\ <var:N> = <nat:1> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:V0> = <nat:3> /\ <var:N> = <nat:1> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:c> /\ <var:N> = <nat:1> * <var:c> ^ <nat:3> + <nat:1> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 