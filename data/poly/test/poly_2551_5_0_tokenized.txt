\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:l0> := <nat:3> ; <var:l1> := <nat:2> ; <var:l1> := <var:l1> * <var:p> ; <var:C> := <var:l1> ; <var:C> := <var:C> + <var:l0> \end{verbatim} Given $ <var:p> = <var:E> $ --- given every natural numbers $ <var:E> $ --- prior to interpreting the segment of code , then we see $ <var:C> = <nat:2> * <var:E> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for this code is demonstrated through typical Hoare reasoning . Following , the variable update statement \verb | <var:l0> := <nat:3> ; | . This forwards the precondition $ \{ <var:p> = <var:E> \} $ toward $ \{ <var:p> = <var:E> \land <var:l0> = <nat:3> \} $ . Honing in on the next line of code in the set of instructions , the statement giving $ <nat:2> $ toward $ <var:l1>$ . This forwards the condition $ \{ <var:p> = <var:E> \land <var:l0> = <nat:3> \} $ into the condition $ \{ <var:p> = <var:E> \land <var:l0> = <nat:3> \land <var:l1> = <nat:2> \} $ . Immediately following , we have the variable binding line binding $ <var:l1> * <var:p> $ toward $ <var:l1>$ . This command moves $ \{ <var:p> = <var:E> \land <var:l0> = <nat:3> \land <var:l1> = <nat:2> \} $ into the condition $ \{ <var:p> = <var:E> \land <var:l0> = <nat:3> \land <var:l1> = <nat:2> \times <var:E> \} $ . This is given by the assignment law of Hoare logic . Immediately following , we have the variable update command \verb | <var:C> := <var:l1> ; | . This forwards the condition $ \{ <var:p> = <var:E> \land <var:l0> = <nat:3> \land <var:l1> = <nat:2> \times <var:E> \} $ toward $ \{ <var:p> = <var:E> \land <var:l0> = <nat:3> \land <var:C> = <nat:2> \times <var:E> \} $ . This is given with the assignment inference rule found in usual Hoare logic . Advancing on , we see the binding line yielding $ <var:C> + <var:l0$ to $ <var:C>$ . This moves the precondition $ \{ <var:p> = <var:E> \land <var:l0> = <nat:3> \land <var:C> = <nat:2> \times <var:E> \} $ into $ \{ <var:p> = <var:E> \land <var:C> = <nat:2> \times <var:E> + <nat:3> \} $ . This is sound with the assignment law of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:p> = <var:E> }} <var:l0> := <nat:3> ; <var:l1> := <nat:2> ; <var:l1> := <var:l1> * <var:p> ; <var:C> := <var:l1> ; <var:C> := <var:C> + <var:l0> {{ <var:C> = <nat:2> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:l0> = <nat:3> /\ <var:C> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:C> = <nat:2> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 