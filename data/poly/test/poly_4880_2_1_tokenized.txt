\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:2> ; <var:f> := <var:j0> \end{verbatim} Given it to be that $ <var:U> = <var:E> $ ahead of running this series of commands , it holds that we have $ <var:f> = <nat:2> $ after code segment exits . \end{theorem} \begin{proof} We can see that the following decorated code segment . \begin{eqnarray} \{ <var:U> = <var:E> \} \\ <var:j0> := <nat:2> ; \\ \{ <var:U> = <var:E> \land <var:j0> = <nat:2> \} \\ <var:f> := <var:j0> \\ \{ <var:U> = <var:E> \land <var:f> = <nat:2> \} \end{eqnarray} Utilizing standard Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:U> = <var:E> }} <var:j0> := <nat:2> ; <var:f> := <var:j0> {{ <var:f> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:E> /\ <var:f> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 