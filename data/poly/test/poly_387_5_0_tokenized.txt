\begin{document} \begin{theorem} Define the following code such that \begin{verbatim} <var:o0> := <nat:2> ; <var:o1> := <nat:4> ; <var:o1> := <var:o1> * <var:R> ; <var:p> := <var:o1> ; <var:p> := <var:p> + <var:o0> \end{verbatim} Assuming it to be that $ <var:R> = <var:H> $ , given every natural numbers $ <var:H> $ , before evaluating this code segment , then we have $ <var:p> = <nat:4> \times <var:H> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this program can be seen with standard Hoare logic . Following , \verb | { <var:R> = <var:H> } <var:o0> := <nat:2> { <var:R> = <var:H> \land <var:o0> = <nat:2> } | , \verb | { <var:R> = <var:H> \land <var:o0> = <nat:2> } <var:o1> := <nat:4> { <var:R> = <var:H> \land <var:o0> = <nat:2> \land <var:o1> = <nat:4> } | and \verb | { <var:R> = <var:H> \land <var:o0> = <nat:2> \land <var:o1> = <nat:4> } <var:o1> := <var:o1> * <var:R> { <var:R> = <var:H> \land <var:o0> = <nat:2> \land <var:o1> = <nat:4> \times <var:H> } | . Moving on , we have \verb | { <var:R> = <var:H> } <var:o0> := <nat:2> { <var:R> = <var:H> \land <var:o0> = <nat:2> } | and \verb | { <var:R> = <var:H> \land <var:o0> = <nat:2> } <var:o1> := <nat:4> { <var:R> = <var:H> \land <var:o0> = <nat:2> \land <var:o1> = <nat:4> } | . This is known to be sound through the assignment rule given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:R> = <var:H> }} <var:o0> := <nat:2> ; <var:o1> := <nat:4> ; <var:o1> := <var:o1> * <var:R> ; <var:p> := <var:o1> ; <var:p> := <var:p> + <var:o0> {{ <var:p> = <nat:4> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:o0> = <nat:2> /\ <var:o1> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:o0> = <nat:2> /\ <var:p> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:p> = <nat:4> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 