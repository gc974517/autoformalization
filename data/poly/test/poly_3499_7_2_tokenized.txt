\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B> := <nat:1> ; <var:B> := <nat:3> + <var:B> * <var:I> ; <var:B> := <nat:3> + <var:B> * <var:I> ; <var:B> := <nat:3> + <var:B> * <var:I> ; <var:B> := <nat:1> + <var:B> * <var:I> ; <var:B> := <nat:1> + <var:B> * <var:I> ; <var:B> := <nat:3> + <var:B> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:I> = <var:K> $ ahead of executing the set of instructions , it holds that we have $ <var:B> = <nat:1> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> $ . \end{theorem} \begin{proof} We can see that this decorated series of instructions . \begin{eqnarray} \{ <var:I> = <var:K> \} \\ <var:B> := <nat:1> ; \\ \{ <var:I> = <var:K> \land <var:B> = <nat:1> \} \\ <var:B> := <nat:3> + <var:B> * <var:I> ; \\ \{ <var:I> = <var:K> \land <var:B> = <nat:1> \cdot <var:K> + <nat:3> \} \\ <var:B> := <nat:3> + <var:B> * <var:I> ; \\ \{ <var:I> = <var:K> \land <var:B> = <nat:1> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:3> \} \\ <var:B> := <nat:3> + <var:B> * <var:I> ; \\ \{ <var:I> = <var:K> \land <var:B> = <nat:1> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:3> \} \\ <var:B> := <nat:1> + <var:B> * <var:I> ; \\ \{ <var:I> = <var:K> \land <var:B> = <nat:1> \cdot <var:K> ^ <nat:4> + <nat:3> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:1> \} \\ <var:B> := <nat:1> + <var:B> * <var:I> ; \\ \{ <var:I> = <var:K> \land <var:B> = <nat:1> \cdot <var:K> ^ <nat:5> + <nat:3> \cdot <var:K> ^ <nat:4> + <nat:3> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:1> \cdot <var:K> + <nat:1> \} \\ <var:B> := <nat:3> + <var:B> * <var:I> \\ \{ <var:I> = <var:K> \land <var:B> = <nat:1> \cdot <var:K> ^ <nat:6> + <nat:3> \cdot <var:K> ^ <nat:5> + <nat:3> \cdot <var:K> ^ <nat:4> + <nat:3> \cdot <var:K> ^ <nat:3> + <nat:1> \cdot <var:K> ^ <nat:2> + <nat:1> \cdot <var:K> + <nat:3> \} \end{eqnarray} The application of Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:1> ; <var:B> := <nat:3> + <var:B> * <var:I> ; <var:B> := <nat:3> + <var:B> * <var:I> ; <var:B> := <nat:3> + <var:B> * <var:I> ; <var:B> := <nat:1> + <var:B> * <var:I> ; <var:B> := <nat:1> + <var:B> * <var:I> ; <var:B> := <nat:3> + <var:B> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:I> = <var:K> }} <def:poly> {{ <var:B> = <nat:1> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:K> /\ <var:B> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:K> /\ <var:B> = <nat:1> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:K> /\ <var:B> = <nat:1> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 