\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:u> := <nat:4> ; <var:u> := <var:u> * <var:V> ; <var:u> := <var:u> * <var:V> ; <var:u> := <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Assume ( for every positive numbers $ <var:a> $ ) that we have $ <var:V> = <var:a> $ prior to the evaluation of our program , it holds that $ <var:u> = <nat:4> \times <var:a> ^ <nat:5> + <nat:4> \times <var:a> + <nat:4> $ once set of instructions exits . \end{theorem} \begin{proof} See that this decorated list of instructions . \begin{eqnarray} \{ <var:V> = <var:a> \} \\ <var:u> := <nat:4> ; \\ \{ <var:V> = <var:a> \land <var:u> = <nat:4> \} \\ <var:u> := <var:u> * <var:V> ; \\ \{ <var:V> = <var:a> \land <var:u> = <nat:4> * <var:a> + \} \\ <var:u> := <var:u> * <var:V> ; \\ \{ <var:V> = <var:a> \land <var:u> = <nat:4> * <var:a> ^ <nat:2> + \} \\ <var:u> := <var:u> * <var:V> ; \\ \{ <var:V> = <var:a> \land <var:u> = <nat:4> * <var:a> ^ <nat:3> + \} \\ <var:u> := <nat:4> + <var:u> * <var:V> ; \\ \{ <var:V> = <var:a> \land <var:u> = <nat:4> * <var:a> ^ <nat:4> + <nat:4> \} \\ <var:u> := <nat:4> + <var:u> * <var:V> \\ \{ <var:V> = <var:a> \land <var:u> = <nat:4> * <var:a> ^ <nat:5> + <nat:4> * <var:a> + <nat:4> \} \end{eqnarray} The application of typical Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:4> ; <var:u> := <var:u> * <var:V> ; <var:u> := <var:u> * <var:V> ; <var:u> := <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:V> = <var:a> }} <def:poly> {{ <var:u> = <nat:4> * <var:a> ^ <nat:5> + <nat:4> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:u> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:u> = <nat:4> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:u> = <nat:4> * <var:a> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:u> = <nat:4> * <var:a> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:u> = <nat:4> * <var:a> ^ <nat:4> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:u> = <nat:4> * <var:a> ^ <nat:5> + <nat:4> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 