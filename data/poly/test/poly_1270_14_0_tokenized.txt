\begin{document} \begin{theorem} Define a list of commands such that \begin{verbatim} <var:V0> := <nat:1> ; <var:V1> := <nat:2> ; <var:V1> := <var:V1> * <var:L> ; <var:V2> := <nat:2> ; <var:V2> := <var:V2> * <var:L> ; <var:V2> := <var:V2> * <var:L> ; <var:V3> := <nat:1> ; <var:V3> := <var:V3> * <var:L> ; <var:V3> := <var:V3> * <var:L> ; <var:V3> := <var:V3> * <var:L> ; <var:O> := <var:V3> ; <var:O> := <var:O> + <var:V2> ; <var:O> := <var:O> + <var:V1> ; <var:O> := <var:O> + <var:V0> \end{verbatim} Allow , given all positive integers $ <var:A> $ , $ <var:L> = <var:A> $ prior to executing the set of instructions it must be that we see $ <var:O> = <nat:1> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for this program is evident through typical Hoare reasoning . Keeping momentum , we see the binding statement \verb | <var:V0> := <nat:1> ; | . This statement moves $ \{ <var:L> = <var:A> \} $ as $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \} $ . This is shown with the assignment inference rule defined by typical Hoare reasoning . Taking a look at the proceeding statement found in our set of instructions , we see the binding command assigning $ <nat:2> $ as $ <var:V1>$ . This forwards the condition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \} $ as the condition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \} $ . Taking a look at the proceeding step seen in the segment of code , the variable assignmet line defining $ <var:V1> * <var:L> $ as $ <var:V1>$ . This line forwards the precondition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \} $ as $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \} $ . Shifting focus toward the following command found in our set of instructions , we have the binding code yielding $ <nat:2> $ to $ <var:V2>$ . This advances $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \} $ into the postcondition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \} $ . Taking a look at the next piece of code found in the set of instructions , we see the variable assignmet line assigning $ <var:V2> * <var:L> $ to $ <var:V2>$ . This advances $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \} $ as the condition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> \} $ . This is given using the assignment scheme defined by usual Hoare techniques . Jumping to the next command in the program , we have the variable update statement \verb | <var:V2> := <var:V2> * <var:L> ; | . This redefines the precondition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> \} $ into the condition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> ^ <nat:2> \} $ . Going to the next step , the assignment command assigning $ <nat:1> $ as $ <var:V3>$ . This transfers $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> ^ <nat:2> \} $ as $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:V3> = <nat:1> \} $ . This is deduced by the assignment inference rule defined by usual Hoare techniques . Observing the next statement seen in our list of instructions , we have the environment update statement giving $ <var:V3> * <var:L> $ into $ <var:V3>$ . This statement redefines the condition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:V3> = <nat:1> \} $ into the condition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:V3> = <nat:1> \cdot <var:A> \} $ . This is shown with the assignment law in standard Hoare reasoning . Moving forward , we have the environment update statement defining $ <var:V3> * <var:L> $ toward $ <var:V3>$ . This transfers the condition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:V3> = <nat:1> \cdot <var:A> \} $ toward $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:V3> = <nat:1> \cdot <var:A> ^ <nat:2> \} $ . This is deduced with the assignment inference rule defined in typical Hoare logic . Moving forward , we have the variable binding code \verb | <var:V3> := <var:V3> * <var:L> ; | . This transfers $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:V3> = <nat:1> \cdot <var:A> ^ <nat:2> \} $ as the postcondition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:V3> = <nat:1> \cdot <var:A> ^ <nat:3> \} $ . Observing the following statement in our code segment , the variable assignmet command \verb | <var:O> := <var:V3> ; | . This transfers the condition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:V3> = <nat:1> \cdot <var:A> ^ <nat:3> \} $ toward the condition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:O> = <nat:1> \cdot <var:A> ^ <nat:3> \} $ . Advancing on , we have the assignment line yielding $ <var:O> + <var:V2> $ to $ <var:O>$ . This line moves the precondition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:V2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:O> = <nat:1> \cdot <var:A> ^ <nat:3> \} $ to the postcondition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:O> = <nat:1> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> \} $ . This is deduced using the assignment law given in typical Hoare reasoning . Moving forward to the next step , the variable assignmet line \verb | <var:O> := <var:O> + <var:V1> ; | . This transfers $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:V1> = <nat:2> \cdot <var:A> \land <var:O> = <nat:1> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> \} $ to $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:O> = <nat:1> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> \} $ . Observing the upcoming command seen in the code segment , the variable binding line defining $ <var:O> + <var:V0$ as $ <var:O>$ . This command moves the precondition $ \{ <var:L> = <var:A> \land <var:V0> = <nat:1> \land <var:O> = <nat:1> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> \} $ as the postcondition $ \{ <var:L> = <var:A> \land <var:O> = <nat:1> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> + <nat:2> \cdot <var:A> + <nat:1> \} $ . This is sound by the assignment scheme found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:L> = <var:A> }} <var:V0> := <nat:1> ; <var:V1> := <nat:2> ; <var:V1> := <var:V1> * <var:L> ; <var:V2> := <nat:2> ; <var:V2> := <var:V2> * <var:L> ; <var:V2> := <var:V2> * <var:L> ; <var:V3> := <nat:1> ; <var:V3> := <var:V3> * <var:L> ; <var:V3> := <var:V3> * <var:L> ; <var:V3> := <var:V3> * <var:L> ; <var:O> := <var:V3> ; <var:O> := <var:O> + <var:V2> ; <var:O> := <var:O> + <var:V1> ; <var:O> := <var:O> + <var:V0> {{ <var:O> = <nat:1> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:2> * <var:A> /\ <var:V2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:2> * <var:A> /\ <var:V2> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:2> * <var:A> /\ <var:V2> = <nat:2> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:2> * <var:A> /\ <var:V2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:V3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:2> * <var:A> /\ <var:V2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:V3> = <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:2> * <var:A> /\ <var:V2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:V3> = <nat:1> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:2> * <var:A> /\ <var:V2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:V3> = <nat:1> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:2> * <var:A> /\ <var:V2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:O> = <nat:1> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:2> * <var:A> /\ <var:O> = <nat:1> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:V0> = <nat:1> /\ <var:O> = <nat:1> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:A> /\ <var:O> = <nat:1> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 