\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:s1> := <var:h> ; <var:s0> := <nat:1> ; <var:s1> := <var:s1> * <nat:2> ; <var:x> := <var:s1> <var:x> := <var:x> + <var:s0> \end{verbatim} Allow --- for all positive numbers $ <var:X> $ --- $ <var:h> = <var:X> $ ahead of evaluating the program , then we see $ <var:x> = <nat:2> \cdot <var:X> + <nat:1> $ once code has exited . \end{theorem} \begin{proof} The proof of our series of commands is shown using typical Hoare reasoning . Stepping through , \[ \begin{tabular} {rcl} \{ <var:h> = <var:X> \} & <var:s1> := <var:h> & \{ <var:h> = <var:X> \land <var:s1> = <var:X> \} \\ \{ <var:h> = <var:X> \land <var:s1> = <var:X> \} & <var:s0> := <nat:1> & \{ <var:h> = <var:X> \land <var:s1> = <var:X> \land <var:s0> = <nat:1> \} \end{tabular} Jumping to the next statement found in our list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:h> = <var:X> \} & <var:s1> := <var:h> & \{ <var:h> = <var:X> \land <var:s1> = <var:X> \} \end{tabular} This is shown using the environment update rule found in standard Hoare techniques . Observing the proceeding piece of code contained in our series of commands , \[ \begin{tabular} {rcl} \{ <var:h> = <var:X> \} & <var:s1> := <var:h> & \{ <var:h> = <var:X> \land <var:s1> = <var:X> \} \end{tabular} This is ensured by the environment update law defined by typical Hoare logic . Stepping through , \[ \begin{tabular} {rcl} \{ <var:h> = <var:X> \} & <var:s1> := <var:h> & \{ <var:h> = <var:X> \land <var:s1> = <var:X> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:h> = <var:X> }} <var:s1> := <var:h> ; <var:s0> := <nat:1> ; <var:s1> := <var:s1> * <nat:2> ; <var:x> := <var:s1> <var:x> := <var:x> + <var:s0> {{ <var:x> = <nat:2> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:s1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:s1> = <var:X> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:s1> = <nat:2> * <var:X> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:s0> = <nat:1> /\ <var:x> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:X> /\ <var:x> = <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 