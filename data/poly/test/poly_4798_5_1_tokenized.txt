\begin{document} \begin{theorem} Take a set of commands as \begin{verbatim} <var:g1> := <var:T> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:4> ; <var:C> := <var:g1> <var:C> := <var:C> + <var:g0> \end{verbatim} Given that $ <var:T> = <var:V> $ ahead of the evaluation of this set of instructions it follows that $ <var:C> = <nat:4> \cdot <var:V> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for our set of instructions can be demonstrated with typical Hoare reasoning . After , \[ \begin{tabular} {rcl} \{ <var:T> = <var:V> \} & <var:g1> := <var:T> & \{ <var:T> = <var:V> \land <var:g1> = <var:V> \} \\ \{ <var:T> = <var:V> \land <var:g1> = <var:V> \} & <var:g0> := <nat:4> & \{ <var:T> = <var:V> \land <var:g1> = <var:V> \land <var:g0> = <nat:4> \} \\ \{ <var:T> = <var:V> \land <var:g1> = <var:V> \land <var:g0> = <nat:4> \} & <var:g1> := <var:g1> * <nat:4> & \{ <var:T> = <var:V> \land <var:g1> = <nat:4> \times <var:V> \land <var:g0> = <nat:4> \} \end{tabular} Moving forward to the next step , \[ \begin{tabular} {rcl} \{ <var:T> = <var:V> \} & <var:g1> := <var:T> & \{ <var:T> = <var:V> \land <var:g1> = <var:V> \} \\ \{ <var:T> = <var:V> \land <var:g1> = <var:V> \} & <var:g0> := <nat:4> & \{ <var:T> = <var:V> \land <var:g1> = <var:V> \land <var:g0> = <nat:4> \} \end{tabular} This is sound through the assignment law given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:T> = <var:V> }} <var:g1> := <var:T> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:4> ; <var:C> := <var:g1> <var:C> := <var:C> + <var:g0> {{ <var:C> = <nat:4> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:g1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:g1> = <var:V> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:g1> = <nat:4> * <var:V> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:g0> = <nat:4> /\ <var:C> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:V> /\ <var:C> = <nat:4> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 