\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W> := <nat:1> ; <var:W> := <nat:4> + <var:W> * <var:r> ; <var:W> := <nat:2> + <var:W> * <var:r> ; <var:W> := <nat:1> + <var:W> * <var:r> ; <var:W> := <nat:4> + <var:W> * <var:r> ; <var:W> := <nat:4> + <var:W> * <var:r> ; <var:W> := <nat:4> + <var:W> * <var:r> ; <var:W> := <nat:1> + <var:W> * <var:r> ; <var:W> := <nat:3> + <var:W> * <var:r> ; <var:W> := <nat:4> + <var:W> * <var:r> ; <var:W> := <nat:4> + <var:W> * <var:r> ; <var:W> := <nat:3> + <var:W> * <var:r> ; <var:W> := <nat:3> + <var:W> * <var:r> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> in \emph{Imp} . Allow that we have $ <var:r> = <var:n> $ , given any whole numbers $ <var:n> $ , ahead of executing this list of commands it must be that we see $ <var:W> = <nat:1> \times <var:n> ^ <nat:12> + <nat:4> \times <var:n> ^ <nat:11> + <nat:2> \times <var:n> ^ <nat:10> + <nat:1> \times <var:n> ^ <nat:9> + <nat:4> \times <var:n> ^ <nat:8> + <nat:4> \times <var:n> ^ <nat:7> + <nat:4> \times <var:n> ^ <nat:6> + <nat:1> \times <var:n> ^ <nat:5> + <nat:3> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:3> $ . \end{theorem} \begin{proof} The proof of the series of commands is done through standard Hoare techniques . Advancing to the next step , we have \verb | { <var:r> = <var:n> } <var:W> := <nat:1> { <var:r> = <var:n> \land <var:W> = <nat:1> } | , \verb | { <var:r> = <var:n> \land <var:W> = <nat:1> } <var:W> := <nat:4> + <var:W> * <var:r> { <var:r> = <var:n> \land <var:W> = <nat:1> \times <var:n> + <nat:4> } | , \verb | { <var:r> = <var:n> \land <var:W> = <nat:1> \times <var:n> + <nat:4> } <var:W> := <nat:2> + <var:W> * <var:r> { <var:r> = <var:n> \land <var:W> = <nat:1> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:2> } | , \verb | { <var:r> = <var:n> \land <var:W> = <nat:1> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:2> } <var:W> := <nat:1> + <var:W> * <var:r> { <var:r> = <var:n> \land <var:W> = <nat:1> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:1> } | and \verb | { <var:r> = <var:n> \land <var:W> = <nat:1> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:1> } <var:W> := <nat:4> + <var:W> * <var:r> { <var:r> = <var:n> \land <var:W> = <nat:1> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:4> } | . This is known to be sound by the variable update inference rule found in Hoare techniques . After , we see \verb | { <var:r> = <var:n> } <var:W> := <nat:1> { <var:r> = <var:n> \land <var:W> = <nat:1> } | , \verb | { <var:r> = <var:n> \land <var:W> = <nat:1> } <var:W> := <nat:4> + <var:W> * <var:r> { <var:r> = <var:n> \land <var:W> = <nat:1> \times <var:n> + <nat:4> } | , \verb | { <var:r> = <var:n> \land <var:W> = <nat:1> \times <var:n> + <nat:4> } <var:W> := <nat:2> + <var:W> * <var:r> { <var:r> = <var:n> \land <var:W> = <nat:1> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:2> } | and \verb | { <var:r> = <var:n> \land <var:W> = <nat:1> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:2> } <var:W> := <nat:1> + <var:W> * <var:r> { <var:r> = <var:n> \land <var:W> = <nat:1> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:1> } | . Next , \verb | { <var:r> = <var:n> } <var:W> := <nat:1> { <var:r> = <var:n> \land <var:W> = <nat:1> } | . This is ensured using the variable assignmet scheme from Hoare techniques . Advancing to the next step , we have \verb | { <var:r> = <var:n> } <var:W> := <nat:1> { <var:r> = <var:n> \land <var:W> = <nat:1> } | and \verb | { <var:r> = <var:n> \land <var:W> = <nat:1> } <var:W> := <nat:4> + <var:W> * <var:r> { <var:r> = <var:n> \land <var:W> = <nat:1> \times <var:n> + <nat:4> } | . Jumping to the next line seen in our series of instructions , we see \verb | { <var:r> = <var:n> } <var:W> := <nat:1> { <var:r> = <var:n> \land <var:W> = <nat:1> } | . This is deduced using the assignment inference rule given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:1> ; <var:W> := <nat:4> + <var:W> * <var:r> ; <var:W> := <nat:2> + <var:W> * <var:r> ; <var:W> := <nat:1> + <var:W> * <var:r> ; <var:W> := <nat:4> + <var:W> * <var:r> ; <var:W> := <nat:4> + <var:W> * <var:r> ; <var:W> := <nat:4> + <var:W> * <var:r> ; <var:W> := <nat:1> + <var:W> * <var:r> ; <var:W> := <nat:3> + <var:W> * <var:r> ; <var:W> := <nat:4> + <var:W> * <var:r> ; <var:W> := <nat:4> + <var:W> * <var:r> ; <var:W> := <nat:3> + <var:W> * <var:r> ; <var:W> := <nat:3> + <var:W> * <var:r> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:r> = <var:n> }} <def:poly> {{ <var:W> = <nat:1> * <var:n> ^ <nat:12> + <nat:4> * <var:n> ^ <nat:11> + <nat:2> * <var:n> ^ <nat:10> + <nat:1> * <var:n> ^ <nat:9> + <nat:4> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:W> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:W> = <nat:1> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:W> = <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:W> = <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:W> = <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:W> = <nat:1> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:W> = <nat:1> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:W> = <nat:1> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:W> = <nat:1> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:W> = <nat:1> * <var:n> ^ <nat:9> + <nat:4> * <var:n> ^ <nat:8> + <nat:2> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:W> = <nat:1> * <var:n> ^ <nat:10> + <nat:4> * <var:n> ^ <nat:9> + <nat:2> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:W> = <nat:1> * <var:n> ^ <nat:11> + <nat:4> * <var:n> ^ <nat:10> + <nat:2> * <var:n> ^ <nat:9> + <nat:1> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:W> = <nat:1> * <var:n> ^ <nat:12> + <nat:4> * <var:n> ^ <nat:11> + <nat:2> * <var:n> ^ <nat:10> + <nat:1> * <var:n> ^ <nat:9> + <nat:4> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 