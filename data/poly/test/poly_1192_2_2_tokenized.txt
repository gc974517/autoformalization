\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g> := <nat:3> ; <var:g> := <nat:1> + <var:g> * <var:b> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:b> = <var:X> $ before evaluating the set of instructions , it holds that we have $ <var:g> = <nat:3> \times <var:X> + <nat:1> $ once segment of code exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:X> \} \\ <var:g> := <nat:3> ; \\ \{ <var:b> = <var:X> \land <var:g> = <nat:3> \} \\ <var:g> := <nat:1> + <var:g> * <var:b> \\ \{ <var:b> = <var:X> \land <var:g> = <nat:3> * <var:X> + <nat:1> \} \end{eqnarray} Applying standard Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:3> ; <var:g> := <nat:1> + <var:g> * <var:b> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:b> = <var:X> }} <def:poly> {{ <var:g> = <nat:3> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:g> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:g> = <nat:3> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 