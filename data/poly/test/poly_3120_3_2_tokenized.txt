\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:q> := <nat:2> ; <var:q> := <var:q> * <var:F> ; <var:q> := <nat:2> + <var:q> * <var:F> \end{verbatim} Allow that $ <var:F> = <var:H> $ ahead of evaluating this code , it must be that we have $ <var:q> = <nat:2> \cdot <var:H> ^ <nat:2> + <nat:2> $ when list of instructions has finished executing . \end{theorem} \begin{proof} The flow of logic for the program can be given with standard Hoare logic . Moving onward , \verb | { <var:F> = <var:H> } <var:q> := <nat:2> { <var:F> = <var:H> \land <var:q> = <nat:2> } | . This is guaranteed with the binding inference rule obtained from Hoare logic . Honing in on the subsequent bit of code contained in the list of commands , \verb | { <var:F> = <var:H> } <var:q> := <nat:2> { <var:F> = <var:H> \land <var:q> = <nat:2> } | . This is given using the variable assignmet scheme of Hoare techniques . Jumping to the subsequent piece of code contained in the set of instructions , \verb | { <var:F> = <var:H> } <var:q> := <nat:2> { <var:F> = <var:H> \land <var:q> = <nat:2> } | . This is shown by the rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:F> = <var:H> }} <var:q> := <nat:2> ; <var:q> := <var:q> * <var:F> ; <var:q> := <nat:2> + <var:q> * <var:F> {{ <var:q> = <nat:2> * <var:H> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:q> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:q> = <nat:2> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:H> /\ <var:q> = <nat:2> * <var:H> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 