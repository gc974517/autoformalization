\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as follows \begin{verbatim} <var:R> := <nat:2> ; <var:R> := <nat:3> + <var:R> * <var:N> ; <var:R> := <nat:3> + <var:R> * <var:N> ; <var:R> := <nat:3> + <var:R> * <var:N> ; <var:R> := <nat:1> + <var:R> * <var:N> ; <var:R> := <nat:3> + <var:R> * <var:N> \end{verbatim} Allowing $ <var:N> = <var:y> $ --- for some $ <var:y> \in \mathbb{Z}^+ $ --- before running our series of commands it must be that we see $ <var:R> = <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:3> $ after series of commands has finished . \end{theorem} \begin{proof} The proof of this set of commands is done through standard Hoare techniques . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:N> = <var:y> \} & <var:R> := <nat:2> & \{ <var:N> = <var:y> \land <var:R> = <nat:2> \} \\ \{ <var:N> = <var:y> \land <var:R> = <nat:2> \} & <var:R> := <nat:3> + <var:R> * <var:N> & \{ <var:N> = <var:y> \land <var:R> = <nat:2> \cdot <var:y> + <nat:3> \} \\ \{ <var:N> = <var:y> \land <var:R> = <nat:2> \cdot <var:y> + <nat:3> \} & <var:R> := <nat:3> + <var:R> * <var:N> & \{ <var:N> = <var:y> \land <var:R> = <nat:2> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> + <nat:3> \} \\ \{ <var:N> = <var:y> \land <var:R> = <nat:2> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> + <nat:3> \} & <var:R> := <nat:3> + <var:R> * <var:N> & \{ <var:N> = <var:y> \land <var:R> = <nat:2> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> + <nat:3> \} \\ \{ <var:N> = <var:y> \land <var:R> = <nat:2> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> + <nat:3> \} & <var:R> := <nat:1> + <var:R> * <var:N> & \{ <var:N> = <var:y> \land <var:R> = <nat:2> \cdot <var:y> ^ <nat:4> + <nat:3> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> + <nat:1> \} \end{tabular} This is sound by the variable assignmet inference rule of Hoare logic . Jumping to the proceeding step found in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:y> \} & <var:R> := <nat:2> & \{ <var:N> = <var:y> \land <var:R> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:N> = <var:y> }} <var:R> := <nat:2> ; <var:R> := <nat:3> + <var:R> * <var:N> ; <var:R> := <nat:3> + <var:R> * <var:N> ; <var:R> := <nat:3> + <var:R> * <var:N> ; <var:R> := <nat:1> + <var:R> * <var:N> ; <var:R> := <nat:3> + <var:R> * <var:N> {{ <var:R> = <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:R> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:R> = <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:R> = <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:R> = <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:R> = <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:y> /\ <var:R> = <nat:2> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 