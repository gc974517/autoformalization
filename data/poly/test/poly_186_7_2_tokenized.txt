\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} as \begin{verbatim} <var:I> := <nat:3> ; <var:I> := <nat:3> + <var:I> * <var:a> ; <var:I> := <nat:2> + <var:I> * <var:a> ; <var:I> := <nat:2> + <var:I> * <var:a> ; <var:I> := <nat:2> + <var:I> * <var:a> ; <var:I> := <nat:3> + <var:I> * <var:a> ; <var:I> := <nat:2> + <var:I> * <var:a> \end{verbatim} Given --- letting integers $ <var:K> $ --- $ <var:a> = <var:K> $ before the execution of our list of instructions it holds that we see $ <var:I> = <nat:3> \times <var:K> ^ <nat:6> + <nat:3> \times <var:K> ^ <nat:5> + <nat:2> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + <nat:2> $ after list of commands is done executing . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions is done with usual Hoare reasoning . Moving forward to the next step , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:K> \} & <var:I> := <nat:3> & \{ <var:a> = <var:K> \land <var:I> = <nat:3> \} \\ \{ <var:a> = <var:K> \land <var:I> = <nat:3> \} & <var:I> := <nat:3> + <var:I> * <var:a> & \{ <var:a> = <var:K> \land <var:I> = <nat:3> \times <var:K> + <nat:3> \} \\ \{ <var:a> = <var:K> \land <var:I> = <nat:3> \times <var:K> + <nat:3> \} & <var:I> := <nat:2> + <var:I> * <var:a> & \{ <var:a> = <var:K> \land <var:I> = <nat:3> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + <nat:2> \} \\ \{ <var:a> = <var:K> \land <var:I> = <nat:3> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + <nat:2> \} & <var:I> := <nat:2> + <var:I> * <var:a> & \{ <var:a> = <var:K> \land <var:I> = <nat:3> \times <var:K> ^ <nat:3> + <nat:3> \times <var:K> ^ <nat:2> + <nat:2> \times <var:K> + <nat:2> \} \end{tabular} This is known to be sound with the scheme of typical Hoare techniques . Focusing on the proceeding step in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:K> \} & <var:I> := <nat:3> & \{ <var:a> = <var:K> \land <var:I> = <nat:3> \} \end{tabular} Moving forward , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:K> \} & <var:I> := <nat:3> & \{ <var:a> = <var:K> \land <var:I> = <nat:3> \} \\ \{ <var:a> = <var:K> \land <var:I> = <nat:3> \} & <var:I> := <nat:3> + <var:I> * <var:a> & \{ <var:a> = <var:K> \land <var:I> = <nat:3> \times <var:K> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:a> = <var:K> }} <var:I> := <nat:3> ; <var:I> := <nat:3> + <var:I> * <var:a> ; <var:I> := <nat:2> + <var:I> * <var:a> ; <var:I> := <nat:2> + <var:I> * <var:a> ; <var:I> := <nat:2> + <var:I> * <var:a> ; <var:I> := <nat:3> + <var:I> * <var:a> ; <var:I> := <nat:2> + <var:I> * <var:a> {{ <var:I> = <nat:3> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:I> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:I> = <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:I> = <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:I> = <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:I> = <nat:3> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:I> = <nat:3> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:K> /\ <var:I> = <nat:3> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 