\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:h> ; <var:e2> := <var:e1> * <var:h> ; <var:e0> := <nat:3> ; <var:e2> := <var:e2> * <nat:3> ; <var:T> := <var:e2> <var:T> := <var:T> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:h> = <var:O> $ ahead of evaluating the segment of code , it follows that we have $ <var:T> = <nat:3> * <var:O> ^ <nat:2> + <nat:3> $ after set of commands has exited . \end{theorem} \begin{proof} The proof of the list of instructions is evident using Hoare logic . Shifting focus toward the proceeding line of code found in our list of instructions , we have the assignment code \verb | <var:e1> := <var:h> ; | . This transfers the precondition $ \{ <var:h> = <var:O> \} $ as the condition $ \{ <var:h> = <var:O> \land <var:e1> = <var:O> \} $ . This is deduced through the assignment rule defined in typical Hoare reasoning . Taking another step toward the proceeding line in our set of instructions , we see the command \verb | <var:e2> := <var:e1> * <var:h> ; | . This statement moves $ \{ <var:h> = <var:O> \land <var:e1> = <var:O> \} $ toward $ \{ <var:h> = <var:O> \land <var:e1> = <var:O> \land <var:e2> = <var:O> ^ <nat:2> \} $ . After , we see the variable binding line giving $ <nat:3> $ into $ <var:e0>$ . This transfers the precondition $ \{ <var:h> = <var:O> \land <var:e1> = <var:O> \land <var:e2> = <var:O> ^ <nat:2> \} $ to the condition $ \{ <var:h> = <var:O> \land <var:e1> = <var:O> \land <var:e2> = <var:O> ^ <nat:2> \land <var:e0> = <nat:3> \} $ . This is deduced with the assignment inference rule defined by typical Hoare logic . Taking another step toward the next bit of code seen in the set of instructions , we have the variable update statement \verb | <var:e2> := <var:e2> * <nat:3> ; | . This code forwards the condition $ \{ <var:h> = <var:O> \land <var:e1> = <var:O> \land <var:e2> = <var:O> ^ <nat:2> \land <var:e0> = <nat:3> \} $ into the postcondition $ \{ <var:h> = <var:O> \land <var:e1> = <var:O> \land <var:e2> = <nat:3> \times <var:O> ^ <nat:2> \land <var:e0> = <nat:3> \} $ . Shifting focus toward the proceeding step in the series of commands , we see the variable assignmet statement \verb | <var:T> := <var:e2> | . This statement moves $ \{ <var:h> = <var:O> \land <var:e1> = <var:O> \land <var:e2> = <nat:3> \times <var:O> ^ <nat:2> \land <var:e0> = <nat:3> \} $ as the condition $ \{ <var:h> = <var:O> \land <var:e1> = <var:O> \land <var:e0> = <nat:3> \land <var:T> = <nat:3> \times <var:O> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment law from Hoare reasoning . Advancing , the variable assignmet command \verb | <var:T> := <var:T> + <var:e0> | . This transfers $ \{ <var:h> = <var:O> \land <var:e1> = <var:O> \land <var:e0> = <nat:3> \land <var:T> = <nat:3> \times <var:O> ^ <nat:2> \} $ toward $ \{ <var:h> = <var:O> \land <var:T> = <nat:3> \times <var:O> ^ <nat:2> + <nat:3> \} $ . This is shown through the assignment inference rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e1> := <var:h> ; <var:e2> := <var:e1> * <var:h> ; <var:e0> := <nat:3> ; <var:e2> := <var:e2> * <nat:3> ; <var:T> := <var:e2> <var:T> := <var:T> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:h> = <var:O> }} <def:poly> {{ <var:T> = <nat:3> * <var:O> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e1> = <var:O> /\ <var:e2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e1> = <var:O> /\ <var:e2> = <var:O> ^ <nat:2> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e1> = <var:O> /\ <var:e2> = <nat:3> * <var:O> ^ <nat:2> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:e1> = <var:O> /\ <var:e0> = <nat:3> /\ <var:T> = <nat:3> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:O> /\ <var:T> = <nat:3> * <var:O> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 