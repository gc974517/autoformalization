\begin{document} \begin{theorem} We define the following segment of code such that \begin{verbatim} <var:e0> := <nat:2> ; <var:F> := <var:e0> \end{verbatim} Allowing , given all positive coefficients $ <var:b> $ , that $ <var:D> = <var:b> $ before running our code segment , then we have $ <var:F> = <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:b> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:D> = <var:b> \land <var:e0> = <nat:2> \} \\ <var:F> := <var:e0> \\ \{ <var:D> = <var:b> \land <var:F> = <nat:2> \} \end{eqnarray} Applying usual Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:D> = <var:b> }} <var:e0> := <nat:2> ; <var:F> := <var:e0> {{ <var:F> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:F> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 