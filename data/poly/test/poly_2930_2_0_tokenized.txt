\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:6> ; <var:g> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> in \emph{Imp} . Assume $ <var:W> = <var:i> $ , letting $ <var:i> \in \mathbb{Z}^+ $ , ahead of interpreting the list of instructions , it must be that we see $ <var:g> = <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands is shown using Hoare reasoning . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:W> = <var:i> \} & <var:P0> := <nat:6> & \{ <var:W> = <var:i> \land <var:P0> = <nat:6> \} \end{tabular} Now , \[ \begin{tabular} {rcl} \{ <var:W> = <var:i> \} & <var:P0> := <nat:6> & \{ <var:W> = <var:i> \land <var:P0> = <nat:6> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:6> ; <var:g> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:W> = <var:i> }} <def:poly> {{ <var:g> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:g> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 