\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F> := <nat:4> ; <var:F> := <nat:1> + <var:F> * <var:l> ; <var:F> := <nat:1> + <var:F> * <var:l> ; <var:F> := <nat:1> + <var:F> * <var:l> ; <var:F> := <nat:3> + <var:F> * <var:l> ; <var:F> := <nat:1> + <var:F> * <var:l> ; <var:F> := <nat:3> + <var:F> * <var:l> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:l> = <var:D> $ ahead of the evaluation of this code , it follows that we have $ <var:F> = <nat:4> \times <var:D> ^ <nat:6> + <nat:1> \times <var:D> ^ <nat:5> + <nat:1> \times <var:D> ^ <nat:4> + <nat:1> \times <var:D> ^ <nat:3> + <nat:3> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:3> $ . \end{theorem} \begin{proof} Using standard Hoare logic produces : \begin{eqnarray} \{ <var:l> = <var:D> \} \\ <var:F> := <nat:4> ; \\ \{ <var:l> = <var:D> \land <var:F> = <nat:4> \} \\ <var:F> := <nat:1> + <var:F> * <var:l> ; \\ \{ <var:l> = <var:D> \land <var:F> = <nat:4> \cdot <var:D> + <nat:1> \} \\ <var:F> := <nat:1> + <var:F> * <var:l> ; \\ \{ <var:l> = <var:D> \land <var:F> = <nat:4> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:1> \} \\ <var:F> := <nat:1> + <var:F> * <var:l> ; \\ \{ <var:l> = <var:D> \land <var:F> = <nat:4> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:1> \} \\ <var:F> := <nat:3> + <var:F> * <var:l> ; \\ \{ <var:l> = <var:D> \land <var:F> = <nat:4> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:3> \} \\ <var:F> := <nat:1> + <var:F> * <var:l> ; \\ \{ <var:l> = <var:D> \land <var:F> = <nat:4> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> + <nat:1> \} \\ <var:F> := <nat:3> + <var:F> * <var:l> \\ \{ <var:l> = <var:D> \land <var:F> = <nat:4> \cdot <var:D> ^ <nat:6> + <nat:1> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:3> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:3> \} \end{eqnarray} Thus , the list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:F> := <nat:4> ; <var:F> := <nat:1> + <var:F> * <var:l> ; <var:F> := <nat:1> + <var:F> * <var:l> ; <var:F> := <nat:1> + <var:F> * <var:l> ; <var:F> := <nat:3> + <var:F> * <var:l> ; <var:F> := <nat:1> + <var:F> * <var:l> ; <var:F> := <nat:3> + <var:F> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:l> = <var:D> }} <def:poly> {{ <var:F> = <nat:4> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:F> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:F> = <nat:4> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:F> = <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:F> = <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:F> = <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:F> = <nat:4> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:D> /\ <var:F> = <nat:4> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 