\begin{document} \begin{theorem} Take the following set of commands as follows \begin{verbatim} <var:e1> := <var:I> ; <var:e2> := <var:e1> * <var:I> ; <var:e3> := <var:e2> * <var:I> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:5> ; <var:e2> := <var:e2> * <nat:9> ; <var:e3> := <var:e3> * <nat:1> ; <var:t> := <var:e3> <var:t> := <var:t> + <var:e2> <var:t> := <var:t> + <var:e1> <var:t> := <var:t> + <var:e0> \end{verbatim} Assume that $ <var:I> = <var:D> $ ( given any positive integer coefficients $ <var:D> $ ) prior to running this code segment it holds that we have $ <var:t> = <nat:1> \cdot <var:D> ^ <nat:3> + <nat:9> \cdot <var:D> ^ <nat:2> + <nat:5> \cdot <var:D> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:I> = <var:D> \} \\ <var:e1> := <var:I> ; \\ \{ <var:I> = <var:D> \land <var:e1> = <var:D> \} \\ <var:e2> := <var:e1> * <var:I> ; \\ \{ <var:I> = <var:D> \land <var:e1> = <var:D> \land <var:e2> = <var:D> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:I> ; \\ \{ <var:I> = <var:D> \land <var:e1> = <var:D> \land <var:e2> = <var:D> ^ <nat:2> \land <var:e3> = <var:D> ^ <nat:3> \} \\ <var:e0> := <nat:4> ; \\ \{ <var:I> = <var:D> \land <var:e1> = <var:D> \land <var:e2> = <var:D> ^ <nat:2> \land <var:e3> = <var:D> ^ <nat:3> \land <var:e0> = <nat:4> \} \\ <var:e1> := <var:e1> * <nat:5> ; \\ \{ <var:I> = <var:D> \land <var:e1> = <nat:5> \times <var:D> \land <var:e2> = <var:D> ^ <nat:2> \land <var:e3> = <var:D> ^ <nat:3> \land <var:e0> = <nat:4> \} \\ <var:e2> := <var:e2> * <nat:9> ; \\ \{ <var:I> = <var:D> \land <var:e1> = <nat:5> \times <var:D> \land <var:e2> = <nat:9> \times <var:D> ^ <nat:2> \land <var:e3> = <var:D> ^ <nat:3> \land <var:e0> = <nat:4> \} \\ <var:e3> := <var:e3> * <nat:1> ; \\ \{ <var:I> = <var:D> \land <var:e1> = <nat:5> \times <var:D> \land <var:e2> = <nat:9> \times <var:D> ^ <nat:2> \land <var:e3> = <nat:1> \times <var:D> ^ <nat:3> \land <var:e0> = <nat:4> \} \\ <var:t> := <var:e3> \\ \{ <var:I> = <var:D> \land <var:e1> = <nat:5> \times <var:D> \land <var:e2> = <nat:9> \times <var:D> ^ <nat:2> \land <var:e0> = <nat:4> \land <var:t> = <nat:1> \times <var:D> ^ <nat:3> \} \\ <var:t> := <var:t> + <var:e2> \\ \{ <var:I> = <var:D> \land <var:e1> = <nat:5> \times <var:D> \land <var:e0> = <nat:4> \land <var:t> = <nat:1> \times <var:D> ^ <nat:3> + <nat:9> \times <var:D> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:e1> \\ \{ <var:I> = <var:D> \land <var:e0> = <nat:4> \land <var:t> = <nat:1> \times <var:D> ^ <nat:3> + <nat:9> \times <var:D> ^ <nat:2> + <nat:5> \times <var:D> \} \\ <var:t> := <var:t> + <var:e0> \\ \{ <var:I> = <var:D> \land <var:t> = <nat:1> \times <var:D> ^ <nat:3> + <nat:9> \times <var:D> ^ <nat:2> + <nat:5> \times <var:D> + <nat:4> \} \end{eqnarray} Thus , the segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:I> = <var:D> }} <var:e1> := <var:I> ; <var:e2> := <var:e1> * <var:I> ; <var:e3> := <var:e2> * <var:I> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:5> ; <var:e2> := <var:e2> * <nat:9> ; <var:e3> := <var:e3> * <nat:1> ; <var:t> := <var:e3> <var:t> := <var:t> + <var:e2> <var:t> := <var:t> + <var:e1> <var:t> := <var:t> + <var:e0> {{ <var:t> = <nat:1> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:e1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:e1> = <var:D> /\ <var:e2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:e1> = <var:D> /\ <var:e2> = <var:D> ^ <nat:2> /\ <var:e3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:e1> = <var:D> /\ <var:e2> = <var:D> ^ <nat:2> /\ <var:e3> = <var:D> ^ <nat:3> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:e1> = <nat:5> * <var:D> /\ <var:e2> = <var:D> ^ <nat:2> /\ <var:e3> = <var:D> ^ <nat:3> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:e1> = <nat:5> * <var:D> /\ <var:e2> = <nat:9> * <var:D> ^ <nat:2> /\ <var:e3> = <var:D> ^ <nat:3> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:e1> = <nat:5> * <var:D> /\ <var:e2> = <nat:9> * <var:D> ^ <nat:2> /\ <var:e3> = <nat:1> * <var:D> ^ <nat:3> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:e1> = <nat:5> * <var:D> /\ <var:e2> = <nat:9> * <var:D> ^ <nat:2> /\ <var:e0> = <nat:4> /\ <var:t> = <nat:1> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:e1> = <nat:5> * <var:D> /\ <var:e0> = <nat:4> /\ <var:t> = <nat:1> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:e0> = <nat:4> /\ <var:t> = <nat:1> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:D> /\ <var:t> = <nat:1> * <var:D> ^ <nat:3> + <nat:9> * <var:D> ^ <nat:2> + <nat:5> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 