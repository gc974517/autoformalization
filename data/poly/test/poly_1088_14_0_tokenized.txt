\begin{document} \begin{theorem} Define a program in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:3> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:A> ; <var:e2> := <nat:6> ; <var:e2> := <var:e2> * <var:A> ; <var:e2> := <var:e2> * <var:A> ; <var:e3> := <nat:4> ; <var:e3> := <var:e3> * <var:A> ; <var:e3> := <var:e3> * <var:A> ; <var:e3> := <var:e3> * <var:A> ; <var:Z> := <var:e3> ; <var:Z> := <var:Z> + <var:e2> ; <var:Z> := <var:Z> + <var:e1> ; <var:Z> := <var:Z> + <var:e0> \end{verbatim} Given ( taking positive numbers $ <var:N> $ ) it to be that $ <var:A> = <var:N> $ ahead of the evaluation of the set of commands it holds that we have $ <var:Z> = <nat:4> \times <var:N> ^ <nat:3> + <nat:6> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:N> \} \\ <var:e0> := <nat:3> ; \\ \{ <var:A> = <var:N> \land <var:e0> = <nat:3> \} \\ <var:e1> := <nat:3> ; \\ \{ <var:A> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \} \\ <var:e1> := <var:e1> * <var:A> ; \\ \{ <var:A> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> * <var:N> \} \\ <var:e2> := <nat:6> ; \\ \{ <var:A> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> * <var:N> \land <var:e2> = <nat:6> \} \\ <var:e2> := <var:e2> * <var:A> ; \\ \{ <var:A> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> * <var:N> \land <var:e2> = <nat:6> * <var:N> \} \\ <var:e2> := <var:e2> * <var:A> ; \\ \{ <var:A> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> * <var:N> \land <var:e2> = <nat:6> * <var:N> ^ <nat:2> \} \\ <var:e3> := <nat:4> ; \\ \{ <var:A> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> * <var:N> \land <var:e2> = <nat:6> * <var:N> ^ <nat:2> \land <var:e3> = <nat:4> \} \\ <var:e3> := <var:e3> * <var:A> ; \\ \{ <var:A> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> * <var:N> \land <var:e2> = <nat:6> * <var:N> ^ <nat:2> \land <var:e3> = <nat:4> * <var:N> \} \\ <var:e3> := <var:e3> * <var:A> ; \\ \{ <var:A> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> * <var:N> \land <var:e2> = <nat:6> * <var:N> ^ <nat:2> \land <var:e3> = <nat:4> * <var:N> ^ <nat:2> \} \\ <var:e3> := <var:e3> * <var:A> ; \\ \{ <var:A> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> * <var:N> \land <var:e2> = <nat:6> * <var:N> ^ <nat:2> \land <var:e3> = <nat:4> * <var:N> ^ <nat:3> \} \\ <var:Z> := <var:e3> ; \\ \{ <var:A> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> * <var:N> \land <var:e2> = <nat:6> * <var:N> ^ <nat:2> \land <var:Z> = <nat:4> * <var:N> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:e2> ; \\ \{ <var:A> = <var:N> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> * <var:N> \land <var:Z> = <nat:4> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:e1> ; \\ \{ <var:A> = <var:N> \land <var:e0> = <nat:3> \land <var:Z> = <nat:4> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> + <nat:3> * <var:N> \} \\ <var:Z> := <var:Z> + <var:e0> \\ \{ <var:A> = <var:N> \land <var:Z> = <nat:4> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> \} \end{eqnarray} The application of usual Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:A> = <var:N> }} <var:e0> := <nat:3> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:A> ; <var:e2> := <nat:6> ; <var:e2> := <var:e2> * <var:A> ; <var:e2> := <var:e2> * <var:A> ; <var:e3> := <nat:4> ; <var:e3> := <var:e3> * <var:A> ; <var:e3> := <var:e3> * <var:A> ; <var:e3> := <var:e3> * <var:A> ; <var:Z> := <var:e3> ; <var:Z> := <var:Z> + <var:e2> ; <var:Z> := <var:Z> + <var:e1> ; <var:Z> := <var:Z> + <var:e0> {{ <var:Z> = <nat:4> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:N> /\ <var:e2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:N> /\ <var:e2> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:N> /\ <var:e2> = <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:N> /\ <var:e2> = <nat:6> * <var:N> ^ <nat:2> /\ <var:e3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:N> /\ <var:e2> = <nat:6> * <var:N> ^ <nat:2> /\ <var:e3> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:N> /\ <var:e2> = <nat:6> * <var:N> ^ <nat:2> /\ <var:e3> = <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:N> /\ <var:e2> = <nat:6> * <var:N> ^ <nat:2> /\ <var:e3> = <nat:4> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:N> /\ <var:e2> = <nat:6> * <var:N> ^ <nat:2> /\ <var:Z> = <nat:4> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:N> /\ <var:Z> = <nat:4> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:e0> = <nat:3> /\ <var:Z> = <nat:4> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> + <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:N> /\ <var:Z> = <nat:4> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 