\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:4> ; <var:n> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:k> = <var:g> $ ahead of evaluating our code , it holds that $ <var:n> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:g> \} \\ <var:b0> := <nat:4> ; \\ \{ <var:k> = <var:g> \land <var:b0> = <nat:4> \} \\ <var:n> := <var:b0> \\ \{ <var:k> = <var:g> \land <var:n> = <nat:4> \} \end{eqnarray} Applying typical Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:4> ; <var:n> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:k> = <var:g> }} <def:poly> {{ <var:n> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:g> /\ <var:n> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 