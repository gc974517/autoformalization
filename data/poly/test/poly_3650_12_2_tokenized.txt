\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as \begin{verbatim} <var:K> := <nat:4> ; <var:K> := <nat:2> + <var:K> * <var:H> ; <var:K> := <nat:4> + <var:K> * <var:H> ; <var:K> := <nat:1> + <var:K> * <var:H> ; <var:K> := <var:K> * <var:H> ; <var:K> := <nat:4> + <var:K> * <var:H> ; <var:K> := <nat:4> + <var:K> * <var:H> ; <var:K> := <var:K> * <var:H> ; <var:K> := <nat:4> + <var:K> * <var:H> ; <var:K> := <nat:1> + <var:K> * <var:H> ; <var:K> := <nat:2> + <var:K> * <var:H> ; <var:K> := <nat:2> + <var:K> * <var:H> \end{verbatim} Assuming , given natural numbers $ <var:i> $ , it to be that $ <var:H> = <var:i> $ prior to the execution of our list of commands , it must be that we have $ <var:K> = <nat:4> * <var:i> ^ <nat:11> + <nat:2> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:9> + <nat:1> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> $ when set of instructions has finished executing . \end{theorem} \begin{proof} The argument for the list of instructions is given by typical Hoare reasoning . Looking at the subsequent command in our series of instructions , we see the variable update statement \verb | <var:K> := <nat:4> ; | . This transfers the condition $ \{ <var:H> = <var:i> \} $ as the postcondition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> \} $ . This is known to be sound by the assignment scheme found in usual Hoare logic . Considering the proceeding statement seen in the set of instructions , we see the variable update code letting $ <nat:2> + <var:K> * <var:H> $ as $ <var:K>$ . This code redefines $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> \} $ as the condition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> + <nat:2> \} $ . This is guaranteed using the assignment inference rule given in standard Hoare reasoning . Taking another step toward the subsequent line of code seen in our series of instructions , we see the code \verb | <var:K> := <nat:4> + <var:K> * <var:H> ; | . This statement advances the precondition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> + <nat:2> \} $ toward $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:4> \} $ . This is shown to be logically sound by the assignment inference rule defined in standard Hoare techniques . Following , the binding line yielding $ <nat:1> + <var:K> * <var:H> $ toward $ <var:K>$ . This command redefines $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:4> \} $ as the postcondition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:1> \} $ . This is given using the assignment law defined in standard Hoare logic . Shifting focus toward the upcoming step found in the list of instructions , we have the assignment line binding $ <var:K> * <var:H> $ as $ <var:K>$ . This command transfers $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:1> \} $ as the postcondition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + \} $ . Moving on to the upcoming step in the list of instructions , we have the variable update statement defining $ <nat:4> + <var:K> * <var:H> $ to $ <var:K>$ . This moves the precondition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + \} $ into the postcondition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> \} $ . Advancing , we have the line binding $ <nat:4> + <var:K> * <var:H> $ into $ <var:K>$ . This command forwards the condition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> \} $ as the postcondition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> + <nat:4> \} $ . Looking at the proceeding line of code in our list of instructions , we have the binding line giving $ <var:K> * <var:H> $ into $ <var:K>$ . This moves the precondition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> + <nat:4> \} $ toward the condition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + \} $ . Now , we see the code yielding $ <nat:4> + <var:K> * <var:H> $ to $ <var:K>$ . This command redefines the precondition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + \} $ toward the postcondition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> \} $ . This is deduced with the assignment scheme from standard Hoare techniques . Immediately after , we see the variable update command yielding $ <nat:1> + <var:K> * <var:H> $ toward $ <var:K>$ . This command moves the condition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> \} $ into $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:1> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> + <nat:1> \} $ . This is sound by the assignment scheme found in standard Hoare logic . Looking at the following statement found in the set of commands , the command \verb | <var:K> := <nat:2> + <var:K> * <var:H> ; | . This redefines $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:1> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> + <nat:1> \} $ to $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:10> + <nat:2> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:8> + <nat:1> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:2> \} $ . This is shown with the assignment scheme given in standard Hoare logic . Moving onward , the environment update statement \verb | <var:K> := <nat:2> + <var:K> * <var:H> | . This code advances the precondition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:10> + <nat:2> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:8> + <nat:1> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:2> \} $ toward the condition $ \{ <var:H> = <var:i> \land <var:K> = <nat:4> * <var:i> ^ <nat:11> + <nat:2> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:9> + <nat:1> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:H> = <var:i> }} <var:K> := <nat:4> ; <var:K> := <nat:2> + <var:K> * <var:H> ; <var:K> := <nat:4> + <var:K> * <var:H> ; <var:K> := <nat:1> + <var:K> * <var:H> ; <var:K> := <var:K> * <var:H> ; <var:K> := <nat:4> + <var:K> * <var:H> ; <var:K> := <nat:4> + <var:K> * <var:H> ; <var:K> := <var:K> * <var:H> ; <var:K> := <nat:4> + <var:K> * <var:H> ; <var:K> := <nat:1> + <var:K> * <var:H> ; <var:K> := <nat:2> + <var:K> * <var:H> ; <var:K> := <nat:2> + <var:K> * <var:H> {{ <var:K> = <nat:4> * <var:i> ^ <nat:11> + <nat:2> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:9> + <nat:1> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:K> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:K> = <nat:4> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:K> = <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:K> = <nat:4> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:K> = <nat:4> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:K> = <nat:4> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:K> = <nat:4> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:4> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:K> = <nat:4> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:K> = <nat:4> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:K> = <nat:4> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:1> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:K> = <nat:4> * <var:i> ^ <nat:10> + <nat:2> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:8> + <nat:1> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:i> /\ <var:K> = <nat:4> * <var:i> ^ <nat:11> + <nat:2> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:9> + <nat:1> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 