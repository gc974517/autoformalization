\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:e1> := <var:P> ; <var:e2> := <var:e1> * <var:P> ; <var:e3> := <var:e2> * <var:P> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:1> ; <var:e3> := <var:e3> * <nat:3> ; <var:q> := <var:e3> <var:q> := <var:q> + <var:e1> <var:q> := <var:q> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Let the following program <def:poly> in \emph{Imp} . Assuming it to be that $ <var:P> = <var:Q> $ prior to evaluating this code it must be that we have $ <var:q> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> + <nat:2> $ . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:P> = <var:Q> \} \\ <var:e1> := <var:P> ; \\ \{ <var:P> = <var:Q> \land <var:e1> = <var:Q> \} \\ <var:e2> := <var:e1> * <var:P> ; \\ \{ <var:P> = <var:Q> \land <var:e1> = <var:Q> \land <var:e2> = <var:Q> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:P> ; \\ \{ <var:P> = <var:Q> \land <var:e1> = <var:Q> \land <var:e2> = <var:Q> ^ <nat:2> \land <var:e3> = <var:Q> ^ <nat:3> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:P> = <var:Q> \land <var:e1> = <var:Q> \land <var:e2> = <var:Q> ^ <nat:2> \land <var:e3> = <var:Q> ^ <nat:3> \land <var:e0> = <nat:2> \} \\ <var:e1> := <var:e1> * <nat:1> ; \\ \{ <var:P> = <var:Q> \land <var:e1> = <nat:1> \cdot <var:Q> \land <var:e2> = <var:Q> ^ <nat:2> \land <var:e3> = <var:Q> ^ <nat:3> \land <var:e0> = <nat:2> \} \\ <var:e3> := <var:e3> * <nat:3> ; \\ \{ <var:P> = <var:Q> \land <var:e1> = <nat:1> \cdot <var:Q> \land <var:e2> = <var:Q> ^ <nat:2> \land <var:e3> = <nat:3> \cdot <var:Q> ^ <nat:3> \land <var:e0> = <nat:2> \} \\ <var:q> := <var:e3> \\ \{ <var:P> = <var:Q> \land <var:e1> = <nat:1> \cdot <var:Q> \land <var:e2> = <var:Q> ^ <nat:2> \land <var:e0> = <nat:2> \land <var:q> = <nat:3> \cdot <var:Q> ^ <nat:3> \} \end{eqnarray} Continuing running this set of instructions produces : \begin{eqnarray} <var:q> := <var:q> + <var:e1> \\ \{ <var:P> = <var:Q> \land <var:e0> = <nat:2> \land <var:q> = <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> \} \\ <var:q> := <var:q> + <var:e0> \\ \{ <var:P> = <var:Q> \land <var:q> = <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> + <nat:2> \} \end{eqnarray} As a consequence , our list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:P> ; <var:e2> := <var:e1> * <var:P> ; <var:e3> := <var:e2> * <var:P> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:1> ; <var:e3> := <var:e3> * <nat:3> ; <var:q> := <var:e3> <var:q> := <var:q> + <var:e1> <var:q> := <var:q> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:P> = <var:Q> }} <def:poly> {{ <var:q> = <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:e1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:e1> = <var:Q> /\ <var:e2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:e1> = <var:Q> /\ <var:e2> = <var:Q> ^ <nat:2> /\ <var:e3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:e1> = <var:Q> /\ <var:e2> = <var:Q> ^ <nat:2> /\ <var:e3> = <var:Q> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:e1> = <nat:1> * <var:Q> /\ <var:e2> = <var:Q> ^ <nat:2> /\ <var:e3> = <var:Q> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:e1> = <nat:1> * <var:Q> /\ <var:e2> = <var:Q> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:Q> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:e1> = <nat:1> * <var:Q> /\ <var:e2> = <var:Q> ^ <nat:2> /\ <var:e0> = <nat:2> /\ <var:q> = <nat:3> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:e0> = <nat:2> /\ <var:q> = <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:q> = <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 