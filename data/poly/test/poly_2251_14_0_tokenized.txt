\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:2> ; <var:M1> := <nat:1> ; <var:M1> := <var:M1> * <var:n> ; <var:M2> := <nat:1> ; <var:M2> := <var:M2> * <var:n> ; <var:M2> := <var:M2> * <var:n> ; <var:M3> := <nat:1> ; <var:M3> := <var:M3> * <var:n> ; <var:M3> := <var:M3> * <var:n> ; <var:M3> := <var:M3> * <var:n> ; <var:X> := <var:M3> ; <var:X> := <var:X> + <var:M2> ; <var:X> := <var:X> + <var:M1> ; <var:X> := <var:X> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:n> = <var:z> $ ahead of interpreting the code , then $ <var:X> = <nat:1> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our code can be given using typical Hoare techniques . Considering the proceeding bits of codeseen in the list of commands , we see \begin{verbatim} { <var:n> = <var:z> } <var:M0> := <nat:2> { <var:n> = <var:z> \land <var:M0> = <nat:2> } { <var:n> = <var:z> \land <var:M0> = <nat:2> } <var:M1> := <nat:1> { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> } { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> } <var:M1> := <var:M1> * <var:n> { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> } { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> } <var:M2> := <nat:1> { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> } { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> } <var:M2> := <var:M2> * <var:n> { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> } { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> } <var:M2> := <var:M2> * <var:n> { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> ^ <nat:2> } { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> ^ <nat:2> } <var:M3> := <nat:1> { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:1> } { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:1> } <var:M3> := <var:M3> * <var:n> { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:1> \cdot <var:z> } { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:1> \cdot <var:z> } <var:M3> := <var:M3> * <var:n> { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:1> \cdot <var:z> ^ <nat:2> } { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:1> \cdot <var:z> ^ <nat:2> } <var:M3> := <var:M3> * <var:n> { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:1> \cdot <var:z> ^ <nat:3> } { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> ^ <nat:2> \land <var:M3> = <nat:1> \cdot <var:z> ^ <nat:3> } <var:X> := <var:M3> { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> ^ <nat:2> \land <var:X> = <nat:1> \cdot <var:z> ^ <nat:3> } { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:M2> = <nat:1> \cdot <var:z> ^ <nat:2> \land <var:X> = <nat:1> \cdot <var:z> ^ <nat:3> } <var:X> := <var:X> + <var:M2> { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:X> = <nat:1> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> ^ <nat:2> } { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:M1> = <nat:1> \cdot <var:z> \land <var:X> = <nat:1> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> ^ <nat:2> } <var:X> := <var:X> + <var:M1> { <var:n> = <var:z> \land <var:M0> = <nat:2> \land <var:X> = <nat:1> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> } \end{verbatim} This is guaranteed with the binding inference rule of usual Hoare techniques . Moving on , we see \begin{verbatim} { <var:n> = <var:z> } <var:M0> := <nat:2> { <var:n> = <var:z> \land <var:M0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <def:poly> := <var:M0> := <nat:2> ; <var:M1> := <nat:1> ; <var:M1> := <var:M1> * <var:n> ; <var:M2> := <nat:1> ; <var:M2> := <var:M2> * <var:n> ; <var:M2> := <var:M2> * <var:n> ; <var:M3> := <nat:1> ; <var:M3> := <var:M3> * <var:n> ; <var:M3> := <var:M3> * <var:n> ; <var:M3> := <var:M3> * <var:n> ; <var:X> := <var:M3> ; <var:X> := <var:X> + <var:M2> ; <var:X> := <var:X> + <var:M1> ; <var:X> := <var:X> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:n> = <var:z> }} <def:poly> {{ <var:X> = <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:1> * <var:z> /\ <var:M2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:1> * <var:z> /\ <var:M2> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:1> * <var:z> /\ <var:M2> = <nat:1> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:1> * <var:z> /\ <var:M2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:M3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:1> * <var:z> /\ <var:M2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:M3> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:1> * <var:z> /\ <var:M2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:M3> = <nat:1> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:1> * <var:z> /\ <var:M2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:M3> = <nat:1> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:1> * <var:z> /\ <var:M2> = <nat:1> * <var:z> ^ <nat:2> /\ <var:X> = <nat:1> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:M0> = <nat:2> /\ <var:M1> = <nat:1> * <var:z> /\ <var:X> = <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:M0> = <nat:2> /\ <var:X> = <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:z> /\ <var:X> = <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 