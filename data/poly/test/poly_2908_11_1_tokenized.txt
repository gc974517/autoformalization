\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A1> := <var:e> ; <var:A2> := <var:A1> * <var:e> ; <var:A3> := <var:A2> * <var:e> ; <var:A0> := <nat:1> ; <var:A1> := <var:A1> * <nat:6> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:5> ; <var:o> := <var:A3> <var:o> := <var:o> + <var:A2> <var:o> := <var:o> + <var:A1> <var:o> := <var:o> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> in \emph{Imp} . Assuming taking natural coefficients $ <var:W> $ that $ <var:e> = <var:W> $ before interpreting our series of instructions it follows that $ <var:o> = <nat:5> \times <var:W> ^ <nat:3> + <nat:9> \times <var:W> ^ <nat:2> + <nat:6> \times <var:W> + <nat:1> $ when set of instructions terminates . \end{theorem} \begin{proof} Applying usual Hoare techniques results in : \begin{eqnarray} \{ <var:e> = <var:W> \} \\ <var:A1> := <var:e> ; \\ \{ <var:e> = <var:W> \land <var:A1> = <var:W> \} \\ <var:A2> := <var:A1> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:A1> = <var:W> \land <var:A2> = <var:W> ^ <nat:2> \} \\ <var:A3> := <var:A2> * <var:e> ; \\ \{ <var:e> = <var:W> \land <var:A1> = <var:W> \land <var:A2> = <var:W> ^ <nat:2> \land <var:A3> = <var:W> ^ <nat:3> \} \\ <var:A0> := <nat:1> ; \\ \{ <var:e> = <var:W> \land <var:A1> = <var:W> \land <var:A2> = <var:W> ^ <nat:2> \land <var:A3> = <var:W> ^ <nat:3> \land <var:A0> = <nat:1> \} \\ <var:A1> := <var:A1> * <nat:6> ; \\ \{ <var:e> = <var:W> \land <var:A1> = <nat:6> * <var:W> \land <var:A2> = <var:W> ^ <nat:2> \land <var:A3> = <var:W> ^ <nat:3> \land <var:A0> = <nat:1> \} \\ <var:A2> := <var:A2> * <nat:9> ; \\ \{ <var:e> = <var:W> \land <var:A1> = <nat:6> * <var:W> \land <var:A2> = <nat:9> * <var:W> ^ <nat:2> \land <var:A3> = <var:W> ^ <nat:3> \land <var:A0> = <nat:1> \} \\ <var:A3> := <var:A3> * <nat:5> ; \\ \{ <var:e> = <var:W> \land <var:A1> = <nat:6> * <var:W> \land <var:A2> = <nat:9> * <var:W> ^ <nat:2> \land <var:A3> = <nat:5> * <var:W> ^ <nat:3> \land <var:A0> = <nat:1> \} \\ <var:o> := <var:A3> \\ \{ <var:e> = <var:W> \land <var:A1> = <nat:6> * <var:W> \land <var:A2> = <nat:9> * <var:W> ^ <nat:2> \land <var:A0> = <nat:1> \land <var:o> = <nat:5> * <var:W> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:A2> \\ \{ <var:e> = <var:W> \land <var:A1> = <nat:6> * <var:W> \land <var:A0> = <nat:1> \land <var:o> = <nat:5> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:A1> \\ \{ <var:e> = <var:W> \land <var:A0> = <nat:1> \land <var:o> = <nat:5> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> + <nat:6> * <var:W> \} \\ <var:o> := <var:o> + <var:A0> \\ \{ <var:e> = <var:W> \land <var:o> = <nat:5> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:1> \} \end{eqnarray} Considering the above , this series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <def:poly> := <var:A1> := <var:e> ; <var:A2> := <var:A1> * <var:e> ; <var:A3> := <var:A2> * <var:e> ; <var:A0> := <nat:1> ; <var:A1> := <var:A1> * <nat:6> ; <var:A2> := <var:A2> * <nat:9> ; <var:A3> := <var:A3> * <nat:5> ; <var:o> := <var:A3> <var:o> := <var:o> + <var:A2> <var:o> := <var:o> + <var:A1> <var:o> := <var:o> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:e> = <var:W> }} <def:poly> {{ <var:o> = <nat:5> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:A1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:A1> = <var:W> /\ <var:A2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:A1> = <var:W> /\ <var:A2> = <var:W> ^ <nat:2> /\ <var:A3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:A1> = <var:W> /\ <var:A2> = <var:W> ^ <nat:2> /\ <var:A3> = <var:W> ^ <nat:3> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:A1> = <nat:6> * <var:W> /\ <var:A2> = <var:W> ^ <nat:2> /\ <var:A3> = <var:W> ^ <nat:3> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:A1> = <nat:6> * <var:W> /\ <var:A2> = <nat:9> * <var:W> ^ <nat:2> /\ <var:A3> = <var:W> ^ <nat:3> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:A1> = <nat:6> * <var:W> /\ <var:A2> = <nat:9> * <var:W> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:W> ^ <nat:3> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:A1> = <nat:6> * <var:W> /\ <var:A2> = <nat:9> * <var:W> ^ <nat:2> /\ <var:A0> = <nat:1> /\ <var:o> = <nat:5> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:A1> = <nat:6> * <var:W> /\ <var:A0> = <nat:1> /\ <var:o> = <nat:5> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:A0> = <nat:1> /\ <var:o> = <nat:5> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> + <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:o> = <nat:5> * <var:W> ^ <nat:3> + <nat:9> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 