\begin{document} \begin{theorem} Define the following list of commands such that \begin{verbatim} <var:u1> := <var:T> ; <var:u2> := <var:u1> * <var:T> ; <var:u3> := <var:u2> * <var:T> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:9> ; <var:u3> := <var:u3> * <nat:9> ; <var:Y> := <var:u3> <var:Y> := <var:Y> + <var:u1> <var:Y> := <var:Y> + <var:u0> \end{verbatim} Allow it to be that $ <var:T> = <var:c> $ prior to interpreting the code segment , it follows that we see $ <var:Y> = <nat:9> * <var:c> ^ <nat:3> + <nat:9> * <var:c> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:c> \} \\ <var:u1> := <var:T> ; \\ \{ <var:T> = <var:c> \land <var:u1> = <var:c> \} \\ <var:u2> := <var:u1> * <var:T> ; \\ \{ <var:T> = <var:c> \land <var:u1> = <var:c> \land <var:u2> = <var:c> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:T> ; \\ \{ <var:T> = <var:c> \land <var:u1> = <var:c> \land <var:u2> = <var:c> ^ <nat:2> \land <var:u3> = <var:c> ^ <nat:3> \} \\ <var:u0> := <nat:1> ; \\ \{ <var:T> = <var:c> \land <var:u1> = <var:c> \land <var:u2> = <var:c> ^ <nat:2> \land <var:u3> = <var:c> ^ <nat:3> \land <var:u0> = <nat:1> \} \\ <var:u1> := <var:u1> * <nat:9> ; \\ \{ <var:T> = <var:c> \land <var:u1> = <nat:9> \times <var:c> \land <var:u2> = <var:c> ^ <nat:2> \land <var:u3> = <var:c> ^ <nat:3> \land <var:u0> = <nat:1> \} \\ <var:u3> := <var:u3> * <nat:9> ; \\ \{ <var:T> = <var:c> \land <var:u1> = <nat:9> \times <var:c> \land <var:u2> = <var:c> ^ <nat:2> \land <var:u3> = <nat:9> \times <var:c> ^ <nat:3> \land <var:u0> = <nat:1> \} \\ <var:Y> := <var:u3> \\ \{ <var:T> = <var:c> \land <var:u1> = <nat:9> \times <var:c> \land <var:u2> = <var:c> ^ <nat:2> \land <var:u0> = <nat:1> \land <var:Y> = <nat:9> \times <var:c> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:u1> \\ \{ <var:T> = <var:c> \land <var:u0> = <nat:1> \land <var:Y> = <nat:9> \times <var:c> ^ <nat:3> + <nat:9> \times <var:c> \} \\ <var:Y> := <var:Y> + <var:u0> \\ \{ <var:T> = <var:c> \land <var:Y> = <nat:9> \times <var:c> ^ <nat:3> + <nat:9> \times <var:c> + <nat:1> \} \end{eqnarray} Applying Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:T> = <var:c> }} <var:u1> := <var:T> ; <var:u2> := <var:u1> * <var:T> ; <var:u3> := <var:u2> * <var:T> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:9> ; <var:u3> := <var:u3> * <nat:9> ; <var:Y> := <var:u3> <var:Y> := <var:Y> + <var:u1> <var:Y> := <var:Y> + <var:u0> {{ <var:Y> = <nat:9> * <var:c> ^ <nat:3> + <nat:9> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:u1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:u1> = <var:c> /\ <var:u2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:u1> = <var:c> /\ <var:u2> = <var:c> ^ <nat:2> /\ <var:u3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:u1> = <var:c> /\ <var:u2> = <var:c> ^ <nat:2> /\ <var:u3> = <var:c> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:u1> = <nat:9> * <var:c> /\ <var:u2> = <var:c> ^ <nat:2> /\ <var:u3> = <var:c> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:u1> = <nat:9> * <var:c> /\ <var:u2> = <var:c> ^ <nat:2> /\ <var:u3> = <nat:9> * <var:c> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:u1> = <nat:9> * <var:c> /\ <var:u2> = <var:c> ^ <nat:2> /\ <var:u0> = <nat:1> /\ <var:Y> = <nat:9> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:u0> = <nat:1> /\ <var:Y> = <nat:9> * <var:c> ^ <nat:3> + <nat:9> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:c> /\ <var:Y> = <nat:9> * <var:c> ^ <nat:3> + <nat:9> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 