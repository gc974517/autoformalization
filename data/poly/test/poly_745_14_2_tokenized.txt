\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as \begin{verbatim} <var:l> := <nat:2> ; <var:l> := <var:l> * <var:s> ; <var:l> := <nat:3> + <var:l> * <var:s> ; <var:l> := <nat:4> + <var:l> * <var:s> ; <var:l> := <nat:2> + <var:l> * <var:s> ; <var:l> := <nat:2> + <var:l> * <var:s> ; <var:l> := <nat:2> + <var:l> * <var:s> ; <var:l> := <nat:3> + <var:l> * <var:s> ; <var:l> := <nat:1> + <var:l> * <var:s> ; <var:l> := <nat:3> + <var:l> * <var:s> ; <var:l> := <nat:3> + <var:l> * <var:s> ; <var:l> := <nat:3> + <var:l> * <var:s> ; <var:l> := <var:l> * <var:s> ; <var:l> := <nat:1> + <var:l> * <var:s> \end{verbatim} Assuming that we have $ <var:s> = <var:R> $ prior to the execution of the code then $ <var:l> = <nat:2> * <var:R> ^ <nat:13> + <nat:3> * <var:R> ^ <nat:11> + <nat:4> * <var:R> ^ <nat:10> + <nat:2> * <var:R> ^ <nat:9> + <nat:2> * <var:R> ^ <nat:8> + <nat:2> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> $ when code is done executing . \end{theorem} \begin{proof} Arguing the correctness of the code can be accomplished using typical Hoare logic . Looking at the next commands contained in our series of instructions , we have \verb | { <var:s> = <var:R> } <var:l> := <nat:2> { <var:s> = <var:R> \land <var:l> = <nat:2> } | , \verb | { <var:s> = <var:R> \land <var:l> = <nat:2> } <var:l> := <var:l> * <var:s> { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> + } | , \verb | { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> + } <var:l> := <nat:3> + <var:l> * <var:s> { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> ^ <nat:2> + <nat:3> } | , \verb | { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> ^ <nat:2> + <nat:3> } <var:l> := <nat:4> + <var:l> * <var:s> { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> + <nat:4> } | , \verb | { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> + <nat:4> } <var:l> := <nat:2> + <var:l> * <var:s> { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:2> } | and \verb | { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:2> } <var:l> := <nat:2> + <var:l> * <var:s> { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:2> } | . This is sound through the assignment inference rule defined by usual Hoare techniques . Moving on , we see \verb | { <var:s> = <var:R> } <var:l> := <nat:2> { <var:s> = <var:R> \land <var:l> = <nat:2> } | , \verb | { <var:s> = <var:R> \land <var:l> = <nat:2> } <var:l> := <var:l> * <var:s> { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> + } | and \verb | { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> + } <var:l> := <nat:3> + <var:l> * <var:s> { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> ^ <nat:2> + <nat:3> } | . Further , we see \verb | { <var:s> = <var:R> } <var:l> := <nat:2> { <var:s> = <var:R> \land <var:l> = <nat:2> } | , \verb | { <var:s> = <var:R> \land <var:l> = <nat:2> } <var:l> := <var:l> * <var:s> { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> + } | , \verb | { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> + } <var:l> := <nat:3> + <var:l> * <var:s> { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> ^ <nat:2> + <nat:3> } | , \verb | { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> ^ <nat:2> + <nat:3> } <var:l> := <nat:4> + <var:l> * <var:s> { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> + <nat:4> } | and \verb | { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> + <nat:4> } <var:l> := <nat:2> + <var:l> * <var:s> { <var:s> = <var:R> \land <var:l> = <nat:2> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:s> = <var:R> }} <var:l> := <nat:2> ; <var:l> := <var:l> * <var:s> ; <var:l> := <nat:3> + <var:l> * <var:s> ; <var:l> := <nat:4> + <var:l> * <var:s> ; <var:l> := <nat:2> + <var:l> * <var:s> ; <var:l> := <nat:2> + <var:l> * <var:s> ; <var:l> := <nat:2> + <var:l> * <var:s> ; <var:l> := <nat:3> + <var:l> * <var:s> ; <var:l> := <nat:1> + <var:l> * <var:s> ; <var:l> := <nat:3> + <var:l> * <var:s> ; <var:l> := <nat:3> + <var:l> * <var:s> ; <var:l> := <nat:3> + <var:l> * <var:s> ; <var:l> := <var:l> * <var:s> ; <var:l> := <nat:1> + <var:l> * <var:s> {{ <var:l> = <nat:2> * <var:R> ^ <nat:13> + <nat:3> * <var:R> ^ <nat:11> + <nat:4> * <var:R> ^ <nat:10> + <nat:2> * <var:R> ^ <nat:9> + <nat:2> * <var:R> ^ <nat:8> + <nat:2> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:8> + <nat:3> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:9> + <nat:3> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:6> + <nat:2> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:10> + <nat:3> * <var:R> ^ <nat:8> + <nat:4> * <var:R> ^ <nat:7> + <nat:2> * <var:R> ^ <nat:6> + <nat:2> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:11> + <nat:3> * <var:R> ^ <nat:9> + <nat:4> * <var:R> ^ <nat:8> + <nat:2> * <var:R> ^ <nat:7> + <nat:2> * <var:R> ^ <nat:6> + <nat:2> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:12> + <nat:3> * <var:R> ^ <nat:10> + <nat:4> * <var:R> ^ <nat:9> + <nat:2> * <var:R> ^ <nat:8> + <nat:2> * <var:R> ^ <nat:7> + <nat:2> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:R> /\ <var:l> = <nat:2> * <var:R> ^ <nat:13> + <nat:3> * <var:R> ^ <nat:11> + <nat:4> * <var:R> ^ <nat:10> + <nat:2> * <var:R> ^ <nat:9> + <nat:2> * <var:R> ^ <nat:8> + <nat:2> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 