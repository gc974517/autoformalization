\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} as follows \begin{verbatim} <var:s> := <nat:4> ; <var:s> := <nat:3> + <var:s> * <var:b> ; <var:s> := <nat:4> + <var:s> * <var:b> ; <var:s> := <nat:2> + <var:s> * <var:b> ; <var:s> := <var:s> * <var:b> ; <var:s> := <nat:2> + <var:s> * <var:b> ; <var:s> := <nat:1> + <var:s> * <var:b> ; <var:s> := <nat:3> + <var:s> * <var:b> ; <var:s> := <nat:3> + <var:s> * <var:b> ; <var:s> := <nat:4> + <var:s> * <var:b> \end{verbatim} Given it to be that $ <var:b> = <var:n> $ taking positive coefficients $ <var:n> $ ahead of the execution of our set of instructions , it follows that we have $ <var:s> = <nat:4> \cdot <var:n> ^ <nat:9> + <nat:3> \cdot <var:n> ^ <nat:8> + <nat:4> \cdot <var:n> ^ <nat:7> + <nat:2> \cdot <var:n> ^ <nat:6> + <nat:2> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> + <nat:4> $ after segment of code has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:n> \} \\ <var:s> := <nat:4> ; \\ \{ <var:b> = <var:n> \land <var:s> = <nat:4> \} \\ <var:s> := <nat:3> + <var:s> * <var:b> ; \\ \{ <var:b> = <var:n> \land <var:s> = <nat:4> \times <var:n> + <nat:3> \} \\ <var:s> := <nat:4> + <var:s> * <var:b> ; \\ \{ <var:b> = <var:n> \land <var:s> = <nat:4> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:4> \} \\ <var:s> := <nat:2> + <var:s> * <var:b> ; \\ \{ <var:b> = <var:n> \land <var:s> = <nat:4> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:2> \} \\ <var:s> := <var:s> * <var:b> ; \\ \{ <var:b> = <var:n> \land <var:s> = <nat:4> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + \} \\ <var:s> := <nat:2> + <var:s> * <var:b> ; \\ \{ <var:b> = <var:n> \land <var:s> = <nat:4> \times <var:n> ^ <nat:5> + <nat:3> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:2> \} \\ <var:s> := <nat:1> + <var:s> * <var:b> ; \\ \{ <var:b> = <var:n> \land <var:s> = <nat:4> \times <var:n> ^ <nat:6> + <nat:3> \times <var:n> ^ <nat:5> + <nat:4> \times <var:n> ^ <nat:4> + <nat:2> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> + <nat:1> \} \\ <var:s> := <nat:3> + <var:s> * <var:b> ; \\ \{ <var:b> = <var:n> \land <var:s> = <nat:4> \times <var:n> ^ <nat:7> + <nat:3> \times <var:n> ^ <nat:6> + <nat:4> \times <var:n> ^ <nat:5> + <nat:2> \times <var:n> ^ <nat:4> + <nat:2> \times <var:n> ^ <nat:2> + <nat:1> \times <var:n> + <nat:3> \} \end{eqnarray} Continuing executing this program results in : \begin{eqnarray} <var:s> := <nat:3> + <var:s> * <var:b> ; \\ \{ <var:b> = <var:n> \land <var:s> = <nat:4> \times <var:n> ^ <nat:8> + <nat:3> \times <var:n> ^ <nat:7> + <nat:4> \times <var:n> ^ <nat:6> + <nat:2> \times <var:n> ^ <nat:5> + <nat:2> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:3> \} \\ <var:s> := <nat:4> + <var:s> * <var:b> \\ \{ <var:b> = <var:n> \land <var:s> = <nat:4> \times <var:n> ^ <nat:9> + <nat:3> \times <var:n> ^ <nat:8> + <nat:4> \times <var:n> ^ <nat:7> + <nat:2> \times <var:n> ^ <nat:6> + <nat:2> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:b> = <var:n> }} <var:s> := <nat:4> ; <var:s> := <nat:3> + <var:s> * <var:b> ; <var:s> := <nat:4> + <var:s> * <var:b> ; <var:s> := <nat:2> + <var:s> * <var:b> ; <var:s> := <var:s> * <var:b> ; <var:s> := <nat:2> + <var:s> * <var:b> ; <var:s> := <nat:1> + <var:s> * <var:b> ; <var:s> := <nat:3> + <var:s> * <var:b> ; <var:s> := <nat:3> + <var:s> * <var:b> ; <var:s> := <nat:4> + <var:s> * <var:b> {{ <var:s> = <nat:4> * <var:n> ^ <nat:9> + <nat:3> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:s> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:s> = <nat:4> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:s> = <nat:4> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:s> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:s> = <nat:4> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:s> = <nat:4> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:s> = <nat:4> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:2> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:s> = <nat:4> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:s> = <nat:4> * <var:n> ^ <nat:8> + <nat:3> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:n> /\ <var:s> = <nat:4> * <var:n> ^ <nat:9> + <nat:3> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 