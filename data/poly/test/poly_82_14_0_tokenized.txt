\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:5> ; <var:K1> := <nat:5> ; <var:K1> := <var:K1> * <var:g> ; <var:K2> := <nat:6> ; <var:K2> := <var:K2> * <var:g> ; <var:K2> := <var:K2> * <var:g> ; <var:K3> := <nat:8> ; <var:K3> := <var:K3> * <var:g> ; <var:K3> := <var:K3> * <var:g> ; <var:K3> := <var:K3> * <var:g> ; <var:Z> := <var:K3> ; <var:Z> := <var:Z> + <var:K2> ; <var:Z> := <var:Z> + <var:K1> ; <var:Z> := <var:Z> + <var:K0> \end{verbatim} Allowing that we have $ <var:g> = <var:l> $ prior to the execution of our code it follows that we see $ <var:Z> = <nat:8> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of this series of commands is accomplished using Hoare reasoning . Taking a look at the subsequent lines of codeseen in the list of commands , we have \verb | { <var:g> = <var:l> } <var:K0> := <nat:5> { <var:g> = <var:l> \land <var:K0> = <nat:5> } | , \verb | { <var:g> = <var:l> \land <var:K0> = <nat:5> } <var:K1> := <nat:5> { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> } | , \verb | { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> } <var:K1> := <var:K1> * <var:g> { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> } | , \verb | { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> } <var:K2> := <nat:6> { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> } | , \verb | { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> } <var:K2> := <var:K2> * <var:g> { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> * <var:l> } | , \verb | { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> * <var:l> } <var:K2> := <var:K2> * <var:g> { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> * <var:l> ^ <nat:2> } | , \verb | { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> * <var:l> ^ <nat:2> } <var:K3> := <nat:8> { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> * <var:l> ^ <nat:2> \land <var:K3> = <nat:8> } | , \verb | { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> * <var:l> ^ <nat:2> \land <var:K3> = <nat:8> } <var:K3> := <var:K3> * <var:g> { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> * <var:l> ^ <nat:2> \land <var:K3> = <nat:8> * <var:l> } | , \verb | { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> * <var:l> ^ <nat:2> \land <var:K3> = <nat:8> * <var:l> } <var:K3> := <var:K3> * <var:g> { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> * <var:l> ^ <nat:2> \land <var:K3> = <nat:8> * <var:l> ^ <nat:2> } | and \verb | { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> * <var:l> ^ <nat:2> \land <var:K3> = <nat:8> * <var:l> ^ <nat:2> } <var:K3> := <var:K3> * <var:g> { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> * <var:l> ^ <nat:2> \land <var:K3> = <nat:8> * <var:l> ^ <nat:3> } | . This is guaranteed using the assignment scheme from typical Hoare reasoning . Taking another step toward the next steps contained in our code , we see \verb | { <var:g> = <var:l> } <var:K0> := <nat:5> { <var:g> = <var:l> \land <var:K0> = <nat:5> } | , \verb | { <var:g> = <var:l> \land <var:K0> = <nat:5> } <var:K1> := <nat:5> { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> } | , \verb | { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> } <var:K1> := <var:K1> * <var:g> { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> } | and \verb | { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> } <var:K2> := <nat:6> { <var:g> = <var:l> \land <var:K0> = <nat:5> \land <var:K1> = <nat:5> * <var:l> \land <var:K2> = <nat:6> } | . This is sound through the assignment law found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:g> = <var:l> }} <var:K0> := <nat:5> ; <var:K1> := <nat:5> ; <var:K1> := <var:K1> * <var:g> ; <var:K2> := <nat:6> ; <var:K2> := <var:K2> * <var:g> ; <var:K2> := <var:K2> * <var:g> ; <var:K3> := <nat:8> ; <var:K3> := <var:K3> * <var:g> ; <var:K3> := <var:K3> * <var:g> ; <var:K3> := <var:K3> * <var:g> ; <var:Z> := <var:K3> ; <var:Z> := <var:Z> + <var:K2> ; <var:Z> := <var:Z> + <var:K1> ; <var:Z> := <var:Z> + <var:K0> {{ <var:Z> = <nat:8> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:5> * <var:l> /\ <var:K2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:5> * <var:l> /\ <var:K2> = <nat:6> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:5> * <var:l> /\ <var:K2> = <nat:6> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:5> * <var:l> /\ <var:K2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:K3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:5> * <var:l> /\ <var:K2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:K3> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:5> * <var:l> /\ <var:K2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:K3> = <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:5> * <var:l> /\ <var:K2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:K3> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:5> * <var:l> /\ <var:K2> = <nat:6> * <var:l> ^ <nat:2> /\ <var:Z> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:5> * <var:l> /\ <var:Z> = <nat:8> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:K0> = <nat:5> /\ <var:Z> = <nat:8> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:l> /\ <var:Z> = <nat:8> * <var:l> ^ <nat:3> + <nat:6> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 