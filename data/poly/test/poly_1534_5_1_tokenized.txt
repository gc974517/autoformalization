\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T1> := <var:Y> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:5> ; <var:A> := <var:T1> <var:A> := <var:A> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> in \emph{Imp} . Allowing that $ <var:Y> = <var:H> $ ahead of executing this set of instructions , it follows that we see $ <var:A> = <nat:5> \cdot <var:H> + <nat:1> $ once list of commands has finished . \end{theorem} \begin{proof} The application of Hoare reasoning returns : \begin{eqnarray} \{ <var:Y> = <var:H> \} \\ <var:T1> := <var:Y> ; \\ \{ <var:Y> = <var:H> \land <var:T1> = <var:H> \} \\ <var:T0> := <nat:1> ; \\ \{ <var:Y> = <var:H> \land <var:T1> = <var:H> \land <var:T0> = <nat:1> \} \\ <var:T1> := <var:T1> * <nat:5> ; \\ \{ <var:Y> = <var:H> \land <var:T1> = <nat:5> * <var:H> \land <var:T0> = <nat:1> \} \\ <var:A> := <var:T1> \\ \{ <var:Y> = <var:H> \land <var:T0> = <nat:1> \land <var:A> = <nat:5> * <var:H> \} \\ <var:A> := <var:A> + <var:T0> \\ \{ <var:Y> = <var:H> \land <var:A> = <nat:5> * <var:H> + <nat:1> \} \end{eqnarray} As a consequence , this program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T1> := <var:Y> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:5> ; <var:A> := <var:T1> <var:A> := <var:A> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Y> = <var:H> }} <def:poly> {{ <var:A> = <nat:5> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:T1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:T1> = <var:H> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:T1> = <nat:5> * <var:H> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:T0> = <nat:1> /\ <var:A> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:A> = <nat:5> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 