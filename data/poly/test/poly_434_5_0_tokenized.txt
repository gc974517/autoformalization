\begin{document} \begin{theorem} We define a program in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:6> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:t> ; <var:P> := <var:k1> ; <var:P> := <var:P> + <var:k0> \end{verbatim} Given given some positive integers $ <var:j> $ $ <var:t> = <var:j> $ prior to executing the list of commands , it follows that $ <var:P> = <nat:2> \cdot <var:j> + <nat:6> $ after set of instructions executes . \end{theorem} \begin{proof} Applying usual Hoare techniques returns : \begin{eqnarray} \{ <var:t> = <var:j> \} \\ <var:k0> := <nat:6> ; \\ \{ <var:t> = <var:j> \land <var:k0> = <nat:6> \} \\ <var:k1> := <nat:2> ; \\ \{ <var:t> = <var:j> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \} \\ <var:k1> := <var:k1> * <var:t> ; \\ \{ <var:t> = <var:j> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \cdot <var:j> \} \\ <var:P> := <var:k1> ; \\ \{ <var:t> = <var:j> \land <var:k0> = <nat:6> \land <var:P> = <nat:2> \cdot <var:j> \} \\ <var:P> := <var:P> + <var:k0> \\ \{ <var:t> = <var:j> \land <var:P> = <nat:2> \cdot <var:j> + <nat:6> \} \end{eqnarray} As a consequence , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:t> = <var:j> }} <var:k0> := <nat:6> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:t> ; <var:P> := <var:k1> ; <var:P> := <var:P> + <var:k0> {{ <var:P> = <nat:2> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:k0> = <nat:6> /\ <var:P> = <nat:2> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:j> /\ <var:P> = <nat:2> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 