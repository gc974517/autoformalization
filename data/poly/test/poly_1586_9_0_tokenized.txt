\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a0> := <nat:6> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:S> ; <var:a2> := <nat:9> ; <var:a2> := <var:a2> * <var:S> ; <var:a2> := <var:a2> * <var:S> ; <var:C> := <var:a2> ; <var:C> := <var:C> + <var:a1> ; <var:C> := <var:C> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:S> = <var:o> $ before executing this list of commands it must be that $ <var:C> = <nat:9> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:6> $ once list of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:o> \} \\ <var:a0> := <nat:6> ; \\ \{ <var:S> = <var:o> \land <var:a0> = <nat:6> \} \\ <var:a1> := <nat:7> ; \\ \{ <var:S> = <var:o> \land <var:a0> = <nat:6> \land <var:a1> = <nat:7> \} \\ <var:a1> := <var:a1> * <var:S> ; \\ \{ <var:S> = <var:o> \land <var:a0> = <nat:6> \land <var:a1> = <nat:7> \cdot <var:o> \} \\ <var:a2> := <nat:9> ; \\ \{ <var:S> = <var:o> \land <var:a0> = <nat:6> \land <var:a1> = <nat:7> \cdot <var:o> \land <var:a2> = <nat:9> \} \\ <var:a2> := <var:a2> * <var:S> ; \\ \{ <var:S> = <var:o> \land <var:a0> = <nat:6> \land <var:a1> = <nat:7> \cdot <var:o> \land <var:a2> = <nat:9> \cdot <var:o> \} \\ <var:a2> := <var:a2> * <var:S> ; \\ \{ <var:S> = <var:o> \land <var:a0> = <nat:6> \land <var:a1> = <nat:7> \cdot <var:o> \land <var:a2> = <nat:9> \cdot <var:o> ^ <nat:2> \} \\ <var:C> := <var:a2> ; \\ \{ <var:S> = <var:o> \land <var:a0> = <nat:6> \land <var:a1> = <nat:7> \cdot <var:o> \land <var:C> = <nat:9> \cdot <var:o> ^ <nat:2> \} \\ <var:C> := <var:C> + <var:a1> ; \\ \{ <var:S> = <var:o> \land <var:a0> = <nat:6> \land <var:C> = <nat:9> \cdot <var:o> ^ <nat:2> + <nat:7> \cdot <var:o> \} \\ <var:C> := <var:C> + <var:a0> \\ \{ <var:S> = <var:o> \land <var:C> = <nat:9> \cdot <var:o> ^ <nat:2> + <nat:7> \cdot <var:o> + <nat:6> \} \end{eqnarray} Utilizing Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <def:poly> := <var:a0> := <nat:6> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:S> ; <var:a2> := <nat:9> ; <var:a2> := <var:a2> * <var:S> ; <var:a2> := <var:a2> * <var:S> ; <var:C> := <var:a2> ; <var:C> := <var:C> + <var:a1> ; <var:C> := <var:C> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:S> = <var:o> }} <def:poly> {{ <var:C> = <nat:9> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:a0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:7> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:7> * <var:o> /\ <var:a2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:7> * <var:o> /\ <var:a2> = <nat:9> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:7> * <var:o> /\ <var:a2> = <nat:9> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:a0> = <nat:6> /\ <var:a1> = <nat:7> * <var:o> /\ <var:C> = <nat:9> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:a0> = <nat:6> /\ <var:C> = <nat:9> * <var:o> ^ <nat:2> + <nat:7> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:o> /\ <var:C> = <nat:9> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 