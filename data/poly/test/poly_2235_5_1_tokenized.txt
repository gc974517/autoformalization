\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:Z> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:4> ; <var:t> := <var:k1> <var:t> := <var:t> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> . Allow ( for any positive coefficients $ <var:K> $ ) it to hold that $ <var:Z> = <var:K> $ before the evaluation of the segment of code , it follows that we have $ <var:t> = <nat:4> \times <var:K> + <nat:2> $ . \end{theorem} \begin{proof} We can see that this decorated list of commands . \begin{eqnarray} \{ <var:Z> = <var:K> \} \\ <var:k1> := <var:Z> ; \\ \{ <var:Z> = <var:K> \land <var:k1> = <var:K> \} \\ <var:k0> := <nat:2> ; \\ \{ <var:Z> = <var:K> \land <var:k1> = <var:K> \land <var:k0> = <nat:2> \} \\ <var:k1> := <var:k1> * <nat:4> ; \\ \{ <var:Z> = <var:K> \land <var:k1> = <nat:4> * <var:K> \land <var:k0> = <nat:2> \} \\ <var:t> := <var:k1> \\ \{ <var:Z> = <var:K> \land <var:k0> = <nat:2> \land <var:t> = <nat:4> * <var:K> \} \\ <var:t> := <var:t> + <var:k0> \\ \{ <var:Z> = <var:K> \land <var:t> = <nat:4> * <var:K> + <nat:2> \} \end{eqnarray} Using Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k1> := <var:Z> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:4> ; <var:t> := <var:k1> <var:t> := <var:t> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:Z> = <var:K> }} <def:poly> {{ <var:t> = <nat:4> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:k1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:k1> = <var:K> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:k1> = <nat:4> * <var:K> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:k0> = <nat:2> /\ <var:t> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:K> /\ <var:t> = <nat:4> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 