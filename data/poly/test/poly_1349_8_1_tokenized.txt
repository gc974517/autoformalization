\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h1> := <var:i> ; <var:h2> := <var:h1> * <var:i> ; <var:h0> := <nat:1> ; <var:h1> := <var:h1> * <nat:2> ; <var:h2> := <var:h2> * <nat:5> ; <var:n> := <var:h2> <var:n> := <var:n> + <var:h1> <var:n> := <var:n> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:i> = <var:S> $ prior to running this list of instructions , it follows that we have $ <var:n> = <nat:5> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> + <nat:1> $ . \end{theorem} \begin{proof} The argument for this code can be given by Hoare reasoning . Observing the next steps contained in our series of commands , we see \begin{verbatim} { <var:i> = <var:S> } <var:h1> := <var:i> { <var:i> = <var:S> \land <var:h1> = <var:S> } { <var:i> = <var:S> \land <var:h1> = <var:S> } <var:h2> := <var:h1> * <var:i> { <var:i> = <var:S> \land <var:h1> = <var:S> \land <var:h2> = <var:S> ^ <nat:2> } { <var:i> = <var:S> \land <var:h1> = <var:S> \land <var:h2> = <var:S> ^ <nat:2> } <var:h0> := <nat:1> { <var:i> = <var:S> \land <var:h1> = <var:S> \land <var:h2> = <var:S> ^ <nat:2> \land <var:h0> = <nat:1> } \end{verbatim} This is known to be sound through the variable update scheme found in Hoare logic . Going to the next step , we have \begin{verbatim} { <var:i> = <var:S> } <var:h1> := <var:i> { <var:i> = <var:S> \land <var:h1> = <var:S> } { <var:i> = <var:S> \land <var:h1> = <var:S> } <var:h2> := <var:h1> * <var:i> { <var:i> = <var:S> \land <var:h1> = <var:S> \land <var:h2> = <var:S> ^ <nat:2> } { <var:i> = <var:S> \land <var:h1> = <var:S> \land <var:h2> = <var:S> ^ <nat:2> } <var:h0> := <nat:1> { <var:i> = <var:S> \land <var:h1> = <var:S> \land <var:h2> = <var:S> ^ <nat:2> \land <var:h0> = <nat:1> } \end{verbatim} This is shown to be logically sound by the assignment law given by typical Hoare logic . Moving onward , we see \begin{verbatim} { <var:i> = <var:S> } <var:h1> := <var:i> { <var:i> = <var:S> \land <var:h1> = <var:S> } \end{verbatim} This is given through the environment update rule given in typical Hoare techniques . Stepping through , we see \begin{verbatim} { <var:i> = <var:S> } <var:h1> := <var:i> { <var:i> = <var:S> \land <var:h1> = <var:S> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h1> := <var:i> ; <var:h2> := <var:h1> * <var:i> ; <var:h0> := <nat:1> ; <var:h1> := <var:h1> * <nat:2> ; <var:h2> := <var:h2> * <nat:5> ; <var:n> := <var:h2> <var:n> := <var:n> + <var:h1> <var:n> := <var:n> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:i> = <var:S> }} <def:poly> {{ <var:n> = <nat:5> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:h1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:h1> = <var:S> /\ <var:h2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:h1> = <var:S> /\ <var:h2> = <var:S> ^ <nat:2> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:h1> = <nat:2> * <var:S> /\ <var:h2> = <var:S> ^ <nat:2> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:h1> = <nat:2> * <var:S> /\ <var:h2> = <nat:5> * <var:S> ^ <nat:2> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:h1> = <nat:2> * <var:S> /\ <var:h0> = <nat:1> /\ <var:n> = <nat:5> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:h0> = <nat:1> /\ <var:n> = <nat:5> * <var:S> ^ <nat:2> + <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:S> /\ <var:n> = <nat:5> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 