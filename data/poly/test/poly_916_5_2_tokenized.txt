\begin{document} \begin{theorem} Take a list of instructions such that \begin{verbatim} <var:N> := <nat:4> ; <var:N> := <nat:1> + <var:N> * <var:M> ; <var:N> := <nat:4> + <var:N> * <var:M> ; <var:N> := <var:N> * <var:M> ; <var:N> := <nat:3> + <var:N> * <var:M> \end{verbatim} Allow it to be that $ <var:M> = <var:H> $ ahead of the execution of our list of commands , it holds that we have $ <var:N> = <nat:4> \times <var:H> ^ <nat:4> + <nat:1> \times <var:H> ^ <nat:3> + <nat:4> \times <var:H> ^ <nat:2> + <nat:3> $ once list of instructions has exited . \end{theorem} \begin{proof} Utilizing standard Hoare logic returns : \begin{eqnarray} \{ <var:M> = <var:H> \} \\ <var:N> := <nat:4> ; \\ \{ <var:M> = <var:H> \land <var:N> = <nat:4> \} \\ <var:N> := <nat:1> + <var:N> * <var:M> ; \\ \{ <var:M> = <var:H> \land <var:N> = <nat:4> \times <var:H> + <nat:1> \} \\ <var:N> := <nat:4> + <var:N> * <var:M> ; \\ \{ <var:M> = <var:H> \land <var:N> = <nat:4> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> + <nat:4> \} \\ <var:N> := <var:N> * <var:M> ; \\ \{ <var:M> = <var:H> \land <var:N> = <nat:4> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + \} \\ <var:N> := <nat:3> + <var:N> * <var:M> \\ \{ <var:M> = <var:H> \land <var:N> = <nat:4> \times <var:H> ^ <nat:4> + <nat:1> \times <var:H> ^ <nat:3> + <nat:4> \times <var:H> ^ <nat:2> + <nat:3> \} \end{eqnarray} Therefore , the series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:M> = <var:H> }} <var:N> := <nat:4> ; <var:N> := <nat:1> + <var:N> * <var:M> ; <var:N> := <nat:4> + <var:N> * <var:M> ; <var:N> := <var:N> * <var:M> ; <var:N> := <nat:3> + <var:N> * <var:M> {{ <var:N> = <nat:4> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:N> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:N> = <nat:4> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:N> = <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:N> = <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:N> = <nat:4> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 