\begin{document} \begin{theorem} We define the following set of commands as follows \begin{verbatim} <var:Q1> := <var:k> ; <var:Q2> := <var:Q1> * <var:k> ; <var:Q3> := <var:Q2> * <var:k> ; <var:Q0> := <nat:3> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:Q2> := <var:Q2> * <nat:2> ; <var:Q3> := <var:Q3> * <nat:3> ; <var:Y> := <var:Q3> <var:Y> := <var:Y> + <var:Q2> <var:Y> := <var:Y> + <var:Q1> <var:Y> := <var:Y> + <var:Q0> \end{verbatim} Assume $ <var:k> = <var:i> $ before the execution of our list of commands it must be that we have $ <var:Y> = <nat:3> \times <var:i> ^ <nat:3> + <nat:2> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:3> $ . \end{theorem} \begin{proof} The argument for this set of instructions is evident using standard Hoare reasoning . Observing the subsequent steps in the set of commands , \begin{eqnarray} \{ <var:k> = <var:i> \} \, <var:Q1> := <var:k> \, \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \} \\ \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \} \, <var:Q2> := <var:Q1> * <var:k> \, \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \land <var:Q2> = <var:i> ^ <nat:2> \} \\ \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \land <var:Q2> = <var:i> ^ <nat:2> \} \, <var:Q3> := <var:Q2> * <var:k> \, \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \land <var:Q2> = <var:i> ^ <nat:2> \land <var:Q3> = <var:i> ^ <nat:3> \} \end{eqnarray} This is guaranteed using the assignment scheme found in typical Hoare reasoning . Moving onward , we see \begin{eqnarray} \{ <var:k> = <var:i> \} \, <var:Q1> := <var:k> \, \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \} \\ \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \} \, <var:Q2> := <var:Q1> * <var:k> \, \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \land <var:Q2> = <var:i> ^ <nat:2> \} \end{eqnarray} Taking another step toward the upcoming pieces of code seen in the program , \begin{eqnarray} \{ <var:k> = <var:i> \} \, <var:Q1> := <var:k> \, \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \} \\ \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \} \, <var:Q2> := <var:Q1> * <var:k> \, \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \land <var:Q2> = <var:i> ^ <nat:2> \} \\ \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \land <var:Q2> = <var:i> ^ <nat:2> \} \, <var:Q3> := <var:Q2> * <var:k> \, \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \land <var:Q2> = <var:i> ^ <nat:2> \land <var:Q3> = <var:i> ^ <nat:3> \} \\ \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \land <var:Q2> = <var:i> ^ <nat:2> \land <var:Q3> = <var:i> ^ <nat:3> \} \, <var:Q0> := <nat:3> \, \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \land <var:Q2> = <var:i> ^ <nat:2> \land <var:Q3> = <var:i> ^ <nat:3> \land <var:Q0> = <nat:3> \} \\ \{ <var:k> = <var:i> \land <var:Q1> = <var:i> \land <var:Q2> = <var:i> ^ <nat:2> \land <var:Q3> = <var:i> ^ <nat:3> \land <var:Q0> = <nat:3> \} \, <var:Q1> := <var:Q1> * <nat:4> \, \{ <var:k> = <var:i> \land <var:Q1> = <nat:4> * <var:i> \land <var:Q2> = <var:i> ^ <nat:2> \land <var:Q3> = <var:i> ^ <nat:3> \land <var:Q0> = <nat:3> \} \\ \{ <var:k> = <var:i> \land <var:Q1> = <nat:4> * <var:i> \land <var:Q2> = <var:i> ^ <nat:2> \land <var:Q3> = <var:i> ^ <nat:3> \land <var:Q0> = <nat:3> \} \, <var:Q2> := <var:Q2> * <nat:2> \, \{ <var:k> = <var:i> \land <var:Q1> = <nat:4> * <var:i> \land <var:Q2> = <nat:2> * <var:i> ^ <nat:2> \land <var:Q3> = <var:i> ^ <nat:3> \land <var:Q0> = <nat:3> \} \end{eqnarray} This is rigorously given by the variable assignmet inference rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:k> = <var:i> }} <var:Q1> := <var:k> ; <var:Q2> := <var:Q1> * <var:k> ; <var:Q3> := <var:Q2> * <var:k> ; <var:Q0> := <nat:3> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:Q2> := <var:Q2> * <nat:2> ; <var:Q3> := <var:Q3> * <nat:3> ; <var:Y> := <var:Q3> <var:Y> := <var:Y> + <var:Q2> <var:Y> := <var:Y> + <var:Q1> <var:Y> := <var:Y> + <var:Q0> {{ <var:Y> = <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:i> /\ <var:Q1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:i> /\ <var:Q1> = <var:i> /\ <var:Q2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:i> /\ <var:Q1> = <var:i> /\ <var:Q2> = <var:i> ^ <nat:2> /\ <var:Q3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:i> /\ <var:Q1> = <var:i> /\ <var:Q2> = <var:i> ^ <nat:2> /\ <var:Q3> = <var:i> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:i> /\ <var:Q1> = <nat:4> * <var:i> /\ <var:Q2> = <var:i> ^ <nat:2> /\ <var:Q3> = <var:i> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:i> /\ <var:Q1> = <nat:4> * <var:i> /\ <var:Q2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:Q3> = <var:i> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:i> /\ <var:Q1> = <nat:4> * <var:i> /\ <var:Q2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:Q3> = <nat:3> * <var:i> ^ <nat:3> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:i> /\ <var:Q1> = <nat:4> * <var:i> /\ <var:Q2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:Q0> = <nat:3> /\ <var:Y> = <nat:3> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:i> /\ <var:Q1> = <nat:4> * <var:i> /\ <var:Q0> = <nat:3> /\ <var:Y> = <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:i> /\ <var:Q0> = <nat:3> /\ <var:Y> = <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:i> /\ <var:Y> = <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 