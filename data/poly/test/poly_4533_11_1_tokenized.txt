\begin{document} \begin{theorem} Consider a segment of code : \begin{verbatim} <var:M1> := <var:Z> ; <var:M2> := <var:M1> * <var:Z> ; <var:M3> := <var:M2> * <var:Z> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:7> ; <var:M2> := <var:M2> * <nat:1> ; <var:M3> := <var:M3> * <nat:9> ; <var:K> := <var:M3> <var:K> := <var:K> + <var:M2> <var:K> := <var:K> + <var:M1> <var:K> := <var:K> + <var:M0> \end{verbatim} Assume $ <var:Z> = <var:n> $ ( given all integers $ <var:n> $ ) before running our series of commands then we have $ <var:K> = <nat:9> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:7> \times <var:n> + <nat:4> $ after set of instructions has executed . \end{theorem} \begin{proof} Applying typical Hoare logic gives : \begin{eqnarray} \{ <var:Z> = <var:n> \} \\ <var:M1> := <var:Z> ; \\ \{ <var:Z> = <var:n> \land <var:M1> = <var:n> \} \\ <var:M2> := <var:M1> * <var:Z> ; \\ \{ <var:Z> = <var:n> \land <var:M1> = <var:n> \land <var:M2> = <var:n> ^ <nat:2> \} \\ <var:M3> := <var:M2> * <var:Z> ; \\ \{ <var:Z> = <var:n> \land <var:M1> = <var:n> \land <var:M2> = <var:n> ^ <nat:2> \land <var:M3> = <var:n> ^ <nat:3> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:Z> = <var:n> \land <var:M1> = <var:n> \land <var:M2> = <var:n> ^ <nat:2> \land <var:M3> = <var:n> ^ <nat:3> \land <var:M0> = <nat:4> \} \\ <var:M1> := <var:M1> * <nat:7> ; \\ \{ <var:Z> = <var:n> \land <var:M1> = <nat:7> \cdot <var:n> \land <var:M2> = <var:n> ^ <nat:2> \land <var:M3> = <var:n> ^ <nat:3> \land <var:M0> = <nat:4> \} \\ <var:M2> := <var:M2> * <nat:1> ; \\ \{ <var:Z> = <var:n> \land <var:M1> = <nat:7> \cdot <var:n> \land <var:M2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:M3> = <var:n> ^ <nat:3> \land <var:M0> = <nat:4> \} \\ <var:M3> := <var:M3> * <nat:9> ; \\ \{ <var:Z> = <var:n> \land <var:M1> = <nat:7> \cdot <var:n> \land <var:M2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:M3> = <nat:9> \cdot <var:n> ^ <nat:3> \land <var:M0> = <nat:4> \} \\ <var:K> := <var:M3> \\ \{ <var:Z> = <var:n> \land <var:M1> = <nat:7> \cdot <var:n> \land <var:M2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:M0> = <nat:4> \land <var:K> = <nat:9> \cdot <var:n> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:M2> \\ \{ <var:Z> = <var:n> \land <var:M1> = <nat:7> \cdot <var:n> \land <var:M0> = <nat:4> \land <var:K> = <nat:9> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:M1> \\ \{ <var:Z> = <var:n> \land <var:M0> = <nat:4> \land <var:K> = <nat:9> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:7> \cdot <var:n> \} \\ <var:K> := <var:K> + <var:M0> \\ \{ <var:Z> = <var:n> \land <var:K> = <nat:9> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:7> \cdot <var:n> + <nat:4> \} \end{eqnarray} As a consequence , the code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:Z> = <var:n> }} <var:M1> := <var:Z> ; <var:M2> := <var:M1> * <var:Z> ; <var:M3> := <var:M2> * <var:Z> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:7> ; <var:M2> := <var:M2> * <nat:1> ; <var:M3> := <var:M3> * <nat:9> ; <var:K> := <var:M3> <var:K> := <var:K> + <var:M2> <var:K> := <var:K> + <var:M1> <var:K> := <var:K> + <var:M0> {{ <var:K> = <nat:9> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:7> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:M1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:M1> = <var:n> /\ <var:M2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:M1> = <var:n> /\ <var:M2> = <var:n> ^ <nat:2> /\ <var:M3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:M1> = <var:n> /\ <var:M2> = <var:n> ^ <nat:2> /\ <var:M3> = <var:n> ^ <nat:3> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:M1> = <nat:7> * <var:n> /\ <var:M2> = <var:n> ^ <nat:2> /\ <var:M3> = <var:n> ^ <nat:3> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:M1> = <nat:7> * <var:n> /\ <var:M2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:M3> = <var:n> ^ <nat:3> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:M1> = <nat:7> * <var:n> /\ <var:M2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:M3> = <nat:9> * <var:n> ^ <nat:3> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:M1> = <nat:7> * <var:n> /\ <var:M2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:M0> = <nat:4> /\ <var:K> = <nat:9> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:M1> = <nat:7> * <var:n> /\ <var:M0> = <nat:4> /\ <var:K> = <nat:9> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:M0> = <nat:4> /\ <var:K> = <nat:9> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:K> = <nat:9> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:7> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 