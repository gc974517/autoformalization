\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:3> ; <var:R> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:J> = <var:a> $ prior to the execution of this code it must be that we see $ <var:R> = <nat:3> $ once series of commands has executed . \end{theorem} \begin{proof} Using typical Hoare reasoning produces : \begin{eqnarray} \{ <var:J> = <var:a> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:J> = <var:a> \land <var:g0> = <nat:3> \} \\ <var:R> := <var:g0> \\ \{ <var:J> = <var:a> \land <var:R> = <nat:3> \} \end{eqnarray} Therefore , this series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:3> ; <var:R> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:J> = <var:a> }} <def:poly> {{ <var:R> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:R> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 