\begin{document} \begin{theorem} We define a program as \begin{verbatim} <var:j> := <nat:3> ; <var:j> := <var:j> * <var:a> ; <var:j> := <nat:1> + <var:j> * <var:a> \end{verbatim} Allow that we have $ <var:a> = <var:s> $ before interpreting our set of instructions it follows that we see $ <var:j> = <nat:3> \cdot <var:s> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The argument for the series of commands can be accomplished by standard Hoare reasoning . Moving forward , we see the binding statement binding $ <nat:3> $ as $ <var:j>$ . This forwards the condition $ \{ <var:a> = <var:s> \} $ toward the postcondition $ \{ <var:a> = <var:s> \land <var:j> = <nat:3> \} $ . Shifting focus toward the upcoming statement contained in our list of commands , we have the binding command letting $ <var:j> * <var:a> $ to $ <var:j>$ . This code advances $ \{ <var:a> = <var:s> \land <var:j> = <nat:3> \} $ into $ \{ <var:a> = <var:s> \land <var:j> = <nat:3> \cdot <var:s> + \} $ . This is known to be sound by the assignment scheme of typical Hoare techniques . Paying attention to the following statement in the program , we have the variable assignmet code \verb | <var:j> := <nat:1> + <var:j> * <var:a> | . This code redefines $ \{ <var:a> = <var:s> \land <var:j> = <nat:3> \cdot <var:s> + \} $ toward the postcondition $ \{ <var:a> = <var:s> \land <var:j> = <nat:3> \cdot <var:s> ^ <nat:2> + <nat:1> \} $ . This is rigorously given by the assignment law defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:a> = <var:s> }} <var:j> := <nat:3> ; <var:j> := <var:j> * <var:a> ; <var:j> := <nat:1> + <var:j> * <var:a> {{ <var:j> = <nat:3> * <var:s> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:j> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:j> = <nat:3> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:s> /\ <var:j> = <nat:3> * <var:s> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 