\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:d> ; <var:e2> := <var:e1> * <var:d> ; <var:e3> := <var:e2> * <var:d> ; <var:e4> := <var:e3> * <var:d> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:4> ; <var:e2> := <var:e2> * <nat:2> ; <var:e3> := <var:e3> * <nat:3> ; <var:e4> := <var:e4> * <nat:2> ; <var:V> := <var:e4> <var:V> := <var:V> + <var:e3> <var:V> := <var:V> + <var:e2> <var:V> := <var:V> + <var:e1> <var:V> := <var:V> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Given , given all positive coefficients $ <var:Y> $ , that $ <var:d> = <var:Y> $ before executing the list of instructions , then we see $ <var:V> = <nat:2> \cdot <var:Y> ^ <nat:4> + <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:3> $ when set of commands has terminated . \end{theorem} \begin{proof} Let this decorated set of instructions . \begin{eqnarray} \{ <var:d> = <var:Y> \} \\ <var:e1> := <var:d> ; \\ \{ <var:d> = <var:Y> \land <var:e1> = <var:Y> \} \\ <var:e2> := <var:e1> * <var:d> ; \\ \{ <var:d> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:d> ; \\ \{ <var:d> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \land <var:e3> = <var:Y> ^ <nat:3> \} \\ <var:e4> := <var:e3> * <var:d> ; \\ \{ <var:d> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \land <var:e3> = <var:Y> ^ <nat:3> \land <var:e4> = <var:Y> ^ <nat:4> \} \\ <var:e0> := <nat:3> ; \\ \{ <var:d> = <var:Y> \land <var:e1> = <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \land <var:e3> = <var:Y> ^ <nat:3> \land <var:e4> = <var:Y> ^ <nat:4> \land <var:e0> = <nat:3> \} \\ <var:e1> := <var:e1> * <nat:4> ; \\ \{ <var:d> = <var:Y> \land <var:e1> = <nat:4> \times <var:Y> \land <var:e2> = <var:Y> ^ <nat:2> \land <var:e3> = <var:Y> ^ <nat:3> \land <var:e4> = <var:Y> ^ <nat:4> \land <var:e0> = <nat:3> \} \\ <var:e2> := <var:e2> * <nat:2> ; \\ \{ <var:d> = <var:Y> \land <var:e1> = <nat:4> \times <var:Y> \land <var:e2> = <nat:2> \times <var:Y> ^ <nat:2> \land <var:e3> = <var:Y> ^ <nat:3> \land <var:e4> = <var:Y> ^ <nat:4> \land <var:e0> = <nat:3> \} \\ <var:e3> := <var:e3> * <nat:3> ; \\ \{ <var:d> = <var:Y> \land <var:e1> = <nat:4> \times <var:Y> \land <var:e2> = <nat:2> \times <var:Y> ^ <nat:2> \land <var:e3> = <nat:3> \times <var:Y> ^ <nat:3> \land <var:e4> = <var:Y> ^ <nat:4> \land <var:e0> = <nat:3> \} \\ <var:e4> := <var:e4> * <nat:2> ; \\ \{ <var:d> = <var:Y> \land <var:e1> = <nat:4> \times <var:Y> \land <var:e2> = <nat:2> \times <var:Y> ^ <nat:2> \land <var:e3> = <nat:3> \times <var:Y> ^ <nat:3> \land <var:e4> = <nat:2> \times <var:Y> ^ <nat:4> \land <var:e0> = <nat:3> \} \\ <var:V> := <var:e4> \\ \{ <var:d> = <var:Y> \land <var:e1> = <nat:4> \times <var:Y> \land <var:e2> = <nat:2> \times <var:Y> ^ <nat:2> \land <var:e3> = <nat:3> \times <var:Y> ^ <nat:3> \land <var:e0> = <nat:3> \land <var:V> = <nat:2> \times <var:Y> ^ <nat:4> \} \\ <var:V> := <var:V> + <var:e3> \\ \{ <var:d> = <var:Y> \land <var:e1> = <nat:4> \times <var:Y> \land <var:e2> = <nat:2> \times <var:Y> ^ <nat:2> \land <var:e0> = <nat:3> \land <var:V> = <nat:2> \times <var:Y> ^ <nat:4> + <nat:3> \times <var:Y> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:e2> \\ \{ <var:d> = <var:Y> \land <var:e1> = <nat:4> \times <var:Y> \land <var:e0> = <nat:3> \land <var:V> = <nat:2> \times <var:Y> ^ <nat:4> + <nat:3> \times <var:Y> ^ <nat:3> + <nat:2> \times <var:Y> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:e1> \\ \{ <var:d> = <var:Y> \land <var:e0> = <nat:3> \land <var:V> = <nat:2> \times <var:Y> ^ <nat:4> + <nat:3> \times <var:Y> ^ <nat:3> + <nat:2> \times <var:Y> ^ <nat:2> + <nat:4> \times <var:Y> \} \\ <var:V> := <var:V> + <var:e0> \\ \{ <var:d> = <var:Y> \land <var:V> = <nat:2> \times <var:Y> ^ <nat:4> + <nat:3> \times <var:Y> ^ <nat:3> + <nat:2> \times <var:Y> ^ <nat:2> + <nat:4> \times <var:Y> + <nat:3> \} \end{eqnarray} Allowing interpreting the series of commands gives : \begin{eqnarray} \end{eqnarray} Using typical Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <var:e4> : string := " <var:e4> " . Definition <def:poly> := <var:e1> := <var:d> ; <var:e2> := <var:e1> * <var:d> ; <var:e3> := <var:e2> * <var:d> ; <var:e4> := <var:e3> * <var:d> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:4> ; <var:e2> := <var:e2> * <nat:2> ; <var:e3> := <var:e3> * <nat:3> ; <var:e4> := <var:e4> * <nat:2> ; <var:V> := <var:e4> <var:V> := <var:V> + <var:e3> <var:V> := <var:V> + <var:e2> <var:V> := <var:V> + <var:e1> <var:V> := <var:V> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:d> = <var:Y> }} <def:poly> {{ <var:V> = <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:e1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:e1> = <var:Y> /\ <var:e2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:e1> = <var:Y> /\ <var:e2> = <var:Y> ^ <nat:2> /\ <var:e3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:e1> = <var:Y> /\ <var:e2> = <var:Y> ^ <nat:2> /\ <var:e3> = <var:Y> ^ <nat:3> /\ <var:e4> = <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:e1> = <var:Y> /\ <var:e2> = <var:Y> ^ <nat:2> /\ <var:e3> = <var:Y> ^ <nat:3> /\ <var:e4> = <var:Y> ^ <nat:4> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:e1> = <nat:4> * <var:Y> /\ <var:e2> = <var:Y> ^ <nat:2> /\ <var:e3> = <var:Y> ^ <nat:3> /\ <var:e4> = <var:Y> ^ <nat:4> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:e1> = <nat:4> * <var:Y> /\ <var:e2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:e3> = <var:Y> ^ <nat:3> /\ <var:e4> = <var:Y> ^ <nat:4> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:e1> = <nat:4> * <var:Y> /\ <var:e2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:Y> ^ <nat:3> /\ <var:e4> = <var:Y> ^ <nat:4> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:e1> = <nat:4> * <var:Y> /\ <var:e2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:Y> ^ <nat:3> /\ <var:e4> = <nat:2> * <var:Y> ^ <nat:4> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:e1> = <nat:4> * <var:Y> /\ <var:e2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:Y> ^ <nat:3> /\ <var:e0> = <nat:3> /\ <var:V> = <nat:2> * <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:e1> = <nat:4> * <var:Y> /\ <var:e2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:e0> = <nat:3> /\ <var:V> = <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:e1> = <nat:4> * <var:Y> /\ <var:e0> = <nat:3> /\ <var:V> = <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:e0> = <nat:3> /\ <var:V> = <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:Y> /\ <var:V> = <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 