\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:4> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:h> ; <var:g> := <var:m1> ; <var:g> := <var:g> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( for all natural numbers $ <var:f> $ ) that we have $ <var:h> = <var:f> $ before running our set of instructions then we have $ <var:g> = <nat:1> * <var:f> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands can be accomplished with typical Hoare logic . Shifting focus toward the subsequent piece of code in our list of commands , we see the variable binding command \verb | <var:m0> := <nat:4> ; | . This advances $ \{ <var:h> = <var:f> \} $ to the postcondition $ \{ <var:h> = <var:f> \land <var:m0> = <nat:4> \} $ . This is shown using the assignment law in standard Hoare techniques . Moving on to the subsequent step contained in the set of instructions , we see the variable binding line giving $ <nat:1> $ toward $ <var:m1>$ . This advances the precondition $ \{ <var:h> = <var:f> \land <var:m0> = <nat:4> \} $ into the postcondition $ \{ <var:h> = <var:f> \land <var:m0> = <nat:4> \land <var:m1> = <nat:1> \} $ . Advancing , the variable assignmet code \verb | <var:m1> := <var:m1> * <var:h> ; | . This advances the precondition $ \{ <var:h> = <var:f> \land <var:m0> = <nat:4> \land <var:m1> = <nat:1> \} $ into $ \{ <var:h> = <var:f> \land <var:m0> = <nat:4> \land <var:m1> = <nat:1> \cdot <var:f> \} $ . Looking at the following piece of code contained in the code , we see the variable assignmet line letting $ <var:m1> $ as $ <var:g>$ . This redefines the precondition $ \{ <var:h> = <var:f> \land <var:m0> = <nat:4> \land <var:m1> = <nat:1> \cdot <var:f> \} $ as the condition $ \{ <var:h> = <var:f> \land <var:m0> = <nat:4> \land <var:g> = <nat:1> \cdot <var:f> \} $ . Immediately after , the environment update line \verb | <var:g> := <var:g> + <var:m0> | . This command takes the condition $ \{ <var:h> = <var:f> \land <var:m0> = <nat:4> \land <var:g> = <nat:1> \cdot <var:f> \} $ toward the postcondition $ \{ <var:h> = <var:f> \land <var:g> = <nat:1> \cdot <var:f> + <nat:4> \} $ . This is known to be sound through the assignment law from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m0> := <nat:4> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:h> ; <var:g> := <var:m1> ; <var:g> := <var:g> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:h> = <var:f> }} <def:poly> {{ <var:g> = <nat:1> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:m0> = <nat:4> /\ <var:g> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:g> = <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 