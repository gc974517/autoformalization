\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} such that \begin{verbatim} <var:G1> := <var:T> ; <var:G2> := <var:G1> * <var:T> ; <var:G3> := <var:G2> * <var:T> ; <var:G4> := <var:G3> * <var:T> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:4> ; <var:G2> := <var:G2> * <nat:1> ; <var:G4> := <var:G4> * <nat:4> ; <var:Y> := <var:G4> <var:Y> := <var:Y> + <var:G2> <var:Y> := <var:Y> + <var:G1> <var:Y> := <var:Y> + <var:G0> \end{verbatim} Assuming that we have $ <var:T> = <var:M> $ ahead of evaluating the segment of code , then $ <var:Y> = <nat:4> \times <var:M> ^ <nat:4> + <nat:1> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:1> $ when code segment has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:M> \} \\ <var:G1> := <var:T> ; \\ \{ <var:T> = <var:M> \land <var:G1> = <var:M> \} \\ <var:G2> := <var:G1> * <var:T> ; \\ \{ <var:T> = <var:M> \land <var:G1> = <var:M> \land <var:G2> = <var:M> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:T> ; \\ \{ <var:T> = <var:M> \land <var:G1> = <var:M> \land <var:G2> = <var:M> ^ <nat:2> \land <var:G3> = <var:M> ^ <nat:3> \} \\ <var:G4> := <var:G3> * <var:T> ; \\ \{ <var:T> = <var:M> \land <var:G1> = <var:M> \land <var:G2> = <var:M> ^ <nat:2> \land <var:G3> = <var:M> ^ <nat:3> \land <var:G4> = <var:M> ^ <nat:4> \} \\ <var:G0> := <nat:1> ; \\ \{ <var:T> = <var:M> \land <var:G1> = <var:M> \land <var:G2> = <var:M> ^ <nat:2> \land <var:G3> = <var:M> ^ <nat:3> \land <var:G4> = <var:M> ^ <nat:4> \land <var:G0> = <nat:1> \} \\ <var:G1> := <var:G1> * <nat:4> ; \\ \{ <var:T> = <var:M> \land <var:G1> = <nat:4> * <var:M> \land <var:G2> = <var:M> ^ <nat:2> \land <var:G3> = <var:M> ^ <nat:3> \land <var:G4> = <var:M> ^ <nat:4> \land <var:G0> = <nat:1> \} \\ <var:G2> := <var:G2> * <nat:1> ; \\ \{ <var:T> = <var:M> \land <var:G1> = <nat:4> * <var:M> \land <var:G2> = <nat:1> * <var:M> ^ <nat:2> \land <var:G3> = <var:M> ^ <nat:3> \land <var:G4> = <var:M> ^ <nat:4> \land <var:G0> = <nat:1> \} \\ <var:G4> := <var:G4> * <nat:4> ; \\ \{ <var:T> = <var:M> \land <var:G1> = <nat:4> * <var:M> \land <var:G2> = <nat:1> * <var:M> ^ <nat:2> \land <var:G3> = <var:M> ^ <nat:3> \land <var:G4> = <nat:4> * <var:M> ^ <nat:4> \land <var:G0> = <nat:1> \} \\ <var:Y> := <var:G4> \\ \{ <var:T> = <var:M> \land <var:G1> = <nat:4> * <var:M> \land <var:G2> = <nat:1> * <var:M> ^ <nat:2> \land <var:G3> = <var:M> ^ <nat:3> \land <var:G0> = <nat:1> \land <var:Y> = <nat:4> * <var:M> ^ <nat:4> \} \\ <var:Y> := <var:Y> + <var:G2> \\ \{ <var:T> = <var:M> \land <var:G1> = <nat:4> * <var:M> \land <var:G0> = <nat:1> \land <var:Y> = <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:G1> \\ \{ <var:T> = <var:M> \land <var:G0> = <nat:1> \land <var:Y> = <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:2> + <nat:4> * <var:M> \} \\ <var:Y> := <var:Y> + <var:G0> \\ \{ <var:T> = <var:M> \land <var:Y> = <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <var:G4> : string := " <var:G4> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:T> = <var:M> }} <var:G1> := <var:T> ; <var:G2> := <var:G1> * <var:T> ; <var:G3> := <var:G2> * <var:T> ; <var:G4> := <var:G3> * <var:T> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:4> ; <var:G2> := <var:G2> * <nat:1> ; <var:G4> := <var:G4> * <nat:4> ; <var:Y> := <var:G4> <var:Y> := <var:Y> + <var:G2> <var:Y> := <var:Y> + <var:G1> <var:Y> := <var:Y> + <var:G0> {{ <var:Y> = <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:G1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:G1> = <var:M> /\ <var:G2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:G1> = <var:M> /\ <var:G2> = <var:M> ^ <nat:2> /\ <var:G3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:G1> = <var:M> /\ <var:G2> = <var:M> ^ <nat:2> /\ <var:G3> = <var:M> ^ <nat:3> /\ <var:G4> = <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:G1> = <var:M> /\ <var:G2> = <var:M> ^ <nat:2> /\ <var:G3> = <var:M> ^ <nat:3> /\ <var:G4> = <var:M> ^ <nat:4> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:G1> = <nat:4> * <var:M> /\ <var:G2> = <var:M> ^ <nat:2> /\ <var:G3> = <var:M> ^ <nat:3> /\ <var:G4> = <var:M> ^ <nat:4> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:G1> = <nat:4> * <var:M> /\ <var:G2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:G3> = <var:M> ^ <nat:3> /\ <var:G4> = <var:M> ^ <nat:4> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:G1> = <nat:4> * <var:M> /\ <var:G2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:G3> = <var:M> ^ <nat:3> /\ <var:G4> = <nat:4> * <var:M> ^ <nat:4> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:G1> = <nat:4> * <var:M> /\ <var:G2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:G3> = <var:M> ^ <nat:3> /\ <var:G0> = <nat:1> /\ <var:Y> = <nat:4> * <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:G1> = <nat:4> * <var:M> /\ <var:G0> = <nat:1> /\ <var:Y> = <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:G0> = <nat:1> /\ <var:Y> = <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:2> + <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:M> /\ <var:Y> = <nat:4> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 