\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:a1> := <var:O> ; <var:a2> := <var:a1> * <var:O> ; <var:a3> := <var:a2> * <var:O> ; <var:a4> := <var:a3> * <var:O> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:4> ; <var:a2> := <var:a2> * <nat:4> ; <var:a3> := <var:a3> * <nat:3> ; <var:a4> := <var:a4> * <nat:4> ; <var:Q> := <var:a4> <var:Q> := <var:Q> + <var:a3> <var:Q> := <var:Q> + <var:a2> <var:Q> := <var:Q> + <var:a1> <var:Q> := <var:Q> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:O> = <var:b> $ , for $ <var:b> \in \mathbb{N} $ , ahead of running our series of instructions , it follows that we see $ <var:Q> = <nat:4> \cdot <var:b> ^ <nat:4> + <nat:3> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:2> $ when series of instructions is done executing . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions can be demonstrated using standard Hoare techniques . Moving forward to the proceeding bits of codecontained in our set of commands , \[ \begin{tabular} {rcl} \{ <var:O> = <var:b> \} & <var:a1> := <var:O> & \{ <var:O> = <var:b> \land <var:a1> = <var:b> \} \\ \{ <var:O> = <var:b> \land <var:a1> = <var:b> \} & <var:a2> := <var:a1> * <var:O> & \{ <var:O> = <var:b> \land <var:a1> = <var:b> \land <var:a2> = <var:b> ^ <nat:2> \} \end{tabular} This is deduced through the inference rule found in usual Hoare logic . After , we have \[ \begin{tabular} {rcl} \{ <var:O> = <var:b> \} & <var:a1> := <var:O> & \{ <var:O> = <var:b> \land <var:a1> = <var:b> \} \\ \{ <var:O> = <var:b> \land <var:a1> = <var:b> \} & <var:a2> := <var:a1> * <var:O> & \{ <var:O> = <var:b> \land <var:a1> = <var:b> \land <var:a2> = <var:b> ^ <nat:2> \} \\ \{ <var:O> = <var:b> \land <var:a1> = <var:b> \land <var:a2> = <var:b> ^ <nat:2> \} & <var:a3> := <var:a2> * <var:O> & \{ <var:O> = <var:b> \land <var:a1> = <var:b> \land <var:a2> = <var:b> ^ <nat:2> \land <var:a3> = <var:b> ^ <nat:3> \} \\ \{ <var:O> = <var:b> \land <var:a1> = <var:b> \land <var:a2> = <var:b> ^ <nat:2> \land <var:a3> = <var:b> ^ <nat:3> \} & <var:a4> := <var:a3> * <var:O> & \{ <var:O> = <var:b> \land <var:a1> = <var:b> \land <var:a2> = <var:b> ^ <nat:2> \land <var:a3> = <var:b> ^ <nat:3> \land <var:a4> = <var:b> ^ <nat:4> \} \\ \{ <var:O> = <var:b> \land <var:a1> = <var:b> \land <var:a2> = <var:b> ^ <nat:2> \land <var:a3> = <var:b> ^ <nat:3> \land <var:a4> = <var:b> ^ <nat:4> \} & <var:a0> := <nat:2> & \{ <var:O> = <var:b> \land <var:a1> = <var:b> \land <var:a2> = <var:b> ^ <nat:2> \land <var:a3> = <var:b> ^ <nat:3> \land <var:a4> = <var:b> ^ <nat:4> \land <var:a0> = <nat:2> \} \\ \{ <var:O> = <var:b> \land <var:a1> = <var:b> \land <var:a2> = <var:b> ^ <nat:2> \land <var:a3> = <var:b> ^ <nat:3> \land <var:a4> = <var:b> ^ <nat:4> \land <var:a0> = <nat:2> \} & <var:a1> := <var:a1> * <nat:4> & \{ <var:O> = <var:b> \land <var:a1> = <nat:4> \times <var:b> \land <var:a2> = <var:b> ^ <nat:2> \land <var:a3> = <var:b> ^ <nat:3> \land <var:a4> = <var:b> ^ <nat:4> \land <var:a0> = <nat:2> \} \\ \{ <var:O> = <var:b> \land <var:a1> = <nat:4> \times <var:b> \land <var:a2> = <var:b> ^ <nat:2> \land <var:a3> = <var:b> ^ <nat:3> \land <var:a4> = <var:b> ^ <nat:4> \land <var:a0> = <nat:2> \} & <var:a2> := <var:a2> * <nat:4> & \{ <var:O> = <var:b> \land <var:a1> = <nat:4> \times <var:b> \land <var:a2> = <nat:4> \times <var:b> ^ <nat:2> \land <var:a3> = <var:b> ^ <nat:3> \land <var:a4> = <var:b> ^ <nat:4> \land <var:a0> = <nat:2> \} \\ \{ <var:O> = <var:b> \land <var:a1> = <nat:4> \times <var:b> \land <var:a2> = <nat:4> \times <var:b> ^ <nat:2> \land <var:a3> = <var:b> ^ <nat:3> \land <var:a4> = <var:b> ^ <nat:4> \land <var:a0> = <nat:2> \} & <var:a3> := <var:a3> * <nat:3> & \{ <var:O> = <var:b> \land <var:a1> = <nat:4> \times <var:b> \land <var:a2> = <nat:4> \times <var:b> ^ <nat:2> \land <var:a3> = <nat:3> \times <var:b> ^ <nat:3> \land <var:a4> = <var:b> ^ <nat:4> \land <var:a0> = <nat:2> \} \end{tabular} This is sound using the environment update rule defined in usual Hoare reasoning . Moving on to the next lines contained in the segment of code , we see \[ \begin{tabular} {rcl} \{ <var:O> = <var:b> \} & <var:a1> := <var:O> & \{ <var:O> = <var:b> \land <var:a1> = <var:b> \} \\ \{ <var:O> = <var:b> \land <var:a1> = <var:b> \} & <var:a2> := <var:a1> * <var:O> & \{ <var:O> = <var:b> \land <var:a1> = <var:b> \land <var:a2> = <var:b> ^ <nat:2> \} \end{tabular} Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:O> = <var:b> \} & <var:a1> := <var:O> & \{ <var:O> = <var:b> \land <var:a1> = <var:b> \} \\ \{ <var:O> = <var:b> \land <var:a1> = <var:b> \} & <var:a2> := <var:a1> * <var:O> & \{ <var:O> = <var:b> \land <var:a1> = <var:b> \land <var:a2> = <var:b> ^ <nat:2> \} \end{tabular} This is shown using the variable assignmet scheme given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <var:a4> : string := " <var:a4> " . Definition <def:poly> := <var:a1> := <var:O> ; <var:a2> := <var:a1> * <var:O> ; <var:a3> := <var:a2> * <var:O> ; <var:a4> := <var:a3> * <var:O> ; <var:a0> := <nat:2> ; <var:a1> := <var:a1> * <nat:4> ; <var:a2> := <var:a2> * <nat:4> ; <var:a3> := <var:a3> * <nat:3> ; <var:a4> := <var:a4> * <nat:4> ; <var:Q> := <var:a4> <var:Q> := <var:Q> + <var:a3> <var:Q> := <var:Q> + <var:a2> <var:Q> := <var:Q> + <var:a1> <var:Q> := <var:Q> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:O> = <var:b> }} <def:poly> {{ <var:Q> = <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a1> = <var:b> /\ <var:a2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a1> = <var:b> /\ <var:a2> = <var:b> ^ <nat:2> /\ <var:a3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a1> = <var:b> /\ <var:a2> = <var:b> ^ <nat:2> /\ <var:a3> = <var:b> ^ <nat:3> /\ <var:a4> = <var:b> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a1> = <var:b> /\ <var:a2> = <var:b> ^ <nat:2> /\ <var:a3> = <var:b> ^ <nat:3> /\ <var:a4> = <var:b> ^ <nat:4> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a1> = <nat:4> * <var:b> /\ <var:a2> = <var:b> ^ <nat:2> /\ <var:a3> = <var:b> ^ <nat:3> /\ <var:a4> = <var:b> ^ <nat:4> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a1> = <nat:4> * <var:b> /\ <var:a2> = <nat:4> * <var:b> ^ <nat:2> /\ <var:a3> = <var:b> ^ <nat:3> /\ <var:a4> = <var:b> ^ <nat:4> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a1> = <nat:4> * <var:b> /\ <var:a2> = <nat:4> * <var:b> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:b> ^ <nat:3> /\ <var:a4> = <var:b> ^ <nat:4> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a1> = <nat:4> * <var:b> /\ <var:a2> = <nat:4> * <var:b> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:b> ^ <nat:3> /\ <var:a4> = <nat:4> * <var:b> ^ <nat:4> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a1> = <nat:4> * <var:b> /\ <var:a2> = <nat:4> * <var:b> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:b> ^ <nat:3> /\ <var:a0> = <nat:2> /\ <var:Q> = <nat:4> * <var:b> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a1> = <nat:4> * <var:b> /\ <var:a2> = <nat:4> * <var:b> ^ <nat:2> /\ <var:a0> = <nat:2> /\ <var:Q> = <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a1> = <nat:4> * <var:b> /\ <var:a0> = <nat:2> /\ <var:Q> = <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:a0> = <nat:2> /\ <var:Q> = <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:Q> = <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 