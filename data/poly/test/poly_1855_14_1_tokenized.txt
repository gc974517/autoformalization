\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} as follows \begin{verbatim} <var:K1> := <var:W> ; <var:K2> := <var:K1> * <var:W> ; <var:K3> := <var:K2> * <var:W> ; <var:K4> := <var:K3> * <var:W> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:1> ; <var:K2> := <var:K2> * <nat:7> ; <var:K3> := <var:K3> * <nat:3> ; <var:K4> := <var:K4> * <nat:7> ; <var:N> := <var:K4> <var:N> := <var:N> + <var:K3> <var:N> := <var:N> + <var:K2> <var:N> := <var:N> + <var:K1> <var:N> := <var:N> + <var:K0> \end{verbatim} Allow it to be that $ <var:W> = <var:D> $ ahead of interpreting our program it must be that $ <var:N> = <nat:7> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:2> $ when segment of code is done executing . \end{theorem} \begin{proof} Proving correctness for the program is clear by Hoare techniques . Moving on , we have \verb | { <var:W> = <var:D> } <var:K1> := <var:W> { <var:W> = <var:D> \land <var:K1> = <var:D> } | , \verb | { <var:W> = <var:D> \land <var:K1> = <var:D> } <var:K2> := <var:K1> * <var:W> { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> } | , \verb | { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> } <var:K3> := <var:K2> * <var:W> { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K3> = <var:D> ^ <nat:3> } | , \verb | { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K3> = <var:D> ^ <nat:3> } <var:K4> := <var:K3> * <var:W> { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K3> = <var:D> ^ <nat:3> \land <var:K4> = <var:D> ^ <nat:4> } | , \verb | { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K3> = <var:D> ^ <nat:3> \land <var:K4> = <var:D> ^ <nat:4> } <var:K0> := <nat:2> { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K3> = <var:D> ^ <nat:3> \land <var:K4> = <var:D> ^ <nat:4> \land <var:K0> = <nat:2> } | , \verb | { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K3> = <var:D> ^ <nat:3> \land <var:K4> = <var:D> ^ <nat:4> \land <var:K0> = <nat:2> } <var:K1> := <var:K1> * <nat:1> { <var:W> = <var:D> \land <var:K1> = <nat:1> \times <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K3> = <var:D> ^ <nat:3> \land <var:K4> = <var:D> ^ <nat:4> \land <var:K0> = <nat:2> } | , \verb | { <var:W> = <var:D> \land <var:K1> = <nat:1> \times <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K3> = <var:D> ^ <nat:3> \land <var:K4> = <var:D> ^ <nat:4> \land <var:K0> = <nat:2> } <var:K2> := <var:K2> * <nat:7> { <var:W> = <var:D> \land <var:K1> = <nat:1> \times <var:D> \land <var:K2> = <nat:7> \times <var:D> ^ <nat:2> \land <var:K3> = <var:D> ^ <nat:3> \land <var:K4> = <var:D> ^ <nat:4> \land <var:K0> = <nat:2> } | and \verb | { <var:W> = <var:D> \land <var:K1> = <nat:1> \times <var:D> \land <var:K2> = <nat:7> \times <var:D> ^ <nat:2> \land <var:K3> = <var:D> ^ <nat:3> \land <var:K4> = <var:D> ^ <nat:4> \land <var:K0> = <nat:2> } <var:K3> := <var:K3> * <nat:3> { <var:W> = <var:D> \land <var:K1> = <nat:1> \times <var:D> \land <var:K2> = <nat:7> \times <var:D> ^ <nat:2> \land <var:K3> = <nat:3> \times <var:D> ^ <nat:3> \land <var:K4> = <var:D> ^ <nat:4> \land <var:K0> = <nat:2> } | . This is known to be sound by the scheme of standard Hoare reasoning . Honing in on the subsequent lines contained in our list of instructions , we see \verb | { <var:W> = <var:D> } <var:K1> := <var:W> { <var:W> = <var:D> \land <var:K1> = <var:D> } | , \verb | { <var:W> = <var:D> \land <var:K1> = <var:D> } <var:K2> := <var:K1> * <var:W> { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> } | , \verb | { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> } <var:K3> := <var:K2> * <var:W> { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K3> = <var:D> ^ <nat:3> } | and \verb | { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K3> = <var:D> ^ <nat:3> } <var:K4> := <var:K3> * <var:W> { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K3> = <var:D> ^ <nat:3> \land <var:K4> = <var:D> ^ <nat:4> } | . Taking another step toward the next steps contained in the list of commands , \verb | { <var:W> = <var:D> } <var:K1> := <var:W> { <var:W> = <var:D> \land <var:K1> = <var:D> } | and \verb | { <var:W> = <var:D> \land <var:K1> = <var:D> } <var:K2> := <var:K1> * <var:W> { <var:W> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> } | . This is rigorously given through the environment update law defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <var:K4> : string := " <var:K4> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:W> = <var:D> }} <var:K1> := <var:W> ; <var:K2> := <var:K1> * <var:W> ; <var:K3> := <var:K2> * <var:W> ; <var:K4> := <var:K3> * <var:W> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:1> ; <var:K2> := <var:K2> * <nat:7> ; <var:K3> := <var:K3> * <nat:3> ; <var:K4> := <var:K4> * <nat:7> ; <var:N> := <var:K4> <var:N> := <var:N> + <var:K3> <var:N> := <var:N> + <var:K2> <var:N> := <var:N> + <var:K1> <var:N> := <var:N> + <var:K0> {{ <var:N> = <nat:7> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:K1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:K1> = <var:D> /\ <var:K2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:K1> = <var:D> /\ <var:K2> = <var:D> ^ <nat:2> /\ <var:K3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:K1> = <var:D> /\ <var:K2> = <var:D> ^ <nat:2> /\ <var:K3> = <var:D> ^ <nat:3> /\ <var:K4> = <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:K1> = <var:D> /\ <var:K2> = <var:D> ^ <nat:2> /\ <var:K3> = <var:D> ^ <nat:3> /\ <var:K4> = <var:D> ^ <nat:4> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:K1> = <nat:1> * <var:D> /\ <var:K2> = <var:D> ^ <nat:2> /\ <var:K3> = <var:D> ^ <nat:3> /\ <var:K4> = <var:D> ^ <nat:4> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:K1> = <nat:1> * <var:D> /\ <var:K2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:K3> = <var:D> ^ <nat:3> /\ <var:K4> = <var:D> ^ <nat:4> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:K1> = <nat:1> * <var:D> /\ <var:K2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:K3> = <nat:3> * <var:D> ^ <nat:3> /\ <var:K4> = <var:D> ^ <nat:4> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:K1> = <nat:1> * <var:D> /\ <var:K2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:K3> = <nat:3> * <var:D> ^ <nat:3> /\ <var:K4> = <nat:7> * <var:D> ^ <nat:4> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:K1> = <nat:1> * <var:D> /\ <var:K2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:K3> = <nat:3> * <var:D> ^ <nat:3> /\ <var:K0> = <nat:2> /\ <var:N> = <nat:7> * <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:K1> = <nat:1> * <var:D> /\ <var:K2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:K0> = <nat:2> /\ <var:N> = <nat:7> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:K1> = <nat:1> * <var:D> /\ <var:K0> = <nat:2> /\ <var:N> = <nat:7> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:K0> = <nat:2> /\ <var:N> = <nat:7> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:D> /\ <var:N> = <nat:7> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 