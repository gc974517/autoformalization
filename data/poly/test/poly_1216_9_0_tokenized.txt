\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:6> ; <var:H1> := <nat:6> ; <var:H1> := <var:H1> * <var:s> ; <var:H2> := <nat:4> ; <var:H2> := <var:H2> * <var:s> ; <var:H2> := <var:H2> * <var:s> ; <var:u> := <var:H2> ; <var:u> := <var:u> + <var:H1> ; <var:u> := <var:u> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:s> = <var:z> $ prior to the evaluation of our program it holds that $ <var:u> = <nat:4> \cdot <var:z> ^ <nat:2> + <nat:6> \cdot <var:z> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:z> \} \\ <var:H0> := <nat:6> ; \\ \{ <var:s> = <var:z> \land <var:H0> = <nat:6> \} \\ <var:H1> := <nat:6> ; \\ \{ <var:s> = <var:z> \land <var:H0> = <nat:6> \land <var:H1> = <nat:6> \} \\ <var:H1> := <var:H1> * <var:s> ; \\ \{ <var:s> = <var:z> \land <var:H0> = <nat:6> \land <var:H1> = <nat:6> * <var:z> \} \\ <var:H2> := <nat:4> ; \\ \{ <var:s> = <var:z> \land <var:H0> = <nat:6> \land <var:H1> = <nat:6> * <var:z> \land <var:H2> = <nat:4> \} \\ <var:H2> := <var:H2> * <var:s> ; \\ \{ <var:s> = <var:z> \land <var:H0> = <nat:6> \land <var:H1> = <nat:6> * <var:z> \land <var:H2> = <nat:4> * <var:z> \} \\ <var:H2> := <var:H2> * <var:s> ; \\ \{ <var:s> = <var:z> \land <var:H0> = <nat:6> \land <var:H1> = <nat:6> * <var:z> \land <var:H2> = <nat:4> * <var:z> ^ <nat:2> \} \\ <var:u> := <var:H2> ; \\ \{ <var:s> = <var:z> \land <var:H0> = <nat:6> \land <var:H1> = <nat:6> * <var:z> \land <var:u> = <nat:4> * <var:z> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:H1> ; \\ \{ <var:s> = <var:z> \land <var:H0> = <nat:6> \land <var:u> = <nat:4> * <var:z> ^ <nat:2> + <nat:6> * <var:z> \} \\ <var:u> := <var:u> + <var:H0> \\ \{ <var:s> = <var:z> \land <var:u> = <nat:4> * <var:z> ^ <nat:2> + <nat:6> * <var:z> + <nat:6> \} \end{eqnarray} Utilizing typical Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <def:poly> := <var:H0> := <nat:6> ; <var:H1> := <nat:6> ; <var:H1> := <var:H1> * <var:s> ; <var:H2> := <nat:4> ; <var:H2> := <var:H2> * <var:s> ; <var:H2> := <var:H2> * <var:s> ; <var:u> := <var:H2> ; <var:u> := <var:u> + <var:H1> ; <var:u> := <var:u> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:s> = <var:z> }} <def:poly> {{ <var:u> = <nat:4> * <var:z> ^ <nat:2> + <nat:6> * <var:z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:6> * <var:z> /\ <var:H2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:6> * <var:z> /\ <var:H2> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:6> * <var:z> /\ <var:H2> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:6> * <var:z> /\ <var:u> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:H0> = <nat:6> /\ <var:u> = <nat:4> * <var:z> ^ <nat:2> + <nat:6> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:z> /\ <var:u> = <nat:4> * <var:z> ^ <nat:2> + <nat:6> * <var:z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 