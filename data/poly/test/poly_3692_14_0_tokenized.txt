\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:4> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:g> ; <var:h2> := <nat:4> ; <var:h2> := <var:h2> * <var:g> ; <var:h2> := <var:h2> * <var:g> ; <var:h3> := <nat:1> ; <var:h3> := <var:h3> * <var:g> ; <var:h3> := <var:h3> * <var:g> ; <var:h3> := <var:h3> * <var:g> ; <var:R> := <var:h3> ; <var:R> := <var:R> + <var:h2> ; <var:R> := <var:R> + <var:h1> ; <var:R> := <var:R> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:g> = <var:r> $ given some $ <var:r> $ before running the set of commands then we have $ <var:R> = <nat:1> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> + <nat:4> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning results in : \begin{eqnarray} \{ <var:g> = <var:r> \} \\ <var:h0> := <nat:4> ; \\ \{ <var:g> = <var:r> \land <var:h0> = <nat:4> \} \\ <var:h1> := <nat:1> ; \\ \{ <var:g> = <var:r> \land <var:h0> = <nat:4> \land <var:h1> = <nat:1> \} \\ <var:h1> := <var:h1> * <var:g> ; \\ \{ <var:g> = <var:r> \land <var:h0> = <nat:4> \land <var:h1> = <nat:1> \cdot <var:r> \} \\ <var:h2> := <nat:4> ; \\ \{ <var:g> = <var:r> \land <var:h0> = <nat:4> \land <var:h1> = <nat:1> \cdot <var:r> \land <var:h2> = <nat:4> \} \\ <var:h2> := <var:h2> * <var:g> ; \\ \{ <var:g> = <var:r> \land <var:h0> = <nat:4> \land <var:h1> = <nat:1> \cdot <var:r> \land <var:h2> = <nat:4> \cdot <var:r> \} \\ <var:h2> := <var:h2> * <var:g> ; \\ \{ <var:g> = <var:r> \land <var:h0> = <nat:4> \land <var:h1> = <nat:1> \cdot <var:r> \land <var:h2> = <nat:4> \cdot <var:r> ^ <nat:2> \} \\ <var:h3> := <nat:1> ; \\ \{ <var:g> = <var:r> \land <var:h0> = <nat:4> \land <var:h1> = <nat:1> \cdot <var:r> \land <var:h2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:h3> = <nat:1> \} \\ <var:h3> := <var:h3> * <var:g> ; \\ \{ <var:g> = <var:r> \land <var:h0> = <nat:4> \land <var:h1> = <nat:1> \cdot <var:r> \land <var:h2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:h3> = <nat:1> \cdot <var:r> \} \\ <var:h3> := <var:h3> * <var:g> ; \\ \{ <var:g> = <var:r> \land <var:h0> = <nat:4> \land <var:h1> = <nat:1> \cdot <var:r> \land <var:h2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:h3> = <nat:1> \cdot <var:r> ^ <nat:2> \} \\ <var:h3> := <var:h3> * <var:g> ; \\ \{ <var:g> = <var:r> \land <var:h0> = <nat:4> \land <var:h1> = <nat:1> \cdot <var:r> \land <var:h2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:h3> = <nat:1> \cdot <var:r> ^ <nat:3> \} \\ <var:R> := <var:h3> ; \\ \{ <var:g> = <var:r> \land <var:h0> = <nat:4> \land <var:h1> = <nat:1> \cdot <var:r> \land <var:h2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:R> = <nat:1> \cdot <var:r> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:h2> ; \\ \{ <var:g> = <var:r> \land <var:h0> = <nat:4> \land <var:h1> = <nat:1> \cdot <var:r> \land <var:R> = <nat:1> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:h1> ; \\ \{ <var:g> = <var:r> \land <var:h0> = <nat:4> \land <var:R> = <nat:1> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:1> \cdot <var:r> \} \\ <var:R> := <var:R> + <var:h0> \\ \{ <var:g> = <var:r> \land <var:R> = <nat:1> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:1> \cdot <var:r> + <nat:4> \} \end{eqnarray} Given the above , the series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h0> := <nat:4> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:g> ; <var:h2> := <nat:4> ; <var:h2> := <var:h2> * <var:g> ; <var:h2> := <var:h2> * <var:g> ; <var:h3> := <nat:1> ; <var:h3> := <var:h3> * <var:g> ; <var:h3> := <var:h3> * <var:g> ; <var:h3> := <var:h3> * <var:g> ; <var:R> := <var:h3> ; <var:R> := <var:R> + <var:h2> ; <var:R> := <var:R> + <var:h1> ; <var:R> := <var:R> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:g> = <var:r> }} <def:poly> {{ <var:R> = <nat:1> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:1> * <var:r> /\ <var:h2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:1> * <var:r> /\ <var:h2> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:1> * <var:r> /\ <var:h2> = <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:1> * <var:r> /\ <var:h2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:h3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:1> * <var:r> /\ <var:h2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:h3> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:1> * <var:r> /\ <var:h2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:h3> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:1> * <var:r> /\ <var:h2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:h3> = <nat:1> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:1> * <var:r> /\ <var:h2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:R> = <nat:1> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:1> * <var:r> /\ <var:R> = <nat:1> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:h0> = <nat:4> /\ <var:R> = <nat:1> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:r> /\ <var:R> = <nat:1> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 