\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:3> ; <var:B1> := <nat:9> ; <var:B1> := <var:B1> * <var:p> ; <var:B2> := <nat:4> ; <var:B2> := <var:B2> * <var:p> ; <var:B2> := <var:B2> * <var:p> ; <var:B3> := <nat:7> ; <var:B3> := <var:B3> * <var:p> ; <var:B3> := <var:B3> * <var:p> ; <var:B3> := <var:B3> * <var:p> ; <var:J> := <var:B3> ; <var:J> := <var:J> + <var:B2> ; <var:J> := <var:J> + <var:B1> ; <var:J> := <var:J> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for any natural numbers $ <var:k> $ ) it to hold that $ <var:p> = <var:k> $ before evaluating this list of instructions then we see $ <var:J> = <nat:7> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:9> \cdot <var:k> + <nat:3> $ . \end{theorem} \begin{proof} The proof of the set of commands can be given by typical Hoare techniques . Jumping to the next bit of code seen in our segment of code , the variable assignmet statement \verb | <var:B0> := <nat:3> ; | . This statement transfers the precondition $ \{ <var:p> = <var:k> \} $ as the postcondition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \} $ . This is ensured through the assignment law in standard Hoare logic . After , we have the variable update code letting $ <nat:9> $ toward $ <var:B1>$ . This takes $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \} $ toward the condition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \} $ . This is deduced using the assignment scheme defined by typical Hoare reasoning . Stepping through , the binding code defining $ <var:B1> * <var:p> $ as $ <var:B1>$ . This moves $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \} $ into the postcondition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \} $ . Looking at the next piece of code seen in the set of commands , the code \verb | <var:B2> := <nat:4> ; | . This moves the precondition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \} $ toward the condition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \} $ . Going to the next step , we see the variable binding statement \verb | <var:B2> := <var:B2> * <var:p> ; | . This line forwards the condition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \} $ into the postcondition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> \} $ . Advancing , we have the variable binding command \verb | <var:B2> := <var:B2> * <var:p> ; | . This command advances $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> \} $ as the condition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> ^ <nat:2> \} $ . This is known to be sound by the assignment rule given in standard Hoare reasoning . Advancing to the proceeding bit of code in the list of commands , we see the environment update line yielding $ <nat:7> $ toward $ <var:B3>$ . This moves $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> ^ <nat:2> \} $ into the postcondition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> ^ <nat:2> \land <var:B3> = <nat:7> \} $ . Jumping to the proceeding statement found in our list of instructions , the assignment command \verb | <var:B3> := <var:B3> * <var:p> ; | . This advances the precondition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> ^ <nat:2> \land <var:B3> = <nat:7> \} $ as the condition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> ^ <nat:2> \land <var:B3> = <nat:7> \cdot <var:k> \} $ . This is ensured by the assignment rule in usual Hoare reasoning . Further , we see the variable assignmet code binding $ <var:B3> * <var:p> $ to $ <var:B3>$ . This redefines the condition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> ^ <nat:2> \land <var:B3> = <nat:7> \cdot <var:k> \} $ toward the condition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> ^ <nat:2> \land <var:B3> = <nat:7> \cdot <var:k> ^ <nat:2> \} $ . Moving on to the proceeding step in our program , we have the command letting $ <var:B3> * <var:p> $ toward $ <var:B3>$ . This transfers $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> ^ <nat:2> \land <var:B3> = <nat:7> \cdot <var:k> ^ <nat:2> \} $ to the condition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> ^ <nat:2> \land <var:B3> = <nat:7> \cdot <var:k> ^ <nat:3> \} $ . Jumping to the upcoming command seen in the list of instructions , we see the assignment command \verb | <var:J> := <var:B3> ; | . This command advances the condition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> ^ <nat:2> \land <var:B3> = <nat:7> \cdot <var:k> ^ <nat:3> \} $ to $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> ^ <nat:2> \land <var:J> = <nat:7> \cdot <var:k> ^ <nat:3> \} $ . This is sound with the assignment scheme in standard Hoare logic . Keeping momentum , we see the line binding $ <var:J> + <var:B2> $ as $ <var:J>$ . This code takes the condition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:B2> = <nat:4> \cdot <var:k> ^ <nat:2> \land <var:J> = <nat:7> \cdot <var:k> ^ <nat:3> \} $ into the postcondition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:J> = <nat:7> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> \} $ . Now , the variable assignmet code \verb | <var:J> := <var:J> + <var:B1> ; | . This redefines $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:B1> = <nat:9> \cdot <var:k> \land <var:J> = <nat:7> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> \} $ to the postcondition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:J> = <nat:7> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:9> \cdot <var:k> \} $ . Stepping forward , we have the environment update line \verb | <var:J> := <var:J> + <var:B0> | . This code redefines the precondition $ \{ <var:p> = <var:k> \land <var:B0> = <nat:3> \land <var:J> = <nat:7> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:9> \cdot <var:k> \} $ toward the postcondition $ \{ <var:p> = <var:k> \land <var:J> = <nat:7> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:9> \cdot <var:k> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B0> := <nat:3> ; <var:B1> := <nat:9> ; <var:B1> := <var:B1> * <var:p> ; <var:B2> := <nat:4> ; <var:B2> := <var:B2> * <var:p> ; <var:B2> := <var:B2> * <var:p> ; <var:B3> := <nat:7> ; <var:B3> := <var:B3> * <var:p> ; <var:B3> := <var:B3> * <var:p> ; <var:B3> := <var:B3> * <var:p> ; <var:J> := <var:B3> ; <var:J> := <var:J> + <var:B2> ; <var:J> := <var:J> + <var:B1> ; <var:J> := <var:J> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:p> = <var:k> }} <def:poly> {{ <var:J> = <nat:7> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:9> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:9> * <var:k> /\ <var:B2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:9> * <var:k> /\ <var:B2> = <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:9> * <var:k> /\ <var:B2> = <nat:4> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:9> * <var:k> /\ <var:B2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:B3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:9> * <var:k> /\ <var:B2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:B3> = <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:9> * <var:k> /\ <var:B2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:B3> = <nat:7> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:9> * <var:k> /\ <var:B2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:B3> = <nat:7> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:9> * <var:k> /\ <var:B2> = <nat:4> * <var:k> ^ <nat:2> /\ <var:J> = <nat:7> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:B0> = <nat:3> /\ <var:B1> = <nat:9> * <var:k> /\ <var:J> = <nat:7> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:B0> = <nat:3> /\ <var:J> = <nat:7> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:J> = <nat:7> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:9> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 