\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o1> := <var:v> ; <var:o2> := <var:o1> * <var:v> ; <var:o0> := <nat:1> ; <var:o2> := <var:o2> * <nat:3> ; <var:k> := <var:o2> <var:k> := <var:k> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Given --- given all positive integer coefficients $ <var:p> $ --- that $ <var:v> = <var:p> $ prior to the execution of the set of instructions , it follows that $ <var:k> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> $ after code has finished executing . \end{theorem} \begin{proof} The proof of this segment of code is demonstrated by usual Hoare logic . Moving onward , we see the assignment line \verb | <var:o1> := <var:v> ; | . This transfers the precondition $ \{ <var:v> = <var:p> \} $ toward $ \{ <var:v> = <var:p> \land <var:o1> = <var:p> \} $ . This is known to be sound by the assignment scheme defined by typical Hoare techniques . Now , we see the line yielding $ <var:o1> * <var:v> $ into $ <var:o2>$ . This redefines the condition $ \{ <var:v> = <var:p> \land <var:o1> = <var:p> \} $ into the postcondition $ \{ <var:v> = <var:p> \land <var:o1> = <var:p> \land <var:o2> = <var:p> ^ <nat:2> \} $ . This is sound using the assignment inference rule defined in typical Hoare reasoning . Further , the environment update code \verb | <var:o0> := <nat:1> ; | . This takes $ \{ <var:v> = <var:p> \land <var:o1> = <var:p> \land <var:o2> = <var:p> ^ <nat:2> \} $ into $ \{ <var:v> = <var:p> \land <var:o1> = <var:p> \land <var:o2> = <var:p> ^ <nat:2> \land <var:o0> = <nat:1> \} $ . Now , the environment update line \verb | <var:o2> := <var:o2> * <nat:3> ; | . This statement moves the precondition $ \{ <var:v> = <var:p> \land <var:o1> = <var:p> \land <var:o2> = <var:p> ^ <nat:2> \land <var:o0> = <nat:1> \} $ as the postcondition $ \{ <var:v> = <var:p> \land <var:o1> = <var:p> \land <var:o2> = <nat:3> \cdot <var:p> ^ <nat:2> \land <var:o0> = <nat:1> \} $ . This is rigorously given using the assignment inference rule given in usual Hoare logic . Honing in on the upcoming piece of code seen in our list of instructions , we have the assignment command \verb | <var:k> := <var:o2> | . This line advances $ \{ <var:v> = <var:p> \land <var:o1> = <var:p> \land <var:o2> = <nat:3> \cdot <var:p> ^ <nat:2> \land <var:o0> = <nat:1> \} $ toward the postcondition $ \{ <var:v> = <var:p> \land <var:o1> = <var:p> \land <var:o0> = <nat:1> \land <var:k> = <nat:3> \cdot <var:p> ^ <nat:2> \} $ . Considering the next step seen in our code segment , we see the variable binding line defining $ <var:k> + <var:o0$ into $ <var:k>$ . This moves the condition $ \{ <var:v> = <var:p> \land <var:o1> = <var:p> \land <var:o0> = <nat:1> \land <var:k> = <nat:3> \cdot <var:p> ^ <nat:2> \} $ as the condition $ \{ <var:v> = <var:p> \land <var:k> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <def:poly> := <var:o1> := <var:v> ; <var:o2> := <var:o1> * <var:v> ; <var:o0> := <nat:1> ; <var:o2> := <var:o2> * <nat:3> ; <var:k> := <var:o2> <var:k> := <var:k> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:v> = <var:p> }} <def:poly> {{ <var:k> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:o1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:o1> = <var:p> /\ <var:o2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:o1> = <var:p> /\ <var:o2> = <var:p> ^ <nat:2> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:o1> = <var:p> /\ <var:o2> = <nat:3> * <var:p> ^ <nat:2> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:o1> = <var:p> /\ <var:o0> = <nat:1> /\ <var:k> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:k> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 