\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} : \begin{verbatim} <var:J1> := <var:a> ; <var:J2> := <var:J1> * <var:a> ; <var:J0> := <nat:3> ; <var:J1> := <var:J1> * <nat:4> ; <var:J2> := <var:J2> * <nat:2> ; <var:s> := <var:J2> <var:s> := <var:s> + <var:J1> <var:s> := <var:s> + <var:J0> \end{verbatim} Allow it to hold that $ <var:a> = <var:Q> $ before executing our set of commands , it holds that we see $ <var:s> = <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:3> $ after set of instructions is done executing . \end{theorem} \begin{proof} Demonstrating correctness of this code segment can be accomplished by Hoare reasoning . Taking a look at the following line of code found in the set of commands , the binding code \verb | <var:J1> := <var:a> ; | . This moves $ \{ <var:a> = <var:Q> \} $ as $ \{ <var:a> = <var:Q> \land <var:J1> = <var:Q> \} $ . This is shown using the assignment law obtained from typical Hoare logic . Looking at the proceeding command contained in the list of commands , we see the variable assignmet code assigning $ <var:J1> * <var:a> $ toward $ <var:J2>$ . This redefines the condition $ \{ <var:a> = <var:Q> \land <var:J1> = <var:Q> \} $ as $ \{ <var:a> = <var:Q> \land <var:J1> = <var:Q> \land <var:J2> = <var:Q> ^ <nat:2> \} $ . This is sound by the assignment law given by standard Hoare logic . Honing in on the subsequent line of code in the series of commands , we have the environment update statement binding $ <nat:3> $ as $ <var:J0>$ . This command moves $ \{ <var:a> = <var:Q> \land <var:J1> = <var:Q> \land <var:J2> = <var:Q> ^ <nat:2> \} $ to the postcondition $ \{ <var:a> = <var:Q> \land <var:J1> = <var:Q> \land <var:J2> = <var:Q> ^ <nat:2> \land <var:J0> = <nat:3> \} $ . This is sound by the assignment law given in Hoare techniques . Moving on , the assignment line \verb | <var:J1> := <var:J1> * <nat:4> ; | . This command redefines the condition $ \{ <var:a> = <var:Q> \land <var:J1> = <var:Q> \land <var:J2> = <var:Q> ^ <nat:2> \land <var:J0> = <nat:3> \} $ to the postcondition $ \{ <var:a> = <var:Q> \land <var:J1> = <nat:4> \cdot <var:Q> \land <var:J2> = <var:Q> ^ <nat:2> \land <var:J0> = <nat:3> \} $ . Going to the next step , we have the binding line assigning $ <var:J2> * <nat:2> $ as $ <var:J2>$ . This transfers $ \{ <var:a> = <var:Q> \land <var:J1> = <nat:4> \cdot <var:Q> \land <var:J2> = <var:Q> ^ <nat:2> \land <var:J0> = <nat:3> \} $ as $ \{ <var:a> = <var:Q> \land <var:J1> = <nat:4> \cdot <var:Q> \land <var:J2> = <nat:2> \cdot <var:Q> ^ <nat:2> \land <var:J0> = <nat:3> \} $ . Considering the next line of code in the series of instructions , we have the binding line \verb | <var:s> := <var:J2> | . This takes the precondition $ \{ <var:a> = <var:Q> \land <var:J1> = <nat:4> \cdot <var:Q> \land <var:J2> = <nat:2> \cdot <var:Q> ^ <nat:2> \land <var:J0> = <nat:3> \} $ as the postcondition $ \{ <var:a> = <var:Q> \land <var:J1> = <nat:4> \cdot <var:Q> \land <var:J0> = <nat:3> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:2> \} $ . This is rigorously given using the assignment inference rule defined by Hoare techniques . Looking at the next command found in the series of commands , the statement \verb | <var:s> := <var:s> + <var:J1> | . This moves the precondition $ \{ <var:a> = <var:Q> \land <var:J1> = <nat:4> \cdot <var:Q> \land <var:J0> = <nat:3> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:2> \} $ to $ \{ <var:a> = <var:Q> \land <var:J0> = <nat:3> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> \} $ . This is shown to be logically sound using the assignment scheme from Hoare logic . Going forward , the code \verb | <var:s> := <var:s> + <var:J0> | . This statement transfers the condition $ \{ <var:a> = <var:Q> \land <var:J0> = <nat:3> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> \} $ toward the postcondition $ \{ <var:a> = <var:Q> \land <var:s> = <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:3> \} $ . This is guaranteed by the assignment rule given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:a> = <var:Q> }} <var:J1> := <var:a> ; <var:J2> := <var:J1> * <var:a> ; <var:J0> := <nat:3> ; <var:J1> := <var:J1> * <nat:4> ; <var:J2> := <var:J2> * <nat:2> ; <var:s> := <var:J2> <var:s> := <var:s> + <var:J1> <var:s> := <var:s> + <var:J0> {{ <var:s> = <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:J1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:J1> = <var:Q> /\ <var:J2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:J1> = <var:Q> /\ <var:J2> = <var:Q> ^ <nat:2> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:J1> = <nat:4> * <var:Q> /\ <var:J2> = <var:Q> ^ <nat:2> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:J1> = <nat:4> * <var:Q> /\ <var:J2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:J0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:J1> = <nat:4> * <var:Q> /\ <var:J0> = <nat:3> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:J0> = <nat:3> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Q> /\ <var:s> = <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 