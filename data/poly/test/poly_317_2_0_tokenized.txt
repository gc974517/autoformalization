\begin{document} \begin{theorem} Define a series of instructions such that \begin{verbatim} <var:g0> := <nat:4> ; <var:R> := <var:g0> \end{verbatim} Assume that $ <var:i> = <var:N> $ prior to the execution of this segment of code then we see $ <var:R> = <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for our code segment can be given through typical Hoare logic . Stepping through , the variable update code yielding $ <nat:4> $ as $ <var:g0>$ . This code redefines the precondition $ \{ <var:i> = <var:N> \} $ as $ \{ <var:i> = <var:N> \land <var:g0> = <nat:4> \} $ . This is shown to be logically sound with the assignment inference rule found in Hoare reasoning . Going forward , we have the variable assignmet line \verb | <var:R> := <var:g0> | . This advances the precondition $ \{ <var:i> = <var:N> \land <var:g0> = <nat:4> \} $ toward the condition $ \{ <var:i> = <var:N> \land <var:R> = <nat:4> \} $ . This is sound through the assignment rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:i> = <var:N> }} <var:g0> := <nat:4> ; <var:R> := <var:g0> {{ <var:R> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:R> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 