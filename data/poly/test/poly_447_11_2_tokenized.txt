\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:U> := <nat:2> ; <var:U> := <var:U> * <var:x> ; <var:U> := <nat:2> + <var:U> * <var:x> ; <var:U> := <nat:3> + <var:U> * <var:x> ; <var:U> := <nat:4> + <var:U> * <var:x> ; <var:U> := <nat:4> + <var:U> * <var:x> ; <var:U> := <nat:2> + <var:U> * <var:x> ; <var:U> := <nat:2> + <var:U> * <var:x> ; <var:U> := <nat:1> + <var:U> * <var:x> ; <var:U> := <nat:2> + <var:U> * <var:x> ; <var:U> := <nat:4> + <var:U> * <var:x> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> in \emph{Imp} . Assume that $ <var:x> = <var:p> $ ahead of evaluating the set of commands it holds that we see $ <var:U> = <nat:2> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for our set of commands is demonstrated by usual Hoare techniques . Advancing on , we have the assignment line binding $ <nat:2> $ to $ <var:U>$ . This advances the precondition $ \{ <var:x> = <var:p> \} $ toward $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> \} $ . Advancing to the next line of code found in our code segment , the variable assignmet code \verb | <var:U> := <var:U> * <var:x> ; | . This line moves $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> \} $ into the condition $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> + \} $ . This is ensured through the assignment rule defined in Hoare logic . Advancing , we see the line \verb | <var:U> := <nat:2> + <var:U> * <var:x> ; | . This code forwards the condition $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> + \} $ into $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:2> + <nat:2> \} $ . Further , we see the assignment statement giving $ <nat:3> + <var:U> * <var:x> $ toward $ <var:U>$ . This line takes the condition $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:2> + <nat:2> \} $ into $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> + <nat:3> \} $ . This is rigorously given using the assignment scheme given in standard Hoare techniques . Paying attention to the upcoming piece of code contained in the set of instructions , we have the assignment statement \verb | <var:U> := <nat:4> + <var:U> * <var:x> ; | . This advances $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> + <nat:3> \} $ to the postcondition $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:4> \} $ . This is deduced using the assignment scheme defined by typical Hoare logic . Moving forward to the next step , we have the variable assignmet code \verb | <var:U> := <nat:4> + <var:U> * <var:x> ; | . This moves $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:4> \} $ as $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:4> \} $ . Paying attention to the following bit of code found in the segment of code , we have the assignment statement letting $ <nat:2> + <var:U> * <var:x> $ toward $ <var:U>$ . This advances $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:4> \} $ as the postcondition $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> \} $ . This is given using the assignment law from usual Hoare logic . Advancing on , the line \verb | <var:U> := <nat:2> + <var:U> * <var:x> ; | . This forwards the condition $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> \} $ into the condition $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:2> \} $ . This is sound with the assignment rule from usual Hoare reasoning . Observing the next command in the list of instructions , we have the variable update line \verb | <var:U> := <nat:1> + <var:U> * <var:x> ; | . This line takes the condition $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:2> \} $ into the postcondition $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> \} $ . This is sound through the assignment law given in standard Hoare reasoning . Next , we have the binding line giving $ <nat:2> + <var:U> * <var:x> $ into $ <var:U>$ . This code forwards $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> \} $ as $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> \} $ . Moving on , the variable binding line \verb | <var:U> := <nat:4> + <var:U> * <var:x> | . This code transfers the condition $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> \} $ toward the condition $ \{ <var:x> = <var:p> \land <var:U> = <nat:2> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:2> ; <var:U> := <var:U> * <var:x> ; <var:U> := <nat:2> + <var:U> * <var:x> ; <var:U> := <nat:3> + <var:U> * <var:x> ; <var:U> := <nat:4> + <var:U> * <var:x> ; <var:U> := <nat:4> + <var:U> * <var:x> ; <var:U> := <nat:2> + <var:U> * <var:x> ; <var:U> := <nat:2> + <var:U> * <var:x> ; <var:U> := <nat:1> + <var:U> * <var:x> ; <var:U> := <nat:2> + <var:U> * <var:x> ; <var:U> := <nat:4> + <var:U> * <var:x> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:x> = <var:p> }} <def:poly> {{ <var:U> = <nat:2> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:U> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:U> = <nat:2> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:p> /\ <var:U> = <nat:2> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 