\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:1> ; <var:I1> := <nat:6> ; <var:I1> := <var:I1> * <var:l> ; <var:u> := <var:I1> ; <var:u> := <var:u> + <var:I0> \end{verbatim} Allowing given positive integer coefficients $ <var:d> $ that we have $ <var:l> = <var:d> $ ahead of interpreting this code , it follows that $ <var:u> = <nat:6> \cdot <var:d> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of the segment of code is shown using the below decorated code segment . \begin{eqnarray} \{ <var:l> = <var:d> \} \\ <var:I0> := <nat:1> ; \\ \{ <var:l> = <var:d> \land <var:I0> = <nat:1> \} \\ <var:I1> := <nat:6> ; \\ \{ <var:l> = <var:d> \land <var:I0> = <nat:1> \land <var:I1> = <nat:6> \} \\ <var:I1> := <var:I1> * <var:l> ; \\ \{ <var:l> = <var:d> \land <var:I0> = <nat:1> \land <var:I1> = <nat:6> \cdot <var:d> \} \\ <var:u> := <var:I1> ; \\ \{ <var:l> = <var:d> \land <var:I0> = <nat:1> \land <var:u> = <nat:6> \cdot <var:d> \} \\ <var:u> := <var:u> + <var:I0> \\ \{ <var:l> = <var:d> \land <var:u> = <nat:6> \cdot <var:d> + <nat:1> \} \end{eqnarray} The application of Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:l> = <var:d> }} <var:I0> := <nat:1> ; <var:I1> := <nat:6> ; <var:I1> := <var:I1> * <var:l> ; <var:u> := <var:I1> ; <var:u> := <var:u> + <var:I0> {{ <var:u> = <nat:6> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:I0> = <nat:1> /\ <var:u> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u> = <nat:6> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 