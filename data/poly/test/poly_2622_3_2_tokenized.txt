\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:k> := <nat:2> ; <var:k> := <nat:4> + <var:k> * <var:X> ; <var:k> := <nat:4> + <var:k> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for any natural coefficients $ <var:c> $ ) $ <var:X> = <var:c> $ prior to evaluating this list of commands , then we have $ <var:k> = <nat:2> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:4> $ when code has terminated . \end{theorem} \begin{proof} Using typical Hoare reasoning gives : \begin{eqnarray} \{ <var:X> = <var:c> \} \\ <var:k> := <nat:2> ; \\ \{ <var:X> = <var:c> \land <var:k> = <nat:2> \} \\ <var:k> := <nat:4> + <var:k> * <var:X> ; \\ \{ <var:X> = <var:c> \land <var:k> = <nat:2> \times <var:c> + <nat:4> \} \\ <var:k> := <nat:4> + <var:k> * <var:X> \\ \{ <var:X> = <var:c> \land <var:k> = <nat:2> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + <nat:4> \} \end{eqnarray} Thusly , the segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:2> ; <var:k> := <nat:4> + <var:k> * <var:X> ; <var:k> := <nat:4> + <var:k> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:X> = <var:c> }} <def:poly> {{ <var:k> = <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:c> /\ <var:k> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:c> /\ <var:k> = <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:c> /\ <var:k> = <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 