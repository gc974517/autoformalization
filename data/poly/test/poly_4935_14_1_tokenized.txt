\begin{document} \begin{theorem} Define the following program as follows \begin{verbatim} <var:a1> := <var:H> ; <var:a2> := <var:a1> * <var:H> ; <var:a3> := <var:a2> * <var:H> ; <var:a4> := <var:a3> * <var:H> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:1> ; <var:a2> := <var:a2> * <nat:2> ; <var:a3> := <var:a3> * <nat:2> ; <var:a4> := <var:a4> * <nat:2> ; <var:k> := <var:a4> <var:k> := <var:k> + <var:a3> <var:k> := <var:k> + <var:a2> <var:k> := <var:k> + <var:a1> <var:k> := <var:k> + <var:a0> \end{verbatim} Allow that we have $ <var:H> = <var:Q> $ prior to evaluating this set of instructions it follows that we have $ <var:k> = <nat:2> \times <var:Q> ^ <nat:4> + <nat:2> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:4> $ once code has finished executing . \end{theorem} \begin{proof} The flow of logic for our series of commands can be demonstrated using standard Hoare logic . Jumping to the following pieces of code seen in the segment of code , \verb | { <var:H> = <var:Q> } <var:a1> := <var:H> { <var:H> = <var:Q> \land <var:a1> = <var:Q> } | , \verb | { <var:H> = <var:Q> \land <var:a1> = <var:Q> } <var:a2> := <var:a1> * <var:H> { <var:H> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> } | , \verb | { <var:H> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> } <var:a3> := <var:a2> * <var:H> { <var:H> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> \land <var:a3> = <var:Q> ^ <nat:3> } | , \verb | { <var:H> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> \land <var:a3> = <var:Q> ^ <nat:3> } <var:a4> := <var:a3> * <var:H> { <var:H> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> \land <var:a3> = <var:Q> ^ <nat:3> \land <var:a4> = <var:Q> ^ <nat:4> } | , \verb | { <var:H> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> \land <var:a3> = <var:Q> ^ <nat:3> \land <var:a4> = <var:Q> ^ <nat:4> } <var:a0> := <nat:4> { <var:H> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> \land <var:a3> = <var:Q> ^ <nat:3> \land <var:a4> = <var:Q> ^ <nat:4> \land <var:a0> = <nat:4> } | , \verb | { <var:H> = <var:Q> \land <var:a1> = <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> \land <var:a3> = <var:Q> ^ <nat:3> \land <var:a4> = <var:Q> ^ <nat:4> \land <var:a0> = <nat:4> } <var:a1> := <var:a1> * <nat:1> { <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> \land <var:a3> = <var:Q> ^ <nat:3> \land <var:a4> = <var:Q> ^ <nat:4> \land <var:a0> = <nat:4> } | , \verb | { <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a2> = <var:Q> ^ <nat:2> \land <var:a3> = <var:Q> ^ <nat:3> \land <var:a4> = <var:Q> ^ <nat:4> \land <var:a0> = <nat:4> } <var:a2> := <var:a2> * <nat:2> { <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:a3> = <var:Q> ^ <nat:3> \land <var:a4> = <var:Q> ^ <nat:4> \land <var:a0> = <nat:4> } | , \verb | { <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:a3> = <var:Q> ^ <nat:3> \land <var:a4> = <var:Q> ^ <nat:4> \land <var:a0> = <nat:4> } <var:a3> := <var:a3> * <nat:2> { <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:a3> = <nat:2> * <var:Q> ^ <nat:3> \land <var:a4> = <var:Q> ^ <nat:4> \land <var:a0> = <nat:4> } | , \verb | { <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:a3> = <nat:2> * <var:Q> ^ <nat:3> \land <var:a4> = <var:Q> ^ <nat:4> \land <var:a0> = <nat:4> } <var:a4> := <var:a4> * <nat:2> { <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:a3> = <nat:2> * <var:Q> ^ <nat:3> \land <var:a4> = <nat:2> * <var:Q> ^ <nat:4> \land <var:a0> = <nat:4> } | , \verb | { <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:a3> = <nat:2> * <var:Q> ^ <nat:3> \land <var:a4> = <nat:2> * <var:Q> ^ <nat:4> \land <var:a0> = <nat:4> } <var:k> := <var:a4{ <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:a3> = <nat:2> * <var:Q> ^ <nat:3> \land <var:a0> = <nat:4> \land <var:k> = <nat:2> * <var:Q> ^ <nat:4> } | , \verb | { <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:a3> = <nat:2> * <var:Q> ^ <nat:3> \land <var:a0> = <nat:4> \land <var:k> = <nat:2> * <var:Q> ^ <nat:4> } <var:k> := <var:k> + <var:a3{ <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:a0> = <nat:4> \land <var:k> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> } | , \verb | { <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:a0> = <nat:4> \land <var:k> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> } <var:k> := <var:k> + <var:a2{ <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a0> = <nat:4> \land <var:k> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> } | , \verb | { <var:H> = <var:Q> \land <var:a1> = <nat:1> * <var:Q> \land <var:a0> = <nat:4> \land <var:k> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> } <var:k> := <var:k> + <var:a1{ <var:H> = <var:Q> \land <var:a0> = <nat:4> \land <var:k> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> } | and \verb | { <var:H> = <var:Q> \land <var:a0> = <nat:4> \land <var:k> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> } <var:k> := <var:k> + <var:a0{ <var:H> = <var:Q> \land <var:k> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> } | . This is sound by the law found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <var:a4> : string := " <var:a4> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:H> = <var:Q> }} <var:a1> := <var:H> ; <var:a2> := <var:a1> * <var:H> ; <var:a3> := <var:a2> * <var:H> ; <var:a4> := <var:a3> * <var:H> ; <var:a0> := <nat:4> ; <var:a1> := <var:a1> * <nat:1> ; <var:a2> := <var:a2> * <nat:2> ; <var:a3> := <var:a3> * <nat:2> ; <var:a4> := <var:a4> * <nat:2> ; <var:k> := <var:a4> <var:k> := <var:k> + <var:a3> <var:k> := <var:k> + <var:a2> <var:k> := <var:k> + <var:a1> <var:k> := <var:k> + <var:a0> {{ <var:k> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:a1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:a1> = <var:Q> /\ <var:a2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:a1> = <var:Q> /\ <var:a2> = <var:Q> ^ <nat:2> /\ <var:a3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:a1> = <var:Q> /\ <var:a2> = <var:Q> ^ <nat:2> /\ <var:a3> = <var:Q> ^ <nat:3> /\ <var:a4> = <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:a1> = <var:Q> /\ <var:a2> = <var:Q> ^ <nat:2> /\ <var:a3> = <var:Q> ^ <nat:3> /\ <var:a4> = <var:Q> ^ <nat:4> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:a1> = <nat:1> * <var:Q> /\ <var:a2> = <var:Q> ^ <nat:2> /\ <var:a3> = <var:Q> ^ <nat:3> /\ <var:a4> = <var:Q> ^ <nat:4> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:a1> = <nat:1> * <var:Q> /\ <var:a2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:a3> = <var:Q> ^ <nat:3> /\ <var:a4> = <var:Q> ^ <nat:4> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:a1> = <nat:1> * <var:Q> /\ <var:a2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:a3> = <nat:2> * <var:Q> ^ <nat:3> /\ <var:a4> = <var:Q> ^ <nat:4> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:a1> = <nat:1> * <var:Q> /\ <var:a2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:a3> = <nat:2> * <var:Q> ^ <nat:3> /\ <var:a4> = <nat:2> * <var:Q> ^ <nat:4> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:a1> = <nat:1> * <var:Q> /\ <var:a2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:a3> = <nat:2> * <var:Q> ^ <nat:3> /\ <var:a0> = <nat:4> /\ <var:k> = <nat:2> * <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:a1> = <nat:1> * <var:Q> /\ <var:a2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:a0> = <nat:4> /\ <var:k> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:a1> = <nat:1> * <var:Q> /\ <var:a0> = <nat:4> /\ <var:k> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:a0> = <nat:4> /\ <var:k> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Q> /\ <var:k> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 