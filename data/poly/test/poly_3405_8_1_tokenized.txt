\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:t1> := <var:V> ; <var:t2> := <var:t1> * <var:V> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:4> ; <var:t2> := <var:t2> * <nat:5> ; <var:N> := <var:t2> <var:N> := <var:N> + <var:t1> <var:N> := <var:N> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> in \emph{Imp} . Allow it to hold that $ <var:V> = <var:x> $ ahead of executing our set of instructions it must be that $ <var:N> = <nat:5> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> $ once set of instructions executes . \end{theorem} \begin{proof} The application of standard Hoare logic yields : \begin{eqnarray} \{ <var:V> = <var:x> \} \\ <var:t1> := <var:V> ; \\ \{ <var:V> = <var:x> \land <var:t1> = <var:x> \} \\ <var:t2> := <var:t1> * <var:V> ; \\ \{ <var:V> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \} \\ <var:t0> := <nat:4> ; \\ \{ <var:V> = <var:x> \land <var:t1> = <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t0> = <nat:4> \} \\ <var:t1> := <var:t1> * <nat:4> ; \\ \{ <var:V> = <var:x> \land <var:t1> = <nat:4> * <var:x> \land <var:t2> = <var:x> ^ <nat:2> \land <var:t0> = <nat:4> \} \\ <var:t2> := <var:t2> * <nat:5> ; \\ \{ <var:V> = <var:x> \land <var:t1> = <nat:4> * <var:x> \land <var:t2> = <nat:5> * <var:x> ^ <nat:2> \land <var:t0> = <nat:4> \} \\ <var:N> := <var:t2> \\ \{ <var:V> = <var:x> \land <var:t1> = <nat:4> * <var:x> \land <var:t0> = <nat:4> \land <var:N> = <nat:5> * <var:x> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:t1> \\ \{ <var:V> = <var:x> \land <var:t0> = <nat:4> \land <var:N> = <nat:5> * <var:x> ^ <nat:2> + <nat:4> * <var:x> \} \\ <var:N> := <var:N> + <var:t0> \\ \{ <var:V> = <var:x> \land <var:N> = <nat:5> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> \} \end{eqnarray} Given the preceding argument , this list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t1> := <var:V> ; <var:t2> := <var:t1> * <var:V> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:4> ; <var:t2> := <var:t2> * <nat:5> ; <var:N> := <var:t2> <var:N> := <var:N> + <var:t1> <var:N> := <var:N> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:V> = <var:x> }} <def:poly> {{ <var:N> = <nat:5> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:t1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:t1> = <var:x> /\ <var:t2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:t1> = <var:x> /\ <var:t2> = <var:x> ^ <nat:2> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:t1> = <nat:4> * <var:x> /\ <var:t2> = <var:x> ^ <nat:2> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:t1> = <nat:4> * <var:x> /\ <var:t2> = <nat:5> * <var:x> ^ <nat:2> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:t1> = <nat:4> * <var:x> /\ <var:t0> = <nat:4> /\ <var:N> = <nat:5> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:t0> = <nat:4> /\ <var:N> = <nat:5> * <var:x> ^ <nat:2> + <nat:4> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:N> = <nat:5> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 