\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as \begin{verbatim} <var:F1> := <var:k> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:3> ; <var:p> := <var:F1> <var:p> := <var:p> + <var:F0> \end{verbatim} Allow it to hold that $ <var:k> = <var:a> $ before the execution of the code it must be that $ <var:p> = <nat:3> * <var:a> + <nat:1> $ when segment of code is done . \end{theorem} \begin{proof} The flow of logic for our series of commands is accomplished by typical Hoare reasoning . Taking another step toward the subsequent step seen in our series of commands , we have the statement \verb | <var:F1> := <var:k> ; | . This code transfers $ \{ <var:k> = <var:a> \} $ as the condition $ \{ <var:k> = <var:a> \land <var:F1> = <var:a> \} $ . This is shown to be logically sound by the assignment scheme found in standard Hoare logic . Stepping through , the variable assignmet statement assigning $ <nat:1> $ toward $ <var:F0>$ . This takes $ \{ <var:k> = <var:a> \land <var:F1> = <var:a> \} $ to the condition $ \{ <var:k> = <var:a> \land <var:F1> = <var:a> \land <var:F0> = <nat:1> \} $ . This is shown through the assignment scheme defined in typical Hoare techniques . Advancing , we have the command giving $ <var:F1> * <nat:3> $ as $ <var:F1>$ . This forwards the precondition $ \{ <var:k> = <var:a> \land <var:F1> = <var:a> \land <var:F0> = <nat:1> \} $ into $ \{ <var:k> = <var:a> \land <var:F1> = <nat:3> \times <var:a> \land <var:F0> = <nat:1> \} $ . This is guaranteed using the assignment inference rule found in typical Hoare reasoning . Advancing , the variable assignmet code defining $ <var:F1$ to $ <var:p>$ . This takes the precondition $ \{ <var:k> = <var:a> \land <var:F1> = <nat:3> \times <var:a> \land <var:F0> = <nat:1> \} $ toward the postcondition $ \{ <var:k> = <var:a> \land <var:F0> = <nat:1> \land <var:p> = <nat:3> \times <var:a> \} $ . This is deduced through the assignment scheme in Hoare reasoning . Keeping momentum , the assignment command \verb | <var:p> := <var:p> + <var:F0> | . This command advances the condition $ \{ <var:k> = <var:a> \land <var:F0> = <nat:1> \land <var:p> = <nat:3> \times <var:a> \} $ to the condition $ \{ <var:k> = <var:a> \land <var:p> = <nat:3> \times <var:a> + <nat:1> \} $ . This is rigorously given with the assignment rule in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:k> = <var:a> }} <var:F1> := <var:k> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:3> ; <var:p> := <var:F1> <var:p> := <var:p> + <var:F0> {{ <var:p> = <nat:3> * <var:a> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:F1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:F1> = <var:a> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:F1> = <nat:3> * <var:a> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:F0> = <nat:1> /\ <var:p> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:p> = <nat:3> * <var:a> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 