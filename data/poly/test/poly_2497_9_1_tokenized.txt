\begin{document} \begin{theorem} Consider the following series of instructions : \begin{verbatim} <var:I1> := <var:q> ; <var:I2> := <var:I1> * <var:q> ; <var:I3> := <var:I2> * <var:q> ; <var:I0> := <nat:8> ; <var:I1> := <var:I1> * <nat:3> ; <var:I3> := <var:I3> * <nat:9> ; <var:k> := <var:I3> <var:k> := <var:k> + <var:I1> <var:k> := <var:k> + <var:I0> \end{verbatim} Assume --- for every positive numbers $ <var:B> $ --- that $ <var:q> = <var:B> $ before the evaluation of the set of instructions it must be that we see $ <var:k> = <nat:9> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> + <nat:8> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques returns : \begin{eqnarray} \{ <var:q> = <var:B> \} \\ <var:I1> := <var:q> ; \\ \{ <var:q> = <var:B> \land <var:I1> = <var:B> \} \\ <var:I2> := <var:I1> * <var:q> ; \\ \{ <var:q> = <var:B> \land <var:I1> = <var:B> \land <var:I2> = <var:B> ^ <nat:2> \} \\ <var:I3> := <var:I2> * <var:q> ; \\ \{ <var:q> = <var:B> \land <var:I1> = <var:B> \land <var:I2> = <var:B> ^ <nat:2> \land <var:I3> = <var:B> ^ <nat:3> \} \\ <var:I0> := <nat:8> ; \\ \{ <var:q> = <var:B> \land <var:I1> = <var:B> \land <var:I2> = <var:B> ^ <nat:2> \land <var:I3> = <var:B> ^ <nat:3> \land <var:I0> = <nat:8> \} \\ <var:I1> := <var:I1> * <nat:3> ; \\ \{ <var:q> = <var:B> \land <var:I1> = <nat:3> * <var:B> \land <var:I2> = <var:B> ^ <nat:2> \land <var:I3> = <var:B> ^ <nat:3> \land <var:I0> = <nat:8> \} \\ <var:I3> := <var:I3> * <nat:9> ; \\ \{ <var:q> = <var:B> \land <var:I1> = <nat:3> * <var:B> \land <var:I2> = <var:B> ^ <nat:2> \land <var:I3> = <nat:9> * <var:B> ^ <nat:3> \land <var:I0> = <nat:8> \} \end{eqnarray} Advancing evaluating the program returns : \begin{eqnarray} <var:k> := <var:I3> \\ \{ <var:q> = <var:B> \land <var:I1> = <nat:3> * <var:B> \land <var:I2> = <var:B> ^ <nat:2> \land <var:I0> = <nat:8> \land <var:k> = <nat:9> * <var:B> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:I1> \\ \{ <var:q> = <var:B> \land <var:I0> = <nat:8> \land <var:k> = <nat:9> * <var:B> ^ <nat:3> + <nat:3> * <var:B> \} \\ <var:k> := <var:k> + <var:I0> \\ \{ <var:q> = <var:B> \land <var:k> = <nat:9> * <var:B> ^ <nat:3> + <nat:3> * <var:B> + <nat:8> \} \end{eqnarray} As a consequence , our code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:q> = <var:B> }} <var:I1> := <var:q> ; <var:I2> := <var:I1> * <var:q> ; <var:I3> := <var:I2> * <var:q> ; <var:I0> := <nat:8> ; <var:I1> := <var:I1> * <nat:3> ; <var:I3> := <var:I3> * <nat:9> ; <var:k> := <var:I3> <var:k> := <var:k> + <var:I1> <var:k> := <var:k> + <var:I0> {{ <var:k> = <nat:9> * <var:B> ^ <nat:3> + <nat:3> * <var:B> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:I1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:I1> = <var:B> /\ <var:I2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:I1> = <var:B> /\ <var:I2> = <var:B> ^ <nat:2> /\ <var:I3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:I1> = <var:B> /\ <var:I2> = <var:B> ^ <nat:2> /\ <var:I3> = <var:B> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:I1> = <nat:3> * <var:B> /\ <var:I2> = <var:B> ^ <nat:2> /\ <var:I3> = <var:B> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:I1> = <nat:3> * <var:B> /\ <var:I2> = <var:B> ^ <nat:2> /\ <var:I3> = <nat:9> * <var:B> ^ <nat:3> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:I1> = <nat:3> * <var:B> /\ <var:I2> = <var:B> ^ <nat:2> /\ <var:I0> = <nat:8> /\ <var:k> = <nat:9> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:I0> = <nat:8> /\ <var:k> = <nat:9> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:k> = <nat:9> * <var:B> ^ <nat:3> + <nat:3> * <var:B> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 