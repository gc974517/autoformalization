\begin{document} \begin{theorem} Take a list of commands as follows \begin{verbatim} <var:t1> := <var:M> ; <var:t2> := <var:t1> * <var:M> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:4> ; <var:t2> := <var:t2> * <nat:3> ; <var:h> := <var:t2> <var:h> := <var:h> + <var:t1> <var:h> := <var:h> + <var:t0> \end{verbatim} Given it to hold that $ <var:M> = <var:P> $ prior to interpreting this segment of code it must be that we have $ <var:h> = <nat:3> \cdot <var:P> ^ <nat:2> + <nat:4> \cdot <var:P> + <nat:3> $ after list of commands finishes . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:M> = <var:P> \} \\ <var:t1> := <var:M> ; \\ \{ <var:M> = <var:P> \land <var:t1> = <var:P> \} \\ <var:t2> := <var:t1> * <var:M> ; \\ \{ <var:M> = <var:P> \land <var:t1> = <var:P> \land <var:t2> = <var:P> ^ <nat:2> \} \\ <var:t0> := <nat:3> ; \\ \{ <var:M> = <var:P> \land <var:t1> = <var:P> \land <var:t2> = <var:P> ^ <nat:2> \land <var:t0> = <nat:3> \} \\ <var:t1> := <var:t1> * <nat:4> ; \\ \{ <var:M> = <var:P> \land <var:t1> = <nat:4> \times <var:P> \land <var:t2> = <var:P> ^ <nat:2> \land <var:t0> = <nat:3> \} \\ <var:t2> := <var:t2> * <nat:3> ; \\ \{ <var:M> = <var:P> \land <var:t1> = <nat:4> \times <var:P> \land <var:t2> = <nat:3> \times <var:P> ^ <nat:2> \land <var:t0> = <nat:3> \} \\ <var:h> := <var:t2> \\ \{ <var:M> = <var:P> \land <var:t1> = <nat:4> \times <var:P> \land <var:t0> = <nat:3> \land <var:h> = <nat:3> \times <var:P> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:t1> \\ \{ <var:M> = <var:P> \land <var:t0> = <nat:3> \land <var:h> = <nat:3> \times <var:P> ^ <nat:2> + <nat:4> \times <var:P> \} \\ <var:h> := <var:h> + <var:t0> \\ \{ <var:M> = <var:P> \land <var:h> = <nat:3> \times <var:P> ^ <nat:2> + <nat:4> \times <var:P> + <nat:3> \} \end{eqnarray} Therefore , this series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:M> = <var:P> }} <var:t1> := <var:M> ; <var:t2> := <var:t1> * <var:M> ; <var:t0> := <nat:3> ; <var:t1> := <var:t1> * <nat:4> ; <var:t2> := <var:t2> * <nat:3> ; <var:h> := <var:t2> <var:h> := <var:h> + <var:t1> <var:h> := <var:h> + <var:t0> {{ <var:h> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:t1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:t1> = <var:P> /\ <var:t2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:t1> = <var:P> /\ <var:t2> = <var:P> ^ <nat:2> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:t1> = <nat:4> * <var:P> /\ <var:t2> = <var:P> ^ <nat:2> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:t1> = <nat:4> * <var:P> /\ <var:t2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:t1> = <nat:4> * <var:P> /\ <var:t0> = <nat:3> /\ <var:h> = <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:t0> = <nat:3> /\ <var:h> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:h> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 