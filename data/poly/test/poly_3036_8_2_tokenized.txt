\begin{document} \begin{theorem} Take a list of commands as \begin{verbatim} <var:y> := <nat:3> ; <var:y> := <var:y> * <var:u> ; <var:y> := <nat:4> + <var:y> * <var:u> ; <var:y> := <nat:1> + <var:y> * <var:u> ; <var:y> := <nat:2> + <var:y> * <var:u> ; <var:y> := <nat:1> + <var:y> * <var:u> ; <var:y> := <nat:2> + <var:y> * <var:u> ; <var:y> := <nat:1> + <var:y> * <var:u> \end{verbatim} Allow ( for all positive coefficients $ <var:G> $ ) $ <var:u> = <var:G> $ before the evaluation of this list of commands it follows that we have $ <var:y> = <nat:3> \cdot <var:G> ^ <nat:7> + <nat:4> \cdot <var:G> ^ <nat:5> + <nat:1> \cdot <var:G> ^ <nat:4> + <nat:2> \cdot <var:G> ^ <nat:3> + <nat:1> \cdot <var:G> ^ <nat:2> + <nat:2> \cdot <var:G> + <nat:1> $ after series of commands finishes . \end{theorem} \begin{proof} The proof of this code is demonstrated using Hoare reasoning . Moving on to the next step , the variable update line \verb | <var:y> := <nat:3> ; | . This line advances the precondition $ \{ <var:u> = <var:G> \} $ as the condition $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> \} $ . This is known to be sound through the assignment inference rule found in usual Hoare logic . Observing the next line of code found in the program , we see the environment update statement \verb | <var:y> := <var:y> * <var:u> ; | . This code transfers $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> \} $ into the condition $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> * <var:G> + \} $ . This is known to be sound with the assignment rule defined in typical Hoare logic . Following , the variable binding line binding $ <nat:4> + <var:y> * <var:u> $ to $ <var:y>$ . This redefines $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> * <var:G> + \} $ as the condition $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> * <var:G> ^ <nat:2> + <nat:4> \} $ . This is known to be sound using the assignment law obtained from usual Hoare reasoning . Shifting focus toward the following step seen in the list of commands , we have the variable assignmet statement \verb | <var:y> := <nat:1> + <var:y> * <var:u> ; | . This transfers $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> * <var:G> ^ <nat:2> + <nat:4> \} $ as the postcondition $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> + <nat:1> \} $ . This is ensured with the assignment inference rule given in typical Hoare logic . Stepping forward , we see the variable update line defining $ <nat:2> + <var:y> * <var:u> $ toward $ <var:y>$ . This redefines $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> + <nat:1> \} $ to the postcondition $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> \} $ . Going forward , we have the assignment code \verb | <var:y> := <nat:1> + <var:y> * <var:u> ; | . This advances the precondition $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> \} $ as the condition $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> \} $ . Now , we see the line defining $ <nat:2> + <var:y> * <var:u> $ toward $ <var:y>$ . This redefines the condition $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> \} $ into the condition $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> \} $ . After , the assignment statement defining $ <nat:1> + <var:y> * <var:u$ as $ <var:y>$ . This moves the condition $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> \} $ toward the condition $ \{ <var:u> = <var:G> \land <var:y> = <nat:3> * <var:G> ^ <nat:7> + <nat:4> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> \} $ . This is shown to be logically sound using the assignment scheme of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:u> = <var:G> }} <var:y> := <nat:3> ; <var:y> := <var:y> * <var:u> ; <var:y> := <nat:4> + <var:y> * <var:u> ; <var:y> := <nat:1> + <var:y> * <var:u> ; <var:y> := <nat:2> + <var:y> * <var:u> ; <var:y> := <nat:1> + <var:y> * <var:u> ; <var:y> := <nat:2> + <var:y> * <var:u> ; <var:y> := <nat:1> + <var:y> * <var:u> {{ <var:y> = <nat:3> * <var:G> ^ <nat:7> + <nat:4> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:y> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:y> = <nat:3> * <var:G> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:y> = <nat:3> * <var:G> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:y> = <nat:3> * <var:G> ^ <nat:3> + <nat:4> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:y> = <nat:3> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:y> = <nat:3> * <var:G> ^ <nat:5> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:y> = <nat:3> * <var:G> ^ <nat:6> + <nat:4> * <var:G> ^ <nat:4> + <nat:1> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:y> = <nat:3> * <var:G> ^ <nat:7> + <nat:4> * <var:G> ^ <nat:5> + <nat:1> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 