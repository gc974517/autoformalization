\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:9> ; <var:w> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:K> = <var:G> $ ahead of running our series of commands then we have $ <var:w> = <nat:9> $ after list of commands terminates . \end{theorem} \begin{proof} The method of proof for our list of commands can be seen by this decorated list of instructions . \begin{eqnarray} \{ <var:K> = <var:G> \} \\ <var:i0> := <nat:9> ; \\ \{ <var:K> = <var:G> \land <var:i0> = <nat:9> \} \\ <var:w> := <var:i0> \\ \{ <var:K> = <var:G> \land <var:w> = <nat:9> \} \end{eqnarray} Applying typical Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:9> ; <var:w> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:K> = <var:G> }} <def:poly> {{ <var:w> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:w> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 