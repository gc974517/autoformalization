\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:v1> := <var:o> ; <var:v2> := <var:v1> * <var:o> ; <var:v3> := <var:v2> * <var:o> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:8> ; <var:v2> := <var:v2> * <nat:6> ; <var:v3> := <var:v3> * <nat:9> ; <var:Q> := <var:v3> <var:Q> := <var:Q> + <var:v2> <var:Q> := <var:Q> + <var:v1> <var:Q> := <var:Q> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:o> = <var:H> $ prior to the execution of our series of commands it follows that we have $ <var:Q> = <nat:9> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:8> * <var:H> + <nat:1> $ . \end{theorem} \begin{proof} Applying standard Hoare logic produces : \begin{eqnarray} \{ <var:o> = <var:H> \} \\ <var:v1> := <var:o> ; \\ \{ <var:o> = <var:H> \land <var:v1> = <var:H> \} \\ <var:v2> := <var:v1> * <var:o> ; \\ \{ <var:o> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \} \\ <var:v3> := <var:v2> * <var:o> ; \\ \{ <var:o> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \} \\ <var:v0> := <nat:1> ; \\ \{ <var:o> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:1> \} \\ <var:v1> := <var:v1> * <nat:8> ; \\ \{ <var:o> = <var:H> \land <var:v1> = <nat:8> * <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:1> \} \\ <var:v2> := <var:v2> * <nat:6> ; \\ \{ <var:o> = <var:H> \land <var:v1> = <nat:8> * <var:H> \land <var:v2> = <nat:6> * <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:1> \} \\ <var:v3> := <var:v3> * <nat:9> ; \\ \{ <var:o> = <var:H> \land <var:v1> = <nat:8> * <var:H> \land <var:v2> = <nat:6> * <var:H> ^ <nat:2> \land <var:v3> = <nat:9> * <var:H> ^ <nat:3> \land <var:v0> = <nat:1> \} \\ <var:Q> := <var:v3> \\ \{ <var:o> = <var:H> \land <var:v1> = <nat:8> * <var:H> \land <var:v2> = <nat:6> * <var:H> ^ <nat:2> \land <var:v0> = <nat:1> \land <var:Q> = <nat:9> * <var:H> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:v2> \\ \{ <var:o> = <var:H> \land <var:v1> = <nat:8> * <var:H> \land <var:v0> = <nat:1> \land <var:Q> = <nat:9> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:v1> \\ \{ <var:o> = <var:H> \land <var:v0> = <nat:1> \land <var:Q> = <nat:9> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:8> * <var:H> \} \\ <var:Q> := <var:Q> + <var:v0> \\ \{ <var:o> = <var:H> \land <var:Q> = <nat:9> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:8> * <var:H> + <nat:1> \} \end{eqnarray} Thusly , our set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v1> := <var:o> ; <var:v2> := <var:v1> * <var:o> ; <var:v3> := <var:v2> * <var:o> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:8> ; <var:v2> := <var:v2> * <nat:6> ; <var:v3> := <var:v3> * <nat:9> ; <var:Q> := <var:v3> <var:Q> := <var:Q> + <var:v2> <var:Q> := <var:Q> + <var:v1> <var:Q> := <var:Q> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:o> = <var:H> }} <def:poly> {{ <var:Q> = <nat:9> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:8> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:v1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:v1> = <var:H> /\ <var:v2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:v1> = <var:H> /\ <var:v2> = <var:H> ^ <nat:2> /\ <var:v3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:v1> = <var:H> /\ <var:v2> = <var:H> ^ <nat:2> /\ <var:v3> = <var:H> ^ <nat:3> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:v1> = <nat:8> * <var:H> /\ <var:v2> = <var:H> ^ <nat:2> /\ <var:v3> = <var:H> ^ <nat:3> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:v1> = <nat:8> * <var:H> /\ <var:v2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:v3> = <var:H> ^ <nat:3> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:v1> = <nat:8> * <var:H> /\ <var:v2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:v3> = <nat:9> * <var:H> ^ <nat:3> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:v1> = <nat:8> * <var:H> /\ <var:v2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:v0> = <nat:1> /\ <var:Q> = <nat:9> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:v1> = <nat:8> * <var:H> /\ <var:v0> = <nat:1> /\ <var:Q> = <nat:9> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:v0> = <nat:1> /\ <var:Q> = <nat:9> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:Q> = <nat:9> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:8> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 