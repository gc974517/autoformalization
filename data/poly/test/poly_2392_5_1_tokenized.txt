\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:A1> := <var:I> ; <var:A0> := <nat:5> ; <var:A1> := <var:A1> * <nat:5> ; <var:U> := <var:A1> <var:U> := <var:U> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Assuming for positive integers $ <var:V> $ it to be that $ <var:I> = <var:V> $ prior to interpreting the program it follows that we have $ <var:U> = <nat:5> * <var:V> + <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands is clear using Hoare reasoning . Paying attention to the next bit of code in the series of commands , we have the assignment code assigning $ <var:I> $ toward $ <var:A1>$ . This forwards $ \{ <var:I> = <var:V> \} $ into the postcondition $ \{ <var:I> = <var:V> \land <var:A1> = <var:V> \} $ . This is sound with the assignment rule obtained from Hoare reasoning . Moving on , we see the environment update code \verb | <var:A0> := <nat:5> ; | . This command takes $ \{ <var:I> = <var:V> \land <var:A1> = <var:V> \} $ into the condition $ \{ <var:I> = <var:V> \land <var:A1> = <var:V> \land <var:A0> = <nat:5> \} $ . This is shown with the assignment inference rule obtained from standard Hoare techniques . Looking at the following bit of code contained in our program , the environment update code \verb | <var:A1> := <var:A1> * <nat:5> ; | . This moves the condition $ \{ <var:I> = <var:V> \land <var:A1> = <var:V> \land <var:A0> = <nat:5> \} $ as the postcondition $ \{ <var:I> = <var:V> \land <var:A1> = <nat:5> \times <var:V> \land <var:A0> = <nat:5> \} $ . This is shown to be logically sound using the assignment scheme given in usual Hoare techniques . Now , the variable update line defining $ <var:A1$ to $ <var:U>$ . This command redefines $ \{ <var:I> = <var:V> \land <var:A1> = <nat:5> \times <var:V> \land <var:A0> = <nat:5> \} $ to the condition $ \{ <var:I> = <var:V> \land <var:A0> = <nat:5> \land <var:U> = <nat:5> \times <var:V> \} $ . Moving forward to the next line in the list of instructions , we have the variable binding line \verb | <var:U> := <var:U> + <var:A0> | . This advances the condition $ \{ <var:I> = <var:V> \land <var:A0> = <nat:5> \land <var:U> = <nat:5> \times <var:V> \} $ into the postcondition $ \{ <var:I> = <var:V> \land <var:U> = <nat:5> \times <var:V> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A1> := <var:I> ; <var:A0> := <nat:5> ; <var:A1> := <var:A1> * <nat:5> ; <var:U> := <var:A1> <var:U> := <var:U> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:I> = <var:V> }} <def:poly> {{ <var:U> = <nat:5> * <var:V> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:V> /\ <var:A1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:V> /\ <var:A1> = <var:V> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:V> /\ <var:A1> = <nat:5> * <var:V> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:V> /\ <var:A0> = <nat:5> /\ <var:U> = <nat:5> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:V> /\ <var:U> = <nat:5> * <var:V> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 