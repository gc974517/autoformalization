\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} such that \begin{verbatim} <var:e> := <nat:1> ; <var:e> := <nat:3> + <var:e> * <var:n> ; <var:e> := <nat:3> + <var:e> * <var:n> ; <var:e> := <nat:4> + <var:e> * <var:n> ; <var:e> := <nat:3> + <var:e> * <var:n> ; <var:e> := <nat:1> + <var:e> * <var:n> ; <var:e> := <nat:4> + <var:e> * <var:n> ; <var:e> := <nat:2> + <var:e> * <var:n> ; <var:e> := <nat:2> + <var:e> * <var:n> ; <var:e> := <nat:3> + <var:e> * <var:n> \end{verbatim} Allowing that we have $ <var:n> = <var:a> $ before running this series of instructions it holds that we have $ <var:e> = <nat:1> \times <var:a> ^ <nat:9> + <nat:3> \times <var:a> ^ <nat:8> + <nat:3> \times <var:a> ^ <nat:7> + <nat:4> \times <var:a> ^ <nat:6> + <nat:3> \times <var:a> ^ <nat:5> + <nat:1> \times <var:a> ^ <nat:4> + <nat:4> \times <var:a> ^ <nat:3> + <nat:2> \times <var:a> ^ <nat:2> + <nat:2> \times <var:a> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands is demonstrated by standard Hoare techniques . Going forward , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:a> \} & <var:e> := <nat:1> & \{ <var:n> = <var:a> \land <var:e> = <nat:1> \} \end{tabular} This is guaranteed through the assignment inference rule found in standard Hoare reasoning . Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:n> = <var:a> \} & <var:e> := <nat:1> & \{ <var:n> = <var:a> \land <var:e> = <nat:1> \} \\ \{ <var:n> = <var:a> \land <var:e> = <nat:1> \} & <var:e> := <nat:3> + <var:e> * <var:n> & \{ <var:n> = <var:a> \land <var:e> = <nat:1> \cdot <var:a> + <nat:3> \} \\ \{ <var:n> = <var:a> \land <var:e> = <nat:1> \cdot <var:a> + <nat:3> \} & <var:e> := <nat:3> + <var:e> * <var:n> & \{ <var:n> = <var:a> \land <var:e> = <nat:1> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:3> \} \\ \{ <var:n> = <var:a> \land <var:e> = <nat:1> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:3> \} & <var:e> := <nat:4> + <var:e> * <var:n> & \{ <var:n> = <var:a> \land <var:e> = <nat:1> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:4> \} \\ \{ <var:n> = <var:a> \land <var:e> = <nat:1> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:4> \} & <var:e> := <nat:3> + <var:e> * <var:n> & \{ <var:n> = <var:a> \land <var:e> = <nat:1> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:4> \cdot <var:a> + <nat:3> \} \\ \{ <var:n> = <var:a> \land <var:e> = <nat:1> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:4> \cdot <var:a> + <nat:3> \} & <var:e> := <nat:1> + <var:e> * <var:n> & \{ <var:n> = <var:a> \land <var:e> = <nat:1> \cdot <var:a> ^ <nat:5> + <nat:3> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:1> \} \\ \{ <var:n> = <var:a> \land <var:e> = <nat:1> \cdot <var:a> ^ <nat:5> + <nat:3> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:1> \} & <var:e> := <nat:4> + <var:e> * <var:n> & \{ <var:n> = <var:a> \land <var:e> = <nat:1> \cdot <var:a> ^ <nat:6> + <nat:3> \cdot <var:a> ^ <nat:5> + <nat:3> \cdot <var:a> ^ <nat:4> + <nat:4> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + <nat:4> \} \end{tabular} This is guaranteed by the variable binding scheme given by standard Hoare reasoning . Immediately after , \[ \begin{tabular} {rcl} \{ <var:n> = <var:a> \} & <var:e> := <nat:1> & \{ <var:n> = <var:a> \land <var:e> = <nat:1> \} \end{tabular} Immediately after , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:a> \} & <var:e> := <nat:1> & \{ <var:n> = <var:a> \land <var:e> = <nat:1> \} \end{tabular} This is shown to be logically sound using the inference rule from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:n> = <var:a> }} <var:e> := <nat:1> ; <var:e> := <nat:3> + <var:e> * <var:n> ; <var:e> := <nat:3> + <var:e> * <var:n> ; <var:e> := <nat:4> + <var:e> * <var:n> ; <var:e> := <nat:3> + <var:e> * <var:n> ; <var:e> := <nat:1> + <var:e> * <var:n> ; <var:e> := <nat:4> + <var:e> * <var:n> ; <var:e> := <nat:2> + <var:e> * <var:n> ; <var:e> := <nat:2> + <var:e> * <var:n> ; <var:e> := <nat:3> + <var:e> * <var:n> {{ <var:e> = <nat:1> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:4> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:e> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:e> = <nat:1> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:e> = <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:e> = <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:e> = <nat:1> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:e> = <nat:1> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:e> = <nat:1> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:e> = <nat:1> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:4> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:e> = <nat:1> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:4> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:a> /\ <var:e> = <nat:1> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:4> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 