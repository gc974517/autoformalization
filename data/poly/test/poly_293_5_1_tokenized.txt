\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:w> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:4> ; <var:O> := <var:d1> <var:O> := <var:O> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> in \emph{Imp} . Allow letting whole numbers $ <var:k> $ it to be that $ <var:w> = <var:k> $ prior to evaluating our program it follows that $ <var:O> = <nat:4> \times <var:k> + <nat:3> $ when segment of code is done executing . \end{theorem} \begin{proof} Using usual Hoare techniques produces : \begin{eqnarray} \{ <var:w> = <var:k> \} \\ <var:d1> := <var:w> ; \\ \{ <var:w> = <var:k> \land <var:d1> = <var:k> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:w> = <var:k> \land <var:d1> = <var:k> \land <var:d0> = <nat:3> \} \\ <var:d1> := <var:d1> * <nat:4> ; \\ \{ <var:w> = <var:k> \land <var:d1> = <nat:4> \times <var:k> \land <var:d0> = <nat:3> \} \\ <var:O> := <var:d1> \\ \{ <var:w> = <var:k> \land <var:d0> = <nat:3> \land <var:O> = <nat:4> \times <var:k> \} \\ <var:O> := <var:O> + <var:d0> \\ \{ <var:w> = <var:k> \land <var:O> = <nat:4> \times <var:k> + <nat:3> \} \end{eqnarray} Considering the above , the list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d1> := <var:w> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:4> ; <var:O> := <var:d1> <var:O> := <var:O> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:w> = <var:k> }} <def:poly> {{ <var:O> = <nat:4> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:d1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:d1> = <var:k> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:d1> = <nat:4> * <var:k> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:d0> = <nat:3> /\ <var:O> = <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:k> /\ <var:O> = <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 