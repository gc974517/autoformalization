\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} such that \begin{verbatim} <var:t> := <nat:1> ; <var:t> := <nat:1> + <var:t> * <var:k> ; <var:t> := <nat:4> + <var:t> * <var:k> \end{verbatim} Given that we have $ <var:k> = <var:q> $ , for every positive integer coefficients $ <var:q> $ , before the execution of this code segment it must be that we have $ <var:t> = <nat:1> \times <var:q> ^ <nat:2> + <nat:1> \times <var:q> + <nat:4> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques gives : \begin{eqnarray} \{ <var:k> = <var:q> \} \\ <var:t> := <nat:1> ; \\ \{ <var:k> = <var:q> \land <var:t> = <nat:1> \} \\ <var:t> := <nat:1> + <var:t> * <var:k> ; \\ \{ <var:k> = <var:q> \land <var:t> = <nat:1> \times <var:q> + <nat:1> \} \\ <var:t> := <nat:4> + <var:t> * <var:k> \\ \{ <var:k> = <var:q> \land <var:t> = <nat:1> \times <var:q> ^ <nat:2> + <nat:1> \times <var:q> + <nat:4> \} \end{eqnarray} As a consequence , our program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:k> = <var:q> }} <var:t> := <nat:1> ; <var:t> := <nat:1> + <var:t> * <var:k> ; <var:t> := <nat:4> + <var:t> * <var:k> {{ <var:t> = <nat:1> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:t> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:t> = <nat:1> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:t> = <nat:1> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 