\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:4> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:p> ; <var:R3> := <nat:8> ; <var:R3> := <var:R3> * <var:p> ; <var:R3> := <var:R3> * <var:p> ; <var:R3> := <var:R3> * <var:p> ; <var:a> := <var:R3> ; <var:a> := <var:a> + <var:R1> ; <var:a> := <var:a> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:p> = <var:u> $ --- given every $ <var:u> $ --- before running the list of instructions , then $ <var:a> = <nat:8> \times <var:u> ^ <nat:3> + <nat:9> \times <var:u> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:u> \} \\ <var:R0> := <nat:4> ; \\ \{ <var:p> = <var:u> \land <var:R0> = <nat:4> \} \\ <var:R1> := <nat:9> ; \\ \{ <var:p> = <var:u> \land <var:R0> = <nat:4> \land <var:R1> = <nat:9> \} \\ <var:R1> := <var:R1> * <var:p> ; \\ \{ <var:p> = <var:u> \land <var:R0> = <nat:4> \land <var:R1> = <nat:9> \times <var:u> \} \\ <var:R3> := <nat:8> ; \\ \{ <var:p> = <var:u> \land <var:R0> = <nat:4> \land <var:R1> = <nat:9> \times <var:u> \land <var:R3> = <nat:8> \} \\ <var:R3> := <var:R3> * <var:p> ; \\ \{ <var:p> = <var:u> \land <var:R0> = <nat:4> \land <var:R1> = <nat:9> \times <var:u> \land <var:R3> = <nat:8> \times <var:u> \} \\ <var:R3> := <var:R3> * <var:p> ; \\ \{ <var:p> = <var:u> \land <var:R0> = <nat:4> \land <var:R1> = <nat:9> \times <var:u> \land <var:R3> = <nat:8> \times <var:u> ^ <nat:2> \} \\ <var:R3> := <var:R3> * <var:p> ; \\ \{ <var:p> = <var:u> \land <var:R0> = <nat:4> \land <var:R1> = <nat:9> \times <var:u> \land <var:R3> = <nat:8> \times <var:u> ^ <nat:3> \} \\ <var:a> := <var:R3> ; \\ \{ <var:p> = <var:u> \land <var:R0> = <nat:4> \land <var:R1> = <nat:9> \times <var:u> \land <var:a> = <nat:8> \times <var:u> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:R1> ; \\ \{ <var:p> = <var:u> \land <var:R0> = <nat:4> \land <var:a> = <nat:8> \times <var:u> ^ <nat:3> + <nat:9> \times <var:u> \} \\ <var:a> := <var:a> + <var:R0> \\ \{ <var:p> = <var:u> \land <var:a> = <nat:8> \times <var:u> ^ <nat:3> + <nat:9> \times <var:u> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R0> := <nat:4> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:p> ; <var:R3> := <nat:8> ; <var:R3> := <var:R3> * <var:p> ; <var:R3> := <var:R3> * <var:p> ; <var:R3> := <var:R3> * <var:p> ; <var:a> := <var:R3> ; <var:a> := <var:a> + <var:R1> ; <var:a> := <var:a> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:p> = <var:u> }} <def:poly> {{ <var:a> = <nat:8> * <var:u> ^ <nat:3> + <nat:9> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:9> * <var:u> /\ <var:R3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:9> * <var:u> /\ <var:R3> = <nat:8> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:9> * <var:u> /\ <var:R3> = <nat:8> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:9> * <var:u> /\ <var:R3> = <nat:8> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:R0> = <nat:4> /\ <var:R1> = <nat:9> * <var:u> /\ <var:a> = <nat:8> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:R0> = <nat:4> /\ <var:a> = <nat:8> * <var:u> ^ <nat:3> + <nat:9> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:u> /\ <var:a> = <nat:8> * <var:u> ^ <nat:3> + <nat:9> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 