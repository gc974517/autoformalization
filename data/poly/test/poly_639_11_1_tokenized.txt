\begin{document} \begin{theorem} Take a program as \begin{verbatim} <var:j1> := <var:L> ; <var:j2> := <var:j1> * <var:L> ; <var:j3> := <var:j2> * <var:L> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:1> ; <var:j2> := <var:j2> * <nat:6> ; <var:j3> := <var:j3> * <nat:2> ; <var:Z> := <var:j3> <var:Z> := <var:Z> + <var:j2> <var:Z> := <var:Z> + <var:j1> <var:Z> := <var:Z> + <var:j0> \end{verbatim} Assume for every whole numbers $ <var:G> $ it to be that $ <var:L> = <var:G> $ prior to the execution of this program it follows that $ <var:Z> = <nat:2> \times <var:G> ^ <nat:3> + <nat:6> \times <var:G> ^ <nat:2> + <nat:1> \times <var:G> + <nat:2> $ when program is done executing . \end{theorem} \begin{proof} Applying Hoare reasoning gives us : \begin{eqnarray} \{ <var:L> = <var:G> \} \\ <var:j1> := <var:L> ; \\ \{ <var:L> = <var:G> \land <var:j1> = <var:G> \} \\ <var:j2> := <var:j1> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:j1> = <var:G> \land <var:j2> = <var:G> ^ <nat:2> \} \\ <var:j3> := <var:j2> * <var:L> ; \\ \{ <var:L> = <var:G> \land <var:j1> = <var:G> \land <var:j2> = <var:G> ^ <nat:2> \land <var:j3> = <var:G> ^ <nat:3> \} \\ <var:j0> := <nat:2> ; \\ \{ <var:L> = <var:G> \land <var:j1> = <var:G> \land <var:j2> = <var:G> ^ <nat:2> \land <var:j3> = <var:G> ^ <nat:3> \land <var:j0> = <nat:2> \} \\ <var:j1> := <var:j1> * <nat:1> ; \\ \{ <var:L> = <var:G> \land <var:j1> = <nat:1> \cdot <var:G> \land <var:j2> = <var:G> ^ <nat:2> \land <var:j3> = <var:G> ^ <nat:3> \land <var:j0> = <nat:2> \} \\ <var:j2> := <var:j2> * <nat:6> ; \\ \{ <var:L> = <var:G> \land <var:j1> = <nat:1> \cdot <var:G> \land <var:j2> = <nat:6> \cdot <var:G> ^ <nat:2> \land <var:j3> = <var:G> ^ <nat:3> \land <var:j0> = <nat:2> \} \\ <var:j3> := <var:j3> * <nat:2> ; \\ \{ <var:L> = <var:G> \land <var:j1> = <nat:1> \cdot <var:G> \land <var:j2> = <nat:6> \cdot <var:G> ^ <nat:2> \land <var:j3> = <nat:2> \cdot <var:G> ^ <nat:3> \land <var:j0> = <nat:2> \} \\ <var:Z> := <var:j3> \\ \{ <var:L> = <var:G> \land <var:j1> = <nat:1> \cdot <var:G> \land <var:j2> = <nat:6> \cdot <var:G> ^ <nat:2> \land <var:j0> = <nat:2> \land <var:Z> = <nat:2> \cdot <var:G> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:j2> \\ \{ <var:L> = <var:G> \land <var:j1> = <nat:1> \cdot <var:G> \land <var:j0> = <nat:2> \land <var:Z> = <nat:2> \cdot <var:G> ^ <nat:3> + <nat:6> \cdot <var:G> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:j1> \\ \{ <var:L> = <var:G> \land <var:j0> = <nat:2> \land <var:Z> = <nat:2> \cdot <var:G> ^ <nat:3> + <nat:6> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> \} \\ <var:Z> := <var:Z> + <var:j0> \\ \{ <var:L> = <var:G> \land <var:Z> = <nat:2> \cdot <var:G> ^ <nat:3> + <nat:6> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:2> \} \end{eqnarray} Given the above , our list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:L> = <var:G> }} <var:j1> := <var:L> ; <var:j2> := <var:j1> * <var:L> ; <var:j3> := <var:j2> * <var:L> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:1> ; <var:j2> := <var:j2> * <nat:6> ; <var:j3> := <var:j3> * <nat:2> ; <var:Z> := <var:j3> <var:Z> := <var:Z> + <var:j2> <var:Z> := <var:Z> + <var:j1> <var:Z> := <var:Z> + <var:j0> {{ <var:Z> = <nat:2> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:j1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:j1> = <var:G> /\ <var:j2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:j1> = <var:G> /\ <var:j2> = <var:G> ^ <nat:2> /\ <var:j3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:j1> = <var:G> /\ <var:j2> = <var:G> ^ <nat:2> /\ <var:j3> = <var:G> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:j1> = <nat:1> * <var:G> /\ <var:j2> = <var:G> ^ <nat:2> /\ <var:j3> = <var:G> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:j1> = <nat:1> * <var:G> /\ <var:j2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:j3> = <var:G> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:j1> = <nat:1> * <var:G> /\ <var:j2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:j3> = <nat:2> * <var:G> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:j1> = <nat:1> * <var:G> /\ <var:j2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:j0> = <nat:2> /\ <var:Z> = <nat:2> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:j1> = <nat:1> * <var:G> /\ <var:j0> = <nat:2> /\ <var:Z> = <nat:2> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:j0> = <nat:2> /\ <var:Z> = <nat:2> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:Z> = <nat:2> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 