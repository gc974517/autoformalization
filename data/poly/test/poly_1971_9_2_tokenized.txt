\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h> := <nat:1> ; <var:h> := <nat:1> + <var:h> * <var:A> ; <var:h> := <nat:1> + <var:h> * <var:A> ; <var:h> := <nat:1> + <var:h> * <var:A> ; <var:h> := <nat:3> + <var:h> * <var:A> ; <var:h> := <var:h> * <var:A> ; <var:h> := <nat:2> + <var:h> * <var:A> ; <var:h> := <nat:1> + <var:h> * <var:A> ; <var:h> := <nat:4> + <var:h> * <var:A> \end{verbatim} \end{definition} \begin{theorem} Allow , taking natural coefficients $ <var:m> $ , that we have $ <var:A> = <var:m> $ prior to the evaluation of the segment of code it must be that $ <var:h> = <nat:1> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our set of commands can be given using Hoare logic . Moving on to the proceeding line of code in our series of commands , we have the assignment statement binding $ <nat:1> $ to $ <var:h>$ . This statement moves the precondition $ \{ <var:A> = <var:m> \} $ to $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \} $ . This is rigorously given with the assignment rule from typical Hoare reasoning . Moving on , we see the binding line defining $ <nat:1> + <var:h> * <var:A> $ into $ <var:h>$ . This statement redefines the precondition $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \} $ toward the postcondition $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> + <nat:1> \} $ . This is shown to be logically sound with the assignment law of Hoare reasoning . Moving on , we see the assignment command assigning $ <nat:1> + <var:h> * <var:A> $ into $ <var:h>$ . This redefines $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> + <nat:1> \} $ toward $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:1> \} $ . This is ensured by the assignment law obtained from typical Hoare reasoning . Moving forward to the next step , we see the variable assignmet command \verb | <var:h> := <nat:1> + <var:h> * <var:A> ; | . This command moves the condition $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:1> \} $ into the postcondition $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:1> \} $ . This is deduced through the assignment rule found in typical Hoare logic . Looking at the following line in our segment of code , the assignment statement \verb | <var:h> := <nat:3> + <var:h> * <var:A> ; | . This moves $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:1> \} $ to $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:3> \} $ . Stepping forward , we see the environment update statement \verb | <var:h> := <var:h> * <var:A> ; | . This command takes $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:3> \} $ to $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + \} $ . This is deduced through the assignment law given by Hoare logic . Further , we see the variable update statement binding $ <nat:2> + <var:h> * <var:A> $ into $ <var:h>$ . This transfers $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + \} $ toward the postcondition $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> ^ <nat:6> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:2> \} $ . Paying attention to the following step found in the series of instructions , we have the environment update command yielding $ <nat:1> + <var:h> * <var:A> $ as $ <var:h>$ . This advances the precondition $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> ^ <nat:6> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:2> \} $ toward $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> ^ <nat:7> + <nat:1> \cdot <var:m> ^ <nat:6> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:2> \cdot <var:m> + <nat:1> \} $ . This is rigorously given with the assignment rule obtained from standard Hoare logic . Honing in on the upcoming statement contained in our series of instructions , we have the assignment command binding $ <nat:4> + <var:h> * <var:A$ into $ <var:h>$ . This redefines $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> ^ <nat:7> + <nat:1> \cdot <var:m> ^ <nat:6> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:2> \cdot <var:m> + <nat:1> \} $ into $ \{ <var:A> = <var:m> \land <var:h> = <nat:1> \cdot <var:m> ^ <nat:8> + <nat:1> \cdot <var:m> ^ <nat:7> + <nat:1> \cdot <var:m> ^ <nat:6> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:2> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:1> ; <var:h> := <nat:1> + <var:h> * <var:A> ; <var:h> := <nat:1> + <var:h> * <var:A> ; <var:h> := <nat:1> + <var:h> * <var:A> ; <var:h> := <nat:3> + <var:h> * <var:A> ; <var:h> := <var:h> * <var:A> ; <var:h> := <nat:2> + <var:h> * <var:A> ; <var:h> := <nat:1> + <var:h> * <var:A> ; <var:h> := <nat:4> + <var:h> * <var:A> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:A> = <var:m> }} <def:poly> {{ <var:h> = <nat:1> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:h> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:h> = <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:h> = <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:h> = <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:h> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:h> = <nat:1> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:h> = <nat:1> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:h> = <nat:1> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:m> /\ <var:h> = <nat:1> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 