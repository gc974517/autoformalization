\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:o> ; <var:m2> := <var:m1> * <var:o> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:4> ; <var:g> := <var:m2> <var:g> := <var:g> + <var:m1> <var:g> := <var:g> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:o> = <var:S> $ ahead of interpreting the set of commands it holds that we have $ <var:g> = <nat:4> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:2> $ when program has finished executing . \end{theorem} \begin{proof} The course of logic for the set of commands can be demonstrated with standard Hoare techniques . Observing the next bits of codein our program , we see \begin{verbatim} { <var:o> = <var:S> } <var:m1> := <var:o> { <var:o> = <var:S> \land <var:m1> = <var:S> } { <var:o> = <var:S> \land <var:m1> = <var:S> } <var:m2> := <var:m1> * <var:o> { <var:o> = <var:S> \land <var:m1> = <var:S> \land <var:m2> = <var:S> ^ <nat:2> } { <var:o> = <var:S> \land <var:m1> = <var:S> \land <var:m2> = <var:S> ^ <nat:2> } <var:m0> := <nat:2> { <var:o> = <var:S> \land <var:m1> = <var:S> \land <var:m2> = <var:S> ^ <nat:2> \land <var:m0> = <nat:2> } { <var:o> = <var:S> \land <var:m1> = <var:S> \land <var:m2> = <var:S> ^ <nat:2> \land <var:m0> = <nat:2> } <var:m1> := <var:m1> * <nat:3> { <var:o> = <var:S> \land <var:m1> = <nat:3> \cdot <var:S> \land <var:m2> = <var:S> ^ <nat:2> \land <var:m0> = <nat:2> } { <var:o> = <var:S> \land <var:m1> = <nat:3> \cdot <var:S> \land <var:m2> = <var:S> ^ <nat:2> \land <var:m0> = <nat:2> } <var:m2> := <var:m2> * <nat:4> { <var:o> = <var:S> \land <var:m1> = <nat:3> \cdot <var:S> \land <var:m2> = <nat:4> \cdot <var:S> ^ <nat:2> \land <var:m0> = <nat:2> } { <var:o> = <var:S> \land <var:m1> = <nat:3> \cdot <var:S> \land <var:m2> = <nat:4> \cdot <var:S> ^ <nat:2> \land <var:m0> = <nat:2> } <var:g> := <var:m2{ <var:o> = <var:S> \land <var:m1> = <nat:3> \cdot <var:S> \land <var:m0> = <nat:2> \land <var:g> = <nat:4> \cdot <var:S> ^ <nat:2> } { <var:o> = <var:S> \land <var:m1> = <nat:3> \cdot <var:S> \land <var:m0> = <nat:2> \land <var:g> = <nat:4> \cdot <var:S> ^ <nat:2> } <var:g> := <var:g> + <var:m1{ <var:o> = <var:S> \land <var:m0> = <nat:2> \land <var:g> = <nat:4> \cdot <var:S> ^ <nat:2> + <nat:3> \cdot <var:S> } { <var:o> = <var:S> \land <var:m0> = <nat:2> \land <var:g> = <nat:4> \cdot <var:S> ^ <nat:2> + <nat:3> \cdot <var:S> } <var:g> := <var:g> + <var:m0{ <var:o> = <var:S> \land <var:g> = <nat:4> \cdot <var:S> ^ <nat:2> + <nat:3> \cdot <var:S> + <nat:2> } \end{verbatim} This is sound by the inference rule from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m1> := <var:o> ; <var:m2> := <var:m1> * <var:o> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:4> ; <var:g> := <var:m2> <var:g> := <var:g> + <var:m1> <var:g> := <var:g> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:o> = <var:S> }} <def:poly> {{ <var:g> = <nat:4> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:m1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:m1> = <var:S> /\ <var:m2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:m1> = <var:S> /\ <var:m2> = <var:S> ^ <nat:2> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:m1> = <nat:3> * <var:S> /\ <var:m2> = <var:S> ^ <nat:2> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:m1> = <nat:3> * <var:S> /\ <var:m2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:m1> = <nat:3> * <var:S> /\ <var:m0> = <nat:2> /\ <var:g> = <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:m0> = <nat:2> /\ <var:g> = <nat:4> * <var:S> ^ <nat:2> + <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:g> = <nat:4> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 