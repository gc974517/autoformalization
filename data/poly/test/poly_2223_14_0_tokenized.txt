\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:2> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:n> ; <var:q2> := <nat:6> ; <var:q2> := <var:q2> * <var:n> ; <var:q2> := <var:q2> * <var:n> ; <var:q3> := <nat:3> ; <var:q3> := <var:q3> * <var:n> ; <var:q3> := <var:q3> * <var:n> ; <var:q3> := <var:q3> * <var:n> ; <var:M> := <var:q3> ; <var:M> := <var:M> + <var:q2> ; <var:M> := <var:M> + <var:q1> ; <var:M> := <var:M> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:n> = <var:r> $ prior to interpreting the series of commands then we see $ <var:M> = <nat:3> \times <var:r> ^ <nat:3> + <nat:6> \times <var:r> ^ <nat:2> + <nat:7> \times <var:r> + <nat:2> $ . \end{theorem} \begin{proof} The argument for the program is shown using usual Hoare logic . Moving on , we see the environment update code assigning $ <nat:2> $ as $ <var:q0>$ . This forwards the condition $ \{ <var:n> = <var:r> \} $ as $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \} $ . Jumping to the following bit of code found in the list of commands , we have the environment update line \verb | <var:q1> := <nat:7> ; | . This command redefines the condition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \} $ toward the postcondition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \} $ . This is shown to be logically sound by the assignment law found in usual Hoare techniques . Moving onward , we have the variable assignmet statement defining $ <var:q1> * <var:n> $ to $ <var:q1>$ . This moves the condition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \} $ to $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \} $ . This is ensured using the assignment scheme found in standard Hoare logic . Moving onward , we see the variable binding command defining $ <nat:6> $ into $ <var:q2>$ . This code takes $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \} $ as $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \} $ . Honing in on the subsequent bit of code found in our series of instructions , the variable assignmet statement \verb | <var:q2> := <var:q2> * <var:n> ; | . This redefines the precondition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \} $ as the condition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> \} $ . This is given using the assignment rule defined in Hoare logic . Taking a look at the following line seen in the series of instructions , we have the binding line binding $ <var:q2> * <var:n> $ as $ <var:q2>$ . This takes the condition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> \} $ to $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment rule in standard Hoare techniques . Paying attention to the proceeding command contained in the segment of code , we see the binding statement \verb | <var:q3> := <nat:3> ; | . This takes the condition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> ^ <nat:2> \} $ to the postcondition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> ^ <nat:2> \land <var:q3> = <nat:3> \} $ . Moving forward , we have the binding line \verb | <var:q3> := <var:q3> * <var:n> ; | . This line moves the condition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> ^ <nat:2> \land <var:q3> = <nat:3> \} $ to $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> ^ <nat:2> \land <var:q3> = <nat:3> \cdot <var:r> \} $ . This is ensured through the assignment inference rule defined by Hoare logic . Considering the following statement found in the list of commands , we see the environment update line \verb | <var:q3> := <var:q3> * <var:n> ; | . This line takes the condition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> ^ <nat:2> \land <var:q3> = <nat:3> \cdot <var:r> \} $ toward the postcondition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> ^ <nat:2> \land <var:q3> = <nat:3> \cdot <var:r> ^ <nat:2> \} $ . Taking another step toward the subsequent bit of code contained in the set of commands , we have the line \verb | <var:q3> := <var:q3> * <var:n> ; | . This code advances the precondition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> ^ <nat:2> \land <var:q3> = <nat:3> \cdot <var:r> ^ <nat:2> \} $ as the condition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> ^ <nat:2> \land <var:q3> = <nat:3> \cdot <var:r> ^ <nat:3> \} $ . This is sound by the assignment rule given in typical Hoare techniques . Moving forward to the proceeding statement contained in our list of instructions , we see the binding code giving $ <var:q3> $ into $ <var:M>$ . This takes the precondition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> ^ <nat:2> \land <var:q3> = <nat:3> \cdot <var:r> ^ <nat:3> \} $ as $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> ^ <nat:2> \land <var:M> = <nat:3> \cdot <var:r> ^ <nat:3> \} $ . Moving forward , we have the variable binding line defining $ <var:M> + <var:q2> $ to $ <var:M>$ . This statement takes $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:q2> = <nat:6> \cdot <var:r> ^ <nat:2> \land <var:M> = <nat:3> \cdot <var:r> ^ <nat:3> \} $ as the condition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:M> = <nat:3> \cdot <var:r> ^ <nat:3> + <nat:6> \cdot <var:r> ^ <nat:2> \} $ . Taking a look at the proceeding statement seen in the series of commands , the assignment line assigning $ <var:M> + <var:q1> $ to $ <var:M>$ . This statement forwards $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:q1> = <nat:7> \cdot <var:r> \land <var:M> = <nat:3> \cdot <var:r> ^ <nat:3> + <nat:6> \cdot <var:r> ^ <nat:2> \} $ toward $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:M> = <nat:3> \cdot <var:r> ^ <nat:3> + <nat:6> \cdot <var:r> ^ <nat:2> + <nat:7> \cdot <var:r> \} $ . This is shown to be logically sound using the assignment inference rule in Hoare logic . Paying attention to the upcoming bit of code seen in the code , we see the binding command letting $ <var:M> + <var:q0$ as $ <var:M>$ . This moves the precondition $ \{ <var:n> = <var:r> \land <var:q0> = <nat:2> \land <var:M> = <nat:3> \cdot <var:r> ^ <nat:3> + <nat:6> \cdot <var:r> ^ <nat:2> + <nat:7> \cdot <var:r> \} $ into the postcondition $ \{ <var:n> = <var:r> \land <var:M> = <nat:3> \cdot <var:r> ^ <nat:3> + <nat:6> \cdot <var:r> ^ <nat:2> + <nat:7> \cdot <var:r> + <nat:2> \} $ . This is deduced through the assignment rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <def:poly> := <var:q0> := <nat:2> ; <var:q1> := <nat:7> ; <var:q1> := <var:q1> * <var:n> ; <var:q2> := <nat:6> ; <var:q2> := <var:q2> * <var:n> ; <var:q2> := <var:q2> * <var:n> ; <var:q3> := <nat:3> ; <var:q3> := <var:q3> * <var:n> ; <var:q3> := <var:q3> * <var:n> ; <var:q3> := <var:q3> * <var:n> ; <var:M> := <var:q3> ; <var:M> := <var:M> + <var:q2> ; <var:M> := <var:M> + <var:q1> ; <var:M> := <var:M> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:n> = <var:r> }} <def:poly> {{ <var:M> = <nat:3> * <var:r> ^ <nat:3> + <nat:6> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:7> * <var:r> /\ <var:q2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:7> * <var:r> /\ <var:q2> = <nat:6> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:7> * <var:r> /\ <var:q2> = <nat:6> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:7> * <var:r> /\ <var:q2> = <nat:6> * <var:r> ^ <nat:2> /\ <var:q3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:7> * <var:r> /\ <var:q2> = <nat:6> * <var:r> ^ <nat:2> /\ <var:q3> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:7> * <var:r> /\ <var:q2> = <nat:6> * <var:r> ^ <nat:2> /\ <var:q3> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:7> * <var:r> /\ <var:q2> = <nat:6> * <var:r> ^ <nat:2> /\ <var:q3> = <nat:3> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:7> * <var:r> /\ <var:q2> = <nat:6> * <var:r> ^ <nat:2> /\ <var:M> = <nat:3> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:7> * <var:r> /\ <var:M> = <nat:3> * <var:r> ^ <nat:3> + <nat:6> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:q0> = <nat:2> /\ <var:M> = <nat:3> * <var:r> ^ <nat:3> + <nat:6> * <var:r> ^ <nat:2> + <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:M> = <nat:3> * <var:r> ^ <nat:3> + <nat:6> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 