\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:T> ; <var:M0> := <nat:1> ; <var:M1> := <var:M1> * <nat:4> ; <var:G> := <var:M1> <var:G> := <var:G> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> . Allowing that $ <var:T> = <var:C> $ , given any positive coefficients $ <var:C> $ , ahead of interpreting the code , it follows that we have $ <var:G> = <nat:4> * <var:C> + <nat:1> $ . \end{theorem} \begin{proof} Notice this decorated list of instructions . \begin{eqnarray} \{ <var:T> = <var:C> \} \\ <var:M1> := <var:T> ; \\ \{ <var:T> = <var:C> \land <var:M1> = <var:C> \} \\ <var:M0> := <nat:1> ; \\ \{ <var:T> = <var:C> \land <var:M1> = <var:C> \land <var:M0> = <nat:1> \} \\ <var:M1> := <var:M1> * <nat:4> ; \\ \{ <var:T> = <var:C> \land <var:M1> = <nat:4> \times <var:C> \land <var:M0> = <nat:1> \} \\ <var:G> := <var:M1> \\ \{ <var:T> = <var:C> \land <var:M0> = <nat:1> \land <var:G> = <nat:4> \times <var:C> \} \\ <var:G> := <var:G> + <var:M0> \\ \{ <var:T> = <var:C> \land <var:G> = <nat:4> \times <var:C> + <nat:1> \} \end{eqnarray} The application of usual Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:T> ; <var:M0> := <nat:1> ; <var:M1> := <var:M1> * <nat:4> ; <var:G> := <var:M1> <var:G> := <var:G> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:T> = <var:C> }} <def:poly> {{ <var:G> = <nat:4> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:M1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:M1> = <var:C> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:M1> = <nat:4> * <var:C> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:M0> = <nat:1> /\ <var:G> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:C> /\ <var:G> = <nat:4> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 