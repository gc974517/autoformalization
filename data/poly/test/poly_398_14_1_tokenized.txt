\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:T> ; <var:Q2> := <var:Q1> * <var:T> ; <var:Q3> := <var:Q2> * <var:T> ; <var:Q4> := <var:Q3> * <var:T> ; <var:Q0> := <nat:9> ; <var:Q1> := <var:Q1> * <nat:7> ; <var:Q2> := <var:Q2> * <nat:8> ; <var:Q3> := <var:Q3> * <nat:5> ; <var:Q4> := <var:Q4> * <nat:9> ; <var:o> := <var:Q4> <var:o> := <var:o> + <var:Q3> <var:o> := <var:o> + <var:Q2> <var:o> := <var:o> + <var:Q1> <var:o> := <var:o> + <var:Q0> \end{verbatim} Assuming it to be that $ <var:T> = <var:f> $ for any $ <var:f> $ prior to the execution of the code , it follows that we have $ <var:o> = <nat:9> \times <var:f> ^ <nat:4> + <nat:5> \times <var:f> ^ <nat:3> + <nat:8> \times <var:f> ^ <nat:2> + <nat:7> \times <var:f> + <nat:9> $ after set of commands has exited . \end{theorem} \begin{proof} The flow of logic for the list of commands can be given with usual Hoare reasoning . Moving forward to the next lines in the code segment , we have \[ \begin{tabular} {rcl} \{ <var:T> = <var:f> \} & <var:Q1> := <var:T> & \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \} \\ \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \} & <var:Q2> := <var:Q1> * <var:T> & \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \} \\ \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \} & <var:Q3> := <var:Q2> * <var:T> & \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \land <var:Q3> = <var:f> ^ <nat:3> \} \\ \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \land <var:Q3> = <var:f> ^ <nat:3> \} & <var:Q4> := <var:Q3> * <var:T> & \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \land <var:Q3> = <var:f> ^ <nat:3> \land <var:Q4> = <var:f> ^ <nat:4> \} \\ \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \land <var:Q3> = <var:f> ^ <nat:3> \land <var:Q4> = <var:f> ^ <nat:4> \} & <var:Q0> := <nat:9> & \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \land <var:Q3> = <var:f> ^ <nat:3> \land <var:Q4> = <var:f> ^ <nat:4> \land <var:Q0> = <nat:9> \} \\ \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \land <var:Q3> = <var:f> ^ <nat:3> \land <var:Q4> = <var:f> ^ <nat:4> \land <var:Q0> = <nat:9> \} & <var:Q1> := <var:Q1> * <nat:7> & \{ <var:T> = <var:f> \land <var:Q1> = <nat:7> \times <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \land <var:Q3> = <var:f> ^ <nat:3> \land <var:Q4> = <var:f> ^ <nat:4> \land <var:Q0> = <nat:9> \} \\ \{ <var:T> = <var:f> \land <var:Q1> = <nat:7> \times <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \land <var:Q3> = <var:f> ^ <nat:3> \land <var:Q4> = <var:f> ^ <nat:4> \land <var:Q0> = <nat:9> \} & <var:Q2> := <var:Q2> * <nat:8> & \{ <var:T> = <var:f> \land <var:Q1> = <nat:7> \times <var:f> \land <var:Q2> = <nat:8> \times <var:f> ^ <nat:2> \land <var:Q3> = <var:f> ^ <nat:3> \land <var:Q4> = <var:f> ^ <nat:4> \land <var:Q0> = <nat:9> \} \\ \{ <var:T> = <var:f> \land <var:Q1> = <nat:7> \times <var:f> \land <var:Q2> = <nat:8> \times <var:f> ^ <nat:2> \land <var:Q3> = <var:f> ^ <nat:3> \land <var:Q4> = <var:f> ^ <nat:4> \land <var:Q0> = <nat:9> \} & <var:Q3> := <var:Q3> * <nat:5> & \{ <var:T> = <var:f> \land <var:Q1> = <nat:7> \times <var:f> \land <var:Q2> = <nat:8> \times <var:f> ^ <nat:2> \land <var:Q3> = <nat:5> \times <var:f> ^ <nat:3> \land <var:Q4> = <var:f> ^ <nat:4> \land <var:Q0> = <nat:9> \} \\ \{ <var:T> = <var:f> \land <var:Q1> = <nat:7> \times <var:f> \land <var:Q2> = <nat:8> \times <var:f> ^ <nat:2> \land <var:Q3> = <nat:5> \times <var:f> ^ <nat:3> \land <var:Q4> = <var:f> ^ <nat:4> \land <var:Q0> = <nat:9> \} & <var:Q4> := <var:Q4> * <nat:9> & \{ <var:T> = <var:f> \land <var:Q1> = <nat:7> \times <var:f> \land <var:Q2> = <nat:8> \times <var:f> ^ <nat:2> \land <var:Q3> = <nat:5> \times <var:f> ^ <nat:3> \land <var:Q4> = <nat:9> \times <var:f> ^ <nat:4> \land <var:Q0> = <nat:9> \} \end{tabular} This is guaranteed by the variable assignmet rule of usual Hoare reasoning . Honing in on the subsequent commands seen in our list of commands , \[ \begin{tabular} {rcl} \{ <var:T> = <var:f> \} & <var:Q1> := <var:T> & \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \} \\ \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \} & <var:Q2> := <var:Q1> * <var:T> & \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \} \\ \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \} & <var:Q3> := <var:Q2> * <var:T> & \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \land <var:Q2> = <var:f> ^ <nat:2> \land <var:Q3> = <var:f> ^ <nat:3> \} \end{tabular} Honing in on the proceeding bit of code contained in the set of commands , \[ \begin{tabular} {rcl} \{ <var:T> = <var:f> \} & <var:Q1> := <var:T> & \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \} \end{tabular} This is ensured using the binding law given by Hoare reasoning . Considering the proceeding step in our code , we see \[ \begin{tabular} {rcl} \{ <var:T> = <var:f> \} & <var:Q1> := <var:T> & \{ <var:T> = <var:f> \land <var:Q1> = <var:f> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <var:Q4> : string := " <var:Q4> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:T> = <var:f> }} <var:Q1> := <var:T> ; <var:Q2> := <var:Q1> * <var:T> ; <var:Q3> := <var:Q2> * <var:T> ; <var:Q4> := <var:Q3> * <var:T> ; <var:Q0> := <nat:9> ; <var:Q1> := <var:Q1> * <nat:7> ; <var:Q2> := <var:Q2> * <nat:8> ; <var:Q3> := <var:Q3> * <nat:5> ; <var:Q4> := <var:Q4> * <nat:9> ; <var:o> := <var:Q4> <var:o> := <var:o> + <var:Q3> <var:o> := <var:o> + <var:Q2> <var:o> := <var:o> + <var:Q1> <var:o> := <var:o> + <var:Q0> {{ <var:o> = <nat:9> * <var:f> ^ <nat:4> + <nat:5> * <var:f> ^ <nat:3> + <nat:8> * <var:f> ^ <nat:2> + <nat:7> * <var:f> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Q1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Q1> = <var:f> /\ <var:Q2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Q1> = <var:f> /\ <var:Q2> = <var:f> ^ <nat:2> /\ <var:Q3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Q1> = <var:f> /\ <var:Q2> = <var:f> ^ <nat:2> /\ <var:Q3> = <var:f> ^ <nat:3> /\ <var:Q4> = <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Q1> = <var:f> /\ <var:Q2> = <var:f> ^ <nat:2> /\ <var:Q3> = <var:f> ^ <nat:3> /\ <var:Q4> = <var:f> ^ <nat:4> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Q1> = <nat:7> * <var:f> /\ <var:Q2> = <var:f> ^ <nat:2> /\ <var:Q3> = <var:f> ^ <nat:3> /\ <var:Q4> = <var:f> ^ <nat:4> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Q1> = <nat:7> * <var:f> /\ <var:Q2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:Q3> = <var:f> ^ <nat:3> /\ <var:Q4> = <var:f> ^ <nat:4> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Q1> = <nat:7> * <var:f> /\ <var:Q2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:Q3> = <nat:5> * <var:f> ^ <nat:3> /\ <var:Q4> = <var:f> ^ <nat:4> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Q1> = <nat:7> * <var:f> /\ <var:Q2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:Q3> = <nat:5> * <var:f> ^ <nat:3> /\ <var:Q4> = <nat:9> * <var:f> ^ <nat:4> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Q1> = <nat:7> * <var:f> /\ <var:Q2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:Q3> = <nat:5> * <var:f> ^ <nat:3> /\ <var:Q0> = <nat:9> /\ <var:o> = <nat:9> * <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Q1> = <nat:7> * <var:f> /\ <var:Q2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:Q0> = <nat:9> /\ <var:o> = <nat:9> * <var:f> ^ <nat:4> + <nat:5> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Q1> = <nat:7> * <var:f> /\ <var:Q0> = <nat:9> /\ <var:o> = <nat:9> * <var:f> ^ <nat:4> + <nat:5> * <var:f> ^ <nat:3> + <nat:8> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:Q0> = <nat:9> /\ <var:o> = <nat:9> * <var:f> ^ <nat:4> + <nat:5> * <var:f> ^ <nat:3> + <nat:8> * <var:f> ^ <nat:2> + <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:f> /\ <var:o> = <nat:9> * <var:f> ^ <nat:4> + <nat:5> * <var:f> ^ <nat:3> + <nat:8> * <var:f> ^ <nat:2> + <nat:7> * <var:f> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 