\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q> := <nat:2> ; <var:Q> := <var:Q> * <var:T> ; <var:Q> := <nat:1> + <var:Q> * <var:T> ; <var:Q> := <nat:2> + <var:Q> * <var:T> ; <var:Q> := <nat:2> + <var:Q> * <var:T> ; <var:Q> := <nat:3> + <var:Q> * <var:T> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:T> = <var:k> $ ( for some integers $ <var:k> $ ) prior to evaluating the segment of code , it holds that we have $ <var:Q> = <nat:2> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:k> \} \\ <var:Q> := <nat:2> ; \\ \{ <var:T> = <var:k> \land <var:Q> = <nat:2> \} \\ <var:Q> := <var:Q> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:Q> = <nat:2> \cdot <var:k> + \} \\ <var:Q> := <nat:1> + <var:Q> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:Q> = <nat:2> \cdot <var:k> ^ <nat:2> + <nat:1> \} \\ <var:Q> := <nat:2> + <var:Q> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:Q> = <nat:2> \cdot <var:k> ^ <nat:3> + <nat:1> \cdot <var:k> + <nat:2> \} \\ <var:Q> := <nat:2> + <var:Q> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:Q> = <nat:2> \cdot <var:k> ^ <nat:4> + <nat:1> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:2> \} \\ <var:Q> := <nat:3> + <var:Q> * <var:T> \\ \{ <var:T> = <var:k> \land <var:Q> = <nat:2> \cdot <var:k> ^ <nat:5> + <nat:1> \cdot <var:k> ^ <nat:3> + <nat:2> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:3> \} \end{eqnarray} Utilizing Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:2> ; <var:Q> := <var:Q> * <var:T> ; <var:Q> := <nat:1> + <var:Q> * <var:T> ; <var:Q> := <nat:2> + <var:Q> * <var:T> ; <var:Q> := <nat:2> + <var:Q> * <var:T> ; <var:Q> := <nat:3> + <var:Q> * <var:T> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:T> = <var:k> }} <def:poly> {{ <var:Q> = <nat:2> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:Q> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:Q> = <nat:2> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:3> + <nat:1> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 