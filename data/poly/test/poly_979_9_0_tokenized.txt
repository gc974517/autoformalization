\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:4> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:D> ; <var:v2> := <nat:4> ; <var:v2> := <var:v2> * <var:D> ; <var:v2> := <var:v2> * <var:D> ; <var:s> := <var:v2> ; <var:s> := <var:s> + <var:v1> ; <var:s> := <var:s> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:D> = <var:E> $ before running the code segment , it holds that we see $ <var:s> = <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of commands is clear through usual Hoare logic . Moving on , \[ \begin{tabular} {rcl} \{ <var:D> = <var:E> \} & <var:v0> := <nat:4> & \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \} \\ \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \} & <var:v1> := <nat:2> & \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \} \\ \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \} & <var:v1> := <var:v1> * <var:D> & \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:E> \} \\ \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:E> \} & <var:v2> := <nat:4> & \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:E> \land <var:v2> = <nat:4> \} \\ \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:E> \land <var:v2> = <nat:4> \} & <var:v2> := <var:v2> * <var:D> & \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:E> \land <var:v2> = <nat:4> \times <var:E> \} \\ \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:E> \land <var:v2> = <nat:4> \times <var:E> \} & <var:v2> := <var:v2> * <var:D> & \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:E> \land <var:v2> = <nat:4> \times <var:E> ^ <nat:2> \} \\ \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:E> \land <var:v2> = <nat:4> \times <var:E> ^ <nat:2> \} & <var:s> := <var:v2> & \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:E> \land <var:s> = <nat:4> \times <var:E> ^ <nat:2> \} \\ \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \land <var:v1> = <nat:2> \times <var:E> \land <var:s> = <nat:4> \times <var:E> ^ <nat:2> \} & <var:s> := <var:s> + <var:v1> & \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \land <var:s> = <nat:4> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> \} \end{tabular} This is given through the environment update inference rule of standard Hoare techniques . Honing in on the next line found in our code segment , we see \[ \begin{tabular} {rcl} \{ <var:D> = <var:E> \} & <var:v0> := <nat:4> & \{ <var:D> = <var:E> \land <var:v0> = <nat:4> \} \end{tabular} This is known to be sound using the scheme from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v0> := <nat:4> ; <var:v1> := <nat:2> ; <var:v1> := <var:v1> * <var:D> ; <var:v2> := <nat:4> ; <var:v2> := <var:v2> * <var:D> ; <var:v2> := <var:v2> * <var:D> ; <var:s> := <var:v2> ; <var:s> := <var:s> + <var:v1> ; <var:s> := <var:s> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:D> = <var:E> }} <def:poly> {{ <var:s> = <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> * <var:E> /\ <var:v2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> * <var:E> /\ <var:v2> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> * <var:E> /\ <var:v2> = <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:2> * <var:E> /\ <var:s> = <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:v0> = <nat:4> /\ <var:s> = <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:E> /\ <var:s> = <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 