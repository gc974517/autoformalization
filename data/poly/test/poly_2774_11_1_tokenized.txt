\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} : \begin{verbatim} <var:g1> := <var:x> ; <var:g2> := <var:g1> * <var:x> ; <var:g3> := <var:g2> * <var:x> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:9> ; <var:g2> := <var:g2> * <nat:5> ; <var:g3> := <var:g3> * <nat:5> ; <var:s> := <var:g3> <var:s> := <var:s> + <var:g2> <var:s> := <var:s> + <var:g1> <var:s> := <var:s> + <var:g0> \end{verbatim} Allowing it to be that $ <var:x> = <var:Q> $ --- for $ <var:Q> $ --- prior to evaluating our program , it holds that we have $ <var:s> = <nat:5> * <var:Q> ^ <nat:3> + <nat:5> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:9> $ . \end{theorem} \begin{proof} The proof of this code can be done by typical Hoare logic . Next , the variable assignmet line \verb | <var:g1> := <var:x> ; | . This moves the condition $ \{ <var:x> = <var:Q> \} $ into $ \{ <var:x> = <var:Q> \land <var:g1> = <var:Q> \} $ . This is shown with the assignment scheme defined in Hoare techniques . Immediately following , we see the statement binding $ <var:g1> * <var:x> $ as $ <var:g2>$ . This moves $ \{ <var:x> = <var:Q> \land <var:g1> = <var:Q> \} $ into $ \{ <var:x> = <var:Q> \land <var:g1> = <var:Q> \land <var:g2> = <var:Q> ^ <nat:2> \} $ . Following , the assignment line \verb | <var:g3> := <var:g2> * <var:x> ; | . This forwards the precondition $ \{ <var:x> = <var:Q> \land <var:g1> = <var:Q> \land <var:g2> = <var:Q> ^ <nat:2> \} $ toward $ \{ <var:x> = <var:Q> \land <var:g1> = <var:Q> \land <var:g2> = <var:Q> ^ <nat:2> \land <var:g3> = <var:Q> ^ <nat:3> \} $ . Now , we see the assignment code yielding $ <nat:9> $ to $ <var:g0>$ . This takes $ \{ <var:x> = <var:Q> \land <var:g1> = <var:Q> \land <var:g2> = <var:Q> ^ <nat:2> \land <var:g3> = <var:Q> ^ <nat:3> \} $ into the postcondition $ \{ <var:x> = <var:Q> \land <var:g1> = <var:Q> \land <var:g2> = <var:Q> ^ <nat:2> \land <var:g3> = <var:Q> ^ <nat:3> \land <var:g0> = <nat:9> \} $ . This is given using the assignment law from usual Hoare reasoning . Advancing to the next step , we see the variable update command \verb | <var:g1> := <var:g1> * <nat:9> ; | . This statement redefines the condition $ \{ <var:x> = <var:Q> \land <var:g1> = <var:Q> \land <var:g2> = <var:Q> ^ <nat:2> \land <var:g3> = <var:Q> ^ <nat:3> \land <var:g0> = <nat:9> \} $ to the postcondition $ \{ <var:x> = <var:Q> \land <var:g1> = <nat:9> \times <var:Q> \land <var:g2> = <var:Q> ^ <nat:2> \land <var:g3> = <var:Q> ^ <nat:3> \land <var:g0> = <nat:9> \} $ . This is deduced with the assignment scheme given in typical Hoare reasoning . Advancing to the next step , we have the variable binding statement \verb | <var:g2> := <var:g2> * <nat:5> ; | . This moves $ \{ <var:x> = <var:Q> \land <var:g1> = <nat:9> \times <var:Q> \land <var:g2> = <var:Q> ^ <nat:2> \land <var:g3> = <var:Q> ^ <nat:3> \land <var:g0> = <nat:9> \} $ as the condition $ \{ <var:x> = <var:Q> \land <var:g1> = <nat:9> \times <var:Q> \land <var:g2> = <nat:5> \times <var:Q> ^ <nat:2> \land <var:g3> = <var:Q> ^ <nat:3> \land <var:g0> = <nat:9> \} $ . Keeping momentum , we have the variable binding line defining $ <var:g3> * <nat:5> $ to $ <var:g3>$ . This code takes $ \{ <var:x> = <var:Q> \land <var:g1> = <nat:9> \times <var:Q> \land <var:g2> = <nat:5> \times <var:Q> ^ <nat:2> \land <var:g3> = <var:Q> ^ <nat:3> \land <var:g0> = <nat:9> \} $ as $ \{ <var:x> = <var:Q> \land <var:g1> = <nat:9> \times <var:Q> \land <var:g2> = <nat:5> \times <var:Q> ^ <nat:2> \land <var:g3> = <nat:5> \times <var:Q> ^ <nat:3> \land <var:g0> = <nat:9> \} $ . This is shown to be logically sound with the assignment law given in standard Hoare techniques . Paying attention to the proceeding statement in our series of instructions , we have the code \verb | <var:s> := <var:g3> | . This statement advances $ \{ <var:x> = <var:Q> \land <var:g1> = <nat:9> \times <var:Q> \land <var:g2> = <nat:5> \times <var:Q> ^ <nat:2> \land <var:g3> = <nat:5> \times <var:Q> ^ <nat:3> \land <var:g0> = <nat:9> \} $ to the condition $ \{ <var:x> = <var:Q> \land <var:g1> = <nat:9> \times <var:Q> \land <var:g2> = <nat:5> \times <var:Q> ^ <nat:2> \land <var:g0> = <nat:9> \land <var:s> = <nat:5> \times <var:Q> ^ <nat:3> \} $ . This is known to be sound with the assignment scheme given in standard Hoare logic . Jumping to the following piece of code contained in the set of instructions , we have the statement \verb | <var:s> := <var:s> + <var:g2> | . This command forwards the condition $ \{ <var:x> = <var:Q> \land <var:g1> = <nat:9> \times <var:Q> \land <var:g2> = <nat:5> \times <var:Q> ^ <nat:2> \land <var:g0> = <nat:9> \land <var:s> = <nat:5> \times <var:Q> ^ <nat:3> \} $ toward $ \{ <var:x> = <var:Q> \land <var:g1> = <nat:9> \times <var:Q> \land <var:g0> = <nat:9> \land <var:s> = <nat:5> \times <var:Q> ^ <nat:3> + <nat:5> \times <var:Q> ^ <nat:2> \} $ . This is ensured using the assignment law found in Hoare reasoning . After , we see the command assigning $ <var:s> + <var:g1$ into $ <var:s>$ . This statement forwards $ \{ <var:x> = <var:Q> \land <var:g1> = <nat:9> \times <var:Q> \land <var:g0> = <nat:9> \land <var:s> = <nat:5> \times <var:Q> ^ <nat:3> + <nat:5> \times <var:Q> ^ <nat:2> \} $ toward $ \{ <var:x> = <var:Q> \land <var:g0> = <nat:9> \land <var:s> = <nat:5> \times <var:Q> ^ <nat:3> + <nat:5> \times <var:Q> ^ <nat:2> + <nat:9> \times <var:Q> \} $ . This is shown by the assignment inference rule given in usual Hoare logic . Moving onward , the variable binding statement binding $ <var:s> + <var:g0$ to $ <var:s>$ . This advances the condition $ \{ <var:x> = <var:Q> \land <var:g0> = <nat:9> \land <var:s> = <nat:5> \times <var:Q> ^ <nat:3> + <nat:5> \times <var:Q> ^ <nat:2> + <nat:9> \times <var:Q> \} $ into the postcondition $ \{ <var:x> = <var:Q> \land <var:s> = <nat:5> \times <var:Q> ^ <nat:3> + <nat:5> \times <var:Q> ^ <nat:2> + <nat:9> \times <var:Q> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:x> = <var:Q> }} <var:g1> := <var:x> ; <var:g2> := <var:g1> * <var:x> ; <var:g3> := <var:g2> * <var:x> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:9> ; <var:g2> := <var:g2> * <nat:5> ; <var:g3> := <var:g3> * <nat:5> ; <var:s> := <var:g3> <var:s> := <var:s> + <var:g2> <var:s> := <var:s> + <var:g1> <var:s> := <var:s> + <var:g0> {{ <var:s> = <nat:5> * <var:Q> ^ <nat:3> + <nat:5> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:g1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:g1> = <var:Q> /\ <var:g2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:g1> = <var:Q> /\ <var:g2> = <var:Q> ^ <nat:2> /\ <var:g3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:g1> = <var:Q> /\ <var:g2> = <var:Q> ^ <nat:2> /\ <var:g3> = <var:Q> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:g1> = <nat:9> * <var:Q> /\ <var:g2> = <var:Q> ^ <nat:2> /\ <var:g3> = <var:Q> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:g1> = <nat:9> * <var:Q> /\ <var:g2> = <nat:5> * <var:Q> ^ <nat:2> /\ <var:g3> = <var:Q> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:g1> = <nat:9> * <var:Q> /\ <var:g2> = <nat:5> * <var:Q> ^ <nat:2> /\ <var:g3> = <nat:5> * <var:Q> ^ <nat:3> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:g1> = <nat:9> * <var:Q> /\ <var:g2> = <nat:5> * <var:Q> ^ <nat:2> /\ <var:g0> = <nat:9> /\ <var:s> = <nat:5> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:g1> = <nat:9> * <var:Q> /\ <var:g0> = <nat:9> /\ <var:s> = <nat:5> * <var:Q> ^ <nat:3> + <nat:5> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:g0> = <nat:9> /\ <var:s> = <nat:5> * <var:Q> ^ <nat:3> + <nat:5> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:s> = <nat:5> * <var:Q> ^ <nat:3> + <nat:5> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 