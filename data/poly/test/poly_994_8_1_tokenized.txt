\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:z1> := <var:p> ; <var:z2> := <var:z1> * <var:p> ; <var:z0> := <nat:4> ; <var:z1> := <var:z1> * <nat:7> ; <var:z2> := <var:z2> * <nat:2> ; <var:D> := <var:z2> <var:D> := <var:D> + <var:z1> <var:D> := <var:D> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:p> = <var:x> $ before running this list of commands it follows that $ <var:D> = <nat:2> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:4> $ once list of commands executes . \end{theorem} \begin{proof} Proving correctness for our code can be accomplished using usual Hoare reasoning . Advancing , we see \verb | { <var:p> = <var:x> } <var:z1> := <var:p> { <var:p> = <var:x> \land <var:z1> = <var:x> } | , \verb | { <var:p> = <var:x> \land <var:z1> = <var:x> } <var:z2> := <var:z1> * <var:p> { <var:p> = <var:x> \land <var:z1> = <var:x> \land <var:z2> = <var:x> ^ <nat:2> } | , \verb | { <var:p> = <var:x> \land <var:z1> = <var:x> \land <var:z2> = <var:x> ^ <nat:2> } <var:z0> := <nat:4> { <var:p> = <var:x> \land <var:z1> = <var:x> \land <var:z2> = <var:x> ^ <nat:2> \land <var:z0> = <nat:4> } | , \verb | { <var:p> = <var:x> \land <var:z1> = <var:x> \land <var:z2> = <var:x> ^ <nat:2> \land <var:z0> = <nat:4> } <var:z1> := <var:z1> * <nat:7> { <var:p> = <var:x> \land <var:z1> = <nat:7> \times <var:x> \land <var:z2> = <var:x> ^ <nat:2> \land <var:z0> = <nat:4> } | and \verb | { <var:p> = <var:x> \land <var:z1> = <nat:7> \times <var:x> \land <var:z2> = <var:x> ^ <nat:2> \land <var:z0> = <nat:4> } <var:z2> := <var:z2> * <nat:2> { <var:p> = <var:x> \land <var:z1> = <nat:7> \times <var:x> \land <var:z2> = <nat:2> \times <var:x> ^ <nat:2> \land <var:z0> = <nat:4> } | . Looking at the proceeding line found in our code , we see \verb | { <var:p> = <var:x> } <var:z1> := <var:p> { <var:p> = <var:x> \land <var:z1> = <var:x> } | . This is given using the variable update inference rule from typical Hoare reasoning . Observing the proceeding bit of code in our list of instructions , we see \verb | { <var:p> = <var:x> } <var:z1> := <var:p> { <var:p> = <var:x> \land <var:z1> = <var:x> } | . This is known to be sound with the variable update scheme defined in Hoare reasoning . Further , we see \verb | { <var:p> = <var:x> } <var:z1> := <var:p> { <var:p> = <var:x> \land <var:z1> = <var:x> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z1> := <var:p> ; <var:z2> := <var:z1> * <var:p> ; <var:z0> := <nat:4> ; <var:z1> := <var:z1> * <nat:7> ; <var:z2> := <var:z2> * <nat:2> ; <var:D> := <var:z2> <var:D> := <var:D> + <var:z1> <var:D> := <var:D> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:p> = <var:x> }} <def:poly> {{ <var:D> = <nat:2> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:z1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:z1> = <var:x> /\ <var:z2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:z1> = <var:x> /\ <var:z2> = <var:x> ^ <nat:2> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:z1> = <nat:7> * <var:x> /\ <var:z2> = <var:x> ^ <nat:2> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:z1> = <nat:7> * <var:x> /\ <var:z2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:z1> = <nat:7> * <var:x> /\ <var:z0> = <nat:4> /\ <var:D> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:z0> = <nat:4> /\ <var:D> = <nat:2> * <var:x> ^ <nat:2> + <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:x> /\ <var:D> = <nat:2> * <var:x> ^ <nat:2> + <nat:7> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 