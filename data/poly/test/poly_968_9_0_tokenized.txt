\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:5> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:r> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:r> ; <var:x2> := <var:x2> * <var:r> ; <var:M> := <var:x2> ; <var:M> := <var:M> + <var:x1> ; <var:M> := <var:M> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> in \emph{Imp} . Allowing that $ <var:r> = <var:t> $ prior to the execution of our list of commands , it follows that $ <var:M> = <nat:4> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> + <nat:5> $ . \end{theorem} \begin{proof} The argument for this list of instructions is given with usual Hoare reasoning . Further , we have the variable update line yielding $ <nat:5> $ to $ <var:x0>$ . This forwards the precondition $ \{ <var:r> = <var:t> \} $ as the condition $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \} $ . This is deduced by the assignment inference rule of usual Hoare logic . Honing in on the subsequent step contained in the code , the assignment statement letting $ <nat:1> $ toward $ <var:x1>$ . This command advances the condition $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \} $ toward $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:x1> = <nat:1> \} $ . This is known to be sound by the assignment inference rule defined in Hoare techniques . Moving on to the following piece of code found in our code segment , we see the variable update command binding $ <var:x1> * <var:r> $ to $ <var:x1>$ . This line transfers the condition $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:x1> = <nat:1> \} $ to $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:x1> = <nat:1> \times <var:t> \} $ . This is shown using the assignment rule obtained from Hoare techniques . Going to the next step , the binding command assigning $ <nat:4> $ as $ <var:x2>$ . This line redefines the precondition $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:x1> = <nat:1> \times <var:t> \} $ as the condition $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:x1> = <nat:1> \times <var:t> \land <var:x2> = <nat:4> \} $ . Now , the variable assignmet command \verb | <var:x2> := <var:x2> * <var:r> ; | . This line takes $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:x1> = <nat:1> \times <var:t> \land <var:x2> = <nat:4> \} $ to the condition $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:x1> = <nat:1> \times <var:t> \land <var:x2> = <nat:4> \times <var:t> \} $ . This is shown through the assignment scheme given by usual Hoare logic . Next , we see the variable assignmet code \verb | <var:x2> := <var:x2> * <var:r> ; | . This code takes the condition $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:x1> = <nat:1> \times <var:t> \land <var:x2> = <nat:4> \times <var:t> \} $ as the condition $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:x1> = <nat:1> \times <var:t> \land <var:x2> = <nat:4> \times <var:t> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment law defined by usual Hoare techniques . Moving forward to the next step , we see the variable update command \verb | <var:M> := <var:x2> ; | . This moves $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:x1> = <nat:1> \times <var:t> \land <var:x2> = <nat:4> \times <var:t> ^ <nat:2> \} $ as the condition $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:x1> = <nat:1> \times <var:t> \land <var:M> = <nat:4> \times <var:t> ^ <nat:2> \} $ . Keeping momentum , the variable assignmet command \verb | <var:M> := <var:M> + <var:x1> ; | . This takes $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:x1> = <nat:1> \times <var:t> \land <var:M> = <nat:4> \times <var:t> ^ <nat:2> \} $ into the condition $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:M> = <nat:4> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> \} $ . This is given using the assignment scheme in usual Hoare techniques . Moving on to the upcoming bit of code seen in the segment of code , we have the environment update statement yielding $ <var:M> + <var:x0$ to $ <var:M>$ . This code moves the condition $ \{ <var:r> = <var:t> \land <var:x0> = <nat:5> \land <var:M> = <nat:4> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> \} $ toward the condition $ \{ <var:r> = <var:t> \land <var:M> = <nat:4> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> + <nat:5> \} $ . This is known to be sound by the assignment inference rule defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <def:poly> := <var:x0> := <nat:5> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:r> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:r> ; <var:x2> := <var:x2> * <var:r> ; <var:M> := <var:x2> ; <var:M> := <var:M> + <var:x1> ; <var:M> := <var:M> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:r> = <var:t> }} <def:poly> {{ <var:M> = <nat:4> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:1> * <var:t> /\ <var:x2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:1> * <var:t> /\ <var:x2> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:1> * <var:t> /\ <var:x2> = <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:x0> = <nat:5> /\ <var:x1> = <nat:1> * <var:t> /\ <var:M> = <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:x0> = <nat:5> /\ <var:M> = <nat:4> * <var:t> ^ <nat:2> + <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:M> = <nat:4> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 