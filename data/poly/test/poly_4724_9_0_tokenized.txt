\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:1> ; <var:z1> := <nat:3> ; <var:z1> := <var:z1> * <var:f> ; <var:z2> := <nat:5> ; <var:z2> := <var:z2> * <var:f> ; <var:z2> := <var:z2> * <var:f> ; <var:c> := <var:z2> ; <var:c> := <var:c> + <var:z1> ; <var:c> := <var:c> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Assuming , for every positive integers $ <var:e> $ , it to be that $ <var:f> = <var:e> $ before interpreting our series of instructions it holds that we have $ <var:c> = <nat:5> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> + <nat:1> $ . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:f> = <var:e> \} \\ <var:z0> := <nat:1> ; \\ \{ <var:f> = <var:e> \land <var:z0> = <nat:1> \} \\ <var:z1> := <nat:3> ; \\ \{ <var:f> = <var:e> \land <var:z0> = <nat:1> \land <var:z1> = <nat:3> \} \\ <var:z1> := <var:z1> * <var:f> ; \\ \{ <var:f> = <var:e> \land <var:z0> = <nat:1> \land <var:z1> = <nat:3> \times <var:e> \} \\ <var:z2> := <nat:5> ; \\ \{ <var:f> = <var:e> \land <var:z0> = <nat:1> \land <var:z1> = <nat:3> \times <var:e> \land <var:z2> = <nat:5> \} \\ <var:z2> := <var:z2> * <var:f> ; \\ \{ <var:f> = <var:e> \land <var:z0> = <nat:1> \land <var:z1> = <nat:3> \times <var:e> \land <var:z2> = <nat:5> \times <var:e> \} \\ <var:z2> := <var:z2> * <var:f> ; \\ \{ <var:f> = <var:e> \land <var:z0> = <nat:1> \land <var:z1> = <nat:3> \times <var:e> \land <var:z2> = <nat:5> \times <var:e> ^ <nat:2> \} \\ <var:c> := <var:z2> ; \\ \{ <var:f> = <var:e> \land <var:z0> = <nat:1> \land <var:z1> = <nat:3> \times <var:e> \land <var:c> = <nat:5> \times <var:e> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:z1> ; \\ \{ <var:f> = <var:e> \land <var:z0> = <nat:1> \land <var:c> = <nat:5> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> \} \\ <var:c> := <var:c> + <var:z0> \\ \{ <var:f> = <var:e> \land <var:c> = <nat:5> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:1> \} \end{eqnarray} Thus , our set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z0> := <nat:1> ; <var:z1> := <nat:3> ; <var:z1> := <var:z1> * <var:f> ; <var:z2> := <nat:5> ; <var:z2> := <var:z2> * <var:f> ; <var:z2> := <var:z2> * <var:f> ; <var:c> := <var:z2> ; <var:c> := <var:c> + <var:z1> ; <var:c> := <var:c> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:f> = <var:e> }} <def:poly> {{ <var:c> = <nat:5> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:3> * <var:e> /\ <var:z2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:3> * <var:e> /\ <var:z2> = <nat:5> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:3> * <var:e> /\ <var:z2> = <nat:5> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:3> * <var:e> /\ <var:c> = <nat:5> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:z0> = <nat:1> /\ <var:c> = <nat:5> * <var:e> ^ <nat:2> + <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:e> /\ <var:c> = <nat:5> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 