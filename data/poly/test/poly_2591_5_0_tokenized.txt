\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:6> ; <var:G1> := <nat:2> ; <var:G1> := <var:G1> * <var:l> ; <var:i> := <var:G1> ; <var:i> := <var:i> + <var:G0> \end{verbatim} Allow it to be that $ <var:l> = <var:F> $ before interpreting the list of instructions , it must be that we have $ <var:i> = <nat:2> \times <var:F> + <nat:6> $ . \end{theorem} \begin{proof} Applying Hoare logic returns : \begin{eqnarray} \{ <var:l> = <var:F> \} \\ <var:G0> := <nat:6> ; \\ \{ <var:l> = <var:F> \land <var:G0> = <nat:6> \} \\ <var:G1> := <nat:2> ; \\ \{ <var:l> = <var:F> \land <var:G0> = <nat:6> \land <var:G1> = <nat:2> \} \\ <var:G1> := <var:G1> * <var:l> ; \\ \{ <var:l> = <var:F> \land <var:G0> = <nat:6> \land <var:G1> = <nat:2> \cdot <var:F> \} \\ <var:i> := <var:G1> ; \\ \{ <var:l> = <var:F> \land <var:G0> = <nat:6> \land <var:i> = <nat:2> \cdot <var:F> \} \\ <var:i> := <var:i> + <var:G0> \\ \{ <var:l> = <var:F> \land <var:i> = <nat:2> \cdot <var:F> + <nat:6> \} \end{eqnarray} Considering the above , the program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:l> = <var:F> }} <var:G0> := <nat:6> ; <var:G1> := <nat:2> ; <var:G1> := <var:G1> * <var:l> ; <var:i> := <var:G1> ; <var:i> := <var:i> + <var:G0> {{ <var:i> = <nat:2> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:F> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:F> /\ <var:G0> = <nat:6> /\ <var:G1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:F> /\ <var:G0> = <nat:6> /\ <var:G1> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:F> /\ <var:G0> = <nat:6> /\ <var:i> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:F> /\ <var:i> = <nat:2> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 