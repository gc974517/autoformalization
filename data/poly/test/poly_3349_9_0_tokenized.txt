\begin{document} \begin{theorem} We define the following code such that \begin{verbatim} <var:F0> := <nat:5> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:E> ; <var:F2> := <nat:9> ; <var:F2> := <var:F2> * <var:E> ; <var:F2> := <var:F2> * <var:E> ; <var:d> := <var:F2> ; <var:d> := <var:d> + <var:F1> ; <var:d> := <var:d> + <var:F0> \end{verbatim} Assume that we have $ <var:E> = <var:s> $ ahead of the execution of this series of commands it follows that we have $ <var:d> = <nat:9> \cdot <var:s> ^ <nat:2> + <nat:3> \cdot <var:s> + <nat:5> $ once code segment is done executing . \end{theorem} \begin{proof} Proving correctness for our code segment is demonstrated through Hoare techniques . Moving on , the variable binding command \verb | <var:F0> := <nat:5> ; | . This takes the condition $ \{ <var:E> = <var:s> \} $ to the condition $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \} $ . Following , we see the variable update code \verb | <var:F1> := <nat:3> ; | . This redefines the precondition $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \} $ as $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \} $ . This is shown by the assignment rule in typical Hoare techniques . Moving forward to the next command found in our series of instructions , the binding line \verb | <var:F1> := <var:F1> * <var:E> ; | . This moves $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \} $ as $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:s> \} $ . This is deduced using the assignment law in usual Hoare techniques . Considering the proceeding statement found in the series of instructions , we have the variable update command letting $ <nat:9> $ into $ <var:F2>$ . This command redefines the precondition $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:s> \} $ into the postcondition $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:s> \land <var:F2> = <nat:9> \} $ . Immediately following , we have the environment update command assigning $ <var:F2> * <var:E> $ as $ <var:F2>$ . This statement takes the condition $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:s> \land <var:F2> = <nat:9> \} $ to the postcondition $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:s> \land <var:F2> = <nat:9> \cdot <var:s> \} $ . Advancing to the following line of code seen in the segment of code , we have the variable assignmet code yielding $ <var:F2> * <var:E> $ into $ <var:F2>$ . This line takes the condition $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:s> \land <var:F2> = <nat:9> \cdot <var:s> \} $ to the condition $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:s> \land <var:F2> = <nat:9> \cdot <var:s> ^ <nat:2> \} $ . This is rigorously given using the assignment rule defined in typical Hoare logic . Moving onward , we have the variable update statement yielding $ <var:F2> $ to $ <var:d>$ . This redefines $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:s> \land <var:F2> = <nat:9> \cdot <var:s> ^ <nat:2> \} $ toward the condition $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:s> \land <var:d> = <nat:9> \cdot <var:s> ^ <nat:2> \} $ . Following , the environment update line yielding $ <var:d> + <var:F1> $ to $ <var:d>$ . This transfers $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:F1> = <nat:3> \cdot <var:s> \land <var:d> = <nat:9> \cdot <var:s> ^ <nat:2> \} $ to the condition $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:d> = <nat:9> \cdot <var:s> ^ <nat:2> + <nat:3> \cdot <var:s> \} $ . Honing in on the following command in our list of commands , we see the variable binding code \verb | <var:d> := <var:d> + <var:F0> | . This takes the precondition $ \{ <var:E> = <var:s> \land <var:F0> = <nat:5> \land <var:d> = <nat:9> \cdot <var:s> ^ <nat:2> + <nat:3> \cdot <var:s> \} $ as the postcondition $ \{ <var:E> = <var:s> \land <var:d> = <nat:9> \cdot <var:s> ^ <nat:2> + <nat:3> \cdot <var:s> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:E> = <var:s> }} <var:F0> := <nat:5> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:E> ; <var:F2> := <nat:9> ; <var:F2> := <var:F2> * <var:E> ; <var:F2> := <var:F2> * <var:E> ; <var:d> := <var:F2> ; <var:d> := <var:d> + <var:F1> ; <var:d> := <var:d> + <var:F0> {{ <var:d> = <nat:9> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:3> * <var:s> /\ <var:F2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:3> * <var:s> /\ <var:F2> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:3> * <var:s> /\ <var:F2> = <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:3> * <var:s> /\ <var:d> = <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:F0> = <nat:5> /\ <var:d> = <nat:9> * <var:s> ^ <nat:2> + <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:s> /\ <var:d> = <nat:9> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 