\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:2> ; <var:b> := <var:g0> \end{verbatim} Given that we have $ <var:p> = <var:h> $ ahead of the evaluation of the set of commands it holds that we have $ <var:b> = <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the series of commands is demonstrated through Hoare logic . Moving on to the proceeding lines of codein our code , we see \[ \begin{tabular} {rcl} \{ <var:p> = <var:h> \} & <var:g0> := <nat:2> & \{ <var:p> = <var:h> \land <var:g0> = <nat:2> \} \\ \{ <var:p> = <var:h> \land <var:g0> = <nat:2> \} & <var:b> := <var:g0& \{ <var:p> = <var:h> \land <var:b> = <nat:2> \} \end{tabular} This is guaranteed with the binding inference rule given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:p> = <var:h> }} <var:g0> := <nat:2> ; <var:b> := <var:g0> {{ <var:b> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:h> /\ <var:b> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 