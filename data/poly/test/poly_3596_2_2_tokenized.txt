\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} such that \begin{verbatim} <var:N> := <nat:3> ; <var:N> := <nat:3> + <var:N> * <var:K> \end{verbatim} Assume $ <var:K> = <var:B> $ ahead of interpreting this series of commands , then we have $ <var:N> = <nat:3> * <var:B> + <nat:3> $ . \end{theorem} \begin{proof} Applying Hoare reasoning gives : \begin{eqnarray} \{ <var:K> = <var:B> \} \\ <var:N> := <nat:3> ; \\ \{ <var:K> = <var:B> \land <var:N> = <nat:3> \} \\ <var:N> := <nat:3> + <var:N> * <var:K> \\ \{ <var:K> = <var:B> \land <var:N> = <nat:3> * <var:B> + <nat:3> \} \end{eqnarray} Considering the above , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:K> = <var:B> }} <var:N> := <nat:3> ; <var:N> := <nat:3> + <var:N> * <var:K> {{ <var:N> = <nat:3> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:N> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:N> = <nat:3> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 