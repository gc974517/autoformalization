\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:n1> := <var:B> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:9> ; <var:o> := <var:n1> <var:o> := <var:o> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:B> = <var:s> $ before the execution of the set of instructions then we see $ <var:o> = <nat:9> * <var:s> + <nat:6> $ once set of instructions has executed . \end{theorem} \begin{proof} The argument for the segment of code is shown with usual Hoare techniques . Moving on , we see the variable update code binding $ <var:B> $ into $ <var:n1>$ . This command takes the condition $ \{ <var:B> = <var:s> \} $ to the condition $ \{ <var:B> = <var:s> \land <var:n1> = <var:s> \} $ . Looking at the following command in the code segment , we have the code defining $ <nat:6> $ as $ <var:n0>$ . This statement advances the condition $ \{ <var:B> = <var:s> \land <var:n1> = <var:s> \} $ into $ \{ <var:B> = <var:s> \land <var:n1> = <var:s> \land <var:n0> = <nat:6> \} $ . This is shown to be logically sound by the assignment inference rule found in Hoare techniques . Honing in on the next step found in the segment of code , we have the binding statement \verb | <var:n1> := <var:n1> * <nat:9> ; | . This moves the precondition $ \{ <var:B> = <var:s> \land <var:n1> = <var:s> \land <var:n0> = <nat:6> \} $ toward the condition $ \{ <var:B> = <var:s> \land <var:n1> = <nat:9> \times <var:s> \land <var:n0> = <nat:6> \} $ . This is known to be sound through the assignment law from usual Hoare reasoning . Taking another step toward the subsequent statement found in our set of commands , we have the environment update command \verb | <var:o> := <var:n1> | . This line redefines the precondition $ \{ <var:B> = <var:s> \land <var:n1> = <nat:9> \times <var:s> \land <var:n0> = <nat:6> \} $ toward the condition $ \{ <var:B> = <var:s> \land <var:n0> = <nat:6> \land <var:o> = <nat:9> \times <var:s> \} $ . This is known to be sound by the assignment inference rule given by usual Hoare reasoning . Advancing to the following piece of code in our series of instructions , we see the binding code binding $ <var:o> + <var:n0$ as $ <var:o>$ . This command transfers $ \{ <var:B> = <var:s> \land <var:n0> = <nat:6> \land <var:o> = <nat:9> \times <var:s> \} $ as the condition $ \{ <var:B> = <var:s> \land <var:o> = <nat:9> \times <var:s> + <nat:6> \} $ . This is known to be sound using the assignment inference rule from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <def:poly> := <var:n1> := <var:B> ; <var:n0> := <nat:6> ; <var:n1> := <var:n1> * <nat:9> ; <var:o> := <var:n1> <var:o> := <var:o> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:B> = <var:s> }} <def:poly> {{ <var:o> = <nat:9> * <var:s> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:n1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:n1> = <var:s> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:n1> = <nat:9> * <var:s> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:n0> = <nat:6> /\ <var:o> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:o> = <nat:9> * <var:s> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 