\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:X1> := <var:K> ; <var:X2> := <var:X1> * <var:K> ; <var:X3> := <var:X2> * <var:K> ; <var:X4> := <var:X3> * <var:K> ; <var:X5> := <var:X4> * <var:K> ; <var:X0> := <nat:7> ; <var:X3> := <var:X3> * <nat:5> ; <var:X4> := <var:X4> * <nat:6> ; <var:X5> := <var:X5> * <nat:9> ; <var:l> := <var:X5> <var:l> := <var:l> + <var:X4> <var:l> := <var:l> + <var:X3> <var:l> := <var:l> + <var:X0> \end{verbatim} Allow , with some integers $ <var:j> $ , that we have $ <var:K> = <var:j> $ prior to evaluating our set of instructions , it must be that $ <var:l> = <nat:9> \cdot <var:j> ^ <nat:5> + <nat:6> \cdot <var:j> ^ <nat:4> + <nat:5> \cdot <var:j> ^ <nat:3> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for our set of instructions can be done through typical Hoare reasoning . Considering the subsequent statement found in our set of commands , the variable binding statement assigning $ <var:K> $ into $ <var:X1>$ . This code moves the precondition $ \{ <var:K> = <var:j> \} $ into $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \} $ . Going forward , the variable update code letting $ <var:X1> * <var:K> $ to $ <var:X2>$ . This transfers the condition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \} $ into the condition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \} $ . Shifting focus toward the upcoming step seen in our series of instructions , we have the variable update line \verb | <var:X3> := <var:X2> * <var:K> ; | . This command forwards $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \} $ into the postcondition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <var:j> ^ <nat:3> \} $ . Moving on , we see the binding code binding $ <var:X3> * <var:K> $ toward $ <var:X4>$ . This statement advances the precondition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <var:j> ^ <nat:3> \} $ toward the postcondition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <var:j> ^ <nat:3> \land <var:X4> = <var:j> ^ <nat:4> \} $ . This is rigorously given through the assignment scheme found in standard Hoare reasoning . Jumping to the following line of code contained in our series of instructions , we see the variable binding code yielding $ <var:X4> * <var:K> $ as $ <var:X5>$ . This code advances the precondition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <var:j> ^ <nat:3> \land <var:X4> = <var:j> ^ <nat:4> \} $ as the condition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <var:j> ^ <nat:3> \land <var:X4> = <var:j> ^ <nat:4> \land <var:X5> = <var:j> ^ <nat:5> \} $ . Following , we see the statement yielding $ <nat:7> $ to $ <var:X0>$ . This transfers the condition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <var:j> ^ <nat:3> \land <var:X4> = <var:j> ^ <nat:4> \land <var:X5> = <var:j> ^ <nat:5> \} $ into $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <var:j> ^ <nat:3> \land <var:X4> = <var:j> ^ <nat:4> \land <var:X5> = <var:j> ^ <nat:5> \land <var:X0> = <nat:7> \} $ . This is deduced with the assignment inference rule in typical Hoare reasoning . Moving on to the next step , the variable binding command \verb | <var:X3> := <var:X3> * <nat:5> ; | . This code advances the precondition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <var:j> ^ <nat:3> \land <var:X4> = <var:j> ^ <nat:4> \land <var:X5> = <var:j> ^ <nat:5> \land <var:X0> = <nat:7> \} $ toward the condition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <nat:5> \times <var:j> ^ <nat:3> \land <var:X4> = <var:j> ^ <nat:4> \land <var:X5> = <var:j> ^ <nat:5> \land <var:X0> = <nat:7> \} $ . This is rigorously given by the assignment inference rule defined by typical Hoare logic . Advancing on , we have the variable binding code defining $ <var:X4> * <nat:6> $ into $ <var:X4>$ . This command advances $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <nat:5> \times <var:j> ^ <nat:3> \land <var:X4> = <var:j> ^ <nat:4> \land <var:X5> = <var:j> ^ <nat:5> \land <var:X0> = <nat:7> \} $ as the condition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <nat:5> \times <var:j> ^ <nat:3> \land <var:X4> = <nat:6> \times <var:j> ^ <nat:4> \land <var:X5> = <var:j> ^ <nat:5> \land <var:X0> = <nat:7> \} $ . Advancing , the variable update statement defining $ <var:X5> * <nat:9> $ into $ <var:X5>$ . This line forwards $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <nat:5> \times <var:j> ^ <nat:3> \land <var:X4> = <nat:6> \times <var:j> ^ <nat:4> \land <var:X5> = <var:j> ^ <nat:5> \land <var:X0> = <nat:7> \} $ to the postcondition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <nat:5> \times <var:j> ^ <nat:3> \land <var:X4> = <nat:6> \times <var:j> ^ <nat:4> \land <var:X5> = <nat:9> \times <var:j> ^ <nat:5> \land <var:X0> = <nat:7> \} $ . This is given with the assignment inference rule given in usual Hoare logic . Advancing on , we have the binding code assigning $ <var:X5$ into $ <var:l>$ . This command takes the precondition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <nat:5> \times <var:j> ^ <nat:3> \land <var:X4> = <nat:6> \times <var:j> ^ <nat:4> \land <var:X5> = <nat:9> \times <var:j> ^ <nat:5> \land <var:X0> = <nat:7> \} $ into $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <nat:5> \times <var:j> ^ <nat:3> \land <var:X4> = <nat:6> \times <var:j> ^ <nat:4> \land <var:X0> = <nat:7> \land <var:l> = <nat:9> \times <var:j> ^ <nat:5> \} $ . This is shown through the assignment inference rule defined in standard Hoare techniques . Advancing on , the line \verb | <var:l> := <var:l> + <var:X4> | . This transfers the precondition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <nat:5> \times <var:j> ^ <nat:3> \land <var:X4> = <nat:6> \times <var:j> ^ <nat:4> \land <var:X0> = <nat:7> \land <var:l> = <nat:9> \times <var:j> ^ <nat:5> \} $ to $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <nat:5> \times <var:j> ^ <nat:3> \land <var:X0> = <nat:7> \land <var:l> = <nat:9> \times <var:j> ^ <nat:5> + <nat:6> \times <var:j> ^ <nat:4> \} $ . This is ensured with the assignment law given by Hoare reasoning . Going to the next step , we have the variable update line giving $ <var:l> + <var:X3$ to $ <var:l>$ . This line redefines the precondition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X3> = <nat:5> \times <var:j> ^ <nat:3> \land <var:X0> = <nat:7> \land <var:l> = <nat:9> \times <var:j> ^ <nat:5> + <nat:6> \times <var:j> ^ <nat:4> \} $ as $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X0> = <nat:7> \land <var:l> = <nat:9> \times <var:j> ^ <nat:5> + <nat:6> \times <var:j> ^ <nat:4> + <nat:5> \times <var:j> ^ <nat:3> \} $ . This is ensured by the assignment inference rule defined by usual Hoare reasoning . Honing in on the upcoming piece of code found in the list of commands , the environment update code \verb | <var:l> := <var:l> + <var:X0> | . This statement advances the condition $ \{ <var:K> = <var:j> \land <var:X1> = <var:j> \land <var:X2> = <var:j> ^ <nat:2> \land <var:X0> = <nat:7> \land <var:l> = <nat:9> \times <var:j> ^ <nat:5> + <nat:6> \times <var:j> ^ <nat:4> + <nat:5> \times <var:j> ^ <nat:3> \} $ into $ \{ <var:K> = <var:j> \land <var:l> = <nat:9> \times <var:j> ^ <nat:5> + <nat:6> \times <var:j> ^ <nat:4> + <nat:5> \times <var:j> ^ <nat:3> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Definition <var:X4> : string := " <var:X4> " . Definition <var:X5> : string := " <var:X5> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:K> = <var:j> }} <var:X1> := <var:K> ; <var:X2> := <var:X1> * <var:K> ; <var:X3> := <var:X2> * <var:K> ; <var:X4> := <var:X3> * <var:K> ; <var:X5> := <var:X4> * <var:K> ; <var:X0> := <nat:7> ; <var:X3> := <var:X3> * <nat:5> ; <var:X4> := <var:X4> * <nat:6> ; <var:X5> := <var:X5> * <nat:9> ; <var:l> := <var:X5> <var:l> := <var:l> + <var:X4> <var:l> := <var:l> + <var:X3> <var:l> := <var:l> + <var:X0> {{ <var:l> = <nat:9> * <var:j> ^ <nat:5> + <nat:6> * <var:j> ^ <nat:4> + <nat:5> * <var:j> ^ <nat:3> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:X1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:X1> = <var:j> /\ <var:X2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:X1> = <var:j> /\ <var:X2> = <var:j> ^ <nat:2> /\ <var:X3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:X1> = <var:j> /\ <var:X2> = <var:j> ^ <nat:2> /\ <var:X3> = <var:j> ^ <nat:3> /\ <var:X4> = <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:X1> = <var:j> /\ <var:X2> = <var:j> ^ <nat:2> /\ <var:X3> = <var:j> ^ <nat:3> /\ <var:X4> = <var:j> ^ <nat:4> /\ <var:X5> = <var:j> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:X1> = <var:j> /\ <var:X2> = <var:j> ^ <nat:2> /\ <var:X3> = <var:j> ^ <nat:3> /\ <var:X4> = <var:j> ^ <nat:4> /\ <var:X5> = <var:j> ^ <nat:5> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:X1> = <var:j> /\ <var:X2> = <var:j> ^ <nat:2> /\ <var:X3> = <nat:5> * <var:j> ^ <nat:3> /\ <var:X4> = <var:j> ^ <nat:4> /\ <var:X5> = <var:j> ^ <nat:5> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:X1> = <var:j> /\ <var:X2> = <var:j> ^ <nat:2> /\ <var:X3> = <nat:5> * <var:j> ^ <nat:3> /\ <var:X4> = <nat:6> * <var:j> ^ <nat:4> /\ <var:X5> = <var:j> ^ <nat:5> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:X1> = <var:j> /\ <var:X2> = <var:j> ^ <nat:2> /\ <var:X3> = <nat:5> * <var:j> ^ <nat:3> /\ <var:X4> = <nat:6> * <var:j> ^ <nat:4> /\ <var:X5> = <nat:9> * <var:j> ^ <nat:5> /\ <var:X0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:X1> = <var:j> /\ <var:X2> = <var:j> ^ <nat:2> /\ <var:X3> = <nat:5> * <var:j> ^ <nat:3> /\ <var:X4> = <nat:6> * <var:j> ^ <nat:4> /\ <var:X0> = <nat:7> /\ <var:l> = <nat:9> * <var:j> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:X1> = <var:j> /\ <var:X2> = <var:j> ^ <nat:2> /\ <var:X3> = <nat:5> * <var:j> ^ <nat:3> /\ <var:X0> = <nat:7> /\ <var:l> = <nat:9> * <var:j> ^ <nat:5> + <nat:6> * <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:X1> = <var:j> /\ <var:X2> = <var:j> ^ <nat:2> /\ <var:X0> = <nat:7> /\ <var:l> = <nat:9> * <var:j> ^ <nat:5> + <nat:6> * <var:j> ^ <nat:4> + <nat:5> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:l> = <nat:9> * <var:j> ^ <nat:5> + <nat:6> * <var:j> ^ <nat:4> + <nat:5> * <var:j> ^ <nat:3> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 