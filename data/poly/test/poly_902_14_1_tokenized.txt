\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:N1> := <var:k> ; <var:N2> := <var:N1> * <var:k> ; <var:N3> := <var:N2> * <var:k> ; <var:N4> := <var:N3> * <var:k> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:8> ; <var:N2> := <var:N2> * <nat:8> ; <var:N3> := <var:N3> * <nat:9> ; <var:N4> := <var:N4> * <nat:9> ; <var:F> := <var:N4> <var:F> := <var:F> + <var:N3> <var:F> := <var:F> + <var:N2> <var:F> := <var:F> + <var:N1> <var:F> := <var:F> + <var:N0> \end{verbatim} Assume that $ <var:k> = <var:E> $ --- letting positive coefficients $ <var:E> $ --- prior to executing our set of instructions it holds that $ <var:F> = <nat:9> \cdot <var:E> ^ <nat:4> + <nat:9> \cdot <var:E> ^ <nat:3> + <nat:8> \cdot <var:E> ^ <nat:2> + <nat:8> \cdot <var:E> + <nat:3> $ once set of commands is done . \end{theorem} \begin{proof} Proving correctness for the list of instructions is accomplished with standard Hoare techniques . Stepping through , the assignment line giving $ <var:k> $ into $ <var:N1>$ . This line redefines $ \{ <var:k> = <var:E> \} $ toward the condition $ \{ <var:k> = <var:E> \land <var:N1> = <var:E> \} $ . This is sound using the assignment scheme defined in Hoare reasoning . Now , the binding statement \verb | <var:N2> := <var:N1> * <var:k> ; | . This redefines $ \{ <var:k> = <var:E> \land <var:N1> = <var:E> \} $ as the condition $ \{ <var:k> = <var:E> \land <var:N1> = <var:E> \land <var:N2> = <var:E> ^ <nat:2> \} $ . This is deduced using the assignment rule defined in standard Hoare logic . Moving forward to the next step , we see the assignment code \verb | <var:N3> := <var:N2> * <var:k> ; | . This code forwards the condition $ \{ <var:k> = <var:E> \land <var:N1> = <var:E> \land <var:N2> = <var:E> ^ <nat:2> \} $ toward $ \{ <var:k> = <var:E> \land <var:N1> = <var:E> \land <var:N2> = <var:E> ^ <nat:2> \land <var:N3> = <var:E> ^ <nat:3> \} $ . This is shown to be logically sound by the assignment scheme given by Hoare reasoning . Taking another step toward the subsequent line of code seen in our series of instructions , we have the assignment line assigning $ <var:N3> * <var:k> $ into $ <var:N4>$ . This transfers the condition $ \{ <var:k> = <var:E> \land <var:N1> = <var:E> \land <var:N2> = <var:E> ^ <nat:2> \land <var:N3> = <var:E> ^ <nat:3> \} $ as the condition $ \{ <var:k> = <var:E> \land <var:N1> = <var:E> \land <var:N2> = <var:E> ^ <nat:2> \land <var:N3> = <var:E> ^ <nat:3> \land <var:N4> = <var:E> ^ <nat:4> \} $ . Honing in on the next line contained in our list of instructions , we have the variable update command assigning $ <nat:3> $ as $ <var:N0>$ . This statement transfers $ \{ <var:k> = <var:E> \land <var:N1> = <var:E> \land <var:N2> = <var:E> ^ <nat:2> \land <var:N3> = <var:E> ^ <nat:3> \land <var:N4> = <var:E> ^ <nat:4> \} $ to $ \{ <var:k> = <var:E> \land <var:N1> = <var:E> \land <var:N2> = <var:E> ^ <nat:2> \land <var:N3> = <var:E> ^ <nat:3> \land <var:N4> = <var:E> ^ <nat:4> \land <var:N0> = <nat:3> \} $ . This is shown to be logically sound with the assignment scheme given by standard Hoare techniques . Jumping to the proceeding statement seen in our program , we see the variable binding command \verb | <var:N1> := <var:N1> * <nat:8> ; | . This line advances the condition $ \{ <var:k> = <var:E> \land <var:N1> = <var:E> \land <var:N2> = <var:E> ^ <nat:2> \land <var:N3> = <var:E> ^ <nat:3> \land <var:N4> = <var:E> ^ <nat:4> \land <var:N0> = <nat:3> \} $ as $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N2> = <var:E> ^ <nat:2> \land <var:N3> = <var:E> ^ <nat:3> \land <var:N4> = <var:E> ^ <nat:4> \land <var:N0> = <nat:3> \} $ . Now , we see the variable update line \verb | <var:N2> := <var:N2> * <nat:8> ; | . This advances $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N2> = <var:E> ^ <nat:2> \land <var:N3> = <var:E> ^ <nat:3> \land <var:N4> = <var:E> ^ <nat:4> \land <var:N0> = <nat:3> \} $ toward $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:N3> = <var:E> ^ <nat:3> \land <var:N4> = <var:E> ^ <nat:4> \land <var:N0> = <nat:3> \} $ . Going forward , the binding line defining $ <var:N3> * <nat:9> $ as $ <var:N3>$ . This advances the precondition $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:N3> = <var:E> ^ <nat:3> \land <var:N4> = <var:E> ^ <nat:4> \land <var:N0> = <nat:3> \} $ as the condition $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:N3> = <nat:9> \cdot <var:E> ^ <nat:3> \land <var:N4> = <var:E> ^ <nat:4> \land <var:N0> = <nat:3> \} $ . Moving on to the following line of code in our list of instructions , we see the variable update command yielding $ <var:N4> * <nat:9> $ to $ <var:N4>$ . This command takes $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:N3> = <nat:9> \cdot <var:E> ^ <nat:3> \land <var:N4> = <var:E> ^ <nat:4> \land <var:N0> = <nat:3> \} $ into the condition $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:N3> = <nat:9> \cdot <var:E> ^ <nat:3> \land <var:N4> = <nat:9> \cdot <var:E> ^ <nat:4> \land <var:N0> = <nat:3> \} $ . This is rigorously given through the assignment inference rule found in standard Hoare logic . Moving on to the next step , we see the environment update statement yielding $ <var:N4$ as $ <var:F>$ . This code advances the precondition $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:N3> = <nat:9> \cdot <var:E> ^ <nat:3> \land <var:N4> = <nat:9> \cdot <var:E> ^ <nat:4> \land <var:N0> = <nat:3> \} $ toward the condition $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:N3> = <nat:9> \cdot <var:E> ^ <nat:3> \land <var:N0> = <nat:3> \land <var:F> = <nat:9> \cdot <var:E> ^ <nat:4> \} $ . Now , the binding code assigning $ <var:F> + <var:N3$ toward $ <var:F>$ . This line takes $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:N3> = <nat:9> \cdot <var:E> ^ <nat:3> \land <var:N0> = <nat:3> \land <var:F> = <nat:9> \cdot <var:E> ^ <nat:4> \} $ as $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:N0> = <nat:3> \land <var:F> = <nat:9> \cdot <var:E> ^ <nat:4> + <nat:9> \cdot <var:E> ^ <nat:3> \} $ . Stepping through , we have the assignment code \verb | <var:F> := <var:F> + <var:N2> | . This code takes the precondition $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N2> = <nat:8> \cdot <var:E> ^ <nat:2> \land <var:N0> = <nat:3> \land <var:F> = <nat:9> \cdot <var:E> ^ <nat:4> + <nat:9> \cdot <var:E> ^ <nat:3> \} $ into $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N0> = <nat:3> \land <var:F> = <nat:9> \cdot <var:E> ^ <nat:4> + <nat:9> \cdot <var:E> ^ <nat:3> + <nat:8> \cdot <var:E> ^ <nat:2> \} $ . Advancing to the upcoming command found in the list of instructions , the binding code \verb | <var:F> := <var:F> + <var:N1> | . This transfers the condition $ \{ <var:k> = <var:E> \land <var:N1> = <nat:8> \cdot <var:E> \land <var:N0> = <nat:3> \land <var:F> = <nat:9> \cdot <var:E> ^ <nat:4> + <nat:9> \cdot <var:E> ^ <nat:3> + <nat:8> \cdot <var:E> ^ <nat:2> \} $ to the condition $ \{ <var:k> = <var:E> \land <var:N0> = <nat:3> \land <var:F> = <nat:9> \cdot <var:E> ^ <nat:4> + <nat:9> \cdot <var:E> ^ <nat:3> + <nat:8> \cdot <var:E> ^ <nat:2> + <nat:8> \cdot <var:E> \} $ . This is guaranteed with the assignment inference rule found in typical Hoare techniques . Further , we see the variable assignmet code defining $ <var:F> + <var:N0$ toward $ <var:F>$ . This takes the condition $ \{ <var:k> = <var:E> \land <var:N0> = <nat:3> \land <var:F> = <nat:9> \cdot <var:E> ^ <nat:4> + <nat:9> \cdot <var:E> ^ <nat:3> + <nat:8> \cdot <var:E> ^ <nat:2> + <nat:8> \cdot <var:E> \} $ to the postcondition $ \{ <var:k> = <var:E> \land <var:F> = <nat:9> \cdot <var:E> ^ <nat:4> + <nat:9> \cdot <var:E> ^ <nat:3> + <nat:8> \cdot <var:E> ^ <nat:2> + <nat:8> \cdot <var:E> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <var:N4> : string := " <var:N4> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:k> = <var:E> }} <var:N1> := <var:k> ; <var:N2> := <var:N1> * <var:k> ; <var:N3> := <var:N2> * <var:k> ; <var:N4> := <var:N3> * <var:k> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:8> ; <var:N2> := <var:N2> * <nat:8> ; <var:N3> := <var:N3> * <nat:9> ; <var:N4> := <var:N4> * <nat:9> ; <var:F> := <var:N4> <var:F> := <var:F> + <var:N3> <var:F> := <var:F> + <var:N2> <var:F> := <var:F> + <var:N1> <var:F> := <var:F> + <var:N0> {{ <var:F> = <nat:9> * <var:E> ^ <nat:4> + <nat:9> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N1> = <var:E> /\ <var:N2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N1> = <var:E> /\ <var:N2> = <var:E> ^ <nat:2> /\ <var:N3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N1> = <var:E> /\ <var:N2> = <var:E> ^ <nat:2> /\ <var:N3> = <var:E> ^ <nat:3> /\ <var:N4> = <var:E> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N1> = <var:E> /\ <var:N2> = <var:E> ^ <nat:2> /\ <var:N3> = <var:E> ^ <nat:3> /\ <var:N4> = <var:E> ^ <nat:4> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N1> = <nat:8> * <var:E> /\ <var:N2> = <var:E> ^ <nat:2> /\ <var:N3> = <var:E> ^ <nat:3> /\ <var:N4> = <var:E> ^ <nat:4> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N1> = <nat:8> * <var:E> /\ <var:N2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:N3> = <var:E> ^ <nat:3> /\ <var:N4> = <var:E> ^ <nat:4> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N1> = <nat:8> * <var:E> /\ <var:N2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:N3> = <nat:9> * <var:E> ^ <nat:3> /\ <var:N4> = <var:E> ^ <nat:4> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N1> = <nat:8> * <var:E> /\ <var:N2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:N3> = <nat:9> * <var:E> ^ <nat:3> /\ <var:N4> = <nat:9> * <var:E> ^ <nat:4> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N1> = <nat:8> * <var:E> /\ <var:N2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:N3> = <nat:9> * <var:E> ^ <nat:3> /\ <var:N0> = <nat:3> /\ <var:F> = <nat:9> * <var:E> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N1> = <nat:8> * <var:E> /\ <var:N2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:N0> = <nat:3> /\ <var:F> = <nat:9> * <var:E> ^ <nat:4> + <nat:9> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N1> = <nat:8> * <var:E> /\ <var:N0> = <nat:3> /\ <var:F> = <nat:9> * <var:E> ^ <nat:4> + <nat:9> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N0> = <nat:3> /\ <var:F> = <nat:9> * <var:E> ^ <nat:4> + <nat:9> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:F> = <nat:9> * <var:E> ^ <nat:4> + <nat:9> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:8> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 