\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:h1> := <var:r> ; <var:h0> := <nat:1> ; <var:h1> := <var:h1> * <nat:3> ; <var:A> := <var:h1> <var:A> := <var:A> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> . Assuming --- taking $ <var:d> \in \mathbb{N} $ --- it to be that $ <var:r> = <var:d> $ before the evaluation of this list of instructions it holds that we see $ <var:A> = <nat:3> \cdot <var:d> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for the segment of code is shown by standard Hoare logic . Immediately after , \begin{eqnarray} \{ <var:r> = <var:d> \} \, <var:h1> := <var:r> \, \{ <var:r> = <var:d> \land <var:h1> = <var:d> \} \\ \{ <var:r> = <var:d> \land <var:h1> = <var:d> \} \, <var:h0> := <nat:1> \, \{ <var:r> = <var:d> \land <var:h1> = <var:d> \land <var:h0> = <nat:1> \} \\ \{ <var:r> = <var:d> \land <var:h1> = <var:d> \land <var:h0> = <nat:1> \} \, <var:h1> := <var:h1> * <nat:3> \, \{ <var:r> = <var:d> \land <var:h1> = <nat:3> * <var:d> \land <var:h0> = <nat:1> \} \\ \{ <var:r> = <var:d> \land <var:h1> = <nat:3> * <var:d> \land <var:h0> = <nat:1> \} \, <var:A> := <var:h1\, \{ <var:r> = <var:d> \land <var:h0> = <nat:1> \land <var:A> = <nat:3> * <var:d> \} \\ \{ <var:r> = <var:d> \land <var:h0> = <nat:1> \land <var:A> = <nat:3> * <var:d> \} \, <var:A> := <var:A> + <var:h0\, \{ <var:r> = <var:d> \land <var:A> = <nat:3> * <var:d> + <nat:1> \} \end{eqnarray} This is ensured using the variable binding scheme given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h1> := <var:r> ; <var:h0> := <nat:1> ; <var:h1> := <var:h1> * <nat:3> ; <var:A> := <var:h1> <var:A> := <var:A> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:r> = <var:d> }} <def:poly> {{ <var:A> = <nat:3> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:d> /\ <var:h1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:d> /\ <var:h1> = <var:d> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:d> /\ <var:h1> = <nat:3> * <var:d> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:d> /\ <var:h0> = <nat:1> /\ <var:A> = <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:d> /\ <var:A> = <nat:3> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 