\begin{document} \begin{theorem} We define a series of instructions as \begin{verbatim} <var:e0> := <nat:3> ; <var:w> := <var:e0> \end{verbatim} Allow that we have $ <var:Q> = <var:c> $ before executing this program , it must be that we see $ <var:w> = <nat:3> $ . \end{theorem} \begin{proof} The method of proof for this code can be given by Hoare logic . Immediately after , \verb | { <var:Q> = <var:c> } <var:e0> := <nat:3> { <var:Q> = <var:c> \land <var:e0> = <nat:3> } | . This is guaranteed by the assignment scheme given in usual Hoare logic . Keeping momentum , we see \verb | { <var:Q> = <var:c> } <var:e0> := <nat:3> { <var:Q> = <var:c> \land <var:e0> = <nat:3> } | . This is known to be sound by the assignment scheme in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Q> = <var:c> }} <var:e0> := <nat:3> ; <var:w> := <var:e0> {{ <var:w> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:w> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 