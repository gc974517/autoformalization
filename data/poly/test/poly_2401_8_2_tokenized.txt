\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:G> := <nat:4> ; <var:G> := <nat:1> + <var:G> * <var:X> ; <var:G> := <nat:3> + <var:G> * <var:X> ; <var:G> := <nat:3> + <var:G> * <var:X> ; <var:G> := <nat:1> + <var:G> * <var:X> ; <var:G> := <nat:4> + <var:G> * <var:X> ; <var:G> := <nat:1> + <var:G> * <var:X> ; <var:G> := <nat:4> + <var:G> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> in \emph{Imp} . Given it to hold that $ <var:X> = <var:m> $ prior to executing our code , then we see $ <var:G> = <nat:4> \cdot <var:m> ^ <nat:7> + <nat:1> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:4> $ once set of commands is done . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands is evident through Hoare logic . Immediately after , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:m> \} & <var:G> := <nat:4> & \{ <var:X> = <var:m> \land <var:G> = <nat:4> \} \\ \{ <var:X> = <var:m> \land <var:G> = <nat:4> \} & <var:G> := <nat:1> + <var:G> * <var:X> & \{ <var:X> = <var:m> \land <var:G> = <nat:4> * <var:m> + <nat:1> \} \\ \{ <var:X> = <var:m> \land <var:G> = <nat:4> * <var:m> + <nat:1> \} & <var:G> := <nat:3> + <var:G> * <var:X> & \{ <var:X> = <var:m> \land <var:G> = <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> \} \\ \{ <var:X> = <var:m> \land <var:G> = <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> \} & <var:G> := <nat:3> + <var:G> * <var:X> & \{ <var:X> = <var:m> \land <var:G> = <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> \} \\ \{ <var:X> = <var:m> \land <var:G> = <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> \} & <var:G> := <nat:1> + <var:G> * <var:X> & \{ <var:X> = <var:m> \land <var:G> = <nat:4> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> \} \\ \{ <var:X> = <var:m> \land <var:G> = <nat:4> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> \} & <var:G> := <nat:4> + <var:G> * <var:X> & \{ <var:X> = <var:m> \land <var:G> = <nat:4> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> \} \\ \{ <var:X> = <var:m> \land <var:G> = <nat:4> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> \} & <var:G> := <nat:1> + <var:G> * <var:X> & \{ <var:X> = <var:m> \land <var:G> = <nat:4> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> \} \\ \{ <var:X> = <var:m> \land <var:G> = <nat:4> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> \} & <var:G> := <nat:4> + <var:G> * <var:X& \{ <var:X> = <var:m> \land <var:G> = <nat:4> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> \} \end{tabular} This is sound with the variable update rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:G> := <nat:4> ; <var:G> := <nat:1> + <var:G> * <var:X> ; <var:G> := <nat:3> + <var:G> * <var:X> ; <var:G> := <nat:3> + <var:G> * <var:X> ; <var:G> := <nat:1> + <var:G> * <var:X> ; <var:G> := <nat:4> + <var:G> * <var:X> ; <var:G> := <nat:1> + <var:G> * <var:X> ; <var:G> := <nat:4> + <var:G> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:X> = <var:m> }} <def:poly> {{ <var:G> = <nat:4> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:G> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:G> = <nat:4> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:G> = <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:G> = <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:G> = <nat:4> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:G> = <nat:4> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:G> = <nat:4> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:m> /\ <var:G> = <nat:4> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 