\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:W1> := <var:f> ; <var:W2> := <var:W1> * <var:f> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:9> ; <var:W2> := <var:W2> * <nat:4> ; <var:B> := <var:W2> <var:B> := <var:B> + <var:W1> <var:B> := <var:B> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( given some positive numbers $ <var:i> $ ) it to hold that $ <var:f> = <var:i> $ prior to executing this series of instructions , it must be that we have $ <var:B> = <nat:4> \cdot <var:i> ^ <nat:2> + <nat:9> \cdot <var:i> + <nat:4> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques yields : \begin{eqnarray} \{ <var:f> = <var:i> \} \\ <var:W1> := <var:f> ; \\ \{ <var:f> = <var:i> \land <var:W1> = <var:i> \} \\ <var:W2> := <var:W1> * <var:f> ; \\ \{ <var:f> = <var:i> \land <var:W1> = <var:i> \land <var:W2> = <var:i> ^ <nat:2> \} \\ <var:W0> := <nat:4> ; \\ \{ <var:f> = <var:i> \land <var:W1> = <var:i> \land <var:W2> = <var:i> ^ <nat:2> \land <var:W0> = <nat:4> \} \\ <var:W1> := <var:W1> * <nat:9> ; \\ \{ <var:f> = <var:i> \land <var:W1> = <nat:9> \times <var:i> \land <var:W2> = <var:i> ^ <nat:2> \land <var:W0> = <nat:4> \} \\ <var:W2> := <var:W2> * <nat:4> ; \\ \{ <var:f> = <var:i> \land <var:W1> = <nat:9> \times <var:i> \land <var:W2> = <nat:4> \times <var:i> ^ <nat:2> \land <var:W0> = <nat:4> \} \\ <var:B> := <var:W2> \\ \{ <var:f> = <var:i> \land <var:W1> = <nat:9> \times <var:i> \land <var:W0> = <nat:4> \land <var:B> = <nat:4> \times <var:i> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:W1> \\ \{ <var:f> = <var:i> \land <var:W0> = <nat:4> \land <var:B> = <nat:4> \times <var:i> ^ <nat:2> + <nat:9> \times <var:i> \} \\ <var:B> := <var:B> + <var:W0> \\ \{ <var:f> = <var:i> \land <var:B> = <nat:4> \times <var:i> ^ <nat:2> + <nat:9> \times <var:i> + <nat:4> \} \end{eqnarray} Therefore , our code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W1> := <var:f> ; <var:W2> := <var:W1> * <var:f> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:9> ; <var:W2> := <var:W2> * <nat:4> ; <var:B> := <var:W2> <var:B> := <var:B> + <var:W1> <var:B> := <var:B> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:f> = <var:i> }} <def:poly> {{ <var:B> = <nat:4> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:W1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:W1> = <var:i> /\ <var:W2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:W1> = <var:i> /\ <var:W2> = <var:i> ^ <nat:2> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:W1> = <nat:9> * <var:i> /\ <var:W2> = <var:i> ^ <nat:2> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:W1> = <nat:9> * <var:i> /\ <var:W2> = <nat:4> * <var:i> ^ <nat:2> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:W1> = <nat:9> * <var:i> /\ <var:W0> = <nat:4> /\ <var:B> = <nat:4> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:W0> = <nat:4> /\ <var:B> = <nat:4> * <var:i> ^ <nat:2> + <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:B> = <nat:4> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 