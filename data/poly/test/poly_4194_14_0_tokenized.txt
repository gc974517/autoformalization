\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:9> ; <var:B1> := <nat:9> ; <var:B1> := <var:B1> * <var:N> ; <var:B2> := <nat:6> ; <var:B2> := <var:B2> * <var:N> ; <var:B2> := <var:B2> * <var:N> ; <var:B3> := <nat:2> ; <var:B3> := <var:B3> * <var:N> ; <var:B3> := <var:B3> * <var:N> ; <var:B3> := <var:B3> * <var:N> ; <var:O> := <var:B3> ; <var:O> := <var:O> + <var:B2> ; <var:O> := <var:O> + <var:B1> ; <var:O> := <var:O> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:N> = <var:h> $ before the execution of our series of instructions , it must be that we see $ <var:O> = <nat:2> \times <var:h> ^ <nat:3> + <nat:6> \times <var:h> ^ <nat:2> + <nat:9> \times <var:h> + <nat:9> $ . \end{theorem} \begin{proof} Applying Hoare reasoning yields : \begin{eqnarray} \{ <var:N> = <var:h> \} \\ <var:B0> := <nat:9> ; \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:9> \} \\ <var:B1> := <nat:9> ; \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:9> \land <var:B1> = <nat:9> \} \\ <var:B1> := <var:B1> * <var:N> ; \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:9> \land <var:B1> = <nat:9> \times <var:h> \} \\ <var:B2> := <nat:6> ; \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:9> \land <var:B1> = <nat:9> \times <var:h> \land <var:B2> = <nat:6> \} \\ <var:B2> := <var:B2> * <var:N> ; \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:9> \land <var:B1> = <nat:9> \times <var:h> \land <var:B2> = <nat:6> \times <var:h> \} \\ <var:B2> := <var:B2> * <var:N> ; \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:9> \land <var:B1> = <nat:9> \times <var:h> \land <var:B2> = <nat:6> \times <var:h> ^ <nat:2> \} \\ <var:B3> := <nat:2> ; \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:9> \land <var:B1> = <nat:9> \times <var:h> \land <var:B2> = <nat:6> \times <var:h> ^ <nat:2> \land <var:B3> = <nat:2> \} \\ <var:B3> := <var:B3> * <var:N> ; \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:9> \land <var:B1> = <nat:9> \times <var:h> \land <var:B2> = <nat:6> \times <var:h> ^ <nat:2> \land <var:B3> = <nat:2> \times <var:h> \} \\ <var:B3> := <var:B3> * <var:N> ; \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:9> \land <var:B1> = <nat:9> \times <var:h> \land <var:B2> = <nat:6> \times <var:h> ^ <nat:2> \land <var:B3> = <nat:2> \times <var:h> ^ <nat:2> \} \\ <var:B3> := <var:B3> * <var:N> ; \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:9> \land <var:B1> = <nat:9> \times <var:h> \land <var:B2> = <nat:6> \times <var:h> ^ <nat:2> \land <var:B3> = <nat:2> \times <var:h> ^ <nat:3> \} \\ <var:O> := <var:B3> ; \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:9> \land <var:B1> = <nat:9> \times <var:h> \land <var:B2> = <nat:6> \times <var:h> ^ <nat:2> \land <var:O> = <nat:2> \times <var:h> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:B2> ; \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:9> \land <var:B1> = <nat:9> \times <var:h> \land <var:O> = <nat:2> \times <var:h> ^ <nat:3> + <nat:6> \times <var:h> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:B1> ; \\ \{ <var:N> = <var:h> \land <var:B0> = <nat:9> \land <var:O> = <nat:2> \times <var:h> ^ <nat:3> + <nat:6> \times <var:h> ^ <nat:2> + <nat:9> \times <var:h> \} \\ <var:O> := <var:O> + <var:B0> \\ \{ <var:N> = <var:h> \land <var:O> = <nat:2> \times <var:h> ^ <nat:3> + <nat:6> \times <var:h> ^ <nat:2> + <nat:9> \times <var:h> + <nat:9> \} \end{eqnarray} Thus , our series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B0> := <nat:9> ; <var:B1> := <nat:9> ; <var:B1> := <var:B1> * <var:N> ; <var:B2> := <nat:6> ; <var:B2> := <var:B2> * <var:N> ; <var:B2> := <var:B2> * <var:N> ; <var:B3> := <nat:2> ; <var:B3> := <var:B3> * <var:N> ; <var:B3> := <var:B3> * <var:N> ; <var:B3> := <var:B3> * <var:N> ; <var:O> := <var:B3> ; <var:O> := <var:O> + <var:B2> ; <var:O> := <var:O> + <var:B1> ; <var:O> := <var:O> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:N> = <var:h> }} <def:poly> {{ <var:O> = <nat:2> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:9> * <var:h> /\ <var:B2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:9> * <var:h> /\ <var:B2> = <nat:6> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:9> * <var:h> /\ <var:B2> = <nat:6> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:9> * <var:h> /\ <var:B2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:B3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:9> * <var:h> /\ <var:B2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:B3> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:9> * <var:h> /\ <var:B2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:B3> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:9> * <var:h> /\ <var:B2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:B3> = <nat:2> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:9> * <var:h> /\ <var:B2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:O> = <nat:2> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:9> /\ <var:B1> = <nat:9> * <var:h> /\ <var:O> = <nat:2> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:B0> = <nat:9> /\ <var:O> = <nat:2> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:h> /\ <var:O> = <nat:2> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 