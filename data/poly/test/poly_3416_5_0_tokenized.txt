\begin{document} \begin{theorem} Define the following list of commands as \begin{verbatim} <var:p0> := <nat:5> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:L> ; <var:s> := <var:p1> ; <var:s> := <var:s> + <var:p0> \end{verbatim} Assuming that we have $ <var:L> = <var:I> $ prior to running our program it holds that $ <var:s> = <nat:5> \times <var:I> + <nat:5> $ after series of instructions terminates . \end{theorem} \begin{proof} The argument for this code segment can be demonstrated by typical Hoare logic . Advancing to the subsequent lines of codeseen in the code segment , we see \begin{eqnarray} \{ <var:L> = <var:I> \} \, <var:p0> := <nat:5> \, \{ <var:L> = <var:I> \land <var:p0> = <nat:5> \} \\ \{ <var:L> = <var:I> \land <var:p0> = <nat:5> \} \, <var:p1> := <nat:5> \, \{ <var:L> = <var:I> \land <var:p0> = <nat:5> \land <var:p1> = <nat:5> \} \end{eqnarray} Next , we have \begin{eqnarray} \{ <var:L> = <var:I> \} \, <var:p0> := <nat:5> \, \{ <var:L> = <var:I> \land <var:p0> = <nat:5> \} \end{eqnarray} Taking another step toward the following statements in our set of instructions , we have \begin{eqnarray} \{ <var:L> = <var:I> \} \, <var:p0> := <nat:5> \, \{ <var:L> = <var:I> \land <var:p0> = <nat:5> \} \\ \{ <var:L> = <var:I> \land <var:p0> = <nat:5> \} \, <var:p1> := <nat:5> \, \{ <var:L> = <var:I> \land <var:p0> = <nat:5> \land <var:p1> = <nat:5> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:L> = <var:I> }} <var:p0> := <nat:5> ; <var:p1> := <nat:5> ; <var:p1> := <var:p1> * <var:L> ; <var:s> := <var:p1> ; <var:s> := <var:s> + <var:p0> {{ <var:s> = <nat:5> * <var:I> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:p0> = <nat:5> /\ <var:s> = <nat:5> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:s> = <nat:5> * <var:I> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 