\begin{document} \begin{theorem} We define the following set of commands as \begin{verbatim} <var:N0> := <nat:1> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:q> ; <var:N2> := <nat:1> ; <var:N2> := <var:N2> * <var:q> ; <var:N2> := <var:N2> * <var:q> ; <var:s> := <var:N2> ; <var:s> := <var:s> + <var:N1> ; <var:s> := <var:s> + <var:N0> \end{verbatim} Allow that we have $ <var:q> = <var:z> $ , given all whole numbers $ <var:z> $ , ahead of running our code , it must be that we have $ <var:s> = <nat:1> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:1> $ when list of commands has finished . \end{theorem} \begin{proof} The flow of logic for our series of instructions can be accomplished using Hoare techniques . Moving forward , \[ \begin{tabular} {rcl} \{ <var:q> = <var:z> \} & <var:N0> := <nat:1> & \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \} \\ \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \} & <var:N1> := <nat:1> & \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> \} \\ \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> \} & <var:N1> := <var:N1> * <var:q> & \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> * <var:z> \} \\ \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> * <var:z> \} & <var:N2> := <nat:1> & \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> * <var:z> \land <var:N2> = <nat:1> \} \\ \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> * <var:z> \land <var:N2> = <nat:1> \} & <var:N2> := <var:N2> * <var:q> & \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> * <var:z> \land <var:N2> = <nat:1> * <var:z> \} \end{tabular} This is known to be sound using the inference rule from typical Hoare logic . Advancing to the next step , we see \[ \begin{tabular} {rcl} \{ <var:q> = <var:z> \} & <var:N0> := <nat:1> & \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \} \\ \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \} & <var:N1> := <nat:1> & \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \land <var:N1> = <nat:1> \} \end{tabular} This is deduced by the variable assignmet inference rule from Hoare logic . Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:q> = <var:z> \} & <var:N0> := <nat:1> & \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \} \end{tabular} Honing in on the upcoming statement in the code , we have \[ \begin{tabular} {rcl} \{ <var:q> = <var:z> \} & <var:N0> := <nat:1> & \{ <var:q> = <var:z> \land <var:N0> = <nat:1> \} \end{tabular} This is shown to be logically sound using the binding scheme in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:q> = <var:z> }} <var:N0> := <nat:1> ; <var:N1> := <nat:1> ; <var:N1> := <var:N1> * <var:q> ; <var:N2> := <nat:1> ; <var:N2> := <var:N2> * <var:q> ; <var:N2> := <var:N2> * <var:q> ; <var:s> := <var:N2> ; <var:s> := <var:s> + <var:N1> ; <var:s> := <var:s> + <var:N0> {{ <var:s> = <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:1> * <var:z> /\ <var:N2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:1> * <var:z> /\ <var:N2> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:1> * <var:z> /\ <var:N2> = <nat:1> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:1> * <var:z> /\ <var:s> = <nat:1> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:N0> = <nat:1> /\ <var:s> = <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:z> /\ <var:s> = <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 