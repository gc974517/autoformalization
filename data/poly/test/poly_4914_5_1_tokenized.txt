\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:U1> := <var:D> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:1> ; <var:m> := <var:U1> <var:m> := <var:m> + <var:U0> \end{verbatim} Given --- given positive numbers $ <var:X> $ --- that $ <var:D> = <var:X> $ before the evaluation of this program it follows that $ <var:m> = <nat:1> \times <var:X> + <nat:2> $ when series of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:X> \} \\ <var:U1> := <var:D> ; \\ \{ <var:D> = <var:X> \land <var:U1> = <var:X> \} \\ <var:U0> := <nat:2> ; \\ \{ <var:D> = <var:X> \land <var:U1> = <var:X> \land <var:U0> = <nat:2> \} \\ <var:U1> := <var:U1> * <nat:1> ; \\ \{ <var:D> = <var:X> \land <var:U1> = <nat:1> * <var:X> \land <var:U0> = <nat:2> \} \\ <var:m> := <var:U1> \\ \{ <var:D> = <var:X> \land <var:U0> = <nat:2> \land <var:m> = <nat:1> * <var:X> \} \\ <var:m> := <var:m> + <var:U0> \\ \{ <var:D> = <var:X> \land <var:m> = <nat:1> * <var:X> + <nat:2> \} \end{eqnarray} Using Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:D> = <var:X> }} <var:U1> := <var:D> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:1> ; <var:m> := <var:U1> <var:m> := <var:m> + <var:U0> {{ <var:m> = <nat:1> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:U1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:U1> = <var:X> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:U1> = <nat:1> * <var:X> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:U0> = <nat:2> /\ <var:m> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:m> = <nat:1> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 