\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:4> ; <var:W3> := <nat:3> ; <var:W3> := <var:W3> * <var:d> ; <var:W3> := <var:W3> * <var:d> ; <var:W3> := <var:W3> * <var:d> ; <var:W4> := <nat:3> ; <var:W4> := <var:W4> * <var:d> ; <var:W4> := <var:W4> * <var:d> ; <var:W4> := <var:W4> * <var:d> ; <var:W4> := <var:W4> * <var:d> ; <var:t> := <var:W4> ; <var:t> := <var:t> + <var:W3> ; <var:t> := <var:t> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> . Assuming that $ <var:d> = <var:s> $ --- assuming some natural coefficients $ <var:s> $ --- ahead of the execution of the list of commands it holds that we have $ <var:t> = <nat:3> \times <var:s> ^ <nat:4> + <nat:3> \times <var:s> ^ <nat:3> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our set of commands is shown using the following decorated program . \begin{eqnarray} \{ <var:d> = <var:s> \} \\ <var:W0> := <nat:4> ; \\ \{ <var:d> = <var:s> \land <var:W0> = <nat:4> \} \\ <var:W3> := <nat:3> ; \\ \{ <var:d> = <var:s> \land <var:W0> = <nat:4> \land <var:W3> = <nat:3> \} \\ <var:W3> := <var:W3> * <var:d> ; \\ \{ <var:d> = <var:s> \land <var:W0> = <nat:4> \land <var:W3> = <nat:3> * <var:s> \} \\ <var:W3> := <var:W3> * <var:d> ; \\ \{ <var:d> = <var:s> \land <var:W0> = <nat:4> \land <var:W3> = <nat:3> * <var:s> ^ <nat:2> \} \\ <var:W3> := <var:W3> * <var:d> ; \\ \{ <var:d> = <var:s> \land <var:W0> = <nat:4> \land <var:W3> = <nat:3> * <var:s> ^ <nat:3> \} \\ <var:W4> := <nat:3> ; \\ \{ <var:d> = <var:s> \land <var:W0> = <nat:4> \land <var:W3> = <nat:3> * <var:s> ^ <nat:3> \land <var:W4> = <nat:3> \} \\ <var:W4> := <var:W4> * <var:d> ; \\ \{ <var:d> = <var:s> \land <var:W0> = <nat:4> \land <var:W3> = <nat:3> * <var:s> ^ <nat:3> \land <var:W4> = <nat:3> * <var:s> \} \\ <var:W4> := <var:W4> * <var:d> ; \\ \{ <var:d> = <var:s> \land <var:W0> = <nat:4> \land <var:W3> = <nat:3> * <var:s> ^ <nat:3> \land <var:W4> = <nat:3> * <var:s> ^ <nat:2> \} \\ <var:W4> := <var:W4> * <var:d> ; \\ \{ <var:d> = <var:s> \land <var:W0> = <nat:4> \land <var:W3> = <nat:3> * <var:s> ^ <nat:3> \land <var:W4> = <nat:3> * <var:s> ^ <nat:3> \} \\ <var:W4> := <var:W4> * <var:d> ; \\ \{ <var:d> = <var:s> \land <var:W0> = <nat:4> \land <var:W3> = <nat:3> * <var:s> ^ <nat:3> \land <var:W4> = <nat:3> * <var:s> ^ <nat:4> \} \\ <var:t> := <var:W4> ; \\ \{ <var:d> = <var:s> \land <var:W0> = <nat:4> \land <var:W3> = <nat:3> * <var:s> ^ <nat:3> \land <var:t> = <nat:3> * <var:s> ^ <nat:4> \} \\ <var:t> := <var:t> + <var:W3> ; \\ \{ <var:d> = <var:s> \land <var:W0> = <nat:4> \land <var:t> = <nat:3> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> \} \\ <var:t> := <var:t> + <var:W0> \\ \{ <var:d> = <var:s> \land <var:t> = <nat:3> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> \} \end{eqnarray} Applying typical Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W3> : string := " <var:W3> " . Definition <var:W4> : string := " <var:W4> " . Definition <def:poly> := <var:W0> := <nat:4> ; <var:W3> := <nat:3> ; <var:W3> := <var:W3> * <var:d> ; <var:W3> := <var:W3> * <var:d> ; <var:W3> := <var:W3> * <var:d> ; <var:W4> := <nat:3> ; <var:W4> := <var:W4> * <var:d> ; <var:W4> := <var:W4> * <var:d> ; <var:W4> := <var:W4> * <var:d> ; <var:W4> := <var:W4> * <var:d> ; <var:t> := <var:W4> ; <var:t> := <var:t> + <var:W3> ; <var:t> := <var:t> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:d> = <var:s> }} <def:poly> {{ <var:t> = <nat:3> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:W0> = <nat:4> /\ <var:W3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:W0> = <nat:4> /\ <var:W3> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:W0> = <nat:4> /\ <var:W3> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:W0> = <nat:4> /\ <var:W3> = <nat:3> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:W0> = <nat:4> /\ <var:W3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:W4> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:W0> = <nat:4> /\ <var:W3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:W4> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:W0> = <nat:4> /\ <var:W3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:W4> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:W0> = <nat:4> /\ <var:W3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:W4> = <nat:3> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:W0> = <nat:4> /\ <var:W3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:W4> = <nat:3> * <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:W0> = <nat:4> /\ <var:W3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:t> = <nat:3> * <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:W0> = <nat:4> /\ <var:t> = <nat:3> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:t> = <nat:3> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 