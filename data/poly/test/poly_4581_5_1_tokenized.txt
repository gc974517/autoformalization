\begin{document} \begin{theorem} We define the following series of instructions : \begin{verbatim} <var:P1> := <var:p> ; <var:P0> := <nat:2> ; <var:P1> := <var:P1> * <nat:3> ; <var:y> := <var:P1> <var:y> := <var:y> + <var:P0> \end{verbatim} Assuming --- for every integers $ <var:E> $ --- that we have $ <var:p> = <var:E> $ ahead of interpreting our code segment it follows that we see $ <var:y> = <nat:3> * <var:E> + <nat:2> $ after list of instructions has executed . \end{theorem} \begin{proof} The application of typical Hoare logic gives : \begin{eqnarray} \{ <var:p> = <var:E> \} \\ <var:P1> := <var:p> ; \\ \{ <var:p> = <var:E> \land <var:P1> = <var:E> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:p> = <var:E> \land <var:P1> = <var:E> \land <var:P0> = <nat:2> \} \\ <var:P1> := <var:P1> * <nat:3> ; \\ \{ <var:p> = <var:E> \land <var:P1> = <nat:3> * <var:E> \land <var:P0> = <nat:2> \} \\ <var:y> := <var:P1> \\ \{ <var:p> = <var:E> \land <var:P0> = <nat:2> \land <var:y> = <nat:3> * <var:E> \} \\ <var:y> := <var:y> + <var:P0> \\ \{ <var:p> = <var:E> \land <var:y> = <nat:3> * <var:E> + <nat:2> \} \end{eqnarray} Thus , our list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:p> = <var:E> }} <var:P1> := <var:p> ; <var:P0> := <nat:2> ; <var:P1> := <var:P1> * <nat:3> ; <var:y> := <var:P1> <var:y> := <var:y> + <var:P0> {{ <var:y> = <nat:3> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:P1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:P1> = <var:E> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:P1> = <nat:3> * <var:E> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:P0> = <nat:2> /\ <var:y> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:E> /\ <var:y> = <nat:3> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 