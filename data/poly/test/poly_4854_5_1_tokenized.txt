\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r1> := <var:d> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:8> ; <var:Q> := <var:r1> <var:Q> := <var:Q> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:d> = <var:I> $ ( for every natural coefficients $ <var:I> $ ) prior to the evaluation of this set of commands then $ <var:Q> = <nat:8> * <var:I> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing Hoare logic returns : \begin{eqnarray} \{ <var:d> = <var:I> \} \\ <var:r1> := <var:d> ; \\ \{ <var:d> = <var:I> \land <var:r1> = <var:I> \} \\ <var:r0> := <nat:1> ; \\ \{ <var:d> = <var:I> \land <var:r1> = <var:I> \land <var:r0> = <nat:1> \} \\ <var:r1> := <var:r1> * <nat:8> ; \\ \{ <var:d> = <var:I> \land <var:r1> = <nat:8> * <var:I> \land <var:r0> = <nat:1> \} \\ <var:Q> := <var:r1> \\ \{ <var:d> = <var:I> \land <var:r0> = <nat:1> \land <var:Q> = <nat:8> * <var:I> \} \\ <var:Q> := <var:Q> + <var:r0> \\ \{ <var:d> = <var:I> \land <var:Q> = <nat:8> * <var:I> + <nat:1> \} \end{eqnarray} Hence , this segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r1> := <var:d> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:8> ; <var:Q> := <var:r1> <var:Q> := <var:Q> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:d> = <var:I> }} <def:poly> {{ <var:Q> = <nat:8> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:r1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:r1> = <var:I> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:r1> = <nat:8> * <var:I> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:r0> = <nat:1> /\ <var:Q> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:I> /\ <var:Q> = <nat:8> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 