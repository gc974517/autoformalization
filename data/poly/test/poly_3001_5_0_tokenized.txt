\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:1> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:t> ; <var:P> := <var:o1> ; <var:P> := <var:P> + <var:o0> \end{verbatim} Assuming it to hold that $ <var:t> = <var:i> $ ahead of the execution of the code segment , then we have $ <var:P> = <nat:3> \times <var:i> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this code segment is evident with Hoare logic . Moving on to the next statement seen in our segment of code , we have the binding code defining $ <nat:1> $ toward $ <var:o0>$ . This statement forwards the precondition $ \{ <var:t> = <var:i> \} $ as the postcondition $ \{ <var:t> = <var:i> \land <var:o0> = <nat:1> \} $ . This is given using the assignment rule from usual Hoare techniques . Moving forward to the next step , we have the variable assignmet code \verb | <var:o1> := <nat:3> ; | . This redefines the condition $ \{ <var:t> = <var:i> \land <var:o0> = <nat:1> \} $ to $ \{ <var:t> = <var:i> \land <var:o0> = <nat:1> \land <var:o1> = <nat:3> \} $ . This is guaranteed with the assignment inference rule defined in usual Hoare reasoning . Taking a look at the following statement found in our list of instructions , the assignment line letting $ <var:o1> * <var:t> $ as $ <var:o1>$ . This line moves the precondition $ \{ <var:t> = <var:i> \land <var:o0> = <nat:1> \land <var:o1> = <nat:3> \} $ toward the postcondition $ \{ <var:t> = <var:i> \land <var:o0> = <nat:1> \land <var:o1> = <nat:3> * <var:i> \} $ . Taking another step toward the following line of code found in our set of commands , we see the binding command \verb | <var:P> := <var:o1> ; | . This statement transfers $ \{ <var:t> = <var:i> \land <var:o0> = <nat:1> \land <var:o1> = <nat:3> * <var:i> \} $ toward $ \{ <var:t> = <var:i> \land <var:o0> = <nat:1> \land <var:P> = <nat:3> * <var:i> \} $ . Jumping to the next bit of code found in our list of instructions , we see the assignment line \verb | <var:P> := <var:P> + <var:o0> | . This moves $ \{ <var:t> = <var:i> \land <var:o0> = <nat:1> \land <var:P> = <nat:3> * <var:i> \} $ toward the postcondition $ \{ <var:t> = <var:i> \land <var:P> = <nat:3> * <var:i> + <nat:1> \} $ . This is sound with the assignment inference rule given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:t> = <var:i> }} <var:o0> := <nat:1> ; <var:o1> := <nat:3> ; <var:o1> := <var:o1> * <var:t> ; <var:P> := <var:o1> ; <var:P> := <var:P> + <var:o0> {{ <var:P> = <nat:3> * <var:i> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:o0> = <nat:1> /\ <var:P> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:P> = <nat:3> * <var:i> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 