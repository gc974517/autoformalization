\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:b> := <nat:1> ; <var:b> := <var:b> * <var:Z> ; <var:b> := <nat:4> + <var:b> * <var:Z> ; <var:b> := <var:b> * <var:Z> ; <var:b> := <nat:1> + <var:b> * <var:Z> ; <var:b> := <nat:4> + <var:b> * <var:Z> ; <var:b> := <nat:2> + <var:b> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:Z> = <var:q> $ prior to interpreting the code segment then $ <var:b> = <nat:1> \cdot <var:q> ^ <nat:6> + <nat:4> \cdot <var:q> ^ <nat:4> + <nat:1> \cdot <var:q> ^ <nat:2> + <nat:4> \cdot <var:q> + <nat:2> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques produces : \begin{eqnarray} \{ <var:Z> = <var:q> \} \\ <var:b> := <nat:1> ; \\ \{ <var:Z> = <var:q> \land <var:b> = <nat:1> \} \\ <var:b> := <var:b> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:b> = <nat:1> \times <var:q> + \} \\ <var:b> := <nat:4> + <var:b> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:b> = <nat:1> \times <var:q> ^ <nat:2> + <nat:4> \} \\ <var:b> := <var:b> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:b> = <nat:1> \times <var:q> ^ <nat:3> + <nat:4> \times <var:q> + \} \\ <var:b> := <nat:1> + <var:b> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:b> = <nat:1> \times <var:q> ^ <nat:4> + <nat:4> \times <var:q> ^ <nat:2> + <nat:1> \} \\ <var:b> := <nat:4> + <var:b> * <var:Z> ; \\ \{ <var:Z> = <var:q> \land <var:b> = <nat:1> \times <var:q> ^ <nat:5> + <nat:4> \times <var:q> ^ <nat:3> + <nat:1> \times <var:q> + <nat:4> \} \\ <var:b> := <nat:2> + <var:b> * <var:Z> \\ \{ <var:Z> = <var:q> \land <var:b> = <nat:1> \times <var:q> ^ <nat:6> + <nat:4> \times <var:q> ^ <nat:4> + <nat:1> \times <var:q> ^ <nat:2> + <nat:4> \times <var:q> + <nat:2> \} \end{eqnarray} As a consequence , this series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:1> ; <var:b> := <var:b> * <var:Z> ; <var:b> := <nat:4> + <var:b> * <var:Z> ; <var:b> := <var:b> * <var:Z> ; <var:b> := <nat:1> + <var:b> * <var:Z> ; <var:b> := <nat:4> + <var:b> * <var:Z> ; <var:b> := <nat:2> + <var:b> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Z> = <var:q> }} <def:poly> {{ <var:b> = <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:b> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:b> = <nat:1> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:b> = <nat:1> * <var:q> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:b> = <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:b> = <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:b> = <nat:1> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:b> = <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 