\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:6> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:C> ; <var:L> := <var:u1> ; <var:L> := <var:L> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Allow it to hold that $ <var:C> = <var:z> $ for every positive integers $ <var:z> $ prior to the execution of this code it must be that we see $ <var:L> = <nat:8> \cdot <var:z> + <nat:6> $ once list of instructions is done executing . \end{theorem} \begin{proof} Demonstrating correctness of our code is evident through typical Hoare logic . Moving forward to the next step , we have the command letting $ <nat:6> $ to $ <var:u0>$ . This line moves $ \{ <var:C> = <var:z> \} $ toward the condition $ \{ <var:C> = <var:z> \land <var:u0> = <nat:6> \} $ . Moving on to the following bit of code contained in our segment of code , we see the code \verb | <var:u1> := <nat:8> ; | . This advances the precondition $ \{ <var:C> = <var:z> \land <var:u0> = <nat:6> \} $ to the condition $ \{ <var:C> = <var:z> \land <var:u0> = <nat:6> \land <var:u1> = <nat:8> \} $ . This is known to be sound by the assignment rule given in usual Hoare techniques . Keeping momentum , we have the variable binding code giving $ <var:u1> * <var:C> $ as $ <var:u1>$ . This command takes the condition $ \{ <var:C> = <var:z> \land <var:u0> = <nat:6> \land <var:u1> = <nat:8> \} $ into $ \{ <var:C> = <var:z> \land <var:u0> = <nat:6> \land <var:u1> = <nat:8> * <var:z> \} $ . This is given using the assignment law of Hoare reasoning . Advancing , the environment update statement giving $ <var:u1> $ into $ <var:L>$ . This statement forwards $ \{ <var:C> = <var:z> \land <var:u0> = <nat:6> \land <var:u1> = <nat:8> * <var:z> \} $ as the postcondition $ \{ <var:C> = <var:z> \land <var:u0> = <nat:6> \land <var:L> = <nat:8> * <var:z> \} $ . Jumping to the upcoming command found in the set of commands , we see the variable update command \verb | <var:L> := <var:L> + <var:u0> | . This command redefines $ \{ <var:C> = <var:z> \land <var:u0> = <nat:6> \land <var:L> = <nat:8> * <var:z> \} $ as the postcondition $ \{ <var:C> = <var:z> \land <var:L> = <nat:8> * <var:z> + <nat:6> \} $ . This is known to be sound with the assignment scheme given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:6> ; <var:u1> := <nat:8> ; <var:u1> := <var:u1> * <var:C> ; <var:L> := <var:u1> ; <var:L> := <var:L> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:C> = <var:z> }} <def:poly> {{ <var:L> = <nat:8> * <var:z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:u0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:u0> = <nat:6> /\ <var:u1> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:u0> = <nat:6> /\ <var:L> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:L> = <nat:8> * <var:z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 