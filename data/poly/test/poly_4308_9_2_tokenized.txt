\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S> := <nat:3> ; <var:S> := <nat:3> + <var:S> * <var:X> ; <var:S> := <nat:4> + <var:S> * <var:X> ; <var:S> := <var:S> * <var:X> ; <var:S> := <nat:4> + <var:S> * <var:X> ; <var:S> := <nat:2> + <var:S> * <var:X> ; <var:S> := <nat:1> + <var:S> * <var:X> ; <var:S> := <nat:2> + <var:S> * <var:X> ; <var:S> := <nat:1> + <var:S> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Allow --- for whole numbers $ <var:Z> $ --- that $ <var:X> = <var:Z> $ before executing the set of instructions , it must be that we have $ <var:S> = <nat:3> \cdot <var:Z> ^ <nat:8> + <nat:3> \cdot <var:Z> ^ <nat:7> + <nat:4> \cdot <var:Z> ^ <nat:6> + <nat:4> \cdot <var:Z> ^ <nat:4> + <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:1> $ once program executes . \end{theorem} \begin{proof} Using Hoare reasoning gives : \begin{eqnarray} \{ <var:X> = <var:Z> \} \\ <var:S> := <nat:3> ; \\ \{ <var:X> = <var:Z> \land <var:S> = <nat:3> \} \\ <var:S> := <nat:3> + <var:S> * <var:X> ; \\ \{ <var:X> = <var:Z> \land <var:S> = <nat:3> \times <var:Z> + <nat:3> \} \\ <var:S> := <nat:4> + <var:S> * <var:X> ; \\ \{ <var:X> = <var:Z> \land <var:S> = <nat:3> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:4> \} \\ <var:S> := <var:S> * <var:X> ; \\ \{ <var:X> = <var:Z> \land <var:S> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + \} \end{eqnarray} Allowing executing this series of instructions produces : \begin{eqnarray} <var:S> := <nat:4> + <var:S> * <var:X> ; \\ \{ <var:X> = <var:Z> \land <var:S> = <nat:3> \times <var:Z> ^ <nat:4> + <nat:3> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:4> \} \\ <var:S> := <nat:2> + <var:S> * <var:X> ; \\ \{ <var:X> = <var:Z> \land <var:S> = <nat:3> \times <var:Z> ^ <nat:5> + <nat:3> \times <var:Z> ^ <nat:4> + <nat:4> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> + <nat:2> \} \\ <var:S> := <nat:1> + <var:S> * <var:X> ; \\ \{ <var:X> = <var:Z> \land <var:S> = <nat:3> \times <var:Z> ^ <nat:6> + <nat:3> \times <var:Z> ^ <nat:5> + <nat:4> \times <var:Z> ^ <nat:4> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:1> \} \\ <var:S> := <nat:2> + <var:S> * <var:X> ; \\ \{ <var:X> = <var:Z> \land <var:S> = <nat:3> \times <var:Z> ^ <nat:7> + <nat:3> \times <var:Z> ^ <nat:6> + <nat:4> \times <var:Z> ^ <nat:5> + <nat:4> \times <var:Z> ^ <nat:3> + <nat:2> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:2> \} \\ <var:S> := <nat:1> + <var:S> * <var:X> \\ \{ <var:X> = <var:Z> \land <var:S> = <nat:3> \times <var:Z> ^ <nat:8> + <nat:3> \times <var:Z> ^ <nat:7> + <nat:4> \times <var:Z> ^ <nat:6> + <nat:4> \times <var:Z> ^ <nat:4> + <nat:2> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:1> \} \end{eqnarray} As a result , the set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:3> ; <var:S> := <nat:3> + <var:S> * <var:X> ; <var:S> := <nat:4> + <var:S> * <var:X> ; <var:S> := <var:S> * <var:X> ; <var:S> := <nat:4> + <var:S> * <var:X> ; <var:S> := <nat:2> + <var:S> * <var:X> ; <var:S> := <nat:1> + <var:S> * <var:X> ; <var:S> := <nat:2> + <var:S> * <var:X> ; <var:S> := <nat:1> + <var:S> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:X> = <var:Z> }} <def:poly> {{ <var:S> = <nat:3> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:S> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:S> = <nat:3> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:S> = <nat:3> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:S> = <nat:3> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:S> = <nat:3> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:S> = <nat:3> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:S> = <nat:3> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:S> = <nat:3> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:S> = <nat:3> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 