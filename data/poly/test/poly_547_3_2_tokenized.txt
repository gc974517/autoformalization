\begin{document} \begin{theorem} We define the following series of instructions : \begin{verbatim} <var:q> := <nat:3> ; <var:q> := <nat:3> + <var:q> * <var:P> ; <var:q> := <nat:3> + <var:q> * <var:P> \end{verbatim} Given --- for any positive numbers $ <var:N> $ --- that $ <var:P> = <var:N> $ ahead of running our list of commands , then we see $ <var:q> = <nat:3> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:3> $ when list of instructions is done executing . \end{theorem} \begin{proof} Applying typical Hoare techniques gives us : \begin{eqnarray} \{ <var:P> = <var:N> \} \\ <var:q> := <nat:3> ; \\ \{ <var:P> = <var:N> \land <var:q> = <nat:3> \} \\ <var:q> := <nat:3> + <var:q> * <var:P> ; \\ \{ <var:P> = <var:N> \land <var:q> = <nat:3> * <var:N> + <nat:3> \} \end{eqnarray} Furthering the evaluation of this program results in : \begin{eqnarray} <var:q> := <nat:3> + <var:q> * <var:P> \\ \{ <var:P> = <var:N> \land <var:q> = <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> \} \end{eqnarray} Given the above , our segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:P> = <var:N> }} <var:q> := <nat:3> ; <var:q> := <nat:3> + <var:q> * <var:P> ; <var:q> := <nat:3> + <var:q> * <var:P> {{ <var:q> = <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:N> /\ <var:q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:N> /\ <var:q> = <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:N> /\ <var:q> = <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 