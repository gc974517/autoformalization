\begin{document} \begin{theorem} Take a list of commands as \begin{verbatim} <var:D0> := <nat:4> ; <var:D2> := <nat:2> ; <var:D2> := <var:D2> * <var:G> ; <var:D2> := <var:D2> * <var:G> ; <var:D3> := <nat:4> ; <var:D3> := <var:D3> * <var:G> ; <var:D3> := <var:D3> * <var:G> ; <var:D3> := <var:D3> * <var:G> ; <var:N> := <var:D3> ; <var:N> := <var:N> + <var:D2> ; <var:N> := <var:N> + <var:D0> \end{verbatim} Allow $ <var:G> = <var:d> $ ( given some $ <var:d> \in \mathbb{N} $ ) ahead of the evaluation of the code segment then $ <var:N> = <nat:4> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:4> $ when series of instructions has finished . \end{theorem} \begin{proof} The flow of logic for the code can be given through typical Hoare reasoning . Advancing , we have \begin{eqnarray} \{ <var:G> = <var:d> \} \, <var:D0> := <nat:4> \, \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \} \\ \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \} \, <var:D2> := <nat:2> \, \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \land <var:D2> = <nat:2> \} \\ \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \land <var:D2> = <nat:2> \} \, <var:D2> := <var:D2> * <var:G> \, \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \land <var:D2> = <nat:2> \cdot <var:d> \} \\ \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \land <var:D2> = <nat:2> \cdot <var:d> \} \, <var:D2> := <var:D2> * <var:G> \, \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \land <var:D2> = <nat:2> \cdot <var:d> ^ <nat:2> \} \\ \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \land <var:D2> = <nat:2> \cdot <var:d> ^ <nat:2> \} \, <var:D3> := <nat:4> \, \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \land <var:D2> = <nat:2> \cdot <var:d> ^ <nat:2> \land <var:D3> = <nat:4> \} \end{eqnarray} Immediately following , we see \begin{eqnarray} \{ <var:G> = <var:d> \} \, <var:D0> := <nat:4> \, \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \} \end{eqnarray} Going to the next step , we have \begin{eqnarray} \{ <var:G> = <var:d> \} \, <var:D0> := <nat:4> \, \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \} \\ \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \} \, <var:D2> := <nat:2> \, \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \land <var:D2> = <nat:2> \} \end{eqnarray} This is sound by the law of usual Hoare logic . Moving forward to the following statements found in the set of commands , \begin{eqnarray} \{ <var:G> = <var:d> \} \, <var:D0> := <nat:4> \, \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \} \\ \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \} \, <var:D2> := <nat:2> \, \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \land <var:D2> = <nat:2> \} \end{eqnarray} Keeping momentum , we have \begin{eqnarray} \{ <var:G> = <var:d> \} \, <var:D0> := <nat:4> \, \{ <var:G> = <var:d> \land <var:D0> = <nat:4> \} \end{eqnarray} This is shown using the assignment inference rule in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:G> = <var:d> }} <var:D0> := <nat:4> ; <var:D2> := <nat:2> ; <var:D2> := <var:D2> * <var:G> ; <var:D2> := <var:D2> * <var:G> ; <var:D3> := <nat:4> ; <var:D3> := <var:D3> * <var:G> ; <var:D3> := <var:D3> * <var:G> ; <var:D3> := <var:D3> * <var:G> ; <var:N> := <var:D3> ; <var:N> := <var:N> + <var:D2> ; <var:N> := <var:N> + <var:D0> {{ <var:N> = <nat:4> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:D0> = <nat:4> /\ <var:D2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:D0> = <nat:4> /\ <var:D2> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:D0> = <nat:4> /\ <var:D2> = <nat:2> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:D0> = <nat:4> /\ <var:D2> = <nat:2> * <var:d> ^ <nat:2> /\ <var:D3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:D0> = <nat:4> /\ <var:D2> = <nat:2> * <var:d> ^ <nat:2> /\ <var:D3> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:D0> = <nat:4> /\ <var:D2> = <nat:2> * <var:d> ^ <nat:2> /\ <var:D3> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:D0> = <nat:4> /\ <var:D2> = <nat:2> * <var:d> ^ <nat:2> /\ <var:D3> = <nat:4> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:D0> = <nat:4> /\ <var:D2> = <nat:2> * <var:d> ^ <nat:2> /\ <var:N> = <nat:4> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:D0> = <nat:4> /\ <var:N> = <nat:4> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:N> = <nat:4> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 