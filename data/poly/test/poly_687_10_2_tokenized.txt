\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O> := <nat:2> ; <var:O> := <var:O> * <var:m> ; <var:O> := <nat:2> + <var:O> * <var:m> ; <var:O> := <nat:2> + <var:O> * <var:m> ; <var:O> := <nat:3> + <var:O> * <var:m> ; <var:O> := <nat:4> + <var:O> * <var:m> ; <var:O> := <nat:1> + <var:O> * <var:m> ; <var:O> := <nat:1> + <var:O> * <var:m> ; <var:O> := <nat:4> + <var:O> * <var:m> ; <var:O> := <nat:1> + <var:O> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Assume for some positive integers $ <var:P> $ it to hold that $ <var:m> = <var:P> $ prior to interpreting our code , it holds that $ <var:O> = <nat:2> \cdot <var:P> ^ <nat:9> + <nat:2> \cdot <var:P> ^ <nat:7> + <nat:2> \cdot <var:P> ^ <nat:6> + <nat:3> \cdot <var:P> ^ <nat:5> + <nat:4> \cdot <var:P> ^ <nat:4> + <nat:1> \cdot <var:P> ^ <nat:3> + <nat:1> \cdot <var:P> ^ <nat:2> + <nat:4> \cdot <var:P> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:P> \} \\ <var:O> := <nat:2> ; \\ \{ <var:m> = <var:P> \land <var:O> = <nat:2> \} \\ <var:O> := <var:O> * <var:m> ; \\ \{ <var:m> = <var:P> \land <var:O> = <nat:2> * <var:P> + \} \\ <var:O> := <nat:2> + <var:O> * <var:m> ; \\ \{ <var:m> = <var:P> \land <var:O> = <nat:2> * <var:P> ^ <nat:2> + <nat:2> \} \\ <var:O> := <nat:2> + <var:O> * <var:m> ; \\ \{ <var:m> = <var:P> \land <var:O> = <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> + <nat:2> \} \\ <var:O> := <nat:3> + <var:O> * <var:m> ; \\ \{ <var:m> = <var:P> \land <var:O> = <nat:2> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:3> \} \\ <var:O> := <nat:4> + <var:O> * <var:m> ; \\ \{ <var:m> = <var:P> \land <var:O> = <nat:2> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:4> \} \\ <var:O> := <nat:1> + <var:O> * <var:m> ; \\ \{ <var:m> = <var:P> \land <var:O> = <nat:2> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> \} \\ <var:O> := <nat:1> + <var:O> * <var:m> ; \\ \{ <var:m> = <var:P> \land <var:O> = <nat:2> * <var:P> ^ <nat:7> + <nat:2> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:1> \} \\ <var:O> := <nat:4> + <var:O> * <var:m> ; \\ \{ <var:m> = <var:P> \land <var:O> = <nat:2> * <var:P> ^ <nat:8> + <nat:2> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:4> \} \\ <var:O> := <nat:1> + <var:O> * <var:m> \\ \{ <var:m> = <var:P> \land <var:O> = <nat:2> * <var:P> ^ <nat:9> + <nat:2> * <var:P> ^ <nat:7> + <nat:2> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> \} \end{eqnarray} Utilizing Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:2> ; <var:O> := <var:O> * <var:m> ; <var:O> := <nat:2> + <var:O> * <var:m> ; <var:O> := <nat:2> + <var:O> * <var:m> ; <var:O> := <nat:3> + <var:O> * <var:m> ; <var:O> := <nat:4> + <var:O> * <var:m> ; <var:O> := <nat:1> + <var:O> * <var:m> ; <var:O> := <nat:1> + <var:O> * <var:m> ; <var:O> := <nat:4> + <var:O> * <var:m> ; <var:O> := <nat:1> + <var:O> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:m> = <var:P> }} <def:poly> {{ <var:O> = <nat:2> * <var:P> ^ <nat:9> + <nat:2> * <var:P> ^ <nat:7> + <nat:2> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:O> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:O> = <nat:2> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:O> = <nat:2> * <var:P> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:O> = <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:O> = <nat:2> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:O> = <nat:2> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:O> = <nat:2> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:O> = <nat:2> * <var:P> ^ <nat:7> + <nat:2> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:O> = <nat:2> * <var:P> ^ <nat:8> + <nat:2> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:O> = <nat:2> * <var:P> ^ <nat:9> + <nat:2> * <var:P> ^ <nat:7> + <nat:2> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 