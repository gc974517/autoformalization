\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S> := <nat:4> ; <var:S> := <var:S> * <var:k> ; <var:S> := <var:S> * <var:k> ; <var:S> := <nat:3> + <var:S> * <var:k> ; <var:S> := <nat:4> + <var:S> * <var:k> ; <var:S> := <nat:3> + <var:S> * <var:k> ; <var:S> := <var:S> * <var:k> ; <var:S> := <nat:2> + <var:S> * <var:k> ; <var:S> := <nat:2> + <var:S> * <var:k> ; <var:S> := <nat:1> + <var:S> * <var:k> ; <var:S> := <nat:2> + <var:S> * <var:k> ; <var:S> := <nat:3> + <var:S> * <var:k> \end{verbatim} \end{definition} \begin{theorem} Assuming , for all positive integer coefficients $ <var:L> $ , that $ <var:k> = <var:L> $ prior to executing our list of instructions it must be that $ <var:S> = <nat:4> \times <var:L> ^ <nat:11> + <nat:3> \times <var:L> ^ <nat:8> + <nat:4> \times <var:L> ^ <nat:7> + <nat:3> \times <var:L> ^ <nat:6> + <nat:2> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:3> $ after list of instructions has finished . \end{theorem} \begin{proof} Applying typical Hoare techniques returns : \begin{eqnarray} \{ <var:k> = <var:L> \} \\ <var:S> := <nat:4> ; \\ \{ <var:k> = <var:L> \land <var:S> = <nat:4> \} \\ <var:S> := <var:S> * <var:k> ; \\ \{ <var:k> = <var:L> \land <var:S> = <nat:4> \cdot <var:L> + \} \end{eqnarray} Advancing interpreting our set of instructions gives : \begin{eqnarray} <var:S> := <var:S> * <var:k> ; \\ \{ <var:k> = <var:L> \land <var:S> = <nat:4> \cdot <var:L> ^ <nat:2> + \} \end{eqnarray} Continuing the execution of our code gives us : \begin{eqnarray} <var:S> := <nat:3> + <var:S> * <var:k> ; \\ \{ <var:k> = <var:L> \land <var:S> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:3> \} \\ <var:S> := <nat:4> + <var:S> * <var:k> ; \\ \{ <var:k> = <var:L> \land <var:S> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> + <nat:4> \} \\ <var:S> := <nat:3> + <var:S> * <var:k> ; \\ \{ <var:k> = <var:L> \land <var:S> = <nat:4> \cdot <var:L> ^ <nat:5> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:3> \} \\ <var:S> := <var:S> * <var:k> ; \\ \{ <var:k> = <var:L> \land <var:S> = <nat:4> \cdot <var:L> ^ <nat:6> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + \} \\ <var:S> := <nat:2> + <var:S> * <var:k> ; \\ \{ <var:k> = <var:L> \land <var:S> = <nat:4> \cdot <var:L> ^ <nat:7> + <nat:3> \cdot <var:L> ^ <nat:4> + <nat:4> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:2> \} \\ <var:S> := <nat:2> + <var:S> * <var:k> ; \\ \{ <var:k> = <var:L> \land <var:S> = <nat:4> \cdot <var:L> ^ <nat:8> + <nat:3> \cdot <var:L> ^ <nat:5> + <nat:4> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> + <nat:2> \} \\ <var:S> := <nat:1> + <var:S> * <var:k> ; \\ \{ <var:k> = <var:L> \land <var:S> = <nat:4> \cdot <var:L> ^ <nat:9> + <nat:3> \cdot <var:L> ^ <nat:6> + <nat:4> \cdot <var:L> ^ <nat:5> + <nat:3> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:1> \} \end{eqnarray} Furthering the evaluation of our set of commands produces : \begin{eqnarray} <var:S> := <nat:2> + <var:S> * <var:k> ; \\ \{ <var:k> = <var:L> \land <var:S> = <nat:4> \cdot <var:L> ^ <nat:10> + <nat:3> \cdot <var:L> ^ <nat:7> + <nat:4> \cdot <var:L> ^ <nat:6> + <nat:3> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:2> \} \\ <var:S> := <nat:3> + <var:S> * <var:k> \\ \{ <var:k> = <var:L> \land <var:S> = <nat:4> \cdot <var:L> ^ <nat:11> + <nat:3> \cdot <var:L> ^ <nat:8> + <nat:4> \cdot <var:L> ^ <nat:7> + <nat:3> \cdot <var:L> ^ <nat:6> + <nat:2> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:3> \} \end{eqnarray} Given the above , this code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:4> ; <var:S> := <var:S> * <var:k> ; <var:S> := <var:S> * <var:k> ; <var:S> := <nat:3> + <var:S> * <var:k> ; <var:S> := <nat:4> + <var:S> * <var:k> ; <var:S> := <nat:3> + <var:S> * <var:k> ; <var:S> := <var:S> * <var:k> ; <var:S> := <nat:2> + <var:S> * <var:k> ; <var:S> := <nat:2> + <var:S> * <var:k> ; <var:S> := <nat:1> + <var:S> * <var:k> ; <var:S> := <nat:2> + <var:S> * <var:k> ; <var:S> := <nat:3> + <var:S> * <var:k> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:k> = <var:L> }} <def:poly> {{ <var:S> = <nat:4> * <var:L> ^ <nat:11> + <nat:3> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:S> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:S> = <nat:4> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:S> = <nat:4> * <var:L> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:S> = <nat:4> * <var:L> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:S> = <nat:4> * <var:L> ^ <nat:4> + <nat:3> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:S> = <nat:4> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:S> = <nat:4> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:S> = <nat:4> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:S> = <nat:4> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:S> = <nat:4> * <var:L> ^ <nat:9> + <nat:3> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:S> = <nat:4> * <var:L> ^ <nat:10> + <nat:3> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:L> /\ <var:S> = <nat:4> * <var:L> ^ <nat:11> + <nat:3> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 