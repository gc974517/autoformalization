\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} such that \begin{verbatim} <var:l> := <nat:3> ; <var:l> := <nat:4> + <var:l> * <var:q> ; <var:l> := <nat:1> + <var:l> * <var:q> ; <var:l> := <nat:3> + <var:l> * <var:q> ; <var:l> := <nat:3> + <var:l> * <var:q> \end{verbatim} Allowing it to hold that $ <var:q> = <var:H> $ given any whole numbers $ <var:H> $ prior to interpreting our set of instructions , it follows that $ <var:l> = <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:H> \} \\ <var:l> := <nat:3> ; \\ \{ <var:q> = <var:H> \land <var:l> = <nat:3> \} \\ <var:l> := <nat:4> + <var:l> * <var:q> ; \\ \{ <var:q> = <var:H> \land <var:l> = <nat:3> \cdot <var:H> + <nat:4> \} \\ <var:l> := <nat:1> + <var:l> * <var:q> ; \\ \{ <var:q> = <var:H> \land <var:l> = <nat:3> \cdot <var:H> ^ <nat:2> + <nat:4> \cdot <var:H> + <nat:1> \} \\ <var:l> := <nat:3> + <var:l> * <var:q> ; \\ \{ <var:q> = <var:H> \land <var:l> = <nat:3> \cdot <var:H> ^ <nat:3> + <nat:4> \cdot <var:H> ^ <nat:2> + <nat:1> \cdot <var:H> + <nat:3> \} \\ <var:l> := <nat:3> + <var:l> * <var:q> \\ \{ <var:q> = <var:H> \land <var:l> = <nat:3> \cdot <var:H> ^ <nat:4> + <nat:4> \cdot <var:H> ^ <nat:3> + <nat:1> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:3> \} \end{eqnarray} Using typical Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:q> = <var:H> }} <var:l> := <nat:3> ; <var:l> := <nat:4> + <var:l> * <var:q> ; <var:l> := <nat:1> + <var:l> * <var:q> ; <var:l> := <nat:3> + <var:l> * <var:q> ; <var:l> := <nat:3> + <var:l> * <var:q> {{ <var:l> = <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:l> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:l> = <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:l> = <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:l> = <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:H> /\ <var:l> = <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 