\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:u1> := <var:Q> ; <var:u2> := <var:u1> * <var:Q> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:3> ; <var:u2> := <var:u2> * <nat:4> ; <var:P> := <var:u2> <var:P> := <var:P> + <var:u1> <var:P> := <var:P> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:Q> = <var:Z> $ ahead of interpreting this list of commands it holds that we have $ <var:P> = <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> $ after code segment is done executing . \end{theorem} \begin{proof} Proving correctness for our list of instructions is accomplished with Hoare techniques . Moving forward to the upcoming line of code contained in our set of instructions , we have the variable update command binding $ <var:Q> $ as $ <var:u1>$ . This command forwards the condition $ \{ <var:Q> = <var:Z> \} $ as $ \{ <var:Q> = <var:Z> \land <var:u1> = <var:Z> \} $ . Going to the next step , we see the variable binding statement \verb | <var:u2> := <var:u1> * <var:Q> ; | . This moves the condition $ \{ <var:Q> = <var:Z> \land <var:u1> = <var:Z> \} $ toward the condition $ \{ <var:Q> = <var:Z> \land <var:u1> = <var:Z> \land <var:u2> = <var:Z> ^ <nat:2> \} $ . Considering the proceeding line in the segment of code , the variable binding line binding $ <nat:4> $ toward $ <var:u0>$ . This forwards the condition $ \{ <var:Q> = <var:Z> \land <var:u1> = <var:Z> \land <var:u2> = <var:Z> ^ <nat:2> \} $ to $ \{ <var:Q> = <var:Z> \land <var:u1> = <var:Z> \land <var:u2> = <var:Z> ^ <nat:2> \land <var:u0> = <nat:4> \} $ . This is guaranteed through the assignment law defined by typical Hoare reasoning . Taking another step toward the upcoming bit of code contained in the series of instructions , we have the variable binding code letting $ <var:u1> * <nat:3> $ toward $ <var:u1>$ . This advances the precondition $ \{ <var:Q> = <var:Z> \land <var:u1> = <var:Z> \land <var:u2> = <var:Z> ^ <nat:2> \land <var:u0> = <nat:4> \} $ into the postcondition $ \{ <var:Q> = <var:Z> \land <var:u1> = <nat:3> \times <var:Z> \land <var:u2> = <var:Z> ^ <nat:2> \land <var:u0> = <nat:4> \} $ . Next , we see the statement \verb | <var:u2> := <var:u2> * <nat:4> ; | . This code forwards the precondition $ \{ <var:Q> = <var:Z> \land <var:u1> = <nat:3> \times <var:Z> \land <var:u2> = <var:Z> ^ <nat:2> \land <var:u0> = <nat:4> \} $ toward the postcondition $ \{ <var:Q> = <var:Z> \land <var:u1> = <nat:3> \times <var:Z> \land <var:u2> = <nat:4> \times <var:Z> ^ <nat:2> \land <var:u0> = <nat:4> \} $ . Considering the following statement found in our set of commands , we see the variable binding command assigning $ <var:u2$ to $ <var:P>$ . This command moves $ \{ <var:Q> = <var:Z> \land <var:u1> = <nat:3> \times <var:Z> \land <var:u2> = <nat:4> \times <var:Z> ^ <nat:2> \land <var:u0> = <nat:4> \} $ toward the condition $ \{ <var:Q> = <var:Z> \land <var:u1> = <nat:3> \times <var:Z> \land <var:u0> = <nat:4> \land <var:P> = <nat:4> \times <var:Z> ^ <nat:2> \} $ . Now , we have the line assigning $ <var:P> + <var:u1$ into $ <var:P>$ . This command forwards the precondition $ \{ <var:Q> = <var:Z> \land <var:u1> = <nat:3> \times <var:Z> \land <var:u0> = <nat:4> \land <var:P> = <nat:4> \times <var:Z> ^ <nat:2> \} $ into $ \{ <var:Q> = <var:Z> \land <var:u0> = <nat:4> \land <var:P> = <nat:4> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> \} $ . Now , we see the binding command \verb | <var:P> := <var:P> + <var:u0> | . This line transfers the condition $ \{ <var:Q> = <var:Z> \land <var:u0> = <nat:4> \land <var:P> = <nat:4> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> \} $ as $ \{ <var:Q> = <var:Z> \land <var:P> = <nat:4> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u1> := <var:Q> ; <var:u2> := <var:u1> * <var:Q> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:3> ; <var:u2> := <var:u2> * <nat:4> ; <var:P> := <var:u2> <var:P> := <var:P> + <var:u1> <var:P> := <var:P> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:Q> = <var:Z> }} <def:poly> {{ <var:P> = <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Z> /\ <var:u1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Z> /\ <var:u1> = <var:Z> /\ <var:u2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Z> /\ <var:u1> = <var:Z> /\ <var:u2> = <var:Z> ^ <nat:2> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Z> /\ <var:u1> = <nat:3> * <var:Z> /\ <var:u2> = <var:Z> ^ <nat:2> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Z> /\ <var:u1> = <nat:3> * <var:Z> /\ <var:u2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Z> /\ <var:u1> = <nat:3> * <var:Z> /\ <var:u0> = <nat:4> /\ <var:P> = <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Z> /\ <var:u0> = <nat:4> /\ <var:P> = <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:Z> /\ <var:P> = <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 