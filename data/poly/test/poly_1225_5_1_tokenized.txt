\begin{document} \begin{theorem} Define a program in \emph{Imp} : \begin{verbatim} <var:r1> := <var:j> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:3> ; <var:M> := <var:r1> <var:M> := <var:M> + <var:r0> \end{verbatim} Allowing it to hold that $ <var:j> = <var:v> $ given all positive integers $ <var:v> $ ahead of the execution of our list of instructions , it follows that we have $ <var:M> = <nat:3> \cdot <var:v> + <nat:1> $ . \end{theorem} \begin{proof} The application of usual Hoare logic yields : \begin{eqnarray} \{ <var:j> = <var:v> \} \\ <var:r1> := <var:j> ; \\ \{ <var:j> = <var:v> \land <var:r1> = <var:v> \} \\ <var:r0> := <nat:1> ; \\ \{ <var:j> = <var:v> \land <var:r1> = <var:v> \land <var:r0> = <nat:1> \} \\ <var:r1> := <var:r1> * <nat:3> ; \\ \{ <var:j> = <var:v> \land <var:r1> = <nat:3> \cdot <var:v> \land <var:r0> = <nat:1> \} \\ <var:M> := <var:r1> \\ \{ <var:j> = <var:v> \land <var:r0> = <nat:1> \land <var:M> = <nat:3> \cdot <var:v> \} \\ <var:M> := <var:M> + <var:r0> \\ \{ <var:j> = <var:v> \land <var:M> = <nat:3> \cdot <var:v> + <nat:1> \} \end{eqnarray} Therefore , the code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:j> = <var:v> }} <var:r1> := <var:j> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:3> ; <var:M> := <var:r1> <var:M> := <var:M> + <var:r0> {{ <var:M> = <nat:3> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:r1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:r1> = <var:v> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:r1> = <nat:3> * <var:v> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:r0> = <nat:1> /\ <var:M> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:v> /\ <var:M> = <nat:3> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 