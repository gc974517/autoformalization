\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w1> := <var:V> ; <var:w2> := <var:w1> * <var:V> ; <var:w0> := <nat:2> ; <var:w1> := <var:w1> * <nat:4> ; <var:w2> := <var:w2> * <nat:4> ; <var:E> := <var:w2> <var:E> := <var:E> + <var:w1> <var:E> := <var:E> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> . Given that $ <var:V> = <var:K> $ , given all natural numbers $ <var:K> $ , prior to the execution of this list of instructions , it must be that we see $ <var:E> = <nat:4> \cdot <var:K> ^ <nat:2> + <nat:4> \cdot <var:K> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our series of instructions is evident with usual Hoare reasoning . Paying attention to the proceeding commands in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:V> = <var:K> \} & <var:w1> := <var:V> & \{ <var:V> = <var:K> \land <var:w1> = <var:K> \} \\ \{ <var:V> = <var:K> \land <var:w1> = <var:K> \} & <var:w2> := <var:w1> * <var:V> & \{ <var:V> = <var:K> \land <var:w1> = <var:K> \land <var:w2> = <var:K> ^ <nat:2> \} \\ \{ <var:V> = <var:K> \land <var:w1> = <var:K> \land <var:w2> = <var:K> ^ <nat:2> \} & <var:w0> := <nat:2> & \{ <var:V> = <var:K> \land <var:w1> = <var:K> \land <var:w2> = <var:K> ^ <nat:2> \land <var:w0> = <nat:2> \} \end{tabular} This is rigorously given through the rule given in usual Hoare logic . Following , \[ \begin{tabular} {rcl} \{ <var:V> = <var:K> \} & <var:w1> := <var:V> & \{ <var:V> = <var:K> \land <var:w1> = <var:K> \} \\ \{ <var:V> = <var:K> \land <var:w1> = <var:K> \} & <var:w2> := <var:w1> * <var:V> & \{ <var:V> = <var:K> \land <var:w1> = <var:K> \land <var:w2> = <var:K> ^ <nat:2> \} \\ \{ <var:V> = <var:K> \land <var:w1> = <var:K> \land <var:w2> = <var:K> ^ <nat:2> \} & <var:w0> := <nat:2> & \{ <var:V> = <var:K> \land <var:w1> = <var:K> \land <var:w2> = <var:K> ^ <nat:2> \land <var:w0> = <nat:2> \} \\ \{ <var:V> = <var:K> \land <var:w1> = <var:K> \land <var:w2> = <var:K> ^ <nat:2> \land <var:w0> = <nat:2> \} & <var:w1> := <var:w1> * <nat:4> & \{ <var:V> = <var:K> \land <var:w1> = <nat:4> \times <var:K> \land <var:w2> = <var:K> ^ <nat:2> \land <var:w0> = <nat:2> \} \\ \{ <var:V> = <var:K> \land <var:w1> = <nat:4> \times <var:K> \land <var:w2> = <var:K> ^ <nat:2> \land <var:w0> = <nat:2> \} & <var:w2> := <var:w2> * <nat:4> & \{ <var:V> = <var:K> \land <var:w1> = <nat:4> \times <var:K> \land <var:w2> = <nat:4> \times <var:K> ^ <nat:2> \land <var:w0> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w1> := <var:V> ; <var:w2> := <var:w1> * <var:V> ; <var:w0> := <nat:2> ; <var:w1> := <var:w1> * <nat:4> ; <var:w2> := <var:w2> * <nat:4> ; <var:E> := <var:w2> <var:E> := <var:E> + <var:w1> <var:E> := <var:E> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:V> = <var:K> }} <def:poly> {{ <var:E> = <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:w1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:w1> = <var:K> /\ <var:w2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:w1> = <var:K> /\ <var:w2> = <var:K> ^ <nat:2> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:w1> = <nat:4> * <var:K> /\ <var:w2> = <var:K> ^ <nat:2> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:w1> = <nat:4> * <var:K> /\ <var:w2> = <nat:4> * <var:K> ^ <nat:2> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:w1> = <nat:4> * <var:K> /\ <var:w0> = <nat:2> /\ <var:E> = <nat:4> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:w0> = <nat:2> /\ <var:E> = <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:K> /\ <var:E> = <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 