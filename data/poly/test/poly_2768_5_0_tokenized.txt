\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:6> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:g> ; <var:o> := <var:i1> ; <var:o> := <var:o> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:g> = <var:W> $ before the execution of this series of commands it follows that we have $ <var:o> = <nat:4> * <var:W> + <nat:6> $ once set of instructions exits . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands is shown with the below decorated set of commands . \begin{eqnarray} \{ <var:g> = <var:W> \} \\ <var:i0> := <nat:6> ; \\ \{ <var:g> = <var:W> \land <var:i0> = <nat:6> \} \\ <var:i1> := <nat:4> ; \\ \{ <var:g> = <var:W> \land <var:i0> = <nat:6> \land <var:i1> = <nat:4> \} \\ <var:i1> := <var:i1> * <var:g> ; \\ \{ <var:g> = <var:W> \land <var:i0> = <nat:6> \land <var:i1> = <nat:4> \times <var:W> \} \\ <var:o> := <var:i1> ; \\ \{ <var:g> = <var:W> \land <var:i0> = <nat:6> \land <var:o> = <nat:4> \times <var:W> \} \\ <var:o> := <var:o> + <var:i0> \\ \{ <var:g> = <var:W> \land <var:o> = <nat:4> \times <var:W> + <nat:6> \} \end{eqnarray} Using typical Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i0> := <nat:6> ; <var:i1> := <nat:4> ; <var:i1> := <var:i1> * <var:g> ; <var:o> := <var:i1> ; <var:o> := <var:o> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:g> = <var:W> }} <def:poly> {{ <var:o> = <nat:4> * <var:W> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:i0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:i0> = <nat:6> /\ <var:i1> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:i0> = <nat:6> /\ <var:o> = <nat:4> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:o> = <nat:4> * <var:W> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 