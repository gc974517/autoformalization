\begin{document} \begin{theorem} Take the following code segment such that \begin{verbatim} <var:X> := <nat:1> ; <var:X> := <nat:2> + <var:X> * <var:o> \end{verbatim} Assume that we have $ <var:o> = <var:t> $ before the execution of this series of instructions , it must be that $ <var:X> = <nat:1> * <var:t> + <nat:2> $ after code finishes . \end{theorem} \begin{proof} Notice the below decorated program . \begin{eqnarray} \{ <var:o> = <var:t> \} \\ <var:X> := <nat:1> ; \\ \{ <var:o> = <var:t> \land <var:X> = <nat:1> \} \\ <var:X> := <nat:2> + <var:X> * <var:o> \\ \{ <var:o> = <var:t> \land <var:X> = <nat:1> \cdot <var:t> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:o> = <var:t> }} <var:X> := <nat:1> ; <var:X> := <nat:2> + <var:X> * <var:o> {{ <var:X> = <nat:1> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:X> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:X> = <nat:1> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 