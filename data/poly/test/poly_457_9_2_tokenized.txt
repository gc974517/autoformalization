\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} such that \begin{verbatim} <var:W> := <nat:3> ; <var:W> := <nat:2> + <var:W> * <var:M> ; <var:W> := <nat:3> + <var:W> * <var:M> ; <var:W> := <var:W> * <var:M> ; <var:W> := <nat:2> + <var:W> * <var:M> ; <var:W> := <nat:2> + <var:W> * <var:M> ; <var:W> := <var:W> * <var:M> ; <var:W> := <var:W> * <var:M> ; <var:W> := <nat:2> + <var:W> * <var:M> \end{verbatim} Assume $ <var:M> = <var:g> $ prior to the execution of the series of commands it follows that $ <var:W> = <nat:3> \times <var:g> ^ <nat:8> + <nat:2> \times <var:g> ^ <nat:7> + <nat:3> \times <var:g> ^ <nat:6> + <nat:2> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code is clear by Hoare logic . Following , we see \begin{eqnarray} \{ <var:M> = <var:g> \} \, <var:W> := <nat:3> \, \{ <var:M> = <var:g> \land <var:W> = <nat:3> \} \\ \{ <var:M> = <var:g> \land <var:W> = <nat:3> \} \, <var:W> := <nat:2> + <var:W> * <var:M> \, \{ <var:M> = <var:g> \land <var:W> = <nat:3> * <var:g> + <nat:2> \} \\ \{ <var:M> = <var:g> \land <var:W> = <nat:3> * <var:g> + <nat:2> \} \, <var:W> := <nat:3> + <var:W> * <var:M> \, \{ <var:M> = <var:g> \land <var:W> = <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> \} \\ \{ <var:M> = <var:g> \land <var:W> = <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> \} \, <var:W> := <var:W> * <var:M> \, \{ <var:M> = <var:g> \land <var:W> = <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + \} \\ \{ <var:M> = <var:g> \land <var:W> = <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + \} \, <var:W> := <nat:2> + <var:W> * <var:M> \, \{ <var:M> = <var:g> \land <var:W> = <nat:3> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:2> \} \\ \{ <var:M> = <var:g> \land <var:W> = <nat:3> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:2> \} \, <var:W> := <nat:2> + <var:W> * <var:M> \, \{ <var:M> = <var:g> \land <var:W> = <nat:3> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> + <nat:2> \} \\ \{ <var:M> = <var:g> \land <var:W> = <nat:3> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> + <nat:2> \} \, <var:W> := <var:W> * <var:M> \, \{ <var:M> = <var:g> \land <var:W> = <nat:3> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + \} \\ \{ <var:M> = <var:g> \land <var:W> = <nat:3> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + \} \, <var:W> := <var:W> * <var:M> \, \{ <var:M> = <var:g> \land <var:W> = <nat:3> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:3> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + \} \end{eqnarray} This is known to be sound by the law defined by standard Hoare logic . Further , we see \begin{eqnarray} \{ <var:M> = <var:g> \} \, <var:W> := <nat:3> \, \{ <var:M> = <var:g> \land <var:W> = <nat:3> \} \end{eqnarray} This is given with the rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:M> = <var:g> }} <var:W> := <nat:3> ; <var:W> := <nat:2> + <var:W> * <var:M> ; <var:W> := <nat:3> + <var:W> * <var:M> ; <var:W> := <var:W> * <var:M> ; <var:W> := <nat:2> + <var:W> * <var:M> ; <var:W> := <nat:2> + <var:W> * <var:M> ; <var:W> := <var:W> * <var:M> ; <var:W> := <var:W> * <var:M> ; <var:W> := <nat:2> + <var:W> * <var:M> {{ <var:W> = <nat:3> * <var:g> ^ <nat:8> + <nat:2> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:W> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:W> = <nat:3> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:W> = <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:W> = <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:W> = <nat:3> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:W> = <nat:3> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:W> = <nat:3> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:W> = <nat:3> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:3> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:g> /\ <var:W> = <nat:3> * <var:g> ^ <nat:8> + <nat:2> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 