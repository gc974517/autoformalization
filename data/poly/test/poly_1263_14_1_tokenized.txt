\begin{document} \begin{theorem} We define a series of commands : \begin{verbatim} <var:t1> := <var:s> ; <var:t2> := <var:t1> * <var:s> ; <var:t3> := <var:t2> * <var:s> ; <var:t4> := <var:t3> * <var:s> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:2> ; <var:t2> := <var:t2> * <nat:2> ; <var:t3> := <var:t3> * <nat:9> ; <var:t4> := <var:t4> * <nat:5> ; <var:K> := <var:t4> <var:K> := <var:K> + <var:t3> <var:K> := <var:K> + <var:t2> <var:K> := <var:K> + <var:t1> <var:K> := <var:K> + <var:t0> \end{verbatim} Given ( for every whole numbers $ <var:M> $ ) it to be that $ <var:s> = <var:M> $ before interpreting our code segment it must be that $ <var:K> = <nat:5> \cdot <var:M> ^ <nat:4> + <nat:9> \cdot <var:M> ^ <nat:3> + <nat:2> \cdot <var:M> ^ <nat:2> + <nat:2> \cdot <var:M> + <nat:6> $ . \end{theorem} \begin{proof} The argument for our segment of code can be demonstrated by typical Hoare reasoning . Going to the next step , we have the assignment statement yielding $ <var:s> $ into $ <var:t1>$ . This forwards the condition $ \{ <var:s> = <var:M> \} $ toward the postcondition $ \{ <var:s> = <var:M> \land <var:t1> = <var:M> \} $ . Going forward , we see the binding statement binding $ <var:t1> * <var:s> $ into $ <var:t2>$ . This moves $ \{ <var:s> = <var:M> \land <var:t1> = <var:M> \} $ toward $ \{ <var:s> = <var:M> \land <var:t1> = <var:M> \land <var:t2> = <var:M> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment rule of typical Hoare techniques . Further , we have the variable update line defining $ <var:t2> * <var:s> $ to $ <var:t3>$ . This forwards the condition $ \{ <var:s> = <var:M> \land <var:t1> = <var:M> \land <var:t2> = <var:M> ^ <nat:2> \} $ to the postcondition $ \{ <var:s> = <var:M> \land <var:t1> = <var:M> \land <var:t2> = <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \} $ . Going forward , we see the code assigning $ <var:t3> * <var:s> $ into $ <var:t4>$ . This line moves $ \{ <var:s> = <var:M> \land <var:t1> = <var:M> \land <var:t2> = <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \} $ into the condition $ \{ <var:s> = <var:M> \land <var:t1> = <var:M> \land <var:t2> = <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \} $ . Jumping to the proceeding command in the series of instructions , the binding line defining $ <nat:6> $ to $ <var:t0>$ . This redefines the condition $ \{ <var:s> = <var:M> \land <var:t1> = <var:M> \land <var:t2> = <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \} $ into the condition $ \{ <var:s> = <var:M> \land <var:t1> = <var:M> \land <var:t2> = <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \land <var:t0> = <nat:6> \} $ . This is rigorously given by the assignment scheme obtained from standard Hoare techniques . Advancing on , the environment update statement binding $ <var:t1> * <nat:2> $ toward $ <var:t1>$ . This moves $ \{ <var:s> = <var:M> \land <var:t1> = <var:M> \land <var:t2> = <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \land <var:t0> = <nat:6> \} $ to the postcondition $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t2> = <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \land <var:t0> = <nat:6> \} $ . Moving forward to the subsequent bit of code in the series of commands , we have the statement binding $ <var:t2> * <nat:2> $ to $ <var:t2>$ . This advances the condition $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t2> = <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \land <var:t0> = <nat:6> \} $ into the condition $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t2> = <nat:2> \times <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \land <var:t0> = <nat:6> \} $ . After , we have the assignment statement defining $ <var:t3> * <nat:9> $ to $ <var:t3>$ . This forwards the condition $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t2> = <nat:2> \times <var:M> ^ <nat:2> \land <var:t3> = <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \land <var:t0> = <nat:6> \} $ as the condition $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t2> = <nat:2> \times <var:M> ^ <nat:2> \land <var:t3> = <nat:9> \times <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \land <var:t0> = <nat:6> \} $ . Honing in on the upcoming bit of code found in the series of instructions , we have the environment update line binding $ <var:t4> * <nat:5> $ into $ <var:t4>$ . This statement advances the condition $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t2> = <nat:2> \times <var:M> ^ <nat:2> \land <var:t3> = <nat:9> \times <var:M> ^ <nat:3> \land <var:t4> = <var:M> ^ <nat:4> \land <var:t0> = <nat:6> \} $ as $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t2> = <nat:2> \times <var:M> ^ <nat:2> \land <var:t3> = <nat:9> \times <var:M> ^ <nat:3> \land <var:t4> = <nat:5> \times <var:M> ^ <nat:4> \land <var:t0> = <nat:6> \} $ . This is known to be sound by the assignment inference rule defined in Hoare techniques . Following , we see the variable assignmet code yielding $ <var:t4$ to $ <var:K>$ . This moves the condition $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t2> = <nat:2> \times <var:M> ^ <nat:2> \land <var:t3> = <nat:9> \times <var:M> ^ <nat:3> \land <var:t4> = <nat:5> \times <var:M> ^ <nat:4> \land <var:t0> = <nat:6> \} $ to the postcondition $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t2> = <nat:2> \times <var:M> ^ <nat:2> \land <var:t3> = <nat:9> \times <var:M> ^ <nat:3> \land <var:t0> = <nat:6> \land <var:K> = <nat:5> \times <var:M> ^ <nat:4> \} $ . Moving on to the next step , we have the binding line \verb | <var:K> := <var:K> + <var:t3> | . This statement takes the condition $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t2> = <nat:2> \times <var:M> ^ <nat:2> \land <var:t3> = <nat:9> \times <var:M> ^ <nat:3> \land <var:t0> = <nat:6> \land <var:K> = <nat:5> \times <var:M> ^ <nat:4> \} $ as the condition $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t2> = <nat:2> \times <var:M> ^ <nat:2> \land <var:t0> = <nat:6> \land <var:K> = <nat:5> \times <var:M> ^ <nat:4> + <nat:9> \times <var:M> ^ <nat:3> \} $ . This is ensured by the assignment rule given by Hoare logic . Taking a look at the following step contained in the set of commands , the variable assignmet statement \verb | <var:K> := <var:K> + <var:t2> | . This transfers the precondition $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t2> = <nat:2> \times <var:M> ^ <nat:2> \land <var:t0> = <nat:6> \land <var:K> = <nat:5> \times <var:M> ^ <nat:4> + <nat:9> \times <var:M> ^ <nat:3> \} $ as the postcondition $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t0> = <nat:6> \land <var:K> = <nat:5> \times <var:M> ^ <nat:4> + <nat:9> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> \} $ . This is deduced by the assignment scheme in typical Hoare techniques . Focusing on the subsequent line contained in the program , the environment update statement \verb | <var:K> := <var:K> + <var:t1> | . This line takes the precondition $ \{ <var:s> = <var:M> \land <var:t1> = <nat:2> \times <var:M> \land <var:t0> = <nat:6> \land <var:K> = <nat:5> \times <var:M> ^ <nat:4> + <nat:9> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> \} $ to the postcondition $ \{ <var:s> = <var:M> \land <var:t0> = <nat:6> \land <var:K> = <nat:5> \times <var:M> ^ <nat:4> + <nat:9> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> \} $ . Moving on to the following line contained in our series of commands , we have the variable binding command \verb | <var:K> := <var:K> + <var:t0> | . This statement advances $ \{ <var:s> = <var:M> \land <var:t0> = <nat:6> \land <var:K> = <nat:5> \times <var:M> ^ <nat:4> + <nat:9> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> \} $ to the postcondition $ \{ <var:s> = <var:M> \land <var:K> = <nat:5> \times <var:M> ^ <nat:4> + <nat:9> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:6> \} $ . This is ensured using the assignment rule given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <var:t4> : string := " <var:t4> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:s> = <var:M> }} <var:t1> := <var:s> ; <var:t2> := <var:t1> * <var:s> ; <var:t3> := <var:t2> * <var:s> ; <var:t4> := <var:t3> * <var:s> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:2> ; <var:t2> := <var:t2> * <nat:2> ; <var:t3> := <var:t3> * <nat:9> ; <var:t4> := <var:t4> * <nat:5> ; <var:K> := <var:t4> <var:K> := <var:K> + <var:t3> <var:K> := <var:K> + <var:t2> <var:K> := <var:K> + <var:t1> <var:K> := <var:K> + <var:t0> {{ <var:K> = <nat:5> * <var:M> ^ <nat:4> + <nat:9> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:t1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:t1> = <var:M> /\ <var:t2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:t1> = <var:M> /\ <var:t2> = <var:M> ^ <nat:2> /\ <var:t3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:t1> = <var:M> /\ <var:t2> = <var:M> ^ <nat:2> /\ <var:t3> = <var:M> ^ <nat:3> /\ <var:t4> = <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:t1> = <var:M> /\ <var:t2> = <var:M> ^ <nat:2> /\ <var:t3> = <var:M> ^ <nat:3> /\ <var:t4> = <var:M> ^ <nat:4> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:t1> = <nat:2> * <var:M> /\ <var:t2> = <var:M> ^ <nat:2> /\ <var:t3> = <var:M> ^ <nat:3> /\ <var:t4> = <var:M> ^ <nat:4> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:t1> = <nat:2> * <var:M> /\ <var:t2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:t3> = <var:M> ^ <nat:3> /\ <var:t4> = <var:M> ^ <nat:4> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:t1> = <nat:2> * <var:M> /\ <var:t2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:t3> = <nat:9> * <var:M> ^ <nat:3> /\ <var:t4> = <var:M> ^ <nat:4> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:t1> = <nat:2> * <var:M> /\ <var:t2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:t3> = <nat:9> * <var:M> ^ <nat:3> /\ <var:t4> = <nat:5> * <var:M> ^ <nat:4> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:t1> = <nat:2> * <var:M> /\ <var:t2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:t3> = <nat:9> * <var:M> ^ <nat:3> /\ <var:t0> = <nat:6> /\ <var:K> = <nat:5> * <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:t1> = <nat:2> * <var:M> /\ <var:t2> = <nat:2> * <var:M> ^ <nat:2> /\ <var:t0> = <nat:6> /\ <var:K> = <nat:5> * <var:M> ^ <nat:4> + <nat:9> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:t1> = <nat:2> * <var:M> /\ <var:t0> = <nat:6> /\ <var:K> = <nat:5> * <var:M> ^ <nat:4> + <nat:9> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:t0> = <nat:6> /\ <var:K> = <nat:5> * <var:M> ^ <nat:4> + <nat:9> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:M> /\ <var:K> = <nat:5> * <var:M> ^ <nat:4> + <nat:9> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 