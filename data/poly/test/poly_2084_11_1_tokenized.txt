\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:s1> := <var:G> ; <var:s2> := <var:s1> * <var:G> ; <var:s3> := <var:s2> * <var:G> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:5> ; <var:s2> := <var:s2> * <nat:6> ; <var:s3> := <var:s3> * <nat:3> ; <var:Q> := <var:s3> <var:Q> := <var:Q> + <var:s2> <var:Q> := <var:Q> + <var:s1> <var:Q> := <var:Q> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Given , given natural numbers $ <var:x> $ , that $ <var:G> = <var:x> $ prior to interpreting our list of instructions it follows that we have $ <var:Q> = <nat:3> \cdot <var:x> ^ <nat:3> + <nat:6> \cdot <var:x> ^ <nat:2> + <nat:5> \cdot <var:x> + <nat:3> $ once code has terminated . \end{theorem} \begin{proof} Utilizing usual Hoare logic returns : \begin{eqnarray} \{ <var:G> = <var:x> \} \\ <var:s1> := <var:G> ; \\ \{ <var:G> = <var:x> \land <var:s1> = <var:x> \} \\ <var:s2> := <var:s1> * <var:G> ; \\ \{ <var:G> = <var:x> \land <var:s1> = <var:x> \land <var:s2> = <var:x> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:G> ; \\ \{ <var:G> = <var:x> \land <var:s1> = <var:x> \land <var:s2> = <var:x> ^ <nat:2> \land <var:s3> = <var:x> ^ <nat:3> \} \\ <var:s0> := <nat:3> ; \\ \{ <var:G> = <var:x> \land <var:s1> = <var:x> \land <var:s2> = <var:x> ^ <nat:2> \land <var:s3> = <var:x> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:s1> := <var:s1> * <nat:5> ; \\ \{ <var:G> = <var:x> \land <var:s1> = <nat:5> * <var:x> \land <var:s2> = <var:x> ^ <nat:2> \land <var:s3> = <var:x> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:s2> := <var:s2> * <nat:6> ; \\ \{ <var:G> = <var:x> \land <var:s1> = <nat:5> * <var:x> \land <var:s2> = <nat:6> * <var:x> ^ <nat:2> \land <var:s3> = <var:x> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:s3> := <var:s3> * <nat:3> ; \\ \{ <var:G> = <var:x> \land <var:s1> = <nat:5> * <var:x> \land <var:s2> = <nat:6> * <var:x> ^ <nat:2> \land <var:s3> = <nat:3> * <var:x> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:Q> := <var:s3> \\ \{ <var:G> = <var:x> \land <var:s1> = <nat:5> * <var:x> \land <var:s2> = <nat:6> * <var:x> ^ <nat:2> \land <var:s0> = <nat:3> \land <var:Q> = <nat:3> * <var:x> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:s2> \\ \{ <var:G> = <var:x> \land <var:s1> = <nat:5> * <var:x> \land <var:s0> = <nat:3> \land <var:Q> = <nat:3> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:s1> \\ \{ <var:G> = <var:x> \land <var:s0> = <nat:3> \land <var:Q> = <nat:3> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> + <nat:5> * <var:x> \} \\ <var:Q> := <var:Q> + <var:s0> \\ \{ <var:G> = <var:x> \land <var:Q> = <nat:3> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:3> \} \end{eqnarray} Thusly , this list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s1> := <var:G> ; <var:s2> := <var:s1> * <var:G> ; <var:s3> := <var:s2> * <var:G> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:5> ; <var:s2> := <var:s2> * <nat:6> ; <var:s3> := <var:s3> * <nat:3> ; <var:Q> := <var:s3> <var:Q> := <var:Q> + <var:s2> <var:Q> := <var:Q> + <var:s1> <var:Q> := <var:Q> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:G> = <var:x> }} <def:poly> {{ <var:Q> = <nat:3> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:s1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:s1> = <var:x> /\ <var:s2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:s1> = <var:x> /\ <var:s2> = <var:x> ^ <nat:2> /\ <var:s3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:s1> = <var:x> /\ <var:s2> = <var:x> ^ <nat:2> /\ <var:s3> = <var:x> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:s1> = <nat:5> * <var:x> /\ <var:s2> = <var:x> ^ <nat:2> /\ <var:s3> = <var:x> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:s1> = <nat:5> * <var:x> /\ <var:s2> = <nat:6> * <var:x> ^ <nat:2> /\ <var:s3> = <var:x> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:s1> = <nat:5> * <var:x> /\ <var:s2> = <nat:6> * <var:x> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:x> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:s1> = <nat:5> * <var:x> /\ <var:s2> = <nat:6> * <var:x> ^ <nat:2> /\ <var:s0> = <nat:3> /\ <var:Q> = <nat:3> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:s1> = <nat:5> * <var:x> /\ <var:s0> = <nat:3> /\ <var:Q> = <nat:3> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:s0> = <nat:3> /\ <var:Q> = <nat:3> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> + <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:Q> = <nat:3> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 