\begin{document} \begin{theorem} Define the following series of commands : \begin{verbatim} <var:w0> := <nat:2> ; <var:H> := <var:w0> \end{verbatim} Allow that we have $ <var:C> = <var:q> $ , for every positive integer coefficients $ <var:q> $ , before the execution of our program , it holds that we have $ <var:H> = <nat:2> $ . \end{theorem} \begin{proof} Using Hoare logic returns : \begin{eqnarray} \{ <var:C> = <var:q> \} \\ <var:w0> := <nat:2> ; \\ \{ <var:C> = <var:q> \land <var:w0> = <nat:2> \} \\ <var:H> := <var:w0> \\ \{ <var:C> = <var:q> \land <var:H> = <nat:2> \} \end{eqnarray} Given the preceding argument , this code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:C> = <var:q> }} <var:w0> := <nat:2> ; <var:H> := <var:w0> {{ <var:H> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:q> /\ <var:H> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 