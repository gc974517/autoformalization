\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:c> ; <var:t2> := <var:t1> * <var:c> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:8> ; <var:t2> := <var:t2> * <nat:5> ; <var:m> := <var:t2> <var:m> := <var:m> + <var:t1> <var:m> := <var:m> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:c> = <var:S> $ before running the program , it must be that we see $ <var:m> = <nat:5> \times <var:S> ^ <nat:2> + <nat:8> \times <var:S> + <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this list of instructions can be given through Hoare logic . Considering the subsequent command in the set of commands , we see the binding line yielding $ <var:c> $ into $ <var:t1>$ . This command advances $ \{ <var:c> = <var:S> \} $ as the postcondition $ \{ <var:c> = <var:S> \land <var:t1> = <var:S> \} $ . This is known to be sound using the assignment scheme in usual Hoare logic . Taking another step toward the subsequent piece of code in our list of commands , the binding line binding $ <var:t1> * <var:c> $ into $ <var:t2>$ . This statement redefines the precondition $ \{ <var:c> = <var:S> \land <var:t1> = <var:S> \} $ as the condition $ \{ <var:c> = <var:S> \land <var:t1> = <var:S> \land <var:t2> = <var:S> ^ <nat:2> \} $ . This is rigorously given through the assignment scheme given by usual Hoare techniques . Stepping forward , we see the command defining $ <nat:6> $ to $ <var:t0>$ . This transfers the condition $ \{ <var:c> = <var:S> \land <var:t1> = <var:S> \land <var:t2> = <var:S> ^ <nat:2> \} $ as $ \{ <var:c> = <var:S> \land <var:t1> = <var:S> \land <var:t2> = <var:S> ^ <nat:2> \land <var:t0> = <nat:6> \} $ . This is deduced using the assignment rule found in usual Hoare logic . Jumping to the next statement found in our series of commands , we have the assignment line letting $ <var:t1> * <nat:8> $ into $ <var:t1>$ . This redefines the condition $ \{ <var:c> = <var:S> \land <var:t1> = <var:S> \land <var:t2> = <var:S> ^ <nat:2> \land <var:t0> = <nat:6> \} $ to the condition $ \{ <var:c> = <var:S> \land <var:t1> = <nat:8> \cdot <var:S> \land <var:t2> = <var:S> ^ <nat:2> \land <var:t0> = <nat:6> \} $ . Next , we have the binding statement \verb | <var:t2> := <var:t2> * <nat:5> ; | . This command advances the precondition $ \{ <var:c> = <var:S> \land <var:t1> = <nat:8> \cdot <var:S> \land <var:t2> = <var:S> ^ <nat:2> \land <var:t0> = <nat:6> \} $ into the postcondition $ \{ <var:c> = <var:S> \land <var:t1> = <nat:8> \cdot <var:S> \land <var:t2> = <nat:5> \cdot <var:S> ^ <nat:2> \land <var:t0> = <nat:6> \} $ . Considering the subsequent command contained in our series of commands , we have the variable update line \verb | <var:m> := <var:t2> | . This line advances $ \{ <var:c> = <var:S> \land <var:t1> = <nat:8> \cdot <var:S> \land <var:t2> = <nat:5> \cdot <var:S> ^ <nat:2> \land <var:t0> = <nat:6> \} $ toward the postcondition $ \{ <var:c> = <var:S> \land <var:t1> = <nat:8> \cdot <var:S> \land <var:t0> = <nat:6> \land <var:m> = <nat:5> \cdot <var:S> ^ <nat:2> \} $ . This is sound by the assignment law given in standard Hoare reasoning . Stepping forward , we have the variable binding line giving $ <var:m> + <var:t1$ into $ <var:m>$ . This code takes $ \{ <var:c> = <var:S> \land <var:t1> = <nat:8> \cdot <var:S> \land <var:t0> = <nat:6> \land <var:m> = <nat:5> \cdot <var:S> ^ <nat:2> \} $ to the postcondition $ \{ <var:c> = <var:S> \land <var:t0> = <nat:6> \land <var:m> = <nat:5> \cdot <var:S> ^ <nat:2> + <nat:8> \cdot <var:S> \} $ . Further , we have the environment update code yielding $ <var:m> + <var:t0$ into $ <var:m>$ . This transfers $ \{ <var:c> = <var:S> \land <var:t0> = <nat:6> \land <var:m> = <nat:5> \cdot <var:S> ^ <nat:2> + <nat:8> \cdot <var:S> \} $ toward the postcondition $ \{ <var:c> = <var:S> \land <var:m> = <nat:5> \cdot <var:S> ^ <nat:2> + <nat:8> \cdot <var:S> + <nat:6> \} $ . This is shown through the assignment inference rule defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <def:poly> := <var:t1> := <var:c> ; <var:t2> := <var:t1> * <var:c> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:8> ; <var:t2> := <var:t2> * <nat:5> ; <var:m> := <var:t2> <var:m> := <var:m> + <var:t1> <var:m> := <var:m> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:c> = <var:S> }} <def:poly> {{ <var:m> = <nat:5> * <var:S> ^ <nat:2> + <nat:8> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:t1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:t1> = <var:S> /\ <var:t2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:t1> = <var:S> /\ <var:t2> = <var:S> ^ <nat:2> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:t1> = <nat:8> * <var:S> /\ <var:t2> = <var:S> ^ <nat:2> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:t1> = <nat:8> * <var:S> /\ <var:t2> = <nat:5> * <var:S> ^ <nat:2> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:t1> = <nat:8> * <var:S> /\ <var:t0> = <nat:6> /\ <var:m> = <nat:5> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:t0> = <nat:6> /\ <var:m> = <nat:5> * <var:S> ^ <nat:2> + <nat:8> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:S> /\ <var:m> = <nat:5> * <var:S> ^ <nat:2> + <nat:8> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 