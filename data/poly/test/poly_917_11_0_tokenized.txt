\begin{document} \begin{theorem} Take the following program in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:7> ; <var:F2> := <nat:5> ; <var:F2> := <var:F2> * <var:P> ; <var:F2> := <var:F2> * <var:P> ; <var:F3> := <nat:5> ; <var:F3> := <var:F3> * <var:P> ; <var:F3> := <var:F3> * <var:P> ; <var:F3> := <var:F3> * <var:P> ; <var:d> := <var:F3> ; <var:d> := <var:d> + <var:F2> ; <var:d> := <var:d> + <var:F0> \end{verbatim} Allow that $ <var:P> = <var:t> $ before running this list of commands , it must be that we see $ <var:d> = <nat:5> \times <var:t> ^ <nat:3> + <nat:5> \times <var:t> ^ <nat:2> + <nat:7> $ . \end{theorem} \begin{proof} The method of proof for this list of commands is evident using the below decorated program . \begin{eqnarray} \{ <var:P> = <var:t> \} \\ <var:F0> := <nat:7> ; \\ \{ <var:P> = <var:t> \land <var:F0> = <nat:7> \} \\ <var:F2> := <nat:5> ; \\ \{ <var:P> = <var:t> \land <var:F0> = <nat:7> \land <var:F2> = <nat:5> \} \\ <var:F2> := <var:F2> * <var:P> ; \\ \{ <var:P> = <var:t> \land <var:F0> = <nat:7> \land <var:F2> = <nat:5> * <var:t> \} \\ <var:F2> := <var:F2> * <var:P> ; \\ \{ <var:P> = <var:t> \land <var:F0> = <nat:7> \land <var:F2> = <nat:5> * <var:t> ^ <nat:2> \} \\ <var:F3> := <nat:5> ; \\ \{ <var:P> = <var:t> \land <var:F0> = <nat:7> \land <var:F2> = <nat:5> * <var:t> ^ <nat:2> \land <var:F3> = <nat:5> \} \\ <var:F3> := <var:F3> * <var:P> ; \\ \{ <var:P> = <var:t> \land <var:F0> = <nat:7> \land <var:F2> = <nat:5> * <var:t> ^ <nat:2> \land <var:F3> = <nat:5> * <var:t> \} \\ <var:F3> := <var:F3> * <var:P> ; \\ \{ <var:P> = <var:t> \land <var:F0> = <nat:7> \land <var:F2> = <nat:5> * <var:t> ^ <nat:2> \land <var:F3> = <nat:5> * <var:t> ^ <nat:2> \} \\ <var:F3> := <var:F3> * <var:P> ; \\ \{ <var:P> = <var:t> \land <var:F0> = <nat:7> \land <var:F2> = <nat:5> * <var:t> ^ <nat:2> \land <var:F3> = <nat:5> * <var:t> ^ <nat:3> \} \\ <var:d> := <var:F3> ; \\ \{ <var:P> = <var:t> \land <var:F0> = <nat:7> \land <var:F2> = <nat:5> * <var:t> ^ <nat:2> \land <var:d> = <nat:5> * <var:t> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:F2> ; \\ \{ <var:P> = <var:t> \land <var:F0> = <nat:7> \land <var:d> = <nat:5> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:F0> \\ \{ <var:P> = <var:t> \land <var:d> = <nat:5> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> + <nat:7> \} \end{eqnarray} Using typical Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:P> = <var:t> }} <var:F0> := <nat:7> ; <var:F2> := <nat:5> ; <var:F2> := <var:F2> * <var:P> ; <var:F2> := <var:F2> * <var:P> ; <var:F3> := <nat:5> ; <var:F3> := <var:F3> * <var:P> ; <var:F3> := <var:F3> * <var:P> ; <var:F3> := <var:F3> * <var:P> ; <var:d> := <var:F3> ; <var:d> := <var:d> + <var:F2> ; <var:d> := <var:d> + <var:F0> {{ <var:d> = <nat:5> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:F0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:F0> = <nat:7> /\ <var:F2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:F0> = <nat:7> /\ <var:F2> = <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:F0> = <nat:7> /\ <var:F2> = <nat:5> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:F0> = <nat:7> /\ <var:F2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:F3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:F0> = <nat:7> /\ <var:F2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:F3> = <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:F0> = <nat:7> /\ <var:F2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:F3> = <nat:5> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:F0> = <nat:7> /\ <var:F2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:F3> = <nat:5> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:F0> = <nat:7> /\ <var:F2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:d> = <nat:5> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:F0> = <nat:7> /\ <var:d> = <nat:5> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:t> /\ <var:d> = <nat:5> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 