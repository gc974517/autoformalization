\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:v> := <nat:3> ; <var:v> := <var:v> * <var:h> ; <var:v> := <nat:1> + <var:v> * <var:h> ; <var:v> := <nat:4> + <var:v> * <var:h> ; <var:v> := <nat:1> + <var:v> * <var:h> ; <var:v> := <nat:1> + <var:v> * <var:h> ; <var:v> := <nat:3> + <var:v> * <var:h> ; <var:v> := <nat:2> + <var:v> * <var:h> ; <var:v> := <nat:2> + <var:v> * <var:h> ; <var:v> := <nat:4> + <var:v> * <var:h> ; <var:v> := <nat:2> + <var:v> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:h> = <var:m> $ prior to evaluating our segment of code it holds that $ <var:v> = <nat:3> \times <var:m> ^ <nat:10> + <nat:1> \times <var:m> ^ <nat:8> + <nat:4> \times <var:m> ^ <nat:7> + <nat:1> \times <var:m> ^ <nat:6> + <nat:1> \times <var:m> ^ <nat:5> + <nat:3> \times <var:m> ^ <nat:4> + <nat:2> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the segment of code can be given by standard Hoare reasoning . Moving on to the next step , we have the assignment command letting $ <nat:3> $ to $ <var:v>$ . This statement redefines the precondition $ \{ <var:h> = <var:m> \} $ toward the condition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \} $ . This is deduced using the assignment inference rule of Hoare techniques . Honing in on the upcoming statement seen in our segment of code , the line letting $ <var:v> * <var:h> $ to $ <var:v>$ . This command redefines the condition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \} $ into the postcondition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> + \} $ . Observing the following line of code contained in the program , we have the variable update command \verb | <var:v> := <nat:1> + <var:v> * <var:h> ; | . This statement redefines the precondition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> + \} $ into the condition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:2> + <nat:1> \} $ . Considering the upcoming piece of code found in our code , the assignment statement giving $ <nat:4> + <var:v> * <var:h> $ as $ <var:v>$ . This code moves the condition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:2> + <nat:1> \} $ into the condition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> + <nat:4> \} $ . This is given with the assignment scheme in standard Hoare logic . Immediately following , we see the environment update line \verb | <var:v> := <nat:1> + <var:v> * <var:h> ; | . This command redefines $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> + <nat:4> \} $ to the condition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:1> \} $ . This is deduced through the assignment inference rule defined in typical Hoare techniques . Considering the proceeding command contained in the code segment , we see the command letting $ <nat:1> + <var:v> * <var:h> $ into $ <var:v>$ . This command forwards the condition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:1> \} $ toward $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:1> \} $ . Paying attention to the subsequent command found in our set of instructions , we see the variable assignmet statement \verb | <var:v> := <nat:3> + <var:v> * <var:h> ; | . This code forwards $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:1> \} $ into $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:6> + <nat:1> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:3> \} $ . Moving onward , the variable binding line giving $ <nat:2> + <var:v> * <var:h> $ into $ <var:v>$ . This command advances the condition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:6> + <nat:1> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:3> \} $ toward the condition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:7> + <nat:1> \times <var:m> ^ <nat:5> + <nat:4> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:2> \} $ . Looking at the next line contained in our set of commands , we have the variable update code defining $ <nat:2> + <var:v> * <var:h> $ toward $ <var:v>$ . This command redefines the condition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:7> + <nat:1> \times <var:m> ^ <nat:5> + <nat:4> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:2> \} $ into the postcondition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:8> + <nat:1> \times <var:m> ^ <nat:6> + <nat:4> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:2> \} $ . Following , we have the assignment code assigning $ <nat:4> + <var:v> * <var:h> $ to $ <var:v>$ . This command forwards the condition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:8> + <nat:1> \times <var:m> ^ <nat:6> + <nat:4> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:2> \} $ toward the postcondition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:9> + <nat:1> \times <var:m> ^ <nat:7> + <nat:4> \times <var:m> ^ <nat:6> + <nat:1> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:4> + <nat:3> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:4> \} $ . Paying attention to the subsequent line of code contained in our list of commands , the variable binding line \verb | <var:v> := <nat:2> + <var:v> * <var:h> | . This takes $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:9> + <nat:1> \times <var:m> ^ <nat:7> + <nat:4> \times <var:m> ^ <nat:6> + <nat:1> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:4> + <nat:3> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:4> \} $ as the condition $ \{ <var:h> = <var:m> \land <var:v> = <nat:3> \times <var:m> ^ <nat:10> + <nat:1> \times <var:m> ^ <nat:8> + <nat:4> \times <var:m> ^ <nat:7> + <nat:1> \times <var:m> ^ <nat:6> + <nat:1> \times <var:m> ^ <nat:5> + <nat:3> \times <var:m> ^ <nat:4> + <nat:2> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:2> \} $ . This is guaranteed with the assignment rule defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:3> ; <var:v> := <var:v> * <var:h> ; <var:v> := <nat:1> + <var:v> * <var:h> ; <var:v> := <nat:4> + <var:v> * <var:h> ; <var:v> := <nat:1> + <var:v> * <var:h> ; <var:v> := <nat:1> + <var:v> * <var:h> ; <var:v> := <nat:3> + <var:v> * <var:h> ; <var:v> := <nat:2> + <var:v> * <var:h> ; <var:v> := <nat:2> + <var:v> * <var:h> ; <var:v> := <nat:4> + <var:v> * <var:h> ; <var:v> := <nat:2> + <var:v> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:h> = <var:m> }} <def:poly> {{ <var:v> = <nat:3> * <var:m> ^ <nat:10> + <nat:1> * <var:m> ^ <nat:8> + <nat:4> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:v> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:v> = <nat:3> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:v> = <nat:3> * <var:m> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:v> = <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:v> = <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:v> = <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:v> = <nat:3> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:v> = <nat:3> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:v> = <nat:3> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:v> = <nat:3> * <var:m> ^ <nat:9> + <nat:1> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:v> = <nat:3> * <var:m> ^ <nat:10> + <nat:1> * <var:m> ^ <nat:8> + <nat:4> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 