\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y> := <nat:3> ; <var:y> := <nat:2> + <var:y> * <var:F> ; <var:y> := <nat:2> + <var:y> * <var:F> ; <var:y> := <nat:4> + <var:y> * <var:F> ; <var:y> := <nat:1> + <var:y> * <var:F> ; <var:y> := <var:y> * <var:F> ; <var:y> := <nat:4> + <var:y> * <var:F> ; <var:y> := <var:y> * <var:F> ; <var:y> := <var:y> * <var:F> ; <var:y> := <var:y> * <var:F> ; <var:y> := <nat:4> + <var:y> * <var:F> ; <var:y> := <nat:4> + <var:y> * <var:F> ; <var:y> := <nat:3> + <var:y> * <var:F> ; <var:y> := <nat:3> + <var:y> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:F> = <var:p> $ before executing the series of instructions , it follows that we see $ <var:y> = <nat:3> \times <var:p> ^ <nat:13> + <nat:2> \times <var:p> ^ <nat:12> + <nat:2> \times <var:p> ^ <nat:11> + <nat:4> \times <var:p> ^ <nat:10> + <nat:1> \times <var:p> ^ <nat:9> + <nat:4> \times <var:p> ^ <nat:7> + <nat:4> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our series of commands can be demonstrated by typical Hoare techniques . Advancing to the next step , \verb | { <var:F> = <var:p> } <var:y> := <nat:3> { <var:F> = <var:p> \land <var:y> = <nat:3> } | , \verb | { <var:F> = <var:p> \land <var:y> = <nat:3> } <var:y> := <nat:2> + <var:y> * <var:F> { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> + <nat:2> } | and \verb | { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> + <nat:2> } <var:y> := <nat:2> + <var:y> * <var:F> { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:2> } | . Moving forward to the subsequent commands contained in our list of commands , we see \verb | { <var:F> = <var:p> } <var:y> := <nat:3> { <var:F> = <var:p> \land <var:y> = <nat:3> } | , \verb | { <var:F> = <var:p> \land <var:y> = <nat:3> } <var:y> := <nat:2> + <var:y> * <var:F> { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> + <nat:2> } | , \verb | { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> + <nat:2> } <var:y> := <nat:2> + <var:y> * <var:F> { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:2> } | , \verb | { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:2> } <var:y> := <nat:4> + <var:y> * <var:F> { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> } | , \verb | { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> } <var:y> := <nat:1> + <var:y> * <var:F> { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> } | , \verb | { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> } <var:y> := <var:y> * <var:F> { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + } | , \verb | { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + } <var:y> := <nat:4> + <var:y> * <var:F> { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:4> } | , \verb | { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:4> } <var:y> := <var:y> * <var:F> { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + } | and \verb | { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + } <var:y> := <var:y> * <var:F> { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + } | . Focusing on the following statements in the series of instructions , \verb | { <var:F> = <var:p> } <var:y> := <nat:3> { <var:F> = <var:p> \land <var:y> = <nat:3> } | and \verb | { <var:F> = <var:p> \land <var:y> = <nat:3> } <var:y> := <nat:2> + <var:y> * <var:F> { <var:F> = <var:p> \land <var:y> = <nat:3> * <var:p> + <nat:2> } | . This is shown to be logically sound through the scheme defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:y> := <nat:3> ; <var:y> := <nat:2> + <var:y> * <var:F> ; <var:y> := <nat:2> + <var:y> * <var:F> ; <var:y> := <nat:4> + <var:y> * <var:F> ; <var:y> := <nat:1> + <var:y> * <var:F> ; <var:y> := <var:y> * <var:F> ; <var:y> := <nat:4> + <var:y> * <var:F> ; <var:y> := <var:y> * <var:F> ; <var:y> := <var:y> * <var:F> ; <var:y> := <var:y> * <var:F> ; <var:y> := <nat:4> + <var:y> * <var:F> ; <var:y> := <nat:4> + <var:y> * <var:F> ; <var:y> := <nat:3> + <var:y> * <var:F> ; <var:y> := <nat:3> + <var:y> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:F> = <var:p> }} <def:poly> {{ <var:y> = <nat:3> * <var:p> ^ <nat:13> + <nat:2> * <var:p> ^ <nat:12> + <nat:2> * <var:p> ^ <nat:11> + <nat:4> * <var:p> ^ <nat:10> + <nat:1> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:4> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:11> + <nat:2> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:5> + <nat:4> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:12> + <nat:2> * <var:p> ^ <nat:11> + <nat:2> * <var:p> ^ <nat:10> + <nat:4> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:y> = <nat:3> * <var:p> ^ <nat:13> + <nat:2> * <var:p> ^ <nat:12> + <nat:2> * <var:p> ^ <nat:11> + <nat:4> * <var:p> ^ <nat:10> + <nat:1> * <var:p> ^ <nat:9> + <nat:4> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 