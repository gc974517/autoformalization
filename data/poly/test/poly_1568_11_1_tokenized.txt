\begin{document} \begin{theorem} Take a set of instructions as follows \begin{verbatim} <var:q1> := <var:Z> ; <var:q2> := <var:q1> * <var:Z> ; <var:q3> := <var:q2> * <var:Z> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:2> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:5> ; <var:I> := <var:q3> <var:I> := <var:I> + <var:q2> <var:I> := <var:I> + <var:q1> <var:I> := <var:I> + <var:q0> \end{verbatim} Assume that we have $ <var:Z> = <var:H> $ prior to the execution of the code segment it must be that we have $ <var:I> = <nat:5> \times <var:H> ^ <nat:3> + <nat:7> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:3> $ when series of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:H> \} \\ <var:q1> := <var:Z> ; \\ \{ <var:Z> = <var:H> \land <var:q1> = <var:H> \} \\ <var:q2> := <var:q1> * <var:Z> ; \\ \{ <var:Z> = <var:H> \land <var:q1> = <var:H> \land <var:q2> = <var:H> ^ <nat:2> \} \\ <var:q3> := <var:q2> * <var:Z> ; \\ \{ <var:Z> = <var:H> \land <var:q1> = <var:H> \land <var:q2> = <var:H> ^ <nat:2> \land <var:q3> = <var:H> ^ <nat:3> \} \\ <var:q0> := <nat:3> ; \\ \{ <var:Z> = <var:H> \land <var:q1> = <var:H> \land <var:q2> = <var:H> ^ <nat:2> \land <var:q3> = <var:H> ^ <nat:3> \land <var:q0> = <nat:3> \} \\ <var:q1> := <var:q1> * <nat:2> ; \\ \{ <var:Z> = <var:H> \land <var:q1> = <nat:2> * <var:H> \land <var:q2> = <var:H> ^ <nat:2> \land <var:q3> = <var:H> ^ <nat:3> \land <var:q0> = <nat:3> \} \\ <var:q2> := <var:q2> * <nat:7> ; \\ \{ <var:Z> = <var:H> \land <var:q1> = <nat:2> * <var:H> \land <var:q2> = <nat:7> * <var:H> ^ <nat:2> \land <var:q3> = <var:H> ^ <nat:3> \land <var:q0> = <nat:3> \} \\ <var:q3> := <var:q3> * <nat:5> ; \\ \{ <var:Z> = <var:H> \land <var:q1> = <nat:2> * <var:H> \land <var:q2> = <nat:7> * <var:H> ^ <nat:2> \land <var:q3> = <nat:5> * <var:H> ^ <nat:3> \land <var:q0> = <nat:3> \} \\ <var:I> := <var:q3> \\ \{ <var:Z> = <var:H> \land <var:q1> = <nat:2> * <var:H> \land <var:q2> = <nat:7> * <var:H> ^ <nat:2> \land <var:q0> = <nat:3> \land <var:I> = <nat:5> * <var:H> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:q2> \\ \{ <var:Z> = <var:H> \land <var:q1> = <nat:2> * <var:H> \land <var:q0> = <nat:3> \land <var:I> = <nat:5> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:q1> \\ \{ <var:Z> = <var:H> \land <var:q0> = <nat:3> \land <var:I> = <nat:5> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:2> * <var:H> \} \\ <var:I> := <var:I> + <var:q0> \\ \{ <var:Z> = <var:H> \land <var:I> = <nat:5> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> \} \end{eqnarray} Using usual Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Z> = <var:H> }} <var:q1> := <var:Z> ; <var:q2> := <var:q1> * <var:Z> ; <var:q3> := <var:q2> * <var:Z> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:2> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:5> ; <var:I> := <var:q3> <var:I> := <var:I> + <var:q2> <var:I> := <var:I> + <var:q1> <var:I> := <var:I> + <var:q0> {{ <var:I> = <nat:5> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:q1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:q1> = <var:H> /\ <var:q2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:q1> = <var:H> /\ <var:q2> = <var:H> ^ <nat:2> /\ <var:q3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:q1> = <var:H> /\ <var:q2> = <var:H> ^ <nat:2> /\ <var:q3> = <var:H> ^ <nat:3> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:q1> = <nat:2> * <var:H> /\ <var:q2> = <var:H> ^ <nat:2> /\ <var:q3> = <var:H> ^ <nat:3> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:q1> = <nat:2> * <var:H> /\ <var:q2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:q3> = <var:H> ^ <nat:3> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:q1> = <nat:2> * <var:H> /\ <var:q2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:q3> = <nat:5> * <var:H> ^ <nat:3> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:q1> = <nat:2> * <var:H> /\ <var:q2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:q0> = <nat:3> /\ <var:I> = <nat:5> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:q1> = <nat:2> * <var:H> /\ <var:q0> = <nat:3> /\ <var:I> = <nat:5> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:q0> = <nat:3> /\ <var:I> = <nat:5> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:H> /\ <var:I> = <nat:5> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 