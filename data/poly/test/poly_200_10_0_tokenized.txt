\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:4> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:l> ; <var:S3> := <nat:1> ; <var:S3> := <var:S3> * <var:l> ; <var:S3> := <var:S3> * <var:l> ; <var:S3> := <var:S3> * <var:l> ; <var:c> := <var:S3> ; <var:c> := <var:c> + <var:S1> ; <var:c> := <var:c> + <var:S0> \end{verbatim} Allow ( with some natural numbers $ <var:o> $ ) it to hold that $ <var:l> = <var:o> $ ahead of the execution of our list of instructions it must be that we see $ <var:c> = <nat:1> \times <var:o> ^ <nat:3> + <nat:1> \times <var:o> + <nat:4> $ once list of instructions terminates . \end{theorem} \begin{proof} The way to prove correctness for our list of instructions is done using usual Hoare techniques . Observing the proceeding bit of code contained in the series of commands , we have the binding code \verb | <var:S0> := <nat:4> ; | . This transfers the precondition $ \{ <var:l> = <var:o> \} $ toward the condition $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \} $ . Stepping forward , we see the variable update code \verb | <var:S1> := <nat:1> ; | . This redefines $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \} $ into $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \} $ . Going to the next step , we see the binding line \verb | <var:S1> := <var:S1> * <var:l> ; | . This moves $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \} $ toward the condition $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:o> \} $ . This is known to be sound through the assignment rule from usual Hoare reasoning . Immediately following , we see the binding command \verb | <var:S3> := <nat:1> ; | . This transfers $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:o> \} $ into the condition $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:o> \land <var:S3> = <nat:1> \} $ . Going forward , we see the variable assignmet statement \verb | <var:S3> := <var:S3> * <var:l> ; | . This statement moves the precondition $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:o> \land <var:S3> = <nat:1> \} $ into the postcondition $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:o> \land <var:S3> = <nat:1> \cdot <var:o> \} $ . This is shown through the assignment inference rule obtained from Hoare reasoning . Paying attention to the proceeding bit of code found in our program , we have the environment update line letting $ <var:S3> * <var:l> $ as $ <var:S3>$ . This code forwards the precondition $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:o> \land <var:S3> = <nat:1> \cdot <var:o> \} $ into the condition $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:o> \land <var:S3> = <nat:1> \cdot <var:o> ^ <nat:2> \} $ . This is given by the assignment inference rule given by typical Hoare logic . Moving onward , we have the assignment code yielding $ <var:S3> * <var:l> $ as $ <var:S3>$ . This code redefines the condition $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:o> \land <var:S3> = <nat:1> \cdot <var:o> ^ <nat:2> \} $ toward the condition $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:o> \land <var:S3> = <nat:1> \cdot <var:o> ^ <nat:3> \} $ . Immediately after , the variable assignmet statement assigning $ <var:S3> $ to $ <var:c>$ . This code advances the condition $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:o> \land <var:S3> = <nat:1> \cdot <var:o> ^ <nat:3> \} $ into the postcondition $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:o> \land <var:c> = <nat:1> \cdot <var:o> ^ <nat:3> \} $ . This is deduced through the assignment inference rule defined in usual Hoare reasoning . Moving on , we see the assignment statement binding $ <var:c> + <var:S1> $ to $ <var:c>$ . This line forwards the condition $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:o> \land <var:c> = <nat:1> \cdot <var:o> ^ <nat:3> \} $ to the postcondition $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:c> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> \} $ . This is sound by the assignment scheme given in usual Hoare reasoning . Paying attention to the subsequent piece of code contained in the series of instructions , the statement \verb | <var:c> := <var:c> + <var:S0> | . This moves $ \{ <var:l> = <var:o> \land <var:S0> = <nat:4> \land <var:c> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> \} $ into $ \{ <var:l> = <var:o> \land <var:c> = <nat:1> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:l> = <var:o> }} <var:S0> := <nat:4> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:l> ; <var:S3> := <nat:1> ; <var:S3> := <var:S3> * <var:l> ; <var:S3> := <var:S3> * <var:l> ; <var:S3> := <var:S3> * <var:l> ; <var:c> := <var:S3> ; <var:c> := <var:c> + <var:S1> ; <var:c> := <var:c> + <var:S0> {{ <var:c> = <nat:1> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:o> /\ <var:S3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:o> /\ <var:S3> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:o> /\ <var:S3> = <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:o> /\ <var:S3> = <nat:1> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:o> /\ <var:c> = <nat:1> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:S0> = <nat:4> /\ <var:c> = <nat:1> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:o> /\ <var:c> = <nat:1> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 