\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:o> := <nat:2> ; <var:o> := <var:o> * <var:k> ; <var:o> := <var:o> * <var:k> ; <var:o> := <nat:4> + <var:o> * <var:k> ; <var:o> := <nat:3> + <var:o> * <var:k> ; <var:o> := <nat:2> + <var:o> * <var:k> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> in \emph{Imp} . Given that $ <var:k> = <var:l> $ ( for some $ <var:l> \in \mathbb{Z}^+ $ ) before executing the list of commands then we have $ <var:o> = <nat:2> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:3> \cdot <var:l> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of this list of commands is shown by usual Hoare techniques . Stepping through , we see the binding command binding $ <nat:2> $ toward $ <var:o>$ . This statement takes $ \{ <var:k> = <var:l> \} $ to the condition $ \{ <var:k> = <var:l> \land <var:o> = <nat:2> \} $ . This is shown by the assignment rule obtained from Hoare logic . Advancing to the next step , the environment update line yielding $ <var:o> * <var:k> $ into $ <var:o>$ . This forwards the precondition $ \{ <var:k> = <var:l> \land <var:o> = <nat:2> \} $ to the condition $ \{ <var:k> = <var:l> \land <var:o> = <nat:2> \times <var:l> + \} $ . Immediately after , we have the statement \verb | <var:o> := <var:o> * <var:k> ; | . This command redefines $ \{ <var:k> = <var:l> \land <var:o> = <nat:2> \times <var:l> + \} $ into the condition $ \{ <var:k> = <var:l> \land <var:o> = <nat:2> \times <var:l> ^ <nat:2> + \} $ . This is guaranteed through the assignment law given in standard Hoare reasoning . Going forward , the binding statement \verb | <var:o> := <nat:4> + <var:o> * <var:k> ; | . This takes $ \{ <var:k> = <var:l> \land <var:o> = <nat:2> \times <var:l> ^ <nat:2> + \} $ into the postcondition $ \{ <var:k> = <var:l> \land <var:o> = <nat:2> \times <var:l> ^ <nat:3> + <nat:4> \} $ . This is rigorously given using the assignment law in typical Hoare techniques . Stepping through , we have the assignment statement binding $ <nat:3> + <var:o> * <var:k> $ into $ <var:o>$ . This command redefines the condition $ \{ <var:k> = <var:l> \land <var:o> = <nat:2> \times <var:l> ^ <nat:3> + <nat:4> \} $ toward the postcondition $ \{ <var:k> = <var:l> \land <var:o> = <nat:2> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> + <nat:3> \} $ . This is sound using the assignment inference rule of Hoare logic . Observing the next command contained in our series of instructions , the binding line defining $ <nat:2> + <var:o> * <var:k$ into $ <var:o>$ . This statement takes the precondition $ \{ <var:k> = <var:l> \land <var:o> = <nat:2> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> + <nat:3> \} $ toward the condition $ \{ <var:k> = <var:l> \land <var:o> = <nat:2> \times <var:l> ^ <nat:5> + <nat:4> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:2> ; <var:o> := <var:o> * <var:k> ; <var:o> := <var:o> * <var:k> ; <var:o> := <nat:4> + <var:o> * <var:k> ; <var:o> := <nat:3> + <var:o> * <var:k> ; <var:o> := <nat:2> + <var:o> * <var:k> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:k> = <var:l> }} <def:poly> {{ <var:o> = <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:o> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:o> = <nat:2> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:o> = <nat:2> * <var:l> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:o> = <nat:2> * <var:l> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:o> = <nat:2> * <var:l> ^ <nat:4> + <nat:4> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:o> = <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 