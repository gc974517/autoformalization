\begin{document} \begin{theorem} Define a list of commands as \begin{verbatim} <var:X> := <nat:3> ; <var:X> := <nat:4> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> ; <var:X> := <nat:3> + <var:X> * <var:J> ; <var:X> := <nat:3> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> ; <var:X> := <nat:1> + <var:X> * <var:J> ; <var:X> := <var:X> * <var:J> ; <var:X> := <nat:3> + <var:X> * <var:J> ; <var:X> := <nat:4> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> \end{verbatim} Allow it to be that $ <var:J> = <var:H> $ ( given all natural numbers $ <var:H> $ ) before executing our set of commands , it follows that we see $ <var:X> = <nat:3> \cdot <var:H> ^ <nat:13> + <nat:4> \cdot <var:H> ^ <nat:12> + <nat:2> \cdot <var:H> ^ <nat:11> + <nat:3> \cdot <var:H> ^ <nat:10> + <nat:3> \cdot <var:H> ^ <nat:9> + <nat:2> \cdot <var:H> ^ <nat:8> + <nat:2> \cdot <var:H> ^ <nat:7> + <nat:2> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:1> \cdot <var:H> ^ <nat:4> + <nat:3> \cdot <var:H> ^ <nat:2> + <nat:4> \cdot <var:H> + <nat:2> $ once code terminates . \end{theorem} \begin{proof} The flow of logic for the program can be demonstrated using typical Hoare logic . After , the assignment command defining $ <nat:3> $ to $ <var:X>$ . This takes $ \{ <var:J> = <var:H> \} $ toward the condition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \} $ . Immediately after , we have the binding code giving $ <nat:4> + <var:X> * <var:J> $ into $ <var:X>$ . This transfers $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \} $ to the postcondition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> + <nat:4> \} $ . This is deduced with the assignment rule defined by usual Hoare logic . Honing in on the upcoming bit of code contained in our code segment , the environment update line binding $ <nat:2> + <var:X> * <var:J> $ to $ <var:X>$ . This statement moves $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> + <nat:4> \} $ toward the postcondition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:2> \} $ . Focusing on the subsequent bit of code found in our series of commands , we see the variable assignmet line \verb | <var:X> := <nat:3> + <var:X> * <var:J> ; | . This code takes the precondition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:2> \} $ toward $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:3> + <nat:4> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:3> \} $ . This is known to be sound through the assignment scheme defined by standard Hoare techniques . Now , the variable binding command \verb | <var:X> := <nat:3> + <var:X> * <var:J> ; | . This statement takes $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:3> + <nat:4> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:3> \} $ as the postcondition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:4> + <nat:4> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:3> \} $ . This is guaranteed using the assignment inference rule given by standard Hoare logic . Moving on to the next step , we have the assignment line \verb | <var:X> := <nat:2> + <var:X> * <var:J> ; | . This redefines $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:4> + <nat:4> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:3> \} $ into the condition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:5> + <nat:4> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:2> \} $ . This is ensured with the assignment rule given by typical Hoare techniques . Taking a look at the following bit of code contained in our program , the statement \verb | <var:X> := <nat:2> + <var:X> * <var:J> ; | . This command transfers the precondition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:5> + <nat:4> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:2> \} $ as the postcondition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:6> + <nat:4> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:2> \} $ . Honing in on the upcoming line of code found in the set of commands , the variable assignmet statement \verb | <var:X> := <nat:2> + <var:X> * <var:J> ; | . This statement redefines $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:6> + <nat:4> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:2> \} $ into the condition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:7> + <nat:4> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:2> \} $ . This is ensured using the assignment rule in typical Hoare reasoning . Immediately after , we have the assignment code \verb | <var:X> := <nat:2> + <var:X> * <var:J> ; | . This line takes $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:7> + <nat:4> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:2> \} $ as $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:8> + <nat:4> \times <var:H> ^ <nat:7> + <nat:2> \times <var:H> ^ <nat:6> + <nat:3> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:2> \} $ . Shifting focus toward the proceeding step seen in the set of commands , we have the assignment statement \verb | <var:X> := <nat:1> + <var:X> * <var:J> ; | . This advances the precondition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:8> + <nat:4> \times <var:H> ^ <nat:7> + <nat:2> \times <var:H> ^ <nat:6> + <nat:3> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:2> \} $ to the condition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:9> + <nat:4> \times <var:H> ^ <nat:8> + <nat:2> \times <var:H> ^ <nat:7> + <nat:3> \times <var:H> ^ <nat:6> + <nat:3> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:1> \} $ . This is ensured through the assignment rule from standard Hoare reasoning . Focusing on the next line seen in the code , the assignment line binding $ <var:X> * <var:J> $ toward $ <var:X>$ . This transfers $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:9> + <nat:4> \times <var:H> ^ <nat:8> + <nat:2> \times <var:H> ^ <nat:7> + <nat:3> \times <var:H> ^ <nat:6> + <nat:3> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:1> \} $ into $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:10> + <nat:4> \times <var:H> ^ <nat:9> + <nat:2> \times <var:H> ^ <nat:8> + <nat:3> \times <var:H> ^ <nat:7> + <nat:3> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> + \} $ . Moving on , the binding code defining $ <nat:3> + <var:X> * <var:J> $ to $ <var:X>$ . This code moves $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:10> + <nat:4> \times <var:H> ^ <nat:9> + <nat:2> \times <var:H> ^ <nat:8> + <nat:3> \times <var:H> ^ <nat:7> + <nat:3> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> + \} $ as $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:11> + <nat:4> \times <var:H> ^ <nat:10> + <nat:2> \times <var:H> ^ <nat:9> + <nat:3> \times <var:H> ^ <nat:8> + <nat:3> \times <var:H> ^ <nat:7> + <nat:2> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> + <nat:3> \} $ . This is deduced through the assignment law of typical Hoare techniques . Paying attention to the proceeding bit of code contained in our set of instructions , we have the variable binding statement \verb | <var:X> := <nat:4> + <var:X> * <var:J> ; | . This moves the condition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:11> + <nat:4> \times <var:H> ^ <nat:10> + <nat:2> \times <var:H> ^ <nat:9> + <nat:3> \times <var:H> ^ <nat:8> + <nat:3> \times <var:H> ^ <nat:7> + <nat:2> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> + <nat:3> \} $ toward the condition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:12> + <nat:4> \times <var:H> ^ <nat:11> + <nat:2> \times <var:H> ^ <nat:10> + <nat:3> \times <var:H> ^ <nat:9> + <nat:3> \times <var:H> ^ <nat:8> + <nat:2> \times <var:H> ^ <nat:7> + <nat:2> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:1> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> + <nat:4> \} $ . Keeping momentum , we see the binding command giving $ <nat:2> + <var:X> * <var:J$ toward $ <var:X>$ . This moves the precondition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:12> + <nat:4> \times <var:H> ^ <nat:11> + <nat:2> \times <var:H> ^ <nat:10> + <nat:3> \times <var:H> ^ <nat:9> + <nat:3> \times <var:H> ^ <nat:8> + <nat:2> \times <var:H> ^ <nat:7> + <nat:2> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:1> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> + <nat:4> \} $ as the condition $ \{ <var:J> = <var:H> \land <var:X> = <nat:3> \times <var:H> ^ <nat:13> + <nat:4> \times <var:H> ^ <nat:12> + <nat:2> \times <var:H> ^ <nat:11> + <nat:3> \times <var:H> ^ <nat:10> + <nat:3> \times <var:H> ^ <nat:9> + <nat:2> \times <var:H> ^ <nat:8> + <nat:2> \times <var:H> ^ <nat:7> + <nat:2> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:1> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:J> = <var:H> }} <var:X> := <nat:3> ; <var:X> := <nat:4> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> ; <var:X> := <nat:3> + <var:X> * <var:J> ; <var:X> := <nat:3> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> ; <var:X> := <nat:1> + <var:X> * <var:J> ; <var:X> := <var:X> * <var:J> ; <var:X> := <nat:3> + <var:X> * <var:J> ; <var:X> := <nat:4> + <var:X> * <var:J> ; <var:X> := <nat:2> + <var:X> * <var:J> {{ <var:X> = <nat:3> * <var:H> ^ <nat:13> + <nat:4> * <var:H> ^ <nat:12> + <nat:2> * <var:H> ^ <nat:11> + <nat:3> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:9> + <nat:2> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> * <var:H> ^ <nat:10> + <nat:4> * <var:H> ^ <nat:9> + <nat:2> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> * <var:H> ^ <nat:11> + <nat:4> * <var:H> ^ <nat:10> + <nat:2> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> * <var:H> ^ <nat:12> + <nat:4> * <var:H> ^ <nat:11> + <nat:2> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:H> /\ <var:X> = <nat:3> * <var:H> ^ <nat:13> + <nat:4> * <var:H> ^ <nat:12> + <nat:2> * <var:H> ^ <nat:11> + <nat:3> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:9> + <nat:2> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 