\begin{document} \begin{theorem} Define the following set of instructions as follows \begin{verbatim} <var:P1> := <var:H> ; <var:P2> := <var:P1> * <var:H> ; <var:P3> := <var:P2> * <var:H> ; <var:P4> := <var:P3> * <var:H> ; <var:P0> := <nat:7> ; <var:P1> := <var:P1> * <nat:2> ; <var:P2> := <var:P2> * <nat:4> ; <var:P3> := <var:P3> * <nat:6> ; <var:P4> := <var:P4> * <nat:2> ; <var:i> := <var:P4> <var:i> := <var:i> + <var:P3> <var:i> := <var:i> + <var:P2> <var:i> := <var:i> + <var:P1> <var:i> := <var:i> + <var:P0> \end{verbatim} Allow , given all positive coefficients $ <var:Z> $ , $ <var:H> = <var:Z> $ prior to interpreting this set of instructions , it follows that we see $ <var:i> = <nat:2> \times <var:Z> ^ <nat:4> + <nat:6> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:Z> \} \\ <var:P1> := <var:H> ; \\ \{ <var:H> = <var:Z> \land <var:P1> = <var:Z> \} \\ <var:P2> := <var:P1> * <var:H> ; \\ \{ <var:H> = <var:Z> \land <var:P1> = <var:Z> \land <var:P2> = <var:Z> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:H> ; \\ \{ <var:H> = <var:Z> \land <var:P1> = <var:Z> \land <var:P2> = <var:Z> ^ <nat:2> \land <var:P3> = <var:Z> ^ <nat:3> \} \\ <var:P4> := <var:P3> * <var:H> ; \\ \{ <var:H> = <var:Z> \land <var:P1> = <var:Z> \land <var:P2> = <var:Z> ^ <nat:2> \land <var:P3> = <var:Z> ^ <nat:3> \land <var:P4> = <var:Z> ^ <nat:4> \} \\ <var:P0> := <nat:7> ; \\ \{ <var:H> = <var:Z> \land <var:P1> = <var:Z> \land <var:P2> = <var:Z> ^ <nat:2> \land <var:P3> = <var:Z> ^ <nat:3> \land <var:P4> = <var:Z> ^ <nat:4> \land <var:P0> = <nat:7> \} \\ <var:P1> := <var:P1> * <nat:2> ; \\ \{ <var:H> = <var:Z> \land <var:P1> = <nat:2> \cdot <var:Z> \land <var:P2> = <var:Z> ^ <nat:2> \land <var:P3> = <var:Z> ^ <nat:3> \land <var:P4> = <var:Z> ^ <nat:4> \land <var:P0> = <nat:7> \} \\ <var:P2> := <var:P2> * <nat:4> ; \\ \{ <var:H> = <var:Z> \land <var:P1> = <nat:2> \cdot <var:Z> \land <var:P2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:P3> = <var:Z> ^ <nat:3> \land <var:P4> = <var:Z> ^ <nat:4> \land <var:P0> = <nat:7> \} \\ <var:P3> := <var:P3> * <nat:6> ; \\ \{ <var:H> = <var:Z> \land <var:P1> = <nat:2> \cdot <var:Z> \land <var:P2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:P3> = <nat:6> \cdot <var:Z> ^ <nat:3> \land <var:P4> = <var:Z> ^ <nat:4> \land <var:P0> = <nat:7> \} \\ <var:P4> := <var:P4> * <nat:2> ; \\ \{ <var:H> = <var:Z> \land <var:P1> = <nat:2> \cdot <var:Z> \land <var:P2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:P3> = <nat:6> \cdot <var:Z> ^ <nat:3> \land <var:P4> = <nat:2> \cdot <var:Z> ^ <nat:4> \land <var:P0> = <nat:7> \} \\ <var:i> := <var:P4> \\ \{ <var:H> = <var:Z> \land <var:P1> = <nat:2> \cdot <var:Z> \land <var:P2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:P3> = <nat:6> \cdot <var:Z> ^ <nat:3> \land <var:P0> = <nat:7> \land <var:i> = <nat:2> \cdot <var:Z> ^ <nat:4> \} \\ <var:i> := <var:i> + <var:P3> \\ \{ <var:H> = <var:Z> \land <var:P1> = <nat:2> \cdot <var:Z> \land <var:P2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:P0> = <nat:7> \land <var:i> = <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:6> \cdot <var:Z> ^ <nat:3> \} \\ <var:i> := <var:i> + <var:P2> \\ \{ <var:H> = <var:Z> \land <var:P1> = <nat:2> \cdot <var:Z> \land <var:P0> = <nat:7> \land <var:i> = <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:6> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:P1> \\ \{ <var:H> = <var:Z> \land <var:P0> = <nat:7> \land <var:i> = <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:6> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> \} \\ <var:i> := <var:i> + <var:P0> \\ \{ <var:H> = <var:Z> \land <var:i> = <nat:2> \cdot <var:Z> ^ <nat:4> + <nat:6> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:7> \} \end{eqnarray} The application of Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <var:P4> : string := " <var:P4> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:H> = <var:Z> }} <var:P1> := <var:H> ; <var:P2> := <var:P1> * <var:H> ; <var:P3> := <var:P2> * <var:H> ; <var:P4> := <var:P3> * <var:H> ; <var:P0> := <nat:7> ; <var:P1> := <var:P1> * <nat:2> ; <var:P2> := <var:P2> * <nat:4> ; <var:P3> := <var:P3> * <nat:6> ; <var:P4> := <var:P4> * <nat:2> ; <var:i> := <var:P4> <var:i> := <var:i> + <var:P3> <var:i> := <var:i> + <var:P2> <var:i> := <var:i> + <var:P1> <var:i> := <var:i> + <var:P0> {{ <var:i> = <nat:2> * <var:Z> ^ <nat:4> + <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:P1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:P1> = <var:Z> /\ <var:P2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:P1> = <var:Z> /\ <var:P2> = <var:Z> ^ <nat:2> /\ <var:P3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:P1> = <var:Z> /\ <var:P2> = <var:Z> ^ <nat:2> /\ <var:P3> = <var:Z> ^ <nat:3> /\ <var:P4> = <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:P1> = <var:Z> /\ <var:P2> = <var:Z> ^ <nat:2> /\ <var:P3> = <var:Z> ^ <nat:3> /\ <var:P4> = <var:Z> ^ <nat:4> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:P1> = <nat:2> * <var:Z> /\ <var:P2> = <var:Z> ^ <nat:2> /\ <var:P3> = <var:Z> ^ <nat:3> /\ <var:P4> = <var:Z> ^ <nat:4> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:P1> = <nat:2> * <var:Z> /\ <var:P2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:P3> = <var:Z> ^ <nat:3> /\ <var:P4> = <var:Z> ^ <nat:4> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:P1> = <nat:2> * <var:Z> /\ <var:P2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:P3> = <nat:6> * <var:Z> ^ <nat:3> /\ <var:P4> = <var:Z> ^ <nat:4> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:P1> = <nat:2> * <var:Z> /\ <var:P2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:P3> = <nat:6> * <var:Z> ^ <nat:3> /\ <var:P4> = <nat:2> * <var:Z> ^ <nat:4> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:P1> = <nat:2> * <var:Z> /\ <var:P2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:P3> = <nat:6> * <var:Z> ^ <nat:3> /\ <var:P0> = <nat:7> /\ <var:i> = <nat:2> * <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:P1> = <nat:2> * <var:Z> /\ <var:P2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:P0> = <nat:7> /\ <var:i> = <nat:2> * <var:Z> ^ <nat:4> + <nat:6> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:P1> = <nat:2> * <var:Z> /\ <var:P0> = <nat:7> /\ <var:i> = <nat:2> * <var:Z> ^ <nat:4> + <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:P0> = <nat:7> /\ <var:i> = <nat:2> * <var:Z> ^ <nat:4> + <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:i> = <nat:2> * <var:Z> ^ <nat:4> + <nat:6> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 