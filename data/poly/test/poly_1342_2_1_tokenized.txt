\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:l0> := <nat:3> ; <var:A> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> . Assuming --- given some positive coefficients $ <var:v> $ --- $ <var:t> = <var:v> $ prior to the execution of our list of commands , it follows that we have $ <var:A> = <nat:3> $ . \end{theorem} \begin{proof} The application of Hoare techniques returns : \begin{eqnarray} \{ <var:t> = <var:v> \} \\ <var:l0> := <nat:3> ; \\ \{ <var:t> = <var:v> \land <var:l0> = <nat:3> \} \\ <var:A> := <var:l0> \\ \{ <var:t> = <var:v> \land <var:A> = <nat:3> \} \end{eqnarray} Thus , our code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:3> ; <var:A> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:t> = <var:v> }} <def:poly> {{ <var:A> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:A> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 