\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:z1> := <var:t> ; <var:z2> := <var:z1> * <var:t> ; <var:z0> := <nat:2> ; <var:z1> := <var:z1> * <nat:4> ; <var:z2> := <var:z2> * <nat:2> ; <var:q> := <var:z2> <var:q> := <var:q> + <var:z1> <var:q> := <var:q> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allowing , for natural coefficients $ <var:h> $ , $ <var:t> = <var:h> $ prior to running the segment of code it holds that we see $ <var:q> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:h> \} \\ <var:z1> := <var:t> ; \\ \{ <var:t> = <var:h> \land <var:z1> = <var:h> \} \\ <var:z2> := <var:z1> * <var:t> ; \\ \{ <var:t> = <var:h> \land <var:z1> = <var:h> \land <var:z2> = <var:h> ^ <nat:2> \} \\ <var:z0> := <nat:2> ; \\ \{ <var:t> = <var:h> \land <var:z1> = <var:h> \land <var:z2> = <var:h> ^ <nat:2> \land <var:z0> = <nat:2> \} \\ <var:z1> := <var:z1> * <nat:4> ; \\ \{ <var:t> = <var:h> \land <var:z1> = <nat:4> \cdot <var:h> \land <var:z2> = <var:h> ^ <nat:2> \land <var:z0> = <nat:2> \} \\ <var:z2> := <var:z2> * <nat:2> ; \\ \{ <var:t> = <var:h> \land <var:z1> = <nat:4> \cdot <var:h> \land <var:z2> = <nat:2> \cdot <var:h> ^ <nat:2> \land <var:z0> = <nat:2> \} \\ <var:q> := <var:z2> \\ \{ <var:t> = <var:h> \land <var:z1> = <nat:4> \cdot <var:h> \land <var:z0> = <nat:2> \land <var:q> = <nat:2> \cdot <var:h> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:z1> \\ \{ <var:t> = <var:h> \land <var:z0> = <nat:2> \land <var:q> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> \} \\ <var:q> := <var:q> + <var:z0> \\ \{ <var:t> = <var:h> \land <var:q> = <nat:2> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:2> \} \end{eqnarray} Applying usual Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z1> := <var:t> ; <var:z2> := <var:z1> * <var:t> ; <var:z0> := <nat:2> ; <var:z1> := <var:z1> * <nat:4> ; <var:z2> := <var:z2> * <nat:2> ; <var:q> := <var:z2> <var:q> := <var:q> + <var:z1> <var:q> := <var:q> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:t> = <var:h> }} <def:poly> {{ <var:q> = <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:z1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:z1> = <var:h> /\ <var:z2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:z1> = <var:h> /\ <var:z2> = <var:h> ^ <nat:2> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:z1> = <nat:4> * <var:h> /\ <var:z2> = <var:h> ^ <nat:2> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:z1> = <nat:4> * <var:h> /\ <var:z2> = <nat:2> * <var:h> ^ <nat:2> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:z1> = <nat:4> * <var:h> /\ <var:z0> = <nat:2> /\ <var:q> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:z0> = <nat:2> /\ <var:q> = <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:h> /\ <var:q> = <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 