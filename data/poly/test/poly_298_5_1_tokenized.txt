\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:G1> := <var:w> ; <var:G0> := <nat:9> ; <var:G1> := <var:G1> * <nat:3> ; <var:b> := <var:G1> <var:b> := <var:b> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:w> = <var:p> $ prior to running this program , it follows that we have $ <var:b> = <nat:3> \times <var:p> + <nat:9> $ . \end{theorem} \begin{proof} Let this decorated list of commands . \begin{eqnarray} \{ <var:w> = <var:p> \} \\ <var:G1> := <var:w> ; \\ \{ <var:w> = <var:p> \land <var:G1> = <var:p> \} \\ <var:G0> := <nat:9> ; \\ \{ <var:w> = <var:p> \land <var:G1> = <var:p> \land <var:G0> = <nat:9> \} \\ <var:G1> := <var:G1> * <nat:3> ; \\ \{ <var:w> = <var:p> \land <var:G1> = <nat:3> \cdot <var:p> \land <var:G0> = <nat:9> \} \\ <var:b> := <var:G1> \\ \{ <var:w> = <var:p> \land <var:G0> = <nat:9> \land <var:b> = <nat:3> \cdot <var:p> \} \\ <var:b> := <var:b> + <var:G0> \\ \{ <var:w> = <var:p> \land <var:b> = <nat:3> \cdot <var:p> + <nat:9> \} \end{eqnarray} Applying usual Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G1> := <var:w> ; <var:G0> := <nat:9> ; <var:G1> := <var:G1> * <nat:3> ; <var:b> := <var:G1> <var:b> := <var:b> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:w> = <var:p> }} <def:poly> {{ <var:b> = <nat:3> * <var:p> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:p> /\ <var:G1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:p> /\ <var:G1> = <var:p> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:p> /\ <var:G1> = <nat:3> * <var:p> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:p> /\ <var:G0> = <nat:9> /\ <var:b> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:p> /\ <var:b> = <nat:3> * <var:p> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 