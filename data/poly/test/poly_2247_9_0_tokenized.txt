\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:4> ; <var:d1> := <nat:3> ; <var:d1> := <var:d1> * <var:q> ; <var:d2> := <nat:5> ; <var:d2> := <var:d2> * <var:q> ; <var:d2> := <var:d2> * <var:q> ; <var:J> := <var:d2> ; <var:J> := <var:J> + <var:d1> ; <var:J> := <var:J> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Allow it to hold that $ <var:q> = <var:K> $ before the execution of our segment of code it holds that $ <var:J> = <nat:5> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:4> $ when series of commands has finished executing . \end{theorem} \begin{proof} Using usual Hoare logic results in : \begin{eqnarray} \{ <var:q> = <var:K> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:q> = <var:K> \land <var:d0> = <nat:4> \} \\ <var:d1> := <nat:3> ; \\ \{ <var:q> = <var:K> \land <var:d0> = <nat:4> \land <var:d1> = <nat:3> \} \\ <var:d1> := <var:d1> * <var:q> ; \\ \{ <var:q> = <var:K> \land <var:d0> = <nat:4> \land <var:d1> = <nat:3> \times <var:K> \} \\ <var:d2> := <nat:5> ; \\ \{ <var:q> = <var:K> \land <var:d0> = <nat:4> \land <var:d1> = <nat:3> \times <var:K> \land <var:d2> = <nat:5> \} \\ <var:d2> := <var:d2> * <var:q> ; \\ \{ <var:q> = <var:K> \land <var:d0> = <nat:4> \land <var:d1> = <nat:3> \times <var:K> \land <var:d2> = <nat:5> \times <var:K> \} \\ <var:d2> := <var:d2> * <var:q> ; \\ \{ <var:q> = <var:K> \land <var:d0> = <nat:4> \land <var:d1> = <nat:3> \times <var:K> \land <var:d2> = <nat:5> \times <var:K> ^ <nat:2> \} \\ <var:J> := <var:d2> ; \\ \{ <var:q> = <var:K> \land <var:d0> = <nat:4> \land <var:d1> = <nat:3> \times <var:K> \land <var:J> = <nat:5> \times <var:K> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:d1> ; \\ \{ <var:q> = <var:K> \land <var:d0> = <nat:4> \land <var:J> = <nat:5> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> \} \\ <var:J> := <var:J> + <var:d0> \\ \{ <var:q> = <var:K> \land <var:J> = <nat:5> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + <nat:4> \} \end{eqnarray} Therefore , this segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <def:poly> := <var:d0> := <nat:4> ; <var:d1> := <nat:3> ; <var:d1> := <var:d1> * <var:q> ; <var:d2> := <nat:5> ; <var:d2> := <var:d2> * <var:q> ; <var:d2> := <var:d2> * <var:q> ; <var:J> := <var:d2> ; <var:J> := <var:J> + <var:d1> ; <var:J> := <var:J> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:q> = <var:K> }} <def:poly> {{ <var:J> = <nat:5> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:3> * <var:K> /\ <var:d2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:3> * <var:K> /\ <var:d2> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:3> * <var:K> /\ <var:d2> = <nat:5> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:3> * <var:K> /\ <var:J> = <nat:5> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:d0> = <nat:4> /\ <var:J> = <nat:5> * <var:K> ^ <nat:2> + <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:J> = <nat:5> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 