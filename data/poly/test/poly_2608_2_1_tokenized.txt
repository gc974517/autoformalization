\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f0> := <nat:8> ; <var:j> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Given , for any $ <var:G> \in \mathbb{Z}^+ $ , $ <var:Y> = <var:G> $ ahead of evaluating this list of commands it follows that $ <var:j> = <nat:8> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions can be seen with usual Hoare logic . Advancing to the next step , we see the assignment statement \verb | <var:f0> := <nat:8> ; | . This line takes $ \{ <var:Y> = <var:G> \} $ toward $ \{ <var:Y> = <var:G> \land <var:f0> = <nat:8> \} $ . This is sound by the assignment rule of standard Hoare logic . Moving forward to the next line in the code segment , we have the variable assignmet statement \verb | <var:j> := <var:f0> | . This takes the condition $ \{ <var:Y> = <var:G> \land <var:f0> = <nat:8> \} $ to the postcondition $ \{ <var:Y> = <var:G> \land <var:j> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:8> ; <var:j> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:Y> = <var:G> }} <def:poly> {{ <var:j> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:G> /\ <var:j> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 