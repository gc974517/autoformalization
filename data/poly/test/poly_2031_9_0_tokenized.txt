\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M0> := <nat:9> ; <var:M1> := <nat:5> ; <var:M1> := <var:M1> * <var:t> ; <var:M2> := <nat:9> ; <var:M2> := <var:M2> * <var:t> ; <var:M2> := <var:M2> * <var:t> ; <var:f> := <var:M2> ; <var:f> := <var:f> + <var:M1> ; <var:f> := <var:f> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> in \emph{Imp} . Assume it to hold that $ <var:t> = <var:Z> $ ahead of evaluating our code , then $ <var:f> = <nat:9> \cdot <var:Z> ^ <nat:2> + <nat:5> \cdot <var:Z> + <nat:9> $ . \end{theorem} \begin{proof} We can see that the below decorated list of commands . \begin{eqnarray} \{ <var:t> = <var:Z> \} \\ <var:M0> := <nat:9> ; \\ \{ <var:t> = <var:Z> \land <var:M0> = <nat:9> \} \\ <var:M1> := <nat:5> ; \\ \{ <var:t> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:5> \} \\ <var:M1> := <var:M1> * <var:t> ; \\ \{ <var:t> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:5> \times <var:Z> \} \\ <var:M2> := <nat:9> ; \\ \{ <var:t> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:5> \times <var:Z> \land <var:M2> = <nat:9> \} \\ <var:M2> := <var:M2> * <var:t> ; \\ \{ <var:t> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:5> \times <var:Z> \land <var:M2> = <nat:9> \times <var:Z> \} \\ <var:M2> := <var:M2> * <var:t> ; \\ \{ <var:t> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:5> \times <var:Z> \land <var:M2> = <nat:9> \times <var:Z> ^ <nat:2> \} \\ <var:f> := <var:M2> ; \\ \{ <var:t> = <var:Z> \land <var:M0> = <nat:9> \land <var:M1> = <nat:5> \times <var:Z> \land <var:f> = <nat:9> \times <var:Z> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:M1> ; \\ \{ <var:t> = <var:Z> \land <var:M0> = <nat:9> \land <var:f> = <nat:9> \times <var:Z> ^ <nat:2> + <nat:5> \times <var:Z> \} \\ <var:f> := <var:f> + <var:M0> \\ \{ <var:t> = <var:Z> \land <var:f> = <nat:9> \times <var:Z> ^ <nat:2> + <nat:5> \times <var:Z> + <nat:9> \} \end{eqnarray} Applying standard Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M0> := <nat:9> ; <var:M1> := <nat:5> ; <var:M1> := <var:M1> * <var:t> ; <var:M2> := <nat:9> ; <var:M2> := <var:M2> * <var:t> ; <var:M2> := <var:M2> * <var:t> ; <var:f> := <var:M2> ; <var:f> := <var:f> + <var:M1> ; <var:f> := <var:f> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:t> = <var:Z> }} <def:poly> {{ <var:f> = <nat:9> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:M0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:5> * <var:Z> /\ <var:M2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:5> * <var:Z> /\ <var:M2> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:5> * <var:Z> /\ <var:M2> = <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:M1> = <nat:5> * <var:Z> /\ <var:f> = <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:M0> = <nat:9> /\ <var:f> = <nat:9> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Z> /\ <var:f> = <nat:9> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 