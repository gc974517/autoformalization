\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:2> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:T> ; <var:C2> := <nat:6> ; <var:C2> := <var:C2> * <var:T> ; <var:C2> := <var:C2> * <var:T> ; <var:u> := <var:C2> ; <var:u> := <var:u> + <var:C1> ; <var:u> := <var:u> + <var:C0> \end{verbatim} Assuming $ <var:T> = <var:Y> $ , taking $ <var:Y> \in \mathbb{Z}^+ $ , before the evaluation of this set of instructions , it must be that we have $ <var:u> = <nat:6> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> $ once list of instructions has finished . \end{theorem} \begin{proof} The argument for the program can be seen with typical Hoare reasoning . Immediately following , we have the variable assignmet code assigning $ <nat:2> $ as $ <var:C0>$ . This statement transfers the precondition $ \{ <var:T> = <var:Y> \} $ to the postcondition $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \} $ . Advancing , the variable assignmet command letting $ <nat:2> $ to $ <var:C1>$ . This statement takes $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \} $ as the condition $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \} $ . Moving on to the next statement seen in the series of commands , the variable update statement assigning $ <var:C1> * <var:T> $ into $ <var:C1>$ . This advances $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \} $ into the postcondition $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \cdot <var:Y> \} $ . This is given through the assignment rule in typical Hoare reasoning . Moving on to the following step found in the series of commands , the environment update code \verb | <var:C2> := <nat:6> ; | . This takes the precondition $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \cdot <var:Y> \} $ into $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \cdot <var:Y> \land <var:C2> = <nat:6> \} $ . This is ensured by the assignment inference rule given in usual Hoare reasoning . Considering the upcoming step seen in our program , we have the variable binding code defining $ <var:C2> * <var:T> $ as $ <var:C2>$ . This moves the precondition $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \cdot <var:Y> \land <var:C2> = <nat:6> \} $ to the postcondition $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \cdot <var:Y> \land <var:C2> = <nat:6> \cdot <var:Y> \} $ . Moving on , the command giving $ <var:C2> * <var:T> $ into $ <var:C2>$ . This forwards $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \cdot <var:Y> \land <var:C2> = <nat:6> \cdot <var:Y> \} $ as $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \cdot <var:Y> \land <var:C2> = <nat:6> \cdot <var:Y> ^ <nat:2> \} $ . After , we have the command letting $ <var:C2> $ to $ <var:u>$ . This advances the condition $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \cdot <var:Y> \land <var:C2> = <nat:6> \cdot <var:Y> ^ <nat:2> \} $ as $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \cdot <var:Y> \land <var:u> = <nat:6> \cdot <var:Y> ^ <nat:2> \} $ . Advancing on , we have the assignment statement \verb | <var:u> := <var:u> + <var:C1> ; | . This code advances $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \cdot <var:Y> \land <var:u> = <nat:6> \cdot <var:Y> ^ <nat:2> \} $ toward the postcondition $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:u> = <nat:6> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> \} $ . This is guaranteed through the assignment inference rule in standard Hoare logic . Paying attention to the next line seen in the series of commands , we see the command assigning $ <var:u> + <var:C0$ into $ <var:u>$ . This command redefines the precondition $ \{ <var:T> = <var:Y> \land <var:C0> = <nat:2> \land <var:u> = <nat:6> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> \} $ into the postcondition $ \{ <var:T> = <var:Y> \land <var:u> = <nat:6> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + <nat:2> \} $ . This is given with the assignment inference rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:T> = <var:Y> }} <var:C0> := <nat:2> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:T> ; <var:C2> := <nat:6> ; <var:C2> := <var:C2> * <var:T> ; <var:C2> := <var:C2> * <var:T> ; <var:u> := <var:C2> ; <var:u> := <var:u> + <var:C1> ; <var:u> := <var:u> + <var:C0> {{ <var:u> = <nat:6> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:Y> /\ <var:C2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:Y> /\ <var:C2> = <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:Y> /\ <var:C2> = <nat:6> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:Y> /\ <var:u> = <nat:6> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:C0> = <nat:2> /\ <var:u> = <nat:6> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Y> /\ <var:u> = <nat:6> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 