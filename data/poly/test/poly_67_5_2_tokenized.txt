\begin{document} \begin{theorem} We define a series of commands such that \begin{verbatim} <var:w> := <nat:3> ; <var:w> := <nat:2> + <var:w> * <var:n> ; <var:w> := <nat:2> + <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> ; <var:w> := <nat:3> + <var:w> * <var:n> \end{verbatim} Allowing for any $ <var:q> \in \mathbb{Z}^+ $ it to be that $ <var:n> = <var:q> $ prior to running our set of instructions it holds that we see $ <var:w> = <nat:3> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> $ once series of commands finishes . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions can be accomplished by typical Hoare reasoning . Considering the following step found in the list of instructions , we see the assignment code \verb | <var:w> := <nat:3> ; | . This forwards $ \{ <var:n> = <var:q> \} $ toward $ \{ <var:n> = <var:q> \land <var:w> = <nat:3> \} $ . This is rigorously given using the assignment rule in typical Hoare reasoning . Considering the subsequent line of code in our segment of code , we have the environment update command giving $ <nat:2> + <var:w> * <var:n> $ to $ <var:w>$ . This line forwards $ \{ <var:n> = <var:q> \land <var:w> = <nat:3> \} $ into $ \{ <var:n> = <var:q> \land <var:w> = <nat:3> * <var:q> + <nat:2> \} $ . This is given using the assignment rule of Hoare techniques . Moving forward , we see the statement yielding $ <nat:2> + <var:w> * <var:n> $ as $ <var:w>$ . This redefines $ \{ <var:n> = <var:q> \land <var:w> = <nat:3> * <var:q> + <nat:2> \} $ as the condition $ \{ <var:n> = <var:q> \land <var:w> = <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> \} $ . Taking another step toward the proceeding bit of code contained in our segment of code , we have the binding line \verb | <var:w> := <nat:1> + <var:w> * <var:n> ; | . This takes the precondition $ \{ <var:n> = <var:q> \land <var:w> = <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> \} $ into $ \{ <var:n> = <var:q> \land <var:w> = <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:1> \} $ . This is deduced by the assignment law defined by usual Hoare logic . Focusing on the upcoming line seen in our code , we have the variable assignmet line \verb | <var:w> := <nat:3> + <var:w> * <var:n> | . This code moves $ \{ <var:n> = <var:q> \land <var:w> = <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:1> \} $ to the condition $ \{ <var:n> = <var:q> \land <var:w> = <nat:3> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> \} $ . This is deduced with the assignment rule defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:n> = <var:q> }} <var:w> := <nat:3> ; <var:w> := <nat:2> + <var:w> * <var:n> ; <var:w> := <nat:2> + <var:w> * <var:n> ; <var:w> := <nat:1> + <var:w> * <var:n> ; <var:w> := <nat:3> + <var:w> * <var:n> {{ <var:w> = <nat:3> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:w> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:w> = <nat:3> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:w> = <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:w> = <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:q> /\ <var:w> = <nat:3> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 