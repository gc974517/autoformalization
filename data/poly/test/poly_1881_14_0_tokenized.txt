\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:6> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:r> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:r> ; <var:x2> := <var:x2> * <var:r> ; <var:x3> := <nat:4> ; <var:x3> := <var:x3> * <var:r> ; <var:x3> := <var:x3> * <var:r> ; <var:x3> := <var:x3> * <var:r> ; <var:K> := <var:x3> ; <var:K> := <var:K> + <var:x2> ; <var:K> := <var:K> + <var:x1> ; <var:K> := <var:K> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> in \emph{Imp} . Assume it to be that $ <var:r> = <var:F> $ ahead of interpreting the set of commands it holds that $ <var:K> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:6> $ once segment of code has finished executing . \end{theorem} \begin{proof} Observe that the following decorated segment of code . \begin{eqnarray} \{ <var:r> = <var:F> \} \\ <var:x0> := <nat:6> ; \\ \{ <var:r> = <var:F> \land <var:x0> = <nat:6> \} \\ <var:x1> := <nat:1> ; \\ \{ <var:r> = <var:F> \land <var:x0> = <nat:6> \land <var:x1> = <nat:1> \} \\ <var:x1> := <var:x1> * <var:r> ; \\ \{ <var:r> = <var:F> \land <var:x0> = <nat:6> \land <var:x1> = <nat:1> \cdot <var:F> \} \\ <var:x2> := <nat:4> ; \\ \{ <var:r> = <var:F> \land <var:x0> = <nat:6> \land <var:x1> = <nat:1> \cdot <var:F> \land <var:x2> = <nat:4> \} \\ <var:x2> := <var:x2> * <var:r> ; \\ \{ <var:r> = <var:F> \land <var:x0> = <nat:6> \land <var:x1> = <nat:1> \cdot <var:F> \land <var:x2> = <nat:4> \cdot <var:F> \} \\ <var:x2> := <var:x2> * <var:r> ; \\ \{ <var:r> = <var:F> \land <var:x0> = <nat:6> \land <var:x1> = <nat:1> \cdot <var:F> \land <var:x2> = <nat:4> \cdot <var:F> ^ <nat:2> \} \\ <var:x3> := <nat:4> ; \\ \{ <var:r> = <var:F> \land <var:x0> = <nat:6> \land <var:x1> = <nat:1> \cdot <var:F> \land <var:x2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:x3> = <nat:4> \} \\ <var:x3> := <var:x3> * <var:r> ; \\ \{ <var:r> = <var:F> \land <var:x0> = <nat:6> \land <var:x1> = <nat:1> \cdot <var:F> \land <var:x2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:x3> = <nat:4> \cdot <var:F> \} \\ <var:x3> := <var:x3> * <var:r> ; \\ \{ <var:r> = <var:F> \land <var:x0> = <nat:6> \land <var:x1> = <nat:1> \cdot <var:F> \land <var:x2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:x3> = <nat:4> \cdot <var:F> ^ <nat:2> \} \\ <var:x3> := <var:x3> * <var:r> ; \\ \{ <var:r> = <var:F> \land <var:x0> = <nat:6> \land <var:x1> = <nat:1> \cdot <var:F> \land <var:x2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:x3> = <nat:4> \cdot <var:F> ^ <nat:3> \} \\ <var:K> := <var:x3> ; \\ \{ <var:r> = <var:F> \land <var:x0> = <nat:6> \land <var:x1> = <nat:1> \cdot <var:F> \land <var:x2> = <nat:4> \cdot <var:F> ^ <nat:2> \land <var:K> = <nat:4> \cdot <var:F> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:x2> ; \\ \{ <var:r> = <var:F> \land <var:x0> = <nat:6> \land <var:x1> = <nat:1> \cdot <var:F> \land <var:K> = <nat:4> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:x1> ; \\ \{ <var:r> = <var:F> \land <var:x0> = <nat:6> \land <var:K> = <nat:4> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> \} \\ <var:K> := <var:K> + <var:x0> \\ \{ <var:r> = <var:F> \land <var:K> = <nat:4> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:6> \} \end{eqnarray} Using usual Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x0> := <nat:6> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:r> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:r> ; <var:x2> := <var:x2> * <var:r> ; <var:x3> := <nat:4> ; <var:x3> := <var:x3> * <var:r> ; <var:x3> := <var:x3> * <var:r> ; <var:x3> := <var:x3> * <var:r> ; <var:K> := <var:x3> ; <var:K> := <var:K> + <var:x2> ; <var:K> := <var:K> + <var:x1> ; <var:K> := <var:K> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:r> = <var:F> }} <def:poly> {{ <var:K> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <nat:4> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:x3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:x3> = <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:x3> = <nat:4> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:x3> = <nat:4> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:1> * <var:F> /\ <var:x2> = <nat:4> * <var:F> ^ <nat:2> /\ <var:K> = <nat:4> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:x0> = <nat:6> /\ <var:x1> = <nat:1> * <var:F> /\ <var:K> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:x0> = <nat:6> /\ <var:K> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:F> /\ <var:K> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 