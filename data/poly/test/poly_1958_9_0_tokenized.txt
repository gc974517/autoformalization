\begin{document} \begin{theorem} We define the following segment of code as follows \begin{verbatim} <var:b0> := <nat:9> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:d> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:d> ; <var:b2> := <var:b2> * <var:d> ; <var:h> := <var:b2> ; <var:h> := <var:h> + <var:b1> ; <var:h> := <var:h> + <var:b0> \end{verbatim} Given --- given any natural coefficients $ <var:t> $ --- it to be that $ <var:d> = <var:t> $ ahead of running the series of instructions , it must be that we have $ <var:h> = <nat:2> * <var:t> ^ <nat:2> + <nat:5> * <var:t> + <nat:9> $ once set of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:t> \} \\ <var:b0> := <nat:9> ; \\ \{ <var:d> = <var:t> \land <var:b0> = <nat:9> \} \\ <var:b1> := <nat:5> ; \\ \{ <var:d> = <var:t> \land <var:b0> = <nat:9> \land <var:b1> = <nat:5> \} \\ <var:b1> := <var:b1> * <var:d> ; \\ \{ <var:d> = <var:t> \land <var:b0> = <nat:9> \land <var:b1> = <nat:5> * <var:t> \} \\ <var:b2> := <nat:2> ; \\ \{ <var:d> = <var:t> \land <var:b0> = <nat:9> \land <var:b1> = <nat:5> * <var:t> \land <var:b2> = <nat:2> \} \\ <var:b2> := <var:b2> * <var:d> ; \\ \{ <var:d> = <var:t> \land <var:b0> = <nat:9> \land <var:b1> = <nat:5> * <var:t> \land <var:b2> = <nat:2> * <var:t> \} \\ <var:b2> := <var:b2> * <var:d> ; \\ \{ <var:d> = <var:t> \land <var:b0> = <nat:9> \land <var:b1> = <nat:5> * <var:t> \land <var:b2> = <nat:2> * <var:t> ^ <nat:2> \} \\ <var:h> := <var:b2> ; \\ \{ <var:d> = <var:t> \land <var:b0> = <nat:9> \land <var:b1> = <nat:5> * <var:t> \land <var:h> = <nat:2> * <var:t> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:b1> ; \\ \{ <var:d> = <var:t> \land <var:b0> = <nat:9> \land <var:h> = <nat:2> * <var:t> ^ <nat:2> + <nat:5> * <var:t> \} \\ <var:h> := <var:h> + <var:b0> \\ \{ <var:d> = <var:t> \land <var:h> = <nat:2> * <var:t> ^ <nat:2> + <nat:5> * <var:t> + <nat:9> \} \end{eqnarray} Applying usual Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:d> = <var:t> }} <var:b0> := <nat:9> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:d> ; <var:b2> := <nat:2> ; <var:b2> := <var:b2> * <var:d> ; <var:b2> := <var:b2> * <var:d> ; <var:h> := <var:b2> ; <var:h> := <var:h> + <var:b1> ; <var:h> := <var:h> + <var:b0> {{ <var:h> = <nat:2> * <var:t> ^ <nat:2> + <nat:5> * <var:t> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:5> * <var:t> /\ <var:b2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:5> * <var:t> /\ <var:b2> = <nat:2> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:5> * <var:t> /\ <var:b2> = <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:b0> = <nat:9> /\ <var:b1> = <nat:5> * <var:t> /\ <var:h> = <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:b0> = <nat:9> /\ <var:h> = <nat:2> * <var:t> ^ <nat:2> + <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:h> = <nat:2> * <var:t> ^ <nat:2> + <nat:5> * <var:t> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 