\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} : \begin{verbatim} <var:p1> := <var:q> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:4> ; <var:Y> := <var:p1> <var:Y> := <var:Y> + <var:p0> \end{verbatim} Assume that we have $ <var:q> = <var:L> $ given any positive numbers $ <var:L> $ before evaluating this program , then $ <var:Y> = <nat:4> \cdot <var:L> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our code segment is evident with standard Hoare techniques . Looking at the proceeding steps contained in the segment of code , we see \begin{verbatim} { <var:q> = <var:L> } <var:p1> := <var:q> { <var:q> = <var:L> \land <var:p1> = <var:L> } { <var:q> = <var:L> \land <var:p1> = <var:L> } <var:p0> := <nat:2> { <var:q> = <var:L> \land <var:p1> = <var:L> \land <var:p0> = <nat:2> } { <var:q> = <var:L> \land <var:p1> = <var:L> \land <var:p0> = <nat:2> } <var:p1> := <var:p1> * <nat:4> { <var:q> = <var:L> \land <var:p1> = <nat:4> * <var:L> \land <var:p0> = <nat:2> } \end{verbatim} Advancing to the upcoming steps in our list of instructions , we see \begin{verbatim} { <var:q> = <var:L> } <var:p1> := <var:q> { <var:q> = <var:L> \land <var:p1> = <var:L> } { <var:q> = <var:L> \land <var:p1> = <var:L> } <var:p0> := <nat:2> { <var:q> = <var:L> \land <var:p1> = <var:L> \land <var:p0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:q> = <var:L> }} <var:p1> := <var:q> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:4> ; <var:Y> := <var:p1> <var:Y> := <var:Y> + <var:p0> {{ <var:Y> = <nat:4> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:p1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:p1> = <var:L> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:p1> = <nat:4> * <var:L> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:p0> = <nat:2> /\ <var:Y> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:L> /\ <var:Y> = <nat:4> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 