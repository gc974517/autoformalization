\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q1> := <var:m> ; <var:q2> := <var:q1> * <var:m> ; <var:q0> := <nat:8> ; <var:q1> := <var:q1> * <nat:2> ; <var:q2> := <var:q2> * <nat:1> ; <var:O> := <var:q2> <var:O> := <var:O> + <var:q1> <var:O> := <var:O> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:m> = <var:d> $ prior to running this list of commands , then we have $ <var:O> = <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:8> $ once series of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:d> \} \\ <var:q1> := <var:m> ; \\ \{ <var:m> = <var:d> \land <var:q1> = <var:d> \} \\ <var:q2> := <var:q1> * <var:m> ; \\ \{ <var:m> = <var:d> \land <var:q1> = <var:d> \land <var:q2> = <var:d> ^ <nat:2> \} \\ <var:q0> := <nat:8> ; \\ \{ <var:m> = <var:d> \land <var:q1> = <var:d> \land <var:q2> = <var:d> ^ <nat:2> \land <var:q0> = <nat:8> \} \\ <var:q1> := <var:q1> * <nat:2> ; \\ \{ <var:m> = <var:d> \land <var:q1> = <nat:2> * <var:d> \land <var:q2> = <var:d> ^ <nat:2> \land <var:q0> = <nat:8> \} \\ <var:q2> := <var:q2> * <nat:1> ; \\ \{ <var:m> = <var:d> \land <var:q1> = <nat:2> * <var:d> \land <var:q2> = <nat:1> * <var:d> ^ <nat:2> \land <var:q0> = <nat:8> \} \\ <var:O> := <var:q2> \\ \{ <var:m> = <var:d> \land <var:q1> = <nat:2> * <var:d> \land <var:q0> = <nat:8> \land <var:O> = <nat:1> * <var:d> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:q1> \\ \{ <var:m> = <var:d> \land <var:q0> = <nat:8> \land <var:O> = <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> \} \\ <var:O> := <var:O> + <var:q0> \\ \{ <var:m> = <var:d> \land <var:O> = <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:8> \} \end{eqnarray} The application of typical Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q1> := <var:m> ; <var:q2> := <var:q1> * <var:m> ; <var:q0> := <nat:8> ; <var:q1> := <var:q1> * <nat:2> ; <var:q2> := <var:q2> * <nat:1> ; <var:O> := <var:q2> <var:O> := <var:O> + <var:q1> <var:O> := <var:O> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:m> = <var:d> }} <def:poly> {{ <var:O> = <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:q1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:q1> = <var:d> /\ <var:q2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:q1> = <var:d> /\ <var:q2> = <var:d> ^ <nat:2> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:q1> = <nat:2> * <var:d> /\ <var:q2> = <var:d> ^ <nat:2> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:q1> = <nat:2> * <var:d> /\ <var:q2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:q1> = <nat:2> * <var:d> /\ <var:q0> = <nat:8> /\ <var:O> = <nat:1> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:q0> = <nat:8> /\ <var:O> = <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:O> = <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 