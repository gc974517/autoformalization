\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N0> := <nat:4> ; <var:y> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:l> = <var:T> $ before evaluating this code segment it holds that we see $ <var:y> = <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this list of instructions is demonstrated using the below decorated list of commands . \begin{eqnarray} \{ <var:l> = <var:T> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:l> = <var:T> \land <var:N0> = <nat:4> \} \\ <var:y> := <var:N0> \\ \{ <var:l> = <var:T> \land <var:y> = <nat:4> \} \end{eqnarray} Utilizing Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:4> ; <var:y> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:l> = <var:T> }} <def:poly> {{ <var:y> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:T> /\ <var:y> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 