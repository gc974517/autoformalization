\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:S1> := <var:k> ; <var:S2> := <var:S1> * <var:k> ; <var:S0> := <nat:5> ; <var:S1> := <var:S1> * <nat:8> ; <var:S2> := <var:S2> * <nat:8> ; <var:C> := <var:S2> <var:C> := <var:C> + <var:S1> <var:C> := <var:C> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:k> = <var:j> $ prior to running the series of commands , it must be that we have $ <var:C> = <nat:8> \cdot <var:j> ^ <nat:2> + <nat:8> \cdot <var:j> + <nat:5> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is accomplished using standard Hoare techniques . Moving on to the proceeding line of code found in the program , the code binding $ <var:k> $ to $ <var:S1>$ . This forwards the precondition $ \{ <var:k> = <var:j> \} $ as the condition $ \{ <var:k> = <var:j> \land <var:S1> = <var:j> \} $ . This is given using the assignment scheme of usual Hoare reasoning . Moving on to the next piece of code found in the program , we have the command \verb | <var:S2> := <var:S1> * <var:k> ; | . This advances the condition $ \{ <var:k> = <var:j> \land <var:S1> = <var:j> \} $ to the postcondition $ \{ <var:k> = <var:j> \land <var:S1> = <var:j> \land <var:S2> = <var:j> ^ <nat:2> \} $ . This is given through the assignment law obtained from Hoare techniques . Immediately after , the variable assignmet line assigning $ <nat:5> $ into $ <var:S0>$ . This advances the precondition $ \{ <var:k> = <var:j> \land <var:S1> = <var:j> \land <var:S2> = <var:j> ^ <nat:2> \} $ toward the postcondition $ \{ <var:k> = <var:j> \land <var:S1> = <var:j> \land <var:S2> = <var:j> ^ <nat:2> \land <var:S0> = <nat:5> \} $ . This is guaranteed with the assignment law defined by standard Hoare logic . Going to the next step , we see the variable update line \verb | <var:S1> := <var:S1> * <nat:8> ; | . This statement moves the condition $ \{ <var:k> = <var:j> \land <var:S1> = <var:j> \land <var:S2> = <var:j> ^ <nat:2> \land <var:S0> = <nat:5> \} $ into $ \{ <var:k> = <var:j> \land <var:S1> = <nat:8> \cdot <var:j> \land <var:S2> = <var:j> ^ <nat:2> \land <var:S0> = <nat:5> \} $ . Observing the following line contained in the segment of code , the code \verb | <var:S2> := <var:S2> * <nat:8> ; | . This statement advances $ \{ <var:k> = <var:j> \land <var:S1> = <nat:8> \cdot <var:j> \land <var:S2> = <var:j> ^ <nat:2> \land <var:S0> = <nat:5> \} $ as the postcondition $ \{ <var:k> = <var:j> \land <var:S1> = <nat:8> \cdot <var:j> \land <var:S2> = <nat:8> \cdot <var:j> ^ <nat:2> \land <var:S0> = <nat:5> \} $ . This is deduced by the assignment rule found in Hoare reasoning . Moving on to the next step , we have the statement \verb | <var:C> := <var:S2> | . This forwards $ \{ <var:k> = <var:j> \land <var:S1> = <nat:8> \cdot <var:j> \land <var:S2> = <nat:8> \cdot <var:j> ^ <nat:2> \land <var:S0> = <nat:5> \} $ to the condition $ \{ <var:k> = <var:j> \land <var:S1> = <nat:8> \cdot <var:j> \land <var:S0> = <nat:5> \land <var:C> = <nat:8> \cdot <var:j> ^ <nat:2> \} $ . Taking another step toward the upcoming statement seen in our code , we see the statement \verb | <var:C> := <var:C> + <var:S1> | . This command transfers $ \{ <var:k> = <var:j> \land <var:S1> = <nat:8> \cdot <var:j> \land <var:S0> = <nat:5> \land <var:C> = <nat:8> \cdot <var:j> ^ <nat:2> \} $ as the postcondition $ \{ <var:k> = <var:j> \land <var:S0> = <nat:5> \land <var:C> = <nat:8> \cdot <var:j> ^ <nat:2> + <nat:8> \cdot <var:j> \} $ . This is sound by the assignment rule defined in Hoare reasoning . After , we have the line \verb | <var:C> := <var:C> + <var:S0> | . This moves the condition $ \{ <var:k> = <var:j> \land <var:S0> = <nat:5> \land <var:C> = <nat:8> \cdot <var:j> ^ <nat:2> + <nat:8> \cdot <var:j> \} $ to $ \{ <var:k> = <var:j> \land <var:C> = <nat:8> \cdot <var:j> ^ <nat:2> + <nat:8> \cdot <var:j> + <nat:5> \} $ . This is given with the assignment law given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S1> := <var:k> ; <var:S2> := <var:S1> * <var:k> ; <var:S0> := <nat:5> ; <var:S1> := <var:S1> * <nat:8> ; <var:S2> := <var:S2> * <nat:8> ; <var:C> := <var:S2> <var:C> := <var:C> + <var:S1> <var:C> := <var:C> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:k> = <var:j> }} <def:poly> {{ <var:C> = <nat:8> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:S1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:S1> = <var:j> /\ <var:S2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:S1> = <var:j> /\ <var:S2> = <var:j> ^ <nat:2> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:S1> = <nat:8> * <var:j> /\ <var:S2> = <var:j> ^ <nat:2> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:S1> = <nat:8> * <var:j> /\ <var:S2> = <nat:8> * <var:j> ^ <nat:2> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:S1> = <nat:8> * <var:j> /\ <var:S0> = <nat:5> /\ <var:C> = <nat:8> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:S0> = <nat:5> /\ <var:C> = <nat:8> * <var:j> ^ <nat:2> + <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:C> = <nat:8> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 