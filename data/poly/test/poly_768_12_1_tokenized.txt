\begin{document} \begin{theorem} Define a series of instructions : \begin{verbatim} <var:p1> := <var:x> ; <var:p2> := <var:p1> * <var:x> ; <var:p3> := <var:p2> * <var:x> ; <var:p4> := <var:p3> * <var:x> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:3> ; <var:p2> := <var:p2> * <nat:4> ; <var:p4> := <var:p4> * <nat:1> ; <var:C> := <var:p4> <var:C> := <var:C> + <var:p2> <var:C> := <var:C> + <var:p1> <var:C> := <var:C> + <var:p0> \end{verbatim} Given --- for every integers $ <var:U> $ --- $ <var:x> = <var:U> $ before executing this code segment it must be that we see $ <var:C> = <nat:1> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the set of commands is clear using standard Hoare techniques . Observing the subsequent step contained in the list of commands , the assignment code \verb | <var:p1> := <var:x> ; | . This code redefines the condition $ \{ <var:x> = <var:U> \} $ toward $ \{ <var:x> = <var:U> \land <var:p1> = <var:U> \} $ . Shifting focus toward the next bit of code in the list of commands , we have the environment update line \verb | <var:p2> := <var:p1> * <var:x> ; | . This line advances $ \{ <var:x> = <var:U> \land <var:p1> = <var:U> \} $ to the postcondition $ \{ <var:x> = <var:U> \land <var:p1> = <var:U> \land <var:p2> = <var:U> ^ <nat:2> \} $ . Moving forward to the upcoming command contained in the list of commands , we have the statement assigning $ <var:p2> * <var:x> $ toward $ <var:p3>$ . This code redefines the condition $ \{ <var:x> = <var:U> \land <var:p1> = <var:U> \land <var:p2> = <var:U> ^ <nat:2> \} $ as the postcondition $ \{ <var:x> = <var:U> \land <var:p1> = <var:U> \land <var:p2> = <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \} $ . Moving on to the subsequent step found in the series of commands , we see the binding command giving $ <var:p3> * <var:x> $ as $ <var:p4>$ . This statement takes the condition $ \{ <var:x> = <var:U> \land <var:p1> = <var:U> \land <var:p2> = <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \} $ as the condition $ \{ <var:x> = <var:U> \land <var:p1> = <var:U> \land <var:p2> = <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \land <var:p4> = <var:U> ^ <nat:4> \} $ . This is deduced through the assignment scheme given by usual Hoare logic . Moving on to the proceeding statement seen in our code segment , we have the assignment statement \verb | <var:p0> := <nat:2> ; | . This redefines the precondition $ \{ <var:x> = <var:U> \land <var:p1> = <var:U> \land <var:p2> = <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \land <var:p4> = <var:U> ^ <nat:4> \} $ as $ \{ <var:x> = <var:U> \land <var:p1> = <var:U> \land <var:p2> = <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \land <var:p4> = <var:U> ^ <nat:4> \land <var:p0> = <nat:2> \} $ . This is sound by the assignment scheme obtained from usual Hoare logic . Following , we have the variable assignmet command \verb | <var:p1> := <var:p1> * <nat:3> ; | . This moves $ \{ <var:x> = <var:U> \land <var:p1> = <var:U> \land <var:p2> = <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \land <var:p4> = <var:U> ^ <nat:4> \land <var:p0> = <nat:2> \} $ to the condition $ \{ <var:x> = <var:U> \land <var:p1> = <nat:3> \cdot <var:U> \land <var:p2> = <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \land <var:p4> = <var:U> ^ <nat:4> \land <var:p0> = <nat:2> \} $ . Moving on , we see the variable binding command letting $ <var:p2> * <nat:4> $ into $ <var:p2>$ . This command advances the precondition $ \{ <var:x> = <var:U> \land <var:p1> = <nat:3> \cdot <var:U> \land <var:p2> = <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \land <var:p4> = <var:U> ^ <nat:4> \land <var:p0> = <nat:2> \} $ to the condition $ \{ <var:x> = <var:U> \land <var:p1> = <nat:3> \cdot <var:U> \land <var:p2> = <nat:4> \cdot <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \land <var:p4> = <var:U> ^ <nat:4> \land <var:p0> = <nat:2> \} $ . Honing in on the following piece of code seen in our set of instructions , we see the assignment code \verb | <var:p4> := <var:p4> * <nat:1> ; | . This redefines the condition $ \{ <var:x> = <var:U> \land <var:p1> = <nat:3> \cdot <var:U> \land <var:p2> = <nat:4> \cdot <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \land <var:p4> = <var:U> ^ <nat:4> \land <var:p0> = <nat:2> \} $ into $ \{ <var:x> = <var:U> \land <var:p1> = <nat:3> \cdot <var:U> \land <var:p2> = <nat:4> \cdot <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \land <var:p4> = <nat:1> \cdot <var:U> ^ <nat:4> \land <var:p0> = <nat:2> \} $ . This is known to be sound by the assignment law given in Hoare reasoning . Shifting focus toward the next line of code seen in the list of instructions , we see the assignment statement yielding $ <var:p4$ toward $ <var:C>$ . This command advances the condition $ \{ <var:x> = <var:U> \land <var:p1> = <nat:3> \cdot <var:U> \land <var:p2> = <nat:4> \cdot <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \land <var:p4> = <nat:1> \cdot <var:U> ^ <nat:4> \land <var:p0> = <nat:2> \} $ toward the condition $ \{ <var:x> = <var:U> \land <var:p1> = <nat:3> \cdot <var:U> \land <var:p2> = <nat:4> \cdot <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \land <var:p0> = <nat:2> \land <var:C> = <nat:1> \cdot <var:U> ^ <nat:4> \} $ . This is rigorously given using the assignment scheme defined in standard Hoare techniques . Now , the command letting $ <var:C> + <var:p2$ into $ <var:C>$ . This code redefines the condition $ \{ <var:x> = <var:U> \land <var:p1> = <nat:3> \cdot <var:U> \land <var:p2> = <nat:4> \cdot <var:U> ^ <nat:2> \land <var:p3> = <var:U> ^ <nat:3> \land <var:p0> = <nat:2> \land <var:C> = <nat:1> \cdot <var:U> ^ <nat:4> \} $ toward $ \{ <var:x> = <var:U> \land <var:p1> = <nat:3> \cdot <var:U> \land <var:p0> = <nat:2> \land <var:C> = <nat:1> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:2> \} $ . This is sound by the assignment inference rule given by standard Hoare reasoning . Paying attention to the subsequent line of code found in the series of instructions , we see the assignment command yielding $ <var:C> + <var:p1$ toward $ <var:C>$ . This advances $ \{ <var:x> = <var:U> \land <var:p1> = <nat:3> \cdot <var:U> \land <var:p0> = <nat:2> \land <var:C> = <nat:1> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:2> \} $ as $ \{ <var:x> = <var:U> \land <var:p0> = <nat:2> \land <var:C> = <nat:1> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> \} $ . This is ensured with the assignment rule obtained from usual Hoare techniques . Taking another step toward the following command found in the set of instructions , we have the variable binding statement \verb | <var:C> := <var:C> + <var:p0> | . This statement redefines the condition $ \{ <var:x> = <var:U> \land <var:p0> = <nat:2> \land <var:C> = <nat:1> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> \} $ to $ \{ <var:x> = <var:U> \land <var:C> = <nat:1> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:2> + <nat:3> \cdot <var:U> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:x> = <var:U> }} <var:p1> := <var:x> ; <var:p2> := <var:p1> * <var:x> ; <var:p3> := <var:p2> * <var:x> ; <var:p4> := <var:p3> * <var:x> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:3> ; <var:p2> := <var:p2> * <nat:4> ; <var:p4> := <var:p4> * <nat:1> ; <var:C> := <var:p4> <var:C> := <var:C> + <var:p2> <var:C> := <var:C> + <var:p1> <var:C> := <var:C> + <var:p0> {{ <var:C> = <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:p1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:p1> = <var:U> /\ <var:p2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:p1> = <var:U> /\ <var:p2> = <var:U> ^ <nat:2> /\ <var:p3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:p1> = <var:U> /\ <var:p2> = <var:U> ^ <nat:2> /\ <var:p3> = <var:U> ^ <nat:3> /\ <var:p4> = <var:U> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:p1> = <var:U> /\ <var:p2> = <var:U> ^ <nat:2> /\ <var:p3> = <var:U> ^ <nat:3> /\ <var:p4> = <var:U> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:p1> = <nat:3> * <var:U> /\ <var:p2> = <var:U> ^ <nat:2> /\ <var:p3> = <var:U> ^ <nat:3> /\ <var:p4> = <var:U> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:p1> = <nat:3> * <var:U> /\ <var:p2> = <nat:4> * <var:U> ^ <nat:2> /\ <var:p3> = <var:U> ^ <nat:3> /\ <var:p4> = <var:U> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:p1> = <nat:3> * <var:U> /\ <var:p2> = <nat:4> * <var:U> ^ <nat:2> /\ <var:p3> = <var:U> ^ <nat:3> /\ <var:p4> = <nat:1> * <var:U> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:p1> = <nat:3> * <var:U> /\ <var:p2> = <nat:4> * <var:U> ^ <nat:2> /\ <var:p3> = <var:U> ^ <nat:3> /\ <var:p0> = <nat:2> /\ <var:C> = <nat:1> * <var:U> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:p1> = <nat:3> * <var:U> /\ <var:p0> = <nat:2> /\ <var:C> = <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:p0> = <nat:2> /\ <var:C> = <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:U> /\ <var:C> = <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 