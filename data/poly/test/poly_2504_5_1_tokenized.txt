\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} as \begin{verbatim} <var:T1> := <var:E> ; <var:T0> := <nat:2> ; <var:T1> := <var:T1> * <nat:2> ; <var:o> := <var:T1> <var:o> := <var:o> + <var:T0> \end{verbatim} Given that we have $ <var:E> = <var:D> $ before interpreting the set of commands then $ <var:o> = <nat:2> * <var:D> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our program is shown with standard Hoare logic . Further , \begin{verbatim} { <var:E> = <var:D> } <var:T1> := <var:E> { <var:E> = <var:D> \land <var:T1> = <var:D> } { <var:E> = <var:D> \land <var:T1> = <var:D> } <var:T0> := <nat:2> { <var:E> = <var:D> \land <var:T1> = <var:D> \land <var:T0> = <nat:2> } \end{verbatim} This is shown with the law defined by Hoare reasoning . Observing the upcoming bits of codecontained in our set of commands , we see \begin{verbatim} { <var:E> = <var:D> } <var:T1> := <var:E> { <var:E> = <var:D> \land <var:T1> = <var:D> } { <var:E> = <var:D> \land <var:T1> = <var:D> } <var:T0> := <nat:2> { <var:E> = <var:D> \land <var:T1> = <var:D> \land <var:T0> = <nat:2> } \end{verbatim} This is guaranteed through the variable assignmet scheme found in typical Hoare reasoning . Paying attention to the upcoming bit of code seen in our program , we have \begin{verbatim} { <var:E> = <var:D> } <var:T1> := <var:E> { <var:E> = <var:D> \land <var:T1> = <var:D> } \end{verbatim} This is deduced through the environment update inference rule of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:E> = <var:D> }} <var:T1> := <var:E> ; <var:T0> := <nat:2> ; <var:T1> := <var:T1> * <nat:2> ; <var:o> := <var:T1> <var:o> := <var:o> + <var:T0> {{ <var:o> = <nat:2> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:T1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:T1> = <var:D> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:T1> = <nat:2> * <var:D> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:T0> = <nat:2> /\ <var:o> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:o> = <nat:2> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 