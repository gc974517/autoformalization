\begin{document} \begin{theorem} Define the following segment of code : \begin{verbatim} <var:C0> := <nat:2> ; <var:y> := <var:C0> \end{verbatim} Assume that we have $ <var:D> = <var:R> $ prior to the execution of this series of instructions , it holds that $ <var:y> = <nat:2> $ after code segment finishes . \end{theorem} \begin{proof} The way to prove correctness for this code segment is shown through standard Hoare logic . Looking at the following piece of code found in our set of instructions , we have the environment update code giving $ <nat:2> $ toward $ <var:C0>$ . This takes the condition $ \{ <var:D> = <var:R> \} $ into the postcondition $ \{ <var:D> = <var:R> \land <var:C0> = <nat:2> \} $ . This is shown by the assignment inference rule defined in Hoare logic . Observing the proceeding bit of code seen in the segment of code , we have the environment update line \verb | <var:y> := <var:C0> | . This line transfers the condition $ \{ <var:D> = <var:R> \land <var:C0> = <nat:2> \} $ into $ \{ <var:D> = <var:R> \land <var:y> = <nat:2> \} $ . This is shown with the assignment law obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:D> = <var:R> }} <var:C0> := <nat:2> ; <var:y> := <var:C0> {{ <var:y> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:R> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:R> /\ <var:y> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 