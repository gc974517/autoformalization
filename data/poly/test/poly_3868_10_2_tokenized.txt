\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U> := <nat:2> ; <var:U> := <nat:1> + <var:U> * <var:L> ; <var:U> := <nat:4> + <var:U> * <var:L> ; <var:U> := <nat:4> + <var:U> * <var:L> ; <var:U> := <nat:3> + <var:U> * <var:L> ; <var:U> := <nat:1> + <var:U> * <var:L> ; <var:U> := <nat:3> + <var:U> * <var:L> ; <var:U> := <nat:2> + <var:U> * <var:L> ; <var:U> := <nat:4> + <var:U> * <var:L> ; <var:U> := <nat:3> + <var:U> * <var:L> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:L> = <var:M> $ prior to executing the series of commands it holds that we see $ <var:U> = <nat:2> \cdot <var:M> ^ <nat:9> + <nat:1> \cdot <var:M> ^ <nat:8> + <nat:4> \cdot <var:M> ^ <nat:7> + <nat:4> \cdot <var:M> ^ <nat:6> + <nat:3> \cdot <var:M> ^ <nat:5> + <nat:1> \cdot <var:M> ^ <nat:4> + <nat:3> \cdot <var:M> ^ <nat:3> + <nat:2> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> + <nat:3> $ once series of instructions terminates . \end{theorem} \begin{proof} The application of usual Hoare techniques produces : \begin{eqnarray} \{ <var:L> = <var:M> \} \\ <var:U> := <nat:2> ; \\ \{ <var:L> = <var:M> \land <var:U> = <nat:2> \} \\ <var:U> := <nat:1> + <var:U> * <var:L> ; \\ \{ <var:L> = <var:M> \land <var:U> = <nat:2> \times <var:M> + <nat:1> \} \\ <var:U> := <nat:4> + <var:U> * <var:L> ; \\ \{ <var:L> = <var:M> \land <var:U> = <nat:2> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:4> \} \\ <var:U> := <nat:4> + <var:U> * <var:L> ; \\ \{ <var:L> = <var:M> \land <var:U> = <nat:2> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:4> \} \\ <var:U> := <nat:3> + <var:U> * <var:L> ; \\ \{ <var:L> = <var:M> \land <var:U> = <nat:2> \times <var:M> ^ <nat:4> + <nat:1> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:3> \} \\ <var:U> := <nat:1> + <var:U> * <var:L> ; \\ \{ <var:L> = <var:M> \land <var:U> = <nat:2> \times <var:M> ^ <nat:5> + <nat:1> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:1> \} \\ <var:U> := <nat:3> + <var:U> * <var:L> ; \\ \{ <var:L> = <var:M> \land <var:U> = <nat:2> \times <var:M> ^ <nat:6> + <nat:1> \times <var:M> ^ <nat:5> + <nat:4> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:3> \} \\ <var:U> := <nat:2> + <var:U> * <var:L> ; \\ \{ <var:L> = <var:M> \land <var:U> = <nat:2> \times <var:M> ^ <nat:7> + <nat:1> \times <var:M> ^ <nat:6> + <nat:4> \times <var:M> ^ <nat:5> + <nat:4> \times <var:M> ^ <nat:4> + <nat:3> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:2> \} \\ <var:U> := <nat:4> + <var:U> * <var:L> ; \\ \{ <var:L> = <var:M> \land <var:U> = <nat:2> \times <var:M> ^ <nat:8> + <nat:1> \times <var:M> ^ <nat:7> + <nat:4> \times <var:M> ^ <nat:6> + <nat:4> \times <var:M> ^ <nat:5> + <nat:3> \times <var:M> ^ <nat:4> + <nat:1> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:4> \} \\ <var:U> := <nat:3> + <var:U> * <var:L> \\ \{ <var:L> = <var:M> \land <var:U> = <nat:2> \times <var:M> ^ <nat:9> + <nat:1> \times <var:M> ^ <nat:8> + <nat:4> \times <var:M> ^ <nat:7> + <nat:4> \times <var:M> ^ <nat:6> + <nat:3> \times <var:M> ^ <nat:5> + <nat:1> \times <var:M> ^ <nat:4> + <nat:3> \times <var:M> ^ <nat:3> + <nat:2> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:3> \} \end{eqnarray} Given the preceding argument , this list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:2> ; <var:U> := <nat:1> + <var:U> * <var:L> ; <var:U> := <nat:4> + <var:U> * <var:L> ; <var:U> := <nat:4> + <var:U> * <var:L> ; <var:U> := <nat:3> + <var:U> * <var:L> ; <var:U> := <nat:1> + <var:U> * <var:L> ; <var:U> := <nat:3> + <var:U> * <var:L> ; <var:U> := <nat:2> + <var:U> * <var:L> ; <var:U> := <nat:4> + <var:U> * <var:L> ; <var:U> := <nat:3> + <var:U> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:L> = <var:M> }} <def:poly> {{ <var:U> = <nat:2> * <var:M> ^ <nat:9> + <nat:1> * <var:M> ^ <nat:8> + <nat:4> * <var:M> ^ <nat:7> + <nat:4> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U> = <nat:2> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U> = <nat:2> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U> = <nat:2> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U> = <nat:2> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U> = <nat:2> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U> = <nat:2> * <var:M> ^ <nat:6> + <nat:1> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U> = <nat:2> * <var:M> ^ <nat:7> + <nat:1> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:4> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U> = <nat:2> * <var:M> ^ <nat:8> + <nat:1> * <var:M> ^ <nat:7> + <nat:4> * <var:M> ^ <nat:6> + <nat:4> * <var:M> ^ <nat:5> + <nat:3> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:U> = <nat:2> * <var:M> ^ <nat:9> + <nat:1> * <var:M> ^ <nat:8> + <nat:4> * <var:M> ^ <nat:7> + <nat:4> * <var:M> ^ <nat:6> + <nat:3> * <var:M> ^ <nat:5> + <nat:1> * <var:M> ^ <nat:4> + <nat:3> * <var:M> ^ <nat:3> + <nat:2> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 