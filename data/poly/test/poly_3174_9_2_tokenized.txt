\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:a> := <nat:4> ; <var:a> := <nat:3> + <var:a> * <var:x> ; <var:a> := <nat:2> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <nat:3> + <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <nat:3> + <var:a> * <var:x> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:x> = <var:Y> $ prior to interpreting our program then we see $ <var:a> = <nat:4> \cdot <var:Y> ^ <nat:8> + <nat:3> \cdot <var:Y> ^ <nat:7> + <nat:2> \cdot <var:Y> ^ <nat:6> + <nat:1> \cdot <var:Y> ^ <nat:5> + <nat:1> \cdot <var:Y> ^ <nat:4> + <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:3> $ once program finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:Y> \} \\ <var:a> := <nat:4> ; \\ \{ <var:x> = <var:Y> \land <var:a> = <nat:4> \} \\ <var:a> := <nat:3> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:Y> \land <var:a> = <nat:4> \cdot <var:Y> + <nat:3> \} \\ <var:a> := <nat:2> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:Y> \land <var:a> = <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> + <nat:2> \} \\ <var:a> := <nat:1> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:Y> \land <var:a> = <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + <nat:1> \} \\ <var:a> := <nat:1> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:Y> \land <var:a> = <nat:4> \cdot <var:Y> ^ <nat:4> + <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:1> \} \\ <var:a> := <nat:4> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:Y> \land <var:a> = <nat:4> \cdot <var:Y> ^ <nat:5> + <nat:3> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:4> \} \\ <var:a> := <nat:3> + <var:a> * <var:x> ; \\ \{ <var:x> = <var:Y> \land <var:a> = <nat:4> \cdot <var:Y> ^ <nat:6> + <nat:3> \cdot <var:Y> ^ <nat:5> + <nat:2> \cdot <var:Y> ^ <nat:4> + <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:3> \} \\ <var:a> := <var:a> * <var:x> ; \\ \{ <var:x> = <var:Y> \land <var:a> = <nat:4> \cdot <var:Y> ^ <nat:7> + <nat:3> \cdot <var:Y> ^ <nat:6> + <nat:2> \cdot <var:Y> ^ <nat:5> + <nat:1> \cdot <var:Y> ^ <nat:4> + <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:3> \cdot <var:Y> + \} \\ <var:a> := <nat:3> + <var:a> * <var:x> \\ \{ <var:x> = <var:Y> \land <var:a> = <nat:4> \cdot <var:Y> ^ <nat:8> + <nat:3> \cdot <var:Y> ^ <nat:7> + <nat:2> \cdot <var:Y> ^ <nat:6> + <nat:1> \cdot <var:Y> ^ <nat:5> + <nat:1> \cdot <var:Y> ^ <nat:4> + <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:3> \} \end{eqnarray} Using Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:a> := <nat:4> ; <var:a> := <nat:3> + <var:a> * <var:x> ; <var:a> := <nat:2> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <nat:3> + <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <nat:3> + <var:a> * <var:x> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:x> = <var:Y> }} <def:poly> {{ <var:a> = <nat:4> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:2> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:a> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:a> = <nat:4> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:a> = <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:a> = <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:a> = <nat:4> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:a> = <nat:4> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:a> = <nat:4> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:a> = <nat:4> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:2> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:a> = <nat:4> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:2> * <var:Y> ^ <nat:6> + <nat:1> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 