\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} such that \begin{verbatim} <var:N1> := <var:v> ; <var:N2> := <var:N1> * <var:v> ; <var:N3> := <var:N2> * <var:v> ; <var:N4> := <var:N3> * <var:v> ; <var:N0> := <nat:3> ; <var:N2> := <var:N2> * <nat:5> ; <var:N3> := <var:N3> * <nat:7> ; <var:N4> := <var:N4> * <nat:4> ; <var:V> := <var:N4> <var:V> := <var:V> + <var:N3> <var:V> := <var:V> + <var:N2> <var:V> := <var:V> + <var:N0> \end{verbatim} Allow that $ <var:v> = <var:t> $ prior to evaluating this code segment , it must be that $ <var:V> = <nat:4> * <var:t> ^ <nat:4> + <nat:7> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> + <nat:3> $ when set of commands has finished executing . \end{theorem} \begin{proof} Arguing the correctness of the code can be seen through Hoare logic . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:v> = <var:t> \} & <var:N1> := <var:v> & \{ <var:v> = <var:t> \land <var:N1> = <var:t> \} \\ \{ <var:v> = <var:t> \land <var:N1> = <var:t> \} & <var:N2> := <var:N1> * <var:v> & \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <var:t> ^ <nat:2> \} \\ \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <var:t> ^ <nat:2> \} & <var:N3> := <var:N2> * <var:v> & \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <var:t> ^ <nat:2> \land <var:N3> = <var:t> ^ <nat:3> \} \\ \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <var:t> ^ <nat:2> \land <var:N3> = <var:t> ^ <nat:3> \} & <var:N4> := <var:N3> * <var:v> & \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <var:t> ^ <nat:2> \land <var:N3> = <var:t> ^ <nat:3> \land <var:N4> = <var:t> ^ <nat:4> \} \\ \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <var:t> ^ <nat:2> \land <var:N3> = <var:t> ^ <nat:3> \land <var:N4> = <var:t> ^ <nat:4> \} & <var:N0> := <nat:3> & \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <var:t> ^ <nat:2> \land <var:N3> = <var:t> ^ <nat:3> \land <var:N4> = <var:t> ^ <nat:4> \land <var:N0> = <nat:3> \} \\ \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <var:t> ^ <nat:2> \land <var:N3> = <var:t> ^ <nat:3> \land <var:N4> = <var:t> ^ <nat:4> \land <var:N0> = <nat:3> \} & <var:N2> := <var:N2> * <nat:5> & \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <nat:5> \cdot <var:t> ^ <nat:2> \land <var:N3> = <var:t> ^ <nat:3> \land <var:N4> = <var:t> ^ <nat:4> \land <var:N0> = <nat:3> \} \\ \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <nat:5> \cdot <var:t> ^ <nat:2> \land <var:N3> = <var:t> ^ <nat:3> \land <var:N4> = <var:t> ^ <nat:4> \land <var:N0> = <nat:3> \} & <var:N3> := <var:N3> * <nat:7> & \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <nat:5> \cdot <var:t> ^ <nat:2> \land <var:N3> = <nat:7> \cdot <var:t> ^ <nat:3> \land <var:N4> = <var:t> ^ <nat:4> \land <var:N0> = <nat:3> \} \\ \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <nat:5> \cdot <var:t> ^ <nat:2> \land <var:N3> = <nat:7> \cdot <var:t> ^ <nat:3> \land <var:N4> = <var:t> ^ <nat:4> \land <var:N0> = <nat:3> \} & <var:N4> := <var:N4> * <nat:4> & \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <nat:5> \cdot <var:t> ^ <nat:2> \land <var:N3> = <nat:7> \cdot <var:t> ^ <nat:3> \land <var:N4> = <nat:4> \cdot <var:t> ^ <nat:4> \land <var:N0> = <nat:3> \} \\ \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <nat:5> \cdot <var:t> ^ <nat:2> \land <var:N3> = <nat:7> \cdot <var:t> ^ <nat:3> \land <var:N4> = <nat:4> \cdot <var:t> ^ <nat:4> \land <var:N0> = <nat:3> \} & <var:V> := <var:N4& \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <nat:5> \cdot <var:t> ^ <nat:2> \land <var:N3> = <nat:7> \cdot <var:t> ^ <nat:3> \land <var:N0> = <nat:3> \land <var:V> = <nat:4> \cdot <var:t> ^ <nat:4> \} \end{tabular} Immediately following , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:t> \} & <var:N1> := <var:v> & \{ <var:v> = <var:t> \land <var:N1> = <var:t> \} \end{tabular} This is rigorously given by the variable update rule found in typical Hoare reasoning . Moving forward to the next steps in our list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:v> = <var:t> \} & <var:N1> := <var:v> & \{ <var:v> = <var:t> \land <var:N1> = <var:t> \} \\ \{ <var:v> = <var:t> \land <var:N1> = <var:t> \} & <var:N2> := <var:N1> * <var:v> & \{ <var:v> = <var:t> \land <var:N1> = <var:t> \land <var:N2> = <var:t> ^ <nat:2> \} \end{tabular} This is sound using the variable update scheme defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <var:N4> : string := " <var:N4> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:v> = <var:t> }} <var:N1> := <var:v> ; <var:N2> := <var:N1> * <var:v> ; <var:N3> := <var:N2> * <var:v> ; <var:N4> := <var:N3> * <var:v> ; <var:N0> := <nat:3> ; <var:N2> := <var:N2> * <nat:5> ; <var:N3> := <var:N3> * <nat:7> ; <var:N4> := <var:N4> * <nat:4> ; <var:V> := <var:N4> <var:V> := <var:V> + <var:N3> <var:V> := <var:V> + <var:N2> <var:V> := <var:V> + <var:N0> {{ <var:V> = <nat:4> * <var:t> ^ <nat:4> + <nat:7> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:N1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:N1> = <var:t> /\ <var:N2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:N1> = <var:t> /\ <var:N2> = <var:t> ^ <nat:2> /\ <var:N3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:N1> = <var:t> /\ <var:N2> = <var:t> ^ <nat:2> /\ <var:N3> = <var:t> ^ <nat:3> /\ <var:N4> = <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:N1> = <var:t> /\ <var:N2> = <var:t> ^ <nat:2> /\ <var:N3> = <var:t> ^ <nat:3> /\ <var:N4> = <var:t> ^ <nat:4> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:N1> = <var:t> /\ <var:N2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:N3> = <var:t> ^ <nat:3> /\ <var:N4> = <var:t> ^ <nat:4> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:N1> = <var:t> /\ <var:N2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:N3> = <nat:7> * <var:t> ^ <nat:3> /\ <var:N4> = <var:t> ^ <nat:4> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:N1> = <var:t> /\ <var:N2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:N3> = <nat:7> * <var:t> ^ <nat:3> /\ <var:N4> = <nat:4> * <var:t> ^ <nat:4> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:N1> = <var:t> /\ <var:N2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:N3> = <nat:7> * <var:t> ^ <nat:3> /\ <var:N0> = <nat:3> /\ <var:V> = <nat:4> * <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:N1> = <var:t> /\ <var:N2> = <nat:5> * <var:t> ^ <nat:2> /\ <var:N0> = <nat:3> /\ <var:V> = <nat:4> * <var:t> ^ <nat:4> + <nat:7> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:N1> = <var:t> /\ <var:N0> = <nat:3> /\ <var:V> = <nat:4> * <var:t> ^ <nat:4> + <nat:7> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:V> = <nat:4> * <var:t> ^ <nat:4> + <nat:7> * <var:t> ^ <nat:3> + <nat:5> * <var:t> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 