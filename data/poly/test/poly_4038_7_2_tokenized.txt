\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:I> := <nat:3> ; <var:I> := <var:I> * <var:E> ; <var:I> := <nat:2> + <var:I> * <var:E> ; <var:I> := <nat:2> + <var:I> * <var:E> ; <var:I> := <nat:4> + <var:I> * <var:E> ; <var:I> := <nat:1> + <var:I> * <var:E> ; <var:I> := <nat:3> + <var:I> * <var:E> \end{verbatim} Assuming $ <var:E> = <var:a> $ for all positive integer coefficients $ <var:a> $ before executing our list of commands , then we see $ <var:I> = <nat:3> \cdot <var:a> ^ <nat:6> + <nat:2> \cdot <var:a> ^ <nat:4> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + <nat:3> $ when series of instructions terminates . \end{theorem} \begin{proof} Observe that this decorated series of commands . \begin{eqnarray} \{ <var:E> = <var:a> \} \\ <var:I> := <nat:3> ; \\ \{ <var:E> = <var:a> \land <var:I> = <nat:3> \} \\ <var:I> := <var:I> * <var:E> ; \\ \{ <var:E> = <var:a> \land <var:I> = <nat:3> * <var:a> + \} \\ <var:I> := <nat:2> + <var:I> * <var:E> ; \\ \{ <var:E> = <var:a> \land <var:I> = <nat:3> * <var:a> ^ <nat:2> + <nat:2> \} \\ <var:I> := <nat:2> + <var:I> * <var:E> ; \\ \{ <var:E> = <var:a> \land <var:I> = <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> + <nat:2> \} \\ <var:I> := <nat:4> + <var:I> * <var:E> ; \\ \{ <var:E> = <var:a> \land <var:I> = <nat:3> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:4> \} \\ <var:I> := <nat:1> + <var:I> * <var:E> ; \\ \{ <var:E> = <var:a> \land <var:I> = <nat:3> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:1> \} \\ <var:I> := <nat:3> + <var:I> * <var:E> \\ \{ <var:E> = <var:a> \land <var:I> = <nat:3> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> \} \end{eqnarray} The application of Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:E> = <var:a> }} <var:I> := <nat:3> ; <var:I> := <var:I> * <var:E> ; <var:I> := <nat:2> + <var:I> * <var:E> ; <var:I> := <nat:2> + <var:I> * <var:E> ; <var:I> := <nat:4> + <var:I> * <var:E> ; <var:I> := <nat:1> + <var:I> * <var:E> ; <var:I> := <nat:3> + <var:I> * <var:E> {{ <var:I> = <nat:3> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:I> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:I> = <nat:3> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:I> = <nat:3> * <var:a> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:I> = <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:I> = <nat:3> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:I> = <nat:3> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:a> /\ <var:I> = <nat:3> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 