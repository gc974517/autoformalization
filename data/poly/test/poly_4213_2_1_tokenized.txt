\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:2> ; <var:r> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> in \emph{Imp} . Allow that we have $ <var:H> = <var:n> $ before interpreting this code , it holds that we have $ <var:r> = <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the program can be given by usual Hoare techniques . Taking a look at the following line of code seen in the code segment , we have the command \verb | <var:y0> := <nat:2> ; | . This code moves the condition $ \{ <var:H> = <var:n> \} $ as the condition $ \{ <var:H> = <var:n> \land <var:y0> = <nat:2> \} $ . Advancing on , we have the binding code \verb | <var:r> := <var:y0> | . This moves the precondition $ \{ <var:H> = <var:n> \land <var:y0> = <nat:2> \} $ into the postcondition $ \{ <var:H> = <var:n> \land <var:r> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:2> ; <var:r> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:H> = <var:n> }} <def:poly> {{ <var:r> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:r> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 