\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:8> ; <var:p> := <var:d0> \end{verbatim} Allowing --- letting natural numbers $ <var:M> $ --- that $ <var:J> = <var:M> $ ahead of interpreting this series of instructions it follows that we see $ <var:p> = <nat:8> $ . \end{theorem} \begin{proof} The argument for the list of instructions is clear using standard Hoare logic . Following , we see the variable update line \verb | <var:d0> := <nat:8> ; | . This line transfers the precondition $ \{ <var:J> = <var:M> \} $ toward $ \{ <var:J> = <var:M> \land <var:d0> = <nat:8> \} $ . This is rigorously given using the assignment inference rule of usual Hoare reasoning . Observing the proceeding statement seen in our set of instructions , the environment update statement giving $ <var:d0$ toward $ <var:p>$ . This forwards $ \{ <var:J> = <var:M> \land <var:d0> = <nat:8> \} $ to the condition $ \{ <var:J> = <var:M> \land <var:p> = <nat:8> \} $ . This is ensured through the assignment scheme defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:J> = <var:M> }} <var:d0> := <nat:8> ; <var:p> := <var:d0> {{ <var:p> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:M> /\ <var:p> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 