\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as \begin{verbatim} <var:P1> := <var:f> ; <var:P2> := <var:P1> * <var:f> ; <var:P3> := <var:P2> * <var:f> ; <var:P4> := <var:P3> * <var:f> ; <var:P0> := <nat:5> ; <var:P1> := <var:P1> * <nat:7> ; <var:P2> := <var:P2> * <nat:6> ; <var:P4> := <var:P4> * <nat:9> ; <var:M> := <var:P4> <var:M> := <var:M> + <var:P2> <var:M> := <var:M> + <var:P1> <var:M> := <var:M> + <var:P0> \end{verbatim} Allow it to hold that $ <var:f> = <var:X> $ prior to the execution of our series of instructions , then $ <var:M> = <nat:9> * <var:X> ^ <nat:4> + <nat:6> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands is clear with standard Hoare techniques . Paying attention to the following line in our set of instructions , the assignment command \verb | <var:P1> := <var:f> ; | . This advances the precondition $ \{ <var:f> = <var:X> \} $ to $ \{ <var:f> = <var:X> \land <var:P1> = <var:X> \} $ . Going to the next step , we have the binding line yielding $ <var:P1> * <var:f> $ toward $ <var:P2>$ . This transfers the condition $ \{ <var:f> = <var:X> \land <var:P1> = <var:X> \} $ into the postcondition $ \{ <var:f> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <var:X> ^ <nat:2> \} $ . Moving on , we have the environment update code letting $ <var:P2> * <var:f> $ to $ <var:P3>$ . This redefines the condition $ \{ <var:f> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <var:X> ^ <nat:2> \} $ as the condition $ \{ <var:f> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \} $ . This is ensured using the assignment rule defined by usual Hoare reasoning . Moving forward to the subsequent step contained in the set of commands , we see the binding statement \verb | <var:P4> := <var:P3> * <var:f> ; | . This moves the condition $ \{ <var:f> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \} $ toward $ \{ <var:f> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P4> = <var:X> ^ <nat:4> \} $ . This is rigorously given through the assignment scheme from usual Hoare techniques . After , the binding code defining $ <nat:5> $ into $ <var:P0>$ . This redefines the condition $ \{ <var:f> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P4> = <var:X> ^ <nat:4> \} $ into $ \{ <var:f> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P4> = <var:X> ^ <nat:4> \land <var:P0> = <nat:5> \} $ . This is given with the assignment law from Hoare techniques . Focusing on the following command seen in our series of commands , we see the environment update line \verb | <var:P1> := <var:P1> * <nat:7> ; | . This statement takes the precondition $ \{ <var:f> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P4> = <var:X> ^ <nat:4> \land <var:P0> = <nat:5> \} $ into $ \{ <var:f> = <var:X> \land <var:P1> = <nat:7> \cdot <var:X> \land <var:P2> = <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P4> = <var:X> ^ <nat:4> \land <var:P0> = <nat:5> \} $ . This is ensured through the assignment rule from standard Hoare techniques . After , the environment update code \verb | <var:P2> := <var:P2> * <nat:6> ; | . This code advances $ \{ <var:f> = <var:X> \land <var:P1> = <nat:7> \cdot <var:X> \land <var:P2> = <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P4> = <var:X> ^ <nat:4> \land <var:P0> = <nat:5> \} $ as $ \{ <var:f> = <var:X> \land <var:P1> = <nat:7> \cdot <var:X> \land <var:P2> = <nat:6> \cdot <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P4> = <var:X> ^ <nat:4> \land <var:P0> = <nat:5> \} $ . This is known to be sound through the assignment law in standard Hoare techniques . Jumping to the following line of code seen in our segment of code , the assignment line yielding $ <var:P4> * <nat:9> $ into $ <var:P4>$ . This line advances the condition $ \{ <var:f> = <var:X> \land <var:P1> = <nat:7> \cdot <var:X> \land <var:P2> = <nat:6> \cdot <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P4> = <var:X> ^ <nat:4> \land <var:P0> = <nat:5> \} $ into $ \{ <var:f> = <var:X> \land <var:P1> = <nat:7> \cdot <var:X> \land <var:P2> = <nat:6> \cdot <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P4> = <nat:9> \cdot <var:X> ^ <nat:4> \land <var:P0> = <nat:5> \} $ . This is known to be sound using the assignment law from Hoare techniques . Stepping forward , we see the variable assignmet line assigning $ <var:P4$ into $ <var:M>$ . This code advances the condition $ \{ <var:f> = <var:X> \land <var:P1> = <nat:7> \cdot <var:X> \land <var:P2> = <nat:6> \cdot <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P4> = <nat:9> \cdot <var:X> ^ <nat:4> \land <var:P0> = <nat:5> \} $ into $ \{ <var:f> = <var:X> \land <var:P1> = <nat:7> \cdot <var:X> \land <var:P2> = <nat:6> \cdot <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P0> = <nat:5> \land <var:M> = <nat:9> \cdot <var:X> ^ <nat:4> \} $ . This is guaranteed by the assignment scheme given by typical Hoare logic . Observing the proceeding bit of code contained in the code segment , the statement \verb | <var:M> := <var:M> + <var:P2> | . This moves the precondition $ \{ <var:f> = <var:X> \land <var:P1> = <nat:7> \cdot <var:X> \land <var:P2> = <nat:6> \cdot <var:X> ^ <nat:2> \land <var:P3> = <var:X> ^ <nat:3> \land <var:P0> = <nat:5> \land <var:M> = <nat:9> \cdot <var:X> ^ <nat:4> \} $ toward the condition $ \{ <var:f> = <var:X> \land <var:P1> = <nat:7> \cdot <var:X> \land <var:P0> = <nat:5> \land <var:M> = <nat:9> \cdot <var:X> ^ <nat:4> + <nat:6> \cdot <var:X> ^ <nat:2> \} $ . This is rigorously given using the assignment law found in typical Hoare reasoning . Taking another step toward the proceeding statement seen in our segment of code , the environment update line yielding $ <var:M> + <var:P1$ as $ <var:M>$ . This statement moves the condition $ \{ <var:f> = <var:X> \land <var:P1> = <nat:7> \cdot <var:X> \land <var:P0> = <nat:5> \land <var:M> = <nat:9> \cdot <var:X> ^ <nat:4> + <nat:6> \cdot <var:X> ^ <nat:2> \} $ as $ \{ <var:f> = <var:X> \land <var:P0> = <nat:5> \land <var:M> = <nat:9> \cdot <var:X> ^ <nat:4> + <nat:6> \cdot <var:X> ^ <nat:2> + <nat:7> \cdot <var:X> \} $ . Taking another step toward the following command in the code segment , we see the variable binding statement \verb | <var:M> := <var:M> + <var:P0> | . This transfers $ \{ <var:f> = <var:X> \land <var:P0> = <nat:5> \land <var:M> = <nat:9> \cdot <var:X> ^ <nat:4> + <nat:6> \cdot <var:X> ^ <nat:2> + <nat:7> \cdot <var:X> \} $ as $ \{ <var:f> = <var:X> \land <var:M> = <nat:9> \cdot <var:X> ^ <nat:4> + <nat:6> \cdot <var:X> ^ <nat:2> + <nat:7> \cdot <var:X> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <var:P4> : string := " <var:P4> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:f> = <var:X> }} <var:P1> := <var:f> ; <var:P2> := <var:P1> * <var:f> ; <var:P3> := <var:P2> * <var:f> ; <var:P4> := <var:P3> * <var:f> ; <var:P0> := <nat:5> ; <var:P1> := <var:P1> * <nat:7> ; <var:P2> := <var:P2> * <nat:6> ; <var:P4> := <var:P4> * <nat:9> ; <var:M> := <var:P4> <var:M> := <var:M> + <var:P2> <var:M> := <var:M> + <var:P1> <var:M> := <var:M> + <var:P0> {{ <var:M> = <nat:9> * <var:X> ^ <nat:4> + <nat:6> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:P1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:P1> = <var:X> /\ <var:P2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:P1> = <var:X> /\ <var:P2> = <var:X> ^ <nat:2> /\ <var:P3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:P1> = <var:X> /\ <var:P2> = <var:X> ^ <nat:2> /\ <var:P3> = <var:X> ^ <nat:3> /\ <var:P4> = <var:X> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:P1> = <var:X> /\ <var:P2> = <var:X> ^ <nat:2> /\ <var:P3> = <var:X> ^ <nat:3> /\ <var:P4> = <var:X> ^ <nat:4> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:P1> = <nat:7> * <var:X> /\ <var:P2> = <var:X> ^ <nat:2> /\ <var:P3> = <var:X> ^ <nat:3> /\ <var:P4> = <var:X> ^ <nat:4> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:P1> = <nat:7> * <var:X> /\ <var:P2> = <nat:6> * <var:X> ^ <nat:2> /\ <var:P3> = <var:X> ^ <nat:3> /\ <var:P4> = <var:X> ^ <nat:4> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:P1> = <nat:7> * <var:X> /\ <var:P2> = <nat:6> * <var:X> ^ <nat:2> /\ <var:P3> = <var:X> ^ <nat:3> /\ <var:P4> = <nat:9> * <var:X> ^ <nat:4> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:P1> = <nat:7> * <var:X> /\ <var:P2> = <nat:6> * <var:X> ^ <nat:2> /\ <var:P3> = <var:X> ^ <nat:3> /\ <var:P0> = <nat:5> /\ <var:M> = <nat:9> * <var:X> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:P1> = <nat:7> * <var:X> /\ <var:P0> = <nat:5> /\ <var:M> = <nat:9> * <var:X> ^ <nat:4> + <nat:6> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:P0> = <nat:5> /\ <var:M> = <nat:9> * <var:X> ^ <nat:4> + <nat:6> * <var:X> ^ <nat:2> + <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:M> = <nat:9> * <var:X> ^ <nat:4> + <nat:6> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 