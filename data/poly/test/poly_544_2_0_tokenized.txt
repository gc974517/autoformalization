\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:8> ; <var:z> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Given ( given any $ <var:g> \in \mathbb{N} $ ) $ <var:A> = <var:g> $ ahead of the evaluation of our program it follows that we see $ <var:z> = <nat:8> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques gives : \begin{eqnarray} \{ <var:A> = <var:g> \} \\ <var:k0> := <nat:8> ; \\ \{ <var:A> = <var:g> \land <var:k0> = <nat:8> \} \\ <var:z> := <var:k0> \\ \{ <var:A> = <var:g> \land <var:z> = <nat:8> \} \end{eqnarray} Considering the preceding argument , this set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:8> ; <var:z> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:A> = <var:g> }} <def:poly> {{ <var:z> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:z> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 