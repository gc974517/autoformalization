\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:3> ; <var:d1> := <nat:8> ; <var:d1> := <var:d1> * <var:H> ; <var:D> := <var:d1> ; <var:D> := <var:D> + <var:d0> \end{verbatim} Assuming it to hold that $ <var:H> = <var:P> $ , given every $ <var:P> \in \mathbb{N} $ , prior to the execution of the list of instructions , then $ <var:D> = <nat:8> * <var:P> + <nat:3> $ when series of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:P> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:H> = <var:P> \land <var:d0> = <nat:3> \} \\ <var:d1> := <nat:8> ; \\ \{ <var:H> = <var:P> \land <var:d0> = <nat:3> \land <var:d1> = <nat:8> \} \\ <var:d1> := <var:d1> * <var:H> ; \\ \{ <var:H> = <var:P> \land <var:d0> = <nat:3> \land <var:d1> = <nat:8> \cdot <var:P> \} \\ <var:D> := <var:d1> ; \\ \{ <var:H> = <var:P> \land <var:d0> = <nat:3> \land <var:D> = <nat:8> \cdot <var:P> \} \\ <var:D> := <var:D> + <var:d0> \\ \{ <var:H> = <var:P> \land <var:D> = <nat:8> \cdot <var:P> + <nat:3> \} \end{eqnarray} Using standard Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:H> = <var:P> }} <var:d0> := <nat:3> ; <var:d1> := <nat:8> ; <var:d1> := <var:d1> * <var:H> ; <var:D> := <var:d1> ; <var:D> := <var:D> + <var:d0> {{ <var:D> = <nat:8> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:P> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:P> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:P> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:P> /\ <var:d0> = <nat:3> /\ <var:D> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:P> /\ <var:D> = <nat:8> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 