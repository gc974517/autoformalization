\begin{document} \begin{theorem} Define a program as follows \begin{verbatim} <var:f1> := <var:Q> ; <var:f2> := <var:f1> * <var:Q> ; <var:f3> := <var:f2> * <var:Q> ; <var:f4> := <var:f3> * <var:Q> ; <var:f0> := <nat:6> ; <var:f1> := <var:f1> * <nat:9> ; <var:f2> := <var:f2> * <nat:7> ; <var:f3> := <var:f3> * <nat:2> ; <var:f4> := <var:f4> * <nat:9> ; <var:N> := <var:f4> <var:N> := <var:N> + <var:f3> <var:N> := <var:N> + <var:f2> <var:N> := <var:N> + <var:f1> <var:N> := <var:N> + <var:f0> \end{verbatim} Given it to be that $ <var:Q> = <var:A> $ before the evaluation of our series of commands it holds that $ <var:N> = <nat:9> \cdot <var:A> ^ <nat:4> + <nat:2> \cdot <var:A> ^ <nat:3> + <nat:7> \cdot <var:A> ^ <nat:2> + <nat:9> \cdot <var:A> + <nat:6> $ once list of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:A> \} \\ <var:f1> := <var:Q> ; \\ \{ <var:Q> = <var:A> \land <var:f1> = <var:A> \} \\ <var:f2> := <var:f1> * <var:Q> ; \\ \{ <var:Q> = <var:A> \land <var:f1> = <var:A> \land <var:f2> = <var:A> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:Q> ; \\ \{ <var:Q> = <var:A> \land <var:f1> = <var:A> \land <var:f2> = <var:A> ^ <nat:2> \land <var:f3> = <var:A> ^ <nat:3> \} \\ <var:f4> := <var:f3> * <var:Q> ; \\ \{ <var:Q> = <var:A> \land <var:f1> = <var:A> \land <var:f2> = <var:A> ^ <nat:2> \land <var:f3> = <var:A> ^ <nat:3> \land <var:f4> = <var:A> ^ <nat:4> \} \\ <var:f0> := <nat:6> ; \\ \{ <var:Q> = <var:A> \land <var:f1> = <var:A> \land <var:f2> = <var:A> ^ <nat:2> \land <var:f3> = <var:A> ^ <nat:3> \land <var:f4> = <var:A> ^ <nat:4> \land <var:f0> = <nat:6> \} \\ <var:f1> := <var:f1> * <nat:9> ; \\ \{ <var:Q> = <var:A> \land <var:f1> = <nat:9> \cdot <var:A> \land <var:f2> = <var:A> ^ <nat:2> \land <var:f3> = <var:A> ^ <nat:3> \land <var:f4> = <var:A> ^ <nat:4> \land <var:f0> = <nat:6> \} \\ <var:f2> := <var:f2> * <nat:7> ; \\ \{ <var:Q> = <var:A> \land <var:f1> = <nat:9> \cdot <var:A> \land <var:f2> = <nat:7> \cdot <var:A> ^ <nat:2> \land <var:f3> = <var:A> ^ <nat:3> \land <var:f4> = <var:A> ^ <nat:4> \land <var:f0> = <nat:6> \} \\ <var:f3> := <var:f3> * <nat:2> ; \\ \{ <var:Q> = <var:A> \land <var:f1> = <nat:9> \cdot <var:A> \land <var:f2> = <nat:7> \cdot <var:A> ^ <nat:2> \land <var:f3> = <nat:2> \cdot <var:A> ^ <nat:3> \land <var:f4> = <var:A> ^ <nat:4> \land <var:f0> = <nat:6> \} \\ <var:f4> := <var:f4> * <nat:9> ; \\ \{ <var:Q> = <var:A> \land <var:f1> = <nat:9> \cdot <var:A> \land <var:f2> = <nat:7> \cdot <var:A> ^ <nat:2> \land <var:f3> = <nat:2> \cdot <var:A> ^ <nat:3> \land <var:f4> = <nat:9> \cdot <var:A> ^ <nat:4> \land <var:f0> = <nat:6> \} \\ <var:N> := <var:f4> \\ \{ <var:Q> = <var:A> \land <var:f1> = <nat:9> \cdot <var:A> \land <var:f2> = <nat:7> \cdot <var:A> ^ <nat:2> \land <var:f3> = <nat:2> \cdot <var:A> ^ <nat:3> \land <var:f0> = <nat:6> \land <var:N> = <nat:9> \cdot <var:A> ^ <nat:4> \} \\ <var:N> := <var:N> + <var:f3> \\ \{ <var:Q> = <var:A> \land <var:f1> = <nat:9> \cdot <var:A> \land <var:f2> = <nat:7> \cdot <var:A> ^ <nat:2> \land <var:f0> = <nat:6> \land <var:N> = <nat:9> \cdot <var:A> ^ <nat:4> + <nat:2> \cdot <var:A> ^ <nat:3> \} \\ <var:N> := <var:N> + <var:f2> \\ \{ <var:Q> = <var:A> \land <var:f1> = <nat:9> \cdot <var:A> \land <var:f0> = <nat:6> \land <var:N> = <nat:9> \cdot <var:A> ^ <nat:4> + <nat:2> \cdot <var:A> ^ <nat:3> + <nat:7> \cdot <var:A> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:f1> \\ \{ <var:Q> = <var:A> \land <var:f0> = <nat:6> \land <var:N> = <nat:9> \cdot <var:A> ^ <nat:4> + <nat:2> \cdot <var:A> ^ <nat:3> + <nat:7> \cdot <var:A> ^ <nat:2> + <nat:9> \cdot <var:A> \} \\ <var:N> := <var:N> + <var:f0> \\ \{ <var:Q> = <var:A> \land <var:N> = <nat:9> \cdot <var:A> ^ <nat:4> + <nat:2> \cdot <var:A> ^ <nat:3> + <nat:7> \cdot <var:A> ^ <nat:2> + <nat:9> \cdot <var:A> + <nat:6> \} \end{eqnarray} The application of Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <var:f4> : string := " <var:f4> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:Q> = <var:A> }} <var:f1> := <var:Q> ; <var:f2> := <var:f1> * <var:Q> ; <var:f3> := <var:f2> * <var:Q> ; <var:f4> := <var:f3> * <var:Q> ; <var:f0> := <nat:6> ; <var:f1> := <var:f1> * <nat:9> ; <var:f2> := <var:f2> * <nat:7> ; <var:f3> := <var:f3> * <nat:2> ; <var:f4> := <var:f4> * <nat:9> ; <var:N> := <var:f4> <var:N> := <var:N> + <var:f3> <var:N> := <var:N> + <var:f2> <var:N> := <var:N> + <var:f1> <var:N> := <var:N> + <var:f0> {{ <var:N> = <nat:9> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:f1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:f1> = <var:A> /\ <var:f2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:f1> = <var:A> /\ <var:f2> = <var:A> ^ <nat:2> /\ <var:f3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:f1> = <var:A> /\ <var:f2> = <var:A> ^ <nat:2> /\ <var:f3> = <var:A> ^ <nat:3> /\ <var:f4> = <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:f1> = <var:A> /\ <var:f2> = <var:A> ^ <nat:2> /\ <var:f3> = <var:A> ^ <nat:3> /\ <var:f4> = <var:A> ^ <nat:4> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:f1> = <nat:9> * <var:A> /\ <var:f2> = <var:A> ^ <nat:2> /\ <var:f3> = <var:A> ^ <nat:3> /\ <var:f4> = <var:A> ^ <nat:4> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:f1> = <nat:9> * <var:A> /\ <var:f2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:f3> = <var:A> ^ <nat:3> /\ <var:f4> = <var:A> ^ <nat:4> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:f1> = <nat:9> * <var:A> /\ <var:f2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:f3> = <nat:2> * <var:A> ^ <nat:3> /\ <var:f4> = <var:A> ^ <nat:4> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:f1> = <nat:9> * <var:A> /\ <var:f2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:f3> = <nat:2> * <var:A> ^ <nat:3> /\ <var:f4> = <nat:9> * <var:A> ^ <nat:4> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:f1> = <nat:9> * <var:A> /\ <var:f2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:f3> = <nat:2> * <var:A> ^ <nat:3> /\ <var:f0> = <nat:6> /\ <var:N> = <nat:9> * <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:f1> = <nat:9> * <var:A> /\ <var:f2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:f0> = <nat:6> /\ <var:N> = <nat:9> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:f1> = <nat:9> * <var:A> /\ <var:f0> = <nat:6> /\ <var:N> = <nat:9> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:f0> = <nat:6> /\ <var:N> = <nat:9> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:N> = <nat:9> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 