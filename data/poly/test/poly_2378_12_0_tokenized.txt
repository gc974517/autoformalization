\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:h0> := <nat:6> ; <var:h2> := <nat:8> ; <var:h2> := <var:h2> * <var:P> ; <var:h2> := <var:h2> * <var:P> ; <var:h4> := <nat:3> ; <var:h4> := <var:h4> * <var:P> ; <var:h4> := <var:h4> * <var:P> ; <var:h4> := <var:h4> * <var:P> ; <var:h4> := <var:h4> * <var:P> ; <var:i> := <var:h4> ; <var:i> := <var:i> + <var:h2> ; <var:i> := <var:i> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:P> = <var:I> $ ahead of interpreting this code segment it holds that we see $ <var:i> = <nat:3> * <var:I> ^ <nat:4> + <nat:8> * <var:I> ^ <nat:2> + <nat:6> $ after list of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:I> \} \\ <var:h0> := <nat:6> ; \\ \{ <var:P> = <var:I> \land <var:h0> = <nat:6> \} \\ <var:h2> := <nat:8> ; \\ \{ <var:P> = <var:I> \land <var:h0> = <nat:6> \land <var:h2> = <nat:8> \} \\ <var:h2> := <var:h2> * <var:P> ; \\ \{ <var:P> = <var:I> \land <var:h0> = <nat:6> \land <var:h2> = <nat:8> * <var:I> \} \\ <var:h2> := <var:h2> * <var:P> ; \\ \{ <var:P> = <var:I> \land <var:h0> = <nat:6> \land <var:h2> = <nat:8> * <var:I> ^ <nat:2> \} \\ <var:h4> := <nat:3> ; \\ \{ <var:P> = <var:I> \land <var:h0> = <nat:6> \land <var:h2> = <nat:8> * <var:I> ^ <nat:2> \land <var:h4> = <nat:3> \} \\ <var:h4> := <var:h4> * <var:P> ; \\ \{ <var:P> = <var:I> \land <var:h0> = <nat:6> \land <var:h2> = <nat:8> * <var:I> ^ <nat:2> \land <var:h4> = <nat:3> * <var:I> \} \\ <var:h4> := <var:h4> * <var:P> ; \\ \{ <var:P> = <var:I> \land <var:h0> = <nat:6> \land <var:h2> = <nat:8> * <var:I> ^ <nat:2> \land <var:h4> = <nat:3> * <var:I> ^ <nat:2> \} \\ <var:h4> := <var:h4> * <var:P> ; \\ \{ <var:P> = <var:I> \land <var:h0> = <nat:6> \land <var:h2> = <nat:8> * <var:I> ^ <nat:2> \land <var:h4> = <nat:3> * <var:I> ^ <nat:3> \} \end{eqnarray} Advancing evaluating this series of commands produces : \begin{eqnarray} <var:h4> := <var:h4> * <var:P> ; \\ \{ <var:P> = <var:I> \land <var:h0> = <nat:6> \land <var:h2> = <nat:8> * <var:I> ^ <nat:2> \land <var:h4> = <nat:3> * <var:I> ^ <nat:4> \} \\ <var:i> := <var:h4> ; \\ \{ <var:P> = <var:I> \land <var:h0> = <nat:6> \land <var:h2> = <nat:8> * <var:I> ^ <nat:2> \land <var:i> = <nat:3> * <var:I> ^ <nat:4> \} \\ <var:i> := <var:i> + <var:h2> ; \\ \{ <var:P> = <var:I> \land <var:h0> = <nat:6> \land <var:i> = <nat:3> * <var:I> ^ <nat:4> + <nat:8> * <var:I> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:h0> \\ \{ <var:P> = <var:I> \land <var:i> = <nat:3> * <var:I> ^ <nat:4> + <nat:8> * <var:I> ^ <nat:2> + <nat:6> \} \end{eqnarray} Using standard Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h4> : string := " <var:h4> " . Definition <def:poly> := <var:h0> := <nat:6> ; <var:h2> := <nat:8> ; <var:h2> := <var:h2> * <var:P> ; <var:h2> := <var:h2> * <var:P> ; <var:h4> := <nat:3> ; <var:h4> := <var:h4> * <var:P> ; <var:h4> := <var:h4> * <var:P> ; <var:h4> := <var:h4> * <var:P> ; <var:h4> := <var:h4> * <var:P> ; <var:i> := <var:h4> ; <var:i> := <var:i> + <var:h2> ; <var:i> := <var:i> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:P> = <var:I> }} <def:poly> {{ <var:i> = <nat:3> * <var:I> ^ <nat:4> + <nat:8> * <var:I> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:h0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:h0> = <nat:6> /\ <var:h2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:h0> = <nat:6> /\ <var:h2> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:h0> = <nat:6> /\ <var:h2> = <nat:8> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:h0> = <nat:6> /\ <var:h2> = <nat:8> * <var:I> ^ <nat:2> /\ <var:h4> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:h0> = <nat:6> /\ <var:h2> = <nat:8> * <var:I> ^ <nat:2> /\ <var:h4> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:h0> = <nat:6> /\ <var:h2> = <nat:8> * <var:I> ^ <nat:2> /\ <var:h4> = <nat:3> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:h0> = <nat:6> /\ <var:h2> = <nat:8> * <var:I> ^ <nat:2> /\ <var:h4> = <nat:3> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:h0> = <nat:6> /\ <var:h2> = <nat:8> * <var:I> ^ <nat:2> /\ <var:h4> = <nat:3> * <var:I> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:h0> = <nat:6> /\ <var:h2> = <nat:8> * <var:I> ^ <nat:2> /\ <var:i> = <nat:3> * <var:I> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:h0> = <nat:6> /\ <var:i> = <nat:3> * <var:I> ^ <nat:4> + <nat:8> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:i> = <nat:3> * <var:I> ^ <nat:4> + <nat:8> * <var:I> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 