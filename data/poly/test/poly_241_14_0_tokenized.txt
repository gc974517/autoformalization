\begin{document} \begin{theorem} We define a code in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:7> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:w> ; <var:b2> := <nat:8> ; <var:b2> := <var:b2> * <var:w> ; <var:b2> := <var:b2> * <var:w> ; <var:b3> := <nat:1> ; <var:b3> := <var:b3> * <var:w> ; <var:b3> := <var:b3> * <var:w> ; <var:b3> := <var:b3> * <var:w> ; <var:j> := <var:b3> ; <var:j> := <var:j> + <var:b2> ; <var:j> := <var:j> + <var:b1> ; <var:j> := <var:j> + <var:b0> \end{verbatim} Assume it to be that $ <var:w> = <var:T> $ before executing the code segment then we have $ <var:j> = <nat:1> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:7> $ after series of instructions has finished executing . \end{theorem} \begin{proof} The application of usual Hoare reasoning gives : \begin{eqnarray} \{ <var:w> = <var:T> \} \\ <var:b0> := <nat:7> ; \\ \{ <var:w> = <var:T> \land <var:b0> = <nat:7> \} \\ <var:b1> := <nat:5> ; \\ \{ <var:w> = <var:T> \land <var:b0> = <nat:7> \land <var:b1> = <nat:5> \} \\ <var:b1> := <var:b1> * <var:w> ; \\ \{ <var:w> = <var:T> \land <var:b0> = <nat:7> \land <var:b1> = <nat:5> * <var:T> \} \\ <var:b2> := <nat:8> ; \\ \{ <var:w> = <var:T> \land <var:b0> = <nat:7> \land <var:b1> = <nat:5> * <var:T> \land <var:b2> = <nat:8> \} \\ <var:b2> := <var:b2> * <var:w> ; \\ \{ <var:w> = <var:T> \land <var:b0> = <nat:7> \land <var:b1> = <nat:5> * <var:T> \land <var:b2> = <nat:8> * <var:T> \} \\ <var:b2> := <var:b2> * <var:w> ; \\ \{ <var:w> = <var:T> \land <var:b0> = <nat:7> \land <var:b1> = <nat:5> * <var:T> \land <var:b2> = <nat:8> * <var:T> ^ <nat:2> \} \\ <var:b3> := <nat:1> ; \\ \{ <var:w> = <var:T> \land <var:b0> = <nat:7> \land <var:b1> = <nat:5> * <var:T> \land <var:b2> = <nat:8> * <var:T> ^ <nat:2> \land <var:b3> = <nat:1> \} \\ <var:b3> := <var:b3> * <var:w> ; \\ \{ <var:w> = <var:T> \land <var:b0> = <nat:7> \land <var:b1> = <nat:5> * <var:T> \land <var:b2> = <nat:8> * <var:T> ^ <nat:2> \land <var:b3> = <nat:1> * <var:T> \} \\ <var:b3> := <var:b3> * <var:w> ; \\ \{ <var:w> = <var:T> \land <var:b0> = <nat:7> \land <var:b1> = <nat:5> * <var:T> \land <var:b2> = <nat:8> * <var:T> ^ <nat:2> \land <var:b3> = <nat:1> * <var:T> ^ <nat:2> \} \\ <var:b3> := <var:b3> * <var:w> ; \\ \{ <var:w> = <var:T> \land <var:b0> = <nat:7> \land <var:b1> = <nat:5> * <var:T> \land <var:b2> = <nat:8> * <var:T> ^ <nat:2> \land <var:b3> = <nat:1> * <var:T> ^ <nat:3> \} \\ <var:j> := <var:b3> ; \\ \{ <var:w> = <var:T> \land <var:b0> = <nat:7> \land <var:b1> = <nat:5> * <var:T> \land <var:b2> = <nat:8> * <var:T> ^ <nat:2> \land <var:j> = <nat:1> * <var:T> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:b2> ; \\ \{ <var:w> = <var:T> \land <var:b0> = <nat:7> \land <var:b1> = <nat:5> * <var:T> \land <var:j> = <nat:1> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:b1> ; \\ \{ <var:w> = <var:T> \land <var:b0> = <nat:7> \land <var:j> = <nat:1> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> + <nat:5> * <var:T> \} \\ <var:j> := <var:j> + <var:b0> \\ \{ <var:w> = <var:T> \land <var:j> = <nat:1> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:7> \} \end{eqnarray} As a consequence , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:w> = <var:T> }} <var:b0> := <nat:7> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:w> ; <var:b2> := <nat:8> ; <var:b2> := <var:b2> * <var:w> ; <var:b2> := <var:b2> * <var:w> ; <var:b3> := <nat:1> ; <var:b3> := <var:b3> * <var:w> ; <var:b3> := <var:b3> * <var:w> ; <var:b3> := <var:b3> * <var:w> ; <var:j> := <var:b3> ; <var:j> := <var:j> + <var:b2> ; <var:j> := <var:j> + <var:b1> ; <var:j> := <var:j> + <var:b0> {{ <var:j> = <nat:1> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:5> * <var:T> /\ <var:b2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:5> * <var:T> /\ <var:b2> = <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:5> * <var:T> /\ <var:b2> = <nat:8> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:5> * <var:T> /\ <var:b2> = <nat:8> * <var:T> ^ <nat:2> /\ <var:b3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:5> * <var:T> /\ <var:b2> = <nat:8> * <var:T> ^ <nat:2> /\ <var:b3> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:5> * <var:T> /\ <var:b2> = <nat:8> * <var:T> ^ <nat:2> /\ <var:b3> = <nat:1> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:5> * <var:T> /\ <var:b2> = <nat:8> * <var:T> ^ <nat:2> /\ <var:b3> = <nat:1> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:5> * <var:T> /\ <var:b2> = <nat:8> * <var:T> ^ <nat:2> /\ <var:j> = <nat:1> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:b0> = <nat:7> /\ <var:b1> = <nat:5> * <var:T> /\ <var:j> = <nat:1> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:b0> = <nat:7> /\ <var:j> = <nat:1> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> + <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:T> /\ <var:j> = <nat:1> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 