\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:v1> := <var:E> ; <var:v2> := <var:v1> * <var:E> ; <var:v0> := <nat:4> ; <var:v2> := <var:v2> * <nat:1> ; <var:a> := <var:v2> <var:a> := <var:a> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:E> = <var:h> $ ahead of running the set of commands , then we see $ <var:a> = <nat:1> \times <var:h> ^ <nat:2> + <nat:4> $ once set of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for our program can be shown using usual Hoare logic . Shifting focus toward the proceeding step seen in our set of commands , the assignment command \verb | <var:v1> := <var:E> ; | . This redefines the condition $ \{ <var:E> = <var:h> \} $ as the postcondition $ \{ <var:E> = <var:h> \land <var:v1> = <var:h> \} $ . Honing in on the upcoming line of code seen in the set of instructions , we have the variable binding command \verb | <var:v2> := <var:v1> * <var:E> ; | . This command moves the condition $ \{ <var:E> = <var:h> \land <var:v1> = <var:h> \} $ into the postcondition $ \{ <var:E> = <var:h> \land <var:v1> = <var:h> \land <var:v2> = <var:h> ^ <nat:2> \} $ . This is ensured by the assignment rule given by typical Hoare reasoning . Advancing to the upcoming line found in the set of instructions , we have the variable assignmet line \verb | <var:v0> := <nat:4> ; | . This takes the condition $ \{ <var:E> = <var:h> \land <var:v1> = <var:h> \land <var:v2> = <var:h> ^ <nat:2> \} $ to $ \{ <var:E> = <var:h> \land <var:v1> = <var:h> \land <var:v2> = <var:h> ^ <nat:2> \land <var:v0> = <nat:4> \} $ . Advancing to the next step , we have the variable update code \verb | <var:v2> := <var:v2> * <nat:1> ; | . This redefines the condition $ \{ <var:E> = <var:h> \land <var:v1> = <var:h> \land <var:v2> = <var:h> ^ <nat:2> \land <var:v0> = <nat:4> \} $ as the postcondition $ \{ <var:E> = <var:h> \land <var:v1> = <var:h> \land <var:v2> = <nat:1> * <var:h> ^ <nat:2> \land <var:v0> = <nat:4> \} $ . Taking a look at the proceeding command contained in our program , we have the binding command \verb | <var:a> := <var:v2> | . This forwards the precondition $ \{ <var:E> = <var:h> \land <var:v1> = <var:h> \land <var:v2> = <nat:1> * <var:h> ^ <nat:2> \land <var:v0> = <nat:4> \} $ to the postcondition $ \{ <var:E> = <var:h> \land <var:v1> = <var:h> \land <var:v0> = <nat:4> \land <var:a> = <nat:1> * <var:h> ^ <nat:2> \} $ . Moving on to the next step , the variable binding code letting $ <var:a> + <var:v0$ into $ <var:a>$ . This takes the condition $ \{ <var:E> = <var:h> \land <var:v1> = <var:h> \land <var:v0> = <nat:4> \land <var:a> = <nat:1> * <var:h> ^ <nat:2> \} $ to the postcondition $ \{ <var:E> = <var:h> \land <var:a> = <nat:1> * <var:h> ^ <nat:2> + <nat:4> \} $ . This is rigorously given by the assignment scheme given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v1> := <var:E> ; <var:v2> := <var:v1> * <var:E> ; <var:v0> := <nat:4> ; <var:v2> := <var:v2> * <nat:1> ; <var:a> := <var:v2> <var:a> := <var:a> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:E> = <var:h> }} <def:poly> {{ <var:a> = <nat:1> * <var:h> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:v1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:v1> = <var:h> /\ <var:v2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:v1> = <var:h> /\ <var:v2> = <var:h> ^ <nat:2> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:v1> = <var:h> /\ <var:v2> = <nat:1> * <var:h> ^ <nat:2> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:v1> = <var:h> /\ <var:v0> = <nat:4> /\ <var:a> = <nat:1> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:a> = <nat:1> * <var:h> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 