\begin{document} \begin{theorem} Let the following code such that \begin{verbatim} <var:w0> := <nat:5> ; <var:E> := <var:w0> \end{verbatim} Allow that $ <var:C> = <var:Y> $ ahead of interpreting the code , it follows that we see $ <var:E> = <nat:5> $ when list of instructions has terminated . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands is done using standard Hoare logic . Keeping momentum , we have the line yielding $ <nat:5> $ toward $ <var:w0>$ . This statement moves $ \{ <var:C> = <var:Y> \} $ into the condition $ \{ <var:C> = <var:Y> \land <var:w0> = <nat:5> \} $ . This is rigorously given by the assignment inference rule from typical Hoare reasoning . Moving on , we have the command giving $ <var:w0$ toward $ <var:E>$ . This takes $ \{ <var:C> = <var:Y> \land <var:w0> = <nat:5> \} $ as the condition $ \{ <var:C> = <var:Y> \land <var:E> = <nat:5> \} $ . This is sound by the assignment law defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:C> = <var:Y> }} <var:w0> := <nat:5> ; <var:E> := <var:w0> {{ <var:E> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:w0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:E> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 