\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:7> ; <var:n> := <var:i0> \end{verbatim} Given $ <var:t> = <var:I> $ ahead of interpreting the code it follows that $ <var:n> = <nat:7> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques yields : \begin{eqnarray} \{ <var:t> = <var:I> \} \\ <var:i0> := <nat:7> ; \\ \{ <var:t> = <var:I> \land <var:i0> = <nat:7> \} \\ <var:n> := <var:i0> \\ \{ <var:t> = <var:I> \land <var:n> = <nat:7> \} \end{eqnarray} Therefore , the series of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:t> = <var:I> }} <var:i0> := <nat:7> ; <var:n> := <var:i0> {{ <var:n> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:I> /\ <var:n> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 