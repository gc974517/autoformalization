\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as \begin{verbatim} <var:Z> := <nat:3> ; <var:Z> := <nat:1> + <var:Z> * <var:t> ; <var:Z> := <nat:3> + <var:Z> * <var:t> ; <var:Z> := <nat:1> + <var:Z> * <var:t> ; <var:Z> := <nat:3> + <var:Z> * <var:t> \end{verbatim} Allowing it to be that $ <var:t> = <var:a> $ ahead of interpreting the series of instructions it follows that we have $ <var:Z> = <nat:3> \times <var:a> ^ <nat:4> + <nat:1> \times <var:a> ^ <nat:3> + <nat:3> \times <var:a> ^ <nat:2> + <nat:1> \times <var:a> + <nat:3> $ . \end{theorem} \begin{proof} We can see that the following decorated series of instructions . \begin{eqnarray} \{ <var:t> = <var:a> \} \\ <var:Z> := <nat:3> ; \\ \{ <var:t> = <var:a> \land <var:Z> = <nat:3> \} \\ <var:Z> := <nat:1> + <var:Z> * <var:t> ; \\ \{ <var:t> = <var:a> \land <var:Z> = <nat:3> \times <var:a> + <nat:1> \} \\ <var:Z> := <nat:3> + <var:Z> * <var:t> ; \\ \{ <var:t> = <var:a> \land <var:Z> = <nat:3> \times <var:a> ^ <nat:2> + <nat:1> \times <var:a> + <nat:3> \} \\ <var:Z> := <nat:1> + <var:Z> * <var:t> ; \\ \{ <var:t> = <var:a> \land <var:Z> = <nat:3> \times <var:a> ^ <nat:3> + <nat:1> \times <var:a> ^ <nat:2> + <nat:3> \times <var:a> + <nat:1> \} \\ <var:Z> := <nat:3> + <var:Z> * <var:t> \\ \{ <var:t> = <var:a> \land <var:Z> = <nat:3> \times <var:a> ^ <nat:4> + <nat:1> \times <var:a> ^ <nat:3> + <nat:3> \times <var:a> ^ <nat:2> + <nat:1> \times <var:a> + <nat:3> \} \end{eqnarray} Applying typical Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:t> = <var:a> }} <var:Z> := <nat:3> ; <var:Z> := <nat:1> + <var:Z> * <var:t> ; <var:Z> := <nat:3> + <var:Z> * <var:t> ; <var:Z> := <nat:1> + <var:Z> * <var:t> ; <var:Z> := <nat:3> + <var:Z> * <var:t> {{ <var:Z> = <nat:3> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:Z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:Z> = <nat:3> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:Z> = <nat:3> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:Z> = <nat:3> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:a> /\ <var:Z> = <nat:3> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 