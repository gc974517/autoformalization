\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:O> := <nat:4> ; <var:O> := <var:O> * <var:E> ; <var:O> := <nat:2> + <var:O> * <var:E> ; <var:O> := <nat:2> + <var:O> * <var:E> ; <var:O> := <var:O> * <var:E> ; <var:O> := <nat:3> + <var:O> * <var:E> ; <var:O> := <nat:2> + <var:O> * <var:E> ; <var:O> := <nat:1> + <var:O> * <var:E> ; <var:O> := <var:O> * <var:E> ; <var:O> := <nat:4> + <var:O> * <var:E> ; <var:O> := <nat:4> + <var:O> * <var:E> ; <var:O> := <nat:1> + <var:O> * <var:E> ; <var:O> := <nat:2> + <var:O> * <var:E> ; <var:O> := <nat:2> + <var:O> * <var:E> \end{verbatim} \end{definition} \begin{theorem} Allow ( for every positive coefficients $ <var:d> $ ) it to be that $ <var:E> = <var:d> $ prior to the evaluation of the code , then we see $ <var:O> = <nat:4> * <var:d> ^ <nat:13> + <nat:2> * <var:d> ^ <nat:11> + <nat:2> * <var:d> ^ <nat:10> + <nat:3> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:1> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the program is accomplished with usual Hoare logic . Keeping momentum , the variable assignmet line \verb | <var:O> := <nat:4> ; | . This forwards $ \{ <var:E> = <var:d> \} $ as $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> \} $ . This is shown by the assignment law given by usual Hoare reasoning . Paying attention to the upcoming line found in the list of instructions , the variable binding line defining $ <var:O> * <var:E> $ into $ <var:O>$ . This code forwards the condition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> \} $ into the condition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> + \} $ . This is known to be sound using the assignment rule from usual Hoare reasoning . Keeping momentum , the assignment statement binding $ <nat:2> + <var:O> * <var:E> $ into $ <var:O>$ . This transfers the precondition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> + \} $ into the postcondition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> \} $ . Immediately after , we have the assignment statement assigning $ <nat:2> + <var:O> * <var:E> $ into $ <var:O>$ . This command redefines the condition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> \} $ as the condition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:3> + <nat:2> * <var:d> + <nat:2> \} $ . Focusing on the proceeding line of code in the series of instructions , we have the environment update command yielding $ <var:O> * <var:E> $ into $ <var:O>$ . This line forwards the precondition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:3> + <nat:2> * <var:d> + <nat:2> \} $ to the condition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + \} $ . This is sound through the assignment rule given in typical Hoare techniques . Honing in on the proceeding command found in the list of instructions , the variable assignmet statement giving $ <nat:3> + <var:O> * <var:E> $ as $ <var:O>$ . This advances $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + \} $ as $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> \} $ . After , we see the assignment code \verb | <var:O> := <nat:2> + <var:O> * <var:E> ; | . This statement takes $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> \} $ to the postcondition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:3> * <var:d> + <nat:2> \} $ . Following , the variable binding line \verb | <var:O> := <nat:1> + <var:O> * <var:E> ; | . This statement takes the condition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:3> * <var:d> + <nat:2> \} $ to $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> \} $ . Immediately following , we have the variable assignmet command \verb | <var:O> := <var:O> * <var:E> ; | . This advances $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> \} $ into the condition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + \} $ . This is given with the assignment law defined in usual Hoare techniques . Observing the following piece of code seen in our program , we have the environment update statement letting $ <nat:4> + <var:O> * <var:E> $ into $ <var:O>$ . This advances the condition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + \} $ to $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:4> \} $ . Moving onward , the assignment statement letting $ <nat:4> + <var:O> * <var:E> $ to $ <var:O>$ . This redefines the condition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:4> \} $ into $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:3> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> + <nat:4> \} $ . This is shown using the assignment inference rule defined by typical Hoare logic . Focusing on the upcoming piece of code contained in our series of instructions , the binding command \verb | <var:O> := <nat:1> + <var:O> * <var:E> ; | . This statement advances $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:3> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> + <nat:4> \} $ into the postcondition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:11> + <nat:2> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:8> + <nat:3> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> \} $ . This is rigorously given using the assignment scheme defined by usual Hoare techniques . Observing the next line contained in our set of instructions , the variable assignmet line assigning $ <nat:2> + <var:O> * <var:E> $ toward $ <var:O>$ . This forwards the condition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:11> + <nat:2> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:8> + <nat:3> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> \} $ toward $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:12> + <nat:2> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:9> + <nat:3> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:1> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> \} $ . Moving forward to the next step , the code assigning $ <nat:2> + <var:O> * <var:E$ toward $ <var:O>$ . This forwards the condition $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:12> + <nat:2> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:9> + <nat:3> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:1> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> \} $ toward $ \{ <var:E> = <var:d> \land <var:O> = <nat:4> * <var:d> ^ <nat:13> + <nat:2> * <var:d> ^ <nat:11> + <nat:2> * <var:d> ^ <nat:10> + <nat:3> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:1> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> \} $ . This is guaranteed by the assignment inference rule from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:4> ; <var:O> := <var:O> * <var:E> ; <var:O> := <nat:2> + <var:O> * <var:E> ; <var:O> := <nat:2> + <var:O> * <var:E> ; <var:O> := <var:O> * <var:E> ; <var:O> := <nat:3> + <var:O> * <var:E> ; <var:O> := <nat:2> + <var:O> * <var:E> ; <var:O> := <nat:1> + <var:O> * <var:E> ; <var:O> := <var:O> * <var:E> ; <var:O> := <nat:4> + <var:O> * <var:E> ; <var:O> := <nat:4> + <var:O> * <var:E> ; <var:O> := <nat:1> + <var:O> * <var:E> ; <var:O> := <nat:2> + <var:O> * <var:E> ; <var:O> := <nat:2> + <var:O> * <var:E> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:E> = <var:d> }} <def:poly> {{ <var:O> = <nat:4> * <var:d> ^ <nat:13> + <nat:2> * <var:d> ^ <nat:11> + <nat:2> * <var:d> ^ <nat:10> + <nat:3> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:1> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> * <var:d> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> * <var:d> ^ <nat:3> + <nat:2> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:3> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:3> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> * <var:d> ^ <nat:11> + <nat:2> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:8> + <nat:3> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> * <var:d> ^ <nat:12> + <nat:2> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:9> + <nat:3> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:1> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:O> = <nat:4> * <var:d> ^ <nat:13> + <nat:2> * <var:d> ^ <nat:11> + <nat:2> * <var:d> ^ <nat:10> + <nat:3> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:1> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 