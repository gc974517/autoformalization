\begin{document} \begin{theorem} We define the following list of instructions as \begin{verbatim} <var:q> := <nat:4> ; <var:q> := <nat:3> + <var:q> * <var:Y> \end{verbatim} Assuming $ <var:Y> = <var:I> $ ahead of interpreting this program , then we have $ <var:q> = <nat:4> \times <var:I> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:I> \} \\ <var:q> := <nat:4> ; \\ \{ <var:Y> = <var:I> \land <var:q> = <nat:4> \} \\ <var:q> := <nat:3> + <var:q> * <var:Y> \\ \{ <var:Y> = <var:I> \land <var:q> = <nat:4> * <var:I> + <nat:3> \} \end{eqnarray} The application of standard Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:Y> = <var:I> }} <var:q> := <nat:4> ; <var:q> := <nat:3> + <var:q> * <var:Y> {{ <var:q> = <nat:4> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:I> /\ <var:q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:I> /\ <var:q> = <nat:4> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 