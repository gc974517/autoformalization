\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:h1> := <var:t> ; <var:h2> := <var:h1> * <var:t> ; <var:h3> := <var:h2> * <var:t> ; <var:h4> := <var:h3> * <var:t> ; <var:h5> := <var:h4> * <var:t> ; <var:h0> := <nat:4> ; <var:h1> := <var:h1> * <nat:2> ; <var:h4> := <var:h4> * <nat:5> ; <var:h5> := <var:h5> * <nat:8> ; <var:p> := <var:h5> <var:p> := <var:p> + <var:h4> <var:p> := <var:p> + <var:h1> <var:p> := <var:p> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allowing with some natural numbers $ <var:l> $ it to hold that $ <var:t> = <var:l> $ before evaluating our program , then we have $ <var:p> = <nat:8> \times <var:l> ^ <nat:5> + <nat:5> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands is shown with standard Hoare reasoning . Focusing on the upcoming piece of code seen in the list of instructions , we see \begin{eqnarray} \{ <var:t> = <var:l> \} \, <var:h1> := <var:t> \, \{ <var:t> = <var:l> \land <var:h1> = <var:l> \} \end{eqnarray} This is shown using the variable update rule in usual Hoare logic . Moving on to the next step , we see \begin{eqnarray} \{ <var:t> = <var:l> \} \, <var:h1> := <var:t> \, \{ <var:t> = <var:l> \land <var:h1> = <var:l> \} \\ \{ <var:t> = <var:l> \land <var:h1> = <var:l> \} \, <var:h2> := <var:h1> * <var:t> \, \{ <var:t> = <var:l> \land <var:h1> = <var:l> \land <var:h2> = <var:l> ^ <nat:2> \} \\ \{ <var:t> = <var:l> \land <var:h1> = <var:l> \land <var:h2> = <var:l> ^ <nat:2> \} \, <var:h3> := <var:h2> * <var:t> \, \{ <var:t> = <var:l> \land <var:h1> = <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \} \\ \{ <var:t> = <var:l> \land <var:h1> = <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \} \, <var:h4> := <var:h3> * <var:t> \, \{ <var:t> = <var:l> \land <var:h1> = <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <var:l> ^ <nat:4> \} \\ \{ <var:t> = <var:l> \land <var:h1> = <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <var:l> ^ <nat:4> \} \, <var:h5> := <var:h4> * <var:t> \, \{ <var:t> = <var:l> \land <var:h1> = <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <var:l> ^ <nat:4> \land <var:h5> = <var:l> ^ <nat:5> \} \\ \{ <var:t> = <var:l> \land <var:h1> = <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <var:l> ^ <nat:4> \land <var:h5> = <var:l> ^ <nat:5> \} \, <var:h0> := <nat:4> \, \{ <var:t> = <var:l> \land <var:h1> = <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <var:l> ^ <nat:4> \land <var:h5> = <var:l> ^ <nat:5> \land <var:h0> = <nat:4> \} \\ \{ <var:t> = <var:l> \land <var:h1> = <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <var:l> ^ <nat:4> \land <var:h5> = <var:l> ^ <nat:5> \land <var:h0> = <nat:4> \} \, <var:h1> := <var:h1> * <nat:2> \, \{ <var:t> = <var:l> \land <var:h1> = <nat:2> \cdot <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <var:l> ^ <nat:4> \land <var:h5> = <var:l> ^ <nat:5> \land <var:h0> = <nat:4> \} \\ \{ <var:t> = <var:l> \land <var:h1> = <nat:2> \cdot <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <var:l> ^ <nat:4> \land <var:h5> = <var:l> ^ <nat:5> \land <var:h0> = <nat:4> \} \, <var:h4> := <var:h4> * <nat:5> \, \{ <var:t> = <var:l> \land <var:h1> = <nat:2> \cdot <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <nat:5> \cdot <var:l> ^ <nat:4> \land <var:h5> = <var:l> ^ <nat:5> \land <var:h0> = <nat:4> \} \\ \{ <var:t> = <var:l> \land <var:h1> = <nat:2> \cdot <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <nat:5> \cdot <var:l> ^ <nat:4> \land <var:h5> = <var:l> ^ <nat:5> \land <var:h0> = <nat:4> \} \, <var:h5> := <var:h5> * <nat:8> \, \{ <var:t> = <var:l> \land <var:h1> = <nat:2> \cdot <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <nat:5> \cdot <var:l> ^ <nat:4> \land <var:h5> = <nat:8> \cdot <var:l> ^ <nat:5> \land <var:h0> = <nat:4> \} \\ \{ <var:t> = <var:l> \land <var:h1> = <nat:2> \cdot <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <nat:5> \cdot <var:l> ^ <nat:4> \land <var:h5> = <nat:8> \cdot <var:l> ^ <nat:5> \land <var:h0> = <nat:4> \} \, <var:p> := <var:h5\, \{ <var:t> = <var:l> \land <var:h1> = <nat:2> \cdot <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <nat:5> \cdot <var:l> ^ <nat:4> \land <var:h0> = <nat:4> \land <var:p> = <nat:8> \cdot <var:l> ^ <nat:5> \} \\ \{ <var:t> = <var:l> \land <var:h1> = <nat:2> \cdot <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h4> = <nat:5> \cdot <var:l> ^ <nat:4> \land <var:h0> = <nat:4> \land <var:p> = <nat:8> \cdot <var:l> ^ <nat:5> \} \, <var:p> := <var:p> + <var:h4\, \{ <var:t> = <var:l> \land <var:h1> = <nat:2> \cdot <var:l> \land <var:h2> = <var:l> ^ <nat:2> \land <var:h3> = <var:l> ^ <nat:3> \land <var:h0> = <nat:4> \land <var:p> = <nat:8> \cdot <var:l> ^ <nat:5> + <nat:5> \cdot <var:l> ^ <nat:4> \} \end{eqnarray} This is given through the variable assignmet law in Hoare techniques . Taking a look at the upcoming line of code seen in our series of commands , \begin{eqnarray} \{ <var:t> = <var:l> \} \, <var:h1> := <var:t> \, \{ <var:t> = <var:l> \land <var:h1> = <var:l> \} \end{eqnarray} This is given through the rule given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <var:h4> : string := " <var:h4> " . Definition <var:h5> : string := " <var:h5> " . Definition <def:poly> := <var:h1> := <var:t> ; <var:h2> := <var:h1> * <var:t> ; <var:h3> := <var:h2> * <var:t> ; <var:h4> := <var:h3> * <var:t> ; <var:h5> := <var:h4> * <var:t> ; <var:h0> := <nat:4> ; <var:h1> := <var:h1> * <nat:2> ; <var:h4> := <var:h4> * <nat:5> ; <var:h5> := <var:h5> * <nat:8> ; <var:p> := <var:h5> <var:p> := <var:p> + <var:h4> <var:p> := <var:p> + <var:h1> <var:p> := <var:p> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:t> = <var:l> }} <def:poly> {{ <var:p> = <nat:8> * <var:l> ^ <nat:5> + <nat:5> * <var:l> ^ <nat:4> + <nat:2> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:h1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:h1> = <var:l> /\ <var:h2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:h1> = <var:l> /\ <var:h2> = <var:l> ^ <nat:2> /\ <var:h3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:h1> = <var:l> /\ <var:h2> = <var:l> ^ <nat:2> /\ <var:h3> = <var:l> ^ <nat:3> /\ <var:h4> = <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:h1> = <var:l> /\ <var:h2> = <var:l> ^ <nat:2> /\ <var:h3> = <var:l> ^ <nat:3> /\ <var:h4> = <var:l> ^ <nat:4> /\ <var:h5> = <var:l> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:h1> = <var:l> /\ <var:h2> = <var:l> ^ <nat:2> /\ <var:h3> = <var:l> ^ <nat:3> /\ <var:h4> = <var:l> ^ <nat:4> /\ <var:h5> = <var:l> ^ <nat:5> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:h1> = <nat:2> * <var:l> /\ <var:h2> = <var:l> ^ <nat:2> /\ <var:h3> = <var:l> ^ <nat:3> /\ <var:h4> = <var:l> ^ <nat:4> /\ <var:h5> = <var:l> ^ <nat:5> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:h1> = <nat:2> * <var:l> /\ <var:h2> = <var:l> ^ <nat:2> /\ <var:h3> = <var:l> ^ <nat:3> /\ <var:h4> = <nat:5> * <var:l> ^ <nat:4> /\ <var:h5> = <var:l> ^ <nat:5> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:h1> = <nat:2> * <var:l> /\ <var:h2> = <var:l> ^ <nat:2> /\ <var:h3> = <var:l> ^ <nat:3> /\ <var:h4> = <nat:5> * <var:l> ^ <nat:4> /\ <var:h5> = <nat:8> * <var:l> ^ <nat:5> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:h1> = <nat:2> * <var:l> /\ <var:h2> = <var:l> ^ <nat:2> /\ <var:h3> = <var:l> ^ <nat:3> /\ <var:h4> = <nat:5> * <var:l> ^ <nat:4> /\ <var:h0> = <nat:4> /\ <var:p> = <nat:8> * <var:l> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:h1> = <nat:2> * <var:l> /\ <var:h2> = <var:l> ^ <nat:2> /\ <var:h3> = <var:l> ^ <nat:3> /\ <var:h0> = <nat:4> /\ <var:p> = <nat:8> * <var:l> ^ <nat:5> + <nat:5> * <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:h0> = <nat:4> /\ <var:p> = <nat:8> * <var:l> ^ <nat:5> + <nat:5> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:p> = <nat:8> * <var:l> ^ <nat:5> + <nat:5> * <var:l> ^ <nat:4> + <nat:2> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 