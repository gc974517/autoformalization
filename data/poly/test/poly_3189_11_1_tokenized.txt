\begin{document} \begin{theorem} We define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:J1> := <var:t> ; <var:J2> := <var:J1> * <var:t> ; <var:J3> := <var:J2> * <var:t> ; <var:J0> := <nat:5> ; <var:J1> := <var:J1> * <nat:7> ; <var:J2> := <var:J2> * <nat:9> ; <var:J3> := <var:J3> * <nat:8> ; <var:A> := <var:J3> <var:A> := <var:A> + <var:J2> <var:A> := <var:A> + <var:J1> <var:A> := <var:A> + <var:J0> \end{verbatim} Given $ <var:t> = <var:B> $ before the evaluation of our list of commands it follows that $ <var:A> = <nat:8> \times <var:B> ^ <nat:3> + <nat:9> \times <var:B> ^ <nat:2> + <nat:7> \times <var:B> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for this list of commands can be seen using standard Hoare reasoning . Now , the variable assignmet code \verb | <var:J1> := <var:t> ; | . This statement forwards the condition $ \{ <var:t> = <var:B> \} $ toward the condition $ \{ <var:t> = <var:B> \land <var:J1> = <var:B> \} $ . Advancing , we see the variable assignmet line yielding $ <var:J1> * <var:t> $ as $ <var:J2>$ . This code transfers $ \{ <var:t> = <var:B> \land <var:J1> = <var:B> \} $ to the condition $ \{ <var:t> = <var:B> \land <var:J1> = <var:B> \land <var:J2> = <var:B> ^ <nat:2> \} $ . This is sound using the assignment law obtained from Hoare logic . Advancing to the proceeding line of code found in our series of commands , the variable assignmet code \verb | <var:J3> := <var:J2> * <var:t> ; | . This advances $ \{ <var:t> = <var:B> \land <var:J1> = <var:B> \land <var:J2> = <var:B> ^ <nat:2> \} $ as $ \{ <var:t> = <var:B> \land <var:J1> = <var:B> \land <var:J2> = <var:B> ^ <nat:2> \land <var:J3> = <var:B> ^ <nat:3> \} $ . Going to the next step , we see the environment update statement giving $ <nat:5> $ toward $ <var:J0>$ . This command moves the precondition $ \{ <var:t> = <var:B> \land <var:J1> = <var:B> \land <var:J2> = <var:B> ^ <nat:2> \land <var:J3> = <var:B> ^ <nat:3> \} $ to the postcondition $ \{ <var:t> = <var:B> \land <var:J1> = <var:B> \land <var:J2> = <var:B> ^ <nat:2> \land <var:J3> = <var:B> ^ <nat:3> \land <var:J0> = <nat:5> \} $ . Moving on , the variable assignmet code \verb | <var:J1> := <var:J1> * <nat:7> ; | . This advances the precondition $ \{ <var:t> = <var:B> \land <var:J1> = <var:B> \land <var:J2> = <var:B> ^ <nat:2> \land <var:J3> = <var:B> ^ <nat:3> \land <var:J0> = <nat:5> \} $ to $ \{ <var:t> = <var:B> \land <var:J1> = <nat:7> \cdot <var:B> \land <var:J2> = <var:B> ^ <nat:2> \land <var:J3> = <var:B> ^ <nat:3> \land <var:J0> = <nat:5> \} $ . Focusing on the following line of code seen in our code , the variable update code defining $ <var:J2> * <nat:9> $ into $ <var:J2>$ . This line redefines the precondition $ \{ <var:t> = <var:B> \land <var:J1> = <nat:7> \cdot <var:B> \land <var:J2> = <var:B> ^ <nat:2> \land <var:J3> = <var:B> ^ <nat:3> \land <var:J0> = <nat:5> \} $ into the postcondition $ \{ <var:t> = <var:B> \land <var:J1> = <nat:7> \cdot <var:B> \land <var:J2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:J3> = <var:B> ^ <nat:3> \land <var:J0> = <nat:5> \} $ . Moving on , we see the environment update command \verb | <var:J3> := <var:J3> * <nat:8> ; | . This statement takes $ \{ <var:t> = <var:B> \land <var:J1> = <nat:7> \cdot <var:B> \land <var:J2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:J3> = <var:B> ^ <nat:3> \land <var:J0> = <nat:5> \} $ toward the condition $ \{ <var:t> = <var:B> \land <var:J1> = <nat:7> \cdot <var:B> \land <var:J2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:J3> = <nat:8> \cdot <var:B> ^ <nat:3> \land <var:J0> = <nat:5> \} $ . Taking a look at the upcoming line found in our series of commands , we see the command \verb | <var:A> := <var:J3> | . This code takes $ \{ <var:t> = <var:B> \land <var:J1> = <nat:7> \cdot <var:B> \land <var:J2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:J3> = <nat:8> \cdot <var:B> ^ <nat:3> \land <var:J0> = <nat:5> \} $ to $ \{ <var:t> = <var:B> \land <var:J1> = <nat:7> \cdot <var:B> \land <var:J2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:J0> = <nat:5> \land <var:A> = <nat:8> \cdot <var:B> ^ <nat:3> \} $ . After , we see the variable binding code yielding $ <var:A> + <var:J2$ as $ <var:A>$ . This statement moves $ \{ <var:t> = <var:B> \land <var:J1> = <nat:7> \cdot <var:B> \land <var:J2> = <nat:9> \cdot <var:B> ^ <nat:2> \land <var:J0> = <nat:5> \land <var:A> = <nat:8> \cdot <var:B> ^ <nat:3> \} $ to the postcondition $ \{ <var:t> = <var:B> \land <var:J1> = <nat:7> \cdot <var:B> \land <var:J0> = <nat:5> \land <var:A> = <nat:8> \cdot <var:B> ^ <nat:3> + <nat:9> \cdot <var:B> ^ <nat:2> \} $ . This is sound with the assignment law given by Hoare logic . Moving on , we have the binding code assigning $ <var:A> + <var:J1$ into $ <var:A>$ . This code forwards the condition $ \{ <var:t> = <var:B> \land <var:J1> = <nat:7> \cdot <var:B> \land <var:J0> = <nat:5> \land <var:A> = <nat:8> \cdot <var:B> ^ <nat:3> + <nat:9> \cdot <var:B> ^ <nat:2> \} $ as $ \{ <var:t> = <var:B> \land <var:J0> = <nat:5> \land <var:A> = <nat:8> \cdot <var:B> ^ <nat:3> + <nat:9> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> \} $ . This is ensured by the assignment rule found in typical Hoare reasoning . Looking at the following command in our list of commands , we see the assignment line \verb | <var:A> := <var:A> + <var:J0> | . This line takes the condition $ \{ <var:t> = <var:B> \land <var:J0> = <nat:5> \land <var:A> = <nat:8> \cdot <var:B> ^ <nat:3> + <nat:9> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> \} $ to the postcondition $ \{ <var:t> = <var:B> \land <var:A> = <nat:8> \cdot <var:B> ^ <nat:3> + <nat:9> \cdot <var:B> ^ <nat:2> + <nat:7> \cdot <var:B> + <nat:5> \} $ . This is sound using the assignment rule given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:t> = <var:B> }} <var:J1> := <var:t> ; <var:J2> := <var:J1> * <var:t> ; <var:J3> := <var:J2> * <var:t> ; <var:J0> := <nat:5> ; <var:J1> := <var:J1> * <nat:7> ; <var:J2> := <var:J2> * <nat:9> ; <var:J3> := <var:J3> * <nat:8> ; <var:A> := <var:J3> <var:A> := <var:A> + <var:J2> <var:A> := <var:A> + <var:J1> <var:A> := <var:A> + <var:J0> {{ <var:A> = <nat:8> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:J1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:J1> = <var:B> /\ <var:J2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:J1> = <var:B> /\ <var:J2> = <var:B> ^ <nat:2> /\ <var:J3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:J1> = <var:B> /\ <var:J2> = <var:B> ^ <nat:2> /\ <var:J3> = <var:B> ^ <nat:3> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:J1> = <nat:7> * <var:B> /\ <var:J2> = <var:B> ^ <nat:2> /\ <var:J3> = <var:B> ^ <nat:3> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:J1> = <nat:7> * <var:B> /\ <var:J2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:J3> = <var:B> ^ <nat:3> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:J1> = <nat:7> * <var:B> /\ <var:J2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:J3> = <nat:8> * <var:B> ^ <nat:3> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:J1> = <nat:7> * <var:B> /\ <var:J2> = <nat:9> * <var:B> ^ <nat:2> /\ <var:J0> = <nat:5> /\ <var:A> = <nat:8> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:J1> = <nat:7> * <var:B> /\ <var:J0> = <nat:5> /\ <var:A> = <nat:8> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:J0> = <nat:5> /\ <var:A> = <nat:8> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:A> = <nat:8> * <var:B> ^ <nat:3> + <nat:9> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 