\begin{document} \begin{theorem} We define a series of instructions as follows \begin{verbatim} <var:O> := <nat:4> ; <var:O> := <nat:3> + <var:O> * <var:D> \end{verbatim} Assume $ <var:D> = <var:N> $ --- given all integers $ <var:N> $ --- ahead of the execution of our code then we have $ <var:O> = <nat:4> \times <var:N> + <nat:3> $ . \end{theorem} \begin{proof} The argument for our list of instructions can be accomplished by usual Hoare techniques . Moving on to the next steps found in our code , \[ \begin{tabular} {rcl} \{ <var:D> = <var:N> \} & <var:O> := <nat:4> & \{ <var:D> = <var:N> \land <var:O> = <nat:4> \} \\ \{ <var:D> = <var:N> \land <var:O> = <nat:4> \} & <var:O> := <nat:3> + <var:O> * <var:D& \{ <var:D> = <var:N> \land <var:O> = <nat:4> \cdot <var:N> + <nat:3> \} \end{tabular} This is ensured through the variable update scheme obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:D> = <var:N> }} <var:O> := <nat:4> ; <var:O> := <nat:3> + <var:O> * <var:D> {{ <var:O> = <nat:4> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:N> /\ <var:O> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:N> /\ <var:O> = <nat:4> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 