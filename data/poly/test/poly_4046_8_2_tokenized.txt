\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:u> := <nat:4> ; <var:u> := <nat:2> + <var:u> * <var:Z> ; <var:u> := <nat:3> + <var:u> * <var:Z> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <nat:1> + <var:u> * <var:Z> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <nat:4> + <var:u> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:Z> = <var:r> $ given whole numbers $ <var:r> $ ahead of the evaluation of our set of commands , it follows that we see $ <var:u> = <nat:4> \cdot <var:r> ^ <nat:7> + <nat:2> \cdot <var:r> ^ <nat:6> + <nat:3> \cdot <var:r> ^ <nat:5> + <nat:1> \cdot <var:r> ^ <nat:2> + <nat:4> $ after series of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:r> \} \\ <var:u> := <nat:4> ; \\ \{ <var:Z> = <var:r> \land <var:u> = <nat:4> \} \\ <var:u> := <nat:2> + <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:r> \land <var:u> = <nat:4> \times <var:r> + <nat:2> \} \\ <var:u> := <nat:3> + <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:r> \land <var:u> = <nat:4> \times <var:r> ^ <nat:2> + <nat:2> \times <var:r> + <nat:3> \} \\ <var:u> := <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:r> \land <var:u> = <nat:4> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> + \} \\ <var:u> := <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:r> \land <var:u> = <nat:4> \times <var:r> ^ <nat:4> + <nat:2> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> ^ <nat:2> + \} \\ <var:u> := <nat:1> + <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:r> \land <var:u> = <nat:4> \times <var:r> ^ <nat:5> + <nat:2> \times <var:r> ^ <nat:4> + <nat:3> \times <var:r> ^ <nat:3> + <nat:1> \} \\ <var:u> := <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:r> \land <var:u> = <nat:4> \times <var:r> ^ <nat:6> + <nat:2> \times <var:r> ^ <nat:5> + <nat:3> \times <var:r> ^ <nat:4> + <nat:1> \times <var:r> + \} \\ <var:u> := <nat:4> + <var:u> * <var:Z> \\ \{ <var:Z> = <var:r> \land <var:u> = <nat:4> \times <var:r> ^ <nat:7> + <nat:2> \times <var:r> ^ <nat:6> + <nat:3> \times <var:r> ^ <nat:5> + <nat:1> \times <var:r> ^ <nat:2> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:4> ; <var:u> := <nat:2> + <var:u> * <var:Z> ; <var:u> := <nat:3> + <var:u> * <var:Z> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <nat:1> + <var:u> * <var:Z> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <nat:4> + <var:u> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:Z> = <var:r> }} <def:poly> {{ <var:u> = <nat:4> * <var:r> ^ <nat:7> + <nat:2> * <var:r> ^ <nat:6> + <nat:3> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:u> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:u> = <nat:4> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:u> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:u> = <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:u> = <nat:4> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:u> = <nat:4> * <var:r> ^ <nat:5> + <nat:2> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:u> = <nat:4> * <var:r> ^ <nat:6> + <nat:2> * <var:r> ^ <nat:5> + <nat:3> * <var:r> ^ <nat:4> + <nat:1> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:r> /\ <var:u> = <nat:4> * <var:r> ^ <nat:7> + <nat:2> * <var:r> ^ <nat:6> + <nat:3> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 