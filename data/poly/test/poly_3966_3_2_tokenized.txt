\begin{document} \begin{theorem} Let the following code in \emph{Imp} : \begin{verbatim} <var:a> := <nat:2> ; <var:a> := <nat:1> + <var:a> * <var:X> ; <var:a> := <nat:3> + <var:a> * <var:X> \end{verbatim} Allowing it to be that $ <var:X> = <var:T> $ ahead of the execution of this code segment then we see $ <var:a> = <nat:2> \cdot <var:T> ^ <nat:2> + <nat:1> \cdot <var:T> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this set of instructions is given using Hoare reasoning . Shifting focus toward the following command seen in the set of commands , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:T> \} & <var:a> := <nat:2> & \{ <var:X> = <var:T> \land <var:a> = <nat:2> \} \end{tabular} This is ensured using the binding scheme obtained from Hoare techniques . Looking at the proceeding lines of codein our set of commands , we have \[ \begin{tabular} {rcl} \{ <var:X> = <var:T> \} & <var:a> := <nat:2> & \{ <var:X> = <var:T> \land <var:a> = <nat:2> \} \\ \{ <var:X> = <var:T> \land <var:a> = <nat:2> \} & <var:a> := <nat:1> + <var:a> * <var:X> & \{ <var:X> = <var:T> \land <var:a> = <nat:2> * <var:T> + <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:X> = <var:T> }} <var:a> := <nat:2> ; <var:a> := <nat:1> + <var:a> * <var:X> ; <var:a> := <nat:3> + <var:a> * <var:X> {{ <var:a> = <nat:2> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:a> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:a> = <nat:2> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:T> /\ <var:a> = <nat:2> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 