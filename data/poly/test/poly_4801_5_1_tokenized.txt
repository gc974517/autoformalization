\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D1> := <var:v> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:9> ; <var:M> := <var:D1> <var:M> := <var:M> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> . Assume it to be that $ <var:v> = <var:p> $ prior to evaluating the set of instructions , it must be that $ <var:M> = <nat:9> \cdot <var:p> + <nat:1> $ once series of commands finishes . \end{theorem} \begin{proof} The proof of this set of commands can be accomplished by standard Hoare reasoning . Moving on to the following statement contained in the series of commands , we see the variable update statement letting $ <var:v> $ into $ <var:D1>$ . This moves $ \{ <var:v> = <var:p> \} $ into the postcondition $ \{ <var:v> = <var:p> \land <var:D1> = <var:p> \} $ . Moving forward to the next step , the variable assignmet code \verb | <var:D0> := <nat:1> ; | . This takes the condition $ \{ <var:v> = <var:p> \land <var:D1> = <var:p> \} $ toward the condition $ \{ <var:v> = <var:p> \land <var:D1> = <var:p> \land <var:D0> = <nat:1> \} $ . Moving forward to the next step , we have the environment update code assigning $ <var:D1> * <nat:9> $ to $ <var:D1>$ . This code transfers the condition $ \{ <var:v> = <var:p> \land <var:D1> = <var:p> \land <var:D0> = <nat:1> \} $ as $ \{ <var:v> = <var:p> \land <var:D1> = <nat:9> * <var:p> \land <var:D0> = <nat:1> \} $ . Taking a look at the next step in the list of commands , the assignment line letting $ <var:D1$ into $ <var:M>$ . This line transfers the condition $ \{ <var:v> = <var:p> \land <var:D1> = <nat:9> * <var:p> \land <var:D0> = <nat:1> \} $ as the condition $ \{ <var:v> = <var:p> \land <var:D0> = <nat:1> \land <var:M> = <nat:9> * <var:p> \} $ . This is ensured using the assignment inference rule from usual Hoare techniques . Advancing , the assignment statement defining $ <var:M> + <var:D0$ into $ <var:M>$ . This command advances the condition $ \{ <var:v> = <var:p> \land <var:D0> = <nat:1> \land <var:M> = <nat:9> * <var:p> \} $ toward the condition $ \{ <var:v> = <var:p> \land <var:M> = <nat:9> * <var:p> + <nat:1> \} $ . This is rigorously given with the assignment inference rule defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D1> := <var:v> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:9> ; <var:M> := <var:D1> <var:M> := <var:M> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:v> = <var:p> }} <def:poly> {{ <var:M> = <nat:9> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:D1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:D1> = <var:p> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:D1> = <nat:9> * <var:p> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:D0> = <nat:1> /\ <var:M> = <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:p> /\ <var:M> = <nat:9> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 