\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E1> := <var:b> ; <var:E2> := <var:E1> * <var:b> ; <var:E3> := <var:E2> * <var:b> ; <var:E4> := <var:E3> * <var:b> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:2> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:4> ; <var:E4> := <var:E4> * <nat:9> ; <var:D> := <var:E4> <var:D> := <var:D> + <var:E3> <var:D> := <var:D> + <var:E2> <var:D> := <var:D> + <var:E1> <var:D> := <var:D> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:b> = <var:f> $ before evaluating the program then $ <var:D> = <nat:9> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:3> $ once segment of code has finished . \end{theorem} \begin{proof} The proof of the code segment is given with typical Hoare techniques . Advancing to the subsequent line seen in our program , the variable update statement \verb | <var:E1> := <var:b> ; | . This redefines the precondition $ \{ <var:b> = <var:f> \} $ toward the postcondition $ \{ <var:b> = <var:f> \land <var:E1> = <var:f> \} $ . Moving on to the proceeding bit of code contained in our series of instructions , the assignment line giving $ <var:E1> * <var:b> $ to $ <var:E2>$ . This takes $ \{ <var:b> = <var:f> \land <var:E1> = <var:f> \} $ as the condition $ \{ <var:b> = <var:f> \land <var:E1> = <var:f> \land <var:E2> = <var:f> ^ <nat:2> \} $ . Immediately after , we see the environment update code defining $ <var:E2> * <var:b> $ to $ <var:E3>$ . This takes the condition $ \{ <var:b> = <var:f> \land <var:E1> = <var:f> \land <var:E2> = <var:f> ^ <nat:2> \} $ toward $ \{ <var:b> = <var:f> \land <var:E1> = <var:f> \land <var:E2> = <var:f> ^ <nat:2> \land <var:E3> = <var:f> ^ <nat:3> \} $ . Shifting focus toward the upcoming piece of code contained in our code , the environment update line \verb | <var:E4> := <var:E3> * <var:b> ; | . This advances the condition $ \{ <var:b> = <var:f> \land <var:E1> = <var:f> \land <var:E2> = <var:f> ^ <nat:2> \land <var:E3> = <var:f> ^ <nat:3> \} $ toward the condition $ \{ <var:b> = <var:f> \land <var:E1> = <var:f> \land <var:E2> = <var:f> ^ <nat:2> \land <var:E3> = <var:f> ^ <nat:3> \land <var:E4> = <var:f> ^ <nat:4> \} $ . Moving forward , the environment update command \verb | <var:E0> := <nat:3> ; | . This advances the precondition $ \{ <var:b> = <var:f> \land <var:E1> = <var:f> \land <var:E2> = <var:f> ^ <nat:2> \land <var:E3> = <var:f> ^ <nat:3> \land <var:E4> = <var:f> ^ <nat:4> \} $ as the postcondition $ \{ <var:b> = <var:f> \land <var:E1> = <var:f> \land <var:E2> = <var:f> ^ <nat:2> \land <var:E3> = <var:f> ^ <nat:3> \land <var:E4> = <var:f> ^ <nat:4> \land <var:E0> = <nat:3> \} $ . This is shown to be logically sound through the assignment rule found in typical Hoare techniques . Observing the subsequent bit of code seen in the list of instructions , the variable binding code letting $ <var:E1> * <nat:2> $ as $ <var:E1>$ . This moves the precondition $ \{ <var:b> = <var:f> \land <var:E1> = <var:f> \land <var:E2> = <var:f> ^ <nat:2> \land <var:E3> = <var:f> ^ <nat:3> \land <var:E4> = <var:f> ^ <nat:4> \land <var:E0> = <nat:3> \} $ toward the postcondition $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E2> = <var:f> ^ <nat:2> \land <var:E3> = <var:f> ^ <nat:3> \land <var:E4> = <var:f> ^ <nat:4> \land <var:E0> = <nat:3> \} $ . Now , the variable assignmet command defining $ <var:E2> * <nat:2> $ as $ <var:E2>$ . This forwards the precondition $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E2> = <var:f> ^ <nat:2> \land <var:E3> = <var:f> ^ <nat:3> \land <var:E4> = <var:f> ^ <nat:4> \land <var:E0> = <nat:3> \} $ as $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E2> = <nat:2> \times <var:f> ^ <nat:2> \land <var:E3> = <var:f> ^ <nat:3> \land <var:E4> = <var:f> ^ <nat:4> \land <var:E0> = <nat:3> \} $ . This is shown with the assignment law given by Hoare techniques . Moving on to the next step , we have the variable assignmet statement letting $ <var:E3> * <nat:4> $ toward $ <var:E3>$ . This code moves the precondition $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E2> = <nat:2> \times <var:f> ^ <nat:2> \land <var:E3> = <var:f> ^ <nat:3> \land <var:E4> = <var:f> ^ <nat:4> \land <var:E0> = <nat:3> \} $ as $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E2> = <nat:2> \times <var:f> ^ <nat:2> \land <var:E3> = <nat:4> \times <var:f> ^ <nat:3> \land <var:E4> = <var:f> ^ <nat:4> \land <var:E0> = <nat:3> \} $ . Moving on to the subsequent bit of code in our program , we see the variable binding line yielding $ <var:E4> * <nat:9> $ as $ <var:E4>$ . This takes the precondition $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E2> = <nat:2> \times <var:f> ^ <nat:2> \land <var:E3> = <nat:4> \times <var:f> ^ <nat:3> \land <var:E4> = <var:f> ^ <nat:4> \land <var:E0> = <nat:3> \} $ as the postcondition $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E2> = <nat:2> \times <var:f> ^ <nat:2> \land <var:E3> = <nat:4> \times <var:f> ^ <nat:3> \land <var:E4> = <nat:9> \times <var:f> ^ <nat:4> \land <var:E0> = <nat:3> \} $ . This is rigorously given by the assignment rule given by usual Hoare techniques . Moving onward , the binding command \verb | <var:D> := <var:E4> | . This statement transfers the precondition $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E2> = <nat:2> \times <var:f> ^ <nat:2> \land <var:E3> = <nat:4> \times <var:f> ^ <nat:3> \land <var:E4> = <nat:9> \times <var:f> ^ <nat:4> \land <var:E0> = <nat:3> \} $ toward $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E2> = <nat:2> \times <var:f> ^ <nat:2> \land <var:E3> = <nat:4> \times <var:f> ^ <nat:3> \land <var:E0> = <nat:3> \land <var:D> = <nat:9> \times <var:f> ^ <nat:4> \} $ . This is sound with the assignment inference rule obtained from typical Hoare reasoning . Observing the upcoming line of code found in our set of commands , we have the variable assignmet statement assigning $ <var:D> + <var:E3$ as $ <var:D>$ . This redefines $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E2> = <nat:2> \times <var:f> ^ <nat:2> \land <var:E3> = <nat:4> \times <var:f> ^ <nat:3> \land <var:E0> = <nat:3> \land <var:D> = <nat:9> \times <var:f> ^ <nat:4> \} $ into the postcondition $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E2> = <nat:2> \times <var:f> ^ <nat:2> \land <var:E0> = <nat:3> \land <var:D> = <nat:9> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> \} $ . This is given through the assignment rule found in standard Hoare techniques . Next , we see the binding command defining $ <var:D> + <var:E2$ toward $ <var:D>$ . This redefines the precondition $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E2> = <nat:2> \times <var:f> ^ <nat:2> \land <var:E0> = <nat:3> \land <var:D> = <nat:9> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> \} $ into the postcondition $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E0> = <nat:3> \land <var:D> = <nat:9> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> \} $ . Moving forward to the next step , the command yielding $ <var:D> + <var:E1$ as $ <var:D>$ . This moves the condition $ \{ <var:b> = <var:f> \land <var:E1> = <nat:2> \times <var:f> \land <var:E0> = <nat:3> \land <var:D> = <nat:9> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> \} $ as the condition $ \{ <var:b> = <var:f> \land <var:E0> = <nat:3> \land <var:D> = <nat:9> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> \} $ . This is deduced through the assignment inference rule obtained from Hoare logic . Next , we have the environment update code binding $ <var:D> + <var:E0$ to $ <var:D>$ . This code forwards the condition $ \{ <var:b> = <var:f> \land <var:E0> = <nat:3> \land <var:D> = <nat:9> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> \} $ as $ \{ <var:b> = <var:f> \land <var:D> = <nat:9> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:2> \times <var:f> ^ <nat:2> + <nat:2> \times <var:f> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <var:E4> : string := " <var:E4> " . Definition <def:poly> := <var:E1> := <var:b> ; <var:E2> := <var:E1> * <var:b> ; <var:E3> := <var:E2> * <var:b> ; <var:E4> := <var:E3> * <var:b> ; <var:E0> := <nat:3> ; <var:E1> := <var:E1> * <nat:2> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:4> ; <var:E4> := <var:E4> * <nat:9> ; <var:D> := <var:E4> <var:D> := <var:D> + <var:E3> <var:D> := <var:D> + <var:E2> <var:D> := <var:D> + <var:E1> <var:D> := <var:D> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:b> = <var:f> }} <def:poly> {{ <var:D> = <nat:9> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E1> = <var:f> /\ <var:E2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E1> = <var:f> /\ <var:E2> = <var:f> ^ <nat:2> /\ <var:E3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E1> = <var:f> /\ <var:E2> = <var:f> ^ <nat:2> /\ <var:E3> = <var:f> ^ <nat:3> /\ <var:E4> = <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E1> = <var:f> /\ <var:E2> = <var:f> ^ <nat:2> /\ <var:E3> = <var:f> ^ <nat:3> /\ <var:E4> = <var:f> ^ <nat:4> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E1> = <nat:2> * <var:f> /\ <var:E2> = <var:f> ^ <nat:2> /\ <var:E3> = <var:f> ^ <nat:3> /\ <var:E4> = <var:f> ^ <nat:4> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E1> = <nat:2> * <var:f> /\ <var:E2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:E3> = <var:f> ^ <nat:3> /\ <var:E4> = <var:f> ^ <nat:4> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E1> = <nat:2> * <var:f> /\ <var:E2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:E3> = <nat:4> * <var:f> ^ <nat:3> /\ <var:E4> = <var:f> ^ <nat:4> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E1> = <nat:2> * <var:f> /\ <var:E2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:E3> = <nat:4> * <var:f> ^ <nat:3> /\ <var:E4> = <nat:9> * <var:f> ^ <nat:4> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E1> = <nat:2> * <var:f> /\ <var:E2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:E3> = <nat:4> * <var:f> ^ <nat:3> /\ <var:E0> = <nat:3> /\ <var:D> = <nat:9> * <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E1> = <nat:2> * <var:f> /\ <var:E2> = <nat:2> * <var:f> ^ <nat:2> /\ <var:E0> = <nat:3> /\ <var:D> = <nat:9> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E1> = <nat:2> * <var:f> /\ <var:E0> = <nat:3> /\ <var:D> = <nat:9> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:E0> = <nat:3> /\ <var:D> = <nat:9> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:D> = <nat:9> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:2> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 