\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X0> := <nat:3> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:L> ; <var:X2> := <nat:3> ; <var:X2> := <var:X2> * <var:L> ; <var:X2> := <var:X2> * <var:L> ; <var:X3> := <nat:9> ; <var:X3> := <var:X3> * <var:L> ; <var:X3> := <var:X3> * <var:L> ; <var:X3> := <var:X3> * <var:L> ; <var:o> := <var:X3> ; <var:o> := <var:o> + <var:X2> ; <var:o> := <var:o> + <var:X1> ; <var:o> := <var:o> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assume given positive coefficients $ <var:i> $ that $ <var:L> = <var:i> $ ahead of executing the list of commands it holds that we see $ <var:o> = <nat:9> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:3> $ when code segment has finished executing . \end{theorem} \begin{proof} The flow of logic for our list of instructions is demonstrated by the below decorated program . \begin{eqnarray} \{ <var:L> = <var:i> \} \\ <var:X0> := <nat:3> ; \\ \{ <var:L> = <var:i> \land <var:X0> = <nat:3> \} \\ <var:X1> := <nat:3> ; \\ \{ <var:L> = <var:i> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> \} \\ <var:X1> := <var:X1> * <var:L> ; \\ \{ <var:L> = <var:i> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> * <var:i> \} \\ <var:X2> := <nat:3> ; \\ \{ <var:L> = <var:i> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> * <var:i> \land <var:X2> = <nat:3> \} \\ <var:X2> := <var:X2> * <var:L> ; \\ \{ <var:L> = <var:i> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> * <var:i> \land <var:X2> = <nat:3> * <var:i> \} \\ <var:X2> := <var:X2> * <var:L> ; \\ \{ <var:L> = <var:i> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> * <var:i> \land <var:X2> = <nat:3> * <var:i> ^ <nat:2> \} \\ <var:X3> := <nat:9> ; \\ \{ <var:L> = <var:i> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> * <var:i> \land <var:X2> = <nat:3> * <var:i> ^ <nat:2> \land <var:X3> = <nat:9> \} \\ <var:X3> := <var:X3> * <var:L> ; \\ \{ <var:L> = <var:i> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> * <var:i> \land <var:X2> = <nat:3> * <var:i> ^ <nat:2> \land <var:X3> = <nat:9> * <var:i> \} \\ <var:X3> := <var:X3> * <var:L> ; \\ \{ <var:L> = <var:i> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> * <var:i> \land <var:X2> = <nat:3> * <var:i> ^ <nat:2> \land <var:X3> = <nat:9> * <var:i> ^ <nat:2> \} \\ <var:X3> := <var:X3> * <var:L> ; \\ \{ <var:L> = <var:i> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> * <var:i> \land <var:X2> = <nat:3> * <var:i> ^ <nat:2> \land <var:X3> = <nat:9> * <var:i> ^ <nat:3> \} \\ <var:o> := <var:X3> ; \\ \{ <var:L> = <var:i> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> * <var:i> \land <var:X2> = <nat:3> * <var:i> ^ <nat:2> \land <var:o> = <nat:9> * <var:i> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:X2> ; \\ \{ <var:L> = <var:i> \land <var:X0> = <nat:3> \land <var:X1> = <nat:3> * <var:i> \land <var:o> = <nat:9> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:X1> ; \\ \{ <var:L> = <var:i> \land <var:X0> = <nat:3> \land <var:o> = <nat:9> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> \} \\ <var:o> := <var:o> + <var:X0> \\ \{ <var:L> = <var:i> \land <var:o> = <nat:9> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:3> \} \end{eqnarray} Using typical Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Definition <def:poly> := <var:X0> := <nat:3> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:L> ; <var:X2> := <nat:3> ; <var:X2> := <var:X2> * <var:L> ; <var:X2> := <var:X2> * <var:L> ; <var:X3> := <nat:9> ; <var:X3> := <var:X3> * <var:L> ; <var:X3> := <var:X3> * <var:L> ; <var:X3> := <var:X3> * <var:L> ; <var:o> := <var:X3> ; <var:o> := <var:o> + <var:X2> ; <var:o> := <var:o> + <var:X1> ; <var:o> := <var:o> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:L> = <var:i> }} <def:poly> {{ <var:o> = <nat:9> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:i> /\ <var:X2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:i> /\ <var:X2> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:i> /\ <var:X2> = <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:i> /\ <var:X2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:X3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:i> /\ <var:X2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:X3> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:i> /\ <var:X2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:X3> = <nat:9> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:i> /\ <var:X2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:X3> = <nat:9> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:i> /\ <var:X2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:o> = <nat:9> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:3> * <var:i> /\ <var:o> = <nat:9> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:X0> = <nat:3> /\ <var:o> = <nat:9> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:i> /\ <var:o> = <nat:9> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 