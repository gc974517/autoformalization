\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:2> ; <var:Q1> := <nat:3> ; <var:Q1> := <var:Q1> * <var:m> ; <var:T> := <var:Q1> ; <var:T> := <var:T> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:m> = <var:P> $ ahead of the evaluation of this series of commands , it holds that $ <var:T> = <nat:3> * <var:P> + <nat:2> $ once segment of code is done . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions can be shown by Hoare logic . Looking at the proceeding steps seen in the series of instructions , we have \verb | { <var:m> = <var:P> } <var:Q0> := <nat:2> { <var:m> = <var:P> \land <var:Q0> = <nat:2> } | , \verb | { <var:m> = <var:P> \land <var:Q0> = <nat:2> } <var:Q1> := <nat:3> { <var:m> = <var:P> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:3> } | , \verb | { <var:m> = <var:P> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:3> } <var:Q1> := <var:Q1> * <var:m> { <var:m> = <var:P> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:3> * <var:P> } | and \verb | { <var:m> = <var:P> \land <var:Q0> = <nat:2> \land <var:Q1> = <nat:3> * <var:P> } <var:T> := <var:Q1> { <var:m> = <var:P> \land <var:Q0> = <nat:2> \land <var:T> = <nat:3> * <var:P> } | . Advancing to the next bit of code in our series of commands , we see \verb | { <var:m> = <var:P> } <var:Q0> := <nat:2> { <var:m> = <var:P> \land <var:Q0> = <nat:2> } | . This is sound through the assignment rule from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q0> := <nat:2> ; <var:Q1> := <nat:3> ; <var:Q1> := <var:Q1> * <var:m> ; <var:T> := <var:Q1> ; <var:T> := <var:T> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:m> = <var:P> }} <def:poly> {{ <var:T> = <nat:3> * <var:P> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Q0> = <nat:2> /\ <var:Q1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Q0> = <nat:2> /\ <var:Q1> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:Q0> = <nat:2> /\ <var:T> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:T> = <nat:3> * <var:P> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 