\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S1> := <var:g> ; <var:S2> := <var:S1> * <var:g> ; <var:S3> := <var:S2> * <var:g> ; <var:S4> := <var:S3> * <var:g> ; <var:S0> := <nat:7> ; <var:S1> := <var:S1> * <nat:9> ; <var:S2> := <var:S2> * <nat:9> ; <var:S3> := <var:S3> * <nat:8> ; <var:S4> := <var:S4> * <nat:7> ; <var:e> := <var:S4> <var:e> := <var:e> + <var:S3> <var:e> := <var:e> + <var:S2> <var:e> := <var:e> + <var:S1> <var:e> := <var:e> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> in \emph{Imp} . Given $ <var:g> = <var:Q> $ ahead of executing the code it holds that $ <var:e> = <nat:7> \times <var:Q> ^ <nat:4> + <nat:8> \times <var:Q> ^ <nat:3> + <nat:9> \times <var:Q> ^ <nat:2> + <nat:9> \times <var:Q> + <nat:7> $ once series of commands finishes . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions is evident through Hoare reasoning . Stepping through , we see the line \verb | <var:S1> := <var:g> ; | . This moves the condition $ \{ <var:g> = <var:Q> \} $ toward the condition $ \{ <var:g> = <var:Q> \land <var:S1> = <var:Q> \} $ . This is guaranteed through the assignment law found in typical Hoare techniques . Advancing to the subsequent line in our set of commands , we have the environment update code assigning $ <var:S1> * <var:g> $ toward $ <var:S2>$ . This takes the condition $ \{ <var:g> = <var:Q> \land <var:S1> = <var:Q> \} $ to the postcondition $ \{ <var:g> = <var:Q> \land <var:S1> = <var:Q> \land <var:S2> = <var:Q> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment law given by Hoare logic . Further , the assignment statement \verb | <var:S3> := <var:S2> * <var:g> ; | . This forwards $ \{ <var:g> = <var:Q> \land <var:S1> = <var:Q> \land <var:S2> = <var:Q> ^ <nat:2> \} $ into the postcondition $ \{ <var:g> = <var:Q> \land <var:S1> = <var:Q> \land <var:S2> = <var:Q> ^ <nat:2> \land <var:S3> = <var:Q> ^ <nat:3> \} $ . This is sound through the assignment inference rule from typical Hoare reasoning . Taking a look at the subsequent step in our code , the environment update statement \verb | <var:S4> := <var:S3> * <var:g> ; | . This command moves the condition $ \{ <var:g> = <var:Q> \land <var:S1> = <var:Q> \land <var:S2> = <var:Q> ^ <nat:2> \land <var:S3> = <var:Q> ^ <nat:3> \} $ into $ \{ <var:g> = <var:Q> \land <var:S1> = <var:Q> \land <var:S2> = <var:Q> ^ <nat:2> \land <var:S3> = <var:Q> ^ <nat:3> \land <var:S4> = <var:Q> ^ <nat:4> \} $ . Looking at the subsequent bit of code found in the set of instructions , we see the assignment line assigning $ <nat:7> $ toward $ <var:S0>$ . This redefines the precondition $ \{ <var:g> = <var:Q> \land <var:S1> = <var:Q> \land <var:S2> = <var:Q> ^ <nat:2> \land <var:S3> = <var:Q> ^ <nat:3> \land <var:S4> = <var:Q> ^ <nat:4> \} $ as the postcondition $ \{ <var:g> = <var:Q> \land <var:S1> = <var:Q> \land <var:S2> = <var:Q> ^ <nat:2> \land <var:S3> = <var:Q> ^ <nat:3> \land <var:S4> = <var:Q> ^ <nat:4> \land <var:S0> = <nat:7> \} $ . Stepping forward , the environment update statement binding $ <var:S1> * <nat:9> $ to $ <var:S1>$ . This takes the precondition $ \{ <var:g> = <var:Q> \land <var:S1> = <var:Q> \land <var:S2> = <var:Q> ^ <nat:2> \land <var:S3> = <var:Q> ^ <nat:3> \land <var:S4> = <var:Q> ^ <nat:4> \land <var:S0> = <nat:7> \} $ toward $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S2> = <var:Q> ^ <nat:2> \land <var:S3> = <var:Q> ^ <nat:3> \land <var:S4> = <var:Q> ^ <nat:4> \land <var:S0> = <nat:7> \} $ . This is given using the assignment scheme in typical Hoare logic . Looking at the next step found in the code segment , we see the variable assignmet statement yielding $ <var:S2> * <nat:9> $ toward $ <var:S2>$ . This takes $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S2> = <var:Q> ^ <nat:2> \land <var:S3> = <var:Q> ^ <nat:3> \land <var:S4> = <var:Q> ^ <nat:4> \land <var:S0> = <nat:7> \} $ to $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:S3> = <var:Q> ^ <nat:3> \land <var:S4> = <var:Q> ^ <nat:4> \land <var:S0> = <nat:7> \} $ . This is shown with the assignment law defined by typical Hoare reasoning . Moving onward , we see the variable binding line giving $ <var:S3> * <nat:8> $ to $ <var:S3>$ . This statement takes the precondition $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:S3> = <var:Q> ^ <nat:3> \land <var:S4> = <var:Q> ^ <nat:4> \land <var:S0> = <nat:7> \} $ as $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:S3> = <nat:8> \cdot <var:Q> ^ <nat:3> \land <var:S4> = <var:Q> ^ <nat:4> \land <var:S0> = <nat:7> \} $ . Observing the subsequent statement found in the list of instructions , we see the variable binding code assigning $ <var:S4> * <nat:7> $ to $ <var:S4>$ . This command takes the precondition $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:S3> = <nat:8> \cdot <var:Q> ^ <nat:3> \land <var:S4> = <var:Q> ^ <nat:4> \land <var:S0> = <nat:7> \} $ to $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:S3> = <nat:8> \cdot <var:Q> ^ <nat:3> \land <var:S4> = <nat:7> \cdot <var:Q> ^ <nat:4> \land <var:S0> = <nat:7> \} $ . Paying attention to the following line of code contained in the code segment , we see the binding command \verb | <var:e> := <var:S4> | . This command forwards the condition $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:S3> = <nat:8> \cdot <var:Q> ^ <nat:3> \land <var:S4> = <nat:7> \cdot <var:Q> ^ <nat:4> \land <var:S0> = <nat:7> \} $ as the postcondition $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:S3> = <nat:8> \cdot <var:Q> ^ <nat:3> \land <var:S0> = <nat:7> \land <var:e> = <nat:7> \cdot <var:Q> ^ <nat:4> \} $ . Moving on to the next step , we have the variable update command defining $ <var:e> + <var:S3$ as $ <var:e>$ . This redefines $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:S3> = <nat:8> \cdot <var:Q> ^ <nat:3> \land <var:S0> = <nat:7> \land <var:e> = <nat:7> \cdot <var:Q> ^ <nat:4> \} $ as the condition $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:S0> = <nat:7> \land <var:e> = <nat:7> \cdot <var:Q> ^ <nat:4> + <nat:8> \cdot <var:Q> ^ <nat:3> \} $ . Taking another step toward the subsequent line contained in the segment of code , we see the variable update statement giving $ <var:e> + <var:S2$ to $ <var:e>$ . This moves $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S2> = <nat:9> \cdot <var:Q> ^ <nat:2> \land <var:S0> = <nat:7> \land <var:e> = <nat:7> \cdot <var:Q> ^ <nat:4> + <nat:8> \cdot <var:Q> ^ <nat:3> \} $ as $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S0> = <nat:7> \land <var:e> = <nat:7> \cdot <var:Q> ^ <nat:4> + <nat:8> \cdot <var:Q> ^ <nat:3> + <nat:9> \cdot <var:Q> ^ <nat:2> \} $ . This is given with the assignment rule given in Hoare reasoning . Going to the next step , we have the statement \verb | <var:e> := <var:e> + <var:S1> | . This statement forwards the precondition $ \{ <var:g> = <var:Q> \land <var:S1> = <nat:9> \cdot <var:Q> \land <var:S0> = <nat:7> \land <var:e> = <nat:7> \cdot <var:Q> ^ <nat:4> + <nat:8> \cdot <var:Q> ^ <nat:3> + <nat:9> \cdot <var:Q> ^ <nat:2> \} $ as $ \{ <var:g> = <var:Q> \land <var:S0> = <nat:7> \land <var:e> = <nat:7> \cdot <var:Q> ^ <nat:4> + <nat:8> \cdot <var:Q> ^ <nat:3> + <nat:9> \cdot <var:Q> ^ <nat:2> + <nat:9> \cdot <var:Q> \} $ . This is rigorously given through the assignment inference rule defined in Hoare reasoning . Going to the next step , we see the variable binding code defining $ <var:e> + <var:S0$ toward $ <var:e>$ . This code moves the condition $ \{ <var:g> = <var:Q> \land <var:S0> = <nat:7> \land <var:e> = <nat:7> \cdot <var:Q> ^ <nat:4> + <nat:8> \cdot <var:Q> ^ <nat:3> + <nat:9> \cdot <var:Q> ^ <nat:2> + <nat:9> \cdot <var:Q> \} $ as the postcondition $ \{ <var:g> = <var:Q> \land <var:e> = <nat:7> \cdot <var:Q> ^ <nat:4> + <nat:8> \cdot <var:Q> ^ <nat:3> + <nat:9> \cdot <var:Q> ^ <nat:2> + <nat:9> \cdot <var:Q> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <var:S4> : string := " <var:S4> " . Definition <def:poly> := <var:S1> := <var:g> ; <var:S2> := <var:S1> * <var:g> ; <var:S3> := <var:S2> * <var:g> ; <var:S4> := <var:S3> * <var:g> ; <var:S0> := <nat:7> ; <var:S1> := <var:S1> * <nat:9> ; <var:S2> := <var:S2> * <nat:9> ; <var:S3> := <var:S3> * <nat:8> ; <var:S4> := <var:S4> * <nat:7> ; <var:e> := <var:S4> <var:e> := <var:e> + <var:S3> <var:e> := <var:e> + <var:S2> <var:e> := <var:e> + <var:S1> <var:e> := <var:e> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:g> = <var:Q> }} <def:poly> {{ <var:e> = <nat:7> * <var:Q> ^ <nat:4> + <nat:8> * <var:Q> ^ <nat:3> + <nat:9> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:S1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:S1> = <var:Q> /\ <var:S2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:S1> = <var:Q> /\ <var:S2> = <var:Q> ^ <nat:2> /\ <var:S3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:S1> = <var:Q> /\ <var:S2> = <var:Q> ^ <nat:2> /\ <var:S3> = <var:Q> ^ <nat:3> /\ <var:S4> = <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:S1> = <var:Q> /\ <var:S2> = <var:Q> ^ <nat:2> /\ <var:S3> = <var:Q> ^ <nat:3> /\ <var:S4> = <var:Q> ^ <nat:4> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:S1> = <nat:9> * <var:Q> /\ <var:S2> = <var:Q> ^ <nat:2> /\ <var:S3> = <var:Q> ^ <nat:3> /\ <var:S4> = <var:Q> ^ <nat:4> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:S1> = <nat:9> * <var:Q> /\ <var:S2> = <nat:9> * <var:Q> ^ <nat:2> /\ <var:S3> = <var:Q> ^ <nat:3> /\ <var:S4> = <var:Q> ^ <nat:4> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:S1> = <nat:9> * <var:Q> /\ <var:S2> = <nat:9> * <var:Q> ^ <nat:2> /\ <var:S3> = <nat:8> * <var:Q> ^ <nat:3> /\ <var:S4> = <var:Q> ^ <nat:4> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:S1> = <nat:9> * <var:Q> /\ <var:S2> = <nat:9> * <var:Q> ^ <nat:2> /\ <var:S3> = <nat:8> * <var:Q> ^ <nat:3> /\ <var:S4> = <nat:7> * <var:Q> ^ <nat:4> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:S1> = <nat:9> * <var:Q> /\ <var:S2> = <nat:9> * <var:Q> ^ <nat:2> /\ <var:S3> = <nat:8> * <var:Q> ^ <nat:3> /\ <var:S0> = <nat:7> /\ <var:e> = <nat:7> * <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:S1> = <nat:9> * <var:Q> /\ <var:S2> = <nat:9> * <var:Q> ^ <nat:2> /\ <var:S0> = <nat:7> /\ <var:e> = <nat:7> * <var:Q> ^ <nat:4> + <nat:8> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:S1> = <nat:9> * <var:Q> /\ <var:S0> = <nat:7> /\ <var:e> = <nat:7> * <var:Q> ^ <nat:4> + <nat:8> * <var:Q> ^ <nat:3> + <nat:9> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:S0> = <nat:7> /\ <var:e> = <nat:7> * <var:Q> ^ <nat:4> + <nat:8> * <var:Q> ^ <nat:3> + <nat:9> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Q> /\ <var:e> = <nat:7> * <var:Q> ^ <nat:4> + <nat:8> * <var:Q> ^ <nat:3> + <nat:9> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 