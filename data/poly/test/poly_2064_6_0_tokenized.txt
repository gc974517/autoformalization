\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:m0> := <nat:3> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:f> ; <var:m2> := <var:m2> * <var:f> ; <var:u> := <var:m2> ; <var:u> := <var:u> + <var:m0> \end{verbatim} Assume it to hold that $ <var:f> = <var:i> $ , given any positive integer coefficients $ <var:i> $ , before running our program it follows that $ <var:u> = <nat:2> \times <var:i> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The application of standard Hoare logic gives : \begin{eqnarray} \{ <var:f> = <var:i> \} \\ <var:m0> := <nat:3> ; \\ \{ <var:f> = <var:i> \land <var:m0> = <nat:3> \} \\ <var:m2> := <nat:2> ; \\ \{ <var:f> = <var:i> \land <var:m0> = <nat:3> \land <var:m2> = <nat:2> \} \\ <var:m2> := <var:m2> * <var:f> ; \\ \{ <var:f> = <var:i> \land <var:m0> = <nat:3> \land <var:m2> = <nat:2> * <var:i> \} \\ <var:m2> := <var:m2> * <var:f> ; \\ \{ <var:f> = <var:i> \land <var:m0> = <nat:3> \land <var:m2> = <nat:2> * <var:i> ^ <nat:2> \} \\ <var:u> := <var:m2> ; \\ \{ <var:f> = <var:i> \land <var:m0> = <nat:3> \land <var:u> = <nat:2> * <var:i> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:m0> \\ \{ <var:f> = <var:i> \land <var:u> = <nat:2> * <var:i> ^ <nat:2> + <nat:3> \} \end{eqnarray} Hence , our set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:f> = <var:i> }} <var:m0> := <nat:3> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:f> ; <var:m2> := <var:m2> * <var:f> ; <var:u> := <var:m2> ; <var:u> := <var:u> + <var:m0> {{ <var:u> = <nat:2> * <var:i> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:m0> = <nat:3> /\ <var:m2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:m0> = <nat:3> /\ <var:m2> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:m0> = <nat:3> /\ <var:m2> = <nat:2> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:m0> = <nat:3> /\ <var:u> = <nat:2> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:i> /\ <var:u> = <nat:2> * <var:i> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 