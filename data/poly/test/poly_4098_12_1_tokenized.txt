\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as \begin{verbatim} <var:v1> := <var:x> ; <var:v2> := <var:v1> * <var:x> ; <var:v3> := <var:v2> * <var:x> ; <var:v4> := <var:v3> * <var:x> ; <var:v0> := <nat:6> ; <var:v1> := <var:v1> * <nat:4> ; <var:v3> := <var:v3> * <nat:8> ; <var:v4> := <var:v4> * <nat:8> ; <var:G> := <var:v4> <var:G> := <var:G> + <var:v3> <var:G> := <var:G> + <var:v1> <var:G> := <var:G> + <var:v0> \end{verbatim} Assuming that we have $ <var:x> = <var:a> $ ahead of interpreting this segment of code it follows that we see $ <var:G> = <nat:8> \times <var:a> ^ <nat:4> + <nat:8> \times <var:a> ^ <nat:3> + <nat:4> \times <var:a> + <nat:6> $ when set of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:a> \} \\ <var:v1> := <var:x> ; \\ \{ <var:x> = <var:a> \land <var:v1> = <var:a> \} \\ <var:v2> := <var:v1> * <var:x> ; \\ \{ <var:x> = <var:a> \land <var:v1> = <var:a> \land <var:v2> = <var:a> ^ <nat:2> \} \\ <var:v3> := <var:v2> * <var:x> ; \\ \{ <var:x> = <var:a> \land <var:v1> = <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v3> = <var:a> ^ <nat:3> \} \\ <var:v4> := <var:v3> * <var:x> ; \\ \{ <var:x> = <var:a> \land <var:v1> = <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v3> = <var:a> ^ <nat:3> \land <var:v4> = <var:a> ^ <nat:4> \} \\ <var:v0> := <nat:6> ; \\ \{ <var:x> = <var:a> \land <var:v1> = <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v3> = <var:a> ^ <nat:3> \land <var:v4> = <var:a> ^ <nat:4> \land <var:v0> = <nat:6> \} \\ <var:v1> := <var:v1> * <nat:4> ; \\ \{ <var:x> = <var:a> \land <var:v1> = <nat:4> \cdot <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v3> = <var:a> ^ <nat:3> \land <var:v4> = <var:a> ^ <nat:4> \land <var:v0> = <nat:6> \} \\ <var:v3> := <var:v3> * <nat:8> ; \\ \{ <var:x> = <var:a> \land <var:v1> = <nat:4> \cdot <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v3> = <nat:8> \cdot <var:a> ^ <nat:3> \land <var:v4> = <var:a> ^ <nat:4> \land <var:v0> = <nat:6> \} \\ <var:v4> := <var:v4> * <nat:8> ; \\ \{ <var:x> = <var:a> \land <var:v1> = <nat:4> \cdot <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v3> = <nat:8> \cdot <var:a> ^ <nat:3> \land <var:v4> = <nat:8> \cdot <var:a> ^ <nat:4> \land <var:v0> = <nat:6> \} \\ <var:G> := <var:v4> \\ \{ <var:x> = <var:a> \land <var:v1> = <nat:4> \cdot <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v3> = <nat:8> \cdot <var:a> ^ <nat:3> \land <var:v0> = <nat:6> \land <var:G> = <nat:8> \cdot <var:a> ^ <nat:4> \} \\ <var:G> := <var:G> + <var:v3> \\ \{ <var:x> = <var:a> \land <var:v1> = <nat:4> \cdot <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v0> = <nat:6> \land <var:G> = <nat:8> \cdot <var:a> ^ <nat:4> + <nat:8> \cdot <var:a> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:v1> \\ \{ <var:x> = <var:a> \land <var:v0> = <nat:6> \land <var:G> = <nat:8> \cdot <var:a> ^ <nat:4> + <nat:8> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> \} \\ <var:G> := <var:G> + <var:v0> \\ \{ <var:x> = <var:a> \land <var:G> = <nat:8> \cdot <var:a> ^ <nat:4> + <nat:8> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> + <nat:6> \} \end{eqnarray} Using usual Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <var:v4> : string := " <var:v4> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:x> = <var:a> }} <var:v1> := <var:x> ; <var:v2> := <var:v1> * <var:x> ; <var:v3> := <var:v2> * <var:x> ; <var:v4> := <var:v3> * <var:x> ; <var:v0> := <nat:6> ; <var:v1> := <var:v1> * <nat:4> ; <var:v3> := <var:v3> * <nat:8> ; <var:v4> := <var:v4> * <nat:8> ; <var:G> := <var:v4> <var:G> := <var:G> + <var:v3> <var:G> := <var:G> + <var:v1> <var:G> := <var:G> + <var:v0> {{ <var:G> = <nat:8> * <var:a> ^ <nat:4> + <nat:8> * <var:a> ^ <nat:3> + <nat:4> * <var:a> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:v1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:v1> = <var:a> /\ <var:v2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:v1> = <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v3> = <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:v1> = <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v3> = <var:a> ^ <nat:3> /\ <var:v4> = <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:v1> = <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v3> = <var:a> ^ <nat:3> /\ <var:v4> = <var:a> ^ <nat:4> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:v1> = <nat:4> * <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v3> = <var:a> ^ <nat:3> /\ <var:v4> = <var:a> ^ <nat:4> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:v1> = <nat:4> * <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v3> = <nat:8> * <var:a> ^ <nat:3> /\ <var:v4> = <var:a> ^ <nat:4> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:v1> = <nat:4> * <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v3> = <nat:8> * <var:a> ^ <nat:3> /\ <var:v4> = <nat:8> * <var:a> ^ <nat:4> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:v1> = <nat:4> * <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v3> = <nat:8> * <var:a> ^ <nat:3> /\ <var:v0> = <nat:6> /\ <var:G> = <nat:8> * <var:a> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:v1> = <nat:4> * <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v0> = <nat:6> /\ <var:G> = <nat:8> * <var:a> ^ <nat:4> + <nat:8> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:v0> = <nat:6> /\ <var:G> = <nat:8> * <var:a> ^ <nat:4> + <nat:8> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:a> /\ <var:G> = <nat:8> * <var:a> ^ <nat:4> + <nat:8> * <var:a> ^ <nat:3> + <nat:4> * <var:a> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 