\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q> := <nat:2> ; <var:Q> := <var:Q> * <var:l> ; <var:Q> := <nat:4> + <var:Q> * <var:l> ; <var:Q> := <nat:3> + <var:Q> * <var:l> ; <var:Q> := <nat:1> + <var:Q> * <var:l> ; <var:Q> := <var:Q> * <var:l> ; <var:Q> := <nat:1> + <var:Q> * <var:l> ; <var:Q> := <nat:3> + <var:Q> * <var:l> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> in \emph{Imp} . Given ( for any whole numbers $ <var:y> $ ) $ <var:l> = <var:y> $ prior to running the code then we see $ <var:Q> = <nat:2> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> + <nat:3> $ after program terminates . \end{theorem} \begin{proof} Arguing the correctness of our code segment can be given through standard Hoare techniques . Jumping to the proceeding pieces of code seen in the list of commands , we have \begin{verbatim} { <var:l> = <var:y> } <var:Q> := <nat:2> { <var:l> = <var:y> \land <var:Q> = <nat:2> } { <var:l> = <var:y> \land <var:Q> = <nat:2> } <var:Q> := <var:Q> * <var:l> { <var:l> = <var:y> \land <var:Q> = <nat:2> * <var:y> + } { <var:l> = <var:y> \land <var:Q> = <nat:2> * <var:y> + } <var:Q> := <nat:4> + <var:Q> * <var:l> { <var:l> = <var:y> \land <var:Q> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> } { <var:l> = <var:y> \land <var:Q> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> } <var:Q> := <nat:3> + <var:Q> * <var:l> { <var:l> = <var:y> \land <var:Q> = <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> + <nat:3> } { <var:l> = <var:y> \land <var:Q> = <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> + <nat:3> } <var:Q> := <nat:1> + <var:Q> * <var:l> { <var:l> = <var:y> \land <var:Q> = <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> } { <var:l> = <var:y> \land <var:Q> = <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> } <var:Q> := <var:Q> * <var:l> { <var:l> = <var:y> \land <var:Q> = <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + } { <var:l> = <var:y> \land <var:Q> = <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + } <var:Q> := <nat:1> + <var:Q> * <var:l> { <var:l> = <var:y> \land <var:Q> = <nat:2> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:1> } { <var:l> = <var:y> \land <var:Q> = <nat:2> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:1> } <var:Q> := <nat:3> + <var:Q> * <var:l{ <var:l> = <var:y> \land <var:Q> = <nat:2> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> + <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:2> ; <var:Q> := <var:Q> * <var:l> ; <var:Q> := <nat:4> + <var:Q> * <var:l> ; <var:Q> := <nat:3> + <var:Q> * <var:l> ; <var:Q> := <nat:1> + <var:Q> * <var:l> ; <var:Q> := <var:Q> * <var:l> ; <var:Q> := <nat:1> + <var:Q> * <var:l> ; <var:Q> := <nat:3> + <var:Q> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:l> = <var:y> }} <def:poly> {{ <var:Q> = <nat:2> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Q> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Q> = <nat:2> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Q> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Q> = <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Q> = <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Q> = <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Q> = <nat:2> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:y> /\ <var:Q> = <nat:2> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 