\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:3> ; <var:I> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> . Assume it to be that $ <var:g> = <var:P> $ ahead of running this segment of code it follows that $ <var:I> = <nat:3> $ after code segment exits . \end{theorem} \begin{proof} Proving correctness for our list of instructions is given using this decorated series of instructions . \begin{eqnarray} \{ <var:g> = <var:P> \} \\ <var:i0> := <nat:3> ; \\ \{ <var:g> = <var:P> \land <var:i0> = <nat:3> \} \\ <var:I> := <var:i0> \\ \{ <var:g> = <var:P> \land <var:I> = <nat:3> \} \end{eqnarray} Using Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:3> ; <var:I> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:g> = <var:P> }} <def:poly> {{ <var:I> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:I> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 