\begin{document} \begin{theorem} We define a set of instructions as \begin{verbatim} <var:p1> := <var:h> ; <var:p2> := <var:p1> * <var:h> ; <var:p3> := <var:p2> * <var:h> ; <var:p4> := <var:p3> * <var:h> ; <var:p0> := <nat:7> ; <var:p1> := <var:p1> * <nat:7> ; <var:p2> := <var:p2> * <nat:9> ; <var:p3> := <var:p3> * <nat:5> ; <var:p4> := <var:p4> * <nat:9> ; <var:y> := <var:p4> <var:y> := <var:y> + <var:p3> <var:y> := <var:y> + <var:p2> <var:y> := <var:y> + <var:p1> <var:y> := <var:y> + <var:p0> \end{verbatim} Allow that $ <var:h> = <var:G> $ before evaluating our series of commands then we have $ <var:y> = <nat:9> \cdot <var:G> ^ <nat:4> + <nat:5> \cdot <var:G> ^ <nat:3> + <nat:9> \cdot <var:G> ^ <nat:2> + <nat:7> \cdot <var:G> + <nat:7> $ . \end{theorem} \begin{proof} The proof of our program can be shown by the below decorated code segment . \begin{eqnarray} \{ <var:h> = <var:G> \} \\ <var:p1> := <var:h> ; \\ \{ <var:h> = <var:G> \land <var:p1> = <var:G> \} \\ <var:p2> := <var:p1> * <var:h> ; \\ \{ <var:h> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <var:G> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:h> ; \\ \{ <var:h> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p3> = <var:G> ^ <nat:3> \} \\ <var:p4> := <var:p3> * <var:h> ; \\ \{ <var:h> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p3> = <var:G> ^ <nat:3> \land <var:p4> = <var:G> ^ <nat:4> \} \\ <var:p0> := <nat:7> ; \\ \{ <var:h> = <var:G> \land <var:p1> = <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p3> = <var:G> ^ <nat:3> \land <var:p4> = <var:G> ^ <nat:4> \land <var:p0> = <nat:7> \} \\ <var:p1> := <var:p1> * <nat:7> ; \\ \{ <var:h> = <var:G> \land <var:p1> = <nat:7> \cdot <var:G> \land <var:p2> = <var:G> ^ <nat:2> \land <var:p3> = <var:G> ^ <nat:3> \land <var:p4> = <var:G> ^ <nat:4> \land <var:p0> = <nat:7> \} \\ <var:p2> := <var:p2> * <nat:9> ; \\ \{ <var:h> = <var:G> \land <var:p1> = <nat:7> \cdot <var:G> \land <var:p2> = <nat:9> \cdot <var:G> ^ <nat:2> \land <var:p3> = <var:G> ^ <nat:3> \land <var:p4> = <var:G> ^ <nat:4> \land <var:p0> = <nat:7> \} \\ <var:p3> := <var:p3> * <nat:5> ; \\ \{ <var:h> = <var:G> \land <var:p1> = <nat:7> \cdot <var:G> \land <var:p2> = <nat:9> \cdot <var:G> ^ <nat:2> \land <var:p3> = <nat:5> \cdot <var:G> ^ <nat:3> \land <var:p4> = <var:G> ^ <nat:4> \land <var:p0> = <nat:7> \} \\ <var:p4> := <var:p4> * <nat:9> ; \\ \{ <var:h> = <var:G> \land <var:p1> = <nat:7> \cdot <var:G> \land <var:p2> = <nat:9> \cdot <var:G> ^ <nat:2> \land <var:p3> = <nat:5> \cdot <var:G> ^ <nat:3> \land <var:p4> = <nat:9> \cdot <var:G> ^ <nat:4> \land <var:p0> = <nat:7> \} \\ <var:y> := <var:p4> \\ \{ <var:h> = <var:G> \land <var:p1> = <nat:7> \cdot <var:G> \land <var:p2> = <nat:9> \cdot <var:G> ^ <nat:2> \land <var:p3> = <nat:5> \cdot <var:G> ^ <nat:3> \land <var:p0> = <nat:7> \land <var:y> = <nat:9> \cdot <var:G> ^ <nat:4> \} \\ <var:y> := <var:y> + <var:p3> \\ \{ <var:h> = <var:G> \land <var:p1> = <nat:7> \cdot <var:G> \land <var:p2> = <nat:9> \cdot <var:G> ^ <nat:2> \land <var:p0> = <nat:7> \land <var:y> = <nat:9> \cdot <var:G> ^ <nat:4> + <nat:5> \cdot <var:G> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:p2> \\ \{ <var:h> = <var:G> \land <var:p1> = <nat:7> \cdot <var:G> \land <var:p0> = <nat:7> \land <var:y> = <nat:9> \cdot <var:G> ^ <nat:4> + <nat:5> \cdot <var:G> ^ <nat:3> + <nat:9> \cdot <var:G> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:p1> \\ \{ <var:h> = <var:G> \land <var:p0> = <nat:7> \land <var:y> = <nat:9> \cdot <var:G> ^ <nat:4> + <nat:5> \cdot <var:G> ^ <nat:3> + <nat:9> \cdot <var:G> ^ <nat:2> + <nat:7> \cdot <var:G> \} \\ <var:y> := <var:y> + <var:p0> \\ \{ <var:h> = <var:G> \land <var:y> = <nat:9> \cdot <var:G> ^ <nat:4> + <nat:5> \cdot <var:G> ^ <nat:3> + <nat:9> \cdot <var:G> ^ <nat:2> + <nat:7> \cdot <var:G> + <nat:7> \} \end{eqnarray} Applying Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:h> = <var:G> }} <var:p1> := <var:h> ; <var:p2> := <var:p1> * <var:h> ; <var:p3> := <var:p2> * <var:h> ; <var:p4> := <var:p3> * <var:h> ; <var:p0> := <nat:7> ; <var:p1> := <var:p1> * <nat:7> ; <var:p2> := <var:p2> * <nat:9> ; <var:p3> := <var:p3> * <nat:5> ; <var:p4> := <var:p4> * <nat:9> ; <var:y> := <var:p4> <var:y> := <var:y> + <var:p3> <var:y> := <var:y> + <var:p2> <var:y> := <var:y> + <var:p1> <var:y> := <var:y> + <var:p0> {{ <var:y> = <nat:9> * <var:G> ^ <nat:4> + <nat:5> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:7> * <var:G> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:p1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p3> = <var:G> ^ <nat:3> /\ <var:p4> = <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:p1> = <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p3> = <var:G> ^ <nat:3> /\ <var:p4> = <var:G> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:p1> = <nat:7> * <var:G> /\ <var:p2> = <var:G> ^ <nat:2> /\ <var:p3> = <var:G> ^ <nat:3> /\ <var:p4> = <var:G> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:p1> = <nat:7> * <var:G> /\ <var:p2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:p3> = <var:G> ^ <nat:3> /\ <var:p4> = <var:G> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:p1> = <nat:7> * <var:G> /\ <var:p2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:p3> = <nat:5> * <var:G> ^ <nat:3> /\ <var:p4> = <var:G> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:p1> = <nat:7> * <var:G> /\ <var:p2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:p3> = <nat:5> * <var:G> ^ <nat:3> /\ <var:p4> = <nat:9> * <var:G> ^ <nat:4> /\ <var:p0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:p1> = <nat:7> * <var:G> /\ <var:p2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:p3> = <nat:5> * <var:G> ^ <nat:3> /\ <var:p0> = <nat:7> /\ <var:y> = <nat:9> * <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:p1> = <nat:7> * <var:G> /\ <var:p2> = <nat:9> * <var:G> ^ <nat:2> /\ <var:p0> = <nat:7> /\ <var:y> = <nat:9> * <var:G> ^ <nat:4> + <nat:5> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:p1> = <nat:7> * <var:G> /\ <var:p0> = <nat:7> /\ <var:y> = <nat:9> * <var:G> ^ <nat:4> + <nat:5> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:p0> = <nat:7> /\ <var:y> = <nat:9> * <var:G> ^ <nat:4> + <nat:5> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:G> /\ <var:y> = <nat:9> * <var:G> ^ <nat:4> + <nat:5> * <var:G> ^ <nat:3> + <nat:9> * <var:G> ^ <nat:2> + <nat:7> * <var:G> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 