\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:E> ; <var:Y0> := <nat:3> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:A> := <var:Y1> <var:A> := <var:A> + <var:Y0> \end{verbatim} Assume ( taking natural coefficients $ <var:y> $ ) $ <var:E> = <var:y> $ before the execution of this code segment , then we see $ <var:A> = <nat:2> \cdot <var:y> + <nat:3> $ when code segment executes . \end{theorem} \begin{proof} Arguing the correctness of this program can be given through usual Hoare techniques . Going forward , we see \begin{verbatim} { <var:E> = <var:y> } <var:Y1> := <var:E> { <var:E> = <var:y> \land <var:Y1> = <var:y> } \end{verbatim} This is shown with the variable assignmet rule given by usual Hoare reasoning . Considering the following commands seen in our code segment , we see \begin{verbatim} { <var:E> = <var:y> } <var:Y1> := <var:E> { <var:E> = <var:y> \land <var:Y1> = <var:y> } { <var:E> = <var:y> \land <var:Y1> = <var:y> } <var:Y0> := <nat:3> { <var:E> = <var:y> \land <var:Y1> = <var:y> \land <var:Y0> = <nat:3> } { <var:E> = <var:y> \land <var:Y1> = <var:y> \land <var:Y0> = <nat:3> } <var:Y1> := <var:Y1> * <nat:2> { <var:E> = <var:y> \land <var:Y1> = <nat:2> * <var:y> \land <var:Y0> = <nat:3> } \end{verbatim} This is shown using the inference rule given in standard Hoare techniques . Shifting focus toward the subsequent command seen in our program , \begin{verbatim} { <var:E> = <var:y> } <var:Y1> := <var:E> { <var:E> = <var:y> \land <var:Y1> = <var:y> } \end{verbatim} This is shown through the variable update scheme from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:E> = <var:y> }} <var:Y1> := <var:E> ; <var:Y0> := <nat:3> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:A> := <var:Y1> <var:A> := <var:A> + <var:Y0> {{ <var:A> = <nat:2> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:Y1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:Y1> = <var:y> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:Y1> = <nat:2> * <var:y> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:Y0> = <nat:3> /\ <var:A> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:A> = <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 