\begin{document} \begin{theorem} Take the following code in \emph{Imp} such that \begin{verbatim} <var:m> := <nat:2> ; <var:m> := <nat:1> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:4> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <var:m> * <var:R> ; <var:m> := <nat:4> + <var:m> * <var:R> ; <var:m> := <nat:4> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:1> + <var:m> * <var:R> \end{verbatim} Given it to be that $ <var:R> = <var:X> $ prior to the evaluation of the series of instructions , it holds that $ <var:m> = <nat:2> \times <var:X> ^ <nat:13> + <nat:1> \times <var:X> ^ <nat:12> + <nat:2> \times <var:X> ^ <nat:11> + <nat:2> \times <var:X> ^ <nat:10> + <nat:2> \times <var:X> ^ <nat:9> + <nat:4> \times <var:X> ^ <nat:8> + <nat:2> \times <var:X> ^ <nat:7> + <nat:2> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:1> $ once segment of code finishes . \end{theorem} \begin{proof} Showing our claim about correctness for this code segment can be given using Hoare reasoning . Stepping forward , we see the variable update command defining $ <nat:2> $ as $ <var:m>$ . This transfers the condition $ \{ <var:R> = <var:X> \} $ to the condition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \} $ . Advancing , we have the assignment code assigning $ <nat:1> + <var:m> * <var:R> $ toward $ <var:m>$ . This statement takes the precondition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \} $ into the condition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> + <nat:1> \} $ . This is sound with the assignment scheme given by usual Hoare reasoning . Moving forward to the next step , we have the variable binding command \verb | <var:m> := <nat:2> + <var:m> * <var:R> ; | . This line redefines the condition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> + <nat:1> \} $ toward $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:2> \} $ . Moving forward to the proceeding line seen in the series of instructions , we see the variable assignmet statement \verb | <var:m> := <nat:2> + <var:m> * <var:R> ; | . This redefines the precondition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:2> \} $ into the postcondition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:2> \} $ . This is shown by the assignment rule of Hoare reasoning . Following , the command \verb | <var:m> := <nat:2> + <var:m> * <var:R> ; | . This command takes $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:2> \} $ to the postcondition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:2> \} $ . This is known to be sound by the assignment inference rule of Hoare techniques . Observing the upcoming line of code in the set of instructions , we have the variable assignmet code \verb | <var:m> := <nat:4> + <var:m> * <var:R> ; | . This redefines the condition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:2> \} $ to $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:5> + <nat:1> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:4> \} $ . This is ensured through the assignment scheme given by Hoare logic . Stepping through , we see the environment update line yielding $ <nat:2> + <var:m> * <var:R> $ as $ <var:m>$ . This forwards the precondition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:5> + <nat:1> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:4> \} $ toward the condition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:6> + <nat:1> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:2> \} $ . This is shown with the assignment inference rule from Hoare logic . Immediately after , we see the variable update code binding $ <nat:2> + <var:m> * <var:R> $ to $ <var:m>$ . This line moves the condition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:6> + <nat:1> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:2> \} $ as the postcondition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:7> + <nat:1> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:2> \} $ . This is shown using the assignment law in Hoare logic . Moving forward to the next command in the program , we have the assignment code \verb | <var:m> := <nat:2> + <var:m> * <var:R> ; | . This statement forwards the precondition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:7> + <nat:1> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:2> \} $ to the postcondition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:8> + <nat:1> \times <var:X> ^ <nat:7> + <nat:2> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:2> \} $ . Honing in on the upcoming step contained in our series of commands , we have the line letting $ <var:m> * <var:R> $ toward $ <var:m>$ . This transfers $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:8> + <nat:1> \times <var:X> ^ <nat:7> + <nat:2> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:2> \} $ as $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:9> + <nat:1> \times <var:X> ^ <nat:8> + <nat:2> \times <var:X> ^ <nat:7> + <nat:2> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + \} $ . This is sound by the assignment scheme found in usual Hoare reasoning . Taking another step toward the next statement found in our code , we see the line assigning $ <nat:4> + <var:m> * <var:R> $ toward $ <var:m>$ . This transfers the precondition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:9> + <nat:1> \times <var:X> ^ <nat:8> + <nat:2> \times <var:X> ^ <nat:7> + <nat:2> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + \} $ to the postcondition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:10> + <nat:1> \times <var:X> ^ <nat:9> + <nat:2> \times <var:X> ^ <nat:8> + <nat:2> \times <var:X> ^ <nat:7> + <nat:2> \times <var:X> ^ <nat:6> + <nat:4> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:4> \} $ . This is sound using the assignment rule in usual Hoare techniques . Moving on to the subsequent step contained in our series of commands , we see the variable binding statement giving $ <nat:4> + <var:m> * <var:R> $ into $ <var:m>$ . This moves $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:10> + <nat:1> \times <var:X> ^ <nat:9> + <nat:2> \times <var:X> ^ <nat:8> + <nat:2> \times <var:X> ^ <nat:7> + <nat:2> \times <var:X> ^ <nat:6> + <nat:4> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:4> \} $ into the condition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:11> + <nat:1> \times <var:X> ^ <nat:10> + <nat:2> \times <var:X> ^ <nat:9> + <nat:2> \times <var:X> ^ <nat:8> + <nat:2> \times <var:X> ^ <nat:7> + <nat:4> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> + <nat:4> \} $ . After , we see the environment update command \verb | <var:m> := <nat:2> + <var:m> * <var:R> ; | . This line takes $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:11> + <nat:1> \times <var:X> ^ <nat:10> + <nat:2> \times <var:X> ^ <nat:9> + <nat:2> \times <var:X> ^ <nat:8> + <nat:2> \times <var:X> ^ <nat:7> + <nat:4> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> + <nat:4> \} $ toward the postcondition $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:12> + <nat:1> \times <var:X> ^ <nat:11> + <nat:2> \times <var:X> ^ <nat:10> + <nat:2> \times <var:X> ^ <nat:9> + <nat:2> \times <var:X> ^ <nat:8> + <nat:4> \times <var:X> ^ <nat:7> + <nat:2> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:2> \} $ . This is ensured by the assignment inference rule obtained from standard Hoare logic . Jumping to the subsequent line of code in the program , we see the command \verb | <var:m> := <nat:1> + <var:m> * <var:R> | . This moves $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:12> + <nat:1> \times <var:X> ^ <nat:11> + <nat:2> \times <var:X> ^ <nat:10> + <nat:2> \times <var:X> ^ <nat:9> + <nat:2> \times <var:X> ^ <nat:8> + <nat:4> \times <var:X> ^ <nat:7> + <nat:2> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:5> + <nat:2> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:2> \} $ as $ \{ <var:R> = <var:X> \land <var:m> = <nat:2> \times <var:X> ^ <nat:13> + <nat:1> \times <var:X> ^ <nat:12> + <nat:2> \times <var:X> ^ <nat:11> + <nat:2> \times <var:X> ^ <nat:10> + <nat:2> \times <var:X> ^ <nat:9> + <nat:4> \times <var:X> ^ <nat:8> + <nat:2> \times <var:X> ^ <nat:7> + <nat:2> \times <var:X> ^ <nat:6> + <nat:2> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:1> \} $ . This is ensured by the assignment inference rule from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:R> = <var:X> }} <var:m> := <nat:2> ; <var:m> := <nat:1> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:4> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <var:m> * <var:R> ; <var:m> := <nat:4> + <var:m> * <var:R> ; <var:m> := <nat:4> + <var:m> * <var:R> ; <var:m> := <nat:2> + <var:m> * <var:R> ; <var:m> := <nat:1> + <var:m> * <var:R> {{ <var:m> = <nat:2> * <var:X> ^ <nat:13> + <nat:1> * <var:X> ^ <nat:12> + <nat:2> * <var:X> ^ <nat:11> + <nat:2> * <var:X> ^ <nat:10> + <nat:2> * <var:X> ^ <nat:9> + <nat:4> * <var:X> ^ <nat:8> + <nat:2> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> * <var:X> ^ <nat:9> + <nat:1> * <var:X> ^ <nat:8> + <nat:2> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:9> + <nat:2> * <var:X> ^ <nat:8> + <nat:2> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> * <var:X> ^ <nat:11> + <nat:1> * <var:X> ^ <nat:10> + <nat:2> * <var:X> ^ <nat:9> + <nat:2> * <var:X> ^ <nat:8> + <nat:2> * <var:X> ^ <nat:7> + <nat:4> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> * <var:X> ^ <nat:12> + <nat:1> * <var:X> ^ <nat:11> + <nat:2> * <var:X> ^ <nat:10> + <nat:2> * <var:X> ^ <nat:9> + <nat:2> * <var:X> ^ <nat:8> + <nat:4> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:X> /\ <var:m> = <nat:2> * <var:X> ^ <nat:13> + <nat:1> * <var:X> ^ <nat:12> + <nat:2> * <var:X> ^ <nat:11> + <nat:2> * <var:X> ^ <nat:10> + <nat:2> * <var:X> ^ <nat:9> + <nat:4> * <var:X> ^ <nat:8> + <nat:2> * <var:X> ^ <nat:7> + <nat:2> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 