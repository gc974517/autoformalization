\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X1> := <var:K> ; <var:X0> := <nat:6> ; <var:X1> := <var:X1> * <nat:5> ; <var:n> := <var:X1> <var:n> := <var:n> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:K> = <var:d> $ ahead of interpreting the program , it follows that we have $ <var:n> = <nat:5> * <var:d> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions can be given with Hoare reasoning . Advancing to the next step , we have the binding code letting $ <var:K> $ as $ <var:X1>$ . This advances $ \{ <var:K> = <var:d> \} $ as the postcondition $ \{ <var:K> = <var:d> \land <var:X1> = <var:d> \} $ . This is sound through the assignment rule in Hoare reasoning . Jumping to the proceeding line of code seen in the code segment , the environment update code binding $ <nat:6> $ toward $ <var:X0>$ . This line transfers the precondition $ \{ <var:K> = <var:d> \land <var:X1> = <var:d> \} $ toward the condition $ \{ <var:K> = <var:d> \land <var:X1> = <var:d> \land <var:X0> = <nat:6> \} $ . Moving on to the next step , we have the assignment statement yielding $ <var:X1> * <nat:5> $ as $ <var:X1>$ . This command redefines the precondition $ \{ <var:K> = <var:d> \land <var:X1> = <var:d> \land <var:X0> = <nat:6> \} $ toward the postcondition $ \{ <var:K> = <var:d> \land <var:X1> = <nat:5> \times <var:d> \land <var:X0> = <nat:6> \} $ . Going to the next step , the environment update command \verb | <var:n> := <var:X1> | . This moves the condition $ \{ <var:K> = <var:d> \land <var:X1> = <nat:5> \times <var:d> \land <var:X0> = <nat:6> \} $ to the condition $ \{ <var:K> = <var:d> \land <var:X0> = <nat:6> \land <var:n> = <nat:5> \times <var:d> \} $ . Advancing , the binding code \verb | <var:n> := <var:n> + <var:X0> | . This takes $ \{ <var:K> = <var:d> \land <var:X0> = <nat:6> \land <var:n> = <nat:5> \times <var:d> \} $ as the postcondition $ \{ <var:K> = <var:d> \land <var:n> = <nat:5> \times <var:d> + <nat:6> \} $ . This is ensured with the assignment scheme defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X1> := <var:K> ; <var:X0> := <nat:6> ; <var:X1> := <var:X1> * <nat:5> ; <var:n> := <var:X1> <var:n> := <var:n> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:K> = <var:d> }} <def:poly> {{ <var:n> = <nat:5> * <var:d> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:X1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:X1> = <var:d> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:X1> = <nat:5> * <var:d> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:X0> = <nat:6> /\ <var:n> = <nat:5> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:n> = <nat:5> * <var:d> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 