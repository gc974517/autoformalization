\begin{document} \begin{theorem} We define the following code segment : \begin{verbatim} <var:J> := <nat:1> ; <var:J> := <nat:3> + <var:J> * <var:f> ; <var:J> := <nat:4> + <var:J> * <var:f> ; <var:J> := <nat:3> + <var:J> * <var:f> ; <var:J> := <nat:3> + <var:J> * <var:f> ; <var:J> := <nat:1> + <var:J> * <var:f> ; <var:J> := <nat:3> + <var:J> * <var:f> ; <var:J> := <nat:4> + <var:J> * <var:f> ; <var:J> := <nat:1> + <var:J> * <var:f> ; <var:J> := <var:J> * <var:f> ; <var:J> := <nat:2> + <var:J> * <var:f> \end{verbatim} Allowing it to be that $ <var:f> = <var:D> $ ahead of interpreting the list of commands , it must be that $ <var:J> = <nat:1> \times <var:D> ^ <nat:10> + <nat:3> \times <var:D> ^ <nat:9> + <nat:4> \times <var:D> ^ <nat:8> + <nat:3> \times <var:D> ^ <nat:7> + <nat:3> \times <var:D> ^ <nat:6> + <nat:1> \times <var:D> ^ <nat:5> + <nat:3> \times <var:D> ^ <nat:4> + <nat:4> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands is demonstrated using Hoare techniques . Looking at the following command in the set of commands , we have the variable update command letting $ <nat:1> $ toward $ <var:J>$ . This command advances $ \{ <var:f> = <var:D> \} $ as $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> \} $ . This is deduced through the assignment law given by standard Hoare techniques . Moving forward to the subsequent line of code found in the series of commands , we see the variable binding code letting $ <nat:3> + <var:J> * <var:f> $ toward $ <var:J>$ . This moves the precondition $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> \} $ toward $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> + <nat:3> \} $ . Next , the assignment command giving $ <nat:4> + <var:J> * <var:f> $ into $ <var:J>$ . This line forwards $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> + <nat:3> \} $ toward the condition $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> \} $ . This is shown with the assignment inference rule given by typical Hoare logic . Observing the following command in our set of commands , we see the statement binding $ <nat:3> + <var:J> * <var:f> $ toward $ <var:J>$ . This command takes the precondition $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> \} $ as $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> \} $ . This is known to be sound with the assignment law from typical Hoare techniques . Observing the following piece of code found in the list of commands , the binding command letting $ <nat:3> + <var:J> * <var:f> $ toward $ <var:J>$ . This moves $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> \} $ into $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:3> \} $ . Following , we see the variable update code binding $ <nat:1> + <var:J> * <var:f> $ toward $ <var:J>$ . This redefines $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:3> \} $ toward $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> \} $ . Looking at the upcoming line contained in the segment of code , we have the variable binding command \verb | <var:J> := <nat:3> + <var:J> * <var:f> ; | . This redefines $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> \} $ into $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> \} $ . Honing in on the subsequent line of code in the program , we see the variable update line defining $ <nat:4> + <var:J> * <var:f> $ as $ <var:J>$ . This line forwards the precondition $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> \} $ into $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> \} $ . Advancing to the upcoming step seen in the program , the assignment statement \verb | <var:J> := <nat:1> + <var:J> * <var:f> ; | . This moves the precondition $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> \} $ to the postcondition $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> \} $ . Keeping momentum , the binding line defining $ <var:J> * <var:f> $ as $ <var:J>$ . This line takes the precondition $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> \} $ toward $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:9> + <nat:3> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + \} $ . Looking at the subsequent line seen in our list of commands , the assignment statement giving $ <nat:2> + <var:J> * <var:f$ to $ <var:J>$ . This statement advances the condition $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:9> + <nat:3> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + \} $ as $ \{ <var:f> = <var:D> \land <var:J> = <nat:1> * <var:D> ^ <nat:10> + <nat:3> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:f> = <var:D> }} <var:J> := <nat:1> ; <var:J> := <nat:3> + <var:J> * <var:f> ; <var:J> := <nat:4> + <var:J> * <var:f> ; <var:J> := <nat:3> + <var:J> * <var:f> ; <var:J> := <nat:3> + <var:J> * <var:f> ; <var:J> := <nat:1> + <var:J> * <var:f> ; <var:J> := <nat:3> + <var:J> * <var:f> ; <var:J> := <nat:4> + <var:J> * <var:f> ; <var:J> := <nat:1> + <var:J> * <var:f> ; <var:J> := <var:J> * <var:f> ; <var:J> := <nat:2> + <var:J> * <var:f> {{ <var:J> = <nat:1> * <var:D> ^ <nat:10> + <nat:3> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:J> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:J> = <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:J> = <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:J> = <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:J> = <nat:1> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:J> = <nat:1> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:J> = <nat:1> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:J> = <nat:1> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:J> = <nat:1> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:J> = <nat:1> * <var:D> ^ <nat:9> + <nat:3> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:D> /\ <var:J> = <nat:1> * <var:D> ^ <nat:10> + <nat:3> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 