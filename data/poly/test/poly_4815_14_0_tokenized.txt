\begin{document} \begin{theorem} We define the following series of instructions such that \begin{verbatim} <var:R0> := <nat:2> ; <var:R1> := <nat:1> ; <var:R1> := <var:R1> * <var:e> ; <var:R2> := <nat:3> ; <var:R2> := <var:R2> * <var:e> ; <var:R2> := <var:R2> * <var:e> ; <var:R3> := <nat:3> ; <var:R3> := <var:R3> * <var:e> ; <var:R3> := <var:R3> * <var:e> ; <var:R3> := <var:R3> * <var:e> ; <var:q> := <var:R3> ; <var:q> := <var:q> + <var:R2> ; <var:q> := <var:q> + <var:R1> ; <var:q> := <var:q> + <var:R0> \end{verbatim} Assuming , for all positive numbers $ <var:h> $ , it to be that $ <var:e> = <var:h> $ before executing this series of instructions , it must be that $ <var:q> = <nat:3> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning produces : \begin{eqnarray} \{ <var:e> = <var:h> \} \\ <var:R0> := <nat:2> ; \\ \{ <var:e> = <var:h> \land <var:R0> = <nat:2> \} \\ <var:R1> := <nat:1> ; \\ \{ <var:e> = <var:h> \land <var:R0> = <nat:2> \land <var:R1> = <nat:1> \} \\ <var:R1> := <var:R1> * <var:e> ; \\ \{ <var:e> = <var:h> \land <var:R0> = <nat:2> \land <var:R1> = <nat:1> \cdot <var:h> \} \\ <var:R2> := <nat:3> ; \\ \{ <var:e> = <var:h> \land <var:R0> = <nat:2> \land <var:R1> = <nat:1> \cdot <var:h> \land <var:R2> = <nat:3> \} \\ <var:R2> := <var:R2> * <var:e> ; \\ \{ <var:e> = <var:h> \land <var:R0> = <nat:2> \land <var:R1> = <nat:1> \cdot <var:h> \land <var:R2> = <nat:3> \cdot <var:h> \} \\ <var:R2> := <var:R2> * <var:e> ; \\ \{ <var:e> = <var:h> \land <var:R0> = <nat:2> \land <var:R1> = <nat:1> \cdot <var:h> \land <var:R2> = <nat:3> \cdot <var:h> ^ <nat:2> \} \\ <var:R3> := <nat:3> ; \\ \{ <var:e> = <var:h> \land <var:R0> = <nat:2> \land <var:R1> = <nat:1> \cdot <var:h> \land <var:R2> = <nat:3> \cdot <var:h> ^ <nat:2> \land <var:R3> = <nat:3> \} \\ <var:R3> := <var:R3> * <var:e> ; \\ \{ <var:e> = <var:h> \land <var:R0> = <nat:2> \land <var:R1> = <nat:1> \cdot <var:h> \land <var:R2> = <nat:3> \cdot <var:h> ^ <nat:2> \land <var:R3> = <nat:3> \cdot <var:h> \} \\ <var:R3> := <var:R3> * <var:e> ; \\ \{ <var:e> = <var:h> \land <var:R0> = <nat:2> \land <var:R1> = <nat:1> \cdot <var:h> \land <var:R2> = <nat:3> \cdot <var:h> ^ <nat:2> \land <var:R3> = <nat:3> \cdot <var:h> ^ <nat:2> \} \\ <var:R3> := <var:R3> * <var:e> ; \\ \{ <var:e> = <var:h> \land <var:R0> = <nat:2> \land <var:R1> = <nat:1> \cdot <var:h> \land <var:R2> = <nat:3> \cdot <var:h> ^ <nat:2> \land <var:R3> = <nat:3> \cdot <var:h> ^ <nat:3> \} \\ <var:q> := <var:R3> ; \\ \{ <var:e> = <var:h> \land <var:R0> = <nat:2> \land <var:R1> = <nat:1> \cdot <var:h> \land <var:R2> = <nat:3> \cdot <var:h> ^ <nat:2> \land <var:q> = <nat:3> \cdot <var:h> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:R2> ; \\ \{ <var:e> = <var:h> \land <var:R0> = <nat:2> \land <var:R1> = <nat:1> \cdot <var:h> \land <var:q> = <nat:3> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:R1> ; \\ \{ <var:e> = <var:h> \land <var:R0> = <nat:2> \land <var:q> = <nat:3> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> \} \\ <var:q> := <var:q> + <var:R0> \\ \{ <var:e> = <var:h> \land <var:q> = <nat:3> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:2> \} \end{eqnarray} Given the preceding argument , the series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:e> = <var:h> }} <var:R0> := <nat:2> ; <var:R1> := <nat:1> ; <var:R1> := <var:R1> * <var:e> ; <var:R2> := <nat:3> ; <var:R2> := <var:R2> * <var:e> ; <var:R2> := <var:R2> * <var:e> ; <var:R3> := <nat:3> ; <var:R3> := <var:R3> * <var:e> ; <var:R3> := <var:R3> * <var:e> ; <var:R3> := <var:R3> * <var:e> ; <var:q> := <var:R3> ; <var:q> := <var:q> + <var:R2> ; <var:q> := <var:q> + <var:R1> ; <var:q> := <var:q> + <var:R0> {{ <var:q> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:1> * <var:h> /\ <var:R2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:1> * <var:h> /\ <var:R2> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:1> * <var:h> /\ <var:R2> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:1> * <var:h> /\ <var:R2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:R3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:1> * <var:h> /\ <var:R2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:R3> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:1> * <var:h> /\ <var:R2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:R3> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:1> * <var:h> /\ <var:R2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:R3> = <nat:3> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:1> * <var:h> /\ <var:R2> = <nat:3> * <var:h> ^ <nat:2> /\ <var:q> = <nat:3> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:1> * <var:h> /\ <var:q> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:R0> = <nat:2> /\ <var:q> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:h> /\ <var:q> = <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 