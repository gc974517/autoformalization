\begin{document} \begin{theorem} We define the following series of instructions as \begin{verbatim} <var:Y0> := <nat:3> ; <var:Y1> := <nat:7> ; <var:Y1> := <var:Y1> * <var:d> ; <var:Y2> := <nat:3> ; <var:Y2> := <var:Y2> * <var:d> ; <var:Y2> := <var:Y2> * <var:d> ; <var:t> := <var:Y2> ; <var:t> := <var:t> + <var:Y1> ; <var:t> := <var:t> + <var:Y0> \end{verbatim} Allow that $ <var:d> = <var:r> $ before interpreting our series of commands , it holds that we have $ <var:t> = <nat:3> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:3> $ once series of instructions executes . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code can be done by usual Hoare techniques . Keeping momentum , we see the command letting $ <nat:3> $ as $ <var:Y0>$ . This code advances the condition $ \{ <var:d> = <var:r> \} $ toward the condition $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \} $ . This is sound by the assignment inference rule in usual Hoare techniques . Moving on to the next step , the assignment line binding $ <nat:7> $ into $ <var:Y1>$ . This redefines $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \} $ to the postcondition $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:7> \} $ . This is rigorously given using the assignment scheme obtained from standard Hoare techniques . Advancing on , we see the statement binding $ <var:Y1> * <var:d> $ to $ <var:Y1>$ . This transfers $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:7> \} $ into $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:7> \cdot <var:r> \} $ . Paying attention to the following command seen in our series of instructions , we have the variable assignmet statement \verb | <var:Y2> := <nat:3> ; | . This command takes the precondition $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:7> \cdot <var:r> \} $ into the condition $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:7> \cdot <var:r> \land <var:Y2> = <nat:3> \} $ . This is deduced through the assignment law found in typical Hoare reasoning . Now , the environment update code \verb | <var:Y2> := <var:Y2> * <var:d> ; | . This statement transfers the precondition $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:7> \cdot <var:r> \land <var:Y2> = <nat:3> \} $ to $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:7> \cdot <var:r> \land <var:Y2> = <nat:3> \cdot <var:r> \} $ . Advancing , the command binding $ <var:Y2> * <var:d> $ to $ <var:Y2>$ . This transfers the precondition $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:7> \cdot <var:r> \land <var:Y2> = <nat:3> \cdot <var:r> \} $ as the condition $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:7> \cdot <var:r> \land <var:Y2> = <nat:3> \cdot <var:r> ^ <nat:2> \} $ . This is sound through the assignment scheme in standard Hoare techniques . Next , the assignment command \verb | <var:t> := <var:Y2> ; | . This transfers $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:7> \cdot <var:r> \land <var:Y2> = <nat:3> \cdot <var:r> ^ <nat:2> \} $ toward the postcondition $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:7> \cdot <var:r> \land <var:t> = <nat:3> \cdot <var:r> ^ <nat:2> \} $ . This is rigorously given through the assignment scheme from typical Hoare techniques . Advancing on , we see the statement giving $ <var:t> + <var:Y1> $ as $ <var:t>$ . This transfers the condition $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:7> \cdot <var:r> \land <var:t> = <nat:3> \cdot <var:r> ^ <nat:2> \} $ into the postcondition $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:t> = <nat:3> \cdot <var:r> ^ <nat:2> + <nat:7> \cdot <var:r> \} $ . This is known to be sound through the assignment rule defined by typical Hoare techniques . Focusing on the subsequent piece of code contained in the set of commands , we see the variable update statement \verb | <var:t> := <var:t> + <var:Y0> | . This advances $ \{ <var:d> = <var:r> \land <var:Y0> = <nat:3> \land <var:t> = <nat:3> \cdot <var:r> ^ <nat:2> + <nat:7> \cdot <var:r> \} $ to $ \{ <var:d> = <var:r> \land <var:t> = <nat:3> \cdot <var:r> ^ <nat:2> + <nat:7> \cdot <var:r> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:d> = <var:r> }} <var:Y0> := <nat:3> ; <var:Y1> := <nat:7> ; <var:Y1> := <var:Y1> * <var:d> ; <var:Y2> := <nat:3> ; <var:Y2> := <var:Y2> * <var:d> ; <var:Y2> := <var:Y2> * <var:d> ; <var:t> := <var:Y2> ; <var:t> := <var:t> + <var:Y1> ; <var:t> := <var:t> + <var:Y0> {{ <var:t> = <nat:3> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:7> * <var:r> /\ <var:Y2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:7> * <var:r> /\ <var:Y2> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:7> * <var:r> /\ <var:Y2> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:7> * <var:r> /\ <var:t> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:Y0> = <nat:3> /\ <var:t> = <nat:3> * <var:r> ^ <nat:2> + <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:t> = <nat:3> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 