\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:3> ; <var:a> := <var:i0> \end{verbatim} Assume --- taking $ <var:m> \in \mathbb{Z}^+ $ --- that $ <var:l> = <var:m> $ prior to evaluating the code segment it holds that we see $ <var:a> = <nat:3> $ . \end{theorem} \begin{proof} Using Hoare logic results in : \begin{eqnarray} \{ <var:l> = <var:m> \} \\ <var:i0> := <nat:3> ; \\ \{ <var:l> = <var:m> \land <var:i0> = <nat:3> \} \\ <var:a> := <var:i0> \\ \{ <var:l> = <var:m> \land <var:a> = <nat:3> \} \end{eqnarray} As a consequence , our list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:l> = <var:m> }} <var:i0> := <nat:3> ; <var:a> := <var:i0> {{ <var:a> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:a> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 