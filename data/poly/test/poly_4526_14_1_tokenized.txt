\begin{document} \begin{theorem} Let the following code as follows \begin{verbatim} <var:T1> := <var:W> ; <var:T2> := <var:T1> * <var:W> ; <var:T3> := <var:T2> * <var:W> ; <var:T4> := <var:T3> * <var:W> ; <var:T0> := <nat:2> ; <var:T1> := <var:T1> * <nat:6> ; <var:T2> := <var:T2> * <nat:8> ; <var:T3> := <var:T3> * <nat:6> ; <var:T4> := <var:T4> * <nat:4> ; <var:R> := <var:T4> <var:R> := <var:R> + <var:T3> <var:R> := <var:R> + <var:T2> <var:R> := <var:R> + <var:T1> <var:R> := <var:R> + <var:T0> \end{verbatim} Allow $ <var:W> = <var:i> $ ( assuming some positive numbers $ <var:i> $ ) ahead of the evaluation of our set of commands it holds that we have $ <var:R> = <nat:4> \times <var:i> ^ <nat:4> + <nat:6> \times <var:i> ^ <nat:3> + <nat:8> \times <var:i> ^ <nat:2> + <nat:6> \times <var:i> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands is evident with usual Hoare logic . Looking at the next line of code seen in our code , the environment update command \verb | <var:T1> := <var:W> ; | . This statement transfers the precondition $ \{ <var:W> = <var:i> \} $ into $ \{ <var:W> = <var:i> \land <var:T1> = <var:i> \} $ . This is guaranteed with the assignment law of typical Hoare techniques . Now , we have the variable update statement giving $ <var:T1> * <var:W> $ to $ <var:T2>$ . This code redefines the condition $ \{ <var:W> = <var:i> \land <var:T1> = <var:i> \} $ into $ \{ <var:W> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \} $ . Looking at the upcoming line of code seen in the list of commands , the binding statement giving $ <var:T2> * <var:W> $ toward $ <var:T3>$ . This redefines $ \{ <var:W> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \} $ toward $ \{ <var:W> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \} $ . This is given using the assignment scheme defined in Hoare techniques . Immediately after , we have the assignment code binding $ <var:T3> * <var:W> $ to $ <var:T4>$ . This advances $ \{ <var:W> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \} $ to the postcondition $ \{ <var:W> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T4> = <var:i> ^ <nat:4> \} $ . This is rigorously given through the assignment scheme given by usual Hoare logic . Shifting focus toward the subsequent line seen in our program , we have the binding statement letting $ <nat:2> $ to $ <var:T0>$ . This redefines the precondition $ \{ <var:W> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T4> = <var:i> ^ <nat:4> \} $ as $ \{ <var:W> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T4> = <var:i> ^ <nat:4> \land <var:T0> = <nat:2> \} $ . Moving forward , the statement defining $ <var:T1> * <nat:6> $ to $ <var:T1>$ . This moves the condition $ \{ <var:W> = <var:i> \land <var:T1> = <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T4> = <var:i> ^ <nat:4> \land <var:T0> = <nat:2> \} $ as the postcondition $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T4> = <var:i> ^ <nat:4> \land <var:T0> = <nat:2> \} $ . This is shown to be logically sound by the assignment scheme obtained from typical Hoare reasoning . Immediately following , we see the variable binding code \verb | <var:T2> := <var:T2> * <nat:8> ; | . This moves the condition $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T2> = <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T4> = <var:i> ^ <nat:4> \land <var:T0> = <nat:2> \} $ toward $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T2> = <nat:8> * <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T4> = <var:i> ^ <nat:4> \land <var:T0> = <nat:2> \} $ . Immediately following , the variable update code giving $ <var:T3> * <nat:6> $ toward $ <var:T3>$ . This redefines $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T2> = <nat:8> * <var:i> ^ <nat:2> \land <var:T3> = <var:i> ^ <nat:3> \land <var:T4> = <var:i> ^ <nat:4> \land <var:T0> = <nat:2> \} $ to $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T2> = <nat:8> * <var:i> ^ <nat:2> \land <var:T3> = <nat:6> * <var:i> ^ <nat:3> \land <var:T4> = <var:i> ^ <nat:4> \land <var:T0> = <nat:2> \} $ . This is deduced with the assignment scheme given in Hoare reasoning . Jumping to the following line of code seen in the series of commands , we have the binding statement assigning $ <var:T4> * <nat:4> $ into $ <var:T4>$ . This moves the precondition $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T2> = <nat:8> * <var:i> ^ <nat:2> \land <var:T3> = <nat:6> * <var:i> ^ <nat:3> \land <var:T4> = <var:i> ^ <nat:4> \land <var:T0> = <nat:2> \} $ into the postcondition $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T2> = <nat:8> * <var:i> ^ <nat:2> \land <var:T3> = <nat:6> * <var:i> ^ <nat:3> \land <var:T4> = <nat:4> * <var:i> ^ <nat:4> \land <var:T0> = <nat:2> \} $ . This is deduced with the assignment inference rule given by usual Hoare techniques . Moving forward to the next step , we have the environment update line binding $ <var:T4$ as $ <var:R>$ . This forwards the condition $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T2> = <nat:8> * <var:i> ^ <nat:2> \land <var:T3> = <nat:6> * <var:i> ^ <nat:3> \land <var:T4> = <nat:4> * <var:i> ^ <nat:4> \land <var:T0> = <nat:2> \} $ into the postcondition $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T2> = <nat:8> * <var:i> ^ <nat:2> \land <var:T3> = <nat:6> * <var:i> ^ <nat:3> \land <var:T0> = <nat:2> \land <var:R> = <nat:4> * <var:i> ^ <nat:4> \} $ . This is known to be sound with the assignment rule of standard Hoare logic . Moving forward , we have the variable update line \verb | <var:R> := <var:R> + <var:T3> | . This advances $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T2> = <nat:8> * <var:i> ^ <nat:2> \land <var:T3> = <nat:6> * <var:i> ^ <nat:3> \land <var:T0> = <nat:2> \land <var:R> = <nat:4> * <var:i> ^ <nat:4> \} $ toward the postcondition $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T2> = <nat:8> * <var:i> ^ <nat:2> \land <var:T0> = <nat:2> \land <var:R> = <nat:4> * <var:i> ^ <nat:4> + <nat:6> * <var:i> ^ <nat:3> \} $ . After , we see the assignment code yielding $ <var:R> + <var:T2$ into $ <var:R>$ . This line forwards $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T2> = <nat:8> * <var:i> ^ <nat:2> \land <var:T0> = <nat:2> \land <var:R> = <nat:4> * <var:i> ^ <nat:4> + <nat:6> * <var:i> ^ <nat:3> \} $ toward the postcondition $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T0> = <nat:2> \land <var:R> = <nat:4> * <var:i> ^ <nat:4> + <nat:6> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> \} $ . This is guaranteed using the assignment rule obtained from Hoare reasoning . Further , we have the assignment command letting $ <var:R> + <var:T1$ to $ <var:R>$ . This forwards the precondition $ \{ <var:W> = <var:i> \land <var:T1> = <nat:6> * <var:i> \land <var:T0> = <nat:2> \land <var:R> = <nat:4> * <var:i> ^ <nat:4> + <nat:6> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> \} $ as the postcondition $ \{ <var:W> = <var:i> \land <var:T0> = <nat:2> \land <var:R> = <nat:4> * <var:i> ^ <nat:4> + <nat:6> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:6> * <var:i> \} $ . Taking another step toward the upcoming statement in the code , we have the environment update command \verb | <var:R> := <var:R> + <var:T0> | . This redefines the condition $ \{ <var:W> = <var:i> \land <var:T0> = <nat:2> \land <var:R> = <nat:4> * <var:i> ^ <nat:4> + <nat:6> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:6> * <var:i> \} $ toward the postcondition $ \{ <var:W> = <var:i> \land <var:R> = <nat:4> * <var:i> ^ <nat:4> + <nat:6> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:2> \} $ . This is shown to be logically sound by the assignment inference rule defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <var:T4> : string := " <var:T4> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:W> = <var:i> }} <var:T1> := <var:W> ; <var:T2> := <var:T1> * <var:W> ; <var:T3> := <var:T2> * <var:W> ; <var:T4> := <var:T3> * <var:W> ; <var:T0> := <nat:2> ; <var:T1> := <var:T1> * <nat:6> ; <var:T2> := <var:T2> * <nat:8> ; <var:T3> := <var:T3> * <nat:6> ; <var:T4> := <var:T4> * <nat:4> ; <var:R> := <var:T4> <var:R> := <var:R> + <var:T3> <var:R> := <var:R> + <var:T2> <var:R> := <var:R> + <var:T1> <var:R> := <var:R> + <var:T0> {{ <var:R> = <nat:4> * <var:i> ^ <nat:4> + <nat:6> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:T1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:T1> = <var:i> /\ <var:T2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:T1> = <var:i> /\ <var:T2> = <var:i> ^ <nat:2> /\ <var:T3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:T1> = <var:i> /\ <var:T2> = <var:i> ^ <nat:2> /\ <var:T3> = <var:i> ^ <nat:3> /\ <var:T4> = <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:T1> = <var:i> /\ <var:T2> = <var:i> ^ <nat:2> /\ <var:T3> = <var:i> ^ <nat:3> /\ <var:T4> = <var:i> ^ <nat:4> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:T1> = <nat:6> * <var:i> /\ <var:T2> = <var:i> ^ <nat:2> /\ <var:T3> = <var:i> ^ <nat:3> /\ <var:T4> = <var:i> ^ <nat:4> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:T1> = <nat:6> * <var:i> /\ <var:T2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:T3> = <var:i> ^ <nat:3> /\ <var:T4> = <var:i> ^ <nat:4> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:T1> = <nat:6> * <var:i> /\ <var:T2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:T3> = <nat:6> * <var:i> ^ <nat:3> /\ <var:T4> = <var:i> ^ <nat:4> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:T1> = <nat:6> * <var:i> /\ <var:T2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:T3> = <nat:6> * <var:i> ^ <nat:3> /\ <var:T4> = <nat:4> * <var:i> ^ <nat:4> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:T1> = <nat:6> * <var:i> /\ <var:T2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:T3> = <nat:6> * <var:i> ^ <nat:3> /\ <var:T0> = <nat:2> /\ <var:R> = <nat:4> * <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:T1> = <nat:6> * <var:i> /\ <var:T2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:T0> = <nat:2> /\ <var:R> = <nat:4> * <var:i> ^ <nat:4> + <nat:6> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:T1> = <nat:6> * <var:i> /\ <var:T0> = <nat:2> /\ <var:R> = <nat:4> * <var:i> ^ <nat:4> + <nat:6> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:T0> = <nat:2> /\ <var:R> = <nat:4> * <var:i> ^ <nat:4> + <nat:6> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:i> /\ <var:R> = <nat:4> * <var:i> ^ <nat:4> + <nat:6> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 