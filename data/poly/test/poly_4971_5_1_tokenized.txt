\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:z> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:c> := <var:Q1> <var:c> := <var:c> + <var:Q0> \end{verbatim} Assume it to hold that $ <var:z> = <var:f> $ before evaluating the code , then we have $ <var:c> = <nat:4> \times <var:f> + <nat:7> $ when set of instructions executes . \end{theorem} \begin{proof} The application of Hoare logic gives : \begin{eqnarray} \{ <var:z> = <var:f> \} \\ <var:Q1> := <var:z> ; \\ \{ <var:z> = <var:f> \land <var:Q1> = <var:f> \} \\ <var:Q0> := <nat:7> ; \\ \{ <var:z> = <var:f> \land <var:Q1> = <var:f> \land <var:Q0> = <nat:7> \} \\ <var:Q1> := <var:Q1> * <nat:4> ; \\ \{ <var:z> = <var:f> \land <var:Q1> = <nat:4> \cdot <var:f> \land <var:Q0> = <nat:7> \} \\ <var:c> := <var:Q1> \\ \{ <var:z> = <var:f> \land <var:Q0> = <nat:7> \land <var:c> = <nat:4> \cdot <var:f> \} \\ <var:c> := <var:c> + <var:Q0> \\ \{ <var:z> = <var:f> \land <var:c> = <nat:4> \cdot <var:f> + <nat:7> \} \end{eqnarray} Considering the preceding argument , our list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:z> = <var:f> }} <var:Q1> := <var:z> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:c> := <var:Q1> <var:c> := <var:c> + <var:Q0> {{ <var:c> = <nat:4> * <var:f> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:Q1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:Q1> = <var:f> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:Q1> = <nat:4> * <var:f> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:Q0> = <nat:7> /\ <var:c> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:f> /\ <var:c> = <nat:4> * <var:f> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 