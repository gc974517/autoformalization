\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d1> := <var:N> ; <var:d2> := <var:d1> * <var:N> ; <var:d3> := <var:d2> * <var:N> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:7> ; <var:d3> := <var:d3> * <nat:9> ; <var:w> := <var:d3> <var:w> := <var:w> + <var:d1> <var:w> := <var:w> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Allow $ <var:N> = <var:l> $ ahead of evaluating this series of commands then we see $ <var:w> = <nat:9> \cdot <var:l> ^ <nat:3> + <nat:7> \cdot <var:l> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:l> \} \\ <var:d1> := <var:N> ; \\ \{ <var:N> = <var:l> \land <var:d1> = <var:l> \} \\ <var:d2> := <var:d1> * <var:N> ; \\ \{ <var:N> = <var:l> \land <var:d1> = <var:l> \land <var:d2> = <var:l> ^ <nat:2> \} \\ <var:d3> := <var:d2> * <var:N> ; \\ \{ <var:N> = <var:l> \land <var:d1> = <var:l> \land <var:d2> = <var:l> ^ <nat:2> \land <var:d3> = <var:l> ^ <nat:3> \} \\ <var:d0> := <nat:1> ; \\ \{ <var:N> = <var:l> \land <var:d1> = <var:l> \land <var:d2> = <var:l> ^ <nat:2> \land <var:d3> = <var:l> ^ <nat:3> \land <var:d0> = <nat:1> \} \\ <var:d1> := <var:d1> * <nat:7> ; \\ \{ <var:N> = <var:l> \land <var:d1> = <nat:7> \cdot <var:l> \land <var:d2> = <var:l> ^ <nat:2> \land <var:d3> = <var:l> ^ <nat:3> \land <var:d0> = <nat:1> \} \\ <var:d3> := <var:d3> * <nat:9> ; \\ \{ <var:N> = <var:l> \land <var:d1> = <nat:7> \cdot <var:l> \land <var:d2> = <var:l> ^ <nat:2> \land <var:d3> = <nat:9> \cdot <var:l> ^ <nat:3> \land <var:d0> = <nat:1> \} \\ <var:w> := <var:d3> \\ \{ <var:N> = <var:l> \land <var:d1> = <nat:7> \cdot <var:l> \land <var:d2> = <var:l> ^ <nat:2> \land <var:d0> = <nat:1> \land <var:w> = <nat:9> \cdot <var:l> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:d1> \\ \{ <var:N> = <var:l> \land <var:d0> = <nat:1> \land <var:w> = <nat:9> \cdot <var:l> ^ <nat:3> + <nat:7> \cdot <var:l> \} \\ <var:w> := <var:w> + <var:d0> \\ \{ <var:N> = <var:l> \land <var:w> = <nat:9> \cdot <var:l> ^ <nat:3> + <nat:7> \cdot <var:l> + <nat:1> \} \end{eqnarray} The application of standard Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d1> := <var:N> ; <var:d2> := <var:d1> * <var:N> ; <var:d3> := <var:d2> * <var:N> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:7> ; <var:d3> := <var:d3> * <nat:9> ; <var:w> := <var:d3> <var:w> := <var:w> + <var:d1> <var:w> := <var:w> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:N> = <var:l> }} <def:poly> {{ <var:w> = <nat:9> * <var:l> ^ <nat:3> + <nat:7> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:d1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:d1> = <var:l> /\ <var:d2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:d1> = <var:l> /\ <var:d2> = <var:l> ^ <nat:2> /\ <var:d3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:d1> = <var:l> /\ <var:d2> = <var:l> ^ <nat:2> /\ <var:d3> = <var:l> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:d1> = <nat:7> * <var:l> /\ <var:d2> = <var:l> ^ <nat:2> /\ <var:d3> = <var:l> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:d1> = <nat:7> * <var:l> /\ <var:d2> = <var:l> ^ <nat:2> /\ <var:d3> = <nat:9> * <var:l> ^ <nat:3> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:d1> = <nat:7> * <var:l> /\ <var:d2> = <var:l> ^ <nat:2> /\ <var:d0> = <nat:1> /\ <var:w> = <nat:9> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:d0> = <nat:1> /\ <var:w> = <nat:9> * <var:l> ^ <nat:3> + <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:l> /\ <var:w> = <nat:9> * <var:l> ^ <nat:3> + <nat:7> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 