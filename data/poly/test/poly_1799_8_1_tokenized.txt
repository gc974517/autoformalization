\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} such that \begin{verbatim} <var:B1> := <var:z> ; <var:B2> := <var:B1> * <var:z> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:5> ; <var:B2> := <var:B2> * <nat:1> ; <var:L> := <var:B2> <var:L> := <var:L> + <var:B1> <var:L> := <var:L> + <var:B0> \end{verbatim} Allow $ <var:z> = <var:s> $ prior to interpreting this list of instructions , then $ <var:L> = <nat:1> * <var:s> ^ <nat:2> + <nat:5> * <var:s> + <nat:7> $ once code segment has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:s> \} \\ <var:B1> := <var:z> ; \\ \{ <var:z> = <var:s> \land <var:B1> = <var:s> \} \\ <var:B2> := <var:B1> * <var:z> ; \\ \{ <var:z> = <var:s> \land <var:B1> = <var:s> \land <var:B2> = <var:s> ^ <nat:2> \} \\ <var:B0> := <nat:7> ; \\ \{ <var:z> = <var:s> \land <var:B1> = <var:s> \land <var:B2> = <var:s> ^ <nat:2> \land <var:B0> = <nat:7> \} \\ <var:B1> := <var:B1> * <nat:5> ; \\ \{ <var:z> = <var:s> \land <var:B1> = <nat:5> \times <var:s> \land <var:B2> = <var:s> ^ <nat:2> \land <var:B0> = <nat:7> \} \\ <var:B2> := <var:B2> * <nat:1> ; \\ \{ <var:z> = <var:s> \land <var:B1> = <nat:5> \times <var:s> \land <var:B2> = <nat:1> \times <var:s> ^ <nat:2> \land <var:B0> = <nat:7> \} \\ <var:L> := <var:B2> \\ \{ <var:z> = <var:s> \land <var:B1> = <nat:5> \times <var:s> \land <var:B0> = <nat:7> \land <var:L> = <nat:1> \times <var:s> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:B1> \\ \{ <var:z> = <var:s> \land <var:B0> = <nat:7> \land <var:L> = <nat:1> \times <var:s> ^ <nat:2> + <nat:5> \times <var:s> \} \\ <var:L> := <var:L> + <var:B0> \\ \{ <var:z> = <var:s> \land <var:L> = <nat:1> \times <var:s> ^ <nat:2> + <nat:5> \times <var:s> + <nat:7> \} \end{eqnarray} The application of Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:z> = <var:s> }} <var:B1> := <var:z> ; <var:B2> := <var:B1> * <var:z> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:5> ; <var:B2> := <var:B2> * <nat:1> ; <var:L> := <var:B2> <var:L> := <var:L> + <var:B1> <var:L> := <var:L> + <var:B0> {{ <var:L> = <nat:1> * <var:s> ^ <nat:2> + <nat:5> * <var:s> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:B1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:B1> = <var:s> /\ <var:B2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:B1> = <var:s> /\ <var:B2> = <var:s> ^ <nat:2> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:B1> = <nat:5> * <var:s> /\ <var:B2> = <var:s> ^ <nat:2> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:B1> = <nat:5> * <var:s> /\ <var:B2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:B1> = <nat:5> * <var:s> /\ <var:B0> = <nat:7> /\ <var:L> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:B0> = <nat:7> /\ <var:L> = <nat:1> * <var:s> ^ <nat:2> + <nat:5> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:s> /\ <var:L> = <nat:1> * <var:s> ^ <nat:2> + <nat:5> * <var:s> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 