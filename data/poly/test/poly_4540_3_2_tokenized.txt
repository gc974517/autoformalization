\begin{document} \begin{theorem} Take the following series of commands : \begin{verbatim} <var:t> := <nat:3> ; <var:t> := <nat:2> + <var:t> * <var:T> ; <var:t> := <nat:4> + <var:t> * <var:T> \end{verbatim} Given for whole numbers $ <var:j> $ that $ <var:T> = <var:j> $ before interpreting the list of commands then we have $ <var:t> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:2> \cdot <var:j> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our program can be seen using typical Hoare logic . Moving on to the proceeding step found in the series of commands , we have the variable update statement defining $ <nat:3> $ as $ <var:t>$ . This line moves $ \{ <var:T> = <var:j> \} $ as the postcondition $ \{ <var:T> = <var:j> \land <var:t> = <nat:3> \} $ . Going forward , the assignment line assigning $ <nat:2> + <var:t> * <var:T> $ toward $ <var:t>$ . This statement advances $ \{ <var:T> = <var:j> \land <var:t> = <nat:3> \} $ to the condition $ \{ <var:T> = <var:j> \land <var:t> = <nat:3> \cdot <var:j> + <nat:2> \} $ . Following , we see the variable assignmet line assigning $ <nat:4> + <var:t> * <var:T$ as $ <var:t>$ . This line takes the condition $ \{ <var:T> = <var:j> \land <var:t> = <nat:3> \cdot <var:j> + <nat:2> \} $ toward $ \{ <var:T> = <var:j> \land <var:t> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:2> \cdot <var:j> + <nat:4> \} $ . This is guaranteed by the assignment scheme in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:T> = <var:j> }} <var:t> := <nat:3> ; <var:t> := <nat:2> + <var:t> * <var:T> ; <var:t> := <nat:4> + <var:t> * <var:T> {{ <var:t> = <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:t> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:t> = <nat:3> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:t> = <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 