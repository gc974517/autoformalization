\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:2> ; <var:n> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:W> = <var:o> $ ahead of interpreting the series of commands it must be that $ <var:n> = <nat:2> $ when program has exited . \end{theorem} \begin{proof} Observe the following decorated segment of code . \begin{eqnarray} \{ <var:W> = <var:o> \} \\ <var:H0> := <nat:2> ; \\ \{ <var:W> = <var:o> \land <var:H0> = <nat:2> \} \\ <var:n> := <var:H0> \\ \{ <var:W> = <var:o> \land <var:n> = <nat:2> \} \end{eqnarray} Using standard Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:2> ; <var:n> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:W> = <var:o> }} <def:poly> {{ <var:n> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:o> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:o> /\ <var:n> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 