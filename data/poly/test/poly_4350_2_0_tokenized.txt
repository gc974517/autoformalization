\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:2> ; <var:Z> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:a> = <var:w> $ , given any positive coefficients $ <var:w> $ , ahead of the execution of the series of commands , it holds that $ <var:Z> = <nat:2> $ when set of commands has terminated . \end{theorem} \begin{proof} The application of standard Hoare reasoning yields : \begin{eqnarray} \{ <var:a> = <var:w> \} \\ <var:Y0> := <nat:2> ; \\ \{ <var:a> = <var:w> \land <var:Y0> = <nat:2> \} \\ <var:Z> := <var:Y0> \\ \{ <var:a> = <var:w> \land <var:Z> = <nat:2> \} \end{eqnarray} As a result , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:2> ; <var:Z> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:a> = <var:w> }} <def:poly> {{ <var:Z> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:w> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:w> /\ <var:Z> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 