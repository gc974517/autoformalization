\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:r0> := <nat:5> ; <var:c> := <var:r0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> in \emph{Imp} . Assuming it to be that $ <var:z> = <var:b> $ ( for every positive coefficients $ <var:b> $ ) ahead of executing this list of commands then we see $ <var:c> = <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for our list of instructions is demonstrated through typical Hoare techniques . Moving onward , we see the variable binding code yielding $ <nat:5> $ toward $ <var:r0>$ . This command transfers $ \{ <var:z> = <var:b> \} $ to $ \{ <var:z> = <var:b> \land <var:r0> = <nat:5> \} $ . This is shown to be logically sound using the assignment law in standard Hoare logic . Moving forward to the proceeding line in the segment of code , we have the binding line \verb | <var:c> := <var:r0> | . This takes $ \{ <var:z> = <var:b> \land <var:r0> = <nat:5> \} $ to the condition $ \{ <var:z> = <var:b> \land <var:c> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <def:poly> := <var:r0> := <nat:5> ; <var:c> := <var:r0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:z> = <var:b> }} <def:poly> {{ <var:c> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:c> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 