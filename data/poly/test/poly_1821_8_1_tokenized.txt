\begin{document} \begin{theorem} Define the following series of commands such that \begin{verbatim} <var:u1> := <var:q> ; <var:u2> := <var:u1> * <var:q> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:9> ; <var:u2> := <var:u2> * <nat:4> ; <var:x> := <var:u2> <var:x> := <var:x> + <var:u1> <var:x> := <var:x> + <var:u0> \end{verbatim} Allowing that $ <var:q> = <var:d> $ ( given some natural numbers $ <var:d> $ ) ahead of interpreting our series of commands , it holds that we have $ <var:x> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:9> \cdot <var:d> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions is given by usual Hoare logic . Considering the upcoming lines of codein our list of instructions , \begin{eqnarray} \{ <var:q> = <var:d> \} \, <var:u1> := <var:q> \, \{ <var:q> = <var:d> \land <var:u1> = <var:d> \} \\ \{ <var:q> = <var:d> \land <var:u1> = <var:d> \} \, <var:u2> := <var:u1> * <var:q> \, \{ <var:q> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \} \end{eqnarray} Taking a look at the proceeding pieces of code contained in our set of instructions , we see \begin{eqnarray} \{ <var:q> = <var:d> \} \, <var:u1> := <var:q> \, \{ <var:q> = <var:d> \land <var:u1> = <var:d> \} \\ \{ <var:q> = <var:d> \land <var:u1> = <var:d> \} \, <var:u2> := <var:u1> * <var:q> \, \{ <var:q> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \} \\ \{ <var:q> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \} \, <var:u0> := <nat:4> \, \{ <var:q> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u0> = <nat:4> \} \end{eqnarray} This is guaranteed by the variable assignmet scheme given by usual Hoare reasoning . Moving forward to the next pieces of code seen in the list of instructions , \begin{eqnarray} \{ <var:q> = <var:d> \} \, <var:u1> := <var:q> \, \{ <var:q> = <var:d> \land <var:u1> = <var:d> \} \\ \{ <var:q> = <var:d> \land <var:u1> = <var:d> \} \, <var:u2> := <var:u1> * <var:q> \, \{ <var:q> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \} \end{eqnarray} This is known to be sound through the rule of Hoare reasoning . Following , we see \begin{eqnarray} \{ <var:q> = <var:d> \} \, <var:u1> := <var:q> \, \{ <var:q> = <var:d> \land <var:u1> = <var:d> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:q> = <var:d> }} <var:u1> := <var:q> ; <var:u2> := <var:u1> * <var:q> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:9> ; <var:u2> := <var:u2> * <nat:4> ; <var:x> := <var:u2> <var:x> := <var:x> + <var:u1> <var:x> := <var:x> + <var:u0> {{ <var:x> = <nat:4> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:u1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:u1> = <var:d> /\ <var:u2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:u1> = <var:d> /\ <var:u2> = <var:d> ^ <nat:2> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:u1> = <nat:9> * <var:d> /\ <var:u2> = <var:d> ^ <nat:2> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:u1> = <nat:9> * <var:d> /\ <var:u2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:u1> = <nat:9> * <var:d> /\ <var:u0> = <nat:4> /\ <var:x> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:u0> = <nat:4> /\ <var:x> = <nat:4> * <var:d> ^ <nat:2> + <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:x> = <nat:4> * <var:d> ^ <nat:2> + <nat:9> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 