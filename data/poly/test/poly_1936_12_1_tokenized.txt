\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:W1> := <var:P> ; <var:W2> := <var:W1> * <var:P> ; <var:W3> := <var:W2> * <var:P> ; <var:W4> := <var:W3> * <var:P> ; <var:W0> := <nat:2> ; <var:W1> := <var:W1> * <nat:1> ; <var:W3> := <var:W3> * <nat:2> ; <var:W4> := <var:W4> * <nat:2> ; <var:j> := <var:W4> <var:j> := <var:j> + <var:W3> <var:j> := <var:j> + <var:W1> <var:j> := <var:j> + <var:W0> \end{verbatim} Assume it to hold that $ <var:P> = <var:L> $ before evaluating this program , it follows that we see $ <var:j> = <nat:2> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> + <nat:2> $ when program has executed . \end{theorem} \begin{proof} Applying usual Hoare logic gives us : \begin{eqnarray} \{ <var:P> = <var:L> \} \\ <var:W1> := <var:P> ; \\ \{ <var:P> = <var:L> \land <var:W1> = <var:L> \} \\ <var:W2> := <var:W1> * <var:P> ; \\ \{ <var:P> = <var:L> \land <var:W1> = <var:L> \land <var:W2> = <var:L> ^ <nat:2> \} \\ <var:W3> := <var:W2> * <var:P> ; \\ \{ <var:P> = <var:L> \land <var:W1> = <var:L> \land <var:W2> = <var:L> ^ <nat:2> \land <var:W3> = <var:L> ^ <nat:3> \} \\ <var:W4> := <var:W3> * <var:P> ; \\ \{ <var:P> = <var:L> \land <var:W1> = <var:L> \land <var:W2> = <var:L> ^ <nat:2> \land <var:W3> = <var:L> ^ <nat:3> \land <var:W4> = <var:L> ^ <nat:4> \} \\ <var:W0> := <nat:2> ; \\ \{ <var:P> = <var:L> \land <var:W1> = <var:L> \land <var:W2> = <var:L> ^ <nat:2> \land <var:W3> = <var:L> ^ <nat:3> \land <var:W4> = <var:L> ^ <nat:4> \land <var:W0> = <nat:2> \} \\ <var:W1> := <var:W1> * <nat:1> ; \\ \{ <var:P> = <var:L> \land <var:W1> = <nat:1> \times <var:L> \land <var:W2> = <var:L> ^ <nat:2> \land <var:W3> = <var:L> ^ <nat:3> \land <var:W4> = <var:L> ^ <nat:4> \land <var:W0> = <nat:2> \} \\ <var:W3> := <var:W3> * <nat:2> ; \\ \{ <var:P> = <var:L> \land <var:W1> = <nat:1> \times <var:L> \land <var:W2> = <var:L> ^ <nat:2> \land <var:W3> = <nat:2> \times <var:L> ^ <nat:3> \land <var:W4> = <var:L> ^ <nat:4> \land <var:W0> = <nat:2> \} \\ <var:W4> := <var:W4> * <nat:2> ; \\ \{ <var:P> = <var:L> \land <var:W1> = <nat:1> \times <var:L> \land <var:W2> = <var:L> ^ <nat:2> \land <var:W3> = <nat:2> \times <var:L> ^ <nat:3> \land <var:W4> = <nat:2> \times <var:L> ^ <nat:4> \land <var:W0> = <nat:2> \} \\ <var:j> := <var:W4> \\ \{ <var:P> = <var:L> \land <var:W1> = <nat:1> \times <var:L> \land <var:W2> = <var:L> ^ <nat:2> \land <var:W3> = <nat:2> \times <var:L> ^ <nat:3> \land <var:W0> = <nat:2> \land <var:j> = <nat:2> \times <var:L> ^ <nat:4> \} \\ <var:j> := <var:j> + <var:W3> \\ \{ <var:P> = <var:L> \land <var:W1> = <nat:1> \times <var:L> \land <var:W2> = <var:L> ^ <nat:2> \land <var:W0> = <nat:2> \land <var:j> = <nat:2> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> \} \end{eqnarray} Advancing the execution of the series of commands produces : \begin{eqnarray} <var:j> := <var:j> + <var:W1> \\ \{ <var:P> = <var:L> \land <var:W0> = <nat:2> \land <var:j> = <nat:2> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> \} \\ <var:j> := <var:j> + <var:W0> \\ \{ <var:P> = <var:L> \land <var:j> = <nat:2> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> + <nat:2> \} \end{eqnarray} Considering the preceding argument , our set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <var:W4> : string := " <var:W4> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:P> = <var:L> }} <var:W1> := <var:P> ; <var:W2> := <var:W1> * <var:P> ; <var:W3> := <var:W2> * <var:P> ; <var:W4> := <var:W3> * <var:P> ; <var:W0> := <nat:2> ; <var:W1> := <var:W1> * <nat:1> ; <var:W3> := <var:W3> * <nat:2> ; <var:W4> := <var:W4> * <nat:2> ; <var:j> := <var:W4> <var:j> := <var:j> + <var:W3> <var:j> := <var:j> + <var:W1> <var:j> := <var:j> + <var:W0> {{ <var:j> = <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:W1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:W1> = <var:L> /\ <var:W2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:W1> = <var:L> /\ <var:W2> = <var:L> ^ <nat:2> /\ <var:W3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:W1> = <var:L> /\ <var:W2> = <var:L> ^ <nat:2> /\ <var:W3> = <var:L> ^ <nat:3> /\ <var:W4> = <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:W1> = <var:L> /\ <var:W2> = <var:L> ^ <nat:2> /\ <var:W3> = <var:L> ^ <nat:3> /\ <var:W4> = <var:L> ^ <nat:4> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:W1> = <nat:1> * <var:L> /\ <var:W2> = <var:L> ^ <nat:2> /\ <var:W3> = <var:L> ^ <nat:3> /\ <var:W4> = <var:L> ^ <nat:4> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:W1> = <nat:1> * <var:L> /\ <var:W2> = <var:L> ^ <nat:2> /\ <var:W3> = <nat:2> * <var:L> ^ <nat:3> /\ <var:W4> = <var:L> ^ <nat:4> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:W1> = <nat:1> * <var:L> /\ <var:W2> = <var:L> ^ <nat:2> /\ <var:W3> = <nat:2> * <var:L> ^ <nat:3> /\ <var:W4> = <nat:2> * <var:L> ^ <nat:4> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:W1> = <nat:1> * <var:L> /\ <var:W2> = <var:L> ^ <nat:2> /\ <var:W3> = <nat:2> * <var:L> ^ <nat:3> /\ <var:W0> = <nat:2> /\ <var:j> = <nat:2> * <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:W1> = <nat:1> * <var:L> /\ <var:W2> = <var:L> ^ <nat:2> /\ <var:W0> = <nat:2> /\ <var:j> = <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:W0> = <nat:2> /\ <var:j> = <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:L> /\ <var:j> = <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 