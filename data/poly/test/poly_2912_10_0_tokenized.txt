\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:4> ; <var:x1> := <nat:5> ; <var:x1> := <var:x1> * <var:I> ; <var:x3> := <nat:5> ; <var:x3> := <var:x3> * <var:I> ; <var:x3> := <var:x3> * <var:I> ; <var:x3> := <var:x3> * <var:I> ; <var:E> := <var:x3> ; <var:E> := <var:E> + <var:x1> ; <var:E> := <var:E> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:I> = <var:z> $ ( for any natural coefficients $ <var:z> $ ) before evaluating the set of instructions , it holds that we have $ <var:E> = <nat:5> * <var:z> ^ <nat:3> + <nat:5> * <var:z> + <nat:4> $ when code segment is done . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands can be demonstrated using typical Hoare reasoning . Following , \[ \begin{tabular} {rcl} \{ <var:I> = <var:z> \} & <var:x0> := <nat:4> & \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \} \\ \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \} & <var:x1> := <nat:5> & \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:5> \} \\ \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:5> \} & <var:x1> := <var:x1> * <var:I> & \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:5> * <var:z> \} \end{tabular} This is deduced by the variable assignmet law obtained from typical Hoare reasoning . Further , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:z> \} & <var:x0> := <nat:4> & \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \} \\ \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \} & <var:x1> := <nat:5> & \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:5> \} \\ \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:5> \} & <var:x1> := <var:x1> * <var:I> & \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:5> * <var:z> \} \end{tabular} Focusing on the upcoming pieces of code seen in our series of commands , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:z> \} & <var:x0> := <nat:4> & \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \} \\ \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \} & <var:x1> := <nat:5> & \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:5> \} \end{tabular} This is rigorously given through the assignment law given by usual Hoare reasoning . Moving forward to the next step , we have \[ \begin{tabular} {rcl} \{ <var:I> = <var:z> \} & <var:x0> := <nat:4> & \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \} \\ \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \} & <var:x1> := <nat:5> & \{ <var:I> = <var:z> \land <var:x0> = <nat:4> \land <var:x1> = <nat:5> \} \end{tabular} This is ensured through the variable assignmet scheme defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x0> := <nat:4> ; <var:x1> := <nat:5> ; <var:x1> := <var:x1> * <var:I> ; <var:x3> := <nat:5> ; <var:x3> := <var:x3> * <var:I> ; <var:x3> := <var:x3> * <var:I> ; <var:x3> := <var:x3> * <var:I> ; <var:E> := <var:x3> ; <var:E> := <var:E> + <var:x1> ; <var:E> := <var:E> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:I> = <var:z> }} <def:poly> {{ <var:E> = <nat:5> * <var:z> ^ <nat:3> + <nat:5> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:5> * <var:z> /\ <var:x3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:5> * <var:z> /\ <var:x3> = <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:5> * <var:z> /\ <var:x3> = <nat:5> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:5> * <var:z> /\ <var:x3> = <nat:5> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:x0> = <nat:4> /\ <var:x1> = <nat:5> * <var:z> /\ <var:E> = <nat:5> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:x0> = <nat:4> /\ <var:E> = <nat:5> * <var:z> ^ <nat:3> + <nat:5> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:z> /\ <var:E> = <nat:5> * <var:z> ^ <nat:3> + <nat:5> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 