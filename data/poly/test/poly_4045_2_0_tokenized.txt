\begin{document} \begin{theorem} Let the following program such that \begin{verbatim} <var:i0> := <nat:2> ; <var:P> := <var:i0> \end{verbatim} Allow that we have $ <var:M> = <var:o> $ --- for some positive integer coefficients $ <var:o> $ --- prior to executing our set of instructions , then we have $ <var:P> = <nat:2> $ after code has executed . \end{theorem} \begin{proof} The argument for this series of instructions is accomplished through usual Hoare techniques . Looking at the next statement found in our code segment , we have \begin{verbatim} { <var:M> = <var:o> } <var:i0> := <nat:2> { <var:M> = <var:o> \land <var:i0> = <nat:2> } \end{verbatim} Advancing to the next statement in the segment of code , we see \begin{verbatim} { <var:M> = <var:o> } <var:i0> := <nat:2> { <var:M> = <var:o> \land <var:i0> = <nat:2> } \end{verbatim} This is shown to be logically sound by the rule defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:M> = <var:o> }} <var:i0> := <nat:2> ; <var:P> := <var:i0> {{ <var:P> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:o> /\ <var:P> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 