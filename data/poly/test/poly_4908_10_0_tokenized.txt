\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:a0> := <nat:2> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:r> ; <var:a3> := <nat:3> ; <var:a3> := <var:a3> * <var:r> ; <var:a3> := <var:a3> * <var:r> ; <var:a3> := <var:a3> * <var:r> ; <var:F> := <var:a3> ; <var:F> := <var:F> + <var:a1> ; <var:F> := <var:F> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assuming , with some natural numbers $ <var:U> $ , it to hold that $ <var:r> = <var:U> $ prior to the evaluation of our code it must be that we see $ <var:F> = <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> + <nat:2> $ once set of instructions has terminated . \end{theorem} \begin{proof} The flow of logic for the series of instructions can be seen using standard Hoare techniques . Following , we see the binding line binding $ <nat:2> $ into $ <var:a0>$ . This command forwards $ \{ <var:r> = <var:U> \} $ into the postcondition $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \} $ . Now , the code \verb | <var:a1> := <nat:2> ; | . This line advances the precondition $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \} $ as the condition $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \} $ . This is guaranteed through the assignment scheme defined in Hoare logic . Advancing to the subsequent line seen in our series of instructions , the assignment command \verb | <var:a1> := <var:a1> * <var:r> ; | . This statement forwards $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \} $ to $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \times <var:U> \} $ . This is deduced using the assignment rule obtained from standard Hoare reasoning . Taking a look at the subsequent piece of code contained in our code segment , the line letting $ <nat:3> $ into $ <var:a3>$ . This code redefines the precondition $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \times <var:U> \} $ as $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \times <var:U> \land <var:a3> = <nat:3> \} $ . Looking at the subsequent line in our series of instructions , the assignment command \verb | <var:a3> := <var:a3> * <var:r> ; | . This command moves the precondition $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \times <var:U> \land <var:a3> = <nat:3> \} $ as the condition $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \times <var:U> \land <var:a3> = <nat:3> \times <var:U> \} $ . Moving on to the next step , the assignment code \verb | <var:a3> := <var:a3> * <var:r> ; | . This line redefines the condition $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \times <var:U> \land <var:a3> = <nat:3> \times <var:U> \} $ as $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \times <var:U> \land <var:a3> = <nat:3> \times <var:U> ^ <nat:2> \} $ . Observing the next line of code found in our list of commands , we have the statement \verb | <var:a3> := <var:a3> * <var:r> ; | . This advances the precondition $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \times <var:U> \land <var:a3> = <nat:3> \times <var:U> ^ <nat:2> \} $ toward the postcondition $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \times <var:U> \land <var:a3> = <nat:3> \times <var:U> ^ <nat:3> \} $ . Focusing on the subsequent bit of code in our code , we see the line binding $ <var:a3> $ toward $ <var:F>$ . This code moves $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \times <var:U> \land <var:a3> = <nat:3> \times <var:U> ^ <nat:3> \} $ as the postcondition $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \times <var:U> \land <var:F> = <nat:3> \times <var:U> ^ <nat:3> \} $ . This is known to be sound by the assignment scheme obtained from Hoare reasoning . Considering the proceeding bit of code seen in the program , the binding line assigning $ <var:F> + <var:a1> $ toward $ <var:F>$ . This takes the condition $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:a1> = <nat:2> \times <var:U> \land <var:F> = <nat:3> \times <var:U> ^ <nat:3> \} $ toward $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:F> = <nat:3> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> \} $ . Advancing to the next step , we have the statement letting $ <var:F> + <var:a0$ toward $ <var:F>$ . This transfers $ \{ <var:r> = <var:U> \land <var:a0> = <nat:2> \land <var:F> = <nat:3> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> \} $ as the condition $ \{ <var:r> = <var:U> \land <var:F> = <nat:3> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a0> := <nat:2> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:r> ; <var:a3> := <nat:3> ; <var:a3> := <var:a3> * <var:r> ; <var:a3> := <var:a3> * <var:r> ; <var:a3> := <var:a3> * <var:r> ; <var:F> := <var:a3> ; <var:F> := <var:F> + <var:a1> ; <var:F> := <var:F> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:r> = <var:U> }} <def:poly> {{ <var:F> = <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:a0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:U> /\ <var:a3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:U> /\ <var:a3> = <nat:3> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:U> /\ <var:a3> = <nat:3> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:U> /\ <var:a3> = <nat:3> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:a0> = <nat:2> /\ <var:a1> = <nat:2> * <var:U> /\ <var:F> = <nat:3> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:a0> = <nat:2> /\ <var:F> = <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:F> = <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 