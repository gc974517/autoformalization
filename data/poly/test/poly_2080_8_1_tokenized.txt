\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:q1> := <var:g> ; <var:q2> := <var:q1> * <var:g> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:4> ; <var:q2> := <var:q2> * <nat:7> ; <var:E> := <var:q2> <var:E> := <var:E> + <var:q1> <var:E> := <var:E> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:g> = <var:h> $ before the evaluation of the set of instructions it follows that $ <var:E> = <nat:7> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques results in : \begin{eqnarray} \{ <var:g> = <var:h> \} \\ <var:q1> := <var:g> ; \\ \{ <var:g> = <var:h> \land <var:q1> = <var:h> \} \\ <var:q2> := <var:q1> * <var:g> ; \\ \{ <var:g> = <var:h> \land <var:q1> = <var:h> \land <var:q2> = <var:h> ^ <nat:2> \} \\ <var:q0> := <nat:3> ; \\ \{ <var:g> = <var:h> \land <var:q1> = <var:h> \land <var:q2> = <var:h> ^ <nat:2> \land <var:q0> = <nat:3> \} \\ <var:q1> := <var:q1> * <nat:4> ; \\ \{ <var:g> = <var:h> \land <var:q1> = <nat:4> * <var:h> \land <var:q2> = <var:h> ^ <nat:2> \land <var:q0> = <nat:3> \} \\ <var:q2> := <var:q2> * <nat:7> ; \\ \{ <var:g> = <var:h> \land <var:q1> = <nat:4> * <var:h> \land <var:q2> = <nat:7> * <var:h> ^ <nat:2> \land <var:q0> = <nat:3> \} \\ <var:E> := <var:q2> \\ \{ <var:g> = <var:h> \land <var:q1> = <nat:4> * <var:h> \land <var:q0> = <nat:3> \land <var:E> = <nat:7> * <var:h> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:q1> \\ \{ <var:g> = <var:h> \land <var:q0> = <nat:3> \land <var:E> = <nat:7> * <var:h> ^ <nat:2> + <nat:4> * <var:h> \} \\ <var:E> := <var:E> + <var:q0> \\ \{ <var:g> = <var:h> \land <var:E> = <nat:7> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> \} \end{eqnarray} Hence , this set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q1> := <var:g> ; <var:q2> := <var:q1> * <var:g> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:4> ; <var:q2> := <var:q2> * <nat:7> ; <var:E> := <var:q2> <var:E> := <var:E> + <var:q1> <var:E> := <var:E> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:g> = <var:h> }} <def:poly> {{ <var:E> = <nat:7> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:q1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:q1> = <var:h> /\ <var:q2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:q1> = <var:h> /\ <var:q2> = <var:h> ^ <nat:2> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:q1> = <nat:4> * <var:h> /\ <var:q2> = <var:h> ^ <nat:2> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:q1> = <nat:4> * <var:h> /\ <var:q2> = <nat:7> * <var:h> ^ <nat:2> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:q1> = <nat:4> * <var:h> /\ <var:q0> = <nat:3> /\ <var:E> = <nat:7> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:q0> = <nat:3> /\ <var:E> = <nat:7> * <var:h> ^ <nat:2> + <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:E> = <nat:7> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 