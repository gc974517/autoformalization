\begin{document} \begin{theorem} Take a list of instructions as \begin{verbatim} <var:T1> := <var:E> ; <var:T2> := <var:T1> * <var:E> ; <var:T0> := <nat:8> ; <var:T1> := <var:T1> * <nat:8> ; <var:T2> := <var:T2> * <nat:9> ; <var:H> := <var:T2> <var:H> := <var:H> + <var:T1> <var:H> := <var:H> + <var:T0> \end{verbatim} Given that $ <var:E> = <var:I> $ , with some integers $ <var:I> $ , before the execution of the code segment , it must be that we see $ <var:H> = <nat:9> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:8> $ once code exits . \end{theorem} \begin{proof} We can see that the following decorated code segment . \begin{eqnarray} \{ <var:E> = <var:I> \} \\ <var:T1> := <var:E> ; \\ \{ <var:E> = <var:I> \land <var:T1> = <var:I> \} \\ <var:T2> := <var:T1> * <var:E> ; \\ \{ <var:E> = <var:I> \land <var:T1> = <var:I> \land <var:T2> = <var:I> ^ <nat:2> \} \\ <var:T0> := <nat:8> ; \\ \{ <var:E> = <var:I> \land <var:T1> = <var:I> \land <var:T2> = <var:I> ^ <nat:2> \land <var:T0> = <nat:8> \} \\ <var:T1> := <var:T1> * <nat:8> ; \\ \{ <var:E> = <var:I> \land <var:T1> = <nat:8> \times <var:I> \land <var:T2> = <var:I> ^ <nat:2> \land <var:T0> = <nat:8> \} \\ <var:T2> := <var:T2> * <nat:9> ; \\ \{ <var:E> = <var:I> \land <var:T1> = <nat:8> \times <var:I> \land <var:T2> = <nat:9> \times <var:I> ^ <nat:2> \land <var:T0> = <nat:8> \} \\ <var:H> := <var:T2> \\ \{ <var:E> = <var:I> \land <var:T1> = <nat:8> \times <var:I> \land <var:T0> = <nat:8> \land <var:H> = <nat:9> \times <var:I> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:T1> \\ \{ <var:E> = <var:I> \land <var:T0> = <nat:8> \land <var:H> = <nat:9> \times <var:I> ^ <nat:2> + <nat:8> \times <var:I> \} \\ <var:H> := <var:H> + <var:T0> \\ \{ <var:E> = <var:I> \land <var:H> = <nat:9> \times <var:I> ^ <nat:2> + <nat:8> \times <var:I> + <nat:8> \} \end{eqnarray} Utilizing Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:E> = <var:I> }} <var:T1> := <var:E> ; <var:T2> := <var:T1> * <var:E> ; <var:T0> := <nat:8> ; <var:T1> := <var:T1> * <nat:8> ; <var:T2> := <var:T2> * <nat:9> ; <var:H> := <var:T2> <var:H> := <var:H> + <var:T1> <var:H> := <var:H> + <var:T0> {{ <var:H> = <nat:9> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:T1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:T1> = <var:I> /\ <var:T2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:T1> = <var:I> /\ <var:T2> = <var:I> ^ <nat:2> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:T1> = <nat:8> * <var:I> /\ <var:T2> = <var:I> ^ <nat:2> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:T1> = <nat:8> * <var:I> /\ <var:T2> = <nat:9> * <var:I> ^ <nat:2> /\ <var:T0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:T1> = <nat:8> * <var:I> /\ <var:T0> = <nat:8> /\ <var:H> = <nat:9> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:T0> = <nat:8> /\ <var:H> = <nat:9> * <var:I> ^ <nat:2> + <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:H> = <nat:9> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 