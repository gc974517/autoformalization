\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as follows \begin{verbatim} <var:T1> := <var:I> ; <var:T2> := <var:T1> * <var:I> ; <var:T3> := <var:T2> * <var:I> ; <var:T0> := <nat:4> ; <var:T1> := <var:T1> * <nat:3> ; <var:T2> := <var:T2> * <nat:3> ; <var:T3> := <var:T3> * <nat:3> ; <var:g> := <var:T3> <var:g> := <var:g> + <var:T2> <var:g> := <var:g> + <var:T1> <var:g> := <var:g> + <var:T0> \end{verbatim} Allowing --- letting positive numbers $ <var:l> $ --- that we have $ <var:I> = <var:l> $ ahead of the execution of our list of commands then $ <var:g> = <nat:3> \times <var:l> ^ <nat:3> + <nat:3> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our program is demonstrated through standard Hoare techniques . Moving forward to the upcoming steps in our program , we have \begin{verbatim} { <var:I> = <var:l> } <var:T1> := <var:I> { <var:I> = <var:l> \land <var:T1> = <var:l> } { <var:I> = <var:l> \land <var:T1> = <var:l> } <var:T2> := <var:T1> * <var:I> { <var:I> = <var:l> \land <var:T1> = <var:l> \land <var:T2> = <var:l> ^ <nat:2> } { <var:I> = <var:l> \land <var:T1> = <var:l> \land <var:T2> = <var:l> ^ <nat:2> } <var:T3> := <var:T2> * <var:I> { <var:I> = <var:l> \land <var:T1> = <var:l> \land <var:T2> = <var:l> ^ <nat:2> \land <var:T3> = <var:l> ^ <nat:3> } { <var:I> = <var:l> \land <var:T1> = <var:l> \land <var:T2> = <var:l> ^ <nat:2> \land <var:T3> = <var:l> ^ <nat:3> } <var:T0> := <nat:4> { <var:I> = <var:l> \land <var:T1> = <var:l> \land <var:T2> = <var:l> ^ <nat:2> \land <var:T3> = <var:l> ^ <nat:3> \land <var:T0> = <nat:4> } { <var:I> = <var:l> \land <var:T1> = <var:l> \land <var:T2> = <var:l> ^ <nat:2> \land <var:T3> = <var:l> ^ <nat:3> \land <var:T0> = <nat:4> } <var:T1> := <var:T1> * <nat:3> { <var:I> = <var:l> \land <var:T1> = <nat:3> \times <var:l> \land <var:T2> = <var:l> ^ <nat:2> \land <var:T3> = <var:l> ^ <nat:3> \land <var:T0> = <nat:4> } { <var:I> = <var:l> \land <var:T1> = <nat:3> \times <var:l> \land <var:T2> = <var:l> ^ <nat:2> \land <var:T3> = <var:l> ^ <nat:3> \land <var:T0> = <nat:4> } <var:T2> := <var:T2> * <nat:3> { <var:I> = <var:l> \land <var:T1> = <nat:3> \times <var:l> \land <var:T2> = <nat:3> \times <var:l> ^ <nat:2> \land <var:T3> = <var:l> ^ <nat:3> \land <var:T0> = <nat:4> } \end{verbatim} Advancing to the next step , we have \begin{verbatim} { <var:I> = <var:l> } <var:T1> := <var:I> { <var:I> = <var:l> \land <var:T1> = <var:l> } { <var:I> = <var:l> \land <var:T1> = <var:l> } <var:T2> := <var:T1> * <var:I> { <var:I> = <var:l> \land <var:T1> = <var:l> \land <var:T2> = <var:l> ^ <nat:2> } { <var:I> = <var:l> \land <var:T1> = <var:l> \land <var:T2> = <var:l> ^ <nat:2> } <var:T3> := <var:T2> * <var:I> { <var:I> = <var:l> \land <var:T1> = <var:l> \land <var:T2> = <var:l> ^ <nat:2> \land <var:T3> = <var:l> ^ <nat:3> } { <var:I> = <var:l> \land <var:T1> = <var:l> \land <var:T2> = <var:l> ^ <nat:2> \land <var:T3> = <var:l> ^ <nat:3> } <var:T0> := <nat:4> { <var:I> = <var:l> \land <var:T1> = <var:l> \land <var:T2> = <var:l> ^ <nat:2> \land <var:T3> = <var:l> ^ <nat:3> \land <var:T0> = <nat:4> } \end{verbatim} Immediately following , \begin{verbatim} { <var:I> = <var:l> } <var:T1> := <var:I> { <var:I> = <var:l> \land <var:T1> = <var:l> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:I> = <var:l> }} <var:T1> := <var:I> ; <var:T2> := <var:T1> * <var:I> ; <var:T3> := <var:T2> * <var:I> ; <var:T0> := <nat:4> ; <var:T1> := <var:T1> * <nat:3> ; <var:T2> := <var:T2> * <nat:3> ; <var:T3> := <var:T3> * <nat:3> ; <var:g> := <var:T3> <var:g> := <var:g> + <var:T2> <var:g> := <var:g> + <var:T1> <var:g> := <var:g> + <var:T0> {{ <var:g> = <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:T1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:T1> = <var:l> /\ <var:T2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:T1> = <var:l> /\ <var:T2> = <var:l> ^ <nat:2> /\ <var:T3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:T1> = <var:l> /\ <var:T2> = <var:l> ^ <nat:2> /\ <var:T3> = <var:l> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:T1> = <nat:3> * <var:l> /\ <var:T2> = <var:l> ^ <nat:2> /\ <var:T3> = <var:l> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:T1> = <nat:3> * <var:l> /\ <var:T2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:T3> = <var:l> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:T1> = <nat:3> * <var:l> /\ <var:T2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:T3> = <nat:3> * <var:l> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:T1> = <nat:3> * <var:l> /\ <var:T2> = <nat:3> * <var:l> ^ <nat:2> /\ <var:T0> = <nat:4> /\ <var:g> = <nat:3> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:T1> = <nat:3> * <var:l> /\ <var:T0> = <nat:4> /\ <var:g> = <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:T0> = <nat:4> /\ <var:g> = <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:g> = <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 