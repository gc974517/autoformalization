\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:x1> := <var:h> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:6> ; <var:l> := <var:x1> <var:l> := <var:l> + <var:x0> \end{verbatim} Given that we have $ <var:h> = <var:F> $ ahead of running our program , then we have $ <var:l> = <nat:6> \cdot <var:F> + <nat:7> $ when set of instructions is done executing . \end{theorem} \begin{proof} The way to prove correctness for this code segment is given using usual Hoare reasoning . Going to the next step , we see the binding statement giving $ <var:h> $ toward $ <var:x1>$ . This statement forwards the condition $ \{ <var:h> = <var:F> \} $ toward the postcondition $ \{ <var:h> = <var:F> \land <var:x1> = <var:F> \} $ . Shifting focus toward the subsequent piece of code in our program , we see the variable assignmet command \verb | <var:x0> := <nat:7> ; | . This line takes $ \{ <var:h> = <var:F> \land <var:x1> = <var:F> \} $ to the postcondition $ \{ <var:h> = <var:F> \land <var:x1> = <var:F> \land <var:x0> = <nat:7> \} $ . Immediately after , we have the binding line \verb | <var:x1> := <var:x1> * <nat:6> ; | . This forwards the condition $ \{ <var:h> = <var:F> \land <var:x1> = <var:F> \land <var:x0> = <nat:7> \} $ as the condition $ \{ <var:h> = <var:F> \land <var:x1> = <nat:6> \cdot <var:F> \land <var:x0> = <nat:7> \} $ . This is shown with the assignment inference rule in Hoare techniques . Looking at the next step contained in the program , we have the assignment statement giving $ <var:x1$ as $ <var:l>$ . This line transfers $ \{ <var:h> = <var:F> \land <var:x1> = <nat:6> \cdot <var:F> \land <var:x0> = <nat:7> \} $ into $ \{ <var:h> = <var:F> \land <var:x0> = <nat:7> \land <var:l> = <nat:6> \cdot <var:F> \} $ . This is shown with the assignment law defined in standard Hoare reasoning . Immediately after , we have the variable binding command \verb | <var:l> := <var:l> + <var:x0> | . This transfers the precondition $ \{ <var:h> = <var:F> \land <var:x0> = <nat:7> \land <var:l> = <nat:6> \cdot <var:F> \} $ into the condition $ \{ <var:h> = <var:F> \land <var:l> = <nat:6> \cdot <var:F> + <nat:7> \} $ . This is known to be sound through the assignment scheme from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:h> = <var:F> }} <var:x1> := <var:h> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:6> ; <var:l> := <var:x1> <var:l> := <var:l> + <var:x0> {{ <var:l> = <nat:6> * <var:F> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:x1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:x1> = <var:F> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:x1> = <nat:6> * <var:F> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:x0> = <nat:7> /\ <var:l> = <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:l> = <nat:6> * <var:F> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 