\begin{document} \begin{theorem} Let the following set of instructions as \begin{verbatim} <var:u> := <nat:3> ; <var:u> := <nat:1> + <var:u> * <var:b> ; <var:u> := <nat:2> + <var:u> * <var:b> ; <var:u> := <var:u> * <var:b> ; <var:u> := <nat:2> + <var:u> * <var:b> ; <var:u> := <nat:2> + <var:u> * <var:b> \end{verbatim} Allow that we have $ <var:b> = <var:B> $ ( given every integers $ <var:B> $ ) ahead of executing the code segment , it must be that we have $ <var:u> = <nat:3> \cdot <var:B> ^ <nat:5> + <nat:1> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands can be shown using typical Hoare reasoning . Focusing on the following bit of code found in the list of instructions , the binding code giving $ <nat:3> $ toward $ <var:u>$ . This moves $ \{ <var:b> = <var:B> \} $ into $ \{ <var:b> = <var:B> \land <var:u> = <nat:3> \} $ . This is rigorously given by the assignment law given in Hoare reasoning . Following , we see the environment update code assigning $ <nat:1> + <var:u> * <var:b> $ into $ <var:u>$ . This code takes the precondition $ \{ <var:b> = <var:B> \land <var:u> = <nat:3> \} $ to the condition $ \{ <var:b> = <var:B> \land <var:u> = <nat:3> \cdot <var:B> + <nat:1> \} $ . This is guaranteed through the assignment inference rule given by typical Hoare logic . Going forward , the environment update line binding $ <nat:2> + <var:u> * <var:b> $ to $ <var:u>$ . This code advances the precondition $ \{ <var:b> = <var:B> \land <var:u> = <nat:3> \cdot <var:B> + <nat:1> \} $ to the condition $ \{ <var:b> = <var:B> \land <var:u> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> + <nat:2> \} $ . This is guaranteed using the assignment scheme from standard Hoare reasoning . Paying attention to the proceeding step found in our set of commands , the variable binding command letting $ <var:u> * <var:b> $ into $ <var:u>$ . This command takes $ \{ <var:b> = <var:B> \land <var:u> = <nat:3> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> + <nat:2> \} $ toward the postcondition $ \{ <var:b> = <var:B> \land <var:u> = <nat:3> \cdot <var:B> ^ <nat:3> + <nat:1> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + \} $ . Moving forward to the subsequent line of code in our program , we see the variable assignmet code defining $ <nat:2> + <var:u> * <var:b> $ to $ <var:u>$ . This transfers the precondition $ \{ <var:b> = <var:B> \land <var:u> = <nat:3> \cdot <var:B> ^ <nat:3> + <nat:1> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + \} $ to the condition $ \{ <var:b> = <var:B> \land <var:u> = <nat:3> \cdot <var:B> ^ <nat:4> + <nat:1> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:2> \} $ . This is shown to be logically sound through the assignment law found in usual Hoare reasoning . Going to the next step , we have the variable update code \verb | <var:u> := <nat:2> + <var:u> * <var:b> | . This transfers the precondition $ \{ <var:b> = <var:B> \land <var:u> = <nat:3> \cdot <var:B> ^ <nat:4> + <nat:1> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:2> \} $ to the postcondition $ \{ <var:b> = <var:B> \land <var:u> = <nat:3> \cdot <var:B> ^ <nat:5> + <nat:1> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:b> = <var:B> }} <var:u> := <nat:3> ; <var:u> := <nat:1> + <var:u> * <var:b> ; <var:u> := <nat:2> + <var:u> * <var:b> ; <var:u> := <var:u> * <var:b> ; <var:u> := <nat:2> + <var:u> * <var:b> ; <var:u> := <nat:2> + <var:u> * <var:b> {{ <var:u> = <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:u> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:u> = <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:u> = <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:u> = <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:u> = <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:B> /\ <var:u> = <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 