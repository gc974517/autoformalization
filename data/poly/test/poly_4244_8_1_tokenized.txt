\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:n1> := <var:h> ; <var:n2> := <var:n1> * <var:h> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:4> ; <var:n2> := <var:n2> * <nat:2> ; <var:w> := <var:n2> <var:w> := <var:w> + <var:n1> <var:w> := <var:w> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> . Given that $ <var:h> = <var:H> $ ahead of the evaluation of the list of instructions , it follows that $ <var:w> = <nat:2> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:4> $ when list of commands terminates . \end{theorem} \begin{proof} The method of proof for the code segment can be given through standard Hoare reasoning . Moving forward to the upcoming line of code seen in our list of instructions , we see the variable assignmet statement \verb | <var:n1> := <var:h> ; | . This line takes $ \{ <var:h> = <var:H> \} $ into the condition $ \{ <var:h> = <var:H> \land <var:n1> = <var:H> \} $ . Going forward , the variable update line assigning $ <var:n1> * <var:h> $ to $ <var:n2>$ . This advances the condition $ \{ <var:h> = <var:H> \land <var:n1> = <var:H> \} $ toward the postcondition $ \{ <var:h> = <var:H> \land <var:n1> = <var:H> \land <var:n2> = <var:H> ^ <nat:2> \} $ . This is rigorously given using the assignment inference rule from typical Hoare techniques . Observing the proceeding step in our series of instructions , we have the variable update code defining $ <nat:4> $ into $ <var:n0>$ . This moves $ \{ <var:h> = <var:H> \land <var:n1> = <var:H> \land <var:n2> = <var:H> ^ <nat:2> \} $ to the postcondition $ \{ <var:h> = <var:H> \land <var:n1> = <var:H> \land <var:n2> = <var:H> ^ <nat:2> \land <var:n0> = <nat:4> \} $ . Moving forward to the next command in the segment of code , the variable assignmet code letting $ <var:n1> * <nat:4> $ into $ <var:n1>$ . This code transfers the condition $ \{ <var:h> = <var:H> \land <var:n1> = <var:H> \land <var:n2> = <var:H> ^ <nat:2> \land <var:n0> = <nat:4> \} $ as $ \{ <var:h> = <var:H> \land <var:n1> = <nat:4> * <var:H> \land <var:n2> = <var:H> ^ <nat:2> \land <var:n0> = <nat:4> \} $ . This is rigorously given using the assignment inference rule found in standard Hoare logic . Paying attention to the upcoming step found in the list of instructions , we have the assignment statement \verb | <var:n2> := <var:n2> * <nat:2> ; | . This forwards the precondition $ \{ <var:h> = <var:H> \land <var:n1> = <nat:4> * <var:H> \land <var:n2> = <var:H> ^ <nat:2> \land <var:n0> = <nat:4> \} $ as the postcondition $ \{ <var:h> = <var:H> \land <var:n1> = <nat:4> * <var:H> \land <var:n2> = <nat:2> * <var:H> ^ <nat:2> \land <var:n0> = <nat:4> \} $ . This is shown to be logically sound by the assignment rule obtained from Hoare logic . Stepping forward , we have the variable assignmet line \verb | <var:w> := <var:n2> | . This takes $ \{ <var:h> = <var:H> \land <var:n1> = <nat:4> * <var:H> \land <var:n2> = <nat:2> * <var:H> ^ <nat:2> \land <var:n0> = <nat:4> \} $ into the postcondition $ \{ <var:h> = <var:H> \land <var:n1> = <nat:4> * <var:H> \land <var:n0> = <nat:4> \land <var:w> = <nat:2> * <var:H> ^ <nat:2> \} $ . Observing the upcoming command found in the series of instructions , we see the statement \verb | <var:w> := <var:w> + <var:n1> | . This forwards $ \{ <var:h> = <var:H> \land <var:n1> = <nat:4> * <var:H> \land <var:n0> = <nat:4> \land <var:w> = <nat:2> * <var:H> ^ <nat:2> \} $ to the condition $ \{ <var:h> = <var:H> \land <var:n0> = <nat:4> \land <var:w> = <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> \} $ . This is ensured through the assignment scheme obtained from typical Hoare logic . Now , the variable binding line \verb | <var:w> := <var:w> + <var:n0> | . This line moves the precondition $ \{ <var:h> = <var:H> \land <var:n0> = <nat:4> \land <var:w> = <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> \} $ as the condition $ \{ <var:h> = <var:H> \land <var:w> = <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:4> \} $ . This is shown using the assignment scheme given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n1> := <var:h> ; <var:n2> := <var:n1> * <var:h> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:4> ; <var:n2> := <var:n2> * <nat:2> ; <var:w> := <var:n2> <var:w> := <var:w> + <var:n1> <var:w> := <var:w> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:h> = <var:H> }} <def:poly> {{ <var:w> = <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:n1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:n1> = <var:H> /\ <var:n2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:n1> = <var:H> /\ <var:n2> = <var:H> ^ <nat:2> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:n1> = <nat:4> * <var:H> /\ <var:n2> = <var:H> ^ <nat:2> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:n1> = <nat:4> * <var:H> /\ <var:n2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:n1> = <nat:4> * <var:H> /\ <var:n0> = <nat:4> /\ <var:w> = <nat:2> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:n0> = <nat:4> /\ <var:w> = <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:H> /\ <var:w> = <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 