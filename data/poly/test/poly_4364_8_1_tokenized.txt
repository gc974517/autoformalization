\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N1> := <var:Y> ; <var:N2> := <var:N1> * <var:Y> ; <var:N0> := <nat:6> ; <var:N1> := <var:N1> * <nat:8> ; <var:N2> := <var:N2> * <nat:8> ; <var:p> := <var:N2> <var:p> := <var:p> + <var:N1> <var:p> := <var:p> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> . Allow $ <var:Y> = <var:P> $ ( given positive coefficients $ <var:P> $ ) before running the segment of code , it follows that $ <var:p> = <nat:8> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:6> $ when series of commands has exited . \end{theorem} \begin{proof} The way to prove correctness for the code segment can be given through usual Hoare techniques . Taking another step toward the proceeding line of code found in the code , we have the variable binding command \verb | <var:N1> := <var:Y> ; | . This command advances the precondition $ \{ <var:Y> = <var:P> \} $ to $ \{ <var:Y> = <var:P> \land <var:N1> = <var:P> \} $ . Going forward , the variable binding code \verb | <var:N2> := <var:N1> * <var:Y> ; | . This advances the precondition $ \{ <var:Y> = <var:P> \land <var:N1> = <var:P> \} $ as $ \{ <var:Y> = <var:P> \land <var:N1> = <var:P> \land <var:N2> = <var:P> ^ <nat:2> \} $ . Going forward , we see the variable update line \verb | <var:N0> := <nat:6> ; | . This redefines the precondition $ \{ <var:Y> = <var:P> \land <var:N1> = <var:P> \land <var:N2> = <var:P> ^ <nat:2> \} $ to the postcondition $ \{ <var:Y> = <var:P> \land <var:N1> = <var:P> \land <var:N2> = <var:P> ^ <nat:2> \land <var:N0> = <nat:6> \} $ . This is known to be sound using the assignment law given by usual Hoare techniques . Advancing to the next line of code found in our code segment , we have the variable update command defining $ <var:N1> * <nat:8> $ toward $ <var:N1>$ . This command advances the condition $ \{ <var:Y> = <var:P> \land <var:N1> = <var:P> \land <var:N2> = <var:P> ^ <nat:2> \land <var:N0> = <nat:6> \} $ as $ \{ <var:Y> = <var:P> \land <var:N1> = <nat:8> \times <var:P> \land <var:N2> = <var:P> ^ <nat:2> \land <var:N0> = <nat:6> \} $ . Jumping to the subsequent step contained in our series of commands , the variable binding code \verb | <var:N2> := <var:N2> * <nat:8> ; | . This redefines $ \{ <var:Y> = <var:P> \land <var:N1> = <nat:8> \times <var:P> \land <var:N2> = <var:P> ^ <nat:2> \land <var:N0> = <nat:6> \} $ as the condition $ \{ <var:Y> = <var:P> \land <var:N1> = <nat:8> \times <var:P> \land <var:N2> = <nat:8> \times <var:P> ^ <nat:2> \land <var:N0> = <nat:6> \} $ . This is ensured through the assignment rule of usual Hoare reasoning . Paying attention to the proceeding line of code seen in our set of instructions , we have the variable update code \verb | <var:p> := <var:N2> | . This code takes $ \{ <var:Y> = <var:P> \land <var:N1> = <nat:8> \times <var:P> \land <var:N2> = <nat:8> \times <var:P> ^ <nat:2> \land <var:N0> = <nat:6> \} $ to $ \{ <var:Y> = <var:P> \land <var:N1> = <nat:8> \times <var:P> \land <var:N0> = <nat:6> \land <var:p> = <nat:8> \times <var:P> ^ <nat:2> \} $ . This is ensured through the assignment law found in typical Hoare techniques . Going to the next step , we see the variable update statement binding $ <var:p> + <var:N1$ as $ <var:p>$ . This advances the precondition $ \{ <var:Y> = <var:P> \land <var:N1> = <nat:8> \times <var:P> \land <var:N0> = <nat:6> \land <var:p> = <nat:8> \times <var:P> ^ <nat:2> \} $ to the condition $ \{ <var:Y> = <var:P> \land <var:N0> = <nat:6> \land <var:p> = <nat:8> \times <var:P> ^ <nat:2> + <nat:8> \times <var:P> \} $ . Moving on to the following bit of code in the code , the variable binding command assigning $ <var:p> + <var:N0$ into $ <var:p>$ . This redefines the condition $ \{ <var:Y> = <var:P> \land <var:N0> = <nat:6> \land <var:p> = <nat:8> \times <var:P> ^ <nat:2> + <nat:8> \times <var:P> \} $ to the condition $ \{ <var:Y> = <var:P> \land <var:p> = <nat:8> \times <var:P> ^ <nat:2> + <nat:8> \times <var:P> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <def:poly> := <var:N1> := <var:Y> ; <var:N2> := <var:N1> * <var:Y> ; <var:N0> := <nat:6> ; <var:N1> := <var:N1> * <nat:8> ; <var:N2> := <var:N2> * <nat:8> ; <var:p> := <var:N2> <var:p> := <var:p> + <var:N1> <var:p> := <var:p> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:Y> = <var:P> }} <def:poly> {{ <var:p> = <nat:8> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:N1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:N1> = <var:P> /\ <var:N2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:N1> = <var:P> /\ <var:N2> = <var:P> ^ <nat:2> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:N1> = <nat:8> * <var:P> /\ <var:N2> = <var:P> ^ <nat:2> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:N1> = <nat:8> * <var:P> /\ <var:N2> = <nat:8> * <var:P> ^ <nat:2> /\ <var:N0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:N1> = <nat:8> * <var:P> /\ <var:N0> = <nat:6> /\ <var:p> = <nat:8> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:N0> = <nat:6> /\ <var:p> = <nat:8> * <var:P> ^ <nat:2> + <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:P> /\ <var:p> = <nat:8> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 