\begin{document} \begin{theorem} Consider the following series of instructions as follows \begin{verbatim} <var:E> := <nat:1> ; <var:E> := <nat:3> + <var:E> * <var:f> ; <var:E> := <nat:4> + <var:E> * <var:f> ; <var:E> := <nat:2> + <var:E> * <var:f> ; <var:E> := <nat:2> + <var:E> * <var:f> ; <var:E> := <nat:1> + <var:E> * <var:f> ; <var:E> := <nat:2> + <var:E> * <var:f> ; <var:E> := <nat:1> + <var:E> * <var:f> ; <var:E> := <nat:3> + <var:E> * <var:f> \end{verbatim} Allowing that $ <var:f> = <var:v> $ --- for positive numbers $ <var:v> $ --- ahead of evaluating our list of instructions , it follows that $ <var:E> = <nat:1> \cdot <var:v> ^ <nat:8> + <nat:3> \cdot <var:v> ^ <nat:7> + <nat:4> \cdot <var:v> ^ <nat:6> + <nat:2> \cdot <var:v> ^ <nat:5> + <nat:2> \cdot <var:v> ^ <nat:4> + <nat:1> \cdot <var:v> ^ <nat:3> + <nat:2> \cdot <var:v> ^ <nat:2> + <nat:1> \cdot <var:v> + <nat:3> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:f> = <var:v> \} \\ <var:E> := <nat:1> ; \\ \{ <var:f> = <var:v> \land <var:E> = <nat:1> \} \\ <var:E> := <nat:3> + <var:E> * <var:f> ; \\ \{ <var:f> = <var:v> \land <var:E> = <nat:1> \times <var:v> + <nat:3> \} \\ <var:E> := <nat:4> + <var:E> * <var:f> ; \\ \{ <var:f> = <var:v> \land <var:E> = <nat:1> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + <nat:4> \} \\ <var:E> := <nat:2> + <var:E> * <var:f> ; \\ \{ <var:f> = <var:v> \land <var:E> = <nat:1> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:2> \} \\ <var:E> := <nat:2> + <var:E> * <var:f> ; \\ \{ <var:f> = <var:v> \land <var:E> = <nat:1> \times <var:v> ^ <nat:4> + <nat:3> \times <var:v> ^ <nat:3> + <nat:4> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:2> \} \\ <var:E> := <nat:1> + <var:E> * <var:f> ; \\ \{ <var:f> = <var:v> \land <var:E> = <nat:1> \times <var:v> ^ <nat:5> + <nat:3> \times <var:v> ^ <nat:4> + <nat:4> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:1> \} \\ <var:E> := <nat:2> + <var:E> * <var:f> ; \\ \{ <var:f> = <var:v> \land <var:E> = <nat:1> \times <var:v> ^ <nat:6> + <nat:3> \times <var:v> ^ <nat:5> + <nat:4> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:2> \} \\ <var:E> := <nat:1> + <var:E> * <var:f> ; \\ \{ <var:f> = <var:v> \land <var:E> = <nat:1> \times <var:v> ^ <nat:7> + <nat:3> \times <var:v> ^ <nat:6> + <nat:4> \times <var:v> ^ <nat:5> + <nat:2> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:1> \} \\ <var:E> := <nat:3> + <var:E> * <var:f> \\ \{ <var:f> = <var:v> \land <var:E> = <nat:1> \times <var:v> ^ <nat:8> + <nat:3> \times <var:v> ^ <nat:7> + <nat:4> \times <var:v> ^ <nat:6> + <nat:2> \times <var:v> ^ <nat:5> + <nat:2> \times <var:v> ^ <nat:4> + <nat:1> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:3> \} \end{eqnarray} Given the above , our series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:f> = <var:v> }} <var:E> := <nat:1> ; <var:E> := <nat:3> + <var:E> * <var:f> ; <var:E> := <nat:4> + <var:E> * <var:f> ; <var:E> := <nat:2> + <var:E> * <var:f> ; <var:E> := <nat:2> + <var:E> * <var:f> ; <var:E> := <nat:1> + <var:E> * <var:f> ; <var:E> := <nat:2> + <var:E> * <var:f> ; <var:E> := <nat:1> + <var:E> * <var:f> ; <var:E> := <nat:3> + <var:E> * <var:f> {{ <var:E> = <nat:1> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:7> + <nat:4> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:E> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:E> = <nat:1> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:E> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:E> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:E> = <nat:1> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:E> = <nat:1> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:E> = <nat:1> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:E> = <nat:1> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:E> = <nat:1> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:7> + <nat:4> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 