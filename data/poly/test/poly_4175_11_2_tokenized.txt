\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A> := <nat:4> ; <var:A> := <var:A> * <var:l> ; <var:A> := <nat:2> + <var:A> * <var:l> ; <var:A> := <nat:4> + <var:A> * <var:l> ; <var:A> := <nat:1> + <var:A> * <var:l> ; <var:A> := <var:A> * <var:l> ; <var:A> := <nat:1> + <var:A> * <var:l> ; <var:A> := <nat:3> + <var:A> * <var:l> ; <var:A> := <nat:4> + <var:A> * <var:l> ; <var:A> := <nat:2> + <var:A> * <var:l> ; <var:A> := <nat:4> + <var:A> * <var:l> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:l> = <var:h> $ for all positive numbers $ <var:h> $ before evaluating this list of commands it holds that we have $ <var:A> = <nat:4> * <var:h> ^ <nat:10> + <nat:2> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for this code is demonstrated using typical Hoare techniques . Moving forward , we see \[ \begin{tabular} {rcl} \{ <var:l> = <var:h> \} & <var:A> := <nat:4> & \{ <var:l> = <var:h> \land <var:A> = <nat:4> \} \\ \{ <var:l> = <var:h> \land <var:A> = <nat:4> \} & <var:A> := <var:A> * <var:l> & \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> + \} \\ \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> + \} & <var:A> := <nat:2> + <var:A> * <var:l> & \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:2> + <nat:2> \} \\ \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:2> + <nat:2> \} & <var:A> := <nat:4> + <var:A> * <var:l> & \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> + <nat:4> \} \\ \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> + <nat:4> \} & <var:A> := <nat:1> + <var:A> * <var:l> & \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:1> \} \\ \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:1> \} & <var:A> := <var:A> * <var:l> & \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + \} \\ \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + \} & <var:A> := <nat:1> + <var:A> * <var:l> & \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:1> \} \\ \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:1> \} & <var:A> := <nat:3> + <var:A> * <var:l> & \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:1> * <var:h> + <nat:3> \} \\ \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:1> * <var:h> + <nat:3> \} & <var:A> := <nat:4> + <var:A> * <var:l> & \{ <var:l> = <var:h> \land <var:A> = <nat:4> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> \} \end{tabular} Further , we see \[ \begin{tabular} {rcl} \{ <var:l> = <var:h> \} & <var:A> := <nat:4> & \{ <var:l> = <var:h> \land <var:A> = <nat:4> \} \end{tabular} This is deduced by the variable assignmet rule in Hoare techniques . Moving on , \[ \begin{tabular} {rcl} \{ <var:l> = <var:h> \} & <var:A> := <nat:4> & \{ <var:l> = <var:h> \land <var:A> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:4> ; <var:A> := <var:A> * <var:l> ; <var:A> := <nat:2> + <var:A> * <var:l> ; <var:A> := <nat:4> + <var:A> * <var:l> ; <var:A> := <nat:1> + <var:A> * <var:l> ; <var:A> := <var:A> * <var:l> ; <var:A> := <nat:1> + <var:A> * <var:l> ; <var:A> := <nat:3> + <var:A> * <var:l> ; <var:A> := <nat:4> + <var:A> * <var:l> ; <var:A> := <nat:2> + <var:A> * <var:l> ; <var:A> := <nat:4> + <var:A> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:l> = <var:h> }} <def:poly> {{ <var:A> = <nat:4> * <var:h> ^ <nat:10> + <nat:2> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:A> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:A> = <nat:4> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:1> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:9> + <nat:2> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:A> = <nat:4> * <var:h> ^ <nat:10> + <nat:2> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 