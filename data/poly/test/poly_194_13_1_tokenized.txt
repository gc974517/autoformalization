\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:c1> := <var:X> ; <var:c2> := <var:c1> * <var:X> ; <var:c3> := <var:c2> * <var:X> ; <var:c4> := <var:c3> * <var:X> ; <var:c5> := <var:c4> * <var:X> ; <var:c0> := <nat:5> ; <var:c2> := <var:c2> * <nat:3> ; <var:c3> := <var:c3> * <nat:8> ; <var:c5> := <var:c5> * <nat:8> ; <var:q> := <var:c5> <var:q> := <var:q> + <var:c3> <var:q> := <var:q> + <var:c2> <var:q> := <var:q> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assume for any positive coefficients $ <var:W> $ that $ <var:X> = <var:W> $ ahead of interpreting the program it must be that we have $ <var:q> = <nat:8> * <var:W> ^ <nat:5> + <nat:8> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:5> $ when code segment exits . \end{theorem} \begin{proof} The method of proof for the set of instructions is accomplished by typical Hoare techniques . Immediately following , we have \verb | { <var:X> = <var:W> } <var:c1> := <var:X> { <var:X> = <var:W> \land <var:c1> = <var:W> } | . Now , we see \verb | { <var:X> = <var:W> } <var:c1> := <var:X> { <var:X> = <var:W> \land <var:c1> = <var:W> } | , \verb | { <var:X> = <var:W> \land <var:c1> = <var:W> } <var:c2> := <var:c1> * <var:X> { <var:X> = <var:W> \land <var:c1> = <var:W> \land <var:c2> = <var:W> ^ <nat:2> } | , \verb | { <var:X> = <var:W> \land <var:c1> = <var:W> \land <var:c2> = <var:W> ^ <nat:2> } <var:c3> := <var:c2> * <var:X> { <var:X> = <var:W> \land <var:c1> = <var:W> \land <var:c2> = <var:W> ^ <nat:2> \land <var:c3> = <var:W> ^ <nat:3> } | , \verb | { <var:X> = <var:W> \land <var:c1> = <var:W> \land <var:c2> = <var:W> ^ <nat:2> \land <var:c3> = <var:W> ^ <nat:3> } <var:c4> := <var:c3> * <var:X> { <var:X> = <var:W> \land <var:c1> = <var:W> \land <var:c2> = <var:W> ^ <nat:2> \land <var:c3> = <var:W> ^ <nat:3> \land <var:c4> = <var:W> ^ <nat:4> } | , \verb | { <var:X> = <var:W> \land <var:c1> = <var:W> \land <var:c2> = <var:W> ^ <nat:2> \land <var:c3> = <var:W> ^ <nat:3> \land <var:c4> = <var:W> ^ <nat:4> } <var:c5> := <var:c4> * <var:X> { <var:X> = <var:W> \land <var:c1> = <var:W> \land <var:c2> = <var:W> ^ <nat:2> \land <var:c3> = <var:W> ^ <nat:3> \land <var:c4> = <var:W> ^ <nat:4> \land <var:c5> = <var:W> ^ <nat:5> } | , \verb | { <var:X> = <var:W> \land <var:c1> = <var:W> \land <var:c2> = <var:W> ^ <nat:2> \land <var:c3> = <var:W> ^ <nat:3> \land <var:c4> = <var:W> ^ <nat:4> \land <var:c5> = <var:W> ^ <nat:5> } <var:c0> := <nat:5> { <var:X> = <var:W> \land <var:c1> = <var:W> \land <var:c2> = <var:W> ^ <nat:2> \land <var:c3> = <var:W> ^ <nat:3> \land <var:c4> = <var:W> ^ <nat:4> \land <var:c5> = <var:W> ^ <nat:5> \land <var:c0> = <nat:5> } | and \verb | { <var:X> = <var:W> \land <var:c1> = <var:W> \land <var:c2> = <var:W> ^ <nat:2> \land <var:c3> = <var:W> ^ <nat:3> \land <var:c4> = <var:W> ^ <nat:4> \land <var:c5> = <var:W> ^ <nat:5> \land <var:c0> = <nat:5> } <var:c2> := <var:c2> * <nat:3> { <var:X> = <var:W> \land <var:c1> = <var:W> \land <var:c2> = <nat:3> \cdot <var:W> ^ <nat:2> \land <var:c3> = <var:W> ^ <nat:3> \land <var:c4> = <var:W> ^ <nat:4> \land <var:c5> = <var:W> ^ <nat:5> \land <var:c0> = <nat:5> } | . Looking at the subsequent line of code found in the series of commands , we see \verb | { <var:X> = <var:W> } <var:c1> := <var:X> { <var:X> = <var:W> \land <var:c1> = <var:W> } | . This is deduced with the variable update law defined by Hoare reasoning . Moving forward , we see \verb | { <var:X> = <var:W> } <var:c1> := <var:X> { <var:X> = <var:W> \land <var:c1> = <var:W> } | . This is ensured by the variable binding inference rule obtained from usual Hoare reasoning . Moving forward to the following piece of code contained in the set of commands , we see \verb | { <var:X> = <var:W> } <var:c1> := <var:X> { <var:X> = <var:W> \land <var:c1> = <var:W> } | . Advancing , we see \verb | { <var:X> = <var:W> } <var:c1> := <var:X> { <var:X> = <var:W> \land <var:c1> = <var:W> } | and \verb | { <var:X> = <var:W> \land <var:c1> = <var:W> } <var:c2> := <var:c1> * <var:X> { <var:X> = <var:W> \land <var:c1> = <var:W> \land <var:c2> = <var:W> ^ <nat:2> } | . This is sound through the assignment scheme defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <var:c4> : string := " <var:c4> " . Definition <var:c5> : string := " <var:c5> " . Definition <def:poly> := <var:c1> := <var:X> ; <var:c2> := <var:c1> * <var:X> ; <var:c3> := <var:c2> * <var:X> ; <var:c4> := <var:c3> * <var:X> ; <var:c5> := <var:c4> * <var:X> ; <var:c0> := <nat:5> ; <var:c2> := <var:c2> * <nat:3> ; <var:c3> := <var:c3> * <nat:8> ; <var:c5> := <var:c5> * <nat:8> ; <var:q> := <var:c5> <var:q> := <var:q> + <var:c3> <var:q> := <var:q> + <var:c2> <var:q> := <var:q> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:X> = <var:W> }} <def:poly> {{ <var:q> = <nat:8> * <var:W> ^ <nat:5> + <nat:8> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:c1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:c1> = <var:W> /\ <var:c2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:c1> = <var:W> /\ <var:c2> = <var:W> ^ <nat:2> /\ <var:c3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:c1> = <var:W> /\ <var:c2> = <var:W> ^ <nat:2> /\ <var:c3> = <var:W> ^ <nat:3> /\ <var:c4> = <var:W> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:c1> = <var:W> /\ <var:c2> = <var:W> ^ <nat:2> /\ <var:c3> = <var:W> ^ <nat:3> /\ <var:c4> = <var:W> ^ <nat:4> /\ <var:c5> = <var:W> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:c1> = <var:W> /\ <var:c2> = <var:W> ^ <nat:2> /\ <var:c3> = <var:W> ^ <nat:3> /\ <var:c4> = <var:W> ^ <nat:4> /\ <var:c5> = <var:W> ^ <nat:5> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:c1> = <var:W> /\ <var:c2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:c3> = <var:W> ^ <nat:3> /\ <var:c4> = <var:W> ^ <nat:4> /\ <var:c5> = <var:W> ^ <nat:5> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:c1> = <var:W> /\ <var:c2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:c3> = <nat:8> * <var:W> ^ <nat:3> /\ <var:c4> = <var:W> ^ <nat:4> /\ <var:c5> = <var:W> ^ <nat:5> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:c1> = <var:W> /\ <var:c2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:c3> = <nat:8> * <var:W> ^ <nat:3> /\ <var:c4> = <var:W> ^ <nat:4> /\ <var:c5> = <nat:8> * <var:W> ^ <nat:5> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:c1> = <var:W> /\ <var:c2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:c3> = <nat:8> * <var:W> ^ <nat:3> /\ <var:c4> = <var:W> ^ <nat:4> /\ <var:c0> = <nat:5> /\ <var:q> = <nat:8> * <var:W> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:c1> = <var:W> /\ <var:c2> = <nat:3> * <var:W> ^ <nat:2> /\ <var:c0> = <nat:5> /\ <var:q> = <nat:8> * <var:W> ^ <nat:5> + <nat:8> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:c1> = <var:W> /\ <var:c0> = <nat:5> /\ <var:q> = <nat:8> * <var:W> ^ <nat:5> + <nat:8> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:W> /\ <var:q> = <nat:8> * <var:W> ^ <nat:5> + <nat:8> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 