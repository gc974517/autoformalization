\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} such that \begin{verbatim} <var:F1> := <var:M> ; <var:F2> := <var:F1> * <var:M> ; <var:F3> := <var:F2> * <var:M> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:3> ; <var:F3> := <var:F3> * <nat:1> ; <var:R> := <var:F3> <var:R> := <var:R> + <var:F1> <var:R> := <var:R> + <var:F0> \end{verbatim} Assuming $ <var:M> = <var:u> $ ahead of the execution of our code , then $ <var:R> = <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> + <nat:2> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques returns : \begin{eqnarray} \{ <var:M> = <var:u> \} \\ <var:F1> := <var:M> ; \\ \{ <var:M> = <var:u> \land <var:F1> = <var:u> \} \\ <var:F2> := <var:F1> * <var:M> ; \\ \{ <var:M> = <var:u> \land <var:F1> = <var:u> \land <var:F2> = <var:u> ^ <nat:2> \} \\ <var:F3> := <var:F2> * <var:M> ; \\ \{ <var:M> = <var:u> \land <var:F1> = <var:u> \land <var:F2> = <var:u> ^ <nat:2> \land <var:F3> = <var:u> ^ <nat:3> \} \\ <var:F0> := <nat:2> ; \\ \{ <var:M> = <var:u> \land <var:F1> = <var:u> \land <var:F2> = <var:u> ^ <nat:2> \land <var:F3> = <var:u> ^ <nat:3> \land <var:F0> = <nat:2> \} \\ <var:F1> := <var:F1> * <nat:3> ; \\ \{ <var:M> = <var:u> \land <var:F1> = <nat:3> \cdot <var:u> \land <var:F2> = <var:u> ^ <nat:2> \land <var:F3> = <var:u> ^ <nat:3> \land <var:F0> = <nat:2> \} \\ <var:F3> := <var:F3> * <nat:1> ; \\ \{ <var:M> = <var:u> \land <var:F1> = <nat:3> \cdot <var:u> \land <var:F2> = <var:u> ^ <nat:2> \land <var:F3> = <nat:1> \cdot <var:u> ^ <nat:3> \land <var:F0> = <nat:2> \} \\ <var:R> := <var:F3> \\ \{ <var:M> = <var:u> \land <var:F1> = <nat:3> \cdot <var:u> \land <var:F2> = <var:u> ^ <nat:2> \land <var:F0> = <nat:2> \land <var:R> = <nat:1> \cdot <var:u> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:F1> \\ \{ <var:M> = <var:u> \land <var:F0> = <nat:2> \land <var:R> = <nat:1> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> \} \\ <var:R> := <var:R> + <var:F0> \\ \{ <var:M> = <var:u> \land <var:R> = <nat:1> \cdot <var:u> ^ <nat:3> + <nat:3> \cdot <var:u> + <nat:2> \} \end{eqnarray} Given the above , our program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:M> = <var:u> }} <var:F1> := <var:M> ; <var:F2> := <var:F1> * <var:M> ; <var:F3> := <var:F2> * <var:M> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:3> ; <var:F3> := <var:F3> * <nat:1> ; <var:R> := <var:F3> <var:R> := <var:R> + <var:F1> <var:R> := <var:R> + <var:F0> {{ <var:R> = <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:F1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:F1> = <var:u> /\ <var:F2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:F1> = <var:u> /\ <var:F2> = <var:u> ^ <nat:2> /\ <var:F3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:F1> = <var:u> /\ <var:F2> = <var:u> ^ <nat:2> /\ <var:F3> = <var:u> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:F1> = <nat:3> * <var:u> /\ <var:F2> = <var:u> ^ <nat:2> /\ <var:F3> = <var:u> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:F1> = <nat:3> * <var:u> /\ <var:F2> = <var:u> ^ <nat:2> /\ <var:F3> = <nat:1> * <var:u> ^ <nat:3> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:F1> = <nat:3> * <var:u> /\ <var:F2> = <var:u> ^ <nat:2> /\ <var:F0> = <nat:2> /\ <var:R> = <nat:1> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:F0> = <nat:2> /\ <var:R> = <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:u> /\ <var:R> = <nat:1> * <var:u> ^ <nat:3> + <nat:3> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 