\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:H1> := <var:R> ; <var:H2> := <var:H1> * <var:R> ; <var:H3> := <var:H2> * <var:R> ; <var:H4> := <var:H3> * <var:R> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:8> ; <var:H2> := <var:H2> * <nat:2> ; <var:H3> := <var:H3> * <nat:1> ; <var:H4> := <var:H4> * <nat:3> ; <var:u> := <var:H4> <var:u> := <var:u> + <var:H3> <var:u> := <var:u> + <var:H2> <var:u> := <var:u> + <var:H1> <var:u> := <var:u> + <var:H0> \end{verbatim} Assuming it to be that $ <var:R> = <var:o> $ before executing our series of commands then we see $ <var:u> = <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:8> * <var:o> + <nat:6> $ . \end{theorem} \begin{proof} We can see that this decorated list of commands . \begin{eqnarray} \{ <var:R> = <var:o> \} \\ <var:H1> := <var:R> ; \\ \{ <var:R> = <var:o> \land <var:H1> = <var:o> \} \\ <var:H2> := <var:H1> * <var:R> ; \\ \{ <var:R> = <var:o> \land <var:H1> = <var:o> \land <var:H2> = <var:o> ^ <nat:2> \} \\ <var:H3> := <var:H2> * <var:R> ; \\ \{ <var:R> = <var:o> \land <var:H1> = <var:o> \land <var:H2> = <var:o> ^ <nat:2> \land <var:H3> = <var:o> ^ <nat:3> \} \\ <var:H4> := <var:H3> * <var:R> ; \\ \{ <var:R> = <var:o> \land <var:H1> = <var:o> \land <var:H2> = <var:o> ^ <nat:2> \land <var:H3> = <var:o> ^ <nat:3> \land <var:H4> = <var:o> ^ <nat:4> \} \\ <var:H0> := <nat:6> ; \\ \{ <var:R> = <var:o> \land <var:H1> = <var:o> \land <var:H2> = <var:o> ^ <nat:2> \land <var:H3> = <var:o> ^ <nat:3> \land <var:H4> = <var:o> ^ <nat:4> \land <var:H0> = <nat:6> \} \\ <var:H1> := <var:H1> * <nat:8> ; \\ \{ <var:R> = <var:o> \land <var:H1> = <nat:8> * <var:o> \land <var:H2> = <var:o> ^ <nat:2> \land <var:H3> = <var:o> ^ <nat:3> \land <var:H4> = <var:o> ^ <nat:4> \land <var:H0> = <nat:6> \} \\ <var:H2> := <var:H2> * <nat:2> ; \\ \{ <var:R> = <var:o> \land <var:H1> = <nat:8> * <var:o> \land <var:H2> = <nat:2> * <var:o> ^ <nat:2> \land <var:H3> = <var:o> ^ <nat:3> \land <var:H4> = <var:o> ^ <nat:4> \land <var:H0> = <nat:6> \} \\ <var:H3> := <var:H3> * <nat:1> ; \\ \{ <var:R> = <var:o> \land <var:H1> = <nat:8> * <var:o> \land <var:H2> = <nat:2> * <var:o> ^ <nat:2> \land <var:H3> = <nat:1> * <var:o> ^ <nat:3> \land <var:H4> = <var:o> ^ <nat:4> \land <var:H0> = <nat:6> \} \\ <var:H4> := <var:H4> * <nat:3> ; \\ \{ <var:R> = <var:o> \land <var:H1> = <nat:8> * <var:o> \land <var:H2> = <nat:2> * <var:o> ^ <nat:2> \land <var:H3> = <nat:1> * <var:o> ^ <nat:3> \land <var:H4> = <nat:3> * <var:o> ^ <nat:4> \land <var:H0> = <nat:6> \} \\ <var:u> := <var:H4> \\ \{ <var:R> = <var:o> \land <var:H1> = <nat:8> * <var:o> \land <var:H2> = <nat:2> * <var:o> ^ <nat:2> \land <var:H3> = <nat:1> * <var:o> ^ <nat:3> \land <var:H0> = <nat:6> \land <var:u> = <nat:3> * <var:o> ^ <nat:4> \} \\ <var:u> := <var:u> + <var:H3> \\ \{ <var:R> = <var:o> \land <var:H1> = <nat:8> * <var:o> \land <var:H2> = <nat:2> * <var:o> ^ <nat:2> \land <var:H0> = <nat:6> \land <var:u> = <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:H2> \\ \{ <var:R> = <var:o> \land <var:H1> = <nat:8> * <var:o> \land <var:H0> = <nat:6> \land <var:u> = <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:H1> \\ \{ <var:R> = <var:o> \land <var:H0> = <nat:6> \land <var:u> = <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:8> * <var:o> \} \\ <var:u> := <var:u> + <var:H0> \\ \{ <var:R> = <var:o> \land <var:u> = <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:8> * <var:o> + <nat:6> \} \end{eqnarray} Utilizing Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <var:H4> : string := " <var:H4> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:R> = <var:o> }} <var:H1> := <var:R> ; <var:H2> := <var:H1> * <var:R> ; <var:H3> := <var:H2> * <var:R> ; <var:H4> := <var:H3> * <var:R> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:8> ; <var:H2> := <var:H2> * <nat:2> ; <var:H3> := <var:H3> * <nat:1> ; <var:H4> := <var:H4> * <nat:3> ; <var:u> := <var:H4> <var:u> := <var:u> + <var:H3> <var:u> := <var:u> + <var:H2> <var:u> := <var:u> + <var:H1> <var:u> := <var:u> + <var:H0> {{ <var:u> = <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:8> * <var:o> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:H1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:H1> = <var:o> /\ <var:H2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:H1> = <var:o> /\ <var:H2> = <var:o> ^ <nat:2> /\ <var:H3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:H1> = <var:o> /\ <var:H2> = <var:o> ^ <nat:2> /\ <var:H3> = <var:o> ^ <nat:3> /\ <var:H4> = <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:H1> = <var:o> /\ <var:H2> = <var:o> ^ <nat:2> /\ <var:H3> = <var:o> ^ <nat:3> /\ <var:H4> = <var:o> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:H1> = <nat:8> * <var:o> /\ <var:H2> = <var:o> ^ <nat:2> /\ <var:H3> = <var:o> ^ <nat:3> /\ <var:H4> = <var:o> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:H1> = <nat:8> * <var:o> /\ <var:H2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:H3> = <var:o> ^ <nat:3> /\ <var:H4> = <var:o> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:H1> = <nat:8> * <var:o> /\ <var:H2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:H3> = <nat:1> * <var:o> ^ <nat:3> /\ <var:H4> = <var:o> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:H1> = <nat:8> * <var:o> /\ <var:H2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:H3> = <nat:1> * <var:o> ^ <nat:3> /\ <var:H4> = <nat:3> * <var:o> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:H1> = <nat:8> * <var:o> /\ <var:H2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:H3> = <nat:1> * <var:o> ^ <nat:3> /\ <var:H0> = <nat:6> /\ <var:u> = <nat:3> * <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:H1> = <nat:8> * <var:o> /\ <var:H2> = <nat:2> * <var:o> ^ <nat:2> /\ <var:H0> = <nat:6> /\ <var:u> = <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:H1> = <nat:8> * <var:o> /\ <var:H0> = <nat:6> /\ <var:u> = <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:H0> = <nat:6> /\ <var:u> = <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:8> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:o> /\ <var:u> = <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:8> * <var:o> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 