\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:H0> := <nat:7> ; <var:k> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:t> = <var:U> $ prior to the execution of the code segment , it holds that $ <var:k> = <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of commands is clear by standard Hoare techniques . Moving on to the next step , \begin{eqnarray} \{ <var:t> = <var:U> \} \, <var:H0> := <nat:7> \, \{ <var:t> = <var:U> \land <var:H0> = <nat:7> \} \\ \{ <var:t> = <var:U> \land <var:H0> = <nat:7> \} \, <var:k> := <var:H0\, \{ <var:t> = <var:U> \land <var:k> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:7> ; <var:k> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:t> = <var:U> }} <def:poly> {{ <var:k> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:k> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 