\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:A0> := <nat:3> ; <var:A2> := <nat:1> ; <var:A2> := <var:A2> * <var:g> ; <var:A2> := <var:A2> * <var:g> ; <var:y> := <var:A2> ; <var:y> := <var:y> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:g> = <var:U> $ prior to executing this program it holds that $ <var:y> = <nat:1> \times <var:U> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of commands can be seen by usual Hoare logic . Next , the variable assignmet line \verb | <var:A0> := <nat:3> ; | . This moves $ \{ <var:g> = <var:U> \} $ as the postcondition $ \{ <var:g> = <var:U> \land <var:A0> = <nat:3> \} $ . Looking at the following step contained in the code segment , the variable binding command letting $ <nat:1> $ as $ <var:A2>$ . This redefines the condition $ \{ <var:g> = <var:U> \land <var:A0> = <nat:3> \} $ toward $ \{ <var:g> = <var:U> \land <var:A0> = <nat:3> \land <var:A2> = <nat:1> \} $ . Moving on to the proceeding line contained in the series of instructions , the variable assignmet line letting $ <var:A2> * <var:g> $ into $ <var:A2>$ . This command moves the condition $ \{ <var:g> = <var:U> \land <var:A0> = <nat:3> \land <var:A2> = <nat:1> \} $ as the condition $ \{ <var:g> = <var:U> \land <var:A0> = <nat:3> \land <var:A2> = <nat:1> \cdot <var:U> \} $ . Advancing , the binding code \verb | <var:A2> := <var:A2> * <var:g> ; | . This command moves the condition $ \{ <var:g> = <var:U> \land <var:A0> = <nat:3> \land <var:A2> = <nat:1> \cdot <var:U> \} $ as the condition $ \{ <var:g> = <var:U> \land <var:A0> = <nat:3> \land <var:A2> = <nat:1> \cdot <var:U> ^ <nat:2> \} $ . This is known to be sound by the assignment law given by Hoare techniques . Paying attention to the following piece of code contained in our series of commands , the statement yielding $ <var:A2> $ as $ <var:y>$ . This command transfers $ \{ <var:g> = <var:U> \land <var:A0> = <nat:3> \land <var:A2> = <nat:1> \cdot <var:U> ^ <nat:2> \} $ to the postcondition $ \{ <var:g> = <var:U> \land <var:A0> = <nat:3> \land <var:y> = <nat:1> \cdot <var:U> ^ <nat:2> \} $ . Moving onward , the binding code \verb | <var:y> := <var:y> + <var:A0> | . This line takes $ \{ <var:g> = <var:U> \land <var:A0> = <nat:3> \land <var:y> = <nat:1> \cdot <var:U> ^ <nat:2> \} $ into $ \{ <var:g> = <var:U> \land <var:y> = <nat:1> \cdot <var:U> ^ <nat:2> + <nat:3> \} $ . This is given with the assignment rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A2> : string := " <var:A2> " . Definition <def:poly> := <var:A0> := <nat:3> ; <var:A2> := <nat:1> ; <var:A2> := <var:A2> * <var:g> ; <var:A2> := <var:A2> * <var:g> ; <var:y> := <var:A2> ; <var:y> := <var:y> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:g> = <var:U> }} <def:poly> {{ <var:y> = <nat:1> * <var:U> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:U> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:U> /\ <var:A0> = <nat:3> /\ <var:A2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:U> /\ <var:A0> = <nat:3> /\ <var:A2> = <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:U> /\ <var:A0> = <nat:3> /\ <var:A2> = <nat:1> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:U> /\ <var:A0> = <nat:3> /\ <var:y> = <nat:1> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:U> /\ <var:y> = <nat:1> * <var:U> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 