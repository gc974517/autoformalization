\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} as \begin{verbatim} <var:x0> := <nat:3> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:H> ; <var:V> := <var:x1> ; <var:V> := <var:V> + <var:x0> \end{verbatim} Assume --- given some positive integers $ <var:l> $ --- that we have $ <var:H> = <var:l> $ ahead of the evaluation of the code then $ <var:V> = <nat:7> * <var:l> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning produces : \begin{eqnarray} \{ <var:H> = <var:l> \} \\ <var:x0> := <nat:3> ; \\ \{ <var:H> = <var:l> \land <var:x0> = <nat:3> \} \\ <var:x1> := <nat:7> ; \\ \{ <var:H> = <var:l> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> \} \\ <var:x1> := <var:x1> * <var:H> ; \\ \{ <var:H> = <var:l> \land <var:x0> = <nat:3> \land <var:x1> = <nat:7> \cdot <var:l> \} \\ <var:V> := <var:x1> ; \\ \{ <var:H> = <var:l> \land <var:x0> = <nat:3> \land <var:V> = <nat:7> \cdot <var:l> \} \\ <var:V> := <var:V> + <var:x0> \\ \{ <var:H> = <var:l> \land <var:V> = <nat:7> \cdot <var:l> + <nat:3> \} \end{eqnarray} As a result , this program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:H> = <var:l> }} <var:x0> := <nat:3> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:H> ; <var:V> := <var:x1> ; <var:V> := <var:V> + <var:x0> {{ <var:V> = <nat:7> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:x0> = <nat:3> /\ <var:V> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:V> = <nat:7> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 