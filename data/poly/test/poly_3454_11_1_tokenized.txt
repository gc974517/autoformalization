\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:T1> := <var:A> ; <var:T2> := <var:T1> * <var:A> ; <var:T3> := <var:T2> * <var:A> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:6> ; <var:T2> := <var:T2> * <nat:2> ; <var:T3> := <var:T3> * <nat:6> ; <var:b> := <var:T3> <var:b> := <var:b> + <var:T2> <var:b> := <var:b> + <var:T1> <var:b> := <var:b> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Given $ <var:A> = <var:q> $ ahead of running the series of instructions , it holds that we see $ <var:b> = <nat:6> \times <var:q> ^ <nat:3> + <nat:2> \times <var:q> ^ <nat:2> + <nat:6> \times <var:q> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the code segment is evident with standard Hoare reasoning . Paying attention to the following command found in our code segment , we have the variable update code \verb | <var:T1> := <var:A> ; | . This transfers the condition $ \{ <var:A> = <var:q> \} $ to the condition $ \{ <var:A> = <var:q> \land <var:T1> = <var:q> \} $ . Taking a look at the next piece of code contained in the list of commands , the binding command giving $ <var:T1> * <var:A> $ as $ <var:T2>$ . This line redefines the condition $ \{ <var:A> = <var:q> \land <var:T1> = <var:q> \} $ into the condition $ \{ <var:A> = <var:q> \land <var:T1> = <var:q> \land <var:T2> = <var:q> ^ <nat:2> \} $ . This is given through the assignment inference rule found in standard Hoare logic . Further , we see the environment update command yielding $ <var:T2> * <var:A> $ toward $ <var:T3>$ . This advances the precondition $ \{ <var:A> = <var:q> \land <var:T1> = <var:q> \land <var:T2> = <var:q> ^ <nat:2> \} $ toward the condition $ \{ <var:A> = <var:q> \land <var:T1> = <var:q> \land <var:T2> = <var:q> ^ <nat:2> \land <var:T3> = <var:q> ^ <nat:3> \} $ . Immediately following , we have the binding line \verb | <var:T0> := <nat:3> ; | . This redefines the condition $ \{ <var:A> = <var:q> \land <var:T1> = <var:q> \land <var:T2> = <var:q> ^ <nat:2> \land <var:T3> = <var:q> ^ <nat:3> \} $ to $ \{ <var:A> = <var:q> \land <var:T1> = <var:q> \land <var:T2> = <var:q> ^ <nat:2> \land <var:T3> = <var:q> ^ <nat:3> \land <var:T0> = <nat:3> \} $ . This is given with the assignment scheme from standard Hoare logic . After , we have the variable assignmet line \verb | <var:T1> := <var:T1> * <nat:6> ; | . This moves the condition $ \{ <var:A> = <var:q> \land <var:T1> = <var:q> \land <var:T2> = <var:q> ^ <nat:2> \land <var:T3> = <var:q> ^ <nat:3> \land <var:T0> = <nat:3> \} $ to the postcondition $ \{ <var:A> = <var:q> \land <var:T1> = <nat:6> * <var:q> \land <var:T2> = <var:q> ^ <nat:2> \land <var:T3> = <var:q> ^ <nat:3> \land <var:T0> = <nat:3> \} $ . Advancing to the next step , we have the assignment line defining $ <var:T2> * <nat:2> $ toward $ <var:T2>$ . This forwards $ \{ <var:A> = <var:q> \land <var:T1> = <nat:6> * <var:q> \land <var:T2> = <var:q> ^ <nat:2> \land <var:T3> = <var:q> ^ <nat:3> \land <var:T0> = <nat:3> \} $ into the condition $ \{ <var:A> = <var:q> \land <var:T1> = <nat:6> * <var:q> \land <var:T2> = <nat:2> * <var:q> ^ <nat:2> \land <var:T3> = <var:q> ^ <nat:3> \land <var:T0> = <nat:3> \} $ . Jumping to the next piece of code in the code , we have the assignment command \verb | <var:T3> := <var:T3> * <nat:6> ; | . This advances $ \{ <var:A> = <var:q> \land <var:T1> = <nat:6> * <var:q> \land <var:T2> = <nat:2> * <var:q> ^ <nat:2> \land <var:T3> = <var:q> ^ <nat:3> \land <var:T0> = <nat:3> \} $ into the postcondition $ \{ <var:A> = <var:q> \land <var:T1> = <nat:6> * <var:q> \land <var:T2> = <nat:2> * <var:q> ^ <nat:2> \land <var:T3> = <nat:6> * <var:q> ^ <nat:3> \land <var:T0> = <nat:3> \} $ . This is shown to be logically sound by the assignment rule defined in standard Hoare reasoning . Next , we have the variable binding code assigning $ <var:T3$ as $ <var:b>$ . This takes $ \{ <var:A> = <var:q> \land <var:T1> = <nat:6> * <var:q> \land <var:T2> = <nat:2> * <var:q> ^ <nat:2> \land <var:T3> = <nat:6> * <var:q> ^ <nat:3> \land <var:T0> = <nat:3> \} $ toward the condition $ \{ <var:A> = <var:q> \land <var:T1> = <nat:6> * <var:q> \land <var:T2> = <nat:2> * <var:q> ^ <nat:2> \land <var:T0> = <nat:3> \land <var:b> = <nat:6> * <var:q> ^ <nat:3> \} $ . This is rigorously given through the assignment law in standard Hoare techniques . Jumping to the proceeding step in our segment of code , we have the variable update statement \verb | <var:b> := <var:b> + <var:T2> | . This transfers the condition $ \{ <var:A> = <var:q> \land <var:T1> = <nat:6> * <var:q> \land <var:T2> = <nat:2> * <var:q> ^ <nat:2> \land <var:T0> = <nat:3> \land <var:b> = <nat:6> * <var:q> ^ <nat:3> \} $ to the condition $ \{ <var:A> = <var:q> \land <var:T1> = <nat:6> * <var:q> \land <var:T0> = <nat:3> \land <var:b> = <nat:6> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> \} $ . This is given with the assignment scheme given by typical Hoare logic . Advancing to the proceeding bit of code found in the list of commands , we have the line \verb | <var:b> := <var:b> + <var:T1> | . This transfers the precondition $ \{ <var:A> = <var:q> \land <var:T1> = <nat:6> * <var:q> \land <var:T0> = <nat:3> \land <var:b> = <nat:6> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> \} $ as the condition $ \{ <var:A> = <var:q> \land <var:T0> = <nat:3> \land <var:b> = <nat:6> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:6> * <var:q> \} $ . Moving forward to the subsequent piece of code contained in the list of instructions , the command \verb | <var:b> := <var:b> + <var:T0> | . This forwards the precondition $ \{ <var:A> = <var:q> \land <var:T0> = <nat:3> \land <var:b> = <nat:6> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:6> * <var:q> \} $ toward the postcondition $ \{ <var:A> = <var:q> \land <var:b> = <nat:6> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T1> := <var:A> ; <var:T2> := <var:T1> * <var:A> ; <var:T3> := <var:T2> * <var:A> ; <var:T0> := <nat:3> ; <var:T1> := <var:T1> * <nat:6> ; <var:T2> := <var:T2> * <nat:2> ; <var:T3> := <var:T3> * <nat:6> ; <var:b> := <var:T3> <var:b> := <var:b> + <var:T2> <var:b> := <var:b> + <var:T1> <var:b> := <var:b> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:A> = <var:q> }} <def:poly> {{ <var:b> = <nat:6> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:T1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:T1> = <var:q> /\ <var:T2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:T1> = <var:q> /\ <var:T2> = <var:q> ^ <nat:2> /\ <var:T3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:T1> = <var:q> /\ <var:T2> = <var:q> ^ <nat:2> /\ <var:T3> = <var:q> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:T1> = <nat:6> * <var:q> /\ <var:T2> = <var:q> ^ <nat:2> /\ <var:T3> = <var:q> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:T1> = <nat:6> * <var:q> /\ <var:T2> = <nat:2> * <var:q> ^ <nat:2> /\ <var:T3> = <var:q> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:T1> = <nat:6> * <var:q> /\ <var:T2> = <nat:2> * <var:q> ^ <nat:2> /\ <var:T3> = <nat:6> * <var:q> ^ <nat:3> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:T1> = <nat:6> * <var:q> /\ <var:T2> = <nat:2> * <var:q> ^ <nat:2> /\ <var:T0> = <nat:3> /\ <var:b> = <nat:6> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:T1> = <nat:6> * <var:q> /\ <var:T0> = <nat:3> /\ <var:b> = <nat:6> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:T0> = <nat:3> /\ <var:b> = <nat:6> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:q> /\ <var:b> = <nat:6> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 