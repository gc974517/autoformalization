\begin{document} \begin{theorem} Consider the following set of instructions as \begin{verbatim} <var:d1> := <var:c> ; <var:d0> := <nat:2> ; <var:d1> := <var:d1> * <nat:1> ; <var:D> := <var:d1> <var:D> := <var:D> + <var:d0> \end{verbatim} Given ( letting natural numbers $ <var:i> $ ) it to be that $ <var:c> = <var:i> $ before evaluating our list of instructions it holds that $ <var:D> = <nat:1> \cdot <var:i> + <nat:2> $ once set of commands exits . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be seen with the following decorated set of commands . \begin{eqnarray} \{ <var:c> = <var:i> \} \\ <var:d1> := <var:c> ; \\ \{ <var:c> = <var:i> \land <var:d1> = <var:i> \} \\ <var:d0> := <nat:2> ; \\ \{ <var:c> = <var:i> \land <var:d1> = <var:i> \land <var:d0> = <nat:2> \} \\ <var:d1> := <var:d1> * <nat:1> ; \\ \{ <var:c> = <var:i> \land <var:d1> = <nat:1> \cdot <var:i> \land <var:d0> = <nat:2> \} \\ <var:D> := <var:d1> \\ \{ <var:c> = <var:i> \land <var:d0> = <nat:2> \land <var:D> = <nat:1> \cdot <var:i> \} \\ <var:D> := <var:D> + <var:d0> \\ \{ <var:c> = <var:i> \land <var:D> = <nat:1> \cdot <var:i> + <nat:2> \} \end{eqnarray} The application of Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:c> = <var:i> }} <var:d1> := <var:c> ; <var:d0> := <nat:2> ; <var:d1> := <var:d1> * <nat:1> ; <var:D> := <var:d1> <var:D> := <var:D> + <var:d0> {{ <var:D> = <nat:1> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:d1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:d1> = <var:i> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:d1> = <nat:1> * <var:i> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:d0> = <nat:2> /\ <var:D> = <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:D> = <nat:1> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 