\begin{document} \begin{theorem} Define a code such that \begin{verbatim} <var:E1> := <var:B> ; <var:E2> := <var:E1> * <var:B> ; <var:E3> := <var:E2> * <var:B> ; <var:E4> := <var:E3> * <var:B> ; <var:E0> := <nat:6> ; <var:E1> := <var:E1> * <nat:5> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:2> ; <var:E4> := <var:E4> * <nat:6> ; <var:x> := <var:E4> <var:x> := <var:x> + <var:E3> <var:x> := <var:x> + <var:E2> <var:x> := <var:x> + <var:E1> <var:x> := <var:x> + <var:E0> \end{verbatim} Allowing it to hold that $ <var:B> = <var:j> $ prior to the evaluation of this code it holds that we have $ <var:x> = <nat:6> \times <var:j> ^ <nat:4> + <nat:2> \times <var:j> ^ <nat:3> + <nat:2> \times <var:j> ^ <nat:2> + <nat:5> \times <var:j> + <nat:6> $ after set of instructions executes . \end{theorem} \begin{proof} The flow of logic for our set of instructions is demonstrated with Hoare techniques . Looking at the following command in the series of commands , we see the assignment command binding $ <var:B> $ into $ <var:E1>$ . This statement moves the condition $ \{ <var:B> = <var:j> \} $ into $ \{ <var:B> = <var:j> \land <var:E1> = <var:j> \} $ . This is shown by the assignment inference rule defined in usual Hoare techniques . Moving on to the upcoming step contained in the set of instructions , we have the binding statement letting $ <var:E1> * <var:B> $ to $ <var:E2>$ . This advances the condition $ \{ <var:B> = <var:j> \land <var:E1> = <var:j> \} $ to the postcondition $ \{ <var:B> = <var:j> \land <var:E1> = <var:j> \land <var:E2> = <var:j> ^ <nat:2> \} $ . Taking another step toward the upcoming command in our list of instructions , we have the variable binding code \verb | <var:E3> := <var:E2> * <var:B> ; | . This command takes $ \{ <var:B> = <var:j> \land <var:E1> = <var:j> \land <var:E2> = <var:j> ^ <nat:2> \} $ into $ \{ <var:B> = <var:j> \land <var:E1> = <var:j> \land <var:E2> = <var:j> ^ <nat:2> \land <var:E3> = <var:j> ^ <nat:3> \} $ . This is rigorously given by the assignment rule from standard Hoare reasoning . Further , we have the binding code \verb | <var:E4> := <var:E3> * <var:B> ; | . This line transfers the condition $ \{ <var:B> = <var:j> \land <var:E1> = <var:j> \land <var:E2> = <var:j> ^ <nat:2> \land <var:E3> = <var:j> ^ <nat:3> \} $ into $ \{ <var:B> = <var:j> \land <var:E1> = <var:j> \land <var:E2> = <var:j> ^ <nat:2> \land <var:E3> = <var:j> ^ <nat:3> \land <var:E4> = <var:j> ^ <nat:4> \} $ . Next , the variable update command \verb | <var:E0> := <nat:6> ; | . This redefines the condition $ \{ <var:B> = <var:j> \land <var:E1> = <var:j> \land <var:E2> = <var:j> ^ <nat:2> \land <var:E3> = <var:j> ^ <nat:3> \land <var:E4> = <var:j> ^ <nat:4> \} $ to the postcondition $ \{ <var:B> = <var:j> \land <var:E1> = <var:j> \land <var:E2> = <var:j> ^ <nat:2> \land <var:E3> = <var:j> ^ <nat:3> \land <var:E4> = <var:j> ^ <nat:4> \land <var:E0> = <nat:6> \} $ . This is sound through the assignment law obtained from typical Hoare techniques . Taking another step toward the following bit of code found in our series of commands , the environment update line letting $ <var:E1> * <nat:5> $ as $ <var:E1>$ . This line transfers the condition $ \{ <var:B> = <var:j> \land <var:E1> = <var:j> \land <var:E2> = <var:j> ^ <nat:2> \land <var:E3> = <var:j> ^ <nat:3> \land <var:E4> = <var:j> ^ <nat:4> \land <var:E0> = <nat:6> \} $ toward the postcondition $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E2> = <var:j> ^ <nat:2> \land <var:E3> = <var:j> ^ <nat:3> \land <var:E4> = <var:j> ^ <nat:4> \land <var:E0> = <nat:6> \} $ . Moving onward , we have the binding statement defining $ <var:E2> * <nat:2> $ into $ <var:E2>$ . This advances the condition $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E2> = <var:j> ^ <nat:2> \land <var:E3> = <var:j> ^ <nat:3> \land <var:E4> = <var:j> ^ <nat:4> \land <var:E0> = <nat:6> \} $ into the postcondition $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E2> = <nat:2> * <var:j> ^ <nat:2> \land <var:E3> = <var:j> ^ <nat:3> \land <var:E4> = <var:j> ^ <nat:4> \land <var:E0> = <nat:6> \} $ . Moving on to the proceeding bit of code found in the series of commands , the command \verb | <var:E3> := <var:E3> * <nat:2> ; | . This transfers $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E2> = <nat:2> * <var:j> ^ <nat:2> \land <var:E3> = <var:j> ^ <nat:3> \land <var:E4> = <var:j> ^ <nat:4> \land <var:E0> = <nat:6> \} $ as the condition $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E2> = <nat:2> * <var:j> ^ <nat:2> \land <var:E3> = <nat:2> * <var:j> ^ <nat:3> \land <var:E4> = <var:j> ^ <nat:4> \land <var:E0> = <nat:6> \} $ . This is known to be sound using the assignment scheme found in usual Hoare reasoning . Jumping to the proceeding step contained in the program , we have the binding statement assigning $ <var:E4> * <nat:6> $ toward $ <var:E4>$ . This transfers the precondition $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E2> = <nat:2> * <var:j> ^ <nat:2> \land <var:E3> = <nat:2> * <var:j> ^ <nat:3> \land <var:E4> = <var:j> ^ <nat:4> \land <var:E0> = <nat:6> \} $ into $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E2> = <nat:2> * <var:j> ^ <nat:2> \land <var:E3> = <nat:2> * <var:j> ^ <nat:3> \land <var:E4> = <nat:6> * <var:j> ^ <nat:4> \land <var:E0> = <nat:6> \} $ . This is rigorously given using the assignment scheme from usual Hoare reasoning . Advancing to the proceeding line of code seen in our code segment , the line \verb | <var:x> := <var:E4> | . This statement transfers $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E2> = <nat:2> * <var:j> ^ <nat:2> \land <var:E3> = <nat:2> * <var:j> ^ <nat:3> \land <var:E4> = <nat:6> * <var:j> ^ <nat:4> \land <var:E0> = <nat:6> \} $ toward the condition $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E2> = <nat:2> * <var:j> ^ <nat:2> \land <var:E3> = <nat:2> * <var:j> ^ <nat:3> \land <var:E0> = <nat:6> \land <var:x> = <nat:6> * <var:j> ^ <nat:4> \} $ . Moving forward , we see the variable binding command letting $ <var:x> + <var:E3$ into $ <var:x>$ . This statement forwards $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E2> = <nat:2> * <var:j> ^ <nat:2> \land <var:E3> = <nat:2> * <var:j> ^ <nat:3> \land <var:E0> = <nat:6> \land <var:x> = <nat:6> * <var:j> ^ <nat:4> \} $ into $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E2> = <nat:2> * <var:j> ^ <nat:2> \land <var:E0> = <nat:6> \land <var:x> = <nat:6> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> \} $ . This is rigorously given through the assignment law in usual Hoare logic . Advancing to the next step , we have the assignment statement giving $ <var:x> + <var:E2$ to $ <var:x>$ . This takes the precondition $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E2> = <nat:2> * <var:j> ^ <nat:2> \land <var:E0> = <nat:6> \land <var:x> = <nat:6> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> \} $ toward the postcondition $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E0> = <nat:6> \land <var:x> = <nat:6> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> \} $ . This is known to be sound by the assignment rule obtained from Hoare techniques . Looking at the subsequent step in our list of instructions , we see the assignment command \verb | <var:x> := <var:x> + <var:E1> | . This line takes the condition $ \{ <var:B> = <var:j> \land <var:E1> = <nat:5> * <var:j> \land <var:E0> = <nat:6> \land <var:x> = <nat:6> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> \} $ into the postcondition $ \{ <var:B> = <var:j> \land <var:E0> = <nat:6> \land <var:x> = <nat:6> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:5> * <var:j> \} $ . Moving on to the subsequent bit of code seen in our list of commands , we see the environment update code letting $ <var:x> + <var:E0$ toward $ <var:x>$ . This takes the condition $ \{ <var:B> = <var:j> \land <var:E0> = <nat:6> \land <var:x> = <nat:6> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:5> * <var:j> \} $ toward $ \{ <var:B> = <var:j> \land <var:x> = <nat:6> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:6> \} $ . This is shown using the assignment law in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <var:E4> : string := " <var:E4> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:B> = <var:j> }} <var:E1> := <var:B> ; <var:E2> := <var:E1> * <var:B> ; <var:E3> := <var:E2> * <var:B> ; <var:E4> := <var:E3> * <var:B> ; <var:E0> := <nat:6> ; <var:E1> := <var:E1> * <nat:5> ; <var:E2> := <var:E2> * <nat:2> ; <var:E3> := <var:E3> * <nat:2> ; <var:E4> := <var:E4> * <nat:6> ; <var:x> := <var:E4> <var:x> := <var:x> + <var:E3> <var:x> := <var:x> + <var:E2> <var:x> := <var:x> + <var:E1> <var:x> := <var:x> + <var:E0> {{ <var:x> = <nat:6> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:E1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:E1> = <var:j> /\ <var:E2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:E1> = <var:j> /\ <var:E2> = <var:j> ^ <nat:2> /\ <var:E3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:E1> = <var:j> /\ <var:E2> = <var:j> ^ <nat:2> /\ <var:E3> = <var:j> ^ <nat:3> /\ <var:E4> = <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:E1> = <var:j> /\ <var:E2> = <var:j> ^ <nat:2> /\ <var:E3> = <var:j> ^ <nat:3> /\ <var:E4> = <var:j> ^ <nat:4> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:E1> = <nat:5> * <var:j> /\ <var:E2> = <var:j> ^ <nat:2> /\ <var:E3> = <var:j> ^ <nat:3> /\ <var:E4> = <var:j> ^ <nat:4> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:E1> = <nat:5> * <var:j> /\ <var:E2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:E3> = <var:j> ^ <nat:3> /\ <var:E4> = <var:j> ^ <nat:4> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:E1> = <nat:5> * <var:j> /\ <var:E2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:E4> = <var:j> ^ <nat:4> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:E1> = <nat:5> * <var:j> /\ <var:E2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:E4> = <nat:6> * <var:j> ^ <nat:4> /\ <var:E0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:E1> = <nat:5> * <var:j> /\ <var:E2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:E3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:E0> = <nat:6> /\ <var:x> = <nat:6> * <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:E1> = <nat:5> * <var:j> /\ <var:E2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:E0> = <nat:6> /\ <var:x> = <nat:6> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:E1> = <nat:5> * <var:j> /\ <var:E0> = <nat:6> /\ <var:x> = <nat:6> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:E0> = <nat:6> /\ <var:x> = <nat:6> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:5> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:x> = <nat:6> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 