\begin{document} \begin{theorem} Define the following code as \begin{verbatim} <var:e0> := <nat:2> ; <var:e1> := <nat:4> ; <var:e1> := <var:e1> * <var:t> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:t> ; <var:e2> := <var:e2> * <var:t> ; <var:e3> := <nat:1> ; <var:e3> := <var:e3> * <var:t> ; <var:e3> := <var:e3> * <var:t> ; <var:e3> := <var:e3> * <var:t> ; <var:w> := <var:e3> ; <var:w> := <var:w> + <var:e2> ; <var:w> := <var:w> + <var:e1> ; <var:w> := <var:w> + <var:e0> \end{verbatim} Allowing that $ <var:t> = <var:s> $ prior to the execution of the set of commands then we see $ <var:w> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> $ when segment of code has executed . \end{theorem} \begin{proof} The flow of logic for this list of instructions is done by Hoare logic . Focusing on the proceeding line of code in the set of commands , we see the assignment line \verb | <var:e0> := <nat:2> ; | . This code forwards the condition $ \{ <var:t> = <var:s> \} $ to the condition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \} $ . Paying attention to the following bit of code in our list of commands , the variable update code \verb | <var:e1> := <nat:4> ; | . This line forwards the condition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \} $ into $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> \} $ . Considering the subsequent line in our code , the environment update code giving $ <var:e1> * <var:t> $ to $ <var:e1>$ . This statement takes the condition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> \} $ toward the postcondition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \} $ . Immediately following , we see the environment update line defining $ <nat:1> $ toward $ <var:e2>$ . This code advances the condition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \} $ into the postcondition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> \} $ . Next , we see the environment update code binding $ <var:e2> * <var:t> $ into $ <var:e2>$ . This statement advances the condition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> \} $ as $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> \} $ . Further , the variable binding statement \verb | <var:e2> := <var:e2> * <var:t> ; | . This command advances the condition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> \} $ to $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> ^ <nat:2> \} $ . This is known to be sound through the assignment scheme found in Hoare techniques . Stepping forward , we have the binding command giving $ <nat:1> $ toward $ <var:e3>$ . This code takes the condition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> ^ <nat:2> \} $ to the condition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> ^ <nat:2> \land <var:e3> = <nat:1> \} $ . Shifting focus toward the next command seen in our code segment , we have the binding command defining $ <var:e3> * <var:t> $ toward $ <var:e3>$ . This forwards the precondition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> ^ <nat:2> \land <var:e3> = <nat:1> \} $ to the condition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> ^ <nat:2> \land <var:e3> = <nat:1> * <var:s> \} $ . This is shown to be logically sound through the assignment rule of typical Hoare reasoning . Honing in on the upcoming step seen in the list of instructions , the variable assignmet code \verb | <var:e3> := <var:e3> * <var:t> ; | . This command moves the precondition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> ^ <nat:2> \land <var:e3> = <nat:1> * <var:s> \} $ toward $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> ^ <nat:2> \land <var:e3> = <nat:1> * <var:s> ^ <nat:2> \} $ . This is known to be sound through the assignment rule given by typical Hoare reasoning . Moving on to the next line of code in the program , we see the assignment statement yielding $ <var:e3> * <var:t> $ to $ <var:e3>$ . This statement forwards $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> ^ <nat:2> \land <var:e3> = <nat:1> * <var:s> ^ <nat:2> \} $ to the postcondition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> ^ <nat:2> \land <var:e3> = <nat:1> * <var:s> ^ <nat:3> \} $ . This is shown by the assignment scheme given by usual Hoare techniques . Advancing on , we have the binding statement \verb | <var:w> := <var:e3> ; | . This forwards $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> ^ <nat:2> \land <var:e3> = <nat:1> * <var:s> ^ <nat:3> \} $ toward $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> ^ <nat:2> \land <var:w> = <nat:1> * <var:s> ^ <nat:3> \} $ . This is known to be sound through the assignment inference rule defined in usual Hoare reasoning . Advancing to the subsequent line of code in the series of commands , the assignment line binding $ <var:w> + <var:e2> $ toward $ <var:w>$ . This command advances $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:e2> = <nat:1> * <var:s> ^ <nat:2> \land <var:w> = <nat:1> * <var:s> ^ <nat:3> \} $ into the condition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:w> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment rule given by usual Hoare reasoning . Taking a look at the proceeding step found in our program , we see the variable assignmet statement \verb | <var:w> := <var:w> + <var:e1> ; | . This moves the precondition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:e1> = <nat:4> * <var:s> \land <var:w> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> \} $ into the condition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:w> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> \} $ . Moving on to the next piece of code seen in the segment of code , we see the code defining $ <var:w> + <var:e0$ as $ <var:w>$ . This advances the condition $ \{ <var:t> = <var:s> \land <var:e0> = <nat:2> \land <var:w> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> \} $ toward the condition $ \{ <var:t> = <var:s> \land <var:w> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:t> = <var:s> }} <var:e0> := <nat:2> ; <var:e1> := <nat:4> ; <var:e1> := <var:e1> * <var:t> ; <var:e2> := <nat:1> ; <var:e2> := <var:e2> * <var:t> ; <var:e2> := <var:e2> * <var:t> ; <var:e3> := <nat:1> ; <var:e3> := <var:e3> * <var:t> ; <var:e3> := <var:e3> * <var:t> ; <var:e3> := <var:e3> * <var:t> ; <var:w> := <var:e3> ; <var:w> := <var:w> + <var:e2> ; <var:w> := <var:w> + <var:e1> ; <var:w> := <var:w> + <var:e0> {{ <var:w> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:s> /\ <var:e2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:s> /\ <var:e2> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:s> /\ <var:e2> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:s> /\ <var:e2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:e3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:s> /\ <var:e2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:e3> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:s> /\ <var:e2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:e3> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:s> /\ <var:e2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:e3> = <nat:1> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:s> /\ <var:e2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:w> = <nat:1> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:4> * <var:s> /\ <var:w> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:e0> = <nat:2> /\ <var:w> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:w> = <nat:1> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 