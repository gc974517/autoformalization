\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:u1> := <var:f> ; <var:u2> := <var:u1> * <var:f> ; <var:u3> := <var:u2> * <var:f> ; <var:u0> := <nat:1> ; <var:u3> := <var:u3> * <nat:3> ; <var:p> := <var:u3> <var:p> := <var:p> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> in \emph{Imp} . Assume that we have $ <var:f> = <var:t> $ prior to the evaluation of the series of instructions it follows that we see $ <var:p> = <nat:3> \cdot <var:t> ^ <nat:3> + <nat:1> $ once code is done executing . \end{theorem} \begin{proof} The flow of logic for the program can be demonstrated by Hoare techniques . Moving on , we have \verb | { <var:f> = <var:t> } <var:u1> := <var:f> { <var:f> = <var:t> \land <var:u1> = <var:t> } | , \verb | { <var:f> = <var:t> \land <var:u1> = <var:t> } <var:u2> := <var:u1> * <var:f> { <var:f> = <var:t> \land <var:u1> = <var:t> \land <var:u2> = <var:t> ^ <nat:2> } | , \verb | { <var:f> = <var:t> \land <var:u1> = <var:t> \land <var:u2> = <var:t> ^ <nat:2> } <var:u3> := <var:u2> * <var:f> { <var:f> = <var:t> \land <var:u1> = <var:t> \land <var:u2> = <var:t> ^ <nat:2> \land <var:u3> = <var:t> ^ <nat:3> } | and \verb | { <var:f> = <var:t> \land <var:u1> = <var:t> \land <var:u2> = <var:t> ^ <nat:2> \land <var:u3> = <var:t> ^ <nat:3> } <var:u0> := <nat:1> { <var:f> = <var:t> \land <var:u1> = <var:t> \land <var:u2> = <var:t> ^ <nat:2> \land <var:u3> = <var:t> ^ <nat:3> \land <var:u0> = <nat:1> } | . Moving on to the subsequent piece of code contained in the set of instructions , we see \verb | { <var:f> = <var:t> } <var:u1> := <var:f> { <var:f> = <var:t> \land <var:u1> = <var:t> } | . Stepping through , we have \verb | { <var:f> = <var:t> } <var:u1> := <var:f> { <var:f> = <var:t> \land <var:u1> = <var:t> } | . This is rigorously given through the scheme obtained from typical Hoare techniques . Moving on to the subsequent line of code in the segment of code , we see \verb | { <var:f> = <var:t> } <var:u1> := <var:f> { <var:f> = <var:t> \land <var:u1> = <var:t> } | . This is shown to be logically sound by the assignment scheme from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <def:poly> := <var:u1> := <var:f> ; <var:u2> := <var:u1> * <var:f> ; <var:u3> := <var:u2> * <var:f> ; <var:u0> := <nat:1> ; <var:u3> := <var:u3> * <nat:3> ; <var:p> := <var:u3> <var:p> := <var:p> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:f> = <var:t> }} <def:poly> {{ <var:p> = <nat:3> * <var:t> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:t> /\ <var:u1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:t> /\ <var:u1> = <var:t> /\ <var:u2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:t> /\ <var:u1> = <var:t> /\ <var:u2> = <var:t> ^ <nat:2> /\ <var:u3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:t> /\ <var:u1> = <var:t> /\ <var:u2> = <var:t> ^ <nat:2> /\ <var:u3> = <var:t> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:t> /\ <var:u1> = <var:t> /\ <var:u2> = <var:t> ^ <nat:2> /\ <var:u3> = <nat:3> * <var:t> ^ <nat:3> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:t> /\ <var:u1> = <var:t> /\ <var:u2> = <var:t> ^ <nat:2> /\ <var:u0> = <nat:1> /\ <var:p> = <nat:3> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:t> /\ <var:p> = <nat:3> * <var:t> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 