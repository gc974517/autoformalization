\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as \begin{verbatim} <var:L1> := <var:u> ; <var:L2> := <var:L1> * <var:u> ; <var:L3> := <var:L2> * <var:u> ; <var:L0> := <nat:1> ; <var:L1> := <var:L1> * <nat:2> ; <var:L2> := <var:L2> * <nat:1> ; <var:L3> := <var:L3> * <nat:6> ; <var:H> := <var:L3> <var:H> := <var:H> + <var:L2> <var:H> := <var:H> + <var:L1> <var:H> := <var:H> + <var:L0> \end{verbatim} Assuming it to hold that $ <var:u> = <var:b> $ ahead of interpreting the set of commands , then $ <var:H> = <nat:6> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:1> $ . \end{theorem} \begin{proof} Using usual Hoare techniques yields : \begin{eqnarray} \{ <var:u> = <var:b> \} \\ <var:L1> := <var:u> ; \\ \{ <var:u> = <var:b> \land <var:L1> = <var:b> \} \\ <var:L2> := <var:L1> * <var:u> ; \\ \{ <var:u> = <var:b> \land <var:L1> = <var:b> \land <var:L2> = <var:b> ^ <nat:2> \} \\ <var:L3> := <var:L2> * <var:u> ; \\ \{ <var:u> = <var:b> \land <var:L1> = <var:b> \land <var:L2> = <var:b> ^ <nat:2> \land <var:L3> = <var:b> ^ <nat:3> \} \\ <var:L0> := <nat:1> ; \\ \{ <var:u> = <var:b> \land <var:L1> = <var:b> \land <var:L2> = <var:b> ^ <nat:2> \land <var:L3> = <var:b> ^ <nat:3> \land <var:L0> = <nat:1> \} \\ <var:L1> := <var:L1> * <nat:2> ; \\ \{ <var:u> = <var:b> \land <var:L1> = <nat:2> \cdot <var:b> \land <var:L2> = <var:b> ^ <nat:2> \land <var:L3> = <var:b> ^ <nat:3> \land <var:L0> = <nat:1> \} \\ <var:L2> := <var:L2> * <nat:1> ; \\ \{ <var:u> = <var:b> \land <var:L1> = <nat:2> \cdot <var:b> \land <var:L2> = <nat:1> \cdot <var:b> ^ <nat:2> \land <var:L3> = <var:b> ^ <nat:3> \land <var:L0> = <nat:1> \} \\ <var:L3> := <var:L3> * <nat:6> ; \\ \{ <var:u> = <var:b> \land <var:L1> = <nat:2> \cdot <var:b> \land <var:L2> = <nat:1> \cdot <var:b> ^ <nat:2> \land <var:L3> = <nat:6> \cdot <var:b> ^ <nat:3> \land <var:L0> = <nat:1> \} \\ <var:H> := <var:L3> \\ \{ <var:u> = <var:b> \land <var:L1> = <nat:2> \cdot <var:b> \land <var:L2> = <nat:1> \cdot <var:b> ^ <nat:2> \land <var:L0> = <nat:1> \land <var:H> = <nat:6> \cdot <var:b> ^ <nat:3> \} \\ <var:H> := <var:H> + <var:L2> \\ \{ <var:u> = <var:b> \land <var:L1> = <nat:2> \cdot <var:b> \land <var:L0> = <nat:1> \land <var:H> = <nat:6> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:L1> \\ \{ <var:u> = <var:b> \land <var:L0> = <nat:1> \land <var:H> = <nat:6> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> \} \\ <var:H> := <var:H> + <var:L0> \\ \{ <var:u> = <var:b> \land <var:H> = <nat:6> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:1> \} \end{eqnarray} Therefore , our code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:u> = <var:b> }} <var:L1> := <var:u> ; <var:L2> := <var:L1> * <var:u> ; <var:L3> := <var:L2> * <var:u> ; <var:L0> := <nat:1> ; <var:L1> := <var:L1> * <nat:2> ; <var:L2> := <var:L2> * <nat:1> ; <var:L3> := <var:L3> * <nat:6> ; <var:H> := <var:L3> <var:H> := <var:H> + <var:L2> <var:H> := <var:H> + <var:L1> <var:H> := <var:H> + <var:L0> {{ <var:H> = <nat:6> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:L1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:L1> = <var:b> /\ <var:L2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:L1> = <var:b> /\ <var:L2> = <var:b> ^ <nat:2> /\ <var:L3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:L1> = <var:b> /\ <var:L2> = <var:b> ^ <nat:2> /\ <var:L3> = <var:b> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:L1> = <nat:2> * <var:b> /\ <var:L2> = <var:b> ^ <nat:2> /\ <var:L3> = <var:b> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:L1> = <nat:2> * <var:b> /\ <var:L2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:L3> = <var:b> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:L1> = <nat:2> * <var:b> /\ <var:L2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:L3> = <nat:6> * <var:b> ^ <nat:3> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:L1> = <nat:2> * <var:b> /\ <var:L2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:L0> = <nat:1> /\ <var:H> = <nat:6> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:L1> = <nat:2> * <var:b> /\ <var:L0> = <nat:1> /\ <var:H> = <nat:6> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:L0> = <nat:1> /\ <var:H> = <nat:6> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:b> /\ <var:H> = <nat:6> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 