\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j1> := <var:V> ; <var:j0> := <nat:4> ; <var:j1> := <var:j1> * <nat:4> ; <var:n> := <var:j1> <var:n> := <var:n> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:V> = <var:R> $ before evaluating our set of instructions it follows that we see $ <var:n> = <nat:4> * <var:R> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this program is evident by the below decorated program . \begin{eqnarray} \{ <var:V> = <var:R> \} \\ <var:j1> := <var:V> ; \\ \{ <var:V> = <var:R> \land <var:j1> = <var:R> \} \\ <var:j0> := <nat:4> ; \\ \{ <var:V> = <var:R> \land <var:j1> = <var:R> \land <var:j0> = <nat:4> \} \\ <var:j1> := <var:j1> * <nat:4> ; \\ \{ <var:V> = <var:R> \land <var:j1> = <nat:4> \cdot <var:R> \land <var:j0> = <nat:4> \} \\ <var:n> := <var:j1> \\ \{ <var:V> = <var:R> \land <var:j0> = <nat:4> \land <var:n> = <nat:4> \cdot <var:R> \} \\ <var:n> := <var:n> + <var:j0> \\ \{ <var:V> = <var:R> \land <var:n> = <nat:4> \cdot <var:R> + <nat:4> \} \end{eqnarray} The application of standard Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j1> := <var:V> ; <var:j0> := <nat:4> ; <var:j1> := <var:j1> * <nat:4> ; <var:n> := <var:j1> <var:n> := <var:n> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:V> = <var:R> }} <def:poly> {{ <var:n> = <nat:4> * <var:R> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:j1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:j1> = <var:R> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:j1> = <nat:4> * <var:R> /\ <var:j0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:j0> = <nat:4> /\ <var:n> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:R> /\ <var:n> = <nat:4> * <var:R> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 