\begin{document} \begin{theorem} Take a set of commands such that \begin{verbatim} <var:v0> := <nat:9> ; <var:v1> := <nat:1> ; <var:v1> := <var:v1> * <var:Y> ; <var:v2> := <nat:5> ; <var:v2> := <var:v2> * <var:Y> ; <var:v2> := <var:v2> * <var:Y> ; <var:E> := <var:v2> ; <var:E> := <var:E> + <var:v1> ; <var:E> := <var:E> + <var:v0> \end{verbatim} Given it to be that $ <var:Y> = <var:X> $ , for integers $ <var:X> $ , before executing the list of commands it holds that $ <var:E> = <nat:5> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:9> $ . \end{theorem} \begin{proof} Let this decorated code segment . \begin{eqnarray} \{ <var:Y> = <var:X> \} \\ <var:v0> := <nat:9> ; \\ \{ <var:Y> = <var:X> \land <var:v0> = <nat:9> \} \\ <var:v1> := <nat:1> ; \\ \{ <var:Y> = <var:X> \land <var:v0> = <nat:9> \land <var:v1> = <nat:1> \} \\ <var:v1> := <var:v1> * <var:Y> ; \\ \{ <var:Y> = <var:X> \land <var:v0> = <nat:9> \land <var:v1> = <nat:1> \times <var:X> \} \\ <var:v2> := <nat:5> ; \\ \{ <var:Y> = <var:X> \land <var:v0> = <nat:9> \land <var:v1> = <nat:1> \times <var:X> \land <var:v2> = <nat:5> \} \\ <var:v2> := <var:v2> * <var:Y> ; \\ \{ <var:Y> = <var:X> \land <var:v0> = <nat:9> \land <var:v1> = <nat:1> \times <var:X> \land <var:v2> = <nat:5> \times <var:X> \} \\ <var:v2> := <var:v2> * <var:Y> ; \\ \{ <var:Y> = <var:X> \land <var:v0> = <nat:9> \land <var:v1> = <nat:1> \times <var:X> \land <var:v2> = <nat:5> \times <var:X> ^ <nat:2> \} \\ <var:E> := <var:v2> ; \\ \{ <var:Y> = <var:X> \land <var:v0> = <nat:9> \land <var:v1> = <nat:1> \times <var:X> \land <var:E> = <nat:5> \times <var:X> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:v1> ; \\ \{ <var:Y> = <var:X> \land <var:v0> = <nat:9> \land <var:E> = <nat:5> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> \} \\ <var:E> := <var:E> + <var:v0> \\ \{ <var:Y> = <var:X> \land <var:E> = <nat:5> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:9> \} \end{eqnarray} Using standard Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:Y> = <var:X> }} <var:v0> := <nat:9> ; <var:v1> := <nat:1> ; <var:v1> := <var:v1> * <var:Y> ; <var:v2> := <nat:5> ; <var:v2> := <var:v2> * <var:Y> ; <var:v2> := <var:v2> * <var:Y> ; <var:E> := <var:v2> ; <var:E> := <var:E> + <var:v1> ; <var:E> := <var:E> + <var:v0> {{ <var:E> = <nat:5> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:X> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:X> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:X> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:X> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:1> * <var:X> /\ <var:v2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:X> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:1> * <var:X> /\ <var:v2> = <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:X> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:1> * <var:X> /\ <var:v2> = <nat:5> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:X> /\ <var:v0> = <nat:9> /\ <var:v1> = <nat:1> * <var:X> /\ <var:E> = <nat:5> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:X> /\ <var:v0> = <nat:9> /\ <var:E> = <nat:5> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:X> /\ <var:E> = <nat:5> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 