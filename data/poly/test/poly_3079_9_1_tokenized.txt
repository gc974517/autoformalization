\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:g1> := <var:U> ; <var:g2> := <var:g1> * <var:U> ; <var:g3> := <var:g2> * <var:U> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:3> ; <var:g3> := <var:g3> * <nat:3> ; <var:z> := <var:g3> <var:z> := <var:z> + <var:g1> <var:z> := <var:z> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:U> = <var:N> $ prior to evaluating this segment of code , then we see $ <var:z> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:N> \} \\ <var:g1> := <var:U> ; \\ \{ <var:U> = <var:N> \land <var:g1> = <var:N> \} \\ <var:g2> := <var:g1> * <var:U> ; \\ \{ <var:U> = <var:N> \land <var:g1> = <var:N> \land <var:g2> = <var:N> ^ <nat:2> \} \\ <var:g3> := <var:g2> * <var:U> ; \\ \{ <var:U> = <var:N> \land <var:g1> = <var:N> \land <var:g2> = <var:N> ^ <nat:2> \land <var:g3> = <var:N> ^ <nat:3> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:U> = <var:N> \land <var:g1> = <var:N> \land <var:g2> = <var:N> ^ <nat:2> \land <var:g3> = <var:N> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ <var:g1> := <var:g1> * <nat:3> ; \\ \{ <var:U> = <var:N> \land <var:g1> = <nat:3> * <var:N> \land <var:g2> = <var:N> ^ <nat:2> \land <var:g3> = <var:N> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ <var:g3> := <var:g3> * <nat:3> ; \\ \{ <var:U> = <var:N> \land <var:g1> = <nat:3> * <var:N> \land <var:g2> = <var:N> ^ <nat:2> \land <var:g3> = <nat:3> * <var:N> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ <var:z> := <var:g3> \\ \{ <var:U> = <var:N> \land <var:g1> = <nat:3> * <var:N> \land <var:g2> = <var:N> ^ <nat:2> \land <var:g0> = <nat:2> \land <var:z> = <nat:3> * <var:N> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:g1> \\ \{ <var:U> = <var:N> \land <var:g0> = <nat:2> \land <var:z> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> \} \\ <var:z> := <var:z> + <var:g0> \\ \{ <var:U> = <var:N> \land <var:z> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> + <nat:2> \} \end{eqnarray} The application of usual Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g1> := <var:U> ; <var:g2> := <var:g1> * <var:U> ; <var:g3> := <var:g2> * <var:U> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:3> ; <var:g3> := <var:g3> * <nat:3> ; <var:z> := <var:g3> <var:z> := <var:z> + <var:g1> <var:z> := <var:z> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:U> = <var:N> }} <def:poly> {{ <var:z> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:g1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:g1> = <var:N> /\ <var:g2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:g1> = <var:N> /\ <var:g2> = <var:N> ^ <nat:2> /\ <var:g3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:g1> = <var:N> /\ <var:g2> = <var:N> ^ <nat:2> /\ <var:g3> = <var:N> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:g1> = <nat:3> * <var:N> /\ <var:g2> = <var:N> ^ <nat:2> /\ <var:g3> = <var:N> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:g1> = <nat:3> * <var:N> /\ <var:g2> = <var:N> ^ <nat:2> /\ <var:g3> = <nat:3> * <var:N> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:g1> = <nat:3> * <var:N> /\ <var:g2> = <var:N> ^ <nat:2> /\ <var:g0> = <nat:2> /\ <var:z> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:g0> = <nat:2> /\ <var:z> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:N> /\ <var:z> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 