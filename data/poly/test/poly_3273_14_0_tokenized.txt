\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l0> := <nat:3> ; <var:l1> := <nat:4> ; <var:l1> := <var:l1> * <var:K> ; <var:l2> := <nat:4> ; <var:l2> := <var:l2> * <var:K> ; <var:l2> := <var:l2> * <var:K> ; <var:l3> := <nat:3> ; <var:l3> := <var:l3> * <var:K> ; <var:l3> := <var:l3> * <var:K> ; <var:l3> := <var:l3> * <var:K> ; <var:U> := <var:l3> ; <var:U> := <var:U> + <var:l2> ; <var:U> := <var:U> + <var:l1> ; <var:U> := <var:U> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:K> = <var:n> $ prior to the evaluation of the segment of code it follows that we see $ <var:U> = <nat:3> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic yields : \begin{eqnarray} \{ <var:K> = <var:n> \} \\ <var:l0> := <nat:3> ; \\ \{ <var:K> = <var:n> \land <var:l0> = <nat:3> \} \\ <var:l1> := <nat:4> ; \\ \{ <var:K> = <var:n> \land <var:l0> = <nat:3> \land <var:l1> = <nat:4> \} \end{eqnarray} Furthering the evaluation of our set of instructions yields : \begin{eqnarray} <var:l1> := <var:l1> * <var:K> ; \\ \{ <var:K> = <var:n> \land <var:l0> = <nat:3> \land <var:l1> = <nat:4> \cdot <var:n> \} \\ <var:l2> := <nat:4> ; \\ \{ <var:K> = <var:n> \land <var:l0> = <nat:3> \land <var:l1> = <nat:4> \cdot <var:n> \land <var:l2> = <nat:4> \} \\ <var:l2> := <var:l2> * <var:K> ; \\ \{ <var:K> = <var:n> \land <var:l0> = <nat:3> \land <var:l1> = <nat:4> \cdot <var:n> \land <var:l2> = <nat:4> \cdot <var:n> \} \end{eqnarray} Allowing the execution of this code segment returns : \begin{eqnarray} <var:l2> := <var:l2> * <var:K> ; \\ \{ <var:K> = <var:n> \land <var:l0> = <nat:3> \land <var:l1> = <nat:4> \cdot <var:n> \land <var:l2> = <nat:4> \cdot <var:n> ^ <nat:2> \} \\ <var:l3> := <nat:3> ; \\ \{ <var:K> = <var:n> \land <var:l0> = <nat:3> \land <var:l1> = <nat:4> \cdot <var:n> \land <var:l2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:l3> = <nat:3> \} \\ <var:l3> := <var:l3> * <var:K> ; \\ \{ <var:K> = <var:n> \land <var:l0> = <nat:3> \land <var:l1> = <nat:4> \cdot <var:n> \land <var:l2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:l3> = <nat:3> \cdot <var:n> \} \\ <var:l3> := <var:l3> * <var:K> ; \\ \{ <var:K> = <var:n> \land <var:l0> = <nat:3> \land <var:l1> = <nat:4> \cdot <var:n> \land <var:l2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:l3> = <nat:3> \cdot <var:n> ^ <nat:2> \} \\ <var:l3> := <var:l3> * <var:K> ; \\ \{ <var:K> = <var:n> \land <var:l0> = <nat:3> \land <var:l1> = <nat:4> \cdot <var:n> \land <var:l2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:l3> = <nat:3> \cdot <var:n> ^ <nat:3> \} \\ <var:U> := <var:l3> ; \\ \{ <var:K> = <var:n> \land <var:l0> = <nat:3> \land <var:l1> = <nat:4> \cdot <var:n> \land <var:l2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:U> = <nat:3> \cdot <var:n> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:l2> ; \\ \{ <var:K> = <var:n> \land <var:l0> = <nat:3> \land <var:l1> = <nat:4> \cdot <var:n> \land <var:U> = <nat:3> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:l1> ; \\ \{ <var:K> = <var:n> \land <var:l0> = <nat:3> \land <var:U> = <nat:3> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> \} \\ <var:U> := <var:U> + <var:l0> \\ \{ <var:K> = <var:n> \land <var:U> = <nat:3> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + <nat:3> \} \end{eqnarray} Continuing running this program returns : \begin{eqnarray} \end{eqnarray} Considering the preceding argument , our list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l0> := <nat:3> ; <var:l1> := <nat:4> ; <var:l1> := <var:l1> * <var:K> ; <var:l2> := <nat:4> ; <var:l2> := <var:l2> * <var:K> ; <var:l2> := <var:l2> * <var:K> ; <var:l3> := <nat:3> ; <var:l3> := <var:l3> * <var:K> ; <var:l3> := <var:l3> * <var:K> ; <var:l3> := <var:l3> * <var:K> ; <var:U> := <var:l3> ; <var:U> := <var:U> + <var:l2> ; <var:U> := <var:U> + <var:l1> ; <var:U> := <var:U> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:K> = <var:n> }} <def:poly> {{ <var:U> = <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:4> * <var:n> /\ <var:l2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:4> * <var:n> /\ <var:l2> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:4> * <var:n> /\ <var:l2> = <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:4> * <var:n> /\ <var:l2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:l3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:4> * <var:n> /\ <var:l2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:l3> = <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:4> * <var:n> /\ <var:l2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:l3> = <nat:3> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:4> * <var:n> /\ <var:l2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:l3> = <nat:3> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:4> * <var:n> /\ <var:l2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:U> = <nat:3> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:l0> = <nat:3> /\ <var:l1> = <nat:4> * <var:n> /\ <var:U> = <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:l0> = <nat:3> /\ <var:U> = <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:U> = <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 