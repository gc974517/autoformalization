\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:W1> := <var:D> ; <var:W2> := <var:W1> * <var:D> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:2> ; <var:W2> := <var:W2> * <nat:8> ; <var:Q> := <var:W2> <var:Q> := <var:Q> + <var:W1> <var:Q> := <var:Q> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:D> = <var:K> $ before interpreting this series of commands it must be that we see $ <var:Q> = <nat:8> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this list of instructions is evident by usual Hoare logic . Jumping to the next line found in our series of instructions , we see the variable assignmet statement \verb | <var:W1> := <var:D> ; | . This line transfers the precondition $ \{ <var:D> = <var:K> \} $ as the condition $ \{ <var:D> = <var:K> \land <var:W1> = <var:K> \} $ . Taking a look at the upcoming command seen in the code , we have the command \verb | <var:W2> := <var:W1> * <var:D> ; | . This advances the condition $ \{ <var:D> = <var:K> \land <var:W1> = <var:K> \} $ toward $ \{ <var:D> = <var:K> \land <var:W1> = <var:K> \land <var:W2> = <var:K> ^ <nat:2> \} $ . This is shown by the assignment rule given in Hoare reasoning . Honing in on the next command contained in the segment of code , we see the variable assignmet code \verb | <var:W0> := <nat:1> ; | . This statement moves the condition $ \{ <var:D> = <var:K> \land <var:W1> = <var:K> \land <var:W2> = <var:K> ^ <nat:2> \} $ toward $ \{ <var:D> = <var:K> \land <var:W1> = <var:K> \land <var:W2> = <var:K> ^ <nat:2> \land <var:W0> = <nat:1> \} $ . This is guaranteed by the assignment law obtained from usual Hoare reasoning . Moving on to the subsequent command contained in the series of commands , the variable update command assigning $ <var:W1> * <nat:2> $ to $ <var:W1>$ . This statement advances the condition $ \{ <var:D> = <var:K> \land <var:W1> = <var:K> \land <var:W2> = <var:K> ^ <nat:2> \land <var:W0> = <nat:1> \} $ to the postcondition $ \{ <var:D> = <var:K> \land <var:W1> = <nat:2> * <var:K> \land <var:W2> = <var:K> ^ <nat:2> \land <var:W0> = <nat:1> \} $ . Looking at the proceeding piece of code found in our code segment , we have the variable binding line \verb | <var:W2> := <var:W2> * <nat:8> ; | . This statement takes $ \{ <var:D> = <var:K> \land <var:W1> = <nat:2> * <var:K> \land <var:W2> = <var:K> ^ <nat:2> \land <var:W0> = <nat:1> \} $ to the condition $ \{ <var:D> = <var:K> \land <var:W1> = <nat:2> * <var:K> \land <var:W2> = <nat:8> * <var:K> ^ <nat:2> \land <var:W0> = <nat:1> \} $ . This is guaranteed with the assignment inference rule given by standard Hoare logic . Honing in on the upcoming piece of code contained in our code segment , we have the variable update line letting $ <var:W2$ into $ <var:Q>$ . This moves the precondition $ \{ <var:D> = <var:K> \land <var:W1> = <nat:2> * <var:K> \land <var:W2> = <nat:8> * <var:K> ^ <nat:2> \land <var:W0> = <nat:1> \} $ into the condition $ \{ <var:D> = <var:K> \land <var:W1> = <nat:2> * <var:K> \land <var:W0> = <nat:1> \land <var:Q> = <nat:8> * <var:K> ^ <nat:2> \} $ . This is known to be sound by the assignment inference rule found in standard Hoare reasoning . Following , we see the variable assignmet line \verb | <var:Q> := <var:Q> + <var:W1> | . This command advances the precondition $ \{ <var:D> = <var:K> \land <var:W1> = <nat:2> * <var:K> \land <var:W0> = <nat:1> \land <var:Q> = <nat:8> * <var:K> ^ <nat:2> \} $ to the postcondition $ \{ <var:D> = <var:K> \land <var:W0> = <nat:1> \land <var:Q> = <nat:8> * <var:K> ^ <nat:2> + <nat:2> * <var:K> \} $ . This is guaranteed with the assignment inference rule defined by typical Hoare reasoning . Now , we see the assignment command yielding $ <var:Q> + <var:W0$ into $ <var:Q>$ . This redefines $ \{ <var:D> = <var:K> \land <var:W0> = <nat:1> \land <var:Q> = <nat:8> * <var:K> ^ <nat:2> + <nat:2> * <var:K> \} $ to the condition $ \{ <var:D> = <var:K> \land <var:Q> = <nat:8> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W1> := <var:D> ; <var:W2> := <var:W1> * <var:D> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:2> ; <var:W2> := <var:W2> * <nat:8> ; <var:Q> := <var:W2> <var:Q> := <var:Q> + <var:W1> <var:Q> := <var:Q> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:D> = <var:K> }} <def:poly> {{ <var:Q> = <nat:8> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:W1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:W1> = <var:K> /\ <var:W2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:W1> = <var:K> /\ <var:W2> = <var:K> ^ <nat:2> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:W1> = <nat:2> * <var:K> /\ <var:W2> = <var:K> ^ <nat:2> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:W1> = <nat:2> * <var:K> /\ <var:W2> = <nat:8> * <var:K> ^ <nat:2> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:W1> = <nat:2> * <var:K> /\ <var:W0> = <nat:1> /\ <var:Q> = <nat:8> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:W0> = <nat:1> /\ <var:Q> = <nat:8> * <var:K> ^ <nat:2> + <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:K> /\ <var:Q> = <nat:8> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 