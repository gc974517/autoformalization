\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:u1> := <var:Y> ; <var:u2> := <var:u1> * <var:Y> ; <var:u3> := <var:u2> * <var:Y> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:1> ; <var:u2> := <var:u2> * <nat:9> ; <var:u3> := <var:u3> * <nat:2> ; <var:y> := <var:u3> <var:y> := <var:y> + <var:u2> <var:y> := <var:y> + <var:u1> <var:y> := <var:y> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Assume letting positive integers $ <var:N> $ $ <var:Y> = <var:N> $ ahead of the execution of our program , then we see $ <var:y> = <nat:2> \times <var:N> ^ <nat:3> + <nat:9> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:4> $ once list of instructions has finished executing . \end{theorem} \begin{proof} The proof of this set of instructions is shown through Hoare techniques . Considering the proceeding bit of code contained in the series of commands , we see the command \verb | <var:u1> := <var:Y> ; | . This command moves $ \{ <var:Y> = <var:N> \} $ to the postcondition $ \{ <var:Y> = <var:N> \land <var:u1> = <var:N> \} $ . This is deduced by the assignment law of usual Hoare logic . Focusing on the following line contained in our series of instructions , we have the assignment line binding $ <var:u1> * <var:Y> $ as $ <var:u2>$ . This redefines $ \{ <var:Y> = <var:N> \land <var:u1> = <var:N> \} $ to the condition $ \{ <var:Y> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \} $ . This is ensured with the assignment inference rule obtained from usual Hoare techniques . Honing in on the upcoming statement in the set of instructions , we see the environment update line \verb | <var:u3> := <var:u2> * <var:Y> ; | . This line advances the precondition $ \{ <var:Y> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \} $ into the postcondition $ \{ <var:Y> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \} $ . Immediately after , we see the assignment line defining $ <nat:4> $ to $ <var:u0>$ . This command forwards $ \{ <var:Y> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \} $ as the postcondition $ \{ <var:Y> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \land <var:u0> = <nat:4> \} $ . Stepping through , we have the variable assignmet line \verb | <var:u1> := <var:u1> * <nat:1> ; | . This line advances the condition $ \{ <var:Y> = <var:N> \land <var:u1> = <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \land <var:u0> = <nat:4> \} $ toward the postcondition $ \{ <var:Y> = <var:N> \land <var:u1> = <nat:1> * <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \land <var:u0> = <nat:4> \} $ . This is rigorously given by the assignment rule given in Hoare logic . Immediately after , we see the variable assignmet line \verb | <var:u2> := <var:u2> * <nat:9> ; | . This statement forwards the condition $ \{ <var:Y> = <var:N> \land <var:u1> = <nat:1> * <var:N> \land <var:u2> = <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \land <var:u0> = <nat:4> \} $ toward the condition $ \{ <var:Y> = <var:N> \land <var:u1> = <nat:1> * <var:N> \land <var:u2> = <nat:9> * <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \land <var:u0> = <nat:4> \} $ . This is deduced by the assignment law from standard Hoare logic . Paying attention to the next line of code found in our code , we have the environment update line \verb | <var:u3> := <var:u3> * <nat:2> ; | . This command advances $ \{ <var:Y> = <var:N> \land <var:u1> = <nat:1> * <var:N> \land <var:u2> = <nat:9> * <var:N> ^ <nat:2> \land <var:u3> = <var:N> ^ <nat:3> \land <var:u0> = <nat:4> \} $ to the postcondition $ \{ <var:Y> = <var:N> \land <var:u1> = <nat:1> * <var:N> \land <var:u2> = <nat:9> * <var:N> ^ <nat:2> \land <var:u3> = <nat:2> * <var:N> ^ <nat:3> \land <var:u0> = <nat:4> \} $ . Advancing , the binding command defining $ <var:u3$ into $ <var:y>$ . This redefines the precondition $ \{ <var:Y> = <var:N> \land <var:u1> = <nat:1> * <var:N> \land <var:u2> = <nat:9> * <var:N> ^ <nat:2> \land <var:u3> = <nat:2> * <var:N> ^ <nat:3> \land <var:u0> = <nat:4> \} $ as the postcondition $ \{ <var:Y> = <var:N> \land <var:u1> = <nat:1> * <var:N> \land <var:u2> = <nat:9> * <var:N> ^ <nat:2> \land <var:u0> = <nat:4> \land <var:y> = <nat:2> * <var:N> ^ <nat:3> \} $ . Moving onward , we have the assignment line \verb | <var:y> := <var:y> + <var:u2> | . This takes the precondition $ \{ <var:Y> = <var:N> \land <var:u1> = <nat:1> * <var:N> \land <var:u2> = <nat:9> * <var:N> ^ <nat:2> \land <var:u0> = <nat:4> \land <var:y> = <nat:2> * <var:N> ^ <nat:3> \} $ toward the postcondition $ \{ <var:Y> = <var:N> \land <var:u1> = <nat:1> * <var:N> \land <var:u0> = <nat:4> \land <var:y> = <nat:2> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> \} $ . Honing in on the subsequent command in our series of instructions , we have the command \verb | <var:y> := <var:y> + <var:u1> | . This forwards $ \{ <var:Y> = <var:N> \land <var:u1> = <nat:1> * <var:N> \land <var:u0> = <nat:4> \land <var:y> = <nat:2> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> \} $ as the postcondition $ \{ <var:Y> = <var:N> \land <var:u0> = <nat:4> \land <var:y> = <nat:2> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> + <nat:1> * <var:N> \} $ . Immediately following , we have the variable assignmet statement \verb | <var:y> := <var:y> + <var:u0> | . This advances $ \{ <var:Y> = <var:N> \land <var:u0> = <nat:4> \land <var:y> = <nat:2> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> + <nat:1> * <var:N> \} $ toward $ \{ <var:Y> = <var:N> \land <var:y> = <nat:2> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> \} $ . This is deduced by the assignment inference rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <def:poly> := <var:u1> := <var:Y> ; <var:u2> := <var:u1> * <var:Y> ; <var:u3> := <var:u2> * <var:Y> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:1> ; <var:u2> := <var:u2> * <nat:9> ; <var:u3> := <var:u3> * <nat:2> ; <var:y> := <var:u3> <var:y> := <var:y> + <var:u2> <var:y> := <var:y> + <var:u1> <var:y> := <var:y> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Y> = <var:N> }} <def:poly> {{ <var:y> = <nat:2> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:u1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:u1> = <var:N> /\ <var:u2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:u1> = <var:N> /\ <var:u2> = <var:N> ^ <nat:2> /\ <var:u3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:u1> = <var:N> /\ <var:u2> = <var:N> ^ <nat:2> /\ <var:u3> = <var:N> ^ <nat:3> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:u1> = <nat:1> * <var:N> /\ <var:u2> = <var:N> ^ <nat:2> /\ <var:u3> = <var:N> ^ <nat:3> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:u1> = <nat:1> * <var:N> /\ <var:u2> = <nat:9> * <var:N> ^ <nat:2> /\ <var:u3> = <var:N> ^ <nat:3> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:u1> = <nat:1> * <var:N> /\ <var:u2> = <nat:9> * <var:N> ^ <nat:2> /\ <var:u3> = <nat:2> * <var:N> ^ <nat:3> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:u1> = <nat:1> * <var:N> /\ <var:u2> = <nat:9> * <var:N> ^ <nat:2> /\ <var:u0> = <nat:4> /\ <var:y> = <nat:2> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:u1> = <nat:1> * <var:N> /\ <var:u0> = <nat:4> /\ <var:y> = <nat:2> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:u0> = <nat:4> /\ <var:y> = <nat:2> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> + <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:y> = <nat:2> * <var:N> ^ <nat:3> + <nat:9> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 