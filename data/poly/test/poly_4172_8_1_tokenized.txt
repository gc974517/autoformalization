\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o1> := <var:G> ; <var:o2> := <var:o1> * <var:G> ; <var:o0> := <nat:6> ; <var:o1> := <var:o1> * <nat:3> ; <var:o2> := <var:o2> * <nat:1> ; <var:v> := <var:o2> <var:v> := <var:v> + <var:o1> <var:v> := <var:v> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> in \emph{Imp} . Given it to be that $ <var:G> = <var:b> $ ahead of the evaluation of our list of commands , it must be that we see $ <var:v> = <nat:1> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code is evident with standard Hoare logic . Stepping through , the assignment command \verb | <var:o1> := <var:G> ; | . This line moves the precondition $ \{ <var:G> = <var:b> \} $ into the postcondition $ \{ <var:G> = <var:b> \land <var:o1> = <var:b> \} $ . Honing in on the proceeding bit of code found in the series of instructions , we have the variable assignmet statement \verb | <var:o2> := <var:o1> * <var:G> ; | . This statement takes the precondition $ \{ <var:G> = <var:b> \land <var:o1> = <var:b> \} $ to the postcondition $ \{ <var:G> = <var:b> \land <var:o1> = <var:b> \land <var:o2> = <var:b> ^ <nat:2> \} $ . This is rigorously given by the assignment law given by Hoare reasoning . Considering the following piece of code in the program , the line \verb | <var:o0> := <nat:6> ; | . This transfers the condition $ \{ <var:G> = <var:b> \land <var:o1> = <var:b> \land <var:o2> = <var:b> ^ <nat:2> \} $ into the condition $ \{ <var:G> = <var:b> \land <var:o1> = <var:b> \land <var:o2> = <var:b> ^ <nat:2> \land <var:o0> = <nat:6> \} $ . Advancing to the next step , we have the variable assignmet line letting $ <var:o1> * <nat:3> $ toward $ <var:o1>$ . This takes $ \{ <var:G> = <var:b> \land <var:o1> = <var:b> \land <var:o2> = <var:b> ^ <nat:2> \land <var:o0> = <nat:6> \} $ toward $ \{ <var:G> = <var:b> \land <var:o1> = <nat:3> \times <var:b> \land <var:o2> = <var:b> ^ <nat:2> \land <var:o0> = <nat:6> \} $ . This is known to be sound using the assignment law of usual Hoare techniques . Moving forward , we have the statement \verb | <var:o2> := <var:o2> * <nat:1> ; | . This redefines the condition $ \{ <var:G> = <var:b> \land <var:o1> = <nat:3> \times <var:b> \land <var:o2> = <var:b> ^ <nat:2> \land <var:o0> = <nat:6> \} $ as the condition $ \{ <var:G> = <var:b> \land <var:o1> = <nat:3> \times <var:b> \land <var:o2> = <nat:1> \times <var:b> ^ <nat:2> \land <var:o0> = <nat:6> \} $ . Advancing to the upcoming line seen in our set of commands , we have the variable update code letting $ <var:o2$ as $ <var:v>$ . This redefines the condition $ \{ <var:G> = <var:b> \land <var:o1> = <nat:3> \times <var:b> \land <var:o2> = <nat:1> \times <var:b> ^ <nat:2> \land <var:o0> = <nat:6> \} $ as $ \{ <var:G> = <var:b> \land <var:o1> = <nat:3> \times <var:b> \land <var:o0> = <nat:6> \land <var:v> = <nat:1> \times <var:b> ^ <nat:2> \} $ . This is guaranteed using the assignment rule defined by typical Hoare techniques . Next , we have the environment update statement \verb | <var:v> := <var:v> + <var:o1> | . This code takes the condition $ \{ <var:G> = <var:b> \land <var:o1> = <nat:3> \times <var:b> \land <var:o0> = <nat:6> \land <var:v> = <nat:1> \times <var:b> ^ <nat:2> \} $ toward the postcondition $ \{ <var:G> = <var:b> \land <var:o0> = <nat:6> \land <var:v> = <nat:1> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> \} $ . This is sound using the assignment law in usual Hoare techniques . Moving forward , we see the variable assignmet statement \verb | <var:v> := <var:v> + <var:o0> | . This code forwards $ \{ <var:G> = <var:b> \land <var:o0> = <nat:6> \land <var:v> = <nat:1> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> \} $ into the postcondition $ \{ <var:G> = <var:b> \land <var:v> = <nat:1> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:6> \} $ . This is sound by the assignment inference rule found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <def:poly> := <var:o1> := <var:G> ; <var:o2> := <var:o1> * <var:G> ; <var:o0> := <nat:6> ; <var:o1> := <var:o1> * <nat:3> ; <var:o2> := <var:o2> * <nat:1> ; <var:v> := <var:o2> <var:v> := <var:v> + <var:o1> <var:v> := <var:v> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:G> = <var:b> }} <def:poly> {{ <var:v> = <nat:1> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:o1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:o1> = <var:b> /\ <var:o2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:o1> = <var:b> /\ <var:o2> = <var:b> ^ <nat:2> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:o1> = <nat:3> * <var:b> /\ <var:o2> = <var:b> ^ <nat:2> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:o1> = <nat:3> * <var:b> /\ <var:o2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:o0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:o1> = <nat:3> * <var:b> /\ <var:o0> = <nat:6> /\ <var:v> = <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:o0> = <nat:6> /\ <var:v> = <nat:1> * <var:b> ^ <nat:2> + <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:b> /\ <var:v> = <nat:1> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 