\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:d0> := <nat:3> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:A> ; <var:O> := <var:d1> ; <var:O> := <var:O> + <var:d0> \end{verbatim} Allow it to be that $ <var:A> = <var:M> $ prior to the evaluation of the segment of code , it holds that $ <var:O> = <nat:2> \cdot <var:M> + <nat:3> $ when code segment has executed . \end{theorem} \begin{proof} The proof of our code segment can be demonstrated using Hoare logic . Advancing to the next step , we have \[ \begin{tabular} {rcl} \{ <var:A> = <var:M> \} & <var:d0> := <nat:3> & \{ <var:A> = <var:M> \land <var:d0> = <nat:3> \} \\ \{ <var:A> = <var:M> \land <var:d0> = <nat:3> \} & <var:d1> := <nat:2> & \{ <var:A> = <var:M> \land <var:d0> = <nat:3> \land <var:d1> = <nat:2> \} \end{tabular} Immediately following , \[ \begin{tabular} {rcl} \{ <var:A> = <var:M> \} & <var:d0> := <nat:3> & \{ <var:A> = <var:M> \land <var:d0> = <nat:3> \} \\ \{ <var:A> = <var:M> \land <var:d0> = <nat:3> \} & <var:d1> := <nat:2> & \{ <var:A> = <var:M> \land <var:d0> = <nat:3> \land <var:d1> = <nat:2> \} \end{tabular} This is known to be sound through the binding rule in Hoare logic . Looking at the following line seen in our program , we see \[ \begin{tabular} {rcl} \{ <var:A> = <var:M> \} & <var:d0> := <nat:3> & \{ <var:A> = <var:M> \land <var:d0> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:A> = <var:M> }} <var:d0> := <nat:3> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:A> ; <var:O> := <var:d1> ; <var:O> := <var:O> + <var:d0> {{ <var:O> = <nat:2> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:d0> = <nat:3> /\ <var:O> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:M> /\ <var:O> = <nat:2> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 