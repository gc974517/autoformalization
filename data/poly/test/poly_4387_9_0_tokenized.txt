\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:4> ; <var:X1> := <nat:4> ; <var:X1> := <var:X1> * <var:T> ; <var:X2> := <nat:2> ; <var:X2> := <var:X2> * <var:T> ; <var:X2> := <var:X2> * <var:T> ; <var:A> := <var:X2> ; <var:A> := <var:A> + <var:X1> ; <var:A> := <var:A> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:T> = <var:q> $ ( given any positive coefficients $ <var:q> $ ) prior to the evaluation of this segment of code , it follows that $ <var:A> = <nat:2> \cdot <var:q> ^ <nat:2> + <nat:4> \cdot <var:q> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the code segment can be accomplished using standard Hoare logic . Stepping through , we have the variable binding line giving $ <nat:4> $ to $ <var:X0>$ . This takes $ \{ <var:T> = <var:q> \} $ to $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \} $ . This is deduced by the assignment inference rule from standard Hoare logic . Moving on , we have the binding command \verb | <var:X1> := <nat:4> ; | . This takes the condition $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \} $ toward $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:X1> = <nat:4> \} $ . This is sound by the assignment law defined by Hoare reasoning . Taking another step toward the following bit of code found in the code segment , the variable binding command \verb | <var:X1> := <var:X1> * <var:T> ; | . This command redefines the precondition $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:X1> = <nat:4> \} $ as the postcondition $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:X1> = <nat:4> \times <var:q> \} $ . Going to the next step , the code defining $ <nat:2> $ as $ <var:X2>$ . This code forwards the precondition $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:X1> = <nat:4> \times <var:q> \} $ to the condition $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:X1> = <nat:4> \times <var:q> \land <var:X2> = <nat:2> \} $ . Focusing on the upcoming piece of code contained in our series of commands , we see the assignment statement yielding $ <var:X2> * <var:T> $ toward $ <var:X2>$ . This moves the condition $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:X1> = <nat:4> \times <var:q> \land <var:X2> = <nat:2> \} $ to the postcondition $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:X1> = <nat:4> \times <var:q> \land <var:X2> = <nat:2> \times <var:q> \} $ . This is given with the assignment rule of usual Hoare techniques . Focusing on the following statement seen in the series of commands , we have the assignment statement giving $ <var:X2> * <var:T> $ into $ <var:X2>$ . This transfers $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:X1> = <nat:4> \times <var:q> \land <var:X2> = <nat:2> \times <var:q> \} $ toward the condition $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:X1> = <nat:4> \times <var:q> \land <var:X2> = <nat:2> \times <var:q> ^ <nat:2> \} $ . This is shown using the assignment inference rule defined by Hoare reasoning . Advancing , the variable binding line letting $ <var:X2> $ toward $ <var:A>$ . This statement advances $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:X1> = <nat:4> \times <var:q> \land <var:X2> = <nat:2> \times <var:q> ^ <nat:2> \} $ to $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:X1> = <nat:4> \times <var:q> \land <var:A> = <nat:2> \times <var:q> ^ <nat:2> \} $ . This is deduced through the assignment inference rule defined by usual Hoare logic . Paying attention to the following bit of code in the list of instructions , we have the variable binding line binding $ <var:A> + <var:X1> $ toward $ <var:A>$ . This command forwards the precondition $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:X1> = <nat:4> \times <var:q> \land <var:A> = <nat:2> \times <var:q> ^ <nat:2> \} $ into the condition $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:A> = <nat:2> \times <var:q> ^ <nat:2> + <nat:4> \times <var:q> \} $ . This is shown using the assignment scheme obtained from typical Hoare reasoning . Moving on to the following command in the list of instructions , the variable binding command \verb | <var:A> := <var:A> + <var:X0> | . This takes the condition $ \{ <var:T> = <var:q> \land <var:X0> = <nat:4> \land <var:A> = <nat:2> \times <var:q> ^ <nat:2> + <nat:4> \times <var:q> \} $ to $ \{ <var:T> = <var:q> \land <var:A> = <nat:2> \times <var:q> ^ <nat:2> + <nat:4> \times <var:q> + <nat:4> \} $ . This is shown to be logically sound with the assignment inference rule defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <def:poly> := <var:X0> := <nat:4> ; <var:X1> := <nat:4> ; <var:X1> := <var:X1> * <var:T> ; <var:X2> := <nat:2> ; <var:X2> := <var:X2> * <var:T> ; <var:X2> := <var:X2> * <var:T> ; <var:A> := <var:X2> ; <var:A> := <var:A> + <var:X1> ; <var:A> := <var:A> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:T> = <var:q> }} <def:poly> {{ <var:A> = <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:4> * <var:q> /\ <var:X2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:4> * <var:q> /\ <var:X2> = <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:4> * <var:q> /\ <var:X2> = <nat:2> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:X0> = <nat:4> /\ <var:X1> = <nat:4> * <var:q> /\ <var:A> = <nat:2> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:X0> = <nat:4> /\ <var:A> = <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:q> /\ <var:A> = <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 