\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} as \begin{verbatim} <var:I1> := <var:k> ; <var:I2> := <var:I1> * <var:k> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:9> ; <var:I2> := <var:I2> * <nat:6> ; <var:A> := <var:I2> <var:A> := <var:A> + <var:I1> <var:A> := <var:A> + <var:I0> \end{verbatim} Allowing it to hold that $ <var:k> = <var:F> $ prior to interpreting the list of commands , it holds that we have $ <var:A> = <nat:6> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for the code segment can be shown by usual Hoare techniques . Stepping forward , the assignment line \verb | <var:I1> := <var:k> ; | . This line advances $ \{ <var:k> = <var:F> \} $ toward the postcondition $ \{ <var:k> = <var:F> \land <var:I1> = <var:F> \} $ . Advancing on , we have the variable binding code defining $ <var:I1> * <var:k> $ into $ <var:I2>$ . This line forwards the condition $ \{ <var:k> = <var:F> \land <var:I1> = <var:F> \} $ as the postcondition $ \{ <var:k> = <var:F> \land <var:I1> = <var:F> \land <var:I2> = <var:F> ^ <nat:2> \} $ . Moving forward to the next step , the variable binding line \verb | <var:I0> := <nat:9> ; | . This statement redefines $ \{ <var:k> = <var:F> \land <var:I1> = <var:F> \land <var:I2> = <var:F> ^ <nat:2> \} $ into $ \{ <var:k> = <var:F> \land <var:I1> = <var:F> \land <var:I2> = <var:F> ^ <nat:2> \land <var:I0> = <nat:9> \} $ . This is rigorously given using the assignment law in Hoare techniques . Moving onward , we have the binding line \verb | <var:I1> := <var:I1> * <nat:9> ; | . This line advances the condition $ \{ <var:k> = <var:F> \land <var:I1> = <var:F> \land <var:I2> = <var:F> ^ <nat:2> \land <var:I0> = <nat:9> \} $ into the postcondition $ \{ <var:k> = <var:F> \land <var:I1> = <nat:9> \times <var:F> \land <var:I2> = <var:F> ^ <nat:2> \land <var:I0> = <nat:9> \} $ . Advancing to the next step in the list of instructions , we have the variable assignmet code \verb | <var:I2> := <var:I2> * <nat:6> ; | . This command advances the precondition $ \{ <var:k> = <var:F> \land <var:I1> = <nat:9> \times <var:F> \land <var:I2> = <var:F> ^ <nat:2> \land <var:I0> = <nat:9> \} $ into $ \{ <var:k> = <var:F> \land <var:I1> = <nat:9> \times <var:F> \land <var:I2> = <nat:6> \times <var:F> ^ <nat:2> \land <var:I0> = <nat:9> \} $ . This is shown by the assignment rule given by Hoare logic . Immediately after , the variable binding command assigning $ <var:I2$ toward $ <var:A>$ . This statement advances $ \{ <var:k> = <var:F> \land <var:I1> = <nat:9> \times <var:F> \land <var:I2> = <nat:6> \times <var:F> ^ <nat:2> \land <var:I0> = <nat:9> \} $ toward $ \{ <var:k> = <var:F> \land <var:I1> = <nat:9> \times <var:F> \land <var:I0> = <nat:9> \land <var:A> = <nat:6> \times <var:F> ^ <nat:2> \} $ . This is ensured using the assignment rule found in Hoare reasoning . Going forward , the variable update code giving $ <var:A> + <var:I1$ toward $ <var:A>$ . This line forwards $ \{ <var:k> = <var:F> \land <var:I1> = <nat:9> \times <var:F> \land <var:I0> = <nat:9> \land <var:A> = <nat:6> \times <var:F> ^ <nat:2> \} $ toward $ \{ <var:k> = <var:F> \land <var:I0> = <nat:9> \land <var:A> = <nat:6> \times <var:F> ^ <nat:2> + <nat:9> \times <var:F> \} $ . This is shown to be logically sound through the assignment inference rule found in Hoare reasoning . Shifting focus toward the upcoming statement contained in the segment of code , we have the line yielding $ <var:A> + <var:I0$ to $ <var:A>$ . This advances the precondition $ \{ <var:k> = <var:F> \land <var:I0> = <nat:9> \land <var:A> = <nat:6> \times <var:F> ^ <nat:2> + <nat:9> \times <var:F> \} $ into the postcondition $ \{ <var:k> = <var:F> \land <var:A> = <nat:6> \times <var:F> ^ <nat:2> + <nat:9> \times <var:F> + <nat:9> \} $ . This is sound through the assignment scheme found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:k> = <var:F> }} <var:I1> := <var:k> ; <var:I2> := <var:I1> * <var:k> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:9> ; <var:I2> := <var:I2> * <nat:6> ; <var:A> := <var:I2> <var:A> := <var:A> + <var:I1> <var:A> := <var:A> + <var:I0> {{ <var:A> = <nat:6> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:I1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:I1> = <var:F> /\ <var:I2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:I1> = <var:F> /\ <var:I2> = <var:F> ^ <nat:2> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:I1> = <nat:9> * <var:F> /\ <var:I2> = <var:F> ^ <nat:2> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:I1> = <nat:9> * <var:F> /\ <var:I2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:I1> = <nat:9> * <var:F> /\ <var:I0> = <nat:9> /\ <var:A> = <nat:6> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:I0> = <nat:9> /\ <var:A> = <nat:6> * <var:F> ^ <nat:2> + <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:A> = <nat:6> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 