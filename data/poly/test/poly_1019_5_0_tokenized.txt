\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} as follows \begin{verbatim} <var:L0> := <nat:5> ; <var:L1> := <nat:5> ; <var:L1> := <var:L1> * <var:F> ; <var:p> := <var:L1> ; <var:p> := <var:p> + <var:L0> \end{verbatim} Allowing that $ <var:F> = <var:w> $ , for every integers $ <var:w> $ , prior to interpreting this segment of code , it follows that we see $ <var:p> = <nat:5> \times <var:w> + <nat:5> $ once code has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:w> \} \\ <var:L0> := <nat:5> ; \\ \{ <var:F> = <var:w> \land <var:L0> = <nat:5> \} \\ <var:L1> := <nat:5> ; \\ \{ <var:F> = <var:w> \land <var:L0> = <nat:5> \land <var:L1> = <nat:5> \} \\ <var:L1> := <var:L1> * <var:F> ; \\ \{ <var:F> = <var:w> \land <var:L0> = <nat:5> \land <var:L1> = <nat:5> \cdot <var:w> \} \\ <var:p> := <var:L1> ; \\ \{ <var:F> = <var:w> \land <var:L0> = <nat:5> \land <var:p> = <nat:5> \cdot <var:w> \} \\ <var:p> := <var:p> + <var:L0> \\ \{ <var:F> = <var:w> \land <var:p> = <nat:5> \cdot <var:w> + <nat:5> \} \end{eqnarray} The application of usual Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:F> = <var:w> }} <var:L0> := <nat:5> ; <var:L1> := <nat:5> ; <var:L1> := <var:L1> * <var:F> ; <var:p> := <var:L1> ; <var:p> := <var:p> + <var:L0> {{ <var:p> = <nat:5> * <var:w> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:L0> = <nat:5> /\ <var:p> = <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:p> = <nat:5> * <var:w> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 