\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as \begin{verbatim} <var:i> := <nat:3> ; <var:i> := <nat:3> + <var:i> * <var:F> ; <var:i> := <var:i> * <var:F> ; <var:i> := <nat:3> + <var:i> * <var:F> \end{verbatim} Allowing that we have $ <var:F> = <var:K> $ , for any natural coefficients $ <var:K> $ , before running this program , it holds that $ <var:i> = <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for this set of commands is evident by typical Hoare techniques . After , we see \begin{eqnarray} \{ <var:F> = <var:K> \} \, <var:i> := <nat:3> \, \{ <var:F> = <var:K> \land <var:i> = <nat:3> \} \end{eqnarray} Looking at the proceeding piece of code in our series of instructions , \begin{eqnarray} \{ <var:F> = <var:K> \} \, <var:i> := <nat:3> \, \{ <var:F> = <var:K> \land <var:i> = <nat:3> \} \end{eqnarray} Moving on , we have \begin{eqnarray} \{ <var:F> = <var:K> \} \, <var:i> := <nat:3> \, \{ <var:F> = <var:K> \land <var:i> = <nat:3> \} \\ \{ <var:F> = <var:K> \land <var:i> = <nat:3> \} \, <var:i> := <nat:3> + <var:i> * <var:F> \, \{ <var:F> = <var:K> \land <var:i> = <nat:3> * <var:K> + <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:F> = <var:K> }} <var:i> := <nat:3> ; <var:i> := <nat:3> + <var:i> * <var:F> ; <var:i> := <var:i> * <var:F> ; <var:i> := <nat:3> + <var:i> * <var:F> {{ <var:i> = <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:i> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:i> = <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:i> = <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:i> = <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 