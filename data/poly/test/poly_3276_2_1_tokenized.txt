\begin{document} \begin{theorem} Consider a set of commands : \begin{verbatim} <var:q0> := <nat:4> ; <var:C> := <var:q0> \end{verbatim} Assuming that $ <var:v> = <var:J> $ ( for positive numbers $ <var:J> $ ) prior to interpreting our list of commands it follows that we see $ <var:C> = <nat:4> $ after program finishes . \end{theorem} \begin{proof} Applying typical Hoare techniques returns : \begin{eqnarray} \{ <var:v> = <var:J> \} \\ <var:q0> := <nat:4> ; \\ \{ <var:v> = <var:J> \land <var:q0> = <nat:4> \} \\ <var:C> := <var:q0> \\ \{ <var:v> = <var:J> \land <var:C> = <nat:4> \} \end{eqnarray} Therefore , the code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:v> = <var:J> }} <var:q0> := <nat:4> ; <var:C> := <var:q0> {{ <var:C> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:C> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 