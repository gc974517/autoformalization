\begin{document} \begin{theorem} Let the following list of instructions as \begin{verbatim} <var:W0> := <nat:3> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:L> ; <var:e> := <var:W1> ; <var:e> := <var:e> + <var:W0> \end{verbatim} Given it to be that $ <var:L> = <var:f> $ ahead of the execution of our series of commands , it holds that we see $ <var:e> = <nat:3> \cdot <var:f> + <nat:3> $ after program has exited . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions is accomplished using standard Hoare techniques . Advancing to the next command in the code , \begin{eqnarray} \{ <var:L> = <var:f> \} \, <var:W0> := <nat:3> \, \{ <var:L> = <var:f> \land <var:W0> = <nat:3> \} \end{eqnarray} This is shown using the variable update rule given by usual Hoare logic . Moving forward , we have \begin{eqnarray} \{ <var:L> = <var:f> \} \, <var:W0> := <nat:3> \, \{ <var:L> = <var:f> \land <var:W0> = <nat:3> \} \\ \{ <var:L> = <var:f> \land <var:W0> = <nat:3> \} \, <var:W1> := <nat:3> \, \{ <var:L> = <var:f> \land <var:W0> = <nat:3> \land <var:W1> = <nat:3> \} \\ \{ <var:L> = <var:f> \land <var:W0> = <nat:3> \land <var:W1> = <nat:3> \} \, <var:W1> := <var:W1> * <var:L> \, \{ <var:L> = <var:f> \land <var:W0> = <nat:3> \land <var:W1> = <nat:3> \times <var:f> \} \\ \{ <var:L> = <var:f> \land <var:W0> = <nat:3> \land <var:W1> = <nat:3> \times <var:f> \} \, <var:e> := <var:W1> \, \{ <var:L> = <var:f> \land <var:W0> = <nat:3> \land <var:e> = <nat:3> \times <var:f> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:L> = <var:f> }} <var:W0> := <nat:3> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:L> ; <var:e> := <var:W1> ; <var:e> := <var:e> + <var:W0> {{ <var:e> = <nat:3> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:W0> = <nat:3> /\ <var:e> = <nat:3> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:f> /\ <var:e> = <nat:3> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 