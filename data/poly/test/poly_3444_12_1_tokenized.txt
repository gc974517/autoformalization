\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:y> ; <var:Q2> := <var:Q1> * <var:y> ; <var:Q3> := <var:Q2> * <var:y> ; <var:Q4> := <var:Q3> * <var:y> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:9> ; <var:Q3> := <var:Q3> * <nat:9> ; <var:Q4> := <var:Q4> * <nat:4> ; <var:n> := <var:Q4> <var:n> := <var:n> + <var:Q3> <var:n> := <var:n> + <var:Q1> <var:n> := <var:n> + <var:Q0> \end{verbatim} Assuming $ <var:y> = <var:m> $ before the execution of our series of commands , then we see $ <var:n> = <nat:4> \times <var:m> ^ <nat:4> + <nat:9> \times <var:m> ^ <nat:3> + <nat:9> \times <var:m> + <nat:1> $ when set of instructions has executed . \end{theorem} \begin{proof} Utilizing typical Hoare logic yields : \begin{eqnarray} \{ <var:y> = <var:m> \} \\ <var:Q1> := <var:y> ; \\ \{ <var:y> = <var:m> \land <var:Q1> = <var:m> \} \\ <var:Q2> := <var:Q1> * <var:y> ; \\ \{ <var:y> = <var:m> \land <var:Q1> = <var:m> \land <var:Q2> = <var:m> ^ <nat:2> \} \\ <var:Q3> := <var:Q2> * <var:y> ; \\ \{ <var:y> = <var:m> \land <var:Q1> = <var:m> \land <var:Q2> = <var:m> ^ <nat:2> \land <var:Q3> = <var:m> ^ <nat:3> \} \\ <var:Q4> := <var:Q3> * <var:y> ; \\ \{ <var:y> = <var:m> \land <var:Q1> = <var:m> \land <var:Q2> = <var:m> ^ <nat:2> \land <var:Q3> = <var:m> ^ <nat:3> \land <var:Q4> = <var:m> ^ <nat:4> \} \\ <var:Q0> := <nat:1> ; \\ \{ <var:y> = <var:m> \land <var:Q1> = <var:m> \land <var:Q2> = <var:m> ^ <nat:2> \land <var:Q3> = <var:m> ^ <nat:3> \land <var:Q4> = <var:m> ^ <nat:4> \land <var:Q0> = <nat:1> \} \\ <var:Q1> := <var:Q1> * <nat:9> ; \\ \{ <var:y> = <var:m> \land <var:Q1> = <nat:9> \cdot <var:m> \land <var:Q2> = <var:m> ^ <nat:2> \land <var:Q3> = <var:m> ^ <nat:3> \land <var:Q4> = <var:m> ^ <nat:4> \land <var:Q0> = <nat:1> \} \\ <var:Q3> := <var:Q3> * <nat:9> ; \\ \{ <var:y> = <var:m> \land <var:Q1> = <nat:9> \cdot <var:m> \land <var:Q2> = <var:m> ^ <nat:2> \land <var:Q3> = <nat:9> \cdot <var:m> ^ <nat:3> \land <var:Q4> = <var:m> ^ <nat:4> \land <var:Q0> = <nat:1> \} \\ <var:Q4> := <var:Q4> * <nat:4> ; \\ \{ <var:y> = <var:m> \land <var:Q1> = <nat:9> \cdot <var:m> \land <var:Q2> = <var:m> ^ <nat:2> \land <var:Q3> = <nat:9> \cdot <var:m> ^ <nat:3> \land <var:Q4> = <nat:4> \cdot <var:m> ^ <nat:4> \land <var:Q0> = <nat:1> \} \\ <var:n> := <var:Q4> \\ \{ <var:y> = <var:m> \land <var:Q1> = <nat:9> \cdot <var:m> \land <var:Q2> = <var:m> ^ <nat:2> \land <var:Q3> = <nat:9> \cdot <var:m> ^ <nat:3> \land <var:Q0> = <nat:1> \land <var:n> = <nat:4> \cdot <var:m> ^ <nat:4> \} \\ <var:n> := <var:n> + <var:Q3> \\ \{ <var:y> = <var:m> \land <var:Q1> = <nat:9> \cdot <var:m> \land <var:Q2> = <var:m> ^ <nat:2> \land <var:Q0> = <nat:1> \land <var:n> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:9> \cdot <var:m> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:Q1> \\ \{ <var:y> = <var:m> \land <var:Q0> = <nat:1> \land <var:n> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:9> \cdot <var:m> ^ <nat:3> + <nat:9> \cdot <var:m> \} \end{eqnarray} Continuing the execution of the list of commands produces : \begin{eqnarray} <var:n> := <var:n> + <var:Q0> \\ \{ <var:y> = <var:m> \land <var:n> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:9> \cdot <var:m> ^ <nat:3> + <nat:9> \cdot <var:m> + <nat:1> \} \end{eqnarray} As a result , the code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <var:Q4> : string := " <var:Q4> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:y> = <var:m> }} <var:Q1> := <var:y> ; <var:Q2> := <var:Q1> * <var:y> ; <var:Q3> := <var:Q2> * <var:y> ; <var:Q4> := <var:Q3> * <var:y> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:9> ; <var:Q3> := <var:Q3> * <nat:9> ; <var:Q4> := <var:Q4> * <nat:4> ; <var:n> := <var:Q4> <var:n> := <var:n> + <var:Q3> <var:n> := <var:n> + <var:Q1> <var:n> := <var:n> + <var:Q0> {{ <var:n> = <nat:4> * <var:m> ^ <nat:4> + <nat:9> * <var:m> ^ <nat:3> + <nat:9> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:Q1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:Q1> = <var:m> /\ <var:Q2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:Q1> = <var:m> /\ <var:Q2> = <var:m> ^ <nat:2> /\ <var:Q3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:Q1> = <var:m> /\ <var:Q2> = <var:m> ^ <nat:2> /\ <var:Q3> = <var:m> ^ <nat:3> /\ <var:Q4> = <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:Q1> = <var:m> /\ <var:Q2> = <var:m> ^ <nat:2> /\ <var:Q3> = <var:m> ^ <nat:3> /\ <var:Q4> = <var:m> ^ <nat:4> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:Q1> = <nat:9> * <var:m> /\ <var:Q2> = <var:m> ^ <nat:2> /\ <var:Q3> = <var:m> ^ <nat:3> /\ <var:Q4> = <var:m> ^ <nat:4> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:Q1> = <nat:9> * <var:m> /\ <var:Q2> = <var:m> ^ <nat:2> /\ <var:Q3> = <nat:9> * <var:m> ^ <nat:3> /\ <var:Q4> = <var:m> ^ <nat:4> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:Q1> = <nat:9> * <var:m> /\ <var:Q2> = <var:m> ^ <nat:2> /\ <var:Q3> = <nat:9> * <var:m> ^ <nat:3> /\ <var:Q4> = <nat:4> * <var:m> ^ <nat:4> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:Q1> = <nat:9> * <var:m> /\ <var:Q2> = <var:m> ^ <nat:2> /\ <var:Q3> = <nat:9> * <var:m> ^ <nat:3> /\ <var:Q0> = <nat:1> /\ <var:n> = <nat:4> * <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:Q1> = <nat:9> * <var:m> /\ <var:Q2> = <var:m> ^ <nat:2> /\ <var:Q0> = <nat:1> /\ <var:n> = <nat:4> * <var:m> ^ <nat:4> + <nat:9> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:Q0> = <nat:1> /\ <var:n> = <nat:4> * <var:m> ^ <nat:4> + <nat:9> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:n> = <nat:4> * <var:m> ^ <nat:4> + <nat:9> * <var:m> ^ <nat:3> + <nat:9> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 