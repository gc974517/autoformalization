\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:o1> := <var:f> ; <var:o0> := <nat:5> ; <var:o1> := <var:o1> * <nat:8> ; <var:Q> := <var:o1> <var:Q> := <var:Q> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:f> = <var:A> $ --- for some integers $ <var:A> $ --- prior to evaluating our series of instructions it follows that $ <var:Q> = <nat:8> * <var:A> + <nat:5> $ . \end{theorem} \begin{proof} The argument for this set of instructions can be seen through Hoare reasoning . Stepping through , the command defining $ <var:f> $ to $ <var:o1>$ . This line takes the precondition $ \{ <var:f> = <var:A> \} $ toward $ \{ <var:f> = <var:A> \land <var:o1> = <var:A> \} $ . Moving onward , we see the variable binding line \verb | <var:o0> := <nat:5> ; | . This forwards the condition $ \{ <var:f> = <var:A> \land <var:o1> = <var:A> \} $ to $ \{ <var:f> = <var:A> \land <var:o1> = <var:A> \land <var:o0> = <nat:5> \} $ . This is guaranteed through the assignment scheme in usual Hoare reasoning . Advancing to the subsequent line of code found in our program , the environment update statement \verb | <var:o1> := <var:o1> * <nat:8> ; | . This statement takes $ \{ <var:f> = <var:A> \land <var:o1> = <var:A> \land <var:o0> = <nat:5> \} $ toward the condition $ \{ <var:f> = <var:A> \land <var:o1> = <nat:8> \cdot <var:A> \land <var:o0> = <nat:5> \} $ . Immediately after , we see the variable binding code \verb | <var:Q> := <var:o1> | . This transfers the condition $ \{ <var:f> = <var:A> \land <var:o1> = <nat:8> \cdot <var:A> \land <var:o0> = <nat:5> \} $ to the postcondition $ \{ <var:f> = <var:A> \land <var:o0> = <nat:5> \land <var:Q> = <nat:8> \cdot <var:A> \} $ . This is deduced by the assignment inference rule defined by standard Hoare reasoning . Moving onward , we see the assignment line defining $ <var:Q> + <var:o0$ into $ <var:Q>$ . This takes the condition $ \{ <var:f> = <var:A> \land <var:o0> = <nat:5> \land <var:Q> = <nat:8> \cdot <var:A> \} $ into the postcondition $ \{ <var:f> = <var:A> \land <var:Q> = <nat:8> \cdot <var:A> + <nat:5> \} $ . This is shown to be logically sound through the assignment law defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o1> := <var:f> ; <var:o0> := <nat:5> ; <var:o1> := <var:o1> * <nat:8> ; <var:Q> := <var:o1> <var:Q> := <var:Q> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:f> = <var:A> }} <def:poly> {{ <var:Q> = <nat:8> * <var:A> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:o1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:o1> = <var:A> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:o1> = <nat:8> * <var:A> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:o0> = <nat:5> /\ <var:Q> = <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:A> /\ <var:Q> = <nat:8> * <var:A> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 