\begin{document} \begin{theorem} Define a set of commands such that \begin{verbatim} <var:U1> := <var:Z> ; <var:U2> := <var:U1> * <var:Z> ; <var:U3> := <var:U2> * <var:Z> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:1> ; <var:U2> := <var:U2> * <nat:1> ; <var:U3> := <var:U3> * <nat:2> ; <var:M> := <var:U3> <var:M> := <var:M> + <var:U2> <var:M> := <var:M> + <var:U1> <var:M> := <var:M> + <var:U0> \end{verbatim} Assume ( with some positive coefficients $ <var:m> $ ) it to be that $ <var:Z> = <var:m> $ prior to evaluating this set of commands , it holds that we see $ <var:M> = <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is clear by typical Hoare techniques . Stepping forward , we see the variable assignmet line \verb | <var:U1> := <var:Z> ; | . This moves the condition $ \{ <var:Z> = <var:m> \} $ as $ \{ <var:Z> = <var:m> \land <var:U1> = <var:m> \} $ . This is known to be sound through the assignment law given in standard Hoare logic . Taking a look at the upcoming piece of code in our code segment , we see the variable binding line \verb | <var:U2> := <var:U1> * <var:Z> ; | . This code advances $ \{ <var:Z> = <var:m> \land <var:U1> = <var:m> \} $ as the condition $ \{ <var:Z> = <var:m> \land <var:U1> = <var:m> \land <var:U2> = <var:m> ^ <nat:2> \} $ . Observing the following bit of code found in our list of instructions , we see the variable assignmet statement \verb | <var:U3> := <var:U2> * <var:Z> ; | . This forwards the precondition $ \{ <var:Z> = <var:m> \land <var:U1> = <var:m> \land <var:U2> = <var:m> ^ <nat:2> \} $ to the postcondition $ \{ <var:Z> = <var:m> \land <var:U1> = <var:m> \land <var:U2> = <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment law found in usual Hoare logic . Jumping to the following line of code found in the segment of code , we have the command binding $ <nat:3> $ toward $ <var:U0>$ . This code redefines the precondition $ \{ <var:Z> = <var:m> \land <var:U1> = <var:m> \land <var:U2> = <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \} $ to $ \{ <var:Z> = <var:m> \land <var:U1> = <var:m> \land <var:U2> = <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \land <var:U0> = <nat:3> \} $ . This is known to be sound with the assignment inference rule defined in typical Hoare reasoning . Moving forward to the following piece of code seen in the code segment , we see the assignment command \verb | <var:U1> := <var:U1> * <nat:1> ; | . This command forwards the condition $ \{ <var:Z> = <var:m> \land <var:U1> = <var:m> \land <var:U2> = <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \land <var:U0> = <nat:3> \} $ into the postcondition $ \{ <var:Z> = <var:m> \land <var:U1> = <nat:1> \cdot <var:m> \land <var:U2> = <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \land <var:U0> = <nat:3> \} $ . This is deduced with the assignment law defined in standard Hoare reasoning . Following , we have the binding statement \verb | <var:U2> := <var:U2> * <nat:1> ; | . This transfers the precondition $ \{ <var:Z> = <var:m> \land <var:U1> = <nat:1> \cdot <var:m> \land <var:U2> = <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \land <var:U0> = <nat:3> \} $ as the condition $ \{ <var:Z> = <var:m> \land <var:U1> = <nat:1> \cdot <var:m> \land <var:U2> = <nat:1> \cdot <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \land <var:U0> = <nat:3> \} $ . This is shown to be logically sound with the assignment inference rule obtained from standard Hoare techniques . Considering the proceeding command contained in the code , the assignment line giving $ <var:U3> * <nat:2> $ as $ <var:U3>$ . This transfers $ \{ <var:Z> = <var:m> \land <var:U1> = <nat:1> \cdot <var:m> \land <var:U2> = <nat:1> \cdot <var:m> ^ <nat:2> \land <var:U3> = <var:m> ^ <nat:3> \land <var:U0> = <nat:3> \} $ as the postcondition $ \{ <var:Z> = <var:m> \land <var:U1> = <nat:1> \cdot <var:m> \land <var:U2> = <nat:1> \cdot <var:m> ^ <nat:2> \land <var:U3> = <nat:2> \cdot <var:m> ^ <nat:3> \land <var:U0> = <nat:3> \} $ . Honing in on the following piece of code contained in the code segment , we have the variable binding code \verb | <var:M> := <var:U3> | . This statement forwards $ \{ <var:Z> = <var:m> \land <var:U1> = <nat:1> \cdot <var:m> \land <var:U2> = <nat:1> \cdot <var:m> ^ <nat:2> \land <var:U3> = <nat:2> \cdot <var:m> ^ <nat:3> \land <var:U0> = <nat:3> \} $ into $ \{ <var:Z> = <var:m> \land <var:U1> = <nat:1> \cdot <var:m> \land <var:U2> = <nat:1> \cdot <var:m> ^ <nat:2> \land <var:U0> = <nat:3> \land <var:M> = <nat:2> \cdot <var:m> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment scheme defined by typical Hoare reasoning . Stepping forward , we have the assignment statement yielding $ <var:M> + <var:U2$ into $ <var:M>$ . This line advances the precondition $ \{ <var:Z> = <var:m> \land <var:U1> = <nat:1> \cdot <var:m> \land <var:U2> = <nat:1> \cdot <var:m> ^ <nat:2> \land <var:U0> = <nat:3> \land <var:M> = <nat:2> \cdot <var:m> ^ <nat:3> \} $ to $ \{ <var:Z> = <var:m> \land <var:U1> = <nat:1> \cdot <var:m> \land <var:U0> = <nat:3> \land <var:M> = <nat:2> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> \} $ . Honing in on the proceeding step found in the set of instructions , we have the variable update statement binding $ <var:M> + <var:U1$ toward $ <var:M>$ . This line moves $ \{ <var:Z> = <var:m> \land <var:U1> = <nat:1> \cdot <var:m> \land <var:U0> = <nat:3> \land <var:M> = <nat:2> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> \} $ toward $ \{ <var:Z> = <var:m> \land <var:U0> = <nat:3> \land <var:M> = <nat:2> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> \} $ . This is given with the assignment scheme from standard Hoare reasoning . Further , the line assigning $ <var:M> + <var:U0$ to $ <var:M>$ . This command transfers the condition $ \{ <var:Z> = <var:m> \land <var:U0> = <nat:3> \land <var:M> = <nat:2> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> \} $ as the postcondition $ \{ <var:Z> = <var:m> \land <var:M> = <nat:2> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:Z> = <var:m> }} <var:U1> := <var:Z> ; <var:U2> := <var:U1> * <var:Z> ; <var:U3> := <var:U2> * <var:Z> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:1> ; <var:U2> := <var:U2> * <nat:1> ; <var:U3> := <var:U3> * <nat:2> ; <var:M> := <var:U3> <var:M> := <var:M> + <var:U2> <var:M> := <var:M> + <var:U1> <var:M> := <var:M> + <var:U0> {{ <var:M> = <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:m> /\ <var:U1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:m> /\ <var:U1> = <var:m> /\ <var:U2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:m> /\ <var:U1> = <var:m> /\ <var:U2> = <var:m> ^ <nat:2> /\ <var:U3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:m> /\ <var:U1> = <var:m> /\ <var:U2> = <var:m> ^ <nat:2> /\ <var:U3> = <var:m> ^ <nat:3> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:m> /\ <var:U1> = <nat:1> * <var:m> /\ <var:U2> = <var:m> ^ <nat:2> /\ <var:U3> = <var:m> ^ <nat:3> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:m> /\ <var:U1> = <nat:1> * <var:m> /\ <var:U2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:U3> = <var:m> ^ <nat:3> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:m> /\ <var:U1> = <nat:1> * <var:m> /\ <var:U2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:m> ^ <nat:3> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:m> /\ <var:U1> = <nat:1> * <var:m> /\ <var:U2> = <nat:1> * <var:m> ^ <nat:2> /\ <var:U0> = <nat:3> /\ <var:M> = <nat:2> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:m> /\ <var:U1> = <nat:1> * <var:m> /\ <var:U0> = <nat:3> /\ <var:M> = <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:m> /\ <var:U0> = <nat:3> /\ <var:M> = <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:m> /\ <var:M> = <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 