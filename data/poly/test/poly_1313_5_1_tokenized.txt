\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:q1> := <var:d> ; <var:q0> := <nat:7> ; <var:q1> := <var:q1> * <nat:9> ; <var:T> := <var:q1> <var:T> := <var:T> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for any positive coefficients $ <var:C> $ ) it to be that $ <var:d> = <var:C> $ ahead of running our code segment , it holds that we see $ <var:T> = <nat:9> \cdot <var:C> + <nat:7> $ after segment of code is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions can be demonstrated using usual Hoare reasoning . Stepping forward , we see \[ \begin{tabular} {rcl} \{ <var:d> = <var:C> \} & <var:q1> := <var:d> & \{ <var:d> = <var:C> \land <var:q1> = <var:C> \} \\ \{ <var:d> = <var:C> \land <var:q1> = <var:C> \} & <var:q0> := <nat:7> & \{ <var:d> = <var:C> \land <var:q1> = <var:C> \land <var:q0> = <nat:7> \} \end{tabular} Moving on , \[ \begin{tabular} {rcl} \{ <var:d> = <var:C> \} & <var:q1> := <var:d> & \{ <var:d> = <var:C> \land <var:q1> = <var:C> \} \end{tabular} Taking a look at the upcoming command in our program , \[ \begin{tabular} {rcl} \{ <var:d> = <var:C> \} & <var:q1> := <var:d> & \{ <var:d> = <var:C> \land <var:q1> = <var:C> \} \end{tabular} This is known to be sound by the scheme of usual Hoare logic . Immediately after , \[ \begin{tabular} {rcl} \{ <var:d> = <var:C> \} & <var:q1> := <var:d> & \{ <var:d> = <var:C> \land <var:q1> = <var:C> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q1> := <var:d> ; <var:q0> := <nat:7> ; <var:q1> := <var:q1> * <nat:9> ; <var:T> := <var:q1> <var:T> := <var:T> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:d> = <var:C> }} <def:poly> {{ <var:T> = <nat:9> * <var:C> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:q1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:q1> = <var:C> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:q1> = <nat:9> * <var:C> /\ <var:q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:q0> = <nat:7> /\ <var:T> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:C> /\ <var:T> = <nat:9> * <var:C> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 