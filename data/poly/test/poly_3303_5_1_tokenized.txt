\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} : \begin{verbatim} <var:J1> := <var:F> ; <var:J0> := <nat:2> ; <var:J1> := <var:J1> * <nat:4> ; <var:q> := <var:J1> <var:q> := <var:q> + <var:J0> \end{verbatim} Allow it to be that $ <var:F> = <var:C> $ ( given every $ <var:C> \in \mathbb{Z}^+ $ ) ahead of evaluating our set of commands , it follows that $ <var:q> = <nat:4> \cdot <var:C> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing Hoare logic results in : \begin{eqnarray} \{ <var:F> = <var:C> \} \\ <var:J1> := <var:F> ; \\ \{ <var:F> = <var:C> \land <var:J1> = <var:C> \} \\ <var:J0> := <nat:2> ; \\ \{ <var:F> = <var:C> \land <var:J1> = <var:C> \land <var:J0> = <nat:2> \} \\ <var:J1> := <var:J1> * <nat:4> ; \\ \{ <var:F> = <var:C> \land <var:J1> = <nat:4> \times <var:C> \land <var:J0> = <nat:2> \} \\ <var:q> := <var:J1> \\ \{ <var:F> = <var:C> \land <var:J0> = <nat:2> \land <var:q> = <nat:4> \times <var:C> \} \\ <var:q> := <var:q> + <var:J0> \\ \{ <var:F> = <var:C> \land <var:q> = <nat:4> \times <var:C> + <nat:2> \} \end{eqnarray} Considering the above , the series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:F> = <var:C> }} <var:J1> := <var:F> ; <var:J0> := <nat:2> ; <var:J1> := <var:J1> * <nat:4> ; <var:q> := <var:J1> <var:q> := <var:q> + <var:J0> {{ <var:q> = <nat:4> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:C> /\ <var:J1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:C> /\ <var:J1> = <var:C> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:C> /\ <var:J1> = <nat:4> * <var:C> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:C> /\ <var:J0> = <nat:2> /\ <var:q> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:C> /\ <var:q> = <nat:4> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 