\begin{document} \begin{theorem} Define a series of instructions : \begin{verbatim} <var:y0> := <nat:4> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:V> ; <var:S> := <var:y1> ; <var:S> := <var:S> + <var:y0> \end{verbatim} Assume it to be that $ <var:V> = <var:D> $ prior to running the list of commands , then we see $ <var:S> = <nat:9> * <var:D> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the code segment can be shown using the following decorated code segment . \begin{eqnarray} \{ <var:V> = <var:D> \} \\ <var:y0> := <nat:4> ; \\ \{ <var:V> = <var:D> \land <var:y0> = <nat:4> \} \\ <var:y1> := <nat:9> ; \\ \{ <var:V> = <var:D> \land <var:y0> = <nat:4> \land <var:y1> = <nat:9> \} \\ <var:y1> := <var:y1> * <var:V> ; \\ \{ <var:V> = <var:D> \land <var:y0> = <nat:4> \land <var:y1> = <nat:9> \times <var:D> \} \\ <var:S> := <var:y1> ; \\ \{ <var:V> = <var:D> \land <var:y0> = <nat:4> \land <var:S> = <nat:9> \times <var:D> \} \\ <var:S> := <var:S> + <var:y0> \\ \{ <var:V> = <var:D> \land <var:S> = <nat:9> \times <var:D> + <nat:4> \} \end{eqnarray} The application of standard Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:V> = <var:D> }} <var:y0> := <nat:4> ; <var:y1> := <nat:9> ; <var:y1> := <var:y1> * <var:V> ; <var:S> := <var:y1> ; <var:S> := <var:S> + <var:y0> {{ <var:S> = <nat:9> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:9> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:y0> = <nat:4> /\ <var:S> = <nat:9> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:S> = <nat:9> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 