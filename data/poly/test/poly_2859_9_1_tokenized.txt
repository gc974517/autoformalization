\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as \begin{verbatim} <var:j1> := <var:e> ; <var:j2> := <var:j1> * <var:e> ; <var:j3> := <var:j2> * <var:e> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:8> ; <var:j3> := <var:j3> * <nat:6> ; <var:K> := <var:j3> <var:K> := <var:K> + <var:j1> <var:K> := <var:K> + <var:j0> \end{verbatim} Given it to hold that $ <var:e> = <var:r> $ prior to interpreting the segment of code it must be that we have $ <var:K> = <nat:6> * <var:r> ^ <nat:3> + <nat:8> * <var:r> + <nat:2> $ when series of commands terminates . \end{theorem} \begin{proof} We can see that the following decorated segment of code . \begin{eqnarray} \{ <var:e> = <var:r> \} \\ <var:j1> := <var:e> ; \\ \{ <var:e> = <var:r> \land <var:j1> = <var:r> \} \\ <var:j2> := <var:j1> * <var:e> ; \\ \{ <var:e> = <var:r> \land <var:j1> = <var:r> \land <var:j2> = <var:r> ^ <nat:2> \} \\ <var:j3> := <var:j2> * <var:e> ; \\ \{ <var:e> = <var:r> \land <var:j1> = <var:r> \land <var:j2> = <var:r> ^ <nat:2> \land <var:j3> = <var:r> ^ <nat:3> \} \\ <var:j0> := <nat:2> ; \\ \{ <var:e> = <var:r> \land <var:j1> = <var:r> \land <var:j2> = <var:r> ^ <nat:2> \land <var:j3> = <var:r> ^ <nat:3> \land <var:j0> = <nat:2> \} \\ <var:j1> := <var:j1> * <nat:8> ; \\ \{ <var:e> = <var:r> \land <var:j1> = <nat:8> \times <var:r> \land <var:j2> = <var:r> ^ <nat:2> \land <var:j3> = <var:r> ^ <nat:3> \land <var:j0> = <nat:2> \} \\ <var:j3> := <var:j3> * <nat:6> ; \\ \{ <var:e> = <var:r> \land <var:j1> = <nat:8> \times <var:r> \land <var:j2> = <var:r> ^ <nat:2> \land <var:j3> = <nat:6> \times <var:r> ^ <nat:3> \land <var:j0> = <nat:2> \} \\ <var:K> := <var:j3> \\ \{ <var:e> = <var:r> \land <var:j1> = <nat:8> \times <var:r> \land <var:j2> = <var:r> ^ <nat:2> \land <var:j0> = <nat:2> \land <var:K> = <nat:6> \times <var:r> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:j1> \\ \{ <var:e> = <var:r> \land <var:j0> = <nat:2> \land <var:K> = <nat:6> \times <var:r> ^ <nat:3> + <nat:8> \times <var:r> \} \\ <var:K> := <var:K> + <var:j0> \\ \{ <var:e> = <var:r> \land <var:K> = <nat:6> \times <var:r> ^ <nat:3> + <nat:8> \times <var:r> + <nat:2> \} \end{eqnarray} Applying Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:e> = <var:r> }} <var:j1> := <var:e> ; <var:j2> := <var:j1> * <var:e> ; <var:j3> := <var:j2> * <var:e> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:8> ; <var:j3> := <var:j3> * <nat:6> ; <var:K> := <var:j3> <var:K> := <var:K> + <var:j1> <var:K> := <var:K> + <var:j0> {{ <var:K> = <nat:6> * <var:r> ^ <nat:3> + <nat:8> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:j1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:j1> = <var:r> /\ <var:j2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:j1> = <var:r> /\ <var:j2> = <var:r> ^ <nat:2> /\ <var:j3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:j1> = <var:r> /\ <var:j2> = <var:r> ^ <nat:2> /\ <var:j3> = <var:r> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:j1> = <nat:8> * <var:r> /\ <var:j2> = <var:r> ^ <nat:2> /\ <var:j3> = <var:r> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:j1> = <nat:8> * <var:r> /\ <var:j2> = <var:r> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:r> ^ <nat:3> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:j1> = <nat:8> * <var:r> /\ <var:j2> = <var:r> ^ <nat:2> /\ <var:j0> = <nat:2> /\ <var:K> = <nat:6> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:j0> = <nat:2> /\ <var:K> = <nat:6> * <var:r> ^ <nat:3> + <nat:8> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:r> /\ <var:K> = <nat:6> * <var:r> ^ <nat:3> + <nat:8> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 