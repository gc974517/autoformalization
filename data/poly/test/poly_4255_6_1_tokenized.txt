\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:l1> := <var:T> ; <var:l2> := <var:l1> * <var:T> ; <var:l0> := <nat:2> ; <var:l2> := <var:l2> * <nat:5> ; <var:Z> := <var:l2> <var:Z> := <var:Z> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Given ( given all positive integers $ <var:y> $ ) it to hold that $ <var:T> = <var:y> $ prior to running this list of instructions it holds that $ <var:Z> = <nat:5> \times <var:y> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of commands can be seen using this decorated program . \begin{eqnarray} \{ <var:T> = <var:y> \} \\ <var:l1> := <var:T> ; \\ \{ <var:T> = <var:y> \land <var:l1> = <var:y> \} \\ <var:l2> := <var:l1> * <var:T> ; \\ \{ <var:T> = <var:y> \land <var:l1> = <var:y> \land <var:l2> = <var:y> ^ <nat:2> \} \\ <var:l0> := <nat:2> ; \\ \{ <var:T> = <var:y> \land <var:l1> = <var:y> \land <var:l2> = <var:y> ^ <nat:2> \land <var:l0> = <nat:2> \} \\ <var:l2> := <var:l2> * <nat:5> ; \\ \{ <var:T> = <var:y> \land <var:l1> = <var:y> \land <var:l2> = <nat:5> \times <var:y> ^ <nat:2> \land <var:l0> = <nat:2> \} \\ <var:Z> := <var:l2> \\ \{ <var:T> = <var:y> \land <var:l1> = <var:y> \land <var:l0> = <nat:2> \land <var:Z> = <nat:5> \times <var:y> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:l0> \\ \{ <var:T> = <var:y> \land <var:Z> = <nat:5> \times <var:y> ^ <nat:2> + <nat:2> \} \end{eqnarray} Utilizing usual Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <def:poly> := <var:l1> := <var:T> ; <var:l2> := <var:l1> * <var:T> ; <var:l0> := <nat:2> ; <var:l2> := <var:l2> * <nat:5> ; <var:Z> := <var:l2> <var:Z> := <var:Z> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:T> = <var:y> }} <def:poly> {{ <var:Z> = <nat:5> * <var:y> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:l1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:l1> = <var:y> /\ <var:l2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:l1> = <var:y> /\ <var:l2> = <var:y> ^ <nat:2> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:l1> = <var:y> /\ <var:l2> = <nat:5> * <var:y> ^ <nat:2> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:l1> = <var:y> /\ <var:l0> = <nat:2> /\ <var:Z> = <nat:5> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:y> /\ <var:Z> = <nat:5> * <var:y> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 