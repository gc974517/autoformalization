\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:v1> := <var:L> ; <var:v2> := <var:v1> * <var:L> ; <var:v3> := <var:v2> * <var:L> ; <var:v0> := <nat:7> ; <var:v1> := <var:v1> * <nat:7> ; <var:v2> := <var:v2> * <nat:1> ; <var:v3> := <var:v3> * <nat:1> ; <var:j> := <var:v3> <var:j> := <var:j> + <var:v2> <var:j> := <var:j> + <var:v1> <var:j> := <var:j> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> . Allowing $ <var:L> = <var:u> $ before evaluating this segment of code , it follows that we see $ <var:j> = <nat:1> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:7> * <var:u> + <nat:7> $ once code executes . \end{theorem} \begin{proof} Arguing the correctness of our set of commands can be given with typical Hoare logic . Advancing on , we have \begin{eqnarray} \{ <var:L> = <var:u> \} \, <var:v1> := <var:L> \, \{ <var:L> = <var:u> \land <var:v1> = <var:u> \} \\ \{ <var:L> = <var:u> \land <var:v1> = <var:u> \} \, <var:v2> := <var:v1> * <var:L> \, \{ <var:L> = <var:u> \land <var:v1> = <var:u> \land <var:v2> = <var:u> ^ <nat:2> \} \\ \{ <var:L> = <var:u> \land <var:v1> = <var:u> \land <var:v2> = <var:u> ^ <nat:2> \} \, <var:v3> := <var:v2> * <var:L> \, \{ <var:L> = <var:u> \land <var:v1> = <var:u> \land <var:v2> = <var:u> ^ <nat:2> \land <var:v3> = <var:u> ^ <nat:3> \} \end{eqnarray} This is known to be sound using the assignment inference rule found in typical Hoare techniques . Moving forward to the proceeding bits of codein the code , we see \begin{eqnarray} \{ <var:L> = <var:u> \} \, <var:v1> := <var:L> \, \{ <var:L> = <var:u> \land <var:v1> = <var:u> \} \\ \{ <var:L> = <var:u> \land <var:v1> = <var:u> \} \, <var:v2> := <var:v1> * <var:L> \, \{ <var:L> = <var:u> \land <var:v1> = <var:u> \land <var:v2> = <var:u> ^ <nat:2> \} \end{eqnarray} This is ensured by the assignment inference rule of Hoare logic . Immediately following , we have \begin{eqnarray} \{ <var:L> = <var:u> \} \, <var:v1> := <var:L> \, \{ <var:L> = <var:u> \land <var:v1> = <var:u> \} \\ \{ <var:L> = <var:u> \land <var:v1> = <var:u> \} \, <var:v2> := <var:v1> * <var:L> \, \{ <var:L> = <var:u> \land <var:v1> = <var:u> \land <var:v2> = <var:u> ^ <nat:2> \} \\ \{ <var:L> = <var:u> \land <var:v1> = <var:u> \land <var:v2> = <var:u> ^ <nat:2> \} \, <var:v3> := <var:v2> * <var:L> \, \{ <var:L> = <var:u> \land <var:v1> = <var:u> \land <var:v2> = <var:u> ^ <nat:2> \land <var:v3> = <var:u> ^ <nat:3> \} \\ \{ <var:L> = <var:u> \land <var:v1> = <var:u> \land <var:v2> = <var:u> ^ <nat:2> \land <var:v3> = <var:u> ^ <nat:3> \} \, <var:v0> := <nat:7> \, \{ <var:L> = <var:u> \land <var:v1> = <var:u> \land <var:v2> = <var:u> ^ <nat:2> \land <var:v3> = <var:u> ^ <nat:3> \land <var:v0> = <nat:7> \} \\ \{ <var:L> = <var:u> \land <var:v1> = <var:u> \land <var:v2> = <var:u> ^ <nat:2> \land <var:v3> = <var:u> ^ <nat:3> \land <var:v0> = <nat:7> \} \, <var:v1> := <var:v1> * <nat:7> \, \{ <var:L> = <var:u> \land <var:v1> = <nat:7> \times <var:u> \land <var:v2> = <var:u> ^ <nat:2> \land <var:v3> = <var:u> ^ <nat:3> \land <var:v0> = <nat:7> \} \\ \{ <var:L> = <var:u> \land <var:v1> = <nat:7> \times <var:u> \land <var:v2> = <var:u> ^ <nat:2> \land <var:v3> = <var:u> ^ <nat:3> \land <var:v0> = <nat:7> \} \, <var:v2> := <var:v2> * <nat:1> \, \{ <var:L> = <var:u> \land <var:v1> = <nat:7> \times <var:u> \land <var:v2> = <nat:1> \times <var:u> ^ <nat:2> \land <var:v3> = <var:u> ^ <nat:3> \land <var:v0> = <nat:7> \} \end{eqnarray} This is sound through the binding inference rule defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v1> := <var:L> ; <var:v2> := <var:v1> * <var:L> ; <var:v3> := <var:v2> * <var:L> ; <var:v0> := <nat:7> ; <var:v1> := <var:v1> * <nat:7> ; <var:v2> := <var:v2> * <nat:1> ; <var:v3> := <var:v3> * <nat:1> ; <var:j> := <var:v3> <var:j> := <var:j> + <var:v2> <var:j> := <var:j> + <var:v1> <var:j> := <var:j> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:L> = <var:u> }} <def:poly> {{ <var:j> = <nat:1> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:7> * <var:u> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:v1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:v1> = <var:u> /\ <var:v2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:v1> = <var:u> /\ <var:v2> = <var:u> ^ <nat:2> /\ <var:v3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:v1> = <var:u> /\ <var:v2> = <var:u> ^ <nat:2> /\ <var:v3> = <var:u> ^ <nat:3> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:v1> = <nat:7> * <var:u> /\ <var:v2> = <var:u> ^ <nat:2> /\ <var:v3> = <var:u> ^ <nat:3> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:v1> = <nat:7> * <var:u> /\ <var:v2> = <nat:1> * <var:u> ^ <nat:2> /\ <var:v3> = <var:u> ^ <nat:3> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:v1> = <nat:7> * <var:u> /\ <var:v2> = <nat:1> * <var:u> ^ <nat:2> /\ <var:v3> = <nat:1> * <var:u> ^ <nat:3> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:v1> = <nat:7> * <var:u> /\ <var:v2> = <nat:1> * <var:u> ^ <nat:2> /\ <var:v0> = <nat:7> /\ <var:j> = <nat:1> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:v1> = <nat:7> * <var:u> /\ <var:v0> = <nat:7> /\ <var:j> = <nat:1> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:v0> = <nat:7> /\ <var:j> = <nat:1> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:7> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:u> /\ <var:j> = <nat:1> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:7> * <var:u> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 