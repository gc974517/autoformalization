\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:i> := <nat:1> ; <var:i> := <nat:3> + <var:i> * <var:J> ; <var:i> := <var:i> * <var:J> ; <var:i> := <nat:2> + <var:i> * <var:J> ; <var:i> := <nat:2> + <var:i> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:J> = <var:s> $ prior to running the segment of code , it must be that $ <var:i> = <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> + <nat:2> $ once code executes . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be shown using this decorated code segment . \begin{eqnarray} \{ <var:J> = <var:s> \} \\ <var:i> := <nat:1> ; \\ \{ <var:J> = <var:s> \land <var:i> = <nat:1> \} \\ <var:i> := <nat:3> + <var:i> * <var:J> ; \\ \{ <var:J> = <var:s> \land <var:i> = <nat:1> \cdot <var:s> + <nat:3> \} \\ <var:i> := <var:i> * <var:J> ; \\ \{ <var:J> = <var:s> \land <var:i> = <nat:1> \cdot <var:s> ^ <nat:2> + <nat:3> \cdot <var:s> + \} \\ <var:i> := <nat:2> + <var:i> * <var:J> ; \\ \{ <var:J> = <var:s> \land <var:i> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:3> \cdot <var:s> ^ <nat:2> + <nat:2> \} \\ <var:i> := <nat:2> + <var:i> * <var:J> \\ \{ <var:J> = <var:s> \land <var:i> = <nat:1> \cdot <var:s> ^ <nat:4> + <nat:3> \cdot <var:s> ^ <nat:3> + <nat:2> \cdot <var:s> + <nat:2> \} \end{eqnarray} Using Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:i> := <nat:1> ; <var:i> := <nat:3> + <var:i> * <var:J> ; <var:i> := <var:i> * <var:J> ; <var:i> := <nat:2> + <var:i> * <var:J> ; <var:i> := <nat:2> + <var:i> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:J> = <var:s> }} <def:poly> {{ <var:i> = <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:i> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:i> = <nat:1> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:i> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:i> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:i> = <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 