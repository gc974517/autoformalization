\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:3> ; <var:V1> := <nat:3> ; <var:V1> := <var:V1> * <var:f> ; <var:V3> := <nat:2> ; <var:V3> := <var:V3> * <var:f> ; <var:V3> := <var:V3> * <var:f> ; <var:V3> := <var:V3> * <var:f> ; <var:q> := <var:V3> ; <var:q> := <var:q> + <var:V1> ; <var:q> := <var:q> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:f> = <var:S> $ before executing our series of commands , it follows that $ <var:q> = <nat:2> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> + <nat:3> $ when series of commands has finished executing . \end{theorem} \begin{proof} Utilizing usual Hoare techniques gives : \begin{eqnarray} \{ <var:f> = <var:S> \} \\ <var:V0> := <nat:3> ; \\ \{ <var:f> = <var:S> \land <var:V0> = <nat:3> \} \\ <var:V1> := <nat:3> ; \\ \{ <var:f> = <var:S> \land <var:V0> = <nat:3> \land <var:V1> = <nat:3> \} \\ <var:V1> := <var:V1> * <var:f> ; \\ \{ <var:f> = <var:S> \land <var:V0> = <nat:3> \land <var:V1> = <nat:3> * <var:S> \} \\ <var:V3> := <nat:2> ; \\ \{ <var:f> = <var:S> \land <var:V0> = <nat:3> \land <var:V1> = <nat:3> * <var:S> \land <var:V3> = <nat:2> \} \\ <var:V3> := <var:V3> * <var:f> ; \\ \{ <var:f> = <var:S> \land <var:V0> = <nat:3> \land <var:V1> = <nat:3> * <var:S> \land <var:V3> = <nat:2> * <var:S> \} \\ <var:V3> := <var:V3> * <var:f> ; \\ \{ <var:f> = <var:S> \land <var:V0> = <nat:3> \land <var:V1> = <nat:3> * <var:S> \land <var:V3> = <nat:2> * <var:S> ^ <nat:2> \} \\ <var:V3> := <var:V3> * <var:f> ; \\ \{ <var:f> = <var:S> \land <var:V0> = <nat:3> \land <var:V1> = <nat:3> * <var:S> \land <var:V3> = <nat:2> * <var:S> ^ <nat:3> \} \\ <var:q> := <var:V3> ; \\ \{ <var:f> = <var:S> \land <var:V0> = <nat:3> \land <var:V1> = <nat:3> * <var:S> \land <var:q> = <nat:2> * <var:S> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:V1> ; \\ \{ <var:f> = <var:S> \land <var:V0> = <nat:3> \land <var:q> = <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> \} \\ <var:q> := <var:q> + <var:V0> \\ \{ <var:f> = <var:S> \land <var:q> = <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> + <nat:3> \} \end{eqnarray} Thus , our list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V0> := <nat:3> ; <var:V1> := <nat:3> ; <var:V1> := <var:V1> * <var:f> ; <var:V3> := <nat:2> ; <var:V3> := <var:V3> * <var:f> ; <var:V3> := <var:V3> * <var:f> ; <var:V3> := <var:V3> * <var:f> ; <var:q> := <var:V3> ; <var:q> := <var:q> + <var:V1> ; <var:q> := <var:q> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:f> = <var:S> }} <def:poly> {{ <var:q> = <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:3> * <var:S> /\ <var:V3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:3> * <var:S> /\ <var:V3> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:3> * <var:S> /\ <var:V3> = <nat:2> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:3> * <var:S> /\ <var:V3> = <nat:2> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:3> * <var:S> /\ <var:q> = <nat:2> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:V0> = <nat:3> /\ <var:q> = <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:S> /\ <var:q> = <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 