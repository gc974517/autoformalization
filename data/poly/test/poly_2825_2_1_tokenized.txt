\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:V0> := <nat:8> ; <var:q> := <var:V0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> in \emph{Imp} . Assume $ <var:L> = <var:J> $ ahead of running the list of commands it must be that we see $ <var:q> = <nat:8> $ when code is done . \end{theorem} \begin{proof} The flow of logic for the program is accomplished through standard Hoare reasoning . Looking at the following piece of code found in our program , \verb | { <var:L> = <var:J> } <var:V0> := <nat:8> { <var:L> = <var:J> \land <var:V0> = <nat:8> } | . Immediately after , \verb | { <var:L> = <var:J> } <var:V0> := <nat:8> { <var:L> = <var:J> \land <var:V0> = <nat:8> } | . This is deduced using the binding inference rule defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <def:poly> := <var:V0> := <nat:8> ; <var:q> := <var:V0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:L> = <var:J> }} <def:poly> {{ <var:q> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:J> /\ <var:q> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 