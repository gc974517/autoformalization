\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:m1> := <var:Z> ; <var:m2> := <var:m1> * <var:Z> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:1> ; <var:m2> := <var:m2> * <nat:2> ; <var:T> := <var:m2> <var:T> := <var:T> + <var:m1> <var:T> := <var:T> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allow , letting whole numbers $ <var:q> $ , it to be that $ <var:Z> = <var:q> $ ahead of the evaluation of our list of commands , then we have $ <var:T> = <nat:2> \times <var:q> ^ <nat:2> + <nat:1> \times <var:q> + <nat:2> $ once program exits . \end{theorem} \begin{proof} The argument for this set of instructions can be given with standard Hoare reasoning . After , \verb | { <var:Z> = <var:q> } <var:m1> := <var:Z> { <var:Z> = <var:q> \land <var:m1> = <var:q> } | , \verb | { <var:Z> = <var:q> \land <var:m1> = <var:q> } <var:m2> := <var:m1> * <var:Z> { <var:Z> = <var:q> \land <var:m1> = <var:q> \land <var:m2> = <var:q> ^ <nat:2> } | , \verb | { <var:Z> = <var:q> \land <var:m1> = <var:q> \land <var:m2> = <var:q> ^ <nat:2> } <var:m0> := <nat:2> { <var:Z> = <var:q> \land <var:m1> = <var:q> \land <var:m2> = <var:q> ^ <nat:2> \land <var:m0> = <nat:2> } | and \verb | { <var:Z> = <var:q> \land <var:m1> = <var:q> \land <var:m2> = <var:q> ^ <nat:2> \land <var:m0> = <nat:2> } <var:m1> := <var:m1> * <nat:1> { <var:Z> = <var:q> \land <var:m1> = <nat:1> \cdot <var:q> \land <var:m2> = <var:q> ^ <nat:2> \land <var:m0> = <nat:2> } | . This is sound by the assignment scheme given by Hoare techniques . Going forward , we have \verb | { <var:Z> = <var:q> } <var:m1> := <var:Z> { <var:Z> = <var:q> \land <var:m1> = <var:q> } | , \verb | { <var:Z> = <var:q> \land <var:m1> = <var:q> } <var:m2> := <var:m1> * <var:Z> { <var:Z> = <var:q> \land <var:m1> = <var:q> \land <var:m2> = <var:q> ^ <nat:2> } | and \verb | { <var:Z> = <var:q> \land <var:m1> = <var:q> \land <var:m2> = <var:q> ^ <nat:2> } <var:m0> := <nat:2> { <var:Z> = <var:q> \land <var:m1> = <var:q> \land <var:m2> = <var:q> ^ <nat:2> \land <var:m0> = <nat:2> } | . This is guaranteed through the variable assignmet rule defined by standard Hoare techniques . Observing the proceeding line of code contained in our code segment , we see \verb | { <var:Z> = <var:q> } <var:m1> := <var:Z> { <var:Z> = <var:q> \land <var:m1> = <var:q> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m1> := <var:Z> ; <var:m2> := <var:m1> * <var:Z> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:1> ; <var:m2> := <var:m2> * <nat:2> ; <var:T> := <var:m2> <var:T> := <var:T> + <var:m1> <var:T> := <var:T> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Z> = <var:q> }} <def:poly> {{ <var:T> = <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:m1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:m1> = <var:q> /\ <var:m2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:m1> = <var:q> /\ <var:m2> = <var:q> ^ <nat:2> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:m1> = <nat:1> * <var:q> /\ <var:m2> = <var:q> ^ <nat:2> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:m1> = <nat:1> * <var:q> /\ <var:m2> = <nat:2> * <var:q> ^ <nat:2> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:m1> = <nat:1> * <var:q> /\ <var:m0> = <nat:2> /\ <var:T> = <nat:2> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:m0> = <nat:2> /\ <var:T> = <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:q> /\ <var:T> = <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 