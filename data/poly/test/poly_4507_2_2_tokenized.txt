\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b> := <nat:4> ; <var:b> := <nat:1> + <var:b> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:Y> = <var:I> $ before executing our list of commands it holds that we have $ <var:b> = <nat:4> \cdot <var:I> + <nat:1> $ once segment of code is done . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions can be seen by standard Hoare reasoning . Moving forward to the proceeding piece of code seen in our series of instructions , the variable update line defining $ <nat:4> $ as $ <var:b>$ . This line moves the precondition $ \{ <var:Y> = <var:I> \} $ to the condition $ \{ <var:Y> = <var:I> \land <var:b> = <nat:4> \} $ . Stepping through , we have the assignment line letting $ <nat:1> + <var:b> * <var:Y$ toward $ <var:b>$ . This forwards $ \{ <var:Y> = <var:I> \land <var:b> = <nat:4> \} $ toward the postcondition $ \{ <var:Y> = <var:I> \land <var:b> = <nat:4> * <var:I> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:4> ; <var:b> := <nat:1> + <var:b> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:Y> = <var:I> }} <def:poly> {{ <var:b> = <nat:4> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:I> /\ <var:b> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:I> /\ <var:b> = <nat:4> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 