\begin{document} \begin{theorem} Let the following code segment as follows \begin{verbatim} <var:r0> := <nat:2> ; <var:Z> := <var:r0> \end{verbatim} Given it to be that $ <var:p> = <var:B> $ before the execution of this code , then $ <var:Z> = <nat:2> $ after segment of code has finished . \end{theorem} \begin{proof} Applying usual Hoare reasoning results in : \begin{eqnarray} \{ <var:p> = <var:B> \} \\ <var:r0> := <nat:2> ; \\ \{ <var:p> = <var:B> \land <var:r0> = <nat:2> \} \\ <var:Z> := <var:r0> \\ \{ <var:p> = <var:B> \land <var:Z> = <nat:2> \} \end{eqnarray} Given the preceding argument , this series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:p> = <var:B> }} <var:r0> := <nat:2> ; <var:Z> := <var:r0> {{ <var:Z> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:Z> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 