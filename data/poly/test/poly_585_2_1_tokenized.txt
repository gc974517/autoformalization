\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D0> := <nat:4> ; <var:g> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> in \emph{Imp} . Assume --- taking positive integer coefficients $ <var:d> $ --- that $ <var:P> = <var:d> $ prior to executing the series of commands it holds that $ <var:g> = <nat:4> $ after series of commands is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands is accomplished using standard Hoare logic . Further , we see the binding code binding $ <nat:4> $ to $ <var:D0>$ . This advances the condition $ \{ <var:P> = <var:d> \} $ as the condition $ \{ <var:P> = <var:d> \land <var:D0> = <nat:4> \} $ . This is shown through the assignment scheme given in usual Hoare logic . Going forward , we have the variable assignmet code defining $ <var:D0$ as $ <var:g>$ . This moves the precondition $ \{ <var:P> = <var:d> \land <var:D0> = <nat:4> \} $ to $ \{ <var:P> = <var:d> \land <var:g> = <nat:4> \} $ . This is given through the assignment law given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:4> ; <var:g> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:P> = <var:d> }} <def:poly> {{ <var:g> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:g> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 