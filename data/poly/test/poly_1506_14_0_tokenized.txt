\begin{document} \begin{theorem} Define a list of commands as follows \begin{verbatim} <var:O0> := <nat:6> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:S> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:S> ; <var:O2> := <var:O2> * <var:S> ; <var:O3> := <nat:5> ; <var:O3> := <var:O3> * <var:S> ; <var:O3> := <var:O3> * <var:S> ; <var:O3> := <var:O3> * <var:S> ; <var:F> := <var:O3> ; <var:F> := <var:F> + <var:O2> ; <var:F> := <var:F> + <var:O1> ; <var:F> := <var:F> + <var:O0> \end{verbatim} Assume , for every natural coefficients $ <var:L> $ , it to be that $ <var:S> = <var:L> $ before running this series of instructions it holds that we see $ <var:F> = <nat:5> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:8> \times <var:L> + <nat:6> $ once list of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions can be demonstrated through usual Hoare logic . Honing in on the proceeding piece of code contained in the segment of code , we see the binding command \verb | <var:O0> := <nat:6> ; | . This moves the condition $ \{ <var:S> = <var:L> \} $ to the condition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \} $ . This is ensured through the assignment law in Hoare logic . Immediately after , the variable assignmet code binding $ <nat:8> $ as $ <var:O1>$ . This redefines the precondition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \} $ as the condition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \} $ . Jumping to the upcoming line of code in the set of instructions , the binding line letting $ <var:O1> * <var:S> $ toward $ <var:O1>$ . This takes the condition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \} $ as the condition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \} $ . Honing in on the upcoming statement contained in the series of commands , the assignment command \verb | <var:O2> := <nat:1> ; | . This line advances the precondition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \} $ into $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \} $ . This is deduced with the assignment law given in standard Hoare reasoning . Moving on to the next step , the variable assignmet command giving $ <var:O2> * <var:S> $ to $ <var:O2>$ . This forwards the condition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \} $ to the condition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> \} $ . This is deduced by the assignment rule defined in usual Hoare techniques . Advancing to the next step , the variable update command giving $ <var:O2> * <var:S> $ as $ <var:O2>$ . This statement transfers the condition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> \} $ into $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> ^ <nat:2> \} $ . This is deduced using the assignment inference rule in Hoare techniques . After , the environment update statement assigning $ <nat:5> $ to $ <var:O3>$ . This forwards the condition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> ^ <nat:2> \} $ toward the condition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:O3> = <nat:5> \} $ . After , we see the variable assignmet code \verb | <var:O3> := <var:O3> * <var:S> ; | . This command redefines the precondition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:O3> = <nat:5> \} $ as $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:O3> = <nat:5> \cdot <var:L> \} $ . Going to the next step , we have the environment update statement \verb | <var:O3> := <var:O3> * <var:S> ; | . This statement advances the precondition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:O3> = <nat:5> \cdot <var:L> \} $ as $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:O3> = <nat:5> \cdot <var:L> ^ <nat:2> \} $ . Moving onward , we see the variable update code giving $ <var:O3> * <var:S> $ into $ <var:O3>$ . This forwards the condition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:O3> = <nat:5> \cdot <var:L> ^ <nat:2> \} $ toward $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:O3> = <nat:5> \cdot <var:L> ^ <nat:3> \} $ . Advancing on , we have the statement \verb | <var:F> := <var:O3> ; | . This line moves $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:O3> = <nat:5> \cdot <var:L> ^ <nat:3> \} $ to the condition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:F> = <nat:5> \cdot <var:L> ^ <nat:3> \} $ . Focusing on the next statement in the segment of code , we have the command giving $ <var:F> + <var:O2> $ toward $ <var:F>$ . This line takes the condition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:O2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:F> = <nat:5> \cdot <var:L> ^ <nat:3> \} $ as the postcondition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:F> = <nat:5> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> \} $ . Honing in on the proceeding statement contained in our set of commands , we have the binding statement assigning $ <var:F> + <var:O1> $ toward $ <var:F>$ . This redefines $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:O1> = <nat:8> \cdot <var:L> \land <var:F> = <nat:5> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> \} $ as $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:F> = <nat:5> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:8> \cdot <var:L> \} $ . Next , we have the binding command \verb | <var:F> := <var:F> + <var:O0> | . This command moves the condition $ \{ <var:S> = <var:L> \land <var:O0> = <nat:6> \land <var:F> = <nat:5> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:8> \cdot <var:L> \} $ to the condition $ \{ <var:S> = <var:L> \land <var:F> = <nat:5> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:8> \cdot <var:L> + <nat:6> \} $ . This is ensured through the assignment rule from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:S> = <var:L> }} <var:O0> := <nat:6> ; <var:O1> := <nat:8> ; <var:O1> := <var:O1> * <var:S> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:S> ; <var:O2> := <var:O2> * <var:S> ; <var:O3> := <nat:5> ; <var:O3> := <var:O3> * <var:S> ; <var:O3> := <var:O3> * <var:S> ; <var:O3> := <var:O3> * <var:S> ; <var:F> := <var:O3> ; <var:F> := <var:F> + <var:O2> ; <var:F> := <var:F> + <var:O1> ; <var:F> := <var:F> + <var:O0> {{ <var:F> = <nat:5> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:8> * <var:L> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:L> /\ <var:O2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:L> /\ <var:O2> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:L> /\ <var:O2> = <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:L> /\ <var:O2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:O3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:L> /\ <var:O2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:O3> = <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:L> /\ <var:O2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:O3> = <nat:5> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:L> /\ <var:O2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:O3> = <nat:5> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:L> /\ <var:O2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:F> = <nat:5> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:8> * <var:L> /\ <var:F> = <nat:5> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:O0> = <nat:6> /\ <var:F> = <nat:5> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:8> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:F> = <nat:5> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:8> * <var:L> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 