\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:C> ; <var:e2> := <var:e1> * <var:C> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:8> ; <var:e2> := <var:e2> * <nat:7> ; <var:U> := <var:e2> <var:U> := <var:U> + <var:e1> <var:U> := <var:U> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:C> = <var:T> $ ( with some positive numbers $ <var:T> $ ) before evaluating the list of instructions , it must be that we see $ <var:U> = <nat:7> \times <var:T> ^ <nat:2> + <nat:8> \times <var:T> + <nat:2> $ once code segment is done . \end{theorem} \begin{proof} The proof of the program is clear through typical Hoare reasoning . Advancing to the upcoming commands seen in the program , we see \begin{eqnarray} \{ <var:C> = <var:T> \} \, <var:e1> := <var:C> \, \{ <var:C> = <var:T> \land <var:e1> = <var:T> \} \\ \{ <var:C> = <var:T> \land <var:e1> = <var:T> \} \, <var:e2> := <var:e1> * <var:C> \, \{ <var:C> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <var:T> ^ <nat:2> \} \\ \{ <var:C> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <var:T> ^ <nat:2> \} \, <var:e0> := <nat:2> \, \{ <var:C> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <var:T> ^ <nat:2> \land <var:e0> = <nat:2> \} \\ \{ <var:C> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <var:T> ^ <nat:2> \land <var:e0> = <nat:2> \} \, <var:e1> := <var:e1> * <nat:8> \, \{ <var:C> = <var:T> \land <var:e1> = <nat:8> * <var:T> \land <var:e2> = <var:T> ^ <nat:2> \land <var:e0> = <nat:2> \} \end{eqnarray} This is deduced through the variable binding inference rule of typical Hoare logic . Jumping to the upcoming lines of codeseen in our series of instructions , we see \begin{eqnarray} \{ <var:C> = <var:T> \} \, <var:e1> := <var:C> \, \{ <var:C> = <var:T> \land <var:e1> = <var:T> \} \\ \{ <var:C> = <var:T> \land <var:e1> = <var:T> \} \, <var:e2> := <var:e1> * <var:C> \, \{ <var:C> = <var:T> \land <var:e1> = <var:T> \land <var:e2> = <var:T> ^ <nat:2> \} \end{eqnarray} Shifting focus toward the proceeding command seen in our list of commands , we have \begin{eqnarray} \{ <var:C> = <var:T> \} \, <var:e1> := <var:C> \, \{ <var:C> = <var:T> \land <var:e1> = <var:T> \} \end{eqnarray} This is shown to be logically sound with the law in standard Hoare logic . Moving on to the next step , \begin{eqnarray} \{ <var:C> = <var:T> \} \, <var:e1> := <var:C> \, \{ <var:C> = <var:T> \land <var:e1> = <var:T> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e1> := <var:C> ; <var:e2> := <var:e1> * <var:C> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:8> ; <var:e2> := <var:e2> * <nat:7> ; <var:U> := <var:e2> <var:U> := <var:U> + <var:e1> <var:U> := <var:U> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:C> = <var:T> }} <def:poly> {{ <var:U> = <nat:7> * <var:T> ^ <nat:2> + <nat:8> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:e1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:e1> = <var:T> /\ <var:e2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:e1> = <var:T> /\ <var:e2> = <var:T> ^ <nat:2> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:e1> = <nat:8> * <var:T> /\ <var:e2> = <var:T> ^ <nat:2> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:e1> = <nat:8> * <var:T> /\ <var:e2> = <nat:7> * <var:T> ^ <nat:2> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:e1> = <nat:8> * <var:T> /\ <var:e0> = <nat:2> /\ <var:U> = <nat:7> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:e0> = <nat:2> /\ <var:U> = <nat:7> * <var:T> ^ <nat:2> + <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:T> /\ <var:U> = <nat:7> * <var:T> ^ <nat:2> + <nat:8> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 