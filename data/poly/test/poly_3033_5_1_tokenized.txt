\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} : \begin{verbatim} <var:O1> := <var:f> ; <var:O0> := <nat:4> ; <var:O1> := <var:O1> * <nat:1> ; <var:I> := <var:O1> <var:I> := <var:I> + <var:O0> \end{verbatim} Allowing $ <var:f> = <var:c> $ ahead of the evaluation of the series of instructions it holds that we have $ <var:I> = <nat:1> \times <var:c> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for this segment of code is shown with usual Hoare techniques . Considering the next statement seen in the set of instructions , we see \begin{eqnarray} \{ <var:f> = <var:c> \} \, <var:O1> := <var:f> \, \{ <var:f> = <var:c> \land <var:O1> = <var:c> \} \end{eqnarray} Next , \begin{eqnarray} \{ <var:f> = <var:c> \} \, <var:O1> := <var:f> \, \{ <var:f> = <var:c> \land <var:O1> = <var:c> \} \\ \{ <var:f> = <var:c> \land <var:O1> = <var:c> \} \, <var:O0> := <nat:4> \, \{ <var:f> = <var:c> \land <var:O1> = <var:c> \land <var:O0> = <nat:4> \} \end{eqnarray} Considering the next piece of code contained in the set of commands , we have \begin{eqnarray} \{ <var:f> = <var:c> \} \, <var:O1> := <var:f> \, \{ <var:f> = <var:c> \land <var:O1> = <var:c> \} \end{eqnarray} Shifting focus toward the proceeding piece of code in our set of commands , we see \begin{eqnarray} \{ <var:f> = <var:c> \} \, <var:O1> := <var:f> \, \{ <var:f> = <var:c> \land <var:O1> = <var:c> \} \end{eqnarray} This is ensured using the variable update rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:f> = <var:c> }} <var:O1> := <var:f> ; <var:O0> := <nat:4> ; <var:O1> := <var:O1> * <nat:1> ; <var:I> := <var:O1> <var:I> := <var:I> + <var:O0> {{ <var:I> = <nat:1> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:O1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:O1> = <var:c> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:O1> = <nat:1> * <var:c> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:O0> = <nat:4> /\ <var:I> = <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:I> = <nat:1> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 