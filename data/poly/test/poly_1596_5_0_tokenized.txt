\begin{document} \begin{theorem} Take a list of instructions : \begin{verbatim} <var:R0> := <nat:2> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:x> ; <var:h> := <var:R1> ; <var:h> := <var:h> + <var:R0> \end{verbatim} Allow $ <var:x> = <var:C> $ before evaluating this code it must be that we have $ <var:h> = <nat:9> \times <var:C> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for our series of commands is given using typical Hoare reasoning . Looking at the subsequent bit of code found in the code , the variable binding code binding $ <nat:2> $ into $ <var:R0>$ . This statement advances $ \{ <var:x> = <var:C> \} $ into the condition $ \{ <var:x> = <var:C> \land <var:R0> = <nat:2> \} $ . Now , we see the binding command letting $ <nat:9> $ to $ <var:R1>$ . This moves the condition $ \{ <var:x> = <var:C> \land <var:R0> = <nat:2> \} $ as $ \{ <var:x> = <var:C> \land <var:R0> = <nat:2> \land <var:R1> = <nat:9> \} $ . Moving forward to the next step , the statement \verb | <var:R1> := <var:R1> * <var:x> ; | . This command advances the condition $ \{ <var:x> = <var:C> \land <var:R0> = <nat:2> \land <var:R1> = <nat:9> \} $ toward the condition $ \{ <var:x> = <var:C> \land <var:R0> = <nat:2> \land <var:R1> = <nat:9> * <var:C> \} $ . Jumping to the subsequent piece of code contained in our program , we see the variable assignmet code assigning $ <var:R1> $ as $ <var:h>$ . This statement takes $ \{ <var:x> = <var:C> \land <var:R0> = <nat:2> \land <var:R1> = <nat:9> * <var:C> \} $ into $ \{ <var:x> = <var:C> \land <var:R0> = <nat:2> \land <var:h> = <nat:9> * <var:C> \} $ . Moving onward , we have the line \verb | <var:h> := <var:h> + <var:R0> | . This statement forwards the condition $ \{ <var:x> = <var:C> \land <var:R0> = <nat:2> \land <var:h> = <nat:9> * <var:C> \} $ as the postcondition $ \{ <var:x> = <var:C> \land <var:h> = <nat:9> * <var:C> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:x> = <var:C> }} <var:R0> := <nat:2> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:x> ; <var:h> := <var:R1> ; <var:h> := <var:h> + <var:R0> {{ <var:h> = <nat:9> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:R0> = <nat:2> /\ <var:h> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:h> = <nat:9> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 