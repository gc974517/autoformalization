\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:g> := <nat:3> ; <var:g> := <nat:2> + <var:g> * <var:L> ; <var:g> := <nat:4> + <var:g> * <var:L> ; <var:g> := <var:g> * <var:L> ; <var:g> := <nat:3> + <var:g> * <var:L> ; <var:g> := <nat:2> + <var:g> * <var:L> ; <var:g> := <nat:1> + <var:g> * <var:L> ; <var:g> := <var:g> * <var:L> ; <var:g> := <nat:4> + <var:g> * <var:L> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Allowing $ <var:L> = <var:k> $ for every positive coefficients $ <var:k> $ prior to executing our series of commands it follows that $ <var:g> = <nat:3> \cdot <var:k> ^ <nat:8> + <nat:2> \cdot <var:k> ^ <nat:7> + <nat:4> \cdot <var:k> ^ <nat:6> + <nat:3> \cdot <var:k> ^ <nat:4> + <nat:2> \cdot <var:k> ^ <nat:3> + <nat:1> \cdot <var:k> ^ <nat:2> + <nat:4> $ after list of instructions has terminated . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions can be accomplished through typical Hoare techniques . Focusing on the following statements contained in our list of commands , we see \[ \begin{tabular} {rcl} \{ <var:L> = <var:k> \} & <var:g> := <nat:3> & \{ <var:L> = <var:k> \land <var:g> = <nat:3> \} \\ \{ <var:L> = <var:k> \land <var:g> = <nat:3> \} & <var:g> := <nat:2> + <var:g> * <var:L> & \{ <var:L> = <var:k> \land <var:g> = <nat:3> \cdot <var:k> + <nat:2> \} \\ \{ <var:L> = <var:k> \land <var:g> = <nat:3> \cdot <var:k> + <nat:2> \} & <var:g> := <nat:4> + <var:g> * <var:L> & \{ <var:L> = <var:k> \land <var:g> = <nat:3> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:4> \} \\ \{ <var:L> = <var:k> \land <var:g> = <nat:3> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:4> \} & <var:g> := <var:g> * <var:L> & \{ <var:L> = <var:k> \land <var:g> = <nat:3> \cdot <var:k> ^ <nat:3> + <nat:2> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + \} \end{tabular} This is sound with the variable update inference rule in usual Hoare reasoning . Paying attention to the proceeding pieces of code contained in the segment of code , we see \[ \begin{tabular} {rcl} \{ <var:L> = <var:k> \} & <var:g> := <nat:3> & \{ <var:L> = <var:k> \land <var:g> = <nat:3> \} \\ \{ <var:L> = <var:k> \land <var:g> = <nat:3> \} & <var:g> := <nat:2> + <var:g> * <var:L> & \{ <var:L> = <var:k> \land <var:g> = <nat:3> \cdot <var:k> + <nat:2> \} \\ \{ <var:L> = <var:k> \land <var:g> = <nat:3> \cdot <var:k> + <nat:2> \} & <var:g> := <nat:4> + <var:g> * <var:L> & \{ <var:L> = <var:k> \land <var:g> = <nat:3> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:4> \} \end{tabular} Moving on to the next statements seen in our code , we have \[ \begin{tabular} {rcl} \{ <var:L> = <var:k> \} & <var:g> := <nat:3> & \{ <var:L> = <var:k> \land <var:g> = <nat:3> \} \\ \{ <var:L> = <var:k> \land <var:g> = <nat:3> \} & <var:g> := <nat:2> + <var:g> * <var:L> & \{ <var:L> = <var:k> \land <var:g> = <nat:3> \cdot <var:k> + <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:3> ; <var:g> := <nat:2> + <var:g> * <var:L> ; <var:g> := <nat:4> + <var:g> * <var:L> ; <var:g> := <var:g> * <var:L> ; <var:g> := <nat:3> + <var:g> * <var:L> ; <var:g> := <nat:2> + <var:g> * <var:L> ; <var:g> := <nat:1> + <var:g> * <var:L> ; <var:g> := <var:g> * <var:L> ; <var:g> := <nat:4> + <var:g> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:L> = <var:k> }} <def:poly> {{ <var:g> = <nat:3> * <var:k> ^ <nat:8> + <nat:2> * <var:k> ^ <nat:7> + <nat:4> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:k> /\ <var:g> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:k> /\ <var:g> = <nat:3> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:k> /\ <var:g> = <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:k> /\ <var:g> = <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:k> /\ <var:g> = <nat:3> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:k> /\ <var:g> = <nat:3> * <var:k> ^ <nat:5> + <nat:2> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:k> /\ <var:g> = <nat:3> * <var:k> ^ <nat:6> + <nat:2> * <var:k> ^ <nat:5> + <nat:4> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:k> /\ <var:g> = <nat:3> * <var:k> ^ <nat:7> + <nat:2> * <var:k> ^ <nat:6> + <nat:4> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:k> /\ <var:g> = <nat:3> * <var:k> ^ <nat:8> + <nat:2> * <var:k> ^ <nat:7> + <nat:4> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 