\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:O1> := <var:p> ; <var:O2> := <var:O1> * <var:p> ; <var:O3> := <var:O2> * <var:p> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:4> ; <var:O3> := <var:O3> * <nat:4> ; <var:Z> := <var:O3> <var:Z> := <var:Z> + <var:O1> <var:Z> := <var:Z> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:p> = <var:q> $ prior to the evaluation of the set of instructions , it must be that we see $ <var:Z> = <nat:4> \cdot <var:q> ^ <nat:3> + <nat:4> \cdot <var:q> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for this set of instructions can be done with typical Hoare reasoning . Now , \begin{verbatim} { <var:p> = <var:q> } <var:O1> := <var:p> { <var:p> = <var:q> \land <var:O1> = <var:q> } { <var:p> = <var:q> \land <var:O1> = <var:q> } <var:O2> := <var:O1> * <var:p> { <var:p> = <var:q> \land <var:O1> = <var:q> \land <var:O2> = <var:q> ^ <nat:2> } \end{verbatim} This is deduced using the variable assignmet law from typical Hoare reasoning . Jumping to the upcoming commands found in the list of commands , we have \begin{verbatim} { <var:p> = <var:q> } <var:O1> := <var:p> { <var:p> = <var:q> \land <var:O1> = <var:q> } { <var:p> = <var:q> \land <var:O1> = <var:q> } <var:O2> := <var:O1> * <var:p> { <var:p> = <var:q> \land <var:O1> = <var:q> \land <var:O2> = <var:q> ^ <nat:2> } \end{verbatim} This is guaranteed by the variable assignmet rule defined by usual Hoare techniques . Following , we see \begin{verbatim} { <var:p> = <var:q> } <var:O1> := <var:p> { <var:p> = <var:q> \land <var:O1> = <var:q> } \end{verbatim} This is known to be sound with the environment update inference rule defined in usual Hoare logic . Further , we have \begin{verbatim} { <var:p> = <var:q> } <var:O1> := <var:p> { <var:p> = <var:q> \land <var:O1> = <var:q> } { <var:p> = <var:q> \land <var:O1> = <var:q> } <var:O2> := <var:O1> * <var:p> { <var:p> = <var:q> \land <var:O1> = <var:q> \land <var:O2> = <var:q> ^ <nat:2> } \end{verbatim} This is given with the law found in typical Hoare reasoning . Immediately following , \begin{verbatim} { <var:p> = <var:q> } <var:O1> := <var:p> { <var:p> = <var:q> \land <var:O1> = <var:q> } { <var:p> = <var:q> \land <var:O1> = <var:q> } <var:O2> := <var:O1> * <var:p> { <var:p> = <var:q> \land <var:O1> = <var:q> \land <var:O2> = <var:q> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:p> ; <var:O2> := <var:O1> * <var:p> ; <var:O3> := <var:O2> * <var:p> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:4> ; <var:O3> := <var:O3> * <nat:4> ; <var:Z> := <var:O3> <var:Z> := <var:Z> + <var:O1> <var:Z> := <var:Z> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:p> = <var:q> }} <def:poly> {{ <var:Z> = <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:O1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:O1> = <var:q> /\ <var:O2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:O1> = <var:q> /\ <var:O2> = <var:q> ^ <nat:2> /\ <var:O3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:O1> = <var:q> /\ <var:O2> = <var:q> ^ <nat:2> /\ <var:O3> = <var:q> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:O1> = <nat:4> * <var:q> /\ <var:O2> = <var:q> ^ <nat:2> /\ <var:O3> = <var:q> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:O1> = <nat:4> * <var:q> /\ <var:O2> = <var:q> ^ <nat:2> /\ <var:O3> = <nat:4> * <var:q> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:O1> = <nat:4> * <var:q> /\ <var:O2> = <var:q> ^ <nat:2> /\ <var:O0> = <nat:2> /\ <var:Z> = <nat:4> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:O0> = <nat:2> /\ <var:Z> = <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:q> /\ <var:Z> = <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 