\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:9> ; <var:K> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Assuming it to hold that $ <var:U> = <var:k> $ prior to the evaluation of our series of commands it follows that we see $ <var:K> = <nat:9> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions is evident using typical Hoare logic . Looking at the proceeding bit of code in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:U> = <var:k> \} & <var:j0> := <nat:9> & \{ <var:U> = <var:k> \land <var:j0> = <nat:9> \} \end{tabular} Taking a look at the upcoming statement seen in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:U> = <var:k> \} & <var:j0> := <nat:9> & \{ <var:U> = <var:k> \land <var:j0> = <nat:9> \} \end{tabular} This is sound by the variable update law defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:9> ; <var:K> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:U> = <var:k> }} <def:poly> {{ <var:K> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:K> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 