\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:4> ; <var:K2> := <nat:4> ; <var:K2> := <var:K2> * <var:n> ; <var:K2> := <var:K2> * <var:n> ; <var:x> := <var:K2> ; <var:x> := <var:x> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Assume it to hold that $ <var:n> = <var:S> $ ( given every positive numbers $ <var:S> $ ) ahead of interpreting the code , then we have $ <var:x> = <nat:4> \cdot <var:S> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing Hoare logic produces : \begin{eqnarray} \{ <var:n> = <var:S> \} \\ <var:K0> := <nat:4> ; \\ \{ <var:n> = <var:S> \land <var:K0> = <nat:4> \} \end{eqnarray} Furthering interpreting this series of instructions yields : \begin{eqnarray} <var:K2> := <nat:4> ; \\ \{ <var:n> = <var:S> \land <var:K0> = <nat:4> \land <var:K2> = <nat:4> \} \\ <var:K2> := <var:K2> * <var:n> ; \\ \{ <var:n> = <var:S> \land <var:K0> = <nat:4> \land <var:K2> = <nat:4> \cdot <var:S> \} \\ <var:K2> := <var:K2> * <var:n> ; \\ \{ <var:n> = <var:S> \land <var:K0> = <nat:4> \land <var:K2> = <nat:4> \cdot <var:S> ^ <nat:2> \} \\ <var:x> := <var:K2> ; \\ \{ <var:n> = <var:S> \land <var:K0> = <nat:4> \land <var:x> = <nat:4> \cdot <var:S> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:K0> \\ \{ <var:n> = <var:S> \land <var:x> = <nat:4> \cdot <var:S> ^ <nat:2> + <nat:4> \} \end{eqnarray} As a result , this series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K0> := <nat:4> ; <var:K2> := <nat:4> ; <var:K2> := <var:K2> * <var:n> ; <var:K2> := <var:K2> * <var:n> ; <var:x> := <var:K2> ; <var:x> := <var:x> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:n> = <var:S> }} <def:poly> {{ <var:x> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:K0> = <nat:4> /\ <var:K2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:K0> = <nat:4> /\ <var:K2> = <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:K0> = <nat:4> /\ <var:K2> = <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:K0> = <nat:4> /\ <var:x> = <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:x> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 