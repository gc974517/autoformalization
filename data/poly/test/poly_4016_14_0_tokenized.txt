\begin{document} \begin{theorem} Consider the following code in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:6> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:i> ; <var:g2> := <nat:7> ; <var:g2> := <var:g2> * <var:i> ; <var:g2> := <var:g2> * <var:i> ; <var:g3> := <nat:7> ; <var:g3> := <var:g3> * <var:i> ; <var:g3> := <var:g3> * <var:i> ; <var:g3> := <var:g3> * <var:i> ; <var:W> := <var:g3> ; <var:W> := <var:W> + <var:g2> ; <var:W> := <var:W> + <var:g1> ; <var:W> := <var:W> + <var:g0> \end{verbatim} Assuming that $ <var:i> = <var:y> $ ( given all positive integers $ <var:y> $ ) ahead of evaluating this set of instructions , then we have $ <var:W> = <nat:7> \cdot <var:y> ^ <nat:3> + <nat:7> \cdot <var:y> ^ <nat:2> + <nat:7> \cdot <var:y> + <nat:6> $ once series of instructions exits . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands is shown using Hoare techniques . Observing the upcoming line found in our segment of code , we see the variable assignmet code \verb | <var:g0> := <nat:6> ; | . This forwards the condition $ \{ <var:i> = <var:y> \} $ to the condition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \} $ . This is known to be sound using the assignment rule found in standard Hoare techniques . Moving on , we have the assignment code \verb | <var:g1> := <nat:7> ; | . This moves the condition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \} $ to the postcondition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \} $ . Looking at the following command in the series of instructions , the variable binding statement giving $ <var:g1> * <var:i> $ toward $ <var:g1>$ . This forwards $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \} $ to the condition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \} $ . This is ensured using the assignment inference rule defined in typical Hoare reasoning . Moving forward to the following command seen in our code segment , the variable binding statement letting $ <nat:7> $ as $ <var:g2>$ . This command transfers the condition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \} $ to the postcondition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \} $ . This is known to be sound with the assignment inference rule from typical Hoare reasoning . Observing the upcoming bit of code in the list of commands , the line binding $ <var:g2> * <var:i> $ into $ <var:g2>$ . This redefines the condition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \} $ as $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> \} $ . This is deduced using the assignment scheme given in Hoare reasoning . Advancing to the following piece of code seen in our code , the environment update line \verb | <var:g2> := <var:g2> * <var:i> ; | . This code takes the precondition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> \} $ to $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> ^ <nat:2> \} $ . This is known to be sound by the assignment rule found in standard Hoare techniques . Moving forward to the next step , we have the variable assignmet statement yielding $ <nat:7> $ into $ <var:g3>$ . This code advances $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> ^ <nat:2> \} $ as $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> ^ <nat:2> \land <var:g3> = <nat:7> \} $ . Taking another step toward the proceeding piece of code found in the list of commands , we see the command giving $ <var:g3> * <var:i> $ toward $ <var:g3>$ . This command advances the precondition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> ^ <nat:2> \land <var:g3> = <nat:7> \} $ into the postcondition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> ^ <nat:2> \land <var:g3> = <nat:7> \cdot <var:y> \} $ . This is sound using the assignment law given in usual Hoare reasoning . Paying attention to the next step found in our list of commands , the environment update statement \verb | <var:g3> := <var:g3> * <var:i> ; | . This line redefines $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> ^ <nat:2> \land <var:g3> = <nat:7> \cdot <var:y> \} $ as $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> ^ <nat:2> \land <var:g3> = <nat:7> \cdot <var:y> ^ <nat:2> \} $ . This is guaranteed using the assignment law from typical Hoare techniques . Keeping momentum , we see the assignment statement assigning $ <var:g3> * <var:i> $ as $ <var:g3>$ . This takes the precondition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> ^ <nat:2> \land <var:g3> = <nat:7> \cdot <var:y> ^ <nat:2> \} $ into $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> ^ <nat:2> \land <var:g3> = <nat:7> \cdot <var:y> ^ <nat:3> \} $ . Moving on to the next command found in the list of instructions , we have the environment update code \verb | <var:W> := <var:g3> ; | . This takes the precondition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> ^ <nat:2> \land <var:g3> = <nat:7> \cdot <var:y> ^ <nat:3> \} $ to the condition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> ^ <nat:2> \land <var:W> = <nat:7> \cdot <var:y> ^ <nat:3> \} $ . This is shown through the assignment scheme of typical Hoare logic . Taking another step toward the proceeding line found in the series of commands , the binding line yielding $ <var:W> + <var:g2> $ as $ <var:W>$ . This forwards the condition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:g2> = <nat:7> \cdot <var:y> ^ <nat:2> \land <var:W> = <nat:7> \cdot <var:y> ^ <nat:3> \} $ as the condition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:W> = <nat:7> \cdot <var:y> ^ <nat:3> + <nat:7> \cdot <var:y> ^ <nat:2> \} $ . This is sound with the assignment scheme in Hoare logic . Taking another step toward the following piece of code seen in the list of instructions , we have the assignment line \verb | <var:W> := <var:W> + <var:g1> ; | . This advances the precondition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:g1> = <nat:7> \cdot <var:y> \land <var:W> = <nat:7> \cdot <var:y> ^ <nat:3> + <nat:7> \cdot <var:y> ^ <nat:2> \} $ toward the condition $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:W> = <nat:7> \cdot <var:y> ^ <nat:3> + <nat:7> \cdot <var:y> ^ <nat:2> + <nat:7> \cdot <var:y> \} $ . Moving forward to the proceeding step found in the segment of code , we have the environment update command \verb | <var:W> := <var:W> + <var:g0> | . This statement transfers $ \{ <var:i> = <var:y> \land <var:g0> = <nat:6> \land <var:W> = <nat:7> \cdot <var:y> ^ <nat:3> + <nat:7> \cdot <var:y> ^ <nat:2> + <nat:7> \cdot <var:y> \} $ as $ \{ <var:i> = <var:y> \land <var:W> = <nat:7> \cdot <var:y> ^ <nat:3> + <nat:7> \cdot <var:y> ^ <nat:2> + <nat:7> \cdot <var:y> + <nat:6> \} $ . This is shown to be logically sound with the assignment inference rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:i> = <var:y> }} <var:g0> := <nat:6> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:i> ; <var:g2> := <nat:7> ; <var:g2> := <var:g2> * <var:i> ; <var:g2> := <var:g2> * <var:i> ; <var:g3> := <nat:7> ; <var:g3> := <var:g3> * <var:i> ; <var:g3> := <var:g3> * <var:i> ; <var:g3> := <var:g3> * <var:i> ; <var:W> := <var:g3> ; <var:W> := <var:W> + <var:g2> ; <var:W> := <var:W> + <var:g1> ; <var:W> := <var:W> + <var:g0> {{ <var:W> = <nat:7> * <var:y> ^ <nat:3> + <nat:7> * <var:y> ^ <nat:2> + <nat:7> * <var:y> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:g0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> * <var:y> /\ <var:g2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> * <var:y> /\ <var:g2> = <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> * <var:y> /\ <var:g2> = <nat:7> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> * <var:y> /\ <var:g2> = <nat:7> * <var:y> ^ <nat:2> /\ <var:g3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> * <var:y> /\ <var:g2> = <nat:7> * <var:y> ^ <nat:2> /\ <var:g3> = <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> * <var:y> /\ <var:g2> = <nat:7> * <var:y> ^ <nat:2> /\ <var:g3> = <nat:7> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> * <var:y> /\ <var:g2> = <nat:7> * <var:y> ^ <nat:2> /\ <var:g3> = <nat:7> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> * <var:y> /\ <var:g2> = <nat:7> * <var:y> ^ <nat:2> /\ <var:W> = <nat:7> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:g0> = <nat:6> /\ <var:g1> = <nat:7> * <var:y> /\ <var:W> = <nat:7> * <var:y> ^ <nat:3> + <nat:7> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:g0> = <nat:6> /\ <var:W> = <nat:7> * <var:y> ^ <nat:3> + <nat:7> * <var:y> ^ <nat:2> + <nat:7> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:y> /\ <var:W> = <nat:7> * <var:y> ^ <nat:3> + <nat:7> * <var:y> ^ <nat:2> + <nat:7> * <var:y> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 