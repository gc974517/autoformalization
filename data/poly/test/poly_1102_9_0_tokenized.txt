\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:9> ; <var:o1> := <nat:5> ; <var:o1> := <var:o1> * <var:g> ; <var:o2> := <nat:9> ; <var:o2> := <var:o2> * <var:g> ; <var:o2> := <var:o2> * <var:g> ; <var:J> := <var:o2> ; <var:J> := <var:J> + <var:o1> ; <var:J> := <var:J> + <var:o0> \end{verbatim} Assume , assuming some $ <var:j> \in \mathbb{N} $ , it to hold that $ <var:g> = <var:j> $ prior to the evaluation of our segment of code then we have $ <var:J> = <nat:9> \cdot <var:j> ^ <nat:2> + <nat:5> \cdot <var:j> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of the program can be shown using the following decorated series of instructions . \begin{eqnarray} \{ <var:g> = <var:j> \} \\ <var:o0> := <nat:9> ; \\ \{ <var:g> = <var:j> \land <var:o0> = <nat:9> \} \\ <var:o1> := <nat:5> ; \\ \{ <var:g> = <var:j> \land <var:o0> = <nat:9> \land <var:o1> = <nat:5> \} \\ <var:o1> := <var:o1> * <var:g> ; \\ \{ <var:g> = <var:j> \land <var:o0> = <nat:9> \land <var:o1> = <nat:5> * <var:j> \} \\ <var:o2> := <nat:9> ; \\ \{ <var:g> = <var:j> \land <var:o0> = <nat:9> \land <var:o1> = <nat:5> * <var:j> \land <var:o2> = <nat:9> \} \\ <var:o2> := <var:o2> * <var:g> ; \\ \{ <var:g> = <var:j> \land <var:o0> = <nat:9> \land <var:o1> = <nat:5> * <var:j> \land <var:o2> = <nat:9> * <var:j> \} \\ <var:o2> := <var:o2> * <var:g> ; \\ \{ <var:g> = <var:j> \land <var:o0> = <nat:9> \land <var:o1> = <nat:5> * <var:j> \land <var:o2> = <nat:9> * <var:j> ^ <nat:2> \} \\ <var:J> := <var:o2> ; \\ \{ <var:g> = <var:j> \land <var:o0> = <nat:9> \land <var:o1> = <nat:5> * <var:j> \land <var:J> = <nat:9> * <var:j> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:o1> ; \\ \{ <var:g> = <var:j> \land <var:o0> = <nat:9> \land <var:J> = <nat:9> * <var:j> ^ <nat:2> + <nat:5> * <var:j> \} \\ <var:J> := <var:J> + <var:o0> \\ \{ <var:g> = <var:j> \land <var:J> = <nat:9> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:9> \} \end{eqnarray} Using Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:g> = <var:j> }} <var:o0> := <nat:9> ; <var:o1> := <nat:5> ; <var:o1> := <var:o1> * <var:g> ; <var:o2> := <nat:9> ; <var:o2> := <var:o2> * <var:g> ; <var:o2> := <var:o2> * <var:g> ; <var:J> := <var:o2> ; <var:J> := <var:J> + <var:o1> ; <var:J> := <var:J> + <var:o0> {{ <var:J> = <nat:9> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:5> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:5> * <var:j> /\ <var:o2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:5> * <var:j> /\ <var:o2> = <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:5> * <var:j> /\ <var:o2> = <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:5> * <var:j> /\ <var:J> = <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:o0> = <nat:9> /\ <var:J> = <nat:9> * <var:j> ^ <nat:2> + <nat:5> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:J> = <nat:9> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 