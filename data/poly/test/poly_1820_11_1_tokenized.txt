\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:Q> ; <var:e2> := <var:e1> * <var:Q> ; <var:e3> := <var:e2> * <var:Q> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:4> ; <var:e2> := <var:e2> * <nat:1> ; <var:e3> := <var:e3> * <nat:3> ; <var:c> := <var:e3> <var:c> := <var:c> + <var:e2> <var:c> := <var:c> + <var:e1> <var:c> := <var:c> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> . Allow $ <var:Q> = <var:f> $ before interpreting this program it must be that we have $ <var:c> = <nat:3> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for this series of instructions can be demonstrated by usual Hoare logic . Moving forward to the next step , the binding statement giving $ <var:Q> $ to $ <var:e1>$ . This statement takes $ \{ <var:Q> = <var:f> \} $ into the postcondition $ \{ <var:Q> = <var:f> \land <var:e1> = <var:f> \} $ . This is guaranteed through the assignment inference rule from Hoare techniques . Honing in on the upcoming bit of code in the set of commands , we see the variable assignmet statement \verb | <var:e2> := <var:e1> * <var:Q> ; | . This transfers the precondition $ \{ <var:Q> = <var:f> \land <var:e1> = <var:f> \} $ as the condition $ \{ <var:Q> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \} $ . Advancing to the subsequent line of code found in our set of instructions , the environment update code giving $ <var:e2> * <var:Q> $ into $ <var:e3>$ . This code transfers the precondition $ \{ <var:Q> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \} $ as the condition $ \{ <var:Q> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \} $ . Advancing to the next step , we see the environment update line \verb | <var:e0> := <nat:2> ; | . This command moves the condition $ \{ <var:Q> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \} $ to the condition $ \{ <var:Q> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e0> = <nat:2> \} $ . This is rigorously given with the assignment rule given by usual Hoare techniques . Jumping to the subsequent line found in the segment of code , we have the variable binding line \verb | <var:e1> := <var:e1> * <nat:4> ; | . This line forwards $ \{ <var:Q> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e0> = <nat:2> \} $ to $ \{ <var:Q> = <var:f> \land <var:e1> = <nat:4> * <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e0> = <nat:2> \} $ . Moving forward to the following step in our list of instructions , we see the variable binding line giving $ <var:e2> * <nat:1> $ toward $ <var:e2>$ . This command forwards the condition $ \{ <var:Q> = <var:f> \land <var:e1> = <nat:4> * <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e0> = <nat:2> \} $ into $ \{ <var:Q> = <var:f> \land <var:e1> = <nat:4> * <var:f> \land <var:e2> = <nat:1> * <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e0> = <nat:2> \} $ . This is shown to be logically sound through the assignment rule of usual Hoare techniques . Observing the subsequent bit of code in the list of instructions , the variable binding statement \verb | <var:e3> := <var:e3> * <nat:3> ; | . This code moves the precondition $ \{ <var:Q> = <var:f> \land <var:e1> = <nat:4> * <var:f> \land <var:e2> = <nat:1> * <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e0> = <nat:2> \} $ to the postcondition $ \{ <var:Q> = <var:f> \land <var:e1> = <nat:4> * <var:f> \land <var:e2> = <nat:1> * <var:f> ^ <nat:2> \land <var:e3> = <nat:3> * <var:f> ^ <nat:3> \land <var:e0> = <nat:2> \} $ . This is rigorously given with the assignment inference rule defined in usual Hoare techniques . Going to the next step , the command \verb | <var:c> := <var:e3> | . This line redefines the condition $ \{ <var:Q> = <var:f> \land <var:e1> = <nat:4> * <var:f> \land <var:e2> = <nat:1> * <var:f> ^ <nat:2> \land <var:e3> = <nat:3> * <var:f> ^ <nat:3> \land <var:e0> = <nat:2> \} $ to the condition $ \{ <var:Q> = <var:f> \land <var:e1> = <nat:4> * <var:f> \land <var:e2> = <nat:1> * <var:f> ^ <nat:2> \land <var:e0> = <nat:2> \land <var:c> = <nat:3> * <var:f> ^ <nat:3> \} $ . This is rigorously given through the assignment law given in Hoare techniques . Immediately after , we have the variable assignmet line binding $ <var:c> + <var:e2$ into $ <var:c>$ . This advances $ \{ <var:Q> = <var:f> \land <var:e1> = <nat:4> * <var:f> \land <var:e2> = <nat:1> * <var:f> ^ <nat:2> \land <var:e0> = <nat:2> \land <var:c> = <nat:3> * <var:f> ^ <nat:3> \} $ to the condition $ \{ <var:Q> = <var:f> \land <var:e1> = <nat:4> * <var:f> \land <var:e0> = <nat:2> \land <var:c> = <nat:3> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> \} $ . Advancing to the next step , the assignment line \verb | <var:c> := <var:c> + <var:e1> | . This code takes the precondition $ \{ <var:Q> = <var:f> \land <var:e1> = <nat:4> * <var:f> \land <var:e0> = <nat:2> \land <var:c> = <nat:3> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> \} $ into $ \{ <var:Q> = <var:f> \land <var:e0> = <nat:2> \land <var:c> = <nat:3> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> \} $ . This is guaranteed with the assignment scheme in Hoare reasoning . Advancing to the next line of code contained in the segment of code , the environment update line \verb | <var:c> := <var:c> + <var:e0> | . This code moves $ \{ <var:Q> = <var:f> \land <var:e0> = <nat:2> \land <var:c> = <nat:3> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> \} $ to the postcondition $ \{ <var:Q> = <var:f> \land <var:c> = <nat:3> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:Q> ; <var:e2> := <var:e1> * <var:Q> ; <var:e3> := <var:e2> * <var:Q> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:4> ; <var:e2> := <var:e2> * <nat:1> ; <var:e3> := <var:e3> * <nat:3> ; <var:c> := <var:e3> <var:c> := <var:c> + <var:e2> <var:c> := <var:c> + <var:e1> <var:c> := <var:c> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:Q> = <var:f> }} <def:poly> {{ <var:c> = <nat:3> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:e1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:e1> = <var:f> /\ <var:e2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:e1> = <var:f> /\ <var:e2> = <var:f> ^ <nat:2> /\ <var:e3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:e1> = <var:f> /\ <var:e2> = <var:f> ^ <nat:2> /\ <var:e3> = <var:f> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:e1> = <nat:4> * <var:f> /\ <var:e2> = <var:f> ^ <nat:2> /\ <var:e3> = <var:f> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:e1> = <nat:4> * <var:f> /\ <var:e2> = <nat:1> * <var:f> ^ <nat:2> /\ <var:e3> = <var:f> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:e1> = <nat:4> * <var:f> /\ <var:e2> = <nat:1> * <var:f> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:f> ^ <nat:3> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:e1> = <nat:4> * <var:f> /\ <var:e2> = <nat:1> * <var:f> ^ <nat:2> /\ <var:e0> = <nat:2> /\ <var:c> = <nat:3> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:e1> = <nat:4> * <var:f> /\ <var:e0> = <nat:2> /\ <var:c> = <nat:3> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:e0> = <nat:2> /\ <var:c> = <nat:3> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:f> /\ <var:c> = <nat:3> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 