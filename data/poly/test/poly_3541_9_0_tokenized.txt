\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:4> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:X> ; <var:c2> := <nat:7> ; <var:c2> := <var:c2> * <var:X> ; <var:c2> := <var:c2> * <var:X> ; <var:e> := <var:c2> ; <var:e> := <var:e> + <var:c1> ; <var:e> := <var:e> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> . Assume that we have $ <var:X> = <var:O> $ before the evaluation of this set of instructions , it must be that we have $ <var:e> = <nat:7> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> + <nat:4> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning yields : \begin{eqnarray} \{ <var:X> = <var:O> \} \\ <var:c0> := <nat:4> ; \\ \{ <var:X> = <var:O> \land <var:c0> = <nat:4> \} \\ <var:c1> := <nat:2> ; \\ \{ <var:X> = <var:O> \land <var:c0> = <nat:4> \land <var:c1> = <nat:2> \} \\ <var:c1> := <var:c1> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:c0> = <nat:4> \land <var:c1> = <nat:2> * <var:O> \} \\ <var:c2> := <nat:7> ; \\ \{ <var:X> = <var:O> \land <var:c0> = <nat:4> \land <var:c1> = <nat:2> * <var:O> \land <var:c2> = <nat:7> \} \\ <var:c2> := <var:c2> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:c0> = <nat:4> \land <var:c1> = <nat:2> * <var:O> \land <var:c2> = <nat:7> * <var:O> \} \\ <var:c2> := <var:c2> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:c0> = <nat:4> \land <var:c1> = <nat:2> * <var:O> \land <var:c2> = <nat:7> * <var:O> ^ <nat:2> \} \\ <var:e> := <var:c2> ; \\ \{ <var:X> = <var:O> \land <var:c0> = <nat:4> \land <var:c1> = <nat:2> * <var:O> \land <var:e> = <nat:7> * <var:O> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:c1> ; \\ \{ <var:X> = <var:O> \land <var:c0> = <nat:4> \land <var:e> = <nat:7> * <var:O> ^ <nat:2> + <nat:2> * <var:O> \} \\ <var:e> := <var:e> + <var:c0> \\ \{ <var:X> = <var:O> \land <var:e> = <nat:7> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:4> \} \end{eqnarray} Thusly , this set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:4> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:X> ; <var:c2> := <nat:7> ; <var:c2> := <var:c2> * <var:X> ; <var:c2> := <var:c2> * <var:X> ; <var:e> := <var:c2> ; <var:e> := <var:e> + <var:c1> ; <var:e> := <var:e> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:X> = <var:O> }} <def:poly> {{ <var:e> = <nat:7> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:2> * <var:O> /\ <var:c2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:2> * <var:O> /\ <var:c2> = <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:2> * <var:O> /\ <var:c2> = <nat:7> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:2> * <var:O> /\ <var:e> = <nat:7> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:c0> = <nat:4> /\ <var:e> = <nat:7> * <var:O> ^ <nat:2> + <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:e> = <nat:7> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 