\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:1> ; <var:g> := <var:Q0> \end{verbatim} Given it to hold that $ <var:s> = <var:n> $ ahead of executing the program it must be that $ <var:g> = <nat:1> $ once program has executed . \end{theorem} \begin{proof} Arguing the correctness of our series of commands is shown by usual Hoare logic . Paying attention to the proceeding lines contained in our set of commands , we have \begin{verbatim} { <var:s> = <var:n> } <var:Q0> := <nat:1> { <var:s> = <var:n> \land <var:Q0> = <nat:1> } { <var:s> = <var:n> \land <var:Q0> = <nat:1> } <var:g> := <var:Q0{ <var:s> = <var:n> \land <var:g> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:s> = <var:n> }} <var:Q0> := <nat:1> ; <var:g> := <var:Q0> {{ <var:g> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:g> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 