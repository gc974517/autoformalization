\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:t1> := <var:b> ; <var:t2> := <var:t1> * <var:b> ; <var:t3> := <var:t2> * <var:b> ; <var:t0> := <nat:3> ; <var:t2> := <var:t2> * <nat:3> ; <var:t3> := <var:t3> * <nat:3> ; <var:K> := <var:t3> <var:K> := <var:K> + <var:t2> <var:K> := <var:K> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> . Allowing ( for some natural numbers $ <var:m> $ ) it to be that $ <var:b> = <var:m> $ prior to the execution of our list of commands , it holds that we have $ <var:K> = <nat:3> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for this series of instructions is accomplished by standard Hoare reasoning . Observing the proceeding lines found in the program , we see \verb | { <var:b> = <var:m> } <var:t1> := <var:b> { <var:b> = <var:m> \land <var:t1> = <var:m> } | , \verb | { <var:b> = <var:m> \land <var:t1> = <var:m> } <var:t2> := <var:t1> * <var:b> { <var:b> = <var:m> \land <var:t1> = <var:m> \land <var:t2> = <var:m> ^ <nat:2> } | and \verb | { <var:b> = <var:m> \land <var:t1> = <var:m> \land <var:t2> = <var:m> ^ <nat:2> } <var:t3> := <var:t2> * <var:b> { <var:b> = <var:m> \land <var:t1> = <var:m> \land <var:t2> = <var:m> ^ <nat:2> \land <var:t3> = <var:m> ^ <nat:3> } | . After , we have \verb | { <var:b> = <var:m> } <var:t1> := <var:b> { <var:b> = <var:m> \land <var:t1> = <var:m> } | , \verb | { <var:b> = <var:m> \land <var:t1> = <var:m> } <var:t2> := <var:t1> * <var:b> { <var:b> = <var:m> \land <var:t1> = <var:m> \land <var:t2> = <var:m> ^ <nat:2> } | , \verb | { <var:b> = <var:m> \land <var:t1> = <var:m> \land <var:t2> = <var:m> ^ <nat:2> } <var:t3> := <var:t2> * <var:b> { <var:b> = <var:m> \land <var:t1> = <var:m> \land <var:t2> = <var:m> ^ <nat:2> \land <var:t3> = <var:m> ^ <nat:3> } | , \verb | { <var:b> = <var:m> \land <var:t1> = <var:m> \land <var:t2> = <var:m> ^ <nat:2> \land <var:t3> = <var:m> ^ <nat:3> } <var:t0> := <nat:3> { <var:b> = <var:m> \land <var:t1> = <var:m> \land <var:t2> = <var:m> ^ <nat:2> \land <var:t3> = <var:m> ^ <nat:3> \land <var:t0> = <nat:3> } | , \verb | { <var:b> = <var:m> \land <var:t1> = <var:m> \land <var:t2> = <var:m> ^ <nat:2> \land <var:t3> = <var:m> ^ <nat:3> \land <var:t0> = <nat:3> } <var:t2> := <var:t2> * <nat:3> { <var:b> = <var:m> \land <var:t1> = <var:m> \land <var:t2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:t3> = <var:m> ^ <nat:3> \land <var:t0> = <nat:3> } | and \verb | { <var:b> = <var:m> \land <var:t1> = <var:m> \land <var:t2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:t3> = <var:m> ^ <nat:3> \land <var:t0> = <nat:3> } <var:t3> := <var:t3> * <nat:3> { <var:b> = <var:m> \land <var:t1> = <var:m> \land <var:t2> = <nat:3> \times <var:m> ^ <nat:2> \land <var:t3> = <nat:3> \times <var:m> ^ <nat:3> \land <var:t0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:b> ; <var:t2> := <var:t1> * <var:b> ; <var:t3> := <var:t2> * <var:b> ; <var:t0> := <nat:3> ; <var:t2> := <var:t2> * <nat:3> ; <var:t3> := <var:t3> * <nat:3> ; <var:K> := <var:t3> <var:K> := <var:K> + <var:t2> <var:K> := <var:K> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:b> = <var:m> }} <def:poly> {{ <var:K> = <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:t1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:t1> = <var:m> /\ <var:t2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:t1> = <var:m> /\ <var:t2> = <var:m> ^ <nat:2> /\ <var:t3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:t1> = <var:m> /\ <var:t2> = <var:m> ^ <nat:2> /\ <var:t3> = <var:m> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:t1> = <var:m> /\ <var:t2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:t3> = <var:m> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:t1> = <var:m> /\ <var:t2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:t3> = <nat:3> * <var:m> ^ <nat:3> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:t1> = <var:m> /\ <var:t2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:t0> = <nat:3> /\ <var:K> = <nat:3> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:t1> = <var:m> /\ <var:t0> = <nat:3> /\ <var:K> = <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:m> /\ <var:K> = <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 