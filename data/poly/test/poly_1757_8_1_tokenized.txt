\begin{document} \begin{theorem} Define a set of commands as \begin{verbatim} <var:z1> := <var:Y> ; <var:z2> := <var:z1> * <var:Y> ; <var:z0> := <nat:3> ; <var:z1> := <var:z1> * <nat:3> ; <var:z2> := <var:z2> * <nat:1> ; <var:x> := <var:z2> <var:x> := <var:x> + <var:z1> <var:x> := <var:x> + <var:z0> \end{verbatim} Given $ <var:Y> = <var:N> $ prior to running this list of instructions , then we have $ <var:x> = <nat:1> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:3> $ once list of commands has finished . \end{theorem} \begin{proof} The way to prove correctness for our list of commands can be done with usual Hoare reasoning . Following , we have \begin{eqnarray} \{ <var:Y> = <var:N> \} \, <var:z1> := <var:Y> \, \{ <var:Y> = <var:N> \land <var:z1> = <var:N> \} \\ \{ <var:Y> = <var:N> \land <var:z1> = <var:N> \} \, <var:z2> := <var:z1> * <var:Y> \, \{ <var:Y> = <var:N> \land <var:z1> = <var:N> \land <var:z2> = <var:N> ^ <nat:2> \} \\ \{ <var:Y> = <var:N> \land <var:z1> = <var:N> \land <var:z2> = <var:N> ^ <nat:2> \} \, <var:z0> := <nat:3> \, \{ <var:Y> = <var:N> \land <var:z1> = <var:N> \land <var:z2> = <var:N> ^ <nat:2> \land <var:z0> = <nat:3> \} \\ \{ <var:Y> = <var:N> \land <var:z1> = <var:N> \land <var:z2> = <var:N> ^ <nat:2> \land <var:z0> = <nat:3> \} \, <var:z1> := <var:z1> * <nat:3> \, \{ <var:Y> = <var:N> \land <var:z1> = <nat:3> \cdot <var:N> \land <var:z2> = <var:N> ^ <nat:2> \land <var:z0> = <nat:3> \} \\ \{ <var:Y> = <var:N> \land <var:z1> = <nat:3> \cdot <var:N> \land <var:z2> = <var:N> ^ <nat:2> \land <var:z0> = <nat:3> \} \, <var:z2> := <var:z2> * <nat:1> \, \{ <var:Y> = <var:N> \land <var:z1> = <nat:3> \cdot <var:N> \land <var:z2> = <nat:1> \cdot <var:N> ^ <nat:2> \land <var:z0> = <nat:3> \} \end{eqnarray} This is deduced through the variable update inference rule from Hoare logic . Honing in on the proceeding bit of code seen in our code , we have \begin{eqnarray} \{ <var:Y> = <var:N> \} \, <var:z1> := <var:Y> \, \{ <var:Y> = <var:N> \land <var:z1> = <var:N> \} \end{eqnarray} This is rigorously given with the binding inference rule in Hoare reasoning . Going to the next step , we see \begin{eqnarray} \{ <var:Y> = <var:N> \} \, <var:z1> := <var:Y> \, \{ <var:Y> = <var:N> \land <var:z1> = <var:N> \} \end{eqnarray} This is known to be sound through the variable binding rule defined in usual Hoare reasoning . Keeping momentum , we see \begin{eqnarray} \{ <var:Y> = <var:N> \} \, <var:z1> := <var:Y> \, \{ <var:Y> = <var:N> \land <var:z1> = <var:N> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Y> = <var:N> }} <var:z1> := <var:Y> ; <var:z2> := <var:z1> * <var:Y> ; <var:z0> := <nat:3> ; <var:z1> := <var:z1> * <nat:3> ; <var:z2> := <var:z2> * <nat:1> ; <var:x> := <var:z2> <var:x> := <var:x> + <var:z1> <var:x> := <var:x> + <var:z0> {{ <var:x> = <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:z1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:z1> = <var:N> /\ <var:z2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:z1> = <var:N> /\ <var:z2> = <var:N> ^ <nat:2> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:z1> = <nat:3> * <var:N> /\ <var:z2> = <var:N> ^ <nat:2> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:z1> = <nat:3> * <var:N> /\ <var:z2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:z1> = <nat:3> * <var:N> /\ <var:z0> = <nat:3> /\ <var:x> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:z0> = <nat:3> /\ <var:x> = <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:x> = <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 