\begin{document} \begin{theorem} Take the following program in \emph{Imp} such that \begin{verbatim} <var:o> := <nat:1> ; <var:o> := <nat:3> + <var:o> * <var:x> ; <var:o> := <nat:4> + <var:o> * <var:x> ; <var:o> := <var:o> * <var:x> ; <var:o> := <nat:3> + <var:o> * <var:x> ; <var:o> := <nat:1> + <var:o> * <var:x> ; <var:o> := <nat:3> + <var:o> * <var:x> ; <var:o> := <nat:3> + <var:o> * <var:x> ; <var:o> := <nat:4> + <var:o> * <var:x> ; <var:o> := <nat:4> + <var:o> * <var:x> ; <var:o> := <nat:3> + <var:o> * <var:x> ; <var:o> := <nat:1> + <var:o> * <var:x> \end{verbatim} Allow that $ <var:x> = <var:C> $ prior to interpreting our set of commands , it holds that we have $ <var:o> = <nat:1> * <var:C> ^ <nat:11> + <nat:3> * <var:C> ^ <nat:10> + <nat:4> * <var:C> ^ <nat:9> + <nat:3> * <var:C> ^ <nat:7> + <nat:1> * <var:C> ^ <nat:6> + <nat:3> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:1> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning yields : \begin{eqnarray} \{ <var:x> = <var:C> \} \\ <var:o> := <nat:1> ; \\ \{ <var:x> = <var:C> \land <var:o> = <nat:1> \} \\ <var:o> := <nat:3> + <var:o> * <var:x> ; \\ \{ <var:x> = <var:C> \land <var:o> = <nat:1> \cdot <var:C> + <nat:3> \} \\ <var:o> := <nat:4> + <var:o> * <var:x> ; \\ \{ <var:x> = <var:C> \land <var:o> = <nat:1> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> + <nat:4> \} \\ <var:o> := <var:o> * <var:x> ; \\ \{ <var:x> = <var:C> \land <var:o> = <nat:1> \cdot <var:C> ^ <nat:3> + <nat:3> \cdot <var:C> ^ <nat:2> + <nat:4> \cdot <var:C> + \} \\ <var:o> := <nat:3> + <var:o> * <var:x> ; \\ \{ <var:x> = <var:C> \land <var:o> = <nat:1> \cdot <var:C> ^ <nat:4> + <nat:3> \cdot <var:C> ^ <nat:3> + <nat:4> \cdot <var:C> ^ <nat:2> + <nat:3> \} \\ <var:o> := <nat:1> + <var:o> * <var:x> ; \\ \{ <var:x> = <var:C> \land <var:o> = <nat:1> \cdot <var:C> ^ <nat:5> + <nat:3> \cdot <var:C> ^ <nat:4> + <nat:4> \cdot <var:C> ^ <nat:3> + <nat:3> \cdot <var:C> + <nat:1> \} \end{eqnarray} Advancing running this list of instructions results in : \begin{eqnarray} <var:o> := <nat:3> + <var:o> * <var:x> ; \\ \{ <var:x> = <var:C> \land <var:o> = <nat:1> \cdot <var:C> ^ <nat:6> + <nat:3> \cdot <var:C> ^ <nat:5> + <nat:4> \cdot <var:C> ^ <nat:4> + <nat:3> \cdot <var:C> ^ <nat:2> + <nat:1> \cdot <var:C> + <nat:3> \} \\ <var:o> := <nat:3> + <var:o> * <var:x> ; \\ \{ <var:x> = <var:C> \land <var:o> = <nat:1> \cdot <var:C> ^ <nat:7> + <nat:3> \cdot <var:C> ^ <nat:6> + <nat:4> \cdot <var:C> ^ <nat:5> + <nat:3> \cdot <var:C> ^ <nat:3> + <nat:1> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> + <nat:3> \} \\ <var:o> := <nat:4> + <var:o> * <var:x> ; \\ \{ <var:x> = <var:C> \land <var:o> = <nat:1> \cdot <var:C> ^ <nat:8> + <nat:3> \cdot <var:C> ^ <nat:7> + <nat:4> \cdot <var:C> ^ <nat:6> + <nat:3> \cdot <var:C> ^ <nat:4> + <nat:1> \cdot <var:C> ^ <nat:3> + <nat:3> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> + <nat:4> \} \\ <var:o> := <nat:4> + <var:o> * <var:x> ; \\ \{ <var:x> = <var:C> \land <var:o> = <nat:1> \cdot <var:C> ^ <nat:9> + <nat:3> \cdot <var:C> ^ <nat:8> + <nat:4> \cdot <var:C> ^ <nat:7> + <nat:3> \cdot <var:C> ^ <nat:5> + <nat:1> \cdot <var:C> ^ <nat:4> + <nat:3> \cdot <var:C> ^ <nat:3> + <nat:3> \cdot <var:C> ^ <nat:2> + <nat:4> \cdot <var:C> + <nat:4> \} \\ <var:o> := <nat:3> + <var:o> * <var:x> ; \\ \{ <var:x> = <var:C> \land <var:o> = <nat:1> \cdot <var:C> ^ <nat:10> + <nat:3> \cdot <var:C> ^ <nat:9> + <nat:4> \cdot <var:C> ^ <nat:8> + <nat:3> \cdot <var:C> ^ <nat:6> + <nat:1> \cdot <var:C> ^ <nat:5> + <nat:3> \cdot <var:C> ^ <nat:4> + <nat:3> \cdot <var:C> ^ <nat:3> + <nat:4> \cdot <var:C> ^ <nat:2> + <nat:4> \cdot <var:C> + <nat:3> \} \\ <var:o> := <nat:1> + <var:o> * <var:x> \\ \{ <var:x> = <var:C> \land <var:o> = <nat:1> \cdot <var:C> ^ <nat:11> + <nat:3> \cdot <var:C> ^ <nat:10> + <nat:4> \cdot <var:C> ^ <nat:9> + <nat:3> \cdot <var:C> ^ <nat:7> + <nat:1> \cdot <var:C> ^ <nat:6> + <nat:3> \cdot <var:C> ^ <nat:5> + <nat:3> \cdot <var:C> ^ <nat:4> + <nat:4> \cdot <var:C> ^ <nat:3> + <nat:4> \cdot <var:C> ^ <nat:2> + <nat:3> \cdot <var:C> + <nat:1> \} \end{eqnarray} Given the preceding argument , this code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:x> = <var:C> }} <var:o> := <nat:1> ; <var:o> := <nat:3> + <var:o> * <var:x> ; <var:o> := <nat:4> + <var:o> * <var:x> ; <var:o> := <var:o> * <var:x> ; <var:o> := <nat:3> + <var:o> * <var:x> ; <var:o> := <nat:1> + <var:o> * <var:x> ; <var:o> := <nat:3> + <var:o> * <var:x> ; <var:o> := <nat:3> + <var:o> * <var:x> ; <var:o> := <nat:4> + <var:o> * <var:x> ; <var:o> := <nat:4> + <var:o> * <var:x> ; <var:o> := <nat:3> + <var:o> * <var:x> ; <var:o> := <nat:1> + <var:o> * <var:x> {{ <var:o> = <nat:1> * <var:C> ^ <nat:11> + <nat:3> * <var:C> ^ <nat:10> + <nat:4> * <var:C> ^ <nat:9> + <nat:3> * <var:C> ^ <nat:7> + <nat:1> * <var:C> ^ <nat:6> + <nat:3> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:o> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:o> = <nat:1> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:o> = <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:o> = <nat:1> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:o> = <nat:1> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:o> = <nat:1> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:3> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:o> = <nat:1> * <var:C> ^ <nat:6> + <nat:3> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:o> = <nat:1> * <var:C> ^ <nat:7> + <nat:3> * <var:C> ^ <nat:6> + <nat:4> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:o> = <nat:1> * <var:C> ^ <nat:8> + <nat:3> * <var:C> ^ <nat:7> + <nat:4> * <var:C> ^ <nat:6> + <nat:3> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:o> = <nat:1> * <var:C> ^ <nat:9> + <nat:3> * <var:C> ^ <nat:8> + <nat:4> * <var:C> ^ <nat:7> + <nat:3> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:o> = <nat:1> * <var:C> ^ <nat:10> + <nat:3> * <var:C> ^ <nat:9> + <nat:4> * <var:C> ^ <nat:8> + <nat:3> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:o> = <nat:1> * <var:C> ^ <nat:11> + <nat:3> * <var:C> ^ <nat:10> + <nat:4> * <var:C> ^ <nat:9> + <nat:3> * <var:C> ^ <nat:7> + <nat:1> * <var:C> ^ <nat:6> + <nat:3> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 