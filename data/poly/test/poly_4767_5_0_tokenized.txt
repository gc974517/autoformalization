\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:1> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:K> ; <var:X> := <var:r1> ; <var:X> := <var:X> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Given that $ <var:K> = <var:G> $ --- given some whole numbers $ <var:G> $ --- before evaluating this set of instructions it must be that $ <var:X> = <nat:6> * <var:G> + <nat:1> $ when series of commands has terminated . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is demonstrated by usual Hoare logic . Taking a look at the subsequent lines of codecontained in the set of commands , we have \begin{eqnarray} \{ <var:K> = <var:G> \} \, <var:r0> := <nat:1> \, \{ <var:K> = <var:G> \land <var:r0> = <nat:1> \} \\ \{ <var:K> = <var:G> \land <var:r0> = <nat:1> \} \, <var:r1> := <nat:6> \, \{ <var:K> = <var:G> \land <var:r0> = <nat:1> \land <var:r1> = <nat:6> \} \end{eqnarray} This is shown to be logically sound with the assignment scheme obtained from usual Hoare techniques . Moving on , \begin{eqnarray} \{ <var:K> = <var:G> \} \, <var:r0> := <nat:1> \, \{ <var:K> = <var:G> \land <var:r0> = <nat:1> \} \\ \{ <var:K> = <var:G> \land <var:r0> = <nat:1> \} \, <var:r1> := <nat:6> \, \{ <var:K> = <var:G> \land <var:r0> = <nat:1> \land <var:r1> = <nat:6> \} \\ \{ <var:K> = <var:G> \land <var:r0> = <nat:1> \land <var:r1> = <nat:6> \} \, <var:r1> := <var:r1> * <var:K> \, \{ <var:K> = <var:G> \land <var:r0> = <nat:1> \land <var:r1> = <nat:6> * <var:G> \} \end{eqnarray} This is rigorously given through the binding scheme obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r0> := <nat:1> ; <var:r1> := <nat:6> ; <var:r1> := <var:r1> * <var:K> ; <var:X> := <var:r1> ; <var:X> := <var:X> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:K> = <var:G> }} <def:poly> {{ <var:X> = <nat:6> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:r0> = <nat:1> /\ <var:r1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:r0> = <nat:1> /\ <var:r1> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:r0> = <nat:1> /\ <var:X> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:G> /\ <var:X> = <nat:6> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 