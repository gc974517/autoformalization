\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:k> ; <var:t2> := <var:t1> * <var:k> ; <var:t3> := <var:t2> * <var:k> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:5> ; <var:t2> := <var:t2> * <nat:1> ; <var:t3> := <var:t3> * <nat:4> ; <var:U> := <var:t3> <var:U> := <var:U> + <var:t2> <var:U> := <var:U> + <var:t1> <var:U> := <var:U> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:k> = <var:l> $ prior to the execution of this set of instructions it holds that we see $ <var:U> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:5> \cdot <var:l> + <nat:4> $ after series of instructions has finished executing . \end{theorem} \begin{proof} The argument for the code segment is accomplished through usual Hoare techniques . Going forward , the binding statement \verb | <var:t1> := <var:k> ; | . This moves the precondition $ \{ <var:k> = <var:l> \} $ to the condition $ \{ <var:k> = <var:l> \land <var:t1> = <var:l> \} $ . Advancing to the upcoming bit of code seen in the program , we see the environment update line \verb | <var:t2> := <var:t1> * <var:k> ; | . This takes the condition $ \{ <var:k> = <var:l> \land <var:t1> = <var:l> \} $ to the postcondition $ \{ <var:k> = <var:l> \land <var:t1> = <var:l> \land <var:t2> = <var:l> ^ <nat:2> \} $ . Going to the next step , the variable assignmet line \verb | <var:t3> := <var:t2> * <var:k> ; | . This takes $ \{ <var:k> = <var:l> \land <var:t1> = <var:l> \land <var:t2> = <var:l> ^ <nat:2> \} $ as the condition $ \{ <var:k> = <var:l> \land <var:t1> = <var:l> \land <var:t2> = <var:l> ^ <nat:2> \land <var:t3> = <var:l> ^ <nat:3> \} $ . Observing the subsequent command contained in the set of instructions , the variable binding line defining $ <nat:4> $ toward $ <var:t0>$ . This command redefines the precondition $ \{ <var:k> = <var:l> \land <var:t1> = <var:l> \land <var:t2> = <var:l> ^ <nat:2> \land <var:t3> = <var:l> ^ <nat:3> \} $ toward the postcondition $ \{ <var:k> = <var:l> \land <var:t1> = <var:l> \land <var:t2> = <var:l> ^ <nat:2> \land <var:t3> = <var:l> ^ <nat:3> \land <var:t0> = <nat:4> \} $ . This is rigorously given with the assignment rule found in typical Hoare reasoning . Going to the next step , we have the variable update line defining $ <var:t1> * <nat:5> $ into $ <var:t1>$ . This advances $ \{ <var:k> = <var:l> \land <var:t1> = <var:l> \land <var:t2> = <var:l> ^ <nat:2> \land <var:t3> = <var:l> ^ <nat:3> \land <var:t0> = <nat:4> \} $ as the condition $ \{ <var:k> = <var:l> \land <var:t1> = <nat:5> \cdot <var:l> \land <var:t2> = <var:l> ^ <nat:2> \land <var:t3> = <var:l> ^ <nat:3> \land <var:t0> = <nat:4> \} $ . Moving on to the next step , we have the binding line \verb | <var:t2> := <var:t2> * <nat:1> ; | . This transfers the condition $ \{ <var:k> = <var:l> \land <var:t1> = <nat:5> \cdot <var:l> \land <var:t2> = <var:l> ^ <nat:2> \land <var:t3> = <var:l> ^ <nat:3> \land <var:t0> = <nat:4> \} $ to the condition $ \{ <var:k> = <var:l> \land <var:t1> = <nat:5> \cdot <var:l> \land <var:t2> = <nat:1> \cdot <var:l> ^ <nat:2> \land <var:t3> = <var:l> ^ <nat:3> \land <var:t0> = <nat:4> \} $ . This is shown by the assignment scheme of usual Hoare logic . Now , we see the assignment statement defining $ <var:t3> * <nat:4> $ into $ <var:t3>$ . This command moves the precondition $ \{ <var:k> = <var:l> \land <var:t1> = <nat:5> \cdot <var:l> \land <var:t2> = <nat:1> \cdot <var:l> ^ <nat:2> \land <var:t3> = <var:l> ^ <nat:3> \land <var:t0> = <nat:4> \} $ as the condition $ \{ <var:k> = <var:l> \land <var:t1> = <nat:5> \cdot <var:l> \land <var:t2> = <nat:1> \cdot <var:l> ^ <nat:2> \land <var:t3> = <nat:4> \cdot <var:l> ^ <nat:3> \land <var:t0> = <nat:4> \} $ . After , the binding statement yielding $ <var:t3$ into $ <var:U>$ . This forwards the condition $ \{ <var:k> = <var:l> \land <var:t1> = <nat:5> \cdot <var:l> \land <var:t2> = <nat:1> \cdot <var:l> ^ <nat:2> \land <var:t3> = <nat:4> \cdot <var:l> ^ <nat:3> \land <var:t0> = <nat:4> \} $ to $ \{ <var:k> = <var:l> \land <var:t1> = <nat:5> \cdot <var:l> \land <var:t2> = <nat:1> \cdot <var:l> ^ <nat:2> \land <var:t0> = <nat:4> \land <var:U> = <nat:4> \cdot <var:l> ^ <nat:3> \} $ . After , the assignment command yielding $ <var:U> + <var:t2$ to $ <var:U>$ . This forwards the condition $ \{ <var:k> = <var:l> \land <var:t1> = <nat:5> \cdot <var:l> \land <var:t2> = <nat:1> \cdot <var:l> ^ <nat:2> \land <var:t0> = <nat:4> \land <var:U> = <nat:4> \cdot <var:l> ^ <nat:3> \} $ to the condition $ \{ <var:k> = <var:l> \land <var:t1> = <nat:5> \cdot <var:l> \land <var:t0> = <nat:4> \land <var:U> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> \} $ . Moving on , we have the command defining $ <var:U> + <var:t1$ to $ <var:U>$ . This transfers $ \{ <var:k> = <var:l> \land <var:t1> = <nat:5> \cdot <var:l> \land <var:t0> = <nat:4> \land <var:U> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> \} $ toward $ \{ <var:k> = <var:l> \land <var:t0> = <nat:4> \land <var:U> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:5> \cdot <var:l> \} $ . Now , we have the variable binding code yielding $ <var:U> + <var:t0$ as $ <var:U>$ . This code takes the condition $ \{ <var:k> = <var:l> \land <var:t0> = <nat:4> \land <var:U> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:5> \cdot <var:l> \} $ as $ \{ <var:k> = <var:l> \land <var:U> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:5> \cdot <var:l> + <nat:4> \} $ . This is known to be sound through the assignment rule given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:k> ; <var:t2> := <var:t1> * <var:k> ; <var:t3> := <var:t2> * <var:k> ; <var:t0> := <nat:4> ; <var:t1> := <var:t1> * <nat:5> ; <var:t2> := <var:t2> * <nat:1> ; <var:t3> := <var:t3> * <nat:4> ; <var:U> := <var:t3> <var:U> := <var:U> + <var:t2> <var:U> := <var:U> + <var:t1> <var:U> := <var:U> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:k> = <var:l> }} <def:poly> {{ <var:U> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:t1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:t1> = <var:l> /\ <var:t2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:t1> = <var:l> /\ <var:t2> = <var:l> ^ <nat:2> /\ <var:t3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:t1> = <var:l> /\ <var:t2> = <var:l> ^ <nat:2> /\ <var:t3> = <var:l> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:t1> = <nat:5> * <var:l> /\ <var:t2> = <var:l> ^ <nat:2> /\ <var:t3> = <var:l> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:t1> = <nat:5> * <var:l> /\ <var:t2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:t3> = <var:l> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:t1> = <nat:5> * <var:l> /\ <var:t2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:t3> = <nat:4> * <var:l> ^ <nat:3> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:t1> = <nat:5> * <var:l> /\ <var:t2> = <nat:1> * <var:l> ^ <nat:2> /\ <var:t0> = <nat:4> /\ <var:U> = <nat:4> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:t1> = <nat:5> * <var:l> /\ <var:t0> = <nat:4> /\ <var:U> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:t0> = <nat:4> /\ <var:U> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:l> /\ <var:U> = <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:5> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 