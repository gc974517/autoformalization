\begin{document} \begin{theorem} We define a list of instructions : \begin{verbatim} <var:z> := <nat:1> ; <var:z> := <nat:3> + <var:z> * <var:r> \end{verbatim} Allow that we have $ <var:r> = <var:w> $ prior to the evaluation of the segment of code it must be that $ <var:z> = <nat:1> \cdot <var:w> + <nat:3> $ after series of instructions is done . \end{theorem} \begin{proof} The argument for our set of instructions can be demonstrated by standard Hoare techniques . Looking at the subsequent bit of code found in our series of instructions , \[ \begin{tabular} {rcl} \{ <var:r> = <var:w> \} & <var:z> := <nat:1> & \{ <var:r> = <var:w> \land <var:z> = <nat:1> \} \end{tabular} This is deduced using the variable update inference rule defined by Hoare logic . Going forward , we see \[ \begin{tabular} {rcl} \{ <var:r> = <var:w> \} & <var:z> := <nat:1> & \{ <var:r> = <var:w> \land <var:z> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:r> = <var:w> }} <var:z> := <nat:1> ; <var:z> := <nat:3> + <var:z> * <var:r> {{ <var:z> = <nat:1> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:z> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:w> /\ <var:z> = <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 