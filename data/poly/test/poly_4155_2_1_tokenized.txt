\begin{document} \begin{theorem} We define a segment of code as \begin{verbatim} <var:o0> := <nat:2> ; <var:I> := <var:o0> \end{verbatim} Allow $ <var:T> = <var:u> $ ahead of the evaluation of this code segment it holds that we have $ <var:I> = <nat:2> $ after list of commands has executed . \end{theorem} \begin{proof} Arguing the correctness of our list of commands can be demonstrated by standard Hoare logic . Taking another step toward the subsequent bit of code seen in the series of instructions , we see the environment update command \verb | <var:o0> := <nat:2> ; | . This line forwards the precondition $ \{ <var:T> = <var:u> \} $ toward the condition $ \{ <var:T> = <var:u> \land <var:o0> = <nat:2> \} $ . Immediately following , we have the variable assignmet statement binding $ <var:o0$ into $ <var:I>$ . This line takes $ \{ <var:T> = <var:u> \land <var:o0> = <nat:2> \} $ into $ \{ <var:T> = <var:u> \land <var:I> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:T> = <var:u> }} <var:o0> := <nat:2> ; <var:I> := <var:o0> {{ <var:I> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:u> /\ <var:I> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 