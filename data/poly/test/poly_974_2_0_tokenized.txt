\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:3> ; <var:I> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:y> = <var:p> $ , given every whole numbers $ <var:p> $ , before running this segment of code it follows that $ <var:I> = <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions is demonstrated through typical Hoare reasoning . Focusing on the next step seen in our series of commands , we have the assignment line binding $ <nat:3> $ as $ <var:c0>$ . This moves the condition $ \{ <var:y> = <var:p> \} $ toward the condition $ \{ <var:y> = <var:p> \land <var:c0> = <nat:3> \} $ . This is shown through the assignment inference rule defined by usual Hoare reasoning . Honing in on the next piece of code seen in the series of instructions , the variable binding statement \verb | <var:I> := <var:c0> | . This code forwards $ \{ <var:y> = <var:p> \land <var:c0> = <nat:3> \} $ into the postcondition $ \{ <var:y> = <var:p> \land <var:I> = <nat:3> \} $ . This is sound with the assignment inference rule given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:3> ; <var:I> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:y> = <var:p> }} <def:poly> {{ <var:I> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:I> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 