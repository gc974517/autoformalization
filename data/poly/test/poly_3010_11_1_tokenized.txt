\begin{document} \begin{theorem} We define a code in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:d> ; <var:e2> := <var:e1> * <var:d> ; <var:e3> := <var:e2> * <var:d> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:5> ; <var:e2> := <var:e2> * <nat:9> ; <var:e3> := <var:e3> * <nat:5> ; <var:L> := <var:e3> <var:L> := <var:L> + <var:e2> <var:L> := <var:L> + <var:e1> <var:L> := <var:L> + <var:e0> \end{verbatim} Given that we have $ <var:d> = <var:p> $ ahead of running this code segment , it follows that $ <var:L> = <nat:5> * <var:p> ^ <nat:3> + <nat:9> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:7> $ once code segment has executed . \end{theorem} \begin{proof} Applying typical Hoare reasoning results in : \begin{eqnarray} \{ <var:d> = <var:p> \} \\ <var:e1> := <var:d> ; \\ \{ <var:d> = <var:p> \land <var:e1> = <var:p> \} \\ <var:e2> := <var:e1> * <var:d> ; \\ \{ <var:d> = <var:p> \land <var:e1> = <var:p> \land <var:e2> = <var:p> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:d> ; \\ \{ <var:d> = <var:p> \land <var:e1> = <var:p> \land <var:e2> = <var:p> ^ <nat:2> \land <var:e3> = <var:p> ^ <nat:3> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:d> = <var:p> \land <var:e1> = <var:p> \land <var:e2> = <var:p> ^ <nat:2> \land <var:e3> = <var:p> ^ <nat:3> \land <var:e0> = <nat:7> \} \\ <var:e1> := <var:e1> * <nat:5> ; \\ \{ <var:d> = <var:p> \land <var:e1> = <nat:5> * <var:p> \land <var:e2> = <var:p> ^ <nat:2> \land <var:e3> = <var:p> ^ <nat:3> \land <var:e0> = <nat:7> \} \\ <var:e2> := <var:e2> * <nat:9> ; \\ \{ <var:d> = <var:p> \land <var:e1> = <nat:5> * <var:p> \land <var:e2> = <nat:9> * <var:p> ^ <nat:2> \land <var:e3> = <var:p> ^ <nat:3> \land <var:e0> = <nat:7> \} \\ <var:e3> := <var:e3> * <nat:5> ; \\ \{ <var:d> = <var:p> \land <var:e1> = <nat:5> * <var:p> \land <var:e2> = <nat:9> * <var:p> ^ <nat:2> \land <var:e3> = <nat:5> * <var:p> ^ <nat:3> \land <var:e0> = <nat:7> \} \\ <var:L> := <var:e3> \\ \{ <var:d> = <var:p> \land <var:e1> = <nat:5> * <var:p> \land <var:e2> = <nat:9> * <var:p> ^ <nat:2> \land <var:e0> = <nat:7> \land <var:L> = <nat:5> * <var:p> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:e2> \\ \{ <var:d> = <var:p> \land <var:e1> = <nat:5> * <var:p> \land <var:e0> = <nat:7> \land <var:L> = <nat:5> * <var:p> ^ <nat:3> + <nat:9> * <var:p> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:e1> \\ \{ <var:d> = <var:p> \land <var:e0> = <nat:7> \land <var:L> = <nat:5> * <var:p> ^ <nat:3> + <nat:9> * <var:p> ^ <nat:2> + <nat:5> * <var:p> \} \\ <var:L> := <var:L> + <var:e0> \\ \{ <var:d> = <var:p> \land <var:L> = <nat:5> * <var:p> ^ <nat:3> + <nat:9> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:7> \} \end{eqnarray} Thusly , the series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:d> = <var:p> }} <var:e1> := <var:d> ; <var:e2> := <var:e1> * <var:d> ; <var:e3> := <var:e2> * <var:d> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:5> ; <var:e2> := <var:e2> * <nat:9> ; <var:e3> := <var:e3> * <nat:5> ; <var:L> := <var:e3> <var:L> := <var:L> + <var:e2> <var:L> := <var:L> + <var:e1> <var:L> := <var:L> + <var:e0> {{ <var:L> = <nat:5> * <var:p> ^ <nat:3> + <nat:9> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:e1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:e1> = <var:p> /\ <var:e2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:e1> = <var:p> /\ <var:e2> = <var:p> ^ <nat:2> /\ <var:e3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:e1> = <var:p> /\ <var:e2> = <var:p> ^ <nat:2> /\ <var:e3> = <var:p> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:e1> = <nat:5> * <var:p> /\ <var:e2> = <var:p> ^ <nat:2> /\ <var:e3> = <var:p> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:e1> = <nat:5> * <var:p> /\ <var:e2> = <nat:9> * <var:p> ^ <nat:2> /\ <var:e3> = <var:p> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:e1> = <nat:5> * <var:p> /\ <var:e2> = <nat:9> * <var:p> ^ <nat:2> /\ <var:e3> = <nat:5> * <var:p> ^ <nat:3> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:e1> = <nat:5> * <var:p> /\ <var:e2> = <nat:9> * <var:p> ^ <nat:2> /\ <var:e0> = <nat:7> /\ <var:L> = <nat:5> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:e1> = <nat:5> * <var:p> /\ <var:e0> = <nat:7> /\ <var:L> = <nat:5> * <var:p> ^ <nat:3> + <nat:9> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:e0> = <nat:7> /\ <var:L> = <nat:5> * <var:p> ^ <nat:3> + <nat:9> * <var:p> ^ <nat:2> + <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:L> = <nat:5> * <var:p> ^ <nat:3> + <nat:9> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 