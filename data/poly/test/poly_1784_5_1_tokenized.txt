\begin{document} \begin{theorem} We define the following code such that \begin{verbatim} <var:W1> := <var:N> ; <var:W0> := <nat:6> ; <var:W1> := <var:W1> * <nat:2> ; <var:P> := <var:W1> <var:P> := <var:P> + <var:W0> \end{verbatim} Assume , given any natural coefficients $ <var:i> $ , it to be that $ <var:N> = <var:i> $ before the evaluation of this list of commands it must be that we have $ <var:P> = <nat:2> \cdot <var:i> + <nat:6> $ . \end{theorem} \begin{proof} Note that this decorated code . \begin{eqnarray} \{ <var:N> = <var:i> \} \\ <var:W1> := <var:N> ; \\ \{ <var:N> = <var:i> \land <var:W1> = <var:i> \} \\ <var:W0> := <nat:6> ; \\ \{ <var:N> = <var:i> \land <var:W1> = <var:i> \land <var:W0> = <nat:6> \} \\ <var:W1> := <var:W1> * <nat:2> ; \\ \{ <var:N> = <var:i> \land <var:W1> = <nat:2> \times <var:i> \land <var:W0> = <nat:6> \} \\ <var:P> := <var:W1> \\ \{ <var:N> = <var:i> \land <var:W0> = <nat:6> \land <var:P> = <nat:2> \times <var:i> \} \\ <var:P> := <var:P> + <var:W0> \\ \{ <var:N> = <var:i> \land <var:P> = <nat:2> \times <var:i> + <nat:6> \} \end{eqnarray} Applying standard Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:N> = <var:i> }} <var:W1> := <var:N> ; <var:W0> := <nat:6> ; <var:W1> := <var:W1> * <nat:2> ; <var:P> := <var:W1> <var:P> := <var:P> + <var:W0> {{ <var:P> = <nat:2> * <var:i> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:W1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:W1> = <var:i> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:W1> = <nat:2> * <var:i> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:W0> = <nat:6> /\ <var:P> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:P> = <nat:2> * <var:i> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 