\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:r> ; <var:k2> := <var:k1> * <var:r> ; <var:k3> := <var:k2> * <var:r> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:1> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:2> ; <var:t> := <var:k3> <var:t> := <var:t> + <var:k2> <var:t> := <var:t> + <var:k1> <var:t> := <var:t> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Assuming assuming some $ <var:X> \in \mathbb{Z}^+ $ that $ <var:r> = <var:X> $ before executing our series of commands it holds that $ <var:t> = <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> $ when series of commands has finished executing . \end{theorem} \begin{proof} Let the following decorated list of instructions . \begin{eqnarray} \{ <var:r> = <var:X> \} \\ <var:k1> := <var:r> ; \\ \{ <var:r> = <var:X> \land <var:k1> = <var:X> \} \\ <var:k2> := <var:k1> * <var:r> ; \\ \{ <var:r> = <var:X> \land <var:k1> = <var:X> \land <var:k2> = <var:X> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:r> ; \\ \{ <var:r> = <var:X> \land <var:k1> = <var:X> \land <var:k2> = <var:X> ^ <nat:2> \land <var:k3> = <var:X> ^ <nat:3> \} \\ <var:k0> := <nat:1> ; \\ \{ <var:r> = <var:X> \land <var:k1> = <var:X> \land <var:k2> = <var:X> ^ <nat:2> \land <var:k3> = <var:X> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:k1> := <var:k1> * <nat:1> ; \\ \{ <var:r> = <var:X> \land <var:k1> = <nat:1> * <var:X> \land <var:k2> = <var:X> ^ <nat:2> \land <var:k3> = <var:X> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:k2> := <var:k2> * <nat:3> ; \\ \{ <var:r> = <var:X> \land <var:k1> = <nat:1> * <var:X> \land <var:k2> = <nat:3> * <var:X> ^ <nat:2> \land <var:k3> = <var:X> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:k3> := <var:k3> * <nat:2> ; \\ \{ <var:r> = <var:X> \land <var:k1> = <nat:1> * <var:X> \land <var:k2> = <nat:3> * <var:X> ^ <nat:2> \land <var:k3> = <nat:2> * <var:X> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:t> := <var:k3> \\ \{ <var:r> = <var:X> \land <var:k1> = <nat:1> * <var:X> \land <var:k2> = <nat:3> * <var:X> ^ <nat:2> \land <var:k0> = <nat:1> \land <var:t> = <nat:2> * <var:X> ^ <nat:3> \} \\ <var:t> := <var:t> + <var:k2> \\ \{ <var:r> = <var:X> \land <var:k1> = <nat:1> * <var:X> \land <var:k0> = <nat:1> \land <var:t> = <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:k1> \\ \{ <var:r> = <var:X> \land <var:k0> = <nat:1> \land <var:t> = <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> \} \\ <var:t> := <var:t> + <var:k0> \\ \{ <var:r> = <var:X> \land <var:t> = <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> \} \end{eqnarray} Using usual Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k1> := <var:r> ; <var:k2> := <var:k1> * <var:r> ; <var:k3> := <var:k2> * <var:r> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:1> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:2> ; <var:t> := <var:k3> <var:t> := <var:t> + <var:k2> <var:t> := <var:t> + <var:k1> <var:t> := <var:t> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:r> = <var:X> }} <def:poly> {{ <var:t> = <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:k1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:k1> = <var:X> /\ <var:k2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:k1> = <var:X> /\ <var:k2> = <var:X> ^ <nat:2> /\ <var:k3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:k1> = <var:X> /\ <var:k2> = <var:X> ^ <nat:2> /\ <var:k3> = <var:X> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:k1> = <nat:1> * <var:X> /\ <var:k2> = <var:X> ^ <nat:2> /\ <var:k3> = <var:X> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:k1> = <nat:1> * <var:X> /\ <var:k2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:k3> = <var:X> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:k1> = <nat:1> * <var:X> /\ <var:k2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:k3> = <nat:2> * <var:X> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:k1> = <nat:1> * <var:X> /\ <var:k2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:k0> = <nat:1> /\ <var:t> = <nat:2> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:k1> = <nat:1> * <var:X> /\ <var:k0> = <nat:1> /\ <var:t> = <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:k0> = <nat:1> /\ <var:t> = <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:X> /\ <var:t> = <nat:2> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 