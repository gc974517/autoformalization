\begin{document} \begin{theorem} Consider a list of instructions : \begin{verbatim} <var:j> := <nat:3> ; <var:j> := <nat:3> + <var:j> * <var:I> ; <var:j> := <nat:3> + <var:j> * <var:I> ; <var:j> := <nat:4> + <var:j> * <var:I> ; <var:j> := <nat:1> + <var:j> * <var:I> ; <var:j> := <nat:1> + <var:j> * <var:I> ; <var:j> := <nat:4> + <var:j> * <var:I> ; <var:j> := <nat:2> + <var:j> * <var:I> ; <var:j> := <nat:2> + <var:j> * <var:I> ; <var:j> := <nat:3> + <var:j> * <var:I> ; <var:j> := <nat:4> + <var:j> * <var:I> ; <var:j> := <nat:1> + <var:j> * <var:I> ; <var:j> := <nat:2> + <var:j> * <var:I> \end{verbatim} Allowing it to hold that $ <var:I> = <var:n> $ before running our segment of code , it must be that we have $ <var:j> = <nat:3> * <var:n> ^ <nat:12> + <nat:3> * <var:n> ^ <nat:11> + <nat:3> * <var:n> ^ <nat:10> + <nat:4> * <var:n> ^ <nat:9> + <nat:1> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:2> $ . \end{theorem} \begin{proof} The argument for this set of commands is done by typical Hoare logic . Moving on , we have the variable update command defining $ <nat:3> $ toward $ <var:j>$ . This forwards the condition $ \{ <var:I> = <var:n> \} $ into the postcondition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> \} $ . Looking at the proceeding line of code found in the segment of code , we see the variable binding code yielding $ <nat:3> + <var:j> * <var:I> $ to $ <var:j>$ . This command redefines $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> \} $ toward the postcondition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> + <nat:3> \} $ . Taking another step toward the next statement in the set of instructions , we have the variable assignmet command \verb | <var:j> := <nat:3> + <var:j> * <var:I> ; | . This moves the condition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> + <nat:3> \} $ into $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> \} $ . This is deduced with the assignment inference rule of Hoare logic . Next , we see the code \verb | <var:j> := <nat:4> + <var:j> * <var:I> ; | . This statement takes the precondition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> \} $ as the postcondition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> \} $ . This is ensured with the assignment scheme given in usual Hoare techniques . Now , we have the assignment statement \verb | <var:j> := <nat:1> + <var:j> * <var:I> ; | . This command forwards $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> \} $ toward the condition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:1> \} $ . Taking a look at the next piece of code seen in our code , we see the binding command assigning $ <nat:1> + <var:j> * <var:I> $ to $ <var:j>$ . This command forwards the precondition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:1> \} $ to the condition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:1> \} $ . This is guaranteed by the assignment law given by usual Hoare techniques . Stepping through , the environment update code assigning $ <nat:4> + <var:j> * <var:I> $ toward $ <var:j>$ . This command transfers $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:1> \} $ to the condition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> \} $ . Jumping to the upcoming piece of code seen in the series of commands , the variable assignmet code \verb | <var:j> := <nat:2> + <var:j> * <var:I> ; | . This forwards $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> \} $ into the condition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> \} $ . Observing the next step in our program , the variable update command assigning $ <nat:2> + <var:j> * <var:I> $ as $ <var:j>$ . This statement transfers the condition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> \} $ to the condition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:8> + <nat:3> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:2> \} $ . This is sound using the assignment rule defined by Hoare techniques . Immediately after , the assignment statement \verb | <var:j> := <nat:3> + <var:j> * <var:I> ; | . This transfers $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:8> + <nat:3> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:2> \} $ as the postcondition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:9> + <nat:3> * <var:n> ^ <nat:8> + <nat:3> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:3> \} $ . Paying attention to the upcoming line contained in the set of commands , the variable assignmet command \verb | <var:j> := <nat:4> + <var:j> * <var:I> ; | . This takes the condition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:9> + <nat:3> * <var:n> ^ <nat:8> + <nat:3> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:3> \} $ toward the postcondition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:10> + <nat:3> * <var:n> ^ <nat:9> + <nat:3> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> \} $ . This is sound through the assignment scheme in standard Hoare reasoning . Moving on , the variable update line \verb | <var:j> := <nat:1> + <var:j> * <var:I> ; | . This moves the condition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:10> + <nat:3> * <var:n> ^ <nat:9> + <nat:3> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> \} $ into the postcondition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:11> + <nat:3> * <var:n> ^ <nat:10> + <nat:3> * <var:n> ^ <nat:9> + <nat:4> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:1> \} $ . This is rigorously given using the assignment rule defined in Hoare logic . Stepping through , we have the statement assigning $ <nat:2> + <var:j> * <var:I$ as $ <var:j>$ . This advances the condition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:11> + <nat:3> * <var:n> ^ <nat:10> + <nat:3> * <var:n> ^ <nat:9> + <nat:4> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:1> \} $ to the postcondition $ \{ <var:I> = <var:n> \land <var:j> = <nat:3> * <var:n> ^ <nat:12> + <nat:3> * <var:n> ^ <nat:11> + <nat:3> * <var:n> ^ <nat:10> + <nat:4> * <var:n> ^ <nat:9> + <nat:1> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:I> = <var:n> }} <var:j> := <nat:3> ; <var:j> := <nat:3> + <var:j> * <var:I> ; <var:j> := <nat:3> + <var:j> * <var:I> ; <var:j> := <nat:4> + <var:j> * <var:I> ; <var:j> := <nat:1> + <var:j> * <var:I> ; <var:j> := <nat:1> + <var:j> * <var:I> ; <var:j> := <nat:4> + <var:j> * <var:I> ; <var:j> := <nat:2> + <var:j> * <var:I> ; <var:j> := <nat:2> + <var:j> * <var:I> ; <var:j> := <nat:3> + <var:j> * <var:I> ; <var:j> := <nat:4> + <var:j> * <var:I> ; <var:j> := <nat:1> + <var:j> * <var:I> ; <var:j> := <nat:2> + <var:j> * <var:I> {{ <var:j> = <nat:3> * <var:n> ^ <nat:12> + <nat:3> * <var:n> ^ <nat:11> + <nat:3> * <var:n> ^ <nat:10> + <nat:4> * <var:n> ^ <nat:9> + <nat:1> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:j> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:j> = <nat:3> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:j> = <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:j> = <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:j> = <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:j> = <nat:3> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:j> = <nat:3> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:j> = <nat:3> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:j> = <nat:3> * <var:n> ^ <nat:8> + <nat:3> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:j> = <nat:3> * <var:n> ^ <nat:9> + <nat:3> * <var:n> ^ <nat:8> + <nat:3> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:j> = <nat:3> * <var:n> ^ <nat:10> + <nat:3> * <var:n> ^ <nat:9> + <nat:3> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:j> = <nat:3> * <var:n> ^ <nat:11> + <nat:3> * <var:n> ^ <nat:10> + <nat:3> * <var:n> ^ <nat:9> + <nat:4> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:j> = <nat:3> * <var:n> ^ <nat:12> + <nat:3> * <var:n> ^ <nat:11> + <nat:3> * <var:n> ^ <nat:10> + <nat:4> * <var:n> ^ <nat:9> + <nat:1> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 