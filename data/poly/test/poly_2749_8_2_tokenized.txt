\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} such that \begin{verbatim} <var:w> := <nat:2> ; <var:w> := <nat:1> + <var:w> * <var:m> ; <var:w> := <var:w> * <var:m> ; <var:w> := <nat:4> + <var:w> * <var:m> ; <var:w> := <nat:4> + <var:w> * <var:m> ; <var:w> := <nat:4> + <var:w> * <var:m> ; <var:w> := <nat:2> + <var:w> * <var:m> ; <var:w> := <nat:4> + <var:w> * <var:m> \end{verbatim} Given it to hold that $ <var:m> = <var:X> $ prior to evaluating this code segment , then $ <var:w> = <nat:2> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> $ when list of instructions has executed . \end{theorem} \begin{proof} Applying Hoare logic produces : \begin{eqnarray} \{ <var:m> = <var:X> \} \\ <var:w> := <nat:2> ; \\ \{ <var:m> = <var:X> \land <var:w> = <nat:2> \} \\ <var:w> := <nat:1> + <var:w> * <var:m> ; \\ \{ <var:m> = <var:X> \land <var:w> = <nat:2> \times <var:X> + <nat:1> \} \\ <var:w> := <var:w> * <var:m> ; \\ \{ <var:m> = <var:X> \land <var:w> = <nat:2> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + \} \\ <var:w> := <nat:4> + <var:w> * <var:m> ; \\ \{ <var:m> = <var:X> \land <var:w> = <nat:2> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:4> \} \\ <var:w> := <nat:4> + <var:w> * <var:m> ; \\ \{ <var:m> = <var:X> \land <var:w> = <nat:2> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> + <nat:4> \} \\ <var:w> := <nat:4> + <var:w> * <var:m> ; \\ \{ <var:m> = <var:X> \land <var:w> = <nat:2> \times <var:X> ^ <nat:5> + <nat:1> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:4> \} \\ <var:w> := <nat:2> + <var:w> * <var:m> ; \\ \{ <var:m> = <var:X> \land <var:w> = <nat:2> \times <var:X> ^ <nat:6> + <nat:1> \times <var:X> ^ <nat:5> + <nat:4> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:4> \times <var:X> + <nat:2> \} \\ <var:w> := <nat:4> + <var:w> * <var:m> \\ \{ <var:m> = <var:X> \land <var:w> = <nat:2> \times <var:X> ^ <nat:7> + <nat:1> \times <var:X> ^ <nat:6> + <nat:4> \times <var:X> ^ <nat:4> + <nat:4> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:4> \} \end{eqnarray} Considering the preceding argument , this code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:m> = <var:X> }} <var:w> := <nat:2> ; <var:w> := <nat:1> + <var:w> * <var:m> ; <var:w> := <var:w> * <var:m> ; <var:w> := <nat:4> + <var:w> * <var:m> ; <var:w> := <nat:4> + <var:w> * <var:m> ; <var:w> := <nat:4> + <var:w> * <var:m> ; <var:w> := <nat:2> + <var:w> * <var:m> ; <var:w> := <nat:4> + <var:w> * <var:m> {{ <var:w> = <nat:2> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:w> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:w> = <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:w> = <nat:2> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:w> = <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:w> = <nat:2> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:w> = <nat:2> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:w> = <nat:2> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:w> = <nat:2> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:4> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 