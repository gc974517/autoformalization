\begin{document} \begin{theorem} Define the following set of commands as follows \begin{verbatim} <var:f1> := <var:i> ; <var:f0> := <nat:7> ; <var:f1> := <var:f1> * <nat:8> ; <var:M> := <var:f1> <var:M> := <var:M> + <var:f0> \end{verbatim} Allow $ <var:i> = <var:N> $ --- letting $ <var:N> \in \mathbb{N} $ --- prior to interpreting the set of commands , then we see $ <var:M> = <nat:8> \cdot <var:N> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives : \begin{eqnarray} \{ <var:i> = <var:N> \} \\ <var:f1> := <var:i> ; \\ \{ <var:i> = <var:N> \land <var:f1> = <var:N> \} \\ <var:f0> := <nat:7> ; \\ \{ <var:i> = <var:N> \land <var:f1> = <var:N> \land <var:f0> = <nat:7> \} \\ <var:f1> := <var:f1> * <nat:8> ; \\ \{ <var:i> = <var:N> \land <var:f1> = <nat:8> \cdot <var:N> \land <var:f0> = <nat:7> \} \\ <var:M> := <var:f1> \\ \{ <var:i> = <var:N> \land <var:f0> = <nat:7> \land <var:M> = <nat:8> \cdot <var:N> \} \\ <var:M> := <var:M> + <var:f0> \\ \{ <var:i> = <var:N> \land <var:M> = <nat:8> \cdot <var:N> + <nat:7> \} \end{eqnarray} As a result , our program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:i> = <var:N> }} <var:f1> := <var:i> ; <var:f0> := <nat:7> ; <var:f1> := <var:f1> * <nat:8> ; <var:M> := <var:f1> <var:M> := <var:M> + <var:f0> {{ <var:M> = <nat:8> * <var:N> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:f1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:f1> = <var:N> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:f1> = <nat:8> * <var:N> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:f0> = <nat:7> /\ <var:M> = <nat:8> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:M> = <nat:8> * <var:N> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 