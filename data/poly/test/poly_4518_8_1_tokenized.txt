\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:I1> := <var:w> ; <var:I2> := <var:I1> * <var:w> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:2> ; <var:s> := <var:I2> <var:s> := <var:s> + <var:I1> <var:s> := <var:s> + <var:I0> \end{verbatim} Given ( given any natural coefficients $ <var:F> $ ) it to hold that $ <var:w> = <var:F> $ ahead of the execution of our set of commands it holds that we see $ <var:s> = <nat:2> \times <var:F> ^ <nat:2> + <nat:4> \times <var:F> + <nat:1> $ . \end{theorem} \begin{proof} We can see that the below decorated segment of code . \begin{eqnarray} \{ <var:w> = <var:F> \} \\ <var:I1> := <var:w> ; \\ \{ <var:w> = <var:F> \land <var:I1> = <var:F> \} \\ <var:I2> := <var:I1> * <var:w> ; \\ \{ <var:w> = <var:F> \land <var:I1> = <var:F> \land <var:I2> = <var:F> ^ <nat:2> \} \\ <var:I0> := <nat:1> ; \\ \{ <var:w> = <var:F> \land <var:I1> = <var:F> \land <var:I2> = <var:F> ^ <nat:2> \land <var:I0> = <nat:1> \} \\ <var:I1> := <var:I1> * <nat:4> ; \\ \{ <var:w> = <var:F> \land <var:I1> = <nat:4> \cdot <var:F> \land <var:I2> = <var:F> ^ <nat:2> \land <var:I0> = <nat:1> \} \\ <var:I2> := <var:I2> * <nat:2> ; \\ \{ <var:w> = <var:F> \land <var:I1> = <nat:4> \cdot <var:F> \land <var:I2> = <nat:2> \cdot <var:F> ^ <nat:2> \land <var:I0> = <nat:1> \} \\ <var:s> := <var:I2> \\ \{ <var:w> = <var:F> \land <var:I1> = <nat:4> \cdot <var:F> \land <var:I0> = <nat:1> \land <var:s> = <nat:2> \cdot <var:F> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:I1> \\ \{ <var:w> = <var:F> \land <var:I0> = <nat:1> \land <var:s> = <nat:2> \cdot <var:F> ^ <nat:2> + <nat:4> \cdot <var:F> \} \\ <var:s> := <var:s> + <var:I0> \\ \{ <var:w> = <var:F> \land <var:s> = <nat:2> \cdot <var:F> ^ <nat:2> + <nat:4> \cdot <var:F> + <nat:1> \} \end{eqnarray} Utilizing Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:w> = <var:F> }} <var:I1> := <var:w> ; <var:I2> := <var:I1> * <var:w> ; <var:I0> := <nat:1> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:2> ; <var:s> := <var:I2> <var:s> := <var:s> + <var:I1> <var:s> := <var:s> + <var:I0> {{ <var:s> = <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:I1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:I1> = <var:F> /\ <var:I2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:I1> = <var:F> /\ <var:I2> = <var:F> ^ <nat:2> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:I1> = <nat:4> * <var:F> /\ <var:I2> = <var:F> ^ <nat:2> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:I1> = <nat:4> * <var:F> /\ <var:I2> = <nat:2> * <var:F> ^ <nat:2> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:I1> = <nat:4> * <var:F> /\ <var:I0> = <nat:1> /\ <var:s> = <nat:2> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:I0> = <nat:1> /\ <var:s> = <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:F> /\ <var:s> = <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 