\begin{document} \begin{theorem} Consider the following set of commands as \begin{verbatim} <var:b0> := <nat:2> ; <var:b1> := <nat:9> ; <var:b1> := <var:b1> * <var:h> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:h> ; <var:b2> := <var:b2> * <var:h> ; <var:n> := <var:b2> ; <var:n> := <var:n> + <var:b1> ; <var:n> := <var:n> + <var:b0> \end{verbatim} Given that $ <var:h> = <var:g> $ ahead of executing the code , it must be that we see $ <var:n> = <nat:1> \times <var:g> ^ <nat:2> + <nat:9> \times <var:g> + <nat:2> $ . \end{theorem} \begin{proof} Note that the following decorated code segment . \begin{eqnarray} \{ <var:h> = <var:g> \} \\ <var:b0> := <nat:2> ; \\ \{ <var:h> = <var:g> \land <var:b0> = <nat:2> \} \\ <var:b1> := <nat:9> ; \\ \{ <var:h> = <var:g> \land <var:b0> = <nat:2> \land <var:b1> = <nat:9> \} \\ <var:b1> := <var:b1> * <var:h> ; \\ \{ <var:h> = <var:g> \land <var:b0> = <nat:2> \land <var:b1> = <nat:9> \times <var:g> \} \\ <var:b2> := <nat:1> ; \\ \{ <var:h> = <var:g> \land <var:b0> = <nat:2> \land <var:b1> = <nat:9> \times <var:g> \land <var:b2> = <nat:1> \} \\ <var:b2> := <var:b2> * <var:h> ; \\ \{ <var:h> = <var:g> \land <var:b0> = <nat:2> \land <var:b1> = <nat:9> \times <var:g> \land <var:b2> = <nat:1> \times <var:g> \} \\ <var:b2> := <var:b2> * <var:h> ; \\ \{ <var:h> = <var:g> \land <var:b0> = <nat:2> \land <var:b1> = <nat:9> \times <var:g> \land <var:b2> = <nat:1> \times <var:g> ^ <nat:2> \} \\ <var:n> := <var:b2> ; \\ \{ <var:h> = <var:g> \land <var:b0> = <nat:2> \land <var:b1> = <nat:9> \times <var:g> \land <var:n> = <nat:1> \times <var:g> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:b1> ; \\ \{ <var:h> = <var:g> \land <var:b0> = <nat:2> \land <var:n> = <nat:1> \times <var:g> ^ <nat:2> + <nat:9> \times <var:g> \} \\ <var:n> := <var:n> + <var:b0> \\ \{ <var:h> = <var:g> \land <var:n> = <nat:1> \times <var:g> ^ <nat:2> + <nat:9> \times <var:g> + <nat:2> \} \end{eqnarray} Utilizing standard Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:h> = <var:g> }} <var:b0> := <nat:2> ; <var:b1> := <nat:9> ; <var:b1> := <var:b1> * <var:h> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:h> ; <var:b2> := <var:b2> * <var:h> ; <var:n> := <var:b2> ; <var:n> := <var:n> + <var:b1> ; <var:n> := <var:n> + <var:b0> {{ <var:n> = <nat:1> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:9> * <var:g> /\ <var:b2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:9> * <var:g> /\ <var:b2> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:9> * <var:g> /\ <var:b2> = <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:b0> = <nat:2> /\ <var:b1> = <nat:9> * <var:g> /\ <var:n> = <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:b0> = <nat:2> /\ <var:n> = <nat:1> * <var:g> ^ <nat:2> + <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:g> /\ <var:n> = <nat:1> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 