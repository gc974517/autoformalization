\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R> := <nat:4> ; <var:R> := <nat:3> + <var:R> * <var:g> ; <var:R> := <nat:3> + <var:R> * <var:g> ; <var:R> := <nat:3> + <var:R> * <var:g> ; <var:R> := <nat:3> + <var:R> * <var:g> ; <var:R> := <nat:2> + <var:R> * <var:g> ; <var:R> := <nat:1> + <var:R> * <var:g> ; <var:R> := <nat:4> + <var:R> * <var:g> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> in \emph{Imp} . Given that we have $ <var:g> = <var:L> $ before the execution of our set of instructions , it follows that we see $ <var:R> = <nat:4> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:4> $ after series of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:L> \} \\ <var:R> := <nat:4> ; \\ \{ <var:g> = <var:L> \land <var:R> = <nat:4> \} \\ <var:R> := <nat:3> + <var:R> * <var:g> ; \\ \{ <var:g> = <var:L> \land <var:R> = <nat:4> \times <var:L> + <nat:3> \} \\ <var:R> := <nat:3> + <var:R> * <var:g> ; \\ \{ <var:g> = <var:L> \land <var:R> = <nat:4> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:3> \} \\ <var:R> := <nat:3> + <var:R> * <var:g> ; \\ \{ <var:g> = <var:L> \land <var:R> = <nat:4> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:3> \} \\ <var:R> := <nat:3> + <var:R> * <var:g> ; \\ \{ <var:g> = <var:L> \land <var:R> = <nat:4> \times <var:L> ^ <nat:4> + <nat:3> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:3> \} \\ <var:R> := <nat:2> + <var:R> * <var:g> ; \\ \{ <var:g> = <var:L> \land <var:R> = <nat:4> \times <var:L> ^ <nat:5> + <nat:3> \times <var:L> ^ <nat:4> + <nat:3> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:2> \} \\ <var:R> := <nat:1> + <var:R> * <var:g> ; \\ \{ <var:g> = <var:L> \land <var:R> = <nat:4> \times <var:L> ^ <nat:6> + <nat:3> \times <var:L> ^ <nat:5> + <nat:3> \times <var:L> ^ <nat:4> + <nat:3> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:1> \} \\ <var:R> := <nat:4> + <var:R> * <var:g> \\ \{ <var:g> = <var:L> \land <var:R> = <nat:4> \times <var:L> ^ <nat:7> + <nat:3> \times <var:L> ^ <nat:6> + <nat:3> \times <var:L> ^ <nat:5> + <nat:3> \times <var:L> ^ <nat:4> + <nat:3> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:4> \} \end{eqnarray} Applying usual Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:R> := <nat:4> ; <var:R> := <nat:3> + <var:R> * <var:g> ; <var:R> := <nat:3> + <var:R> * <var:g> ; <var:R> := <nat:3> + <var:R> * <var:g> ; <var:R> := <nat:3> + <var:R> * <var:g> ; <var:R> := <nat:2> + <var:R> * <var:g> ; <var:R> := <nat:1> + <var:R> * <var:g> ; <var:R> := <nat:4> + <var:R> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:g> = <var:L> }} <def:poly> {{ <var:R> = <nat:4> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:R> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:R> = <nat:4> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:R> = <nat:4> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:R> = <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:R> = <nat:4> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:R> = <nat:4> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:R> = <nat:4> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:R> = <nat:4> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 