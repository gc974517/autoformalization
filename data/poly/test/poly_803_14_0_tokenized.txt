\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:1> ; <var:o1> := <nat:9> ; <var:o1> := <var:o1> * <var:L> ; <var:o2> := <nat:5> ; <var:o2> := <var:o2> * <var:L> ; <var:o2> := <var:o2> * <var:L> ; <var:o3> := <nat:5> ; <var:o3> := <var:o3> * <var:L> ; <var:o3> := <var:o3> * <var:L> ; <var:o3> := <var:o3> * <var:L> ; <var:W> := <var:o3> ; <var:W> := <var:W> + <var:o2> ; <var:W> := <var:W> + <var:o1> ; <var:W> := <var:W> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Assuming --- given any natural coefficients $ <var:U> $ --- it to hold that $ <var:L> = <var:U> $ before evaluating the code segment it must be that $ <var:W> = <nat:5> \cdot <var:U> ^ <nat:3> + <nat:5> \cdot <var:U> ^ <nat:2> + <nat:9> \cdot <var:U> + <nat:1> $ after code exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:U> \} \\ <var:o0> := <nat:1> ; \\ \{ <var:L> = <var:U> \land <var:o0> = <nat:1> \} \\ <var:o1> := <nat:9> ; \\ \{ <var:L> = <var:U> \land <var:o0> = <nat:1> \land <var:o1> = <nat:9> \} \\ <var:o1> := <var:o1> * <var:L> ; \\ \{ <var:L> = <var:U> \land <var:o0> = <nat:1> \land <var:o1> = <nat:9> \times <var:U> \} \\ <var:o2> := <nat:5> ; \\ \{ <var:L> = <var:U> \land <var:o0> = <nat:1> \land <var:o1> = <nat:9> \times <var:U> \land <var:o2> = <nat:5> \} \\ <var:o2> := <var:o2> * <var:L> ; \\ \{ <var:L> = <var:U> \land <var:o0> = <nat:1> \land <var:o1> = <nat:9> \times <var:U> \land <var:o2> = <nat:5> \times <var:U> \} \\ <var:o2> := <var:o2> * <var:L> ; \\ \{ <var:L> = <var:U> \land <var:o0> = <nat:1> \land <var:o1> = <nat:9> \times <var:U> \land <var:o2> = <nat:5> \times <var:U> ^ <nat:2> \} \\ <var:o3> := <nat:5> ; \\ \{ <var:L> = <var:U> \land <var:o0> = <nat:1> \land <var:o1> = <nat:9> \times <var:U> \land <var:o2> = <nat:5> \times <var:U> ^ <nat:2> \land <var:o3> = <nat:5> \} \\ <var:o3> := <var:o3> * <var:L> ; \\ \{ <var:L> = <var:U> \land <var:o0> = <nat:1> \land <var:o1> = <nat:9> \times <var:U> \land <var:o2> = <nat:5> \times <var:U> ^ <nat:2> \land <var:o3> = <nat:5> \times <var:U> \} \\ <var:o3> := <var:o3> * <var:L> ; \\ \{ <var:L> = <var:U> \land <var:o0> = <nat:1> \land <var:o1> = <nat:9> \times <var:U> \land <var:o2> = <nat:5> \times <var:U> ^ <nat:2> \land <var:o3> = <nat:5> \times <var:U> ^ <nat:2> \} \\ <var:o3> := <var:o3> * <var:L> ; \\ \{ <var:L> = <var:U> \land <var:o0> = <nat:1> \land <var:o1> = <nat:9> \times <var:U> \land <var:o2> = <nat:5> \times <var:U> ^ <nat:2> \land <var:o3> = <nat:5> \times <var:U> ^ <nat:3> \} \\ <var:W> := <var:o3> ; \\ \{ <var:L> = <var:U> \land <var:o0> = <nat:1> \land <var:o1> = <nat:9> \times <var:U> \land <var:o2> = <nat:5> \times <var:U> ^ <nat:2> \land <var:W> = <nat:5> \times <var:U> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:o2> ; \\ \{ <var:L> = <var:U> \land <var:o0> = <nat:1> \land <var:o1> = <nat:9> \times <var:U> \land <var:W> = <nat:5> \times <var:U> ^ <nat:3> + <nat:5> \times <var:U> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:o1> ; \\ \{ <var:L> = <var:U> \land <var:o0> = <nat:1> \land <var:W> = <nat:5> \times <var:U> ^ <nat:3> + <nat:5> \times <var:U> ^ <nat:2> + <nat:9> \times <var:U> \} \\ <var:W> := <var:W> + <var:o0> \\ \{ <var:L> = <var:U> \land <var:W> = <nat:5> \times <var:U> ^ <nat:3> + <nat:5> \times <var:U> ^ <nat:2> + <nat:9> \times <var:U> + <nat:1> \} \end{eqnarray} Using Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o0> := <nat:1> ; <var:o1> := <nat:9> ; <var:o1> := <var:o1> * <var:L> ; <var:o2> := <nat:5> ; <var:o2> := <var:o2> * <var:L> ; <var:o2> := <var:o2> * <var:L> ; <var:o3> := <nat:5> ; <var:o3> := <var:o3> * <var:L> ; <var:o3> := <var:o3> * <var:L> ; <var:o3> := <var:o3> * <var:L> ; <var:W> := <var:o3> ; <var:W> := <var:W> + <var:o2> ; <var:W> := <var:W> + <var:o1> ; <var:W> := <var:W> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:L> = <var:U> }} <def:poly> {{ <var:W> = <nat:5> * <var:U> ^ <nat:3> + <nat:5> * <var:U> ^ <nat:2> + <nat:9> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:9> * <var:U> /\ <var:o2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:9> * <var:U> /\ <var:o2> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:9> * <var:U> /\ <var:o2> = <nat:5> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:9> * <var:U> /\ <var:o2> = <nat:5> * <var:U> ^ <nat:2> /\ <var:o3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:9> * <var:U> /\ <var:o2> = <nat:5> * <var:U> ^ <nat:2> /\ <var:o3> = <nat:5> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:9> * <var:U> /\ <var:o2> = <nat:5> * <var:U> ^ <nat:2> /\ <var:o3> = <nat:5> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:9> * <var:U> /\ <var:o2> = <nat:5> * <var:U> ^ <nat:2> /\ <var:o3> = <nat:5> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:9> * <var:U> /\ <var:o2> = <nat:5> * <var:U> ^ <nat:2> /\ <var:W> = <nat:5> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:9> * <var:U> /\ <var:W> = <nat:5> * <var:U> ^ <nat:3> + <nat:5> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:o0> = <nat:1> /\ <var:W> = <nat:5> * <var:U> ^ <nat:3> + <nat:5> * <var:U> ^ <nat:2> + <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:U> /\ <var:W> = <nat:5> * <var:U> ^ <nat:3> + <nat:5> * <var:U> ^ <nat:2> + <nat:9> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 