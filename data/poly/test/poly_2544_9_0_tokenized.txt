\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:1> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:z> ; <var:E2> := <nat:1> ; <var:E2> := <var:E2> * <var:z> ; <var:E2> := <var:E2> * <var:z> ; <var:d> := <var:E2> ; <var:d> := <var:d> + <var:E1> ; <var:d> := <var:d> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Assuming , for any whole numbers $ <var:C> $ , $ <var:z> = <var:C> $ ahead of executing our list of instructions , it holds that we see $ <var:d> = <nat:1> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:1> $ when code has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:C> \} \\ <var:E0> := <nat:1> ; \\ \{ <var:z> = <var:C> \land <var:E0> = <nat:1> \} \\ <var:E1> := <nat:2> ; \\ \{ <var:z> = <var:C> \land <var:E0> = <nat:1> \land <var:E1> = <nat:2> \} \\ <var:E1> := <var:E1> * <var:z> ; \\ \{ <var:z> = <var:C> \land <var:E0> = <nat:1> \land <var:E1> = <nat:2> \times <var:C> \} \\ <var:E2> := <nat:1> ; \\ \{ <var:z> = <var:C> \land <var:E0> = <nat:1> \land <var:E1> = <nat:2> \times <var:C> \land <var:E2> = <nat:1> \} \\ <var:E2> := <var:E2> * <var:z> ; \\ \{ <var:z> = <var:C> \land <var:E0> = <nat:1> \land <var:E1> = <nat:2> \times <var:C> \land <var:E2> = <nat:1> \times <var:C> \} \\ <var:E2> := <var:E2> * <var:z> ; \\ \{ <var:z> = <var:C> \land <var:E0> = <nat:1> \land <var:E1> = <nat:2> \times <var:C> \land <var:E2> = <nat:1> \times <var:C> ^ <nat:2> \} \\ <var:d> := <var:E2> ; \\ \{ <var:z> = <var:C> \land <var:E0> = <nat:1> \land <var:E1> = <nat:2> \times <var:C> \land <var:d> = <nat:1> \times <var:C> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:E1> ; \\ \{ <var:z> = <var:C> \land <var:E0> = <nat:1> \land <var:d> = <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> \} \\ <var:d> := <var:d> + <var:E0> \\ \{ <var:z> = <var:C> \land <var:d> = <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:1> \} \end{eqnarray} Applying typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E0> := <nat:1> ; <var:E1> := <nat:2> ; <var:E1> := <var:E1> * <var:z> ; <var:E2> := <nat:1> ; <var:E2> := <var:E2> * <var:z> ; <var:E2> := <var:E2> * <var:z> ; <var:d> := <var:E2> ; <var:d> := <var:d> + <var:E1> ; <var:d> := <var:d> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:z> = <var:C> }} <def:poly> {{ <var:d> = <nat:1> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:2> * <var:C> /\ <var:E2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:2> * <var:C> /\ <var:E2> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:2> * <var:C> /\ <var:E2> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:E0> = <nat:1> /\ <var:E1> = <nat:2> * <var:C> /\ <var:d> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:E0> = <nat:1> /\ <var:d> = <nat:1> * <var:C> ^ <nat:2> + <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:d> = <nat:1> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 