\begin{document} \begin{theorem} Define a list of instructions as \begin{verbatim} <var:V1> := <var:a> ; <var:V2> := <var:V1> * <var:a> ; <var:V3> := <var:V2> * <var:a> ; <var:V0> := <nat:8> ; <var:V1> := <var:V1> * <nat:6> ; <var:V2> := <var:V2> * <nat:2> ; <var:V3> := <var:V3> * <nat:7> ; <var:B> := <var:V3> <var:B> := <var:B> + <var:V2> <var:B> := <var:B> + <var:V1> <var:B> := <var:B> + <var:V0> \end{verbatim} Allowing that we have $ <var:a> = <var:L> $ prior to running this series of commands then $ <var:B> = <nat:7> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:6> \times <var:L> + <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of commands can be done by typical Hoare reasoning . Moving on to the following line found in the program , we see the variable update command \verb | <var:V1> := <var:a> ; | . This statement takes the precondition $ \{ <var:a> = <var:L> \} $ as $ \{ <var:a> = <var:L> \land <var:V1> = <var:L> \} $ . This is rigorously given through the assignment scheme defined by typical Hoare logic . Paying attention to the subsequent step contained in our segment of code , the environment update code \verb | <var:V2> := <var:V1> * <var:a> ; | . This takes the condition $ \{ <var:a> = <var:L> \land <var:V1> = <var:L> \} $ toward the postcondition $ \{ <var:a> = <var:L> \land <var:V1> = <var:L> \land <var:V2> = <var:L> ^ <nat:2> \} $ . Immediately after , we see the line assigning $ <var:V2> * <var:a> $ as $ <var:V3>$ . This statement redefines the condition $ \{ <var:a> = <var:L> \land <var:V1> = <var:L> \land <var:V2> = <var:L> ^ <nat:2> \} $ toward the postcondition $ \{ <var:a> = <var:L> \land <var:V1> = <var:L> \land <var:V2> = <var:L> ^ <nat:2> \land <var:V3> = <var:L> ^ <nat:3> \} $ . This is deduced using the assignment rule given by Hoare techniques . Taking a look at the upcoming statement contained in the list of commands , the variable binding line \verb | <var:V0> := <nat:8> ; | . This takes the precondition $ \{ <var:a> = <var:L> \land <var:V1> = <var:L> \land <var:V2> = <var:L> ^ <nat:2> \land <var:V3> = <var:L> ^ <nat:3> \} $ toward $ \{ <var:a> = <var:L> \land <var:V1> = <var:L> \land <var:V2> = <var:L> ^ <nat:2> \land <var:V3> = <var:L> ^ <nat:3> \land <var:V0> = <nat:8> \} $ . Observing the subsequent line of code in the code segment , we see the variable binding code letting $ <var:V1> * <nat:6> $ toward $ <var:V1>$ . This line moves the precondition $ \{ <var:a> = <var:L> \land <var:V1> = <var:L> \land <var:V2> = <var:L> ^ <nat:2> \land <var:V3> = <var:L> ^ <nat:3> \land <var:V0> = <nat:8> \} $ to the postcondition $ \{ <var:a> = <var:L> \land <var:V1> = <nat:6> \times <var:L> \land <var:V2> = <var:L> ^ <nat:2> \land <var:V3> = <var:L> ^ <nat:3> \land <var:V0> = <nat:8> \} $ . This is deduced using the assignment rule defined in Hoare techniques . Paying attention to the next piece of code in the series of commands , the variable binding line letting $ <var:V2> * <nat:2> $ toward $ <var:V2>$ . This forwards $ \{ <var:a> = <var:L> \land <var:V1> = <nat:6> \times <var:L> \land <var:V2> = <var:L> ^ <nat:2> \land <var:V3> = <var:L> ^ <nat:3> \land <var:V0> = <nat:8> \} $ to the postcondition $ \{ <var:a> = <var:L> \land <var:V1> = <nat:6> \times <var:L> \land <var:V2> = <nat:2> \times <var:L> ^ <nat:2> \land <var:V3> = <var:L> ^ <nat:3> \land <var:V0> = <nat:8> \} $ . This is shown with the assignment inference rule defined by typical Hoare techniques . Advancing to the subsequent line seen in the list of commands , we see the code \verb | <var:V3> := <var:V3> * <nat:7> ; | . This forwards $ \{ <var:a> = <var:L> \land <var:V1> = <nat:6> \times <var:L> \land <var:V2> = <nat:2> \times <var:L> ^ <nat:2> \land <var:V3> = <var:L> ^ <nat:3> \land <var:V0> = <nat:8> \} $ into the condition $ \{ <var:a> = <var:L> \land <var:V1> = <nat:6> \times <var:L> \land <var:V2> = <nat:2> \times <var:L> ^ <nat:2> \land <var:V3> = <nat:7> \times <var:L> ^ <nat:3> \land <var:V0> = <nat:8> \} $ . This is guaranteed by the assignment law found in usual Hoare reasoning . Going to the next step , we have the variable assignmet command binding $ <var:V3$ to $ <var:B>$ . This command transfers $ \{ <var:a> = <var:L> \land <var:V1> = <nat:6> \times <var:L> \land <var:V2> = <nat:2> \times <var:L> ^ <nat:2> \land <var:V3> = <nat:7> \times <var:L> ^ <nat:3> \land <var:V0> = <nat:8> \} $ into the condition $ \{ <var:a> = <var:L> \land <var:V1> = <nat:6> \times <var:L> \land <var:V2> = <nat:2> \times <var:L> ^ <nat:2> \land <var:V0> = <nat:8> \land <var:B> = <nat:7> \times <var:L> ^ <nat:3> \} $ . Moving forward , the assignment command yielding $ <var:B> + <var:V2$ as $ <var:B>$ . This moves $ \{ <var:a> = <var:L> \land <var:V1> = <nat:6> \times <var:L> \land <var:V2> = <nat:2> \times <var:L> ^ <nat:2> \land <var:V0> = <nat:8> \land <var:B> = <nat:7> \times <var:L> ^ <nat:3> \} $ into the condition $ \{ <var:a> = <var:L> \land <var:V1> = <nat:6> \times <var:L> \land <var:V0> = <nat:8> \land <var:B> = <nat:7> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> \} $ . This is given with the assignment inference rule of Hoare techniques . Moving forward to the next step in our series of instructions , we see the assignment command assigning $ <var:B> + <var:V1$ to $ <var:B>$ . This moves $ \{ <var:a> = <var:L> \land <var:V1> = <nat:6> \times <var:L> \land <var:V0> = <nat:8> \land <var:B> = <nat:7> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> \} $ into $ \{ <var:a> = <var:L> \land <var:V0> = <nat:8> \land <var:B> = <nat:7> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:6> \times <var:L> \} $ . Taking a look at the subsequent bit of code in our program , we see the variable assignmet line \verb | <var:B> := <var:B> + <var:V0> | . This advances the condition $ \{ <var:a> = <var:L> \land <var:V0> = <nat:8> \land <var:B> = <nat:7> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:6> \times <var:L> \} $ toward the condition $ \{ <var:a> = <var:L> \land <var:B> = <nat:7> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:6> \times <var:L> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:a> = <var:L> }} <var:V1> := <var:a> ; <var:V2> := <var:V1> * <var:a> ; <var:V3> := <var:V2> * <var:a> ; <var:V0> := <nat:8> ; <var:V1> := <var:V1> * <nat:6> ; <var:V2> := <var:V2> * <nat:2> ; <var:V3> := <var:V3> * <nat:7> ; <var:B> := <var:V3> <var:B> := <var:B> + <var:V2> <var:B> := <var:B> + <var:V1> <var:B> := <var:B> + <var:V0> {{ <var:B> = <nat:7> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:6> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:V1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:V1> = <var:L> /\ <var:V2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:V1> = <var:L> /\ <var:V2> = <var:L> ^ <nat:2> /\ <var:V3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:V1> = <var:L> /\ <var:V2> = <var:L> ^ <nat:2> /\ <var:V3> = <var:L> ^ <nat:3> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:V1> = <nat:6> * <var:L> /\ <var:V2> = <var:L> ^ <nat:2> /\ <var:V3> = <var:L> ^ <nat:3> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:V1> = <nat:6> * <var:L> /\ <var:V2> = <nat:2> * <var:L> ^ <nat:2> /\ <var:V3> = <var:L> ^ <nat:3> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:V1> = <nat:6> * <var:L> /\ <var:V2> = <nat:2> * <var:L> ^ <nat:2> /\ <var:V3> = <nat:7> * <var:L> ^ <nat:3> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:V1> = <nat:6> * <var:L> /\ <var:V2> = <nat:2> * <var:L> ^ <nat:2> /\ <var:V0> = <nat:8> /\ <var:B> = <nat:7> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:V1> = <nat:6> * <var:L> /\ <var:V0> = <nat:8> /\ <var:B> = <nat:7> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:V0> = <nat:8> /\ <var:B> = <nat:7> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:B> = <nat:7> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:6> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 