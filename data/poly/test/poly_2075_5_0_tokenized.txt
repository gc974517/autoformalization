\begin{document} \begin{theorem} Consider a list of commands : \begin{verbatim} <var:O0> := <nat:1> ; <var:O1> := <nat:7> ; <var:O1> := <var:O1> * <var:c> ; <var:U> := <var:O1> ; <var:U> := <var:U> + <var:O0> \end{verbatim} Allowing it to hold that $ <var:c> = <var:W> $ ahead of evaluating the set of commands it follows that we see $ <var:U> = <nat:7> \cdot <var:W> + <nat:1> $ . \end{theorem} \begin{proof} Using usual Hoare techniques gives : \begin{eqnarray} \{ <var:c> = <var:W> \} \\ <var:O0> := <nat:1> ; \\ \{ <var:c> = <var:W> \land <var:O0> = <nat:1> \} \\ <var:O1> := <nat:7> ; \\ \{ <var:c> = <var:W> \land <var:O0> = <nat:1> \land <var:O1> = <nat:7> \} \\ <var:O1> := <var:O1> * <var:c> ; \\ \{ <var:c> = <var:W> \land <var:O0> = <nat:1> \land <var:O1> = <nat:7> \times <var:W> \} \\ <var:U> := <var:O1> ; \\ \{ <var:c> = <var:W> \land <var:O0> = <nat:1> \land <var:U> = <nat:7> \times <var:W> \} \\ <var:U> := <var:U> + <var:O0> \\ \{ <var:c> = <var:W> \land <var:U> = <nat:7> \times <var:W> + <nat:1> \} \end{eqnarray} As a result , our set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:c> = <var:W> }} <var:O0> := <nat:1> ; <var:O1> := <nat:7> ; <var:O1> := <var:O1> * <var:c> ; <var:U> := <var:O1> ; <var:U> := <var:U> + <var:O0> {{ <var:U> = <nat:7> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:O0> = <nat:1> /\ <var:O1> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:O0> = <nat:1> /\ <var:U> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:W> /\ <var:U> = <nat:7> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 