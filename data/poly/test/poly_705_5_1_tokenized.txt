\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} such that \begin{verbatim} <var:q1> := <var:K> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:2> ; <var:Z> := <var:q1> <var:Z> := <var:Z> + <var:q0> \end{verbatim} Allow it to hold that $ <var:K> = <var:h> $ ( given integers $ <var:h> $ ) ahead of executing our list of instructions it holds that we have $ <var:Z> = <nat:2> \times <var:h> + <nat:3> $ . \end{theorem} \begin{proof} We can see that the below decorated list of instructions . \begin{eqnarray} \{ <var:K> = <var:h> \} \\ <var:q1> := <var:K> ; \\ \{ <var:K> = <var:h> \land <var:q1> = <var:h> \} \end{eqnarray} Allowing the execution of our program yields : \begin{eqnarray} <var:q0> := <nat:3> ; \\ \{ <var:K> = <var:h> \land <var:q1> = <var:h> \land <var:q0> = <nat:3> \} \\ <var:q1> := <var:q1> * <nat:2> ; \\ \{ <var:K> = <var:h> \land <var:q1> = <nat:2> \cdot <var:h> \land <var:q0> = <nat:3> \} \\ <var:Z> := <var:q1> \\ \{ <var:K> = <var:h> \land <var:q0> = <nat:3> \land <var:Z> = <nat:2> \cdot <var:h> \} \\ <var:Z> := <var:Z> + <var:q0> \\ \{ <var:K> = <var:h> \land <var:Z> = <nat:2> \cdot <var:h> + <nat:3> \} \end{eqnarray} The application of typical Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:K> = <var:h> }} <var:q1> := <var:K> ; <var:q0> := <nat:3> ; <var:q1> := <var:q1> * <nat:2> ; <var:Z> := <var:q1> <var:Z> := <var:Z> + <var:q0> {{ <var:Z> = <nat:2> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:h> /\ <var:q1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:h> /\ <var:q1> = <var:h> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:h> /\ <var:q1> = <nat:2> * <var:h> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:h> /\ <var:q0> = <nat:3> /\ <var:Z> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:h> /\ <var:Z> = <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 