\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:1> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:A> ; <var:C2> := <nat:1> ; <var:C2> := <var:C2> * <var:A> ; <var:C2> := <var:C2> * <var:A> ; <var:C3> := <nat:4> ; <var:C3> := <var:C3> * <var:A> ; <var:C3> := <var:C3> * <var:A> ; <var:C3> := <var:C3> * <var:A> ; <var:M> := <var:C3> ; <var:M> := <var:M> + <var:C2> ; <var:M> := <var:M> + <var:C1> ; <var:M> := <var:M> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Allow it to be that $ <var:A> = <var:s> $ --- for natural coefficients $ <var:s> $ --- prior to executing the set of commands it follows that we see $ <var:M> = <nat:4> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for our list of commands is evident through usual Hoare logic . Moving on , we see \verb | { <var:A> = <var:s> } <var:C0> := <nat:1> { <var:A> = <var:s> \land <var:C0> = <nat:1> } | and \verb | { <var:A> = <var:s> \land <var:C0> = <nat:1> } <var:C1> := <nat:4> { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> } | . This is shown to be logically sound by the inference rule given by Hoare logic . Next , we have \verb | { <var:A> = <var:s> } <var:C0> := <nat:1> { <var:A> = <var:s> \land <var:C0> = <nat:1> } | , \verb | { <var:A> = <var:s> \land <var:C0> = <nat:1> } <var:C1> := <nat:4> { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> } | , \verb | { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> } <var:C1> := <var:C1> * <var:A> { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> } | , \verb | { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> } <var:C2> := <nat:1> { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> } | , \verb | { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> } <var:C2> := <var:C2> * <var:A> { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> \cdot <var:s> } | , \verb | { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> \cdot <var:s> } <var:C2> := <var:C2> * <var:A> { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> \cdot <var:s> ^ <nat:2> } | , \verb | { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> \cdot <var:s> ^ <nat:2> } <var:C3> := <nat:4> { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> \cdot <var:s> ^ <nat:2> \land <var:C3> = <nat:4> } | , \verb | { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> \cdot <var:s> ^ <nat:2> \land <var:C3> = <nat:4> } <var:C3> := <var:C3> * <var:A> { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> \cdot <var:s> ^ <nat:2> \land <var:C3> = <nat:4> \cdot <var:s> } | , \verb | { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> \cdot <var:s> ^ <nat:2> \land <var:C3> = <nat:4> \cdot <var:s> } <var:C3> := <var:C3> * <var:A> { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> \cdot <var:s> ^ <nat:2> \land <var:C3> = <nat:4> \cdot <var:s> ^ <nat:2> } | , \verb | { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> \cdot <var:s> ^ <nat:2> \land <var:C3> = <nat:4> \cdot <var:s> ^ <nat:2> } <var:C3> := <var:C3> * <var:A> { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> \cdot <var:s> ^ <nat:2> \land <var:C3> = <nat:4> \cdot <var:s> ^ <nat:3> } | and \verb | { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> \cdot <var:s> ^ <nat:2> \land <var:C3> = <nat:4> \cdot <var:s> ^ <nat:3> } <var:M> := <var:C3> { <var:A> = <var:s> \land <var:C0> = <nat:1> \land <var:C1> = <nat:4> \cdot <var:s> \land <var:C2> = <nat:1> \cdot <var:s> ^ <nat:2> \land <var:M> = <nat:4> \cdot <var:s> ^ <nat:3> } | . This is known to be sound by the variable binding rule from Hoare techniques . Following , we have \verb | { <var:A> = <var:s> } <var:C0> := <nat:1> { <var:A> = <var:s> \land <var:C0> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <def:poly> := <var:C0> := <nat:1> ; <var:C1> := <nat:4> ; <var:C1> := <var:C1> * <var:A> ; <var:C2> := <nat:1> ; <var:C2> := <var:C2> * <var:A> ; <var:C2> := <var:C2> * <var:A> ; <var:C3> := <nat:4> ; <var:C3> := <var:C3> * <var:A> ; <var:C3> := <var:C3> * <var:A> ; <var:C3> := <var:C3> * <var:A> ; <var:M> := <var:C3> ; <var:M> := <var:M> + <var:C2> ; <var:M> := <var:M> + <var:C1> ; <var:M> := <var:M> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:A> = <var:s> }} <def:poly> {{ <var:M> = <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:4> * <var:s> /\ <var:C2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:4> * <var:s> /\ <var:C2> = <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:4> * <var:s> /\ <var:C2> = <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:4> * <var:s> /\ <var:C2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:C3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:4> * <var:s> /\ <var:C2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:4> * <var:s> /\ <var:C2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:4> * <var:s> /\ <var:C2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:4> * <var:s> /\ <var:C2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:M> = <nat:4> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:C0> = <nat:1> /\ <var:C1> = <nat:4> * <var:s> /\ <var:M> = <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:C0> = <nat:1> /\ <var:M> = <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:s> /\ <var:M> = <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 