\begin{document} \begin{theorem} We define the following series of commands as \begin{verbatim} <var:M1> := <var:F> ; <var:M2> := <var:M1> * <var:F> ; <var:M3> := <var:M2> * <var:F> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:6> ; <var:M2> := <var:M2> * <nat:8> ; <var:M3> := <var:M3> * <nat:1> ; <var:d> := <var:M3> <var:d> := <var:d> + <var:M2> <var:d> := <var:d> + <var:M1> <var:d> := <var:d> + <var:M0> \end{verbatim} Allow for some positive coefficients $ <var:w> $ that we have $ <var:F> = <var:w> $ before the evaluation of the set of commands then we have $ <var:d> = <nat:1> \cdot <var:w> ^ <nat:3> + <nat:8> \cdot <var:w> ^ <nat:2> + <nat:6> \cdot <var:w> + <nat:2> $ once series of commands terminates . \end{theorem} \begin{proof} Arguing the correctness of the set of commands is demonstrated with typical Hoare reasoning . Looking at the next command contained in our list of commands , we have the binding code \verb | <var:M1> := <var:F> ; | . This forwards the condition $ \{ <var:F> = <var:w> \} $ into the postcondition $ \{ <var:F> = <var:w> \land <var:M1> = <var:w> \} $ . Moving onward , we have the variable assignmet command \verb | <var:M2> := <var:M1> * <var:F> ; | . This redefines the condition $ \{ <var:F> = <var:w> \land <var:M1> = <var:w> \} $ toward the condition $ \{ <var:F> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \} $ . Moving onward , the binding command \verb | <var:M3> := <var:M2> * <var:F> ; | . This redefines $ \{ <var:F> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \} $ as the condition $ \{ <var:F> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \} $ . This is guaranteed through the assignment law given in standard Hoare logic . Shifting focus toward the next piece of code contained in the code segment , we see the assignment command \verb | <var:M0> := <nat:2> ; | . This code advances the condition $ \{ <var:F> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \} $ toward $ \{ <var:F> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:2> \} $ . Considering the upcoming statement contained in our series of commands , we see the variable assignmet line \verb | <var:M1> := <var:M1> * <nat:6> ; | . This line forwards $ \{ <var:F> = <var:w> \land <var:M1> = <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:2> \} $ toward the condition $ \{ <var:F> = <var:w> \land <var:M1> = <nat:6> \cdot <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:2> \} $ . This is ensured by the assignment scheme obtained from standard Hoare logic . Advancing to the next step found in our list of commands , we have the variable assignmet code defining $ <var:M2> * <nat:8> $ to $ <var:M2>$ . This line moves $ \{ <var:F> = <var:w> \land <var:M1> = <nat:6> \cdot <var:w> \land <var:M2> = <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:2> \} $ to the postcondition $ \{ <var:F> = <var:w> \land <var:M1> = <nat:6> \cdot <var:w> \land <var:M2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:2> \} $ . This is sound through the assignment scheme in standard Hoare techniques . Focusing on the upcoming piece of code found in our set of instructions , we see the assignment code \verb | <var:M3> := <var:M3> * <nat:1> ; | . This redefines $ \{ <var:F> = <var:w> \land <var:M1> = <nat:6> \cdot <var:w> \land <var:M2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:M3> = <var:w> ^ <nat:3> \land <var:M0> = <nat:2> \} $ toward the postcondition $ \{ <var:F> = <var:w> \land <var:M1> = <nat:6> \cdot <var:w> \land <var:M2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:M3> = <nat:1> \cdot <var:w> ^ <nat:3> \land <var:M0> = <nat:2> \} $ . This is deduced with the assignment scheme in standard Hoare techniques . Moving forward to the following line seen in the list of commands , the statement \verb | <var:d> := <var:M3> | . This code moves $ \{ <var:F> = <var:w> \land <var:M1> = <nat:6> \cdot <var:w> \land <var:M2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:M3> = <nat:1> \cdot <var:w> ^ <nat:3> \land <var:M0> = <nat:2> \} $ as the condition $ \{ <var:F> = <var:w> \land <var:M1> = <nat:6> \cdot <var:w> \land <var:M2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:M0> = <nat:2> \land <var:d> = <nat:1> \cdot <var:w> ^ <nat:3> \} $ . Advancing to the upcoming line of code found in the series of commands , the assignment statement defining $ <var:d> + <var:M2$ as $ <var:d>$ . This redefines the condition $ \{ <var:F> = <var:w> \land <var:M1> = <nat:6> \cdot <var:w> \land <var:M2> = <nat:8> \cdot <var:w> ^ <nat:2> \land <var:M0> = <nat:2> \land <var:d> = <nat:1> \cdot <var:w> ^ <nat:3> \} $ toward $ \{ <var:F> = <var:w> \land <var:M1> = <nat:6> \cdot <var:w> \land <var:M0> = <nat:2> \land <var:d> = <nat:1> \cdot <var:w> ^ <nat:3> + <nat:8> \cdot <var:w> ^ <nat:2> \} $ . This is ensured by the assignment law from usual Hoare reasoning . Advancing on , the environment update code \verb | <var:d> := <var:d> + <var:M1> | . This advances the condition $ \{ <var:F> = <var:w> \land <var:M1> = <nat:6> \cdot <var:w> \land <var:M0> = <nat:2> \land <var:d> = <nat:1> \cdot <var:w> ^ <nat:3> + <nat:8> \cdot <var:w> ^ <nat:2> \} $ to the postcondition $ \{ <var:F> = <var:w> \land <var:M0> = <nat:2> \land <var:d> = <nat:1> \cdot <var:w> ^ <nat:3> + <nat:8> \cdot <var:w> ^ <nat:2> + <nat:6> \cdot <var:w> \} $ . This is known to be sound by the assignment law of typical Hoare techniques . Stepping forward , we have the environment update command \verb | <var:d> := <var:d> + <var:M0> | . This command advances the precondition $ \{ <var:F> = <var:w> \land <var:M0> = <nat:2> \land <var:d> = <nat:1> \cdot <var:w> ^ <nat:3> + <nat:8> \cdot <var:w> ^ <nat:2> + <nat:6> \cdot <var:w> \} $ toward the postcondition $ \{ <var:F> = <var:w> \land <var:d> = <nat:1> \cdot <var:w> ^ <nat:3> + <nat:8> \cdot <var:w> ^ <nat:2> + <nat:6> \cdot <var:w> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:F> = <var:w> }} <var:M1> := <var:F> ; <var:M2> := <var:M1> * <var:F> ; <var:M3> := <var:M2> * <var:F> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:6> ; <var:M2> := <var:M2> * <nat:8> ; <var:M3> := <var:M3> * <nat:1> ; <var:d> := <var:M3> <var:d> := <var:d> + <var:M2> <var:d> := <var:d> + <var:M1> <var:d> := <var:d> + <var:M0> {{ <var:d> = <nat:1> * <var:w> ^ <nat:3> + <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:M1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:M1> = <var:w> /\ <var:M2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:M1> = <var:w> /\ <var:M2> = <var:w> ^ <nat:2> /\ <var:M3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:M1> = <var:w> /\ <var:M2> = <var:w> ^ <nat:2> /\ <var:M3> = <var:w> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:M1> = <nat:6> * <var:w> /\ <var:M2> = <var:w> ^ <nat:2> /\ <var:M3> = <var:w> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:M1> = <nat:6> * <var:w> /\ <var:M2> = <nat:8> * <var:w> ^ <nat:2> /\ <var:M3> = <var:w> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:M1> = <nat:6> * <var:w> /\ <var:M2> = <nat:8> * <var:w> ^ <nat:2> /\ <var:M3> = <nat:1> * <var:w> ^ <nat:3> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:M1> = <nat:6> * <var:w> /\ <var:M2> = <nat:8> * <var:w> ^ <nat:2> /\ <var:M0> = <nat:2> /\ <var:d> = <nat:1> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:M1> = <nat:6> * <var:w> /\ <var:M0> = <nat:2> /\ <var:d> = <nat:1> * <var:w> ^ <nat:3> + <nat:8> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:M0> = <nat:2> /\ <var:d> = <nat:1> * <var:w> ^ <nat:3> + <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:d> = <nat:1> * <var:w> ^ <nat:3> + <nat:8> * <var:w> ^ <nat:2> + <nat:6> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 