\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:g0> := <nat:2> ; <var:B> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Allow --- given positive integer coefficients $ <var:G> $ --- it to hold that $ <var:X> = <var:G> $ before evaluating our list of instructions , it must be that we have $ <var:B> = <nat:2> $ . \end{theorem} \begin{proof} The argument for this series of commands can be done using usual Hoare logic . Immediately after , we see \begin{verbatim} { <var:X> = <var:G> } <var:g0> := <nat:2> { <var:X> = <var:G> \land <var:g0> = <nat:2> } { <var:X> = <var:G> \land <var:g0> = <nat:2> } <var:B> := <var:g0{ <var:X> = <var:G> \land <var:B> = <nat:2> } \end{verbatim} This is rigorously given using the binding rule defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:2> ; <var:B> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:X> = <var:G> }} <def:poly> {{ <var:B> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:G> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:G> /\ <var:B> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 