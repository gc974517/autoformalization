\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:5> ; <var:s1> := <nat:9> ; <var:s1> := <var:s1> * <var:Z> ; <var:i> := <var:s1> ; <var:i> := <var:i> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Given --- for all whole numbers $ <var:e> $ --- $ <var:Z> = <var:e> $ before interpreting this set of commands , it holds that $ <var:i> = <nat:9> * <var:e> + <nat:5> $ once list of commands exits . \end{theorem} \begin{proof} The course of logic for this set of commands can be seen with usual Hoare techniques . Moving forward to the following statement found in our set of instructions , we see \verb | { <var:Z> = <var:e> } <var:s0> := <nat:5> { <var:Z> = <var:e> \land <var:s0> = <nat:5> } | . Further , \verb | { <var:Z> = <var:e> } <var:s0> := <nat:5> { <var:Z> = <var:e> \land <var:s0> = <nat:5> } | , \verb | { <var:Z> = <var:e> \land <var:s0> = <nat:5> } <var:s1> := <nat:9> { <var:Z> = <var:e> \land <var:s0> = <nat:5> \land <var:s1> = <nat:9> } | , \verb | { <var:Z> = <var:e> \land <var:s0> = <nat:5> \land <var:s1> = <nat:9> } <var:s1> := <var:s1> * <var:Z> { <var:Z> = <var:e> \land <var:s0> = <nat:5> \land <var:s1> = <nat:9> * <var:e> } | and \verb | { <var:Z> = <var:e> \land <var:s0> = <nat:5> \land <var:s1> = <nat:9> * <var:e> } <var:i> := <var:s1> { <var:Z> = <var:e> \land <var:s0> = <nat:5> \land <var:i> = <nat:9> * <var:e> } | . This is given with the environment update rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s0> := <nat:5> ; <var:s1> := <nat:9> ; <var:s1> := <var:s1> * <var:Z> ; <var:i> := <var:s1> ; <var:i> := <var:i> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:Z> = <var:e> }} <def:poly> {{ <var:i> = <nat:9> * <var:e> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:s0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:s0> = <nat:5> /\ <var:s1> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:s0> = <nat:5> /\ <var:i> = <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:e> /\ <var:i> = <nat:9> * <var:e> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 