\begin{document} \begin{theorem} Consider a series of instructions such that \begin{verbatim} <var:P0> := <nat:7> ; <var:P1> := <nat:6> ; <var:P1> := <var:P1> * <var:E> ; <var:f> := <var:P1> ; <var:f> := <var:f> + <var:P0> \end{verbatim} Allow --- given any $ <var:K> $ --- $ <var:E> = <var:K> $ before evaluating this series of commands then we have $ <var:f> = <nat:6> \cdot <var:K> + <nat:7> $ after list of instructions exits . \end{theorem} \begin{proof} The course of logic for this list of instructions can be done through standard Hoare reasoning . Following , we see the variable update command \verb | <var:P0> := <nat:7> ; | . This statement advances $ \{ <var:E> = <var:K> \} $ to $ \{ <var:E> = <var:K> \land <var:P0> = <nat:7> \} $ . Going forward , the variable assignmet code giving $ <nat:6> $ toward $ <var:P1>$ . This command forwards $ \{ <var:E> = <var:K> \land <var:P0> = <nat:7> \} $ to $ \{ <var:E> = <var:K> \land <var:P0> = <nat:7> \land <var:P1> = <nat:6> \} $ . Going to the next step , we see the assignment line letting $ <var:P1> * <var:E> $ as $ <var:P1>$ . This redefines $ \{ <var:E> = <var:K> \land <var:P0> = <nat:7> \land <var:P1> = <nat:6> \} $ into $ \{ <var:E> = <var:K> \land <var:P0> = <nat:7> \land <var:P1> = <nat:6> * <var:K> \} $ . This is deduced with the assignment law given in usual Hoare techniques . After , we see the environment update line \verb | <var:f> := <var:P1> ; | . This line transfers the precondition $ \{ <var:E> = <var:K> \land <var:P0> = <nat:7> \land <var:P1> = <nat:6> * <var:K> \} $ as the postcondition $ \{ <var:E> = <var:K> \land <var:P0> = <nat:7> \land <var:f> = <nat:6> * <var:K> \} $ . Next , we see the variable binding statement assigning $ <var:f> + <var:P0$ as $ <var:f>$ . This command advances the precondition $ \{ <var:E> = <var:K> \land <var:P0> = <nat:7> \land <var:f> = <nat:6> * <var:K> \} $ to the postcondition $ \{ <var:E> = <var:K> \land <var:f> = <nat:6> * <var:K> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:E> = <var:K> }} <var:P0> := <nat:7> ; <var:P1> := <nat:6> ; <var:P1> := <var:P1> * <var:E> ; <var:f> := <var:P1> ; <var:f> := <var:f> + <var:P0> {{ <var:f> = <nat:6> * <var:K> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:P0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:P0> = <nat:7> /\ <var:P1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:P0> = <nat:7> /\ <var:P1> = <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:P0> = <nat:7> /\ <var:f> = <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:f> = <nat:6> * <var:K> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 