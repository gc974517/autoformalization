\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:C> ; <var:o> := <var:w1> ; <var:o> := <var:o> + <var:w0> \end{verbatim} Assuming that we have $ <var:C> = <var:N> $ before interpreting our list of commands it holds that $ <var:o> = <nat:2> * <var:N> + <nat:3> $ after list of commands executes . \end{theorem} \begin{proof} The method of proof for the set of instructions can be demonstrated by standard Hoare reasoning . Shifting focus toward the next lines found in the list of instructions , \verb | { <var:C> = <var:N> } <var:w0> := <nat:3> { <var:C> = <var:N> \land <var:w0> = <nat:3> } | , \verb | { <var:C> = <var:N> \land <var:w0> = <nat:3> } <var:w1> := <nat:2> { <var:C> = <var:N> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> } | , \verb | { <var:C> = <var:N> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> } <var:w1> := <var:w1> * <var:C> { <var:C> = <var:N> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \cdot <var:N> } | and \verb | { <var:C> = <var:N> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \cdot <var:N> } <var:o> := <var:w1> { <var:C> = <var:N> \land <var:w0> = <nat:3> \land <var:o> = <nat:2> \cdot <var:N> } | . This is guaranteed using the assignment scheme given in typical Hoare techniques . Stepping through , we see \verb | { <var:C> = <var:N> } <var:w0> := <nat:3> { <var:C> = <var:N> \land <var:w0> = <nat:3> } | . This is shown with the inference rule obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:C> = <var:N> }} <var:w0> := <nat:3> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:C> ; <var:o> := <var:w1> ; <var:o> := <var:o> + <var:w0> {{ <var:o> = <nat:2> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:w0> = <nat:3> /\ <var:o> = <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:o> = <nat:2> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 