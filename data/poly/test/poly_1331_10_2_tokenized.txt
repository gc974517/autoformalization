\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} such that \begin{verbatim} <var:l> := <nat:2> ; <var:l> := <nat:4> + <var:l> * <var:e> ; <var:l> := <nat:2> + <var:l> * <var:e> ; <var:l> := <nat:3> + <var:l> * <var:e> ; <var:l> := <nat:3> + <var:l> * <var:e> ; <var:l> := <nat:2> + <var:l> * <var:e> ; <var:l> := <nat:1> + <var:l> * <var:e> ; <var:l> := <nat:4> + <var:l> * <var:e> ; <var:l> := <nat:4> + <var:l> * <var:e> ; <var:l> := <nat:2> + <var:l> * <var:e> \end{verbatim} Assuming ( with some positive integer coefficients $ <var:E> $ ) that $ <var:e> = <var:E> $ ahead of executing this list of commands , it holds that we have $ <var:l> = <nat:2> \times <var:E> ^ <nat:9> + <nat:4> \times <var:E> ^ <nat:8> + <nat:2> \times <var:E> ^ <nat:7> + <nat:3> \times <var:E> ^ <nat:6> + <nat:3> \times <var:E> ^ <nat:5> + <nat:2> \times <var:E> ^ <nat:4> + <nat:1> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:2> $ after code has exited . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is clear by the below decorated set of instructions . \begin{eqnarray} \{ <var:e> = <var:E> \} \\ <var:l> := <nat:2> ; \\ \{ <var:e> = <var:E> \land <var:l> = <nat:2> \} \\ <var:l> := <nat:4> + <var:l> * <var:e> ; \\ \{ <var:e> = <var:E> \land <var:l> = <nat:2> \times <var:E> + <nat:4> \} \\ <var:l> := <nat:2> + <var:l> * <var:e> ; \\ \{ <var:e> = <var:E> \land <var:l> = <nat:2> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:2> \} \\ <var:l> := <nat:3> + <var:l> * <var:e> ; \\ \{ <var:e> = <var:E> \land <var:l> = <nat:2> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:3> \} \\ <var:l> := <nat:3> + <var:l> * <var:e> ; \\ \{ <var:e> = <var:E> \land <var:l> = <nat:2> \times <var:E> ^ <nat:4> + <nat:4> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:3> \} \\ <var:l> := <nat:2> + <var:l> * <var:e> ; \\ \{ <var:e> = <var:E> \land <var:l> = <nat:2> \times <var:E> ^ <nat:5> + <nat:4> \times <var:E> ^ <nat:4> + <nat:2> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:2> \} \end{eqnarray} Advancing executing the set of commands produces : \begin{eqnarray} <var:l> := <nat:1> + <var:l> * <var:e> ; \\ \{ <var:e> = <var:E> \land <var:l> = <nat:2> \times <var:E> ^ <nat:6> + <nat:4> \times <var:E> ^ <nat:5> + <nat:2> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:1> \} \\ <var:l> := <nat:4> + <var:l> * <var:e> ; \\ \{ <var:e> = <var:E> \land <var:l> = <nat:2> \times <var:E> ^ <nat:7> + <nat:4> \times <var:E> ^ <nat:6> + <nat:2> \times <var:E> ^ <nat:5> + <nat:3> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + <nat:4> \} \\ <var:l> := <nat:4> + <var:l> * <var:e> ; \\ \{ <var:e> = <var:E> \land <var:l> = <nat:2> \times <var:E> ^ <nat:8> + <nat:4> \times <var:E> ^ <nat:7> + <nat:2> \times <var:E> ^ <nat:6> + <nat:3> \times <var:E> ^ <nat:5> + <nat:3> \times <var:E> ^ <nat:4> + <nat:2> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:4> \} \\ <var:l> := <nat:2> + <var:l> * <var:e> \\ \{ <var:e> = <var:E> \land <var:l> = <nat:2> \times <var:E> ^ <nat:9> + <nat:4> \times <var:E> ^ <nat:8> + <nat:2> \times <var:E> ^ <nat:7> + <nat:3> \times <var:E> ^ <nat:6> + <nat:3> \times <var:E> ^ <nat:5> + <nat:2> \times <var:E> ^ <nat:4> + <nat:1> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:2> \} \end{eqnarray} Using standard Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:e> = <var:E> }} <var:l> := <nat:2> ; <var:l> := <nat:4> + <var:l> * <var:e> ; <var:l> := <nat:2> + <var:l> * <var:e> ; <var:l> := <nat:3> + <var:l> * <var:e> ; <var:l> := <nat:3> + <var:l> * <var:e> ; <var:l> := <nat:2> + <var:l> * <var:e> ; <var:l> := <nat:1> + <var:l> * <var:e> ; <var:l> := <nat:4> + <var:l> * <var:e> ; <var:l> := <nat:4> + <var:l> * <var:e> ; <var:l> := <nat:2> + <var:l> * <var:e> {{ <var:l> = <nat:2> * <var:E> ^ <nat:9> + <nat:4> * <var:E> ^ <nat:8> + <nat:2> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:l> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:l> = <nat:2> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:l> = <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:l> = <nat:2> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:l> = <nat:2> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:l> = <nat:2> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:l> = <nat:2> * <var:E> ^ <nat:6> + <nat:4> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:l> = <nat:2> * <var:E> ^ <nat:7> + <nat:4> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:l> = <nat:2> * <var:E> ^ <nat:8> + <nat:4> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:E> /\ <var:l> = <nat:2> * <var:E> ^ <nat:9> + <nat:4> * <var:E> ^ <nat:8> + <nat:2> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 