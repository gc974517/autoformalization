\begin{document} \begin{theorem} We define the following segment of code as \begin{verbatim} <var:Z0> := <nat:4> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:n> ; <var:E> := <var:Z1> ; <var:E> := <var:E> + <var:Z0> \end{verbatim} Allowing ( given every whole numbers $ <var:r> $ ) it to hold that $ <var:n> = <var:r> $ ahead of the execution of the segment of code , then we have $ <var:E> = <nat:1> \cdot <var:r> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for the set of commands is accomplished through typical Hoare techniques . Keeping momentum , \begin{verbatim} { <var:n> = <var:r> } <var:Z0> := <nat:4> { <var:n> = <var:r> \land <var:Z0> = <nat:4> } { <var:n> = <var:r> \land <var:Z0> = <nat:4> } <var:Z1> := <nat:1> { <var:n> = <var:r> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> } { <var:n> = <var:r> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> } <var:Z1> := <var:Z1> * <var:n> { <var:n> = <var:r> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> * <var:r> } { <var:n> = <var:r> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> * <var:r> } <var:E> := <var:Z1> { <var:n> = <var:r> \land <var:Z0> = <nat:4> \land <var:E> = <nat:1> * <var:r> } { <var:n> = <var:r> \land <var:Z0> = <nat:4> \land <var:E> = <nat:1> * <var:r> } <var:E> := <var:E> + <var:Z0{ <var:n> = <var:r> \land <var:E> = <nat:1> * <var:r> + <nat:4> } \end{verbatim} This is deduced by the variable binding rule given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:n> = <var:r> }} <var:Z0> := <nat:4> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:n> ; <var:E> := <var:Z1> ; <var:E> := <var:E> + <var:Z0> {{ <var:E> = <nat:1> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:Z0> = <nat:4> /\ <var:E> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:E> = <nat:1> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 