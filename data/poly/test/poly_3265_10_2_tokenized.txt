\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:W> := <nat:3> ; <var:W> := <nat:4> + <var:W> * <var:X> ; <var:W> := <nat:4> + <var:W> * <var:X> ; <var:W> := <nat:2> + <var:W> * <var:X> ; <var:W> := <var:W> * <var:X> ; <var:W> := <nat:1> + <var:W> * <var:X> ; <var:W> := <nat:1> + <var:W> * <var:X> ; <var:W> := <nat:3> + <var:W> * <var:X> ; <var:W> := <var:W> * <var:X> ; <var:W> := <nat:2> + <var:W> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:X> = <var:P> $ before evaluating the series of commands , it follows that $ <var:W> = <nat:3> \cdot <var:P> ^ <nat:9> + <nat:4> \cdot <var:P> ^ <nat:8> + <nat:4> \cdot <var:P> ^ <nat:7> + <nat:2> \cdot <var:P> ^ <nat:6> + <nat:1> \cdot <var:P> ^ <nat:4> + <nat:1> \cdot <var:P> ^ <nat:3> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for our series of commands can be shown with usual Hoare techniques . Considering the subsequent statement contained in the set of commands , we see the variable update line letting $ <nat:3> $ toward $ <var:W>$ . This redefines $ \{ <var:X> = <var:P> \} $ as the postcondition $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \} $ . Focusing on the subsequent line contained in the list of instructions , the variable update command \verb | <var:W> := <nat:4> + <var:W> * <var:X> ; | . This command advances the precondition $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \} $ to $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> + <nat:4> \} $ . Honing in on the upcoming step seen in our code , we see the assignment code defining $ <nat:4> + <var:W> * <var:X> $ into $ <var:W>$ . This transfers $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> + <nat:4> \} $ to the condition $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:2> + <nat:4> \times <var:P> + <nat:4> \} $ . This is sound with the assignment inference rule of typical Hoare reasoning . Moving forward to the upcoming command found in the series of instructions , we have the variable assignmet line assigning $ <nat:2> + <var:W> * <var:X> $ to $ <var:W>$ . This command moves the condition $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:2> + <nat:4> \times <var:P> + <nat:4> \} $ into $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:3> + <nat:4> \times <var:P> ^ <nat:2> + <nat:4> \times <var:P> + <nat:2> \} $ . Stepping through , we have the binding line \verb | <var:W> := <var:W> * <var:X> ; | . This line forwards the condition $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:3> + <nat:4> \times <var:P> ^ <nat:2> + <nat:4> \times <var:P> + <nat:2> \} $ toward $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:4> + <nat:4> \times <var:P> ^ <nat:3> + <nat:4> \times <var:P> ^ <nat:2> + <nat:2> \times <var:P> + \} $ . Immediately following , the variable assignmet command binding $ <nat:1> + <var:W> * <var:X> $ to $ <var:W>$ . This command takes $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:4> + <nat:4> \times <var:P> ^ <nat:3> + <nat:4> \times <var:P> ^ <nat:2> + <nat:2> \times <var:P> + \} $ into $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:5> + <nat:4> \times <var:P> ^ <nat:4> + <nat:4> \times <var:P> ^ <nat:3> + <nat:2> \times <var:P> ^ <nat:2> + <nat:1> \} $ . Advancing , we have the variable binding line binding $ <nat:1> + <var:W> * <var:X> $ into $ <var:W>$ . This statement takes the precondition $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:5> + <nat:4> \times <var:P> ^ <nat:4> + <nat:4> \times <var:P> ^ <nat:3> + <nat:2> \times <var:P> ^ <nat:2> + <nat:1> \} $ to $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:6> + <nat:4> \times <var:P> ^ <nat:5> + <nat:4> \times <var:P> ^ <nat:4> + <nat:2> \times <var:P> ^ <nat:3> + <nat:1> \times <var:P> + <nat:1> \} $ . Looking at the next bit of code seen in the set of instructions , we have the variable assignmet line \verb | <var:W> := <nat:3> + <var:W> * <var:X> ; | . This advances the condition $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:6> + <nat:4> \times <var:P> ^ <nat:5> + <nat:4> \times <var:P> ^ <nat:4> + <nat:2> \times <var:P> ^ <nat:3> + <nat:1> \times <var:P> + <nat:1> \} $ toward the postcondition $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:7> + <nat:4> \times <var:P> ^ <nat:6> + <nat:4> \times <var:P> ^ <nat:5> + <nat:2> \times <var:P> ^ <nat:4> + <nat:1> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:3> \} $ . This is deduced with the assignment rule from standard Hoare logic . Observing the proceeding statement seen in the list of instructions , we have the variable assignmet code defining $ <var:W> * <var:X> $ to $ <var:W>$ . This statement transfers the precondition $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:7> + <nat:4> \times <var:P> ^ <nat:6> + <nat:4> \times <var:P> ^ <nat:5> + <nat:2> \times <var:P> ^ <nat:4> + <nat:1> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:3> \} $ to the condition $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:8> + <nat:4> \times <var:P> ^ <nat:7> + <nat:4> \times <var:P> ^ <nat:6> + <nat:2> \times <var:P> ^ <nat:5> + <nat:1> \times <var:P> ^ <nat:3> + <nat:1> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + \} $ . Moving forward to the next step , we have the variable update command \verb | <var:W> := <nat:2> + <var:W> * <var:X> | . This redefines $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:8> + <nat:4> \times <var:P> ^ <nat:7> + <nat:4> \times <var:P> ^ <nat:6> + <nat:2> \times <var:P> ^ <nat:5> + <nat:1> \times <var:P> ^ <nat:3> + <nat:1> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + \} $ into the condition $ \{ <var:X> = <var:P> \land <var:W> = <nat:3> \times <var:P> ^ <nat:9> + <nat:4> \times <var:P> ^ <nat:8> + <nat:4> \times <var:P> ^ <nat:7> + <nat:2> \times <var:P> ^ <nat:6> + <nat:1> \times <var:P> ^ <nat:4> + <nat:1> \times <var:P> ^ <nat:3> + <nat:3> \times <var:P> ^ <nat:2> + <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:3> ; <var:W> := <nat:4> + <var:W> * <var:X> ; <var:W> := <nat:4> + <var:W> * <var:X> ; <var:W> := <nat:2> + <var:W> * <var:X> ; <var:W> := <var:W> * <var:X> ; <var:W> := <nat:1> + <var:W> * <var:X> ; <var:W> := <nat:1> + <var:W> * <var:X> ; <var:W> := <nat:3> + <var:W> * <var:X> ; <var:W> := <var:W> * <var:X> ; <var:W> := <nat:2> + <var:W> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:X> = <var:P> }} <def:poly> {{ <var:W> = <nat:3> * <var:P> ^ <nat:9> + <nat:4> * <var:P> ^ <nat:8> + <nat:4> * <var:P> ^ <nat:7> + <nat:2> * <var:P> ^ <nat:6> + <nat:1> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:P> /\ <var:W> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:P> /\ <var:W> = <nat:3> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:P> /\ <var:W> = <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:P> /\ <var:W> = <nat:3> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:P> /\ <var:W> = <nat:3> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:P> /\ <var:W> = <nat:3> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:2> * <var:P> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:P> /\ <var:W> = <nat:3> * <var:P> ^ <nat:6> + <nat:4> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:2> * <var:P> ^ <nat:3> + <nat:1> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:P> /\ <var:W> = <nat:3> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:4> * <var:P> ^ <nat:5> + <nat:2> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:P> /\ <var:W> = <nat:3> * <var:P> ^ <nat:8> + <nat:4> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:2> * <var:P> ^ <nat:5> + <nat:1> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:P> /\ <var:W> = <nat:3> * <var:P> ^ <nat:9> + <nat:4> * <var:P> ^ <nat:8> + <nat:4> * <var:P> ^ <nat:7> + <nat:2> * <var:P> ^ <nat:6> + <nat:1> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 