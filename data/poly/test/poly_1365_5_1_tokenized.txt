\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:k> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:s> := <var:Y1> <var:s> := <var:s> + <var:Y0> \end{verbatim} Assuming --- with some $ <var:M> $ --- it to hold that $ <var:k> = <var:M> $ ahead of the execution of this set of commands , then $ <var:s> = <nat:5> \times <var:M> + <nat:6> $ . \end{theorem} \begin{proof} The method of proof for the series of commands is demonstrated through Hoare techniques . Further , we have \begin{verbatim} { <var:k> = <var:M> } <var:Y1> := <var:k> { <var:k> = <var:M> \land <var:Y1> = <var:M> } { <var:k> = <var:M> \land <var:Y1> = <var:M> } <var:Y0> := <nat:6> { <var:k> = <var:M> \land <var:Y1> = <var:M> \land <var:Y0> = <nat:6> } { <var:k> = <var:M> \land <var:Y1> = <var:M> \land <var:Y0> = <nat:6> } <var:Y1> := <var:Y1> * <nat:5> { <var:k> = <var:M> \land <var:Y1> = <nat:5> \times <var:M> \land <var:Y0> = <nat:6> } \end{verbatim} This is shown to be logically sound using the variable update law defined in Hoare logic . Taking another step toward the subsequent line of code seen in the list of instructions , we see \begin{verbatim} { <var:k> = <var:M> } <var:Y1> := <var:k> { <var:k> = <var:M> \land <var:Y1> = <var:M> } \end{verbatim} Focusing on the subsequent bit of code seen in our series of commands , we see \begin{verbatim} { <var:k> = <var:M> } <var:Y1> := <var:k> { <var:k> = <var:M> \land <var:Y1> = <var:M> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:k> = <var:M> }} <var:Y1> := <var:k> ; <var:Y0> := <nat:6> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:s> := <var:Y1> <var:s> := <var:s> + <var:Y0> {{ <var:s> = <nat:5> * <var:M> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:Y1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:Y1> = <var:M> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:Y1> = <nat:5> * <var:M> /\ <var:Y0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:Y0> = <nat:6> /\ <var:s> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:M> /\ <var:s> = <nat:5> * <var:M> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 