\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} : \begin{verbatim} <var:w1> := <var:h> ; <var:w2> := <var:w1> * <var:h> ; <var:w3> := <var:w2> * <var:h> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:5> ; <var:w2> := <var:w2> * <nat:3> ; <var:w3> := <var:w3> * <nat:1> ; <var:u> := <var:w3> <var:u> := <var:u> + <var:w2> <var:u> := <var:u> + <var:w1> <var:u> := <var:u> + <var:w0> \end{verbatim} Allow that $ <var:h> = <var:m> $ before executing the series of commands , it holds that $ <var:u> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:5> \cdot <var:m> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:m> \} \\ <var:w1> := <var:h> ; \\ \{ <var:h> = <var:m> \land <var:w1> = <var:m> \} \\ <var:w2> := <var:w1> * <var:h> ; \\ \{ <var:h> = <var:m> \land <var:w1> = <var:m> \land <var:w2> = <var:m> ^ <nat:2> \} \\ <var:w3> := <var:w2> * <var:h> ; \\ \{ <var:h> = <var:m> \land <var:w1> = <var:m> \land <var:w2> = <var:m> ^ <nat:2> \land <var:w3> = <var:m> ^ <nat:3> \} \\ <var:w0> := <nat:7> ; \\ \{ <var:h> = <var:m> \land <var:w1> = <var:m> \land <var:w2> = <var:m> ^ <nat:2> \land <var:w3> = <var:m> ^ <nat:3> \land <var:w0> = <nat:7> \} \\ <var:w1> := <var:w1> * <nat:5> ; \\ \{ <var:h> = <var:m> \land <var:w1> = <nat:5> * <var:m> \land <var:w2> = <var:m> ^ <nat:2> \land <var:w3> = <var:m> ^ <nat:3> \land <var:w0> = <nat:7> \} \\ <var:w2> := <var:w2> * <nat:3> ; \\ \{ <var:h> = <var:m> \land <var:w1> = <nat:5> * <var:m> \land <var:w2> = <nat:3> * <var:m> ^ <nat:2> \land <var:w3> = <var:m> ^ <nat:3> \land <var:w0> = <nat:7> \} \\ <var:w3> := <var:w3> * <nat:1> ; \\ \{ <var:h> = <var:m> \land <var:w1> = <nat:5> * <var:m> \land <var:w2> = <nat:3> * <var:m> ^ <nat:2> \land <var:w3> = <nat:1> * <var:m> ^ <nat:3> \land <var:w0> = <nat:7> \} \\ <var:u> := <var:w3> \\ \{ <var:h> = <var:m> \land <var:w1> = <nat:5> * <var:m> \land <var:w2> = <nat:3> * <var:m> ^ <nat:2> \land <var:w0> = <nat:7> \land <var:u> = <nat:1> * <var:m> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:w2> \\ \{ <var:h> = <var:m> \land <var:w1> = <nat:5> * <var:m> \land <var:w0> = <nat:7> \land <var:u> = <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:w1> \\ \{ <var:h> = <var:m> \land <var:w0> = <nat:7> \land <var:u> = <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:5> * <var:m> \} \\ <var:u> := <var:u> + <var:w0> \\ \{ <var:h> = <var:m> \land <var:u> = <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:7> \} \end{eqnarray} Utilizing usual Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:h> = <var:m> }} <var:w1> := <var:h> ; <var:w2> := <var:w1> * <var:h> ; <var:w3> := <var:w2> * <var:h> ; <var:w0> := <nat:7> ; <var:w1> := <var:w1> * <nat:5> ; <var:w2> := <var:w2> * <nat:3> ; <var:w3> := <var:w3> * <nat:1> ; <var:u> := <var:w3> <var:u> := <var:u> + <var:w2> <var:u> := <var:u> + <var:w1> <var:u> := <var:u> + <var:w0> {{ <var:u> = <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:w1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:w1> = <var:m> /\ <var:w2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:w1> = <var:m> /\ <var:w2> = <var:m> ^ <nat:2> /\ <var:w3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:w1> = <var:m> /\ <var:w2> = <var:m> ^ <nat:2> /\ <var:w3> = <var:m> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:w1> = <nat:5> * <var:m> /\ <var:w2> = <var:m> ^ <nat:2> /\ <var:w3> = <var:m> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:w1> = <nat:5> * <var:m> /\ <var:w2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:w3> = <var:m> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:w1> = <nat:5> * <var:m> /\ <var:w2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:w3> = <nat:1> * <var:m> ^ <nat:3> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:w1> = <nat:5> * <var:m> /\ <var:w2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:w0> = <nat:7> /\ <var:u> = <nat:1> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:w1> = <nat:5> * <var:m> /\ <var:w0> = <nat:7> /\ <var:u> = <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:w0> = <nat:7> /\ <var:u> = <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:m> /\ <var:u> = <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:5> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 