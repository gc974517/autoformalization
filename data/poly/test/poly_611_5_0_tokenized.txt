\begin{document} \begin{theorem} Define a series of commands as \begin{verbatim} <var:k0> := <nat:4> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:z> ; <var:W> := <var:k1> ; <var:W> := <var:W> + <var:k0> \end{verbatim} Allow that we have $ <var:z> = <var:g> $ ( given any positive numbers $ <var:g> $ ) ahead of the execution of this program it holds that $ <var:W> = <nat:2> \cdot <var:g> + <nat:4> $ . \end{theorem} \begin{proof} The argument for the set of instructions is done with usual Hoare logic . Advancing to the next step , the statement defining $ <nat:4> $ toward $ <var:k0>$ . This takes the condition $ \{ <var:z> = <var:g> \} $ to the postcondition $ \{ <var:z> = <var:g> \land <var:k0> = <nat:4> \} $ . This is ensured through the assignment rule obtained from standard Hoare reasoning . Moving forward to the following piece of code found in the set of commands , we have the assignment statement giving $ <nat:2> $ to $ <var:k1>$ . This code moves the precondition $ \{ <var:z> = <var:g> \land <var:k0> = <nat:4> \} $ as $ \{ <var:z> = <var:g> \land <var:k0> = <nat:4> \land <var:k1> = <nat:2> \} $ . Moving on to the next step , we see the environment update code \verb | <var:k1> := <var:k1> * <var:z> ; | . This takes $ \{ <var:z> = <var:g> \land <var:k0> = <nat:4> \land <var:k1> = <nat:2> \} $ to the condition $ \{ <var:z> = <var:g> \land <var:k0> = <nat:4> \land <var:k1> = <nat:2> \cdot <var:g> \} $ . Looking at the next piece of code seen in the list of commands , the assignment command \verb | <var:W> := <var:k1> ; | . This takes $ \{ <var:z> = <var:g> \land <var:k0> = <nat:4> \land <var:k1> = <nat:2> \cdot <var:g> \} $ as $ \{ <var:z> = <var:g> \land <var:k0> = <nat:4> \land <var:W> = <nat:2> \cdot <var:g> \} $ . This is shown to be logically sound by the assignment law from Hoare reasoning . Focusing on the proceeding bit of code found in the list of commands , we see the variable binding line letting $ <var:W> + <var:k0$ into $ <var:W>$ . This transfers the precondition $ \{ <var:z> = <var:g> \land <var:k0> = <nat:4> \land <var:W> = <nat:2> \cdot <var:g> \} $ to the postcondition $ \{ <var:z> = <var:g> \land <var:W> = <nat:2> \cdot <var:g> + <nat:4> \} $ . This is guaranteed through the assignment inference rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:z> = <var:g> }} <var:k0> := <nat:4> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:z> ; <var:W> := <var:k1> ; <var:W> := <var:W> + <var:k0> {{ <var:W> = <nat:2> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:k0> = <nat:4> /\ <var:W> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:W> = <nat:2> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 