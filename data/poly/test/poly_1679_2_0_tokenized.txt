\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:B0> := <nat:4> ; <var:r> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> in \emph{Imp} . Given it to be that $ <var:x> = <var:l> $ ahead of executing this set of instructions it holds that we see $ <var:r> = <nat:4> $ once code segment finishes . \end{theorem} \begin{proof} The proof of this program can be accomplished with Hoare logic . Immediately following , we have the assignment code defining $ <nat:4> $ to $ <var:B0>$ . This redefines the condition $ \{ <var:x> = <var:l> \} $ toward the condition $ \{ <var:x> = <var:l> \land <var:B0> = <nat:4> \} $ . This is sound by the assignment law from Hoare reasoning . Keeping momentum , we have the assignment command assigning $ <var:B0$ toward $ <var:r>$ . This command transfers $ \{ <var:x> = <var:l> \land <var:B0> = <nat:4> \} $ into the condition $ \{ <var:x> = <var:l> \land <var:r> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:4> ; <var:r> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:x> = <var:l> }} <def:poly> {{ <var:r> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:l> /\ <var:B0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:l> /\ <var:r> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 