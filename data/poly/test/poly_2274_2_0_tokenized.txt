\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:4> ; <var:J> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Assuming that we have $ <var:a> = <var:G> $ prior to evaluating our list of instructions it must be that we have $ <var:J> = <nat:4> $ once code executes . \end{theorem} \begin{proof} The method of proof for this code segment can be done using typical Hoare techniques . Moving on to the next step found in our list of instructions , we see the variable update code assigning $ <nat:4> $ toward $ <var:y0>$ . This code transfers $ \{ <var:a> = <var:G> \} $ toward $ \{ <var:a> = <var:G> \land <var:y0> = <nat:4> \} $ . Focusing on the upcoming piece of code contained in the segment of code , the environment update code \verb | <var:J> := <var:y0> | . This statement moves $ \{ <var:a> = <var:G> \land <var:y0> = <nat:4> \} $ toward the condition $ \{ <var:a> = <var:G> \land <var:J> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:4> ; <var:J> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:a> = <var:G> }} <def:poly> {{ <var:J> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:G> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:G> /\ <var:J> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 