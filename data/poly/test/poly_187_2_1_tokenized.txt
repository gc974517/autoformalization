\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:4> ; <var:R> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> in \emph{Imp} . Assuming , given $ <var:W> \in \mathbb{N} $ , it to hold that $ <var:L> = <var:W> $ before evaluating our segment of code , then we have $ <var:R> = <nat:4> $ once list of instructions finishes . \end{theorem} \begin{proof} See that the following decorated set of commands . \begin{eqnarray} \{ <var:L> = <var:W> \} \\ <var:q0> := <nat:4> ; \\ \{ <var:L> = <var:W> \land <var:q0> = <nat:4> \} \\ <var:R> := <var:q0> \\ \{ <var:L> = <var:W> \land <var:R> = <nat:4> \} \end{eqnarray} The application of usual Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:4> ; <var:R> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:L> = <var:W> }} <def:poly> {{ <var:R> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:W> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:W> /\ <var:R> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 