\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:P> := <nat:2> ; <var:P> := <nat:4> + <var:P> * <var:G> ; <var:P> := <nat:2> + <var:P> * <var:G> ; <var:P> := <nat:3> + <var:P> * <var:G> ; <var:P> := <nat:1> + <var:P> * <var:G> ; <var:P> := <nat:4> + <var:P> * <var:G> ; <var:P> := <nat:1> + <var:P> * <var:G> ; <var:P> := <nat:4> + <var:P> * <var:G> ; <var:P> := <nat:1> + <var:P> * <var:G> ; <var:P> := <nat:2> + <var:P> * <var:G> ; <var:P> := <nat:4> + <var:P> * <var:G> ; <var:P> := <nat:3> + <var:P> * <var:G> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> . Assuming ( for all natural coefficients $ <var:A> $ ) $ <var:G> = <var:A> $ ahead of evaluating this code , it follows that we see $ <var:P> = <nat:2> \cdot <var:A> ^ <nat:11> + <nat:4> \cdot <var:A> ^ <nat:10> + <nat:2> \cdot <var:A> ^ <nat:9> + <nat:3> \cdot <var:A> ^ <nat:8> + <nat:1> \cdot <var:A> ^ <nat:7> + <nat:4> \cdot <var:A> ^ <nat:6> + <nat:1> \cdot <var:A> ^ <nat:5> + <nat:4> \cdot <var:A> ^ <nat:4> + <nat:1> \cdot <var:A> ^ <nat:3> + <nat:2> \cdot <var:A> ^ <nat:2> + <nat:4> \cdot <var:A> + <nat:3> $ once series of commands has exited . \end{theorem} \begin{proof} The proof of this code can be seen using usual Hoare logic . Now , \begin{verbatim} { <var:G> = <var:A> } <var:P> := <nat:2> { <var:G> = <var:A> \land <var:P> = <nat:2> } \end{verbatim} Taking a look at the following pieces of code seen in the set of instructions , \begin{verbatim} { <var:G> = <var:A> } <var:P> := <nat:2> { <var:G> = <var:A> \land <var:P> = <nat:2> } { <var:G> = <var:A> \land <var:P> = <nat:2> } <var:P> := <nat:4> + <var:P> * <var:G> { <var:G> = <var:A> \land <var:P> = <nat:2> * <var:A> + <nat:4> } \end{verbatim} This is shown by the assignment law from Hoare reasoning . Paying attention to the subsequent lines of codecontained in our list of commands , we have \begin{verbatim} { <var:G> = <var:A> } <var:P> := <nat:2> { <var:G> = <var:A> \land <var:P> = <nat:2> } { <var:G> = <var:A> \land <var:P> = <nat:2> } <var:P> := <nat:4> + <var:P> * <var:G> { <var:G> = <var:A> \land <var:P> = <nat:2> * <var:A> + <nat:4> } \end{verbatim} Advancing to the next step , we have \begin{verbatim} { <var:G> = <var:A> } <var:P> := <nat:2> { <var:G> = <var:A> \land <var:P> = <nat:2> } { <var:G> = <var:A> \land <var:P> = <nat:2> } <var:P> := <nat:4> + <var:P> * <var:G> { <var:G> = <var:A> \land <var:P> = <nat:2> * <var:A> + <nat:4> } { <var:G> = <var:A> \land <var:P> = <nat:2> * <var:A> + <nat:4> } <var:P> := <nat:2> + <var:P> * <var:G> { <var:G> = <var:A> \land <var:P> = <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:2> } { <var:G> = <var:A> \land <var:P> = <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:2> } <var:P> := <nat:3> + <var:P> * <var:G> { <var:G> = <var:A> \land <var:P> = <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:3> } { <var:G> = <var:A> \land <var:P> = <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:3> } <var:P> := <nat:1> + <var:P> * <var:G> { <var:G> = <var:A> \land <var:P> = <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:1> } { <var:G> = <var:A> \land <var:P> = <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:1> } <var:P> := <nat:4> + <var:P> * <var:G> { <var:G> = <var:A> \land <var:P> = <nat:2> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:4> } { <var:G> = <var:A> \land <var:P> = <nat:2> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:4> } <var:P> := <nat:1> + <var:P> * <var:G> { <var:G> = <var:A> \land <var:P> = <nat:2> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> } \end{verbatim} This is shown to be logically sound by the environment update rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:2> ; <var:P> := <nat:4> + <var:P> * <var:G> ; <var:P> := <nat:2> + <var:P> * <var:G> ; <var:P> := <nat:3> + <var:P> * <var:G> ; <var:P> := <nat:1> + <var:P> * <var:G> ; <var:P> := <nat:4> + <var:P> * <var:G> ; <var:P> := <nat:1> + <var:P> * <var:G> ; <var:P> := <nat:4> + <var:P> * <var:G> ; <var:P> := <nat:1> + <var:P> * <var:G> ; <var:P> := <nat:2> + <var:P> * <var:G> ; <var:P> := <nat:4> + <var:P> * <var:G> ; <var:P> := <nat:3> + <var:P> * <var:G> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:G> = <var:A> }} <def:poly> {{ <var:P> = <nat:2> * <var:A> ^ <nat:11> + <nat:4> * <var:A> ^ <nat:10> + <nat:2> * <var:A> ^ <nat:9> + <nat:3> * <var:A> ^ <nat:8> + <nat:1> * <var:A> ^ <nat:7> + <nat:4> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:A> /\ <var:P> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:A> /\ <var:P> = <nat:2> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:A> /\ <var:P> = <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:A> /\ <var:P> = <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:A> /\ <var:P> = <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:A> /\ <var:P> = <nat:2> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:A> /\ <var:P> = <nat:2> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:A> /\ <var:P> = <nat:2> * <var:A> ^ <nat:7> + <nat:4> * <var:A> ^ <nat:6> + <nat:2> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:A> /\ <var:P> = <nat:2> * <var:A> ^ <nat:8> + <nat:4> * <var:A> ^ <nat:7> + <nat:2> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:A> /\ <var:P> = <nat:2> * <var:A> ^ <nat:9> + <nat:4> * <var:A> ^ <nat:8> + <nat:2> * <var:A> ^ <nat:7> + <nat:3> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:A> /\ <var:P> = <nat:2> * <var:A> ^ <nat:10> + <nat:4> * <var:A> ^ <nat:9> + <nat:2> * <var:A> ^ <nat:8> + <nat:3> * <var:A> ^ <nat:7> + <nat:1> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:A> /\ <var:P> = <nat:2> * <var:A> ^ <nat:11> + <nat:4> * <var:A> ^ <nat:10> + <nat:2> * <var:A> ^ <nat:9> + <nat:3> * <var:A> ^ <nat:8> + <nat:1> * <var:A> ^ <nat:7> + <nat:4> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 