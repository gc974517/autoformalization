\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:3> ; <var:W1> := <nat:6> ; <var:W1> := <var:W1> * <var:A> ; <var:w> := <var:W1> ; <var:w> := <var:w> + <var:W0> \end{verbatim} Given it to be that $ <var:A> = <var:c> $ for positive numbers $ <var:c> $ ahead of running this segment of code it must be that we have $ <var:w> = <nat:6> * <var:c> + <nat:3> $ once segment of code exits . \end{theorem} \begin{proof} Observe that the following decorated set of instructions . \begin{eqnarray} \{ <var:A> = <var:c> \} \\ <var:W0> := <nat:3> ; \\ \{ <var:A> = <var:c> \land <var:W0> = <nat:3> \} \\ <var:W1> := <nat:6> ; \\ \{ <var:A> = <var:c> \land <var:W0> = <nat:3> \land <var:W1> = <nat:6> \} \\ <var:W1> := <var:W1> * <var:A> ; \\ \{ <var:A> = <var:c> \land <var:W0> = <nat:3> \land <var:W1> = <nat:6> \times <var:c> \} \\ <var:w> := <var:W1> ; \\ \{ <var:A> = <var:c> \land <var:W0> = <nat:3> \land <var:w> = <nat:6> \times <var:c> \} \\ <var:w> := <var:w> + <var:W0> \\ \{ <var:A> = <var:c> \land <var:w> = <nat:6> \times <var:c> + <nat:3> \} \end{eqnarray} Applying Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:A> = <var:c> }} <var:W0> := <nat:3> ; <var:W1> := <nat:6> ; <var:W1> := <var:W1> * <var:A> ; <var:w> := <var:W1> ; <var:w> := <var:w> + <var:W0> {{ <var:w> = <nat:6> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:W0> = <nat:3> /\ <var:W1> = <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:W0> = <nat:3> /\ <var:w> = <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:c> /\ <var:w> = <nat:6> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 