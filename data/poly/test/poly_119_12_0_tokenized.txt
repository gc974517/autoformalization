\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:5> ; <var:h2> := <nat:8> ; <var:h2> := <var:h2> * <var:r> ; <var:h2> := <var:h2> * <var:r> ; <var:h4> := <nat:4> ; <var:h4> := <var:h4> * <var:r> ; <var:h4> := <var:h4> * <var:r> ; <var:h4> := <var:h4> * <var:r> ; <var:h4> := <var:h4> * <var:r> ; <var:R> := <var:h4> ; <var:R> := <var:R> + <var:h2> ; <var:R> := <var:R> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:r> = <var:f> $ , for some natural numbers $ <var:f> $ , before executing this set of instructions , it follows that $ <var:R> = <nat:4> \cdot <var:f> ^ <nat:4> + <nat:8> \cdot <var:f> ^ <nat:2> + <nat:5> $ once set of instructions terminates . \end{theorem} \begin{proof} The argument for the code can be demonstrated with Hoare reasoning . Taking a look at the subsequent commands contained in our segment of code , \begin{eqnarray} \{ <var:r> = <var:f> \} \, <var:h0> := <nat:5> \, \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \} \\ \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \} \, <var:h2> := <nat:8> \, \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> \} \\ \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> \} \, <var:h2> := <var:h2> * <var:r> \, \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> * <var:f> \} \\ \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> * <var:f> \} \, <var:h2> := <var:h2> * <var:r> \, \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> * <var:f> ^ <nat:2> \} \end{eqnarray} This is deduced using the variable binding scheme of Hoare logic . Stepping forward , we have \begin{eqnarray} \{ <var:r> = <var:f> \} \, <var:h0> := <nat:5> \, \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \} \\ \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \} \, <var:h2> := <nat:8> \, \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> \} \\ \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> \} \, <var:h2> := <var:h2> * <var:r> \, \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> * <var:f> \} \\ \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> * <var:f> \} \, <var:h2> := <var:h2> * <var:r> \, \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> * <var:f> ^ <nat:2> \} \\ \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> * <var:f> ^ <nat:2> \} \, <var:h4> := <nat:4> \, \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> * <var:f> ^ <nat:2> \land <var:h4> = <nat:4> \} \\ \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> * <var:f> ^ <nat:2> \land <var:h4> = <nat:4> \} \, <var:h4> := <var:h4> * <var:r> \, \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \land <var:h2> = <nat:8> * <var:f> ^ <nat:2> \land <var:h4> = <nat:4> * <var:f> \} \end{eqnarray} Now , we see \begin{eqnarray} \{ <var:r> = <var:f> \} \, <var:h0> := <nat:5> \, \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \} \end{eqnarray} Following , we have \begin{eqnarray} \{ <var:r> = <var:f> \} \, <var:h0> := <nat:5> \, \{ <var:r> = <var:f> \land <var:h0> = <nat:5> \} \end{eqnarray} This is ensured through the binding law defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h4> : string := " <var:h4> " . Definition <def:poly> := <var:h0> := <nat:5> ; <var:h2> := <nat:8> ; <var:h2> := <var:h2> * <var:r> ; <var:h2> := <var:h2> * <var:r> ; <var:h4> := <nat:4> ; <var:h4> := <var:h4> * <var:r> ; <var:h4> := <var:h4> * <var:r> ; <var:h4> := <var:h4> * <var:r> ; <var:h4> := <var:h4> * <var:r> ; <var:R> := <var:h4> ; <var:R> := <var:R> + <var:h2> ; <var:R> := <var:R> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:r> = <var:f> }} <def:poly> {{ <var:R> = <nat:4> * <var:f> ^ <nat:4> + <nat:8> * <var:f> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:h0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:h0> = <nat:5> /\ <var:h2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:h0> = <nat:5> /\ <var:h2> = <nat:8> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:h0> = <nat:5> /\ <var:h2> = <nat:8> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:h0> = <nat:5> /\ <var:h2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:h4> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:h0> = <nat:5> /\ <var:h2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:h4> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:h0> = <nat:5> /\ <var:h2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:h4> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:h0> = <nat:5> /\ <var:h2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:h4> = <nat:4> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:h0> = <nat:5> /\ <var:h2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:h4> = <nat:4> * <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:h0> = <nat:5> /\ <var:h2> = <nat:8> * <var:f> ^ <nat:2> /\ <var:R> = <nat:4> * <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:h0> = <nat:5> /\ <var:R> = <nat:4> * <var:f> ^ <nat:4> + <nat:8> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:R> = <nat:4> * <var:f> ^ <nat:4> + <nat:8> * <var:f> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 