\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:7> ; <var:G1> := <nat:9> ; <var:G1> := <var:G1> * <var:x> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:x> ; <var:G2> := <var:G2> * <var:x> ; <var:H> := <var:G2> ; <var:H> := <var:H> + <var:G1> ; <var:H> := <var:H> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:x> = <var:Q> $ before the evaluation of this series of instructions , it holds that $ <var:H> = <nat:3> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:7> $ after series of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:Q> \} \\ <var:G0> := <nat:7> ; \\ \{ <var:x> = <var:Q> \land <var:G0> = <nat:7> \} \\ <var:G1> := <nat:9> ; \\ \{ <var:x> = <var:Q> \land <var:G0> = <nat:7> \land <var:G1> = <nat:9> \} \\ <var:G1> := <var:G1> * <var:x> ; \\ \{ <var:x> = <var:Q> \land <var:G0> = <nat:7> \land <var:G1> = <nat:9> \cdot <var:Q> \} \\ <var:G2> := <nat:3> ; \\ \{ <var:x> = <var:Q> \land <var:G0> = <nat:7> \land <var:G1> = <nat:9> \cdot <var:Q> \land <var:G2> = <nat:3> \} \\ <var:G2> := <var:G2> * <var:x> ; \\ \{ <var:x> = <var:Q> \land <var:G0> = <nat:7> \land <var:G1> = <nat:9> \cdot <var:Q> \land <var:G2> = <nat:3> \cdot <var:Q> \} \\ <var:G2> := <var:G2> * <var:x> ; \\ \{ <var:x> = <var:Q> \land <var:G0> = <nat:7> \land <var:G1> = <nat:9> \cdot <var:Q> \land <var:G2> = <nat:3> \cdot <var:Q> ^ <nat:2> \} \\ <var:H> := <var:G2> ; \\ \{ <var:x> = <var:Q> \land <var:G0> = <nat:7> \land <var:G1> = <nat:9> \cdot <var:Q> \land <var:H> = <nat:3> \cdot <var:Q> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:G1> ; \\ \{ <var:x> = <var:Q> \land <var:G0> = <nat:7> \land <var:H> = <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:9> \cdot <var:Q> \} \\ <var:H> := <var:H> + <var:G0> \\ \{ <var:x> = <var:Q> \land <var:H> = <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:9> \cdot <var:Q> + <nat:7> \} \end{eqnarray} Using usual Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <def:poly> := <var:G0> := <nat:7> ; <var:G1> := <nat:9> ; <var:G1> := <var:G1> * <var:x> ; <var:G2> := <nat:3> ; <var:G2> := <var:G2> * <var:x> ; <var:G2> := <var:G2> * <var:x> ; <var:H> := <var:G2> ; <var:H> := <var:H> + <var:G1> ; <var:H> := <var:H> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:x> = <var:Q> }} <def:poly> {{ <var:H> = <nat:3> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:9> * <var:Q> /\ <var:G2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:9> * <var:Q> /\ <var:G2> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:9> * <var:Q> /\ <var:G2> = <nat:3> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:9> * <var:Q> /\ <var:H> = <nat:3> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:G0> = <nat:7> /\ <var:H> = <nat:3> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Q> /\ <var:H> = <nat:3> * <var:Q> ^ <nat:2> + <nat:9> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 