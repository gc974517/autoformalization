\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:4> ; <var:y2> := <nat:3> ; <var:y2> := <var:y2> * <var:P> ; <var:y2> := <var:y2> * <var:P> ; <var:y6> := <nat:4> ; <var:y6> := <var:y6> * <var:P> ; <var:y6> := <var:y6> * <var:P> ; <var:y6> := <var:y6> * <var:P> ; <var:y6> := <var:y6> * <var:P> ; <var:y6> := <var:y6> * <var:P> ; <var:y6> := <var:y6> * <var:P> ; <var:B> := <var:y6> ; <var:B> := <var:B> + <var:y2> ; <var:B> := <var:B> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Allowing $ <var:P> = <var:b> $ prior to running this code segment , it must be that we see $ <var:B> = <nat:4> \cdot <var:b> ^ <nat:6> + <nat:3> \cdot <var:b> ^ <nat:2> + <nat:4> $ once segment of code is done . \end{theorem} \begin{proof} Using typical Hoare techniques yields : \begin{eqnarray} \{ <var:P> = <var:b> \} \\ <var:y0> := <nat:4> ; \\ \{ <var:P> = <var:b> \land <var:y0> = <nat:4> \} \\ <var:y2> := <nat:3> ; \\ \{ <var:P> = <var:b> \land <var:y0> = <nat:4> \land <var:y2> = <nat:3> \} \\ <var:y2> := <var:y2> * <var:P> ; \\ \{ <var:P> = <var:b> \land <var:y0> = <nat:4> \land <var:y2> = <nat:3> \cdot <var:b> \} \\ <var:y2> := <var:y2> * <var:P> ; \\ \{ <var:P> = <var:b> \land <var:y0> = <nat:4> \land <var:y2> = <nat:3> \cdot <var:b> ^ <nat:2> \} \end{eqnarray} Allowing evaluating the code produces : \begin{eqnarray} <var:y6> := <nat:4> ; \\ \{ <var:P> = <var:b> \land <var:y0> = <nat:4> \land <var:y2> = <nat:3> \cdot <var:b> ^ <nat:2> \land <var:y6> = <nat:4> \} \\ <var:y6> := <var:y6> * <var:P> ; \\ \{ <var:P> = <var:b> \land <var:y0> = <nat:4> \land <var:y2> = <nat:3> \cdot <var:b> ^ <nat:2> \land <var:y6> = <nat:4> \cdot <var:b> \} \\ <var:y6> := <var:y6> * <var:P> ; \\ \{ <var:P> = <var:b> \land <var:y0> = <nat:4> \land <var:y2> = <nat:3> \cdot <var:b> ^ <nat:2> \land <var:y6> = <nat:4> \cdot <var:b> ^ <nat:2> \} \\ <var:y6> := <var:y6> * <var:P> ; \\ \{ <var:P> = <var:b> \land <var:y0> = <nat:4> \land <var:y2> = <nat:3> \cdot <var:b> ^ <nat:2> \land <var:y6> = <nat:4> \cdot <var:b> ^ <nat:3> \} \\ <var:y6> := <var:y6> * <var:P> ; \\ \{ <var:P> = <var:b> \land <var:y0> = <nat:4> \land <var:y2> = <nat:3> \cdot <var:b> ^ <nat:2> \land <var:y6> = <nat:4> \cdot <var:b> ^ <nat:4> \} \\ <var:y6> := <var:y6> * <var:P> ; \\ \{ <var:P> = <var:b> \land <var:y0> = <nat:4> \land <var:y2> = <nat:3> \cdot <var:b> ^ <nat:2> \land <var:y6> = <nat:4> \cdot <var:b> ^ <nat:5> \} \\ <var:y6> := <var:y6> * <var:P> ; \\ \{ <var:P> = <var:b> \land <var:y0> = <nat:4> \land <var:y2> = <nat:3> \cdot <var:b> ^ <nat:2> \land <var:y6> = <nat:4> \cdot <var:b> ^ <nat:6> \} \\ <var:B> := <var:y6> ; \\ \{ <var:P> = <var:b> \land <var:y0> = <nat:4> \land <var:y2> = <nat:3> \cdot <var:b> ^ <nat:2> \land <var:B> = <nat:4> \cdot <var:b> ^ <nat:6> \} \\ <var:B> := <var:B> + <var:y2> ; \\ \{ <var:P> = <var:b> \land <var:y0> = <nat:4> \land <var:B> = <nat:4> \cdot <var:b> ^ <nat:6> + <nat:3> \cdot <var:b> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:y0> \\ \{ <var:P> = <var:b> \land <var:B> = <nat:4> \cdot <var:b> ^ <nat:6> + <nat:3> \cdot <var:b> ^ <nat:2> + <nat:4> \} \end{eqnarray} As a result , the code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y6> : string := " <var:y6> " . Definition <def:poly> := <var:y0> := <nat:4> ; <var:y2> := <nat:3> ; <var:y2> := <var:y2> * <var:P> ; <var:y2> := <var:y2> * <var:P> ; <var:y6> := <nat:4> ; <var:y6> := <var:y6> * <var:P> ; <var:y6> := <var:y6> * <var:P> ; <var:y6> := <var:y6> * <var:P> ; <var:y6> := <var:y6> * <var:P> ; <var:y6> := <var:y6> * <var:P> ; <var:y6> := <var:y6> * <var:P> ; <var:B> := <var:y6> ; <var:B> := <var:B> + <var:y2> ; <var:B> := <var:B> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:P> = <var:b> }} <def:poly> {{ <var:B> = <nat:4> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:3> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:y6> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:y6> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:y6> = <nat:4> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:y6> = <nat:4> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:y6> = <nat:4> * <var:b> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:y6> = <nat:4> * <var:b> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:y6> = <nat:4> * <var:b> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:B> = <nat:4> * <var:b> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:y0> = <nat:4> /\ <var:B> = <nat:4> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:b> /\ <var:B> = <nat:4> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 