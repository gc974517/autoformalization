\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n1> := <var:k> ; <var:n2> := <var:n1> * <var:k> ; <var:n0> := <nat:3> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:3> ; <var:w> := <var:n2> <var:w> := <var:w> + <var:n1> <var:w> := <var:w> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:k> = <var:q> $ --- for all positive coefficients $ <var:q> $ --- ahead of the evaluation of the code segment then we see $ <var:w> = <nat:3> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> + <nat:3> $ once segment of code has exited . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions is shown using typical Hoare techniques . Keeping momentum , we see the binding line assigning $ <var:k> $ toward $ <var:n1>$ . This statement transfers $ \{ <var:k> = <var:q> \} $ toward the condition $ \{ <var:k> = <var:q> \land <var:n1> = <var:q> \} $ . This is known to be sound using the assignment rule obtained from standard Hoare reasoning . Honing in on the following bit of code seen in the series of commands , we see the variable assignmet code \verb | <var:n2> := <var:n1> * <var:k> ; | . This advances $ \{ <var:k> = <var:q> \land <var:n1> = <var:q> \} $ toward the condition $ \{ <var:k> = <var:q> \land <var:n1> = <var:q> \land <var:n2> = <var:q> ^ <nat:2> \} $ . Now , we have the binding statement \verb | <var:n0> := <nat:3> ; | . This statement transfers $ \{ <var:k> = <var:q> \land <var:n1> = <var:q> \land <var:n2> = <var:q> ^ <nat:2> \} $ as $ \{ <var:k> = <var:q> \land <var:n1> = <var:q> \land <var:n2> = <var:q> ^ <nat:2> \land <var:n0> = <nat:3> \} $ . Moving on to the next step , we have the assignment line \verb | <var:n1> := <var:n1> * <nat:2> ; | . This code takes $ \{ <var:k> = <var:q> \land <var:n1> = <var:q> \land <var:n2> = <var:q> ^ <nat:2> \land <var:n0> = <nat:3> \} $ to $ \{ <var:k> = <var:q> \land <var:n1> = <nat:2> * <var:q> \land <var:n2> = <var:q> ^ <nat:2> \land <var:n0> = <nat:3> \} $ . Taking a look at the next command seen in the set of instructions , we see the assignment line \verb | <var:n2> := <var:n2> * <nat:3> ; | . This line transfers the condition $ \{ <var:k> = <var:q> \land <var:n1> = <nat:2> * <var:q> \land <var:n2> = <var:q> ^ <nat:2> \land <var:n0> = <nat:3> \} $ toward the condition $ \{ <var:k> = <var:q> \land <var:n1> = <nat:2> * <var:q> \land <var:n2> = <nat:3> * <var:q> ^ <nat:2> \land <var:n0> = <nat:3> \} $ . Moving on to the subsequent piece of code seen in our code , we have the environment update code \verb | <var:w> := <var:n2> | . This takes $ \{ <var:k> = <var:q> \land <var:n1> = <nat:2> * <var:q> \land <var:n2> = <nat:3> * <var:q> ^ <nat:2> \land <var:n0> = <nat:3> \} $ toward $ \{ <var:k> = <var:q> \land <var:n1> = <nat:2> * <var:q> \land <var:n0> = <nat:3> \land <var:w> = <nat:3> * <var:q> ^ <nat:2> \} $ . This is guaranteed with the assignment rule obtained from Hoare techniques . Shifting focus toward the following step contained in the list of commands , we have the statement letting $ <var:w> + <var:n1$ into $ <var:w>$ . This command redefines the condition $ \{ <var:k> = <var:q> \land <var:n1> = <nat:2> * <var:q> \land <var:n0> = <nat:3> \land <var:w> = <nat:3> * <var:q> ^ <nat:2> \} $ toward the postcondition $ \{ <var:k> = <var:q> \land <var:n0> = <nat:3> \land <var:w> = <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> \} $ . Moving forward to the upcoming line in our list of commands , we see the variable assignmet line \verb | <var:w> := <var:w> + <var:n0> | . This forwards $ \{ <var:k> = <var:q> \land <var:n0> = <nat:3> \land <var:w> = <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> \} $ as the condition $ \{ <var:k> = <var:q> \land <var:w> = <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:3> \} $ . This is given using the assignment law defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n1> := <var:k> ; <var:n2> := <var:n1> * <var:k> ; <var:n0> := <nat:3> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:3> ; <var:w> := <var:n2> <var:w> := <var:w> + <var:n1> <var:w> := <var:w> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:k> = <var:q> }} <def:poly> {{ <var:w> = <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:n1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:n1> = <var:q> /\ <var:n2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:n1> = <var:q> /\ <var:n2> = <var:q> ^ <nat:2> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:n1> = <nat:2> * <var:q> /\ <var:n2> = <var:q> ^ <nat:2> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:n1> = <nat:2> * <var:q> /\ <var:n2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:n1> = <nat:2> * <var:q> /\ <var:n0> = <nat:3> /\ <var:w> = <nat:3> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:n0> = <nat:3> /\ <var:w> = <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:w> = <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 