\begin{document} \begin{theorem} Consider the following code in \emph{Imp} as follows \begin{verbatim} <var:F> := <nat:1> ; <var:F> := <var:F> * <var:r> ; <var:F> := <nat:1> + <var:F> * <var:r> ; <var:F> := <nat:1> + <var:F> * <var:r> ; <var:F> := <nat:1> + <var:F> * <var:r> ; <var:F> := <nat:4> + <var:F> * <var:r> ; <var:F> := <nat:1> + <var:F> * <var:r> ; <var:F> := <nat:2> + <var:F> * <var:r> ; <var:F> := <var:F> * <var:r> ; <var:F> := <nat:4> + <var:F> * <var:r> \end{verbatim} Assume it to be that $ <var:r> = <var:u> $ ( given every positive numbers $ <var:u> $ ) prior to the execution of the list of commands then we have $ <var:F> = <nat:1> \times <var:u> ^ <nat:9> + <nat:1> \times <var:u> ^ <nat:7> + <nat:1> \times <var:u> ^ <nat:6> + <nat:1> \times <var:u> ^ <nat:5> + <nat:4> \times <var:u> ^ <nat:4> + <nat:1> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> + <nat:4> $ once list of commands terminates . \end{theorem} \begin{proof} The method of proof for this set of commands is evident through Hoare logic . Next , we see the binding line \verb | <var:F> := <nat:1> ; | . This code redefines $ \{ <var:r> = <var:u> \} $ toward $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \} $ . This is guaranteed with the assignment law found in standard Hoare techniques . Taking a look at the next line contained in our code segment , the binding statement letting $ <var:F> * <var:r> $ as $ <var:F>$ . This transfers $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \} $ toward the condition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> + \} $ . This is known to be sound through the assignment rule given in typical Hoare logic . Looking at the subsequent step in our code segment , we see the assignment line \verb | <var:F> := <nat:1> + <var:F> * <var:r> ; | . This redefines the precondition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> + \} $ to $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:2> + <nat:1> \} $ . This is known to be sound with the assignment scheme given by typical Hoare logic . Looking at the proceeding step found in the list of commands , the assignment code \verb | <var:F> := <nat:1> + <var:F> * <var:r> ; | . This command forwards the precondition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:2> + <nat:1> \} $ into the condition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> + <nat:1> \} $ . This is guaranteed using the assignment inference rule given by usual Hoare reasoning . Further , we have the line assigning $ <nat:1> + <var:F> * <var:r> $ as $ <var:F>$ . This line transfers the precondition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> + <nat:1> \} $ as $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:4> + <nat:1> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> + <nat:1> \} $ . This is rigorously given by the assignment rule defined in usual Hoare techniques . Considering the following statement found in the series of instructions , we see the variable update command yielding $ <nat:4> + <var:F> * <var:r> $ toward $ <var:F>$ . This statement forwards the precondition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:4> + <nat:1> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> + <nat:1> \} $ as the condition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:5> + <nat:1> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> + <nat:4> \} $ . Going forward , we see the variable update statement giving $ <nat:1> + <var:F> * <var:r> $ toward $ <var:F>$ . This line moves the condition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:5> + <nat:1> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> + <nat:4> \} $ into the condition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:6> + <nat:1> \times <var:u> ^ <nat:4> + <nat:1> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> ^ <nat:2> + <nat:4> \times <var:u> + <nat:1> \} $ . After , we have the statement \verb | <var:F> := <nat:2> + <var:F> * <var:r> ; | . This command forwards the precondition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:6> + <nat:1> \times <var:u> ^ <nat:4> + <nat:1> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> ^ <nat:2> + <nat:4> \times <var:u> + <nat:1> \} $ to $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:7> + <nat:1> \times <var:u> ^ <nat:5> + <nat:1> \times <var:u> ^ <nat:4> + <nat:1> \times <var:u> ^ <nat:3> + <nat:4> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> + <nat:2> \} $ . This is shown to be logically sound using the assignment scheme of usual Hoare reasoning . Considering the subsequent piece of code seen in our series of commands , we see the environment update code giving $ <var:F> * <var:r> $ into $ <var:F>$ . This code forwards the precondition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:7> + <nat:1> \times <var:u> ^ <nat:5> + <nat:1> \times <var:u> ^ <nat:4> + <nat:1> \times <var:u> ^ <nat:3> + <nat:4> \times <var:u> ^ <nat:2> + <nat:1> \times <var:u> + <nat:2> \} $ into the condition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:8> + <nat:1> \times <var:u> ^ <nat:6> + <nat:1> \times <var:u> ^ <nat:5> + <nat:1> \times <var:u> ^ <nat:4> + <nat:4> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + \} $ . This is known to be sound using the assignment scheme found in typical Hoare techniques . After , we see the binding line defining $ <nat:4> + <var:F> * <var:r$ into $ <var:F>$ . This command forwards the condition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:8> + <nat:1> \times <var:u> ^ <nat:6> + <nat:1> \times <var:u> ^ <nat:5> + <nat:1> \times <var:u> ^ <nat:4> + <nat:4> \times <var:u> ^ <nat:3> + <nat:1> \times <var:u> ^ <nat:2> + <nat:2> \times <var:u> + \} $ toward the postcondition $ \{ <var:r> = <var:u> \land <var:F> = <nat:1> \times <var:u> ^ <nat:9> + <nat:1> \times <var:u> ^ <nat:7> + <nat:1> \times <var:u> ^ <nat:6> + <nat:1> \times <var:u> ^ <nat:5> + <nat:4> \times <var:u> ^ <nat:4> + <nat:1> \times <var:u> ^ <nat:3> + <nat:2> \times <var:u> ^ <nat:2> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:r> = <var:u> }} <var:F> := <nat:1> ; <var:F> := <var:F> * <var:r> ; <var:F> := <nat:1> + <var:F> * <var:r> ; <var:F> := <nat:1> + <var:F> * <var:r> ; <var:F> := <nat:1> + <var:F> * <var:r> ; <var:F> := <nat:4> + <var:F> * <var:r> ; <var:F> := <nat:1> + <var:F> * <var:r> ; <var:F> := <nat:2> + <var:F> * <var:r> ; <var:F> := <var:F> * <var:r> ; <var:F> := <nat:4> + <var:F> * <var:r> {{ <var:F> = <nat:1> * <var:u> ^ <nat:9> + <nat:1> * <var:u> ^ <nat:7> + <nat:1> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:F> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:F> = <nat:1> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:F> = <nat:1> * <var:u> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:F> = <nat:1> * <var:u> ^ <nat:3> + <nat:1> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:F> = <nat:1> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:F> = <nat:1> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:F> = <nat:1> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:F> = <nat:1> * <var:u> ^ <nat:7> + <nat:1> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:F> = <nat:1> * <var:u> ^ <nat:8> + <nat:1> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:1> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:F> = <nat:1> * <var:u> ^ <nat:9> + <nat:1> * <var:u> ^ <nat:7> + <nat:1> * <var:u> ^ <nat:6> + <nat:1> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 