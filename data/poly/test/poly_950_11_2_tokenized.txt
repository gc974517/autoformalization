\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} as \begin{verbatim} <var:z> := <nat:3> ; <var:z> := <nat:1> + <var:z> * <var:M> ; <var:z> := <var:z> * <var:M> ; <var:z> := <nat:2> + <var:z> * <var:M> ; <var:z> := <nat:2> + <var:z> * <var:M> ; <var:z> := <nat:2> + <var:z> * <var:M> ; <var:z> := <var:z> * <var:M> ; <var:z> := <nat:4> + <var:z> * <var:M> ; <var:z> := <nat:4> + <var:z> * <var:M> ; <var:z> := <nat:1> + <var:z> * <var:M> ; <var:z> := <nat:2> + <var:z> * <var:M> \end{verbatim} Allowing that we have $ <var:M> = <var:W> $ , given some $ <var:W> $ , prior to evaluating the set of instructions , it must be that we see $ <var:z> = <nat:3> * <var:W> ^ <nat:10> + <nat:1> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> $ . \end{theorem} \begin{proof} Observe that the below decorated list of commands . \begin{eqnarray} \{ <var:M> = <var:W> \} \\ <var:z> := <nat:3> ; \\ \{ <var:M> = <var:W> \land <var:z> = <nat:3> \} \\ <var:z> := <nat:1> + <var:z> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:z> = <nat:3> * <var:W> + <nat:1> \} \\ <var:z> := <var:z> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:z> = <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + \} \\ <var:z> := <nat:2> + <var:z> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:z> = <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:2> \} \\ <var:z> := <nat:2> + <var:z> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:z> = <nat:3> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:2> * <var:W> + <nat:2> \} \\ <var:z> := <nat:2> + <var:z> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:z> = <nat:3> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:2> \} \\ <var:z> := <var:z> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:z> = <nat:3> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + \} \\ <var:z> := <nat:4> + <var:z> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:z> = <nat:3> * <var:W> ^ <nat:7> + <nat:1> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:4> \} \\ <var:z> := <nat:4> + <var:z> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:z> = <nat:3> * <var:W> ^ <nat:8> + <nat:1> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:4> * <var:W> + <nat:4> \} \\ <var:z> := <nat:1> + <var:z> * <var:M> ; \\ \{ <var:M> = <var:W> \land <var:z> = <nat:3> * <var:W> ^ <nat:9> + <nat:1> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:1> \} \\ <var:z> := <nat:2> + <var:z> * <var:M> \\ \{ <var:M> = <var:W> \land <var:z> = <nat:3> * <var:W> ^ <nat:10> + <nat:1> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:M> = <var:W> }} <var:z> := <nat:3> ; <var:z> := <nat:1> + <var:z> * <var:M> ; <var:z> := <var:z> * <var:M> ; <var:z> := <nat:2> + <var:z> * <var:M> ; <var:z> := <nat:2> + <var:z> * <var:M> ; <var:z> := <nat:2> + <var:z> * <var:M> ; <var:z> := <var:z> * <var:M> ; <var:z> := <nat:4> + <var:z> * <var:M> ; <var:z> := <nat:4> + <var:z> * <var:M> ; <var:z> := <nat:1> + <var:z> * <var:M> ; <var:z> := <nat:2> + <var:z> * <var:M> {{ <var:z> = <nat:3> * <var:W> ^ <nat:10> + <nat:1> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:z> = <nat:3> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:z> = <nat:3> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:z> = <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:z> = <nat:3> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:2> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:z> = <nat:3> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:z> = <nat:3> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:z> = <nat:3> * <var:W> ^ <nat:7> + <nat:1> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:z> = <nat:3> * <var:W> ^ <nat:8> + <nat:1> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:4> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:z> = <nat:3> * <var:W> ^ <nat:9> + <nat:1> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:z> = <nat:3> * <var:W> ^ <nat:10> + <nat:1> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 