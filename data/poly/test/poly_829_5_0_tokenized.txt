\begin{document} \begin{theorem} Let the following code segment as \begin{verbatim} <var:J0> := <nat:2> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:t> ; <var:h> := <var:J1> ; <var:h> := <var:h> + <var:J0> \end{verbatim} Allowing it to be that $ <var:t> = <var:Y> $ ahead of executing our code segment it follows that $ <var:h> = <nat:3> \times <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} Using typical Hoare logic gives : \begin{eqnarray} \{ <var:t> = <var:Y> \} \\ <var:J0> := <nat:2> ; \\ \{ <var:t> = <var:Y> \land <var:J0> = <nat:2> \} \\ <var:J1> := <nat:3> ; \\ \{ <var:t> = <var:Y> \land <var:J0> = <nat:2> \land <var:J1> = <nat:3> \} \\ <var:J1> := <var:J1> * <var:t> ; \\ \{ <var:t> = <var:Y> \land <var:J0> = <nat:2> \land <var:J1> = <nat:3> \cdot <var:Y> \} \\ <var:h> := <var:J1> ; \\ \{ <var:t> = <var:Y> \land <var:J0> = <nat:2> \land <var:h> = <nat:3> \cdot <var:Y> \} \\ <var:h> := <var:h> + <var:J0> \\ \{ <var:t> = <var:Y> \land <var:h> = <nat:3> \cdot <var:Y> + <nat:2> \} \end{eqnarray} As a result , the series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:t> = <var:Y> }} <var:J0> := <nat:2> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:t> ; <var:h> := <var:J1> ; <var:h> := <var:h> + <var:J0> {{ <var:h> = <nat:3> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:J0> = <nat:2> /\ <var:J1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:J0> = <nat:2> /\ <var:J1> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:J0> = <nat:2> /\ <var:h> = <nat:3> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:Y> /\ <var:h> = <nat:3> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 