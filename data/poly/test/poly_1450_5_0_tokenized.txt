\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:t0> := <nat:4> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:A> ; <var:Y> := <var:t1> ; <var:Y> := <var:Y> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Assume that we have $ <var:A> = <var:K> $ prior to the evaluation of our program then we see $ <var:Y> = <nat:1> \times <var:K> + <nat:4> $ once set of commands has finished . \end{theorem} \begin{proof} Using typical Hoare logic yields : \begin{eqnarray} \{ <var:A> = <var:K> \} \\ <var:t0> := <nat:4> ; \\ \{ <var:A> = <var:K> \land <var:t0> = <nat:4> \} \\ <var:t1> := <nat:1> ; \\ \{ <var:A> = <var:K> \land <var:t0> = <nat:4> \land <var:t1> = <nat:1> \} \\ <var:t1> := <var:t1> * <var:A> ; \\ \{ <var:A> = <var:K> \land <var:t0> = <nat:4> \land <var:t1> = <nat:1> \cdot <var:K> \} \end{eqnarray} Furthering the execution of our list of instructions produces : \begin{eqnarray} <var:Y> := <var:t1> ; \\ \{ <var:A> = <var:K> \land <var:t0> = <nat:4> \land <var:Y> = <nat:1> \cdot <var:K> \} \\ <var:Y> := <var:Y> + <var:t0> \\ \{ <var:A> = <var:K> \land <var:Y> = <nat:1> \cdot <var:K> + <nat:4> \} \end{eqnarray} Thusly , this segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <def:poly> := <var:t0> := <nat:4> ; <var:t1> := <nat:1> ; <var:t1> := <var:t1> * <var:A> ; <var:Y> := <var:t1> ; <var:Y> := <var:Y> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:A> = <var:K> }} <def:poly> {{ <var:Y> = <nat:1> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:t0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:t0> = <nat:4> /\ <var:t1> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:t0> = <nat:4> /\ <var:Y> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:Y> = <nat:1> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 