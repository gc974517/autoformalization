\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:w> ; <var:Y2> := <var:Y1> * <var:w> ; <var:Y3> := <var:Y2> * <var:w> ; <var:Y0> := <nat:2> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:Y2> := <var:Y2> * <nat:8> ; <var:Y3> := <var:Y3> * <nat:4> ; <var:c> := <var:Y3> <var:c> := <var:c> + <var:Y2> <var:c> := <var:c> + <var:Y1> <var:c> := <var:c> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Given given every $ <var:A> \in \mathbb{N} $ it to hold that $ <var:w> = <var:A> $ prior to the evaluation of the code segment , then $ <var:c> = <nat:4> * <var:A> ^ <nat:3> + <nat:8> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:A> \} \\ <var:Y1> := <var:w> ; \\ \{ <var:w> = <var:A> \land <var:Y1> = <var:A> \} \\ <var:Y2> := <var:Y1> * <var:w> ; \\ \{ <var:w> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \} \\ <var:Y3> := <var:Y2> * <var:w> ; \\ \{ <var:w> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> \} \\ <var:Y0> := <nat:2> ; \\ \{ <var:w> = <var:A> \land <var:Y1> = <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> \land <var:Y0> = <nat:2> \} \\ <var:Y1> := <var:Y1> * <nat:3> ; \\ \{ <var:w> = <var:A> \land <var:Y1> = <nat:3> \cdot <var:A> \land <var:Y2> = <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> \land <var:Y0> = <nat:2> \} \\ <var:Y2> := <var:Y2> * <nat:8> ; \\ \{ <var:w> = <var:A> \land <var:Y1> = <nat:3> \cdot <var:A> \land <var:Y2> = <nat:8> \cdot <var:A> ^ <nat:2> \land <var:Y3> = <var:A> ^ <nat:3> \land <var:Y0> = <nat:2> \} \\ <var:Y3> := <var:Y3> * <nat:4> ; \\ \{ <var:w> = <var:A> \land <var:Y1> = <nat:3> \cdot <var:A> \land <var:Y2> = <nat:8> \cdot <var:A> ^ <nat:2> \land <var:Y3> = <nat:4> \cdot <var:A> ^ <nat:3> \land <var:Y0> = <nat:2> \} \\ <var:c> := <var:Y3> \\ \{ <var:w> = <var:A> \land <var:Y1> = <nat:3> \cdot <var:A> \land <var:Y2> = <nat:8> \cdot <var:A> ^ <nat:2> \land <var:Y0> = <nat:2> \land <var:c> = <nat:4> \cdot <var:A> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:Y2> \\ \{ <var:w> = <var:A> \land <var:Y1> = <nat:3> \cdot <var:A> \land <var:Y0> = <nat:2> \land <var:c> = <nat:4> \cdot <var:A> ^ <nat:3> + <nat:8> \cdot <var:A> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:Y1> \\ \{ <var:w> = <var:A> \land <var:Y0> = <nat:2> \land <var:c> = <nat:4> \cdot <var:A> ^ <nat:3> + <nat:8> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> \} \\ <var:c> := <var:c> + <var:Y0> \\ \{ <var:w> = <var:A> \land <var:c> = <nat:4> \cdot <var:A> ^ <nat:3> + <nat:8> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> + <nat:2> \} \end{eqnarray} Using usual Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Definition <def:poly> := <var:Y1> := <var:w> ; <var:Y2> := <var:Y1> * <var:w> ; <var:Y3> := <var:Y2> * <var:w> ; <var:Y0> := <nat:2> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:Y2> := <var:Y2> * <nat:8> ; <var:Y3> := <var:Y3> * <nat:4> ; <var:c> := <var:Y3> <var:c> := <var:c> + <var:Y2> <var:c> := <var:c> + <var:Y1> <var:c> := <var:c> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:w> = <var:A> }} <def:poly> {{ <var:c> = <nat:4> * <var:A> ^ <nat:3> + <nat:8> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:Y1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:Y1> = <var:A> /\ <var:Y2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:Y1> = <var:A> /\ <var:Y2> = <var:A> ^ <nat:2> /\ <var:Y3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:Y1> = <var:A> /\ <var:Y2> = <var:A> ^ <nat:2> /\ <var:Y3> = <var:A> ^ <nat:3> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:Y1> = <nat:3> * <var:A> /\ <var:Y2> = <var:A> ^ <nat:2> /\ <var:Y3> = <var:A> ^ <nat:3> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:Y1> = <nat:3> * <var:A> /\ <var:Y2> = <nat:8> * <var:A> ^ <nat:2> /\ <var:Y3> = <var:A> ^ <nat:3> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:Y1> = <nat:3> * <var:A> /\ <var:Y2> = <nat:8> * <var:A> ^ <nat:2> /\ <var:Y3> = <nat:4> * <var:A> ^ <nat:3> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:Y1> = <nat:3> * <var:A> /\ <var:Y2> = <nat:8> * <var:A> ^ <nat:2> /\ <var:Y0> = <nat:2> /\ <var:c> = <nat:4> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:Y1> = <nat:3> * <var:A> /\ <var:Y0> = <nat:2> /\ <var:c> = <nat:4> * <var:A> ^ <nat:3> + <nat:8> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:Y0> = <nat:2> /\ <var:c> = <nat:4> * <var:A> ^ <nat:3> + <nat:8> * <var:A> ^ <nat:2> + <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:c> = <nat:4> * <var:A> ^ <nat:3> + <nat:8> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 