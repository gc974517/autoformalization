\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j1> := <var:m> ; <var:j2> := <var:j1> * <var:m> ; <var:j3> := <var:j2> * <var:m> ; <var:j4> := <var:j3> * <var:m> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:4> ; <var:j2> := <var:j2> * <nat:7> ; <var:j3> := <var:j3> * <nat:6> ; <var:j4> := <var:j4> * <nat:3> ; <var:E> := <var:j4> <var:E> := <var:E> + <var:j3> <var:E> := <var:E> + <var:j2> <var:E> := <var:E> + <var:j1> <var:E> := <var:E> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Allow --- taking positive numbers $ <var:A> $ --- that we have $ <var:m> = <var:A> $ before the evaluation of the set of commands it must be that $ <var:E> = <nat:3> * <var:A> ^ <nat:4> + <nat:6> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:2> $ after segment of code has finished . \end{theorem} \begin{proof} Using standard Hoare reasoning returns : \begin{eqnarray} \{ <var:m> = <var:A> \} \\ <var:j1> := <var:m> ; \\ \{ <var:m> = <var:A> \land <var:j1> = <var:A> \} \\ <var:j2> := <var:j1> * <var:m> ; \\ \{ <var:m> = <var:A> \land <var:j1> = <var:A> \land <var:j2> = <var:A> ^ <nat:2> \} \\ <var:j3> := <var:j2> * <var:m> ; \\ \{ <var:m> = <var:A> \land <var:j1> = <var:A> \land <var:j2> = <var:A> ^ <nat:2> \land <var:j3> = <var:A> ^ <nat:3> \} \\ <var:j4> := <var:j3> * <var:m> ; \\ \{ <var:m> = <var:A> \land <var:j1> = <var:A> \land <var:j2> = <var:A> ^ <nat:2> \land <var:j3> = <var:A> ^ <nat:3> \land <var:j4> = <var:A> ^ <nat:4> \} \\ <var:j0> := <nat:2> ; \\ \{ <var:m> = <var:A> \land <var:j1> = <var:A> \land <var:j2> = <var:A> ^ <nat:2> \land <var:j3> = <var:A> ^ <nat:3> \land <var:j4> = <var:A> ^ <nat:4> \land <var:j0> = <nat:2> \} \\ <var:j1> := <var:j1> * <nat:4> ; \\ \{ <var:m> = <var:A> \land <var:j1> = <nat:4> \times <var:A> \land <var:j2> = <var:A> ^ <nat:2> \land <var:j3> = <var:A> ^ <nat:3> \land <var:j4> = <var:A> ^ <nat:4> \land <var:j0> = <nat:2> \} \end{eqnarray} Continuing the evaluation of the code segment returns : \begin{eqnarray} <var:j2> := <var:j2> * <nat:7> ; \\ \{ <var:m> = <var:A> \land <var:j1> = <nat:4> \times <var:A> \land <var:j2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:j3> = <var:A> ^ <nat:3> \land <var:j4> = <var:A> ^ <nat:4> \land <var:j0> = <nat:2> \} \\ <var:j3> := <var:j3> * <nat:6> ; \\ \{ <var:m> = <var:A> \land <var:j1> = <nat:4> \times <var:A> \land <var:j2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:j3> = <nat:6> \times <var:A> ^ <nat:3> \land <var:j4> = <var:A> ^ <nat:4> \land <var:j0> = <nat:2> \} \\ <var:j4> := <var:j4> * <nat:3> ; \\ \{ <var:m> = <var:A> \land <var:j1> = <nat:4> \times <var:A> \land <var:j2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:j3> = <nat:6> \times <var:A> ^ <nat:3> \land <var:j4> = <nat:3> \times <var:A> ^ <nat:4> \land <var:j0> = <nat:2> \} \\ <var:E> := <var:j4> \\ \{ <var:m> = <var:A> \land <var:j1> = <nat:4> \times <var:A> \land <var:j2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:j3> = <nat:6> \times <var:A> ^ <nat:3> \land <var:j0> = <nat:2> \land <var:E> = <nat:3> \times <var:A> ^ <nat:4> \} \\ <var:E> := <var:E> + <var:j3> \\ \{ <var:m> = <var:A> \land <var:j1> = <nat:4> \times <var:A> \land <var:j2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:j0> = <nat:2> \land <var:E> = <nat:3> \times <var:A> ^ <nat:4> + <nat:6> \times <var:A> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:j2> \\ \{ <var:m> = <var:A> \land <var:j1> = <nat:4> \times <var:A> \land <var:j0> = <nat:2> \land <var:E> = <nat:3> \times <var:A> ^ <nat:4> + <nat:6> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:j1> \\ \{ <var:m> = <var:A> \land <var:j0> = <nat:2> \land <var:E> = <nat:3> \times <var:A> ^ <nat:4> + <nat:6> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> \} \\ <var:E> := <var:E> + <var:j0> \\ \{ <var:m> = <var:A> \land <var:E> = <nat:3> \times <var:A> ^ <nat:4> + <nat:6> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + <nat:2> \} \end{eqnarray} Considering the above , the list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <var:j4> : string := " <var:j4> " . Definition <def:poly> := <var:j1> := <var:m> ; <var:j2> := <var:j1> * <var:m> ; <var:j3> := <var:j2> * <var:m> ; <var:j4> := <var:j3> * <var:m> ; <var:j0> := <nat:2> ; <var:j1> := <var:j1> * <nat:4> ; <var:j2> := <var:j2> * <nat:7> ; <var:j3> := <var:j3> * <nat:6> ; <var:j4> := <var:j4> * <nat:3> ; <var:E> := <var:j4> <var:E> := <var:E> + <var:j3> <var:E> := <var:E> + <var:j2> <var:E> := <var:E> + <var:j1> <var:E> := <var:E> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:m> = <var:A> }} <def:poly> {{ <var:E> = <nat:3> * <var:A> ^ <nat:4> + <nat:6> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:j1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:j1> = <var:A> /\ <var:j2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:j1> = <var:A> /\ <var:j2> = <var:A> ^ <nat:2> /\ <var:j3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:j1> = <var:A> /\ <var:j2> = <var:A> ^ <nat:2> /\ <var:j3> = <var:A> ^ <nat:3> /\ <var:j4> = <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:j1> = <var:A> /\ <var:j2> = <var:A> ^ <nat:2> /\ <var:j3> = <var:A> ^ <nat:3> /\ <var:j4> = <var:A> ^ <nat:4> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:j1> = <nat:4> * <var:A> /\ <var:j2> = <var:A> ^ <nat:2> /\ <var:j3> = <var:A> ^ <nat:3> /\ <var:j4> = <var:A> ^ <nat:4> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:j1> = <nat:4> * <var:A> /\ <var:j2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:j3> = <var:A> ^ <nat:3> /\ <var:j4> = <var:A> ^ <nat:4> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:j1> = <nat:4> * <var:A> /\ <var:j2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:A> ^ <nat:3> /\ <var:j4> = <var:A> ^ <nat:4> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:j1> = <nat:4> * <var:A> /\ <var:j2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:A> ^ <nat:3> /\ <var:j4> = <nat:3> * <var:A> ^ <nat:4> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:j1> = <nat:4> * <var:A> /\ <var:j2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:j3> = <nat:6> * <var:A> ^ <nat:3> /\ <var:j0> = <nat:2> /\ <var:E> = <nat:3> * <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:j1> = <nat:4> * <var:A> /\ <var:j2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:j0> = <nat:2> /\ <var:E> = <nat:3> * <var:A> ^ <nat:4> + <nat:6> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:j1> = <nat:4> * <var:A> /\ <var:j0> = <nat:2> /\ <var:E> = <nat:3> * <var:A> ^ <nat:4> + <nat:6> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:j0> = <nat:2> /\ <var:E> = <nat:3> * <var:A> ^ <nat:4> + <nat:6> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:A> /\ <var:E> = <nat:3> * <var:A> ^ <nat:4> + <nat:6> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 