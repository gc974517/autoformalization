\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c1> := <var:v> ; <var:c2> := <var:c1> * <var:v> ; <var:c3> := <var:c2> * <var:v> ; <var:c4> := <var:c3> * <var:v> ; <var:c0> := <nat:2> ; <var:c1> := <var:c1> * <nat:3> ; <var:c2> := <var:c2> * <nat:7> ; <var:c3> := <var:c3> * <nat:1> ; <var:c4> := <var:c4> * <nat:9> ; <var:r> := <var:c4> <var:r> := <var:r> + <var:c3> <var:r> := <var:r> + <var:c2> <var:r> := <var:r> + <var:c1> <var:r> := <var:r> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:v> = <var:w> $ prior to the execution of this code it follows that $ <var:r> = <nat:9> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:7> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:2> $ when list of instructions executes . \end{theorem} \begin{proof} The way to prove correctness for the code can be done using Hoare logic . Advancing to the subsequent lines of codein our series of commands , we see \verb | { <var:v> = <var:w> } <var:c1> := <var:v> { <var:v> = <var:w> \land <var:c1> = <var:w> } | , \verb | { <var:v> = <var:w> \land <var:c1> = <var:w> } <var:c2> := <var:c1> * <var:v> { <var:v> = <var:w> \land <var:c1> = <var:w> \land <var:c2> = <var:w> ^ <nat:2> } | , \verb | { <var:v> = <var:w> \land <var:c1> = <var:w> \land <var:c2> = <var:w> ^ <nat:2> } <var:c3> := <var:c2> * <var:v> { <var:v> = <var:w> \land <var:c1> = <var:w> \land <var:c2> = <var:w> ^ <nat:2> \land <var:c3> = <var:w> ^ <nat:3> } | , \verb | { <var:v> = <var:w> \land <var:c1> = <var:w> \land <var:c2> = <var:w> ^ <nat:2> \land <var:c3> = <var:w> ^ <nat:3> } <var:c4> := <var:c3> * <var:v> { <var:v> = <var:w> \land <var:c1> = <var:w> \land <var:c2> = <var:w> ^ <nat:2> \land <var:c3> = <var:w> ^ <nat:3> \land <var:c4> = <var:w> ^ <nat:4> } | , \verb | { <var:v> = <var:w> \land <var:c1> = <var:w> \land <var:c2> = <var:w> ^ <nat:2> \land <var:c3> = <var:w> ^ <nat:3> \land <var:c4> = <var:w> ^ <nat:4> } <var:c0> := <nat:2> { <var:v> = <var:w> \land <var:c1> = <var:w> \land <var:c2> = <var:w> ^ <nat:2> \land <var:c3> = <var:w> ^ <nat:3> \land <var:c4> = <var:w> ^ <nat:4> \land <var:c0> = <nat:2> } | , \verb | { <var:v> = <var:w> \land <var:c1> = <var:w> \land <var:c2> = <var:w> ^ <nat:2> \land <var:c3> = <var:w> ^ <nat:3> \land <var:c4> = <var:w> ^ <nat:4> \land <var:c0> = <nat:2> } <var:c1> := <var:c1> * <nat:3> { <var:v> = <var:w> \land <var:c1> = <nat:3> \cdot <var:w> \land <var:c2> = <var:w> ^ <nat:2> \land <var:c3> = <var:w> ^ <nat:3> \land <var:c4> = <var:w> ^ <nat:4> \land <var:c0> = <nat:2> } | , \verb | { <var:v> = <var:w> \land <var:c1> = <nat:3> \cdot <var:w> \land <var:c2> = <var:w> ^ <nat:2> \land <var:c3> = <var:w> ^ <nat:3> \land <var:c4> = <var:w> ^ <nat:4> \land <var:c0> = <nat:2> } <var:c2> := <var:c2> * <nat:7> { <var:v> = <var:w> \land <var:c1> = <nat:3> \cdot <var:w> \land <var:c2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:c3> = <var:w> ^ <nat:3> \land <var:c4> = <var:w> ^ <nat:4> \land <var:c0> = <nat:2> } | , \verb | { <var:v> = <var:w> \land <var:c1> = <nat:3> \cdot <var:w> \land <var:c2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:c3> = <var:w> ^ <nat:3> \land <var:c4> = <var:w> ^ <nat:4> \land <var:c0> = <nat:2> } <var:c3> := <var:c3> * <nat:1> { <var:v> = <var:w> \land <var:c1> = <nat:3> \cdot <var:w> \land <var:c2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:c3> = <nat:1> \cdot <var:w> ^ <nat:3> \land <var:c4> = <var:w> ^ <nat:4> \land <var:c0> = <nat:2> } | , \verb | { <var:v> = <var:w> \land <var:c1> = <nat:3> \cdot <var:w> \land <var:c2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:c3> = <nat:1> \cdot <var:w> ^ <nat:3> \land <var:c4> = <var:w> ^ <nat:4> \land <var:c0> = <nat:2> } <var:c4> := <var:c4> * <nat:9> { <var:v> = <var:w> \land <var:c1> = <nat:3> \cdot <var:w> \land <var:c2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:c3> = <nat:1> \cdot <var:w> ^ <nat:3> \land <var:c4> = <nat:9> \cdot <var:w> ^ <nat:4> \land <var:c0> = <nat:2> } | , \verb | { <var:v> = <var:w> \land <var:c1> = <nat:3> \cdot <var:w> \land <var:c2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:c3> = <nat:1> \cdot <var:w> ^ <nat:3> \land <var:c4> = <nat:9> \cdot <var:w> ^ <nat:4> \land <var:c0> = <nat:2> } <var:r> := <var:c4{ <var:v> = <var:w> \land <var:c1> = <nat:3> \cdot <var:w> \land <var:c2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:c3> = <nat:1> \cdot <var:w> ^ <nat:3> \land <var:c0> = <nat:2> \land <var:r> = <nat:9> \cdot <var:w> ^ <nat:4> } | , \verb | { <var:v> = <var:w> \land <var:c1> = <nat:3> \cdot <var:w> \land <var:c2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:c3> = <nat:1> \cdot <var:w> ^ <nat:3> \land <var:c0> = <nat:2> \land <var:r> = <nat:9> \cdot <var:w> ^ <nat:4> } <var:r> := <var:r> + <var:c3{ <var:v> = <var:w> \land <var:c1> = <nat:3> \cdot <var:w> \land <var:c2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:c0> = <nat:2> \land <var:r> = <nat:9> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> } | and \verb | { <var:v> = <var:w> \land <var:c1> = <nat:3> \cdot <var:w> \land <var:c2> = <nat:7> \cdot <var:w> ^ <nat:2> \land <var:c0> = <nat:2> \land <var:r> = <nat:9> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> } <var:r> := <var:r> + <var:c2{ <var:v> = <var:w> \land <var:c1> = <nat:3> \cdot <var:w> \land <var:c0> = <nat:2> \land <var:r> = <nat:9> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:7> \cdot <var:w> ^ <nat:2> } | . Considering the proceeding lines found in the program , \verb | { <var:v> = <var:w> } <var:c1> := <var:v> { <var:v> = <var:w> \land <var:c1> = <var:w> } | and \verb | { <var:v> = <var:w> \land <var:c1> = <var:w> } <var:c2> := <var:c1> * <var:v> { <var:v> = <var:w> \land <var:c1> = <var:w> \land <var:c2> = <var:w> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <var:c4> : string := " <var:c4> " . Definition <def:poly> := <var:c1> := <var:v> ; <var:c2> := <var:c1> * <var:v> ; <var:c3> := <var:c2> * <var:v> ; <var:c4> := <var:c3> * <var:v> ; <var:c0> := <nat:2> ; <var:c1> := <var:c1> * <nat:3> ; <var:c2> := <var:c2> * <nat:7> ; <var:c3> := <var:c3> * <nat:1> ; <var:c4> := <var:c4> * <nat:9> ; <var:r> := <var:c4> <var:r> := <var:r> + <var:c3> <var:r> := <var:r> + <var:c2> <var:r> := <var:r> + <var:c1> <var:r> := <var:r> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:v> = <var:w> }} <def:poly> {{ <var:r> = <nat:9> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:7> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:c1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:c1> = <var:w> /\ <var:c2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:c1> = <var:w> /\ <var:c2> = <var:w> ^ <nat:2> /\ <var:c3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:c1> = <var:w> /\ <var:c2> = <var:w> ^ <nat:2> /\ <var:c3> = <var:w> ^ <nat:3> /\ <var:c4> = <var:w> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:c1> = <var:w> /\ <var:c2> = <var:w> ^ <nat:2> /\ <var:c3> = <var:w> ^ <nat:3> /\ <var:c4> = <var:w> ^ <nat:4> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:c1> = <nat:3> * <var:w> /\ <var:c2> = <var:w> ^ <nat:2> /\ <var:c3> = <var:w> ^ <nat:3> /\ <var:c4> = <var:w> ^ <nat:4> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:c1> = <nat:3> * <var:w> /\ <var:c2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:c3> = <var:w> ^ <nat:3> /\ <var:c4> = <var:w> ^ <nat:4> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:c1> = <nat:3> * <var:w> /\ <var:c2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:c3> = <nat:1> * <var:w> ^ <nat:3> /\ <var:c4> = <var:w> ^ <nat:4> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:c1> = <nat:3> * <var:w> /\ <var:c2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:c3> = <nat:1> * <var:w> ^ <nat:3> /\ <var:c4> = <nat:9> * <var:w> ^ <nat:4> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:c1> = <nat:3> * <var:w> /\ <var:c2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:c3> = <nat:1> * <var:w> ^ <nat:3> /\ <var:c0> = <nat:2> /\ <var:r> = <nat:9> * <var:w> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:c1> = <nat:3> * <var:w> /\ <var:c2> = <nat:7> * <var:w> ^ <nat:2> /\ <var:c0> = <nat:2> /\ <var:r> = <nat:9> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:c1> = <nat:3> * <var:w> /\ <var:c0> = <nat:2> /\ <var:r> = <nat:9> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:7> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:c0> = <nat:2> /\ <var:r> = <nat:9> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:7> * <var:w> ^ <nat:2> + <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:w> /\ <var:r> = <nat:9> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:7> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 