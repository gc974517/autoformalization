\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:y1> := <var:j> ; <var:y2> := <var:y1> * <var:j> ; <var:y3> := <var:y2> * <var:j> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:4> ; <var:y2> := <var:y2> * <nat:3> ; <var:y3> := <var:y3> * <nat:6> ; <var:W> := <var:y3> <var:W> := <var:W> + <var:y2> <var:W> := <var:W> + <var:y1> <var:W> := <var:W> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> . Allowing that we have $ <var:j> = <var:C> $ ahead of interpreting our series of instructions , it follows that $ <var:W> = <nat:6> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:8> $ after series of commands is done executing . \end{theorem} \begin{proof} Proving correctness for the list of commands can be done with standard Hoare logic . Shifting focus toward the next bit of code in our set of commands , we see the variable assignmet line letting $ <var:j> $ as $ <var:y1>$ . This statement transfers $ \{ <var:j> = <var:C> \} $ toward $ \{ <var:j> = <var:C> \land <var:y1> = <var:C> \} $ . Advancing on , the variable assignmet line \verb | <var:y2> := <var:y1> * <var:j> ; | . This statement redefines the condition $ \{ <var:j> = <var:C> \land <var:y1> = <var:C> \} $ toward $ \{ <var:j> = <var:C> \land <var:y1> = <var:C> \land <var:y2> = <var:C> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment rule found in standard Hoare logic . Going to the next step , we see the environment update command giving $ <var:y2> * <var:j> $ to $ <var:y3>$ . This statement moves $ \{ <var:j> = <var:C> \land <var:y1> = <var:C> \land <var:y2> = <var:C> ^ <nat:2> \} $ toward $ \{ <var:j> = <var:C> \land <var:y1> = <var:C> \land <var:y2> = <var:C> ^ <nat:2> \land <var:y3> = <var:C> ^ <nat:3> \} $ . Paying attention to the upcoming bit of code seen in the series of instructions , the assignment code \verb | <var:y0> := <nat:8> ; | . This takes the precondition $ \{ <var:j> = <var:C> \land <var:y1> = <var:C> \land <var:y2> = <var:C> ^ <nat:2> \land <var:y3> = <var:C> ^ <nat:3> \} $ toward the condition $ \{ <var:j> = <var:C> \land <var:y1> = <var:C> \land <var:y2> = <var:C> ^ <nat:2> \land <var:y3> = <var:C> ^ <nat:3> \land <var:y0> = <nat:8> \} $ . After , we see the environment update statement assigning $ <var:y1> * <nat:4> $ to $ <var:y1>$ . This line takes the precondition $ \{ <var:j> = <var:C> \land <var:y1> = <var:C> \land <var:y2> = <var:C> ^ <nat:2> \land <var:y3> = <var:C> ^ <nat:3> \land <var:y0> = <nat:8> \} $ as the condition $ \{ <var:j> = <var:C> \land <var:y1> = <nat:4> \cdot <var:C> \land <var:y2> = <var:C> ^ <nat:2> \land <var:y3> = <var:C> ^ <nat:3> \land <var:y0> = <nat:8> \} $ . Taking a look at the upcoming line seen in our code , we have the command \verb | <var:y2> := <var:y2> * <nat:3> ; | . This redefines the condition $ \{ <var:j> = <var:C> \land <var:y1> = <nat:4> \cdot <var:C> \land <var:y2> = <var:C> ^ <nat:2> \land <var:y3> = <var:C> ^ <nat:3> \land <var:y0> = <nat:8> \} $ as the condition $ \{ <var:j> = <var:C> \land <var:y1> = <nat:4> \cdot <var:C> \land <var:y2> = <nat:3> \cdot <var:C> ^ <nat:2> \land <var:y3> = <var:C> ^ <nat:3> \land <var:y0> = <nat:8> \} $ . Further , the command yielding $ <var:y3> * <nat:6> $ as $ <var:y3>$ . This command moves the condition $ \{ <var:j> = <var:C> \land <var:y1> = <nat:4> \cdot <var:C> \land <var:y2> = <nat:3> \cdot <var:C> ^ <nat:2> \land <var:y3> = <var:C> ^ <nat:3> \land <var:y0> = <nat:8> \} $ toward $ \{ <var:j> = <var:C> \land <var:y1> = <nat:4> \cdot <var:C> \land <var:y2> = <nat:3> \cdot <var:C> ^ <nat:2> \land <var:y3> = <nat:6> \cdot <var:C> ^ <nat:3> \land <var:y0> = <nat:8> \} $ . Considering the proceeding statement seen in our list of instructions , we see the environment update command defining $ <var:y3$ toward $ <var:W>$ . This command takes $ \{ <var:j> = <var:C> \land <var:y1> = <nat:4> \cdot <var:C> \land <var:y2> = <nat:3> \cdot <var:C> ^ <nat:2> \land <var:y3> = <nat:6> \cdot <var:C> ^ <nat:3> \land <var:y0> = <nat:8> \} $ to $ \{ <var:j> = <var:C> \land <var:y1> = <nat:4> \cdot <var:C> \land <var:y2> = <nat:3> \cdot <var:C> ^ <nat:2> \land <var:y0> = <nat:8> \land <var:W> = <nat:6> \cdot <var:C> ^ <nat:3> \} $ . Further , we see the variable assignmet command defining $ <var:W> + <var:y2$ as $ <var:W>$ . This moves the precondition $ \{ <var:j> = <var:C> \land <var:y1> = <nat:4> \cdot <var:C> \land <var:y2> = <nat:3> \cdot <var:C> ^ <nat:2> \land <var:y0> = <nat:8> \land <var:W> = <nat:6> \cdot <var:C> ^ <nat:3> \} $ toward the condition $ \{ <var:j> = <var:C> \land <var:y1> = <nat:4> \cdot <var:C> \land <var:y0> = <nat:8> \land <var:W> = <nat:6> \cdot <var:C> ^ <nat:3> + <nat:3> \cdot <var:C> ^ <nat:2> \} $ . Focusing on the subsequent command found in our code segment , we have the assignment line \verb | <var:W> := <var:W> + <var:y1> | . This transfers $ \{ <var:j> = <var:C> \land <var:y1> = <nat:4> \cdot <var:C> \land <var:y0> = <nat:8> \land <var:W> = <nat:6> \cdot <var:C> ^ <nat:3> + <nat:3> \cdot <var:C> ^ <nat:2> \} $ toward the condition $ \{ <var:j> = <var:C> \land <var:y0> = <nat:8> \land <var:W> = <nat:6> \cdot <var:C> ^ <nat:3> + <nat:3> \cdot <var:C> ^ <nat:2> + <nat:4> \cdot <var:C> \} $ . Taking another step toward the subsequent piece of code found in the set of instructions , we have the variable assignmet line assigning $ <var:W> + <var:y0$ toward $ <var:W>$ . This redefines $ \{ <var:j> = <var:C> \land <var:y0> = <nat:8> \land <var:W> = <nat:6> \cdot <var:C> ^ <nat:3> + <nat:3> \cdot <var:C> ^ <nat:2> + <nat:4> \cdot <var:C> \} $ toward $ \{ <var:j> = <var:C> \land <var:W> = <nat:6> \cdot <var:C> ^ <nat:3> + <nat:3> \cdot <var:C> ^ <nat:2> + <nat:4> \cdot <var:C> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y1> := <var:j> ; <var:y2> := <var:y1> * <var:j> ; <var:y3> := <var:y2> * <var:j> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:4> ; <var:y2> := <var:y2> * <nat:3> ; <var:y3> := <var:y3> * <nat:6> ; <var:W> := <var:y3> <var:W> := <var:W> + <var:y2> <var:W> := <var:W> + <var:y1> <var:W> := <var:W> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:j> = <var:C> }} <def:poly> {{ <var:W> = <nat:6> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:y1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:y1> = <var:C> /\ <var:y2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:y1> = <var:C> /\ <var:y2> = <var:C> ^ <nat:2> /\ <var:y3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:y1> = <var:C> /\ <var:y2> = <var:C> ^ <nat:2> /\ <var:y3> = <var:C> ^ <nat:3> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:y1> = <nat:4> * <var:C> /\ <var:y2> = <var:C> ^ <nat:2> /\ <var:y3> = <var:C> ^ <nat:3> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:y1> = <nat:4> * <var:C> /\ <var:y2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:y3> = <var:C> ^ <nat:3> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:y1> = <nat:4> * <var:C> /\ <var:y2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:y3> = <nat:6> * <var:C> ^ <nat:3> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:y1> = <nat:4> * <var:C> /\ <var:y2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:y0> = <nat:8> /\ <var:W> = <nat:6> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:y1> = <nat:4> * <var:C> /\ <var:y0> = <nat:8> /\ <var:W> = <nat:6> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:y0> = <nat:8> /\ <var:W> = <nat:6> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:W> = <nat:6> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 