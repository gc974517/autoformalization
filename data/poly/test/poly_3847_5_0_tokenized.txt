\begin{document} \begin{theorem} Consider a code in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:7> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:z> ; <var:v> := <var:w1> ; <var:v> := <var:v> + <var:w0> \end{verbatim} Assuming that $ <var:z> = <var:i> $ before evaluating this segment of code it follows that we see $ <var:v> = <nat:9> \times <var:i> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for the code segment can be seen by typical Hoare reasoning . Considering the following line found in the code , we have the variable assignmet line assigning $ <nat:7> $ toward $ <var:w0>$ . This statement moves the condition $ \{ <var:z> = <var:i> \} $ toward the postcondition $ \{ <var:z> = <var:i> \land <var:w0> = <nat:7> \} $ . Advancing , we see the variable binding command assigning $ <nat:9> $ as $ <var:w1>$ . This statement transfers the precondition $ \{ <var:z> = <var:i> \land <var:w0> = <nat:7> \} $ toward $ \{ <var:z> = <var:i> \land <var:w0> = <nat:7> \land <var:w1> = <nat:9> \} $ . This is sound using the assignment law given by Hoare techniques . Looking at the proceeding statement seen in the series of commands , we have the command \verb | <var:w1> := <var:w1> * <var:z> ; | . This forwards the condition $ \{ <var:z> = <var:i> \land <var:w0> = <nat:7> \land <var:w1> = <nat:9> \} $ as the postcondition $ \{ <var:z> = <var:i> \land <var:w0> = <nat:7> \land <var:w1> = <nat:9> \times <var:i> \} $ . This is ensured through the assignment law defined by usual Hoare techniques . Moving forward to the subsequent statement contained in the segment of code , the variable assignmet statement \verb | <var:v> := <var:w1> ; | . This command redefines $ \{ <var:z> = <var:i> \land <var:w0> = <nat:7> \land <var:w1> = <nat:9> \times <var:i> \} $ to the condition $ \{ <var:z> = <var:i> \land <var:w0> = <nat:7> \land <var:v> = <nat:9> \times <var:i> \} $ . Honing in on the proceeding bit of code seen in the series of instructions , we see the variable update command assigning $ <var:v> + <var:w0$ as $ <var:v>$ . This command redefines $ \{ <var:z> = <var:i> \land <var:w0> = <nat:7> \land <var:v> = <nat:9> \times <var:i> \} $ toward $ \{ <var:z> = <var:i> \land <var:v> = <nat:9> \times <var:i> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:z> = <var:i> }} <var:w0> := <nat:7> ; <var:w1> := <nat:9> ; <var:w1> := <var:w1> * <var:z> ; <var:v> := <var:w1> ; <var:v> := <var:v> + <var:w0> {{ <var:v> = <nat:9> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:w0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:w0> = <nat:7> /\ <var:w1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:w0> = <nat:7> /\ <var:w1> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:w0> = <nat:7> /\ <var:v> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:i> /\ <var:v> = <nat:9> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 