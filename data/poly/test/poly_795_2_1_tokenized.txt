\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:6> ; <var:U> := <var:B0> \end{verbatim} Allowing for some $ <var:f> \in \mathbb{Z}^+ $ that we have $ <var:p> = <var:f> $ before executing this set of commands , it holds that $ <var:U> = <nat:6> $ after series of commands is done executing . \end{theorem} \begin{proof} Using standard Hoare logic yields : \begin{eqnarray} \{ <var:p> = <var:f> \} \\ <var:B0> := <nat:6> ; \\ \{ <var:p> = <var:f> \land <var:B0> = <nat:6> \} \\ <var:U> := <var:B0> \\ \{ <var:p> = <var:f> \land <var:U> = <nat:6> \} \end{eqnarray} Given the above , our code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:p> = <var:f> }} <var:B0> := <nat:6> ; <var:U> := <var:B0> {{ <var:U> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:f> /\ <var:U> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 