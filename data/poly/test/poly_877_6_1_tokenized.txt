\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} as \begin{verbatim} <var:K1> := <var:z> ; <var:K2> := <var:K1> * <var:z> ; <var:K0> := <nat:1> ; <var:K2> := <var:K2> * <nat:1> ; <var:t> := <var:K2> <var:t> := <var:t> + <var:K0> \end{verbatim} Assume --- for every $ <var:r> \in \mathbb{Z}^+ $ --- that $ <var:z> = <var:r> $ before interpreting this series of commands then we have $ <var:t> = <nat:1> \times <var:r> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Applying Hoare techniques gives : \begin{eqnarray} \{ <var:z> = <var:r> \} \\ <var:K1> := <var:z> ; \\ \{ <var:z> = <var:r> \land <var:K1> = <var:r> \} \\ <var:K2> := <var:K1> * <var:z> ; \\ \{ <var:z> = <var:r> \land <var:K1> = <var:r> \land <var:K2> = <var:r> ^ <nat:2> \} \\ <var:K0> := <nat:1> ; \\ \{ <var:z> = <var:r> \land <var:K1> = <var:r> \land <var:K2> = <var:r> ^ <nat:2> \land <var:K0> = <nat:1> \} \\ <var:K2> := <var:K2> * <nat:1> ; \\ \{ <var:z> = <var:r> \land <var:K1> = <var:r> \land <var:K2> = <nat:1> * <var:r> ^ <nat:2> \land <var:K0> = <nat:1> \} \\ <var:t> := <var:K2> \\ \{ <var:z> = <var:r> \land <var:K1> = <var:r> \land <var:K0> = <nat:1> \land <var:t> = <nat:1> * <var:r> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:K0> \\ \{ <var:z> = <var:r> \land <var:t> = <nat:1> * <var:r> ^ <nat:2> + <nat:1> \} \end{eqnarray} Continuing the evaluation of our code segment produces : \begin{eqnarray} \end{eqnarray} Given the above , the set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:z> = <var:r> }} <var:K1> := <var:z> ; <var:K2> := <var:K1> * <var:z> ; <var:K0> := <nat:1> ; <var:K2> := <var:K2> * <nat:1> ; <var:t> := <var:K2> <var:t> := <var:t> + <var:K0> {{ <var:t> = <nat:1> * <var:r> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:K1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:K1> = <var:r> /\ <var:K2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:K1> = <var:r> /\ <var:K2> = <var:r> ^ <nat:2> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:K1> = <var:r> /\ <var:K2> = <nat:1> * <var:r> ^ <nat:2> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:K1> = <var:r> /\ <var:K0> = <nat:1> /\ <var:t> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:t> = <nat:1> * <var:r> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 