\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v> := <nat:3> ; <var:v> := <nat:1> + <var:v> * <var:G> ; <var:v> := <nat:4> + <var:v> * <var:G> ; <var:v> := <nat:3> + <var:v> * <var:G> ; <var:v> := <nat:1> + <var:v> * <var:G> ; <var:v> := <nat:3> + <var:v> * <var:G> ; <var:v> := <nat:3> + <var:v> * <var:G> ; <var:v> := <nat:4> + <var:v> * <var:G> ; <var:v> := <nat:3> + <var:v> * <var:G> ; <var:v> := <nat:1> + <var:v> * <var:G> ; <var:v> := <nat:1> + <var:v> * <var:G> ; <var:v> := <nat:2> + <var:v> * <var:G> ; <var:v> := <var:v> * <var:G> ; <var:v> := <nat:2> + <var:v> * <var:G> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Allow that we have $ <var:G> = <var:N> $ ahead of interpreting our set of commands it follows that $ <var:v> = <nat:3> * <var:N> ^ <nat:13> + <nat:1> * <var:N> ^ <nat:12> + <nat:4> * <var:N> ^ <nat:11> + <nat:3> * <var:N> ^ <nat:10> + <nat:1> * <var:N> ^ <nat:9> + <nat:3> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> $ when segment of code has finished executing . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:G> = <var:N> \} \\ <var:v> := <nat:3> ; \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \} \\ <var:v> := <nat:1> + <var:v> * <var:G> ; \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \times <var:N> + <nat:1> \} \end{eqnarray} Allowing evaluating the list of instructions gives : \begin{eqnarray} <var:v> := <nat:4> + <var:v> * <var:G> ; \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:4> \} \\ <var:v> := <nat:3> + <var:v> * <var:G> ; \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> + <nat:3> \} \\ <var:v> := <nat:1> + <var:v> * <var:G> ; \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:1> \} \\ <var:v> := <nat:3> + <var:v> * <var:G> ; \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \times <var:N> ^ <nat:5> + <nat:1> \times <var:N> ^ <nat:4> + <nat:4> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:3> \} \\ <var:v> := <nat:3> + <var:v> * <var:G> ; \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \times <var:N> ^ <nat:6> + <nat:1> \times <var:N> ^ <nat:5> + <nat:4> \times <var:N> ^ <nat:4> + <nat:3> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:3> \} \\ <var:v> := <nat:4> + <var:v> * <var:G> ; \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \times <var:N> ^ <nat:7> + <nat:1> \times <var:N> ^ <nat:6> + <nat:4> \times <var:N> ^ <nat:5> + <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:4> \} \\ <var:v> := <nat:3> + <var:v> * <var:G> ; \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \times <var:N> ^ <nat:8> + <nat:1> \times <var:N> ^ <nat:7> + <nat:4> \times <var:N> ^ <nat:6> + <nat:3> \times <var:N> ^ <nat:5> + <nat:1> \times <var:N> ^ <nat:4> + <nat:3> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> + <nat:3> \} \\ <var:v> := <nat:1> + <var:v> * <var:G> ; \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \times <var:N> ^ <nat:9> + <nat:1> \times <var:N> ^ <nat:8> + <nat:4> \times <var:N> ^ <nat:7> + <nat:3> \times <var:N> ^ <nat:6> + <nat:1> \times <var:N> ^ <nat:5> + <nat:3> \times <var:N> ^ <nat:4> + <nat:3> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:1> \} \\ <var:v> := <nat:1> + <var:v> * <var:G> ; \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \times <var:N> ^ <nat:10> + <nat:1> \times <var:N> ^ <nat:9> + <nat:4> \times <var:N> ^ <nat:8> + <nat:3> \times <var:N> ^ <nat:7> + <nat:1> \times <var:N> ^ <nat:6> + <nat:3> \times <var:N> ^ <nat:5> + <nat:3> \times <var:N> ^ <nat:4> + <nat:4> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:1> \} \\ <var:v> := <nat:2> + <var:v> * <var:G> ; \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \times <var:N> ^ <nat:11> + <nat:1> \times <var:N> ^ <nat:10> + <nat:4> \times <var:N> ^ <nat:9> + <nat:3> \times <var:N> ^ <nat:8> + <nat:1> \times <var:N> ^ <nat:7> + <nat:3> \times <var:N> ^ <nat:6> + <nat:3> \times <var:N> ^ <nat:5> + <nat:4> \times <var:N> ^ <nat:4> + <nat:3> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:2> \} \\ <var:v> := <var:v> * <var:G> ; \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \times <var:N> ^ <nat:12> + <nat:1> \times <var:N> ^ <nat:11> + <nat:4> \times <var:N> ^ <nat:10> + <nat:3> \times <var:N> ^ <nat:9> + <nat:1> \times <var:N> ^ <nat:8> + <nat:3> \times <var:N> ^ <nat:7> + <nat:3> \times <var:N> ^ <nat:6> + <nat:4> \times <var:N> ^ <nat:5> + <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + \} \\ <var:v> := <nat:2> + <var:v> * <var:G> \\ \{ <var:G> = <var:N> \land <var:v> = <nat:3> \times <var:N> ^ <nat:13> + <nat:1> \times <var:N> ^ <nat:12> + <nat:4> \times <var:N> ^ <nat:11> + <nat:3> \times <var:N> ^ <nat:10> + <nat:1> \times <var:N> ^ <nat:9> + <nat:3> \times <var:N> ^ <nat:8> + <nat:3> \times <var:N> ^ <nat:7> + <nat:4> \times <var:N> ^ <nat:6> + <nat:3> \times <var:N> ^ <nat:5> + <nat:1> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:2> \} \end{eqnarray} Therefore , the set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:3> ; <var:v> := <nat:1> + <var:v> * <var:G> ; <var:v> := <nat:4> + <var:v> * <var:G> ; <var:v> := <nat:3> + <var:v> * <var:G> ; <var:v> := <nat:1> + <var:v> * <var:G> ; <var:v> := <nat:3> + <var:v> * <var:G> ; <var:v> := <nat:3> + <var:v> * <var:G> ; <var:v> := <nat:4> + <var:v> * <var:G> ; <var:v> := <nat:3> + <var:v> * <var:G> ; <var:v> := <nat:1> + <var:v> * <var:G> ; <var:v> := <nat:1> + <var:v> * <var:G> ; <var:v> := <nat:2> + <var:v> * <var:G> ; <var:v> := <var:v> * <var:G> ; <var:v> := <nat:2> + <var:v> * <var:G> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:G> = <var:N> }} <def:poly> {{ <var:v> = <nat:3> * <var:N> ^ <nat:13> + <nat:1> * <var:N> ^ <nat:12> + <nat:4> * <var:N> ^ <nat:11> + <nat:3> * <var:N> ^ <nat:10> + <nat:1> * <var:N> ^ <nat:9> + <nat:3> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:9> + <nat:1> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:10> + <nat:1> * <var:N> ^ <nat:9> + <nat:4> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:11> + <nat:1> * <var:N> ^ <nat:10> + <nat:4> * <var:N> ^ <nat:9> + <nat:3> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:12> + <nat:1> * <var:N> ^ <nat:11> + <nat:4> * <var:N> ^ <nat:10> + <nat:3> * <var:N> ^ <nat:9> + <nat:1> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:13> + <nat:1> * <var:N> ^ <nat:12> + <nat:4> * <var:N> ^ <nat:11> + <nat:3> * <var:N> ^ <nat:10> + <nat:1> * <var:N> ^ <nat:9> + <nat:3> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 