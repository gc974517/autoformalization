\begin{document} \begin{theorem} Take the following code such that \begin{verbatim} <var:q> := <nat:1> ; <var:q> := <var:q> * <var:d> ; <var:q> := <nat:1> + <var:q> * <var:d> ; <var:q> := <var:q> * <var:d> ; <var:q> := <nat:2> + <var:q> * <var:d> ; <var:q> := <nat:2> + <var:q> * <var:d> ; <var:q> := <nat:4> + <var:q> * <var:d> ; <var:q> := <var:q> * <var:d> ; <var:q> := <nat:2> + <var:q> * <var:d> ; <var:q> := <nat:4> + <var:q> * <var:d> ; <var:q> := <nat:4> + <var:q> * <var:d> ; <var:q> := <nat:3> + <var:q> * <var:d> \end{verbatim} Given that we have $ <var:d> = <var:l> $ , with some $ <var:l> \in \mathbb{N} $ , ahead of evaluating our list of commands , it follows that $ <var:q> = <nat:1> * <var:l> ^ <nat:11> + <nat:1> * <var:l> ^ <nat:9> + <nat:2> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:3> $ after series of instructions has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions is given through usual Hoare logic . Moving onward , we have \begin{verbatim} { <var:d> = <var:l> } <var:q> := <nat:1> { <var:d> = <var:l> \land <var:q> = <nat:1> } { <var:d> = <var:l> \land <var:q> = <nat:1> } <var:q> := <var:q> * <var:d> { <var:d> = <var:l> \land <var:q> = <nat:1> \cdot <var:l> + } { <var:d> = <var:l> \land <var:q> = <nat:1> \cdot <var:l> + } <var:q> := <nat:1> + <var:q> * <var:d> { <var:d> = <var:l> \land <var:q> = <nat:1> \cdot <var:l> ^ <nat:2> + <nat:1> } { <var:d> = <var:l> \land <var:q> = <nat:1> \cdot <var:l> ^ <nat:2> + <nat:1> } <var:q> := <var:q> * <var:d> { <var:d> = <var:l> \land <var:q> = <nat:1> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> + } { <var:d> = <var:l> \land <var:q> = <nat:1> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> + } <var:q> := <nat:2> + <var:q> * <var:d> { <var:d> = <var:l> \land <var:q> = <nat:1> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:2> } { <var:d> = <var:l> \land <var:q> = <nat:1> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:2> } <var:q> := <nat:2> + <var:q> * <var:d> { <var:d> = <var:l> \land <var:q> = <nat:1> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> + <nat:2> } \end{verbatim} This is shown to be logically sound by the binding law given in usual Hoare reasoning . Looking at the next lines of codein our code , \begin{verbatim} { <var:d> = <var:l> } <var:q> := <nat:1> { <var:d> = <var:l> \land <var:q> = <nat:1> } { <var:d> = <var:l> \land <var:q> = <nat:1> } <var:q> := <var:q> * <var:d> { <var:d> = <var:l> \land <var:q> = <nat:1> \cdot <var:l> + } \end{verbatim} Immediately after , we have \begin{verbatim} { <var:d> = <var:l> } <var:q> := <nat:1> { <var:d> = <var:l> \land <var:q> = <nat:1> } \end{verbatim} This is shown to be logically sound with the variable assignmet inference rule from standard Hoare logic . Jumping to the next lines of codefound in the set of instructions , \begin{verbatim} { <var:d> = <var:l> } <var:q> := <nat:1> { <var:d> = <var:l> \land <var:q> = <nat:1> } { <var:d> = <var:l> \land <var:q> = <nat:1> } <var:q> := <var:q> * <var:d> { <var:d> = <var:l> \land <var:q> = <nat:1> \cdot <var:l> + } { <var:d> = <var:l> \land <var:q> = <nat:1> \cdot <var:l> + } <var:q> := <nat:1> + <var:q> * <var:d> { <var:d> = <var:l> \land <var:q> = <nat:1> \cdot <var:l> ^ <nat:2> + <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:d> = <var:l> }} <var:q> := <nat:1> ; <var:q> := <var:q> * <var:d> ; <var:q> := <nat:1> + <var:q> * <var:d> ; <var:q> := <var:q> * <var:d> ; <var:q> := <nat:2> + <var:q> * <var:d> ; <var:q> := <nat:2> + <var:q> * <var:d> ; <var:q> := <nat:4> + <var:q> * <var:d> ; <var:q> := <var:q> * <var:d> ; <var:q> := <nat:2> + <var:q> * <var:d> ; <var:q> := <nat:4> + <var:q> * <var:d> ; <var:q> := <nat:4> + <var:q> * <var:d> ; <var:q> := <nat:3> + <var:q> * <var:d> {{ <var:q> = <nat:1> * <var:l> ^ <nat:11> + <nat:1> * <var:l> ^ <nat:9> + <nat:2> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:q> = <nat:1> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:3> + <nat:2> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:8> + <nat:1> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:2> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:10> + <nat:1> * <var:l> ^ <nat:8> + <nat:2> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:11> + <nat:1> * <var:l> ^ <nat:9> + <nat:2> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 