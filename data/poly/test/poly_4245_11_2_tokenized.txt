\begin{document} \begin{theorem} Consider a set of instructions as follows \begin{verbatim} <var:M> := <nat:4> ; <var:M> := <nat:2> + <var:M> * <var:H> ; <var:M> := <nat:4> + <var:M> * <var:H> ; <var:M> := <nat:4> + <var:M> * <var:H> ; <var:M> := <var:M> * <var:H> ; <var:M> := <nat:1> + <var:M> * <var:H> ; <var:M> := <nat:4> + <var:M> * <var:H> ; <var:M> := <nat:2> + <var:M> * <var:H> ; <var:M> := <nat:1> + <var:M> * <var:H> ; <var:M> := <nat:2> + <var:M> * <var:H> ; <var:M> := <nat:3> + <var:M> * <var:H> \end{verbatim} Assume it to be that $ <var:H> = <var:J> $ , for some $ <var:J> $ , ahead of the execution of this segment of code , it follows that we see $ <var:M> = <nat:4> * <var:J> ^ <nat:10> + <nat:2> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:3> $ after segment of code has executed . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions is evident by usual Hoare reasoning . Looking at the proceeding line contained in the code segment , we have the variable assignmet command \verb | <var:M> := <nat:4> ; | . This line redefines the precondition $ \{ <var:H> = <var:J> \} $ into the condition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \} $ . Shifting focus toward the subsequent command seen in the set of commands , we have the variable assignmet line assigning $ <nat:2> + <var:M> * <var:H> $ toward $ <var:M>$ . This line advances the condition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \} $ toward $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> + <nat:2> \} $ . This is shown to be logically sound through the assignment scheme defined by usual Hoare techniques . Observing the upcoming line of code in our program , we see the binding command \verb | <var:M> := <nat:4> + <var:M> * <var:H> ; | . This takes $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> + <nat:2> \} $ toward the condition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:4> \} $ . This is ensured through the assignment law obtained from standard Hoare logic . Immediately after , we see the environment update statement \verb | <var:M> := <nat:4> + <var:M> * <var:H> ; | . This command forwards $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:4> \} $ as the condition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:3> + <nat:2> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:4> \} $ . This is deduced through the assignment inference rule found in standard Hoare reasoning . Focusing on the next step seen in the segment of code , the variable assignmet command giving $ <var:M> * <var:H> $ as $ <var:M>$ . This redefines $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:3> + <nat:2> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:4> \} $ as the postcondition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:4> + <nat:2> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + \} $ . This is given with the assignment rule defined in standard Hoare techniques . Immediately following , we have the statement binding $ <nat:1> + <var:M> * <var:H> $ toward $ <var:M>$ . This takes the condition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:4> + <nat:2> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + \} $ into the condition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:5> + <nat:2> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:1> \} $ . Further , we see the variable assignmet statement binding $ <nat:4> + <var:M> * <var:H> $ into $ <var:M>$ . This line moves the precondition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:5> + <nat:2> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:1> \} $ as the condition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:6> + <nat:2> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> + <nat:4> \} $ . After , we see the assignment line \verb | <var:M> := <nat:2> + <var:M> * <var:H> ; | . This transfers the condition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:6> + <nat:2> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> + <nat:4> \} $ toward the condition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:7> + <nat:2> \times <var:J> ^ <nat:6> + <nat:4> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:2> \} $ . This is rigorously given through the assignment rule defined by Hoare reasoning . Honing in on the subsequent line of code in our code segment , the environment update command \verb | <var:M> := <nat:1> + <var:M> * <var:H> ; | . This redefines the condition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:7> + <nat:2> \times <var:J> ^ <nat:6> + <nat:4> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:1> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:2> \} $ as $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:8> + <nat:2> \times <var:J> ^ <nat:7> + <nat:4> \times <var:J> ^ <nat:6> + <nat:4> \times <var:J> ^ <nat:5> + <nat:1> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:1> \} $ . Moving on to the next step , the assignment line yielding $ <nat:2> + <var:M> * <var:H> $ into $ <var:M>$ . This redefines the condition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:8> + <nat:2> \times <var:J> ^ <nat:7> + <nat:4> \times <var:J> ^ <nat:6> + <nat:4> \times <var:J> ^ <nat:5> + <nat:1> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:1> \} $ toward $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:9> + <nat:2> \times <var:J> ^ <nat:8> + <nat:4> \times <var:J> ^ <nat:7> + <nat:4> \times <var:J> ^ <nat:6> + <nat:1> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:2> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:2> \} $ . Looking at the following command contained in the program , we see the variable assignmet line letting $ <nat:3> + <var:M> * <var:H$ into $ <var:M>$ . This line transfers the precondition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:9> + <nat:2> \times <var:J> ^ <nat:8> + <nat:4> \times <var:J> ^ <nat:7> + <nat:4> \times <var:J> ^ <nat:6> + <nat:1> \times <var:J> ^ <nat:4> + <nat:4> \times <var:J> ^ <nat:3> + <nat:2> \times <var:J> ^ <nat:2> + <nat:1> \times <var:J> + <nat:2> \} $ toward the postcondition $ \{ <var:H> = <var:J> \land <var:M> = <nat:4> \times <var:J> ^ <nat:10> + <nat:2> \times <var:J> ^ <nat:9> + <nat:4> \times <var:J> ^ <nat:8> + <nat:4> \times <var:J> ^ <nat:7> + <nat:1> \times <var:J> ^ <nat:5> + <nat:4> \times <var:J> ^ <nat:4> + <nat:2> \times <var:J> ^ <nat:3> + <nat:1> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:3> \} $ . This is shown to be logically sound using the assignment inference rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:H> = <var:J> }} <var:M> := <nat:4> ; <var:M> := <nat:2> + <var:M> * <var:H> ; <var:M> := <nat:4> + <var:M> * <var:H> ; <var:M> := <nat:4> + <var:M> * <var:H> ; <var:M> := <var:M> * <var:H> ; <var:M> := <nat:1> + <var:M> * <var:H> ; <var:M> := <nat:4> + <var:M> * <var:H> ; <var:M> := <nat:2> + <var:M> * <var:H> ; <var:M> := <nat:1> + <var:M> * <var:H> ; <var:M> := <nat:2> + <var:M> * <var:H> ; <var:M> := <nat:3> + <var:M> * <var:H> {{ <var:M> = <nat:4> * <var:J> ^ <nat:10> + <nat:2> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:M> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:M> = <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:M> = <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:M> = <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:M> = <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:M> = <nat:4> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:M> = <nat:4> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:1> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:M> = <nat:4> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:M> = <nat:4> * <var:J> ^ <nat:8> + <nat:2> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:4> * <var:J> ^ <nat:5> + <nat:1> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:M> = <nat:4> * <var:J> ^ <nat:9> + <nat:2> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:4> * <var:J> ^ <nat:6> + <nat:1> * <var:J> ^ <nat:4> + <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:M> = <nat:4> * <var:J> ^ <nat:10> + <nat:2> * <var:J> ^ <nat:9> + <nat:4> * <var:J> ^ <nat:8> + <nat:4> * <var:J> ^ <nat:7> + <nat:1> * <var:J> ^ <nat:5> + <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 