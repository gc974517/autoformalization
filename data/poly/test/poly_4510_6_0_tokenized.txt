\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:5> ; <var:n2> := <nat:8> ; <var:n2> := <var:n2> * <var:g> ; <var:n2> := <var:n2> * <var:g> ; <var:a> := <var:n2> ; <var:a> := <var:a> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:g> = <var:W> $ ahead of running our list of commands , it must be that $ <var:a> = <nat:8> \times <var:W> ^ <nat:2> + <nat:5> $ once set of instructions terminates . \end{theorem} \begin{proof} The flow of logic for this code segment is clear through usual Hoare techniques . Following , \verb | { <var:g> = <var:W> } <var:n0> := <nat:5> { <var:g> = <var:W> \land <var:n0> = <nat:5> } | . This is known to be sound using the variable update rule defined by standard Hoare reasoning . Next , we have \verb | { <var:g> = <var:W> } <var:n0> := <nat:5> { <var:g> = <var:W> \land <var:n0> = <nat:5> } | , \verb | { <var:g> = <var:W> \land <var:n0> = <nat:5> } <var:n2> := <nat:8> { <var:g> = <var:W> \land <var:n0> = <nat:5> \land <var:n2> = <nat:8> } | , \verb | { <var:g> = <var:W> \land <var:n0> = <nat:5> \land <var:n2> = <nat:8> } <var:n2> := <var:n2> * <var:g> { <var:g> = <var:W> \land <var:n0> = <nat:5> \land <var:n2> = <nat:8> \cdot <var:W> } | , \verb | { <var:g> = <var:W> \land <var:n0> = <nat:5> \land <var:n2> = <nat:8> \cdot <var:W> } <var:n2> := <var:n2> * <var:g> { <var:g> = <var:W> \land <var:n0> = <nat:5> \land <var:n2> = <nat:8> \cdot <var:W> ^ <nat:2> } | and \verb | { <var:g> = <var:W> \land <var:n0> = <nat:5> \land <var:n2> = <nat:8> \cdot <var:W> ^ <nat:2> } <var:a> := <var:n2> { <var:g> = <var:W> \land <var:n0> = <nat:5> \land <var:a> = <nat:8> \cdot <var:W> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n0> := <nat:5> ; <var:n2> := <nat:8> ; <var:n2> := <var:n2> * <var:g> ; <var:n2> := <var:n2> * <var:g> ; <var:a> := <var:n2> ; <var:a> := <var:a> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:g> = <var:W> }} <def:poly> {{ <var:a> = <nat:8> * <var:W> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:n0> = <nat:5> /\ <var:n2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:n0> = <nat:5> /\ <var:n2> = <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:n0> = <nat:5> /\ <var:n2> = <nat:8> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:n0> = <nat:5> /\ <var:a> = <nat:8> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:a> = <nat:8> * <var:W> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 