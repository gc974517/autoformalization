\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:f0> := <nat:1> ; <var:f1> := <nat:3> ; <var:f1> := <var:f1> * <var:p> ; <var:f2> := <nat:1> ; <var:f2> := <var:f2> * <var:p> ; <var:f2> := <var:f2> * <var:p> ; <var:q> := <var:f2> ; <var:q> := <var:q> + <var:f1> ; <var:q> := <var:q> + <var:f0> \end{verbatim} Allow that $ <var:p> = <var:y> $ before executing our program it follows that we see $ <var:q> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> + <nat:1> $ once code has exited . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions can be demonstrated by typical Hoare reasoning . Advancing to the next bit of code contained in our list of commands , we have the variable update code \verb | <var:f0> := <nat:1> ; | . This line takes $ \{ <var:p> = <var:y> \} $ toward the condition $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \} $ . This is shown by the assignment rule given in typical Hoare reasoning . Jumping to the proceeding line of code seen in our list of commands , we have the command \verb | <var:f1> := <nat:3> ; | . This transfers the precondition $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \} $ into the condition $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> \} $ . This is deduced through the assignment rule found in standard Hoare techniques . Moving forward , we see the assignment statement \verb | <var:f1> := <var:f1> * <var:p> ; | . This moves the precondition $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> \} $ to the condition $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> \cdot <var:y> \} $ . This is shown to be logically sound using the assignment scheme defined in usual Hoare techniques . Jumping to the next statement seen in our list of instructions , the environment update command yielding $ <nat:1> $ to $ <var:f2>$ . This transfers $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> \cdot <var:y> \} $ into the postcondition $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> \cdot <var:y> \land <var:f2> = <nat:1> \} $ . This is shown to be logically sound with the assignment rule given by standard Hoare techniques . Advancing to the next step , we see the binding line binding $ <var:f2> * <var:p> $ into $ <var:f2>$ . This takes the condition $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> \cdot <var:y> \land <var:f2> = <nat:1> \} $ into the postcondition $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> \} $ . Observing the next bit of code in the series of instructions , the variable update line \verb | <var:f2> := <var:f2> * <var:p> ; | . This command transfers the precondition $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> \} $ toward the condition $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> ^ <nat:2> \} $ . This is known to be sound by the assignment law defined by standard Hoare techniques . Moving forward to the subsequent piece of code seen in the segment of code , we see the variable binding code yielding $ <var:f2> $ into $ <var:q>$ . This line forwards $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> ^ <nat:2> \} $ into the condition $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> \cdot <var:y> \land <var:q> = <nat:1> \cdot <var:y> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment law obtained from usual Hoare reasoning . Shifting focus toward the subsequent line of code seen in the series of instructions , we see the binding command \verb | <var:q> := <var:q> + <var:f1> ; | . This redefines the precondition $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:f1> = <nat:3> \cdot <var:y> \land <var:q> = <nat:1> \cdot <var:y> ^ <nat:2> \} $ into the postcondition $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:q> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> \} $ . This is guaranteed with the assignment inference rule found in typical Hoare reasoning . Taking another step toward the following piece of code seen in the series of instructions , we have the assignment line yielding $ <var:q> + <var:f0$ to $ <var:q>$ . This takes $ \{ <var:p> = <var:y> \land <var:f0> = <nat:1> \land <var:q> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> \} $ as the postcondition $ \{ <var:p> = <var:y> \land <var:q> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> + <nat:1> \} $ . This is shown to be logically sound by the assignment scheme obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:p> = <var:y> }} <var:f0> := <nat:1> ; <var:f1> := <nat:3> ; <var:f1> := <var:f1> * <var:p> ; <var:f2> := <nat:1> ; <var:f2> := <var:f2> * <var:p> ; <var:f2> := <var:f2> * <var:p> ; <var:q> := <var:f2> ; <var:q> := <var:q> + <var:f1> ; <var:q> := <var:q> + <var:f0> {{ <var:q> = <nat:1> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:3> * <var:y> /\ <var:f2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:3> * <var:y> /\ <var:f2> = <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:3> * <var:y> /\ <var:f2> = <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:3> * <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:f0> = <nat:1> /\ <var:q> = <nat:1> * <var:y> ^ <nat:2> + <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:q> = <nat:1> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 