\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:6> ; <var:j1> := <nat:5> ; <var:j1> := <var:j1> * <var:t> ; <var:a> := <var:j1> ; <var:a> := <var:a> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:t> = <var:B> $ , given all natural numbers $ <var:B> $ , ahead of executing our code , it follows that we see $ <var:a> = <nat:5> \cdot <var:B> + <nat:6> $ after set of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:B> \} \\ <var:j0> := <nat:6> ; \\ \{ <var:t> = <var:B> \land <var:j0> = <nat:6> \} \\ <var:j1> := <nat:5> ; \\ \{ <var:t> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:5> \} \\ <var:j1> := <var:j1> * <var:t> ; \\ \{ <var:t> = <var:B> \land <var:j0> = <nat:6> \land <var:j1> = <nat:5> \cdot <var:B> \} \\ <var:a> := <var:j1> ; \\ \{ <var:t> = <var:B> \land <var:j0> = <nat:6> \land <var:a> = <nat:5> \cdot <var:B> \} \\ <var:a> := <var:a> + <var:j0> \\ \{ <var:t> = <var:B> \land <var:a> = <nat:5> \cdot <var:B> + <nat:6> \} \end{eqnarray} Utilizing typical Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j0> := <nat:6> ; <var:j1> := <nat:5> ; <var:j1> := <var:j1> * <var:t> ; <var:a> := <var:j1> ; <var:a> := <var:a> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:t> = <var:B> }} <def:poly> {{ <var:a> = <nat:5> * <var:B> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:j0> = <nat:6> /\ <var:j1> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:j0> = <nat:6> /\ <var:a> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:a> = <nat:5> * <var:B> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 