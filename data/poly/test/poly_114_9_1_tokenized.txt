\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:M> ; <var:I2> := <var:I1> * <var:M> ; <var:I3> := <var:I2> * <var:M> ; <var:I0> := <nat:3> ; <var:I2> := <var:I2> * <nat:6> ; <var:I3> := <var:I3> * <nat:6> ; <var:F> := <var:I3> <var:F> := <var:F> + <var:I2> <var:F> := <var:F> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> in \emph{Imp} . Assume it to be that $ <var:M> = <var:Y> $ before interpreting the series of commands it holds that we have $ <var:F> = <nat:6> \times <var:Y> ^ <nat:3> + <nat:6> \times <var:Y> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of the program can be accomplished using standard Hoare reasoning . Keeping momentum , the binding code \verb | <var:I1> := <var:M> ; | . This command moves the condition $ \{ <var:M> = <var:Y> \} $ to $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \} $ . Advancing to the proceeding statement contained in the set of instructions , we see the code \verb | <var:I2> := <var:I1> * <var:M> ; | . This advances the precondition $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \} $ into the condition $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I2> = <var:Y> ^ <nat:2> \} $ . Taking another step toward the proceeding line contained in the code , we see the binding code \verb | <var:I3> := <var:I2> * <var:M> ; | . This statement forwards the precondition $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I2> = <var:Y> ^ <nat:2> \} $ to $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I2> = <var:Y> ^ <nat:2> \land <var:I3> = <var:Y> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment rule defined by Hoare logic . Stepping through , the assignment line \verb | <var:I0> := <nat:3> ; | . This takes the condition $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I2> = <var:Y> ^ <nat:2> \land <var:I3> = <var:Y> ^ <nat:3> \} $ toward the condition $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I2> = <var:Y> ^ <nat:2> \land <var:I3> = <var:Y> ^ <nat:3> \land <var:I0> = <nat:3> \} $ . Stepping through , the variable assignmet code letting $ <var:I2> * <nat:6> $ into $ <var:I2>$ . This forwards $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I2> = <var:Y> ^ <nat:2> \land <var:I3> = <var:Y> ^ <nat:3> \land <var:I0> = <nat:3> \} $ as the condition $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I2> = <nat:6> \times <var:Y> ^ <nat:2> \land <var:I3> = <var:Y> ^ <nat:3> \land <var:I0> = <nat:3> \} $ . Focusing on the subsequent line of code seen in the code segment , we see the variable assignmet line yielding $ <var:I3> * <nat:6> $ to $ <var:I3>$ . This line redefines the precondition $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I2> = <nat:6> \times <var:Y> ^ <nat:2> \land <var:I3> = <var:Y> ^ <nat:3> \land <var:I0> = <nat:3> \} $ to $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I2> = <nat:6> \times <var:Y> ^ <nat:2> \land <var:I3> = <nat:6> \times <var:Y> ^ <nat:3> \land <var:I0> = <nat:3> \} $ . This is sound with the assignment rule obtained from standard Hoare logic . Stepping through , we have the variable assignmet line yielding $ <var:I3$ into $ <var:F>$ . This moves $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I2> = <nat:6> \times <var:Y> ^ <nat:2> \land <var:I3> = <nat:6> \times <var:Y> ^ <nat:3> \land <var:I0> = <nat:3> \} $ as $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I2> = <nat:6> \times <var:Y> ^ <nat:2> \land <var:I0> = <nat:3> \land <var:F> = <nat:6> \times <var:Y> ^ <nat:3> \} $ . Observing the next piece of code in the series of commands , the command \verb | <var:F> := <var:F> + <var:I2> | . This forwards the precondition $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I2> = <nat:6> \times <var:Y> ^ <nat:2> \land <var:I0> = <nat:3> \land <var:F> = <nat:6> \times <var:Y> ^ <nat:3> \} $ toward the condition $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I0> = <nat:3> \land <var:F> = <nat:6> \times <var:Y> ^ <nat:3> + <nat:6> \times <var:Y> ^ <nat:2> \} $ . This is known to be sound through the assignment inference rule given in Hoare logic . Moving forward to the next step , we see the variable update code \verb | <var:F> := <var:F> + <var:I0> | . This code forwards $ \{ <var:M> = <var:Y> \land <var:I1> = <var:Y> \land <var:I0> = <nat:3> \land <var:F> = <nat:6> \times <var:Y> ^ <nat:3> + <nat:6> \times <var:Y> ^ <nat:2> \} $ as $ \{ <var:M> = <var:Y> \land <var:F> = <nat:6> \times <var:Y> ^ <nat:3> + <nat:6> \times <var:Y> ^ <nat:2> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I1> := <var:M> ; <var:I2> := <var:I1> * <var:M> ; <var:I3> := <var:I2> * <var:M> ; <var:I0> := <nat:3> ; <var:I2> := <var:I2> * <nat:6> ; <var:I3> := <var:I3> * <nat:6> ; <var:F> := <var:I3> <var:F> := <var:F> + <var:I2> <var:F> := <var:F> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:M> = <var:Y> }} <def:poly> {{ <var:F> = <nat:6> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:I1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:I1> = <var:Y> /\ <var:I2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:I1> = <var:Y> /\ <var:I2> = <var:Y> ^ <nat:2> /\ <var:I3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:I1> = <var:Y> /\ <var:I2> = <var:Y> ^ <nat:2> /\ <var:I3> = <var:Y> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:I1> = <var:Y> /\ <var:I2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:I3> = <var:Y> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:I1> = <var:Y> /\ <var:I2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:I3> = <nat:6> * <var:Y> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:I1> = <var:Y> /\ <var:I2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:I0> = <nat:3> /\ <var:F> = <nat:6> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:I1> = <var:Y> /\ <var:I0> = <nat:3> /\ <var:F> = <nat:6> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:F> = <nat:6> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 