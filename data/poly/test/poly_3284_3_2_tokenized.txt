\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L> := <nat:2> ; <var:L> := <nat:3> + <var:L> * <var:N> ; <var:L> := <nat:2> + <var:L> * <var:N> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Assuming it to be that $ <var:N> = <var:K> $ --- for natural coefficients $ <var:K> $ --- before evaluating our segment of code , it must be that we see $ <var:L> = <nat:2> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:2> $ when segment of code executes . \end{theorem} \begin{proof} The proof of the set of instructions is given with typical Hoare logic . Taking another step toward the subsequent bit of code in our list of instructions , the environment update line letting $ <nat:2> $ to $ <var:L>$ . This redefines the precondition $ \{ <var:N> = <var:K> \} $ to $ \{ <var:N> = <var:K> \land <var:L> = <nat:2> \} $ . Focusing on the subsequent piece of code seen in our series of commands , the variable update code \verb | <var:L> := <nat:3> + <var:L> * <var:N> ; | . This forwards $ \{ <var:N> = <var:K> \land <var:L> = <nat:2> \} $ as the postcondition $ \{ <var:N> = <var:K> \land <var:L> = <nat:2> \times <var:K> + <nat:3> \} $ . Immediately after , we see the assignment line defining $ <nat:2> + <var:L> * <var:N$ into $ <var:L>$ . This line transfers $ \{ <var:N> = <var:K> \land <var:L> = <nat:2> \times <var:K> + <nat:3> \} $ into the postcondition $ \{ <var:N> = <var:K> \land <var:L> = <nat:2> \times <var:K> ^ <nat:2> + <nat:3> \times <var:K> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:2> ; <var:L> := <nat:3> + <var:L> * <var:N> ; <var:L> := <nat:2> + <var:L> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:N> = <var:K> }} <def:poly> {{ <var:L> = <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:L> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:L> = <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:K> /\ <var:L> = <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 