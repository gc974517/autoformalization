\begin{document} \begin{theorem} We define the following list of commands such that \begin{verbatim} <var:o1> := <var:p> ; <var:o2> := <var:o1> * <var:p> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:9> ; <var:o2> := <var:o2> * <nat:3> ; <var:Q> := <var:o2> <var:Q> := <var:Q> + <var:o1> <var:Q> := <var:Q> + <var:o0> \end{verbatim} Assume it to hold that $ <var:p> = <var:i> $ ( assuming some positive integer coefficients $ <var:i> $ ) before executing this list of commands , it must be that we have $ <var:Q> = <nat:3> \times <var:i> ^ <nat:2> + <nat:9> \times <var:i> + <nat:7> $ once set of instructions executes . \end{theorem} \begin{proof} Utilizing standard Hoare techniques gives : \begin{eqnarray} \{ <var:p> = <var:i> \} \\ <var:o1> := <var:p> ; \\ \{ <var:p> = <var:i> \land <var:o1> = <var:i> \} \\ <var:o2> := <var:o1> * <var:p> ; \\ \{ <var:p> = <var:i> \land <var:o1> = <var:i> \land <var:o2> = <var:i> ^ <nat:2> \} \\ <var:o0> := <nat:7> ; \\ \{ <var:p> = <var:i> \land <var:o1> = <var:i> \land <var:o2> = <var:i> ^ <nat:2> \land <var:o0> = <nat:7> \} \\ <var:o1> := <var:o1> * <nat:9> ; \\ \{ <var:p> = <var:i> \land <var:o1> = <nat:9> * <var:i> \land <var:o2> = <var:i> ^ <nat:2> \land <var:o0> = <nat:7> \} \\ <var:o2> := <var:o2> * <nat:3> ; \\ \{ <var:p> = <var:i> \land <var:o1> = <nat:9> * <var:i> \land <var:o2> = <nat:3> * <var:i> ^ <nat:2> \land <var:o0> = <nat:7> \} \\ <var:Q> := <var:o2> \\ \{ <var:p> = <var:i> \land <var:o1> = <nat:9> * <var:i> \land <var:o0> = <nat:7> \land <var:Q> = <nat:3> * <var:i> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:o1> \\ \{ <var:p> = <var:i> \land <var:o0> = <nat:7> \land <var:Q> = <nat:3> * <var:i> ^ <nat:2> + <nat:9> * <var:i> \} \\ <var:Q> := <var:Q> + <var:o0> \\ \{ <var:p> = <var:i> \land <var:Q> = <nat:3> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:7> \} \end{eqnarray} Thusly , this list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:p> = <var:i> }} <var:o1> := <var:p> ; <var:o2> := <var:o1> * <var:p> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:9> ; <var:o2> := <var:o2> * <nat:3> ; <var:Q> := <var:o2> <var:Q> := <var:Q> + <var:o1> <var:Q> := <var:Q> + <var:o0> {{ <var:Q> = <nat:3> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:o1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:o1> = <var:i> /\ <var:o2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:o1> = <var:i> /\ <var:o2> = <var:i> ^ <nat:2> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:o1> = <nat:9> * <var:i> /\ <var:o2> = <var:i> ^ <nat:2> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:o1> = <nat:9> * <var:i> /\ <var:o2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:o1> = <nat:9> * <var:i> /\ <var:o0> = <nat:7> /\ <var:Q> = <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:o0> = <nat:7> /\ <var:Q> = <nat:3> * <var:i> ^ <nat:2> + <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:Q> = <nat:3> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 