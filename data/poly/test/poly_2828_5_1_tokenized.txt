\begin{document} \begin{theorem} Define the following program in \emph{Imp} as follows \begin{verbatim} <var:M1> := <var:E> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:3> ; <var:V> := <var:M1> <var:V> := <var:V> + <var:M0> \end{verbatim} Assuming --- with some $ <var:H> \in \mathbb{Z}^+ $ --- it to hold that $ <var:E> = <var:H> $ before the evaluation of the list of instructions , then we have $ <var:V> = <nat:3> \times <var:H> + <nat:2> $ once segment of code has exited . \end{theorem} \begin{proof} Applying usual Hoare logic gives us : \begin{eqnarray} \{ <var:E> = <var:H> \} \\ <var:M1> := <var:E> ; \\ \{ <var:E> = <var:H> \land <var:M1> = <var:H> \} \\ <var:M0> := <nat:2> ; \\ \{ <var:E> = <var:H> \land <var:M1> = <var:H> \land <var:M0> = <nat:2> \} \\ <var:M1> := <var:M1> * <nat:3> ; \\ \{ <var:E> = <var:H> \land <var:M1> = <nat:3> \cdot <var:H> \land <var:M0> = <nat:2> \} \\ <var:V> := <var:M1> \\ \{ <var:E> = <var:H> \land <var:M0> = <nat:2> \land <var:V> = <nat:3> \cdot <var:H> \} \\ <var:V> := <var:V> + <var:M0> \\ \{ <var:E> = <var:H> \land <var:V> = <nat:3> \cdot <var:H> + <nat:2> \} \end{eqnarray} Thusly , our code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:E> = <var:H> }} <var:M1> := <var:E> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:3> ; <var:V> := <var:M1> <var:V> := <var:V> + <var:M0> {{ <var:V> = <nat:3> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:M1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:M1> = <var:H> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:M1> = <nat:3> * <var:H> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:M0> = <nat:2> /\ <var:V> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:H> /\ <var:V> = <nat:3> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 