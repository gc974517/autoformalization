\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:o1> := <var:Q> ; <var:o2> := <var:o1> * <var:Q> ; <var:o0> := <nat:5> ; <var:o1> := <var:o1> * <nat:3> ; <var:o2> := <var:o2> * <nat:2> ; <var:d> := <var:o2> <var:d> := <var:d> + <var:o1> <var:d> := <var:d> + <var:o0> \end{verbatim} Assume that $ <var:Q> = <var:q> $ before executing this set of commands , it must be that $ <var:d> = <nat:2> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> + <nat:5> $ after program executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:q> \} \\ <var:o1> := <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:o1> = <var:q> \} \\ <var:o2> := <var:o1> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:o1> = <var:q> \land <var:o2> = <var:q> ^ <nat:2> \} \\ <var:o0> := <nat:5> ; \\ \{ <var:Q> = <var:q> \land <var:o1> = <var:q> \land <var:o2> = <var:q> ^ <nat:2> \land <var:o0> = <nat:5> \} \\ <var:o1> := <var:o1> * <nat:3> ; \\ \{ <var:Q> = <var:q> \land <var:o1> = <nat:3> * <var:q> \land <var:o2> = <var:q> ^ <nat:2> \land <var:o0> = <nat:5> \} \\ <var:o2> := <var:o2> * <nat:2> ; \\ \{ <var:Q> = <var:q> \land <var:o1> = <nat:3> * <var:q> \land <var:o2> = <nat:2> * <var:q> ^ <nat:2> \land <var:o0> = <nat:5> \} \\ <var:d> := <var:o2> \\ \{ <var:Q> = <var:q> \land <var:o1> = <nat:3> * <var:q> \land <var:o0> = <nat:5> \land <var:d> = <nat:2> * <var:q> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:o1> \\ \{ <var:Q> = <var:q> \land <var:o0> = <nat:5> \land <var:d> = <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> \} \\ <var:d> := <var:d> + <var:o0> \\ \{ <var:Q> = <var:q> \land <var:d> = <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:5> \} \end{eqnarray} Applying typical Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Q> = <var:q> }} <var:o1> := <var:Q> ; <var:o2> := <var:o1> * <var:Q> ; <var:o0> := <nat:5> ; <var:o1> := <var:o1> * <nat:3> ; <var:o2> := <var:o2> * <nat:2> ; <var:d> := <var:o2> <var:d> := <var:d> + <var:o1> <var:d> := <var:d> + <var:o0> {{ <var:d> = <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:o1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:o1> = <var:q> /\ <var:o2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:o1> = <var:q> /\ <var:o2> = <var:q> ^ <nat:2> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:o1> = <nat:3> * <var:q> /\ <var:o2> = <var:q> ^ <nat:2> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:o1> = <nat:3> * <var:q> /\ <var:o2> = <nat:2> * <var:q> ^ <nat:2> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:o1> = <nat:3> * <var:q> /\ <var:o0> = <nat:5> /\ <var:d> = <nat:2> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:o0> = <nat:5> /\ <var:d> = <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:d> = <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 