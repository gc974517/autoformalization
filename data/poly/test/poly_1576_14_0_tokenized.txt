\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:1> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:r> ; <var:k2> := <nat:3> ; <var:k2> := <var:k2> * <var:r> ; <var:k2> := <var:k2> * <var:r> ; <var:k3> := <nat:2> ; <var:k3> := <var:k3> * <var:r> ; <var:k3> := <var:k3> * <var:r> ; <var:k3> := <var:k3> * <var:r> ; <var:p> := <var:k3> ; <var:p> := <var:p> + <var:k2> ; <var:p> := <var:p> + <var:k1> ; <var:p> := <var:p> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> in \emph{Imp} . Allow it to be that $ <var:r> = <var:o> $ ahead of evaluating this set of instructions , then we see $ <var:p> = <nat:2> \cdot <var:o> ^ <nat:3> + <nat:3> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our list of commands is clear through usual Hoare techniques . Taking another step toward the following command contained in the code , we see the variable update statement \verb | <var:k0> := <nat:1> ; | . This code advances $ \{ <var:r> = <var:o> \} $ toward the condition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \} $ . This is known to be sound using the assignment scheme of standard Hoare techniques . Advancing , the environment update statement binding $ <nat:4> $ into $ <var:k1>$ . This line redefines the precondition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \} $ to the condition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \} $ . This is known to be sound using the assignment rule obtained from typical Hoare logic . Immediately after , the statement \verb | <var:k1> := <var:k1> * <var:r> ; | . This redefines the condition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \} $ toward $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \} $ . This is rigorously given with the assignment rule from usual Hoare reasoning . After , we see the statement \verb | <var:k2> := <nat:3> ; | . This line moves $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \} $ into the condition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \} $ . This is shown by the assignment law found in usual Hoare techniques . Moving forward , we have the code \verb | <var:k2> := <var:k2> * <var:r> ; | . This transfers the condition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \} $ as $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> \} $ . Immediately following , we see the variable assignmet code binding $ <var:k2> * <var:r> $ to $ <var:k2>$ . This moves the condition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> \} $ toward $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> ^ <nat:2> \} $ . Honing in on the proceeding step found in our series of commands , we have the code \verb | <var:k3> := <nat:2> ; | . This takes the condition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> ^ <nat:2> \} $ toward the condition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:k3> = <nat:2> \} $ . Following , we have the assignment command \verb | <var:k3> := <var:k3> * <var:r> ; | . This advances the condition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:k3> = <nat:2> \} $ toward $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:o> \} $ . Observing the upcoming statement seen in our list of commands , we have the binding code \verb | <var:k3> := <var:k3> * <var:r> ; | . This transfers the condition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:o> \} $ as the postcondition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:o> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment rule given by usual Hoare techniques . Immediately after , we see the line \verb | <var:k3> := <var:k3> * <var:r> ; | . This line redefines the condition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:o> ^ <nat:2> \} $ as the postcondition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:o> ^ <nat:3> \} $ . Observing the following command contained in the segment of code , we have the variable update command \verb | <var:p> := <var:k3> ; | . This moves the condition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:o> ^ <nat:3> \} $ into $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:p> = <nat:2> \times <var:o> ^ <nat:3> \} $ . This is rigorously given by the assignment law found in standard Hoare reasoning . Moving on to the subsequent line of code seen in the list of commands , we have the variable binding code \verb | <var:p> := <var:p> + <var:k2> ; | . This transfers $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:k2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:p> = <nat:2> \times <var:o> ^ <nat:3> \} $ as $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:p> = <nat:2> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> \} $ . Moving forward to the next line of code seen in our program , we see the assignment command \verb | <var:p> := <var:p> + <var:k1> ; | . This line takes the precondition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:k1> = <nat:4> \times <var:o> \land <var:p> = <nat:2> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> \} $ to the postcondition $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:p> = <nat:2> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:4> \times <var:o> \} $ . This is sound by the assignment inference rule defined in standard Hoare reasoning . Considering the next step in our set of commands , we see the variable binding code \verb | <var:p> := <var:p> + <var:k0> | . This advances $ \{ <var:r> = <var:o> \land <var:k0> = <nat:1> \land <var:p> = <nat:2> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:4> \times <var:o> \} $ toward the condition $ \{ <var:r> = <var:o> \land <var:p> = <nat:2> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:4> \times <var:o> + <nat:1> \} $ . This is guaranteed through the assignment rule in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k0> := <nat:1> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:r> ; <var:k2> := <nat:3> ; <var:k2> := <var:k2> * <var:r> ; <var:k2> := <var:k2> * <var:r> ; <var:k3> := <nat:2> ; <var:k3> := <var:k3> * <var:r> ; <var:k3> := <var:k3> * <var:r> ; <var:k3> := <var:k3> * <var:r> ; <var:p> := <var:k3> ; <var:p> := <var:p> + <var:k2> ; <var:p> := <var:p> + <var:k1> ; <var:p> := <var:p> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:r> = <var:o> }} <def:poly> {{ <var:p> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:4> * <var:o> /\ <var:k2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:4> * <var:o> /\ <var:k2> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:4> * <var:o> /\ <var:k2> = <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:4> * <var:o> /\ <var:k2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:k3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:4> * <var:o> /\ <var:k2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:k3> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:4> * <var:o> /\ <var:k2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:k3> = <nat:2> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:4> * <var:o> /\ <var:k2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:k3> = <nat:2> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:4> * <var:o> /\ <var:k2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:p> = <nat:2> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:k0> = <nat:1> /\ <var:k1> = <nat:4> * <var:o> /\ <var:p> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:k0> = <nat:1> /\ <var:p> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:o> /\ <var:p> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 