\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:N1> := <var:Z> ; <var:N2> := <var:N1> * <var:Z> ; <var:N3> := <var:N2> * <var:Z> ; <var:N4> := <var:N3> * <var:Z> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:4> ; <var:N2> := <var:N2> * <nat:6> ; <var:N3> := <var:N3> * <nat:3> ; <var:N4> := <var:N4> * <nat:7> ; <var:O> := <var:N4> <var:O> := <var:O> + <var:N3> <var:O> := <var:O> + <var:N2> <var:O> := <var:O> + <var:N1> <var:O> := <var:O> + <var:N0> \end{verbatim} Assume it to be that $ <var:Z> = <var:J> $ ahead of the evaluation of our code it holds that we have $ <var:O> = <nat:7> \times <var:J> ^ <nat:4> + <nat:3> \times <var:J> ^ <nat:3> + <nat:6> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:4> $ . \end{theorem} \begin{proof} Using typical Hoare techniques returns : \begin{eqnarray} \{ <var:Z> = <var:J> \} \\ <var:N1> := <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:N1> = <var:J> \} \\ <var:N2> := <var:N1> * <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:N1> = <var:J> \land <var:N2> = <var:J> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:N1> = <var:J> \land <var:N2> = <var:J> ^ <nat:2> \land <var:N3> = <var:J> ^ <nat:3> \} \\ <var:N4> := <var:N3> * <var:Z> ; \\ \{ <var:Z> = <var:J> \land <var:N1> = <var:J> \land <var:N2> = <var:J> ^ <nat:2> \land <var:N3> = <var:J> ^ <nat:3> \land <var:N4> = <var:J> ^ <nat:4> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:Z> = <var:J> \land <var:N1> = <var:J> \land <var:N2> = <var:J> ^ <nat:2> \land <var:N3> = <var:J> ^ <nat:3> \land <var:N4> = <var:J> ^ <nat:4> \land <var:N0> = <nat:4> \} \\ <var:N1> := <var:N1> * <nat:4> ; \\ \{ <var:Z> = <var:J> \land <var:N1> = <nat:4> \times <var:J> \land <var:N2> = <var:J> ^ <nat:2> \land <var:N3> = <var:J> ^ <nat:3> \land <var:N4> = <var:J> ^ <nat:4> \land <var:N0> = <nat:4> \} \\ <var:N2> := <var:N2> * <nat:6> ; \\ \{ <var:Z> = <var:J> \land <var:N1> = <nat:4> \times <var:J> \land <var:N2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:N3> = <var:J> ^ <nat:3> \land <var:N4> = <var:J> ^ <nat:4> \land <var:N0> = <nat:4> \} \\ <var:N3> := <var:N3> * <nat:3> ; \\ \{ <var:Z> = <var:J> \land <var:N1> = <nat:4> \times <var:J> \land <var:N2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:N3> = <nat:3> \times <var:J> ^ <nat:3> \land <var:N4> = <var:J> ^ <nat:4> \land <var:N0> = <nat:4> \} \\ <var:N4> := <var:N4> * <nat:7> ; \\ \{ <var:Z> = <var:J> \land <var:N1> = <nat:4> \times <var:J> \land <var:N2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:N3> = <nat:3> \times <var:J> ^ <nat:3> \land <var:N4> = <nat:7> \times <var:J> ^ <nat:4> \land <var:N0> = <nat:4> \} \\ <var:O> := <var:N4> \\ \{ <var:Z> = <var:J> \land <var:N1> = <nat:4> \times <var:J> \land <var:N2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:N3> = <nat:3> \times <var:J> ^ <nat:3> \land <var:N0> = <nat:4> \land <var:O> = <nat:7> \times <var:J> ^ <nat:4> \} \\ <var:O> := <var:O> + <var:N3> \\ \{ <var:Z> = <var:J> \land <var:N1> = <nat:4> \times <var:J> \land <var:N2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:N0> = <nat:4> \land <var:O> = <nat:7> \times <var:J> ^ <nat:4> + <nat:3> \times <var:J> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:N2> \\ \{ <var:Z> = <var:J> \land <var:N1> = <nat:4> \times <var:J> \land <var:N0> = <nat:4> \land <var:O> = <nat:7> \times <var:J> ^ <nat:4> + <nat:3> \times <var:J> ^ <nat:3> + <nat:6> \times <var:J> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:N1> \\ \{ <var:Z> = <var:J> \land <var:N0> = <nat:4> \land <var:O> = <nat:7> \times <var:J> ^ <nat:4> + <nat:3> \times <var:J> ^ <nat:3> + <nat:6> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> \} \\ <var:O> := <var:O> + <var:N0> \\ \{ <var:Z> = <var:J> \land <var:O> = <nat:7> \times <var:J> ^ <nat:4> + <nat:3> \times <var:J> ^ <nat:3> + <nat:6> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:4> \} \end{eqnarray} Therefore , this code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <var:N4> : string := " <var:N4> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Z> = <var:J> }} <var:N1> := <var:Z> ; <var:N2> := <var:N1> * <var:Z> ; <var:N3> := <var:N2> * <var:Z> ; <var:N4> := <var:N3> * <var:Z> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:4> ; <var:N2> := <var:N2> * <nat:6> ; <var:N3> := <var:N3> * <nat:3> ; <var:N4> := <var:N4> * <nat:7> ; <var:O> := <var:N4> <var:O> := <var:O> + <var:N3> <var:O> := <var:O> + <var:N2> <var:O> := <var:O> + <var:N1> <var:O> := <var:O> + <var:N0> {{ <var:O> = <nat:7> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:N1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:N1> = <var:J> /\ <var:N2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:N1> = <var:J> /\ <var:N2> = <var:J> ^ <nat:2> /\ <var:N3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:N1> = <var:J> /\ <var:N2> = <var:J> ^ <nat:2> /\ <var:N3> = <var:J> ^ <nat:3> /\ <var:N4> = <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:N1> = <var:J> /\ <var:N2> = <var:J> ^ <nat:2> /\ <var:N3> = <var:J> ^ <nat:3> /\ <var:N4> = <var:J> ^ <nat:4> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:N1> = <nat:4> * <var:J> /\ <var:N2> = <var:J> ^ <nat:2> /\ <var:N3> = <var:J> ^ <nat:3> /\ <var:N4> = <var:J> ^ <nat:4> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:N1> = <nat:4> * <var:J> /\ <var:N2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:N3> = <var:J> ^ <nat:3> /\ <var:N4> = <var:J> ^ <nat:4> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:N1> = <nat:4> * <var:J> /\ <var:N2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:N3> = <nat:3> * <var:J> ^ <nat:3> /\ <var:N4> = <var:J> ^ <nat:4> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:N1> = <nat:4> * <var:J> /\ <var:N2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:N3> = <nat:3> * <var:J> ^ <nat:3> /\ <var:N4> = <nat:7> * <var:J> ^ <nat:4> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:N1> = <nat:4> * <var:J> /\ <var:N2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:N3> = <nat:3> * <var:J> ^ <nat:3> /\ <var:N0> = <nat:4> /\ <var:O> = <nat:7> * <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:N1> = <nat:4> * <var:J> /\ <var:N2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:N0> = <nat:4> /\ <var:O> = <nat:7> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:N1> = <nat:4> * <var:J> /\ <var:N0> = <nat:4> /\ <var:O> = <nat:7> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:N0> = <nat:4> /\ <var:O> = <nat:7> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:J> /\ <var:O> = <nat:7> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 