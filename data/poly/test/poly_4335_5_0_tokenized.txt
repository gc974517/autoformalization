\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:2> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:B> ; <var:A> := <var:J1> ; <var:A> := <var:A> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Allow , for any positive coefficients $ <var:V> $ , that $ <var:B> = <var:V> $ prior to evaluating our set of commands , it follows that we see $ <var:A> = <nat:4> \times <var:V> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the code segment is demonstrated by standard Hoare logic . Moving on to the subsequent lines of codeseen in our set of commands , we see \verb | { <var:B> = <var:V> } <var:J0> := <nat:2> { <var:B> = <var:V> \land <var:J0> = <nat:2> } | , \verb | { <var:B> = <var:V> \land <var:J0> = <nat:2> } <var:J1> := <nat:4> { <var:B> = <var:V> \land <var:J0> = <nat:2> \land <var:J1> = <nat:4> } | and \verb | { <var:B> = <var:V> \land <var:J0> = <nat:2> \land <var:J1> = <nat:4> } <var:J1> := <var:J1> * <var:B> { <var:B> = <var:V> \land <var:J0> = <nat:2> \land <var:J1> = <nat:4> * <var:V> } | . Stepping through , we see \verb | { <var:B> = <var:V> } <var:J0> := <nat:2> { <var:B> = <var:V> \land <var:J0> = <nat:2> } | and \verb | { <var:B> = <var:V> \land <var:J0> = <nat:2> } <var:J1> := <nat:4> { <var:B> = <var:V> \land <var:J0> = <nat:2> \land <var:J1> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <def:poly> := <var:J0> := <nat:2> ; <var:J1> := <nat:4> ; <var:J1> := <var:J1> * <var:B> ; <var:A> := <var:J1> ; <var:A> := <var:A> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:B> = <var:V> }} <def:poly> {{ <var:A> = <nat:4> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:J0> = <nat:2> /\ <var:J1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:J0> = <nat:2> /\ <var:J1> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:J0> = <nat:2> /\ <var:A> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:V> /\ <var:A> = <nat:4> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 