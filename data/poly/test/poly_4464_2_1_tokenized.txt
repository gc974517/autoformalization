\begin{document} \begin{theorem} Define the following code in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:7> ; <var:T> := <var:e0> \end{verbatim} Given it to be that $ <var:E> = <var:M> $ ahead of the evaluation of the list of commands it must be that we have $ <var:T> = <nat:7> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic results in : \begin{eqnarray} \{ <var:E> = <var:M> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:E> = <var:M> \land <var:e0> = <nat:7> \} \\ <var:T> := <var:e0> \\ \{ <var:E> = <var:M> \land <var:T> = <nat:7> \} \end{eqnarray} Given the above , this list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:E> = <var:M> }} <var:e0> := <nat:7> ; <var:T> := <var:e0> {{ <var:T> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:M> /\ <var:T> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 