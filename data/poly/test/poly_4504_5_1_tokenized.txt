\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} as \begin{verbatim} <var:E1> := <var:T> ; <var:E0> := <nat:5> ; <var:E1> := <var:E1> * <nat:6> ; <var:d> := <var:E1> <var:d> := <var:d> + <var:E0> \end{verbatim} Allowing given every $ <var:j> \in \mathbb{Z}^+ $ that $ <var:T> = <var:j> $ before running our program it follows that we have $ <var:d> = <nat:6> \times <var:j> + <nat:5> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code is done through Hoare logic . Taking another step toward the proceeding line of code found in the list of instructions , we see the assignment code letting $ <var:T> $ to $ <var:E1>$ . This line advances the precondition $ \{ <var:T> = <var:j> \} $ to the condition $ \{ <var:T> = <var:j> \land <var:E1> = <var:j> \} $ . This is given through the assignment law from Hoare logic . Next , the variable binding code \verb | <var:E0> := <nat:5> ; | . This redefines $ \{ <var:T> = <var:j> \land <var:E1> = <var:j> \} $ into the condition $ \{ <var:T> = <var:j> \land <var:E1> = <var:j> \land <var:E0> = <nat:5> \} $ . Stepping forward , we have the variable update line \verb | <var:E1> := <var:E1> * <nat:6> ; | . This redefines the precondition $ \{ <var:T> = <var:j> \land <var:E1> = <var:j> \land <var:E0> = <nat:5> \} $ into the postcondition $ \{ <var:T> = <var:j> \land <var:E1> = <nat:6> * <var:j> \land <var:E0> = <nat:5> \} $ . This is deduced using the assignment rule in typical Hoare techniques . Looking at the following bit of code contained in our program , the assignment command \verb | <var:d> := <var:E1> | . This command advances the precondition $ \{ <var:T> = <var:j> \land <var:E1> = <nat:6> * <var:j> \land <var:E0> = <nat:5> \} $ as the condition $ \{ <var:T> = <var:j> \land <var:E0> = <nat:5> \land <var:d> = <nat:6> * <var:j> \} $ . Keeping momentum , we have the binding line \verb | <var:d> := <var:d> + <var:E0> | . This transfers $ \{ <var:T> = <var:j> \land <var:E0> = <nat:5> \land <var:d> = <nat:6> * <var:j> \} $ as the postcondition $ \{ <var:T> = <var:j> \land <var:d> = <nat:6> * <var:j> + <nat:5> \} $ . This is deduced through the assignment law obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:T> = <var:j> }} <var:E1> := <var:T> ; <var:E0> := <nat:5> ; <var:E1> := <var:E1> * <nat:6> ; <var:d> := <var:E1> <var:d> := <var:d> + <var:E0> {{ <var:d> = <nat:6> * <var:j> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:E1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:E1> = <var:j> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:E1> = <nat:6> * <var:j> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:E0> = <nat:5> /\ <var:d> = <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:j> /\ <var:d> = <nat:6> * <var:j> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 