\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:4> ; <var:u1> := <nat:3> ; <var:u1> := <var:u1> * <var:W> ; <var:G> := <var:u1> ; <var:G> := <var:G> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Assuming that we have $ <var:W> = <var:B> $ for all positive numbers $ <var:B> $ prior to running this program then we see $ <var:G> = <nat:3> * <var:B> + <nat:4> $ after list of instructions finishes . \end{theorem} \begin{proof} The argument for this list of commands can be demonstrated through typical Hoare logic . Taking a look at the next line in our series of instructions , the variable binding command \verb | <var:u0> := <nat:4> ; | . This command transfers $ \{ <var:W> = <var:B> \} $ toward the postcondition $ \{ <var:W> = <var:B> \land <var:u0> = <nat:4> \} $ . Taking a look at the next line in the list of instructions , the variable update command defining $ <nat:3> $ toward $ <var:u1>$ . This moves $ \{ <var:W> = <var:B> \land <var:u0> = <nat:4> \} $ to $ \{ <var:W> = <var:B> \land <var:u0> = <nat:4> \land <var:u1> = <nat:3> \} $ . This is shown to be logically sound using the assignment rule from Hoare reasoning . Next , we see the variable binding code letting $ <var:u1> * <var:W> $ into $ <var:u1>$ . This redefines the condition $ \{ <var:W> = <var:B> \land <var:u0> = <nat:4> \land <var:u1> = <nat:3> \} $ toward $ \{ <var:W> = <var:B> \land <var:u0> = <nat:4> \land <var:u1> = <nat:3> * <var:B> \} $ . This is shown through the assignment rule defined in typical Hoare logic . Going to the next step , we see the environment update code assigning $ <var:u1> $ into $ <var:G>$ . This statement forwards $ \{ <var:W> = <var:B> \land <var:u0> = <nat:4> \land <var:u1> = <nat:3> * <var:B> \} $ into the condition $ \{ <var:W> = <var:B> \land <var:u0> = <nat:4> \land <var:G> = <nat:3> * <var:B> \} $ . This is shown to be logically sound through the assignment rule from usual Hoare logic . Going forward , we see the variable assignmet command assigning $ <var:G> + <var:u0$ to $ <var:G>$ . This transfers the condition $ \{ <var:W> = <var:B> \land <var:u0> = <nat:4> \land <var:G> = <nat:3> * <var:B> \} $ as $ \{ <var:W> = <var:B> \land <var:G> = <nat:3> * <var:B> + <nat:4> \} $ . This is shown using the assignment law defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <def:poly> := <var:u0> := <nat:4> ; <var:u1> := <nat:3> ; <var:u1> := <var:u1> * <var:W> ; <var:G> := <var:u1> ; <var:G> := <var:G> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:W> = <var:B> }} <def:poly> {{ <var:G> = <nat:3> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:u0> = <nat:4> /\ <var:u1> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:u0> = <nat:4> /\ <var:G> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:B> /\ <var:G> = <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 