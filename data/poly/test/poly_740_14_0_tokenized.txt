\begin{document} \begin{theorem} We define a code segment such that \begin{verbatim} <var:x0> := <nat:1> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:J> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:J> ; <var:x2> := <var:x2> * <var:J> ; <var:x3> := <nat:2> ; <var:x3> := <var:x3> * <var:J> ; <var:x3> := <var:x3> * <var:J> ; <var:x3> := <var:x3> * <var:J> ; <var:g> := <var:x3> ; <var:g> := <var:g> + <var:x2> ; <var:g> := <var:g> + <var:x1> ; <var:g> := <var:g> + <var:x0> \end{verbatim} Given ( for some $ <var:z> \in \mathbb{N} $ ) $ <var:J> = <var:z> $ prior to evaluating the code , it follows that we see $ <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> $ when list of instructions is done executing . \end{theorem} \begin{proof} The course of logic for the series of instructions can be shown with typical Hoare reasoning . Advancing , we have the environment update statement assigning $ <nat:1> $ into $ <var:x0>$ . This transfers the precondition $ \{ <var:J> = <var:z> \} $ to the postcondition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \} $ . This is shown by the assignment scheme of typical Hoare reasoning . Shifting focus toward the next step contained in the segment of code , we see the binding statement assigning $ <nat:2> $ into $ <var:x1>$ . This code forwards the condition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \} $ into the postcondition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \} $ . Considering the upcoming statement seen in our set of instructions , we see the assignment code assigning $ <var:x1> * <var:J> $ into $ <var:x1>$ . This forwards the precondition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \} $ as the condition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \} $ . This is given with the assignment inference rule of standard Hoare logic . Observing the next statement seen in our series of instructions , the variable binding code \verb | <var:x2> := <nat:4> ; | . This command transfers the precondition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \} $ to $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> \} $ . This is sound using the assignment rule of Hoare techniques . Following , we have the variable assignmet line letting $ <var:x2> * <var:J> $ to $ <var:x2>$ . This advances the precondition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> \} $ into $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> \} $ . This is shown to be logically sound by the assignment inference rule defined in Hoare techniques . Stepping through , the variable update statement giving $ <var:x2> * <var:J> $ into $ <var:x2>$ . This statement advances the condition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> \} $ to the postcondition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> ^ <nat:2> \} $ . This is given with the assignment inference rule given in usual Hoare techniques . Paying attention to the upcoming line found in our set of instructions , we see the code \verb | <var:x3> := <nat:2> ; | . This command redefines the condition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> ^ <nat:2> \} $ into the postcondition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> ^ <nat:2> \land <var:x3> = <nat:2> \} $ . Advancing to the next step , the assignment command yielding $ <var:x3> * <var:J> $ to $ <var:x3>$ . This forwards the precondition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> ^ <nat:2> \land <var:x3> = <nat:2> \} $ to the postcondition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> ^ <nat:2> \land <var:x3> = <nat:2> * <var:z> \} $ . Advancing on , the variable binding statement yielding $ <var:x3> * <var:J> $ to $ <var:x3>$ . This advances $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> ^ <nat:2> \land <var:x3> = <nat:2> * <var:z> \} $ into the condition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> ^ <nat:2> \land <var:x3> = <nat:2> * <var:z> ^ <nat:2> \} $ . This is deduced through the assignment rule from usual Hoare techniques . After , we have the variable assignmet command \verb | <var:x3> := <var:x3> * <var:J> ; | . This command moves the condition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> ^ <nat:2> \land <var:x3> = <nat:2> * <var:z> ^ <nat:2> \} $ as the postcondition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> ^ <nat:2> \land <var:x3> = <nat:2> * <var:z> ^ <nat:3> \} $ . Going to the next step , we see the variable update statement \verb | <var:g> := <var:x3> ; | . This forwards $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> ^ <nat:2> \land <var:x3> = <nat:2> * <var:z> ^ <nat:3> \} $ to $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> ^ <nat:2> \land <var:g> = <nat:2> * <var:z> ^ <nat:3> \} $ . Moving forward to the proceeding piece of code found in the list of commands , the variable binding statement yielding $ <var:g> + <var:x2> $ to $ <var:g>$ . This moves $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:x2> = <nat:4> * <var:z> ^ <nat:2> \land <var:g> = <nat:2> * <var:z> ^ <nat:3> \} $ toward the postcondition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> \} $ . Advancing on , we have the environment update code yielding $ <var:g> + <var:x1> $ as $ <var:g>$ . This code redefines the condition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> * <var:z> \land <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> \} $ toward $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> \} $ . This is shown to be logically sound using the assignment law obtained from standard Hoare reasoning . Moving forward to the next step , we see the variable assignmet statement letting $ <var:g> + <var:x0$ toward $ <var:g>$ . This takes the condition $ \{ <var:J> = <var:z> \land <var:x0> = <nat:1> \land <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> \} $ to the condition $ \{ <var:J> = <var:z> \land <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:J> = <var:z> }} <var:x0> := <nat:1> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:J> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:J> ; <var:x2> := <var:x2> * <var:J> ; <var:x3> := <nat:2> ; <var:x3> := <var:x3> * <var:J> ; <var:x3> := <var:x3> * <var:J> ; <var:x3> := <var:x3> * <var:J> ; <var:g> := <var:x3> ; <var:g> := <var:g> + <var:x2> ; <var:g> := <var:g> + <var:x1> ; <var:g> := <var:g> + <var:x0> {{ <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> /\ <var:x2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> /\ <var:x2> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> /\ <var:x2> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> /\ <var:x2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:x3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> /\ <var:x2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:x3> = <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> /\ <var:x2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:x3> = <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> /\ <var:x2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:x3> = <nat:2> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> /\ <var:x2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:g> = <nat:2> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:z> /\ <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:x0> = <nat:1> /\ <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:z> /\ <var:g> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 