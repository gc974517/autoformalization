\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h1> := <var:d> ; <var:h2> := <var:h1> * <var:d> ; <var:h3> := <var:h2> * <var:d> ; <var:h0> := <nat:4> ; <var:h2> := <var:h2> * <nat:2> ; <var:h3> := <var:h3> * <nat:8> ; <var:Q> := <var:h3> <var:Q> := <var:Q> + <var:h2> <var:Q> := <var:Q> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> . Given ( given every integers $ <var:H> $ ) that we have $ <var:d> = <var:H> $ ahead of executing our set of commands it holds that $ <var:Q> = <nat:8> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques produces : \begin{eqnarray} \{ <var:d> = <var:H> \} \\ <var:h1> := <var:d> ; \\ \{ <var:d> = <var:H> \land <var:h1> = <var:H> \} \\ <var:h2> := <var:h1> * <var:d> ; \\ \{ <var:d> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <var:H> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:d> ; \\ \{ <var:d> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \} \\ <var:h0> := <nat:4> ; \\ \{ <var:d> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h0> = <nat:4> \} \end{eqnarray} Continuing evaluating the code segment gives us : \begin{eqnarray} <var:h2> := <var:h2> * <nat:2> ; \\ \{ <var:d> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <nat:2> \times <var:H> ^ <nat:2> \land <var:h3> = <var:H> ^ <nat:3> \land <var:h0> = <nat:4> \} \\ <var:h3> := <var:h3> * <nat:8> ; \\ \{ <var:d> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <nat:2> \times <var:H> ^ <nat:2> \land <var:h3> = <nat:8> \times <var:H> ^ <nat:3> \land <var:h0> = <nat:4> \} \\ <var:Q> := <var:h3> \\ \{ <var:d> = <var:H> \land <var:h1> = <var:H> \land <var:h2> = <nat:2> \times <var:H> ^ <nat:2> \land <var:h0> = <nat:4> \land <var:Q> = <nat:8> \times <var:H> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:h2> \\ \{ <var:d> = <var:H> \land <var:h1> = <var:H> \land <var:h0> = <nat:4> \land <var:Q> = <nat:8> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:h0> \\ \{ <var:d> = <var:H> \land <var:Q> = <nat:8> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:4> \} \end{eqnarray} As a consequence , our set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:d> ; <var:h2> := <var:h1> * <var:d> ; <var:h3> := <var:h2> * <var:d> ; <var:h0> := <nat:4> ; <var:h2> := <var:h2> * <nat:2> ; <var:h3> := <var:h3> * <nat:8> ; <var:Q> := <var:h3> <var:Q> := <var:Q> + <var:h2> <var:Q> := <var:Q> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:d> = <var:H> }} <def:poly> {{ <var:Q> = <nat:8> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:H> /\ <var:h1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <var:H> ^ <nat:2> /\ <var:h3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <var:H> ^ <nat:2> /\ <var:h3> = <var:H> ^ <nat:3> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:h3> = <var:H> ^ <nat:3> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:h3> = <nat:8> * <var:H> ^ <nat:3> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:H> /\ <var:h1> = <var:H> /\ <var:h2> = <nat:2> * <var:H> ^ <nat:2> /\ <var:h0> = <nat:4> /\ <var:Q> = <nat:8> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:H> /\ <var:h1> = <var:H> /\ <var:h0> = <nat:4> /\ <var:Q> = <nat:8> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:H> /\ <var:Q> = <nat:8> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 