\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T1> := <var:O> ; <var:T2> := <var:T1> * <var:O> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:1> ; <var:T2> := <var:T2> * <nat:4> ; <var:G> := <var:T2> <var:G> := <var:G> + <var:T1> <var:G> := <var:G> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:O> = <var:b> $ prior to interpreting the list of instructions it must be that $ <var:G> = <nat:4> \times <var:b> ^ <nat:2> + <nat:1> \times <var:b> + <nat:1> $ after list of commands has executed . \end{theorem} \begin{proof} The proof of our set of commands can be shown through usual Hoare reasoning . Paying attention to the following lines found in our program , we see \begin{eqnarray} \{ <var:O> = <var:b> \} \, <var:T1> := <var:O> \, \{ <var:O> = <var:b> \land <var:T1> = <var:b> \} \\ \{ <var:O> = <var:b> \land <var:T1> = <var:b> \} \, <var:T2> := <var:T1> * <var:O> \, \{ <var:O> = <var:b> \land <var:T1> = <var:b> \land <var:T2> = <var:b> ^ <nat:2> \} \\ \{ <var:O> = <var:b> \land <var:T1> = <var:b> \land <var:T2> = <var:b> ^ <nat:2> \} \, <var:T0> := <nat:1> \, \{ <var:O> = <var:b> \land <var:T1> = <var:b> \land <var:T2> = <var:b> ^ <nat:2> \land <var:T0> = <nat:1> \} \end{eqnarray} This is given using the variable binding rule given by Hoare logic . Moving forward to the next step , \begin{eqnarray} \{ <var:O> = <var:b> \} \, <var:T1> := <var:O> \, \{ <var:O> = <var:b> \land <var:T1> = <var:b> \} \\ \{ <var:O> = <var:b> \land <var:T1> = <var:b> \} \, <var:T2> := <var:T1> * <var:O> \, \{ <var:O> = <var:b> \land <var:T1> = <var:b> \land <var:T2> = <var:b> ^ <nat:2> \} \\ \{ <var:O> = <var:b> \land <var:T1> = <var:b> \land <var:T2> = <var:b> ^ <nat:2> \} \, <var:T0> := <nat:1> \, \{ <var:O> = <var:b> \land <var:T1> = <var:b> \land <var:T2> = <var:b> ^ <nat:2> \land <var:T0> = <nat:1> \} \\ \{ <var:O> = <var:b> \land <var:T1> = <var:b> \land <var:T2> = <var:b> ^ <nat:2> \land <var:T0> = <nat:1> \} \, <var:T1> := <var:T1> * <nat:1> \, \{ <var:O> = <var:b> \land <var:T1> = <nat:1> \cdot <var:b> \land <var:T2> = <var:b> ^ <nat:2> \land <var:T0> = <nat:1> \} \end{eqnarray} This is deduced with the variable assignmet scheme in typical Hoare techniques . Considering the subsequent bit of code in our list of instructions , we see \begin{eqnarray} \{ <var:O> = <var:b> \} \, <var:T1> := <var:O> \, \{ <var:O> = <var:b> \land <var:T1> = <var:b> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T1> := <var:O> ; <var:T2> := <var:T1> * <var:O> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:1> ; <var:T2> := <var:T2> * <nat:4> ; <var:G> := <var:T2> <var:G> := <var:G> + <var:T1> <var:G> := <var:G> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:O> = <var:b> }} <def:poly> {{ <var:G> = <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:T1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:T1> = <var:b> /\ <var:T2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:T1> = <var:b> /\ <var:T2> = <var:b> ^ <nat:2> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:T1> = <nat:1> * <var:b> /\ <var:T2> = <var:b> ^ <nat:2> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:T1> = <nat:1> * <var:b> /\ <var:T2> = <nat:4> * <var:b> ^ <nat:2> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:T1> = <nat:1> * <var:b> /\ <var:T0> = <nat:1> /\ <var:G> = <nat:4> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:T0> = <nat:1> /\ <var:G> = <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:G> = <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 