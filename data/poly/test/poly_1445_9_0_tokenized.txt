\begin{document} \begin{theorem} Define the following segment of code as follows \begin{verbatim} <var:M0> := <nat:3> ; <var:M1> := <nat:5> ; <var:M1> := <var:M1> * <var:T> ; <var:M2> := <nat:4> ; <var:M2> := <var:M2> * <var:T> ; <var:M2> := <var:M2> * <var:T> ; <var:b> := <var:M2> ; <var:b> := <var:b> + <var:M1> ; <var:b> := <var:b> + <var:M0> \end{verbatim} Allowing that we have $ <var:T> = <var:K> $ for all positive integer coefficients $ <var:K> $ before evaluating this list of commands , then $ <var:b> = <nat:4> \cdot <var:K> ^ <nat:2> + <nat:5> \cdot <var:K> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions is evident using typical Hoare reasoning . Advancing , we see \begin{eqnarray} \{ <var:T> = <var:K> \} \, <var:M0> := <nat:3> \, \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \} \\ \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \} \, <var:M1> := <nat:5> \, \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:5> \} \\ \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:5> \} \, <var:M1> := <var:M1> * <var:T> \, \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:5> \cdot <var:K> \} \\ \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:5> \cdot <var:K> \} \, <var:M2> := <nat:4> \, \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:5> \cdot <var:K> \land <var:M2> = <nat:4> \} \\ \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:5> \cdot <var:K> \land <var:M2> = <nat:4> \} \, <var:M2> := <var:M2> * <var:T> \, \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:5> \cdot <var:K> \land <var:M2> = <nat:4> \cdot <var:K> \} \\ \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:5> \cdot <var:K> \land <var:M2> = <nat:4> \cdot <var:K> \} \, <var:M2> := <var:M2> * <var:T> \, \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:5> \cdot <var:K> \land <var:M2> = <nat:4> \cdot <var:K> ^ <nat:2> \} \\ \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:5> \cdot <var:K> \land <var:M2> = <nat:4> \cdot <var:K> ^ <nat:2> \} \, <var:b> := <var:M2> \, \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:5> \cdot <var:K> \land <var:b> = <nat:4> \cdot <var:K> ^ <nat:2> \} \\ \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \land <var:M1> = <nat:5> \cdot <var:K> \land <var:b> = <nat:4> \cdot <var:K> ^ <nat:2> \} \, <var:b> := <var:b> + <var:M1> \, \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \land <var:b> = <nat:4> \cdot <var:K> ^ <nat:2> + <nat:5> \cdot <var:K> \} \end{eqnarray} Keeping momentum , we have \begin{eqnarray} \{ <var:T> = <var:K> \} \, <var:M0> := <nat:3> \, \{ <var:T> = <var:K> \land <var:M0> = <nat:3> \} \end{eqnarray} This is guaranteed by the environment update scheme obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:T> = <var:K> }} <var:M0> := <nat:3> ; <var:M1> := <nat:5> ; <var:M1> := <var:M1> * <var:T> ; <var:M2> := <nat:4> ; <var:M2> := <var:M2> * <var:T> ; <var:M2> := <var:M2> * <var:T> ; <var:b> := <var:M2> ; <var:b> := <var:b> + <var:M1> ; <var:b> := <var:b> + <var:M0> {{ <var:b> = <nat:4> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:5> * <var:K> /\ <var:M2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:5> * <var:K> /\ <var:M2> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:5> * <var:K> /\ <var:M2> = <nat:4> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:5> * <var:K> /\ <var:b> = <nat:4> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:M0> = <nat:3> /\ <var:b> = <nat:4> * <var:K> ^ <nat:2> + <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:K> /\ <var:b> = <nat:4> * <var:K> ^ <nat:2> + <nat:5> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 