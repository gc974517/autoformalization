\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:V1> := <var:Z> ; <var:V2> := <var:V1> * <var:Z> ; <var:V0> := <nat:5> ; <var:V1> := <var:V1> * <nat:5> ; <var:V2> := <var:V2> * <nat:1> ; <var:u> := <var:V2> <var:u> := <var:u> + <var:V1> <var:u> := <var:u> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> . Assuming $ <var:Z> = <var:j> $ prior to interpreting this program then $ <var:u> = <nat:1> \cdot <var:j> ^ <nat:2> + <nat:5> \cdot <var:j> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions is done using standard Hoare techniques . Moving forward to the next step , we see the variable binding line \verb | <var:V1> := <var:Z> ; | . This redefines the condition $ \{ <var:Z> = <var:j> \} $ toward $ \{ <var:Z> = <var:j> \land <var:V1> = <var:j> \} $ . Following , we have the variable update command \verb | <var:V2> := <var:V1> * <var:Z> ; | . This moves the precondition $ \{ <var:Z> = <var:j> \land <var:V1> = <var:j> \} $ into the postcondition $ \{ <var:Z> = <var:j> \land <var:V1> = <var:j> \land <var:V2> = <var:j> ^ <nat:2> \} $ . Moving on to the next step contained in the list of instructions , the binding line \verb | <var:V0> := <nat:5> ; | . This takes the precondition $ \{ <var:Z> = <var:j> \land <var:V1> = <var:j> \land <var:V2> = <var:j> ^ <nat:2> \} $ as the condition $ \{ <var:Z> = <var:j> \land <var:V1> = <var:j> \land <var:V2> = <var:j> ^ <nat:2> \land <var:V0> = <nat:5> \} $ . Further , we see the variable binding command yielding $ <var:V1> * <nat:5> $ to $ <var:V1>$ . This statement transfers the precondition $ \{ <var:Z> = <var:j> \land <var:V1> = <var:j> \land <var:V2> = <var:j> ^ <nat:2> \land <var:V0> = <nat:5> \} $ into the postcondition $ \{ <var:Z> = <var:j> \land <var:V1> = <nat:5> \times <var:j> \land <var:V2> = <var:j> ^ <nat:2> \land <var:V0> = <nat:5> \} $ . Advancing , we have the variable binding code giving $ <var:V2> * <nat:1> $ as $ <var:V2>$ . This line redefines $ \{ <var:Z> = <var:j> \land <var:V1> = <nat:5> \times <var:j> \land <var:V2> = <var:j> ^ <nat:2> \land <var:V0> = <nat:5> \} $ to the postcondition $ \{ <var:Z> = <var:j> \land <var:V1> = <nat:5> \times <var:j> \land <var:V2> = <nat:1> \times <var:j> ^ <nat:2> \land <var:V0> = <nat:5> \} $ . Moving onward , we see the binding statement \verb | <var:u> := <var:V2> | . This command forwards the condition $ \{ <var:Z> = <var:j> \land <var:V1> = <nat:5> \times <var:j> \land <var:V2> = <nat:1> \times <var:j> ^ <nat:2> \land <var:V0> = <nat:5> \} $ as $ \{ <var:Z> = <var:j> \land <var:V1> = <nat:5> \times <var:j> \land <var:V0> = <nat:5> \land <var:u> = <nat:1> \times <var:j> ^ <nat:2> \} $ . This is shown with the assignment scheme from usual Hoare logic . Advancing to the next step , we have the variable binding line letting $ <var:u> + <var:V1$ toward $ <var:u>$ . This code transfers the condition $ \{ <var:Z> = <var:j> \land <var:V1> = <nat:5> \times <var:j> \land <var:V0> = <nat:5> \land <var:u> = <nat:1> \times <var:j> ^ <nat:2> \} $ into the postcondition $ \{ <var:Z> = <var:j> \land <var:V0> = <nat:5> \land <var:u> = <nat:1> \times <var:j> ^ <nat:2> + <nat:5> \times <var:j> \} $ . Taking a look at the proceeding statement in our program , we have the variable assignmet statement \verb | <var:u> := <var:u> + <var:V0> | . This transfers the precondition $ \{ <var:Z> = <var:j> \land <var:V0> = <nat:5> \land <var:u> = <nat:1> \times <var:j> ^ <nat:2> + <nat:5> \times <var:j> \} $ toward $ \{ <var:Z> = <var:j> \land <var:u> = <nat:1> \times <var:j> ^ <nat:2> + <nat:5> \times <var:j> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V1> := <var:Z> ; <var:V2> := <var:V1> * <var:Z> ; <var:V0> := <nat:5> ; <var:V1> := <var:V1> * <nat:5> ; <var:V2> := <var:V2> * <nat:1> ; <var:u> := <var:V2> <var:u> := <var:u> + <var:V1> <var:u> := <var:u> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:Z> = <var:j> }} <def:poly> {{ <var:u> = <nat:1> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:V1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:V1> = <var:j> /\ <var:V2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:V1> = <var:j> /\ <var:V2> = <var:j> ^ <nat:2> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:V1> = <nat:5> * <var:j> /\ <var:V2> = <var:j> ^ <nat:2> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:V1> = <nat:5> * <var:j> /\ <var:V2> = <nat:1> * <var:j> ^ <nat:2> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:V1> = <nat:5> * <var:j> /\ <var:V0> = <nat:5> /\ <var:u> = <nat:1> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:V0> = <nat:5> /\ <var:u> = <nat:1> * <var:j> ^ <nat:2> + <nat:5> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:u> = <nat:1> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 