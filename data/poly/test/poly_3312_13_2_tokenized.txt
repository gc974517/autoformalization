\begin{document} \begin{theorem} We define the following set of instructions : \begin{verbatim} <var:E> := <nat:2> ; <var:E> := <nat:4> + <var:E> * <var:d> ; <var:E> := <nat:4> + <var:E> * <var:d> ; <var:E> := <var:E> * <var:d> ; <var:E> := <nat:3> + <var:E> * <var:d> ; <var:E> := <nat:1> + <var:E> * <var:d> ; <var:E> := <nat:1> + <var:E> * <var:d> ; <var:E> := <nat:3> + <var:E> * <var:d> ; <var:E> := <nat:1> + <var:E> * <var:d> ; <var:E> := <nat:3> + <var:E> * <var:d> ; <var:E> := <nat:3> + <var:E> * <var:d> ; <var:E> := <var:E> * <var:d> ; <var:E> := <nat:3> + <var:E> * <var:d> \end{verbatim} Assuming --- taking $ <var:D> \in \mathbb{Z}^+ $ --- it to hold that $ <var:d> = <var:D> $ prior to interpreting this program it must be that we have $ <var:E> = <nat:2> * <var:D> ^ <nat:12> + <nat:4> * <var:D> ^ <nat:11> + <nat:4> * <var:D> ^ <nat:10> + <nat:3> * <var:D> ^ <nat:8> + <nat:1> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is done using Hoare logic . Looking at the subsequent commands seen in our list of commands , we see \verb | { <var:d> = <var:D> } <var:E> := <nat:2> { <var:d> = <var:D> \land <var:E> = <nat:2> } | , \verb | { <var:d> = <var:D> \land <var:E> = <nat:2> } <var:E> := <nat:4> + <var:E> * <var:d> { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> + <nat:4> } | , \verb | { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> + <nat:4> } <var:E> := <nat:4> + <var:E> * <var:d> { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:2> + <nat:4> \times <var:D> + <nat:4> } | , \verb | { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:2> + <nat:4> \times <var:D> + <nat:4> } <var:E> := <var:E> * <var:d> { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:3> + <nat:4> \times <var:D> ^ <nat:2> + <nat:4> \times <var:D> + } | , \verb | { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:3> + <nat:4> \times <var:D> ^ <nat:2> + <nat:4> \times <var:D> + } <var:E> := <nat:3> + <var:E> * <var:d> { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:4> + <nat:4> \times <var:D> ^ <nat:3> + <nat:4> \times <var:D> ^ <nat:2> + <nat:3> } | , \verb | { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:4> + <nat:4> \times <var:D> ^ <nat:3> + <nat:4> \times <var:D> ^ <nat:2> + <nat:3> } <var:E> := <nat:1> + <var:E> * <var:d> { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:5> + <nat:4> \times <var:D> ^ <nat:4> + <nat:4> \times <var:D> ^ <nat:3> + <nat:3> \times <var:D> + <nat:1> } | , \verb | { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:5> + <nat:4> \times <var:D> ^ <nat:4> + <nat:4> \times <var:D> ^ <nat:3> + <nat:3> \times <var:D> + <nat:1> } <var:E> := <nat:1> + <var:E> * <var:d> { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:6> + <nat:4> \times <var:D> ^ <nat:5> + <nat:4> \times <var:D> ^ <nat:4> + <nat:3> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:1> } | , \verb | { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:6> + <nat:4> \times <var:D> ^ <nat:5> + <nat:4> \times <var:D> ^ <nat:4> + <nat:3> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:1> } <var:E> := <nat:3> + <var:E> * <var:d> { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:7> + <nat:4> \times <var:D> ^ <nat:6> + <nat:4> \times <var:D> ^ <nat:5> + <nat:3> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:3> } | , \verb | { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:7> + <nat:4> \times <var:D> ^ <nat:6> + <nat:4> \times <var:D> ^ <nat:5> + <nat:3> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:3> } <var:E> := <nat:1> + <var:E> * <var:d> { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:8> + <nat:4> \times <var:D> ^ <nat:7> + <nat:4> \times <var:D> ^ <nat:6> + <nat:3> \times <var:D> ^ <nat:4> + <nat:1> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:3> \times <var:D> + <nat:1> } | and \verb | { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:8> + <nat:4> \times <var:D> ^ <nat:7> + <nat:4> \times <var:D> ^ <nat:6> + <nat:3> \times <var:D> ^ <nat:4> + <nat:1> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:3> \times <var:D> + <nat:1> } <var:E> := <nat:3> + <var:E> * <var:d> { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> ^ <nat:9> + <nat:4> \times <var:D> ^ <nat:8> + <nat:4> \times <var:D> ^ <nat:7> + <nat:3> \times <var:D> ^ <nat:5> + <nat:1> \times <var:D> ^ <nat:4> + <nat:1> \times <var:D> ^ <nat:3> + <nat:3> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:3> } | . This is shown by the variable update inference rule obtained from usual Hoare techniques . Going to the next step , we have \verb | { <var:d> = <var:D> } <var:E> := <nat:2> { <var:d> = <var:D> \land <var:E> = <nat:2> } | and \verb | { <var:d> = <var:D> \land <var:E> = <nat:2> } <var:E> := <nat:4> + <var:E> * <var:d> { <var:d> = <var:D> \land <var:E> = <nat:2> \times <var:D> + <nat:4> } | . This is guaranteed through the environment update law defined by Hoare logic . Taking another step toward the next piece of code seen in our code , we have \verb | { <var:d> = <var:D> } <var:E> := <nat:2> { <var:d> = <var:D> \land <var:E> = <nat:2> } | . This is known to be sound by the assignment rule given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:d> = <var:D> }} <var:E> := <nat:2> ; <var:E> := <nat:4> + <var:E> * <var:d> ; <var:E> := <nat:4> + <var:E> * <var:d> ; <var:E> := <var:E> * <var:d> ; <var:E> := <nat:3> + <var:E> * <var:d> ; <var:E> := <nat:1> + <var:E> * <var:d> ; <var:E> := <nat:1> + <var:E> * <var:d> ; <var:E> := <nat:3> + <var:E> * <var:d> ; <var:E> := <nat:1> + <var:E> * <var:d> ; <var:E> := <nat:3> + <var:E> * <var:d> ; <var:E> := <nat:3> + <var:E> * <var:d> ; <var:E> := <var:E> * <var:d> ; <var:E> := <nat:3> + <var:E> * <var:d> {{ <var:E> = <nat:2> * <var:D> ^ <nat:12> + <nat:4> * <var:D> ^ <nat:11> + <nat:4> * <var:D> ^ <nat:10> + <nat:3> * <var:D> ^ <nat:8> + <nat:1> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:E> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:E> = <nat:2> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:E> = <nat:2> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:E> = <nat:2> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:E> = <nat:2> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:E> = <nat:2> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:3> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:E> = <nat:2> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:E> = <nat:2> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:4> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:E> = <nat:2> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:7> + <nat:4> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:E> = <nat:2> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:8> + <nat:4> * <var:D> ^ <nat:7> + <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:E> = <nat:2> * <var:D> ^ <nat:10> + <nat:4> * <var:D> ^ <nat:9> + <nat:4> * <var:D> ^ <nat:8> + <nat:3> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:E> = <nat:2> * <var:D> ^ <nat:11> + <nat:4> * <var:D> ^ <nat:10> + <nat:4> * <var:D> ^ <nat:9> + <nat:3> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:D> /\ <var:E> = <nat:2> * <var:D> ^ <nat:12> + <nat:4> * <var:D> ^ <nat:11> + <nat:4> * <var:D> ^ <nat:10> + <nat:3> * <var:D> ^ <nat:8> + <nat:1> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 