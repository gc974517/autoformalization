\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:E> := <nat:3> ; <var:E> := <var:E> * <var:k> ; <var:E> := <nat:1> + <var:E> * <var:k> ; <var:E> := <var:E> * <var:k> ; <var:E> := <nat:3> + <var:E> * <var:k> ; <var:E> := <nat:4> + <var:E> * <var:k> ; <var:E> := <nat:2> + <var:E> * <var:k> ; <var:E> := <nat:3> + <var:E> * <var:k> ; <var:E> := <nat:2> + <var:E> * <var:k> ; <var:E> := <nat:2> + <var:E> * <var:k> ; <var:E> := <nat:2> + <var:E> * <var:k> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> in \emph{Imp} . Allowing that we have $ <var:k> = <var:w> $ prior to the evaluation of this segment of code it follows that we see $ <var:E> = <nat:3> \times <var:w> ^ <nat:10> + <nat:1> \times <var:w> ^ <nat:8> + <nat:3> \times <var:w> ^ <nat:6> + <nat:4> \times <var:w> ^ <nat:5> + <nat:2> \times <var:w> ^ <nat:4> + <nat:3> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:2> \times <var:w> + <nat:2> $ after code has finished . \end{theorem} \begin{proof} Applying standard Hoare techniques yields : \begin{eqnarray} \{ <var:k> = <var:w> \} \\ <var:E> := <nat:3> ; \\ \{ <var:k> = <var:w> \land <var:E> = <nat:3> \} \\ <var:E> := <var:E> * <var:k> ; \\ \{ <var:k> = <var:w> \land <var:E> = <nat:3> * <var:w> + \} \\ <var:E> := <nat:1> + <var:E> * <var:k> ; \\ \{ <var:k> = <var:w> \land <var:E> = <nat:3> * <var:w> ^ <nat:2> + <nat:1> \} \\ <var:E> := <var:E> * <var:k> ; \\ \{ <var:k> = <var:w> \land <var:E> = <nat:3> * <var:w> ^ <nat:3> + <nat:1> * <var:w> + \} \\ <var:E> := <nat:3> + <var:E> * <var:k> ; \\ \{ <var:k> = <var:w> \land <var:E> = <nat:3> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:2> + <nat:3> \} \\ <var:E> := <nat:4> + <var:E> * <var:k> ; \\ \{ <var:k> = <var:w> \land <var:E> = <nat:3> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> + <nat:4> \} \\ <var:E> := <nat:2> + <var:E> * <var:k> ; \\ \{ <var:k> = <var:w> \land <var:E> = <nat:3> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:2> \} \\ <var:E> := <nat:3> + <var:E> * <var:k> ; \\ \{ <var:k> = <var:w> \land <var:E> = <nat:3> * <var:w> ^ <nat:7> + <nat:1> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:3> \} \\ <var:E> := <nat:2> + <var:E> * <var:k> ; \\ \{ <var:k> = <var:w> \land <var:E> = <nat:3> * <var:w> ^ <nat:8> + <nat:1> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:2> \} \\ <var:E> := <nat:2> + <var:E> * <var:k> ; \\ \{ <var:k> = <var:w> \land <var:E> = <nat:3> * <var:w> ^ <nat:9> + <nat:1> * <var:w> ^ <nat:7> + <nat:3> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> \} \\ <var:E> := <nat:2> + <var:E> * <var:k> \\ \{ <var:k> = <var:w> \land <var:E> = <nat:3> * <var:w> ^ <nat:10> + <nat:1> * <var:w> ^ <nat:8> + <nat:3> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> \} \end{eqnarray} As a consequence , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:E> := <nat:3> ; <var:E> := <var:E> * <var:k> ; <var:E> := <nat:1> + <var:E> * <var:k> ; <var:E> := <var:E> * <var:k> ; <var:E> := <nat:3> + <var:E> * <var:k> ; <var:E> := <nat:4> + <var:E> * <var:k> ; <var:E> := <nat:2> + <var:E> * <var:k> ; <var:E> := <nat:3> + <var:E> * <var:k> ; <var:E> := <nat:2> + <var:E> * <var:k> ; <var:E> := <nat:2> + <var:E> * <var:k> ; <var:E> := <nat:2> + <var:E> * <var:k> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:k> = <var:w> }} <def:poly> {{ <var:E> = <nat:3> * <var:w> ^ <nat:10> + <nat:1> * <var:w> ^ <nat:8> + <nat:3> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:w> /\ <var:E> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:w> /\ <var:E> = <nat:3> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:w> /\ <var:E> = <nat:3> * <var:w> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:w> /\ <var:E> = <nat:3> * <var:w> ^ <nat:3> + <nat:1> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:w> /\ <var:E> = <nat:3> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:w> /\ <var:E> = <nat:3> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:w> /\ <var:E> = <nat:3> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:w> /\ <var:E> = <nat:3> * <var:w> ^ <nat:7> + <nat:1> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:w> /\ <var:E> = <nat:3> * <var:w> ^ <nat:8> + <nat:1> * <var:w> ^ <nat:6> + <nat:3> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:w> /\ <var:E> = <nat:3> * <var:w> ^ <nat:9> + <nat:1> * <var:w> ^ <nat:7> + <nat:3> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:w> /\ <var:E> = <nat:3> * <var:w> ^ <nat:10> + <nat:1> * <var:w> ^ <nat:8> + <nat:3> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 