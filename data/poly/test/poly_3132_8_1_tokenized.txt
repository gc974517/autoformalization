\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:y1> := <var:Y> ; <var:y2> := <var:y1> * <var:Y> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:4> ; <var:y2> := <var:y2> * <nat:1> ; <var:P> := <var:y2> <var:P> := <var:P> + <var:y1> <var:P> := <var:P> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:Y> = <var:B> $ , given some $ <var:B> \in \mathbb{Z}^+ $ , before evaluating the list of commands , then we see $ <var:P> = <nat:1> \cdot <var:B> ^ <nat:2> + <nat:4> \cdot <var:B> + <nat:8> $ after set of instructions has exited . \end{theorem} \begin{proof} The application of Hoare techniques yields : \begin{eqnarray} \{ <var:Y> = <var:B> \} \\ <var:y1> := <var:Y> ; \\ \{ <var:Y> = <var:B> \land <var:y1> = <var:B> \} \\ <var:y2> := <var:y1> * <var:Y> ; \\ \{ <var:Y> = <var:B> \land <var:y1> = <var:B> \land <var:y2> = <var:B> ^ <nat:2> \} \\ <var:y0> := <nat:8> ; \\ \{ <var:Y> = <var:B> \land <var:y1> = <var:B> \land <var:y2> = <var:B> ^ <nat:2> \land <var:y0> = <nat:8> \} \\ <var:y1> := <var:y1> * <nat:4> ; \\ \{ <var:Y> = <var:B> \land <var:y1> = <nat:4> * <var:B> \land <var:y2> = <var:B> ^ <nat:2> \land <var:y0> = <nat:8> \} \\ <var:y2> := <var:y2> * <nat:1> ; \\ \{ <var:Y> = <var:B> \land <var:y1> = <nat:4> * <var:B> \land <var:y2> = <nat:1> * <var:B> ^ <nat:2> \land <var:y0> = <nat:8> \} \\ <var:P> := <var:y2> \\ \{ <var:Y> = <var:B> \land <var:y1> = <nat:4> * <var:B> \land <var:y0> = <nat:8> \land <var:P> = <nat:1> * <var:B> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:y1> \\ \{ <var:Y> = <var:B> \land <var:y0> = <nat:8> \land <var:P> = <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> \} \\ <var:P> := <var:P> + <var:y0> \\ \{ <var:Y> = <var:B> \land <var:P> = <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:8> \} \end{eqnarray} Therefore , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <def:poly> := <var:y1> := <var:Y> ; <var:y2> := <var:y1> * <var:Y> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:4> ; <var:y2> := <var:y2> * <nat:1> ; <var:P> := <var:y2> <var:P> := <var:P> + <var:y1> <var:P> := <var:P> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:Y> = <var:B> }} <def:poly> {{ <var:P> = <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:y1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:y1> = <var:B> /\ <var:y2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:y1> = <var:B> /\ <var:y2> = <var:B> ^ <nat:2> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:y1> = <nat:4> * <var:B> /\ <var:y2> = <var:B> ^ <nat:2> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:y1> = <nat:4> * <var:B> /\ <var:y2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:y1> = <nat:4> * <var:B> /\ <var:y0> = <nat:8> /\ <var:P> = <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:y0> = <nat:8> /\ <var:P> = <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:B> /\ <var:P> = <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 