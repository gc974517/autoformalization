\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:2> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:Y> ; <var:V2> := <nat:6> ; <var:V2> := <var:V2> * <var:Y> ; <var:V2> := <var:V2> * <var:Y> ; <var:M> := <var:V2> ; <var:M> := <var:M> + <var:V1> ; <var:M> := <var:M> + <var:V0> \end{verbatim} Given it to be that $ <var:Y> = <var:E> $ prior to the evaluation of the list of commands it holds that we have $ <var:M> = <nat:6> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:2> $ once list of commands has finished executing . \end{theorem} \begin{proof} Proving correctness for this set of instructions can be accomplished through typical Hoare techniques . Going forward , we see \begin{eqnarray} \{ <var:Y> = <var:E> \} \, <var:V0> := <nat:2> \, \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \} \\ \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \} \, <var:V1> := <nat:1> \, \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \land <var:V1> = <nat:1> \} \\ \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \land <var:V1> = <nat:1> \} \, <var:V1> := <var:V1> * <var:Y> \, \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \land <var:V1> = <nat:1> * <var:E> \} \\ \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \land <var:V1> = <nat:1> * <var:E> \} \, <var:V2> := <nat:6> \, \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \land <var:V1> = <nat:1> * <var:E> \land <var:V2> = <nat:6> \} \\ \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \land <var:V1> = <nat:1> * <var:E> \land <var:V2> = <nat:6> \} \, <var:V2> := <var:V2> * <var:Y> \, \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \land <var:V1> = <nat:1> * <var:E> \land <var:V2> = <nat:6> * <var:E> \} \\ \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \land <var:V1> = <nat:1> * <var:E> \land <var:V2> = <nat:6> * <var:E> \} \, <var:V2> := <var:V2> * <var:Y> \, \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \land <var:V1> = <nat:1> * <var:E> \land <var:V2> = <nat:6> * <var:E> ^ <nat:2> \} \end{eqnarray} Further , \begin{eqnarray} \{ <var:Y> = <var:E> \} \, <var:V0> := <nat:2> \, \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \} \\ \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \} \, <var:V1> := <nat:1> \, \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \land <var:V1> = <nat:1> \} \end{eqnarray} This is ensured by the variable update rule obtained from usual Hoare logic . Further , \begin{eqnarray} \{ <var:Y> = <var:E> \} \, <var:V0> := <nat:2> \, \{ <var:Y> = <var:E> \land <var:V0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:Y> = <var:E> }} <var:V0> := <nat:2> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:Y> ; <var:V2> := <nat:6> ; <var:V2> := <var:V2> * <var:Y> ; <var:V2> := <var:V2> * <var:Y> ; <var:M> := <var:V2> ; <var:M> := <var:M> + <var:V1> ; <var:M> := <var:M> + <var:V0> {{ <var:M> = <nat:6> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:1> * <var:E> /\ <var:V2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:1> * <var:E> /\ <var:V2> = <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:1> * <var:E> /\ <var:V2> = <nat:6> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:1> * <var:E> /\ <var:M> = <nat:6> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:V0> = <nat:2> /\ <var:M> = <nat:6> * <var:E> ^ <nat:2> + <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:E> /\ <var:M> = <nat:6> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 