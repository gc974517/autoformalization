\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:7> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:i> ; <var:m2> := <nat:9> ; <var:m2> := <var:m2> * <var:i> ; <var:m2> := <var:m2> * <var:i> ; <var:k> := <var:m2> ; <var:k> := <var:k> + <var:m1> ; <var:k> := <var:k> + <var:m0> \end{verbatim} Assuming taking positive numbers $ <var:F> $ that we have $ <var:i> = <var:F> $ ahead of running the list of commands , it follows that we have $ <var:k> = <nat:9> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:7> $ . \end{theorem} \begin{proof} Applying Hoare reasoning gives us : \begin{eqnarray} \{ <var:i> = <var:F> \} \\ <var:m0> := <nat:7> ; \\ \{ <var:i> = <var:F> \land <var:m0> = <nat:7> \} \\ <var:m1> := <nat:1> ; \\ \{ <var:i> = <var:F> \land <var:m0> = <nat:7> \land <var:m1> = <nat:1> \} \\ <var:m1> := <var:m1> * <var:i> ; \\ \{ <var:i> = <var:F> \land <var:m0> = <nat:7> \land <var:m1> = <nat:1> * <var:F> \} \\ <var:m2> := <nat:9> ; \\ \{ <var:i> = <var:F> \land <var:m0> = <nat:7> \land <var:m1> = <nat:1> * <var:F> \land <var:m2> = <nat:9> \} \\ <var:m2> := <var:m2> * <var:i> ; \\ \{ <var:i> = <var:F> \land <var:m0> = <nat:7> \land <var:m1> = <nat:1> * <var:F> \land <var:m2> = <nat:9> * <var:F> \} \\ <var:m2> := <var:m2> * <var:i> ; \\ \{ <var:i> = <var:F> \land <var:m0> = <nat:7> \land <var:m1> = <nat:1> * <var:F> \land <var:m2> = <nat:9> * <var:F> ^ <nat:2> \} \\ <var:k> := <var:m2> ; \\ \{ <var:i> = <var:F> \land <var:m0> = <nat:7> \land <var:m1> = <nat:1> * <var:F> \land <var:k> = <nat:9> * <var:F> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:m1> ; \\ \{ <var:i> = <var:F> \land <var:m0> = <nat:7> \land <var:k> = <nat:9> * <var:F> ^ <nat:2> + <nat:1> * <var:F> \} \\ <var:k> := <var:k> + <var:m0> \\ \{ <var:i> = <var:F> \land <var:k> = <nat:9> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:7> \} \end{eqnarray} Hence , the list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:i> = <var:F> }} <var:m0> := <nat:7> ; <var:m1> := <nat:1> ; <var:m1> := <var:m1> * <var:i> ; <var:m2> := <nat:9> ; <var:m2> := <var:m2> * <var:i> ; <var:m2> := <var:m2> * <var:i> ; <var:k> := <var:m2> ; <var:k> := <var:k> + <var:m1> ; <var:k> := <var:k> + <var:m0> {{ <var:k> = <nat:9> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:F> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:F> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:F> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:F> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:1> * <var:F> /\ <var:m2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:F> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:1> * <var:F> /\ <var:m2> = <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:F> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:1> * <var:F> /\ <var:m2> = <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:F> /\ <var:m0> = <nat:7> /\ <var:m1> = <nat:1> * <var:F> /\ <var:k> = <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:F> /\ <var:m0> = <nat:7> /\ <var:k> = <nat:9> * <var:F> ^ <nat:2> + <nat:1> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:F> /\ <var:k> = <nat:9> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 