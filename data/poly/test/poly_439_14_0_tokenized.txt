\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:3> ; <var:I1> := <nat:5> ; <var:I1> := <var:I1> * <var:l> ; <var:I2> := <nat:5> ; <var:I2> := <var:I2> * <var:l> ; <var:I2> := <var:I2> * <var:l> ; <var:I3> := <nat:9> ; <var:I3> := <var:I3> * <var:l> ; <var:I3> := <var:I3> * <var:l> ; <var:I3> := <var:I3> * <var:l> ; <var:k> := <var:I3> ; <var:k> := <var:k> + <var:I2> ; <var:k> := <var:k> + <var:I1> ; <var:k> := <var:k> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:l> = <var:B> $ before the execution of this set of commands , then we have $ <var:k> = <nat:9> \times <var:B> ^ <nat:3> + <nat:5> \times <var:B> ^ <nat:2> + <nat:5> \times <var:B> + <nat:3> $ when list of commands terminates . \end{theorem} \begin{proof} The method of proof for the set of commands can be shown using usual Hoare logic . Stepping through , we have the variable binding statement \verb | <var:I0> := <nat:3> ; | . This forwards the precondition $ \{ <var:l> = <var:B> \} $ to $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \} $ . Keeping momentum , we see the environment update statement defining $ <nat:5> $ into $ <var:I1>$ . This code forwards the precondition $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \} $ toward the postcondition $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \} $ . Taking a look at the upcoming bit of code found in our set of commands , the assignment code \verb | <var:I1> := <var:I1> * <var:l> ; | . This forwards $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \} $ as $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \} $ . Looking at the upcoming command found in the set of instructions , the line \verb | <var:I2> := <nat:5> ; | . This command moves the precondition $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \} $ as the postcondition $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \} $ . This is known to be sound by the assignment rule from Hoare reasoning . Focusing on the following line of code contained in the set of instructions , we see the binding line letting $ <var:I2> * <var:l> $ toward $ <var:I2>$ . This code transfers the condition $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \} $ to the condition $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> \} $ . This is given using the assignment inference rule in Hoare logic . Honing in on the following command found in the set of commands , we see the variable assignmet command \verb | <var:I2> := <var:I2> * <var:l> ; | . This redefines $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> \} $ as the postcondition $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> ^ <nat:2> \} $ . This is given by the assignment scheme defined in typical Hoare reasoning . Advancing , we see the binding line assigning $ <nat:9> $ as $ <var:I3>$ . This transfers $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> ^ <nat:2> \} $ to $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> ^ <nat:2> \land <var:I3> = <nat:9> \} $ . Moving on , we have the binding code assigning $ <var:I3> * <var:l> $ as $ <var:I3>$ . This code takes $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> ^ <nat:2> \land <var:I3> = <nat:9> \} $ into $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> ^ <nat:2> \land <var:I3> = <nat:9> \cdot <var:B> \} $ . Immediately after , we have the assignment statement assigning $ <var:I3> * <var:l> $ toward $ <var:I3>$ . This command forwards $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> ^ <nat:2> \land <var:I3> = <nat:9> \cdot <var:B> \} $ as the postcondition $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> ^ <nat:2> \land <var:I3> = <nat:9> \cdot <var:B> ^ <nat:2> \} $ . Immediately following , we see the variable binding code \verb | <var:I3> := <var:I3> * <var:l> ; | . This command takes the condition $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> ^ <nat:2> \land <var:I3> = <nat:9> \cdot <var:B> ^ <nat:2> \} $ to $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> ^ <nat:2> \land <var:I3> = <nat:9> \cdot <var:B> ^ <nat:3> \} $ . Now , we have the binding line \verb | <var:k> := <var:I3> ; | . This takes the condition $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> ^ <nat:2> \land <var:I3> = <nat:9> \cdot <var:B> ^ <nat:3> \} $ into $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> ^ <nat:2> \land <var:k> = <nat:9> \cdot <var:B> ^ <nat:3> \} $ . This is given with the assignment law defined in standard Hoare logic . Going forward , we have the code \verb | <var:k> := <var:k> + <var:I2> ; | . This redefines $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:I2> = <nat:5> \cdot <var:B> ^ <nat:2> \land <var:k> = <nat:9> \cdot <var:B> ^ <nat:3> \} $ into the condition $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:k> = <nat:9> \cdot <var:B> ^ <nat:3> + <nat:5> \cdot <var:B> ^ <nat:2> \} $ . This is given using the assignment scheme given in usual Hoare techniques . Taking a look at the subsequent statement contained in our list of commands , the variable assignmet statement \verb | <var:k> := <var:k> + <var:I1> ; | . This code transfers the precondition $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:I1> = <nat:5> \cdot <var:B> \land <var:k> = <nat:9> \cdot <var:B> ^ <nat:3> + <nat:5> \cdot <var:B> ^ <nat:2> \} $ to $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:k> = <nat:9> \cdot <var:B> ^ <nat:3> + <nat:5> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> \} $ . Immediately after , we see the assignment command giving $ <var:k> + <var:I0$ to $ <var:k>$ . This statement transfers the condition $ \{ <var:l> = <var:B> \land <var:I0> = <nat:3> \land <var:k> = <nat:9> \cdot <var:B> ^ <nat:3> + <nat:5> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> \} $ as the postcondition $ \{ <var:l> = <var:B> \land <var:k> = <nat:9> \cdot <var:B> ^ <nat:3> + <nat:5> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> + <nat:3> \} $ . This is shown using the assignment scheme obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I0> := <nat:3> ; <var:I1> := <nat:5> ; <var:I1> := <var:I1> * <var:l> ; <var:I2> := <nat:5> ; <var:I2> := <var:I2> * <var:l> ; <var:I2> := <var:I2> * <var:l> ; <var:I3> := <nat:9> ; <var:I3> := <var:I3> * <var:l> ; <var:I3> := <var:I3> * <var:l> ; <var:I3> := <var:I3> * <var:l> ; <var:k> := <var:I3> ; <var:k> := <var:k> + <var:I2> ; <var:k> := <var:k> + <var:I1> ; <var:k> := <var:k> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:l> = <var:B> }} <def:poly> {{ <var:k> = <nat:9> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:5> * <var:B> /\ <var:I2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:5> * <var:B> /\ <var:I2> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:5> * <var:B> /\ <var:I2> = <nat:5> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:5> * <var:B> /\ <var:I2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:I3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:5> * <var:B> /\ <var:I2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:I3> = <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:5> * <var:B> /\ <var:I2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:I3> = <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:5> * <var:B> /\ <var:I2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:I3> = <nat:9> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:5> * <var:B> /\ <var:I2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:k> = <nat:9> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:5> * <var:B> /\ <var:k> = <nat:9> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:I0> = <nat:3> /\ <var:k> = <nat:9> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:k> = <nat:9> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 