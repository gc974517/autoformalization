\begin{document} \begin{theorem} Define the following set of instructions such that \begin{verbatim} <var:R0> := <nat:7> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:a> ; <var:R2> := <nat:6> ; <var:R2> := <var:R2> * <var:a> ; <var:R2> := <var:R2> * <var:a> ; <var:y> := <var:R2> ; <var:y> := <var:y> + <var:R1> ; <var:y> := <var:y> + <var:R0> \end{verbatim} Allowing that $ <var:a> = <var:M> $ ahead of the execution of our set of commands then $ <var:y> = <nat:6> \times <var:M> ^ <nat:2> + <nat:5> \times <var:M> + <nat:7> $ . \end{theorem} \begin{proof} The proof of the list of commands is given by usual Hoare reasoning . Advancing to the proceeding lines of codefound in our segment of code , we have \[ \begin{tabular} {rcl} \{ <var:a> = <var:M> \} & <var:R0> := <nat:7> & \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \} \\ \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \} & <var:R1> := <nat:5> & \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> \} \\ \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> \} & <var:R1> := <var:R1> * <var:a> & \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> * <var:M> \} \\ \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> * <var:M> \} & <var:R2> := <nat:6> & \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> * <var:M> \land <var:R2> = <nat:6> \} \end{tabular} This is sound by the variable binding law defined in usual Hoare logic . Taking a look at the subsequent bit of code in the set of commands , \[ \begin{tabular} {rcl} \{ <var:a> = <var:M> \} & <var:R0> := <nat:7> & \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \} \end{tabular} This is shown through the binding scheme given in typical Hoare techniques . Immediately following , \[ \begin{tabular} {rcl} \{ <var:a> = <var:M> \} & <var:R0> := <nat:7> & \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \} \\ \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \} & <var:R1> := <nat:5> & \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> \} \\ \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> \} & <var:R1> := <var:R1> * <var:a> & \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> * <var:M> \} \\ \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> * <var:M> \} & <var:R2> := <nat:6> & \{ <var:a> = <var:M> \land <var:R0> = <nat:7> \land <var:R1> = <nat:5> * <var:M> \land <var:R2> = <nat:6> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:a> = <var:M> }} <var:R0> := <nat:7> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:a> ; <var:R2> := <nat:6> ; <var:R2> := <var:R2> * <var:a> ; <var:R2> := <var:R2> * <var:a> ; <var:y> := <var:R2> ; <var:y> := <var:y> + <var:R1> ; <var:y> := <var:y> + <var:R0> {{ <var:y> = <nat:6> * <var:M> ^ <nat:2> + <nat:5> * <var:M> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:5> * <var:M> /\ <var:R2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:5> * <var:M> /\ <var:R2> = <nat:6> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:5> * <var:M> /\ <var:R2> = <nat:6> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:R0> = <nat:7> /\ <var:R1> = <nat:5> * <var:M> /\ <var:y> = <nat:6> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:R0> = <nat:7> /\ <var:y> = <nat:6> * <var:M> ^ <nat:2> + <nat:5> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:M> /\ <var:y> = <nat:6> * <var:M> ^ <nat:2> + <nat:5> * <var:M> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 