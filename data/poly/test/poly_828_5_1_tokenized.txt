\begin{document} \begin{theorem} Consider a set of commands such that \begin{verbatim} <var:D1> := <var:U> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:4> ; <var:x> := <var:D1> <var:x> := <var:x> + <var:D0> \end{verbatim} Given that $ <var:U> = <var:y> $ ahead of interpreting this code , it holds that $ <var:x> = <nat:4> \cdot <var:y> + <nat:1> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques results in : \begin{eqnarray} \{ <var:U> = <var:y> \} \\ <var:D1> := <var:U> ; \\ \{ <var:U> = <var:y> \land <var:D1> = <var:y> \} \\ <var:D0> := <nat:1> ; \\ \{ <var:U> = <var:y> \land <var:D1> = <var:y> \land <var:D0> = <nat:1> \} \\ <var:D1> := <var:D1> * <nat:4> ; \\ \{ <var:U> = <var:y> \land <var:D1> = <nat:4> * <var:y> \land <var:D0> = <nat:1> \} \\ <var:x> := <var:D1> \\ \{ <var:U> = <var:y> \land <var:D0> = <nat:1> \land <var:x> = <nat:4> * <var:y> \} \\ <var:x> := <var:x> + <var:D0> \\ \{ <var:U> = <var:y> \land <var:x> = <nat:4> * <var:y> + <nat:1> \} \end{eqnarray} Therefore , this series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:U> = <var:y> }} <var:D1> := <var:U> ; <var:D0> := <nat:1> ; <var:D1> := <var:D1> * <nat:4> ; <var:x> := <var:D1> <var:x> := <var:x> + <var:D0> {{ <var:x> = <nat:4> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:D1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:D1> = <var:y> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:D1> = <nat:4> * <var:y> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:D0> = <nat:1> /\ <var:x> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:y> /\ <var:x> = <nat:4> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 