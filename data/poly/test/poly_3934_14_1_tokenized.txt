\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:d1> := <var:T> ; <var:d2> := <var:d1> * <var:T> ; <var:d3> := <var:d2> * <var:T> ; <var:d4> := <var:d3> * <var:T> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:7> ; <var:d2> := <var:d2> * <nat:8> ; <var:d3> := <var:d3> * <nat:8> ; <var:d4> := <var:d4> * <nat:9> ; <var:j> := <var:d4> <var:j> := <var:j> + <var:d3> <var:j> := <var:j> + <var:d2> <var:j> := <var:j> + <var:d1> <var:j> := <var:j> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> in \emph{Imp} . Allowing it to be that $ <var:T> = <var:k> $ prior to running the program , it holds that we have $ <var:j> = <nat:9> \times <var:k> ^ <nat:4> + <nat:8> \times <var:k> ^ <nat:3> + <nat:8> \times <var:k> ^ <nat:2> + <nat:7> \times <var:k> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare logic results in : \begin{eqnarray} \{ <var:T> = <var:k> \} \\ <var:d1> := <var:T> ; \\ \{ <var:T> = <var:k> \land <var:d1> = <var:k> \} \\ <var:d2> := <var:d1> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:d1> = <var:k> \land <var:d2> = <var:k> ^ <nat:2> \} \\ <var:d3> := <var:d2> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:d1> = <var:k> \land <var:d2> = <var:k> ^ <nat:2> \land <var:d3> = <var:k> ^ <nat:3> \} \\ <var:d4> := <var:d3> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:d1> = <var:k> \land <var:d2> = <var:k> ^ <nat:2> \land <var:d3> = <var:k> ^ <nat:3> \land <var:d4> = <var:k> ^ <nat:4> \} \end{eqnarray} Furthering evaluating our series of instructions results in : \begin{eqnarray} <var:d0> := <nat:3> ; \\ \{ <var:T> = <var:k> \land <var:d1> = <var:k> \land <var:d2> = <var:k> ^ <nat:2> \land <var:d3> = <var:k> ^ <nat:3> \land <var:d4> = <var:k> ^ <nat:4> \land <var:d0> = <nat:3> \} \\ <var:d1> := <var:d1> * <nat:7> ; \\ \{ <var:T> = <var:k> \land <var:d1> = <nat:7> \cdot <var:k> \land <var:d2> = <var:k> ^ <nat:2> \land <var:d3> = <var:k> ^ <nat:3> \land <var:d4> = <var:k> ^ <nat:4> \land <var:d0> = <nat:3> \} \\ <var:d2> := <var:d2> * <nat:8> ; \\ \{ <var:T> = <var:k> \land <var:d1> = <nat:7> \cdot <var:k> \land <var:d2> = <nat:8> \cdot <var:k> ^ <nat:2> \land <var:d3> = <var:k> ^ <nat:3> \land <var:d4> = <var:k> ^ <nat:4> \land <var:d0> = <nat:3> \} \\ <var:d3> := <var:d3> * <nat:8> ; \\ \{ <var:T> = <var:k> \land <var:d1> = <nat:7> \cdot <var:k> \land <var:d2> = <nat:8> \cdot <var:k> ^ <nat:2> \land <var:d3> = <nat:8> \cdot <var:k> ^ <nat:3> \land <var:d4> = <var:k> ^ <nat:4> \land <var:d0> = <nat:3> \} \\ <var:d4> := <var:d4> * <nat:9> ; \\ \{ <var:T> = <var:k> \land <var:d1> = <nat:7> \cdot <var:k> \land <var:d2> = <nat:8> \cdot <var:k> ^ <nat:2> \land <var:d3> = <nat:8> \cdot <var:k> ^ <nat:3> \land <var:d4> = <nat:9> \cdot <var:k> ^ <nat:4> \land <var:d0> = <nat:3> \} \\ <var:j> := <var:d4> \\ \{ <var:T> = <var:k> \land <var:d1> = <nat:7> \cdot <var:k> \land <var:d2> = <nat:8> \cdot <var:k> ^ <nat:2> \land <var:d3> = <nat:8> \cdot <var:k> ^ <nat:3> \land <var:d0> = <nat:3> \land <var:j> = <nat:9> \cdot <var:k> ^ <nat:4> \} \\ <var:j> := <var:j> + <var:d3> \\ \{ <var:T> = <var:k> \land <var:d1> = <nat:7> \cdot <var:k> \land <var:d2> = <nat:8> \cdot <var:k> ^ <nat:2> \land <var:d0> = <nat:3> \land <var:j> = <nat:9> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> \} \\ <var:j> := <var:j> + <var:d2> \\ \{ <var:T> = <var:k> \land <var:d1> = <nat:7> \cdot <var:k> \land <var:d0> = <nat:3> \land <var:j> = <nat:9> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> + <nat:8> \cdot <var:k> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:d1> \\ \{ <var:T> = <var:k> \land <var:d0> = <nat:3> \land <var:j> = <nat:9> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> + <nat:8> \cdot <var:k> ^ <nat:2> + <nat:7> \cdot <var:k> \} \\ <var:j> := <var:j> + <var:d0> \\ \{ <var:T> = <var:k> \land <var:j> = <nat:9> \cdot <var:k> ^ <nat:4> + <nat:8> \cdot <var:k> ^ <nat:3> + <nat:8> \cdot <var:k> ^ <nat:2> + <nat:7> \cdot <var:k> + <nat:3> \} \end{eqnarray} Allowing the evaluation of the set of commands results in : \begin{eqnarray} \end{eqnarray} Therefore , our set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <var:d4> : string := " <var:d4> " . Definition <def:poly> := <var:d1> := <var:T> ; <var:d2> := <var:d1> * <var:T> ; <var:d3> := <var:d2> * <var:T> ; <var:d4> := <var:d3> * <var:T> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:7> ; <var:d2> := <var:d2> * <nat:8> ; <var:d3> := <var:d3> * <nat:8> ; <var:d4> := <var:d4> * <nat:9> ; <var:j> := <var:d4> <var:j> := <var:j> + <var:d3> <var:j> := <var:j> + <var:d2> <var:j> := <var:j> + <var:d1> <var:j> := <var:j> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:T> = <var:k> }} <def:poly> {{ <var:j> = <nat:9> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> + <nat:8> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:d1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:d1> = <var:k> /\ <var:d2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:d1> = <var:k> /\ <var:d2> = <var:k> ^ <nat:2> /\ <var:d3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:d1> = <var:k> /\ <var:d2> = <var:k> ^ <nat:2> /\ <var:d3> = <var:k> ^ <nat:3> /\ <var:d4> = <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:d1> = <var:k> /\ <var:d2> = <var:k> ^ <nat:2> /\ <var:d3> = <var:k> ^ <nat:3> /\ <var:d4> = <var:k> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:d1> = <nat:7> * <var:k> /\ <var:d2> = <var:k> ^ <nat:2> /\ <var:d3> = <var:k> ^ <nat:3> /\ <var:d4> = <var:k> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:d1> = <nat:7> * <var:k> /\ <var:d2> = <nat:8> * <var:k> ^ <nat:2> /\ <var:d3> = <var:k> ^ <nat:3> /\ <var:d4> = <var:k> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:d1> = <nat:7> * <var:k> /\ <var:d2> = <nat:8> * <var:k> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:k> ^ <nat:3> /\ <var:d4> = <var:k> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:d1> = <nat:7> * <var:k> /\ <var:d2> = <nat:8> * <var:k> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:k> ^ <nat:3> /\ <var:d4> = <nat:9> * <var:k> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:d1> = <nat:7> * <var:k> /\ <var:d2> = <nat:8> * <var:k> ^ <nat:2> /\ <var:d3> = <nat:8> * <var:k> ^ <nat:3> /\ <var:d0> = <nat:3> /\ <var:j> = <nat:9> * <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:d1> = <nat:7> * <var:k> /\ <var:d2> = <nat:8> * <var:k> ^ <nat:2> /\ <var:d0> = <nat:3> /\ <var:j> = <nat:9> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:d1> = <nat:7> * <var:k> /\ <var:d0> = <nat:3> /\ <var:j> = <nat:9> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> + <nat:8> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:d0> = <nat:3> /\ <var:j> = <nat:9> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> + <nat:8> * <var:k> ^ <nat:2> + <nat:7> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:j> = <nat:9> * <var:k> ^ <nat:4> + <nat:8> * <var:k> ^ <nat:3> + <nat:8> * <var:k> ^ <nat:2> + <nat:7> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 