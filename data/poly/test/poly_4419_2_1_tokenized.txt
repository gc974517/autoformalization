\begin{document} \begin{theorem} Define the following code segment as follows \begin{verbatim} <var:L0> := <nat:1> ; <var:K> := <var:L0> \end{verbatim} Assuming ( given every positive coefficients $ <var:y> $ ) that $ <var:o> = <var:y> $ prior to the execution of the series of commands it holds that we see $ <var:K> = <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the code can be given by standard Hoare reasoning . Moving on to the proceeding command seen in the series of instructions , the code assigning $ <nat:1> $ toward $ <var:L0>$ . This transfers the precondition $ \{ <var:o> = <var:y> \} $ toward the postcondition $ \{ <var:o> = <var:y> \land <var:L0> = <nat:1> \} $ . This is sound using the assignment inference rule given in Hoare logic . Next , we see the variable update line binding $ <var:L0$ into $ <var:K>$ . This line forwards $ \{ <var:o> = <var:y> \land <var:L0> = <nat:1> \} $ toward the condition $ \{ <var:o> = <var:y> \land <var:K> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:o> = <var:y> }} <var:L0> := <nat:1> ; <var:K> := <var:L0> {{ <var:K> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:K> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 