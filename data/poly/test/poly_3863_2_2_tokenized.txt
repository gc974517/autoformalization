\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:a> := <nat:1> ; <var:a> := <nat:1> + <var:a> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Allowing ( for all positive integers $ <var:R> $ ) it to be that $ <var:B> = <var:R> $ ahead of executing this code segment , it holds that we see $ <var:a> = <nat:1> \cdot <var:R> + <nat:1> $ once list of instructions is done executing . \end{theorem} \begin{proof} Using standard Hoare reasoning results in : \begin{eqnarray} \{ <var:B> = <var:R> \} \\ <var:a> := <nat:1> ; \\ \{ <var:B> = <var:R> \land <var:a> = <nat:1> \} \end{eqnarray} Continuing evaluating our list of instructions gives : \begin{eqnarray} <var:a> := <nat:1> + <var:a> * <var:B> \\ \{ <var:B> = <var:R> \land <var:a> = <nat:1> * <var:R> + <nat:1> \} \end{eqnarray} Thus , this set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:a> := <nat:1> ; <var:a> := <nat:1> + <var:a> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:B> = <var:R> }} <def:poly> {{ <var:a> = <nat:1> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:R> /\ <var:a> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:R> /\ <var:a> = <nat:1> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 