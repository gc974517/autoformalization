\begin{document} \begin{theorem} Consider the following set of commands such that \begin{verbatim} <var:Q0> := <nat:1> ; <var:Q1> := <nat:4> ; <var:Q1> := <var:Q1> * <var:k> ; <var:Q2> := <nat:2> ; <var:Q2> := <var:Q2> * <var:k> ; <var:Q2> := <var:Q2> * <var:k> ; <var:p> := <var:Q2> ; <var:p> := <var:p> + <var:Q1> ; <var:p> := <var:p> + <var:Q0> \end{verbatim} Assuming it to hold that $ <var:k> = <var:y> $ ahead of running the code segment , it holds that $ <var:p> = <nat:2> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:1> $ once set of commands finishes . \end{theorem} \begin{proof} The proof of our series of instructions can be shown using the below decorated segment of code . \begin{eqnarray} \{ <var:k> = <var:y> \} \\ <var:Q0> := <nat:1> ; \\ \{ <var:k> = <var:y> \land <var:Q0> = <nat:1> \} \end{eqnarray} Advancing interpreting the set of instructions gives us : \begin{eqnarray} <var:Q1> := <nat:4> ; \\ \{ <var:k> = <var:y> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:4> \} \\ <var:Q1> := <var:Q1> * <var:k> ; \\ \{ <var:k> = <var:y> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:4> * <var:y> \} \\ <var:Q2> := <nat:2> ; \\ \{ <var:k> = <var:y> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:4> * <var:y> \land <var:Q2> = <nat:2> \} \end{eqnarray} Furthering running the set of instructions results in : \begin{eqnarray} <var:Q2> := <var:Q2> * <var:k> ; \\ \{ <var:k> = <var:y> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:4> * <var:y> \land <var:Q2> = <nat:2> * <var:y> \} \\ <var:Q2> := <var:Q2> * <var:k> ; \\ \{ <var:k> = <var:y> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:4> * <var:y> \land <var:Q2> = <nat:2> * <var:y> ^ <nat:2> \} \\ <var:p> := <var:Q2> ; \\ \{ <var:k> = <var:y> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:4> * <var:y> \land <var:p> = <nat:2> * <var:y> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:Q1> ; \\ \{ <var:k> = <var:y> \land <var:Q0> = <nat:1> \land <var:p> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> \} \\ <var:p> := <var:p> + <var:Q0> \\ \{ <var:k> = <var:y> \land <var:p> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> \} \end{eqnarray} The application of Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:k> = <var:y> }} <var:Q0> := <nat:1> ; <var:Q1> := <nat:4> ; <var:Q1> := <var:Q1> * <var:k> ; <var:Q2> := <nat:2> ; <var:Q2> := <var:Q2> * <var:k> ; <var:Q2> := <var:Q2> * <var:k> ; <var:p> := <var:Q2> ; <var:p> := <var:p> + <var:Q1> ; <var:p> := <var:p> + <var:Q0> {{ <var:p> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:4> * <var:y> /\ <var:Q2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:4> * <var:y> /\ <var:Q2> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:4> * <var:y> /\ <var:Q2> = <nat:2> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:4> * <var:y> /\ <var:p> = <nat:2> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:Q0> = <nat:1> /\ <var:p> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:y> /\ <var:p> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 