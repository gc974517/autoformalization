\begin{document} \begin{theorem} Take a series of commands : \begin{verbatim} <var:W1> := <var:m> ; <var:W2> := <var:W1> * <var:m> ; <var:W3> := <var:W2> * <var:m> ; <var:W4> := <var:W3> * <var:m> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:5> ; <var:W2> := <var:W2> * <nat:3> ; <var:W3> := <var:W3> * <nat:3> ; <var:W4> := <var:W4> * <nat:2> ; <var:w> := <var:W4> <var:w> := <var:w> + <var:W3> <var:w> := <var:w> + <var:W2> <var:w> := <var:w> + <var:W1> <var:w> := <var:w> + <var:W0> \end{verbatim} Assuming that we have $ <var:m> = <var:P> $ before interpreting this set of instructions , it must be that we see $ <var:w> = <nat:2> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:3> + <nat:3> \times <var:P> ^ <nat:2> + <nat:5> \times <var:P> + <nat:8> $ once list of commands has terminated . \end{theorem} \begin{proof} The argument for the set of commands can be done by standard Hoare reasoning . Moving onward , we have the variable update code giving $ <var:m> $ to $ <var:W1>$ . This statement advances the precondition $ \{ <var:m> = <var:P> \} $ toward the condition $ \{ <var:m> = <var:P> \land <var:W1> = <var:P> \} $ . This is deduced through the assignment inference rule in standard Hoare techniques . Considering the upcoming statement found in the program , we have the binding command \verb | <var:W2> := <var:W1> * <var:m> ; | . This transfers $ \{ <var:m> = <var:P> \land <var:W1> = <var:P> \} $ toward the condition $ \{ <var:m> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <var:P> ^ <nat:2> \} $ . This is rigorously given through the assignment law defined in usual Hoare reasoning . Moving forward to the next step , the variable assignmet code letting $ <var:W2> * <var:m> $ as $ <var:W3>$ . This command forwards $ \{ <var:m> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <var:P> ^ <nat:2> \} $ into $ \{ <var:m> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \} $ . This is guaranteed using the assignment inference rule of Hoare techniques . Observing the proceeding line of code found in our list of commands , we have the statement assigning $ <var:W3> * <var:m> $ into $ <var:W4>$ . This line advances $ \{ <var:m> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \} $ into the condition $ \{ <var:m> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \} $ . This is deduced by the assignment scheme given in Hoare techniques . Moving on to the following line of code seen in the series of instructions , we see the variable binding code yielding $ <nat:8> $ to $ <var:W0>$ . This code transfers $ \{ <var:m> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \} $ toward the postcondition $ \{ <var:m> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \land <var:W0> = <nat:8> \} $ . Advancing on , we have the assignment code \verb | <var:W1> := <var:W1> * <nat:5> ; | . This code moves the condition $ \{ <var:m> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \land <var:W0> = <nat:8> \} $ into the condition $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W2> = <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \land <var:W0> = <nat:8> \} $ . This is ensured through the assignment rule defined in Hoare reasoning . Stepping forward , the variable update command \verb | <var:W2> := <var:W2> * <nat:3> ; | . This takes the condition $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W2> = <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \land <var:W0> = <nat:8> \} $ into the postcondition $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \land <var:W0> = <nat:8> \} $ . This is known to be sound with the assignment scheme obtained from Hoare logic . Keeping momentum , we have the variable binding statement \verb | <var:W3> := <var:W3> * <nat:3> ; | . This code forwards the condition $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \land <var:W0> = <nat:8> \} $ to $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:W3> = <nat:3> \cdot <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \land <var:W0> = <nat:8> \} $ . Moving onward , we see the environment update code letting $ <var:W4> * <nat:2> $ toward $ <var:W4>$ . This redefines $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:W3> = <nat:3> \cdot <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \land <var:W0> = <nat:8> \} $ toward the postcondition $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:W3> = <nat:3> \cdot <var:P> ^ <nat:3> \land <var:W4> = <nat:2> \cdot <var:P> ^ <nat:4> \land <var:W0> = <nat:8> \} $ . This is deduced through the assignment scheme obtained from usual Hoare reasoning . Shifting focus toward the proceeding statement in the series of commands , the environment update statement \verb | <var:w> := <var:W4> | . This line redefines $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:W3> = <nat:3> \cdot <var:P> ^ <nat:3> \land <var:W4> = <nat:2> \cdot <var:P> ^ <nat:4> \land <var:W0> = <nat:8> \} $ as $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:W3> = <nat:3> \cdot <var:P> ^ <nat:3> \land <var:W0> = <nat:8> \land <var:w> = <nat:2> \cdot <var:P> ^ <nat:4> \} $ . Advancing to the upcoming command found in our list of commands , the variable assignmet line letting $ <var:w> + <var:W3$ to $ <var:w>$ . This line forwards $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:W3> = <nat:3> \cdot <var:P> ^ <nat:3> \land <var:W0> = <nat:8> \land <var:w> = <nat:2> \cdot <var:P> ^ <nat:4> \} $ as $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:W0> = <nat:8> \land <var:w> = <nat:2> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:3> \} $ . This is guaranteed with the assignment inference rule obtained from typical Hoare reasoning . Taking a look at the next line of code seen in the set of instructions , we have the assignment command yielding $ <var:w> + <var:W2$ as $ <var:w>$ . This line moves the precondition $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:W0> = <nat:8> \land <var:w> = <nat:2> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:3> \} $ to the condition $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W0> = <nat:8> \land <var:w> = <nat:2> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:3> + <nat:3> \cdot <var:P> ^ <nat:2> \} $ . This is deduced using the assignment inference rule given in usual Hoare reasoning . Moving on , we see the assignment command binding $ <var:w> + <var:W1$ toward $ <var:w>$ . This advances the precondition $ \{ <var:m> = <var:P> \land <var:W1> = <nat:5> \cdot <var:P> \land <var:W0> = <nat:8> \land <var:w> = <nat:2> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:3> + <nat:3> \cdot <var:P> ^ <nat:2> \} $ toward the postcondition $ \{ <var:m> = <var:P> \land <var:W0> = <nat:8> \land <var:w> = <nat:2> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:3> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:5> \cdot <var:P> \} $ . After , we have the variable binding command defining $ <var:w> + <var:W0$ into $ <var:w>$ . This command redefines the precondition $ \{ <var:m> = <var:P> \land <var:W0> = <nat:8> \land <var:w> = <nat:2> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:3> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:5> \cdot <var:P> \} $ toward the postcondition $ \{ <var:m> = <var:P> \land <var:w> = <nat:2> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:3> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:5> \cdot <var:P> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <var:W4> : string := " <var:W4> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:m> = <var:P> }} <var:W1> := <var:m> ; <var:W2> := <var:W1> * <var:m> ; <var:W3> := <var:W2> * <var:m> ; <var:W4> := <var:W3> * <var:m> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:5> ; <var:W2> := <var:W2> * <nat:3> ; <var:W3> := <var:W3> * <nat:3> ; <var:W4> := <var:W4> * <nat:2> ; <var:w> := <var:W4> <var:w> := <var:w> + <var:W3> <var:w> := <var:w> + <var:W2> <var:w> := <var:w> + <var:W1> <var:w> := <var:w> + <var:W0> {{ <var:w> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:5> * <var:P> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:W1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:W1> = <var:P> /\ <var:W2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:W1> = <var:P> /\ <var:W2> = <var:P> ^ <nat:2> /\ <var:W3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:W1> = <var:P> /\ <var:W2> = <var:P> ^ <nat:2> /\ <var:W3> = <var:P> ^ <nat:3> /\ <var:W4> = <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:W1> = <var:P> /\ <var:W2> = <var:P> ^ <nat:2> /\ <var:W3> = <var:P> ^ <nat:3> /\ <var:W4> = <var:P> ^ <nat:4> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:W1> = <nat:5> * <var:P> /\ <var:W2> = <var:P> ^ <nat:2> /\ <var:W3> = <var:P> ^ <nat:3> /\ <var:W4> = <var:P> ^ <nat:4> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:W1> = <nat:5> * <var:P> /\ <var:W2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:W3> = <var:P> ^ <nat:3> /\ <var:W4> = <var:P> ^ <nat:4> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:W1> = <nat:5> * <var:P> /\ <var:W2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:P> ^ <nat:3> /\ <var:W4> = <var:P> ^ <nat:4> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:W1> = <nat:5> * <var:P> /\ <var:W2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:P> ^ <nat:3> /\ <var:W4> = <nat:2> * <var:P> ^ <nat:4> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:W1> = <nat:5> * <var:P> /\ <var:W2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:W3> = <nat:3> * <var:P> ^ <nat:3> /\ <var:W0> = <nat:8> /\ <var:w> = <nat:2> * <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:W1> = <nat:5> * <var:P> /\ <var:W2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:W0> = <nat:8> /\ <var:w> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:W1> = <nat:5> * <var:P> /\ <var:W0> = <nat:8> /\ <var:w> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:W0> = <nat:8> /\ <var:w> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:5> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:w> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:5> * <var:P> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 