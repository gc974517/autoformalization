\begin{document} \begin{theorem} Take a code segment : \begin{verbatim} <var:n0> := <nat:5> ; <var:n1> := <nat:8> ; <var:n1> := <var:n1> * <var:V> ; <var:p> := <var:n1> ; <var:p> := <var:p> + <var:n0> \end{verbatim} Allowing that $ <var:V> = <var:i> $ with some positive integers $ <var:i> $ ahead of the evaluation of the set of instructions , it must be that $ <var:p> = <nat:8> \times <var:i> + <nat:5> $ after set of instructions terminates . \end{theorem} \begin{proof} Notice the following decorated segment of code . \begin{eqnarray} \{ <var:V> = <var:i> \} \\ <var:n0> := <nat:5> ; \\ \{ <var:V> = <var:i> \land <var:n0> = <nat:5> \} \\ <var:n1> := <nat:8> ; \\ \{ <var:V> = <var:i> \land <var:n0> = <nat:5> \land <var:n1> = <nat:8> \} \\ <var:n1> := <var:n1> * <var:V> ; \\ \{ <var:V> = <var:i> \land <var:n0> = <nat:5> \land <var:n1> = <nat:8> \cdot <var:i> \} \\ <var:p> := <var:n1> ; \\ \{ <var:V> = <var:i> \land <var:n0> = <nat:5> \land <var:p> = <nat:8> \cdot <var:i> \} \\ <var:p> := <var:p> + <var:n0> \\ \{ <var:V> = <var:i> \land <var:p> = <nat:8> \cdot <var:i> + <nat:5> \} \end{eqnarray} Applying Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:V> = <var:i> }} <var:n0> := <nat:5> ; <var:n1> := <nat:8> ; <var:n1> := <var:n1> * <var:V> ; <var:p> := <var:n1> ; <var:p> := <var:p> + <var:n0> {{ <var:p> = <nat:8> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:8> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:n0> = <nat:5> /\ <var:p> = <nat:8> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:p> = <nat:8> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 