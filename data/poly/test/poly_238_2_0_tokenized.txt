\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:8> ; <var:L> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:z> = <var:c> $ prior to the execution of this program , it must be that $ <var:L> = <nat:8> $ when code has terminated . \end{theorem} \begin{proof} The course of logic for the set of instructions can be done through standard Hoare techniques . Moving on to the following step in our segment of code , \begin{verbatim} { <var:z> = <var:c> } <var:k0> := <nat:8> { <var:z> = <var:c> \land <var:k0> = <nat:8> } \end{verbatim} This is rigorously given with the rule obtained from usual Hoare reasoning . Jumping to the following line of code contained in the code , \begin{verbatim} { <var:z> = <var:c> } <var:k0> := <nat:8> { <var:z> = <var:c> \land <var:k0> = <nat:8> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:8> ; <var:L> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:z> = <var:c> }} <def:poly> {{ <var:L> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:c> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:c> /\ <var:L> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 