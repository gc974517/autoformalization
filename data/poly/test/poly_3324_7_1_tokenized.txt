\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:E1> := <var:U> ; <var:E2> := <var:E1> * <var:U> ; <var:E3> := <var:E2> * <var:U> ; <var:E0> := <nat:7> ; <var:E3> := <var:E3> * <nat:5> ; <var:s> := <var:E3> <var:s> := <var:s> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> . Assume it to be that $ <var:U> = <var:Q> $ , for any $ <var:Q> \in \mathbb{N} $ , ahead of evaluating the code segment , it follows that $ <var:s> = <nat:5> \cdot <var:Q> ^ <nat:3> + <nat:7> $ . \end{theorem} \begin{proof} The argument for the code can be demonstrated by typical Hoare logic . Stepping forward , we have \begin{verbatim} { <var:U> = <var:Q> } <var:E1> := <var:U> { <var:U> = <var:Q> \land <var:E1> = <var:Q> } { <var:U> = <var:Q> \land <var:E1> = <var:Q> } <var:E2> := <var:E1> * <var:U> { <var:U> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> } { <var:U> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> } <var:E3> := <var:E2> * <var:U> { <var:U> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> \land <var:E3> = <var:Q> ^ <nat:3> } { <var:U> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> \land <var:E3> = <var:Q> ^ <nat:3> } <var:E0> := <nat:7> { <var:U> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> \land <var:E3> = <var:Q> ^ <nat:3> \land <var:E0> = <nat:7> } { <var:U> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> \land <var:E3> = <var:Q> ^ <nat:3> \land <var:E0> = <nat:7> } <var:E3> := <var:E3> * <nat:5> { <var:U> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> \land <var:E3> = <nat:5> \times <var:Q> ^ <nat:3> \land <var:E0> = <nat:7> } \end{verbatim} Focusing on the upcoming statements in our set of instructions , \begin{verbatim} { <var:U> = <var:Q> } <var:E1> := <var:U> { <var:U> = <var:Q> \land <var:E1> = <var:Q> } { <var:U> = <var:Q> \land <var:E1> = <var:Q> } <var:E2> := <var:E1> * <var:U> { <var:U> = <var:Q> \land <var:E1> = <var:Q> \land <var:E2> = <var:Q> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <def:poly> := <var:E1> := <var:U> ; <var:E2> := <var:E1> * <var:U> ; <var:E3> := <var:E2> * <var:U> ; <var:E0> := <nat:7> ; <var:E3> := <var:E3> * <nat:5> ; <var:s> := <var:E3> <var:s> := <var:s> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:U> = <var:Q> }} <def:poly> {{ <var:s> = <nat:5> * <var:Q> ^ <nat:3> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:Q> /\ <var:E1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Q> /\ <var:E1> = <var:Q> /\ <var:E2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Q> /\ <var:E1> = <var:Q> /\ <var:E2> = <var:Q> ^ <nat:2> /\ <var:E3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Q> /\ <var:E1> = <var:Q> /\ <var:E2> = <var:Q> ^ <nat:2> /\ <var:E3> = <var:Q> ^ <nat:3> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Q> /\ <var:E1> = <var:Q> /\ <var:E2> = <var:Q> ^ <nat:2> /\ <var:E3> = <nat:5> * <var:Q> ^ <nat:3> /\ <var:E0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Q> /\ <var:E1> = <var:Q> /\ <var:E2> = <var:Q> ^ <nat:2> /\ <var:E0> = <nat:7> /\ <var:s> = <nat:5> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Q> /\ <var:s> = <nat:5> * <var:Q> ^ <nat:3> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 