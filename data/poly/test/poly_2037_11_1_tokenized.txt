\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as \begin{verbatim} <var:d1> := <var:T> ; <var:d2> := <var:d1> * <var:T> ; <var:d3> := <var:d2> * <var:T> ; <var:d0> := <nat:9> ; <var:d1> := <var:d1> * <nat:7> ; <var:d2> := <var:d2> * <nat:2> ; <var:d3> := <var:d3> * <nat:2> ; <var:V> := <var:d3> <var:V> := <var:V> + <var:d2> <var:V> := <var:V> + <var:d1> <var:V> := <var:V> + <var:d0> \end{verbatim} Assuming that $ <var:T> = <var:N> $ ahead of the execution of our code segment it holds that we have $ <var:V> = <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:9> $ once program executes . \end{theorem} \begin{proof} The application of usual Hoare techniques yields : \begin{eqnarray} \{ <var:T> = <var:N> \} \\ <var:d1> := <var:T> ; \\ \{ <var:T> = <var:N> \land <var:d1> = <var:N> \} \\ <var:d2> := <var:d1> * <var:T> ; \\ \{ <var:T> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \} \\ <var:d3> := <var:d2> * <var:T> ; \\ \{ <var:T> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \} \\ <var:d0> := <nat:9> ; \\ \{ <var:T> = <var:N> \land <var:d1> = <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \land <var:d0> = <nat:9> \} \\ <var:d1> := <var:d1> * <nat:7> ; \\ \{ <var:T> = <var:N> \land <var:d1> = <nat:7> \cdot <var:N> \land <var:d2> = <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \land <var:d0> = <nat:9> \} \\ <var:d2> := <var:d2> * <nat:2> ; \\ \{ <var:T> = <var:N> \land <var:d1> = <nat:7> \cdot <var:N> \land <var:d2> = <nat:2> \cdot <var:N> ^ <nat:2> \land <var:d3> = <var:N> ^ <nat:3> \land <var:d0> = <nat:9> \} \\ <var:d3> := <var:d3> * <nat:2> ; \\ \{ <var:T> = <var:N> \land <var:d1> = <nat:7> \cdot <var:N> \land <var:d2> = <nat:2> \cdot <var:N> ^ <nat:2> \land <var:d3> = <nat:2> \cdot <var:N> ^ <nat:3> \land <var:d0> = <nat:9> \} \\ <var:V> := <var:d3> \\ \{ <var:T> = <var:N> \land <var:d1> = <nat:7> \cdot <var:N> \land <var:d2> = <nat:2> \cdot <var:N> ^ <nat:2> \land <var:d0> = <nat:9> \land <var:V> = <nat:2> \cdot <var:N> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:d2> \\ \{ <var:T> = <var:N> \land <var:d1> = <nat:7> \cdot <var:N> \land <var:d0> = <nat:9> \land <var:V> = <nat:2> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:d1> \\ \{ <var:T> = <var:N> \land <var:d0> = <nat:9> \land <var:V> = <nat:2> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:7> \cdot <var:N> \} \\ <var:V> := <var:V> + <var:d0> \\ \{ <var:T> = <var:N> \land <var:V> = <nat:2> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:7> \cdot <var:N> + <nat:9> \} \end{eqnarray} Considering the above , our code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:T> = <var:N> }} <var:d1> := <var:T> ; <var:d2> := <var:d1> * <var:T> ; <var:d3> := <var:d2> * <var:T> ; <var:d0> := <nat:9> ; <var:d1> := <var:d1> * <nat:7> ; <var:d2> := <var:d2> * <nat:2> ; <var:d3> := <var:d3> * <nat:2> ; <var:V> := <var:d3> <var:V> := <var:V> + <var:d2> <var:V> := <var:V> + <var:d1> <var:V> := <var:V> + <var:d0> {{ <var:V> = <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:d1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:d1> = <var:N> /\ <var:d2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:d1> = <var:N> /\ <var:d2> = <var:N> ^ <nat:2> /\ <var:d3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:d1> = <var:N> /\ <var:d2> = <var:N> ^ <nat:2> /\ <var:d3> = <var:N> ^ <nat:3> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:d1> = <nat:7> * <var:N> /\ <var:d2> = <var:N> ^ <nat:2> /\ <var:d3> = <var:N> ^ <nat:3> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:d1> = <nat:7> * <var:N> /\ <var:d2> = <nat:2> * <var:N> ^ <nat:2> /\ <var:d3> = <var:N> ^ <nat:3> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:d1> = <nat:7> * <var:N> /\ <var:d2> = <nat:2> * <var:N> ^ <nat:2> /\ <var:d3> = <nat:2> * <var:N> ^ <nat:3> /\ <var:d0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:d1> = <nat:7> * <var:N> /\ <var:d2> = <nat:2> * <var:N> ^ <nat:2> /\ <var:d0> = <nat:9> /\ <var:V> = <nat:2> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:d1> = <nat:7> * <var:N> /\ <var:d0> = <nat:9> /\ <var:V> = <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:d0> = <nat:9> /\ <var:V> = <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:V> = <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 