\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:E> := <nat:2> ; <var:E> := <var:E> * <var:p> ; <var:E> := <nat:4> + <var:E> * <var:p> ; <var:E> := <nat:1> + <var:E> * <var:p> ; <var:E> := <nat:1> + <var:E> * <var:p> ; <var:E> := <nat:3> + <var:E> * <var:p> ; <var:E> := <nat:3> + <var:E> * <var:p> ; <var:E> := <nat:3> + <var:E> * <var:p> ; <var:E> := <nat:3> + <var:E> * <var:p> ; <var:E> := <nat:4> + <var:E> * <var:p> ; <var:E> := <nat:4> + <var:E> * <var:p> ; <var:E> := <nat:4> + <var:E> * <var:p> ; <var:E> := <nat:1> + <var:E> * <var:p> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> . Assume ( given $ <var:V> \in \mathbb{N} $ ) it to hold that $ <var:p> = <var:V> $ before the execution of this set of instructions it must be that $ <var:E> = <nat:2> \cdot <var:V> ^ <nat:12> + <nat:4> \cdot <var:V> ^ <nat:10> + <nat:1> \cdot <var:V> ^ <nat:9> + <nat:1> \cdot <var:V> ^ <nat:8> + <nat:3> \cdot <var:V> ^ <nat:7> + <nat:3> \cdot <var:V> ^ <nat:6> + <nat:3> \cdot <var:V> ^ <nat:5> + <nat:3> \cdot <var:V> ^ <nat:4> + <nat:4> \cdot <var:V> ^ <nat:3> + <nat:4> \cdot <var:V> ^ <nat:2> + <nat:4> \cdot <var:V> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for the segment of code is evident with usual Hoare techniques . Taking a look at the upcoming line of code contained in our program , we have the environment update statement letting $ <nat:2> $ to $ <var:E>$ . This command transfers $ \{ <var:p> = <var:V> \} $ toward the postcondition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \} $ . This is deduced by the assignment inference rule from Hoare techniques . Advancing to the subsequent piece of code contained in our program , we have the line \verb | <var:E> := <var:E> * <var:p> ; | . This forwards the condition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \} $ as $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> + \} $ . Paying attention to the following line found in the list of commands , the variable update line giving $ <nat:4> + <var:E> * <var:p> $ toward $ <var:E>$ . This transfers $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> + \} $ to $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:2> + <nat:4> \} $ . Moving on to the following step contained in the code , we see the line giving $ <nat:1> + <var:E> * <var:p> $ as $ <var:E>$ . This transfers the condition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:2> + <nat:4> \} $ to $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> + <nat:1> \} $ . Going forward , we have the variable update command binding $ <nat:1> + <var:E> * <var:p> $ as $ <var:E>$ . This code takes the precondition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> + <nat:1> \} $ into $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:1> \} $ . This is shown using the assignment law defined in Hoare logic . Moving forward , we have the assignment command letting $ <nat:3> + <var:E> * <var:p> $ to $ <var:E>$ . This takes $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:1> \} $ into the postcondition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:5> + <nat:4> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:3> \} $ . This is sound through the assignment rule defined in standard Hoare logic . Advancing , we see the variable binding statement binding $ <nat:3> + <var:E> * <var:p> $ to $ <var:E>$ . This line moves the precondition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:5> + <nat:4> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:3> \} $ as the postcondition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:6> + <nat:4> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:3> \} $ . Next , we have the binding line \verb | <var:E> := <nat:3> + <var:E> * <var:p> ; | . This command transfers $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:6> + <nat:4> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:3> \} $ as the condition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:7> + <nat:4> \times <var:V> ^ <nat:5> + <nat:1> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:3> \} $ . This is deduced by the assignment inference rule in typical Hoare reasoning . Focusing on the next line in our code segment , we see the variable update command binding $ <nat:3> + <var:E> * <var:p> $ to $ <var:E>$ . This code moves the condition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:7> + <nat:4> \times <var:V> ^ <nat:5> + <nat:1> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:3> \} $ as the condition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:8> + <nat:4> \times <var:V> ^ <nat:6> + <nat:1> \times <var:V> ^ <nat:5> + <nat:1> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:3> \} $ . This is shown to be logically sound using the assignment scheme of Hoare techniques . Considering the upcoming command seen in our series of commands , we have the variable assignmet statement \verb | <var:E> := <nat:4> + <var:E> * <var:p> ; | . This line transfers the condition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:8> + <nat:4> \times <var:V> ^ <nat:6> + <nat:1> \times <var:V> ^ <nat:5> + <nat:1> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:3> \} $ to the postcondition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:9> + <nat:4> \times <var:V> ^ <nat:7> + <nat:1> \times <var:V> ^ <nat:6> + <nat:1> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:4> \} $ . This is shown through the assignment scheme from Hoare techniques . Keeping momentum , the binding command \verb | <var:E> := <nat:4> + <var:E> * <var:p> ; | . This redefines $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:9> + <nat:4> \times <var:V> ^ <nat:7> + <nat:1> \times <var:V> ^ <nat:6> + <nat:1> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:4> \} $ as $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:10> + <nat:4> \times <var:V> ^ <nat:8> + <nat:1> \times <var:V> ^ <nat:7> + <nat:1> \times <var:V> ^ <nat:6> + <nat:3> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:4> \} $ . Considering the next command found in our series of instructions , the variable update line giving $ <nat:4> + <var:E> * <var:p> $ into $ <var:E>$ . This transfers the condition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:10> + <nat:4> \times <var:V> ^ <nat:8> + <nat:1> \times <var:V> ^ <nat:7> + <nat:1> \times <var:V> ^ <nat:6> + <nat:3> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:4> \} $ into the condition $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:11> + <nat:4> \times <var:V> ^ <nat:9> + <nat:1> \times <var:V> ^ <nat:8> + <nat:1> \times <var:V> ^ <nat:7> + <nat:3> \times <var:V> ^ <nat:6> + <nat:3> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:4> \} $ . Moving onward , we have the assignment statement \verb | <var:E> := <nat:1> + <var:E> * <var:p> | . This advances $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:11> + <nat:4> \times <var:V> ^ <nat:9> + <nat:1> \times <var:V> ^ <nat:8> + <nat:1> \times <var:V> ^ <nat:7> + <nat:3> \times <var:V> ^ <nat:6> + <nat:3> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:4> \} $ as $ \{ <var:p> = <var:V> \land <var:E> = <nat:2> \times <var:V> ^ <nat:12> + <nat:4> \times <var:V> ^ <nat:10> + <nat:1> \times <var:V> ^ <nat:9> + <nat:1> \times <var:V> ^ <nat:8> + <nat:3> \times <var:V> ^ <nat:7> + <nat:3> \times <var:V> ^ <nat:6> + <nat:3> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:E> := <nat:2> ; <var:E> := <var:E> * <var:p> ; <var:E> := <nat:4> + <var:E> * <var:p> ; <var:E> := <nat:1> + <var:E> * <var:p> ; <var:E> := <nat:1> + <var:E> * <var:p> ; <var:E> := <nat:3> + <var:E> * <var:p> ; <var:E> := <nat:3> + <var:E> * <var:p> ; <var:E> := <nat:3> + <var:E> * <var:p> ; <var:E> := <nat:3> + <var:E> * <var:p> ; <var:E> := <nat:4> + <var:E> * <var:p> ; <var:E> := <nat:4> + <var:E> * <var:p> ; <var:E> := <nat:4> + <var:E> * <var:p> ; <var:E> := <nat:1> + <var:E> * <var:p> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:p> = <var:V> }} <def:poly> {{ <var:E> = <nat:2> * <var:V> ^ <nat:12> + <nat:4> * <var:V> ^ <nat:10> + <nat:1> * <var:V> ^ <nat:9> + <nat:1> * <var:V> ^ <nat:8> + <nat:3> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:E> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:E> = <nat:2> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:E> = <nat:2> * <var:V> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:E> = <nat:2> * <var:V> ^ <nat:3> + <nat:4> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:E> = <nat:2> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:E> = <nat:2> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:E> = <nat:2> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:E> = <nat:2> * <var:V> ^ <nat:7> + <nat:4> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:E> = <nat:2> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:E> = <nat:2> * <var:V> ^ <nat:9> + <nat:4> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:E> = <nat:2> * <var:V> ^ <nat:10> + <nat:4> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:E> = <nat:2> * <var:V> ^ <nat:11> + <nat:4> * <var:V> ^ <nat:9> + <nat:1> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:V> /\ <var:E> = <nat:2> * <var:V> ^ <nat:12> + <nat:4> * <var:V> ^ <nat:10> + <nat:1> * <var:V> ^ <nat:9> + <nat:1> * <var:V> ^ <nat:8> + <nat:3> * <var:V> ^ <nat:7> + <nat:3> * <var:V> ^ <nat:6> + <nat:3> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 