\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:k> := <nat:3> ; <var:k> := <nat:1> + <var:k> * <var:E> ; <var:k> := <nat:1> + <var:k> * <var:E> ; <var:k> := <nat:4> + <var:k> * <var:E> ; <var:k> := <nat:4> + <var:k> * <var:E> ; <var:k> := <nat:1> + <var:k> * <var:E> ; <var:k> := <nat:4> + <var:k> * <var:E> ; <var:k> := <nat:4> + <var:k> * <var:E> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Allowing that $ <var:E> = <var:D> $ prior to running our program then we see $ <var:k> = <nat:3> \times <var:D> ^ <nat:7> + <nat:1> \times <var:D> ^ <nat:6> + <nat:1> \times <var:D> ^ <nat:5> + <nat:4> \times <var:D> ^ <nat:4> + <nat:4> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:4> \times <var:D> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:E> = <var:D> \} \\ <var:k> := <nat:3> ; \\ \{ <var:E> = <var:D> \land <var:k> = <nat:3> \} \\ <var:k> := <nat:1> + <var:k> * <var:E> ; \\ \{ <var:E> = <var:D> \land <var:k> = <nat:3> \cdot <var:D> + <nat:1> \} \\ <var:k> := <nat:1> + <var:k> * <var:E> ; \\ \{ <var:E> = <var:D> \land <var:k> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:1> \} \\ <var:k> := <nat:4> + <var:k> * <var:E> ; \\ \{ <var:E> = <var:D> \land <var:k> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:4> \} \\ <var:k> := <nat:4> + <var:k> * <var:E> ; \\ \{ <var:E> = <var:D> \land <var:k> = <nat:3> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:4> \} \\ <var:k> := <nat:1> + <var:k> * <var:E> ; \\ \{ <var:E> = <var:D> \land <var:k> = <nat:3> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:4> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:1> \} \\ <var:k> := <nat:4> + <var:k> * <var:E> ; \\ \{ <var:E> = <var:D> \land <var:k> = <nat:3> \cdot <var:D> ^ <nat:6> + <nat:1> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:4> + <nat:4> \cdot <var:D> ^ <nat:3> + <nat:4> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:4> \} \\ <var:k> := <nat:4> + <var:k> * <var:E> \\ \{ <var:E> = <var:D> \land <var:k> = <nat:3> \cdot <var:D> ^ <nat:7> + <nat:1> \cdot <var:D> ^ <nat:6> + <nat:1> \cdot <var:D> ^ <nat:5> + <nat:4> \cdot <var:D> ^ <nat:4> + <nat:4> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:4> \} \end{eqnarray} Given the above , the set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:3> ; <var:k> := <nat:1> + <var:k> * <var:E> ; <var:k> := <nat:1> + <var:k> * <var:E> ; <var:k> := <nat:4> + <var:k> * <var:E> ; <var:k> := <nat:4> + <var:k> * <var:E> ; <var:k> := <nat:1> + <var:k> * <var:E> ; <var:k> := <nat:4> + <var:k> * <var:E> ; <var:k> := <nat:4> + <var:k> * <var:E> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:E> = <var:D> }} <def:poly> {{ <var:k> = <nat:3> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:k> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:k> = <nat:3> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:k> = <nat:3> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:k> = <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:k> = <nat:3> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:k> = <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:k> = <nat:3> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:D> /\ <var:k> = <nat:3> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:4> * <var:D> ^ <nat:4> + <nat:4> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 