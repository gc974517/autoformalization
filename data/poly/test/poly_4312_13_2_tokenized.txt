\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:i> := <nat:3> ; <var:i> := <nat:4> + <var:i> * <var:h> ; <var:i> := <nat:4> + <var:i> * <var:h> ; <var:i> := <nat:1> + <var:i> * <var:h> ; <var:i> := <nat:2> + <var:i> * <var:h> ; <var:i> := <nat:3> + <var:i> * <var:h> ; <var:i> := <nat:2> + <var:i> * <var:h> ; <var:i> := <var:i> * <var:h> ; <var:i> := <nat:2> + <var:i> * <var:h> ; <var:i> := <var:i> * <var:h> ; <var:i> := <nat:1> + <var:i> * <var:h> ; <var:i> := <var:i> * <var:h> ; <var:i> := <nat:4> + <var:i> * <var:h> \end{verbatim} Given that $ <var:h> = <var:r> $ prior to the evaluation of our series of instructions it must be that we see $ <var:i> = <nat:3> * <var:r> ^ <nat:12> + <nat:4> * <var:r> ^ <nat:11> + <nat:4> * <var:r> ^ <nat:10> + <nat:1> * <var:r> ^ <nat:9> + <nat:2> * <var:r> ^ <nat:8> + <nat:3> * <var:r> ^ <nat:7> + <nat:2> * <var:r> ^ <nat:6> + <nat:2> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Using typical Hoare logic gives : \begin{eqnarray} \{ <var:h> = <var:r> \} \\ <var:i> := <nat:3> ; \\ \{ <var:h> = <var:r> \land <var:i> = <nat:3> \} \\ <var:i> := <nat:4> + <var:i> * <var:h> ; \\ \{ <var:h> = <var:r> \land <var:i> = <nat:3> \times <var:r> + <nat:4> \} \\ <var:i> := <nat:4> + <var:i> * <var:h> ; \\ \{ <var:h> = <var:r> \land <var:i> = <nat:3> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:4> \} \\ <var:i> := <nat:1> + <var:i> * <var:h> ; \\ \{ <var:h> = <var:r> \land <var:i> = <nat:3> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:1> \} \\ <var:i> := <nat:2> + <var:i> * <var:h> ; \\ \{ <var:h> = <var:r> \land <var:i> = <nat:3> \times <var:r> ^ <nat:4> + <nat:4> \times <var:r> ^ <nat:3> + <nat:4> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> + <nat:2> \} \\ <var:i> := <nat:3> + <var:i> * <var:h> ; \\ \{ <var:h> = <var:r> \land <var:i> = <nat:3> \times <var:r> ^ <nat:5> + <nat:4> \times <var:r> ^ <nat:4> + <nat:4> \times <var:r> ^ <nat:3> + <nat:1> \times <var:r> ^ <nat:2> + <nat:2> \times <var:r> + <nat:3> \} \\ <var:i> := <nat:2> + <var:i> * <var:h> ; \\ \{ <var:h> = <var:r> \land <var:i> = <nat:3> \times <var:r> ^ <nat:6> + <nat:4> \times <var:r> ^ <nat:5> + <nat:4> \times <var:r> ^ <nat:4> + <nat:1> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> + <nat:2> \} \end{eqnarray} Continuing evaluating the code segment gives : \begin{eqnarray} <var:i> := <var:i> * <var:h> ; \\ \{ <var:h> = <var:r> \land <var:i> = <nat:3> \times <var:r> ^ <nat:7> + <nat:4> \times <var:r> ^ <nat:6> + <nat:4> \times <var:r> ^ <nat:5> + <nat:1> \times <var:r> ^ <nat:4> + <nat:2> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> ^ <nat:2> + <nat:2> \times <var:r> + \} \\ <var:i> := <nat:2> + <var:i> * <var:h> ; \\ \{ <var:h> = <var:r> \land <var:i> = <nat:3> \times <var:r> ^ <nat:8> + <nat:4> \times <var:r> ^ <nat:7> + <nat:4> \times <var:r> ^ <nat:6> + <nat:1> \times <var:r> ^ <nat:5> + <nat:2> \times <var:r> ^ <nat:4> + <nat:3> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> ^ <nat:2> + <nat:2> \} \\ <var:i> := <var:i> * <var:h> ; \\ \{ <var:h> = <var:r> \land <var:i> = <nat:3> \times <var:r> ^ <nat:9> + <nat:4> \times <var:r> ^ <nat:8> + <nat:4> \times <var:r> ^ <nat:7> + <nat:1> \times <var:r> ^ <nat:6> + <nat:2> \times <var:r> ^ <nat:5> + <nat:3> \times <var:r> ^ <nat:4> + <nat:2> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> + \} \\ <var:i> := <nat:1> + <var:i> * <var:h> ; \\ \{ <var:h> = <var:r> \land <var:i> = <nat:3> \times <var:r> ^ <nat:10> + <nat:4> \times <var:r> ^ <nat:9> + <nat:4> \times <var:r> ^ <nat:8> + <nat:1> \times <var:r> ^ <nat:7> + <nat:2> \times <var:r> ^ <nat:6> + <nat:3> \times <var:r> ^ <nat:5> + <nat:2> \times <var:r> ^ <nat:4> + <nat:2> \times <var:r> ^ <nat:2> + <nat:1> \} \\ <var:i> := <var:i> * <var:h> ; \\ \{ <var:h> = <var:r> \land <var:i> = <nat:3> \times <var:r> ^ <nat:11> + <nat:4> \times <var:r> ^ <nat:10> + <nat:4> \times <var:r> ^ <nat:9> + <nat:1> \times <var:r> ^ <nat:8> + <nat:2> \times <var:r> ^ <nat:7> + <nat:3> \times <var:r> ^ <nat:6> + <nat:2> \times <var:r> ^ <nat:5> + <nat:2> \times <var:r> ^ <nat:3> + <nat:1> \times <var:r> + \} \\ <var:i> := <nat:4> + <var:i> * <var:h> \\ \{ <var:h> = <var:r> \land <var:i> = <nat:3> \times <var:r> ^ <nat:12> + <nat:4> \times <var:r> ^ <nat:11> + <nat:4> \times <var:r> ^ <nat:10> + <nat:1> \times <var:r> ^ <nat:9> + <nat:2> \times <var:r> ^ <nat:8> + <nat:3> \times <var:r> ^ <nat:7> + <nat:2> \times <var:r> ^ <nat:6> + <nat:2> \times <var:r> ^ <nat:4> + <nat:1> \times <var:r> ^ <nat:2> + <nat:4> \} \end{eqnarray} Advancing evaluating our program returns : \begin{eqnarray} \end{eqnarray} Therefore , our set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:h> = <var:r> }} <var:i> := <nat:3> ; <var:i> := <nat:4> + <var:i> * <var:h> ; <var:i> := <nat:4> + <var:i> * <var:h> ; <var:i> := <nat:1> + <var:i> * <var:h> ; <var:i> := <nat:2> + <var:i> * <var:h> ; <var:i> := <nat:3> + <var:i> * <var:h> ; <var:i> := <nat:2> + <var:i> * <var:h> ; <var:i> := <var:i> * <var:h> ; <var:i> := <nat:2> + <var:i> * <var:h> ; <var:i> := <var:i> * <var:h> ; <var:i> := <nat:1> + <var:i> * <var:h> ; <var:i> := <var:i> * <var:h> ; <var:i> := <nat:4> + <var:i> * <var:h> {{ <var:i> = <nat:3> * <var:r> ^ <nat:12> + <nat:4> * <var:r> ^ <nat:11> + <nat:4> * <var:r> ^ <nat:10> + <nat:1> * <var:r> ^ <nat:9> + <nat:2> * <var:r> ^ <nat:8> + <nat:3> * <var:r> ^ <nat:7> + <nat:2> * <var:r> ^ <nat:6> + <nat:2> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:i> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:i> = <nat:3> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:i> = <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:i> = <nat:3> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:i> = <nat:3> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:i> = <nat:3> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:4> + <nat:4> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:i> = <nat:3> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:5> + <nat:4> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:i> = <nat:3> * <var:r> ^ <nat:7> + <nat:4> * <var:r> ^ <nat:6> + <nat:4> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:i> = <nat:3> * <var:r> ^ <nat:8> + <nat:4> * <var:r> ^ <nat:7> + <nat:4> * <var:r> ^ <nat:6> + <nat:1> * <var:r> ^ <nat:5> + <nat:2> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:i> = <nat:3> * <var:r> ^ <nat:9> + <nat:4> * <var:r> ^ <nat:8> + <nat:4> * <var:r> ^ <nat:7> + <nat:1> * <var:r> ^ <nat:6> + <nat:2> * <var:r> ^ <nat:5> + <nat:3> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:3> + <nat:2> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:i> = <nat:3> * <var:r> ^ <nat:10> + <nat:4> * <var:r> ^ <nat:9> + <nat:4> * <var:r> ^ <nat:8> + <nat:1> * <var:r> ^ <nat:7> + <nat:2> * <var:r> ^ <nat:6> + <nat:3> * <var:r> ^ <nat:5> + <nat:2> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:i> = <nat:3> * <var:r> ^ <nat:11> + <nat:4> * <var:r> ^ <nat:10> + <nat:4> * <var:r> ^ <nat:9> + <nat:1> * <var:r> ^ <nat:8> + <nat:2> * <var:r> ^ <nat:7> + <nat:3> * <var:r> ^ <nat:6> + <nat:2> * <var:r> ^ <nat:5> + <nat:2> * <var:r> ^ <nat:3> + <nat:1> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:i> = <nat:3> * <var:r> ^ <nat:12> + <nat:4> * <var:r> ^ <nat:11> + <nat:4> * <var:r> ^ <nat:10> + <nat:1> * <var:r> ^ <nat:9> + <nat:2> * <var:r> ^ <nat:8> + <nat:3> * <var:r> ^ <nat:7> + <nat:2> * <var:r> ^ <nat:6> + <nat:2> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 