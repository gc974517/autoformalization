\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as \begin{verbatim} <var:M> := <nat:4> ; <var:M> := <nat:3> + <var:M> * <var:J> ; <var:M> := <nat:1> + <var:M> * <var:J> ; <var:M> := <nat:1> + <var:M> * <var:J> \end{verbatim} Given --- taking integers $ <var:X> $ --- $ <var:J> = <var:X> $ ahead of interpreting this program , it follows that we have $ <var:M> = <nat:4> \cdot <var:X> ^ <nat:3> + <nat:3> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:1> $ once code executes . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:J> = <var:X> \} \\ <var:M> := <nat:4> ; \\ \{ <var:J> = <var:X> \land <var:M> = <nat:4> \} \\ <var:M> := <nat:3> + <var:M> * <var:J> ; \\ \{ <var:J> = <var:X> \land <var:M> = <nat:4> \times <var:X> + <nat:3> \} \\ <var:M> := <nat:1> + <var:M> * <var:J> ; \\ \{ <var:J> = <var:X> \land <var:M> = <nat:4> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:1> \} \\ <var:M> := <nat:1> + <var:M> * <var:J> \\ \{ <var:J> = <var:X> \land <var:M> = <nat:4> \times <var:X> ^ <nat:3> + <nat:3> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:1> \} \end{eqnarray} As a consequence , our code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:J> = <var:X> }} <var:M> := <nat:4> ; <var:M> := <nat:3> + <var:M> * <var:J> ; <var:M> := <nat:1> + <var:M> * <var:J> ; <var:M> := <nat:1> + <var:M> * <var:J> {{ <var:M> = <nat:4> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:M> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:M> = <nat:4> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:M> = <nat:4> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:X> /\ <var:M> = <nat:4> * <var:X> ^ <nat:3> + <nat:3> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 