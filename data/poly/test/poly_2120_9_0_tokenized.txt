\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:1> ; <var:x1> := <nat:8> ; <var:x1> := <var:x1> * <var:t> ; <var:x2> := <nat:6> ; <var:x2> := <var:x2> * <var:t> ; <var:x2> := <var:x2> * <var:t> ; <var:q> := <var:x2> ; <var:q> := <var:q> + <var:x1> ; <var:q> := <var:q> + <var:x0> \end{verbatim} Given --- for integers $ <var:d> $ --- it to be that $ <var:t> = <var:d> $ prior to evaluating our list of commands it follows that we have $ <var:q> = <nat:6> \cdot <var:d> ^ <nat:2> + <nat:8> \cdot <var:d> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:d> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:t> = <var:d> \land <var:x0> = <nat:1> \} \\ <var:x1> := <nat:8> ; \\ \{ <var:t> = <var:d> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \} \\ <var:x1> := <var:x1> * <var:t> ; \\ \{ <var:t> = <var:d> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \times <var:d> \} \\ <var:x2> := <nat:6> ; \\ \{ <var:t> = <var:d> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \times <var:d> \land <var:x2> = <nat:6> \} \\ <var:x2> := <var:x2> * <var:t> ; \\ \{ <var:t> = <var:d> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \times <var:d> \land <var:x2> = <nat:6> \times <var:d> \} \\ <var:x2> := <var:x2> * <var:t> ; \\ \{ <var:t> = <var:d> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \times <var:d> \land <var:x2> = <nat:6> \times <var:d> ^ <nat:2> \} \\ <var:q> := <var:x2> ; \\ \{ <var:t> = <var:d> \land <var:x0> = <nat:1> \land <var:x1> = <nat:8> \times <var:d> \land <var:q> = <nat:6> \times <var:d> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:x1> ; \\ \{ <var:t> = <var:d> \land <var:x0> = <nat:1> \land <var:q> = <nat:6> \times <var:d> ^ <nat:2> + <nat:8> \times <var:d> \} \\ <var:q> := <var:q> + <var:x0> \\ \{ <var:t> = <var:d> \land <var:q> = <nat:6> \times <var:d> ^ <nat:2> + <nat:8> \times <var:d> + <nat:1> \} \end{eqnarray} The application of typical Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:t> = <var:d> }} <var:x0> := <nat:1> ; <var:x1> := <nat:8> ; <var:x1> := <var:x1> * <var:t> ; <var:x2> := <nat:6> ; <var:x2> := <var:x2> * <var:t> ; <var:x2> := <var:x2> * <var:t> ; <var:q> := <var:x2> ; <var:q> := <var:q> + <var:x1> ; <var:q> := <var:q> + <var:x0> {{ <var:q> = <nat:6> * <var:d> ^ <nat:2> + <nat:8> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:d> /\ <var:x2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:d> /\ <var:x2> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:d> /\ <var:x2> = <nat:6> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:8> * <var:d> /\ <var:q> = <nat:6> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:x0> = <nat:1> /\ <var:q> = <nat:6> * <var:d> ^ <nat:2> + <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:d> /\ <var:q> = <nat:6> * <var:d> ^ <nat:2> + <nat:8> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 