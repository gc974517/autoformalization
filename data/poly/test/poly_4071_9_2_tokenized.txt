\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w> := <nat:2> ; <var:w> := <nat:4> + <var:w> * <var:m> ; <var:w> := <var:w> * <var:m> ; <var:w> := <nat:2> + <var:w> * <var:m> ; <var:w> := <nat:1> + <var:w> * <var:m> ; <var:w> := <nat:2> + <var:w> * <var:m> ; <var:w> := <nat:4> + <var:w> * <var:m> ; <var:w> := <nat:3> + <var:w> * <var:m> ; <var:w> := <nat:1> + <var:w> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Allow --- for every positive numbers $ <var:h> $ --- that we have $ <var:m> = <var:h> $ prior to executing this list of instructions it must be that we see $ <var:w> = <nat:2> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> $ after code has terminated . \end{theorem} \begin{proof} The argument for our list of commands can be done with the following decorated set of commands . \begin{eqnarray} \{ <var:m> = <var:h> \} \\ <var:w> := <nat:2> ; \\ \{ <var:m> = <var:h> \land <var:w> = <nat:2> \} \\ <var:w> := <nat:4> + <var:w> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:w> = <nat:2> * <var:h> + <nat:4> \} \\ <var:w> := <var:w> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:w> = <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + \} \\ <var:w> := <nat:2> + <var:w> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:w> = <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> \} \\ <var:w> := <nat:1> + <var:w> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:w> = <nat:2> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> + <nat:1> \} \\ <var:w> := <nat:2> + <var:w> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:w> = <nat:2> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:2> \} \\ <var:w> := <nat:4> + <var:w> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:w> = <nat:2> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> \} \\ <var:w> := <nat:3> + <var:w> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:w> = <nat:2> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> \} \\ <var:w> := <nat:1> + <var:w> * <var:m> \\ \{ <var:m> = <var:h> \land <var:w> = <nat:2> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:w> := <nat:2> ; <var:w> := <nat:4> + <var:w> * <var:m> ; <var:w> := <var:w> * <var:m> ; <var:w> := <nat:2> + <var:w> * <var:m> ; <var:w> := <nat:1> + <var:w> * <var:m> ; <var:w> := <nat:2> + <var:w> * <var:m> ; <var:w> := <nat:4> + <var:w> * <var:m> ; <var:w> := <nat:3> + <var:w> * <var:m> ; <var:w> := <nat:1> + <var:w> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:m> = <var:h> }} <def:poly> {{ <var:w> = <nat:2> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:w> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:w> = <nat:2> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:w> = <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:w> = <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:w> = <nat:2> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:w> = <nat:2> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:w> = <nat:2> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:w> = <nat:2> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:w> = <nat:2> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 