\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as \begin{verbatim} <var:q> := <nat:3> ; <var:q> := <var:q> * <var:H> ; <var:q> := <nat:3> + <var:q> * <var:H> ; <var:q> := <nat:4> + <var:q> * <var:H> ; <var:q> := <nat:3> + <var:q> * <var:H> ; <var:q> := <var:q> * <var:H> ; <var:q> := <nat:4> + <var:q> * <var:H> \end{verbatim} Assuming it to hold that $ <var:H> = <var:y> $ prior to running the program , it follows that we have $ <var:q> = <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> $ after program is done executing . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be seen through the following decorated list of instructions . \begin{eqnarray} \{ <var:H> = <var:y> \} \\ <var:q> := <nat:3> ; \\ \{ <var:H> = <var:y> \land <var:q> = <nat:3> \} \\ <var:q> := <var:q> * <var:H> ; \\ \{ <var:H> = <var:y> \land <var:q> = <nat:3> \cdot <var:y> + \} \\ <var:q> := <nat:3> + <var:q> * <var:H> ; \\ \{ <var:H> = <var:y> \land <var:q> = <nat:3> \cdot <var:y> ^ <nat:2> + <nat:3> \} \\ <var:q> := <nat:4> + <var:q> * <var:H> ; \\ \{ <var:H> = <var:y> \land <var:q> = <nat:3> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> + <nat:4> \} \\ <var:q> := <nat:3> + <var:q> * <var:H> ; \\ \{ <var:H> = <var:y> \land <var:q> = <nat:3> \cdot <var:y> ^ <nat:4> + <nat:3> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:3> \} \\ <var:q> := <var:q> * <var:H> ; \\ \{ <var:H> = <var:y> \land <var:q> = <nat:3> \cdot <var:y> ^ <nat:5> + <nat:3> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> + \} \\ <var:q> := <nat:4> + <var:q> * <var:H> \\ \{ <var:H> = <var:y> \land <var:q> = <nat:3> \cdot <var:y> ^ <nat:6> + <nat:3> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> ^ <nat:2> + <nat:4> \} \end{eqnarray} The application of standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:H> = <var:y> }} <var:q> := <nat:3> ; <var:q> := <var:q> * <var:H> ; <var:q> := <nat:3> + <var:q> * <var:H> ; <var:q> := <nat:4> + <var:q> * <var:H> ; <var:q> := <nat:3> + <var:q> * <var:H> ; <var:q> := <var:q> * <var:H> ; <var:q> := <nat:4> + <var:q> * <var:H> {{ <var:q> = <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:q> = <nat:3> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:q> = <nat:3> * <var:y> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:q> = <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:q> = <nat:3> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:q> = <nat:3> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:y> /\ <var:q> = <nat:3> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 