\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:x> ; <var:R2> := <var:R1> * <var:x> ; <var:R3> := <var:R2> * <var:x> ; <var:R4> := <var:R3> * <var:x> ; <var:R0> := <nat:7> ; <var:R1> := <var:R1> * <nat:6> ; <var:R2> := <var:R2> * <nat:4> ; <var:R3> := <var:R3> * <nat:4> ; <var:R4> := <var:R4> * <nat:3> ; <var:U> := <var:R4> <var:U> := <var:U> + <var:R3> <var:U> := <var:U> + <var:R2> <var:U> := <var:U> + <var:R1> <var:U> := <var:U> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:x> = <var:S> $ prior to executing our set of instructions , it must be that we have $ <var:U> = <nat:3> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> + <nat:6> \times <var:S> + <nat:7> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning yields : \begin{eqnarray} \{ <var:x> = <var:S> \} \\ <var:R1> := <var:x> ; \\ \{ <var:x> = <var:S> \land <var:R1> = <var:S> \} \\ <var:R2> := <var:R1> * <var:x> ; \\ \{ <var:x> = <var:S> \land <var:R1> = <var:S> \land <var:R2> = <var:S> ^ <nat:2> \} \\ <var:R3> := <var:R2> * <var:x> ; \\ \{ <var:x> = <var:S> \land <var:R1> = <var:S> \land <var:R2> = <var:S> ^ <nat:2> \land <var:R3> = <var:S> ^ <nat:3> \} \\ <var:R4> := <var:R3> * <var:x> ; \\ \{ <var:x> = <var:S> \land <var:R1> = <var:S> \land <var:R2> = <var:S> ^ <nat:2> \land <var:R3> = <var:S> ^ <nat:3> \land <var:R4> = <var:S> ^ <nat:4> \} \\ <var:R0> := <nat:7> ; \\ \{ <var:x> = <var:S> \land <var:R1> = <var:S> \land <var:R2> = <var:S> ^ <nat:2> \land <var:R3> = <var:S> ^ <nat:3> \land <var:R4> = <var:S> ^ <nat:4> \land <var:R0> = <nat:7> \} \\ <var:R1> := <var:R1> * <nat:6> ; \\ \{ <var:x> = <var:S> \land <var:R1> = <nat:6> \times <var:S> \land <var:R2> = <var:S> ^ <nat:2> \land <var:R3> = <var:S> ^ <nat:3> \land <var:R4> = <var:S> ^ <nat:4> \land <var:R0> = <nat:7> \} \\ <var:R2> := <var:R2> * <nat:4> ; \\ \{ <var:x> = <var:S> \land <var:R1> = <nat:6> \times <var:S> \land <var:R2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:R3> = <var:S> ^ <nat:3> \land <var:R4> = <var:S> ^ <nat:4> \land <var:R0> = <nat:7> \} \\ <var:R3> := <var:R3> * <nat:4> ; \\ \{ <var:x> = <var:S> \land <var:R1> = <nat:6> \times <var:S> \land <var:R2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:R3> = <nat:4> \times <var:S> ^ <nat:3> \land <var:R4> = <var:S> ^ <nat:4> \land <var:R0> = <nat:7> \} \\ <var:R4> := <var:R4> * <nat:3> ; \\ \{ <var:x> = <var:S> \land <var:R1> = <nat:6> \times <var:S> \land <var:R2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:R3> = <nat:4> \times <var:S> ^ <nat:3> \land <var:R4> = <nat:3> \times <var:S> ^ <nat:4> \land <var:R0> = <nat:7> \} \\ <var:U> := <var:R4> \\ \{ <var:x> = <var:S> \land <var:R1> = <nat:6> \times <var:S> \land <var:R2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:R3> = <nat:4> \times <var:S> ^ <nat:3> \land <var:R0> = <nat:7> \land <var:U> = <nat:3> \times <var:S> ^ <nat:4> \} \\ <var:U> := <var:U> + <var:R3> \\ \{ <var:x> = <var:S> \land <var:R1> = <nat:6> \times <var:S> \land <var:R2> = <nat:4> \times <var:S> ^ <nat:2> \land <var:R0> = <nat:7> \land <var:U> = <nat:3> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:R2> \\ \{ <var:x> = <var:S> \land <var:R1> = <nat:6> \times <var:S> \land <var:R0> = <nat:7> \land <var:U> = <nat:3> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:R1> \\ \{ <var:x> = <var:S> \land <var:R0> = <nat:7> \land <var:U> = <nat:3> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> + <nat:6> \times <var:S> \} \\ <var:U> := <var:U> + <var:R0> \\ \{ <var:x> = <var:S> \land <var:U> = <nat:3> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> + <nat:6> \times <var:S> + <nat:7> \} \end{eqnarray} As a consequence , the set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <var:R4> : string := " <var:R4> " . Definition <def:poly> := <var:R1> := <var:x> ; <var:R2> := <var:R1> * <var:x> ; <var:R3> := <var:R2> * <var:x> ; <var:R4> := <var:R3> * <var:x> ; <var:R0> := <nat:7> ; <var:R1> := <var:R1> * <nat:6> ; <var:R2> := <var:R2> * <nat:4> ; <var:R3> := <var:R3> * <nat:4> ; <var:R4> := <var:R4> * <nat:3> ; <var:U> := <var:R4> <var:U> := <var:U> + <var:R3> <var:U> := <var:U> + <var:R2> <var:U> := <var:U> + <var:R1> <var:U> := <var:U> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:x> = <var:S> }} <def:poly> {{ <var:U> = <nat:3> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:R1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:R1> = <var:S> /\ <var:R2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:R1> = <var:S> /\ <var:R2> = <var:S> ^ <nat:2> /\ <var:R3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:R1> = <var:S> /\ <var:R2> = <var:S> ^ <nat:2> /\ <var:R3> = <var:S> ^ <nat:3> /\ <var:R4> = <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:R1> = <var:S> /\ <var:R2> = <var:S> ^ <nat:2> /\ <var:R3> = <var:S> ^ <nat:3> /\ <var:R4> = <var:S> ^ <nat:4> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:R1> = <nat:6> * <var:S> /\ <var:R2> = <var:S> ^ <nat:2> /\ <var:R3> = <var:S> ^ <nat:3> /\ <var:R4> = <var:S> ^ <nat:4> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:R1> = <nat:6> * <var:S> /\ <var:R2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:R3> = <var:S> ^ <nat:3> /\ <var:R4> = <var:S> ^ <nat:4> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:R1> = <nat:6> * <var:S> /\ <var:R2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:R3> = <nat:4> * <var:S> ^ <nat:3> /\ <var:R4> = <var:S> ^ <nat:4> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:R1> = <nat:6> * <var:S> /\ <var:R2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:R3> = <nat:4> * <var:S> ^ <nat:3> /\ <var:R4> = <nat:3> * <var:S> ^ <nat:4> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:R1> = <nat:6> * <var:S> /\ <var:R2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:R3> = <nat:4> * <var:S> ^ <nat:3> /\ <var:R0> = <nat:7> /\ <var:U> = <nat:3> * <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:R1> = <nat:6> * <var:S> /\ <var:R2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:R0> = <nat:7> /\ <var:U> = <nat:3> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:R1> = <nat:6> * <var:S> /\ <var:R0> = <nat:7> /\ <var:U> = <nat:3> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:R0> = <nat:7> /\ <var:U> = <nat:3> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:U> = <nat:3> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:6> * <var:S> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 