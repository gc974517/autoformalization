\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:j0> := <nat:8> ; <var:e> := <var:j0> \end{verbatim} Given that we have $ <var:N> = <var:q> $ --- letting $ <var:q> \in \mathbb{Z}^+ $ --- prior to running the list of commands , it must be that we have $ <var:e> = <nat:8> $ once set of commands is done executing . \end{theorem} \begin{proof} The flow of logic for this code segment is given with Hoare techniques . Stepping forward , we see the variable assignmet command \verb | <var:j0> := <nat:8> ; | . This command forwards the condition $ \{ <var:N> = <var:q> \} $ toward $ \{ <var:N> = <var:q> \land <var:j0> = <nat:8> \} $ . This is sound by the assignment scheme given in typical Hoare logic . Looking at the upcoming command contained in the set of instructions , we have the environment update statement \verb | <var:e> := <var:j0> | . This statement forwards $ \{ <var:N> = <var:q> \land <var:j0> = <nat:8> \} $ to $ \{ <var:N> = <var:q> \land <var:e> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:N> = <var:q> }} <var:j0> := <nat:8> ; <var:e> := <var:j0> {{ <var:e> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:j0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:q> /\ <var:e> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 