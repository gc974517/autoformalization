\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z> := <nat:1> ; <var:Z> := <nat:2> + <var:Z> * <var:k> ; <var:Z> := <nat:3> + <var:Z> * <var:k> ; <var:Z> := <nat:2> + <var:Z> * <var:k> ; <var:Z> := <nat:3> + <var:Z> * <var:k> ; <var:Z> := <nat:3> + <var:Z> * <var:k> ; <var:Z> := <nat:2> + <var:Z> * <var:k> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:k> = <var:S> $ letting $ <var:S> \in \mathbb{Z}^+ $ before running this set of instructions , then we see $ <var:Z> = <nat:1> \cdot <var:S> ^ <nat:6> + <nat:2> \cdot <var:S> ^ <nat:5> + <nat:3> \cdot <var:S> ^ <nat:4> + <nat:2> \cdot <var:S> ^ <nat:3> + <nat:3> \cdot <var:S> ^ <nat:2> + <nat:3> \cdot <var:S> + <nat:2> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning results in : \begin{eqnarray} \{ <var:k> = <var:S> \} \\ <var:Z> := <nat:1> ; \\ \{ <var:k> = <var:S> \land <var:Z> = <nat:1> \} \\ <var:Z> := <nat:2> + <var:Z> * <var:k> ; \\ \{ <var:k> = <var:S> \land <var:Z> = <nat:1> \times <var:S> + <nat:2> \} \\ <var:Z> := <nat:3> + <var:Z> * <var:k> ; \\ \{ <var:k> = <var:S> \land <var:Z> = <nat:1> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> + <nat:3> \} \\ <var:Z> := <nat:2> + <var:Z> * <var:k> ; \\ \{ <var:k> = <var:S> \land <var:Z> = <nat:1> \times <var:S> ^ <nat:3> + <nat:2> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:2> \} \\ <var:Z> := <nat:3> + <var:Z> * <var:k> ; \\ \{ <var:k> = <var:S> \land <var:Z> = <nat:1> \times <var:S> ^ <nat:4> + <nat:2> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> + <nat:3> \} \\ <var:Z> := <nat:3> + <var:Z> * <var:k> ; \\ \{ <var:k> = <var:S> \land <var:Z> = <nat:1> \times <var:S> ^ <nat:5> + <nat:2> \times <var:S> ^ <nat:4> + <nat:3> \times <var:S> ^ <nat:3> + <nat:2> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:3> \} \\ <var:Z> := <nat:2> + <var:Z> * <var:k> \\ \{ <var:k> = <var:S> \land <var:Z> = <nat:1> \times <var:S> ^ <nat:6> + <nat:2> \times <var:S> ^ <nat:5> + <nat:3> \times <var:S> ^ <nat:4> + <nat:2> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:2> \} \end{eqnarray} As a consequence , this segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Z> := <nat:1> ; <var:Z> := <nat:2> + <var:Z> * <var:k> ; <var:Z> := <nat:3> + <var:Z> * <var:k> ; <var:Z> := <nat:2> + <var:Z> * <var:k> ; <var:Z> := <nat:3> + <var:Z> * <var:k> ; <var:Z> := <nat:3> + <var:Z> * <var:k> ; <var:Z> := <nat:2> + <var:Z> * <var:k> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:k> = <var:S> }} <def:poly> {{ <var:Z> = <nat:1> * <var:S> ^ <nat:6> + <nat:2> * <var:S> ^ <nat:5> + <nat:3> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:Z> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:Z> = <nat:1> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:Z> = <nat:1> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:Z> = <nat:1> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:Z> = <nat:1> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:Z> = <nat:1> * <var:S> ^ <nat:5> + <nat:2> * <var:S> ^ <nat:4> + <nat:3> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:S> /\ <var:Z> = <nat:1> * <var:S> ^ <nat:6> + <nat:2> * <var:S> ^ <nat:5> + <nat:3> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 