\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:f> := <nat:3> ; <var:f> := <nat:4> + <var:f> * <var:l> ; <var:f> := <nat:4> + <var:f> * <var:l> ; <var:f> := <nat:2> + <var:f> * <var:l> ; <var:f> := <nat:1> + <var:f> * <var:l> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Assuming given any positive integer coefficients $ <var:W> $ it to be that $ <var:l> = <var:W> $ before running the list of instructions it holds that we have $ <var:f> = <nat:3> \cdot <var:W> ^ <nat:4> + <nat:4> \cdot <var:W> ^ <nat:3> + <nat:4> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:1> $ after segment of code is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:W> \} \\ <var:f> := <nat:3> ; \\ \{ <var:l> = <var:W> \land <var:f> = <nat:3> \} \\ <var:f> := <nat:4> + <var:f> * <var:l> ; \\ \{ <var:l> = <var:W> \land <var:f> = <nat:3> \times <var:W> + <nat:4> \} \\ <var:f> := <nat:4> + <var:f> * <var:l> ; \\ \{ <var:l> = <var:W> \land <var:f> = <nat:3> \times <var:W> ^ <nat:2> + <nat:4> \times <var:W> + <nat:4> \} \\ <var:f> := <nat:2> + <var:f> * <var:l> ; \\ \{ <var:l> = <var:W> \land <var:f> = <nat:3> \times <var:W> ^ <nat:3> + <nat:4> \times <var:W> ^ <nat:2> + <nat:4> \times <var:W> + <nat:2> \} \\ <var:f> := <nat:1> + <var:f> * <var:l> \\ \{ <var:l> = <var:W> \land <var:f> = <nat:3> \times <var:W> ^ <nat:4> + <nat:4> \times <var:W> ^ <nat:3> + <nat:4> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:3> ; <var:f> := <nat:4> + <var:f> * <var:l> ; <var:f> := <nat:4> + <var:f> * <var:l> ; <var:f> := <nat:2> + <var:f> * <var:l> ; <var:f> := <nat:1> + <var:f> * <var:l> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:l> = <var:W> }} <def:poly> {{ <var:f> = <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:f> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:f> = <nat:3> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:f> = <nat:3> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:f> = <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:4> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:W> /\ <var:f> = <nat:3> * <var:W> ^ <nat:4> + <nat:4> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 