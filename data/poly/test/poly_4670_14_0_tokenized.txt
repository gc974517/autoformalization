\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:1> ; <var:N1> := <nat:5> ; <var:N1> := <var:N1> * <var:I> ; <var:N2> := <nat:2> ; <var:N2> := <var:N2> * <var:I> ; <var:N2> := <var:N2> * <var:I> ; <var:N3> := <nat:3> ; <var:N3> := <var:N3> * <var:I> ; <var:N3> := <var:N3> * <var:I> ; <var:N3> := <var:N3> * <var:I> ; <var:u> := <var:N3> ; <var:u> := <var:u> + <var:N2> ; <var:u> := <var:u> + <var:N1> ; <var:u> := <var:u> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> . Assuming that we have $ <var:I> = <var:A> $ prior to the evaluation of the code it holds that we have $ <var:u> = <nat:3> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:5> \times <var:A> + <nat:1> $ after series of commands has exited . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning results in : \begin{eqnarray} \{ <var:I> = <var:A> \} \\ <var:N0> := <nat:1> ; \\ \{ <var:I> = <var:A> \land <var:N0> = <nat:1> \} \\ <var:N1> := <nat:5> ; \\ \{ <var:I> = <var:A> \land <var:N0> = <nat:1> \land <var:N1> = <nat:5> \} \\ <var:N1> := <var:N1> * <var:I> ; \\ \{ <var:I> = <var:A> \land <var:N0> = <nat:1> \land <var:N1> = <nat:5> * <var:A> \} \\ <var:N2> := <nat:2> ; \\ \{ <var:I> = <var:A> \land <var:N0> = <nat:1> \land <var:N1> = <nat:5> * <var:A> \land <var:N2> = <nat:2> \} \\ <var:N2> := <var:N2> * <var:I> ; \\ \{ <var:I> = <var:A> \land <var:N0> = <nat:1> \land <var:N1> = <nat:5> * <var:A> \land <var:N2> = <nat:2> * <var:A> \} \\ <var:N2> := <var:N2> * <var:I> ; \\ \{ <var:I> = <var:A> \land <var:N0> = <nat:1> \land <var:N1> = <nat:5> * <var:A> \land <var:N2> = <nat:2> * <var:A> ^ <nat:2> \} \\ <var:N3> := <nat:3> ; \\ \{ <var:I> = <var:A> \land <var:N0> = <nat:1> \land <var:N1> = <nat:5> * <var:A> \land <var:N2> = <nat:2> * <var:A> ^ <nat:2> \land <var:N3> = <nat:3> \} \\ <var:N3> := <var:N3> * <var:I> ; \\ \{ <var:I> = <var:A> \land <var:N0> = <nat:1> \land <var:N1> = <nat:5> * <var:A> \land <var:N2> = <nat:2> * <var:A> ^ <nat:2> \land <var:N3> = <nat:3> * <var:A> \} \\ <var:N3> := <var:N3> * <var:I> ; \\ \{ <var:I> = <var:A> \land <var:N0> = <nat:1> \land <var:N1> = <nat:5> * <var:A> \land <var:N2> = <nat:2> * <var:A> ^ <nat:2> \land <var:N3> = <nat:3> * <var:A> ^ <nat:2> \} \\ <var:N3> := <var:N3> * <var:I> ; \\ \{ <var:I> = <var:A> \land <var:N0> = <nat:1> \land <var:N1> = <nat:5> * <var:A> \land <var:N2> = <nat:2> * <var:A> ^ <nat:2> \land <var:N3> = <nat:3> * <var:A> ^ <nat:3> \} \\ <var:u> := <var:N3> ; \\ \{ <var:I> = <var:A> \land <var:N0> = <nat:1> \land <var:N1> = <nat:5> * <var:A> \land <var:N2> = <nat:2> * <var:A> ^ <nat:2> \land <var:u> = <nat:3> * <var:A> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:N2> ; \\ \{ <var:I> = <var:A> \land <var:N0> = <nat:1> \land <var:N1> = <nat:5> * <var:A> \land <var:u> = <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:N1> ; \\ \{ <var:I> = <var:A> \land <var:N0> = <nat:1> \land <var:u> = <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:5> * <var:A> \} \\ <var:u> := <var:u> + <var:N0> \\ \{ <var:I> = <var:A> \land <var:u> = <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:1> \} \end{eqnarray} As a result , this series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N0> := <nat:1> ; <var:N1> := <nat:5> ; <var:N1> := <var:N1> * <var:I> ; <var:N2> := <nat:2> ; <var:N2> := <var:N2> * <var:I> ; <var:N2> := <var:N2> * <var:I> ; <var:N3> := <nat:3> ; <var:N3> := <var:N3> * <var:I> ; <var:N3> := <var:N3> * <var:I> ; <var:N3> := <var:N3> * <var:I> ; <var:u> := <var:N3> ; <var:u> := <var:u> + <var:N2> ; <var:u> := <var:u> + <var:N1> ; <var:u> := <var:u> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:I> = <var:A> }} <def:poly> {{ <var:u> = <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:N0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:5> * <var:A> /\ <var:N2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:5> * <var:A> /\ <var:N2> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:5> * <var:A> /\ <var:N2> = <nat:2> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:5> * <var:A> /\ <var:N2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:N3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:5> * <var:A> /\ <var:N2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:N3> = <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:5> * <var:A> /\ <var:N2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:N3> = <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:5> * <var:A> /\ <var:N2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:N3> = <nat:3> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:5> * <var:A> /\ <var:N2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:u> = <nat:3> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:N0> = <nat:1> /\ <var:N1> = <nat:5> * <var:A> /\ <var:u> = <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:N0> = <nat:1> /\ <var:u> = <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:u> = <nat:3> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 