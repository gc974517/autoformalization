\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:V1> := <var:A> ; <var:V0> := <nat:7> ; <var:V1> := <var:V1> * <nat:5> ; <var:U> := <var:V1> <var:U> := <var:U> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Allowing that we have $ <var:A> = <var:D> $ prior to executing the list of instructions it follows that $ <var:U> = <nat:5> * <var:D> + <nat:7> $ . \end{theorem} \begin{proof} The argument for this program is clear using typical Hoare logic . Observing the following statements in our program , \verb | { <var:A> = <var:D> } <var:V1> := <var:A> { <var:A> = <var:D> \land <var:V1> = <var:D> } | , \verb | { <var:A> = <var:D> \land <var:V1> = <var:D> } <var:V0> := <nat:7> { <var:A> = <var:D> \land <var:V1> = <var:D> \land <var:V0> = <nat:7> } | , \verb | { <var:A> = <var:D> \land <var:V1> = <var:D> \land <var:V0> = <nat:7> } <var:V1> := <var:V1> * <nat:5> { <var:A> = <var:D> \land <var:V1> = <nat:5> \cdot <var:D> \land <var:V0> = <nat:7> } | , \verb | { <var:A> = <var:D> \land <var:V1> = <nat:5> \cdot <var:D> \land <var:V0> = <nat:7> } <var:U> := <var:V1{ <var:A> = <var:D> \land <var:V0> = <nat:7> \land <var:U> = <nat:5> \cdot <var:D> } | and \verb | { <var:A> = <var:D> \land <var:V0> = <nat:7> \land <var:U> = <nat:5> \cdot <var:D> } <var:U> := <var:U> + <var:V0{ <var:A> = <var:D> \land <var:U> = <nat:5> \cdot <var:D> + <nat:7> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:A> ; <var:V0> := <nat:7> ; <var:V1> := <var:V1> * <nat:5> ; <var:U> := <var:V1> <var:U> := <var:U> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:A> = <var:D> }} <def:poly> {{ <var:U> = <nat:5> * <var:D> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:D> /\ <var:V1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:D> /\ <var:V1> = <var:D> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:D> /\ <var:V1> = <nat:5> * <var:D> /\ <var:V0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:D> /\ <var:V0> = <nat:7> /\ <var:U> = <nat:5> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:D> /\ <var:U> = <nat:5> * <var:D> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 