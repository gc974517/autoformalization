\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u1> := <var:i> ; <var:u2> := <var:u1> * <var:i> ; <var:u3> := <var:u2> * <var:i> ; <var:u4> := <var:u3> * <var:i> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:4> ; <var:u2> := <var:u2> * <nat:3> ; <var:u3> := <var:u3> * <nat:1> ; <var:u4> := <var:u4> * <nat:1> ; <var:N> := <var:u4> <var:N> := <var:N> + <var:u3> <var:N> := <var:N> + <var:u2> <var:N> := <var:N> + <var:u1> <var:N> := <var:N> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> . Allowing $ <var:i> = <var:r> $ prior to the evaluation of the list of commands it holds that we see $ <var:N> = <nat:1> \times <var:r> ^ <nat:4> + <nat:1> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> ^ <nat:2> + <nat:4> \times <var:r> + <nat:3> $ . \end{theorem} \begin{proof} The application of Hoare logic results in : \begin{eqnarray} \{ <var:i> = <var:r> \} \\ <var:u1> := <var:i> ; \\ \{ <var:i> = <var:r> \land <var:u1> = <var:r> \} \\ <var:u2> := <var:u1> * <var:i> ; \\ \{ <var:i> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:i> ; \\ \{ <var:i> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \} \\ <var:u4> := <var:u3> * <var:i> ; \\ \{ <var:i> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \} \\ <var:u0> := <nat:3> ; \\ \{ <var:i> = <var:r> \land <var:u1> = <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \land <var:u0> = <nat:3> \} \\ <var:u1> := <var:u1> * <nat:4> ; \\ \{ <var:i> = <var:r> \land <var:u1> = <nat:4> \cdot <var:r> \land <var:u2> = <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \land <var:u0> = <nat:3> \} \\ <var:u2> := <var:u2> * <nat:3> ; \\ \{ <var:i> = <var:r> \land <var:u1> = <nat:4> \cdot <var:r> \land <var:u2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:u3> = <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \land <var:u0> = <nat:3> \} \\ <var:u3> := <var:u3> * <nat:1> ; \\ \{ <var:i> = <var:r> \land <var:u1> = <nat:4> \cdot <var:r> \land <var:u2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:u3> = <nat:1> \cdot <var:r> ^ <nat:3> \land <var:u4> = <var:r> ^ <nat:4> \land <var:u0> = <nat:3> \} \\ <var:u4> := <var:u4> * <nat:1> ; \\ \{ <var:i> = <var:r> \land <var:u1> = <nat:4> \cdot <var:r> \land <var:u2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:u3> = <nat:1> \cdot <var:r> ^ <nat:3> \land <var:u4> = <nat:1> \cdot <var:r> ^ <nat:4> \land <var:u0> = <nat:3> \} \\ <var:N> := <var:u4> \\ \{ <var:i> = <var:r> \land <var:u1> = <nat:4> \cdot <var:r> \land <var:u2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:u3> = <nat:1> \cdot <var:r> ^ <nat:3> \land <var:u0> = <nat:3> \land <var:N> = <nat:1> \cdot <var:r> ^ <nat:4> \} \\ <var:N> := <var:N> + <var:u3> \\ \{ <var:i> = <var:r> \land <var:u1> = <nat:4> \cdot <var:r> \land <var:u2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:u0> = <nat:3> \land <var:N> = <nat:1> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> \} \\ <var:N> := <var:N> + <var:u2> \\ \{ <var:i> = <var:r> \land <var:u1> = <nat:4> \cdot <var:r> \land <var:u0> = <nat:3> \land <var:N> = <nat:1> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:u1> \\ \{ <var:i> = <var:r> \land <var:u0> = <nat:3> \land <var:N> = <nat:1> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> \} \\ <var:N> := <var:N> + <var:u0> \\ \{ <var:i> = <var:r> \land <var:N> = <nat:1> \cdot <var:r> ^ <nat:4> + <nat:1> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:3> \} \end{eqnarray} As a result , the series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <var:u4> : string := " <var:u4> " . Definition <def:poly> := <var:u1> := <var:i> ; <var:u2> := <var:u1> * <var:i> ; <var:u3> := <var:u2> * <var:i> ; <var:u4> := <var:u3> * <var:i> ; <var:u0> := <nat:3> ; <var:u1> := <var:u1> * <nat:4> ; <var:u2> := <var:u2> * <nat:3> ; <var:u3> := <var:u3> * <nat:1> ; <var:u4> := <var:u4> * <nat:1> ; <var:N> := <var:u4> <var:N> := <var:N> + <var:u3> <var:N> := <var:N> + <var:u2> <var:N> := <var:N> + <var:u1> <var:N> := <var:N> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:i> = <var:r> }} <def:poly> {{ <var:N> = <nat:1> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:u1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:u1> = <var:r> /\ <var:u2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:u1> = <var:r> /\ <var:u2> = <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:u1> = <var:r> /\ <var:u2> = <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> /\ <var:u4> = <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:u1> = <var:r> /\ <var:u2> = <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> /\ <var:u4> = <var:r> ^ <nat:4> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:u1> = <nat:4> * <var:r> /\ <var:u2> = <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> /\ <var:u4> = <var:r> ^ <nat:4> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:u1> = <nat:4> * <var:r> /\ <var:u2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:u3> = <var:r> ^ <nat:3> /\ <var:u4> = <var:r> ^ <nat:4> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:u1> = <nat:4> * <var:r> /\ <var:u2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:r> ^ <nat:3> /\ <var:u4> = <var:r> ^ <nat:4> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:u1> = <nat:4> * <var:r> /\ <var:u2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:r> ^ <nat:3> /\ <var:u4> = <nat:1> * <var:r> ^ <nat:4> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:u1> = <nat:4> * <var:r> /\ <var:u2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:r> ^ <nat:3> /\ <var:u0> = <nat:3> /\ <var:N> = <nat:1> * <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:u1> = <nat:4> * <var:r> /\ <var:u2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:u0> = <nat:3> /\ <var:N> = <nat:1> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:u1> = <nat:4> * <var:r> /\ <var:u0> = <nat:3> /\ <var:N> = <nat:1> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:u0> = <nat:3> /\ <var:N> = <nat:1> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:r> /\ <var:N> = <nat:1> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 