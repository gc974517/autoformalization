\begin{document} \begin{theorem} Consider the following program in \emph{Imp} such that \begin{verbatim} <var:N0> := <nat:3> ; <var:z> := <var:N0> \end{verbatim} Given that $ <var:n> = <var:W> $ ahead of the execution of our program , it follows that we see $ <var:z> = <nat:3> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques yields : \begin{eqnarray} \{ <var:n> = <var:W> \} \\ <var:N0> := <nat:3> ; \\ \{ <var:n> = <var:W> \land <var:N0> = <nat:3> \} \end{eqnarray} Allowing the execution of this list of instructions yields : \begin{eqnarray} <var:z> := <var:N0> \\ \{ <var:n> = <var:W> \land <var:z> = <nat:3> \} \end{eqnarray} As a result , this code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:n> = <var:W> }} <var:N0> := <nat:3> ; <var:z> := <var:N0> {{ <var:z> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:W> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:W> /\ <var:z> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 