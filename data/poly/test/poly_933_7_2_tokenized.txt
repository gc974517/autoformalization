\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:f> := <nat:4> ; <var:f> := <nat:1> + <var:f> * <var:A> ; <var:f> := <nat:2> + <var:f> * <var:A> ; <var:f> := <var:f> * <var:A> ; <var:f> := <nat:4> + <var:f> * <var:A> ; <var:f> := <nat:3> + <var:f> * <var:A> ; <var:f> := <nat:2> + <var:f> * <var:A> \end{verbatim} Assume ( with some positive coefficients $ <var:x> $ ) it to hold that $ <var:A> = <var:x> $ before executing this set of commands , then we have $ <var:f> = <nat:4> \cdot <var:x> ^ <nat:6> + <nat:1> \cdot <var:x> ^ <nat:5> + <nat:2> \cdot <var:x> ^ <nat:4> + <nat:4> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> + <nat:2> $ . \end{theorem} \begin{proof} Using Hoare techniques results in : \begin{eqnarray} \{ <var:A> = <var:x> \} \\ <var:f> := <nat:4> ; \\ \{ <var:A> = <var:x> \land <var:f> = <nat:4> \} \\ <var:f> := <nat:1> + <var:f> * <var:A> ; \\ \{ <var:A> = <var:x> \land <var:f> = <nat:4> * <var:x> + <nat:1> \} \\ <var:f> := <nat:2> + <var:f> * <var:A> ; \\ \{ <var:A> = <var:x> \land <var:f> = <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> \} \\ <var:f> := <var:f> * <var:A> ; \\ \{ <var:A> = <var:x> \land <var:f> = <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + \} \\ <var:f> := <nat:4> + <var:f> * <var:A> ; \\ \{ <var:A> = <var:x> \land <var:f> = <nat:4> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> \} \\ <var:f> := <nat:3> + <var:f> * <var:A> ; \\ \{ <var:A> = <var:x> \land <var:f> = <nat:4> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> + <nat:3> \} \\ <var:f> := <nat:2> + <var:f> * <var:A> \\ \{ <var:A> = <var:x> \land <var:f> = <nat:4> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:2> \} \end{eqnarray} Therefore , this series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:A> = <var:x> }} <var:f> := <nat:4> ; <var:f> := <nat:1> + <var:f> * <var:A> ; <var:f> := <nat:2> + <var:f> * <var:A> ; <var:f> := <var:f> * <var:A> ; <var:f> := <nat:4> + <var:f> * <var:A> ; <var:f> := <nat:3> + <var:f> * <var:A> ; <var:f> := <nat:2> + <var:f> * <var:A> {{ <var:f> = <nat:4> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:f> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:f> = <nat:4> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:f> = <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:f> = <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:f> = <nat:4> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:f> = <nat:4> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:x> /\ <var:f> = <nat:4> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 