\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} such that \begin{verbatim} <var:b> := <nat:4> ; <var:b> := <nat:1> + <var:b> * <var:e> ; <var:b> := <var:b> * <var:e> ; <var:b> := <nat:1> + <var:b> * <var:e> ; <var:b> := <nat:2> + <var:b> * <var:e> ; <var:b> := <nat:3> + <var:b> * <var:e> \end{verbatim} Given that $ <var:e> = <var:t> $ prior to the evaluation of this series of instructions , it must be that $ <var:b> = <nat:4> \times <var:t> ^ <nat:5> + <nat:1> \times <var:t> ^ <nat:4> + <nat:1> \times <var:t> ^ <nat:2> + <nat:2> \times <var:t> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this list of instructions can be demonstrated by standard Hoare logic . Moving forward , \begin{eqnarray} \{ <var:e> = <var:t> \} \, <var:b> := <nat:4> \, \{ <var:e> = <var:t> \land <var:b> = <nat:4> \} \end{eqnarray} Going to the next step , we have \begin{eqnarray} \{ <var:e> = <var:t> \} \, <var:b> := <nat:4> \, \{ <var:e> = <var:t> \land <var:b> = <nat:4> \} \\ \{ <var:e> = <var:t> \land <var:b> = <nat:4> \} \, <var:b> := <nat:1> + <var:b> * <var:e> \, \{ <var:e> = <var:t> \land <var:b> = <nat:4> \cdot <var:t> + <nat:1> \} \end{eqnarray} Moving forward to the next step , we have \begin{eqnarray} \{ <var:e> = <var:t> \} \, <var:b> := <nat:4> \, \{ <var:e> = <var:t> \land <var:b> = <nat:4> \} \\ \{ <var:e> = <var:t> \land <var:b> = <nat:4> \} \, <var:b> := <nat:1> + <var:b> * <var:e> \, \{ <var:e> = <var:t> \land <var:b> = <nat:4> \cdot <var:t> + <nat:1> \} \end{eqnarray} This is given through the variable update law in usual Hoare logic . Advancing on , we have \begin{eqnarray} \{ <var:e> = <var:t> \} \, <var:b> := <nat:4> \, \{ <var:e> = <var:t> \land <var:b> = <nat:4> \} \end{eqnarray} This is shown by the binding law defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:e> = <var:t> }} <var:b> := <nat:4> ; <var:b> := <nat:1> + <var:b> * <var:e> ; <var:b> := <var:b> * <var:e> ; <var:b> := <nat:1> + <var:b> * <var:e> ; <var:b> := <nat:2> + <var:b> * <var:e> ; <var:b> := <nat:3> + <var:b> * <var:e> {{ <var:b> = <nat:4> * <var:t> ^ <nat:5> + <nat:1> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:b> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:b> = <nat:4> * <var:t> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:b> = <nat:4> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:b> = <nat:4> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:b> = <nat:4> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:1> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:t> /\ <var:b> = <nat:4> * <var:t> ^ <nat:5> + <nat:1> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 