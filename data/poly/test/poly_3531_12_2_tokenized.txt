\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as \begin{verbatim} <var:z> := <nat:1> ; <var:z> := <nat:2> + <var:z> * <var:Q> ; <var:z> := <nat:3> + <var:z> * <var:Q> ; <var:z> := <nat:2> + <var:z> * <var:Q> ; <var:z> := <nat:2> + <var:z> * <var:Q> ; <var:z> := <nat:3> + <var:z> * <var:Q> ; <var:z> := <nat:4> + <var:z> * <var:Q> ; <var:z> := <nat:1> + <var:z> * <var:Q> ; <var:z> := <var:z> * <var:Q> ; <var:z> := <nat:1> + <var:z> * <var:Q> ; <var:z> := <nat:1> + <var:z> * <var:Q> ; <var:z> := <nat:3> + <var:z> * <var:Q> \end{verbatim} Allowing it to be that $ <var:Q> = <var:q> $ prior to the evaluation of our set of instructions it must be that we have $ <var:z> = <nat:1> \times <var:q> ^ <nat:11> + <nat:2> \times <var:q> ^ <nat:10> + <nat:3> \times <var:q> ^ <nat:9> + <nat:2> \times <var:q> ^ <nat:8> + <nat:2> \times <var:q> ^ <nat:7> + <nat:3> \times <var:q> ^ <nat:6> + <nat:4> \times <var:q> ^ <nat:5> + <nat:1> \times <var:q> ^ <nat:4> + <nat:1> \times <var:q> ^ <nat:2> + <nat:1> \times <var:q> + <nat:3> $ . \end{theorem} \begin{proof} Using standard Hoare logic returns : \begin{eqnarray} \{ <var:Q> = <var:q> \} \\ <var:z> := <nat:1> ; \\ \{ <var:Q> = <var:q> \land <var:z> = <nat:1> \} \\ <var:z> := <nat:2> + <var:z> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:z> = <nat:1> * <var:q> + <nat:2> \} \\ <var:z> := <nat:3> + <var:z> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:z> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:3> \} \\ <var:z> := <nat:2> + <var:z> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:z> = <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> \} \\ <var:z> := <nat:2> + <var:z> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:z> = <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> \} \\ <var:z> := <nat:3> + <var:z> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:z> = <nat:1> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:3> \} \\ <var:z> := <nat:4> + <var:z> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:z> = <nat:1> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:4> \} \\ <var:z> := <nat:1> + <var:z> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:z> = <nat:1> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:1> \} \\ <var:z> := <var:z> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:z> = <nat:1> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:3> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + \} \\ <var:z> := <nat:1> + <var:z> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:z> = <nat:1> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:8> + <nat:3> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:1> \} \\ <var:z> := <nat:1> + <var:z> * <var:Q> ; \\ \{ <var:Q> = <var:q> \land <var:z> = <nat:1> * <var:q> ^ <nat:10> + <nat:2> * <var:q> ^ <nat:9> + <nat:3> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:1> \} \\ <var:z> := <nat:3> + <var:z> * <var:Q> \\ \{ <var:Q> = <var:q> \land <var:z> = <nat:1> * <var:q> ^ <nat:11> + <nat:2> * <var:q> ^ <nat:10> + <nat:3> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:3> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> \} \end{eqnarray} Thusly , our set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:Q> = <var:q> }} <var:z> := <nat:1> ; <var:z> := <nat:2> + <var:z> * <var:Q> ; <var:z> := <nat:3> + <var:z> * <var:Q> ; <var:z> := <nat:2> + <var:z> * <var:Q> ; <var:z> := <nat:2> + <var:z> * <var:Q> ; <var:z> := <nat:3> + <var:z> * <var:Q> ; <var:z> := <nat:4> + <var:z> * <var:Q> ; <var:z> := <nat:1> + <var:z> * <var:Q> ; <var:z> := <var:z> * <var:Q> ; <var:z> := <nat:1> + <var:z> * <var:Q> ; <var:z> := <nat:1> + <var:z> * <var:Q> ; <var:z> := <nat:3> + <var:z> * <var:Q> {{ <var:z> = <nat:1> * <var:q> ^ <nat:11> + <nat:2> * <var:q> ^ <nat:10> + <nat:3> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:3> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:z> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:z> = <nat:1> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:z> = <nat:1> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:z> = <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:z> = <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:z> = <nat:1> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:z> = <nat:1> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:z> = <nat:1> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:z> = <nat:1> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:3> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:2> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:z> = <nat:1> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:8> + <nat:3> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:2> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:z> = <nat:1> * <var:q> ^ <nat:10> + <nat:2> * <var:q> ^ <nat:9> + <nat:3> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:2> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:1> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:q> /\ <var:z> = <nat:1> * <var:q> ^ <nat:11> + <nat:2> * <var:q> ^ <nat:10> + <nat:3> * <var:q> ^ <nat:9> + <nat:2> * <var:q> ^ <nat:8> + <nat:2> * <var:q> ^ <nat:7> + <nat:3> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 