\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C1> := <var:W> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:1> ; <var:h> := <var:C1> <var:h> := <var:h> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:W> = <var:c> $ prior to evaluating our code it follows that $ <var:h> = <nat:1> \cdot <var:c> + <nat:1> $ after series of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:c> \} \\ <var:C1> := <var:W> ; \\ \{ <var:W> = <var:c> \land <var:C1> = <var:c> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:W> = <var:c> \land <var:C1> = <var:c> \land <var:C0> = <nat:1> \} \\ <var:C1> := <var:C1> * <nat:1> ; \\ \{ <var:W> = <var:c> \land <var:C1> = <nat:1> \cdot <var:c> \land <var:C0> = <nat:1> \} \\ <var:h> := <var:C1> \\ \{ <var:W> = <var:c> \land <var:C0> = <nat:1> \land <var:h> = <nat:1> \cdot <var:c> \} \\ <var:h> := <var:h> + <var:C0> \\ \{ <var:W> = <var:c> \land <var:h> = <nat:1> \cdot <var:c> + <nat:1> \} \end{eqnarray} Utilizing Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C1> := <var:W> ; <var:C0> := <nat:1> ; <var:C1> := <var:C1> * <nat:1> ; <var:h> := <var:C1> <var:h> := <var:h> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:W> = <var:c> }} <def:poly> {{ <var:h> = <nat:1> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:C1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:C1> = <var:c> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:C1> = <nat:1> * <var:c> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:C0> = <nat:1> /\ <var:h> = <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:c> /\ <var:h> = <nat:1> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 