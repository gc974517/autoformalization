\begin{document} \begin{theorem} Define a code in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:2> ; <var:S1> := <nat:3> ; <var:S1> := <var:S1> * <var:X> ; <var:E> := <var:S1> ; <var:E> := <var:E> + <var:S0> \end{verbatim} Assume it to be that $ <var:X> = <var:F> $ --- given every integers $ <var:F> $ --- before interpreting our list of commands it follows that $ <var:E> = <nat:3> \cdot <var:F> + <nat:2> $ after segment of code terminates . \end{theorem} \begin{proof} Showing our claim about correctness for this set of instructions is given by Hoare reasoning . Advancing on , we have \verb | { <var:X> = <var:F> } <var:S0> := <nat:2> { <var:X> = <var:F> \land <var:S0> = <nat:2> } | , \verb | { <var:X> = <var:F> \land <var:S0> = <nat:2> } <var:S1> := <nat:3> { <var:X> = <var:F> \land <var:S0> = <nat:2> \land <var:S1> = <nat:3> } | , \verb | { <var:X> = <var:F> \land <var:S0> = <nat:2> \land <var:S1> = <nat:3> } <var:S1> := <var:S1> * <var:X> { <var:X> = <var:F> \land <var:S0> = <nat:2> \land <var:S1> = <nat:3> \times <var:F> } | , \verb | { <var:X> = <var:F> \land <var:S0> = <nat:2> \land <var:S1> = <nat:3> \times <var:F> } <var:E> := <var:S1> { <var:X> = <var:F> \land <var:S0> = <nat:2> \land <var:E> = <nat:3> \times <var:F> } | and \verb | { <var:X> = <var:F> \land <var:S0> = <nat:2> \land <var:E> = <nat:3> \times <var:F> } <var:E> := <var:E> + <var:S0{ <var:X> = <var:F> \land <var:E> = <nat:3> \times <var:F> + <nat:2> } | . This is given by the environment update scheme of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:X> = <var:F> }} <var:S0> := <nat:2> ; <var:S1> := <nat:3> ; <var:S1> := <var:S1> * <var:X> ; <var:E> := <var:S1> ; <var:E> := <var:E> + <var:S0> {{ <var:E> = <nat:3> * <var:F> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:F> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:F> /\ <var:S0> = <nat:2> /\ <var:S1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:F> /\ <var:S0> = <nat:2> /\ <var:S1> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:F> /\ <var:S0> = <nat:2> /\ <var:E> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:F> /\ <var:E> = <nat:3> * <var:F> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 