\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:4> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:s> ; <var:q2> := <nat:3> ; <var:q2> := <var:q2> * <var:s> ; <var:q2> := <var:q2> * <var:s> ; <var:w> := <var:q2> ; <var:w> := <var:w> + <var:q1> ; <var:w> := <var:w> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> . Allow --- given every natural numbers $ <var:x> $ --- $ <var:s> = <var:x> $ prior to interpreting the segment of code , then we see $ <var:w> = <nat:3> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> + <nat:4> $ . \end{theorem} \begin{proof} Let this decorated list of instructions . \begin{eqnarray} \{ <var:s> = <var:x> \} \\ <var:q0> := <nat:4> ; \\ \{ <var:s> = <var:x> \land <var:q0> = <nat:4> \} \\ <var:q1> := <nat:2> ; \\ \{ <var:s> = <var:x> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> \} \\ <var:q1> := <var:q1> * <var:s> ; \\ \{ <var:s> = <var:x> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:x> \} \end{eqnarray} Continuing executing this list of instructions yields : \begin{eqnarray} <var:q2> := <nat:3> ; \\ \{ <var:s> = <var:x> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:x> \land <var:q2> = <nat:3> \} \\ <var:q2> := <var:q2> * <var:s> ; \\ \{ <var:s> = <var:x> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:x> \land <var:q2> = <nat:3> * <var:x> \} \\ <var:q2> := <var:q2> * <var:s> ; \\ \{ <var:s> = <var:x> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:x> \land <var:q2> = <nat:3> * <var:x> ^ <nat:2> \} \\ <var:w> := <var:q2> ; \\ \{ <var:s> = <var:x> \land <var:q0> = <nat:4> \land <var:q1> = <nat:2> * <var:x> \land <var:w> = <nat:3> * <var:x> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:q1> ; \\ \{ <var:s> = <var:x> \land <var:q0> = <nat:4> \land <var:w> = <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> \} \\ <var:w> := <var:w> + <var:q0> \\ \{ <var:s> = <var:x> \land <var:w> = <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> \} \end{eqnarray} Using standard Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q0> := <nat:4> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:s> ; <var:q2> := <nat:3> ; <var:q2> := <var:q2> * <var:s> ; <var:q2> := <var:q2> * <var:s> ; <var:w> := <var:q2> ; <var:w> := <var:w> + <var:q1> ; <var:w> := <var:w> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:s> = <var:x> }} <def:poly> {{ <var:w> = <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:2> * <var:x> /\ <var:q2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:2> * <var:x> /\ <var:q2> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:2> * <var:x> /\ <var:q2> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:2> * <var:x> /\ <var:w> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:q0> = <nat:4> /\ <var:w> = <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:x> /\ <var:w> = <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 