\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:Z1> := <var:S> ; <var:Z0> := <nat:9> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:g> := <var:Z1> <var:g> := <var:g> + <var:Z0> \end{verbatim} Given it to hold that $ <var:S> = <var:B> $ --- assuming some positive integers $ <var:B> $ --- before running the code segment , it holds that we have $ <var:g> = <nat:3> \times <var:B> + <nat:9> $ after series of instructions finishes . \end{theorem} \begin{proof} The flow of logic for this set of commands is given using typical Hoare techniques . Taking a look at the subsequent bits of codecontained in our set of instructions , we have \begin{eqnarray} \{ <var:S> = <var:B> \} \, <var:Z1> := <var:S> \, \{ <var:S> = <var:B> \land <var:Z1> = <var:B> \} \\ \{ <var:S> = <var:B> \land <var:Z1> = <var:B> \} \, <var:Z0> := <nat:9> \, \{ <var:S> = <var:B> \land <var:Z1> = <var:B> \land <var:Z0> = <nat:9> \} \\ \{ <var:S> = <var:B> \land <var:Z1> = <var:B> \land <var:Z0> = <nat:9> \} \, <var:Z1> := <var:Z1> * <nat:3> \, \{ <var:S> = <var:B> \land <var:Z1> = <nat:3> \times <var:B> \land <var:Z0> = <nat:9> \} \\ \{ <var:S> = <var:B> \land <var:Z1> = <nat:3> \times <var:B> \land <var:Z0> = <nat:9> \} \, <var:g> := <var:Z1\, \{ <var:S> = <var:B> \land <var:Z0> = <nat:9> \land <var:g> = <nat:3> \times <var:B> \} \end{eqnarray} This is given by the variable binding law defined by Hoare techniques . Moving onward , we see \begin{eqnarray} \{ <var:S> = <var:B> \} \, <var:Z1> := <var:S> \, \{ <var:S> = <var:B> \land <var:Z1> = <var:B> \} \end{eqnarray} This is ensured through the variable binding scheme from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:S> = <var:B> }} <var:Z1> := <var:S> ; <var:Z0> := <nat:9> ; <var:Z1> := <var:Z1> * <nat:3> ; <var:g> := <var:Z1> <var:g> := <var:g> + <var:Z0> {{ <var:g> = <nat:3> * <var:B> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:Z1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:Z1> = <var:B> /\ <var:Z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:Z1> = <nat:3> * <var:B> /\ <var:Z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:Z0> = <nat:9> /\ <var:g> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:B> /\ <var:g> = <nat:3> * <var:B> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 