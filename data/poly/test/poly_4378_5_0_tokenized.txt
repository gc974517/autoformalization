\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K0> := <nat:7> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:x> ; <var:n> := <var:K1> ; <var:n> := <var:n> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> in \emph{Imp} . Allowing it to be that $ <var:x> = <var:d> $ for all $ <var:d> \in \mathbb{N} $ before running our code segment , it holds that $ <var:n> = <nat:4> \cdot <var:d> + <nat:7> $ when list of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:d> \} \\ <var:K0> := <nat:7> ; \\ \{ <var:x> = <var:d> \land <var:K0> = <nat:7> \} \\ <var:K1> := <nat:4> ; \\ \{ <var:x> = <var:d> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> \} \\ <var:K1> := <var:K1> * <var:x> ; \\ \{ <var:x> = <var:d> \land <var:K0> = <nat:7> \land <var:K1> = <nat:4> \cdot <var:d> \} \\ <var:n> := <var:K1> ; \\ \{ <var:x> = <var:d> \land <var:K0> = <nat:7> \land <var:n> = <nat:4> \cdot <var:d> \} \\ <var:n> := <var:n> + <var:K0> \\ \{ <var:x> = <var:d> \land <var:n> = <nat:4> \cdot <var:d> + <nat:7> \} \end{eqnarray} Using usual Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K0> := <nat:7> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:x> ; <var:n> := <var:K1> ; <var:n> := <var:n> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:x> = <var:d> }} <def:poly> {{ <var:n> = <nat:4> * <var:d> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:K0> = <nat:7> /\ <var:n> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:n> = <nat:4> * <var:d> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 