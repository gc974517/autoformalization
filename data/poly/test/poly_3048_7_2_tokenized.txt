\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <var:e> * <var:n> ; <var:e> := <nat:2> + <var:e> * <var:n> ; <var:e> := <var:e> * <var:n> ; <var:e> := <nat:1> + <var:e> * <var:n> ; <var:e> := <nat:4> + <var:e> * <var:n> ; <var:e> := <nat:1> + <var:e> * <var:n> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Given $ <var:n> = <var:o> $ before the evaluation of this code , then $ <var:e> = <nat:3> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:n> = <var:o> \} \\ <var:e> := <nat:3> ; \\ \{ <var:n> = <var:o> \land <var:e> = <nat:3> \} \\ <var:e> := <var:e> * <var:n> ; \\ \{ <var:n> = <var:o> \land <var:e> = <nat:3> \cdot <var:o> + \} \\ <var:e> := <nat:2> + <var:e> * <var:n> ; \\ \{ <var:n> = <var:o> \land <var:e> = <nat:3> \cdot <var:o> ^ <nat:2> + <nat:2> \} \\ <var:e> := <var:e> * <var:n> ; \\ \{ <var:n> = <var:o> \land <var:e> = <nat:3> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> + \} \\ <var:e> := <nat:1> + <var:e> * <var:n> ; \\ \{ <var:n> = <var:o> \land <var:e> = <nat:3> \cdot <var:o> ^ <nat:4> + <nat:2> \cdot <var:o> ^ <nat:2> + <nat:1> \} \\ <var:e> := <nat:4> + <var:e> * <var:n> ; \\ \{ <var:n> = <var:o> \land <var:e> = <nat:3> \cdot <var:o> ^ <nat:5> + <nat:2> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> + <nat:4> \} \\ <var:e> := <nat:1> + <var:e> * <var:n> \\ \{ <var:n> = <var:o> \land <var:e> = <nat:3> \cdot <var:o> ^ <nat:6> + <nat:2> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:1> \} \end{eqnarray} Utilizing Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:3> ; <var:e> := <var:e> * <var:n> ; <var:e> := <nat:2> + <var:e> * <var:n> ; <var:e> := <var:e> * <var:n> ; <var:e> := <nat:1> + <var:e> * <var:n> ; <var:e> := <nat:4> + <var:e> * <var:n> ; <var:e> := <nat:1> + <var:e> * <var:n> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:n> = <var:o> }} <def:poly> {{ <var:e> = <nat:3> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:e> = <nat:3> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:e> = <nat:3> * <var:o> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:e> = <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:e> = <nat:3> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:e> = <nat:3> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:e> = <nat:3> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 