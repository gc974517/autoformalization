\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:3> ; <var:C1> := <nat:3> ; <var:C1> := <var:C1> * <var:F> ; <var:C3> := <nat:4> ; <var:C3> := <var:C3> * <var:F> ; <var:C3> := <var:C3> * <var:F> ; <var:C3> := <var:C3> * <var:F> ; <var:t> := <var:C3> ; <var:t> := <var:t> + <var:C1> ; <var:t> := <var:t> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> . Assuming it to be that $ <var:F> = <var:M> $ prior to running this set of commands then we have $ <var:t> = <nat:4> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> + <nat:3> $ when set of instructions has finished . \end{theorem} \begin{proof} Arguing the correctness of this program can be seen through Hoare reasoning . Considering the following bits of codein our program , \begin{eqnarray} \{ <var:F> = <var:M> \} \, <var:C0> := <nat:3> \, \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \} \\ \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \} \, <var:C1> := <nat:3> \, \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> \} \\ \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> \} \, <var:C1> := <var:C1> * <var:F> \, \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:M> \} \\ \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:M> \} \, <var:C3> := <nat:4> \, \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:M> \land <var:C3> = <nat:4> \} \\ \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:M> \land <var:C3> = <nat:4> \} \, <var:C3> := <var:C3> * <var:F> \, \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:M> \land <var:C3> = <nat:4> * <var:M> \} \\ \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:M> \land <var:C3> = <nat:4> * <var:M> \} \, <var:C3> := <var:C3> * <var:F> \, \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:M> \land <var:C3> = <nat:4> * <var:M> ^ <nat:2> \} \\ \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:M> \land <var:C3> = <nat:4> * <var:M> ^ <nat:2> \} \, <var:C3> := <var:C3> * <var:F> \, \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:M> \land <var:C3> = <nat:4> * <var:M> ^ <nat:3> \} \\ \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:M> \land <var:C3> = <nat:4> * <var:M> ^ <nat:3> \} \, <var:t> := <var:C3> \, \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:M> \land <var:t> = <nat:4> * <var:M> ^ <nat:3> \} \\ \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:C1> = <nat:3> * <var:M> \land <var:t> = <nat:4> * <var:M> ^ <nat:3> \} \, <var:t> := <var:t> + <var:C1> \, \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \land <var:t> = <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> \} \end{eqnarray} This is guaranteed using the inference rule of typical Hoare reasoning . Considering the subsequent bit of code in the list of instructions , we see \begin{eqnarray} \{ <var:F> = <var:M> \} \, <var:C0> := <nat:3> \, \{ <var:F> = <var:M> \land <var:C0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C3> : string := " <var:C3> " . Definition <def:poly> := <var:C0> := <nat:3> ; <var:C1> := <nat:3> ; <var:C1> := <var:C1> * <var:F> ; <var:C3> := <nat:4> ; <var:C3> := <var:C3> * <var:F> ; <var:C3> := <var:C3> * <var:F> ; <var:C3> := <var:C3> * <var:F> ; <var:t> := <var:C3> ; <var:t> := <var:t> + <var:C1> ; <var:t> := <var:t> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:F> = <var:M> }} <def:poly> {{ <var:t> = <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:M> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:M> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:M> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:M> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> * <var:M> /\ <var:C3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:M> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> * <var:M> /\ <var:C3> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:M> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> * <var:M> /\ <var:C3> = <nat:4> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:M> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> * <var:M> /\ <var:C3> = <nat:4> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:M> /\ <var:C0> = <nat:3> /\ <var:C1> = <nat:3> * <var:M> /\ <var:t> = <nat:4> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:M> /\ <var:C0> = <nat:3> /\ <var:t> = <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:M> /\ <var:t> = <nat:4> * <var:M> ^ <nat:3> + <nat:3> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 