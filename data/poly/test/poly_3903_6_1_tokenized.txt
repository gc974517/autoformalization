\begin{document} \begin{theorem} Consider a list of instructions as follows \begin{verbatim} <var:V1> := <var:X> ; <var:V2> := <var:V1> * <var:X> ; <var:V0> := <nat:8> ; <var:V2> := <var:V2> * <nat:9> ; <var:w> := <var:V2> <var:w> := <var:w> + <var:V0> \end{verbatim} Assume it to hold that $ <var:X> = <var:b> $ ( given any natural coefficients $ <var:b> $ ) prior to evaluating this segment of code , it holds that we see $ <var:w> = <nat:9> \times <var:b> ^ <nat:2> + <nat:8> $ . \end{theorem} \begin{proof} Using Hoare techniques gives us : \begin{eqnarray} \{ <var:X> = <var:b> \} \\ <var:V1> := <var:X> ; \\ \{ <var:X> = <var:b> \land <var:V1> = <var:b> \} \\ <var:V2> := <var:V1> * <var:X> ; \\ \{ <var:X> = <var:b> \land <var:V1> = <var:b> \land <var:V2> = <var:b> ^ <nat:2> \} \\ <var:V0> := <nat:8> ; \\ \{ <var:X> = <var:b> \land <var:V1> = <var:b> \land <var:V2> = <var:b> ^ <nat:2> \land <var:V0> = <nat:8> \} \\ <var:V2> := <var:V2> * <nat:9> ; \\ \{ <var:X> = <var:b> \land <var:V1> = <var:b> \land <var:V2> = <nat:9> \times <var:b> ^ <nat:2> \land <var:V0> = <nat:8> \} \\ <var:w> := <var:V2> \\ \{ <var:X> = <var:b> \land <var:V1> = <var:b> \land <var:V0> = <nat:8> \land <var:w> = <nat:9> \times <var:b> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:V0> \\ \{ <var:X> = <var:b> \land <var:w> = <nat:9> \times <var:b> ^ <nat:2> + <nat:8> \} \end{eqnarray} As a result , this segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:X> = <var:b> }} <var:V1> := <var:X> ; <var:V2> := <var:V1> * <var:X> ; <var:V0> := <nat:8> ; <var:V2> := <var:V2> * <nat:9> ; <var:w> := <var:V2> <var:w> := <var:w> + <var:V0> {{ <var:w> = <nat:9> * <var:b> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:V1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:V1> = <var:b> /\ <var:V2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:V1> = <var:b> /\ <var:V2> = <var:b> ^ <nat:2> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:V1> = <var:b> /\ <var:V2> = <nat:9> * <var:b> ^ <nat:2> /\ <var:V0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:V1> = <var:b> /\ <var:V0> = <nat:8> /\ <var:w> = <nat:9> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:w> = <nat:9> * <var:b> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 