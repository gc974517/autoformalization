\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:A0> := <nat:9> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:c> ; <var:A2> := <nat:4> ; <var:A2> := <var:A2> * <var:c> ; <var:A2> := <var:A2> * <var:c> ; <var:P> := <var:A2> ; <var:P> := <var:P> + <var:A1> ; <var:P> := <var:P> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:c> = <var:G> $ before the execution of our code it holds that we see $ <var:P> = <nat:4> \cdot <var:G> ^ <nat:2> + <nat:4> \cdot <var:G> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for this series of instructions can be accomplished by typical Hoare logic . Taking a look at the upcoming steps contained in the set of commands , we have \begin{verbatim} { <var:c> = <var:G> } <var:A0> := <nat:9> { <var:c> = <var:G> \land <var:A0> = <nat:9> } { <var:c> = <var:G> \land <var:A0> = <nat:9> } <var:A1> := <nat:4> { <var:c> = <var:G> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> } \end{verbatim} This is shown to be logically sound through the variable binding scheme defined in Hoare reasoning . Considering the following lines found in the segment of code , we see \begin{verbatim} { <var:c> = <var:G> } <var:A0> := <nat:9> { <var:c> = <var:G> \land <var:A0> = <nat:9> } { <var:c> = <var:G> \land <var:A0> = <nat:9> } <var:A1> := <nat:4> { <var:c> = <var:G> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> } { <var:c> = <var:G> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> } <var:A1> := <var:A1> * <var:c> { <var:c> = <var:G> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> \times <var:G> } { <var:c> = <var:G> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> \times <var:G> } <var:A2> := <nat:4> { <var:c> = <var:G> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> \times <var:G> \land <var:A2> = <nat:4> } { <var:c> = <var:G> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> \times <var:G> \land <var:A2> = <nat:4> } <var:A2> := <var:A2> * <var:c> { <var:c> = <var:G> \land <var:A0> = <nat:9> \land <var:A1> = <nat:4> \times <var:G> \land <var:A2> = <nat:4> \times <var:G> } \end{verbatim} Taking a look at the proceeding piece of code contained in our code segment , we see \begin{verbatim} { <var:c> = <var:G> } <var:A0> := <nat:9> { <var:c> = <var:G> \land <var:A0> = <nat:9> } \end{verbatim} This is deduced with the variable update scheme defined in usual Hoare reasoning . Honing in on the subsequent bit of code in our series of instructions , we have \begin{verbatim} { <var:c> = <var:G> } <var:A0> := <nat:9> { <var:c> = <var:G> \land <var:A0> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <def:poly> := <var:A0> := <nat:9> ; <var:A1> := <nat:4> ; <var:A1> := <var:A1> * <var:c> ; <var:A2> := <nat:4> ; <var:A2> := <var:A2> * <var:c> ; <var:A2> := <var:A2> * <var:c> ; <var:P> := <var:A2> ; <var:P> := <var:P> + <var:A1> ; <var:P> := <var:P> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:c> = <var:G> }} <def:poly> {{ <var:P> = <nat:4> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:A0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:4> * <var:G> /\ <var:A2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:4> * <var:G> /\ <var:A2> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:4> * <var:G> /\ <var:A2> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:A0> = <nat:9> /\ <var:A1> = <nat:4> * <var:G> /\ <var:P> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:A0> = <nat:9> /\ <var:P> = <nat:4> * <var:G> ^ <nat:2> + <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:P> = <nat:4> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 