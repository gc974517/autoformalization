\begin{document} \begin{theorem} Let the following code such that \begin{verbatim} <var:k> := <nat:2> ; <var:k> := <nat:1> + <var:k> * <var:r> \end{verbatim} Assume with some positive integers $ <var:u> $ that we have $ <var:r> = <var:u> $ prior to the evaluation of our series of instructions then we see $ <var:k> = <nat:2> \times <var:u> + <nat:1> $ . \end{theorem} \begin{proof} The argument for our set of instructions is clear with typical Hoare reasoning . Moving forward to the next line found in our series of instructions , \verb | { <var:r> = <var:u> } <var:k> := <nat:2> { <var:r> = <var:u> \land <var:k> = <nat:2> } | . Shifting focus toward the following bit of code contained in our program , we see \verb | { <var:r> = <var:u> } <var:k> := <nat:2> { <var:r> = <var:u> \land <var:k> = <nat:2> } | . This is ensured by the environment update rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:r> = <var:u> }} <var:k> := <nat:2> ; <var:k> := <nat:1> + <var:k> * <var:r> {{ <var:k> = <nat:2> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:k> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:u> /\ <var:k> = <nat:2> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 