\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:H1> := <var:v> ; <var:H2> := <var:H1> * <var:v> ; <var:H3> := <var:H2> * <var:v> ; <var:H4> := <var:H3> * <var:v> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:2> ; <var:H2> := <var:H2> * <nat:2> ; <var:H3> := <var:H3> * <nat:3> ; <var:H4> := <var:H4> * <nat:4> ; <var:O> := <var:H4> <var:O> := <var:O> + <var:H3> <var:O> := <var:O> + <var:H2> <var:O> := <var:O> + <var:H1> <var:O> := <var:O> + <var:H0> \end{verbatim} Allow that we have $ <var:v> = <var:t> $ ahead of executing the segment of code , it follows that we have $ <var:O> = <nat:4> \times <var:t> ^ <nat:4> + <nat:3> \times <var:t> ^ <nat:3> + <nat:2> \times <var:t> ^ <nat:2> + <nat:2> \times <var:t> + <nat:3> $ when set of commands has terminated . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands is shown with standard Hoare logic . Keeping momentum , the variable update command letting $ <var:v> $ toward $ <var:H1>$ . This moves the condition $ \{ <var:v> = <var:t> \} $ toward the condition $ \{ <var:v> = <var:t> \land <var:H1> = <var:t> \} $ . Moving forward to the proceeding piece of code contained in our code segment , the variable binding line \verb | <var:H2> := <var:H1> * <var:v> ; | . This command redefines $ \{ <var:v> = <var:t> \land <var:H1> = <var:t> \} $ into $ \{ <var:v> = <var:t> \land <var:H1> = <var:t> \land <var:H2> = <var:t> ^ <nat:2> \} $ . Stepping forward , the environment update command \verb | <var:H3> := <var:H2> * <var:v> ; | . This command moves the condition $ \{ <var:v> = <var:t> \land <var:H1> = <var:t> \land <var:H2> = <var:t> ^ <nat:2> \} $ into $ \{ <var:v> = <var:t> \land <var:H1> = <var:t> \land <var:H2> = <var:t> ^ <nat:2> \land <var:H3> = <var:t> ^ <nat:3> \} $ . This is sound with the assignment inference rule in Hoare techniques . Advancing on , we have the variable update command \verb | <var:H4> := <var:H3> * <var:v> ; | . This code redefines the condition $ \{ <var:v> = <var:t> \land <var:H1> = <var:t> \land <var:H2> = <var:t> ^ <nat:2> \land <var:H3> = <var:t> ^ <nat:3> \} $ into $ \{ <var:v> = <var:t> \land <var:H1> = <var:t> \land <var:H2> = <var:t> ^ <nat:2> \land <var:H3> = <var:t> ^ <nat:3> \land <var:H4> = <var:t> ^ <nat:4> \} $ . Advancing to the subsequent line of code in the code segment , the binding code \verb | <var:H0> := <nat:3> ; | . This code takes the condition $ \{ <var:v> = <var:t> \land <var:H1> = <var:t> \land <var:H2> = <var:t> ^ <nat:2> \land <var:H3> = <var:t> ^ <nat:3> \land <var:H4> = <var:t> ^ <nat:4> \} $ into the condition $ \{ <var:v> = <var:t> \land <var:H1> = <var:t> \land <var:H2> = <var:t> ^ <nat:2> \land <var:H3> = <var:t> ^ <nat:3> \land <var:H4> = <var:t> ^ <nat:4> \land <var:H0> = <nat:3> \} $ . Keeping momentum , we see the variable update statement defining $ <var:H1> * <nat:2> $ as $ <var:H1>$ . This code transfers the condition $ \{ <var:v> = <var:t> \land <var:H1> = <var:t> \land <var:H2> = <var:t> ^ <nat:2> \land <var:H3> = <var:t> ^ <nat:3> \land <var:H4> = <var:t> ^ <nat:4> \land <var:H0> = <nat:3> \} $ as the condition $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H2> = <var:t> ^ <nat:2> \land <var:H3> = <var:t> ^ <nat:3> \land <var:H4> = <var:t> ^ <nat:4> \land <var:H0> = <nat:3> \} $ . This is rigorously given by the assignment inference rule defined in standard Hoare techniques . After , we have the variable assignmet line \verb | <var:H2> := <var:H2> * <nat:2> ; | . This redefines the condition $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H2> = <var:t> ^ <nat:2> \land <var:H3> = <var:t> ^ <nat:3> \land <var:H4> = <var:t> ^ <nat:4> \land <var:H0> = <nat:3> \} $ to the condition $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H2> = <nat:2> * <var:t> ^ <nat:2> \land <var:H3> = <var:t> ^ <nat:3> \land <var:H4> = <var:t> ^ <nat:4> \land <var:H0> = <nat:3> \} $ . Keeping momentum , we have the environment update line giving $ <var:H3> * <nat:3> $ toward $ <var:H3>$ . This moves the precondition $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H2> = <nat:2> * <var:t> ^ <nat:2> \land <var:H3> = <var:t> ^ <nat:3> \land <var:H4> = <var:t> ^ <nat:4> \land <var:H0> = <nat:3> \} $ to the postcondition $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H2> = <nat:2> * <var:t> ^ <nat:2> \land <var:H3> = <nat:3> * <var:t> ^ <nat:3> \land <var:H4> = <var:t> ^ <nat:4> \land <var:H0> = <nat:3> \} $ . Shifting focus toward the next line contained in the list of instructions , we see the variable binding statement \verb | <var:H4> := <var:H4> * <nat:4> ; | . This command takes the condition $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H2> = <nat:2> * <var:t> ^ <nat:2> \land <var:H3> = <nat:3> * <var:t> ^ <nat:3> \land <var:H4> = <var:t> ^ <nat:4> \land <var:H0> = <nat:3> \} $ to the condition $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H2> = <nat:2> * <var:t> ^ <nat:2> \land <var:H3> = <nat:3> * <var:t> ^ <nat:3> \land <var:H4> = <nat:4> * <var:t> ^ <nat:4> \land <var:H0> = <nat:3> \} $ . This is given with the assignment law defined in standard Hoare reasoning . Taking another step toward the upcoming bit of code in our segment of code , we have the variable update command \verb | <var:O> := <var:H4> | . This advances $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H2> = <nat:2> * <var:t> ^ <nat:2> \land <var:H3> = <nat:3> * <var:t> ^ <nat:3> \land <var:H4> = <nat:4> * <var:t> ^ <nat:4> \land <var:H0> = <nat:3> \} $ to the postcondition $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H2> = <nat:2> * <var:t> ^ <nat:2> \land <var:H3> = <nat:3> * <var:t> ^ <nat:3> \land <var:H0> = <nat:3> \land <var:O> = <nat:4> * <var:t> ^ <nat:4> \} $ . Shifting focus toward the following line found in our list of instructions , we see the environment update code giving $ <var:O> + <var:H3$ as $ <var:O>$ . This moves the condition $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H2> = <nat:2> * <var:t> ^ <nat:2> \land <var:H3> = <nat:3> * <var:t> ^ <nat:3> \land <var:H0> = <nat:3> \land <var:O> = <nat:4> * <var:t> ^ <nat:4> \} $ into $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H2> = <nat:2> * <var:t> ^ <nat:2> \land <var:H0> = <nat:3> \land <var:O> = <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> \} $ . This is ensured using the assignment rule given by standard Hoare reasoning . Moving onward , we have the assignment statement letting $ <var:O> + <var:H2$ into $ <var:O>$ . This statement forwards the precondition $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H2> = <nat:2> * <var:t> ^ <nat:2> \land <var:H0> = <nat:3> \land <var:O> = <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> \} $ into the condition $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H0> = <nat:3> \land <var:O> = <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> \} $ . This is known to be sound by the assignment inference rule given in typical Hoare logic . Immediately after , the variable update code giving $ <var:O> + <var:H1$ toward $ <var:O>$ . This code forwards the condition $ \{ <var:v> = <var:t> \land <var:H1> = <nat:2> * <var:t> \land <var:H0> = <nat:3> \land <var:O> = <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> \} $ as $ \{ <var:v> = <var:t> \land <var:H0> = <nat:3> \land <var:O> = <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> \} $ . Advancing to the proceeding statement contained in our list of instructions , we see the variable binding line \verb | <var:O> := <var:O> + <var:H0> | . This takes the condition $ \{ <var:v> = <var:t> \land <var:H0> = <nat:3> \land <var:O> = <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> \} $ as $ \{ <var:v> = <var:t> \land <var:O> = <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> \} $ . This is given using the assignment inference rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <var:H4> : string := " <var:H4> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:v> = <var:t> }} <var:H1> := <var:v> ; <var:H2> := <var:H1> * <var:v> ; <var:H3> := <var:H2> * <var:v> ; <var:H4> := <var:H3> * <var:v> ; <var:H0> := <nat:3> ; <var:H1> := <var:H1> * <nat:2> ; <var:H2> := <var:H2> * <nat:2> ; <var:H3> := <var:H3> * <nat:3> ; <var:H4> := <var:H4> * <nat:4> ; <var:O> := <var:H4> <var:O> := <var:O> + <var:H3> <var:O> := <var:O> + <var:H2> <var:O> := <var:O> + <var:H1> <var:O> := <var:O> + <var:H0> {{ <var:O> = <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:H1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:H1> = <var:t> /\ <var:H2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:H1> = <var:t> /\ <var:H2> = <var:t> ^ <nat:2> /\ <var:H3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:H1> = <var:t> /\ <var:H2> = <var:t> ^ <nat:2> /\ <var:H3> = <var:t> ^ <nat:3> /\ <var:H4> = <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:H1> = <var:t> /\ <var:H2> = <var:t> ^ <nat:2> /\ <var:H3> = <var:t> ^ <nat:3> /\ <var:H4> = <var:t> ^ <nat:4> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:H1> = <nat:2> * <var:t> /\ <var:H2> = <var:t> ^ <nat:2> /\ <var:H3> = <var:t> ^ <nat:3> /\ <var:H4> = <var:t> ^ <nat:4> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:H1> = <nat:2> * <var:t> /\ <var:H2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:H3> = <var:t> ^ <nat:3> /\ <var:H4> = <var:t> ^ <nat:4> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:H1> = <nat:2> * <var:t> /\ <var:H2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:H3> = <nat:3> * <var:t> ^ <nat:3> /\ <var:H4> = <var:t> ^ <nat:4> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:H1> = <nat:2> * <var:t> /\ <var:H2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:H3> = <nat:3> * <var:t> ^ <nat:3> /\ <var:H4> = <nat:4> * <var:t> ^ <nat:4> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:H1> = <nat:2> * <var:t> /\ <var:H2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:H3> = <nat:3> * <var:t> ^ <nat:3> /\ <var:H0> = <nat:3> /\ <var:O> = <nat:4> * <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:H1> = <nat:2> * <var:t> /\ <var:H2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:H0> = <nat:3> /\ <var:O> = <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:H1> = <nat:2> * <var:t> /\ <var:H0> = <nat:3> /\ <var:O> = <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:H0> = <nat:3> /\ <var:O> = <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:O> = <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 