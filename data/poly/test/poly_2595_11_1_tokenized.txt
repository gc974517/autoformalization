\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as \begin{verbatim} <var:j1> := <var:D> ; <var:j2> := <var:j1> * <var:D> ; <var:j3> := <var:j2> * <var:D> ; <var:j0> := <nat:7> ; <var:j1> := <var:j1> * <nat:8> ; <var:j2> := <var:j2> * <nat:5> ; <var:j3> := <var:j3> * <nat:8> ; <var:r> := <var:j3> <var:r> := <var:r> + <var:j2> <var:r> := <var:r> + <var:j1> <var:r> := <var:r> + <var:j0> \end{verbatim} Allowing for every $ <var:b> $ $ <var:D> = <var:b> $ ahead of running our set of commands , it holds that $ <var:r> = <nat:8> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code is clear by typical Hoare reasoning . Moving on , the environment update statement letting $ <var:D> $ to $ <var:j1>$ . This code transfers $ \{ <var:D> = <var:b> \} $ as the condition $ \{ <var:D> = <var:b> \land <var:j1> = <var:b> \} $ . Moving on , we see the variable assignmet statement letting $ <var:j1> * <var:D> $ toward $ <var:j2>$ . This transfers the condition $ \{ <var:D> = <var:b> \land <var:j1> = <var:b> \} $ toward $ \{ <var:D> = <var:b> \land <var:j1> = <var:b> \land <var:j2> = <var:b> ^ <nat:2> \} $ . Moving onward , we have the variable assignmet statement \verb | <var:j3> := <var:j2> * <var:D> ; | . This code transfers the condition $ \{ <var:D> = <var:b> \land <var:j1> = <var:b> \land <var:j2> = <var:b> ^ <nat:2> \} $ as the condition $ \{ <var:D> = <var:b> \land <var:j1> = <var:b> \land <var:j2> = <var:b> ^ <nat:2> \land <var:j3> = <var:b> ^ <nat:3> \} $ . This is ensured by the assignment scheme in standard Hoare logic . Shifting focus toward the next line contained in our list of commands , we have the binding statement \verb | <var:j0> := <nat:7> ; | . This statement advances the condition $ \{ <var:D> = <var:b> \land <var:j1> = <var:b> \land <var:j2> = <var:b> ^ <nat:2> \land <var:j3> = <var:b> ^ <nat:3> \} $ to $ \{ <var:D> = <var:b> \land <var:j1> = <var:b> \land <var:j2> = <var:b> ^ <nat:2> \land <var:j3> = <var:b> ^ <nat:3> \land <var:j0> = <nat:7> \} $ . Advancing to the following line of code seen in the segment of code , we see the code giving $ <var:j1> * <nat:8> $ into $ <var:j1>$ . This forwards the condition $ \{ <var:D> = <var:b> \land <var:j1> = <var:b> \land <var:j2> = <var:b> ^ <nat:2> \land <var:j3> = <var:b> ^ <nat:3> \land <var:j0> = <nat:7> \} $ toward the postcondition $ \{ <var:D> = <var:b> \land <var:j1> = <nat:8> * <var:b> \land <var:j2> = <var:b> ^ <nat:2> \land <var:j3> = <var:b> ^ <nat:3> \land <var:j0> = <nat:7> \} $ . This is known to be sound with the assignment law defined in usual Hoare logic . Looking at the subsequent step in our segment of code , we see the variable assignmet command \verb | <var:j2> := <var:j2> * <nat:5> ; | . This advances $ \{ <var:D> = <var:b> \land <var:j1> = <nat:8> * <var:b> \land <var:j2> = <var:b> ^ <nat:2> \land <var:j3> = <var:b> ^ <nat:3> \land <var:j0> = <nat:7> \} $ toward the postcondition $ \{ <var:D> = <var:b> \land <var:j1> = <nat:8> * <var:b> \land <var:j2> = <nat:5> * <var:b> ^ <nat:2> \land <var:j3> = <var:b> ^ <nat:3> \land <var:j0> = <nat:7> \} $ . Paying attention to the subsequent statement found in our series of commands , we see the assignment code \verb | <var:j3> := <var:j3> * <nat:8> ; | . This statement redefines $ \{ <var:D> = <var:b> \land <var:j1> = <nat:8> * <var:b> \land <var:j2> = <nat:5> * <var:b> ^ <nat:2> \land <var:j3> = <var:b> ^ <nat:3> \land <var:j0> = <nat:7> \} $ as the condition $ \{ <var:D> = <var:b> \land <var:j1> = <nat:8> * <var:b> \land <var:j2> = <nat:5> * <var:b> ^ <nat:2> \land <var:j3> = <nat:8> * <var:b> ^ <nat:3> \land <var:j0> = <nat:7> \} $ . This is deduced with the assignment rule defined by typical Hoare reasoning . Honing in on the following command contained in the set of commands , we see the line binding $ <var:j3$ into $ <var:r>$ . This takes $ \{ <var:D> = <var:b> \land <var:j1> = <nat:8> * <var:b> \land <var:j2> = <nat:5> * <var:b> ^ <nat:2> \land <var:j3> = <nat:8> * <var:b> ^ <nat:3> \land <var:j0> = <nat:7> \} $ toward $ \{ <var:D> = <var:b> \land <var:j1> = <nat:8> * <var:b> \land <var:j2> = <nat:5> * <var:b> ^ <nat:2> \land <var:j0> = <nat:7> \land <var:r> = <nat:8> * <var:b> ^ <nat:3> \} $ . Now , we have the binding command defining $ <var:r> + <var:j2$ as $ <var:r>$ . This statement redefines the condition $ \{ <var:D> = <var:b> \land <var:j1> = <nat:8> * <var:b> \land <var:j2> = <nat:5> * <var:b> ^ <nat:2> \land <var:j0> = <nat:7> \land <var:r> = <nat:8> * <var:b> ^ <nat:3> \} $ to the postcondition $ \{ <var:D> = <var:b> \land <var:j1> = <nat:8> * <var:b> \land <var:j0> = <nat:7> \land <var:r> = <nat:8> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment rule obtained from usual Hoare logic . Moving forward to the next line of code contained in the code , we see the variable update line \verb | <var:r> := <var:r> + <var:j1> | . This advances the precondition $ \{ <var:D> = <var:b> \land <var:j1> = <nat:8> * <var:b> \land <var:j0> = <nat:7> \land <var:r> = <nat:8> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> \} $ as the postcondition $ \{ <var:D> = <var:b> \land <var:j0> = <nat:7> \land <var:r> = <nat:8> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:8> * <var:b> \} $ . This is given with the assignment scheme defined by standard Hoare techniques . Paying attention to the following bit of code in our series of commands , the variable assignmet statement \verb | <var:r> := <var:r> + <var:j0> | . This redefines $ \{ <var:D> = <var:b> \land <var:j0> = <nat:7> \land <var:r> = <nat:8> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:8> * <var:b> \} $ toward the condition $ \{ <var:D> = <var:b> \land <var:r> = <nat:8> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:D> = <var:b> }} <var:j1> := <var:D> ; <var:j2> := <var:j1> * <var:D> ; <var:j3> := <var:j2> * <var:D> ; <var:j0> := <nat:7> ; <var:j1> := <var:j1> * <nat:8> ; <var:j2> := <var:j2> * <nat:5> ; <var:j3> := <var:j3> * <nat:8> ; <var:r> := <var:j3> <var:r> := <var:r> + <var:j2> <var:r> := <var:r> + <var:j1> <var:r> := <var:r> + <var:j0> {{ <var:r> = <nat:8> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:j1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:j1> = <var:b> /\ <var:j2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:j1> = <var:b> /\ <var:j2> = <var:b> ^ <nat:2> /\ <var:j3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:j1> = <var:b> /\ <var:j2> = <var:b> ^ <nat:2> /\ <var:j3> = <var:b> ^ <nat:3> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:j1> = <nat:8> * <var:b> /\ <var:j2> = <var:b> ^ <nat:2> /\ <var:j3> = <var:b> ^ <nat:3> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:j1> = <nat:8> * <var:b> /\ <var:j2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:j3> = <var:b> ^ <nat:3> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:j1> = <nat:8> * <var:b> /\ <var:j2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:j3> = <nat:8> * <var:b> ^ <nat:3> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:j1> = <nat:8> * <var:b> /\ <var:j2> = <nat:5> * <var:b> ^ <nat:2> /\ <var:j0> = <nat:7> /\ <var:r> = <nat:8> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:j1> = <nat:8> * <var:b> /\ <var:j0> = <nat:7> /\ <var:r> = <nat:8> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:j0> = <nat:7> /\ <var:r> = <nat:8> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:8> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:b> /\ <var:r> = <nat:8> * <var:b> ^ <nat:3> + <nat:5> * <var:b> ^ <nat:2> + <nat:8> * <var:b> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 