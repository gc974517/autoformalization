\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f> := <nat:3> ; <var:f> := <nat:1> + <var:f> * <var:r> ; <var:f> := <nat:3> + <var:f> * <var:r> ; <var:f> := <nat:1> + <var:f> * <var:r> ; <var:f> := <nat:4> + <var:f> * <var:r> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:r> = <var:R> $ ahead of the execution of this series of instructions then $ <var:f> = <nat:3> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:4> $ after list of commands is done executing . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions can be demonstrated through Hoare logic . Moving onward , we have \begin{verbatim} { <var:r> = <var:R> } <var:f> := <nat:3> { <var:r> = <var:R> \land <var:f> = <nat:3> } { <var:r> = <var:R> \land <var:f> = <nat:3> } <var:f> := <nat:1> + <var:f> * <var:r> { <var:r> = <var:R> \land <var:f> = <nat:3> \times <var:R> + <nat:1> } { <var:r> = <var:R> \land <var:f> = <nat:3> \times <var:R> + <nat:1> } <var:f> := <nat:3> + <var:f> * <var:r> { <var:r> = <var:R> \land <var:f> = <nat:3> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> } \end{verbatim} This is sound using the assignment inference rule obtained from standard Hoare logic . Moving on to the next pieces of code contained in the series of instructions , we have \begin{verbatim} { <var:r> = <var:R> } <var:f> := <nat:3> { <var:r> = <var:R> \land <var:f> = <nat:3> } { <var:r> = <var:R> \land <var:f> = <nat:3> } <var:f> := <nat:1> + <var:f> * <var:r> { <var:r> = <var:R> \land <var:f> = <nat:3> \times <var:R> + <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:3> ; <var:f> := <nat:1> + <var:f> * <var:r> ; <var:f> := <nat:3> + <var:f> * <var:r> ; <var:f> := <nat:1> + <var:f> * <var:r> ; <var:f> := <nat:4> + <var:f> * <var:r> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:r> = <var:R> }} <def:poly> {{ <var:f> = <nat:3> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:f> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:f> = <nat:3> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:f> = <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:f> = <nat:3> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:f> = <nat:3> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 