\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:K0> := <nat:9> ; <var:K1> := <nat:2> ; <var:K1> := <var:K1> * <var:y> ; <var:K2> := <nat:2> ; <var:K2> := <var:K2> * <var:y> ; <var:K2> := <var:K2> * <var:y> ; <var:K3> := <nat:5> ; <var:K3> := <var:K3> * <var:y> ; <var:K3> := <var:K3> * <var:y> ; <var:K3> := <var:K3> * <var:y> ; <var:V> := <var:K3> ; <var:V> := <var:V> + <var:K2> ; <var:V> := <var:V> + <var:K1> ; <var:V> := <var:V> + <var:K0> \end{verbatim} Given that $ <var:y> = <var:m> $ ahead of running our list of instructions , it follows that we see $ <var:V> = <nat:5> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:9> $ . \end{theorem} \begin{proof} Notice the below decorated series of commands . \begin{eqnarray} \{ <var:y> = <var:m> \} \\ <var:K0> := <nat:9> ; \\ \{ <var:y> = <var:m> \land <var:K0> = <nat:9> \} \\ <var:K1> := <nat:2> ; \\ \{ <var:y> = <var:m> \land <var:K0> = <nat:9> \land <var:K1> = <nat:2> \} \\ <var:K1> := <var:K1> * <var:y> ; \\ \{ <var:y> = <var:m> \land <var:K0> = <nat:9> \land <var:K1> = <nat:2> \cdot <var:m> \} \\ <var:K2> := <nat:2> ; \\ \{ <var:y> = <var:m> \land <var:K0> = <nat:9> \land <var:K1> = <nat:2> \cdot <var:m> \land <var:K2> = <nat:2> \} \\ <var:K2> := <var:K2> * <var:y> ; \\ \{ <var:y> = <var:m> \land <var:K0> = <nat:9> \land <var:K1> = <nat:2> \cdot <var:m> \land <var:K2> = <nat:2> \cdot <var:m> \} \\ <var:K2> := <var:K2> * <var:y> ; \\ \{ <var:y> = <var:m> \land <var:K0> = <nat:9> \land <var:K1> = <nat:2> \cdot <var:m> \land <var:K2> = <nat:2> \cdot <var:m> ^ <nat:2> \} \\ <var:K3> := <nat:5> ; \\ \{ <var:y> = <var:m> \land <var:K0> = <nat:9> \land <var:K1> = <nat:2> \cdot <var:m> \land <var:K2> = <nat:2> \cdot <var:m> ^ <nat:2> \land <var:K3> = <nat:5> \} \\ <var:K3> := <var:K3> * <var:y> ; \\ \{ <var:y> = <var:m> \land <var:K0> = <nat:9> \land <var:K1> = <nat:2> \cdot <var:m> \land <var:K2> = <nat:2> \cdot <var:m> ^ <nat:2> \land <var:K3> = <nat:5> \cdot <var:m> \} \\ <var:K3> := <var:K3> * <var:y> ; \\ \{ <var:y> = <var:m> \land <var:K0> = <nat:9> \land <var:K1> = <nat:2> \cdot <var:m> \land <var:K2> = <nat:2> \cdot <var:m> ^ <nat:2> \land <var:K3> = <nat:5> \cdot <var:m> ^ <nat:2> \} \\ <var:K3> := <var:K3> * <var:y> ; \\ \{ <var:y> = <var:m> \land <var:K0> = <nat:9> \land <var:K1> = <nat:2> \cdot <var:m> \land <var:K2> = <nat:2> \cdot <var:m> ^ <nat:2> \land <var:K3> = <nat:5> \cdot <var:m> ^ <nat:3> \} \\ <var:V> := <var:K3> ; \\ \{ <var:y> = <var:m> \land <var:K0> = <nat:9> \land <var:K1> = <nat:2> \cdot <var:m> \land <var:K2> = <nat:2> \cdot <var:m> ^ <nat:2> \land <var:V> = <nat:5> \cdot <var:m> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:K2> ; \\ \{ <var:y> = <var:m> \land <var:K0> = <nat:9> \land <var:K1> = <nat:2> \cdot <var:m> \land <var:V> = <nat:5> \cdot <var:m> ^ <nat:3> + <nat:2> \cdot <var:m> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:K1> ; \\ \{ <var:y> = <var:m> \land <var:K0> = <nat:9> \land <var:V> = <nat:5> \cdot <var:m> ^ <nat:3> + <nat:2> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> \} \\ <var:V> := <var:V> + <var:K0> \\ \{ <var:y> = <var:m> \land <var:V> = <nat:5> \cdot <var:m> ^ <nat:3> + <nat:2> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:9> \} \end{eqnarray} The application of standard Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:y> = <var:m> }} <var:K0> := <nat:9> ; <var:K1> := <nat:2> ; <var:K1> := <var:K1> * <var:y> ; <var:K2> := <nat:2> ; <var:K2> := <var:K2> * <var:y> ; <var:K2> := <var:K2> * <var:y> ; <var:K3> := <nat:5> ; <var:K3> := <var:K3> * <var:y> ; <var:K3> := <var:K3> * <var:y> ; <var:K3> := <var:K3> * <var:y> ; <var:V> := <var:K3> ; <var:V> := <var:V> + <var:K2> ; <var:V> := <var:V> + <var:K1> ; <var:V> := <var:V> + <var:K0> {{ <var:V> = <nat:5> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:2> * <var:m> /\ <var:K2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:2> * <var:m> /\ <var:K2> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:2> * <var:m> /\ <var:K2> = <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:2> * <var:m> /\ <var:K2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:K3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:2> * <var:m> /\ <var:K2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:K3> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:2> * <var:m> /\ <var:K2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:K3> = <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:2> * <var:m> /\ <var:K2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:K3> = <nat:5> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:2> * <var:m> /\ <var:K2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:V> = <nat:5> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:2> * <var:m> /\ <var:V> = <nat:5> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:K0> = <nat:9> /\ <var:V> = <nat:5> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:V> = <nat:5> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 