\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:3> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:r> ; <var:f2> := <nat:4> ; <var:f2> := <var:f2> * <var:r> ; <var:f2> := <var:f2> * <var:r> ; <var:j> := <var:f2> ; <var:j> := <var:j> + <var:f1> ; <var:j> := <var:j> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:r> = <var:t> $ prior to running our set of instructions , it must be that we see $ <var:j> = <nat:4> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions can be given with standard Hoare logic . After , we have the environment update command assigning $ <nat:3> $ into $ <var:f0>$ . This line moves the condition $ \{ <var:r> = <var:t> \} $ as $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \} $ . Further , we see the variable binding command letting $ <nat:8> $ toward $ <var:f1>$ . This redefines the condition $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \} $ into the condition $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \} $ . Honing in on the upcoming statement in the set of commands , we have the variable binding line binding $ <var:f1> * <var:r> $ to $ <var:f1>$ . This command redefines the precondition $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \} $ into the postcondition $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:t> \} $ . This is sound by the assignment law defined by usual Hoare reasoning . Keeping momentum , we see the variable update code \verb | <var:f2> := <nat:4> ; | . This line advances $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:t> \} $ toward $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:t> \land <var:f2> = <nat:4> \} $ . Jumping to the upcoming line of code in our program , the environment update statement \verb | <var:f2> := <var:f2> * <var:r> ; | . This advances the precondition $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:t> \land <var:f2> = <nat:4> \} $ into the condition $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:t> \land <var:f2> = <nat:4> \times <var:t> \} $ . Moving onward , we see the binding line defining $ <var:f2> * <var:r> $ toward $ <var:f2>$ . This line transfers the precondition $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:t> \land <var:f2> = <nat:4> \times <var:t> \} $ to $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:t> \land <var:f2> = <nat:4> \times <var:t> ^ <nat:2> \} $ . This is rigorously given using the assignment scheme obtained from usual Hoare techniques . Advancing to the proceeding step seen in our segment of code , we see the variable update statement \verb | <var:j> := <var:f2> ; | . This transfers $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:t> \land <var:f2> = <nat:4> \times <var:t> ^ <nat:2> \} $ to the condition $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:t> \land <var:j> = <nat:4> \times <var:t> ^ <nat:2> \} $ . Immediately after , we have the command yielding $ <var:j> + <var:f1> $ to $ <var:j>$ . This forwards $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:f1> = <nat:8> \times <var:t> \land <var:j> = <nat:4> \times <var:t> ^ <nat:2> \} $ toward the condition $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:j> = <nat:4> \times <var:t> ^ <nat:2> + <nat:8> \times <var:t> \} $ . Moving forward , we see the binding statement binding $ <var:j> + <var:f0$ to $ <var:j>$ . This command redefines the precondition $ \{ <var:r> = <var:t> \land <var:f0> = <nat:3> \land <var:j> = <nat:4> \times <var:t> ^ <nat:2> + <nat:8> \times <var:t> \} $ as $ \{ <var:r> = <var:t> \land <var:j> = <nat:4> \times <var:t> ^ <nat:2> + <nat:8> \times <var:t> + <nat:3> \} $ . This is shown to be logically sound using the assignment law in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <def:poly> := <var:f0> := <nat:3> ; <var:f1> := <nat:8> ; <var:f1> := <var:f1> * <var:r> ; <var:f2> := <nat:4> ; <var:f2> := <var:f2> * <var:r> ; <var:f2> := <var:f2> * <var:r> ; <var:j> := <var:f2> ; <var:j> := <var:j> + <var:f1> ; <var:j> := <var:j> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:r> = <var:t> }} <def:poly> {{ <var:j> = <nat:4> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> * <var:t> /\ <var:f2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> * <var:t> /\ <var:f2> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> * <var:t> /\ <var:f2> = <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:f0> = <nat:3> /\ <var:f1> = <nat:8> * <var:t> /\ <var:j> = <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:f0> = <nat:3> /\ <var:j> = <nat:4> * <var:t> ^ <nat:2> + <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:t> /\ <var:j> = <nat:4> * <var:t> ^ <nat:2> + <nat:8> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 