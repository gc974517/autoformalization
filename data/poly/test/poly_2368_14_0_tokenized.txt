\begin{document} \begin{theorem} Define the following code such that \begin{verbatim} <var:S0> := <nat:6> ; <var:S1> := <nat:9> ; <var:S1> := <var:S1> * <var:z> ; <var:S2> := <nat:9> ; <var:S2> := <var:S2> * <var:z> ; <var:S2> := <var:S2> * <var:z> ; <var:S3> := <nat:7> ; <var:S3> := <var:S3> * <var:z> ; <var:S3> := <var:S3> * <var:z> ; <var:S3> := <var:S3> * <var:z> ; <var:g> := <var:S3> ; <var:g> := <var:g> + <var:S2> ; <var:g> := <var:g> + <var:S1> ; <var:g> := <var:g> + <var:S0> \end{verbatim} Assuming it to hold that $ <var:z> = <var:A> $ prior to the execution of this program then we see $ <var:g> = <nat:7> \times <var:A> ^ <nat:3> + <nat:9> \times <var:A> ^ <nat:2> + <nat:9> \times <var:A> + <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for our segment of code can be done with typical Hoare logic . Taking a look at the proceeding step seen in our series of commands , we see the variable assignmet line \verb | <var:S0> := <nat:6> ; | . This command redefines the precondition $ \{ <var:z> = <var:A> \} $ to the postcondition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \} $ . Considering the following line found in our code , we have the assignment command letting $ <nat:9> $ to $ <var:S1>$ . This code moves $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \} $ toward $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \} $ . This is guaranteed by the assignment inference rule from typical Hoare logic . Jumping to the upcoming command found in our list of commands , we see the assignment statement \verb | <var:S1> := <var:S1> * <var:z> ; | . This statement forwards the condition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \} $ to $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \} $ . This is guaranteed by the assignment law given by standard Hoare logic . Honing in on the subsequent line of code contained in the set of commands , the assignment code \verb | <var:S2> := <nat:9> ; | . This statement advances $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \} $ toward the condition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> \} $ . This is rigorously given with the assignment inference rule in Hoare reasoning . Taking a look at the following command contained in our program , we see the variable assignmet statement \verb | <var:S2> := <var:S2> * <var:z> ; | . This moves the condition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> \} $ toward the condition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> \} $ . This is given with the assignment scheme of typical Hoare techniques . Honing in on the following bit of code contained in the set of instructions , the binding command \verb | <var:S2> := <var:S2> * <var:z> ; | . This redefines $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> \} $ toward the postcondition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> ^ <nat:2> \} $ . This is guaranteed through the assignment inference rule found in typical Hoare techniques . Next , the binding statement \verb | <var:S3> := <nat:7> ; | . This code advances the precondition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> ^ <nat:2> \} $ as the postcondition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> ^ <nat:2> \land <var:S3> = <nat:7> \} $ . Observing the next command contained in the code , we see the variable update statement letting $ <var:S3> * <var:z> $ into $ <var:S3>$ . This takes $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> ^ <nat:2> \land <var:S3> = <nat:7> \} $ as the condition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> ^ <nat:2> \land <var:S3> = <nat:7> * <var:A> \} $ . This is guaranteed with the assignment inference rule found in typical Hoare logic . Moving on to the next step , we see the environment update code \verb | <var:S3> := <var:S3> * <var:z> ; | . This statement transfers the precondition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> ^ <nat:2> \land <var:S3> = <nat:7> * <var:A> \} $ to the postcondition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> ^ <nat:2> \land <var:S3> = <nat:7> * <var:A> ^ <nat:2> \} $ . Observing the proceeding step seen in the set of commands , we see the assignment code letting $ <var:S3> * <var:z> $ toward $ <var:S3>$ . This moves the condition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> ^ <nat:2> \land <var:S3> = <nat:7> * <var:A> ^ <nat:2> \} $ to the postcondition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> ^ <nat:2> \land <var:S3> = <nat:7> * <var:A> ^ <nat:3> \} $ . Moving forward to the subsequent line of code in our series of instructions , the code giving $ <var:S3> $ toward $ <var:g>$ . This line transfers the precondition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> ^ <nat:2> \land <var:S3> = <nat:7> * <var:A> ^ <nat:3> \} $ as $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> ^ <nat:2> \land <var:g> = <nat:7> * <var:A> ^ <nat:3> \} $ . This is rigorously given using the assignment rule defined in Hoare reasoning . Advancing to the next step , we have the variable binding code letting $ <var:g> + <var:S2> $ into $ <var:g>$ . This statement moves $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:S2> = <nat:9> * <var:A> ^ <nat:2> \land <var:g> = <nat:7> * <var:A> ^ <nat:3> \} $ into $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:g> = <nat:7> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> \} $ . Looking at the proceeding piece of code in the program , we have the variable assignmet statement yielding $ <var:g> + <var:S1> $ to $ <var:g>$ . This line takes the condition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> * <var:A> \land <var:g> = <nat:7> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> \} $ toward the postcondition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:g> = <nat:7> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:9> * <var:A> \} $ . This is sound with the assignment law given in Hoare logic . After , we see the variable assignmet code binding $ <var:g> + <var:S0$ as $ <var:g>$ . This takes the condition $ \{ <var:z> = <var:A> \land <var:S0> = <nat:6> \land <var:g> = <nat:7> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:9> * <var:A> \} $ to the postcondition $ \{ <var:z> = <var:A> \land <var:g> = <nat:7> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:6> \} $ . This is known to be sound using the assignment law in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:z> = <var:A> }} <var:S0> := <nat:6> ; <var:S1> := <nat:9> ; <var:S1> := <var:S1> * <var:z> ; <var:S2> := <nat:9> ; <var:S2> := <var:S2> * <var:z> ; <var:S2> := <var:S2> * <var:z> ; <var:S3> := <nat:7> ; <var:S3> := <var:S3> * <var:z> ; <var:S3> := <var:S3> * <var:z> ; <var:S3> := <var:S3> * <var:z> ; <var:g> := <var:S3> ; <var:g> := <var:g> + <var:S2> ; <var:g> := <var:g> + <var:S1> ; <var:g> := <var:g> + <var:S0> {{ <var:g> = <nat:7> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:A> /\ <var:S2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:A> /\ <var:S2> = <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:A> /\ <var:S2> = <nat:9> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:A> /\ <var:S2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:S3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:A> /\ <var:S2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:S3> = <nat:7> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:A> /\ <var:S2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:S3> = <nat:7> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:A> /\ <var:S2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:S3> = <nat:7> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:A> /\ <var:S2> = <nat:9> * <var:A> ^ <nat:2> /\ <var:g> = <nat:7> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:A> /\ <var:g> = <nat:7> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:S0> = <nat:6> /\ <var:g> = <nat:7> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:9> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:g> = <nat:7> * <var:A> ^ <nat:3> + <nat:9> * <var:A> ^ <nat:2> + <nat:9> * <var:A> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 