\begin{document} \begin{theorem} We define a code segment : \begin{verbatim} <var:R0> := <nat:3> ; <var:x> := <var:R0> \end{verbatim} Assuming , for some natural coefficients $ <var:p> $ , $ <var:K> = <var:p> $ prior to interpreting this segment of code it must be that $ <var:x> = <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions can be done by the below decorated code . \begin{eqnarray} \{ <var:K> = <var:p> \} \\ <var:R0> := <nat:3> ; \\ \{ <var:K> = <var:p> \land <var:R0> = <nat:3> \} \\ <var:x> := <var:R0> \\ \{ <var:K> = <var:p> \land <var:x> = <nat:3> \} \end{eqnarray} Applying typical Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:K> = <var:p> }} <var:R0> := <nat:3> ; <var:x> := <var:R0> {{ <var:x> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:p> /\ <var:R0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:p> /\ <var:x> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 