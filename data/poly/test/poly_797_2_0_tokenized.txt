\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:9> ; <var:Y> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:L> = <var:k> $ ahead of the execution of this program , it must be that we have $ <var:Y> = <nat:9> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:L> = <var:k> \} \\ <var:x0> := <nat:9> ; \\ \{ <var:L> = <var:k> \land <var:x0> = <nat:9> \} \\ <var:Y> := <var:x0> \\ \{ <var:L> = <var:k> \land <var:Y> = <nat:9> \} \end{eqnarray} As a result , this code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:9> ; <var:Y> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:L> = <var:k> }} <def:poly> {{ <var:Y> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:k> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:k> /\ <var:Y> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 