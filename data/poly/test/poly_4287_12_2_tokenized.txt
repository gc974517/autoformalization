\begin{document} \begin{theorem} Consider the following code segment : \begin{verbatim} <var:L> := <nat:3> ; <var:L> := <nat:4> + <var:L> * <var:a> ; <var:L> := <nat:1> + <var:L> * <var:a> ; <var:L> := <nat:4> + <var:L> * <var:a> ; <var:L> := <nat:3> + <var:L> * <var:a> ; <var:L> := <var:L> * <var:a> ; <var:L> := <nat:2> + <var:L> * <var:a> ; <var:L> := <nat:3> + <var:L> * <var:a> ; <var:L> := <nat:4> + <var:L> * <var:a> ; <var:L> := <nat:2> + <var:L> * <var:a> ; <var:L> := <nat:3> + <var:L> * <var:a> ; <var:L> := <nat:4> + <var:L> * <var:a> \end{verbatim} Assume that $ <var:a> = <var:Z> $ before executing this code segment , then $ <var:L> = <nat:3> \times <var:Z> ^ <nat:11> + <nat:4> \times <var:Z> ^ <nat:10> + <nat:1> \times <var:Z> ^ <nat:9> + <nat:4> \times <var:Z> ^ <nat:8> + <nat:3> \times <var:Z> ^ <nat:7> + <nat:2> \times <var:Z> ^ <nat:5> + <nat:3> \times <var:Z> ^ <nat:4> + <nat:4> \times <var:Z> ^ <nat:3> + <nat:2> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:4> $ once list of commands has terminated . \end{theorem} \begin{proof} The way to prove correctness for the code segment is demonstrated through standard Hoare logic . Considering the upcoming lines of codefound in our set of instructions , we see \begin{verbatim} { <var:a> = <var:Z> } <var:L> := <nat:3> { <var:a> = <var:Z> \land <var:L> = <nat:3> } { <var:a> = <var:Z> \land <var:L> = <nat:3> } <var:L> := <nat:4> + <var:L> * <var:a> { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> + <nat:4> } { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> + <nat:4> } <var:L> := <nat:1> + <var:L> * <var:a> { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> } \end{verbatim} This is given by the variable update rule obtained from usual Hoare logic . Looking at the upcoming statements in the set of commands , we see \begin{verbatim} { <var:a> = <var:Z> } <var:L> := <nat:3> { <var:a> = <var:Z> \land <var:L> = <nat:3> } { <var:a> = <var:Z> \land <var:L> = <nat:3> } <var:L> := <nat:4> + <var:L> * <var:a> { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> + <nat:4> } { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> + <nat:4> } <var:L> := <nat:1> + <var:L> * <var:a> { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> } { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> } <var:L> := <nat:4> + <var:L> * <var:a> { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:4> } { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:4> } <var:L> := <nat:3> + <var:L> * <var:a> { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:3> } { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:3> } <var:L> := <var:L> * <var:a> { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + } \end{verbatim} This is guaranteed using the assignment rule from standard Hoare techniques . Shifting focus toward the proceeding commands contained in our program , we have \begin{verbatim} { <var:a> = <var:Z> } <var:L> := <nat:3> { <var:a> = <var:Z> \land <var:L> = <nat:3> } { <var:a> = <var:Z> \land <var:L> = <nat:3> } <var:L> := <nat:4> + <var:L> * <var:a> { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> + <nat:4> } { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> + <nat:4> } <var:L> := <nat:1> + <var:L> * <var:a> { <var:a> = <var:Z> \land <var:L> = <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> } \end{verbatim} This is shown to be logically sound with the law obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:a> = <var:Z> }} <var:L> := <nat:3> ; <var:L> := <nat:4> + <var:L> * <var:a> ; <var:L> := <nat:1> + <var:L> * <var:a> ; <var:L> := <nat:4> + <var:L> * <var:a> ; <var:L> := <nat:3> + <var:L> * <var:a> ; <var:L> := <var:L> * <var:a> ; <var:L> := <nat:2> + <var:L> * <var:a> ; <var:L> := <nat:3> + <var:L> * <var:a> ; <var:L> := <nat:4> + <var:L> * <var:a> ; <var:L> := <nat:2> + <var:L> * <var:a> ; <var:L> := <nat:3> + <var:L> * <var:a> ; <var:L> := <nat:4> + <var:L> * <var:a> {{ <var:L> = <nat:3> * <var:Z> ^ <nat:11> + <nat:4> * <var:Z> ^ <nat:10> + <nat:1> * <var:Z> ^ <nat:9> + <nat:4> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:7> + <nat:2> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:L> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:L> = <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:L> = <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:L> = <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:L> = <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:L> = <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:L> = <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:L> = <nat:3> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:L> = <nat:3> * <var:Z> ^ <nat:8> + <nat:4> * <var:Z> ^ <nat:7> + <nat:1> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:2> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:L> = <nat:3> * <var:Z> ^ <nat:9> + <nat:4> * <var:Z> ^ <nat:8> + <nat:1> * <var:Z> ^ <nat:7> + <nat:4> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:2> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:L> = <nat:3> * <var:Z> ^ <nat:10> + <nat:4> * <var:Z> ^ <nat:9> + <nat:1> * <var:Z> ^ <nat:8> + <nat:4> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:2> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Z> /\ <var:L> = <nat:3> * <var:Z> ^ <nat:11> + <nat:4> * <var:Z> ^ <nat:10> + <nat:1> * <var:Z> ^ <nat:9> + <nat:4> * <var:Z> ^ <nat:8> + <nat:3> * <var:Z> ^ <nat:7> + <nat:2> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 