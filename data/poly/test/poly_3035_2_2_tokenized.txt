\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:a> := <nat:4> ; <var:a> := <nat:3> + <var:a> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Assume --- given positive integer coefficients $ <var:V> $ --- it to hold that $ <var:J> = <var:V> $ before interpreting our segment of code , it holds that we have $ <var:a> = <nat:4> \times <var:V> + <nat:3> $ after code has exited . \end{theorem} \begin{proof} Applying standard Hoare techniques gives us : \begin{eqnarray} \{ <var:J> = <var:V> \} \\ <var:a> := <nat:4> ; \\ \{ <var:J> = <var:V> \land <var:a> = <nat:4> \} \\ <var:a> := <nat:3> + <var:a> * <var:J> \\ \{ <var:J> = <var:V> \land <var:a> = <nat:4> \times <var:V> + <nat:3> \} \end{eqnarray} Considering the preceding argument , our code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:a> := <nat:4> ; <var:a> := <nat:3> + <var:a> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:J> = <var:V> }} <def:poly> {{ <var:a> = <nat:4> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:a> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:V> /\ <var:a> = <nat:4> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 