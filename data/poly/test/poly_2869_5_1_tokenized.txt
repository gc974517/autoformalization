\begin{document} \begin{theorem} Define the following code as \begin{verbatim} <var:p1> := <var:Y> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:4> ; <var:i> := <var:p1> <var:i> := <var:i> + <var:p0> \end{verbatim} Given that $ <var:Y> = <var:M> $ ahead of executing this program , it follows that we see $ <var:i> = <nat:4> * <var:M> + <nat:1> $ . \end{theorem} \begin{proof} Using Hoare reasoning produces : \begin{eqnarray} \{ <var:Y> = <var:M> \} \\ <var:p1> := <var:Y> ; \\ \{ <var:Y> = <var:M> \land <var:p1> = <var:M> \} \\ <var:p0> := <nat:1> ; \\ \{ <var:Y> = <var:M> \land <var:p1> = <var:M> \land <var:p0> = <nat:1> \} \\ <var:p1> := <var:p1> * <nat:4> ; \\ \{ <var:Y> = <var:M> \land <var:p1> = <nat:4> \times <var:M> \land <var:p0> = <nat:1> \} \\ <var:i> := <var:p1> \\ \{ <var:Y> = <var:M> \land <var:p0> = <nat:1> \land <var:i> = <nat:4> \times <var:M> \} \\ <var:i> := <var:i> + <var:p0> \\ \{ <var:Y> = <var:M> \land <var:i> = <nat:4> \times <var:M> + <nat:1> \} \end{eqnarray} Thusly , this program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:Y> = <var:M> }} <var:p1> := <var:Y> ; <var:p0> := <nat:1> ; <var:p1> := <var:p1> * <nat:4> ; <var:i> := <var:p1> <var:i> := <var:i> + <var:p0> {{ <var:i> = <nat:4> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:p1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:p1> = <var:M> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:p1> = <nat:4> * <var:M> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:p0> = <nat:1> /\ <var:i> = <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:i> = <nat:4> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 