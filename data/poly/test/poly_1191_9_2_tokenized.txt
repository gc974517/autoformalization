\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} : \begin{verbatim} <var:j> := <nat:2> ; <var:j> := <nat:4> + <var:j> * <var:C> ; <var:j> := <var:j> * <var:C> ; <var:j> := <var:j> * <var:C> ; <var:j> := <nat:1> + <var:j> * <var:C> ; <var:j> := <var:j> * <var:C> ; <var:j> := <nat:1> + <var:j> * <var:C> ; <var:j> := <nat:3> + <var:j> * <var:C> ; <var:j> := <nat:2> + <var:j> * <var:C> \end{verbatim} Allow ( for all positive coefficients $ <var:N> $ ) that we have $ <var:C> = <var:N> $ before executing this code segment , it must be that $ <var:j> = <nat:2> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> $ when segment of code has terminated . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions can be shown with standard Hoare reasoning . Taking a look at the next step contained in our program , we have the assignment statement \verb | <var:j> := <nat:2> ; | . This command redefines $ \{ <var:C> = <var:N> \} $ toward the condition $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \} $ . Focusing on the subsequent line of code contained in the set of instructions , the binding statement letting $ <nat:4> + <var:j> * <var:C> $ as $ <var:j>$ . This takes the precondition $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \} $ toward the condition $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> + <nat:4> \} $ . This is given using the assignment scheme obtained from usual Hoare techniques . Next , we see the variable assignmet command binding $ <var:j> * <var:C> $ into $ <var:j>$ . This transfers $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> + <nat:4> \} $ to the postcondition $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> + \} $ . Moving onward , we have the command yielding $ <var:j> * <var:C> $ into $ <var:j>$ . This forwards the condition $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> + \} $ into the postcondition $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> ^ <nat:3> + <nat:4> \cdot <var:N> ^ <nat:2> + \} $ . Honing in on the subsequent line of code found in the list of commands , the environment update command yielding $ <nat:1> + <var:j> * <var:C> $ as $ <var:j>$ . This moves the condition $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> ^ <nat:3> + <nat:4> \cdot <var:N> ^ <nat:2> + \} $ into the condition $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> ^ <nat:4> + <nat:4> \cdot <var:N> ^ <nat:3> + <nat:1> \} $ . This is sound through the assignment inference rule given by usual Hoare techniques . Moving forward to the proceeding statement contained in our series of instructions , the variable assignmet statement defining $ <var:j> * <var:C> $ into $ <var:j>$ . This advances $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> ^ <nat:4> + <nat:4> \cdot <var:N> ^ <nat:3> + <nat:1> \} $ as the postcondition $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> ^ <nat:5> + <nat:4> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> + \} $ . This is guaranteed by the assignment law defined in Hoare reasoning . Stepping through , we have the binding statement giving $ <nat:1> + <var:j> * <var:C> $ toward $ <var:j>$ . This forwards $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> ^ <nat:5> + <nat:4> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> + \} $ to the postcondition $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> ^ <nat:6> + <nat:4> \cdot <var:N> ^ <nat:5> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:1> \} $ . Taking another step toward the subsequent command seen in the code , the assignment statement binding $ <nat:3> + <var:j> * <var:C> $ to $ <var:j>$ . This forwards the precondition $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> ^ <nat:6> + <nat:4> \cdot <var:N> ^ <nat:5> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:1> \} $ to the condition $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> ^ <nat:7> + <nat:4> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> + <nat:3> \} $ . This is rigorously given with the assignment inference rule in Hoare logic . Moving forward to the proceeding line of code found in our code , the variable update code \verb | <var:j> := <nat:2> + <var:j> * <var:C> | . This advances $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> ^ <nat:7> + <nat:4> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> + <nat:3> \} $ to $ \{ <var:C> = <var:N> \land <var:j> = <nat:2> \cdot <var:N> ^ <nat:8> + <nat:4> \cdot <var:N> ^ <nat:7> + <nat:1> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:C> = <var:N> }} <var:j> := <nat:2> ; <var:j> := <nat:4> + <var:j> * <var:C> ; <var:j> := <var:j> * <var:C> ; <var:j> := <var:j> * <var:C> ; <var:j> := <nat:1> + <var:j> * <var:C> ; <var:j> := <var:j> * <var:C> ; <var:j> := <nat:1> + <var:j> * <var:C> ; <var:j> := <nat:3> + <var:j> * <var:C> ; <var:j> := <nat:2> + <var:j> * <var:C> {{ <var:j> = <nat:2> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:j> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:j> = <nat:2> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:1> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:3> + <nat:1> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:N> /\ <var:j> = <nat:2> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 