\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:9> ; <var:j1> := <nat:9> ; <var:j1> := <var:j1> * <var:A> ; <var:j2> := <nat:6> ; <var:j2> := <var:j2> * <var:A> ; <var:j2> := <var:j2> * <var:A> ; <var:W> := <var:j2> ; <var:W> := <var:W> + <var:j1> ; <var:W> := <var:W> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:A> = <var:g> $ with some $ <var:g> \in \mathbb{Z}^+ $ prior to interpreting this segment of code , then we see $ <var:W> = <nat:6> \cdot <var:g> ^ <nat:2> + <nat:9> \cdot <var:g> + <nat:9> $ after set of instructions terminates . \end{theorem} \begin{proof} The argument for our set of instructions can be demonstrated using Hoare logic . Considering the upcoming step contained in the list of instructions , we have the code giving $ <nat:9> $ to $ <var:j0>$ . This forwards the precondition $ \{ <var:A> = <var:g> \} $ toward $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \} $ . This is guaranteed using the assignment scheme found in standard Hoare techniques . Keeping momentum , we have the variable update code yielding $ <nat:9> $ into $ <var:j1>$ . This command forwards $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \} $ toward the postcondition $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> \} $ . This is sound using the assignment rule found in standard Hoare logic . Advancing , the variable binding code letting $ <var:j1> * <var:A> $ as $ <var:j1>$ . This code redefines $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> \} $ toward $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:g> \} $ . Stepping through , the variable assignmet line yielding $ <nat:6> $ to $ <var:j2>$ . This command advances the precondition $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:g> \} $ to $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:g> \land <var:j2> = <nat:6> \} $ . This is shown with the assignment rule given by standard Hoare reasoning . Paying attention to the upcoming piece of code found in our program , the binding code \verb | <var:j2> := <var:j2> * <var:A> ; | . This command redefines the condition $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:g> \land <var:j2> = <nat:6> \} $ to the condition $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:g> \land <var:j2> = <nat:6> * <var:g> \} $ . This is ensured through the assignment inference rule defined by Hoare logic . Jumping to the proceeding piece of code seen in our set of instructions , we see the binding statement yielding $ <var:j2> * <var:A> $ into $ <var:j2>$ . This advances $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:g> \land <var:j2> = <nat:6> * <var:g> \} $ as the condition $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:g> \land <var:j2> = <nat:6> * <var:g> ^ <nat:2> \} $ . This is given through the assignment scheme in typical Hoare techniques . Moving forward to the upcoming step seen in our program , we have the assignment command yielding $ <var:j2> $ to $ <var:W>$ . This transfers the condition $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:g> \land <var:j2> = <nat:6> * <var:g> ^ <nat:2> \} $ to $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:g> \land <var:W> = <nat:6> * <var:g> ^ <nat:2> \} $ . This is sound through the assignment inference rule of Hoare logic . Focusing on the proceeding bit of code found in the series of instructions , we see the variable update command defining $ <var:W> + <var:j1> $ toward $ <var:W>$ . This line redefines $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:j1> = <nat:9> * <var:g> \land <var:W> = <nat:6> * <var:g> ^ <nat:2> \} $ into the condition $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:W> = <nat:6> * <var:g> ^ <nat:2> + <nat:9> * <var:g> \} $ . This is shown to be logically sound with the assignment scheme from standard Hoare reasoning . Looking at the next line of code in our list of commands , the statement \verb | <var:W> := <var:W> + <var:j0> | . This command moves $ \{ <var:A> = <var:g> \land <var:j0> = <nat:9> \land <var:W> = <nat:6> * <var:g> ^ <nat:2> + <nat:9> * <var:g> \} $ into the postcondition $ \{ <var:A> = <var:g> \land <var:W> = <nat:6> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <def:poly> := <var:j0> := <nat:9> ; <var:j1> := <nat:9> ; <var:j1> := <var:j1> * <var:A> ; <var:j2> := <nat:6> ; <var:j2> := <var:j2> * <var:A> ; <var:j2> := <var:j2> * <var:A> ; <var:W> := <var:j2> ; <var:W> := <var:W> + <var:j1> ; <var:W> := <var:W> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:A> = <var:g> }} <def:poly> {{ <var:W> = <nat:6> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:9> * <var:g> /\ <var:j2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:9> * <var:g> /\ <var:j2> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:9> * <var:g> /\ <var:j2> = <nat:6> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:9> * <var:g> /\ <var:W> = <nat:6> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:j0> = <nat:9> /\ <var:W> = <nat:6> * <var:g> ^ <nat:2> + <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:W> = <nat:6> * <var:g> ^ <nat:2> + <nat:9> * <var:g> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 