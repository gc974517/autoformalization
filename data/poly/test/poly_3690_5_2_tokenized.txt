\begin{document} \begin{theorem} Take the following set of instructions such that \begin{verbatim} <var:j> := <nat:1> ; <var:j> := <nat:1> + <var:j> * <var:d> ; <var:j> := <nat:3> + <var:j> * <var:d> ; <var:j> := <nat:2> + <var:j> * <var:d> ; <var:j> := <nat:3> + <var:j> * <var:d> \end{verbatim} Allowing that we have $ <var:d> = <var:W> $ prior to the evaluation of this segment of code , it follows that $ <var:j> = <nat:1> \cdot <var:W> ^ <nat:4> + <nat:1> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:3> $ once series of commands is done executing . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives : \begin{eqnarray} \{ <var:d> = <var:W> \} \\ <var:j> := <nat:1> ; \\ \{ <var:d> = <var:W> \land <var:j> = <nat:1> \} \\ <var:j> := <nat:1> + <var:j> * <var:d> ; \\ \{ <var:d> = <var:W> \land <var:j> = <nat:1> \cdot <var:W> + <nat:1> \} \\ <var:j> := <nat:3> + <var:j> * <var:d> ; \\ \{ <var:d> = <var:W> \land <var:j> = <nat:1> \cdot <var:W> ^ <nat:2> + <nat:1> \cdot <var:W> + <nat:3> \} \\ <var:j> := <nat:2> + <var:j> * <var:d> ; \\ \{ <var:d> = <var:W> \land <var:j> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:1> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:2> \} \\ <var:j> := <nat:3> + <var:j> * <var:d> \\ \{ <var:d> = <var:W> \land <var:j> = <nat:1> \cdot <var:W> ^ <nat:4> + <nat:1> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:2> \cdot <var:W> + <nat:3> \} \end{eqnarray} Thus , the code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:d> = <var:W> }} <var:j> := <nat:1> ; <var:j> := <nat:1> + <var:j> * <var:d> ; <var:j> := <nat:3> + <var:j> * <var:d> ; <var:j> := <nat:2> + <var:j> * <var:d> ; <var:j> := <nat:3> + <var:j> * <var:d> {{ <var:j> = <nat:1> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:j> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:j> = <nat:1> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:j> = <nat:1> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:j> = <nat:1> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:W> /\ <var:j> = <nat:1> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 