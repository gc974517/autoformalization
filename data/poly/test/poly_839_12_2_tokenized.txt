\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as \begin{verbatim} <var:d> := <nat:3> ; <var:d> := <nat:3> + <var:d> * <var:Y> ; <var:d> := <nat:4> + <var:d> * <var:Y> ; <var:d> := <nat:1> + <var:d> * <var:Y> ; <var:d> := <nat:4> + <var:d> * <var:Y> ; <var:d> := <var:d> * <var:Y> ; <var:d> := <nat:3> + <var:d> * <var:Y> ; <var:d> := <var:d> * <var:Y> ; <var:d> := <nat:1> + <var:d> * <var:Y> ; <var:d> := <nat:2> + <var:d> * <var:Y> ; <var:d> := <var:d> * <var:Y> ; <var:d> := <nat:1> + <var:d> * <var:Y> \end{verbatim} Allow it to hold that $ <var:Y> = <var:F> $ ahead of interpreting the program , it holds that $ <var:d> = <nat:3> * <var:F> ^ <nat:11> + <nat:3> * <var:F> ^ <nat:10> + <nat:4> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our program can be done by standard Hoare techniques . Immediately following , \begin{eqnarray} \{ <var:Y> = <var:F> \} \, <var:d> := <nat:3> \, \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \} \\ \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \} \, <var:d> := <nat:3> + <var:d> * <var:Y> \, \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> + <nat:3> \} \\ \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> + <nat:3> \} \, <var:d> := <nat:4> + <var:d> * <var:Y> \, \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> + <nat:4> \} \\ \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> + <nat:4> \} \, <var:d> := <nat:1> + <var:d> * <var:Y> \, \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> ^ <nat:2> + <nat:4> \times <var:F> + <nat:1> \} \\ \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> ^ <nat:2> + <nat:4> \times <var:F> + <nat:1> \} \, <var:d> := <nat:4> + <var:d> * <var:Y> \, \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:4> \} \\ \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:4> \} \, <var:d> := <var:d> * <var:Y> \, \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:5> + <nat:3> \times <var:F> ^ <nat:4> + <nat:4> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:4> \times <var:F> + \} \\ \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:5> + <nat:3> \times <var:F> ^ <nat:4> + <nat:4> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:4> \times <var:F> + \} \, <var:d> := <nat:3> + <var:d> * <var:Y> \, \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:6> + <nat:3> \times <var:F> ^ <nat:5> + <nat:4> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> ^ <nat:2> + <nat:3> \} \\ \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:6> + <nat:3> \times <var:F> ^ <nat:5> + <nat:4> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> ^ <nat:2> + <nat:3> \} \, <var:d> := <var:d> * <var:Y> \, \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:7> + <nat:3> \times <var:F> ^ <nat:6> + <nat:4> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> ^ <nat:4> + <nat:4> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> + \} \\ \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:7> + <nat:3> \times <var:F> ^ <nat:6> + <nat:4> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> ^ <nat:4> + <nat:4> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> + \} \, <var:d> := <nat:1> + <var:d> * <var:Y> \, \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:8> + <nat:3> \times <var:F> ^ <nat:7> + <nat:4> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:5> + <nat:4> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:2> + <nat:1> \} \\ \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:8> + <nat:3> \times <var:F> ^ <nat:7> + <nat:4> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:5> + <nat:4> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:2> + <nat:1> \} \, <var:d> := <nat:2> + <var:d> * <var:Y> \, \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:9> + <nat:3> \times <var:F> ^ <nat:8> + <nat:4> \times <var:F> ^ <nat:7> + <nat:1> \times <var:F> ^ <nat:6> + <nat:4> \times <var:F> ^ <nat:5> + <nat:3> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> + <nat:2> \} \\ \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:9> + <nat:3> \times <var:F> ^ <nat:8> + <nat:4> \times <var:F> ^ <nat:7> + <nat:1> \times <var:F> ^ <nat:6> + <nat:4> \times <var:F> ^ <nat:5> + <nat:3> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> + <nat:2> \} \, <var:d> := <var:d> * <var:Y> \, \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \times <var:F> ^ <nat:10> + <nat:3> \times <var:F> ^ <nat:9> + <nat:4> \times <var:F> ^ <nat:8> + <nat:1> \times <var:F> ^ <nat:7> + <nat:4> \times <var:F> ^ <nat:6> + <nat:3> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> + \} \end{eqnarray} Taking another step toward the subsequent bit of code found in the list of commands , we have \begin{eqnarray} \{ <var:Y> = <var:F> \} \, <var:d> := <nat:3> \, \{ <var:Y> = <var:F> \land <var:d> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:Y> = <var:F> }} <var:d> := <nat:3> ; <var:d> := <nat:3> + <var:d> * <var:Y> ; <var:d> := <nat:4> + <var:d> * <var:Y> ; <var:d> := <nat:1> + <var:d> * <var:Y> ; <var:d> := <nat:4> + <var:d> * <var:Y> ; <var:d> := <var:d> * <var:Y> ; <var:d> := <nat:3> + <var:d> * <var:Y> ; <var:d> := <var:d> * <var:Y> ; <var:d> := <nat:1> + <var:d> * <var:Y> ; <var:d> := <nat:2> + <var:d> * <var:Y> ; <var:d> := <var:d> * <var:Y> ; <var:d> := <nat:1> + <var:d> * <var:Y> {{ <var:d> = <nat:3> * <var:F> ^ <nat:11> + <nat:3> * <var:F> ^ <nat:10> + <nat:4> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:d> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:d> = <nat:3> * <var:F> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:6> + <nat:3> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:3> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:8> + <nat:3> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:9> + <nat:3> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:10> + <nat:3> * <var:F> ^ <nat:9> + <nat:4> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:6> + <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:d> = <nat:3> * <var:F> ^ <nat:11> + <nat:3> * <var:F> ^ <nat:10> + <nat:4> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 