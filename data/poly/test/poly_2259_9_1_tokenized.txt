\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:L> ; <var:b2> := <var:b1> * <var:L> ; <var:b3> := <var:b2> * <var:L> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:8> ; <var:b3> := <var:b3> * <nat:6> ; <var:i> := <var:b3> <var:i> := <var:i> + <var:b1> <var:i> := <var:i> + <var:b0> \end{verbatim} Assuming that $ <var:L> = <var:M> $ before running this series of instructions it must be that we see $ <var:i> = <nat:6> \times <var:M> ^ <nat:3> + <nat:8> \times <var:M> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions can be done using Hoare techniques . Moving on , we see \[ \begin{tabular} {rcl} \{ <var:L> = <var:M> \} & <var:b1> := <var:L> & \{ <var:L> = <var:M> \land <var:b1> = <var:M> \} \\ \{ <var:L> = <var:M> \land <var:b1> = <var:M> \} & <var:b2> := <var:b1> * <var:L> & \{ <var:L> = <var:M> \land <var:b1> = <var:M> \land <var:b2> = <var:M> ^ <nat:2> \} \\ \{ <var:L> = <var:M> \land <var:b1> = <var:M> \land <var:b2> = <var:M> ^ <nat:2> \} & <var:b3> := <var:b2> * <var:L> & \{ <var:L> = <var:M> \land <var:b1> = <var:M> \land <var:b2> = <var:M> ^ <nat:2> \land <var:b3> = <var:M> ^ <nat:3> \} \\ \{ <var:L> = <var:M> \land <var:b1> = <var:M> \land <var:b2> = <var:M> ^ <nat:2> \land <var:b3> = <var:M> ^ <nat:3> \} & <var:b0> := <nat:3> & \{ <var:L> = <var:M> \land <var:b1> = <var:M> \land <var:b2> = <var:M> ^ <nat:2> \land <var:b3> = <var:M> ^ <nat:3> \land <var:b0> = <nat:3> \} \end{tabular} This is ensured through the rule given by Hoare reasoning . Observing the upcoming statements contained in the code segment , \[ \begin{tabular} {rcl} \{ <var:L> = <var:M> \} & <var:b1> := <var:L> & \{ <var:L> = <var:M> \land <var:b1> = <var:M> \} \\ \{ <var:L> = <var:M> \land <var:b1> = <var:M> \} & <var:b2> := <var:b1> * <var:L> & \{ <var:L> = <var:M> \land <var:b1> = <var:M> \land <var:b2> = <var:M> ^ <nat:2> \} \\ \{ <var:L> = <var:M> \land <var:b1> = <var:M> \land <var:b2> = <var:M> ^ <nat:2> \} & <var:b3> := <var:b2> * <var:L> & \{ <var:L> = <var:M> \land <var:b1> = <var:M> \land <var:b2> = <var:M> ^ <nat:2> \land <var:b3> = <var:M> ^ <nat:3> \} \\ \{ <var:L> = <var:M> \land <var:b1> = <var:M> \land <var:b2> = <var:M> ^ <nat:2> \land <var:b3> = <var:M> ^ <nat:3> \} & <var:b0> := <nat:3> & \{ <var:L> = <var:M> \land <var:b1> = <var:M> \land <var:b2> = <var:M> ^ <nat:2> \land <var:b3> = <var:M> ^ <nat:3> \land <var:b0> = <nat:3> \} \\ \{ <var:L> = <var:M> \land <var:b1> = <var:M> \land <var:b2> = <var:M> ^ <nat:2> \land <var:b3> = <var:M> ^ <nat:3> \land <var:b0> = <nat:3> \} & <var:b1> := <var:b1> * <nat:8> & \{ <var:L> = <var:M> \land <var:b1> = <nat:8> * <var:M> \land <var:b2> = <var:M> ^ <nat:2> \land <var:b3> = <var:M> ^ <nat:3> \land <var:b0> = <nat:3> \} \end{tabular} This is deduced using the binding law from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:L> = <var:M> }} <var:b1> := <var:L> ; <var:b2> := <var:b1> * <var:L> ; <var:b3> := <var:b2> * <var:L> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:8> ; <var:b3> := <var:b3> * <nat:6> ; <var:i> := <var:b3> <var:i> := <var:i> + <var:b1> <var:i> := <var:i> + <var:b0> {{ <var:i> = <nat:6> * <var:M> ^ <nat:3> + <nat:8> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:b1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:b1> = <var:M> /\ <var:b2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:b1> = <var:M> /\ <var:b2> = <var:M> ^ <nat:2> /\ <var:b3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:b1> = <var:M> /\ <var:b2> = <var:M> ^ <nat:2> /\ <var:b3> = <var:M> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:b1> = <nat:8> * <var:M> /\ <var:b2> = <var:M> ^ <nat:2> /\ <var:b3> = <var:M> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:b1> = <nat:8> * <var:M> /\ <var:b2> = <var:M> ^ <nat:2> /\ <var:b3> = <nat:6> * <var:M> ^ <nat:3> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:b1> = <nat:8> * <var:M> /\ <var:b2> = <var:M> ^ <nat:2> /\ <var:b0> = <nat:3> /\ <var:i> = <nat:6> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:b0> = <nat:3> /\ <var:i> = <nat:6> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:M> /\ <var:i> = <nat:6> * <var:M> ^ <nat:3> + <nat:8> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 