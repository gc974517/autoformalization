\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:1> ; <var:Q> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:L> = <var:Y> $ ( for some whole numbers $ <var:Y> $ ) prior to the execution of this list of commands it must be that we have $ <var:Q> = <nat:1> $ after set of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:Y> \} \\ <var:g0> := <nat:1> ; \\ \{ <var:L> = <var:Y> \land <var:g0> = <nat:1> \} \\ <var:Q> := <var:g0> \\ \{ <var:L> = <var:Y> \land <var:Q> = <nat:1> \} \end{eqnarray} The application of typical Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:1> ; <var:Q> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:L> = <var:Y> }} <def:poly> {{ <var:Q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:g0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:Y> /\ <var:Q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 