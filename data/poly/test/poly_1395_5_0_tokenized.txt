\begin{document} \begin{theorem} Define the following series of commands as \begin{verbatim} <var:Z0> := <nat:5> ; <var:Z1> := <nat:6> ; <var:Z1> := <var:Z1> * <var:T> ; <var:L> := <var:Z1> ; <var:L> := <var:L> + <var:Z0> \end{verbatim} Allowing $ <var:T> = <var:X> $ ahead of the execution of the program then we have $ <var:L> = <nat:6> * <var:X> + <nat:5> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning returns : \begin{eqnarray} \{ <var:T> = <var:X> \} \\ <var:Z0> := <nat:5> ; \\ \{ <var:T> = <var:X> \land <var:Z0> = <nat:5> \} \end{eqnarray} Furthering the evaluation of this program returns : \begin{eqnarray} <var:Z1> := <nat:6> ; \\ \{ <var:T> = <var:X> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:6> \} \\ <var:Z1> := <var:Z1> * <var:T> ; \\ \{ <var:T> = <var:X> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:6> * <var:X> \} \\ <var:L> := <var:Z1> ; \\ \{ <var:T> = <var:X> \land <var:Z0> = <nat:5> \land <var:L> = <nat:6> * <var:X> \} \\ <var:L> := <var:L> + <var:Z0> \\ \{ <var:T> = <var:X> \land <var:L> = <nat:6> * <var:X> + <nat:5> \} \end{eqnarray} Considering the above , the series of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:T> = <var:X> }} <var:Z0> := <nat:5> ; <var:Z1> := <nat:6> ; <var:Z1> := <var:Z1> * <var:T> ; <var:L> := <var:Z1> ; <var:L> := <var:L> + <var:Z0> {{ <var:L> = <nat:6> * <var:X> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:Z0> = <nat:5> /\ <var:L> = <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:X> /\ <var:L> = <nat:6> * <var:X> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 