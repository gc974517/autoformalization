\begin{document} \begin{theorem} Consider a code : \begin{verbatim} <var:q0> := <nat:6> ; <var:e> := <var:q0> \end{verbatim} Allow $ <var:h> = <var:N> $ ahead of interpreting our list of commands it follows that we see $ <var:e> = <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:N> \} \\ <var:q0> := <nat:6> ; \\ \{ <var:h> = <var:N> \land <var:q0> = <nat:6> \} \\ <var:e> := <var:q0> \\ \{ <var:h> = <var:N> \land <var:e> = <nat:6> \} \end{eqnarray} Applying usual Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:h> = <var:N> }} <var:q0> := <nat:6> ; <var:e> := <var:q0> {{ <var:e> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:e> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 