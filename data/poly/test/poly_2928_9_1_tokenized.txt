\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l1> := <var:y> ; <var:l2> := <var:l1> * <var:y> ; <var:l3> := <var:l2> * <var:y> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:5> ; <var:l3> := <var:l3> * <nat:8> ; <var:V> := <var:l3> <var:V> := <var:V> + <var:l1> <var:V> := <var:V> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> in \emph{Imp} . Allow that we have $ <var:y> = <var:u> $ ahead of interpreting the series of commands , it holds that we see $ <var:V> = <nat:8> \times <var:u> ^ <nat:3> + <nat:5> \times <var:u> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of the program is demonstrated with Hoare reasoning . Taking a look at the subsequent bit of code seen in our code segment , we see the variable binding statement binding $ <var:y> $ to $ <var:l1>$ . This transfers the precondition $ \{ <var:y> = <var:u> \} $ toward the condition $ \{ <var:y> = <var:u> \land <var:l1> = <var:u> \} $ . Taking another step toward the next line in our list of commands , we see the assignment command assigning $ <var:l1> * <var:y> $ toward $ <var:l2>$ . This statement forwards the condition $ \{ <var:y> = <var:u> \land <var:l1> = <var:u> \} $ into the postcondition $ \{ <var:y> = <var:u> \land <var:l1> = <var:u> \land <var:l2> = <var:u> ^ <nat:2> \} $ . Taking a look at the next bit of code contained in our code , we see the variable update command defining $ <var:l2> * <var:y> $ to $ <var:l3>$ . This command takes $ \{ <var:y> = <var:u> \land <var:l1> = <var:u> \land <var:l2> = <var:u> ^ <nat:2> \} $ to the postcondition $ \{ <var:y> = <var:u> \land <var:l1> = <var:u> \land <var:l2> = <var:u> ^ <nat:2> \land <var:l3> = <var:u> ^ <nat:3> \} $ . This is rigorously given with the assignment law given in typical Hoare techniques . Immediately following , we have the binding code defining $ <nat:9> $ to $ <var:l0>$ . This code takes $ \{ <var:y> = <var:u> \land <var:l1> = <var:u> \land <var:l2> = <var:u> ^ <nat:2> \land <var:l3> = <var:u> ^ <nat:3> \} $ into the condition $ \{ <var:y> = <var:u> \land <var:l1> = <var:u> \land <var:l2> = <var:u> ^ <nat:2> \land <var:l3> = <var:u> ^ <nat:3> \land <var:l0> = <nat:9> \} $ . Advancing to the next step , we have the binding code \verb | <var:l1> := <var:l1> * <nat:5> ; | . This code transfers the precondition $ \{ <var:y> = <var:u> \land <var:l1> = <var:u> \land <var:l2> = <var:u> ^ <nat:2> \land <var:l3> = <var:u> ^ <nat:3> \land <var:l0> = <nat:9> \} $ as $ \{ <var:y> = <var:u> \land <var:l1> = <nat:5> \cdot <var:u> \land <var:l2> = <var:u> ^ <nat:2> \land <var:l3> = <var:u> ^ <nat:3> \land <var:l0> = <nat:9> \} $ . Advancing , we see the line assigning $ <var:l3> * <nat:8> $ into $ <var:l3>$ . This statement advances the precondition $ \{ <var:y> = <var:u> \land <var:l1> = <nat:5> \cdot <var:u> \land <var:l2> = <var:u> ^ <nat:2> \land <var:l3> = <var:u> ^ <nat:3> \land <var:l0> = <nat:9> \} $ to the condition $ \{ <var:y> = <var:u> \land <var:l1> = <nat:5> \cdot <var:u> \land <var:l2> = <var:u> ^ <nat:2> \land <var:l3> = <nat:8> \cdot <var:u> ^ <nat:3> \land <var:l0> = <nat:9> \} $ . Moving forward to the next piece of code in our program , we see the statement giving $ <var:l3$ to $ <var:V>$ . This code redefines the condition $ \{ <var:y> = <var:u> \land <var:l1> = <nat:5> \cdot <var:u> \land <var:l2> = <var:u> ^ <nat:2> \land <var:l3> = <nat:8> \cdot <var:u> ^ <nat:3> \land <var:l0> = <nat:9> \} $ toward the condition $ \{ <var:y> = <var:u> \land <var:l1> = <nat:5> \cdot <var:u> \land <var:l2> = <var:u> ^ <nat:2> \land <var:l0> = <nat:9> \land <var:V> = <nat:8> \cdot <var:u> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment inference rule obtained from typical Hoare logic . Moving forward to the proceeding piece of code seen in the list of instructions , the binding code \verb | <var:V> := <var:V> + <var:l1> | . This statement takes the condition $ \{ <var:y> = <var:u> \land <var:l1> = <nat:5> \cdot <var:u> \land <var:l2> = <var:u> ^ <nat:2> \land <var:l0> = <nat:9> \land <var:V> = <nat:8> \cdot <var:u> ^ <nat:3> \} $ toward $ \{ <var:y> = <var:u> \land <var:l0> = <nat:9> \land <var:V> = <nat:8> \cdot <var:u> ^ <nat:3> + <nat:5> \cdot <var:u> \} $ . This is ensured through the assignment scheme given by Hoare reasoning . Shifting focus toward the upcoming piece of code found in the code , we have the environment update line \verb | <var:V> := <var:V> + <var:l0> | . This code advances $ \{ <var:y> = <var:u> \land <var:l0> = <nat:9> \land <var:V> = <nat:8> \cdot <var:u> ^ <nat:3> + <nat:5> \cdot <var:u> \} $ into the postcondition $ \{ <var:y> = <var:u> \land <var:V> = <nat:8> \cdot <var:u> ^ <nat:3> + <nat:5> \cdot <var:u> + <nat:9> \} $ . This is shown to be logically sound by the assignment scheme defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l1> := <var:y> ; <var:l2> := <var:l1> * <var:y> ; <var:l3> := <var:l2> * <var:y> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:5> ; <var:l3> := <var:l3> * <nat:8> ; <var:V> := <var:l3> <var:V> := <var:V> + <var:l1> <var:V> := <var:V> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:y> = <var:u> }} <def:poly> {{ <var:V> = <nat:8> * <var:u> ^ <nat:3> + <nat:5> * <var:u> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:l1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:l1> = <var:u> /\ <var:l2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:l1> = <var:u> /\ <var:l2> = <var:u> ^ <nat:2> /\ <var:l3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:l1> = <var:u> /\ <var:l2> = <var:u> ^ <nat:2> /\ <var:l3> = <var:u> ^ <nat:3> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:l1> = <nat:5> * <var:u> /\ <var:l2> = <var:u> ^ <nat:2> /\ <var:l3> = <var:u> ^ <nat:3> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:l1> = <nat:5> * <var:u> /\ <var:l2> = <var:u> ^ <nat:2> /\ <var:l3> = <nat:8> * <var:u> ^ <nat:3> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:l1> = <nat:5> * <var:u> /\ <var:l2> = <var:u> ^ <nat:2> /\ <var:l0> = <nat:9> /\ <var:V> = <nat:8> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:l0> = <nat:9> /\ <var:V> = <nat:8> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:V> = <nat:8> * <var:u> ^ <nat:3> + <nat:5> * <var:u> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 