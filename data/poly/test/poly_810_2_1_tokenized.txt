\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:9> ; <var:e> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allowing ( given all $ <var:p> $ ) that $ <var:l> = <var:p> $ before the execution of the series of commands it follows that we see $ <var:e> = <nat:9> $ after series of instructions terminates . \end{theorem} \begin{proof} The method of proof for this series of instructions is given with typical Hoare techniques . Taking a look at the proceeding bits of codefound in the segment of code , we have \begin{eqnarray} \{ <var:l> = <var:p> \} \, <var:H0> := <nat:9> \, \{ <var:l> = <var:p> \land <var:H0> = <nat:9> \} \\ \{ <var:l> = <var:p> \land <var:H0> = <nat:9> \} \, <var:e> := <var:H0\, \{ <var:l> = <var:p> \land <var:e> = <nat:9> \} \end{eqnarray} This is ensured using the variable update law of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:9> ; <var:e> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:l> = <var:p> }} <def:poly> {{ <var:e> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:p> /\ <var:H0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:p> /\ <var:e> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 