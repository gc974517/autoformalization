\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} such that \begin{verbatim} <var:g1> := <var:Z> ; <var:g2> := <var:g1> * <var:Z> ; <var:g3> := <var:g2> * <var:Z> ; <var:g0> := <nat:8> ; <var:g1> := <var:g1> * <nat:4> ; <var:g2> := <var:g2> * <nat:7> ; <var:g3> := <var:g3> * <nat:5> ; <var:I> := <var:g3> <var:I> := <var:I> + <var:g2> <var:I> := <var:I> + <var:g1> <var:I> := <var:I> + <var:g0> \end{verbatim} Allow it to be that $ <var:Z> = <var:n> $ , with some integers $ <var:n> $ , ahead of running our program , it must be that we have $ <var:I> = <nat:5> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:8> $ . \end{theorem} \begin{proof} The course of logic for the code is accomplished by standard Hoare techniques . Shifting focus toward the next line contained in the code , we see the variable assignmet command yielding $ <var:Z> $ toward $ <var:g1>$ . This code transfers the precondition $ \{ <var:Z> = <var:n> \} $ into $ \{ <var:Z> = <var:n> \land <var:g1> = <var:n> \} $ . This is guaranteed by the assignment rule given by standard Hoare logic . Taking a look at the proceeding piece of code contained in the set of commands , we see the variable assignmet command giving $ <var:g1> * <var:Z> $ to $ <var:g2>$ . This redefines $ \{ <var:Z> = <var:n> \land <var:g1> = <var:n> \} $ to the condition $ \{ <var:Z> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \} $ . Taking a look at the proceeding statement found in our segment of code , we see the binding line yielding $ <var:g2> * <var:Z> $ to $ <var:g3>$ . This statement redefines $ \{ <var:Z> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \} $ as the postcondition $ \{ <var:Z> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \} $ . This is sound by the assignment inference rule found in Hoare techniques . Advancing on , we have the binding command binding $ <nat:8> $ to $ <var:g0>$ . This statement takes the precondition $ \{ <var:Z> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \} $ toward the postcondition $ \{ <var:Z> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g0> = <nat:8> \} $ . Looking at the proceeding statement seen in the set of commands , we have the variable update code binding $ <var:g1> * <nat:4> $ toward $ <var:g1>$ . This line takes $ \{ <var:Z> = <var:n> \land <var:g1> = <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g0> = <nat:8> \} $ into $ \{ <var:Z> = <var:n> \land <var:g1> = <nat:4> \cdot <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g0> = <nat:8> \} $ . This is deduced using the assignment rule obtained from usual Hoare techniques . Taking another step toward the next step in the series of instructions , we see the variable assignmet command letting $ <var:g2> * <nat:7> $ as $ <var:g2>$ . This advances the condition $ \{ <var:Z> = <var:n> \land <var:g1> = <nat:4> \cdot <var:n> \land <var:g2> = <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g0> = <nat:8> \} $ toward the condition $ \{ <var:Z> = <var:n> \land <var:g1> = <nat:4> \cdot <var:n> \land <var:g2> = <nat:7> \cdot <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g0> = <nat:8> \} $ . Taking a look at the following piece of code found in the segment of code , the line \verb | <var:g3> := <var:g3> * <nat:5> ; | . This line advances the condition $ \{ <var:Z> = <var:n> \land <var:g1> = <nat:4> \cdot <var:n> \land <var:g2> = <nat:7> \cdot <var:n> ^ <nat:2> \land <var:g3> = <var:n> ^ <nat:3> \land <var:g0> = <nat:8> \} $ as the condition $ \{ <var:Z> = <var:n> \land <var:g1> = <nat:4> \cdot <var:n> \land <var:g2> = <nat:7> \cdot <var:n> ^ <nat:2> \land <var:g3> = <nat:5> \cdot <var:n> ^ <nat:3> \land <var:g0> = <nat:8> \} $ . Advancing to the proceeding statement in our set of commands , we see the binding statement binding $ <var:g3$ into $ <var:I>$ . This line advances $ \{ <var:Z> = <var:n> \land <var:g1> = <nat:4> \cdot <var:n> \land <var:g2> = <nat:7> \cdot <var:n> ^ <nat:2> \land <var:g3> = <nat:5> \cdot <var:n> ^ <nat:3> \land <var:g0> = <nat:8> \} $ to the condition $ \{ <var:Z> = <var:n> \land <var:g1> = <nat:4> \cdot <var:n> \land <var:g2> = <nat:7> \cdot <var:n> ^ <nat:2> \land <var:g0> = <nat:8> \land <var:I> = <nat:5> \cdot <var:n> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment scheme from standard Hoare reasoning . Advancing , we see the environment update code \verb | <var:I> := <var:I> + <var:g2> | . This forwards the precondition $ \{ <var:Z> = <var:n> \land <var:g1> = <nat:4> \cdot <var:n> \land <var:g2> = <nat:7> \cdot <var:n> ^ <nat:2> \land <var:g0> = <nat:8> \land <var:I> = <nat:5> \cdot <var:n> ^ <nat:3> \} $ to the postcondition $ \{ <var:Z> = <var:n> \land <var:g1> = <nat:4> \cdot <var:n> \land <var:g0> = <nat:8> \land <var:I> = <nat:5> \cdot <var:n> ^ <nat:3> + <nat:7> \cdot <var:n> ^ <nat:2> \} $ . This is ensured through the assignment scheme in standard Hoare logic . Next , the binding command giving $ <var:I> + <var:g1$ toward $ <var:I>$ . This redefines the condition $ \{ <var:Z> = <var:n> \land <var:g1> = <nat:4> \cdot <var:n> \land <var:g0> = <nat:8> \land <var:I> = <nat:5> \cdot <var:n> ^ <nat:3> + <nat:7> \cdot <var:n> ^ <nat:2> \} $ as $ \{ <var:Z> = <var:n> \land <var:g0> = <nat:8> \land <var:I> = <nat:5> \cdot <var:n> ^ <nat:3> + <nat:7> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> \} $ . Further , we have the variable binding line \verb | <var:I> := <var:I> + <var:g0> | . This moves the precondition $ \{ <var:Z> = <var:n> \land <var:g0> = <nat:8> \land <var:I> = <nat:5> \cdot <var:n> ^ <nat:3> + <nat:7> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> \} $ as the postcondition $ \{ <var:Z> = <var:n> \land <var:I> = <nat:5> \cdot <var:n> ^ <nat:3> + <nat:7> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + <nat:8> \} $ . This is known to be sound using the assignment rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:Z> = <var:n> }} <var:g1> := <var:Z> ; <var:g2> := <var:g1> * <var:Z> ; <var:g3> := <var:g2> * <var:Z> ; <var:g0> := <nat:8> ; <var:g1> := <var:g1> * <nat:4> ; <var:g2> := <var:g2> * <nat:7> ; <var:g3> := <var:g3> * <nat:5> ; <var:I> := <var:g3> <var:I> := <var:I> + <var:g2> <var:I> := <var:I> + <var:g1> <var:I> := <var:I> + <var:g0> {{ <var:I> = <nat:5> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:g1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:g1> = <var:n> /\ <var:g2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:g1> = <var:n> /\ <var:g2> = <var:n> ^ <nat:2> /\ <var:g3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:g1> = <var:n> /\ <var:g2> = <var:n> ^ <nat:2> /\ <var:g3> = <var:n> ^ <nat:3> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:g1> = <nat:4> * <var:n> /\ <var:g2> = <var:n> ^ <nat:2> /\ <var:g3> = <var:n> ^ <nat:3> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:g1> = <nat:4> * <var:n> /\ <var:g2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:g3> = <var:n> ^ <nat:3> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:g1> = <nat:4> * <var:n> /\ <var:g2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:g3> = <nat:5> * <var:n> ^ <nat:3> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:g1> = <nat:4> * <var:n> /\ <var:g2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:g0> = <nat:8> /\ <var:I> = <nat:5> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:g1> = <nat:4> * <var:n> /\ <var:g0> = <nat:8> /\ <var:I> = <nat:5> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:g0> = <nat:8> /\ <var:I> = <nat:5> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:I> = <nat:5> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 