\begin{document} \begin{theorem} Define the following list of instructions as follows \begin{verbatim} <var:x0> := <nat:1> ; <var:Q> := <var:x0> \end{verbatim} Given that $ <var:R> = <var:t> $ prior to executing this series of commands then we see $ <var:Q> = <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of commands is evident with typical Hoare logic . Taking a look at the upcoming steps seen in the series of instructions , \verb | { <var:R> = <var:t> } <var:x0> := <nat:1> { <var:R> = <var:t> \land <var:x0> = <nat:1> } | and \verb | { <var:R> = <var:t> \land <var:x0> = <nat:1> } <var:Q> := <var:x0{ <var:R> = <var:t> \land <var:Q> = <nat:1> } | . This is shown to be logically sound through the law from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:R> = <var:t> }} <var:x0> := <nat:1> ; <var:Q> := <var:x0> {{ <var:Q> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:t> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:t> /\ <var:Q> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 