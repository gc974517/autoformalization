\begin{document} \begin{theorem} Define the following series of commands as follows \begin{verbatim} <var:x> := <nat:4> ; <var:x> := <nat:3> + <var:x> * <var:C> ; <var:x> := <nat:1> + <var:x> * <var:C> ; <var:x> := <nat:2> + <var:x> * <var:C> \end{verbatim} Given , assuming some positive coefficients $ <var:d> $ , $ <var:C> = <var:d> $ prior to interpreting the series of instructions it follows that we see $ <var:x> = <nat:4> \cdot <var:d> ^ <nat:3> + <nat:3> \cdot <var:d> ^ <nat:2> + <nat:1> \cdot <var:d> + <nat:2> $ after code is done executing . \end{theorem} \begin{proof} The method of proof for the segment of code can be given through standard Hoare reasoning . Moving on , we see \begin{verbatim} { <var:C> = <var:d> } <var:x> := <nat:4> { <var:C> = <var:d> \land <var:x> = <nat:4> } { <var:C> = <var:d> \land <var:x> = <nat:4> } <var:x> := <nat:3> + <var:x> * <var:C> { <var:C> = <var:d> \land <var:x> = <nat:4> \times <var:d> + <nat:3> } { <var:C> = <var:d> \land <var:x> = <nat:4> \times <var:d> + <nat:3> } <var:x> := <nat:1> + <var:x> * <var:C> { <var:C> = <var:d> \land <var:x> = <nat:4> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:1> } \end{verbatim} This is rigorously given through the binding rule obtained from Hoare logic . Next , we see \begin{verbatim} { <var:C> = <var:d> } <var:x> := <nat:4> { <var:C> = <var:d> \land <var:x> = <nat:4> } \end{verbatim} This is shown through the variable assignmet rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:C> = <var:d> }} <var:x> := <nat:4> ; <var:x> := <nat:3> + <var:x> * <var:C> ; <var:x> := <nat:1> + <var:x> * <var:C> ; <var:x> := <nat:2> + <var:x> * <var:C> {{ <var:x> = <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:x> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:x> = <nat:4> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:x> = <nat:4> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:d> /\ <var:x> = <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 