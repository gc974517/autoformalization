\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:8> ; <var:r> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Assume , given any $ <var:h> \in \mathbb{N} $ , that we have $ <var:a> = <var:h> $ ahead of evaluating the series of instructions , it must be that we have $ <var:r> = <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions is given through typical Hoare reasoning . Moving on to the next step , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:h> \} & <var:P0> := <nat:8> & \{ <var:a> = <var:h> \land <var:P0> = <nat:8> \} \end{tabular} This is guaranteed through the variable update inference rule found in standard Hoare logic . Taking another step toward the proceeding bit of code contained in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:a> = <var:h> \} & <var:P0> := <nat:8> & \{ <var:a> = <var:h> \land <var:P0> = <nat:8> \} \end{tabular} This is sound by the environment update rule of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:8> ; <var:r> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:a> = <var:h> }} <def:poly> {{ <var:r> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:h> /\ <var:r> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 