\begin{document} \begin{theorem} Define a code segment in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:1> ; <var:Y4> := <nat:2> ; <var:Y4> := <var:Y4> * <var:L> ; <var:Y4> := <var:Y4> * <var:L> ; <var:Y4> := <var:Y4> * <var:L> ; <var:Y4> := <var:Y4> * <var:L> ; <var:q> := <var:Y4> ; <var:q> := <var:q> + <var:Y0> \end{verbatim} Given , for all natural numbers $ <var:g> $ , that $ <var:L> = <var:g> $ ahead of the execution of our set of commands it follows that we see $ <var:q> = <nat:2> \times <var:g> ^ <nat:4> + <nat:1> $ when code segment has finished executing . \end{theorem} \begin{proof} The way to prove correctness for our code is given with usual Hoare reasoning . Immediately after , we see \begin{eqnarray} \{ <var:L> = <var:g> \} \, <var:Y0> := <nat:1> \, \{ <var:L> = <var:g> \land <var:Y0> = <nat:1> \} \end{eqnarray} Keeping momentum , we have \begin{eqnarray} \{ <var:L> = <var:g> \} \, <var:Y0> := <nat:1> \, \{ <var:L> = <var:g> \land <var:Y0> = <nat:1> \} \\ \{ <var:L> = <var:g> \land <var:Y0> = <nat:1> \} \, <var:Y4> := <nat:2> \, \{ <var:L> = <var:g> \land <var:Y0> = <nat:1> \land <var:Y4> = <nat:2> \} \end{eqnarray} This is rigorously given through the variable update law from standard Hoare logic . Going forward , we see \begin{eqnarray} \{ <var:L> = <var:g> \} \, <var:Y0> := <nat:1> \, \{ <var:L> = <var:g> \land <var:Y0> = <nat:1> \} \\ \{ <var:L> = <var:g> \land <var:Y0> = <nat:1> \} \, <var:Y4> := <nat:2> \, \{ <var:L> = <var:g> \land <var:Y0> = <nat:1> \land <var:Y4> = <nat:2> \} \\ \{ <var:L> = <var:g> \land <var:Y0> = <nat:1> \land <var:Y4> = <nat:2> \} \, <var:Y4> := <var:Y4> * <var:L> \, \{ <var:L> = <var:g> \land <var:Y0> = <nat:1> \land <var:Y4> = <nat:2> \cdot <var:g> \} \\ \{ <var:L> = <var:g> \land <var:Y0> = <nat:1> \land <var:Y4> = <nat:2> \cdot <var:g> \} \, <var:Y4> := <var:Y4> * <var:L> \, \{ <var:L> = <var:g> \land <var:Y0> = <nat:1> \land <var:Y4> = <nat:2> \cdot <var:g> ^ <nat:2> \} \\ \{ <var:L> = <var:g> \land <var:Y0> = <nat:1> \land <var:Y4> = <nat:2> \cdot <var:g> ^ <nat:2> \} \, <var:Y4> := <var:Y4> * <var:L> \, \{ <var:L> = <var:g> \land <var:Y0> = <nat:1> \land <var:Y4> = <nat:2> \cdot <var:g> ^ <nat:3> \} \end{eqnarray} This is deduced by the variable assignmet law in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y4> : string := " <var:Y4> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:L> = <var:g> }} <var:Y0> := <nat:1> ; <var:Y4> := <nat:2> ; <var:Y4> := <var:Y4> * <var:L> ; <var:Y4> := <var:Y4> * <var:L> ; <var:Y4> := <var:Y4> * <var:L> ; <var:Y4> := <var:Y4> * <var:L> ; <var:q> := <var:Y4> ; <var:q> := <var:q> + <var:Y0> {{ <var:q> = <nat:2> * <var:g> ^ <nat:4> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:Y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:Y0> = <nat:1> /\ <var:Y4> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:Y0> = <nat:1> /\ <var:Y4> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:Y0> = <nat:1> /\ <var:Y4> = <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:Y0> = <nat:1> /\ <var:Y4> = <nat:2> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:Y0> = <nat:1> /\ <var:Y4> = <nat:2> * <var:g> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:Y0> = <nat:1> /\ <var:q> = <nat:2> * <var:g> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:q> = <nat:2> * <var:g> ^ <nat:4> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 