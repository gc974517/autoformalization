\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as follows \begin{verbatim} <var:J0> := <nat:4> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:V> ; <var:J2> := <nat:4> ; <var:J2> := <var:J2> * <var:V> ; <var:J2> := <var:J2> * <var:V> ; <var:I> := <var:J2> ; <var:I> := <var:I> + <var:J1> ; <var:I> := <var:I> + <var:J0> \end{verbatim} Allow $ <var:V> = <var:r> $ , given some positive integer coefficients $ <var:r> $ , prior to executing the list of instructions then $ <var:I> = <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning returns : \begin{eqnarray} \{ <var:V> = <var:r> \} \\ <var:J0> := <nat:4> ; \\ \{ <var:V> = <var:r> \land <var:J0> = <nat:4> \} \\ <var:J1> := <nat:3> ; \\ \{ <var:V> = <var:r> \land <var:J0> = <nat:4> \land <var:J1> = <nat:3> \} \\ <var:J1> := <var:J1> * <var:V> ; \\ \{ <var:V> = <var:r> \land <var:J0> = <nat:4> \land <var:J1> = <nat:3> \times <var:r> \} \\ <var:J2> := <nat:4> ; \\ \{ <var:V> = <var:r> \land <var:J0> = <nat:4> \land <var:J1> = <nat:3> \times <var:r> \land <var:J2> = <nat:4> \} \\ <var:J2> := <var:J2> * <var:V> ; \\ \{ <var:V> = <var:r> \land <var:J0> = <nat:4> \land <var:J1> = <nat:3> \times <var:r> \land <var:J2> = <nat:4> \times <var:r> \} \\ <var:J2> := <var:J2> * <var:V> ; \\ \{ <var:V> = <var:r> \land <var:J0> = <nat:4> \land <var:J1> = <nat:3> \times <var:r> \land <var:J2> = <nat:4> \times <var:r> ^ <nat:2> \} \\ <var:I> := <var:J2> ; \\ \{ <var:V> = <var:r> \land <var:J0> = <nat:4> \land <var:J1> = <nat:3> \times <var:r> \land <var:I> = <nat:4> \times <var:r> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:J1> ; \\ \{ <var:V> = <var:r> \land <var:J0> = <nat:4> \land <var:I> = <nat:4> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> \} \\ <var:I> := <var:I> + <var:J0> \\ \{ <var:V> = <var:r> \land <var:I> = <nat:4> \times <var:r> ^ <nat:2> + <nat:3> \times <var:r> + <nat:4> \} \end{eqnarray} Thus , our list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:V> = <var:r> }} <var:J0> := <nat:4> ; <var:J1> := <nat:3> ; <var:J1> := <var:J1> * <var:V> ; <var:J2> := <nat:4> ; <var:J2> := <var:J2> * <var:V> ; <var:J2> := <var:J2> * <var:V> ; <var:I> := <var:J2> ; <var:I> := <var:I> + <var:J1> ; <var:I> := <var:I> + <var:J0> {{ <var:I> = <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:3> * <var:r> /\ <var:J2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:3> * <var:r> /\ <var:J2> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:3> * <var:r> /\ <var:J2> = <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:J0> = <nat:4> /\ <var:J1> = <nat:3> * <var:r> /\ <var:I> = <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:J0> = <nat:4> /\ <var:I> = <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:r> /\ <var:I> = <nat:4> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 