\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:5> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:v> ; <var:p2> := <nat:8> ; <var:p2> := <var:p2> * <var:v> ; <var:p2> := <var:p2> * <var:v> ; <var:p3> := <nat:8> ; <var:p3> := <var:p3> * <var:v> ; <var:p3> := <var:p3> * <var:v> ; <var:p3> := <var:p3> * <var:v> ; <var:Z> := <var:p3> ; <var:Z> := <var:Z> + <var:p2> ; <var:Z> := <var:Z> + <var:p1> ; <var:Z> := <var:Z> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Allow ( given any positive integer coefficients $ <var:l> $ ) it to be that $ <var:v> = <var:l> $ prior to the evaluation of our list of commands it must be that we see $ <var:Z> = <nat:8> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:5> $ when series of instructions is done executing . \end{theorem} \begin{proof} The application of usual Hoare reasoning returns : \begin{eqnarray} \{ <var:v> = <var:l> \} \\ <var:p0> := <nat:5> ; \\ \{ <var:v> = <var:l> \land <var:p0> = <nat:5> \} \\ <var:p1> := <nat:1> ; \\ \{ <var:v> = <var:l> \land <var:p0> = <nat:5> \land <var:p1> = <nat:1> \} \\ <var:p1> := <var:p1> * <var:v> ; \\ \{ <var:v> = <var:l> \land <var:p0> = <nat:5> \land <var:p1> = <nat:1> \cdot <var:l> \} \\ <var:p2> := <nat:8> ; \\ \{ <var:v> = <var:l> \land <var:p0> = <nat:5> \land <var:p1> = <nat:1> \cdot <var:l> \land <var:p2> = <nat:8> \} \\ <var:p2> := <var:p2> * <var:v> ; \\ \{ <var:v> = <var:l> \land <var:p0> = <nat:5> \land <var:p1> = <nat:1> \cdot <var:l> \land <var:p2> = <nat:8> \cdot <var:l> \} \\ <var:p2> := <var:p2> * <var:v> ; \\ \{ <var:v> = <var:l> \land <var:p0> = <nat:5> \land <var:p1> = <nat:1> \cdot <var:l> \land <var:p2> = <nat:8> \cdot <var:l> ^ <nat:2> \} \\ <var:p3> := <nat:8> ; \\ \{ <var:v> = <var:l> \land <var:p0> = <nat:5> \land <var:p1> = <nat:1> \cdot <var:l> \land <var:p2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:p3> = <nat:8> \} \\ <var:p3> := <var:p3> * <var:v> ; \\ \{ <var:v> = <var:l> \land <var:p0> = <nat:5> \land <var:p1> = <nat:1> \cdot <var:l> \land <var:p2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:p3> = <nat:8> \cdot <var:l> \} \\ <var:p3> := <var:p3> * <var:v> ; \\ \{ <var:v> = <var:l> \land <var:p0> = <nat:5> \land <var:p1> = <nat:1> \cdot <var:l> \land <var:p2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:p3> = <nat:8> \cdot <var:l> ^ <nat:2> \} \\ <var:p3> := <var:p3> * <var:v> ; \\ \{ <var:v> = <var:l> \land <var:p0> = <nat:5> \land <var:p1> = <nat:1> \cdot <var:l> \land <var:p2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:p3> = <nat:8> \cdot <var:l> ^ <nat:3> \} \\ <var:Z> := <var:p3> ; \\ \{ <var:v> = <var:l> \land <var:p0> = <nat:5> \land <var:p1> = <nat:1> \cdot <var:l> \land <var:p2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:Z> = <nat:8> \cdot <var:l> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:p2> ; \\ \{ <var:v> = <var:l> \land <var:p0> = <nat:5> \land <var:p1> = <nat:1> \cdot <var:l> \land <var:Z> = <nat:8> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:p1> ; \\ \{ <var:v> = <var:l> \land <var:p0> = <nat:5> \land <var:Z> = <nat:8> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> \} \\ <var:Z> := <var:Z> + <var:p0> \\ \{ <var:v> = <var:l> \land <var:Z> = <nat:8> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + <nat:5> \} \end{eqnarray} As a result , our segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <def:poly> := <var:p0> := <nat:5> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:v> ; <var:p2> := <nat:8> ; <var:p2> := <var:p2> * <var:v> ; <var:p2> := <var:p2> * <var:v> ; <var:p3> := <nat:8> ; <var:p3> := <var:p3> * <var:v> ; <var:p3> := <var:p3> * <var:v> ; <var:p3> := <var:p3> * <var:v> ; <var:Z> := <var:p3> ; <var:Z> := <var:Z> + <var:p2> ; <var:Z> := <var:Z> + <var:p1> ; <var:Z> := <var:Z> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:v> = <var:l> }} <def:poly> {{ <var:Z> = <nat:8> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:1> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:1> * <var:l> /\ <var:p2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:1> * <var:l> /\ <var:p2> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:1> * <var:l> /\ <var:p2> = <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:1> * <var:l> /\ <var:p2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:p3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:1> * <var:l> /\ <var:p2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:1> * <var:l> /\ <var:p2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:1> * <var:l> /\ <var:p2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:1> * <var:l> /\ <var:p2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:Z> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:p0> = <nat:5> /\ <var:p1> = <nat:1> * <var:l> /\ <var:Z> = <nat:8> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:p0> = <nat:5> /\ <var:Z> = <nat:8> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:1> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:Z> = <nat:8> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 