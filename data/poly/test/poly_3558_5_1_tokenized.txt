\begin{document} \begin{theorem} We define a list of instructions : \begin{verbatim} <var:I1> := <var:a> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:4> ; <var:n> := <var:I1> <var:n> := <var:n> + <var:I0> \end{verbatim} Given that $ <var:a> = <var:j> $ prior to interpreting the code , then we see $ <var:n> = <nat:4> \times <var:j> + <nat:9> $ once set of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:j> \} \\ <var:I1> := <var:a> ; \\ \{ <var:a> = <var:j> \land <var:I1> = <var:j> \} \\ <var:I0> := <nat:9> ; \\ \{ <var:a> = <var:j> \land <var:I1> = <var:j> \land <var:I0> = <nat:9> \} \\ <var:I1> := <var:I1> * <nat:4> ; \\ \{ <var:a> = <var:j> \land <var:I1> = <nat:4> \cdot <var:j> \land <var:I0> = <nat:9> \} \\ <var:n> := <var:I1> \\ \{ <var:a> = <var:j> \land <var:I0> = <nat:9> \land <var:n> = <nat:4> \cdot <var:j> \} \\ <var:n> := <var:n> + <var:I0> \\ \{ <var:a> = <var:j> \land <var:n> = <nat:4> \cdot <var:j> + <nat:9> \} \end{eqnarray} Using standard Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:a> = <var:j> }} <var:I1> := <var:a> ; <var:I0> := <nat:9> ; <var:I1> := <var:I1> * <nat:4> ; <var:n> := <var:I1> <var:n> := <var:n> + <var:I0> {{ <var:n> = <nat:4> * <var:j> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:I1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:I1> = <var:j> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:I1> = <nat:4> * <var:j> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:I0> = <nat:9> /\ <var:n> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:j> /\ <var:n> = <nat:4> * <var:j> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 