\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r> := <nat:4> ; <var:r> := <nat:4> + <var:r> * <var:B> ; <var:r> := <nat:3> + <var:r> * <var:B> ; <var:r> := <nat:3> + <var:r> * <var:B> ; <var:r> := <nat:4> + <var:r> * <var:B> ; <var:r> := <nat:1> + <var:r> * <var:B> ; <var:r> := <nat:4> + <var:r> * <var:B> ; <var:r> := <var:r> * <var:B> ; <var:r> := <var:r> * <var:B> ; <var:r> := <nat:4> + <var:r> * <var:B> ; <var:r> := <nat:2> + <var:r> * <var:B> ; <var:r> := <var:r> * <var:B> ; <var:r> := <var:r> * <var:B> ; <var:r> := <nat:3> + <var:r> * <var:B> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> . Given that we have $ <var:B> = <var:j> $ before running this segment of code , then we have $ <var:r> = <nat:4> * <var:j> ^ <nat:13> + <nat:4> * <var:j> ^ <nat:12> + <nat:3> * <var:j> ^ <nat:11> + <nat:3> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:1> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is given by usual Hoare reasoning . Moving forward to the next step , we have the assignment command binding $ <nat:4> $ into $ <var:r>$ . This code moves the condition $ \{ <var:B> = <var:j> \} $ to $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> \} $ . Going forward , the variable update statement \verb | <var:r> := <nat:4> + <var:r> * <var:B> ; | . This transfers the precondition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> \} $ into the condition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> + <nat:4> \} $ . Further , we have the variable binding code giving $ <nat:3> + <var:r> * <var:B> $ toward $ <var:r>$ . This redefines the condition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> + <nat:4> \} $ into the postcondition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> \} $ . Moving on to the following step seen in the series of commands , we see the binding command \verb | <var:r> := <nat:3> + <var:r> * <var:B> ; | . This forwards $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> \} $ toward $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> \} $ . This is ensured with the assignment rule in standard Hoare logic . Going to the next step , we have the environment update code binding $ <nat:4> + <var:r> * <var:B> $ to $ <var:r>$ . This line advances the condition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> \} $ into the postcondition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:4> \} $ . This is sound using the assignment inference rule defined by typical Hoare logic . Paying attention to the following statement seen in our series of commands , we see the environment update statement \verb | <var:r> := <nat:1> + <var:r> * <var:B> ; | . This command redefines the condition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:4> \} $ to the condition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> \} $ . Looking at the subsequent line seen in our list of commands , we have the environment update statement \verb | <var:r> := <nat:4> + <var:r> * <var:B> ; | . This command advances the condition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> \} $ into the postcondition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> \} $ . Focusing on the subsequent statement seen in our series of instructions , the binding command yielding $ <var:r> * <var:B> $ as $ <var:r>$ . This redefines $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> \} $ into the postcondition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + \} $ . This is guaranteed using the assignment rule of standard Hoare techniques . Looking at the upcoming bit of code in the code segment , the variable update command giving $ <var:r> * <var:B> $ as $ <var:r>$ . This code moves the precondition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + \} $ as $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + \} $ . This is sound with the assignment law given by typical Hoare logic . Moving forward , we have the statement binding $ <nat:4> + <var:r> * <var:B> $ into $ <var:r>$ . This moves the precondition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + \} $ into $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:4> \} $ . Immediately after , we see the assignment statement defining $ <nat:2> + <var:r> * <var:B> $ toward $ <var:r>$ . This statement forwards $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:4> \} $ as $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:3> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> + <nat:2> \} $ . Moving on to the next step , we see the variable binding command \verb | <var:r> := <var:r> * <var:B> ; | . This forwards $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:3> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> + <nat:2> \} $ as the postcondition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:11> + <nat:4> * <var:j> ^ <nat:10> + <nat:3> * <var:j> ^ <nat:9> + <nat:3> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + \} $ . Stepping through , we see the assignment statement letting $ <var:r> * <var:B> $ to $ <var:r>$ . This command takes $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:11> + <nat:4> * <var:j> ^ <nat:10> + <nat:3> * <var:j> ^ <nat:9> + <nat:3> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + \} $ into the postcondition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:12> + <nat:4> * <var:j> ^ <nat:11> + <nat:3> * <var:j> ^ <nat:10> + <nat:3> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + \} $ . This is guaranteed using the assignment rule found in usual Hoare logic . Keeping momentum , the code \verb | <var:r> := <nat:3> + <var:r> * <var:B> | . This moves the condition $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:12> + <nat:4> * <var:j> ^ <nat:11> + <nat:3> * <var:j> ^ <nat:10> + <nat:3> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + \} $ into $ \{ <var:B> = <var:j> \land <var:r> = <nat:4> * <var:j> ^ <nat:13> + <nat:4> * <var:j> ^ <nat:12> + <nat:3> * <var:j> ^ <nat:11> + <nat:3> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:1> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:3> \} $ . This is shown by the assignment law defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:r> := <nat:4> ; <var:r> := <nat:4> + <var:r> * <var:B> ; <var:r> := <nat:3> + <var:r> * <var:B> ; <var:r> := <nat:3> + <var:r> * <var:B> ; <var:r> := <nat:4> + <var:r> * <var:B> ; <var:r> := <nat:1> + <var:r> * <var:B> ; <var:r> := <nat:4> + <var:r> * <var:B> ; <var:r> := <var:r> * <var:B> ; <var:r> := <var:r> * <var:B> ; <var:r> := <nat:4> + <var:r> * <var:B> ; <var:r> := <nat:2> + <var:r> * <var:B> ; <var:r> := <var:r> * <var:B> ; <var:r> := <var:r> * <var:B> ; <var:r> := <nat:3> + <var:r> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:B> = <var:j> }} <def:poly> {{ <var:r> = <nat:4> * <var:j> ^ <nat:13> + <nat:4> * <var:j> ^ <nat:12> + <nat:3> * <var:j> ^ <nat:11> + <nat:3> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:1> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:3> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> * <var:j> ^ <nat:11> + <nat:4> * <var:j> ^ <nat:10> + <nat:3> * <var:j> ^ <nat:9> + <nat:3> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> * <var:j> ^ <nat:12> + <nat:4> * <var:j> ^ <nat:11> + <nat:3> * <var:j> ^ <nat:10> + <nat:3> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:r> = <nat:4> * <var:j> ^ <nat:13> + <nat:4> * <var:j> ^ <nat:12> + <nat:3> * <var:j> ^ <nat:11> + <nat:3> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:1> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 