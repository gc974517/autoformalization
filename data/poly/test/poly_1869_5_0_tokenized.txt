\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:8> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:B> ; <var:b> := <var:c1> ; <var:b> := <var:b> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> in \emph{Imp} . Assume , for every positive coefficients $ <var:N> $ , it to be that $ <var:B> = <var:N> $ ahead of executing the set of commands , it follows that we see $ <var:b> = <nat:4> \cdot <var:N> + <nat:8> $ once set of commands finishes . \end{theorem} \begin{proof} Arguing the correctness of the set of commands is demonstrated using the below decorated list of instructions . \begin{eqnarray} \{ <var:B> = <var:N> \} \\ <var:c0> := <nat:8> ; \\ \{ <var:B> = <var:N> \land <var:c0> = <nat:8> \} \\ <var:c1> := <nat:4> ; \\ \{ <var:B> = <var:N> \land <var:c0> = <nat:8> \land <var:c1> = <nat:4> \} \\ <var:c1> := <var:c1> * <var:B> ; \\ \{ <var:B> = <var:N> \land <var:c0> = <nat:8> \land <var:c1> = <nat:4> \cdot <var:N> \} \\ <var:b> := <var:c1> ; \\ \{ <var:B> = <var:N> \land <var:c0> = <nat:8> \land <var:b> = <nat:4> \cdot <var:N> \} \\ <var:b> := <var:b> + <var:c0> \\ \{ <var:B> = <var:N> \land <var:b> = <nat:4> \cdot <var:N> + <nat:8> \} \end{eqnarray} The application of standard Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c0> := <nat:8> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:B> ; <var:b> := <var:c1> ; <var:b> := <var:b> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:B> = <var:N> }} <def:poly> {{ <var:b> = <nat:4> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:c0> = <nat:8> /\ <var:b> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:b> = <nat:4> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 