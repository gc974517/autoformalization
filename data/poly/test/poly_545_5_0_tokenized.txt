\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:4> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:q> ; <var:U> := <var:h1> ; <var:U> := <var:U> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:q> = <var:p> $ before evaluating our program , it holds that we see $ <var:U> = <nat:1> \cdot <var:p> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the series of commands is demonstrated using the below decorated set of commands . \begin{eqnarray} \{ <var:q> = <var:p> \} \\ <var:h0> := <nat:4> ; \\ \{ <var:q> = <var:p> \land <var:h0> = <nat:4> \} \\ <var:h1> := <nat:1> ; \\ \{ <var:q> = <var:p> \land <var:h0> = <nat:4> \land <var:h1> = <nat:1> \} \\ <var:h1> := <var:h1> * <var:q> ; \\ \{ <var:q> = <var:p> \land <var:h0> = <nat:4> \land <var:h1> = <nat:1> \times <var:p> \} \\ <var:U> := <var:h1> ; \\ \{ <var:q> = <var:p> \land <var:h0> = <nat:4> \land <var:U> = <nat:1> \times <var:p> \} \\ <var:U> := <var:U> + <var:h0> \\ \{ <var:q> = <var:p> \land <var:U> = <nat:1> \times <var:p> + <nat:4> \} \end{eqnarray} Using typical Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h0> := <nat:4> ; <var:h1> := <nat:1> ; <var:h1> := <var:h1> * <var:q> ; <var:U> := <var:h1> ; <var:U> := <var:U> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:q> = <var:p> }} <def:poly> {{ <var:U> = <nat:1> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:h0> = <nat:4> /\ <var:h1> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:h0> = <nat:4> /\ <var:U> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:p> /\ <var:U> = <nat:1> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 