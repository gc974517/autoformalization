\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:K1> := <var:q> ; <var:K2> := <var:K1> * <var:q> ; <var:K3> := <var:K2> * <var:q> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:6> ; <var:K2> := <var:K2> * <nat:4> ; <var:K3> := <var:K3> * <nat:7> ; <var:Y> := <var:K3> <var:Y> := <var:Y> + <var:K2> <var:Y> := <var:Y> + <var:K1> <var:Y> := <var:Y> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> in \emph{Imp} . Assume it to hold that $ <var:q> = <var:n> $ , given all natural numbers $ <var:n> $ , ahead of interpreting our code segment it follows that we see $ <var:Y> = <nat:7> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:6> \times <var:n> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program is evident by usual Hoare logic . Next , \verb | { <var:q> = <var:n> } <var:K1> := <var:q> { <var:q> = <var:n> \land <var:K1> = <var:n> } | and \verb | { <var:q> = <var:n> \land <var:K1> = <var:n> } <var:K2> := <var:K1> * <var:q> { <var:q> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <var:n> ^ <nat:2> } | . This is ensured through the environment update law defined in Hoare reasoning . Advancing , \verb | { <var:q> = <var:n> } <var:K1> := <var:q> { <var:q> = <var:n> \land <var:K1> = <var:n> } | , \verb | { <var:q> = <var:n> \land <var:K1> = <var:n> } <var:K2> := <var:K1> * <var:q> { <var:q> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <var:n> ^ <nat:2> } | , \verb | { <var:q> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <var:n> ^ <nat:2> } <var:K3> := <var:K2> * <var:q> { <var:q> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> } | , \verb | { <var:q> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> } <var:K0> := <nat:7> { <var:q> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> \land <var:K0> = <nat:7> } | , \verb | { <var:q> = <var:n> \land <var:K1> = <var:n> \land <var:K2> = <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> \land <var:K0> = <nat:7> } <var:K1> := <var:K1> * <nat:6> { <var:q> = <var:n> \land <var:K1> = <nat:6> \cdot <var:n> \land <var:K2> = <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> \land <var:K0> = <nat:7> } | , \verb | { <var:q> = <var:n> \land <var:K1> = <nat:6> \cdot <var:n> \land <var:K2> = <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> \land <var:K0> = <nat:7> } <var:K2> := <var:K2> * <nat:4> { <var:q> = <var:n> \land <var:K1> = <nat:6> \cdot <var:n> \land <var:K2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> \land <var:K0> = <nat:7> } | , \verb | { <var:q> = <var:n> \land <var:K1> = <nat:6> \cdot <var:n> \land <var:K2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:K3> = <var:n> ^ <nat:3> \land <var:K0> = <nat:7> } <var:K3> := <var:K3> * <nat:7> { <var:q> = <var:n> \land <var:K1> = <nat:6> \cdot <var:n> \land <var:K2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:K3> = <nat:7> \cdot <var:n> ^ <nat:3> \land <var:K0> = <nat:7> } | , \verb | { <var:q> = <var:n> \land <var:K1> = <nat:6> \cdot <var:n> \land <var:K2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:K3> = <nat:7> \cdot <var:n> ^ <nat:3> \land <var:K0> = <nat:7> } <var:Y> := <var:K3{ <var:q> = <var:n> \land <var:K1> = <nat:6> \cdot <var:n> \land <var:K2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:K0> = <nat:7> \land <var:Y> = <nat:7> \cdot <var:n> ^ <nat:3> } | and \verb | { <var:q> = <var:n> \land <var:K1> = <nat:6> \cdot <var:n> \land <var:K2> = <nat:4> \cdot <var:n> ^ <nat:2> \land <var:K0> = <nat:7> \land <var:Y> = <nat:7> \cdot <var:n> ^ <nat:3> } <var:Y> := <var:Y> + <var:K2{ <var:q> = <var:n> \land <var:K1> = <nat:6> \cdot <var:n> \land <var:K0> = <nat:7> \land <var:Y> = <nat:7> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> } | . This is rigorously given through the variable binding law of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <def:poly> := <var:K1> := <var:q> ; <var:K2> := <var:K1> * <var:q> ; <var:K3> := <var:K2> * <var:q> ; <var:K0> := <nat:7> ; <var:K1> := <var:K1> * <nat:6> ; <var:K2> := <var:K2> * <nat:4> ; <var:K3> := <var:K3> * <nat:7> ; <var:Y> := <var:K3> <var:Y> := <var:Y> + <var:K2> <var:Y> := <var:Y> + <var:K1> <var:Y> := <var:Y> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:q> = <var:n> }} <def:poly> {{ <var:Y> = <nat:7> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:n> /\ <var:K1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:n> /\ <var:K1> = <var:n> /\ <var:K2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:n> /\ <var:K1> = <var:n> /\ <var:K2> = <var:n> ^ <nat:2> /\ <var:K3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:n> /\ <var:K1> = <var:n> /\ <var:K2> = <var:n> ^ <nat:2> /\ <var:K3> = <var:n> ^ <nat:3> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:n> /\ <var:K1> = <nat:6> * <var:n> /\ <var:K2> = <var:n> ^ <nat:2> /\ <var:K3> = <var:n> ^ <nat:3> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:n> /\ <var:K1> = <nat:6> * <var:n> /\ <var:K2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:K3> = <var:n> ^ <nat:3> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:n> /\ <var:K1> = <nat:6> * <var:n> /\ <var:K2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:K3> = <nat:7> * <var:n> ^ <nat:3> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:n> /\ <var:K1> = <nat:6> * <var:n> /\ <var:K2> = <nat:4> * <var:n> ^ <nat:2> /\ <var:K0> = <nat:7> /\ <var:Y> = <nat:7> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:n> /\ <var:K1> = <nat:6> * <var:n> /\ <var:K0> = <nat:7> /\ <var:Y> = <nat:7> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:n> /\ <var:K0> = <nat:7> /\ <var:Y> = <nat:7> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:n> /\ <var:Y> = <nat:7> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 