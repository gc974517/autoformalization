\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G> := <nat:4> ; <var:G> := <nat:4> + <var:G> * <var:q> ; <var:G> := <nat:1> + <var:G> * <var:q> ; <var:G> := <nat:1> + <var:G> * <var:q> ; <var:G> := <nat:3> + <var:G> * <var:q> ; <var:G> := <nat:2> + <var:G> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Allowing ( given $ <var:K> \in \mathbb{Z}^+ $ ) it to hold that $ <var:q> = <var:K> $ before the evaluation of this program , it follows that we see $ <var:G> = <nat:4> \cdot <var:K> ^ <nat:5> + <nat:4> \cdot <var:K> ^ <nat:4> + <nat:1> \cdot <var:K> ^ <nat:3> + <nat:1> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:2> $ after code segment exits . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:q> = <var:K> \} \\ <var:G> := <nat:4> ; \\ \{ <var:q> = <var:K> \land <var:G> = <nat:4> \} \\ <var:G> := <nat:4> + <var:G> * <var:q> ; \\ \{ <var:q> = <var:K> \land <var:G> = <nat:4> \cdot <var:K> + <nat:4> \} \\ <var:G> := <nat:1> + <var:G> * <var:q> ; \\ \{ <var:q> = <var:K> \land <var:G> = <nat:4> \cdot <var:K> ^ <nat:2> + <nat:4> \cdot <var:K> + <nat:1> \} \\ <var:G> := <nat:1> + <var:G> * <var:q> ; \\ \{ <var:q> = <var:K> \land <var:G> = <nat:4> \cdot <var:K> ^ <nat:3> + <nat:4> \cdot <var:K> ^ <nat:2> + <nat:1> \cdot <var:K> + <nat:1> \} \\ <var:G> := <nat:3> + <var:G> * <var:q> ; \\ \{ <var:q> = <var:K> \land <var:G> = <nat:4> \cdot <var:K> ^ <nat:4> + <nat:4> \cdot <var:K> ^ <nat:3> + <nat:1> \cdot <var:K> ^ <nat:2> + <nat:1> \cdot <var:K> + <nat:3> \} \\ <var:G> := <nat:2> + <var:G> * <var:q> \\ \{ <var:q> = <var:K> \land <var:G> = <nat:4> \cdot <var:K> ^ <nat:5> + <nat:4> \cdot <var:K> ^ <nat:4> + <nat:1> \cdot <var:K> ^ <nat:3> + <nat:1> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:2> \} \end{eqnarray} Hence , this code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:G> := <nat:4> ; <var:G> := <nat:4> + <var:G> * <var:q> ; <var:G> := <nat:1> + <var:G> * <var:q> ; <var:G> := <nat:1> + <var:G> * <var:q> ; <var:G> := <nat:3> + <var:G> * <var:q> ; <var:G> := <nat:2> + <var:G> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:q> = <var:K> }} <def:poly> {{ <var:G> = <nat:4> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:G> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:G> = <nat:4> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:G> = <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:G> = <nat:4> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:G> = <nat:4> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:K> /\ <var:G> = <nat:4> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 