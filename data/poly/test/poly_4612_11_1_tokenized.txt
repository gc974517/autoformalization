\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:c1> := <var:j> ; <var:c2> := <var:c1> * <var:j> ; <var:c3> := <var:c2> * <var:j> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:2> ; <var:c2> := <var:c2> * <nat:9> ; <var:c3> := <var:c3> * <nat:3> ; <var:f> := <var:c3> <var:f> := <var:f> + <var:c2> <var:f> := <var:f> + <var:c1> <var:f> := <var:f> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> . Assuming --- given every positive integers $ <var:l> $ --- it to be that $ <var:j> = <var:l> $ prior to the evaluation of the set of commands it must be that $ <var:f> = <nat:3> \times <var:l> ^ <nat:3> + <nat:9> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of commands can be given using Hoare techniques . Advancing , the command \verb | <var:c1> := <var:j> ; | . This line redefines $ \{ <var:j> = <var:l> \} $ to the condition $ \{ <var:j> = <var:l> \land <var:c1> = <var:l> \} $ . Advancing on , the binding statement giving $ <var:c1> * <var:j> $ as $ <var:c2>$ . This command moves the precondition $ \{ <var:j> = <var:l> \land <var:c1> = <var:l> \} $ to the postcondition $ \{ <var:j> = <var:l> \land <var:c1> = <var:l> \land <var:c2> = <var:l> ^ <nat:2> \} $ . Stepping forward , the environment update code \verb | <var:c3> := <var:c2> * <var:j> ; | . This line moves the condition $ \{ <var:j> = <var:l> \land <var:c1> = <var:l> \land <var:c2> = <var:l> ^ <nat:2> \} $ to $ \{ <var:j> = <var:l> \land <var:c1> = <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment scheme found in usual Hoare techniques . Next , the statement letting $ <nat:3> $ to $ <var:c0>$ . This statement advances the precondition $ \{ <var:j> = <var:l> \land <var:c1> = <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \} $ into the postcondition $ \{ <var:j> = <var:l> \land <var:c1> = <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \land <var:c0> = <nat:3> \} $ . Focusing on the following line in the code , we have the variable binding code \verb | <var:c1> := <var:c1> * <nat:2> ; | . This command advances $ \{ <var:j> = <var:l> \land <var:c1> = <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \land <var:c0> = <nat:3> \} $ as the condition $ \{ <var:j> = <var:l> \land <var:c1> = <nat:2> \times <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \land <var:c0> = <nat:3> \} $ . Advancing to the following piece of code found in our series of instructions , we have the statement \verb | <var:c2> := <var:c2> * <nat:9> ; | . This command advances the condition $ \{ <var:j> = <var:l> \land <var:c1> = <nat:2> \times <var:l> \land <var:c2> = <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \land <var:c0> = <nat:3> \} $ into the postcondition $ \{ <var:j> = <var:l> \land <var:c1> = <nat:2> \times <var:l> \land <var:c2> = <nat:9> \times <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \land <var:c0> = <nat:3> \} $ . This is guaranteed using the assignment law defined by standard Hoare reasoning . Advancing to the subsequent line of code found in our program , we see the variable assignmet statement defining $ <var:c3> * <nat:3> $ into $ <var:c3>$ . This code takes $ \{ <var:j> = <var:l> \land <var:c1> = <nat:2> \times <var:l> \land <var:c2> = <nat:9> \times <var:l> ^ <nat:2> \land <var:c3> = <var:l> ^ <nat:3> \land <var:c0> = <nat:3> \} $ as the condition $ \{ <var:j> = <var:l> \land <var:c1> = <nat:2> \times <var:l> \land <var:c2> = <nat:9> \times <var:l> ^ <nat:2> \land <var:c3> = <nat:3> \times <var:l> ^ <nat:3> \land <var:c0> = <nat:3> \} $ . This is given by the assignment rule in typical Hoare reasoning . Moving forward to the subsequent bit of code seen in our set of instructions , we have the binding code \verb | <var:f> := <var:c3> | . This code transfers $ \{ <var:j> = <var:l> \land <var:c1> = <nat:2> \times <var:l> \land <var:c2> = <nat:9> \times <var:l> ^ <nat:2> \land <var:c3> = <nat:3> \times <var:l> ^ <nat:3> \land <var:c0> = <nat:3> \} $ as the condition $ \{ <var:j> = <var:l> \land <var:c1> = <nat:2> \times <var:l> \land <var:c2> = <nat:9> \times <var:l> ^ <nat:2> \land <var:c0> = <nat:3> \land <var:f> = <nat:3> \times <var:l> ^ <nat:3> \} $ . Taking a look at the next bit of code seen in the program , we see the code assigning $ <var:f> + <var:c2$ into $ <var:f>$ . This advances $ \{ <var:j> = <var:l> \land <var:c1> = <nat:2> \times <var:l> \land <var:c2> = <nat:9> \times <var:l> ^ <nat:2> \land <var:c0> = <nat:3> \land <var:f> = <nat:3> \times <var:l> ^ <nat:3> \} $ to the postcondition $ \{ <var:j> = <var:l> \land <var:c1> = <nat:2> \times <var:l> \land <var:c0> = <nat:3> \land <var:f> = <nat:3> \times <var:l> ^ <nat:3> + <nat:9> \times <var:l> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment inference rule given in typical Hoare logic . Moving forward , we have the binding code assigning $ <var:f> + <var:c1$ into $ <var:f>$ . This forwards the condition $ \{ <var:j> = <var:l> \land <var:c1> = <nat:2> \times <var:l> \land <var:c0> = <nat:3> \land <var:f> = <nat:3> \times <var:l> ^ <nat:3> + <nat:9> \times <var:l> ^ <nat:2> \} $ into $ \{ <var:j> = <var:l> \land <var:c0> = <nat:3> \land <var:f> = <nat:3> \times <var:l> ^ <nat:3> + <nat:9> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> \} $ . This is rigorously given using the assignment law in Hoare reasoning . Moving onward , we see the variable update statement defining $ <var:f> + <var:c0$ into $ <var:f>$ . This forwards the condition $ \{ <var:j> = <var:l> \land <var:c0> = <nat:3> \land <var:f> = <nat:3> \times <var:l> ^ <nat:3> + <nat:9> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> \} $ to the postcondition $ \{ <var:j> = <var:l> \land <var:f> = <nat:3> \times <var:l> ^ <nat:3> + <nat:9> \times <var:l> ^ <nat:2> + <nat:2> \times <var:l> + <nat:3> \} $ . This is deduced with the assignment scheme of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c1> := <var:j> ; <var:c2> := <var:c1> * <var:j> ; <var:c3> := <var:c2> * <var:j> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:2> ; <var:c2> := <var:c2> * <nat:9> ; <var:c3> := <var:c3> * <nat:3> ; <var:f> := <var:c3> <var:f> := <var:f> + <var:c2> <var:f> := <var:f> + <var:c1> <var:f> := <var:f> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:j> = <var:l> }} <def:poly> {{ <var:f> = <nat:3> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:c1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:c1> = <var:l> /\ <var:c2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:c1> = <var:l> /\ <var:c2> = <var:l> ^ <nat:2> /\ <var:c3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:c1> = <var:l> /\ <var:c2> = <var:l> ^ <nat:2> /\ <var:c3> = <var:l> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:c1> = <nat:2> * <var:l> /\ <var:c2> = <var:l> ^ <nat:2> /\ <var:c3> = <var:l> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:c1> = <nat:2> * <var:l> /\ <var:c2> = <nat:9> * <var:l> ^ <nat:2> /\ <var:c3> = <var:l> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:c1> = <nat:2> * <var:l> /\ <var:c2> = <nat:9> * <var:l> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:l> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:c1> = <nat:2> * <var:l> /\ <var:c2> = <nat:9> * <var:l> ^ <nat:2> /\ <var:c0> = <nat:3> /\ <var:f> = <nat:3> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:c1> = <nat:2> * <var:l> /\ <var:c0> = <nat:3> /\ <var:f> = <nat:3> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:c0> = <nat:3> /\ <var:f> = <nat:3> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:l> /\ <var:f> = <nat:3> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 