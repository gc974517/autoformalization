\begin{document} \begin{theorem} Let the following segment of code : \begin{verbatim} <var:I> := <nat:2> ; <var:I> := <nat:3> + <var:I> * <var:U> ; <var:I> := <nat:2> + <var:I> * <var:U> ; <var:I> := <nat:3> + <var:I> * <var:U> ; <var:I> := <var:I> * <var:U> ; <var:I> := <var:I> * <var:U> ; <var:I> := <nat:2> + <var:I> * <var:U> \end{verbatim} Allowing it to be that $ <var:U> = <var:o> $ prior to the execution of the set of commands it must be that $ <var:I> = <nat:2> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} The argument for the set of commands is accomplished through standard Hoare reasoning . Taking a look at the proceeding statement seen in the list of commands , we have the variable assignmet command \verb | <var:I> := <nat:2> ; | . This transfers $ \{ <var:U> = <var:o> \} $ to the condition $ \{ <var:U> = <var:o> \land <var:I> = <nat:2> \} $ . After , we have the assignment command \verb | <var:I> := <nat:3> + <var:I> * <var:U> ; | . This advances $ \{ <var:U> = <var:o> \land <var:I> = <nat:2> \} $ to $ \{ <var:U> = <var:o> \land <var:I> = <nat:2> * <var:o> + <nat:3> \} $ . This is guaranteed through the assignment rule given by Hoare logic . Taking another step toward the next piece of code in our code , the variable update command \verb | <var:I> := <nat:2> + <var:I> * <var:U> ; | . This command advances $ \{ <var:U> = <var:o> \land <var:I> = <nat:2> * <var:o> + <nat:3> \} $ into the condition $ \{ <var:U> = <var:o> \land <var:I> = <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:2> \} $ . Moving onward , we have the variable update code \verb | <var:I> := <nat:3> + <var:I> * <var:U> ; | . This redefines $ \{ <var:U> = <var:o> \land <var:I> = <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:2> \} $ toward the condition $ \{ <var:U> = <var:o> \land <var:I> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> \} $ . This is guaranteed using the assignment scheme of standard Hoare reasoning . Observing the subsequent statement in our set of commands , we see the command \verb | <var:I> := <var:I> * <var:U> ; | . This statement advances the condition $ \{ <var:U> = <var:o> \land <var:I> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> \} $ to the postcondition $ \{ <var:U> = <var:o> \land <var:I> = <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + \} $ . This is shown to be logically sound by the assignment inference rule of standard Hoare logic . Focusing on the following bit of code seen in our list of commands , the variable update line assigning $ <var:I> * <var:U> $ into $ <var:I>$ . This transfers $ \{ <var:U> = <var:o> \land <var:I> = <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + \} $ to the postcondition $ \{ <var:U> = <var:o> \land <var:I> = <nat:2> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + \} $ . This is guaranteed with the assignment inference rule found in Hoare techniques . Moving forward to the upcoming step in our series of instructions , we have the variable assignmet line assigning $ <nat:2> + <var:I> * <var:U$ toward $ <var:I>$ . This line transfers the condition $ \{ <var:U> = <var:o> \land <var:I> = <nat:2> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + \} $ as the condition $ \{ <var:U> = <var:o> \land <var:I> = <nat:2> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:2> \} $ . This is shown to be logically sound using the assignment rule given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:U> = <var:o> }} <var:I> := <nat:2> ; <var:I> := <nat:3> + <var:I> * <var:U> ; <var:I> := <nat:2> + <var:I> * <var:U> ; <var:I> := <nat:3> + <var:I> * <var:U> ; <var:I> := <var:I> * <var:U> ; <var:I> := <var:I> * <var:U> ; <var:I> := <nat:2> + <var:I> * <var:U> {{ <var:I> = <nat:2> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:I> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:I> = <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:I> = <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:I> = <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:I> = <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:I> = <nat:2> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:o> /\ <var:I> = <nat:2> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 