\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z> := <nat:2> ; <var:Z> := <var:Z> * <var:P> ; <var:Z> := <var:Z> * <var:P> ; <var:Z> := <nat:3> + <var:Z> * <var:P> ; <var:Z> := <nat:3> + <var:Z> * <var:P> ; <var:Z> := <nat:4> + <var:Z> * <var:P> ; <var:Z> := <nat:3> + <var:Z> * <var:P> ; <var:Z> := <nat:3> + <var:Z> * <var:P> ; <var:Z> := <nat:4> + <var:Z> * <var:P> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> in \emph{Imp} . Allow that $ <var:P> = <var:j> $ letting whole numbers $ <var:j> $ ahead of the execution of this series of instructions it must be that we have $ <var:Z> = <nat:2> \times <var:j> ^ <nat:8> + <nat:3> \times <var:j> ^ <nat:5> + <nat:3> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions is shown with typical Hoare techniques . Moving forward to the next step , the variable assignmet code \verb | <var:Z> := <nat:2> ; | . This redefines $ \{ <var:P> = <var:j> \} $ to the postcondition $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> \} $ . Now , the assignment code \verb | <var:Z> := <var:Z> * <var:P> ; | . This takes $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> \} $ into the condition $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> + \} $ . Advancing to the next step , we see the variable assignmet line giving $ <var:Z> * <var:P> $ as $ <var:Z>$ . This redefines $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> + \} $ to the postcondition $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> ^ <nat:2> + \} $ . Further , the variable binding code letting $ <nat:3> + <var:Z> * <var:P> $ as $ <var:Z>$ . This statement redefines $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> ^ <nat:2> + \} $ toward $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> ^ <nat:3> + <nat:3> \} $ . This is known to be sound through the assignment inference rule defined in usual Hoare logic . Moving on to the next line of code in our code segment , the assignment line \verb | <var:Z> := <nat:3> + <var:Z> * <var:P> ; | . This redefines the precondition $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> ^ <nat:3> + <nat:3> \} $ as the condition $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> + <nat:3> \} $ . This is deduced with the assignment law from Hoare reasoning . Keeping momentum , we have the assignment code \verb | <var:Z> := <nat:4> + <var:Z> * <var:P> ; | . This line advances the condition $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> + <nat:3> \} $ as $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:4> \} $ . This is deduced through the assignment scheme of Hoare reasoning . Going forward , the environment update statement assigning $ <nat:3> + <var:Z> * <var:P> $ as $ <var:Z>$ . This moves the condition $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:4> \} $ to the postcondition $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> \} $ . Taking another step toward the next step found in our list of commands , we see the variable binding code letting $ <nat:3> + <var:Z> * <var:P> $ as $ <var:Z>$ . This statement redefines the condition $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> \} $ toward the condition $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> \} $ . This is sound using the assignment inference rule from standard Hoare logic . Advancing to the proceeding command in our program , we see the variable update code \verb | <var:Z> := <nat:4> + <var:Z> * <var:P> | . This transfers the condition $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> \} $ toward $ \{ <var:P> = <var:j> \land <var:Z> = <nat:2> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:4> \} $ . This is rigorously given using the assignment rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Z> := <nat:2> ; <var:Z> := <var:Z> * <var:P> ; <var:Z> := <var:Z> * <var:P> ; <var:Z> := <nat:3> + <var:Z> * <var:P> ; <var:Z> := <nat:3> + <var:Z> * <var:P> ; <var:Z> := <nat:4> + <var:Z> * <var:P> ; <var:Z> := <nat:3> + <var:Z> * <var:P> ; <var:Z> := <nat:3> + <var:Z> * <var:P> ; <var:Z> := <nat:4> + <var:Z> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:P> = <var:j> }} <def:poly> {{ <var:Z> = <nat:2> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:Z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:Z> = <nat:2> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:Z> = <nat:2> * <var:j> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:Z> = <nat:2> * <var:j> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:Z> = <nat:2> * <var:j> ^ <nat:4> + <nat:3> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:Z> = <nat:2> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:Z> = <nat:2> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:Z> = <nat:2> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:j> /\ <var:Z> = <nat:2> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 