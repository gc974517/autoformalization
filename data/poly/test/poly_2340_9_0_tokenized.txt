\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:1> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:H> ; <var:i2> := <nat:1> ; <var:i2> := <var:i2> * <var:H> ; <var:i2> := <var:i2> * <var:H> ; <var:J> := <var:i2> ; <var:J> := <var:J> + <var:i1> ; <var:J> := <var:J> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allowing --- assuming some integers $ <var:Z> $ --- it to be that $ <var:H> = <var:Z> $ prior to executing the list of commands it holds that $ <var:J> = <nat:1> \cdot <var:Z> ^ <nat:2> + <nat:3> \cdot <var:Z> + <nat:1> $ after set of commands has executed . \end{theorem} \begin{proof} The way to prove correctness for this set of commands is accomplished by standard Hoare techniques . Moving on , the assignment command defining $ <nat:1> $ as $ <var:i0>$ . This takes $ \{ <var:H> = <var:Z> \} $ to $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \} $ . This is shown to be logically sound by the assignment law from standard Hoare reasoning . Next , we have the environment update command defining $ <nat:3> $ to $ <var:i1>$ . This moves the precondition $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \} $ to the condition $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \} $ . This is known to be sound through the assignment rule from standard Hoare techniques . After , we see the variable assignmet command \verb | <var:i1> := <var:i1> * <var:H> ; | . This transfers the condition $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \} $ toward $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \times <var:Z> \} $ . This is given using the assignment law given in usual Hoare reasoning . Moving on , the variable update code \verb | <var:i2> := <nat:1> ; | . This takes the condition $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \times <var:Z> \} $ toward the condition $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \times <var:Z> \land <var:i2> = <nat:1> \} $ . This is guaranteed by the assignment rule in usual Hoare reasoning . Taking a look at the upcoming bit of code in the list of instructions , we see the binding code \verb | <var:i2> := <var:i2> * <var:H> ; | . This command advances the condition $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \times <var:Z> \land <var:i2> = <nat:1> \} $ to $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \times <var:Z> \land <var:i2> = <nat:1> \times <var:Z> \} $ . Looking at the upcoming line seen in our series of instructions , the environment update command defining $ <var:i2> * <var:H> $ as $ <var:i2>$ . This advances the condition $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \times <var:Z> \land <var:i2> = <nat:1> \times <var:Z> \} $ toward $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \times <var:Z> \land <var:i2> = <nat:1> \times <var:Z> ^ <nat:2> \} $ . This is deduced through the assignment law given by typical Hoare techniques . Immediately after , we have the variable assignmet code giving $ <var:i2> $ as $ <var:J>$ . This command moves $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \times <var:Z> \land <var:i2> = <nat:1> \times <var:Z> ^ <nat:2> \} $ into the postcondition $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \times <var:Z> \land <var:J> = <nat:1> \times <var:Z> ^ <nat:2> \} $ . This is deduced using the assignment scheme in Hoare techniques . Looking at the upcoming piece of code contained in the list of instructions , we have the variable update command giving $ <var:J> + <var:i1> $ into $ <var:J>$ . This code advances the precondition $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:i1> = <nat:3> \times <var:Z> \land <var:J> = <nat:1> \times <var:Z> ^ <nat:2> \} $ toward the condition $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:J> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> \} $ . Now , the variable update command letting $ <var:J> + <var:i0$ as $ <var:J>$ . This redefines $ \{ <var:H> = <var:Z> \land <var:i0> = <nat:1> \land <var:J> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> \} $ into the condition $ \{ <var:H> = <var:Z> \land <var:J> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:1> \} $ . This is shown with the assignment rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i0> := <nat:1> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:H> ; <var:i2> := <nat:1> ; <var:i2> := <var:i2> * <var:H> ; <var:i2> := <var:i2> * <var:H> ; <var:J> := <var:i2> ; <var:J> := <var:J> + <var:i1> ; <var:J> := <var:J> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:H> = <var:Z> }} <def:poly> {{ <var:J> = <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:3> * <var:Z> /\ <var:i2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:3> * <var:Z> /\ <var:i2> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:3> * <var:Z> /\ <var:i2> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:i0> = <nat:1> /\ <var:i1> = <nat:3> * <var:Z> /\ <var:J> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:i0> = <nat:1> /\ <var:J> = <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:Z> /\ <var:J> = <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 