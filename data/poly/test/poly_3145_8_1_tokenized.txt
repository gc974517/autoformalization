\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:W1> := <var:l> ; <var:W2> := <var:W1> * <var:l> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:5> ; <var:W2> := <var:W2> * <nat:6> ; <var:B> := <var:W2> <var:B> := <var:B> + <var:W1> <var:B> := <var:B> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:l> = <var:O> $ ahead of the evaluation of our list of instructions , it must be that we see $ <var:B> = <nat:6> \cdot <var:O> ^ <nat:2> + <nat:5> \cdot <var:O> + <nat:8> $ after list of commands executes . \end{theorem} \begin{proof} Proving correctness for this code segment is done by typical Hoare reasoning . Going to the next step , the statement \verb | <var:W1> := <var:l> ; | . This moves $ \{ <var:l> = <var:O> \} $ as the condition $ \{ <var:l> = <var:O> \land <var:W1> = <var:O> \} $ . This is sound using the assignment inference rule of usual Hoare logic . Moving on to the next step , the binding command yielding $ <var:W1> * <var:l> $ to $ <var:W2>$ . This code forwards the condition $ \{ <var:l> = <var:O> \land <var:W1> = <var:O> \} $ into the postcondition $ \{ <var:l> = <var:O> \land <var:W1> = <var:O> \land <var:W2> = <var:O> ^ <nat:2> \} $ . This is shown by the assignment scheme given by usual Hoare techniques . Focusing on the subsequent step in our set of instructions , we see the environment update line defining $ <nat:8> $ to $ <var:W0>$ . This takes the precondition $ \{ <var:l> = <var:O> \land <var:W1> = <var:O> \land <var:W2> = <var:O> ^ <nat:2> \} $ as the postcondition $ \{ <var:l> = <var:O> \land <var:W1> = <var:O> \land <var:W2> = <var:O> ^ <nat:2> \land <var:W0> = <nat:8> \} $ . This is given through the assignment rule defined by standard Hoare reasoning . Moving on , we have the code \verb | <var:W1> := <var:W1> * <nat:5> ; | . This advances the condition $ \{ <var:l> = <var:O> \land <var:W1> = <var:O> \land <var:W2> = <var:O> ^ <nat:2> \land <var:W0> = <nat:8> \} $ toward the postcondition $ \{ <var:l> = <var:O> \land <var:W1> = <nat:5> \times <var:O> \land <var:W2> = <var:O> ^ <nat:2> \land <var:W0> = <nat:8> \} $ . Taking a look at the proceeding bit of code seen in the series of instructions , the variable assignmet command \verb | <var:W2> := <var:W2> * <nat:6> ; | . This moves the condition $ \{ <var:l> = <var:O> \land <var:W1> = <nat:5> \times <var:O> \land <var:W2> = <var:O> ^ <nat:2> \land <var:W0> = <nat:8> \} $ into the postcondition $ \{ <var:l> = <var:O> \land <var:W1> = <nat:5> \times <var:O> \land <var:W2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:W0> = <nat:8> \} $ . Moving on to the next line in our segment of code , we see the binding statement giving $ <var:W2$ to $ <var:B>$ . This command transfers the precondition $ \{ <var:l> = <var:O> \land <var:W1> = <nat:5> \times <var:O> \land <var:W2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:W0> = <nat:8> \} $ as the postcondition $ \{ <var:l> = <var:O> \land <var:W1> = <nat:5> \times <var:O> \land <var:W0> = <nat:8> \land <var:B> = <nat:6> \times <var:O> ^ <nat:2> \} $ . Next , we have the environment update statement \verb | <var:B> := <var:B> + <var:W1> | . This statement takes the precondition $ \{ <var:l> = <var:O> \land <var:W1> = <nat:5> \times <var:O> \land <var:W0> = <nat:8> \land <var:B> = <nat:6> \times <var:O> ^ <nat:2> \} $ to the condition $ \{ <var:l> = <var:O> \land <var:W0> = <nat:8> \land <var:B> = <nat:6> \times <var:O> ^ <nat:2> + <nat:5> \times <var:O> \} $ . Honing in on the upcoming line found in our series of instructions , we see the binding statement \verb | <var:B> := <var:B> + <var:W0> | . This line redefines $ \{ <var:l> = <var:O> \land <var:W0> = <nat:8> \land <var:B> = <nat:6> \times <var:O> ^ <nat:2> + <nat:5> \times <var:O> \} $ into the condition $ \{ <var:l> = <var:O> \land <var:B> = <nat:6> \times <var:O> ^ <nat:2> + <nat:5> \times <var:O> + <nat:8> \} $ . This is shown to be logically sound by the assignment inference rule obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W1> := <var:l> ; <var:W2> := <var:W1> * <var:l> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:5> ; <var:W2> := <var:W2> * <nat:6> ; <var:B> := <var:W2> <var:B> := <var:B> + <var:W1> <var:B> := <var:B> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:l> = <var:O> }} <def:poly> {{ <var:B> = <nat:6> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:O> /\ <var:W1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:O> /\ <var:W1> = <var:O> /\ <var:W2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:O> /\ <var:W1> = <var:O> /\ <var:W2> = <var:O> ^ <nat:2> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:O> /\ <var:W1> = <nat:5> * <var:O> /\ <var:W2> = <var:O> ^ <nat:2> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:O> /\ <var:W1> = <nat:5> * <var:O> /\ <var:W2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:O> /\ <var:W1> = <nat:5> * <var:O> /\ <var:W0> = <nat:8> /\ <var:B> = <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:O> /\ <var:W0> = <nat:8> /\ <var:B> = <nat:6> * <var:O> ^ <nat:2> + <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:O> /\ <var:B> = <nat:6> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 