\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:c1> := <var:n> ; <var:c0> := <nat:5> ; <var:c1> := <var:c1> * <nat:6> ; <var:j> := <var:c1> <var:j> := <var:j> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Allowing --- for positive numbers $ <var:K> $ --- it to hold that $ <var:n> = <var:K> $ prior to interpreting our code , then we have $ <var:j> = <nat:6> * <var:K> + <nat:5> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands can be given by usual Hoare logic . Immediately after , we see the statement \verb | <var:c1> := <var:n> ; | . This takes the precondition $ \{ <var:n> = <var:K> \} $ into $ \{ <var:n> = <var:K> \land <var:c1> = <var:K> \} $ . This is deduced with the assignment law given in Hoare logic . Keeping momentum , the line yielding $ <nat:5> $ as $ <var:c0>$ . This redefines the precondition $ \{ <var:n> = <var:K> \land <var:c1> = <var:K> \} $ as $ \{ <var:n> = <var:K> \land <var:c1> = <var:K> \land <var:c0> = <nat:5> \} $ . This is given through the assignment law defined in typical Hoare reasoning . Looking at the next statement found in our list of instructions , the variable update statement \verb | <var:c1> := <var:c1> * <nat:6> ; | . This statement takes the condition $ \{ <var:n> = <var:K> \land <var:c1> = <var:K> \land <var:c0> = <nat:5> \} $ into the condition $ \{ <var:n> = <var:K> \land <var:c1> = <nat:6> \cdot <var:K> \land <var:c0> = <nat:5> \} $ . Moving on to the following statement found in our code , we have the binding command \verb | <var:j> := <var:c1> | . This line redefines the precondition $ \{ <var:n> = <var:K> \land <var:c1> = <nat:6> \cdot <var:K> \land <var:c0> = <nat:5> \} $ to the condition $ \{ <var:n> = <var:K> \land <var:c0> = <nat:5> \land <var:j> = <nat:6> \cdot <var:K> \} $ . Keeping momentum , we see the environment update command assigning $ <var:j> + <var:c0$ into $ <var:j>$ . This redefines the condition $ \{ <var:n> = <var:K> \land <var:c0> = <nat:5> \land <var:j> = <nat:6> \cdot <var:K> \} $ to the condition $ \{ <var:n> = <var:K> \land <var:j> = <nat:6> \cdot <var:K> + <nat:5> \} $ . This is known to be sound through the assignment inference rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <def:poly> := <var:c1> := <var:n> ; <var:c0> := <nat:5> ; <var:c1> := <var:c1> * <nat:6> ; <var:j> := <var:c1> <var:j> := <var:j> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:n> = <var:K> }} <def:poly> {{ <var:j> = <nat:6> * <var:K> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:c1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:c1> = <var:K> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:c1> = <nat:6> * <var:K> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:c0> = <nat:5> /\ <var:j> = <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:j> = <nat:6> * <var:K> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 