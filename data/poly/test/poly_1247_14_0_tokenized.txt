\begin{document} \begin{theorem} Define a series of instructions such that \begin{verbatim} <var:z0> := <nat:2> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:v> ; <var:z2> := <nat:3> ; <var:z2> := <var:z2> * <var:v> ; <var:z2> := <var:z2> * <var:v> ; <var:z3> := <nat:3> ; <var:z3> := <var:z3> * <var:v> ; <var:z3> := <var:z3> * <var:v> ; <var:z3> := <var:z3> * <var:v> ; <var:l> := <var:z3> ; <var:l> := <var:l> + <var:z2> ; <var:l> := <var:l> + <var:z1> ; <var:l> := <var:l> + <var:z0> \end{verbatim} Allowing for every natural numbers $ <var:i> $ it to hold that $ <var:v> = <var:i> $ ahead of the execution of this code segment , it follows that $ <var:l> = <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> $ once segment of code executes . \end{theorem} \begin{proof} The flow of logic for the set of instructions can be shown by Hoare logic . Shifting focus toward the following bits of codecontained in our set of instructions , we see \begin{verbatim} { <var:v> = <var:i> } <var:z0> := <nat:2> { <var:v> = <var:i> \land <var:z0> = <nat:2> } { <var:v> = <var:i> \land <var:z0> = <nat:2> } <var:z1> := <nat:2> { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> } { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> } <var:z1> := <var:z1> * <var:v> { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> } { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> } <var:z2> := <nat:3> { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> } { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> } <var:z2> := <var:z2> * <var:v> { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> } { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> } <var:z2> := <var:z2> * <var:v> { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> ^ <nat:2> } { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> ^ <nat:2> } <var:z3> := <nat:3> { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> ^ <nat:2> \land <var:z3> = <nat:3> } { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> ^ <nat:2> \land <var:z3> = <nat:3> } <var:z3> := <var:z3> * <var:v> { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> ^ <nat:2> \land <var:z3> = <nat:3> \cdot <var:i> } { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> ^ <nat:2> \land <var:z3> = <nat:3> \cdot <var:i> } <var:z3> := <var:z3> * <var:v> { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> ^ <nat:2> \land <var:z3> = <nat:3> \cdot <var:i> ^ <nat:2> } { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> ^ <nat:2> \land <var:z3> = <nat:3> \cdot <var:i> ^ <nat:2> } <var:z3> := <var:z3> * <var:v> { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> ^ <nat:2> \land <var:z3> = <nat:3> \cdot <var:i> ^ <nat:3> } { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> ^ <nat:2> \land <var:z3> = <nat:3> \cdot <var:i> ^ <nat:3> } <var:l> := <var:z3> { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> ^ <nat:2> \land <var:l> = <nat:3> \cdot <var:i> ^ <nat:3> } { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:z2> = <nat:3> \cdot <var:i> ^ <nat:2> \land <var:l> = <nat:3> \cdot <var:i> ^ <nat:3> } <var:l> := <var:l> + <var:z2> { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:l> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> } { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \cdot <var:i> \land <var:l> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> } <var:l> := <var:l> + <var:z1> { <var:v> = <var:i> \land <var:z0> = <nat:2> \land <var:l> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:2> \cdot <var:i> } \end{verbatim} Moving on to the next step , we see \begin{verbatim} { <var:v> = <var:i> } <var:z0> := <nat:2> { <var:v> = <var:i> \land <var:z0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:v> = <var:i> }} <var:z0> := <nat:2> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:v> ; <var:z2> := <nat:3> ; <var:z2> := <var:z2> * <var:v> ; <var:z2> := <var:z2> * <var:v> ; <var:z3> := <nat:3> ; <var:z3> := <var:z3> * <var:v> ; <var:z3> := <var:z3> * <var:v> ; <var:z3> := <var:z3> * <var:v> ; <var:l> := <var:z3> ; <var:l> := <var:l> + <var:z2> ; <var:l> := <var:l> + <var:z1> ; <var:l> := <var:l> + <var:z0> {{ <var:l> = <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:i> /\ <var:z2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:i> /\ <var:z2> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:i> /\ <var:z2> = <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:i> /\ <var:z2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:z3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:i> /\ <var:z2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:z3> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:i> /\ <var:z2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:z3> = <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:i> /\ <var:z2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:z3> = <nat:3> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:i> /\ <var:z2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:l> = <nat:3> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:i> /\ <var:l> = <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:z0> = <nat:2> /\ <var:l> = <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:i> /\ <var:l> = <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 