\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:H1> := <var:D> ; <var:H0> := <nat:1> ; <var:H1> := <var:H1> * <nat:5> ; <var:j> := <var:H1> <var:j> := <var:j> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Assuming $ <var:D> = <var:q> $ before the execution of this list of instructions , it holds that we see $ <var:j> = <nat:5> * <var:q> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code is shown through usual Hoare reasoning . Next , we see the variable binding line \verb | <var:H1> := <var:D> ; | . This line transfers $ \{ <var:D> = <var:q> \} $ as $ \{ <var:D> = <var:q> \land <var:H1> = <var:q> \} $ . Focusing on the proceeding statement found in the set of instructions , we see the variable binding command defining $ <nat:1> $ into $ <var:H0>$ . This moves the precondition $ \{ <var:D> = <var:q> \land <var:H1> = <var:q> \} $ into the postcondition $ \{ <var:D> = <var:q> \land <var:H1> = <var:q> \land <var:H0> = <nat:1> \} $ . Stepping forward , we see the assignment statement \verb | <var:H1> := <var:H1> * <nat:5> ; | . This line transfers $ \{ <var:D> = <var:q> \land <var:H1> = <var:q> \land <var:H0> = <nat:1> \} $ toward the postcondition $ \{ <var:D> = <var:q> \land <var:H1> = <nat:5> \cdot <var:q> \land <var:H0> = <nat:1> \} $ . This is guaranteed using the assignment inference rule found in usual Hoare reasoning . Taking another step toward the next statement seen in our series of instructions , the variable assignmet command \verb | <var:j> := <var:H1> | . This transfers the precondition $ \{ <var:D> = <var:q> \land <var:H1> = <nat:5> \cdot <var:q> \land <var:H0> = <nat:1> \} $ into the condition $ \{ <var:D> = <var:q> \land <var:H0> = <nat:1> \land <var:j> = <nat:5> \cdot <var:q> \} $ . This is deduced with the assignment rule given by standard Hoare logic . After , we see the command letting $ <var:j> + <var:H0$ to $ <var:j>$ . This line takes $ \{ <var:D> = <var:q> \land <var:H0> = <nat:1> \land <var:j> = <nat:5> \cdot <var:q> \} $ into $ \{ <var:D> = <var:q> \land <var:j> = <nat:5> \cdot <var:q> + <nat:1> \} $ . This is sound using the assignment inference rule obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H1> := <var:D> ; <var:H0> := <nat:1> ; <var:H1> := <var:H1> * <nat:5> ; <var:j> := <var:H1> <var:j> := <var:j> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:D> = <var:q> }} <def:poly> {{ <var:j> = <nat:5> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:H1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:H1> = <var:q> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:H1> = <nat:5> * <var:q> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:H0> = <nat:1> /\ <var:j> = <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:j> = <nat:5> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 