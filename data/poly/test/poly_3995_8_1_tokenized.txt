\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W1> := <var:d> ; <var:W2> := <var:W1> * <var:d> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:1> ; <var:W2> := <var:W2> * <nat:9> ; <var:x> := <var:W2> <var:x> := <var:x> + <var:W1> <var:x> := <var:x> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:d> = <var:N> $ ahead of evaluating our program it follows that $ <var:x> = <nat:9> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:8> $ after program exits . \end{theorem} \begin{proof} The course of logic for the program can be given by standard Hoare reasoning . Further , we see the assignment code \verb | <var:W1> := <var:d> ; | . This advances the precondition $ \{ <var:d> = <var:N> \} $ to the postcondition $ \{ <var:d> = <var:N> \land <var:W1> = <var:N> \} $ . Advancing to the next step , we see the assignment line \verb | <var:W2> := <var:W1> * <var:d> ; | . This transfers the precondition $ \{ <var:d> = <var:N> \land <var:W1> = <var:N> \} $ into $ \{ <var:d> = <var:N> \land <var:W1> = <var:N> \land <var:W2> = <var:N> ^ <nat:2> \} $ . This is known to be sound by the assignment law defined by Hoare techniques . Stepping through , we see the variable assignmet statement defining $ <nat:8> $ into $ <var:W0>$ . This forwards the condition $ \{ <var:d> = <var:N> \land <var:W1> = <var:N> \land <var:W2> = <var:N> ^ <nat:2> \} $ toward the postcondition $ \{ <var:d> = <var:N> \land <var:W1> = <var:N> \land <var:W2> = <var:N> ^ <nat:2> \land <var:W0> = <nat:8> \} $ . This is guaranteed with the assignment inference rule from usual Hoare techniques . Shifting focus toward the next line contained in the code segment , the variable assignmet line \verb | <var:W1> := <var:W1> * <nat:1> ; | . This advances the condition $ \{ <var:d> = <var:N> \land <var:W1> = <var:N> \land <var:W2> = <var:N> ^ <nat:2> \land <var:W0> = <nat:8> \} $ into $ \{ <var:d> = <var:N> \land <var:W1> = <nat:1> \cdot <var:N> \land <var:W2> = <var:N> ^ <nat:2> \land <var:W0> = <nat:8> \} $ . This is shown with the assignment law defined by standard Hoare logic . Advancing to the following step seen in the list of commands , the variable binding line binding $ <var:W2> * <nat:9> $ as $ <var:W2>$ . This line redefines the condition $ \{ <var:d> = <var:N> \land <var:W1> = <nat:1> \cdot <var:N> \land <var:W2> = <var:N> ^ <nat:2> \land <var:W0> = <nat:8> \} $ to the condition $ \{ <var:d> = <var:N> \land <var:W1> = <nat:1> \cdot <var:N> \land <var:W2> = <nat:9> \cdot <var:N> ^ <nat:2> \land <var:W0> = <nat:8> \} $ . This is sound through the assignment scheme in Hoare logic . Advancing to the next step , we see the environment update line defining $ <var:W2$ toward $ <var:x>$ . This statement takes $ \{ <var:d> = <var:N> \land <var:W1> = <nat:1> \cdot <var:N> \land <var:W2> = <nat:9> \cdot <var:N> ^ <nat:2> \land <var:W0> = <nat:8> \} $ to the postcondition $ \{ <var:d> = <var:N> \land <var:W1> = <nat:1> \cdot <var:N> \land <var:W0> = <nat:8> \land <var:x> = <nat:9> \cdot <var:N> ^ <nat:2> \} $ . This is sound with the assignment law in typical Hoare reasoning . Focusing on the following bit of code found in our set of instructions , the variable binding line \verb | <var:x> := <var:x> + <var:W1> | . This forwards the condition $ \{ <var:d> = <var:N> \land <var:W1> = <nat:1> \cdot <var:N> \land <var:W0> = <nat:8> \land <var:x> = <nat:9> \cdot <var:N> ^ <nat:2> \} $ toward the condition $ \{ <var:d> = <var:N> \land <var:W0> = <nat:8> \land <var:x> = <nat:9> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> \} $ . Stepping forward , we see the binding statement giving $ <var:x> + <var:W0$ to $ <var:x>$ . This code forwards the condition $ \{ <var:d> = <var:N> \land <var:W0> = <nat:8> \land <var:x> = <nat:9> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> \} $ into the condition $ \{ <var:d> = <var:N> \land <var:x> = <nat:9> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:8> \} $ . This is shown to be logically sound using the assignment law found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W1> := <var:d> ; <var:W2> := <var:W1> * <var:d> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:1> ; <var:W2> := <var:W2> * <nat:9> ; <var:x> := <var:W2> <var:x> := <var:x> + <var:W1> <var:x> := <var:x> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:d> = <var:N> }} <def:poly> {{ <var:x> = <nat:9> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:W1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:W1> = <var:N> /\ <var:W2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:W1> = <var:N> /\ <var:W2> = <var:N> ^ <nat:2> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:W1> = <nat:1> * <var:N> /\ <var:W2> = <var:N> ^ <nat:2> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:W1> = <nat:1> * <var:N> /\ <var:W2> = <nat:9> * <var:N> ^ <nat:2> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:W1> = <nat:1> * <var:N> /\ <var:W0> = <nat:8> /\ <var:x> = <nat:9> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:W0> = <nat:8> /\ <var:x> = <nat:9> * <var:N> ^ <nat:2> + <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:x> = <nat:9> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 