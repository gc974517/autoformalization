\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:7> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:N> ; <var:K2> := <nat:1> ; <var:K2> := <var:K2> * <var:N> ; <var:K2> := <var:K2> * <var:N> ; <var:u> := <var:K2> ; <var:u> := <var:u> + <var:K1> ; <var:u> := <var:u> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> . Allow $ <var:N> = <var:z> $ --- taking $ <var:z> \in \mathbb{N} $ --- before the execution of our program it follows that $ <var:u> = <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:7> $ after series of instructions is done . \end{theorem} \begin{proof} Using Hoare reasoning gives us : \begin{eqnarray} \{ <var:N> = <var:z> \} \\ <var:K0> := <nat:7> ; \\ \{ <var:N> = <var:z> \land <var:K0> = <nat:7> \} \\ <var:K1> := <nat:3> ; \\ \{ <var:N> = <var:z> \land <var:K0> = <nat:7> \land <var:K1> = <nat:3> \} \\ <var:K1> := <var:K1> * <var:N> ; \\ \{ <var:N> = <var:z> \land <var:K0> = <nat:7> \land <var:K1> = <nat:3> * <var:z> \} \\ <var:K2> := <nat:1> ; \\ \{ <var:N> = <var:z> \land <var:K0> = <nat:7> \land <var:K1> = <nat:3> * <var:z> \land <var:K2> = <nat:1> \} \\ <var:K2> := <var:K2> * <var:N> ; \\ \{ <var:N> = <var:z> \land <var:K0> = <nat:7> \land <var:K1> = <nat:3> * <var:z> \land <var:K2> = <nat:1> * <var:z> \} \\ <var:K2> := <var:K2> * <var:N> ; \\ \{ <var:N> = <var:z> \land <var:K0> = <nat:7> \land <var:K1> = <nat:3> * <var:z> \land <var:K2> = <nat:1> * <var:z> ^ <nat:2> \} \\ <var:u> := <var:K2> ; \\ \{ <var:N> = <var:z> \land <var:K0> = <nat:7> \land <var:K1> = <nat:3> * <var:z> \land <var:u> = <nat:1> * <var:z> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:K1> ; \\ \{ <var:N> = <var:z> \land <var:K0> = <nat:7> \land <var:u> = <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> \} \\ <var:u> := <var:u> + <var:K0> \\ \{ <var:N> = <var:z> \land <var:u> = <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:7> \} \end{eqnarray} Considering the preceding argument , the list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K0> := <nat:7> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:N> ; <var:K2> := <nat:1> ; <var:K2> := <var:K2> * <var:N> ; <var:K2> := <var:K2> * <var:N> ; <var:u> := <var:K2> ; <var:u> := <var:u> + <var:K1> ; <var:u> := <var:u> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:N> = <var:z> }} <def:poly> {{ <var:u> = <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:3> * <var:z> /\ <var:K2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:3> * <var:z> /\ <var:K2> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:3> * <var:z> /\ <var:K2> = <nat:1> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:3> * <var:z> /\ <var:u> = <nat:1> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:K0> = <nat:7> /\ <var:u> = <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:z> /\ <var:u> = <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 