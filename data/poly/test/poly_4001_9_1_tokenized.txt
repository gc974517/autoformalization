\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as follows \begin{verbatim} <var:y1> := <var:i> ; <var:y2> := <var:y1> * <var:i> ; <var:y3> := <var:y2> * <var:i> ; <var:y0> := <nat:3> ; <var:y1> := <var:y1> * <nat:1> ; <var:y3> := <var:y3> * <nat:8> ; <var:A> := <var:y3> <var:A> := <var:A> + <var:y1> <var:A> := <var:A> + <var:y0> \end{verbatim} Given $ <var:i> = <var:l> $ prior to the execution of the list of instructions then we have $ <var:A> = <nat:8> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for the set of commands is evident with usual Hoare reasoning . Next , the line assigning $ <var:i> $ into $ <var:y1>$ . This line redefines $ \{ <var:i> = <var:l> \} $ into the condition $ \{ <var:i> = <var:l> \land <var:y1> = <var:l> \} $ . This is sound using the assignment rule from usual Hoare techniques . Jumping to the following line found in our set of instructions , we see the binding statement \verb | <var:y2> := <var:y1> * <var:i> ; | . This redefines the precondition $ \{ <var:i> = <var:l> \land <var:y1> = <var:l> \} $ as $ \{ <var:i> = <var:l> \land <var:y1> = <var:l> \land <var:y2> = <var:l> ^ <nat:2> \} $ . Next , we see the variable update statement assigning $ <var:y2> * <var:i> $ into $ <var:y3>$ . This command advances the precondition $ \{ <var:i> = <var:l> \land <var:y1> = <var:l> \land <var:y2> = <var:l> ^ <nat:2> \} $ toward $ \{ <var:i> = <var:l> \land <var:y1> = <var:l> \land <var:y2> = <var:l> ^ <nat:2> \land <var:y3> = <var:l> ^ <nat:3> \} $ . This is rigorously given using the assignment scheme defined in Hoare techniques . Immediately after , the variable binding code \verb | <var:y0> := <nat:3> ; | . This line advances $ \{ <var:i> = <var:l> \land <var:y1> = <var:l> \land <var:y2> = <var:l> ^ <nat:2> \land <var:y3> = <var:l> ^ <nat:3> \} $ into the condition $ \{ <var:i> = <var:l> \land <var:y1> = <var:l> \land <var:y2> = <var:l> ^ <nat:2> \land <var:y3> = <var:l> ^ <nat:3> \land <var:y0> = <nat:3> \} $ . This is ensured by the assignment law found in typical Hoare reasoning . Taking a look at the proceeding bit of code contained in our code segment , we have the variable assignmet line binding $ <var:y1> * <nat:1> $ as $ <var:y1>$ . This transfers $ \{ <var:i> = <var:l> \land <var:y1> = <var:l> \land <var:y2> = <var:l> ^ <nat:2> \land <var:y3> = <var:l> ^ <nat:3> \land <var:y0> = <nat:3> \} $ into $ \{ <var:i> = <var:l> \land <var:y1> = <nat:1> \times <var:l> \land <var:y2> = <var:l> ^ <nat:2> \land <var:y3> = <var:l> ^ <nat:3> \land <var:y0> = <nat:3> \} $ . Stepping forward , we see the assignment statement assigning $ <var:y3> * <nat:8> $ as $ <var:y3>$ . This transfers the condition $ \{ <var:i> = <var:l> \land <var:y1> = <nat:1> \times <var:l> \land <var:y2> = <var:l> ^ <nat:2> \land <var:y3> = <var:l> ^ <nat:3> \land <var:y0> = <nat:3> \} $ toward $ \{ <var:i> = <var:l> \land <var:y1> = <nat:1> \times <var:l> \land <var:y2> = <var:l> ^ <nat:2> \land <var:y3> = <nat:8> \times <var:l> ^ <nat:3> \land <var:y0> = <nat:3> \} $ . This is ensured with the assignment rule given in Hoare logic . Moving onward , we see the code giving $ <var:y3$ as $ <var:A>$ . This redefines the condition $ \{ <var:i> = <var:l> \land <var:y1> = <nat:1> \times <var:l> \land <var:y2> = <var:l> ^ <nat:2> \land <var:y3> = <nat:8> \times <var:l> ^ <nat:3> \land <var:y0> = <nat:3> \} $ toward the condition $ \{ <var:i> = <var:l> \land <var:y1> = <nat:1> \times <var:l> \land <var:y2> = <var:l> ^ <nat:2> \land <var:y0> = <nat:3> \land <var:A> = <nat:8> \times <var:l> ^ <nat:3> \} $ . This is given using the assignment law found in usual Hoare reasoning . Paying attention to the proceeding command seen in the set of commands , the command \verb | <var:A> := <var:A> + <var:y1> | . This code moves $ \{ <var:i> = <var:l> \land <var:y1> = <nat:1> \times <var:l> \land <var:y2> = <var:l> ^ <nat:2> \land <var:y0> = <nat:3> \land <var:A> = <nat:8> \times <var:l> ^ <nat:3> \} $ to the postcondition $ \{ <var:i> = <var:l> \land <var:y0> = <nat:3> \land <var:A> = <nat:8> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> \} $ . This is given with the assignment rule from standard Hoare reasoning . Immediately following , we have the variable assignmet statement \verb | <var:A> := <var:A> + <var:y0> | . This line takes $ \{ <var:i> = <var:l> \land <var:y0> = <nat:3> \land <var:A> = <nat:8> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> \} $ to $ \{ <var:i> = <var:l> \land <var:A> = <nat:8> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:i> = <var:l> }} <var:y1> := <var:i> ; <var:y2> := <var:y1> * <var:i> ; <var:y3> := <var:y2> * <var:i> ; <var:y0> := <nat:3> ; <var:y1> := <var:y1> * <nat:1> ; <var:y3> := <var:y3> * <nat:8> ; <var:A> := <var:y3> <var:A> := <var:A> + <var:y1> <var:A> := <var:A> + <var:y0> {{ <var:A> = <nat:8> * <var:l> ^ <nat:3> + <nat:1> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:y1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:y1> = <var:l> /\ <var:y2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:y1> = <var:l> /\ <var:y2> = <var:l> ^ <nat:2> /\ <var:y3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:y1> = <var:l> /\ <var:y2> = <var:l> ^ <nat:2> /\ <var:y3> = <var:l> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:y1> = <nat:1> * <var:l> /\ <var:y2> = <var:l> ^ <nat:2> /\ <var:y3> = <var:l> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:y1> = <nat:1> * <var:l> /\ <var:y2> = <var:l> ^ <nat:2> /\ <var:y3> = <nat:8> * <var:l> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:y1> = <nat:1> * <var:l> /\ <var:y2> = <var:l> ^ <nat:2> /\ <var:y0> = <nat:3> /\ <var:A> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:y0> = <nat:3> /\ <var:A> = <nat:8> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:l> /\ <var:A> = <nat:8> * <var:l> ^ <nat:3> + <nat:1> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 