\begin{document} \begin{theorem} Define the following code : \begin{verbatim} <var:k1> := <var:A> ; <var:k2> := <var:k1> * <var:A> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:3> ; <var:y> := <var:k2> <var:y> := <var:y> + <var:k1> <var:y> := <var:y> + <var:k0> \end{verbatim} Assume it to be that $ <var:A> = <var:G> $ before running our set of commands it holds that $ <var:y> = <nat:3> \times <var:G> ^ <nat:2> + <nat:3> \times <var:G> + <nat:3> $ once series of commands has exited . \end{theorem} \begin{proof} The course of logic for our list of instructions is evident by this decorated code segment . \begin{eqnarray} \{ <var:A> = <var:G> \} \\ <var:k1> := <var:A> ; \\ \{ <var:A> = <var:G> \land <var:k1> = <var:G> \} \\ <var:k2> := <var:k1> * <var:A> ; \\ \{ <var:A> = <var:G> \land <var:k1> = <var:G> \land <var:k2> = <var:G> ^ <nat:2> \} \\ <var:k0> := <nat:3> ; \\ \{ <var:A> = <var:G> \land <var:k1> = <var:G> \land <var:k2> = <var:G> ^ <nat:2> \land <var:k0> = <nat:3> \} \\ <var:k1> := <var:k1> * <nat:3> ; \\ \{ <var:A> = <var:G> \land <var:k1> = <nat:3> \cdot <var:G> \land <var:k2> = <var:G> ^ <nat:2> \land <var:k0> = <nat:3> \} \\ <var:k2> := <var:k2> * <nat:3> ; \\ \{ <var:A> = <var:G> \land <var:k1> = <nat:3> \cdot <var:G> \land <var:k2> = <nat:3> \cdot <var:G> ^ <nat:2> \land <var:k0> = <nat:3> \} \\ <var:y> := <var:k2> \\ \{ <var:A> = <var:G> \land <var:k1> = <nat:3> \cdot <var:G> \land <var:k0> = <nat:3> \land <var:y> = <nat:3> \cdot <var:G> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:k1> \\ \{ <var:A> = <var:G> \land <var:k0> = <nat:3> \land <var:y> = <nat:3> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> \} \\ <var:y> := <var:y> + <var:k0> \\ \{ <var:A> = <var:G> \land <var:y> = <nat:3> \cdot <var:G> ^ <nat:2> + <nat:3> \cdot <var:G> + <nat:3> \} \end{eqnarray} The application of Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:A> = <var:G> }} <var:k1> := <var:A> ; <var:k2> := <var:k1> * <var:A> ; <var:k0> := <nat:3> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:3> ; <var:y> := <var:k2> <var:y> := <var:y> + <var:k1> <var:y> := <var:y> + <var:k0> {{ <var:y> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:k1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:k1> = <var:G> /\ <var:k2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:k1> = <var:G> /\ <var:k2> = <var:G> ^ <nat:2> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:k1> = <nat:3> * <var:G> /\ <var:k2> = <var:G> ^ <nat:2> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:k1> = <nat:3> * <var:G> /\ <var:k2> = <nat:3> * <var:G> ^ <nat:2> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:k1> = <nat:3> * <var:G> /\ <var:k0> = <nat:3> /\ <var:y> = <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:k0> = <nat:3> /\ <var:y> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:G> /\ <var:y> = <nat:3> * <var:G> ^ <nat:2> + <nat:3> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 