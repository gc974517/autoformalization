\begin{document} \begin{theorem} Take a series of commands as follows \begin{verbatim} <var:E0> := <nat:1> ; <var:h> := <var:E0> \end{verbatim} Given $ <var:Y> = <var:A> $ ( given whole numbers $ <var:A> $ ) prior to the evaluation of the set of commands , it must be that we see $ <var:h> = <nat:1> $ after segment of code has finished . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning results in : \begin{eqnarray} \{ <var:Y> = <var:A> \} \\ <var:E0> := <nat:1> ; \\ \{ <var:Y> = <var:A> \land <var:E0> = <nat:1> \} \\ <var:h> := <var:E0> \\ \{ <var:Y> = <var:A> \land <var:h> = <nat:1> \} \end{eqnarray} Thus , our series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:Y> = <var:A> }} <var:E0> := <nat:1> ; <var:h> := <var:E0> {{ <var:h> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:h> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 