\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:7> ; <var:A> := <var:W0> \end{verbatim} Given $ <var:a> = <var:R> $ ( assuming some positive integer coefficients $ <var:R> $ ) prior to evaluating our code then we have $ <var:A> = <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for this code can be shown using typical Hoare techniques . Focusing on the upcoming step found in our segment of code , we have \begin{eqnarray} \{ <var:a> = <var:R> \} \, <var:W0> := <nat:7> \, \{ <var:a> = <var:R> \land <var:W0> = <nat:7> \} \end{eqnarray} Focusing on the proceeding statement in the list of instructions , \begin{eqnarray} \{ <var:a> = <var:R> \} \, <var:W0> := <nat:7> \, \{ <var:a> = <var:R> \land <var:W0> = <nat:7> \} \end{eqnarray} This is known to be sound by the variable assignmet inference rule given in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:a> = <var:R> }} <var:W0> := <nat:7> ; <var:A> := <var:W0> {{ <var:A> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:A> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 