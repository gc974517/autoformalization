\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:M> ; <var:b2> := <var:b1> * <var:M> ; <var:b0> := <nat:7> ; <var:b1> := <var:b1> * <nat:9> ; <var:b2> := <var:b2> * <nat:2> ; <var:H> := <var:b2> <var:H> := <var:H> + <var:b1> <var:H> := <var:H> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> in \emph{Imp} . Assume $ <var:M> = <var:Y> $ ahead of executing the list of commands it holds that $ <var:H> = <nat:2> \cdot <var:Y> ^ <nat:2> + <nat:9> \cdot <var:Y> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands is accomplished with usual Hoare logic . Shifting focus toward the upcoming step found in our program , we see the binding command yielding $ <var:M> $ to $ <var:b1>$ . This advances the precondition $ \{ <var:M> = <var:Y> \} $ to $ \{ <var:M> = <var:Y> \land <var:b1> = <var:Y> \} $ . This is rigorously given using the assignment inference rule found in usual Hoare reasoning . Paying attention to the next step contained in our series of instructions , the assignment code \verb | <var:b2> := <var:b1> * <var:M> ; | . This code moves the precondition $ \{ <var:M> = <var:Y> \land <var:b1> = <var:Y> \} $ into $ \{ <var:M> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \} $ . This is shown using the assignment inference rule of typical Hoare logic . Paying attention to the proceeding line seen in the list of commands , we see the binding command binding $ <nat:7> $ to $ <var:b0>$ . This redefines the precondition $ \{ <var:M> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \} $ to the postcondition $ \{ <var:M> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \land <var:b0> = <nat:7> \} $ . Considering the following bit of code in the segment of code , we have the assignment statement \verb | <var:b1> := <var:b1> * <nat:9> ; | . This statement moves the condition $ \{ <var:M> = <var:Y> \land <var:b1> = <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \land <var:b0> = <nat:7> \} $ toward $ \{ <var:M> = <var:Y> \land <var:b1> = <nat:9> \times <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \land <var:b0> = <nat:7> \} $ . This is sound by the assignment inference rule from standard Hoare techniques . Jumping to the following line of code found in our series of instructions , we see the command \verb | <var:b2> := <var:b2> * <nat:2> ; | . This advances the precondition $ \{ <var:M> = <var:Y> \land <var:b1> = <nat:9> \times <var:Y> \land <var:b2> = <var:Y> ^ <nat:2> \land <var:b0> = <nat:7> \} $ into $ \{ <var:M> = <var:Y> \land <var:b1> = <nat:9> \times <var:Y> \land <var:b2> = <nat:2> \times <var:Y> ^ <nat:2> \land <var:b0> = <nat:7> \} $ . Taking another step toward the upcoming bit of code found in the series of instructions , we see the assignment statement binding $ <var:b2$ to $ <var:H>$ . This redefines the precondition $ \{ <var:M> = <var:Y> \land <var:b1> = <nat:9> \times <var:Y> \land <var:b2> = <nat:2> \times <var:Y> ^ <nat:2> \land <var:b0> = <nat:7> \} $ to $ \{ <var:M> = <var:Y> \land <var:b1> = <nat:9> \times <var:Y> \land <var:b0> = <nat:7> \land <var:H> = <nat:2> \times <var:Y> ^ <nat:2> \} $ . Going forward , the variable assignmet line \verb | <var:H> := <var:H> + <var:b1> | . This code forwards $ \{ <var:M> = <var:Y> \land <var:b1> = <nat:9> \times <var:Y> \land <var:b0> = <nat:7> \land <var:H> = <nat:2> \times <var:Y> ^ <nat:2> \} $ to the condition $ \{ <var:M> = <var:Y> \land <var:b0> = <nat:7> \land <var:H> = <nat:2> \times <var:Y> ^ <nat:2> + <nat:9> \times <var:Y> \} $ . Moving on , we have the assignment line binding $ <var:H> + <var:b0$ to $ <var:H>$ . This code redefines the precondition $ \{ <var:M> = <var:Y> \land <var:b0> = <nat:7> \land <var:H> = <nat:2> \times <var:Y> ^ <nat:2> + <nat:9> \times <var:Y> \} $ into the postcondition $ \{ <var:M> = <var:Y> \land <var:H> = <nat:2> \times <var:Y> ^ <nat:2> + <nat:9> \times <var:Y> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b1> := <var:M> ; <var:b2> := <var:b1> * <var:M> ; <var:b0> := <nat:7> ; <var:b1> := <var:b1> * <nat:9> ; <var:b2> := <var:b2> * <nat:2> ; <var:H> := <var:b2> <var:H> := <var:H> + <var:b1> <var:H> := <var:H> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:M> = <var:Y> }} <def:poly> {{ <var:H> = <nat:2> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:b1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:b1> = <var:Y> /\ <var:b2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:b1> = <var:Y> /\ <var:b2> = <var:Y> ^ <nat:2> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:b1> = <nat:9> * <var:Y> /\ <var:b2> = <var:Y> ^ <nat:2> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:b1> = <nat:9> * <var:Y> /\ <var:b2> = <nat:2> * <var:Y> ^ <nat:2> /\ <var:b0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:b1> = <nat:9> * <var:Y> /\ <var:b0> = <nat:7> /\ <var:H> = <nat:2> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:b0> = <nat:7> /\ <var:H> = <nat:2> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:H> = <nat:2> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 