\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:R> := <nat:4> ; <var:R> := <nat:3> + <var:R> * <var:b> ; <var:R> := <nat:4> + <var:R> * <var:b> ; <var:R> := <nat:1> + <var:R> * <var:b> ; <var:R> := <nat:2> + <var:R> * <var:b> ; <var:R> := <nat:3> + <var:R> * <var:b> ; <var:R> := <var:R> * <var:b> ; <var:R> := <nat:3> + <var:R> * <var:b> ; <var:R> := <nat:2> + <var:R> * <var:b> ; <var:R> := <var:R> * <var:b> ; <var:R> := <nat:1> + <var:R> * <var:b> ; <var:R> := <var:R> * <var:b> ; <var:R> := <var:R> * <var:b> ; <var:R> := <nat:3> + <var:R> * <var:b> \end{verbatim} Given it to be that $ <var:b> = <var:s> $ before executing our series of instructions it follows that we see $ <var:R> = <nat:4> \cdot <var:s> ^ <nat:13> + <nat:3> \cdot <var:s> ^ <nat:12> + <nat:4> \cdot <var:s> ^ <nat:11> + <nat:1> \cdot <var:s> ^ <nat:10> + <nat:2> \cdot <var:s> ^ <nat:9> + <nat:3> \cdot <var:s> ^ <nat:8> + <nat:3> \cdot <var:s> ^ <nat:6> + <nat:2> \cdot <var:s> ^ <nat:5> + <nat:1> \cdot <var:s> ^ <nat:3> + <nat:3> $ once series of commands is done . \end{theorem} \begin{proof} Proving correctness for this set of instructions is evident with Hoare logic . Observing the subsequent command found in the list of instructions , we see the variable binding code \verb | <var:R> := <nat:4> ; | . This redefines the precondition $ \{ <var:b> = <var:s> \} $ toward $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> \} $ . This is ensured through the assignment rule of standard Hoare reasoning . Moving onward , the variable update code assigning $ <nat:3> + <var:R> * <var:b> $ into $ <var:R>$ . This redefines the condition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> \} $ as $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> + <nat:3> \} $ . This is sound by the assignment scheme obtained from typical Hoare logic . Advancing to the next statement seen in our program , we have the environment update command giving $ <nat:4> + <var:R> * <var:b> $ into $ <var:R>$ . This code redefines the precondition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> + <nat:3> \} $ to the postcondition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> \} $ . After , we have the variable assignmet line assigning $ <nat:1> + <var:R> * <var:b> $ as $ <var:R>$ . This takes the precondition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> \} $ to $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:1> \} $ . This is known to be sound using the assignment rule from standard Hoare logic . Going forward , the variable assignmet code binding $ <nat:2> + <var:R> * <var:b> $ toward $ <var:R>$ . This statement advances the precondition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:1> \} $ as $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:2> \} $ . Considering the upcoming line contained in the series of instructions , we see the binding command \verb | <var:R> := <nat:3> + <var:R> * <var:b> ; | . This code takes the condition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:2> \} $ as the postcondition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:3> \} $ . This is known to be sound using the assignment inference rule of Hoare logic . Jumping to the upcoming statement contained in our code , the binding command assigning $ <var:R> * <var:b> $ to $ <var:R>$ . This code advances $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:3> \} $ into the postcondition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + \} $ . This is sound with the assignment scheme found in Hoare logic . Observing the proceeding command found in our segment of code , we see the variable binding statement letting $ <nat:3> + <var:R> * <var:b> $ to $ <var:R>$ . This forwards the precondition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + \} $ toward the condition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> \} $ . Moving on , the variable update statement letting $ <nat:2> + <var:R> * <var:b> $ toward $ <var:R>$ . This statement forwards the condition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> \} $ as $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:7> + <nat:4> * <var:s> ^ <nat:6> + <nat:1> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> + <nat:2> \} $ . This is given by the assignment law of typical Hoare techniques . Moving forward to the proceeding step seen in our code segment , the variable binding line \verb | <var:R> := <var:R> * <var:b> ; | . This forwards the condition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:7> + <nat:4> * <var:s> ^ <nat:6> + <nat:1> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> + <nat:2> \} $ into the condition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:9> + <nat:3> * <var:s> ^ <nat:8> + <nat:4> * <var:s> ^ <nat:7> + <nat:1> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + \} $ . Moving on , we see the code giving $ <nat:1> + <var:R> * <var:b> $ into $ <var:R>$ . This line advances the precondition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:9> + <nat:3> * <var:s> ^ <nat:8> + <nat:4> * <var:s> ^ <nat:7> + <nat:1> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + \} $ to the postcondition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:10> + <nat:3> * <var:s> ^ <nat:9> + <nat:4> * <var:s> ^ <nat:8> + <nat:1> * <var:s> ^ <nat:7> + <nat:2> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:1> \} $ . This is known to be sound through the assignment law defined in Hoare reasoning . Moving forward to the upcoming command in the list of instructions , the variable binding command binding $ <var:R> * <var:b> $ as $ <var:R>$ . This takes the condition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:10> + <nat:3> * <var:s> ^ <nat:9> + <nat:4> * <var:s> ^ <nat:8> + <nat:1> * <var:s> ^ <nat:7> + <nat:2> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:1> \} $ into $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:11> + <nat:3> * <var:s> ^ <nat:10> + <nat:4> * <var:s> ^ <nat:9> + <nat:1> * <var:s> ^ <nat:8> + <nat:2> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:1> * <var:s> + \} $ . Moving forward to the following statement contained in the code segment , we have the variable update command yielding $ <var:R> * <var:b> $ to $ <var:R>$ . This advances $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:11> + <nat:3> * <var:s> ^ <nat:10> + <nat:4> * <var:s> ^ <nat:9> + <nat:1> * <var:s> ^ <nat:8> + <nat:2> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:1> * <var:s> + \} $ to the condition $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:12> + <nat:3> * <var:s> ^ <nat:11> + <nat:4> * <var:s> ^ <nat:10> + <nat:1> * <var:s> ^ <nat:9> + <nat:2> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:2> + \} $ . This is deduced by the assignment law found in standard Hoare logic . Advancing to the subsequent statement found in the code segment , we have the environment update line \verb | <var:R> := <nat:3> + <var:R> * <var:b> | . This line redefines $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:12> + <nat:3> * <var:s> ^ <nat:11> + <nat:4> * <var:s> ^ <nat:10> + <nat:1> * <var:s> ^ <nat:9> + <nat:2> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:2> + \} $ into $ \{ <var:b> = <var:s> \land <var:R> = <nat:4> * <var:s> ^ <nat:13> + <nat:3> * <var:s> ^ <nat:12> + <nat:4> * <var:s> ^ <nat:11> + <nat:1> * <var:s> ^ <nat:10> + <nat:2> * <var:s> ^ <nat:9> + <nat:3> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:3> + <nat:3> \} $ . This is sound by the assignment inference rule from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:b> = <var:s> }} <var:R> := <nat:4> ; <var:R> := <nat:3> + <var:R> * <var:b> ; <var:R> := <nat:4> + <var:R> * <var:b> ; <var:R> := <nat:1> + <var:R> * <var:b> ; <var:R> := <nat:2> + <var:R> * <var:b> ; <var:R> := <nat:3> + <var:R> * <var:b> ; <var:R> := <var:R> * <var:b> ; <var:R> := <nat:3> + <var:R> * <var:b> ; <var:R> := <nat:2> + <var:R> * <var:b> ; <var:R> := <var:R> * <var:b> ; <var:R> := <nat:1> + <var:R> * <var:b> ; <var:R> := <var:R> * <var:b> ; <var:R> := <var:R> * <var:b> ; <var:R> := <nat:3> + <var:R> * <var:b> {{ <var:R> = <nat:4> * <var:s> ^ <nat:13> + <nat:3> * <var:s> ^ <nat:12> + <nat:4> * <var:s> ^ <nat:11> + <nat:1> * <var:s> ^ <nat:10> + <nat:2> * <var:s> ^ <nat:9> + <nat:3> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:7> + <nat:4> * <var:s> ^ <nat:6> + <nat:1> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:3> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> * <var:s> ^ <nat:9> + <nat:3> * <var:s> ^ <nat:8> + <nat:4> * <var:s> ^ <nat:7> + <nat:1> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> * <var:s> ^ <nat:10> + <nat:3> * <var:s> ^ <nat:9> + <nat:4> * <var:s> ^ <nat:8> + <nat:1> * <var:s> ^ <nat:7> + <nat:2> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> * <var:s> ^ <nat:11> + <nat:3> * <var:s> ^ <nat:10> + <nat:4> * <var:s> ^ <nat:9> + <nat:1> * <var:s> ^ <nat:8> + <nat:2> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:1> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> * <var:s> ^ <nat:12> + <nat:3> * <var:s> ^ <nat:11> + <nat:4> * <var:s> ^ <nat:10> + <nat:1> * <var:s> ^ <nat:9> + <nat:2> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:s> /\ <var:R> = <nat:4> * <var:s> ^ <nat:13> + <nat:3> * <var:s> ^ <nat:12> + <nat:4> * <var:s> ^ <nat:11> + <nat:1> * <var:s> ^ <nat:10> + <nat:2> * <var:s> ^ <nat:9> + <nat:3> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 