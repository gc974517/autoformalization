\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:8> ; <var:O1> := <nat:5> ; <var:O1> := <var:O1> * <var:n> ; <var:z> := <var:O1> ; <var:z> := <var:z> + <var:O0> \end{verbatim} Assuming $ <var:n> = <var:E> $ --- given positive integer coefficients $ <var:E> $ --- prior to executing the set of instructions it must be that $ <var:z> = <nat:5> * <var:E> + <nat:8> $ . \end{theorem} \begin{proof} Using typical Hoare techniques gives us : \begin{eqnarray} \{ <var:n> = <var:E> \} \\ <var:O0> := <nat:8> ; \\ \{ <var:n> = <var:E> \land <var:O0> = <nat:8> \} \\ <var:O1> := <nat:5> ; \\ \{ <var:n> = <var:E> \land <var:O0> = <nat:8> \land <var:O1> = <nat:5> \} \\ <var:O1> := <var:O1> * <var:n> ; \\ \{ <var:n> = <var:E> \land <var:O0> = <nat:8> \land <var:O1> = <nat:5> \times <var:E> \} \\ <var:z> := <var:O1> ; \\ \{ <var:n> = <var:E> \land <var:O0> = <nat:8> \land <var:z> = <nat:5> \times <var:E> \} \end{eqnarray} Allowing the evaluation of this list of instructions produces : \begin{eqnarray} <var:z> := <var:z> + <var:O0> \\ \{ <var:n> = <var:E> \land <var:z> = <nat:5> \times <var:E> + <nat:8> \} \end{eqnarray} Considering the above , this series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:n> = <var:E> }} <var:O0> := <nat:8> ; <var:O1> := <nat:5> ; <var:O1> := <var:O1> * <var:n> ; <var:z> := <var:O1> ; <var:z> := <var:z> + <var:O0> {{ <var:z> = <nat:5> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:O0> = <nat:8> /\ <var:z> = <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:z> = <nat:5> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 