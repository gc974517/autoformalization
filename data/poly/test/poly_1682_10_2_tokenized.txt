\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g> := <nat:4> ; <var:g> := <nat:1> + <var:g> * <var:d> ; <var:g> := <nat:3> + <var:g> * <var:d> ; <var:g> := <nat:3> + <var:g> * <var:d> ; <var:g> := <nat:4> + <var:g> * <var:d> ; <var:g> := <nat:4> + <var:g> * <var:d> ; <var:g> := <nat:2> + <var:g> * <var:d> ; <var:g> := <var:g> * <var:d> ; <var:g> := <nat:1> + <var:g> * <var:d> ; <var:g> := <nat:3> + <var:g> * <var:d> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Assume it to hold that $ <var:d> = <var:p> $ given any positive integer coefficients $ <var:p> $ before interpreting this set of commands , then we have $ <var:g> = <nat:4> \cdot <var:p> ^ <nat:9> + <nat:1> \cdot <var:p> ^ <nat:8> + <nat:3> \cdot <var:p> ^ <nat:7> + <nat:3> \cdot <var:p> ^ <nat:6> + <nat:4> \cdot <var:p> ^ <nat:5> + <nat:4> \cdot <var:p> ^ <nat:4> + <nat:2> \cdot <var:p> ^ <nat:3> + <nat:1> \cdot <var:p> + <nat:3> $ . \end{theorem} \begin{proof} Using Hoare reasoning yields : \begin{eqnarray} \{ <var:d> = <var:p> \} \\ <var:g> := <nat:4> ; \\ \{ <var:d> = <var:p> \land <var:g> = <nat:4> \} \\ <var:g> := <nat:1> + <var:g> * <var:d> ; \\ \{ <var:d> = <var:p> \land <var:g> = <nat:4> * <var:p> + <nat:1> \} \\ <var:g> := <nat:3> + <var:g> * <var:d> ; \\ \{ <var:d> = <var:p> \land <var:g> = <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:3> \} \\ <var:g> := <nat:3> + <var:g> * <var:d> ; \\ \{ <var:d> = <var:p> \land <var:g> = <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:3> \} \\ <var:g> := <nat:4> + <var:g> * <var:d> ; \\ \{ <var:d> = <var:p> \land <var:g> = <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:4> \} \\ <var:g> := <nat:4> + <var:g> * <var:d> ; \\ \{ <var:d> = <var:p> \land <var:g> = <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:4> \} \\ <var:g> := <nat:2> + <var:g> * <var:d> ; \\ \{ <var:d> = <var:p> \land <var:g> = <nat:4> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> \} \\ <var:g> := <var:g> * <var:d> ; \\ \{ <var:d> = <var:p> \land <var:g> = <nat:4> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + \} \\ <var:g> := <nat:1> + <var:g> * <var:d> ; \\ \{ <var:d> = <var:p> \land <var:g> = <nat:4> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> \} \\ <var:g> := <nat:3> + <var:g> * <var:d> \\ \{ <var:d> = <var:p> \land <var:g> = <nat:4> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:1> * <var:p> + <nat:3> \} \end{eqnarray} Considering the preceding argument , this set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:4> ; <var:g> := <nat:1> + <var:g> * <var:d> ; <var:g> := <nat:3> + <var:g> * <var:d> ; <var:g> := <nat:3> + <var:g> * <var:d> ; <var:g> := <nat:4> + <var:g> * <var:d> ; <var:g> := <nat:4> + <var:g> * <var:d> ; <var:g> := <nat:2> + <var:g> * <var:d> ; <var:g> := <var:g> * <var:d> ; <var:g> := <nat:1> + <var:g> * <var:d> ; <var:g> := <nat:3> + <var:g> * <var:d> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:d> = <var:p> }} <def:poly> {{ <var:g> = <nat:4> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:1> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:g> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:g> = <nat:4> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:g> = <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:g> = <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:g> = <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:g> = <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:g> = <nat:4> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:g> = <nat:4> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:g> = <nat:4> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:p> /\ <var:g> = <nat:4> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:1> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 