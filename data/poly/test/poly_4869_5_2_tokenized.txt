\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:S> := <nat:4> ; <var:S> := <var:S> * <var:u> ; <var:S> := <nat:2> + <var:S> * <var:u> ; <var:S> := <nat:2> + <var:S> * <var:u> ; <var:S> := <nat:4> + <var:S> * <var:u> \end{verbatim} Assuming it to be that $ <var:u> = <var:F> $ ahead of running the set of instructions it must be that we have $ <var:S> = <nat:4> \cdot <var:F> ^ <nat:4> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for the set of commands is given through Hoare logic . Taking a look at the following steps seen in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:u> = <var:F> \} & <var:S> := <nat:4> & \{ <var:u> = <var:F> \land <var:S> = <nat:4> \} \\ \{ <var:u> = <var:F> \land <var:S> = <nat:4> \} & <var:S> := <var:S> * <var:u> & \{ <var:u> = <var:F> \land <var:S> = <nat:4> \cdot <var:F> + \} \\ \{ <var:u> = <var:F> \land <var:S> = <nat:4> \cdot <var:F> + \} & <var:S> := <nat:2> + <var:S> * <var:u> & \{ <var:u> = <var:F> \land <var:S> = <nat:4> \cdot <var:F> ^ <nat:2> + <nat:2> \} \\ \{ <var:u> = <var:F> \land <var:S> = <nat:4> \cdot <var:F> ^ <nat:2> + <nat:2> \} & <var:S> := <nat:2> + <var:S> * <var:u> & \{ <var:u> = <var:F> \land <var:S> = <nat:4> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> + <nat:2> \} \\ \{ <var:u> = <var:F> \land <var:S> = <nat:4> \cdot <var:F> ^ <nat:3> + <nat:2> \cdot <var:F> + <nat:2> \} & <var:S> := <nat:4> + <var:S> * <var:u& \{ <var:u> = <var:F> \land <var:S> = <nat:4> \cdot <var:F> ^ <nat:4> + <nat:2> \cdot <var:F> ^ <nat:2> + <nat:2> \cdot <var:F> + <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:u> = <var:F> }} <var:S> := <nat:4> ; <var:S> := <var:S> * <var:u> ; <var:S> := <nat:2> + <var:S> * <var:u> ; <var:S> := <nat:2> + <var:S> * <var:u> ; <var:S> := <nat:4> + <var:S> * <var:u> {{ <var:S> = <nat:4> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:S> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:S> = <nat:4> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:S> = <nat:4> * <var:F> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:S> = <nat:4> * <var:F> ^ <nat:3> + <nat:2> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:S> = <nat:4> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 