\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:E0> := <nat:8> ; <var:E2> := <nat:6> ; <var:E2> := <var:E2> * <var:v> ; <var:E2> := <var:E2> * <var:v> ; <var:E3> := <nat:4> ; <var:E3> := <var:E3> * <var:v> ; <var:E3> := <var:E3> * <var:v> ; <var:E3> := <var:E3> * <var:v> ; <var:L> := <var:E3> ; <var:L> := <var:L> + <var:E2> ; <var:L> := <var:L> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:v> = <var:A> $ taking positive integer coefficients $ <var:A> $ ahead of the execution of the series of commands it holds that we have $ <var:L> = <nat:4> \cdot <var:A> ^ <nat:3> + <nat:6> \cdot <var:A> ^ <nat:2> + <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions can be seen using typical Hoare reasoning . Moving on to the upcoming lines seen in our code , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:A> \} & <var:E0> := <nat:8> & \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \} \\ \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \} & <var:E2> := <nat:6> & \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \land <var:E2> = <nat:6> \} \\ \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \land <var:E2> = <nat:6> \} & <var:E2> := <var:E2> * <var:v> & \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \land <var:E2> = <nat:6> \cdot <var:A> \} \\ \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \land <var:E2> = <nat:6> \cdot <var:A> \} & <var:E2> := <var:E2> * <var:v> & \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \land <var:E2> = <nat:6> \cdot <var:A> ^ <nat:2> \} \\ \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \land <var:E2> = <nat:6> \cdot <var:A> ^ <nat:2> \} & <var:E3> := <nat:4> & \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \land <var:E2> = <nat:6> \cdot <var:A> ^ <nat:2> \land <var:E3> = <nat:4> \} \\ \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \land <var:E2> = <nat:6> \cdot <var:A> ^ <nat:2> \land <var:E3> = <nat:4> \} & <var:E3> := <var:E3> * <var:v> & \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \land <var:E2> = <nat:6> \cdot <var:A> ^ <nat:2> \land <var:E3> = <nat:4> \cdot <var:A> \} \\ \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \land <var:E2> = <nat:6> \cdot <var:A> ^ <nat:2> \land <var:E3> = <nat:4> \cdot <var:A> \} & <var:E3> := <var:E3> * <var:v> & \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \land <var:E2> = <nat:6> \cdot <var:A> ^ <nat:2> \land <var:E3> = <nat:4> \cdot <var:A> ^ <nat:2> \} \end{tabular} Further , we see \[ \begin{tabular} {rcl} \{ <var:v> = <var:A> \} & <var:E0> := <nat:8> & \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \} \end{tabular} Paying attention to the subsequent bit of code seen in our series of commands , \[ \begin{tabular} {rcl} \{ <var:v> = <var:A> \} & <var:E0> := <nat:8> & \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \} \end{tabular} Moving on to the proceeding statement found in the series of commands , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:A> \} & <var:E0> := <nat:8> & \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \} \end{tabular} Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:v> = <var:A> \} & <var:E0> := <nat:8> & \{ <var:v> = <var:A> \land <var:E0> = <nat:8> \} \end{tabular} This is shown with the environment update rule obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <def:poly> := <var:E0> := <nat:8> ; <var:E2> := <nat:6> ; <var:E2> := <var:E2> * <var:v> ; <var:E2> := <var:E2> * <var:v> ; <var:E3> := <nat:4> ; <var:E3> := <var:E3> * <var:v> ; <var:E3> := <var:E3> * <var:v> ; <var:E3> := <var:E3> * <var:v> ; <var:L> := <var:E3> ; <var:L> := <var:L> + <var:E2> ; <var:L> := <var:L> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:v> = <var:A> }} <def:poly> {{ <var:L> = <nat:4> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:E0> = <nat:8> /\ <var:E2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:E0> = <nat:8> /\ <var:E2> = <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:E0> = <nat:8> /\ <var:E2> = <nat:6> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:E0> = <nat:8> /\ <var:E2> = <nat:6> * <var:A> ^ <nat:2> /\ <var:E3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:E0> = <nat:8> /\ <var:E2> = <nat:6> * <var:A> ^ <nat:2> /\ <var:E3> = <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:E0> = <nat:8> /\ <var:E2> = <nat:6> * <var:A> ^ <nat:2> /\ <var:E3> = <nat:4> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:E0> = <nat:8> /\ <var:E2> = <nat:6> * <var:A> ^ <nat:2> /\ <var:E3> = <nat:4> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:E0> = <nat:8> /\ <var:E2> = <nat:6> * <var:A> ^ <nat:2> /\ <var:L> = <nat:4> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:E0> = <nat:8> /\ <var:L> = <nat:4> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:A> /\ <var:L> = <nat:4> * <var:A> ^ <nat:3> + <nat:6> * <var:A> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 