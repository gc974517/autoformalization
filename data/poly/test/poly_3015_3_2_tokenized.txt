\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:p> := <nat:3> ; <var:p> := <nat:3> + <var:p> * <var:A> ; <var:p> := <nat:4> + <var:p> * <var:A> \end{verbatim} Assuming it to be that $ <var:A> = <var:X> $ ahead of evaluating this code segment , then we see $ <var:p> = <nat:3> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + <nat:4> $ after set of instructions is done executing . \end{theorem} \begin{proof} The course of logic for this program is clear using typical Hoare reasoning . After , we have \[ \begin{tabular} {rcl} \{ <var:A> = <var:X> \} & <var:p> := <nat:3> & \{ <var:A> = <var:X> \land <var:p> = <nat:3> \} \\ \{ <var:A> = <var:X> \land <var:p> = <nat:3> \} & <var:p> := <nat:3> + <var:p> * <var:A> & \{ <var:A> = <var:X> \land <var:p> = <nat:3> * <var:X> + <nat:3> \} \end{tabular} Taking another step toward the subsequent bit of code contained in our series of commands , \[ \begin{tabular} {rcl} \{ <var:A> = <var:X> \} & <var:p> := <nat:3> & \{ <var:A> = <var:X> \land <var:p> = <nat:3> \} \end{tabular} This is guaranteed with the variable assignmet inference rule defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:A> = <var:X> }} <var:p> := <nat:3> ; <var:p> := <nat:3> + <var:p> * <var:A> ; <var:p> := <nat:4> + <var:p> * <var:A> {{ <var:p> = <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:X> /\ <var:p> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:X> /\ <var:p> = <nat:3> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:X> /\ <var:p> = <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 