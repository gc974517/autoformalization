\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:2> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:W> ; <var:T2> := <nat:6> ; <var:T2> := <var:T2> * <var:W> ; <var:T2> := <var:T2> * <var:W> ; <var:T3> := <nat:4> ; <var:T3> := <var:T3> * <var:W> ; <var:T3> := <var:T3> * <var:W> ; <var:T3> := <var:T3> * <var:W> ; <var:P> := <var:T3> ; <var:P> := <var:P> + <var:T2> ; <var:P> := <var:P> + <var:T1> ; <var:P> := <var:P> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Assuming given every positive coefficients $ <var:e> $ $ <var:W> = <var:e> $ before evaluating our series of commands it must be that $ <var:P> = <nat:4> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for the code can be seen with Hoare reasoning . Following , we have \begin{eqnarray} \{ <var:W> = <var:e> \} \, <var:T0> := <nat:2> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \} \\ \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \} \, <var:T1> := <nat:1> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> \} \\ \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> \} \, <var:T1> := <var:T1> * <var:W> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \} \\ \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \} \, <var:T2> := <nat:6> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> \} \\ \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> \} \, <var:T2> := <var:T2> * <var:W> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> \} \\ \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> \} \, <var:T2> := <var:T2> * <var:W> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> ^ <nat:2> \} \\ \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> ^ <nat:2> \} \, <var:T3> := <nat:4> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> ^ <nat:2> \land <var:T3> = <nat:4> \} \\ \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> ^ <nat:2> \land <var:T3> = <nat:4> \} \, <var:T3> := <var:T3> * <var:W> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> ^ <nat:2> \land <var:T3> = <nat:4> * <var:e> \} \\ \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> ^ <nat:2> \land <var:T3> = <nat:4> * <var:e> \} \, <var:T3> := <var:T3> * <var:W> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> ^ <nat:2> \land <var:T3> = <nat:4> * <var:e> ^ <nat:2> \} \\ \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> ^ <nat:2> \land <var:T3> = <nat:4> * <var:e> ^ <nat:2> \} \, <var:T3> := <var:T3> * <var:W> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> ^ <nat:2> \land <var:T3> = <nat:4> * <var:e> ^ <nat:3> \} \\ \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> ^ <nat:2> \land <var:T3> = <nat:4> * <var:e> ^ <nat:3> \} \, <var:P> := <var:T3> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> ^ <nat:2> \land <var:P> = <nat:4> * <var:e> ^ <nat:3> \} \\ \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:T2> = <nat:6> * <var:e> ^ <nat:2> \land <var:P> = <nat:4> * <var:e> ^ <nat:3> \} \, <var:P> := <var:P> + <var:T2> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \land <var:T1> = <nat:1> * <var:e> \land <var:P> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> \} \end{eqnarray} This is known to be sound through the variable update scheme defined by standard Hoare reasoning . Looking at the proceeding line of code contained in our list of commands , \begin{eqnarray} \{ <var:W> = <var:e> \} \, <var:T0> := <nat:2> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \} \end{eqnarray} This is rigorously given through the binding law defined in Hoare techniques . Observing the proceeding bit of code contained in the segment of code , we have \begin{eqnarray} \{ <var:W> = <var:e> \} \, <var:T0> := <nat:2> \, \{ <var:W> = <var:e> \land <var:T0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T0> := <nat:2> ; <var:T1> := <nat:1> ; <var:T1> := <var:T1> * <var:W> ; <var:T2> := <nat:6> ; <var:T2> := <var:T2> * <var:W> ; <var:T2> := <var:T2> * <var:W> ; <var:T3> := <nat:4> ; <var:T3> := <var:T3> * <var:W> ; <var:T3> := <var:T3> * <var:W> ; <var:T3> := <var:T3> * <var:W> ; <var:P> := <var:T3> ; <var:P> := <var:P> + <var:T2> ; <var:P> := <var:P> + <var:T1> ; <var:P> := <var:P> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:W> = <var:e> }} <def:poly> {{ <var:P> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:T0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:1> * <var:e> /\ <var:T2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:1> * <var:e> /\ <var:T2> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:1> * <var:e> /\ <var:T2> = <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:1> * <var:e> /\ <var:T2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:T3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:1> * <var:e> /\ <var:T2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:T3> = <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:1> * <var:e> /\ <var:T2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:T3> = <nat:4> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:1> * <var:e> /\ <var:T2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:T3> = <nat:4> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:1> * <var:e> /\ <var:T2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:P> = <nat:4> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:T0> = <nat:2> /\ <var:T1> = <nat:1> * <var:e> /\ <var:P> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:T0> = <nat:2> /\ <var:P> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:e> /\ <var:P> = <nat:4> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 