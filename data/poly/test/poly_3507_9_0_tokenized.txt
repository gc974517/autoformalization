\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:1> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:N> ; <var:p2> := <nat:8> ; <var:p2> := <var:p2> * <var:N> ; <var:p2> := <var:p2> * <var:N> ; <var:Z> := <var:p2> ; <var:Z> := <var:Z> + <var:p1> ; <var:Z> := <var:Z> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Allow it to hold that $ <var:N> = <var:C> $ with some integers $ <var:C> $ before interpreting our code segment then we have $ <var:Z> = <nat:8> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:1> $ when segment of code is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:C> \} \\ <var:p0> := <nat:1> ; \\ \{ <var:N> = <var:C> \land <var:p0> = <nat:1> \} \\ <var:p1> := <nat:1> ; \\ \{ <var:N> = <var:C> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \} \\ <var:p1> := <var:p1> * <var:N> ; \\ \{ <var:N> = <var:C> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:C> \} \\ <var:p2> := <nat:8> ; \\ \{ <var:N> = <var:C> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:C> \land <var:p2> = <nat:8> \} \\ <var:p2> := <var:p2> * <var:N> ; \\ \{ <var:N> = <var:C> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:C> \land <var:p2> = <nat:8> \times <var:C> \} \\ <var:p2> := <var:p2> * <var:N> ; \\ \{ <var:N> = <var:C> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:C> \land <var:p2> = <nat:8> \times <var:C> ^ <nat:2> \} \\ <var:Z> := <var:p2> ; \\ \{ <var:N> = <var:C> \land <var:p0> = <nat:1> \land <var:p1> = <nat:1> \times <var:C> \land <var:Z> = <nat:8> \times <var:C> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:p1> ; \\ \{ <var:N> = <var:C> \land <var:p0> = <nat:1> \land <var:Z> = <nat:8> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> \} \\ <var:Z> := <var:Z> + <var:p0> \\ \{ <var:N> = <var:C> \land <var:Z> = <nat:8> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:1> \} \end{eqnarray} Using usual Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p0> := <nat:1> ; <var:p1> := <nat:1> ; <var:p1> := <var:p1> * <var:N> ; <var:p2> := <nat:8> ; <var:p2> := <var:p2> * <var:N> ; <var:p2> := <var:p2> * <var:N> ; <var:Z> := <var:p2> ; <var:Z> := <var:Z> + <var:p1> ; <var:Z> := <var:Z> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:N> = <var:C> }} <def:poly> {{ <var:Z> = <nat:8> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:p0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:C> /\ <var:p2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:C> /\ <var:p2> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:C> /\ <var:p2> = <nat:8> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:p0> = <nat:1> /\ <var:p1> = <nat:1> * <var:C> /\ <var:Z> = <nat:8> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:p0> = <nat:1> /\ <var:Z> = <nat:8> * <var:C> ^ <nat:2> + <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:Z> = <nat:8> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 