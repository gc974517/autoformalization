\begin{document} \begin{theorem} Consider a code such that \begin{verbatim} <var:N1> := <var:I> ; <var:N2> := <var:N1> * <var:I> ; <var:N3> := <var:N2> * <var:I> ; <var:N0> := <nat:8> ; <var:N1> := <var:N1> * <nat:7> ; <var:N2> := <var:N2> * <nat:1> ; <var:N3> := <var:N3> * <nat:8> ; <var:o> := <var:N3> <var:o> := <var:o> + <var:N2> <var:o> := <var:o> + <var:N1> <var:o> := <var:o> + <var:N0> \end{verbatim} Allow that we have $ <var:I> = <var:X> $ before interpreting the series of commands it follows that $ <var:o> = <nat:8> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:7> \cdot <var:X> + <nat:8> $ . \end{theorem} \begin{proof} Applying typical Hoare logic returns : \begin{eqnarray} \{ <var:I> = <var:X> \} \\ <var:N1> := <var:I> ; \\ \{ <var:I> = <var:X> \land <var:N1> = <var:X> \} \\ <var:N2> := <var:N1> * <var:I> ; \\ \{ <var:I> = <var:X> \land <var:N1> = <var:X> \land <var:N2> = <var:X> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:I> ; \\ \{ <var:I> = <var:X> \land <var:N1> = <var:X> \land <var:N2> = <var:X> ^ <nat:2> \land <var:N3> = <var:X> ^ <nat:3> \} \\ <var:N0> := <nat:8> ; \\ \{ <var:I> = <var:X> \land <var:N1> = <var:X> \land <var:N2> = <var:X> ^ <nat:2> \land <var:N3> = <var:X> ^ <nat:3> \land <var:N0> = <nat:8> \} \\ <var:N1> := <var:N1> * <nat:7> ; \\ \{ <var:I> = <var:X> \land <var:N1> = <nat:7> * <var:X> \land <var:N2> = <var:X> ^ <nat:2> \land <var:N3> = <var:X> ^ <nat:3> \land <var:N0> = <nat:8> \} \\ <var:N2> := <var:N2> * <nat:1> ; \\ \{ <var:I> = <var:X> \land <var:N1> = <nat:7> * <var:X> \land <var:N2> = <nat:1> * <var:X> ^ <nat:2> \land <var:N3> = <var:X> ^ <nat:3> \land <var:N0> = <nat:8> \} \\ <var:N3> := <var:N3> * <nat:8> ; \\ \{ <var:I> = <var:X> \land <var:N1> = <nat:7> * <var:X> \land <var:N2> = <nat:1> * <var:X> ^ <nat:2> \land <var:N3> = <nat:8> * <var:X> ^ <nat:3> \land <var:N0> = <nat:8> \} \\ <var:o> := <var:N3> \\ \{ <var:I> = <var:X> \land <var:N1> = <nat:7> * <var:X> \land <var:N2> = <nat:1> * <var:X> ^ <nat:2> \land <var:N0> = <nat:8> \land <var:o> = <nat:8> * <var:X> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:N2> \\ \{ <var:I> = <var:X> \land <var:N1> = <nat:7> * <var:X> \land <var:N0> = <nat:8> \land <var:o> = <nat:8> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:N1> \\ \{ <var:I> = <var:X> \land <var:N0> = <nat:8> \land <var:o> = <nat:8> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:7> * <var:X> \} \\ <var:o> := <var:o> + <var:N0> \\ \{ <var:I> = <var:X> \land <var:o> = <nat:8> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:8> \} \end{eqnarray} Given the preceding argument , the code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:I> = <var:X> }} <var:N1> := <var:I> ; <var:N2> := <var:N1> * <var:I> ; <var:N3> := <var:N2> * <var:I> ; <var:N0> := <nat:8> ; <var:N1> := <var:N1> * <nat:7> ; <var:N2> := <var:N2> * <nat:1> ; <var:N3> := <var:N3> * <nat:8> ; <var:o> := <var:N3> <var:o> := <var:o> + <var:N2> <var:o> := <var:o> + <var:N1> <var:o> := <var:o> + <var:N0> {{ <var:o> = <nat:8> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:N1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:N1> = <var:X> /\ <var:N2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:N1> = <var:X> /\ <var:N2> = <var:X> ^ <nat:2> /\ <var:N3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:N1> = <var:X> /\ <var:N2> = <var:X> ^ <nat:2> /\ <var:N3> = <var:X> ^ <nat:3> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:N1> = <nat:7> * <var:X> /\ <var:N2> = <var:X> ^ <nat:2> /\ <var:N3> = <var:X> ^ <nat:3> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:N1> = <nat:7> * <var:X> /\ <var:N2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:N3> = <var:X> ^ <nat:3> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:N1> = <nat:7> * <var:X> /\ <var:N2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:N3> = <nat:8> * <var:X> ^ <nat:3> /\ <var:N0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:N1> = <nat:7> * <var:X> /\ <var:N2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:N0> = <nat:8> /\ <var:o> = <nat:8> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:N1> = <nat:7> * <var:X> /\ <var:N0> = <nat:8> /\ <var:o> = <nat:8> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:N0> = <nat:8> /\ <var:o> = <nat:8> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:7> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:X> /\ <var:o> = <nat:8> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:7> * <var:X> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 