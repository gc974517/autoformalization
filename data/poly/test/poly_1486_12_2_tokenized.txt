\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M> := <nat:1> ; <var:M> := <nat:1> + <var:M> * <var:t> ; <var:M> := <nat:3> + <var:M> * <var:t> ; <var:M> := <nat:1> + <var:M> * <var:t> ; <var:M> := <nat:2> + <var:M> * <var:t> ; <var:M> := <nat:4> + <var:M> * <var:t> ; <var:M> := <nat:3> + <var:M> * <var:t> ; <var:M> := <nat:1> + <var:M> * <var:t> ; <var:M> := <var:M> * <var:t> ; <var:M> := <nat:1> + <var:M> * <var:t> ; <var:M> := <nat:4> + <var:M> * <var:t> ; <var:M> := <nat:4> + <var:M> * <var:t> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> in \emph{Imp} . Allow $ <var:t> = <var:l> $ prior to running our series of commands it holds that we see $ <var:M> = <nat:1> * <var:l> ^ <nat:11> + <nat:1> * <var:l> ^ <nat:10> + <nat:3> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:8> + <nat:2> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> $ when code segment has terminated . \end{theorem} \begin{proof} Demonstrating correctness of the segment of code is clear using typical Hoare techniques . Going forward , we have the variable assignmet statement \verb | <var:M> := <nat:1> ; | . This line transfers the precondition $ \{ <var:t> = <var:l> \} $ toward $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> \} $ . This is shown using the assignment rule in typical Hoare logic . Immediately after , the code \verb | <var:M> := <nat:1> + <var:M> * <var:t> ; | . This forwards the condition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> \} $ into $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> + <nat:1> \} $ . Going to the next step , the binding line yielding $ <nat:3> + <var:M> * <var:t> $ as $ <var:M>$ . This code transfers $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> + <nat:1> \} $ toward the condition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> \} $ . Moving on to the next step , the assignment code \verb | <var:M> := <nat:1> + <var:M> * <var:t> ; | . This line transfers the condition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> \} $ to the condition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> \} $ . Taking another step toward the upcoming line of code found in our segment of code , the binding line \verb | <var:M> := <nat:2> + <var:M> * <var:t> ; | . This command redefines $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> \} $ as the condition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:2> \} $ . This is ensured by the assignment law of standard Hoare techniques . Stepping forward , we have the binding command \verb | <var:M> := <nat:4> + <var:M> * <var:t> ; | . This redefines the condition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:2> \} $ into $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:4> \} $ . This is known to be sound through the assignment scheme of Hoare logic . Moving forward to the next piece of code contained in our set of commands , we have the environment update code giving $ <nat:3> + <var:M> * <var:t> $ into $ <var:M>$ . This code forwards $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:4> \} $ as $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:3> \} $ . This is known to be sound through the assignment inference rule of usual Hoare reasoning . Advancing to the following line in the code , we see the variable binding command yielding $ <nat:1> + <var:M> * <var:t> $ toward $ <var:M>$ . This command moves the precondition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:3> \} $ into the postcondition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> \} $ . This is shown to be logically sound with the assignment scheme of Hoare techniques . Taking another step toward the upcoming statement seen in our list of instructions , we see the environment update statement letting $ <var:M> * <var:t> $ toward $ <var:M>$ . This forwards the condition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> \} $ as $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:8> + <nat:1> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + \} $ . This is deduced with the assignment law from standard Hoare reasoning . Shifting focus toward the subsequent statement found in the code segment , we see the environment update statement \verb | <var:M> := <nat:1> + <var:M> * <var:t> ; | . This redefines the condition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:8> + <nat:1> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + \} $ toward the postcondition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:8> + <nat:3> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> \} $ . This is guaranteed through the assignment scheme given by standard Hoare techniques . Taking another step toward the subsequent piece of code found in our code segment , we see the binding line \verb | <var:M> := <nat:4> + <var:M> * <var:t> ; | . This moves the condition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:8> + <nat:3> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> \} $ as the condition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:10> + <nat:1> * <var:l> ^ <nat:9> + <nat:3> * <var:l> ^ <nat:8> + <nat:1> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> + <nat:4> \} $ . Stepping forward , the environment update statement binding $ <nat:4> + <var:M> * <var:t$ toward $ <var:M>$ . This forwards the condition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:10> + <nat:1> * <var:l> ^ <nat:9> + <nat:3> * <var:l> ^ <nat:8> + <nat:1> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> + <nat:4> \} $ to the condition $ \{ <var:t> = <var:l> \land <var:M> = <nat:1> * <var:l> ^ <nat:11> + <nat:1> * <var:l> ^ <nat:10> + <nat:3> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:8> + <nat:2> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:1> ; <var:M> := <nat:1> + <var:M> * <var:t> ; <var:M> := <nat:3> + <var:M> * <var:t> ; <var:M> := <nat:1> + <var:M> * <var:t> ; <var:M> := <nat:2> + <var:M> * <var:t> ; <var:M> := <nat:4> + <var:M> * <var:t> ; <var:M> := <nat:3> + <var:M> * <var:t> ; <var:M> := <nat:1> + <var:M> * <var:t> ; <var:M> := <var:M> * <var:t> ; <var:M> := <nat:1> + <var:M> * <var:t> ; <var:M> := <nat:4> + <var:M> * <var:t> ; <var:M> := <nat:4> + <var:M> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:t> = <var:l> }} <def:poly> {{ <var:M> = <nat:1> * <var:l> ^ <nat:11> + <nat:1> * <var:l> ^ <nat:10> + <nat:3> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:8> + <nat:2> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:M> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:M> = <nat:1> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:M> = <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:M> = <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:M> = <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:M> = <nat:1> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:M> = <nat:1> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:M> = <nat:1> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:M> = <nat:1> * <var:l> ^ <nat:8> + <nat:1> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:M> = <nat:1> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:8> + <nat:3> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:M> = <nat:1> * <var:l> ^ <nat:10> + <nat:1> * <var:l> ^ <nat:9> + <nat:3> * <var:l> ^ <nat:8> + <nat:1> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:l> /\ <var:M> = <nat:1> * <var:l> ^ <nat:11> + <nat:1> * <var:l> ^ <nat:10> + <nat:3> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:8> + <nat:2> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 