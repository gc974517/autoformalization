\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:3> ; <var:I1> := <nat:1> ; <var:I1> := <var:I1> * <var:g> ; <var:I6> := <nat:4> ; <var:I6> := <var:I6> * <var:g> ; <var:I6> := <var:I6> * <var:g> ; <var:I6> := <var:I6> * <var:g> ; <var:I6> := <var:I6> * <var:g> ; <var:I6> := <var:I6> * <var:g> ; <var:I6> := <var:I6> * <var:g> ; <var:d> := <var:I6> ; <var:d> := <var:d> + <var:I1> ; <var:d> := <var:d> + <var:I0> \end{verbatim} Allow --- letting natural numbers $ <var:N> $ --- it to be that $ <var:g> = <var:N> $ prior to interpreting our series of instructions , it follows that we have $ <var:d> = <nat:4> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the list of instructions can be seen using usual Hoare reasoning . Moving on to the next step , we have the variable update line \verb | <var:I0> := <nat:3> ; | . This moves the condition $ \{ <var:g> = <var:N> \} $ toward the condition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \} $ . This is rigorously given using the assignment scheme defined by typical Hoare logic . Advancing on , we have the variable update line yielding $ <nat:1> $ to $ <var:I1>$ . This takes the precondition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \} $ to the condition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> \} $ . Moving on to the following command contained in our code segment , the variable assignmet command \verb | <var:I1> := <var:I1> * <var:g> ; | . This redefines the precondition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> \} $ into $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \} $ . Going forward , the variable assignmet code letting $ <nat:4> $ to $ <var:I6>$ . This advances the precondition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \} $ to $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> \} $ . This is guaranteed using the assignment law obtained from usual Hoare logic . Moving forward , we have the variable assignmet command \verb | <var:I6> := <var:I6> * <var:g> ; | . This command moves $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> \} $ to $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> * <var:N> \} $ . Focusing on the upcoming statement found in the code segment , the line \verb | <var:I6> := <var:I6> * <var:g> ; | . This redefines the precondition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> * <var:N> \} $ into the postcondition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> * <var:N> ^ <nat:2> \} $ . This is ensured through the assignment rule in Hoare techniques . Immediately after , we see the environment update line \verb | <var:I6> := <var:I6> * <var:g> ; | . This line takes the precondition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> * <var:N> ^ <nat:2> \} $ into the condition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> * <var:N> ^ <nat:3> \} $ . Moving onward , we have the assignment line \verb | <var:I6> := <var:I6> * <var:g> ; | . This line transfers the condition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> * <var:N> ^ <nat:3> \} $ into the postcondition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> * <var:N> ^ <nat:4> \} $ . Stepping forward , we see the variable binding statement assigning $ <var:I6> * <var:g> $ into $ <var:I6>$ . This command transfers the precondition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> * <var:N> ^ <nat:4> \} $ into $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> * <var:N> ^ <nat:5> \} $ . This is sound through the assignment rule from usual Hoare logic . Taking a look at the subsequent command found in our list of instructions , we see the binding statement \verb | <var:I6> := <var:I6> * <var:g> ; | . This line transfers the precondition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> * <var:N> ^ <nat:5> \} $ toward $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> * <var:N> ^ <nat:6> \} $ . This is sound with the assignment inference rule in Hoare reasoning . Shifting focus toward the next line contained in the segment of code , the environment update statement assigning $ <var:I6> $ into $ <var:d>$ . This command advances the precondition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:I6> = <nat:4> * <var:N> ^ <nat:6> \} $ into the condition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:d> = <nat:4> * <var:N> ^ <nat:6> \} $ . This is shown to be logically sound through the assignment inference rule given by Hoare reasoning . Taking a look at the upcoming command in our code segment , we have the variable assignmet line \verb | <var:d> := <var:d> + <var:I1> ; | . This command moves the condition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:I1> = <nat:1> * <var:N> \land <var:d> = <nat:4> * <var:N> ^ <nat:6> \} $ as the condition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:d> = <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> \} $ . This is sound by the assignment inference rule given by usual Hoare techniques . Moving forward to the next statement contained in our list of instructions , we have the variable update statement defining $ <var:d> + <var:I0$ to $ <var:d>$ . This statement takes the condition $ \{ <var:g> = <var:N> \land <var:I0> = <nat:3> \land <var:d> = <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> \} $ as the postcondition $ \{ <var:g> = <var:N> \land <var:d> = <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I6> : string := " <var:I6> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:g> = <var:N> }} <var:I0> := <nat:3> ; <var:I1> := <nat:1> ; <var:I1> := <var:I1> * <var:g> ; <var:I6> := <nat:4> ; <var:I6> := <var:I6> * <var:g> ; <var:I6> := <var:I6> * <var:g> ; <var:I6> := <var:I6> * <var:g> ; <var:I6> := <var:I6> * <var:g> ; <var:I6> := <var:I6> * <var:g> ; <var:I6> := <var:I6> * <var:g> ; <var:d> := <var:I6> ; <var:d> := <var:d> + <var:I1> ; <var:d> := <var:d> + <var:I0> {{ <var:d> = <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:1> * <var:N> /\ <var:I6> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:1> * <var:N> /\ <var:I6> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:1> * <var:N> /\ <var:I6> = <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:1> * <var:N> /\ <var:I6> = <nat:4> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:1> * <var:N> /\ <var:I6> = <nat:4> * <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:1> * <var:N> /\ <var:I6> = <nat:4> * <var:N> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:1> * <var:N> /\ <var:I6> = <nat:4> * <var:N> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:1> * <var:N> /\ <var:d> = <nat:4> * <var:N> ^ <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:I0> = <nat:3> /\ <var:d> = <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:N> /\ <var:d> = <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 