\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:U1> := <var:c> ; <var:U2> := <var:U1> * <var:c> ; <var:U3> := <var:U2> * <var:c> ; <var:U4> := <var:U3> * <var:c> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:5> ; <var:U4> := <var:U4> * <nat:9> ; <var:i> := <var:U4> <var:i> := <var:i> + <var:U2> <var:i> := <var:i> + <var:U1> <var:i> := <var:i> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Allow $ <var:c> = <var:F> $ for every positive integers $ <var:F> $ before the evaluation of the list of commands , it holds that we see $ <var:i> = <nat:9> \cdot <var:F> ^ <nat:4> + <nat:5> \cdot <var:F> ^ <nat:2> + <nat:4> \cdot <var:F> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for our set of instructions is given by standard Hoare techniques . Further , we have \begin{verbatim} { <var:c> = <var:F> } <var:U1> := <var:c> { <var:c> = <var:F> \land <var:U1> = <var:F> } { <var:c> = <var:F> \land <var:U1> = <var:F> } <var:U2> := <var:U1> * <var:c> { <var:c> = <var:F> \land <var:U1> = <var:F> \land <var:U2> = <var:F> ^ <nat:2> } { <var:c> = <var:F> \land <var:U1> = <var:F> \land <var:U2> = <var:F> ^ <nat:2> } <var:U3> := <var:U2> * <var:c> { <var:c> = <var:F> \land <var:U1> = <var:F> \land <var:U2> = <var:F> ^ <nat:2> \land <var:U3> = <var:F> ^ <nat:3> } \end{verbatim} Shifting focus toward the next statements in our code , \begin{verbatim} { <var:c> = <var:F> } <var:U1> := <var:c> { <var:c> = <var:F> \land <var:U1> = <var:F> } { <var:c> = <var:F> \land <var:U1> = <var:F> } <var:U2> := <var:U1> * <var:c> { <var:c> = <var:F> \land <var:U1> = <var:F> \land <var:U2> = <var:F> ^ <nat:2> } { <var:c> = <var:F> \land <var:U1> = <var:F> \land <var:U2> = <var:F> ^ <nat:2> } <var:U3> := <var:U2> * <var:c> { <var:c> = <var:F> \land <var:U1> = <var:F> \land <var:U2> = <var:F> ^ <nat:2> \land <var:U3> = <var:F> ^ <nat:3> } { <var:c> = <var:F> \land <var:U1> = <var:F> \land <var:U2> = <var:F> ^ <nat:2> \land <var:U3> = <var:F> ^ <nat:3> } <var:U4> := <var:U3> * <var:c> { <var:c> = <var:F> \land <var:U1> = <var:F> \land <var:U2> = <var:F> ^ <nat:2> \land <var:U3> = <var:F> ^ <nat:3> \land <var:U4> = <var:F> ^ <nat:4> } \end{verbatim} This is known to be sound through the assignment rule obtained from typical Hoare reasoning . Advancing , \begin{verbatim} { <var:c> = <var:F> } <var:U1> := <var:c> { <var:c> = <var:F> \land <var:U1> = <var:F> } { <var:c> = <var:F> \land <var:U1> = <var:F> } <var:U2> := <var:U1> * <var:c> { <var:c> = <var:F> \land <var:U1> = <var:F> \land <var:U2> = <var:F> ^ <nat:2> } { <var:c> = <var:F> \land <var:U1> = <var:F> \land <var:U2> = <var:F> ^ <nat:2> } <var:U3> := <var:U2> * <var:c> { <var:c> = <var:F> \land <var:U1> = <var:F> \land <var:U2> = <var:F> ^ <nat:2> \land <var:U3> = <var:F> ^ <nat:3> } { <var:c> = <var:F> \land <var:U1> = <var:F> \land <var:U2> = <var:F> ^ <nat:2> \land <var:U3> = <var:F> ^ <nat:3> } <var:U4> := <var:U3> * <var:c> { <var:c> = <var:F> \land <var:U1> = <var:F> \land <var:U2> = <var:F> ^ <nat:2> \land <var:U3> = <var:F> ^ <nat:3> \land <var:U4> = <var:F> ^ <nat:4> } \end{verbatim} This is shown to be logically sound using the variable update law from typical Hoare techniques . Moving on , we see \begin{verbatim} { <var:c> = <var:F> } <var:U1> := <var:c> { <var:c> = <var:F> \land <var:U1> = <var:F> } \end{verbatim} This is known to be sound with the variable binding inference rule defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <var:U4> : string := " <var:U4> " . Definition <def:poly> := <var:U1> := <var:c> ; <var:U2> := <var:U1> * <var:c> ; <var:U3> := <var:U2> * <var:c> ; <var:U4> := <var:U3> * <var:c> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:5> ; <var:U4> := <var:U4> * <nat:9> ; <var:i> := <var:U4> <var:i> := <var:i> + <var:U2> <var:i> := <var:i> + <var:U1> <var:i> := <var:i> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:c> = <var:F> }} <def:poly> {{ <var:i> = <nat:9> * <var:F> ^ <nat:4> + <nat:5> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:U1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:U1> = <var:F> /\ <var:U2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:U1> = <var:F> /\ <var:U2> = <var:F> ^ <nat:2> /\ <var:U3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:U1> = <var:F> /\ <var:U2> = <var:F> ^ <nat:2> /\ <var:U3> = <var:F> ^ <nat:3> /\ <var:U4> = <var:F> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:U1> = <var:F> /\ <var:U2> = <var:F> ^ <nat:2> /\ <var:U3> = <var:F> ^ <nat:3> /\ <var:U4> = <var:F> ^ <nat:4> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:U1> = <nat:4> * <var:F> /\ <var:U2> = <var:F> ^ <nat:2> /\ <var:U3> = <var:F> ^ <nat:3> /\ <var:U4> = <var:F> ^ <nat:4> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:U1> = <nat:4> * <var:F> /\ <var:U2> = <nat:5> * <var:F> ^ <nat:2> /\ <var:U3> = <var:F> ^ <nat:3> /\ <var:U4> = <var:F> ^ <nat:4> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:U1> = <nat:4> * <var:F> /\ <var:U2> = <nat:5> * <var:F> ^ <nat:2> /\ <var:U3> = <var:F> ^ <nat:3> /\ <var:U4> = <nat:9> * <var:F> ^ <nat:4> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:U1> = <nat:4> * <var:F> /\ <var:U2> = <nat:5> * <var:F> ^ <nat:2> /\ <var:U3> = <var:F> ^ <nat:3> /\ <var:U0> = <nat:1> /\ <var:i> = <nat:9> * <var:F> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:U1> = <nat:4> * <var:F> /\ <var:U0> = <nat:1> /\ <var:i> = <nat:9> * <var:F> ^ <nat:4> + <nat:5> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:U0> = <nat:1> /\ <var:i> = <nat:9> * <var:F> ^ <nat:4> + <nat:5> * <var:F> ^ <nat:2> + <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:F> /\ <var:i> = <nat:9> * <var:F> ^ <nat:4> + <nat:5> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 