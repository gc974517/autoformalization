\begin{document} \begin{theorem} Take a series of instructions as \begin{verbatim} <var:U0> := <nat:5> ; <var:F> := <var:U0> \end{verbatim} Assuming that we have $ <var:o> = <var:V> $ before the execution of our set of instructions it must be that $ <var:F> = <nat:5> $ once program has finished . \end{theorem} \begin{proof} The course of logic for the code is evident with typical Hoare logic . Shifting focus toward the following lines of codeseen in the code , we have \begin{eqnarray} \{ <var:o> = <var:V> \} \, <var:U0> := <nat:5> \, \{ <var:o> = <var:V> \land <var:U0> = <nat:5> \} \\ \{ <var:o> = <var:V> \land <var:U0> = <nat:5> \} \, <var:F> := <var:U0\, \{ <var:o> = <var:V> \land <var:F> = <nat:5> \} \end{eqnarray} This is deduced by the variable assignmet scheme from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:o> = <var:V> }} <var:U0> := <nat:5> ; <var:F> := <var:U0> {{ <var:F> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:V> /\ <var:F> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 