\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:3> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:C> ; <var:f> := <var:d1> ; <var:f> := <var:f> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:C> = <var:F> $ ahead of running this list of commands , it follows that we have $ <var:f> = <nat:2> \times <var:F> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the segment of code is evident using typical Hoare logic . Shifting focus toward the upcoming lines in the code segment , we have \[ \begin{tabular} {rcl} \{ <var:C> = <var:F> \} & <var:d0> := <nat:3> & \{ <var:C> = <var:F> \land <var:d0> = <nat:3> \} \\ \{ <var:C> = <var:F> \land <var:d0> = <nat:3> \} & <var:d1> := <nat:2> & \{ <var:C> = <var:F> \land <var:d0> = <nat:3> \land <var:d1> = <nat:2> \} \end{tabular} This is ensured by the variable assignmet rule defined in typical Hoare logic . Immediately after , we have \[ \begin{tabular} {rcl} \{ <var:C> = <var:F> \} & <var:d0> := <nat:3> & \{ <var:C> = <var:F> \land <var:d0> = <nat:3> \} \end{tabular} This is known to be sound through the variable update scheme given by typical Hoare techniques . Shifting focus toward the following bit of code in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:C> = <var:F> \} & <var:d0> := <nat:3> & \{ <var:C> = <var:F> \land <var:d0> = <nat:3> \} \end{tabular} This is given by the variable assignmet scheme defined by Hoare reasoning . Jumping to the next line in the set of instructions , \[ \begin{tabular} {rcl} \{ <var:C> = <var:F> \} & <var:d0> := <nat:3> & \{ <var:C> = <var:F> \land <var:d0> = <nat:3> \} \end{tabular} This is shown to be logically sound with the variable update scheme given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d0> := <nat:3> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:C> ; <var:f> := <var:d1> ; <var:f> := <var:f> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:C> = <var:F> }} <def:poly> {{ <var:f> = <nat:2> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:F> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:F> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:F> /\ <var:d0> = <nat:3> /\ <var:d1> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:F> /\ <var:d0> = <nat:3> /\ <var:f> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:F> /\ <var:f> = <nat:2> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 