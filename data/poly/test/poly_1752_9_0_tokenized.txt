\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:3> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:Z> ; <var:G2> := <nat:4> ; <var:G2> := <var:G2> * <var:Z> ; <var:G2> := <var:G2> * <var:Z> ; <var:m> := <var:G2> ; <var:m> := <var:m> + <var:G1> ; <var:m> := <var:m> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:Z> = <var:Y> $ ahead of the execution of this list of commands , it follows that we see $ <var:m> = <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:3> $ once code has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:Y> \} \\ <var:G0> := <nat:3> ; \\ \{ <var:Z> = <var:Y> \land <var:G0> = <nat:3> \} \\ <var:G1> := <nat:1> ; \\ \{ <var:Z> = <var:Y> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> \} \\ <var:G1> := <var:G1> * <var:Z> ; \\ \{ <var:Z> = <var:Y> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> * <var:Y> \} \\ <var:G2> := <nat:4> ; \\ \{ <var:Z> = <var:Y> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> * <var:Y> \land <var:G2> = <nat:4> \} \\ <var:G2> := <var:G2> * <var:Z> ; \\ \{ <var:Z> = <var:Y> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> * <var:Y> \land <var:G2> = <nat:4> * <var:Y> \} \\ <var:G2> := <var:G2> * <var:Z> ; \\ \{ <var:Z> = <var:Y> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> * <var:Y> \land <var:G2> = <nat:4> * <var:Y> ^ <nat:2> \} \\ <var:m> := <var:G2> ; \\ \{ <var:Z> = <var:Y> \land <var:G0> = <nat:3> \land <var:G1> = <nat:1> * <var:Y> \land <var:m> = <nat:4> * <var:Y> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:G1> ; \\ \{ <var:Z> = <var:Y> \land <var:G0> = <nat:3> \land <var:m> = <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> \} \\ <var:m> := <var:m> + <var:G0> \\ \{ <var:Z> = <var:Y> \land <var:m> = <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> \} \end{eqnarray} Utilizing Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <def:poly> := <var:G0> := <nat:3> ; <var:G1> := <nat:1> ; <var:G1> := <var:G1> * <var:Z> ; <var:G2> := <nat:4> ; <var:G2> := <var:G2> * <var:Z> ; <var:G2> := <var:G2> * <var:Z> ; <var:m> := <var:G2> ; <var:m> := <var:m> + <var:G1> ; <var:m> := <var:m> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:Z> = <var:Y> }} <def:poly> {{ <var:m> = <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> * <var:Y> /\ <var:G2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> * <var:Y> /\ <var:G2> = <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> * <var:Y> /\ <var:G2> = <nat:4> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:G0> = <nat:3> /\ <var:G1> = <nat:1> * <var:Y> /\ <var:m> = <nat:4> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:G0> = <nat:3> /\ <var:m> = <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:m> = <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 