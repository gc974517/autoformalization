\begin{document} \begin{theorem} We define the following program such that \begin{verbatim} <var:V0> := <nat:1> ; <var:V1> := <nat:5> ; <var:V1> := <var:V1> * <var:q> ; <var:V2> := <nat:3> ; <var:V2> := <var:V2> * <var:q> ; <var:V2> := <var:V2> * <var:q> ; <var:l> := <var:V2> ; <var:l> := <var:l> + <var:V1> ; <var:l> := <var:l> + <var:V0> \end{verbatim} Allowing given natural coefficients $ <var:Q> $ that $ <var:q> = <var:Q> $ prior to running the series of commands it follows that $ <var:l> = <nat:3> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing Hoare logic results in : \begin{eqnarray} \{ <var:q> = <var:Q> \} \\ <var:V0> := <nat:1> ; \\ \{ <var:q> = <var:Q> \land <var:V0> = <nat:1> \} \\ <var:V1> := <nat:5> ; \\ \{ <var:q> = <var:Q> \land <var:V0> = <nat:1> \land <var:V1> = <nat:5> \} \\ <var:V1> := <var:V1> * <var:q> ; \\ \{ <var:q> = <var:Q> \land <var:V0> = <nat:1> \land <var:V1> = <nat:5> \times <var:Q> \} \\ <var:V2> := <nat:3> ; \\ \{ <var:q> = <var:Q> \land <var:V0> = <nat:1> \land <var:V1> = <nat:5> \times <var:Q> \land <var:V2> = <nat:3> \} \\ <var:V2> := <var:V2> * <var:q> ; \\ \{ <var:q> = <var:Q> \land <var:V0> = <nat:1> \land <var:V1> = <nat:5> \times <var:Q> \land <var:V2> = <nat:3> \times <var:Q> \} \\ <var:V2> := <var:V2> * <var:q> ; \\ \{ <var:q> = <var:Q> \land <var:V0> = <nat:1> \land <var:V1> = <nat:5> \times <var:Q> \land <var:V2> = <nat:3> \times <var:Q> ^ <nat:2> \} \\ <var:l> := <var:V2> ; \\ \{ <var:q> = <var:Q> \land <var:V0> = <nat:1> \land <var:V1> = <nat:5> \times <var:Q> \land <var:l> = <nat:3> \times <var:Q> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:V1> ; \\ \{ <var:q> = <var:Q> \land <var:V0> = <nat:1> \land <var:l> = <nat:3> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> \} \end{eqnarray} Allowing evaluating the series of commands gives : \begin{eqnarray} <var:l> := <var:l> + <var:V0> \\ \{ <var:q> = <var:Q> \land <var:l> = <nat:3> \times <var:Q> ^ <nat:2> + <nat:5> \times <var:Q> + <nat:1> \} \end{eqnarray} Therefore , this set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:q> = <var:Q> }} <var:V0> := <nat:1> ; <var:V1> := <nat:5> ; <var:V1> := <var:V1> * <var:q> ; <var:V2> := <nat:3> ; <var:V2> := <var:V2> * <var:q> ; <var:V2> := <var:V2> * <var:q> ; <var:l> := <var:V2> ; <var:l> := <var:l> + <var:V1> ; <var:l> := <var:l> + <var:V0> {{ <var:l> = <nat:3> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:5> * <var:Q> /\ <var:V2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:5> * <var:Q> /\ <var:V2> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:5> * <var:Q> /\ <var:V2> = <nat:3> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:5> * <var:Q> /\ <var:l> = <nat:3> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:V0> = <nat:1> /\ <var:l> = <nat:3> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:Q> /\ <var:l> = <nat:3> * <var:Q> ^ <nat:2> + <nat:5> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 