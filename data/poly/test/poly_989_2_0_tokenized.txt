\begin{document} \begin{theorem} We define a segment of code : \begin{verbatim} <var:Y0> := <nat:7> ; <var:w> := <var:Y0> \end{verbatim} Assuming --- for any positive integer coefficients $ <var:E> $ --- it to hold that $ <var:c> = <var:E> $ prior to the execution of our program it must be that $ <var:w> = <nat:7> $ after series of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:E> \} \\ <var:Y0> := <nat:7> ; \\ \{ <var:c> = <var:E> \land <var:Y0> = <nat:7> \} \\ <var:w> := <var:Y0> \\ \{ <var:c> = <var:E> \land <var:w> = <nat:7> \} \end{eqnarray} Applying typical Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:c> = <var:E> }} <var:Y0> := <nat:7> ; <var:w> := <var:Y0> {{ <var:w> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:w> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 