\begin{document} \begin{theorem} Consider the following code : \begin{verbatim} <var:N1> := <var:U> ; <var:N2> := <var:N1> * <var:U> ; <var:N3> := <var:N2> * <var:U> ; <var:N4> := <var:N3> * <var:U> ; <var:N5> := <var:N4> * <var:U> ; <var:N0> := <nat:2> ; <var:N2> := <var:N2> * <nat:3> ; <var:N3> := <var:N3> * <nat:3> ; <var:N5> := <var:N5> * <nat:2> ; <var:Y> := <var:N5> <var:Y> := <var:Y> + <var:N3> <var:Y> := <var:Y> + <var:N2> <var:Y> := <var:Y> + <var:N0> \end{verbatim} Allowing --- for any $ <var:L> \in \mathbb{N} $ --- it to be that $ <var:U> = <var:L> $ prior to evaluating the code , it follows that we have $ <var:Y> = <nat:2> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:2> $ once series of instructions has finished executing . \end{theorem} \begin{proof} The argument for the list of commands is done through typical Hoare logic . Focusing on the proceeding lines of codecontained in our code , \begin{eqnarray} \{ <var:U> = <var:L> \} \, <var:N1> := <var:U> \, \{ <var:U> = <var:L> \land <var:N1> = <var:L> \} \\ \{ <var:U> = <var:L> \land <var:N1> = <var:L> \} \, <var:N2> := <var:N1> * <var:U> \, \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <var:L> ^ <nat:2> \} \\ \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <var:L> ^ <nat:2> \} \, <var:N3> := <var:N2> * <var:U> \, \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <var:L> ^ <nat:2> \land <var:N3> = <var:L> ^ <nat:3> \} \\ \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <var:L> ^ <nat:2> \land <var:N3> = <var:L> ^ <nat:3> \} \, <var:N4> := <var:N3> * <var:U> \, \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <var:L> ^ <nat:2> \land <var:N3> = <var:L> ^ <nat:3> \land <var:N4> = <var:L> ^ <nat:4> \} \\ \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <var:L> ^ <nat:2> \land <var:N3> = <var:L> ^ <nat:3> \land <var:N4> = <var:L> ^ <nat:4> \} \, <var:N5> := <var:N4> * <var:U> \, \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <var:L> ^ <nat:2> \land <var:N3> = <var:L> ^ <nat:3> \land <var:N4> = <var:L> ^ <nat:4> \land <var:N5> = <var:L> ^ <nat:5> \} \\ \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <var:L> ^ <nat:2> \land <var:N3> = <var:L> ^ <nat:3> \land <var:N4> = <var:L> ^ <nat:4> \land <var:N5> = <var:L> ^ <nat:5> \} \, <var:N0> := <nat:2> \, \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <var:L> ^ <nat:2> \land <var:N3> = <var:L> ^ <nat:3> \land <var:N4> = <var:L> ^ <nat:4> \land <var:N5> = <var:L> ^ <nat:5> \land <var:N0> = <nat:2> \} \\ \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <var:L> ^ <nat:2> \land <var:N3> = <var:L> ^ <nat:3> \land <var:N4> = <var:L> ^ <nat:4> \land <var:N5> = <var:L> ^ <nat:5> \land <var:N0> = <nat:2> \} \, <var:N2> := <var:N2> * <nat:3> \, \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <nat:3> \times <var:L> ^ <nat:2> \land <var:N3> = <var:L> ^ <nat:3> \land <var:N4> = <var:L> ^ <nat:4> \land <var:N5> = <var:L> ^ <nat:5> \land <var:N0> = <nat:2> \} \\ \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <nat:3> \times <var:L> ^ <nat:2> \land <var:N3> = <var:L> ^ <nat:3> \land <var:N4> = <var:L> ^ <nat:4> \land <var:N5> = <var:L> ^ <nat:5> \land <var:N0> = <nat:2> \} \, <var:N3> := <var:N3> * <nat:3> \, \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <nat:3> \times <var:L> ^ <nat:2> \land <var:N3> = <nat:3> \times <var:L> ^ <nat:3> \land <var:N4> = <var:L> ^ <nat:4> \land <var:N5> = <var:L> ^ <nat:5> \land <var:N0> = <nat:2> \} \end{eqnarray} Considering the next piece of code in our program , we have \begin{eqnarray} \{ <var:U> = <var:L> \} \, <var:N1> := <var:U> \, \{ <var:U> = <var:L> \land <var:N1> = <var:L> \} \end{eqnarray} This is given by the scheme given in Hoare techniques . Jumping to the next line found in our series of instructions , \begin{eqnarray} \{ <var:U> = <var:L> \} \, <var:N1> := <var:U> \, \{ <var:U> = <var:L> \land <var:N1> = <var:L> \} \end{eqnarray} This is sound through the assignment law obtained from usual Hoare reasoning . Further , \begin{eqnarray} \{ <var:U> = <var:L> \} \, <var:N1> := <var:U> \, \{ <var:U> = <var:L> \land <var:N1> = <var:L> \} \\ \{ <var:U> = <var:L> \land <var:N1> = <var:L> \} \, <var:N2> := <var:N1> * <var:U> \, \{ <var:U> = <var:L> \land <var:N1> = <var:L> \land <var:N2> = <var:L> ^ <nat:2> \} \end{eqnarray} This is sound with the rule found in typical Hoare logic . Next , we see \begin{eqnarray} \{ <var:U> = <var:L> \} \, <var:N1> := <var:U> \, \{ <var:U> = <var:L> \land <var:N1> = <var:L> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <var:N4> : string := " <var:N4> " . Definition <var:N5> : string := " <var:N5> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:U> = <var:L> }} <var:N1> := <var:U> ; <var:N2> := <var:N1> * <var:U> ; <var:N3> := <var:N2> * <var:U> ; <var:N4> := <var:N3> * <var:U> ; <var:N5> := <var:N4> * <var:U> ; <var:N0> := <nat:2> ; <var:N2> := <var:N2> * <nat:3> ; <var:N3> := <var:N3> * <nat:3> ; <var:N5> := <var:N5> * <nat:2> ; <var:Y> := <var:N5> <var:Y> := <var:Y> + <var:N3> <var:Y> := <var:Y> + <var:N2> <var:Y> := <var:Y> + <var:N0> {{ <var:Y> = <nat:2> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:N1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:N1> = <var:L> /\ <var:N2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:N1> = <var:L> /\ <var:N2> = <var:L> ^ <nat:2> /\ <var:N3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:N1> = <var:L> /\ <var:N2> = <var:L> ^ <nat:2> /\ <var:N3> = <var:L> ^ <nat:3> /\ <var:N4> = <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:N1> = <var:L> /\ <var:N2> = <var:L> ^ <nat:2> /\ <var:N3> = <var:L> ^ <nat:3> /\ <var:N4> = <var:L> ^ <nat:4> /\ <var:N5> = <var:L> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:N1> = <var:L> /\ <var:N2> = <var:L> ^ <nat:2> /\ <var:N3> = <var:L> ^ <nat:3> /\ <var:N4> = <var:L> ^ <nat:4> /\ <var:N5> = <var:L> ^ <nat:5> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:N1> = <var:L> /\ <var:N2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:N3> = <var:L> ^ <nat:3> /\ <var:N4> = <var:L> ^ <nat:4> /\ <var:N5> = <var:L> ^ <nat:5> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:N1> = <var:L> /\ <var:N2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:N3> = <nat:3> * <var:L> ^ <nat:3> /\ <var:N4> = <var:L> ^ <nat:4> /\ <var:N5> = <var:L> ^ <nat:5> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:N1> = <var:L> /\ <var:N2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:N3> = <nat:3> * <var:L> ^ <nat:3> /\ <var:N4> = <var:L> ^ <nat:4> /\ <var:N5> = <nat:2> * <var:L> ^ <nat:5> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:N1> = <var:L> /\ <var:N2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:N3> = <nat:3> * <var:L> ^ <nat:3> /\ <var:N4> = <var:L> ^ <nat:4> /\ <var:N0> = <nat:2> /\ <var:Y> = <nat:2> * <var:L> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:N1> = <var:L> /\ <var:N2> = <nat:3> * <var:L> ^ <nat:2> /\ <var:N0> = <nat:2> /\ <var:Y> = <nat:2> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:N1> = <var:L> /\ <var:N0> = <nat:2> /\ <var:Y> = <nat:2> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:L> /\ <var:Y> = <nat:2> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 