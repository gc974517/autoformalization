\begin{document} \begin{theorem} Take a list of instructions such that \begin{verbatim} <var:C0> := <nat:7> ; <var:C1> := <nat:3> ; <var:C1> := <var:C1> * <var:Q> ; <var:C2> := <nat:1> ; <var:C2> := <var:C2> * <var:Q> ; <var:C2> := <var:C2> * <var:Q> ; <var:C3> := <nat:4> ; <var:C3> := <var:C3> * <var:Q> ; <var:C3> := <var:C3> * <var:Q> ; <var:C3> := <var:C3> * <var:Q> ; <var:Z> := <var:C3> ; <var:Z> := <var:Z> + <var:C2> ; <var:Z> := <var:Z> + <var:C1> ; <var:Z> := <var:Z> + <var:C0> \end{verbatim} Given , taking $ <var:X> \in \mathbb{Z}^+ $ , it to be that $ <var:Q> = <var:X> $ ahead of executing this set of commands , it holds that we have $ <var:Z> = <nat:4> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:3> \cdot <var:X> + <nat:7> $ . \end{theorem} \begin{proof} The argument for this list of instructions is given by the below decorated code . \begin{eqnarray} \{ <var:Q> = <var:X> \} \\ <var:C0> := <nat:7> ; \\ \{ <var:Q> = <var:X> \land <var:C0> = <nat:7> \} \\ <var:C1> := <nat:3> ; \\ \{ <var:Q> = <var:X> \land <var:C0> = <nat:7> \land <var:C1> = <nat:3> \} \\ <var:C1> := <var:C1> * <var:Q> ; \\ \{ <var:Q> = <var:X> \land <var:C0> = <nat:7> \land <var:C1> = <nat:3> * <var:X> \} \\ <var:C2> := <nat:1> ; \\ \{ <var:Q> = <var:X> \land <var:C0> = <nat:7> \land <var:C1> = <nat:3> * <var:X> \land <var:C2> = <nat:1> \} \\ <var:C2> := <var:C2> * <var:Q> ; \\ \{ <var:Q> = <var:X> \land <var:C0> = <nat:7> \land <var:C1> = <nat:3> * <var:X> \land <var:C2> = <nat:1> * <var:X> \} \\ <var:C2> := <var:C2> * <var:Q> ; \\ \{ <var:Q> = <var:X> \land <var:C0> = <nat:7> \land <var:C1> = <nat:3> * <var:X> \land <var:C2> = <nat:1> * <var:X> ^ <nat:2> \} \\ <var:C3> := <nat:4> ; \\ \{ <var:Q> = <var:X> \land <var:C0> = <nat:7> \land <var:C1> = <nat:3> * <var:X> \land <var:C2> = <nat:1> * <var:X> ^ <nat:2> \land <var:C3> = <nat:4> \} \\ <var:C3> := <var:C3> * <var:Q> ; \\ \{ <var:Q> = <var:X> \land <var:C0> = <nat:7> \land <var:C1> = <nat:3> * <var:X> \land <var:C2> = <nat:1> * <var:X> ^ <nat:2> \land <var:C3> = <nat:4> * <var:X> \} \\ <var:C3> := <var:C3> * <var:Q> ; \\ \{ <var:Q> = <var:X> \land <var:C0> = <nat:7> \land <var:C1> = <nat:3> * <var:X> \land <var:C2> = <nat:1> * <var:X> ^ <nat:2> \land <var:C3> = <nat:4> * <var:X> ^ <nat:2> \} \\ <var:C3> := <var:C3> * <var:Q> ; \\ \{ <var:Q> = <var:X> \land <var:C0> = <nat:7> \land <var:C1> = <nat:3> * <var:X> \land <var:C2> = <nat:1> * <var:X> ^ <nat:2> \land <var:C3> = <nat:4> * <var:X> ^ <nat:3> \} \\ <var:Z> := <var:C3> ; \\ \{ <var:Q> = <var:X> \land <var:C0> = <nat:7> \land <var:C1> = <nat:3> * <var:X> \land <var:C2> = <nat:1> * <var:X> ^ <nat:2> \land <var:Z> = <nat:4> * <var:X> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:C2> ; \\ \{ <var:Q> = <var:X> \land <var:C0> = <nat:7> \land <var:C1> = <nat:3> * <var:X> \land <var:Z> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:C1> ; \\ \{ <var:Q> = <var:X> \land <var:C0> = <nat:7> \land <var:Z> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> \} \\ <var:Z> := <var:Z> + <var:C0> \\ \{ <var:Q> = <var:X> \land <var:Z> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:7> \} \end{eqnarray} Applying standard Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:Q> = <var:X> }} <var:C0> := <nat:7> ; <var:C1> := <nat:3> ; <var:C1> := <var:C1> * <var:Q> ; <var:C2> := <nat:1> ; <var:C2> := <var:C2> * <var:Q> ; <var:C2> := <var:C2> * <var:Q> ; <var:C3> := <nat:4> ; <var:C3> := <var:C3> * <var:Q> ; <var:C3> := <var:C3> * <var:Q> ; <var:C3> := <var:C3> * <var:Q> ; <var:Z> := <var:C3> ; <var:Z> := <var:Z> + <var:C2> ; <var:Z> := <var:Z> + <var:C1> ; <var:Z> := <var:Z> + <var:C0> {{ <var:Z> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:3> * <var:X> /\ <var:C2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:3> * <var:X> /\ <var:C2> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:3> * <var:X> /\ <var:C2> = <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:3> * <var:X> /\ <var:C2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:C3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:3> * <var:X> /\ <var:C2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:3> * <var:X> /\ <var:C2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:3> * <var:X> /\ <var:C2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:3> * <var:X> /\ <var:C2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:Z> = <nat:4> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C0> = <nat:7> /\ <var:C1> = <nat:3> * <var:X> /\ <var:Z> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:C0> = <nat:7> /\ <var:Z> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:X> /\ <var:Z> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 