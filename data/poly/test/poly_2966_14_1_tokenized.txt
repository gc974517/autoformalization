\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:a> ; <var:m2> := <var:m1> * <var:a> ; <var:m3> := <var:m2> * <var:a> ; <var:m4> := <var:m3> * <var:a> ; <var:m0> := <nat:4> ; <var:m1> := <var:m1> * <nat:8> ; <var:m2> := <var:m2> * <nat:5> ; <var:m3> := <var:m3> * <nat:5> ; <var:m4> := <var:m4> * <nat:4> ; <var:v> := <var:m4> <var:v> := <var:v> + <var:m3> <var:v> := <var:v> + <var:m2> <var:v> := <var:v> + <var:m1> <var:v> := <var:v> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:a> = <var:D> $ before evaluating the segment of code , it holds that we see $ <var:v> = <nat:4> \times <var:D> ^ <nat:4> + <nat:5> \times <var:D> ^ <nat:3> + <nat:5> \times <var:D> ^ <nat:2> + <nat:8> \times <var:D> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for the series of commands can be demonstrated through the below decorated list of commands . \begin{eqnarray} \{ <var:a> = <var:D> \} \\ <var:m1> := <var:a> ; \\ \{ <var:a> = <var:D> \land <var:m1> = <var:D> \} \\ <var:m2> := <var:m1> * <var:a> ; \\ \{ <var:a> = <var:D> \land <var:m1> = <var:D> \land <var:m2> = <var:D> ^ <nat:2> \} \\ <var:m3> := <var:m2> * <var:a> ; \\ \{ <var:a> = <var:D> \land <var:m1> = <var:D> \land <var:m2> = <var:D> ^ <nat:2> \land <var:m3> = <var:D> ^ <nat:3> \} \\ <var:m4> := <var:m3> * <var:a> ; \\ \{ <var:a> = <var:D> \land <var:m1> = <var:D> \land <var:m2> = <var:D> ^ <nat:2> \land <var:m3> = <var:D> ^ <nat:3> \land <var:m4> = <var:D> ^ <nat:4> \} \\ <var:m0> := <nat:4> ; \\ \{ <var:a> = <var:D> \land <var:m1> = <var:D> \land <var:m2> = <var:D> ^ <nat:2> \land <var:m3> = <var:D> ^ <nat:3> \land <var:m4> = <var:D> ^ <nat:4> \land <var:m0> = <nat:4> \} \\ <var:m1> := <var:m1> * <nat:8> ; \\ \{ <var:a> = <var:D> \land <var:m1> = <nat:8> * <var:D> \land <var:m2> = <var:D> ^ <nat:2> \land <var:m3> = <var:D> ^ <nat:3> \land <var:m4> = <var:D> ^ <nat:4> \land <var:m0> = <nat:4> \} \\ <var:m2> := <var:m2> * <nat:5> ; \\ \{ <var:a> = <var:D> \land <var:m1> = <nat:8> * <var:D> \land <var:m2> = <nat:5> * <var:D> ^ <nat:2> \land <var:m3> = <var:D> ^ <nat:3> \land <var:m4> = <var:D> ^ <nat:4> \land <var:m0> = <nat:4> \} \\ <var:m3> := <var:m3> * <nat:5> ; \\ \{ <var:a> = <var:D> \land <var:m1> = <nat:8> * <var:D> \land <var:m2> = <nat:5> * <var:D> ^ <nat:2> \land <var:m3> = <nat:5> * <var:D> ^ <nat:3> \land <var:m4> = <var:D> ^ <nat:4> \land <var:m0> = <nat:4> \} \\ <var:m4> := <var:m4> * <nat:4> ; \\ \{ <var:a> = <var:D> \land <var:m1> = <nat:8> * <var:D> \land <var:m2> = <nat:5> * <var:D> ^ <nat:2> \land <var:m3> = <nat:5> * <var:D> ^ <nat:3> \land <var:m4> = <nat:4> * <var:D> ^ <nat:4> \land <var:m0> = <nat:4> \} \\ <var:v> := <var:m4> \\ \{ <var:a> = <var:D> \land <var:m1> = <nat:8> * <var:D> \land <var:m2> = <nat:5> * <var:D> ^ <nat:2> \land <var:m3> = <nat:5> * <var:D> ^ <nat:3> \land <var:m0> = <nat:4> \land <var:v> = <nat:4> * <var:D> ^ <nat:4> \} \\ <var:v> := <var:v> + <var:m3> \\ \{ <var:a> = <var:D> \land <var:m1> = <nat:8> * <var:D> \land <var:m2> = <nat:5> * <var:D> ^ <nat:2> \land <var:m0> = <nat:4> \land <var:v> = <nat:4> * <var:D> ^ <nat:4> + <nat:5> * <var:D> ^ <nat:3> \} \\ <var:v> := <var:v> + <var:m2> \\ \{ <var:a> = <var:D> \land <var:m1> = <nat:8> * <var:D> \land <var:m0> = <nat:4> \land <var:v> = <nat:4> * <var:D> ^ <nat:4> + <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:m1> \\ \{ <var:a> = <var:D> \land <var:m0> = <nat:4> \land <var:v> = <nat:4> * <var:D> ^ <nat:4> + <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:8> * <var:D> \} \\ <var:v> := <var:v> + <var:m0> \\ \{ <var:a> = <var:D> \land <var:v> = <nat:4> * <var:D> ^ <nat:4> + <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:8> * <var:D> + <nat:4> \} \end{eqnarray} The application of Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <var:m4> : string := " <var:m4> " . Definition <def:poly> := <var:m1> := <var:a> ; <var:m2> := <var:m1> * <var:a> ; <var:m3> := <var:m2> * <var:a> ; <var:m4> := <var:m3> * <var:a> ; <var:m0> := <nat:4> ; <var:m1> := <var:m1> * <nat:8> ; <var:m2> := <var:m2> * <nat:5> ; <var:m3> := <var:m3> * <nat:5> ; <var:m4> := <var:m4> * <nat:4> ; <var:v> := <var:m4> <var:v> := <var:v> + <var:m3> <var:v> := <var:v> + <var:m2> <var:v> := <var:v> + <var:m1> <var:v> := <var:v> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:a> = <var:D> }} <def:poly> {{ <var:v> = <nat:4> * <var:D> ^ <nat:4> + <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:8> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:m1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:m1> = <var:D> /\ <var:m2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:m1> = <var:D> /\ <var:m2> = <var:D> ^ <nat:2> /\ <var:m3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:m1> = <var:D> /\ <var:m2> = <var:D> ^ <nat:2> /\ <var:m3> = <var:D> ^ <nat:3> /\ <var:m4> = <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:m1> = <var:D> /\ <var:m2> = <var:D> ^ <nat:2> /\ <var:m3> = <var:D> ^ <nat:3> /\ <var:m4> = <var:D> ^ <nat:4> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:m1> = <nat:8> * <var:D> /\ <var:m2> = <var:D> ^ <nat:2> /\ <var:m3> = <var:D> ^ <nat:3> /\ <var:m4> = <var:D> ^ <nat:4> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:m1> = <nat:8> * <var:D> /\ <var:m2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:m3> = <var:D> ^ <nat:3> /\ <var:m4> = <var:D> ^ <nat:4> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:m1> = <nat:8> * <var:D> /\ <var:m2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:m3> = <nat:5> * <var:D> ^ <nat:3> /\ <var:m4> = <var:D> ^ <nat:4> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:m1> = <nat:8> * <var:D> /\ <var:m2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:m3> = <nat:5> * <var:D> ^ <nat:3> /\ <var:m4> = <nat:4> * <var:D> ^ <nat:4> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:m1> = <nat:8> * <var:D> /\ <var:m2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:m3> = <nat:5> * <var:D> ^ <nat:3> /\ <var:m0> = <nat:4> /\ <var:v> = <nat:4> * <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:m1> = <nat:8> * <var:D> /\ <var:m2> = <nat:5> * <var:D> ^ <nat:2> /\ <var:m0> = <nat:4> /\ <var:v> = <nat:4> * <var:D> ^ <nat:4> + <nat:5> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:m1> = <nat:8> * <var:D> /\ <var:m0> = <nat:4> /\ <var:v> = <nat:4> * <var:D> ^ <nat:4> + <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:m0> = <nat:4> /\ <var:v> = <nat:4> * <var:D> ^ <nat:4> + <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:v> = <nat:4> * <var:D> ^ <nat:4> + <nat:5> * <var:D> ^ <nat:3> + <nat:5> * <var:D> ^ <nat:2> + <nat:8> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 