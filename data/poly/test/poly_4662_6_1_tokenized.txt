\begin{document} \begin{theorem} Take a list of commands as follows \begin{verbatim} <var:B1> := <var:v> ; <var:B2> := <var:B1> * <var:v> ; <var:B0> := <nat:2> ; <var:B2> := <var:B2> * <nat:3> ; <var:t> := <var:B2> <var:t> := <var:t> + <var:B0> \end{verbatim} Assume it to be that $ <var:v> = <var:u> $ ahead of interpreting this set of commands it holds that we have $ <var:t> = <nat:3> * <var:u> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the list of instructions is accomplished using typical Hoare reasoning . Honing in on the proceeding steps seen in the set of commands , we see \begin{eqnarray} \{ <var:v> = <var:u> \} \, <var:B1> := <var:v> \, \{ <var:v> = <var:u> \land <var:B1> = <var:u> \} \\ \{ <var:v> = <var:u> \land <var:B1> = <var:u> \} \, <var:B2> := <var:B1> * <var:v> \, \{ <var:v> = <var:u> \land <var:B1> = <var:u> \land <var:B2> = <var:u> ^ <nat:2> \} \\ \{ <var:v> = <var:u> \land <var:B1> = <var:u> \land <var:B2> = <var:u> ^ <nat:2> \} \, <var:B0> := <nat:2> \, \{ <var:v> = <var:u> \land <var:B1> = <var:u> \land <var:B2> = <var:u> ^ <nat:2> \land <var:B0> = <nat:2> \} \\ \{ <var:v> = <var:u> \land <var:B1> = <var:u> \land <var:B2> = <var:u> ^ <nat:2> \land <var:B0> = <nat:2> \} \, <var:B2> := <var:B2> * <nat:3> \, \{ <var:v> = <var:u> \land <var:B1> = <var:u> \land <var:B2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:B0> = <nat:2> \} \\ \{ <var:v> = <var:u> \land <var:B1> = <var:u> \land <var:B2> = <nat:3> \cdot <var:u> ^ <nat:2> \land <var:B0> = <nat:2> \} \, <var:t> := <var:B2\, \{ <var:v> = <var:u> \land <var:B1> = <var:u> \land <var:B0> = <nat:2> \land <var:t> = <nat:3> \cdot <var:u> ^ <nat:2> \} \end{eqnarray} This is shown through the environment update rule found in typical Hoare techniques . Moving forward to the next step , \begin{eqnarray} \{ <var:v> = <var:u> \} \, <var:B1> := <var:v> \, \{ <var:v> = <var:u> \land <var:B1> = <var:u> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:v> = <var:u> }} <var:B1> := <var:v> ; <var:B2> := <var:B1> * <var:v> ; <var:B0> := <nat:2> ; <var:B2> := <var:B2> * <nat:3> ; <var:t> := <var:B2> <var:t> := <var:t> + <var:B0> {{ <var:t> = <nat:3> * <var:u> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:B1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:B1> = <var:u> /\ <var:B2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:B1> = <var:u> /\ <var:B2> = <var:u> ^ <nat:2> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:B1> = <var:u> /\ <var:B2> = <nat:3> * <var:u> ^ <nat:2> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:B1> = <var:u> /\ <var:B0> = <nat:2> /\ <var:t> = <nat:3> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:u> /\ <var:t> = <nat:3> * <var:u> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 