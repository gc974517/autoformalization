\begin{document} \begin{theorem} Define the following series of commands as follows \begin{verbatim} <var:A0> := <nat:1> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:Z> ; <var:A2> := <nat:8> ; <var:A2> := <var:A2> * <var:Z> ; <var:A2> := <var:A2> * <var:Z> ; <var:A3> := <nat:9> ; <var:A3> := <var:A3> * <var:Z> ; <var:A3> := <var:A3> * <var:Z> ; <var:A3> := <var:A3> * <var:Z> ; <var:D> := <var:A3> ; <var:D> := <var:D> + <var:A2> ; <var:D> := <var:D> + <var:A1> ; <var:D> := <var:D> + <var:A0> \end{verbatim} Allow $ <var:Z> = <var:U> $ before interpreting our list of instructions it holds that $ <var:D> = <nat:9> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:1> $ . \end{theorem} \begin{proof} The proof of this list of instructions is given through standard Hoare reasoning . Considering the following steps seen in the list of instructions , we have \begin{eqnarray} \{ <var:Z> = <var:U> \} \, <var:A0> := <nat:1> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \} \\ \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \} \, <var:A1> := <nat:6> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> \} \\ \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> \} \, <var:A1> := <var:A1> * <var:Z> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \} \\ \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \} \, <var:A2> := <nat:8> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> \} \\ \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> \} \, <var:A2> := <var:A2> * <var:Z> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> \} \\ \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> \} \, <var:A2> := <var:A2> * <var:Z> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> ^ <nat:2> \} \\ \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> ^ <nat:2> \} \, <var:A3> := <nat:9> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> ^ <nat:2> \land <var:A3> = <nat:9> \} \\ \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> ^ <nat:2> \land <var:A3> = <nat:9> \} \, <var:A3> := <var:A3> * <var:Z> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> ^ <nat:2> \land <var:A3> = <nat:9> * <var:U> \} \\ \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> ^ <nat:2> \land <var:A3> = <nat:9> * <var:U> \} \, <var:A3> := <var:A3> * <var:Z> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> ^ <nat:2> \land <var:A3> = <nat:9> * <var:U> ^ <nat:2> \} \\ \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> ^ <nat:2> \land <var:A3> = <nat:9> * <var:U> ^ <nat:2> \} \, <var:A3> := <var:A3> * <var:Z> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> ^ <nat:2> \land <var:A3> = <nat:9> * <var:U> ^ <nat:3> \} \\ \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> ^ <nat:2> \land <var:A3> = <nat:9> * <var:U> ^ <nat:3> \} \, <var:D> := <var:A3> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> ^ <nat:2> \land <var:D> = <nat:9> * <var:U> ^ <nat:3> \} \\ \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:A2> = <nat:8> * <var:U> ^ <nat:2> \land <var:D> = <nat:9> * <var:U> ^ <nat:3> \} \, <var:D> := <var:D> + <var:A2> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \land <var:A1> = <nat:6> * <var:U> \land <var:D> = <nat:9> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> \} \end{eqnarray} This is known to be sound with the variable binding inference rule obtained from standard Hoare techniques . Stepping forward , we have \begin{eqnarray} \{ <var:Z> = <var:U> \} \, <var:A0> := <nat:1> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \} \end{eqnarray} Considering the upcoming line contained in our set of instructions , we have \begin{eqnarray} \{ <var:Z> = <var:U> \} \, <var:A0> := <nat:1> \, \{ <var:Z> = <var:U> \land <var:A0> = <nat:1> \} \end{eqnarray} This is deduced by the variable binding law defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:Z> = <var:U> }} <var:A0> := <nat:1> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:Z> ; <var:A2> := <nat:8> ; <var:A2> := <var:A2> * <var:Z> ; <var:A2> := <var:A2> * <var:Z> ; <var:A3> := <nat:9> ; <var:A3> := <var:A3> * <var:Z> ; <var:A3> := <var:A3> * <var:Z> ; <var:A3> := <var:A3> * <var:Z> ; <var:D> := <var:A3> ; <var:D> := <var:D> + <var:A2> ; <var:D> := <var:D> + <var:A1> ; <var:D> := <var:D> + <var:A0> {{ <var:D> = <nat:9> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:6> * <var:U> /\ <var:A2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:6> * <var:U> /\ <var:A2> = <nat:8> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:6> * <var:U> /\ <var:A2> = <nat:8> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:6> * <var:U> /\ <var:A2> = <nat:8> * <var:U> ^ <nat:2> /\ <var:A3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:6> * <var:U> /\ <var:A2> = <nat:8> * <var:U> ^ <nat:2> /\ <var:A3> = <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:6> * <var:U> /\ <var:A2> = <nat:8> * <var:U> ^ <nat:2> /\ <var:A3> = <nat:9> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:6> * <var:U> /\ <var:A2> = <nat:8> * <var:U> ^ <nat:2> /\ <var:A3> = <nat:9> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:6> * <var:U> /\ <var:A2> = <nat:8> * <var:U> ^ <nat:2> /\ <var:D> = <nat:9> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:6> * <var:U> /\ <var:D> = <nat:9> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:A0> = <nat:1> /\ <var:D> = <nat:9> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> + <nat:6> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:U> /\ <var:D> = <nat:9> * <var:U> ^ <nat:3> + <nat:8> * <var:U> ^ <nat:2> + <nat:6> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 