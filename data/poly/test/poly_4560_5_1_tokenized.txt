\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:g> ; <var:b0> := <nat:6> ; <var:b1> := <var:b1> * <nat:2> ; <var:J> := <var:b1> <var:J> := <var:J> + <var:b0> \end{verbatim} Given , given every natural numbers $ <var:P> $ , it to be that $ <var:g> = <var:P> $ ahead of the evaluation of the set of commands it holds that we see $ <var:J> = <nat:2> \times <var:P> + <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions can be shown through typical Hoare reasoning . Moving forward to the next step , we have the assignment statement yielding $ <var:g> $ to $ <var:b1>$ . This takes the precondition $ \{ <var:g> = <var:P> \} $ into the postcondition $ \{ <var:g> = <var:P> \land <var:b1> = <var:P> \} $ . This is given using the assignment rule given by standard Hoare techniques . Advancing on , the variable assignmet code \verb | <var:b0> := <nat:6> ; | . This code advances the condition $ \{ <var:g> = <var:P> \land <var:b1> = <var:P> \} $ to the condition $ \{ <var:g> = <var:P> \land <var:b1> = <var:P> \land <var:b0> = <nat:6> \} $ . Looking at the subsequent line of code contained in our program , the variable binding statement \verb | <var:b1> := <var:b1> * <nat:2> ; | . This redefines $ \{ <var:g> = <var:P> \land <var:b1> = <var:P> \land <var:b0> = <nat:6> \} $ toward $ \{ <var:g> = <var:P> \land <var:b1> = <nat:2> \times <var:P> \land <var:b0> = <nat:6> \} $ . Moving forward to the upcoming command contained in the segment of code , we see the binding code \verb | <var:J> := <var:b1> | . This statement moves $ \{ <var:g> = <var:P> \land <var:b1> = <nat:2> \times <var:P> \land <var:b0> = <nat:6> \} $ to the condition $ \{ <var:g> = <var:P> \land <var:b0> = <nat:6> \land <var:J> = <nat:2> \times <var:P> \} $ . This is deduced by the assignment scheme found in standard Hoare techniques . Moving forward to the next step seen in our code segment , we have the environment update line \verb | <var:J> := <var:J> + <var:b0> | . This moves the condition $ \{ <var:g> = <var:P> \land <var:b0> = <nat:6> \land <var:J> = <nat:2> \times <var:P> \} $ toward the postcondition $ \{ <var:g> = <var:P> \land <var:J> = <nat:2> \times <var:P> + <nat:6> \} $ . This is sound with the assignment rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:g> = <var:P> }} <var:b1> := <var:g> ; <var:b0> := <nat:6> ; <var:b1> := <var:b1> * <nat:2> ; <var:J> := <var:b1> <var:J> := <var:J> + <var:b0> {{ <var:J> = <nat:2> * <var:P> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:b1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:b1> = <var:P> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:b1> = <nat:2> * <var:P> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:b0> = <nat:6> /\ <var:J> = <nat:2> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:P> /\ <var:J> = <nat:2> * <var:P> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 