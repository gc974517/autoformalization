\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:j0> := <nat:7> ; <var:j1> := <nat:5> ; <var:j1> := <var:j1> * <var:f> ; <var:j2> := <nat:4> ; <var:j2> := <var:j2> * <var:f> ; <var:j2> := <var:j2> * <var:f> ; <var:j3> := <nat:2> ; <var:j3> := <var:j3> * <var:f> ; <var:j3> := <var:j3> * <var:f> ; <var:j3> := <var:j3> * <var:f> ; <var:R> := <var:j3> ; <var:R> := <var:R> + <var:j2> ; <var:R> := <var:R> + <var:j1> ; <var:R> := <var:R> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> in \emph{Imp} . Given it to hold that $ <var:f> = <var:Z> $ given all positive integers $ <var:Z> $ ahead of the execution of the set of commands , it follows that we have $ <var:R> = <nat:2> \cdot <var:Z> ^ <nat:3> + <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:5> \cdot <var:Z> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for the series of commands is accomplished through standard Hoare techniques . Moving onward , we see \verb | { <var:f> = <var:Z> } <var:j0> := <nat:7> { <var:f> = <var:Z> \land <var:j0> = <nat:7> } | , \verb | { <var:f> = <var:Z> \land <var:j0> = <nat:7> } <var:j1> := <nat:5> { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> } | , \verb | { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> } <var:j1> := <var:j1> * <var:f> { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> } | , \verb | { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> } <var:j2> := <nat:4> { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> } | , \verb | { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> } <var:j2> := <var:j2> * <var:f> { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> \times <var:Z> } | and \verb | { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> \times <var:Z> } <var:j2> := <var:j2> * <var:f> { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> \times <var:Z> ^ <nat:2> } | . Further , \verb | { <var:f> = <var:Z> } <var:j0> := <nat:7> { <var:f> = <var:Z> \land <var:j0> = <nat:7> } | , \verb | { <var:f> = <var:Z> \land <var:j0> = <nat:7> } <var:j1> := <nat:5> { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> } | , \verb | { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> } <var:j1> := <var:j1> * <var:f> { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> } | , \verb | { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> } <var:j2> := <nat:4> { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> } | , \verb | { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> } <var:j2> := <var:j2> * <var:f> { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> \times <var:Z> } | , \verb | { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> \times <var:Z> } <var:j2> := <var:j2> * <var:f> { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> \times <var:Z> ^ <nat:2> } | , \verb | { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> \times <var:Z> ^ <nat:2> } <var:j3> := <nat:2> { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> \times <var:Z> ^ <nat:2> \land <var:j3> = <nat:2> } | and \verb | { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> \times <var:Z> ^ <nat:2> \land <var:j3> = <nat:2> } <var:j3> := <var:j3> * <var:f> { <var:f> = <var:Z> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \times <var:Z> \land <var:j2> = <nat:4> \times <var:Z> ^ <nat:2> \land <var:j3> = <nat:2> \times <var:Z> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <def:poly> := <var:j0> := <nat:7> ; <var:j1> := <nat:5> ; <var:j1> := <var:j1> * <var:f> ; <var:j2> := <nat:4> ; <var:j2> := <var:j2> * <var:f> ; <var:j2> := <var:j2> * <var:f> ; <var:j3> := <nat:2> ; <var:j3> := <var:j3> * <var:f> ; <var:j3> := <var:j3> * <var:f> ; <var:j3> := <var:j3> * <var:f> ; <var:R> := <var:j3> ; <var:R> := <var:R> + <var:j2> ; <var:R> := <var:R> + <var:j1> ; <var:R> := <var:R> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:f> = <var:Z> }} <def:poly> {{ <var:R> = <nat:2> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:Z> /\ <var:j2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:Z> /\ <var:j2> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:Z> /\ <var:j2> = <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:Z> /\ <var:j2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:j3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:Z> /\ <var:j2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:j3> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:Z> /\ <var:j2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:j3> = <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:Z> /\ <var:j2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:j3> = <nat:2> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:Z> /\ <var:j2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:R> = <nat:2> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:Z> /\ <var:R> = <nat:2> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:j0> = <nat:7> /\ <var:R> = <nat:2> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Z> /\ <var:R> = <nat:2> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 