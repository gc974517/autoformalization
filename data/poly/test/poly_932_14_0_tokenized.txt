\begin{document} \begin{theorem} Consider a list of instructions such that \begin{verbatim} <var:s0> := <nat:1> ; <var:s1> := <nat:7> ; <var:s1> := <var:s1> * <var:l> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:l> ; <var:s2> := <var:s2> * <var:l> ; <var:s3> := <nat:7> ; <var:s3> := <var:s3> * <var:l> ; <var:s3> := <var:s3> * <var:l> ; <var:s3> := <var:s3> * <var:l> ; <var:f> := <var:s3> ; <var:f> := <var:f> + <var:s2> ; <var:f> := <var:f> + <var:s1> ; <var:f> := <var:f> + <var:s0> \end{verbatim} Given $ <var:l> = <var:H> $ ahead of executing our list of instructions then $ <var:f> = <nat:7> \cdot <var:H> ^ <nat:3> + <nat:3> \cdot <var:H> ^ <nat:2> + <nat:7> \cdot <var:H> + <nat:1> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques gives : \begin{eqnarray} \{ <var:l> = <var:H> \} \\ <var:s0> := <nat:1> ; \\ \{ <var:l> = <var:H> \land <var:s0> = <nat:1> \} \\ <var:s1> := <nat:7> ; \\ \{ <var:l> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:7> \} \\ <var:s1> := <var:s1> * <var:l> ; \\ \{ <var:l> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:7> * <var:H> \} \\ <var:s2> := <nat:3> ; \\ \{ <var:l> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:7> * <var:H> \land <var:s2> = <nat:3> \} \\ <var:s2> := <var:s2> * <var:l> ; \\ \{ <var:l> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:7> * <var:H> \land <var:s2> = <nat:3> * <var:H> \} \\ <var:s2> := <var:s2> * <var:l> ; \\ \{ <var:l> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:7> * <var:H> \land <var:s2> = <nat:3> * <var:H> ^ <nat:2> \} \\ <var:s3> := <nat:7> ; \\ \{ <var:l> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:7> * <var:H> \land <var:s2> = <nat:3> * <var:H> ^ <nat:2> \land <var:s3> = <nat:7> \} \\ <var:s3> := <var:s3> * <var:l> ; \\ \{ <var:l> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:7> * <var:H> \land <var:s2> = <nat:3> * <var:H> ^ <nat:2> \land <var:s3> = <nat:7> * <var:H> \} \\ <var:s3> := <var:s3> * <var:l> ; \\ \{ <var:l> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:7> * <var:H> \land <var:s2> = <nat:3> * <var:H> ^ <nat:2> \land <var:s3> = <nat:7> * <var:H> ^ <nat:2> \} \\ <var:s3> := <var:s3> * <var:l> ; \\ \{ <var:l> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:7> * <var:H> \land <var:s2> = <nat:3> * <var:H> ^ <nat:2> \land <var:s3> = <nat:7> * <var:H> ^ <nat:3> \} \\ <var:f> := <var:s3> ; \\ \{ <var:l> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:7> * <var:H> \land <var:s2> = <nat:3> * <var:H> ^ <nat:2> \land <var:f> = <nat:7> * <var:H> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:s2> ; \\ \{ <var:l> = <var:H> \land <var:s0> = <nat:1> \land <var:s1> = <nat:7> * <var:H> \land <var:f> = <nat:7> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:s1> ; \\ \{ <var:l> = <var:H> \land <var:s0> = <nat:1> \land <var:f> = <nat:7> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:7> * <var:H> \} \\ <var:f> := <var:f> + <var:s0> \\ \{ <var:l> = <var:H> \land <var:f> = <nat:7> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:7> * <var:H> + <nat:1> \} \end{eqnarray} Considering the preceding argument , this list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:l> = <var:H> }} <var:s0> := <nat:1> ; <var:s1> := <nat:7> ; <var:s1> := <var:s1> * <var:l> ; <var:s2> := <nat:3> ; <var:s2> := <var:s2> * <var:l> ; <var:s2> := <var:s2> * <var:l> ; <var:s3> := <nat:7> ; <var:s3> := <var:s3> * <var:l> ; <var:s3> := <var:s3> * <var:l> ; <var:s3> := <var:s3> * <var:l> ; <var:f> := <var:s3> ; <var:f> := <var:f> + <var:s2> ; <var:f> := <var:f> + <var:s1> ; <var:f> := <var:f> + <var:s0> {{ <var:f> = <nat:7> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:7> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:7> * <var:H> /\ <var:s2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:7> * <var:H> /\ <var:s2> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:7> * <var:H> /\ <var:s2> = <nat:3> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:7> * <var:H> /\ <var:s2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:s3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:7> * <var:H> /\ <var:s2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:s3> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:7> * <var:H> /\ <var:s2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:s3> = <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:7> * <var:H> /\ <var:s2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:s3> = <nat:7> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:7> * <var:H> /\ <var:s2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:f> = <nat:7> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:7> * <var:H> /\ <var:f> = <nat:7> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:s0> = <nat:1> /\ <var:f> = <nat:7> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:f> = <nat:7> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:7> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 