\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as \begin{verbatim} <var:L> := <nat:1> ; <var:L> := <nat:1> + <var:L> * <var:f> ; <var:L> := <nat:3> + <var:L> * <var:f> ; <var:L> := <nat:4> + <var:L> * <var:f> ; <var:L> := <nat:3> + <var:L> * <var:f> \end{verbatim} Assuming it to be that $ <var:f> = <var:M> $ for all positive integers $ <var:M> $ prior to evaluating this list of instructions , it must be that we see $ <var:L> = <nat:1> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions can be seen using standard Hoare logic . Moving on to the next step , we see the variable update command \verb | <var:L> := <nat:1> ; | . This forwards the condition $ \{ <var:f> = <var:M> \} $ toward the condition $ \{ <var:f> = <var:M> \land <var:L> = <nat:1> \} $ . This is shown to be logically sound using the assignment scheme from Hoare logic . Honing in on the subsequent line of code seen in the list of commands , the statement letting $ <nat:1> + <var:L> * <var:f> $ to $ <var:L>$ . This statement advances the condition $ \{ <var:f> = <var:M> \land <var:L> = <nat:1> \} $ as the postcondition $ \{ <var:f> = <var:M> \land <var:L> = <nat:1> \times <var:M> + <nat:1> \} $ . Stepping forward , the assignment line \verb | <var:L> := <nat:3> + <var:L> * <var:f> ; | . This code transfers the condition $ \{ <var:f> = <var:M> \land <var:L> = <nat:1> \times <var:M> + <nat:1> \} $ to the postcondition $ \{ <var:f> = <var:M> \land <var:L> = <nat:1> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:3> \} $ . This is sound through the assignment scheme from typical Hoare techniques . Stepping through , we have the binding line \verb | <var:L> := <nat:4> + <var:L> * <var:f> ; | . This redefines the condition $ \{ <var:f> = <var:M> \land <var:L> = <nat:1> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:3> \} $ to the condition $ \{ <var:f> = <var:M> \land <var:L> = <nat:1> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:4> \} $ . Taking another step toward the subsequent piece of code seen in the series of commands , we have the environment update code \verb | <var:L> := <nat:3> + <var:L> * <var:f> | . This line takes the precondition $ \{ <var:f> = <var:M> \land <var:L> = <nat:1> \times <var:M> ^ <nat:3> + <nat:1> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:4> \} $ as the postcondition $ \{ <var:f> = <var:M> \land <var:L> = <nat:1> \times <var:M> ^ <nat:4> + <nat:1> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:f> = <var:M> }} <var:L> := <nat:1> ; <var:L> := <nat:1> + <var:L> * <var:f> ; <var:L> := <nat:3> + <var:L> * <var:f> ; <var:L> := <nat:4> + <var:L> * <var:f> ; <var:L> := <nat:3> + <var:L> * <var:f> {{ <var:L> = <nat:1> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:L> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:L> = <nat:1> * <var:M> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:L> = <nat:1> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:L> = <nat:1> * <var:M> ^ <nat:3> + <nat:1> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:L> = <nat:1> * <var:M> ^ <nat:4> + <nat:1> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 