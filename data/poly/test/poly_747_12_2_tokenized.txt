\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D> := <nat:4> ; <var:D> := <nat:1> + <var:D> * <var:F> ; <var:D> := <var:D> * <var:F> ; <var:D> := <nat:3> + <var:D> * <var:F> ; <var:D> := <nat:4> + <var:D> * <var:F> ; <var:D> := <nat:4> + <var:D> * <var:F> ; <var:D> := <nat:3> + <var:D> * <var:F> ; <var:D> := <nat:4> + <var:D> * <var:F> ; <var:D> := <var:D> * <var:F> ; <var:D> := <nat:4> + <var:D> * <var:F> ; <var:D> := <nat:4> + <var:D> * <var:F> ; <var:D> := <nat:4> + <var:D> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Assume , taking whole numbers $ <var:E> $ , that we have $ <var:F> = <var:E> $ prior to the evaluation of the code , then $ <var:D> = <nat:4> * <var:E> ^ <nat:11> + <nat:1> * <var:E> ^ <nat:10> + <nat:3> * <var:E> ^ <nat:8> + <nat:4> * <var:E> ^ <nat:7> + <nat:4> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:4> $ when set of commands has executed . \end{theorem} \begin{proof} Let this decorated segment of code . \begin{eqnarray} \{ <var:F> = <var:E> \} \\ <var:D> := <nat:4> ; \\ \{ <var:F> = <var:E> \land <var:D> = <nat:4> \} \\ <var:D> := <nat:1> + <var:D> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:D> = <nat:4> \times <var:E> + <nat:1> \} \\ <var:D> := <var:D> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:D> = <nat:4> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + \} \\ <var:D> := <nat:3> + <var:D> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:D> = <nat:4> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:3> \} \\ <var:D> := <nat:4> + <var:D> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:D> = <nat:4> \times <var:E> ^ <nat:4> + <nat:1> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> + <nat:4> \} \\ <var:D> := <nat:4> + <var:D> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:D> = <nat:4> \times <var:E> ^ <nat:5> + <nat:1> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:4> \} \\ <var:D> := <nat:3> + <var:D> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:D> = <nat:4> \times <var:E> ^ <nat:6> + <nat:1> \times <var:E> ^ <nat:5> + <nat:3> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:3> \} \\ <var:D> := <nat:4> + <var:D> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:D> = <nat:4> \times <var:E> ^ <nat:7> + <nat:1> \times <var:E> ^ <nat:6> + <nat:3> \times <var:E> ^ <nat:4> + <nat:4> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:4> \} \\ <var:D> := <var:D> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:D> = <nat:4> \times <var:E> ^ <nat:8> + <nat:1> \times <var:E> ^ <nat:7> + <nat:3> \times <var:E> ^ <nat:5> + <nat:4> \times <var:E> ^ <nat:4> + <nat:4> \times <var:E> ^ <nat:3> + <nat:3> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + \} \\ <var:D> := <nat:4> + <var:D> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:D> = <nat:4> \times <var:E> ^ <nat:9> + <nat:1> \times <var:E> ^ <nat:8> + <nat:3> \times <var:E> ^ <nat:6> + <nat:4> \times <var:E> ^ <nat:5> + <nat:4> \times <var:E> ^ <nat:4> + <nat:3> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> ^ <nat:2> + <nat:4> \} \\ <var:D> := <nat:4> + <var:D> * <var:F> ; \\ \{ <var:F> = <var:E> \land <var:D> = <nat:4> \times <var:E> ^ <nat:10> + <nat:1> \times <var:E> ^ <nat:9> + <nat:3> \times <var:E> ^ <nat:7> + <nat:4> \times <var:E> ^ <nat:6> + <nat:4> \times <var:E> ^ <nat:5> + <nat:3> \times <var:E> ^ <nat:4> + <nat:4> \times <var:E> ^ <nat:3> + <nat:4> \times <var:E> + <nat:4> \} \\ <var:D> := <nat:4> + <var:D> * <var:F> \\ \{ <var:F> = <var:E> \land <var:D> = <nat:4> \times <var:E> ^ <nat:11> + <nat:1> \times <var:E> ^ <nat:10> + <nat:3> \times <var:E> ^ <nat:8> + <nat:4> \times <var:E> ^ <nat:7> + <nat:4> \times <var:E> ^ <nat:6> + <nat:3> \times <var:E> ^ <nat:5> + <nat:4> \times <var:E> ^ <nat:4> + <nat:4> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:4> ; <var:D> := <nat:1> + <var:D> * <var:F> ; <var:D> := <var:D> * <var:F> ; <var:D> := <nat:3> + <var:D> * <var:F> ; <var:D> := <nat:4> + <var:D> * <var:F> ; <var:D> := <nat:4> + <var:D> * <var:F> ; <var:D> := <nat:3> + <var:D> * <var:F> ; <var:D> := <nat:4> + <var:D> * <var:F> ; <var:D> := <var:D> * <var:F> ; <var:D> := <nat:4> + <var:D> * <var:F> ; <var:D> := <nat:4> + <var:D> * <var:F> ; <var:D> := <nat:4> + <var:D> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:F> = <var:E> }} <def:poly> {{ <var:D> = <nat:4> * <var:E> ^ <nat:11> + <nat:1> * <var:E> ^ <nat:10> + <nat:3> * <var:E> ^ <nat:8> + <nat:4> * <var:E> ^ <nat:7> + <nat:4> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:D> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:D> = <nat:4> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:D> = <nat:4> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:D> = <nat:4> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:D> = <nat:4> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:D> = <nat:4> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:D> = <nat:4> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:D> = <nat:4> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:D> = <nat:4> * <var:E> ^ <nat:8> + <nat:1> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:D> = <nat:4> * <var:E> ^ <nat:9> + <nat:1> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:6> + <nat:4> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:D> = <nat:4> * <var:E> ^ <nat:10> + <nat:1> * <var:E> ^ <nat:9> + <nat:3> * <var:E> ^ <nat:7> + <nat:4> * <var:E> ^ <nat:6> + <nat:4> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:E> /\ <var:D> = <nat:4> * <var:E> ^ <nat:11> + <nat:1> * <var:E> ^ <nat:10> + <nat:3> * <var:E> ^ <nat:8> + <nat:4> * <var:E> ^ <nat:7> + <nat:4> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:4> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 