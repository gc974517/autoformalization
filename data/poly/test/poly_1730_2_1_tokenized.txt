\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} such that \begin{verbatim} <var:n0> := <nat:3> ; <var:G> := <var:n0> \end{verbatim} Allowing it to be that $ <var:m> = <var:j> $ prior to running this code segment then we see $ <var:G> = <nat:3> $ when list of instructions executes . \end{theorem} \begin{proof} The argument for our code segment is demonstrated by usual Hoare reasoning . Taking a look at the upcoming bit of code seen in our segment of code , \verb | { <var:m> = <var:j> } <var:n0> := <nat:3> { <var:m> = <var:j> \land <var:n0> = <nat:3> } | . Paying attention to the proceeding line seen in our code , we see \verb | { <var:m> = <var:j> } <var:n0> := <nat:3> { <var:m> = <var:j> \land <var:n0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:m> = <var:j> }} <var:n0> := <nat:3> ; <var:G> := <var:n0> {{ <var:G> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:n0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:j> /\ <var:G> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 