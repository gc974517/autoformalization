\begin{document} \begin{theorem} Let the following series of commands as \begin{verbatim} <var:H1> := <var:z> ; <var:H0> := <nat:9> ; <var:H1> := <var:H1> * <nat:6> ; <var:Y> := <var:H1> <var:Y> := <var:Y> + <var:H0> \end{verbatim} Assume , assuming some $ <var:n> \in \mathbb{N} $ , that we have $ <var:z> = <var:n> $ ahead of interpreting the series of commands it follows that we see $ <var:Y> = <nat:6> \times <var:n> + <nat:9> $ once program has finished executing . \end{theorem} \begin{proof} The argument for this program can be done by the below decorated list of instructions . \begin{eqnarray} \{ <var:z> = <var:n> \} \\ <var:H1> := <var:z> ; \\ \{ <var:z> = <var:n> \land <var:H1> = <var:n> \} \\ <var:H0> := <nat:9> ; \\ \{ <var:z> = <var:n> \land <var:H1> = <var:n> \land <var:H0> = <nat:9> \} \\ <var:H1> := <var:H1> * <nat:6> ; \\ \{ <var:z> = <var:n> \land <var:H1> = <nat:6> \cdot <var:n> \land <var:H0> = <nat:9> \} \\ <var:Y> := <var:H1> \\ \{ <var:z> = <var:n> \land <var:H0> = <nat:9> \land <var:Y> = <nat:6> \cdot <var:n> \} \\ <var:Y> := <var:Y> + <var:H0> \\ \{ <var:z> = <var:n> \land <var:Y> = <nat:6> \cdot <var:n> + <nat:9> \} \end{eqnarray} Utilizing Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:z> = <var:n> }} <var:H1> := <var:z> ; <var:H0> := <nat:9> ; <var:H1> := <var:H1> * <nat:6> ; <var:Y> := <var:H1> <var:Y> := <var:Y> + <var:H0> {{ <var:Y> = <nat:6> * <var:n> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:H1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:H1> = <var:n> /\ <var:H0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:H1> = <nat:6> * <var:n> /\ <var:H0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:H0> = <nat:9> /\ <var:Y> = <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:n> /\ <var:Y> = <nat:6> * <var:n> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 