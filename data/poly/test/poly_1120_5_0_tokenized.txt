\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W0> := <nat:7> ; <var:W1> := <nat:6> ; <var:W1> := <var:W1> * <var:v> ; <var:G> := <var:W1> ; <var:G> := <var:G> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:v> = <var:t> $ ahead of the evaluation of our series of instructions then we have $ <var:G> = <nat:6> * <var:t> + <nat:7> $ once set of instructions has executed . \end{theorem} \begin{proof} Note that the following decorated code . \begin{eqnarray} \{ <var:v> = <var:t> \} \\ <var:W0> := <nat:7> ; \\ \{ <var:v> = <var:t> \land <var:W0> = <nat:7> \} \\ <var:W1> := <nat:6> ; \\ \{ <var:v> = <var:t> \land <var:W0> = <nat:7> \land <var:W1> = <nat:6> \} \\ <var:W1> := <var:W1> * <var:v> ; \\ \{ <var:v> = <var:t> \land <var:W0> = <nat:7> \land <var:W1> = <nat:6> \cdot <var:t> \} \\ <var:G> := <var:W1> ; \\ \{ <var:v> = <var:t> \land <var:W0> = <nat:7> \land <var:G> = <nat:6> \cdot <var:t> \} \\ <var:G> := <var:G> + <var:W0> \\ \{ <var:v> = <var:t> \land <var:G> = <nat:6> \cdot <var:t> + <nat:7> \} \end{eqnarray} Applying Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W0> := <nat:7> ; <var:W1> := <nat:6> ; <var:W1> := <var:W1> * <var:v> ; <var:G> := <var:W1> ; <var:G> := <var:G> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:v> = <var:t> }} <def:poly> {{ <var:G> = <nat:6> * <var:t> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:W0> = <nat:7> /\ <var:W1> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:W0> = <nat:7> /\ <var:G> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:G> = <nat:6> * <var:t> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 