\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W> := <nat:2> ; <var:W> := <var:W> * <var:j> ; <var:W> := <nat:1> + <var:W> * <var:j> ; <var:W> := <nat:4> + <var:W> * <var:j> ; <var:W> := <nat:1> + <var:W> * <var:j> ; <var:W> := <nat:4> + <var:W> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Given --- for $ <var:Y> \in \mathbb{N} $ --- that we have $ <var:j> = <var:Y> $ ahead of running our code it holds that we see $ <var:W> = <nat:2> \cdot <var:Y> ^ <nat:5> + <nat:1> \cdot <var:Y> ^ <nat:3> + <nat:4> \cdot <var:Y> ^ <nat:2> + <nat:1> \cdot <var:Y> + <nat:4> $ once set of instructions is done executing . \end{theorem} \begin{proof} The application of Hoare logic gives : \begin{eqnarray} \{ <var:j> = <var:Y> \} \\ <var:W> := <nat:2> ; \\ \{ <var:j> = <var:Y> \land <var:W> = <nat:2> \} \\ <var:W> := <var:W> * <var:j> ; \\ \{ <var:j> = <var:Y> \land <var:W> = <nat:2> \times <var:Y> + \} \\ <var:W> := <nat:1> + <var:W> * <var:j> ; \\ \{ <var:j> = <var:Y> \land <var:W> = <nat:2> \times <var:Y> ^ <nat:2> + <nat:1> \} \\ <var:W> := <nat:4> + <var:W> * <var:j> ; \\ \{ <var:j> = <var:Y> \land <var:W> = <nat:2> \times <var:Y> ^ <nat:3> + <nat:1> \times <var:Y> + <nat:4> \} \\ <var:W> := <nat:1> + <var:W> * <var:j> ; \\ \{ <var:j> = <var:Y> \land <var:W> = <nat:2> \times <var:Y> ^ <nat:4> + <nat:1> \times <var:Y> ^ <nat:2> + <nat:4> \times <var:Y> + <nat:1> \} \\ <var:W> := <nat:4> + <var:W> * <var:j> \\ \{ <var:j> = <var:Y> \land <var:W> = <nat:2> \times <var:Y> ^ <nat:5> + <nat:1> \times <var:Y> ^ <nat:3> + <nat:4> \times <var:Y> ^ <nat:2> + <nat:1> \times <var:Y> + <nat:4> \} \end{eqnarray} Hence , this set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:2> ; <var:W> := <var:W> * <var:j> ; <var:W> := <nat:1> + <var:W> * <var:j> ; <var:W> := <nat:4> + <var:W> * <var:j> ; <var:W> := <nat:1> + <var:W> * <var:j> ; <var:W> := <nat:4> + <var:W> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:j> = <var:Y> }} <def:poly> {{ <var:W> = <nat:2> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:W> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:W> = <nat:2> * <var:Y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:W> = <nat:2> * <var:Y> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:W> = <nat:2> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:W> = <nat:2> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Y> /\ <var:W> = <nat:2> * <var:Y> ^ <nat:5> + <nat:1> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 