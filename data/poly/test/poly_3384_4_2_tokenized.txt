\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m> := <nat:4> ; <var:m> := <var:m> * <var:b> ; <var:m> := <nat:4> + <var:m> * <var:b> ; <var:m> := <nat:2> + <var:m> * <var:b> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:b> = <var:S> $ --- with some positive numbers $ <var:S> $ --- ahead of running this series of commands then we see $ <var:m> = <nat:4> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> + <nat:2> $ . \end{theorem} \begin{proof} We can see that this decorated program . \begin{eqnarray} \{ <var:b> = <var:S> \} \\ <var:m> := <nat:4> ; \\ \{ <var:b> = <var:S> \land <var:m> = <nat:4> \} \\ <var:m> := <var:m> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:m> = <nat:4> * <var:S> + \} \\ <var:m> := <nat:4> + <var:m> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:m> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> \} \\ <var:m> := <nat:2> + <var:m> * <var:b> \\ \{ <var:b> = <var:S> \land <var:m> = <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> + <nat:2> \} \end{eqnarray} Applying standard Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:m> := <nat:4> ; <var:m> := <var:m> * <var:b> ; <var:m> := <nat:4> + <var:m> * <var:b> ; <var:m> := <nat:2> + <var:m> * <var:b> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:b> = <var:S> }} <def:poly> {{ <var:m> = <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:m> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:m> = <nat:4> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:m> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:m> = <nat:4> * <var:S> ^ <nat:3> + <nat:4> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 