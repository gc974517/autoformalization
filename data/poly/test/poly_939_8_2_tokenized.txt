\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:h> := <nat:3> ; <var:h> := <nat:2> + <var:h> * <var:j> ; <var:h> := <nat:3> + <var:h> * <var:j> ; <var:h> := <var:h> * <var:j> ; <var:h> := <nat:4> + <var:h> * <var:j> ; <var:h> := <nat:2> + <var:h> * <var:j> ; <var:h> := <nat:1> + <var:h> * <var:j> ; <var:h> := <nat:1> + <var:h> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Given --- given some positive numbers $ <var:p> $ --- $ <var:j> = <var:p> $ prior to the evaluation of this series of instructions , it holds that we see $ <var:h> = <nat:3> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:p> \} \\ <var:h> := <nat:3> ; \\ \{ <var:j> = <var:p> \land <var:h> = <nat:3> \} \\ <var:h> := <nat:2> + <var:h> * <var:j> ; \\ \{ <var:j> = <var:p> \land <var:h> = <nat:3> \times <var:p> + <nat:2> \} \\ <var:h> := <nat:3> + <var:h> * <var:j> ; \\ \{ <var:j> = <var:p> \land <var:h> = <nat:3> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:3> \} \\ <var:h> := <var:h> * <var:j> ; \\ \{ <var:j> = <var:p> \land <var:h> = <nat:3> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + \} \\ <var:h> := <nat:4> + <var:h> * <var:j> ; \\ \{ <var:j> = <var:p> \land <var:h> = <nat:3> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:3> \times <var:p> ^ <nat:2> + <nat:4> \} \\ <var:h> := <nat:2> + <var:h> * <var:j> ; \\ \{ <var:j> = <var:p> \land <var:h> = <nat:3> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> + <nat:2> \} \\ <var:h> := <nat:1> + <var:h> * <var:j> ; \\ \{ <var:j> = <var:p> \land <var:h> = <nat:3> \times <var:p> ^ <nat:6> + <nat:2> \times <var:p> ^ <nat:5> + <nat:3> \times <var:p> ^ <nat:4> + <nat:4> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:1> \} \\ <var:h> := <nat:1> + <var:h> * <var:j> \\ \{ <var:j> = <var:p> \land <var:h> = <nat:3> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:6> + <nat:3> \times <var:p> ^ <nat:5> + <nat:4> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:1> \} \end{eqnarray} Using typical Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:3> ; <var:h> := <nat:2> + <var:h> * <var:j> ; <var:h> := <nat:3> + <var:h> * <var:j> ; <var:h> := <var:h> * <var:j> ; <var:h> := <nat:4> + <var:h> * <var:j> ; <var:h> := <nat:2> + <var:h> * <var:j> ; <var:h> := <nat:1> + <var:h> * <var:j> ; <var:h> := <nat:1> + <var:h> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:j> = <var:p> }} <def:poly> {{ <var:h> = <nat:3> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:h> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:h> = <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:h> = <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:h> = <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:h> = <nat:3> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:h> = <nat:3> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:h> = <nat:3> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:p> /\ <var:h> = <nat:3> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 