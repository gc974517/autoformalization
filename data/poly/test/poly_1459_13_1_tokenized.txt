\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:L1> := <var:y> ; <var:L2> := <var:L1> * <var:y> ; <var:L3> := <var:L2> * <var:y> ; <var:L4> := <var:L3> * <var:y> ; <var:L5> := <var:L4> * <var:y> ; <var:L0> := <nat:5> ; <var:L2> := <var:L2> * <nat:2> ; <var:L4> := <var:L4> * <nat:3> ; <var:L5> := <var:L5> * <nat:3> ; <var:I> := <var:L5> <var:I> := <var:I> + <var:L4> <var:I> := <var:I> + <var:L2> <var:I> := <var:I> + <var:L0> \end{verbatim} Allowing it to hold that $ <var:y> = <var:A> $ --- given every integers $ <var:A> $ --- prior to evaluating the code , it holds that $ <var:I> = <nat:3> \cdot <var:A> ^ <nat:5> + <nat:3> \cdot <var:A> ^ <nat:4> + <nat:2> \cdot <var:A> ^ <nat:2> + <nat:5> $ once segment of code has terminated . \end{theorem} \begin{proof} The flow of logic for the set of instructions can be demonstrated using standard Hoare techniques . Considering the next pieces of code found in the list of instructions , \verb | { <var:y> = <var:A> } <var:L1> := <var:y> { <var:y> = <var:A> \land <var:L1> = <var:A> } | , \verb | { <var:y> = <var:A> \land <var:L1> = <var:A> } <var:L2> := <var:L1> * <var:y> { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> } | , \verb | { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> } <var:L3> := <var:L2> * <var:y> { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> \land <var:L3> = <var:A> ^ <nat:3> } | , \verb | { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> \land <var:L3> = <var:A> ^ <nat:3> } <var:L4> := <var:L3> * <var:y> { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> \land <var:L3> = <var:A> ^ <nat:3> \land <var:L4> = <var:A> ^ <nat:4> } | and \verb | { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> \land <var:L3> = <var:A> ^ <nat:3> \land <var:L4> = <var:A> ^ <nat:4> } <var:L5> := <var:L4> * <var:y> { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> \land <var:L3> = <var:A> ^ <nat:3> \land <var:L4> = <var:A> ^ <nat:4> \land <var:L5> = <var:A> ^ <nat:5> } | . This is deduced by the assignment scheme of Hoare techniques . Moving onward , \verb | { <var:y> = <var:A> } <var:L1> := <var:y> { <var:y> = <var:A> \land <var:L1> = <var:A> } | , \verb | { <var:y> = <var:A> \land <var:L1> = <var:A> } <var:L2> := <var:L1> * <var:y> { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> } | , \verb | { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> } <var:L3> := <var:L2> * <var:y> { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> \land <var:L3> = <var:A> ^ <nat:3> } | and \verb | { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> \land <var:L3> = <var:A> ^ <nat:3> } <var:L4> := <var:L3> * <var:y> { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> \land <var:L3> = <var:A> ^ <nat:3> \land <var:L4> = <var:A> ^ <nat:4> } | . Immediately after , we see \verb | { <var:y> = <var:A> } <var:L1> := <var:y> { <var:y> = <var:A> \land <var:L1> = <var:A> } | , \verb | { <var:y> = <var:A> \land <var:L1> = <var:A> } <var:L2> := <var:L1> * <var:y> { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> } | , \verb | { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> } <var:L3> := <var:L2> * <var:y> { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> \land <var:L3> = <var:A> ^ <nat:3> } | and \verb | { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> \land <var:L3> = <var:A> ^ <nat:3> } <var:L4> := <var:L3> * <var:y> { <var:y> = <var:A> \land <var:L1> = <var:A> \land <var:L2> = <var:A> ^ <nat:2> \land <var:L3> = <var:A> ^ <nat:3> \land <var:L4> = <var:A> ^ <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <var:L4> : string := " <var:L4> " . Definition <var:L5> : string := " <var:L5> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:y> = <var:A> }} <var:L1> := <var:y> ; <var:L2> := <var:L1> * <var:y> ; <var:L3> := <var:L2> * <var:y> ; <var:L4> := <var:L3> * <var:y> ; <var:L5> := <var:L4> * <var:y> ; <var:L0> := <nat:5> ; <var:L2> := <var:L2> * <nat:2> ; <var:L4> := <var:L4> * <nat:3> ; <var:L5> := <var:L5> * <nat:3> ; <var:I> := <var:L5> <var:I> := <var:I> + <var:L4> <var:I> := <var:I> + <var:L2> <var:I> := <var:I> + <var:L0> {{ <var:I> = <nat:3> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:L1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:L1> = <var:A> /\ <var:L2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:L1> = <var:A> /\ <var:L2> = <var:A> ^ <nat:2> /\ <var:L3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:L1> = <var:A> /\ <var:L2> = <var:A> ^ <nat:2> /\ <var:L3> = <var:A> ^ <nat:3> /\ <var:L4> = <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:L1> = <var:A> /\ <var:L2> = <var:A> ^ <nat:2> /\ <var:L3> = <var:A> ^ <nat:3> /\ <var:L4> = <var:A> ^ <nat:4> /\ <var:L5> = <var:A> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:L1> = <var:A> /\ <var:L2> = <var:A> ^ <nat:2> /\ <var:L3> = <var:A> ^ <nat:3> /\ <var:L4> = <var:A> ^ <nat:4> /\ <var:L5> = <var:A> ^ <nat:5> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:L1> = <var:A> /\ <var:L2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:L3> = <var:A> ^ <nat:3> /\ <var:L4> = <var:A> ^ <nat:4> /\ <var:L5> = <var:A> ^ <nat:5> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:L1> = <var:A> /\ <var:L2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:L3> = <var:A> ^ <nat:3> /\ <var:L4> = <nat:3> * <var:A> ^ <nat:4> /\ <var:L5> = <var:A> ^ <nat:5> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:L1> = <var:A> /\ <var:L2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:L3> = <var:A> ^ <nat:3> /\ <var:L4> = <nat:3> * <var:A> ^ <nat:4> /\ <var:L5> = <nat:3> * <var:A> ^ <nat:5> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:L1> = <var:A> /\ <var:L2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:L3> = <var:A> ^ <nat:3> /\ <var:L4> = <nat:3> * <var:A> ^ <nat:4> /\ <var:L0> = <nat:5> /\ <var:I> = <nat:3> * <var:A> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:L1> = <var:A> /\ <var:L2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:L3> = <var:A> ^ <nat:3> /\ <var:L0> = <nat:5> /\ <var:I> = <nat:3> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:L1> = <var:A> /\ <var:L0> = <nat:5> /\ <var:I> = <nat:3> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:A> /\ <var:I> = <nat:3> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 