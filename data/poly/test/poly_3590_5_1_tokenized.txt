\begin{document} \begin{theorem} Consider a code in \emph{Imp} as follows \begin{verbatim} <var:q1> := <var:V> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:1> ; <var:p> := <var:q1> <var:p> := <var:p> + <var:q0> \end{verbatim} Allowing that we have $ <var:V> = <var:G> $ before evaluating the segment of code , it holds that we see $ <var:p> = <nat:1> \times <var:G> + <nat:2> $ after code segment has finished . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is clear using usual Hoare techniques . Advancing on , the assignment command giving $ <var:V> $ as $ <var:q1>$ . This code transfers the condition $ \{ <var:V> = <var:G> \} $ to $ \{ <var:V> = <var:G> \land <var:q1> = <var:G> \} $ . Going forward , the variable assignmet command assigning $ <nat:2> $ to $ <var:q0>$ . This forwards the condition $ \{ <var:V> = <var:G> \land <var:q1> = <var:G> \} $ as $ \{ <var:V> = <var:G> \land <var:q1> = <var:G> \land <var:q0> = <nat:2> \} $ . This is known to be sound by the assignment law from usual Hoare logic . Taking another step toward the proceeding command found in the series of instructions , the environment update command giving $ <var:q1> * <nat:1> $ toward $ <var:q1>$ . This transfers the condition $ \{ <var:V> = <var:G> \land <var:q1> = <var:G> \land <var:q0> = <nat:2> \} $ to $ \{ <var:V> = <var:G> \land <var:q1> = <nat:1> * <var:G> \land <var:q0> = <nat:2> \} $ . Taking a look at the following statement seen in our series of instructions , we see the variable assignmet command assigning $ <var:q1$ to $ <var:p>$ . This statement advances $ \{ <var:V> = <var:G> \land <var:q1> = <nat:1> * <var:G> \land <var:q0> = <nat:2> \} $ as the postcondition $ \{ <var:V> = <var:G> \land <var:q0> = <nat:2> \land <var:p> = <nat:1> * <var:G> \} $ . This is known to be sound with the assignment inference rule in standard Hoare logic . Focusing on the upcoming bit of code seen in our code segment , we have the assignment command assigning $ <var:p> + <var:q0$ to $ <var:p>$ . This line moves the condition $ \{ <var:V> = <var:G> \land <var:q0> = <nat:2> \land <var:p> = <nat:1> * <var:G> \} $ as the condition $ \{ <var:V> = <var:G> \land <var:p> = <nat:1> * <var:G> + <nat:2> \} $ . This is given by the assignment law defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:V> = <var:G> }} <var:q1> := <var:V> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:1> ; <var:p> := <var:q1> <var:p> := <var:p> + <var:q0> {{ <var:p> = <nat:1> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:q1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:q1> = <var:G> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:q1> = <nat:1> * <var:G> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:q0> = <nat:2> /\ <var:p> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:p> = <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 