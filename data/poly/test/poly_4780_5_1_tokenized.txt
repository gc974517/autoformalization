\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:C1> := <var:c> ; <var:C0> := <nat:2> ; <var:C1> := <var:C1> * <nat:4> ; <var:s> := <var:C1> <var:s> := <var:s> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:c> = <var:G> $ prior to the execution of the segment of code it follows that we see $ <var:s> = <nat:4> \cdot <var:G> + <nat:2> $ when list of commands is done . \end{theorem} \begin{proof} The application of standard Hoare reasoning results in : \begin{eqnarray} \{ <var:c> = <var:G> \} \\ <var:C1> := <var:c> ; \\ \{ <var:c> = <var:G> \land <var:C1> = <var:G> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:c> = <var:G> \land <var:C1> = <var:G> \land <var:C0> = <nat:2> \} \\ <var:C1> := <var:C1> * <nat:4> ; \\ \{ <var:c> = <var:G> \land <var:C1> = <nat:4> * <var:G> \land <var:C0> = <nat:2> \} \\ <var:s> := <var:C1> \\ \{ <var:c> = <var:G> \land <var:C0> = <nat:2> \land <var:s> = <nat:4> * <var:G> \} \\ <var:s> := <var:s> + <var:C0> \\ \{ <var:c> = <var:G> \land <var:s> = <nat:4> * <var:G> + <nat:2> \} \end{eqnarray} Thusly , the list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <def:poly> := <var:C1> := <var:c> ; <var:C0> := <nat:2> ; <var:C1> := <var:C1> * <nat:4> ; <var:s> := <var:C1> <var:s> := <var:s> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:c> = <var:G> }} <def:poly> {{ <var:s> = <nat:4> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:C1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:C1> = <var:G> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:C1> = <nat:4> * <var:G> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:C0> = <nat:2> /\ <var:s> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:G> /\ <var:s> = <nat:4> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 