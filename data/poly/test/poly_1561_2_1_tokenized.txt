\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:2> ; <var:B> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allowing , for every positive numbers $ <var:z> $ , that we have $ <var:y> = <var:z> $ prior to the evaluation of the series of instructions , it must be that $ <var:B> = <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands can be accomplished using usual Hoare techniques . Jumping to the subsequent step in the code , the statement \verb | <var:m0> := <nat:2> ; | . This moves the precondition $ \{ <var:y> = <var:z> \} $ to the postcondition $ \{ <var:y> = <var:z> \land <var:m0> = <nat:2> \} $ . This is sound by the assignment rule in usual Hoare logic . Next , we have the environment update statement yielding $ <var:m0$ to $ <var:B>$ . This advances the condition $ \{ <var:y> = <var:z> \land <var:m0> = <nat:2> \} $ toward $ \{ <var:y> = <var:z> \land <var:B> = <nat:2> \} $ . This is ensured through the assignment scheme from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:2> ; <var:B> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:y> = <var:z> }} <def:poly> {{ <var:B> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:z> /\ <var:B> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 