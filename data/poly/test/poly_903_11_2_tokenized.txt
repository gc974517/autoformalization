\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as follows \begin{verbatim} <var:g> := <nat:4> ; <var:g> := <nat:2> + <var:g> * <var:P> ; <var:g> := <var:g> * <var:P> ; <var:g> := <nat:3> + <var:g> * <var:P> ; <var:g> := <nat:3> + <var:g> * <var:P> ; <var:g> := <nat:4> + <var:g> * <var:P> ; <var:g> := <nat:1> + <var:g> * <var:P> ; <var:g> := <nat:3> + <var:g> * <var:P> ; <var:g> := <nat:1> + <var:g> * <var:P> ; <var:g> := <nat:4> + <var:g> * <var:P> ; <var:g> := <nat:3> + <var:g> * <var:P> \end{verbatim} Given ( letting positive integers $ <var:R> $ ) $ <var:P> = <var:R> $ prior to interpreting this set of commands it must be that $ <var:g> = <nat:4> \cdot <var:R> ^ <nat:10> + <nat:2> \cdot <var:R> ^ <nat:9> + <nat:3> \cdot <var:R> ^ <nat:7> + <nat:3> \cdot <var:R> ^ <nat:6> + <nat:4> \cdot <var:R> ^ <nat:5> + <nat:1> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the series of instructions can be given through the below decorated list of commands . \begin{eqnarray} \{ <var:P> = <var:R> \} \\ <var:g> := <nat:4> ; \\ \{ <var:P> = <var:R> \land <var:g> = <nat:4> \} \\ <var:g> := <nat:2> + <var:g> * <var:P> ; \\ \{ <var:P> = <var:R> \land <var:g> = <nat:4> \times <var:R> + <nat:2> \} \\ <var:g> := <var:g> * <var:P> ; \\ \{ <var:P> = <var:R> \land <var:g> = <nat:4> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> + \} \\ <var:g> := <nat:3> + <var:g> * <var:P> ; \\ \{ <var:P> = <var:R> \land <var:g> = <nat:4> \times <var:R> ^ <nat:3> + <nat:2> \times <var:R> ^ <nat:2> + <nat:3> \} \\ <var:g> := <nat:3> + <var:g> * <var:P> ; \\ \{ <var:P> = <var:R> \land <var:g> = <nat:4> \times <var:R> ^ <nat:4> + <nat:2> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> + <nat:3> \} \\ <var:g> := <nat:4> + <var:g> * <var:P> ; \\ \{ <var:P> = <var:R> \land <var:g> = <nat:4> \times <var:R> ^ <nat:5> + <nat:2> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:4> \} \\ <var:g> := <nat:1> + <var:g> * <var:P> ; \\ \{ <var:P> = <var:R> \land <var:g> = <nat:4> \times <var:R> ^ <nat:6> + <nat:2> \times <var:R> ^ <nat:5> + <nat:3> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:1> \} \\ <var:g> := <nat:3> + <var:g> * <var:P> ; \\ \{ <var:P> = <var:R> \land <var:g> = <nat:4> \times <var:R> ^ <nat:7> + <nat:2> \times <var:R> ^ <nat:6> + <nat:3> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> \} \\ <var:g> := <nat:1> + <var:g> * <var:P> ; \\ \{ <var:P> = <var:R> \land <var:g> = <nat:4> \times <var:R> ^ <nat:8> + <nat:2> \times <var:R> ^ <nat:7> + <nat:3> \times <var:R> ^ <nat:5> + <nat:3> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:1> \} \\ <var:g> := <nat:4> + <var:g> * <var:P> ; \\ \{ <var:P> = <var:R> \land <var:g> = <nat:4> \times <var:R> ^ <nat:9> + <nat:2> \times <var:R> ^ <nat:8> + <nat:3> \times <var:R> ^ <nat:6> + <nat:3> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:4> + <nat:1> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:4> \} \\ <var:g> := <nat:3> + <var:g> * <var:P> \\ \{ <var:P> = <var:R> \land <var:g> = <nat:4> \times <var:R> ^ <nat:10> + <nat:2> \times <var:R> ^ <nat:9> + <nat:3> \times <var:R> ^ <nat:7> + <nat:3> \times <var:R> ^ <nat:6> + <nat:4> \times <var:R> ^ <nat:5> + <nat:1> \times <var:R> ^ <nat:4> + <nat:3> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:3> \} \end{eqnarray} Utilizing standard Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:P> = <var:R> }} <var:g> := <nat:4> ; <var:g> := <nat:2> + <var:g> * <var:P> ; <var:g> := <var:g> * <var:P> ; <var:g> := <nat:3> + <var:g> * <var:P> ; <var:g> := <nat:3> + <var:g> * <var:P> ; <var:g> := <nat:4> + <var:g> * <var:P> ; <var:g> := <nat:1> + <var:g> * <var:P> ; <var:g> := <nat:3> + <var:g> * <var:P> ; <var:g> := <nat:1> + <var:g> * <var:P> ; <var:g> := <nat:4> + <var:g> * <var:P> ; <var:g> := <nat:3> + <var:g> * <var:P> {{ <var:g> = <nat:4> * <var:R> ^ <nat:10> + <nat:2> * <var:R> ^ <nat:9> + <nat:3> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:g> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:g> = <nat:4> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:g> = <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:g> = <nat:4> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:g> = <nat:4> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:g> = <nat:4> * <var:R> ^ <nat:5> + <nat:2> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:g> = <nat:4> * <var:R> ^ <nat:6> + <nat:2> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:g> = <nat:4> * <var:R> ^ <nat:7> + <nat:2> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:g> = <nat:4> * <var:R> ^ <nat:8> + <nat:2> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:g> = <nat:4> * <var:R> ^ <nat:9> + <nat:2> * <var:R> ^ <nat:8> + <nat:3> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:R> /\ <var:g> = <nat:4> * <var:R> ^ <nat:10> + <nat:2> * <var:R> ^ <nat:9> + <nat:3> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 