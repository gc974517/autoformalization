\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:9> ; <var:E> := <var:y0> \end{verbatim} Given it to hold that $ <var:X> = <var:b> $ , for all positive integers $ <var:b> $ , before interpreting our set of commands , it holds that $ <var:E> = <nat:9> $ once code segment has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is accomplished with usual Hoare reasoning . Following , the variable binding command yielding $ <nat:9> $ toward $ <var:y0>$ . This takes $ \{ <var:X> = <var:b> \} $ to $ \{ <var:X> = <var:b> \land <var:y0> = <nat:9> \} $ . Following , the code \verb | <var:E> := <var:y0> | . This line advances $ \{ <var:X> = <var:b> \land <var:y0> = <nat:9> \} $ to the condition $ \{ <var:X> = <var:b> \land <var:E> = <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:X> = <var:b> }} <var:y0> := <nat:9> ; <var:E> := <var:y0> {{ <var:E> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:b> /\ <var:E> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 