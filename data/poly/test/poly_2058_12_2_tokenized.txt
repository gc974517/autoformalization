\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c> := <nat:3> ; <var:c> := <nat:4> + <var:c> * <var:O> ; <var:c> := <nat:2> + <var:c> * <var:O> ; <var:c> := <var:c> * <var:O> ; <var:c> := <var:c> * <var:O> ; <var:c> := <nat:1> + <var:c> * <var:O> ; <var:c> := <var:c> * <var:O> ; <var:c> := <nat:3> + <var:c> * <var:O> ; <var:c> := <nat:1> + <var:c> * <var:O> ; <var:c> := <var:c> * <var:O> ; <var:c> := <nat:1> + <var:c> * <var:O> ; <var:c> := <nat:4> + <var:c> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:O> = <var:A> $ given natural numbers $ <var:A> $ prior to interpreting the series of instructions it must be that we have $ <var:c> = <nat:3> \times <var:A> ^ <nat:11> + <nat:4> \times <var:A> ^ <nat:10> + <nat:2> \times <var:A> ^ <nat:9> + <nat:1> \times <var:A> ^ <nat:6> + <nat:3> \times <var:A> ^ <nat:4> + <nat:1> \times <var:A> ^ <nat:3> + <nat:1> \times <var:A> + <nat:4> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques gives us : \begin{eqnarray} \{ <var:O> = <var:A> \} \\ <var:c> := <nat:3> ; \\ \{ <var:O> = <var:A> \land <var:c> = <nat:3> \} \\ <var:c> := <nat:4> + <var:c> * <var:O> ; \\ \{ <var:O> = <var:A> \land <var:c> = <nat:3> \times <var:A> + <nat:4> \} \\ <var:c> := <nat:2> + <var:c> * <var:O> ; \\ \{ <var:O> = <var:A> \land <var:c> = <nat:3> \times <var:A> ^ <nat:2> + <nat:4> \times <var:A> + <nat:2> \} \\ <var:c> := <var:c> * <var:O> ; \\ \{ <var:O> = <var:A> \land <var:c> = <nat:3> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + \} \\ <var:c> := <var:c> * <var:O> ; \\ \{ <var:O> = <var:A> \land <var:c> = <nat:3> \times <var:A> ^ <nat:4> + <nat:4> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + \} \\ <var:c> := <nat:1> + <var:c> * <var:O> ; \\ \{ <var:O> = <var:A> \land <var:c> = <nat:3> \times <var:A> ^ <nat:5> + <nat:4> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:1> \} \\ <var:c> := <var:c> * <var:O> ; \\ \{ <var:O> = <var:A> \land <var:c> = <nat:3> \times <var:A> ^ <nat:6> + <nat:4> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:1> \times <var:A> + \} \\ <var:c> := <nat:3> + <var:c> * <var:O> ; \\ \{ <var:O> = <var:A> \land <var:c> = <nat:3> \times <var:A> ^ <nat:7> + <nat:4> \times <var:A> ^ <nat:6> + <nat:2> \times <var:A> ^ <nat:5> + <nat:1> \times <var:A> ^ <nat:2> + <nat:3> \} \\ <var:c> := <nat:1> + <var:c> * <var:O> ; \\ \{ <var:O> = <var:A> \land <var:c> = <nat:3> \times <var:A> ^ <nat:8> + <nat:4> \times <var:A> ^ <nat:7> + <nat:2> \times <var:A> ^ <nat:6> + <nat:1> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> + <nat:1> \} \\ <var:c> := <var:c> * <var:O> ; \\ \{ <var:O> = <var:A> \land <var:c> = <nat:3> \times <var:A> ^ <nat:9> + <nat:4> \times <var:A> ^ <nat:8> + <nat:2> \times <var:A> ^ <nat:7> + <nat:1> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:2> + <nat:1> \times <var:A> + \} \\ <var:c> := <nat:1> + <var:c> * <var:O> ; \\ \{ <var:O> = <var:A> \land <var:c> = <nat:3> \times <var:A> ^ <nat:10> + <nat:4> \times <var:A> ^ <nat:9> + <nat:2> \times <var:A> ^ <nat:8> + <nat:1> \times <var:A> ^ <nat:5> + <nat:3> \times <var:A> ^ <nat:3> + <nat:1> \times <var:A> ^ <nat:2> + <nat:1> \} \\ <var:c> := <nat:4> + <var:c> * <var:O> \\ \{ <var:O> = <var:A> \land <var:c> = <nat:3> \times <var:A> ^ <nat:11> + <nat:4> \times <var:A> ^ <nat:10> + <nat:2> \times <var:A> ^ <nat:9> + <nat:1> \times <var:A> ^ <nat:6> + <nat:3> \times <var:A> ^ <nat:4> + <nat:1> \times <var:A> ^ <nat:3> + <nat:1> \times <var:A> + <nat:4> \} \end{eqnarray} As a result , this series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:c> := <nat:3> ; <var:c> := <nat:4> + <var:c> * <var:O> ; <var:c> := <nat:2> + <var:c> * <var:O> ; <var:c> := <var:c> * <var:O> ; <var:c> := <var:c> * <var:O> ; <var:c> := <nat:1> + <var:c> * <var:O> ; <var:c> := <var:c> * <var:O> ; <var:c> := <nat:3> + <var:c> * <var:O> ; <var:c> := <nat:1> + <var:c> * <var:O> ; <var:c> := <var:c> * <var:O> ; <var:c> := <nat:1> + <var:c> * <var:O> ; <var:c> := <nat:4> + <var:c> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:O> = <var:A> }} <def:poly> {{ <var:c> = <nat:3> * <var:A> ^ <nat:11> + <nat:4> * <var:A> ^ <nat:10> + <nat:2> * <var:A> ^ <nat:9> + <nat:1> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:1> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:c> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:c> = <nat:3> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:c> = <nat:3> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:c> = <nat:3> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:c> = <nat:3> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:c> = <nat:3> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:c> = <nat:3> * <var:A> ^ <nat:6> + <nat:4> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:1> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:c> = <nat:3> * <var:A> ^ <nat:7> + <nat:4> * <var:A> ^ <nat:6> + <nat:2> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:c> = <nat:3> * <var:A> ^ <nat:8> + <nat:4> * <var:A> ^ <nat:7> + <nat:2> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:3> + <nat:3> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:c> = <nat:3> * <var:A> ^ <nat:9> + <nat:4> * <var:A> ^ <nat:8> + <nat:2> * <var:A> ^ <nat:7> + <nat:1> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:c> = <nat:3> * <var:A> ^ <nat:10> + <nat:4> * <var:A> ^ <nat:9> + <nat:2> * <var:A> ^ <nat:8> + <nat:1> * <var:A> ^ <nat:5> + <nat:3> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:A> /\ <var:c> = <nat:3> * <var:A> ^ <nat:11> + <nat:4> * <var:A> ^ <nat:10> + <nat:2> * <var:A> ^ <nat:9> + <nat:1> * <var:A> ^ <nat:6> + <nat:3> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:1> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 