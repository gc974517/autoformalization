\begin{document} \begin{theorem} Define a set of instructions as follows \begin{verbatim} <var:n> := <nat:2> ; <var:n> := <var:n> * <var:z> ; <var:n> := <nat:2> + <var:n> * <var:z> ; <var:n> := <nat:3> + <var:n> * <var:z> \end{verbatim} Assume $ <var:z> = <var:J> $ for some whole numbers $ <var:J> $ before evaluating our list of commands , it follows that $ <var:n> = <nat:2> \times <var:J> ^ <nat:3> + <nat:2> \times <var:J> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques returns : \begin{eqnarray} \{ <var:z> = <var:J> \} \\ <var:n> := <nat:2> ; \\ \{ <var:z> = <var:J> \land <var:n> = <nat:2> \} \\ <var:n> := <var:n> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:n> = <nat:2> \cdot <var:J> + \} \\ <var:n> := <nat:2> + <var:n> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:n> = <nat:2> \cdot <var:J> ^ <nat:2> + <nat:2> \} \\ <var:n> := <nat:3> + <var:n> * <var:z> \\ \{ <var:z> = <var:J> \land <var:n> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> + <nat:3> \} \end{eqnarray} Thus , our code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:z> = <var:J> }} <var:n> := <nat:2> ; <var:n> := <var:n> * <var:z> ; <var:n> := <nat:2> + <var:n> * <var:z> ; <var:n> := <nat:3> + <var:n> * <var:z> {{ <var:n> = <nat:2> * <var:J> ^ <nat:3> + <nat:2> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:n> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:n> = <nat:2> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:n> = <nat:2> * <var:J> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:n> = <nat:2> * <var:J> ^ <nat:3> + <nat:2> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 