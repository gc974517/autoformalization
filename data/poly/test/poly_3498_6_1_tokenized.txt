\begin{document} \begin{theorem} Define the following series of instructions as follows \begin{verbatim} <var:S1> := <var:p> ; <var:S2> := <var:S1> * <var:p> ; <var:S0> := <nat:4> ; <var:S2> := <var:S2> * <nat:4> ; <var:O> := <var:S2> <var:O> := <var:O> + <var:S0> \end{verbatim} Assume that $ <var:p> = <var:Q> $ for positive integer coefficients $ <var:Q> $ before running the set of commands , it holds that we have $ <var:O> = <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare reasoning yields : \begin{eqnarray} \{ <var:p> = <var:Q> \} \\ <var:S1> := <var:p> ; \\ \{ <var:p> = <var:Q> \land <var:S1> = <var:Q> \} \\ <var:S2> := <var:S1> * <var:p> ; \\ \{ <var:p> = <var:Q> \land <var:S1> = <var:Q> \land <var:S2> = <var:Q> ^ <nat:2> \} \\ <var:S0> := <nat:4> ; \\ \{ <var:p> = <var:Q> \land <var:S1> = <var:Q> \land <var:S2> = <var:Q> ^ <nat:2> \land <var:S0> = <nat:4> \} \\ <var:S2> := <var:S2> * <nat:4> ; \\ \{ <var:p> = <var:Q> \land <var:S1> = <var:Q> \land <var:S2> = <nat:4> \cdot <var:Q> ^ <nat:2> \land <var:S0> = <nat:4> \} \end{eqnarray} Advancing evaluating this set of commands gives : \begin{eqnarray} <var:O> := <var:S2> \\ \{ <var:p> = <var:Q> \land <var:S1> = <var:Q> \land <var:S0> = <nat:4> \land <var:O> = <nat:4> \cdot <var:Q> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:S0> \\ \{ <var:p> = <var:Q> \land <var:O> = <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:4> \} \end{eqnarray} Considering the preceding argument , the code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:p> = <var:Q> }} <var:S1> := <var:p> ; <var:S2> := <var:S1> * <var:p> ; <var:S0> := <nat:4> ; <var:S2> := <var:S2> * <nat:4> ; <var:O> := <var:S2> <var:O> := <var:O> + <var:S0> {{ <var:O> = <nat:4> * <var:Q> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:S1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:S1> = <var:Q> /\ <var:S2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:S1> = <var:Q> /\ <var:S2> = <var:Q> ^ <nat:2> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:S1> = <var:Q> /\ <var:S2> = <nat:4> * <var:Q> ^ <nat:2> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:S1> = <var:Q> /\ <var:S0> = <nat:4> /\ <var:O> = <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:O> = <nat:4> * <var:Q> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 