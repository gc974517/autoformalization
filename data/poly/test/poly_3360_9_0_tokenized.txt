\begin{document} \begin{theorem} Take a series of instructions as \begin{verbatim} <var:j0> := <nat:2> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:M> ; <var:j2> := <nat:4> ; <var:j2> := <var:j2> * <var:M> ; <var:j2> := <var:j2> * <var:M> ; <var:N> := <var:j2> ; <var:N> := <var:N> + <var:j1> ; <var:N> := <var:N> + <var:j0> \end{verbatim} Assuming , assuming some positive integer coefficients $ <var:v> $ , that $ <var:M> = <var:v> $ before interpreting the list of commands , it holds that we see $ <var:N> = <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:v> \} \\ <var:j0> := <nat:2> ; \\ \{ <var:M> = <var:v> \land <var:j0> = <nat:2> \} \\ <var:j1> := <nat:1> ; \\ \{ <var:M> = <var:v> \land <var:j0> = <nat:2> \land <var:j1> = <nat:1> \} \\ <var:j1> := <var:j1> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:j0> = <nat:2> \land <var:j1> = <nat:1> * <var:v> \} \\ <var:j2> := <nat:4> ; \\ \{ <var:M> = <var:v> \land <var:j0> = <nat:2> \land <var:j1> = <nat:1> * <var:v> \land <var:j2> = <nat:4> \} \\ <var:j2> := <var:j2> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:j0> = <nat:2> \land <var:j1> = <nat:1> * <var:v> \land <var:j2> = <nat:4> * <var:v> \} \end{eqnarray} Continuing interpreting the code returns : \begin{eqnarray} <var:j2> := <var:j2> * <var:M> ; \\ \{ <var:M> = <var:v> \land <var:j0> = <nat:2> \land <var:j1> = <nat:1> * <var:v> \land <var:j2> = <nat:4> * <var:v> ^ <nat:2> \} \\ <var:N> := <var:j2> ; \\ \{ <var:M> = <var:v> \land <var:j0> = <nat:2> \land <var:j1> = <nat:1> * <var:v> \land <var:N> = <nat:4> * <var:v> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:j1> ; \\ \{ <var:M> = <var:v> \land <var:j0> = <nat:2> \land <var:N> = <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> \} \\ <var:N> := <var:N> + <var:j0> \\ \{ <var:M> = <var:v> \land <var:N> = <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:M> = <var:v> }} <var:j0> := <nat:2> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:M> ; <var:j2> := <nat:4> ; <var:j2> := <var:j2> * <var:M> ; <var:j2> := <var:j2> * <var:M> ; <var:N> := <var:j2> ; <var:N> := <var:N> + <var:j1> ; <var:N> := <var:N> + <var:j0> {{ <var:N> = <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:1> * <var:v> /\ <var:j2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:1> * <var:v> /\ <var:j2> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:1> * <var:v> /\ <var:j2> = <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:1> * <var:v> /\ <var:N> = <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:j0> = <nat:2> /\ <var:N> = <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:v> /\ <var:N> = <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 