\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:1> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:B> ; <var:A2> := <nat:3> ; <var:A2> := <var:A2> * <var:B> ; <var:A2> := <var:A2> * <var:B> ; <var:A3> := <nat:2> ; <var:A3> := <var:A3> * <var:B> ; <var:A3> := <var:A3> * <var:B> ; <var:A3> := <var:A3> * <var:B> ; <var:C> := <var:A3> ; <var:C> := <var:C> + <var:A2> ; <var:C> := <var:C> + <var:A1> ; <var:C> := <var:C> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( given some integers $ <var:F> $ ) that $ <var:B> = <var:F> $ ahead of the execution of the segment of code it follows that we see $ <var:C> = <nat:2> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of instructions is shown with Hoare logic . Focusing on the following commands found in the program , we have \begin{verbatim} { <var:B> = <var:F> } <var:A0> := <nat:1> { <var:B> = <var:F> \land <var:A0> = <nat:1> } { <var:B> = <var:F> \land <var:A0> = <nat:1> } <var:A1> := <nat:3> { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> } { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> } <var:A1> := <var:A1> * <var:B> { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:F> } { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:F> } <var:A2> := <nat:3> { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:F> \land <var:A2> = <nat:3> } { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:F> \land <var:A2> = <nat:3> } <var:A2> := <var:A2> * <var:B> { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:F> \land <var:A2> = <nat:3> * <var:F> } { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:F> \land <var:A2> = <nat:3> * <var:F> } <var:A2> := <var:A2> * <var:B> { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:F> \land <var:A2> = <nat:3> * <var:F> ^ <nat:2> } { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:F> \land <var:A2> = <nat:3> * <var:F> ^ <nat:2> } <var:A3> := <nat:2> { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:F> \land <var:A2> = <nat:3> * <var:F> ^ <nat:2> \land <var:A3> = <nat:2> } \end{verbatim} Taking a look at the following pieces of code contained in our series of instructions , we have \begin{verbatim} { <var:B> = <var:F> } <var:A0> := <nat:1> { <var:B> = <var:F> \land <var:A0> = <nat:1> } { <var:B> = <var:F> \land <var:A0> = <nat:1> } <var:A1> := <nat:3> { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> } { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> } <var:A1> := <var:A1> * <var:B> { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:F> } { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:F> } <var:A2> := <nat:3> { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:F> \land <var:A2> = <nat:3> } \end{verbatim} This is deduced with the variable assignmet law defined in usual Hoare techniques . Taking a look at the subsequent commands contained in our code segment , \begin{verbatim} { <var:B> = <var:F> } <var:A0> := <nat:1> { <var:B> = <var:F> \land <var:A0> = <nat:1> } { <var:B> = <var:F> \land <var:A0> = <nat:1> } <var:A1> := <nat:3> { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> } { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> } <var:A1> := <var:A1> * <var:B> { <var:B> = <var:F> \land <var:A0> = <nat:1> \land <var:A1> = <nat:3> * <var:F> } \end{verbatim} This is rigorously given using the environment update rule obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <def:poly> := <var:A0> := <nat:1> ; <var:A1> := <nat:3> ; <var:A1> := <var:A1> * <var:B> ; <var:A2> := <nat:3> ; <var:A2> := <var:A2> * <var:B> ; <var:A2> := <var:A2> * <var:B> ; <var:A3> := <nat:2> ; <var:A3> := <var:A3> * <var:B> ; <var:A3> := <var:A3> * <var:B> ; <var:A3> := <var:A3> * <var:B> ; <var:C> := <var:A3> ; <var:C> := <var:C> + <var:A2> ; <var:C> := <var:C> + <var:A1> ; <var:C> := <var:C> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:B> = <var:F> }} <def:poly> {{ <var:C> = <nat:2> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:3> * <var:F> /\ <var:A2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:3> * <var:F> /\ <var:A2> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:3> * <var:F> /\ <var:A2> = <nat:3> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:3> * <var:F> /\ <var:A2> = <nat:3> * <var:F> ^ <nat:2> /\ <var:A3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:3> * <var:F> /\ <var:A2> = <nat:3> * <var:F> ^ <nat:2> /\ <var:A3> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:3> * <var:F> /\ <var:A2> = <nat:3> * <var:F> ^ <nat:2> /\ <var:A3> = <nat:2> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:3> * <var:F> /\ <var:A2> = <nat:3> * <var:F> ^ <nat:2> /\ <var:A3> = <nat:2> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:3> * <var:F> /\ <var:A2> = <nat:3> * <var:F> ^ <nat:2> /\ <var:C> = <nat:2> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:3> * <var:F> /\ <var:C> = <nat:2> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:A0> = <nat:1> /\ <var:C> = <nat:2> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:C> = <nat:2> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 