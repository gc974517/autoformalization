\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:z1> := <var:i> ; <var:z2> := <var:z1> * <var:i> ; <var:z0> := <nat:4> ; <var:z1> := <var:z1> * <nat:2> ; <var:z2> := <var:z2> * <nat:2> ; <var:d> := <var:z2> <var:d> := <var:d> + <var:z1> <var:d> := <var:d> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Allow for every $ <var:e> $ it to be that $ <var:i> = <var:e> $ before the execution of our list of commands it holds that we have $ <var:d> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:4> $ when code executes . \end{theorem} \begin{proof} Proving correctness for the program is done through usual Hoare reasoning . Following , we have the binding command \verb | <var:z1> := <var:i> ; | . This takes $ \{ <var:i> = <var:e> \} $ to $ \{ <var:i> = <var:e> \land <var:z1> = <var:e> \} $ . This is sound using the assignment inference rule found in Hoare reasoning . Honing in on the next statement in our program , the assignment command \verb | <var:z2> := <var:z1> * <var:i> ; | . This code redefines $ \{ <var:i> = <var:e> \land <var:z1> = <var:e> \} $ toward $ \{ <var:i> = <var:e> \land <var:z1> = <var:e> \land <var:z2> = <var:e> ^ <nat:2> \} $ . Observing the subsequent bit of code seen in our series of instructions , we see the variable binding code assigning $ <nat:4> $ into $ <var:z0>$ . This advances $ \{ <var:i> = <var:e> \land <var:z1> = <var:e> \land <var:z2> = <var:e> ^ <nat:2> \} $ as the postcondition $ \{ <var:i> = <var:e> \land <var:z1> = <var:e> \land <var:z2> = <var:e> ^ <nat:2> \land <var:z0> = <nat:4> \} $ . Taking another step toward the following statement seen in our code segment , the binding line giving $ <var:z1> * <nat:2> $ as $ <var:z1>$ . This line forwards the condition $ \{ <var:i> = <var:e> \land <var:z1> = <var:e> \land <var:z2> = <var:e> ^ <nat:2> \land <var:z0> = <nat:4> \} $ into $ \{ <var:i> = <var:e> \land <var:z1> = <nat:2> * <var:e> \land <var:z2> = <var:e> ^ <nat:2> \land <var:z0> = <nat:4> \} $ . Stepping through , we see the binding code \verb | <var:z2> := <var:z2> * <nat:2> ; | . This forwards the condition $ \{ <var:i> = <var:e> \land <var:z1> = <nat:2> * <var:e> \land <var:z2> = <var:e> ^ <nat:2> \land <var:z0> = <nat:4> \} $ to the postcondition $ \{ <var:i> = <var:e> \land <var:z1> = <nat:2> * <var:e> \land <var:z2> = <nat:2> * <var:e> ^ <nat:2> \land <var:z0> = <nat:4> \} $ . Advancing , the assignment line \verb | <var:d> := <var:z2> | . This statement takes the condition $ \{ <var:i> = <var:e> \land <var:z1> = <nat:2> * <var:e> \land <var:z2> = <nat:2> * <var:e> ^ <nat:2> \land <var:z0> = <nat:4> \} $ to $ \{ <var:i> = <var:e> \land <var:z1> = <nat:2> * <var:e> \land <var:z0> = <nat:4> \land <var:d> = <nat:2> * <var:e> ^ <nat:2> \} $ . After , the assignment code \verb | <var:d> := <var:d> + <var:z1> | . This statement redefines $ \{ <var:i> = <var:e> \land <var:z1> = <nat:2> * <var:e> \land <var:z0> = <nat:4> \land <var:d> = <nat:2> * <var:e> ^ <nat:2> \} $ into the postcondition $ \{ <var:i> = <var:e> \land <var:z0> = <nat:4> \land <var:d> = <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> \} $ . Looking at the next statement in our set of instructions , we have the assignment statement \verb | <var:d> := <var:d> + <var:z0> | . This transfers the precondition $ \{ <var:i> = <var:e> \land <var:z0> = <nat:4> \land <var:d> = <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> \} $ into the postcondition $ \{ <var:i> = <var:e> \land <var:d> = <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z1> := <var:i> ; <var:z2> := <var:z1> * <var:i> ; <var:z0> := <nat:4> ; <var:z1> := <var:z1> * <nat:2> ; <var:z2> := <var:z2> * <nat:2> ; <var:d> := <var:z2> <var:d> := <var:d> + <var:z1> <var:d> := <var:d> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:i> = <var:e> }} <def:poly> {{ <var:d> = <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:z1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:z1> = <var:e> /\ <var:z2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:z1> = <var:e> /\ <var:z2> = <var:e> ^ <nat:2> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:z1> = <nat:2> * <var:e> /\ <var:z2> = <var:e> ^ <nat:2> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:z1> = <nat:2> * <var:e> /\ <var:z2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:z1> = <nat:2> * <var:e> /\ <var:z0> = <nat:4> /\ <var:d> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:z0> = <nat:4> /\ <var:d> = <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:e> /\ <var:d> = <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 