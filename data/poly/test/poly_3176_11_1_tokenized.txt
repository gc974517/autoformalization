\begin{document} \begin{theorem} Define a series of instructions such that \begin{verbatim} <var:f1> := <var:v> ; <var:f2> := <var:f1> * <var:v> ; <var:f3> := <var:f2> * <var:v> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:2> ; <var:f2> := <var:f2> * <nat:2> ; <var:f3> := <var:f3> * <nat:4> ; <var:d> := <var:f3> <var:d> := <var:d> + <var:f2> <var:d> := <var:d> + <var:f1> <var:d> := <var:d> + <var:f0> \end{verbatim} Assuming it to hold that $ <var:v> = <var:N> $ prior to interpreting this set of commands then we see $ <var:d> = <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:4> $ . \end{theorem} \begin{proof} The proof of this program is evident using usual Hoare logic . Jumping to the upcoming line of code contained in our series of commands , we see the assignment command yielding $ <var:v> $ to $ <var:f1>$ . This statement moves the precondition $ \{ <var:v> = <var:N> \} $ as the postcondition $ \{ <var:v> = <var:N> \land <var:f1> = <var:N> \} $ . This is deduced with the assignment law of typical Hoare reasoning . Honing in on the upcoming statement found in the set of instructions , the variable update command \verb | <var:f2> := <var:f1> * <var:v> ; | . This moves the condition $ \{ <var:v> = <var:N> \land <var:f1> = <var:N> \} $ into $ \{ <var:v> = <var:N> \land <var:f1> = <var:N> \land <var:f2> = <var:N> ^ <nat:2> \} $ . Advancing to the next statement in our list of commands , we have the binding code letting $ <var:f2> * <var:v> $ to $ <var:f3>$ . This line redefines the condition $ \{ <var:v> = <var:N> \land <var:f1> = <var:N> \land <var:f2> = <var:N> ^ <nat:2> \} $ to $ \{ <var:v> = <var:N> \land <var:f1> = <var:N> \land <var:f2> = <var:N> ^ <nat:2> \land <var:f3> = <var:N> ^ <nat:3> \} $ . Immediately after , we have the code \verb | <var:f0> := <nat:4> ; | . This line takes the condition $ \{ <var:v> = <var:N> \land <var:f1> = <var:N> \land <var:f2> = <var:N> ^ <nat:2> \land <var:f3> = <var:N> ^ <nat:3> \} $ as $ \{ <var:v> = <var:N> \land <var:f1> = <var:N> \land <var:f2> = <var:N> ^ <nat:2> \land <var:f3> = <var:N> ^ <nat:3> \land <var:f0> = <nat:4> \} $ . Focusing on the proceeding command in our code , the binding statement \verb | <var:f1> := <var:f1> * <nat:2> ; | . This forwards the condition $ \{ <var:v> = <var:N> \land <var:f1> = <var:N> \land <var:f2> = <var:N> ^ <nat:2> \land <var:f3> = <var:N> ^ <nat:3> \land <var:f0> = <nat:4> \} $ toward the condition $ \{ <var:v> = <var:N> \land <var:f1> = <nat:2> * <var:N> \land <var:f2> = <var:N> ^ <nat:2> \land <var:f3> = <var:N> ^ <nat:3> \land <var:f0> = <nat:4> \} $ . Taking a look at the upcoming line of code seen in the program , we have the assignment command \verb | <var:f2> := <var:f2> * <nat:2> ; | . This command moves the condition $ \{ <var:v> = <var:N> \land <var:f1> = <nat:2> * <var:N> \land <var:f2> = <var:N> ^ <nat:2> \land <var:f3> = <var:N> ^ <nat:3> \land <var:f0> = <nat:4> \} $ as the condition $ \{ <var:v> = <var:N> \land <var:f1> = <nat:2> * <var:N> \land <var:f2> = <nat:2> * <var:N> ^ <nat:2> \land <var:f3> = <var:N> ^ <nat:3> \land <var:f0> = <nat:4> \} $ . Going to the next step , we have the variable update command assigning $ <var:f3> * <nat:4> $ into $ <var:f3>$ . This transfers the precondition $ \{ <var:v> = <var:N> \land <var:f1> = <nat:2> * <var:N> \land <var:f2> = <nat:2> * <var:N> ^ <nat:2> \land <var:f3> = <var:N> ^ <nat:3> \land <var:f0> = <nat:4> \} $ toward the condition $ \{ <var:v> = <var:N> \land <var:f1> = <nat:2> * <var:N> \land <var:f2> = <nat:2> * <var:N> ^ <nat:2> \land <var:f3> = <nat:4> * <var:N> ^ <nat:3> \land <var:f0> = <nat:4> \} $ . Advancing to the next command found in the segment of code , we have the line \verb | <var:d> := <var:f3> | . This redefines the precondition $ \{ <var:v> = <var:N> \land <var:f1> = <nat:2> * <var:N> \land <var:f2> = <nat:2> * <var:N> ^ <nat:2> \land <var:f3> = <nat:4> * <var:N> ^ <nat:3> \land <var:f0> = <nat:4> \} $ toward the postcondition $ \{ <var:v> = <var:N> \land <var:f1> = <nat:2> * <var:N> \land <var:f2> = <nat:2> * <var:N> ^ <nat:2> \land <var:f0> = <nat:4> \land <var:d> = <nat:4> * <var:N> ^ <nat:3> \} $ . This is shown with the assignment rule found in usual Hoare logic . Taking a look at the upcoming piece of code in the set of commands , the binding command binding $ <var:d> + <var:f2$ as $ <var:d>$ . This code advances $ \{ <var:v> = <var:N> \land <var:f1> = <nat:2> * <var:N> \land <var:f2> = <nat:2> * <var:N> ^ <nat:2> \land <var:f0> = <nat:4> \land <var:d> = <nat:4> * <var:N> ^ <nat:3> \} $ into the condition $ \{ <var:v> = <var:N> \land <var:f1> = <nat:2> * <var:N> \land <var:f0> = <nat:4> \land <var:d> = <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> \} $ . Considering the next command in our set of instructions , we see the environment update code \verb | <var:d> := <var:d> + <var:f1> | . This line advances the precondition $ \{ <var:v> = <var:N> \land <var:f1> = <nat:2> * <var:N> \land <var:f0> = <nat:4> \land <var:d> = <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> \} $ to the postcondition $ \{ <var:v> = <var:N> \land <var:f0> = <nat:4> \land <var:d> = <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> * <var:N> \} $ . This is shown by the assignment rule in typical Hoare techniques . Jumping to the proceeding piece of code found in our series of commands , we have the variable assignmet statement defining $ <var:d> + <var:f0$ to $ <var:d>$ . This moves $ \{ <var:v> = <var:N> \land <var:f0> = <nat:4> \land <var:d> = <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> * <var:N> \} $ to $ \{ <var:v> = <var:N> \land <var:d> = <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:4> \} $ . This is guaranteed with the assignment law defined in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:v> = <var:N> }} <var:f1> := <var:v> ; <var:f2> := <var:f1> * <var:v> ; <var:f3> := <var:f2> * <var:v> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:2> ; <var:f2> := <var:f2> * <nat:2> ; <var:f3> := <var:f3> * <nat:4> ; <var:d> := <var:f3> <var:d> := <var:d> + <var:f2> <var:d> := <var:d> + <var:f1> <var:d> := <var:d> + <var:f0> {{ <var:d> = <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:f1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:f1> = <var:N> /\ <var:f2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:f1> = <var:N> /\ <var:f2> = <var:N> ^ <nat:2> /\ <var:f3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:f1> = <var:N> /\ <var:f2> = <var:N> ^ <nat:2> /\ <var:f3> = <var:N> ^ <nat:3> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:f1> = <nat:2> * <var:N> /\ <var:f2> = <var:N> ^ <nat:2> /\ <var:f3> = <var:N> ^ <nat:3> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:f1> = <nat:2> * <var:N> /\ <var:f2> = <nat:2> * <var:N> ^ <nat:2> /\ <var:f3> = <var:N> ^ <nat:3> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:f1> = <nat:2> * <var:N> /\ <var:f2> = <nat:2> * <var:N> ^ <nat:2> /\ <var:f3> = <nat:4> * <var:N> ^ <nat:3> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:f1> = <nat:2> * <var:N> /\ <var:f2> = <nat:2> * <var:N> ^ <nat:2> /\ <var:f0> = <nat:4> /\ <var:d> = <nat:4> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:f1> = <nat:2> * <var:N> /\ <var:f0> = <nat:4> /\ <var:d> = <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:f0> = <nat:4> /\ <var:d> = <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:d> = <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 