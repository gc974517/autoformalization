\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:2> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:O> ; <var:B> := <var:z1> ; <var:B> := <var:B> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:O> = <var:c> $ --- given every positive integers $ <var:c> $ --- prior to executing the list of instructions , it holds that we see $ <var:B> = <nat:1> * <var:c> + <nat:2> $ once program has terminated . \end{theorem} \begin{proof} Proving correctness for our list of instructions is done with typical Hoare reasoning . Moving onward , the variable assignmet line \verb | <var:z0> := <nat:2> ; | . This takes the precondition $ \{ <var:O> = <var:c> \} $ to the condition $ \{ <var:O> = <var:c> \land <var:z0> = <nat:2> \} $ . Taking another step toward the upcoming bit of code in our segment of code , we see the environment update command \verb | <var:z1> := <nat:1> ; | . This transfers the precondition $ \{ <var:O> = <var:c> \land <var:z0> = <nat:2> \} $ toward the condition $ \{ <var:O> = <var:c> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> \} $ . This is known to be sound using the assignment inference rule given by typical Hoare techniques . Honing in on the following step contained in the code segment , we have the assignment line assigning $ <var:z1> * <var:O> $ to $ <var:z1>$ . This moves the precondition $ \{ <var:O> = <var:c> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> \} $ to the postcondition $ \{ <var:O> = <var:c> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> \cdot <var:c> \} $ . This is shown to be logically sound using the assignment rule in standard Hoare reasoning . Paying attention to the proceeding statement in our series of commands , the environment update command \verb | <var:B> := <var:z1> ; | . This code transfers the precondition $ \{ <var:O> = <var:c> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> \cdot <var:c> \} $ as $ \{ <var:O> = <var:c> \land <var:z0> = <nat:2> \land <var:B> = <nat:1> \cdot <var:c> \} $ . Taking another step toward the next step contained in our code , the environment update statement binding $ <var:B> + <var:z0$ to $ <var:B>$ . This code forwards $ \{ <var:O> = <var:c> \land <var:z0> = <nat:2> \land <var:B> = <nat:1> \cdot <var:c> \} $ toward the condition $ \{ <var:O> = <var:c> \land <var:B> = <nat:1> \cdot <var:c> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:2> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:O> ; <var:B> := <var:z1> ; <var:B> := <var:B> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:O> = <var:c> }} <def:poly> {{ <var:B> = <nat:1> * <var:c> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:z0> = <nat:2> /\ <var:B> = <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:B> = <nat:1> * <var:c> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 