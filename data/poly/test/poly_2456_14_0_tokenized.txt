\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:3> ; <var:N1> := <nat:6> ; <var:N1> := <var:N1> * <var:Q> ; <var:N2> := <nat:6> ; <var:N2> := <var:N2> * <var:Q> ; <var:N2> := <var:N2> * <var:Q> ; <var:N3> := <nat:6> ; <var:N3> := <var:N3> * <var:Q> ; <var:N3> := <var:N3> * <var:Q> ; <var:N3> := <var:N3> * <var:Q> ; <var:P> := <var:N3> ; <var:P> := <var:P> + <var:N2> ; <var:P> := <var:P> + <var:N1> ; <var:P> := <var:P> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:Q> = <var:d> $ with some positive numbers $ <var:d> $ prior to running our set of commands then $ <var:P> = <nat:6> \cdot <var:d> ^ <nat:3> + <nat:6> \cdot <var:d> ^ <nat:2> + <nat:6> \cdot <var:d> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this segment of code can be done by typical Hoare reasoning . Now , \begin{verbatim} { <var:Q> = <var:d> } <var:N0> := <nat:3> { <var:Q> = <var:d> \land <var:N0> = <nat:3> } { <var:Q> = <var:d> \land <var:N0> = <nat:3> } <var:N1> := <nat:6> { <var:Q> = <var:d> \land <var:N0> = <nat:3> \land <var:N1> = <nat:6> } \end{verbatim} Moving onward , \begin{verbatim} { <var:Q> = <var:d> } <var:N0> := <nat:3> { <var:Q> = <var:d> \land <var:N0> = <nat:3> } { <var:Q> = <var:d> \land <var:N0> = <nat:3> } <var:N1> := <nat:6> { <var:Q> = <var:d> \land <var:N0> = <nat:3> \land <var:N1> = <nat:6> } \end{verbatim} This is guaranteed through the assignment scheme defined in typical Hoare techniques . Taking another step toward the next steps seen in our set of instructions , \begin{verbatim} { <var:Q> = <var:d> } <var:N0> := <nat:3> { <var:Q> = <var:d> \land <var:N0> = <nat:3> } { <var:Q> = <var:d> \land <var:N0> = <nat:3> } <var:N1> := <nat:6> { <var:Q> = <var:d> \land <var:N0> = <nat:3> \land <var:N1> = <nat:6> } { <var:Q> = <var:d> \land <var:N0> = <nat:3> \land <var:N1> = <nat:6> } <var:N1> := <var:N1> * <var:Q> { <var:Q> = <var:d> \land <var:N0> = <nat:3> \land <var:N1> = <nat:6> * <var:d> } { <var:Q> = <var:d> \land <var:N0> = <nat:3> \land <var:N1> = <nat:6> * <var:d> } <var:N2> := <nat:6> { <var:Q> = <var:d> \land <var:N0> = <nat:3> \land <var:N1> = <nat:6> * <var:d> \land <var:N2> = <nat:6> } { <var:Q> = <var:d> \land <var:N0> = <nat:3> \land <var:N1> = <nat:6> * <var:d> \land <var:N2> = <nat:6> } <var:N2> := <var:N2> * <var:Q> { <var:Q> = <var:d> \land <var:N0> = <nat:3> \land <var:N1> = <nat:6> * <var:d> \land <var:N2> = <nat:6> * <var:d> } { <var:Q> = <var:d> \land <var:N0> = <nat:3> \land <var:N1> = <nat:6> * <var:d> \land <var:N2> = <nat:6> * <var:d> } <var:N2> := <var:N2> * <var:Q> { <var:Q> = <var:d> \land <var:N0> = <nat:3> \land <var:N1> = <nat:6> * <var:d> \land <var:N2> = <nat:6> * <var:d> ^ <nat:2> } \end{verbatim} Shifting focus toward the following commands seen in our set of commands , \begin{verbatim} { <var:Q> = <var:d> } <var:N0> := <nat:3> { <var:Q> = <var:d> \land <var:N0> = <nat:3> } { <var:Q> = <var:d> \land <var:N0> = <nat:3> } <var:N1> := <nat:6> { <var:Q> = <var:d> \land <var:N0> = <nat:3> \land <var:N1> = <nat:6> } \end{verbatim} This is shown to be logically sound through the scheme given in standard Hoare logic . Advancing to the proceeding step contained in the segment of code , we see \begin{verbatim} { <var:Q> = <var:d> } <var:N0> := <nat:3> { <var:Q> = <var:d> \land <var:N0> = <nat:3> } \end{verbatim} Taking a look at the subsequent line in the set of commands , we have \begin{verbatim} { <var:Q> = <var:d> } <var:N0> := <nat:3> { <var:Q> = <var:d> \land <var:N0> = <nat:3> } \end{verbatim} This is guaranteed through the variable update law found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <def:poly> := <var:N0> := <nat:3> ; <var:N1> := <nat:6> ; <var:N1> := <var:N1> * <var:Q> ; <var:N2> := <nat:6> ; <var:N2> := <var:N2> * <var:Q> ; <var:N2> := <var:N2> * <var:Q> ; <var:N3> := <nat:6> ; <var:N3> := <var:N3> * <var:Q> ; <var:N3> := <var:N3> * <var:Q> ; <var:N3> := <var:N3> * <var:Q> ; <var:P> := <var:N3> ; <var:P> := <var:P> + <var:N2> ; <var:P> := <var:P> + <var:N1> ; <var:P> := <var:P> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:Q> = <var:d> }} <def:poly> {{ <var:P> = <nat:6> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:6> * <var:d> /\ <var:N2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:6> * <var:d> /\ <var:N2> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:6> * <var:d> /\ <var:N2> = <nat:6> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:6> * <var:d> /\ <var:N2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:N3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:6> * <var:d> /\ <var:N2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:N3> = <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:6> * <var:d> /\ <var:N2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:N3> = <nat:6> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:6> * <var:d> /\ <var:N2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:N3> = <nat:6> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:6> * <var:d> /\ <var:N2> = <nat:6> * <var:d> ^ <nat:2> /\ <var:P> = <nat:6> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:6> * <var:d> /\ <var:P> = <nat:6> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:N0> = <nat:3> /\ <var:P> = <nat:6> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> + <nat:6> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:P> = <nat:6> * <var:d> ^ <nat:3> + <nat:6> * <var:d> ^ <nat:2> + <nat:6> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 