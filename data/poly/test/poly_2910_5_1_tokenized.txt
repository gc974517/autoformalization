\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:n> ; <var:Y0> := <nat:3> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:t> := <var:Y1> <var:t> := <var:t> + <var:Y0> \end{verbatim} Allow it to be that $ <var:n> = <var:j> $ before the evaluation of the set of instructions , then we have $ <var:t> = <nat:3> \cdot <var:j> + <nat:3> $ . \end{theorem} \begin{proof} The proof of this code is demonstrated through usual Hoare techniques . Advancing , we see the variable assignmet command yielding $ <var:n> $ to $ <var:Y1>$ . This advances the condition $ \{ <var:n> = <var:j> \} $ toward the postcondition $ \{ <var:n> = <var:j> \land <var:Y1> = <var:j> \} $ . Now , we see the environment update line binding $ <nat:3> $ to $ <var:Y0>$ . This transfers $ \{ <var:n> = <var:j> \land <var:Y1> = <var:j> \} $ into $ \{ <var:n> = <var:j> \land <var:Y1> = <var:j> \land <var:Y0> = <nat:3> \} $ . Advancing , we see the line \verb | <var:Y1> := <var:Y1> * <nat:3> ; | . This forwards the condition $ \{ <var:n> = <var:j> \land <var:Y1> = <var:j> \land <var:Y0> = <nat:3> \} $ to $ \{ <var:n> = <var:j> \land <var:Y1> = <nat:3> \times <var:j> \land <var:Y0> = <nat:3> \} $ . Moving on to the next step , we have the variable binding command \verb | <var:t> := <var:Y1> | . This moves $ \{ <var:n> = <var:j> \land <var:Y1> = <nat:3> \times <var:j> \land <var:Y0> = <nat:3> \} $ to the postcondition $ \{ <var:n> = <var:j> \land <var:Y0> = <nat:3> \land <var:t> = <nat:3> \times <var:j> \} $ . This is shown using the assignment rule defined by Hoare reasoning . Moving forward , we see the binding line \verb | <var:t> := <var:t> + <var:Y0> | . This command takes the precondition $ \{ <var:n> = <var:j> \land <var:Y0> = <nat:3> \land <var:t> = <nat:3> \times <var:j> \} $ to the postcondition $ \{ <var:n> = <var:j> \land <var:t> = <nat:3> \times <var:j> + <nat:3> \} $ . This is deduced using the assignment scheme in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:n> = <var:j> }} <var:Y1> := <var:n> ; <var:Y0> := <nat:3> ; <var:Y1> := <var:Y1> * <nat:3> ; <var:t> := <var:Y1> <var:t> := <var:t> + <var:Y0> {{ <var:t> = <nat:3> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:Y1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:Y1> = <var:j> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:Y1> = <nat:3> * <var:j> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:Y0> = <nat:3> /\ <var:t> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:j> /\ <var:t> = <nat:3> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 