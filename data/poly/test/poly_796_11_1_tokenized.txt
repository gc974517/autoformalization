\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G1> := <var:M> ; <var:G2> := <var:G1> * <var:M> ; <var:G3> := <var:G2> * <var:M> ; <var:G0> := <nat:5> ; <var:G1> := <var:G1> * <nat:6> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:9> ; <var:Q> := <var:G3> <var:Q> := <var:Q> + <var:G2> <var:Q> := <var:Q> + <var:G1> <var:Q> := <var:Q> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> . Allow --- for all integers $ <var:W> $ --- that $ <var:M> = <var:W> $ before executing our set of commands , it follows that we see $ <var:Q> = <nat:9> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:6> \times <var:W> + <nat:5> $ after list of commands has finished . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions can be accomplished with standard Hoare techniques . Considering the proceeding line seen in the list of instructions , we have the variable binding command defining $ <var:M> $ toward $ <var:G1>$ . This statement advances $ \{ <var:M> = <var:W> \} $ to the condition $ \{ <var:M> = <var:W> \land <var:G1> = <var:W> \} $ . Keeping momentum , we have the environment update command \verb | <var:G2> := <var:G1> * <var:M> ; | . This redefines $ \{ <var:M> = <var:W> \land <var:G1> = <var:W> \} $ to the condition $ \{ <var:M> = <var:W> \land <var:G1> = <var:W> \land <var:G2> = <var:W> ^ <nat:2> \} $ . This is ensured with the assignment scheme given in Hoare reasoning . Taking another step toward the upcoming statement seen in our series of commands , we have the variable binding command assigning $ <var:G2> * <var:M> $ to $ <var:G3>$ . This transfers $ \{ <var:M> = <var:W> \land <var:G1> = <var:W> \land <var:G2> = <var:W> ^ <nat:2> \} $ as the condition $ \{ <var:M> = <var:W> \land <var:G1> = <var:W> \land <var:G2> = <var:W> ^ <nat:2> \land <var:G3> = <var:W> ^ <nat:3> \} $ . Advancing on , the binding line letting $ <nat:5> $ toward $ <var:G0>$ . This takes the condition $ \{ <var:M> = <var:W> \land <var:G1> = <var:W> \land <var:G2> = <var:W> ^ <nat:2> \land <var:G3> = <var:W> ^ <nat:3> \} $ into $ \{ <var:M> = <var:W> \land <var:G1> = <var:W> \land <var:G2> = <var:W> ^ <nat:2> \land <var:G3> = <var:W> ^ <nat:3> \land <var:G0> = <nat:5> \} $ . This is ensured using the assignment rule in Hoare reasoning . Looking at the upcoming command in the code , we have the variable binding code assigning $ <var:G1> * <nat:6> $ into $ <var:G1>$ . This statement takes the condition $ \{ <var:M> = <var:W> \land <var:G1> = <var:W> \land <var:G2> = <var:W> ^ <nat:2> \land <var:G3> = <var:W> ^ <nat:3> \land <var:G0> = <nat:5> \} $ into the condition $ \{ <var:M> = <var:W> \land <var:G1> = <nat:6> \times <var:W> \land <var:G2> = <var:W> ^ <nat:2> \land <var:G3> = <var:W> ^ <nat:3> \land <var:G0> = <nat:5> \} $ . This is shown to be logically sound through the assignment inference rule defined by usual Hoare techniques . Immediately after , the variable binding code yielding $ <var:G2> * <nat:2> $ toward $ <var:G2>$ . This advances the precondition $ \{ <var:M> = <var:W> \land <var:G1> = <nat:6> \times <var:W> \land <var:G2> = <var:W> ^ <nat:2> \land <var:G3> = <var:W> ^ <nat:3> \land <var:G0> = <nat:5> \} $ toward the condition $ \{ <var:M> = <var:W> \land <var:G1> = <nat:6> \times <var:W> \land <var:G2> = <nat:2> \times <var:W> ^ <nat:2> \land <var:G3> = <var:W> ^ <nat:3> \land <var:G0> = <nat:5> \} $ . Advancing to the next step , we have the binding code \verb | <var:G3> := <var:G3> * <nat:9> ; | . This redefines the condition $ \{ <var:M> = <var:W> \land <var:G1> = <nat:6> \times <var:W> \land <var:G2> = <nat:2> \times <var:W> ^ <nat:2> \land <var:G3> = <var:W> ^ <nat:3> \land <var:G0> = <nat:5> \} $ as $ \{ <var:M> = <var:W> \land <var:G1> = <nat:6> \times <var:W> \land <var:G2> = <nat:2> \times <var:W> ^ <nat:2> \land <var:G3> = <nat:9> \times <var:W> ^ <nat:3> \land <var:G0> = <nat:5> \} $ . This is sound by the assignment law found in typical Hoare logic . Looking at the subsequent bit of code in our list of instructions , we have the command \verb | <var:Q> := <var:G3> | . This transfers $ \{ <var:M> = <var:W> \land <var:G1> = <nat:6> \times <var:W> \land <var:G2> = <nat:2> \times <var:W> ^ <nat:2> \land <var:G3> = <nat:9> \times <var:W> ^ <nat:3> \land <var:G0> = <nat:5> \} $ as the postcondition $ \{ <var:M> = <var:W> \land <var:G1> = <nat:6> \times <var:W> \land <var:G2> = <nat:2> \times <var:W> ^ <nat:2> \land <var:G0> = <nat:5> \land <var:Q> = <nat:9> \times <var:W> ^ <nat:3> \} $ . Immediately following , we see the binding statement assigning $ <var:Q> + <var:G2$ into $ <var:Q>$ . This moves the precondition $ \{ <var:M> = <var:W> \land <var:G1> = <nat:6> \times <var:W> \land <var:G2> = <nat:2> \times <var:W> ^ <nat:2> \land <var:G0> = <nat:5> \land <var:Q> = <nat:9> \times <var:W> ^ <nat:3> \} $ as the condition $ \{ <var:M> = <var:W> \land <var:G1> = <nat:6> \times <var:W> \land <var:G0> = <nat:5> \land <var:Q> = <nat:9> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> \} $ . This is deduced using the assignment inference rule given in Hoare techniques . Stepping through , we have the binding code assigning $ <var:Q> + <var:G1$ to $ <var:Q>$ . This command advances the precondition $ \{ <var:M> = <var:W> \land <var:G1> = <nat:6> \times <var:W> \land <var:G0> = <nat:5> \land <var:Q> = <nat:9> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> \} $ to the postcondition $ \{ <var:M> = <var:W> \land <var:G0> = <nat:5> \land <var:Q> = <nat:9> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:6> \times <var:W> \} $ . Moving onward , the binding line binding $ <var:Q> + <var:G0$ into $ <var:Q>$ . This advances $ \{ <var:M> = <var:W> \land <var:G0> = <nat:5> \land <var:Q> = <nat:9> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:6> \times <var:W> \} $ to $ \{ <var:M> = <var:W> \land <var:Q> = <nat:9> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:6> \times <var:W> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <def:poly> := <var:G1> := <var:M> ; <var:G2> := <var:G1> * <var:M> ; <var:G3> := <var:G2> * <var:M> ; <var:G0> := <nat:5> ; <var:G1> := <var:G1> * <nat:6> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:9> ; <var:Q> := <var:G3> <var:Q> := <var:Q> + <var:G2> <var:Q> := <var:Q> + <var:G1> <var:Q> := <var:Q> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:M> = <var:W> }} <def:poly> {{ <var:Q> = <nat:9> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:G1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:G1> = <var:W> /\ <var:G2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:G1> = <var:W> /\ <var:G2> = <var:W> ^ <nat:2> /\ <var:G3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:G1> = <var:W> /\ <var:G2> = <var:W> ^ <nat:2> /\ <var:G3> = <var:W> ^ <nat:3> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:G1> = <nat:6> * <var:W> /\ <var:G2> = <var:W> ^ <nat:2> /\ <var:G3> = <var:W> ^ <nat:3> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:G1> = <nat:6> * <var:W> /\ <var:G2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:G3> = <var:W> ^ <nat:3> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:G1> = <nat:6> * <var:W> /\ <var:G2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:G3> = <nat:9> * <var:W> ^ <nat:3> /\ <var:G0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:G1> = <nat:6> * <var:W> /\ <var:G2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:G0> = <nat:5> /\ <var:Q> = <nat:9> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:G1> = <nat:6> * <var:W> /\ <var:G0> = <nat:5> /\ <var:Q> = <nat:9> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:G0> = <nat:5> /\ <var:Q> = <nat:9> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:W> /\ <var:Q> = <nat:9> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 