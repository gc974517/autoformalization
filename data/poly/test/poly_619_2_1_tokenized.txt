\begin{document} \begin{theorem} Let the following series of instructions : \begin{verbatim} <var:d0> := <nat:4> ; <var:I> := <var:d0> \end{verbatim} Allowing $ <var:l> = <var:x> $ , for some $ <var:x> \in \mathbb{Z}^+ $ , ahead of the evaluation of the program then we see $ <var:I> = <nat:4> $ once list of instructions finishes . \end{theorem} \begin{proof} The method of proof for the code segment is demonstrated with typical Hoare logic . Following , the command \verb | <var:d0> := <nat:4> ; | . This redefines the precondition $ \{ <var:l> = <var:x> \} $ as the condition $ \{ <var:l> = <var:x> \land <var:d0> = <nat:4> \} $ . Observing the next command seen in the list of instructions , we see the code assigning $ <var:d0$ toward $ <var:I>$ . This forwards the precondition $ \{ <var:l> = <var:x> \land <var:d0> = <nat:4> \} $ into $ \{ <var:l> = <var:x> \land <var:I> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:l> = <var:x> }} <var:d0> := <nat:4> ; <var:I> := <var:d0> {{ <var:I> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:x> /\ <var:I> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 