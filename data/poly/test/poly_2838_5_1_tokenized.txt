\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:a1> := <var:m> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:2> ; <var:b> := <var:a1> <var:b> := <var:b> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> . Allowing $ <var:m> = <var:i> $ ahead of the evaluation of the code segment it holds that $ <var:b> = <nat:2> \cdot <var:i> + <nat:1> $ after program is done . \end{theorem} \begin{proof} Observe that the following decorated code segment . \begin{eqnarray} \{ <var:m> = <var:i> \} \\ <var:a1> := <var:m> ; \\ \{ <var:m> = <var:i> \land <var:a1> = <var:i> \} \\ <var:a0> := <nat:1> ; \\ \{ <var:m> = <var:i> \land <var:a1> = <var:i> \land <var:a0> = <nat:1> \} \\ <var:a1> := <var:a1> * <nat:2> ; \\ \{ <var:m> = <var:i> \land <var:a1> = <nat:2> \cdot <var:i> \land <var:a0> = <nat:1> \} \\ <var:b> := <var:a1> \\ \{ <var:m> = <var:i> \land <var:a0> = <nat:1> \land <var:b> = <nat:2> \cdot <var:i> \} \\ <var:b> := <var:b> + <var:a0> \\ \{ <var:m> = <var:i> \land <var:b> = <nat:2> \cdot <var:i> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a1> := <var:m> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:2> ; <var:b> := <var:a1> <var:b> := <var:b> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:m> = <var:i> }} <def:poly> {{ <var:b> = <nat:2> * <var:i> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:a1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:a1> = <var:i> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:a1> = <nat:2> * <var:i> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:a0> = <nat:1> /\ <var:b> = <nat:2> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:i> /\ <var:b> = <nat:2> * <var:i> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 