\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:g1> := <var:z> ; <var:g2> := <var:g1> * <var:z> ; <var:g3> := <var:g2> * <var:z> ; <var:g0> := <nat:5> ; <var:g1> := <var:g1> * <nat:5> ; <var:g2> := <var:g2> * <nat:7> ; <var:g3> := <var:g3> * <nat:4> ; <var:B> := <var:g3> <var:B> := <var:B> + <var:g2> <var:B> := <var:B> + <var:g1> <var:B> := <var:B> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:z> = <var:p> $ before the evaluation of the segment of code it follows that $ <var:B> = <nat:4> \cdot <var:p> ^ <nat:3> + <nat:7> \cdot <var:p> ^ <nat:2> + <nat:5> \cdot <var:p> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions is clear by usual Hoare techniques . Shifting focus toward the proceeding piece of code seen in our series of commands , we have the command binding $ <var:z> $ as $ <var:g1>$ . This forwards $ \{ <var:z> = <var:p> \} $ as the postcondition $ \{ <var:z> = <var:p> \land <var:g1> = <var:p> \} $ . Honing in on the following statement seen in our set of commands , the variable update command defining $ <var:g1> * <var:z> $ into $ <var:g2>$ . This statement advances the precondition $ \{ <var:z> = <var:p> \land <var:g1> = <var:p> \} $ into $ \{ <var:z> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \} $ . This is known to be sound using the assignment law from usual Hoare techniques . Looking at the subsequent statement found in our set of commands , we see the variable update code yielding $ <var:g2> * <var:z> $ to $ <var:g3>$ . This moves the precondition $ \{ <var:z> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \} $ as $ \{ <var:z> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \} $ . This is shown to be logically sound by the assignment law in usual Hoare techniques . Moving forward to the proceeding bit of code found in the code , the variable binding line \verb | <var:g0> := <nat:5> ; | . This statement takes the precondition $ \{ <var:z> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \} $ to the postcondition $ \{ <var:z> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \land <var:g0> = <nat:5> \} $ . This is given through the assignment scheme in Hoare techniques . Considering the proceeding command found in the list of instructions , we have the variable assignmet code yielding $ <var:g1> * <nat:5> $ toward $ <var:g1>$ . This command takes $ \{ <var:z> = <var:p> \land <var:g1> = <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \land <var:g0> = <nat:5> \} $ as the postcondition $ \{ <var:z> = <var:p> \land <var:g1> = <nat:5> * <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \land <var:g0> = <nat:5> \} $ . Following , we see the variable assignmet code \verb | <var:g2> := <var:g2> * <nat:7> ; | . This code advances $ \{ <var:z> = <var:p> \land <var:g1> = <nat:5> * <var:p> \land <var:g2> = <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \land <var:g0> = <nat:5> \} $ into the condition $ \{ <var:z> = <var:p> \land <var:g1> = <nat:5> * <var:p> \land <var:g2> = <nat:7> * <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \land <var:g0> = <nat:5> \} $ . Jumping to the following line in our segment of code , the command binding $ <var:g3> * <nat:4> $ to $ <var:g3>$ . This command takes $ \{ <var:z> = <var:p> \land <var:g1> = <nat:5> * <var:p> \land <var:g2> = <nat:7> * <var:p> ^ <nat:2> \land <var:g3> = <var:p> ^ <nat:3> \land <var:g0> = <nat:5> \} $ as $ \{ <var:z> = <var:p> \land <var:g1> = <nat:5> * <var:p> \land <var:g2> = <nat:7> * <var:p> ^ <nat:2> \land <var:g3> = <nat:4> * <var:p> ^ <nat:3> \land <var:g0> = <nat:5> \} $ . Honing in on the subsequent command in the code , the environment update code defining $ <var:g3$ into $ <var:B>$ . This command takes the precondition $ \{ <var:z> = <var:p> \land <var:g1> = <nat:5> * <var:p> \land <var:g2> = <nat:7> * <var:p> ^ <nat:2> \land <var:g3> = <nat:4> * <var:p> ^ <nat:3> \land <var:g0> = <nat:5> \} $ into $ \{ <var:z> = <var:p> \land <var:g1> = <nat:5> * <var:p> \land <var:g2> = <nat:7> * <var:p> ^ <nat:2> \land <var:g0> = <nat:5> \land <var:B> = <nat:4> * <var:p> ^ <nat:3> \} $ . This is sound by the assignment rule from typical Hoare reasoning . Taking another step toward the next line found in our program , we have the statement \verb | <var:B> := <var:B> + <var:g2> | . This advances the condition $ \{ <var:z> = <var:p> \land <var:g1> = <nat:5> * <var:p> \land <var:g2> = <nat:7> * <var:p> ^ <nat:2> \land <var:g0> = <nat:5> \land <var:B> = <nat:4> * <var:p> ^ <nat:3> \} $ to the condition $ \{ <var:z> = <var:p> \land <var:g1> = <nat:5> * <var:p> \land <var:g0> = <nat:5> \land <var:B> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> \} $ . Shifting focus toward the proceeding command in the series of commands , we see the environment update statement yielding $ <var:B> + <var:g1$ as $ <var:B>$ . This takes $ \{ <var:z> = <var:p> \land <var:g1> = <nat:5> * <var:p> \land <var:g0> = <nat:5> \land <var:B> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> \} $ as the condition $ \{ <var:z> = <var:p> \land <var:g0> = <nat:5> \land <var:B> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:5> * <var:p> \} $ . This is sound with the assignment rule found in Hoare techniques . Observing the following step seen in our set of commands , the binding command yielding $ <var:B> + <var:g0$ into $ <var:B>$ . This statement moves the precondition $ \{ <var:z> = <var:p> \land <var:g0> = <nat:5> \land <var:B> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:5> * <var:p> \} $ to the condition $ \{ <var:z> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g1> := <var:z> ; <var:g2> := <var:g1> * <var:z> ; <var:g3> := <var:g2> * <var:z> ; <var:g0> := <nat:5> ; <var:g1> := <var:g1> * <nat:5> ; <var:g2> := <var:g2> * <nat:7> ; <var:g3> := <var:g3> * <nat:4> ; <var:B> := <var:g3> <var:B> := <var:B> + <var:g2> <var:B> := <var:B> + <var:g1> <var:B> := <var:B> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:z> = <var:p> }} <def:poly> {{ <var:B> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:g1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <var:p> ^ <nat:2> /\ <var:g3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:g1> = <var:p> /\ <var:g2> = <var:p> ^ <nat:2> /\ <var:g3> = <var:p> ^ <nat:3> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:g1> = <nat:5> * <var:p> /\ <var:g2> = <var:p> ^ <nat:2> /\ <var:g3> = <var:p> ^ <nat:3> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:g1> = <nat:5> * <var:p> /\ <var:g2> = <nat:7> * <var:p> ^ <nat:2> /\ <var:g3> = <var:p> ^ <nat:3> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:g1> = <nat:5> * <var:p> /\ <var:g2> = <nat:7> * <var:p> ^ <nat:2> /\ <var:g3> = <nat:4> * <var:p> ^ <nat:3> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:g1> = <nat:5> * <var:p> /\ <var:g2> = <nat:7> * <var:p> ^ <nat:2> /\ <var:g0> = <nat:5> /\ <var:B> = <nat:4> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:g1> = <nat:5> * <var:p> /\ <var:g0> = <nat:5> /\ <var:B> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:g0> = <nat:5> /\ <var:B> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:B> = <nat:4> * <var:p> ^ <nat:3> + <nat:7> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 