\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:3> ; <var:z2> := <nat:1> ; <var:z2> := <var:z2> * <var:h> ; <var:z2> := <var:z2> * <var:h> ; <var:z4> := <nat:3> ; <var:z4> := <var:z4> * <var:h> ; <var:z4> := <var:z4> * <var:h> ; <var:z4> := <var:z4> * <var:h> ; <var:z4> := <var:z4> * <var:h> ; <var:i> := <var:z4> ; <var:i> := <var:i> + <var:z2> ; <var:i> := <var:i> + <var:z0> \end{verbatim} Assuming $ <var:h> = <var:v> $ prior to interpreting the series of instructions , it follows that $ <var:i> = <nat:3> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The argument for our series of commands is demonstrated with usual Hoare logic . Moving on to the proceeding line of code found in the code , we have the variable binding statement yielding $ <nat:3> $ toward $ <var:z0>$ . This transfers $ \{ <var:h> = <var:v> \} $ to $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \} $ . Going forward , we see the variable update command \verb | <var:z2> := <nat:1> ; | . This code takes the condition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \} $ to the postcondition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \} $ . This is deduced using the assignment law found in typical Hoare logic . Immediately following , the binding code \verb | <var:z2> := <var:z2> * <var:h> ; | . This moves the precondition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \} $ into $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> \} $ . This is shown using the assignment scheme in usual Hoare techniques . Now , we have the variable update command \verb | <var:z2> := <var:z2> * <var:h> ; | . This statement takes the precondition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> \} $ toward the postcondition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \} $ . Focusing on the proceeding line contained in the code segment , we have the assignment line \verb | <var:z4> := <nat:3> ; | . This advances the precondition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \} $ to the postcondition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:z4> = <nat:3> \} $ . This is shown by the assignment scheme defined by Hoare techniques . After , we have the variable binding statement \verb | <var:z4> := <var:z4> * <var:h> ; | . This code advances the precondition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:z4> = <nat:3> \} $ as $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:z4> = <nat:3> \times <var:v> \} $ . Paying attention to the following bit of code seen in our program , we see the assignment line \verb | <var:z4> := <var:z4> * <var:h> ; | . This advances the condition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:z4> = <nat:3> \times <var:v> \} $ as $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:z4> = <nat:3> \times <var:v> ^ <nat:2> \} $ . Following , we have the variable assignmet statement \verb | <var:z4> := <var:z4> * <var:h> ; | . This forwards the precondition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:z4> = <nat:3> \times <var:v> ^ <nat:2> \} $ as $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:z4> = <nat:3> \times <var:v> ^ <nat:3> \} $ . Stepping forward , we see the environment update command yielding $ <var:z4> * <var:h> $ to $ <var:z4>$ . This takes $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:z4> = <nat:3> \times <var:v> ^ <nat:3> \} $ as the condition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:z4> = <nat:3> \times <var:v> ^ <nat:4> \} $ . This is deduced by the assignment rule defined in usual Hoare logic . Advancing , we have the variable assignmet code \verb | <var:i> := <var:z4> ; | . This code redefines the precondition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:z4> = <nat:3> \times <var:v> ^ <nat:4> \} $ toward the postcondition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:i> = <nat:3> \times <var:v> ^ <nat:4> \} $ . This is given with the assignment rule given by Hoare logic . Advancing , the variable update command letting $ <var:i> + <var:z2> $ into $ <var:i>$ . This code transfers the precondition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:z2> = <nat:1> \times <var:v> ^ <nat:2> \land <var:i> = <nat:3> \times <var:v> ^ <nat:4> \} $ toward the condition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:i> = <nat:3> \times <var:v> ^ <nat:4> + <nat:1> \times <var:v> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme defined in Hoare techniques . Advancing , we have the assignment command giving $ <var:i> + <var:z0$ as $ <var:i>$ . This transfers the precondition $ \{ <var:h> = <var:v> \land <var:z0> = <nat:3> \land <var:i> = <nat:3> \times <var:v> ^ <nat:4> + <nat:1> \times <var:v> ^ <nat:2> \} $ as $ \{ <var:h> = <var:v> \land <var:i> = <nat:3> \times <var:v> ^ <nat:4> + <nat:1> \times <var:v> ^ <nat:2> + <nat:3> \} $ . This is deduced using the assignment rule obtained from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z4> : string := " <var:z4> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:h> = <var:v> }} <var:z0> := <nat:3> ; <var:z2> := <nat:1> ; <var:z2> := <var:z2> * <var:h> ; <var:z2> := <var:z2> * <var:h> ; <var:z4> := <nat:3> ; <var:z4> := <var:z4> * <var:h> ; <var:z4> := <var:z4> * <var:h> ; <var:z4> := <var:z4> * <var:h> ; <var:z4> := <var:z4> * <var:h> ; <var:i> := <var:z4> ; <var:i> := <var:i> + <var:z2> ; <var:i> := <var:i> + <var:z0> {{ <var:i> = <nat:3> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:z0> = <nat:3> /\ <var:z2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:z0> = <nat:3> /\ <var:z2> = <nat:1> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:z0> = <nat:3> /\ <var:z2> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:z0> = <nat:3> /\ <var:z2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:z4> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:z0> = <nat:3> /\ <var:z2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:z4> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:z0> = <nat:3> /\ <var:z2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:z4> = <nat:3> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:z0> = <nat:3> /\ <var:z2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:z4> = <nat:3> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:z0> = <nat:3> /\ <var:z2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:z4> = <nat:3> * <var:v> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:z0> = <nat:3> /\ <var:z2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:i> = <nat:3> * <var:v> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:z0> = <nat:3> /\ <var:i> = <nat:3> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:v> /\ <var:i> = <nat:3> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 