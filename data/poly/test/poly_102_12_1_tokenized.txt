\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W1> := <var:X> ; <var:W2> := <var:W1> * <var:X> ; <var:W3> := <var:W2> * <var:X> ; <var:W4> := <var:W3> * <var:X> ; <var:W0> := <nat:5> ; <var:W2> := <var:W2> * <nat:5> ; <var:W3> := <var:W3> * <nat:5> ; <var:W4> := <var:W4> * <nat:9> ; <var:F> := <var:W4> <var:F> := <var:F> + <var:W3> <var:F> := <var:F> + <var:W2> <var:F> := <var:F> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> in \emph{Imp} . Given , given some $ <var:V> $ , $ <var:X> = <var:V> $ prior to interpreting this list of commands , then we see $ <var:F> = <nat:9> * <var:V> ^ <nat:4> + <nat:5> * <var:V> ^ <nat:3> + <nat:5> * <var:V> ^ <nat:2> + <nat:5> $ when series of instructions executes . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions is accomplished by this decorated list of commands . \begin{eqnarray} \{ <var:X> = <var:V> \} \\ <var:W1> := <var:X> ; \\ \{ <var:X> = <var:V> \land <var:W1> = <var:V> \} \\ <var:W2> := <var:W1> * <var:X> ; \\ \{ <var:X> = <var:V> \land <var:W1> = <var:V> \land <var:W2> = <var:V> ^ <nat:2> \} \\ <var:W3> := <var:W2> * <var:X> ; \\ \{ <var:X> = <var:V> \land <var:W1> = <var:V> \land <var:W2> = <var:V> ^ <nat:2> \land <var:W3> = <var:V> ^ <nat:3> \} \\ <var:W4> := <var:W3> * <var:X> ; \\ \{ <var:X> = <var:V> \land <var:W1> = <var:V> \land <var:W2> = <var:V> ^ <nat:2> \land <var:W3> = <var:V> ^ <nat:3> \land <var:W4> = <var:V> ^ <nat:4> \} \\ <var:W0> := <nat:5> ; \\ \{ <var:X> = <var:V> \land <var:W1> = <var:V> \land <var:W2> = <var:V> ^ <nat:2> \land <var:W3> = <var:V> ^ <nat:3> \land <var:W4> = <var:V> ^ <nat:4> \land <var:W0> = <nat:5> \} \\ <var:W2> := <var:W2> * <nat:5> ; \\ \{ <var:X> = <var:V> \land <var:W1> = <var:V> \land <var:W2> = <nat:5> \times <var:V> ^ <nat:2> \land <var:W3> = <var:V> ^ <nat:3> \land <var:W4> = <var:V> ^ <nat:4> \land <var:W0> = <nat:5> \} \\ <var:W3> := <var:W3> * <nat:5> ; \\ \{ <var:X> = <var:V> \land <var:W1> = <var:V> \land <var:W2> = <nat:5> \times <var:V> ^ <nat:2> \land <var:W3> = <nat:5> \times <var:V> ^ <nat:3> \land <var:W4> = <var:V> ^ <nat:4> \land <var:W0> = <nat:5> \} \\ <var:W4> := <var:W4> * <nat:9> ; \\ \{ <var:X> = <var:V> \land <var:W1> = <var:V> \land <var:W2> = <nat:5> \times <var:V> ^ <nat:2> \land <var:W3> = <nat:5> \times <var:V> ^ <nat:3> \land <var:W4> = <nat:9> \times <var:V> ^ <nat:4> \land <var:W0> = <nat:5> \} \\ <var:F> := <var:W4> \\ \{ <var:X> = <var:V> \land <var:W1> = <var:V> \land <var:W2> = <nat:5> \times <var:V> ^ <nat:2> \land <var:W3> = <nat:5> \times <var:V> ^ <nat:3> \land <var:W0> = <nat:5> \land <var:F> = <nat:9> \times <var:V> ^ <nat:4> \} \\ <var:F> := <var:F> + <var:W3> \\ \{ <var:X> = <var:V> \land <var:W1> = <var:V> \land <var:W2> = <nat:5> \times <var:V> ^ <nat:2> \land <var:W0> = <nat:5> \land <var:F> = <nat:9> \times <var:V> ^ <nat:4> + <nat:5> \times <var:V> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:W2> \\ \{ <var:X> = <var:V> \land <var:W1> = <var:V> \land <var:W0> = <nat:5> \land <var:F> = <nat:9> \times <var:V> ^ <nat:4> + <nat:5> \times <var:V> ^ <nat:3> + <nat:5> \times <var:V> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:W0> \\ \{ <var:X> = <var:V> \land <var:F> = <nat:9> \times <var:V> ^ <nat:4> + <nat:5> \times <var:V> ^ <nat:3> + <nat:5> \times <var:V> ^ <nat:2> + <nat:5> \} \end{eqnarray} Using Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <var:W4> : string := " <var:W4> " . Definition <def:poly> := <var:W1> := <var:X> ; <var:W2> := <var:W1> * <var:X> ; <var:W3> := <var:W2> * <var:X> ; <var:W4> := <var:W3> * <var:X> ; <var:W0> := <nat:5> ; <var:W2> := <var:W2> * <nat:5> ; <var:W3> := <var:W3> * <nat:5> ; <var:W4> := <var:W4> * <nat:9> ; <var:F> := <var:W4> <var:F> := <var:F> + <var:W3> <var:F> := <var:F> + <var:W2> <var:F> := <var:F> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:X> = <var:V> }} <def:poly> {{ <var:F> = <nat:9> * <var:V> ^ <nat:4> + <nat:5> * <var:V> ^ <nat:3> + <nat:5> * <var:V> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:W1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:W1> = <var:V> /\ <var:W2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:W1> = <var:V> /\ <var:W2> = <var:V> ^ <nat:2> /\ <var:W3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:W1> = <var:V> /\ <var:W2> = <var:V> ^ <nat:2> /\ <var:W3> = <var:V> ^ <nat:3> /\ <var:W4> = <var:V> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:W1> = <var:V> /\ <var:W2> = <var:V> ^ <nat:2> /\ <var:W3> = <var:V> ^ <nat:3> /\ <var:W4> = <var:V> ^ <nat:4> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:W1> = <var:V> /\ <var:W2> = <nat:5> * <var:V> ^ <nat:2> /\ <var:W3> = <var:V> ^ <nat:3> /\ <var:W4> = <var:V> ^ <nat:4> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:W1> = <var:V> /\ <var:W2> = <nat:5> * <var:V> ^ <nat:2> /\ <var:W3> = <nat:5> * <var:V> ^ <nat:3> /\ <var:W4> = <var:V> ^ <nat:4> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:W1> = <var:V> /\ <var:W2> = <nat:5> * <var:V> ^ <nat:2> /\ <var:W3> = <nat:5> * <var:V> ^ <nat:3> /\ <var:W4> = <nat:9> * <var:V> ^ <nat:4> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:W1> = <var:V> /\ <var:W2> = <nat:5> * <var:V> ^ <nat:2> /\ <var:W3> = <nat:5> * <var:V> ^ <nat:3> /\ <var:W0> = <nat:5> /\ <var:F> = <nat:9> * <var:V> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:W1> = <var:V> /\ <var:W2> = <nat:5> * <var:V> ^ <nat:2> /\ <var:W0> = <nat:5> /\ <var:F> = <nat:9> * <var:V> ^ <nat:4> + <nat:5> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:W1> = <var:V> /\ <var:W0> = <nat:5> /\ <var:F> = <nat:9> * <var:V> ^ <nat:4> + <nat:5> * <var:V> ^ <nat:3> + <nat:5> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:V> /\ <var:F> = <nat:9> * <var:V> ^ <nat:4> + <nat:5> * <var:V> ^ <nat:3> + <nat:5> * <var:V> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 