\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:G1> := <var:z> ; <var:G2> := <var:G1> * <var:z> ; <var:G3> := <var:G2> * <var:z> ; <var:G4> := <var:G3> * <var:z> ; <var:G0> := <nat:6> ; <var:G3> := <var:G3> * <nat:6> ; <var:G4> := <var:G4> * <nat:5> ; <var:b> := <var:G4> <var:b> := <var:b> + <var:G3> <var:b> := <var:b> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Allow it to hold that $ <var:z> = <var:r> $ ( taking whole numbers $ <var:r> $ ) ahead of running the list of commands it follows that we see $ <var:b> = <nat:5> * <var:r> ^ <nat:4> + <nat:6> * <var:r> ^ <nat:3> + <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques gives : \begin{eqnarray} \{ <var:z> = <var:r> \} \\ <var:G1> := <var:z> ; \\ \{ <var:z> = <var:r> \land <var:G1> = <var:r> \} \\ <var:G2> := <var:G1> * <var:z> ; \\ \{ <var:z> = <var:r> \land <var:G1> = <var:r> \land <var:G2> = <var:r> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:z> ; \\ \{ <var:z> = <var:r> \land <var:G1> = <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G3> = <var:r> ^ <nat:3> \} \\ <var:G4> := <var:G3> * <var:z> ; \\ \{ <var:z> = <var:r> \land <var:G1> = <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G3> = <var:r> ^ <nat:3> \land <var:G4> = <var:r> ^ <nat:4> \} \\ <var:G0> := <nat:6> ; \\ \{ <var:z> = <var:r> \land <var:G1> = <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G3> = <var:r> ^ <nat:3> \land <var:G4> = <var:r> ^ <nat:4> \land <var:G0> = <nat:6> \} \\ <var:G3> := <var:G3> * <nat:6> ; \\ \{ <var:z> = <var:r> \land <var:G1> = <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G3> = <nat:6> * <var:r> ^ <nat:3> \land <var:G4> = <var:r> ^ <nat:4> \land <var:G0> = <nat:6> \} \\ <var:G4> := <var:G4> * <nat:5> ; \\ \{ <var:z> = <var:r> \land <var:G1> = <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G3> = <nat:6> * <var:r> ^ <nat:3> \land <var:G4> = <nat:5> * <var:r> ^ <nat:4> \land <var:G0> = <nat:6> \} \\ <var:b> := <var:G4> \\ \{ <var:z> = <var:r> \land <var:G1> = <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G3> = <nat:6> * <var:r> ^ <nat:3> \land <var:G0> = <nat:6> \land <var:b> = <nat:5> * <var:r> ^ <nat:4> \} \\ <var:b> := <var:b> + <var:G3> \\ \{ <var:z> = <var:r> \land <var:G1> = <var:r> \land <var:G2> = <var:r> ^ <nat:2> \land <var:G0> = <nat:6> \land <var:b> = <nat:5> * <var:r> ^ <nat:4> + <nat:6> * <var:r> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:G0> \\ \{ <var:z> = <var:r> \land <var:b> = <nat:5> * <var:r> ^ <nat:4> + <nat:6> * <var:r> ^ <nat:3> + <nat:6> \} \end{eqnarray} As a result , the series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <var:G4> : string := " <var:G4> " . Definition <def:poly> := <var:G1> := <var:z> ; <var:G2> := <var:G1> * <var:z> ; <var:G3> := <var:G2> * <var:z> ; <var:G4> := <var:G3> * <var:z> ; <var:G0> := <nat:6> ; <var:G3> := <var:G3> * <nat:6> ; <var:G4> := <var:G4> * <nat:5> ; <var:b> := <var:G4> <var:b> := <var:b> + <var:G3> <var:b> := <var:b> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:z> = <var:r> }} <def:poly> {{ <var:b> = <nat:5> * <var:r> ^ <nat:4> + <nat:6> * <var:r> ^ <nat:3> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:G1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:G1> = <var:r> /\ <var:G2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:G1> = <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:G1> = <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G3> = <var:r> ^ <nat:3> /\ <var:G4> = <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:G1> = <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G3> = <var:r> ^ <nat:3> /\ <var:G4> = <var:r> ^ <nat:4> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:G1> = <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G3> = <nat:6> * <var:r> ^ <nat:3> /\ <var:G4> = <var:r> ^ <nat:4> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:G1> = <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G3> = <nat:6> * <var:r> ^ <nat:3> /\ <var:G4> = <nat:5> * <var:r> ^ <nat:4> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:G1> = <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G3> = <nat:6> * <var:r> ^ <nat:3> /\ <var:G0> = <nat:6> /\ <var:b> = <nat:5> * <var:r> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:G1> = <var:r> /\ <var:G2> = <var:r> ^ <nat:2> /\ <var:G0> = <nat:6> /\ <var:b> = <nat:5> * <var:r> ^ <nat:4> + <nat:6> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:r> /\ <var:b> = <nat:5> * <var:r> ^ <nat:4> + <nat:6> * <var:r> ^ <nat:3> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 