\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:w> ; <var:d2> := <var:d1> * <var:w> ; <var:d0> := <nat:2> ; <var:d1> := <var:d1> * <nat:8> ; <var:d2> := <var:d2> * <nat:6> ; <var:h> := <var:d2> <var:h> := <var:h> + <var:d1> <var:h> := <var:h> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> in \emph{Imp} . Assuming that $ <var:w> = <var:s> $ , taking whole numbers $ <var:s> $ , ahead of evaluating the series of instructions , it holds that we see $ <var:h> = <nat:6> \times <var:s> ^ <nat:2> + <nat:8> \times <var:s> + <nat:2> $ once set of instructions has exited . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions is demonstrated by Hoare techniques . Moving on to the next step , we have the variable update command \verb | <var:d1> := <var:w> ; | . This advances the condition $ \{ <var:w> = <var:s> \} $ toward the postcondition $ \{ <var:w> = <var:s> \land <var:d1> = <var:s> \} $ . This is deduced using the assignment law given in Hoare reasoning . Moving on to the proceeding command found in our set of instructions , we see the variable update command \verb | <var:d2> := <var:d1> * <var:w> ; | . This command forwards the precondition $ \{ <var:w> = <var:s> \land <var:d1> = <var:s> \} $ as the condition $ \{ <var:w> = <var:s> \land <var:d1> = <var:s> \land <var:d2> = <var:s> ^ <nat:2> \} $ . Paying attention to the upcoming line of code contained in the series of commands , the binding statement assigning $ <nat:2> $ into $ <var:d0>$ . This transfers the condition $ \{ <var:w> = <var:s> \land <var:d1> = <var:s> \land <var:d2> = <var:s> ^ <nat:2> \} $ as the postcondition $ \{ <var:w> = <var:s> \land <var:d1> = <var:s> \land <var:d2> = <var:s> ^ <nat:2> \land <var:d0> = <nat:2> \} $ . This is shown to be logically sound using the assignment inference rule defined in Hoare logic . Looking at the proceeding bit of code seen in our code segment , the variable assignmet code defining $ <var:d1> * <nat:8> $ to $ <var:d1>$ . This takes $ \{ <var:w> = <var:s> \land <var:d1> = <var:s> \land <var:d2> = <var:s> ^ <nat:2> \land <var:d0> = <nat:2> \} $ into $ \{ <var:w> = <var:s> \land <var:d1> = <nat:8> \times <var:s> \land <var:d2> = <var:s> ^ <nat:2> \land <var:d0> = <nat:2> \} $ . This is given using the assignment scheme defined by usual Hoare reasoning . Advancing to the proceeding step found in our segment of code , the assignment statement letting $ <var:d2> * <nat:6> $ into $ <var:d2>$ . This takes the condition $ \{ <var:w> = <var:s> \land <var:d1> = <nat:8> \times <var:s> \land <var:d2> = <var:s> ^ <nat:2> \land <var:d0> = <nat:2> \} $ into the postcondition $ \{ <var:w> = <var:s> \land <var:d1> = <nat:8> \times <var:s> \land <var:d2> = <nat:6> \times <var:s> ^ <nat:2> \land <var:d0> = <nat:2> \} $ . This is shown using the assignment rule in usual Hoare techniques . Observing the proceeding command seen in the code , we have the statement assigning $ <var:d2$ into $ <var:h>$ . This command moves the precondition $ \{ <var:w> = <var:s> \land <var:d1> = <nat:8> \times <var:s> \land <var:d2> = <nat:6> \times <var:s> ^ <nat:2> \land <var:d0> = <nat:2> \} $ toward $ \{ <var:w> = <var:s> \land <var:d1> = <nat:8> \times <var:s> \land <var:d0> = <nat:2> \land <var:h> = <nat:6> \times <var:s> ^ <nat:2> \} $ . Observing the next bit of code in our series of instructions , we see the assignment line giving $ <var:h> + <var:d1$ to $ <var:h>$ . This advances the condition $ \{ <var:w> = <var:s> \land <var:d1> = <nat:8> \times <var:s> \land <var:d0> = <nat:2> \land <var:h> = <nat:6> \times <var:s> ^ <nat:2> \} $ into the condition $ \{ <var:w> = <var:s> \land <var:d0> = <nat:2> \land <var:h> = <nat:6> \times <var:s> ^ <nat:2> + <nat:8> \times <var:s> \} $ . This is guaranteed using the assignment inference rule found in usual Hoare reasoning . Moving forward , the command binding $ <var:h> + <var:d0$ toward $ <var:h>$ . This code forwards $ \{ <var:w> = <var:s> \land <var:d0> = <nat:2> \land <var:h> = <nat:6> \times <var:s> ^ <nat:2> + <nat:8> \times <var:s> \} $ as the postcondition $ \{ <var:w> = <var:s> \land <var:h> = <nat:6> \times <var:s> ^ <nat:2> + <nat:8> \times <var:s> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <def:poly> := <var:d1> := <var:w> ; <var:d2> := <var:d1> * <var:w> ; <var:d0> := <nat:2> ; <var:d1> := <var:d1> * <nat:8> ; <var:d2> := <var:d2> * <nat:6> ; <var:h> := <var:d2> <var:h> := <var:h> + <var:d1> <var:h> := <var:h> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:w> = <var:s> }} <def:poly> {{ <var:h> = <nat:6> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:d1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:d1> = <var:s> /\ <var:d2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:d1> = <var:s> /\ <var:d2> = <var:s> ^ <nat:2> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:d1> = <nat:8> * <var:s> /\ <var:d2> = <var:s> ^ <nat:2> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:d1> = <nat:8> * <var:s> /\ <var:d2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:d1> = <nat:8> * <var:s> /\ <var:d0> = <nat:2> /\ <var:h> = <nat:6> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:d0> = <nat:2> /\ <var:h> = <nat:6> * <var:s> ^ <nat:2> + <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:s> /\ <var:h> = <nat:6> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 