\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} as follows \begin{verbatim} <var:g1> := <var:n> ; <var:g2> := <var:g1> * <var:n> ; <var:g3> := <var:g2> * <var:n> ; <var:g4> := <var:g3> * <var:n> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:1> ; <var:g2> := <var:g2> * <nat:2> ; <var:g3> := <var:g3> * <nat:1> ; <var:g4> := <var:g4> * <nat:4> ; <var:J> := <var:g4> <var:J> := <var:J> + <var:g3> <var:J> := <var:J> + <var:g2> <var:J> := <var:J> + <var:g1> <var:J> := <var:J> + <var:g0> \end{verbatim} Assuming $ <var:n> = <var:u> $ for any whole numbers $ <var:u> $ ahead of evaluating the program , then we see $ <var:J> = <nat:4> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:2> $ after list of instructions finishes . \end{theorem} \begin{proof} The flow of logic for this series of commands can be accomplished using usual Hoare techniques . Taking a look at the next bit of code seen in our code segment , we see the binding line \verb | <var:g1> := <var:n> ; | . This moves the precondition $ \{ <var:n> = <var:u> \} $ toward the condition $ \{ <var:n> = <var:u> \land <var:g1> = <var:u> \} $ . This is ensured using the assignment law from Hoare logic . Going forward , we have the variable assignmet code defining $ <var:g1> * <var:n> $ toward $ <var:g2>$ . This transfers the condition $ \{ <var:n> = <var:u> \land <var:g1> = <var:u> \} $ toward the postcondition $ \{ <var:n> = <var:u> \land <var:g1> = <var:u> \land <var:g2> = <var:u> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment law given by Hoare logic . Considering the following bit of code in our series of instructions , the variable binding line assigning $ <var:g2> * <var:n> $ into $ <var:g3>$ . This transfers the precondition $ \{ <var:n> = <var:u> \land <var:g1> = <var:u> \land <var:g2> = <var:u> ^ <nat:2> \} $ into the postcondition $ \{ <var:n> = <var:u> \land <var:g1> = <var:u> \land <var:g2> = <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \} $ . This is given through the assignment law from Hoare reasoning . Advancing on , the assignment command \verb | <var:g4> := <var:g3> * <var:n> ; | . This command redefines the condition $ \{ <var:n> = <var:u> \land <var:g1> = <var:u> \land <var:g2> = <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \} $ to the postcondition $ \{ <var:n> = <var:u> \land <var:g1> = <var:u> \land <var:g2> = <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \} $ . Jumping to the upcoming bit of code contained in our code segment , we see the binding line \verb | <var:g0> := <nat:2> ; | . This forwards $ \{ <var:n> = <var:u> \land <var:g1> = <var:u> \land <var:g2> = <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \} $ as the postcondition $ \{ <var:n> = <var:u> \land <var:g1> = <var:u> \land <var:g2> = <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \land <var:g0> = <nat:2> \} $ . Moving on to the next step , we have the variable assignmet command \verb | <var:g1> := <var:g1> * <nat:1> ; | . This forwards $ \{ <var:n> = <var:u> \land <var:g1> = <var:u> \land <var:g2> = <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \land <var:g0> = <nat:2> \} $ to the postcondition $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g2> = <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \land <var:g0> = <nat:2> \} $ . This is shown to be logically sound through the assignment law defined in Hoare techniques . Shifting focus toward the next line of code found in the program , we have the environment update statement \verb | <var:g2> := <var:g2> * <nat:2> ; | . This moves $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g2> = <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \land <var:g0> = <nat:2> \} $ toward $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g2> = <nat:2> \cdot <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \land <var:g0> = <nat:2> \} $ . Moving on to the next step , the binding statement giving $ <var:g3> * <nat:1> $ to $ <var:g3>$ . This moves $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g2> = <nat:2> \cdot <var:u> ^ <nat:2> \land <var:g3> = <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \land <var:g0> = <nat:2> \} $ toward the condition $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g2> = <nat:2> \cdot <var:u> ^ <nat:2> \land <var:g3> = <nat:1> \cdot <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \land <var:g0> = <nat:2> \} $ . This is shown using the assignment inference rule given in Hoare logic . Looking at the following command seen in our code segment , we have the assignment statement assigning $ <var:g4> * <nat:4> $ as $ <var:g4>$ . This statement transfers the precondition $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g2> = <nat:2> \cdot <var:u> ^ <nat:2> \land <var:g3> = <nat:1> \cdot <var:u> ^ <nat:3> \land <var:g4> = <var:u> ^ <nat:4> \land <var:g0> = <nat:2> \} $ as $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g2> = <nat:2> \cdot <var:u> ^ <nat:2> \land <var:g3> = <nat:1> \cdot <var:u> ^ <nat:3> \land <var:g4> = <nat:4> \cdot <var:u> ^ <nat:4> \land <var:g0> = <nat:2> \} $ . Honing in on the following line found in our series of commands , the variable binding code defining $ <var:g4$ as $ <var:J>$ . This moves $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g2> = <nat:2> \cdot <var:u> ^ <nat:2> \land <var:g3> = <nat:1> \cdot <var:u> ^ <nat:3> \land <var:g4> = <nat:4> \cdot <var:u> ^ <nat:4> \land <var:g0> = <nat:2> \} $ to the condition $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g2> = <nat:2> \cdot <var:u> ^ <nat:2> \land <var:g3> = <nat:1> \cdot <var:u> ^ <nat:3> \land <var:g0> = <nat:2> \land <var:J> = <nat:4> \cdot <var:u> ^ <nat:4> \} $ . Further , we see the command defining $ <var:J> + <var:g3$ as $ <var:J>$ . This line takes the condition $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g2> = <nat:2> \cdot <var:u> ^ <nat:2> \land <var:g3> = <nat:1> \cdot <var:u> ^ <nat:3> \land <var:g0> = <nat:2> \land <var:J> = <nat:4> \cdot <var:u> ^ <nat:4> \} $ toward the postcondition $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g2> = <nat:2> \cdot <var:u> ^ <nat:2> \land <var:g0> = <nat:2> \land <var:J> = <nat:4> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> \} $ . This is shown through the assignment rule given by Hoare techniques . Honing in on the following bit of code seen in the list of instructions , we have the assignment line letting $ <var:J> + <var:g2$ toward $ <var:J>$ . This forwards the condition $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g2> = <nat:2> \cdot <var:u> ^ <nat:2> \land <var:g0> = <nat:2> \land <var:J> = <nat:4> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> \} $ as $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g0> = <nat:2> \land <var:J> = <nat:4> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> ^ <nat:2> \} $ . Moving forward to the proceeding command in the segment of code , we see the assignment code letting $ <var:J> + <var:g1$ toward $ <var:J>$ . This statement advances the precondition $ \{ <var:n> = <var:u> \land <var:g1> = <nat:1> \cdot <var:u> \land <var:g0> = <nat:2> \land <var:J> = <nat:4> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> ^ <nat:2> \} $ as the postcondition $ \{ <var:n> = <var:u> \land <var:g0> = <nat:2> \land <var:J> = <nat:4> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> \} $ . This is sound by the assignment scheme of usual Hoare reasoning . Observing the subsequent step found in our segment of code , we see the variable binding code giving $ <var:J> + <var:g0$ toward $ <var:J>$ . This statement forwards $ \{ <var:n> = <var:u> \land <var:g0> = <nat:2> \land <var:J> = <nat:4> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> \} $ into $ \{ <var:n> = <var:u> \land <var:J> = <nat:4> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <var:g4> : string := " <var:g4> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:n> = <var:u> }} <var:g1> := <var:n> ; <var:g2> := <var:g1> * <var:n> ; <var:g3> := <var:g2> * <var:n> ; <var:g4> := <var:g3> * <var:n> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:1> ; <var:g2> := <var:g2> * <nat:2> ; <var:g3> := <var:g3> * <nat:1> ; <var:g4> := <var:g4> * <nat:4> ; <var:J> := <var:g4> <var:J> := <var:J> + <var:g3> <var:J> := <var:J> + <var:g2> <var:J> := <var:J> + <var:g1> <var:J> := <var:J> + <var:g0> {{ <var:J> = <nat:4> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:g1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:g1> = <var:u> /\ <var:g2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:g1> = <var:u> /\ <var:g2> = <var:u> ^ <nat:2> /\ <var:g3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:g1> = <var:u> /\ <var:g2> = <var:u> ^ <nat:2> /\ <var:g3> = <var:u> ^ <nat:3> /\ <var:g4> = <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:g1> = <var:u> /\ <var:g2> = <var:u> ^ <nat:2> /\ <var:g3> = <var:u> ^ <nat:3> /\ <var:g4> = <var:u> ^ <nat:4> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:g1> = <nat:1> * <var:u> /\ <var:g2> = <var:u> ^ <nat:2> /\ <var:g3> = <var:u> ^ <nat:3> /\ <var:g4> = <var:u> ^ <nat:4> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:g1> = <nat:1> * <var:u> /\ <var:g2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:g3> = <var:u> ^ <nat:3> /\ <var:g4> = <var:u> ^ <nat:4> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:g1> = <nat:1> * <var:u> /\ <var:g2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:u> ^ <nat:3> /\ <var:g4> = <var:u> ^ <nat:4> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:g1> = <nat:1> * <var:u> /\ <var:g2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:u> ^ <nat:3> /\ <var:g4> = <nat:4> * <var:u> ^ <nat:4> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:g1> = <nat:1> * <var:u> /\ <var:g2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:g3> = <nat:1> * <var:u> ^ <nat:3> /\ <var:g0> = <nat:2> /\ <var:J> = <nat:4> * <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:g1> = <nat:1> * <var:u> /\ <var:g2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:g0> = <nat:2> /\ <var:J> = <nat:4> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:g1> = <nat:1> * <var:u> /\ <var:g0> = <nat:2> /\ <var:J> = <nat:4> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:g0> = <nat:2> /\ <var:J> = <nat:4> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:J> = <nat:4> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 