\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:M1> := <var:E> ; <var:M2> := <var:M1> * <var:E> ; <var:M3> := <var:M2> * <var:E> ; <var:M4> := <var:M3> * <var:E> ; <var:M0> := <nat:3> ; <var:M1> := <var:M1> * <nat:8> ; <var:M2> := <var:M2> * <nat:9> ; <var:M3> := <var:M3> * <nat:8> ; <var:M4> := <var:M4> * <nat:1> ; <var:d> := <var:M4> <var:d> := <var:d> + <var:M3> <var:d> := <var:d> + <var:M2> <var:d> := <var:d> + <var:M1> <var:d> := <var:d> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:E> = <var:K> $ before interpreting the list of instructions it holds that we have $ <var:d> = <nat:1> * <var:K> ^ <nat:4> + <nat:8> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:3> $ after series of commands has terminated . \end{theorem} \begin{proof} Proving correctness for this code segment is demonstrated by standard Hoare techniques . Going to the next step , we see \begin{eqnarray} \{ <var:E> = <var:K> \} \, <var:M1> := <var:E> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \} \end{eqnarray} This is given using the binding inference rule given by usual Hoare logic . Immediately after , we have \begin{eqnarray} \{ <var:E> = <var:K> \} \, <var:M1> := <var:E> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \} \\ \{ <var:E> = <var:K> \land <var:M1> = <var:K> \} \, <var:M2> := <var:M1> * <var:E> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \land <var:M2> = <var:K> ^ <nat:2> \} \\ \{ <var:E> = <var:K> \land <var:M1> = <var:K> \land <var:M2> = <var:K> ^ <nat:2> \} \, <var:M3> := <var:M2> * <var:E> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \land <var:M2> = <var:K> ^ <nat:2> \land <var:M3> = <var:K> ^ <nat:3> \} \end{eqnarray} Looking at the next pieces of code in our set of instructions , \begin{eqnarray} \{ <var:E> = <var:K> \} \, <var:M1> := <var:E> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \} \\ \{ <var:E> = <var:K> \land <var:M1> = <var:K> \} \, <var:M2> := <var:M1> * <var:E> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \land <var:M2> = <var:K> ^ <nat:2> \} \\ \{ <var:E> = <var:K> \land <var:M1> = <var:K> \land <var:M2> = <var:K> ^ <nat:2> \} \, <var:M3> := <var:M2> * <var:E> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \land <var:M2> = <var:K> ^ <nat:2> \land <var:M3> = <var:K> ^ <nat:3> \} \\ \{ <var:E> = <var:K> \land <var:M1> = <var:K> \land <var:M2> = <var:K> ^ <nat:2> \land <var:M3> = <var:K> ^ <nat:3> \} \, <var:M4> := <var:M3> * <var:E> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \land <var:M2> = <var:K> ^ <nat:2> \land <var:M3> = <var:K> ^ <nat:3> \land <var:M4> = <var:K> ^ <nat:4> \} \\ \{ <var:E> = <var:K> \land <var:M1> = <var:K> \land <var:M2> = <var:K> ^ <nat:2> \land <var:M3> = <var:K> ^ <nat:3> \land <var:M4> = <var:K> ^ <nat:4> \} \, <var:M0> := <nat:3> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \land <var:M2> = <var:K> ^ <nat:2> \land <var:M3> = <var:K> ^ <nat:3> \land <var:M4> = <var:K> ^ <nat:4> \land <var:M0> = <nat:3> \} \end{eqnarray} Moving forward to the next steps contained in the set of instructions , we see \begin{eqnarray} \{ <var:E> = <var:K> \} \, <var:M1> := <var:E> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \} \\ \{ <var:E> = <var:K> \land <var:M1> = <var:K> \} \, <var:M2> := <var:M1> * <var:E> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \land <var:M2> = <var:K> ^ <nat:2> \} \\ \{ <var:E> = <var:K> \land <var:M1> = <var:K> \land <var:M2> = <var:K> ^ <nat:2> \} \, <var:M3> := <var:M2> * <var:E> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \land <var:M2> = <var:K> ^ <nat:2> \land <var:M3> = <var:K> ^ <nat:3> \} \end{eqnarray} This is ensured by the variable assignmet rule in Hoare logic . Moving forward to the next step , we see \begin{eqnarray} \{ <var:E> = <var:K> \} \, <var:M1> := <var:E> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \} \end{eqnarray} This is deduced using the variable update law obtained from usual Hoare techniques . Going forward , \begin{eqnarray} \{ <var:E> = <var:K> \} \, <var:M1> := <var:E> \, \{ <var:E> = <var:K> \land <var:M1> = <var:K> \} \end{eqnarray} This is rigorously given with the assignment rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <var:M4> : string := " <var:M4> " . Definition <def:poly> := <var:M1> := <var:E> ; <var:M2> := <var:M1> * <var:E> ; <var:M3> := <var:M2> * <var:E> ; <var:M4> := <var:M3> * <var:E> ; <var:M0> := <nat:3> ; <var:M1> := <var:M1> * <nat:8> ; <var:M2> := <var:M2> * <nat:9> ; <var:M3> := <var:M3> * <nat:8> ; <var:M4> := <var:M4> * <nat:1> ; <var:d> := <var:M4> <var:d> := <var:d> + <var:M3> <var:d> := <var:d> + <var:M2> <var:d> := <var:d> + <var:M1> <var:d> := <var:d> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:E> = <var:K> }} <def:poly> {{ <var:d> = <nat:1> * <var:K> ^ <nat:4> + <nat:8> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:M1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:M1> = <var:K> /\ <var:M2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:M1> = <var:K> /\ <var:M2> = <var:K> ^ <nat:2> /\ <var:M3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:M1> = <var:K> /\ <var:M2> = <var:K> ^ <nat:2> /\ <var:M3> = <var:K> ^ <nat:3> /\ <var:M4> = <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:M1> = <var:K> /\ <var:M2> = <var:K> ^ <nat:2> /\ <var:M3> = <var:K> ^ <nat:3> /\ <var:M4> = <var:K> ^ <nat:4> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:M1> = <nat:8> * <var:K> /\ <var:M2> = <var:K> ^ <nat:2> /\ <var:M3> = <var:K> ^ <nat:3> /\ <var:M4> = <var:K> ^ <nat:4> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:M1> = <nat:8> * <var:K> /\ <var:M2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:M3> = <var:K> ^ <nat:3> /\ <var:M4> = <var:K> ^ <nat:4> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:M1> = <nat:8> * <var:K> /\ <var:M2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:M3> = <nat:8> * <var:K> ^ <nat:3> /\ <var:M4> = <var:K> ^ <nat:4> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:M1> = <nat:8> * <var:K> /\ <var:M2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:M3> = <nat:8> * <var:K> ^ <nat:3> /\ <var:M4> = <nat:1> * <var:K> ^ <nat:4> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:M1> = <nat:8> * <var:K> /\ <var:M2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:M3> = <nat:8> * <var:K> ^ <nat:3> /\ <var:M0> = <nat:3> /\ <var:d> = <nat:1> * <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:M1> = <nat:8> * <var:K> /\ <var:M2> = <nat:9> * <var:K> ^ <nat:2> /\ <var:M0> = <nat:3> /\ <var:d> = <nat:1> * <var:K> ^ <nat:4> + <nat:8> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:M1> = <nat:8> * <var:K> /\ <var:M0> = <nat:3> /\ <var:d> = <nat:1> * <var:K> ^ <nat:4> + <nat:8> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:M0> = <nat:3> /\ <var:d> = <nat:1> * <var:K> ^ <nat:4> + <nat:8> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:d> = <nat:1> * <var:K> ^ <nat:4> + <nat:8> * <var:K> ^ <nat:3> + <nat:9> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 