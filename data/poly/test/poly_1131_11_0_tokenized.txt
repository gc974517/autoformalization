\begin{document} \begin{theorem} Take the following series of instructions such that \begin{verbatim} <var:S0> := <nat:6> ; <var:S2> := <nat:4> ; <var:S2> := <var:S2> * <var:z> ; <var:S2> := <var:S2> * <var:z> ; <var:S3> := <nat:5> ; <var:S3> := <var:S3> * <var:z> ; <var:S3> := <var:S3> * <var:z> ; <var:S3> := <var:S3> * <var:z> ; <var:Z> := <var:S3> ; <var:Z> := <var:Z> + <var:S2> ; <var:Z> := <var:Z> + <var:S0> \end{verbatim} Allow that we have $ <var:z> = <var:u> $ --- for all positive coefficients $ <var:u> $ --- before evaluating our code segment , it must be that we have $ <var:Z> = <nat:5> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:6> $ after series of commands has executed . \end{theorem} \begin{proof} Proving correctness for our list of instructions is evident using standard Hoare logic . Paying attention to the next piece of code contained in the set of instructions , \begin{verbatim} { <var:z> = <var:u> } <var:S0> := <nat:6> { <var:z> = <var:u> \land <var:S0> = <nat:6> } \end{verbatim} Focusing on the next statements contained in our set of commands , \begin{verbatim} { <var:z> = <var:u> } <var:S0> := <nat:6> { <var:z> = <var:u> \land <var:S0> = <nat:6> } { <var:z> = <var:u> \land <var:S0> = <nat:6> } <var:S2> := <nat:4> { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> } { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> } <var:S2> := <var:S2> * <var:z> { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> * <var:u> } { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> * <var:u> } <var:S2> := <var:S2> * <var:z> { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> * <var:u> ^ <nat:2> } { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> * <var:u> ^ <nat:2> } <var:S3> := <nat:5> { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> * <var:u> ^ <nat:2> \land <var:S3> = <nat:5> } { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> * <var:u> ^ <nat:2> \land <var:S3> = <nat:5> } <var:S3> := <var:S3> * <var:z> { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> * <var:u> ^ <nat:2> \land <var:S3> = <nat:5> * <var:u> } { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> * <var:u> ^ <nat:2> \land <var:S3> = <nat:5> * <var:u> } <var:S3> := <var:S3> * <var:z> { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> * <var:u> ^ <nat:2> \land <var:S3> = <nat:5> * <var:u> ^ <nat:2> } \end{verbatim} After , we see \begin{verbatim} { <var:z> = <var:u> } <var:S0> := <nat:6> { <var:z> = <var:u> \land <var:S0> = <nat:6> } { <var:z> = <var:u> \land <var:S0> = <nat:6> } <var:S2> := <nat:4> { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> } { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> } <var:S2> := <var:S2> * <var:z> { <var:z> = <var:u> \land <var:S0> = <nat:6> \land <var:S2> = <nat:4> * <var:u> } \end{verbatim} This is shown through the variable binding scheme in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:z> = <var:u> }} <var:S0> := <nat:6> ; <var:S2> := <nat:4> ; <var:S2> := <var:S2> * <var:z> ; <var:S2> := <var:S2> * <var:z> ; <var:S3> := <nat:5> ; <var:S3> := <var:S3> * <var:z> ; <var:S3> := <var:S3> * <var:z> ; <var:S3> := <var:S3> * <var:z> ; <var:Z> := <var:S3> ; <var:Z> := <var:Z> + <var:S2> ; <var:Z> := <var:Z> + <var:S0> {{ <var:Z> = <nat:5> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:S0> = <nat:6> /\ <var:S2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:S0> = <nat:6> /\ <var:S2> = <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:S0> = <nat:6> /\ <var:S2> = <nat:4> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:S0> = <nat:6> /\ <var:S2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:S3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:S0> = <nat:6> /\ <var:S2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:S3> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:S0> = <nat:6> /\ <var:S2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:S3> = <nat:5> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:S0> = <nat:6> /\ <var:S2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:S3> = <nat:5> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:S0> = <nat:6> /\ <var:S2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:Z> = <nat:5> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:S0> = <nat:6> /\ <var:Z> = <nat:5> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:u> /\ <var:Z> = <nat:5> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 