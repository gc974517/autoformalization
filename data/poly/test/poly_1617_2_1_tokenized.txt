\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:2> ; <var:N> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Assuming it to be that $ <var:A> = <var:h> $ before evaluating this list of commands , it follows that we see $ <var:N> = <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of the list of commands is accomplished through typical Hoare logic . Advancing to the next step , we see the line assigning $ <nat:2> $ into $ <var:Z0>$ . This line takes the precondition $ \{ <var:A> = <var:h> \} $ into the condition $ \{ <var:A> = <var:h> \land <var:Z0> = <nat:2> \} $ . Observing the next statement found in the segment of code , we see the variable assignmet code \verb | <var:N> := <var:Z0> | . This moves the condition $ \{ <var:A> = <var:h> \land <var:Z0> = <nat:2> \} $ toward the condition $ \{ <var:A> = <var:h> \land <var:N> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:2> ; <var:N> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:A> = <var:h> }} <def:poly> {{ <var:N> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:h> /\ <var:N> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 