\begin{document} \begin{theorem} Let the following code as follows \begin{verbatim} <var:c0> := <nat:3> ; <var:F> := <var:c0> \end{verbatim} Allowing --- letting positive numbers $ <var:h> $ --- that $ <var:b> = <var:h> $ ahead of interpreting our list of commands then we see $ <var:F> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:h> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:b> = <var:h> \land <var:c0> = <nat:3> \} \\ <var:F> := <var:c0> \\ \{ <var:b> = <var:h> \land <var:F> = <nat:3> \} \end{eqnarray} Using typical Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:b> = <var:h> }} <var:c0> := <nat:3> ; <var:F> := <var:c0> {{ <var:F> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:F> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 