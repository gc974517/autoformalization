\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:5> ; <var:u> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:N> = <var:s> $ ahead of evaluating our segment of code then $ <var:u> = <nat:5> $ . \end{theorem} \begin{proof} See that this decorated series of commands . \begin{eqnarray} \{ <var:N> = <var:s> \} \\ <var:M0> := <nat:5> ; \\ \{ <var:N> = <var:s> \land <var:M0> = <nat:5> \} \end{eqnarray} Allowing executing our program results in : \begin{eqnarray} <var:u> := <var:M0> \\ \{ <var:N> = <var:s> \land <var:u> = <nat:5> \} \end{eqnarray} Applying typical Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:5> ; <var:u> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:N> = <var:s> }} <def:poly> {{ <var:u> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:u> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 