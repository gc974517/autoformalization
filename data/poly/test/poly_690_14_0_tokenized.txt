\begin{document} \begin{theorem} Define a list of instructions such that \begin{verbatim} <var:v0> := <nat:1> ; <var:v1> := <nat:7> ; <var:v1> := <var:v1> * <var:A> ; <var:v2> := <nat:7> ; <var:v2> := <var:v2> * <var:A> ; <var:v2> := <var:v2> * <var:A> ; <var:v3> := <nat:6> ; <var:v3> := <var:v3> * <var:A> ; <var:v3> := <var:v3> * <var:A> ; <var:v3> := <var:v3> * <var:A> ; <var:d> := <var:v3> ; <var:d> := <var:d> + <var:v2> ; <var:d> := <var:d> + <var:v1> ; <var:d> := <var:d> + <var:v0> \end{verbatim} Allowing that we have $ <var:A> = <var:Q> $ ahead of executing the list of instructions , it holds that $ <var:d> = <nat:6> \cdot <var:Q> ^ <nat:3> + <nat:7> \cdot <var:Q> ^ <nat:2> + <nat:7> \cdot <var:Q> + <nat:1> $ once series of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:Q> \} \\ <var:v0> := <nat:1> ; \\ \{ <var:A> = <var:Q> \land <var:v0> = <nat:1> \} \\ <var:v1> := <nat:7> ; \\ \{ <var:A> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:7> \} \\ <var:v1> := <var:v1> * <var:A> ; \\ \{ <var:A> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:7> * <var:Q> \} \\ <var:v2> := <nat:7> ; \\ \{ <var:A> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:7> * <var:Q> \land <var:v2> = <nat:7> \} \\ <var:v2> := <var:v2> * <var:A> ; \\ \{ <var:A> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:7> * <var:Q> \land <var:v2> = <nat:7> * <var:Q> \} \end{eqnarray} Furthering the evaluation of our set of commands results in : \begin{eqnarray} <var:v2> := <var:v2> * <var:A> ; \\ \{ <var:A> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:7> * <var:Q> \land <var:v2> = <nat:7> * <var:Q> ^ <nat:2> \} \\ <var:v3> := <nat:6> ; \\ \{ <var:A> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:7> * <var:Q> \land <var:v2> = <nat:7> * <var:Q> ^ <nat:2> \land <var:v3> = <nat:6> \} \\ <var:v3> := <var:v3> * <var:A> ; \\ \{ <var:A> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:7> * <var:Q> \land <var:v2> = <nat:7> * <var:Q> ^ <nat:2> \land <var:v3> = <nat:6> * <var:Q> \} \end{eqnarray} Advancing the evaluation of the program gives : \begin{eqnarray} <var:v3> := <var:v3> * <var:A> ; \\ \{ <var:A> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:7> * <var:Q> \land <var:v2> = <nat:7> * <var:Q> ^ <nat:2> \land <var:v3> = <nat:6> * <var:Q> ^ <nat:2> \} \\ <var:v3> := <var:v3> * <var:A> ; \\ \{ <var:A> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:7> * <var:Q> \land <var:v2> = <nat:7> * <var:Q> ^ <nat:2> \land <var:v3> = <nat:6> * <var:Q> ^ <nat:3> \} \\ <var:d> := <var:v3> ; \\ \{ <var:A> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:7> * <var:Q> \land <var:v2> = <nat:7> * <var:Q> ^ <nat:2> \land <var:d> = <nat:6> * <var:Q> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:v2> ; \\ \{ <var:A> = <var:Q> \land <var:v0> = <nat:1> \land <var:v1> = <nat:7> * <var:Q> \land <var:d> = <nat:6> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:v1> ; \\ \{ <var:A> = <var:Q> \land <var:v0> = <nat:1> \land <var:d> = <nat:6> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:7> * <var:Q> \} \\ <var:d> := <var:d> + <var:v0> \\ \{ <var:A> = <var:Q> \land <var:d> = <nat:6> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:7> * <var:Q> + <nat:1> \} \end{eqnarray} The application of typical Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:A> = <var:Q> }} <var:v0> := <nat:1> ; <var:v1> := <nat:7> ; <var:v1> := <var:v1> * <var:A> ; <var:v2> := <nat:7> ; <var:v2> := <var:v2> * <var:A> ; <var:v2> := <var:v2> * <var:A> ; <var:v3> := <nat:6> ; <var:v3> := <var:v3> * <var:A> ; <var:v3> := <var:v3> * <var:A> ; <var:v3> := <var:v3> * <var:A> ; <var:d> := <var:v3> ; <var:d> := <var:d> + <var:v2> ; <var:d> := <var:d> + <var:v1> ; <var:d> := <var:d> + <var:v0> {{ <var:d> = <nat:6> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:7> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:7> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:7> * <var:Q> /\ <var:v2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:7> * <var:Q> /\ <var:v2> = <nat:7> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:7> * <var:Q> /\ <var:v2> = <nat:7> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:7> * <var:Q> /\ <var:v2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:v3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:7> * <var:Q> /\ <var:v2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:v3> = <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:7> * <var:Q> /\ <var:v2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:v3> = <nat:6> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:7> * <var:Q> /\ <var:v2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:v3> = <nat:6> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:7> * <var:Q> /\ <var:v2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:d> = <nat:6> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:7> * <var:Q> /\ <var:d> = <nat:6> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:v0> = <nat:1> /\ <var:d> = <nat:6> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:7> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:d> = <nat:6> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:7> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 