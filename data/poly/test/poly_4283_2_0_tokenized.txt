\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:1> ; <var:C> := <var:W0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:v> = <var:V> $ for whole numbers $ <var:V> $ prior to the execution of our series of instructions it follows that $ <var:C> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:V> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:v> = <var:V> \land <var:W0> = <nat:1> \} \end{eqnarray} Continuing the execution of our list of commands yields : \begin{eqnarray} <var:C> := <var:W0> \\ \{ <var:v> = <var:V> \land <var:C> = <nat:1> \} \end{eqnarray} Utilizing typical Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <def:poly> := <var:W0> := <nat:1> ; <var:C> := <var:W0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:v> = <var:V> }} <def:poly> {{ <var:C> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:V> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:V> /\ <var:C> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 