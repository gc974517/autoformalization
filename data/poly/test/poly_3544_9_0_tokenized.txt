\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:4> ; <var:L1> := <nat:7> ; <var:L1> := <var:L1> * <var:f> ; <var:L2> := <nat:8> ; <var:L2> := <var:L2> * <var:f> ; <var:L2> := <var:L2> * <var:f> ; <var:S> := <var:L2> ; <var:S> := <var:S> + <var:L1> ; <var:S> := <var:S> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Given $ <var:f> = <var:J> $ --- taking positive integers $ <var:J> $ --- ahead of interpreting our list of instructions then $ <var:S> = <nat:8> \cdot <var:J> ^ <nat:2> + <nat:7> \cdot <var:J> + <nat:4> $ when list of commands has finished executing . \end{theorem} \begin{proof} Utilizing Hoare techniques produces : \begin{eqnarray} \{ <var:f> = <var:J> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:f> = <var:J> \land <var:L0> = <nat:4> \} \\ <var:L1> := <nat:7> ; \\ \{ <var:f> = <var:J> \land <var:L0> = <nat:4> \land <var:L1> = <nat:7> \} \\ <var:L1> := <var:L1> * <var:f> ; \\ \{ <var:f> = <var:J> \land <var:L0> = <nat:4> \land <var:L1> = <nat:7> \cdot <var:J> \} \\ <var:L2> := <nat:8> ; \\ \{ <var:f> = <var:J> \land <var:L0> = <nat:4> \land <var:L1> = <nat:7> \cdot <var:J> \land <var:L2> = <nat:8> \} \\ <var:L2> := <var:L2> * <var:f> ; \\ \{ <var:f> = <var:J> \land <var:L0> = <nat:4> \land <var:L1> = <nat:7> \cdot <var:J> \land <var:L2> = <nat:8> \cdot <var:J> \} \\ <var:L2> := <var:L2> * <var:f> ; \\ \{ <var:f> = <var:J> \land <var:L0> = <nat:4> \land <var:L1> = <nat:7> \cdot <var:J> \land <var:L2> = <nat:8> \cdot <var:J> ^ <nat:2> \} \\ <var:S> := <var:L2> ; \\ \{ <var:f> = <var:J> \land <var:L0> = <nat:4> \land <var:L1> = <nat:7> \cdot <var:J> \land <var:S> = <nat:8> \cdot <var:J> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:L1> ; \\ \{ <var:f> = <var:J> \land <var:L0> = <nat:4> \land <var:S> = <nat:8> \cdot <var:J> ^ <nat:2> + <nat:7> \cdot <var:J> \} \\ <var:S> := <var:S> + <var:L0> \\ \{ <var:f> = <var:J> \land <var:S> = <nat:8> \cdot <var:J> ^ <nat:2> + <nat:7> \cdot <var:J> + <nat:4> \} \end{eqnarray} Therefore , this series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <def:poly> := <var:L0> := <nat:4> ; <var:L1> := <nat:7> ; <var:L1> := <var:L1> * <var:f> ; <var:L2> := <nat:8> ; <var:L2> := <var:L2> * <var:f> ; <var:L2> := <var:L2> * <var:f> ; <var:S> := <var:L2> ; <var:S> := <var:S> + <var:L1> ; <var:S> := <var:S> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:f> = <var:J> }} <def:poly> {{ <var:S> = <nat:8> * <var:J> ^ <nat:2> + <nat:7> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:7> * <var:J> /\ <var:L2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:7> * <var:J> /\ <var:L2> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:7> * <var:J> /\ <var:L2> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:7> * <var:J> /\ <var:S> = <nat:8> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:L0> = <nat:4> /\ <var:S> = <nat:8> * <var:J> ^ <nat:2> + <nat:7> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:J> /\ <var:S> = <nat:8> * <var:J> ^ <nat:2> + <nat:7> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 