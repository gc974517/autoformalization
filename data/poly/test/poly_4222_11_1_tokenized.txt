\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x1> := <var:K> ; <var:x2> := <var:x1> * <var:K> ; <var:x3> := <var:x2> * <var:K> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:6> ; <var:x2> := <var:x2> * <nat:3> ; <var:x3> := <var:x3> * <nat:2> ; <var:t> := <var:x3> <var:t> := <var:t> + <var:x2> <var:t> := <var:t> + <var:x1> <var:t> := <var:t> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assume ( letting positive integer coefficients $ <var:q> $ ) that we have $ <var:K> = <var:q> $ prior to evaluating this set of commands it must be that we see $ <var:t> = <nat:2> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:6> \cdot <var:q> + <nat:1> $ after series of commands exits . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning yields : \begin{eqnarray} \{ <var:K> = <var:q> \} \\ <var:x1> := <var:K> ; \\ \{ <var:K> = <var:q> \land <var:x1> = <var:q> \} \\ <var:x2> := <var:x1> * <var:K> ; \\ \{ <var:K> = <var:q> \land <var:x1> = <var:q> \land <var:x2> = <var:q> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:K> ; \\ \{ <var:K> = <var:q> \land <var:x1> = <var:q> \land <var:x2> = <var:q> ^ <nat:2> \land <var:x3> = <var:q> ^ <nat:3> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:K> = <var:q> \land <var:x1> = <var:q> \land <var:x2> = <var:q> ^ <nat:2> \land <var:x3> = <var:q> ^ <nat:3> \land <var:x0> = <nat:1> \} \\ <var:x1> := <var:x1> * <nat:6> ; \\ \{ <var:K> = <var:q> \land <var:x1> = <nat:6> \cdot <var:q> \land <var:x2> = <var:q> ^ <nat:2> \land <var:x3> = <var:q> ^ <nat:3> \land <var:x0> = <nat:1> \} \\ <var:x2> := <var:x2> * <nat:3> ; \\ \{ <var:K> = <var:q> \land <var:x1> = <nat:6> \cdot <var:q> \land <var:x2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:x3> = <var:q> ^ <nat:3> \land <var:x0> = <nat:1> \} \\ <var:x3> := <var:x3> * <nat:2> ; \\ \{ <var:K> = <var:q> \land <var:x1> = <nat:6> \cdot <var:q> \land <var:x2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:x3> = <nat:2> \cdot <var:q> ^ <nat:3> \land <var:x0> = <nat:1> \} \\ <var:t> := <var:x3> \\ \{ <var:K> = <var:q> \land <var:x1> = <nat:6> \cdot <var:q> \land <var:x2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:x0> = <nat:1> \land <var:t> = <nat:2> \cdot <var:q> ^ <nat:3> \} \\ <var:t> := <var:t> + <var:x2> \\ \{ <var:K> = <var:q> \land <var:x1> = <nat:6> \cdot <var:q> \land <var:x0> = <nat:1> \land <var:t> = <nat:2> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:x1> \\ \{ <var:K> = <var:q> \land <var:x0> = <nat:1> \land <var:t> = <nat:2> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:6> \cdot <var:q> \} \\ <var:t> := <var:t> + <var:x0> \\ \{ <var:K> = <var:q> \land <var:t> = <nat:2> \cdot <var:q> ^ <nat:3> + <nat:3> \cdot <var:q> ^ <nat:2> + <nat:6> \cdot <var:q> + <nat:1> \} \end{eqnarray} Considering the above , the set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x1> := <var:K> ; <var:x2> := <var:x1> * <var:K> ; <var:x3> := <var:x2> * <var:K> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:6> ; <var:x2> := <var:x2> * <nat:3> ; <var:x3> := <var:x3> * <nat:2> ; <var:t> := <var:x3> <var:t> := <var:t> + <var:x2> <var:t> := <var:t> + <var:x1> <var:t> := <var:t> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:K> = <var:q> }} <def:poly> {{ <var:t> = <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:x1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:x1> = <var:q> /\ <var:x2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:x1> = <var:q> /\ <var:x2> = <var:q> ^ <nat:2> /\ <var:x3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:x1> = <var:q> /\ <var:x2> = <var:q> ^ <nat:2> /\ <var:x3> = <var:q> ^ <nat:3> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:x1> = <nat:6> * <var:q> /\ <var:x2> = <var:q> ^ <nat:2> /\ <var:x3> = <var:q> ^ <nat:3> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:x1> = <nat:6> * <var:q> /\ <var:x2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:x3> = <var:q> ^ <nat:3> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:x1> = <nat:6> * <var:q> /\ <var:x2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:x3> = <nat:2> * <var:q> ^ <nat:3> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:x1> = <nat:6> * <var:q> /\ <var:x2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:x0> = <nat:1> /\ <var:t> = <nat:2> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:x1> = <nat:6> * <var:q> /\ <var:x0> = <nat:1> /\ <var:t> = <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:x0> = <nat:1> /\ <var:t> = <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:t> = <nat:2> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 