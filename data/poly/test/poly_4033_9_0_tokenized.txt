\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:5> ; <var:u1> := <nat:1> ; <var:u1> := <var:u1> * <var:L> ; <var:u2> := <nat:7> ; <var:u2> := <var:u2> * <var:L> ; <var:u2> := <var:u2> * <var:L> ; <var:V> := <var:u2> ; <var:V> := <var:V> + <var:u1> ; <var:V> := <var:V> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:L> = <var:m> $ before evaluating our series of commands then we have $ <var:V> = <nat:7> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:5> $ once set of commands is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:m> \} \\ <var:u0> := <nat:5> ; \\ \{ <var:L> = <var:m> \land <var:u0> = <nat:5> \} \\ <var:u1> := <nat:1> ; \\ \{ <var:L> = <var:m> \land <var:u0> = <nat:5> \land <var:u1> = <nat:1> \} \\ <var:u1> := <var:u1> * <var:L> ; \\ \{ <var:L> = <var:m> \land <var:u0> = <nat:5> \land <var:u1> = <nat:1> * <var:m> \} \\ <var:u2> := <nat:7> ; \\ \{ <var:L> = <var:m> \land <var:u0> = <nat:5> \land <var:u1> = <nat:1> * <var:m> \land <var:u2> = <nat:7> \} \\ <var:u2> := <var:u2> * <var:L> ; \\ \{ <var:L> = <var:m> \land <var:u0> = <nat:5> \land <var:u1> = <nat:1> * <var:m> \land <var:u2> = <nat:7> * <var:m> \} \\ <var:u2> := <var:u2> * <var:L> ; \\ \{ <var:L> = <var:m> \land <var:u0> = <nat:5> \land <var:u1> = <nat:1> * <var:m> \land <var:u2> = <nat:7> * <var:m> ^ <nat:2> \} \\ <var:V> := <var:u2> ; \\ \{ <var:L> = <var:m> \land <var:u0> = <nat:5> \land <var:u1> = <nat:1> * <var:m> \land <var:V> = <nat:7> * <var:m> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:u1> ; \\ \{ <var:L> = <var:m> \land <var:u0> = <nat:5> \land <var:V> = <nat:7> * <var:m> ^ <nat:2> + <nat:1> * <var:m> \} \\ <var:V> := <var:V> + <var:u0> \\ \{ <var:L> = <var:m> \land <var:V> = <nat:7> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:5> \} \end{eqnarray} The application of usual Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u0> := <nat:5> ; <var:u1> := <nat:1> ; <var:u1> := <var:u1> * <var:L> ; <var:u2> := <nat:7> ; <var:u2> := <var:u2> * <var:L> ; <var:u2> := <var:u2> * <var:L> ; <var:V> := <var:u2> ; <var:V> := <var:V> + <var:u1> ; <var:V> := <var:V> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:L> = <var:m> }} <def:poly> {{ <var:V> = <nat:7> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:1> * <var:m> /\ <var:u2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:1> * <var:m> /\ <var:u2> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:1> * <var:m> /\ <var:u2> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:1> * <var:m> /\ <var:V> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:u0> = <nat:5> /\ <var:V> = <nat:7> * <var:m> ^ <nat:2> + <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:m> /\ <var:V> = <nat:7> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 