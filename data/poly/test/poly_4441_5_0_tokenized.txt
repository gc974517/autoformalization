\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:8> ; <var:I1> := <nat:9> ; <var:I1> := <var:I1> * <var:W> ; <var:s> := <var:I1> ; <var:s> := <var:s> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> . Given it to be that $ <var:W> = <var:Q> $ ahead of interpreting the code segment it follows that $ <var:s> = <nat:9> \times <var:Q> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for the code segment can be demonstrated with Hoare logic . Now , we see the binding code \verb | <var:I0> := <nat:8> ; | . This line transfers the condition $ \{ <var:W> = <var:Q> \} $ toward the postcondition $ \{ <var:W> = <var:Q> \land <var:I0> = <nat:8> \} $ . Taking another step toward the subsequent piece of code contained in the list of instructions , we have the binding code \verb | <var:I1> := <nat:9> ; | . This line takes $ \{ <var:W> = <var:Q> \land <var:I0> = <nat:8> \} $ toward the condition $ \{ <var:W> = <var:Q> \land <var:I0> = <nat:8> \land <var:I1> = <nat:9> \} $ . This is rigorously given with the assignment law defined in Hoare reasoning . Taking a look at the next statement seen in the set of instructions , we see the assignment statement \verb | <var:I1> := <var:I1> * <var:W> ; | . This statement takes $ \{ <var:W> = <var:Q> \land <var:I0> = <nat:8> \land <var:I1> = <nat:9> \} $ to the condition $ \{ <var:W> = <var:Q> \land <var:I0> = <nat:8> \land <var:I1> = <nat:9> * <var:Q> \} $ . This is sound with the assignment law in standard Hoare logic . Taking a look at the upcoming bit of code seen in our segment of code , the variable update line assigning $ <var:I1> $ into $ <var:s>$ . This moves the precondition $ \{ <var:W> = <var:Q> \land <var:I0> = <nat:8> \land <var:I1> = <nat:9> * <var:Q> \} $ to the condition $ \{ <var:W> = <var:Q> \land <var:I0> = <nat:8> \land <var:s> = <nat:9> * <var:Q> \} $ . Jumping to the following bit of code found in our set of instructions , we have the variable assignmet statement \verb | <var:s> := <var:s> + <var:I0> | . This forwards $ \{ <var:W> = <var:Q> \land <var:I0> = <nat:8> \land <var:s> = <nat:9> * <var:Q> \} $ as the condition $ \{ <var:W> = <var:Q> \land <var:s> = <nat:9> * <var:Q> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:8> ; <var:I1> := <nat:9> ; <var:I1> := <var:I1> * <var:W> ; <var:s> := <var:I1> ; <var:s> := <var:s> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:W> = <var:Q> }} <def:poly> {{ <var:s> = <nat:9> * <var:Q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:I0> = <nat:8> /\ <var:s> = <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:s> = <nat:9> * <var:Q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 