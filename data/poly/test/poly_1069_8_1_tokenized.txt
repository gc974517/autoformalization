\begin{document} \begin{theorem} Define a segment of code such that \begin{verbatim} <var:L1> := <var:y> ; <var:L2> := <var:L1> * <var:y> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:5> ; <var:L2> := <var:L2> * <nat:7> ; <var:H> := <var:L2> <var:H> := <var:H> + <var:L1> <var:H> := <var:H> + <var:L0> \end{verbatim} Assuming ( assuming some $ <var:T> \in \mathbb{N} $ ) it to be that $ <var:y> = <var:T> $ ahead of running our program , it must be that $ <var:H> = <nat:7> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:3> $ once segment of code is done . \end{theorem} \begin{proof} The application of usual Hoare techniques yields : \begin{eqnarray} \{ <var:y> = <var:T> \} \\ <var:L1> := <var:y> ; \\ \{ <var:y> = <var:T> \land <var:L1> = <var:T> \} \\ <var:L2> := <var:L1> * <var:y> ; \\ \{ <var:y> = <var:T> \land <var:L1> = <var:T> \land <var:L2> = <var:T> ^ <nat:2> \} \\ <var:L0> := <nat:3> ; \\ \{ <var:y> = <var:T> \land <var:L1> = <var:T> \land <var:L2> = <var:T> ^ <nat:2> \land <var:L0> = <nat:3> \} \\ <var:L1> := <var:L1> * <nat:5> ; \\ \{ <var:y> = <var:T> \land <var:L1> = <nat:5> \cdot <var:T> \land <var:L2> = <var:T> ^ <nat:2> \land <var:L0> = <nat:3> \} \\ <var:L2> := <var:L2> * <nat:7> ; \\ \{ <var:y> = <var:T> \land <var:L1> = <nat:5> \cdot <var:T> \land <var:L2> = <nat:7> \cdot <var:T> ^ <nat:2> \land <var:L0> = <nat:3> \} \\ <var:H> := <var:L2> \\ \{ <var:y> = <var:T> \land <var:L1> = <nat:5> \cdot <var:T> \land <var:L0> = <nat:3> \land <var:H> = <nat:7> \cdot <var:T> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:L1> \\ \{ <var:y> = <var:T> \land <var:L0> = <nat:3> \land <var:H> = <nat:7> \cdot <var:T> ^ <nat:2> + <nat:5> \cdot <var:T> \} \\ <var:H> := <var:H> + <var:L0> \\ \{ <var:y> = <var:T> \land <var:H> = <nat:7> \cdot <var:T> ^ <nat:2> + <nat:5> \cdot <var:T> + <nat:3> \} \end{eqnarray} Given the preceding argument , this list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:y> = <var:T> }} <var:L1> := <var:y> ; <var:L2> := <var:L1> * <var:y> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:5> ; <var:L2> := <var:L2> * <nat:7> ; <var:H> := <var:L2> <var:H> := <var:H> + <var:L1> <var:H> := <var:H> + <var:L0> {{ <var:H> = <nat:7> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:L1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:L1> = <var:T> /\ <var:L2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:L1> = <var:T> /\ <var:L2> = <var:T> ^ <nat:2> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:L1> = <nat:5> * <var:T> /\ <var:L2> = <var:T> ^ <nat:2> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:L1> = <nat:5> * <var:T> /\ <var:L2> = <nat:7> * <var:T> ^ <nat:2> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:L1> = <nat:5> * <var:T> /\ <var:L0> = <nat:3> /\ <var:H> = <nat:7> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:L0> = <nat:3> /\ <var:H> = <nat:7> * <var:T> ^ <nat:2> + <nat:5> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:T> /\ <var:H> = <nat:7> * <var:T> ^ <nat:2> + <nat:5> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 