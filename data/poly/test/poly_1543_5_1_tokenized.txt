\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:V1> := <var:j> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:9> ; <var:Y> := <var:V1> <var:Y> := <var:Y> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Allowing that $ <var:j> = <var:M> $ for integers $ <var:M> $ ahead of running our series of commands it follows that we have $ <var:Y> = <nat:9> \times <var:M> + <nat:1> $ when series of instructions is done . \end{theorem} \begin{proof} Note that the following decorated set of instructions . \begin{eqnarray} \{ <var:j> = <var:M> \} \\ <var:V1> := <var:j> ; \\ \{ <var:j> = <var:M> \land <var:V1> = <var:M> \} \\ <var:V0> := <nat:1> ; \\ \{ <var:j> = <var:M> \land <var:V1> = <var:M> \land <var:V0> = <nat:1> \} \\ <var:V1> := <var:V1> * <nat:9> ; \\ \{ <var:j> = <var:M> \land <var:V1> = <nat:9> * <var:M> \land <var:V0> = <nat:1> \} \\ <var:Y> := <var:V1> \\ \{ <var:j> = <var:M> \land <var:V0> = <nat:1> \land <var:Y> = <nat:9> * <var:M> \} \\ <var:Y> := <var:Y> + <var:V0> \\ \{ <var:j> = <var:M> \land <var:Y> = <nat:9> * <var:M> + <nat:1> \} \end{eqnarray} The application of standard Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:j> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:9> ; <var:Y> := <var:V1> <var:Y> := <var:Y> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:j> = <var:M> }} <def:poly> {{ <var:Y> = <nat:9> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:M> /\ <var:V1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:M> /\ <var:V1> = <var:M> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:M> /\ <var:V1> = <nat:9> * <var:M> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:M> /\ <var:V0> = <nat:1> /\ <var:Y> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:M> /\ <var:Y> = <nat:9> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 