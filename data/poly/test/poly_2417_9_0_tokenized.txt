\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:4> ; <var:s1> := <nat:7> ; <var:s1> := <var:s1> * <var:v> ; <var:s2> := <nat:8> ; <var:s2> := <var:s2> * <var:v> ; <var:s2> := <var:s2> * <var:v> ; <var:U> := <var:s2> ; <var:U> := <var:U> + <var:s1> ; <var:U> := <var:U> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> in \emph{Imp} . Assuming , given all positive integer coefficients $ <var:D> $ , it to hold that $ <var:v> = <var:D> $ ahead of the evaluation of this code it holds that we have $ <var:U> = <nat:8> \cdot <var:D> ^ <nat:2> + <nat:7> \cdot <var:D> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our code is given through usual Hoare logic . Following , we have \begin{eqnarray} \{ <var:v> = <var:D> \} \, <var:s0> := <nat:4> \, \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \} \\ \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \} \, <var:s1> := <nat:7> \, \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> \} \\ \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> \} \, <var:s1> := <var:s1> * <var:v> \, \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> * <var:D> \} \\ \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> * <var:D> \} \, <var:s2> := <nat:8> \, \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> * <var:D> \land <var:s2> = <nat:8> \} \end{eqnarray} Advancing to the next step , we see \begin{eqnarray} \{ <var:v> = <var:D> \} \, <var:s0> := <nat:4> \, \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \} \\ \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \} \, <var:s1> := <nat:7> \, \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> \} \\ \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> \} \, <var:s1> := <var:s1> * <var:v> \, \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> * <var:D> \} \\ \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> * <var:D> \} \, <var:s2> := <nat:8> \, \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \land <var:s1> = <nat:7> * <var:D> \land <var:s2> = <nat:8> \} \end{eqnarray} This is deduced using the rule of Hoare logic . Moving on to the upcoming bit of code found in our series of commands , \begin{eqnarray} \{ <var:v> = <var:D> \} \, <var:s0> := <nat:4> \, \{ <var:v> = <var:D> \land <var:s0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:4> ; <var:s1> := <nat:7> ; <var:s1> := <var:s1> * <var:v> ; <var:s2> := <nat:8> ; <var:s2> := <var:s2> * <var:v> ; <var:s2> := <var:s2> * <var:v> ; <var:U> := <var:s2> ; <var:U> := <var:U> + <var:s1> ; <var:U> := <var:U> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:v> = <var:D> }} <def:poly> {{ <var:U> = <nat:8> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:7> * <var:D> /\ <var:s2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:7> * <var:D> /\ <var:s2> = <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:7> * <var:D> /\ <var:s2> = <nat:8> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:7> * <var:D> /\ <var:U> = <nat:8> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:s0> = <nat:4> /\ <var:U> = <nat:8> * <var:D> ^ <nat:2> + <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:D> /\ <var:U> = <nat:8> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 