\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O1> := <var:k> ; <var:O2> := <var:O1> * <var:k> ; <var:O3> := <var:O2> * <var:k> ; <var:O4> := <var:O3> * <var:k> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:3> ; <var:O2> := <var:O2> * <nat:1> ; <var:O3> := <var:O3> * <nat:4> ; <var:O4> := <var:O4> * <nat:3> ; <var:N> := <var:O4> <var:N> := <var:N> + <var:O3> <var:N> := <var:N> + <var:O2> <var:N> := <var:N> + <var:O1> <var:N> := <var:N> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Allow it to be that $ <var:k> = <var:s> $ prior to evaluating the series of commands then we have $ <var:N> = <nat:3> \cdot <var:s> ^ <nat:4> + <nat:4> \cdot <var:s> ^ <nat:3> + <nat:1> \cdot <var:s> ^ <nat:2> + <nat:3> \cdot <var:s> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the program can be shown through Hoare techniques . Advancing , we have \begin{verbatim} { <var:k> = <var:s> } <var:O1> := <var:k> { <var:k> = <var:s> \land <var:O1> = <var:s> } { <var:k> = <var:s> \land <var:O1> = <var:s> } <var:O2> := <var:O1> * <var:k> { <var:k> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> } { <var:k> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> } <var:O3> := <var:O2> * <var:k> { <var:k> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> } { <var:k> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> } <var:O4> := <var:O3> * <var:k> { <var:k> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O4> = <var:s> ^ <nat:4> } { <var:k> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O4> = <var:s> ^ <nat:4> } <var:O0> := <nat:3> { <var:k> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O4> = <var:s> ^ <nat:4> \land <var:O0> = <nat:3> } { <var:k> = <var:s> \land <var:O1> = <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O4> = <var:s> ^ <nat:4> \land <var:O0> = <nat:3> } <var:O1> := <var:O1> * <nat:3> { <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O4> = <var:s> ^ <nat:4> \land <var:O0> = <nat:3> } { <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O4> = <var:s> ^ <nat:4> \land <var:O0> = <nat:3> } <var:O2> := <var:O2> * <nat:1> { <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:1> * <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O4> = <var:s> ^ <nat:4> \land <var:O0> = <nat:3> } { <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:1> * <var:s> ^ <nat:2> \land <var:O3> = <var:s> ^ <nat:3> \land <var:O4> = <var:s> ^ <nat:4> \land <var:O0> = <nat:3> } <var:O3> := <var:O3> * <nat:4> { <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:1> * <var:s> ^ <nat:2> \land <var:O3> = <nat:4> * <var:s> ^ <nat:3> \land <var:O4> = <var:s> ^ <nat:4> \land <var:O0> = <nat:3> } { <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:1> * <var:s> ^ <nat:2> \land <var:O3> = <nat:4> * <var:s> ^ <nat:3> \land <var:O4> = <var:s> ^ <nat:4> \land <var:O0> = <nat:3> } <var:O4> := <var:O4> * <nat:3> { <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:1> * <var:s> ^ <nat:2> \land <var:O3> = <nat:4> * <var:s> ^ <nat:3> \land <var:O4> = <nat:3> * <var:s> ^ <nat:4> \land <var:O0> = <nat:3> } { <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:1> * <var:s> ^ <nat:2> \land <var:O3> = <nat:4> * <var:s> ^ <nat:3> \land <var:O4> = <nat:3> * <var:s> ^ <nat:4> \land <var:O0> = <nat:3> } <var:N> := <var:O4{ <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:1> * <var:s> ^ <nat:2> \land <var:O3> = <nat:4> * <var:s> ^ <nat:3> \land <var:O0> = <nat:3> \land <var:N> = <nat:3> * <var:s> ^ <nat:4> } { <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:1> * <var:s> ^ <nat:2> \land <var:O3> = <nat:4> * <var:s> ^ <nat:3> \land <var:O0> = <nat:3> \land <var:N> = <nat:3> * <var:s> ^ <nat:4> } <var:N> := <var:N> + <var:O3{ <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:1> * <var:s> ^ <nat:2> \land <var:O0> = <nat:3> \land <var:N> = <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> } { <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O2> = <nat:1> * <var:s> ^ <nat:2> \land <var:O0> = <nat:3> \land <var:N> = <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> } <var:N> := <var:N> + <var:O2{ <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O0> = <nat:3> \land <var:N> = <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> } { <var:k> = <var:s> \land <var:O1> = <nat:3> * <var:s> \land <var:O0> = <nat:3> \land <var:N> = <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> } <var:N> := <var:N> + <var:O1{ <var:k> = <var:s> \land <var:O0> = <nat:3> \land <var:N> = <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> } \end{verbatim} This is shown to be logically sound through the assignment inference rule given in typical Hoare reasoning . Following , we see \begin{verbatim} { <var:k> = <var:s> } <var:O1> := <var:k> { <var:k> = <var:s> \land <var:O1> = <var:s> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <var:O4> : string := " <var:O4> " . Definition <def:poly> := <var:O1> := <var:k> ; <var:O2> := <var:O1> * <var:k> ; <var:O3> := <var:O2> * <var:k> ; <var:O4> := <var:O3> * <var:k> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:3> ; <var:O2> := <var:O2> * <nat:1> ; <var:O3> := <var:O3> * <nat:4> ; <var:O4> := <var:O4> * <nat:3> ; <var:N> := <var:O4> <var:N> := <var:N> + <var:O3> <var:N> := <var:N> + <var:O2> <var:N> := <var:N> + <var:O1> <var:N> := <var:N> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:k> = <var:s> }} <def:poly> {{ <var:N> = <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:O1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:O1> = <var:s> /\ <var:O2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:O1> = <var:s> /\ <var:O2> = <var:s> ^ <nat:2> /\ <var:O3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:O1> = <var:s> /\ <var:O2> = <var:s> ^ <nat:2> /\ <var:O3> = <var:s> ^ <nat:3> /\ <var:O4> = <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:O1> = <var:s> /\ <var:O2> = <var:s> ^ <nat:2> /\ <var:O3> = <var:s> ^ <nat:3> /\ <var:O4> = <var:s> ^ <nat:4> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:O1> = <nat:3> * <var:s> /\ <var:O2> = <var:s> ^ <nat:2> /\ <var:O3> = <var:s> ^ <nat:3> /\ <var:O4> = <var:s> ^ <nat:4> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:O1> = <nat:3> * <var:s> /\ <var:O2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:O3> = <var:s> ^ <nat:3> /\ <var:O4> = <var:s> ^ <nat:4> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:O1> = <nat:3> * <var:s> /\ <var:O2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:O3> = <nat:4> * <var:s> ^ <nat:3> /\ <var:O4> = <var:s> ^ <nat:4> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:O1> = <nat:3> * <var:s> /\ <var:O2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:O3> = <nat:4> * <var:s> ^ <nat:3> /\ <var:O4> = <nat:3> * <var:s> ^ <nat:4> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:O1> = <nat:3> * <var:s> /\ <var:O2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:O3> = <nat:4> * <var:s> ^ <nat:3> /\ <var:O0> = <nat:3> /\ <var:N> = <nat:3> * <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:O1> = <nat:3> * <var:s> /\ <var:O2> = <nat:1> * <var:s> ^ <nat:2> /\ <var:O0> = <nat:3> /\ <var:N> = <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:O1> = <nat:3> * <var:s> /\ <var:O0> = <nat:3> /\ <var:N> = <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:O0> = <nat:3> /\ <var:N> = <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:s> /\ <var:N> = <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 