\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:x1> := <var:o> ; <var:x2> := <var:x1> * <var:o> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:2> ; <var:x2> := <var:x2> * <nat:3> ; <var:G> := <var:x2> <var:G> := <var:G> + <var:x1> <var:G> := <var:G> + <var:x0> \end{verbatim} Allowing assuming some $ <var:m> $ it to be that $ <var:o> = <var:m> $ prior to interpreting this series of instructions , then we see $ <var:G> = <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this segment of code can be done with the below decorated code . \begin{eqnarray} \{ <var:o> = <var:m> \} \\ <var:x1> := <var:o> ; \\ \{ <var:o> = <var:m> \land <var:x1> = <var:m> \} \\ <var:x2> := <var:x1> * <var:o> ; \\ \{ <var:o> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> \} \\ <var:x0> := <nat:2> ; \\ \{ <var:o> = <var:m> \land <var:x1> = <var:m> \land <var:x2> = <var:m> ^ <nat:2> \land <var:x0> = <nat:2> \} \\ <var:x1> := <var:x1> * <nat:2> ; \\ \{ <var:o> = <var:m> \land <var:x1> = <nat:2> \cdot <var:m> \land <var:x2> = <var:m> ^ <nat:2> \land <var:x0> = <nat:2> \} \\ <var:x2> := <var:x2> * <nat:3> ; \\ \{ <var:o> = <var:m> \land <var:x1> = <nat:2> \cdot <var:m> \land <var:x2> = <nat:3> \cdot <var:m> ^ <nat:2> \land <var:x0> = <nat:2> \} \\ <var:G> := <var:x2> \\ \{ <var:o> = <var:m> \land <var:x1> = <nat:2> \cdot <var:m> \land <var:x0> = <nat:2> \land <var:G> = <nat:3> \cdot <var:m> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:x1> \\ \{ <var:o> = <var:m> \land <var:x0> = <nat:2> \land <var:G> = <nat:3> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> \} \\ <var:G> := <var:G> + <var:x0> \\ \{ <var:o> = <var:m> \land <var:G> = <nat:3> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:2> \} \end{eqnarray} Applying usual Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:o> = <var:m> }} <var:x1> := <var:o> ; <var:x2> := <var:x1> * <var:o> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:2> ; <var:x2> := <var:x2> * <nat:3> ; <var:G> := <var:x2> <var:G> := <var:G> + <var:x1> <var:G> := <var:G> + <var:x0> {{ <var:G> = <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:x1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:x1> = <var:m> /\ <var:x2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:x1> = <var:m> /\ <var:x2> = <var:m> ^ <nat:2> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:x1> = <nat:2> * <var:m> /\ <var:x2> = <var:m> ^ <nat:2> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:x1> = <nat:2> * <var:m> /\ <var:x2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:x1> = <nat:2> * <var:m> /\ <var:x0> = <nat:2> /\ <var:G> = <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:x0> = <nat:2> /\ <var:G> = <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:m> /\ <var:G> = <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 