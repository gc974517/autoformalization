\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} such that \begin{verbatim} <var:o> := <nat:1> ; <var:o> := <nat:1> + <var:o> * <var:F> ; <var:o> := <nat:2> + <var:o> * <var:F> ; <var:o> := <nat:2> + <var:o> * <var:F> ; <var:o> := <nat:2> + <var:o> * <var:F> ; <var:o> := <nat:2> + <var:o> * <var:F> ; <var:o> := <nat:4> + <var:o> * <var:F> ; <var:o> := <var:o> * <var:F> ; <var:o> := <nat:1> + <var:o> * <var:F> ; <var:o> := <nat:2> + <var:o> * <var:F> ; <var:o> := <nat:3> + <var:o> * <var:F> \end{verbatim} Allowing --- given all whole numbers $ <var:n> $ --- that $ <var:F> = <var:n> $ ahead of the evaluation of our code , it follows that we see $ <var:o> = <nat:1> * <var:n> ^ <nat:10> + <nat:1> * <var:n> ^ <nat:9> + <nat:2> * <var:n> ^ <nat:8> + <nat:2> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for the series of commands is accomplished with standard Hoare reasoning . Stepping through , we have \begin{verbatim} { <var:F> = <var:n> } <var:o> := <nat:1> { <var:F> = <var:n> \land <var:o> = <nat:1> } { <var:F> = <var:n> \land <var:o> = <nat:1> } <var:o> := <nat:1> + <var:o> * <var:F> { <var:F> = <var:n> \land <var:o> = <nat:1> \cdot <var:n> + <nat:1> } { <var:F> = <var:n> \land <var:o> = <nat:1> \cdot <var:n> + <nat:1> } <var:o> := <nat:2> + <var:o> * <var:F> { <var:F> = <var:n> \land <var:o> = <nat:1> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:2> } { <var:F> = <var:n> \land <var:o> = <nat:1> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:2> } <var:o> := <nat:2> + <var:o> * <var:F> { <var:F> = <var:n> \land <var:o> = <nat:1> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:2> } { <var:F> = <var:n> \land <var:o> = <nat:1> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:2> } <var:o> := <nat:2> + <var:o> * <var:F> { <var:F> = <var:n> \land <var:o> = <nat:1> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:2> } { <var:F> = <var:n> \land <var:o> = <nat:1> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:2> } <var:o> := <nat:2> + <var:o> * <var:F> { <var:F> = <var:n> \land <var:o> = <nat:1> \cdot <var:n> ^ <nat:5> + <nat:1> \cdot <var:n> ^ <nat:4> + <nat:2> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:2> } \end{verbatim} This is deduced through the environment update rule given in usual Hoare reasoning . Moving forward , we have \begin{verbatim} { <var:F> = <var:n> } <var:o> := <nat:1> { <var:F> = <var:n> \land <var:o> = <nat:1> } \end{verbatim} Going forward , we see \begin{verbatim} { <var:F> = <var:n> } <var:o> := <nat:1> { <var:F> = <var:n> \land <var:o> = <nat:1> } { <var:F> = <var:n> \land <var:o> = <nat:1> } <var:o> := <nat:1> + <var:o> * <var:F> { <var:F> = <var:n> \land <var:o> = <nat:1> \cdot <var:n> + <nat:1> } \end{verbatim} This is deduced through the assignment scheme found in usual Hoare techniques . Paying attention to the proceeding lines contained in the set of instructions , we have \begin{verbatim} { <var:F> = <var:n> } <var:o> := <nat:1> { <var:F> = <var:n> \land <var:o> = <nat:1> } { <var:F> = <var:n> \land <var:o> = <nat:1> } <var:o> := <nat:1> + <var:o> * <var:F> { <var:F> = <var:n> \land <var:o> = <nat:1> \cdot <var:n> + <nat:1> } \end{verbatim} This is known to be sound by the environment update scheme defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:F> = <var:n> }} <var:o> := <nat:1> ; <var:o> := <nat:1> + <var:o> * <var:F> ; <var:o> := <nat:2> + <var:o> * <var:F> ; <var:o> := <nat:2> + <var:o> * <var:F> ; <var:o> := <nat:2> + <var:o> * <var:F> ; <var:o> := <nat:2> + <var:o> * <var:F> ; <var:o> := <nat:4> + <var:o> * <var:F> ; <var:o> := <var:o> * <var:F> ; <var:o> := <nat:1> + <var:o> * <var:F> ; <var:o> := <nat:2> + <var:o> * <var:F> ; <var:o> := <nat:3> + <var:o> * <var:F> {{ <var:o> = <nat:1> * <var:n> ^ <nat:10> + <nat:1> * <var:n> ^ <nat:9> + <nat:2> * <var:n> ^ <nat:8> + <nat:2> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:o> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:o> = <nat:1> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:o> = <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:o> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:o> = <nat:1> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:o> = <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:o> = <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:o> = <nat:1> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:o> = <nat:1> * <var:n> ^ <nat:8> + <nat:1> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:o> = <nat:1> * <var:n> ^ <nat:9> + <nat:1> * <var:n> ^ <nat:8> + <nat:2> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:n> /\ <var:o> = <nat:1> * <var:n> ^ <nat:10> + <nat:1> * <var:n> ^ <nat:9> + <nat:2> * <var:n> ^ <nat:8> + <nat:2> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 