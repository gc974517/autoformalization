\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:4> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:l> ; <var:n> := <var:z1> ; <var:n> := <var:n> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:l> = <var:g> $ prior to executing this code segment it follows that $ <var:n> = <nat:2> \cdot <var:g> + <nat:4> $ after code segment has exited . \end{theorem} \begin{proof} The argument for the set of commands is given with typical Hoare techniques . Moving forward to the upcoming command contained in our list of commands , the variable update code yielding $ <nat:4> $ into $ <var:z0>$ . This code transfers the condition $ \{ <var:l> = <var:g> \} $ as the postcondition $ \{ <var:l> = <var:g> \land <var:z0> = <nat:4> \} $ . This is guaranteed with the assignment inference rule defined by usual Hoare logic . Advancing to the next step , we have the assignment statement letting $ <nat:2> $ toward $ <var:z1>$ . This statement takes the precondition $ \{ <var:l> = <var:g> \land <var:z0> = <nat:4> \} $ toward the condition $ \{ <var:l> = <var:g> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \} $ . Advancing to the next piece of code contained in our list of instructions , we see the assignment line defining $ <var:z1> * <var:l> $ toward $ <var:z1>$ . This command redefines the condition $ \{ <var:l> = <var:g> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> \} $ to the condition $ \{ <var:l> = <var:g> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> * <var:g> \} $ . This is guaranteed with the assignment scheme of usual Hoare techniques . Observing the following bit of code seen in our list of instructions , the assignment statement \verb | <var:n> := <var:z1> ; | . This statement takes the precondition $ \{ <var:l> = <var:g> \land <var:z0> = <nat:4> \land <var:z1> = <nat:2> * <var:g> \} $ as $ \{ <var:l> = <var:g> \land <var:z0> = <nat:4> \land <var:n> = <nat:2> * <var:g> \} $ . This is rigorously given by the assignment rule defined in Hoare logic . Focusing on the proceeding step found in the set of commands , the assignment statement yielding $ <var:n> + <var:z0$ toward $ <var:n>$ . This moves the precondition $ \{ <var:l> = <var:g> \land <var:z0> = <nat:4> \land <var:n> = <nat:2> * <var:g> \} $ into the postcondition $ \{ <var:l> = <var:g> \land <var:n> = <nat:2> * <var:g> + <nat:4> \} $ . This is rigorously given by the assignment scheme given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:4> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:l> ; <var:n> := <var:z1> ; <var:n> := <var:n> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:l> = <var:g> }} <def:poly> {{ <var:n> = <nat:2> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:z0> = <nat:4> /\ <var:n> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:n> = <nat:2> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 