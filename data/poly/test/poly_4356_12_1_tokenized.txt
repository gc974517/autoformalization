\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g1> := <var:v> ; <var:g2> := <var:g1> * <var:v> ; <var:g3> := <var:g2> * <var:v> ; <var:g4> := <var:g3> * <var:v> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:7> ; <var:g2> := <var:g2> * <nat:7> ; <var:g4> := <var:g4> * <nat:4> ; <var:A> := <var:g4> <var:A> := <var:A> + <var:g2> <var:A> := <var:A> + <var:g1> <var:A> := <var:A> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Allowing $ <var:v> = <var:e> $ --- for any positive numbers $ <var:e> $ --- prior to executing this program , it follows that we see $ <var:A> = <nat:4> * <var:e> ^ <nat:4> + <nat:7> * <var:e> ^ <nat:2> + <nat:7> * <var:e> + <nat:9> $ when segment of code executes . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:v> = <var:e> \} \\ <var:g1> := <var:v> ; \\ \{ <var:v> = <var:e> \land <var:g1> = <var:e> \} \\ <var:g2> := <var:g1> * <var:v> ; \\ \{ <var:v> = <var:e> \land <var:g1> = <var:e> \land <var:g2> = <var:e> ^ <nat:2> \} \\ <var:g3> := <var:g2> * <var:v> ; \\ \{ <var:v> = <var:e> \land <var:g1> = <var:e> \land <var:g2> = <var:e> ^ <nat:2> \land <var:g3> = <var:e> ^ <nat:3> \} \\ <var:g4> := <var:g3> * <var:v> ; \\ \{ <var:v> = <var:e> \land <var:g1> = <var:e> \land <var:g2> = <var:e> ^ <nat:2> \land <var:g3> = <var:e> ^ <nat:3> \land <var:g4> = <var:e> ^ <nat:4> \} \\ <var:g0> := <nat:9> ; \\ \{ <var:v> = <var:e> \land <var:g1> = <var:e> \land <var:g2> = <var:e> ^ <nat:2> \land <var:g3> = <var:e> ^ <nat:3> \land <var:g4> = <var:e> ^ <nat:4> \land <var:g0> = <nat:9> \} \\ <var:g1> := <var:g1> * <nat:7> ; \\ \{ <var:v> = <var:e> \land <var:g1> = <nat:7> \times <var:e> \land <var:g2> = <var:e> ^ <nat:2> \land <var:g3> = <var:e> ^ <nat:3> \land <var:g4> = <var:e> ^ <nat:4> \land <var:g0> = <nat:9> \} \\ <var:g2> := <var:g2> * <nat:7> ; \\ \{ <var:v> = <var:e> \land <var:g1> = <nat:7> \times <var:e> \land <var:g2> = <nat:7> \times <var:e> ^ <nat:2> \land <var:g3> = <var:e> ^ <nat:3> \land <var:g4> = <var:e> ^ <nat:4> \land <var:g0> = <nat:9> \} \\ <var:g4> := <var:g4> * <nat:4> ; \\ \{ <var:v> = <var:e> \land <var:g1> = <nat:7> \times <var:e> \land <var:g2> = <nat:7> \times <var:e> ^ <nat:2> \land <var:g3> = <var:e> ^ <nat:3> \land <var:g4> = <nat:4> \times <var:e> ^ <nat:4> \land <var:g0> = <nat:9> \} \\ <var:A> := <var:g4> \\ \{ <var:v> = <var:e> \land <var:g1> = <nat:7> \times <var:e> \land <var:g2> = <nat:7> \times <var:e> ^ <nat:2> \land <var:g3> = <var:e> ^ <nat:3> \land <var:g0> = <nat:9> \land <var:A> = <nat:4> \times <var:e> ^ <nat:4> \} \\ <var:A> := <var:A> + <var:g2> \\ \{ <var:v> = <var:e> \land <var:g1> = <nat:7> \times <var:e> \land <var:g0> = <nat:9> \land <var:A> = <nat:4> \times <var:e> ^ <nat:4> + <nat:7> \times <var:e> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:g1> \\ \{ <var:v> = <var:e> \land <var:g0> = <nat:9> \land <var:A> = <nat:4> \times <var:e> ^ <nat:4> + <nat:7> \times <var:e> ^ <nat:2> + <nat:7> \times <var:e> \} \\ <var:A> := <var:A> + <var:g0> \\ \{ <var:v> = <var:e> \land <var:A> = <nat:4> \times <var:e> ^ <nat:4> + <nat:7> \times <var:e> ^ <nat:2> + <nat:7> \times <var:e> + <nat:9> \} \end{eqnarray} Thusly , this set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <var:g4> : string := " <var:g4> " . Definition <def:poly> := <var:g1> := <var:v> ; <var:g2> := <var:g1> * <var:v> ; <var:g3> := <var:g2> * <var:v> ; <var:g4> := <var:g3> * <var:v> ; <var:g0> := <nat:9> ; <var:g1> := <var:g1> * <nat:7> ; <var:g2> := <var:g2> * <nat:7> ; <var:g4> := <var:g4> * <nat:4> ; <var:A> := <var:g4> <var:A> := <var:A> + <var:g2> <var:A> := <var:A> + <var:g1> <var:A> := <var:A> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:v> = <var:e> }} <def:poly> {{ <var:A> = <nat:4> * <var:e> ^ <nat:4> + <nat:7> * <var:e> ^ <nat:2> + <nat:7> * <var:e> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:g1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:g1> = <var:e> /\ <var:g2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:g1> = <var:e> /\ <var:g2> = <var:e> ^ <nat:2> /\ <var:g3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:g1> = <var:e> /\ <var:g2> = <var:e> ^ <nat:2> /\ <var:g3> = <var:e> ^ <nat:3> /\ <var:g4> = <var:e> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:g1> = <var:e> /\ <var:g2> = <var:e> ^ <nat:2> /\ <var:g3> = <var:e> ^ <nat:3> /\ <var:g4> = <var:e> ^ <nat:4> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:g1> = <nat:7> * <var:e> /\ <var:g2> = <var:e> ^ <nat:2> /\ <var:g3> = <var:e> ^ <nat:3> /\ <var:g4> = <var:e> ^ <nat:4> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:g1> = <nat:7> * <var:e> /\ <var:g2> = <nat:7> * <var:e> ^ <nat:2> /\ <var:g3> = <var:e> ^ <nat:3> /\ <var:g4> = <var:e> ^ <nat:4> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:g1> = <nat:7> * <var:e> /\ <var:g2> = <nat:7> * <var:e> ^ <nat:2> /\ <var:g3> = <var:e> ^ <nat:3> /\ <var:g4> = <nat:4> * <var:e> ^ <nat:4> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:g1> = <nat:7> * <var:e> /\ <var:g2> = <nat:7> * <var:e> ^ <nat:2> /\ <var:g3> = <var:e> ^ <nat:3> /\ <var:g0> = <nat:9> /\ <var:A> = <nat:4> * <var:e> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:g1> = <nat:7> * <var:e> /\ <var:g0> = <nat:9> /\ <var:A> = <nat:4> * <var:e> ^ <nat:4> + <nat:7> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:g0> = <nat:9> /\ <var:A> = <nat:4> * <var:e> ^ <nat:4> + <nat:7> * <var:e> ^ <nat:2> + <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:e> /\ <var:A> = <nat:4> * <var:e> ^ <nat:4> + <nat:7> * <var:e> ^ <nat:2> + <nat:7> * <var:e> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 