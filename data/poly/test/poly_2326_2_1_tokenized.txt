\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} such that \begin{verbatim} <var:r0> := <nat:3> ; <var:Z> := <var:r0> \end{verbatim} Assuming ( for $ <var:R> $ ) it to be that $ <var:C> = <var:R> $ prior to executing this code , it holds that $ <var:Z> = <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the program is given with standard Hoare logic . Advancing to the next step in our code segment , we have the statement \verb | <var:r0> := <nat:3> ; | . This statement transfers $ \{ <var:C> = <var:R> \} $ as the condition $ \{ <var:C> = <var:R> \land <var:r0> = <nat:3> \} $ . This is given through the assignment rule given in standard Hoare techniques . Considering the proceeding line found in the code , the assignment statement letting $ <var:r0$ to $ <var:Z>$ . This transfers $ \{ <var:C> = <var:R> \land <var:r0> = <nat:3> \} $ toward the condition $ \{ <var:C> = <var:R> \land <var:Z> = <nat:3> \} $ . This is sound through the assignment scheme obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:C> = <var:R> }} <var:r0> := <nat:3> ; <var:Z> := <var:r0> {{ <var:Z> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:R> /\ <var:Z> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 