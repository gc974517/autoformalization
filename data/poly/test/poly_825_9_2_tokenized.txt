\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:j> := <nat:2> ; <var:j> := <nat:3> + <var:j> * <var:D> ; <var:j> := <nat:4> + <var:j> * <var:D> ; <var:j> := <nat:4> + <var:j> * <var:D> ; <var:j> := <nat:2> + <var:j> * <var:D> ; <var:j> := <nat:3> + <var:j> * <var:D> ; <var:j> := <nat:3> + <var:j> * <var:D> ; <var:j> := <nat:4> + <var:j> * <var:D> ; <var:j> := <nat:4> + <var:j> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> . Given that we have $ <var:D> = <var:Y> $ prior to executing our list of instructions then $ <var:j> = <nat:2> \cdot <var:Y> ^ <nat:8> + <nat:3> \cdot <var:Y> ^ <nat:7> + <nat:4> \cdot <var:Y> ^ <nat:6> + <nat:4> \cdot <var:Y> ^ <nat:5> + <nat:2> \cdot <var:Y> ^ <nat:4> + <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:4> \cdot <var:Y> + <nat:4> $ . \end{theorem} \begin{proof} The proof of this list of commands can be demonstrated by typical Hoare techniques . Moving on to the proceeding lines found in the series of commands , we have \begin{verbatim} { <var:D> = <var:Y> } <var:j> := <nat:2> { <var:D> = <var:Y> \land <var:j> = <nat:2> } { <var:D> = <var:Y> \land <var:j> = <nat:2> } <var:j> := <nat:3> + <var:j> * <var:D> { <var:D> = <var:Y> \land <var:j> = <nat:2> * <var:Y> + <nat:3> } { <var:D> = <var:Y> \land <var:j> = <nat:2> * <var:Y> + <nat:3> } <var:j> := <nat:4> + <var:j> * <var:D> { <var:D> = <var:Y> \land <var:j> = <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:4> } { <var:D> = <var:Y> \land <var:j> = <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:4> } <var:j> := <nat:4> + <var:j> * <var:D> { <var:D> = <var:Y> \land <var:j> = <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> } { <var:D> = <var:Y> \land <var:j> = <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> } <var:j> := <nat:2> + <var:j> * <var:D> { <var:D> = <var:Y> \land <var:j> = <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:2> } \end{verbatim} Going forward , we see \begin{verbatim} { <var:D> = <var:Y> } <var:j> := <nat:2> { <var:D> = <var:Y> \land <var:j> = <nat:2> } { <var:D> = <var:Y> \land <var:j> = <nat:2> } <var:j> := <nat:3> + <var:j> * <var:D> { <var:D> = <var:Y> \land <var:j> = <nat:2> * <var:Y> + <nat:3> } \end{verbatim} Paying attention to the upcoming statement found in our series of commands , \begin{verbatim} { <var:D> = <var:Y> } <var:j> := <nat:2> { <var:D> = <var:Y> \land <var:j> = <nat:2> } \end{verbatim} This is sound using the binding scheme given by typical Hoare techniques . Advancing to the next step , \begin{verbatim} { <var:D> = <var:Y> } <var:j> := <nat:2> { <var:D> = <var:Y> \land <var:j> = <nat:2> } \end{verbatim} This is guaranteed using the variable binding scheme found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:2> ; <var:j> := <nat:3> + <var:j> * <var:D> ; <var:j> := <nat:4> + <var:j> * <var:D> ; <var:j> := <nat:4> + <var:j> * <var:D> ; <var:j> := <nat:2> + <var:j> * <var:D> ; <var:j> := <nat:3> + <var:j> * <var:D> ; <var:j> := <nat:3> + <var:j> * <var:D> ; <var:j> := <nat:4> + <var:j> * <var:D> ; <var:j> := <nat:4> + <var:j> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:D> = <var:Y> }} <def:poly> {{ <var:j> = <nat:2> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:j> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:j> = <nat:2> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:j> = <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:j> = <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:j> = <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:j> = <nat:2> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:4> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:j> = <nat:2> * <var:Y> ^ <nat:6> + <nat:3> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:j> = <nat:2> * <var:Y> ^ <nat:7> + <nat:3> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:4> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:j> = <nat:2> * <var:Y> ^ <nat:8> + <nat:3> * <var:Y> ^ <nat:7> + <nat:4> * <var:Y> ^ <nat:6> + <nat:4> * <var:Y> ^ <nat:5> + <nat:2> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 