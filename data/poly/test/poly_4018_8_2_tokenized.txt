\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:E> := <nat:4> ; <var:E> := <nat:1> + <var:E> * <var:S> ; <var:E> := <nat:1> + <var:E> * <var:S> ; <var:E> := <nat:1> + <var:E> * <var:S> ; <var:E> := <nat:4> + <var:E> * <var:S> ; <var:E> := <nat:1> + <var:E> * <var:S> ; <var:E> := <nat:3> + <var:E> * <var:S> ; <var:E> := <nat:1> + <var:E> * <var:S> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:S> = <var:n> $ before executing our code segment , then we see $ <var:E> = <nat:4> \cdot <var:n> ^ <nat:7> + <nat:1> \cdot <var:n> ^ <nat:6> + <nat:1> \cdot <var:n> ^ <nat:5> + <nat:1> \cdot <var:n> ^ <nat:4> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques gives us : \begin{eqnarray} \{ <var:S> = <var:n> \} \\ <var:E> := <nat:4> ; \\ \{ <var:S> = <var:n> \land <var:E> = <nat:4> \} \\ <var:E> := <nat:1> + <var:E> * <var:S> ; \\ \{ <var:S> = <var:n> \land <var:E> = <nat:4> \cdot <var:n> + <nat:1> \} \\ <var:E> := <nat:1> + <var:E> * <var:S> ; \\ \{ <var:S> = <var:n> \land <var:E> = <nat:4> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:1> \} \\ <var:E> := <nat:1> + <var:E> * <var:S> ; \\ \{ <var:S> = <var:n> \land <var:E> = <nat:4> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:1> \} \\ <var:E> := <nat:4> + <var:E> * <var:S> ; \\ \{ <var:S> = <var:n> \land <var:E> = <nat:4> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:4> \} \\ <var:E> := <nat:1> + <var:E> * <var:S> ; \\ \{ <var:S> = <var:n> \land <var:E> = <nat:4> \cdot <var:n> ^ <nat:5> + <nat:1> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + <nat:1> \} \\ <var:E> := <nat:3> + <var:E> * <var:S> ; \\ \{ <var:S> = <var:n> \land <var:E> = <nat:4> \cdot <var:n> ^ <nat:6> + <nat:1> \cdot <var:n> ^ <nat:5> + <nat:1> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + <nat:3> \} \\ <var:E> := <nat:1> + <var:E> * <var:S> \\ \{ <var:S> = <var:n> \land <var:E> = <nat:4> \cdot <var:n> ^ <nat:7> + <nat:1> \cdot <var:n> ^ <nat:6> + <nat:1> \cdot <var:n> ^ <nat:5> + <nat:1> \cdot <var:n> ^ <nat:4> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> + <nat:1> \} \end{eqnarray} Considering the above , our set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:E> := <nat:4> ; <var:E> := <nat:1> + <var:E> * <var:S> ; <var:E> := <nat:1> + <var:E> * <var:S> ; <var:E> := <nat:1> + <var:E> * <var:S> ; <var:E> := <nat:4> + <var:E> * <var:S> ; <var:E> := <nat:1> + <var:E> * <var:S> ; <var:E> := <nat:3> + <var:E> * <var:S> ; <var:E> := <nat:1> + <var:E> * <var:S> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:S> = <var:n> }} <def:poly> {{ <var:E> = <nat:4> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:E> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:E> = <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:E> = <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:E> = <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:E> = <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:E> = <nat:4> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:E> = <nat:4> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:n> /\ <var:E> = <nat:4> * <var:n> ^ <nat:7> + <nat:1> * <var:n> ^ <nat:6> + <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 