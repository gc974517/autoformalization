\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:1> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:b> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:b> ; <var:F2> := <var:F2> * <var:b> ; <var:e> := <var:F2> ; <var:e> := <var:e> + <var:F1> ; <var:e> := <var:e> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Assume it to be that $ <var:b> = <var:O> $ ( given any positive coefficients $ <var:O> $ ) prior to executing our program it follows that we see $ <var:e> = <nat:1> \times <var:O> ^ <nat:2> + <nat:2> \times <var:O> + <nat:1> $ when set of instructions has finished executing . \end{theorem} \begin{proof} Using usual Hoare logic results in : \begin{eqnarray} \{ <var:b> = <var:O> \} \\ <var:F0> := <nat:1> ; \\ \{ <var:b> = <var:O> \land <var:F0> = <nat:1> \} \\ <var:F1> := <nat:2> ; \\ \{ <var:b> = <var:O> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> \} \\ <var:F1> := <var:F1> * <var:b> ; \\ \{ <var:b> = <var:O> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> \times <var:O> \} \\ <var:F2> := <nat:1> ; \\ \{ <var:b> = <var:O> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> \times <var:O> \land <var:F2> = <nat:1> \} \end{eqnarray} Allowing executing our series of instructions returns : \begin{eqnarray} <var:F2> := <var:F2> * <var:b> ; \\ \{ <var:b> = <var:O> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> \times <var:O> \land <var:F2> = <nat:1> \times <var:O> \} \\ <var:F2> := <var:F2> * <var:b> ; \\ \{ <var:b> = <var:O> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> \times <var:O> \land <var:F2> = <nat:1> \times <var:O> ^ <nat:2> \} \\ <var:e> := <var:F2> ; \\ \{ <var:b> = <var:O> \land <var:F0> = <nat:1> \land <var:F1> = <nat:2> \times <var:O> \land <var:e> = <nat:1> \times <var:O> ^ <nat:2> \} \\ <var:e> := <var:e> + <var:F1> ; \\ \{ <var:b> = <var:O> \land <var:F0> = <nat:1> \land <var:e> = <nat:1> \times <var:O> ^ <nat:2> + <nat:2> \times <var:O> \} \\ <var:e> := <var:e> + <var:F0> \\ \{ <var:b> = <var:O> \land <var:e> = <nat:1> \times <var:O> ^ <nat:2> + <nat:2> \times <var:O> + <nat:1> \} \end{eqnarray} Given the preceding argument , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F0> := <nat:1> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:b> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:b> ; <var:F2> := <var:F2> * <var:b> ; <var:e> := <var:F2> ; <var:e> := <var:e> + <var:F1> ; <var:e> := <var:e> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:b> = <var:O> }} <def:poly> {{ <var:e> = <nat:1> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> * <var:O> /\ <var:F2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> * <var:O> /\ <var:F2> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> * <var:O> /\ <var:F2> = <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:2> * <var:O> /\ <var:e> = <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:F0> = <nat:1> /\ <var:e> = <nat:1> * <var:O> ^ <nat:2> + <nat:2> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:O> /\ <var:e> = <nat:1> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 