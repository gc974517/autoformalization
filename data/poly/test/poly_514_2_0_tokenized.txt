\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:n0> := <nat:4> ; <var:q> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of commands <def:poly> . Given that $ <var:s> = <var:D> $ prior to the execution of this list of instructions , it holds that we see $ <var:q> = <nat:4> $ once list of instructions has executed . \end{theorem} \begin{proof} The flow of logic for this series of instructions is evident by usual Hoare techniques . Paying attention to the next line of code in the series of commands , we see \begin{eqnarray} \{ <var:s> = <var:D> \} \, <var:n0> := <nat:4> \, \{ <var:s> = <var:D> \land <var:n0> = <nat:4> \} \end{eqnarray} Moving on to the proceeding piece of code contained in the set of commands , \begin{eqnarray} \{ <var:s> = <var:D> \} \, <var:n0> := <nat:4> \, \{ <var:s> = <var:D> \land <var:n0> = <nat:4> \} \end{eqnarray} This is guaranteed using the environment update inference rule from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:4> ; <var:q> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:s> = <var:D> }} <def:poly> {{ <var:q> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:D> /\ <var:q> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 