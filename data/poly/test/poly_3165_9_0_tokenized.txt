\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:2> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:H> ; <var:z2> := <nat:7> ; <var:z2> := <var:z2> * <var:H> ; <var:z2> := <var:z2> * <var:H> ; <var:c> := <var:z2> ; <var:c> := <var:c> + <var:z1> ; <var:c> := <var:c> + <var:z0> \end{verbatim} Allowing that $ <var:H> = <var:x> $ before running our segment of code , it follows that $ <var:c> = <nat:7> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:2> $ when series of commands is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions is done with standard Hoare reasoning . Now , the statement giving $ <nat:2> $ into $ <var:z0>$ . This command takes the condition $ \{ <var:H> = <var:x> \} $ toward the postcondition $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \} $ . Moving forward to the next step , we see the binding code \verb | <var:z1> := <nat:2> ; | . This transfers the precondition $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \} $ to the condition $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \} $ . This is given through the assignment inference rule from usual Hoare reasoning . Shifting focus toward the following line of code in our series of instructions , the assignment line \verb | <var:z1> := <var:z1> * <var:H> ; | . This transfers the precondition $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> \} $ to the postcondition $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> * <var:x> \} $ . Considering the upcoming bit of code in our list of commands , we have the variable binding line \verb | <var:z2> := <nat:7> ; | . This transfers the condition $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> * <var:x> \} $ toward the condition $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> * <var:x> \land <var:z2> = <nat:7> \} $ . Keeping momentum , the variable assignmet statement \verb | <var:z2> := <var:z2> * <var:H> ; | . This transfers the condition $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> * <var:x> \land <var:z2> = <nat:7> \} $ to $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> * <var:x> \land <var:z2> = <nat:7> * <var:x> \} $ . This is known to be sound using the assignment scheme of standard Hoare techniques . Further , we see the variable binding statement defining $ <var:z2> * <var:H> $ toward $ <var:z2>$ . This command moves $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> * <var:x> \land <var:z2> = <nat:7> * <var:x> \} $ into the condition $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> * <var:x> \land <var:z2> = <nat:7> * <var:x> ^ <nat:2> \} $ . This is deduced using the assignment rule from standard Hoare logic . Going to the next step , we see the variable binding line defining $ <var:z2> $ toward $ <var:c>$ . This statement forwards the condition $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> * <var:x> \land <var:z2> = <nat:7> * <var:x> ^ <nat:2> \} $ to $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> * <var:x> \land <var:c> = <nat:7> * <var:x> ^ <nat:2> \} $ . Going to the next step , we have the command assigning $ <var:c> + <var:z1> $ toward $ <var:c>$ . This forwards the precondition $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:z1> = <nat:2> * <var:x> \land <var:c> = <nat:7> * <var:x> ^ <nat:2> \} $ toward the condition $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:c> = <nat:7> * <var:x> ^ <nat:2> + <nat:2> * <var:x> \} $ . Going to the next step , we have the binding statement \verb | <var:c> := <var:c> + <var:z0> | . This code moves the condition $ \{ <var:H> = <var:x> \land <var:z0> = <nat:2> \land <var:c> = <nat:7> * <var:x> ^ <nat:2> + <nat:2> * <var:x> \} $ to $ \{ <var:H> = <var:x> \land <var:c> = <nat:7> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:H> = <var:x> }} <var:z0> := <nat:2> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:H> ; <var:z2> := <nat:7> ; <var:z2> := <var:z2> * <var:H> ; <var:z2> := <var:z2> * <var:H> ; <var:c> := <var:z2> ; <var:c> := <var:c> + <var:z1> ; <var:c> := <var:c> + <var:z0> {{ <var:c> = <nat:7> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:x> /\ <var:z2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:x> /\ <var:z2> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:x> /\ <var:z2> = <nat:7> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:2> * <var:x> /\ <var:c> = <nat:7> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:z0> = <nat:2> /\ <var:c> = <nat:7> * <var:x> ^ <nat:2> + <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:c> = <nat:7> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 