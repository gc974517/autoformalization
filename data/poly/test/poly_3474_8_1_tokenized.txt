\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:i1> := <var:N> ; <var:i2> := <var:i1> * <var:N> ; <var:i0> := <nat:9> ; <var:i1> := <var:i1> * <nat:3> ; <var:i2> := <var:i2> * <nat:1> ; <var:F> := <var:i2> <var:F> := <var:F> + <var:i1> <var:F> := <var:F> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Allow that $ <var:N> = <var:E> $ , given every natural coefficients $ <var:E> $ , prior to evaluating this list of commands , it follows that $ <var:F> = <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code is accomplished by Hoare logic . Stepping forward , we see the environment update code binding $ <var:N> $ to $ <var:i1>$ . This code forwards the condition $ \{ <var:N> = <var:E> \} $ into $ \{ <var:N> = <var:E> \land <var:i1> = <var:E> \} $ . This is shown using the assignment law defined by usual Hoare reasoning . Advancing to the upcoming command seen in the set of instructions , we have the assignment command \verb | <var:i2> := <var:i1> * <var:N> ; | . This command moves $ \{ <var:N> = <var:E> \land <var:i1> = <var:E> \} $ to the postcondition $ \{ <var:N> = <var:E> \land <var:i1> = <var:E> \land <var:i2> = <var:E> ^ <nat:2> \} $ . This is ensured with the assignment scheme obtained from Hoare logic . Shifting focus toward the upcoming step seen in our set of commands , we see the line \verb | <var:i0> := <nat:9> ; | . This transfers the precondition $ \{ <var:N> = <var:E> \land <var:i1> = <var:E> \land <var:i2> = <var:E> ^ <nat:2> \} $ toward the postcondition $ \{ <var:N> = <var:E> \land <var:i1> = <var:E> \land <var:i2> = <var:E> ^ <nat:2> \land <var:i0> = <nat:9> \} $ . This is known to be sound through the assignment inference rule obtained from Hoare reasoning . Shifting focus toward the following piece of code in our series of instructions , the binding command letting $ <var:i1> * <nat:3> $ toward $ <var:i1>$ . This line transfers the condition $ \{ <var:N> = <var:E> \land <var:i1> = <var:E> \land <var:i2> = <var:E> ^ <nat:2> \land <var:i0> = <nat:9> \} $ to the postcondition $ \{ <var:N> = <var:E> \land <var:i1> = <nat:3> \cdot <var:E> \land <var:i2> = <var:E> ^ <nat:2> \land <var:i0> = <nat:9> \} $ . This is sound by the assignment rule in typical Hoare reasoning . Shifting focus toward the following statement contained in our series of commands , the variable update line letting $ <var:i2> * <nat:1> $ toward $ <var:i2>$ . This moves $ \{ <var:N> = <var:E> \land <var:i1> = <nat:3> \cdot <var:E> \land <var:i2> = <var:E> ^ <nat:2> \land <var:i0> = <nat:9> \} $ to $ \{ <var:N> = <var:E> \land <var:i1> = <nat:3> \cdot <var:E> \land <var:i2> = <nat:1> \cdot <var:E> ^ <nat:2> \land <var:i0> = <nat:9> \} $ . Immediately after , we have the code yielding $ <var:i2$ to $ <var:F>$ . This transfers the condition $ \{ <var:N> = <var:E> \land <var:i1> = <nat:3> \cdot <var:E> \land <var:i2> = <nat:1> \cdot <var:E> ^ <nat:2> \land <var:i0> = <nat:9> \} $ toward the condition $ \{ <var:N> = <var:E> \land <var:i1> = <nat:3> \cdot <var:E> \land <var:i0> = <nat:9> \land <var:F> = <nat:1> \cdot <var:E> ^ <nat:2> \} $ . Moving on to the upcoming piece of code contained in the set of instructions , the binding command yielding $ <var:F> + <var:i1$ as $ <var:F>$ . This command takes $ \{ <var:N> = <var:E> \land <var:i1> = <nat:3> \cdot <var:E> \land <var:i0> = <nat:9> \land <var:F> = <nat:1> \cdot <var:E> ^ <nat:2> \} $ into the postcondition $ \{ <var:N> = <var:E> \land <var:i0> = <nat:9> \land <var:F> = <nat:1> \cdot <var:E> ^ <nat:2> + <nat:3> \cdot <var:E> \} $ . Moving forward , the statement \verb | <var:F> := <var:F> + <var:i0> | . This code redefines the condition $ \{ <var:N> = <var:E> \land <var:i0> = <nat:9> \land <var:F> = <nat:1> \cdot <var:E> ^ <nat:2> + <nat:3> \cdot <var:E> \} $ toward $ \{ <var:N> = <var:E> \land <var:F> = <nat:1> \cdot <var:E> ^ <nat:2> + <nat:3> \cdot <var:E> + <nat:9> \} $ . This is given using the assignment law found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i1> := <var:N> ; <var:i2> := <var:i1> * <var:N> ; <var:i0> := <nat:9> ; <var:i1> := <var:i1> * <nat:3> ; <var:i2> := <var:i2> * <nat:1> ; <var:F> := <var:i2> <var:F> := <var:F> + <var:i1> <var:F> := <var:F> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:N> = <var:E> }} <def:poly> {{ <var:F> = <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:i1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:i1> = <var:E> /\ <var:i2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:i1> = <var:E> /\ <var:i2> = <var:E> ^ <nat:2> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:i1> = <nat:3> * <var:E> /\ <var:i2> = <var:E> ^ <nat:2> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:i1> = <nat:3> * <var:E> /\ <var:i2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:i1> = <nat:3> * <var:E> /\ <var:i0> = <nat:9> /\ <var:F> = <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:i0> = <nat:9> /\ <var:F> = <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:F> = <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 