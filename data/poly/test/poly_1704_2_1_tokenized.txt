\begin{document} \begin{theorem} Define the following program in \emph{Imp} such that \begin{verbatim} <var:J0> := <nat:4> ; <var:y> := <var:J0> \end{verbatim} Assume given some natural numbers $ <var:K> $ that $ <var:j> = <var:K> $ before executing this set of instructions it must be that $ <var:y> = <nat:4> $ once code exits . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions is evident using the following decorated series of commands . \begin{eqnarray} \{ <var:j> = <var:K> \} \\ <var:J0> := <nat:4> ; \\ \{ <var:j> = <var:K> \land <var:J0> = <nat:4> \} \\ <var:y> := <var:J0> \\ \{ <var:j> = <var:K> \land <var:y> = <nat:4> \} \end{eqnarray} Using standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:j> = <var:K> }} <var:J0> := <nat:4> ; <var:y> := <var:J0> {{ <var:y> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:K> /\ <var:y> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 