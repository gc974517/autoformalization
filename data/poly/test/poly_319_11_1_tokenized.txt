\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:e1> := <var:n> ; <var:e2> := <var:e1> * <var:n> ; <var:e3> := <var:e2> * <var:n> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:2> ; <var:e2> := <var:e2> * <nat:6> ; <var:e3> := <var:e3> * <nat:2> ; <var:u> := <var:e3> <var:u> := <var:u> + <var:e2> <var:u> := <var:u> + <var:e1> <var:u> := <var:u> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> . Given that we have $ <var:n> = <var:K> $ , for natural coefficients $ <var:K> $ , prior to the evaluation of our code , it must be that $ <var:u> = <nat:2> * <var:K> ^ <nat:3> + <nat:6> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:4> $ . \end{theorem} \begin{proof} Using standard Hoare techniques yields : \begin{eqnarray} \{ <var:n> = <var:K> \} \\ <var:e1> := <var:n> ; \\ \{ <var:n> = <var:K> \land <var:e1> = <var:K> \} \\ <var:e2> := <var:e1> * <var:n> ; \\ \{ <var:n> = <var:K> \land <var:e1> = <var:K> \land <var:e2> = <var:K> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:n> ; \\ \{ <var:n> = <var:K> \land <var:e1> = <var:K> \land <var:e2> = <var:K> ^ <nat:2> \land <var:e3> = <var:K> ^ <nat:3> \} \\ <var:e0> := <nat:4> ; \\ \{ <var:n> = <var:K> \land <var:e1> = <var:K> \land <var:e2> = <var:K> ^ <nat:2> \land <var:e3> = <var:K> ^ <nat:3> \land <var:e0> = <nat:4> \} \\ <var:e1> := <var:e1> * <nat:2> ; \\ \{ <var:n> = <var:K> \land <var:e1> = <nat:2> * <var:K> \land <var:e2> = <var:K> ^ <nat:2> \land <var:e3> = <var:K> ^ <nat:3> \land <var:e0> = <nat:4> \} \\ <var:e2> := <var:e2> * <nat:6> ; \\ \{ <var:n> = <var:K> \land <var:e1> = <nat:2> * <var:K> \land <var:e2> = <nat:6> * <var:K> ^ <nat:2> \land <var:e3> = <var:K> ^ <nat:3> \land <var:e0> = <nat:4> \} \\ <var:e3> := <var:e3> * <nat:2> ; \\ \{ <var:n> = <var:K> \land <var:e1> = <nat:2> * <var:K> \land <var:e2> = <nat:6> * <var:K> ^ <nat:2> \land <var:e3> = <nat:2> * <var:K> ^ <nat:3> \land <var:e0> = <nat:4> \} \\ <var:u> := <var:e3> \\ \{ <var:n> = <var:K> \land <var:e1> = <nat:2> * <var:K> \land <var:e2> = <nat:6> * <var:K> ^ <nat:2> \land <var:e0> = <nat:4> \land <var:u> = <nat:2> * <var:K> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:e2> \\ \{ <var:n> = <var:K> \land <var:e1> = <nat:2> * <var:K> \land <var:e0> = <nat:4> \land <var:u> = <nat:2> * <var:K> ^ <nat:3> + <nat:6> * <var:K> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:e1> \\ \{ <var:n> = <var:K> \land <var:e0> = <nat:4> \land <var:u> = <nat:2> * <var:K> ^ <nat:3> + <nat:6> * <var:K> ^ <nat:2> + <nat:2> * <var:K> \} \\ <var:u> := <var:u> + <var:e0> \\ \{ <var:n> = <var:K> \land <var:u> = <nat:2> * <var:K> ^ <nat:3> + <nat:6> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:4> \} \end{eqnarray} Thus , the series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:n> ; <var:e2> := <var:e1> * <var:n> ; <var:e3> := <var:e2> * <var:n> ; <var:e0> := <nat:4> ; <var:e1> := <var:e1> * <nat:2> ; <var:e2> := <var:e2> * <nat:6> ; <var:e3> := <var:e3> * <nat:2> ; <var:u> := <var:e3> <var:u> := <var:u> + <var:e2> <var:u> := <var:u> + <var:e1> <var:u> := <var:u> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:n> = <var:K> }} <def:poly> {{ <var:u> = <nat:2> * <var:K> ^ <nat:3> + <nat:6> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:e1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:e1> = <var:K> /\ <var:e2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:e1> = <var:K> /\ <var:e2> = <var:K> ^ <nat:2> /\ <var:e3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:e1> = <var:K> /\ <var:e2> = <var:K> ^ <nat:2> /\ <var:e3> = <var:K> ^ <nat:3> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:e1> = <nat:2> * <var:K> /\ <var:e2> = <var:K> ^ <nat:2> /\ <var:e3> = <var:K> ^ <nat:3> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:e1> = <nat:2> * <var:K> /\ <var:e2> = <nat:6> * <var:K> ^ <nat:2> /\ <var:e3> = <var:K> ^ <nat:3> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:e1> = <nat:2> * <var:K> /\ <var:e2> = <nat:6> * <var:K> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:K> ^ <nat:3> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:e1> = <nat:2> * <var:K> /\ <var:e2> = <nat:6> * <var:K> ^ <nat:2> /\ <var:e0> = <nat:4> /\ <var:u> = <nat:2> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:e1> = <nat:2> * <var:K> /\ <var:e0> = <nat:4> /\ <var:u> = <nat:2> * <var:K> ^ <nat:3> + <nat:6> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:e0> = <nat:4> /\ <var:u> = <nat:2> * <var:K> ^ <nat:3> + <nat:6> * <var:K> ^ <nat:2> + <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:u> = <nat:2> * <var:K> ^ <nat:3> + <nat:6> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 