\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:5> ; <var:v1> := <nat:6> ; <var:v1> := <var:v1> * <var:n> ; <var:v2> := <nat:8> ; <var:v2> := <var:v2> * <var:n> ; <var:v2> := <var:v2> * <var:n> ; <var:M> := <var:v2> ; <var:M> := <var:M> + <var:v1> ; <var:M> := <var:M> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:n> = <var:E> $ --- given any natural numbers $ <var:E> $ --- prior to running our list of commands then we see $ <var:M> = <nat:8> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> + <nat:5> $ once list of instructions executes . \end{theorem} \begin{proof} The course of logic for our code segment can be seen with Hoare techniques . Considering the upcoming step found in the segment of code , we see the assignment code \verb | <var:v0> := <nat:5> ; | . This transfers the condition $ \{ <var:n> = <var:E> \} $ to $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \} $ . This is ensured using the assignment law defined in usual Hoare reasoning . Moving onward , we see the variable assignmet command \verb | <var:v1> := <nat:6> ; | . This transfers the condition $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \} $ toward the condition $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:v1> = <nat:6> \} $ . Moving forward to the next step , we see the assignment code binding $ <var:v1> * <var:n> $ to $ <var:v1>$ . This line forwards the precondition $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:v1> = <nat:6> \} $ into the postcondition $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:v1> = <nat:6> \cdot <var:E> \} $ . This is shown to be logically sound by the assignment law obtained from typical Hoare reasoning . Honing in on the proceeding line seen in the list of commands , we have the environment update line giving $ <nat:8> $ to $ <var:v2>$ . This moves $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:v1> = <nat:6> \cdot <var:E> \} $ toward $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:v1> = <nat:6> \cdot <var:E> \land <var:v2> = <nat:8> \} $ . Focusing on the next bit of code in the list of instructions , we have the variable assignmet command \verb | <var:v2> := <var:v2> * <var:n> ; | . This command transfers $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:v1> = <nat:6> \cdot <var:E> \land <var:v2> = <nat:8> \} $ as the condition $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:v1> = <nat:6> \cdot <var:E> \land <var:v2> = <nat:8> \cdot <var:E> \} $ . Advancing , we see the assignment statement \verb | <var:v2> := <var:v2> * <var:n> ; | . This statement forwards the condition $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:v1> = <nat:6> \cdot <var:E> \land <var:v2> = <nat:8> \cdot <var:E> \} $ as the postcondition $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:v1> = <nat:6> \cdot <var:E> \land <var:v2> = <nat:8> \cdot <var:E> ^ <nat:2> \} $ . Going to the next step , the variable binding line yielding $ <var:v2> $ toward $ <var:M>$ . This forwards the precondition $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:v1> = <nat:6> \cdot <var:E> \land <var:v2> = <nat:8> \cdot <var:E> ^ <nat:2> \} $ to the condition $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:v1> = <nat:6> \cdot <var:E> \land <var:M> = <nat:8> \cdot <var:E> ^ <nat:2> \} $ . This is sound with the assignment inference rule found in standard Hoare logic . Stepping forward , we have the environment update line binding $ <var:M> + <var:v1> $ toward $ <var:M>$ . This moves the precondition $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:v1> = <nat:6> \cdot <var:E> \land <var:M> = <nat:8> \cdot <var:E> ^ <nat:2> \} $ to the condition $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:M> = <nat:8> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> \} $ . Taking another step toward the next statement seen in the segment of code , we have the variable update command \verb | <var:M> := <var:M> + <var:v0> | . This moves $ \{ <var:n> = <var:E> \land <var:v0> = <nat:5> \land <var:M> = <nat:8> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> \} $ to $ \{ <var:n> = <var:E> \land <var:M> = <nat:8> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> + <nat:5> \} $ . This is given with the assignment scheme found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <def:poly> := <var:v0> := <nat:5> ; <var:v1> := <nat:6> ; <var:v1> := <var:v1> * <var:n> ; <var:v2> := <nat:8> ; <var:v2> := <var:v2> * <var:n> ; <var:v2> := <var:v2> * <var:n> ; <var:M> := <var:v2> ; <var:M> := <var:M> + <var:v1> ; <var:M> := <var:M> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:n> = <var:E> }} <def:poly> {{ <var:M> = <nat:8> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:6> * <var:E> /\ <var:v2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:6> * <var:E> /\ <var:v2> = <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:6> * <var:E> /\ <var:v2> = <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:v0> = <nat:5> /\ <var:v1> = <nat:6> * <var:E> /\ <var:M> = <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:v0> = <nat:5> /\ <var:M> = <nat:8> * <var:E> ^ <nat:2> + <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:M> = <nat:8> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 