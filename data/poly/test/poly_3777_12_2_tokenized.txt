\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:q> := <nat:1> ; <var:q> := <var:q> * <var:e> ; <var:q> := <nat:3> + <var:q> * <var:e> ; <var:q> := <var:q> * <var:e> ; <var:q> := <nat:3> + <var:q> * <var:e> ; <var:q> := <nat:4> + <var:q> * <var:e> ; <var:q> := <nat:2> + <var:q> * <var:e> ; <var:q> := <nat:4> + <var:q> * <var:e> ; <var:q> := <nat:2> + <var:q> * <var:e> ; <var:q> := <nat:3> + <var:q> * <var:e> ; <var:q> := <nat:2> + <var:q> * <var:e> ; <var:q> := <nat:2> + <var:q> * <var:e> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:e> = <var:l> $ , given any $ <var:l> \in \mathbb{N} $ , prior to the execution of the list of commands , it follows that we have $ <var:q> = <nat:1> \cdot <var:l> ^ <nat:11> + <nat:3> \cdot <var:l> ^ <nat:9> + <nat:3> \cdot <var:l> ^ <nat:7> + <nat:4> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:3> + <nat:3> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + <nat:2> $ after segment of code has exited . \end{theorem} \begin{proof} The method of proof for this series of instructions is accomplished by usual Hoare techniques . Looking at the upcoming steps found in our program , we see \begin{verbatim} { <var:e> = <var:l> } <var:q> := <nat:1> { <var:e> = <var:l> \land <var:q> = <nat:1> } { <var:e> = <var:l> \land <var:q> = <nat:1> } <var:q> := <var:q> * <var:e> { <var:e> = <var:l> \land <var:q> = <nat:1> * <var:l> + } { <var:e> = <var:l> \land <var:q> = <nat:1> * <var:l> + } <var:q> := <nat:3> + <var:q> * <var:e> { <var:e> = <var:l> \land <var:q> = <nat:1> * <var:l> ^ <nat:2> + <nat:3> } \end{verbatim} This is shown to be logically sound through the assignment scheme obtained from standard Hoare reasoning . Jumping to the next statements found in the series of commands , we have \begin{verbatim} { <var:e> = <var:l> } <var:q> := <nat:1> { <var:e> = <var:l> \land <var:q> = <nat:1> } { <var:e> = <var:l> \land <var:q> = <nat:1> } <var:q> := <var:q> * <var:e> { <var:e> = <var:l> \land <var:q> = <nat:1> * <var:l> + } { <var:e> = <var:l> \land <var:q> = <nat:1> * <var:l> + } <var:q> := <nat:3> + <var:q> * <var:e> { <var:e> = <var:l> \land <var:q> = <nat:1> * <var:l> ^ <nat:2> + <nat:3> } { <var:e> = <var:l> \land <var:q> = <nat:1> * <var:l> ^ <nat:2> + <nat:3> } <var:q> := <var:q> * <var:e> { <var:e> = <var:l> \land <var:q> = <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> + } \end{verbatim} Paying attention to the subsequent command found in our list of instructions , we see \begin{verbatim} { <var:e> = <var:l> } <var:q> := <nat:1> { <var:e> = <var:l> \land <var:q> = <nat:1> } \end{verbatim} Next , we see \begin{verbatim} { <var:e> = <var:l> } <var:q> := <nat:1> { <var:e> = <var:l> \land <var:q> = <nat:1> } { <var:e> = <var:l> \land <var:q> = <nat:1> } <var:q> := <var:q> * <var:e> { <var:e> = <var:l> \land <var:q> = <nat:1> * <var:l> + } { <var:e> = <var:l> \land <var:q> = <nat:1> * <var:l> + } <var:q> := <nat:3> + <var:q> * <var:e> { <var:e> = <var:l> \land <var:q> = <nat:1> * <var:l> ^ <nat:2> + <nat:3> } \end{verbatim} This is guaranteed using the environment update rule of standard Hoare techniques . Jumping to the subsequent statement found in our set of instructions , we see \begin{verbatim} { <var:e> = <var:l> } <var:q> := <nat:1> { <var:e> = <var:l> \land <var:q> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:1> ; <var:q> := <var:q> * <var:e> ; <var:q> := <nat:3> + <var:q> * <var:e> ; <var:q> := <var:q> * <var:e> ; <var:q> := <nat:3> + <var:q> * <var:e> ; <var:q> := <nat:4> + <var:q> * <var:e> ; <var:q> := <nat:2> + <var:q> * <var:e> ; <var:q> := <nat:4> + <var:q> * <var:e> ; <var:q> := <nat:2> + <var:q> * <var:e> ; <var:q> := <nat:3> + <var:q> * <var:e> ; <var:q> := <nat:2> + <var:q> * <var:e> ; <var:q> := <nat:2> + <var:q> * <var:e> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:e> = <var:l> }} <def:poly> {{ <var:q> = <nat:1> * <var:l> ^ <nat:11> + <nat:3> * <var:l> ^ <nat:9> + <nat:3> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:q> = <nat:1> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:8> + <nat:3> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:9> + <nat:3> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:10> + <nat:3> * <var:l> ^ <nat:8> + <nat:3> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:q> = <nat:1> * <var:l> ^ <nat:11> + <nat:3> * <var:l> ^ <nat:9> + <nat:3> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 