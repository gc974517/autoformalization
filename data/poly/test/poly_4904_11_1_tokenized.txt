\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I1> := <var:F> ; <var:I2> := <var:I1> * <var:F> ; <var:I3> := <var:I2> * <var:F> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:9> ; <var:I2> := <var:I2> * <nat:4> ; <var:I3> := <var:I3> * <nat:1> ; <var:g> := <var:I3> <var:g> := <var:g> + <var:I2> <var:g> := <var:g> + <var:I1> <var:g> := <var:g> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:F> = <var:e> $ ( for every positive integer coefficients $ <var:e> $ ) before running our set of instructions , it must be that we have $ <var:g> = <nat:1> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + <nat:9> \times <var:e> + <nat:3> $ after set of commands exits . \end{theorem} \begin{proof} The flow of logic for the program is accomplished using typical Hoare techniques . Going forward , we see \verb | { <var:F> = <var:e> } <var:I1> := <var:F> { <var:F> = <var:e> \land <var:I1> = <var:e> } | , \verb | { <var:F> = <var:e> \land <var:I1> = <var:e> } <var:I2> := <var:I1> * <var:F> { <var:F> = <var:e> \land <var:I1> = <var:e> \land <var:I2> = <var:e> ^ <nat:2> } | , \verb | { <var:F> = <var:e> \land <var:I1> = <var:e> \land <var:I2> = <var:e> ^ <nat:2> } <var:I3> := <var:I2> * <var:F> { <var:F> = <var:e> \land <var:I1> = <var:e> \land <var:I2> = <var:e> ^ <nat:2> \land <var:I3> = <var:e> ^ <nat:3> } | , \verb | { <var:F> = <var:e> \land <var:I1> = <var:e> \land <var:I2> = <var:e> ^ <nat:2> \land <var:I3> = <var:e> ^ <nat:3> } <var:I0> := <nat:3> { <var:F> = <var:e> \land <var:I1> = <var:e> \land <var:I2> = <var:e> ^ <nat:2> \land <var:I3> = <var:e> ^ <nat:3> \land <var:I0> = <nat:3> } | , \verb | { <var:F> = <var:e> \land <var:I1> = <var:e> \land <var:I2> = <var:e> ^ <nat:2> \land <var:I3> = <var:e> ^ <nat:3> \land <var:I0> = <nat:3> } <var:I1> := <var:I1> * <nat:9> { <var:F> = <var:e> \land <var:I1> = <nat:9> \times <var:e> \land <var:I2> = <var:e> ^ <nat:2> \land <var:I3> = <var:e> ^ <nat:3> \land <var:I0> = <nat:3> } | , \verb | { <var:F> = <var:e> \land <var:I1> = <nat:9> \times <var:e> \land <var:I2> = <var:e> ^ <nat:2> \land <var:I3> = <var:e> ^ <nat:3> \land <var:I0> = <nat:3> } <var:I2> := <var:I2> * <nat:4> { <var:F> = <var:e> \land <var:I1> = <nat:9> \times <var:e> \land <var:I2> = <nat:4> \times <var:e> ^ <nat:2> \land <var:I3> = <var:e> ^ <nat:3> \land <var:I0> = <nat:3> } | , \verb | { <var:F> = <var:e> \land <var:I1> = <nat:9> \times <var:e> \land <var:I2> = <nat:4> \times <var:e> ^ <nat:2> \land <var:I3> = <var:e> ^ <nat:3> \land <var:I0> = <nat:3> } <var:I3> := <var:I3> * <nat:1> { <var:F> = <var:e> \land <var:I1> = <nat:9> \times <var:e> \land <var:I2> = <nat:4> \times <var:e> ^ <nat:2> \land <var:I3> = <nat:1> \times <var:e> ^ <nat:3> \land <var:I0> = <nat:3> } | , \verb | { <var:F> = <var:e> \land <var:I1> = <nat:9> \times <var:e> \land <var:I2> = <nat:4> \times <var:e> ^ <nat:2> \land <var:I3> = <nat:1> \times <var:e> ^ <nat:3> \land <var:I0> = <nat:3> } <var:g> := <var:I3{ <var:F> = <var:e> \land <var:I1> = <nat:9> \times <var:e> \land <var:I2> = <nat:4> \times <var:e> ^ <nat:2> \land <var:I0> = <nat:3> \land <var:g> = <nat:1> \times <var:e> ^ <nat:3> } | , \verb | { <var:F> = <var:e> \land <var:I1> = <nat:9> \times <var:e> \land <var:I2> = <nat:4> \times <var:e> ^ <nat:2> \land <var:I0> = <nat:3> \land <var:g> = <nat:1> \times <var:e> ^ <nat:3> } <var:g> := <var:g> + <var:I2{ <var:F> = <var:e> \land <var:I1> = <nat:9> \times <var:e> \land <var:I0> = <nat:3> \land <var:g> = <nat:1> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> } | , \verb | { <var:F> = <var:e> \land <var:I1> = <nat:9> \times <var:e> \land <var:I0> = <nat:3> \land <var:g> = <nat:1> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> } <var:g> := <var:g> + <var:I1{ <var:F> = <var:e> \land <var:I0> = <nat:3> \land <var:g> = <nat:1> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + <nat:9> \times <var:e> } | and \verb | { <var:F> = <var:e> \land <var:I0> = <nat:3> \land <var:g> = <nat:1> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + <nat:9> \times <var:e> } <var:g> := <var:g> + <var:I0{ <var:F> = <var:e> \land <var:g> = <nat:1> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + <nat:9> \times <var:e> + <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I1> := <var:F> ; <var:I2> := <var:I1> * <var:F> ; <var:I3> := <var:I2> * <var:F> ; <var:I0> := <nat:3> ; <var:I1> := <var:I1> * <nat:9> ; <var:I2> := <var:I2> * <nat:4> ; <var:I3> := <var:I3> * <nat:1> ; <var:g> := <var:I3> <var:g> := <var:g> + <var:I2> <var:g> := <var:g> + <var:I1> <var:g> := <var:g> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:F> = <var:e> }} <def:poly> {{ <var:g> = <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:I1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:I1> = <var:e> /\ <var:I2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:I1> = <var:e> /\ <var:I2> = <var:e> ^ <nat:2> /\ <var:I3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:I1> = <var:e> /\ <var:I2> = <var:e> ^ <nat:2> /\ <var:I3> = <var:e> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:I1> = <nat:9> * <var:e> /\ <var:I2> = <var:e> ^ <nat:2> /\ <var:I3> = <var:e> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:I1> = <nat:9> * <var:e> /\ <var:I2> = <nat:4> * <var:e> ^ <nat:2> /\ <var:I3> = <var:e> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:I1> = <nat:9> * <var:e> /\ <var:I2> = <nat:4> * <var:e> ^ <nat:2> /\ <var:I3> = <nat:1> * <var:e> ^ <nat:3> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:I1> = <nat:9> * <var:e> /\ <var:I2> = <nat:4> * <var:e> ^ <nat:2> /\ <var:I0> = <nat:3> /\ <var:g> = <nat:1> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:I1> = <nat:9> * <var:e> /\ <var:I0> = <nat:3> /\ <var:g> = <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:I0> = <nat:3> /\ <var:g> = <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:e> /\ <var:g> = <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 