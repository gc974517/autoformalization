\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:3> ; <var:F> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:C> = <var:K> $ prior to running our segment of code it follows that $ <var:F> = <nat:3> $ after code segment is done executing . \end{theorem} \begin{proof} Using Hoare reasoning produces : \begin{eqnarray} \{ <var:C> = <var:K> \} \\ <var:e0> := <nat:3> ; \\ \{ <var:C> = <var:K> \land <var:e0> = <nat:3> \} \\ <var:F> := <var:e0> \\ \{ <var:C> = <var:K> \land <var:F> = <nat:3> \} \end{eqnarray} Given the preceding argument , our segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:3> ; <var:F> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:C> = <var:K> }} <def:poly> {{ <var:F> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:F> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 