\begin{document} \begin{theorem} Take the following set of instructions as follows \begin{verbatim} <var:w0> := <nat:1> ; <var:w1> := <nat:6> ; <var:w1> := <var:w1> * <var:e> ; <var:w2> := <nat:5> ; <var:w2> := <var:w2> * <var:e> ; <var:w2> := <var:w2> * <var:e> ; <var:w3> := <nat:1> ; <var:w3> := <var:w3> * <var:e> ; <var:w3> := <var:w3> * <var:e> ; <var:w3> := <var:w3> * <var:e> ; <var:s> := <var:w3> ; <var:s> := <var:s> + <var:w2> ; <var:s> := <var:s> + <var:w1> ; <var:s> := <var:s> + <var:w0> \end{verbatim} Assuming that we have $ <var:e> = <var:g> $ before the execution of our segment of code , it must be that $ <var:s> = <nat:1> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:6> * <var:g> + <nat:1> $ . \end{theorem} \begin{proof} The proof of our set of instructions can be accomplished through this decorated set of commands . \begin{eqnarray} \{ <var:e> = <var:g> \} \\ <var:w0> := <nat:1> ; \\ \{ <var:e> = <var:g> \land <var:w0> = <nat:1> \} \\ <var:w1> := <nat:6> ; \\ \{ <var:e> = <var:g> \land <var:w0> = <nat:1> \land <var:w1> = <nat:6> \} \\ <var:w1> := <var:w1> * <var:e> ; \\ \{ <var:e> = <var:g> \land <var:w0> = <nat:1> \land <var:w1> = <nat:6> * <var:g> \} \\ <var:w2> := <nat:5> ; \\ \{ <var:e> = <var:g> \land <var:w0> = <nat:1> \land <var:w1> = <nat:6> * <var:g> \land <var:w2> = <nat:5> \} \\ <var:w2> := <var:w2> * <var:e> ; \\ \{ <var:e> = <var:g> \land <var:w0> = <nat:1> \land <var:w1> = <nat:6> * <var:g> \land <var:w2> = <nat:5> * <var:g> \} \\ <var:w2> := <var:w2> * <var:e> ; \\ \{ <var:e> = <var:g> \land <var:w0> = <nat:1> \land <var:w1> = <nat:6> * <var:g> \land <var:w2> = <nat:5> * <var:g> ^ <nat:2> \} \\ <var:w3> := <nat:1> ; \\ \{ <var:e> = <var:g> \land <var:w0> = <nat:1> \land <var:w1> = <nat:6> * <var:g> \land <var:w2> = <nat:5> * <var:g> ^ <nat:2> \land <var:w3> = <nat:1> \} \\ <var:w3> := <var:w3> * <var:e> ; \\ \{ <var:e> = <var:g> \land <var:w0> = <nat:1> \land <var:w1> = <nat:6> * <var:g> \land <var:w2> = <nat:5> * <var:g> ^ <nat:2> \land <var:w3> = <nat:1> * <var:g> \} \\ <var:w3> := <var:w3> * <var:e> ; \\ \{ <var:e> = <var:g> \land <var:w0> = <nat:1> \land <var:w1> = <nat:6> * <var:g> \land <var:w2> = <nat:5> * <var:g> ^ <nat:2> \land <var:w3> = <nat:1> * <var:g> ^ <nat:2> \} \\ <var:w3> := <var:w3> * <var:e> ; \\ \{ <var:e> = <var:g> \land <var:w0> = <nat:1> \land <var:w1> = <nat:6> * <var:g> \land <var:w2> = <nat:5> * <var:g> ^ <nat:2> \land <var:w3> = <nat:1> * <var:g> ^ <nat:3> \} \\ <var:s> := <var:w3> ; \\ \{ <var:e> = <var:g> \land <var:w0> = <nat:1> \land <var:w1> = <nat:6> * <var:g> \land <var:w2> = <nat:5> * <var:g> ^ <nat:2> \land <var:s> = <nat:1> * <var:g> ^ <nat:3> \} \\ <var:s> := <var:s> + <var:w2> ; \\ \{ <var:e> = <var:g> \land <var:w0> = <nat:1> \land <var:w1> = <nat:6> * <var:g> \land <var:s> = <nat:1> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> \} \end{eqnarray} Advancing interpreting our series of instructions results in : \begin{eqnarray} <var:s> := <var:s> + <var:w1> ; \\ \{ <var:e> = <var:g> \land <var:w0> = <nat:1> \land <var:s> = <nat:1> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:6> * <var:g> \} \\ <var:s> := <var:s> + <var:w0> \\ \{ <var:e> = <var:g> \land <var:s> = <nat:1> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:6> * <var:g> + <nat:1> \} \end{eqnarray} Using standard Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:e> = <var:g> }} <var:w0> := <nat:1> ; <var:w1> := <nat:6> ; <var:w1> := <var:w1> * <var:e> ; <var:w2> := <nat:5> ; <var:w2> := <var:w2> * <var:e> ; <var:w2> := <var:w2> * <var:e> ; <var:w3> := <nat:1> ; <var:w3> := <var:w3> * <var:e> ; <var:w3> := <var:w3> * <var:e> ; <var:w3> := <var:w3> * <var:e> ; <var:s> := <var:w3> ; <var:s> := <var:s> + <var:w2> ; <var:s> := <var:s> + <var:w1> ; <var:s> := <var:s> + <var:w0> {{ <var:s> = <nat:1> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:6> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:6> * <var:g> /\ <var:w2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:6> * <var:g> /\ <var:w2> = <nat:5> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:6> * <var:g> /\ <var:w2> = <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:6> * <var:g> /\ <var:w2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:w3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:6> * <var:g> /\ <var:w2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:w3> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:6> * <var:g> /\ <var:w2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:w3> = <nat:1> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:6> * <var:g> /\ <var:w2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:w3> = <nat:1> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:6> * <var:g> /\ <var:w2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:s> = <nat:1> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:6> * <var:g> /\ <var:s> = <nat:1> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:w0> = <nat:1> /\ <var:s> = <nat:1> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:s> = <nat:1> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:6> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 