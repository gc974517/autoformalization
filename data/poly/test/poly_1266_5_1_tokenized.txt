\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p1> := <var:o> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:2> ; <var:X> := <var:p1> <var:X> := <var:X> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:o> = <var:L> $ given all positive integers $ <var:L> $ ahead of executing our list of instructions , it follows that we have $ <var:X> = <nat:2> \times <var:L> + <nat:4> $ once set of instructions has executed . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives : \begin{eqnarray} \{ <var:o> = <var:L> \} \\ <var:p1> := <var:o> ; \\ \{ <var:o> = <var:L> \land <var:p1> = <var:L> \} \\ <var:p0> := <nat:4> ; \\ \{ <var:o> = <var:L> \land <var:p1> = <var:L> \land <var:p0> = <nat:4> \} \\ <var:p1> := <var:p1> * <nat:2> ; \\ \{ <var:o> = <var:L> \land <var:p1> = <nat:2> * <var:L> \land <var:p0> = <nat:4> \} \\ <var:X> := <var:p1> \\ \{ <var:o> = <var:L> \land <var:p0> = <nat:4> \land <var:X> = <nat:2> * <var:L> \} \\ <var:X> := <var:X> + <var:p0> \\ \{ <var:o> = <var:L> \land <var:X> = <nat:2> * <var:L> + <nat:4> \} \end{eqnarray} Thus , our set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p1> := <var:o> ; <var:p0> := <nat:4> ; <var:p1> := <var:p1> * <nat:2> ; <var:X> := <var:p1> <var:X> := <var:X> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:o> = <var:L> }} <def:poly> {{ <var:X> = <nat:2> * <var:L> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:p1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:p1> = <var:L> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:p1> = <nat:2> * <var:L> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:p0> = <nat:4> /\ <var:X> = <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:L> /\ <var:X> = <nat:2> * <var:L> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 