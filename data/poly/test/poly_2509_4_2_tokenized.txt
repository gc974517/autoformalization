\begin{document} \begin{theorem} Take the following list of instructions such that \begin{verbatim} <var:L> := <nat:2> ; <var:L> := <nat:2> + <var:L> * <var:U> ; <var:L> := <nat:1> + <var:L> * <var:U> ; <var:L> := <nat:3> + <var:L> * <var:U> \end{verbatim} Allowing , given every natural coefficients $ <var:s> $ , $ <var:U> = <var:s> $ ahead of evaluating this code , it holds that we see $ <var:L> = <nat:2> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands can be seen with typical Hoare reasoning . Going to the next step , we have the variable update command letting $ <nat:2> $ into $ <var:L>$ . This statement redefines $ \{ <var:U> = <var:s> \} $ into the postcondition $ \{ <var:U> = <var:s> \land <var:L> = <nat:2> \} $ . This is shown to be logically sound by the assignment scheme found in standard Hoare reasoning . Looking at the proceeding bit of code seen in the list of instructions , we have the variable assignmet line \verb | <var:L> := <nat:2> + <var:L> * <var:U> ; | . This advances the precondition $ \{ <var:U> = <var:s> \land <var:L> = <nat:2> \} $ as the postcondition $ \{ <var:U> = <var:s> \land <var:L> = <nat:2> \times <var:s> + <nat:2> \} $ . This is rigorously given through the assignment law found in standard Hoare reasoning . Moving forward to the next step , we see the environment update code binding $ <nat:1> + <var:L> * <var:U> $ to $ <var:L>$ . This advances $ \{ <var:U> = <var:s> \land <var:L> = <nat:2> \times <var:s> + <nat:2> \} $ to the postcondition $ \{ <var:U> = <var:s> \land <var:L> = <nat:2> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:1> \} $ . Shifting focus toward the proceeding line of code found in the list of commands , we see the assignment code \verb | <var:L> := <nat:3> + <var:L> * <var:U> | . This advances the condition $ \{ <var:U> = <var:s> \land <var:L> = <nat:2> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:1> \} $ to the condition $ \{ <var:U> = <var:s> \land <var:L> = <nat:2> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + <nat:3> \} $ . This is deduced using the assignment scheme obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:U> = <var:s> }} <var:L> := <nat:2> ; <var:L> := <nat:2> + <var:L> * <var:U> ; <var:L> := <nat:1> + <var:L> * <var:U> ; <var:L> := <nat:3> + <var:L> * <var:U> {{ <var:L> = <nat:2> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:L> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:L> = <nat:2> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:L> = <nat:2> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:L> = <nat:2> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 