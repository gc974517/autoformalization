\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} such that \begin{verbatim} <var:G1> := <var:W> ; <var:G2> := <var:G1> * <var:W> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:7> ; <var:G2> := <var:G2> * <nat:6> ; <var:l> := <var:G2> <var:l> := <var:l> + <var:G1> <var:l> := <var:l> + <var:G0> \end{verbatim} Given that we have $ <var:W> = <var:O> $ --- for whole numbers $ <var:O> $ --- before interpreting our set of instructions it must be that we see $ <var:l> = <nat:6> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:3> $ . \end{theorem} \begin{proof} Observe that this decorated list of instructions . \begin{eqnarray} \{ <var:W> = <var:O> \} \\ <var:G1> := <var:W> ; \\ \{ <var:W> = <var:O> \land <var:G1> = <var:O> \} \\ <var:G2> := <var:G1> * <var:W> ; \\ \{ <var:W> = <var:O> \land <var:G1> = <var:O> \land <var:G2> = <var:O> ^ <nat:2> \} \\ <var:G0> := <nat:3> ; \\ \{ <var:W> = <var:O> \land <var:G1> = <var:O> \land <var:G2> = <var:O> ^ <nat:2> \land <var:G0> = <nat:3> \} \\ <var:G1> := <var:G1> * <nat:7> ; \\ \{ <var:W> = <var:O> \land <var:G1> = <nat:7> \times <var:O> \land <var:G2> = <var:O> ^ <nat:2> \land <var:G0> = <nat:3> \} \\ <var:G2> := <var:G2> * <nat:6> ; \\ \{ <var:W> = <var:O> \land <var:G1> = <nat:7> \times <var:O> \land <var:G2> = <nat:6> \times <var:O> ^ <nat:2> \land <var:G0> = <nat:3> \} \\ <var:l> := <var:G2> \\ \{ <var:W> = <var:O> \land <var:G1> = <nat:7> \times <var:O> \land <var:G0> = <nat:3> \land <var:l> = <nat:6> \times <var:O> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:G1> \\ \{ <var:W> = <var:O> \land <var:G0> = <nat:3> \land <var:l> = <nat:6> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> \} \\ <var:l> := <var:l> + <var:G0> \\ \{ <var:W> = <var:O> \land <var:l> = <nat:6> \times <var:O> ^ <nat:2> + <nat:7> \times <var:O> + <nat:3> \} \end{eqnarray} Applying typical Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:W> = <var:O> }} <var:G1> := <var:W> ; <var:G2> := <var:G1> * <var:W> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:7> ; <var:G2> := <var:G2> * <nat:6> ; <var:l> := <var:G2> <var:l> := <var:l> + <var:G1> <var:l> := <var:l> + <var:G0> {{ <var:l> = <nat:6> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:G1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:G1> = <var:O> /\ <var:G2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:G1> = <var:O> /\ <var:G2> = <var:O> ^ <nat:2> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:G1> = <nat:7> * <var:O> /\ <var:G2> = <var:O> ^ <nat:2> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:G1> = <nat:7> * <var:O> /\ <var:G2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:G1> = <nat:7> * <var:O> /\ <var:G0> = <nat:3> /\ <var:l> = <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:G0> = <nat:3> /\ <var:l> = <nat:6> * <var:O> ^ <nat:2> + <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:O> /\ <var:l> = <nat:6> * <var:O> ^ <nat:2> + <nat:7> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 