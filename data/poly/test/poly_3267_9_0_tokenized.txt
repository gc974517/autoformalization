\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:4> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:c> ; <var:q2> := <nat:4> ; <var:q2> := <var:q2> * <var:c> ; <var:q2> := <var:q2> * <var:c> ; <var:X> := <var:q2> ; <var:X> := <var:X> + <var:q1> ; <var:X> := <var:X> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:c> = <var:h> $ before the evaluation of the list of instructions , then $ <var:X> = <nat:4> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the code segment can be shown through typical Hoare logic . Moving forward to the next step , we have the variable update line \verb | <var:q0> := <nat:4> ; | . This statement moves the condition $ \{ <var:c> = <var:h> \} $ to the postcondition $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \} $ . Observing the proceeding line found in our list of commands , we see the binding command \verb | <var:q1> := <nat:4> ; | . This transfers the condition $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \} $ to $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \} $ . Moving on to the subsequent bit of code in our set of instructions , we see the assignment line binding $ <var:q1> * <var:c> $ into $ <var:q1>$ . This code redefines $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \} $ as the condition $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \cdot <var:h> \} $ . This is ensured through the assignment law of Hoare techniques . Taking another step toward the next statement contained in our segment of code , the environment update statement binding $ <nat:4> $ to $ <var:q2>$ . This code forwards $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \cdot <var:h> \} $ to the postcondition $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \cdot <var:h> \land <var:q2> = <nat:4> \} $ . Considering the upcoming bit of code found in our code segment , we have the code assigning $ <var:q2> * <var:c> $ into $ <var:q2>$ . This takes $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \cdot <var:h> \land <var:q2> = <nat:4> \} $ into the condition $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \cdot <var:h> \land <var:q2> = <nat:4> \cdot <var:h> \} $ . This is deduced with the assignment scheme in Hoare reasoning . Stepping through , we have the binding line \verb | <var:q2> := <var:q2> * <var:c> ; | . This takes $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \cdot <var:h> \land <var:q2> = <nat:4> \cdot <var:h> \} $ as the postcondition $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \cdot <var:h> \land <var:q2> = <nat:4> \cdot <var:h> ^ <nat:2> \} $ . Looking at the subsequent step in the list of commands , we see the line giving $ <var:q2> $ toward $ <var:X>$ . This command transfers the precondition $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \cdot <var:h> \land <var:q2> = <nat:4> \cdot <var:h> ^ <nat:2> \} $ toward $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \cdot <var:h> \land <var:X> = <nat:4> \cdot <var:h> ^ <nat:2> \} $ . This is given with the assignment inference rule given in typical Hoare techniques . Stepping forward , we have the variable binding code defining $ <var:X> + <var:q1> $ as $ <var:X>$ . This code moves the precondition $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:q1> = <nat:4> \cdot <var:h> \land <var:X> = <nat:4> \cdot <var:h> ^ <nat:2> \} $ into the postcondition $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:X> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> \} $ . This is guaranteed using the assignment law obtained from Hoare techniques . Jumping to the following step seen in the code segment , the variable update line \verb | <var:X> := <var:X> + <var:q0> | . This transfers the precondition $ \{ <var:c> = <var:h> \land <var:q0> = <nat:4> \land <var:X> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> \} $ toward the condition $ \{ <var:c> = <var:h> \land <var:X> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:4> \} $ . This is known to be sound using the assignment inference rule of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <def:poly> := <var:q0> := <nat:4> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:c> ; <var:q2> := <nat:4> ; <var:q2> := <var:q2> * <var:c> ; <var:q2> := <var:q2> * <var:c> ; <var:X> := <var:q2> ; <var:X> := <var:X> + <var:q1> ; <var:X> := <var:X> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:c> = <var:h> }} <def:poly> {{ <var:X> = <nat:4> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:4> * <var:h> /\ <var:q2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:4> * <var:h> /\ <var:q2> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:4> * <var:h> /\ <var:q2> = <nat:4> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:4> * <var:h> /\ <var:X> = <nat:4> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:q0> = <nat:4> /\ <var:X> = <nat:4> * <var:h> ^ <nat:2> + <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:h> /\ <var:X> = <nat:4> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 