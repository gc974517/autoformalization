\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n> := <nat:2> ; <var:n> := <nat:2> + <var:n> * <var:U> ; <var:n> := <nat:4> + <var:n> * <var:U> ; <var:n> := <nat:1> + <var:n> * <var:U> ; <var:n> := <nat:1> + <var:n> * <var:U> ; <var:n> := <nat:1> + <var:n> * <var:U> ; <var:n> := <nat:3> + <var:n> * <var:U> ; <var:n> := <nat:4> + <var:n> * <var:U> ; <var:n> := <nat:3> + <var:n> * <var:U> ; <var:n> := <nat:2> + <var:n> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> . Allow it to hold that $ <var:U> = <var:w> $ before running the segment of code , it follows that we see $ <var:n> = <nat:2> \cdot <var:w> ^ <nat:9> + <nat:2> \cdot <var:w> ^ <nat:8> + <nat:4> \cdot <var:w> ^ <nat:7> + <nat:1> \cdot <var:w> ^ <nat:6> + <nat:1> \cdot <var:w> ^ <nat:5> + <nat:1> \cdot <var:w> ^ <nat:4> + <nat:3> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:2> $ after series of instructions has finished . \end{theorem} \begin{proof} The argument for the program can be accomplished through Hoare logic . Honing in on the proceeding command in the code , the variable assignmet statement yielding $ <nat:2> $ into $ <var:n>$ . This advances the condition $ \{ <var:U> = <var:w> \} $ as $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \} $ . Jumping to the next line of code seen in our series of commands , we see the variable binding statement assigning $ <nat:2> + <var:n> * <var:U> $ toward $ <var:n>$ . This line advances the condition $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \} $ to the postcondition $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> + <nat:2> \} $ . This is sound with the assignment scheme obtained from Hoare techniques . Advancing , we see the variable update line yielding $ <nat:4> + <var:n> * <var:U> $ to $ <var:n>$ . This takes the precondition $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> + <nat:2> \} $ as the postcondition $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:4> \} $ . This is deduced with the assignment inference rule given by standard Hoare techniques . Going to the next step , we have the variable update command yielding $ <nat:1> + <var:n> * <var:U> $ to $ <var:n>$ . This advances $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:4> \} $ toward the condition $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:1> \} $ . Taking a look at the following statement contained in the set of commands , we have the code assigning $ <nat:1> + <var:n> * <var:U> $ toward $ <var:n>$ . This statement moves $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:1> \} $ into the condition $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:1> \} $ . Honing in on the upcoming piece of code in our list of instructions , the environment update statement letting $ <nat:1> + <var:n> * <var:U> $ into $ <var:n>$ . This statement transfers $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:1> \} $ to the condition $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:5> + <nat:2> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:1> \} $ . This is guaranteed by the assignment rule obtained from typical Hoare logic . Taking another step toward the following statement in our set of instructions , we see the variable update statement \verb | <var:n> := <nat:3> + <var:n> * <var:U> ; | . This takes $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:5> + <nat:2> \cdot <var:w> ^ <nat:4> + <nat:4> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:1> \} $ into $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:6> + <nat:2> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:3> \} $ . Moving on to the subsequent command contained in our series of commands , the command yielding $ <nat:4> + <var:n> * <var:U> $ into $ <var:n>$ . This takes the precondition $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:6> + <nat:2> \cdot <var:w> ^ <nat:5> + <nat:4> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:3> \} $ as the postcondition $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:7> + <nat:2> \cdot <var:w> ^ <nat:6> + <nat:4> \cdot <var:w> ^ <nat:5> + <nat:1> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:4> \} $ . This is given using the assignment law from typical Hoare logic . Advancing to the next step , the statement \verb | <var:n> := <nat:3> + <var:n> * <var:U> ; | . This line advances the condition $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:7> + <nat:2> \cdot <var:w> ^ <nat:6> + <nat:4> \cdot <var:w> ^ <nat:5> + <nat:1> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:4> \} $ as the postcondition $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:8> + <nat:2> \cdot <var:w> ^ <nat:7> + <nat:4> \cdot <var:w> ^ <nat:6> + <nat:1> \cdot <var:w> ^ <nat:5> + <nat:1> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:3> \} $ . Moving on to the subsequent command found in the segment of code , we have the variable update line giving $ <nat:2> + <var:n> * <var:U$ toward $ <var:n>$ . This code transfers $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:8> + <nat:2> \cdot <var:w> ^ <nat:7> + <nat:4> \cdot <var:w> ^ <nat:6> + <nat:1> \cdot <var:w> ^ <nat:5> + <nat:1> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:3> \} $ to the postcondition $ \{ <var:U> = <var:w> \land <var:n> = <nat:2> \cdot <var:w> ^ <nat:9> + <nat:2> \cdot <var:w> ^ <nat:8> + <nat:4> \cdot <var:w> ^ <nat:7> + <nat:1> \cdot <var:w> ^ <nat:6> + <nat:1> \cdot <var:w> ^ <nat:5> + <nat:1> \cdot <var:w> ^ <nat:4> + <nat:3> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:n> := <nat:2> ; <var:n> := <nat:2> + <var:n> * <var:U> ; <var:n> := <nat:4> + <var:n> * <var:U> ; <var:n> := <nat:1> + <var:n> * <var:U> ; <var:n> := <nat:1> + <var:n> * <var:U> ; <var:n> := <nat:1> + <var:n> * <var:U> ; <var:n> := <nat:3> + <var:n> * <var:U> ; <var:n> := <nat:4> + <var:n> * <var:U> ; <var:n> := <nat:3> + <var:n> * <var:U> ; <var:n> := <nat:2> + <var:n> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:U> = <var:w> }} <def:poly> {{ <var:n> = <nat:2> * <var:w> ^ <nat:9> + <nat:2> * <var:w> ^ <nat:8> + <nat:4> * <var:w> ^ <nat:7> + <nat:1> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:n> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:n> = <nat:2> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:n> = <nat:2> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:n> = <nat:2> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:n> = <nat:2> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:n> = <nat:2> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:n> = <nat:2> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:n> = <nat:2> * <var:w> ^ <nat:7> + <nat:2> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:n> = <nat:2> * <var:w> ^ <nat:8> + <nat:2> * <var:w> ^ <nat:7> + <nat:4> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:w> /\ <var:n> = <nat:2> * <var:w> ^ <nat:9> + <nat:2> * <var:w> ^ <nat:8> + <nat:4> * <var:w> ^ <nat:7> + <nat:1> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 