\begin{document} \begin{theorem} We define a series of commands as follows \begin{verbatim} <var:r> := <nat:2> ; <var:r> := <nat:4> + <var:r> * <var:N> ; <var:r> := <nat:3> + <var:r> * <var:N> \end{verbatim} Allowing it to hold that $ <var:N> = <var:k> $ , taking $ <var:k> \in \mathbb{N} $ , prior to the evaluation of this set of commands , then we see $ <var:r> = <nat:2> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:3> $ when program exits . \end{theorem} \begin{proof} Demonstrating correctness of the code segment is demonstrated by typical Hoare logic . Taking a look at the next line found in our list of instructions , we have the binding code \verb | <var:r> := <nat:2> ; | . This command transfers $ \{ <var:N> = <var:k> \} $ toward the postcondition $ \{ <var:N> = <var:k> \land <var:r> = <nat:2> \} $ . This is ensured through the assignment inference rule from usual Hoare reasoning . Taking a look at the next piece of code contained in our set of commands , we see the variable binding code binding $ <nat:4> + <var:r> * <var:N> $ into $ <var:r>$ . This command moves the precondition $ \{ <var:N> = <var:k> \land <var:r> = <nat:2> \} $ into the postcondition $ \{ <var:N> = <var:k> \land <var:r> = <nat:2> \cdot <var:k> + <nat:4> \} $ . This is sound by the assignment inference rule found in usual Hoare reasoning . Stepping through , we see the command giving $ <nat:3> + <var:r> * <var:N$ as $ <var:r>$ . This forwards the precondition $ \{ <var:N> = <var:k> \land <var:r> = <nat:2> \cdot <var:k> + <nat:4> \} $ to $ \{ <var:N> = <var:k> \land <var:r> = <nat:2> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:3> \} $ . This is deduced by the assignment scheme from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:N> = <var:k> }} <var:r> := <nat:2> ; <var:r> := <nat:4> + <var:r> * <var:N> ; <var:r> := <nat:3> + <var:r> * <var:N> {{ <var:r> = <nat:2> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:r> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:r> = <nat:2> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:r> = <nat:2> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 