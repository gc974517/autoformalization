\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:H1> := <var:s> ; <var:H2> := <var:H1> * <var:s> ; <var:H0> := <nat:3> ; <var:H2> := <var:H2> * <nat:1> ; <var:P> := <var:H2> <var:P> := <var:P> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:s> = <var:Y> $ prior to the execution of this code segment it holds that we have $ <var:P> = <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:3> $ when list of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:Y> \} \\ <var:H1> := <var:s> ; \\ \{ <var:s> = <var:Y> \land <var:H1> = <var:Y> \} \\ <var:H2> := <var:H1> * <var:s> ; \\ \{ <var:s> = <var:Y> \land <var:H1> = <var:Y> \land <var:H2> = <var:Y> ^ <nat:2> \} \\ <var:H0> := <nat:3> ; \\ \{ <var:s> = <var:Y> \land <var:H1> = <var:Y> \land <var:H2> = <var:Y> ^ <nat:2> \land <var:H0> = <nat:3> \} \\ <var:H2> := <var:H2> * <nat:1> ; \\ \{ <var:s> = <var:Y> \land <var:H1> = <var:Y> \land <var:H2> = <nat:1> \cdot <var:Y> ^ <nat:2> \land <var:H0> = <nat:3> \} \\ <var:P> := <var:H2> \\ \{ <var:s> = <var:Y> \land <var:H1> = <var:Y> \land <var:H0> = <nat:3> \land <var:P> = <nat:1> \cdot <var:Y> ^ <nat:2> \} \\ <var:P> := <var:P> + <var:H0> \\ \{ <var:s> = <var:Y> \land <var:P> = <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:3> \} \end{eqnarray} Utilizing Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <def:poly> := <var:H1> := <var:s> ; <var:H2> := <var:H1> * <var:s> ; <var:H0> := <nat:3> ; <var:H2> := <var:H2> * <nat:1> ; <var:P> := <var:H2> <var:P> := <var:P> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:s> = <var:Y> }} <def:poly> {{ <var:P> = <nat:1> * <var:Y> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:H1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:H1> = <var:Y> /\ <var:H2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:H1> = <var:Y> /\ <var:H2> = <var:Y> ^ <nat:2> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:H1> = <var:Y> /\ <var:H2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:H1> = <var:Y> /\ <var:H0> = <nat:3> /\ <var:P> = <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:P> = <nat:1> * <var:Y> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 