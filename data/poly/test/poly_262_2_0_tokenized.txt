\begin{document} \begin{theorem} We define a segment of code as \begin{verbatim} <var:X0> := <nat:5> ; <var:K> := <var:X0> \end{verbatim} Given it to be that $ <var:a> = <var:V> $ before the evaluation of this set of instructions , it follows that we have $ <var:K> = <nat:5> $ . \end{theorem} \begin{proof} Utilizing Hoare reasoning gives : \begin{eqnarray} \{ <var:a> = <var:V> \} \\ <var:X0> := <nat:5> ; \\ \{ <var:a> = <var:V> \land <var:X0> = <nat:5> \} \\ <var:K> := <var:X0> \\ \{ <var:a> = <var:V> \land <var:K> = <nat:5> \} \end{eqnarray} As a consequence , the list of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:a> = <var:V> }} <var:X0> := <nat:5> ; <var:K> := <var:X0> {{ <var:K> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:K> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 