\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:2> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:E> ; <var:C2> := <nat:4> ; <var:C2> := <var:C2> * <var:E> ; <var:C2> := <var:C2> * <var:E> ; <var:A> := <var:C2> ; <var:A> := <var:A> + <var:C1> ; <var:A> := <var:A> + <var:C0> \end{verbatim} Allow it to be that $ <var:E> = <var:I> $ ahead of the evaluation of the code it must be that we see $ <var:A> = <nat:4> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:E> = <var:I> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:E> = <var:I> \land <var:C0> = <nat:2> \} \\ <var:C1> := <nat:2> ; \\ \{ <var:E> = <var:I> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> \} \\ <var:C1> := <var:C1> * <var:E> ; \\ \{ <var:E> = <var:I> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> * <var:I> \} \\ <var:C2> := <nat:4> ; \\ \{ <var:E> = <var:I> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> * <var:I> \land <var:C2> = <nat:4> \} \\ <var:C2> := <var:C2> * <var:E> ; \\ \{ <var:E> = <var:I> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> * <var:I> \land <var:C2> = <nat:4> * <var:I> \} \\ <var:C2> := <var:C2> * <var:E> ; \\ \{ <var:E> = <var:I> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> * <var:I> \land <var:C2> = <nat:4> * <var:I> ^ <nat:2> \} \\ <var:A> := <var:C2> ; \\ \{ <var:E> = <var:I> \land <var:C0> = <nat:2> \land <var:C1> = <nat:2> * <var:I> \land <var:A> = <nat:4> * <var:I> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:C1> ; \\ \{ <var:E> = <var:I> \land <var:C0> = <nat:2> \land <var:A> = <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> \} \\ <var:A> := <var:A> + <var:C0> \\ \{ <var:E> = <var:I> \land <var:A> = <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:2> \} \end{eqnarray} Applying usual Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:E> = <var:I> }} <var:C0> := <nat:2> ; <var:C1> := <nat:2> ; <var:C1> := <var:C1> * <var:E> ; <var:C2> := <nat:4> ; <var:C2> := <var:C2> * <var:E> ; <var:C2> := <var:C2> * <var:E> ; <var:A> := <var:C2> ; <var:A> := <var:A> + <var:C1> ; <var:A> := <var:A> + <var:C0> {{ <var:A> = <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:I> /\ <var:C2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:I> /\ <var:C2> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:I> /\ <var:C2> = <nat:4> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:C0> = <nat:2> /\ <var:C1> = <nat:2> * <var:I> /\ <var:A> = <nat:4> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:C0> = <nat:2> /\ <var:A> = <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:A> = <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 