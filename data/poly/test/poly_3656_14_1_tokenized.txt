\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a1> := <var:t> ; <var:a2> := <var:a1> * <var:t> ; <var:a3> := <var:a2> * <var:t> ; <var:a4> := <var:a3> * <var:t> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:9> ; <var:a2> := <var:a2> * <nat:7> ; <var:a3> := <var:a3> * <nat:3> ; <var:a4> := <var:a4> * <nat:9> ; <var:y> := <var:a4> <var:y> := <var:y> + <var:a3> <var:y> := <var:y> + <var:a2> <var:y> := <var:y> + <var:a1> <var:y> := <var:y> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:t> = <var:i> $ prior to executing the series of instructions , it follows that we see $ <var:y> = <nat:9> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:7> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands can be accomplished through the below decorated set of commands . \begin{eqnarray} \{ <var:t> = <var:i> \} \\ <var:a1> := <var:t> ; \\ \{ <var:t> = <var:i> \land <var:a1> = <var:i> \} \\ <var:a2> := <var:a1> * <var:t> ; \\ \{ <var:t> = <var:i> \land <var:a1> = <var:i> \land <var:a2> = <var:i> ^ <nat:2> \} \\ <var:a3> := <var:a2> * <var:t> ; \\ \{ <var:t> = <var:i> \land <var:a1> = <var:i> \land <var:a2> = <var:i> ^ <nat:2> \land <var:a3> = <var:i> ^ <nat:3> \} \\ <var:a4> := <var:a3> * <var:t> ; \\ \{ <var:t> = <var:i> \land <var:a1> = <var:i> \land <var:a2> = <var:i> ^ <nat:2> \land <var:a3> = <var:i> ^ <nat:3> \land <var:a4> = <var:i> ^ <nat:4> \} \\ <var:a0> := <nat:1> ; \\ \{ <var:t> = <var:i> \land <var:a1> = <var:i> \land <var:a2> = <var:i> ^ <nat:2> \land <var:a3> = <var:i> ^ <nat:3> \land <var:a4> = <var:i> ^ <nat:4> \land <var:a0> = <nat:1> \} \end{eqnarray} Allowing the execution of our code segment results in : \begin{eqnarray} <var:a1> := <var:a1> * <nat:9> ; \\ \{ <var:t> = <var:i> \land <var:a1> = <nat:9> \cdot <var:i> \land <var:a2> = <var:i> ^ <nat:2> \land <var:a3> = <var:i> ^ <nat:3> \land <var:a4> = <var:i> ^ <nat:4> \land <var:a0> = <nat:1> \} \\ <var:a2> := <var:a2> * <nat:7> ; \\ \{ <var:t> = <var:i> \land <var:a1> = <nat:9> \cdot <var:i> \land <var:a2> = <nat:7> \cdot <var:i> ^ <nat:2> \land <var:a3> = <var:i> ^ <nat:3> \land <var:a4> = <var:i> ^ <nat:4> \land <var:a0> = <nat:1> \} \\ <var:a3> := <var:a3> * <nat:3> ; \\ \{ <var:t> = <var:i> \land <var:a1> = <nat:9> \cdot <var:i> \land <var:a2> = <nat:7> \cdot <var:i> ^ <nat:2> \land <var:a3> = <nat:3> \cdot <var:i> ^ <nat:3> \land <var:a4> = <var:i> ^ <nat:4> \land <var:a0> = <nat:1> \} \\ <var:a4> := <var:a4> * <nat:9> ; \\ \{ <var:t> = <var:i> \land <var:a1> = <nat:9> \cdot <var:i> \land <var:a2> = <nat:7> \cdot <var:i> ^ <nat:2> \land <var:a3> = <nat:3> \cdot <var:i> ^ <nat:3> \land <var:a4> = <nat:9> \cdot <var:i> ^ <nat:4> \land <var:a0> = <nat:1> \} \\ <var:y> := <var:a4> \\ \{ <var:t> = <var:i> \land <var:a1> = <nat:9> \cdot <var:i> \land <var:a2> = <nat:7> \cdot <var:i> ^ <nat:2> \land <var:a3> = <nat:3> \cdot <var:i> ^ <nat:3> \land <var:a0> = <nat:1> \land <var:y> = <nat:9> \cdot <var:i> ^ <nat:4> \} \\ <var:y> := <var:y> + <var:a3> \\ \{ <var:t> = <var:i> \land <var:a1> = <nat:9> \cdot <var:i> \land <var:a2> = <nat:7> \cdot <var:i> ^ <nat:2> \land <var:a0> = <nat:1> \land <var:y> = <nat:9> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:a2> \\ \{ <var:t> = <var:i> \land <var:a1> = <nat:9> \cdot <var:i> \land <var:a0> = <nat:1> \land <var:y> = <nat:9> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:7> \cdot <var:i> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:a1> \\ \{ <var:t> = <var:i> \land <var:a0> = <nat:1> \land <var:y> = <nat:9> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:7> \cdot <var:i> ^ <nat:2> + <nat:9> \cdot <var:i> \} \\ <var:y> := <var:y> + <var:a0> \\ \{ <var:t> = <var:i> \land <var:y> = <nat:9> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:7> \cdot <var:i> ^ <nat:2> + <nat:9> \cdot <var:i> + <nat:1> \} \end{eqnarray} Using typical Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <var:a4> : string := " <var:a4> " . Definition <def:poly> := <var:a1> := <var:t> ; <var:a2> := <var:a1> * <var:t> ; <var:a3> := <var:a2> * <var:t> ; <var:a4> := <var:a3> * <var:t> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:9> ; <var:a2> := <var:a2> * <nat:7> ; <var:a3> := <var:a3> * <nat:3> ; <var:a4> := <var:a4> * <nat:9> ; <var:y> := <var:a4> <var:y> := <var:y> + <var:a3> <var:y> := <var:y> + <var:a2> <var:y> := <var:y> + <var:a1> <var:y> := <var:y> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:t> = <var:i> }} <def:poly> {{ <var:y> = <nat:9> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:7> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a1> = <var:i> /\ <var:a2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a1> = <var:i> /\ <var:a2> = <var:i> ^ <nat:2> /\ <var:a3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a1> = <var:i> /\ <var:a2> = <var:i> ^ <nat:2> /\ <var:a3> = <var:i> ^ <nat:3> /\ <var:a4> = <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a1> = <var:i> /\ <var:a2> = <var:i> ^ <nat:2> /\ <var:a3> = <var:i> ^ <nat:3> /\ <var:a4> = <var:i> ^ <nat:4> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a1> = <nat:9> * <var:i> /\ <var:a2> = <var:i> ^ <nat:2> /\ <var:a3> = <var:i> ^ <nat:3> /\ <var:a4> = <var:i> ^ <nat:4> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a1> = <nat:9> * <var:i> /\ <var:a2> = <nat:7> * <var:i> ^ <nat:2> /\ <var:a3> = <var:i> ^ <nat:3> /\ <var:a4> = <var:i> ^ <nat:4> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a1> = <nat:9> * <var:i> /\ <var:a2> = <nat:7> * <var:i> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:i> ^ <nat:3> /\ <var:a4> = <var:i> ^ <nat:4> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a1> = <nat:9> * <var:i> /\ <var:a2> = <nat:7> * <var:i> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:i> ^ <nat:3> /\ <var:a4> = <nat:9> * <var:i> ^ <nat:4> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a1> = <nat:9> * <var:i> /\ <var:a2> = <nat:7> * <var:i> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:i> ^ <nat:3> /\ <var:a0> = <nat:1> /\ <var:y> = <nat:9> * <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a1> = <nat:9> * <var:i> /\ <var:a2> = <nat:7> * <var:i> ^ <nat:2> /\ <var:a0> = <nat:1> /\ <var:y> = <nat:9> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a1> = <nat:9> * <var:i> /\ <var:a0> = <nat:1> /\ <var:y> = <nat:9> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:7> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:a0> = <nat:1> /\ <var:y> = <nat:9> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:7> * <var:i> ^ <nat:2> + <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:i> /\ <var:y> = <nat:9> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:7> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 