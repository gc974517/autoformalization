\begin{document} \begin{theorem} Consider a program as follows \begin{verbatim} <var:H0> := <nat:1> ; <var:S> := <var:H0> \end{verbatim} Assume $ <var:n> = <var:G> $ before the evaluation of this set of instructions it holds that we have $ <var:S> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is evident through typical Hoare logic . Looking at the following statement contained in our set of commands , the statement \verb | <var:H0> := <nat:1> ; | . This transfers the precondition $ \{ <var:n> = <var:G> \} $ into $ \{ <var:n> = <var:G> \land <var:H0> = <nat:1> \} $ . This is known to be sound with the assignment rule in Hoare reasoning . Next , the variable update code \verb | <var:S> := <var:H0> | . This code moves $ \{ <var:n> = <var:G> \land <var:H0> = <nat:1> \} $ to $ \{ <var:n> = <var:G> \land <var:S> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:n> = <var:G> }} <var:H0> := <nat:1> ; <var:S> := <var:H0> {{ <var:S> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:G> /\ <var:S> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 