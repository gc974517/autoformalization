\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:1> ; <var:w1> := <var:w1> * <var:q> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:q> ; <var:w2> := <var:w2> * <var:q> ; <var:L> := <var:w2> ; <var:L> := <var:L> + <var:w1> ; <var:L> := <var:L> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:q> = <var:E> $ ahead of interpreting the code segment , it must be that we have $ <var:L> = <nat:3> \cdot <var:E> ^ <nat:2> + <nat:1> \cdot <var:E> + <nat:3> $ . \end{theorem} \begin{proof} The proof of our series of instructions is given using typical Hoare reasoning . Further , we see \begin{eqnarray} \{ <var:q> = <var:E> \} \, <var:w0> := <nat:3> \, \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \} \\ \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \} \, <var:w1> := <nat:1> \, \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \} \\ \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \} \, <var:w1> := <var:w1> * <var:q> \, \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:E> \} \\ \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:E> \} \, <var:w2> := <nat:3> \, \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:E> \land <var:w2> = <nat:3> \} \\ \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:E> \land <var:w2> = <nat:3> \} \, <var:w2> := <var:w2> * <var:q> \, \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:E> \land <var:w2> = <nat:3> \times <var:E> \} \\ \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:E> \land <var:w2> = <nat:3> \times <var:E> \} \, <var:w2> := <var:w2> * <var:q> \, \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:E> \land <var:w2> = <nat:3> \times <var:E> ^ <nat:2> \} \\ \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:E> \land <var:w2> = <nat:3> \times <var:E> ^ <nat:2> \} \, <var:L> := <var:w2> \, \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \land <var:w1> = <nat:1> \times <var:E> \land <var:L> = <nat:3> \times <var:E> ^ <nat:2> \} \end{eqnarray} This is shown using the binding scheme defined by Hoare logic . Moving on , we see \begin{eqnarray} \{ <var:q> = <var:E> \} \, <var:w0> := <nat:3> \, \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \} \end{eqnarray} Paying attention to the upcoming step seen in the set of commands , we see \begin{eqnarray} \{ <var:q> = <var:E> \} \, <var:w0> := <nat:3> \, \{ <var:q> = <var:E> \land <var:w0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:3> ; <var:w1> := <nat:1> ; <var:w1> := <var:w1> * <var:q> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:q> ; <var:w2> := <var:w2> * <var:q> ; <var:L> := <var:w2> ; <var:L> := <var:L> + <var:w1> ; <var:L> := <var:L> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:q> = <var:E> }} <def:poly> {{ <var:L> = <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:E> /\ <var:w2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:E> /\ <var:w2> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:E> /\ <var:w2> = <nat:3> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:1> * <var:E> /\ <var:L> = <nat:3> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:w0> = <nat:3> /\ <var:L> = <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:L> = <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 