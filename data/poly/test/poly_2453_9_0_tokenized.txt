\begin{document} \begin{theorem} Take a list of commands : \begin{verbatim} <var:s0> := <nat:8> ; <var:s1> := <nat:7> ; <var:s1> := <var:s1> * <var:J> ; <var:s2> := <nat:2> ; <var:s2> := <var:s2> * <var:J> ; <var:s2> := <var:s2> * <var:J> ; <var:D> := <var:s2> ; <var:D> := <var:D> + <var:s1> ; <var:D> := <var:D> + <var:s0> \end{verbatim} Assuming ( for all positive coefficients $ <var:b> $ ) that we have $ <var:J> = <var:b> $ ahead of the evaluation of our program it follows that we have $ <var:D> = <nat:2> \cdot <var:b> ^ <nat:2> + <nat:7> \cdot <var:b> + <nat:8> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques yields : \begin{eqnarray} \{ <var:J> = <var:b> \} \\ <var:s0> := <nat:8> ; \\ \{ <var:J> = <var:b> \land <var:s0> = <nat:8> \} \\ <var:s1> := <nat:7> ; \\ \{ <var:J> = <var:b> \land <var:s0> = <nat:8> \land <var:s1> = <nat:7> \} \\ <var:s1> := <var:s1> * <var:J> ; \\ \{ <var:J> = <var:b> \land <var:s0> = <nat:8> \land <var:s1> = <nat:7> * <var:b> \} \\ <var:s2> := <nat:2> ; \\ \{ <var:J> = <var:b> \land <var:s0> = <nat:8> \land <var:s1> = <nat:7> * <var:b> \land <var:s2> = <nat:2> \} \\ <var:s2> := <var:s2> * <var:J> ; \\ \{ <var:J> = <var:b> \land <var:s0> = <nat:8> \land <var:s1> = <nat:7> * <var:b> \land <var:s2> = <nat:2> * <var:b> \} \\ <var:s2> := <var:s2> * <var:J> ; \\ \{ <var:J> = <var:b> \land <var:s0> = <nat:8> \land <var:s1> = <nat:7> * <var:b> \land <var:s2> = <nat:2> * <var:b> ^ <nat:2> \} \\ <var:D> := <var:s2> ; \\ \{ <var:J> = <var:b> \land <var:s0> = <nat:8> \land <var:s1> = <nat:7> * <var:b> \land <var:D> = <nat:2> * <var:b> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:s1> ; \\ \{ <var:J> = <var:b> \land <var:s0> = <nat:8> \land <var:D> = <nat:2> * <var:b> ^ <nat:2> + <nat:7> * <var:b> \} \\ <var:D> := <var:D> + <var:s0> \\ \{ <var:J> = <var:b> \land <var:D> = <nat:2> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:8> \} \end{eqnarray} Thusly , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:J> = <var:b> }} <var:s0> := <nat:8> ; <var:s1> := <nat:7> ; <var:s1> := <var:s1> * <var:J> ; <var:s2> := <nat:2> ; <var:s2> := <var:s2> * <var:J> ; <var:s2> := <var:s2> * <var:J> ; <var:D> := <var:s2> ; <var:D> := <var:D> + <var:s1> ; <var:D> := <var:D> + <var:s0> {{ <var:D> = <nat:2> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:7> * <var:b> /\ <var:s2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:7> * <var:b> /\ <var:s2> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:7> * <var:b> /\ <var:s2> = <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:7> * <var:b> /\ <var:D> = <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:s0> = <nat:8> /\ <var:D> = <nat:2> * <var:b> ^ <nat:2> + <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:D> = <nat:2> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 