\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:8> ; <var:j> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Allowing it to be that $ <var:z> = <var:p> $ assuming some natural numbers $ <var:p> $ prior to the execution of our series of instructions then we have $ <var:j> = <nat:8> $ after list of commands has finished executing . \end{theorem} \begin{proof} The flow of logic for our list of instructions can be seen with standard Hoare reasoning . Immediately after , we see the variable update command \verb | <var:O0> := <nat:8> ; | . This code transfers $ \{ <var:z> = <var:p> \} $ as $ \{ <var:z> = <var:p> \land <var:O0> = <nat:8> \} $ . This is deduced using the assignment scheme of usual Hoare techniques . Going to the next step , we have the variable binding line giving $ <var:O0$ into $ <var:j>$ . This command redefines the condition $ \{ <var:z> = <var:p> \land <var:O0> = <nat:8> \} $ as the condition $ \{ <var:z> = <var:p> \land <var:j> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:8> ; <var:j> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:z> = <var:p> }} <def:poly> {{ <var:j> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:j> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 