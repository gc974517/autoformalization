\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z1> := <var:L> ; <var:z0> := <nat:7> ; <var:z1> := <var:z1> * <nat:2> ; <var:K> := <var:z1> <var:K> := <var:K> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:L> = <var:C> $ for any positive coefficients $ <var:C> $ before executing this set of commands it follows that we see $ <var:K> = <nat:2> \cdot <var:C> + <nat:7> $ after code segment has terminated . \end{theorem} \begin{proof} The argument for our set of instructions is done using the below decorated set of commands . \begin{eqnarray} \{ <var:L> = <var:C> \} \\ <var:z1> := <var:L> ; \\ \{ <var:L> = <var:C> \land <var:z1> = <var:C> \} \\ <var:z0> := <nat:7> ; \\ \{ <var:L> = <var:C> \land <var:z1> = <var:C> \land <var:z0> = <nat:7> \} \\ <var:z1> := <var:z1> * <nat:2> ; \\ \{ <var:L> = <var:C> \land <var:z1> = <nat:2> \times <var:C> \land <var:z0> = <nat:7> \} \\ <var:K> := <var:z1> \\ \{ <var:L> = <var:C> \land <var:z0> = <nat:7> \land <var:K> = <nat:2> \times <var:C> \} \\ <var:K> := <var:K> + <var:z0> \\ \{ <var:L> = <var:C> \land <var:K> = <nat:2> \times <var:C> + <nat:7> \} \end{eqnarray} The application of usual Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z1> := <var:L> ; <var:z0> := <nat:7> ; <var:z1> := <var:z1> * <nat:2> ; <var:K> := <var:z1> <var:K> := <var:K> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:L> = <var:C> }} <def:poly> {{ <var:K> = <nat:2> * <var:C> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:z1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:z1> = <var:C> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:z1> = <nat:2> * <var:C> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:z0> = <nat:7> /\ <var:K> = <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:C> /\ <var:K> = <nat:2> * <var:C> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 