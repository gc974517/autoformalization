\begin{document} \begin{theorem} We define a series of commands such that \begin{verbatim} <var:U1> := <var:Y> ; <var:U2> := <var:U1> * <var:Y> ; <var:U3> := <var:U2> * <var:Y> ; <var:U4> := <var:U3> * <var:Y> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:2> ; <var:U3> := <var:U3> * <nat:2> ; <var:U4> := <var:U4> * <nat:1> ; <var:y> := <var:U4> <var:y> := <var:y> + <var:U3> <var:y> := <var:y> + <var:U2> <var:y> := <var:y> + <var:U1> <var:y> := <var:y> + <var:U0> \end{verbatim} Allow that $ <var:Y> = <var:T> $ for some $ <var:T> \in \mathbb{N} $ ahead of running the series of commands it follows that we see $ <var:y> = <nat:1> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:1> $ once code exits . \end{theorem} \begin{proof} The method of proof for this program is demonstrated by typical Hoare techniques . Going to the next step , the variable binding command defining $ <var:Y> $ as $ <var:U1>$ . This takes the condition $ \{ <var:Y> = <var:T> \} $ as the postcondition $ \{ <var:Y> = <var:T> \land <var:U1> = <var:T> \} $ . Taking another step toward the upcoming line in the code segment , we have the variable binding command assigning $ <var:U1> * <var:Y> $ into $ <var:U2>$ . This code moves $ \{ <var:Y> = <var:T> \land <var:U1> = <var:T> \} $ toward the condition $ \{ <var:Y> = <var:T> \land <var:U1> = <var:T> \land <var:U2> = <var:T> ^ <nat:2> \} $ . This is ensured through the assignment scheme from typical Hoare reasoning . Moving onward , we see the assignment command binding $ <var:U2> * <var:Y> $ as $ <var:U3>$ . This command advances the condition $ \{ <var:Y> = <var:T> \land <var:U1> = <var:T> \land <var:U2> = <var:T> ^ <nat:2> \} $ to the condition $ \{ <var:Y> = <var:T> \land <var:U1> = <var:T> \land <var:U2> = <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \} $ . This is shown to be logically sound by the assignment rule given by Hoare techniques . Immediately following , the binding statement letting $ <var:U3> * <var:Y> $ toward $ <var:U4>$ . This statement forwards $ \{ <var:Y> = <var:T> \land <var:U1> = <var:T> \land <var:U2> = <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \} $ toward the postcondition $ \{ <var:Y> = <var:T> \land <var:U1> = <var:T> \land <var:U2> = <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \land <var:U4> = <var:T> ^ <nat:4> \} $ . Advancing on , we see the variable update code yielding $ <nat:1> $ to $ <var:U0>$ . This command takes the precondition $ \{ <var:Y> = <var:T> \land <var:U1> = <var:T> \land <var:U2> = <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \land <var:U4> = <var:T> ^ <nat:4> \} $ to $ \{ <var:Y> = <var:T> \land <var:U1> = <var:T> \land <var:U2> = <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \land <var:U4> = <var:T> ^ <nat:4> \land <var:U0> = <nat:1> \} $ . This is ensured through the assignment law defined in typical Hoare logic . Moving forward , we have the command binding $ <var:U1> * <nat:4> $ to $ <var:U1>$ . This statement forwards the precondition $ \{ <var:Y> = <var:T> \land <var:U1> = <var:T> \land <var:U2> = <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \land <var:U4> = <var:T> ^ <nat:4> \land <var:U0> = <nat:1> \} $ toward the condition $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \land <var:U4> = <var:T> ^ <nat:4> \land <var:U0> = <nat:1> \} $ . Moving forward to the subsequent statement contained in our list of instructions , we have the assignment statement assigning $ <var:U2> * <nat:2> $ into $ <var:U2>$ . This forwards the condition $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \land <var:U4> = <var:T> ^ <nat:4> \land <var:U0> = <nat:1> \} $ toward the condition $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \land <var:U4> = <var:T> ^ <nat:4> \land <var:U0> = <nat:1> \} $ . This is ensured by the assignment inference rule given by standard Hoare logic . Paying attention to the following piece of code seen in our program , we have the line \verb | <var:U3> := <var:U3> * <nat:2> ; | . This takes the condition $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:U3> = <var:T> ^ <nat:3> \land <var:U4> = <var:T> ^ <nat:4> \land <var:U0> = <nat:1> \} $ as the postcondition $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:U4> = <var:T> ^ <nat:4> \land <var:U0> = <nat:1> \} $ . This is sound with the assignment rule of usual Hoare reasoning . Advancing to the next step , we have the variable update command assigning $ <var:U4> * <nat:1> $ toward $ <var:U4>$ . This code forwards the precondition $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:U4> = <var:T> ^ <nat:4> \land <var:U0> = <nat:1> \} $ as the condition $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:U4> = <nat:1> \times <var:T> ^ <nat:4> \land <var:U0> = <nat:1> \} $ . This is known to be sound using the assignment rule given by Hoare logic . Moving forward to the next line of code found in our program , we see the statement yielding $ <var:U4$ as $ <var:y>$ . This transfers the precondition $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:U4> = <nat:1> \times <var:T> ^ <nat:4> \land <var:U0> = <nat:1> \} $ toward $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:U0> = <nat:1> \land <var:y> = <nat:1> \times <var:T> ^ <nat:4> \} $ . This is shown by the assignment scheme in Hoare logic . Immediately following , we have the binding statement assigning $ <var:y> + <var:U3$ into $ <var:y>$ . This code forwards the condition $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:U3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:U0> = <nat:1> \land <var:y> = <nat:1> \times <var:T> ^ <nat:4> \} $ into the condition $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:U0> = <nat:1> \land <var:y> = <nat:1> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment rule given by standard Hoare techniques . After , we have the assignment command defining $ <var:y> + <var:U2$ to $ <var:y>$ . This code moves the condition $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U2> = <nat:2> \times <var:T> ^ <nat:2> \land <var:U0> = <nat:1> \land <var:y> = <nat:1> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> \} $ toward $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U0> = <nat:1> \land <var:y> = <nat:1> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> + <nat:2> \times <var:T> ^ <nat:2> \} $ . This is deduced through the assignment law in standard Hoare reasoning . Moving forward to the upcoming bit of code contained in the code segment , the environment update command \verb | <var:y> := <var:y> + <var:U1> | . This line transfers the precondition $ \{ <var:Y> = <var:T> \land <var:U1> = <nat:4> \times <var:T> \land <var:U0> = <nat:1> \land <var:y> = <nat:1> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> + <nat:2> \times <var:T> ^ <nat:2> \} $ as the postcondition $ \{ <var:Y> = <var:T> \land <var:U0> = <nat:1> \land <var:y> = <nat:1> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> + <nat:2> \times <var:T> ^ <nat:2> + <nat:4> \times <var:T> \} $ . This is ensured through the assignment law of typical Hoare techniques . Observing the subsequent piece of code in our code , we have the binding command yielding $ <var:y> + <var:U0$ to $ <var:y>$ . This takes the condition $ \{ <var:Y> = <var:T> \land <var:U0> = <nat:1> \land <var:y> = <nat:1> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> + <nat:2> \times <var:T> ^ <nat:2> + <nat:4> \times <var:T> \} $ as $ \{ <var:Y> = <var:T> \land <var:y> = <nat:1> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> + <nat:2> \times <var:T> ^ <nat:2> + <nat:4> \times <var:T> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <var:U4> : string := " <var:U4> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:Y> = <var:T> }} <var:U1> := <var:Y> ; <var:U2> := <var:U1> * <var:Y> ; <var:U3> := <var:U2> * <var:Y> ; <var:U4> := <var:U3> * <var:Y> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:2> ; <var:U3> := <var:U3> * <nat:2> ; <var:U4> := <var:U4> * <nat:1> ; <var:y> := <var:U4> <var:y> := <var:y> + <var:U3> <var:y> := <var:y> + <var:U2> <var:y> := <var:y> + <var:U1> <var:y> := <var:y> + <var:U0> {{ <var:y> = <nat:1> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:U1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:U1> = <var:T> /\ <var:U2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:U1> = <var:T> /\ <var:U2> = <var:T> ^ <nat:2> /\ <var:U3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:U1> = <var:T> /\ <var:U2> = <var:T> ^ <nat:2> /\ <var:U3> = <var:T> ^ <nat:3> /\ <var:U4> = <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:U1> = <var:T> /\ <var:U2> = <var:T> ^ <nat:2> /\ <var:U3> = <var:T> ^ <nat:3> /\ <var:U4> = <var:T> ^ <nat:4> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U2> = <var:T> ^ <nat:2> /\ <var:U3> = <var:T> ^ <nat:3> /\ <var:U4> = <var:T> ^ <nat:4> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U2> = <nat:2> * <var:T> ^ <nat:2> /\ <var:U3> = <var:T> ^ <nat:3> /\ <var:U4> = <var:T> ^ <nat:4> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U2> = <nat:2> * <var:T> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:U4> = <var:T> ^ <nat:4> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U2> = <nat:2> * <var:T> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:U4> = <nat:1> * <var:T> ^ <nat:4> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U2> = <nat:2> * <var:T> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:U0> = <nat:1> /\ <var:y> = <nat:1> * <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U2> = <nat:2> * <var:T> ^ <nat:2> /\ <var:U0> = <nat:1> /\ <var:y> = <nat:1> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:U1> = <nat:4> * <var:T> /\ <var:U0> = <nat:1> /\ <var:y> = <nat:1> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:U0> = <nat:1> /\ <var:y> = <nat:1> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:y> = <nat:1> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 