\begin{document} \begin{theorem} Consider the following series of commands such that \begin{verbatim} <var:d0> := <nat:2> ; <var:d2> := <nat:5> ; <var:d2> := <var:d2> * <var:u> ; <var:d2> := <var:d2> * <var:u> ; <var:N> := <var:d2> ; <var:N> := <var:N> + <var:d0> \end{verbatim} Allowing that $ <var:u> = <var:Y> $ before the execution of our series of instructions , it follows that we have $ <var:N> = <nat:5> \cdot <var:Y> ^ <nat:2> + <nat:2> $ when program has finished executing . \end{theorem} \begin{proof} The method of proof for the set of commands is accomplished using Hoare reasoning . Advancing to the next pieces of code seen in our program , we see \[ \begin{tabular} {rcl} \{ <var:u> = <var:Y> \} & <var:d0> := <nat:2> & \{ <var:u> = <var:Y> \land <var:d0> = <nat:2> \} \\ \{ <var:u> = <var:Y> \land <var:d0> = <nat:2> \} & <var:d2> := <nat:5> & \{ <var:u> = <var:Y> \land <var:d0> = <nat:2> \land <var:d2> = <nat:5> \} \\ \{ <var:u> = <var:Y> \land <var:d0> = <nat:2> \land <var:d2> = <nat:5> \} & <var:d2> := <var:d2> * <var:u> & \{ <var:u> = <var:Y> \land <var:d0> = <nat:2> \land <var:d2> = <nat:5> \times <var:Y> \} \\ \{ <var:u> = <var:Y> \land <var:d0> = <nat:2> \land <var:d2> = <nat:5> \times <var:Y> \} & <var:d2> := <var:d2> * <var:u> & \{ <var:u> = <var:Y> \land <var:d0> = <nat:2> \land <var:d2> = <nat:5> \times <var:Y> ^ <nat:2> \} \\ \{ <var:u> = <var:Y> \land <var:d0> = <nat:2> \land <var:d2> = <nat:5> \times <var:Y> ^ <nat:2> \} & <var:N> := <var:d2> & \{ <var:u> = <var:Y> \land <var:d0> = <nat:2> \land <var:N> = <nat:5> \times <var:Y> ^ <nat:2> \} \\ \{ <var:u> = <var:Y> \land <var:d0> = <nat:2> \land <var:N> = <nat:5> \times <var:Y> ^ <nat:2> \} & <var:N> := <var:N> + <var:d0& \{ <var:u> = <var:Y> \land <var:N> = <nat:5> \times <var:Y> ^ <nat:2> + <nat:2> \} \end{tabular} This is deduced by the variable assignmet law obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:u> = <var:Y> }} <var:d0> := <nat:2> ; <var:d2> := <nat:5> ; <var:d2> := <var:d2> * <var:u> ; <var:d2> := <var:d2> * <var:u> ; <var:N> := <var:d2> ; <var:N> := <var:N> + <var:d0> {{ <var:N> = <nat:5> * <var:Y> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:d0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:d0> = <nat:2> /\ <var:d2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:d0> = <nat:2> /\ <var:d2> = <nat:5> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:d0> = <nat:2> /\ <var:d2> = <nat:5> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:d0> = <nat:2> /\ <var:N> = <nat:5> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:Y> /\ <var:N> = <nat:5> * <var:Y> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 