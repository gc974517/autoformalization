\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n1> := <var:a> ; <var:n2> := <var:n1> * <var:a> ; <var:n0> := <nat:7> ; <var:n1> := <var:n1> * <nat:8> ; <var:n2> := <var:n2> * <nat:6> ; <var:A> := <var:n2> <var:A> := <var:A> + <var:n1> <var:A> := <var:A> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> . Allow it to hold that $ <var:a> = <var:o> $ before interpreting this program then we have $ <var:A> = <nat:6> \cdot <var:o> ^ <nat:2> + <nat:8> \cdot <var:o> + <nat:7> $ when series of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:o> \} \\ <var:n1> := <var:a> ; \\ \{ <var:a> = <var:o> \land <var:n1> = <var:o> \} \\ <var:n2> := <var:n1> * <var:a> ; \\ \{ <var:a> = <var:o> \land <var:n1> = <var:o> \land <var:n2> = <var:o> ^ <nat:2> \} \\ <var:n0> := <nat:7> ; \\ \{ <var:a> = <var:o> \land <var:n1> = <var:o> \land <var:n2> = <var:o> ^ <nat:2> \land <var:n0> = <nat:7> \} \\ <var:n1> := <var:n1> * <nat:8> ; \\ \{ <var:a> = <var:o> \land <var:n1> = <nat:8> \times <var:o> \land <var:n2> = <var:o> ^ <nat:2> \land <var:n0> = <nat:7> \} \\ <var:n2> := <var:n2> * <nat:6> ; \\ \{ <var:a> = <var:o> \land <var:n1> = <nat:8> \times <var:o> \land <var:n2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:n0> = <nat:7> \} \end{eqnarray} Furthering executing this segment of code gives : \begin{eqnarray} <var:A> := <var:n2> \\ \{ <var:a> = <var:o> \land <var:n1> = <nat:8> \times <var:o> \land <var:n0> = <nat:7> \land <var:A> = <nat:6> \times <var:o> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:n1> \\ \{ <var:a> = <var:o> \land <var:n0> = <nat:7> \land <var:A> = <nat:6> \times <var:o> ^ <nat:2> + <nat:8> \times <var:o> \} \\ <var:A> := <var:A> + <var:n0> \\ \{ <var:a> = <var:o> \land <var:A> = <nat:6> \times <var:o> ^ <nat:2> + <nat:8> \times <var:o> + <nat:7> \} \end{eqnarray} Applying Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n1> := <var:a> ; <var:n2> := <var:n1> * <var:a> ; <var:n0> := <nat:7> ; <var:n1> := <var:n1> * <nat:8> ; <var:n2> := <var:n2> * <nat:6> ; <var:A> := <var:n2> <var:A> := <var:A> + <var:n1> <var:A> := <var:A> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:a> = <var:o> }} <def:poly> {{ <var:A> = <nat:6> * <var:o> ^ <nat:2> + <nat:8> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:o> /\ <var:n1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:o> /\ <var:n1> = <var:o> /\ <var:n2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:o> /\ <var:n1> = <var:o> /\ <var:n2> = <var:o> ^ <nat:2> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:o> /\ <var:n1> = <nat:8> * <var:o> /\ <var:n2> = <var:o> ^ <nat:2> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:o> /\ <var:n1> = <nat:8> * <var:o> /\ <var:n2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:o> /\ <var:n1> = <nat:8> * <var:o> /\ <var:n0> = <nat:7> /\ <var:A> = <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:o> /\ <var:n0> = <nat:7> /\ <var:A> = <nat:6> * <var:o> ^ <nat:2> + <nat:8> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:o> /\ <var:A> = <nat:6> * <var:o> ^ <nat:2> + <nat:8> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 