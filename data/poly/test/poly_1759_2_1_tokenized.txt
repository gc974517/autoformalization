\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:9> ; <var:Y> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:t> = <var:X> $ ahead of running our set of instructions then we see $ <var:Y> = <nat:9> $ after set of commands has finished . \end{theorem} \begin{proof} Arguing the correctness of our series of commands is accomplished using typical Hoare logic . Advancing to the next step , we see \[ \begin{tabular} {rcl} \{ <var:t> = <var:X> \} & <var:L0> := <nat:9> & \{ <var:t> = <var:X> \land <var:L0> = <nat:9> \} \end{tabular} This is known to be sound through the binding law of Hoare reasoning . Observing the subsequent line contained in our set of commands , we have \[ \begin{tabular} {rcl} \{ <var:t> = <var:X> \} & <var:L0> := <nat:9> & \{ <var:t> = <var:X> \land <var:L0> = <nat:9> \} \end{tabular} This is shown using the environment update inference rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:9> ; <var:Y> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:t> = <var:X> }} <def:poly> {{ <var:Y> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:X> /\ <var:Y> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 