\begin{document} \begin{theorem} We define a program : \begin{verbatim} <var:i1> := <var:o> ; <var:i0> := <nat:2> ; <var:i1> := <var:i1> * <nat:2> ; <var:y> := <var:i1> <var:y> := <var:y> + <var:i0> \end{verbatim} Assuming --- letting positive coefficients $ <var:G> $ --- that $ <var:o> = <var:G> $ before the evaluation of this series of instructions it follows that we see $ <var:y> = <nat:2> \cdot <var:G> + <nat:2> $ . \end{theorem} \begin{proof} We can see that this decorated code . \begin{eqnarray} \{ <var:o> = <var:G> \} \\ <var:i1> := <var:o> ; \\ \{ <var:o> = <var:G> \land <var:i1> = <var:G> \} \\ <var:i0> := <nat:2> ; \\ \{ <var:o> = <var:G> \land <var:i1> = <var:G> \land <var:i0> = <nat:2> \} \\ <var:i1> := <var:i1> * <nat:2> ; \\ \{ <var:o> = <var:G> \land <var:i1> = <nat:2> \cdot <var:G> \land <var:i0> = <nat:2> \} \\ <var:y> := <var:i1> \\ \{ <var:o> = <var:G> \land <var:i0> = <nat:2> \land <var:y> = <nat:2> \cdot <var:G> \} \\ <var:y> := <var:y> + <var:i0> \\ \{ <var:o> = <var:G> \land <var:y> = <nat:2> \cdot <var:G> + <nat:2> \} \end{eqnarray} The application of Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:o> = <var:G> }} <var:i1> := <var:o> ; <var:i0> := <nat:2> ; <var:i1> := <var:i1> * <nat:2> ; <var:y> := <var:i1> <var:y> := <var:y> + <var:i0> {{ <var:y> = <nat:2> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:i1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:i1> = <var:G> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:i1> = <nat:2> * <var:G> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:i0> = <nat:2> /\ <var:y> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:y> = <nat:2> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 