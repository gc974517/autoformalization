\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:8> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:k> ; <var:b2> := <nat:8> ; <var:b2> := <var:b2> * <var:k> ; <var:b2> := <var:b2> * <var:k> ; <var:f> := <var:b2> ; <var:f> := <var:f> + <var:b1> ; <var:f> := <var:f> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:k> = <var:u> $ prior to executing this segment of code , then $ <var:f> = <nat:8> \cdot <var:u> ^ <nat:2> + <nat:5> \cdot <var:u> + <nat:8> $ after series of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:u> \} \\ <var:b0> := <nat:8> ; \\ \{ <var:k> = <var:u> \land <var:b0> = <nat:8> \} \\ <var:b1> := <nat:5> ; \\ \{ <var:k> = <var:u> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> \} \\ <var:b1> := <var:b1> * <var:k> ; \\ \{ <var:k> = <var:u> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> * <var:u> \} \\ <var:b2> := <nat:8> ; \\ \{ <var:k> = <var:u> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> * <var:u> \land <var:b2> = <nat:8> \} \\ <var:b2> := <var:b2> * <var:k> ; \\ \{ <var:k> = <var:u> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> * <var:u> \land <var:b2> = <nat:8> * <var:u> \} \\ <var:b2> := <var:b2> * <var:k> ; \\ \{ <var:k> = <var:u> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> * <var:u> \land <var:b2> = <nat:8> * <var:u> ^ <nat:2> \} \\ <var:f> := <var:b2> ; \\ \{ <var:k> = <var:u> \land <var:b0> = <nat:8> \land <var:b1> = <nat:5> * <var:u> \land <var:f> = <nat:8> * <var:u> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:b1> ; \\ \{ <var:k> = <var:u> \land <var:b0> = <nat:8> \land <var:f> = <nat:8> * <var:u> ^ <nat:2> + <nat:5> * <var:u> \} \\ <var:f> := <var:f> + <var:b0> \\ \{ <var:k> = <var:u> \land <var:f> = <nat:8> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:8> \} \end{eqnarray} Applying standard Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b0> := <nat:8> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:k> ; <var:b2> := <nat:8> ; <var:b2> := <var:b2> * <var:k> ; <var:b2> := <var:b2> * <var:k> ; <var:f> := <var:b2> ; <var:f> := <var:f> + <var:b1> ; <var:f> := <var:f> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:k> = <var:u> }} <def:poly> {{ <var:f> = <nat:8> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:u> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:u> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:u> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:u> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:u> /\ <var:b2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:u> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:u> /\ <var:b2> = <nat:8> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:u> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:u> /\ <var:b2> = <nat:8> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:u> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:5> * <var:u> /\ <var:f> = <nat:8> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:u> /\ <var:b0> = <nat:8> /\ <var:f> = <nat:8> * <var:u> ^ <nat:2> + <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:u> /\ <var:f> = <nat:8> * <var:u> ^ <nat:2> + <nat:5> * <var:u> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 