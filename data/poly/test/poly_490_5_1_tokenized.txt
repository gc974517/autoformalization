\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:E1> := <var:T> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:4> ; <var:A> := <var:E1> <var:A> := <var:A> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> . Assume given any $ <var:I> $ it to be that $ <var:T> = <var:I> $ prior to the evaluation of the code then we see $ <var:A> = <nat:4> * <var:I> + <nat:1> $ once series of instructions is done . \end{theorem} \begin{proof} The way to prove correctness for this series of instructions is done by usual Hoare techniques . Moving forward to the next step , we see the variable binding code \verb | <var:E1> := <var:T> ; | . This code advances $ \{ <var:T> = <var:I> \} $ into the condition $ \{ <var:T> = <var:I> \land <var:E1> = <var:I> \} $ . Jumping to the next piece of code in the set of commands , the environment update command defining $ <nat:1> $ toward $ <var:E0>$ . This advances the condition $ \{ <var:T> = <var:I> \land <var:E1> = <var:I> \} $ as $ \{ <var:T> = <var:I> \land <var:E1> = <var:I> \land <var:E0> = <nat:1> \} $ . This is shown to be logically sound through the assignment law from standard Hoare techniques . Jumping to the subsequent line seen in our list of commands , the variable binding command binding $ <var:E1> * <nat:4> $ as $ <var:E1>$ . This moves the condition $ \{ <var:T> = <var:I> \land <var:E1> = <var:I> \land <var:E0> = <nat:1> \} $ to the postcondition $ \{ <var:T> = <var:I> \land <var:E1> = <nat:4> \cdot <var:I> \land <var:E0> = <nat:1> \} $ . This is deduced with the assignment rule defined in standard Hoare reasoning . Immediately after , we have the assignment code yielding $ <var:E1$ to $ <var:A>$ . This moves the condition $ \{ <var:T> = <var:I> \land <var:E1> = <nat:4> \cdot <var:I> \land <var:E0> = <nat:1> \} $ as the postcondition $ \{ <var:T> = <var:I> \land <var:E0> = <nat:1> \land <var:A> = <nat:4> \cdot <var:I> \} $ . Stepping forward , we have the binding line \verb | <var:A> := <var:A> + <var:E0> | . This line moves $ \{ <var:T> = <var:I> \land <var:E0> = <nat:1> \land <var:A> = <nat:4> \cdot <var:I> \} $ to the postcondition $ \{ <var:T> = <var:I> \land <var:A> = <nat:4> \cdot <var:I> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <def:poly> := <var:E1> := <var:T> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:4> ; <var:A> := <var:E1> <var:A> := <var:A> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:T> = <var:I> }} <def:poly> {{ <var:A> = <nat:4> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:E1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:E1> = <var:I> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:E1> = <nat:4> * <var:I> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:E0> = <nat:1> /\ <var:A> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:I> /\ <var:A> = <nat:4> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 