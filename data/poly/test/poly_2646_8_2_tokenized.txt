\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W> := <nat:4> ; <var:W> := <nat:2> + <var:W> * <var:j> ; <var:W> := <var:W> * <var:j> ; <var:W> := <nat:3> + <var:W> * <var:j> ; <var:W> := <var:W> * <var:j> ; <var:W> := <var:W> * <var:j> ; <var:W> := <nat:2> + <var:W> * <var:j> ; <var:W> := <nat:4> + <var:W> * <var:j> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> in \emph{Imp} . Allow it to be that $ <var:j> = <var:J> $ given some positive numbers $ <var:J> $ before the execution of our list of instructions , it holds that we have $ <var:W> = <nat:4> \times <var:J> ^ <nat:7> + <nat:2> \times <var:J> ^ <nat:6> + <nat:3> \times <var:J> ^ <nat:4> + <nat:2> \times <var:J> + <nat:4> $ after series of commands has exited . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands can be demonstrated with Hoare techniques . Immediately following , we have the binding command \verb | <var:W> := <nat:4> ; | . This takes the precondition $ \{ <var:j> = <var:J> \} $ toward $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> \} $ . This is ensured by the assignment scheme given in Hoare reasoning . Moving forward to the proceeding line in our list of commands , we see the variable update command \verb | <var:W> := <nat:2> + <var:W> * <var:j> ; | . This advances $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> \} $ to the postcondition $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> * <var:J> + <nat:2> \} $ . This is deduced through the assignment scheme given by Hoare reasoning . Moving on , we have the command \verb | <var:W> := <var:W> * <var:j> ; | . This line redefines $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> * <var:J> + <nat:2> \} $ toward the postcondition $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + \} $ . This is given using the assignment law from Hoare logic . Focusing on the upcoming command contained in the segment of code , we see the variable update line \verb | <var:W> := <nat:3> + <var:W> * <var:j> ; | . This moves the condition $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + \} $ toward the condition $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:3> \} $ . This is deduced by the assignment law in Hoare logic . Paying attention to the proceeding piece of code contained in the code , the assignment statement defining $ <var:W> * <var:j> $ into $ <var:W>$ . This line transfers the precondition $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:3> \} $ toward $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:3> * <var:J> + \} $ . Moving forward to the next step , the binding code giving $ <var:W> * <var:j> $ to $ <var:W>$ . This statement advances $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:3> * <var:J> + \} $ to the condition $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:2> + \} $ . This is sound through the assignment scheme given by typical Hoare techniques . Advancing to the proceeding line seen in the list of commands , we have the variable update statement letting $ <nat:2> + <var:W> * <var:j> $ toward $ <var:W>$ . This statement forwards the condition $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:2> + \} $ into $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:3> + <nat:2> \} $ . Advancing , the variable assignmet statement binding $ <nat:4> + <var:W> * <var:j$ to $ <var:W>$ . This forwards $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:3> + <nat:2> \} $ to the condition $ \{ <var:j> = <var:J> \land <var:W> = <nat:4> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:4> + <nat:2> * <var:J> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:4> ; <var:W> := <nat:2> + <var:W> * <var:j> ; <var:W> := <var:W> * <var:j> ; <var:W> := <nat:3> + <var:W> * <var:j> ; <var:W> := <var:W> * <var:j> ; <var:W> := <var:W> * <var:j> ; <var:W> := <nat:2> + <var:W> * <var:j> ; <var:W> := <nat:4> + <var:W> * <var:j> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:j> = <var:J> }} <def:poly> {{ <var:W> = <nat:4> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:4> + <nat:2> * <var:J> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:W> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:W> = <nat:4> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:W> = <nat:4> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:W> = <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:W> = <nat:4> * <var:J> ^ <nat:4> + <nat:2> * <var:J> ^ <nat:3> + <nat:3> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:W> = <nat:4> * <var:J> ^ <nat:5> + <nat:2> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:W> = <nat:4> * <var:J> ^ <nat:6> + <nat:2> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:J> /\ <var:W> = <nat:4> * <var:J> ^ <nat:7> + <nat:2> * <var:J> ^ <nat:6> + <nat:3> * <var:J> ^ <nat:4> + <nat:2> * <var:J> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 