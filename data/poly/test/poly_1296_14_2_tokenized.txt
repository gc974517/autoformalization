\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:s> := <nat:4> ; <var:s> := <nat:3> + <var:s> * <var:M> ; <var:s> := <var:s> * <var:M> ; <var:s> := <nat:4> + <var:s> * <var:M> ; <var:s> := <nat:2> + <var:s> * <var:M> ; <var:s> := <nat:3> + <var:s> * <var:M> ; <var:s> := <nat:2> + <var:s> * <var:M> ; <var:s> := <nat:4> + <var:s> * <var:M> ; <var:s> := <nat:4> + <var:s> * <var:M> ; <var:s> := <nat:2> + <var:s> * <var:M> ; <var:s> := <nat:4> + <var:s> * <var:M> ; <var:s> := <nat:1> + <var:s> * <var:M> ; <var:s> := <nat:2> + <var:s> * <var:M> ; <var:s> := <nat:1> + <var:s> * <var:M> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:M> = <var:Q> $ ahead of the evaluation of our code , it follows that we have $ <var:s> = <nat:4> \times <var:Q> ^ <nat:13> + <nat:3> \times <var:Q> ^ <nat:12> + <nat:4> \times <var:Q> ^ <nat:10> + <nat:2> \times <var:Q> ^ <nat:9> + <nat:3> \times <var:Q> ^ <nat:8> + <nat:2> \times <var:Q> ^ <nat:7> + <nat:4> \times <var:Q> ^ <nat:6> + <nat:4> \times <var:Q> ^ <nat:5> + <nat:2> \times <var:Q> ^ <nat:4> + <nat:4> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:1> $ after list of commands has exited . \end{theorem} \begin{proof} The proof of our list of commands is accomplished with Hoare logic . Moving on to the subsequent commands in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:M> = <var:Q> \} & <var:s> := <nat:4> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \} \\ \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \} & <var:s> := <nat:3> + <var:s> * <var:M> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> + <nat:3> \} \\ \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> + <nat:3> \} & <var:s> := <var:s> * <var:M> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + \} \\ \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + \} & <var:s> := <nat:4> + <var:s> * <var:M> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:4> \} \\ \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:4> \} & <var:s> := <nat:2> + <var:s> * <var:M> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> + <nat:2> \} \\ \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> + <nat:2> \} & <var:s> := <nat:3> + <var:s> * <var:M> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:3> \} \\ \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:3> \} & <var:s> := <nat:2> + <var:s> * <var:M> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:2> \} \\ \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:2> \} & <var:s> := <nat:4> + <var:s> * <var:M> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:7> + <nat:3> \cdot <var:Q> ^ <nat:6> + <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:4> \} \\ \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:7> + <nat:3> \cdot <var:Q> ^ <nat:6> + <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:4> \} & <var:s> := <nat:4> + <var:s> * <var:M> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:8> + <nat:3> \cdot <var:Q> ^ <nat:7> + <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:4> \} \\ \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:8> + <nat:3> \cdot <var:Q> ^ <nat:7> + <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:4> \} & <var:s> := <nat:2> + <var:s> * <var:M> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:9> + <nat:3> \cdot <var:Q> ^ <nat:8> + <nat:4> \cdot <var:Q> ^ <nat:6> + <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:2> \} \\ \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:9> + <nat:3> \cdot <var:Q> ^ <nat:8> + <nat:4> \cdot <var:Q> ^ <nat:6> + <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:2> \} & <var:s> := <nat:4> + <var:s> * <var:M> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:10> + <nat:3> \cdot <var:Q> ^ <nat:9> + <nat:4> \cdot <var:Q> ^ <nat:7> + <nat:2> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:4> \} \\ \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:10> + <nat:3> \cdot <var:Q> ^ <nat:9> + <nat:4> \cdot <var:Q> ^ <nat:7> + <nat:2> \cdot <var:Q> ^ <nat:6> + <nat:3> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:4> \} & <var:s> := <nat:1> + <var:s> * <var:M> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:11> + <nat:3> \cdot <var:Q> ^ <nat:10> + <nat:4> \cdot <var:Q> ^ <nat:8> + <nat:2> \cdot <var:Q> ^ <nat:7> + <nat:3> \cdot <var:Q> ^ <nat:6> + <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:1> \} \\ \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:11> + <nat:3> \cdot <var:Q> ^ <nat:10> + <nat:4> \cdot <var:Q> ^ <nat:8> + <nat:2> \cdot <var:Q> ^ <nat:7> + <nat:3> \cdot <var:Q> ^ <nat:6> + <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:1> \} & <var:s> := <nat:2> + <var:s> * <var:M> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \cdot <var:Q> ^ <nat:12> + <nat:3> \cdot <var:Q> ^ <nat:11> + <nat:4> \cdot <var:Q> ^ <nat:9> + <nat:2> \cdot <var:Q> ^ <nat:8> + <nat:3> \cdot <var:Q> ^ <nat:7> + <nat:2> \cdot <var:Q> ^ <nat:6> + <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:2> \} \end{tabular} This is guaranteed using the environment update rule defined in Hoare logic . Considering the proceeding command seen in our code segment , we see \[ \begin{tabular} {rcl} \{ <var:M> = <var:Q> \} & <var:s> := <nat:4> & \{ <var:M> = <var:Q> \land <var:s> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:s> := <nat:4> ; <var:s> := <nat:3> + <var:s> * <var:M> ; <var:s> := <var:s> * <var:M> ; <var:s> := <nat:4> + <var:s> * <var:M> ; <var:s> := <nat:2> + <var:s> * <var:M> ; <var:s> := <nat:3> + <var:s> * <var:M> ; <var:s> := <nat:2> + <var:s> * <var:M> ; <var:s> := <nat:4> + <var:s> * <var:M> ; <var:s> := <nat:4> + <var:s> * <var:M> ; <var:s> := <nat:2> + <var:s> * <var:M> ; <var:s> := <nat:4> + <var:s> * <var:M> ; <var:s> := <nat:1> + <var:s> * <var:M> ; <var:s> := <nat:2> + <var:s> * <var:M> ; <var:s> := <nat:1> + <var:s> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:M> = <var:Q> }} <def:poly> {{ <var:s> = <nat:4> * <var:Q> ^ <nat:13> + <nat:3> * <var:Q> ^ <nat:12> + <nat:4> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> ^ <nat:10> + <nat:3> * <var:Q> ^ <nat:9> + <nat:4> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> ^ <nat:11> + <nat:3> * <var:Q> ^ <nat:10> + <nat:4> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> ^ <nat:12> + <nat:3> * <var:Q> ^ <nat:11> + <nat:4> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Q> /\ <var:s> = <nat:4> * <var:Q> ^ <nat:13> + <nat:3> * <var:Q> ^ <nat:12> + <nat:4> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 