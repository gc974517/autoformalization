\begin{document} \begin{theorem} Define a code such that \begin{verbatim} <var:e0> := <nat:2> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:L> ; <var:e2> := <nat:2> ; <var:e2> := <var:e2> * <var:L> ; <var:e2> := <var:e2> * <var:L> ; <var:U> := <var:e2> ; <var:U> := <var:U> + <var:e1> ; <var:U> := <var:U> + <var:e0> \end{verbatim} Assume that $ <var:L> = <var:v> $ --- given some $ <var:v> \in \mathbb{N} $ --- before the evaluation of this program , it follows that we have $ <var:U> = <nat:2> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:2> $ once list of instructions executes . \end{theorem} \begin{proof} Applying typical Hoare techniques gives us : \begin{eqnarray} \{ <var:L> = <var:v> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:L> = <var:v> \land <var:e0> = <nat:2> \} \\ <var:e1> := <nat:5> ; \\ \{ <var:L> = <var:v> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \} \\ <var:e1> := <var:e1> * <var:L> ; \\ \{ <var:L> = <var:v> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:v> \} \\ <var:e2> := <nat:2> ; \\ \{ <var:L> = <var:v> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:v> \land <var:e2> = <nat:2> \} \\ <var:e2> := <var:e2> * <var:L> ; \\ \{ <var:L> = <var:v> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:v> \land <var:e2> = <nat:2> \times <var:v> \} \\ <var:e2> := <var:e2> * <var:L> ; \\ \{ <var:L> = <var:v> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:v> \land <var:e2> = <nat:2> \times <var:v> ^ <nat:2> \} \\ <var:U> := <var:e2> ; \\ \{ <var:L> = <var:v> \land <var:e0> = <nat:2> \land <var:e1> = <nat:5> \times <var:v> \land <var:U> = <nat:2> \times <var:v> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:e1> ; \\ \{ <var:L> = <var:v> \land <var:e0> = <nat:2> \land <var:U> = <nat:2> \times <var:v> ^ <nat:2> + <nat:5> \times <var:v> \} \\ <var:U> := <var:U> + <var:e0> \\ \{ <var:L> = <var:v> \land <var:U> = <nat:2> \times <var:v> ^ <nat:2> + <nat:5> \times <var:v> + <nat:2> \} \end{eqnarray} Considering the above , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:L> = <var:v> }} <var:e0> := <nat:2> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:L> ; <var:e2> := <nat:2> ; <var:e2> := <var:e2> * <var:L> ; <var:e2> := <var:e2> * <var:L> ; <var:U> := <var:e2> ; <var:U> := <var:U> + <var:e1> ; <var:U> := <var:U> + <var:e0> {{ <var:U> = <nat:2> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:5> * <var:v> /\ <var:e2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:5> * <var:v> /\ <var:e2> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:5> * <var:v> /\ <var:e2> = <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:5> * <var:v> /\ <var:U> = <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:e0> = <nat:2> /\ <var:U> = <nat:2> * <var:v> ^ <nat:2> + <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:U> = <nat:2> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 