\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} as \begin{verbatim} <var:y1> := <var:I> ; <var:y2> := <var:y1> * <var:I> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:4> ; <var:y2> := <var:y2> * <nat:4> ; <var:w> := <var:y2> <var:w> := <var:w> + <var:y1> <var:w> := <var:w> + <var:y0> \end{verbatim} Assume it to hold that $ <var:I> = <var:V> $ , taking positive coefficients $ <var:V> $ , prior to the evaluation of the code , it holds that we see $ <var:w> = <nat:4> \cdot <var:V> ^ <nat:2> + <nat:4> \cdot <var:V> + <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is clear by standard Hoare reasoning . Immediately after , we have the binding line \verb | <var:y1> := <var:I> ; | . This redefines $ \{ <var:I> = <var:V> \} $ into $ \{ <var:I> = <var:V> \land <var:y1> = <var:V> \} $ . Immediately following , we see the variable assignmet command yielding $ <var:y1> * <var:I> $ toward $ <var:y2>$ . This line advances the precondition $ \{ <var:I> = <var:V> \land <var:y1> = <var:V> \} $ to the condition $ \{ <var:I> = <var:V> \land <var:y1> = <var:V> \land <var:y2> = <var:V> ^ <nat:2> \} $ . This is rigorously given by the assignment inference rule defined by typical Hoare techniques . Taking a look at the following step in the list of commands , the line \verb | <var:y0> := <nat:8> ; | . This statement advances the condition $ \{ <var:I> = <var:V> \land <var:y1> = <var:V> \land <var:y2> = <var:V> ^ <nat:2> \} $ to the condition $ \{ <var:I> = <var:V> \land <var:y1> = <var:V> \land <var:y2> = <var:V> ^ <nat:2> \land <var:y0> = <nat:8> \} $ . This is given by the assignment law given by standard Hoare techniques . Paying attention to the following step found in our list of instructions , the binding line letting $ <var:y1> * <nat:4> $ toward $ <var:y1>$ . This command redefines the precondition $ \{ <var:I> = <var:V> \land <var:y1> = <var:V> \land <var:y2> = <var:V> ^ <nat:2> \land <var:y0> = <nat:8> \} $ into $ \{ <var:I> = <var:V> \land <var:y1> = <nat:4> * <var:V> \land <var:y2> = <var:V> ^ <nat:2> \land <var:y0> = <nat:8> \} $ . This is guaranteed using the assignment rule defined by standard Hoare techniques . Jumping to the upcoming step contained in the series of instructions , we have the variable assignmet line \verb | <var:y2> := <var:y2> * <nat:4> ; | . This statement forwards the condition $ \{ <var:I> = <var:V> \land <var:y1> = <nat:4> * <var:V> \land <var:y2> = <var:V> ^ <nat:2> \land <var:y0> = <nat:8> \} $ to $ \{ <var:I> = <var:V> \land <var:y1> = <nat:4> * <var:V> \land <var:y2> = <nat:4> * <var:V> ^ <nat:2> \land <var:y0> = <nat:8> \} $ . This is sound by the assignment inference rule from usual Hoare logic . Taking another step toward the following statement seen in our program , the statement yielding $ <var:y2$ to $ <var:w>$ . This code transfers the precondition $ \{ <var:I> = <var:V> \land <var:y1> = <nat:4> * <var:V> \land <var:y2> = <nat:4> * <var:V> ^ <nat:2> \land <var:y0> = <nat:8> \} $ toward $ \{ <var:I> = <var:V> \land <var:y1> = <nat:4> * <var:V> \land <var:y0> = <nat:8> \land <var:w> = <nat:4> * <var:V> ^ <nat:2> \} $ . This is rigorously given by the assignment inference rule given by usual Hoare techniques . Paying attention to the subsequent bit of code found in our series of instructions , we see the assignment command yielding $ <var:w> + <var:y1$ toward $ <var:w>$ . This line redefines the precondition $ \{ <var:I> = <var:V> \land <var:y1> = <nat:4> * <var:V> \land <var:y0> = <nat:8> \land <var:w> = <nat:4> * <var:V> ^ <nat:2> \} $ to the condition $ \{ <var:I> = <var:V> \land <var:y0> = <nat:8> \land <var:w> = <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> \} $ . This is guaranteed through the assignment law given in usual Hoare logic . Stepping forward , we see the variable binding line giving $ <var:w> + <var:y0$ as $ <var:w>$ . This redefines the condition $ \{ <var:I> = <var:V> \land <var:y0> = <nat:8> \land <var:w> = <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> \} $ toward $ \{ <var:I> = <var:V> \land <var:w> = <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:I> = <var:V> }} <var:y1> := <var:I> ; <var:y2> := <var:y1> * <var:I> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:4> ; <var:y2> := <var:y2> * <nat:4> ; <var:w> := <var:y2> <var:w> := <var:w> + <var:y1> <var:w> := <var:w> + <var:y0> {{ <var:w> = <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:V> /\ <var:y1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:V> /\ <var:y1> = <var:V> /\ <var:y2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:V> /\ <var:y1> = <var:V> /\ <var:y2> = <var:V> ^ <nat:2> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:V> /\ <var:y1> = <nat:4> * <var:V> /\ <var:y2> = <var:V> ^ <nat:2> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:V> /\ <var:y1> = <nat:4> * <var:V> /\ <var:y2> = <nat:4> * <var:V> ^ <nat:2> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:V> /\ <var:y1> = <nat:4> * <var:V> /\ <var:y0> = <nat:8> /\ <var:w> = <nat:4> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:V> /\ <var:y0> = <nat:8> /\ <var:w> = <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:V> /\ <var:w> = <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 