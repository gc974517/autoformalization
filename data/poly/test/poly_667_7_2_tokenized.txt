\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B> := <nat:1> ; <var:B> := <nat:4> + <var:B> * <var:d> ; <var:B> := <nat:3> + <var:B> * <var:d> ; <var:B> := <nat:3> + <var:B> * <var:d> ; <var:B> := <nat:2> + <var:B> * <var:d> ; <var:B> := <nat:4> + <var:B> * <var:d> ; <var:B> := <nat:3> + <var:B> * <var:d> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:d> = <var:q> $ before interpreting the code segment it must be that $ <var:B> = <nat:1> \cdot <var:q> ^ <nat:6> + <nat:4> \cdot <var:q> ^ <nat:5> + <nat:3> \cdot <var:q> ^ <nat:4> + <nat:3> \cdot <var:q> ^ <nat:3> + <nat:2> \cdot <var:q> ^ <nat:2> + <nat:4> \cdot <var:q> + <nat:3> $ once list of commands has exited . \end{theorem} \begin{proof} The argument for our set of commands is evident by typical Hoare logic . Focusing on the subsequent steps seen in the list of commands , we have \verb | { <var:d> = <var:q> } <var:B> := <nat:1> { <var:d> = <var:q> \land <var:B> = <nat:1> } | , \verb | { <var:d> = <var:q> \land <var:B> = <nat:1> } <var:B> := <nat:4> + <var:B> * <var:d> { <var:d> = <var:q> \land <var:B> = <nat:1> \times <var:q> + <nat:4> } | , \verb | { <var:d> = <var:q> \land <var:B> = <nat:1> \times <var:q> + <nat:4> } <var:B> := <nat:3> + <var:B> * <var:d> { <var:d> = <var:q> \land <var:B> = <nat:1> \times <var:q> ^ <nat:2> + <nat:4> \times <var:q> + <nat:3> } | and \verb | { <var:d> = <var:q> \land <var:B> = <nat:1> \times <var:q> ^ <nat:2> + <nat:4> \times <var:q> + <nat:3> } <var:B> := <nat:3> + <var:B> * <var:d> { <var:d> = <var:q> \land <var:B> = <nat:1> \times <var:q> ^ <nat:3> + <nat:4> \times <var:q> ^ <nat:2> + <nat:3> \times <var:q> + <nat:3> } | . Moving forward to the next line found in the segment of code , \verb | { <var:d> = <var:q> } <var:B> := <nat:1> { <var:d> = <var:q> \land <var:B> = <nat:1> } | . This is given through the law defined by usual Hoare logic . Looking at the next line of code found in our list of commands , \verb | { <var:d> = <var:q> } <var:B> := <nat:1> { <var:d> = <var:q> \land <var:B> = <nat:1> } | . This is known to be sound using the binding inference rule defined by usual Hoare logic . Jumping to the upcoming command found in the segment of code , \verb | { <var:d> = <var:q> } <var:B> := <nat:1> { <var:d> = <var:q> \land <var:B> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:1> ; <var:B> := <nat:4> + <var:B> * <var:d> ; <var:B> := <nat:3> + <var:B> * <var:d> ; <var:B> := <nat:3> + <var:B> * <var:d> ; <var:B> := <nat:2> + <var:B> * <var:d> ; <var:B> := <nat:4> + <var:B> * <var:d> ; <var:B> := <nat:3> + <var:B> * <var:d> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:d> = <var:q> }} <def:poly> {{ <var:B> = <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:B> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:B> = <nat:1> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:B> = <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:B> = <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:B> = <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:B> = <nat:1> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:q> /\ <var:B> = <nat:1> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 