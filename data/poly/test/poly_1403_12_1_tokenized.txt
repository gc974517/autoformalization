\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:B1> := <var:p> ; <var:B2> := <var:B1> * <var:p> ; <var:B3> := <var:B2> * <var:p> ; <var:B4> := <var:B3> * <var:p> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:3> ; <var:B2> := <var:B2> * <nat:1> ; <var:B4> := <var:B4> * <nat:4> ; <var:W> := <var:B4> <var:W> := <var:W> + <var:B2> <var:W> := <var:W> + <var:B1> <var:W> := <var:W> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Assume --- for some positive integer coefficients $ <var:Q> $ --- that $ <var:p> = <var:Q> $ before the execution of our code segment it follows that we have $ <var:W> = <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:2> $ after code exits . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions is done by standard Hoare reasoning . Taking another step toward the next piece of code found in the series of instructions , the variable binding code binding $ <var:p> $ to $ <var:B1>$ . This code forwards the precondition $ \{ <var:p> = <var:Q> \} $ to the postcondition $ \{ <var:p> = <var:Q> \land <var:B1> = <var:Q> \} $ . Going forward , the environment update statement \verb | <var:B2> := <var:B1> * <var:p> ; | . This advances the condition $ \{ <var:p> = <var:Q> \land <var:B1> = <var:Q> \} $ as $ \{ <var:p> = <var:Q> \land <var:B1> = <var:Q> \land <var:B2> = <var:Q> ^ <nat:2> \} $ . Moving on , we see the variable assignmet line defining $ <var:B2> * <var:p> $ toward $ <var:B3>$ . This statement forwards the condition $ \{ <var:p> = <var:Q> \land <var:B1> = <var:Q> \land <var:B2> = <var:Q> ^ <nat:2> \} $ as $ \{ <var:p> = <var:Q> \land <var:B1> = <var:Q> \land <var:B2> = <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \} $ . This is sound through the assignment scheme defined in Hoare reasoning . Honing in on the next piece of code in our series of instructions , we see the variable assignmet command binding $ <var:B3> * <var:p> $ as $ <var:B4>$ . This redefines the precondition $ \{ <var:p> = <var:Q> \land <var:B1> = <var:Q> \land <var:B2> = <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \} $ toward the condition $ \{ <var:p> = <var:Q> \land <var:B1> = <var:Q> \land <var:B2> = <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \land <var:B4> = <var:Q> ^ <nat:4> \} $ . This is shown with the assignment rule found in standard Hoare techniques . Focusing on the next line found in our list of instructions , we have the binding code assigning $ <nat:2> $ toward $ <var:B0>$ . This forwards $ \{ <var:p> = <var:Q> \land <var:B1> = <var:Q> \land <var:B2> = <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \land <var:B4> = <var:Q> ^ <nat:4> \} $ to the postcondition $ \{ <var:p> = <var:Q> \land <var:B1> = <var:Q> \land <var:B2> = <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \land <var:B4> = <var:Q> ^ <nat:4> \land <var:B0> = <nat:2> \} $ . This is shown by the assignment scheme of standard Hoare techniques . Immediately following , the variable assignmet code assigning $ <var:B1> * <nat:3> $ as $ <var:B1>$ . This command redefines the precondition $ \{ <var:p> = <var:Q> \land <var:B1> = <var:Q> \land <var:B2> = <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \land <var:B4> = <var:Q> ^ <nat:4> \land <var:B0> = <nat:2> \} $ toward the condition $ \{ <var:p> = <var:Q> \land <var:B1> = <nat:3> \cdot <var:Q> \land <var:B2> = <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \land <var:B4> = <var:Q> ^ <nat:4> \land <var:B0> = <nat:2> \} $ . This is shown by the assignment law of typical Hoare logic . Taking another step toward the upcoming step contained in the list of instructions , we have the variable update command \verb | <var:B2> := <var:B2> * <nat:1> ; | . This command takes the condition $ \{ <var:p> = <var:Q> \land <var:B1> = <nat:3> \cdot <var:Q> \land <var:B2> = <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \land <var:B4> = <var:Q> ^ <nat:4> \land <var:B0> = <nat:2> \} $ into the condition $ \{ <var:p> = <var:Q> \land <var:B1> = <nat:3> \cdot <var:Q> \land <var:B2> = <nat:1> \cdot <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \land <var:B4> = <var:Q> ^ <nat:4> \land <var:B0> = <nat:2> \} $ . Taking a look at the subsequent piece of code in the code , the binding code yielding $ <var:B4> * <nat:4> $ as $ <var:B4>$ . This takes the condition $ \{ <var:p> = <var:Q> \land <var:B1> = <nat:3> \cdot <var:Q> \land <var:B2> = <nat:1> \cdot <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \land <var:B4> = <var:Q> ^ <nat:4> \land <var:B0> = <nat:2> \} $ toward the postcondition $ \{ <var:p> = <var:Q> \land <var:B1> = <nat:3> \cdot <var:Q> \land <var:B2> = <nat:1> \cdot <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \land <var:B4> = <nat:4> \cdot <var:Q> ^ <nat:4> \land <var:B0> = <nat:2> \} $ . Next , we have the variable binding statement \verb | <var:W> := <var:B4> | . This moves the precondition $ \{ <var:p> = <var:Q> \land <var:B1> = <nat:3> \cdot <var:Q> \land <var:B2> = <nat:1> \cdot <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \land <var:B4> = <nat:4> \cdot <var:Q> ^ <nat:4> \land <var:B0> = <nat:2> \} $ into the condition $ \{ <var:p> = <var:Q> \land <var:B1> = <nat:3> \cdot <var:Q> \land <var:B2> = <nat:1> \cdot <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \land <var:B0> = <nat:2> \land <var:W> = <nat:4> \cdot <var:Q> ^ <nat:4> \} $ . This is sound by the assignment law given in Hoare techniques . Considering the upcoming step in our series of instructions , we have the variable update statement binding $ <var:W> + <var:B2$ toward $ <var:W>$ . This command advances the condition $ \{ <var:p> = <var:Q> \land <var:B1> = <nat:3> \cdot <var:Q> \land <var:B2> = <nat:1> \cdot <var:Q> ^ <nat:2> \land <var:B3> = <var:Q> ^ <nat:3> \land <var:B0> = <nat:2> \land <var:W> = <nat:4> \cdot <var:Q> ^ <nat:4> \} $ to the postcondition $ \{ <var:p> = <var:Q> \land <var:B1> = <nat:3> \cdot <var:Q> \land <var:B0> = <nat:2> \land <var:W> = <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:2> \} $ . This is deduced using the assignment law from usual Hoare techniques . Stepping forward , we have the variable assignmet command giving $ <var:W> + <var:B1$ to $ <var:W>$ . This command forwards $ \{ <var:p> = <var:Q> \land <var:B1> = <nat:3> \cdot <var:Q> \land <var:B0> = <nat:2> \land <var:W> = <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:2> \} $ as $ \{ <var:p> = <var:Q> \land <var:B0> = <nat:2> \land <var:W> = <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> \} $ . Taking a look at the proceeding step found in the series of instructions , the assignment statement defining $ <var:W> + <var:B0$ toward $ <var:W>$ . This moves $ \{ <var:p> = <var:Q> \land <var:B0> = <nat:2> \land <var:W> = <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> \} $ toward $ \{ <var:p> = <var:Q> \land <var:W> = <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:3> \cdot <var:Q> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <var:B4> : string := " <var:B4> " . Definition <def:poly> := <var:B1> := <var:p> ; <var:B2> := <var:B1> * <var:p> ; <var:B3> := <var:B2> * <var:p> ; <var:B4> := <var:B3> * <var:p> ; <var:B0> := <nat:2> ; <var:B1> := <var:B1> * <nat:3> ; <var:B2> := <var:B2> * <nat:1> ; <var:B4> := <var:B4> * <nat:4> ; <var:W> := <var:B4> <var:W> := <var:W> + <var:B2> <var:W> := <var:W> + <var:B1> <var:W> := <var:W> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:p> = <var:Q> }} <def:poly> {{ <var:W> = <nat:4> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:B1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:B1> = <var:Q> /\ <var:B2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:B1> = <var:Q> /\ <var:B2> = <var:Q> ^ <nat:2> /\ <var:B3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:B1> = <var:Q> /\ <var:B2> = <var:Q> ^ <nat:2> /\ <var:B3> = <var:Q> ^ <nat:3> /\ <var:B4> = <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:B1> = <var:Q> /\ <var:B2> = <var:Q> ^ <nat:2> /\ <var:B3> = <var:Q> ^ <nat:3> /\ <var:B4> = <var:Q> ^ <nat:4> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:B1> = <nat:3> * <var:Q> /\ <var:B2> = <var:Q> ^ <nat:2> /\ <var:B3> = <var:Q> ^ <nat:3> /\ <var:B4> = <var:Q> ^ <nat:4> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:B1> = <nat:3> * <var:Q> /\ <var:B2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:B3> = <var:Q> ^ <nat:3> /\ <var:B4> = <var:Q> ^ <nat:4> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:B1> = <nat:3> * <var:Q> /\ <var:B2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:B3> = <var:Q> ^ <nat:3> /\ <var:B4> = <nat:4> * <var:Q> ^ <nat:4> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:B1> = <nat:3> * <var:Q> /\ <var:B2> = <nat:1> * <var:Q> ^ <nat:2> /\ <var:B3> = <var:Q> ^ <nat:3> /\ <var:B0> = <nat:2> /\ <var:W> = <nat:4> * <var:Q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:B1> = <nat:3> * <var:Q> /\ <var:B0> = <nat:2> /\ <var:W> = <nat:4> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:B0> = <nat:2> /\ <var:W> = <nat:4> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Q> /\ <var:W> = <nat:4> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 