\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:5> ; <var:o1> := <nat:9> ; <var:o1> := <var:o1> * <var:s> ; <var:o2> := <nat:5> ; <var:o2> := <var:o2> * <var:s> ; <var:o2> := <var:o2> * <var:s> ; <var:o3> := <nat:3> ; <var:o3> := <var:o3> * <var:s> ; <var:o3> := <var:o3> * <var:s> ; <var:o3> := <var:o3> * <var:s> ; <var:S> := <var:o3> ; <var:S> := <var:S> + <var:o2> ; <var:S> := <var:S> + <var:o1> ; <var:S> := <var:S> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:s> = <var:r> $ ( letting positive numbers $ <var:r> $ ) prior to the evaluation of our series of instructions it must be that we see $ <var:S> = <nat:3> \times <var:r> ^ <nat:3> + <nat:5> \times <var:r> ^ <nat:2> + <nat:9> \times <var:r> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions can be done by standard Hoare reasoning . Shifting focus toward the next bit of code contained in the code , we see the assignment code \verb | <var:o0> := <nat:5> ; | . This transfers the condition $ \{ <var:s> = <var:r> \} $ toward the postcondition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \} $ . Now , we see the variable binding line letting $ <nat:9> $ to $ <var:o1>$ . This statement redefines the precondition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \} $ as $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> \} $ . Now , we have the line \verb | <var:o1> := <var:o1> * <var:s> ; | . This advances $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> \} $ into the postcondition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \} $ . Paying attention to the subsequent line contained in our code , we have the environment update code \verb | <var:o2> := <nat:5> ; | . This moves the precondition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \} $ toward the postcondition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> \} $ . This is given through the assignment scheme defined in typical Hoare reasoning . Now , the variable binding code \verb | <var:o2> := <var:o2> * <var:s> ; | . This code forwards the condition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> \} $ to the condition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> \} $ . Taking a look at the following line of code contained in our code , we have the line \verb | <var:o2> := <var:o2> * <var:s> ; | . This transfers $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> \} $ into the postcondition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> ^ <nat:2> \} $ . Moving on to the next step , we have the variable update statement yielding $ <nat:3> $ as $ <var:o3>$ . This statement redefines $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> ^ <nat:2> \} $ toward $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> ^ <nat:2> \land <var:o3> = <nat:3> \} $ . This is ensured through the assignment law in usual Hoare techniques . Moving on , the environment update statement assigning $ <var:o3> * <var:s> $ to $ <var:o3>$ . This takes the condition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> ^ <nat:2> \land <var:o3> = <nat:3> \} $ to $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> ^ <nat:2> \land <var:o3> = <nat:3> * <var:r> \} $ . Taking another step toward the subsequent bit of code contained in our list of commands , we see the variable binding line letting $ <var:o3> * <var:s> $ into $ <var:o3>$ . This statement redefines the precondition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> ^ <nat:2> \land <var:o3> = <nat:3> * <var:r> \} $ toward $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> ^ <nat:2> \land <var:o3> = <nat:3> * <var:r> ^ <nat:2> \} $ . Honing in on the upcoming line of code contained in our set of commands , we see the command assigning $ <var:o3> * <var:s> $ to $ <var:o3>$ . This command forwards the condition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> ^ <nat:2> \land <var:o3> = <nat:3> * <var:r> ^ <nat:2> \} $ toward $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> ^ <nat:2> \land <var:o3> = <nat:3> * <var:r> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment law obtained from usual Hoare techniques . Moving on to the next statement found in the segment of code , we have the variable binding command \verb | <var:S> := <var:o3> ; | . This command transfers the condition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> ^ <nat:2> \land <var:o3> = <nat:3> * <var:r> ^ <nat:3> \} $ into the condition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> ^ <nat:2> \land <var:S> = <nat:3> * <var:r> ^ <nat:3> \} $ . Looking at the following step seen in our list of commands , the assignment line giving $ <var:S> + <var:o2> $ toward $ <var:S>$ . This forwards the precondition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:o2> = <nat:5> * <var:r> ^ <nat:2> \land <var:S> = <nat:3> * <var:r> ^ <nat:3> \} $ to the postcondition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:S> = <nat:3> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> \} $ . Taking a look at the following line of code found in the segment of code , we see the variable update code defining $ <var:S> + <var:o1> $ into $ <var:S>$ . This takes the precondition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:o1> = <nat:9> * <var:r> \land <var:S> = <nat:3> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> \} $ to the postcondition $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:S> = <nat:3> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:9> * <var:r> \} $ . Shifting focus toward the upcoming command contained in the program , the variable binding command binding $ <var:S> + <var:o0$ as $ <var:S>$ . This line moves $ \{ <var:s> = <var:r> \land <var:o0> = <nat:5> \land <var:S> = <nat:3> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:9> * <var:r> \} $ as the postcondition $ \{ <var:s> = <var:r> \land <var:S> = <nat:3> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:9> * <var:r> + <nat:5> \} $ . This is given by the assignment inference rule obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o0> := <nat:5> ; <var:o1> := <nat:9> ; <var:o1> := <var:o1> * <var:s> ; <var:o2> := <nat:5> ; <var:o2> := <var:o2> * <var:s> ; <var:o2> := <var:o2> * <var:s> ; <var:o3> := <nat:3> ; <var:o3> := <var:o3> * <var:s> ; <var:o3> := <var:o3> * <var:s> ; <var:o3> := <var:o3> * <var:s> ; <var:S> := <var:o3> ; <var:S> := <var:S> + <var:o2> ; <var:S> := <var:S> + <var:o1> ; <var:S> := <var:S> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:s> = <var:r> }} <def:poly> {{ <var:S> = <nat:3> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:9> * <var:r> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:o0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:9> * <var:r> /\ <var:o2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:9> * <var:r> /\ <var:o2> = <nat:5> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:9> * <var:r> /\ <var:o2> = <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:9> * <var:r> /\ <var:o2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:o3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:9> * <var:r> /\ <var:o2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:9> * <var:r> /\ <var:o2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:9> * <var:r> /\ <var:o2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:o3> = <nat:3> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:9> * <var:r> /\ <var:o2> = <nat:5> * <var:r> ^ <nat:2> /\ <var:S> = <nat:3> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:o0> = <nat:5> /\ <var:o1> = <nat:9> * <var:r> /\ <var:S> = <nat:3> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:o0> = <nat:5> /\ <var:S> = <nat:3> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:9> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:r> /\ <var:S> = <nat:3> * <var:r> ^ <nat:3> + <nat:5> * <var:r> ^ <nat:2> + <nat:9> * <var:r> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 