\begin{document} \begin{theorem} Define the following segment of code as follows \begin{verbatim} <var:b> := <nat:1> ; <var:b> := <var:b> * <var:k> ; <var:b> := <nat:3> + <var:b> * <var:k> ; <var:b> := <nat:3> + <var:b> * <var:k> ; <var:b> := <nat:2> + <var:b> * <var:k> ; <var:b> := <nat:4> + <var:b> * <var:k> ; <var:b> := <var:b> * <var:k> ; <var:b> := <nat:1> + <var:b> * <var:k> ; <var:b> := <nat:3> + <var:b> * <var:k> ; <var:b> := <nat:2> + <var:b> * <var:k> ; <var:b> := <var:b> * <var:k> ; <var:b> := <nat:3> + <var:b> * <var:k> ; <var:b> := <nat:2> + <var:b> * <var:k> \end{verbatim} Assume given some positive integer coefficients $ <var:K> $ $ <var:k> = <var:K> $ ahead of running the program , it must be that we have $ <var:b> = <nat:1> \cdot <var:K> ^ <nat:12> + <nat:3> \cdot <var:K> ^ <nat:10> + <nat:3> \cdot <var:K> ^ <nat:9> + <nat:2> \cdot <var:K> ^ <nat:8> + <nat:4> \cdot <var:K> ^ <nat:7> + <nat:1> \cdot <var:K> ^ <nat:5> + <nat:3> \cdot <var:K> ^ <nat:4> + <nat:2> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> + <nat:2> $ when series of instructions is done . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning produces : \begin{eqnarray} \{ <var:k> = <var:K> \} \\ <var:b> := <nat:1> ; \\ \{ <var:k> = <var:K> \land <var:b> = <nat:1> \} \\ <var:b> := <var:b> * <var:k> ; \\ \{ <var:k> = <var:K> \land <var:b> = <nat:1> \cdot <var:K> + \} \\ <var:b> := <nat:3> + <var:b> * <var:k> ; \\ \{ <var:k> = <var:K> \land <var:b> = <nat:1> \cdot <var:K> ^ <nat:2> + <nat:3> \} \\ <var:b> := <nat:3> + <var:b> * <var:k> ; \\ \{ <var:k> = <var:K> \land <var:b> = <nat:1> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> + <nat:3> \} \\ <var:b> := <nat:2> + <var:b> * <var:k> ; \\ \{ <var:k> = <var:K> \land <var:b> = <nat:1> \cdot <var:K> ^ <nat:4> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:2> \} \\ <var:b> := <nat:4> + <var:b> * <var:k> ; \\ \{ <var:k> = <var:K> \land <var:b> = <nat:1> \cdot <var:K> ^ <nat:5> + <nat:3> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> + <nat:4> \} \\ <var:b> := <var:b> * <var:k> ; \\ \{ <var:k> = <var:K> \land <var:b> = <nat:1> \cdot <var:K> ^ <nat:6> + <nat:3> \cdot <var:K> ^ <nat:4> + <nat:3> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> + <nat:4> \cdot <var:K> + \} \\ <var:b> := <nat:1> + <var:b> * <var:k> ; \\ \{ <var:k> = <var:K> \land <var:b> = <nat:1> \cdot <var:K> ^ <nat:7> + <nat:3> \cdot <var:K> ^ <nat:5> + <nat:3> \cdot <var:K> ^ <nat:4> + <nat:2> \cdot <var:K> ^ <nat:3> + <nat:4> \cdot <var:K> ^ <nat:2> + <nat:1> \} \\ <var:b> := <nat:3> + <var:b> * <var:k> ; \\ \{ <var:k> = <var:K> \land <var:b> = <nat:1> \cdot <var:K> ^ <nat:8> + <nat:3> \cdot <var:K> ^ <nat:6> + <nat:3> \cdot <var:K> ^ <nat:5> + <nat:2> \cdot <var:K> ^ <nat:4> + <nat:4> \cdot <var:K> ^ <nat:3> + <nat:1> \cdot <var:K> + <nat:3> \} \\ <var:b> := <nat:2> + <var:b> * <var:k> ; \\ \{ <var:k> = <var:K> \land <var:b> = <nat:1> \cdot <var:K> ^ <nat:9> + <nat:3> \cdot <var:K> ^ <nat:7> + <nat:3> \cdot <var:K> ^ <nat:6> + <nat:2> \cdot <var:K> ^ <nat:5> + <nat:4> \cdot <var:K> ^ <nat:4> + <nat:1> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:2> \} \\ <var:b> := <var:b> * <var:k> ; \\ \{ <var:k> = <var:K> \land <var:b> = <nat:1> \cdot <var:K> ^ <nat:10> + <nat:3> \cdot <var:K> ^ <nat:8> + <nat:3> \cdot <var:K> ^ <nat:7> + <nat:2> \cdot <var:K> ^ <nat:6> + <nat:4> \cdot <var:K> ^ <nat:5> + <nat:1> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> + \} \\ <var:b> := <nat:3> + <var:b> * <var:k> ; \\ \{ <var:k> = <var:K> \land <var:b> = <nat:1> \cdot <var:K> ^ <nat:11> + <nat:3> \cdot <var:K> ^ <nat:9> + <nat:3> \cdot <var:K> ^ <nat:8> + <nat:2> \cdot <var:K> ^ <nat:7> + <nat:4> \cdot <var:K> ^ <nat:6> + <nat:1> \cdot <var:K> ^ <nat:4> + <nat:3> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> + <nat:3> \} \\ <var:b> := <nat:2> + <var:b> * <var:k> \\ \{ <var:k> = <var:K> \land <var:b> = <nat:1> \cdot <var:K> ^ <nat:12> + <nat:3> \cdot <var:K> ^ <nat:10> + <nat:3> \cdot <var:K> ^ <nat:9> + <nat:2> \cdot <var:K> ^ <nat:8> + <nat:4> \cdot <var:K> ^ <nat:7> + <nat:1> \cdot <var:K> ^ <nat:5> + <nat:3> \cdot <var:K> ^ <nat:4> + <nat:2> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> + <nat:2> \} \end{eqnarray} As a consequence , this list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:k> = <var:K> }} <var:b> := <nat:1> ; <var:b> := <var:b> * <var:k> ; <var:b> := <nat:3> + <var:b> * <var:k> ; <var:b> := <nat:3> + <var:b> * <var:k> ; <var:b> := <nat:2> + <var:b> * <var:k> ; <var:b> := <nat:4> + <var:b> * <var:k> ; <var:b> := <var:b> * <var:k> ; <var:b> := <nat:1> + <var:b> * <var:k> ; <var:b> := <nat:3> + <var:b> * <var:k> ; <var:b> := <nat:2> + <var:b> * <var:k> ; <var:b> := <var:b> * <var:k> ; <var:b> := <nat:3> + <var:b> * <var:k> ; <var:b> := <nat:2> + <var:b> * <var:k> {{ <var:b> = <nat:1> * <var:K> ^ <nat:12> + <nat:3> * <var:K> ^ <nat:10> + <nat:3> * <var:K> ^ <nat:9> + <nat:2> * <var:K> ^ <nat:8> + <nat:4> * <var:K> ^ <nat:7> + <nat:1> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:3> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:b> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:b> = <nat:1> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:b> = <nat:1> * <var:K> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:b> = <nat:1> * <var:K> ^ <nat:3> + <nat:3> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:b> = <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:b> = <nat:1> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:b> = <nat:1> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:b> = <nat:1> * <var:K> ^ <nat:7> + <nat:3> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:b> = <nat:1> * <var:K> ^ <nat:8> + <nat:3> * <var:K> ^ <nat:6> + <nat:3> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:4> * <var:K> ^ <nat:3> + <nat:1> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:b> = <nat:1> * <var:K> ^ <nat:9> + <nat:3> * <var:K> ^ <nat:7> + <nat:3> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:4> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:b> = <nat:1> * <var:K> ^ <nat:10> + <nat:3> * <var:K> ^ <nat:8> + <nat:3> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:6> + <nat:4> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:b> = <nat:1> * <var:K> ^ <nat:11> + <nat:3> * <var:K> ^ <nat:9> + <nat:3> * <var:K> ^ <nat:8> + <nat:2> * <var:K> ^ <nat:7> + <nat:4> * <var:K> ^ <nat:6> + <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:K> /\ <var:b> = <nat:1> * <var:K> ^ <nat:12> + <nat:3> * <var:K> ^ <nat:10> + <nat:3> * <var:K> ^ <nat:9> + <nat:2> * <var:K> ^ <nat:8> + <nat:4> * <var:K> ^ <nat:7> + <nat:1> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 