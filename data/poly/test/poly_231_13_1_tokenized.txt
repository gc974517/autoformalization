\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} : \begin{verbatim} <var:A1> := <var:s> ; <var:A2> := <var:A1> * <var:s> ; <var:A3> := <var:A2> * <var:s> ; <var:A4> := <var:A3> * <var:s> ; <var:A5> := <var:A4> * <var:s> ; <var:A0> := <nat:2> ; <var:A3> := <var:A3> * <nat:3> ; <var:A4> := <var:A4> * <nat:3> ; <var:A5> := <var:A5> * <nat:2> ; <var:b> := <var:A5> <var:b> := <var:b> + <var:A4> <var:b> := <var:b> + <var:A3> <var:b> := <var:b> + <var:A0> \end{verbatim} Assume --- for some natural coefficients $ <var:l> $ --- $ <var:s> = <var:l> $ before executing our program , then we have $ <var:b> = <nat:2> \cdot <var:l> ^ <nat:5> + <nat:3> \cdot <var:l> ^ <nat:4> + <nat:3> \cdot <var:l> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:l> \} \\ <var:A1> := <var:s> ; \\ \{ <var:s> = <var:l> \land <var:A1> = <var:l> \} \\ <var:A2> := <var:A1> * <var:s> ; \\ \{ <var:s> = <var:l> \land <var:A1> = <var:l> \land <var:A2> = <var:l> ^ <nat:2> \} \\ <var:A3> := <var:A2> * <var:s> ; \\ \{ <var:s> = <var:l> \land <var:A1> = <var:l> \land <var:A2> = <var:l> ^ <nat:2> \land <var:A3> = <var:l> ^ <nat:3> \} \\ <var:A4> := <var:A3> * <var:s> ; \\ \{ <var:s> = <var:l> \land <var:A1> = <var:l> \land <var:A2> = <var:l> ^ <nat:2> \land <var:A3> = <var:l> ^ <nat:3> \land <var:A4> = <var:l> ^ <nat:4> \} \end{eqnarray} Furthering executing this code segment yields : \begin{eqnarray} <var:A5> := <var:A4> * <var:s> ; \\ \{ <var:s> = <var:l> \land <var:A1> = <var:l> \land <var:A2> = <var:l> ^ <nat:2> \land <var:A3> = <var:l> ^ <nat:3> \land <var:A4> = <var:l> ^ <nat:4> \land <var:A5> = <var:l> ^ <nat:5> \} \\ <var:A0> := <nat:2> ; \\ \{ <var:s> = <var:l> \land <var:A1> = <var:l> \land <var:A2> = <var:l> ^ <nat:2> \land <var:A3> = <var:l> ^ <nat:3> \land <var:A4> = <var:l> ^ <nat:4> \land <var:A5> = <var:l> ^ <nat:5> \land <var:A0> = <nat:2> \} \end{eqnarray} Allowing interpreting the series of instructions produces : \begin{eqnarray} <var:A3> := <var:A3> * <nat:3> ; \\ \{ <var:s> = <var:l> \land <var:A1> = <var:l> \land <var:A2> = <var:l> ^ <nat:2> \land <var:A3> = <nat:3> \times <var:l> ^ <nat:3> \land <var:A4> = <var:l> ^ <nat:4> \land <var:A5> = <var:l> ^ <nat:5> \land <var:A0> = <nat:2> \} \\ <var:A4> := <var:A4> * <nat:3> ; \\ \{ <var:s> = <var:l> \land <var:A1> = <var:l> \land <var:A2> = <var:l> ^ <nat:2> \land <var:A3> = <nat:3> \times <var:l> ^ <nat:3> \land <var:A4> = <nat:3> \times <var:l> ^ <nat:4> \land <var:A5> = <var:l> ^ <nat:5> \land <var:A0> = <nat:2> \} \\ <var:A5> := <var:A5> * <nat:2> ; \\ \{ <var:s> = <var:l> \land <var:A1> = <var:l> \land <var:A2> = <var:l> ^ <nat:2> \land <var:A3> = <nat:3> \times <var:l> ^ <nat:3> \land <var:A4> = <nat:3> \times <var:l> ^ <nat:4> \land <var:A5> = <nat:2> \times <var:l> ^ <nat:5> \land <var:A0> = <nat:2> \} \\ <var:b> := <var:A5> \\ \{ <var:s> = <var:l> \land <var:A1> = <var:l> \land <var:A2> = <var:l> ^ <nat:2> \land <var:A3> = <nat:3> \times <var:l> ^ <nat:3> \land <var:A4> = <nat:3> \times <var:l> ^ <nat:4> \land <var:A0> = <nat:2> \land <var:b> = <nat:2> \times <var:l> ^ <nat:5> \} \\ <var:b> := <var:b> + <var:A4> \\ \{ <var:s> = <var:l> \land <var:A1> = <var:l> \land <var:A2> = <var:l> ^ <nat:2> \land <var:A3> = <nat:3> \times <var:l> ^ <nat:3> \land <var:A0> = <nat:2> \land <var:b> = <nat:2> \times <var:l> ^ <nat:5> + <nat:3> \times <var:l> ^ <nat:4> \} \\ <var:b> := <var:b> + <var:A3> \\ \{ <var:s> = <var:l> \land <var:A1> = <var:l> \land <var:A2> = <var:l> ^ <nat:2> \land <var:A0> = <nat:2> \land <var:b> = <nat:2> \times <var:l> ^ <nat:5> + <nat:3> \times <var:l> ^ <nat:4> + <nat:3> \times <var:l> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:A0> \\ \{ <var:s> = <var:l> \land <var:b> = <nat:2> \times <var:l> ^ <nat:5> + <nat:3> \times <var:l> ^ <nat:4> + <nat:3> \times <var:l> ^ <nat:3> + <nat:2> \} \end{eqnarray} Using typical Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <var:A4> : string := " <var:A4> " . Definition <var:A5> : string := " <var:A5> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:s> = <var:l> }} <var:A1> := <var:s> ; <var:A2> := <var:A1> * <var:s> ; <var:A3> := <var:A2> * <var:s> ; <var:A4> := <var:A3> * <var:s> ; <var:A5> := <var:A4> * <var:s> ; <var:A0> := <nat:2> ; <var:A3> := <var:A3> * <nat:3> ; <var:A4> := <var:A4> * <nat:3> ; <var:A5> := <var:A5> * <nat:2> ; <var:b> := <var:A5> <var:b> := <var:b> + <var:A4> <var:b> := <var:b> + <var:A3> <var:b> := <var:b> + <var:A0> {{ <var:b> = <nat:2> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:A1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:A1> = <var:l> /\ <var:A2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:A1> = <var:l> /\ <var:A2> = <var:l> ^ <nat:2> /\ <var:A3> = <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:A1> = <var:l> /\ <var:A2> = <var:l> ^ <nat:2> /\ <var:A3> = <var:l> ^ <nat:3> /\ <var:A4> = <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:A1> = <var:l> /\ <var:A2> = <var:l> ^ <nat:2> /\ <var:A3> = <var:l> ^ <nat:3> /\ <var:A4> = <var:l> ^ <nat:4> /\ <var:A5> = <var:l> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:A1> = <var:l> /\ <var:A2> = <var:l> ^ <nat:2> /\ <var:A3> = <var:l> ^ <nat:3> /\ <var:A4> = <var:l> ^ <nat:4> /\ <var:A5> = <var:l> ^ <nat:5> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:A1> = <var:l> /\ <var:A2> = <var:l> ^ <nat:2> /\ <var:A3> = <nat:3> * <var:l> ^ <nat:3> /\ <var:A4> = <var:l> ^ <nat:4> /\ <var:A5> = <var:l> ^ <nat:5> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:A1> = <var:l> /\ <var:A2> = <var:l> ^ <nat:2> /\ <var:A3> = <nat:3> * <var:l> ^ <nat:3> /\ <var:A4> = <nat:3> * <var:l> ^ <nat:4> /\ <var:A5> = <var:l> ^ <nat:5> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:A1> = <var:l> /\ <var:A2> = <var:l> ^ <nat:2> /\ <var:A3> = <nat:3> * <var:l> ^ <nat:3> /\ <var:A4> = <nat:3> * <var:l> ^ <nat:4> /\ <var:A5> = <nat:2> * <var:l> ^ <nat:5> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:A1> = <var:l> /\ <var:A2> = <var:l> ^ <nat:2> /\ <var:A3> = <nat:3> * <var:l> ^ <nat:3> /\ <var:A4> = <nat:3> * <var:l> ^ <nat:4> /\ <var:A0> = <nat:2> /\ <var:b> = <nat:2> * <var:l> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:A1> = <var:l> /\ <var:A2> = <var:l> ^ <nat:2> /\ <var:A3> = <nat:3> * <var:l> ^ <nat:3> /\ <var:A0> = <nat:2> /\ <var:b> = <nat:2> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:A1> = <var:l> /\ <var:A2> = <var:l> ^ <nat:2> /\ <var:A0> = <nat:2> /\ <var:b> = <nat:2> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:b> = <nat:2> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 