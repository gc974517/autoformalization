\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:W> := <nat:3> ; <var:W> := <nat:2> + <var:W> * <var:y> ; <var:W> := <nat:4> + <var:W> * <var:y> ; <var:W> := <nat:2> + <var:W> * <var:y> ; <var:W> := <nat:1> + <var:W> * <var:y> ; <var:W> := <nat:4> + <var:W> * <var:y> ; <var:W> := <nat:1> + <var:W> * <var:y> ; <var:W> := <nat:1> + <var:W> * <var:y> ; <var:W> := <nat:1> + <var:W> * <var:y> ; <var:W> := <nat:1> + <var:W> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:y> = <var:j> $ ahead of evaluating the set of commands then $ <var:W> = <nat:3> \cdot <var:j> ^ <nat:9> + <nat:2> \cdot <var:j> ^ <nat:8> + <nat:4> \cdot <var:j> ^ <nat:7> + <nat:2> \cdot <var:j> ^ <nat:6> + <nat:1> \cdot <var:j> ^ <nat:5> + <nat:4> \cdot <var:j> ^ <nat:4> + <nat:1> \cdot <var:j> ^ <nat:3> + <nat:1> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is clear with Hoare techniques . Shifting focus toward the proceeding command in the set of commands , we see the line letting $ <nat:3> $ to $ <var:W>$ . This code advances $ \{ <var:y> = <var:j> \} $ as the postcondition $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \} $ . This is shown with the assignment law defined by typical Hoare logic . Stepping forward , the variable binding command \verb | <var:W> := <nat:2> + <var:W> * <var:y> ; | . This statement takes the condition $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \} $ into the postcondition $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> + <nat:2> \} $ . Going to the next step , we see the variable binding code yielding $ <nat:4> + <var:W> * <var:y> $ to $ <var:W>$ . This code takes $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> + <nat:2> \} $ as $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:2> \cdot <var:j> + <nat:4> \} $ . This is guaranteed using the assignment law from Hoare reasoning . Moving on to the proceeding line of code seen in the list of instructions , the variable assignmet command giving $ <nat:2> + <var:W> * <var:y> $ into $ <var:W>$ . This code takes $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:2> \cdot <var:j> + <nat:4> \} $ to the postcondition $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:3> + <nat:2> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + <nat:2> \} $ . Moving on to the next step , we have the environment update code binding $ <nat:1> + <var:W> * <var:y> $ into $ <var:W>$ . This statement forwards $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:3> + <nat:2> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + <nat:2> \} $ as the postcondition $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:4> + <nat:2> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:2> \cdot <var:j> + <nat:1> \} $ . This is shown through the assignment law given in Hoare reasoning . Moving on to the next step , the variable update code defining $ <nat:4> + <var:W> * <var:y> $ toward $ <var:W>$ . This statement transfers the precondition $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:4> + <nat:2> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:2> \cdot <var:j> + <nat:1> \} $ into $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:5> + <nat:2> \cdot <var:j> ^ <nat:4> + <nat:4> \cdot <var:j> ^ <nat:3> + <nat:2> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:4> \} $ . This is deduced by the assignment inference rule found in typical Hoare techniques . Further , we have the variable binding statement yielding $ <nat:1> + <var:W> * <var:y> $ into $ <var:W>$ . This moves the precondition $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:5> + <nat:2> \cdot <var:j> ^ <nat:4> + <nat:4> \cdot <var:j> ^ <nat:3> + <nat:2> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:4> \} $ toward the postcondition $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:6> + <nat:2> \cdot <var:j> ^ <nat:5> + <nat:4> \cdot <var:j> ^ <nat:4> + <nat:2> \cdot <var:j> ^ <nat:3> + <nat:1> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + <nat:1> \} $ . Moving forward to the subsequent piece of code contained in our code , the variable assignmet statement assigning $ <nat:1> + <var:W> * <var:y> $ as $ <var:W>$ . This forwards the condition $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:6> + <nat:2> \cdot <var:j> ^ <nat:5> + <nat:4> \cdot <var:j> ^ <nat:4> + <nat:2> \cdot <var:j> ^ <nat:3> + <nat:1> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + <nat:1> \} $ into the condition $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:7> + <nat:2> \cdot <var:j> ^ <nat:6> + <nat:4> \cdot <var:j> ^ <nat:5> + <nat:2> \cdot <var:j> ^ <nat:4> + <nat:1> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:1> \} $ . This is known to be sound by the assignment rule defined by usual Hoare techniques . Looking at the following command found in the series of instructions , we have the binding statement \verb | <var:W> := <nat:1> + <var:W> * <var:y> ; | . This advances $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:7> + <nat:2> \cdot <var:j> ^ <nat:6> + <nat:4> \cdot <var:j> ^ <nat:5> + <nat:2> \cdot <var:j> ^ <nat:4> + <nat:1> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:1> \} $ into the condition $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:8> + <nat:2> \cdot <var:j> ^ <nat:7> + <nat:4> \cdot <var:j> ^ <nat:6> + <nat:2> \cdot <var:j> ^ <nat:5> + <nat:1> \cdot <var:j> ^ <nat:4> + <nat:4> \cdot <var:j> ^ <nat:3> + <nat:1> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:1> \} $ . Advancing on , the variable assignmet code \verb | <var:W> := <nat:1> + <var:W> * <var:y> | . This command takes $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:8> + <nat:2> \cdot <var:j> ^ <nat:7> + <nat:4> \cdot <var:j> ^ <nat:6> + <nat:2> \cdot <var:j> ^ <nat:5> + <nat:1> \cdot <var:j> ^ <nat:4> + <nat:4> \cdot <var:j> ^ <nat:3> + <nat:1> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:1> \} $ to $ \{ <var:y> = <var:j> \land <var:W> = <nat:3> \cdot <var:j> ^ <nat:9> + <nat:2> \cdot <var:j> ^ <nat:8> + <nat:4> \cdot <var:j> ^ <nat:7> + <nat:2> \cdot <var:j> ^ <nat:6> + <nat:1> \cdot <var:j> ^ <nat:5> + <nat:4> \cdot <var:j> ^ <nat:4> + <nat:1> \cdot <var:j> ^ <nat:3> + <nat:1> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:3> ; <var:W> := <nat:2> + <var:W> * <var:y> ; <var:W> := <nat:4> + <var:W> * <var:y> ; <var:W> := <nat:2> + <var:W> * <var:y> ; <var:W> := <nat:1> + <var:W> * <var:y> ; <var:W> := <nat:4> + <var:W> * <var:y> ; <var:W> := <nat:1> + <var:W> * <var:y> ; <var:W> := <nat:1> + <var:W> * <var:y> ; <var:W> := <nat:1> + <var:W> * <var:y> ; <var:W> := <nat:1> + <var:W> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:y> = <var:j> }} <def:poly> {{ <var:W> = <nat:3> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:W> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:W> = <nat:3> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:W> = <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:W> = <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:W> = <nat:3> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:W> = <nat:3> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:W> = <nat:3> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:W> = <nat:3> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:W> = <nat:3> * <var:j> ^ <nat:8> + <nat:2> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:j> /\ <var:W> = <nat:3> * <var:j> ^ <nat:9> + <nat:2> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 