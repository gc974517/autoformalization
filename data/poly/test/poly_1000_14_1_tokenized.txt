\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:U1> := <var:y> ; <var:U2> := <var:U1> * <var:y> ; <var:U3> := <var:U2> * <var:y> ; <var:U4> := <var:U3> * <var:y> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:7> ; <var:U3> := <var:U3> * <nat:7> ; <var:U4> := <var:U4> * <nat:7> ; <var:G> := <var:U4> <var:G> := <var:G> + <var:U3> <var:G> := <var:G> + <var:U2> <var:G> := <var:G> + <var:U1> <var:G> := <var:G> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> . Allowing that we have $ <var:y> = <var:D> $ ahead of the execution of our segment of code it follows that we have $ <var:G> = <nat:7> * <var:D> ^ <nat:4> + <nat:7> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:9> $ . \end{theorem} \begin{proof} The application of Hoare techniques gives : \begin{eqnarray} \{ <var:y> = <var:D> \} \\ <var:U1> := <var:y> ; \\ \{ <var:y> = <var:D> \land <var:U1> = <var:D> \} \\ <var:U2> := <var:U1> * <var:y> ; \\ \{ <var:y> = <var:D> \land <var:U1> = <var:D> \land <var:U2> = <var:D> ^ <nat:2> \} \\ <var:U3> := <var:U2> * <var:y> ; \\ \{ <var:y> = <var:D> \land <var:U1> = <var:D> \land <var:U2> = <var:D> ^ <nat:2> \land <var:U3> = <var:D> ^ <nat:3> \} \\ <var:U4> := <var:U3> * <var:y> ; \\ \{ <var:y> = <var:D> \land <var:U1> = <var:D> \land <var:U2> = <var:D> ^ <nat:2> \land <var:U3> = <var:D> ^ <nat:3> \land <var:U4> = <var:D> ^ <nat:4> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:y> = <var:D> \land <var:U1> = <var:D> \land <var:U2> = <var:D> ^ <nat:2> \land <var:U3> = <var:D> ^ <nat:3> \land <var:U4> = <var:D> ^ <nat:4> \land <var:U0> = <nat:9> \} \\ <var:U1> := <var:U1> * <nat:4> ; \\ \{ <var:y> = <var:D> \land <var:U1> = <nat:4> \times <var:D> \land <var:U2> = <var:D> ^ <nat:2> \land <var:U3> = <var:D> ^ <nat:3> \land <var:U4> = <var:D> ^ <nat:4> \land <var:U0> = <nat:9> \} \\ <var:U2> := <var:U2> * <nat:7> ; \\ \{ <var:y> = <var:D> \land <var:U1> = <nat:4> \times <var:D> \land <var:U2> = <nat:7> \times <var:D> ^ <nat:2> \land <var:U3> = <var:D> ^ <nat:3> \land <var:U4> = <var:D> ^ <nat:4> \land <var:U0> = <nat:9> \} \\ <var:U3> := <var:U3> * <nat:7> ; \\ \{ <var:y> = <var:D> \land <var:U1> = <nat:4> \times <var:D> \land <var:U2> = <nat:7> \times <var:D> ^ <nat:2> \land <var:U3> = <nat:7> \times <var:D> ^ <nat:3> \land <var:U4> = <var:D> ^ <nat:4> \land <var:U0> = <nat:9> \} \\ <var:U4> := <var:U4> * <nat:7> ; \\ \{ <var:y> = <var:D> \land <var:U1> = <nat:4> \times <var:D> \land <var:U2> = <nat:7> \times <var:D> ^ <nat:2> \land <var:U3> = <nat:7> \times <var:D> ^ <nat:3> \land <var:U4> = <nat:7> \times <var:D> ^ <nat:4> \land <var:U0> = <nat:9> \} \\ <var:G> := <var:U4> \\ \{ <var:y> = <var:D> \land <var:U1> = <nat:4> \times <var:D> \land <var:U2> = <nat:7> \times <var:D> ^ <nat:2> \land <var:U3> = <nat:7> \times <var:D> ^ <nat:3> \land <var:U0> = <nat:9> \land <var:G> = <nat:7> \times <var:D> ^ <nat:4> \} \\ <var:G> := <var:G> + <var:U3> \\ \{ <var:y> = <var:D> \land <var:U1> = <nat:4> \times <var:D> \land <var:U2> = <nat:7> \times <var:D> ^ <nat:2> \land <var:U0> = <nat:9> \land <var:G> = <nat:7> \times <var:D> ^ <nat:4> + <nat:7> \times <var:D> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:U2> \\ \{ <var:y> = <var:D> \land <var:U1> = <nat:4> \times <var:D> \land <var:U0> = <nat:9> \land <var:G> = <nat:7> \times <var:D> ^ <nat:4> + <nat:7> \times <var:D> ^ <nat:3> + <nat:7> \times <var:D> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:U1> \\ \{ <var:y> = <var:D> \land <var:U0> = <nat:9> \land <var:G> = <nat:7> \times <var:D> ^ <nat:4> + <nat:7> \times <var:D> ^ <nat:3> + <nat:7> \times <var:D> ^ <nat:2> + <nat:4> \times <var:D> \} \\ <var:G> := <var:G> + <var:U0> \\ \{ <var:y> = <var:D> \land <var:G> = <nat:7> \times <var:D> ^ <nat:4> + <nat:7> \times <var:D> ^ <nat:3> + <nat:7> \times <var:D> ^ <nat:2> + <nat:4> \times <var:D> + <nat:9> \} \end{eqnarray} Given the above , this list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <var:U4> : string := " <var:U4> " . Definition <def:poly> := <var:U1> := <var:y> ; <var:U2> := <var:U1> * <var:y> ; <var:U3> := <var:U2> * <var:y> ; <var:U4> := <var:U3> * <var:y> ; <var:U0> := <nat:9> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:7> ; <var:U3> := <var:U3> * <nat:7> ; <var:U4> := <var:U4> * <nat:7> ; <var:G> := <var:U4> <var:G> := <var:G> + <var:U3> <var:G> := <var:G> + <var:U2> <var:G> := <var:G> + <var:U1> <var:G> := <var:G> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:y> = <var:D> }} <def:poly> {{ <var:G> = <nat:7> * <var:D> ^ <nat:4> + <nat:7> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:U1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:U1> = <var:D> /\ <var:U2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:U1> = <var:D> /\ <var:U2> = <var:D> ^ <nat:2> /\ <var:U3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:U1> = <var:D> /\ <var:U2> = <var:D> ^ <nat:2> /\ <var:U3> = <var:D> ^ <nat:3> /\ <var:U4> = <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:U1> = <var:D> /\ <var:U2> = <var:D> ^ <nat:2> /\ <var:U3> = <var:D> ^ <nat:3> /\ <var:U4> = <var:D> ^ <nat:4> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:U1> = <nat:4> * <var:D> /\ <var:U2> = <var:D> ^ <nat:2> /\ <var:U3> = <var:D> ^ <nat:3> /\ <var:U4> = <var:D> ^ <nat:4> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:U1> = <nat:4> * <var:D> /\ <var:U2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:U3> = <var:D> ^ <nat:3> /\ <var:U4> = <var:D> ^ <nat:4> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:U1> = <nat:4> * <var:D> /\ <var:U2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:D> ^ <nat:3> /\ <var:U4> = <var:D> ^ <nat:4> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:U1> = <nat:4> * <var:D> /\ <var:U2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:D> ^ <nat:3> /\ <var:U4> = <nat:7> * <var:D> ^ <nat:4> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:U1> = <nat:4> * <var:D> /\ <var:U2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:U3> = <nat:7> * <var:D> ^ <nat:3> /\ <var:U0> = <nat:9> /\ <var:G> = <nat:7> * <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:U1> = <nat:4> * <var:D> /\ <var:U2> = <nat:7> * <var:D> ^ <nat:2> /\ <var:U0> = <nat:9> /\ <var:G> = <nat:7> * <var:D> ^ <nat:4> + <nat:7> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:U1> = <nat:4> * <var:D> /\ <var:U0> = <nat:9> /\ <var:G> = <nat:7> * <var:D> ^ <nat:4> + <nat:7> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:U0> = <nat:9> /\ <var:G> = <nat:7> * <var:D> ^ <nat:4> + <nat:7> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:4> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:D> /\ <var:G> = <nat:7> * <var:D> ^ <nat:4> + <nat:7> * <var:D> ^ <nat:3> + <nat:7> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 