\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} such that \begin{verbatim} <var:i1> := <var:K> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:3> ; <var:e> := <var:i1> <var:e> := <var:e> + <var:i0> \end{verbatim} Assume it to be that $ <var:K> = <var:b> $ prior to the evaluation of this series of instructions then we have $ <var:e> = <nat:3> \times <var:b> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:b> \} \\ <var:i1> := <var:K> ; \\ \{ <var:K> = <var:b> \land <var:i1> = <var:b> \} \\ <var:i0> := <nat:3> ; \\ \{ <var:K> = <var:b> \land <var:i1> = <var:b> \land <var:i0> = <nat:3> \} \\ <var:i1> := <var:i1> * <nat:3> ; \\ \{ <var:K> = <var:b> \land <var:i1> = <nat:3> \times <var:b> \land <var:i0> = <nat:3> \} \\ <var:e> := <var:i1> \\ \{ <var:K> = <var:b> \land <var:i0> = <nat:3> \land <var:e> = <nat:3> \times <var:b> \} \\ <var:e> := <var:e> + <var:i0> \\ \{ <var:K> = <var:b> \land <var:e> = <nat:3> \times <var:b> + <nat:3> \} \end{eqnarray} Applying usual Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:K> = <var:b> }} <var:i1> := <var:K> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:3> ; <var:e> := <var:i1> <var:e> := <var:e> + <var:i0> {{ <var:e> = <nat:3> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:i1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:i1> = <var:b> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:i1> = <nat:3> * <var:b> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:i0> = <nat:3> /\ <var:e> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:b> /\ <var:e> = <nat:3> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 