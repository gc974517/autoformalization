\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:1> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:I> ; <var:z> := <var:R1> ; <var:z> := <var:z> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allowing , assuming some positive numbers $ <var:l> $ , it to be that $ <var:I> = <var:l> $ prior to the execution of the set of instructions , then we see $ <var:z> = <nat:5> \cdot <var:l> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for our set of commands is evident through typical Hoare logic . Moving on to the subsequent command contained in the set of instructions , the binding line assigning $ <nat:1> $ as $ <var:R0>$ . This command transfers the precondition $ \{ <var:I> = <var:l> \} $ to $ \{ <var:I> = <var:l> \land <var:R0> = <nat:1> \} $ . This is sound with the assignment rule in usual Hoare reasoning . Immediately after , we see the variable update statement \verb | <var:R1> := <nat:5> ; | . This statement takes the precondition $ \{ <var:I> = <var:l> \land <var:R0> = <nat:1> \} $ to the condition $ \{ <var:I> = <var:l> \land <var:R0> = <nat:1> \land <var:R1> = <nat:5> \} $ . This is rigorously given with the assignment rule from typical Hoare techniques . Next , the assignment statement \verb | <var:R1> := <var:R1> * <var:I> ; | . This takes the condition $ \{ <var:I> = <var:l> \land <var:R0> = <nat:1> \land <var:R1> = <nat:5> \} $ to $ \{ <var:I> = <var:l> \land <var:R0> = <nat:1> \land <var:R1> = <nat:5> \cdot <var:l> \} $ . Advancing , we see the binding command letting $ <var:R1> $ as $ <var:z>$ . This transfers the condition $ \{ <var:I> = <var:l> \land <var:R0> = <nat:1> \land <var:R1> = <nat:5> \cdot <var:l> \} $ toward $ \{ <var:I> = <var:l> \land <var:R0> = <nat:1> \land <var:z> = <nat:5> \cdot <var:l> \} $ . Looking at the following bit of code seen in the code , we have the line letting $ <var:z> + <var:R0$ toward $ <var:z>$ . This statement advances $ \{ <var:I> = <var:l> \land <var:R0> = <nat:1> \land <var:z> = <nat:5> \cdot <var:l> \} $ into the condition $ \{ <var:I> = <var:l> \land <var:z> = <nat:5> \cdot <var:l> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R0> := <nat:1> ; <var:R1> := <nat:5> ; <var:R1> := <var:R1> * <var:I> ; <var:z> := <var:R1> ; <var:z> := <var:z> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:I> = <var:l> }} <def:poly> {{ <var:z> = <nat:5> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:R0> = <nat:1> /\ <var:R1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:R0> = <nat:1> /\ <var:R1> = <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:R0> = <nat:1> /\ <var:z> = <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:l> /\ <var:z> = <nat:5> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 