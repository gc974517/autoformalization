\begin{document} \begin{theorem} We define a set of instructions as \begin{verbatim} <var:Q0> := <nat:8> ; <var:Q1> := <nat:1> ; <var:Q1> := <var:Q1> * <var:G> ; <var:Q2> := <nat:1> ; <var:Q2> := <var:Q2> * <var:G> ; <var:Q2> := <var:Q2> * <var:G> ; <var:N> := <var:Q2> ; <var:N> := <var:N> + <var:Q1> ; <var:N> := <var:N> + <var:Q0> \end{verbatim} Given $ <var:G> = <var:J> $ for integers $ <var:J> $ ahead of executing this set of instructions , it must be that we have $ <var:N> = <nat:1> \cdot <var:J> ^ <nat:2> + <nat:1> \cdot <var:J> + <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our code segment is demonstrated through typical Hoare logic . Paying attention to the subsequent lines of codefound in our segment of code , we see \begin{verbatim} { <var:G> = <var:J> } <var:Q0> := <nat:8> { <var:G> = <var:J> \land <var:Q0> = <nat:8> } { <var:G> = <var:J> \land <var:Q0> = <nat:8> } <var:Q1> := <nat:1> { <var:G> = <var:J> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> } { <var:G> = <var:J> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> } <var:Q1> := <var:Q1> * <var:G> { <var:G> = <var:J> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:J> } { <var:G> = <var:J> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:J> } <var:Q2> := <nat:1> { <var:G> = <var:J> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:J> \land <var:Q2> = <nat:1> } { <var:G> = <var:J> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:J> \land <var:Q2> = <nat:1> } <var:Q2> := <var:Q2> * <var:G> { <var:G> = <var:J> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:J> \land <var:Q2> = <nat:1> * <var:J> } { <var:G> = <var:J> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:J> \land <var:Q2> = <nat:1> * <var:J> } <var:Q2> := <var:Q2> * <var:G> { <var:G> = <var:J> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:J> \land <var:Q2> = <nat:1> * <var:J> ^ <nat:2> } { <var:G> = <var:J> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:J> \land <var:Q2> = <nat:1> * <var:J> ^ <nat:2> } <var:N> := <var:Q2> { <var:G> = <var:J> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> * <var:J> \land <var:N> = <nat:1> * <var:J> ^ <nat:2> } \end{verbatim} This is rigorously given through the variable binding rule given in usual Hoare techniques . Focusing on the next lines in our code , we have \begin{verbatim} { <var:G> = <var:J> } <var:Q0> := <nat:8> { <var:G> = <var:J> \land <var:Q0> = <nat:8> } { <var:G> = <var:J> \land <var:Q0> = <nat:8> } <var:Q1> := <nat:1> { <var:G> = <var:J> \land <var:Q0> = <nat:8> \land <var:Q1> = <nat:1> } \end{verbatim} This is given with the binding inference rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:G> = <var:J> }} <var:Q0> := <nat:8> ; <var:Q1> := <nat:1> ; <var:Q1> := <var:Q1> * <var:G> ; <var:Q2> := <nat:1> ; <var:Q2> := <var:Q2> * <var:G> ; <var:Q2> := <var:Q2> * <var:G> ; <var:N> := <var:Q2> ; <var:N> := <var:N> + <var:Q1> ; <var:N> := <var:N> + <var:Q0> {{ <var:N> = <nat:1> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:1> * <var:J> /\ <var:Q2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:1> * <var:J> /\ <var:Q2> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:1> * <var:J> /\ <var:Q2> = <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:Q0> = <nat:8> /\ <var:Q1> = <nat:1> * <var:J> /\ <var:N> = <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:Q0> = <nat:8> /\ <var:N> = <nat:1> * <var:J> ^ <nat:2> + <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:N> = <nat:1> * <var:J> ^ <nat:2> + <nat:1> * <var:J> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 