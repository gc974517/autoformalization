\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:8> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:G> ; <var:h2> := <nat:6> ; <var:h2> := <var:h2> * <var:G> ; <var:h2> := <var:h2> * <var:G> ; <var:O> := <var:h2> ; <var:O> := <var:O> + <var:h1> ; <var:O> := <var:O> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Assuming --- assuming some positive integer coefficients $ <var:w> $ --- it to hold that $ <var:G> = <var:w> $ prior to running this series of instructions , it follows that we see $ <var:O> = <nat:6> \cdot <var:w> ^ <nat:2> + <nat:5> \cdot <var:w> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for the list of instructions can be shown with Hoare reasoning . Taking a look at the following lines contained in our program , \begin{verbatim} { <var:G> = <var:w> } <var:h0> := <nat:8> { <var:G> = <var:w> \land <var:h0> = <nat:8> } { <var:G> = <var:w> \land <var:h0> = <nat:8> } <var:h1> := <nat:5> { <var:G> = <var:w> \land <var:h0> = <nat:8> \land <var:h1> = <nat:5> } { <var:G> = <var:w> \land <var:h0> = <nat:8> \land <var:h1> = <nat:5> } <var:h1> := <var:h1> * <var:G> { <var:G> = <var:w> \land <var:h0> = <nat:8> \land <var:h1> = <nat:5> \cdot <var:w> } \end{verbatim} Shifting focus toward the following commands in the series of instructions , we see \begin{verbatim} { <var:G> = <var:w> } <var:h0> := <nat:8> { <var:G> = <var:w> \land <var:h0> = <nat:8> } { <var:G> = <var:w> \land <var:h0> = <nat:8> } <var:h1> := <nat:5> { <var:G> = <var:w> \land <var:h0> = <nat:8> \land <var:h1> = <nat:5> } { <var:G> = <var:w> \land <var:h0> = <nat:8> \land <var:h1> = <nat:5> } <var:h1> := <var:h1> * <var:G> { <var:G> = <var:w> \land <var:h0> = <nat:8> \land <var:h1> = <nat:5> \cdot <var:w> } { <var:G> = <var:w> \land <var:h0> = <nat:8> \land <var:h1> = <nat:5> \cdot <var:w> } <var:h2> := <nat:6> { <var:G> = <var:w> \land <var:h0> = <nat:8> \land <var:h1> = <nat:5> \cdot <var:w> \land <var:h2> = <nat:6> } { <var:G> = <var:w> \land <var:h0> = <nat:8> \land <var:h1> = <nat:5> \cdot <var:w> \land <var:h2> = <nat:6> } <var:h2> := <var:h2> * <var:G> { <var:G> = <var:w> \land <var:h0> = <nat:8> \land <var:h1> = <nat:5> \cdot <var:w> \land <var:h2> = <nat:6> \cdot <var:w> } \end{verbatim} Going forward , \begin{verbatim} { <var:G> = <var:w> } <var:h0> := <nat:8> { <var:G> = <var:w> \land <var:h0> = <nat:8> } \end{verbatim} This is known to be sound using the assignment rule found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:8> ; <var:h1> := <nat:5> ; <var:h1> := <var:h1> * <var:G> ; <var:h2> := <nat:6> ; <var:h2> := <var:h2> * <var:G> ; <var:h2> := <var:h2> * <var:G> ; <var:O> := <var:h2> ; <var:O> := <var:O> + <var:h1> ; <var:O> := <var:O> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:G> = <var:w> }} <def:poly> {{ <var:O> = <nat:6> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:h0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:5> * <var:w> /\ <var:h2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:5> * <var:w> /\ <var:h2> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:5> * <var:w> /\ <var:h2> = <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:h0> = <nat:8> /\ <var:h1> = <nat:5> * <var:w> /\ <var:O> = <nat:6> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:h0> = <nat:8> /\ <var:O> = <nat:6> * <var:w> ^ <nat:2> + <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:w> /\ <var:O> = <nat:6> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 