\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} as \begin{verbatim} <var:Y> := <nat:1> ; <var:Y> := <var:Y> * <var:j> ; <var:Y> := <nat:3> + <var:Y> * <var:j> ; <var:Y> := <var:Y> * <var:j> ; <var:Y> := <nat:3> + <var:Y> * <var:j> ; <var:Y> := <nat:4> + <var:Y> * <var:j> ; <var:Y> := <nat:2> + <var:Y> * <var:j> ; <var:Y> := <nat:1> + <var:Y> * <var:j> ; <var:Y> := <nat:2> + <var:Y> * <var:j> ; <var:Y> := <nat:4> + <var:Y> * <var:j> ; <var:Y> := <nat:1> + <var:Y> * <var:j> \end{verbatim} Assuming it to hold that $ <var:j> = <var:H> $ ahead of interpreting the code , then we see $ <var:Y> = <nat:1> \times <var:H> ^ <nat:10> + <nat:3> \times <var:H> ^ <nat:8> + <nat:3> \times <var:H> ^ <nat:6> + <nat:4> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:1> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for this series of commands can be demonstrated through Hoare reasoning . Observing the upcoming steps in the code , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:H> \} & <var:Y> := <nat:1> & \{ <var:j> = <var:H> \land <var:Y> = <nat:1> \} \\ \{ <var:j> = <var:H> \land <var:Y> = <nat:1> \} & <var:Y> := <var:Y> * <var:j> & \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> + \} \\ \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> + \} & <var:Y> := <nat:3> + <var:Y> * <var:j> & \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:2> + <nat:3> \} \\ \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:2> + <nat:3> \} & <var:Y> := <var:Y> * <var:j> & \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + \} \\ \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + \} & <var:Y> := <nat:3> + <var:Y> * <var:j> & \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> \} \\ \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> \} & <var:Y> := <nat:4> + <var:Y> * <var:j> & \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:4> \} \\ \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:4> \} & <var:Y> := <nat:2> + <var:Y> * <var:j> & \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> \} \\ \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> \} & <var:Y> := <nat:1> + <var:Y> * <var:j> & \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> \} \\ \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> \} & <var:Y> := <nat:2> + <var:Y> * <var:j> & \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> \} \\ \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> \} & <var:Y> := <nat:4> + <var:Y> * <var:j> & \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:4> \} \\ \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:4> \} & <var:Y> := <nat:1> + <var:Y> * <var:j& \{ <var:j> = <var:H> \land <var:Y> = <nat:1> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> \} \end{tabular} This is rigorously given by the variable update scheme defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:j> = <var:H> }} <var:Y> := <nat:1> ; <var:Y> := <var:Y> * <var:j> ; <var:Y> := <nat:3> + <var:Y> * <var:j> ; <var:Y> := <var:Y> * <var:j> ; <var:Y> := <nat:3> + <var:Y> * <var:j> ; <var:Y> := <nat:4> + <var:Y> * <var:j> ; <var:Y> := <nat:2> + <var:Y> * <var:j> ; <var:Y> := <nat:1> + <var:Y> * <var:j> ; <var:Y> := <nat:2> + <var:Y> * <var:j> ; <var:Y> := <nat:4> + <var:Y> * <var:j> ; <var:Y> := <nat:1> + <var:Y> * <var:j> {{ <var:Y> = <nat:1> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:Y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:Y> = <nat:1> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:Y> = <nat:1> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:Y> = <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:Y> = <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:Y> = <nat:1> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:Y> = <nat:1> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:Y> = <nat:1> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:Y> = <nat:1> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:Y> = <nat:1> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:H> /\ <var:Y> = <nat:1> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 