\begin{document} \begin{theorem} Consider a list of instructions such that \begin{verbatim} <var:T0> := <nat:6> ; <var:T1> := <nat:7> ; <var:T1> := <var:T1> * <var:Q> ; <var:T2> := <nat:6> ; <var:T2> := <var:T2> * <var:Q> ; <var:T2> := <var:T2> * <var:Q> ; <var:k> := <var:T2> ; <var:k> := <var:k> + <var:T1> ; <var:k> := <var:k> + <var:T0> \end{verbatim} Given given natural coefficients $ <var:G> $ it to be that $ <var:Q> = <var:G> $ prior to the execution of our list of commands , it holds that we have $ <var:k> = <nat:6> * <var:G> ^ <nat:2> + <nat:7> * <var:G> + <nat:6> $ after list of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:G> \} \\ <var:T0> := <nat:6> ; \\ \{ <var:Q> = <var:G> \land <var:T0> = <nat:6> \} \\ <var:T1> := <nat:7> ; \\ \{ <var:Q> = <var:G> \land <var:T0> = <nat:6> \land <var:T1> = <nat:7> \} \\ <var:T1> := <var:T1> * <var:Q> ; \\ \{ <var:Q> = <var:G> \land <var:T0> = <nat:6> \land <var:T1> = <nat:7> \cdot <var:G> \} \\ <var:T2> := <nat:6> ; \\ \{ <var:Q> = <var:G> \land <var:T0> = <nat:6> \land <var:T1> = <nat:7> \cdot <var:G> \land <var:T2> = <nat:6> \} \\ <var:T2> := <var:T2> * <var:Q> ; \\ \{ <var:Q> = <var:G> \land <var:T0> = <nat:6> \land <var:T1> = <nat:7> \cdot <var:G> \land <var:T2> = <nat:6> \cdot <var:G> \} \\ <var:T2> := <var:T2> * <var:Q> ; \\ \{ <var:Q> = <var:G> \land <var:T0> = <nat:6> \land <var:T1> = <nat:7> \cdot <var:G> \land <var:T2> = <nat:6> \cdot <var:G> ^ <nat:2> \} \\ <var:k> := <var:T2> ; \\ \{ <var:Q> = <var:G> \land <var:T0> = <nat:6> \land <var:T1> = <nat:7> \cdot <var:G> \land <var:k> = <nat:6> \cdot <var:G> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:T1> ; \\ \{ <var:Q> = <var:G> \land <var:T0> = <nat:6> \land <var:k> = <nat:6> \cdot <var:G> ^ <nat:2> + <nat:7> \cdot <var:G> \} \\ <var:k> := <var:k> + <var:T0> \\ \{ <var:Q> = <var:G> \land <var:k> = <nat:6> \cdot <var:G> ^ <nat:2> + <nat:7> \cdot <var:G> + <nat:6> \} \end{eqnarray} Utilizing standard Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:Q> = <var:G> }} <var:T0> := <nat:6> ; <var:T1> := <nat:7> ; <var:T1> := <var:T1> * <var:Q> ; <var:T2> := <nat:6> ; <var:T2> := <var:T2> * <var:Q> ; <var:T2> := <var:T2> * <var:Q> ; <var:k> := <var:T2> ; <var:k> := <var:k> + <var:T1> ; <var:k> := <var:k> + <var:T0> {{ <var:k> = <nat:6> * <var:G> ^ <nat:2> + <nat:7> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:7> * <var:G> /\ <var:T2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:7> * <var:G> /\ <var:T2> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:7> * <var:G> /\ <var:T2> = <nat:6> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:T0> = <nat:6> /\ <var:T1> = <nat:7> * <var:G> /\ <var:k> = <nat:6> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:T0> = <nat:6> /\ <var:k> = <nat:6> * <var:G> ^ <nat:2> + <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:G> /\ <var:k> = <nat:6> * <var:G> ^ <nat:2> + <nat:7> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 