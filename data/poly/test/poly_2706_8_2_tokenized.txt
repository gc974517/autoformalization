\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q> := <nat:4> ; <var:q> := <var:q> * <var:Q> ; <var:q> := <nat:3> + <var:q> * <var:Q> ; <var:q> := <nat:1> + <var:q> * <var:Q> ; <var:q> := <nat:1> + <var:q> * <var:Q> ; <var:q> := <nat:1> + <var:q> * <var:Q> ; <var:q> := <nat:1> + <var:q> * <var:Q> ; <var:q> := <nat:3> + <var:q> * <var:Q> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:Q> = <var:j> $ prior to evaluating the set of commands it holds that we have $ <var:q> = <nat:4> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> $ when program is done . \end{theorem} \begin{proof} The way to prove correctness for the set of commands is demonstrated by usual Hoare reasoning . Moving on to the following piece of code contained in the code , the variable binding code \verb | <var:q> := <nat:4> ; | . This transfers the precondition $ \{ <var:Q> = <var:j> \} $ toward $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> \} $ . Paying attention to the next statement seen in our series of commands , the binding code \verb | <var:q> := <var:q> * <var:Q> ; | . This takes the condition $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> \} $ as $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> * <var:j> + \} $ . Taking another step toward the next statement seen in our list of instructions , we have the environment update command \verb | <var:q> := <nat:3> + <var:q> * <var:Q> ; | . This command redefines the condition $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> * <var:j> + \} $ as the postcondition $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> * <var:j> ^ <nat:2> + <nat:3> \} $ . Honing in on the upcoming statement in our code , we see the variable update statement giving $ <nat:1> + <var:q> * <var:Q> $ to $ <var:q>$ . This advances the precondition $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> * <var:j> ^ <nat:2> + <nat:3> \} $ into $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> + <nat:1> \} $ . This is sound through the assignment law from Hoare reasoning . Taking a look at the following line of code found in our set of instructions , the binding code \verb | <var:q> := <nat:1> + <var:q> * <var:Q> ; | . This code redefines $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> + <nat:1> \} $ to the condition $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> \} $ . This is shown using the assignment inference rule found in typical Hoare techniques . Honing in on the proceeding piece of code in the series of instructions , we see the statement giving $ <nat:1> + <var:q> * <var:Q> $ to $ <var:q>$ . This takes the condition $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> \} $ as the postcondition $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> \} $ . Following , we have the code defining $ <nat:1> + <var:q> * <var:Q> $ into $ <var:q>$ . This redefines the precondition $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> \} $ as the postcondition $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> \} $ . This is shown to be logically sound with the assignment law in standard Hoare logic . Advancing to the next step , the variable update line assigning $ <nat:3> + <var:q> * <var:Q$ to $ <var:q>$ . This code advances $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> \} $ into $ \{ <var:Q> = <var:j> \land <var:q> = <nat:4> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> \} $ . This is given through the assignment inference rule obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:4> ; <var:q> := <var:q> * <var:Q> ; <var:q> := <nat:3> + <var:q> * <var:Q> ; <var:q> := <nat:1> + <var:q> * <var:Q> ; <var:q> := <nat:1> + <var:q> * <var:Q> ; <var:q> := <nat:1> + <var:q> * <var:Q> ; <var:q> := <nat:1> + <var:q> * <var:Q> ; <var:q> := <nat:3> + <var:q> * <var:Q> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:Q> = <var:j> }} <def:poly> {{ <var:q> = <nat:4> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:q> = <nat:4> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:q> = <nat:4> * <var:j> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:q> = <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:q> = <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:q> = <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:q> = <nat:4> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:j> /\ <var:q> = <nat:4> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 