\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:v> := <nat:1> ; <var:v> := <nat:3> + <var:v> * <var:a> ; <var:v> := <var:v> * <var:a> ; <var:v> := <nat:1> + <var:v> * <var:a> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:a> = <var:W> $ before interpreting the list of instructions , it follows that we have $ <var:v> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is demonstrated by standard Hoare techniques . Moving forward to the proceeding lines of codein our list of commands , we have \[ \begin{tabular} {rcl} \{ <var:a> = <var:W> \} & <var:v> := <nat:1> & \{ <var:a> = <var:W> \land <var:v> = <nat:1> \} \\ \{ <var:a> = <var:W> \land <var:v> = <nat:1> \} & <var:v> := <nat:3> + <var:v> * <var:a> & \{ <var:a> = <var:W> \land <var:v> = <nat:1> \cdot <var:W> + <nat:3> \} \\ \{ <var:a> = <var:W> \land <var:v> = <nat:1> \cdot <var:W> + <nat:3> \} & <var:v> := <var:v> * <var:a> & \{ <var:a> = <var:W> \land <var:v> = <nat:1> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + \} \\ \{ <var:a> = <var:W> \land <var:v> = <nat:1> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + \} & <var:v> := <nat:1> + <var:v> * <var:a& \{ <var:a> = <var:W> \land <var:v> = <nat:1> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> ^ <nat:2> + <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:v> := <nat:1> ; <var:v> := <nat:3> + <var:v> * <var:a> ; <var:v> := <var:v> * <var:a> ; <var:v> := <nat:1> + <var:v> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:a> = <var:W> }} <def:poly> {{ <var:v> = <nat:1> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:v> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:v> = <nat:1> * <var:W> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:v> = <nat:1> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:v> = <nat:1> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 