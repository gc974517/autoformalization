\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E1> := <var:W> ; <var:E2> := <var:E1> * <var:W> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:1> ; <var:E2> := <var:E2> * <nat:6> ; <var:t> := <var:E2> <var:t> := <var:t> + <var:E1> <var:t> := <var:t> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:W> = <var:U> $ ahead of running this code segment it follows that $ <var:t> = <nat:6> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:1> $ . \end{theorem} \begin{proof} The argument for our series of commands is shown by usual Hoare logic . Going to the next step , we have the environment update line binding $ <var:W> $ into $ <var:E1>$ . This transfers $ \{ <var:W> = <var:U> \} $ into $ \{ <var:W> = <var:U> \land <var:E1> = <var:U> \} $ . Following , we see the variable update line \verb | <var:E2> := <var:E1> * <var:W> ; | . This command redefines the condition $ \{ <var:W> = <var:U> \land <var:E1> = <var:U> \} $ to the condition $ \{ <var:W> = <var:U> \land <var:E1> = <var:U> \land <var:E2> = <var:U> ^ <nat:2> \} $ . This is guaranteed using the assignment scheme of usual Hoare logic . Going to the next step , the variable assignmet line \verb | <var:E0> := <nat:1> ; | . This moves the precondition $ \{ <var:W> = <var:U> \land <var:E1> = <var:U> \land <var:E2> = <var:U> ^ <nat:2> \} $ into the condition $ \{ <var:W> = <var:U> \land <var:E1> = <var:U> \land <var:E2> = <var:U> ^ <nat:2> \land <var:E0> = <nat:1> \} $ . This is shown to be logically sound by the assignment law found in usual Hoare reasoning . Honing in on the subsequent step in our code , the binding line \verb | <var:E1> := <var:E1> * <nat:1> ; | . This forwards the precondition $ \{ <var:W> = <var:U> \land <var:E1> = <var:U> \land <var:E2> = <var:U> ^ <nat:2> \land <var:E0> = <nat:1> \} $ to $ \{ <var:W> = <var:U> \land <var:E1> = <nat:1> \cdot <var:U> \land <var:E2> = <var:U> ^ <nat:2> \land <var:E0> = <nat:1> \} $ . Stepping forward , the variable update statement \verb | <var:E2> := <var:E2> * <nat:6> ; | . This statement advances the precondition $ \{ <var:W> = <var:U> \land <var:E1> = <nat:1> \cdot <var:U> \land <var:E2> = <var:U> ^ <nat:2> \land <var:E0> = <nat:1> \} $ as the postcondition $ \{ <var:W> = <var:U> \land <var:E1> = <nat:1> \cdot <var:U> \land <var:E2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:E0> = <nat:1> \} $ . Looking at the upcoming bit of code in our set of commands , we have the variable assignmet code \verb | <var:t> := <var:E2> | . This statement takes the condition $ \{ <var:W> = <var:U> \land <var:E1> = <nat:1> \cdot <var:U> \land <var:E2> = <nat:6> \cdot <var:U> ^ <nat:2> \land <var:E0> = <nat:1> \} $ as the condition $ \{ <var:W> = <var:U> \land <var:E1> = <nat:1> \cdot <var:U> \land <var:E0> = <nat:1> \land <var:t> = <nat:6> \cdot <var:U> ^ <nat:2> \} $ . This is known to be sound with the assignment law defined in standard Hoare logic . Moving on to the proceeding statement in the set of commands , the variable update line \verb | <var:t> := <var:t> + <var:E1> | . This forwards the precondition $ \{ <var:W> = <var:U> \land <var:E1> = <nat:1> \cdot <var:U> \land <var:E0> = <nat:1> \land <var:t> = <nat:6> \cdot <var:U> ^ <nat:2> \} $ toward $ \{ <var:W> = <var:U> \land <var:E0> = <nat:1> \land <var:t> = <nat:6> \cdot <var:U> ^ <nat:2> + <nat:1> \cdot <var:U> \} $ . Focusing on the subsequent bit of code found in our list of instructions , we see the variable assignmet statement \verb | <var:t> := <var:t> + <var:E0> | . This redefines the condition $ \{ <var:W> = <var:U> \land <var:E0> = <nat:1> \land <var:t> = <nat:6> \cdot <var:U> ^ <nat:2> + <nat:1> \cdot <var:U> \} $ as $ \{ <var:W> = <var:U> \land <var:t> = <nat:6> \cdot <var:U> ^ <nat:2> + <nat:1> \cdot <var:U> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E1> := <var:W> ; <var:E2> := <var:E1> * <var:W> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:1> ; <var:E2> := <var:E2> * <nat:6> ; <var:t> := <var:E2> <var:t> := <var:t> + <var:E1> <var:t> := <var:t> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:W> = <var:U> }} <def:poly> {{ <var:t> = <nat:6> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:E1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:E1> = <var:U> /\ <var:E2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:E1> = <var:U> /\ <var:E2> = <var:U> ^ <nat:2> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:E1> = <nat:1> * <var:U> /\ <var:E2> = <var:U> ^ <nat:2> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:E1> = <nat:1> * <var:U> /\ <var:E2> = <nat:6> * <var:U> ^ <nat:2> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:E1> = <nat:1> * <var:U> /\ <var:E0> = <nat:1> /\ <var:t> = <nat:6> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:E0> = <nat:1> /\ <var:t> = <nat:6> * <var:U> ^ <nat:2> + <nat:1> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:U> /\ <var:t> = <nat:6> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 