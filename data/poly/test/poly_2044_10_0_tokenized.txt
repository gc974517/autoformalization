\begin{document} \begin{theorem} Take the following program in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:3> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:C> ; <var:F3> := <nat:8> ; <var:F3> := <var:F3> * <var:C> ; <var:F3> := <var:F3> * <var:C> ; <var:F3> := <var:F3> * <var:C> ; <var:T> := <var:F3> ; <var:T> := <var:T> + <var:F1> ; <var:T> := <var:T> + <var:F0> \end{verbatim} Assuming for some positive integer coefficients $ <var:W> $ that $ <var:C> = <var:W> $ ahead of evaluating our program it follows that we have $ <var:T> = <nat:8> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the code segment is shown using usual Hoare techniques . Taking a look at the upcoming statement contained in the list of commands , we have the assignment statement giving $ <nat:3> $ toward $ <var:F0>$ . This line moves the precondition $ \{ <var:C> = <var:W> \} $ into $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \} $ . Honing in on the proceeding piece of code found in our series of instructions , we see the variable update code giving $ <nat:3> $ into $ <var:F1>$ . This command redefines the precondition $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \} $ as the postcondition $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \} $ . This is shown to be logically sound by the assignment scheme given in typical Hoare techniques . Following , we have the code giving $ <var:F1> * <var:C> $ as $ <var:F1>$ . This statement moves the condition $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \} $ toward the condition $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \times <var:W> \} $ . Looking at the upcoming line contained in our series of commands , we have the variable assignmet command \verb | <var:F3> := <nat:8> ; | . This line redefines $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \times <var:W> \} $ to $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \times <var:W> \land <var:F3> = <nat:8> \} $ . Honing in on the proceeding piece of code contained in our list of commands , the assignment code \verb | <var:F3> := <var:F3> * <var:C> ; | . This advances the precondition $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \times <var:W> \land <var:F3> = <nat:8> \} $ into the postcondition $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \times <var:W> \land <var:F3> = <nat:8> \times <var:W> \} $ . Further , the variable assignmet line \verb | <var:F3> := <var:F3> * <var:C> ; | . This advances the precondition $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \times <var:W> \land <var:F3> = <nat:8> \times <var:W> \} $ into $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \times <var:W> \land <var:F3> = <nat:8> \times <var:W> ^ <nat:2> \} $ . This is given by the assignment inference rule obtained from standard Hoare techniques . Further , the binding command assigning $ <var:F3> * <var:C> $ to $ <var:F3>$ . This forwards the precondition $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \times <var:W> \land <var:F3> = <nat:8> \times <var:W> ^ <nat:2> \} $ into the postcondition $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \times <var:W> \land <var:F3> = <nat:8> \times <var:W> ^ <nat:3> \} $ . This is shown by the assignment law in Hoare logic . Immediately following , we see the variable binding code \verb | <var:T> := <var:F3> ; | . This command transfers the condition $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \times <var:W> \land <var:F3> = <nat:8> \times <var:W> ^ <nat:3> \} $ as $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \times <var:W> \land <var:T> = <nat:8> \times <var:W> ^ <nat:3> \} $ . Moving forward , we have the binding code \verb | <var:T> := <var:T> + <var:F1> ; | . This line forwards $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:F1> = <nat:3> \times <var:W> \land <var:T> = <nat:8> \times <var:W> ^ <nat:3> \} $ to the postcondition $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:T> = <nat:8> \times <var:W> ^ <nat:3> + <nat:3> \times <var:W> \} $ . Taking a look at the proceeding bit of code in our list of commands , we have the variable update command binding $ <var:T> + <var:F0$ toward $ <var:T>$ . This forwards the precondition $ \{ <var:C> = <var:W> \land <var:F0> = <nat:3> \land <var:T> = <nat:8> \times <var:W> ^ <nat:3> + <nat:3> \times <var:W> \} $ as the condition $ \{ <var:C> = <var:W> \land <var:T> = <nat:8> \times <var:W> ^ <nat:3> + <nat:3> \times <var:W> + <nat:3> \} $ . This is guaranteed through the assignment scheme of standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F3> : string := " <var:F3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:C> = <var:W> }} <var:F0> := <nat:3> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:C> ; <var:F3> := <nat:8> ; <var:F3> := <var:F3> * <var:C> ; <var:F3> := <var:F3> * <var:C> ; <var:F3> := <var:F3> * <var:C> ; <var:T> := <var:F3> ; <var:T> := <var:T> + <var:F1> ; <var:T> := <var:T> + <var:F0> {{ <var:T> = <nat:8> * <var:W> ^ <nat:3> + <nat:3> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:3> * <var:W> /\ <var:F3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:3> * <var:W> /\ <var:F3> = <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:3> * <var:W> /\ <var:F3> = <nat:8> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:3> * <var:W> /\ <var:F3> = <nat:8> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:3> * <var:W> /\ <var:T> = <nat:8> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:F0> = <nat:3> /\ <var:T> = <nat:8> * <var:W> ^ <nat:3> + <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:W> /\ <var:T> = <nat:8> * <var:W> ^ <nat:3> + <nat:3> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 