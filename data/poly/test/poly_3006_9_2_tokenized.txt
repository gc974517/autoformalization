\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:a> := <nat:1> ; <var:a> := <nat:1> + <var:a> * <var:Y> ; <var:a> := <nat:4> + <var:a> * <var:Y> ; <var:a> := <nat:2> + <var:a> * <var:Y> ; <var:a> := <var:a> * <var:Y> ; <var:a> := <var:a> * <var:Y> ; <var:a> := <nat:1> + <var:a> * <var:Y> ; <var:a> := <nat:4> + <var:a> * <var:Y> ; <var:a> := <nat:1> + <var:a> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:Y> = <var:N> $ prior to the evaluation of this code it must be that we have $ <var:a> = <nat:1> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> $ when list of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:N> \} \\ <var:a> := <nat:1> ; \\ \{ <var:Y> = <var:N> \land <var:a> = <nat:1> \} \\ <var:a> := <nat:1> + <var:a> * <var:Y> ; \\ \{ <var:Y> = <var:N> \land <var:a> = <nat:1> \times <var:N> + <nat:1> \} \\ <var:a> := <nat:4> + <var:a> * <var:Y> ; \\ \{ <var:Y> = <var:N> \land <var:a> = <nat:1> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:4> \} \\ <var:a> := <nat:2> + <var:a> * <var:Y> ; \\ \{ <var:Y> = <var:N> \land <var:a> = <nat:1> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> + <nat:2> \} \\ <var:a> := <var:a> * <var:Y> ; \\ \{ <var:Y> = <var:N> \land <var:a> = <nat:1> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + \} \\ <var:a> := <var:a> * <var:Y> ; \\ \{ <var:Y> = <var:N> \land <var:a> = <nat:1> \times <var:N> ^ <nat:5> + <nat:1> \times <var:N> ^ <nat:4> + <nat:4> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + \} \\ <var:a> := <nat:1> + <var:a> * <var:Y> ; \\ \{ <var:Y> = <var:N> \land <var:a> = <nat:1> \times <var:N> ^ <nat:6> + <nat:1> \times <var:N> ^ <nat:5> + <nat:4> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:1> \} \\ <var:a> := <nat:4> + <var:a> * <var:Y> ; \\ \{ <var:Y> = <var:N> \land <var:a> = <nat:1> \times <var:N> ^ <nat:7> + <nat:1> \times <var:N> ^ <nat:6> + <nat:4> \times <var:N> ^ <nat:5> + <nat:2> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> + <nat:4> \} \\ <var:a> := <nat:1> + <var:a> * <var:Y> \\ \{ <var:Y> = <var:N> \land <var:a> = <nat:1> \times <var:N> ^ <nat:8> + <nat:1> \times <var:N> ^ <nat:7> + <nat:4> \times <var:N> ^ <nat:6> + <nat:2> \times <var:N> ^ <nat:5> + <nat:1> \times <var:N> ^ <nat:2> + <nat:4> \times <var:N> + <nat:1> \} \end{eqnarray} Applying standard Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:a> := <nat:1> ; <var:a> := <nat:1> + <var:a> * <var:Y> ; <var:a> := <nat:4> + <var:a> * <var:Y> ; <var:a> := <nat:2> + <var:a> * <var:Y> ; <var:a> := <var:a> * <var:Y> ; <var:a> := <var:a> * <var:Y> ; <var:a> := <nat:1> + <var:a> * <var:Y> ; <var:a> := <nat:4> + <var:a> * <var:Y> ; <var:a> := <nat:1> + <var:a> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Y> = <var:N> }} <def:poly> {{ <var:a> = <nat:1> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:a> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:a> = <nat:1> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 