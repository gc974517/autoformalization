\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n> := <nat:1> ; <var:n> := <nat:3> + <var:n> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:X> = <var:q> $ --- given all $ <var:q> $ --- prior to the evaluation of our list of commands it must be that we see $ <var:n> = <nat:1> * <var:q> + <nat:3> $ after series of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:q> \} \\ <var:n> := <nat:1> ; \\ \{ <var:X> = <var:q> \land <var:n> = <nat:1> \} \\ <var:n> := <nat:3> + <var:n> * <var:X> \\ \{ <var:X> = <var:q> \land <var:n> = <nat:1> * <var:q> + <nat:3> \} \end{eqnarray} Utilizing Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:n> := <nat:1> ; <var:n> := <nat:3> + <var:n> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:X> = <var:q> }} <def:poly> {{ <var:n> = <nat:1> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:q> /\ <var:n> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:q> /\ <var:n> = <nat:1> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 