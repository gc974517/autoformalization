\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:8> ; <var:z> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:f> = <var:X> $ before executing the set of commands it follows that $ <var:z> = <nat:8> $ once set of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:X> \} \\ <var:G0> := <nat:8> ; \\ \{ <var:f> = <var:X> \land <var:G0> = <nat:8> \} \\ <var:z> := <var:G0> \\ \{ <var:f> = <var:X> \land <var:z> = <nat:8> \} \end{eqnarray} The application of standard Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:8> ; <var:z> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:f> = <var:X> }} <def:poly> {{ <var:z> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:z> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 