\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:s1> := <var:m> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:4> ; <var:D> := <var:s1> <var:D> := <var:D> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:m> = <var:g> $ ahead of the evaluation of this series of instructions it follows that we see $ <var:D> = <nat:4> * <var:g> + <nat:4> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques gives us : \begin{eqnarray} \{ <var:m> = <var:g> \} \\ <var:s1> := <var:m> ; \\ \{ <var:m> = <var:g> \land <var:s1> = <var:g> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:m> = <var:g> \land <var:s1> = <var:g> \land <var:s0> = <nat:4> \} \\ <var:s1> := <var:s1> * <nat:4> ; \\ \{ <var:m> = <var:g> \land <var:s1> = <nat:4> \times <var:g> \land <var:s0> = <nat:4> \} \\ <var:D> := <var:s1> \\ \{ <var:m> = <var:g> \land <var:s0> = <nat:4> \land <var:D> = <nat:4> \times <var:g> \} \\ <var:D> := <var:D> + <var:s0> \\ \{ <var:m> = <var:g> \land <var:D> = <nat:4> \times <var:g> + <nat:4> \} \end{eqnarray} Thusly , the program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s1> := <var:m> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:4> ; <var:D> := <var:s1> <var:D> := <var:D> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:m> = <var:g> }} <def:poly> {{ <var:D> = <nat:4> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:s1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:s1> = <var:g> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:s1> = <nat:4> * <var:g> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:s0> = <nat:4> /\ <var:D> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:D> = <nat:4> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 