\begin{document} \begin{theorem} Take the following series of instructions such that \begin{verbatim} <var:K> := <nat:3> ; <var:K> := <var:K> * <var:D> ; <var:K> := <nat:2> + <var:K> * <var:D> \end{verbatim} Given $ <var:D> = <var:k> $ ahead of the evaluation of this code it holds that $ <var:K> = <nat:3> \cdot <var:k> ^ <nat:2> + <nat:2> $ when set of commands has exited . \end{theorem} \begin{proof} Proving correctness for this segment of code can be given with standard Hoare logic . Moving on , the binding statement \verb | <var:K> := <nat:3> ; | . This command moves the condition $ \{ <var:D> = <var:k> \} $ toward $ \{ <var:D> = <var:k> \land <var:K> = <nat:3> \} $ . Further , the binding code \verb | <var:K> := <var:K> * <var:D> ; | . This redefines the precondition $ \{ <var:D> = <var:k> \land <var:K> = <nat:3> \} $ as the condition $ \{ <var:D> = <var:k> \land <var:K> = <nat:3> \times <var:k> + \} $ . Advancing on , we have the binding statement \verb | <var:K> := <nat:2> + <var:K> * <var:D> | . This statement forwards the condition $ \{ <var:D> = <var:k> \land <var:K> = <nat:3> \times <var:k> + \} $ to the postcondition $ \{ <var:D> = <var:k> \land <var:K> = <nat:3> \times <var:k> ^ <nat:2> + <nat:2> \} $ . This is given through the assignment scheme defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:D> = <var:k> }} <var:K> := <nat:3> ; <var:K> := <var:K> * <var:D> ; <var:K> := <nat:2> + <var:K> * <var:D> {{ <var:K> = <nat:3> * <var:k> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:K> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:K> = <nat:3> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:k> /\ <var:K> = <nat:3> * <var:k> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 