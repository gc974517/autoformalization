\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:1> ; <var:J> := <var:m0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> . Given that $ <var:w> = <var:o> $ before evaluating our program , it holds that we have $ <var:J> = <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of our code segment can be given by usual Hoare logic . Paying attention to the proceeding pieces of code seen in our series of instructions , we see \begin{eqnarray} \{ <var:w> = <var:o> \} \, <var:m0> := <nat:1> \, \{ <var:w> = <var:o> \land <var:m0> = <nat:1> \} \\ \{ <var:w> = <var:o> \land <var:m0> = <nat:1> \} \, <var:J> := <var:m0\, \{ <var:w> = <var:o> \land <var:J> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <def:poly> := <var:m0> := <nat:1> ; <var:J> := <var:m0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:w> = <var:o> }} <def:poly> {{ <var:J> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:o> /\ <var:J> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 