\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:1> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:l> ; <var:V> := <var:F1> ; <var:V> := <var:V> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> in \emph{Imp} . Allowing that $ <var:l> = <var:i> $ ahead of running our program then we see $ <var:V> = <nat:3> \times <var:i> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this code is clear through standard Hoare logic . Moving forward to the upcoming piece of code found in our set of instructions , we see the variable assignmet command yielding $ <nat:1> $ toward $ <var:F0>$ . This redefines the precondition $ \{ <var:l> = <var:i> \} $ to $ \{ <var:l> = <var:i> \land <var:F0> = <nat:1> \} $ . Moving on to the next step , the line \verb | <var:F1> := <nat:3> ; | . This statement takes the precondition $ \{ <var:l> = <var:i> \land <var:F0> = <nat:1> \} $ into the postcondition $ \{ <var:l> = <var:i> \land <var:F0> = <nat:1> \land <var:F1> = <nat:3> \} $ . This is guaranteed through the assignment scheme found in standard Hoare logic . Jumping to the proceeding line of code contained in our list of commands , we see the environment update statement \verb | <var:F1> := <var:F1> * <var:l> ; | . This transfers the precondition $ \{ <var:l> = <var:i> \land <var:F0> = <nat:1> \land <var:F1> = <nat:3> \} $ as $ \{ <var:l> = <var:i> \land <var:F0> = <nat:1> \land <var:F1> = <nat:3> * <var:i> \} $ . Advancing to the upcoming statement found in our set of instructions , we have the variable binding line yielding $ <var:F1> $ to $ <var:V>$ . This moves $ \{ <var:l> = <var:i> \land <var:F0> = <nat:1> \land <var:F1> = <nat:3> * <var:i> \} $ into the condition $ \{ <var:l> = <var:i> \land <var:F0> = <nat:1> \land <var:V> = <nat:3> * <var:i> \} $ . This is guaranteed with the assignment rule defined by usual Hoare reasoning . Paying attention to the proceeding line in our code segment , the variable update statement giving $ <var:V> + <var:F0$ to $ <var:V>$ . This line redefines the precondition $ \{ <var:l> = <var:i> \land <var:F0> = <nat:1> \land <var:V> = <nat:3> * <var:i> \} $ as the postcondition $ \{ <var:l> = <var:i> \land <var:V> = <nat:3> * <var:i> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:1> ; <var:F1> := <nat:3> ; <var:F1> := <var:F1> * <var:l> ; <var:V> := <var:F1> ; <var:V> := <var:V> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:l> = <var:i> }} <def:poly> {{ <var:V> = <nat:3> * <var:i> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:F0> = <nat:1> /\ <var:F1> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:F0> = <nat:1> /\ <var:V> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:i> /\ <var:V> = <nat:3> * <var:i> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 