\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:8> ; <var:Q2> := <nat:1> ; <var:Q2> := <var:Q2> * <var:b> ; <var:Q2> := <var:Q2> * <var:b> ; <var:p> := <var:Q2> ; <var:p> := <var:p> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:b> = <var:E> $ prior to running this code segment then we see $ <var:p> = <nat:1> * <var:E> ^ <nat:2> + <nat:8> $ after list of commands has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:E> \} \\ <var:Q0> := <nat:8> ; \\ \{ <var:b> = <var:E> \land <var:Q0> = <nat:8> \} \\ <var:Q2> := <nat:1> ; \\ \{ <var:b> = <var:E> \land <var:Q0> = <nat:8> \land <var:Q2> = <nat:1> \} \\ <var:Q2> := <var:Q2> * <var:b> ; \\ \{ <var:b> = <var:E> \land <var:Q0> = <nat:8> \land <var:Q2> = <nat:1> \times <var:E> \} \\ <var:Q2> := <var:Q2> * <var:b> ; \\ \{ <var:b> = <var:E> \land <var:Q0> = <nat:8> \land <var:Q2> = <nat:1> \times <var:E> ^ <nat:2> \} \\ <var:p> := <var:Q2> ; \\ \{ <var:b> = <var:E> \land <var:Q0> = <nat:8> \land <var:p> = <nat:1> \times <var:E> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:Q0> \\ \{ <var:b> = <var:E> \land <var:p> = <nat:1> \times <var:E> ^ <nat:2> + <nat:8> \} \end{eqnarray} Utilizing typical Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <def:poly> := <var:Q0> := <nat:8> ; <var:Q2> := <nat:1> ; <var:Q2> := <var:Q2> * <var:b> ; <var:Q2> := <var:Q2> * <var:b> ; <var:p> := <var:Q2> ; <var:p> := <var:p> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:b> = <var:E> }} <def:poly> {{ <var:p> = <nat:1> * <var:E> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:Q0> = <nat:8> /\ <var:Q2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:Q0> = <nat:8> /\ <var:Q2> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:Q0> = <nat:8> /\ <var:Q2> = <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:Q0> = <nat:8> /\ <var:p> = <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:E> /\ <var:p> = <nat:1> * <var:E> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 