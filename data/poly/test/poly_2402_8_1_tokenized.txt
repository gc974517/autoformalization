\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:O1> := <var:c> ; <var:O2> := <var:O1> * <var:c> ; <var:O0> := <nat:8> ; <var:O1> := <var:O1> * <nat:6> ; <var:O2> := <var:O2> * <nat:2> ; <var:n> := <var:O2> <var:n> := <var:n> + <var:O1> <var:n> := <var:n> + <var:O0> \end{verbatim} Allow it to hold that $ <var:c> = <var:x> $ before evaluating this list of instructions then $ <var:n> = <nat:2> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for our code is accomplished by this decorated set of commands . \begin{eqnarray} \{ <var:c> = <var:x> \} \\ <var:O1> := <var:c> ; \\ \{ <var:c> = <var:x> \land <var:O1> = <var:x> \} \\ <var:O2> := <var:O1> * <var:c> ; \\ \{ <var:c> = <var:x> \land <var:O1> = <var:x> \land <var:O2> = <var:x> ^ <nat:2> \} \\ <var:O0> := <nat:8> ; \\ \{ <var:c> = <var:x> \land <var:O1> = <var:x> \land <var:O2> = <var:x> ^ <nat:2> \land <var:O0> = <nat:8> \} \\ <var:O1> := <var:O1> * <nat:6> ; \\ \{ <var:c> = <var:x> \land <var:O1> = <nat:6> * <var:x> \land <var:O2> = <var:x> ^ <nat:2> \land <var:O0> = <nat:8> \} \\ <var:O2> := <var:O2> * <nat:2> ; \\ \{ <var:c> = <var:x> \land <var:O1> = <nat:6> * <var:x> \land <var:O2> = <nat:2> * <var:x> ^ <nat:2> \land <var:O0> = <nat:8> \} \\ <var:n> := <var:O2> \\ \{ <var:c> = <var:x> \land <var:O1> = <nat:6> * <var:x> \land <var:O0> = <nat:8> \land <var:n> = <nat:2> * <var:x> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:O1> \\ \{ <var:c> = <var:x> \land <var:O0> = <nat:8> \land <var:n> = <nat:2> * <var:x> ^ <nat:2> + <nat:6> * <var:x> \} \\ <var:n> := <var:n> + <var:O0> \\ \{ <var:c> = <var:x> \land <var:n> = <nat:2> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:8> \} \end{eqnarray} Using standard Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:c> = <var:x> }} <var:O1> := <var:c> ; <var:O2> := <var:O1> * <var:c> ; <var:O0> := <nat:8> ; <var:O1> := <var:O1> * <nat:6> ; <var:O2> := <var:O2> * <nat:2> ; <var:n> := <var:O2> <var:n> := <var:n> + <var:O1> <var:n> := <var:n> + <var:O0> {{ <var:n> = <nat:2> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:O1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:O1> = <var:x> /\ <var:O2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:O1> = <var:x> /\ <var:O2> = <var:x> ^ <nat:2> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:O1> = <nat:6> * <var:x> /\ <var:O2> = <var:x> ^ <nat:2> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:O1> = <nat:6> * <var:x> /\ <var:O2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:O1> = <nat:6> * <var:x> /\ <var:O0> = <nat:8> /\ <var:n> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:O0> = <nat:8> /\ <var:n> = <nat:2> * <var:x> ^ <nat:2> + <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:n> = <nat:2> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 