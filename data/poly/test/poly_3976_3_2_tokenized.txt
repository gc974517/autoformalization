\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W> := <nat:2> ; <var:W> := <nat:1> + <var:W> * <var:o> ; <var:W> := <nat:1> + <var:W> * <var:o> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:o> = <var:G> $ ahead of executing our program it follows that we have $ <var:W> = <nat:2> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:1> $ when list of commands finishes . \end{theorem} \begin{proof} The course of logic for our series of commands can be given through usual Hoare techniques . Advancing to the proceeding bit of code found in our segment of code , we have the assignment command assigning $ <nat:2> $ to $ <var:W>$ . This transfers the condition $ \{ <var:o> = <var:G> \} $ into the postcondition $ \{ <var:o> = <var:G> \land <var:W> = <nat:2> \} $ . This is known to be sound using the assignment rule from typical Hoare reasoning . Going to the next step , the variable binding line \verb | <var:W> := <nat:1> + <var:W> * <var:o> ; | . This statement moves the precondition $ \{ <var:o> = <var:G> \land <var:W> = <nat:2> \} $ to the postcondition $ \{ <var:o> = <var:G> \land <var:W> = <nat:2> \cdot <var:G> + <nat:1> \} $ . This is shown to be logically sound through the assignment scheme obtained from Hoare techniques . Further , we have the variable update command \verb | <var:W> := <nat:1> + <var:W> * <var:o> | . This moves the precondition $ \{ <var:o> = <var:G> \land <var:W> = <nat:2> \cdot <var:G> + <nat:1> \} $ toward the postcondition $ \{ <var:o> = <var:G> \land <var:W> = <nat:2> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:2> ; <var:W> := <nat:1> + <var:W> * <var:o> ; <var:W> := <nat:1> + <var:W> * <var:o> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:o> = <var:G> }} <def:poly> {{ <var:W> = <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:W> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:W> = <nat:2> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:G> /\ <var:W> = <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 