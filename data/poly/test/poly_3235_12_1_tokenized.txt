\begin{document} \begin{theorem} We define a code segment as \begin{verbatim} <var:W1> := <var:Z> ; <var:W2> := <var:W1> * <var:Z> ; <var:W3> := <var:W2> * <var:Z> ; <var:W4> := <var:W3> * <var:Z> ; <var:W0> := <nat:9> ; <var:W2> := <var:W2> * <nat:5> ; <var:W3> := <var:W3> * <nat:1> ; <var:W4> := <var:W4> * <nat:6> ; <var:u> := <var:W4> <var:u> := <var:u> + <var:W3> <var:u> := <var:u> + <var:W2> <var:u> := <var:u> + <var:W0> \end{verbatim} Assuming $ <var:Z> = <var:P> $ --- given any positive integer coefficients $ <var:P> $ --- ahead of interpreting our list of commands , it holds that $ <var:u> = <nat:6> \cdot <var:P> ^ <nat:4> + <nat:1> \cdot <var:P> ^ <nat:3> + <nat:5> \cdot <var:P> ^ <nat:2> + <nat:9> $ once list of instructions is done executing . \end{theorem} \begin{proof} Notice the below decorated code segment . \begin{eqnarray} \{ <var:Z> = <var:P> \} \\ <var:W1> := <var:Z> ; \\ \{ <var:Z> = <var:P> \land <var:W1> = <var:P> \} \\ <var:W2> := <var:W1> * <var:Z> ; \\ \{ <var:Z> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <var:P> ^ <nat:2> \} \\ <var:W3> := <var:W2> * <var:Z> ; \\ \{ <var:Z> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \} \\ <var:W4> := <var:W3> * <var:Z> ; \\ \{ <var:Z> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \} \\ <var:W0> := <nat:9> ; \\ \{ <var:Z> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \land <var:W0> = <nat:9> \} \\ <var:W2> := <var:W2> * <nat:5> ; \\ \{ <var:Z> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <nat:5> * <var:P> ^ <nat:2> \land <var:W3> = <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \land <var:W0> = <nat:9> \} \\ <var:W3> := <var:W3> * <nat:1> ; \\ \{ <var:Z> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <nat:5> * <var:P> ^ <nat:2> \land <var:W3> = <nat:1> * <var:P> ^ <nat:3> \land <var:W4> = <var:P> ^ <nat:4> \land <var:W0> = <nat:9> \} \\ <var:W4> := <var:W4> * <nat:6> ; \\ \{ <var:Z> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <nat:5> * <var:P> ^ <nat:2> \land <var:W3> = <nat:1> * <var:P> ^ <nat:3> \land <var:W4> = <nat:6> * <var:P> ^ <nat:4> \land <var:W0> = <nat:9> \} \\ <var:u> := <var:W4> \\ \{ <var:Z> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <nat:5> * <var:P> ^ <nat:2> \land <var:W3> = <nat:1> * <var:P> ^ <nat:3> \land <var:W0> = <nat:9> \land <var:u> = <nat:6> * <var:P> ^ <nat:4> \} \\ <var:u> := <var:u> + <var:W3> \\ \{ <var:Z> = <var:P> \land <var:W1> = <var:P> \land <var:W2> = <nat:5> * <var:P> ^ <nat:2> \land <var:W0> = <nat:9> \land <var:u> = <nat:6> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:W2> \\ \{ <var:Z> = <var:P> \land <var:W1> = <var:P> \land <var:W0> = <nat:9> \land <var:u> = <nat:6> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:5> * <var:P> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:W0> \\ \{ <var:Z> = <var:P> \land <var:u> = <nat:6> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:5> * <var:P> ^ <nat:2> + <nat:9> \} \end{eqnarray} Applying standard Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <var:W4> : string := " <var:W4> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:Z> = <var:P> }} <var:W1> := <var:Z> ; <var:W2> := <var:W1> * <var:Z> ; <var:W3> := <var:W2> * <var:Z> ; <var:W4> := <var:W3> * <var:Z> ; <var:W0> := <nat:9> ; <var:W2> := <var:W2> * <nat:5> ; <var:W3> := <var:W3> * <nat:1> ; <var:W4> := <var:W4> * <nat:6> ; <var:u> := <var:W4> <var:u> := <var:u> + <var:W3> <var:u> := <var:u> + <var:W2> <var:u> := <var:u> + <var:W0> {{ <var:u> = <nat:6> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:5> * <var:P> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:W1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:W1> = <var:P> /\ <var:W2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:W1> = <var:P> /\ <var:W2> = <var:P> ^ <nat:2> /\ <var:W3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:W1> = <var:P> /\ <var:W2> = <var:P> ^ <nat:2> /\ <var:W3> = <var:P> ^ <nat:3> /\ <var:W4> = <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:W1> = <var:P> /\ <var:W2> = <var:P> ^ <nat:2> /\ <var:W3> = <var:P> ^ <nat:3> /\ <var:W4> = <var:P> ^ <nat:4> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:W1> = <var:P> /\ <var:W2> = <nat:5> * <var:P> ^ <nat:2> /\ <var:W3> = <var:P> ^ <nat:3> /\ <var:W4> = <var:P> ^ <nat:4> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:W1> = <var:P> /\ <var:W2> = <nat:5> * <var:P> ^ <nat:2> /\ <var:W3> = <nat:1> * <var:P> ^ <nat:3> /\ <var:W4> = <var:P> ^ <nat:4> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:W1> = <var:P> /\ <var:W2> = <nat:5> * <var:P> ^ <nat:2> /\ <var:W3> = <nat:1> * <var:P> ^ <nat:3> /\ <var:W4> = <nat:6> * <var:P> ^ <nat:4> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:W1> = <var:P> /\ <var:W2> = <nat:5> * <var:P> ^ <nat:2> /\ <var:W3> = <nat:1> * <var:P> ^ <nat:3> /\ <var:W0> = <nat:9> /\ <var:u> = <nat:6> * <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:W1> = <var:P> /\ <var:W2> = <nat:5> * <var:P> ^ <nat:2> /\ <var:W0> = <nat:9> /\ <var:u> = <nat:6> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:W1> = <var:P> /\ <var:W0> = <nat:9> /\ <var:u> = <nat:6> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:5> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:u> = <nat:6> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:5> * <var:P> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 