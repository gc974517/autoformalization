\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:4> ; <var:k1> := <nat:9> ; <var:k1> := <var:k1> * <var:x> ; <var:k2> := <nat:4> ; <var:k2> := <var:k2> * <var:x> ; <var:k2> := <var:k2> * <var:x> ; <var:Y> := <var:k2> ; <var:Y> := <var:Y> + <var:k1> ; <var:Y> := <var:Y> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Given $ <var:x> = <var:V> $ --- taking positive coefficients $ <var:V> $ --- prior to interpreting the list of instructions it must be that we see $ <var:Y> = <nat:4> \times <var:V> ^ <nat:2> + <nat:9> \times <var:V> + <nat:4> $ once code segment is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:V> \} \\ <var:k0> := <nat:4> ; \\ \{ <var:x> = <var:V> \land <var:k0> = <nat:4> \} \\ <var:k1> := <nat:9> ; \\ \{ <var:x> = <var:V> \land <var:k0> = <nat:4> \land <var:k1> = <nat:9> \} \\ <var:k1> := <var:k1> * <var:x> ; \\ \{ <var:x> = <var:V> \land <var:k0> = <nat:4> \land <var:k1> = <nat:9> * <var:V> \} \\ <var:k2> := <nat:4> ; \\ \{ <var:x> = <var:V> \land <var:k0> = <nat:4> \land <var:k1> = <nat:9> * <var:V> \land <var:k2> = <nat:4> \} \\ <var:k2> := <var:k2> * <var:x> ; \\ \{ <var:x> = <var:V> \land <var:k0> = <nat:4> \land <var:k1> = <nat:9> * <var:V> \land <var:k2> = <nat:4> * <var:V> \} \\ <var:k2> := <var:k2> * <var:x> ; \\ \{ <var:x> = <var:V> \land <var:k0> = <nat:4> \land <var:k1> = <nat:9> * <var:V> \land <var:k2> = <nat:4> * <var:V> ^ <nat:2> \} \\ <var:Y> := <var:k2> ; \\ \{ <var:x> = <var:V> \land <var:k0> = <nat:4> \land <var:k1> = <nat:9> * <var:V> \land <var:Y> = <nat:4> * <var:V> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:k1> ; \\ \{ <var:x> = <var:V> \land <var:k0> = <nat:4> \land <var:Y> = <nat:4> * <var:V> ^ <nat:2> + <nat:9> * <var:V> \} \\ <var:Y> := <var:Y> + <var:k0> \\ \{ <var:x> = <var:V> \land <var:Y> = <nat:4> * <var:V> ^ <nat:2> + <nat:9> * <var:V> + <nat:4> \} \end{eqnarray} Using usual Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <def:poly> := <var:k0> := <nat:4> ; <var:k1> := <nat:9> ; <var:k1> := <var:k1> * <var:x> ; <var:k2> := <nat:4> ; <var:k2> := <var:k2> * <var:x> ; <var:k2> := <var:k2> * <var:x> ; <var:Y> := <var:k2> ; <var:Y> := <var:Y> + <var:k1> ; <var:Y> := <var:Y> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:x> = <var:V> }} <def:poly> {{ <var:Y> = <nat:4> * <var:V> ^ <nat:2> + <nat:9> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:9> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:9> * <var:V> /\ <var:k2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:9> * <var:V> /\ <var:k2> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:9> * <var:V> /\ <var:k2> = <nat:4> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:k0> = <nat:4> /\ <var:k1> = <nat:9> * <var:V> /\ <var:Y> = <nat:4> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:k0> = <nat:4> /\ <var:Y> = <nat:4> * <var:V> ^ <nat:2> + <nat:9> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:V> /\ <var:Y> = <nat:4> * <var:V> ^ <nat:2> + <nat:9> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 