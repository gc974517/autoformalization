\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:7> ; <var:j1> := <nat:5> ; <var:j1> := <var:j1> * <var:V> ; <var:j2> := <nat:9> ; <var:j2> := <var:j2> * <var:V> ; <var:j2> := <var:j2> * <var:V> ; <var:j3> := <nat:4> ; <var:j3> := <var:j3> * <var:V> ; <var:j3> := <var:j3> * <var:V> ; <var:j3> := <var:j3> * <var:V> ; <var:z> := <var:j3> ; <var:z> := <var:z> + <var:j2> ; <var:z> := <var:z> + <var:j1> ; <var:z> := <var:z> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:V> = <var:a> $ prior to the evaluation of our series of instructions it holds that $ <var:z> = <nat:4> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:a> \} \\ <var:j0> := <nat:7> ; \\ \{ <var:V> = <var:a> \land <var:j0> = <nat:7> \} \\ <var:j1> := <nat:5> ; \\ \{ <var:V> = <var:a> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \} \\ <var:j1> := <var:j1> * <var:V> ; \\ \{ <var:V> = <var:a> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \cdot <var:a> \} \\ <var:j2> := <nat:9> ; \\ \{ <var:V> = <var:a> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \cdot <var:a> \land <var:j2> = <nat:9> \} \\ <var:j2> := <var:j2> * <var:V> ; \\ \{ <var:V> = <var:a> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \cdot <var:a> \land <var:j2> = <nat:9> \cdot <var:a> \} \\ <var:j2> := <var:j2> * <var:V> ; \\ \{ <var:V> = <var:a> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \cdot <var:a> \land <var:j2> = <nat:9> \cdot <var:a> ^ <nat:2> \} \\ <var:j3> := <nat:4> ; \\ \{ <var:V> = <var:a> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \cdot <var:a> \land <var:j2> = <nat:9> \cdot <var:a> ^ <nat:2> \land <var:j3> = <nat:4> \} \\ <var:j3> := <var:j3> * <var:V> ; \\ \{ <var:V> = <var:a> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \cdot <var:a> \land <var:j2> = <nat:9> \cdot <var:a> ^ <nat:2> \land <var:j3> = <nat:4> \cdot <var:a> \} \\ <var:j3> := <var:j3> * <var:V> ; \\ \{ <var:V> = <var:a> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \cdot <var:a> \land <var:j2> = <nat:9> \cdot <var:a> ^ <nat:2> \land <var:j3> = <nat:4> \cdot <var:a> ^ <nat:2> \} \\ <var:j3> := <var:j3> * <var:V> ; \\ \{ <var:V> = <var:a> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \cdot <var:a> \land <var:j2> = <nat:9> \cdot <var:a> ^ <nat:2> \land <var:j3> = <nat:4> \cdot <var:a> ^ <nat:3> \} \\ <var:z> := <var:j3> ; \\ \{ <var:V> = <var:a> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \cdot <var:a> \land <var:j2> = <nat:9> \cdot <var:a> ^ <nat:2> \land <var:z> = <nat:4> \cdot <var:a> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:j2> ; \\ \{ <var:V> = <var:a> \land <var:j0> = <nat:7> \land <var:j1> = <nat:5> \cdot <var:a> \land <var:z> = <nat:4> \cdot <var:a> ^ <nat:3> + <nat:9> \cdot <var:a> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:j1> ; \\ \{ <var:V> = <var:a> \land <var:j0> = <nat:7> \land <var:z> = <nat:4> \cdot <var:a> ^ <nat:3> + <nat:9> \cdot <var:a> ^ <nat:2> + <nat:5> \cdot <var:a> \} \\ <var:z> := <var:z> + <var:j0> \\ \{ <var:V> = <var:a> \land <var:z> = <nat:4> \cdot <var:a> ^ <nat:3> + <nat:9> \cdot <var:a> ^ <nat:2> + <nat:5> \cdot <var:a> + <nat:7> \} \end{eqnarray} The application of usual Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <def:poly> := <var:j0> := <nat:7> ; <var:j1> := <nat:5> ; <var:j1> := <var:j1> * <var:V> ; <var:j2> := <nat:9> ; <var:j2> := <var:j2> * <var:V> ; <var:j2> := <var:j2> * <var:V> ; <var:j3> := <nat:4> ; <var:j3> := <var:j3> * <var:V> ; <var:j3> := <var:j3> * <var:V> ; <var:j3> := <var:j3> * <var:V> ; <var:z> := <var:j3> ; <var:z> := <var:z> + <var:j2> ; <var:z> := <var:z> + <var:j1> ; <var:z> := <var:z> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:V> = <var:a> }} <def:poly> {{ <var:z> = <nat:4> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:a> /\ <var:j2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:a> /\ <var:j2> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:a> /\ <var:j2> = <nat:9> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:a> /\ <var:j2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:j3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:a> /\ <var:j2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:j3> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:a> /\ <var:j2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:j3> = <nat:4> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:a> /\ <var:j2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:j3> = <nat:4> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:a> /\ <var:j2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:z> = <nat:4> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:5> * <var:a> /\ <var:z> = <nat:4> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:j0> = <nat:7> /\ <var:z> = <nat:4> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:5> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:a> /\ <var:z> = <nat:4> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:5> * <var:a> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 