\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:6> ; <var:R1> := <nat:7> ; <var:R1> := <var:R1> * <var:m> ; <var:R2> := <nat:3> ; <var:R2> := <var:R2> * <var:m> ; <var:R2> := <var:R2> * <var:m> ; <var:R3> := <nat:4> ; <var:R3> := <var:R3> * <var:m> ; <var:R3> := <var:R3> * <var:m> ; <var:R3> := <var:R3> * <var:m> ; <var:l> := <var:R3> ; <var:l> := <var:l> + <var:R2> ; <var:l> := <var:l> + <var:R1> ; <var:l> := <var:l> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:m> = <var:z> $ ahead of the evaluation of the list of commands it follows that we see $ <var:l> = <nat:4> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:7> \times <var:z> + <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for our code can be done with standard Hoare reasoning . Considering the upcoming lines of codefound in the list of instructions , we have \verb | { <var:m> = <var:z> } <var:R0> := <nat:6> { <var:m> = <var:z> \land <var:R0> = <nat:6> } | , \verb | { <var:m> = <var:z> \land <var:R0> = <nat:6> } <var:R1> := <nat:7> { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> } | , \verb | { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> } <var:R1> := <var:R1> * <var:m> { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> } | , \verb | { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> } <var:R2> := <nat:3> { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> } | , \verb | { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> } <var:R2> := <var:R2> * <var:m> { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> \times <var:z> } | , \verb | { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> \times <var:z> } <var:R2> := <var:R2> * <var:m> { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> \times <var:z> ^ <nat:2> } | , \verb | { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> \times <var:z> ^ <nat:2> } <var:R3> := <nat:4> { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:R3> = <nat:4> } | , \verb | { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:R3> = <nat:4> } <var:R3> := <var:R3> * <var:m> { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:R3> = <nat:4> \times <var:z> } | , \verb | { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:R3> = <nat:4> \times <var:z> } <var:R3> := <var:R3> * <var:m> { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:R3> = <nat:4> \times <var:z> ^ <nat:2> } | , \verb | { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:R3> = <nat:4> \times <var:z> ^ <nat:2> } <var:R3> := <var:R3> * <var:m> { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:R3> = <nat:4> \times <var:z> ^ <nat:3> } | and \verb | { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:R3> = <nat:4> \times <var:z> ^ <nat:3> } <var:l> := <var:R3> { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> \land <var:R2> = <nat:3> \times <var:z> ^ <nat:2> \land <var:l> = <nat:4> \times <var:z> ^ <nat:3> } | . This is guaranteed using the variable update rule defined by typical Hoare techniques . Looking at the proceeding commands in the series of commands , we see \verb | { <var:m> = <var:z> } <var:R0> := <nat:6> { <var:m> = <var:z> \land <var:R0> = <nat:6> } | , \verb | { <var:m> = <var:z> \land <var:R0> = <nat:6> } <var:R1> := <nat:7> { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> } | and \verb | { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> } <var:R1> := <var:R1> * <var:m> { <var:m> = <var:z> \land <var:R0> = <nat:6> \land <var:R1> = <nat:7> \times <var:z> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R0> := <nat:6> ; <var:R1> := <nat:7> ; <var:R1> := <var:R1> * <var:m> ; <var:R2> := <nat:3> ; <var:R2> := <var:R2> * <var:m> ; <var:R2> := <var:R2> * <var:m> ; <var:R3> := <nat:4> ; <var:R3> := <var:R3> * <var:m> ; <var:R3> := <var:R3> * <var:m> ; <var:R3> := <var:R3> * <var:m> ; <var:l> := <var:R3> ; <var:l> := <var:l> + <var:R2> ; <var:l> := <var:l> + <var:R1> ; <var:l> := <var:l> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:m> = <var:z> }} <def:poly> {{ <var:l> = <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:7> * <var:z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:R0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:7> * <var:z> /\ <var:R2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:7> * <var:z> /\ <var:R2> = <nat:3> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:7> * <var:z> /\ <var:R2> = <nat:3> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:7> * <var:z> /\ <var:R2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:R3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:7> * <var:z> /\ <var:R2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:R3> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:7> * <var:z> /\ <var:R2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:R3> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:7> * <var:z> /\ <var:R2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:R3> = <nat:4> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:7> * <var:z> /\ <var:R2> = <nat:3> * <var:z> ^ <nat:2> /\ <var:l> = <nat:4> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:R0> = <nat:6> /\ <var:R1> = <nat:7> * <var:z> /\ <var:l> = <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:R0> = <nat:6> /\ <var:l> = <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:l> = <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:7> * <var:z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 