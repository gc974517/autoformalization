\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y1> := <var:Z> ; <var:y2> := <var:y1> * <var:Z> ; <var:y3> := <var:y2> * <var:Z> ; <var:y4> := <var:y3> * <var:Z> ; <var:y5> := <var:y4> * <var:Z> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:1> ; <var:y4> := <var:y4> * <nat:5> ; <var:y5> := <var:y5> * <nat:2> ; <var:q> := <var:y5> <var:q> := <var:q> + <var:y4> <var:q> := <var:q> + <var:y1> <var:q> := <var:q> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Assuming that we have $ <var:Z> = <var:p> $ for positive integer coefficients $ <var:p> $ before executing this set of commands , it follows that we see $ <var:q> = <nat:2> \times <var:p> ^ <nat:5> + <nat:5> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> + <nat:5> $ . \end{theorem} \begin{proof} The proof of this series of commands can be seen through typical Hoare reasoning . Moving on , we see \begin{eqnarray} \{ <var:Z> = <var:p> \} \, <var:y1> := <var:Z> \, \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \} \\ \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \} \, <var:y2> := <var:y1> * <var:Z> \, \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \land <var:y2> = <var:p> ^ <nat:2> \} \\ \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \land <var:y2> = <var:p> ^ <nat:2> \} \, <var:y3> := <var:y2> * <var:Z> \, \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \} \\ \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \} \, <var:y4> := <var:y3> * <var:Z> \, \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <var:p> ^ <nat:4> \} \\ \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <var:p> ^ <nat:4> \} \, <var:y5> := <var:y4> * <var:Z> \, \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <var:p> ^ <nat:4> \land <var:y5> = <var:p> ^ <nat:5> \} \\ \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <var:p> ^ <nat:4> \land <var:y5> = <var:p> ^ <nat:5> \} \, <var:y0> := <nat:5> \, \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <var:p> ^ <nat:4> \land <var:y5> = <var:p> ^ <nat:5> \land <var:y0> = <nat:5> \} \\ \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <var:p> ^ <nat:4> \land <var:y5> = <var:p> ^ <nat:5> \land <var:y0> = <nat:5> \} \, <var:y1> := <var:y1> * <nat:1> \, \{ <var:Z> = <var:p> \land <var:y1> = <nat:1> * <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <var:p> ^ <nat:4> \land <var:y5> = <var:p> ^ <nat:5> \land <var:y0> = <nat:5> \} \\ \{ <var:Z> = <var:p> \land <var:y1> = <nat:1> * <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <var:p> ^ <nat:4> \land <var:y5> = <var:p> ^ <nat:5> \land <var:y0> = <nat:5> \} \, <var:y4> := <var:y4> * <nat:5> \, \{ <var:Z> = <var:p> \land <var:y1> = <nat:1> * <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <nat:5> * <var:p> ^ <nat:4> \land <var:y5> = <var:p> ^ <nat:5> \land <var:y0> = <nat:5> \} \\ \{ <var:Z> = <var:p> \land <var:y1> = <nat:1> * <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <nat:5> * <var:p> ^ <nat:4> \land <var:y5> = <var:p> ^ <nat:5> \land <var:y0> = <nat:5> \} \, <var:y5> := <var:y5> * <nat:2> \, \{ <var:Z> = <var:p> \land <var:y1> = <nat:1> * <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <nat:5> * <var:p> ^ <nat:4> \land <var:y5> = <nat:2> * <var:p> ^ <nat:5> \land <var:y0> = <nat:5> \} \\ \{ <var:Z> = <var:p> \land <var:y1> = <nat:1> * <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <nat:5> * <var:p> ^ <nat:4> \land <var:y5> = <nat:2> * <var:p> ^ <nat:5> \land <var:y0> = <nat:5> \} \, <var:q> := <var:y5\, \{ <var:Z> = <var:p> \land <var:y1> = <nat:1> * <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <nat:5> * <var:p> ^ <nat:4> \land <var:y0> = <nat:5> \land <var:q> = <nat:2> * <var:p> ^ <nat:5> \} \\ \{ <var:Z> = <var:p> \land <var:y1> = <nat:1> * <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y4> = <nat:5> * <var:p> ^ <nat:4> \land <var:y0> = <nat:5> \land <var:q> = <nat:2> * <var:p> ^ <nat:5> \} \, <var:q> := <var:q> + <var:y4\, \{ <var:Z> = <var:p> \land <var:y1> = <nat:1> * <var:p> \land <var:y2> = <var:p> ^ <nat:2> \land <var:y3> = <var:p> ^ <nat:3> \land <var:y0> = <nat:5> \land <var:q> = <nat:2> * <var:p> ^ <nat:5> + <nat:5> * <var:p> ^ <nat:4> \} \end{eqnarray} This is deduced using the variable update scheme of Hoare reasoning . Honing in on the next bit of code found in the list of commands , \begin{eqnarray} \{ <var:Z> = <var:p> \} \, <var:y1> := <var:Z> \, \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \} \end{eqnarray} Observing the proceeding step in the list of instructions , \begin{eqnarray} \{ <var:Z> = <var:p> \} \, <var:y1> := <var:Z> \, \{ <var:Z> = <var:p> \land <var:y1> = <var:p> \} \end{eqnarray} This is ensured using the variable binding scheme defined in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <var:y4> : string := " <var:y4> " . Definition <var:y5> : string := " <var:y5> " . Definition <def:poly> := <var:y1> := <var:Z> ; <var:y2> := <var:y1> * <var:Z> ; <var:y3> := <var:y2> * <var:Z> ; <var:y4> := <var:y3> * <var:Z> ; <var:y5> := <var:y4> * <var:Z> ; <var:y0> := <nat:5> ; <var:y1> := <var:y1> * <nat:1> ; <var:y4> := <var:y4> * <nat:5> ; <var:y5> := <var:y5> * <nat:2> ; <var:q> := <var:y5> <var:q> := <var:q> + <var:y4> <var:q> := <var:q> + <var:y1> <var:q> := <var:q> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:Z> = <var:p> }} <def:poly> {{ <var:q> = <nat:2> * <var:p> ^ <nat:5> + <nat:5> * <var:p> ^ <nat:4> + <nat:1> * <var:p> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:y1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:y1> = <var:p> /\ <var:y2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:y1> = <var:p> /\ <var:y2> = <var:p> ^ <nat:2> /\ <var:y3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:y1> = <var:p> /\ <var:y2> = <var:p> ^ <nat:2> /\ <var:y3> = <var:p> ^ <nat:3> /\ <var:y4> = <var:p> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:y1> = <var:p> /\ <var:y2> = <var:p> ^ <nat:2> /\ <var:y3> = <var:p> ^ <nat:3> /\ <var:y4> = <var:p> ^ <nat:4> /\ <var:y5> = <var:p> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:y1> = <var:p> /\ <var:y2> = <var:p> ^ <nat:2> /\ <var:y3> = <var:p> ^ <nat:3> /\ <var:y4> = <var:p> ^ <nat:4> /\ <var:y5> = <var:p> ^ <nat:5> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:y1> = <nat:1> * <var:p> /\ <var:y2> = <var:p> ^ <nat:2> /\ <var:y3> = <var:p> ^ <nat:3> /\ <var:y4> = <var:p> ^ <nat:4> /\ <var:y5> = <var:p> ^ <nat:5> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:y1> = <nat:1> * <var:p> /\ <var:y2> = <var:p> ^ <nat:2> /\ <var:y3> = <var:p> ^ <nat:3> /\ <var:y4> = <nat:5> * <var:p> ^ <nat:4> /\ <var:y5> = <var:p> ^ <nat:5> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:y1> = <nat:1> * <var:p> /\ <var:y2> = <var:p> ^ <nat:2> /\ <var:y3> = <var:p> ^ <nat:3> /\ <var:y4> = <nat:5> * <var:p> ^ <nat:4> /\ <var:y5> = <nat:2> * <var:p> ^ <nat:5> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:y1> = <nat:1> * <var:p> /\ <var:y2> = <var:p> ^ <nat:2> /\ <var:y3> = <var:p> ^ <nat:3> /\ <var:y4> = <nat:5> * <var:p> ^ <nat:4> /\ <var:y0> = <nat:5> /\ <var:q> = <nat:2> * <var:p> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:y1> = <nat:1> * <var:p> /\ <var:y2> = <var:p> ^ <nat:2> /\ <var:y3> = <var:p> ^ <nat:3> /\ <var:y0> = <nat:5> /\ <var:q> = <nat:2> * <var:p> ^ <nat:5> + <nat:5> * <var:p> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:y0> = <nat:5> /\ <var:q> = <nat:2> * <var:p> ^ <nat:5> + <nat:5> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:p> /\ <var:q> = <nat:2> * <var:p> ^ <nat:5> + <nat:5> * <var:p> ^ <nat:4> + <nat:1> * <var:p> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 