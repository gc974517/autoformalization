\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:V> := <nat:4> ; <var:V> := <nat:3> + <var:V> * <var:s> ; <var:V> := <nat:1> + <var:V> * <var:s> ; <var:V> := <nat:1> + <var:V> * <var:s> ; <var:V> := <nat:2> + <var:V> * <var:s> ; <var:V> := <var:V> * <var:s> ; <var:V> := <nat:4> + <var:V> * <var:s> ; <var:V> := <var:V> * <var:s> ; <var:V> := <nat:3> + <var:V> * <var:s> ; <var:V> := <nat:3> + <var:V> * <var:s> ; <var:V> := <nat:1> + <var:V> * <var:s> ; <var:V> := <nat:1> + <var:V> * <var:s> ; <var:V> := <nat:3> + <var:V> * <var:s> ; <var:V> := <nat:2> + <var:V> * <var:s> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:s> = <var:F> $ ( for every integers $ <var:F> $ ) ahead of evaluating the series of instructions , it must be that $ <var:V> = <nat:4> \times <var:F> ^ <nat:13> + <nat:3> \times <var:F> ^ <nat:12> + <nat:1> \times <var:F> ^ <nat:11> + <nat:1> \times <var:F> ^ <nat:10> + <nat:2> \times <var:F> ^ <nat:9> + <nat:4> \times <var:F> ^ <nat:7> + <nat:3> \times <var:F> ^ <nat:5> + <nat:3> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our list of commands is given by typical Hoare techniques . Paying attention to the proceeding bit of code found in our series of commands , we have the variable assignmet line defining $ <nat:4> $ toward $ <var:V>$ . This advances the precondition $ \{ <var:s> = <var:F> \} $ as the condition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \} $ . Advancing to the subsequent line of code in our code segment , we have the variable assignmet command giving $ <nat:3> + <var:V> * <var:s> $ as $ <var:V>$ . This moves $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \} $ to the postcondition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> + <nat:3> \} $ . Shifting focus toward the subsequent piece of code in the segment of code , we have the variable update command binding $ <nat:1> + <var:V> * <var:s> $ to $ <var:V>$ . This moves the condition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> + <nat:3> \} $ into the postcondition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> + <nat:1> \} $ . Paying attention to the proceeding command contained in the segment of code , we see the environment update line \verb | <var:V> := <nat:1> + <var:V> * <var:s> ; | . This line forwards the condition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> + <nat:1> \} $ toward the postcondition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:1> \} $ . Shifting focus toward the subsequent line of code contained in the code segment , we have the variable binding command binding $ <nat:2> + <var:V> * <var:s> $ to $ <var:V>$ . This code transfers $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:1> \} $ to the postcondition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:2> \} $ . This is shown to be logically sound using the assignment law given by typical Hoare logic . Considering the subsequent line of code found in the set of instructions , we have the assignment code \verb | <var:V> := <var:V> * <var:s> ; | . This command forwards $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:2> \} $ as the postcondition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:5> + <nat:3> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> + \} $ . Following , the binding command \verb | <var:V> := <nat:4> + <var:V> * <var:s> ; | . This takes the condition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:5> + <nat:3> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> + \} $ toward the condition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:6> + <nat:3> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:2> \times <var:F> ^ <nat:2> + <nat:4> \} $ . This is sound using the assignment scheme from Hoare techniques . Following , we see the variable assignmet code giving $ <var:V> * <var:s> $ into $ <var:V>$ . This forwards the condition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:6> + <nat:3> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:2> \times <var:F> ^ <nat:2> + <nat:4> \} $ as $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:7> + <nat:3> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> ^ <nat:4> + <nat:2> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> + \} $ . This is given using the assignment rule given by standard Hoare logic . Advancing to the next step , the assignment line \verb | <var:V> := <nat:3> + <var:V> * <var:s> ; | . This line advances $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:7> + <nat:3> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> ^ <nat:4> + <nat:2> \times <var:F> ^ <nat:3> + <nat:4> \times <var:F> + \} $ to the postcondition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:8> + <nat:3> \times <var:F> ^ <nat:7> + <nat:1> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:5> + <nat:2> \times <var:F> ^ <nat:4> + <nat:4> \times <var:F> ^ <nat:2> + <nat:3> \} $ . Following , we see the binding statement giving $ <nat:3> + <var:V> * <var:s> $ into $ <var:V>$ . This moves $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:8> + <nat:3> \times <var:F> ^ <nat:7> + <nat:1> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:5> + <nat:2> \times <var:F> ^ <nat:4> + <nat:4> \times <var:F> ^ <nat:2> + <nat:3> \} $ into the postcondition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:9> + <nat:3> \times <var:F> ^ <nat:8> + <nat:1> \times <var:F> ^ <nat:7> + <nat:1> \times <var:F> ^ <nat:6> + <nat:2> \times <var:F> ^ <nat:5> + <nat:4> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> + <nat:3> \} $ . Advancing to the next step found in our code , we have the variable update statement giving $ <nat:1> + <var:V> * <var:s> $ toward $ <var:V>$ . This takes $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:9> + <nat:3> \times <var:F> ^ <nat:8> + <nat:1> \times <var:F> ^ <nat:7> + <nat:1> \times <var:F> ^ <nat:6> + <nat:2> \times <var:F> ^ <nat:5> + <nat:4> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> + <nat:3> \} $ as $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:10> + <nat:3> \times <var:F> ^ <nat:9> + <nat:1> \times <var:F> ^ <nat:8> + <nat:1> \times <var:F> ^ <nat:7> + <nat:2> \times <var:F> ^ <nat:6> + <nat:4> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> + <nat:1> \} $ . Observing the upcoming line of code seen in the segment of code , we see the binding command \verb | <var:V> := <nat:1> + <var:V> * <var:s> ; | . This statement redefines the condition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:10> + <nat:3> \times <var:F> ^ <nat:9> + <nat:1> \times <var:F> ^ <nat:8> + <nat:1> \times <var:F> ^ <nat:7> + <nat:2> \times <var:F> ^ <nat:6> + <nat:4> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> + <nat:1> \} $ into $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:11> + <nat:3> \times <var:F> ^ <nat:10> + <nat:1> \times <var:F> ^ <nat:9> + <nat:1> \times <var:F> ^ <nat:8> + <nat:2> \times <var:F> ^ <nat:7> + <nat:4> \times <var:F> ^ <nat:5> + <nat:3> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:1> \} $ . Focusing on the proceeding line contained in our series of instructions , the variable assignmet statement \verb | <var:V> := <nat:3> + <var:V> * <var:s> ; | . This code redefines $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:11> + <nat:3> \times <var:F> ^ <nat:10> + <nat:1> \times <var:F> ^ <nat:9> + <nat:1> \times <var:F> ^ <nat:8> + <nat:2> \times <var:F> ^ <nat:7> + <nat:4> \times <var:F> ^ <nat:5> + <nat:3> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:1> \} $ as $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:12> + <nat:3> \times <var:F> ^ <nat:11> + <nat:1> \times <var:F> ^ <nat:10> + <nat:1> \times <var:F> ^ <nat:9> + <nat:2> \times <var:F> ^ <nat:8> + <nat:4> \times <var:F> ^ <nat:6> + <nat:3> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:3> \} $ . Jumping to the next piece of code contained in our set of instructions , we have the environment update code \verb | <var:V> := <nat:2> + <var:V> * <var:s> | . This line redefines the condition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:12> + <nat:3> \times <var:F> ^ <nat:11> + <nat:1> \times <var:F> ^ <nat:10> + <nat:1> \times <var:F> ^ <nat:9> + <nat:2> \times <var:F> ^ <nat:8> + <nat:4> \times <var:F> ^ <nat:6> + <nat:3> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:3> \} $ to the postcondition $ \{ <var:s> = <var:F> \land <var:V> = <nat:4> \times <var:F> ^ <nat:13> + <nat:3> \times <var:F> ^ <nat:12> + <nat:1> \times <var:F> ^ <nat:11> + <nat:1> \times <var:F> ^ <nat:10> + <nat:2> \times <var:F> ^ <nat:9> + <nat:4> \times <var:F> ^ <nat:7> + <nat:3> \times <var:F> ^ <nat:5> + <nat:3> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:V> := <nat:4> ; <var:V> := <nat:3> + <var:V> * <var:s> ; <var:V> := <nat:1> + <var:V> * <var:s> ; <var:V> := <nat:1> + <var:V> * <var:s> ; <var:V> := <nat:2> + <var:V> * <var:s> ; <var:V> := <var:V> * <var:s> ; <var:V> := <nat:4> + <var:V> * <var:s> ; <var:V> := <var:V> * <var:s> ; <var:V> := <nat:3> + <var:V> * <var:s> ; <var:V> := <nat:3> + <var:V> * <var:s> ; <var:V> := <nat:1> + <var:V> * <var:s> ; <var:V> := <nat:1> + <var:V> * <var:s> ; <var:V> := <nat:3> + <var:V> * <var:s> ; <var:V> := <nat:2> + <var:V> * <var:s> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:s> = <var:F> }} <def:poly> {{ <var:V> = <nat:4> * <var:F> ^ <nat:13> + <nat:3> * <var:F> ^ <nat:12> + <nat:1> * <var:F> ^ <nat:11> + <nat:1> * <var:F> ^ <nat:10> + <nat:2> * <var:F> ^ <nat:9> + <nat:4> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> * <var:F> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> * <var:F> ^ <nat:6> + <nat:3> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:4> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> * <var:F> ^ <nat:8> + <nat:3> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> * <var:F> ^ <nat:9> + <nat:3> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:3> + <nat:3> * <var:F> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> * <var:F> ^ <nat:10> + <nat:3> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> * <var:F> ^ <nat:11> + <nat:3> * <var:F> ^ <nat:10> + <nat:1> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:2> * <var:F> ^ <nat:7> + <nat:4> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> * <var:F> ^ <nat:12> + <nat:3> * <var:F> ^ <nat:11> + <nat:1> * <var:F> ^ <nat:10> + <nat:1> * <var:F> ^ <nat:9> + <nat:2> * <var:F> ^ <nat:8> + <nat:4> * <var:F> ^ <nat:6> + <nat:3> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:V> = <nat:4> * <var:F> ^ <nat:13> + <nat:3> * <var:F> ^ <nat:12> + <nat:1> * <var:F> ^ <nat:11> + <nat:1> * <var:F> ^ <nat:10> + <nat:2> * <var:F> ^ <nat:9> + <nat:4> * <var:F> ^ <nat:7> + <nat:3> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 