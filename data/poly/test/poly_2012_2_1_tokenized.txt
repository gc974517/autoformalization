\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:B0> := <nat:3> ; <var:F> := <var:B0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> in \emph{Imp} . Allowing that $ <var:j> = <var:X> $ --- given all natural coefficients $ <var:X> $ --- prior to interpreting the set of instructions , it follows that $ <var:F> = <nat:3> $ once code has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of the list of commands is given with Hoare logic . Shifting focus toward the subsequent line of code found in the code , the statement binding $ <nat:3> $ as $ <var:B0>$ . This command moves $ \{ <var:j> = <var:X> \} $ into the condition $ \{ <var:j> = <var:X> \land <var:B0> = <nat:3> \} $ . This is known to be sound with the assignment inference rule obtained from usual Hoare reasoning . Moving on , we see the variable assignmet command \verb | <var:F> := <var:B0> | . This line forwards $ \{ <var:j> = <var:X> \land <var:B0> = <nat:3> \} $ to $ \{ <var:j> = <var:X> \land <var:F> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <def:poly> := <var:B0> := <nat:3> ; <var:F> := <var:B0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:j> = <var:X> }} <def:poly> {{ <var:F> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:F> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 