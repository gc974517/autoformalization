\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u1> := <var:Z> ; <var:u2> := <var:u1> * <var:Z> ; <var:u3> := <var:u2> * <var:Z> ; <var:u4> := <var:u3> * <var:Z> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:4> ; <var:u2> := <var:u2> * <nat:9> ; <var:u3> := <var:u3> * <nat:1> ; <var:u4> := <var:u4> * <nat:8> ; <var:y> := <var:u4> <var:y> := <var:y> + <var:u3> <var:y> := <var:y> + <var:u2> <var:y> := <var:y> + <var:u1> <var:y> := <var:y> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:Z> = <var:f> $ before the execution of our set of commands , it follows that $ <var:y> = <nat:8> \times <var:f> ^ <nat:4> + <nat:1> \times <var:f> ^ <nat:3> + <nat:9> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:1> $ when list of instructions exits . \end{theorem} \begin{proof} Utilizing Hoare reasoning yields : \begin{eqnarray} \{ <var:Z> = <var:f> \} \\ <var:u1> := <var:Z> ; \\ \{ <var:Z> = <var:f> \land <var:u1> = <var:f> \} \\ <var:u2> := <var:u1> * <var:Z> ; \\ \{ <var:Z> = <var:f> \land <var:u1> = <var:f> \land <var:u2> = <var:f> ^ <nat:2> \} \\ <var:u3> := <var:u2> * <var:Z> ; \\ \{ <var:Z> = <var:f> \land <var:u1> = <var:f> \land <var:u2> = <var:f> ^ <nat:2> \land <var:u3> = <var:f> ^ <nat:3> \} \\ <var:u4> := <var:u3> * <var:Z> ; \\ \{ <var:Z> = <var:f> \land <var:u1> = <var:f> \land <var:u2> = <var:f> ^ <nat:2> \land <var:u3> = <var:f> ^ <nat:3> \land <var:u4> = <var:f> ^ <nat:4> \} \\ <var:u0> := <nat:1> ; \\ \{ <var:Z> = <var:f> \land <var:u1> = <var:f> \land <var:u2> = <var:f> ^ <nat:2> \land <var:u3> = <var:f> ^ <nat:3> \land <var:u4> = <var:f> ^ <nat:4> \land <var:u0> = <nat:1> \} \\ <var:u1> := <var:u1> * <nat:4> ; \\ \{ <var:Z> = <var:f> \land <var:u1> = <nat:4> \cdot <var:f> \land <var:u2> = <var:f> ^ <nat:2> \land <var:u3> = <var:f> ^ <nat:3> \land <var:u4> = <var:f> ^ <nat:4> \land <var:u0> = <nat:1> \} \\ <var:u2> := <var:u2> * <nat:9> ; \\ \{ <var:Z> = <var:f> \land <var:u1> = <nat:4> \cdot <var:f> \land <var:u2> = <nat:9> \cdot <var:f> ^ <nat:2> \land <var:u3> = <var:f> ^ <nat:3> \land <var:u4> = <var:f> ^ <nat:4> \land <var:u0> = <nat:1> \} \\ <var:u3> := <var:u3> * <nat:1> ; \\ \{ <var:Z> = <var:f> \land <var:u1> = <nat:4> \cdot <var:f> \land <var:u2> = <nat:9> \cdot <var:f> ^ <nat:2> \land <var:u3> = <nat:1> \cdot <var:f> ^ <nat:3> \land <var:u4> = <var:f> ^ <nat:4> \land <var:u0> = <nat:1> \} \\ <var:u4> := <var:u4> * <nat:8> ; \\ \{ <var:Z> = <var:f> \land <var:u1> = <nat:4> \cdot <var:f> \land <var:u2> = <nat:9> \cdot <var:f> ^ <nat:2> \land <var:u3> = <nat:1> \cdot <var:f> ^ <nat:3> \land <var:u4> = <nat:8> \cdot <var:f> ^ <nat:4> \land <var:u0> = <nat:1> \} \\ <var:y> := <var:u4> \\ \{ <var:Z> = <var:f> \land <var:u1> = <nat:4> \cdot <var:f> \land <var:u2> = <nat:9> \cdot <var:f> ^ <nat:2> \land <var:u3> = <nat:1> \cdot <var:f> ^ <nat:3> \land <var:u0> = <nat:1> \land <var:y> = <nat:8> \cdot <var:f> ^ <nat:4> \} \\ <var:y> := <var:y> + <var:u3> \\ \{ <var:Z> = <var:f> \land <var:u1> = <nat:4> \cdot <var:f> \land <var:u2> = <nat:9> \cdot <var:f> ^ <nat:2> \land <var:u0> = <nat:1> \land <var:y> = <nat:8> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:u2> \\ \{ <var:Z> = <var:f> \land <var:u1> = <nat:4> \cdot <var:f> \land <var:u0> = <nat:1> \land <var:y> = <nat:8> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:3> + <nat:9> \cdot <var:f> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:u1> \\ \{ <var:Z> = <var:f> \land <var:u0> = <nat:1> \land <var:y> = <nat:8> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:3> + <nat:9> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> \} \\ <var:y> := <var:y> + <var:u0> \\ \{ <var:Z> = <var:f> \land <var:y> = <nat:8> \cdot <var:f> ^ <nat:4> + <nat:1> \cdot <var:f> ^ <nat:3> + <nat:9> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + <nat:1> \} \end{eqnarray} Given the preceding argument , this list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <var:u4> : string := " <var:u4> " . Definition <def:poly> := <var:u1> := <var:Z> ; <var:u2> := <var:u1> * <var:Z> ; <var:u3> := <var:u2> * <var:Z> ; <var:u4> := <var:u3> * <var:Z> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:4> ; <var:u2> := <var:u2> * <nat:9> ; <var:u3> := <var:u3> * <nat:1> ; <var:u4> := <var:u4> * <nat:8> ; <var:y> := <var:u4> <var:y> := <var:y> + <var:u3> <var:y> := <var:y> + <var:u2> <var:y> := <var:y> + <var:u1> <var:y> := <var:y> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:Z> = <var:f> }} <def:poly> {{ <var:y> = <nat:8> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:u1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:u1> = <var:f> /\ <var:u2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:u1> = <var:f> /\ <var:u2> = <var:f> ^ <nat:2> /\ <var:u3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:u1> = <var:f> /\ <var:u2> = <var:f> ^ <nat:2> /\ <var:u3> = <var:f> ^ <nat:3> /\ <var:u4> = <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:u1> = <var:f> /\ <var:u2> = <var:f> ^ <nat:2> /\ <var:u3> = <var:f> ^ <nat:3> /\ <var:u4> = <var:f> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:u1> = <nat:4> * <var:f> /\ <var:u2> = <var:f> ^ <nat:2> /\ <var:u3> = <var:f> ^ <nat:3> /\ <var:u4> = <var:f> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:u1> = <nat:4> * <var:f> /\ <var:u2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:u3> = <var:f> ^ <nat:3> /\ <var:u4> = <var:f> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:u1> = <nat:4> * <var:f> /\ <var:u2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:f> ^ <nat:3> /\ <var:u4> = <var:f> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:u1> = <nat:4> * <var:f> /\ <var:u2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:f> ^ <nat:3> /\ <var:u4> = <nat:8> * <var:f> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:u1> = <nat:4> * <var:f> /\ <var:u2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:u3> = <nat:1> * <var:f> ^ <nat:3> /\ <var:u0> = <nat:1> /\ <var:y> = <nat:8> * <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:u1> = <nat:4> * <var:f> /\ <var:u2> = <nat:9> * <var:f> ^ <nat:2> /\ <var:u0> = <nat:1> /\ <var:y> = <nat:8> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:u1> = <nat:4> * <var:f> /\ <var:u0> = <nat:1> /\ <var:y> = <nat:8> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:u0> = <nat:1> /\ <var:y> = <nat:8> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:f> /\ <var:y> = <nat:8> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:9> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 