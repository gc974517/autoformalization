\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:1> ; <var:B1> := <nat:4> ; <var:B1> := <var:B1> * <var:h> ; <var:B2> := <nat:9> ; <var:B2> := <var:B2> * <var:h> ; <var:B2> := <var:B2> * <var:h> ; <var:E> := <var:B2> ; <var:E> := <var:E> + <var:B1> ; <var:E> := <var:E> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:h> = <var:k> $ prior to the evaluation of the series of instructions , it holds that we have $ <var:E> = <nat:9> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:k> \} \\ <var:B0> := <nat:1> ; \\ \{ <var:h> = <var:k> \land <var:B0> = <nat:1> \} \\ <var:B1> := <nat:4> ; \\ \{ <var:h> = <var:k> \land <var:B0> = <nat:1> \land <var:B1> = <nat:4> \} \\ <var:B1> := <var:B1> * <var:h> ; \\ \{ <var:h> = <var:k> \land <var:B0> = <nat:1> \land <var:B1> = <nat:4> * <var:k> \} \\ <var:B2> := <nat:9> ; \\ \{ <var:h> = <var:k> \land <var:B0> = <nat:1> \land <var:B1> = <nat:4> * <var:k> \land <var:B2> = <nat:9> \} \\ <var:B2> := <var:B2> * <var:h> ; \\ \{ <var:h> = <var:k> \land <var:B0> = <nat:1> \land <var:B1> = <nat:4> * <var:k> \land <var:B2> = <nat:9> * <var:k> \} \\ <var:B2> := <var:B2> * <var:h> ; \\ \{ <var:h> = <var:k> \land <var:B0> = <nat:1> \land <var:B1> = <nat:4> * <var:k> \land <var:B2> = <nat:9> * <var:k> ^ <nat:2> \} \\ <var:E> := <var:B2> ; \\ \{ <var:h> = <var:k> \land <var:B0> = <nat:1> \land <var:B1> = <nat:4> * <var:k> \land <var:E> = <nat:9> * <var:k> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:B1> ; \\ \{ <var:h> = <var:k> \land <var:B0> = <nat:1> \land <var:E> = <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> \} \\ <var:E> := <var:E> + <var:B0> \\ \{ <var:h> = <var:k> \land <var:E> = <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:1> \} \end{eqnarray} Utilizing Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <def:poly> := <var:B0> := <nat:1> ; <var:B1> := <nat:4> ; <var:B1> := <var:B1> * <var:h> ; <var:B2> := <nat:9> ; <var:B2> := <var:B2> * <var:h> ; <var:B2> := <var:B2> * <var:h> ; <var:E> := <var:B2> ; <var:E> := <var:E> + <var:B1> ; <var:E> := <var:E> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:h> = <var:k> }} <def:poly> {{ <var:E> = <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:4> * <var:k> /\ <var:B2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:4> * <var:k> /\ <var:B2> = <nat:9> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:4> * <var:k> /\ <var:B2> = <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:B0> = <nat:1> /\ <var:B1> = <nat:4> * <var:k> /\ <var:E> = <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:B0> = <nat:1> /\ <var:E> = <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:E> = <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 