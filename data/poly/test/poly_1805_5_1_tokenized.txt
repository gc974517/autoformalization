\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} such that \begin{verbatim} <var:g1> := <var:c> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:5> ; <var:v> := <var:g1> <var:v> := <var:v> + <var:g0> \end{verbatim} Assuming that $ <var:c> = <var:n> $ ahead of interpreting our set of commands then $ <var:v> = <nat:5> * <var:n> + <nat:2> $ . \end{theorem} \begin{proof} Observe that this decorated set of commands . \begin{eqnarray} \{ <var:c> = <var:n> \} \\ <var:g1> := <var:c> ; \\ \{ <var:c> = <var:n> \land <var:g1> = <var:n> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:c> = <var:n> \land <var:g1> = <var:n> \land <var:g0> = <nat:2> \} \\ <var:g1> := <var:g1> * <nat:5> ; \\ \{ <var:c> = <var:n> \land <var:g1> = <nat:5> \cdot <var:n> \land <var:g0> = <nat:2> \} \\ <var:v> := <var:g1> \\ \{ <var:c> = <var:n> \land <var:g0> = <nat:2> \land <var:v> = <nat:5> \cdot <var:n> \} \\ <var:v> := <var:v> + <var:g0> \\ \{ <var:c> = <var:n> \land <var:v> = <nat:5> \cdot <var:n> + <nat:2> \} \end{eqnarray} Utilizing usual Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:c> = <var:n> }} <var:g1> := <var:c> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:5> ; <var:v> := <var:g1> <var:v> := <var:v> + <var:g0> {{ <var:v> = <nat:5> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:n> /\ <var:g1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:n> /\ <var:g1> = <var:n> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:n> /\ <var:g1> = <nat:5> * <var:n> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:n> /\ <var:g0> = <nat:2> /\ <var:v> = <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:n> /\ <var:v> = <nat:5> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 