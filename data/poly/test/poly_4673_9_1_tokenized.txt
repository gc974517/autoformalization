\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:l1> := <var:E> ; <var:l2> := <var:l1> * <var:E> ; <var:l3> := <var:l2> * <var:E> ; <var:l0> := <nat:1> ; <var:l2> := <var:l2> * <nat:4> ; <var:l3> := <var:l3> * <nat:1> ; <var:O> := <var:l3> <var:O> := <var:O> + <var:l2> <var:O> := <var:O> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Allowing for every positive coefficients $ <var:L> $ that $ <var:E> = <var:L> $ prior to evaluating our code it must be that we have $ <var:O> = <nat:1> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:1> $ when series of instructions terminates . \end{theorem} \begin{proof} The proof of this set of instructions is done using typical Hoare logic . Paying attention to the following statements in our series of instructions , we see \begin{eqnarray} \{ <var:E> = <var:L> \} \, <var:l1> := <var:E> \, \{ <var:E> = <var:L> \land <var:l1> = <var:L> \} \\ \{ <var:E> = <var:L> \land <var:l1> = <var:L> \} \, <var:l2> := <var:l1> * <var:E> \, \{ <var:E> = <var:L> \land <var:l1> = <var:L> \land <var:l2> = <var:L> ^ <nat:2> \} \end{eqnarray} This is ensured using the variable assignmet inference rule given by standard Hoare reasoning . Considering the following lines of codecontained in the segment of code , \begin{eqnarray} \{ <var:E> = <var:L> \} \, <var:l1> := <var:E> \, \{ <var:E> = <var:L> \land <var:l1> = <var:L> \} \\ \{ <var:E> = <var:L> \land <var:l1> = <var:L> \} \, <var:l2> := <var:l1> * <var:E> \, \{ <var:E> = <var:L> \land <var:l1> = <var:L> \land <var:l2> = <var:L> ^ <nat:2> \} \\ \{ <var:E> = <var:L> \land <var:l1> = <var:L> \land <var:l2> = <var:L> ^ <nat:2> \} \, <var:l3> := <var:l2> * <var:E> \, \{ <var:E> = <var:L> \land <var:l1> = <var:L> \land <var:l2> = <var:L> ^ <nat:2> \land <var:l3> = <var:L> ^ <nat:3> \} \\ \{ <var:E> = <var:L> \land <var:l1> = <var:L> \land <var:l2> = <var:L> ^ <nat:2> \land <var:l3> = <var:L> ^ <nat:3> \} \, <var:l0> := <nat:1> \, \{ <var:E> = <var:L> \land <var:l1> = <var:L> \land <var:l2> = <var:L> ^ <nat:2> \land <var:l3> = <var:L> ^ <nat:3> \land <var:l0> = <nat:1> \} \\ \{ <var:E> = <var:L> \land <var:l1> = <var:L> \land <var:l2> = <var:L> ^ <nat:2> \land <var:l3> = <var:L> ^ <nat:3> \land <var:l0> = <nat:1> \} \, <var:l2> := <var:l2> * <nat:4> \, \{ <var:E> = <var:L> \land <var:l1> = <var:L> \land <var:l2> = <nat:4> * <var:L> ^ <nat:2> \land <var:l3> = <var:L> ^ <nat:3> \land <var:l0> = <nat:1> \} \\ \{ <var:E> = <var:L> \land <var:l1> = <var:L> \land <var:l2> = <nat:4> * <var:L> ^ <nat:2> \land <var:l3> = <var:L> ^ <nat:3> \land <var:l0> = <nat:1> \} \, <var:l3> := <var:l3> * <nat:1> \, \{ <var:E> = <var:L> \land <var:l1> = <var:L> \land <var:l2> = <nat:4> * <var:L> ^ <nat:2> \land <var:l3> = <nat:1> * <var:L> ^ <nat:3> \land <var:l0> = <nat:1> \} \end{eqnarray} This is known to be sound through the binding scheme defined by standard Hoare logic . Now , \begin{eqnarray} \{ <var:E> = <var:L> \} \, <var:l1> := <var:E> \, \{ <var:E> = <var:L> \land <var:l1> = <var:L> \} \end{eqnarray} This is rigorously given through the variable update rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l1> := <var:E> ; <var:l2> := <var:l1> * <var:E> ; <var:l3> := <var:l2> * <var:E> ; <var:l0> := <nat:1> ; <var:l2> := <var:l2> * <nat:4> ; <var:l3> := <var:l3> * <nat:1> ; <var:O> := <var:l3> <var:O> := <var:O> + <var:l2> <var:O> := <var:O> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:E> = <var:L> }} <def:poly> {{ <var:O> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:l1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:l1> = <var:L> /\ <var:l2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:l1> = <var:L> /\ <var:l2> = <var:L> ^ <nat:2> /\ <var:l3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:l1> = <var:L> /\ <var:l2> = <var:L> ^ <nat:2> /\ <var:l3> = <var:L> ^ <nat:3> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:l1> = <var:L> /\ <var:l2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:l3> = <var:L> ^ <nat:3> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:l1> = <var:L> /\ <var:l2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:l3> = <nat:1> * <var:L> ^ <nat:3> /\ <var:l0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:l1> = <var:L> /\ <var:l2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:l0> = <nat:1> /\ <var:O> = <nat:1> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:l1> = <var:L> /\ <var:l0> = <nat:1> /\ <var:O> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:L> /\ <var:O> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 