\begin{document} \begin{theorem} Consider a series of commands in \emph{Imp} as follows \begin{verbatim} <var:X1> := <var:E> ; <var:X2> := <var:X1> * <var:E> ; <var:X0> := <nat:4> ; <var:X1> := <var:X1> * <nat:1> ; <var:X2> := <var:X2> * <nat:1> ; <var:M> := <var:X2> <var:M> := <var:M> + <var:X1> <var:M> := <var:M> + <var:X0> \end{verbatim} Assuming it to hold that $ <var:E> = <var:x> $ ( given any positive integer coefficients $ <var:x> $ ) ahead of executing this segment of code it follows that $ <var:M> = <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:4> $ . \end{theorem} \begin{proof} Applying typical Hoare logic results in : \begin{eqnarray} \{ <var:E> = <var:x> \} \\ <var:X1> := <var:E> ; \\ \{ <var:E> = <var:x> \land <var:X1> = <var:x> \} \\ <var:X2> := <var:X1> * <var:E> ; \\ \{ <var:E> = <var:x> \land <var:X1> = <var:x> \land <var:X2> = <var:x> ^ <nat:2> \} \\ <var:X0> := <nat:4> ; \\ \{ <var:E> = <var:x> \land <var:X1> = <var:x> \land <var:X2> = <var:x> ^ <nat:2> \land <var:X0> = <nat:4> \} \\ <var:X1> := <var:X1> * <nat:1> ; \\ \{ <var:E> = <var:x> \land <var:X1> = <nat:1> \cdot <var:x> \land <var:X2> = <var:x> ^ <nat:2> \land <var:X0> = <nat:4> \} \\ <var:X2> := <var:X2> * <nat:1> ; \\ \{ <var:E> = <var:x> \land <var:X1> = <nat:1> \cdot <var:x> \land <var:X2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:X0> = <nat:4> \} \\ <var:M> := <var:X2> \\ \{ <var:E> = <var:x> \land <var:X1> = <nat:1> \cdot <var:x> \land <var:X0> = <nat:4> \land <var:M> = <nat:1> \cdot <var:x> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:X1> \\ \{ <var:E> = <var:x> \land <var:X0> = <nat:4> \land <var:M> = <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> \} \\ <var:M> := <var:M> + <var:X0> \\ \{ <var:E> = <var:x> \land <var:M> = <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:4> \} \end{eqnarray} Thus , the list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:E> = <var:x> }} <var:X1> := <var:E> ; <var:X2> := <var:X1> * <var:E> ; <var:X0> := <nat:4> ; <var:X1> := <var:X1> * <nat:1> ; <var:X2> := <var:X2> * <nat:1> ; <var:M> := <var:X2> <var:M> := <var:M> + <var:X1> <var:M> := <var:M> + <var:X0> {{ <var:M> = <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:X1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:X1> = <var:x> /\ <var:X2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:X1> = <var:x> /\ <var:X2> = <var:x> ^ <nat:2> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:X1> = <nat:1> * <var:x> /\ <var:X2> = <var:x> ^ <nat:2> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:X1> = <nat:1> * <var:x> /\ <var:X2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:X1> = <nat:1> * <var:x> /\ <var:X0> = <nat:4> /\ <var:M> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:X0> = <nat:4> /\ <var:M> = <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:M> = <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 