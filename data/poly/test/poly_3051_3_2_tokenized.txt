\begin{document} \begin{theorem} Take a segment of code : \begin{verbatim} <var:q> := <nat:3> ; <var:q> := <nat:1> + <var:q> * <var:e> ; <var:q> := <nat:3> + <var:q> * <var:e> \end{verbatim} Given letting integers $ <var:O> $ $ <var:e> = <var:O> $ before executing our code , it holds that we see $ <var:q> = <nat:3> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:O> \} \\ <var:q> := <nat:3> ; \\ \{ <var:e> = <var:O> \land <var:q> = <nat:3> \} \\ <var:q> := <nat:1> + <var:q> * <var:e> ; \\ \{ <var:e> = <var:O> \land <var:q> = <nat:3> \cdot <var:O> + <nat:1> \} \\ <var:q> := <nat:3> + <var:q> * <var:e> \\ \{ <var:e> = <var:O> \land <var:q> = <nat:3> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:3> \} \end{eqnarray} Using Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:e> = <var:O> }} <var:q> := <nat:3> ; <var:q> := <nat:1> + <var:q> * <var:e> ; <var:q> := <nat:3> + <var:q> * <var:e> {{ <var:q> = <nat:3> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:q> = <nat:3> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:q> = <nat:3> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 