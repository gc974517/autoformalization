\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} as follows \begin{verbatim} <var:k1> := <var:l> ; <var:k2> := <var:k1> * <var:l> ; <var:k3> := <var:k2> * <var:l> ; <var:k0> := <nat:7> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:5> ; <var:U> := <var:k3> <var:U> := <var:U> + <var:k2> <var:U> := <var:U> + <var:k1> <var:U> := <var:U> + <var:k0> \end{verbatim} Allow , for all positive integer coefficients $ <var:m> $ , $ <var:l> = <var:m> $ ahead of interpreting our set of commands , it must be that $ <var:U> = <nat:5> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:7> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands can be done by standard Hoare logic . Next , we have \begin{eqnarray} \{ <var:l> = <var:m> \} \, <var:k1> := <var:l> \, \{ <var:l> = <var:m> \land <var:k1> = <var:m> \} \\ \{ <var:l> = <var:m> \land <var:k1> = <var:m> \} \, <var:k2> := <var:k1> * <var:l> \, \{ <var:l> = <var:m> \land <var:k1> = <var:m> \land <var:k2> = <var:m> ^ <nat:2> \} \\ \{ <var:l> = <var:m> \land <var:k1> = <var:m> \land <var:k2> = <var:m> ^ <nat:2> \} \, <var:k3> := <var:k2> * <var:l> \, \{ <var:l> = <var:m> \land <var:k1> = <var:m> \land <var:k2> = <var:m> ^ <nat:2> \land <var:k3> = <var:m> ^ <nat:3> \} \\ \{ <var:l> = <var:m> \land <var:k1> = <var:m> \land <var:k2> = <var:m> ^ <nat:2> \land <var:k3> = <var:m> ^ <nat:3> \} \, <var:k0> := <nat:7> \, \{ <var:l> = <var:m> \land <var:k1> = <var:m> \land <var:k2> = <var:m> ^ <nat:2> \land <var:k3> = <var:m> ^ <nat:3> \land <var:k0> = <nat:7> \} \\ \{ <var:l> = <var:m> \land <var:k1> = <var:m> \land <var:k2> = <var:m> ^ <nat:2> \land <var:k3> = <var:m> ^ <nat:3> \land <var:k0> = <nat:7> \} \, <var:k1> := <var:k1> * <nat:4> \, \{ <var:l> = <var:m> \land <var:k1> = <nat:4> \cdot <var:m> \land <var:k2> = <var:m> ^ <nat:2> \land <var:k3> = <var:m> ^ <nat:3> \land <var:k0> = <nat:7> \} \\ \{ <var:l> = <var:m> \land <var:k1> = <nat:4> \cdot <var:m> \land <var:k2> = <var:m> ^ <nat:2> \land <var:k3> = <var:m> ^ <nat:3> \land <var:k0> = <nat:7> \} \, <var:k2> := <var:k2> * <nat:3> \, \{ <var:l> = <var:m> \land <var:k1> = <nat:4> \cdot <var:m> \land <var:k2> = <nat:3> \cdot <var:m> ^ <nat:2> \land <var:k3> = <var:m> ^ <nat:3> \land <var:k0> = <nat:7> \} \\ \{ <var:l> = <var:m> \land <var:k1> = <nat:4> \cdot <var:m> \land <var:k2> = <nat:3> \cdot <var:m> ^ <nat:2> \land <var:k3> = <var:m> ^ <nat:3> \land <var:k0> = <nat:7> \} \, <var:k3> := <var:k3> * <nat:5> \, \{ <var:l> = <var:m> \land <var:k1> = <nat:4> \cdot <var:m> \land <var:k2> = <nat:3> \cdot <var:m> ^ <nat:2> \land <var:k3> = <nat:5> \cdot <var:m> ^ <nat:3> \land <var:k0> = <nat:7> \} \\ \{ <var:l> = <var:m> \land <var:k1> = <nat:4> \cdot <var:m> \land <var:k2> = <nat:3> \cdot <var:m> ^ <nat:2> \land <var:k3> = <nat:5> \cdot <var:m> ^ <nat:3> \land <var:k0> = <nat:7> \} \, <var:U> := <var:k3\, \{ <var:l> = <var:m> \land <var:k1> = <nat:4> \cdot <var:m> \land <var:k2> = <nat:3> \cdot <var:m> ^ <nat:2> \land <var:k0> = <nat:7> \land <var:U> = <nat:5> \cdot <var:m> ^ <nat:3> \} \end{eqnarray} Further , \begin{eqnarray} \{ <var:l> = <var:m> \} \, <var:k1> := <var:l> \, \{ <var:l> = <var:m> \land <var:k1> = <var:m> \} \\ \{ <var:l> = <var:m> \land <var:k1> = <var:m> \} \, <var:k2> := <var:k1> * <var:l> \, \{ <var:l> = <var:m> \land <var:k1> = <var:m> \land <var:k2> = <var:m> ^ <nat:2> \} \\ \{ <var:l> = <var:m> \land <var:k1> = <var:m> \land <var:k2> = <var:m> ^ <nat:2> \} \, <var:k3> := <var:k2> * <var:l> \, \{ <var:l> = <var:m> \land <var:k1> = <var:m> \land <var:k2> = <var:m> ^ <nat:2> \land <var:k3> = <var:m> ^ <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:l> = <var:m> }} <var:k1> := <var:l> ; <var:k2> := <var:k1> * <var:l> ; <var:k3> := <var:k2> * <var:l> ; <var:k0> := <nat:7> ; <var:k1> := <var:k1> * <nat:4> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:5> ; <var:U> := <var:k3> <var:U> := <var:U> + <var:k2> <var:U> := <var:U> + <var:k1> <var:U> := <var:U> + <var:k0> {{ <var:U> = <nat:5> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:k1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:k1> = <var:m> /\ <var:k2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:k1> = <var:m> /\ <var:k2> = <var:m> ^ <nat:2> /\ <var:k3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:k1> = <var:m> /\ <var:k2> = <var:m> ^ <nat:2> /\ <var:k3> = <var:m> ^ <nat:3> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:k1> = <nat:4> * <var:m> /\ <var:k2> = <var:m> ^ <nat:2> /\ <var:k3> = <var:m> ^ <nat:3> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:k1> = <nat:4> * <var:m> /\ <var:k2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:k3> = <var:m> ^ <nat:3> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:k1> = <nat:4> * <var:m> /\ <var:k2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:k3> = <nat:5> * <var:m> ^ <nat:3> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:k1> = <nat:4> * <var:m> /\ <var:k2> = <nat:3> * <var:m> ^ <nat:2> /\ <var:k0> = <nat:7> /\ <var:U> = <nat:5> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:k1> = <nat:4> * <var:m> /\ <var:k0> = <nat:7> /\ <var:U> = <nat:5> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:k0> = <nat:7> /\ <var:U> = <nat:5> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:m> /\ <var:U> = <nat:5> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 