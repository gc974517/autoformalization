\begin{document} \begin{theorem} Define a code segment as \begin{verbatim} <var:I0> := <nat:1> ; <var:I1> := <nat:7> ; <var:I1> := <var:I1> * <var:c> ; <var:A> := <var:I1> ; <var:A> := <var:A> + <var:I0> \end{verbatim} Allowing that we have $ <var:c> = <var:d> $ --- for natural numbers $ <var:d> $ --- before evaluating this code segment it must be that we have $ <var:A> = <nat:7> * <var:d> + <nat:1> $ once list of instructions exits . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands can be seen with standard Hoare reasoning . Further , the binding command \verb | <var:I0> := <nat:1> ; | . This command advances the precondition $ \{ <var:c> = <var:d> \} $ toward $ \{ <var:c> = <var:d> \land <var:I0> = <nat:1> \} $ . Following , we have the variable binding code \verb | <var:I1> := <nat:7> ; | . This redefines $ \{ <var:c> = <var:d> \land <var:I0> = <nat:1> \} $ into the postcondition $ \{ <var:c> = <var:d> \land <var:I0> = <nat:1> \land <var:I1> = <nat:7> \} $ . This is shown with the assignment inference rule from typical Hoare logic . Immediately following , we have the environment update command \verb | <var:I1> := <var:I1> * <var:c> ; | . This redefines the precondition $ \{ <var:c> = <var:d> \land <var:I0> = <nat:1> \land <var:I1> = <nat:7> \} $ as $ \{ <var:c> = <var:d> \land <var:I0> = <nat:1> \land <var:I1> = <nat:7> * <var:d> \} $ . Moving forward , we have the variable assignmet line \verb | <var:A> := <var:I1> ; | . This transfers the precondition $ \{ <var:c> = <var:d> \land <var:I0> = <nat:1> \land <var:I1> = <nat:7> * <var:d> \} $ into the condition $ \{ <var:c> = <var:d> \land <var:I0> = <nat:1> \land <var:A> = <nat:7> * <var:d> \} $ . This is shown through the assignment scheme given in standard Hoare reasoning . Looking at the following bit of code contained in our series of instructions , we have the environment update code binding $ <var:A> + <var:I0$ toward $ <var:A>$ . This statement redefines the precondition $ \{ <var:c> = <var:d> \land <var:I0> = <nat:1> \land <var:A> = <nat:7> * <var:d> \} $ as the postcondition $ \{ <var:c> = <var:d> \land <var:A> = <nat:7> * <var:d> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:c> = <var:d> }} <var:I0> := <nat:1> ; <var:I1> := <nat:7> ; <var:I1> := <var:I1> * <var:c> ; <var:A> := <var:I1> ; <var:A> := <var:A> + <var:I0> {{ <var:A> = <nat:7> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:I0> = <nat:1> /\ <var:A> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:d> /\ <var:A> = <nat:7> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 