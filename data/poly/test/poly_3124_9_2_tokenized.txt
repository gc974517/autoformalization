\begin{document} \begin{theorem} Take the following set of instructions as \begin{verbatim} <var:I> := <nat:4> ; <var:I> := <nat:2> + <var:I> * <var:P> ; <var:I> := <nat:1> + <var:I> * <var:P> ; <var:I> := <nat:2> + <var:I> * <var:P> ; <var:I> := <var:I> * <var:P> ; <var:I> := <nat:3> + <var:I> * <var:P> ; <var:I> := <nat:3> + <var:I> * <var:P> ; <var:I> := <nat:3> + <var:I> * <var:P> ; <var:I> := <nat:1> + <var:I> * <var:P> \end{verbatim} Allowing it to hold that $ <var:P> = <var:l> $ ahead of evaluating the list of instructions it follows that we see $ <var:I> = <nat:4> \cdot <var:l> ^ <nat:8> + <nat:2> \cdot <var:l> ^ <nat:7> + <nat:1> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:5> + <nat:3> \cdot <var:l> ^ <nat:3> + <nat:3> \cdot <var:l> ^ <nat:2> + <nat:3> \cdot <var:l> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of commands can be given by usual Hoare logic . Honing in on the subsequent command in our series of instructions , \begin{eqnarray} \{ <var:P> = <var:l> \} \, <var:I> := <nat:4> \, \{ <var:P> = <var:l> \land <var:I> = <nat:4> \} \end{eqnarray} This is ensured by the environment update inference rule from standard Hoare logic . Advancing to the upcoming statements found in the segment of code , \begin{eqnarray} \{ <var:P> = <var:l> \} \, <var:I> := <nat:4> \, \{ <var:P> = <var:l> \land <var:I> = <nat:4> \} \\ \{ <var:P> = <var:l> \land <var:I> = <nat:4> \} \, <var:I> := <nat:2> + <var:I> * <var:P> \, \{ <var:P> = <var:l> \land <var:I> = <nat:4> \cdot <var:l> + <nat:2> \} \\ \{ <var:P> = <var:l> \land <var:I> = <nat:4> \cdot <var:l> + <nat:2> \} \, <var:I> := <nat:1> + <var:I> * <var:P> \, \{ <var:P> = <var:l> \land <var:I> = <nat:4> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + <nat:1> \} \\ \{ <var:P> = <var:l> \land <var:I> = <nat:4> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + <nat:1> \} \, <var:I> := <nat:2> + <var:I> * <var:P> \, \{ <var:P> = <var:l> \land <var:I> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + <nat:2> \} \end{eqnarray} This is ensured by the variable update inference rule given in standard Hoare logic . Jumping to the next statements seen in the code , \begin{eqnarray} \{ <var:P> = <var:l> \} \, <var:I> := <nat:4> \, \{ <var:P> = <var:l> \land <var:I> = <nat:4> \} \\ \{ <var:P> = <var:l> \land <var:I> = <nat:4> \} \, <var:I> := <nat:2> + <var:I> * <var:P> \, \{ <var:P> = <var:l> \land <var:I> = <nat:4> \cdot <var:l> + <nat:2> \} \\ \{ <var:P> = <var:l> \land <var:I> = <nat:4> \cdot <var:l> + <nat:2> \} \, <var:I> := <nat:1> + <var:I> * <var:P> \, \{ <var:P> = <var:l> \land <var:I> = <nat:4> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + <nat:1> \} \\ \{ <var:P> = <var:l> \land <var:I> = <nat:4> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + <nat:1> \} \, <var:I> := <nat:2> + <var:I> * <var:P> \, \{ <var:P> = <var:l> \land <var:I> = <nat:4> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + <nat:2> \} \end{eqnarray} This is deduced using the assignment inference rule obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:P> = <var:l> }} <var:I> := <nat:4> ; <var:I> := <nat:2> + <var:I> * <var:P> ; <var:I> := <nat:1> + <var:I> * <var:P> ; <var:I> := <nat:2> + <var:I> * <var:P> ; <var:I> := <var:I> * <var:P> ; <var:I> := <nat:3> + <var:I> * <var:P> ; <var:I> := <nat:3> + <var:I> * <var:P> ; <var:I> := <nat:3> + <var:I> * <var:P> ; <var:I> := <nat:1> + <var:I> * <var:P> {{ <var:I> = <nat:4> * <var:l> ^ <nat:8> + <nat:2> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:I> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:I> = <nat:4> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:I> = <nat:4> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:I> = <nat:4> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:I> = <nat:4> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:I> = <nat:4> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:I> = <nat:4> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:3> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:I> = <nat:4> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:l> /\ <var:I> = <nat:4> * <var:l> ^ <nat:8> + <nat:2> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 