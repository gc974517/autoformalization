\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} as \begin{verbatim} <var:F0> := <nat:3> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:h> ; <var:F2> := <nat:3> ; <var:F2> := <var:F2> * <var:h> ; <var:F2> := <var:F2> * <var:h> ; <var:t> := <var:F2> ; <var:t> := <var:t> + <var:F1> ; <var:t> := <var:t> + <var:F0> \end{verbatim} Assuming $ <var:h> = <var:V> $ prior to executing our list of instructions , it follows that we have $ <var:t> = <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:V> \} \\ <var:F0> := <nat:3> ; \\ \{ <var:h> = <var:V> \land <var:F0> = <nat:3> \} \\ <var:F1> := <nat:2> ; \\ \{ <var:h> = <var:V> \land <var:F0> = <nat:3> \land <var:F1> = <nat:2> \} \\ <var:F1> := <var:F1> * <var:h> ; \\ \{ <var:h> = <var:V> \land <var:F0> = <nat:3> \land <var:F1> = <nat:2> \times <var:V> \} \\ <var:F2> := <nat:3> ; \\ \{ <var:h> = <var:V> \land <var:F0> = <nat:3> \land <var:F1> = <nat:2> \times <var:V> \land <var:F2> = <nat:3> \} \\ <var:F2> := <var:F2> * <var:h> ; \\ \{ <var:h> = <var:V> \land <var:F0> = <nat:3> \land <var:F1> = <nat:2> \times <var:V> \land <var:F2> = <nat:3> \times <var:V> \} \\ <var:F2> := <var:F2> * <var:h> ; \\ \{ <var:h> = <var:V> \land <var:F0> = <nat:3> \land <var:F1> = <nat:2> \times <var:V> \land <var:F2> = <nat:3> \times <var:V> ^ <nat:2> \} \\ <var:t> := <var:F2> ; \\ \{ <var:h> = <var:V> \land <var:F0> = <nat:3> \land <var:F1> = <nat:2> \times <var:V> \land <var:t> = <nat:3> \times <var:V> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:F1> ; \\ \{ <var:h> = <var:V> \land <var:F0> = <nat:3> \land <var:t> = <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> \} \\ <var:t> := <var:t> + <var:F0> \\ \{ <var:h> = <var:V> \land <var:t> = <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:3> \} \end{eqnarray} Applying standard Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:h> = <var:V> }} <var:F0> := <nat:3> ; <var:F1> := <nat:2> ; <var:F1> := <var:F1> * <var:h> ; <var:F2> := <nat:3> ; <var:F2> := <var:F2> * <var:h> ; <var:F2> := <var:F2> * <var:h> ; <var:t> := <var:F2> ; <var:t> := <var:t> + <var:F1> ; <var:t> := <var:t> + <var:F0> {{ <var:t> = <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:2> * <var:V> /\ <var:F2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:2> * <var:V> /\ <var:F2> = <nat:3> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:2> * <var:V> /\ <var:F2> = <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:F0> = <nat:3> /\ <var:F1> = <nat:2> * <var:V> /\ <var:t> = <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:F0> = <nat:3> /\ <var:t> = <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:t> = <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 