\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:4> ; <var:I1> := <nat:5> ; <var:I1> := <var:I1> * <var:t> ; <var:I2> := <nat:4> ; <var:I2> := <var:I2> * <var:t> ; <var:I2> := <var:I2> * <var:t> ; <var:Z> := <var:I2> ; <var:Z> := <var:Z> + <var:I1> ; <var:Z> := <var:Z> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:t> = <var:G> $ --- given $ <var:G> \in \mathbb{N} $ --- prior to running this series of commands it holds that we see $ <var:Z> = <nat:4> * <var:G> ^ <nat:2> + <nat:5> * <var:G> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:G> \} \\ <var:I0> := <nat:4> ; \\ \{ <var:t> = <var:G> \land <var:I0> = <nat:4> \} \\ <var:I1> := <nat:5> ; \\ \{ <var:t> = <var:G> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \} \\ <var:I1> := <var:I1> * <var:t> ; \\ \{ <var:t> = <var:G> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:G> \} \\ <var:I2> := <nat:4> ; \\ \{ <var:t> = <var:G> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:G> \land <var:I2> = <nat:4> \} \\ <var:I2> := <var:I2> * <var:t> ; \\ \{ <var:t> = <var:G> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:G> \land <var:I2> = <nat:4> \times <var:G> \} \\ <var:I2> := <var:I2> * <var:t> ; \\ \{ <var:t> = <var:G> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:G> \land <var:I2> = <nat:4> \times <var:G> ^ <nat:2> \} \\ <var:Z> := <var:I2> ; \\ \{ <var:t> = <var:G> \land <var:I0> = <nat:4> \land <var:I1> = <nat:5> \times <var:G> \land <var:Z> = <nat:4> \times <var:G> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:I1> ; \\ \{ <var:t> = <var:G> \land <var:I0> = <nat:4> \land <var:Z> = <nat:4> \times <var:G> ^ <nat:2> + <nat:5> \times <var:G> \} \\ <var:Z> := <var:Z> + <var:I0> \\ \{ <var:t> = <var:G> \land <var:Z> = <nat:4> \times <var:G> ^ <nat:2> + <nat:5> \times <var:G> + <nat:4> \} \end{eqnarray} Utilizing standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I0> := <nat:4> ; <var:I1> := <nat:5> ; <var:I1> := <var:I1> * <var:t> ; <var:I2> := <nat:4> ; <var:I2> := <var:I2> * <var:t> ; <var:I2> := <var:I2> * <var:t> ; <var:Z> := <var:I2> ; <var:Z> := <var:Z> + <var:I1> ; <var:Z> := <var:Z> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:t> = <var:G> }} <def:poly> {{ <var:Z> = <nat:4> * <var:G> ^ <nat:2> + <nat:5> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:G> /\ <var:I2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:G> /\ <var:I2> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:G> /\ <var:I2> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:I0> = <nat:4> /\ <var:I1> = <nat:5> * <var:G> /\ <var:Z> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:I0> = <nat:4> /\ <var:Z> = <nat:4> * <var:G> ^ <nat:2> + <nat:5> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:Z> = <nat:4> * <var:G> ^ <nat:2> + <nat:5> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 