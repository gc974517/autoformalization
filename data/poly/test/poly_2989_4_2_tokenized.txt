\begin{document} \begin{theorem} Consider the following program in \emph{Imp} as \begin{verbatim} <var:e> := <nat:2> ; <var:e> := <nat:2> + <var:e> * <var:X> ; <var:e> := <nat:2> + <var:e> * <var:X> ; <var:e> := <nat:3> + <var:e> * <var:X> \end{verbatim} Allowing assuming some $ <var:J> \in \mathbb{N} $ it to be that $ <var:X> = <var:J> $ prior to the evaluation of this segment of code it must be that we see $ <var:e> = <nat:2> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:X> = <var:J> \} \\ <var:e> := <nat:2> ; \\ \{ <var:X> = <var:J> \land <var:e> = <nat:2> \} \\ <var:e> := <nat:2> + <var:e> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:e> = <nat:2> * <var:J> + <nat:2> \} \\ <var:e> := <nat:2> + <var:e> * <var:X> ; \\ \{ <var:X> = <var:J> \land <var:e> = <nat:2> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:2> \} \\ <var:e> := <nat:3> + <var:e> * <var:X> \\ \{ <var:X> = <var:J> \land <var:e> = <nat:2> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:3> \} \end{eqnarray} Hence , the series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:X> = <var:J> }} <var:e> := <nat:2> ; <var:e> := <nat:2> + <var:e> * <var:X> ; <var:e> := <nat:2> + <var:e> * <var:X> ; <var:e> := <nat:3> + <var:e> * <var:X> {{ <var:e> = <nat:2> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:e> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:e> = <nat:2> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:e> = <nat:2> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:J> /\ <var:e> = <nat:2> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 