\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:8> ; <var:X1> := <nat:6> ; <var:X1> := <var:X1> * <var:F> ; <var:X2> := <nat:5> ; <var:X2> := <var:X2> * <var:F> ; <var:X2> := <var:X2> * <var:F> ; <var:d> := <var:X2> ; <var:d> := <var:d> + <var:X1> ; <var:d> := <var:d> + <var:X0> \end{verbatim} Allow --- for all positive integers $ <var:p> $ --- $ <var:F> = <var:p> $ before the evaluation of this code , it follows that $ <var:d> = <nat:5> * <var:p> ^ <nat:2> + <nat:6> * <var:p> + <nat:8> $ when series of instructions has exited . \end{theorem} \begin{proof} The method of proof for our series of commands can be shown by Hoare logic . Stepping forward , the environment update statement letting $ <nat:8> $ toward $ <var:X0>$ . This advances $ \{ <var:F> = <var:p> \} $ as the postcondition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \} $ . Immediately after , we see the code assigning $ <nat:6> $ to $ <var:X1>$ . This moves the precondition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \} $ to the condition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:X1> = <nat:6> \} $ . This is shown to be logically sound through the assignment rule given by typical Hoare logic . Immediately after , the code \verb | <var:X1> := <var:X1> * <var:F> ; | . This code transfers the precondition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:X1> = <nat:6> \} $ as the condition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:X1> = <nat:6> \times <var:p> \} $ . This is deduced using the assignment law of standard Hoare logic . Following , the line letting $ <nat:5> $ to $ <var:X2>$ . This statement advances the condition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:X1> = <nat:6> \times <var:p> \} $ into $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:X1> = <nat:6> \times <var:p> \land <var:X2> = <nat:5> \} $ . Immediately after , we see the environment update statement letting $ <var:X2> * <var:F> $ to $ <var:X2>$ . This line moves the condition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:X1> = <nat:6> \times <var:p> \land <var:X2> = <nat:5> \} $ to the condition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:X1> = <nat:6> \times <var:p> \land <var:X2> = <nat:5> \times <var:p> \} $ . This is sound through the assignment rule of typical Hoare reasoning . Focusing on the proceeding line of code contained in the segment of code , we see the variable assignmet command \verb | <var:X2> := <var:X2> * <var:F> ; | . This statement advances the condition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:X1> = <nat:6> \times <var:p> \land <var:X2> = <nat:5> \times <var:p> \} $ as the condition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:X1> = <nat:6> \times <var:p> \land <var:X2> = <nat:5> \times <var:p> ^ <nat:2> \} $ . This is rigorously given using the assignment inference rule given by typical Hoare reasoning . Taking another step toward the proceeding statement contained in the set of commands , the variable update statement defining $ <var:X2> $ to $ <var:d>$ . This forwards the condition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:X1> = <nat:6> \times <var:p> \land <var:X2> = <nat:5> \times <var:p> ^ <nat:2> \} $ toward the condition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:X1> = <nat:6> \times <var:p> \land <var:d> = <nat:5> \times <var:p> ^ <nat:2> \} $ . Further , the variable binding line giving $ <var:d> + <var:X1> $ into $ <var:d>$ . This forwards the precondition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:X1> = <nat:6> \times <var:p> \land <var:d> = <nat:5> \times <var:p> ^ <nat:2> \} $ to the postcondition $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:d> = <nat:5> \times <var:p> ^ <nat:2> + <nat:6> \times <var:p> \} $ . Further , we have the command \verb | <var:d> := <var:d> + <var:X0> | . This moves $ \{ <var:F> = <var:p> \land <var:X0> = <nat:8> \land <var:d> = <nat:5> \times <var:p> ^ <nat:2> + <nat:6> \times <var:p> \} $ as $ \{ <var:F> = <var:p> \land <var:d> = <nat:5> \times <var:p> ^ <nat:2> + <nat:6> \times <var:p> + <nat:8> \} $ . This is deduced with the assignment law given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:F> = <var:p> }} <var:X0> := <nat:8> ; <var:X1> := <nat:6> ; <var:X1> := <var:X1> * <var:F> ; <var:X2> := <nat:5> ; <var:X2> := <var:X2> * <var:F> ; <var:X2> := <var:X2> * <var:F> ; <var:d> := <var:X2> ; <var:d> := <var:d> + <var:X1> ; <var:d> := <var:d> + <var:X0> {{ <var:d> = <nat:5> * <var:p> ^ <nat:2> + <nat:6> * <var:p> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:X0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:X0> = <nat:8> /\ <var:X1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:X0> = <nat:8> /\ <var:X1> = <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:X0> = <nat:8> /\ <var:X1> = <nat:6> * <var:p> /\ <var:X2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:X0> = <nat:8> /\ <var:X1> = <nat:6> * <var:p> /\ <var:X2> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:X0> = <nat:8> /\ <var:X1> = <nat:6> * <var:p> /\ <var:X2> = <nat:5> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:X0> = <nat:8> /\ <var:X1> = <nat:6> * <var:p> /\ <var:d> = <nat:5> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:X0> = <nat:8> /\ <var:d> = <nat:5> * <var:p> ^ <nat:2> + <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:p> /\ <var:d> = <nat:5> * <var:p> ^ <nat:2> + <nat:6> * <var:p> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 