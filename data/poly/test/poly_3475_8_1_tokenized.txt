\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} as \begin{verbatim} <var:k1> := <var:W> ; <var:k2> := <var:k1> * <var:W> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:7> ; <var:k2> := <var:k2> * <nat:1> ; <var:K> := <var:k2> <var:K> := <var:K> + <var:k1> <var:K> := <var:K> + <var:k0> \end{verbatim} Assume $ <var:W> = <var:h> $ ahead of evaluating our program , then we have $ <var:K> = <nat:1> \times <var:h> ^ <nat:2> + <nat:7> \times <var:h> + <nat:9> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques gives : \begin{eqnarray} \{ <var:W> = <var:h> \} \\ <var:k1> := <var:W> ; \\ \{ <var:W> = <var:h> \land <var:k1> = <var:h> \} \\ <var:k2> := <var:k1> * <var:W> ; \\ \{ <var:W> = <var:h> \land <var:k1> = <var:h> \land <var:k2> = <var:h> ^ <nat:2> \} \\ <var:k0> := <nat:9> ; \\ \{ <var:W> = <var:h> \land <var:k1> = <var:h> \land <var:k2> = <var:h> ^ <nat:2> \land <var:k0> = <nat:9> \} \\ <var:k1> := <var:k1> * <nat:7> ; \\ \{ <var:W> = <var:h> \land <var:k1> = <nat:7> \times <var:h> \land <var:k2> = <var:h> ^ <nat:2> \land <var:k0> = <nat:9> \} \\ <var:k2> := <var:k2> * <nat:1> ; \\ \{ <var:W> = <var:h> \land <var:k1> = <nat:7> \times <var:h> \land <var:k2> = <nat:1> \times <var:h> ^ <nat:2> \land <var:k0> = <nat:9> \} \\ <var:K> := <var:k2> \\ \{ <var:W> = <var:h> \land <var:k1> = <nat:7> \times <var:h> \land <var:k0> = <nat:9> \land <var:K> = <nat:1> \times <var:h> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:k1> \\ \{ <var:W> = <var:h> \land <var:k0> = <nat:9> \land <var:K> = <nat:1> \times <var:h> ^ <nat:2> + <nat:7> \times <var:h> \} \\ <var:K> := <var:K> + <var:k0> \\ \{ <var:W> = <var:h> \land <var:K> = <nat:1> \times <var:h> ^ <nat:2> + <nat:7> \times <var:h> + <nat:9> \} \end{eqnarray} Given the above , our series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:W> = <var:h> }} <var:k1> := <var:W> ; <var:k2> := <var:k1> * <var:W> ; <var:k0> := <nat:9> ; <var:k1> := <var:k1> * <nat:7> ; <var:k2> := <var:k2> * <nat:1> ; <var:K> := <var:k2> <var:K> := <var:K> + <var:k1> <var:K> := <var:K> + <var:k0> {{ <var:K> = <nat:1> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:k1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:k1> = <var:h> /\ <var:k2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:k1> = <var:h> /\ <var:k2> = <var:h> ^ <nat:2> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:k1> = <nat:7> * <var:h> /\ <var:k2> = <var:h> ^ <nat:2> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:k1> = <nat:7> * <var:h> /\ <var:k2> = <nat:1> * <var:h> ^ <nat:2> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:k1> = <nat:7> * <var:h> /\ <var:k0> = <nat:9> /\ <var:K> = <nat:1> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:k0> = <nat:9> /\ <var:K> = <nat:1> * <var:h> ^ <nat:2> + <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:h> /\ <var:K> = <nat:1> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 