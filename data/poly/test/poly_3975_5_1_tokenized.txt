\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:j> ; <var:Y0> := <nat:5> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:L> := <var:Y1> <var:L> := <var:L> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Given ( given all positive numbers $ <var:c> $ ) it to hold that $ <var:j> = <var:c> $ prior to interpreting our list of commands , then we see $ <var:L> = <nat:9> \cdot <var:c> + <nat:5> $ . \end{theorem} \begin{proof} See that the below decorated set of instructions . \begin{eqnarray} \{ <var:j> = <var:c> \} \\ <var:Y1> := <var:j> ; \\ \{ <var:j> = <var:c> \land <var:Y1> = <var:c> \} \\ <var:Y0> := <nat:5> ; \\ \{ <var:j> = <var:c> \land <var:Y1> = <var:c> \land <var:Y0> = <nat:5> \} \\ <var:Y1> := <var:Y1> * <nat:9> ; \\ \{ <var:j> = <var:c> \land <var:Y1> = <nat:9> \times <var:c> \land <var:Y0> = <nat:5> \} \\ <var:L> := <var:Y1> \\ \{ <var:j> = <var:c> \land <var:Y0> = <nat:5> \land <var:L> = <nat:9> \times <var:c> \} \\ <var:L> := <var:L> + <var:Y0> \\ \{ <var:j> = <var:c> \land <var:L> = <nat:9> \times <var:c> + <nat:5> \} \end{eqnarray} Applying usual Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <def:poly> := <var:Y1> := <var:j> ; <var:Y0> := <nat:5> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:L> := <var:Y1> <var:L> := <var:L> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:j> = <var:c> }} <def:poly> {{ <var:L> = <nat:9> * <var:c> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:Y1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:Y1> = <var:c> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:Y1> = <nat:9> * <var:c> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:Y0> = <nat:5> /\ <var:L> = <nat:9> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:c> /\ <var:L> = <nat:9> * <var:c> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 