\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:8> ; <var:g> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allowing assuming some positive numbers $ <var:w> $ that we have $ <var:F> = <var:w> $ prior to the evaluation of our code segment it holds that we see $ <var:g> = <nat:8> $ . \end{theorem} \begin{proof} Applying usual Hoare logic yields : \begin{eqnarray} \{ <var:F> = <var:w> \} \\ <var:R0> := <nat:8> ; \\ \{ <var:F> = <var:w> \land <var:R0> = <nat:8> \} \\ <var:g> := <var:R0> \\ \{ <var:F> = <var:w> \land <var:g> = <nat:8> \} \end{eqnarray} Thus , this list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:8> ; <var:g> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:F> = <var:w> }} <def:poly> {{ <var:g> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:w> /\ <var:g> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 