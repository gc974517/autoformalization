\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:2> ; <var:J> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> . Assume that $ <var:c> = <var:X> $ given any positive coefficients $ <var:X> $ ahead of interpreting this segment of code , it follows that we have $ <var:J> = <nat:2> $ once series of instructions has executed . \end{theorem} \begin{proof} The method of proof for our series of instructions is given through usual Hoare reasoning . Observing the next command in the list of instructions , the assignment statement \verb | <var:z0> := <nat:2> ; | . This line moves the condition $ \{ <var:c> = <var:X> \} $ into $ \{ <var:c> = <var:X> \land <var:z0> = <nat:2> \} $ . This is known to be sound with the assignment scheme defined in standard Hoare reasoning . Stepping forward , we have the assignment code binding $ <var:z0$ into $ <var:J>$ . This line takes the precondition $ \{ <var:c> = <var:X> \land <var:z0> = <nat:2> \} $ to the condition $ \{ <var:c> = <var:X> \land <var:J> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:2> ; <var:J> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:c> = <var:X> }} <def:poly> {{ <var:J> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:J> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 