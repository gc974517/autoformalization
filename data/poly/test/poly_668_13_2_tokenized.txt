\begin{document} \begin{theorem} Define a list of commands as follows \begin{verbatim} <var:j> := <nat:3> ; <var:j> := <var:j> * <var:s> ; <var:j> := <nat:4> + <var:j> * <var:s> ; <var:j> := <nat:4> + <var:j> * <var:s> ; <var:j> := <nat:4> + <var:j> * <var:s> ; <var:j> := <nat:4> + <var:j> * <var:s> ; <var:j> := <nat:2> + <var:j> * <var:s> ; <var:j> := <nat:4> + <var:j> * <var:s> ; <var:j> := <nat:1> + <var:j> * <var:s> ; <var:j> := <nat:1> + <var:j> * <var:s> ; <var:j> := <var:j> * <var:s> ; <var:j> := <nat:1> + <var:j> * <var:s> ; <var:j> := <nat:2> + <var:j> * <var:s> \end{verbatim} Assuming it to be that $ <var:s> = <var:b> $ before evaluating our series of commands , it follows that we see $ <var:j> = <nat:3> \times <var:b> ^ <nat:12> + <nat:4> \times <var:b> ^ <nat:10> + <nat:4> \times <var:b> ^ <nat:9> + <nat:4> \times <var:b> ^ <nat:8> + <nat:4> \times <var:b> ^ <nat:7> + <nat:2> \times <var:b> ^ <nat:6> + <nat:4> \times <var:b> ^ <nat:5> + <nat:1> \times <var:b> ^ <nat:4> + <nat:1> \times <var:b> ^ <nat:3> + <nat:1> \times <var:b> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code is shown using usual Hoare logic . Moving forward , the assignment line giving $ <nat:3> $ as $ <var:j>$ . This statement forwards the precondition $ \{ <var:s> = <var:b> \} $ as the postcondition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \} $ . Advancing on , we see the line letting $ <var:j> * <var:s> $ as $ <var:j>$ . This transfers $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \} $ toward the condition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> + \} $ . Shifting focus toward the upcoming command seen in the code segment , the variable update code \verb | <var:j> := <nat:4> + <var:j> * <var:s> ; | . This code moves the precondition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> + \} $ into the condition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:2> + <nat:4> \} $ . This is shown through the assignment rule obtained from usual Hoare reasoning . Further , the variable binding code \verb | <var:j> := <nat:4> + <var:j> * <var:s> ; | . This redefines $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:2> + <nat:4> \} $ as $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> + <nat:4> \} $ . This is deduced using the assignment inference rule found in standard Hoare techniques . Moving on , we have the assignment line \verb | <var:j> := <nat:4> + <var:j> * <var:s> ; | . This statement takes $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> + <nat:4> \} $ as the postcondition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:4> \} $ . This is shown through the assignment scheme given by typical Hoare logic . Looking at the upcoming piece of code seen in our code , we see the variable update statement \verb | <var:j> := <nat:4> + <var:j> * <var:s> ; | . This command takes $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:4> \} $ to $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:4> \} $ . Focusing on the next bit of code found in the set of commands , the variable update code letting $ <nat:2> + <var:j> * <var:s> $ to $ <var:j>$ . This command redefines $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:4> \} $ to $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:6> + <nat:4> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:2> \} $ . This is shown to be logically sound by the assignment law given in usual Hoare techniques . Shifting focus toward the upcoming bit of code contained in our series of commands , we have the command letting $ <nat:4> + <var:j> * <var:s> $ into $ <var:j>$ . This transfers the precondition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:6> + <nat:4> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:2> \} $ into the condition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:7> + <nat:4> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:4> \} $ . This is known to be sound with the assignment rule from typical Hoare reasoning . Following , the variable update code \verb | <var:j> := <nat:1> + <var:j> * <var:s> ; | . This advances $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:7> + <nat:4> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:2> \cdot <var:b> + <nat:4> \} $ as the condition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:8> + <nat:4> \cdot <var:b> ^ <nat:6> + <nat:4> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:1> \} $ . This is shown to be logically sound using the assignment law of Hoare techniques . Taking a look at the next command contained in the list of instructions , we have the variable update line \verb | <var:j> := <nat:1> + <var:j> * <var:s> ; | . This command forwards the precondition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:8> + <nat:4> \cdot <var:b> ^ <nat:6> + <nat:4> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:2> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:1> \} $ to the postcondition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:9> + <nat:4> \cdot <var:b> ^ <nat:7> + <nat:4> \cdot <var:b> ^ <nat:6> + <nat:4> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:4> + <nat:2> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:1> \cdot <var:b> + <nat:1> \} $ . Stepping through , we have the environment update line \verb | <var:j> := <var:j> * <var:s> ; | . This moves $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:9> + <nat:4> \cdot <var:b> ^ <nat:7> + <nat:4> \cdot <var:b> ^ <nat:6> + <nat:4> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:4> + <nat:2> \cdot <var:b> ^ <nat:3> + <nat:4> \cdot <var:b> ^ <nat:2> + <nat:1> \cdot <var:b> + <nat:1> \} $ into the condition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:10> + <nat:4> \cdot <var:b> ^ <nat:8> + <nat:4> \cdot <var:b> ^ <nat:7> + <nat:4> \cdot <var:b> ^ <nat:6> + <nat:4> \cdot <var:b> ^ <nat:5> + <nat:2> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:1> \cdot <var:b> + \} $ . Looking at the following bit of code seen in our set of instructions , the assignment statement \verb | <var:j> := <nat:1> + <var:j> * <var:s> ; | . This line takes the condition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:10> + <nat:4> \cdot <var:b> ^ <nat:8> + <nat:4> \cdot <var:b> ^ <nat:7> + <nat:4> \cdot <var:b> ^ <nat:6> + <nat:4> \cdot <var:b> ^ <nat:5> + <nat:2> \cdot <var:b> ^ <nat:4> + <nat:4> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:1> \cdot <var:b> + \} $ as the condition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:11> + <nat:4> \cdot <var:b> ^ <nat:9> + <nat:4> \cdot <var:b> ^ <nat:8> + <nat:4> \cdot <var:b> ^ <nat:7> + <nat:4> \cdot <var:b> ^ <nat:6> + <nat:2> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:4> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:1> \} $ . Shifting focus toward the upcoming statement seen in the segment of code , we see the assignment line yielding $ <nat:2> + <var:j> * <var:s$ toward $ <var:j>$ . This statement forwards the precondition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:11> + <nat:4> \cdot <var:b> ^ <nat:9> + <nat:4> \cdot <var:b> ^ <nat:8> + <nat:4> \cdot <var:b> ^ <nat:7> + <nat:4> \cdot <var:b> ^ <nat:6> + <nat:2> \cdot <var:b> ^ <nat:5> + <nat:4> \cdot <var:b> ^ <nat:4> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> ^ <nat:2> + <nat:1> \} $ to the condition $ \{ <var:s> = <var:b> \land <var:j> = <nat:3> \cdot <var:b> ^ <nat:12> + <nat:4> \cdot <var:b> ^ <nat:10> + <nat:4> \cdot <var:b> ^ <nat:9> + <nat:4> \cdot <var:b> ^ <nat:8> + <nat:4> \cdot <var:b> ^ <nat:7> + <nat:2> \cdot <var:b> ^ <nat:6> + <nat:4> \cdot <var:b> ^ <nat:5> + <nat:1> \cdot <var:b> ^ <nat:4> + <nat:1> \cdot <var:b> ^ <nat:3> + <nat:1> \cdot <var:b> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:s> = <var:b> }} <var:j> := <nat:3> ; <var:j> := <var:j> * <var:s> ; <var:j> := <nat:4> + <var:j> * <var:s> ; <var:j> := <nat:4> + <var:j> * <var:s> ; <var:j> := <nat:4> + <var:j> * <var:s> ; <var:j> := <nat:4> + <var:j> * <var:s> ; <var:j> := <nat:2> + <var:j> * <var:s> ; <var:j> := <nat:4> + <var:j> * <var:s> ; <var:j> := <nat:1> + <var:j> * <var:s> ; <var:j> := <nat:1> + <var:j> * <var:s> ; <var:j> := <var:j> * <var:s> ; <var:j> := <nat:1> + <var:j> * <var:s> ; <var:j> := <nat:2> + <var:j> * <var:s> {{ <var:j> = <nat:3> * <var:b> ^ <nat:12> + <nat:4> * <var:b> ^ <nat:10> + <nat:4> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:j> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:j> = <nat:3> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:3> + <nat:4> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:10> + <nat:4> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:11> + <nat:4> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:12> + <nat:4> * <var:b> ^ <nat:10> + <nat:4> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 