\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:J1> := <var:n> ; <var:J2> := <var:J1> * <var:n> ; <var:J3> := <var:J2> * <var:n> ; <var:J4> := <var:J3> * <var:n> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:7> ; <var:J2> := <var:J2> * <nat:6> ; <var:J3> := <var:J3> * <nat:2> ; <var:J4> := <var:J4> * <nat:1> ; <var:e> := <var:J4> <var:e> := <var:e> + <var:J3> <var:e> := <var:e> + <var:J2> <var:e> := <var:e> + <var:J1> <var:e> := <var:e> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Assume ( letting positive integer coefficients $ <var:o> $ ) that we have $ <var:n> = <var:o> $ ahead of the execution of our code segment , then we see $ <var:e> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:4> $ once code finishes . \end{theorem} \begin{proof} The method of proof for our code segment can be accomplished through usual Hoare logic . Moving on to the subsequent line of code found in our code segment , the binding code letting $ <var:n> $ to $ <var:J1>$ . This line forwards the condition $ \{ <var:n> = <var:o> \} $ toward the condition $ \{ <var:n> = <var:o> \land <var:J1> = <var:o> \} $ . This is ensured by the assignment law given in typical Hoare logic . Now , we have the assignment line \verb | <var:J2> := <var:J1> * <var:n> ; | . This line forwards $ \{ <var:n> = <var:o> \land <var:J1> = <var:o> \} $ into $ \{ <var:n> = <var:o> \land <var:J1> = <var:o> \land <var:J2> = <var:o> ^ <nat:2> \} $ . This is given by the assignment inference rule given by standard Hoare techniques . Looking at the upcoming bit of code contained in the segment of code , we have the code assigning $ <var:J2> * <var:n> $ toward $ <var:J3>$ . This takes the precondition $ \{ <var:n> = <var:o> \land <var:J1> = <var:o> \land <var:J2> = <var:o> ^ <nat:2> \} $ into the condition $ \{ <var:n> = <var:o> \land <var:J1> = <var:o> \land <var:J2> = <var:o> ^ <nat:2> \land <var:J3> = <var:o> ^ <nat:3> \} $ . This is rigorously given with the assignment law found in standard Hoare reasoning . Taking another step toward the subsequent line of code in our code segment , we see the binding command \verb | <var:J4> := <var:J3> * <var:n> ; | . This moves the precondition $ \{ <var:n> = <var:o> \land <var:J1> = <var:o> \land <var:J2> = <var:o> ^ <nat:2> \land <var:J3> = <var:o> ^ <nat:3> \} $ into $ \{ <var:n> = <var:o> \land <var:J1> = <var:o> \land <var:J2> = <var:o> ^ <nat:2> \land <var:J3> = <var:o> ^ <nat:3> \land <var:J4> = <var:o> ^ <nat:4> \} $ . This is ensured through the assignment scheme defined by Hoare techniques . Keeping momentum , we see the assignment command \verb | <var:J0> := <nat:4> ; | . This command redefines $ \{ <var:n> = <var:o> \land <var:J1> = <var:o> \land <var:J2> = <var:o> ^ <nat:2> \land <var:J3> = <var:o> ^ <nat:3> \land <var:J4> = <var:o> ^ <nat:4> \} $ toward the postcondition $ \{ <var:n> = <var:o> \land <var:J1> = <var:o> \land <var:J2> = <var:o> ^ <nat:2> \land <var:J3> = <var:o> ^ <nat:3> \land <var:J4> = <var:o> ^ <nat:4> \land <var:J0> = <nat:4> \} $ . This is shown with the assignment law from standard Hoare reasoning . Moving forward to the next step , we see the environment update statement giving $ <var:J1> * <nat:7> $ into $ <var:J1>$ . This code moves the condition $ \{ <var:n> = <var:o> \land <var:J1> = <var:o> \land <var:J2> = <var:o> ^ <nat:2> \land <var:J3> = <var:o> ^ <nat:3> \land <var:J4> = <var:o> ^ <nat:4> \land <var:J0> = <nat:4> \} $ as the postcondition $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J2> = <var:o> ^ <nat:2> \land <var:J3> = <var:o> ^ <nat:3> \land <var:J4> = <var:o> ^ <nat:4> \land <var:J0> = <nat:4> \} $ . Following , the environment update line letting $ <var:J2> * <nat:6> $ toward $ <var:J2>$ . This advances the precondition $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J2> = <var:o> ^ <nat:2> \land <var:J3> = <var:o> ^ <nat:3> \land <var:J4> = <var:o> ^ <nat:4> \land <var:J0> = <nat:4> \} $ to $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J2> = <nat:6> * <var:o> ^ <nat:2> \land <var:J3> = <var:o> ^ <nat:3> \land <var:J4> = <var:o> ^ <nat:4> \land <var:J0> = <nat:4> \} $ . Honing in on the subsequent piece of code seen in the code , we have the code \verb | <var:J3> := <var:J3> * <nat:2> ; | . This takes the precondition $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J2> = <nat:6> * <var:o> ^ <nat:2> \land <var:J3> = <var:o> ^ <nat:3> \land <var:J4> = <var:o> ^ <nat:4> \land <var:J0> = <nat:4> \} $ toward $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J2> = <nat:6> * <var:o> ^ <nat:2> \land <var:J3> = <nat:2> * <var:o> ^ <nat:3> \land <var:J4> = <var:o> ^ <nat:4> \land <var:J0> = <nat:4> \} $ . This is rigorously given by the assignment scheme defined by usual Hoare techniques . Advancing to the next step , the variable binding code letting $ <var:J4> * <nat:1> $ into $ <var:J4>$ . This code redefines $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J2> = <nat:6> * <var:o> ^ <nat:2> \land <var:J3> = <nat:2> * <var:o> ^ <nat:3> \land <var:J4> = <var:o> ^ <nat:4> \land <var:J0> = <nat:4> \} $ to the condition $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J2> = <nat:6> * <var:o> ^ <nat:2> \land <var:J3> = <nat:2> * <var:o> ^ <nat:3> \land <var:J4> = <nat:1> * <var:o> ^ <nat:4> \land <var:J0> = <nat:4> \} $ . This is guaranteed with the assignment inference rule given by Hoare reasoning . Advancing , we see the variable assignmet command \verb | <var:e> := <var:J4> | . This command advances $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J2> = <nat:6> * <var:o> ^ <nat:2> \land <var:J3> = <nat:2> * <var:o> ^ <nat:3> \land <var:J4> = <nat:1> * <var:o> ^ <nat:4> \land <var:J0> = <nat:4> \} $ into the postcondition $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J2> = <nat:6> * <var:o> ^ <nat:2> \land <var:J3> = <nat:2> * <var:o> ^ <nat:3> \land <var:J0> = <nat:4> \land <var:e> = <nat:1> * <var:o> ^ <nat:4> \} $ . This is guaranteed using the assignment inference rule of Hoare logic . Observing the subsequent piece of code found in the program , we see the variable binding code \verb | <var:e> := <var:e> + <var:J3> | . This command advances $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J2> = <nat:6> * <var:o> ^ <nat:2> \land <var:J3> = <nat:2> * <var:o> ^ <nat:3> \land <var:J0> = <nat:4> \land <var:e> = <nat:1> * <var:o> ^ <nat:4> \} $ to the postcondition $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J2> = <nat:6> * <var:o> ^ <nat:2> \land <var:J0> = <nat:4> \land <var:e> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> \} $ . Observing the proceeding step seen in our set of instructions , the variable assignmet code defining $ <var:e> + <var:J2$ into $ <var:e>$ . This line redefines $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J2> = <nat:6> * <var:o> ^ <nat:2> \land <var:J0> = <nat:4> \land <var:e> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> \} $ to $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J0> = <nat:4> \land <var:e> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> \} $ . Taking another step toward the subsequent statement contained in our series of commands , the variable assignmet command \verb | <var:e> := <var:e> + <var:J1> | . This command moves the precondition $ \{ <var:n> = <var:o> \land <var:J1> = <nat:7> * <var:o> \land <var:J0> = <nat:4> \land <var:e> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> \} $ toward $ \{ <var:n> = <var:o> \land <var:J0> = <nat:4> \land <var:e> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:7> * <var:o> \} $ . This is guaranteed with the assignment rule defined in Hoare techniques . Moving forward to the next step , we have the variable binding line \verb | <var:e> := <var:e> + <var:J0> | . This moves the condition $ \{ <var:n> = <var:o> \land <var:J0> = <nat:4> \land <var:e> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:7> * <var:o> \} $ to $ \{ <var:n> = <var:o> \land <var:e> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:4> \} $ . This is deduced by the assignment rule found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <var:J4> : string := " <var:J4> " . Definition <def:poly> := <var:J1> := <var:n> ; <var:J2> := <var:J1> * <var:n> ; <var:J3> := <var:J2> * <var:n> ; <var:J4> := <var:J3> * <var:n> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:7> ; <var:J2> := <var:J2> * <nat:6> ; <var:J3> := <var:J3> * <nat:2> ; <var:J4> := <var:J4> * <nat:1> ; <var:e> := <var:J4> <var:e> := <var:e> + <var:J3> <var:e> := <var:e> + <var:J2> <var:e> := <var:e> + <var:J1> <var:e> := <var:e> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:n> = <var:o> }} <def:poly> {{ <var:e> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:J1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:J1> = <var:o> /\ <var:J2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:J1> = <var:o> /\ <var:J2> = <var:o> ^ <nat:2> /\ <var:J3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:J1> = <var:o> /\ <var:J2> = <var:o> ^ <nat:2> /\ <var:J3> = <var:o> ^ <nat:3> /\ <var:J4> = <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:J1> = <var:o> /\ <var:J2> = <var:o> ^ <nat:2> /\ <var:J3> = <var:o> ^ <nat:3> /\ <var:J4> = <var:o> ^ <nat:4> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:J1> = <nat:7> * <var:o> /\ <var:J2> = <var:o> ^ <nat:2> /\ <var:J3> = <var:o> ^ <nat:3> /\ <var:J4> = <var:o> ^ <nat:4> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:J1> = <nat:7> * <var:o> /\ <var:J2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:J3> = <var:o> ^ <nat:3> /\ <var:J4> = <var:o> ^ <nat:4> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:J1> = <nat:7> * <var:o> /\ <var:J2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:J3> = <nat:2> * <var:o> ^ <nat:3> /\ <var:J4> = <var:o> ^ <nat:4> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:J1> = <nat:7> * <var:o> /\ <var:J2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:J3> = <nat:2> * <var:o> ^ <nat:3> /\ <var:J4> = <nat:1> * <var:o> ^ <nat:4> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:J1> = <nat:7> * <var:o> /\ <var:J2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:J3> = <nat:2> * <var:o> ^ <nat:3> /\ <var:J0> = <nat:4> /\ <var:e> = <nat:1> * <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:J1> = <nat:7> * <var:o> /\ <var:J2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:J0> = <nat:4> /\ <var:e> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:J1> = <nat:7> * <var:o> /\ <var:J0> = <nat:4> /\ <var:e> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:J0> = <nat:4> /\ <var:e> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:7> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:o> /\ <var:e> = <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 