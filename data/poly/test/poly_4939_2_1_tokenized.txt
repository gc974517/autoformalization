\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U0> := <nat:6> ; <var:I> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Allowing it to be that $ <var:G> = <var:g> $ letting $ <var:g> \in \mathbb{N} $ before the evaluation of this code it follows that $ <var:I> = <nat:6> $ when list of commands has terminated . \end{theorem} \begin{proof} The course of logic for the program can be shown through usual Hoare logic . Honing in on the subsequent line found in the program , \verb | { <var:G> = <var:g> } <var:U0> := <nat:6> { <var:G> = <var:g> \land <var:U0> = <nat:6> } | . This is deduced using the law defined by typical Hoare logic . Going to the next step , we see \verb | { <var:G> = <var:g> } <var:U0> := <nat:6> { <var:G> = <var:g> \land <var:U0> = <nat:6> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:6> ; <var:I> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:G> = <var:g> }} <def:poly> {{ <var:I> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:g> /\ <var:I> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 