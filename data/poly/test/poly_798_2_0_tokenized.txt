\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:4> ; <var:n> := <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:t> = <var:S> $ ahead of the evaluation of the list of instructions then we see $ <var:n> = <nat:4> $ after program has finished executing . \end{theorem} \begin{proof} The method of proof for the set of commands is demonstrated through typical Hoare reasoning . Taking a look at the next piece of code seen in our program , we have the code \verb | <var:X0> := <nat:4> ; | . This command redefines the condition $ \{ <var:t> = <var:S> \} $ to the condition $ \{ <var:t> = <var:S> \land <var:X0> = <nat:4> \} $ . Going forward , we see the variable assignmet command \verb | <var:n> := <var:X0> | . This takes $ \{ <var:t> = <var:S> \land <var:X0> = <nat:4> \} $ into $ \{ <var:t> = <var:S> \land <var:n> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <def:poly> := <var:X0> := <nat:4> ; <var:n> := <var:X0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:t> = <var:S> }} <def:poly> {{ <var:n> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:X0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:S> /\ <var:n> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 