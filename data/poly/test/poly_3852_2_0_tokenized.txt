\begin{document} \begin{theorem} Take the following code as follows \begin{verbatim} <var:G0> := <nat:1> ; <var:W> := <var:G0> \end{verbatim} Given ( given every whole numbers $ <var:q> $ ) it to be that $ <var:z> = <var:q> $ ahead of running this program it follows that we see $ <var:W> = <nat:1> $ . \end{theorem} \begin{proof} The argument for this series of commands is shown by Hoare reasoning . Moving on to the subsequent line of code found in our program , we have the statement defining $ <nat:1> $ toward $ <var:G0>$ . This moves $ \{ <var:z> = <var:q> \} $ into $ \{ <var:z> = <var:q> \land <var:G0> = <nat:1> \} $ . This is guaranteed using the assignment law of Hoare techniques . Stepping forward , we have the line \verb | <var:W> := <var:G0> | . This redefines $ \{ <var:z> = <var:q> \land <var:G0> = <nat:1> \} $ as the postcondition $ \{ <var:z> = <var:q> \land <var:W> = <nat:1> \} $ . This is rigorously given with the assignment scheme given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:z> = <var:q> }} <var:G0> := <nat:1> ; <var:W> := <var:G0> {{ <var:W> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:W> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 