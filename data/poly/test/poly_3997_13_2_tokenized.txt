\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} such that \begin{verbatim} <var:r> := <nat:2> ; <var:r> := <nat:1> + <var:r> * <var:I> ; <var:r> := <nat:4> + <var:r> * <var:I> ; <var:r> := <nat:2> + <var:r> * <var:I> ; <var:r> := <nat:4> + <var:r> * <var:I> ; <var:r> := <var:r> * <var:I> ; <var:r> := <nat:3> + <var:r> * <var:I> ; <var:r> := <nat:1> + <var:r> * <var:I> ; <var:r> := <nat:1> + <var:r> * <var:I> ; <var:r> := <nat:1> + <var:r> * <var:I> ; <var:r> := <nat:3> + <var:r> * <var:I> ; <var:r> := <nat:3> + <var:r> * <var:I> ; <var:r> := <nat:3> + <var:r> * <var:I> \end{verbatim} Assuming it to hold that $ <var:I> = <var:g> $ before the evaluation of the set of commands , then we have $ <var:r> = <nat:2> \times <var:g> ^ <nat:12> + <nat:1> \times <var:g> ^ <nat:11> + <nat:4> \times <var:g> ^ <nat:10> + <nat:2> \times <var:g> ^ <nat:9> + <nat:4> \times <var:g> ^ <nat:8> + <nat:3> \times <var:g> ^ <nat:6> + <nat:1> \times <var:g> ^ <nat:5> + <nat:1> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:3> $ after code terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:g> \} \\ <var:r> := <nat:2> ; \\ \{ <var:I> = <var:g> \land <var:r> = <nat:2> \} \\ <var:r> := <nat:1> + <var:r> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:r> = <nat:2> * <var:g> + <nat:1> \} \\ <var:r> := <nat:4> + <var:r> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:r> = <nat:2> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:4> \} \\ <var:r> := <nat:2> + <var:r> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:r> = <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:2> \} \end{eqnarray} Advancing evaluating our list of instructions gives us : \begin{eqnarray} <var:r> := <nat:4> + <var:r> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:r> = <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:4> \} \\ <var:r> := <var:r> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:r> = <nat:2> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + \} \\ <var:r> := <nat:3> + <var:r> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:r> = <nat:2> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:3> \} \\ <var:r> := <nat:1> + <var:r> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:r> = <nat:2> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:3> * <var:g> + <nat:1> \} \\ <var:r> := <nat:1> + <var:r> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:r> = <nat:2> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:7> + <nat:4> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:1> \} \\ <var:r> := <nat:1> + <var:r> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:r> = <nat:2> * <var:g> ^ <nat:9> + <nat:1> * <var:g> ^ <nat:8> + <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:1> \} \end{eqnarray} Continuing the execution of the code produces : \begin{eqnarray} <var:r> := <nat:3> + <var:r> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:r> = <nat:2> * <var:g> ^ <nat:10> + <nat:1> * <var:g> ^ <nat:9> + <nat:4> * <var:g> ^ <nat:8> + <nat:2> * <var:g> ^ <nat:7> + <nat:4> * <var:g> ^ <nat:6> + <nat:3> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:3> \} \\ <var:r> := <nat:3> + <var:r> * <var:I> ; \\ \{ <var:I> = <var:g> \land <var:r> = <nat:2> * <var:g> ^ <nat:11> + <nat:1> * <var:g> ^ <nat:10> + <nat:4> * <var:g> ^ <nat:9> + <nat:2> * <var:g> ^ <nat:8> + <nat:4> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> \} \\ <var:r> := <nat:3> + <var:r> * <var:I> \\ \{ <var:I> = <var:g> \land <var:r> = <nat:2> * <var:g> ^ <nat:12> + <nat:1> * <var:g> ^ <nat:11> + <nat:4> * <var:g> ^ <nat:10> + <nat:2> * <var:g> ^ <nat:9> + <nat:4> * <var:g> ^ <nat:8> + <nat:3> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> \} \end{eqnarray} The application of typical Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:I> = <var:g> }} <var:r> := <nat:2> ; <var:r> := <nat:1> + <var:r> * <var:I> ; <var:r> := <nat:4> + <var:r> * <var:I> ; <var:r> := <nat:2> + <var:r> * <var:I> ; <var:r> := <nat:4> + <var:r> * <var:I> ; <var:r> := <var:r> * <var:I> ; <var:r> := <nat:3> + <var:r> * <var:I> ; <var:r> := <nat:1> + <var:r> * <var:I> ; <var:r> := <nat:1> + <var:r> * <var:I> ; <var:r> := <nat:1> + <var:r> * <var:I> ; <var:r> := <nat:3> + <var:r> * <var:I> ; <var:r> := <nat:3> + <var:r> * <var:I> ; <var:r> := <nat:3> + <var:r> * <var:I> {{ <var:r> = <nat:2> * <var:g> ^ <nat:12> + <nat:1> * <var:g> ^ <nat:11> + <nat:4> * <var:g> ^ <nat:10> + <nat:2> * <var:g> ^ <nat:9> + <nat:4> * <var:g> ^ <nat:8> + <nat:3> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:r> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:r> = <nat:2> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:r> = <nat:2> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:r> = <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:r> = <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:r> = <nat:2> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:r> = <nat:2> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:r> = <nat:2> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:3> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:r> = <nat:2> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:7> + <nat:4> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:r> = <nat:2> * <var:g> ^ <nat:9> + <nat:1> * <var:g> ^ <nat:8> + <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:r> = <nat:2> * <var:g> ^ <nat:10> + <nat:1> * <var:g> ^ <nat:9> + <nat:4> * <var:g> ^ <nat:8> + <nat:2> * <var:g> ^ <nat:7> + <nat:4> * <var:g> ^ <nat:6> + <nat:3> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:r> = <nat:2> * <var:g> ^ <nat:11> + <nat:1> * <var:g> ^ <nat:10> + <nat:4> * <var:g> ^ <nat:9> + <nat:2> * <var:g> ^ <nat:8> + <nat:4> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:g> /\ <var:r> = <nat:2> * <var:g> ^ <nat:12> + <nat:1> * <var:g> ^ <nat:11> + <nat:4> * <var:g> ^ <nat:10> + <nat:2> * <var:g> ^ <nat:9> + <nat:4> * <var:g> ^ <nat:8> + <nat:3> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 