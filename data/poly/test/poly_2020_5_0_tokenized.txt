\begin{document} \begin{theorem} Let the following code segment such that \begin{verbatim} <var:G0> := <nat:4> ; <var:G1> := <nat:2> ; <var:G1> := <var:G1> * <var:f> ; <var:T> := <var:G1> ; <var:T> := <var:T> + <var:G0> \end{verbatim} Allowing that $ <var:f> = <var:x> $ before interpreting our program , it follows that $ <var:T> = <nat:2> \cdot <var:x> + <nat:4> $ when set of commands finishes . \end{theorem} \begin{proof} Arguing the correctness of our code segment can be shown through usual Hoare logic . Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:f> = <var:x> \} & <var:G0> := <nat:4> & \{ <var:f> = <var:x> \land <var:G0> = <nat:4> \} \end{tabular} Moving on to the following bits of codefound in the code , we have \[ \begin{tabular} {rcl} \{ <var:f> = <var:x> \} & <var:G0> := <nat:4> & \{ <var:f> = <var:x> \land <var:G0> = <nat:4> \} \\ \{ <var:f> = <var:x> \land <var:G0> = <nat:4> \} & <var:G1> := <nat:2> & \{ <var:f> = <var:x> \land <var:G0> = <nat:4> \land <var:G1> = <nat:2> \} \\ \{ <var:f> = <var:x> \land <var:G0> = <nat:4> \land <var:G1> = <nat:2> \} & <var:G1> := <var:G1> * <var:f> & \{ <var:f> = <var:x> \land <var:G0> = <nat:4> \land <var:G1> = <nat:2> \cdot <var:x> \} \\ \{ <var:f> = <var:x> \land <var:G0> = <nat:4> \land <var:G1> = <nat:2> \cdot <var:x> \} & <var:T> := <var:G1> & \{ <var:f> = <var:x> \land <var:G0> = <nat:4> \land <var:T> = <nat:2> \cdot <var:x> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:f> = <var:x> }} <var:G0> := <nat:4> ; <var:G1> := <nat:2> ; <var:G1> := <var:G1> * <var:f> ; <var:T> := <var:G1> ; <var:T> := <var:T> + <var:G0> {{ <var:T> = <nat:2> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:G0> = <nat:4> /\ <var:T> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:T> = <nat:2> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 