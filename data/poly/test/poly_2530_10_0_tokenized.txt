\begin{document} \begin{theorem} We define a program in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:3> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:U> ; <var:j3> := <nat:9> ; <var:j3> := <var:j3> * <var:U> ; <var:j3> := <var:j3> * <var:U> ; <var:j3> := <var:j3> * <var:U> ; <var:Z> := <var:j3> ; <var:Z> := <var:Z> + <var:j1> ; <var:Z> := <var:Z> + <var:j0> \end{verbatim} Allow that we have $ <var:U> = <var:s> $ prior to evaluating our code segment , it must be that we see $ <var:Z> = <nat:9> \cdot <var:s> ^ <nat:3> + <nat:4> \cdot <var:s> + <nat:3> $ once list of instructions has finished . \end{theorem} \begin{proof} The flow of logic for this list of commands can be given by typical Hoare reasoning . Stepping forward , we have the variable assignmet line binding $ <nat:3> $ toward $ <var:j0>$ . This statement transfers the condition $ \{ <var:U> = <var:s> \} $ into $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \} $ . This is given through the assignment inference rule obtained from typical Hoare logic . Advancing to the upcoming piece of code contained in our segment of code , we see the variable update statement defining $ <nat:4> $ toward $ <var:j1>$ . This moves $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \} $ toward the condition $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \} $ . Immediately after , we see the variable update command \verb | <var:j1> := <var:j1> * <var:U> ; | . This advances $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \} $ into the postcondition $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:s> \} $ . This is deduced through the assignment inference rule of typical Hoare logic . Advancing to the next line seen in our set of commands , we see the variable assignmet command letting $ <nat:9> $ as $ <var:j3>$ . This command takes $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:s> \} $ to the postcondition $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:s> \land <var:j3> = <nat:9> \} $ . Advancing , we see the variable update command \verb | <var:j3> := <var:j3> * <var:U> ; | . This takes the precondition $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:s> \land <var:j3> = <nat:9> \} $ to $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:s> \land <var:j3> = <nat:9> \times <var:s> \} $ . Honing in on the following statement seen in our code segment , we see the code defining $ <var:j3> * <var:U> $ as $ <var:j3>$ . This statement moves the precondition $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:s> \land <var:j3> = <nat:9> \times <var:s> \} $ as the condition $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:s> \land <var:j3> = <nat:9> \times <var:s> ^ <nat:2> \} $ . Shifting focus toward the proceeding line contained in the list of instructions , the assignment command \verb | <var:j3> := <var:j3> * <var:U> ; | . This forwards $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:s> \land <var:j3> = <nat:9> \times <var:s> ^ <nat:2> \} $ into the condition $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:s> \land <var:j3> = <nat:9> \times <var:s> ^ <nat:3> \} $ . This is shown using the assignment scheme defined in standard Hoare reasoning . Moving on to the next step , we have the variable update command yielding $ <var:j3> $ to $ <var:Z>$ . This command takes $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:s> \land <var:j3> = <nat:9> \times <var:s> ^ <nat:3> \} $ to the condition $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:s> \land <var:Z> = <nat:9> \times <var:s> ^ <nat:3> \} $ . Moving forward , we have the binding statement yielding $ <var:Z> + <var:j1> $ toward $ <var:Z>$ . This moves the precondition $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:s> \land <var:Z> = <nat:9> \times <var:s> ^ <nat:3> \} $ toward the condition $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:Z> = <nat:9> \times <var:s> ^ <nat:3> + <nat:4> \times <var:s> \} $ . Next , we have the command assigning $ <var:Z> + <var:j0$ as $ <var:Z>$ . This code takes $ \{ <var:U> = <var:s> \land <var:j0> = <nat:3> \land <var:Z> = <nat:9> \times <var:s> ^ <nat:3> + <nat:4> \times <var:s> \} $ toward the condition $ \{ <var:U> = <var:s> \land <var:Z> = <nat:9> \times <var:s> ^ <nat:3> + <nat:4> \times <var:s> + <nat:3> \} $ . This is given by the assignment law from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:U> = <var:s> }} <var:j0> := <nat:3> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:U> ; <var:j3> := <nat:9> ; <var:j3> := <var:j3> * <var:U> ; <var:j3> := <var:j3> * <var:U> ; <var:j3> := <var:j3> * <var:U> ; <var:Z> := <var:j3> ; <var:Z> := <var:Z> + <var:j1> ; <var:Z> := <var:Z> + <var:j0> {{ <var:Z> = <nat:9> * <var:s> ^ <nat:3> + <nat:4> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:4> * <var:s> /\ <var:j3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:4> * <var:s> /\ <var:j3> = <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:4> * <var:s> /\ <var:j3> = <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:4> * <var:s> /\ <var:j3> = <nat:9> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:4> * <var:s> /\ <var:Z> = <nat:9> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:j0> = <nat:3> /\ <var:Z> = <nat:9> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:s> /\ <var:Z> = <nat:9> * <var:s> ^ <nat:3> + <nat:4> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 