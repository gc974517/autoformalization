\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f1> := <var:E> ; <var:f2> := <var:f1> * <var:E> ; <var:f3> := <var:f2> * <var:E> ; <var:f4> := <var:f3> * <var:E> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:3> ; <var:f4> := <var:f4> * <nat:7> ; <var:o> := <var:f4> <var:o> := <var:o> + <var:f2> <var:o> := <var:o> + <var:f1> <var:o> := <var:o> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Assume --- assuming some whole numbers $ <var:i> $ --- that $ <var:E> = <var:i> $ prior to the evaluation of this code , it must be that we see $ <var:o> = <nat:7> \times <var:i> ^ <nat:4> + <nat:3> \times <var:i> ^ <nat:2> + <nat:5> \times <var:i> + <nat:4> $ when series of instructions is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for our program can be given through the following decorated series of instructions . \begin{eqnarray} \{ <var:E> = <var:i> \} \\ <var:f1> := <var:E> ; \\ \{ <var:E> = <var:i> \land <var:f1> = <var:i> \} \\ <var:f2> := <var:f1> * <var:E> ; \\ \{ <var:E> = <var:i> \land <var:f1> = <var:i> \land <var:f2> = <var:i> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:E> ; \\ \{ <var:E> = <var:i> \land <var:f1> = <var:i> \land <var:f2> = <var:i> ^ <nat:2> \land <var:f3> = <var:i> ^ <nat:3> \} \\ <var:f4> := <var:f3> * <var:E> ; \\ \{ <var:E> = <var:i> \land <var:f1> = <var:i> \land <var:f2> = <var:i> ^ <nat:2> \land <var:f3> = <var:i> ^ <nat:3> \land <var:f4> = <var:i> ^ <nat:4> \} \\ <var:f0> := <nat:4> ; \\ \{ <var:E> = <var:i> \land <var:f1> = <var:i> \land <var:f2> = <var:i> ^ <nat:2> \land <var:f3> = <var:i> ^ <nat:3> \land <var:f4> = <var:i> ^ <nat:4> \land <var:f0> = <nat:4> \} \\ <var:f1> := <var:f1> * <nat:5> ; \\ \{ <var:E> = <var:i> \land <var:f1> = <nat:5> * <var:i> \land <var:f2> = <var:i> ^ <nat:2> \land <var:f3> = <var:i> ^ <nat:3> \land <var:f4> = <var:i> ^ <nat:4> \land <var:f0> = <nat:4> \} \\ <var:f2> := <var:f2> * <nat:3> ; \\ \{ <var:E> = <var:i> \land <var:f1> = <nat:5> * <var:i> \land <var:f2> = <nat:3> * <var:i> ^ <nat:2> \land <var:f3> = <var:i> ^ <nat:3> \land <var:f4> = <var:i> ^ <nat:4> \land <var:f0> = <nat:4> \} \\ <var:f4> := <var:f4> * <nat:7> ; \\ \{ <var:E> = <var:i> \land <var:f1> = <nat:5> * <var:i> \land <var:f2> = <nat:3> * <var:i> ^ <nat:2> \land <var:f3> = <var:i> ^ <nat:3> \land <var:f4> = <nat:7> * <var:i> ^ <nat:4> \land <var:f0> = <nat:4> \} \\ <var:o> := <var:f4> \\ \{ <var:E> = <var:i> \land <var:f1> = <nat:5> * <var:i> \land <var:f2> = <nat:3> * <var:i> ^ <nat:2> \land <var:f3> = <var:i> ^ <nat:3> \land <var:f0> = <nat:4> \land <var:o> = <nat:7> * <var:i> ^ <nat:4> \} \\ <var:o> := <var:o> + <var:f2> \\ \{ <var:E> = <var:i> \land <var:f1> = <nat:5> * <var:i> \land <var:f0> = <nat:4> \land <var:o> = <nat:7> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:f1> \\ \{ <var:E> = <var:i> \land <var:f0> = <nat:4> \land <var:o> = <nat:7> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:2> + <nat:5> * <var:i> \} \\ <var:o> := <var:o> + <var:f0> \\ \{ <var:E> = <var:i> \land <var:o> = <nat:7> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:2> + <nat:5> * <var:i> + <nat:4> \} \end{eqnarray} Using Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <var:f4> : string := " <var:f4> " . Definition <def:poly> := <var:f1> := <var:E> ; <var:f2> := <var:f1> * <var:E> ; <var:f3> := <var:f2> * <var:E> ; <var:f4> := <var:f3> * <var:E> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:3> ; <var:f4> := <var:f4> * <nat:7> ; <var:o> := <var:f4> <var:o> := <var:o> + <var:f2> <var:o> := <var:o> + <var:f1> <var:o> := <var:o> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:E> = <var:i> }} <def:poly> {{ <var:o> = <nat:7> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:2> + <nat:5> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:f1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:f1> = <var:i> /\ <var:f2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:f1> = <var:i> /\ <var:f2> = <var:i> ^ <nat:2> /\ <var:f3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:f1> = <var:i> /\ <var:f2> = <var:i> ^ <nat:2> /\ <var:f3> = <var:i> ^ <nat:3> /\ <var:f4> = <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:f1> = <var:i> /\ <var:f2> = <var:i> ^ <nat:2> /\ <var:f3> = <var:i> ^ <nat:3> /\ <var:f4> = <var:i> ^ <nat:4> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:f1> = <nat:5> * <var:i> /\ <var:f2> = <var:i> ^ <nat:2> /\ <var:f3> = <var:i> ^ <nat:3> /\ <var:f4> = <var:i> ^ <nat:4> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:f1> = <nat:5> * <var:i> /\ <var:f2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:f3> = <var:i> ^ <nat:3> /\ <var:f4> = <var:i> ^ <nat:4> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:f1> = <nat:5> * <var:i> /\ <var:f2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:f3> = <var:i> ^ <nat:3> /\ <var:f4> = <nat:7> * <var:i> ^ <nat:4> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:f1> = <nat:5> * <var:i> /\ <var:f2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:f3> = <var:i> ^ <nat:3> /\ <var:f0> = <nat:4> /\ <var:o> = <nat:7> * <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:f1> = <nat:5> * <var:i> /\ <var:f0> = <nat:4> /\ <var:o> = <nat:7> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:f0> = <nat:4> /\ <var:o> = <nat:7> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:2> + <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:i> /\ <var:o> = <nat:7> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:2> + <nat:5> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 