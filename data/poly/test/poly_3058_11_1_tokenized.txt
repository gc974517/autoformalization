\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:k> ; <var:b2> := <var:b1> * <var:k> ; <var:b3> := <var:b2> * <var:k> ; <var:b0> := <nat:1> ; <var:b1> := <var:b1> * <nat:9> ; <var:b2> := <var:b2> * <nat:7> ; <var:b3> := <var:b3> * <nat:6> ; <var:W> := <var:b3> <var:W> := <var:W> + <var:b2> <var:W> := <var:W> + <var:b1> <var:W> := <var:W> + <var:b0> \end{verbatim} Assume , given every positive integer coefficients $ <var:T> $ , that $ <var:k> = <var:T> $ ahead of executing the series of commands it must be that we see $ <var:W> = <nat:6> * <var:T> ^ <nat:3> + <nat:7> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:1> $ once program has finished . \end{theorem} \begin{proof} The flow of logic for this series of instructions is evident using Hoare logic . Looking at the subsequent bit of code found in our code , \[ \begin{tabular} {rcl} \{ <var:k> = <var:T> \} & <var:b1> := <var:k> & \{ <var:k> = <var:T> \land <var:b1> = <var:T> \} \end{tabular} This is ensured by the binding law given by standard Hoare techniques . Shifting focus toward the subsequent statements in the list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:k> = <var:T> \} & <var:b1> := <var:k> & \{ <var:k> = <var:T> \land <var:b1> = <var:T> \} \\ \{ <var:k> = <var:T> \land <var:b1> = <var:T> \} & <var:b2> := <var:b1> * <var:k> & \{ <var:k> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \} \\ \{ <var:k> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \} & <var:b3> := <var:b2> * <var:k> & \{ <var:k> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \} \\ \{ <var:k> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \} & <var:b0> := <nat:1> & \{ <var:k> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \land <var:b0> = <nat:1> \} \\ \{ <var:k> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \land <var:b0> = <nat:1> \} & <var:b1> := <var:b1> * <nat:9> & \{ <var:k> = <var:T> \land <var:b1> = <nat:9> \times <var:T> \land <var:b2> = <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \land <var:b0> = <nat:1> \} \\ \{ <var:k> = <var:T> \land <var:b1> = <nat:9> \times <var:T> \land <var:b2> = <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \land <var:b0> = <nat:1> \} & <var:b2> := <var:b2> * <nat:7> & \{ <var:k> = <var:T> \land <var:b1> = <nat:9> \times <var:T> \land <var:b2> = <nat:7> \times <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \land <var:b0> = <nat:1> \} \\ \{ <var:k> = <var:T> \land <var:b1> = <nat:9> \times <var:T> \land <var:b2> = <nat:7> \times <var:T> ^ <nat:2> \land <var:b3> = <var:T> ^ <nat:3> \land <var:b0> = <nat:1> \} & <var:b3> := <var:b3> * <nat:6> & \{ <var:k> = <var:T> \land <var:b1> = <nat:9> \times <var:T> \land <var:b2> = <nat:7> \times <var:T> ^ <nat:2> \land <var:b3> = <nat:6> \times <var:T> ^ <nat:3> \land <var:b0> = <nat:1> \} \\ \{ <var:k> = <var:T> \land <var:b1> = <nat:9> \times <var:T> \land <var:b2> = <nat:7> \times <var:T> ^ <nat:2> \land <var:b3> = <nat:6> \times <var:T> ^ <nat:3> \land <var:b0> = <nat:1> \} & <var:W> := <var:b3& \{ <var:k> = <var:T> \land <var:b1> = <nat:9> \times <var:T> \land <var:b2> = <nat:7> \times <var:T> ^ <nat:2> \land <var:b0> = <nat:1> \land <var:W> = <nat:6> \times <var:T> ^ <nat:3> \} \end{tabular} Jumping to the subsequent commands seen in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:k> = <var:T> \} & <var:b1> := <var:k> & \{ <var:k> = <var:T> \land <var:b1> = <var:T> \} \\ \{ <var:k> = <var:T> \land <var:b1> = <var:T> \} & <var:b2> := <var:b1> * <var:k> & \{ <var:k> = <var:T> \land <var:b1> = <var:T> \land <var:b2> = <var:T> ^ <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:k> = <var:T> }} <var:b1> := <var:k> ; <var:b2> := <var:b1> * <var:k> ; <var:b3> := <var:b2> * <var:k> ; <var:b0> := <nat:1> ; <var:b1> := <var:b1> * <nat:9> ; <var:b2> := <var:b2> * <nat:7> ; <var:b3> := <var:b3> * <nat:6> ; <var:W> := <var:b3> <var:W> := <var:W> + <var:b2> <var:W> := <var:W> + <var:b1> <var:W> := <var:W> + <var:b0> {{ <var:W> = <nat:6> * <var:T> ^ <nat:3> + <nat:7> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:b1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <var:T> ^ <nat:2> /\ <var:b3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:b1> = <var:T> /\ <var:b2> = <var:T> ^ <nat:2> /\ <var:b3> = <var:T> ^ <nat:3> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:b1> = <nat:9> * <var:T> /\ <var:b2> = <var:T> ^ <nat:2> /\ <var:b3> = <var:T> ^ <nat:3> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:b1> = <nat:9> * <var:T> /\ <var:b2> = <nat:7> * <var:T> ^ <nat:2> /\ <var:b3> = <var:T> ^ <nat:3> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:b1> = <nat:9> * <var:T> /\ <var:b2> = <nat:7> * <var:T> ^ <nat:2> /\ <var:b3> = <nat:6> * <var:T> ^ <nat:3> /\ <var:b0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:b1> = <nat:9> * <var:T> /\ <var:b2> = <nat:7> * <var:T> ^ <nat:2> /\ <var:b0> = <nat:1> /\ <var:W> = <nat:6> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:b1> = <nat:9> * <var:T> /\ <var:b0> = <nat:1> /\ <var:W> = <nat:6> * <var:T> ^ <nat:3> + <nat:7> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:b0> = <nat:1> /\ <var:W> = <nat:6> * <var:T> ^ <nat:3> + <nat:7> * <var:T> ^ <nat:2> + <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:W> = <nat:6> * <var:T> ^ <nat:3> + <nat:7> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 