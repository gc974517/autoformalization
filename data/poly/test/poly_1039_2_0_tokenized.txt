\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:5> ; <var:Z> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:U> = <var:Q> $ before the execution of this series of instructions then $ <var:Z> = <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for our program is accomplished through usual Hoare techniques . Moving on to the upcoming commands seen in our set of commands , we have \verb | { <var:U> = <var:Q> } <var:R0> := <nat:5> { <var:U> = <var:Q> \land <var:R0> = <nat:5> } | and \verb | { <var:U> = <var:Q> \land <var:R0> = <nat:5> } <var:Z> := <var:R0{ <var:U> = <var:Q> \land <var:Z> = <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:5> ; <var:Z> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:U> = <var:Q> }} <def:poly> {{ <var:Z> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:Q> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:Q> /\ <var:Z> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 