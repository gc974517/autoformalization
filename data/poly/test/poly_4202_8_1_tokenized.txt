\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f1> := <var:V> ; <var:f2> := <var:f1> * <var:V> ; <var:f0> := <nat:7> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:9> ; <var:W> := <var:f2> <var:W> := <var:W> + <var:f1> <var:W> := <var:W> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allow , given every natural numbers $ <var:O> $ , $ <var:V> = <var:O> $ before running the series of commands then we have $ <var:W> = <nat:9> \cdot <var:O> ^ <nat:2> + <nat:5> \cdot <var:O> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:V> = <var:O> \} \\ <var:f1> := <var:V> ; \\ \{ <var:V> = <var:O> \land <var:f1> = <var:O> \} \\ <var:f2> := <var:f1> * <var:V> ; \\ \{ <var:V> = <var:O> \land <var:f1> = <var:O> \land <var:f2> = <var:O> ^ <nat:2> \} \\ <var:f0> := <nat:7> ; \\ \{ <var:V> = <var:O> \land <var:f1> = <var:O> \land <var:f2> = <var:O> ^ <nat:2> \land <var:f0> = <nat:7> \} \\ <var:f1> := <var:f1> * <nat:5> ; \\ \{ <var:V> = <var:O> \land <var:f1> = <nat:5> * <var:O> \land <var:f2> = <var:O> ^ <nat:2> \land <var:f0> = <nat:7> \} \\ <var:f2> := <var:f2> * <nat:9> ; \\ \{ <var:V> = <var:O> \land <var:f1> = <nat:5> * <var:O> \land <var:f2> = <nat:9> * <var:O> ^ <nat:2> \land <var:f0> = <nat:7> \} \\ <var:W> := <var:f2> \\ \{ <var:V> = <var:O> \land <var:f1> = <nat:5> * <var:O> \land <var:f0> = <nat:7> \land <var:W> = <nat:9> * <var:O> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:f1> \\ \{ <var:V> = <var:O> \land <var:f0> = <nat:7> \land <var:W> = <nat:9> * <var:O> ^ <nat:2> + <nat:5> * <var:O> \} \end{eqnarray} Allowing running this code segment returns : \begin{eqnarray} <var:W> := <var:W> + <var:f0> \\ \{ <var:V> = <var:O> \land <var:W> = <nat:9> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:7> \} \end{eqnarray} As a consequence , our set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <def:poly> := <var:f1> := <var:V> ; <var:f2> := <var:f1> * <var:V> ; <var:f0> := <nat:7> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:9> ; <var:W> := <var:f2> <var:W> := <var:W> + <var:f1> <var:W> := <var:W> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:V> = <var:O> }} <def:poly> {{ <var:W> = <nat:9> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:f1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:f1> = <var:O> /\ <var:f2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:f1> = <var:O> /\ <var:f2> = <var:O> ^ <nat:2> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:f1> = <nat:5> * <var:O> /\ <var:f2> = <var:O> ^ <nat:2> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:f1> = <nat:5> * <var:O> /\ <var:f2> = <nat:9> * <var:O> ^ <nat:2> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:f1> = <nat:5> * <var:O> /\ <var:f0> = <nat:7> /\ <var:W> = <nat:9> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:f0> = <nat:7> /\ <var:W> = <nat:9> * <var:O> ^ <nat:2> + <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:O> /\ <var:W> = <nat:9> * <var:O> ^ <nat:2> + <nat:5> * <var:O> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 