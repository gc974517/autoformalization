\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S0> := <nat:6> ; <var:k> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Allowing ( assuming some positive coefficients $ <var:c> $ ) it to hold that $ <var:n> = <var:c> $ before evaluating our list of instructions , it follows that $ <var:k> = <nat:6> $ after set of instructions has terminated . \end{theorem} \begin{proof} The course of logic for this series of instructions can be done using typical Hoare reasoning . Now , \begin{eqnarray} \{ <var:n> = <var:c> \} \, <var:S0> := <nat:6> \, \{ <var:n> = <var:c> \land <var:S0> = <nat:6> \} \end{eqnarray} Considering the proceeding command in the series of commands , we have \begin{eqnarray} \{ <var:n> = <var:c> \} \, <var:S0> := <nat:6> \, \{ <var:n> = <var:c> \land <var:S0> = <nat:6> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:6> ; <var:k> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:n> = <var:c> }} <def:poly> {{ <var:k> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:c> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:c> /\ <var:k> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 