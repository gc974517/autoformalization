\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:E1> := <var:y> ; <var:E2> := <var:E1> * <var:y> ; <var:E3> := <var:E2> * <var:y> ; <var:E0> := <nat:5> ; <var:E1> := <var:E1> * <nat:2> ; <var:E2> := <var:E2> * <nat:6> ; <var:E3> := <var:E3> * <nat:4> ; <var:v> := <var:E3> <var:v> := <var:v> + <var:E2> <var:v> := <var:v> + <var:E1> <var:v> := <var:v> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Given that we have $ <var:y> = <var:G> $ prior to running the list of commands , it follows that we see $ <var:v> = <nat:4> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:5> $ . \end{theorem} \begin{proof} The proof of this list of commands can be shown by usual Hoare reasoning . Going to the next step , we have \begin{eqnarray} \{ <var:y> = <var:G> \} \, <var:E1> := <var:y> \, \{ <var:y> = <var:G> \land <var:E1> = <var:G> \} \\ \{ <var:y> = <var:G> \land <var:E1> = <var:G> \} \, <var:E2> := <var:E1> * <var:y> \, \{ <var:y> = <var:G> \land <var:E1> = <var:G> \land <var:E2> = <var:G> ^ <nat:2> \} \\ \{ <var:y> = <var:G> \land <var:E1> = <var:G> \land <var:E2> = <var:G> ^ <nat:2> \} \, <var:E3> := <var:E2> * <var:y> \, \{ <var:y> = <var:G> \land <var:E1> = <var:G> \land <var:E2> = <var:G> ^ <nat:2> \land <var:E3> = <var:G> ^ <nat:3> \} \\ \{ <var:y> = <var:G> \land <var:E1> = <var:G> \land <var:E2> = <var:G> ^ <nat:2> \land <var:E3> = <var:G> ^ <nat:3> \} \, <var:E0> := <nat:5> \, \{ <var:y> = <var:G> \land <var:E1> = <var:G> \land <var:E2> = <var:G> ^ <nat:2> \land <var:E3> = <var:G> ^ <nat:3> \land <var:E0> = <nat:5> \} \\ \{ <var:y> = <var:G> \land <var:E1> = <var:G> \land <var:E2> = <var:G> ^ <nat:2> \land <var:E3> = <var:G> ^ <nat:3> \land <var:E0> = <nat:5> \} \, <var:E1> := <var:E1> * <nat:2> \, \{ <var:y> = <var:G> \land <var:E1> = <nat:2> * <var:G> \land <var:E2> = <var:G> ^ <nat:2> \land <var:E3> = <var:G> ^ <nat:3> \land <var:E0> = <nat:5> \} \\ \{ <var:y> = <var:G> \land <var:E1> = <nat:2> * <var:G> \land <var:E2> = <var:G> ^ <nat:2> \land <var:E3> = <var:G> ^ <nat:3> \land <var:E0> = <nat:5> \} \, <var:E2> := <var:E2> * <nat:6> \, \{ <var:y> = <var:G> \land <var:E1> = <nat:2> * <var:G> \land <var:E2> = <nat:6> * <var:G> ^ <nat:2> \land <var:E3> = <var:G> ^ <nat:3> \land <var:E0> = <nat:5> \} \end{eqnarray} This is given by the variable assignmet inference rule defined in Hoare reasoning . Taking another step toward the next command seen in the program , we see \begin{eqnarray} \{ <var:y> = <var:G> \} \, <var:E1> := <var:y> \, \{ <var:y> = <var:G> \land <var:E1> = <var:G> \} \end{eqnarray} After , we have \begin{eqnarray} \{ <var:y> = <var:G> \} \, <var:E1> := <var:y> \, \{ <var:y> = <var:G> \land <var:E1> = <var:G> \} \end{eqnarray} Jumping to the next lines contained in our series of commands , \begin{eqnarray} \{ <var:y> = <var:G> \} \, <var:E1> := <var:y> \, \{ <var:y> = <var:G> \land <var:E1> = <var:G> \} \\ \{ <var:y> = <var:G> \land <var:E1> = <var:G> \} \, <var:E2> := <var:E1> * <var:y> \, \{ <var:y> = <var:G> \land <var:E1> = <var:G> \land <var:E2> = <var:G> ^ <nat:2> \} \\ \{ <var:y> = <var:G> \land <var:E1> = <var:G> \land <var:E2> = <var:G> ^ <nat:2> \} \, <var:E3> := <var:E2> * <var:y> \, \{ <var:y> = <var:G> \land <var:E1> = <var:G> \land <var:E2> = <var:G> ^ <nat:2> \land <var:E3> = <var:G> ^ <nat:3> \} \end{eqnarray} This is given using the environment update inference rule of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <def:poly> := <var:E1> := <var:y> ; <var:E2> := <var:E1> * <var:y> ; <var:E3> := <var:E2> * <var:y> ; <var:E0> := <nat:5> ; <var:E1> := <var:E1> * <nat:2> ; <var:E2> := <var:E2> * <nat:6> ; <var:E3> := <var:E3> * <nat:4> ; <var:v> := <var:E3> <var:v> := <var:v> + <var:E2> <var:v> := <var:v> + <var:E1> <var:v> := <var:v> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:y> = <var:G> }} <def:poly> {{ <var:v> = <nat:4> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:E1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:E1> = <var:G> /\ <var:E2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:E1> = <var:G> /\ <var:E2> = <var:G> ^ <nat:2> /\ <var:E3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:E1> = <var:G> /\ <var:E2> = <var:G> ^ <nat:2> /\ <var:E3> = <var:G> ^ <nat:3> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:E1> = <nat:2> * <var:G> /\ <var:E2> = <var:G> ^ <nat:2> /\ <var:E3> = <var:G> ^ <nat:3> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:E1> = <nat:2> * <var:G> /\ <var:E2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:E3> = <var:G> ^ <nat:3> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:E1> = <nat:2> * <var:G> /\ <var:E2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:E3> = <nat:4> * <var:G> ^ <nat:3> /\ <var:E0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:E1> = <nat:2> * <var:G> /\ <var:E2> = <nat:6> * <var:G> ^ <nat:2> /\ <var:E0> = <nat:5> /\ <var:v> = <nat:4> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:E1> = <nat:2> * <var:G> /\ <var:E0> = <nat:5> /\ <var:v> = <nat:4> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:E0> = <nat:5> /\ <var:v> = <nat:4> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:G> /\ <var:v> = <nat:4> * <var:G> ^ <nat:3> + <nat:6> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 