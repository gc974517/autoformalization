\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:5> ; <var:k1> := <nat:3> ; <var:k1> := <var:k1> * <var:d> ; <var:k2> := <nat:4> ; <var:k2> := <var:k2> * <var:d> ; <var:k2> := <var:k2> * <var:d> ; <var:c> := <var:k2> ; <var:c> := <var:c> + <var:k1> ; <var:c> := <var:c> + <var:k0> \end{verbatim} Allowing that we have $ <var:d> = <var:s> $ prior to the evaluation of the list of instructions , it holds that we have $ <var:c> = <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:5> $ once segment of code has finished . \end{theorem} \begin{proof} Utilizing standard Hoare techniques returns : \begin{eqnarray} \{ <var:d> = <var:s> \} \\ <var:k0> := <nat:5> ; \\ \{ <var:d> = <var:s> \land <var:k0> = <nat:5> \} \\ <var:k1> := <nat:3> ; \\ \{ <var:d> = <var:s> \land <var:k0> = <nat:5> \land <var:k1> = <nat:3> \} \\ <var:k1> := <var:k1> * <var:d> ; \\ \{ <var:d> = <var:s> \land <var:k0> = <nat:5> \land <var:k1> = <nat:3> * <var:s> \} \\ <var:k2> := <nat:4> ; \\ \{ <var:d> = <var:s> \land <var:k0> = <nat:5> \land <var:k1> = <nat:3> * <var:s> \land <var:k2> = <nat:4> \} \\ <var:k2> := <var:k2> * <var:d> ; \\ \{ <var:d> = <var:s> \land <var:k0> = <nat:5> \land <var:k1> = <nat:3> * <var:s> \land <var:k2> = <nat:4> * <var:s> \} \\ <var:k2> := <var:k2> * <var:d> ; \\ \{ <var:d> = <var:s> \land <var:k0> = <nat:5> \land <var:k1> = <nat:3> * <var:s> \land <var:k2> = <nat:4> * <var:s> ^ <nat:2> \} \\ <var:c> := <var:k2> ; \\ \{ <var:d> = <var:s> \land <var:k0> = <nat:5> \land <var:k1> = <nat:3> * <var:s> \land <var:c> = <nat:4> * <var:s> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:k1> ; \\ \{ <var:d> = <var:s> \land <var:k0> = <nat:5> \land <var:c> = <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> \} \\ <var:c> := <var:c> + <var:k0> \\ \{ <var:d> = <var:s> \land <var:c> = <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:5> \} \end{eqnarray} Thus , our series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:d> = <var:s> }} <var:k0> := <nat:5> ; <var:k1> := <nat:3> ; <var:k1> := <var:k1> * <var:d> ; <var:k2> := <nat:4> ; <var:k2> := <var:k2> * <var:d> ; <var:k2> := <var:k2> * <var:d> ; <var:c> := <var:k2> ; <var:c> := <var:c> + <var:k1> ; <var:c> := <var:c> + <var:k0> {{ <var:c> = <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:k0> = <nat:5> /\ <var:k1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:k0> = <nat:5> /\ <var:k1> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:k0> = <nat:5> /\ <var:k1> = <nat:3> * <var:s> /\ <var:k2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:k0> = <nat:5> /\ <var:k1> = <nat:3> * <var:s> /\ <var:k2> = <nat:4> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:k0> = <nat:5> /\ <var:k1> = <nat:3> * <var:s> /\ <var:k2> = <nat:4> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:k0> = <nat:5> /\ <var:k1> = <nat:3> * <var:s> /\ <var:c> = <nat:4> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:k0> = <nat:5> /\ <var:c> = <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:s> /\ <var:c> = <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 