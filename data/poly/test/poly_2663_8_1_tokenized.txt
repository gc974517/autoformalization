\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A1> := <var:I> ; <var:A2> := <var:A1> * <var:I> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:3> ; <var:A2> := <var:A2> * <nat:2> ; <var:v> := <var:A2> <var:v> := <var:v> + <var:A1> <var:v> := <var:v> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> in \emph{Imp} . Allowing ( for some natural numbers $ <var:t> $ ) it to be that $ <var:I> = <var:t> $ prior to evaluating the code , it holds that we have $ <var:v> = <nat:2> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> + <nat:4> $ when code segment finishes . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning results in : \begin{eqnarray} \{ <var:I> = <var:t> \} \\ <var:A1> := <var:I> ; \\ \{ <var:I> = <var:t> \land <var:A1> = <var:t> \} \\ <var:A2> := <var:A1> * <var:I> ; \\ \{ <var:I> = <var:t> \land <var:A1> = <var:t> \land <var:A2> = <var:t> ^ <nat:2> \} \\ <var:A0> := <nat:4> ; \\ \{ <var:I> = <var:t> \land <var:A1> = <var:t> \land <var:A2> = <var:t> ^ <nat:2> \land <var:A0> = <nat:4> \} \\ <var:A1> := <var:A1> * <nat:3> ; \\ \{ <var:I> = <var:t> \land <var:A1> = <nat:3> * <var:t> \land <var:A2> = <var:t> ^ <nat:2> \land <var:A0> = <nat:4> \} \\ <var:A2> := <var:A2> * <nat:2> ; \\ \{ <var:I> = <var:t> \land <var:A1> = <nat:3> * <var:t> \land <var:A2> = <nat:2> * <var:t> ^ <nat:2> \land <var:A0> = <nat:4> \} \\ <var:v> := <var:A2> \\ \{ <var:I> = <var:t> \land <var:A1> = <nat:3> * <var:t> \land <var:A0> = <nat:4> \land <var:v> = <nat:2> * <var:t> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:A1> \\ \{ <var:I> = <var:t> \land <var:A0> = <nat:4> \land <var:v> = <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> \} \\ <var:v> := <var:v> + <var:A0> \\ \{ <var:I> = <var:t> \land <var:v> = <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:4> \} \end{eqnarray} Thus , this list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <def:poly> := <var:A1> := <var:I> ; <var:A2> := <var:A1> * <var:I> ; <var:A0> := <nat:4> ; <var:A1> := <var:A1> * <nat:3> ; <var:A2> := <var:A2> * <nat:2> ; <var:v> := <var:A2> <var:v> := <var:v> + <var:A1> <var:v> := <var:v> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:I> = <var:t> }} <def:poly> {{ <var:v> = <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:t> /\ <var:A1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:t> /\ <var:A1> = <var:t> /\ <var:A2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:t> /\ <var:A1> = <var:t> /\ <var:A2> = <var:t> ^ <nat:2> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:t> /\ <var:A1> = <nat:3> * <var:t> /\ <var:A2> = <var:t> ^ <nat:2> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:t> /\ <var:A1> = <nat:3> * <var:t> /\ <var:A2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:A0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:t> /\ <var:A1> = <nat:3> * <var:t> /\ <var:A0> = <nat:4> /\ <var:v> = <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:t> /\ <var:A0> = <nat:4> /\ <var:v> = <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:t> /\ <var:v> = <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 