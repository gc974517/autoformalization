\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:X1> := <var:O> ; <var:X0> := <nat:2> ; <var:X1> := <var:X1> * <nat:3> ; <var:g> := <var:X1> <var:g> := <var:g> + <var:X0> \end{verbatim} Allow ( for positive numbers $ <var:j> $ ) it to be that $ <var:O> = <var:j> $ ahead of interpreting the code segment it must be that we see $ <var:g> = <nat:3> \times <var:j> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for the list of commands can be seen by the below decorated set of instructions . \begin{eqnarray} \{ <var:O> = <var:j> \} \\ <var:X1> := <var:O> ; \\ \{ <var:O> = <var:j> \land <var:X1> = <var:j> \} \\ <var:X0> := <nat:2> ; \\ \{ <var:O> = <var:j> \land <var:X1> = <var:j> \land <var:X0> = <nat:2> \} \\ <var:X1> := <var:X1> * <nat:3> ; \\ \{ <var:O> = <var:j> \land <var:X1> = <nat:3> \times <var:j> \land <var:X0> = <nat:2> \} \\ <var:g> := <var:X1> \\ \{ <var:O> = <var:j> \land <var:X0> = <nat:2> \land <var:g> = <nat:3> \times <var:j> \} \\ <var:g> := <var:g> + <var:X0> \\ \{ <var:O> = <var:j> \land <var:g> = <nat:3> \times <var:j> + <nat:2> \} \end{eqnarray} Applying usual Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:O> = <var:j> }} <var:X1> := <var:O> ; <var:X0> := <nat:2> ; <var:X1> := <var:X1> * <nat:3> ; <var:g> := <var:X1> <var:g> := <var:g> + <var:X0> {{ <var:g> = <nat:3> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:X1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:X1> = <var:j> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:X1> = <nat:3> * <var:j> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:X0> = <nat:2> /\ <var:g> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:g> = <nat:3> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 