\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} such that \begin{verbatim} <var:m> := <nat:2> ; <var:m> := <nat:3> + <var:m> * <var:Y> \end{verbatim} Allowing --- given any $ <var:x> $ --- it to be that $ <var:Y> = <var:x> $ prior to the evaluation of the segment of code it follows that $ <var:m> = <nat:2> \cdot <var:x> + <nat:3> $ when code segment is done executing . \end{theorem} \begin{proof} The flow of logic for our code can be accomplished using Hoare reasoning . After , we have \begin{verbatim} { <var:Y> = <var:x> } <var:m> := <nat:2> { <var:Y> = <var:x> \land <var:m> = <nat:2> } \end{verbatim} Observing the next bit of code seen in our set of instructions , \begin{verbatim} { <var:Y> = <var:x> } <var:m> := <nat:2> { <var:Y> = <var:x> \land <var:m> = <nat:2> } \end{verbatim} This is guaranteed through the environment update inference rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:Y> = <var:x> }} <var:m> := <nat:2> ; <var:m> := <nat:3> + <var:m> * <var:Y> {{ <var:m> = <nat:2> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:x> /\ <var:m> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:x> /\ <var:m> = <nat:2> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 