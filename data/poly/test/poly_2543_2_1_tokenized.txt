\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:4> ; <var:n> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> in \emph{Imp} . Assume it to hold that $ <var:d> = <var:B> $ ahead of interpreting this list of commands it holds that $ <var:n> = <nat:4> $ . \end{theorem} \begin{proof} Applying Hoare techniques gives us : \begin{eqnarray} \{ <var:d> = <var:B> \} \\ <var:Z0> := <nat:4> ; \\ \{ <var:d> = <var:B> \land <var:Z0> = <nat:4> \} \\ <var:n> := <var:Z0> \\ \{ <var:d> = <var:B> \land <var:n> = <nat:4> \} \end{eqnarray} Hence , this code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:4> ; <var:n> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:d> = <var:B> }} <def:poly> {{ <var:n> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:B> /\ <var:n> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 