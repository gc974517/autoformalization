\begin{document} \begin{theorem} Define a code segment such that \begin{verbatim} <var:g> := <nat:4> ; <var:g> := <var:g> * <var:y> ; <var:g> := <nat:3> + <var:g> * <var:y> ; <var:g> := <nat:1> + <var:g> * <var:y> ; <var:g> := <nat:3> + <var:g> * <var:y> ; <var:g> := <nat:3> + <var:g> * <var:y> ; <var:g> := <nat:2> + <var:g> * <var:y> ; <var:g> := <nat:3> + <var:g> * <var:y> ; <var:g> := <var:g> * <var:y> ; <var:g> := <var:g> * <var:y> ; <var:g> := <nat:1> + <var:g> * <var:y> ; <var:g> := <var:g> * <var:y> ; <var:g> := <nat:4> + <var:g> * <var:y> \end{verbatim} Assume it to hold that $ <var:y> = <var:E> $ letting natural coefficients $ <var:E> $ before executing our segment of code it holds that $ <var:g> = <nat:4> * <var:E> ^ <nat:12> + <nat:3> * <var:E> ^ <nat:10> + <nat:1> * <var:E> ^ <nat:9> + <nat:3> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> $ when program terminates . \end{theorem} \begin{proof} The flow of logic for our segment of code can be done through standard Hoare techniques . Moving onward , we have the environment update command defining $ <nat:4> $ into $ <var:g>$ . This redefines the precondition $ \{ <var:y> = <var:E> \} $ into $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> \} $ . This is ensured by the assignment law in typical Hoare techniques . Considering the subsequent step in our code , we have the variable assignmet command assigning $ <var:g> * <var:y> $ as $ <var:g>$ . This command redefines the condition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> \} $ toward the condition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> + \} $ . Taking another step toward the proceeding line found in our set of instructions , the variable binding line assigning $ <nat:3> + <var:g> * <var:y> $ toward $ <var:g>$ . This forwards $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> + \} $ to the postcondition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:2> + <nat:3> \} $ . Moving on to the next line of code contained in our series of commands , we see the binding statement binding $ <nat:1> + <var:g> * <var:y> $ into $ <var:g>$ . This command moves the condition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:2> + <nat:3> \} $ to $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:1> \} $ . Taking another step toward the subsequent statement contained in the list of instructions , we have the environment update statement \verb | <var:g> := <nat:3> + <var:g> * <var:y> ; | . This moves the precondition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:1> \} $ toward $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> \} $ . This is ensured using the assignment rule in usual Hoare techniques . Taking another step toward the upcoming step contained in the program , we see the binding code yielding $ <nat:3> + <var:g> * <var:y> $ toward $ <var:g>$ . This line forwards the precondition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> \} $ to the condition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:3> \} $ . This is ensured with the assignment inference rule given in typical Hoare reasoning . Jumping to the following line of code contained in the segment of code , the assignment code \verb | <var:g> := <nat:2> + <var:g> * <var:y> ; | . This takes the precondition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:3> \} $ toward the condition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> \} $ . Moving forward to the following line seen in the set of commands , the environment update statement \verb | <var:g> := <nat:3> + <var:g> * <var:y> ; | . This transfers $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> \} $ as the postcondition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> \} $ . This is known to be sound using the assignment inference rule obtained from typical Hoare reasoning . Now , we see the variable binding line \verb | <var:g> := <var:g> * <var:y> ; | . This advances the precondition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> \} $ toward the condition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + \} $ . Moving forward to the next step , we see the environment update command defining $ <var:g> * <var:y> $ to $ <var:g>$ . This advances the condition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + \} $ toward the postcondition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:9> + <nat:3> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + \} $ . This is shown using the assignment inference rule in standard Hoare reasoning . Considering the following piece of code seen in our program , we see the assignment code \verb | <var:g> := <nat:1> + <var:g> * <var:y> ; | . This line advances the precondition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:9> + <nat:3> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + \} $ into the postcondition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:10> + <nat:3> * <var:E> ^ <nat:8> + <nat:1> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:1> \} $ . This is shown using the assignment inference rule obtained from standard Hoare reasoning . Advancing on , we have the variable update command yielding $ <var:g> * <var:y> $ into $ <var:g>$ . This code takes the precondition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:10> + <nat:3> * <var:E> ^ <nat:8> + <nat:1> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:1> \} $ as $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:11> + <nat:3> * <var:E> ^ <nat:9> + <nat:1> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:1> * <var:E> + \} $ . Immediately following , the assignment command yielding $ <nat:4> + <var:g> * <var:y$ to $ <var:g>$ . This advances $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:11> + <nat:3> * <var:E> ^ <nat:9> + <nat:1> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:1> * <var:E> + \} $ as the condition $ \{ <var:y> = <var:E> \land <var:g> = <nat:4> * <var:E> ^ <nat:12> + <nat:3> * <var:E> ^ <nat:10> + <nat:1> * <var:E> ^ <nat:9> + <nat:3> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> \} $ . This is sound with the assignment law from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:y> = <var:E> }} <var:g> := <nat:4> ; <var:g> := <var:g> * <var:y> ; <var:g> := <nat:3> + <var:g> * <var:y> ; <var:g> := <nat:1> + <var:g> * <var:y> ; <var:g> := <nat:3> + <var:g> * <var:y> ; <var:g> := <nat:3> + <var:g> * <var:y> ; <var:g> := <nat:2> + <var:g> * <var:y> ; <var:g> := <nat:3> + <var:g> * <var:y> ; <var:g> := <var:g> * <var:y> ; <var:g> := <var:g> * <var:y> ; <var:g> := <nat:1> + <var:g> * <var:y> ; <var:g> := <var:g> * <var:y> ; <var:g> := <nat:4> + <var:g> * <var:y> {{ <var:g> = <nat:4> * <var:E> ^ <nat:12> + <nat:3> * <var:E> ^ <nat:10> + <nat:1> * <var:E> ^ <nat:9> + <nat:3> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:g> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:g> = <nat:4> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:g> = <nat:4> * <var:E> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:g> = <nat:4> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:g> = <nat:4> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:g> = <nat:4> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:g> = <nat:4> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:g> = <nat:4> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:g> = <nat:4> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:g> = <nat:4> * <var:E> ^ <nat:9> + <nat:3> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:g> = <nat:4> * <var:E> ^ <nat:10> + <nat:3> * <var:E> ^ <nat:8> + <nat:1> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:g> = <nat:4> * <var:E> ^ <nat:11> + <nat:3> * <var:E> ^ <nat:9> + <nat:1> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:1> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:E> /\ <var:g> = <nat:4> * <var:E> ^ <nat:12> + <nat:3> * <var:E> ^ <nat:10> + <nat:1> * <var:E> ^ <nat:9> + <nat:3> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 