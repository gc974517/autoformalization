\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:4> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:h> ; <var:M2> := <nat:9> ; <var:M2> := <var:M2> * <var:h> ; <var:M2> := <var:M2> * <var:h> ; <var:z> := <var:M2> ; <var:z> := <var:z> + <var:M1> ; <var:z> := <var:z> + <var:M0> \end{verbatim} Allow that we have $ <var:h> = <var:j> $ --- given $ <var:j> $ --- before interpreting the program , then we see $ <var:z> = <nat:9> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions can be given through the below decorated code . \begin{eqnarray} \{ <var:h> = <var:j> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:h> = <var:j> \land <var:M0> = <nat:4> \} \\ <var:M1> := <nat:4> ; \\ \{ <var:h> = <var:j> \land <var:M0> = <nat:4> \land <var:M1> = <nat:4> \} \\ <var:M1> := <var:M1> * <var:h> ; \\ \{ <var:h> = <var:j> \land <var:M0> = <nat:4> \land <var:M1> = <nat:4> \times <var:j> \} \\ <var:M2> := <nat:9> ; \\ \{ <var:h> = <var:j> \land <var:M0> = <nat:4> \land <var:M1> = <nat:4> \times <var:j> \land <var:M2> = <nat:9> \} \\ <var:M2> := <var:M2> * <var:h> ; \\ \{ <var:h> = <var:j> \land <var:M0> = <nat:4> \land <var:M1> = <nat:4> \times <var:j> \land <var:M2> = <nat:9> \times <var:j> \} \\ <var:M2> := <var:M2> * <var:h> ; \\ \{ <var:h> = <var:j> \land <var:M0> = <nat:4> \land <var:M1> = <nat:4> \times <var:j> \land <var:M2> = <nat:9> \times <var:j> ^ <nat:2> \} \\ <var:z> := <var:M2> ; \\ \{ <var:h> = <var:j> \land <var:M0> = <nat:4> \land <var:M1> = <nat:4> \times <var:j> \land <var:z> = <nat:9> \times <var:j> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:M1> ; \\ \{ <var:h> = <var:j> \land <var:M0> = <nat:4> \land <var:z> = <nat:9> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> \} \\ <var:z> := <var:z> + <var:M0> \\ \{ <var:h> = <var:j> \land <var:z> = <nat:9> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + <nat:4> \} \end{eqnarray} Applying Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:h> = <var:j> }} <var:M0> := <nat:4> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:h> ; <var:M2> := <nat:9> ; <var:M2> := <var:M2> * <var:h> ; <var:M2> := <var:M2> * <var:h> ; <var:z> := <var:M2> ; <var:z> := <var:z> + <var:M1> ; <var:z> := <var:z> + <var:M0> {{ <var:z> = <nat:9> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:4> * <var:j> /\ <var:M2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:4> * <var:j> /\ <var:M2> = <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:4> * <var:j> /\ <var:M2> = <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:4> * <var:j> /\ <var:z> = <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:M0> = <nat:4> /\ <var:z> = <nat:9> * <var:j> ^ <nat:2> + <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:j> /\ <var:z> = <nat:9> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 