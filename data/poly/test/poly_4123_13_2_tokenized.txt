\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I> := <nat:4> ; <var:I> := <nat:3> + <var:I> * <var:c> ; <var:I> := <nat:2> + <var:I> * <var:c> ; <var:I> := <nat:4> + <var:I> * <var:c> ; <var:I> := <nat:1> + <var:I> * <var:c> ; <var:I> := <nat:1> + <var:I> * <var:c> ; <var:I> := <nat:2> + <var:I> * <var:c> ; <var:I> := <nat:1> + <var:I> * <var:c> ; <var:I> := <nat:2> + <var:I> * <var:c> ; <var:I> := <nat:3> + <var:I> * <var:c> ; <var:I> := <var:I> * <var:c> ; <var:I> := <var:I> * <var:c> ; <var:I> := <nat:2> + <var:I> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Given , for $ <var:x> \in \mathbb{N} $ , that $ <var:c> = <var:x> $ prior to running this code it must be that $ <var:I> = <nat:4> \times <var:x> ^ <nat:12> + <nat:3> \times <var:x> ^ <nat:11> + <nat:2> \times <var:x> ^ <nat:10> + <nat:4> \times <var:x> ^ <nat:9> + <nat:1> \times <var:x> ^ <nat:8> + <nat:1> \times <var:x> ^ <nat:7> + <nat:2> \times <var:x> ^ <nat:6> + <nat:1> \times <var:x> ^ <nat:5> + <nat:2> \times <var:x> ^ <nat:4> + <nat:3> \times <var:x> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:x> \} \\ <var:I> := <nat:4> ; \\ \{ <var:c> = <var:x> \land <var:I> = <nat:4> \} \\ <var:I> := <nat:3> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:x> \land <var:I> = <nat:4> \cdot <var:x> + <nat:3> \} \\ <var:I> := <nat:2> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:x> \land <var:I> = <nat:4> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> + <nat:2> \} \\ <var:I> := <nat:4> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:x> \land <var:I> = <nat:4> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:4> \} \\ <var:I> := <nat:1> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:x> \land <var:I> = <nat:4> \cdot <var:x> ^ <nat:4> + <nat:3> \cdot <var:x> ^ <nat:3> + <nat:2> \cdot <var:x> ^ <nat:2> + <nat:4> \cdot <var:x> + <nat:1> \} \\ <var:I> := <nat:1> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:x> \land <var:I> = <nat:4> \cdot <var:x> ^ <nat:5> + <nat:3> \cdot <var:x> ^ <nat:4> + <nat:2> \cdot <var:x> ^ <nat:3> + <nat:4> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:1> \} \\ <var:I> := <nat:2> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:x> \land <var:I> = <nat:4> \cdot <var:x> ^ <nat:6> + <nat:3> \cdot <var:x> ^ <nat:5> + <nat:2> \cdot <var:x> ^ <nat:4> + <nat:4> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:2> \} \\ <var:I> := <nat:1> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:x> \land <var:I> = <nat:4> \cdot <var:x> ^ <nat:7> + <nat:3> \cdot <var:x> ^ <nat:6> + <nat:2> \cdot <var:x> ^ <nat:5> + <nat:4> \cdot <var:x> ^ <nat:4> + <nat:1> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:1> \} \\ <var:I> := <nat:2> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:x> \land <var:I> = <nat:4> \cdot <var:x> ^ <nat:8> + <nat:3> \cdot <var:x> ^ <nat:7> + <nat:2> \cdot <var:x> ^ <nat:6> + <nat:4> \cdot <var:x> ^ <nat:5> + <nat:1> \cdot <var:x> ^ <nat:4> + <nat:1> \cdot <var:x> ^ <nat:3> + <nat:2> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:2> \} \\ <var:I> := <nat:3> + <var:I> * <var:c> ; \\ \{ <var:c> = <var:x> \land <var:I> = <nat:4> \cdot <var:x> ^ <nat:9> + <nat:3> \cdot <var:x> ^ <nat:8> + <nat:2> \cdot <var:x> ^ <nat:7> + <nat:4> \cdot <var:x> ^ <nat:6> + <nat:1> \cdot <var:x> ^ <nat:5> + <nat:1> \cdot <var:x> ^ <nat:4> + <nat:2> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:3> \} \\ <var:I> := <var:I> * <var:c> ; \\ \{ <var:c> = <var:x> \land <var:I> = <nat:4> \cdot <var:x> ^ <nat:10> + <nat:3> \cdot <var:x> ^ <nat:9> + <nat:2> \cdot <var:x> ^ <nat:8> + <nat:4> \cdot <var:x> ^ <nat:7> + <nat:1> \cdot <var:x> ^ <nat:6> + <nat:1> \cdot <var:x> ^ <nat:5> + <nat:2> \cdot <var:x> ^ <nat:4> + <nat:1> \cdot <var:x> ^ <nat:3> + <nat:2> \cdot <var:x> ^ <nat:2> + <nat:3> \cdot <var:x> + \} \\ <var:I> := <var:I> * <var:c> ; \\ \{ <var:c> = <var:x> \land <var:I> = <nat:4> \cdot <var:x> ^ <nat:11> + <nat:3> \cdot <var:x> ^ <nat:10> + <nat:2> \cdot <var:x> ^ <nat:9> + <nat:4> \cdot <var:x> ^ <nat:8> + <nat:1> \cdot <var:x> ^ <nat:7> + <nat:1> \cdot <var:x> ^ <nat:6> + <nat:2> \cdot <var:x> ^ <nat:5> + <nat:1> \cdot <var:x> ^ <nat:4> + <nat:2> \cdot <var:x> ^ <nat:3> + <nat:3> \cdot <var:x> ^ <nat:2> + \} \end{eqnarray} Furthering evaluating our series of instructions gives us : \begin{eqnarray} <var:I> := <nat:2> + <var:I> * <var:c> \\ \{ <var:c> = <var:x> \land <var:I> = <nat:4> \cdot <var:x> ^ <nat:12> + <nat:3> \cdot <var:x> ^ <nat:11> + <nat:2> \cdot <var:x> ^ <nat:10> + <nat:4> \cdot <var:x> ^ <nat:9> + <nat:1> \cdot <var:x> ^ <nat:8> + <nat:1> \cdot <var:x> ^ <nat:7> + <nat:2> \cdot <var:x> ^ <nat:6> + <nat:1> \cdot <var:x> ^ <nat:5> + <nat:2> \cdot <var:x> ^ <nat:4> + <nat:3> \cdot <var:x> ^ <nat:3> + <nat:2> \} \end{eqnarray} The application of standard Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:I> := <nat:4> ; <var:I> := <nat:3> + <var:I> * <var:c> ; <var:I> := <nat:2> + <var:I> * <var:c> ; <var:I> := <nat:4> + <var:I> * <var:c> ; <var:I> := <nat:1> + <var:I> * <var:c> ; <var:I> := <nat:1> + <var:I> * <var:c> ; <var:I> := <nat:2> + <var:I> * <var:c> ; <var:I> := <nat:1> + <var:I> * <var:c> ; <var:I> := <nat:2> + <var:I> * <var:c> ; <var:I> := <nat:3> + <var:I> * <var:c> ; <var:I> := <var:I> * <var:c> ; <var:I> := <var:I> * <var:c> ; <var:I> := <nat:2> + <var:I> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:c> = <var:x> }} <def:poly> {{ <var:I> = <nat:4> * <var:x> ^ <nat:12> + <nat:3> * <var:x> ^ <nat:11> + <nat:2> * <var:x> ^ <nat:10> + <nat:4> * <var:x> ^ <nat:9> + <nat:1> * <var:x> ^ <nat:8> + <nat:1> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:I> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:I> = <nat:4> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:I> = <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:I> = <nat:4> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:I> = <nat:4> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:I> = <nat:4> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:I> = <nat:4> * <var:x> ^ <nat:6> + <nat:3> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:I> = <nat:4> * <var:x> ^ <nat:7> + <nat:3> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:I> = <nat:4> * <var:x> ^ <nat:8> + <nat:3> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:I> = <nat:4> * <var:x> ^ <nat:9> + <nat:3> * <var:x> ^ <nat:8> + <nat:2> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:I> = <nat:4> * <var:x> ^ <nat:10> + <nat:3> * <var:x> ^ <nat:9> + <nat:2> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:7> + <nat:1> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:I> = <nat:4> * <var:x> ^ <nat:11> + <nat:3> * <var:x> ^ <nat:10> + <nat:2> * <var:x> ^ <nat:9> + <nat:4> * <var:x> ^ <nat:8> + <nat:1> * <var:x> ^ <nat:7> + <nat:1> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:I> = <nat:4> * <var:x> ^ <nat:12> + <nat:3> * <var:x> ^ <nat:11> + <nat:2> * <var:x> ^ <nat:10> + <nat:4> * <var:x> ^ <nat:9> + <nat:1> * <var:x> ^ <nat:8> + <nat:1> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 