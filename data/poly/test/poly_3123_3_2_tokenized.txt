\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G> := <nat:4> ; <var:G> := <nat:3> + <var:G> * <var:E> ; <var:G> := <nat:1> + <var:G> * <var:E> \end{verbatim} \end{definition} \begin{theorem} Allow , for every $ <var:v> \in \mathbb{Z}^+ $ , that $ <var:E> = <var:v> $ ahead of executing our series of commands , it follows that we have $ <var:G> = <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the series of commands is given with this decorated code . \begin{eqnarray} \{ <var:E> = <var:v> \} \\ <var:G> := <nat:4> ; \\ \{ <var:E> = <var:v> \land <var:G> = <nat:4> \} \\ <var:G> := <nat:3> + <var:G> * <var:E> ; \\ \{ <var:E> = <var:v> \land <var:G> = <nat:4> * <var:v> + <nat:3> \} \\ <var:G> := <nat:1> + <var:G> * <var:E> \\ \{ <var:E> = <var:v> \land <var:G> = <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> \} \end{eqnarray} Continuing evaluating the segment of code results in : \begin{eqnarray} \end{eqnarray} Utilizing usual Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:G> := <nat:4> ; <var:G> := <nat:3> + <var:G> * <var:E> ; <var:G> := <nat:1> + <var:G> * <var:E> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:E> = <var:v> }} <def:poly> {{ <var:G> = <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:G> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:G> = <nat:4> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:G> = <nat:4> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 