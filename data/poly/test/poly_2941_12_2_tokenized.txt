\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} such that \begin{verbatim} <var:W> := <nat:4> ; <var:W> := <nat:1> + <var:W> * <var:f> ; <var:W> := <var:W> * <var:f> ; <var:W> := <nat:1> + <var:W> * <var:f> ; <var:W> := <var:W> * <var:f> ; <var:W> := <nat:1> + <var:W> * <var:f> ; <var:W> := <var:W> * <var:f> ; <var:W> := <nat:3> + <var:W> * <var:f> ; <var:W> := <nat:2> + <var:W> * <var:f> ; <var:W> := <nat:2> + <var:W> * <var:f> ; <var:W> := <nat:2> + <var:W> * <var:f> ; <var:W> := <nat:2> + <var:W> * <var:f> \end{verbatim} Assume , for some $ <var:X> \in \mathbb{Z}^+ $ , it to be that $ <var:f> = <var:X> $ prior to interpreting the series of instructions it must be that we see $ <var:W> = <nat:4> \times <var:X> ^ <nat:11> + <nat:1> \times <var:X> ^ <nat:10> + <nat:1> \times <var:X> ^ <nat:8> + <nat:1> \times <var:X> ^ <nat:6> + <nat:3> \times <var:X> ^ <nat:4> + <nat:2> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:2> $ when set of instructions has finished executing . \end{theorem} \begin{proof} The application of Hoare reasoning gives : \begin{eqnarray} \{ <var:f> = <var:X> \} \\ <var:W> := <nat:4> ; \\ \{ <var:f> = <var:X> \land <var:W> = <nat:4> \} \\ <var:W> := <nat:1> + <var:W> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:W> = <nat:4> * <var:X> + <nat:1> \} \\ <var:W> := <var:W> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:W> = <nat:4> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + \} \\ <var:W> := <nat:1> + <var:W> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:W> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> \} \\ <var:W> := <var:W> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:W> = <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + \} \\ <var:W> := <nat:1> + <var:W> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:W> = <nat:4> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> \} \\ <var:W> := <var:W> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:W> = <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + \} \\ <var:W> := <nat:3> + <var:W> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:W> = <nat:4> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> \} \\ <var:W> := <nat:2> + <var:W> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:W> = <nat:4> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> + <nat:2> \} \\ <var:W> := <nat:2> + <var:W> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:W> = <nat:4> * <var:X> ^ <nat:9> + <nat:1> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> \} \\ <var:W> := <nat:2> + <var:W> * <var:f> ; \\ \{ <var:f> = <var:X> \land <var:W> = <nat:4> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:9> + <nat:1> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> \} \\ <var:W> := <nat:2> + <var:W> * <var:f> \\ \{ <var:f> = <var:X> \land <var:W> = <nat:4> * <var:X> ^ <nat:11> + <nat:1> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> \} \end{eqnarray} Considering the above , our list of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:f> = <var:X> }} <var:W> := <nat:4> ; <var:W> := <nat:1> + <var:W> * <var:f> ; <var:W> := <var:W> * <var:f> ; <var:W> := <nat:1> + <var:W> * <var:f> ; <var:W> := <var:W> * <var:f> ; <var:W> := <nat:1> + <var:W> * <var:f> ; <var:W> := <var:W> * <var:f> ; <var:W> := <nat:3> + <var:W> * <var:f> ; <var:W> := <nat:2> + <var:W> * <var:f> ; <var:W> := <nat:2> + <var:W> * <var:f> ; <var:W> := <nat:2> + <var:W> * <var:f> ; <var:W> := <nat:2> + <var:W> * <var:f> {{ <var:W> = <nat:4> * <var:X> ^ <nat:11> + <nat:1> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:W> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:W> = <nat:4> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:W> = <nat:4> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:W> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:W> = <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:W> = <nat:4> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:W> = <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:W> = <nat:4> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:W> = <nat:4> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:3> + <nat:3> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:W> = <nat:4> * <var:X> ^ <nat:9> + <nat:1> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:4> + <nat:3> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:W> = <nat:4> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:9> + <nat:1> * <var:X> ^ <nat:7> + <nat:1> * <var:X> ^ <nat:5> + <nat:3> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:X> /\ <var:W> = <nat:4> * <var:X> ^ <nat:11> + <nat:1> * <var:X> ^ <nat:10> + <nat:1> * <var:X> ^ <nat:8> + <nat:1> * <var:X> ^ <nat:6> + <nat:3> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 