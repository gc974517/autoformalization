\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t> := <nat:4> ; <var:t> := <nat:2> + <var:t> * <var:E> ; <var:t> := <nat:3> + <var:t> * <var:E> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:E> = <var:g> $ before the execution of our segment of code it must be that we see $ <var:t> = <nat:4> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:3> $ after segment of code has finished . \end{theorem} \begin{proof} The flow of logic for our code segment is shown through typical Hoare techniques . Moving on to the next step , we see the variable update command \verb | <var:t> := <nat:4> ; | . This takes the precondition $ \{ <var:E> = <var:g> \} $ as $ \{ <var:E> = <var:g> \land <var:t> = <nat:4> \} $ . Observing the subsequent statement contained in our list of instructions , we have the variable assignmet command yielding $ <nat:2> + <var:t> * <var:E> $ as $ <var:t>$ . This code takes $ \{ <var:E> = <var:g> \land <var:t> = <nat:4> \} $ as the condition $ \{ <var:E> = <var:g> \land <var:t> = <nat:4> \cdot <var:g> + <nat:2> \} $ . Honing in on the following line of code found in the program , the assignment code \verb | <var:t> := <nat:3> + <var:t> * <var:E> | . This moves the precondition $ \{ <var:E> = <var:g> \land <var:t> = <nat:4> \cdot <var:g> + <nat:2> \} $ as $ \{ <var:E> = <var:g> \land <var:t> = <nat:4> \cdot <var:g> ^ <nat:2> + <nat:2> \cdot <var:g> + <nat:3> \} $ . This is shown to be logically sound by the assignment inference rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:4> ; <var:t> := <nat:2> + <var:t> * <var:E> ; <var:t> := <nat:3> + <var:t> * <var:E> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:E> = <var:g> }} <def:poly> {{ <var:t> = <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:g> /\ <var:t> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:g> /\ <var:t> = <nat:4> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:g> /\ <var:t> = <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 