\begin{document} \begin{theorem} Take the following program in \emph{Imp} such that \begin{verbatim} <var:w> := <nat:2> ; <var:w> := <nat:3> + <var:w> * <var:A> \end{verbatim} Assume that $ <var:A> = <var:i> $ prior to the evaluation of this program then we have $ <var:w> = <nat:2> \cdot <var:i> + <nat:3> $ when list of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:i> \} \\ <var:w> := <nat:2> ; \\ \{ <var:A> = <var:i> \land <var:w> = <nat:2> \} \\ <var:w> := <nat:3> + <var:w> * <var:A> \\ \{ <var:A> = <var:i> \land <var:w> = <nat:2> \times <var:i> + <nat:3> \} \end{eqnarray} Applying Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:A> = <var:i> }} <var:w> := <nat:2> ; <var:w> := <nat:3> + <var:w> * <var:A> {{ <var:w> = <nat:2> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:w> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:i> /\ <var:w> = <nat:2> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 