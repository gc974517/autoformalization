\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:m1> := <var:p> ; <var:m2> := <var:m1> * <var:p> ; <var:m3> := <var:m2> * <var:p> ; <var:m4> := <var:m3> * <var:p> ; <var:m0> := <nat:1> ; <var:m1> := <var:m1> * <nat:1> ; <var:m4> := <var:m4> * <nat:3> ; <var:G> := <var:m4> <var:G> := <var:G> + <var:m1> <var:G> := <var:G> + <var:m0> \end{verbatim} Given , assuming some natural numbers $ <var:c> $ , $ <var:p> = <var:c> $ before the execution of this code it must be that we see $ <var:G> = <nat:3> * <var:c> ^ <nat:4> + <nat:1> * <var:c> + <nat:1> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques produces : \begin{eqnarray} \{ <var:p> = <var:c> \} \\ <var:m1> := <var:p> ; \\ \{ <var:p> = <var:c> \land <var:m1> = <var:c> \} \\ <var:m2> := <var:m1> * <var:p> ; \\ \{ <var:p> = <var:c> \land <var:m1> = <var:c> \land <var:m2> = <var:c> ^ <nat:2> \} \\ <var:m3> := <var:m2> * <var:p> ; \\ \{ <var:p> = <var:c> \land <var:m1> = <var:c> \land <var:m2> = <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \} \\ <var:m4> := <var:m3> * <var:p> ; \\ \{ <var:p> = <var:c> \land <var:m1> = <var:c> \land <var:m2> = <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \land <var:m4> = <var:c> ^ <nat:4> \} \\ <var:m0> := <nat:1> ; \\ \{ <var:p> = <var:c> \land <var:m1> = <var:c> \land <var:m2> = <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \land <var:m4> = <var:c> ^ <nat:4> \land <var:m0> = <nat:1> \} \\ <var:m1> := <var:m1> * <nat:1> ; \\ \{ <var:p> = <var:c> \land <var:m1> = <nat:1> \times <var:c> \land <var:m2> = <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \land <var:m4> = <var:c> ^ <nat:4> \land <var:m0> = <nat:1> \} \\ <var:m4> := <var:m4> * <nat:3> ; \\ \{ <var:p> = <var:c> \land <var:m1> = <nat:1> \times <var:c> \land <var:m2> = <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \land <var:m4> = <nat:3> \times <var:c> ^ <nat:4> \land <var:m0> = <nat:1> \} \\ <var:G> := <var:m4> \\ \{ <var:p> = <var:c> \land <var:m1> = <nat:1> \times <var:c> \land <var:m2> = <var:c> ^ <nat:2> \land <var:m3> = <var:c> ^ <nat:3> \land <var:m0> = <nat:1> \land <var:G> = <nat:3> \times <var:c> ^ <nat:4> \} \\ <var:G> := <var:G> + <var:m1> \\ \{ <var:p> = <var:c> \land <var:m0> = <nat:1> \land <var:G> = <nat:3> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> \} \\ <var:G> := <var:G> + <var:m0> \\ \{ <var:p> = <var:c> \land <var:G> = <nat:3> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> + <nat:1> \} \end{eqnarray} Given the preceding argument , the code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <var:m4> : string := " <var:m4> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:p> = <var:c> }} <var:m1> := <var:p> ; <var:m2> := <var:m1> * <var:p> ; <var:m3> := <var:m2> * <var:p> ; <var:m4> := <var:m3> * <var:p> ; <var:m0> := <nat:1> ; <var:m1> := <var:m1> * <nat:1> ; <var:m4> := <var:m4> * <nat:3> ; <var:G> := <var:m4> <var:G> := <var:G> + <var:m1> <var:G> := <var:G> + <var:m0> {{ <var:G> = <nat:3> * <var:c> ^ <nat:4> + <nat:1> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:m1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:m1> = <var:c> /\ <var:m2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:m1> = <var:c> /\ <var:m2> = <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:m1> = <var:c> /\ <var:m2> = <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> /\ <var:m4> = <var:c> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:m1> = <var:c> /\ <var:m2> = <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> /\ <var:m4> = <var:c> ^ <nat:4> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:m1> = <nat:1> * <var:c> /\ <var:m2> = <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> /\ <var:m4> = <var:c> ^ <nat:4> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:m1> = <nat:1> * <var:c> /\ <var:m2> = <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> /\ <var:m4> = <nat:3> * <var:c> ^ <nat:4> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:m1> = <nat:1> * <var:c> /\ <var:m2> = <var:c> ^ <nat:2> /\ <var:m3> = <var:c> ^ <nat:3> /\ <var:m0> = <nat:1> /\ <var:G> = <nat:3> * <var:c> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:m0> = <nat:1> /\ <var:G> = <nat:3> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:c> /\ <var:G> = <nat:3> * <var:c> ^ <nat:4> + <nat:1> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 