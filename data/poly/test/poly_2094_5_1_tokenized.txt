\begin{document} \begin{theorem} Consider the following segment of code as \begin{verbatim} <var:w1> := <var:J> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:4> ; <var:V> := <var:w1> <var:V> := <var:V> + <var:w0> \end{verbatim} Given $ <var:J> = <var:D> $ letting whole numbers $ <var:D> $ ahead of evaluating this series of instructions it holds that $ <var:V> = <nat:4> \cdot <var:D> + <nat:3> $ when list of instructions executes . \end{theorem} \begin{proof} Observe the following decorated code segment . \begin{eqnarray} \{ <var:J> = <var:D> \} \\ <var:w1> := <var:J> ; \\ \{ <var:J> = <var:D> \land <var:w1> = <var:D> \} \end{eqnarray} Furthering evaluating our set of instructions yields : \begin{eqnarray} <var:w0> := <nat:3> ; \\ \{ <var:J> = <var:D> \land <var:w1> = <var:D> \land <var:w0> = <nat:3> \} \\ <var:w1> := <var:w1> * <nat:4> ; \\ \{ <var:J> = <var:D> \land <var:w1> = <nat:4> * <var:D> \land <var:w0> = <nat:3> \} \\ <var:V> := <var:w1> \\ \{ <var:J> = <var:D> \land <var:w0> = <nat:3> \land <var:V> = <nat:4> * <var:D> \} \\ <var:V> := <var:V> + <var:w0> \\ \{ <var:J> = <var:D> \land <var:V> = <nat:4> * <var:D> + <nat:3> \} \end{eqnarray} Applying usual Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:J> = <var:D> }} <var:w1> := <var:J> ; <var:w0> := <nat:3> ; <var:w1> := <var:w1> * <nat:4> ; <var:V> := <var:w1> <var:V> := <var:V> + <var:w0> {{ <var:V> = <nat:4> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:w1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:w1> = <var:D> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:w1> = <nat:4> * <var:D> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:w0> = <nat:3> /\ <var:V> = <nat:4> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:V> = <nat:4> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 