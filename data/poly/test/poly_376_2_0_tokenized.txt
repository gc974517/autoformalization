\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:1> ; <var:V> := <var:T0> \end{verbatim} Allow it to be that $ <var:J> = <var:A> $ , with some $ <var:A> $ , ahead of the execution of our series of commands then we have $ <var:V> = <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our set of commands can be demonstrated by typical Hoare techniques . Jumping to the proceeding command contained in the segment of code , we see the variable update statement defining $ <nat:1> $ to $ <var:T0>$ . This forwards the condition $ \{ <var:J> = <var:A> \} $ into the postcondition $ \{ <var:J> = <var:A> \land <var:T0> = <nat:1> \} $ . Jumping to the next command in the code segment , we have the assignment code binding $ <var:T0$ as $ <var:V>$ . This transfers the precondition $ \{ <var:J> = <var:A> \land <var:T0> = <nat:1> \} $ as the postcondition $ \{ <var:J> = <var:A> \land <var:V> = <nat:1> \} $ . This is rigorously given through the assignment rule defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:J> = <var:A> }} <var:T0> := <nat:1> ; <var:V> := <var:T0> {{ <var:V> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:V> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 