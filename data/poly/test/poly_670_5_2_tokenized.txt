\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:C> := <nat:3> ; <var:C> := <nat:3> + <var:C> * <var:y> ; <var:C> := <nat:2> + <var:C> * <var:y> ; <var:C> := <nat:4> + <var:C> * <var:y> ; <var:C> := <nat:2> + <var:C> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Given for some $ <var:I> \in \mathbb{Z}^+ $ that $ <var:y> = <var:I> $ before interpreting our series of instructions , then we have $ <var:C> = <nat:3> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + <nat:2> $ when series of instructions is done . \end{theorem} \begin{proof} Arguing the correctness of this set of commands is accomplished by typical Hoare logic . Now , we have the assignment line \verb | <var:C> := <nat:3> ; | . This code transfers $ \{ <var:y> = <var:I> \} $ into $ \{ <var:y> = <var:I> \land <var:C> = <nat:3> \} $ . This is shown using the assignment inference rule obtained from Hoare reasoning . Now , we see the code \verb | <var:C> := <nat:3> + <var:C> * <var:y> ; | . This command redefines the precondition $ \{ <var:y> = <var:I> \land <var:C> = <nat:3> \} $ to the condition $ \{ <var:y> = <var:I> \land <var:C> = <nat:3> \times <var:I> + <nat:3> \} $ . This is known to be sound by the assignment inference rule given by Hoare logic . Moving forward to the next piece of code contained in the series of instructions , the variable binding code \verb | <var:C> := <nat:2> + <var:C> * <var:y> ; | . This advances the precondition $ \{ <var:y> = <var:I> \land <var:C> = <nat:3> \times <var:I> + <nat:3> \} $ into the condition $ \{ <var:y> = <var:I> \land <var:C> = <nat:3> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:2> \} $ . Advancing to the proceeding line of code in our list of instructions , we see the environment update code assigning $ <nat:4> + <var:C> * <var:y> $ to $ <var:C>$ . This code takes $ \{ <var:y> = <var:I> \land <var:C> = <nat:3> \times <var:I> ^ <nat:2> + <nat:3> \times <var:I> + <nat:2> \} $ into the condition $ \{ <var:y> = <var:I> \land <var:C> = <nat:3> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> + <nat:4> \} $ . This is ensured with the assignment inference rule in usual Hoare logic . Following , we see the statement assigning $ <nat:2> + <var:C> * <var:y$ into $ <var:C>$ . This code takes the precondition $ \{ <var:y> = <var:I> \land <var:C> = <nat:3> \times <var:I> ^ <nat:3> + <nat:3> \times <var:I> ^ <nat:2> + <nat:2> \times <var:I> + <nat:4> \} $ toward the postcondition $ \{ <var:y> = <var:I> \land <var:C> = <nat:3> \times <var:I> ^ <nat:4> + <nat:3> \times <var:I> ^ <nat:3> + <nat:2> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:2> \} $ . This is sound by the assignment scheme defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:3> ; <var:C> := <nat:3> + <var:C> * <var:y> ; <var:C> := <nat:2> + <var:C> * <var:y> ; <var:C> := <nat:4> + <var:C> * <var:y> ; <var:C> := <nat:2> + <var:C> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:y> = <var:I> }} <def:poly> {{ <var:C> = <nat:3> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:C> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:C> = <nat:3> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:C> = <nat:3> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:C> = <nat:3> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:C> = <nat:3> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 