\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:3> ; <var:o> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:L> = <var:r> $ ahead of interpreting this series of commands , it follows that we see $ <var:o> = <nat:3> $ once series of instructions is done . \end{theorem} \begin{proof} The flow of logic for our code segment is shown by usual Hoare logic . Immediately following , we have the variable assignmet code defining $ <nat:3> $ toward $ <var:Q0>$ . This moves the precondition $ \{ <var:L> = <var:r> \} $ toward $ \{ <var:L> = <var:r> \land <var:Q0> = <nat:3> \} $ . This is guaranteed through the assignment scheme in Hoare techniques . Moving on to the next step , we see the variable assignmet command \verb | <var:o> := <var:Q0> | . This code transfers the condition $ \{ <var:L> = <var:r> \land <var:Q0> = <nat:3> \} $ to $ \{ <var:L> = <var:r> \land <var:o> = <nat:3> \} $ . This is rigorously given through the assignment inference rule of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:3> ; <var:o> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:L> = <var:r> }} <def:poly> {{ <var:o> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:r> /\ <var:o> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 