\begin{document} \begin{theorem} Take a code in \emph{Imp} as \begin{verbatim} <var:R> := <nat:1> ; <var:R> := <var:R> * <var:r> ; <var:R> := <nat:3> + <var:R> * <var:r> ; <var:R> := <nat:3> + <var:R> * <var:r> ; <var:R> := <nat:2> + <var:R> * <var:r> ; <var:R> := <var:R> * <var:r> ; <var:R> := <var:R> * <var:r> ; <var:R> := <nat:1> + <var:R> * <var:r> ; <var:R> := <nat:1> + <var:R> * <var:r> ; <var:R> := <nat:2> + <var:R> * <var:r> ; <var:R> := <nat:3> + <var:R> * <var:r> ; <var:R> := <nat:4> + <var:R> * <var:r> \end{verbatim} Assume it to be that $ <var:r> = <var:E> $ ahead of the execution of the segment of code then we have $ <var:R> = <nat:1> \times <var:E> ^ <nat:11> + <nat:3> \times <var:E> ^ <nat:9> + <nat:3> \times <var:E> ^ <nat:8> + <nat:2> \times <var:E> ^ <nat:7> + <nat:1> \times <var:E> ^ <nat:4> + <nat:1> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:4> $ when set of commands has terminated . \end{theorem} \begin{proof} The method of proof for our list of commands is clear by standard Hoare reasoning . Observing the upcoming lines of codecontained in the program , we have \begin{eqnarray} \{ <var:r> = <var:E> \} \, <var:R> := <nat:1> \, \{ <var:r> = <var:E> \land <var:R> = <nat:1> \} \\ \{ <var:r> = <var:E> \land <var:R> = <nat:1> \} \, <var:R> := <var:R> * <var:r> \, \{ <var:r> = <var:E> \land <var:R> = <nat:1> * <var:E> + \} \\ \{ <var:r> = <var:E> \land <var:R> = <nat:1> * <var:E> + \} \, <var:R> := <nat:3> + <var:R> * <var:r> \, \{ <var:r> = <var:E> \land <var:R> = <nat:1> * <var:E> ^ <nat:2> + <nat:3> \} \\ \{ <var:r> = <var:E> \land <var:R> = <nat:1> * <var:E> ^ <nat:2> + <nat:3> \} \, <var:R> := <nat:3> + <var:R> * <var:r> \, \{ <var:r> = <var:E> \land <var:R> = <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:3> \} \\ \{ <var:r> = <var:E> \land <var:R> = <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:3> \} \, <var:R> := <nat:2> + <var:R> * <var:r> \, \{ <var:r> = <var:E> \land <var:R> = <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> \} \\ \{ <var:r> = <var:E> \land <var:R> = <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> \} \, <var:R> := <var:R> * <var:r> \, \{ <var:r> = <var:E> \land <var:R> = <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + \} \\ \{ <var:r> = <var:E> \land <var:R> = <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + \} \, <var:R> := <var:R> * <var:r> \, \{ <var:r> = <var:E> \land <var:R> = <nat:1> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + \} \end{eqnarray} This is deduced through the variable binding scheme of standard Hoare techniques . Moving on to the next step , \begin{eqnarray} \{ <var:r> = <var:E> \} \, <var:R> := <nat:1> \, \{ <var:r> = <var:E> \land <var:R> = <nat:1> \} \\ \{ <var:r> = <var:E> \land <var:R> = <nat:1> \} \, <var:R> := <var:R> * <var:r> \, \{ <var:r> = <var:E> \land <var:R> = <nat:1> * <var:E> + \} \end{eqnarray} Keeping momentum , \begin{eqnarray} \{ <var:r> = <var:E> \} \, <var:R> := <nat:1> \, \{ <var:r> = <var:E> \land <var:R> = <nat:1> \} \end{eqnarray} This is sound through the rule found in typical Hoare reasoning . Honing in on the subsequent step in the list of instructions , we see \begin{eqnarray} \{ <var:r> = <var:E> \} \, <var:R> := <nat:1> \, \{ <var:r> = <var:E> \land <var:R> = <nat:1> \} \end{eqnarray} This is given with the environment update rule of Hoare logic . Taking a look at the upcoming step seen in our code , we see \begin{eqnarray} \{ <var:r> = <var:E> \} \, <var:R> := <nat:1> \, \{ <var:r> = <var:E> \land <var:R> = <nat:1> \} \end{eqnarray} This is deduced with the assignment law found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:r> = <var:E> }} <var:R> := <nat:1> ; <var:R> := <var:R> * <var:r> ; <var:R> := <nat:3> + <var:R> * <var:r> ; <var:R> := <nat:3> + <var:R> * <var:r> ; <var:R> := <nat:2> + <var:R> * <var:r> ; <var:R> := <var:R> * <var:r> ; <var:R> := <var:R> * <var:r> ; <var:R> := <nat:1> + <var:R> * <var:r> ; <var:R> := <nat:1> + <var:R> * <var:r> ; <var:R> := <nat:2> + <var:R> * <var:r> ; <var:R> := <nat:3> + <var:R> * <var:r> ; <var:R> := <nat:4> + <var:R> * <var:r> {{ <var:R> = <nat:1> * <var:E> ^ <nat:11> + <nat:3> * <var:E> ^ <nat:9> + <nat:3> * <var:E> ^ <nat:8> + <nat:2> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:R> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:R> = <nat:1> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:R> = <nat:1> * <var:E> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:R> = <nat:1> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:R> = <nat:1> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:R> = <nat:1> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:3> + <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:R> = <nat:1> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:4> + <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:R> = <nat:1> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:5> + <nat:3> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:R> = <nat:1> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:6> + <nat:3> * <var:E> ^ <nat:5> + <nat:2> * <var:E> ^ <nat:4> + <nat:1> * <var:E> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:R> = <nat:1> * <var:E> ^ <nat:9> + <nat:3> * <var:E> ^ <nat:7> + <nat:3> * <var:E> ^ <nat:6> + <nat:2> * <var:E> ^ <nat:5> + <nat:1> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:R> = <nat:1> * <var:E> ^ <nat:10> + <nat:3> * <var:E> ^ <nat:8> + <nat:3> * <var:E> ^ <nat:7> + <nat:2> * <var:E> ^ <nat:6> + <nat:1> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:R> = <nat:1> * <var:E> ^ <nat:11> + <nat:3> * <var:E> ^ <nat:9> + <nat:3> * <var:E> ^ <nat:8> + <nat:2> * <var:E> ^ <nat:7> + <nat:1> * <var:E> ^ <nat:4> + <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 