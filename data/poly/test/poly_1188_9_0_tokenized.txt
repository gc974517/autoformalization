\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:2> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:u> ; <var:W2> := <nat:3> ; <var:W2> := <var:W2> * <var:u> ; <var:W2> := <var:W2> * <var:u> ; <var:c> := <var:W2> ; <var:c> := <var:c> + <var:W1> ; <var:c> := <var:c> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assuming , with some positive numbers $ <var:g> $ , it to be that $ <var:u> = <var:g> $ before interpreting the program , it holds that we have $ <var:c> = <nat:3> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:2> $ once list of instructions has finished executing . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning produces : \begin{eqnarray} \{ <var:u> = <var:g> \} \\ <var:W0> := <nat:2> ; \\ \{ <var:u> = <var:g> \land <var:W0> = <nat:2> \} \\ <var:W1> := <nat:3> ; \\ \{ <var:u> = <var:g> \land <var:W0> = <nat:2> \land <var:W1> = <nat:3> \} \\ <var:W1> := <var:W1> * <var:u> ; \\ \{ <var:u> = <var:g> \land <var:W0> = <nat:2> \land <var:W1> = <nat:3> \cdot <var:g> \} \\ <var:W2> := <nat:3> ; \\ \{ <var:u> = <var:g> \land <var:W0> = <nat:2> \land <var:W1> = <nat:3> \cdot <var:g> \land <var:W2> = <nat:3> \} \\ <var:W2> := <var:W2> * <var:u> ; \\ \{ <var:u> = <var:g> \land <var:W0> = <nat:2> \land <var:W1> = <nat:3> \cdot <var:g> \land <var:W2> = <nat:3> \cdot <var:g> \} \\ <var:W2> := <var:W2> * <var:u> ; \\ \{ <var:u> = <var:g> \land <var:W0> = <nat:2> \land <var:W1> = <nat:3> \cdot <var:g> \land <var:W2> = <nat:3> \cdot <var:g> ^ <nat:2> \} \\ <var:c> := <var:W2> ; \\ \{ <var:u> = <var:g> \land <var:W0> = <nat:2> \land <var:W1> = <nat:3> \cdot <var:g> \land <var:c> = <nat:3> \cdot <var:g> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:W1> ; \\ \{ <var:u> = <var:g> \land <var:W0> = <nat:2> \land <var:c> = <nat:3> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> \} \\ <var:c> := <var:c> + <var:W0> \\ \{ <var:u> = <var:g> \land <var:c> = <nat:3> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> + <nat:2> \} \end{eqnarray} Considering the above , this code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W0> := <nat:2> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:u> ; <var:W2> := <nat:3> ; <var:W2> := <var:W2> * <var:u> ; <var:W2> := <var:W2> * <var:u> ; <var:c> := <var:W2> ; <var:c> := <var:c> + <var:W1> ; <var:c> := <var:c> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:u> = <var:g> }} <def:poly> {{ <var:c> = <nat:3> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:3> * <var:g> /\ <var:W2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:3> * <var:g> /\ <var:W2> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:3> * <var:g> /\ <var:W2> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:3> * <var:g> /\ <var:c> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:W0> = <nat:2> /\ <var:c> = <nat:3> * <var:g> ^ <nat:2> + <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:c> = <nat:3> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 