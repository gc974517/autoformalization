\begin{document} \begin{theorem} We define the following list of commands as \begin{verbatim} <var:q> := <nat:4> ; <var:q> := <nat:2> + <var:q> * <var:R> ; <var:q> := <nat:4> + <var:q> * <var:R> ; <var:q> := <nat:4> + <var:q> * <var:R> ; <var:q> := <nat:1> + <var:q> * <var:R> \end{verbatim} Given it to hold that $ <var:R> = <var:w> $ before executing our code , it must be that we have $ <var:q> = <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> $ . \end{theorem} \begin{proof} Using typical Hoare techniques yields : \begin{eqnarray} \{ <var:R> = <var:w> \} \\ <var:q> := <nat:4> ; \\ \{ <var:R> = <var:w> \land <var:q> = <nat:4> \} \\ <var:q> := <nat:2> + <var:q> * <var:R> ; \\ \{ <var:R> = <var:w> \land <var:q> = <nat:4> \cdot <var:w> + <nat:2> \} \\ <var:q> := <nat:4> + <var:q> * <var:R> ; \\ \{ <var:R> = <var:w> \land <var:q> = <nat:4> \cdot <var:w> ^ <nat:2> + <nat:2> \cdot <var:w> + <nat:4> \} \\ <var:q> := <nat:4> + <var:q> * <var:R> ; \\ \{ <var:R> = <var:w> \land <var:q> = <nat:4> \cdot <var:w> ^ <nat:3> + <nat:2> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:4> \} \\ <var:q> := <nat:1> + <var:q> * <var:R> \\ \{ <var:R> = <var:w> \land <var:q> = <nat:4> \cdot <var:w> ^ <nat:4> + <nat:2> \cdot <var:w> ^ <nat:3> + <nat:4> \cdot <var:w> ^ <nat:2> + <nat:4> \cdot <var:w> + <nat:1> \} \end{eqnarray} Considering the preceding argument , our segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:R> = <var:w> }} <var:q> := <nat:4> ; <var:q> := <nat:2> + <var:q> * <var:R> ; <var:q> := <nat:4> + <var:q> * <var:R> ; <var:q> := <nat:4> + <var:q> * <var:R> ; <var:q> := <nat:1> + <var:q> * <var:R> {{ <var:q> = <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:q> = <nat:4> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:q> = <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:q> = <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:q> = <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 