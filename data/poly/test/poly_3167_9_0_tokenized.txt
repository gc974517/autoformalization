\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:4> ; <var:b1> := <nat:8> ; <var:b1> := <var:b1> * <var:S> ; <var:b2> := <nat:8> ; <var:b2> := <var:b2> * <var:S> ; <var:b2> := <var:b2> * <var:S> ; <var:j> := <var:b2> ; <var:j> := <var:j> + <var:b1> ; <var:j> := <var:j> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:S> = <var:d> $ ( assuming some positive integer coefficients $ <var:d> $ ) prior to the execution of our series of commands it must be that we see $ <var:j> = <nat:8> \cdot <var:d> ^ <nat:2> + <nat:8> \cdot <var:d> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic gives : \begin{eqnarray} \{ <var:S> = <var:d> \} \\ <var:b0> := <nat:4> ; \\ \{ <var:S> = <var:d> \land <var:b0> = <nat:4> \} \\ <var:b1> := <nat:8> ; \\ \{ <var:S> = <var:d> \land <var:b0> = <nat:4> \land <var:b1> = <nat:8> \} \\ <var:b1> := <var:b1> * <var:S> ; \\ \{ <var:S> = <var:d> \land <var:b0> = <nat:4> \land <var:b1> = <nat:8> \cdot <var:d> \} \\ <var:b2> := <nat:8> ; \\ \{ <var:S> = <var:d> \land <var:b0> = <nat:4> \land <var:b1> = <nat:8> \cdot <var:d> \land <var:b2> = <nat:8> \} \\ <var:b2> := <var:b2> * <var:S> ; \\ \{ <var:S> = <var:d> \land <var:b0> = <nat:4> \land <var:b1> = <nat:8> \cdot <var:d> \land <var:b2> = <nat:8> \cdot <var:d> \} \\ <var:b2> := <var:b2> * <var:S> ; \\ \{ <var:S> = <var:d> \land <var:b0> = <nat:4> \land <var:b1> = <nat:8> \cdot <var:d> \land <var:b2> = <nat:8> \cdot <var:d> ^ <nat:2> \} \\ <var:j> := <var:b2> ; \\ \{ <var:S> = <var:d> \land <var:b0> = <nat:4> \land <var:b1> = <nat:8> \cdot <var:d> \land <var:j> = <nat:8> \cdot <var:d> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:b1> ; \\ \{ <var:S> = <var:d> \land <var:b0> = <nat:4> \land <var:j> = <nat:8> \cdot <var:d> ^ <nat:2> + <nat:8> \cdot <var:d> \} \\ <var:j> := <var:j> + <var:b0> \\ \{ <var:S> = <var:d> \land <var:j> = <nat:8> \cdot <var:d> ^ <nat:2> + <nat:8> \cdot <var:d> + <nat:4> \} \end{eqnarray} Considering the preceding argument , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <def:poly> := <var:b0> := <nat:4> ; <var:b1> := <nat:8> ; <var:b1> := <var:b1> * <var:S> ; <var:b2> := <nat:8> ; <var:b2> := <var:b2> * <var:S> ; <var:b2> := <var:b2> * <var:S> ; <var:j> := <var:b2> ; <var:j> := <var:j> + <var:b1> ; <var:j> := <var:j> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:S> = <var:d> }} <def:poly> {{ <var:j> = <nat:8> * <var:d> ^ <nat:2> + <nat:8> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:8> * <var:d> /\ <var:b2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:8> * <var:d> /\ <var:b2> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:8> * <var:d> /\ <var:b2> = <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:8> * <var:d> /\ <var:j> = <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:b0> = <nat:4> /\ <var:j> = <nat:8> * <var:d> ^ <nat:2> + <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:d> /\ <var:j> = <nat:8> * <var:d> ^ <nat:2> + <nat:8> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 