\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q> := <nat:1> ; <var:q> := <nat:2> + <var:q> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:X> = <var:w> $ ( for all positive coefficients $ <var:w> $ ) ahead of interpreting this list of commands , it must be that we see $ <var:q> = <nat:1> \times <var:w> + <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare techniques returns : \begin{eqnarray} \{ <var:X> = <var:w> \} \\ <var:q> := <nat:1> ; \\ \{ <var:X> = <var:w> \land <var:q> = <nat:1> \} \\ <var:q> := <nat:2> + <var:q> * <var:X> \\ \{ <var:X> = <var:w> \land <var:q> = <nat:1> * <var:w> + <nat:2> \} \end{eqnarray} As a result , this series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:1> ; <var:q> := <nat:2> + <var:q> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:X> = <var:w> }} <def:poly> {{ <var:q> = <nat:1> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:w> /\ <var:q> = <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 