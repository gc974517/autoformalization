\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:7> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:W> ; <var:L2> := <nat:9> ; <var:L2> := <var:L2> * <var:W> ; <var:L2> := <var:L2> * <var:W> ; <var:B> := <var:L2> ; <var:B> := <var:B> + <var:L1> ; <var:B> := <var:B> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:W> = <var:Q> $ ahead of executing the series of commands then we see $ <var:B> = <nat:9> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques gives us : \begin{eqnarray} \{ <var:W> = <var:Q> \} \\ <var:L0> := <nat:7> ; \\ \{ <var:W> = <var:Q> \land <var:L0> = <nat:7> \} \\ <var:L1> := <nat:1> ; \\ \{ <var:W> = <var:Q> \land <var:L0> = <nat:7> \land <var:L1> = <nat:1> \} \\ <var:L1> := <var:L1> * <var:W> ; \\ \{ <var:W> = <var:Q> \land <var:L0> = <nat:7> \land <var:L1> = <nat:1> * <var:Q> \} \\ <var:L2> := <nat:9> ; \\ \{ <var:W> = <var:Q> \land <var:L0> = <nat:7> \land <var:L1> = <nat:1> * <var:Q> \land <var:L2> = <nat:9> \} \\ <var:L2> := <var:L2> * <var:W> ; \\ \{ <var:W> = <var:Q> \land <var:L0> = <nat:7> \land <var:L1> = <nat:1> * <var:Q> \land <var:L2> = <nat:9> * <var:Q> \} \\ <var:L2> := <var:L2> * <var:W> ; \\ \{ <var:W> = <var:Q> \land <var:L0> = <nat:7> \land <var:L1> = <nat:1> * <var:Q> \land <var:L2> = <nat:9> * <var:Q> ^ <nat:2> \} \\ <var:B> := <var:L2> ; \\ \{ <var:W> = <var:Q> \land <var:L0> = <nat:7> \land <var:L1> = <nat:1> * <var:Q> \land <var:B> = <nat:9> * <var:Q> ^ <nat:2> \} \end{eqnarray} Advancing executing this set of commands gives : \begin{eqnarray} <var:B> := <var:B> + <var:L1> ; \\ \{ <var:W> = <var:Q> \land <var:L0> = <nat:7> \land <var:B> = <nat:9> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> \} \\ <var:B> := <var:B> + <var:L0> \\ \{ <var:W> = <var:Q> \land <var:B> = <nat:9> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:7> \} \end{eqnarray} As a result , this series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <def:poly> := <var:L0> := <nat:7> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:W> ; <var:L2> := <nat:9> ; <var:L2> := <var:L2> * <var:W> ; <var:L2> := <var:L2> * <var:W> ; <var:B> := <var:L2> ; <var:B> := <var:B> + <var:L1> ; <var:B> := <var:B> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:W> = <var:Q> }} <def:poly> {{ <var:B> = <nat:9> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:1> * <var:Q> /\ <var:L2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:1> * <var:Q> /\ <var:L2> = <nat:9> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:1> * <var:Q> /\ <var:L2> = <nat:9> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:L0> = <nat:7> /\ <var:L1> = <nat:1> * <var:Q> /\ <var:B> = <nat:9> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:L0> = <nat:7> /\ <var:B> = <nat:9> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Q> /\ <var:B> = <nat:9> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 