\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} such that \begin{verbatim} <var:A1> := <var:u> ; <var:A2> := <var:A1> * <var:u> ; <var:A3> := <var:A2> * <var:u> ; <var:A4> := <var:A3> * <var:u> ; <var:A0> := <nat:3> ; <var:A1> := <var:A1> * <nat:9> ; <var:A3> := <var:A3> * <nat:5> ; <var:A4> := <var:A4> * <nat:5> ; <var:b> := <var:A4> <var:b> := <var:b> + <var:A3> <var:b> := <var:b> + <var:A1> <var:b> := <var:b> + <var:A0> \end{verbatim} Assume $ <var:u> = <var:x> $ prior to evaluating our set of instructions it holds that $ <var:b> = <nat:5> * <var:x> ^ <nat:4> + <nat:5> * <var:x> ^ <nat:3> + <nat:9> * <var:x> + <nat:3> $ after code segment executes . \end{theorem} \begin{proof} The way to prove correctness for our series of commands can be shown using this decorated set of instructions . \begin{eqnarray} \{ <var:u> = <var:x> \} \\ <var:A1> := <var:u> ; \\ \{ <var:u> = <var:x> \land <var:A1> = <var:x> \} \\ <var:A2> := <var:A1> * <var:u> ; \\ \{ <var:u> = <var:x> \land <var:A1> = <var:x> \land <var:A2> = <var:x> ^ <nat:2> \} \\ <var:A3> := <var:A2> * <var:u> ; \\ \{ <var:u> = <var:x> \land <var:A1> = <var:x> \land <var:A2> = <var:x> ^ <nat:2> \land <var:A3> = <var:x> ^ <nat:3> \} \\ <var:A4> := <var:A3> * <var:u> ; \\ \{ <var:u> = <var:x> \land <var:A1> = <var:x> \land <var:A2> = <var:x> ^ <nat:2> \land <var:A3> = <var:x> ^ <nat:3> \land <var:A4> = <var:x> ^ <nat:4> \} \\ <var:A0> := <nat:3> ; \\ \{ <var:u> = <var:x> \land <var:A1> = <var:x> \land <var:A2> = <var:x> ^ <nat:2> \land <var:A3> = <var:x> ^ <nat:3> \land <var:A4> = <var:x> ^ <nat:4> \land <var:A0> = <nat:3> \} \\ <var:A1> := <var:A1> * <nat:9> ; \\ \{ <var:u> = <var:x> \land <var:A1> = <nat:9> * <var:x> \land <var:A2> = <var:x> ^ <nat:2> \land <var:A3> = <var:x> ^ <nat:3> \land <var:A4> = <var:x> ^ <nat:4> \land <var:A0> = <nat:3> \} \\ <var:A3> := <var:A3> * <nat:5> ; \\ \{ <var:u> = <var:x> \land <var:A1> = <nat:9> * <var:x> \land <var:A2> = <var:x> ^ <nat:2> \land <var:A3> = <nat:5> * <var:x> ^ <nat:3> \land <var:A4> = <var:x> ^ <nat:4> \land <var:A0> = <nat:3> \} \\ <var:A4> := <var:A4> * <nat:5> ; \\ \{ <var:u> = <var:x> \land <var:A1> = <nat:9> * <var:x> \land <var:A2> = <var:x> ^ <nat:2> \land <var:A3> = <nat:5> * <var:x> ^ <nat:3> \land <var:A4> = <nat:5> * <var:x> ^ <nat:4> \land <var:A0> = <nat:3> \} \\ <var:b> := <var:A4> \\ \{ <var:u> = <var:x> \land <var:A1> = <nat:9> * <var:x> \land <var:A2> = <var:x> ^ <nat:2> \land <var:A3> = <nat:5> * <var:x> ^ <nat:3> \land <var:A0> = <nat:3> \land <var:b> = <nat:5> * <var:x> ^ <nat:4> \} \\ <var:b> := <var:b> + <var:A3> \\ \{ <var:u> = <var:x> \land <var:A1> = <nat:9> * <var:x> \land <var:A2> = <var:x> ^ <nat:2> \land <var:A0> = <nat:3> \land <var:b> = <nat:5> * <var:x> ^ <nat:4> + <nat:5> * <var:x> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:A1> \\ \{ <var:u> = <var:x> \land <var:A0> = <nat:3> \land <var:b> = <nat:5> * <var:x> ^ <nat:4> + <nat:5> * <var:x> ^ <nat:3> + <nat:9> * <var:x> \} \\ <var:b> := <var:b> + <var:A0> \\ \{ <var:u> = <var:x> \land <var:b> = <nat:5> * <var:x> ^ <nat:4> + <nat:5> * <var:x> ^ <nat:3> + <nat:9> * <var:x> + <nat:3> \} \end{eqnarray} Using standard Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <var:A4> : string := " <var:A4> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:u> = <var:x> }} <var:A1> := <var:u> ; <var:A2> := <var:A1> * <var:u> ; <var:A3> := <var:A2> * <var:u> ; <var:A4> := <var:A3> * <var:u> ; <var:A0> := <nat:3> ; <var:A1> := <var:A1> * <nat:9> ; <var:A3> := <var:A3> * <nat:5> ; <var:A4> := <var:A4> * <nat:5> ; <var:b> := <var:A4> <var:b> := <var:b> + <var:A3> <var:b> := <var:b> + <var:A1> <var:b> := <var:b> + <var:A0> {{ <var:b> = <nat:5> * <var:x> ^ <nat:4> + <nat:5> * <var:x> ^ <nat:3> + <nat:9> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:A1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:A1> = <var:x> /\ <var:A2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:A1> = <var:x> /\ <var:A2> = <var:x> ^ <nat:2> /\ <var:A3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:A1> = <var:x> /\ <var:A2> = <var:x> ^ <nat:2> /\ <var:A3> = <var:x> ^ <nat:3> /\ <var:A4> = <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:A1> = <var:x> /\ <var:A2> = <var:x> ^ <nat:2> /\ <var:A3> = <var:x> ^ <nat:3> /\ <var:A4> = <var:x> ^ <nat:4> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:A1> = <nat:9> * <var:x> /\ <var:A2> = <var:x> ^ <nat:2> /\ <var:A3> = <var:x> ^ <nat:3> /\ <var:A4> = <var:x> ^ <nat:4> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:A1> = <nat:9> * <var:x> /\ <var:A2> = <var:x> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:x> ^ <nat:3> /\ <var:A4> = <var:x> ^ <nat:4> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:A1> = <nat:9> * <var:x> /\ <var:A2> = <var:x> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:x> ^ <nat:3> /\ <var:A4> = <nat:5> * <var:x> ^ <nat:4> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:A1> = <nat:9> * <var:x> /\ <var:A2> = <var:x> ^ <nat:2> /\ <var:A3> = <nat:5> * <var:x> ^ <nat:3> /\ <var:A0> = <nat:3> /\ <var:b> = <nat:5> * <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:A1> = <nat:9> * <var:x> /\ <var:A2> = <var:x> ^ <nat:2> /\ <var:A0> = <nat:3> /\ <var:b> = <nat:5> * <var:x> ^ <nat:4> + <nat:5> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:A0> = <nat:3> /\ <var:b> = <nat:5> * <var:x> ^ <nat:4> + <nat:5> * <var:x> ^ <nat:3> + <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:x> /\ <var:b> = <nat:5> * <var:x> ^ <nat:4> + <nat:5> * <var:x> ^ <nat:3> + <nat:9> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 