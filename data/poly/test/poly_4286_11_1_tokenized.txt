\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:B1> := <var:o> ; <var:B2> := <var:B1> * <var:o> ; <var:B3> := <var:B2> * <var:o> ; <var:B0> := <nat:6> ; <var:B1> := <var:B1> * <nat:7> ; <var:B2> := <var:B2> * <nat:5> ; <var:B3> := <var:B3> * <nat:9> ; <var:Y> := <var:B3> <var:Y> := <var:Y> + <var:B2> <var:Y> := <var:Y> + <var:B1> <var:Y> := <var:Y> + <var:B0> \end{verbatim} Assuming that we have $ <var:o> = <var:Z> $ before executing the code , then we have $ <var:Y> = <nat:9> \cdot <var:Z> ^ <nat:3> + <nat:5> \cdot <var:Z> ^ <nat:2> + <nat:7> \cdot <var:Z> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:Z> \} \\ <var:B1> := <var:o> ; \\ \{ <var:o> = <var:Z> \land <var:B1> = <var:Z> \} \\ <var:B2> := <var:B1> * <var:o> ; \\ \{ <var:o> = <var:Z> \land <var:B1> = <var:Z> \land <var:B2> = <var:Z> ^ <nat:2> \} \\ <var:B3> := <var:B2> * <var:o> ; \\ \{ <var:o> = <var:Z> \land <var:B1> = <var:Z> \land <var:B2> = <var:Z> ^ <nat:2> \land <var:B3> = <var:Z> ^ <nat:3> \} \\ <var:B0> := <nat:6> ; \\ \{ <var:o> = <var:Z> \land <var:B1> = <var:Z> \land <var:B2> = <var:Z> ^ <nat:2> \land <var:B3> = <var:Z> ^ <nat:3> \land <var:B0> = <nat:6> \} \\ <var:B1> := <var:B1> * <nat:7> ; \\ \{ <var:o> = <var:Z> \land <var:B1> = <nat:7> \cdot <var:Z> \land <var:B2> = <var:Z> ^ <nat:2> \land <var:B3> = <var:Z> ^ <nat:3> \land <var:B0> = <nat:6> \} \end{eqnarray} Advancing the evaluation of our code gives us : \begin{eqnarray} <var:B2> := <var:B2> * <nat:5> ; \\ \{ <var:o> = <var:Z> \land <var:B1> = <nat:7> \cdot <var:Z> \land <var:B2> = <nat:5> \cdot <var:Z> ^ <nat:2> \land <var:B3> = <var:Z> ^ <nat:3> \land <var:B0> = <nat:6> \} \\ <var:B3> := <var:B3> * <nat:9> ; \\ \{ <var:o> = <var:Z> \land <var:B1> = <nat:7> \cdot <var:Z> \land <var:B2> = <nat:5> \cdot <var:Z> ^ <nat:2> \land <var:B3> = <nat:9> \cdot <var:Z> ^ <nat:3> \land <var:B0> = <nat:6> \} \\ <var:Y> := <var:B3> \\ \{ <var:o> = <var:Z> \land <var:B1> = <nat:7> \cdot <var:Z> \land <var:B2> = <nat:5> \cdot <var:Z> ^ <nat:2> \land <var:B0> = <nat:6> \land <var:Y> = <nat:9> \cdot <var:Z> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:B2> \\ \{ <var:o> = <var:Z> \land <var:B1> = <nat:7> \cdot <var:Z> \land <var:B0> = <nat:6> \land <var:Y> = <nat:9> \cdot <var:Z> ^ <nat:3> + <nat:5> \cdot <var:Z> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:B1> \\ \{ <var:o> = <var:Z> \land <var:B0> = <nat:6> \land <var:Y> = <nat:9> \cdot <var:Z> ^ <nat:3> + <nat:5> \cdot <var:Z> ^ <nat:2> + <nat:7> \cdot <var:Z> \} \\ <var:Y> := <var:Y> + <var:B0> \\ \{ <var:o> = <var:Z> \land <var:Y> = <nat:9> \cdot <var:Z> ^ <nat:3> + <nat:5> \cdot <var:Z> ^ <nat:2> + <nat:7> \cdot <var:Z> + <nat:6> \} \end{eqnarray} Using usual Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:o> = <var:Z> }} <var:B1> := <var:o> ; <var:B2> := <var:B1> * <var:o> ; <var:B3> := <var:B2> * <var:o> ; <var:B0> := <nat:6> ; <var:B1> := <var:B1> * <nat:7> ; <var:B2> := <var:B2> * <nat:5> ; <var:B3> := <var:B3> * <nat:9> ; <var:Y> := <var:B3> <var:Y> := <var:Y> + <var:B2> <var:Y> := <var:Y> + <var:B1> <var:Y> := <var:Y> + <var:B0> {{ <var:Y> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:7> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:B1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:B1> = <var:Z> /\ <var:B2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:B1> = <var:Z> /\ <var:B2> = <var:Z> ^ <nat:2> /\ <var:B3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:B1> = <var:Z> /\ <var:B2> = <var:Z> ^ <nat:2> /\ <var:B3> = <var:Z> ^ <nat:3> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:B1> = <nat:7> * <var:Z> /\ <var:B2> = <var:Z> ^ <nat:2> /\ <var:B3> = <var:Z> ^ <nat:3> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:B1> = <nat:7> * <var:Z> /\ <var:B2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:B3> = <var:Z> ^ <nat:3> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:B1> = <nat:7> * <var:Z> /\ <var:B2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:B3> = <nat:9> * <var:Z> ^ <nat:3> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:B1> = <nat:7> * <var:Z> /\ <var:B2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:B0> = <nat:6> /\ <var:Y> = <nat:9> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:B1> = <nat:7> * <var:Z> /\ <var:B0> = <nat:6> /\ <var:Y> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:B0> = <nat:6> /\ <var:Y> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:7> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Z> /\ <var:Y> = <nat:9> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:7> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 