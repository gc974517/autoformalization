\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O> := <nat:1> ; <var:O> := <nat:4> + <var:O> * <var:M> ; <var:O> := <nat:1> + <var:O> * <var:M> ; <var:O> := <nat:3> + <var:O> * <var:M> ; <var:O> := <var:O> * <var:M> ; <var:O> := <var:O> * <var:M> ; <var:O> := <nat:3> + <var:O> * <var:M> ; <var:O> := <nat:1> + <var:O> * <var:M> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Assuming --- assuming some positive numbers $ <var:R> $ --- that $ <var:M> = <var:R> $ before the evaluation of our code it must be that we have $ <var:O> = <nat:1> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> + <nat:1> $ after program finishes . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions is accomplished by standard Hoare reasoning . Stepping through , we have \verb | { <var:M> = <var:R> } <var:O> := <nat:1> { <var:M> = <var:R> \land <var:O> = <nat:1> } | , \verb | { <var:M> = <var:R> \land <var:O> = <nat:1> } <var:O> := <nat:4> + <var:O> * <var:M> { <var:M> = <var:R> \land <var:O> = <nat:1> \times <var:R> + <nat:4> } | , \verb | { <var:M> = <var:R> \land <var:O> = <nat:1> \times <var:R> + <nat:4> } <var:O> := <nat:1> + <var:O> * <var:M> { <var:M> = <var:R> \land <var:O> = <nat:1> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:1> } | and \verb | { <var:M> = <var:R> \land <var:O> = <nat:1> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:1> } <var:O> := <nat:3> + <var:O> * <var:M> { <var:M> = <var:R> \land <var:O> = <nat:1> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> } | . Next , we see \verb | { <var:M> = <var:R> } <var:O> := <nat:1> { <var:M> = <var:R> \land <var:O> = <nat:1> } | , \verb | { <var:M> = <var:R> \land <var:O> = <nat:1> } <var:O> := <nat:4> + <var:O> * <var:M> { <var:M> = <var:R> \land <var:O> = <nat:1> \times <var:R> + <nat:4> } | , \verb | { <var:M> = <var:R> \land <var:O> = <nat:1> \times <var:R> + <nat:4> } <var:O> := <nat:1> + <var:O> * <var:M> { <var:M> = <var:R> \land <var:O> = <nat:1> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:1> } | and \verb | { <var:M> = <var:R> \land <var:O> = <nat:1> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:1> } <var:O> := <nat:3> + <var:O> * <var:M> { <var:M> = <var:R> \land <var:O> = <nat:1> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:1> \times <var:R> + <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:1> ; <var:O> := <nat:4> + <var:O> * <var:M> ; <var:O> := <nat:1> + <var:O> * <var:M> ; <var:O> := <nat:3> + <var:O> * <var:M> ; <var:O> := <var:O> * <var:M> ; <var:O> := <var:O> * <var:M> ; <var:O> := <nat:3> + <var:O> * <var:M> ; <var:O> := <nat:1> + <var:O> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:M> = <var:R> }} <def:poly> {{ <var:O> = <nat:1> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:O> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:O> = <nat:1> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:O> = <nat:1> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:O> = <nat:1> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:O> = <nat:1> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:O> = <nat:1> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:O> = <nat:1> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:R> /\ <var:O> = <nat:1> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:3> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 