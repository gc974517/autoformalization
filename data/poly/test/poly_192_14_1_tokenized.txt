\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u1> := <var:l> ; <var:u2> := <var:u1> * <var:l> ; <var:u3> := <var:u2> * <var:l> ; <var:u4> := <var:u3> * <var:l> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:1> ; <var:u2> := <var:u2> * <nat:4> ; <var:u3> := <var:u3> * <nat:3> ; <var:u4> := <var:u4> * <nat:3> ; <var:M> := <var:u4> <var:M> := <var:M> + <var:u3> <var:M> := <var:M> + <var:u2> <var:M> := <var:M> + <var:u1> <var:M> := <var:M> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:l> = <var:d> $ ( for some $ <var:d> \in \mathbb{Z}^+ $ ) before interpreting the program , it holds that we have $ <var:M> = <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our series of commands can be accomplished through Hoare reasoning . Next , \begin{eqnarray} \{ <var:l> = <var:d> \} \, <var:u1> := <var:l> \, \{ <var:l> = <var:d> \land <var:u1> = <var:d> \} \\ \{ <var:l> = <var:d> \land <var:u1> = <var:d> \} \, <var:u2> := <var:u1> * <var:l> \, \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \} \\ \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \} \, <var:u3> := <var:u2> * <var:l> \, \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \} \\ \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \} \, <var:u4> := <var:u3> * <var:l> \, \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \land <var:u4> = <var:d> ^ <nat:4> \} \\ \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \land <var:u4> = <var:d> ^ <nat:4> \} \, <var:u0> := <nat:1> \, \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \land <var:u4> = <var:d> ^ <nat:4> \land <var:u0> = <nat:1> \} \\ \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \land <var:u4> = <var:d> ^ <nat:4> \land <var:u0> = <nat:1> \} \, <var:u1> := <var:u1> * <nat:1> \, \{ <var:l> = <var:d> \land <var:u1> = <nat:1> * <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \land <var:u4> = <var:d> ^ <nat:4> \land <var:u0> = <nat:1> \} \end{eqnarray} This is ensured by the environment update law given in usual Hoare reasoning . Immediately after , we have \begin{eqnarray} \{ <var:l> = <var:d> \} \, <var:u1> := <var:l> \, \{ <var:l> = <var:d> \land <var:u1> = <var:d> \} \\ \{ <var:l> = <var:d> \land <var:u1> = <var:d> \} \, <var:u2> := <var:u1> * <var:l> \, \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \} \\ \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \} \, <var:u3> := <var:u2> * <var:l> \, \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \} \\ \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \} \, <var:u4> := <var:u3> * <var:l> \, \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \land <var:u4> = <var:d> ^ <nat:4> \} \\ \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \land <var:u4> = <var:d> ^ <nat:4> \} \, <var:u0> := <nat:1> \, \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \land <var:u4> = <var:d> ^ <nat:4> \land <var:u0> = <nat:1> \} \\ \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \land <var:u4> = <var:d> ^ <nat:4> \land <var:u0> = <nat:1> \} \, <var:u1> := <var:u1> * <nat:1> \, \{ <var:l> = <var:d> \land <var:u1> = <nat:1> * <var:d> \land <var:u2> = <var:d> ^ <nat:2> \land <var:u3> = <var:d> ^ <nat:3> \land <var:u4> = <var:d> ^ <nat:4> \land <var:u0> = <nat:1> \} \end{eqnarray} This is rigorously given through the variable binding rule defined in Hoare logic . Advancing , we have \begin{eqnarray} \{ <var:l> = <var:d> \} \, <var:u1> := <var:l> \, \{ <var:l> = <var:d> \land <var:u1> = <var:d> \} \\ \{ <var:l> = <var:d> \land <var:u1> = <var:d> \} \, <var:u2> := <var:u1> * <var:l> \, \{ <var:l> = <var:d> \land <var:u1> = <var:d> \land <var:u2> = <var:d> ^ <nat:2> \} \end{eqnarray} This is deduced by the environment update law given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Definition <var:u4> : string := " <var:u4> " . Definition <def:poly> := <var:u1> := <var:l> ; <var:u2> := <var:u1> * <var:l> ; <var:u3> := <var:u2> * <var:l> ; <var:u4> := <var:u3> * <var:l> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:1> ; <var:u2> := <var:u2> * <nat:4> ; <var:u3> := <var:u3> * <nat:3> ; <var:u4> := <var:u4> * <nat:3> ; <var:M> := <var:u4> <var:M> := <var:M> + <var:u3> <var:M> := <var:M> + <var:u2> <var:M> := <var:M> + <var:u1> <var:M> := <var:M> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:l> = <var:d> }} <def:poly> {{ <var:M> = <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u1> = <var:d> /\ <var:u2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u1> = <var:d> /\ <var:u2> = <var:d> ^ <nat:2> /\ <var:u3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u1> = <var:d> /\ <var:u2> = <var:d> ^ <nat:2> /\ <var:u3> = <var:d> ^ <nat:3> /\ <var:u4> = <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u1> = <var:d> /\ <var:u2> = <var:d> ^ <nat:2> /\ <var:u3> = <var:d> ^ <nat:3> /\ <var:u4> = <var:d> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u1> = <nat:1> * <var:d> /\ <var:u2> = <var:d> ^ <nat:2> /\ <var:u3> = <var:d> ^ <nat:3> /\ <var:u4> = <var:d> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u1> = <nat:1> * <var:d> /\ <var:u2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:u3> = <var:d> ^ <nat:3> /\ <var:u4> = <var:d> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u1> = <nat:1> * <var:d> /\ <var:u2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:u3> = <nat:3> * <var:d> ^ <nat:3> /\ <var:u4> = <var:d> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u1> = <nat:1> * <var:d> /\ <var:u2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:u3> = <nat:3> * <var:d> ^ <nat:3> /\ <var:u4> = <nat:3> * <var:d> ^ <nat:4> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u1> = <nat:1> * <var:d> /\ <var:u2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:u3> = <nat:3> * <var:d> ^ <nat:3> /\ <var:u0> = <nat:1> /\ <var:M> = <nat:3> * <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u1> = <nat:1> * <var:d> /\ <var:u2> = <nat:4> * <var:d> ^ <nat:2> /\ <var:u0> = <nat:1> /\ <var:M> = <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u1> = <nat:1> * <var:d> /\ <var:u0> = <nat:1> /\ <var:M> = <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u0> = <nat:1> /\ <var:M> = <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M> = <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 