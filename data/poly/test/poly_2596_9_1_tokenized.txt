\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i1> := <var:R> ; <var:i2> := <var:i1> * <var:R> ; <var:i3> := <var:i2> * <var:R> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:4> ; <var:i3> := <var:i3> * <nat:2> ; <var:F> := <var:i3> <var:F> := <var:F> + <var:i1> <var:F> := <var:F> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:R> = <var:M> $ prior to running this segment of code , then $ <var:F> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the code can be accomplished with typical Hoare logic . Observing the proceeding lines contained in our series of commands , \begin{eqnarray} \{ <var:R> = <var:M> \} \, <var:i1> := <var:R> \, \{ <var:R> = <var:M> \land <var:i1> = <var:M> \} \\ \{ <var:R> = <var:M> \land <var:i1> = <var:M> \} \, <var:i2> := <var:i1> * <var:R> \, \{ <var:R> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <var:M> ^ <nat:2> \} \\ \{ <var:R> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <var:M> ^ <nat:2> \} \, <var:i3> := <var:i2> * <var:R> \, \{ <var:R> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <var:M> ^ <nat:2> \land <var:i3> = <var:M> ^ <nat:3> \} \\ \{ <var:R> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <var:M> ^ <nat:2> \land <var:i3> = <var:M> ^ <nat:3> \} \, <var:i0> := <nat:3> \, \{ <var:R> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <var:M> ^ <nat:2> \land <var:i3> = <var:M> ^ <nat:3> \land <var:i0> = <nat:3> \} \\ \{ <var:R> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <var:M> ^ <nat:2> \land <var:i3> = <var:M> ^ <nat:3> \land <var:i0> = <nat:3> \} \, <var:i1> := <var:i1> * <nat:4> \, \{ <var:R> = <var:M> \land <var:i1> = <nat:4> \times <var:M> \land <var:i2> = <var:M> ^ <nat:2> \land <var:i3> = <var:M> ^ <nat:3> \land <var:i0> = <nat:3> \} \end{eqnarray} This is sound using the variable binding inference rule of typical Hoare logic . Taking another step toward the upcoming statements contained in our program , \begin{eqnarray} \{ <var:R> = <var:M> \} \, <var:i1> := <var:R> \, \{ <var:R> = <var:M> \land <var:i1> = <var:M> \} \\ \{ <var:R> = <var:M> \land <var:i1> = <var:M> \} \, <var:i2> := <var:i1> * <var:R> \, \{ <var:R> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <var:M> ^ <nat:2> \} \\ \{ <var:R> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <var:M> ^ <nat:2> \} \, <var:i3> := <var:i2> * <var:R> \, \{ <var:R> = <var:M> \land <var:i1> = <var:M> \land <var:i2> = <var:M> ^ <nat:2> \land <var:i3> = <var:M> ^ <nat:3> \} \end{eqnarray} This is shown with the rule given in usual Hoare techniques . Taking another step toward the following step in our list of commands , \begin{eqnarray} \{ <var:R> = <var:M> \} \, <var:i1> := <var:R> \, \{ <var:R> = <var:M> \land <var:i1> = <var:M> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <def:poly> := <var:i1> := <var:R> ; <var:i2> := <var:i1> * <var:R> ; <var:i3> := <var:i2> * <var:R> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:4> ; <var:i3> := <var:i3> * <nat:2> ; <var:F> := <var:i3> <var:F> := <var:F> + <var:i1> <var:F> := <var:F> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:R> = <var:M> }} <def:poly> {{ <var:F> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:i1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:i1> = <var:M> /\ <var:i2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:i1> = <var:M> /\ <var:i2> = <var:M> ^ <nat:2> /\ <var:i3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:i1> = <var:M> /\ <var:i2> = <var:M> ^ <nat:2> /\ <var:i3> = <var:M> ^ <nat:3> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:i1> = <nat:4> * <var:M> /\ <var:i2> = <var:M> ^ <nat:2> /\ <var:i3> = <var:M> ^ <nat:3> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:i1> = <nat:4> * <var:M> /\ <var:i2> = <var:M> ^ <nat:2> /\ <var:i3> = <nat:2> * <var:M> ^ <nat:3> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:i1> = <nat:4> * <var:M> /\ <var:i2> = <var:M> ^ <nat:2> /\ <var:i0> = <nat:3> /\ <var:F> = <nat:2> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:i0> = <nat:3> /\ <var:F> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:M> /\ <var:F> = <nat:2> * <var:M> ^ <nat:3> + <nat:4> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 