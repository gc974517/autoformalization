\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:m> := <nat:4> ; <var:m> := <nat:3> + <var:m> * <var:f> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> . Allow that we have $ <var:f> = <var:z> $ before interpreting our program then $ <var:m> = <nat:4> \cdot <var:z> + <nat:3> $ . \end{theorem} \begin{proof} Observe the following decorated set of instructions . \begin{eqnarray} \{ <var:f> = <var:z> \} \\ <var:m> := <nat:4> ; \\ \{ <var:f> = <var:z> \land <var:m> = <nat:4> \} \\ <var:m> := <nat:3> + <var:m> * <var:f> \\ \{ <var:f> = <var:z> \land <var:m> = <nat:4> \cdot <var:z> + <nat:3> \} \end{eqnarray} Using Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:m> := <nat:4> ; <var:m> := <nat:3> + <var:m> * <var:f> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:f> = <var:z> }} <def:poly> {{ <var:m> = <nat:4> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:m> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:m> = <nat:4> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 