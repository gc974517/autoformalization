\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:2> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:P> ; <var:e> := <var:y1> ; <var:e> := <var:e> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Allow it to be that $ <var:P> = <var:z> $ ( for every positive numbers $ <var:z> $ ) before the execution of the series of instructions , it must be that we see $ <var:e> = <nat:4> * <var:z> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this code can be demonstrated through Hoare reasoning . Now , \begin{verbatim} { <var:P> = <var:z> } <var:y0> := <nat:2> { <var:P> = <var:z> \land <var:y0> = <nat:2> } { <var:P> = <var:z> \land <var:y0> = <nat:2> } <var:y1> := <nat:4> { <var:P> = <var:z> \land <var:y0> = <nat:2> \land <var:y1> = <nat:4> } { <var:P> = <var:z> \land <var:y0> = <nat:2> \land <var:y1> = <nat:4> } <var:y1> := <var:y1> * <var:P> { <var:P> = <var:z> \land <var:y0> = <nat:2> \land <var:y1> = <nat:4> * <var:z> } \end{verbatim} Considering the following commands found in the set of commands , we have \begin{verbatim} { <var:P> = <var:z> } <var:y0> := <nat:2> { <var:P> = <var:z> \land <var:y0> = <nat:2> } { <var:P> = <var:z> \land <var:y0> = <nat:2> } <var:y1> := <nat:4> { <var:P> = <var:z> \land <var:y0> = <nat:2> \land <var:y1> = <nat:4> } \end{verbatim} This is ensured through the variable assignmet rule given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:2> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:P> ; <var:e> := <var:y1> ; <var:e> := <var:e> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:P> = <var:z> }} <def:poly> {{ <var:e> = <nat:4> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:y0> = <nat:2> /\ <var:y1> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:y0> = <nat:2> /\ <var:e> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:e> = <nat:4> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 