\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} : \begin{verbatim} <var:a> := <nat:4> ; <var:a> := <nat:2> + <var:a> * <var:x> ; <var:a> := <nat:3> + <var:a> * <var:x> ; <var:a> := <nat:2> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <nat:2> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <nat:3> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> \end{verbatim} Given that we have $ <var:x> = <var:c> $ prior to running this list of instructions it follows that we have $ <var:a> = <nat:4> \times <var:c> ^ <nat:11> + <nat:2> \times <var:c> ^ <nat:10> + <nat:3> \times <var:c> ^ <nat:9> + <nat:2> \times <var:c> ^ <nat:8> + <nat:4> \times <var:c> ^ <nat:7> + <nat:2> \times <var:c> ^ <nat:5> + <nat:1> \times <var:c> ^ <nat:4> + <nat:3> \times <var:c> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for this code segment is clear by usual Hoare techniques . Next , we see the variable binding code giving $ <nat:4> $ to $ <var:a>$ . This command takes the condition $ \{ <var:x> = <var:c> \} $ into $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \} $ . This is shown with the assignment rule defined in standard Hoare techniques . Further , the variable assignmet command \verb | <var:a> := <nat:2> + <var:a> * <var:x> ; | . This advances $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \} $ into the condition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> + <nat:2> \} $ . Moving forward to the subsequent step contained in our code , the variable binding line yielding $ <nat:3> + <var:a> * <var:x> $ as $ <var:a>$ . This line takes the precondition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> + <nat:2> \} $ as $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + <nat:3> \} $ . Shifting focus toward the following line of code contained in the list of instructions , the assignment code letting $ <nat:2> + <var:a> * <var:x> $ as $ <var:a>$ . This command transfers $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + <nat:3> \} $ into the postcondition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:2> \} $ . Taking another step toward the subsequent piece of code seen in the series of commands , the assignment code \verb | <var:a> := <nat:4> + <var:a> * <var:x> ; | . This moves the precondition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:3> \cdot <var:c> + <nat:2> \} $ to the postcondition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + <nat:4> \} $ . Taking a look at the subsequent statement found in the list of instructions , we see the binding statement letting $ <var:a> * <var:x> $ to $ <var:a>$ . This redefines the precondition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:3> + <nat:3> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + <nat:4> \} $ as the condition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + \} $ . Advancing to the upcoming line in the code segment , we have the binding command defining $ <nat:2> + <var:a> * <var:x> $ into $ <var:a>$ . This code takes the condition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:4> \cdot <var:c> + \} $ toward $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:2> \} $ . Advancing to the proceeding step contained in the list of commands , we have the variable binding statement defining $ <nat:1> + <var:a> * <var:x> $ into $ <var:a>$ . This command redefines the precondition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:5> + <nat:3> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:3> + <nat:4> \cdot <var:c> ^ <nat:2> + <nat:2> \} $ to the postcondition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:7> + <nat:2> \cdot <var:c> ^ <nat:6> + <nat:3> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> + <nat:1> \} $ . Moving forward to the next step , we have the environment update code \verb | <var:a> := <var:a> * <var:x> ; | . This advances the precondition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:7> + <nat:2> \cdot <var:c> ^ <nat:6> + <nat:3> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> ^ <nat:4> + <nat:4> \cdot <var:c> ^ <nat:3> + <nat:2> \cdot <var:c> + <nat:1> \} $ to the postcondition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:8> + <nat:2> \cdot <var:c> ^ <nat:7> + <nat:3> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:5> + <nat:4> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:1> \cdot <var:c> + \} $ . This is sound using the assignment law obtained from typical Hoare logic . Taking another step toward the following line in our code segment , we see the variable update code assigning $ <var:a> * <var:x> $ to $ <var:a>$ . This transfers the condition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:8> + <nat:2> \cdot <var:c> ^ <nat:7> + <nat:3> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:5> + <nat:4> \cdot <var:c> ^ <nat:4> + <nat:2> \cdot <var:c> ^ <nat:2> + <nat:1> \cdot <var:c> + \} $ toward the condition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:9> + <nat:2> \cdot <var:c> ^ <nat:8> + <nat:3> \cdot <var:c> ^ <nat:7> + <nat:2> \cdot <var:c> ^ <nat:6> + <nat:4> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> ^ <nat:3> + <nat:1> \cdot <var:c> ^ <nat:2> + \} $ . This is shown to be logically sound using the assignment inference rule found in standard Hoare techniques . Stepping forward , we see the variable update code defining $ <nat:3> + <var:a> * <var:x> $ to $ <var:a>$ . This statement advances the precondition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:9> + <nat:2> \cdot <var:c> ^ <nat:8> + <nat:3> \cdot <var:c> ^ <nat:7> + <nat:2> \cdot <var:c> ^ <nat:6> + <nat:4> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> ^ <nat:3> + <nat:1> \cdot <var:c> ^ <nat:2> + \} $ toward the postcondition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:10> + <nat:2> \cdot <var:c> ^ <nat:9> + <nat:3> \cdot <var:c> ^ <nat:8> + <nat:2> \cdot <var:c> ^ <nat:7> + <nat:4> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:4> + <nat:1> \cdot <var:c> ^ <nat:3> + <nat:3> \} $ . Advancing , the assignment code \verb | <var:a> := <nat:4> + <var:a> * <var:x> | . This statement advances the condition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:10> + <nat:2> \cdot <var:c> ^ <nat:9> + <nat:3> \cdot <var:c> ^ <nat:8> + <nat:2> \cdot <var:c> ^ <nat:7> + <nat:4> \cdot <var:c> ^ <nat:6> + <nat:2> \cdot <var:c> ^ <nat:4> + <nat:1> \cdot <var:c> ^ <nat:3> + <nat:3> \} $ toward the postcondition $ \{ <var:x> = <var:c> \land <var:a> = <nat:4> \cdot <var:c> ^ <nat:11> + <nat:2> \cdot <var:c> ^ <nat:10> + <nat:3> \cdot <var:c> ^ <nat:9> + <nat:2> \cdot <var:c> ^ <nat:8> + <nat:4> \cdot <var:c> ^ <nat:7> + <nat:2> \cdot <var:c> ^ <nat:5> + <nat:1> \cdot <var:c> ^ <nat:4> + <nat:3> \cdot <var:c> + <nat:4> \} $ . This is rigorously given through the assignment scheme given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:x> = <var:c> }} <var:a> := <nat:4> ; <var:a> := <nat:2> + <var:a> * <var:x> ; <var:a> := <nat:3> + <var:a> * <var:x> ; <var:a> := <nat:2> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <nat:2> + <var:a> * <var:x> ; <var:a> := <nat:1> + <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <var:a> * <var:x> ; <var:a> := <nat:3> + <var:a> * <var:x> ; <var:a> := <nat:4> + <var:a> * <var:x> {{ <var:a> = <nat:4> * <var:c> ^ <nat:11> + <nat:2> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:3> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:a> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:a> = <nat:4> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:a> = <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:a> = <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:3> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:a> = <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:3> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:a> = <nat:4> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:3> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:a> = <nat:4> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:3> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:a> = <nat:4> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:3> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:2> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:a> = <nat:4> * <var:c> ^ <nat:8> + <nat:2> * <var:c> ^ <nat:7> + <nat:3> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:a> = <nat:4> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:3> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:4> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:a> = <nat:4> * <var:c> ^ <nat:10> + <nat:2> * <var:c> ^ <nat:9> + <nat:3> * <var:c> ^ <nat:8> + <nat:2> * <var:c> ^ <nat:7> + <nat:4> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:a> = <nat:4> * <var:c> ^ <nat:11> + <nat:2> * <var:c> ^ <nat:10> + <nat:3> * <var:c> ^ <nat:9> + <nat:2> * <var:c> ^ <nat:8> + <nat:4> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:3> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 