\begin{document} \begin{theorem} Define a code segment : \begin{verbatim} <var:p> := <nat:4> ; <var:p> := <nat:2> + <var:p> * <var:J> ; <var:p> := <nat:4> + <var:p> * <var:J> ; <var:p> := <nat:1> + <var:p> * <var:J> \end{verbatim} Allowing $ <var:J> = <var:D> $ prior to the execution of the list of commands it must be that we see $ <var:p> = <nat:4> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:J> = <var:D> \} \\ <var:p> := <nat:4> ; \\ \{ <var:J> = <var:D> \land <var:p> = <nat:4> \} \\ <var:p> := <nat:2> + <var:p> * <var:J> ; \\ \{ <var:J> = <var:D> \land <var:p> = <nat:4> \cdot <var:D> + <nat:2> \} \\ <var:p> := <nat:4> + <var:p> * <var:J> ; \\ \{ <var:J> = <var:D> \land <var:p> = <nat:4> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:4> \} \\ <var:p> := <nat:1> + <var:p> * <var:J> \\ \{ <var:J> = <var:D> \land <var:p> = <nat:4> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:1> \} \end{eqnarray} Using usual Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:J> = <var:D> }} <var:p> := <nat:4> ; <var:p> := <nat:2> + <var:p> * <var:J> ; <var:p> := <nat:4> + <var:p> * <var:J> ; <var:p> := <nat:1> + <var:p> * <var:J> {{ <var:p> = <nat:4> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:p> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:p> = <nat:4> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:p> = <nat:4> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:p> = <nat:4> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 