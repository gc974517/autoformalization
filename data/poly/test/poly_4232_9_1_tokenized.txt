\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} such that \begin{verbatim} <var:C1> := <var:h> ; <var:C2> := <var:C1> * <var:h> ; <var:C3> := <var:C2> * <var:h> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:4> ; <var:C3> := <var:C3> * <nat:4> ; <var:j> := <var:C3> <var:j> := <var:j> + <var:C1> <var:j> := <var:j> + <var:C0> \end{verbatim} Allowing $ <var:h> = <var:e> $ taking $ <var:e> \in \mathbb{Z}^+ $ before running the segment of code it follows that we see $ <var:j> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> + <nat:3> $ once set of instructions finishes . \end{theorem} \begin{proof} The course of logic for our list of commands is shown through usual Hoare logic . Honing in on the next step in the list of commands , we see the assignment code \verb | <var:C1> := <var:h> ; | . This line transfers $ \{ <var:h> = <var:e> \} $ as the condition $ \{ <var:h> = <var:e> \land <var:C1> = <var:e> \} $ . This is shown to be logically sound by the assignment scheme of Hoare techniques . Observing the upcoming line in the list of instructions , we have the environment update code giving $ <var:C1> * <var:h> $ to $ <var:C2>$ . This code advances the condition $ \{ <var:h> = <var:e> \land <var:C1> = <var:e> \} $ into $ \{ <var:h> = <var:e> \land <var:C1> = <var:e> \land <var:C2> = <var:e> ^ <nat:2> \} $ . Considering the following step in the set of instructions , we have the variable assignmet line assigning $ <var:C2> * <var:h> $ toward $ <var:C3>$ . This line transfers the precondition $ \{ <var:h> = <var:e> \land <var:C1> = <var:e> \land <var:C2> = <var:e> ^ <nat:2> \} $ to the condition $ \{ <var:h> = <var:e> \land <var:C1> = <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C3> = <var:e> ^ <nat:3> \} $ . Paying attention to the proceeding line found in our segment of code , we have the variable assignmet line \verb | <var:C0> := <nat:3> ; | . This statement redefines $ \{ <var:h> = <var:e> \land <var:C1> = <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C3> = <var:e> ^ <nat:3> \} $ as $ \{ <var:h> = <var:e> \land <var:C1> = <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C3> = <var:e> ^ <nat:3> \land <var:C0> = <nat:3> \} $ . This is shown through the assignment scheme found in Hoare reasoning . Advancing , we have the variable binding code defining $ <var:C1> * <nat:4> $ into $ <var:C1>$ . This moves the precondition $ \{ <var:h> = <var:e> \land <var:C1> = <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C3> = <var:e> ^ <nat:3> \land <var:C0> = <nat:3> \} $ to the condition $ \{ <var:h> = <var:e> \land <var:C1> = <nat:4> * <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C3> = <var:e> ^ <nat:3> \land <var:C0> = <nat:3> \} $ . Stepping forward , we have the variable assignmet line yielding $ <var:C3> * <nat:4> $ into $ <var:C3>$ . This line advances $ \{ <var:h> = <var:e> \land <var:C1> = <nat:4> * <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C3> = <var:e> ^ <nat:3> \land <var:C0> = <nat:3> \} $ toward the postcondition $ \{ <var:h> = <var:e> \land <var:C1> = <nat:4> * <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C3> = <nat:4> * <var:e> ^ <nat:3> \land <var:C0> = <nat:3> \} $ . This is ensured with the assignment rule defined in typical Hoare logic . Next , we see the variable binding code letting $ <var:C3$ toward $ <var:j>$ . This line redefines the condition $ \{ <var:h> = <var:e> \land <var:C1> = <nat:4> * <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C3> = <nat:4> * <var:e> ^ <nat:3> \land <var:C0> = <nat:3> \} $ toward the condition $ \{ <var:h> = <var:e> \land <var:C1> = <nat:4> * <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C0> = <nat:3> \land <var:j> = <nat:4> * <var:e> ^ <nat:3> \} $ . Stepping through , we have the assignment code \verb | <var:j> := <var:j> + <var:C1> | . This code takes the precondition $ \{ <var:h> = <var:e> \land <var:C1> = <nat:4> * <var:e> \land <var:C2> = <var:e> ^ <nat:2> \land <var:C0> = <nat:3> \land <var:j> = <nat:4> * <var:e> ^ <nat:3> \} $ into the postcondition $ \{ <var:h> = <var:e> \land <var:C0> = <nat:3> \land <var:j> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> \} $ . This is known to be sound through the assignment inference rule obtained from standard Hoare reasoning . Jumping to the following line contained in our set of instructions , we see the variable assignmet code defining $ <var:j> + <var:C0$ toward $ <var:j>$ . This redefines $ \{ <var:h> = <var:e> \land <var:C0> = <nat:3> \land <var:j> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> \} $ toward the condition $ \{ <var:h> = <var:e> \land <var:j> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:h> = <var:e> }} <var:C1> := <var:h> ; <var:C2> := <var:C1> * <var:h> ; <var:C3> := <var:C2> * <var:h> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:4> ; <var:C3> := <var:C3> * <nat:4> ; <var:j> := <var:C3> <var:j> := <var:j> + <var:C1> <var:j> := <var:j> + <var:C0> {{ <var:j> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <var:e> /\ <var:C2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <var:e> /\ <var:C2> = <var:e> ^ <nat:2> /\ <var:C3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <var:e> /\ <var:C2> = <var:e> ^ <nat:2> /\ <var:C3> = <var:e> ^ <nat:3> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <nat:4> * <var:e> /\ <var:C2> = <var:e> ^ <nat:2> /\ <var:C3> = <var:e> ^ <nat:3> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <nat:4> * <var:e> /\ <var:C2> = <var:e> ^ <nat:2> /\ <var:C3> = <nat:4> * <var:e> ^ <nat:3> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C1> = <nat:4> * <var:e> /\ <var:C2> = <var:e> ^ <nat:2> /\ <var:C0> = <nat:3> /\ <var:j> = <nat:4> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:C0> = <nat:3> /\ <var:j> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:e> /\ <var:j> = <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 