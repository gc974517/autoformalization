\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:x1> := <var:H> ; <var:x2> := <var:x1> * <var:H> ; <var:x3> := <var:x2> * <var:H> ; <var:x0> := <nat:5> ; <var:x1> := <var:x1> * <nat:5> ; <var:x2> := <var:x2> * <nat:6> ; <var:x3> := <var:x3> * <nat:1> ; <var:l> := <var:x3> <var:l> := <var:l> + <var:x2> <var:l> := <var:l> + <var:x1> <var:l> := <var:l> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:H> = <var:h> $ ( letting $ <var:h> $ ) prior to the execution of our set of commands it holds that we have $ <var:l> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:6> \cdot <var:h> ^ <nat:2> + <nat:5> \cdot <var:h> + <nat:5> $ after list of commands is done executing . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives : \begin{eqnarray} \{ <var:H> = <var:h> \} \\ <var:x1> := <var:H> ; \\ \{ <var:H> = <var:h> \land <var:x1> = <var:h> \} \\ <var:x2> := <var:x1> * <var:H> ; \\ \{ <var:H> = <var:h> \land <var:x1> = <var:h> \land <var:x2> = <var:h> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:H> ; \\ \{ <var:H> = <var:h> \land <var:x1> = <var:h> \land <var:x2> = <var:h> ^ <nat:2> \land <var:x3> = <var:h> ^ <nat:3> \} \\ <var:x0> := <nat:5> ; \\ \{ <var:H> = <var:h> \land <var:x1> = <var:h> \land <var:x2> = <var:h> ^ <nat:2> \land <var:x3> = <var:h> ^ <nat:3> \land <var:x0> = <nat:5> \} \\ <var:x1> := <var:x1> * <nat:5> ; \\ \{ <var:H> = <var:h> \land <var:x1> = <nat:5> \times <var:h> \land <var:x2> = <var:h> ^ <nat:2> \land <var:x3> = <var:h> ^ <nat:3> \land <var:x0> = <nat:5> \} \\ <var:x2> := <var:x2> * <nat:6> ; \\ \{ <var:H> = <var:h> \land <var:x1> = <nat:5> \times <var:h> \land <var:x2> = <nat:6> \times <var:h> ^ <nat:2> \land <var:x3> = <var:h> ^ <nat:3> \land <var:x0> = <nat:5> \} \\ <var:x3> := <var:x3> * <nat:1> ; \\ \{ <var:H> = <var:h> \land <var:x1> = <nat:5> \times <var:h> \land <var:x2> = <nat:6> \times <var:h> ^ <nat:2> \land <var:x3> = <nat:1> \times <var:h> ^ <nat:3> \land <var:x0> = <nat:5> \} \\ <var:l> := <var:x3> \\ \{ <var:H> = <var:h> \land <var:x1> = <nat:5> \times <var:h> \land <var:x2> = <nat:6> \times <var:h> ^ <nat:2> \land <var:x0> = <nat:5> \land <var:l> = <nat:1> \times <var:h> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:x2> \\ \{ <var:H> = <var:h> \land <var:x1> = <nat:5> \times <var:h> \land <var:x0> = <nat:5> \land <var:l> = <nat:1> \times <var:h> ^ <nat:3> + <nat:6> \times <var:h> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:x1> \\ \{ <var:H> = <var:h> \land <var:x0> = <nat:5> \land <var:l> = <nat:1> \times <var:h> ^ <nat:3> + <nat:6> \times <var:h> ^ <nat:2> + <nat:5> \times <var:h> \} \\ <var:l> := <var:l> + <var:x0> \\ \{ <var:H> = <var:h> \land <var:l> = <nat:1> \times <var:h> ^ <nat:3> + <nat:6> \times <var:h> ^ <nat:2> + <nat:5> \times <var:h> + <nat:5> \} \end{eqnarray} Given the preceding argument , our segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x1> := <var:H> ; <var:x2> := <var:x1> * <var:H> ; <var:x3> := <var:x2> * <var:H> ; <var:x0> := <nat:5> ; <var:x1> := <var:x1> * <nat:5> ; <var:x2> := <var:x2> * <nat:6> ; <var:x3> := <var:x3> * <nat:1> ; <var:l> := <var:x3> <var:l> := <var:l> + <var:x2> <var:l> := <var:l> + <var:x1> <var:l> := <var:l> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:H> = <var:h> }} <def:poly> {{ <var:l> = <nat:1> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:h> /\ <var:x1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:h> /\ <var:x1> = <var:h> /\ <var:x2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:h> /\ <var:x1> = <var:h> /\ <var:x2> = <var:h> ^ <nat:2> /\ <var:x3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:h> /\ <var:x1> = <var:h> /\ <var:x2> = <var:h> ^ <nat:2> /\ <var:x3> = <var:h> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:h> /\ <var:x1> = <nat:5> * <var:h> /\ <var:x2> = <var:h> ^ <nat:2> /\ <var:x3> = <var:h> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:h> /\ <var:x1> = <nat:5> * <var:h> /\ <var:x2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:x3> = <var:h> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:h> /\ <var:x1> = <nat:5> * <var:h> /\ <var:x2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:x3> = <nat:1> * <var:h> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:h> /\ <var:x1> = <nat:5> * <var:h> /\ <var:x2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:x0> = <nat:5> /\ <var:l> = <nat:1> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:h> /\ <var:x1> = <nat:5> * <var:h> /\ <var:x0> = <nat:5> /\ <var:l> = <nat:1> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:h> /\ <var:x0> = <nat:5> /\ <var:l> = <nat:1> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:h> /\ <var:l> = <nat:1> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 