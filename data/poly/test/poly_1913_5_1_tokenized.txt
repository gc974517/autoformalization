\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} as \begin{verbatim} <var:S1> := <var:X> ; <var:S0> := <nat:4> ; <var:S1> := <var:S1> * <nat:3> ; <var:L> := <var:S1> <var:L> := <var:L> + <var:S0> \end{verbatim} Allow it to be that $ <var:X> = <var:I> $ prior to evaluating this list of commands then $ <var:L> = <nat:3> \times <var:I> + <nat:4> $ once code segment exits . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions can be seen through Hoare reasoning . Next , we have the environment update code assigning $ <var:X> $ into $ <var:S1>$ . This transfers the precondition $ \{ <var:X> = <var:I> \} $ to the condition $ \{ <var:X> = <var:I> \land <var:S1> = <var:I> \} $ . This is guaranteed by the assignment law found in Hoare reasoning . Following , we see the variable assignmet command binding $ <nat:4> $ toward $ <var:S0>$ . This line moves $ \{ <var:X> = <var:I> \land <var:S1> = <var:I> \} $ to the postcondition $ \{ <var:X> = <var:I> \land <var:S1> = <var:I> \land <var:S0> = <nat:4> \} $ . This is shown to be logically sound using the assignment rule obtained from typical Hoare reasoning . Advancing on , the variable update statement \verb | <var:S1> := <var:S1> * <nat:3> ; | . This code advances $ \{ <var:X> = <var:I> \land <var:S1> = <var:I> \land <var:S0> = <nat:4> \} $ into the condition $ \{ <var:X> = <var:I> \land <var:S1> = <nat:3> \cdot <var:I> \land <var:S0> = <nat:4> \} $ . Going to the next step , the variable binding line binding $ <var:S1$ as $ <var:L>$ . This takes the condition $ \{ <var:X> = <var:I> \land <var:S1> = <nat:3> \cdot <var:I> \land <var:S0> = <nat:4> \} $ to $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:L> = <nat:3> \cdot <var:I> \} $ . This is known to be sound through the assignment law in standard Hoare techniques . Moving forward to the next step , we see the assignment command \verb | <var:L> := <var:L> + <var:S0> | . This moves the condition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:L> = <nat:3> \cdot <var:I> \} $ to $ \{ <var:X> = <var:I> \land <var:L> = <nat:3> \cdot <var:I> + <nat:4> \} $ . This is shown through the assignment inference rule given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:X> = <var:I> }} <var:S1> := <var:X> ; <var:S0> := <nat:4> ; <var:S1> := <var:S1> * <nat:3> ; <var:L> := <var:S1> <var:L> := <var:L> + <var:S0> {{ <var:L> = <nat:3> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S1> = <var:I> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S1> = <nat:3> * <var:I> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> /\ <var:L> = <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:L> = <nat:3> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 