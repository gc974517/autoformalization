\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:e1> := <var:H> ; <var:e2> := <var:e1> * <var:H> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:3> ; <var:e2> := <var:e2> * <nat:8> ; <var:A> := <var:e2> <var:A> := <var:A> + <var:e1> <var:A> := <var:A> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Assuming --- for every integers $ <var:a> $ --- it to hold that $ <var:H> = <var:a> $ ahead of the execution of this code it must be that we see $ <var:A> = <nat:8> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:7> $ when list of commands has executed . \end{theorem} \begin{proof} Proving correctness for the segment of code is evident using standard Hoare reasoning . Observing the upcoming lines of codeseen in our code , we have \begin{verbatim} { <var:H> = <var:a> } <var:e1> := <var:H> { <var:H> = <var:a> \land <var:e1> = <var:a> } { <var:H> = <var:a> \land <var:e1> = <var:a> } <var:e2> := <var:e1> * <var:H> { <var:H> = <var:a> \land <var:e1> = <var:a> \land <var:e2> = <var:a> ^ <nat:2> } { <var:H> = <var:a> \land <var:e1> = <var:a> \land <var:e2> = <var:a> ^ <nat:2> } <var:e0> := <nat:7> { <var:H> = <var:a> \land <var:e1> = <var:a> \land <var:e2> = <var:a> ^ <nat:2> \land <var:e0> = <nat:7> } { <var:H> = <var:a> \land <var:e1> = <var:a> \land <var:e2> = <var:a> ^ <nat:2> \land <var:e0> = <nat:7> } <var:e1> := <var:e1> * <nat:3> { <var:H> = <var:a> \land <var:e1> = <nat:3> * <var:a> \land <var:e2> = <var:a> ^ <nat:2> \land <var:e0> = <nat:7> } { <var:H> = <var:a> \land <var:e1> = <nat:3> * <var:a> \land <var:e2> = <var:a> ^ <nat:2> \land <var:e0> = <nat:7> } <var:e2> := <var:e2> * <nat:8> { <var:H> = <var:a> \land <var:e1> = <nat:3> * <var:a> \land <var:e2> = <nat:8> * <var:a> ^ <nat:2> \land <var:e0> = <nat:7> } \end{verbatim} This is known to be sound through the variable update rule given by usual Hoare reasoning . Taking a look at the next pieces of code in our set of instructions , we have \begin{verbatim} { <var:H> = <var:a> } <var:e1> := <var:H> { <var:H> = <var:a> \land <var:e1> = <var:a> } { <var:H> = <var:a> \land <var:e1> = <var:a> } <var:e2> := <var:e1> * <var:H> { <var:H> = <var:a> \land <var:e1> = <var:a> \land <var:e2> = <var:a> ^ <nat:2> } { <var:H> = <var:a> \land <var:e1> = <var:a> \land <var:e2> = <var:a> ^ <nat:2> } <var:e0> := <nat:7> { <var:H> = <var:a> \land <var:e1> = <var:a> \land <var:e2> = <var:a> ^ <nat:2> \land <var:e0> = <nat:7> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e1> := <var:H> ; <var:e2> := <var:e1> * <var:H> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:3> ; <var:e2> := <var:e2> * <nat:8> ; <var:A> := <var:e2> <var:A> := <var:A> + <var:e1> <var:A> := <var:A> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:H> = <var:a> }} <def:poly> {{ <var:A> = <nat:8> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:e1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:e1> = <var:a> /\ <var:e2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:e1> = <var:a> /\ <var:e2> = <var:a> ^ <nat:2> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:e1> = <nat:3> * <var:a> /\ <var:e2> = <var:a> ^ <nat:2> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:e1> = <nat:3> * <var:a> /\ <var:e2> = <nat:8> * <var:a> ^ <nat:2> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:e1> = <nat:3> * <var:a> /\ <var:e0> = <nat:7> /\ <var:A> = <nat:8> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:e0> = <nat:7> /\ <var:A> = <nat:8> * <var:a> ^ <nat:2> + <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:a> /\ <var:A> = <nat:8> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 