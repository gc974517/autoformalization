\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:3> ; <var:T1> := <nat:7> ; <var:T1> := <var:T1> * <var:h> ; <var:T2> := <nat:7> ; <var:T2> := <var:T2> * <var:h> ; <var:T2> := <var:T2> * <var:h> ; <var:j> := <var:T2> ; <var:j> := <var:j> + <var:T1> ; <var:j> := <var:j> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Assume --- given all natural coefficients $ <var:B> $ --- $ <var:h> = <var:B> $ prior to the evaluation of this series of commands it must be that $ <var:j> = <nat:7> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of instructions can be given by Hoare reasoning . Taking another step toward the upcoming bit of code seen in our code , we have the assignment command \verb | <var:T0> := <nat:3> ; | . This transfers $ \{ <var:h> = <var:B> \} $ into $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \} $ . This is known to be sound with the assignment law defined by Hoare techniques . Paying attention to the following step found in our series of instructions , we have the binding line \verb | <var:T1> := <nat:7> ; | . This code takes $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \} $ into $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:T1> = <nat:7> \} $ . Looking at the subsequent piece of code found in the series of commands , we see the assignment statement \verb | <var:T1> := <var:T1> * <var:h> ; | . This line transfers the condition $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:T1> = <nat:7> \} $ into $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:T1> = <nat:7> * <var:B> \} $ . This is ensured with the assignment rule found in standard Hoare techniques . Paying attention to the next line in the list of commands , we have the binding line assigning $ <nat:7> $ into $ <var:T2>$ . This line transfers the condition $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:T1> = <nat:7> * <var:B> \} $ toward the condition $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:T1> = <nat:7> * <var:B> \land <var:T2> = <nat:7> \} $ . Advancing on , we see the variable binding line binding $ <var:T2> * <var:h> $ toward $ <var:T2>$ . This line takes the condition $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:T1> = <nat:7> * <var:B> \land <var:T2> = <nat:7> \} $ into $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:T1> = <nat:7> * <var:B> \land <var:T2> = <nat:7> * <var:B> \} $ . Paying attention to the upcoming line found in our code segment , we have the variable binding line binding $ <var:T2> * <var:h> $ as $ <var:T2>$ . This code advances $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:T1> = <nat:7> * <var:B> \land <var:T2> = <nat:7> * <var:B> \} $ into the postcondition $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:T1> = <nat:7> * <var:B> \land <var:T2> = <nat:7> * <var:B> ^ <nat:2> \} $ . Looking at the subsequent line of code found in the code segment , we see the variable update line \verb | <var:j> := <var:T2> ; | . This moves $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:T1> = <nat:7> * <var:B> \land <var:T2> = <nat:7> * <var:B> ^ <nat:2> \} $ to the condition $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:T1> = <nat:7> * <var:B> \land <var:j> = <nat:7> * <var:B> ^ <nat:2> \} $ . This is known to be sound by the assignment law from standard Hoare logic . Moving forward , the environment update code letting $ <var:j> + <var:T1> $ as $ <var:j>$ . This statement takes the precondition $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:T1> = <nat:7> * <var:B> \land <var:j> = <nat:7> * <var:B> ^ <nat:2> \} $ toward the postcondition $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:j> = <nat:7> * <var:B> ^ <nat:2> + <nat:7> * <var:B> \} $ . This is sound by the assignment inference rule given by standard Hoare techniques . Now , we see the variable assignmet code \verb | <var:j> := <var:j> + <var:T0> | . This code redefines the condition $ \{ <var:h> = <var:B> \land <var:T0> = <nat:3> \land <var:j> = <nat:7> * <var:B> ^ <nat:2> + <nat:7> * <var:B> \} $ to the postcondition $ \{ <var:h> = <var:B> \land <var:j> = <nat:7> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T0> := <nat:3> ; <var:T1> := <nat:7> ; <var:T1> := <var:T1> * <var:h> ; <var:T2> := <nat:7> ; <var:T2> := <var:T2> * <var:h> ; <var:T2> := <var:T2> * <var:h> ; <var:j> := <var:T2> ; <var:j> := <var:j> + <var:T1> ; <var:j> := <var:j> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:h> = <var:B> }} <def:poly> {{ <var:j> = <nat:7> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:T0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:T0> = <nat:3> /\ <var:T1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:T0> = <nat:3> /\ <var:T1> = <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:T0> = <nat:3> /\ <var:T1> = <nat:7> * <var:B> /\ <var:T2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:T0> = <nat:3> /\ <var:T1> = <nat:7> * <var:B> /\ <var:T2> = <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:T0> = <nat:3> /\ <var:T1> = <nat:7> * <var:B> /\ <var:T2> = <nat:7> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:T0> = <nat:3> /\ <var:T1> = <nat:7> * <var:B> /\ <var:j> = <nat:7> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:T0> = <nat:3> /\ <var:j> = <nat:7> * <var:B> ^ <nat:2> + <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:B> /\ <var:j> = <nat:7> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 