\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:4> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:X> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:X> ; <var:c2> := <var:c2> * <var:X> ; <var:c3> := <nat:3> ; <var:c3> := <var:c3> * <var:X> ; <var:c3> := <var:c3> * <var:X> ; <var:c3> := <var:c3> * <var:X> ; <var:o> := <var:c3> ; <var:o> := <var:o> + <var:c2> ; <var:o> := <var:o> + <var:c1> ; <var:o> := <var:o> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:X> = <var:r> $ ahead of executing our list of commands then $ <var:o> = <nat:3> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:4> $ . \end{theorem} \begin{proof} The proof of the segment of code is evident with Hoare reasoning . Moving on to the next step , we have the variable binding code yielding $ <nat:4> $ toward $ <var:c0>$ . This line advances the condition $ \{ <var:X> = <var:r> \} $ into $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \} $ . This is given using the assignment rule in Hoare logic . Focusing on the proceeding bit of code contained in our program , the statement assigning $ <nat:1> $ to $ <var:c1>$ . This advances the precondition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \} $ as $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \} $ . This is rigorously given through the assignment law from usual Hoare logic . Going to the next step , we see the variable update statement giving $ <var:c1> * <var:X> $ toward $ <var:c1>$ . This transfers the condition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \} $ to the postcondition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \} $ . This is given using the assignment rule of typical Hoare reasoning . Moving on to the next step , the code \verb | <var:c2> := <nat:2> ; | . This advances the condition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \} $ toward the postcondition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \} $ . This is ensured with the assignment law from Hoare reasoning . Advancing to the proceeding piece of code in the segment of code , the variable update code giving $ <var:c2> * <var:X> $ to $ <var:c2>$ . This command forwards the condition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \} $ toward the condition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> \} $ . This is sound through the assignment law given by usual Hoare reasoning . Advancing to the next step , we see the binding command giving $ <var:c2> * <var:X> $ toward $ <var:c2>$ . This code redefines the condition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> \} $ into the condition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> ^ <nat:2> \} $ . This is given through the assignment scheme from typical Hoare reasoning . Focusing on the proceeding line of code found in the segment of code , we have the assignment line giving $ <nat:3> $ as $ <var:c3>$ . This forwards $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> ^ <nat:2> \} $ as the postcondition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> ^ <nat:2> \land <var:c3> = <nat:3> \} $ . Stepping forward , we have the assignment command \verb | <var:c3> := <var:c3> * <var:X> ; | . This forwards $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> ^ <nat:2> \land <var:c3> = <nat:3> \} $ as $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> ^ <nat:2> \land <var:c3> = <nat:3> \times <var:r> \} $ . This is sound using the assignment inference rule given by typical Hoare logic . Paying attention to the subsequent statement found in the set of commands , we have the environment update statement defining $ <var:c3> * <var:X> $ as $ <var:c3>$ . This line transfers the precondition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> ^ <nat:2> \land <var:c3> = <nat:3> \times <var:r> \} $ toward the condition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> ^ <nat:2> \land <var:c3> = <nat:3> \times <var:r> ^ <nat:2> \} $ . This is sound by the assignment inference rule from typical Hoare logic . Further , we have the environment update line assigning $ <var:c3> * <var:X> $ toward $ <var:c3>$ . This moves the precondition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> ^ <nat:2> \land <var:c3> = <nat:3> \times <var:r> ^ <nat:2> \} $ to $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> ^ <nat:2> \land <var:c3> = <nat:3> \times <var:r> ^ <nat:3> \} $ . Taking another step toward the proceeding line of code in our code , we see the variable assignmet code \verb | <var:o> := <var:c3> ; | . This statement transfers $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> ^ <nat:2> \land <var:c3> = <nat:3> \times <var:r> ^ <nat:3> \} $ as $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> ^ <nat:2> \land <var:o> = <nat:3> \times <var:r> ^ <nat:3> \} $ . Paying attention to the upcoming statement in our list of commands , the statement binding $ <var:o> + <var:c2> $ as $ <var:o>$ . This redefines the precondition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:c2> = <nat:2> \times <var:r> ^ <nat:2> \land <var:o> = <nat:3> \times <var:r> ^ <nat:3> \} $ into $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:o> = <nat:3> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> ^ <nat:2> \} $ . Focusing on the proceeding statement found in the segment of code , we have the variable update command defining $ <var:o> + <var:c1> $ as $ <var:o>$ . This takes $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:c1> = <nat:1> \times <var:r> \land <var:o> = <nat:3> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> ^ <nat:2> \} $ into the postcondition $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:o> = <nat:3> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> \} $ . This is sound with the assignment inference rule from typical Hoare logic . Stepping through , the assignment code \verb | <var:o> := <var:o> + <var:c0> | . This code takes $ \{ <var:X> = <var:r> \land <var:c0> = <nat:4> \land <var:o> = <nat:3> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> \} $ into $ \{ <var:X> = <var:r> \land <var:o> = <nat:3> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> + <nat:4> \} $ . This is shown to be logically sound with the assignment rule given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c0> := <nat:4> ; <var:c1> := <nat:1> ; <var:c1> := <var:c1> * <var:X> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:X> ; <var:c2> := <var:c2> * <var:X> ; <var:c3> := <nat:3> ; <var:c3> := <var:c3> * <var:X> ; <var:c3> := <var:c3> * <var:X> ; <var:c3> := <var:c3> * <var:X> ; <var:o> := <var:c3> ; <var:o> := <var:o> + <var:c2> ; <var:o> := <var:o> + <var:c1> ; <var:o> := <var:o> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:X> = <var:r> }} <def:poly> {{ <var:o> = <nat:3> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:1> * <var:r> /\ <var:c2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:1> * <var:r> /\ <var:c2> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:1> * <var:r> /\ <var:c2> = <nat:2> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:1> * <var:r> /\ <var:c2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:c3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:1> * <var:r> /\ <var:c2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:1> * <var:r> /\ <var:c2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:1> * <var:r> /\ <var:c2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:1> * <var:r> /\ <var:c2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:o> = <nat:3> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:c0> = <nat:4> /\ <var:c1> = <nat:1> * <var:r> /\ <var:o> = <nat:3> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:c0> = <nat:4> /\ <var:o> = <nat:3> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:r> /\ <var:o> = <nat:3> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 