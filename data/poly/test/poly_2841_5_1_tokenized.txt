\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H1> := <var:k> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:3> ; <var:N> := <var:H1> <var:N> := <var:N> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Allowing $ <var:k> = <var:E> $ ( given all integers $ <var:E> $ ) ahead of executing this code segment , it holds that we have $ <var:N> = <nat:3> \cdot <var:E> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:E> \} \\ <var:H1> := <var:k> ; \\ \{ <var:k> = <var:E> \land <var:H1> = <var:E> \} \\ <var:H0> := <nat:6> ; \\ \{ <var:k> = <var:E> \land <var:H1> = <var:E> \land <var:H0> = <nat:6> \} \\ <var:H1> := <var:H1> * <nat:3> ; \\ \{ <var:k> = <var:E> \land <var:H1> = <nat:3> * <var:E> \land <var:H0> = <nat:6> \} \\ <var:N> := <var:H1> \\ \{ <var:k> = <var:E> \land <var:H0> = <nat:6> \land <var:N> = <nat:3> * <var:E> \} \\ <var:N> := <var:N> + <var:H0> \\ \{ <var:k> = <var:E> \land <var:N> = <nat:3> * <var:E> + <nat:6> \} \end{eqnarray} Using usual Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <def:poly> := <var:H1> := <var:k> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:3> ; <var:N> := <var:H1> <var:N> := <var:N> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:k> = <var:E> }} <def:poly> {{ <var:N> = <nat:3> * <var:E> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:H1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:H1> = <var:E> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:H1> = <nat:3> * <var:E> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:H0> = <nat:6> /\ <var:N> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:E> /\ <var:N> = <nat:3> * <var:E> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 