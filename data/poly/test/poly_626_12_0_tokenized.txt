\begin{document} \begin{theorem} Define a code segment in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:3> ; <var:H1> := <nat:2> ; <var:H1> := <var:H1> * <var:a> ; <var:H5> := <nat:2> ; <var:H5> := <var:H5> * <var:a> ; <var:H5> := <var:H5> * <var:a> ; <var:H5> := <var:H5> * <var:a> ; <var:H5> := <var:H5> * <var:a> ; <var:H5> := <var:H5> * <var:a> ; <var:x> := <var:H5> ; <var:x> := <var:x> + <var:H1> ; <var:x> := <var:x> + <var:H0> \end{verbatim} Assuming it to hold that $ <var:a> = <var:c> $ ahead of evaluating the series of commands , it follows that we have $ <var:x> = <nat:2> \cdot <var:c> ^ <nat:5> + <nat:2> \cdot <var:c> + <nat:3> $ when series of instructions exits . \end{theorem} \begin{proof} See that the below decorated set of instructions . \begin{eqnarray} \{ <var:a> = <var:c> \} \\ <var:H0> := <nat:3> ; \\ \{ <var:a> = <var:c> \land <var:H0> = <nat:3> \} \\ <var:H1> := <nat:2> ; \\ \{ <var:a> = <var:c> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> \} \\ <var:H1> := <var:H1> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> * <var:c> \} \\ <var:H5> := <nat:2> ; \\ \{ <var:a> = <var:c> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> * <var:c> \land <var:H5> = <nat:2> \} \\ <var:H5> := <var:H5> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> * <var:c> \land <var:H5> = <nat:2> * <var:c> \} \\ <var:H5> := <var:H5> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> * <var:c> \land <var:H5> = <nat:2> * <var:c> ^ <nat:2> \} \\ <var:H5> := <var:H5> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> * <var:c> \land <var:H5> = <nat:2> * <var:c> ^ <nat:3> \} \\ <var:H5> := <var:H5> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> * <var:c> \land <var:H5> = <nat:2> * <var:c> ^ <nat:4> \} \\ <var:H5> := <var:H5> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> * <var:c> \land <var:H5> = <nat:2> * <var:c> ^ <nat:5> \} \\ <var:x> := <var:H5> ; \\ \{ <var:a> = <var:c> \land <var:H0> = <nat:3> \land <var:H1> = <nat:2> * <var:c> \land <var:x> = <nat:2> * <var:c> ^ <nat:5> \} \\ <var:x> := <var:x> + <var:H1> ; \\ \{ <var:a> = <var:c> \land <var:H0> = <nat:3> \land <var:x> = <nat:2> * <var:c> ^ <nat:5> + <nat:2> * <var:c> \} \\ <var:x> := <var:x> + <var:H0> \\ \{ <var:a> = <var:c> \land <var:x> = <nat:2> * <var:c> ^ <nat:5> + <nat:2> * <var:c> + <nat:3> \} \end{eqnarray} Applying typical Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H5> : string := " <var:H5> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:a> = <var:c> }} <var:H0> := <nat:3> ; <var:H1> := <nat:2> ; <var:H1> := <var:H1> * <var:a> ; <var:H5> := <nat:2> ; <var:H5> := <var:H5> * <var:a> ; <var:H5> := <var:H5> * <var:a> ; <var:H5> := <var:H5> * <var:a> ; <var:H5> := <var:H5> * <var:a> ; <var:H5> := <var:H5> * <var:a> ; <var:x> := <var:H5> ; <var:x> := <var:x> + <var:H1> ; <var:x> := <var:x> + <var:H0> {{ <var:x> = <nat:2> * <var:c> ^ <nat:5> + <nat:2> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> * <var:c> /\ <var:H5> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> * <var:c> /\ <var:H5> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> * <var:c> /\ <var:H5> = <nat:2> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> * <var:c> /\ <var:H5> = <nat:2> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> * <var:c> /\ <var:H5> = <nat:2> * <var:c> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> * <var:c> /\ <var:H5> = <nat:2> * <var:c> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:2> * <var:c> /\ <var:x> = <nat:2> * <var:c> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:H0> = <nat:3> /\ <var:x> = <nat:2> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:x> = <nat:2> * <var:c> ^ <nat:5> + <nat:2> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 