\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:j0> := <nat:3> ; <var:G> := <var:j0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Allowing that $ <var:d> = <var:V> $ before evaluating this series of instructions it must be that $ <var:G> = <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:V> \} \\ <var:j0> := <nat:3> ; \\ \{ <var:d> = <var:V> \land <var:j0> = <nat:3> \} \\ <var:G> := <var:j0> \\ \{ <var:d> = <var:V> \land <var:G> = <nat:3> \} \end{eqnarray} The application of Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <def:poly> := <var:j0> := <nat:3> ; <var:G> := <var:j0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:d> = <var:V> }} <def:poly> {{ <var:G> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:V> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:V> /\ <var:G> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 