\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:L1> := <var:j> ; <var:L2> := <var:L1> * <var:j> ; <var:L3> := <var:L2> * <var:j> ; <var:L0> := <nat:2> ; <var:L1> := <var:L1> * <nat:4> ; <var:L2> := <var:L2> * <nat:2> ; <var:L3> := <var:L3> * <nat:2> ; <var:v> := <var:L3> <var:v> := <var:v> + <var:L2> <var:v> := <var:v> + <var:L1> <var:v> := <var:v> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:j> = <var:q> $ given every whole numbers $ <var:q> $ prior to executing this list of commands , it follows that $ <var:v> = <nat:2> \times <var:q> ^ <nat:3> + <nat:2> \times <var:q> ^ <nat:2> + <nat:4> \times <var:q> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for this code segment is accomplished through standard Hoare logic . Focusing on the proceeding lines of codein our set of commands , \[ \begin{tabular} {rcl} \{ <var:j> = <var:q> \} & <var:L1> := <var:j> & \{ <var:j> = <var:q> \land <var:L1> = <var:q> \} \\ \{ <var:j> = <var:q> \land <var:L1> = <var:q> \} & <var:L2> := <var:L1> * <var:j> & \{ <var:j> = <var:q> \land <var:L1> = <var:q> \land <var:L2> = <var:q> ^ <nat:2> \} \\ \{ <var:j> = <var:q> \land <var:L1> = <var:q> \land <var:L2> = <var:q> ^ <nat:2> \} & <var:L3> := <var:L2> * <var:j> & \{ <var:j> = <var:q> \land <var:L1> = <var:q> \land <var:L2> = <var:q> ^ <nat:2> \land <var:L3> = <var:q> ^ <nat:3> \} \\ \{ <var:j> = <var:q> \land <var:L1> = <var:q> \land <var:L2> = <var:q> ^ <nat:2> \land <var:L3> = <var:q> ^ <nat:3> \} & <var:L0> := <nat:2> & \{ <var:j> = <var:q> \land <var:L1> = <var:q> \land <var:L2> = <var:q> ^ <nat:2> \land <var:L3> = <var:q> ^ <nat:3> \land <var:L0> = <nat:2> \} \\ \{ <var:j> = <var:q> \land <var:L1> = <var:q> \land <var:L2> = <var:q> ^ <nat:2> \land <var:L3> = <var:q> ^ <nat:3> \land <var:L0> = <nat:2> \} & <var:L1> := <var:L1> * <nat:4> & \{ <var:j> = <var:q> \land <var:L1> = <nat:4> \cdot <var:q> \land <var:L2> = <var:q> ^ <nat:2> \land <var:L3> = <var:q> ^ <nat:3> \land <var:L0> = <nat:2> \} \\ \{ <var:j> = <var:q> \land <var:L1> = <nat:4> \cdot <var:q> \land <var:L2> = <var:q> ^ <nat:2> \land <var:L3> = <var:q> ^ <nat:3> \land <var:L0> = <nat:2> \} & <var:L2> := <var:L2> * <nat:2> & \{ <var:j> = <var:q> \land <var:L1> = <nat:4> \cdot <var:q> \land <var:L2> = <nat:2> \cdot <var:q> ^ <nat:2> \land <var:L3> = <var:q> ^ <nat:3> \land <var:L0> = <nat:2> \} \\ \{ <var:j> = <var:q> \land <var:L1> = <nat:4> \cdot <var:q> \land <var:L2> = <nat:2> \cdot <var:q> ^ <nat:2> \land <var:L3> = <var:q> ^ <nat:3> \land <var:L0> = <nat:2> \} & <var:L3> := <var:L3> * <nat:2> & \{ <var:j> = <var:q> \land <var:L1> = <nat:4> \cdot <var:q> \land <var:L2> = <nat:2> \cdot <var:q> ^ <nat:2> \land <var:L3> = <nat:2> \cdot <var:q> ^ <nat:3> \land <var:L0> = <nat:2> \} \\ \{ <var:j> = <var:q> \land <var:L1> = <nat:4> \cdot <var:q> \land <var:L2> = <nat:2> \cdot <var:q> ^ <nat:2> \land <var:L3> = <nat:2> \cdot <var:q> ^ <nat:3> \land <var:L0> = <nat:2> \} & <var:v> := <var:L3& \{ <var:j> = <var:q> \land <var:L1> = <nat:4> \cdot <var:q> \land <var:L2> = <nat:2> \cdot <var:q> ^ <nat:2> \land <var:L0> = <nat:2> \land <var:v> = <nat:2> \cdot <var:q> ^ <nat:3> \} \end{tabular} This is given by the variable binding inference rule given by Hoare logic . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:q> \} & <var:L1> := <var:j> & \{ <var:j> = <var:q> \land <var:L1> = <var:q> \} \end{tabular} This is rigorously given by the inference rule in standard Hoare reasoning . Going forward , \[ \begin{tabular} {rcl} \{ <var:j> = <var:q> \} & <var:L1> := <var:j> & \{ <var:j> = <var:q> \land <var:L1> = <var:q> \} \end{tabular} Focusing on the proceeding line contained in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:j> = <var:q> \} & <var:L1> := <var:j> & \{ <var:j> = <var:q> \land <var:L1> = <var:q> \} \end{tabular} This is given using the variable update inference rule obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L1> := <var:j> ; <var:L2> := <var:L1> * <var:j> ; <var:L3> := <var:L2> * <var:j> ; <var:L0> := <nat:2> ; <var:L1> := <var:L1> * <nat:4> ; <var:L2> := <var:L2> * <nat:2> ; <var:L3> := <var:L3> * <nat:2> ; <var:v> := <var:L3> <var:v> := <var:v> + <var:L2> <var:v> := <var:v> + <var:L1> <var:v> := <var:v> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:j> = <var:q> }} <def:poly> {{ <var:v> = <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:L1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:L1> = <var:q> /\ <var:L2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:L1> = <var:q> /\ <var:L2> = <var:q> ^ <nat:2> /\ <var:L3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:L1> = <var:q> /\ <var:L2> = <var:q> ^ <nat:2> /\ <var:L3> = <var:q> ^ <nat:3> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:L1> = <nat:4> * <var:q> /\ <var:L2> = <var:q> ^ <nat:2> /\ <var:L3> = <var:q> ^ <nat:3> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:L1> = <nat:4> * <var:q> /\ <var:L2> = <nat:2> * <var:q> ^ <nat:2> /\ <var:L3> = <var:q> ^ <nat:3> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:L1> = <nat:4> * <var:q> /\ <var:L2> = <nat:2> * <var:q> ^ <nat:2> /\ <var:L3> = <nat:2> * <var:q> ^ <nat:3> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:L1> = <nat:4> * <var:q> /\ <var:L2> = <nat:2> * <var:q> ^ <nat:2> /\ <var:L0> = <nat:2> /\ <var:v> = <nat:2> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:L1> = <nat:4> * <var:q> /\ <var:L0> = <nat:2> /\ <var:v> = <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:L0> = <nat:2> /\ <var:v> = <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:v> = <nat:2> * <var:q> ^ <nat:3> + <nat:2> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 