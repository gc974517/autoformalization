\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N> := <nat:3> ; <var:N> := <var:N> * <var:U> ; <var:N> := <nat:3> + <var:N> * <var:U> ; <var:N> := <nat:2> + <var:N> * <var:U> ; <var:N> := <nat:1> + <var:N> * <var:U> ; <var:N> := <var:N> * <var:U> ; <var:N> := <nat:3> + <var:N> * <var:U> ; <var:N> := <nat:2> + <var:N> * <var:U> ; <var:N> := <nat:4> + <var:N> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:U> = <var:r> $ for all $ <var:r> $ ahead of the evaluation of the code segment then we see $ <var:N> = <nat:3> \times <var:r> ^ <nat:8> + <nat:3> \times <var:r> ^ <nat:6> + <nat:2> \times <var:r> ^ <nat:5> + <nat:1> \times <var:r> ^ <nat:4> + <nat:3> \times <var:r> ^ <nat:2> + <nat:2> \times <var:r> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for our list of commands can be seen by typical Hoare techniques . Focusing on the next lines seen in the series of commands , \verb | { <var:U> = <var:r> } <var:N> := <nat:3> { <var:U> = <var:r> \land <var:N> = <nat:3> } | , \verb | { <var:U> = <var:r> \land <var:N> = <nat:3> } <var:N> := <var:N> * <var:U> { <var:U> = <var:r> \land <var:N> = <nat:3> \times <var:r> + } | and \verb | { <var:U> = <var:r> \land <var:N> = <nat:3> \times <var:r> + } <var:N> := <nat:3> + <var:N> * <var:U> { <var:U> = <var:r> \land <var:N> = <nat:3> \times <var:r> ^ <nat:2> + <nat:3> } | . This is known to be sound through the inference rule in usual Hoare reasoning . Paying attention to the upcoming lines contained in our series of instructions , we see \verb | { <var:U> = <var:r> } <var:N> := <nat:3> { <var:U> = <var:r> \land <var:N> = <nat:3> } | , \verb | { <var:U> = <var:r> \land <var:N> = <nat:3> } <var:N> := <var:N> * <var:U> { <var:U> = <var:r> \land <var:N> = <nat:3> \times <var:r> + } | , \verb | { <var:U> = <var:r> \land <var:N> = <nat:3> \times <var:r> + } <var:N> := <nat:3> + <var:N> * <var:U> { <var:U> = <var:r> \land <var:N> = <nat:3> \times <var:r> ^ <nat:2> + <nat:3> } | , \verb | { <var:U> = <var:r> \land <var:N> = <nat:3> \times <var:r> ^ <nat:2> + <nat:3> } <var:N> := <nat:2> + <var:N> * <var:U> { <var:U> = <var:r> \land <var:N> = <nat:3> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> + <nat:2> } | , \verb | { <var:U> = <var:r> \land <var:N> = <nat:3> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> + <nat:2> } <var:N> := <nat:1> + <var:N> * <var:U> { <var:U> = <var:r> \land <var:N> = <nat:3> \times <var:r> ^ <nat:4> + <nat:3> \times <var:r> ^ <nat:2> + <nat:2> \times <var:r> + <nat:1> } | and \verb | { <var:U> = <var:r> \land <var:N> = <nat:3> \times <var:r> ^ <nat:4> + <nat:3> \times <var:r> ^ <nat:2> + <nat:2> \times <var:r> + <nat:1> } <var:N> := <var:N> * <var:U> { <var:U> = <var:r> \land <var:N> = <nat:3> \times <var:r> ^ <nat:5> + <nat:3> \times <var:r> ^ <nat:3> + <nat:2> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> + } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:N> := <nat:3> ; <var:N> := <var:N> * <var:U> ; <var:N> := <nat:3> + <var:N> * <var:U> ; <var:N> := <nat:2> + <var:N> * <var:U> ; <var:N> := <nat:1> + <var:N> * <var:U> ; <var:N> := <var:N> * <var:U> ; <var:N> := <nat:3> + <var:N> * <var:U> ; <var:N> := <nat:2> + <var:N> * <var:U> ; <var:N> := <nat:4> + <var:N> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:U> = <var:r> }} <def:poly> {{ <var:N> = <nat:3> * <var:r> ^ <nat:8> + <nat:3> * <var:r> ^ <nat:6> + <nat:2> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:N> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:N> = <nat:3> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:N> = <nat:3> * <var:r> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:N> = <nat:3> * <var:r> ^ <nat:3> + <nat:3> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:N> = <nat:3> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:N> = <nat:3> * <var:r> ^ <nat:5> + <nat:3> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:N> = <nat:3> * <var:r> ^ <nat:6> + <nat:3> * <var:r> ^ <nat:4> + <nat:2> * <var:r> ^ <nat:3> + <nat:1> * <var:r> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:N> = <nat:3> * <var:r> ^ <nat:7> + <nat:3> * <var:r> ^ <nat:5> + <nat:2> * <var:r> ^ <nat:4> + <nat:1> * <var:r> ^ <nat:3> + <nat:3> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:N> = <nat:3> * <var:r> ^ <nat:8> + <nat:3> * <var:r> ^ <nat:6> + <nat:2> * <var:r> ^ <nat:5> + <nat:1> * <var:r> ^ <nat:4> + <nat:3> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 