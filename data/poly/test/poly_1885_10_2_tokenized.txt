\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} such that \begin{verbatim} <var:b> := <nat:4> ; <var:b> := <var:b> * <var:L> ; <var:b> := <nat:4> + <var:b> * <var:L> ; <var:b> := <var:b> * <var:L> ; <var:b> := <nat:3> + <var:b> * <var:L> ; <var:b> := <nat:1> + <var:b> * <var:L> ; <var:b> := <var:b> * <var:L> ; <var:b> := <nat:2> + <var:b> * <var:L> ; <var:b> := <nat:3> + <var:b> * <var:L> ; <var:b> := <nat:4> + <var:b> * <var:L> \end{verbatim} Assuming that we have $ <var:L> = <var:q> $ before the execution of the series of instructions , it follows that we have $ <var:b> = <nat:4> \times <var:q> ^ <nat:9> + <nat:4> \times <var:q> ^ <nat:7> + <nat:3> \times <var:q> ^ <nat:5> + <nat:1> \times <var:q> ^ <nat:4> + <nat:2> \times <var:q> ^ <nat:2> + <nat:3> \times <var:q> + <nat:4> $ after segment of code has terminated . \end{theorem} \begin{proof} The argument for our set of instructions is evident through Hoare logic . Advancing to the next step found in the series of instructions , the environment update statement \verb | <var:b> := <nat:4> ; | . This forwards the condition $ \{ <var:L> = <var:q> \} $ as $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> \} $ . Considering the subsequent command in the list of instructions , we have the variable assignmet statement yielding $ <var:b> * <var:L> $ to $ <var:b>$ . This redefines the precondition $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> \} $ as $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> + \} $ . This is guaranteed with the assignment scheme defined by standard Hoare reasoning . Now , the command defining $ <nat:4> + <var:b> * <var:L> $ into $ <var:b>$ . This command redefines $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> + \} $ into the condition $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> \} $ . Going to the next step , we have the variable binding line \verb | <var:b> := <var:b> * <var:L> ; | . This redefines the precondition $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> \} $ as the postcondition $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> + \} $ . Taking a look at the subsequent line of code found in our segment of code , the assignment statement letting $ <nat:3> + <var:b> * <var:L> $ into $ <var:b>$ . This transfers $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> + \} $ into $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:2> + <nat:3> \} $ . Considering the proceeding command found in the series of commands , the variable binding command assigning $ <nat:1> + <var:b> * <var:L> $ into $ <var:b>$ . This line moves the condition $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:2> + <nat:3> \} $ into $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:3> + <nat:3> * <var:q> + <nat:1> \} $ . Shifting focus toward the next line of code in the set of instructions , we have the variable binding command \verb | <var:b> := <var:b> * <var:L> ; | . This code forwards the condition $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:3> + <nat:3> * <var:q> + <nat:1> \} $ to the condition $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + \} $ . This is shown to be logically sound with the assignment law found in standard Hoare reasoning . Further , we see the variable update line assigning $ <nat:2> + <var:b> * <var:L> $ as $ <var:b>$ . This code redefines the precondition $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + \} $ into the condition $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:7> + <nat:4> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:2> \} $ . This is ensured by the assignment scheme defined in standard Hoare reasoning . Advancing , we see the assignment statement yielding $ <nat:3> + <var:b> * <var:L> $ toward $ <var:b>$ . This transfers $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:7> + <nat:4> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:2> \} $ as $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:8> + <nat:4> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> + <nat:3> \} $ . Keeping momentum , the variable assignmet code \verb | <var:b> := <nat:4> + <var:b> * <var:L> | . This moves the precondition $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:8> + <nat:4> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> + <nat:3> \} $ as $ \{ <var:L> = <var:q> \land <var:b> = <nat:4> * <var:q> ^ <nat:9> + <nat:4> * <var:q> ^ <nat:7> + <nat:3> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:L> = <var:q> }} <var:b> := <nat:4> ; <var:b> := <var:b> * <var:L> ; <var:b> := <nat:4> + <var:b> * <var:L> ; <var:b> := <var:b> * <var:L> ; <var:b> := <nat:3> + <var:b> * <var:L> ; <var:b> := <nat:1> + <var:b> * <var:L> ; <var:b> := <var:b> * <var:L> ; <var:b> := <nat:2> + <var:b> * <var:L> ; <var:b> := <nat:3> + <var:b> * <var:L> ; <var:b> := <nat:4> + <var:b> * <var:L> {{ <var:b> = <nat:4> * <var:q> ^ <nat:9> + <nat:4> * <var:q> ^ <nat:7> + <nat:3> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:b> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:b> = <nat:4> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:b> = <nat:4> * <var:q> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:b> = <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:b> = <nat:4> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:b> = <nat:4> * <var:q> ^ <nat:5> + <nat:4> * <var:q> ^ <nat:3> + <nat:3> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:b> = <nat:4> * <var:q> ^ <nat:6> + <nat:4> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:b> = <nat:4> * <var:q> ^ <nat:7> + <nat:4> * <var:q> ^ <nat:5> + <nat:3> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:b> = <nat:4> * <var:q> ^ <nat:8> + <nat:4> * <var:q> ^ <nat:6> + <nat:3> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:2> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:q> /\ <var:b> = <nat:4> * <var:q> ^ <nat:9> + <nat:4> * <var:q> ^ <nat:7> + <nat:3> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:2> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 