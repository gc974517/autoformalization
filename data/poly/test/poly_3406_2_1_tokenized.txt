\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:6> ; <var:A> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Given ( given any positive coefficients $ <var:B> $ ) it to be that $ <var:U> = <var:B> $ ahead of executing the set of instructions then we have $ <var:A> = <nat:6> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic results in : \begin{eqnarray} \{ <var:U> = <var:B> \} \\ <var:x0> := <nat:6> ; \\ \{ <var:U> = <var:B> \land <var:x0> = <nat:6> \} \\ <var:A> := <var:x0> \\ \{ <var:U> = <var:B> \land <var:A> = <nat:6> \} \end{eqnarray} Given the above , our set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:6> ; <var:A> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:U> = <var:B> }} <def:poly> {{ <var:A> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:x0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:A> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 