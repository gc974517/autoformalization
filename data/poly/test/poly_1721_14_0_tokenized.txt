\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:4> ; <var:f1> := <nat:7> ; <var:f1> := <var:f1> * <var:G> ; <var:f2> := <nat:9> ; <var:f2> := <var:f2> * <var:G> ; <var:f2> := <var:f2> * <var:G> ; <var:f3> := <nat:7> ; <var:f3> := <var:f3> * <var:G> ; <var:f3> := <var:f3> * <var:G> ; <var:f3> := <var:f3> * <var:G> ; <var:z> := <var:f3> ; <var:z> := <var:z> + <var:f2> ; <var:z> := <var:z> + <var:f1> ; <var:z> := <var:z> + <var:f0> \end{verbatim} Allow it to hold that $ <var:G> = <var:a> $ before running our code segment , it must be that we see $ <var:z> = <nat:7> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:7> * <var:a> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for our code can be accomplished through the below decorated set of commands . \begin{eqnarray} \{ <var:G> = <var:a> \} \\ <var:f0> := <nat:4> ; \\ \{ <var:G> = <var:a> \land <var:f0> = <nat:4> \} \\ <var:f1> := <nat:7> ; \\ \{ <var:G> = <var:a> \land <var:f0> = <nat:4> \land <var:f1> = <nat:7> \} \\ <var:f1> := <var:f1> * <var:G> ; \\ \{ <var:G> = <var:a> \land <var:f0> = <nat:4> \land <var:f1> = <nat:7> * <var:a> \} \\ <var:f2> := <nat:9> ; \\ \{ <var:G> = <var:a> \land <var:f0> = <nat:4> \land <var:f1> = <nat:7> * <var:a> \land <var:f2> = <nat:9> \} \\ <var:f2> := <var:f2> * <var:G> ; \\ \{ <var:G> = <var:a> \land <var:f0> = <nat:4> \land <var:f1> = <nat:7> * <var:a> \land <var:f2> = <nat:9> * <var:a> \} \\ <var:f2> := <var:f2> * <var:G> ; \\ \{ <var:G> = <var:a> \land <var:f0> = <nat:4> \land <var:f1> = <nat:7> * <var:a> \land <var:f2> = <nat:9> * <var:a> ^ <nat:2> \} \\ <var:f3> := <nat:7> ; \\ \{ <var:G> = <var:a> \land <var:f0> = <nat:4> \land <var:f1> = <nat:7> * <var:a> \land <var:f2> = <nat:9> * <var:a> ^ <nat:2> \land <var:f3> = <nat:7> \} \\ <var:f3> := <var:f3> * <var:G> ; \\ \{ <var:G> = <var:a> \land <var:f0> = <nat:4> \land <var:f1> = <nat:7> * <var:a> \land <var:f2> = <nat:9> * <var:a> ^ <nat:2> \land <var:f3> = <nat:7> * <var:a> \} \\ <var:f3> := <var:f3> * <var:G> ; \\ \{ <var:G> = <var:a> \land <var:f0> = <nat:4> \land <var:f1> = <nat:7> * <var:a> \land <var:f2> = <nat:9> * <var:a> ^ <nat:2> \land <var:f3> = <nat:7> * <var:a> ^ <nat:2> \} \\ <var:f3> := <var:f3> * <var:G> ; \\ \{ <var:G> = <var:a> \land <var:f0> = <nat:4> \land <var:f1> = <nat:7> * <var:a> \land <var:f2> = <nat:9> * <var:a> ^ <nat:2> \land <var:f3> = <nat:7> * <var:a> ^ <nat:3> \} \\ <var:z> := <var:f3> ; \\ \{ <var:G> = <var:a> \land <var:f0> = <nat:4> \land <var:f1> = <nat:7> * <var:a> \land <var:f2> = <nat:9> * <var:a> ^ <nat:2> \land <var:z> = <nat:7> * <var:a> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:f2> ; \\ \{ <var:G> = <var:a> \land <var:f0> = <nat:4> \land <var:f1> = <nat:7> * <var:a> \land <var:z> = <nat:7> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:f1> ; \\ \{ <var:G> = <var:a> \land <var:f0> = <nat:4> \land <var:z> = <nat:7> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:7> * <var:a> \} \\ <var:z> := <var:z> + <var:f0> \\ \{ <var:G> = <var:a> \land <var:z> = <nat:7> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:7> * <var:a> + <nat:4> \} \end{eqnarray} Applying standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:G> = <var:a> }} <var:f0> := <nat:4> ; <var:f1> := <nat:7> ; <var:f1> := <var:f1> * <var:G> ; <var:f2> := <nat:9> ; <var:f2> := <var:f2> * <var:G> ; <var:f2> := <var:f2> * <var:G> ; <var:f3> := <nat:7> ; <var:f3> := <var:f3> * <var:G> ; <var:f3> := <var:f3> * <var:G> ; <var:f3> := <var:f3> * <var:G> ; <var:z> := <var:f3> ; <var:z> := <var:z> + <var:f2> ; <var:z> := <var:z> + <var:f1> ; <var:z> := <var:z> + <var:f0> {{ <var:z> = <nat:7> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:7> * <var:a> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:7> * <var:a> /\ <var:f2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:7> * <var:a> /\ <var:f2> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:7> * <var:a> /\ <var:f2> = <nat:9> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:7> * <var:a> /\ <var:f2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:f3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:7> * <var:a> /\ <var:f2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:f3> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:7> * <var:a> /\ <var:f2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:f3> = <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:7> * <var:a> /\ <var:f2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:f3> = <nat:7> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:7> * <var:a> /\ <var:f2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:z> = <nat:7> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:f0> = <nat:4> /\ <var:f1> = <nat:7> * <var:a> /\ <var:z> = <nat:7> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:f0> = <nat:4> /\ <var:z> = <nat:7> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:a> /\ <var:z> = <nat:7> * <var:a> ^ <nat:3> + <nat:9> * <var:a> ^ <nat:2> + <nat:7> * <var:a> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 