\begin{document} \begin{theorem} Take the following series of commands as \begin{verbatim} <var:w0> := <nat:1> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:o> ; <var:w2> := <nat:8> ; <var:w2> := <var:w2> * <var:o> ; <var:w2> := <var:w2> * <var:o> ; <var:c> := <var:w2> ; <var:c> := <var:c> + <var:w1> ; <var:c> := <var:c> + <var:w0> \end{verbatim} Assume for every $ <var:y> $ that we have $ <var:o> = <var:y> $ prior to executing the list of commands it follows that we see $ <var:c> = <nat:8> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:1> $ when series of instructions has executed . \end{theorem} \begin{proof} Applying Hoare techniques gives us : \begin{eqnarray} \{ <var:o> = <var:y> \} \\ <var:w0> := <nat:1> ; \\ \{ <var:o> = <var:y> \land <var:w0> = <nat:1> \} \\ <var:w1> := <nat:4> ; \\ \{ <var:o> = <var:y> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> \} \\ <var:w1> := <var:w1> * <var:o> ; \\ \{ <var:o> = <var:y> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:y> \} \\ <var:w2> := <nat:8> ; \\ \{ <var:o> = <var:y> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:y> \land <var:w2> = <nat:8> \} \\ <var:w2> := <var:w2> * <var:o> ; \\ \{ <var:o> = <var:y> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:y> \land <var:w2> = <nat:8> * <var:y> \} \\ <var:w2> := <var:w2> * <var:o> ; \\ \{ <var:o> = <var:y> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:y> \land <var:w2> = <nat:8> * <var:y> ^ <nat:2> \} \\ <var:c> := <var:w2> ; \\ \{ <var:o> = <var:y> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:y> \land <var:c> = <nat:8> * <var:y> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:w1> ; \\ \{ <var:o> = <var:y> \land <var:w0> = <nat:1> \land <var:c> = <nat:8> * <var:y> ^ <nat:2> + <nat:4> * <var:y> \} \\ <var:c> := <var:c> + <var:w0> \\ \{ <var:o> = <var:y> \land <var:c> = <nat:8> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> \} \end{eqnarray} Considering the preceding argument , this code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:o> = <var:y> }} <var:w0> := <nat:1> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:o> ; <var:w2> := <nat:8> ; <var:w2> := <var:w2> * <var:o> ; <var:w2> := <var:w2> * <var:o> ; <var:c> := <var:w2> ; <var:c> := <var:c> + <var:w1> ; <var:c> := <var:c> + <var:w0> {{ <var:c> = <nat:8> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:y> /\ <var:w2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:y> /\ <var:w2> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:y> /\ <var:w2> = <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:y> /\ <var:c> = <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:w0> = <nat:1> /\ <var:c> = <nat:8> * <var:y> ^ <nat:2> + <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:y> /\ <var:c> = <nat:8> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 