\begin{document} \begin{theorem} We define a list of commands as \begin{verbatim} <var:Y1> := <var:I> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:v> := <var:Y1> <var:v> := <var:v> + <var:Y0> \end{verbatim} Given it to hold that $ <var:I> = <var:F> $ before the evaluation of our code it must be that we have $ <var:v> = <nat:5> \times <var:F> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands is demonstrated with typical Hoare logic . Moving on , we see \verb | { <var:I> = <var:F> } <var:Y1> := <var:I> { <var:I> = <var:F> \land <var:Y1> = <var:F> } | , \verb | { <var:I> = <var:F> \land <var:Y1> = <var:F> } <var:Y0> := <nat:7> { <var:I> = <var:F> \land <var:Y1> = <var:F> \land <var:Y0> = <nat:7> } | , \verb | { <var:I> = <var:F> \land <var:Y1> = <var:F> \land <var:Y0> = <nat:7> } <var:Y1> := <var:Y1> * <nat:5> { <var:I> = <var:F> \land <var:Y1> = <nat:5> \times <var:F> \land <var:Y0> = <nat:7> } | and \verb | { <var:I> = <var:F> \land <var:Y1> = <nat:5> \times <var:F> \land <var:Y0> = <nat:7> } <var:v> := <var:Y1{ <var:I> = <var:F> \land <var:Y0> = <nat:7> \land <var:v> = <nat:5> \times <var:F> } | . This is shown to be logically sound using the variable binding scheme obtained from typical Hoare techniques . Following , \verb | { <var:I> = <var:F> } <var:Y1> := <var:I> { <var:I> = <var:F> \land <var:Y1> = <var:F> } | . This is given with the assignment rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:I> = <var:F> }} <var:Y1> := <var:I> ; <var:Y0> := <nat:7> ; <var:Y1> := <var:Y1> * <nat:5> ; <var:v> := <var:Y1> <var:v> := <var:v> + <var:Y0> {{ <var:v> = <nat:5> * <var:F> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:F> /\ <var:Y1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:F> /\ <var:Y1> = <var:F> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:F> /\ <var:Y1> = <nat:5> * <var:F> /\ <var:Y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:F> /\ <var:Y0> = <nat:7> /\ <var:v> = <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:F> /\ <var:v> = <nat:5> * <var:F> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 