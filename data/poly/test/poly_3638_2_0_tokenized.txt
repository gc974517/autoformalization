\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:7> ; <var:m> := <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:Z> = <var:G> $ ahead of interpreting the series of commands , it follows that $ <var:m> = <nat:7> $ once list of commands is done . \end{theorem} \begin{proof} The application of Hoare techniques returns : \begin{eqnarray} \{ <var:Z> = <var:G> \} \\ <var:K0> := <nat:7> ; \\ \{ <var:Z> = <var:G> \land <var:K0> = <nat:7> \} \\ <var:m> := <var:K0> \\ \{ <var:Z> = <var:G> \land <var:m> = <nat:7> \} \end{eqnarray} Considering the preceding argument , this program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <def:poly> := <var:K0> := <nat:7> ; <var:m> := <var:K0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:Z> = <var:G> }} <def:poly> {{ <var:m> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:G> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:G> /\ <var:m> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 