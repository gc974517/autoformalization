\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:O> := <nat:3> ; <var:O> := <var:O> * <var:n> ; <var:O> := <nat:3> + <var:O> * <var:n> ; <var:O> := <var:O> * <var:n> ; <var:O> := <var:O> * <var:n> ; <var:O> := <nat:3> + <var:O> * <var:n> ; <var:O> := <nat:4> + <var:O> * <var:n> ; <var:O> := <nat:2> + <var:O> * <var:n> ; <var:O> := <nat:2> + <var:O> * <var:n> ; <var:O> := <nat:1> + <var:O> * <var:n> ; <var:O> := <nat:2> + <var:O> * <var:n> ; <var:O> := <var:O> * <var:n> ; <var:O> := <nat:1> + <var:O> * <var:n> ; <var:O> := <nat:1> + <var:O> * <var:n> \end{verbatim} Assume assuming some $ <var:H> $ it to hold that $ <var:n> = <var:H> $ before the execution of our segment of code , it must be that we have $ <var:O> = <nat:3> \cdot <var:H> ^ <nat:13> + <nat:3> \cdot <var:H> ^ <nat:11> + <nat:3> \cdot <var:H> ^ <nat:8> + <nat:4> \cdot <var:H> ^ <nat:7> + <nat:2> \cdot <var:H> ^ <nat:6> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:1> \cdot <var:H> ^ <nat:4> + <nat:2> \cdot <var:H> ^ <nat:3> + <nat:1> \cdot <var:H> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our list of instructions can be shown using usual Hoare reasoning . Keeping momentum , the variable assignmet statement letting $ <nat:3> $ toward $ <var:O>$ . This statement takes the condition $ \{ <var:n> = <var:H> \} $ toward the condition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \} $ . This is known to be sound using the assignment rule in Hoare logic . Shifting focus toward the following bit of code found in the list of instructions , the variable binding statement defining $ <var:O> * <var:n> $ toward $ <var:O>$ . This line takes the condition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \} $ as the condition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> + \} $ . Paying attention to the proceeding step contained in the series of commands , we see the variable assignmet code giving $ <nat:3> + <var:O> * <var:n> $ into $ <var:O>$ . This code forwards the condition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> + \} $ toward the postcondition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:2> + <nat:3> \} $ . Focusing on the next piece of code seen in the set of instructions , we see the variable update line \verb | <var:O> := <var:O> * <var:n> ; | . This line transfers the condition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:2> + <nat:3> \} $ toward $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> + \} $ . This is rigorously given using the assignment scheme given by Hoare logic . Moving on , we see the code \verb | <var:O> := <var:O> * <var:n> ; | . This takes the precondition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> + \} $ to $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:2> + \} $ . This is ensured using the assignment rule obtained from typical Hoare techniques . Moving forward to the next step , we see the assignment line \verb | <var:O> := <nat:3> + <var:O> * <var:n> ; | . This moves the condition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:2> + \} $ toward the condition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:3> + <nat:3> \} $ . This is shown to be logically sound with the assignment rule defined in typical Hoare reasoning . After , we have the variable update line yielding $ <nat:4> + <var:O> * <var:n> $ toward $ <var:O>$ . This statement forwards the precondition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:3> + <nat:3> \} $ toward $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:6> + <nat:3> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> + <nat:4> \} $ . This is given using the assignment rule in usual Hoare reasoning . Advancing on , we see the line yielding $ <nat:2> + <var:O> * <var:n> $ into $ <var:O>$ . This statement moves the precondition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:6> + <nat:3> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> + <nat:4> \} $ to the postcondition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:7> + <nat:3> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:2> \} $ . Immediately after , we have the variable update command \verb | <var:O> := <nat:2> + <var:O> * <var:n> ; | . This command redefines the condition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:7> + <nat:3> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:2> \} $ as the postcondition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:8> + <nat:3> \times <var:H> ^ <nat:6> + <nat:3> \times <var:H> ^ <nat:3> + <nat:4> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:2> \} $ . Advancing , we have the assignment code \verb | <var:O> := <nat:1> + <var:O> * <var:n> ; | . This advances the precondition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:8> + <nat:3> \times <var:H> ^ <nat:6> + <nat:3> \times <var:H> ^ <nat:3> + <nat:4> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:2> \} $ as the postcondition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:9> + <nat:3> \times <var:H> ^ <nat:7> + <nat:3> \times <var:H> ^ <nat:4> + <nat:4> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:1> \} $ . This is ensured by the assignment inference rule from standard Hoare techniques . Taking a look at the proceeding step contained in the program , the environment update command \verb | <var:O> := <nat:2> + <var:O> * <var:n> ; | . This takes the condition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:9> + <nat:3> \times <var:H> ^ <nat:7> + <nat:3> \times <var:H> ^ <nat:4> + <nat:4> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:1> \} $ as the condition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:10> + <nat:3> \times <var:H> ^ <nat:8> + <nat:3> \times <var:H> ^ <nat:5> + <nat:4> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> + <nat:2> \} $ . Moving onward , we have the binding statement \verb | <var:O> := <var:O> * <var:n> ; | . This redefines $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:10> + <nat:3> \times <var:H> ^ <nat:8> + <nat:3> \times <var:H> ^ <nat:5> + <nat:4> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> + <nat:2> \} $ toward $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:11> + <nat:3> \times <var:H> ^ <nat:9> + <nat:3> \times <var:H> ^ <nat:6> + <nat:4> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + \} $ . Paying attention to the next bit of code found in our code , we have the variable assignmet line \verb | <var:O> := <nat:1> + <var:O> * <var:n> ; | . This command transfers the condition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:11> + <nat:3> \times <var:H> ^ <nat:9> + <nat:3> \times <var:H> ^ <nat:6> + <nat:4> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + \} $ into the postcondition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:12> + <nat:3> \times <var:H> ^ <nat:10> + <nat:3> \times <var:H> ^ <nat:7> + <nat:4> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:1> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:1> \} $ . This is rigorously given by the assignment scheme from usual Hoare reasoning . Shifting focus toward the proceeding step contained in our series of instructions , the variable update command giving $ <nat:1> + <var:O> * <var:n$ to $ <var:O>$ . This transfers $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:12> + <nat:3> \times <var:H> ^ <nat:10> + <nat:3> \times <var:H> ^ <nat:7> + <nat:4> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:1> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:1> \} $ toward the postcondition $ \{ <var:n> = <var:H> \land <var:O> = <nat:3> \times <var:H> ^ <nat:13> + <nat:3> \times <var:H> ^ <nat:11> + <nat:3> \times <var:H> ^ <nat:8> + <nat:4> \times <var:H> ^ <nat:7> + <nat:2> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:1> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> + <nat:1> \} $ . This is shown using the assignment scheme from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:n> = <var:H> }} <var:O> := <nat:3> ; <var:O> := <var:O> * <var:n> ; <var:O> := <nat:3> + <var:O> * <var:n> ; <var:O> := <var:O> * <var:n> ; <var:O> := <var:O> * <var:n> ; <var:O> := <nat:3> + <var:O> * <var:n> ; <var:O> := <nat:4> + <var:O> * <var:n> ; <var:O> := <nat:2> + <var:O> * <var:n> ; <var:O> := <nat:2> + <var:O> * <var:n> ; <var:O> := <nat:1> + <var:O> * <var:n> ; <var:O> := <nat:2> + <var:O> * <var:n> ; <var:O> := <var:O> * <var:n> ; <var:O> := <nat:1> + <var:O> * <var:n> ; <var:O> := <nat:1> + <var:O> * <var:n> {{ <var:O> = <nat:3> * <var:H> ^ <nat:13> + <nat:3> * <var:H> ^ <nat:11> + <nat:3> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> * <var:H> ^ <nat:11> + <nat:3> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> * <var:H> ^ <nat:12> + <nat:3> * <var:H> ^ <nat:10> + <nat:3> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:H> /\ <var:O> = <nat:3> * <var:H> ^ <nat:13> + <nat:3> * <var:H> ^ <nat:11> + <nat:3> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:1> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 