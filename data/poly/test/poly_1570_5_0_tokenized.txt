\begin{document} \begin{theorem} Let the following series of instructions : \begin{verbatim} <var:R0> := <nat:2> ; <var:R1> := <nat:8> ; <var:R1> := <var:R1> * <var:F> ; <var:b> := <var:R1> ; <var:b> := <var:b> + <var:R0> \end{verbatim} Allowing that we have $ <var:F> = <var:D> $ ahead of executing our series of instructions , it follows that we have $ <var:b> = <nat:8> \cdot <var:D> + <nat:2> $ once code segment has executed . \end{theorem} \begin{proof} Using Hoare logic gives : \begin{eqnarray} \{ <var:F> = <var:D> \} \\ <var:R0> := <nat:2> ; \\ \{ <var:F> = <var:D> \land <var:R0> = <nat:2> \} \\ <var:R1> := <nat:8> ; \\ \{ <var:F> = <var:D> \land <var:R0> = <nat:2> \land <var:R1> = <nat:8> \} \\ <var:R1> := <var:R1> * <var:F> ; \\ \{ <var:F> = <var:D> \land <var:R0> = <nat:2> \land <var:R1> = <nat:8> \cdot <var:D> \} \\ <var:b> := <var:R1> ; \\ \{ <var:F> = <var:D> \land <var:R0> = <nat:2> \land <var:b> = <nat:8> \cdot <var:D> \} \\ <var:b> := <var:b> + <var:R0> \\ \{ <var:F> = <var:D> \land <var:b> = <nat:8> \cdot <var:D> + <nat:2> \} \end{eqnarray} Given the above , the list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:F> = <var:D> }} <var:R0> := <nat:2> ; <var:R1> := <nat:8> ; <var:R1> := <var:R1> * <var:F> ; <var:b> := <var:R1> ; <var:b> := <var:b> + <var:R0> {{ <var:b> = <nat:8> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:R0> = <nat:2> /\ <var:R1> = <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:R0> = <nat:2> /\ <var:b> = <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:D> /\ <var:b> = <nat:8> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 