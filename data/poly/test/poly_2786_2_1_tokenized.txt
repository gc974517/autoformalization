\begin{document} \begin{theorem} Define the following series of instructions as \begin{verbatim} <var:C0> := <nat:7> ; <var:m> := <var:C0> \end{verbatim} Allow , with some $ <var:d> \in \mathbb{Z}^+ $ , it to hold that $ <var:h> = <var:d> $ prior to the execution of our list of instructions it holds that $ <var:m> = <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:d> \} \\ <var:C0> := <nat:7> ; \\ \{ <var:h> = <var:d> \land <var:C0> = <nat:7> \} \\ <var:m> := <var:C0> \\ \{ <var:h> = <var:d> \land <var:m> = <nat:7> \} \end{eqnarray} Applying standard Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:h> = <var:d> }} <var:C0> := <nat:7> ; <var:m> := <var:C0> {{ <var:m> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:d> /\ <var:C0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:d> /\ <var:m> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 