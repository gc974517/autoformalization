\begin{document} \begin{theorem} Define a list of instructions : \begin{verbatim} <var:u> := <nat:4> ; <var:u> := <nat:2> + <var:u> * <var:F> ; <var:u> := <nat:3> + <var:u> * <var:F> ; <var:u> := <nat:4> + <var:u> * <var:F> \end{verbatim} Allow that $ <var:F> = <var:r> $ ahead of running this code , it holds that we have $ <var:u> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:2> \cdot <var:r> ^ <nat:2> + <nat:3> \cdot <var:r> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this code can be accomplished by standard Hoare techniques . Moving on to the proceeding lines of codeseen in the set of commands , \verb | { <var:F> = <var:r> } <var:u> := <nat:4> { <var:F> = <var:r> \land <var:u> = <nat:4> } | and \verb | { <var:F> = <var:r> \land <var:u> = <nat:4> } <var:u> := <nat:2> + <var:u> * <var:F> { <var:F> = <var:r> \land <var:u> = <nat:4> \cdot <var:r> + <nat:2> } | . Advancing to the next lines in our series of commands , we have \verb | { <var:F> = <var:r> } <var:u> := <nat:4> { <var:F> = <var:r> \land <var:u> = <nat:4> } | and \verb | { <var:F> = <var:r> \land <var:u> = <nat:4> } <var:u> := <nat:2> + <var:u> * <var:F> { <var:F> = <var:r> \land <var:u> = <nat:4> \cdot <var:r> + <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:F> = <var:r> }} <var:u> := <nat:4> ; <var:u> := <nat:2> + <var:u> * <var:F> ; <var:u> := <nat:3> + <var:u> * <var:F> ; <var:u> := <nat:4> + <var:u> * <var:F> {{ <var:u> = <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:u> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:u> = <nat:4> * <var:r> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:u> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:r> /\ <var:u> = <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:3> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 