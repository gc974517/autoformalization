\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r1> := <var:F> ; <var:r2> := <var:r1> * <var:F> ; <var:r3> := <var:r2> * <var:F> ; <var:r4> := <var:r3> * <var:F> ; <var:r0> := <nat:6> ; <var:r2> := <var:r2> * <nat:5> ; <var:r3> := <var:r3> * <nat:8> ; <var:r4> := <var:r4> * <nat:6> ; <var:V> := <var:r4> <var:V> := <var:V> + <var:r3> <var:V> := <var:V> + <var:r2> <var:V> := <var:V> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:F> = <var:N> $ prior to the execution of the list of commands , it holds that $ <var:V> = <nat:6> \times <var:N> ^ <nat:4> + <nat:8> \times <var:N> ^ <nat:3> + <nat:5> \times <var:N> ^ <nat:2> + <nat:6> $ once code has executed . \end{theorem} \begin{proof} The proof of the set of instructions can be shown using Hoare reasoning . Advancing to the next step , we have the variable binding command letting $ <var:F> $ to $ <var:r1>$ . This line advances $ \{ <var:F> = <var:N> \} $ into $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \} $ . This is sound through the assignment rule defined in usual Hoare logic . Moving forward to the upcoming piece of code in our list of instructions , we have the variable binding statement \verb | <var:r2> := <var:r1> * <var:F> ; | . This advances the condition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \} $ as $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <var:N> ^ <nat:2> \} $ . Next , we see the variable assignmet command yielding $ <var:r2> * <var:F> $ into $ <var:r3>$ . This code moves the condition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <var:N> ^ <nat:2> \} $ to the postcondition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <var:N> ^ <nat:2> \land <var:r3> = <var:N> ^ <nat:3> \} $ . Jumping to the proceeding piece of code in the code , we see the variable update line letting $ <var:r3> * <var:F> $ into $ <var:r4>$ . This redefines the precondition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <var:N> ^ <nat:2> \land <var:r3> = <var:N> ^ <nat:3> \} $ into the condition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <var:N> ^ <nat:2> \land <var:r3> = <var:N> ^ <nat:3> \land <var:r4> = <var:N> ^ <nat:4> \} $ . Considering the next bit of code in the set of commands , the variable binding statement yielding $ <nat:6> $ to $ <var:r0>$ . This advances the condition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <var:N> ^ <nat:2> \land <var:r3> = <var:N> ^ <nat:3> \land <var:r4> = <var:N> ^ <nat:4> \} $ as the postcondition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <var:N> ^ <nat:2> \land <var:r3> = <var:N> ^ <nat:3> \land <var:r4> = <var:N> ^ <nat:4> \land <var:r0> = <nat:6> \} $ . This is given using the assignment inference rule obtained from standard Hoare reasoning . Following , we see the variable update statement \verb | <var:r2> := <var:r2> * <nat:5> ; | . This redefines $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <var:N> ^ <nat:2> \land <var:r3> = <var:N> ^ <nat:3> \land <var:r4> = <var:N> ^ <nat:4> \land <var:r0> = <nat:6> \} $ toward the postcondition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:r3> = <var:N> ^ <nat:3> \land <var:r4> = <var:N> ^ <nat:4> \land <var:r0> = <nat:6> \} $ . Stepping through , we have the variable assignmet command letting $ <var:r3> * <nat:8> $ into $ <var:r3>$ . This statement transfers the precondition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:r3> = <var:N> ^ <nat:3> \land <var:r4> = <var:N> ^ <nat:4> \land <var:r0> = <nat:6> \} $ as the postcondition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:r3> = <nat:8> \times <var:N> ^ <nat:3> \land <var:r4> = <var:N> ^ <nat:4> \land <var:r0> = <nat:6> \} $ . This is shown with the assignment rule found in Hoare reasoning . Moving forward , we have the variable update statement \verb | <var:r4> := <var:r4> * <nat:6> ; | . This command advances the condition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:r3> = <nat:8> \times <var:N> ^ <nat:3> \land <var:r4> = <var:N> ^ <nat:4> \land <var:r0> = <nat:6> \} $ into the postcondition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:r3> = <nat:8> \times <var:N> ^ <nat:3> \land <var:r4> = <nat:6> \times <var:N> ^ <nat:4> \land <var:r0> = <nat:6> \} $ . This is known to be sound by the assignment rule defined by usual Hoare techniques . Taking another step toward the following line contained in our list of instructions , the binding code binding $ <var:r4$ as $ <var:V>$ . This code moves $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:r3> = <nat:8> \times <var:N> ^ <nat:3> \land <var:r4> = <nat:6> \times <var:N> ^ <nat:4> \land <var:r0> = <nat:6> \} $ into $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:r3> = <nat:8> \times <var:N> ^ <nat:3> \land <var:r0> = <nat:6> \land <var:V> = <nat:6> \times <var:N> ^ <nat:4> \} $ . This is deduced with the assignment law given by Hoare logic . Paying attention to the subsequent line contained in the set of instructions , we have the assignment command assigning $ <var:V> + <var:r3$ into $ <var:V>$ . This transfers the precondition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:r3> = <nat:8> \times <var:N> ^ <nat:3> \land <var:r0> = <nat:6> \land <var:V> = <nat:6> \times <var:N> ^ <nat:4> \} $ toward the condition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:r0> = <nat:6> \land <var:V> = <nat:6> \times <var:N> ^ <nat:4> + <nat:8> \times <var:N> ^ <nat:3> \} $ . Keeping momentum , the variable binding code defining $ <var:V> + <var:r2$ into $ <var:V>$ . This moves the precondition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r2> = <nat:5> \times <var:N> ^ <nat:2> \land <var:r0> = <nat:6> \land <var:V> = <nat:6> \times <var:N> ^ <nat:4> + <nat:8> \times <var:N> ^ <nat:3> \} $ into the postcondition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r0> = <nat:6> \land <var:V> = <nat:6> \times <var:N> ^ <nat:4> + <nat:8> \times <var:N> ^ <nat:3> + <nat:5> \times <var:N> ^ <nat:2> \} $ . Moving forward , we see the statement \verb | <var:V> := <var:V> + <var:r0> | . This moves the condition $ \{ <var:F> = <var:N> \land <var:r1> = <var:N> \land <var:r0> = <nat:6> \land <var:V> = <nat:6> \times <var:N> ^ <nat:4> + <nat:8> \times <var:N> ^ <nat:3> + <nat:5> \times <var:N> ^ <nat:2> \} $ to the condition $ \{ <var:F> = <var:N> \land <var:V> = <nat:6> \times <var:N> ^ <nat:4> + <nat:8> \times <var:N> ^ <nat:3> + <nat:5> \times <var:N> ^ <nat:2> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <var:r4> : string := " <var:r4> " . Definition <def:poly> := <var:r1> := <var:F> ; <var:r2> := <var:r1> * <var:F> ; <var:r3> := <var:r2> * <var:F> ; <var:r4> := <var:r3> * <var:F> ; <var:r0> := <nat:6> ; <var:r2> := <var:r2> * <nat:5> ; <var:r3> := <var:r3> * <nat:8> ; <var:r4> := <var:r4> * <nat:6> ; <var:V> := <var:r4> <var:V> := <var:V> + <var:r3> <var:V> := <var:V> + <var:r2> <var:V> := <var:V> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:F> = <var:N> }} <def:poly> {{ <var:V> = <nat:6> * <var:N> ^ <nat:4> + <nat:8> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:r1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:r1> = <var:N> /\ <var:r2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:r1> = <var:N> /\ <var:r2> = <var:N> ^ <nat:2> /\ <var:r3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:r1> = <var:N> /\ <var:r2> = <var:N> ^ <nat:2> /\ <var:r3> = <var:N> ^ <nat:3> /\ <var:r4> = <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:r1> = <var:N> /\ <var:r2> = <var:N> ^ <nat:2> /\ <var:r3> = <var:N> ^ <nat:3> /\ <var:r4> = <var:N> ^ <nat:4> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:r1> = <var:N> /\ <var:r2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:r3> = <var:N> ^ <nat:3> /\ <var:r4> = <var:N> ^ <nat:4> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:r1> = <var:N> /\ <var:r2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:r3> = <nat:8> * <var:N> ^ <nat:3> /\ <var:r4> = <var:N> ^ <nat:4> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:r1> = <var:N> /\ <var:r2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:r3> = <nat:8> * <var:N> ^ <nat:3> /\ <var:r4> = <nat:6> * <var:N> ^ <nat:4> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:r1> = <var:N> /\ <var:r2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:r3> = <nat:8> * <var:N> ^ <nat:3> /\ <var:r0> = <nat:6> /\ <var:V> = <nat:6> * <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:r1> = <var:N> /\ <var:r2> = <nat:5> * <var:N> ^ <nat:2> /\ <var:r0> = <nat:6> /\ <var:V> = <nat:6> * <var:N> ^ <nat:4> + <nat:8> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:r1> = <var:N> /\ <var:r0> = <nat:6> /\ <var:V> = <nat:6> * <var:N> ^ <nat:4> + <nat:8> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:V> = <nat:6> * <var:N> ^ <nat:4> + <nat:8> * <var:N> ^ <nat:3> + <nat:5> * <var:N> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 