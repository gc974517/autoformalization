\begin{document} \begin{theorem} Take a list of instructions : \begin{verbatim} <var:v1> := <var:A> ; <var:v2> := <var:v1> * <var:A> ; <var:v3> := <var:v2> * <var:A> ; <var:v0> := <nat:6> ; <var:v1> := <var:v1> * <nat:7> ; <var:v2> := <var:v2> * <nat:3> ; <var:v3> := <var:v3> * <nat:9> ; <var:X> := <var:v3> <var:X> := <var:X> + <var:v2> <var:X> := <var:X> + <var:v1> <var:X> := <var:X> + <var:v0> \end{verbatim} Allow that we have $ <var:A> = <var:H> $ before interpreting the code , it holds that we have $ <var:X> = <nat:9> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:7> \times <var:H> + <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of instructions is demonstrated using Hoare reasoning . Observing the next lines contained in the list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:A> = <var:H> \} & <var:v1> := <var:A> & \{ <var:A> = <var:H> \land <var:v1> = <var:H> \} \\ \{ <var:A> = <var:H> \land <var:v1> = <var:H> \} & <var:v2> := <var:v1> * <var:A> & \{ <var:A> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \} \\ \{ <var:A> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \} & <var:v3> := <var:v2> * <var:A> & \{ <var:A> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \} \\ \{ <var:A> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \} & <var:v0> := <nat:6> & \{ <var:A> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:6> \} \\ \{ <var:A> = <var:H> \land <var:v1> = <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:6> \} & <var:v1> := <var:v1> * <nat:7> & \{ <var:A> = <var:H> \land <var:v1> = <nat:7> \times <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:6> \} \\ \{ <var:A> = <var:H> \land <var:v1> = <nat:7> \times <var:H> \land <var:v2> = <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:6> \} & <var:v2> := <var:v2> * <nat:3> & \{ <var:A> = <var:H> \land <var:v1> = <nat:7> \times <var:H> \land <var:v2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:6> \} \\ \{ <var:A> = <var:H> \land <var:v1> = <nat:7> \times <var:H> \land <var:v2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:v3> = <var:H> ^ <nat:3> \land <var:v0> = <nat:6> \} & <var:v3> := <var:v3> * <nat:9> & \{ <var:A> = <var:H> \land <var:v1> = <nat:7> \times <var:H> \land <var:v2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:v3> = <nat:9> \times <var:H> ^ <nat:3> \land <var:v0> = <nat:6> \} \\ \{ <var:A> = <var:H> \land <var:v1> = <nat:7> \times <var:H> \land <var:v2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:v3> = <nat:9> \times <var:H> ^ <nat:3> \land <var:v0> = <nat:6> \} & <var:X> := <var:v3& \{ <var:A> = <var:H> \land <var:v1> = <nat:7> \times <var:H> \land <var:v2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:v0> = <nat:6> \land <var:X> = <nat:9> \times <var:H> ^ <nat:3> \} \\ \{ <var:A> = <var:H> \land <var:v1> = <nat:7> \times <var:H> \land <var:v2> = <nat:3> \times <var:H> ^ <nat:2> \land <var:v0> = <nat:6> \land <var:X> = <nat:9> \times <var:H> ^ <nat:3> \} & <var:X> := <var:X> + <var:v2& \{ <var:A> = <var:H> \land <var:v1> = <nat:7> \times <var:H> \land <var:v0> = <nat:6> \land <var:X> = <nat:9> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> \} \\ \{ <var:A> = <var:H> \land <var:v1> = <nat:7> \times <var:H> \land <var:v0> = <nat:6> \land <var:X> = <nat:9> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> \} & <var:X> := <var:X> + <var:v1& \{ <var:A> = <var:H> \land <var:v0> = <nat:6> \land <var:X> = <nat:9> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:7> \times <var:H> \} \end{tabular} Observing the proceeding piece of code found in our series of instructions , we see \[ \begin{tabular} {rcl} \{ <var:A> = <var:H> \} & <var:v1> := <var:A> & \{ <var:A> = <var:H> \land <var:v1> = <var:H> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:A> = <var:H> }} <var:v1> := <var:A> ; <var:v2> := <var:v1> * <var:A> ; <var:v3> := <var:v2> * <var:A> ; <var:v0> := <nat:6> ; <var:v1> := <var:v1> * <nat:7> ; <var:v2> := <var:v2> * <nat:3> ; <var:v3> := <var:v3> * <nat:9> ; <var:X> := <var:v3> <var:X> := <var:X> + <var:v2> <var:X> := <var:X> + <var:v1> <var:X> := <var:X> + <var:v0> {{ <var:X> = <nat:9> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:7> * <var:H> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:v1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:v1> = <var:H> /\ <var:v2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:v1> = <var:H> /\ <var:v2> = <var:H> ^ <nat:2> /\ <var:v3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:v1> = <var:H> /\ <var:v2> = <var:H> ^ <nat:2> /\ <var:v3> = <var:H> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:v1> = <nat:7> * <var:H> /\ <var:v2> = <var:H> ^ <nat:2> /\ <var:v3> = <var:H> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:v1> = <nat:7> * <var:H> /\ <var:v2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:v3> = <var:H> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:v1> = <nat:7> * <var:H> /\ <var:v2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:v3> = <nat:9> * <var:H> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:v1> = <nat:7> * <var:H> /\ <var:v2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:v0> = <nat:6> /\ <var:X> = <nat:9> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:v1> = <nat:7> * <var:H> /\ <var:v0> = <nat:6> /\ <var:X> = <nat:9> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:v0> = <nat:6> /\ <var:X> = <nat:9> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:H> /\ <var:X> = <nat:9> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:7> * <var:H> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 