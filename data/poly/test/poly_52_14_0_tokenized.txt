\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Y0> := <nat:3> ; <var:Y1> := <nat:9> ; <var:Y1> := <var:Y1> * <var:S> ; <var:Y2> := <nat:1> ; <var:Y2> := <var:Y2> * <var:S> ; <var:Y2> := <var:Y2> * <var:S> ; <var:Y3> := <nat:1> ; <var:Y3> := <var:Y3> * <var:S> ; <var:Y3> := <var:Y3> * <var:S> ; <var:Y3> := <var:Y3> * <var:S> ; <var:p> := <var:Y3> ; <var:p> := <var:p> + <var:Y2> ; <var:p> := <var:p> + <var:Y1> ; <var:p> := <var:p> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Allow $ <var:S> = <var:C> $ ahead of interpreting the list of instructions , it follows that we see $ <var:p> = <nat:1> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:9> \times <var:C> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:C> \} \\ <var:Y0> := <nat:3> ; \\ \{ <var:S> = <var:C> \land <var:Y0> = <nat:3> \} \\ <var:Y1> := <nat:9> ; \\ \{ <var:S> = <var:C> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:9> \} \\ <var:Y1> := <var:Y1> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:9> \times <var:C> \} \\ <var:Y2> := <nat:1> ; \\ \{ <var:S> = <var:C> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:9> \times <var:C> \land <var:Y2> = <nat:1> \} \\ <var:Y2> := <var:Y2> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:9> \times <var:C> \land <var:Y2> = <nat:1> \times <var:C> \} \\ <var:Y2> := <var:Y2> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:9> \times <var:C> \land <var:Y2> = <nat:1> \times <var:C> ^ <nat:2> \} \\ <var:Y3> := <nat:1> ; \\ \{ <var:S> = <var:C> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:9> \times <var:C> \land <var:Y2> = <nat:1> \times <var:C> ^ <nat:2> \land <var:Y3> = <nat:1> \} \\ <var:Y3> := <var:Y3> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:9> \times <var:C> \land <var:Y2> = <nat:1> \times <var:C> ^ <nat:2> \land <var:Y3> = <nat:1> \times <var:C> \} \\ <var:Y3> := <var:Y3> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:9> \times <var:C> \land <var:Y2> = <nat:1> \times <var:C> ^ <nat:2> \land <var:Y3> = <nat:1> \times <var:C> ^ <nat:2> \} \\ <var:Y3> := <var:Y3> * <var:S> ; \\ \{ <var:S> = <var:C> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:9> \times <var:C> \land <var:Y2> = <nat:1> \times <var:C> ^ <nat:2> \land <var:Y3> = <nat:1> \times <var:C> ^ <nat:3> \} \\ <var:p> := <var:Y3> ; \\ \{ <var:S> = <var:C> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:9> \times <var:C> \land <var:Y2> = <nat:1> \times <var:C> ^ <nat:2> \land <var:p> = <nat:1> \times <var:C> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:Y2> ; \\ \{ <var:S> = <var:C> \land <var:Y0> = <nat:3> \land <var:Y1> = <nat:9> \times <var:C> \land <var:p> = <nat:1> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:Y1> ; \\ \{ <var:S> = <var:C> \land <var:Y0> = <nat:3> \land <var:p> = <nat:1> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:9> \times <var:C> \} \\ <var:p> := <var:p> + <var:Y0> \\ \{ <var:S> = <var:C> \land <var:p> = <nat:1> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:9> \times <var:C> + <nat:3> \} \end{eqnarray} Using typical Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Definition <def:poly> := <var:Y0> := <nat:3> ; <var:Y1> := <nat:9> ; <var:Y1> := <var:Y1> * <var:S> ; <var:Y2> := <nat:1> ; <var:Y2> := <var:Y2> * <var:S> ; <var:Y2> := <var:Y2> * <var:S> ; <var:Y3> := <nat:1> ; <var:Y3> := <var:Y3> * <var:S> ; <var:Y3> := <var:Y3> * <var:S> ; <var:Y3> := <var:Y3> * <var:S> ; <var:p> := <var:Y3> ; <var:p> := <var:p> + <var:Y2> ; <var:p> := <var:p> + <var:Y1> ; <var:p> := <var:p> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:S> = <var:C> }} <def:poly> {{ <var:p> = <nat:1> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:9> * <var:C> /\ <var:Y2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:9> * <var:C> /\ <var:Y2> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:9> * <var:C> /\ <var:Y2> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:9> * <var:C> /\ <var:Y2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:Y3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:9> * <var:C> /\ <var:Y2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:Y3> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:9> * <var:C> /\ <var:Y2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:Y3> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:9> * <var:C> /\ <var:Y2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:Y3> = <nat:1> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:9> * <var:C> /\ <var:Y2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:p> = <nat:1> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Y0> = <nat:3> /\ <var:Y1> = <nat:9> * <var:C> /\ <var:p> = <nat:1> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:Y0> = <nat:3> /\ <var:p> = <nat:1> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:p> = <nat:1> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 