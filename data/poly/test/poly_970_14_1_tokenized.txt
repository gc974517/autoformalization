\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} : \begin{verbatim} <var:w1> := <var:H> ; <var:w2> := <var:w1> * <var:H> ; <var:w3> := <var:w2> * <var:H> ; <var:w4> := <var:w3> * <var:H> ; <var:w0> := <nat:9> ; <var:w1> := <var:w1> * <nat:6> ; <var:w2> := <var:w2> * <nat:3> ; <var:w3> := <var:w3> * <nat:2> ; <var:w4> := <var:w4> * <nat:3> ; <var:y> := <var:w4> <var:y> := <var:y> + <var:w3> <var:y> := <var:y> + <var:w2> <var:y> := <var:y> + <var:w1> <var:y> := <var:y> + <var:w0> \end{verbatim} Assume that we have $ <var:H> = <var:M> $ --- for some $ <var:M> \in \mathbb{Z}^+ $ --- before the execution of the code , it must be that we see $ <var:y> = <nat:3> \cdot <var:M> ^ <nat:4> + <nat:2> \cdot <var:M> ^ <nat:3> + <nat:3> \cdot <var:M> ^ <nat:2> + <nat:6> \cdot <var:M> + <nat:9> $ once series of commands has finished executing . \end{theorem} \begin{proof} The flow of logic for the set of commands is accomplished with standard Hoare logic . Focusing on the subsequent piece of code seen in our segment of code , we see the variable binding line \verb | <var:w1> := <var:H> ; | . This takes the condition $ \{ <var:H> = <var:M> \} $ to the postcondition $ \{ <var:H> = <var:M> \land <var:w1> = <var:M> \} $ . Moving on to the subsequent statement contained in our program , the variable assignmet statement \verb | <var:w2> := <var:w1> * <var:H> ; | . This advances the precondition $ \{ <var:H> = <var:M> \land <var:w1> = <var:M> \} $ to the postcondition $ \{ <var:H> = <var:M> \land <var:w1> = <var:M> \land <var:w2> = <var:M> ^ <nat:2> \} $ . This is shown with the assignment scheme defined in standard Hoare logic . Keeping momentum , the variable assignmet statement \verb | <var:w3> := <var:w2> * <var:H> ; | . This moves the precondition $ \{ <var:H> = <var:M> \land <var:w1> = <var:M> \land <var:w2> = <var:M> ^ <nat:2> \} $ toward the condition $ \{ <var:H> = <var:M> \land <var:w1> = <var:M> \land <var:w2> = <var:M> ^ <nat:2> \land <var:w3> = <var:M> ^ <nat:3> \} $ . Advancing , we have the variable update line \verb | <var:w4> := <var:w3> * <var:H> ; | . This statement advances $ \{ <var:H> = <var:M> \land <var:w1> = <var:M> \land <var:w2> = <var:M> ^ <nat:2> \land <var:w3> = <var:M> ^ <nat:3> \} $ toward $ \{ <var:H> = <var:M> \land <var:w1> = <var:M> \land <var:w2> = <var:M> ^ <nat:2> \land <var:w3> = <var:M> ^ <nat:3> \land <var:w4> = <var:M> ^ <nat:4> \} $ . Observing the following bit of code in the code , we have the binding command yielding $ <nat:9> $ toward $ <var:w0>$ . This statement advances the precondition $ \{ <var:H> = <var:M> \land <var:w1> = <var:M> \land <var:w2> = <var:M> ^ <nat:2> \land <var:w3> = <var:M> ^ <nat:3> \land <var:w4> = <var:M> ^ <nat:4> \} $ to $ \{ <var:H> = <var:M> \land <var:w1> = <var:M> \land <var:w2> = <var:M> ^ <nat:2> \land <var:w3> = <var:M> ^ <nat:3> \land <var:w4> = <var:M> ^ <nat:4> \land <var:w0> = <nat:9> \} $ . This is ensured using the assignment law found in typical Hoare logic . Moving forward to the next step , the variable assignmet command yielding $ <var:w1> * <nat:6> $ to $ <var:w1>$ . This statement redefines the condition $ \{ <var:H> = <var:M> \land <var:w1> = <var:M> \land <var:w2> = <var:M> ^ <nat:2> \land <var:w3> = <var:M> ^ <nat:3> \land <var:w4> = <var:M> ^ <nat:4> \land <var:w0> = <nat:9> \} $ into the postcondition $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w2> = <var:M> ^ <nat:2> \land <var:w3> = <var:M> ^ <nat:3> \land <var:w4> = <var:M> ^ <nat:4> \land <var:w0> = <nat:9> \} $ . This is known to be sound using the assignment inference rule obtained from standard Hoare logic . Going to the next step , the variable binding code \verb | <var:w2> := <var:w2> * <nat:3> ; | . This redefines $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w2> = <var:M> ^ <nat:2> \land <var:w3> = <var:M> ^ <nat:3> \land <var:w4> = <var:M> ^ <nat:4> \land <var:w0> = <nat:9> \} $ toward $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w2> = <nat:3> * <var:M> ^ <nat:2> \land <var:w3> = <var:M> ^ <nat:3> \land <var:w4> = <var:M> ^ <nat:4> \land <var:w0> = <nat:9> \} $ . Moving forward to the next step , we see the variable assignmet command assigning $ <var:w3> * <nat:2> $ to $ <var:w3>$ . This command takes $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w2> = <nat:3> * <var:M> ^ <nat:2> \land <var:w3> = <var:M> ^ <nat:3> \land <var:w4> = <var:M> ^ <nat:4> \land <var:w0> = <nat:9> \} $ into the condition $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w2> = <nat:3> * <var:M> ^ <nat:2> \land <var:w3> = <nat:2> * <var:M> ^ <nat:3> \land <var:w4> = <var:M> ^ <nat:4> \land <var:w0> = <nat:9> \} $ . This is deduced through the assignment scheme defined by usual Hoare logic . Stepping through , we see the variable binding command defining $ <var:w4> * <nat:3> $ to $ <var:w4>$ . This redefines the condition $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w2> = <nat:3> * <var:M> ^ <nat:2> \land <var:w3> = <nat:2> * <var:M> ^ <nat:3> \land <var:w4> = <var:M> ^ <nat:4> \land <var:w0> = <nat:9> \} $ as $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w2> = <nat:3> * <var:M> ^ <nat:2> \land <var:w3> = <nat:2> * <var:M> ^ <nat:3> \land <var:w4> = <nat:3> * <var:M> ^ <nat:4> \land <var:w0> = <nat:9> \} $ . This is given by the assignment scheme defined by usual Hoare techniques . Now , we see the environment update code \verb | <var:y> := <var:w4> | . This code forwards the precondition $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w2> = <nat:3> * <var:M> ^ <nat:2> \land <var:w3> = <nat:2> * <var:M> ^ <nat:3> \land <var:w4> = <nat:3> * <var:M> ^ <nat:4> \land <var:w0> = <nat:9> \} $ to the condition $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w2> = <nat:3> * <var:M> ^ <nat:2> \land <var:w3> = <nat:2> * <var:M> ^ <nat:3> \land <var:w0> = <nat:9> \land <var:y> = <nat:3> * <var:M> ^ <nat:4> \} $ . This is given by the assignment inference rule defined by standard Hoare reasoning . Moving onward , the environment update code letting $ <var:y> + <var:w3$ to $ <var:y>$ . This line takes the precondition $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w2> = <nat:3> * <var:M> ^ <nat:2> \land <var:w3> = <nat:2> * <var:M> ^ <nat:3> \land <var:w0> = <nat:9> \land <var:y> = <nat:3> * <var:M> ^ <nat:4> \} $ into the condition $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w2> = <nat:3> * <var:M> ^ <nat:2> \land <var:w0> = <nat:9> \land <var:y> = <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> \} $ . Moving forward to the next step , we have the variable update statement \verb | <var:y> := <var:y> + <var:w2> | . This redefines the precondition $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w2> = <nat:3> * <var:M> ^ <nat:2> \land <var:w0> = <nat:9> \land <var:y> = <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> \} $ as the postcondition $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w0> = <nat:9> \land <var:y> = <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> \} $ . Taking another step toward the subsequent bit of code contained in our segment of code , we have the variable assignmet code \verb | <var:y> := <var:y> + <var:w1> | . This takes the condition $ \{ <var:H> = <var:M> \land <var:w1> = <nat:6> * <var:M> \land <var:w0> = <nat:9> \land <var:y> = <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> \} $ as $ \{ <var:H> = <var:M> \land <var:w0> = <nat:9> \land <var:y> = <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:6> * <var:M> \} $ . This is deduced using the assignment inference rule defined in typical Hoare logic . Moving onward , the line \verb | <var:y> := <var:y> + <var:w0> | . This command advances the condition $ \{ <var:H> = <var:M> \land <var:w0> = <nat:9> \land <var:y> = <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:6> * <var:M> \} $ into the condition $ \{ <var:H> = <var:M> \land <var:y> = <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:6> * <var:M> + <nat:9> \} $ . This is ensured by the assignment rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Definition <var:w4> : string := " <var:w4> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:H> = <var:M> }} <var:w1> := <var:H> ; <var:w2> := <var:w1> * <var:H> ; <var:w3> := <var:w2> * <var:H> ; <var:w4> := <var:w3> * <var:H> ; <var:w0> := <nat:9> ; <var:w1> := <var:w1> * <nat:6> ; <var:w2> := <var:w2> * <nat:3> ; <var:w3> := <var:w3> * <nat:2> ; <var:w4> := <var:w4> * <nat:3> ; <var:y> := <var:w4> <var:y> := <var:y> + <var:w3> <var:y> := <var:y> + <var:w2> <var:y> := <var:y> + <var:w1> <var:y> := <var:y> + <var:w0> {{ <var:y> = <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:6> * <var:M> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:w1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:w1> = <var:M> /\ <var:w2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:w1> = <var:M> /\ <var:w2> = <var:M> ^ <nat:2> /\ <var:w3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:w1> = <var:M> /\ <var:w2> = <var:M> ^ <nat:2> /\ <var:w3> = <var:M> ^ <nat:3> /\ <var:w4> = <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:w1> = <var:M> /\ <var:w2> = <var:M> ^ <nat:2> /\ <var:w3> = <var:M> ^ <nat:3> /\ <var:w4> = <var:M> ^ <nat:4> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:w1> = <nat:6> * <var:M> /\ <var:w2> = <var:M> ^ <nat:2> /\ <var:w3> = <var:M> ^ <nat:3> /\ <var:w4> = <var:M> ^ <nat:4> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:w1> = <nat:6> * <var:M> /\ <var:w2> = <nat:3> * <var:M> ^ <nat:2> /\ <var:w3> = <var:M> ^ <nat:3> /\ <var:w4> = <var:M> ^ <nat:4> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:w1> = <nat:6> * <var:M> /\ <var:w2> = <nat:3> * <var:M> ^ <nat:2> /\ <var:w3> = <nat:2> * <var:M> ^ <nat:3> /\ <var:w4> = <var:M> ^ <nat:4> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:w1> = <nat:6> * <var:M> /\ <var:w2> = <nat:3> * <var:M> ^ <nat:2> /\ <var:w3> = <nat:2> * <var:M> ^ <nat:3> /\ <var:w4> = <nat:3> * <var:M> ^ <nat:4> /\ <var:w0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:w1> = <nat:6> * <var:M> /\ <var:w2> = <nat:3> * <var:M> ^ <nat:2> /\ <var:w3> = <nat:2> * <var:M> ^ <nat:3> /\ <var:w0> = <nat:9> /\ <var:y> = <nat:3> * <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:w1> = <nat:6> * <var:M> /\ <var:w2> = <nat:3> * <var:M> ^ <nat:2> /\ <var:w0> = <nat:9> /\ <var:y> = <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:w1> = <nat:6> * <var:M> /\ <var:w0> = <nat:9> /\ <var:y> = <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:w0> = <nat:9> /\ <var:y> = <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:6> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:M> /\ <var:y> = <nat:3> * <var:M> ^ <nat:4> + <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:6> * <var:M> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 