\begin{document} \begin{theorem} Consider a list of commands as \begin{verbatim} <var:c1> := <var:E> ; <var:c2> := <var:c1> * <var:E> ; <var:c0> := <nat:6> ; <var:c1> := <var:c1> * <nat:9> ; <var:c2> := <var:c2> * <nat:4> ; <var:o> := <var:c2> <var:o> := <var:o> + <var:c1> <var:o> := <var:o> + <var:c0> \end{verbatim} Allow that $ <var:E> = <var:m> $ prior to executing this set of instructions , then we have $ <var:o> = <nat:4> \cdot <var:m> ^ <nat:2> + <nat:9> \cdot <var:m> + <nat:6> $ once set of instructions has exited . \end{theorem} \begin{proof} The course of logic for this code segment can be given through Hoare logic . Stepping forward , we have the statement letting $ <var:E> $ toward $ <var:c1>$ . This moves $ \{ <var:E> = <var:m> \} $ toward the condition $ \{ <var:E> = <var:m> \land <var:c1> = <var:m> \} $ . This is shown using the assignment inference rule from typical Hoare reasoning . Moving on , the environment update line giving $ <var:c1> * <var:E> $ toward $ <var:c2>$ . This statement advances $ \{ <var:E> = <var:m> \land <var:c1> = <var:m> \} $ as $ \{ <var:E> = <var:m> \land <var:c1> = <var:m> \land <var:c2> = <var:m> ^ <nat:2> \} $ . Observing the next line seen in our code , we see the variable assignmet command \verb | <var:c0> := <nat:6> ; | . This redefines the precondition $ \{ <var:E> = <var:m> \land <var:c1> = <var:m> \land <var:c2> = <var:m> ^ <nat:2> \} $ toward the postcondition $ \{ <var:E> = <var:m> \land <var:c1> = <var:m> \land <var:c2> = <var:m> ^ <nat:2> \land <var:c0> = <nat:6> \} $ . This is guaranteed through the assignment rule defined in typical Hoare logic . Moving forward to the upcoming bit of code found in the set of commands , we see the assignment line defining $ <var:c1> * <nat:9> $ to $ <var:c1>$ . This redefines $ \{ <var:E> = <var:m> \land <var:c1> = <var:m> \land <var:c2> = <var:m> ^ <nat:2> \land <var:c0> = <nat:6> \} $ toward the postcondition $ \{ <var:E> = <var:m> \land <var:c1> = <nat:9> * <var:m> \land <var:c2> = <var:m> ^ <nat:2> \land <var:c0> = <nat:6> \} $ . Moving forward , we see the variable binding statement defining $ <var:c2> * <nat:4> $ as $ <var:c2>$ . This statement advances the precondition $ \{ <var:E> = <var:m> \land <var:c1> = <nat:9> * <var:m> \land <var:c2> = <var:m> ^ <nat:2> \land <var:c0> = <nat:6> \} $ to the postcondition $ \{ <var:E> = <var:m> \land <var:c1> = <nat:9> * <var:m> \land <var:c2> = <nat:4> * <var:m> ^ <nat:2> \land <var:c0> = <nat:6> \} $ . This is ensured using the assignment law found in usual Hoare logic . Observing the following step contained in the series of commands , the variable update line \verb | <var:o> := <var:c2> | . This command moves the precondition $ \{ <var:E> = <var:m> \land <var:c1> = <nat:9> * <var:m> \land <var:c2> = <nat:4> * <var:m> ^ <nat:2> \land <var:c0> = <nat:6> \} $ toward the condition $ \{ <var:E> = <var:m> \land <var:c1> = <nat:9> * <var:m> \land <var:c0> = <nat:6> \land <var:o> = <nat:4> * <var:m> ^ <nat:2> \} $ . This is rigorously given using the assignment inference rule in standard Hoare reasoning . Moving forward to the next bit of code in the series of commands , the environment update line \verb | <var:o> := <var:o> + <var:c1> | . This statement forwards the condition $ \{ <var:E> = <var:m> \land <var:c1> = <nat:9> * <var:m> \land <var:c0> = <nat:6> \land <var:o> = <nat:4> * <var:m> ^ <nat:2> \} $ into the condition $ \{ <var:E> = <var:m> \land <var:c0> = <nat:6> \land <var:o> = <nat:4> * <var:m> ^ <nat:2> + <nat:9> * <var:m> \} $ . Taking a look at the subsequent statement seen in our code segment , we have the environment update command \verb | <var:o> := <var:o> + <var:c0> | . This line moves the precondition $ \{ <var:E> = <var:m> \land <var:c0> = <nat:6> \land <var:o> = <nat:4> * <var:m> ^ <nat:2> + <nat:9> * <var:m> \} $ as $ \{ <var:E> = <var:m> \land <var:o> = <nat:4> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:6> \} $ . This is guaranteed through the assignment inference rule defined by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:E> = <var:m> }} <var:c1> := <var:E> ; <var:c2> := <var:c1> * <var:E> ; <var:c0> := <nat:6> ; <var:c1> := <var:c1> * <nat:9> ; <var:c2> := <var:c2> * <nat:4> ; <var:o> := <var:c2> <var:o> := <var:o> + <var:c1> <var:o> := <var:o> + <var:c0> {{ <var:o> = <nat:4> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:c1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:c1> = <var:m> /\ <var:c2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:c1> = <var:m> /\ <var:c2> = <var:m> ^ <nat:2> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:c1> = <nat:9> * <var:m> /\ <var:c2> = <var:m> ^ <nat:2> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:c1> = <nat:9> * <var:m> /\ <var:c2> = <nat:4> * <var:m> ^ <nat:2> /\ <var:c0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:c1> = <nat:9> * <var:m> /\ <var:c0> = <nat:6> /\ <var:o> = <nat:4> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:c0> = <nat:6> /\ <var:o> = <nat:4> * <var:m> ^ <nat:2> + <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:o> = <nat:4> * <var:m> ^ <nat:2> + <nat:9> * <var:m> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 