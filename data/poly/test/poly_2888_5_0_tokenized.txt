\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:7> ; <var:G1> := <nat:7> ; <var:G1> := <var:G1> * <var:D> ; <var:t> := <var:G1> ; <var:t> := <var:t> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Allow that $ <var:D> = <var:q> $ --- given any whole numbers $ <var:q> $ --- ahead of evaluating the series of commands then $ <var:t> = <nat:7> \cdot <var:q> + <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions is accomplished with Hoare logic . After , we have \[ \begin{tabular} {rcl} \{ <var:D> = <var:q> \} & <var:G0> := <nat:7> & \{ <var:D> = <var:q> \land <var:G0> = <nat:7> \} \\ \{ <var:D> = <var:q> \land <var:G0> = <nat:7> \} & <var:G1> := <nat:7> & \{ <var:D> = <var:q> \land <var:G0> = <nat:7> \land <var:G1> = <nat:7> \} \\ \{ <var:D> = <var:q> \land <var:G0> = <nat:7> \land <var:G1> = <nat:7> \} & <var:G1> := <var:G1> * <var:D> & \{ <var:D> = <var:q> \land <var:G0> = <nat:7> \land <var:G1> = <nat:7> \cdot <var:q> \} \end{tabular} Taking a look at the next bits of codefound in our set of commands , \[ \begin{tabular} {rcl} \{ <var:D> = <var:q> \} & <var:G0> := <nat:7> & \{ <var:D> = <var:q> \land <var:G0> = <nat:7> \} \\ \{ <var:D> = <var:q> \land <var:G0> = <nat:7> \} & <var:G1> := <nat:7> & \{ <var:D> = <var:q> \land <var:G0> = <nat:7> \land <var:G1> = <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:7> ; <var:G1> := <nat:7> ; <var:G1> := <var:G1> * <var:D> ; <var:t> := <var:G1> ; <var:t> := <var:t> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:D> = <var:q> }} <def:poly> {{ <var:t> = <nat:7> * <var:q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:7> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:G0> = <nat:7> /\ <var:t> = <nat:7> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:q> /\ <var:t> = <nat:7> * <var:q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 