\begin{document} \begin{theorem} Let the following series of commands in \emph{Imp} as \begin{verbatim} <var:X0> := <nat:6> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:T> ; <var:X2> := <nat:6> ; <var:X2> := <var:X2> * <var:T> ; <var:X2> := <var:X2> * <var:T> ; <var:X3> := <nat:1> ; <var:X3> := <var:X3> * <var:T> ; <var:X3> := <var:X3> * <var:T> ; <var:X3> := <var:X3> * <var:T> ; <var:f> := <var:X3> ; <var:f> := <var:f> + <var:X2> ; <var:f> := <var:f> + <var:X1> ; <var:f> := <var:f> + <var:X0> \end{verbatim} Allowing that $ <var:T> = <var:m> $ prior to the execution of the series of commands then $ <var:f> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:6> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for our list of instructions can be seen with Hoare logic . Immediately following , we see \begin{eqnarray} \{ <var:T> = <var:m> \} \, <var:X0> := <nat:6> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \} \\ \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \} \, <var:X1> := <nat:3> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> \} \\ \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> \} \, <var:X1> := <var:X1> * <var:T> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> * <var:m> \} \\ \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> * <var:m> \} \, <var:X2> := <nat:6> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> * <var:m> \land <var:X2> = <nat:6> \} \\ \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> * <var:m> \land <var:X2> = <nat:6> \} \, <var:X2> := <var:X2> * <var:T> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> * <var:m> \land <var:X2> = <nat:6> * <var:m> \} \\ \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> * <var:m> \land <var:X2> = <nat:6> * <var:m> \} \, <var:X2> := <var:X2> * <var:T> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> * <var:m> \land <var:X2> = <nat:6> * <var:m> ^ <nat:2> \} \\ \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> * <var:m> \land <var:X2> = <nat:6> * <var:m> ^ <nat:2> \} \, <var:X3> := <nat:1> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> * <var:m> \land <var:X2> = <nat:6> * <var:m> ^ <nat:2> \land <var:X3> = <nat:1> \} \end{eqnarray} This is sound with the variable update inference rule defined in standard Hoare reasoning . Shifting focus toward the next statements found in the series of instructions , we see \begin{eqnarray} \{ <var:T> = <var:m> \} \, <var:X0> := <nat:6> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \} \\ \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \} \, <var:X1> := <nat:3> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> \} \\ \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> \} \, <var:X1> := <var:X1> * <var:T> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> * <var:m> \} \\ \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> * <var:m> \} \, <var:X2> := <nat:6> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> * <var:m> \land <var:X2> = <nat:6> \} \end{eqnarray} This is rigorously given with the variable assignmet rule given by typical Hoare techniques . Moving forward , we see \begin{eqnarray} \{ <var:T> = <var:m> \} \, <var:X0> := <nat:6> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \} \\ \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \} \, <var:X1> := <nat:3> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> \} \\ \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> \} \, <var:X1> := <var:X1> * <var:T> \, \{ <var:T> = <var:m> \land <var:X0> = <nat:6> \land <var:X1> = <nat:3> * <var:m> \} \end{eqnarray} This is shown to be logically sound with the variable assignmet law given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:T> = <var:m> }} <var:X0> := <nat:6> ; <var:X1> := <nat:3> ; <var:X1> := <var:X1> * <var:T> ; <var:X2> := <nat:6> ; <var:X2> := <var:X2> * <var:T> ; <var:X2> := <var:X2> * <var:T> ; <var:X3> := <nat:1> ; <var:X3> := <var:X3> * <var:T> ; <var:X3> := <var:X3> * <var:T> ; <var:X3> := <var:X3> * <var:T> ; <var:f> := <var:X3> ; <var:f> := <var:f> + <var:X2> ; <var:f> := <var:f> + <var:X1> ; <var:f> := <var:f> + <var:X0> {{ <var:f> = <nat:1> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:3> * <var:m> /\ <var:X2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:3> * <var:m> /\ <var:X2> = <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:3> * <var:m> /\ <var:X2> = <nat:6> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:3> * <var:m> /\ <var:X2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:X3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:3> * <var:m> /\ <var:X2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:X3> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:3> * <var:m> /\ <var:X2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:X3> = <nat:1> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:3> * <var:m> /\ <var:X2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:X3> = <nat:1> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:3> * <var:m> /\ <var:X2> = <nat:6> * <var:m> ^ <nat:2> /\ <var:f> = <nat:1> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X1> = <nat:3> * <var:m> /\ <var:f> = <nat:1> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:X0> = <nat:6> /\ <var:f> = <nat:1> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:f> = <nat:1> * <var:m> ^ <nat:3> + <nat:6> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 