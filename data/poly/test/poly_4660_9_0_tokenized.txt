\begin{document} \begin{theorem} Take a program in \emph{Imp} as follows \begin{verbatim} <var:s0> := <nat:3> ; <var:s1> := <nat:2> ; <var:s1> := <var:s1> * <var:y> ; <var:s2> := <nat:2> ; <var:s2> := <var:s2> * <var:y> ; <var:s2> := <var:s2> * <var:y> ; <var:H> := <var:s2> ; <var:H> := <var:H> + <var:s1> ; <var:H> := <var:H> + <var:s0> \end{verbatim} Allowing $ <var:y> = <var:x> $ --- for every $ <var:x> $ --- ahead of running our set of commands it follows that we see $ <var:H> = <nat:2> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:3> $ . \end{theorem} \begin{proof} Notice the following decorated code . \begin{eqnarray} \{ <var:y> = <var:x> \} \\ <var:s0> := <nat:3> ; \\ \{ <var:y> = <var:x> \land <var:s0> = <nat:3> \} \\ <var:s1> := <nat:2> ; \\ \{ <var:y> = <var:x> \land <var:s0> = <nat:3> \land <var:s1> = <nat:2> \} \\ <var:s1> := <var:s1> * <var:y> ; \\ \{ <var:y> = <var:x> \land <var:s0> = <nat:3> \land <var:s1> = <nat:2> \cdot <var:x> \} \\ <var:s2> := <nat:2> ; \\ \{ <var:y> = <var:x> \land <var:s0> = <nat:3> \land <var:s1> = <nat:2> \cdot <var:x> \land <var:s2> = <nat:2> \} \\ <var:s2> := <var:s2> * <var:y> ; \\ \{ <var:y> = <var:x> \land <var:s0> = <nat:3> \land <var:s1> = <nat:2> \cdot <var:x> \land <var:s2> = <nat:2> \cdot <var:x> \} \\ <var:s2> := <var:s2> * <var:y> ; \\ \{ <var:y> = <var:x> \land <var:s0> = <nat:3> \land <var:s1> = <nat:2> \cdot <var:x> \land <var:s2> = <nat:2> \cdot <var:x> ^ <nat:2> \} \\ <var:H> := <var:s2> ; \\ \{ <var:y> = <var:x> \land <var:s0> = <nat:3> \land <var:s1> = <nat:2> \cdot <var:x> \land <var:H> = <nat:2> \cdot <var:x> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:s1> ; \\ \{ <var:y> = <var:x> \land <var:s0> = <nat:3> \land <var:H> = <nat:2> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> \} \\ <var:H> := <var:H> + <var:s0> \\ \{ <var:y> = <var:x> \land <var:H> = <nat:2> \cdot <var:x> ^ <nat:2> + <nat:2> \cdot <var:x> + <nat:3> \} \end{eqnarray} Applying Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:y> = <var:x> }} <var:s0> := <nat:3> ; <var:s1> := <nat:2> ; <var:s1> := <var:s1> * <var:y> ; <var:s2> := <nat:2> ; <var:s2> := <var:s2> * <var:y> ; <var:s2> := <var:s2> * <var:y> ; <var:H> := <var:s2> ; <var:H> := <var:H> + <var:s1> ; <var:H> := <var:H> + <var:s0> {{ <var:H> = <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:2> * <var:x> /\ <var:s2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:2> * <var:x> /\ <var:s2> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:2> * <var:x> /\ <var:s2> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:s0> = <nat:3> /\ <var:s1> = <nat:2> * <var:x> /\ <var:H> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:s0> = <nat:3> /\ <var:H> = <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:x> /\ <var:H> = <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 