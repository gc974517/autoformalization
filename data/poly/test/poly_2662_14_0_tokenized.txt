\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:9> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:n> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:n> ; <var:f2> := <var:f2> * <var:n> ; <var:f3> := <nat:9> ; <var:f3> := <var:f3> * <var:n> ; <var:f3> := <var:f3> * <var:n> ; <var:f3> := <var:f3> * <var:n> ; <var:p> := <var:f3> ; <var:p> := <var:p> + <var:f2> ; <var:p> := <var:p> + <var:f1> ; <var:p> := <var:p> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> . Allow that $ <var:n> = <var:J> $ before the evaluation of this segment of code then we have $ <var:p> = <nat:9> \cdot <var:J> ^ <nat:3> + <nat:6> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + <nat:9> $ when code segment has exited . \end{theorem} \begin{proof} Note that the below decorated list of commands . \begin{eqnarray} \{ <var:n> = <var:J> \} \\ <var:f0> := <nat:9> ; \\ \{ <var:n> = <var:J> \land <var:f0> = <nat:9> \} \\ <var:f1> := <nat:2> ; \\ \{ <var:n> = <var:J> \land <var:f0> = <nat:9> \land <var:f1> = <nat:2> \} \\ <var:f1> := <var:f1> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:f0> = <nat:9> \land <var:f1> = <nat:2> \times <var:J> \} \\ <var:f2> := <nat:6> ; \\ \{ <var:n> = <var:J> \land <var:f0> = <nat:9> \land <var:f1> = <nat:2> \times <var:J> \land <var:f2> = <nat:6> \} \\ <var:f2> := <var:f2> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:f0> = <nat:9> \land <var:f1> = <nat:2> \times <var:J> \land <var:f2> = <nat:6> \times <var:J> \} \\ <var:f2> := <var:f2> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:f0> = <nat:9> \land <var:f1> = <nat:2> \times <var:J> \land <var:f2> = <nat:6> \times <var:J> ^ <nat:2> \} \\ <var:f3> := <nat:9> ; \\ \{ <var:n> = <var:J> \land <var:f0> = <nat:9> \land <var:f1> = <nat:2> \times <var:J> \land <var:f2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:f3> = <nat:9> \} \\ <var:f3> := <var:f3> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:f0> = <nat:9> \land <var:f1> = <nat:2> \times <var:J> \land <var:f2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:f3> = <nat:9> \times <var:J> \} \\ <var:f3> := <var:f3> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:f0> = <nat:9> \land <var:f1> = <nat:2> \times <var:J> \land <var:f2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:f3> = <nat:9> \times <var:J> ^ <nat:2> \} \\ <var:f3> := <var:f3> * <var:n> ; \\ \{ <var:n> = <var:J> \land <var:f0> = <nat:9> \land <var:f1> = <nat:2> \times <var:J> \land <var:f2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:f3> = <nat:9> \times <var:J> ^ <nat:3> \} \\ <var:p> := <var:f3> ; \\ \{ <var:n> = <var:J> \land <var:f0> = <nat:9> \land <var:f1> = <nat:2> \times <var:J> \land <var:f2> = <nat:6> \times <var:J> ^ <nat:2> \land <var:p> = <nat:9> \times <var:J> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:f2> ; \\ \{ <var:n> = <var:J> \land <var:f0> = <nat:9> \land <var:f1> = <nat:2> \times <var:J> \land <var:p> = <nat:9> \times <var:J> ^ <nat:3> + <nat:6> \times <var:J> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:f1> ; \\ \{ <var:n> = <var:J> \land <var:f0> = <nat:9> \land <var:p> = <nat:9> \times <var:J> ^ <nat:3> + <nat:6> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> \} \\ <var:p> := <var:p> + <var:f0> \\ \{ <var:n> = <var:J> \land <var:p> = <nat:9> \times <var:J> ^ <nat:3> + <nat:6> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:9> \} \end{eqnarray} Utilizing typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f0> := <nat:9> ; <var:f1> := <nat:2> ; <var:f1> := <var:f1> * <var:n> ; <var:f2> := <nat:6> ; <var:f2> := <var:f2> * <var:n> ; <var:f2> := <var:f2> * <var:n> ; <var:f3> := <nat:9> ; <var:f3> := <var:f3> * <var:n> ; <var:f3> := <var:f3> * <var:n> ; <var:f3> := <var:f3> * <var:n> ; <var:p> := <var:f3> ; <var:p> := <var:p> + <var:f2> ; <var:p> := <var:p> + <var:f1> ; <var:p> := <var:p> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:n> = <var:J> }} <def:poly> {{ <var:p> = <nat:9> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:f0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:2> * <var:J> /\ <var:f2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:2> * <var:J> /\ <var:f2> = <nat:6> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:2> * <var:J> /\ <var:f2> = <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:2> * <var:J> /\ <var:f2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:f3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:2> * <var:J> /\ <var:f2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:f3> = <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:2> * <var:J> /\ <var:f2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:f3> = <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:2> * <var:J> /\ <var:f2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:f3> = <nat:9> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:2> * <var:J> /\ <var:f2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:p> = <nat:9> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:f0> = <nat:9> /\ <var:f1> = <nat:2> * <var:J> /\ <var:p> = <nat:9> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:f0> = <nat:9> /\ <var:p> = <nat:9> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:J> /\ <var:p> = <nat:9> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 