\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i0> := <nat:2> ; <var:k> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assume given any integers $ <var:q> $ that we have $ <var:j> = <var:q> $ prior to running the code segment it must be that $ <var:k> = <nat:2> $ once set of instructions executes . \end{theorem} \begin{proof} The method of proof for the series of instructions is accomplished through Hoare logic . Taking a look at the following line of code contained in our series of commands , we see \begin{eqnarray} \{ <var:j> = <var:q> \} \, <var:i0> := <nat:2> \, \{ <var:j> = <var:q> \land <var:i0> = <nat:2> \} \end{eqnarray} Stepping through , we see \begin{eqnarray} \{ <var:j> = <var:q> \} \, <var:i0> := <nat:2> \, \{ <var:j> = <var:q> \land <var:i0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:2> ; <var:k> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:j> = <var:q> }} <def:poly> {{ <var:k> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:q> /\ <var:k> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 