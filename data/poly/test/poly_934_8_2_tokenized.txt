\begin{document} \begin{theorem} Define a code : \begin{verbatim} <var:P> := <nat:3> ; <var:P> := <nat:1> + <var:P> * <var:J> ; <var:P> := <var:P> * <var:J> ; <var:P> := <nat:1> + <var:P> * <var:J> ; <var:P> := <var:P> * <var:J> ; <var:P> := <nat:3> + <var:P> * <var:J> ; <var:P> := <var:P> * <var:J> ; <var:P> := <nat:2> + <var:P> * <var:J> \end{verbatim} Allow that $ <var:J> = <var:e> $ prior to the execution of the list of instructions , then $ <var:P> = <nat:3> \times <var:e> ^ <nat:7> + <nat:1> \times <var:e> ^ <nat:6> + <nat:1> \times <var:e> ^ <nat:4> + <nat:3> \times <var:e> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning results in : \begin{eqnarray} \{ <var:J> = <var:e> \} \\ <var:P> := <nat:3> ; \\ \{ <var:J> = <var:e> \land <var:P> = <nat:3> \} \\ <var:P> := <nat:1> + <var:P> * <var:J> ; \\ \{ <var:J> = <var:e> \land <var:P> = <nat:3> * <var:e> + <nat:1> \} \\ <var:P> := <var:P> * <var:J> ; \\ \{ <var:J> = <var:e> \land <var:P> = <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + \} \\ <var:P> := <nat:1> + <var:P> * <var:J> ; \\ \{ <var:J> = <var:e> \land <var:P> = <nat:3> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> \} \\ <var:P> := <var:P> * <var:J> ; \\ \{ <var:J> = <var:e> \land <var:P> = <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> + \} \\ <var:P> := <nat:3> + <var:P> * <var:J> ; \\ \{ <var:J> = <var:e> \land <var:P> = <nat:3> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> \} \\ <var:P> := <var:P> * <var:J> ; \\ \{ <var:J> = <var:e> \land <var:P> = <nat:3> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> + \} \\ <var:P> := <nat:2> + <var:P> * <var:J> \\ \{ <var:J> = <var:e> \land <var:P> = <nat:3> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> \} \end{eqnarray} Thus , this code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:J> = <var:e> }} <var:P> := <nat:3> ; <var:P> := <nat:1> + <var:P> * <var:J> ; <var:P> := <var:P> * <var:J> ; <var:P> := <nat:1> + <var:P> * <var:J> ; <var:P> := <var:P> * <var:J> ; <var:P> := <nat:3> + <var:P> * <var:J> ; <var:P> := <var:P> * <var:J> ; <var:P> := <nat:2> + <var:P> * <var:J> {{ <var:P> = <nat:3> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:P> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:P> = <nat:3> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:P> = <nat:3> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:P> = <nat:3> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:P> = <nat:3> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:P> = <nat:3> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:P> = <nat:3> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:P> = <nat:3> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 