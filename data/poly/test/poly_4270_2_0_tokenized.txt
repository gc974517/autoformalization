\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:8> ; <var:P> := <var:I0> \end{verbatim} Assuming it to be that $ <var:g> = <var:D> $ before evaluating the program it must be that we see $ <var:P> = <nat:8> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques produces : \begin{eqnarray} \{ <var:g> = <var:D> \} \\ <var:I0> := <nat:8> ; \\ \{ <var:g> = <var:D> \land <var:I0> = <nat:8> \} \\ <var:P> := <var:I0> \\ \{ <var:g> = <var:D> \land <var:P> = <nat:8> \} \end{eqnarray} Hence , this series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:g> = <var:D> }} <var:I0> := <nat:8> ; <var:P> := <var:I0> {{ <var:P> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:D> /\ <var:P> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 