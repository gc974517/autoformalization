\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:3> ; <var:X> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:e> = <var:M> $ given some positive integers $ <var:M> $ before the evaluation of our segment of code it must be that we see $ <var:X> = <nat:3> $ once program exits . \end{theorem} \begin{proof} Demonstrating correctness of the code is shown with Hoare reasoning . Moving forward to the proceeding statement contained in the series of instructions , we have the variable binding command \verb | <var:G0> := <nat:3> ; | . This redefines the condition $ \{ <var:e> = <var:M> \} $ to the postcondition $ \{ <var:e> = <var:M> \land <var:G0> = <nat:3> \} $ . This is rigorously given using the assignment scheme obtained from usual Hoare reasoning . Going forward , we have the variable update command \verb | <var:X> := <var:G0> | . This command transfers the condition $ \{ <var:e> = <var:M> \land <var:G0> = <nat:3> \} $ as the condition $ \{ <var:e> = <var:M> \land <var:X> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:3> ; <var:X> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:e> = <var:M> }} <def:poly> {{ <var:X> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:M> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:M> /\ <var:X> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 