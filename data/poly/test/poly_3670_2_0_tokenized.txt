\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:P0> := <nat:9> ; <var:c> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:S> = <var:C> $ for every $ <var:C> $ prior to running our series of commands it holds that $ <var:c> = <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of commands is done by standard Hoare logic . Honing in on the following bit of code found in the set of commands , we see \begin{verbatim} { <var:S> = <var:C> } <var:P0> := <nat:9> { <var:S> = <var:C> \land <var:P0> = <nat:9> } \end{verbatim} This is rigorously given by the environment update law found in Hoare reasoning . Taking a look at the next command in the segment of code , we have \begin{verbatim} { <var:S> = <var:C> } <var:P0> := <nat:9> { <var:S> = <var:C> \land <var:P0> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:9> ; <var:c> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:S> = <var:C> }} <def:poly> {{ <var:c> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:C> /\ <var:c> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 