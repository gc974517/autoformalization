\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:f> := <nat:4> ; <var:f> := <nat:3> + <var:f> * <var:z> ; <var:f> := <nat:3> + <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> ; <var:f> := <nat:1> + <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> ; <var:f> := <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> ; <var:f> := <nat:1> + <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> ; <var:f> := <var:f> * <var:z> ; <var:f> := <var:f> * <var:z> ; <var:f> := <nat:4> + <var:f> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> . Given it to hold that $ <var:z> = <var:L> $ prior to executing the list of commands , it follows that we have $ <var:f> = <nat:4> \times <var:L> ^ <nat:12> + <nat:3> \times <var:L> ^ <nat:11> + <nat:3> \times <var:L> ^ <nat:10> + <nat:2> \times <var:L> ^ <nat:9> + <nat:1> \times <var:L> ^ <nat:8> + <nat:2> \times <var:L> ^ <nat:7> + <nat:2> \times <var:L> ^ <nat:5> + <nat:1> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:4> $ once list of commands has terminated . \end{theorem} \begin{proof} The argument for our series of commands can be demonstrated through typical Hoare logic . Moving forward to the proceeding command seen in our set of instructions , we have the environment update command \verb | <var:f> := <nat:4> ; | . This line forwards the condition $ \{ <var:z> = <var:L> \} $ to $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \} $ . This is shown by the assignment rule given in usual Hoare logic . Jumping to the proceeding line of code in our code , the variable update statement \verb | <var:f> := <nat:3> + <var:f> * <var:z> ; | . This statement redefines $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \} $ to the postcondition $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> + <nat:3> \} $ . Jumping to the next statement found in our set of commands , the variable assignmet statement binding $ <nat:3> + <var:f> * <var:z> $ into $ <var:f>$ . This transfers $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> + <nat:3> \} $ into the postcondition $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:3> \} $ . Moving forward , the variable assignmet statement \verb | <var:f> := <nat:2> + <var:f> * <var:z> ; | . This takes the precondition $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:3> \} $ to $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:2> \} $ . Paying attention to the proceeding step seen in our series of commands , the variable update code \verb | <var:f> := <nat:1> + <var:f> * <var:z> ; | . This forwards $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:2> \} $ as the condition $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:1> \} $ . This is shown using the assignment rule found in typical Hoare techniques . Immediately after , we see the line yielding $ <nat:2> + <var:f> * <var:z> $ into $ <var:f>$ . This redefines the precondition $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:1> \} $ toward the condition $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:5> + <nat:3> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:2> \} $ . This is shown to be logically sound with the assignment rule of standard Hoare reasoning . Looking at the next bit of code in the segment of code , we have the variable binding statement defining $ <var:f> * <var:z> $ as $ <var:f>$ . This advances the precondition $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:5> + <nat:3> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:2> \} $ toward the condition $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:6> + <nat:3> \cdot <var:L> ^ <nat:5> + <nat:3> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + \} $ . Moving onward , we have the binding command giving $ <nat:2> + <var:f> * <var:z> $ to $ <var:f>$ . This code redefines the condition $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:6> + <nat:3> \cdot <var:L> ^ <nat:5> + <nat:3> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + \} $ toward $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:7> + <nat:3> \cdot <var:L> ^ <nat:6> + <nat:3> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:2> \} $ . Taking a look at the next command in the series of commands , the variable assignmet command defining $ <nat:1> + <var:f> * <var:z> $ to $ <var:f>$ . This transfers the precondition $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:7> + <nat:3> \cdot <var:L> ^ <nat:6> + <nat:3> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:2> \} $ toward the condition $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:8> + <nat:3> \cdot <var:L> ^ <nat:7> + <nat:3> \cdot <var:L> ^ <nat:6> + <nat:2> \cdot <var:L> ^ <nat:5> + <nat:1> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> + <nat:1> \} $ . Going forward , the assignment code \verb | <var:f> := <nat:2> + <var:f> * <var:z> ; | . This statement takes $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:8> + <nat:3> \cdot <var:L> ^ <nat:7> + <nat:3> \cdot <var:L> ^ <nat:6> + <nat:2> \cdot <var:L> ^ <nat:5> + <nat:1> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> + <nat:1> \} $ as the condition $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:9> + <nat:3> \cdot <var:L> ^ <nat:8> + <nat:3> \cdot <var:L> ^ <nat:7> + <nat:2> \cdot <var:L> ^ <nat:6> + <nat:1> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:2> \} $ . Jumping to the proceeding piece of code found in the set of instructions , we have the environment update statement \verb | <var:f> := <var:f> * <var:z> ; | . This advances $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:9> + <nat:3> \cdot <var:L> ^ <nat:8> + <nat:3> \cdot <var:L> ^ <nat:7> + <nat:2> \cdot <var:L> ^ <nat:6> + <nat:1> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:2> \} $ as $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:10> + <nat:3> \cdot <var:L> ^ <nat:9> + <nat:3> \cdot <var:L> ^ <nat:8> + <nat:2> \cdot <var:L> ^ <nat:7> + <nat:1> \cdot <var:L> ^ <nat:6> + <nat:2> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + \} $ . This is guaranteed with the assignment law of standard Hoare techniques . Moving forward to the subsequent piece of code contained in our program , we have the variable binding line \verb | <var:f> := <var:f> * <var:z> ; | . This moves the precondition $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:10> + <nat:3> \cdot <var:L> ^ <nat:9> + <nat:3> \cdot <var:L> ^ <nat:8> + <nat:2> \cdot <var:L> ^ <nat:7> + <nat:1> \cdot <var:L> ^ <nat:6> + <nat:2> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + \} $ toward $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:11> + <nat:3> \cdot <var:L> ^ <nat:10> + <nat:3> \cdot <var:L> ^ <nat:9> + <nat:2> \cdot <var:L> ^ <nat:8> + <nat:1> \cdot <var:L> ^ <nat:7> + <nat:2> \cdot <var:L> ^ <nat:6> + <nat:2> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + \} $ . Moving forward to the next step , we see the variable update code yielding $ <nat:4> + <var:f> * <var:z$ to $ <var:f>$ . This code advances $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:11> + <nat:3> \cdot <var:L> ^ <nat:10> + <nat:3> \cdot <var:L> ^ <nat:9> + <nat:2> \cdot <var:L> ^ <nat:8> + <nat:1> \cdot <var:L> ^ <nat:7> + <nat:2> \cdot <var:L> ^ <nat:6> + <nat:2> \cdot <var:L> ^ <nat:4> + <nat:1> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + \} $ into $ \{ <var:z> = <var:L> \land <var:f> = <nat:4> \cdot <var:L> ^ <nat:12> + <nat:3> \cdot <var:L> ^ <nat:11> + <nat:3> \cdot <var:L> ^ <nat:10> + <nat:2> \cdot <var:L> ^ <nat:9> + <nat:1> \cdot <var:L> ^ <nat:8> + <nat:2> \cdot <var:L> ^ <nat:7> + <nat:2> \cdot <var:L> ^ <nat:5> + <nat:1> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:4> \} $ . This is guaranteed by the assignment law given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:4> ; <var:f> := <nat:3> + <var:f> * <var:z> ; <var:f> := <nat:3> + <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> ; <var:f> := <nat:1> + <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> ; <var:f> := <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> ; <var:f> := <nat:1> + <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> ; <var:f> := <var:f> * <var:z> ; <var:f> := <var:f> * <var:z> ; <var:f> := <nat:4> + <var:f> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:z> = <var:L> }} <def:poly> {{ <var:f> = <nat:4> * <var:L> ^ <nat:12> + <nat:3> * <var:L> ^ <nat:11> + <nat:3> * <var:L> ^ <nat:10> + <nat:2> * <var:L> ^ <nat:9> + <nat:1> * <var:L> ^ <nat:8> + <nat:2> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:f> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:f> = <nat:4> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:f> = <nat:4> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:f> = <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:f> = <nat:4> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:f> = <nat:4> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:f> = <nat:4> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:f> = <nat:4> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:f> = <nat:4> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:2> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:f> = <nat:4> * <var:L> ^ <nat:9> + <nat:3> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:6> + <nat:1> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:f> = <nat:4> * <var:L> ^ <nat:10> + <nat:3> * <var:L> ^ <nat:9> + <nat:3> * <var:L> ^ <nat:8> + <nat:2> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:f> = <nat:4> * <var:L> ^ <nat:11> + <nat:3> * <var:L> ^ <nat:10> + <nat:3> * <var:L> ^ <nat:9> + <nat:2> * <var:L> ^ <nat:8> + <nat:1> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:f> = <nat:4> * <var:L> ^ <nat:12> + <nat:3> * <var:L> ^ <nat:11> + <nat:3> * <var:L> ^ <nat:10> + <nat:2> * <var:L> ^ <nat:9> + <nat:1> * <var:L> ^ <nat:8> + <nat:2> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 