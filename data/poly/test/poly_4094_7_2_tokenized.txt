\begin{document} \begin{theorem} Consider the following segment of code : \begin{verbatim} <var:c> := <nat:1> ; <var:c> := <nat:4> + <var:c> * <var:n> ; <var:c> := <nat:3> + <var:c> * <var:n> ; <var:c> := <nat:4> + <var:c> * <var:n> ; <var:c> := <nat:4> + <var:c> * <var:n> ; <var:c> := <nat:3> + <var:c> * <var:n> ; <var:c> := <nat:1> + <var:c> * <var:n> \end{verbatim} Assuming that we have $ <var:n> = <var:e> $ prior to running our list of instructions , it follows that we see $ <var:c> = <nat:1> \times <var:e> ^ <nat:6> + <nat:4> \times <var:e> ^ <nat:5> + <nat:3> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:1> $ . \end{theorem} \begin{proof} The argument for our series of commands can be accomplished with typical Hoare reasoning . Shifting focus toward the proceeding step contained in our set of instructions , we see the assignment code binding $ <nat:1> $ into $ <var:c>$ . This code redefines the precondition $ \{ <var:n> = <var:e> \} $ to the condition $ \{ <var:n> = <var:e> \land <var:c> = <nat:1> \} $ . Moving forward , the binding statement binding $ <nat:4> + <var:c> * <var:n> $ toward $ <var:c>$ . This forwards the precondition $ \{ <var:n> = <var:e> \land <var:c> = <nat:1> \} $ toward the condition $ \{ <var:n> = <var:e> \land <var:c> = <nat:1> \times <var:e> + <nat:4> \} $ . Stepping forward , we see the assignment code assigning $ <nat:3> + <var:c> * <var:n> $ toward $ <var:c>$ . This transfers the condition $ \{ <var:n> = <var:e> \land <var:c> = <nat:1> \times <var:e> + <nat:4> \} $ into the postcondition $ \{ <var:n> = <var:e> \land <var:c> = <nat:1> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> + <nat:3> \} $ . This is shown through the assignment inference rule obtained from Hoare logic . Moving forward to the upcoming command in our code segment , we see the assignment line assigning $ <nat:4> + <var:c> * <var:n> $ as $ <var:c>$ . This code redefines the condition $ \{ <var:n> = <var:e> \land <var:c> = <nat:1> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> + <nat:3> \} $ as the condition $ \{ <var:n> = <var:e> \land <var:c> = <nat:1> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:4> \} $ . This is ensured by the assignment inference rule from usual Hoare logic . Considering the next bit of code seen in the set of instructions , we see the variable update statement defining $ <nat:4> + <var:c> * <var:n> $ into $ <var:c>$ . This takes the condition $ \{ <var:n> = <var:e> \land <var:c> = <nat:1> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:4> \} $ as $ \{ <var:n> = <var:e> \land <var:c> = <nat:1> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> + <nat:4> \} $ . Honing in on the upcoming line of code contained in our program , we see the variable binding command \verb | <var:c> := <nat:3> + <var:c> * <var:n> ; | . This moves the condition $ \{ <var:n> = <var:e> \land <var:c> = <nat:1> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> + <nat:4> \} $ to the postcondition $ \{ <var:n> = <var:e> \land <var:c> = <nat:1> \times <var:e> ^ <nat:5> + <nat:4> \times <var:e> ^ <nat:4> + <nat:3> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> + <nat:3> \} $ . Considering the next bit of code seen in the segment of code , the variable assignmet code \verb | <var:c> := <nat:1> + <var:c> * <var:n> | . This advances $ \{ <var:n> = <var:e> \land <var:c> = <nat:1> \times <var:e> ^ <nat:5> + <nat:4> \times <var:e> ^ <nat:4> + <nat:3> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + <nat:4> \times <var:e> + <nat:3> \} $ to the condition $ \{ <var:n> = <var:e> \land <var:c> = <nat:1> \times <var:e> ^ <nat:6> + <nat:4> \times <var:e> ^ <nat:5> + <nat:3> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:1> \} $ . This is shown using the assignment law defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:n> = <var:e> }} <var:c> := <nat:1> ; <var:c> := <nat:4> + <var:c> * <var:n> ; <var:c> := <nat:3> + <var:c> * <var:n> ; <var:c> := <nat:4> + <var:c> * <var:n> ; <var:c> := <nat:4> + <var:c> * <var:n> ; <var:c> := <nat:3> + <var:c> * <var:n> ; <var:c> := <nat:1> + <var:c> * <var:n> {{ <var:c> = <nat:1> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:c> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:c> = <nat:1> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:c> = <nat:1> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:c> = <nat:1> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:c> = <nat:1> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:c> = <nat:1> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:e> /\ <var:c> = <nat:1> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 