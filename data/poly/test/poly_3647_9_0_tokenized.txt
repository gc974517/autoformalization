\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:8> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:f> ; <var:k2> := <nat:8> ; <var:k2> := <var:k2> * <var:f> ; <var:k2> := <var:k2> * <var:f> ; <var:n> := <var:k2> ; <var:n> := <var:n> + <var:k1> ; <var:n> := <var:n> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:f> = <var:T> $ ( assuming some positive numbers $ <var:T> $ ) before running our segment of code it follows that we see $ <var:n> = <nat:8> \cdot <var:T> ^ <nat:2> + <nat:2> \cdot <var:T> + <nat:8> $ when program finishes . \end{theorem} \begin{proof} The method of proof for our set of instructions can be shown using usual Hoare logic . Paying attention to the proceeding statements in our list of instructions , \begin{verbatim} { <var:f> = <var:T> } <var:k0> := <nat:8> { <var:f> = <var:T> \land <var:k0> = <nat:8> } { <var:f> = <var:T> \land <var:k0> = <nat:8> } <var:k1> := <nat:2> { <var:f> = <var:T> \land <var:k0> = <nat:8> \land <var:k1> = <nat:2> } { <var:f> = <var:T> \land <var:k0> = <nat:8> \land <var:k1> = <nat:2> } <var:k1> := <var:k1> * <var:f> { <var:f> = <var:T> \land <var:k0> = <nat:8> \land <var:k1> = <nat:2> * <var:T> } { <var:f> = <var:T> \land <var:k0> = <nat:8> \land <var:k1> = <nat:2> * <var:T> } <var:k2> := <nat:8> { <var:f> = <var:T> \land <var:k0> = <nat:8> \land <var:k1> = <nat:2> * <var:T> \land <var:k2> = <nat:8> } { <var:f> = <var:T> \land <var:k0> = <nat:8> \land <var:k1> = <nat:2> * <var:T> \land <var:k2> = <nat:8> } <var:k2> := <var:k2> * <var:f> { <var:f> = <var:T> \land <var:k0> = <nat:8> \land <var:k1> = <nat:2> * <var:T> \land <var:k2> = <nat:8> * <var:T> } \end{verbatim} This is guaranteed with the variable update law obtained from standard Hoare reasoning . Moving forward to the subsequent statements seen in the list of commands , we have \begin{verbatim} { <var:f> = <var:T> } <var:k0> := <nat:8> { <var:f> = <var:T> \land <var:k0> = <nat:8> } { <var:f> = <var:T> \land <var:k0> = <nat:8> } <var:k1> := <nat:2> { <var:f> = <var:T> \land <var:k0> = <nat:8> \land <var:k1> = <nat:2> } \end{verbatim} This is shown through the environment update law defined by typical Hoare techniques . Focusing on the proceeding piece of code seen in our code , \begin{verbatim} { <var:f> = <var:T> } <var:k0> := <nat:8> { <var:f> = <var:T> \land <var:k0> = <nat:8> } \end{verbatim} This is rigorously given with the assignment inference rule given by usual Hoare reasoning . Shifting focus toward the subsequent line of code found in the set of commands , we see \begin{verbatim} { <var:f> = <var:T> } <var:k0> := <nat:8> { <var:f> = <var:T> \land <var:k0> = <nat:8> } \end{verbatim} This is ensured by the variable assignmet inference rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <def:poly> := <var:k0> := <nat:8> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:f> ; <var:k2> := <nat:8> ; <var:k2> := <var:k2> * <var:f> ; <var:k2> := <var:k2> * <var:f> ; <var:n> := <var:k2> ; <var:n> := <var:n> + <var:k1> ; <var:n> := <var:n> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:f> = <var:T> }} <def:poly> {{ <var:n> = <nat:8> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:k0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:k0> = <nat:8> /\ <var:k1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:k0> = <nat:8> /\ <var:k1> = <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:k0> = <nat:8> /\ <var:k1> = <nat:2> * <var:T> /\ <var:k2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:k0> = <nat:8> /\ <var:k1> = <nat:2> * <var:T> /\ <var:k2> = <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:k0> = <nat:8> /\ <var:k1> = <nat:2> * <var:T> /\ <var:k2> = <nat:8> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:k0> = <nat:8> /\ <var:k1> = <nat:2> * <var:T> /\ <var:n> = <nat:8> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:k0> = <nat:8> /\ <var:n> = <nat:8> * <var:T> ^ <nat:2> + <nat:2> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:n> = <nat:8> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 