\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:4> ; <var:p> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> in \emph{Imp} . Assuming , for every positive integers $ <var:T> $ , it to be that $ <var:s> = <var:T> $ before running the series of commands it must be that we have $ <var:p> = <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands is shown using Hoare reasoning . Moving on to the next step , we have \[ \begin{tabular} {rcl} \{ <var:s> = <var:T> \} & <var:O0> := <nat:4> & \{ <var:s> = <var:T> \land <var:O0> = <nat:4> \} \\ \{ <var:s> = <var:T> \land <var:O0> = <nat:4> \} & <var:p> := <var:O0& \{ <var:s> = <var:T> \land <var:p> = <nat:4> \} \end{tabular} This is shown to be logically sound through the scheme in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:4> ; <var:p> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:s> = <var:T> }} <def:poly> {{ <var:p> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:T> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:T> /\ <var:p> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 