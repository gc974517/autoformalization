\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:Z> ; <var:d2> := <var:d1> * <var:Z> ; <var:d3> := <var:d2> * <var:Z> ; <var:d4> := <var:d3> * <var:Z> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:2> ; <var:d2> := <var:d2> * <nat:1> ; <var:d3> := <var:d3> * <nat:6> ; <var:d4> := <var:d4> * <nat:6> ; <var:Y> := <var:d4> <var:Y> := <var:Y> + <var:d3> <var:Y> := <var:Y> + <var:d2> <var:Y> := <var:Y> + <var:d1> <var:Y> := <var:Y> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Allowing , given all positive integer coefficients $ <var:y> $ , it to hold that $ <var:Z> = <var:y> $ before evaluating our series of instructions it follows that we see $ <var:Y> = <nat:6> \times <var:y> ^ <nat:4> + <nat:6> \times <var:y> ^ <nat:3> + <nat:1> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:3> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques results in : \begin{eqnarray} \{ <var:Z> = <var:y> \} \\ <var:d1> := <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:d1> = <var:y> \} \\ <var:d2> := <var:d1> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:d1> = <var:y> \land <var:d2> = <var:y> ^ <nat:2> \} \\ <var:d3> := <var:d2> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:d1> = <var:y> \land <var:d2> = <var:y> ^ <nat:2> \land <var:d3> = <var:y> ^ <nat:3> \} \\ <var:d4> := <var:d3> * <var:Z> ; \\ \{ <var:Z> = <var:y> \land <var:d1> = <var:y> \land <var:d2> = <var:y> ^ <nat:2> \land <var:d3> = <var:y> ^ <nat:3> \land <var:d4> = <var:y> ^ <nat:4> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:Z> = <var:y> \land <var:d1> = <var:y> \land <var:d2> = <var:y> ^ <nat:2> \land <var:d3> = <var:y> ^ <nat:3> \land <var:d4> = <var:y> ^ <nat:4> \land <var:d0> = <nat:3> \} \\ <var:d1> := <var:d1> * <nat:2> ; \\ \{ <var:Z> = <var:y> \land <var:d1> = <nat:2> \cdot <var:y> \land <var:d2> = <var:y> ^ <nat:2> \land <var:d3> = <var:y> ^ <nat:3> \land <var:d4> = <var:y> ^ <nat:4> \land <var:d0> = <nat:3> \} \\ <var:d2> := <var:d2> * <nat:1> ; \\ \{ <var:Z> = <var:y> \land <var:d1> = <nat:2> \cdot <var:y> \land <var:d2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:d3> = <var:y> ^ <nat:3> \land <var:d4> = <var:y> ^ <nat:4> \land <var:d0> = <nat:3> \} \\ <var:d3> := <var:d3> * <nat:6> ; \\ \{ <var:Z> = <var:y> \land <var:d1> = <nat:2> \cdot <var:y> \land <var:d2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:d3> = <nat:6> \cdot <var:y> ^ <nat:3> \land <var:d4> = <var:y> ^ <nat:4> \land <var:d0> = <nat:3> \} \\ <var:d4> := <var:d4> * <nat:6> ; \\ \{ <var:Z> = <var:y> \land <var:d1> = <nat:2> \cdot <var:y> \land <var:d2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:d3> = <nat:6> \cdot <var:y> ^ <nat:3> \land <var:d4> = <nat:6> \cdot <var:y> ^ <nat:4> \land <var:d0> = <nat:3> \} \\ <var:Y> := <var:d4> \\ \{ <var:Z> = <var:y> \land <var:d1> = <nat:2> \cdot <var:y> \land <var:d2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:d3> = <nat:6> \cdot <var:y> ^ <nat:3> \land <var:d0> = <nat:3> \land <var:Y> = <nat:6> \cdot <var:y> ^ <nat:4> \} \\ <var:Y> := <var:Y> + <var:d3> \\ \{ <var:Z> = <var:y> \land <var:d1> = <nat:2> \cdot <var:y> \land <var:d2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:d0> = <nat:3> \land <var:Y> = <nat:6> \cdot <var:y> ^ <nat:4> + <nat:6> \cdot <var:y> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:d2> \\ \{ <var:Z> = <var:y> \land <var:d1> = <nat:2> \cdot <var:y> \land <var:d0> = <nat:3> \land <var:Y> = <nat:6> \cdot <var:y> ^ <nat:4> + <nat:6> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:d1> \\ \{ <var:Z> = <var:y> \land <var:d0> = <nat:3> \land <var:Y> = <nat:6> \cdot <var:y> ^ <nat:4> + <nat:6> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> \} \\ <var:Y> := <var:Y> + <var:d0> \\ \{ <var:Z> = <var:y> \land <var:Y> = <nat:6> \cdot <var:y> ^ <nat:4> + <nat:6> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> + <nat:3> \} \end{eqnarray} Given the preceding argument , our program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <var:d4> : string := " <var:d4> " . Definition <def:poly> := <var:d1> := <var:Z> ; <var:d2> := <var:d1> * <var:Z> ; <var:d3> := <var:d2> * <var:Z> ; <var:d4> := <var:d3> * <var:Z> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:2> ; <var:d2> := <var:d2> * <nat:1> ; <var:d3> := <var:d3> * <nat:6> ; <var:d4> := <var:d4> * <nat:6> ; <var:Y> := <var:d4> <var:Y> := <var:Y> + <var:d3> <var:Y> := <var:Y> + <var:d2> <var:Y> := <var:Y> + <var:d1> <var:Y> := <var:Y> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:Z> = <var:y> }} <def:poly> {{ <var:Y> = <nat:6> * <var:y> ^ <nat:4> + <nat:6> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:d1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:d1> = <var:y> /\ <var:d2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:d1> = <var:y> /\ <var:d2> = <var:y> ^ <nat:2> /\ <var:d3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:d1> = <var:y> /\ <var:d2> = <var:y> ^ <nat:2> /\ <var:d3> = <var:y> ^ <nat:3> /\ <var:d4> = <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:d1> = <var:y> /\ <var:d2> = <var:y> ^ <nat:2> /\ <var:d3> = <var:y> ^ <nat:3> /\ <var:d4> = <var:y> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:d1> = <nat:2> * <var:y> /\ <var:d2> = <var:y> ^ <nat:2> /\ <var:d3> = <var:y> ^ <nat:3> /\ <var:d4> = <var:y> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:d1> = <nat:2> * <var:y> /\ <var:d2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:d3> = <var:y> ^ <nat:3> /\ <var:d4> = <var:y> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:d1> = <nat:2> * <var:y> /\ <var:d2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:d3> = <nat:6> * <var:y> ^ <nat:3> /\ <var:d4> = <var:y> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:d1> = <nat:2> * <var:y> /\ <var:d2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:d3> = <nat:6> * <var:y> ^ <nat:3> /\ <var:d4> = <nat:6> * <var:y> ^ <nat:4> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:d1> = <nat:2> * <var:y> /\ <var:d2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:d3> = <nat:6> * <var:y> ^ <nat:3> /\ <var:d0> = <nat:3> /\ <var:Y> = <nat:6> * <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:d1> = <nat:2> * <var:y> /\ <var:d2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:d0> = <nat:3> /\ <var:Y> = <nat:6> * <var:y> ^ <nat:4> + <nat:6> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:d1> = <nat:2> * <var:y> /\ <var:d0> = <nat:3> /\ <var:Y> = <nat:6> * <var:y> ^ <nat:4> + <nat:6> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:d0> = <nat:3> /\ <var:Y> = <nat:6> * <var:y> ^ <nat:4> + <nat:6> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:y> /\ <var:Y> = <nat:6> * <var:y> ^ <nat:4> + <nat:6> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 