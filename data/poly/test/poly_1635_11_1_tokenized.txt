\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:D1> := <var:P> ; <var:D2> := <var:D1> * <var:P> ; <var:D3> := <var:D2> * <var:P> ; <var:D0> := <nat:9> ; <var:D1> := <var:D1> * <nat:5> ; <var:D2> := <var:D2> * <nat:4> ; <var:D3> := <var:D3> * <nat:2> ; <var:f> := <var:D3> <var:f> := <var:f> + <var:D2> <var:f> := <var:f> + <var:D1> <var:f> := <var:f> + <var:D0> \end{verbatim} Allowing $ <var:P> = <var:B> $ , assuming some whole numbers $ <var:B> $ , before the evaluation of the code it holds that we have $ <var:f> = <nat:2> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> + <nat:9> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:P> = <var:B> \} \\ <var:D1> := <var:P> ; \\ \{ <var:P> = <var:B> \land <var:D1> = <var:B> \} \\ <var:D2> := <var:D1> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:D1> = <var:B> \land <var:D2> = <var:B> ^ <nat:2> \} \\ <var:D3> := <var:D2> * <var:P> ; \\ \{ <var:P> = <var:B> \land <var:D1> = <var:B> \land <var:D2> = <var:B> ^ <nat:2> \land <var:D3> = <var:B> ^ <nat:3> \} \\ <var:D0> := <nat:9> ; \\ \{ <var:P> = <var:B> \land <var:D1> = <var:B> \land <var:D2> = <var:B> ^ <nat:2> \land <var:D3> = <var:B> ^ <nat:3> \land <var:D0> = <nat:9> \} \end{eqnarray} Allowing evaluating this program returns : \begin{eqnarray} <var:D1> := <var:D1> * <nat:5> ; \\ \{ <var:P> = <var:B> \land <var:D1> = <nat:5> \times <var:B> \land <var:D2> = <var:B> ^ <nat:2> \land <var:D3> = <var:B> ^ <nat:3> \land <var:D0> = <nat:9> \} \\ <var:D2> := <var:D2> * <nat:4> ; \\ \{ <var:P> = <var:B> \land <var:D1> = <nat:5> \times <var:B> \land <var:D2> = <nat:4> \times <var:B> ^ <nat:2> \land <var:D3> = <var:B> ^ <nat:3> \land <var:D0> = <nat:9> \} \\ <var:D3> := <var:D3> * <nat:2> ; \\ \{ <var:P> = <var:B> \land <var:D1> = <nat:5> \times <var:B> \land <var:D2> = <nat:4> \times <var:B> ^ <nat:2> \land <var:D3> = <nat:2> \times <var:B> ^ <nat:3> \land <var:D0> = <nat:9> \} \\ <var:f> := <var:D3> \\ \{ <var:P> = <var:B> \land <var:D1> = <nat:5> \times <var:B> \land <var:D2> = <nat:4> \times <var:B> ^ <nat:2> \land <var:D0> = <nat:9> \land <var:f> = <nat:2> \times <var:B> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:D2> \\ \{ <var:P> = <var:B> \land <var:D1> = <nat:5> \times <var:B> \land <var:D0> = <nat:9> \land <var:f> = <nat:2> \times <var:B> ^ <nat:3> + <nat:4> \times <var:B> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:D1> \\ \{ <var:P> = <var:B> \land <var:D0> = <nat:9> \land <var:f> = <nat:2> \times <var:B> ^ <nat:3> + <nat:4> \times <var:B> ^ <nat:2> + <nat:5> \times <var:B> \} \\ <var:f> := <var:f> + <var:D0> \\ \{ <var:P> = <var:B> \land <var:f> = <nat:2> \times <var:B> ^ <nat:3> + <nat:4> \times <var:B> ^ <nat:2> + <nat:5> \times <var:B> + <nat:9> \} \end{eqnarray} Given the preceding argument , our series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:P> = <var:B> }} <var:D1> := <var:P> ; <var:D2> := <var:D1> * <var:P> ; <var:D3> := <var:D2> * <var:P> ; <var:D0> := <nat:9> ; <var:D1> := <var:D1> * <nat:5> ; <var:D2> := <var:D2> * <nat:4> ; <var:D3> := <var:D3> * <nat:2> ; <var:f> := <var:D3> <var:f> := <var:f> + <var:D2> <var:f> := <var:f> + <var:D1> <var:f> := <var:f> + <var:D0> {{ <var:f> = <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:D1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:D1> = <var:B> /\ <var:D2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:D1> = <var:B> /\ <var:D2> = <var:B> ^ <nat:2> /\ <var:D3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:D1> = <var:B> /\ <var:D2> = <var:B> ^ <nat:2> /\ <var:D3> = <var:B> ^ <nat:3> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:D1> = <nat:5> * <var:B> /\ <var:D2> = <var:B> ^ <nat:2> /\ <var:D3> = <var:B> ^ <nat:3> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:D1> = <nat:5> * <var:B> /\ <var:D2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:D3> = <var:B> ^ <nat:3> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:D1> = <nat:5> * <var:B> /\ <var:D2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:D3> = <nat:2> * <var:B> ^ <nat:3> /\ <var:D0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:D1> = <nat:5> * <var:B> /\ <var:D2> = <nat:4> * <var:B> ^ <nat:2> /\ <var:D0> = <nat:9> /\ <var:f> = <nat:2> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:D1> = <nat:5> * <var:B> /\ <var:D0> = <nat:9> /\ <var:f> = <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:D0> = <nat:9> /\ <var:f> = <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:B> /\ <var:f> = <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 