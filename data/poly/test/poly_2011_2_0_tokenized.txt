\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q0> := <nat:6> ; <var:s> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assume assuming some whole numbers $ <var:z> $ $ <var:m> = <var:z> $ before interpreting the program then $ <var:s> = <nat:6> $ once segment of code terminates . \end{theorem} \begin{proof} Arguing the correctness of the segment of code can be demonstrated with Hoare logic . Taking another step toward the proceeding line of code in our segment of code , we have \begin{verbatim} { <var:m> = <var:z> } <var:q0> := <nat:6> { <var:m> = <var:z> \land <var:q0> = <nat:6> } \end{verbatim} This is guaranteed through the variable update rule given by Hoare techniques . Moving on to the next step , we have \begin{verbatim} { <var:m> = <var:z> } <var:q0> := <nat:6> { <var:m> = <var:z> \land <var:q0> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:6> ; <var:s> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:m> = <var:z> }} <def:poly> {{ <var:s> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:z> /\ <var:s> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 