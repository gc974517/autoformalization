\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A> := <nat:4> ; <var:A> := <nat:4> + <var:A> * <var:h> ; <var:A> := <nat:2> + <var:A> * <var:h> ; <var:A> := <nat:4> + <var:A> * <var:h> ; <var:A> := <nat:3> + <var:A> * <var:h> ; <var:A> := <nat:1> + <var:A> * <var:h> ; <var:A> := <nat:4> + <var:A> * <var:h> ; <var:A> := <nat:2> + <var:A> * <var:h> ; <var:A> := <nat:4> + <var:A> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:h> = <var:V> $ ( for all integers $ <var:V> $ ) prior to the evaluation of our series of instructions then we have $ <var:A> = <nat:4> \times <var:V> ^ <nat:8> + <nat:4> \times <var:V> ^ <nat:7> + <nat:2> \times <var:V> ^ <nat:6> + <nat:4> \times <var:V> ^ <nat:5> + <nat:3> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:4> $ once list of commands has finished . \end{theorem} \begin{proof} The way to prove correctness for this series of commands can be accomplished through usual Hoare reasoning . Following , we see \begin{verbatim} { <var:h> = <var:V> } <var:A> := <nat:4> { <var:h> = <var:V> \land <var:A> = <nat:4> } { <var:h> = <var:V> \land <var:A> = <nat:4> } <var:A> := <nat:4> + <var:A> * <var:h> { <var:h> = <var:V> \land <var:A> = <nat:4> \times <var:V> + <nat:4> } { <var:h> = <var:V> \land <var:A> = <nat:4> \times <var:V> + <nat:4> } <var:A> := <nat:2> + <var:A> * <var:h> { <var:h> = <var:V> \land <var:A> = <nat:4> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:2> } { <var:h> = <var:V> \land <var:A> = <nat:4> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:2> } <var:A> := <nat:4> + <var:A> * <var:h> { <var:h> = <var:V> \land <var:A> = <nat:4> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:4> } { <var:h> = <var:V> \land <var:A> = <nat:4> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:4> } <var:A> := <nat:3> + <var:A> * <var:h> { <var:h> = <var:V> \land <var:A> = <nat:4> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:3> } { <var:h> = <var:V> \land <var:A> = <nat:4> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:3> } <var:A> := <nat:1> + <var:A> * <var:h> { <var:h> = <var:V> \land <var:A> = <nat:4> \times <var:V> ^ <nat:5> + <nat:4> \times <var:V> ^ <nat:4> + <nat:2> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:1> } { <var:h> = <var:V> \land <var:A> = <nat:4> \times <var:V> ^ <nat:5> + <nat:4> \times <var:V> ^ <nat:4> + <nat:2> \times <var:V> ^ <nat:3> + <nat:4> \times <var:V> ^ <nat:2> + <nat:3> \times <var:V> + <nat:1> } <var:A> := <nat:4> + <var:A> * <var:h> { <var:h> = <var:V> \land <var:A> = <nat:4> \times <var:V> ^ <nat:6> + <nat:4> \times <var:V> ^ <nat:5> + <nat:2> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:4> } { <var:h> = <var:V> \land <var:A> = <nat:4> \times <var:V> ^ <nat:6> + <nat:4> \times <var:V> ^ <nat:5> + <nat:2> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:4> } <var:A> := <nat:2> + <var:A> * <var:h> { <var:h> = <var:V> \land <var:A> = <nat:4> \times <var:V> ^ <nat:7> + <nat:4> \times <var:V> ^ <nat:6> + <nat:2> \times <var:V> ^ <nat:5> + <nat:4> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:2> } \end{verbatim} This is deduced using the variable update scheme given in typical Hoare logic . Taking a look at the following piece of code seen in the code segment , we see \begin{verbatim} { <var:h> = <var:V> } <var:A> := <nat:4> { <var:h> = <var:V> \land <var:A> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:4> ; <var:A> := <nat:4> + <var:A> * <var:h> ; <var:A> := <nat:2> + <var:A> * <var:h> ; <var:A> := <nat:4> + <var:A> * <var:h> ; <var:A> := <nat:3> + <var:A> * <var:h> ; <var:A> := <nat:1> + <var:A> * <var:h> ; <var:A> := <nat:4> + <var:A> * <var:h> ; <var:A> := <nat:2> + <var:A> * <var:h> ; <var:A> := <nat:4> + <var:A> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:h> = <var:V> }} <def:poly> {{ <var:A> = <nat:4> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:A> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:A> = <nat:4> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:A> = <nat:4> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:A> = <nat:4> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:A> = <nat:4> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:A> = <nat:4> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:A> = <nat:4> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:A> = <nat:4> * <var:V> ^ <nat:7> + <nat:4> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:4> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:V> /\ <var:A> = <nat:4> * <var:V> ^ <nat:8> + <nat:4> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:4> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 