\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v1> := <var:f> ; <var:v0> := <nat:2> ; <var:v1> := <var:v1> * <nat:4> ; <var:w> := <var:v1> <var:w> := <var:w> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> in \emph{Imp} . Assume , given all positive integers $ <var:r> $ , that we have $ <var:f> = <var:r> $ before running this series of instructions , then we have $ <var:w> = <nat:4> \cdot <var:r> + <nat:2> $ after series of instructions is done . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be given through typical Hoare logic . Jumping to the following pieces of code in our series of instructions , we see \begin{eqnarray} \{ <var:f> = <var:r> \} \, <var:v1> := <var:f> \, \{ <var:f> = <var:r> \land <var:v1> = <var:r> \} \\ \{ <var:f> = <var:r> \land <var:v1> = <var:r> \} \, <var:v0> := <nat:2> \, \{ <var:f> = <var:r> \land <var:v1> = <var:r> \land <var:v0> = <nat:2> \} \\ \{ <var:f> = <var:r> \land <var:v1> = <var:r> \land <var:v0> = <nat:2> \} \, <var:v1> := <var:v1> * <nat:4> \, \{ <var:f> = <var:r> \land <var:v1> = <nat:4> \cdot <var:r> \land <var:v0> = <nat:2> \} \\ \{ <var:f> = <var:r> \land <var:v1> = <nat:4> \cdot <var:r> \land <var:v0> = <nat:2> \} \, <var:w> := <var:v1\, \{ <var:f> = <var:r> \land <var:v0> = <nat:2> \land <var:w> = <nat:4> \cdot <var:r> \} \end{eqnarray} Taking another step toward the subsequent bit of code found in the list of commands , \begin{eqnarray} \{ <var:f> = <var:r> \} \, <var:v1> := <var:f> \, \{ <var:f> = <var:r> \land <var:v1> = <var:r> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v1> := <var:f> ; <var:v0> := <nat:2> ; <var:v1> := <var:v1> * <nat:4> ; <var:w> := <var:v1> <var:w> := <var:w> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:f> = <var:r> }} <def:poly> {{ <var:w> = <nat:4> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:v1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:v1> = <var:r> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:v1> = <nat:4> * <var:r> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:v0> = <nat:2> /\ <var:w> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:r> /\ <var:w> = <nat:4> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 