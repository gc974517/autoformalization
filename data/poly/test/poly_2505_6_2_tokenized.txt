\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:y> := <nat:4> ; <var:y> := <nat:4> + <var:y> * <var:s> ; <var:y> := <nat:4> + <var:y> * <var:s> ; <var:y> := <nat:2> + <var:y> * <var:s> ; <var:y> := <nat:2> + <var:y> * <var:s> ; <var:y> := <nat:4> + <var:y> * <var:s> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:s> = <var:B> $ before interpreting this list of instructions , then $ <var:y> = <nat:4> \cdot <var:B> ^ <nat:5> + <nat:4> \cdot <var:B> ^ <nat:4> + <nat:4> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:4> $ after list of commands has exited . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions can be given using typical Hoare reasoning . Looking at the following piece of code in the segment of code , we see the variable update line letting $ <nat:4> $ as $ <var:y>$ . This statement redefines the precondition $ \{ <var:s> = <var:B> \} $ toward the condition $ \{ <var:s> = <var:B> \land <var:y> = <nat:4> \} $ . This is ensured by the assignment rule of standard Hoare techniques . Moving forward to the subsequent statement contained in our code segment , we see the variable binding line \verb | <var:y> := <nat:4> + <var:y> * <var:s> ; | . This command advances $ \{ <var:s> = <var:B> \land <var:y> = <nat:4> \} $ toward the postcondition $ \{ <var:s> = <var:B> \land <var:y> = <nat:4> * <var:B> + <nat:4> \} $ . This is deduced using the assignment law obtained from typical Hoare techniques . Moving on to the upcoming piece of code contained in our list of instructions , the environment update statement \verb | <var:y> := <nat:4> + <var:y> * <var:s> ; | . This advances the precondition $ \{ <var:s> = <var:B> \land <var:y> = <nat:4> * <var:B> + <nat:4> \} $ as the postcondition $ \{ <var:s> = <var:B> \land <var:y> = <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:4> \} $ . Advancing to the following bit of code found in the list of commands , we have the variable assignmet command giving $ <nat:2> + <var:y> * <var:s> $ into $ <var:y>$ . This redefines $ \{ <var:s> = <var:B> \land <var:y> = <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:4> \} $ to $ \{ <var:s> = <var:B> \land <var:y> = <nat:4> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:2> \} $ . Moving on , we have the variable update code defining $ <nat:2> + <var:y> * <var:s> $ into $ <var:y>$ . This line takes $ \{ <var:s> = <var:B> \land <var:y> = <nat:4> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:2> \} $ as $ \{ <var:s> = <var:B> \land <var:y> = <nat:4> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:2> \} $ . Advancing , we see the variable binding command \verb | <var:y> := <nat:4> + <var:y> * <var:s> | . This line transfers the precondition $ \{ <var:s> = <var:B> \land <var:y> = <nat:4> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:2> \} $ into the condition $ \{ <var:s> = <var:B> \land <var:y> = <nat:4> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:y> := <nat:4> ; <var:y> := <nat:4> + <var:y> * <var:s> ; <var:y> := <nat:4> + <var:y> * <var:s> ; <var:y> := <nat:2> + <var:y> * <var:s> ; <var:y> := <nat:2> + <var:y> * <var:s> ; <var:y> := <nat:4> + <var:y> * <var:s> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:s> = <var:B> }} <def:poly> {{ <var:y> = <nat:4> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:y> = <nat:4> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:y> = <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:y> = <nat:4> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:y> = <nat:4> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:B> /\ <var:y> = <nat:4> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 