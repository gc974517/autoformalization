\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:o> := <nat:3> ; <var:o> := <nat:3> + <var:o> * <var:D> ; <var:o> := <nat:1> + <var:o> * <var:D> ; <var:o> := <nat:1> + <var:o> * <var:D> ; <var:o> := <nat:4> + <var:o> * <var:D> ; <var:o> := <nat:4> + <var:o> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Given it to be that $ <var:D> = <var:Y> $ for any positive numbers $ <var:Y> $ prior to executing our code , it follows that we see $ <var:o> = <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> $ after code finishes . \end{theorem} \begin{proof} Applying usual Hoare techniques gives : \begin{eqnarray} \{ <var:D> = <var:Y> \} \\ <var:o> := <nat:3> ; \\ \{ <var:D> = <var:Y> \land <var:o> = <nat:3> \} \\ <var:o> := <nat:3> + <var:o> * <var:D> ; \\ \{ <var:D> = <var:Y> \land <var:o> = <nat:3> \times <var:Y> + <nat:3> \} \\ <var:o> := <nat:1> + <var:o> * <var:D> ; \\ \{ <var:D> = <var:Y> \land <var:o> = <nat:3> \times <var:Y> ^ <nat:2> + <nat:3> \times <var:Y> + <nat:1> \} \\ <var:o> := <nat:1> + <var:o> * <var:D> ; \\ \{ <var:D> = <var:Y> \land <var:o> = <nat:3> \times <var:Y> ^ <nat:3> + <nat:3> \times <var:Y> ^ <nat:2> + <nat:1> \times <var:Y> + <nat:1> \} \\ <var:o> := <nat:4> + <var:o> * <var:D> ; \\ \{ <var:D> = <var:Y> \land <var:o> = <nat:3> \times <var:Y> ^ <nat:4> + <nat:3> \times <var:Y> ^ <nat:3> + <nat:1> \times <var:Y> ^ <nat:2> + <nat:1> \times <var:Y> + <nat:4> \} \\ <var:o> := <nat:4> + <var:o> * <var:D> \\ \{ <var:D> = <var:Y> \land <var:o> = <nat:3> \times <var:Y> ^ <nat:5> + <nat:3> \times <var:Y> ^ <nat:4> + <nat:1> \times <var:Y> ^ <nat:3> + <nat:1> \times <var:Y> ^ <nat:2> + <nat:4> \times <var:Y> + <nat:4> \} \end{eqnarray} Therefore , this segment of code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:3> ; <var:o> := <nat:3> + <var:o> * <var:D> ; <var:o> := <nat:1> + <var:o> * <var:D> ; <var:o> := <nat:1> + <var:o> * <var:D> ; <var:o> := <nat:4> + <var:o> * <var:D> ; <var:o> := <nat:4> + <var:o> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:D> = <var:Y> }} <def:poly> {{ <var:o> = <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:o> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:o> = <nat:3> * <var:Y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:o> = <nat:3> * <var:Y> ^ <nat:2> + <nat:3> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:o> = <nat:3> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:o> = <nat:3> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:1> * <var:Y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Y> /\ <var:o> = <nat:3> * <var:Y> ^ <nat:5> + <nat:3> * <var:Y> ^ <nat:4> + <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 