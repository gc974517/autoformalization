\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:R0> := <nat:7> ; <var:H> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Define the following segment of code <def:poly> in \emph{Imp} . Allowing ( given any integers $ <var:A> $ ) it to hold that $ <var:P> = <var:A> $ prior to executing the set of commands , it holds that we have $ <var:H> = <nat:7> $ . \end{theorem} \begin{proof} Using typical Hoare techniques gives us : \begin{eqnarray} \{ <var:P> = <var:A> \} \\ <var:R0> := <nat:7> ; \\ \{ <var:P> = <var:A> \land <var:R0> = <nat:7> \} \\ <var:H> := <var:R0> \\ \{ <var:P> = <var:A> \land <var:H> = <nat:7> \} \end{eqnarray} Hence , this program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:7> ; <var:H> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:P> = <var:A> }} <def:poly> {{ <var:H> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:A> /\ <var:R0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:A> /\ <var:H> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 