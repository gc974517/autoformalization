\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:4> ; <var:o> := <var:u0> \end{verbatim} Assume it to be that $ <var:L> = <var:n> $ before running the program , then $ <var:o> = <nat:4> $ when list of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for this code is demonstrated with usual Hoare techniques . Going to the next step , \begin{eqnarray} \{ <var:L> = <var:n> \} \, <var:u0> := <nat:4> \, \{ <var:L> = <var:n> \land <var:u0> = <nat:4> \} \end{eqnarray} Honing in on the upcoming command in the series of instructions , we see \begin{eqnarray} \{ <var:L> = <var:n> \} \, <var:u0> := <nat:4> \, \{ <var:L> = <var:n> \land <var:u0> = <nat:4> \} \end{eqnarray} This is deduced through the variable assignmet scheme given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:L> = <var:n> }} <var:u0> := <nat:4> ; <var:o> := <var:u0> {{ <var:o> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:o> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 