\begin{document} \begin{theorem} Let the following segment of code such that \begin{verbatim} <var:Q> := <nat:2> ; <var:Q> := <nat:1> + <var:Q> * <var:P> ; <var:Q> := <nat:1> + <var:Q> * <var:P> \end{verbatim} Allowing that we have $ <var:P> = <var:z> $ ahead of executing our list of instructions it must be that we see $ <var:Q> = <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the segment of code can be accomplished through standard Hoare techniques . Following , \verb | { <var:P> = <var:z> } <var:Q> := <nat:2> { <var:P> = <var:z> \land <var:Q> = <nat:2> } | . Moving forward to the subsequent bits of codefound in our program , \verb | { <var:P> = <var:z> } <var:Q> := <nat:2> { <var:P> = <var:z> \land <var:Q> = <nat:2> } | and \verb | { <var:P> = <var:z> \land <var:Q> = <nat:2> } <var:Q> := <nat:1> + <var:Q> * <var:P> { <var:P> = <var:z> \land <var:Q> = <nat:2> \cdot <var:z> + <nat:1> } | . This is deduced using the variable update scheme given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:P> = <var:z> }} <var:Q> := <nat:2> ; <var:Q> := <nat:1> + <var:Q> * <var:P> ; <var:Q> := <nat:1> + <var:Q> * <var:P> {{ <var:Q> = <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:Q> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:Q> = <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:z> /\ <var:Q> = <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 