\begin{document} \begin{theorem} We define the following code segment as \begin{verbatim} <var:P1> := <var:D> ; <var:P2> := <var:P1> * <var:D> ; <var:P0> := <nat:9> ; <var:P1> := <var:P1> * <nat:4> ; <var:P2> := <var:P2> * <nat:2> ; <var:T> := <var:P2> <var:T> := <var:T> + <var:P1> <var:T> := <var:T> + <var:P0> \end{verbatim} Allowing that we have $ <var:D> = <var:X> $ --- given $ <var:X> \in \mathbb{N} $ --- prior to interpreting our set of instructions it follows that we have $ <var:T> = <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be demonstrated by the following decorated list of commands . \begin{eqnarray} \{ <var:D> = <var:X> \} \\ <var:P1> := <var:D> ; \\ \{ <var:D> = <var:X> \land <var:P1> = <var:X> \} \\ <var:P2> := <var:P1> * <var:D> ; \\ \{ <var:D> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <var:X> ^ <nat:2> \} \end{eqnarray} Advancing executing our list of instructions produces : \begin{eqnarray} <var:P0> := <nat:9> ; \\ \{ <var:D> = <var:X> \land <var:P1> = <var:X> \land <var:P2> = <var:X> ^ <nat:2> \land <var:P0> = <nat:9> \} \\ <var:P1> := <var:P1> * <nat:4> ; \\ \{ <var:D> = <var:X> \land <var:P1> = <nat:4> * <var:X> \land <var:P2> = <var:X> ^ <nat:2> \land <var:P0> = <nat:9> \} \\ <var:P2> := <var:P2> * <nat:2> ; \\ \{ <var:D> = <var:X> \land <var:P1> = <nat:4> * <var:X> \land <var:P2> = <nat:2> * <var:X> ^ <nat:2> \land <var:P0> = <nat:9> \} \\ <var:T> := <var:P2> \\ \{ <var:D> = <var:X> \land <var:P1> = <nat:4> * <var:X> \land <var:P0> = <nat:9> \land <var:T> = <nat:2> * <var:X> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:P1> \\ \{ <var:D> = <var:X> \land <var:P0> = <nat:9> \land <var:T> = <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> \} \\ <var:T> := <var:T> + <var:P0> \\ \{ <var:D> = <var:X> \land <var:T> = <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:9> \} \end{eqnarray} Utilizing Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:D> = <var:X> }} <var:P1> := <var:D> ; <var:P2> := <var:P1> * <var:D> ; <var:P0> := <nat:9> ; <var:P1> := <var:P1> * <nat:4> ; <var:P2> := <var:P2> * <nat:2> ; <var:T> := <var:P2> <var:T> := <var:T> + <var:P1> <var:T> := <var:T> + <var:P0> {{ <var:T> = <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:P1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:P1> = <var:X> /\ <var:P2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:P1> = <var:X> /\ <var:P2> = <var:X> ^ <nat:2> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:P1> = <nat:4> * <var:X> /\ <var:P2> = <var:X> ^ <nat:2> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:P1> = <nat:4> * <var:X> /\ <var:P2> = <nat:2> * <var:X> ^ <nat:2> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:P1> = <nat:4> * <var:X> /\ <var:P0> = <nat:9> /\ <var:T> = <nat:2> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:P0> = <nat:9> /\ <var:T> = <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:X> /\ <var:T> = <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 