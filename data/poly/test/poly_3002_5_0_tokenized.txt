\begin{document} \begin{theorem} Consider a list of instructions such that \begin{verbatim} <var:C0> := <nat:5> ; <var:C1> := <nat:1> ; <var:C1> := <var:C1> * <var:l> ; <var:g> := <var:C1> ; <var:g> := <var:g> + <var:C0> \end{verbatim} Assuming $ <var:l> = <var:R> $ before the execution of the code segment it follows that we see $ <var:g> = <nat:1> * <var:R> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for this program can be demonstrated using Hoare reasoning . Moving forward to the following step in the set of commands , the variable assignmet code yielding $ <nat:5> $ toward $ <var:C0>$ . This line redefines $ \{ <var:l> = <var:R> \} $ as $ \{ <var:l> = <var:R> \land <var:C0> = <nat:5> \} $ . This is given with the assignment rule defined by Hoare reasoning . Following , the binding code \verb | <var:C1> := <nat:1> ; | . This command forwards the precondition $ \{ <var:l> = <var:R> \land <var:C0> = <nat:5> \} $ into the postcondition $ \{ <var:l> = <var:R> \land <var:C0> = <nat:5> \land <var:C1> = <nat:1> \} $ . Keeping momentum , we have the variable assignmet code defining $ <var:C1> * <var:l> $ toward $ <var:C1>$ . This statement takes the precondition $ \{ <var:l> = <var:R> \land <var:C0> = <nat:5> \land <var:C1> = <nat:1> \} $ as the postcondition $ \{ <var:l> = <var:R> \land <var:C0> = <nat:5> \land <var:C1> = <nat:1> \times <var:R> \} $ . This is given with the assignment law found in standard Hoare reasoning . Honing in on the following line found in the set of instructions , the variable update command \verb | <var:g> := <var:C1> ; | . This takes the precondition $ \{ <var:l> = <var:R> \land <var:C0> = <nat:5> \land <var:C1> = <nat:1> \times <var:R> \} $ to the postcondition $ \{ <var:l> = <var:R> \land <var:C0> = <nat:5> \land <var:g> = <nat:1> \times <var:R> \} $ . This is shown to be logically sound through the assignment scheme given by usual Hoare logic . Stepping through , the statement binding $ <var:g> + <var:C0$ toward $ <var:g>$ . This redefines the condition $ \{ <var:l> = <var:R> \land <var:C0> = <nat:5> \land <var:g> = <nat:1> \times <var:R> \} $ to the postcondition $ \{ <var:l> = <var:R> \land <var:g> = <nat:1> \times <var:R> + <nat:5> \} $ . This is sound with the assignment scheme from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:l> = <var:R> }} <var:C0> := <nat:5> ; <var:C1> := <nat:1> ; <var:C1> := <var:C1> * <var:l> ; <var:g> := <var:C1> ; <var:g> := <var:g> + <var:C0> {{ <var:g> = <nat:1> * <var:R> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:C0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:C0> = <nat:5> /\ <var:C1> = <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:C0> = <nat:5> /\ <var:g> = <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:R> /\ <var:g> = <nat:1> * <var:R> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 