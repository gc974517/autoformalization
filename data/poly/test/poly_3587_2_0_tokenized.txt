\begin{document} \begin{theorem} Consider a segment of code as \begin{verbatim} <var:v0> := <nat:4> ; <var:p> := <var:v0> \end{verbatim} Assuming --- letting positive numbers $ <var:l> $ --- it to hold that $ <var:U> = <var:l> $ before the execution of this program it holds that we see $ <var:p> = <nat:4> $ after program has exited . \end{theorem} \begin{proof} Observe that the following decorated set of commands . \begin{eqnarray} \{ <var:U> = <var:l> \} \\ <var:v0> := <nat:4> ; \\ \{ <var:U> = <var:l> \land <var:v0> = <nat:4> \} \\ <var:p> := <var:v0> \\ \{ <var:U> = <var:l> \land <var:p> = <nat:4> \} \end{eqnarray} The application of standard Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:U> = <var:l> }} <var:v0> := <nat:4> ; <var:p> := <var:v0> {{ <var:p> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:l> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:l> /\ <var:p> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 