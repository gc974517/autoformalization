\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F1> := <var:q> ; <var:F2> := <var:F1> * <var:q> ; <var:F0> := <nat:3> ; <var:F1> := <var:F1> * <nat:3> ; <var:F2> := <var:F2> * <nat:1> ; <var:p> := <var:F2> <var:p> := <var:p> + <var:F1> <var:p> := <var:p> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Assuming that we have $ <var:q> = <var:d> $ ( for every whole numbers $ <var:d> $ ) prior to executing our segment of code it follows that $ <var:p> = <nat:1> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:3> $ . \end{theorem} \begin{proof} Applying standard Hoare reasoning yields : \begin{eqnarray} \{ <var:q> = <var:d> \} \\ <var:F1> := <var:q> ; \\ \{ <var:q> = <var:d> \land <var:F1> = <var:d> \} \\ <var:F2> := <var:F1> * <var:q> ; \\ \{ <var:q> = <var:d> \land <var:F1> = <var:d> \land <var:F2> = <var:d> ^ <nat:2> \} \\ <var:F0> := <nat:3> ; \\ \{ <var:q> = <var:d> \land <var:F1> = <var:d> \land <var:F2> = <var:d> ^ <nat:2> \land <var:F0> = <nat:3> \} \\ <var:F1> := <var:F1> * <nat:3> ; \\ \{ <var:q> = <var:d> \land <var:F1> = <nat:3> \cdot <var:d> \land <var:F2> = <var:d> ^ <nat:2> \land <var:F0> = <nat:3> \} \\ <var:F2> := <var:F2> * <nat:1> ; \\ \{ <var:q> = <var:d> \land <var:F1> = <nat:3> \cdot <var:d> \land <var:F2> = <nat:1> \cdot <var:d> ^ <nat:2> \land <var:F0> = <nat:3> \} \\ <var:p> := <var:F2> \\ \{ <var:q> = <var:d> \land <var:F1> = <nat:3> \cdot <var:d> \land <var:F0> = <nat:3> \land <var:p> = <nat:1> \cdot <var:d> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:F1> \\ \{ <var:q> = <var:d> \land <var:F0> = <nat:3> \land <var:p> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> \} \\ <var:p> := <var:p> + <var:F0> \\ \{ <var:q> = <var:d> \land <var:p> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + <nat:3> \} \end{eqnarray} Thusly , this code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <def:poly> := <var:F1> := <var:q> ; <var:F2> := <var:F1> * <var:q> ; <var:F0> := <nat:3> ; <var:F1> := <var:F1> * <nat:3> ; <var:F2> := <var:F2> * <nat:1> ; <var:p> := <var:F2> <var:p> := <var:p> + <var:F1> <var:p> := <var:p> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:q> = <var:d> }} <def:poly> {{ <var:p> = <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:F1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:F1> = <var:d> /\ <var:F2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:F1> = <var:d> /\ <var:F2> = <var:d> ^ <nat:2> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:F1> = <nat:3> * <var:d> /\ <var:F2> = <var:d> ^ <nat:2> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:F1> = <nat:3> * <var:d> /\ <var:F2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:F1> = <nat:3> * <var:d> /\ <var:F0> = <nat:3> /\ <var:p> = <nat:1> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:F0> = <nat:3> /\ <var:p> = <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:d> /\ <var:p> = <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 