\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} as \begin{verbatim} <var:Y> := <nat:1> ; <var:Y> := <var:Y> * <var:H> ; <var:Y> := <nat:4> + <var:Y> * <var:H> ; <var:Y> := <nat:4> + <var:Y> * <var:H> ; <var:Y> := <var:Y> * <var:H> ; <var:Y> := <nat:3> + <var:Y> * <var:H> ; <var:Y> := <nat:4> + <var:Y> * <var:H> ; <var:Y> := <nat:4> + <var:Y> * <var:H> ; <var:Y> := <nat:1> + <var:Y> * <var:H> ; <var:Y> := <nat:3> + <var:Y> * <var:H> ; <var:Y> := <var:Y> * <var:H> ; <var:Y> := <nat:4> + <var:Y> * <var:H> ; <var:Y> := <nat:4> + <var:Y> * <var:H> \end{verbatim} Assume $ <var:H> = <var:l> $ before the execution of this set of commands , it follows that we see $ <var:Y> = <nat:1> \cdot <var:l> ^ <nat:12> + <nat:4> \cdot <var:l> ^ <nat:10> + <nat:4> \cdot <var:l> ^ <nat:9> + <nat:3> \cdot <var:l> ^ <nat:7> + <nat:4> \cdot <var:l> ^ <nat:6> + <nat:4> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:4> + <nat:3> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our set of commands can be shown with typical Hoare logic . Taking another step toward the following piece of code in the code segment , we have the variable assignmet line letting $ <nat:1> $ as $ <var:Y>$ . This line redefines the condition $ \{ <var:H> = <var:l> \} $ into the postcondition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> \} $ . This is ensured with the assignment scheme defined by usual Hoare techniques . Advancing , the environment update line \verb | <var:Y> := <var:Y> * <var:H> ; | . This takes $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> \} $ as the postcondition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> + \} $ . Stepping through , we have the statement \verb | <var:Y> := <nat:4> + <var:Y> * <var:H> ; | . This advances $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> + \} $ as $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> \} $ . This is shown to be logically sound with the assignment law of standard Hoare logic . Moving on to the proceeding step contained in our program , we see the variable assignmet command yielding $ <nat:4> + <var:Y> * <var:H> $ into $ <var:Y>$ . This redefines the precondition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> \} $ to the condition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> + <nat:4> \} $ . This is rigorously given through the assignment inference rule in typical Hoare logic . Moving forward , we see the command \verb | <var:Y> := <var:Y> * <var:H> ; | . This code forwards the precondition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> + <nat:4> \} $ as the postcondition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + \} $ . Shifting focus toward the next step contained in our set of instructions , we have the assignment line binding $ <nat:3> + <var:Y> * <var:H> $ to $ <var:Y>$ . This forwards the precondition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + \} $ into $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:3> \} $ . Advancing to the next line of code contained in the list of instructions , we see the variable binding code \verb | <var:Y> := <nat:4> + <var:Y> * <var:H> ; | . This code transfers $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:3> \} $ as $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:3> * <var:l> + <nat:4> \} $ . Moving forward to the next step , the variable assignmet line assigning $ <nat:4> + <var:Y> * <var:H> $ toward $ <var:Y>$ . This command forwards $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:3> * <var:l> + <nat:4> \} $ to the postcondition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> \} $ . This is shown with the assignment scheme given by typical Hoare techniques . Advancing on , the variable update statement \verb | <var:Y> := <nat:1> + <var:Y> * <var:H> ; | . This code redefines $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> \} $ toward the condition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> \} $ . Moving onward , we see the binding code \verb | <var:Y> := <nat:3> + <var:Y> * <var:H> ; | . This moves the precondition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> \} $ into $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:9> + <nat:4> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> \} $ . Going to the next step , we have the variable binding statement \verb | <var:Y> := <var:Y> * <var:H> ; | . This line forwards the precondition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:9> + <nat:4> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> \} $ as the postcondition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:10> + <nat:4> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + \} $ . Focusing on the following command contained in our code , the variable binding command assigning $ <nat:4> + <var:Y> * <var:H> $ as $ <var:Y>$ . This takes the precondition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:10> + <nat:4> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + \} $ to $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:11> + <nat:4> * <var:l> ^ <nat:9> + <nat:4> * <var:l> ^ <nat:8> + <nat:3> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:4> \} $ . After , we see the line \verb | <var:Y> := <nat:4> + <var:Y> * <var:H> | . This transfers the condition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:11> + <nat:4> * <var:l> ^ <nat:9> + <nat:4> * <var:l> ^ <nat:8> + <nat:3> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:4> \} $ toward the condition $ \{ <var:H> = <var:l> \land <var:Y> = <nat:1> * <var:l> ^ <nat:12> + <nat:4> * <var:l> ^ <nat:10> + <nat:4> * <var:l> ^ <nat:9> + <nat:3> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:4> * <var:l> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:H> = <var:l> }} <var:Y> := <nat:1> ; <var:Y> := <var:Y> * <var:H> ; <var:Y> := <nat:4> + <var:Y> * <var:H> ; <var:Y> := <nat:4> + <var:Y> * <var:H> ; <var:Y> := <var:Y> * <var:H> ; <var:Y> := <nat:3> + <var:Y> * <var:H> ; <var:Y> := <nat:4> + <var:Y> * <var:H> ; <var:Y> := <nat:4> + <var:Y> * <var:H> ; <var:Y> := <nat:1> + <var:Y> * <var:H> ; <var:Y> := <nat:3> + <var:Y> * <var:H> ; <var:Y> := <var:Y> * <var:H> ; <var:Y> := <nat:4> + <var:Y> * <var:H> ; <var:Y> := <nat:4> + <var:Y> * <var:H> {{ <var:Y> = <nat:1> * <var:l> ^ <nat:12> + <nat:4> * <var:l> ^ <nat:10> + <nat:4> * <var:l> ^ <nat:9> + <nat:3> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:4> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:Y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:Y> = <nat:1> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:Y> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:Y> = <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:Y> = <nat:1> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:Y> = <nat:1> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:Y> = <nat:1> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:3> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:Y> = <nat:1> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:Y> = <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:Y> = <nat:1> * <var:l> ^ <nat:9> + <nat:4> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:Y> = <nat:1> * <var:l> ^ <nat:10> + <nat:4> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:Y> = <nat:1> * <var:l> ^ <nat:11> + <nat:4> * <var:l> ^ <nat:9> + <nat:4> * <var:l> ^ <nat:8> + <nat:3> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:l> /\ <var:Y> = <nat:1> * <var:l> ^ <nat:12> + <nat:4> * <var:l> ^ <nat:10> + <nat:4> * <var:l> ^ <nat:9> + <nat:3> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 