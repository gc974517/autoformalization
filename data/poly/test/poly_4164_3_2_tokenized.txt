\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} such that \begin{verbatim} <var:y> := <nat:4> ; <var:y> := <nat:4> + <var:y> * <var:R> ; <var:y> := <nat:1> + <var:y> * <var:R> \end{verbatim} Assuming that we have $ <var:R> = <var:x> $ ahead of running the segment of code , then we see $ <var:y> = <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:1> $ . \end{theorem} \begin{proof} Using usual Hoare logic results in : \begin{eqnarray} \{ <var:R> = <var:x> \} \\ <var:y> := <nat:4> ; \\ \{ <var:R> = <var:x> \land <var:y> = <nat:4> \} \\ <var:y> := <nat:4> + <var:y> * <var:R> ; \\ \{ <var:R> = <var:x> \land <var:y> = <nat:4> \times <var:x> + <nat:4> \} \\ <var:y> := <nat:1> + <var:y> * <var:R> \\ \{ <var:R> = <var:x> \land <var:y> = <nat:4> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:1> \} \end{eqnarray} As a result , the series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:R> = <var:x> }} <var:y> := <nat:4> ; <var:y> := <nat:4> + <var:y> * <var:R> ; <var:y> := <nat:1> + <var:y> * <var:R> {{ <var:y> = <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:y> = <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:x> /\ <var:y> = <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 