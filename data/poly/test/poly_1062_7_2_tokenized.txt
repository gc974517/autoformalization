\begin{document} \begin{theorem} Consider the following segment of code in \emph{Imp} as \begin{verbatim} <var:u> := <nat:4> ; <var:u> := <nat:4> + <var:u> * <var:L> ; <var:u> := <var:u> * <var:L> ; <var:u> := <var:u> * <var:L> ; <var:u> := <var:u> * <var:L> ; <var:u> := <nat:1> + <var:u> * <var:L> ; <var:u> := <nat:4> + <var:u> * <var:L> \end{verbatim} Given --- taking $ <var:F> \in \mathbb{Z}^+ $ --- that $ <var:L> = <var:F> $ ahead of evaluating this list of instructions it must be that $ <var:u> = <nat:4> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> + <nat:4> $ . \end{theorem} \begin{proof} The application of standard Hoare logic gives : \begin{eqnarray} \{ <var:L> = <var:F> \} \\ <var:u> := <nat:4> ; \\ \{ <var:L> = <var:F> \land <var:u> = <nat:4> \} \\ <var:u> := <nat:4> + <var:u> * <var:L> ; \\ \{ <var:L> = <var:F> \land <var:u> = <nat:4> \cdot <var:F> + <nat:4> \} \\ <var:u> := <var:u> * <var:L> ; \\ \{ <var:L> = <var:F> \land <var:u> = <nat:4> \cdot <var:F> ^ <nat:2> + <nat:4> \cdot <var:F> + \} \\ <var:u> := <var:u> * <var:L> ; \\ \{ <var:L> = <var:F> \land <var:u> = <nat:4> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> + \} \\ <var:u> := <var:u> * <var:L> ; \\ \{ <var:L> = <var:F> \land <var:u> = <nat:4> \cdot <var:F> ^ <nat:4> + <nat:4> \cdot <var:F> ^ <nat:3> + \} \\ <var:u> := <nat:1> + <var:u> * <var:L> ; \\ \{ <var:L> = <var:F> \land <var:u> = <nat:4> \cdot <var:F> ^ <nat:5> + <nat:4> \cdot <var:F> ^ <nat:4> + <nat:1> \} \\ <var:u> := <nat:4> + <var:u> * <var:L> \\ \{ <var:L> = <var:F> \land <var:u> = <nat:4> \cdot <var:F> ^ <nat:6> + <nat:4> \cdot <var:F> ^ <nat:5> + <nat:1> \cdot <var:F> + <nat:4> \} \end{eqnarray} Considering the preceding argument , our list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:L> = <var:F> }} <var:u> := <nat:4> ; <var:u> := <nat:4> + <var:u> * <var:L> ; <var:u> := <var:u> * <var:L> ; <var:u> := <var:u> * <var:L> ; <var:u> := <var:u> * <var:L> ; <var:u> := <nat:1> + <var:u> * <var:L> ; <var:u> := <nat:4> + <var:u> * <var:L> {{ <var:u> = <nat:4> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:u> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:u> = <nat:4> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:u> = <nat:4> * <var:F> ^ <nat:6> + <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 