\begin{document} \begin{theorem} Consider a set of instructions : \begin{verbatim} <var:d> := <nat:4> ; <var:d> := <nat:3> + <var:d> * <var:Z> ; <var:d> := <nat:3> + <var:d> * <var:Z> ; <var:d> := <nat:3> + <var:d> * <var:Z> ; <var:d> := <nat:4> + <var:d> * <var:Z> ; <var:d> := <nat:1> + <var:d> * <var:Z> ; <var:d> := <var:d> * <var:Z> ; <var:d> := <nat:3> + <var:d> * <var:Z> ; <var:d> := <nat:2> + <var:d> * <var:Z> ; <var:d> := <nat:4> + <var:d> * <var:Z> \end{verbatim} Allowing that $ <var:Z> = <var:h> $ ahead of running our code segment then we see $ <var:d> = <nat:4> \cdot <var:h> ^ <nat:9> + <nat:3> \cdot <var:h> ^ <nat:8> + <nat:3> \cdot <var:h> ^ <nat:7> + <nat:3> \cdot <var:h> ^ <nat:6> + <nat:4> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be seen using usual Hoare logic . Paying attention to the following line found in the program , the environment update command assigning $ <nat:4> $ toward $ <var:d>$ . This statement advances $ \{ <var:Z> = <var:h> \} $ to the condition $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \} $ . Advancing to the following line of code contained in the code segment , we have the variable assignmet statement assigning $ <nat:3> + <var:d> * <var:Z> $ to $ <var:d>$ . This code redefines the condition $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \} $ as the postcondition $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> + <nat:3> \} $ . This is ensured using the assignment rule of Hoare logic . Immediately after , the statement \verb | <var:d> := <nat:3> + <var:d> * <var:Z> ; | . This takes the condition $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> + <nat:3> \} $ into the condition $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:3> \} $ . This is known to be sound with the assignment inference rule found in standard Hoare reasoning . Immediately following , we see the environment update line assigning $ <nat:3> + <var:d> * <var:Z> $ toward $ <var:d>$ . This statement redefines the condition $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:3> \} $ as the postcondition $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:3> \} $ . This is guaranteed using the assignment rule defined in Hoare techniques . Jumping to the subsequent piece of code found in our code segment , the binding code \verb | <var:d> := <nat:4> + <var:d> * <var:Z> ; | . This command moves $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:3> \} $ as $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:4> \} $ . Moving on to the next step , we see the assignment statement \verb | <var:d> := <nat:1> + <var:d> * <var:Z> ; | . This statement forwards $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:4> \} $ to the postcondition $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:1> \} $ . Stepping forward , the variable assignmet code \verb | <var:d> := <var:d> * <var:Z> ; | . This command moves the precondition $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:1> \} $ to $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + \} $ . This is guaranteed using the assignment law of typical Hoare techniques . Stepping through , we see the code defining $ <nat:3> + <var:d> * <var:Z> $ into $ <var:d>$ . This statement transfers $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + \} $ as $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:7> + <nat:3> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:4> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:3> \} $ . This is guaranteed through the assignment scheme obtained from Hoare logic . Observing the next piece of code found in our set of instructions , the binding command binding $ <nat:2> + <var:d> * <var:Z> $ toward $ <var:d>$ . This statement redefines $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:7> + <nat:3> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:3> \cdot <var:h> ^ <nat:4> + <nat:4> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:3> \} $ as the condition $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:8> + <nat:3> \cdot <var:h> ^ <nat:7> + <nat:3> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:4> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> + <nat:2> \} $ . This is sound through the assignment law defined in usual Hoare reasoning . Advancing , we see the environment update line \verb | <var:d> := <nat:4> + <var:d> * <var:Z> | . This forwards the condition $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:8> + <nat:3> \cdot <var:h> ^ <nat:7> + <nat:3> \cdot <var:h> ^ <nat:6> + <nat:3> \cdot <var:h> ^ <nat:5> + <nat:4> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> + <nat:2> \} $ toward $ \{ <var:Z> = <var:h> \land <var:d> = <nat:4> \cdot <var:h> ^ <nat:9> + <nat:3> \cdot <var:h> ^ <nat:8> + <nat:3> \cdot <var:h> ^ <nat:7> + <nat:3> \cdot <var:h> ^ <nat:6> + <nat:4> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:Z> = <var:h> }} <var:d> := <nat:4> ; <var:d> := <nat:3> + <var:d> * <var:Z> ; <var:d> := <nat:3> + <var:d> * <var:Z> ; <var:d> := <nat:3> + <var:d> * <var:Z> ; <var:d> := <nat:4> + <var:d> * <var:Z> ; <var:d> := <nat:1> + <var:d> * <var:Z> ; <var:d> := <var:d> * <var:Z> ; <var:d> := <nat:3> + <var:d> * <var:Z> ; <var:d> := <nat:2> + <var:d> * <var:Z> ; <var:d> := <nat:4> + <var:d> * <var:Z> {{ <var:d> = <nat:4> * <var:h> ^ <nat:9> + <nat:3> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:d> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:d> = <nat:4> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:d> = <nat:4> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:d> = <nat:4> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:d> = <nat:4> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:d> = <nat:4> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:d> = <nat:4> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:d> = <nat:4> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:d> = <nat:4> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:3> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:h> /\ <var:d> = <nat:4> * <var:h> ^ <nat:9> + <nat:3> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 