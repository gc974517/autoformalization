\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} : \begin{verbatim} <var:W1> := <var:h> ; <var:W2> := <var:W1> * <var:h> ; <var:W3> := <var:W2> * <var:h> ; <var:W4> := <var:W3> * <var:h> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:2> ; <var:W2> := <var:W2> * <nat:6> ; <var:W3> := <var:W3> * <nat:7> ; <var:W4> := <var:W4> * <nat:8> ; <var:M> := <var:W4> <var:M> := <var:M> + <var:W3> <var:M> := <var:M> + <var:W2> <var:M> := <var:M> + <var:W1> <var:M> := <var:M> + <var:W0> \end{verbatim} Given it to be that $ <var:h> = <var:k> $ before executing this segment of code , it follows that we have $ <var:M> = <nat:8> * <var:k> ^ <nat:4> + <nat:7> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> $ once series of instructions terminates . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions is accomplished through standard Hoare reasoning . Shifting focus toward the upcoming bits of codecontained in the segment of code , we see \verb | { <var:h> = <var:k> } <var:W1> := <var:h> { <var:h> = <var:k> \land <var:W1> = <var:k> } | , \verb | { <var:h> = <var:k> \land <var:W1> = <var:k> } <var:W2> := <var:W1> * <var:h> { <var:h> = <var:k> \land <var:W1> = <var:k> \land <var:W2> = <var:k> ^ <nat:2> } | and \verb | { <var:h> = <var:k> \land <var:W1> = <var:k> \land <var:W2> = <var:k> ^ <nat:2> } <var:W3> := <var:W2> * <var:h> { <var:h> = <var:k> \land <var:W1> = <var:k> \land <var:W2> = <var:k> ^ <nat:2> \land <var:W3> = <var:k> ^ <nat:3> } | . Shifting focus toward the subsequent statement found in the series of instructions , we have \verb | { <var:h> = <var:k> } <var:W1> := <var:h> { <var:h> = <var:k> \land <var:W1> = <var:k> } | . Now , we have \verb | { <var:h> = <var:k> } <var:W1> := <var:h> { <var:h> = <var:k> \land <var:W1> = <var:k> } | , \verb | { <var:h> = <var:k> \land <var:W1> = <var:k> } <var:W2> := <var:W1> * <var:h> { <var:h> = <var:k> \land <var:W1> = <var:k> \land <var:W2> = <var:k> ^ <nat:2> } | , \verb | { <var:h> = <var:k> \land <var:W1> = <var:k> \land <var:W2> = <var:k> ^ <nat:2> } <var:W3> := <var:W2> * <var:h> { <var:h> = <var:k> \land <var:W1> = <var:k> \land <var:W2> = <var:k> ^ <nat:2> \land <var:W3> = <var:k> ^ <nat:3> } | , \verb | { <var:h> = <var:k> \land <var:W1> = <var:k> \land <var:W2> = <var:k> ^ <nat:2> \land <var:W3> = <var:k> ^ <nat:3> } <var:W4> := <var:W3> * <var:h> { <var:h> = <var:k> \land <var:W1> = <var:k> \land <var:W2> = <var:k> ^ <nat:2> \land <var:W3> = <var:k> ^ <nat:3> \land <var:W4> = <var:k> ^ <nat:4> } | , \verb | { <var:h> = <var:k> \land <var:W1> = <var:k> \land <var:W2> = <var:k> ^ <nat:2> \land <var:W3> = <var:k> ^ <nat:3> \land <var:W4> = <var:k> ^ <nat:4> } <var:W0> := <nat:3> { <var:h> = <var:k> \land <var:W1> = <var:k> \land <var:W2> = <var:k> ^ <nat:2> \land <var:W3> = <var:k> ^ <nat:3> \land <var:W4> = <var:k> ^ <nat:4> \land <var:W0> = <nat:3> } | , \verb | { <var:h> = <var:k> \land <var:W1> = <var:k> \land <var:W2> = <var:k> ^ <nat:2> \land <var:W3> = <var:k> ^ <nat:3> \land <var:W4> = <var:k> ^ <nat:4> \land <var:W0> = <nat:3> } <var:W1> := <var:W1> * <nat:2> { <var:h> = <var:k> \land <var:W1> = <nat:2> \times <var:k> \land <var:W2> = <var:k> ^ <nat:2> \land <var:W3> = <var:k> ^ <nat:3> \land <var:W4> = <var:k> ^ <nat:4> \land <var:W0> = <nat:3> } | and \verb | { <var:h> = <var:k> \land <var:W1> = <nat:2> \times <var:k> \land <var:W2> = <var:k> ^ <nat:2> \land <var:W3> = <var:k> ^ <nat:3> \land <var:W4> = <var:k> ^ <nat:4> \land <var:W0> = <nat:3> } <var:W2> := <var:W2> * <nat:6> { <var:h> = <var:k> \land <var:W1> = <nat:2> \times <var:k> \land <var:W2> = <nat:6> \times <var:k> ^ <nat:2> \land <var:W3> = <var:k> ^ <nat:3> \land <var:W4> = <var:k> ^ <nat:4> \land <var:W0> = <nat:3> } | . This is shown by the variable assignmet rule from typical Hoare logic . Honing in on the upcoming command seen in our list of instructions , we see \verb | { <var:h> = <var:k> } <var:W1> := <var:h> { <var:h> = <var:k> \land <var:W1> = <var:k> } | . This is ensured using the assignment scheme given in standard Hoare techniques . Advancing to the following bits of codein the list of instructions , we have \verb | { <var:h> = <var:k> } <var:W1> := <var:h> { <var:h> = <var:k> \land <var:W1> = <var:k> } | and \verb | { <var:h> = <var:k> \land <var:W1> = <var:k> } <var:W2> := <var:W1> * <var:h> { <var:h> = <var:k> \land <var:W1> = <var:k> \land <var:W2> = <var:k> ^ <nat:2> } | . This is shown with the assignment rule given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <var:W4> : string := " <var:W4> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:h> = <var:k> }} <var:W1> := <var:h> ; <var:W2> := <var:W1> * <var:h> ; <var:W3> := <var:W2> * <var:h> ; <var:W4> := <var:W3> * <var:h> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:2> ; <var:W2> := <var:W2> * <nat:6> ; <var:W3> := <var:W3> * <nat:7> ; <var:W4> := <var:W4> * <nat:8> ; <var:M> := <var:W4> <var:M> := <var:M> + <var:W3> <var:M> := <var:M> + <var:W2> <var:M> := <var:M> + <var:W1> <var:M> := <var:M> + <var:W0> {{ <var:M> = <nat:8> * <var:k> ^ <nat:4> + <nat:7> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:W1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:W1> = <var:k> /\ <var:W2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:W1> = <var:k> /\ <var:W2> = <var:k> ^ <nat:2> /\ <var:W3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:W1> = <var:k> /\ <var:W2> = <var:k> ^ <nat:2> /\ <var:W3> = <var:k> ^ <nat:3> /\ <var:W4> = <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:W1> = <var:k> /\ <var:W2> = <var:k> ^ <nat:2> /\ <var:W3> = <var:k> ^ <nat:3> /\ <var:W4> = <var:k> ^ <nat:4> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:W1> = <nat:2> * <var:k> /\ <var:W2> = <var:k> ^ <nat:2> /\ <var:W3> = <var:k> ^ <nat:3> /\ <var:W4> = <var:k> ^ <nat:4> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:W1> = <nat:2> * <var:k> /\ <var:W2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:W3> = <var:k> ^ <nat:3> /\ <var:W4> = <var:k> ^ <nat:4> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:W1> = <nat:2> * <var:k> /\ <var:W2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:W3> = <nat:7> * <var:k> ^ <nat:3> /\ <var:W4> = <var:k> ^ <nat:4> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:W1> = <nat:2> * <var:k> /\ <var:W2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:W3> = <nat:7> * <var:k> ^ <nat:3> /\ <var:W4> = <nat:8> * <var:k> ^ <nat:4> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:W1> = <nat:2> * <var:k> /\ <var:W2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:W3> = <nat:7> * <var:k> ^ <nat:3> /\ <var:W0> = <nat:3> /\ <var:M> = <nat:8> * <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:W1> = <nat:2> * <var:k> /\ <var:W2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:W0> = <nat:3> /\ <var:M> = <nat:8> * <var:k> ^ <nat:4> + <nat:7> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:W1> = <nat:2> * <var:k> /\ <var:W0> = <nat:3> /\ <var:M> = <nat:8> * <var:k> ^ <nat:4> + <nat:7> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:W0> = <nat:3> /\ <var:M> = <nat:8> * <var:k> ^ <nat:4> + <nat:7> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> + <nat:2> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:M> = <nat:8> * <var:k> ^ <nat:4> + <nat:7> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 