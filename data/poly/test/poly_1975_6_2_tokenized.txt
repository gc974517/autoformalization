\begin{document} \begin{theorem} We define a code as \begin{verbatim} <var:p> := <nat:3> ; <var:p> := <nat:1> + <var:p> * <var:U> ; <var:p> := <nat:1> + <var:p> * <var:U> ; <var:p> := <nat:1> + <var:p> * <var:U> ; <var:p> := <nat:1> + <var:p> * <var:U> ; <var:p> := <nat:1> + <var:p> * <var:U> \end{verbatim} Allowing it to be that $ <var:U> = <var:V> $ ahead of evaluating this list of instructions then $ <var:p> = <nat:3> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> $ . \end{theorem} \begin{proof} Using standard Hoare techniques results in : \begin{eqnarray} \{ <var:U> = <var:V> \} \\ <var:p> := <nat:3> ; \\ \{ <var:U> = <var:V> \land <var:p> = <nat:3> \} \\ <var:p> := <nat:1> + <var:p> * <var:U> ; \\ \{ <var:U> = <var:V> \land <var:p> = <nat:3> \times <var:V> + <nat:1> \} \\ <var:p> := <nat:1> + <var:p> * <var:U> ; \\ \{ <var:U> = <var:V> \land <var:p> = <nat:3> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:1> \} \\ <var:p> := <nat:1> + <var:p> * <var:U> ; \\ \{ <var:U> = <var:V> \land <var:p> = <nat:3> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:1> \} \\ <var:p> := <nat:1> + <var:p> * <var:U> ; \\ \{ <var:U> = <var:V> \land <var:p> = <nat:3> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:1> \} \\ <var:p> := <nat:1> + <var:p> * <var:U> \\ \{ <var:U> = <var:V> \land <var:p> = <nat:3> \times <var:V> ^ <nat:5> + <nat:1> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:1> \} \end{eqnarray} Thusly , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:U> = <var:V> }} <var:p> := <nat:3> ; <var:p> := <nat:1> + <var:p> * <var:U> ; <var:p> := <nat:1> + <var:p> * <var:U> ; <var:p> := <nat:1> + <var:p> * <var:U> ; <var:p> := <nat:1> + <var:p> * <var:U> ; <var:p> := <nat:1> + <var:p> * <var:U> {{ <var:p> = <nat:3> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:p> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:p> = <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:p> = <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:p> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:p> = <nat:3> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:V> /\ <var:p> = <nat:3> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 