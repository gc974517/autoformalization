\begin{document} \begin{theorem} Consider the following code : \begin{verbatim} <var:O0> := <nat:1> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:R> ; <var:O2> := <var:O2> * <var:R> ; <var:O4> := <nat:3> ; <var:O4> := <var:O4> * <var:R> ; <var:O4> := <var:O4> * <var:R> ; <var:O4> := <var:O4> * <var:R> ; <var:O4> := <var:O4> * <var:R> ; <var:c> := <var:O4> ; <var:c> := <var:c> + <var:O2> ; <var:c> := <var:c> + <var:O0> \end{verbatim} Allowing it to be that $ <var:R> = <var:j> $ , given all integers $ <var:j> $ , ahead of running our program , it holds that we have $ <var:c> = <nat:3> \times <var:j> ^ <nat:4> + <nat:1> \times <var:j> ^ <nat:2> + <nat:1> $ after series of instructions exits . \end{theorem} \begin{proof} Proving correctness for the set of instructions is accomplished by Hoare techniques . Going to the next step , we see the statement \verb | <var:O0> := <nat:1> ; | . This statement transfers the precondition $ \{ <var:R> = <var:j> \} $ as the postcondition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \} $ . This is rigorously given by the assignment rule defined in usual Hoare reasoning . Focusing on the upcoming statement in our code , we have the assignment statement \verb | <var:O2> := <nat:1> ; | . This transfers the precondition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \} $ as the condition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \} $ . This is sound with the assignment inference rule given in Hoare logic . After , the binding command \verb | <var:O2> := <var:O2> * <var:R> ; | . This statement advances the condition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \} $ toward the postcondition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> \} $ . This is shown to be logically sound with the assignment scheme given in standard Hoare logic . Further , we see the variable binding line assigning $ <var:O2> * <var:R> $ into $ <var:O2>$ . This line forwards $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> \} $ as $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \} $ . This is deduced through the assignment law from usual Hoare logic . Moving onward , we see the environment update command assigning $ <nat:3> $ to $ <var:O4>$ . This moves the condition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \} $ into $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \land <var:O4> = <nat:3> \} $ . Moving forward to the subsequent piece of code found in our program , we see the variable binding code binding $ <var:O4> * <var:R> $ to $ <var:O4>$ . This forwards the precondition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \land <var:O4> = <nat:3> \} $ into $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \land <var:O4> = <nat:3> \cdot <var:j> \} $ . This is rigorously given through the assignment law in standard Hoare techniques . Moving forward to the next step , we see the variable update code \verb | <var:O4> := <var:O4> * <var:R> ; | . This statement advances $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \land <var:O4> = <nat:3> \cdot <var:j> \} $ to the postcondition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \land <var:O4> = <nat:3> \cdot <var:j> ^ <nat:2> \} $ . This is rigorously given through the assignment law given by Hoare logic . Moving forward , we have the environment update code \verb | <var:O4> := <var:O4> * <var:R> ; | . This forwards $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \land <var:O4> = <nat:3> \cdot <var:j> ^ <nat:2> \} $ to the postcondition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \land <var:O4> = <nat:3> \cdot <var:j> ^ <nat:3> \} $ . Taking another step toward the following bit of code found in our program , we have the environment update line \verb | <var:O4> := <var:O4> * <var:R> ; | . This command transfers the precondition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \land <var:O4> = <nat:3> \cdot <var:j> ^ <nat:3> \} $ into $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \land <var:O4> = <nat:3> \cdot <var:j> ^ <nat:4> \} $ . This is sound through the assignment rule found in usual Hoare logic . Moving forward to the proceeding statement contained in our set of commands , the assignment statement letting $ <var:O4> $ as $ <var:c>$ . This line moves the precondition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \land <var:O4> = <nat:3> \cdot <var:j> ^ <nat:4> \} $ as the postcondition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \land <var:c> = <nat:3> \cdot <var:j> ^ <nat:4> \} $ . Stepping forward , we have the variable update code \verb | <var:c> := <var:c> + <var:O2> ; | . This advances the condition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:O2> = <nat:1> \cdot <var:j> ^ <nat:2> \land <var:c> = <nat:3> \cdot <var:j> ^ <nat:4> \} $ toward the condition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:c> = <nat:3> \cdot <var:j> ^ <nat:4> + <nat:1> \cdot <var:j> ^ <nat:2> \} $ . This is rigorously given using the assignment rule in typical Hoare logic . Immediately after , we see the command \verb | <var:c> := <var:c> + <var:O0> | . This line takes the precondition $ \{ <var:R> = <var:j> \land <var:O0> = <nat:1> \land <var:c> = <nat:3> \cdot <var:j> ^ <nat:4> + <nat:1> \cdot <var:j> ^ <nat:2> \} $ toward the postcondition $ \{ <var:R> = <var:j> \land <var:c> = <nat:3> \cdot <var:j> ^ <nat:4> + <nat:1> \cdot <var:j> ^ <nat:2> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O4> : string := " <var:O4> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:R> = <var:j> }} <var:O0> := <nat:1> ; <var:O2> := <nat:1> ; <var:O2> := <var:O2> * <var:R> ; <var:O2> := <var:O2> * <var:R> ; <var:O4> := <nat:3> ; <var:O4> := <var:O4> * <var:R> ; <var:O4> := <var:O4> * <var:R> ; <var:O4> := <var:O4> * <var:R> ; <var:O4> := <var:O4> * <var:R> ; <var:c> := <var:O4> ; <var:c> := <var:c> + <var:O2> ; <var:c> := <var:c> + <var:O0> {{ <var:c> = <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:O0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:O0> = <nat:1> /\ <var:O2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:O0> = <nat:1> /\ <var:O2> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:O0> = <nat:1> /\ <var:O2> = <nat:1> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:O0> = <nat:1> /\ <var:O2> = <nat:1> * <var:j> ^ <nat:2> /\ <var:O4> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:O0> = <nat:1> /\ <var:O2> = <nat:1> * <var:j> ^ <nat:2> /\ <var:O4> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:O0> = <nat:1> /\ <var:O2> = <nat:1> * <var:j> ^ <nat:2> /\ <var:O4> = <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:O0> = <nat:1> /\ <var:O2> = <nat:1> * <var:j> ^ <nat:2> /\ <var:O4> = <nat:3> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:O0> = <nat:1> /\ <var:O2> = <nat:1> * <var:j> ^ <nat:2> /\ <var:O4> = <nat:3> * <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:O0> = <nat:1> /\ <var:O2> = <nat:1> * <var:j> ^ <nat:2> /\ <var:c> = <nat:3> * <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:O0> = <nat:1> /\ <var:c> = <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:c> = <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 