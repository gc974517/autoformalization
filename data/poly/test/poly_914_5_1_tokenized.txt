\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:D1> := <var:m> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:1> ; <var:d> := <var:D1> <var:d> := <var:d> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> . Assuming it to hold that $ <var:m> = <var:g> $ ( given $ <var:g> \in \mathbb{Z}^+ $ ) prior to the execution of our code segment , then we have $ <var:d> = <nat:1> \cdot <var:g> + <nat:4> $ once code has finished . \end{theorem} \begin{proof} Proving correctness for our set of commands can be given by usual Hoare reasoning . Taking another step toward the subsequent bit of code seen in our set of commands , we have the variable binding code \verb | <var:D1> := <var:m> ; | . This takes the condition $ \{ <var:m> = <var:g> \} $ toward the postcondition $ \{ <var:m> = <var:g> \land <var:D1> = <var:g> \} $ . This is known to be sound by the assignment law given in Hoare logic . Moving forward to the next step , we have the assignment command \verb | <var:D0> := <nat:4> ; | . This redefines $ \{ <var:m> = <var:g> \land <var:D1> = <var:g> \} $ toward the postcondition $ \{ <var:m> = <var:g> \land <var:D1> = <var:g> \land <var:D0> = <nat:4> \} $ . Paying attention to the upcoming line found in the set of instructions , we see the environment update line \verb | <var:D1> := <var:D1> * <nat:1> ; | . This line forwards $ \{ <var:m> = <var:g> \land <var:D1> = <var:g> \land <var:D0> = <nat:4> \} $ into the postcondition $ \{ <var:m> = <var:g> \land <var:D1> = <nat:1> * <var:g> \land <var:D0> = <nat:4> \} $ . This is guaranteed using the assignment rule in usual Hoare techniques . Moving on to the next step , we see the statement \verb | <var:d> := <var:D1> | . This advances the precondition $ \{ <var:m> = <var:g> \land <var:D1> = <nat:1> * <var:g> \land <var:D0> = <nat:4> \} $ as the postcondition $ \{ <var:m> = <var:g> \land <var:D0> = <nat:4> \land <var:d> = <nat:1> * <var:g> \} $ . Further , we have the code \verb | <var:d> := <var:d> + <var:D0> | . This statement advances $ \{ <var:m> = <var:g> \land <var:D0> = <nat:4> \land <var:d> = <nat:1> * <var:g> \} $ into the postcondition $ \{ <var:m> = <var:g> \land <var:d> = <nat:1> * <var:g> + <nat:4> \} $ . This is known to be sound by the assignment law given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <def:poly> := <var:D1> := <var:m> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:1> ; <var:d> := <var:D1> <var:d> := <var:d> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:m> = <var:g> }} <def:poly> {{ <var:d> = <nat:1> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:D1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:D1> = <var:g> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:D1> = <nat:1> * <var:g> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:D0> = <nat:4> /\ <var:d> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:d> = <nat:1> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 