\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} : \begin{verbatim} <var:t1> := <var:J> ; <var:t2> := <var:t1> * <var:J> ; <var:t3> := <var:t2> * <var:J> ; <var:t4> := <var:t3> * <var:J> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:1> ; <var:t2> := <var:t2> * <nat:3> ; <var:t3> := <var:t3> * <nat:6> ; <var:t4> := <var:t4> * <nat:4> ; <var:l> := <var:t4> <var:l> := <var:l> + <var:t3> <var:l> := <var:l> + <var:t2> <var:l> := <var:l> + <var:t1> <var:l> := <var:l> + <var:t0> \end{verbatim} Given that $ <var:J> = <var:N> $ with some integers $ <var:N> $ ahead of the execution of the code segment it follows that we have $ <var:l> = <nat:4> \times <var:N> ^ <nat:4> + <nat:6> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:6> $ . \end{theorem} \begin{proof} Using usual Hoare logic returns : \begin{eqnarray} \{ <var:J> = <var:N> \} \\ <var:t1> := <var:J> ; \\ \{ <var:J> = <var:N> \land <var:t1> = <var:N> \} \\ <var:t2> := <var:t1> * <var:J> ; \\ \{ <var:J> = <var:N> \land <var:t1> = <var:N> \land <var:t2> = <var:N> ^ <nat:2> \} \\ <var:t3> := <var:t2> * <var:J> ; \\ \{ <var:J> = <var:N> \land <var:t1> = <var:N> \land <var:t2> = <var:N> ^ <nat:2> \land <var:t3> = <var:N> ^ <nat:3> \} \\ <var:t4> := <var:t3> * <var:J> ; \\ \{ <var:J> = <var:N> \land <var:t1> = <var:N> \land <var:t2> = <var:N> ^ <nat:2> \land <var:t3> = <var:N> ^ <nat:3> \land <var:t4> = <var:N> ^ <nat:4> \} \\ <var:t0> := <nat:6> ; \\ \{ <var:J> = <var:N> \land <var:t1> = <var:N> \land <var:t2> = <var:N> ^ <nat:2> \land <var:t3> = <var:N> ^ <nat:3> \land <var:t4> = <var:N> ^ <nat:4> \land <var:t0> = <nat:6> \} \\ <var:t1> := <var:t1> * <nat:1> ; \\ \{ <var:J> = <var:N> \land <var:t1> = <nat:1> \times <var:N> \land <var:t2> = <var:N> ^ <nat:2> \land <var:t3> = <var:N> ^ <nat:3> \land <var:t4> = <var:N> ^ <nat:4> \land <var:t0> = <nat:6> \} \\ <var:t2> := <var:t2> * <nat:3> ; \\ \{ <var:J> = <var:N> \land <var:t1> = <nat:1> \times <var:N> \land <var:t2> = <nat:3> \times <var:N> ^ <nat:2> \land <var:t3> = <var:N> ^ <nat:3> \land <var:t4> = <var:N> ^ <nat:4> \land <var:t0> = <nat:6> \} \\ <var:t3> := <var:t3> * <nat:6> ; \\ \{ <var:J> = <var:N> \land <var:t1> = <nat:1> \times <var:N> \land <var:t2> = <nat:3> \times <var:N> ^ <nat:2> \land <var:t3> = <nat:6> \times <var:N> ^ <nat:3> \land <var:t4> = <var:N> ^ <nat:4> \land <var:t0> = <nat:6> \} \\ <var:t4> := <var:t4> * <nat:4> ; \\ \{ <var:J> = <var:N> \land <var:t1> = <nat:1> \times <var:N> \land <var:t2> = <nat:3> \times <var:N> ^ <nat:2> \land <var:t3> = <nat:6> \times <var:N> ^ <nat:3> \land <var:t4> = <nat:4> \times <var:N> ^ <nat:4> \land <var:t0> = <nat:6> \} \\ <var:l> := <var:t4> \\ \{ <var:J> = <var:N> \land <var:t1> = <nat:1> \times <var:N> \land <var:t2> = <nat:3> \times <var:N> ^ <nat:2> \land <var:t3> = <nat:6> \times <var:N> ^ <nat:3> \land <var:t0> = <nat:6> \land <var:l> = <nat:4> \times <var:N> ^ <nat:4> \} \\ <var:l> := <var:l> + <var:t3> \\ \{ <var:J> = <var:N> \land <var:t1> = <nat:1> \times <var:N> \land <var:t2> = <nat:3> \times <var:N> ^ <nat:2> \land <var:t0> = <nat:6> \land <var:l> = <nat:4> \times <var:N> ^ <nat:4> + <nat:6> \times <var:N> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:t2> \\ \{ <var:J> = <var:N> \land <var:t1> = <nat:1> \times <var:N> \land <var:t0> = <nat:6> \land <var:l> = <nat:4> \times <var:N> ^ <nat:4> + <nat:6> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:t1> \\ \{ <var:J> = <var:N> \land <var:t0> = <nat:6> \land <var:l> = <nat:4> \times <var:N> ^ <nat:4> + <nat:6> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> \} \\ <var:l> := <var:l> + <var:t0> \\ \{ <var:J> = <var:N> \land <var:l> = <nat:4> \times <var:N> ^ <nat:4> + <nat:6> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:1> \times <var:N> + <nat:6> \} \end{eqnarray} Therefore , this segment of code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <var:t4> : string := " <var:t4> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:J> = <var:N> }} <var:t1> := <var:J> ; <var:t2> := <var:t1> * <var:J> ; <var:t3> := <var:t2> * <var:J> ; <var:t4> := <var:t3> * <var:J> ; <var:t0> := <nat:6> ; <var:t1> := <var:t1> * <nat:1> ; <var:t2> := <var:t2> * <nat:3> ; <var:t3> := <var:t3> * <nat:6> ; <var:t4> := <var:t4> * <nat:4> ; <var:l> := <var:t4> <var:l> := <var:l> + <var:t3> <var:l> := <var:l> + <var:t2> <var:l> := <var:l> + <var:t1> <var:l> := <var:l> + <var:t0> {{ <var:l> = <nat:4> * <var:N> ^ <nat:4> + <nat:6> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:t1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:t1> = <var:N> /\ <var:t2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:t1> = <var:N> /\ <var:t2> = <var:N> ^ <nat:2> /\ <var:t3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:t1> = <var:N> /\ <var:t2> = <var:N> ^ <nat:2> /\ <var:t3> = <var:N> ^ <nat:3> /\ <var:t4> = <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:t1> = <var:N> /\ <var:t2> = <var:N> ^ <nat:2> /\ <var:t3> = <var:N> ^ <nat:3> /\ <var:t4> = <var:N> ^ <nat:4> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:t1> = <nat:1> * <var:N> /\ <var:t2> = <var:N> ^ <nat:2> /\ <var:t3> = <var:N> ^ <nat:3> /\ <var:t4> = <var:N> ^ <nat:4> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:t1> = <nat:1> * <var:N> /\ <var:t2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:t3> = <var:N> ^ <nat:3> /\ <var:t4> = <var:N> ^ <nat:4> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:t1> = <nat:1> * <var:N> /\ <var:t2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:t3> = <nat:6> * <var:N> ^ <nat:3> /\ <var:t4> = <var:N> ^ <nat:4> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:t1> = <nat:1> * <var:N> /\ <var:t2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:t3> = <nat:6> * <var:N> ^ <nat:3> /\ <var:t4> = <nat:4> * <var:N> ^ <nat:4> /\ <var:t0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:t1> = <nat:1> * <var:N> /\ <var:t2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:t3> = <nat:6> * <var:N> ^ <nat:3> /\ <var:t0> = <nat:6> /\ <var:l> = <nat:4> * <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:t1> = <nat:1> * <var:N> /\ <var:t2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:t0> = <nat:6> /\ <var:l> = <nat:4> * <var:N> ^ <nat:4> + <nat:6> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:t1> = <nat:1> * <var:N> /\ <var:t0> = <nat:6> /\ <var:l> = <nat:4> * <var:N> ^ <nat:4> + <nat:6> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:t0> = <nat:6> /\ <var:l> = <nat:4> * <var:N> ^ <nat:4> + <nat:6> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:N> /\ <var:l> = <nat:4> * <var:N> ^ <nat:4> + <nat:6> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 