\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:U1> := <var:c> ; <var:U2> := <var:U1> * <var:c> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:3> ; <var:U2> := <var:U2> * <nat:3> ; <var:w> := <var:U2> <var:w> := <var:w> + <var:U1> <var:w> := <var:w> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:c> = <var:X> $ ahead of interpreting this code it follows that $ <var:w> = <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:1> $ after code segment exits . \end{theorem} \begin{proof} The argument for our list of commands is accomplished using standard Hoare techniques . Taking another step toward the next step contained in our set of instructions , we see the assignment command giving $ <var:c> $ to $ <var:U1>$ . This command moves the precondition $ \{ <var:c> = <var:X> \} $ into the postcondition $ \{ <var:c> = <var:X> \land <var:U1> = <var:X> \} $ . Taking another step toward the subsequent command found in our program , we have the assignment statement binding $ <var:U1> * <var:c> $ into $ <var:U2>$ . This command forwards the precondition $ \{ <var:c> = <var:X> \land <var:U1> = <var:X> \} $ as the condition $ \{ <var:c> = <var:X> \land <var:U1> = <var:X> \land <var:U2> = <var:X> ^ <nat:2> \} $ . Moving on , we have the variable update code \verb | <var:U0> := <nat:1> ; | . This transfers $ \{ <var:c> = <var:X> \land <var:U1> = <var:X> \land <var:U2> = <var:X> ^ <nat:2> \} $ toward the postcondition $ \{ <var:c> = <var:X> \land <var:U1> = <var:X> \land <var:U2> = <var:X> ^ <nat:2> \land <var:U0> = <nat:1> \} $ . Jumping to the following bit of code contained in our code segment , the binding command assigning $ <var:U1> * <nat:3> $ into $ <var:U1>$ . This moves the condition $ \{ <var:c> = <var:X> \land <var:U1> = <var:X> \land <var:U2> = <var:X> ^ <nat:2> \land <var:U0> = <nat:1> \} $ into $ \{ <var:c> = <var:X> \land <var:U1> = <nat:3> \times <var:X> \land <var:U2> = <var:X> ^ <nat:2> \land <var:U0> = <nat:1> \} $ . Moving on to the following piece of code found in the segment of code , we have the binding command \verb | <var:U2> := <var:U2> * <nat:3> ; | . This line moves the condition $ \{ <var:c> = <var:X> \land <var:U1> = <nat:3> \times <var:X> \land <var:U2> = <var:X> ^ <nat:2> \land <var:U0> = <nat:1> \} $ toward the condition $ \{ <var:c> = <var:X> \land <var:U1> = <nat:3> \times <var:X> \land <var:U2> = <nat:3> \times <var:X> ^ <nat:2> \land <var:U0> = <nat:1> \} $ . This is deduced by the assignment rule from typical Hoare techniques . Moving forward , we see the variable assignmet line \verb | <var:w> := <var:U2> | . This redefines the precondition $ \{ <var:c> = <var:X> \land <var:U1> = <nat:3> \times <var:X> \land <var:U2> = <nat:3> \times <var:X> ^ <nat:2> \land <var:U0> = <nat:1> \} $ toward the condition $ \{ <var:c> = <var:X> \land <var:U1> = <nat:3> \times <var:X> \land <var:U0> = <nat:1> \land <var:w> = <nat:3> \times <var:X> ^ <nat:2> \} $ . Jumping to the subsequent step contained in our set of instructions , the variable assignmet code \verb | <var:w> := <var:w> + <var:U1> | . This transfers the condition $ \{ <var:c> = <var:X> \land <var:U1> = <nat:3> \times <var:X> \land <var:U0> = <nat:1> \land <var:w> = <nat:3> \times <var:X> ^ <nat:2> \} $ into the condition $ \{ <var:c> = <var:X> \land <var:U0> = <nat:1> \land <var:w> = <nat:3> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> \} $ . This is shown by the assignment rule from typical Hoare logic . Honing in on the subsequent statement found in our segment of code , the environment update statement \verb | <var:w> := <var:w> + <var:U0> | . This line advances $ \{ <var:c> = <var:X> \land <var:U0> = <nat:1> \land <var:w> = <nat:3> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> \} $ into the postcondition $ \{ <var:c> = <var:X> \land <var:w> = <nat:3> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U1> := <var:c> ; <var:U2> := <var:U1> * <var:c> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:3> ; <var:U2> := <var:U2> * <nat:3> ; <var:w> := <var:U2> <var:w> := <var:w> + <var:U1> <var:w> := <var:w> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:c> = <var:X> }} <def:poly> {{ <var:w> = <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:U1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:U1> = <var:X> /\ <var:U2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:U1> = <var:X> /\ <var:U2> = <var:X> ^ <nat:2> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:U1> = <nat:3> * <var:X> /\ <var:U2> = <var:X> ^ <nat:2> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:U1> = <nat:3> * <var:X> /\ <var:U2> = <nat:3> * <var:X> ^ <nat:2> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:U1> = <nat:3> * <var:X> /\ <var:U0> = <nat:1> /\ <var:w> = <nat:3> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:U0> = <nat:1> /\ <var:w> = <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:X> /\ <var:w> = <nat:3> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 