\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as \begin{verbatim} <var:O1> := <var:A> ; <var:O2> := <var:O1> * <var:A> ; <var:O3> := <var:O2> * <var:A> ; <var:O4> := <var:O3> * <var:A> ; <var:O0> := <nat:4> ; <var:O1> := <var:O1> * <nat:7> ; <var:O2> := <var:O2> * <nat:6> ; <var:O3> := <var:O3> * <nat:7> ; <var:O4> := <var:O4> * <nat:9> ; <var:i> := <var:O4> <var:i> := <var:i> + <var:O3> <var:i> := <var:i> + <var:O2> <var:i> := <var:i> + <var:O1> <var:i> := <var:i> + <var:O0> \end{verbatim} Assume --- for every positive integers $ <var:o> $ --- that we have $ <var:A> = <var:o> $ before executing this code segment it follows that $ <var:i> = <nat:9> \times <var:o> ^ <nat:4> + <nat:7> \times <var:o> ^ <nat:3> + <nat:6> \times <var:o> ^ <nat:2> + <nat:7> \times <var:o> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions is shown through typical Hoare logic . Shifting focus toward the subsequent statements in the program , \verb | { <var:A> = <var:o> } <var:O1> := <var:A> { <var:A> = <var:o> \land <var:O1> = <var:o> } | , \verb | { <var:A> = <var:o> \land <var:O1> = <var:o> } <var:O2> := <var:O1> * <var:A> { <var:A> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> } | , \verb | { <var:A> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> } <var:O3> := <var:O2> * <var:A> { <var:A> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> } | , \verb | { <var:A> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> } <var:O4> := <var:O3> * <var:A> { <var:A> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> \land <var:O4> = <var:o> ^ <nat:4> } | , \verb | { <var:A> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> \land <var:O4> = <var:o> ^ <nat:4> } <var:O0> := <nat:4> { <var:A> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> \land <var:O4> = <var:o> ^ <nat:4> \land <var:O0> = <nat:4> } | , \verb | { <var:A> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> \land <var:O4> = <var:o> ^ <nat:4> \land <var:O0> = <nat:4> } <var:O1> := <var:O1> * <nat:7> { <var:A> = <var:o> \land <var:O1> = <nat:7> \times <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> \land <var:O4> = <var:o> ^ <nat:4> \land <var:O0> = <nat:4> } | , \verb | { <var:A> = <var:o> \land <var:O1> = <nat:7> \times <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> \land <var:O4> = <var:o> ^ <nat:4> \land <var:O0> = <nat:4> } <var:O2> := <var:O2> * <nat:6> { <var:A> = <var:o> \land <var:O1> = <nat:7> \times <var:o> \land <var:O2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> \land <var:O4> = <var:o> ^ <nat:4> \land <var:O0> = <nat:4> } | , \verb | { <var:A> = <var:o> \land <var:O1> = <nat:7> \times <var:o> \land <var:O2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> \land <var:O4> = <var:o> ^ <nat:4> \land <var:O0> = <nat:4> } <var:O3> := <var:O3> * <nat:7> { <var:A> = <var:o> \land <var:O1> = <nat:7> \times <var:o> \land <var:O2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:O3> = <nat:7> \times <var:o> ^ <nat:3> \land <var:O4> = <var:o> ^ <nat:4> \land <var:O0> = <nat:4> } | , \verb | { <var:A> = <var:o> \land <var:O1> = <nat:7> \times <var:o> \land <var:O2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:O3> = <nat:7> \times <var:o> ^ <nat:3> \land <var:O4> = <var:o> ^ <nat:4> \land <var:O0> = <nat:4> } <var:O4> := <var:O4> * <nat:9> { <var:A> = <var:o> \land <var:O1> = <nat:7> \times <var:o> \land <var:O2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:O3> = <nat:7> \times <var:o> ^ <nat:3> \land <var:O4> = <nat:9> \times <var:o> ^ <nat:4> \land <var:O0> = <nat:4> } | and \verb | { <var:A> = <var:o> \land <var:O1> = <nat:7> \times <var:o> \land <var:O2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:O3> = <nat:7> \times <var:o> ^ <nat:3> \land <var:O4> = <nat:9> \times <var:o> ^ <nat:4> \land <var:O0> = <nat:4> } <var:i> := <var:O4{ <var:A> = <var:o> \land <var:O1> = <nat:7> \times <var:o> \land <var:O2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:O3> = <nat:7> \times <var:o> ^ <nat:3> \land <var:O0> = <nat:4> \land <var:i> = <nat:9> \times <var:o> ^ <nat:4> } | . This is sound using the variable assignmet law obtained from Hoare reasoning . Advancing on , we have \verb | { <var:A> = <var:o> } <var:O1> := <var:A> { <var:A> = <var:o> \land <var:O1> = <var:o> } | , \verb | { <var:A> = <var:o> \land <var:O1> = <var:o> } <var:O2> := <var:O1> * <var:A> { <var:A> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> } | and \verb | { <var:A> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> } <var:O3> := <var:O2> * <var:A> { <var:A> = <var:o> \land <var:O1> = <var:o> \land <var:O2> = <var:o> ^ <nat:2> \land <var:O3> = <var:o> ^ <nat:3> } | . This is known to be sound using the assignment inference rule in standard Hoare logic . Jumping to the subsequent piece of code contained in the set of commands , we have \verb | { <var:A> = <var:o> } <var:O1> := <var:A> { <var:A> = <var:o> \land <var:O1> = <var:o> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <var:O4> : string := " <var:O4> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:A> = <var:o> }} <var:O1> := <var:A> ; <var:O2> := <var:O1> * <var:A> ; <var:O3> := <var:O2> * <var:A> ; <var:O4> := <var:O3> * <var:A> ; <var:O0> := <nat:4> ; <var:O1> := <var:O1> * <nat:7> ; <var:O2> := <var:O2> * <nat:6> ; <var:O3> := <var:O3> * <nat:7> ; <var:O4> := <var:O4> * <nat:9> ; <var:i> := <var:O4> <var:i> := <var:i> + <var:O3> <var:i> := <var:i> + <var:O2> <var:i> := <var:i> + <var:O1> <var:i> := <var:i> + <var:O0> {{ <var:i> = <nat:9> * <var:o> ^ <nat:4> + <nat:7> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:O1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:O1> = <var:o> /\ <var:O2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:O1> = <var:o> /\ <var:O2> = <var:o> ^ <nat:2> /\ <var:O3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:O1> = <var:o> /\ <var:O2> = <var:o> ^ <nat:2> /\ <var:O3> = <var:o> ^ <nat:3> /\ <var:O4> = <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:O1> = <var:o> /\ <var:O2> = <var:o> ^ <nat:2> /\ <var:O3> = <var:o> ^ <nat:3> /\ <var:O4> = <var:o> ^ <nat:4> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:O1> = <nat:7> * <var:o> /\ <var:O2> = <var:o> ^ <nat:2> /\ <var:O3> = <var:o> ^ <nat:3> /\ <var:O4> = <var:o> ^ <nat:4> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:O1> = <nat:7> * <var:o> /\ <var:O2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:O3> = <var:o> ^ <nat:3> /\ <var:O4> = <var:o> ^ <nat:4> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:O1> = <nat:7> * <var:o> /\ <var:O2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:O3> = <nat:7> * <var:o> ^ <nat:3> /\ <var:O4> = <var:o> ^ <nat:4> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:O1> = <nat:7> * <var:o> /\ <var:O2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:O3> = <nat:7> * <var:o> ^ <nat:3> /\ <var:O4> = <nat:9> * <var:o> ^ <nat:4> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:O1> = <nat:7> * <var:o> /\ <var:O2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:O3> = <nat:7> * <var:o> ^ <nat:3> /\ <var:O0> = <nat:4> /\ <var:i> = <nat:9> * <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:O1> = <nat:7> * <var:o> /\ <var:O2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:O0> = <nat:4> /\ <var:i> = <nat:9> * <var:o> ^ <nat:4> + <nat:7> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:O1> = <nat:7> * <var:o> /\ <var:O0> = <nat:4> /\ <var:i> = <nat:9> * <var:o> ^ <nat:4> + <nat:7> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:O0> = <nat:4> /\ <var:i> = <nat:9> * <var:o> ^ <nat:4> + <nat:7> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:7> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:o> /\ <var:i> = <nat:9> * <var:o> ^ <nat:4> + <nat:7> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:7> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 