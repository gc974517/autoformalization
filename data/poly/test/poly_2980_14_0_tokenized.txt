\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:6> ; <var:m1> := <nat:3> ; <var:m1> := <var:m1> * <var:O> ; <var:m2> := <nat:9> ; <var:m2> := <var:m2> * <var:O> ; <var:m2> := <var:m2> * <var:O> ; <var:m3> := <nat:5> ; <var:m3> := <var:m3> * <var:O> ; <var:m3> := <var:m3> * <var:O> ; <var:m3> := <var:m3> * <var:O> ; <var:s> := <var:m3> ; <var:s> := <var:s> + <var:m2> ; <var:s> := <var:s> + <var:m1> ; <var:s> := <var:s> + <var:m0> \end{verbatim} Given that we have $ <var:O> = <var:p> $ prior to interpreting this list of commands it must be that we see $ <var:s> = <nat:5> \cdot <var:p> ^ <nat:3> + <nat:9> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:6> $ after set of instructions terminates . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be shown by Hoare techniques . Now , we have \[ \begin{tabular} {rcl} \{ <var:O> = <var:p> \} & <var:m0> := <nat:6> & \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \} \\ \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \} & <var:m1> := <nat:3> & \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \} \\ \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \} & <var:m1> := <var:m1> * <var:O> & \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \} \\ \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \} & <var:m2> := <nat:9> & \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \} \\ \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \} & <var:m2> := <var:m2> * <var:O> & \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> \} \\ \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> \} & <var:m2> := <var:m2> * <var:O> & \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> ^ <nat:2> \} \\ \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> ^ <nat:2> \} & <var:m3> := <nat:5> & \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> ^ <nat:2> \land <var:m3> = <nat:5> \} \\ \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> ^ <nat:2> \land <var:m3> = <nat:5> \} & <var:m3> := <var:m3> * <var:O> & \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> ^ <nat:2> \land <var:m3> = <nat:5> \times <var:p> \} \\ \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> ^ <nat:2> \land <var:m3> = <nat:5> \times <var:p> \} & <var:m3> := <var:m3> * <var:O> & \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> ^ <nat:2> \land <var:m3> = <nat:5> \times <var:p> ^ <nat:2> \} \\ \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> ^ <nat:2> \land <var:m3> = <nat:5> \times <var:p> ^ <nat:2> \} & <var:m3> := <var:m3> * <var:O> & \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> ^ <nat:2> \land <var:m3> = <nat:5> \times <var:p> ^ <nat:3> \} \\ \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> ^ <nat:2> \land <var:m3> = <nat:5> \times <var:p> ^ <nat:3> \} & <var:s> := <var:m3> & \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> ^ <nat:2> \land <var:s> = <nat:5> \times <var:p> ^ <nat:3> \} \\ \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:m2> = <nat:9> \times <var:p> ^ <nat:2> \land <var:s> = <nat:5> \times <var:p> ^ <nat:3> \} & <var:s> := <var:s> + <var:m2> & \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:s> = <nat:5> \times <var:p> ^ <nat:3> + <nat:9> \times <var:p> ^ <nat:2> \} \\ \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:m1> = <nat:3> \times <var:p> \land <var:s> = <nat:5> \times <var:p> ^ <nat:3> + <nat:9> \times <var:p> ^ <nat:2> \} & <var:s> := <var:s> + <var:m1> & \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:s> = <nat:5> \times <var:p> ^ <nat:3> + <nat:9> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> \} \\ \{ <var:O> = <var:p> \land <var:m0> = <nat:6> \land <var:s> = <nat:5> \times <var:p> ^ <nat:3> + <nat:9> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> \} & <var:s> := <var:s> + <var:m0& \{ <var:O> = <var:p> \land <var:s> = <nat:5> \times <var:p> ^ <nat:3> + <nat:9> \times <var:p> ^ <nat:2> + <nat:3> \times <var:p> + <nat:6> \} \end{tabular} This is known to be sound with the binding scheme defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:O> = <var:p> }} <var:m0> := <nat:6> ; <var:m1> := <nat:3> ; <var:m1> := <var:m1> * <var:O> ; <var:m2> := <nat:9> ; <var:m2> := <var:m2> * <var:O> ; <var:m2> := <var:m2> * <var:O> ; <var:m3> := <nat:5> ; <var:m3> := <var:m3> * <var:O> ; <var:m3> := <var:m3> * <var:O> ; <var:m3> := <var:m3> * <var:O> ; <var:s> := <var:m3> ; <var:s> := <var:s> + <var:m2> ; <var:s> := <var:s> + <var:m1> ; <var:s> := <var:s> + <var:m0> {{ <var:s> = <nat:5> * <var:p> ^ <nat:3> + <nat:9> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:p> /\ <var:m2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:p> /\ <var:m2> = <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:p> /\ <var:m2> = <nat:9> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:p> /\ <var:m2> = <nat:9> * <var:p> ^ <nat:2> /\ <var:m3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:p> /\ <var:m2> = <nat:9> * <var:p> ^ <nat:2> /\ <var:m3> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:p> /\ <var:m2> = <nat:9> * <var:p> ^ <nat:2> /\ <var:m3> = <nat:5> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:p> /\ <var:m2> = <nat:9> * <var:p> ^ <nat:2> /\ <var:m3> = <nat:5> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:p> /\ <var:m2> = <nat:9> * <var:p> ^ <nat:2> /\ <var:s> = <nat:5> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:m0> = <nat:6> /\ <var:m1> = <nat:3> * <var:p> /\ <var:s> = <nat:5> * <var:p> ^ <nat:3> + <nat:9> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:m0> = <nat:6> /\ <var:s> = <nat:5> * <var:p> ^ <nat:3> + <nat:9> * <var:p> ^ <nat:2> + <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:p> /\ <var:s> = <nat:5> * <var:p> ^ <nat:3> + <nat:9> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 