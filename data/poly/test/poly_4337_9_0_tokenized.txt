\begin{document} \begin{theorem} Let the following code segment : \begin{verbatim} <var:r0> := <nat:8> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:W> ; <var:r2> := <nat:3> ; <var:r2> := <var:r2> * <var:W> ; <var:r2> := <var:r2> * <var:W> ; <var:v> := <var:r2> ; <var:v> := <var:v> + <var:r1> ; <var:v> := <var:v> + <var:r0> \end{verbatim} Assuming that $ <var:W> = <var:g> $ ahead of interpreting this set of instructions , it must be that we have $ <var:v> = <nat:3> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> + <nat:8> $ when series of instructions has exited . \end{theorem} \begin{proof} See that this decorated list of instructions . \begin{eqnarray} \{ <var:W> = <var:g> \} \\ <var:r0> := <nat:8> ; \\ \{ <var:W> = <var:g> \land <var:r0> = <nat:8> \} \\ <var:r1> := <nat:3> ; \\ \{ <var:W> = <var:g> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \} \\ <var:r1> := <var:r1> * <var:W> ; \\ \{ <var:W> = <var:g> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \cdot <var:g> \} \\ <var:r2> := <nat:3> ; \\ \{ <var:W> = <var:g> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \cdot <var:g> \land <var:r2> = <nat:3> \} \\ <var:r2> := <var:r2> * <var:W> ; \\ \{ <var:W> = <var:g> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \cdot <var:g> \land <var:r2> = <nat:3> \cdot <var:g> \} \\ <var:r2> := <var:r2> * <var:W> ; \\ \{ <var:W> = <var:g> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \cdot <var:g> \land <var:r2> = <nat:3> \cdot <var:g> ^ <nat:2> \} \\ <var:v> := <var:r2> ; \\ \{ <var:W> = <var:g> \land <var:r0> = <nat:8> \land <var:r1> = <nat:3> \cdot <var:g> \land <var:v> = <nat:3> \cdot <var:g> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:r1> ; \\ \{ <var:W> = <var:g> \land <var:r0> = <nat:8> \land <var:v> = <nat:3> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> \} \\ <var:v> := <var:v> + <var:r0> \\ \{ <var:W> = <var:g> \land <var:v> = <nat:3> \cdot <var:g> ^ <nat:2> + <nat:3> \cdot <var:g> + <nat:8> \} \end{eqnarray} Using standard Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:W> = <var:g> }} <var:r0> := <nat:8> ; <var:r1> := <nat:3> ; <var:r1> := <var:r1> * <var:W> ; <var:r2> := <nat:3> ; <var:r2> := <var:r2> * <var:W> ; <var:r2> := <var:r2> * <var:W> ; <var:v> := <var:r2> ; <var:v> := <var:v> + <var:r1> ; <var:v> := <var:v> + <var:r0> {{ <var:v> = <nat:3> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:r0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:3> * <var:g> /\ <var:r2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:3> * <var:g> /\ <var:r2> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:3> * <var:g> /\ <var:r2> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:r0> = <nat:8> /\ <var:r1> = <nat:3> * <var:g> /\ <var:v> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:r0> = <nat:8> /\ <var:v> = <nat:3> * <var:g> ^ <nat:2> + <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:g> /\ <var:v> = <nat:3> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 