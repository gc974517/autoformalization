\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:t> := <nat:2> ; <var:t> := <nat:1> + <var:t> * <var:n> ; <var:t> := <nat:2> + <var:t> * <var:n> ; <var:t> := <nat:3> + <var:t> * <var:n> ; <var:t> := <nat:4> + <var:t> * <var:n> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:n> = <var:X> $ before running the set of commands then we see $ <var:t> = <nat:2> \times <var:X> ^ <nat:4> + <nat:1> \times <var:X> ^ <nat:3> + <nat:2> \times <var:X> ^ <nat:2> + <nat:3> \times <var:X> + <nat:4> $ once series of commands has executed . \end{theorem} \begin{proof} The argument for this series of instructions can be demonstrated using Hoare logic . Next , we have \begin{eqnarray} \{ <var:n> = <var:X> \} \, <var:t> := <nat:2> \, \{ <var:n> = <var:X> \land <var:t> = <nat:2> \} \\ \{ <var:n> = <var:X> \land <var:t> = <nat:2> \} \, <var:t> := <nat:1> + <var:t> * <var:n> \, \{ <var:n> = <var:X> \land <var:t> = <nat:2> \times <var:X> + <nat:1> \} \\ \{ <var:n> = <var:X> \land <var:t> = <nat:2> \times <var:X> + <nat:1> \} \, <var:t> := <nat:2> + <var:t> * <var:n> \, \{ <var:n> = <var:X> \land <var:t> = <nat:2> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:2> \} \\ \{ <var:n> = <var:X> \land <var:t> = <nat:2> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:2> \} \, <var:t> := <nat:3> + <var:t> * <var:n> \, \{ <var:n> = <var:X> \land <var:t> = <nat:2> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:2> \times <var:X> + <nat:3> \} \end{eqnarray} Shifting focus toward the proceeding piece of code found in our list of commands , we see \begin{eqnarray} \{ <var:n> = <var:X> \} \, <var:t> := <nat:2> \, \{ <var:n> = <var:X> \land <var:t> = <nat:2> \} \end{eqnarray} This is guaranteed using the binding scheme defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:2> ; <var:t> := <nat:1> + <var:t> * <var:n> ; <var:t> := <nat:2> + <var:t> * <var:n> ; <var:t> := <nat:3> + <var:t> * <var:n> ; <var:t> := <nat:4> + <var:t> * <var:n> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:n> = <var:X> }} <def:poly> {{ <var:t> = <nat:2> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:t> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:t> = <nat:2> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:t> = <nat:2> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:t> = <nat:2> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:X> /\ <var:t> = <nat:2> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:3> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 