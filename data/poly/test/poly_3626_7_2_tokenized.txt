\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as \begin{verbatim} <var:b> := <nat:3> ; <var:b> := <nat:3> + <var:b> * <var:K> ; <var:b> := <nat:4> + <var:b> * <var:K> ; <var:b> := <nat:1> + <var:b> * <var:K> ; <var:b> := <nat:2> + <var:b> * <var:K> ; <var:b> := <nat:4> + <var:b> * <var:K> ; <var:b> := <nat:4> + <var:b> * <var:K> \end{verbatim} Assuming $ <var:K> = <var:d> $ before evaluating the set of instructions , it follows that we have $ <var:b> = <nat:3> \cdot <var:d> ^ <nat:6> + <nat:3> \cdot <var:d> ^ <nat:5> + <nat:4> \cdot <var:d> ^ <nat:4> + <nat:1> \cdot <var:d> ^ <nat:3> + <nat:2> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for this series of commands is clear with typical Hoare logic . Honing in on the following lines found in our set of commands , \verb | { <var:K> = <var:d> } <var:b> := <nat:3> { <var:K> = <var:d> \land <var:b> = <nat:3> } | , \verb | { <var:K> = <var:d> \land <var:b> = <nat:3> } <var:b> := <nat:3> + <var:b> * <var:K> { <var:K> = <var:d> \land <var:b> = <nat:3> \cdot <var:d> + <nat:3> } | , \verb | { <var:K> = <var:d> \land <var:b> = <nat:3> \cdot <var:d> + <nat:3> } <var:b> := <nat:4> + <var:b> * <var:K> { <var:K> = <var:d> \land <var:b> = <nat:3> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + <nat:4> } | and \verb | { <var:K> = <var:d> \land <var:b> = <nat:3> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + <nat:4> } <var:b> := <nat:1> + <var:b> * <var:K> { <var:K> = <var:d> \land <var:b> = <nat:3> \cdot <var:d> ^ <nat:3> + <nat:3> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:1> } | . Jumping to the upcoming step found in our series of instructions , \verb | { <var:K> = <var:d> } <var:b> := <nat:3> { <var:K> = <var:d> \land <var:b> = <nat:3> } | . This is deduced using the variable assignmet rule from usual Hoare reasoning . Moving forward , we see \verb | { <var:K> = <var:d> } <var:b> := <nat:3> { <var:K> = <var:d> \land <var:b> = <nat:3> } | . This is ensured through the environment update law defined by usual Hoare reasoning . Taking a look at the proceeding statement contained in the set of instructions , we have \verb | { <var:K> = <var:d> } <var:b> := <nat:3> { <var:K> = <var:d> \land <var:b> = <nat:3> } | . This is shown using the variable binding rule from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:K> = <var:d> }} <var:b> := <nat:3> ; <var:b> := <nat:3> + <var:b> * <var:K> ; <var:b> := <nat:4> + <var:b> * <var:K> ; <var:b> := <nat:1> + <var:b> * <var:K> ; <var:b> := <nat:2> + <var:b> * <var:K> ; <var:b> := <nat:4> + <var:b> * <var:K> ; <var:b> := <nat:4> + <var:b> * <var:K> {{ <var:b> = <nat:3> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:b> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:b> = <nat:3> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:b> = <nat:3> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:b> = <nat:3> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:b> = <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:b> = <nat:3> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:b> = <nat:3> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 