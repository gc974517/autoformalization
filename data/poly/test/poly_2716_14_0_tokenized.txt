\begin{document} \begin{theorem} Consider the following series of instructions : \begin{verbatim} <var:D0> := <nat:1> ; <var:D1> := <nat:1> ; <var:D1> := <var:D1> * <var:y> ; <var:D2> := <nat:6> ; <var:D2> := <var:D2> * <var:y> ; <var:D2> := <var:D2> * <var:y> ; <var:D3> := <nat:3> ; <var:D3> := <var:D3> * <var:y> ; <var:D3> := <var:D3> * <var:y> ; <var:D3> := <var:D3> * <var:y> ; <var:T> := <var:D3> ; <var:T> := <var:T> + <var:D2> ; <var:T> := <var:T> + <var:D1> ; <var:T> := <var:T> + <var:D0> \end{verbatim} Given $ <var:y> = <var:e> $ ahead of the execution of this program it follows that we see $ <var:T> = <nat:3> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> $ once series of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:e> \} \\ <var:D0> := <nat:1> ; \\ \{ <var:y> = <var:e> \land <var:D0> = <nat:1> \} \\ <var:D1> := <nat:1> ; \\ \{ <var:y> = <var:e> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> \} \\ <var:D1> := <var:D1> * <var:y> ; \\ \{ <var:y> = <var:e> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> * <var:e> \} \\ <var:D2> := <nat:6> ; \\ \{ <var:y> = <var:e> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> * <var:e> \land <var:D2> = <nat:6> \} \\ <var:D2> := <var:D2> * <var:y> ; \\ \{ <var:y> = <var:e> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> * <var:e> \land <var:D2> = <nat:6> * <var:e> \} \\ <var:D2> := <var:D2> * <var:y> ; \\ \{ <var:y> = <var:e> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> * <var:e> \land <var:D2> = <nat:6> * <var:e> ^ <nat:2> \} \\ <var:D3> := <nat:3> ; \\ \{ <var:y> = <var:e> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> * <var:e> \land <var:D2> = <nat:6> * <var:e> ^ <nat:2> \land <var:D3> = <nat:3> \} \\ <var:D3> := <var:D3> * <var:y> ; \\ \{ <var:y> = <var:e> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> * <var:e> \land <var:D2> = <nat:6> * <var:e> ^ <nat:2> \land <var:D3> = <nat:3> * <var:e> \} \\ <var:D3> := <var:D3> * <var:y> ; \\ \{ <var:y> = <var:e> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> * <var:e> \land <var:D2> = <nat:6> * <var:e> ^ <nat:2> \land <var:D3> = <nat:3> * <var:e> ^ <nat:2> \} \\ <var:D3> := <var:D3> * <var:y> ; \\ \{ <var:y> = <var:e> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> * <var:e> \land <var:D2> = <nat:6> * <var:e> ^ <nat:2> \land <var:D3> = <nat:3> * <var:e> ^ <nat:3> \} \\ <var:T> := <var:D3> ; \\ \{ <var:y> = <var:e> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> * <var:e> \land <var:D2> = <nat:6> * <var:e> ^ <nat:2> \land <var:T> = <nat:3> * <var:e> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:D2> ; \\ \{ <var:y> = <var:e> \land <var:D0> = <nat:1> \land <var:D1> = <nat:1> * <var:e> \land <var:T> = <nat:3> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:D1> ; \\ \{ <var:y> = <var:e> \land <var:D0> = <nat:1> \land <var:T> = <nat:3> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:1> * <var:e> \} \\ <var:T> := <var:T> + <var:D0> \\ \{ <var:y> = <var:e> \land <var:T> = <nat:3> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> \} \end{eqnarray} Using Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:y> = <var:e> }} <var:D0> := <nat:1> ; <var:D1> := <nat:1> ; <var:D1> := <var:D1> * <var:y> ; <var:D2> := <nat:6> ; <var:D2> := <var:D2> * <var:y> ; <var:D2> := <var:D2> * <var:y> ; <var:D3> := <nat:3> ; <var:D3> := <var:D3> * <var:y> ; <var:D3> := <var:D3> * <var:y> ; <var:D3> := <var:D3> * <var:y> ; <var:T> := <var:D3> ; <var:T> := <var:T> + <var:D2> ; <var:T> := <var:T> + <var:D1> ; <var:T> := <var:T> + <var:D0> {{ <var:T> = <nat:3> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> * <var:e> /\ <var:D2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> * <var:e> /\ <var:D2> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> * <var:e> /\ <var:D2> = <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> * <var:e> /\ <var:D2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:D3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> * <var:e> /\ <var:D2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:D3> = <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> * <var:e> /\ <var:D2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:D3> = <nat:3> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> * <var:e> /\ <var:D2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:D3> = <nat:3> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> * <var:e> /\ <var:D2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:T> = <nat:3> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:D0> = <nat:1> /\ <var:D1> = <nat:1> * <var:e> /\ <var:T> = <nat:3> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:D0> = <nat:1> /\ <var:T> = <nat:3> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:T> = <nat:3> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 