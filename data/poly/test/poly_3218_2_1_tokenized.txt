\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:9> ; <var:h> := <var:c0> \end{verbatim} Assuming ( given some whole numbers $ <var:Z> $ ) $ <var:V> = <var:Z> $ ahead of evaluating our program , it holds that we see $ <var:h> = <nat:9> $ . \end{theorem} \begin{proof} The flow of logic for our code is clear using this decorated list of commands . \begin{eqnarray} \{ <var:V> = <var:Z> \} \\ <var:c0> := <nat:9> ; \\ \{ <var:V> = <var:Z> \land <var:c0> = <nat:9> \} \\ <var:h> := <var:c0> \\ \{ <var:V> = <var:Z> \land <var:h> = <nat:9> \} \end{eqnarray} Utilizing Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:V> = <var:Z> }} <var:c0> := <nat:9> ; <var:h> := <var:c0> {{ <var:h> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:h> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 