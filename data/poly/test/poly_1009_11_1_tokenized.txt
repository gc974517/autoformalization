\begin{document} \begin{theorem} We define a program in \emph{Imp} as \begin{verbatim} <var:W1> := <var:h> ; <var:W2> := <var:W1> * <var:h> ; <var:W3> := <var:W2> * <var:h> ; <var:W0> := <nat:9> ; <var:W1> := <var:W1> * <nat:9> ; <var:W2> := <var:W2> * <nat:5> ; <var:W3> := <var:W3> * <nat:1> ; <var:Y> := <var:W3> <var:Y> := <var:Y> + <var:W2> <var:Y> := <var:Y> + <var:W1> <var:Y> := <var:Y> + <var:W0> \end{verbatim} Assume taking positive numbers $ <var:Z> $ that we have $ <var:h> = <var:Z> $ ahead of interpreting our list of commands , it follows that $ <var:Y> = <nat:1> \times <var:Z> ^ <nat:3> + <nat:5> \times <var:Z> ^ <nat:2> + <nat:9> \times <var:Z> + <nat:9> $ once program is done . \end{theorem} \begin{proof} The flow of logic for this set of instructions is done by usual Hoare techniques . Moving forward , we have the environment update code binding $ <var:h> $ as $ <var:W1>$ . This redefines $ \{ <var:h> = <var:Z> \} $ toward $ \{ <var:h> = <var:Z> \land <var:W1> = <var:Z> \} $ . Honing in on the upcoming line in the segment of code , we have the variable assignmet line assigning $ <var:W1> * <var:h> $ to $ <var:W2>$ . This code forwards the condition $ \{ <var:h> = <var:Z> \land <var:W1> = <var:Z> \} $ into the postcondition $ \{ <var:h> = <var:Z> \land <var:W1> = <var:Z> \land <var:W2> = <var:Z> ^ <nat:2> \} $ . Advancing to the following statement seen in the program , the line defining $ <var:W2> * <var:h> $ into $ <var:W3>$ . This takes the condition $ \{ <var:h> = <var:Z> \land <var:W1> = <var:Z> \land <var:W2> = <var:Z> ^ <nat:2> \} $ into the condition $ \{ <var:h> = <var:Z> \land <var:W1> = <var:Z> \land <var:W2> = <var:Z> ^ <nat:2> \land <var:W3> = <var:Z> ^ <nat:3> \} $ . Immediately following , we see the line \verb | <var:W0> := <nat:9> ; | . This moves the precondition $ \{ <var:h> = <var:Z> \land <var:W1> = <var:Z> \land <var:W2> = <var:Z> ^ <nat:2> \land <var:W3> = <var:Z> ^ <nat:3> \} $ as the condition $ \{ <var:h> = <var:Z> \land <var:W1> = <var:Z> \land <var:W2> = <var:Z> ^ <nat:2> \land <var:W3> = <var:Z> ^ <nat:3> \land <var:W0> = <nat:9> \} $ . Stepping through , we have the assignment command letting $ <var:W1> * <nat:9> $ to $ <var:W1>$ . This advances $ \{ <var:h> = <var:Z> \land <var:W1> = <var:Z> \land <var:W2> = <var:Z> ^ <nat:2> \land <var:W3> = <var:Z> ^ <nat:3> \land <var:W0> = <nat:9> \} $ to $ \{ <var:h> = <var:Z> \land <var:W1> = <nat:9> \cdot <var:Z> \land <var:W2> = <var:Z> ^ <nat:2> \land <var:W3> = <var:Z> ^ <nat:3> \land <var:W0> = <nat:9> \} $ . This is guaranteed by the assignment inference rule found in typical Hoare logic . Advancing to the next step , we see the code yielding $ <var:W2> * <nat:5> $ into $ <var:W2>$ . This line transfers the precondition $ \{ <var:h> = <var:Z> \land <var:W1> = <nat:9> \cdot <var:Z> \land <var:W2> = <var:Z> ^ <nat:2> \land <var:W3> = <var:Z> ^ <nat:3> \land <var:W0> = <nat:9> \} $ into $ \{ <var:h> = <var:Z> \land <var:W1> = <nat:9> \cdot <var:Z> \land <var:W2> = <nat:5> \cdot <var:Z> ^ <nat:2> \land <var:W3> = <var:Z> ^ <nat:3> \land <var:W0> = <nat:9> \} $ . This is given with the assignment law given by usual Hoare techniques . Following , we see the variable binding command \verb | <var:W3> := <var:W3> * <nat:1> ; | . This statement moves $ \{ <var:h> = <var:Z> \land <var:W1> = <nat:9> \cdot <var:Z> \land <var:W2> = <nat:5> \cdot <var:Z> ^ <nat:2> \land <var:W3> = <var:Z> ^ <nat:3> \land <var:W0> = <nat:9> \} $ into $ \{ <var:h> = <var:Z> \land <var:W1> = <nat:9> \cdot <var:Z> \land <var:W2> = <nat:5> \cdot <var:Z> ^ <nat:2> \land <var:W3> = <nat:1> \cdot <var:Z> ^ <nat:3> \land <var:W0> = <nat:9> \} $ . Stepping through , we have the environment update line giving $ <var:W3$ into $ <var:Y>$ . This takes $ \{ <var:h> = <var:Z> \land <var:W1> = <nat:9> \cdot <var:Z> \land <var:W2> = <nat:5> \cdot <var:Z> ^ <nat:2> \land <var:W3> = <nat:1> \cdot <var:Z> ^ <nat:3> \land <var:W0> = <nat:9> \} $ toward the condition $ \{ <var:h> = <var:Z> \land <var:W1> = <nat:9> \cdot <var:Z> \land <var:W2> = <nat:5> \cdot <var:Z> ^ <nat:2> \land <var:W0> = <nat:9> \land <var:Y> = <nat:1> \cdot <var:Z> ^ <nat:3> \} $ . Taking a look at the proceeding piece of code in the set of instructions , the variable binding statement \verb | <var:Y> := <var:Y> + <var:W2> | . This transfers $ \{ <var:h> = <var:Z> \land <var:W1> = <nat:9> \cdot <var:Z> \land <var:W2> = <nat:5> \cdot <var:Z> ^ <nat:2> \land <var:W0> = <nat:9> \land <var:Y> = <nat:1> \cdot <var:Z> ^ <nat:3> \} $ to the postcondition $ \{ <var:h> = <var:Z> \land <var:W1> = <nat:9> \cdot <var:Z> \land <var:W0> = <nat:9> \land <var:Y> = <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:5> \cdot <var:Z> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment law defined in typical Hoare logic . Observing the upcoming line of code contained in the list of instructions , we see the statement letting $ <var:Y> + <var:W1$ to $ <var:Y>$ . This forwards the condition $ \{ <var:h> = <var:Z> \land <var:W1> = <nat:9> \cdot <var:Z> \land <var:W0> = <nat:9> \land <var:Y> = <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:5> \cdot <var:Z> ^ <nat:2> \} $ to the postcondition $ \{ <var:h> = <var:Z> \land <var:W0> = <nat:9> \land <var:Y> = <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:5> \cdot <var:Z> ^ <nat:2> + <nat:9> \cdot <var:Z> \} $ . This is shown through the assignment scheme from usual Hoare techniques . Advancing on , we have the environment update line \verb | <var:Y> := <var:Y> + <var:W0> | . This command transfers the precondition $ \{ <var:h> = <var:Z> \land <var:W0> = <nat:9> \land <var:Y> = <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:5> \cdot <var:Z> ^ <nat:2> + <nat:9> \cdot <var:Z> \} $ into the postcondition $ \{ <var:h> = <var:Z> \land <var:Y> = <nat:1> \cdot <var:Z> ^ <nat:3> + <nat:5> \cdot <var:Z> ^ <nat:2> + <nat:9> \cdot <var:Z> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:h> = <var:Z> }} <var:W1> := <var:h> ; <var:W2> := <var:W1> * <var:h> ; <var:W3> := <var:W2> * <var:h> ; <var:W0> := <nat:9> ; <var:W1> := <var:W1> * <nat:9> ; <var:W2> := <var:W2> * <nat:5> ; <var:W3> := <var:W3> * <nat:1> ; <var:Y> := <var:W3> <var:Y> := <var:Y> + <var:W2> <var:Y> := <var:Y> + <var:W1> <var:Y> := <var:Y> + <var:W0> {{ <var:Y> = <nat:1> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:Z> /\ <var:W1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Z> /\ <var:W1> = <var:Z> /\ <var:W2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Z> /\ <var:W1> = <var:Z> /\ <var:W2> = <var:Z> ^ <nat:2> /\ <var:W3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Z> /\ <var:W1> = <var:Z> /\ <var:W2> = <var:Z> ^ <nat:2> /\ <var:W3> = <var:Z> ^ <nat:3> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Z> /\ <var:W1> = <nat:9> * <var:Z> /\ <var:W2> = <var:Z> ^ <nat:2> /\ <var:W3> = <var:Z> ^ <nat:3> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Z> /\ <var:W1> = <nat:9> * <var:Z> /\ <var:W2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:W3> = <var:Z> ^ <nat:3> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Z> /\ <var:W1> = <nat:9> * <var:Z> /\ <var:W2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:W3> = <nat:1> * <var:Z> ^ <nat:3> /\ <var:W0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Z> /\ <var:W1> = <nat:9> * <var:Z> /\ <var:W2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:W0> = <nat:9> /\ <var:Y> = <nat:1> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Z> /\ <var:W1> = <nat:9> * <var:Z> /\ <var:W0> = <nat:9> /\ <var:Y> = <nat:1> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Z> /\ <var:W0> = <nat:9> /\ <var:Y> = <nat:1> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Z> /\ <var:Y> = <nat:1> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 