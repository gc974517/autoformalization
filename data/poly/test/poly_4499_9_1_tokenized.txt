\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:x1> := <var:a> ; <var:x2> := <var:x1> * <var:a> ; <var:x3> := <var:x2> * <var:a> ; <var:x0> := <nat:5> ; <var:x2> := <var:x2> * <nat:4> ; <var:x3> := <var:x3> * <nat:3> ; <var:E> := <var:x3> <var:E> := <var:E> + <var:x2> <var:E> := <var:E> + <var:x0> \end{verbatim} Assume , given all natural coefficients $ <var:W> $ , that we have $ <var:a> = <var:W> $ ahead of the execution of this program , it holds that we see $ <var:E> = <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:5> $ after segment of code has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:W> \} \\ <var:x1> := <var:a> ; \\ \{ <var:a> = <var:W> \land <var:x1> = <var:W> \} \\ <var:x2> := <var:x1> * <var:a> ; \\ \{ <var:a> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <var:W> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:a> ; \\ \{ <var:a> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <var:W> ^ <nat:2> \land <var:x3> = <var:W> ^ <nat:3> \} \\ <var:x0> := <nat:5> ; \\ \{ <var:a> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <var:W> ^ <nat:2> \land <var:x3> = <var:W> ^ <nat:3> \land <var:x0> = <nat:5> \} \\ <var:x2> := <var:x2> * <nat:4> ; \\ \{ <var:a> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <nat:4> \times <var:W> ^ <nat:2> \land <var:x3> = <var:W> ^ <nat:3> \land <var:x0> = <nat:5> \} \\ <var:x3> := <var:x3> * <nat:3> ; \\ \{ <var:a> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <nat:4> \times <var:W> ^ <nat:2> \land <var:x3> = <nat:3> \times <var:W> ^ <nat:3> \land <var:x0> = <nat:5> \} \\ <var:E> := <var:x3> \\ \{ <var:a> = <var:W> \land <var:x1> = <var:W> \land <var:x2> = <nat:4> \times <var:W> ^ <nat:2> \land <var:x0> = <nat:5> \land <var:E> = <nat:3> \times <var:W> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:x2> \\ \{ <var:a> = <var:W> \land <var:x1> = <var:W> \land <var:x0> = <nat:5> \land <var:E> = <nat:3> \times <var:W> ^ <nat:3> + <nat:4> \times <var:W> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:x0> \\ \{ <var:a> = <var:W> \land <var:E> = <nat:3> \times <var:W> ^ <nat:3> + <nat:4> \times <var:W> ^ <nat:2> + <nat:5> \} \end{eqnarray} Applying typical Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:a> = <var:W> }} <var:x1> := <var:a> ; <var:x2> := <var:x1> * <var:a> ; <var:x3> := <var:x2> * <var:a> ; <var:x0> := <nat:5> ; <var:x2> := <var:x2> * <nat:4> ; <var:x3> := <var:x3> * <nat:3> ; <var:E> := <var:x3> <var:E> := <var:E> + <var:x2> <var:E> := <var:E> + <var:x0> {{ <var:E> = <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:x1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <var:W> ^ <nat:2> /\ <var:x3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <var:W> ^ <nat:2> /\ <var:x3> = <var:W> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <nat:4> * <var:W> ^ <nat:2> /\ <var:x3> = <var:W> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <nat:4> * <var:W> ^ <nat:2> /\ <var:x3> = <nat:3> * <var:W> ^ <nat:3> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:x1> = <var:W> /\ <var:x2> = <nat:4> * <var:W> ^ <nat:2> /\ <var:x0> = <nat:5> /\ <var:E> = <nat:3> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:x1> = <var:W> /\ <var:x0> = <nat:5> /\ <var:E> = <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:E> = <nat:3> * <var:W> ^ <nat:3> + <nat:4> * <var:W> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 