\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:h1> := <var:z> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:9> ; <var:n> := <var:h1> <var:n> := <var:n> + <var:h0> \end{verbatim} Allow that $ <var:z> = <var:l> $ for any positive integers $ <var:l> $ ahead of running the series of commands it must be that $ <var:n> = <nat:9> \cdot <var:l> + <nat:2> $ . \end{theorem} \begin{proof} The application of typical Hoare logic gives : \begin{eqnarray} \{ <var:z> = <var:l> \} \\ <var:h1> := <var:z> ; \\ \{ <var:z> = <var:l> \land <var:h1> = <var:l> \} \\ <var:h0> := <nat:2> ; \\ \{ <var:z> = <var:l> \land <var:h1> = <var:l> \land <var:h0> = <nat:2> \} \\ <var:h1> := <var:h1> * <nat:9> ; \\ \{ <var:z> = <var:l> \land <var:h1> = <nat:9> \cdot <var:l> \land <var:h0> = <nat:2> \} \end{eqnarray} Allowing the execution of this program returns : \begin{eqnarray} <var:n> := <var:h1> \\ \{ <var:z> = <var:l> \land <var:h0> = <nat:2> \land <var:n> = <nat:9> \cdot <var:l> \} \\ <var:n> := <var:n> + <var:h0> \\ \{ <var:z> = <var:l> \land <var:n> = <nat:9> \cdot <var:l> + <nat:2> \} \end{eqnarray} As a consequence , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:z> = <var:l> }} <var:h1> := <var:z> ; <var:h0> := <nat:2> ; <var:h1> := <var:h1> * <nat:9> ; <var:n> := <var:h1> <var:n> := <var:n> + <var:h0> {{ <var:n> = <nat:9> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:h1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:h1> = <var:l> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:h1> = <nat:9> * <var:l> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:h0> = <nat:2> /\ <var:n> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:l> /\ <var:n> = <nat:9> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 