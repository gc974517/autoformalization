\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:r> := <nat:3> ; <var:r> := <nat:4> + <var:r> * <var:M> ; <var:r> := <var:r> * <var:M> ; <var:r> := <nat:4> + <var:r> * <var:M> ; <var:r> := <nat:2> + <var:r> * <var:M> ; <var:r> := <var:r> * <var:M> ; <var:r> := <nat:2> + <var:r> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:M> = <var:Z> $ ahead of the execution of the series of commands then we see $ <var:r> = <nat:3> \times <var:Z> ^ <nat:6> + <nat:4> \times <var:Z> ^ <nat:5> + <nat:4> \times <var:Z> ^ <nat:3> + <nat:2> \times <var:Z> ^ <nat:2> + <nat:2> $ after code segment terminates . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands is accomplished with standard Hoare logic . Paying attention to the subsequent line in the segment of code , we see the variable binding statement \verb | <var:r> := <nat:3> ; | . This code moves the condition $ \{ <var:M> = <var:Z> \} $ into $ \{ <var:M> = <var:Z> \land <var:r> = <nat:3> \} $ . Looking at the proceeding line of code seen in the set of commands , we have the environment update command \verb | <var:r> := <nat:4> + <var:r> * <var:M> ; | . This transfers $ \{ <var:M> = <var:Z> \land <var:r> = <nat:3> \} $ toward $ \{ <var:M> = <var:Z> \land <var:r> = <nat:3> \times <var:Z> + <nat:4> \} $ . This is sound with the assignment scheme given in usual Hoare logic . Moving onward , we have the environment update statement giving $ <var:r> * <var:M> $ to $ <var:r>$ . This takes the precondition $ \{ <var:M> = <var:Z> \land <var:r> = <nat:3> \times <var:Z> + <nat:4> \} $ into $ \{ <var:M> = <var:Z> \land <var:r> = <nat:3> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + \} $ . This is shown with the assignment scheme given in Hoare logic . Now , the environment update code binding $ <nat:4> + <var:r> * <var:M> $ toward $ <var:r>$ . This advances the condition $ \{ <var:M> = <var:Z> \land <var:r> = <nat:3> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + \} $ as the postcondition $ \{ <var:M> = <var:Z> \land <var:r> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:4> \} $ . This is ensured with the assignment inference rule from Hoare techniques . Shifting focus toward the upcoming piece of code in our program , we see the environment update code assigning $ <nat:2> + <var:r> * <var:M> $ toward $ <var:r>$ . This code redefines $ \{ <var:M> = <var:Z> \land <var:r> = <nat:3> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:4> \} $ as $ \{ <var:M> = <var:Z> \land <var:r> = <nat:3> \times <var:Z> ^ <nat:4> + <nat:4> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> + <nat:2> \} $ . This is guaranteed by the assignment inference rule defined in typical Hoare logic . Following , we have the variable assignmet command defining $ <var:r> * <var:M> $ to $ <var:r>$ . This statement advances the condition $ \{ <var:M> = <var:Z> \land <var:r> = <nat:3> \times <var:Z> ^ <nat:4> + <nat:4> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> + <nat:2> \} $ to $ \{ <var:M> = <var:Z> \land <var:r> = <nat:3> \times <var:Z> ^ <nat:5> + <nat:4> \times <var:Z> ^ <nat:4> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + \} $ . Next , we see the variable binding code \verb | <var:r> := <nat:2> + <var:r> * <var:M> | . This takes the precondition $ \{ <var:M> = <var:Z> \land <var:r> = <nat:3> \times <var:Z> ^ <nat:5> + <nat:4> \times <var:Z> ^ <nat:4> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + \} $ into the condition $ \{ <var:M> = <var:Z> \land <var:r> = <nat:3> \times <var:Z> ^ <nat:6> + <nat:4> \times <var:Z> ^ <nat:5> + <nat:4> \times <var:Z> ^ <nat:3> + <nat:2> \times <var:Z> ^ <nat:2> + <nat:2> \} $ . This is guaranteed with the assignment law from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:r> := <nat:3> ; <var:r> := <nat:4> + <var:r> * <var:M> ; <var:r> := <var:r> * <var:M> ; <var:r> := <nat:4> + <var:r> * <var:M> ; <var:r> := <nat:2> + <var:r> * <var:M> ; <var:r> := <var:r> * <var:M> ; <var:r> := <nat:2> + <var:r> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:M> = <var:Z> }} <def:poly> {{ <var:r> = <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:r> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:r> = <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:r> = <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:r> = <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:r> = <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:r> = <nat:3> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Z> /\ <var:r> = <nat:3> * <var:Z> ^ <nat:6> + <nat:4> * <var:Z> ^ <nat:5> + <nat:4> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 