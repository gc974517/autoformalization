\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:g> := <nat:1> ; <var:g> := <nat:3> + <var:g> * <var:F> ; <var:g> := <nat:1> + <var:g> * <var:F> ; <var:g> := <nat:2> + <var:g> * <var:F> ; <var:g> := <nat:4> + <var:g> * <var:F> ; <var:g> := <var:g> * <var:F> ; <var:g> := <nat:4> + <var:g> * <var:F> ; <var:g> := <nat:1> + <var:g> * <var:F> ; <var:g> := <nat:4> + <var:g> * <var:F> ; <var:g> := <nat:2> + <var:g> * <var:F> ; <var:g> := <nat:3> + <var:g> * <var:F> ; <var:g> := <nat:4> + <var:g> * <var:F> ; <var:g> := <nat:2> + <var:g> * <var:F> ; <var:g> := <nat:4> + <var:g> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:F> = <var:B> $ prior to the execution of the segment of code it follows that we see $ <var:g> = <nat:1> * <var:B> ^ <nat:13> + <nat:3> * <var:B> ^ <nat:12> + <nat:1> * <var:B> ^ <nat:11> + <nat:2> * <var:B> ^ <nat:10> + <nat:4> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> $ once set of instructions finishes . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code is shown by Hoare logic . Next , the assignment statement \verb | <var:g> := <nat:1> ; | . This code advances the precondition $ \{ <var:F> = <var:B> \} $ as the condition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> \} $ . This is shown by the assignment rule given by typical Hoare techniques . Advancing , the variable update code \verb | <var:g> := <nat:3> + <var:g> * <var:F> ; | . This transfers the condition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> \} $ as the condition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> + <nat:3> \} $ . Moving on , we see the variable assignmet line defining $ <nat:1> + <var:g> * <var:F> $ to $ <var:g>$ . This redefines the condition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> + <nat:3> \} $ toward the postcondition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:1> \} $ . Honing in on the subsequent command contained in our code , we have the variable assignmet command letting $ <nat:2> + <var:g> * <var:F> $ to $ <var:g>$ . This moves the precondition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:1> \} $ toward $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> \} $ . Taking another step toward the next bit of code contained in our list of instructions , we see the command giving $ <nat:4> + <var:g> * <var:F> $ as $ <var:g>$ . This line moves the condition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> \} $ as $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> \} $ . This is deduced through the assignment rule given by usual Hoare reasoning . Shifting focus toward the subsequent step seen in the list of commands , the line defining $ <var:g> * <var:F> $ to $ <var:g>$ . This command forwards $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> \} $ as the condition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + \} $ . This is sound with the assignment law of typical Hoare techniques . Paying attention to the proceeding line contained in the list of commands , we see the assignment line binding $ <nat:4> + <var:g> * <var:F> $ to $ <var:g>$ . This forwards the condition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + \} $ toward the condition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> \} $ . This is deduced using the assignment scheme given in typical Hoare reasoning . Focusing on the subsequent command found in our set of commands , we see the assignment command \verb | <var:g> := <nat:1> + <var:g> * <var:F> ; | . This command redefines the precondition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> \} $ toward $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:7> + <nat:3> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:4> * <var:B> + <nat:1> \} $ . This is rigorously given with the assignment inference rule found in usual Hoare logic . Taking another step toward the following line in the code segment , we have the variable binding line letting $ <nat:4> + <var:g> * <var:F> $ as $ <var:g>$ . This advances $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:7> + <nat:3> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:4> * <var:B> + <nat:1> \} $ to $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:8> + <nat:3> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:4> \} $ . This is guaranteed using the assignment scheme given by typical Hoare techniques . Immediately after , we have the assignment statement \verb | <var:g> := <nat:2> + <var:g> * <var:F> ; | . This command redefines the condition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:8> + <nat:3> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:4> \} $ into $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:9> + <nat:3> * <var:B> ^ <nat:8> + <nat:1> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:2> \} $ . This is given using the assignment scheme from Hoare techniques . Advancing to the upcoming line in our program , we have the variable binding line assigning $ <nat:3> + <var:g> * <var:F> $ into $ <var:g>$ . This line advances the condition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:9> + <nat:3> * <var:B> ^ <nat:8> + <nat:1> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:2> \} $ to the postcondition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:10> + <nat:3> * <var:B> ^ <nat:9> + <nat:1> * <var:B> ^ <nat:8> + <nat:2> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> \} $ . Observing the proceeding line in our list of instructions , we see the assignment command assigning $ <nat:4> + <var:g> * <var:F> $ toward $ <var:g>$ . This code moves $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:10> + <nat:3> * <var:B> ^ <nat:9> + <nat:1> * <var:B> ^ <nat:8> + <nat:2> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> \} $ toward the condition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:11> + <nat:3> * <var:B> ^ <nat:10> + <nat:1> * <var:B> ^ <nat:9> + <nat:2> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> \} $ . This is sound using the assignment scheme defined in Hoare techniques . Moving forward to the proceeding line of code seen in our series of instructions , the variable binding statement defining $ <nat:2> + <var:g> * <var:F> $ as $ <var:g>$ . This forwards $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:11> + <nat:3> * <var:B> ^ <nat:10> + <nat:1> * <var:B> ^ <nat:9> + <nat:2> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> \} $ to the condition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:12> + <nat:3> * <var:B> ^ <nat:11> + <nat:1> * <var:B> ^ <nat:10> + <nat:2> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:2> \} $ . This is deduced with the assignment rule defined by standard Hoare techniques . Moving forward to the next step in our series of commands , the line binding $ <nat:4> + <var:g> * <var:F$ to $ <var:g>$ . This statement advances the condition $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:12> + <nat:3> * <var:B> ^ <nat:11> + <nat:1> * <var:B> ^ <nat:10> + <nat:2> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:2> \} $ as $ \{ <var:F> = <var:B> \land <var:g> = <nat:1> * <var:B> ^ <nat:13> + <nat:3> * <var:B> ^ <nat:12> + <nat:1> * <var:B> ^ <nat:11> + <nat:2> * <var:B> ^ <nat:10> + <nat:4> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> \} $ . This is shown with the assignment inference rule given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:1> ; <var:g> := <nat:3> + <var:g> * <var:F> ; <var:g> := <nat:1> + <var:g> * <var:F> ; <var:g> := <nat:2> + <var:g> * <var:F> ; <var:g> := <nat:4> + <var:g> * <var:F> ; <var:g> := <var:g> * <var:F> ; <var:g> := <nat:4> + <var:g> * <var:F> ; <var:g> := <nat:1> + <var:g> * <var:F> ; <var:g> := <nat:4> + <var:g> * <var:F> ; <var:g> := <nat:2> + <var:g> * <var:F> ; <var:g> := <nat:3> + <var:g> * <var:F> ; <var:g> := <nat:4> + <var:g> * <var:F> ; <var:g> := <nat:2> + <var:g> * <var:F> ; <var:g> := <nat:4> + <var:g> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:F> = <var:B> }} <def:poly> {{ <var:g> = <nat:1> * <var:B> ^ <nat:13> + <nat:3> * <var:B> ^ <nat:12> + <nat:1> * <var:B> ^ <nat:11> + <nat:2> * <var:B> ^ <nat:10> + <nat:4> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> * <var:B> ^ <nat:7> + <nat:3> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:4> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> * <var:B> ^ <nat:8> + <nat:3> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> * <var:B> ^ <nat:9> + <nat:3> * <var:B> ^ <nat:8> + <nat:1> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> * <var:B> ^ <nat:10> + <nat:3> * <var:B> ^ <nat:9> + <nat:1> * <var:B> ^ <nat:8> + <nat:2> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> * <var:B> ^ <nat:11> + <nat:3> * <var:B> ^ <nat:10> + <nat:1> * <var:B> ^ <nat:9> + <nat:2> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> * <var:B> ^ <nat:12> + <nat:3> * <var:B> ^ <nat:11> + <nat:1> * <var:B> ^ <nat:10> + <nat:2> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:B> /\ <var:g> = <nat:1> * <var:B> ^ <nat:13> + <nat:3> * <var:B> ^ <nat:12> + <nat:1> * <var:B> ^ <nat:11> + <nat:2> * <var:B> ^ <nat:10> + <nat:4> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 