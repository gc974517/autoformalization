\begin{document} \begin{theorem} Consider the following series of instructions : \begin{verbatim} <var:h1> := <var:L> ; <var:h2> := <var:h1> * <var:L> ; <var:h3> := <var:h2> * <var:L> ; <var:h0> := <nat:2> ; <var:h2> := <var:h2> * <nat:1> ; <var:h3> := <var:h3> * <nat:4> ; <var:e> := <var:h3> <var:e> := <var:e> + <var:h2> <var:e> := <var:e> + <var:h0> \end{verbatim} Allow that $ <var:L> = <var:B> $ prior to the evaluation of this program then $ <var:e> = <nat:4> \cdot <var:B> ^ <nat:3> + <nat:1> \cdot <var:B> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for the series of commands is evident through standard Hoare reasoning . Now , the variable update statement \verb | <var:h1> := <var:L> ; | . This takes the precondition $ \{ <var:L> = <var:B> \} $ to $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \} $ . This is shown to be logically sound using the assignment inference rule in usual Hoare reasoning . Jumping to the following step in the list of instructions , we have the code assigning $ <var:h1> * <var:L> $ toward $ <var:h2>$ . This line takes $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \} $ into the postcondition $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h2> = <var:B> ^ <nat:2> \} $ . Immediately following , the line \verb | <var:h3> := <var:h2> * <var:L> ; | . This statement moves $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h2> = <var:B> ^ <nat:2> \} $ as the postcondition $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h2> = <var:B> ^ <nat:2> \land <var:h3> = <var:B> ^ <nat:3> \} $ . Advancing , the assignment line \verb | <var:h0> := <nat:2> ; | . This redefines the condition $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h2> = <var:B> ^ <nat:2> \land <var:h3> = <var:B> ^ <nat:3> \} $ as the postcondition $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h2> = <var:B> ^ <nat:2> \land <var:h3> = <var:B> ^ <nat:3> \land <var:h0> = <nat:2> \} $ . Shifting focus toward the following step contained in our code segment , we see the variable binding line \verb | <var:h2> := <var:h2> * <nat:1> ; | . This code advances the precondition $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h2> = <var:B> ^ <nat:2> \land <var:h3> = <var:B> ^ <nat:3> \land <var:h0> = <nat:2> \} $ as $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h2> = <nat:1> \times <var:B> ^ <nat:2> \land <var:h3> = <var:B> ^ <nat:3> \land <var:h0> = <nat:2> \} $ . This is shown through the assignment scheme defined by standard Hoare techniques . Moving onward , we have the variable assignmet command \verb | <var:h3> := <var:h3> * <nat:4> ; | . This line redefines the precondition $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h2> = <nat:1> \times <var:B> ^ <nat:2> \land <var:h3> = <var:B> ^ <nat:3> \land <var:h0> = <nat:2> \} $ toward the postcondition $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h2> = <nat:1> \times <var:B> ^ <nat:2> \land <var:h3> = <nat:4> \times <var:B> ^ <nat:3> \land <var:h0> = <nat:2> \} $ . This is shown using the assignment law defined in usual Hoare reasoning . Stepping through , we have the code defining $ <var:h3$ as $ <var:e>$ . This statement advances the condition $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h2> = <nat:1> \times <var:B> ^ <nat:2> \land <var:h3> = <nat:4> \times <var:B> ^ <nat:3> \land <var:h0> = <nat:2> \} $ into $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h2> = <nat:1> \times <var:B> ^ <nat:2> \land <var:h0> = <nat:2> \land <var:e> = <nat:4> \times <var:B> ^ <nat:3> \} $ . Going to the next step , we have the environment update line \verb | <var:e> := <var:e> + <var:h2> | . This takes $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h2> = <nat:1> \times <var:B> ^ <nat:2> \land <var:h0> = <nat:2> \land <var:e> = <nat:4> \times <var:B> ^ <nat:3> \} $ toward the condition $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h0> = <nat:2> \land <var:e> = <nat:4> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment law found in usual Hoare techniques . Moving on , we have the environment update line giving $ <var:e> + <var:h0$ to $ <var:e>$ . This takes the condition $ \{ <var:L> = <var:B> \land <var:h1> = <var:B> \land <var:h0> = <nat:2> \land <var:e> = <nat:4> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> \} $ to $ \{ <var:L> = <var:B> \land <var:e> = <nat:4> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:L> = <var:B> }} <var:h1> := <var:L> ; <var:h2> := <var:h1> * <var:L> ; <var:h3> := <var:h2> * <var:L> ; <var:h0> := <nat:2> ; <var:h2> := <var:h2> * <nat:1> ; <var:h3> := <var:h3> * <nat:4> ; <var:e> := <var:h3> <var:e> := <var:e> + <var:h2> <var:e> := <var:e> + <var:h0> {{ <var:e> = <nat:4> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:h1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:h1> = <var:B> /\ <var:h2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:h1> = <var:B> /\ <var:h2> = <var:B> ^ <nat:2> /\ <var:h3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:h1> = <var:B> /\ <var:h2> = <var:B> ^ <nat:2> /\ <var:h3> = <var:B> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:h1> = <var:B> /\ <var:h2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:h3> = <var:B> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:h1> = <var:B> /\ <var:h2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:h3> = <nat:4> * <var:B> ^ <nat:3> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:h1> = <var:B> /\ <var:h2> = <nat:1> * <var:B> ^ <nat:2> /\ <var:h0> = <nat:2> /\ <var:e> = <nat:4> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:h1> = <var:B> /\ <var:h0> = <nat:2> /\ <var:e> = <nat:4> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:B> /\ <var:e> = <nat:4> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 