\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:8> ; <var:F2> := <nat:9> ; <var:F2> := <var:F2> * <var:b> ; <var:F2> := <var:F2> * <var:b> ; <var:F3> := <nat:9> ; <var:F3> := <var:F3> * <var:b> ; <var:F3> := <var:F3> * <var:b> ; <var:F3> := <var:F3> * <var:b> ; <var:Y> := <var:F3> ; <var:Y> := <var:Y> + <var:F2> ; <var:Y> := <var:Y> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> . Assume it to hold that $ <var:b> = <var:S> $ , for every positive numbers $ <var:S> $ , before the execution of the code segment it must be that we see $ <var:Y> = <nat:9> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ^ <nat:2> + <nat:8> $ . \end{theorem} \begin{proof} Notice this decorated program . \begin{eqnarray} \{ <var:b> = <var:S> \} \\ <var:F0> := <nat:8> ; \\ \{ <var:b> = <var:S> \land <var:F0> = <nat:8> \} \\ <var:F2> := <nat:9> ; \\ \{ <var:b> = <var:S> \land <var:F0> = <nat:8> \land <var:F2> = <nat:9> \} \\ <var:F2> := <var:F2> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:F0> = <nat:8> \land <var:F2> = <nat:9> * <var:S> \} \\ <var:F2> := <var:F2> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:F0> = <nat:8> \land <var:F2> = <nat:9> * <var:S> ^ <nat:2> \} \\ <var:F3> := <nat:9> ; \\ \{ <var:b> = <var:S> \land <var:F0> = <nat:8> \land <var:F2> = <nat:9> * <var:S> ^ <nat:2> \land <var:F3> = <nat:9> \} \\ <var:F3> := <var:F3> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:F0> = <nat:8> \land <var:F2> = <nat:9> * <var:S> ^ <nat:2> \land <var:F3> = <nat:9> * <var:S> \} \\ <var:F3> := <var:F3> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:F0> = <nat:8> \land <var:F2> = <nat:9> * <var:S> ^ <nat:2> \land <var:F3> = <nat:9> * <var:S> ^ <nat:2> \} \\ <var:F3> := <var:F3> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:F0> = <nat:8> \land <var:F2> = <nat:9> * <var:S> ^ <nat:2> \land <var:F3> = <nat:9> * <var:S> ^ <nat:3> \} \\ <var:Y> := <var:F3> ; \\ \{ <var:b> = <var:S> \land <var:F0> = <nat:8> \land <var:F2> = <nat:9> * <var:S> ^ <nat:2> \land <var:Y> = <nat:9> * <var:S> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:F2> ; \\ \{ <var:b> = <var:S> \land <var:F0> = <nat:8> \land <var:Y> = <nat:9> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:F0> \\ \{ <var:b> = <var:S> \land <var:Y> = <nat:9> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ^ <nat:2> + <nat:8> \} \end{eqnarray} Applying typical Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F0> := <nat:8> ; <var:F2> := <nat:9> ; <var:F2> := <var:F2> * <var:b> ; <var:F2> := <var:F2> * <var:b> ; <var:F3> := <nat:9> ; <var:F3> := <var:F3> * <var:b> ; <var:F3> := <var:F3> * <var:b> ; <var:F3> := <var:F3> * <var:b> ; <var:Y> := <var:F3> ; <var:Y> := <var:Y> + <var:F2> ; <var:Y> := <var:Y> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:b> = <var:S> }} <def:poly> {{ <var:Y> = <nat:9> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ^ <nat:2> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:F0> = <nat:8> /\ <var:F2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:F0> = <nat:8> /\ <var:F2> = <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:F0> = <nat:8> /\ <var:F2> = <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:F0> = <nat:8> /\ <var:F2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:F3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:F0> = <nat:8> /\ <var:F2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:F3> = <nat:9> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:F0> = <nat:8> /\ <var:F2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:F3> = <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:F0> = <nat:8> /\ <var:F2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:F3> = <nat:9> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:F0> = <nat:8> /\ <var:F2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:Y> = <nat:9> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:F0> = <nat:8> /\ <var:Y> = <nat:9> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:Y> = <nat:9> * <var:S> ^ <nat:3> + <nat:9> * <var:S> ^ <nat:2> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 