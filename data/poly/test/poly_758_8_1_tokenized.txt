\begin{document} \begin{theorem} We define a set of commands as \begin{verbatim} <var:d1> := <var:h> ; <var:d2> := <var:d1> * <var:h> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:4> ; <var:d2> := <var:d2> * <nat:3> ; <var:J> := <var:d2> <var:J> := <var:J> + <var:d1> <var:J> := <var:J> + <var:d0> \end{verbatim} Given it to hold that $ <var:h> = <var:k> $ before the evaluation of this set of commands , then we see $ <var:J> = <nat:3> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:1> $ . \end{theorem} \begin{proof} Notice the following decorated series of instructions . \begin{eqnarray} \{ <var:h> = <var:k> \} \\ <var:d1> := <var:h> ; \\ \{ <var:h> = <var:k> \land <var:d1> = <var:k> \} \end{eqnarray} Advancing executing the program gives us : \begin{eqnarray} <var:d2> := <var:d1> * <var:h> ; \\ \{ <var:h> = <var:k> \land <var:d1> = <var:k> \land <var:d2> = <var:k> ^ <nat:2> \} \\ <var:d0> := <nat:1> ; \\ \{ <var:h> = <var:k> \land <var:d1> = <var:k> \land <var:d2> = <var:k> ^ <nat:2> \land <var:d0> = <nat:1> \} \\ <var:d1> := <var:d1> * <nat:4> ; \\ \{ <var:h> = <var:k> \land <var:d1> = <nat:4> * <var:k> \land <var:d2> = <var:k> ^ <nat:2> \land <var:d0> = <nat:1> \} \\ <var:d2> := <var:d2> * <nat:3> ; \\ \{ <var:h> = <var:k> \land <var:d1> = <nat:4> * <var:k> \land <var:d2> = <nat:3> * <var:k> ^ <nat:2> \land <var:d0> = <nat:1> \} \\ <var:J> := <var:d2> \\ \{ <var:h> = <var:k> \land <var:d1> = <nat:4> * <var:k> \land <var:d0> = <nat:1> \land <var:J> = <nat:3> * <var:k> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:d1> \\ \{ <var:h> = <var:k> \land <var:d0> = <nat:1> \land <var:J> = <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> \} \\ <var:J> := <var:J> + <var:d0> \\ \{ <var:h> = <var:k> \land <var:J> = <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:1> \} \end{eqnarray} Applying usual Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:h> = <var:k> }} <var:d1> := <var:h> ; <var:d2> := <var:d1> * <var:h> ; <var:d0> := <nat:1> ; <var:d1> := <var:d1> * <nat:4> ; <var:d2> := <var:d2> * <nat:3> ; <var:J> := <var:d2> <var:J> := <var:J> + <var:d1> <var:J> := <var:J> + <var:d0> {{ <var:J> = <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:d1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:d1> = <var:k> /\ <var:d2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:d1> = <var:k> /\ <var:d2> = <var:k> ^ <nat:2> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:d1> = <nat:4> * <var:k> /\ <var:d2> = <var:k> ^ <nat:2> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:d1> = <nat:4> * <var:k> /\ <var:d2> = <nat:3> * <var:k> ^ <nat:2> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:d1> = <nat:4> * <var:k> /\ <var:d0> = <nat:1> /\ <var:J> = <nat:3> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:d0> = <nat:1> /\ <var:J> = <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:k> /\ <var:J> = <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 