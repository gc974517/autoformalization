\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as \begin{verbatim} <var:q1> := <var:E> ; <var:q2> := <var:q1> * <var:E> ; <var:q3> := <var:q2> * <var:E> ; <var:q0> := <nat:1> ; <var:q1> := <var:q1> * <nat:2> ; <var:q2> := <var:q2> * <nat:3> ; <var:q3> := <var:q3> * <nat:3> ; <var:G> := <var:q3> <var:G> := <var:G> + <var:q2> <var:G> := <var:G> + <var:q1> <var:G> := <var:G> + <var:q0> \end{verbatim} Assuming --- for integers $ <var:y> $ --- that $ <var:E> = <var:y> $ ahead of the evaluation of our set of instructions , it must be that we see $ <var:G> = <nat:3> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:1> $ when series of instructions is done . \end{theorem} \begin{proof} The proof of our set of commands can be seen through standard Hoare logic . Moving forward to the following lines of codeseen in the segment of code , we see \begin{eqnarray} \{ <var:E> = <var:y> \} \, <var:q1> := <var:E> \, \{ <var:E> = <var:y> \land <var:q1> = <var:y> \} \\ \{ <var:E> = <var:y> \land <var:q1> = <var:y> \} \, <var:q2> := <var:q1> * <var:E> \, \{ <var:E> = <var:y> \land <var:q1> = <var:y> \land <var:q2> = <var:y> ^ <nat:2> \} \\ \{ <var:E> = <var:y> \land <var:q1> = <var:y> \land <var:q2> = <var:y> ^ <nat:2> \} \, <var:q3> := <var:q2> * <var:E> \, \{ <var:E> = <var:y> \land <var:q1> = <var:y> \land <var:q2> = <var:y> ^ <nat:2> \land <var:q3> = <var:y> ^ <nat:3> \} \\ \{ <var:E> = <var:y> \land <var:q1> = <var:y> \land <var:q2> = <var:y> ^ <nat:2> \land <var:q3> = <var:y> ^ <nat:3> \} \, <var:q0> := <nat:1> \, \{ <var:E> = <var:y> \land <var:q1> = <var:y> \land <var:q2> = <var:y> ^ <nat:2> \land <var:q3> = <var:y> ^ <nat:3> \land <var:q0> = <nat:1> \} \\ \{ <var:E> = <var:y> \land <var:q1> = <var:y> \land <var:q2> = <var:y> ^ <nat:2> \land <var:q3> = <var:y> ^ <nat:3> \land <var:q0> = <nat:1> \} \, <var:q1> := <var:q1> * <nat:2> \, \{ <var:E> = <var:y> \land <var:q1> = <nat:2> \cdot <var:y> \land <var:q2> = <var:y> ^ <nat:2> \land <var:q3> = <var:y> ^ <nat:3> \land <var:q0> = <nat:1> \} \\ \{ <var:E> = <var:y> \land <var:q1> = <nat:2> \cdot <var:y> \land <var:q2> = <var:y> ^ <nat:2> \land <var:q3> = <var:y> ^ <nat:3> \land <var:q0> = <nat:1> \} \, <var:q2> := <var:q2> * <nat:3> \, \{ <var:E> = <var:y> \land <var:q1> = <nat:2> \cdot <var:y> \land <var:q2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:q3> = <var:y> ^ <nat:3> \land <var:q0> = <nat:1> \} \\ \{ <var:E> = <var:y> \land <var:q1> = <nat:2> \cdot <var:y> \land <var:q2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:q3> = <var:y> ^ <nat:3> \land <var:q0> = <nat:1> \} \, <var:q3> := <var:q3> * <nat:3> \, \{ <var:E> = <var:y> \land <var:q1> = <nat:2> \cdot <var:y> \land <var:q2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:q3> = <nat:3> \cdot <var:y> ^ <nat:3> \land <var:q0> = <nat:1> \} \end{eqnarray} Keeping momentum , we have \begin{eqnarray} \{ <var:E> = <var:y> \} \, <var:q1> := <var:E> \, \{ <var:E> = <var:y> \land <var:q1> = <var:y> \} \\ \{ <var:E> = <var:y> \land <var:q1> = <var:y> \} \, <var:q2> := <var:q1> * <var:E> \, \{ <var:E> = <var:y> \land <var:q1> = <var:y> \land <var:q2> = <var:y> ^ <nat:2> \} \\ \{ <var:E> = <var:y> \land <var:q1> = <var:y> \land <var:q2> = <var:y> ^ <nat:2> \} \, <var:q3> := <var:q2> * <var:E> \, \{ <var:E> = <var:y> \land <var:q1> = <var:y> \land <var:q2> = <var:y> ^ <nat:2> \land <var:q3> = <var:y> ^ <nat:3> \} \end{eqnarray} Taking a look at the subsequent line in our series of commands , \begin{eqnarray} \{ <var:E> = <var:y> \} \, <var:q1> := <var:E> \, \{ <var:E> = <var:y> \land <var:q1> = <var:y> \} \end{eqnarray} This is known to be sound through the variable assignmet scheme obtained from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:E> = <var:y> }} <var:q1> := <var:E> ; <var:q2> := <var:q1> * <var:E> ; <var:q3> := <var:q2> * <var:E> ; <var:q0> := <nat:1> ; <var:q1> := <var:q1> * <nat:2> ; <var:q2> := <var:q2> * <nat:3> ; <var:q3> := <var:q3> * <nat:3> ; <var:G> := <var:q3> <var:G> := <var:G> + <var:q2> <var:G> := <var:G> + <var:q1> <var:G> := <var:G> + <var:q0> {{ <var:G> = <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:q1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:q1> = <var:y> /\ <var:q2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:q1> = <var:y> /\ <var:q2> = <var:y> ^ <nat:2> /\ <var:q3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:q1> = <var:y> /\ <var:q2> = <var:y> ^ <nat:2> /\ <var:q3> = <var:y> ^ <nat:3> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:q1> = <nat:2> * <var:y> /\ <var:q2> = <var:y> ^ <nat:2> /\ <var:q3> = <var:y> ^ <nat:3> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:q1> = <nat:2> * <var:y> /\ <var:q2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:q3> = <var:y> ^ <nat:3> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:q1> = <nat:2> * <var:y> /\ <var:q2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:q3> = <nat:3> * <var:y> ^ <nat:3> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:q1> = <nat:2> * <var:y> /\ <var:q2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:q0> = <nat:1> /\ <var:G> = <nat:3> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:q1> = <nat:2> * <var:y> /\ <var:q0> = <nat:1> /\ <var:G> = <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:q0> = <nat:1> /\ <var:G> = <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:G> = <nat:3> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 