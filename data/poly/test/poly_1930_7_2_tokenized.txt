\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:P> := <nat:4> ; <var:P> := <nat:2> + <var:P> * <var:I> ; <var:P> := <nat:3> + <var:P> * <var:I> ; <var:P> := <nat:3> + <var:P> * <var:I> ; <var:P> := <nat:4> + <var:P> * <var:I> ; <var:P> := <nat:1> + <var:P> * <var:I> ; <var:P> := <nat:1> + <var:P> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Given for every positive integers $ <var:v> $ it to be that $ <var:I> = <var:v> $ before the execution of the program it must be that $ <var:P> = <nat:4> \cdot <var:v> ^ <nat:6> + <nat:2> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:4> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:1> \cdot <var:v> + <nat:1> $ when series of instructions has finished . \end{theorem} \begin{proof} The proof of this list of commands can be given using Hoare techniques . Taking a look at the subsequent statement seen in the list of commands , \[ \begin{tabular} {rcl} \{ <var:I> = <var:v> \} & <var:P> := <nat:4> & \{ <var:I> = <var:v> \land <var:P> = <nat:4> \} \end{tabular} Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:v> \} & <var:P> := <nat:4> & \{ <var:I> = <var:v> \land <var:P> = <nat:4> \} \\ \{ <var:I> = <var:v> \land <var:P> = <nat:4> \} & <var:P> := <nat:2> + <var:P> * <var:I> & \{ <var:I> = <var:v> \land <var:P> = <nat:4> \times <var:v> + <nat:2> \} \\ \{ <var:I> = <var:v> \land <var:P> = <nat:4> \times <var:v> + <nat:2> \} & <var:P> := <nat:3> + <var:P> * <var:I> & \{ <var:I> = <var:v> \land <var:P> = <nat:4> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:3> \} \\ \{ <var:I> = <var:v> \land <var:P> = <nat:4> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:3> \} & <var:P> := <nat:3> + <var:P> * <var:I> & \{ <var:I> = <var:v> \land <var:P> = <nat:4> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + <nat:3> \} \\ \{ <var:I> = <var:v> \land <var:P> = <nat:4> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + <nat:3> \} & <var:P> := <nat:4> + <var:P> * <var:I> & \{ <var:I> = <var:v> \land <var:P> = <nat:4> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + <nat:4> \} \\ \{ <var:I> = <var:v> \land <var:P> = <nat:4> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + <nat:4> \} & <var:P> := <nat:1> + <var:P> * <var:I> & \{ <var:I> = <var:v> \land <var:P> = <nat:4> \times <var:v> ^ <nat:5> + <nat:2> \times <var:v> ^ <nat:4> + <nat:3> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:1> \} \end{tabular} This is deduced with the environment update scheme of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:P> := <nat:4> ; <var:P> := <nat:2> + <var:P> * <var:I> ; <var:P> := <nat:3> + <var:P> * <var:I> ; <var:P> := <nat:3> + <var:P> * <var:I> ; <var:P> := <nat:4> + <var:P> * <var:I> ; <var:P> := <nat:1> + <var:P> * <var:I> ; <var:P> := <nat:1> + <var:P> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:I> = <var:v> }} <def:poly> {{ <var:P> = <nat:4> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:P> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:P> = <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:P> = <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:P> = <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:P> = <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:P> = <nat:4> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:P> = <nat:4> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 