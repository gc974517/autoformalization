\begin{document} \begin{theorem} Let the following program in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:3> ; <var:r2> := <nat:6> ; <var:r2> := <var:r2> * <var:g> ; <var:r2> := <var:r2> * <var:g> ; <var:r3> := <nat:6> ; <var:r3> := <var:r3> * <var:g> ; <var:r3> := <var:r3> * <var:g> ; <var:r3> := <var:r3> * <var:g> ; <var:S> := <var:r3> ; <var:S> := <var:S> + <var:r2> ; <var:S> := <var:S> + <var:r0> \end{verbatim} Allow --- for some natural coefficients $ <var:e> $ --- $ <var:g> = <var:e> $ ahead of running this program , it follows that $ <var:S> = <nat:6> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} We can see that this decorated set of instructions . \begin{eqnarray} \{ <var:g> = <var:e> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:g> = <var:e> \land <var:r0> = <nat:3> \} \\ <var:r2> := <nat:6> ; \\ \{ <var:g> = <var:e> \land <var:r0> = <nat:3> \land <var:r2> = <nat:6> \} \\ <var:r2> := <var:r2> * <var:g> ; \\ \{ <var:g> = <var:e> \land <var:r0> = <nat:3> \land <var:r2> = <nat:6> \times <var:e> \} \\ <var:r2> := <var:r2> * <var:g> ; \\ \{ <var:g> = <var:e> \land <var:r0> = <nat:3> \land <var:r2> = <nat:6> \times <var:e> ^ <nat:2> \} \\ <var:r3> := <nat:6> ; \\ \{ <var:g> = <var:e> \land <var:r0> = <nat:3> \land <var:r2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:r3> = <nat:6> \} \end{eqnarray} Continuing evaluating the set of commands gives us : \begin{eqnarray} <var:r3> := <var:r3> * <var:g> ; \\ \{ <var:g> = <var:e> \land <var:r0> = <nat:3> \land <var:r2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:e> \} \\ <var:r3> := <var:r3> * <var:g> ; \\ \{ <var:g> = <var:e> \land <var:r0> = <nat:3> \land <var:r2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:e> ^ <nat:2> \} \\ <var:r3> := <var:r3> * <var:g> ; \\ \{ <var:g> = <var:e> \land <var:r0> = <nat:3> \land <var:r2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:r3> = <nat:6> \times <var:e> ^ <nat:3> \} \\ <var:S> := <var:r3> ; \\ \{ <var:g> = <var:e> \land <var:r0> = <nat:3> \land <var:r2> = <nat:6> \times <var:e> ^ <nat:2> \land <var:S> = <nat:6> \times <var:e> ^ <nat:3> \} \\ <var:S> := <var:S> + <var:r2> ; \\ \{ <var:g> = <var:e> \land <var:r0> = <nat:3> \land <var:S> = <nat:6> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:r0> \\ \{ <var:g> = <var:e> \land <var:S> = <nat:6> \times <var:e> ^ <nat:3> + <nat:6> \times <var:e> ^ <nat:2> + <nat:3> \} \end{eqnarray} Utilizing standard Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:g> = <var:e> }} <var:r0> := <nat:3> ; <var:r2> := <nat:6> ; <var:r2> := <var:r2> * <var:g> ; <var:r2> := <var:r2> * <var:g> ; <var:r3> := <nat:6> ; <var:r3> := <var:r3> * <var:g> ; <var:r3> := <var:r3> * <var:g> ; <var:r3> := <var:r3> * <var:g> ; <var:S> := <var:r3> ; <var:S> := <var:S> + <var:r2> ; <var:S> := <var:S> + <var:r0> {{ <var:S> = <nat:6> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:r0> = <nat:3> /\ <var:r2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:r0> = <nat:3> /\ <var:r2> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:r0> = <nat:3> /\ <var:r2> = <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:r0> = <nat:3> /\ <var:r2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:r3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:r0> = <nat:3> /\ <var:r2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:r0> = <nat:3> /\ <var:r2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:r0> = <nat:3> /\ <var:r2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:r3> = <nat:6> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:r0> = <nat:3> /\ <var:r2> = <nat:6> * <var:e> ^ <nat:2> /\ <var:S> = <nat:6> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:r0> = <nat:3> /\ <var:S> = <nat:6> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:e> /\ <var:S> = <nat:6> * <var:e> ^ <nat:3> + <nat:6> * <var:e> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 