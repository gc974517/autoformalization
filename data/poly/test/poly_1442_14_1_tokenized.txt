\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S1> := <var:u> ; <var:S2> := <var:S1> * <var:u> ; <var:S3> := <var:S2> * <var:u> ; <var:S4> := <var:S3> * <var:u> ; <var:S0> := <nat:4> ; <var:S1> := <var:S1> * <nat:5> ; <var:S2> := <var:S2> * <nat:3> ; <var:S3> := <var:S3> * <nat:3> ; <var:S4> := <var:S4> * <nat:4> ; <var:g> := <var:S4> <var:g> := <var:g> + <var:S3> <var:g> := <var:g> + <var:S2> <var:g> := <var:g> + <var:S1> <var:g> := <var:g> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:u> = <var:A> $ for all positive numbers $ <var:A> $ before the execution of the list of commands , it must be that we have $ <var:g> = <nat:4> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:5> \times <var:A> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this code is given with standard Hoare reasoning . Advancing to the proceeding bit of code found in the segment of code , the variable assignmet statement \verb | <var:S1> := <var:u> ; | . This advances the condition $ \{ <var:u> = <var:A> \} $ into the postcondition $ \{ <var:u> = <var:A> \land <var:S1> = <var:A> \} $ . Paying attention to the next statement in the list of commands , we see the variable update code \verb | <var:S2> := <var:S1> * <var:u> ; | . This code advances the precondition $ \{ <var:u> = <var:A> \land <var:S1> = <var:A> \} $ into the postcondition $ \{ <var:u> = <var:A> \land <var:S1> = <var:A> \land <var:S2> = <var:A> ^ <nat:2> \} $ . This is known to be sound using the assignment inference rule of typical Hoare techniques . Observing the upcoming line of code contained in our code , we see the assignment code defining $ <var:S2> * <var:u> $ to $ <var:S3>$ . This statement advances $ \{ <var:u> = <var:A> \land <var:S1> = <var:A> \land <var:S2> = <var:A> ^ <nat:2> \} $ to the condition $ \{ <var:u> = <var:A> \land <var:S1> = <var:A> \land <var:S2> = <var:A> ^ <nat:2> \land <var:S3> = <var:A> ^ <nat:3> \} $ . This is shown with the assignment rule given in typical Hoare logic . Jumping to the next bit of code seen in our series of instructions , the environment update line \verb | <var:S4> := <var:S3> * <var:u> ; | . This code advances the condition $ \{ <var:u> = <var:A> \land <var:S1> = <var:A> \land <var:S2> = <var:A> ^ <nat:2> \land <var:S3> = <var:A> ^ <nat:3> \} $ into the condition $ \{ <var:u> = <var:A> \land <var:S1> = <var:A> \land <var:S2> = <var:A> ^ <nat:2> \land <var:S3> = <var:A> ^ <nat:3> \land <var:S4> = <var:A> ^ <nat:4> \} $ . Shifting focus toward the proceeding command seen in our set of instructions , the variable assignmet command assigning $ <nat:4> $ to $ <var:S0>$ . This line redefines the precondition $ \{ <var:u> = <var:A> \land <var:S1> = <var:A> \land <var:S2> = <var:A> ^ <nat:2> \land <var:S3> = <var:A> ^ <nat:3> \land <var:S4> = <var:A> ^ <nat:4> \} $ into the condition $ \{ <var:u> = <var:A> \land <var:S1> = <var:A> \land <var:S2> = <var:A> ^ <nat:2> \land <var:S3> = <var:A> ^ <nat:3> \land <var:S4> = <var:A> ^ <nat:4> \land <var:S0> = <nat:4> \} $ . Following , we have the environment update code assigning $ <var:S1> * <nat:5> $ into $ <var:S1>$ . This takes the condition $ \{ <var:u> = <var:A> \land <var:S1> = <var:A> \land <var:S2> = <var:A> ^ <nat:2> \land <var:S3> = <var:A> ^ <nat:3> \land <var:S4> = <var:A> ^ <nat:4> \land <var:S0> = <nat:4> \} $ to the condition $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S2> = <var:A> ^ <nat:2> \land <var:S3> = <var:A> ^ <nat:3> \land <var:S4> = <var:A> ^ <nat:4> \land <var:S0> = <nat:4> \} $ . Shifting focus toward the proceeding line of code found in our code , we see the variable assignmet code yielding $ <var:S2> * <nat:3> $ as $ <var:S2>$ . This statement forwards the condition $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S2> = <var:A> ^ <nat:2> \land <var:S3> = <var:A> ^ <nat:3> \land <var:S4> = <var:A> ^ <nat:4> \land <var:S0> = <nat:4> \} $ into $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S2> = <nat:3> * <var:A> ^ <nat:2> \land <var:S3> = <var:A> ^ <nat:3> \land <var:S4> = <var:A> ^ <nat:4> \land <var:S0> = <nat:4> \} $ . Paying attention to the upcoming line of code contained in our series of commands , we see the assignment statement \verb | <var:S3> := <var:S3> * <nat:3> ; | . This forwards the precondition $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S2> = <nat:3> * <var:A> ^ <nat:2> \land <var:S3> = <var:A> ^ <nat:3> \land <var:S4> = <var:A> ^ <nat:4> \land <var:S0> = <nat:4> \} $ into $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S2> = <nat:3> * <var:A> ^ <nat:2> \land <var:S3> = <nat:3> * <var:A> ^ <nat:3> \land <var:S4> = <var:A> ^ <nat:4> \land <var:S0> = <nat:4> \} $ . This is deduced through the assignment rule defined in usual Hoare reasoning . Stepping forward , the binding statement letting $ <var:S4> * <nat:4> $ as $ <var:S4>$ . This forwards the condition $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S2> = <nat:3> * <var:A> ^ <nat:2> \land <var:S3> = <nat:3> * <var:A> ^ <nat:3> \land <var:S4> = <var:A> ^ <nat:4> \land <var:S0> = <nat:4> \} $ as $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S2> = <nat:3> * <var:A> ^ <nat:2> \land <var:S3> = <nat:3> * <var:A> ^ <nat:3> \land <var:S4> = <nat:4> * <var:A> ^ <nat:4> \land <var:S0> = <nat:4> \} $ . Moving forward to the following statement contained in the list of instructions , the variable assignmet code \verb | <var:g> := <var:S4> | . This command moves $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S2> = <nat:3> * <var:A> ^ <nat:2> \land <var:S3> = <nat:3> * <var:A> ^ <nat:3> \land <var:S4> = <nat:4> * <var:A> ^ <nat:4> \land <var:S0> = <nat:4> \} $ toward the postcondition $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S2> = <nat:3> * <var:A> ^ <nat:2> \land <var:S3> = <nat:3> * <var:A> ^ <nat:3> \land <var:S0> = <nat:4> \land <var:g> = <nat:4> * <var:A> ^ <nat:4> \} $ . This is shown by the assignment law found in standard Hoare reasoning . Moving onward , the variable binding statement defining $ <var:g> + <var:S3$ into $ <var:g>$ . This transfers $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S2> = <nat:3> * <var:A> ^ <nat:2> \land <var:S3> = <nat:3> * <var:A> ^ <nat:3> \land <var:S0> = <nat:4> \land <var:g> = <nat:4> * <var:A> ^ <nat:4> \} $ toward the condition $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S2> = <nat:3> * <var:A> ^ <nat:2> \land <var:S0> = <nat:4> \land <var:g> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> \} $ . Following , the variable update command \verb | <var:g> := <var:g> + <var:S2> | . This command moves the condition $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S2> = <nat:3> * <var:A> ^ <nat:2> \land <var:S0> = <nat:4> \land <var:g> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> \} $ to $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S0> = <nat:4> \land <var:g> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> \} $ . Advancing , we see the binding code binding $ <var:g> + <var:S1$ as $ <var:g>$ . This advances $ \{ <var:u> = <var:A> \land <var:S1> = <nat:5> * <var:A> \land <var:S0> = <nat:4> \land <var:g> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> \} $ into $ \{ <var:u> = <var:A> \land <var:S0> = <nat:4> \land <var:g> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:5> * <var:A> \} $ . After , we see the variable binding command \verb | <var:g> := <var:g> + <var:S0> | . This advances the precondition $ \{ <var:u> = <var:A> \land <var:S0> = <nat:4> \land <var:g> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:5> * <var:A> \} $ into $ \{ <var:u> = <var:A> \land <var:g> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <var:S4> : string := " <var:S4> " . Definition <def:poly> := <var:S1> := <var:u> ; <var:S2> := <var:S1> * <var:u> ; <var:S3> := <var:S2> * <var:u> ; <var:S4> := <var:S3> * <var:u> ; <var:S0> := <nat:4> ; <var:S1> := <var:S1> * <nat:5> ; <var:S2> := <var:S2> * <nat:3> ; <var:S3> := <var:S3> * <nat:3> ; <var:S4> := <var:S4> * <nat:4> ; <var:g> := <var:S4> <var:g> := <var:g> + <var:S3> <var:g> := <var:g> + <var:S2> <var:g> := <var:g> + <var:S1> <var:g> := <var:g> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:u> = <var:A> }} <def:poly> {{ <var:g> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:S1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:S1> = <var:A> /\ <var:S2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:S1> = <var:A> /\ <var:S2> = <var:A> ^ <nat:2> /\ <var:S3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:S1> = <var:A> /\ <var:S2> = <var:A> ^ <nat:2> /\ <var:S3> = <var:A> ^ <nat:3> /\ <var:S4> = <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:S1> = <var:A> /\ <var:S2> = <var:A> ^ <nat:2> /\ <var:S3> = <var:A> ^ <nat:3> /\ <var:S4> = <var:A> ^ <nat:4> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:S1> = <nat:5> * <var:A> /\ <var:S2> = <var:A> ^ <nat:2> /\ <var:S3> = <var:A> ^ <nat:3> /\ <var:S4> = <var:A> ^ <nat:4> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:S1> = <nat:5> * <var:A> /\ <var:S2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:S3> = <var:A> ^ <nat:3> /\ <var:S4> = <var:A> ^ <nat:4> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:S1> = <nat:5> * <var:A> /\ <var:S2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:S3> = <nat:3> * <var:A> ^ <nat:3> /\ <var:S4> = <var:A> ^ <nat:4> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:S1> = <nat:5> * <var:A> /\ <var:S2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:S3> = <nat:3> * <var:A> ^ <nat:3> /\ <var:S4> = <nat:4> * <var:A> ^ <nat:4> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:S1> = <nat:5> * <var:A> /\ <var:S2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:S3> = <nat:3> * <var:A> ^ <nat:3> /\ <var:S0> = <nat:4> /\ <var:g> = <nat:4> * <var:A> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:S1> = <nat:5> * <var:A> /\ <var:S2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:S0> = <nat:4> /\ <var:g> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:S1> = <nat:5> * <var:A> /\ <var:S0> = <nat:4> /\ <var:g> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:S0> = <nat:4> /\ <var:g> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:A> /\ <var:g> = <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:5> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 