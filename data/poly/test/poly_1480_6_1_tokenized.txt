\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as \begin{verbatim} <var:G1> := <var:l> ; <var:G2> := <var:G1> * <var:l> ; <var:G0> := <nat:6> ; <var:G2> := <var:G2> * <nat:6> ; <var:h> := <var:G2> <var:h> := <var:h> + <var:G0> \end{verbatim} Given it to hold that $ <var:l> = <var:n> $ before interpreting the list of instructions then we have $ <var:h> = <nat:6> * <var:n> ^ <nat:2> + <nat:6> $ once list of commands is done . \end{theorem} \begin{proof} The method of proof for this program can be done using usual Hoare techniques . Moving onward , we see \[ \begin{tabular} {rcl} \{ <var:l> = <var:n> \} & <var:G1> := <var:l> & \{ <var:l> = <var:n> \land <var:G1> = <var:n> \} \\ \{ <var:l> = <var:n> \land <var:G1> = <var:n> \} & <var:G2> := <var:G1> * <var:l> & \{ <var:l> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <var:n> ^ <nat:2> \} \\ \{ <var:l> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <var:n> ^ <nat:2> \} & <var:G0> := <nat:6> & \{ <var:l> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <var:n> ^ <nat:2> \land <var:G0> = <nat:6> \} \\ \{ <var:l> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <var:n> ^ <nat:2> \land <var:G0> = <nat:6> \} & <var:G2> := <var:G2> * <nat:6> & \{ <var:l> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <nat:6> * <var:n> ^ <nat:2> \land <var:G0> = <nat:6> \} \\ \{ <var:l> = <var:n> \land <var:G1> = <var:n> \land <var:G2> = <nat:6> * <var:n> ^ <nat:2> \land <var:G0> = <nat:6> \} & <var:h> := <var:G2& \{ <var:l> = <var:n> \land <var:G1> = <var:n> \land <var:G0> = <nat:6> \land <var:h> = <nat:6> * <var:n> ^ <nat:2> \} \end{tabular} This is ensured by the variable binding inference rule defined by standard Hoare techniques . Honing in on the upcoming statement in our segment of code , we have \[ \begin{tabular} {rcl} \{ <var:l> = <var:n> \} & <var:G1> := <var:l> & \{ <var:l> = <var:n> \land <var:G1> = <var:n> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:l> = <var:n> }} <var:G1> := <var:l> ; <var:G2> := <var:G1> * <var:l> ; <var:G0> := <nat:6> ; <var:G2> := <var:G2> * <nat:6> ; <var:h> := <var:G2> <var:h> := <var:h> + <var:G0> {{ <var:h> = <nat:6> * <var:n> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:G1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:G1> = <var:n> /\ <var:G2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:G1> = <var:n> /\ <var:G2> = <var:n> ^ <nat:2> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:G1> = <var:n> /\ <var:G2> = <nat:6> * <var:n> ^ <nat:2> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:G1> = <var:n> /\ <var:G0> = <nat:6> /\ <var:h> = <nat:6> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:n> /\ <var:h> = <nat:6> * <var:n> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 