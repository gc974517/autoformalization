\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:P1> := <var:X> ; <var:P2> := <var:P1> * <var:X> ; <var:P3> := <var:P2> * <var:X> ; <var:P4> := <var:P3> * <var:X> ; <var:P0> := <nat:2> ; <var:P1> := <var:P1> * <nat:9> ; <var:P2> := <var:P2> * <nat:5> ; <var:P3> := <var:P3> * <nat:7> ; <var:P4> := <var:P4> * <nat:4> ; <var:M> := <var:P4> <var:M> := <var:M> + <var:P3> <var:M> := <var:M> + <var:P2> <var:M> := <var:M> + <var:P1> <var:M> := <var:M> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:X> = <var:H> $ prior to executing our program , it holds that $ <var:M> = <nat:4> * <var:H> ^ <nat:4> + <nat:7> * <var:H> ^ <nat:3> + <nat:5> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:2> $ after series of instructions executes . \end{theorem} \begin{proof} The application of standard Hoare logic yields : \begin{eqnarray} \{ <var:X> = <var:H> \} \\ <var:P1> := <var:X> ; \\ \{ <var:X> = <var:H> \land <var:P1> = <var:H> \} \\ <var:P2> := <var:P1> * <var:X> ; \\ \{ <var:X> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:X> ; \\ \{ <var:X> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \} \\ <var:P4> := <var:P3> * <var:X> ; \\ \{ <var:X> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P4> = <var:H> ^ <nat:4> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:X> = <var:H> \land <var:P1> = <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P4> = <var:H> ^ <nat:4> \land <var:P0> = <nat:2> \} \\ <var:P1> := <var:P1> * <nat:9> ; \\ \{ <var:X> = <var:H> \land <var:P1> = <nat:9> * <var:H> \land <var:P2> = <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P4> = <var:H> ^ <nat:4> \land <var:P0> = <nat:2> \} \\ <var:P2> := <var:P2> * <nat:5> ; \\ \{ <var:X> = <var:H> \land <var:P1> = <nat:9> * <var:H> \land <var:P2> = <nat:5> * <var:H> ^ <nat:2> \land <var:P3> = <var:H> ^ <nat:3> \land <var:P4> = <var:H> ^ <nat:4> \land <var:P0> = <nat:2> \} \\ <var:P3> := <var:P3> * <nat:7> ; \\ \{ <var:X> = <var:H> \land <var:P1> = <nat:9> * <var:H> \land <var:P2> = <nat:5> * <var:H> ^ <nat:2> \land <var:P3> = <nat:7> * <var:H> ^ <nat:3> \land <var:P4> = <var:H> ^ <nat:4> \land <var:P0> = <nat:2> \} \\ <var:P4> := <var:P4> * <nat:4> ; \\ \{ <var:X> = <var:H> \land <var:P1> = <nat:9> * <var:H> \land <var:P2> = <nat:5> * <var:H> ^ <nat:2> \land <var:P3> = <nat:7> * <var:H> ^ <nat:3> \land <var:P4> = <nat:4> * <var:H> ^ <nat:4> \land <var:P0> = <nat:2> \} \\ <var:M> := <var:P4> \\ \{ <var:X> = <var:H> \land <var:P1> = <nat:9> * <var:H> \land <var:P2> = <nat:5> * <var:H> ^ <nat:2> \land <var:P3> = <nat:7> * <var:H> ^ <nat:3> \land <var:P0> = <nat:2> \land <var:M> = <nat:4> * <var:H> ^ <nat:4> \} \\ <var:M> := <var:M> + <var:P3> \\ \{ <var:X> = <var:H> \land <var:P1> = <nat:9> * <var:H> \land <var:P2> = <nat:5> * <var:H> ^ <nat:2> \land <var:P0> = <nat:2> \land <var:M> = <nat:4> * <var:H> ^ <nat:4> + <nat:7> * <var:H> ^ <nat:3> \} \\ <var:M> := <var:M> + <var:P2> \\ \{ <var:X> = <var:H> \land <var:P1> = <nat:9> * <var:H> \land <var:P0> = <nat:2> \land <var:M> = <nat:4> * <var:H> ^ <nat:4> + <nat:7> * <var:H> ^ <nat:3> + <nat:5> * <var:H> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:P1> \\ \{ <var:X> = <var:H> \land <var:P0> = <nat:2> \land <var:M> = <nat:4> * <var:H> ^ <nat:4> + <nat:7> * <var:H> ^ <nat:3> + <nat:5> * <var:H> ^ <nat:2> + <nat:9> * <var:H> \} \\ <var:M> := <var:M> + <var:P0> \\ \{ <var:X> = <var:H> \land <var:M> = <nat:4> * <var:H> ^ <nat:4> + <nat:7> * <var:H> ^ <nat:3> + <nat:5> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:2> \} \end{eqnarray} Thus , this list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <var:P4> : string := " <var:P4> " . Definition <def:poly> := <var:P1> := <var:X> ; <var:P2> := <var:P1> * <var:X> ; <var:P3> := <var:P2> * <var:X> ; <var:P4> := <var:P3> * <var:X> ; <var:P0> := <nat:2> ; <var:P1> := <var:P1> * <nat:9> ; <var:P2> := <var:P2> * <nat:5> ; <var:P3> := <var:P3> * <nat:7> ; <var:P4> := <var:P4> * <nat:4> ; <var:M> := <var:P4> <var:M> := <var:M> + <var:P3> <var:M> := <var:M> + <var:P2> <var:M> := <var:M> + <var:P1> <var:M> := <var:M> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:X> = <var:H> }} <def:poly> {{ <var:M> = <nat:4> * <var:H> ^ <nat:4> + <nat:7> * <var:H> ^ <nat:3> + <nat:5> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:P1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:P1> = <var:H> /\ <var:P2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:P1> = <var:H> /\ <var:P2> = <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:P1> = <var:H> /\ <var:P2> = <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> /\ <var:P4> = <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:P1> = <var:H> /\ <var:P2> = <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> /\ <var:P4> = <var:H> ^ <nat:4> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:P1> = <nat:9> * <var:H> /\ <var:P2> = <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> /\ <var:P4> = <var:H> ^ <nat:4> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:P1> = <nat:9> * <var:H> /\ <var:P2> = <nat:5> * <var:H> ^ <nat:2> /\ <var:P3> = <var:H> ^ <nat:3> /\ <var:P4> = <var:H> ^ <nat:4> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:P1> = <nat:9> * <var:H> /\ <var:P2> = <nat:5> * <var:H> ^ <nat:2> /\ <var:P3> = <nat:7> * <var:H> ^ <nat:3> /\ <var:P4> = <var:H> ^ <nat:4> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:P1> = <nat:9> * <var:H> /\ <var:P2> = <nat:5> * <var:H> ^ <nat:2> /\ <var:P3> = <nat:7> * <var:H> ^ <nat:3> /\ <var:P4> = <nat:4> * <var:H> ^ <nat:4> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:P1> = <nat:9> * <var:H> /\ <var:P2> = <nat:5> * <var:H> ^ <nat:2> /\ <var:P3> = <nat:7> * <var:H> ^ <nat:3> /\ <var:P0> = <nat:2> /\ <var:M> = <nat:4> * <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:P1> = <nat:9> * <var:H> /\ <var:P2> = <nat:5> * <var:H> ^ <nat:2> /\ <var:P0> = <nat:2> /\ <var:M> = <nat:4> * <var:H> ^ <nat:4> + <nat:7> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:P1> = <nat:9> * <var:H> /\ <var:P0> = <nat:2> /\ <var:M> = <nat:4> * <var:H> ^ <nat:4> + <nat:7> * <var:H> ^ <nat:3> + <nat:5> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:P0> = <nat:2> /\ <var:M> = <nat:4> * <var:H> ^ <nat:4> + <nat:7> * <var:H> ^ <nat:3> + <nat:5> * <var:H> ^ <nat:2> + <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:H> /\ <var:M> = <nat:4> * <var:H> ^ <nat:4> + <nat:7> * <var:H> ^ <nat:3> + <nat:5> * <var:H> ^ <nat:2> + <nat:9> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 