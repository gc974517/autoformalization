\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:7> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:d> ; <var:H2> := <nat:7> ; <var:H2> := <var:H2> * <var:d> ; <var:H2> := <var:H2> * <var:d> ; <var:U> := <var:H2> ; <var:U> := <var:U> + <var:H1> ; <var:U> := <var:U> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Given --- given positive integer coefficients $ <var:a> $ --- it to be that $ <var:d> = <var:a> $ prior to evaluating our series of commands , it must be that we have $ <var:U> = <nat:7> \times <var:a> ^ <nat:2> + <nat:1> \times <var:a> + <nat:7> $ . \end{theorem} \begin{proof} The flow of logic for our segment of code can be demonstrated through Hoare techniques . Honing in on the subsequent step seen in our list of instructions , we see the binding statement \verb | <var:H0> := <nat:7> ; | . This statement takes $ \{ <var:d> = <var:a> \} $ to the postcondition $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \} $ . Considering the following step seen in our set of commands , the variable assignmet command \verb | <var:H1> := <nat:1> ; | . This line moves $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \} $ toward the postcondition $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> \} $ . Following , we have the binding command assigning $ <var:H1> * <var:d> $ to $ <var:H1>$ . This forwards the precondition $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> \} $ toward the condition $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:a> \} $ . This is shown using the assignment law from Hoare techniques . Considering the subsequent statement found in our set of commands , we see the variable update command letting $ <nat:7> $ to $ <var:H2>$ . This code takes the precondition $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:a> \} $ as $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:a> \land <var:H2> = <nat:7> \} $ . This is deduced by the assignment rule defined by typical Hoare reasoning . Going to the next step , the code \verb | <var:H2> := <var:H2> * <var:d> ; | . This command moves the condition $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:a> \land <var:H2> = <nat:7> \} $ as $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:a> \land <var:H2> = <nat:7> * <var:a> \} $ . Observing the following command contained in our set of instructions , the code \verb | <var:H2> := <var:H2> * <var:d> ; | . This code transfers the condition $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:a> \land <var:H2> = <nat:7> * <var:a> \} $ to the postcondition $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:a> \land <var:H2> = <nat:7> * <var:a> ^ <nat:2> \} $ . Honing in on the upcoming line of code in the segment of code , we have the assignment command giving $ <var:H2> $ as $ <var:U>$ . This line takes $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:a> \land <var:H2> = <nat:7> * <var:a> ^ <nat:2> \} $ to the postcondition $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:a> \land <var:U> = <nat:7> * <var:a> ^ <nat:2> \} $ . Immediately following , we have the variable update code \verb | <var:U> := <var:U> + <var:H1> ; | . This takes the condition $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:H1> = <nat:1> * <var:a> \land <var:U> = <nat:7> * <var:a> ^ <nat:2> \} $ toward $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:U> = <nat:7> * <var:a> ^ <nat:2> + <nat:1> * <var:a> \} $ . This is rigorously given by the assignment inference rule from usual Hoare logic . Stepping through , we have the variable update command binding $ <var:U> + <var:H0$ into $ <var:U>$ . This forwards $ \{ <var:d> = <var:a> \land <var:H0> = <nat:7> \land <var:U> = <nat:7> * <var:a> ^ <nat:2> + <nat:1> * <var:a> \} $ into the condition $ \{ <var:d> = <var:a> \land <var:U> = <nat:7> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:7> \} $ . This is sound using the assignment rule of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <def:poly> := <var:H0> := <nat:7> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:d> ; <var:H2> := <nat:7> ; <var:H2> := <var:H2> * <var:d> ; <var:H2> := <var:H2> * <var:d> ; <var:U> := <var:H2> ; <var:U> := <var:U> + <var:H1> ; <var:U> := <var:U> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:d> = <var:a> }} <def:poly> {{ <var:U> = <nat:7> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:1> * <var:a> /\ <var:H2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:1> * <var:a> /\ <var:H2> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:1> * <var:a> /\ <var:H2> = <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:H0> = <nat:7> /\ <var:H1> = <nat:1> * <var:a> /\ <var:U> = <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:H0> = <nat:7> /\ <var:U> = <nat:7> * <var:a> ^ <nat:2> + <nat:1> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:a> /\ <var:U> = <nat:7> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 