\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H1> := <var:y> ; <var:H2> := <var:H1> * <var:y> ; <var:H3> := <var:H2> * <var:y> ; <var:H4> := <var:H3> * <var:y> ; <var:H0> := <nat:4> ; <var:H1> := <var:H1> * <nat:2> ; <var:H2> := <var:H2> * <nat:8> ; <var:H3> := <var:H3> * <nat:6> ; <var:H4> := <var:H4> * <nat:4> ; <var:r> := <var:H4> <var:r> := <var:r> + <var:H3> <var:r> := <var:r> + <var:H2> <var:r> := <var:r> + <var:H1> <var:r> := <var:r> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Given ( given every positive numbers $ <var:m> $ ) it to hold that $ <var:y> = <var:m> $ before the execution of the series of commands , it follows that $ <var:r> = <nat:4> * <var:m> ^ <nat:4> + <nat:6> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:4> $ . \end{theorem} \begin{proof} The proof of the list of instructions is shown by standard Hoare techniques . Stepping through , we see the statement letting $ <var:y> $ toward $ <var:H1>$ . This line redefines the condition $ \{ <var:y> = <var:m> \} $ toward the condition $ \{ <var:y> = <var:m> \land <var:H1> = <var:m> \} $ . This is deduced with the assignment rule obtained from Hoare logic . Moving on to the next step , the environment update line \verb | <var:H2> := <var:H1> * <var:y> ; | . This transfers the precondition $ \{ <var:y> = <var:m> \land <var:H1> = <var:m> \} $ to the postcondition $ \{ <var:y> = <var:m> \land <var:H1> = <var:m> \land <var:H2> = <var:m> ^ <nat:2> \} $ . This is ensured through the assignment rule defined by typical Hoare reasoning . Stepping forward , the environment update code \verb | <var:H3> := <var:H2> * <var:y> ; | . This forwards the precondition $ \{ <var:y> = <var:m> \land <var:H1> = <var:m> \land <var:H2> = <var:m> ^ <nat:2> \} $ toward the condition $ \{ <var:y> = <var:m> \land <var:H1> = <var:m> \land <var:H2> = <var:m> ^ <nat:2> \land <var:H3> = <var:m> ^ <nat:3> \} $ . Moving forward to the next step , we see the variable binding code letting $ <var:H3> * <var:y> $ to $ <var:H4>$ . This statement transfers $ \{ <var:y> = <var:m> \land <var:H1> = <var:m> \land <var:H2> = <var:m> ^ <nat:2> \land <var:H3> = <var:m> ^ <nat:3> \} $ into the condition $ \{ <var:y> = <var:m> \land <var:H1> = <var:m> \land <var:H2> = <var:m> ^ <nat:2> \land <var:H3> = <var:m> ^ <nat:3> \land <var:H4> = <var:m> ^ <nat:4> \} $ . This is given with the assignment law defined in usual Hoare logic . Immediately following , we see the environment update code \verb | <var:H0> := <nat:4> ; | . This code forwards the condition $ \{ <var:y> = <var:m> \land <var:H1> = <var:m> \land <var:H2> = <var:m> ^ <nat:2> \land <var:H3> = <var:m> ^ <nat:3> \land <var:H4> = <var:m> ^ <nat:4> \} $ as $ \{ <var:y> = <var:m> \land <var:H1> = <var:m> \land <var:H2> = <var:m> ^ <nat:2> \land <var:H3> = <var:m> ^ <nat:3> \land <var:H4> = <var:m> ^ <nat:4> \land <var:H0> = <nat:4> \} $ . This is rigorously given through the assignment inference rule from Hoare reasoning . Going forward , we see the variable assignmet statement giving $ <var:H1> * <nat:2> $ into $ <var:H1>$ . This statement takes the precondition $ \{ <var:y> = <var:m> \land <var:H1> = <var:m> \land <var:H2> = <var:m> ^ <nat:2> \land <var:H3> = <var:m> ^ <nat:3> \land <var:H4> = <var:m> ^ <nat:4> \land <var:H0> = <nat:4> \} $ toward $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H2> = <var:m> ^ <nat:2> \land <var:H3> = <var:m> ^ <nat:3> \land <var:H4> = <var:m> ^ <nat:4> \land <var:H0> = <nat:4> \} $ . Advancing on , we have the variable assignmet line \verb | <var:H2> := <var:H2> * <nat:8> ; | . This transfers the condition $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H2> = <var:m> ^ <nat:2> \land <var:H3> = <var:m> ^ <nat:3> \land <var:H4> = <var:m> ^ <nat:4> \land <var:H0> = <nat:4> \} $ as the condition $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:H3> = <var:m> ^ <nat:3> \land <var:H4> = <var:m> ^ <nat:4> \land <var:H0> = <nat:4> \} $ . This is shown with the assignment scheme of usual Hoare techniques . Advancing on , the binding command \verb | <var:H3> := <var:H3> * <nat:6> ; | . This advances the precondition $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:H3> = <var:m> ^ <nat:3> \land <var:H4> = <var:m> ^ <nat:4> \land <var:H0> = <nat:4> \} $ as $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:H3> = <nat:6> \cdot <var:m> ^ <nat:3> \land <var:H4> = <var:m> ^ <nat:4> \land <var:H0> = <nat:4> \} $ . Paying attention to the following line of code contained in the code segment , we see the variable binding statement defining $ <var:H4> * <nat:4> $ to $ <var:H4>$ . This advances the condition $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:H3> = <nat:6> \cdot <var:m> ^ <nat:3> \land <var:H4> = <var:m> ^ <nat:4> \land <var:H0> = <nat:4> \} $ to $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:H3> = <nat:6> \cdot <var:m> ^ <nat:3> \land <var:H4> = <nat:4> \cdot <var:m> ^ <nat:4> \land <var:H0> = <nat:4> \} $ . This is known to be sound with the assignment inference rule given by usual Hoare logic . Shifting focus toward the proceeding bit of code seen in our set of instructions , we have the variable update line assigning $ <var:H4$ toward $ <var:r>$ . This code takes the precondition $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:H3> = <nat:6> \cdot <var:m> ^ <nat:3> \land <var:H4> = <nat:4> \cdot <var:m> ^ <nat:4> \land <var:H0> = <nat:4> \} $ as the postcondition $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:H3> = <nat:6> \cdot <var:m> ^ <nat:3> \land <var:H0> = <nat:4> \land <var:r> = <nat:4> \cdot <var:m> ^ <nat:4> \} $ . Going forward , we have the binding statement defining $ <var:r> + <var:H3$ as $ <var:r>$ . This line transfers $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:H3> = <nat:6> \cdot <var:m> ^ <nat:3> \land <var:H0> = <nat:4> \land <var:r> = <nat:4> \cdot <var:m> ^ <nat:4> \} $ into the condition $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:H0> = <nat:4> \land <var:r> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:6> \cdot <var:m> ^ <nat:3> \} $ . This is rigorously given by the assignment law of Hoare techniques . Taking another step toward the proceeding bit of code contained in the series of commands , we have the variable binding line letting $ <var:r> + <var:H2$ toward $ <var:r>$ . This takes $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H2> = <nat:8> \cdot <var:m> ^ <nat:2> \land <var:H0> = <nat:4> \land <var:r> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:6> \cdot <var:m> ^ <nat:3> \} $ into the postcondition $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H0> = <nat:4> \land <var:r> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:6> \cdot <var:m> ^ <nat:3> + <nat:8> \cdot <var:m> ^ <nat:2> \} $ . This is shown by the assignment rule defined by standard Hoare logic . Moving on to the next step , we have the variable update line \verb | <var:r> := <var:r> + <var:H1> | . This forwards the precondition $ \{ <var:y> = <var:m> \land <var:H1> = <nat:2> \cdot <var:m> \land <var:H0> = <nat:4> \land <var:r> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:6> \cdot <var:m> ^ <nat:3> + <nat:8> \cdot <var:m> ^ <nat:2> \} $ toward $ \{ <var:y> = <var:m> \land <var:H0> = <nat:4> \land <var:r> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:6> \cdot <var:m> ^ <nat:3> + <nat:8> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> \} $ . Paying attention to the next bit of code seen in our list of commands , we have the binding line giving $ <var:r> + <var:H0$ to $ <var:r>$ . This takes the condition $ \{ <var:y> = <var:m> \land <var:H0> = <nat:4> \land <var:r> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:6> \cdot <var:m> ^ <nat:3> + <nat:8> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> \} $ toward the condition $ \{ <var:y> = <var:m> \land <var:r> = <nat:4> \cdot <var:m> ^ <nat:4> + <nat:6> \cdot <var:m> ^ <nat:3> + <nat:8> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <var:H4> : string := " <var:H4> " . Definition <def:poly> := <var:H1> := <var:y> ; <var:H2> := <var:H1> * <var:y> ; <var:H3> := <var:H2> * <var:y> ; <var:H4> := <var:H3> * <var:y> ; <var:H0> := <nat:4> ; <var:H1> := <var:H1> * <nat:2> ; <var:H2> := <var:H2> * <nat:8> ; <var:H3> := <var:H3> * <nat:6> ; <var:H4> := <var:H4> * <nat:4> ; <var:r> := <var:H4> <var:r> := <var:r> + <var:H3> <var:r> := <var:r> + <var:H2> <var:r> := <var:r> + <var:H1> <var:r> := <var:r> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:y> = <var:m> }} <def:poly> {{ <var:r> = <nat:4> * <var:m> ^ <nat:4> + <nat:6> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:H1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:H1> = <var:m> /\ <var:H2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:H1> = <var:m> /\ <var:H2> = <var:m> ^ <nat:2> /\ <var:H3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:H1> = <var:m> /\ <var:H2> = <var:m> ^ <nat:2> /\ <var:H3> = <var:m> ^ <nat:3> /\ <var:H4> = <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:H1> = <var:m> /\ <var:H2> = <var:m> ^ <nat:2> /\ <var:H3> = <var:m> ^ <nat:3> /\ <var:H4> = <var:m> ^ <nat:4> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:H1> = <nat:2> * <var:m> /\ <var:H2> = <var:m> ^ <nat:2> /\ <var:H3> = <var:m> ^ <nat:3> /\ <var:H4> = <var:m> ^ <nat:4> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:H1> = <nat:2> * <var:m> /\ <var:H2> = <nat:8> * <var:m> ^ <nat:2> /\ <var:H3> = <var:m> ^ <nat:3> /\ <var:H4> = <var:m> ^ <nat:4> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:H1> = <nat:2> * <var:m> /\ <var:H2> = <nat:8> * <var:m> ^ <nat:2> /\ <var:H3> = <nat:6> * <var:m> ^ <nat:3> /\ <var:H4> = <var:m> ^ <nat:4> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:H1> = <nat:2> * <var:m> /\ <var:H2> = <nat:8> * <var:m> ^ <nat:2> /\ <var:H3> = <nat:6> * <var:m> ^ <nat:3> /\ <var:H4> = <nat:4> * <var:m> ^ <nat:4> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:H1> = <nat:2> * <var:m> /\ <var:H2> = <nat:8> * <var:m> ^ <nat:2> /\ <var:H3> = <nat:6> * <var:m> ^ <nat:3> /\ <var:H0> = <nat:4> /\ <var:r> = <nat:4> * <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:H1> = <nat:2> * <var:m> /\ <var:H2> = <nat:8> * <var:m> ^ <nat:2> /\ <var:H0> = <nat:4> /\ <var:r> = <nat:4> * <var:m> ^ <nat:4> + <nat:6> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:H1> = <nat:2> * <var:m> /\ <var:H0> = <nat:4> /\ <var:r> = <nat:4> * <var:m> ^ <nat:4> + <nat:6> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:H0> = <nat:4> /\ <var:r> = <nat:4> * <var:m> ^ <nat:4> + <nat:6> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ^ <nat:2> + <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:r> = <nat:4> * <var:m> ^ <nat:4> + <nat:6> * <var:m> ^ <nat:3> + <nat:8> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 