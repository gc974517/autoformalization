\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:m> := <nat:3> ; <var:m> := <nat:3> + <var:m> * <var:d> ; <var:m> := <nat:1> + <var:m> * <var:d> ; <var:m> := <nat:2> + <var:m> * <var:d> ; <var:m> := <nat:4> + <var:m> * <var:d> ; <var:m> := <nat:3> + <var:m> * <var:d> ; <var:m> := <nat:2> + <var:m> * <var:d> ; <var:m> := <nat:3> + <var:m> * <var:d> ; <var:m> := <nat:2> + <var:m> * <var:d> ; <var:m> := <nat:4> + <var:m> * <var:d> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Assume --- letting positive integer coefficients $ <var:U> $ --- it to hold that $ <var:d> = <var:U> $ prior to evaluating our series of instructions , it must be that we have $ <var:m> = <nat:3> * <var:U> ^ <nat:9> + <nat:3> * <var:U> ^ <nat:8> + <nat:1> * <var:U> ^ <nat:7> + <nat:2> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this code can be shown with typical Hoare reasoning . Looking at the upcoming pieces of code found in the code , \[ \begin{tabular} {rcl} \{ <var:d> = <var:U> \} & <var:m> := <nat:3> & \{ <var:d> = <var:U> \land <var:m> = <nat:3> \} \\ \{ <var:d> = <var:U> \land <var:m> = <nat:3> \} & <var:m> := <nat:3> + <var:m> * <var:d> & \{ <var:d> = <var:U> \land <var:m> = <nat:3> \times <var:U> + <nat:3> \} \\ \{ <var:d> = <var:U> \land <var:m> = <nat:3> \times <var:U> + <nat:3> \} & <var:m> := <nat:1> + <var:m> * <var:d> & \{ <var:d> = <var:U> \land <var:m> = <nat:3> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> + <nat:1> \} \\ \{ <var:d> = <var:U> \land <var:m> = <nat:3> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> + <nat:1> \} & <var:m> := <nat:2> + <var:m> * <var:d> & \{ <var:d> = <var:U> \land <var:m> = <nat:3> \times <var:U> ^ <nat:3> + <nat:3> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:2> \} \end{tabular} This is deduced using the variable binding inference rule defined by typical Hoare logic . Taking a look at the upcoming pieces of code seen in our set of commands , \[ \begin{tabular} {rcl} \{ <var:d> = <var:U> \} & <var:m> := <nat:3> & \{ <var:d> = <var:U> \land <var:m> = <nat:3> \} \\ \{ <var:d> = <var:U> \land <var:m> = <nat:3> \} & <var:m> := <nat:3> + <var:m> * <var:d> & \{ <var:d> = <var:U> \land <var:m> = <nat:3> \times <var:U> + <nat:3> \} \end{tabular} Next , we see \[ \begin{tabular} {rcl} \{ <var:d> = <var:U> \} & <var:m> := <nat:3> & \{ <var:d> = <var:U> \land <var:m> = <nat:3> \} \\ \{ <var:d> = <var:U> \land <var:m> = <nat:3> \} & <var:m> := <nat:3> + <var:m> * <var:d> & \{ <var:d> = <var:U> \land <var:m> = <nat:3> \times <var:U> + <nat:3> \} \end{tabular} Paying attention to the next bits of codein the code segment , we see \[ \begin{tabular} {rcl} \{ <var:d> = <var:U> \} & <var:m> := <nat:3> & \{ <var:d> = <var:U> \land <var:m> = <nat:3> \} \\ \{ <var:d> = <var:U> \land <var:m> = <nat:3> \} & <var:m> := <nat:3> + <var:m> * <var:d> & \{ <var:d> = <var:U> \land <var:m> = <nat:3> \times <var:U> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:m> := <nat:3> ; <var:m> := <nat:3> + <var:m> * <var:d> ; <var:m> := <nat:1> + <var:m> * <var:d> ; <var:m> := <nat:2> + <var:m> * <var:d> ; <var:m> := <nat:4> + <var:m> * <var:d> ; <var:m> := <nat:3> + <var:m> * <var:d> ; <var:m> := <nat:2> + <var:m> * <var:d> ; <var:m> := <nat:3> + <var:m> * <var:d> ; <var:m> := <nat:2> + <var:m> * <var:d> ; <var:m> := <nat:4> + <var:m> * <var:d> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:d> = <var:U> }} <def:poly> {{ <var:m> = <nat:3> * <var:U> ^ <nat:9> + <nat:3> * <var:U> ^ <nat:8> + <nat:1> * <var:U> ^ <nat:7> + <nat:2> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:m> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:m> = <nat:3> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:m> = <nat:3> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:m> = <nat:3> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:m> = <nat:3> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:1> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:m> = <nat:3> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:1> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:m> = <nat:3> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:1> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:m> = <nat:3> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:1> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:m> = <nat:3> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:1> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:U> /\ <var:m> = <nat:3> * <var:U> ^ <nat:9> + <nat:3> * <var:U> ^ <nat:8> + <nat:1> * <var:U> ^ <nat:7> + <nat:2> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 