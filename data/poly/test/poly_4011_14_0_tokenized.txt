\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:5> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:e> ; <var:i2> := <nat:5> ; <var:i2> := <var:i2> * <var:e> ; <var:i2> := <var:i2> * <var:e> ; <var:i3> := <nat:4> ; <var:i3> := <var:i3> * <var:e> ; <var:i3> := <var:i3> * <var:e> ; <var:i3> := <var:i3> * <var:e> ; <var:I> := <var:i3> ; <var:I> := <var:I> + <var:i2> ; <var:I> := <var:I> + <var:i1> ; <var:I> := <var:I> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:e> = <var:O> $ before executing our set of instructions it must be that we see $ <var:I> = <nat:4> \times <var:O> ^ <nat:3> + <nat:5> \times <var:O> ^ <nat:2> + <nat:3> \times <var:O> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:O> \} \\ <var:i0> := <nat:5> ; \\ \{ <var:e> = <var:O> \land <var:i0> = <nat:5> \} \\ <var:i1> := <nat:3> ; \\ \{ <var:e> = <var:O> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \} \\ <var:i1> := <var:i1> * <var:e> ; \\ \{ <var:e> = <var:O> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:O> \} \\ <var:i2> := <nat:5> ; \\ \{ <var:e> = <var:O> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:O> \land <var:i2> = <nat:5> \} \\ <var:i2> := <var:i2> * <var:e> ; \\ \{ <var:e> = <var:O> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:O> \land <var:i2> = <nat:5> \cdot <var:O> \} \end{eqnarray} Allowing evaluating the code gives us : \begin{eqnarray} <var:i2> := <var:i2> * <var:e> ; \\ \{ <var:e> = <var:O> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:O> \land <var:i2> = <nat:5> \cdot <var:O> ^ <nat:2> \} \\ <var:i3> := <nat:4> ; \\ \{ <var:e> = <var:O> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:O> \land <var:i2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:i3> = <nat:4> \} \\ <var:i3> := <var:i3> * <var:e> ; \\ \{ <var:e> = <var:O> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:O> \land <var:i2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:i3> = <nat:4> \cdot <var:O> \} \\ <var:i3> := <var:i3> * <var:e> ; \\ \{ <var:e> = <var:O> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:O> \land <var:i2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:i3> = <nat:4> \cdot <var:O> ^ <nat:2> \} \\ <var:i3> := <var:i3> * <var:e> ; \\ \{ <var:e> = <var:O> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:O> \land <var:i2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:i3> = <nat:4> \cdot <var:O> ^ <nat:3> \} \\ <var:I> := <var:i3> ; \\ \{ <var:e> = <var:O> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:O> \land <var:i2> = <nat:5> \cdot <var:O> ^ <nat:2> \land <var:I> = <nat:4> \cdot <var:O> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:i2> ; \\ \{ <var:e> = <var:O> \land <var:i0> = <nat:5> \land <var:i1> = <nat:3> \cdot <var:O> \land <var:I> = <nat:4> \cdot <var:O> ^ <nat:3> + <nat:5> \cdot <var:O> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:i1> ; \\ \{ <var:e> = <var:O> \land <var:i0> = <nat:5> \land <var:I> = <nat:4> \cdot <var:O> ^ <nat:3> + <nat:5> \cdot <var:O> ^ <nat:2> + <nat:3> \cdot <var:O> \} \\ <var:I> := <var:I> + <var:i0> \\ \{ <var:e> = <var:O> \land <var:I> = <nat:4> \cdot <var:O> ^ <nat:3> + <nat:5> \cdot <var:O> ^ <nat:2> + <nat:3> \cdot <var:O> + <nat:5> \} \end{eqnarray} Using usual Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <def:poly> := <var:i0> := <nat:5> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:e> ; <var:i2> := <nat:5> ; <var:i2> := <var:i2> * <var:e> ; <var:i2> := <var:i2> * <var:e> ; <var:i3> := <nat:4> ; <var:i3> := <var:i3> * <var:e> ; <var:i3> := <var:i3> * <var:e> ; <var:i3> := <var:i3> * <var:e> ; <var:I> := <var:i3> ; <var:I> := <var:I> + <var:i2> ; <var:I> := <var:I> + <var:i1> ; <var:I> := <var:I> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:e> = <var:O> }} <def:poly> {{ <var:I> = <nat:4> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:i0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:O> /\ <var:i2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:O> /\ <var:i2> = <nat:5> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:O> /\ <var:i2> = <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:O> /\ <var:i2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:i3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:O> /\ <var:i2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:i3> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:O> /\ <var:i2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:i3> = <nat:4> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:O> /\ <var:i2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:i3> = <nat:4> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:O> /\ <var:i2> = <nat:5> * <var:O> ^ <nat:2> /\ <var:I> = <nat:4> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:i0> = <nat:5> /\ <var:i1> = <nat:3> * <var:O> /\ <var:I> = <nat:4> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:i0> = <nat:5> /\ <var:I> = <nat:4> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:O> /\ <var:I> = <nat:4> * <var:O> ^ <nat:3> + <nat:5> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 