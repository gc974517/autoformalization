\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n> := <nat:1> ; <var:n> := <nat:3> + <var:n> * <var:v> ; <var:n> := <nat:4> + <var:n> * <var:v> ; <var:n> := <nat:1> + <var:n> * <var:v> ; <var:n> := <nat:4> + <var:n> * <var:v> ; <var:n> := <nat:3> + <var:n> * <var:v> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:v> = <var:P> $ given any $ <var:P> \in \mathbb{N} $ ahead of evaluating the series of commands , it follows that we see $ <var:n> = <nat:1> \times <var:P> ^ <nat:5> + <nat:3> \times <var:P> ^ <nat:4> + <nat:4> \times <var:P> ^ <nat:3> + <nat:1> \times <var:P> ^ <nat:2> + <nat:4> \times <var:P> + <nat:3> $ when series of instructions has finished . \end{theorem} \begin{proof} The course of logic for the series of commands is done by usual Hoare reasoning . Taking a look at the next line of code contained in the series of instructions , the assignment command binding $ <nat:1> $ to $ <var:n>$ . This forwards $ \{ <var:v> = <var:P> \} $ into $ \{ <var:v> = <var:P> \land <var:n> = <nat:1> \} $ . Observing the upcoming line contained in the code , we have the variable binding statement \verb | <var:n> := <nat:3> + <var:n> * <var:v> ; | . This code moves the condition $ \{ <var:v> = <var:P> \land <var:n> = <nat:1> \} $ into the postcondition $ \{ <var:v> = <var:P> \land <var:n> = <nat:1> \times <var:P> + <nat:3> \} $ . Shifting focus toward the subsequent command found in our series of instructions , the variable assignmet command \verb | <var:n> := <nat:4> + <var:n> * <var:v> ; | . This takes the precondition $ \{ <var:v> = <var:P> \land <var:n> = <nat:1> \times <var:P> + <nat:3> \} $ into $ \{ <var:v> = <var:P> \land <var:n> = <nat:1> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + <nat:4> \} $ . This is sound by the assignment law obtained from typical Hoare techniques . Considering the proceeding piece of code seen in our code segment , we have the variable assignmet line letting $ <nat:1> + <var:n> * <var:v> $ into $ <var:n>$ . This takes the precondition $ \{ <var:v> = <var:P> \land <var:n> = <nat:1> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + <nat:4> \} $ as the condition $ \{ <var:v> = <var:P> \land <var:n> = <nat:1> \times <var:P> ^ <nat:3> + <nat:3> \times <var:P> ^ <nat:2> + <nat:4> \times <var:P> + <nat:1> \} $ . Moving forward , we see the environment update line \verb | <var:n> := <nat:4> + <var:n> * <var:v> ; | . This forwards the precondition $ \{ <var:v> = <var:P> \land <var:n> = <nat:1> \times <var:P> ^ <nat:3> + <nat:3> \times <var:P> ^ <nat:2> + <nat:4> \times <var:P> + <nat:1> \} $ toward the condition $ \{ <var:v> = <var:P> \land <var:n> = <nat:1> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:3> + <nat:4> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:4> \} $ . This is guaranteed by the assignment inference rule obtained from typical Hoare logic . Moving forward to the next step , we have the variable assignmet command defining $ <nat:3> + <var:n> * <var:v$ as $ <var:n>$ . This transfers $ \{ <var:v> = <var:P> \land <var:n> = <nat:1> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:3> + <nat:4> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:4> \} $ as the condition $ \{ <var:v> = <var:P> \land <var:n> = <nat:1> \times <var:P> ^ <nat:5> + <nat:3> \times <var:P> ^ <nat:4> + <nat:4> \times <var:P> ^ <nat:3> + <nat:1> \times <var:P> ^ <nat:2> + <nat:4> \times <var:P> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:n> := <nat:1> ; <var:n> := <nat:3> + <var:n> * <var:v> ; <var:n> := <nat:4> + <var:n> * <var:v> ; <var:n> := <nat:1> + <var:n> * <var:v> ; <var:n> := <nat:4> + <var:n> * <var:v> ; <var:n> := <nat:3> + <var:n> * <var:v> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:v> = <var:P> }} <def:poly> {{ <var:n> = <nat:1> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:n> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:n> = <nat:1> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:n> = <nat:1> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:n> = <nat:1> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:n> = <nat:1> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:P> /\ <var:n> = <nat:1> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 