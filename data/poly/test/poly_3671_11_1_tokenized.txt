\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c1> := <var:b> ; <var:c2> := <var:c1> * <var:b> ; <var:c3> := <var:c2> * <var:b> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:7> ; <var:c2> := <var:c2> * <nat:5> ; <var:c3> := <var:c3> * <nat:2> ; <var:A> := <var:c3> <var:A> := <var:A> + <var:c2> <var:A> := <var:A> + <var:c1> <var:A> := <var:A> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:b> = <var:g> $ ahead of the evaluation of this list of instructions it must be that we see $ <var:A> = <nat:2> \cdot <var:g> ^ <nat:3> + <nat:5> \cdot <var:g> ^ <nat:2> + <nat:7> \cdot <var:g> + <nat:3> $ after series of commands terminates . \end{theorem} \begin{proof} The argument for this series of commands is demonstrated with usual Hoare techniques . After , we see \begin{eqnarray} \{ <var:b> = <var:g> \} \, <var:c1> := <var:b> \, \{ <var:b> = <var:g> \land <var:c1> = <var:g> \} \\ \{ <var:b> = <var:g> \land <var:c1> = <var:g> \} \, <var:c2> := <var:c1> * <var:b> \, \{ <var:b> = <var:g> \land <var:c1> = <var:g> \land <var:c2> = <var:g> ^ <nat:2> \} \\ \{ <var:b> = <var:g> \land <var:c1> = <var:g> \land <var:c2> = <var:g> ^ <nat:2> \} \, <var:c3> := <var:c2> * <var:b> \, \{ <var:b> = <var:g> \land <var:c1> = <var:g> \land <var:c2> = <var:g> ^ <nat:2> \land <var:c3> = <var:g> ^ <nat:3> \} \\ \{ <var:b> = <var:g> \land <var:c1> = <var:g> \land <var:c2> = <var:g> ^ <nat:2> \land <var:c3> = <var:g> ^ <nat:3> \} \, <var:c0> := <nat:3> \, \{ <var:b> = <var:g> \land <var:c1> = <var:g> \land <var:c2> = <var:g> ^ <nat:2> \land <var:c3> = <var:g> ^ <nat:3> \land <var:c0> = <nat:3> \} \\ \{ <var:b> = <var:g> \land <var:c1> = <var:g> \land <var:c2> = <var:g> ^ <nat:2> \land <var:c3> = <var:g> ^ <nat:3> \land <var:c0> = <nat:3> \} \, <var:c1> := <var:c1> * <nat:7> \, \{ <var:b> = <var:g> \land <var:c1> = <nat:7> \cdot <var:g> \land <var:c2> = <var:g> ^ <nat:2> \land <var:c3> = <var:g> ^ <nat:3> \land <var:c0> = <nat:3> \} \\ \{ <var:b> = <var:g> \land <var:c1> = <nat:7> \cdot <var:g> \land <var:c2> = <var:g> ^ <nat:2> \land <var:c3> = <var:g> ^ <nat:3> \land <var:c0> = <nat:3> \} \, <var:c2> := <var:c2> * <nat:5> \, \{ <var:b> = <var:g> \land <var:c1> = <nat:7> \cdot <var:g> \land <var:c2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:c3> = <var:g> ^ <nat:3> \land <var:c0> = <nat:3> \} \\ \{ <var:b> = <var:g> \land <var:c1> = <nat:7> \cdot <var:g> \land <var:c2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:c3> = <var:g> ^ <nat:3> \land <var:c0> = <nat:3> \} \, <var:c3> := <var:c3> * <nat:2> \, \{ <var:b> = <var:g> \land <var:c1> = <nat:7> \cdot <var:g> \land <var:c2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:c3> = <nat:2> \cdot <var:g> ^ <nat:3> \land <var:c0> = <nat:3> \} \\ \{ <var:b> = <var:g> \land <var:c1> = <nat:7> \cdot <var:g> \land <var:c2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:c3> = <nat:2> \cdot <var:g> ^ <nat:3> \land <var:c0> = <nat:3> \} \, <var:A> := <var:c3\, \{ <var:b> = <var:g> \land <var:c1> = <nat:7> \cdot <var:g> \land <var:c2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:c0> = <nat:3> \land <var:A> = <nat:2> \cdot <var:g> ^ <nat:3> \} \\ \{ <var:b> = <var:g> \land <var:c1> = <nat:7> \cdot <var:g> \land <var:c2> = <nat:5> \cdot <var:g> ^ <nat:2> \land <var:c0> = <nat:3> \land <var:A> = <nat:2> \cdot <var:g> ^ <nat:3> \} \, <var:A> := <var:A> + <var:c2\, \{ <var:b> = <var:g> \land <var:c1> = <nat:7> \cdot <var:g> \land <var:c0> = <nat:3> \land <var:A> = <nat:2> \cdot <var:g> ^ <nat:3> + <nat:5> \cdot <var:g> ^ <nat:2> \} \\ \{ <var:b> = <var:g> \land <var:c1> = <nat:7> \cdot <var:g> \land <var:c0> = <nat:3> \land <var:A> = <nat:2> \cdot <var:g> ^ <nat:3> + <nat:5> \cdot <var:g> ^ <nat:2> \} \, <var:A> := <var:A> + <var:c1\, \{ <var:b> = <var:g> \land <var:c0> = <nat:3> \land <var:A> = <nat:2> \cdot <var:g> ^ <nat:3> + <nat:5> \cdot <var:g> ^ <nat:2> + <nat:7> \cdot <var:g> \} \end{eqnarray} This is given by the assignment inference rule in usual Hoare logic . Moving forward to the next bit of code found in our code , we have \begin{eqnarray} \{ <var:b> = <var:g> \} \, <var:c1> := <var:b> \, \{ <var:b> = <var:g> \land <var:c1> = <var:g> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <def:poly> := <var:c1> := <var:b> ; <var:c2> := <var:c1> * <var:b> ; <var:c3> := <var:c2> * <var:b> ; <var:c0> := <nat:3> ; <var:c1> := <var:c1> * <nat:7> ; <var:c2> := <var:c2> * <nat:5> ; <var:c3> := <var:c3> * <nat:2> ; <var:A> := <var:c3> <var:A> := <var:A> + <var:c2> <var:A> := <var:A> + <var:c1> <var:A> := <var:A> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:b> = <var:g> }} <def:poly> {{ <var:A> = <nat:2> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:c1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:c1> = <var:g> /\ <var:c2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:c1> = <var:g> /\ <var:c2> = <var:g> ^ <nat:2> /\ <var:c3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:c1> = <var:g> /\ <var:c2> = <var:g> ^ <nat:2> /\ <var:c3> = <var:g> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:c1> = <nat:7> * <var:g> /\ <var:c2> = <var:g> ^ <nat:2> /\ <var:c3> = <var:g> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:c1> = <nat:7> * <var:g> /\ <var:c2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:c3> = <var:g> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:c1> = <nat:7> * <var:g> /\ <var:c2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:c3> = <nat:2> * <var:g> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:c1> = <nat:7> * <var:g> /\ <var:c2> = <nat:5> * <var:g> ^ <nat:2> /\ <var:c0> = <nat:3> /\ <var:A> = <nat:2> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:c1> = <nat:7> * <var:g> /\ <var:c0> = <nat:3> /\ <var:A> = <nat:2> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:c0> = <nat:3> /\ <var:A> = <nat:2> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:A> = <nat:2> * <var:g> ^ <nat:3> + <nat:5> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 