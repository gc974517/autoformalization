\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:7> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:D> ; <var:c2> := <nat:9> ; <var:c2> := <var:c2> * <var:D> ; <var:c2> := <var:c2> * <var:D> ; <var:y> := <var:c2> ; <var:y> := <var:y> + <var:c1> ; <var:y> := <var:y> + <var:c0> \end{verbatim} Allowing it to be that $ <var:D> = <var:B> $ , for some $ <var:B> $ , prior to the execution of our series of commands it holds that $ <var:y> = <nat:9> \cdot <var:B> ^ <nat:2> + <nat:8> \cdot <var:B> + <nat:7> $ . \end{theorem} \begin{proof} The course of logic for our segment of code is done with standard Hoare logic . Jumping to the next step seen in the set of commands , the environment update code \verb | <var:c0> := <nat:7> ; | . This line takes $ \{ <var:D> = <var:B> \} $ toward the condition $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \} $ . This is known to be sound with the assignment rule from usual Hoare techniques . Moving on to the next step , we see the code \verb | <var:c1> := <nat:8> ; | . This command moves the precondition $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \} $ into $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:8> \} $ . This is ensured by the assignment scheme found in typical Hoare reasoning . Considering the upcoming line of code in the list of commands , the binding code \verb | <var:c1> := <var:c1> * <var:D> ; | . This moves the condition $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:8> \} $ toward $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:8> \cdot <var:B> \} $ . This is rigorously given by the assignment scheme defined in standard Hoare reasoning . Taking another step toward the next line of code found in our code , we have the variable assignmet statement \verb | <var:c2> := <nat:9> ; | . This redefines the condition $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:8> \cdot <var:B> \} $ as the postcondition $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:8> \cdot <var:B> \land <var:c2> = <nat:9> \} $ . Moving onward , we have the variable update code defining $ <var:c2> * <var:D> $ toward $ <var:c2>$ . This transfers the precondition $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:8> \cdot <var:B> \land <var:c2> = <nat:9> \} $ toward the postcondition $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:8> \cdot <var:B> \land <var:c2> = <nat:9> \cdot <var:B> \} $ . Moving onward , the assignment statement \verb | <var:c2> := <var:c2> * <var:D> ; | . This statement advances the condition $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:8> \cdot <var:B> \land <var:c2> = <nat:9> \cdot <var:B> \} $ into the postcondition $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:8> \cdot <var:B> \land <var:c2> = <nat:9> \cdot <var:B> ^ <nat:2> \} $ . This is given by the assignment inference rule obtained from usual Hoare logic . Advancing to the proceeding line in our program , we see the variable binding command \verb | <var:y> := <var:c2> ; | . This forwards the condition $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:8> \cdot <var:B> \land <var:c2> = <nat:9> \cdot <var:B> ^ <nat:2> \} $ to $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:8> \cdot <var:B> \land <var:y> = <nat:9> \cdot <var:B> ^ <nat:2> \} $ . Moving on to the subsequent command in our code , the binding command binding $ <var:y> + <var:c1> $ into $ <var:y>$ . This takes $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:c1> = <nat:8> \cdot <var:B> \land <var:y> = <nat:9> \cdot <var:B> ^ <nat:2> \} $ as the postcondition $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:y> = <nat:9> \cdot <var:B> ^ <nat:2> + <nat:8> \cdot <var:B> \} $ . Taking a look at the upcoming command in our segment of code , we see the command \verb | <var:y> := <var:y> + <var:c0> | . This takes the condition $ \{ <var:D> = <var:B> \land <var:c0> = <nat:7> \land <var:y> = <nat:9> \cdot <var:B> ^ <nat:2> + <nat:8> \cdot <var:B> \} $ as the postcondition $ \{ <var:D> = <var:B> \land <var:y> = <nat:9> \cdot <var:B> ^ <nat:2> + <nat:8> \cdot <var:B> + <nat:7> \} $ . This is shown by the assignment inference rule defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:D> = <var:B> }} <var:c0> := <nat:7> ; <var:c1> := <nat:8> ; <var:c1> := <var:c1> * <var:D> ; <var:c2> := <nat:9> ; <var:c2> := <var:c2> * <var:D> ; <var:c2> := <var:c2> * <var:D> ; <var:y> := <var:c2> ; <var:y> := <var:y> + <var:c1> ; <var:y> := <var:y> + <var:c0> {{ <var:y> = <nat:9> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:8> * <var:B> /\ <var:c2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:8> * <var:B> /\ <var:c2> = <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:8> * <var:B> /\ <var:c2> = <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:c0> = <nat:7> /\ <var:c1> = <nat:8> * <var:B> /\ <var:y> = <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:c0> = <nat:7> /\ <var:y> = <nat:9> * <var:B> ^ <nat:2> + <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:B> /\ <var:y> = <nat:9> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 