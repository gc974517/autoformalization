\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:C> ; <var:M2> := <var:M1> * <var:C> ; <var:M0> := <nat:8> ; <var:M1> := <var:M1> * <nat:2> ; <var:M2> := <var:M2> * <nat:2> ; <var:S> := <var:M2> <var:S> := <var:S> + <var:M1> <var:S> := <var:S> + <var:M0> \end{verbatim} Allowing $ <var:C> = <var:Q> $ before executing this segment of code , it holds that we have $ <var:S> = <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:8> $ . \end{theorem} \begin{proof} Applying Hoare reasoning gives us : \begin{eqnarray} \{ <var:C> = <var:Q> \} \\ <var:M1> := <var:C> ; \\ \{ <var:C> = <var:Q> \land <var:M1> = <var:Q> \} \\ <var:M2> := <var:M1> * <var:C> ; \\ \{ <var:C> = <var:Q> \land <var:M1> = <var:Q> \land <var:M2> = <var:Q> ^ <nat:2> \} \\ <var:M0> := <nat:8> ; \\ \{ <var:C> = <var:Q> \land <var:M1> = <var:Q> \land <var:M2> = <var:Q> ^ <nat:2> \land <var:M0> = <nat:8> \} \\ <var:M1> := <var:M1> * <nat:2> ; \\ \{ <var:C> = <var:Q> \land <var:M1> = <nat:2> * <var:Q> \land <var:M2> = <var:Q> ^ <nat:2> \land <var:M0> = <nat:8> \} \\ <var:M2> := <var:M2> * <nat:2> ; \\ \{ <var:C> = <var:Q> \land <var:M1> = <nat:2> * <var:Q> \land <var:M2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:M0> = <nat:8> \} \\ <var:S> := <var:M2> \\ \{ <var:C> = <var:Q> \land <var:M1> = <nat:2> * <var:Q> \land <var:M0> = <nat:8> \land <var:S> = <nat:2> * <var:Q> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:M1> \\ \{ <var:C> = <var:Q> \land <var:M0> = <nat:8> \land <var:S> = <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> \} \\ <var:S> := <var:S> + <var:M0> \\ \{ <var:C> = <var:Q> \land <var:S> = <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:8> \} \end{eqnarray} Given the preceding argument , this set of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:C> = <var:Q> }} <var:M1> := <var:C> ; <var:M2> := <var:M1> * <var:C> ; <var:M0> := <nat:8> ; <var:M1> := <var:M1> * <nat:2> ; <var:M2> := <var:M2> * <nat:2> ; <var:S> := <var:M2> <var:S> := <var:S> + <var:M1> <var:S> := <var:S> + <var:M0> {{ <var:S> = <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:M1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:M1> = <var:Q> /\ <var:M2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:M1> = <var:Q> /\ <var:M2> = <var:Q> ^ <nat:2> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:M1> = <nat:2> * <var:Q> /\ <var:M2> = <var:Q> ^ <nat:2> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:M1> = <nat:2> * <var:Q> /\ <var:M2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:M0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:M1> = <nat:2> * <var:Q> /\ <var:M0> = <nat:8> /\ <var:S> = <nat:2> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:M0> = <nat:8> /\ <var:S> = <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Q> /\ <var:S> = <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 