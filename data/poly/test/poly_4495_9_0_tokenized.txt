\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:2> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:n> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:n> ; <var:c2> := <var:c2> * <var:n> ; <var:Y> := <var:c2> ; <var:Y> := <var:Y> + <var:c1> ; <var:Y> := <var:Y> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:n> = <var:D> $ ( for every positive coefficients $ <var:D> $ ) prior to evaluating the series of instructions , it must be that $ <var:Y> = <nat:3> \times <var:D> ^ <nat:2> + <nat:3> \times <var:D> + <nat:2> $ once code segment terminates . \end{theorem} \begin{proof} The method of proof for the series of commands can be shown with typical Hoare logic . Looking at the proceeding pieces of code found in the series of commands , we see \begin{eqnarray} \{ <var:n> = <var:D> \} \, <var:c0> := <nat:2> \, \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \} \\ \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \} \, <var:c1> := <nat:3> \, \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \} \\ \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \} \, <var:c1> := <var:c1> * <var:n> \, \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:D> \} \\ \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:D> \} \, <var:c2> := <nat:3> \, \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:D> \land <var:c2> = <nat:3> \} \end{eqnarray} Now , we have \begin{eqnarray} \{ <var:n> = <var:D> \} \, <var:c0> := <nat:2> \, \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \} \\ \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \} \, <var:c1> := <nat:3> \, \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \} \\ \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> \} \, <var:c1> := <var:c1> * <var:n> \, \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:D> \} \\ \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:D> \} \, <var:c2> := <nat:3> \, \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \land <var:c1> = <nat:3> * <var:D> \land <var:c2> = <nat:3> \} \end{eqnarray} This is known to be sound with the assignment inference rule defined in usual Hoare logic . Stepping forward , we see \begin{eqnarray} \{ <var:n> = <var:D> \} \, <var:c0> := <nat:2> \, \{ <var:n> = <var:D> \land <var:c0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:2> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:n> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:n> ; <var:c2> := <var:c2> * <var:n> ; <var:Y> := <var:c2> ; <var:Y> := <var:Y> + <var:c1> ; <var:Y> := <var:Y> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:n> = <var:D> }} <def:poly> {{ <var:Y> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:D> /\ <var:c2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:D> /\ <var:c2> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:D> /\ <var:c2> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:c0> = <nat:2> /\ <var:c1> = <nat:3> * <var:D> /\ <var:Y> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:c0> = <nat:2> /\ <var:Y> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:Y> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 