\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f0> := <nat:3> ; <var:j> := <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:e> = <var:W> $ prior to running this program , it must be that $ <var:j> = <nat:3> $ once list of commands terminates . \end{theorem} \begin{proof} Proving correctness for the code can be done through standard Hoare logic . Advancing to the next step , \begin{verbatim} { <var:e> = <var:W> } <var:f0> := <nat:3> { <var:e> = <var:W> \land <var:f0> = <nat:3> } { <var:e> = <var:W> \land <var:f0> = <nat:3> } <var:j> := <var:f0{ <var:e> = <var:W> \land <var:j> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <def:poly> := <var:f0> := <nat:3> ; <var:j> := <var:f0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:e> = <var:W> }} <def:poly> {{ <var:j> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:W> /\ <var:j> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 