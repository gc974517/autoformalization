\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:2> ; <var:X> := <var:i0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Assume that $ <var:A> = <var:k> $ prior to the evaluation of the series of instructions , it must be that we have $ <var:X> = <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:k> \} \\ <var:i0> := <nat:2> ; \\ \{ <var:A> = <var:k> \land <var:i0> = <nat:2> \} \\ <var:X> := <var:i0> \\ \{ <var:A> = <var:k> \land <var:X> = <nat:2> \} \end{eqnarray} The application of Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <def:poly> := <var:i0> := <nat:2> ; <var:X> := <var:i0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:A> = <var:k> }} <def:poly> {{ <var:X> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:k> /\ <var:X> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 