\begin{document} \begin{theorem} We define a series of instructions as \begin{verbatim} <var:s1> := <var:T> ; <var:s2> := <var:s1> * <var:T> ; <var:s0> := <nat:6> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:9> ; <var:F> := <var:s2> <var:F> := <var:F> + <var:s1> <var:F> := <var:F> + <var:s0> \end{verbatim} Assume , for every positive numbers $ <var:k> $ , $ <var:T> = <var:k> $ before running the list of commands it holds that we see $ <var:F> = <nat:9> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:6> $ after list of instructions terminates . \end{theorem} \begin{proof} The application of Hoare techniques returns : \begin{eqnarray} \{ <var:T> = <var:k> \} \\ <var:s1> := <var:T> ; \\ \{ <var:T> = <var:k> \land <var:s1> = <var:k> \} \\ <var:s2> := <var:s1> * <var:T> ; \\ \{ <var:T> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \} \\ <var:s0> := <nat:6> ; \\ \{ <var:T> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s0> = <nat:6> \} \\ <var:s1> := <var:s1> * <nat:4> ; \\ \{ <var:T> = <var:k> \land <var:s1> = <nat:4> * <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s0> = <nat:6> \} \\ <var:s2> := <var:s2> * <nat:9> ; \\ \{ <var:T> = <var:k> \land <var:s1> = <nat:4> * <var:k> \land <var:s2> = <nat:9> * <var:k> ^ <nat:2> \land <var:s0> = <nat:6> \} \\ <var:F> := <var:s2> \\ \{ <var:T> = <var:k> \land <var:s1> = <nat:4> * <var:k> \land <var:s0> = <nat:6> \land <var:F> = <nat:9> * <var:k> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:s1> \\ \{ <var:T> = <var:k> \land <var:s0> = <nat:6> \land <var:F> = <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> \} \\ <var:F> := <var:F> + <var:s0> \\ \{ <var:T> = <var:k> \land <var:F> = <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:6> \} \end{eqnarray} Hence , the code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:T> = <var:k> }} <var:s1> := <var:T> ; <var:s2> := <var:s1> * <var:T> ; <var:s0> := <nat:6> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:9> ; <var:F> := <var:s2> <var:F> := <var:F> + <var:s1> <var:F> := <var:F> + <var:s0> {{ <var:F> = <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:s1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:s1> = <var:k> /\ <var:s2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:s1> = <var:k> /\ <var:s2> = <var:k> ^ <nat:2> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <var:k> ^ <nat:2> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s0> = <nat:6> /\ <var:F> = <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:s0> = <nat:6> /\ <var:F> = <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:k> /\ <var:F> = <nat:9> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 