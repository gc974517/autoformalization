\begin{document} \begin{theorem} Consider a code segment : \begin{verbatim} <var:W1> := <var:M> ; <var:W2> := <var:W1> * <var:M> ; <var:W3> := <var:W2> * <var:M> ; <var:W4> := <var:W3> * <var:M> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:2> ; <var:W2> := <var:W2> * <nat:9> ; <var:W3> := <var:W3> * <nat:5> ; <var:W4> := <var:W4> * <nat:4> ; <var:E> := <var:W4> <var:E> := <var:E> + <var:W3> <var:E> := <var:E> + <var:W2> <var:E> := <var:E> + <var:W1> <var:E> := <var:E> + <var:W0> \end{verbatim} Allowing that $ <var:M> = <var:s> $ ( with some $ <var:s> \in \mathbb{N} $ ) before executing our set of commands then we see $ <var:E> = <nat:4> \cdot <var:s> ^ <nat:4> + <nat:5> \cdot <var:s> ^ <nat:3> + <nat:9> \cdot <var:s> ^ <nat:2> + <nat:2> \cdot <var:s> + <nat:4> $ after list of commands has finished executing . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions can be shown using Hoare reasoning . Looking at the proceeding steps seen in our list of instructions , we see \verb | { <var:M> = <var:s> } <var:W1> := <var:M> { <var:M> = <var:s> \land <var:W1> = <var:s> } | , \verb | { <var:M> = <var:s> \land <var:W1> = <var:s> } <var:W2> := <var:W1> * <var:M> { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> } | , \verb | { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> } <var:W3> := <var:W2> * <var:M> { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W3> = <var:s> ^ <nat:3> } | , \verb | { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W3> = <var:s> ^ <nat:3> } <var:W4> := <var:W3> * <var:M> { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W3> = <var:s> ^ <nat:3> \land <var:W4> = <var:s> ^ <nat:4> } | , \verb | { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W3> = <var:s> ^ <nat:3> \land <var:W4> = <var:s> ^ <nat:4> } <var:W0> := <nat:4> { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W3> = <var:s> ^ <nat:3> \land <var:W4> = <var:s> ^ <nat:4> \land <var:W0> = <nat:4> } | , \verb | { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W3> = <var:s> ^ <nat:3> \land <var:W4> = <var:s> ^ <nat:4> \land <var:W0> = <nat:4> } <var:W1> := <var:W1> * <nat:2> { <var:M> = <var:s> \land <var:W1> = <nat:2> \cdot <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W3> = <var:s> ^ <nat:3> \land <var:W4> = <var:s> ^ <nat:4> \land <var:W0> = <nat:4> } | and \verb | { <var:M> = <var:s> \land <var:W1> = <nat:2> \cdot <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W3> = <var:s> ^ <nat:3> \land <var:W4> = <var:s> ^ <nat:4> \land <var:W0> = <nat:4> } <var:W2> := <var:W2> * <nat:9> { <var:M> = <var:s> \land <var:W1> = <nat:2> \cdot <var:s> \land <var:W2> = <nat:9> \cdot <var:s> ^ <nat:2> \land <var:W3> = <var:s> ^ <nat:3> \land <var:W4> = <var:s> ^ <nat:4> \land <var:W0> = <nat:4> } | . Stepping through , \verb | { <var:M> = <var:s> } <var:W1> := <var:M> { <var:M> = <var:s> \land <var:W1> = <var:s> } | , \verb | { <var:M> = <var:s> \land <var:W1> = <var:s> } <var:W2> := <var:W1> * <var:M> { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> } | , \verb | { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> } <var:W3> := <var:W2> * <var:M> { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W3> = <var:s> ^ <nat:3> } | and \verb | { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W3> = <var:s> ^ <nat:3> } <var:W4> := <var:W3> * <var:M> { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> \land <var:W3> = <var:s> ^ <nat:3> \land <var:W4> = <var:s> ^ <nat:4> } | . Moving forward to the proceeding steps found in the segment of code , we see \verb | { <var:M> = <var:s> } <var:W1> := <var:M> { <var:M> = <var:s> \land <var:W1> = <var:s> } | and \verb | { <var:M> = <var:s> \land <var:W1> = <var:s> } <var:W2> := <var:W1> * <var:M> { <var:M> = <var:s> \land <var:W1> = <var:s> \land <var:W2> = <var:s> ^ <nat:2> } | . This is sound through the variable update law from typical Hoare techniques . Advancing to the upcoming command in the program , we have \verb | { <var:M> = <var:s> } <var:W1> := <var:M> { <var:M> = <var:s> \land <var:W1> = <var:s> } | . This is given with the inference rule defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <var:W4> : string := " <var:W4> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:M> = <var:s> }} <var:W1> := <var:M> ; <var:W2> := <var:W1> * <var:M> ; <var:W3> := <var:W2> * <var:M> ; <var:W4> := <var:W3> * <var:M> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:2> ; <var:W2> := <var:W2> * <nat:9> ; <var:W3> := <var:W3> * <nat:5> ; <var:W4> := <var:W4> * <nat:4> ; <var:E> := <var:W4> <var:E> := <var:E> + <var:W3> <var:E> := <var:E> + <var:W2> <var:E> := <var:E> + <var:W1> <var:E> := <var:E> + <var:W0> {{ <var:E> = <nat:4> * <var:s> ^ <nat:4> + <nat:5> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:W1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:W1> = <var:s> /\ <var:W2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:W1> = <var:s> /\ <var:W2> = <var:s> ^ <nat:2> /\ <var:W3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:W1> = <var:s> /\ <var:W2> = <var:s> ^ <nat:2> /\ <var:W3> = <var:s> ^ <nat:3> /\ <var:W4> = <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:W1> = <var:s> /\ <var:W2> = <var:s> ^ <nat:2> /\ <var:W3> = <var:s> ^ <nat:3> /\ <var:W4> = <var:s> ^ <nat:4> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:W1> = <nat:2> * <var:s> /\ <var:W2> = <var:s> ^ <nat:2> /\ <var:W3> = <var:s> ^ <nat:3> /\ <var:W4> = <var:s> ^ <nat:4> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:W1> = <nat:2> * <var:s> /\ <var:W2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:W3> = <var:s> ^ <nat:3> /\ <var:W4> = <var:s> ^ <nat:4> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:W1> = <nat:2> * <var:s> /\ <var:W2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:W3> = <nat:5> * <var:s> ^ <nat:3> /\ <var:W4> = <var:s> ^ <nat:4> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:W1> = <nat:2> * <var:s> /\ <var:W2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:W3> = <nat:5> * <var:s> ^ <nat:3> /\ <var:W4> = <nat:4> * <var:s> ^ <nat:4> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:W1> = <nat:2> * <var:s> /\ <var:W2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:W3> = <nat:5> * <var:s> ^ <nat:3> /\ <var:W0> = <nat:4> /\ <var:E> = <nat:4> * <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:W1> = <nat:2> * <var:s> /\ <var:W2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:W0> = <nat:4> /\ <var:E> = <nat:4> * <var:s> ^ <nat:4> + <nat:5> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:W1> = <nat:2> * <var:s> /\ <var:W0> = <nat:4> /\ <var:E> = <nat:4> * <var:s> ^ <nat:4> + <nat:5> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:W0> = <nat:4> /\ <var:E> = <nat:4> * <var:s> ^ <nat:4> + <nat:5> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:E> = <nat:4> * <var:s> ^ <nat:4> + <nat:5> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 