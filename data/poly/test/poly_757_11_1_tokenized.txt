\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} as \begin{verbatim} <var:G1> := <var:M> ; <var:G2> := <var:G1> * <var:M> ; <var:G3> := <var:G2> * <var:M> ; <var:G0> := <nat:4> ; <var:G1> := <var:G1> * <nat:2> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:1> ; <var:N> := <var:G3> <var:N> := <var:N> + <var:G2> <var:N> := <var:N> + <var:G1> <var:N> := <var:N> + <var:G0> \end{verbatim} Given it to be that $ <var:M> = <var:E> $ with some positive coefficients $ <var:E> $ prior to the execution of the list of commands , then $ <var:N> = <nat:1> \cdot <var:E> ^ <nat:3> + <nat:2> \cdot <var:E> ^ <nat:2> + <nat:2> \cdot <var:E> + <nat:4> $ when code has finished executing . \end{theorem} \begin{proof} The course of logic for this code can be accomplished by typical Hoare techniques . Taking another step toward the next line contained in our list of instructions , the assignment statement \verb | <var:G1> := <var:M> ; | . This transfers the precondition $ \{ <var:M> = <var:E> \} $ to the condition $ \{ <var:M> = <var:E> \land <var:G1> = <var:E> \} $ . This is deduced through the assignment rule in usual Hoare logic . Moving on to the next step , the variable assignmet statement yielding $ <var:G1> * <var:M> $ into $ <var:G2>$ . This takes the precondition $ \{ <var:M> = <var:E> \land <var:G1> = <var:E> \} $ as $ \{ <var:M> = <var:E> \land <var:G1> = <var:E> \land <var:G2> = <var:E> ^ <nat:2> \} $ . Taking another step toward the next bit of code found in the list of commands , the command \verb | <var:G3> := <var:G2> * <var:M> ; | . This moves the precondition $ \{ <var:M> = <var:E> \land <var:G1> = <var:E> \land <var:G2> = <var:E> ^ <nat:2> \} $ into the postcondition $ \{ <var:M> = <var:E> \land <var:G1> = <var:E> \land <var:G2> = <var:E> ^ <nat:2> \land <var:G3> = <var:E> ^ <nat:3> \} $ . This is given by the assignment rule defined in typical Hoare techniques . Moving onward , the environment update statement letting $ <nat:4> $ to $ <var:G0>$ . This takes the precondition $ \{ <var:M> = <var:E> \land <var:G1> = <var:E> \land <var:G2> = <var:E> ^ <nat:2> \land <var:G3> = <var:E> ^ <nat:3> \} $ toward the postcondition $ \{ <var:M> = <var:E> \land <var:G1> = <var:E> \land <var:G2> = <var:E> ^ <nat:2> \land <var:G3> = <var:E> ^ <nat:3> \land <var:G0> = <nat:4> \} $ . This is ensured through the assignment inference rule in usual Hoare logic . Honing in on the upcoming command found in our series of commands , we see the variable assignmet line letting $ <var:G1> * <nat:2> $ to $ <var:G1>$ . This code takes the precondition $ \{ <var:M> = <var:E> \land <var:G1> = <var:E> \land <var:G2> = <var:E> ^ <nat:2> \land <var:G3> = <var:E> ^ <nat:3> \land <var:G0> = <nat:4> \} $ as $ \{ <var:M> = <var:E> \land <var:G1> = <nat:2> \times <var:E> \land <var:G2> = <var:E> ^ <nat:2> \land <var:G3> = <var:E> ^ <nat:3> \land <var:G0> = <nat:4> \} $ . Looking at the next command found in our set of commands , we see the code \verb | <var:G2> := <var:G2> * <nat:2> ; | . This command transfers $ \{ <var:M> = <var:E> \land <var:G1> = <nat:2> \times <var:E> \land <var:G2> = <var:E> ^ <nat:2> \land <var:G3> = <var:E> ^ <nat:3> \land <var:G0> = <nat:4> \} $ as $ \{ <var:M> = <var:E> \land <var:G1> = <nat:2> \times <var:E> \land <var:G2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:G3> = <var:E> ^ <nat:3> \land <var:G0> = <nat:4> \} $ . This is sound using the assignment rule from standard Hoare reasoning . Moving forward to the upcoming piece of code contained in the set of commands , we have the command \verb | <var:G3> := <var:G3> * <nat:1> ; | . This code advances $ \{ <var:M> = <var:E> \land <var:G1> = <nat:2> \times <var:E> \land <var:G2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:G3> = <var:E> ^ <nat:3> \land <var:G0> = <nat:4> \} $ to the condition $ \{ <var:M> = <var:E> \land <var:G1> = <nat:2> \times <var:E> \land <var:G2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:G3> = <nat:1> \times <var:E> ^ <nat:3> \land <var:G0> = <nat:4> \} $ . Paying attention to the next line of code contained in our list of commands , we have the variable assignmet line \verb | <var:N> := <var:G3> | . This advances the precondition $ \{ <var:M> = <var:E> \land <var:G1> = <nat:2> \times <var:E> \land <var:G2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:G3> = <nat:1> \times <var:E> ^ <nat:3> \land <var:G0> = <nat:4> \} $ as the postcondition $ \{ <var:M> = <var:E> \land <var:G1> = <nat:2> \times <var:E> \land <var:G2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:G0> = <nat:4> \land <var:N> = <nat:1> \times <var:E> ^ <nat:3> \} $ . Honing in on the upcoming line of code in the program , we have the environment update code letting $ <var:N> + <var:G2$ as $ <var:N>$ . This redefines $ \{ <var:M> = <var:E> \land <var:G1> = <nat:2> \times <var:E> \land <var:G2> = <nat:2> \times <var:E> ^ <nat:2> \land <var:G0> = <nat:4> \land <var:N> = <nat:1> \times <var:E> ^ <nat:3> \} $ into the condition $ \{ <var:M> = <var:E> \land <var:G1> = <nat:2> \times <var:E> \land <var:G0> = <nat:4> \land <var:N> = <nat:1> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> \} $ . Advancing to the subsequent command in the set of instructions , we see the line yielding $ <var:N> + <var:G1$ into $ <var:N>$ . This redefines $ \{ <var:M> = <var:E> \land <var:G1> = <nat:2> \times <var:E> \land <var:G0> = <nat:4> \land <var:N> = <nat:1> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> \} $ to the condition $ \{ <var:M> = <var:E> \land <var:G0> = <nat:4> \land <var:N> = <nat:1> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> \} $ . Going to the next step , we have the command yielding $ <var:N> + <var:G0$ as $ <var:N>$ . This command transfers the precondition $ \{ <var:M> = <var:E> \land <var:G0> = <nat:4> \land <var:N> = <nat:1> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> \} $ toward $ \{ <var:M> = <var:E> \land <var:N> = <nat:1> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:4> \} $ . This is sound by the assignment scheme in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:M> = <var:E> }} <var:G1> := <var:M> ; <var:G2> := <var:G1> * <var:M> ; <var:G3> := <var:G2> * <var:M> ; <var:G0> := <nat:4> ; <var:G1> := <var:G1> * <nat:2> ; <var:G2> := <var:G2> * <nat:2> ; <var:G3> := <var:G3> * <nat:1> ; <var:N> := <var:G3> <var:N> := <var:N> + <var:G2> <var:N> := <var:N> + <var:G1> <var:N> := <var:N> + <var:G0> {{ <var:N> = <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:G1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:G1> = <var:E> /\ <var:G2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:G1> = <var:E> /\ <var:G2> = <var:E> ^ <nat:2> /\ <var:G3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:G1> = <var:E> /\ <var:G2> = <var:E> ^ <nat:2> /\ <var:G3> = <var:E> ^ <nat:3> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:G1> = <nat:2> * <var:E> /\ <var:G2> = <var:E> ^ <nat:2> /\ <var:G3> = <var:E> ^ <nat:3> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:G1> = <nat:2> * <var:E> /\ <var:G2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:G3> = <var:E> ^ <nat:3> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:G1> = <nat:2> * <var:E> /\ <var:G2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:E> ^ <nat:3> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:G1> = <nat:2> * <var:E> /\ <var:G2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:G0> = <nat:4> /\ <var:N> = <nat:1> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:G1> = <nat:2> * <var:E> /\ <var:G0> = <nat:4> /\ <var:N> = <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:G0> = <nat:4> /\ <var:N> = <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:N> = <nat:1> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 