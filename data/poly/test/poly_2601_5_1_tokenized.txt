\begin{document} \begin{theorem} We define the following series of commands as follows \begin{verbatim} <var:N1> := <var:M> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:1> ; <var:J> := <var:N1> <var:J> := <var:J> + <var:N0> \end{verbatim} Given $ <var:M> = <var:V> $ --- given some natural numbers $ <var:V> $ --- before evaluating our list of instructions , it follows that we have $ <var:J> = <nat:1> * <var:V> + <nat:4> $ . \end{theorem} \begin{proof} The application of usual Hoare logic produces : \begin{eqnarray} \{ <var:M> = <var:V> \} \\ <var:N1> := <var:M> ; \\ \{ <var:M> = <var:V> \land <var:N1> = <var:V> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:M> = <var:V> \land <var:N1> = <var:V> \land <var:N0> = <nat:4> \} \\ <var:N1> := <var:N1> * <nat:1> ; \\ \{ <var:M> = <var:V> \land <var:N1> = <nat:1> \cdot <var:V> \land <var:N0> = <nat:4> \} \\ <var:J> := <var:N1> \\ \{ <var:M> = <var:V> \land <var:N0> = <nat:4> \land <var:J> = <nat:1> \cdot <var:V> \} \\ <var:J> := <var:J> + <var:N0> \\ \{ <var:M> = <var:V> \land <var:J> = <nat:1> \cdot <var:V> + <nat:4> \} \end{eqnarray} Considering the above , the set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:M> = <var:V> }} <var:N1> := <var:M> ; <var:N0> := <nat:4> ; <var:N1> := <var:N1> * <nat:1> ; <var:J> := <var:N1> <var:J> := <var:J> + <var:N0> {{ <var:J> = <nat:1> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:V> /\ <var:N1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:V> /\ <var:N1> = <var:V> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:V> /\ <var:N1> = <nat:1> * <var:V> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:V> /\ <var:N0> = <nat:4> /\ <var:J> = <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:V> /\ <var:J> = <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 