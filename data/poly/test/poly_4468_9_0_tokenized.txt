\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:2> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:U> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:U> ; <var:Z2> := <var:Z2> * <var:U> ; <var:H> := <var:Z2> ; <var:H> := <var:H> + <var:Z1> ; <var:H> := <var:H> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:U> = <var:J> $ before the execution of the program then we have $ <var:H> = <nat:4> \cdot <var:J> ^ <nat:2> + <nat:8> \cdot <var:J> + <nat:2> $ after code has executed . \end{theorem} \begin{proof} The way to prove correctness for our program can be accomplished with Hoare reasoning . Moving forward , we see the assignment line \verb | <var:Z0> := <nat:2> ; | . This statement takes $ \{ <var:U> = <var:J> \} $ toward the condition $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \} $ . Considering the next piece of code found in our set of instructions , we see the command \verb | <var:Z1> := <nat:8> ; | . This line transfers the condition $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \} $ toward $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \} $ . Observing the following line contained in our program , we see the variable binding code yielding $ <var:Z1> * <var:U> $ as $ <var:Z1>$ . This moves $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \} $ to the postcondition $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:J> \} $ . Stepping forward , we see the variable binding command \verb | <var:Z2> := <nat:4> ; | . This line moves $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:J> \} $ into $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:J> \land <var:Z2> = <nat:4> \} $ . After , we see the statement \verb | <var:Z2> := <var:Z2> * <var:U> ; | . This code redefines the condition $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:J> \land <var:Z2> = <nat:4> \} $ to the condition $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:J> \land <var:Z2> = <nat:4> \times <var:J> \} $ . This is rigorously given with the assignment inference rule found in standard Hoare reasoning . Focusing on the upcoming command contained in the set of commands , we see the statement giving $ <var:Z2> * <var:U> $ as $ <var:Z2>$ . This takes the precondition $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:J> \land <var:Z2> = <nat:4> \times <var:J> \} $ into the condition $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:J> \land <var:Z2> = <nat:4> \times <var:J> ^ <nat:2> \} $ . This is ensured using the assignment inference rule from typical Hoare techniques . Moving forward to the next step , we have the binding command \verb | <var:H> := <var:Z2> ; | . This code takes $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:J> \land <var:Z2> = <nat:4> \times <var:J> ^ <nat:2> \} $ into the condition $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:J> \land <var:H> = <nat:4> \times <var:J> ^ <nat:2> \} $ . This is deduced by the assignment inference rule given by standard Hoare techniques . Further , the variable update code defining $ <var:H> + <var:Z1> $ toward $ <var:H>$ . This moves $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:Z1> = <nat:8> \times <var:J> \land <var:H> = <nat:4> \times <var:J> ^ <nat:2> \} $ toward the postcondition $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:H> = <nat:4> \times <var:J> ^ <nat:2> + <nat:8> \times <var:J> \} $ . After , we have the variable assignmet line assigning $ <var:H> + <var:Z0$ toward $ <var:H>$ . This line advances $ \{ <var:U> = <var:J> \land <var:Z0> = <nat:2> \land <var:H> = <nat:4> \times <var:J> ^ <nat:2> + <nat:8> \times <var:J> \} $ into $ \{ <var:U> = <var:J> \land <var:H> = <nat:4> \times <var:J> ^ <nat:2> + <nat:8> \times <var:J> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z0> := <nat:2> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:U> ; <var:Z2> := <nat:4> ; <var:Z2> := <var:Z2> * <var:U> ; <var:Z2> := <var:Z2> * <var:U> ; <var:H> := <var:Z2> ; <var:H> := <var:H> + <var:Z1> ; <var:H> := <var:H> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:U> = <var:J> }} <def:poly> {{ <var:H> = <nat:4> * <var:J> ^ <nat:2> + <nat:8> * <var:J> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:J> /\ <var:Z2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:J> /\ <var:Z2> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:J> /\ <var:Z2> = <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:Z0> = <nat:2> /\ <var:Z1> = <nat:8> * <var:J> /\ <var:H> = <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:Z0> = <nat:2> /\ <var:H> = <nat:4> * <var:J> ^ <nat:2> + <nat:8> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:J> /\ <var:H> = <nat:4> * <var:J> ^ <nat:2> + <nat:8> * <var:J> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 