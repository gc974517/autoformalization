\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:f> := <nat:1> ; <var:f> := <nat:4> + <var:f> * <var:z> ; <var:f> := <nat:4> + <var:f> * <var:z> ; <var:f> := <nat:3> + <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> ; <var:f> := <nat:4> + <var:f> * <var:z> ; <var:f> := <nat:1> + <var:f> * <var:z> ; <var:f> := <var:f> * <var:z> ; <var:f> := <nat:4> + <var:f> * <var:z> ; <var:f> := <nat:3> + <var:f> * <var:z> ; <var:f> := <nat:1> + <var:f> * <var:z> ; <var:f> := <nat:4> + <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> \end{verbatim} Allowing it to be that $ <var:z> = <var:b> $ prior to executing the set of instructions , it must be that we have $ <var:f> = <nat:1> \times <var:b> ^ <nat:13> + <nat:4> \times <var:b> ^ <nat:12> + <nat:4> \times <var:b> ^ <nat:11> + <nat:3> \times <var:b> ^ <nat:10> + <nat:2> \times <var:b> ^ <nat:9> + <nat:2> \times <var:b> ^ <nat:8> + <nat:4> \times <var:b> ^ <nat:7> + <nat:1> \times <var:b> ^ <nat:6> + <nat:4> \times <var:b> ^ <nat:4> + <nat:3> \times <var:b> ^ <nat:3> + <nat:1> \times <var:b> ^ <nat:2> + <nat:4> \times <var:b> + <nat:2> $ after list of commands has executed . \end{theorem} \begin{proof} The flow of logic for the list of instructions is done with Hoare techniques . Shifting focus toward the proceeding step in our list of commands , the line letting $ <nat:1> $ to $ <var:f>$ . This statement takes the precondition $ \{ <var:z> = <var:b> \} $ to $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> \} $ . This is rigorously given by the assignment scheme found in typical Hoare reasoning . Advancing to the proceeding line of code contained in the series of commands , we see the assignment command defining $ <nat:4> + <var:f> * <var:z> $ to $ <var:f>$ . This statement advances $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> \} $ as $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> + <nat:4> \} $ . This is shown through the assignment inference rule defined by typical Hoare techniques . Focusing on the following piece of code in the code , the variable update line \verb | <var:f> := <nat:4> + <var:f> * <var:z> ; | . This takes the precondition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> + <nat:4> \} $ as $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> \} $ . Moving on , we see the environment update command giving $ <nat:3> + <var:f> * <var:z> $ into $ <var:f>$ . This statement advances the precondition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> \} $ as the postcondition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> \} $ . This is given by the assignment rule given by usual Hoare techniques . Advancing , the command \verb | <var:f> := <nat:2> + <var:f> * <var:z> ; | . This code forwards the condition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> \} $ toward the postcondition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:2> \} $ . This is deduced with the assignment scheme defined in typical Hoare reasoning . Moving onward , we see the code letting $ <nat:2> + <var:f> * <var:z> $ into $ <var:f>$ . This statement redefines the condition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:2> \} $ as the postcondition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:2> \} $ . This is guaranteed using the assignment inference rule found in typical Hoare techniques . Moving on , the variable binding line \verb | <var:f> := <nat:4> + <var:f> * <var:z> ; | . This code forwards $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:2> \} $ as $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:4> \} $ . Advancing on , we see the variable update code giving $ <nat:1> + <var:f> * <var:z> $ as $ <var:f>$ . This forwards $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:4> \} $ toward the condition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:1> \} $ . Taking another step toward the subsequent line contained in our code , we see the variable assignmet line defining $ <var:f> * <var:z> $ as $ <var:f>$ . This moves $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:1> \} $ toward the condition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + \} $ . This is given through the assignment rule given in Hoare reasoning . Keeping momentum , we see the variable update line giving $ <nat:4> + <var:f> * <var:z> $ to $ <var:f>$ . This statement redefines the condition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + \} $ as the postcondition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:3> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> \} $ . This is given with the assignment inference rule defined by Hoare reasoning . Following , we have the variable binding statement binding $ <nat:3> + <var:f> * <var:z> $ as $ <var:f>$ . This takes $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:3> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> \} $ to the condition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:10> + <nat:4> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:8> + <nat:3> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> + <nat:3> \} $ . This is guaranteed through the assignment inference rule given by Hoare techniques . Moving forward to the subsequent piece of code contained in our program , the statement \verb | <var:f> := <nat:1> + <var:f> * <var:z> ; | . This code forwards the precondition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:10> + <nat:4> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:8> + <nat:3> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> + <nat:3> \} $ into $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:11> + <nat:4> * <var:b> ^ <nat:10> + <nat:4> * <var:b> ^ <nat:9> + <nat:3> * <var:b> ^ <nat:8> + <nat:2> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:1> \} $ . This is ensured by the assignment inference rule in Hoare reasoning . Now , we see the variable assignmet line assigning $ <nat:4> + <var:f> * <var:z> $ into $ <var:f>$ . This command takes the condition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:11> + <nat:4> * <var:b> ^ <nat:10> + <nat:4> * <var:b> ^ <nat:9> + <nat:3> * <var:b> ^ <nat:8> + <nat:2> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:1> \} $ as the condition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:12> + <nat:4> * <var:b> ^ <nat:11> + <nat:4> * <var:b> ^ <nat:10> + <nat:3> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:8> + <nat:2> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:4> \} $ . This is deduced through the assignment inference rule defined by typical Hoare techniques . Shifting focus toward the following piece of code found in the program , we have the variable update line \verb | <var:f> := <nat:2> + <var:f> * <var:z> | . This command moves the precondition $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:12> + <nat:4> * <var:b> ^ <nat:11> + <nat:4> * <var:b> ^ <nat:10> + <nat:3> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:8> + <nat:2> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:4> \} $ to $ \{ <var:z> = <var:b> \land <var:f> = <nat:1> * <var:b> ^ <nat:13> + <nat:4> * <var:b> ^ <nat:12> + <nat:4> * <var:b> ^ <nat:11> + <nat:3> * <var:b> ^ <nat:10> + <nat:2> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:z> = <var:b> }} <var:f> := <nat:1> ; <var:f> := <nat:4> + <var:f> * <var:z> ; <var:f> := <nat:4> + <var:f> * <var:z> ; <var:f> := <nat:3> + <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> ; <var:f> := <nat:4> + <var:f> * <var:z> ; <var:f> := <nat:1> + <var:f> * <var:z> ; <var:f> := <var:f> * <var:z> ; <var:f> := <nat:4> + <var:f> * <var:z> ; <var:f> := <nat:3> + <var:f> * <var:z> ; <var:f> := <nat:1> + <var:f> * <var:z> ; <var:f> := <nat:4> + <var:f> * <var:z> ; <var:f> := <nat:2> + <var:f> * <var:z> {{ <var:f> = <nat:1> * <var:b> ^ <nat:13> + <nat:4> * <var:b> ^ <nat:12> + <nat:4> * <var:b> ^ <nat:11> + <nat:3> * <var:b> ^ <nat:10> + <nat:2> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:3> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> * <var:b> ^ <nat:10> + <nat:4> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:8> + <nat:3> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> * <var:b> ^ <nat:11> + <nat:4> * <var:b> ^ <nat:10> + <nat:4> * <var:b> ^ <nat:9> + <nat:3> * <var:b> ^ <nat:8> + <nat:2> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> * <var:b> ^ <nat:12> + <nat:4> * <var:b> ^ <nat:11> + <nat:4> * <var:b> ^ <nat:10> + <nat:3> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:8> + <nat:2> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:b> /\ <var:f> = <nat:1> * <var:b> ^ <nat:13> + <nat:4> * <var:b> ^ <nat:12> + <nat:4> * <var:b> ^ <nat:11> + <nat:3> * <var:b> ^ <nat:10> + <nat:2> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 