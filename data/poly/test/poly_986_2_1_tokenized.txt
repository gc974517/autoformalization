\begin{document} \begin{theorem} Consider a code as \begin{verbatim} <var:p0> := <nat:4> ; <var:z> := <var:p0> \end{verbatim} Allowing , with some $ <var:j> $ , that $ <var:U> = <var:j> $ before the evaluation of this set of instructions it holds that we see $ <var:z> = <nat:4> $ after series of commands exits . \end{theorem} \begin{proof} Showing our claim about correctness for this set of commands can be seen through the following decorated list of instructions . \begin{eqnarray} \{ <var:U> = <var:j> \} \\ <var:p0> := <nat:4> ; \\ \{ <var:U> = <var:j> \land <var:p0> = <nat:4> \} \\ <var:z> := <var:p0> \\ \{ <var:U> = <var:j> \land <var:z> = <nat:4> \} \end{eqnarray} Utilizing typical Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:U> = <var:j> }} <var:p0> := <nat:4> ; <var:z> := <var:p0> {{ <var:z> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:z> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 