\begin{document} \begin{theorem} We define a code segment as follows \begin{verbatim} <var:z1> := <var:e> ; <var:z2> := <var:z1> * <var:e> ; <var:z3> := <var:z2> * <var:e> ; <var:z4> := <var:z3> * <var:e> ; <var:z0> := <nat:4> ; <var:z1> := <var:z1> * <nat:2> ; <var:z3> := <var:z3> * <nat:2> ; <var:z4> := <var:z4> * <nat:2> ; <var:U> := <var:z4> <var:U> := <var:U> + <var:z3> <var:U> := <var:U> + <var:z1> <var:U> := <var:U> + <var:z0> \end{verbatim} Assuming $ <var:e> = <var:Y> $ prior to the evaluation of the code segment , then we have $ <var:U> = <nat:2> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:2> \cdot <var:Y> + <nat:4> $ once series of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:Y> \} \\ <var:z1> := <var:e> ; \\ \{ <var:e> = <var:Y> \land <var:z1> = <var:Y> \} \\ <var:z2> := <var:z1> * <var:e> ; \\ \{ <var:e> = <var:Y> \land <var:z1> = <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \} \end{eqnarray} Continuing the execution of our code yields : \begin{eqnarray} <var:z3> := <var:z2> * <var:e> ; \\ \{ <var:e> = <var:Y> \land <var:z1> = <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \land <var:z3> = <var:Y> ^ <nat:3> \} \\ <var:z4> := <var:z3> * <var:e> ; \\ \{ <var:e> = <var:Y> \land <var:z1> = <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \land <var:z3> = <var:Y> ^ <nat:3> \land <var:z4> = <var:Y> ^ <nat:4> \} \\ <var:z0> := <nat:4> ; \\ \{ <var:e> = <var:Y> \land <var:z1> = <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \land <var:z3> = <var:Y> ^ <nat:3> \land <var:z4> = <var:Y> ^ <nat:4> \land <var:z0> = <nat:4> \} \\ <var:z1> := <var:z1> * <nat:2> ; \\ \{ <var:e> = <var:Y> \land <var:z1> = <nat:2> \times <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \land <var:z3> = <var:Y> ^ <nat:3> \land <var:z4> = <var:Y> ^ <nat:4> \land <var:z0> = <nat:4> \} \\ <var:z3> := <var:z3> * <nat:2> ; \\ \{ <var:e> = <var:Y> \land <var:z1> = <nat:2> \times <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \land <var:z3> = <nat:2> \times <var:Y> ^ <nat:3> \land <var:z4> = <var:Y> ^ <nat:4> \land <var:z0> = <nat:4> \} \\ <var:z4> := <var:z4> * <nat:2> ; \\ \{ <var:e> = <var:Y> \land <var:z1> = <nat:2> \times <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \land <var:z3> = <nat:2> \times <var:Y> ^ <nat:3> \land <var:z4> = <nat:2> \times <var:Y> ^ <nat:4> \land <var:z0> = <nat:4> \} \\ <var:U> := <var:z4> \\ \{ <var:e> = <var:Y> \land <var:z1> = <nat:2> \times <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \land <var:z3> = <nat:2> \times <var:Y> ^ <nat:3> \land <var:z0> = <nat:4> \land <var:U> = <nat:2> \times <var:Y> ^ <nat:4> \} \\ <var:U> := <var:U> + <var:z3> \\ \{ <var:e> = <var:Y> \land <var:z1> = <nat:2> \times <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \land <var:z0> = <nat:4> \land <var:U> = <nat:2> \times <var:Y> ^ <nat:4> + <nat:2> \times <var:Y> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:z1> \\ \{ <var:e> = <var:Y> \land <var:z0> = <nat:4> \land <var:U> = <nat:2> \times <var:Y> ^ <nat:4> + <nat:2> \times <var:Y> ^ <nat:3> + <nat:2> \times <var:Y> \} \\ <var:U> := <var:U> + <var:z0> \\ \{ <var:e> = <var:Y> \land <var:U> = <nat:2> \times <var:Y> ^ <nat:4> + <nat:2> \times <var:Y> ^ <nat:3> + <nat:2> \times <var:Y> + <nat:4> \} \end{eqnarray} Utilizing typical Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <var:z4> : string := " <var:z4> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:e> = <var:Y> }} <var:z1> := <var:e> ; <var:z2> := <var:z1> * <var:e> ; <var:z3> := <var:z2> * <var:e> ; <var:z4> := <var:z3> * <var:e> ; <var:z0> := <nat:4> ; <var:z1> := <var:z1> * <nat:2> ; <var:z3> := <var:z3> * <nat:2> ; <var:z4> := <var:z4> * <nat:2> ; <var:U> := <var:z4> <var:U> := <var:U> + <var:z3> <var:U> := <var:U> + <var:z1> <var:U> := <var:U> + <var:z0> {{ <var:U> = <nat:2> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:z1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:z1> = <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:z1> = <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> /\ <var:z3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:z1> = <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> /\ <var:z3> = <var:Y> ^ <nat:3> /\ <var:z4> = <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:z1> = <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> /\ <var:z3> = <var:Y> ^ <nat:3> /\ <var:z4> = <var:Y> ^ <nat:4> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:z1> = <nat:2> * <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> /\ <var:z3> = <var:Y> ^ <nat:3> /\ <var:z4> = <var:Y> ^ <nat:4> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:z1> = <nat:2> * <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> /\ <var:z3> = <nat:2> * <var:Y> ^ <nat:3> /\ <var:z4> = <var:Y> ^ <nat:4> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:z1> = <nat:2> * <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> /\ <var:z3> = <nat:2> * <var:Y> ^ <nat:3> /\ <var:z4> = <nat:2> * <var:Y> ^ <nat:4> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:z1> = <nat:2> * <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> /\ <var:z3> = <nat:2> * <var:Y> ^ <nat:3> /\ <var:z0> = <nat:4> /\ <var:U> = <nat:2> * <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:z1> = <nat:2> * <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> /\ <var:z0> = <nat:4> /\ <var:U> = <nat:2> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:z0> = <nat:4> /\ <var:U> = <nat:2> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Y> /\ <var:U> = <nat:2> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:2> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 