\begin{document} \begin{theorem} Define a code in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:1> ; <var:c> := <var:s0> \end{verbatim} Assuming that we have $ <var:Y> = <var:S> $ prior to the execution of this program then we have $ <var:c> = <nat:1> $ . \end{theorem} \begin{proof} The course of logic for our set of instructions is given by typical Hoare techniques . Shifting focus toward the upcoming command contained in our list of commands , the environment update command assigning $ <nat:1> $ as $ <var:s0>$ . This code forwards the condition $ \{ <var:Y> = <var:S> \} $ to the postcondition $ \{ <var:Y> = <var:S> \land <var:s0> = <nat:1> \} $ . Advancing to the upcoming command seen in the program , we see the command binding $ <var:s0$ toward $ <var:c>$ . This statement takes the precondition $ \{ <var:Y> = <var:S> \land <var:s0> = <nat:1> \} $ to $ \{ <var:Y> = <var:S> \land <var:c> = <nat:1> \} $ . This is given with the assignment inference rule in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Y> = <var:S> }} <var:s0> := <nat:1> ; <var:c> := <var:s0> {{ <var:c> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:c> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 