\begin{document} \begin{theorem} We define the following segment of code : \begin{verbatim} <var:b0> := <nat:8> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:d> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:d> ; <var:b2> := <var:b2> * <var:d> ; <var:b3> := <nat:4> ; <var:b3> := <var:b3> * <var:d> ; <var:b3> := <var:b3> * <var:d> ; <var:b3> := <var:b3> * <var:d> ; <var:x> := <var:b3> ; <var:x> := <var:x> + <var:b2> ; <var:x> := <var:x> + <var:b1> ; <var:x> := <var:x> + <var:b0> \end{verbatim} Allow given some $ <var:y> \in \mathbb{Z}^+ $ that we have $ <var:d> = <var:y> $ ahead of running this set of commands it follows that we see $ <var:x> = <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:8> $ after series of commands has executed . \end{theorem} \begin{proof} Demonstrating correctness of this set of instructions is demonstrated using typical Hoare techniques . Immediately following , we have \begin{verbatim} { <var:d> = <var:y> } <var:b0> := <nat:8> { <var:d> = <var:y> \land <var:b0> = <nat:8> } { <var:d> = <var:y> \land <var:b0> = <nat:8> } <var:b1> := <nat:4> { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> } { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> } <var:b1> := <var:b1> * <var:d> { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> \times <var:y> } \end{verbatim} This is known to be sound by the binding inference rule from usual Hoare reasoning . Focusing on the upcoming commands in the list of instructions , we see \begin{verbatim} { <var:d> = <var:y> } <var:b0> := <nat:8> { <var:d> = <var:y> \land <var:b0> = <nat:8> } { <var:d> = <var:y> \land <var:b0> = <nat:8> } <var:b1> := <nat:4> { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> } { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> } <var:b1> := <var:b1> * <var:d> { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> \times <var:y> } { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> \times <var:y> } <var:b2> := <nat:1> { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> \times <var:y> \land <var:b2> = <nat:1> } { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> \times <var:y> \land <var:b2> = <nat:1> } <var:b2> := <var:b2> * <var:d> { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> \times <var:y> \land <var:b2> = <nat:1> \times <var:y> } { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> \times <var:y> \land <var:b2> = <nat:1> \times <var:y> } <var:b2> := <var:b2> * <var:d> { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> \times <var:y> \land <var:b2> = <nat:1> \times <var:y> ^ <nat:2> } { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> \times <var:y> \land <var:b2> = <nat:1> \times <var:y> ^ <nat:2> } <var:b3> := <nat:4> { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> \times <var:y> \land <var:b2> = <nat:1> \times <var:y> ^ <nat:2> \land <var:b3> = <nat:4> } \end{verbatim} Following , we have \begin{verbatim} { <var:d> = <var:y> } <var:b0> := <nat:8> { <var:d> = <var:y> \land <var:b0> = <nat:8> } { <var:d> = <var:y> \land <var:b0> = <nat:8> } <var:b1> := <nat:4> { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> } \end{verbatim} Advancing to the next step , we have \begin{verbatim} { <var:d> = <var:y> } <var:b0> := <nat:8> { <var:d> = <var:y> \land <var:b0> = <nat:8> } { <var:d> = <var:y> \land <var:b0> = <nat:8> } <var:b1> := <nat:4> { <var:d> = <var:y> \land <var:b0> = <nat:8> \land <var:b1> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:d> = <var:y> }} <var:b0> := <nat:8> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:d> ; <var:b2> := <nat:1> ; <var:b2> := <var:b2> * <var:d> ; <var:b2> := <var:b2> * <var:d> ; <var:b3> := <nat:4> ; <var:b3> := <var:b3> * <var:d> ; <var:b3> := <var:b3> * <var:d> ; <var:b3> := <var:b3> * <var:d> ; <var:x> := <var:b3> ; <var:x> := <var:x> + <var:b2> ; <var:x> := <var:x> + <var:b1> ; <var:x> := <var:x> + <var:b0> {{ <var:x> = <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:b0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:1> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:b3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:b3> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:b3> = <nat:4> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:b3> = <nat:4> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:4> * <var:y> /\ <var:b2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:x> = <nat:4> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:b0> = <nat:8> /\ <var:b1> = <nat:4> * <var:y> /\ <var:x> = <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:b0> = <nat:8> /\ <var:x> = <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:y> /\ <var:x> = <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 