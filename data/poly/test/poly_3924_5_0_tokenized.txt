\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:4> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:x> ; <var:i> := <var:Z1> ; <var:i> := <var:i> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:x> = <var:N> $ ahead of the evaluation of this program then we have $ <var:i> = <nat:1> \cdot <var:N> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this series of instructions is given with typical Hoare reasoning . Moving onward , the environment update line yielding $ <nat:4> $ toward $ <var:Z0>$ . This transfers the precondition $ \{ <var:x> = <var:N> \} $ toward the postcondition $ \{ <var:x> = <var:N> \land <var:Z0> = <nat:4> \} $ . Taking another step toward the next line in the program , we have the environment update line giving $ <nat:1> $ toward $ <var:Z1>$ . This command moves the condition $ \{ <var:x> = <var:N> \land <var:Z0> = <nat:4> \} $ as the condition $ \{ <var:x> = <var:N> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> \} $ . This is ensured using the assignment law given by Hoare logic . Considering the proceeding statement seen in the segment of code , the variable assignmet statement giving $ <var:Z1> * <var:x> $ toward $ <var:Z1>$ . This advances the condition $ \{ <var:x> = <var:N> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> \} $ as $ \{ <var:x> = <var:N> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> * <var:N> \} $ . This is shown through the assignment inference rule from typical Hoare logic . Moving forward , we have the environment update line binding $ <var:Z1> $ as $ <var:i>$ . This code moves the condition $ \{ <var:x> = <var:N> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> * <var:N> \} $ into $ \{ <var:x> = <var:N> \land <var:Z0> = <nat:4> \land <var:i> = <nat:1> * <var:N> \} $ . Jumping to the subsequent line found in the series of commands , we have the binding statement assigning $ <var:i> + <var:Z0$ into $ <var:i>$ . This line redefines the precondition $ \{ <var:x> = <var:N> \land <var:Z0> = <nat:4> \land <var:i> = <nat:1> * <var:N> \} $ as the condition $ \{ <var:x> = <var:N> \land <var:i> = <nat:1> * <var:N> + <nat:4> \} $ . This is known to be sound by the assignment rule defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z0> := <nat:4> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:x> ; <var:i> := <var:Z1> ; <var:i> := <var:i> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:x> = <var:N> }} <def:poly> {{ <var:i> = <nat:1> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:Z0> = <nat:4> /\ <var:i> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:N> /\ <var:i> = <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 