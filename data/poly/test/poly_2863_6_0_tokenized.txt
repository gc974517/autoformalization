\begin{document} \begin{theorem} Consider the following program in \emph{Imp} as \begin{verbatim} <var:m0> := <nat:7> ; <var:m2> := <nat:4> ; <var:m2> := <var:m2> * <var:G> ; <var:m2> := <var:m2> * <var:G> ; <var:X> := <var:m2> ; <var:X> := <var:X> + <var:m0> \end{verbatim} Allow that we have $ <var:G> = <var:L> $ ahead of evaluating our list of instructions then we have $ <var:X> = <nat:4> \times <var:L> ^ <nat:2> + <nat:7> $ once series of commands has exited . \end{theorem} \begin{proof} The course of logic for our list of instructions is demonstrated through Hoare logic . Advancing to the next step , we have \begin{verbatim} { <var:G> = <var:L> } <var:m0> := <nat:7> { <var:G> = <var:L> \land <var:m0> = <nat:7> } { <var:G> = <var:L> \land <var:m0> = <nat:7> } <var:m2> := <nat:4> { <var:G> = <var:L> \land <var:m0> = <nat:7> \land <var:m2> = <nat:4> } { <var:G> = <var:L> \land <var:m0> = <nat:7> \land <var:m2> = <nat:4> } <var:m2> := <var:m2> * <var:G> { <var:G> = <var:L> \land <var:m0> = <nat:7> \land <var:m2> = <nat:4> \times <var:L> } \end{verbatim} This is rigorously given with the scheme in usual Hoare logic . Honing in on the following steps contained in our series of commands , \begin{verbatim} { <var:G> = <var:L> } <var:m0> := <nat:7> { <var:G> = <var:L> \land <var:m0> = <nat:7> } { <var:G> = <var:L> \land <var:m0> = <nat:7> } <var:m2> := <nat:4> { <var:G> = <var:L> \land <var:m0> = <nat:7> \land <var:m2> = <nat:4> } \end{verbatim} Paying attention to the subsequent bit of code in our list of instructions , we see \begin{verbatim} { <var:G> = <var:L> } <var:m0> := <nat:7> { <var:G> = <var:L> \land <var:m0> = <nat:7> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:G> = <var:L> }} <var:m0> := <nat:7> ; <var:m2> := <nat:4> ; <var:m2> := <var:m2> * <var:G> ; <var:m2> := <var:m2> * <var:G> ; <var:X> := <var:m2> ; <var:X> := <var:X> + <var:m0> {{ <var:X> = <nat:4> * <var:L> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:m0> = <nat:7> /\ <var:m2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:m0> = <nat:7> /\ <var:m2> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:m0> = <nat:7> /\ <var:m2> = <nat:4> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:m0> = <nat:7> /\ <var:X> = <nat:4> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:L> /\ <var:X> = <nat:4> * <var:L> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 