\begin{document} \begin{theorem} Let the following series of instructions : \begin{verbatim} <var:P0> := <nat:9> ; <var:P1> := <nat:6> ; <var:P1> := <var:P1> * <var:H> ; <var:b> := <var:P1> ; <var:b> := <var:b> + <var:P0> \end{verbatim} Assuming it to be that $ <var:H> = <var:q> $ before the execution of this set of commands it holds that we see $ <var:b> = <nat:6> * <var:q> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands is demonstrated with Hoare techniques . Looking at the following line of code contained in our series of commands , we see the binding line binding $ <nat:9> $ as $ <var:P0>$ . This redefines the precondition $ \{ <var:H> = <var:q> \} $ into $ \{ <var:H> = <var:q> \land <var:P0> = <nat:9> \} $ . This is guaranteed through the assignment scheme defined by Hoare reasoning . Observing the upcoming line found in our code segment , the binding command \verb | <var:P1> := <nat:6> ; | . This advances the precondition $ \{ <var:H> = <var:q> \land <var:P0> = <nat:9> \} $ to $ \{ <var:H> = <var:q> \land <var:P0> = <nat:9> \land <var:P1> = <nat:6> \} $ . Moving forward , the variable update line \verb | <var:P1> := <var:P1> * <var:H> ; | . This code forwards $ \{ <var:H> = <var:q> \land <var:P0> = <nat:9> \land <var:P1> = <nat:6> \} $ toward the postcondition $ \{ <var:H> = <var:q> \land <var:P0> = <nat:9> \land <var:P1> = <nat:6> \times <var:q> \} $ . Going to the next step , we have the variable update line letting $ <var:P1> $ as $ <var:b>$ . This forwards the condition $ \{ <var:H> = <var:q> \land <var:P0> = <nat:9> \land <var:P1> = <nat:6> \times <var:q> \} $ toward the postcondition $ \{ <var:H> = <var:q> \land <var:P0> = <nat:9> \land <var:b> = <nat:6> \times <var:q> \} $ . This is given with the assignment law from typical Hoare logic . Following , the command \verb | <var:b> := <var:b> + <var:P0> | . This command forwards $ \{ <var:H> = <var:q> \land <var:P0> = <nat:9> \land <var:b> = <nat:6> \times <var:q> \} $ as the condition $ \{ <var:H> = <var:q> \land <var:b> = <nat:6> \times <var:q> + <nat:9> \} $ . This is given using the assignment scheme in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:H> = <var:q> }} <var:P0> := <nat:9> ; <var:P1> := <nat:6> ; <var:P1> := <var:P1> * <var:H> ; <var:b> := <var:P1> ; <var:b> := <var:b> + <var:P0> {{ <var:b> = <nat:6> * <var:q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:P0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:P0> = <nat:9> /\ <var:P1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:P0> = <nat:9> /\ <var:P1> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:P0> = <nat:9> /\ <var:b> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:q> /\ <var:b> = <nat:6> * <var:q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 