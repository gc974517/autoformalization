\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:2> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:k> ; <var:r> := <var:g1> ; <var:r> := <var:r> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Allow given any $ <var:U> \in \mathbb{N} $ it to hold that $ <var:k> = <var:U> $ before evaluating our code segment it follows that $ <var:r> = <nat:7> \cdot <var:U> + <nat:2> $ when series of instructions has exited . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands can be given using usual Hoare logic . Honing in on the next bit of code seen in our list of commands , we see the variable binding command \verb | <var:g0> := <nat:2> ; | . This forwards the precondition $ \{ <var:k> = <var:U> \} $ toward $ \{ <var:k> = <var:U> \land <var:g0> = <nat:2> \} $ . This is sound with the assignment rule given by Hoare logic . Going to the next step , the variable update command binding $ <nat:7> $ into $ <var:g1>$ . This advances the condition $ \{ <var:k> = <var:U> \land <var:g0> = <nat:2> \} $ as $ \{ <var:k> = <var:U> \land <var:g0> = <nat:2> \land <var:g1> = <nat:7> \} $ . Moving on to the following line contained in the set of commands , we have the binding code assigning $ <var:g1> * <var:k> $ into $ <var:g1>$ . This statement takes the condition $ \{ <var:k> = <var:U> \land <var:g0> = <nat:2> \land <var:g1> = <nat:7> \} $ toward the condition $ \{ <var:k> = <var:U> \land <var:g0> = <nat:2> \land <var:g1> = <nat:7> \times <var:U> \} $ . This is ensured by the assignment scheme defined by typical Hoare techniques . After , the variable binding statement \verb | <var:r> := <var:g1> ; | . This takes the precondition $ \{ <var:k> = <var:U> \land <var:g0> = <nat:2> \land <var:g1> = <nat:7> \times <var:U> \} $ as the postcondition $ \{ <var:k> = <var:U> \land <var:g0> = <nat:2> \land <var:r> = <nat:7> \times <var:U> \} $ . This is ensured with the assignment law given by Hoare reasoning . Advancing on , we have the line letting $ <var:r> + <var:g0$ toward $ <var:r>$ . This command moves $ \{ <var:k> = <var:U> \land <var:g0> = <nat:2> \land <var:r> = <nat:7> \times <var:U> \} $ toward $ \{ <var:k> = <var:U> \land <var:r> = <nat:7> \times <var:U> + <nat:2> \} $ . This is given through the assignment scheme defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:2> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:k> ; <var:r> := <var:g1> ; <var:r> := <var:r> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:k> = <var:U> }} <def:poly> {{ <var:r> = <nat:7> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:g0> = <nat:2> /\ <var:r> = <nat:7> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:U> /\ <var:r> = <nat:7> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 