\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:3> ; <var:j1> := <nat:6> ; <var:j1> := <var:j1> * <var:s> ; <var:j2> := <nat:7> ; <var:j2> := <var:j2> * <var:s> ; <var:j2> := <var:j2> * <var:s> ; <var:j3> := <nat:7> ; <var:j3> := <var:j3> * <var:s> ; <var:j3> := <var:j3> * <var:s> ; <var:j3> := <var:j3> * <var:s> ; <var:L> := <var:j3> ; <var:L> := <var:L> + <var:j2> ; <var:L> := <var:L> + <var:j1> ; <var:L> := <var:L> + <var:j0> \end{verbatim} Allow $ <var:s> = <var:n> $ ( for all whole numbers $ <var:n> $ ) prior to interpreting the series of instructions , it holds that $ <var:L> = <nat:7> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques gives : \begin{eqnarray} \{ <var:s> = <var:n> \} \\ <var:j0> := <nat:3> ; \\ \{ <var:s> = <var:n> \land <var:j0> = <nat:3> \} \\ <var:j1> := <nat:6> ; \\ \{ <var:s> = <var:n> \land <var:j0> = <nat:3> \land <var:j1> = <nat:6> \} \\ <var:j1> := <var:j1> * <var:s> ; \\ \{ <var:s> = <var:n> \land <var:j0> = <nat:3> \land <var:j1> = <nat:6> \times <var:n> \} \\ <var:j2> := <nat:7> ; \\ \{ <var:s> = <var:n> \land <var:j0> = <nat:3> \land <var:j1> = <nat:6> \times <var:n> \land <var:j2> = <nat:7> \} \\ <var:j2> := <var:j2> * <var:s> ; \\ \{ <var:s> = <var:n> \land <var:j0> = <nat:3> \land <var:j1> = <nat:6> \times <var:n> \land <var:j2> = <nat:7> \times <var:n> \} \\ <var:j2> := <var:j2> * <var:s> ; \\ \{ <var:s> = <var:n> \land <var:j0> = <nat:3> \land <var:j1> = <nat:6> \times <var:n> \land <var:j2> = <nat:7> \times <var:n> ^ <nat:2> \} \\ <var:j3> := <nat:7> ; \\ \{ <var:s> = <var:n> \land <var:j0> = <nat:3> \land <var:j1> = <nat:6> \times <var:n> \land <var:j2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:j3> = <nat:7> \} \\ <var:j3> := <var:j3> * <var:s> ; \\ \{ <var:s> = <var:n> \land <var:j0> = <nat:3> \land <var:j1> = <nat:6> \times <var:n> \land <var:j2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:j3> = <nat:7> \times <var:n> \} \\ <var:j3> := <var:j3> * <var:s> ; \\ \{ <var:s> = <var:n> \land <var:j0> = <nat:3> \land <var:j1> = <nat:6> \times <var:n> \land <var:j2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:j3> = <nat:7> \times <var:n> ^ <nat:2> \} \\ <var:j3> := <var:j3> * <var:s> ; \\ \{ <var:s> = <var:n> \land <var:j0> = <nat:3> \land <var:j1> = <nat:6> \times <var:n> \land <var:j2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:j3> = <nat:7> \times <var:n> ^ <nat:3> \} \\ <var:L> := <var:j3> ; \\ \{ <var:s> = <var:n> \land <var:j0> = <nat:3> \land <var:j1> = <nat:6> \times <var:n> \land <var:j2> = <nat:7> \times <var:n> ^ <nat:2> \land <var:L> = <nat:7> \times <var:n> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:j2> ; \\ \{ <var:s> = <var:n> \land <var:j0> = <nat:3> \land <var:j1> = <nat:6> \times <var:n> \land <var:L> = <nat:7> \times <var:n> ^ <nat:3> + <nat:7> \times <var:n> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:j1> ; \\ \{ <var:s> = <var:n> \land <var:j0> = <nat:3> \land <var:L> = <nat:7> \times <var:n> ^ <nat:3> + <nat:7> \times <var:n> ^ <nat:2> + <nat:6> \times <var:n> \} \\ <var:L> := <var:L> + <var:j0> \\ \{ <var:s> = <var:n> \land <var:L> = <nat:7> \times <var:n> ^ <nat:3> + <nat:7> \times <var:n> ^ <nat:2> + <nat:6> \times <var:n> + <nat:3> \} \end{eqnarray} As a result , the code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:s> = <var:n> }} <var:j0> := <nat:3> ; <var:j1> := <nat:6> ; <var:j1> := <var:j1> * <var:s> ; <var:j2> := <nat:7> ; <var:j2> := <var:j2> * <var:s> ; <var:j2> := <var:j2> * <var:s> ; <var:j3> := <nat:7> ; <var:j3> := <var:j3> * <var:s> ; <var:j3> := <var:j3> * <var:s> ; <var:j3> := <var:j3> * <var:s> ; <var:L> := <var:j3> ; <var:L> := <var:L> + <var:j2> ; <var:L> := <var:L> + <var:j1> ; <var:L> := <var:L> + <var:j0> {{ <var:L> = <nat:7> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:6> * <var:n> /\ <var:j2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:6> * <var:n> /\ <var:j2> = <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:6> * <var:n> /\ <var:j2> = <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:6> * <var:n> /\ <var:j2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:j3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:6> * <var:n> /\ <var:j2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:j3> = <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:6> * <var:n> /\ <var:j2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:j3> = <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:6> * <var:n> /\ <var:j2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:j3> = <nat:7> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:6> * <var:n> /\ <var:j2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:L> = <nat:7> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:6> * <var:n> /\ <var:L> = <nat:7> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:j0> = <nat:3> /\ <var:L> = <nat:7> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:6> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:L> = <nat:7> * <var:n> ^ <nat:3> + <nat:7> * <var:n> ^ <nat:2> + <nat:6> * <var:n> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 