\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:3> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:t> ; <var:e2> := <nat:2> ; <var:e2> := <var:e2> * <var:t> ; <var:e2> := <var:e2> * <var:t> ; <var:I> := <var:e2> ; <var:I> := <var:I> + <var:e1> ; <var:I> := <var:I> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> . Allowing ( for natural coefficients $ <var:E> $ ) it to hold that $ <var:t> = <var:E> $ ahead of interpreting this set of commands it follows that we have $ <var:I> = <nat:2> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is evident through Hoare reasoning . Moving onward , the environment update line defining $ <nat:3> $ as $ <var:e0>$ . This takes $ \{ <var:t> = <var:E> \} $ as the postcondition $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \} $ . This is ensured using the assignment rule defined in Hoare techniques . Jumping to the proceeding statement seen in our list of commands , the command \verb | <var:e1> := <nat:3> ; | . This transfers the precondition $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \} $ into the condition $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \} $ . Advancing on , we see the variable assignmet command assigning $ <var:e1> * <var:t> $ toward $ <var:e1>$ . This command advances $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \} $ as the condition $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \times <var:E> \} $ . This is shown to be logically sound by the assignment law given by Hoare reasoning . Moving forward , the line \verb | <var:e2> := <nat:2> ; | . This advances $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \times <var:E> \} $ toward the condition $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \times <var:E> \land <var:e2> = <nat:2> \} $ . Moving forward , we have the environment update code \verb | <var:e2> := <var:e2> * <var:t> ; | . This command forwards $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \times <var:E> \land <var:e2> = <nat:2> \} $ into the condition $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \times <var:E> \land <var:e2> = <nat:2> \times <var:E> \} $ . Advancing to the subsequent command in our code segment , the binding statement \verb | <var:e2> := <var:e2> * <var:t> ; | . This redefines $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \times <var:E> \land <var:e2> = <nat:2> \times <var:E> \} $ into the condition $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \times <var:E> \land <var:e2> = <nat:2> \times <var:E> ^ <nat:2> \} $ . This is shown with the assignment inference rule defined in standard Hoare reasoning . Advancing , we see the binding line \verb | <var:I> := <var:e2> ; | . This advances the condition $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \times <var:E> \land <var:e2> = <nat:2> \times <var:E> ^ <nat:2> \} $ to the postcondition $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \times <var:E> \land <var:I> = <nat:2> \times <var:E> ^ <nat:2> \} $ . Advancing , we have the variable binding statement defining $ <var:I> + <var:e1> $ as $ <var:I>$ . This line redefines $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:e1> = <nat:3> \times <var:E> \land <var:I> = <nat:2> \times <var:E> ^ <nat:2> \} $ toward $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:I> = <nat:2> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> \} $ . After , the variable assignmet code letting $ <var:I> + <var:e0$ toward $ <var:I>$ . This advances the precondition $ \{ <var:t> = <var:E> \land <var:e0> = <nat:3> \land <var:I> = <nat:2> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> \} $ into the postcondition $ \{ <var:t> = <var:E> \land <var:I> = <nat:2> \times <var:E> ^ <nat:2> + <nat:3> \times <var:E> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <def:poly> := <var:e0> := <nat:3> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:t> ; <var:e2> := <nat:2> ; <var:e2> := <var:e2> * <var:t> ; <var:e2> := <var:e2> * <var:t> ; <var:I> := <var:e2> ; <var:I> := <var:I> + <var:e1> ; <var:I> := <var:I> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:t> = <var:E> }} <def:poly> {{ <var:I> = <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:E> /\ <var:e2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:E> /\ <var:e2> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:E> /\ <var:e2> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:e0> = <nat:3> /\ <var:e1> = <nat:3> * <var:E> /\ <var:I> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:e0> = <nat:3> /\ <var:I> = <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:E> /\ <var:I> = <nat:2> * <var:E> ^ <nat:2> + <nat:3> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 