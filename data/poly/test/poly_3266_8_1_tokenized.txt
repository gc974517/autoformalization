\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T1> := <var:O> ; <var:T2> := <var:T1> * <var:O> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:9> ; <var:W> := <var:T2> <var:W> := <var:W> + <var:T1> <var:W> := <var:W> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:O> = <var:j> $ before executing the code , then $ <var:W> = <nat:9> \cdot <var:j> ^ <nat:2> + <nat:7> \cdot <var:j> + <nat:1> $ once code has finished . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is done with the below decorated series of commands . \begin{eqnarray} \{ <var:O> = <var:j> \} \\ <var:T1> := <var:O> ; \\ \{ <var:O> = <var:j> \land <var:T1> = <var:j> \} \\ <var:T2> := <var:T1> * <var:O> ; \\ \{ <var:O> = <var:j> \land <var:T1> = <var:j> \land <var:T2> = <var:j> ^ <nat:2> \} \\ <var:T0> := <nat:1> ; \\ \{ <var:O> = <var:j> \land <var:T1> = <var:j> \land <var:T2> = <var:j> ^ <nat:2> \land <var:T0> = <nat:1> \} \\ <var:T1> := <var:T1> * <nat:7> ; \\ \{ <var:O> = <var:j> \land <var:T1> = <nat:7> * <var:j> \land <var:T2> = <var:j> ^ <nat:2> \land <var:T0> = <nat:1> \} \\ <var:T2> := <var:T2> * <nat:9> ; \\ \{ <var:O> = <var:j> \land <var:T1> = <nat:7> * <var:j> \land <var:T2> = <nat:9> * <var:j> ^ <nat:2> \land <var:T0> = <nat:1> \} \\ <var:W> := <var:T2> \\ \{ <var:O> = <var:j> \land <var:T1> = <nat:7> * <var:j> \land <var:T0> = <nat:1> \land <var:W> = <nat:9> * <var:j> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:T1> \\ \{ <var:O> = <var:j> \land <var:T0> = <nat:1> \land <var:W> = <nat:9> * <var:j> ^ <nat:2> + <nat:7> * <var:j> \} \\ <var:W> := <var:W> + <var:T0> \\ \{ <var:O> = <var:j> \land <var:W> = <nat:9> * <var:j> ^ <nat:2> + <nat:7> * <var:j> + <nat:1> \} \end{eqnarray} Utilizing standard Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T1> := <var:O> ; <var:T2> := <var:T1> * <var:O> ; <var:T0> := <nat:1> ; <var:T1> := <var:T1> * <nat:7> ; <var:T2> := <var:T2> * <nat:9> ; <var:W> := <var:T2> <var:W> := <var:W> + <var:T1> <var:W> := <var:W> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:O> = <var:j> }} <def:poly> {{ <var:W> = <nat:9> * <var:j> ^ <nat:2> + <nat:7> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:T1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:T1> = <var:j> /\ <var:T2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:T1> = <var:j> /\ <var:T2> = <var:j> ^ <nat:2> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:T1> = <nat:7> * <var:j> /\ <var:T2> = <var:j> ^ <nat:2> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:T1> = <nat:7> * <var:j> /\ <var:T2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:T0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:T1> = <nat:7> * <var:j> /\ <var:T0> = <nat:1> /\ <var:W> = <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:T0> = <nat:1> /\ <var:W> = <nat:9> * <var:j> ^ <nat:2> + <nat:7> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:W> = <nat:9> * <var:j> ^ <nat:2> + <nat:7> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 