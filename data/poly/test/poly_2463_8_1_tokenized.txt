\begin{document} \begin{theorem} We define the following series of instructions as \begin{verbatim} <var:q1> := <var:x> ; <var:q2> := <var:q1> * <var:x> ; <var:q0> := <nat:6> ; <var:q1> := <var:q1> * <nat:7> ; <var:q2> := <var:q2> * <nat:2> ; <var:Z> := <var:q2> <var:Z> := <var:Z> + <var:q1> <var:Z> := <var:Z> + <var:q0> \end{verbatim} Assuming that $ <var:x> = <var:w> $ prior to evaluating the code , it holds that we see $ <var:Z> = <nat:2> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:6> $ . \end{theorem} \begin{proof} See that this decorated code segment . \begin{eqnarray} \{ <var:x> = <var:w> \} \\ <var:q1> := <var:x> ; \\ \{ <var:x> = <var:w> \land <var:q1> = <var:w> \} \\ <var:q2> := <var:q1> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:q1> = <var:w> \land <var:q2> = <var:w> ^ <nat:2> \} \\ <var:q0> := <nat:6> ; \\ \{ <var:x> = <var:w> \land <var:q1> = <var:w> \land <var:q2> = <var:w> ^ <nat:2> \land <var:q0> = <nat:6> \} \\ <var:q1> := <var:q1> * <nat:7> ; \\ \{ <var:x> = <var:w> \land <var:q1> = <nat:7> * <var:w> \land <var:q2> = <var:w> ^ <nat:2> \land <var:q0> = <nat:6> \} \\ <var:q2> := <var:q2> * <nat:2> ; \\ \{ <var:x> = <var:w> \land <var:q1> = <nat:7> * <var:w> \land <var:q2> = <nat:2> * <var:w> ^ <nat:2> \land <var:q0> = <nat:6> \} \\ <var:Z> := <var:q2> \\ \{ <var:x> = <var:w> \land <var:q1> = <nat:7> * <var:w> \land <var:q0> = <nat:6> \land <var:Z> = <nat:2> * <var:w> ^ <nat:2> \} \end{eqnarray} Allowing evaluating the code segment gives us : \begin{eqnarray} <var:Z> := <var:Z> + <var:q1> \\ \{ <var:x> = <var:w> \land <var:q0> = <nat:6> \land <var:Z> = <nat:2> * <var:w> ^ <nat:2> + <nat:7> * <var:w> \} \\ <var:Z> := <var:Z> + <var:q0> \\ \{ <var:x> = <var:w> \land <var:Z> = <nat:2> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:6> \} \end{eqnarray} Utilizing usual Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:x> = <var:w> }} <var:q1> := <var:x> ; <var:q2> := <var:q1> * <var:x> ; <var:q0> := <nat:6> ; <var:q1> := <var:q1> * <nat:7> ; <var:q2> := <var:q2> * <nat:2> ; <var:Z> := <var:q2> <var:Z> := <var:Z> + <var:q1> <var:Z> := <var:Z> + <var:q0> {{ <var:Z> = <nat:2> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:q1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:q1> = <var:w> /\ <var:q2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:q1> = <var:w> /\ <var:q2> = <var:w> ^ <nat:2> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:q1> = <nat:7> * <var:w> /\ <var:q2> = <var:w> ^ <nat:2> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:q1> = <nat:7> * <var:w> /\ <var:q2> = <nat:2> * <var:w> ^ <nat:2> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:q1> = <nat:7> * <var:w> /\ <var:q0> = <nat:6> /\ <var:Z> = <nat:2> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:q0> = <nat:6> /\ <var:Z> = <nat:2> * <var:w> ^ <nat:2> + <nat:7> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:Z> = <nat:2> * <var:w> ^ <nat:2> + <nat:7> * <var:w> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 