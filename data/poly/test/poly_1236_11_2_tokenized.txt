\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:T> := <nat:1> ; <var:T> := <nat:4> + <var:T> * <var:i> ; <var:T> := <nat:4> + <var:T> * <var:i> ; <var:T> := <nat:4> + <var:T> * <var:i> ; <var:T> := <var:T> * <var:i> ; <var:T> := <nat:4> + <var:T> * <var:i> ; <var:T> := <var:T> * <var:i> ; <var:T> := <nat:2> + <var:T> * <var:i> ; <var:T> := <nat:2> + <var:T> * <var:i> ; <var:T> := <nat:4> + <var:T> * <var:i> ; <var:T> := <nat:4> + <var:T> * <var:i> \end{verbatim} \end{definition} \begin{theorem} Let the following set of commands <def:poly> . Allow --- with some positive coefficients $ <var:j> $ --- that we have $ <var:i> = <var:j> $ ahead of the execution of the program , then $ <var:T> = <nat:1> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> $ . \end{theorem} \begin{proof} The proof of this list of instructions is done by the below decorated segment of code . \begin{eqnarray} \{ <var:i> = <var:j> \} \\ <var:T> := <nat:1> ; \\ \{ <var:i> = <var:j> \land <var:T> = <nat:1> \} \\ <var:T> := <nat:4> + <var:T> * <var:i> ; \\ \{ <var:i> = <var:j> \land <var:T> = <nat:1> \times <var:j> + <nat:4> \} \\ <var:T> := <nat:4> + <var:T> * <var:i> ; \\ \{ <var:i> = <var:j> \land <var:T> = <nat:1> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + <nat:4> \} \\ <var:T> := <nat:4> + <var:T> * <var:i> ; \\ \{ <var:i> = <var:j> \land <var:T> = <nat:1> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + <nat:4> \} \\ <var:T> := <var:T> * <var:i> ; \\ \{ <var:i> = <var:j> \land <var:T> = <nat:1> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + \} \\ <var:T> := <nat:4> + <var:T> * <var:i> ; \\ \{ <var:i> = <var:j> \land <var:T> = <nat:1> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:4> \} \\ <var:T> := <var:T> * <var:i> ; \\ \{ <var:i> = <var:j> \land <var:T> = <nat:1> \times <var:j> ^ <nat:6> + <nat:4> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> + \} \\ <var:T> := <nat:2> + <var:T> * <var:i> ; \\ \{ <var:i> = <var:j> \land <var:T> = <nat:1> \times <var:j> ^ <nat:7> + <nat:4> \times <var:j> ^ <nat:6> + <nat:4> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:2> + <nat:2> \} \\ <var:T> := <nat:2> + <var:T> * <var:i> ; \\ \{ <var:i> = <var:j> \land <var:T> = <nat:1> \times <var:j> ^ <nat:8> + <nat:4> \times <var:j> ^ <nat:7> + <nat:4> \times <var:j> ^ <nat:6> + <nat:4> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:3> + <nat:2> \times <var:j> + <nat:2> \} \\ <var:T> := <nat:4> + <var:T> * <var:i> ; \\ \{ <var:i> = <var:j> \land <var:T> = <nat:1> \times <var:j> ^ <nat:9> + <nat:4> \times <var:j> ^ <nat:8> + <nat:4> \times <var:j> ^ <nat:7> + <nat:4> \times <var:j> ^ <nat:6> + <nat:4> \times <var:j> ^ <nat:4> + <nat:2> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> + <nat:4> \} \\ <var:T> := <nat:4> + <var:T> * <var:i> \\ \{ <var:i> = <var:j> \land <var:T> = <nat:1> \times <var:j> ^ <nat:10> + <nat:4> \times <var:j> ^ <nat:9> + <nat:4> \times <var:j> ^ <nat:8> + <nat:4> \times <var:j> ^ <nat:7> + <nat:4> \times <var:j> ^ <nat:5> + <nat:2> \times <var:j> ^ <nat:3> + <nat:2> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + <nat:4> \} \end{eqnarray} The application of Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:T> := <nat:1> ; <var:T> := <nat:4> + <var:T> * <var:i> ; <var:T> := <nat:4> + <var:T> * <var:i> ; <var:T> := <nat:4> + <var:T> * <var:i> ; <var:T> := <var:T> * <var:i> ; <var:T> := <nat:4> + <var:T> * <var:i> ; <var:T> := <var:T> * <var:i> ; <var:T> := <nat:2> + <var:T> * <var:i> ; <var:T> := <nat:2> + <var:T> * <var:i> ; <var:T> := <nat:4> + <var:T> * <var:i> ; <var:T> := <nat:4> + <var:T> * <var:i> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:i> = <var:j> }} <def:poly> {{ <var:T> = <nat:1> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:T> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:T> = <nat:1> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:T> = <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:T> = <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:T> = <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:T> = <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:T> = <nat:1> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:T> = <nat:1> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:T> = <nat:1> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:T> = <nat:1> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:j> /\ <var:T> = <nat:1> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 