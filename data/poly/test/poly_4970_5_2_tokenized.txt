\begin{document} \begin{theorem} Consider the following set of commands : \begin{verbatim} <var:e> := <nat:4> ; <var:e> := <nat:4> + <var:e> * <var:P> ; <var:e> := <nat:3> + <var:e> * <var:P> ; <var:e> := <nat:3> + <var:e> * <var:P> ; <var:e> := <nat:3> + <var:e> * <var:P> \end{verbatim} Assume it to be that $ <var:P> = <var:o> $ ahead of interpreting this code segment it follows that $ <var:e> = <nat:4> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:3> $ after list of instructions has exited . \end{theorem} \begin{proof} The proof of our program is evident with standard Hoare reasoning . Looking at the next statement in the code segment , we see the environment update code defining $ <nat:4> $ as $ <var:e>$ . This transfers the precondition $ \{ <var:P> = <var:o> \} $ to the postcondition $ \{ <var:P> = <var:o> \land <var:e> = <nat:4> \} $ . Moving forward to the upcoming piece of code contained in our list of commands , the variable binding statement \verb | <var:e> := <nat:4> + <var:e> * <var:P> ; | . This line advances the precondition $ \{ <var:P> = <var:o> \land <var:e> = <nat:4> \} $ to the condition $ \{ <var:P> = <var:o> \land <var:e> = <nat:4> \cdot <var:o> + <nat:4> \} $ . Advancing , we see the variable update line \verb | <var:e> := <nat:3> + <var:e> * <var:P> ; | . This forwards the precondition $ \{ <var:P> = <var:o> \land <var:e> = <nat:4> \cdot <var:o> + <nat:4> \} $ as the condition $ \{ <var:P> = <var:o> \land <var:e> = <nat:4> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:3> \} $ . Focusing on the next command contained in our code segment , we see the assignment command yielding $ <nat:3> + <var:e> * <var:P> $ toward $ <var:e>$ . This statement redefines the precondition $ \{ <var:P> = <var:o> \land <var:e> = <nat:4> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:3> \} $ toward the postcondition $ \{ <var:P> = <var:o> \land <var:e> = <nat:4> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + <nat:3> \} $ . This is sound using the assignment scheme defined in typical Hoare logic . Immediately following , we see the binding code \verb | <var:e> := <nat:3> + <var:e> * <var:P> | . This line transfers $ \{ <var:P> = <var:o> \land <var:e> = <nat:4> \cdot <var:o> ^ <nat:3> + <nat:4> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + <nat:3> \} $ toward $ \{ <var:P> = <var:o> \land <var:e> = <nat:4> \cdot <var:o> ^ <nat:4> + <nat:4> \cdot <var:o> ^ <nat:3> + <nat:3> \cdot <var:o> ^ <nat:2> + <nat:3> \cdot <var:o> + <nat:3> \} $ . This is known to be sound with the assignment scheme defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:P> = <var:o> }} <var:e> := <nat:4> ; <var:e> := <nat:4> + <var:e> * <var:P> ; <var:e> := <nat:3> + <var:e> * <var:P> ; <var:e> := <nat:3> + <var:e> * <var:P> ; <var:e> := <nat:3> + <var:e> * <var:P> {{ <var:e> = <nat:4> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:e> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:e> = <nat:4> * <var:o> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:e> = <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:e> = <nat:4> * <var:o> ^ <nat:3> + <nat:4> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:o> /\ <var:e> = <nat:4> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 