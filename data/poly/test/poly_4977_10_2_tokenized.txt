\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j> := <nat:3> ; <var:j> := <var:j> * <var:O> ; <var:j> := <nat:2> + <var:j> * <var:O> ; <var:j> := <nat:1> + <var:j> * <var:O> ; <var:j> := <nat:4> + <var:j> * <var:O> ; <var:j> := <nat:2> + <var:j> * <var:O> ; <var:j> := <nat:1> + <var:j> * <var:O> ; <var:j> := <nat:1> + <var:j> * <var:O> ; <var:j> := <nat:2> + <var:j> * <var:O> ; <var:j> := <nat:1> + <var:j> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:O> = <var:b> $ before running our code segment , it holds that we see $ <var:j> = <nat:3> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> $ when code segment finishes . \end{theorem} \begin{proof} The application of typical Hoare logic produces : \begin{eqnarray} \{ <var:O> = <var:b> \} \\ <var:j> := <nat:3> ; \\ \{ <var:O> = <var:b> \land <var:j> = <nat:3> \} \end{eqnarray} Allowing the execution of this list of instructions yields : \begin{eqnarray} <var:j> := <var:j> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:j> = <nat:3> * <var:b> + \} \\ <var:j> := <nat:2> + <var:j> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:j> = <nat:3> * <var:b> ^ <nat:2> + <nat:2> \} \\ <var:j> := <nat:1> + <var:j> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:j> = <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> + <nat:1> \} \\ <var:j> := <nat:4> + <var:j> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:j> = <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:4> \} \\ <var:j> := <nat:2> + <var:j> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:j> = <nat:3> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:2> \} \\ <var:j> := <nat:1> + <var:j> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:j> = <nat:3> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> \} \\ <var:j> := <nat:1> + <var:j> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:j> = <nat:3> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> \} \\ <var:j> := <nat:2> + <var:j> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:j> = <nat:3> * <var:b> ^ <nat:8> + <nat:2> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:2> \} \end{eqnarray} Allowing executing our list of commands returns : \begin{eqnarray} <var:j> := <nat:1> + <var:j> * <var:O> \\ \{ <var:O> = <var:b> \land <var:j> = <nat:3> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> \} \end{eqnarray} Given the preceding argument , this code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:3> ; <var:j> := <var:j> * <var:O> ; <var:j> := <nat:2> + <var:j> * <var:O> ; <var:j> := <nat:1> + <var:j> * <var:O> ; <var:j> := <nat:4> + <var:j> * <var:O> ; <var:j> := <nat:2> + <var:j> * <var:O> ; <var:j> := <nat:1> + <var:j> * <var:O> ; <var:j> := <nat:1> + <var:j> * <var:O> ; <var:j> := <nat:2> + <var:j> * <var:O> ; <var:j> := <nat:1> + <var:j> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:O> = <var:b> }} <def:poly> {{ <var:j> = <nat:3> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:j> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:j> = <nat:3> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:8> + <nat:2> * <var:b> ^ <nat:6> + <nat:1> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:j> = <nat:3> * <var:b> ^ <nat:9> + <nat:2> * <var:b> ^ <nat:7> + <nat:1> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 