\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:K1> := <var:B> ; <var:K2> := <var:K1> * <var:B> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:4> ; <var:K2> := <var:K2> * <nat:4> ; <var:d> := <var:K2> <var:d> := <var:d> + <var:K1> <var:d> := <var:d> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:B> = <var:I> $ , given positive numbers $ <var:I> $ , before evaluating our series of commands it follows that we have $ <var:d> = <nat:4> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our code segment is shown with Hoare techniques . Paying attention to the following statement found in our set of instructions , we have the variable binding statement \verb | <var:K1> := <var:B> ; | . This command moves the condition $ \{ <var:B> = <var:I> \} $ toward $ \{ <var:B> = <var:I> \land <var:K1> = <var:I> \} $ . Going forward , we see the assignment command binding $ <var:K1> * <var:B> $ into $ <var:K2>$ . This code forwards $ \{ <var:B> = <var:I> \land <var:K1> = <var:I> \} $ into $ \{ <var:B> = <var:I> \land <var:K1> = <var:I> \land <var:K2> = <var:I> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule given in standard Hoare reasoning . Taking another step toward the upcoming line of code contained in our code segment , we see the environment update code \verb | <var:K0> := <nat:3> ; | . This takes $ \{ <var:B> = <var:I> \land <var:K1> = <var:I> \land <var:K2> = <var:I> ^ <nat:2> \} $ as $ \{ <var:B> = <var:I> \land <var:K1> = <var:I> \land <var:K2> = <var:I> ^ <nat:2> \land <var:K0> = <nat:3> \} $ . This is ensured with the assignment scheme from standard Hoare logic . Jumping to the following bit of code contained in the code , the binding code \verb | <var:K1> := <var:K1> * <nat:4> ; | . This forwards $ \{ <var:B> = <var:I> \land <var:K1> = <var:I> \land <var:K2> = <var:I> ^ <nat:2> \land <var:K0> = <nat:3> \} $ into the postcondition $ \{ <var:B> = <var:I> \land <var:K1> = <nat:4> * <var:I> \land <var:K2> = <var:I> ^ <nat:2> \land <var:K0> = <nat:3> \} $ . This is rigorously given using the assignment inference rule obtained from standard Hoare reasoning . Moving on to the next line seen in our list of instructions , we see the variable binding line assigning $ <var:K2> * <nat:4> $ to $ <var:K2>$ . This command forwards the precondition $ \{ <var:B> = <var:I> \land <var:K1> = <nat:4> * <var:I> \land <var:K2> = <var:I> ^ <nat:2> \land <var:K0> = <nat:3> \} $ as the condition $ \{ <var:B> = <var:I> \land <var:K1> = <nat:4> * <var:I> \land <var:K2> = <nat:4> * <var:I> ^ <nat:2> \land <var:K0> = <nat:3> \} $ . Taking another step toward the upcoming piece of code seen in the series of commands , the variable binding command \verb | <var:d> := <var:K2> | . This code redefines the condition $ \{ <var:B> = <var:I> \land <var:K1> = <nat:4> * <var:I> \land <var:K2> = <nat:4> * <var:I> ^ <nat:2> \land <var:K0> = <nat:3> \} $ as the postcondition $ \{ <var:B> = <var:I> \land <var:K1> = <nat:4> * <var:I> \land <var:K0> = <nat:3> \land <var:d> = <nat:4> * <var:I> ^ <nat:2> \} $ . Further , we see the code \verb | <var:d> := <var:d> + <var:K1> | . This advances the condition $ \{ <var:B> = <var:I> \land <var:K1> = <nat:4> * <var:I> \land <var:K0> = <nat:3> \land <var:d> = <nat:4> * <var:I> ^ <nat:2> \} $ toward $ \{ <var:B> = <var:I> \land <var:K0> = <nat:3> \land <var:d> = <nat:4> * <var:I> ^ <nat:2> + <nat:4> * <var:I> \} $ . Going to the next step , the binding command defining $ <var:d> + <var:K0$ into $ <var:d>$ . This command moves the precondition $ \{ <var:B> = <var:I> \land <var:K0> = <nat:3> \land <var:d> = <nat:4> * <var:I> ^ <nat:2> + <nat:4> * <var:I> \} $ to the condition $ \{ <var:B> = <var:I> \land <var:d> = <nat:4> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:3> \} $ . This is given with the assignment inference rule defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K1> := <var:B> ; <var:K2> := <var:K1> * <var:B> ; <var:K0> := <nat:3> ; <var:K1> := <var:K1> * <nat:4> ; <var:K2> := <var:K2> * <nat:4> ; <var:d> := <var:K2> <var:d> := <var:d> + <var:K1> <var:d> := <var:d> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:B> = <var:I> }} <def:poly> {{ <var:d> = <nat:4> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:K1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:K1> = <var:I> /\ <var:K2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:K1> = <var:I> /\ <var:K2> = <var:I> ^ <nat:2> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:K1> = <nat:4> * <var:I> /\ <var:K2> = <var:I> ^ <nat:2> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:K1> = <nat:4> * <var:I> /\ <var:K2> = <nat:4> * <var:I> ^ <nat:2> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:K1> = <nat:4> * <var:I> /\ <var:K0> = <nat:3> /\ <var:d> = <nat:4> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:K0> = <nat:3> /\ <var:d> = <nat:4> * <var:I> ^ <nat:2> + <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:d> = <nat:4> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 