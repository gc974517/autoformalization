\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:E1> := <var:W> ; <var:E2> := <var:E1> * <var:W> ; <var:E3> := <var:E2> * <var:W> ; <var:E4> := <var:E3> * <var:W> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:6> ; <var:E3> := <var:E3> * <nat:7> ; <var:E4> := <var:E4> * <nat:1> ; <var:Q> := <var:E4> <var:Q> := <var:Q> + <var:E3> <var:Q> := <var:Q> + <var:E2> <var:Q> := <var:Q> + <var:E1> <var:Q> := <var:Q> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> in \emph{Imp} . Allow $ <var:W> = <var:z> $ before running this code segment then we have $ <var:Q> = <nat:1> \cdot <var:z> ^ <nat:4> + <nat:7> \cdot <var:z> ^ <nat:3> + <nat:6> \cdot <var:z> ^ <nat:2> + <nat:8> \cdot <var:z> + <nat:1> $ when series of instructions has executed . \end{theorem} \begin{proof} The argument for the code is shown with usual Hoare techniques . Going forward , we have the assignment command \verb | <var:E1> := <var:W> ; | . This transfers the precondition $ \{ <var:W> = <var:z> \} $ toward $ \{ <var:W> = <var:z> \land <var:E1> = <var:z> \} $ . This is rigorously given using the assignment law from usual Hoare techniques . Shifting focus toward the upcoming statement contained in the series of instructions , we have the variable assignmet statement binding $ <var:E1> * <var:W> $ toward $ <var:E2>$ . This statement forwards $ \{ <var:W> = <var:z> \land <var:E1> = <var:z> \} $ to the postcondition $ \{ <var:W> = <var:z> \land <var:E1> = <var:z> \land <var:E2> = <var:z> ^ <nat:2> \} $ . Advancing on , the variable update line \verb | <var:E3> := <var:E2> * <var:W> ; | . This code forwards $ \{ <var:W> = <var:z> \land <var:E1> = <var:z> \land <var:E2> = <var:z> ^ <nat:2> \} $ to $ \{ <var:W> = <var:z> \land <var:E1> = <var:z> \land <var:E2> = <var:z> ^ <nat:2> \land <var:E3> = <var:z> ^ <nat:3> \} $ . Looking at the upcoming line in our code segment , the variable binding command \verb | <var:E4> := <var:E3> * <var:W> ; | . This takes $ \{ <var:W> = <var:z> \land <var:E1> = <var:z> \land <var:E2> = <var:z> ^ <nat:2> \land <var:E3> = <var:z> ^ <nat:3> \} $ as the condition $ \{ <var:W> = <var:z> \land <var:E1> = <var:z> \land <var:E2> = <var:z> ^ <nat:2> \land <var:E3> = <var:z> ^ <nat:3> \land <var:E4> = <var:z> ^ <nat:4> \} $ . This is given through the assignment scheme obtained from Hoare techniques . Taking a look at the following line of code seen in our list of instructions , we have the variable update command \verb | <var:E0> := <nat:1> ; | . This transfers $ \{ <var:W> = <var:z> \land <var:E1> = <var:z> \land <var:E2> = <var:z> ^ <nat:2> \land <var:E3> = <var:z> ^ <nat:3> \land <var:E4> = <var:z> ^ <nat:4> \} $ to $ \{ <var:W> = <var:z> \land <var:E1> = <var:z> \land <var:E2> = <var:z> ^ <nat:2> \land <var:E3> = <var:z> ^ <nat:3> \land <var:E4> = <var:z> ^ <nat:4> \land <var:E0> = <nat:1> \} $ . This is ensured with the assignment law defined in typical Hoare logic . Jumping to the proceeding command contained in our list of commands , we have the environment update statement \verb | <var:E1> := <var:E1> * <nat:8> ; | . This transfers the condition $ \{ <var:W> = <var:z> \land <var:E1> = <var:z> \land <var:E2> = <var:z> ^ <nat:2> \land <var:E3> = <var:z> ^ <nat:3> \land <var:E4> = <var:z> ^ <nat:4> \land <var:E0> = <nat:1> \} $ toward $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E2> = <var:z> ^ <nat:2> \land <var:E3> = <var:z> ^ <nat:3> \land <var:E4> = <var:z> ^ <nat:4> \land <var:E0> = <nat:1> \} $ . This is deduced with the assignment inference rule defined by usual Hoare reasoning . Taking a look at the proceeding piece of code in our code , we have the variable binding statement defining $ <var:E2> * <nat:6> $ into $ <var:E2>$ . This statement takes the condition $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E2> = <var:z> ^ <nat:2> \land <var:E3> = <var:z> ^ <nat:3> \land <var:E4> = <var:z> ^ <nat:4> \land <var:E0> = <nat:1> \} $ into the postcondition $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E2> = <nat:6> \cdot <var:z> ^ <nat:2> \land <var:E3> = <var:z> ^ <nat:3> \land <var:E4> = <var:z> ^ <nat:4> \land <var:E0> = <nat:1> \} $ . Going to the next step , we have the variable binding command \verb | <var:E3> := <var:E3> * <nat:7> ; | . This transfers the condition $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E2> = <nat:6> \cdot <var:z> ^ <nat:2> \land <var:E3> = <var:z> ^ <nat:3> \land <var:E4> = <var:z> ^ <nat:4> \land <var:E0> = <nat:1> \} $ as $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E2> = <nat:6> \cdot <var:z> ^ <nat:2> \land <var:E3> = <nat:7> \cdot <var:z> ^ <nat:3> \land <var:E4> = <var:z> ^ <nat:4> \land <var:E0> = <nat:1> \} $ . This is known to be sound through the assignment scheme from usual Hoare techniques . Taking another step toward the following statement contained in the set of instructions , we have the variable update statement yielding $ <var:E4> * <nat:1> $ into $ <var:E4>$ . This statement takes $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E2> = <nat:6> \cdot <var:z> ^ <nat:2> \land <var:E3> = <nat:7> \cdot <var:z> ^ <nat:3> \land <var:E4> = <var:z> ^ <nat:4> \land <var:E0> = <nat:1> \} $ toward the postcondition $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E2> = <nat:6> \cdot <var:z> ^ <nat:2> \land <var:E3> = <nat:7> \cdot <var:z> ^ <nat:3> \land <var:E4> = <nat:1> \cdot <var:z> ^ <nat:4> \land <var:E0> = <nat:1> \} $ . Going to the next step , the variable assignmet command giving $ <var:E4$ as $ <var:Q>$ . This moves $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E2> = <nat:6> \cdot <var:z> ^ <nat:2> \land <var:E3> = <nat:7> \cdot <var:z> ^ <nat:3> \land <var:E4> = <nat:1> \cdot <var:z> ^ <nat:4> \land <var:E0> = <nat:1> \} $ into $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E2> = <nat:6> \cdot <var:z> ^ <nat:2> \land <var:E3> = <nat:7> \cdot <var:z> ^ <nat:3> \land <var:E0> = <nat:1> \land <var:Q> = <nat:1> \cdot <var:z> ^ <nat:4> \} $ . This is known to be sound by the assignment inference rule from typical Hoare logic . Going forward , the binding command assigning $ <var:Q> + <var:E3$ into $ <var:Q>$ . This forwards $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E2> = <nat:6> \cdot <var:z> ^ <nat:2> \land <var:E3> = <nat:7> \cdot <var:z> ^ <nat:3> \land <var:E0> = <nat:1> \land <var:Q> = <nat:1> \cdot <var:z> ^ <nat:4> \} $ toward the condition $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E2> = <nat:6> \cdot <var:z> ^ <nat:2> \land <var:E0> = <nat:1> \land <var:Q> = <nat:1> \cdot <var:z> ^ <nat:4> + <nat:7> \cdot <var:z> ^ <nat:3> \} $ . Taking another step toward the proceeding line in the program , we see the variable binding command \verb | <var:Q> := <var:Q> + <var:E2> | . This statement advances the condition $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E2> = <nat:6> \cdot <var:z> ^ <nat:2> \land <var:E0> = <nat:1> \land <var:Q> = <nat:1> \cdot <var:z> ^ <nat:4> + <nat:7> \cdot <var:z> ^ <nat:3> \} $ as the condition $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E0> = <nat:1> \land <var:Q> = <nat:1> \cdot <var:z> ^ <nat:4> + <nat:7> \cdot <var:z> ^ <nat:3> + <nat:6> \cdot <var:z> ^ <nat:2> \} $ . Observing the subsequent piece of code contained in the list of commands , we see the variable binding code binding $ <var:Q> + <var:E1$ toward $ <var:Q>$ . This command transfers $ \{ <var:W> = <var:z> \land <var:E1> = <nat:8> \cdot <var:z> \land <var:E0> = <nat:1> \land <var:Q> = <nat:1> \cdot <var:z> ^ <nat:4> + <nat:7> \cdot <var:z> ^ <nat:3> + <nat:6> \cdot <var:z> ^ <nat:2> \} $ toward the condition $ \{ <var:W> = <var:z> \land <var:E0> = <nat:1> \land <var:Q> = <nat:1> \cdot <var:z> ^ <nat:4> + <nat:7> \cdot <var:z> ^ <nat:3> + <nat:6> \cdot <var:z> ^ <nat:2> + <nat:8> \cdot <var:z> \} $ . Stepping through , we see the binding line \verb | <var:Q> := <var:Q> + <var:E0> | . This redefines $ \{ <var:W> = <var:z> \land <var:E0> = <nat:1> \land <var:Q> = <nat:1> \cdot <var:z> ^ <nat:4> + <nat:7> \cdot <var:z> ^ <nat:3> + <nat:6> \cdot <var:z> ^ <nat:2> + <nat:8> \cdot <var:z> \} $ toward the condition $ \{ <var:W> = <var:z> \land <var:Q> = <nat:1> \cdot <var:z> ^ <nat:4> + <nat:7> \cdot <var:z> ^ <nat:3> + <nat:6> \cdot <var:z> ^ <nat:2> + <nat:8> \cdot <var:z> + <nat:1> \} $ . This is shown through the assignment rule found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <var:E3> : string := " <var:E3> " . Definition <var:E4> : string := " <var:E4> " . Definition <def:poly> := <var:E1> := <var:W> ; <var:E2> := <var:E1> * <var:W> ; <var:E3> := <var:E2> * <var:W> ; <var:E4> := <var:E3> * <var:W> ; <var:E0> := <nat:1> ; <var:E1> := <var:E1> * <nat:8> ; <var:E2> := <var:E2> * <nat:6> ; <var:E3> := <var:E3> * <nat:7> ; <var:E4> := <var:E4> * <nat:1> ; <var:Q> := <var:E4> <var:Q> := <var:Q> + <var:E3> <var:Q> := <var:Q> + <var:E2> <var:Q> := <var:Q> + <var:E1> <var:Q> := <var:Q> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:W> = <var:z> }} <def:poly> {{ <var:Q> = <nat:1> * <var:z> ^ <nat:4> + <nat:7> * <var:z> ^ <nat:3> + <nat:6> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:E1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:E1> = <var:z> /\ <var:E2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:E1> = <var:z> /\ <var:E2> = <var:z> ^ <nat:2> /\ <var:E3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:E1> = <var:z> /\ <var:E2> = <var:z> ^ <nat:2> /\ <var:E3> = <var:z> ^ <nat:3> /\ <var:E4> = <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:E1> = <var:z> /\ <var:E2> = <var:z> ^ <nat:2> /\ <var:E3> = <var:z> ^ <nat:3> /\ <var:E4> = <var:z> ^ <nat:4> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:E1> = <nat:8> * <var:z> /\ <var:E2> = <var:z> ^ <nat:2> /\ <var:E3> = <var:z> ^ <nat:3> /\ <var:E4> = <var:z> ^ <nat:4> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:E1> = <nat:8> * <var:z> /\ <var:E2> = <nat:6> * <var:z> ^ <nat:2> /\ <var:E3> = <var:z> ^ <nat:3> /\ <var:E4> = <var:z> ^ <nat:4> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:E1> = <nat:8> * <var:z> /\ <var:E2> = <nat:6> * <var:z> ^ <nat:2> /\ <var:E3> = <nat:7> * <var:z> ^ <nat:3> /\ <var:E4> = <var:z> ^ <nat:4> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:E1> = <nat:8> * <var:z> /\ <var:E2> = <nat:6> * <var:z> ^ <nat:2> /\ <var:E3> = <nat:7> * <var:z> ^ <nat:3> /\ <var:E4> = <nat:1> * <var:z> ^ <nat:4> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:E1> = <nat:8> * <var:z> /\ <var:E2> = <nat:6> * <var:z> ^ <nat:2> /\ <var:E3> = <nat:7> * <var:z> ^ <nat:3> /\ <var:E0> = <nat:1> /\ <var:Q> = <nat:1> * <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:E1> = <nat:8> * <var:z> /\ <var:E2> = <nat:6> * <var:z> ^ <nat:2> /\ <var:E0> = <nat:1> /\ <var:Q> = <nat:1> * <var:z> ^ <nat:4> + <nat:7> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:E1> = <nat:8> * <var:z> /\ <var:E0> = <nat:1> /\ <var:Q> = <nat:1> * <var:z> ^ <nat:4> + <nat:7> * <var:z> ^ <nat:3> + <nat:6> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:E0> = <nat:1> /\ <var:Q> = <nat:1> * <var:z> ^ <nat:4> + <nat:7> * <var:z> ^ <nat:3> + <nat:6> * <var:z> ^ <nat:2> + <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:z> /\ <var:Q> = <nat:1> * <var:z> ^ <nat:4> + <nat:7> * <var:z> ^ <nat:3> + <nat:6> * <var:z> ^ <nat:2> + <nat:8> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 