\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d> := <nat:4> ; <var:d> := <nat:4> + <var:d> * <var:y> ; <var:d> := <nat:1> + <var:d> * <var:y> ; <var:d> := <nat:2> + <var:d> * <var:y> ; <var:d> := <nat:1> + <var:d> * <var:y> ; <var:d> := <nat:1> + <var:d> * <var:y> ; <var:d> := <nat:2> + <var:d> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:y> = <var:L> $ before evaluating the program , it holds that we have $ <var:d> = <nat:4> \cdot <var:L> ^ <nat:6> + <nat:4> \cdot <var:L> ^ <nat:5> + <nat:1> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this code segment is evident by usual Hoare logic . Moving forward to the subsequent bit of code contained in the program , we have the environment update statement \verb | <var:d> := <nat:4> ; | . This code redefines $ \{ <var:y> = <var:L> \} $ to $ \{ <var:y> = <var:L> \land <var:d> = <nat:4> \} $ . This is known to be sound through the assignment inference rule defined by usual Hoare reasoning . Honing in on the proceeding bit of code in the set of instructions , we have the variable assignmet code \verb | <var:d> := <nat:4> + <var:d> * <var:y> ; | . This redefines the condition $ \{ <var:y> = <var:L> \land <var:d> = <nat:4> \} $ to the condition $ \{ <var:y> = <var:L> \land <var:d> = <nat:4> \times <var:L> + <nat:4> \} $ . Considering the upcoming statement seen in the set of commands , we have the variable binding code \verb | <var:d> := <nat:1> + <var:d> * <var:y> ; | . This transfers the condition $ \{ <var:y> = <var:L> \land <var:d> = <nat:4> \times <var:L> + <nat:4> \} $ into the postcondition $ \{ <var:y> = <var:L> \land <var:d> = <nat:4> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:1> \} $ . This is shown to be logically sound with the assignment law defined by usual Hoare reasoning . Moving on to the upcoming command seen in the list of instructions , we see the variable assignmet code \verb | <var:d> := <nat:2> + <var:d> * <var:y> ; | . This line redefines the precondition $ \{ <var:y> = <var:L> \land <var:d> = <nat:4> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:1> \} $ as the postcondition $ \{ <var:y> = <var:L> \land <var:d> = <nat:4> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:2> \} $ . Next , we have the variable update code \verb | <var:d> := <nat:1> + <var:d> * <var:y> ; | . This code takes the condition $ \{ <var:y> = <var:L> \land <var:d> = <nat:4> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:2> \} $ as $ \{ <var:y> = <var:L> \land <var:d> = <nat:4> \times <var:L> ^ <nat:4> + <nat:4> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:1> \} $ . Advancing to the next step , the variable binding code \verb | <var:d> := <nat:1> + <var:d> * <var:y> ; | . This moves $ \{ <var:y> = <var:L> \land <var:d> = <nat:4> \times <var:L> ^ <nat:4> + <nat:4> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:1> \} $ into the postcondition $ \{ <var:y> = <var:L> \land <var:d> = <nat:4> \times <var:L> ^ <nat:5> + <nat:4> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:1> \} $ . This is deduced through the assignment rule obtained from usual Hoare reasoning . Paying attention to the upcoming piece of code seen in the program , we see the assignment line assigning $ <nat:2> + <var:d> * <var:y$ as $ <var:d>$ . This advances the precondition $ \{ <var:y> = <var:L> \land <var:d> = <nat:4> \times <var:L> ^ <nat:5> + <nat:4> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:1> \} $ toward the condition $ \{ <var:y> = <var:L> \land <var:d> = <nat:4> \times <var:L> ^ <nat:6> + <nat:4> \times <var:L> ^ <nat:5> + <nat:1> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:4> ; <var:d> := <nat:4> + <var:d> * <var:y> ; <var:d> := <nat:1> + <var:d> * <var:y> ; <var:d> := <nat:2> + <var:d> * <var:y> ; <var:d> := <nat:1> + <var:d> * <var:y> ; <var:d> := <nat:1> + <var:d> * <var:y> ; <var:d> := <nat:2> + <var:d> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:y> = <var:L> }} <def:poly> {{ <var:d> = <nat:4> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:d> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:d> = <nat:4> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:d> = <nat:4> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:d> = <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:d> = <nat:4> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:d> = <nat:4> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:L> /\ <var:d> = <nat:4> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 