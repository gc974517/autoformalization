\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:q> := <nat:4> ; <var:q> := <var:q> * <var:L> ; <var:q> := <nat:3> + <var:q> * <var:L> ; <var:q> := <nat:4> + <var:q> * <var:L> \end{verbatim} \end{definition} \begin{theorem} We define the following program <def:poly> . Assume taking $ <var:E> $ that $ <var:L> = <var:E> $ before the execution of our set of commands , then $ <var:q> = <nat:4> \cdot <var:E> ^ <nat:3> + <nat:3> \cdot <var:E> + <nat:4> $ . \end{theorem} \begin{proof} The proof of the set of commands is given by Hoare reasoning . Paying attention to the following piece of code in the code segment , we have \verb | { <var:L> = <var:E> } <var:q> := <nat:4> { <var:L> = <var:E> \land <var:q> = <nat:4> } | . Going forward , we see \verb | { <var:L> = <var:E> } <var:q> := <nat:4> { <var:L> = <var:E> \land <var:q> = <nat:4> } | and \verb | { <var:L> = <var:E> \land <var:q> = <nat:4> } <var:q> := <var:q> * <var:L> { <var:L> = <var:E> \land <var:q> = <nat:4> * <var:E> + } | . Immediately after , we see \verb | { <var:L> = <var:E> } <var:q> := <nat:4> { <var:L> = <var:E> \land <var:q> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:4> ; <var:q> := <var:q> * <var:L> ; <var:q> := <nat:3> + <var:q> * <var:L> ; <var:q> := <nat:4> + <var:q> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:L> = <var:E> }} <def:poly> {{ <var:q> = <nat:4> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:q> = <nat:4> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:q> = <nat:4> * <var:E> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:E> /\ <var:q> = <nat:4> * <var:E> ^ <nat:3> + <nat:3> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 