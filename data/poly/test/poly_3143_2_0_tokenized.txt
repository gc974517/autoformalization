\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:7> ; <var:x> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Assume that $ <var:t> = <var:s> $ --- for all $ <var:s> \in \mathbb{N} $ --- ahead of the evaluation of our code then we see $ <var:x> = <nat:7> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:t> = <var:s> \} \\ <var:c0> := <nat:7> ; \\ \{ <var:t> = <var:s> \land <var:c0> = <nat:7> \} \\ <var:x> := <var:c0> \\ \{ <var:t> = <var:s> \land <var:x> = <nat:7> \} \end{eqnarray} Furthering the execution of our code segment returns : \begin{eqnarray} \end{eqnarray} Thusly , this segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:7> ; <var:x> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:t> = <var:s> }} <def:poly> {{ <var:x> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:x> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 