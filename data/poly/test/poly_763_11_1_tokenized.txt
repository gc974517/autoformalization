\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as \begin{verbatim} <var:f1> := <var:C> ; <var:f2> := <var:f1> * <var:C> ; <var:f3> := <var:f2> * <var:C> ; <var:f0> := <nat:1> ; <var:f1> := <var:f1> * <nat:9> ; <var:f2> := <var:f2> * <nat:1> ; <var:f3> := <var:f3> * <nat:6> ; <var:J> := <var:f3> <var:J> := <var:J> + <var:f2> <var:J> := <var:J> + <var:f1> <var:J> := <var:J> + <var:f0> \end{verbatim} Allowing that we have $ <var:C> = <var:O> $ --- given any integers $ <var:O> $ --- before the execution of the series of commands then we have $ <var:J> = <nat:6> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:9> * <var:O> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code can be accomplished through usual Hoare reasoning . Moving forward to the next bits of codecontained in the series of commands , \[ \begin{tabular} {rcl} \{ <var:C> = <var:O> \} & <var:f1> := <var:C> & \{ <var:C> = <var:O> \land <var:f1> = <var:O> \} \\ \{ <var:C> = <var:O> \land <var:f1> = <var:O> \} & <var:f2> := <var:f1> * <var:C> & \{ <var:C> = <var:O> \land <var:f1> = <var:O> \land <var:f2> = <var:O> ^ <nat:2> \} \\ \{ <var:C> = <var:O> \land <var:f1> = <var:O> \land <var:f2> = <var:O> ^ <nat:2> \} & <var:f3> := <var:f2> * <var:C> & \{ <var:C> = <var:O> \land <var:f1> = <var:O> \land <var:f2> = <var:O> ^ <nat:2> \land <var:f3> = <var:O> ^ <nat:3> \} \\ \{ <var:C> = <var:O> \land <var:f1> = <var:O> \land <var:f2> = <var:O> ^ <nat:2> \land <var:f3> = <var:O> ^ <nat:3> \} & <var:f0> := <nat:1> & \{ <var:C> = <var:O> \land <var:f1> = <var:O> \land <var:f2> = <var:O> ^ <nat:2> \land <var:f3> = <var:O> ^ <nat:3> \land <var:f0> = <nat:1> \} \\ \{ <var:C> = <var:O> \land <var:f1> = <var:O> \land <var:f2> = <var:O> ^ <nat:2> \land <var:f3> = <var:O> ^ <nat:3> \land <var:f0> = <nat:1> \} & <var:f1> := <var:f1> * <nat:9> & \{ <var:C> = <var:O> \land <var:f1> = <nat:9> * <var:O> \land <var:f2> = <var:O> ^ <nat:2> \land <var:f3> = <var:O> ^ <nat:3> \land <var:f0> = <nat:1> \} \\ \{ <var:C> = <var:O> \land <var:f1> = <nat:9> * <var:O> \land <var:f2> = <var:O> ^ <nat:2> \land <var:f3> = <var:O> ^ <nat:3> \land <var:f0> = <nat:1> \} & <var:f2> := <var:f2> * <nat:1> & \{ <var:C> = <var:O> \land <var:f1> = <nat:9> * <var:O> \land <var:f2> = <nat:1> * <var:O> ^ <nat:2> \land <var:f3> = <var:O> ^ <nat:3> \land <var:f0> = <nat:1> \} \\ \{ <var:C> = <var:O> \land <var:f1> = <nat:9> * <var:O> \land <var:f2> = <nat:1> * <var:O> ^ <nat:2> \land <var:f3> = <var:O> ^ <nat:3> \land <var:f0> = <nat:1> \} & <var:f3> := <var:f3> * <nat:6> & \{ <var:C> = <var:O> \land <var:f1> = <nat:9> * <var:O> \land <var:f2> = <nat:1> * <var:O> ^ <nat:2> \land <var:f3> = <nat:6> * <var:O> ^ <nat:3> \land <var:f0> = <nat:1> \} \\ \{ <var:C> = <var:O> \land <var:f1> = <nat:9> * <var:O> \land <var:f2> = <nat:1> * <var:O> ^ <nat:2> \land <var:f3> = <nat:6> * <var:O> ^ <nat:3> \land <var:f0> = <nat:1> \} & <var:J> := <var:f3& \{ <var:C> = <var:O> \land <var:f1> = <nat:9> * <var:O> \land <var:f2> = <nat:1> * <var:O> ^ <nat:2> \land <var:f0> = <nat:1> \land <var:J> = <nat:6> * <var:O> ^ <nat:3> \} \end{tabular} After , \[ \begin{tabular} {rcl} \{ <var:C> = <var:O> \} & <var:f1> := <var:C> & \{ <var:C> = <var:O> \land <var:f1> = <var:O> \} \\ \{ <var:C> = <var:O> \land <var:f1> = <var:O> \} & <var:f2> := <var:f1> * <var:C> & \{ <var:C> = <var:O> \land <var:f1> = <var:O> \land <var:f2> = <var:O> ^ <nat:2> \} \\ \{ <var:C> = <var:O> \land <var:f1> = <var:O> \land <var:f2> = <var:O> ^ <nat:2> \} & <var:f3> := <var:f2> * <var:C> & \{ <var:C> = <var:O> \land <var:f1> = <var:O> \land <var:f2> = <var:O> ^ <nat:2> \land <var:f3> = <var:O> ^ <nat:3> \} \end{tabular} This is ensured using the variable update inference rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:C> = <var:O> }} <var:f1> := <var:C> ; <var:f2> := <var:f1> * <var:C> ; <var:f3> := <var:f2> * <var:C> ; <var:f0> := <nat:1> ; <var:f1> := <var:f1> * <nat:9> ; <var:f2> := <var:f2> * <nat:1> ; <var:f3> := <var:f3> * <nat:6> ; <var:J> := <var:f3> <var:J> := <var:J> + <var:f2> <var:J> := <var:J> + <var:f1> <var:J> := <var:J> + <var:f0> {{ <var:J> = <nat:6> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:9> * <var:O> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:f1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:f1> = <var:O> /\ <var:f2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:f1> = <var:O> /\ <var:f2> = <var:O> ^ <nat:2> /\ <var:f3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:f1> = <var:O> /\ <var:f2> = <var:O> ^ <nat:2> /\ <var:f3> = <var:O> ^ <nat:3> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:f1> = <nat:9> * <var:O> /\ <var:f2> = <var:O> ^ <nat:2> /\ <var:f3> = <var:O> ^ <nat:3> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:f1> = <nat:9> * <var:O> /\ <var:f2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:f3> = <var:O> ^ <nat:3> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:f1> = <nat:9> * <var:O> /\ <var:f2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:f3> = <nat:6> * <var:O> ^ <nat:3> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:f1> = <nat:9> * <var:O> /\ <var:f2> = <nat:1> * <var:O> ^ <nat:2> /\ <var:f0> = <nat:1> /\ <var:J> = <nat:6> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:f1> = <nat:9> * <var:O> /\ <var:f0> = <nat:1> /\ <var:J> = <nat:6> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:f0> = <nat:1> /\ <var:J> = <nat:6> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:9> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:O> /\ <var:J> = <nat:6> * <var:O> ^ <nat:3> + <nat:1> * <var:O> ^ <nat:2> + <nat:9> * <var:O> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 