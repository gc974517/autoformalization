\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:7> ; <var:s1> := <nat:5> ; <var:s1> := <var:s1> * <var:q> ; <var:s2> := <nat:4> ; <var:s2> := <var:s2> * <var:q> ; <var:s2> := <var:s2> * <var:q> ; <var:t> := <var:s2> ; <var:t> := <var:t> + <var:s1> ; <var:t> := <var:t> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:q> = <var:f> $ before the evaluation of our code , it holds that $ <var:t> = <nat:4> \times <var:f> ^ <nat:2> + <nat:5> \times <var:f> + <nat:7> $ after set of commands has terminated . \end{theorem} \begin{proof} Note that the following decorated program . \begin{eqnarray} \{ <var:q> = <var:f> \} \\ <var:s0> := <nat:7> ; \\ \{ <var:q> = <var:f> \land <var:s0> = <nat:7> \} \\ <var:s1> := <nat:5> ; \\ \{ <var:q> = <var:f> \land <var:s0> = <nat:7> \land <var:s1> = <nat:5> \} \\ <var:s1> := <var:s1> * <var:q> ; \\ \{ <var:q> = <var:f> \land <var:s0> = <nat:7> \land <var:s1> = <nat:5> \cdot <var:f> \} \\ <var:s2> := <nat:4> ; \\ \{ <var:q> = <var:f> \land <var:s0> = <nat:7> \land <var:s1> = <nat:5> \cdot <var:f> \land <var:s2> = <nat:4> \} \\ <var:s2> := <var:s2> * <var:q> ; \\ \{ <var:q> = <var:f> \land <var:s0> = <nat:7> \land <var:s1> = <nat:5> \cdot <var:f> \land <var:s2> = <nat:4> \cdot <var:f> \} \\ <var:s2> := <var:s2> * <var:q> ; \\ \{ <var:q> = <var:f> \land <var:s0> = <nat:7> \land <var:s1> = <nat:5> \cdot <var:f> \land <var:s2> = <nat:4> \cdot <var:f> ^ <nat:2> \} \\ <var:t> := <var:s2> ; \\ \{ <var:q> = <var:f> \land <var:s0> = <nat:7> \land <var:s1> = <nat:5> \cdot <var:f> \land <var:t> = <nat:4> \cdot <var:f> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:s1> ; \\ \{ <var:q> = <var:f> \land <var:s0> = <nat:7> \land <var:t> = <nat:4> \cdot <var:f> ^ <nat:2> + <nat:5> \cdot <var:f> \} \\ <var:t> := <var:t> + <var:s0> \\ \{ <var:q> = <var:f> \land <var:t> = <nat:4> \cdot <var:f> ^ <nat:2> + <nat:5> \cdot <var:f> + <nat:7> \} \end{eqnarray} Utilizing standard Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:7> ; <var:s1> := <nat:5> ; <var:s1> := <var:s1> * <var:q> ; <var:s2> := <nat:4> ; <var:s2> := <var:s2> * <var:q> ; <var:s2> := <var:s2> * <var:q> ; <var:t> := <var:s2> ; <var:t> := <var:t> + <var:s1> ; <var:t> := <var:t> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:q> = <var:f> }} <def:poly> {{ <var:t> = <nat:4> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:5> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:5> * <var:f> /\ <var:s2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:5> * <var:f> /\ <var:s2> = <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:5> * <var:f> /\ <var:s2> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:s0> = <nat:7> /\ <var:s1> = <nat:5> * <var:f> /\ <var:t> = <nat:4> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:s0> = <nat:7> /\ <var:t> = <nat:4> * <var:f> ^ <nat:2> + <nat:5> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:f> /\ <var:t> = <nat:4> * <var:f> ^ <nat:2> + <nat:5> * <var:f> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 