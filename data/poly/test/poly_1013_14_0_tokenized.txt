\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} : \begin{verbatim} <var:X0> := <nat:5> ; <var:X1> := <nat:9> ; <var:X1> := <var:X1> * <var:e> ; <var:X2> := <nat:8> ; <var:X2> := <var:X2> * <var:e> ; <var:X2> := <var:X2> * <var:e> ; <var:X3> := <nat:9> ; <var:X3> := <var:X3> * <var:e> ; <var:X3> := <var:X3> * <var:e> ; <var:X3> := <var:X3> * <var:e> ; <var:M> := <var:X3> ; <var:M> := <var:M> + <var:X2> ; <var:M> := <var:M> + <var:X1> ; <var:M> := <var:M> + <var:X0> \end{verbatim} Allowing it to be that $ <var:e> = <var:l> $ prior to evaluating this set of instructions , then we have $ <var:M> = <nat:9> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:5> $ . \end{theorem} \begin{proof} The proof of the code is shown by standard Hoare logic . Taking a look at the proceeding command seen in the set of commands , we see the variable update code assigning $ <nat:5> $ to $ <var:X0>$ . This statement moves $ \{ <var:e> = <var:l> \} $ as $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \} $ . Advancing on , the binding code defining $ <nat:9> $ to $ <var:X1>$ . This line redefines the condition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \} $ into the condition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \} $ . This is shown to be logically sound with the assignment law defined by Hoare techniques . Going to the next step , we have the variable binding code giving $ <var:X1> * <var:e> $ into $ <var:X1>$ . This advances $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \} $ into the postcondition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \} $ . This is known to be sound with the assignment inference rule defined by standard Hoare reasoning . Taking another step toward the upcoming step found in the code segment , we see the line \verb | <var:X2> := <nat:8> ; | . This forwards the precondition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \} $ as $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \} $ . This is shown to be logically sound by the assignment law given in Hoare logic . Moving on to the upcoming line of code seen in our code segment , we see the binding line \verb | <var:X2> := <var:X2> * <var:e> ; | . This command advances the condition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \} $ into $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> \} $ . This is ensured with the assignment rule of usual Hoare techniques . Taking another step toward the upcoming bit of code contained in our segment of code , we see the variable binding command letting $ <var:X2> * <var:e> $ into $ <var:X2>$ . This statement redefines $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> \} $ toward the postcondition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> ^ <nat:2> \} $ . Going to the next step , the variable binding code yielding $ <nat:9> $ as $ <var:X3>$ . This forwards $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> ^ <nat:2> \} $ as the condition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:X3> = <nat:9> \} $ . This is shown to be logically sound by the assignment inference rule defined in typical Hoare logic . Jumping to the following bit of code seen in the list of instructions , we have the variable binding line \verb | <var:X3> := <var:X3> * <var:e> ; | . This command moves the condition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:X3> = <nat:9> \} $ toward the condition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:X3> = <nat:9> \cdot <var:l> \} $ . This is known to be sound by the assignment inference rule found in standard Hoare logic . Shifting focus toward the upcoming piece of code contained in the list of instructions , the variable binding command \verb | <var:X3> := <var:X3> * <var:e> ; | . This redefines the precondition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:X3> = <nat:9> \cdot <var:l> \} $ as the postcondition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:X3> = <nat:9> \cdot <var:l> ^ <nat:2> \} $ . Shifting focus toward the proceeding line in our set of commands , we have the environment update line \verb | <var:X3> := <var:X3> * <var:e> ; | . This line forwards $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:X3> = <nat:9> \cdot <var:l> ^ <nat:2> \} $ toward the condition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:X3> = <nat:9> \cdot <var:l> ^ <nat:3> \} $ . Immediately following , the assignment statement giving $ <var:X3> $ to $ <var:M>$ . This moves $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:X3> = <nat:9> \cdot <var:l> ^ <nat:3> \} $ into $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:M> = <nat:9> \cdot <var:l> ^ <nat:3> \} $ . This is rigorously given by the assignment rule found in standard Hoare techniques . Moving on , we have the binding code assigning $ <var:M> + <var:X2> $ as $ <var:M>$ . This forwards $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:X2> = <nat:8> \cdot <var:l> ^ <nat:2> \land <var:M> = <nat:9> \cdot <var:l> ^ <nat:3> \} $ into the condition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:M> = <nat:9> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment inference rule found in typical Hoare reasoning . Moving on to the subsequent command seen in our series of commands , we see the variable binding code letting $ <var:M> + <var:X1> $ toward $ <var:M>$ . This command moves $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:X1> = <nat:9> \cdot <var:l> \land <var:M> = <nat:9> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> \} $ as the postcondition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:M> = <nat:9> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> + <nat:9> \cdot <var:l> \} $ . Further , we have the binding line \verb | <var:M> := <var:M> + <var:X0> | . This statement forwards the precondition $ \{ <var:e> = <var:l> \land <var:X0> = <nat:5> \land <var:M> = <nat:9> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> + <nat:9> \cdot <var:l> \} $ into $ \{ <var:e> = <var:l> \land <var:M> = <nat:9> \cdot <var:l> ^ <nat:3> + <nat:8> \cdot <var:l> ^ <nat:2> + <nat:9> \cdot <var:l> + <nat:5> \} $ . This is guaranteed using the assignment inference rule in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:e> = <var:l> }} <var:X0> := <nat:5> ; <var:X1> := <nat:9> ; <var:X1> := <var:X1> * <var:e> ; <var:X2> := <nat:8> ; <var:X2> := <var:X2> * <var:e> ; <var:X2> := <var:X2> * <var:e> ; <var:X3> := <nat:9> ; <var:X3> := <var:X3> * <var:e> ; <var:X3> := <var:X3> * <var:e> ; <var:X3> := <var:X3> * <var:e> ; <var:M> := <var:X3> ; <var:M> := <var:M> + <var:X2> ; <var:M> := <var:M> + <var:X1> ; <var:M> := <var:M> + <var:X0> {{ <var:M> = <nat:9> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:X3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:X3> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:X3> = <nat:9> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:X3> = <nat:9> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:9> * <var:l> /\ <var:X2> = <nat:8> * <var:l> ^ <nat:2> /\ <var:M> = <nat:9> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:X0> = <nat:5> /\ <var:X1> = <nat:9> * <var:l> /\ <var:M> = <nat:9> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:X0> = <nat:5> /\ <var:M> = <nat:9> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:l> /\ <var:M> = <nat:9> * <var:l> ^ <nat:3> + <nat:8> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 