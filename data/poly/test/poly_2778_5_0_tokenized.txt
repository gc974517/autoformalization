\begin{document} \begin{theorem} We define the following program such that \begin{verbatim} <var:M0> := <nat:6> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:l> ; <var:E> := <var:M1> ; <var:E> := <var:E> + <var:M0> \end{verbatim} Allowing that $ <var:l> = <var:G> $ ahead of executing the code segment , it follows that $ <var:E> = <nat:9> * <var:G> + <nat:6> $ . \end{theorem} \begin{proof} The course of logic for our series of instructions can be done using usual Hoare reasoning . Looking at the subsequent command in the list of instructions , we see the environment update line \verb | <var:M0> := <nat:6> ; | . This advances $ \{ <var:l> = <var:G> \} $ into $ \{ <var:l> = <var:G> \land <var:M0> = <nat:6> \} $ . This is deduced using the assignment rule found in Hoare logic . Moving forward to the next step , we see the variable update statement yielding $ <nat:9> $ into $ <var:M1>$ . This transfers the condition $ \{ <var:l> = <var:G> \land <var:M0> = <nat:6> \} $ into the condition $ \{ <var:l> = <var:G> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \} $ . Moving on to the subsequent step in the series of commands , we have the code \verb | <var:M1> := <var:M1> * <var:l> ; | . This moves the precondition $ \{ <var:l> = <var:G> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \} $ into $ \{ <var:l> = <var:G> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \cdot <var:G> \} $ . Advancing to the next step , we have the environment update command \verb | <var:E> := <var:M1> ; | . This moves the precondition $ \{ <var:l> = <var:G> \land <var:M0> = <nat:6> \land <var:M1> = <nat:9> \cdot <var:G> \} $ to the postcondition $ \{ <var:l> = <var:G> \land <var:M0> = <nat:6> \land <var:E> = <nat:9> \cdot <var:G> \} $ . This is ensured through the assignment rule defined in typical Hoare techniques . Taking a look at the following bit of code seen in our program , we see the assignment statement defining $ <var:E> + <var:M0$ into $ <var:E>$ . This statement moves the condition $ \{ <var:l> = <var:G> \land <var:M0> = <nat:6> \land <var:E> = <nat:9> \cdot <var:G> \} $ into $ \{ <var:l> = <var:G> \land <var:E> = <nat:9> \cdot <var:G> + <nat:6> \} $ . This is rigorously given by the assignment scheme given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:l> = <var:G> }} <var:M0> := <nat:6> ; <var:M1> := <nat:9> ; <var:M1> := <var:M1> * <var:l> ; <var:E> := <var:M1> ; <var:E> := <var:E> + <var:M0> {{ <var:E> = <nat:9> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:M0> = <nat:6> /\ <var:E> = <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:G> /\ <var:E> = <nat:9> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 