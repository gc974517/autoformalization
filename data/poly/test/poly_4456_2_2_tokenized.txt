\begin{document} \begin{theorem} We define the following list of commands such that \begin{verbatim} <var:D> := <nat:1> ; <var:D> := <nat:2> + <var:D> * <var:J> \end{verbatim} Assuming it to be that $ <var:J> = <var:s> $ given any whole numbers $ <var:s> $ before the evaluation of this list of commands then $ <var:D> = <nat:1> \cdot <var:s> + <nat:2> $ once segment of code is done executing . \end{theorem} \begin{proof} The flow of logic for this program can be accomplished with usual Hoare techniques . Shifting focus toward the proceeding statement seen in the set of instructions , we have \verb | { <var:J> = <var:s> } <var:D> := <nat:1> { <var:J> = <var:s> \land <var:D> = <nat:1> } | . This is guaranteed through the variable assignmet scheme in typical Hoare reasoning . Taking another step toward the upcoming line found in the set of commands , we have \verb | { <var:J> = <var:s> } <var:D> := <nat:1> { <var:J> = <var:s> \land <var:D> = <nat:1> } | . This is ensured by the assignment scheme given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:J> = <var:s> }} <var:D> := <nat:1> ; <var:D> := <nat:2> + <var:D> * <var:J> {{ <var:D> = <nat:1> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:D> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:D> = <nat:1> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 