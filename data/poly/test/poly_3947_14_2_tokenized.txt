\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:R> := <nat:4> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <nat:4> + <var:R> * <var:y> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <var:R> * <var:y> ; <var:R> := <nat:1> + <var:R> * <var:y> ; <var:R> := <var:R> * <var:y> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <nat:3> + <var:R> * <var:y> ; <var:R> := <var:R> * <var:y> ; <var:R> := <nat:4> + <var:R> * <var:y> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <nat:1> + <var:R> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Allowing $ <var:y> = <var:I> $ before interpreting our list of commands then we see $ <var:R> = <nat:4> \cdot <var:I> ^ <nat:13> + <nat:2> \cdot <var:I> ^ <nat:12> + <nat:4> \cdot <var:I> ^ <nat:11> + <nat:2> \cdot <var:I> ^ <nat:10> + <nat:1> \cdot <var:I> ^ <nat:8> + <nat:2> \cdot <var:I> ^ <nat:6> + <nat:3> \cdot <var:I> ^ <nat:5> + <nat:4> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:1> $ once list of commands exits . \end{theorem} \begin{proof} The way to prove correctness for this set of commands can be given with standard Hoare techniques . Moving onward , we see the environment update statement \verb | <var:R> := <nat:4> ; | . This forwards $ \{ <var:y> = <var:I> \} $ as $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \} $ . This is guaranteed by the assignment scheme from standard Hoare logic . Observing the upcoming line seen in our code , we see the assignment code \verb | <var:R> := <nat:2> + <var:R> * <var:y> ; | . This line forwards $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \} $ as the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> + <nat:2> \} $ . Moving on to the upcoming line of code found in our list of commands , we see the environment update code defining $ <nat:4> + <var:R> * <var:y> $ toward $ <var:R>$ . This redefines the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> + <nat:2> \} $ toward the postcondition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:4> \} $ . This is given by the assignment inference rule defined in Hoare techniques . Observing the following line found in our segment of code , we have the environment update statement \verb | <var:R> := <nat:2> + <var:R> * <var:y> ; | . This code advances the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:4> \} $ as $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + <nat:2> \} $ . Moving forward to the next step , the line \verb | <var:R> := <var:R> * <var:y> ; | . This takes the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + <nat:2> \} $ toward the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + \} $ . Moving forward , we have the line \verb | <var:R> := <nat:1> + <var:R> * <var:y> ; | . This redefines $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + \} $ toward the postcondition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:5> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:4> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:1> \} $ . Moving forward to the next step seen in the list of commands , we see the variable update command \verb | <var:R> := <var:R> * <var:y> ; | . This redefines the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:5> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:4> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:1> \} $ toward the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:6> + <nat:2> \cdot <var:I> ^ <nat:5> + <nat:4> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> + \} $ . Observing the following command found in our list of commands , the command yielding $ <nat:2> + <var:R> * <var:y> $ into $ <var:R>$ . This code redefines the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:6> + <nat:2> \cdot <var:I> ^ <nat:5> + <nat:4> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:1> \cdot <var:I> + \} $ into the postcondition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:7> + <nat:2> \cdot <var:I> ^ <nat:6> + <nat:4> \cdot <var:I> ^ <nat:5> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:2> \} $ . This is known to be sound through the assignment law defined in Hoare reasoning . Advancing to the proceeding line seen in the set of commands , the variable update line yielding $ <nat:3> + <var:R> * <var:y> $ to $ <var:R>$ . This statement takes the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:7> + <nat:2> \cdot <var:I> ^ <nat:6> + <nat:4> \cdot <var:I> ^ <nat:5> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:1> \cdot <var:I> ^ <nat:2> + <nat:2> \} $ as the postcondition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:8> + <nat:2> \cdot <var:I> ^ <nat:7> + <nat:4> \cdot <var:I> ^ <nat:6> + <nat:2> \cdot <var:I> ^ <nat:5> + <nat:1> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> + <nat:3> \} $ . Now , we have the variable assignmet code \verb | <var:R> := <var:R> * <var:y> ; | . This code redefines the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:8> + <nat:2> \cdot <var:I> ^ <nat:7> + <nat:4> \cdot <var:I> ^ <nat:6> + <nat:2> \cdot <var:I> ^ <nat:5> + <nat:1> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> + <nat:3> \} $ as $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:9> + <nat:2> \cdot <var:I> ^ <nat:8> + <nat:4> \cdot <var:I> ^ <nat:7> + <nat:2> \cdot <var:I> ^ <nat:6> + <nat:1> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + \} $ . Moving on , we have the binding code assigning $ <nat:4> + <var:R> * <var:y> $ as $ <var:R>$ . This code redefines the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:9> + <nat:2> \cdot <var:I> ^ <nat:8> + <nat:4> \cdot <var:I> ^ <nat:7> + <nat:2> \cdot <var:I> ^ <nat:6> + <nat:1> \cdot <var:I> ^ <nat:4> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:3> \cdot <var:I> + \} $ toward the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:10> + <nat:2> \cdot <var:I> ^ <nat:9> + <nat:4> \cdot <var:I> ^ <nat:8> + <nat:2> \cdot <var:I> ^ <nat:7> + <nat:1> \cdot <var:I> ^ <nat:5> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:4> \} $ . Considering the subsequent statement in our list of commands , we see the variable binding command defining $ <nat:2> + <var:R> * <var:y> $ into $ <var:R>$ . This transfers $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:10> + <nat:2> \cdot <var:I> ^ <nat:9> + <nat:4> \cdot <var:I> ^ <nat:8> + <nat:2> \cdot <var:I> ^ <nat:7> + <nat:1> \cdot <var:I> ^ <nat:5> + <nat:2> \cdot <var:I> ^ <nat:3> + <nat:3> \cdot <var:I> ^ <nat:2> + <nat:4> \} $ to the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:11> + <nat:2> \cdot <var:I> ^ <nat:10> + <nat:4> \cdot <var:I> ^ <nat:9> + <nat:2> \cdot <var:I> ^ <nat:8> + <nat:1> \cdot <var:I> ^ <nat:6> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> + <nat:2> \} $ . This is shown using the assignment law defined by Hoare techniques . Going forward , we see the assignment command \verb | <var:R> := <nat:2> + <var:R> * <var:y> ; | . This code redefines the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:11> + <nat:2> \cdot <var:I> ^ <nat:10> + <nat:4> \cdot <var:I> ^ <nat:9> + <nat:2> \cdot <var:I> ^ <nat:8> + <nat:1> \cdot <var:I> ^ <nat:6> + <nat:2> \cdot <var:I> ^ <nat:4> + <nat:3> \cdot <var:I> ^ <nat:3> + <nat:4> \cdot <var:I> + <nat:2> \} $ as $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:12> + <nat:2> \cdot <var:I> ^ <nat:11> + <nat:4> \cdot <var:I> ^ <nat:10> + <nat:2> \cdot <var:I> ^ <nat:9> + <nat:1> \cdot <var:I> ^ <nat:7> + <nat:2> \cdot <var:I> ^ <nat:5> + <nat:3> \cdot <var:I> ^ <nat:4> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:2> \} $ . Further , we see the environment update statement \verb | <var:R> := <nat:1> + <var:R> * <var:y> | . This moves the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:12> + <nat:2> \cdot <var:I> ^ <nat:11> + <nat:4> \cdot <var:I> ^ <nat:10> + <nat:2> \cdot <var:I> ^ <nat:9> + <nat:1> \cdot <var:I> ^ <nat:7> + <nat:2> \cdot <var:I> ^ <nat:5> + <nat:3> \cdot <var:I> ^ <nat:4> + <nat:4> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:2> \} $ toward the condition $ \{ <var:y> = <var:I> \land <var:R> = <nat:4> \cdot <var:I> ^ <nat:13> + <nat:2> \cdot <var:I> ^ <nat:12> + <nat:4> \cdot <var:I> ^ <nat:11> + <nat:2> \cdot <var:I> ^ <nat:10> + <nat:1> \cdot <var:I> ^ <nat:8> + <nat:2> \cdot <var:I> ^ <nat:6> + <nat:3> \cdot <var:I> ^ <nat:5> + <nat:4> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:2> \cdot <var:I> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:R> := <nat:4> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <nat:4> + <var:R> * <var:y> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <var:R> * <var:y> ; <var:R> := <nat:1> + <var:R> * <var:y> ; <var:R> := <var:R> * <var:y> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <nat:3> + <var:R> * <var:y> ; <var:R> := <var:R> * <var:y> ; <var:R> := <nat:4> + <var:R> * <var:y> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <nat:2> + <var:R> * <var:y> ; <var:R> := <nat:1> + <var:R> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:y> = <var:I> }} <def:poly> {{ <var:R> = <nat:4> * <var:I> ^ <nat:13> + <nat:2> * <var:I> ^ <nat:12> + <nat:4> * <var:I> ^ <nat:11> + <nat:2> * <var:I> ^ <nat:10> + <nat:1> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:3> + <nat:1> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:9> + <nat:2> * <var:I> ^ <nat:8> + <nat:4> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:10> + <nat:2> * <var:I> ^ <nat:9> + <nat:4> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:3> + <nat:3> * <var:I> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:11> + <nat:2> * <var:I> ^ <nat:10> + <nat:4> * <var:I> ^ <nat:9> + <nat:2> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:12> + <nat:2> * <var:I> ^ <nat:11> + <nat:4> * <var:I> ^ <nat:10> + <nat:2> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:R> = <nat:4> * <var:I> ^ <nat:13> + <nat:2> * <var:I> ^ <nat:12> + <nat:4> * <var:I> ^ <nat:11> + <nat:2> * <var:I> ^ <nat:10> + <nat:1> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 