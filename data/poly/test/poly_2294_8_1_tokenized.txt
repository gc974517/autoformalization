\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x1> := <var:Q> ; <var:x2> := <var:x1> * <var:Q> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:2> ; <var:x2> := <var:x2> * <nat:7> ; <var:i> := <var:x2> <var:i> := <var:i> + <var:x1> <var:i> := <var:i> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> in \emph{Imp} . Assume it to be that $ <var:Q> = <var:n> $ given every positive coefficients $ <var:n> $ ahead of the execution of the set of commands it must be that we have $ <var:i> = <nat:7> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:2> $ once set of commands has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:n> \} \\ <var:x1> := <var:Q> ; \\ \{ <var:Q> = <var:n> \land <var:x1> = <var:n> \} \\ <var:x2> := <var:x1> * <var:Q> ; \\ \{ <var:Q> = <var:n> \land <var:x1> = <var:n> \land <var:x2> = <var:n> ^ <nat:2> \} \\ <var:x0> := <nat:2> ; \\ \{ <var:Q> = <var:n> \land <var:x1> = <var:n> \land <var:x2> = <var:n> ^ <nat:2> \land <var:x0> = <nat:2> \} \\ <var:x1> := <var:x1> * <nat:2> ; \\ \{ <var:Q> = <var:n> \land <var:x1> = <nat:2> \cdot <var:n> \land <var:x2> = <var:n> ^ <nat:2> \land <var:x0> = <nat:2> \} \\ <var:x2> := <var:x2> * <nat:7> ; \\ \{ <var:Q> = <var:n> \land <var:x1> = <nat:2> \cdot <var:n> \land <var:x2> = <nat:7> \cdot <var:n> ^ <nat:2> \land <var:x0> = <nat:2> \} \\ <var:i> := <var:x2> \\ \{ <var:Q> = <var:n> \land <var:x1> = <nat:2> \cdot <var:n> \land <var:x0> = <nat:2> \land <var:i> = <nat:7> \cdot <var:n> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:x1> \\ \{ <var:Q> = <var:n> \land <var:x0> = <nat:2> \land <var:i> = <nat:7> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> \} \\ <var:i> := <var:i> + <var:x0> \\ \{ <var:Q> = <var:n> \land <var:i> = <nat:7> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:2> \} \end{eqnarray} Utilizing typical Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <def:poly> := <var:x1> := <var:Q> ; <var:x2> := <var:x1> * <var:Q> ; <var:x0> := <nat:2> ; <var:x1> := <var:x1> * <nat:2> ; <var:x2> := <var:x2> * <nat:7> ; <var:i> := <var:x2> <var:i> := <var:i> + <var:x1> <var:i> := <var:i> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:Q> = <var:n> }} <def:poly> {{ <var:i> = <nat:7> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:x1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:x1> = <var:n> /\ <var:x2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:x1> = <var:n> /\ <var:x2> = <var:n> ^ <nat:2> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:x1> = <nat:2> * <var:n> /\ <var:x2> = <var:n> ^ <nat:2> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:x1> = <nat:2> * <var:n> /\ <var:x2> = <nat:7> * <var:n> ^ <nat:2> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:x1> = <nat:2> * <var:n> /\ <var:x0> = <nat:2> /\ <var:i> = <nat:7> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:x0> = <nat:2> /\ <var:i> = <nat:7> * <var:n> ^ <nat:2> + <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:n> /\ <var:i> = <nat:7> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 