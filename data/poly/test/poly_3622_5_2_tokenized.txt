\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U> := <nat:3> ; <var:U> := <var:U> * <var:X> ; <var:U> := <nat:3> + <var:U> * <var:X> ; <var:U> := <nat:2> + <var:U> * <var:X> ; <var:U> := <nat:3> + <var:U> * <var:X> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> in \emph{Imp} . Assume that we have $ <var:X> = <var:O> $ ahead of the evaluation of our set of instructions , it must be that we see $ <var:U> = <nat:3> \times <var:O> ^ <nat:4> + <nat:3> \times <var:O> ^ <nat:2> + <nat:2> \times <var:O> + <nat:3> $ after list of commands finishes . \end{theorem} \begin{proof} Applying Hoare logic gives us : \begin{eqnarray} \{ <var:X> = <var:O> \} \\ <var:U> := <nat:3> ; \\ \{ <var:X> = <var:O> \land <var:U> = <nat:3> \} \\ <var:U> := <var:U> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:U> = <nat:3> * <var:O> + \} \\ <var:U> := <nat:3> + <var:U> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:U> = <nat:3> * <var:O> ^ <nat:2> + <nat:3> \} \\ <var:U> := <nat:2> + <var:U> * <var:X> ; \\ \{ <var:X> = <var:O> \land <var:U> = <nat:3> * <var:O> ^ <nat:3> + <nat:3> * <var:O> + <nat:2> \} \\ <var:U> := <nat:3> + <var:U> * <var:X> \\ \{ <var:X> = <var:O> \land <var:U> = <nat:3> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:3> \} \end{eqnarray} As a consequence , this list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:3> ; <var:U> := <var:U> * <var:X> ; <var:U> := <nat:3> + <var:U> * <var:X> ; <var:U> := <nat:2> + <var:U> * <var:X> ; <var:U> := <nat:3> + <var:U> * <var:X> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:X> = <var:O> }} <def:poly> {{ <var:U> = <nat:3> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:U> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:U> = <nat:3> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:U> = <nat:3> * <var:O> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:U> = <nat:3> * <var:O> ^ <nat:3> + <nat:3> * <var:O> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:O> /\ <var:U> = <nat:3> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 