\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} as \begin{verbatim} <var:s1> := <var:R> ; <var:s2> := <var:s1> * <var:R> ; <var:s3> := <var:s2> * <var:R> ; <var:s4> := <var:s3> * <var:R> ; <var:s0> := <nat:8> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:6> ; <var:s3> := <var:s3> * <nat:5> ; <var:s4> := <var:s4> * <nat:2> ; <var:E> := <var:s4> <var:E> := <var:E> + <var:s3> <var:E> := <var:E> + <var:s2> <var:E> := <var:E> + <var:s1> <var:E> := <var:E> + <var:s0> \end{verbatim} Given that $ <var:R> = <var:k> $ ahead of running the list of instructions it holds that $ <var:E> = <nat:2> \times <var:k> ^ <nat:4> + <nat:5> \times <var:k> ^ <nat:3> + <nat:6> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques gives us : \begin{eqnarray} \{ <var:R> = <var:k> \} \\ <var:s1> := <var:R> ; \\ \{ <var:R> = <var:k> \land <var:s1> = <var:k> \} \\ <var:s2> := <var:s1> * <var:R> ; \\ \{ <var:R> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:R> ; \\ \{ <var:R> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> \} \\ <var:s4> := <var:s3> * <var:R> ; \\ \{ <var:R> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> \land <var:s4> = <var:k> ^ <nat:4> \} \\ <var:s0> := <nat:8> ; \\ \{ <var:R> = <var:k> \land <var:s1> = <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> \land <var:s4> = <var:k> ^ <nat:4> \land <var:s0> = <nat:8> \} \\ <var:s1> := <var:s1> * <nat:4> ; \\ \{ <var:R> = <var:k> \land <var:s1> = <nat:4> \times <var:k> \land <var:s2> = <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> \land <var:s4> = <var:k> ^ <nat:4> \land <var:s0> = <nat:8> \} \end{eqnarray} Continuing executing our code segment gives us : \begin{eqnarray} <var:s2> := <var:s2> * <nat:6> ; \\ \{ <var:R> = <var:k> \land <var:s1> = <nat:4> \times <var:k> \land <var:s2> = <nat:6> \times <var:k> ^ <nat:2> \land <var:s3> = <var:k> ^ <nat:3> \land <var:s4> = <var:k> ^ <nat:4> \land <var:s0> = <nat:8> \} \\ <var:s3> := <var:s3> * <nat:5> ; \\ \{ <var:R> = <var:k> \land <var:s1> = <nat:4> \times <var:k> \land <var:s2> = <nat:6> \times <var:k> ^ <nat:2> \land <var:s3> = <nat:5> \times <var:k> ^ <nat:3> \land <var:s4> = <var:k> ^ <nat:4> \land <var:s0> = <nat:8> \} \\ <var:s4> := <var:s4> * <nat:2> ; \\ \{ <var:R> = <var:k> \land <var:s1> = <nat:4> \times <var:k> \land <var:s2> = <nat:6> \times <var:k> ^ <nat:2> \land <var:s3> = <nat:5> \times <var:k> ^ <nat:3> \land <var:s4> = <nat:2> \times <var:k> ^ <nat:4> \land <var:s0> = <nat:8> \} \\ <var:E> := <var:s4> \\ \{ <var:R> = <var:k> \land <var:s1> = <nat:4> \times <var:k> \land <var:s2> = <nat:6> \times <var:k> ^ <nat:2> \land <var:s3> = <nat:5> \times <var:k> ^ <nat:3> \land <var:s0> = <nat:8> \land <var:E> = <nat:2> \times <var:k> ^ <nat:4> \} \\ <var:E> := <var:E> + <var:s3> \\ \{ <var:R> = <var:k> \land <var:s1> = <nat:4> \times <var:k> \land <var:s2> = <nat:6> \times <var:k> ^ <nat:2> \land <var:s0> = <nat:8> \land <var:E> = <nat:2> \times <var:k> ^ <nat:4> + <nat:5> \times <var:k> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:s2> \\ \{ <var:R> = <var:k> \land <var:s1> = <nat:4> \times <var:k> \land <var:s0> = <nat:8> \land <var:E> = <nat:2> \times <var:k> ^ <nat:4> + <nat:5> \times <var:k> ^ <nat:3> + <nat:6> \times <var:k> ^ <nat:2> \} \end{eqnarray} Continuing running our code produces : \begin{eqnarray} <var:E> := <var:E> + <var:s1> \\ \{ <var:R> = <var:k> \land <var:s0> = <nat:8> \land <var:E> = <nat:2> \times <var:k> ^ <nat:4> + <nat:5> \times <var:k> ^ <nat:3> + <nat:6> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> \} \\ <var:E> := <var:E> + <var:s0> \\ \{ <var:R> = <var:k> \land <var:E> = <nat:2> \times <var:k> ^ <nat:4> + <nat:5> \times <var:k> ^ <nat:3> + <nat:6> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:8> \} \end{eqnarray} As a result , our program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <var:s4> : string := " <var:s4> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:R> = <var:k> }} <var:s1> := <var:R> ; <var:s2> := <var:s1> * <var:R> ; <var:s3> := <var:s2> * <var:R> ; <var:s4> := <var:s3> * <var:R> ; <var:s0> := <nat:8> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:6> ; <var:s3> := <var:s3> * <nat:5> ; <var:s4> := <var:s4> * <nat:2> ; <var:E> := <var:s4> <var:E> := <var:E> + <var:s3> <var:E> := <var:E> + <var:s2> <var:E> := <var:E> + <var:s1> <var:E> := <var:E> + <var:s0> {{ <var:E> = <nat:2> * <var:k> ^ <nat:4> + <nat:5> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s1> = <var:k> /\ <var:s2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s1> = <var:k> /\ <var:s2> = <var:k> ^ <nat:2> /\ <var:s3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s1> = <var:k> /\ <var:s2> = <var:k> ^ <nat:2> /\ <var:s3> = <var:k> ^ <nat:3> /\ <var:s4> = <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s1> = <var:k> /\ <var:s2> = <var:k> ^ <nat:2> /\ <var:s3> = <var:k> ^ <nat:3> /\ <var:s4> = <var:k> ^ <nat:4> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <var:k> ^ <nat:2> /\ <var:s3> = <var:k> ^ <nat:3> /\ <var:s4> = <var:k> ^ <nat:4> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:s3> = <var:k> ^ <nat:3> /\ <var:s4> = <var:k> ^ <nat:4> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:s3> = <nat:5> * <var:k> ^ <nat:3> /\ <var:s4> = <var:k> ^ <nat:4> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:s3> = <nat:5> * <var:k> ^ <nat:3> /\ <var:s4> = <nat:2> * <var:k> ^ <nat:4> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:s3> = <nat:5> * <var:k> ^ <nat:3> /\ <var:s0> = <nat:8> /\ <var:E> = <nat:2> * <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s2> = <nat:6> * <var:k> ^ <nat:2> /\ <var:s0> = <nat:8> /\ <var:E> = <nat:2> * <var:k> ^ <nat:4> + <nat:5> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s1> = <nat:4> * <var:k> /\ <var:s0> = <nat:8> /\ <var:E> = <nat:2> * <var:k> ^ <nat:4> + <nat:5> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:s0> = <nat:8> /\ <var:E> = <nat:2> * <var:k> ^ <nat:4> + <nat:5> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> + <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:k> /\ <var:E> = <nat:2> * <var:k> ^ <nat:4> + <nat:5> * <var:k> ^ <nat:3> + <nat:6> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 