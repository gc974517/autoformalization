\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:Y> ; <var:Q2> := <var:Q1> * <var:Y> ; <var:Q3> := <var:Q2> * <var:Y> ; <var:Q4> := <var:Q3> * <var:Y> ; <var:Q0> := <nat:5> ; <var:Q2> := <var:Q2> * <nat:4> ; <var:Q3> := <var:Q3> * <nat:9> ; <var:Q4> := <var:Q4> * <nat:9> ; <var:q> := <var:Q4> <var:q> := <var:q> + <var:Q3> <var:q> := <var:q> + <var:Q2> <var:q> := <var:q> + <var:Q0> \end{verbatim} Assume ( given some natural coefficients $ <var:J> $ ) it to hold that $ <var:Y> = <var:J> $ prior to interpreting the series of commands , it holds that $ <var:q> = <nat:9> * <var:J> ^ <nat:4> + <nat:9> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:5> $ once series of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions can be given using standard Hoare reasoning . Taking another step toward the next statement seen in the code segment , we see the environment update statement binding $ <var:Y> $ toward $ <var:Q1>$ . This takes $ \{ <var:Y> = <var:J> \} $ toward $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \} $ . Further , we see the environment update line \verb | <var:Q2> := <var:Q1> * <var:Y> ; | . This forwards $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \} $ toward the postcondition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \} $ . Moving onward , we see the variable binding code binding $ <var:Q2> * <var:Y> $ toward $ <var:Q3>$ . This command transfers the precondition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \} $ toward $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \} $ . This is given with the assignment law defined by typical Hoare reasoning . Honing in on the following piece of code in the set of commands , we see the variable update code letting $ <var:Q3> * <var:Y> $ into $ <var:Q4>$ . This statement advances the precondition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \} $ as the postcondition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \land <var:Q4> = <var:J> ^ <nat:4> \} $ . After , the variable update line \verb | <var:Q0> := <nat:5> ; | . This statement moves the condition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \land <var:Q4> = <var:J> ^ <nat:4> \} $ as $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \land <var:Q4> = <var:J> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ . This is ensured with the assignment inference rule obtained from usual Hoare techniques . Immediately following , the code \verb | <var:Q2> := <var:Q2> * <nat:4> ; | . This forwards the condition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \land <var:Q4> = <var:J> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ toward the postcondition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \land <var:Q4> = <var:J> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ . Going to the next step , we have the variable update line defining $ <var:Q3> * <nat:9> $ toward $ <var:Q3>$ . This command forwards the precondition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:Q3> = <var:J> ^ <nat:3> \land <var:Q4> = <var:J> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ into $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:Q3> = <nat:9> \times <var:J> ^ <nat:3> \land <var:Q4> = <var:J> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ . Taking a look at the subsequent line contained in our set of commands , we have the variable binding statement yielding $ <var:Q4> * <nat:9> $ toward $ <var:Q4>$ . This command transfers the precondition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:Q3> = <nat:9> \times <var:J> ^ <nat:3> \land <var:Q4> = <var:J> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ into $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:Q3> = <nat:9> \times <var:J> ^ <nat:3> \land <var:Q4> = <nat:9> \times <var:J> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ . This is ensured through the assignment law found in usual Hoare logic . Moving on to the upcoming piece of code found in our series of commands , the variable assignmet code \verb | <var:q> := <var:Q4> | . This code moves the precondition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:Q3> = <nat:9> \times <var:J> ^ <nat:3> \land <var:Q4> = <nat:9> \times <var:J> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ to the postcondition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:Q3> = <nat:9> \times <var:J> ^ <nat:3> \land <var:Q0> = <nat:5> \land <var:q> = <nat:9> \times <var:J> ^ <nat:4> \} $ . Honing in on the next statement in the segment of code , we have the variable assignmet line assigning $ <var:q> + <var:Q3$ toward $ <var:q>$ . This line advances the precondition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:Q3> = <nat:9> \times <var:J> ^ <nat:3> \land <var:Q0> = <nat:5> \land <var:q> = <nat:9> \times <var:J> ^ <nat:4> \} $ as the condition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:Q0> = <nat:5> \land <var:q> = <nat:9> \times <var:J> ^ <nat:4> + <nat:9> \times <var:J> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment rule obtained from Hoare techniques . Stepping forward , the binding command letting $ <var:q> + <var:Q2$ as $ <var:q>$ . This forwards $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:Q0> = <nat:5> \land <var:q> = <nat:9> \times <var:J> ^ <nat:4> + <nat:9> \times <var:J> ^ <nat:3> \} $ to $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q0> = <nat:5> \land <var:q> = <nat:9> \times <var:J> ^ <nat:4> + <nat:9> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> \} $ . Jumping to the upcoming line of code found in our code , the binding command assigning $ <var:q> + <var:Q0$ into $ <var:q>$ . This advances the precondition $ \{ <var:Y> = <var:J> \land <var:Q1> = <var:J> \land <var:Q0> = <nat:5> \land <var:q> = <nat:9> \times <var:J> ^ <nat:4> + <nat:9> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> \} $ into the postcondition $ \{ <var:Y> = <var:J> \land <var:q> = <nat:9> \times <var:J> ^ <nat:4> + <nat:9> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <var:Q4> : string := " <var:Q4> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Y> = <var:J> }} <var:Q1> := <var:Y> ; <var:Q2> := <var:Q1> * <var:Y> ; <var:Q3> := <var:Q2> * <var:Y> ; <var:Q4> := <var:Q3> * <var:Y> ; <var:Q0> := <nat:5> ; <var:Q2> := <var:Q2> * <nat:4> ; <var:Q3> := <var:Q3> * <nat:9> ; <var:Q4> := <var:Q4> * <nat:9> ; <var:q> := <var:Q4> <var:q> := <var:q> + <var:Q3> <var:q> := <var:q> + <var:Q2> <var:q> := <var:q> + <var:Q0> {{ <var:q> = <nat:9> * <var:J> ^ <nat:4> + <nat:9> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:Q1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> /\ <var:Q3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> /\ <var:Q3> = <var:J> ^ <nat:3> /\ <var:Q4> = <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <var:J> ^ <nat:2> /\ <var:Q3> = <var:J> ^ <nat:3> /\ <var:Q4> = <var:J> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:Q3> = <var:J> ^ <nat:3> /\ <var:Q4> = <var:J> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:Q3> = <nat:9> * <var:J> ^ <nat:3> /\ <var:Q4> = <var:J> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:Q3> = <nat:9> * <var:J> ^ <nat:3> /\ <var:Q4> = <nat:9> * <var:J> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:Q3> = <nat:9> * <var:J> ^ <nat:3> /\ <var:Q0> = <nat:5> /\ <var:q> = <nat:9> * <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:Q0> = <nat:5> /\ <var:q> = <nat:9> * <var:J> ^ <nat:4> + <nat:9> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:Q1> = <var:J> /\ <var:Q0> = <nat:5> /\ <var:q> = <nat:9> * <var:J> ^ <nat:4> + <nat:9> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:q> = <nat:9> * <var:J> ^ <nat:4> + <nat:9> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 