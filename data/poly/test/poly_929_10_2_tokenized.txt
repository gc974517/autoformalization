\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:c> := <nat:2> ; <var:c> := <var:c> * <var:r> ; <var:c> := <nat:3> + <var:c> * <var:r> ; <var:c> := <var:c> * <var:r> ; <var:c> := <nat:2> + <var:c> * <var:r> ; <var:c> := <nat:4> + <var:c> * <var:r> ; <var:c> := <nat:1> + <var:c> * <var:r> ; <var:c> := <var:c> * <var:r> ; <var:c> := <var:c> * <var:r> ; <var:c> := <nat:2> + <var:c> * <var:r> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Assuming given any natural coefficients $ <var:n> $ that $ <var:r> = <var:n> $ ahead of the evaluation of this set of instructions it must be that we see $ <var:c> = <nat:2> \cdot <var:n> ^ <nat:9> + <nat:3> \cdot <var:n> ^ <nat:7> + <nat:2> \cdot <var:n> ^ <nat:5> + <nat:4> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions can be demonstrated with standard Hoare reasoning . Moving on to the proceeding step in the set of commands , we have the environment update code \verb | <var:c> := <nat:2> ; | . This line advances $ \{ <var:r> = <var:n> \} $ toward the condition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \} $ . Next , the code \verb | <var:c> := <var:c> * <var:r> ; | . This transfers the condition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \} $ to $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> + \} $ . Going to the next step , we have the environment update command binding $ <nat:3> + <var:c> * <var:r> $ toward $ <var:c>$ . This code takes the precondition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> + \} $ into the condition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:2> + <nat:3> \} $ . Going to the next step , we see the variable binding command \verb | <var:c> := <var:c> * <var:r> ; | . This statement redefines the precondition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:2> + <nat:3> \} $ into the condition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> + \} $ . This is shown by the assignment scheme given by usual Hoare logic . Shifting focus toward the following line of code contained in our series of instructions , the variable update line letting $ <nat:2> + <var:c> * <var:r> $ to $ <var:c>$ . This redefines the condition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:3> + <nat:3> \cdot <var:n> + \} $ as the postcondition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:4> + <nat:3> \cdot <var:n> ^ <nat:2> + <nat:2> \} $ . Stepping through , we see the environment update command \verb | <var:c> := <nat:4> + <var:c> * <var:r> ; | . This takes $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:4> + <nat:3> \cdot <var:n> ^ <nat:2> + <nat:2> \} $ toward the postcondition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:5> + <nat:3> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> + <nat:4> \} $ . Moving onward , we see the binding code giving $ <nat:1> + <var:c> * <var:r> $ toward $ <var:c>$ . This moves the condition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:5> + <nat:3> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> + <nat:4> \} $ to the condition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:6> + <nat:3> \cdot <var:n> ^ <nat:4> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + <nat:1> \} $ . This is sound using the assignment scheme of standard Hoare reasoning . Advancing on , we have the variable update statement giving $ <var:c> * <var:r> $ into $ <var:c>$ . This advances the precondition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:6> + <nat:3> \cdot <var:n> ^ <nat:4> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + <nat:1> \} $ into the postcondition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:7> + <nat:3> \cdot <var:n> ^ <nat:5> + <nat:2> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + \} $ . Advancing to the next step , we have the command letting $ <var:c> * <var:r> $ toward $ <var:c>$ . This transfers the precondition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:7> + <nat:3> \cdot <var:n> ^ <nat:5> + <nat:2> \cdot <var:n> ^ <nat:3> + <nat:4> \cdot <var:n> ^ <nat:2> + <nat:1> \cdot <var:n> + \} $ to the condition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:8> + <nat:3> \cdot <var:n> ^ <nat:6> + <nat:2> \cdot <var:n> ^ <nat:4> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + \} $ . This is rigorously given by the assignment inference rule found in Hoare reasoning . Further , we have the command defining $ <nat:2> + <var:c> * <var:r$ into $ <var:c>$ . This command advances the condition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:8> + <nat:3> \cdot <var:n> ^ <nat:6> + <nat:2> \cdot <var:n> ^ <nat:4> + <nat:4> \cdot <var:n> ^ <nat:3> + <nat:1> \cdot <var:n> ^ <nat:2> + \} $ into the postcondition $ \{ <var:r> = <var:n> \land <var:c> = <nat:2> \cdot <var:n> ^ <nat:9> + <nat:3> \cdot <var:n> ^ <nat:7> + <nat:2> \cdot <var:n> ^ <nat:5> + <nat:4> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:2> \} $ . This is guaranteed with the assignment inference rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:c> := <nat:2> ; <var:c> := <var:c> * <var:r> ; <var:c> := <nat:3> + <var:c> * <var:r> ; <var:c> := <var:c> * <var:r> ; <var:c> := <nat:2> + <var:c> * <var:r> ; <var:c> := <nat:4> + <var:c> * <var:r> ; <var:c> := <nat:1> + <var:c> * <var:r> ; <var:c> := <var:c> * <var:r> ; <var:c> := <var:c> * <var:r> ; <var:c> := <nat:2> + <var:c> * <var:r> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:r> = <var:n> }} <def:poly> {{ <var:c> = <nat:2> * <var:n> ^ <nat:9> + <nat:3> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:c> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:c> = <nat:2> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:c> = <nat:2> * <var:n> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:c> = <nat:2> * <var:n> ^ <nat:3> + <nat:3> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:c> = <nat:2> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:c> = <nat:2> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:3> + <nat:2> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:c> = <nat:2> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:c> = <nat:2> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:c> = <nat:2> * <var:n> ^ <nat:8> + <nat:3> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:n> /\ <var:c> = <nat:2> * <var:n> ^ <nat:9> + <nat:3> * <var:n> ^ <nat:7> + <nat:2> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 