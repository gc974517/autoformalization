\begin{document} \begin{theorem} Take the following series of instructions such that \begin{verbatim} <var:C1> := <var:X> ; <var:C2> := <var:C1> * <var:X> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:4> ; <var:C2> := <var:C2> * <nat:4> ; <var:e> := <var:C2> <var:e> := <var:e> + <var:C1> <var:e> := <var:e> + <var:C0> \end{verbatim} Given $ <var:X> = <var:S> $ prior to the evaluation of this set of commands it holds that we have $ <var:e> = <nat:4> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for this series of commands is evident with Hoare logic . Going to the next step , we have \begin{eqnarray} \{ <var:X> = <var:S> \} \, <var:C1> := <var:X> \, \{ <var:X> = <var:S> \land <var:C1> = <var:S> \} \\ \{ <var:X> = <var:S> \land <var:C1> = <var:S> \} \, <var:C2> := <var:C1> * <var:X> \, \{ <var:X> = <var:S> \land <var:C1> = <var:S> \land <var:C2> = <var:S> ^ <nat:2> \} \\ \{ <var:X> = <var:S> \land <var:C1> = <var:S> \land <var:C2> = <var:S> ^ <nat:2> \} \, <var:C0> := <nat:3> \, \{ <var:X> = <var:S> \land <var:C1> = <var:S> \land <var:C2> = <var:S> ^ <nat:2> \land <var:C0> = <nat:3> \} \\ \{ <var:X> = <var:S> \land <var:C1> = <var:S> \land <var:C2> = <var:S> ^ <nat:2> \land <var:C0> = <nat:3> \} \, <var:C1> := <var:C1> * <nat:4> \, \{ <var:X> = <var:S> \land <var:C1> = <nat:4> * <var:S> \land <var:C2> = <var:S> ^ <nat:2> \land <var:C0> = <nat:3> \} \\ \{ <var:X> = <var:S> \land <var:C1> = <nat:4> * <var:S> \land <var:C2> = <var:S> ^ <nat:2> \land <var:C0> = <nat:3> \} \, <var:C2> := <var:C2> * <nat:4> \, \{ <var:X> = <var:S> \land <var:C1> = <nat:4> * <var:S> \land <var:C2> = <nat:4> * <var:S> ^ <nat:2> \land <var:C0> = <nat:3> \} \\ \{ <var:X> = <var:S> \land <var:C1> = <nat:4> * <var:S> \land <var:C2> = <nat:4> * <var:S> ^ <nat:2> \land <var:C0> = <nat:3> \} \, <var:e> := <var:C2\, \{ <var:X> = <var:S> \land <var:C1> = <nat:4> * <var:S> \land <var:C0> = <nat:3> \land <var:e> = <nat:4> * <var:S> ^ <nat:2> \} \end{eqnarray} Keeping momentum , we see \begin{eqnarray} \{ <var:X> = <var:S> \} \, <var:C1> := <var:X> \, \{ <var:X> = <var:S> \land <var:C1> = <var:S> \} \end{eqnarray} This is ensured by the environment update inference rule of usual Hoare logic . Going forward , \begin{eqnarray} \{ <var:X> = <var:S> \} \, <var:C1> := <var:X> \, \{ <var:X> = <var:S> \land <var:C1> = <var:S> \} \end{eqnarray} This is shown with the variable assignmet rule obtained from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:X> = <var:S> }} <var:C1> := <var:X> ; <var:C2> := <var:C1> * <var:X> ; <var:C0> := <nat:3> ; <var:C1> := <var:C1> * <nat:4> ; <var:C2> := <var:C2> * <nat:4> ; <var:e> := <var:C2> <var:e> := <var:e> + <var:C1> <var:e> := <var:e> + <var:C0> {{ <var:e> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:S> /\ <var:C1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:S> /\ <var:C1> = <var:S> /\ <var:C2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:S> /\ <var:C1> = <var:S> /\ <var:C2> = <var:S> ^ <nat:2> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:S> /\ <var:C1> = <nat:4> * <var:S> /\ <var:C2> = <var:S> ^ <nat:2> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:S> /\ <var:C1> = <nat:4> * <var:S> /\ <var:C2> = <nat:4> * <var:S> ^ <nat:2> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:S> /\ <var:C1> = <nat:4> * <var:S> /\ <var:C0> = <nat:3> /\ <var:e> = <nat:4> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:S> /\ <var:C0> = <nat:3> /\ <var:e> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:S> /\ <var:e> = <nat:4> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 