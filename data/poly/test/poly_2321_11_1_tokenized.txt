\begin{document} \begin{theorem} Consider a segment of code such that \begin{verbatim} <var:y1> := <var:R> ; <var:y2> := <var:y1> * <var:R> ; <var:y3> := <var:y2> * <var:R> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:8> ; <var:y2> := <var:y2> * <nat:6> ; <var:y3> := <var:y3> * <nat:2> ; <var:d> := <var:y3> <var:d> := <var:d> + <var:y2> <var:d> := <var:d> + <var:y1> <var:d> := <var:d> + <var:y0> \end{verbatim} Allowing that $ <var:R> = <var:I> $ ahead of the evaluation of our series of commands it holds that we see $ <var:d> = <nat:2> \times <var:I> ^ <nat:3> + <nat:6> \times <var:I> ^ <nat:2> + <nat:8> \times <var:I> + <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques results in : \begin{eqnarray} \{ <var:R> = <var:I> \} \\ <var:y1> := <var:R> ; \\ \{ <var:R> = <var:I> \land <var:y1> = <var:I> \} \\ <var:y2> := <var:y1> * <var:R> ; \\ \{ <var:R> = <var:I> \land <var:y1> = <var:I> \land <var:y2> = <var:I> ^ <nat:2> \} \\ <var:y3> := <var:y2> * <var:R> ; \\ \{ <var:R> = <var:I> \land <var:y1> = <var:I> \land <var:y2> = <var:I> ^ <nat:2> \land <var:y3> = <var:I> ^ <nat:3> \} \\ <var:y0> := <nat:1> ; \\ \{ <var:R> = <var:I> \land <var:y1> = <var:I> \land <var:y2> = <var:I> ^ <nat:2> \land <var:y3> = <var:I> ^ <nat:3> \land <var:y0> = <nat:1> \} \\ <var:y1> := <var:y1> * <nat:8> ; \\ \{ <var:R> = <var:I> \land <var:y1> = <nat:8> \cdot <var:I> \land <var:y2> = <var:I> ^ <nat:2> \land <var:y3> = <var:I> ^ <nat:3> \land <var:y0> = <nat:1> \} \\ <var:y2> := <var:y2> * <nat:6> ; \\ \{ <var:R> = <var:I> \land <var:y1> = <nat:8> \cdot <var:I> \land <var:y2> = <nat:6> \cdot <var:I> ^ <nat:2> \land <var:y3> = <var:I> ^ <nat:3> \land <var:y0> = <nat:1> \} \\ <var:y3> := <var:y3> * <nat:2> ; \\ \{ <var:R> = <var:I> \land <var:y1> = <nat:8> \cdot <var:I> \land <var:y2> = <nat:6> \cdot <var:I> ^ <nat:2> \land <var:y3> = <nat:2> \cdot <var:I> ^ <nat:3> \land <var:y0> = <nat:1> \} \\ <var:d> := <var:y3> \\ \{ <var:R> = <var:I> \land <var:y1> = <nat:8> \cdot <var:I> \land <var:y2> = <nat:6> \cdot <var:I> ^ <nat:2> \land <var:y0> = <nat:1> \land <var:d> = <nat:2> \cdot <var:I> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:y2> \\ \{ <var:R> = <var:I> \land <var:y1> = <nat:8> \cdot <var:I> \land <var:y0> = <nat:1> \land <var:d> = <nat:2> \cdot <var:I> ^ <nat:3> + <nat:6> \cdot <var:I> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:y1> \\ \{ <var:R> = <var:I> \land <var:y0> = <nat:1> \land <var:d> = <nat:2> \cdot <var:I> ^ <nat:3> + <nat:6> \cdot <var:I> ^ <nat:2> + <nat:8> \cdot <var:I> \} \\ <var:d> := <var:d> + <var:y0> \\ \{ <var:R> = <var:I> \land <var:d> = <nat:2> \cdot <var:I> ^ <nat:3> + <nat:6> \cdot <var:I> ^ <nat:2> + <nat:8> \cdot <var:I> + <nat:1> \} \end{eqnarray} Considering the preceding argument , our code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:R> = <var:I> }} <var:y1> := <var:R> ; <var:y2> := <var:y1> * <var:R> ; <var:y3> := <var:y2> * <var:R> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:8> ; <var:y2> := <var:y2> * <nat:6> ; <var:y3> := <var:y3> * <nat:2> ; <var:d> := <var:y3> <var:d> := <var:d> + <var:y2> <var:d> := <var:d> + <var:y1> <var:d> := <var:d> + <var:y0> {{ <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:6> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:y1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:y1> = <var:I> /\ <var:y2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:y1> = <var:I> /\ <var:y2> = <var:I> ^ <nat:2> /\ <var:y3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:y1> = <var:I> /\ <var:y2> = <var:I> ^ <nat:2> /\ <var:y3> = <var:I> ^ <nat:3> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:y1> = <nat:8> * <var:I> /\ <var:y2> = <var:I> ^ <nat:2> /\ <var:y3> = <var:I> ^ <nat:3> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:y1> = <nat:8> * <var:I> /\ <var:y2> = <nat:6> * <var:I> ^ <nat:2> /\ <var:y3> = <var:I> ^ <nat:3> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:y1> = <nat:8> * <var:I> /\ <var:y2> = <nat:6> * <var:I> ^ <nat:2> /\ <var:y3> = <nat:2> * <var:I> ^ <nat:3> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:y1> = <nat:8> * <var:I> /\ <var:y2> = <nat:6> * <var:I> ^ <nat:2> /\ <var:y0> = <nat:1> /\ <var:d> = <nat:2> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:y1> = <nat:8> * <var:I> /\ <var:y0> = <nat:1> /\ <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:6> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:y0> = <nat:1> /\ <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:6> * <var:I> ^ <nat:2> + <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:I> /\ <var:d> = <nat:2> * <var:I> ^ <nat:3> + <nat:6> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 