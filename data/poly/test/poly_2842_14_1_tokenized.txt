\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W1> := <var:g> ; <var:W2> := <var:W1> * <var:g> ; <var:W3> := <var:W2> * <var:g> ; <var:W4> := <var:W3> * <var:g> ; <var:W0> := <nat:7> ; <var:W1> := <var:W1> * <nat:5> ; <var:W2> := <var:W2> * <nat:6> ; <var:W3> := <var:W3> * <nat:7> ; <var:W4> := <var:W4> * <nat:5> ; <var:V> := <var:W4> <var:V> := <var:V> + <var:W3> <var:V> := <var:V> + <var:W2> <var:V> := <var:V> + <var:W1> <var:V> := <var:V> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:g> = <var:o> $ --- for all positive coefficients $ <var:o> $ --- prior to executing our series of instructions , it must be that $ <var:V> = <nat:5> * <var:o> ^ <nat:4> + <nat:7> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands is done with usual Hoare techniques . Moving on to the next step , we see \begin{verbatim} { <var:g> = <var:o> } <var:W1> := <var:g> { <var:g> = <var:o> \land <var:W1> = <var:o> } { <var:g> = <var:o> \land <var:W1> = <var:o> } <var:W2> := <var:W1> * <var:g> { <var:g> = <var:o> \land <var:W1> = <var:o> \land <var:W2> = <var:o> ^ <nat:2> } \end{verbatim} Going to the next step , we see \begin{verbatim} { <var:g> = <var:o> } <var:W1> := <var:g> { <var:g> = <var:o> \land <var:W1> = <var:o> } { <var:g> = <var:o> \land <var:W1> = <var:o> } <var:W2> := <var:W1> * <var:g> { <var:g> = <var:o> \land <var:W1> = <var:o> \land <var:W2> = <var:o> ^ <nat:2> } { <var:g> = <var:o> \land <var:W1> = <var:o> \land <var:W2> = <var:o> ^ <nat:2> } <var:W3> := <var:W2> * <var:g> { <var:g> = <var:o> \land <var:W1> = <var:o> \land <var:W2> = <var:o> ^ <nat:2> \land <var:W3> = <var:o> ^ <nat:3> } { <var:g> = <var:o> \land <var:W1> = <var:o> \land <var:W2> = <var:o> ^ <nat:2> \land <var:W3> = <var:o> ^ <nat:3> } <var:W4> := <var:W3> * <var:g> { <var:g> = <var:o> \land <var:W1> = <var:o> \land <var:W2> = <var:o> ^ <nat:2> \land <var:W3> = <var:o> ^ <nat:3> \land <var:W4> = <var:o> ^ <nat:4> } { <var:g> = <var:o> \land <var:W1> = <var:o> \land <var:W2> = <var:o> ^ <nat:2> \land <var:W3> = <var:o> ^ <nat:3> \land <var:W4> = <var:o> ^ <nat:4> } <var:W0> := <nat:7> { <var:g> = <var:o> \land <var:W1> = <var:o> \land <var:W2> = <var:o> ^ <nat:2> \land <var:W3> = <var:o> ^ <nat:3> \land <var:W4> = <var:o> ^ <nat:4> \land <var:W0> = <nat:7> } { <var:g> = <var:o> \land <var:W1> = <var:o> \land <var:W2> = <var:o> ^ <nat:2> \land <var:W3> = <var:o> ^ <nat:3> \land <var:W4> = <var:o> ^ <nat:4> \land <var:W0> = <nat:7> } <var:W1> := <var:W1> * <nat:5> { <var:g> = <var:o> \land <var:W1> = <nat:5> \times <var:o> \land <var:W2> = <var:o> ^ <nat:2> \land <var:W3> = <var:o> ^ <nat:3> \land <var:W4> = <var:o> ^ <nat:4> \land <var:W0> = <nat:7> } { <var:g> = <var:o> \land <var:W1> = <nat:5> \times <var:o> \land <var:W2> = <var:o> ^ <nat:2> \land <var:W3> = <var:o> ^ <nat:3> \land <var:W4> = <var:o> ^ <nat:4> \land <var:W0> = <nat:7> } <var:W2> := <var:W2> * <nat:6> { <var:g> = <var:o> \land <var:W1> = <nat:5> \times <var:o> \land <var:W2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:W3> = <var:o> ^ <nat:3> \land <var:W4> = <var:o> ^ <nat:4> \land <var:W0> = <nat:7> } { <var:g> = <var:o> \land <var:W1> = <nat:5> \times <var:o> \land <var:W2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:W3> = <var:o> ^ <nat:3> \land <var:W4> = <var:o> ^ <nat:4> \land <var:W0> = <nat:7> } <var:W3> := <var:W3> * <nat:7> { <var:g> = <var:o> \land <var:W1> = <nat:5> \times <var:o> \land <var:W2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:W3> = <nat:7> \times <var:o> ^ <nat:3> \land <var:W4> = <var:o> ^ <nat:4> \land <var:W0> = <nat:7> } { <var:g> = <var:o> \land <var:W1> = <nat:5> \times <var:o> \land <var:W2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:W3> = <nat:7> \times <var:o> ^ <nat:3> \land <var:W4> = <var:o> ^ <nat:4> \land <var:W0> = <nat:7> } <var:W4> := <var:W4> * <nat:5> { <var:g> = <var:o> \land <var:W1> = <nat:5> \times <var:o> \land <var:W2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:W3> = <nat:7> \times <var:o> ^ <nat:3> \land <var:W4> = <nat:5> \times <var:o> ^ <nat:4> \land <var:W0> = <nat:7> } { <var:g> = <var:o> \land <var:W1> = <nat:5> \times <var:o> \land <var:W2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:W3> = <nat:7> \times <var:o> ^ <nat:3> \land <var:W4> = <nat:5> \times <var:o> ^ <nat:4> \land <var:W0> = <nat:7> } <var:V> := <var:W4{ <var:g> = <var:o> \land <var:W1> = <nat:5> \times <var:o> \land <var:W2> = <nat:6> \times <var:o> ^ <nat:2> \land <var:W3> = <nat:7> \times <var:o> ^ <nat:3> \land <var:W0> = <nat:7> \land <var:V> = <nat:5> \times <var:o> ^ <nat:4> } \end{verbatim} Paying attention to the proceeding pieces of code found in our set of instructions , we have \begin{verbatim} { <var:g> = <var:o> } <var:W1> := <var:g> { <var:g> = <var:o> \land <var:W1> = <var:o> } { <var:g> = <var:o> \land <var:W1> = <var:o> } <var:W2> := <var:W1> * <var:g> { <var:g> = <var:o> \land <var:W1> = <var:o> \land <var:W2> = <var:o> ^ <nat:2> } \end{verbatim} This is ensured using the variable binding law defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <var:W4> : string := " <var:W4> " . Definition <def:poly> := <var:W1> := <var:g> ; <var:W2> := <var:W1> * <var:g> ; <var:W3> := <var:W2> * <var:g> ; <var:W4> := <var:W3> * <var:g> ; <var:W0> := <nat:7> ; <var:W1> := <var:W1> * <nat:5> ; <var:W2> := <var:W2> * <nat:6> ; <var:W3> := <var:W3> * <nat:7> ; <var:W4> := <var:W4> * <nat:5> ; <var:V> := <var:W4> <var:V> := <var:V> + <var:W3> <var:V> := <var:V> + <var:W2> <var:V> := <var:V> + <var:W1> <var:V> := <var:V> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:g> = <var:o> }} <def:poly> {{ <var:V> = <nat:5> * <var:o> ^ <nat:4> + <nat:7> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:W1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:W1> = <var:o> /\ <var:W2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:W1> = <var:o> /\ <var:W2> = <var:o> ^ <nat:2> /\ <var:W3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:W1> = <var:o> /\ <var:W2> = <var:o> ^ <nat:2> /\ <var:W3> = <var:o> ^ <nat:3> /\ <var:W4> = <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:W1> = <var:o> /\ <var:W2> = <var:o> ^ <nat:2> /\ <var:W3> = <var:o> ^ <nat:3> /\ <var:W4> = <var:o> ^ <nat:4> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:W1> = <nat:5> * <var:o> /\ <var:W2> = <var:o> ^ <nat:2> /\ <var:W3> = <var:o> ^ <nat:3> /\ <var:W4> = <var:o> ^ <nat:4> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:W1> = <nat:5> * <var:o> /\ <var:W2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:W3> = <var:o> ^ <nat:3> /\ <var:W4> = <var:o> ^ <nat:4> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:W1> = <nat:5> * <var:o> /\ <var:W2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:W3> = <nat:7> * <var:o> ^ <nat:3> /\ <var:W4> = <var:o> ^ <nat:4> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:W1> = <nat:5> * <var:o> /\ <var:W2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:W3> = <nat:7> * <var:o> ^ <nat:3> /\ <var:W4> = <nat:5> * <var:o> ^ <nat:4> /\ <var:W0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:W1> = <nat:5> * <var:o> /\ <var:W2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:W3> = <nat:7> * <var:o> ^ <nat:3> /\ <var:W0> = <nat:7> /\ <var:V> = <nat:5> * <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:W1> = <nat:5> * <var:o> /\ <var:W2> = <nat:6> * <var:o> ^ <nat:2> /\ <var:W0> = <nat:7> /\ <var:V> = <nat:5> * <var:o> ^ <nat:4> + <nat:7> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:W1> = <nat:5> * <var:o> /\ <var:W0> = <nat:7> /\ <var:V> = <nat:5> * <var:o> ^ <nat:4> + <nat:7> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:W0> = <nat:7> /\ <var:V> = <nat:5> * <var:o> ^ <nat:4> + <nat:7> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:o> /\ <var:V> = <nat:5> * <var:o> ^ <nat:4> + <nat:7> * <var:o> ^ <nat:3> + <nat:6> * <var:o> ^ <nat:2> + <nat:5> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 