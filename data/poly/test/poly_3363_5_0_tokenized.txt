\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:6> ; <var:b1> := <nat:2> ; <var:b1> := <var:b1> * <var:J> ; <var:v> := <var:b1> ; <var:v> := <var:v> + <var:b0> \end{verbatim} Allowing that we have $ <var:J> = <var:a> $ prior to the evaluation of the list of instructions , then $ <var:v> = <nat:2> \times <var:a> + <nat:6> $ when code finishes . \end{theorem} \begin{proof} Proving correctness for this code segment is shown by standard Hoare logic . Advancing to the next step , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:a> \} & <var:b0> := <nat:6> & \{ <var:J> = <var:a> \land <var:b0> = <nat:6> \} \end{tabular} This is shown by the assignment rule of usual Hoare reasoning . Shifting focus toward the proceeding commands contained in the code , we have \[ \begin{tabular} {rcl} \{ <var:J> = <var:a> \} & <var:b0> := <nat:6> & \{ <var:J> = <var:a> \land <var:b0> = <nat:6> \} \\ \{ <var:J> = <var:a> \land <var:b0> = <nat:6> \} & <var:b1> := <nat:2> & \{ <var:J> = <var:a> \land <var:b0> = <nat:6> \land <var:b1> = <nat:2> \} \\ \{ <var:J> = <var:a> \land <var:b0> = <nat:6> \land <var:b1> = <nat:2> \} & <var:b1> := <var:b1> * <var:J> & \{ <var:J> = <var:a> \land <var:b0> = <nat:6> \land <var:b1> = <nat:2> \times <var:a> \} \\ \{ <var:J> = <var:a> \land <var:b0> = <nat:6> \land <var:b1> = <nat:2> \times <var:a> \} & <var:v> := <var:b1> & \{ <var:J> = <var:a> \land <var:b0> = <nat:6> \land <var:v> = <nat:2> \times <var:a> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:J> = <var:a> }} <var:b0> := <nat:6> ; <var:b1> := <nat:2> ; <var:b1> := <var:b1> * <var:J> ; <var:v> := <var:b1> ; <var:v> := <var:v> + <var:b0> {{ <var:v> = <nat:2> * <var:a> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:b0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:b0> = <nat:6> /\ <var:b1> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:b0> = <nat:6> /\ <var:v> = <nat:2> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:a> /\ <var:v> = <nat:2> * <var:a> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 