\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:3> ; <var:m> := <var:q0> \end{verbatim} Given that we have $ <var:N> = <var:w> $ before interpreting the program it must be that we see $ <var:m> = <nat:3> $ once program has finished . \end{theorem} \begin{proof} The application of usual Hoare techniques gives : \begin{eqnarray} \{ <var:N> = <var:w> \} \\ <var:q0> := <nat:3> ; \\ \{ <var:N> = <var:w> \land <var:q0> = <nat:3> \} \\ <var:m> := <var:q0> \\ \{ <var:N> = <var:w> \land <var:m> = <nat:3> \} \end{eqnarray} Thusly , our list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:N> = <var:w> }} <var:q0> := <nat:3> ; <var:m> := <var:q0> {{ <var:m> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:m> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 