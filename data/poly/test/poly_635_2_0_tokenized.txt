\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:9> ; <var:l> := <var:H0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:D> = <var:u> $ before the execution of this code segment then we have $ <var:l> = <nat:9> $ when series of instructions has executed . \end{theorem} \begin{proof} The way to prove correctness for this code is demonstrated by Hoare techniques . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:D> = <var:u> \} & <var:H0> := <nat:9> & \{ <var:D> = <var:u> \land <var:H0> = <nat:9> \} \end{tabular} This is rigorously given using the variable update law defined by standard Hoare techniques . After , we see \[ \begin{tabular} {rcl} \{ <var:D> = <var:u> \} & <var:H0> := <nat:9> & \{ <var:D> = <var:u> \land <var:H0> = <nat:9> \} \end{tabular} This is rigorously given through the environment update rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <def:poly> := <var:H0> := <nat:9> ; <var:l> := <var:H0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:D> = <var:u> }} <def:poly> {{ <var:l> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:H0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:u> /\ <var:l> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 