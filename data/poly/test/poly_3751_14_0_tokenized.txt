\begin{document} \begin{theorem} Take the following code : \begin{verbatim} <var:H0> := <nat:3> ; <var:H1> := <nat:6> ; <var:H1> := <var:H1> * <var:p> ; <var:H2> := <nat:1> ; <var:H2> := <var:H2> * <var:p> ; <var:H2> := <var:H2> * <var:p> ; <var:H3> := <nat:6> ; <var:H3> := <var:H3> * <var:p> ; <var:H3> := <var:H3> * <var:p> ; <var:H3> := <var:H3> * <var:p> ; <var:I> := <var:H3> ; <var:I> := <var:I> + <var:H2> ; <var:I> := <var:I> + <var:H1> ; <var:I> := <var:I> + <var:H0> \end{verbatim} Assuming that $ <var:p> = <var:N> $ --- given every whole numbers $ <var:N> $ --- before the evaluation of this program it must be that we have $ <var:I> = <nat:6> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:6> \times <var:N> + <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare techniques gives : \begin{eqnarray} \{ <var:p> = <var:N> \} \\ <var:H0> := <nat:3> ; \\ \{ <var:p> = <var:N> \land <var:H0> = <nat:3> \} \\ <var:H1> := <nat:6> ; \\ \{ <var:p> = <var:N> \land <var:H0> = <nat:3> \land <var:H1> = <nat:6> \} \\ <var:H1> := <var:H1> * <var:p> ; \\ \{ <var:p> = <var:N> \land <var:H0> = <nat:3> \land <var:H1> = <nat:6> * <var:N> \} \\ <var:H2> := <nat:1> ; \\ \{ <var:p> = <var:N> \land <var:H0> = <nat:3> \land <var:H1> = <nat:6> * <var:N> \land <var:H2> = <nat:1> \} \\ <var:H2> := <var:H2> * <var:p> ; \\ \{ <var:p> = <var:N> \land <var:H0> = <nat:3> \land <var:H1> = <nat:6> * <var:N> \land <var:H2> = <nat:1> * <var:N> \} \\ <var:H2> := <var:H2> * <var:p> ; \\ \{ <var:p> = <var:N> \land <var:H0> = <nat:3> \land <var:H1> = <nat:6> * <var:N> \land <var:H2> = <nat:1> * <var:N> ^ <nat:2> \} \\ <var:H3> := <nat:6> ; \\ \{ <var:p> = <var:N> \land <var:H0> = <nat:3> \land <var:H1> = <nat:6> * <var:N> \land <var:H2> = <nat:1> * <var:N> ^ <nat:2> \land <var:H3> = <nat:6> \} \\ <var:H3> := <var:H3> * <var:p> ; \\ \{ <var:p> = <var:N> \land <var:H0> = <nat:3> \land <var:H1> = <nat:6> * <var:N> \land <var:H2> = <nat:1> * <var:N> ^ <nat:2> \land <var:H3> = <nat:6> * <var:N> \} \\ <var:H3> := <var:H3> * <var:p> ; \\ \{ <var:p> = <var:N> \land <var:H0> = <nat:3> \land <var:H1> = <nat:6> * <var:N> \land <var:H2> = <nat:1> * <var:N> ^ <nat:2> \land <var:H3> = <nat:6> * <var:N> ^ <nat:2> \} \\ <var:H3> := <var:H3> * <var:p> ; \\ \{ <var:p> = <var:N> \land <var:H0> = <nat:3> \land <var:H1> = <nat:6> * <var:N> \land <var:H2> = <nat:1> * <var:N> ^ <nat:2> \land <var:H3> = <nat:6> * <var:N> ^ <nat:3> \} \\ <var:I> := <var:H3> ; \\ \{ <var:p> = <var:N> \land <var:H0> = <nat:3> \land <var:H1> = <nat:6> * <var:N> \land <var:H2> = <nat:1> * <var:N> ^ <nat:2> \land <var:I> = <nat:6> * <var:N> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:H2> ; \\ \{ <var:p> = <var:N> \land <var:H0> = <nat:3> \land <var:H1> = <nat:6> * <var:N> \land <var:I> = <nat:6> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:H1> ; \\ \{ <var:p> = <var:N> \land <var:H0> = <nat:3> \land <var:I> = <nat:6> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:6> * <var:N> \} \\ <var:I> := <var:I> + <var:H0> \\ \{ <var:p> = <var:N> \land <var:I> = <nat:6> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:3> \} \end{eqnarray} Given the above , our list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:p> = <var:N> }} <var:H0> := <nat:3> ; <var:H1> := <nat:6> ; <var:H1> := <var:H1> * <var:p> ; <var:H2> := <nat:1> ; <var:H2> := <var:H2> * <var:p> ; <var:H2> := <var:H2> * <var:p> ; <var:H3> := <nat:6> ; <var:H3> := <var:H3> * <var:p> ; <var:H3> := <var:H3> * <var:p> ; <var:H3> := <var:H3> * <var:p> ; <var:I> := <var:H3> ; <var:I> := <var:I> + <var:H2> ; <var:I> := <var:I> + <var:H1> ; <var:I> := <var:I> + <var:H0> {{ <var:I> = <nat:6> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:6> * <var:N> /\ <var:H2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:6> * <var:N> /\ <var:H2> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:6> * <var:N> /\ <var:H2> = <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:6> * <var:N> /\ <var:H2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:H3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:6> * <var:N> /\ <var:H2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:H3> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:6> * <var:N> /\ <var:H2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:H3> = <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:6> * <var:N> /\ <var:H2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:H3> = <nat:6> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:6> * <var:N> /\ <var:H2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:I> = <nat:6> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:6> * <var:N> /\ <var:I> = <nat:6> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:H0> = <nat:3> /\ <var:I> = <nat:6> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:N> /\ <var:I> = <nat:6> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 