\begin{document} \begin{theorem} We define the following series of commands as follows \begin{verbatim} <var:s> := <nat:3> ; <var:s> := <nat:2> + <var:s> * <var:l> ; <var:s> := <nat:2> + <var:s> * <var:l> ; <var:s> := <nat:4> + <var:s> * <var:l> \end{verbatim} Allow it to hold that $ <var:l> = <var:e> $ , given all natural coefficients $ <var:e> $ , ahead of executing this program it follows that $ <var:s> = <nat:3> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:e> \} \\ <var:s> := <nat:3> ; \\ \{ <var:l> = <var:e> \land <var:s> = <nat:3> \} \\ <var:s> := <nat:2> + <var:s> * <var:l> ; \\ \{ <var:l> = <var:e> \land <var:s> = <nat:3> * <var:e> + <nat:2> \} \\ <var:s> := <nat:2> + <var:s> * <var:l> ; \\ \{ <var:l> = <var:e> \land <var:s> = <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> \} \\ <var:s> := <nat:4> + <var:s> * <var:l> \\ \{ <var:l> = <var:e> \land <var:s> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> \} \end{eqnarray} Utilizing typical Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:l> = <var:e> }} <var:s> := <nat:3> ; <var:s> := <nat:2> + <var:s> * <var:l> ; <var:s> := <nat:2> + <var:s> * <var:l> ; <var:s> := <nat:4> + <var:s> * <var:l> {{ <var:s> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:s> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:s> = <nat:3> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:s> = <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:s> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 