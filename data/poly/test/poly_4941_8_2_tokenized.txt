\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:a> := <nat:2> ; <var:a> := <nat:1> + <var:a> * <var:D> ; <var:a> := <nat:4> + <var:a> * <var:D> ; <var:a> := <nat:4> + <var:a> * <var:D> ; <var:a> := <nat:3> + <var:a> * <var:D> ; <var:a> := <nat:1> + <var:a> * <var:D> ; <var:a> := <nat:1> + <var:a> * <var:D> ; <var:a> := <nat:3> + <var:a> * <var:D> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> in \emph{Imp} . Given that we have $ <var:D> = <var:l> $ ( given any positive integer coefficients $ <var:l> $ ) before running our set of commands it must be that $ <var:a> = <nat:2> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> $ after code segment has exited . \end{theorem} \begin{proof} The argument for this set of instructions can be done with usual Hoare techniques . Advancing , we have \begin{eqnarray} \{ <var:D> = <var:l> \} \, <var:a> := <nat:2> \, \{ <var:D> = <var:l> \land <var:a> = <nat:2> \} \\ \{ <var:D> = <var:l> \land <var:a> = <nat:2> \} \, <var:a> := <nat:1> + <var:a> * <var:D> \, \{ <var:D> = <var:l> \land <var:a> = <nat:2> \times <var:l> + <nat:1> \} \\ \{ <var:D> = <var:l> \land <var:a> = <nat:2> \times <var:l> + <nat:1> \} \, <var:a> := <nat:4> + <var:a> * <var:D> \, \{ <var:D> = <var:l> \land <var:a> = <nat:2> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:4> \} \\ \{ <var:D> = <var:l> \land <var:a> = <nat:2> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:4> \} \, <var:a> := <nat:4> + <var:a> * <var:D> \, \{ <var:D> = <var:l> \land <var:a> = <nat:2> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:4> \} \\ \{ <var:D> = <var:l> \land <var:a> = <nat:2> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:4> \} \, <var:a> := <nat:3> + <var:a> * <var:D> \, \{ <var:D> = <var:l> \land <var:a> = <nat:2> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:3> \} \\ \{ <var:D> = <var:l> \land <var:a> = <nat:2> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:3> \} \, <var:a> := <nat:1> + <var:a> * <var:D> \, \{ <var:D> = <var:l> \land <var:a> = <nat:2> \times <var:l> ^ <nat:5> + <nat:1> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:1> \} \\ \{ <var:D> = <var:l> \land <var:a> = <nat:2> \times <var:l> ^ <nat:5> + <nat:1> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> ^ <nat:3> + <nat:4> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:1> \} \, <var:a> := <nat:1> + <var:a> * <var:D> \, \{ <var:D> = <var:l> \land <var:a> = <nat:2> \times <var:l> ^ <nat:6> + <nat:1> \times <var:l> ^ <nat:5> + <nat:4> \times <var:l> ^ <nat:4> + <nat:4> \times <var:l> ^ <nat:3> + <nat:3> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:1> \} \end{eqnarray} Looking at the upcoming command contained in our list of instructions , we have \begin{eqnarray} \{ <var:D> = <var:l> \} \, <var:a> := <nat:2> \, \{ <var:D> = <var:l> \land <var:a> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:a> := <nat:2> ; <var:a> := <nat:1> + <var:a> * <var:D> ; <var:a> := <nat:4> + <var:a> * <var:D> ; <var:a> := <nat:4> + <var:a> * <var:D> ; <var:a> := <nat:3> + <var:a> * <var:D> ; <var:a> := <nat:1> + <var:a> * <var:D> ; <var:a> := <nat:1> + <var:a> * <var:D> ; <var:a> := <nat:3> + <var:a> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:D> = <var:l> }} <def:poly> {{ <var:a> = <nat:2> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:a> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:a> = <nat:2> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:a> = <nat:2> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:a> = <nat:2> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:a> = <nat:2> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:a> = <nat:2> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:a> = <nat:2> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:a> = <nat:2> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 