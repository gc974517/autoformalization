\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:7> ; <var:L2> := <nat:5> ; <var:L2> := <var:L2> * <var:g> ; <var:L2> := <var:L2> * <var:g> ; <var:A> := <var:L2> ; <var:A> := <var:A> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> in \emph{Imp} . Allow it to hold that $ <var:g> = <var:W> $ before evaluating the series of commands , it must be that $ <var:A> = <nat:5> \times <var:W> ^ <nat:2> + <nat:7> $ once code segment is done . \end{theorem} \begin{proof} Using standard Hoare logic produces : \begin{eqnarray} \{ <var:g> = <var:W> \} \\ <var:L0> := <nat:7> ; \\ \{ <var:g> = <var:W> \land <var:L0> = <nat:7> \} \\ <var:L2> := <nat:5> ; \\ \{ <var:g> = <var:W> \land <var:L0> = <nat:7> \land <var:L2> = <nat:5> \} \\ <var:L2> := <var:L2> * <var:g> ; \\ \{ <var:g> = <var:W> \land <var:L0> = <nat:7> \land <var:L2> = <nat:5> \times <var:W> \} \\ <var:L2> := <var:L2> * <var:g> ; \\ \{ <var:g> = <var:W> \land <var:L0> = <nat:7> \land <var:L2> = <nat:5> \times <var:W> ^ <nat:2> \} \end{eqnarray} Advancing interpreting the list of commands results in : \begin{eqnarray} <var:A> := <var:L2> ; \\ \{ <var:g> = <var:W> \land <var:L0> = <nat:7> \land <var:A> = <nat:5> \times <var:W> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:L0> \\ \{ <var:g> = <var:W> \land <var:A> = <nat:5> \times <var:W> ^ <nat:2> + <nat:7> \} \end{eqnarray} As a result , our set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L2> : string := " <var:L2> " . Definition <def:poly> := <var:L0> := <nat:7> ; <var:L2> := <nat:5> ; <var:L2> := <var:L2> * <var:g> ; <var:L2> := <var:L2> * <var:g> ; <var:A> := <var:L2> ; <var:A> := <var:A> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:g> = <var:W> }} <def:poly> {{ <var:A> = <nat:5> * <var:W> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:L0> = <nat:7> /\ <var:L2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:L0> = <nat:7> /\ <var:L2> = <nat:5> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:L0> = <nat:7> /\ <var:L2> = <nat:5> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:L0> = <nat:7> /\ <var:A> = <nat:5> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:W> /\ <var:A> = <nat:5> * <var:W> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 