\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:K1> := <var:W> ; <var:K2> := <var:K1> * <var:W> ; <var:K0> := <nat:9> ; <var:K2> := <var:K2> * <nat:6> ; <var:M> := <var:K2> <var:M> := <var:M> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> . Assume $ <var:W> = <var:N> $ prior to the execution of the code it follows that $ <var:M> = <nat:6> \cdot <var:N> ^ <nat:2> + <nat:9> $ after list of commands terminates . \end{theorem} \begin{proof} The proof of our set of commands can be accomplished using standard Hoare techniques . Looking at the following statement found in the list of commands , we have the variable assignmet line giving $ <var:W> $ as $ <var:K1>$ . This takes the precondition $ \{ <var:W> = <var:N> \} $ to the postcondition $ \{ <var:W> = <var:N> \land <var:K1> = <var:N> \} $ . Further , we see the environment update code \verb | <var:K2> := <var:K1> * <var:W> ; | . This command forwards the precondition $ \{ <var:W> = <var:N> \land <var:K1> = <var:N> \} $ toward $ \{ <var:W> = <var:N> \land <var:K1> = <var:N> \land <var:K2> = <var:N> ^ <nat:2> \} $ . Advancing to the next step , we see the binding statement binding $ <nat:9> $ toward $ <var:K0>$ . This takes the condition $ \{ <var:W> = <var:N> \land <var:K1> = <var:N> \land <var:K2> = <var:N> ^ <nat:2> \} $ as $ \{ <var:W> = <var:N> \land <var:K1> = <var:N> \land <var:K2> = <var:N> ^ <nat:2> \land <var:K0> = <nat:9> \} $ . This is rigorously given using the assignment inference rule defined by Hoare techniques . Honing in on the upcoming statement contained in the list of instructions , we have the assignment code \verb | <var:K2> := <var:K2> * <nat:6> ; | . This redefines the condition $ \{ <var:W> = <var:N> \land <var:K1> = <var:N> \land <var:K2> = <var:N> ^ <nat:2> \land <var:K0> = <nat:9> \} $ into $ \{ <var:W> = <var:N> \land <var:K1> = <var:N> \land <var:K2> = <nat:6> * <var:N> ^ <nat:2> \land <var:K0> = <nat:9> \} $ . This is rigorously given through the assignment inference rule given in standard Hoare techniques . Moving on to the next step , we have the environment update command \verb | <var:M> := <var:K2> | . This advances the condition $ \{ <var:W> = <var:N> \land <var:K1> = <var:N> \land <var:K2> = <nat:6> * <var:N> ^ <nat:2> \land <var:K0> = <nat:9> \} $ into the postcondition $ \{ <var:W> = <var:N> \land <var:K1> = <var:N> \land <var:K0> = <nat:9> \land <var:M> = <nat:6> * <var:N> ^ <nat:2> \} $ . This is ensured by the assignment rule of standard Hoare techniques . Jumping to the proceeding piece of code contained in our program , we see the variable binding statement \verb | <var:M> := <var:M> + <var:K0> | . This transfers the condition $ \{ <var:W> = <var:N> \land <var:K1> = <var:N> \land <var:K0> = <nat:9> \land <var:M> = <nat:6> * <var:N> ^ <nat:2> \} $ as $ \{ <var:W> = <var:N> \land <var:M> = <nat:6> * <var:N> ^ <nat:2> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K1> := <var:W> ; <var:K2> := <var:K1> * <var:W> ; <var:K0> := <nat:9> ; <var:K2> := <var:K2> * <nat:6> ; <var:M> := <var:K2> <var:M> := <var:M> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:W> = <var:N> }} <def:poly> {{ <var:M> = <nat:6> * <var:N> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:K1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:K1> = <var:N> /\ <var:K2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:K1> = <var:N> /\ <var:K2> = <var:N> ^ <nat:2> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:K1> = <var:N> /\ <var:K2> = <nat:6> * <var:N> ^ <nat:2> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:K1> = <var:N> /\ <var:K0> = <nat:9> /\ <var:M> = <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:N> /\ <var:M> = <nat:6> * <var:N> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 