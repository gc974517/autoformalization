\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:H> := <nat:1> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <nat:4> + <var:H> * <var:K> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <nat:3> + <var:H> * <var:K> ; <var:H> := <nat:2> + <var:H> * <var:K> ; <var:H> := <nat:3> + <var:H> * <var:K> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <var:H> * <var:K> ; <var:H> := <nat:4> + <var:H> * <var:K> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <nat:2> + <var:H> * <var:K> \end{verbatim} Assume $ <var:K> = <var:m> $ --- letting $ <var:m> $ --- before the execution of this list of commands , then we see $ <var:H> = <nat:1> \times <var:m> ^ <nat:13> + <nat:1> \times <var:m> ^ <nat:12> + <nat:4> \times <var:m> ^ <nat:11> + <nat:1> \times <var:m> ^ <nat:10> + <nat:3> \times <var:m> ^ <nat:9> + <nat:2> \times <var:m> ^ <nat:8> + <nat:3> \times <var:m> ^ <nat:7> + <nat:1> \times <var:m> ^ <nat:6> + <nat:4> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:2> $ once code segment has terminated . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands is clear through Hoare techniques . Looking at the upcoming line of code found in our code , we have the command \verb | <var:H> := <nat:1> ; | . This transfers $ \{ <var:K> = <var:m> \} $ as the condition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \} $ . This is shown to be logically sound through the assignment law found in standard Hoare logic . Looking at the proceeding line of code seen in the code , the line \verb | <var:H> := <nat:1> + <var:H> * <var:K> ; | . This takes $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \} $ toward the condition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> + <nat:1> \} $ . This is guaranteed with the assignment inference rule found in usual Hoare logic . Further , the variable binding code \verb | <var:H> := <nat:4> + <var:H> * <var:K> ; | . This advances $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> + <nat:1> \} $ into the condition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:4> \} $ . This is deduced with the assignment scheme from usual Hoare techniques . Honing in on the following command in our series of commands , we have the environment update line \verb | <var:H> := <nat:1> + <var:H> * <var:K> ; | . This redefines the precondition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:4> \} $ to the condition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:4> \cdot <var:m> + <nat:1> \} $ . Advancing , the variable binding statement letting $ <nat:3> + <var:H> * <var:K> $ to $ <var:H>$ . This takes $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:4> \cdot <var:m> + <nat:1> \} $ toward $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:3> \} $ . This is shown to be logically sound using the assignment scheme defined by Hoare logic . Stepping through , we see the variable binding code \verb | <var:H> := <nat:2> + <var:H> * <var:K> ; | . This code moves the condition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:3> \} $ as the postcondition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:2> \} $ . This is known to be sound with the assignment rule given by Hoare logic . Moving forward to the next step , the statement \verb | <var:H> := <nat:3> + <var:H> * <var:K> ; | . This statement transfers $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:2> \} $ toward the postcondition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:6> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:4> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:3> \} $ . This is shown to be logically sound using the assignment scheme given in usual Hoare logic . Advancing , we have the variable binding line binding $ <nat:1> + <var:H> * <var:K> $ into $ <var:H>$ . This forwards $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:6> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:4> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:3> \} $ into the condition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:7> + <nat:1> \cdot <var:m> ^ <nat:6> + <nat:4> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:2> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:1> \} $ . Immediately after , we have the variable update statement \verb | <var:H> := <var:H> * <var:K> ; | . This moves the condition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:7> + <nat:1> \cdot <var:m> ^ <nat:6> + <nat:4> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:2> \cdot <var:m> ^ <nat:2> + <nat:3> \cdot <var:m> + <nat:1> \} $ toward $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:8> + <nat:1> \cdot <var:m> ^ <nat:7> + <nat:4> \cdot <var:m> ^ <nat:6> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:2> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + \} $ . Moving forward , we have the variable binding line binding $ <nat:4> + <var:H> * <var:K> $ as $ <var:H>$ . This moves the condition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:8> + <nat:1> \cdot <var:m> ^ <nat:7> + <nat:4> \cdot <var:m> ^ <nat:6> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:2> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + \} $ to the condition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:9> + <nat:1> \cdot <var:m> ^ <nat:8> + <nat:4> \cdot <var:m> ^ <nat:7> + <nat:1> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:2> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:4> \} $ . Advancing to the proceeding line of code in our program , we have the environment update line defining $ <nat:1> + <var:H> * <var:K> $ as $ <var:H>$ . This transfers the condition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:9> + <nat:1> \cdot <var:m> ^ <nat:8> + <nat:4> \cdot <var:m> ^ <nat:7> + <nat:1> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:2> \cdot <var:m> ^ <nat:4> + <nat:3> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:4> \} $ as $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:10> + <nat:1> \cdot <var:m> ^ <nat:9> + <nat:4> \cdot <var:m> ^ <nat:8> + <nat:1> \cdot <var:m> ^ <nat:7> + <nat:3> \cdot <var:m> ^ <nat:6> + <nat:2> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> + <nat:1> \} $ . This is ensured with the assignment scheme in typical Hoare reasoning . Paying attention to the next bit of code in the segment of code , we have the variable assignmet line giving $ <nat:1> + <var:H> * <var:K> $ toward $ <var:H>$ . This statement advances the condition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:10> + <nat:1> \cdot <var:m> ^ <nat:9> + <nat:4> \cdot <var:m> ^ <nat:8> + <nat:1> \cdot <var:m> ^ <nat:7> + <nat:3> \cdot <var:m> ^ <nat:6> + <nat:2> \cdot <var:m> ^ <nat:5> + <nat:3> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> + <nat:1> \} $ into $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:11> + <nat:1> \cdot <var:m> ^ <nat:10> + <nat:4> \cdot <var:m> ^ <nat:9> + <nat:1> \cdot <var:m> ^ <nat:8> + <nat:3> \cdot <var:m> ^ <nat:7> + <nat:2> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:1> \} $ . Stepping forward , we have the line assigning $ <nat:1> + <var:H> * <var:K> $ into $ <var:H>$ . This redefines $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:11> + <nat:1> \cdot <var:m> ^ <nat:10> + <nat:4> \cdot <var:m> ^ <nat:9> + <nat:1> \cdot <var:m> ^ <nat:8> + <nat:3> \cdot <var:m> ^ <nat:7> + <nat:2> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:1> \} $ to the postcondition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:12> + <nat:1> \cdot <var:m> ^ <nat:11> + <nat:4> \cdot <var:m> ^ <nat:10> + <nat:1> \cdot <var:m> ^ <nat:9> + <nat:3> \cdot <var:m> ^ <nat:8> + <nat:2> \cdot <var:m> ^ <nat:7> + <nat:3> \cdot <var:m> ^ <nat:6> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:4> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:1> \} $ . Observing the proceeding command found in our segment of code , we have the assignment code \verb | <var:H> := <nat:2> + <var:H> * <var:K> | . This command redefines the condition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:12> + <nat:1> \cdot <var:m> ^ <nat:11> + <nat:4> \cdot <var:m> ^ <nat:10> + <nat:1> \cdot <var:m> ^ <nat:9> + <nat:3> \cdot <var:m> ^ <nat:8> + <nat:2> \cdot <var:m> ^ <nat:7> + <nat:3> \cdot <var:m> ^ <nat:6> + <nat:1> \cdot <var:m> ^ <nat:5> + <nat:4> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:1> \} $ as the condition $ \{ <var:K> = <var:m> \land <var:H> = <nat:1> \cdot <var:m> ^ <nat:13> + <nat:1> \cdot <var:m> ^ <nat:12> + <nat:4> \cdot <var:m> ^ <nat:11> + <nat:1> \cdot <var:m> ^ <nat:10> + <nat:3> \cdot <var:m> ^ <nat:9> + <nat:2> \cdot <var:m> ^ <nat:8> + <nat:3> \cdot <var:m> ^ <nat:7> + <nat:1> \cdot <var:m> ^ <nat:6> + <nat:4> \cdot <var:m> ^ <nat:4> + <nat:1> \cdot <var:m> ^ <nat:3> + <nat:1> \cdot <var:m> ^ <nat:2> + <nat:1> \cdot <var:m> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:K> = <var:m> }} <var:H> := <nat:1> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <nat:4> + <var:H> * <var:K> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <nat:3> + <var:H> * <var:K> ; <var:H> := <nat:2> + <var:H> * <var:K> ; <var:H> := <nat:3> + <var:H> * <var:K> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <var:H> * <var:K> ; <var:H> := <nat:4> + <var:H> * <var:K> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <nat:2> + <var:H> * <var:K> {{ <var:H> = <nat:1> * <var:m> ^ <nat:13> + <nat:1> * <var:m> ^ <nat:12> + <nat:4> * <var:m> ^ <nat:11> + <nat:1> * <var:m> ^ <nat:10> + <nat:3> * <var:m> ^ <nat:9> + <nat:2> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> * <var:m> ^ <nat:9> + <nat:1> * <var:m> ^ <nat:8> + <nat:4> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> * <var:m> ^ <nat:10> + <nat:1> * <var:m> ^ <nat:9> + <nat:4> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> * <var:m> ^ <nat:11> + <nat:1> * <var:m> ^ <nat:10> + <nat:4> * <var:m> ^ <nat:9> + <nat:1> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:7> + <nat:2> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> * <var:m> ^ <nat:12> + <nat:1> * <var:m> ^ <nat:11> + <nat:4> * <var:m> ^ <nat:10> + <nat:1> * <var:m> ^ <nat:9> + <nat:3> * <var:m> ^ <nat:8> + <nat:2> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:m> /\ <var:H> = <nat:1> * <var:m> ^ <nat:13> + <nat:1> * <var:m> ^ <nat:12> + <nat:4> * <var:m> ^ <nat:11> + <nat:1> * <var:m> ^ <nat:10> + <nat:3> * <var:m> ^ <nat:9> + <nat:2> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 