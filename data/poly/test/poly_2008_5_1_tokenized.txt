\begin{document} \begin{theorem} Take a series of commands : \begin{verbatim} <var:n1> := <var:z> ; <var:n0> := <nat:8> ; <var:n1> := <var:n1> * <nat:4> ; <var:B> := <var:n1> <var:B> := <var:B> + <var:n0> \end{verbatim} Given that we have $ <var:z> = <var:g> $ prior to the evaluation of the series of instructions it holds that we see $ <var:B> = <nat:4> \cdot <var:g> + <nat:8> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques gives us : \begin{eqnarray} \{ <var:z> = <var:g> \} \\ <var:n1> := <var:z> ; \\ \{ <var:z> = <var:g> \land <var:n1> = <var:g> \} \\ <var:n0> := <nat:8> ; \\ \{ <var:z> = <var:g> \land <var:n1> = <var:g> \land <var:n0> = <nat:8> \} \\ <var:n1> := <var:n1> * <nat:4> ; \\ \{ <var:z> = <var:g> \land <var:n1> = <nat:4> \cdot <var:g> \land <var:n0> = <nat:8> \} \\ <var:B> := <var:n1> \\ \{ <var:z> = <var:g> \land <var:n0> = <nat:8> \land <var:B> = <nat:4> \cdot <var:g> \} \\ <var:B> := <var:B> + <var:n0> \\ \{ <var:z> = <var:g> \land <var:B> = <nat:4> \cdot <var:g> + <nat:8> \} \end{eqnarray} As a result , our set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:z> = <var:g> }} <var:n1> := <var:z> ; <var:n0> := <nat:8> ; <var:n1> := <var:n1> * <nat:4> ; <var:B> := <var:n1> <var:B> := <var:B> + <var:n0> {{ <var:B> = <nat:4> * <var:g> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:n1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:n1> = <var:g> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:n1> = <nat:4> * <var:g> /\ <var:n0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:n0> = <nat:8> /\ <var:B> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:B> = <nat:4> * <var:g> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 