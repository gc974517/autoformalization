\begin{document} \begin{theorem} We define the following set of commands such that \begin{verbatim} <var:Q0> := <nat:1> ; <var:Q1> := <nat:1> ; <var:Q1> := <var:Q1> * <var:m> ; <var:Z> := <var:Q1> ; <var:Z> := <var:Z> + <var:Q0> \end{verbatim} Assuming it to be that $ <var:m> = <var:b> $ , letting $ <var:b> \in \mathbb{N} $ , ahead of running our program it holds that we see $ <var:Z> = <nat:1> \times <var:b> + <nat:1> $ . \end{theorem} \begin{proof} The application of usual Hoare logic produces : \begin{eqnarray} \{ <var:m> = <var:b> \} \\ <var:Q0> := <nat:1> ; \\ \{ <var:m> = <var:b> \land <var:Q0> = <nat:1> \} \\ <var:Q1> := <nat:1> ; \\ \{ <var:m> = <var:b> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:1> \} \\ <var:Q1> := <var:Q1> * <var:m> ; \\ \{ <var:m> = <var:b> \land <var:Q0> = <nat:1> \land <var:Q1> = <nat:1> * <var:b> \} \\ <var:Z> := <var:Q1> ; \\ \{ <var:m> = <var:b> \land <var:Q0> = <nat:1> \land <var:Z> = <nat:1> * <var:b> \} \\ <var:Z> := <var:Z> + <var:Q0> \\ \{ <var:m> = <var:b> \land <var:Z> = <nat:1> * <var:b> + <nat:1> \} \end{eqnarray} Given the above , our program has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:m> = <var:b> }} <var:Q0> := <nat:1> ; <var:Q1> := <nat:1> ; <var:Q1> := <var:Q1> * <var:m> ; <var:Z> := <var:Q1> ; <var:Z> := <var:Z> + <var:Q0> {{ <var:Z> = <nat:1> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:b> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:b> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:b> /\ <var:Q0> = <nat:1> /\ <var:Q1> = <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:b> /\ <var:Q0> = <nat:1> /\ <var:Z> = <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:b> /\ <var:Z> = <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 