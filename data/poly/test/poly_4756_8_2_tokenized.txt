\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c> := <nat:3> ; <var:c> := <nat:3> + <var:c> * <var:M> ; <var:c> := <nat:4> + <var:c> * <var:M> ; <var:c> := <nat:2> + <var:c> * <var:M> ; <var:c> := <nat:2> + <var:c> * <var:M> ; <var:c> := <var:c> * <var:M> ; <var:c> := <nat:3> + <var:c> * <var:M> ; <var:c> := <nat:3> + <var:c> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:M> = <var:z> $ ( for all whole numbers $ <var:z> $ ) prior to the evaluation of this set of commands , it must be that we have $ <var:c> = <nat:3> \cdot <var:z> ^ <nat:7> + <nat:3> \cdot <var:z> ^ <nat:6> + <nat:4> \cdot <var:z> ^ <nat:5> + <nat:2> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> + <nat:3> $ when set of instructions executes . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions can be accomplished with standard Hoare logic . Advancing , the variable update line giving $ <nat:3> $ toward $ <var:c>$ . This moves $ \{ <var:M> = <var:z> \} $ into the condition $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \} $ . This is shown through the assignment rule defined in typical Hoare techniques . Advancing to the next step , we have the variable assignmet line defining $ <nat:3> + <var:c> * <var:M> $ as $ <var:c>$ . This statement redefines the precondition $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \} $ as $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \cdot <var:z> + <nat:3> \} $ . Immediately following , we see the assignment command \verb | <var:c> := <nat:4> + <var:c> * <var:M> ; | . This statement redefines $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \cdot <var:z> + <nat:3> \} $ toward $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:4> \} $ . Moving on to the upcoming statement found in our segment of code , we have the variable update code \verb | <var:c> := <nat:2> + <var:c> * <var:M> ; | . This transfers the condition $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:4> \} $ into $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:2> \} $ . This is known to be sound using the assignment inference rule of usual Hoare techniques . Moving forward to the next statement in our series of commands , we see the command giving $ <nat:2> + <var:c> * <var:M> $ as $ <var:c>$ . This transfers the precondition $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:2> \} $ to $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \cdot <var:z> ^ <nat:4> + <nat:3> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:2> \} $ . This is known to be sound through the assignment scheme from Hoare logic . Following , the line giving $ <var:c> * <var:M> $ as $ <var:c>$ . This line forwards the precondition $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \cdot <var:z> ^ <nat:4> + <nat:3> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:2> \} $ as the condition $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \cdot <var:z> ^ <nat:5> + <nat:3> \cdot <var:z> ^ <nat:4> + <nat:4> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + \} $ . Paying attention to the proceeding piece of code in our code segment , the assignment statement \verb | <var:c> := <nat:3> + <var:c> * <var:M> ; | . This statement moves the condition $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \cdot <var:z> ^ <nat:5> + <nat:3> \cdot <var:z> ^ <nat:4> + <nat:4> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + \} $ to the condition $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \cdot <var:z> ^ <nat:6> + <nat:3> \cdot <var:z> ^ <nat:5> + <nat:4> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:3> \} $ . This is known to be sound through the assignment inference rule given by Hoare reasoning . Moving onward , we see the environment update code \verb | <var:c> := <nat:3> + <var:c> * <var:M> | . This code moves the precondition $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \cdot <var:z> ^ <nat:6> + <nat:3> \cdot <var:z> ^ <nat:5> + <nat:4> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:3> \} $ as the postcondition $ \{ <var:M> = <var:z> \land <var:c> = <nat:3> \cdot <var:z> ^ <nat:7> + <nat:3> \cdot <var:z> ^ <nat:6> + <nat:4> \cdot <var:z> ^ <nat:5> + <nat:2> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:c> := <nat:3> ; <var:c> := <nat:3> + <var:c> * <var:M> ; <var:c> := <nat:4> + <var:c> * <var:M> ; <var:c> := <nat:2> + <var:c> * <var:M> ; <var:c> := <nat:2> + <var:c> * <var:M> ; <var:c> := <var:c> * <var:M> ; <var:c> := <nat:3> + <var:c> * <var:M> ; <var:c> := <nat:3> + <var:c> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:M> = <var:z> }} <def:poly> {{ <var:c> = <nat:3> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:c> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:c> = <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:c> = <nat:3> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:c> = <nat:3> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:c> = <nat:3> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:c> = <nat:3> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:c> = <nat:3> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:c> = <nat:3> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 