\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Q0> := <nat:6> ; <var:Q1> := <nat:6> ; <var:Q1> := <var:Q1> * <var:Y> ; <var:Q2> := <nat:1> ; <var:Q2> := <var:Q2> * <var:Y> ; <var:Q2> := <var:Q2> * <var:Y> ; <var:Q3> := <nat:4> ; <var:Q3> := <var:Q3> * <var:Y> ; <var:Q3> := <var:Q3> * <var:Y> ; <var:Q3> := <var:Q3> * <var:Y> ; <var:q> := <var:Q3> ; <var:q> := <var:q> + <var:Q2> ; <var:q> := <var:q> + <var:Q1> ; <var:q> := <var:q> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> . Assuming , given any natural numbers $ <var:T> $ , $ <var:Y> = <var:T> $ prior to the execution of this set of commands it follows that we have $ <var:q> = <nat:4> \cdot <var:T> ^ <nat:3> + <nat:1> \cdot <var:T> ^ <nat:2> + <nat:6> \cdot <var:T> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:T> \} \\ <var:Q0> := <nat:6> ; \\ \{ <var:Y> = <var:T> \land <var:Q0> = <nat:6> \} \\ <var:Q1> := <nat:6> ; \\ \{ <var:Y> = <var:T> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:6> \} \\ <var:Q1> := <var:Q1> * <var:Y> ; \\ \{ <var:Y> = <var:T> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:6> * <var:T> \} \\ <var:Q2> := <nat:1> ; \\ \{ <var:Y> = <var:T> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:6> * <var:T> \land <var:Q2> = <nat:1> \} \\ <var:Q2> := <var:Q2> * <var:Y> ; \\ \{ <var:Y> = <var:T> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:6> * <var:T> \land <var:Q2> = <nat:1> * <var:T> \} \\ <var:Q2> := <var:Q2> * <var:Y> ; \\ \{ <var:Y> = <var:T> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:6> * <var:T> \land <var:Q2> = <nat:1> * <var:T> ^ <nat:2> \} \\ <var:Q3> := <nat:4> ; \\ \{ <var:Y> = <var:T> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:6> * <var:T> \land <var:Q2> = <nat:1> * <var:T> ^ <nat:2> \land <var:Q3> = <nat:4> \} \\ <var:Q3> := <var:Q3> * <var:Y> ; \\ \{ <var:Y> = <var:T> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:6> * <var:T> \land <var:Q2> = <nat:1> * <var:T> ^ <nat:2> \land <var:Q3> = <nat:4> * <var:T> \} \\ <var:Q3> := <var:Q3> * <var:Y> ; \\ \{ <var:Y> = <var:T> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:6> * <var:T> \land <var:Q2> = <nat:1> * <var:T> ^ <nat:2> \land <var:Q3> = <nat:4> * <var:T> ^ <nat:2> \} \\ <var:Q3> := <var:Q3> * <var:Y> ; \\ \{ <var:Y> = <var:T> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:6> * <var:T> \land <var:Q2> = <nat:1> * <var:T> ^ <nat:2> \land <var:Q3> = <nat:4> * <var:T> ^ <nat:3> \} \\ <var:q> := <var:Q3> ; \\ \{ <var:Y> = <var:T> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:6> * <var:T> \land <var:Q2> = <nat:1> * <var:T> ^ <nat:2> \land <var:q> = <nat:4> * <var:T> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:Q2> ; \\ \{ <var:Y> = <var:T> \land <var:Q0> = <nat:6> \land <var:Q1> = <nat:6> * <var:T> \land <var:q> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:Q1> ; \\ \{ <var:Y> = <var:T> \land <var:Q0> = <nat:6> \land <var:q> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:6> * <var:T> \} \\ <var:q> := <var:q> + <var:Q0> \\ \{ <var:Y> = <var:T> \land <var:q> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:6> * <var:T> + <nat:6> \} \end{eqnarray} The application of Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <def:poly> := <var:Q0> := <nat:6> ; <var:Q1> := <nat:6> ; <var:Q1> := <var:Q1> * <var:Y> ; <var:Q2> := <nat:1> ; <var:Q2> := <var:Q2> * <var:Y> ; <var:Q2> := <var:Q2> * <var:Y> ; <var:Q3> := <nat:4> ; <var:Q3> := <var:Q3> * <var:Y> ; <var:Q3> := <var:Q3> * <var:Y> ; <var:Q3> := <var:Q3> * <var:Y> ; <var:q> := <var:Q3> ; <var:q> := <var:q> + <var:Q2> ; <var:q> := <var:q> + <var:Q1> ; <var:q> := <var:q> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:Y> = <var:T> }} <def:poly> {{ <var:q> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:6> * <var:T> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:6> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:6> * <var:T> /\ <var:Q2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:6> * <var:T> /\ <var:Q2> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:6> * <var:T> /\ <var:Q2> = <nat:1> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:6> * <var:T> /\ <var:Q2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:Q3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:6> * <var:T> /\ <var:Q2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:Q3> = <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:6> * <var:T> /\ <var:Q2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:Q3> = <nat:4> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:6> * <var:T> /\ <var:Q2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:Q3> = <nat:4> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:6> * <var:T> /\ <var:Q2> = <nat:1> * <var:T> ^ <nat:2> /\ <var:q> = <nat:4> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:Q0> = <nat:6> /\ <var:Q1> = <nat:6> * <var:T> /\ <var:q> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:Q0> = <nat:6> /\ <var:q> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:6> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:T> /\ <var:q> = <nat:4> * <var:T> ^ <nat:3> + <nat:1> * <var:T> ^ <nat:2> + <nat:6> * <var:T> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 