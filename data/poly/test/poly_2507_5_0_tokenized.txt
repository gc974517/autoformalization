\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:9> ; <var:q1> := <nat:1> ; <var:q1> := <var:q1> * <var:d> ; <var:M> := <var:q1> ; <var:M> := <var:M> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assuming , for whole numbers $ <var:T> $ , that we have $ <var:d> = <var:T> $ before executing our code segment it follows that we have $ <var:M> = <nat:1> \times <var:T> + <nat:9> $ when series of commands terminates . \end{theorem} \begin{proof} Utilizing usual Hoare techniques gives : \begin{eqnarray} \{ <var:d> = <var:T> \} \\ <var:q0> := <nat:9> ; \\ \{ <var:d> = <var:T> \land <var:q0> = <nat:9> \} \\ <var:q1> := <nat:1> ; \\ \{ <var:d> = <var:T> \land <var:q0> = <nat:9> \land <var:q1> = <nat:1> \} \\ <var:q1> := <var:q1> * <var:d> ; \\ \{ <var:d> = <var:T> \land <var:q0> = <nat:9> \land <var:q1> = <nat:1> * <var:T> \} \\ <var:M> := <var:q1> ; \\ \{ <var:d> = <var:T> \land <var:q0> = <nat:9> \land <var:M> = <nat:1> * <var:T> \} \\ <var:M> := <var:M> + <var:q0> \\ \{ <var:d> = <var:T> \land <var:M> = <nat:1> * <var:T> + <nat:9> \} \end{eqnarray} Given the preceding argument , the segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q0> := <nat:9> ; <var:q1> := <nat:1> ; <var:q1> := <var:q1> * <var:d> ; <var:M> := <var:q1> ; <var:M> := <var:M> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:d> = <var:T> }} <def:poly> {{ <var:M> = <nat:1> * <var:T> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:q0> = <nat:9> /\ <var:q1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:q0> = <nat:9> /\ <var:q1> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:q0> = <nat:9> /\ <var:M> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:T> /\ <var:M> = <nat:1> * <var:T> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 