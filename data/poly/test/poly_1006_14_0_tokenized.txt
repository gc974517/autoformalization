\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:2> ; <var:u1> := <nat:7> ; <var:u1> := <var:u1> * <var:U> ; <var:u2> := <nat:8> ; <var:u2> := <var:u2> * <var:U> ; <var:u2> := <var:u2> * <var:U> ; <var:u3> := <nat:2> ; <var:u3> := <var:u3> * <var:U> ; <var:u3> := <var:u3> * <var:U> ; <var:u3> := <var:u3> * <var:U> ; <var:E> := <var:u3> ; <var:E> := <var:E> + <var:u2> ; <var:E> := <var:E> + <var:u1> ; <var:E> := <var:E> + <var:u0> \end{verbatim} Assuming ( for natural coefficients $ <var:h> $ ) it to be that $ <var:U> = <var:h> $ ahead of the evaluation of our series of instructions then we have $ <var:E> = <nat:2> \times <var:h> ^ <nat:3> + <nat:8> \times <var:h> ^ <nat:2> + <nat:7> \times <var:h> + <nat:2> $ after set of commands has finished executing . \end{theorem} \begin{proof} The method of proof for our series of commands is clear through Hoare logic . Moving onward , we have the variable assignmet line \verb | <var:u0> := <nat:2> ; | . This line moves the condition $ \{ <var:U> = <var:h> \} $ toward $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \} $ . Advancing to the following line contained in our list of commands , we see the binding command \verb | <var:u1> := <nat:7> ; | . This code moves the precondition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \} $ toward $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \} $ . This is rigorously given through the assignment rule obtained from typical Hoare reasoning . Moving on to the next command in our list of commands , we see the binding statement \verb | <var:u1> := <var:u1> * <var:U> ; | . This advances the precondition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \} $ into the condition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \} $ . Going to the next step , we see the code \verb | <var:u2> := <nat:8> ; | . This forwards the condition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \} $ as $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \} $ . This is known to be sound by the assignment rule from typical Hoare techniques . Moving on , we have the variable assignmet line \verb | <var:u2> := <var:u2> * <var:U> ; | . This moves the condition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \} $ into the condition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> \} $ . This is deduced using the assignment scheme given by standard Hoare techniques . Moving forward , the binding statement \verb | <var:u2> := <var:u2> * <var:U> ; | . This advances the condition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> \} $ toward $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment rule found in typical Hoare techniques . Moving forward to the next step , the command \verb | <var:u3> := <nat:2> ; | . This redefines $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> ^ <nat:2> \} $ as the condition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> ^ <nat:2> \land <var:u3> = <nat:2> \} $ . This is shown to be logically sound using the assignment scheme found in Hoare techniques . Immediately following , we have the assignment command \verb | <var:u3> := <var:u3> * <var:U> ; | . This command transfers the precondition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> ^ <nat:2> \land <var:u3> = <nat:2> \} $ to the condition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> ^ <nat:2> \land <var:u3> = <nat:2> \times <var:h> \} $ . Advancing on , we have the variable assignmet code \verb | <var:u3> := <var:u3> * <var:U> ; | . This command redefines $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> ^ <nat:2> \land <var:u3> = <nat:2> \times <var:h> \} $ toward the condition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> ^ <nat:2> \land <var:u3> = <nat:2> \times <var:h> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme of standard Hoare reasoning . Shifting focus toward the subsequent statement found in our series of commands , we have the variable binding statement assigning $ <var:u3> * <var:U> $ as $ <var:u3>$ . This command forwards $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> ^ <nat:2> \land <var:u3> = <nat:2> \times <var:h> ^ <nat:2> \} $ into the condition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> ^ <nat:2> \land <var:u3> = <nat:2> \times <var:h> ^ <nat:3> \} $ . This is known to be sound through the assignment inference rule given by usual Hoare techniques . Advancing on , we see the variable update line binding $ <var:u3> $ to $ <var:E>$ . This forwards the condition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> ^ <nat:2> \land <var:u3> = <nat:2> \times <var:h> ^ <nat:3> \} $ as the condition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> ^ <nat:2> \land <var:E> = <nat:2> \times <var:h> ^ <nat:3> \} $ . This is known to be sound with the assignment scheme from usual Hoare logic . Jumping to the next statement seen in our set of instructions , we see the variable assignmet command defining $ <var:E> + <var:u2> $ to $ <var:E>$ . This transfers $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:u2> = <nat:8> \times <var:h> ^ <nat:2> \land <var:E> = <nat:2> \times <var:h> ^ <nat:3> \} $ as the condition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:E> = <nat:2> \times <var:h> ^ <nat:3> + <nat:8> \times <var:h> ^ <nat:2> \} $ . Considering the upcoming command contained in our program , the variable assignmet line \verb | <var:E> := <var:E> + <var:u1> ; | . This redefines $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:u1> = <nat:7> \times <var:h> \land <var:E> = <nat:2> \times <var:h> ^ <nat:3> + <nat:8> \times <var:h> ^ <nat:2> \} $ as the postcondition $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:E> = <nat:2> \times <var:h> ^ <nat:3> + <nat:8> \times <var:h> ^ <nat:2> + <nat:7> \times <var:h> \} $ . Looking at the subsequent bit of code seen in the series of instructions , we have the assignment command \verb | <var:E> := <var:E> + <var:u0> | . This statement redefines $ \{ <var:U> = <var:h> \land <var:u0> = <nat:2> \land <var:E> = <nat:2> \times <var:h> ^ <nat:3> + <nat:8> \times <var:h> ^ <nat:2> + <nat:7> \times <var:h> \} $ as the condition $ \{ <var:U> = <var:h> \land <var:E> = <nat:2> \times <var:h> ^ <nat:3> + <nat:8> \times <var:h> ^ <nat:2> + <nat:7> \times <var:h> + <nat:2> \} $ . This is guaranteed using the assignment inference rule in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:U> = <var:h> }} <var:u0> := <nat:2> ; <var:u1> := <nat:7> ; <var:u1> := <var:u1> * <var:U> ; <var:u2> := <nat:8> ; <var:u2> := <var:u2> * <var:U> ; <var:u2> := <var:u2> * <var:U> ; <var:u3> := <nat:2> ; <var:u3> := <var:u3> * <var:U> ; <var:u3> := <var:u3> * <var:U> ; <var:u3> := <var:u3> * <var:U> ; <var:E> := <var:u3> ; <var:E> := <var:E> + <var:u2> ; <var:E> := <var:E> + <var:u1> ; <var:E> := <var:E> + <var:u0> {{ <var:E> = <nat:2> * <var:h> ^ <nat:3> + <nat:8> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:7> * <var:h> /\ <var:u2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:7> * <var:h> /\ <var:u2> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:7> * <var:h> /\ <var:u2> = <nat:8> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:7> * <var:h> /\ <var:u2> = <nat:8> * <var:h> ^ <nat:2> /\ <var:u3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:7> * <var:h> /\ <var:u2> = <nat:8> * <var:h> ^ <nat:2> /\ <var:u3> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:7> * <var:h> /\ <var:u2> = <nat:8> * <var:h> ^ <nat:2> /\ <var:u3> = <nat:2> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:7> * <var:h> /\ <var:u2> = <nat:8> * <var:h> ^ <nat:2> /\ <var:u3> = <nat:2> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:7> * <var:h> /\ <var:u2> = <nat:8> * <var:h> ^ <nat:2> /\ <var:E> = <nat:2> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:u0> = <nat:2> /\ <var:u1> = <nat:7> * <var:h> /\ <var:E> = <nat:2> * <var:h> ^ <nat:3> + <nat:8> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:u0> = <nat:2> /\ <var:E> = <nat:2> * <var:h> ^ <nat:3> + <nat:8> * <var:h> ^ <nat:2> + <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:h> /\ <var:E> = <nat:2> * <var:h> ^ <nat:3> + <nat:8> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 