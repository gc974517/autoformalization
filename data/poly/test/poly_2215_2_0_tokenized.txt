\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:2> ; <var:k> := <var:f0> \end{verbatim} Given given any natural coefficients $ <var:Z> $ it to hold that $ <var:j> = <var:Z> $ prior to executing this series of instructions , it follows that we have $ <var:k> = <nat:2> $ once segment of code has exited . \end{theorem} \begin{proof} Observe that the below decorated code segment . \begin{eqnarray} \{ <var:j> = <var:Z> \} \\ <var:f0> := <nat:2> ; \\ \{ <var:j> = <var:Z> \land <var:f0> = <nat:2> \} \\ <var:k> := <var:f0> \\ \{ <var:j> = <var:Z> \land <var:k> = <nat:2> \} \end{eqnarray} Utilizing typical Hoare logic ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:j> = <var:Z> }} <var:f0> := <nat:2> ; <var:k> := <var:f0> {{ <var:k> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:Z> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:Z> /\ <var:k> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 