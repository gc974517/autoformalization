\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:V1> := <var:B> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:4> ; <var:h> := <var:V1> <var:h> := <var:h> + <var:V0> \end{verbatim} Assuming that we have $ <var:B> = <var:H> $ , given any natural numbers $ <var:H> $ , prior to interpreting this list of instructions it must be that we see $ <var:h> = <nat:4> * <var:H> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our list of commands can be shown by the following decorated list of instructions . \begin{eqnarray} \{ <var:B> = <var:H> \} \\ <var:V1> := <var:B> ; \\ \{ <var:B> = <var:H> \land <var:V1> = <var:H> \} \\ <var:V0> := <nat:1> ; \\ \{ <var:B> = <var:H> \land <var:V1> = <var:H> \land <var:V0> = <nat:1> \} \\ <var:V1> := <var:V1> * <nat:4> ; \\ \{ <var:B> = <var:H> \land <var:V1> = <nat:4> \times <var:H> \land <var:V0> = <nat:1> \} \\ <var:h> := <var:V1> \\ \{ <var:B> = <var:H> \land <var:V0> = <nat:1> \land <var:h> = <nat:4> \times <var:H> \} \\ <var:h> := <var:h> + <var:V0> \\ \{ <var:B> = <var:H> \land <var:h> = <nat:4> \times <var:H> + <nat:1> \} \end{eqnarray} The application of typical Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:B> = <var:H> }} <var:V1> := <var:B> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:4> ; <var:h> := <var:V1> <var:h> := <var:h> + <var:V0> {{ <var:h> = <nat:4> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:V1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:V1> = <var:H> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:V1> = <nat:4> * <var:H> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:V0> = <nat:1> /\ <var:h> = <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:H> /\ <var:h> = <nat:4> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 