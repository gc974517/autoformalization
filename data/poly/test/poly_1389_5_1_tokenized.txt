\begin{document} \begin{theorem} We define a set of commands as \begin{verbatim} <var:R1> := <var:i> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:1> ; <var:w> := <var:R1> <var:w> := <var:w> + <var:R0> \end{verbatim} Given it to be that $ <var:i> = <var:Z> $ before executing this series of commands then $ <var:w> = <nat:1> \cdot <var:Z> + <nat:1> $ once code segment has exited . \end{theorem} \begin{proof} The argument for the code segment is given with typical Hoare reasoning . Looking at the subsequent piece of code found in the code segment , we see the binding code giving $ <var:i> $ to $ <var:R1>$ . This redefines the precondition $ \{ <var:i> = <var:Z> \} $ to $ \{ <var:i> = <var:Z> \land <var:R1> = <var:Z> \} $ . Moving onward , the environment update code \verb | <var:R0> := <nat:1> ; | . This advances the precondition $ \{ <var:i> = <var:Z> \land <var:R1> = <var:Z> \} $ to the condition $ \{ <var:i> = <var:Z> \land <var:R1> = <var:Z> \land <var:R0> = <nat:1> \} $ . This is ensured through the assignment scheme defined in Hoare logic . Following , we see the variable update statement \verb | <var:R1> := <var:R1> * <nat:1> ; | . This statement redefines $ \{ <var:i> = <var:Z> \land <var:R1> = <var:Z> \land <var:R0> = <nat:1> \} $ as the condition $ \{ <var:i> = <var:Z> \land <var:R1> = <nat:1> \cdot <var:Z> \land <var:R0> = <nat:1> \} $ . This is known to be sound by the assignment inference rule obtained from Hoare techniques . Moving on , we see the assignment command defining $ <var:R1$ toward $ <var:w>$ . This forwards the condition $ \{ <var:i> = <var:Z> \land <var:R1> = <nat:1> \cdot <var:Z> \land <var:R0> = <nat:1> \} $ to the postcondition $ \{ <var:i> = <var:Z> \land <var:R0> = <nat:1> \land <var:w> = <nat:1> \cdot <var:Z> \} $ . Moving onward , the variable update line \verb | <var:w> := <var:w> + <var:R0> | . This takes the precondition $ \{ <var:i> = <var:Z> \land <var:R0> = <nat:1> \land <var:w> = <nat:1> \cdot <var:Z> \} $ as the postcondition $ \{ <var:i> = <var:Z> \land <var:w> = <nat:1> \cdot <var:Z> + <nat:1> \} $ . This is sound by the assignment law in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:i> = <var:Z> }} <var:R1> := <var:i> ; <var:R0> := <nat:1> ; <var:R1> := <var:R1> * <nat:1> ; <var:w> := <var:R1> <var:w> := <var:w> + <var:R0> {{ <var:w> = <nat:1> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:Z> /\ <var:R1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Z> /\ <var:R1> = <var:Z> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Z> /\ <var:R1> = <nat:1> * <var:Z> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Z> /\ <var:R0> = <nat:1> /\ <var:w> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Z> /\ <var:w> = <nat:1> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 