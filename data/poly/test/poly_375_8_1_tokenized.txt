\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:N1> := <var:O> ; <var:N2> := <var:N1> * <var:O> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:3> ; <var:N2> := <var:N2> * <nat:6> ; <var:o> := <var:N2> <var:o> := <var:o> + <var:N1> <var:o> := <var:o> + <var:N0> \end{verbatim} Given that $ <var:O> = <var:W> $ before the execution of the set of instructions , it must be that we have $ <var:o> = <nat:6> \cdot <var:W> ^ <nat:2> + <nat:3> \cdot <var:W> + <nat:5> $ after segment of code is done . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:O> = <var:W> \} \\ <var:N1> := <var:O> ; \\ \{ <var:O> = <var:W> \land <var:N1> = <var:W> \} \\ <var:N2> := <var:N1> * <var:O> ; \\ \{ <var:O> = <var:W> \land <var:N1> = <var:W> \land <var:N2> = <var:W> ^ <nat:2> \} \\ <var:N0> := <nat:5> ; \\ \{ <var:O> = <var:W> \land <var:N1> = <var:W> \land <var:N2> = <var:W> ^ <nat:2> \land <var:N0> = <nat:5> \} \\ <var:N1> := <var:N1> * <nat:3> ; \\ \{ <var:O> = <var:W> \land <var:N1> = <nat:3> \times <var:W> \land <var:N2> = <var:W> ^ <nat:2> \land <var:N0> = <nat:5> \} \\ <var:N2> := <var:N2> * <nat:6> ; \\ \{ <var:O> = <var:W> \land <var:N1> = <nat:3> \times <var:W> \land <var:N2> = <nat:6> \times <var:W> ^ <nat:2> \land <var:N0> = <nat:5> \} \\ <var:o> := <var:N2> \\ \{ <var:O> = <var:W> \land <var:N1> = <nat:3> \times <var:W> \land <var:N0> = <nat:5> \land <var:o> = <nat:6> \times <var:W> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:N1> \\ \{ <var:O> = <var:W> \land <var:N0> = <nat:5> \land <var:o> = <nat:6> \times <var:W> ^ <nat:2> + <nat:3> \times <var:W> \} \\ <var:o> := <var:o> + <var:N0> \\ \{ <var:O> = <var:W> \land <var:o> = <nat:6> \times <var:W> ^ <nat:2> + <nat:3> \times <var:W> + <nat:5> \} \end{eqnarray} Considering the preceding argument , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:O> = <var:W> }} <var:N1> := <var:O> ; <var:N2> := <var:N1> * <var:O> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:3> ; <var:N2> := <var:N2> * <nat:6> ; <var:o> := <var:N2> <var:o> := <var:o> + <var:N1> <var:o> := <var:o> + <var:N0> {{ <var:o> = <nat:6> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:N1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:N1> = <var:W> /\ <var:N2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:N1> = <var:W> /\ <var:N2> = <var:W> ^ <nat:2> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:N1> = <nat:3> * <var:W> /\ <var:N2> = <var:W> ^ <nat:2> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:N1> = <nat:3> * <var:W> /\ <var:N2> = <nat:6> * <var:W> ^ <nat:2> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:N1> = <nat:3> * <var:W> /\ <var:N0> = <nat:5> /\ <var:o> = <nat:6> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:N0> = <nat:5> /\ <var:o> = <nat:6> * <var:W> ^ <nat:2> + <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:W> /\ <var:o> = <nat:6> * <var:W> ^ <nat:2> + <nat:3> * <var:W> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 