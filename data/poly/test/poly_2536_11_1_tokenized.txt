\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:j1> := <var:L> ; <var:j2> := <var:j1> * <var:L> ; <var:j3> := <var:j2> * <var:L> ; <var:j0> := <nat:7> ; <var:j1> := <var:j1> * <nat:9> ; <var:j2> := <var:j2> * <nat:6> ; <var:j3> := <var:j3> * <nat:8> ; <var:m> := <var:j3> <var:m> := <var:m> + <var:j2> <var:m> := <var:m> + <var:j1> <var:m> := <var:m> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Allowing $ <var:L> = <var:h> $ ahead of the evaluation of this series of commands , then $ <var:m> = <nat:8> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:7> $ when set of instructions terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:h> \} \\ <var:j1> := <var:L> ; \\ \{ <var:L> = <var:h> \land <var:j1> = <var:h> \} \\ <var:j2> := <var:j1> * <var:L> ; \\ \{ <var:L> = <var:h> \land <var:j1> = <var:h> \land <var:j2> = <var:h> ^ <nat:2> \} \\ <var:j3> := <var:j2> * <var:L> ; \\ \{ <var:L> = <var:h> \land <var:j1> = <var:h> \land <var:j2> = <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \} \\ <var:j0> := <nat:7> ; \\ \{ <var:L> = <var:h> \land <var:j1> = <var:h> \land <var:j2> = <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \land <var:j0> = <nat:7> \} \\ <var:j1> := <var:j1> * <nat:9> ; \\ \{ <var:L> = <var:h> \land <var:j1> = <nat:9> * <var:h> \land <var:j2> = <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \land <var:j0> = <nat:7> \} \\ <var:j2> := <var:j2> * <nat:6> ; \\ \{ <var:L> = <var:h> \land <var:j1> = <nat:9> * <var:h> \land <var:j2> = <nat:6> * <var:h> ^ <nat:2> \land <var:j3> = <var:h> ^ <nat:3> \land <var:j0> = <nat:7> \} \\ <var:j3> := <var:j3> * <nat:8> ; \\ \{ <var:L> = <var:h> \land <var:j1> = <nat:9> * <var:h> \land <var:j2> = <nat:6> * <var:h> ^ <nat:2> \land <var:j3> = <nat:8> * <var:h> ^ <nat:3> \land <var:j0> = <nat:7> \} \\ <var:m> := <var:j3> \\ \{ <var:L> = <var:h> \land <var:j1> = <nat:9> * <var:h> \land <var:j2> = <nat:6> * <var:h> ^ <nat:2> \land <var:j0> = <nat:7> \land <var:m> = <nat:8> * <var:h> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:j2> \\ \{ <var:L> = <var:h> \land <var:j1> = <nat:9> * <var:h> \land <var:j0> = <nat:7> \land <var:m> = <nat:8> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:j1> \\ \{ <var:L> = <var:h> \land <var:j0> = <nat:7> \land <var:m> = <nat:8> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:9> * <var:h> \} \\ <var:m> := <var:m> + <var:j0> \\ \{ <var:L> = <var:h> \land <var:m> = <nat:8> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:7> \} \end{eqnarray} Applying usual Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <var:j3> : string := " <var:j3> " . Definition <def:poly> := <var:j1> := <var:L> ; <var:j2> := <var:j1> * <var:L> ; <var:j3> := <var:j2> * <var:L> ; <var:j0> := <nat:7> ; <var:j1> := <var:j1> * <nat:9> ; <var:j2> := <var:j2> * <nat:6> ; <var:j3> := <var:j3> * <nat:8> ; <var:m> := <var:j3> <var:m> := <var:m> + <var:j2> <var:m> := <var:m> + <var:j1> <var:m> := <var:m> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:L> = <var:h> }} <def:poly> {{ <var:m> = <nat:8> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:j1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:j1> = <var:h> /\ <var:j2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:j1> = <var:h> /\ <var:j2> = <var:h> ^ <nat:2> /\ <var:j3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:j1> = <var:h> /\ <var:j2> = <var:h> ^ <nat:2> /\ <var:j3> = <var:h> ^ <nat:3> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:j1> = <nat:9> * <var:h> /\ <var:j2> = <var:h> ^ <nat:2> /\ <var:j3> = <var:h> ^ <nat:3> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:j1> = <nat:9> * <var:h> /\ <var:j2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:j3> = <var:h> ^ <nat:3> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:j1> = <nat:9> * <var:h> /\ <var:j2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:j3> = <nat:8> * <var:h> ^ <nat:3> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:j1> = <nat:9> * <var:h> /\ <var:j2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:j0> = <nat:7> /\ <var:m> = <nat:8> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:j1> = <nat:9> * <var:h> /\ <var:j0> = <nat:7> /\ <var:m> = <nat:8> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:j0> = <nat:7> /\ <var:m> = <nat:8> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:m> = <nat:8> * <var:h> ^ <nat:3> + <nat:6> * <var:h> ^ <nat:2> + <nat:9> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 