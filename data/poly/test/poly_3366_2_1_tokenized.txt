\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:5> ; <var:Y> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Assuming it to hold that $ <var:I> = <var:A> $ , for $ <var:A> \in \mathbb{N} $ , prior to running our program it holds that we see $ <var:Y> = <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for the program is done with usual Hoare reasoning . Focusing on the proceeding bits of codefound in our code , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:A> \} & <var:M0> := <nat:5> & \{ <var:I> = <var:A> \land <var:M0> = <nat:5> \} \\ \{ <var:I> = <var:A> \land <var:M0> = <nat:5> \} & <var:Y> := <var:M0& \{ <var:I> = <var:A> \land <var:Y> = <nat:5> \} \end{tabular} This is shown by the assignment scheme defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:5> ; <var:Y> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:I> = <var:A> }} <def:poly> {{ <var:Y> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:A> /\ <var:Y> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 