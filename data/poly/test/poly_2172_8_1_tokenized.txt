\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as follows \begin{verbatim} <var:w1> := <var:o> ; <var:w2> := <var:w1> * <var:o> ; <var:w0> := <nat:8> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:3> ; <var:p> := <var:w2> <var:p> := <var:p> + <var:w1> <var:p> := <var:p> + <var:w0> \end{verbatim} Assume $ <var:o> = <var:U> $ prior to evaluating this list of instructions it holds that we see $ <var:p> = <nat:3> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:8> $ after list of commands is done executing . \end{theorem} \begin{proof} Using Hoare techniques results in : \begin{eqnarray} \{ <var:o> = <var:U> \} \\ <var:w1> := <var:o> ; \\ \{ <var:o> = <var:U> \land <var:w1> = <var:U> \} \\ <var:w2> := <var:w1> * <var:o> ; \\ \{ <var:o> = <var:U> \land <var:w1> = <var:U> \land <var:w2> = <var:U> ^ <nat:2> \} \\ <var:w0> := <nat:8> ; \\ \{ <var:o> = <var:U> \land <var:w1> = <var:U> \land <var:w2> = <var:U> ^ <nat:2> \land <var:w0> = <nat:8> \} \\ <var:w1> := <var:w1> * <nat:2> ; \\ \{ <var:o> = <var:U> \land <var:w1> = <nat:2> * <var:U> \land <var:w2> = <var:U> ^ <nat:2> \land <var:w0> = <nat:8> \} \\ <var:w2> := <var:w2> * <nat:3> ; \\ \{ <var:o> = <var:U> \land <var:w1> = <nat:2> * <var:U> \land <var:w2> = <nat:3> * <var:U> ^ <nat:2> \land <var:w0> = <nat:8> \} \\ <var:p> := <var:w2> \\ \{ <var:o> = <var:U> \land <var:w1> = <nat:2> * <var:U> \land <var:w0> = <nat:8> \land <var:p> = <nat:3> * <var:U> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:w1> \\ \{ <var:o> = <var:U> \land <var:w0> = <nat:8> \land <var:p> = <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> \} \\ <var:p> := <var:p> + <var:w0> \\ \{ <var:o> = <var:U> \land <var:p> = <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:8> \} \end{eqnarray} Considering the preceding argument , the code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:o> = <var:U> }} <var:w1> := <var:o> ; <var:w2> := <var:w1> * <var:o> ; <var:w0> := <nat:8> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:3> ; <var:p> := <var:w2> <var:p> := <var:p> + <var:w1> <var:p> := <var:p> + <var:w0> {{ <var:p> = <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:w1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:w1> = <var:U> /\ <var:w2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:w1> = <var:U> /\ <var:w2> = <var:U> ^ <nat:2> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:w1> = <nat:2> * <var:U> /\ <var:w2> = <var:U> ^ <nat:2> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:w1> = <nat:2> * <var:U> /\ <var:w2> = <nat:3> * <var:U> ^ <nat:2> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:w1> = <nat:2> * <var:U> /\ <var:w0> = <nat:8> /\ <var:p> = <nat:3> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:w0> = <nat:8> /\ <var:p> = <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:U> /\ <var:p> = <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 