\begin{document} \begin{theorem} We define a list of commands as follows \begin{verbatim} <var:Y0> := <nat:9> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:f> ; <var:V> := <var:Y1> ; <var:V> := <var:V> + <var:Y0> \end{verbatim} Given that $ <var:f> = <var:P> $ , for some natural numbers $ <var:P> $ , ahead of evaluating the program then $ <var:V> = <nat:1> \cdot <var:P> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of commands is given using usual Hoare techniques . Moving on , \begin{verbatim} { <var:f> = <var:P> } <var:Y0> := <nat:9> { <var:f> = <var:P> \land <var:Y0> = <nat:9> } { <var:f> = <var:P> \land <var:Y0> = <nat:9> } <var:Y1> := <nat:1> { <var:f> = <var:P> \land <var:Y0> = <nat:9> \land <var:Y1> = <nat:1> } { <var:f> = <var:P> \land <var:Y0> = <nat:9> \land <var:Y1> = <nat:1> } <var:Y1> := <var:Y1> * <var:f> { <var:f> = <var:P> \land <var:Y0> = <nat:9> \land <var:Y1> = <nat:1> \times <var:P> } { <var:f> = <var:P> \land <var:Y0> = <nat:9> \land <var:Y1> = <nat:1> \times <var:P> } <var:V> := <var:Y1> { <var:f> = <var:P> \land <var:Y0> = <nat:9> \land <var:V> = <nat:1> \times <var:P> } { <var:f> = <var:P> \land <var:Y0> = <nat:9> \land <var:V> = <nat:1> \times <var:P> } <var:V> := <var:V> + <var:Y0{ <var:f> = <var:P> \land <var:V> = <nat:1> \times <var:P> + <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:f> = <var:P> }} <var:Y0> := <nat:9> ; <var:Y1> := <nat:1> ; <var:Y1> := <var:Y1> * <var:f> ; <var:V> := <var:Y1> ; <var:V> := <var:V> + <var:Y0> {{ <var:V> = <nat:1> * <var:P> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:Y0> = <nat:9> /\ <var:Y1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:Y0> = <nat:9> /\ <var:Y1> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:Y0> = <nat:9> /\ <var:V> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:V> = <nat:1> * <var:P> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 