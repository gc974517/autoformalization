\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:1> ; <var:d> := <var:m0> \end{verbatim} Assume it to hold that $ <var:U> = <var:r> $ prior to running our series of instructions , it holds that we see $ <var:d> = <nat:1> $ when segment of code has exited . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions is shown using typical Hoare reasoning . Next , \verb | { <var:U> = <var:r> } <var:m0> := <nat:1> { <var:U> = <var:r> \land <var:m0> = <nat:1> } | . Immediately following , \verb | { <var:U> = <var:r> } <var:m0> := <nat:1> { <var:U> = <var:r> \land <var:m0> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:U> = <var:r> }} <var:m0> := <nat:1> ; <var:d> := <var:m0> {{ <var:d> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:r> /\ <var:d> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 