\begin{document} \begin{theorem} Consider the following program as follows \begin{verbatim} <var:J0> := <nat:1> ; <var:U> := <var:J0> \end{verbatim} Allowing --- for some integers $ <var:r> $ --- it to hold that $ <var:h> = <var:r> $ ahead of the execution of the series of commands , then we see $ <var:U> = <nat:1> $ when code segment has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:r> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:h> = <var:r> \land <var:J0> = <nat:1> \} \\ <var:U> := <var:J0> \\ \{ <var:h> = <var:r> \land <var:U> = <nat:1> \} \end{eqnarray} Allowing evaluating our series of instructions yields : \begin{eqnarray} \end{eqnarray} The application of typical Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:h> = <var:r> }} <var:J0> := <nat:1> ; <var:U> := <var:J0> {{ <var:U> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:r> /\ <var:U> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 