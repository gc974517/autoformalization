\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} : \begin{verbatim} <var:W0> := <nat:8> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:j> ; <var:v> := <var:W1> ; <var:v> := <var:v> + <var:W0> \end{verbatim} Allow it to be that $ <var:j> = <var:I> $ before executing the list of commands it must be that we see $ <var:v> = <nat:2> * <var:I> + <nat:8> $ . \end{theorem} \begin{proof} The proof of this code is evident using typical Hoare reasoning . Advancing to the following step found in the code segment , we see the command \verb | <var:W0> := <nat:8> ; | . This code forwards the precondition $ \{ <var:j> = <var:I> \} $ into $ \{ <var:j> = <var:I> \land <var:W0> = <nat:8> \} $ . Honing in on the following bit of code seen in the set of instructions , we see the binding line \verb | <var:W1> := <nat:2> ; | . This command moves the precondition $ \{ <var:j> = <var:I> \land <var:W0> = <nat:8> \} $ as the condition $ \{ <var:j> = <var:I> \land <var:W0> = <nat:8> \land <var:W1> = <nat:2> \} $ . This is guaranteed by the assignment law found in standard Hoare logic . Keeping momentum , the assignment line \verb | <var:W1> := <var:W1> * <var:j> ; | . This forwards the precondition $ \{ <var:j> = <var:I> \land <var:W0> = <nat:8> \land <var:W1> = <nat:2> \} $ as the condition $ \{ <var:j> = <var:I> \land <var:W0> = <nat:8> \land <var:W1> = <nat:2> \times <var:I> \} $ . After , we have the assignment code \verb | <var:v> := <var:W1> ; | . This statement redefines the condition $ \{ <var:j> = <var:I> \land <var:W0> = <nat:8> \land <var:W1> = <nat:2> \times <var:I> \} $ toward the postcondition $ \{ <var:j> = <var:I> \land <var:W0> = <nat:8> \land <var:v> = <nat:2> \times <var:I> \} $ . Following , the binding statement \verb | <var:v> := <var:v> + <var:W0> | . This advances the condition $ \{ <var:j> = <var:I> \land <var:W0> = <nat:8> \land <var:v> = <nat:2> \times <var:I> \} $ as the postcondition $ \{ <var:j> = <var:I> \land <var:v> = <nat:2> \times <var:I> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:j> = <var:I> }} <var:W0> := <nat:8> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:j> ; <var:v> := <var:W1> ; <var:v> := <var:v> + <var:W0> {{ <var:v> = <nat:2> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:W0> = <nat:8> /\ <var:W1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:W0> = <nat:8> /\ <var:W1> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:W0> = <nat:8> /\ <var:v> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:I> /\ <var:v> = <nat:2> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 