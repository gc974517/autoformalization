\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f> := <nat:2> ; <var:f> := <var:f> * <var:y> ; <var:f> := <nat:2> + <var:f> * <var:y> ; <var:f> := <nat:4> + <var:f> * <var:y> ; <var:f> := <nat:4> + <var:f> * <var:y> ; <var:f> := <nat:2> + <var:f> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:y> = <var:m> $ , for positive integer coefficients $ <var:m> $ , before evaluating this code , it must be that $ <var:f> = <nat:2> \cdot <var:m> ^ <nat:5> + <nat:2> \cdot <var:m> ^ <nat:3> + <nat:4> \cdot <var:m> ^ <nat:2> + <nat:4> \cdot <var:m> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code segment can be accomplished with standard Hoare logic . Advancing on , we see \begin{verbatim} { <var:y> = <var:m> } <var:f> := <nat:2> { <var:y> = <var:m> \land <var:f> = <nat:2> } \end{verbatim} This is given through the variable update law from usual Hoare logic . Going to the next step , \begin{verbatim} { <var:y> = <var:m> } <var:f> := <nat:2> { <var:y> = <var:m> \land <var:f> = <nat:2> } { <var:y> = <var:m> \land <var:f> = <nat:2> } <var:f> := <var:f> * <var:y> { <var:y> = <var:m> \land <var:f> = <nat:2> \times <var:m> + } { <var:y> = <var:m> \land <var:f> = <nat:2> \times <var:m> + } <var:f> := <nat:2> + <var:f> * <var:y> { <var:y> = <var:m> \land <var:f> = <nat:2> \times <var:m> ^ <nat:2> + <nat:2> } \end{verbatim} This is shown by the binding inference rule defined in usual Hoare reasoning . Taking another step toward the following commands seen in the list of instructions , \begin{verbatim} { <var:y> = <var:m> } <var:f> := <nat:2> { <var:y> = <var:m> \land <var:f> = <nat:2> } { <var:y> = <var:m> \land <var:f> = <nat:2> } <var:f> := <var:f> * <var:y> { <var:y> = <var:m> \land <var:f> = <nat:2> \times <var:m> + } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:2> ; <var:f> := <var:f> * <var:y> ; <var:f> := <nat:2> + <var:f> * <var:y> ; <var:f> := <nat:4> + <var:f> * <var:y> ; <var:f> := <nat:4> + <var:f> * <var:y> ; <var:f> := <nat:2> + <var:f> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:y> = <var:m> }} <def:poly> {{ <var:f> = <nat:2> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:f> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:f> = <nat:2> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:f> = <nat:2> * <var:m> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:f> = <nat:2> * <var:m> ^ <nat:3> + <nat:2> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:f> = <nat:2> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:m> /\ <var:f> = <nat:2> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 