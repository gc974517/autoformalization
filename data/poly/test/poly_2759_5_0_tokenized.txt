\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:8> ; <var:Z1> := <nat:2> ; <var:Z1> := <var:Z1> * <var:J> ; <var:Y> := <var:Z1> ; <var:Y> := <var:Y> + <var:Z0> \end{verbatim} Assuming that we have $ <var:J> = <var:h> $ , for every natural numbers $ <var:h> $ , prior to interpreting our list of instructions , it holds that we have $ <var:Y> = <nat:2> \times <var:h> + <nat:8> $ after code segment terminates . \end{theorem} \begin{proof} The flow of logic for this code is given through the following decorated list of instructions . \begin{eqnarray} \{ <var:J> = <var:h> \} \\ <var:Z0> := <nat:8> ; \\ \{ <var:J> = <var:h> \land <var:Z0> = <nat:8> \} \\ <var:Z1> := <nat:2> ; \\ \{ <var:J> = <var:h> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:2> \} \\ <var:Z1> := <var:Z1> * <var:J> ; \\ \{ <var:J> = <var:h> \land <var:Z0> = <nat:8> \land <var:Z1> = <nat:2> * <var:h> \} \\ <var:Y> := <var:Z1> ; \\ \{ <var:J> = <var:h> \land <var:Z0> = <nat:8> \land <var:Y> = <nat:2> * <var:h> \} \\ <var:Y> := <var:Y> + <var:Z0> \\ \{ <var:J> = <var:h> \land <var:Y> = <nat:2> * <var:h> + <nat:8> \} \end{eqnarray} The application of Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:J> = <var:h> }} <var:Z0> := <nat:8> ; <var:Z1> := <nat:2> ; <var:Z1> := <var:Z1> * <var:J> ; <var:Y> := <var:Z1> ; <var:Y> := <var:Y> + <var:Z0> {{ <var:Y> = <nat:2> * <var:h> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:Z0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:Z0> = <nat:8> /\ <var:Z1> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:Z0> = <nat:8> /\ <var:Y> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:Y> = <nat:2> * <var:h> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 