\begin{document} \begin{theorem} Take the following segment of code such that \begin{verbatim} <var:O0> := <nat:3> ; <var:W> := <var:O0> \end{verbatim} Assuming $ <var:d> = <var:A> $ prior to interpreting this list of commands , it follows that we have $ <var:W> = <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this code is shown through standard Hoare logic . Moving on to the proceeding command found in our code segment , we see \begin{verbatim} { <var:d> = <var:A> } <var:O0> := <nat:3> { <var:d> = <var:A> \land <var:O0> = <nat:3> } \end{verbatim} Moving on to the next step , we see \begin{verbatim} { <var:d> = <var:A> } <var:O0> := <nat:3> { <var:d> = <var:A> \land <var:O0> = <nat:3> } \end{verbatim} This is deduced by the environment update rule given in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:d> = <var:A> }} <var:O0> := <nat:3> ; <var:W> := <var:O0> {{ <var:W> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:A> /\ <var:W> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 