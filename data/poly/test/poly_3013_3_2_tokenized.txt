\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} as \begin{verbatim} <var:G> := <nat:4> ; <var:G> := <nat:4> + <var:G> * <var:L> ; <var:G> := <nat:4> + <var:G> * <var:L> \end{verbatim} Assuming it to be that $ <var:L> = <var:F> $ given any positive numbers $ <var:F> $ prior to executing the program , then $ <var:G> = <nat:4> \cdot <var:F> ^ <nat:2> + <nat:4> \cdot <var:F> + <nat:4> $ after series of instructions has executed . \end{theorem} \begin{proof} Observe that the below decorated series of commands . \begin{eqnarray} \{ <var:L> = <var:F> \} \\ <var:G> := <nat:4> ; \\ \{ <var:L> = <var:F> \land <var:G> = <nat:4> \} \\ <var:G> := <nat:4> + <var:G> * <var:L> ; \\ \{ <var:L> = <var:F> \land <var:G> = <nat:4> \times <var:F> + <nat:4> \} \\ <var:G> := <nat:4> + <var:G> * <var:L> \\ \{ <var:L> = <var:F> \land <var:G> = <nat:4> \times <var:F> ^ <nat:2> + <nat:4> \times <var:F> + <nat:4> \} \end{eqnarray} The application of typical Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:L> = <var:F> }} <var:G> := <nat:4> ; <var:G> := <nat:4> + <var:G> * <var:L> ; <var:G> := <nat:4> + <var:G> * <var:L> {{ <var:G> = <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:G> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:G> = <nat:4> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:F> /\ <var:G> = <nat:4> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 