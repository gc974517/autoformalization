\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:u1> := <var:Y> ; <var:u2> := <var:u1> * <var:Y> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:3> ; <var:u2> := <var:u2> * <nat:2> ; <var:B> := <var:u2> <var:B> := <var:B> + <var:u1> <var:B> := <var:B> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:Y> = <var:A> $ prior to the evaluation of the segment of code it holds that we see $ <var:B> = <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:4> $ . \end{theorem} \begin{proof} Using Hoare reasoning returns : \begin{eqnarray} \{ <var:Y> = <var:A> \} \\ <var:u1> := <var:Y> ; \\ \{ <var:Y> = <var:A> \land <var:u1> = <var:A> \} \\ <var:u2> := <var:u1> * <var:Y> ; \\ \{ <var:Y> = <var:A> \land <var:u1> = <var:A> \land <var:u2> = <var:A> ^ <nat:2> \} \\ <var:u0> := <nat:4> ; \\ \{ <var:Y> = <var:A> \land <var:u1> = <var:A> \land <var:u2> = <var:A> ^ <nat:2> \land <var:u0> = <nat:4> \} \\ <var:u1> := <var:u1> * <nat:3> ; \\ \{ <var:Y> = <var:A> \land <var:u1> = <nat:3> \cdot <var:A> \land <var:u2> = <var:A> ^ <nat:2> \land <var:u0> = <nat:4> \} \\ <var:u2> := <var:u2> * <nat:2> ; \\ \{ <var:Y> = <var:A> \land <var:u1> = <nat:3> \cdot <var:A> \land <var:u2> = <nat:2> \cdot <var:A> ^ <nat:2> \land <var:u0> = <nat:4> \} \\ <var:B> := <var:u2> \\ \{ <var:Y> = <var:A> \land <var:u1> = <nat:3> \cdot <var:A> \land <var:u0> = <nat:4> \land <var:B> = <nat:2> \cdot <var:A> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:u1> \\ \{ <var:Y> = <var:A> \land <var:u0> = <nat:4> \land <var:B> = <nat:2> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> \} \\ <var:B> := <var:B> + <var:u0> \\ \{ <var:Y> = <var:A> \land <var:B> = <nat:2> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> + <nat:4> \} \end{eqnarray} As a consequence , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u1> := <var:Y> ; <var:u2> := <var:u1> * <var:Y> ; <var:u0> := <nat:4> ; <var:u1> := <var:u1> * <nat:3> ; <var:u2> := <var:u2> * <nat:2> ; <var:B> := <var:u2> <var:B> := <var:B> + <var:u1> <var:B> := <var:B> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:Y> = <var:A> }} <def:poly> {{ <var:B> = <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:u1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:u1> = <var:A> /\ <var:u2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:u1> = <var:A> /\ <var:u2> = <var:A> ^ <nat:2> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:u1> = <nat:3> * <var:A> /\ <var:u2> = <var:A> ^ <nat:2> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:u1> = <nat:3> * <var:A> /\ <var:u2> = <nat:2> * <var:A> ^ <nat:2> /\ <var:u0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:u1> = <nat:3> * <var:A> /\ <var:u0> = <nat:4> /\ <var:B> = <nat:2> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:u0> = <nat:4> /\ <var:B> = <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:A> /\ <var:B> = <nat:2> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 