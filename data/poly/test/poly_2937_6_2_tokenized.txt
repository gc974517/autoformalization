\begin{document} \begin{theorem} Take a set of commands as \begin{verbatim} <var:U> := <nat:4> ; <var:U> := <nat:3> + <var:U> * <var:X> ; <var:U> := <var:U> * <var:X> ; <var:U> := <nat:3> + <var:U> * <var:X> ; <var:U> := <var:U> * <var:X> ; <var:U> := <nat:1> + <var:U> * <var:X> \end{verbatim} Assume it to hold that $ <var:X> = <var:Q> $ ahead of the execution of this code it must be that we have $ <var:U> = <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:3> \cdot <var:Q> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our program can be done through typical Hoare techniques . Moving onward , we have \begin{verbatim} { <var:X> = <var:Q> } <var:U> := <nat:4> { <var:X> = <var:Q> \land <var:U> = <nat:4> } { <var:X> = <var:Q> \land <var:U> = <nat:4> } <var:U> := <nat:3> + <var:U> * <var:X> { <var:X> = <var:Q> \land <var:U> = <nat:4> \times <var:Q> + <nat:3> } { <var:X> = <var:Q> \land <var:U> = <nat:4> \times <var:Q> + <nat:3> } <var:U> := <var:U> * <var:X> { <var:X> = <var:Q> \land <var:U> = <nat:4> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + } \end{verbatim} This is sound using the binding rule from typical Hoare reasoning . Advancing , we have \begin{verbatim} { <var:X> = <var:Q> } <var:U> := <nat:4> { <var:X> = <var:Q> \land <var:U> = <nat:4> } \end{verbatim} Jumping to the upcoming bits of codeseen in our series of instructions , we see \begin{verbatim} { <var:X> = <var:Q> } <var:U> := <nat:4> { <var:X> = <var:Q> \land <var:U> = <nat:4> } { <var:X> = <var:Q> \land <var:U> = <nat:4> } <var:U> := <nat:3> + <var:U> * <var:X> { <var:X> = <var:Q> \land <var:U> = <nat:4> \times <var:Q> + <nat:3> } \end{verbatim} This is ensured using the variable binding scheme given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:X> = <var:Q> }} <var:U> := <nat:4> ; <var:U> := <nat:3> + <var:U> * <var:X> ; <var:U> := <var:U> * <var:X> ; <var:U> := <nat:3> + <var:U> * <var:X> ; <var:U> := <var:U> * <var:X> ; <var:U> := <nat:1> + <var:U> * <var:X> {{ <var:U> = <nat:4> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:U> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:U> = <nat:4> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:U> = <nat:4> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:U> = <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:U> = <nat:4> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:U> = <nat:4> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 