\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h> := <nat:1> ; <var:h> := <nat:3> + <var:h> * <var:J> ; <var:h> := <nat:1> + <var:h> * <var:J> ; <var:h> := <nat:3> + <var:h> * <var:J> ; <var:h> := <nat:4> + <var:h> * <var:J> ; <var:h> := <var:h> * <var:J> ; <var:h> := <nat:2> + <var:h> * <var:J> ; <var:h> := <nat:1> + <var:h> * <var:J> ; <var:h> := <var:h> * <var:J> ; <var:h> := <nat:2> + <var:h> * <var:J> ; <var:h> := <nat:1> + <var:h> * <var:J> ; <var:h> := <nat:4> + <var:h> * <var:J> ; <var:h> := <nat:4> + <var:h> * <var:J> ; <var:h> := <nat:4> + <var:h> * <var:J> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> . Assume it to hold that $ <var:J> = <var:v> $ --- given any $ <var:v> $ --- ahead of evaluating this list of commands it holds that $ <var:h> = <nat:1> * <var:v> ^ <nat:13> + <nat:3> * <var:v> ^ <nat:12> + <nat:1> * <var:v> ^ <nat:11> + <nat:3> * <var:v> ^ <nat:10> + <nat:4> * <var:v> ^ <nat:9> + <nat:2> * <var:v> ^ <nat:7> + <nat:1> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:4> $ once list of commands finishes . \end{theorem} \begin{proof} The method of proof for the code can be seen by usual Hoare reasoning . Moving on to the next statements found in our code , \begin{verbatim} { <var:J> = <var:v> } <var:h> := <nat:1> { <var:J> = <var:v> \land <var:h> = <nat:1> } { <var:J> = <var:v> \land <var:h> = <nat:1> } <var:h> := <nat:3> + <var:h> * <var:J> { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> + <nat:3> } { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> + <nat:3> } <var:h> := <nat:1> + <var:h> * <var:J> { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> } \end{verbatim} This is known to be sound through the environment update rule given in Hoare logic . Moving forward to the next step , we see \begin{verbatim} { <var:J> = <var:v> } <var:h> := <nat:1> { <var:J> = <var:v> \land <var:h> = <nat:1> } \end{verbatim} This is sound through the assignment scheme given by Hoare techniques . Moving forward to the next lines of codecontained in the list of instructions , we have \begin{verbatim} { <var:J> = <var:v> } <var:h> := <nat:1> { <var:J> = <var:v> \land <var:h> = <nat:1> } { <var:J> = <var:v> \land <var:h> = <nat:1> } <var:h> := <nat:3> + <var:h> * <var:J> { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> + <nat:3> } { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> + <nat:3> } <var:h> := <nat:1> + <var:h> * <var:J> { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> } { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> } <var:h> := <nat:3> + <var:h> * <var:J> { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:3> } { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:3> } <var:h> := <nat:4> + <var:h> * <var:J> { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> } { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> } <var:h> := <var:h> * <var:J> { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + } { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + } <var:h> := <nat:2> + <var:h> * <var:J> { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> } { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> } <var:h> := <nat:1> + <var:h> * <var:J> { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> + <nat:1> } \end{verbatim} Moving on to the next step , we have \begin{verbatim} { <var:J> = <var:v> } <var:h> := <nat:1> { <var:J> = <var:v> \land <var:h> = <nat:1> } { <var:J> = <var:v> \land <var:h> = <nat:1> } <var:h> := <nat:3> + <var:h> * <var:J> { <var:J> = <var:v> \land <var:h> = <nat:1> * <var:v> + <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:1> ; <var:h> := <nat:3> + <var:h> * <var:J> ; <var:h> := <nat:1> + <var:h> * <var:J> ; <var:h> := <nat:3> + <var:h> * <var:J> ; <var:h> := <nat:4> + <var:h> * <var:J> ; <var:h> := <var:h> * <var:J> ; <var:h> := <nat:2> + <var:h> * <var:J> ; <var:h> := <nat:1> + <var:h> * <var:J> ; <var:h> := <var:h> * <var:J> ; <var:h> := <nat:2> + <var:h> * <var:J> ; <var:h> := <nat:1> + <var:h> * <var:J> ; <var:h> := <nat:4> + <var:h> * <var:J> ; <var:h> := <nat:4> + <var:h> * <var:J> ; <var:h> := <nat:4> + <var:h> * <var:J> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:J> = <var:v> }} <def:poly> {{ <var:h> = <nat:1> * <var:v> ^ <nat:13> + <nat:3> * <var:v> ^ <nat:12> + <nat:1> * <var:v> ^ <nat:11> + <nat:3> * <var:v> ^ <nat:10> + <nat:4> * <var:v> ^ <nat:9> + <nat:2> * <var:v> ^ <nat:7> + <nat:1> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:7> + <nat:1> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> * <var:v> ^ <nat:9> + <nat:3> * <var:v> ^ <nat:8> + <nat:1> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> * <var:v> ^ <nat:10> + <nat:3> * <var:v> ^ <nat:9> + <nat:1> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:7> + <nat:4> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> * <var:v> ^ <nat:11> + <nat:3> * <var:v> ^ <nat:10> + <nat:1> * <var:v> ^ <nat:9> + <nat:3> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> * <var:v> ^ <nat:12> + <nat:3> * <var:v> ^ <nat:11> + <nat:1> * <var:v> ^ <nat:10> + <nat:3> * <var:v> ^ <nat:9> + <nat:4> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:v> /\ <var:h> = <nat:1> * <var:v> ^ <nat:13> + <nat:3> * <var:v> ^ <nat:12> + <nat:1> * <var:v> ^ <nat:11> + <nat:3> * <var:v> ^ <nat:10> + <nat:4> * <var:v> ^ <nat:9> + <nat:2> * <var:v> ^ <nat:7> + <nat:1> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 