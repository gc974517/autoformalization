\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k> := <nat:3> ; <var:k> := <nat:4> + <var:k> * <var:Q> ; <var:k> := <var:k> * <var:Q> ; <var:k> := <nat:3> + <var:k> * <var:Q> ; <var:k> := <nat:4> + <var:k> * <var:Q> ; <var:k> := <nat:4> + <var:k> * <var:Q> ; <var:k> := <nat:2> + <var:k> * <var:Q> ; <var:k> := <nat:4> + <var:k> * <var:Q> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:Q> = <var:z> $ prior to the execution of our segment of code it must be that $ <var:k> = <nat:3> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:Q> = <var:z> \} \\ <var:k> := <nat:3> ; \\ \{ <var:Q> = <var:z> \land <var:k> = <nat:3> \} \\ <var:k> := <nat:4> + <var:k> * <var:Q> ; \\ \{ <var:Q> = <var:z> \land <var:k> = <nat:3> * <var:z> + <nat:4> \} \\ <var:k> := <var:k> * <var:Q> ; \\ \{ <var:Q> = <var:z> \land <var:k> = <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + \} \\ <var:k> := <nat:3> + <var:k> * <var:Q> ; \\ \{ <var:Q> = <var:z> \land <var:k> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:3> \} \\ <var:k> := <nat:4> + <var:k> * <var:Q> ; \\ \{ <var:Q> = <var:z> \land <var:k> = <nat:3> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> + <nat:4> \} \\ <var:k> := <nat:4> + <var:k> * <var:Q> ; \\ \{ <var:Q> = <var:z> \land <var:k> = <nat:3> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:4> \} \\ <var:k> := <nat:2> + <var:k> * <var:Q> ; \\ \{ <var:Q> = <var:z> \land <var:k> = <nat:3> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> \} \\ <var:k> := <nat:4> + <var:k> * <var:Q> \\ \{ <var:Q> = <var:z> \land <var:k> = <nat:3> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> \} \end{eqnarray} Hence , our segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:3> ; <var:k> := <nat:4> + <var:k> * <var:Q> ; <var:k> := <var:k> * <var:Q> ; <var:k> := <nat:3> + <var:k> * <var:Q> ; <var:k> := <nat:4> + <var:k> * <var:Q> ; <var:k> := <nat:4> + <var:k> * <var:Q> ; <var:k> := <nat:2> + <var:k> * <var:Q> ; <var:k> := <nat:4> + <var:k> * <var:Q> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:Q> = <var:z> }} <def:poly> {{ <var:k> = <nat:3> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:k> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:k> = <nat:3> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:k> = <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:k> = <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:k> = <nat:3> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:k> = <nat:3> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:k> = <nat:3> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:z> /\ <var:k> = <nat:3> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 