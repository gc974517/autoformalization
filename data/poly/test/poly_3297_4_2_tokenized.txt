\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:z> := <nat:4> ; <var:z> := <var:z> * <var:i> ; <var:z> := <var:z> * <var:i> ; <var:z> := <nat:3> + <var:z> * <var:i> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Allow for all $ <var:V> \in \mathbb{N} $ it to be that $ <var:i> = <var:V> $ prior to the evaluation of the set of commands it must be that we have $ <var:z> = <nat:4> * <var:V> ^ <nat:3> + <nat:3> $ once set of commands has exited . \end{theorem} \begin{proof} Proving correctness for this set of commands can be given by typical Hoare logic . Moving on to the upcoming step seen in our list of commands , we have the variable assignmet command yielding $ <nat:4> $ toward $ <var:z>$ . This transfers the precondition $ \{ <var:i> = <var:V> \} $ to the condition $ \{ <var:i> = <var:V> \land <var:z> = <nat:4> \} $ . This is ensured by the assignment law obtained from standard Hoare reasoning . After , the variable assignmet statement \verb | <var:z> := <var:z> * <var:i> ; | . This statement redefines the condition $ \{ <var:i> = <var:V> \land <var:z> = <nat:4> \} $ toward the condition $ \{ <var:i> = <var:V> \land <var:z> = <nat:4> \times <var:V> + \} $ . This is known to be sound with the assignment inference rule from standard Hoare techniques . Taking another step toward the proceeding line in the code , we have the variable update line assigning $ <var:z> * <var:i> $ toward $ <var:z>$ . This forwards the condition $ \{ <var:i> = <var:V> \land <var:z> = <nat:4> \times <var:V> + \} $ into the condition $ \{ <var:i> = <var:V> \land <var:z> = <nat:4> \times <var:V> ^ <nat:2> + \} $ . Following , the variable assignmet line giving $ <nat:3> + <var:z> * <var:i$ toward $ <var:z>$ . This line forwards the condition $ \{ <var:i> = <var:V> \land <var:z> = <nat:4> \times <var:V> ^ <nat:2> + \} $ into the postcondition $ \{ <var:i> = <var:V> \land <var:z> = <nat:4> \times <var:V> ^ <nat:3> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:z> := <nat:4> ; <var:z> := <var:z> * <var:i> ; <var:z> := <var:z> * <var:i> ; <var:z> := <nat:3> + <var:z> * <var:i> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:i> = <var:V> }} <def:poly> {{ <var:z> = <nat:4> * <var:V> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:z> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:z> = <nat:4> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:z> = <nat:4> * <var:V> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:V> /\ <var:z> = <nat:4> * <var:V> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 