\begin{document} \begin{theorem} Consider the following series of commands as \begin{verbatim} <var:H0> := <nat:3> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:R> ; <var:M> := <var:H1> ; <var:M> := <var:M> + <var:H0> \end{verbatim} Assume ( taking natural coefficients $ <var:r> $ ) it to be that $ <var:R> = <var:r> $ before running this series of instructions , it holds that we see $ <var:M> = <nat:1> \cdot <var:r> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands can be given through the following decorated set of instructions . \begin{eqnarray} \{ <var:R> = <var:r> \} \\ <var:H0> := <nat:3> ; \\ \{ <var:R> = <var:r> \land <var:H0> = <nat:3> \} \\ <var:H1> := <nat:1> ; \\ \{ <var:R> = <var:r> \land <var:H0> = <nat:3> \land <var:H1> = <nat:1> \} \\ <var:H1> := <var:H1> * <var:R> ; \\ \{ <var:R> = <var:r> \land <var:H0> = <nat:3> \land <var:H1> = <nat:1> \cdot <var:r> \} \\ <var:M> := <var:H1> ; \\ \{ <var:R> = <var:r> \land <var:H0> = <nat:3> \land <var:M> = <nat:1> \cdot <var:r> \} \\ <var:M> := <var:M> + <var:H0> \\ \{ <var:R> = <var:r> \land <var:M> = <nat:1> \cdot <var:r> + <nat:3> \} \end{eqnarray} Using standard Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:R> = <var:r> }} <var:H0> := <nat:3> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:R> ; <var:M> := <var:H1> ; <var:M> := <var:M> + <var:H0> {{ <var:M> = <nat:1> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:r> /\ <var:H0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:r> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:r> /\ <var:H0> = <nat:3> /\ <var:H1> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:r> /\ <var:H0> = <nat:3> /\ <var:M> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:r> /\ <var:M> = <nat:1> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 