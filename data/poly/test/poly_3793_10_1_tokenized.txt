\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:U1> := <var:F> ; <var:U2> := <var:U1> * <var:F> ; <var:U3> := <var:U2> * <var:F> ; <var:U4> := <var:U3> * <var:F> ; <var:U0> := <nat:3> ; <var:U3> := <var:U3> * <nat:1> ; <var:U4> := <var:U4> * <nat:7> ; <var:o> := <var:U4> <var:o> := <var:o> + <var:U3> <var:o> := <var:o> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:F> = <var:K> $ ahead of executing this set of instructions it holds that $ <var:o> = <nat:7> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:F> = <var:K> \} \\ <var:U1> := <var:F> ; \\ \{ <var:F> = <var:K> \land <var:U1> = <var:K> \} \\ <var:U2> := <var:U1> * <var:F> ; \\ \{ <var:F> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \} \\ <var:U3> := <var:U2> * <var:F> ; \\ \{ <var:F> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U3> = <var:K> ^ <nat:3> \} \\ <var:U4> := <var:U3> * <var:F> ; \\ \{ <var:F> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U3> = <var:K> ^ <nat:3> \land <var:U4> = <var:K> ^ <nat:4> \} \\ <var:U0> := <nat:3> ; \\ \{ <var:F> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U3> = <var:K> ^ <nat:3> \land <var:U4> = <var:K> ^ <nat:4> \land <var:U0> = <nat:3> \} \\ <var:U3> := <var:U3> * <nat:1> ; \\ \{ <var:F> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U3> = <nat:1> \cdot <var:K> ^ <nat:3> \land <var:U4> = <var:K> ^ <nat:4> \land <var:U0> = <nat:3> \} \\ <var:U4> := <var:U4> * <nat:7> ; \\ \{ <var:F> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U3> = <nat:1> \cdot <var:K> ^ <nat:3> \land <var:U4> = <nat:7> \cdot <var:K> ^ <nat:4> \land <var:U0> = <nat:3> \} \\ <var:o> := <var:U4> \\ \{ <var:F> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U3> = <nat:1> \cdot <var:K> ^ <nat:3> \land <var:U0> = <nat:3> \land <var:o> = <nat:7> \cdot <var:K> ^ <nat:4> \} \\ <var:o> := <var:o> + <var:U3> \\ \{ <var:F> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U0> = <nat:3> \land <var:o> = <nat:7> \cdot <var:K> ^ <nat:4> + <nat:1> \cdot <var:K> ^ <nat:3> \} \\ <var:o> := <var:o> + <var:U0> \\ \{ <var:F> = <var:K> \land <var:o> = <nat:7> \cdot <var:K> ^ <nat:4> + <nat:1> \cdot <var:K> ^ <nat:3> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <var:U4> : string := " <var:U4> " . Definition <def:poly> := <var:U1> := <var:F> ; <var:U2> := <var:U1> * <var:F> ; <var:U3> := <var:U2> * <var:F> ; <var:U4> := <var:U3> * <var:F> ; <var:U0> := <nat:3> ; <var:U3> := <var:U3> * <nat:1> ; <var:U4> := <var:U4> * <nat:7> ; <var:o> := <var:U4> <var:o> := <var:o> + <var:U3> <var:o> := <var:o> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:F> = <var:K> }} <def:poly> {{ <var:o> = <nat:7> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:U1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:U1> = <var:K> /\ <var:U2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:U1> = <var:K> /\ <var:U2> = <var:K> ^ <nat:2> /\ <var:U3> = <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:U1> = <var:K> /\ <var:U2> = <var:K> ^ <nat:2> /\ <var:U3> = <var:K> ^ <nat:3> /\ <var:U4> = <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:U1> = <var:K> /\ <var:U2> = <var:K> ^ <nat:2> /\ <var:U3> = <var:K> ^ <nat:3> /\ <var:U4> = <var:K> ^ <nat:4> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:U1> = <var:K> /\ <var:U2> = <var:K> ^ <nat:2> /\ <var:U3> = <nat:1> * <var:K> ^ <nat:3> /\ <var:U4> = <var:K> ^ <nat:4> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:U1> = <var:K> /\ <var:U2> = <var:K> ^ <nat:2> /\ <var:U3> = <nat:1> * <var:K> ^ <nat:3> /\ <var:U4> = <nat:7> * <var:K> ^ <nat:4> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:U1> = <var:K> /\ <var:U2> = <var:K> ^ <nat:2> /\ <var:U3> = <nat:1> * <var:K> ^ <nat:3> /\ <var:U0> = <nat:3> /\ <var:o> = <nat:7> * <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:U1> = <var:K> /\ <var:U2> = <var:K> ^ <nat:2> /\ <var:U0> = <nat:3> /\ <var:o> = <nat:7> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:K> /\ <var:o> = <nat:7> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 