\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C1> := <var:K> ; <var:C2> := <var:C1> * <var:K> ; <var:C0> := <nat:2> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:3> ; <var:R> := <var:C2> <var:R> := <var:R> + <var:C1> <var:R> := <var:R> + <var:C0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Assume that $ <var:K> = <var:E> $ prior to the execution of this list of instructions , it must be that we see $ <var:R> = <nat:3> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:2> $ . \end{theorem} \begin{proof} Applying Hoare logic gives : \begin{eqnarray} \{ <var:K> = <var:E> \} \\ <var:C1> := <var:K> ; \\ \{ <var:K> = <var:E> \land <var:C1> = <var:E> \} \\ <var:C2> := <var:C1> * <var:K> ; \\ \{ <var:K> = <var:E> \land <var:C1> = <var:E> \land <var:C2> = <var:E> ^ <nat:2> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:K> = <var:E> \land <var:C1> = <var:E> \land <var:C2> = <var:E> ^ <nat:2> \land <var:C0> = <nat:2> \} \\ <var:C1> := <var:C1> * <nat:2> ; \\ \{ <var:K> = <var:E> \land <var:C1> = <nat:2> * <var:E> \land <var:C2> = <var:E> ^ <nat:2> \land <var:C0> = <nat:2> \} \\ <var:C2> := <var:C2> * <nat:3> ; \\ \{ <var:K> = <var:E> \land <var:C1> = <nat:2> * <var:E> \land <var:C2> = <nat:3> * <var:E> ^ <nat:2> \land <var:C0> = <nat:2> \} \\ <var:R> := <var:C2> \\ \{ <var:K> = <var:E> \land <var:C1> = <nat:2> * <var:E> \land <var:C0> = <nat:2> \land <var:R> = <nat:3> * <var:E> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:C1> \\ \{ <var:K> = <var:E> \land <var:C0> = <nat:2> \land <var:R> = <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> \} \\ <var:R> := <var:R> + <var:C0> \\ \{ <var:K> = <var:E> \land <var:R> = <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:2> \} \end{eqnarray} As a consequence , the series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <def:poly> := <var:C1> := <var:K> ; <var:C2> := <var:C1> * <var:K> ; <var:C0> := <nat:2> ; <var:C1> := <var:C1> * <nat:2> ; <var:C2> := <var:C2> * <nat:3> ; <var:R> := <var:C2> <var:R> := <var:R> + <var:C1> <var:R> := <var:R> + <var:C0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:K> = <var:E> }} <def:poly> {{ <var:R> = <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:C1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:C1> = <var:E> /\ <var:C2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:C1> = <var:E> /\ <var:C2> = <var:E> ^ <nat:2> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:C1> = <nat:2> * <var:E> /\ <var:C2> = <var:E> ^ <nat:2> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:C1> = <nat:2> * <var:E> /\ <var:C2> = <nat:3> * <var:E> ^ <nat:2> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:C1> = <nat:2> * <var:E> /\ <var:C0> = <nat:2> /\ <var:R> = <nat:3> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:C0> = <nat:2> /\ <var:R> = <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:E> /\ <var:R> = <nat:3> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 