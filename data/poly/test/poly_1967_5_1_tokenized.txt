\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:f1> := <var:x> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:6> ; <var:A> := <var:f1> <var:A> := <var:A> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> . Assuming it to hold that $ <var:x> = <var:t> $ prior to executing the set of instructions it follows that $ <var:A> = <nat:6> \times <var:t> + <nat:2> $ after series of commands has exited . \end{theorem} \begin{proof} The way to prove correctness for our program is done by typical Hoare reasoning . Advancing on , we see \verb | { <var:x> = <var:t> } <var:f1> := <var:x> { <var:x> = <var:t> \land <var:f1> = <var:t> } | and \verb | { <var:x> = <var:t> \land <var:f1> = <var:t> } <var:f0> := <nat:2> { <var:x> = <var:t> \land <var:f1> = <var:t> \land <var:f0> = <nat:2> } | . This is deduced with the variable binding rule given by usual Hoare logic . Focusing on the subsequent bits of codecontained in our set of instructions , \verb | { <var:x> = <var:t> } <var:f1> := <var:x> { <var:x> = <var:t> \land <var:f1> = <var:t> } | and \verb | { <var:x> = <var:t> \land <var:f1> = <var:t> } <var:f0> := <nat:2> { <var:x> = <var:t> \land <var:f1> = <var:t> \land <var:f0> = <nat:2> } | . Moving onward , we see \verb | { <var:x> = <var:t> } <var:f1> := <var:x> { <var:x> = <var:t> \land <var:f1> = <var:t> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f1> := <var:x> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:6> ; <var:A> := <var:f1> <var:A> := <var:A> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:x> = <var:t> }} <def:poly> {{ <var:A> = <nat:6> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:f1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:f1> = <var:t> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:f1> = <nat:6> * <var:t> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:f0> = <nat:2> /\ <var:A> = <nat:6> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:t> /\ <var:A> = <nat:6> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 