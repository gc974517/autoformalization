\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:A> := <nat:1> ; <var:A> := <nat:1> + <var:A> * <var:K> ; <var:A> := <nat:3> + <var:A> * <var:K> ; <var:A> := <nat:4> + <var:A> * <var:K> ; <var:A> := <var:A> * <var:K> ; <var:A> := <nat:4> + <var:A> * <var:K> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> . Allow that $ <var:K> = <var:q> $ before executing the list of instructions , then we have $ <var:A> = <nat:1> \times <var:q> ^ <nat:5> + <nat:1> \times <var:q> ^ <nat:4> + <nat:3> \times <var:q> ^ <nat:3> + <nat:4> \times <var:q> ^ <nat:2> + <nat:4> $ when code finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:q> \} \\ <var:A> := <nat:1> ; \\ \{ <var:K> = <var:q> \land <var:A> = <nat:1> \} \\ <var:A> := <nat:1> + <var:A> * <var:K> ; \\ \{ <var:K> = <var:q> \land <var:A> = <nat:1> \times <var:q> + <nat:1> \} \\ <var:A> := <nat:3> + <var:A> * <var:K> ; \\ \{ <var:K> = <var:q> \land <var:A> = <nat:1> \times <var:q> ^ <nat:2> + <nat:1> \times <var:q> + <nat:3> \} \\ <var:A> := <nat:4> + <var:A> * <var:K> ; \\ \{ <var:K> = <var:q> \land <var:A> = <nat:1> \times <var:q> ^ <nat:3> + <nat:1> \times <var:q> ^ <nat:2> + <nat:3> \times <var:q> + <nat:4> \} \\ <var:A> := <var:A> * <var:K> ; \\ \{ <var:K> = <var:q> \land <var:A> = <nat:1> \times <var:q> ^ <nat:4> + <nat:1> \times <var:q> ^ <nat:3> + <nat:3> \times <var:q> ^ <nat:2> + <nat:4> \times <var:q> + \} \end{eqnarray} Allowing the execution of the set of commands yields : \begin{eqnarray} <var:A> := <nat:4> + <var:A> * <var:K> \\ \{ <var:K> = <var:q> \land <var:A> = <nat:1> \times <var:q> ^ <nat:5> + <nat:1> \times <var:q> ^ <nat:4> + <nat:3> \times <var:q> ^ <nat:3> + <nat:4> \times <var:q> ^ <nat:2> + <nat:4> \} \end{eqnarray} Using typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:1> ; <var:A> := <nat:1> + <var:A> * <var:K> ; <var:A> := <nat:3> + <var:A> * <var:K> ; <var:A> := <nat:4> + <var:A> * <var:K> ; <var:A> := <var:A> * <var:K> ; <var:A> := <nat:4> + <var:A> * <var:K> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:K> = <var:q> }} <def:poly> {{ <var:A> = <nat:1> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:A> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:A> = <nat:1> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:A> = <nat:1> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:A> = <nat:1> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:A> = <nat:1> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:3> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:q> /\ <var:A> = <nat:1> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:3> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 