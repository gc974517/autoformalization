\begin{document} \begin{theorem} Define the following series of instructions : \begin{verbatim} <var:p0> := <nat:8> ; <var:p1> := <nat:6> ; <var:p1> := <var:p1> * <var:X> ; <var:p2> := <nat:1> ; <var:p2> := <var:p2> * <var:X> ; <var:p2> := <var:p2> * <var:X> ; <var:p3> := <nat:8> ; <var:p3> := <var:p3> * <var:X> ; <var:p3> := <var:p3> * <var:X> ; <var:p3> := <var:p3> * <var:X> ; <var:l> := <var:p3> ; <var:l> := <var:l> + <var:p2> ; <var:l> := <var:l> + <var:p1> ; <var:l> := <var:l> + <var:p0> \end{verbatim} Assume --- assuming some integers $ <var:e> $ --- that $ <var:X> = <var:e> $ ahead of running this program , it must be that we see $ <var:l> = <nat:8> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:e> \} \\ <var:p0> := <nat:8> ; \\ \{ <var:X> = <var:e> \land <var:p0> = <nat:8> \} \\ <var:p1> := <nat:6> ; \\ \{ <var:X> = <var:e> \land <var:p0> = <nat:8> \land <var:p1> = <nat:6> \} \\ <var:p1> := <var:p1> * <var:X> ; \\ \{ <var:X> = <var:e> \land <var:p0> = <nat:8> \land <var:p1> = <nat:6> \times <var:e> \} \\ <var:p2> := <nat:1> ; \\ \{ <var:X> = <var:e> \land <var:p0> = <nat:8> \land <var:p1> = <nat:6> \times <var:e> \land <var:p2> = <nat:1> \} \\ <var:p2> := <var:p2> * <var:X> ; \\ \{ <var:X> = <var:e> \land <var:p0> = <nat:8> \land <var:p1> = <nat:6> \times <var:e> \land <var:p2> = <nat:1> \times <var:e> \} \\ <var:p2> := <var:p2> * <var:X> ; \\ \{ <var:X> = <var:e> \land <var:p0> = <nat:8> \land <var:p1> = <nat:6> \times <var:e> \land <var:p2> = <nat:1> \times <var:e> ^ <nat:2> \} \\ <var:p3> := <nat:8> ; \\ \{ <var:X> = <var:e> \land <var:p0> = <nat:8> \land <var:p1> = <nat:6> \times <var:e> \land <var:p2> = <nat:1> \times <var:e> ^ <nat:2> \land <var:p3> = <nat:8> \} \\ <var:p3> := <var:p3> * <var:X> ; \\ \{ <var:X> = <var:e> \land <var:p0> = <nat:8> \land <var:p1> = <nat:6> \times <var:e> \land <var:p2> = <nat:1> \times <var:e> ^ <nat:2> \land <var:p3> = <nat:8> \times <var:e> \} \\ <var:p3> := <var:p3> * <var:X> ; \\ \{ <var:X> = <var:e> \land <var:p0> = <nat:8> \land <var:p1> = <nat:6> \times <var:e> \land <var:p2> = <nat:1> \times <var:e> ^ <nat:2> \land <var:p3> = <nat:8> \times <var:e> ^ <nat:2> \} \\ <var:p3> := <var:p3> * <var:X> ; \\ \{ <var:X> = <var:e> \land <var:p0> = <nat:8> \land <var:p1> = <nat:6> \times <var:e> \land <var:p2> = <nat:1> \times <var:e> ^ <nat:2> \land <var:p3> = <nat:8> \times <var:e> ^ <nat:3> \} \\ <var:l> := <var:p3> ; \\ \{ <var:X> = <var:e> \land <var:p0> = <nat:8> \land <var:p1> = <nat:6> \times <var:e> \land <var:p2> = <nat:1> \times <var:e> ^ <nat:2> \land <var:l> = <nat:8> \times <var:e> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:p2> ; \\ \{ <var:X> = <var:e> \land <var:p0> = <nat:8> \land <var:p1> = <nat:6> \times <var:e> \land <var:l> = <nat:8> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:p1> ; \\ \{ <var:X> = <var:e> \land <var:p0> = <nat:8> \land <var:l> = <nat:8> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:6> \times <var:e> \} \\ <var:l> := <var:l> + <var:p0> \\ \{ <var:X> = <var:e> \land <var:l> = <nat:8> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:6> \times <var:e> + <nat:8> \} \end{eqnarray} Using standard Hoare reasoning ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:X> = <var:e> }} <var:p0> := <nat:8> ; <var:p1> := <nat:6> ; <var:p1> := <var:p1> * <var:X> ; <var:p2> := <nat:1> ; <var:p2> := <var:p2> * <var:X> ; <var:p2> := <var:p2> * <var:X> ; <var:p3> := <nat:8> ; <var:p3> := <var:p3> * <var:X> ; <var:p3> := <var:p3> * <var:X> ; <var:p3> := <var:p3> * <var:X> ; <var:l> := <var:p3> ; <var:l> := <var:l> + <var:p2> ; <var:l> := <var:l> + <var:p1> ; <var:l> := <var:l> + <var:p0> {{ <var:l> = <nat:8> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:p0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:6> * <var:e> /\ <var:p2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:6> * <var:e> /\ <var:p2> = <nat:1> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:6> * <var:e> /\ <var:p2> = <nat:1> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:6> * <var:e> /\ <var:p2> = <nat:1> * <var:e> ^ <nat:2> /\ <var:p3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:6> * <var:e> /\ <var:p2> = <nat:1> * <var:e> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:6> * <var:e> /\ <var:p2> = <nat:1> * <var:e> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:6> * <var:e> /\ <var:p2> = <nat:1> * <var:e> ^ <nat:2> /\ <var:p3> = <nat:8> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:6> * <var:e> /\ <var:p2> = <nat:1> * <var:e> ^ <nat:2> /\ <var:l> = <nat:8> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:p0> = <nat:8> /\ <var:p1> = <nat:6> * <var:e> /\ <var:l> = <nat:8> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:p0> = <nat:8> /\ <var:l> = <nat:8> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:e> /\ <var:l> = <nat:8> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 