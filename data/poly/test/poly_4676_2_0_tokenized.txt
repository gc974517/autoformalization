\begin{document} \begin{theorem} Take a series of commands as follows \begin{verbatim} <var:Y0> := <nat:4> ; <var:Z> := <var:Y0> \end{verbatim} Allowing that $ <var:w> = <var:A> $ with some whole numbers $ <var:A> $ ahead of executing our series of commands it follows that we see $ <var:Z> = <nat:4> $ after series of commands has finished executing . \end{theorem} \begin{proof} Utilizing usual Hoare techniques produces : \begin{eqnarray} \{ <var:w> = <var:A> \} \\ <var:Y0> := <nat:4> ; \\ \{ <var:w> = <var:A> \land <var:Y0> = <nat:4> \} \\ <var:Z> := <var:Y0> \\ \{ <var:w> = <var:A> \land <var:Z> = <nat:4> \} \end{eqnarray} As a consequence , the series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:w> = <var:A> }} <var:Y0> := <nat:4> ; <var:Z> := <var:Y0> {{ <var:Z> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:A> /\ <var:Z> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 