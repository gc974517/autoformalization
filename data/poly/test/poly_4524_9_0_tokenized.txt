\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:Z0> := <nat:3> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:w> ; <var:Z2> := <nat:8> ; <var:Z2> := <var:Z2> * <var:w> ; <var:Z2> := <var:Z2> * <var:w> ; <var:n> := <var:Z2> ; <var:n> := <var:n> + <var:Z1> ; <var:n> := <var:n> + <var:Z0> \end{verbatim} Allow that we have $ <var:w> = <var:W> $ for every natural coefficients $ <var:W> $ ahead of running the segment of code it follows that $ <var:n> = <nat:8> \times <var:W> ^ <nat:2> + <nat:8> \times <var:W> + <nat:3> $ after segment of code has finished executing . \end{theorem} \begin{proof} The course of logic for our series of instructions can be seen using Hoare reasoning . Moving forward to the next bit of code found in our list of instructions , the assignment statement \verb | <var:Z0> := <nat:3> ; | . This code transfers the condition $ \{ <var:w> = <var:W> \} $ toward $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \} $ . This is ensured with the assignment inference rule given in standard Hoare logic . Going to the next step , the variable assignmet statement \verb | <var:Z1> := <nat:8> ; | . This transfers the condition $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \} $ as the condition $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:8> \} $ . This is sound by the assignment scheme obtained from Hoare reasoning . Going forward , the variable binding statement \verb | <var:Z1> := <var:Z1> * <var:w> ; | . This takes the precondition $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:8> \} $ as $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:8> * <var:W> \} $ . This is sound by the assignment law obtained from usual Hoare logic . Jumping to the next statement seen in the series of commands , we have the variable update code \verb | <var:Z2> := <nat:8> ; | . This code advances the condition $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:8> * <var:W> \} $ toward the condition $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:8> * <var:W> \land <var:Z2> = <nat:8> \} $ . Observing the upcoming step found in the code , the variable assignmet code giving $ <var:Z2> * <var:w> $ into $ <var:Z2>$ . This takes the precondition $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:8> * <var:W> \land <var:Z2> = <nat:8> \} $ into the postcondition $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:8> * <var:W> \land <var:Z2> = <nat:8> * <var:W> \} $ . This is known to be sound using the assignment inference rule defined by Hoare reasoning . Going to the next step , we see the assignment statement defining $ <var:Z2> * <var:w> $ as $ <var:Z2>$ . This command moves the condition $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:8> * <var:W> \land <var:Z2> = <nat:8> * <var:W> \} $ toward the postcondition $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:8> * <var:W> \land <var:Z2> = <nat:8> * <var:W> ^ <nat:2> \} $ . This is deduced by the assignment inference rule given in standard Hoare reasoning . Paying attention to the proceeding step found in the list of instructions , we have the assignment command \verb | <var:n> := <var:Z2> ; | . This statement redefines the condition $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:8> * <var:W> \land <var:Z2> = <nat:8> * <var:W> ^ <nat:2> \} $ toward the postcondition $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:8> * <var:W> \land <var:n> = <nat:8> * <var:W> ^ <nat:2> \} $ . Moving forward to the next step , we have the assignment statement assigning $ <var:n> + <var:Z1> $ toward $ <var:n>$ . This redefines $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:Z1> = <nat:8> * <var:W> \land <var:n> = <nat:8> * <var:W> ^ <nat:2> \} $ toward the condition $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:n> = <nat:8> * <var:W> ^ <nat:2> + <nat:8> * <var:W> \} $ . This is ensured using the assignment inference rule found in usual Hoare logic . Taking another step toward the subsequent line of code seen in our segment of code , we have the variable binding code \verb | <var:n> := <var:n> + <var:Z0> | . This statement takes $ \{ <var:w> = <var:W> \land <var:Z0> = <nat:3> \land <var:n> = <nat:8> * <var:W> ^ <nat:2> + <nat:8> * <var:W> \} $ into the condition $ \{ <var:w> = <var:W> \land <var:n> = <nat:8> * <var:W> ^ <nat:2> + <nat:8> * <var:W> + <nat:3> \} $ . This is known to be sound through the assignment inference rule given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:w> = <var:W> }} <var:Z0> := <nat:3> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:w> ; <var:Z2> := <nat:8> ; <var:Z2> := <var:Z2> * <var:w> ; <var:Z2> := <var:Z2> * <var:w> ; <var:n> := <var:Z2> ; <var:n> := <var:n> + <var:Z1> ; <var:n> := <var:n> + <var:Z0> {{ <var:n> = <nat:8> * <var:W> ^ <nat:2> + <nat:8> * <var:W> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:8> * <var:W> /\ <var:Z2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:8> * <var:W> /\ <var:Z2> = <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:8> * <var:W> /\ <var:Z2> = <nat:8> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:Z0> = <nat:3> /\ <var:Z1> = <nat:8> * <var:W> /\ <var:n> = <nat:8> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:Z0> = <nat:3> /\ <var:n> = <nat:8> * <var:W> ^ <nat:2> + <nat:8> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:n> = <nat:8> * <var:W> ^ <nat:2> + <nat:8> * <var:W> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 