\begin{document} \begin{theorem} Let the following list of instructions as follows \begin{verbatim} <var:Q1> := <var:j> ; <var:Q0> := <nat:3> ; <var:Q1> := <var:Q1> * <nat:3> ; <var:w> := <var:Q1> <var:w> := <var:w> + <var:Q0> \end{verbatim} Assuming it to hold that $ <var:j> = <var:U> $ ahead of running this series of instructions it holds that we see $ <var:w> = <nat:3> \times <var:U> + <nat:3> $ when list of instructions has terminated . \end{theorem} \begin{proof} The flow of logic for the code segment can be seen using typical Hoare logic . Going forward , we have the variable assignmet statement \verb | <var:Q1> := <var:j> ; | . This forwards the precondition $ \{ <var:j> = <var:U> \} $ to the condition $ \{ <var:j> = <var:U> \land <var:Q1> = <var:U> \} $ . Shifting focus toward the following piece of code contained in our set of commands , the variable update code \verb | <var:Q0> := <nat:3> ; | . This statement redefines the condition $ \{ <var:j> = <var:U> \land <var:Q1> = <var:U> \} $ as the condition $ \{ <var:j> = <var:U> \land <var:Q1> = <var:U> \land <var:Q0> = <nat:3> \} $ . This is deduced by the assignment inference rule defined by standard Hoare techniques . Going to the next step , we have the assignment line \verb | <var:Q1> := <var:Q1> * <nat:3> ; | . This command takes $ \{ <var:j> = <var:U> \land <var:Q1> = <var:U> \land <var:Q0> = <nat:3> \} $ into $ \{ <var:j> = <var:U> \land <var:Q1> = <nat:3> * <var:U> \land <var:Q0> = <nat:3> \} $ . This is guaranteed through the assignment scheme given by typical Hoare logic . Moving on to the subsequent line of code seen in the code , we see the variable update command \verb | <var:w> := <var:Q1> | . This code transfers the condition $ \{ <var:j> = <var:U> \land <var:Q1> = <nat:3> * <var:U> \land <var:Q0> = <nat:3> \} $ into the postcondition $ \{ <var:j> = <var:U> \land <var:Q0> = <nat:3> \land <var:w> = <nat:3> * <var:U> \} $ . This is known to be sound with the assignment scheme obtained from typical Hoare logic . Taking a look at the upcoming line found in our series of commands , we have the assignment line defining $ <var:w> + <var:Q0$ into $ <var:w>$ . This code advances the precondition $ \{ <var:j> = <var:U> \land <var:Q0> = <nat:3> \land <var:w> = <nat:3> * <var:U> \} $ toward the postcondition $ \{ <var:j> = <var:U> \land <var:w> = <nat:3> * <var:U> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:j> = <var:U> }} <var:Q1> := <var:j> ; <var:Q0> := <nat:3> ; <var:Q1> := <var:Q1> * <nat:3> ; <var:w> := <var:Q1> <var:w> := <var:w> + <var:Q0> {{ <var:w> = <nat:3> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:U> /\ <var:Q1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:U> /\ <var:Q1> = <var:U> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:U> /\ <var:Q1> = <nat:3> * <var:U> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:U> /\ <var:Q0> = <nat:3> /\ <var:w> = <nat:3> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:U> /\ <var:w> = <nat:3> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 