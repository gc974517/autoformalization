\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:G0> := <nat:7> ; <var:G2> := <nat:6> ; <var:G2> := <var:G2> * <var:B> ; <var:G2> := <var:G2> * <var:B> ; <var:G3> := <nat:1> ; <var:G3> := <var:G3> * <var:B> ; <var:G3> := <var:G3> * <var:B> ; <var:G3> := <var:G3> * <var:B> ; <var:v> := <var:G3> ; <var:v> := <var:v> + <var:G2> ; <var:v> := <var:v> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:B> = <var:q> $ ( assuming some $ <var:q> $ ) ahead of the execution of our list of instructions , it follows that we have $ <var:v> = <nat:1> \cdot <var:q> ^ <nat:3> + <nat:6> \cdot <var:q> ^ <nat:2> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment is evident with typical Hoare logic . Observing the upcoming statement contained in our segment of code , we have the assignment command \verb | <var:G0> := <nat:7> ; | . This command takes $ \{ <var:B> = <var:q> \} $ as the postcondition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \} $ . This is ensured through the assignment scheme in usual Hoare reasoning . Advancing , we have the variable assignmet code assigning $ <nat:6> $ toward $ <var:G2>$ . This takes the condition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \} $ to $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \} $ . Moving on to the proceeding line of code seen in the code , we see the variable assignmet line yielding $ <var:G2> * <var:B> $ as $ <var:G2>$ . This moves $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \} $ to the condition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> \} $ . This is ensured with the assignment law defined in Hoare reasoning . Immediately following , the binding code \verb | <var:G2> := <var:G2> * <var:B> ; | . This redefines the precondition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> \} $ as the condition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> ^ <nat:2> \} $ . Moving on to the next step , the variable assignmet code defining $ <nat:1> $ toward $ <var:G3>$ . This command transfers the condition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> ^ <nat:2> \} $ as the condition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> ^ <nat:2> \land <var:G3> = <nat:1> \} $ . Advancing , we see the command \verb | <var:G3> := <var:G3> * <var:B> ; | . This advances $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> ^ <nat:2> \land <var:G3> = <nat:1> \} $ toward the postcondition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> ^ <nat:2> \land <var:G3> = <nat:1> \cdot <var:q> \} $ . This is ensured by the assignment inference rule from typical Hoare techniques . Advancing , the assignment command giving $ <var:G3> * <var:B> $ as $ <var:G3>$ . This advances the condition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> ^ <nat:2> \land <var:G3> = <nat:1> \cdot <var:q> \} $ as $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> ^ <nat:2> \land <var:G3> = <nat:1> \cdot <var:q> ^ <nat:2> \} $ . This is sound by the assignment rule given by standard Hoare logic . Moving on to the next step , we have the environment update statement \verb | <var:G3> := <var:G3> * <var:B> ; | . This redefines the precondition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> ^ <nat:2> \land <var:G3> = <nat:1> \cdot <var:q> ^ <nat:2> \} $ toward the condition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> ^ <nat:2> \land <var:G3> = <nat:1> \cdot <var:q> ^ <nat:3> \} $ . Now , we see the variable update command letting $ <var:G3> $ as $ <var:v>$ . This forwards $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> ^ <nat:2> \land <var:G3> = <nat:1> \cdot <var:q> ^ <nat:3> \} $ toward the condition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> ^ <nat:2> \land <var:v> = <nat:1> \cdot <var:q> ^ <nat:3> \} $ . Shifting focus toward the next line in the set of instructions , we have the assignment command letting $ <var:v> + <var:G2> $ as $ <var:v>$ . This moves $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:G2> = <nat:6> \cdot <var:q> ^ <nat:2> \land <var:v> = <nat:1> \cdot <var:q> ^ <nat:3> \} $ into the postcondition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:v> = <nat:1> \cdot <var:q> ^ <nat:3> + <nat:6> \cdot <var:q> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment scheme obtained from standard Hoare logic . After , the variable binding statement assigning $ <var:v> + <var:G0$ into $ <var:v>$ . This redefines the precondition $ \{ <var:B> = <var:q> \land <var:G0> = <nat:7> \land <var:v> = <nat:1> \cdot <var:q> ^ <nat:3> + <nat:6> \cdot <var:q> ^ <nat:2> \} $ into $ \{ <var:B> = <var:q> \land <var:v> = <nat:1> \cdot <var:q> ^ <nat:3> + <nat:6> \cdot <var:q> ^ <nat:2> + <nat:7> \} $ . This is ensured through the assignment law in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <def:poly> := <var:G0> := <nat:7> ; <var:G2> := <nat:6> ; <var:G2> := <var:G2> * <var:B> ; <var:G2> := <var:G2> * <var:B> ; <var:G3> := <nat:1> ; <var:G3> := <var:G3> * <var:B> ; <var:G3> := <var:G3> * <var:B> ; <var:G3> := <var:G3> * <var:B> ; <var:v> := <var:G3> ; <var:v> := <var:v> + <var:G2> ; <var:v> := <var:v> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:B> = <var:q> }} <def:poly> {{ <var:v> = <nat:1> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:G0> = <nat:7> /\ <var:G2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:G0> = <nat:7> /\ <var:G2> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:G0> = <nat:7> /\ <var:G2> = <nat:6> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:G0> = <nat:7> /\ <var:G2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:G3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:G0> = <nat:7> /\ <var:G2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:G0> = <nat:7> /\ <var:G2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:G0> = <nat:7> /\ <var:G2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:G0> = <nat:7> /\ <var:G2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:v> = <nat:1> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:G0> = <nat:7> /\ <var:v> = <nat:1> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:q> /\ <var:v> = <nat:1> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 