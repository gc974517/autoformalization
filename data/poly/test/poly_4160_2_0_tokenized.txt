\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:2> ; <var:w> := <var:W0> \end{verbatim} Allow it to hold that $ <var:t> = <var:v> $ before executing our list of instructions , it holds that $ <var:w> = <nat:2> $ when code segment executes . \end{theorem} \begin{proof} The way to prove correctness for our list of commands is done by typical Hoare logic . Focusing on the subsequent bit of code contained in the set of commands , we have the statement giving $ <nat:2> $ toward $ <var:W0>$ . This moves the precondition $ \{ <var:t> = <var:v> \} $ toward the postcondition $ \{ <var:t> = <var:v> \land <var:W0> = <nat:2> \} $ . After , we have the assignment statement \verb | <var:w> := <var:W0> | . This takes the precondition $ \{ <var:t> = <var:v> \land <var:W0> = <nat:2> \} $ as the postcondition $ \{ <var:t> = <var:v> \land <var:w> = <nat:2> \} $ . This is shown with the assignment inference rule of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:t> = <var:v> }} <var:W0> := <nat:2> ; <var:w> := <var:W0> {{ <var:w> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:w> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 