\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:j0> := <nat:2> ; <var:j1> := <nat:2> ; <var:j1> := <var:j1> * <var:B> ; <var:Q> := <var:j1> ; <var:Q> := <var:Q> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> . Given it to hold that $ <var:B> = <var:g> $ prior to the evaluation of our code segment , then $ <var:Q> = <nat:2> * <var:g> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for this program is clear by standard Hoare techniques . Further , we have \verb | { <var:B> = <var:g> } <var:j0> := <nat:2> { <var:B> = <var:g> \land <var:j0> = <nat:2> } | , \verb | { <var:B> = <var:g> \land <var:j0> = <nat:2> } <var:j1> := <nat:2> { <var:B> = <var:g> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> } | , \verb | { <var:B> = <var:g> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> } <var:j1> := <var:j1> * <var:B> { <var:B> = <var:g> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> \times <var:g> } | , \verb | { <var:B> = <var:g> \land <var:j0> = <nat:2> \land <var:j1> = <nat:2> \times <var:g> } <var:Q> := <var:j1> { <var:B> = <var:g> \land <var:j0> = <nat:2> \land <var:Q> = <nat:2> \times <var:g> } | and \verb | { <var:B> = <var:g> \land <var:j0> = <nat:2> \land <var:Q> = <nat:2> \times <var:g> } <var:Q> := <var:Q> + <var:j0{ <var:B> = <var:g> \land <var:Q> = <nat:2> \times <var:g> + <nat:2> } | . This is guaranteed with the variable assignmet scheme from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j0> := <nat:2> ; <var:j1> := <nat:2> ; <var:j1> := <var:j1> * <var:B> ; <var:Q> := <var:j1> ; <var:Q> := <var:Q> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:B> = <var:g> }} <def:poly> {{ <var:Q> = <nat:2> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:j0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:j0> = <nat:2> /\ <var:j1> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:j0> = <nat:2> /\ <var:Q> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:g> /\ <var:Q> = <nat:2> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 