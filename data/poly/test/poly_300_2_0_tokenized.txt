\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:9> ; <var:n> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Assume assuming some positive coefficients $ <var:H> $ it to hold that $ <var:Y> = <var:H> $ ahead of the evaluation of the program , it follows that $ <var:n> = <nat:9> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques results in : \begin{eqnarray} \{ <var:Y> = <var:H> \} \\ <var:I0> := <nat:9> ; \\ \{ <var:Y> = <var:H> \land <var:I0> = <nat:9> \} \\ <var:n> := <var:I0> \\ \{ <var:Y> = <var:H> \land <var:n> = <nat:9> \} \end{eqnarray} Considering the above , this list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:9> ; <var:n> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:Y> = <var:H> }} <def:poly> {{ <var:n> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:H> /\ <var:n> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 