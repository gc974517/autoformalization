\begin{document} \begin{theorem} Define the following set of instructions as follows \begin{verbatim} <var:c1> := <var:n> ; <var:c2> := <var:c1> * <var:n> ; <var:c3> := <var:c2> * <var:n> ; <var:c4> := <var:c3> * <var:n> ; <var:c5> := <var:c4> * <var:n> ; <var:c0> := <nat:2> ; <var:c2> := <var:c2> * <nat:1> ; <var:c3> := <var:c3> * <nat:2> ; <var:c5> := <var:c5> * <nat:4> ; <var:A> := <var:c5> <var:A> := <var:A> + <var:c3> <var:A> := <var:A> + <var:c2> <var:A> := <var:A> + <var:c0> \end{verbatim} Assuming ( for all positive integers $ <var:L> $ ) that we have $ <var:n> = <var:L> $ prior to the evaluation of this program , it follows that we see $ <var:A> = <nat:4> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The argument for this series of commands can be accomplished by this decorated list of instructions . \begin{eqnarray} \{ <var:n> = <var:L> \} \\ <var:c1> := <var:n> ; \\ \{ <var:n> = <var:L> \land <var:c1> = <var:L> \} \\ <var:c2> := <var:c1> * <var:n> ; \\ \{ <var:n> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <var:L> ^ <nat:2> \} \\ <var:c3> := <var:c2> * <var:n> ; \\ \{ <var:n> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <var:L> ^ <nat:2> \land <var:c3> = <var:L> ^ <nat:3> \} \\ <var:c4> := <var:c3> * <var:n> ; \\ \{ <var:n> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <var:L> ^ <nat:2> \land <var:c3> = <var:L> ^ <nat:3> \land <var:c4> = <var:L> ^ <nat:4> \} \\ <var:c5> := <var:c4> * <var:n> ; \\ \{ <var:n> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <var:L> ^ <nat:2> \land <var:c3> = <var:L> ^ <nat:3> \land <var:c4> = <var:L> ^ <nat:4> \land <var:c5> = <var:L> ^ <nat:5> \} \\ <var:c0> := <nat:2> ; \\ \{ <var:n> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <var:L> ^ <nat:2> \land <var:c3> = <var:L> ^ <nat:3> \land <var:c4> = <var:L> ^ <nat:4> \land <var:c5> = <var:L> ^ <nat:5> \land <var:c0> = <nat:2> \} \\ <var:c2> := <var:c2> * <nat:1> ; \\ \{ <var:n> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:c3> = <var:L> ^ <nat:3> \land <var:c4> = <var:L> ^ <nat:4> \land <var:c5> = <var:L> ^ <nat:5> \land <var:c0> = <nat:2> \} \\ <var:c3> := <var:c3> * <nat:2> ; \\ \{ <var:n> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:c3> = <nat:2> \cdot <var:L> ^ <nat:3> \land <var:c4> = <var:L> ^ <nat:4> \land <var:c5> = <var:L> ^ <nat:5> \land <var:c0> = <nat:2> \} \\ <var:c5> := <var:c5> * <nat:4> ; \\ \{ <var:n> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:c3> = <nat:2> \cdot <var:L> ^ <nat:3> \land <var:c4> = <var:L> ^ <nat:4> \land <var:c5> = <nat:4> \cdot <var:L> ^ <nat:5> \land <var:c0> = <nat:2> \} \\ <var:A> := <var:c5> \\ \{ <var:n> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:c3> = <nat:2> \cdot <var:L> ^ <nat:3> \land <var:c4> = <var:L> ^ <nat:4> \land <var:c0> = <nat:2> \land <var:A> = <nat:4> \cdot <var:L> ^ <nat:5> \} \end{eqnarray} Allowing the evaluation of this series of commands yields : \begin{eqnarray} <var:A> := <var:A> + <var:c3> \\ \{ <var:n> = <var:L> \land <var:c1> = <var:L> \land <var:c2> = <nat:1> \cdot <var:L> ^ <nat:2> \land <var:c0> = <nat:2> \land <var:A> = <nat:4> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:3> \} \\ <var:A> := <var:A> + <var:c2> \\ \{ <var:n> = <var:L> \land <var:c1> = <var:L> \land <var:c0> = <nat:2> \land <var:A> = <nat:4> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:c0> \\ \{ <var:n> = <var:L> \land <var:A> = <nat:4> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:1> \cdot <var:L> ^ <nat:2> + <nat:2> \} \end{eqnarray} Utilizing Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <var:c4> : string := " <var:c4> " . Definition <var:c5> : string := " <var:c5> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:n> = <var:L> }} <var:c1> := <var:n> ; <var:c2> := <var:c1> * <var:n> ; <var:c3> := <var:c2> * <var:n> ; <var:c4> := <var:c3> * <var:n> ; <var:c5> := <var:c4> * <var:n> ; <var:c0> := <nat:2> ; <var:c2> := <var:c2> * <nat:1> ; <var:c3> := <var:c3> * <nat:2> ; <var:c5> := <var:c5> * <nat:4> ; <var:A> := <var:c5> <var:A> := <var:A> + <var:c3> <var:A> := <var:A> + <var:c2> <var:A> := <var:A> + <var:c0> {{ <var:A> = <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:c1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:c1> = <var:L> /\ <var:c2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:c1> = <var:L> /\ <var:c2> = <var:L> ^ <nat:2> /\ <var:c3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:c1> = <var:L> /\ <var:c2> = <var:L> ^ <nat:2> /\ <var:c3> = <var:L> ^ <nat:3> /\ <var:c4> = <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:c1> = <var:L> /\ <var:c2> = <var:L> ^ <nat:2> /\ <var:c3> = <var:L> ^ <nat:3> /\ <var:c4> = <var:L> ^ <nat:4> /\ <var:c5> = <var:L> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:c1> = <var:L> /\ <var:c2> = <var:L> ^ <nat:2> /\ <var:c3> = <var:L> ^ <nat:3> /\ <var:c4> = <var:L> ^ <nat:4> /\ <var:c5> = <var:L> ^ <nat:5> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:c1> = <var:L> /\ <var:c2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:c3> = <var:L> ^ <nat:3> /\ <var:c4> = <var:L> ^ <nat:4> /\ <var:c5> = <var:L> ^ <nat:5> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:c1> = <var:L> /\ <var:c2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:c3> = <nat:2> * <var:L> ^ <nat:3> /\ <var:c4> = <var:L> ^ <nat:4> /\ <var:c5> = <var:L> ^ <nat:5> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:c1> = <var:L> /\ <var:c2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:c3> = <nat:2> * <var:L> ^ <nat:3> /\ <var:c4> = <var:L> ^ <nat:4> /\ <var:c5> = <nat:4> * <var:L> ^ <nat:5> /\ <var:c0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:c1> = <var:L> /\ <var:c2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:c3> = <nat:2> * <var:L> ^ <nat:3> /\ <var:c4> = <var:L> ^ <nat:4> /\ <var:c0> = <nat:2> /\ <var:A> = <nat:4> * <var:L> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:c1> = <var:L> /\ <var:c2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:c0> = <nat:2> /\ <var:A> = <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:c1> = <var:L> /\ <var:c0> = <nat:2> /\ <var:A> = <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:A> = <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 