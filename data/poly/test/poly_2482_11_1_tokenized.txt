\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} as \begin{verbatim} <var:s1> := <var:a> ; <var:s2> := <var:s1> * <var:a> ; <var:s3> := <var:s2> * <var:a> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:1> ; <var:s2> := <var:s2> * <nat:9> ; <var:s3> := <var:s3> * <nat:9> ; <var:Q> := <var:s3> <var:Q> := <var:Q> + <var:s2> <var:Q> := <var:Q> + <var:s1> <var:Q> := <var:Q> + <var:s0> \end{verbatim} Given it to hold that $ <var:a> = <var:L> $ prior to interpreting our set of commands it follows that we see $ <var:Q> = <nat:9> \times <var:L> ^ <nat:3> + <nat:9> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:4> $ once code has finished executing . \end{theorem} \begin{proof} Arguing the correctness of our code can be done through standard Hoare reasoning . Paying attention to the proceeding bits of codefound in the code segment , we see \verb | { <var:a> = <var:L> } <var:s1> := <var:a> { <var:a> = <var:L> \land <var:s1> = <var:L> } | , \verb | { <var:a> = <var:L> \land <var:s1> = <var:L> } <var:s2> := <var:s1> * <var:a> { <var:a> = <var:L> \land <var:s1> = <var:L> \land <var:s2> = <var:L> ^ <nat:2> } | and \verb | { <var:a> = <var:L> \land <var:s1> = <var:L> \land <var:s2> = <var:L> ^ <nat:2> } <var:s3> := <var:s2> * <var:a> { <var:a> = <var:L> \land <var:s1> = <var:L> \land <var:s2> = <var:L> ^ <nat:2> \land <var:s3> = <var:L> ^ <nat:3> } | . This is guaranteed with the environment update scheme defined in typical Hoare techniques . Advancing , \verb | { <var:a> = <var:L> } <var:s1> := <var:a> { <var:a> = <var:L> \land <var:s1> = <var:L> } | and \verb | { <var:a> = <var:L> \land <var:s1> = <var:L> } <var:s2> := <var:s1> * <var:a> { <var:a> = <var:L> \land <var:s1> = <var:L> \land <var:s2> = <var:L> ^ <nat:2> } | . This is ensured through the environment update law of typical Hoare reasoning . Now , we see \verb | { <var:a> = <var:L> } <var:s1> := <var:a> { <var:a> = <var:L> \land <var:s1> = <var:L> } | , \verb | { <var:a> = <var:L> \land <var:s1> = <var:L> } <var:s2> := <var:s1> * <var:a> { <var:a> = <var:L> \land <var:s1> = <var:L> \land <var:s2> = <var:L> ^ <nat:2> } | , \verb | { <var:a> = <var:L> \land <var:s1> = <var:L> \land <var:s2> = <var:L> ^ <nat:2> } <var:s3> := <var:s2> * <var:a> { <var:a> = <var:L> \land <var:s1> = <var:L> \land <var:s2> = <var:L> ^ <nat:2> \land <var:s3> = <var:L> ^ <nat:3> } | , \verb | { <var:a> = <var:L> \land <var:s1> = <var:L> \land <var:s2> = <var:L> ^ <nat:2> \land <var:s3> = <var:L> ^ <nat:3> } <var:s0> := <nat:4> { <var:a> = <var:L> \land <var:s1> = <var:L> \land <var:s2> = <var:L> ^ <nat:2> \land <var:s3> = <var:L> ^ <nat:3> \land <var:s0> = <nat:4> } | and \verb | { <var:a> = <var:L> \land <var:s1> = <var:L> \land <var:s2> = <var:L> ^ <nat:2> \land <var:s3> = <var:L> ^ <nat:3> \land <var:s0> = <nat:4> } <var:s1> := <var:s1> * <nat:1> { <var:a> = <var:L> \land <var:s1> = <nat:1> * <var:L> \land <var:s2> = <var:L> ^ <nat:2> \land <var:s3> = <var:L> ^ <nat:3> \land <var:s0> = <nat:4> } | . Moving on , \verb | { <var:a> = <var:L> } <var:s1> := <var:a> { <var:a> = <var:L> \land <var:s1> = <var:L> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:a> = <var:L> }} <var:s1> := <var:a> ; <var:s2> := <var:s1> * <var:a> ; <var:s3> := <var:s2> * <var:a> ; <var:s0> := <nat:4> ; <var:s1> := <var:s1> * <nat:1> ; <var:s2> := <var:s2> * <nat:9> ; <var:s3> := <var:s3> * <nat:9> ; <var:Q> := <var:s3> <var:Q> := <var:Q> + <var:s2> <var:Q> := <var:Q> + <var:s1> <var:Q> := <var:Q> + <var:s0> {{ <var:Q> = <nat:9> * <var:L> ^ <nat:3> + <nat:9> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:s1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:s1> = <var:L> /\ <var:s2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:s1> = <var:L> /\ <var:s2> = <var:L> ^ <nat:2> /\ <var:s3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:s1> = <var:L> /\ <var:s2> = <var:L> ^ <nat:2> /\ <var:s3> = <var:L> ^ <nat:3> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:s1> = <nat:1> * <var:L> /\ <var:s2> = <var:L> ^ <nat:2> /\ <var:s3> = <var:L> ^ <nat:3> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:s1> = <nat:1> * <var:L> /\ <var:s2> = <nat:9> * <var:L> ^ <nat:2> /\ <var:s3> = <var:L> ^ <nat:3> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:s1> = <nat:1> * <var:L> /\ <var:s2> = <nat:9> * <var:L> ^ <nat:2> /\ <var:s3> = <nat:9> * <var:L> ^ <nat:3> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:s1> = <nat:1> * <var:L> /\ <var:s2> = <nat:9> * <var:L> ^ <nat:2> /\ <var:s0> = <nat:4> /\ <var:Q> = <nat:9> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:s1> = <nat:1> * <var:L> /\ <var:s0> = <nat:4> /\ <var:Q> = <nat:9> * <var:L> ^ <nat:3> + <nat:9> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:s0> = <nat:4> /\ <var:Q> = <nat:9> * <var:L> ^ <nat:3> + <nat:9> * <var:L> ^ <nat:2> + <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:L> /\ <var:Q> = <nat:9> * <var:L> ^ <nat:3> + <nat:9> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 