\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:B1> := <var:L> ; <var:B2> := <var:B1> * <var:L> ; <var:B0> := <nat:1> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:2> ; <var:Q> := <var:B2> <var:Q> := <var:Q> + <var:B1> <var:Q> := <var:Q> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:L> = <var:z> $ , for any $ <var:z> \in \mathbb{Z}^+ $ , prior to executing the list of instructions then we see $ <var:Q> = <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning yields : \begin{eqnarray} \{ <var:L> = <var:z> \} \\ <var:B1> := <var:L> ; \\ \{ <var:L> = <var:z> \land <var:B1> = <var:z> \} \\ <var:B2> := <var:B1> * <var:L> ; \\ \{ <var:L> = <var:z> \land <var:B1> = <var:z> \land <var:B2> = <var:z> ^ <nat:2> \} \\ <var:B0> := <nat:1> ; \\ \{ <var:L> = <var:z> \land <var:B1> = <var:z> \land <var:B2> = <var:z> ^ <nat:2> \land <var:B0> = <nat:1> \} \\ <var:B1> := <var:B1> * <nat:2> ; \\ \{ <var:L> = <var:z> \land <var:B1> = <nat:2> \times <var:z> \land <var:B2> = <var:z> ^ <nat:2> \land <var:B0> = <nat:1> \} \\ <var:B2> := <var:B2> * <nat:2> ; \\ \{ <var:L> = <var:z> \land <var:B1> = <nat:2> \times <var:z> \land <var:B2> = <nat:2> \times <var:z> ^ <nat:2> \land <var:B0> = <nat:1> \} \\ <var:Q> := <var:B2> \\ \{ <var:L> = <var:z> \land <var:B1> = <nat:2> \times <var:z> \land <var:B0> = <nat:1> \land <var:Q> = <nat:2> \times <var:z> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:B1> \\ \{ <var:L> = <var:z> \land <var:B0> = <nat:1> \land <var:Q> = <nat:2> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> \} \\ <var:Q> := <var:Q> + <var:B0> \\ \{ <var:L> = <var:z> \land <var:Q> = <nat:2> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:1> \} \end{eqnarray} Hence , this segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <def:poly> := <var:B1> := <var:L> ; <var:B2> := <var:B1> * <var:L> ; <var:B0> := <nat:1> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:2> ; <var:Q> := <var:B2> <var:Q> := <var:Q> + <var:B1> <var:Q> := <var:Q> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:L> = <var:z> }} <def:poly> {{ <var:Q> = <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:z> /\ <var:B1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:z> /\ <var:B1> = <var:z> /\ <var:B2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:z> /\ <var:B1> = <var:z> /\ <var:B2> = <var:z> ^ <nat:2> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:z> /\ <var:B1> = <nat:2> * <var:z> /\ <var:B2> = <var:z> ^ <nat:2> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:z> /\ <var:B1> = <nat:2> * <var:z> /\ <var:B2> = <nat:2> * <var:z> ^ <nat:2> /\ <var:B0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:z> /\ <var:B1> = <nat:2> * <var:z> /\ <var:B0> = <nat:1> /\ <var:Q> = <nat:2> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:z> /\ <var:B0> = <nat:1> /\ <var:Q> = <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:z> /\ <var:Q> = <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 