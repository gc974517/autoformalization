\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:V1> := <var:D> ; <var:V2> := <var:V1> * <var:D> ; <var:V0> := <nat:5> ; <var:V1> := <var:V1> * <nat:2> ; <var:V2> := <var:V2> * <nat:9> ; <var:k> := <var:V2> <var:k> := <var:k> + <var:V1> <var:k> := <var:k> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:D> = <var:J> $ ahead of the execution of the list of commands then we see $ <var:k> = <nat:9> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> + <nat:5> $ . \end{theorem} \begin{proof} Arguing the correctness of our code segment can be given using standard Hoare techniques . Moving on , we see \begin{verbatim} { <var:D> = <var:J> } <var:V1> := <var:D> { <var:D> = <var:J> \land <var:V1> = <var:J> } { <var:D> = <var:J> \land <var:V1> = <var:J> } <var:V2> := <var:V1> * <var:D> { <var:D> = <var:J> \land <var:V1> = <var:J> \land <var:V2> = <var:J> ^ <nat:2> } { <var:D> = <var:J> \land <var:V1> = <var:J> \land <var:V2> = <var:J> ^ <nat:2> } <var:V0> := <nat:5> { <var:D> = <var:J> \land <var:V1> = <var:J> \land <var:V2> = <var:J> ^ <nat:2> \land <var:V0> = <nat:5> } { <var:D> = <var:J> \land <var:V1> = <var:J> \land <var:V2> = <var:J> ^ <nat:2> \land <var:V0> = <nat:5> } <var:V1> := <var:V1> * <nat:2> { <var:D> = <var:J> \land <var:V1> = <nat:2> \times <var:J> \land <var:V2> = <var:J> ^ <nat:2> \land <var:V0> = <nat:5> } { <var:D> = <var:J> \land <var:V1> = <nat:2> \times <var:J> \land <var:V2> = <var:J> ^ <nat:2> \land <var:V0> = <nat:5> } <var:V2> := <var:V2> * <nat:9> { <var:D> = <var:J> \land <var:V1> = <nat:2> \times <var:J> \land <var:V2> = <nat:9> \times <var:J> ^ <nat:2> \land <var:V0> = <nat:5> } { <var:D> = <var:J> \land <var:V1> = <nat:2> \times <var:J> \land <var:V2> = <nat:9> \times <var:J> ^ <nat:2> \land <var:V0> = <nat:5> } <var:k> := <var:V2{ <var:D> = <var:J> \land <var:V1> = <nat:2> \times <var:J> \land <var:V0> = <nat:5> \land <var:k> = <nat:9> \times <var:J> ^ <nat:2> } { <var:D> = <var:J> \land <var:V1> = <nat:2> \times <var:J> \land <var:V0> = <nat:5> \land <var:k> = <nat:9> \times <var:J> ^ <nat:2> } <var:k> := <var:k> + <var:V1{ <var:D> = <var:J> \land <var:V0> = <nat:5> \land <var:k> = <nat:9> \times <var:J> ^ <nat:2> + <nat:2> \times <var:J> } \end{verbatim} Taking a look at the upcoming command in the code segment , we see \begin{verbatim} { <var:D> = <var:J> } <var:V1> := <var:D> { <var:D> = <var:J> \land <var:V1> = <var:J> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V1> := <var:D> ; <var:V2> := <var:V1> * <var:D> ; <var:V0> := <nat:5> ; <var:V1> := <var:V1> * <nat:2> ; <var:V2> := <var:V2> * <nat:9> ; <var:k> := <var:V2> <var:k> := <var:k> + <var:V1> <var:k> := <var:k> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:D> = <var:J> }} <def:poly> {{ <var:k> = <nat:9> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:V1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:V1> = <var:J> /\ <var:V2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:V1> = <var:J> /\ <var:V2> = <var:J> ^ <nat:2> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:V1> = <nat:2> * <var:J> /\ <var:V2> = <var:J> ^ <nat:2> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:V1> = <nat:2> * <var:J> /\ <var:V2> = <nat:9> * <var:J> ^ <nat:2> /\ <var:V0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:V1> = <nat:2> * <var:J> /\ <var:V0> = <nat:5> /\ <var:k> = <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:V0> = <nat:5> /\ <var:k> = <nat:9> * <var:J> ^ <nat:2> + <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:k> = <nat:9> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 