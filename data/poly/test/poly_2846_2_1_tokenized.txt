\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:9> ; <var:q> := <var:L0> \end{verbatim} Assume , for all whole numbers $ <var:B> $ , it to hold that $ <var:e> = <var:B> $ before interpreting this list of instructions it must be that we see $ <var:q> = <nat:9> $ . \end{theorem} \begin{proof} The method of proof for the code segment can be accomplished through typical Hoare techniques . Paying attention to the following command found in our program , we have \begin{eqnarray} \{ <var:e> = <var:B> \} \, <var:L0> := <nat:9> \, \{ <var:e> = <var:B> \land <var:L0> = <nat:9> \} \end{eqnarray} Moving on , \begin{eqnarray} \{ <var:e> = <var:B> \} \, <var:L0> := <nat:9> \, \{ <var:e> = <var:B> \land <var:L0> = <nat:9> \} \end{eqnarray} This is deduced using the variable binding inference rule in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:e> = <var:B> }} <var:L0> := <nat:9> ; <var:q> := <var:L0> {{ <var:q> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:B> /\ <var:q> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 