\begin{document} \begin{theorem} Take a series of instructions such that \begin{verbatim} <var:J1> := <var:w> ; <var:J2> := <var:J1> * <var:w> ; <var:J3> := <var:J2> * <var:w> ; <var:J0> := <nat:9> ; <var:J1> := <var:J1> * <nat:4> ; <var:J2> := <var:J2> * <nat:5> ; <var:J3> := <var:J3> * <nat:8> ; <var:T> := <var:J3> <var:T> := <var:T> + <var:J2> <var:T> := <var:T> + <var:J1> <var:T> := <var:T> + <var:J0> \end{verbatim} Assuming --- for any $ <var:R> \in \mathbb{N} $ --- that we have $ <var:w> = <var:R> $ prior to the evaluation of our code it must be that $ <var:T> = <nat:8> * <var:R> ^ <nat:3> + <nat:5> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:9> $ . \end{theorem} \begin{proof} The argument for our set of instructions is evident using Hoare techniques . Focusing on the subsequent statement found in our program , we see the binding code \verb | <var:J1> := <var:w> ; | . This transfers $ \{ <var:w> = <var:R> \} $ to the condition $ \{ <var:w> = <var:R> \land <var:J1> = <var:R> \} $ . This is guaranteed with the assignment scheme of standard Hoare techniques . Stepping through , we have the variable update line \verb | <var:J2> := <var:J1> * <var:w> ; | . This statement advances the precondition $ \{ <var:w> = <var:R> \land <var:J1> = <var:R> \} $ as the postcondition $ \{ <var:w> = <var:R> \land <var:J1> = <var:R> \land <var:J2> = <var:R> ^ <nat:2> \} $ . Advancing , we have the variable assignmet command giving $ <var:J2> * <var:w> $ toward $ <var:J3>$ . This takes $ \{ <var:w> = <var:R> \land <var:J1> = <var:R> \land <var:J2> = <var:R> ^ <nat:2> \} $ as the postcondition $ \{ <var:w> = <var:R> \land <var:J1> = <var:R> \land <var:J2> = <var:R> ^ <nat:2> \land <var:J3> = <var:R> ^ <nat:3> \} $ . This is ensured with the assignment inference rule from Hoare logic . Honing in on the subsequent piece of code contained in our list of commands , the variable update statement giving $ <nat:9> $ into $ <var:J0>$ . This line takes the condition $ \{ <var:w> = <var:R> \land <var:J1> = <var:R> \land <var:J2> = <var:R> ^ <nat:2> \land <var:J3> = <var:R> ^ <nat:3> \} $ to $ \{ <var:w> = <var:R> \land <var:J1> = <var:R> \land <var:J2> = <var:R> ^ <nat:2> \land <var:J3> = <var:R> ^ <nat:3> \land <var:J0> = <nat:9> \} $ . This is guaranteed using the assignment scheme obtained from standard Hoare reasoning . Advancing on , we have the assignment code \verb | <var:J1> := <var:J1> * <nat:4> ; | . This code moves $ \{ <var:w> = <var:R> \land <var:J1> = <var:R> \land <var:J2> = <var:R> ^ <nat:2> \land <var:J3> = <var:R> ^ <nat:3> \land <var:J0> = <nat:9> \} $ to the condition $ \{ <var:w> = <var:R> \land <var:J1> = <nat:4> \times <var:R> \land <var:J2> = <var:R> ^ <nat:2> \land <var:J3> = <var:R> ^ <nat:3> \land <var:J0> = <nat:9> \} $ . After , we have the environment update command \verb | <var:J2> := <var:J2> * <nat:5> ; | . This transfers the condition $ \{ <var:w> = <var:R> \land <var:J1> = <nat:4> \times <var:R> \land <var:J2> = <var:R> ^ <nat:2> \land <var:J3> = <var:R> ^ <nat:3> \land <var:J0> = <nat:9> \} $ into the condition $ \{ <var:w> = <var:R> \land <var:J1> = <nat:4> \times <var:R> \land <var:J2> = <nat:5> \times <var:R> ^ <nat:2> \land <var:J3> = <var:R> ^ <nat:3> \land <var:J0> = <nat:9> \} $ . This is guaranteed through the assignment scheme found in typical Hoare techniques . Looking at the subsequent piece of code found in our set of commands , we have the environment update line defining $ <var:J3> * <nat:8> $ as $ <var:J3>$ . This statement moves the precondition $ \{ <var:w> = <var:R> \land <var:J1> = <nat:4> \times <var:R> \land <var:J2> = <nat:5> \times <var:R> ^ <nat:2> \land <var:J3> = <var:R> ^ <nat:3> \land <var:J0> = <nat:9> \} $ into the postcondition $ \{ <var:w> = <var:R> \land <var:J1> = <nat:4> \times <var:R> \land <var:J2> = <nat:5> \times <var:R> ^ <nat:2> \land <var:J3> = <nat:8> \times <var:R> ^ <nat:3> \land <var:J0> = <nat:9> \} $ . This is given with the assignment scheme given in typical Hoare logic . Moving forward to the next step , the command binding $ <var:J3$ toward $ <var:T>$ . This forwards the condition $ \{ <var:w> = <var:R> \land <var:J1> = <nat:4> \times <var:R> \land <var:J2> = <nat:5> \times <var:R> ^ <nat:2> \land <var:J3> = <nat:8> \times <var:R> ^ <nat:3> \land <var:J0> = <nat:9> \} $ into the postcondition $ \{ <var:w> = <var:R> \land <var:J1> = <nat:4> \times <var:R> \land <var:J2> = <nat:5> \times <var:R> ^ <nat:2> \land <var:J0> = <nat:9> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> \} $ . This is deduced by the assignment scheme given in standard Hoare logic . Taking a look at the subsequent statement contained in the set of instructions , we see the variable update code \verb | <var:T> := <var:T> + <var:J2> | . This line takes $ \{ <var:w> = <var:R> \land <var:J1> = <nat:4> \times <var:R> \land <var:J2> = <nat:5> \times <var:R> ^ <nat:2> \land <var:J0> = <nat:9> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> \} $ into the condition $ \{ <var:w> = <var:R> \land <var:J1> = <nat:4> \times <var:R> \land <var:J0> = <nat:9> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> + <nat:5> \times <var:R> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment law from standard Hoare techniques . Advancing to the proceeding line of code found in our list of commands , we see the environment update command \verb | <var:T> := <var:T> + <var:J1> | . This forwards the condition $ \{ <var:w> = <var:R> \land <var:J1> = <nat:4> \times <var:R> \land <var:J0> = <nat:9> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> + <nat:5> \times <var:R> ^ <nat:2> \} $ into $ \{ <var:w> = <var:R> \land <var:J0> = <nat:9> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> + <nat:5> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> \} $ . This is rigorously given using the assignment rule in standard Hoare techniques . Observing the upcoming line of code contained in our set of instructions , the environment update command \verb | <var:T> := <var:T> + <var:J0> | . This takes the precondition $ \{ <var:w> = <var:R> \land <var:J0> = <nat:9> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> + <nat:5> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> \} $ into $ \{ <var:w> = <var:R> \land <var:T> = <nat:8> \times <var:R> ^ <nat:3> + <nat:5> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:w> = <var:R> }} <var:J1> := <var:w> ; <var:J2> := <var:J1> * <var:w> ; <var:J3> := <var:J2> * <var:w> ; <var:J0> := <nat:9> ; <var:J1> := <var:J1> * <nat:4> ; <var:J2> := <var:J2> * <nat:5> ; <var:J3> := <var:J3> * <nat:8> ; <var:T> := <var:J3> <var:T> := <var:T> + <var:J2> <var:T> := <var:T> + <var:J1> <var:T> := <var:T> + <var:J0> {{ <var:T> = <nat:8> * <var:R> ^ <nat:3> + <nat:5> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:J1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:J1> = <var:R> /\ <var:J2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:J1> = <var:R> /\ <var:J2> = <var:R> ^ <nat:2> /\ <var:J3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:J1> = <var:R> /\ <var:J2> = <var:R> ^ <nat:2> /\ <var:J3> = <var:R> ^ <nat:3> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:J1> = <nat:4> * <var:R> /\ <var:J2> = <var:R> ^ <nat:2> /\ <var:J3> = <var:R> ^ <nat:3> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:J1> = <nat:4> * <var:R> /\ <var:J2> = <nat:5> * <var:R> ^ <nat:2> /\ <var:J3> = <var:R> ^ <nat:3> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:J1> = <nat:4> * <var:R> /\ <var:J2> = <nat:5> * <var:R> ^ <nat:2> /\ <var:J3> = <nat:8> * <var:R> ^ <nat:3> /\ <var:J0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:J1> = <nat:4> * <var:R> /\ <var:J2> = <nat:5> * <var:R> ^ <nat:2> /\ <var:J0> = <nat:9> /\ <var:T> = <nat:8> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:J1> = <nat:4> * <var:R> /\ <var:J0> = <nat:9> /\ <var:T> = <nat:8> * <var:R> ^ <nat:3> + <nat:5> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:J0> = <nat:9> /\ <var:T> = <nat:8> * <var:R> ^ <nat:3> + <nat:5> * <var:R> ^ <nat:2> + <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:R> /\ <var:T> = <nat:8> * <var:R> ^ <nat:3> + <nat:5> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 