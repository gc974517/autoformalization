\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:J1> := <var:h> ; <var:J2> := <var:J1> * <var:h> ; <var:J0> := <nat:2> ; <var:J1> := <var:J1> * <nat:9> ; <var:J2> := <var:J2> * <nat:3> ; <var:D> := <var:J2> <var:D> := <var:D> + <var:J1> <var:D> := <var:D> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> in \emph{Imp} . Assuming that we have $ <var:h> = <var:s> $ ahead of running our series of commands , then we see $ <var:D> = <nat:3> \times <var:s> ^ <nat:2> + <nat:9> \times <var:s> + <nat:2> $ after list of commands has exited . \end{theorem} \begin{proof} The proof of our series of instructions is evident through the below decorated series of instructions . \begin{eqnarray} \{ <var:h> = <var:s> \} \\ <var:J1> := <var:h> ; \\ \{ <var:h> = <var:s> \land <var:J1> = <var:s> \} \\ <var:J2> := <var:J1> * <var:h> ; \\ \{ <var:h> = <var:s> \land <var:J1> = <var:s> \land <var:J2> = <var:s> ^ <nat:2> \} \\ <var:J0> := <nat:2> ; \\ \{ <var:h> = <var:s> \land <var:J1> = <var:s> \land <var:J2> = <var:s> ^ <nat:2> \land <var:J0> = <nat:2> \} \\ <var:J1> := <var:J1> * <nat:9> ; \\ \{ <var:h> = <var:s> \land <var:J1> = <nat:9> * <var:s> \land <var:J2> = <var:s> ^ <nat:2> \land <var:J0> = <nat:2> \} \\ <var:J2> := <var:J2> * <nat:3> ; \\ \{ <var:h> = <var:s> \land <var:J1> = <nat:9> * <var:s> \land <var:J2> = <nat:3> * <var:s> ^ <nat:2> \land <var:J0> = <nat:2> \} \\ <var:D> := <var:J2> \\ \{ <var:h> = <var:s> \land <var:J1> = <nat:9> * <var:s> \land <var:J0> = <nat:2> \land <var:D> = <nat:3> * <var:s> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:J1> \\ \{ <var:h> = <var:s> \land <var:J0> = <nat:2> \land <var:D> = <nat:3> * <var:s> ^ <nat:2> + <nat:9> * <var:s> \} \\ <var:D> := <var:D> + <var:J0> \\ \{ <var:h> = <var:s> \land <var:D> = <nat:3> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:2> \} \end{eqnarray} Using typical Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J1> := <var:h> ; <var:J2> := <var:J1> * <var:h> ; <var:J0> := <nat:2> ; <var:J1> := <var:J1> * <nat:9> ; <var:J2> := <var:J2> * <nat:3> ; <var:D> := <var:J2> <var:D> := <var:D> + <var:J1> <var:D> := <var:D> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:h> = <var:s> }} <def:poly> {{ <var:D> = <nat:3> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:J1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:J1> = <var:s> /\ <var:J2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:J1> = <var:s> /\ <var:J2> = <var:s> ^ <nat:2> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:J1> = <nat:9> * <var:s> /\ <var:J2> = <var:s> ^ <nat:2> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:J1> = <nat:9> * <var:s> /\ <var:J2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:J0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:J1> = <nat:9> * <var:s> /\ <var:J0> = <nat:2> /\ <var:D> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:J0> = <nat:2> /\ <var:D> = <nat:3> * <var:s> ^ <nat:2> + <nat:9> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:s> /\ <var:D> = <nat:3> * <var:s> ^ <nat:2> + <nat:9> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 