\begin{document} \begin{theorem} Define a series of commands : \begin{verbatim} <var:D0> := <nat:4> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:N> ; <var:D2> := <nat:3> ; <var:D2> := <var:D2> * <var:N> ; <var:D2> := <var:D2> * <var:N> ; <var:l> := <var:D2> ; <var:l> := <var:l> + <var:D1> ; <var:l> := <var:l> + <var:D0> \end{verbatim} Allowing , for all natural numbers $ <var:x> $ , it to be that $ <var:N> = <var:x> $ ahead of interpreting our program it holds that we see $ <var:l> = <nat:3> \times <var:x> ^ <nat:2> + <nat:6> \times <var:x> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:x> \} \\ <var:D0> := <nat:4> ; \\ \{ <var:N> = <var:x> \land <var:D0> = <nat:4> \} \\ <var:D1> := <nat:6> ; \\ \{ <var:N> = <var:x> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> \} \\ <var:D1> := <var:D1> * <var:N> ; \\ \{ <var:N> = <var:x> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> * <var:x> \} \\ <var:D2> := <nat:3> ; \\ \{ <var:N> = <var:x> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> * <var:x> \land <var:D2> = <nat:3> \} \\ <var:D2> := <var:D2> * <var:N> ; \\ \{ <var:N> = <var:x> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> * <var:x> \land <var:D2> = <nat:3> * <var:x> \} \\ <var:D2> := <var:D2> * <var:N> ; \\ \{ <var:N> = <var:x> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> * <var:x> \land <var:D2> = <nat:3> * <var:x> ^ <nat:2> \} \\ <var:l> := <var:D2> ; \\ \{ <var:N> = <var:x> \land <var:D0> = <nat:4> \land <var:D1> = <nat:6> * <var:x> \land <var:l> = <nat:3> * <var:x> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:D1> ; \\ \{ <var:N> = <var:x> \land <var:D0> = <nat:4> \land <var:l> = <nat:3> * <var:x> ^ <nat:2> + <nat:6> * <var:x> \} \\ <var:l> := <var:l> + <var:D0> \\ \{ <var:N> = <var:x> \land <var:l> = <nat:3> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:4> \} \end{eqnarray} Utilizing Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:N> = <var:x> }} <var:D0> := <nat:4> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:N> ; <var:D2> := <nat:3> ; <var:D2> := <var:D2> * <var:N> ; <var:D2> := <var:D2> * <var:N> ; <var:l> := <var:D2> ; <var:l> := <var:l> + <var:D1> ; <var:l> := <var:l> + <var:D0> {{ <var:l> = <nat:3> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:x> /\ <var:D2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:x> /\ <var:D2> = <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:x> /\ <var:D2> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:D0> = <nat:4> /\ <var:D1> = <nat:6> * <var:x> /\ <var:l> = <nat:3> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:D0> = <nat:4> /\ <var:l> = <nat:3> * <var:x> ^ <nat:2> + <nat:6> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:x> /\ <var:l> = <nat:3> * <var:x> ^ <nat:2> + <nat:6> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 