\begin{document} \begin{theorem} Let the following list of instructions as follows \begin{verbatim} <var:q0> := <nat:2> ; <var:q1> := <nat:6> ; <var:q1> := <var:q1> * <var:E> ; <var:q2> := <nat:9> ; <var:q2> := <var:q2> * <var:E> ; <var:q2> := <var:q2> * <var:E> ; <var:x> := <var:q2> ; <var:x> := <var:x> + <var:q1> ; <var:x> := <var:x> + <var:q0> \end{verbatim} Assuming $ <var:E> = <var:Z> $ before running the list of commands , it must be that $ <var:x> = <nat:9> \times <var:Z> ^ <nat:2> + <nat:6> \times <var:Z> + <nat:2> $ after set of instructions is done . \end{theorem} \begin{proof} The application of standard Hoare techniques results in : \begin{eqnarray} \{ <var:E> = <var:Z> \} \\ <var:q0> := <nat:2> ; \\ \{ <var:E> = <var:Z> \land <var:q0> = <nat:2> \} \\ <var:q1> := <nat:6> ; \\ \{ <var:E> = <var:Z> \land <var:q0> = <nat:2> \land <var:q1> = <nat:6> \} \\ <var:q1> := <var:q1> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:q0> = <nat:2> \land <var:q1> = <nat:6> * <var:Z> \} \\ <var:q2> := <nat:9> ; \\ \{ <var:E> = <var:Z> \land <var:q0> = <nat:2> \land <var:q1> = <nat:6> * <var:Z> \land <var:q2> = <nat:9> \} \\ <var:q2> := <var:q2> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:q0> = <nat:2> \land <var:q1> = <nat:6> * <var:Z> \land <var:q2> = <nat:9> * <var:Z> \} \\ <var:q2> := <var:q2> * <var:E> ; \\ \{ <var:E> = <var:Z> \land <var:q0> = <nat:2> \land <var:q1> = <nat:6> * <var:Z> \land <var:q2> = <nat:9> * <var:Z> ^ <nat:2> \} \\ <var:x> := <var:q2> ; \\ \{ <var:E> = <var:Z> \land <var:q0> = <nat:2> \land <var:q1> = <nat:6> * <var:Z> \land <var:x> = <nat:9> * <var:Z> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:q1> ; \\ \{ <var:E> = <var:Z> \land <var:q0> = <nat:2> \land <var:x> = <nat:9> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> \} \\ <var:x> := <var:x> + <var:q0> \\ \{ <var:E> = <var:Z> \land <var:x> = <nat:9> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:2> \} \end{eqnarray} As a result , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:E> = <var:Z> }} <var:q0> := <nat:2> ; <var:q1> := <nat:6> ; <var:q1> := <var:q1> * <var:E> ; <var:q2> := <nat:9> ; <var:q2> := <var:q2> * <var:E> ; <var:q2> := <var:q2> * <var:E> ; <var:x> := <var:q2> ; <var:x> := <var:x> + <var:q1> ; <var:x> := <var:x> + <var:q0> {{ <var:x> = <nat:9> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:6> * <var:Z> /\ <var:q2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:6> * <var:Z> /\ <var:q2> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:6> * <var:Z> /\ <var:q2> = <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:6> * <var:Z> /\ <var:x> = <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:q0> = <nat:2> /\ <var:x> = <nat:9> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:Z> /\ <var:x> = <nat:9> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 