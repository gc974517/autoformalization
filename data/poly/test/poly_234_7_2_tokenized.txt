\begin{document} \begin{theorem} Define a series of instructions in \emph{Imp} such that \begin{verbatim} <var:v> := <nat:3> ; <var:v> := <nat:3> + <var:v> * <var:a> ; <var:v> := <nat:3> + <var:v> * <var:a> ; <var:v> := <nat:1> + <var:v> * <var:a> ; <var:v> := <nat:4> + <var:v> * <var:a> ; <var:v> := <nat:2> + <var:v> * <var:a> ; <var:v> := <nat:2> + <var:v> * <var:a> \end{verbatim} Assume that we have $ <var:a> = <var:N> $ ahead of the execution of this program , it holds that we have $ <var:v> = <nat:3> \times <var:N> ^ <nat:6> + <nat:3> \times <var:N> ^ <nat:5> + <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:2> $ . \end{theorem} \begin{proof} Applying standard Hoare techniques returns : \begin{eqnarray} \{ <var:a> = <var:N> \} \\ <var:v> := <nat:3> ; \\ \{ <var:a> = <var:N> \land <var:v> = <nat:3> \} \\ <var:v> := <nat:3> + <var:v> * <var:a> ; \\ \{ <var:a> = <var:N> \land <var:v> = <nat:3> * <var:N> + <nat:3> \} \\ <var:v> := <nat:3> + <var:v> * <var:a> ; \\ \{ <var:a> = <var:N> \land <var:v> = <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> \} \\ <var:v> := <nat:1> + <var:v> * <var:a> ; \\ \{ <var:a> = <var:N> \land <var:v> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> \} \\ <var:v> := <nat:4> + <var:v> * <var:a> ; \\ \{ <var:a> = <var:N> \land <var:v> = <nat:3> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> \} \\ <var:v> := <nat:2> + <var:v> * <var:a> ; \\ \{ <var:a> = <var:N> \land <var:v> = <nat:3> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:2> \} \\ <var:v> := <nat:2> + <var:v> * <var:a> \\ \{ <var:a> = <var:N> \land <var:v> = <nat:3> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> \} \end{eqnarray} Given the above , the series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:a> = <var:N> }} <var:v> := <nat:3> ; <var:v> := <nat:3> + <var:v> * <var:a> ; <var:v> := <nat:3> + <var:v> * <var:a> ; <var:v> := <nat:1> + <var:v> * <var:a> ; <var:v> := <nat:4> + <var:v> * <var:a> ; <var:v> := <nat:2> + <var:v> * <var:a> ; <var:v> := <nat:2> + <var:v> * <var:a> {{ <var:v> = <nat:3> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:N> /\ <var:v> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:N> /\ <var:v> = <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:N> /\ <var:v> = <nat:3> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 