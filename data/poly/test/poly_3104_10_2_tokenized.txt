\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:g> := <nat:1> ; <var:g> := <nat:1> + <var:g> * <var:v> ; <var:g> := <var:g> * <var:v> ; <var:g> := <nat:3> + <var:g> * <var:v> ; <var:g> := <nat:2> + <var:g> * <var:v> ; <var:g> := <nat:2> + <var:g> * <var:v> ; <var:g> := <nat:3> + <var:g> * <var:v> ; <var:g> := <nat:2> + <var:g> * <var:v> ; <var:g> := <var:g> * <var:v> ; <var:g> := <nat:4> + <var:g> * <var:v> \end{verbatim} \end{definition} \begin{theorem} We define a code segment <def:poly> in \emph{Imp} . Allow it to hold that $ <var:v> = <var:t> $ , given every whole numbers $ <var:t> $ , before evaluating the segment of code it must be that we see $ <var:g> = <nat:1> \times <var:t> ^ <nat:9> + <nat:1> \times <var:t> ^ <nat:8> + <nat:3> \times <var:t> ^ <nat:6> + <nat:2> \times <var:t> ^ <nat:5> + <nat:2> \times <var:t> ^ <nat:4> + <nat:3> \times <var:t> ^ <nat:3> + <nat:2> \times <var:t> ^ <nat:2> + <nat:4> $ once set of instructions terminates . \end{theorem} \begin{proof} Utilizing Hoare reasoning results in : \begin{eqnarray} \{ <var:v> = <var:t> \} \\ <var:g> := <nat:1> ; \\ \{ <var:v> = <var:t> \land <var:g> = <nat:1> \} \\ <var:g> := <nat:1> + <var:g> * <var:v> ; \\ \{ <var:v> = <var:t> \land <var:g> = <nat:1> * <var:t> + <nat:1> \} \\ <var:g> := <var:g> * <var:v> ; \\ \{ <var:v> = <var:t> \land <var:g> = <nat:1> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + \} \\ <var:g> := <nat:3> + <var:g> * <var:v> ; \\ \{ <var:v> = <var:t> \land <var:g> = <nat:1> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:3> \} \\ <var:g> := <nat:2> + <var:g> * <var:v> ; \\ \{ <var:v> = <var:t> \land <var:g> = <nat:1> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:3> * <var:t> + <nat:2> \} \\ <var:g> := <nat:2> + <var:g> * <var:v> ; \\ \{ <var:v> = <var:t> \land <var:g> = <nat:1> * <var:t> ^ <nat:5> + <nat:1> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:2> \} \\ <var:g> := <nat:3> + <var:g> * <var:v> ; \\ \{ <var:v> = <var:t> \land <var:g> = <nat:1> * <var:t> ^ <nat:6> + <nat:1> * <var:t> ^ <nat:5> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> \} \\ <var:g> := <nat:2> + <var:g> * <var:v> ; \\ \{ <var:v> = <var:t> \land <var:g> = <nat:1> * <var:t> ^ <nat:7> + <nat:1> * <var:t> ^ <nat:6> + <nat:3> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:2> \} \\ <var:g> := <var:g> * <var:v> ; \\ \{ <var:v> = <var:t> \land <var:g> = <nat:1> * <var:t> ^ <nat:8> + <nat:1> * <var:t> ^ <nat:7> + <nat:3> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + \} \end{eqnarray} Allowing the evaluation of our segment of code produces : \begin{eqnarray} <var:g> := <nat:4> + <var:g> * <var:v> \\ \{ <var:v> = <var:t> \land <var:g> = <nat:1> * <var:t> ^ <nat:9> + <nat:1> * <var:t> ^ <nat:8> + <nat:3> * <var:t> ^ <nat:6> + <nat:2> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:4> \} \end{eqnarray} As a consequence , the set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:1> ; <var:g> := <nat:1> + <var:g> * <var:v> ; <var:g> := <var:g> * <var:v> ; <var:g> := <nat:3> + <var:g> * <var:v> ; <var:g> := <nat:2> + <var:g> * <var:v> ; <var:g> := <nat:2> + <var:g> * <var:v> ; <var:g> := <nat:3> + <var:g> * <var:v> ; <var:g> := <nat:2> + <var:g> * <var:v> ; <var:g> := <var:g> * <var:v> ; <var:g> := <nat:4> + <var:g> * <var:v> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:v> = <var:t> }} <def:poly> {{ <var:g> = <nat:1> * <var:t> ^ <nat:9> + <nat:1> * <var:t> ^ <nat:8> + <nat:3> * <var:t> ^ <nat:6> + <nat:2> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:g> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:g> = <nat:1> * <var:t> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:g> = <nat:1> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:g> = <nat:1> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:g> = <nat:1> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:3> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:g> = <nat:1> * <var:t> ^ <nat:5> + <nat:1> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:g> = <nat:1> * <var:t> ^ <nat:6> + <nat:1> * <var:t> ^ <nat:5> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:g> = <nat:1> * <var:t> ^ <nat:7> + <nat:1> * <var:t> ^ <nat:6> + <nat:3> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:g> = <nat:1> * <var:t> ^ <nat:8> + <nat:1> * <var:t> ^ <nat:7> + <nat:3> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:t> /\ <var:g> = <nat:1> * <var:t> ^ <nat:9> + <nat:1> * <var:t> ^ <nat:8> + <nat:3> * <var:t> ^ <nat:6> + <nat:2> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 