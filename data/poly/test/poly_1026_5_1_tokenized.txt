\begin{document} \begin{theorem} We define a code segment in \emph{Imp} such that \begin{verbatim} <var:L1> := <var:o> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:1> ; <var:Z> := <var:L1> <var:Z> := <var:Z> + <var:L0> \end{verbatim} Assume that $ <var:o> = <var:A> $ ahead of executing this set of commands it follows that we have $ <var:Z> = <nat:1> \cdot <var:A> + <nat:7> $ when series of commands executes . \end{theorem} \begin{proof} Proving correctness for the series of commands can be shown through standard Hoare reasoning . Advancing to the next step , we have \begin{verbatim} { <var:o> = <var:A> } <var:L1> := <var:o> { <var:o> = <var:A> \land <var:L1> = <var:A> } \end{verbatim} This is guaranteed using the variable update inference rule given by Hoare reasoning . Going to the next step , \begin{verbatim} { <var:o> = <var:A> } <var:L1> := <var:o> { <var:o> = <var:A> \land <var:L1> = <var:A> } { <var:o> = <var:A> \land <var:L1> = <var:A> } <var:L0> := <nat:7> { <var:o> = <var:A> \land <var:L1> = <var:A> \land <var:L0> = <nat:7> } \end{verbatim} This is guaranteed through the assignment law given by standard Hoare logic . Moving forward to the next step , \begin{verbatim} { <var:o> = <var:A> } <var:L1> := <var:o> { <var:o> = <var:A> \land <var:L1> = <var:A> } { <var:o> = <var:A> \land <var:L1> = <var:A> } <var:L0> := <nat:7> { <var:o> = <var:A> \land <var:L1> = <var:A> \land <var:L0> = <nat:7> } \end{verbatim} This is given with the variable update law found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:o> = <var:A> }} <var:L1> := <var:o> ; <var:L0> := <nat:7> ; <var:L1> := <var:L1> * <nat:1> ; <var:Z> := <var:L1> <var:Z> := <var:Z> + <var:L0> {{ <var:Z> = <nat:1> * <var:A> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:A> /\ <var:L1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:A> /\ <var:L1> = <var:A> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:A> /\ <var:L1> = <nat:1> * <var:A> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:A> /\ <var:L0> = <nat:7> /\ <var:Z> = <nat:1> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:A> /\ <var:Z> = <nat:1> * <var:A> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 