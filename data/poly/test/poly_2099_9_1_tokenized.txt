\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:k1> := <var:n> ; <var:k2> := <var:k1> * <var:n> ; <var:k3> := <var:k2> * <var:n> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:4> ; <var:k3> := <var:k3> * <nat:3> ; <var:V> := <var:k3> <var:V> := <var:V> + <var:k1> <var:V> := <var:V> + <var:k0> \end{verbatim} Allowing it to hold that $ <var:n> = <var:L> $ ahead of the evaluation of the series of commands it holds that we have $ <var:V> = <nat:3> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> + <nat:1> $ . \end{theorem} \begin{proof} Observe that the following decorated code segment . \begin{eqnarray} \{ <var:n> = <var:L> \} \\ <var:k1> := <var:n> ; \\ \{ <var:n> = <var:L> \land <var:k1> = <var:L> \} \\ <var:k2> := <var:k1> * <var:n> ; \\ \{ <var:n> = <var:L> \land <var:k1> = <var:L> \land <var:k2> = <var:L> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:n> ; \\ \{ <var:n> = <var:L> \land <var:k1> = <var:L> \land <var:k2> = <var:L> ^ <nat:2> \land <var:k3> = <var:L> ^ <nat:3> \} \\ <var:k0> := <nat:1> ; \\ \{ <var:n> = <var:L> \land <var:k1> = <var:L> \land <var:k2> = <var:L> ^ <nat:2> \land <var:k3> = <var:L> ^ <nat:3> \land <var:k0> = <nat:1> \} \end{eqnarray} Furthering interpreting our set of commands gives : \begin{eqnarray} <var:k1> := <var:k1> * <nat:4> ; \\ \{ <var:n> = <var:L> \land <var:k1> = <nat:4> \times <var:L> \land <var:k2> = <var:L> ^ <nat:2> \land <var:k3> = <var:L> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:k3> := <var:k3> * <nat:3> ; \\ \{ <var:n> = <var:L> \land <var:k1> = <nat:4> \times <var:L> \land <var:k2> = <var:L> ^ <nat:2> \land <var:k3> = <nat:3> \times <var:L> ^ <nat:3> \land <var:k0> = <nat:1> \} \\ <var:V> := <var:k3> \\ \{ <var:n> = <var:L> \land <var:k1> = <nat:4> \times <var:L> \land <var:k2> = <var:L> ^ <nat:2> \land <var:k0> = <nat:1> \land <var:V> = <nat:3> \times <var:L> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:k1> \\ \{ <var:n> = <var:L> \land <var:k0> = <nat:1> \land <var:V> = <nat:3> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> \} \\ <var:V> := <var:V> + <var:k0> \\ \{ <var:n> = <var:L> \land <var:V> = <nat:3> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> + <nat:1> \} \end{eqnarray} Using Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:n> = <var:L> }} <var:k1> := <var:n> ; <var:k2> := <var:k1> * <var:n> ; <var:k3> := <var:k2> * <var:n> ; <var:k0> := <nat:1> ; <var:k1> := <var:k1> * <nat:4> ; <var:k3> := <var:k3> * <nat:3> ; <var:V> := <var:k3> <var:V> := <var:V> + <var:k1> <var:V> := <var:V> + <var:k0> {{ <var:V> = <nat:3> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:k1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:k1> = <var:L> /\ <var:k2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:k1> = <var:L> /\ <var:k2> = <var:L> ^ <nat:2> /\ <var:k3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:k1> = <var:L> /\ <var:k2> = <var:L> ^ <nat:2> /\ <var:k3> = <var:L> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:k1> = <nat:4> * <var:L> /\ <var:k2> = <var:L> ^ <nat:2> /\ <var:k3> = <var:L> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:k1> = <nat:4> * <var:L> /\ <var:k2> = <var:L> ^ <nat:2> /\ <var:k3> = <nat:3> * <var:L> ^ <nat:3> /\ <var:k0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:k1> = <nat:4> * <var:L> /\ <var:k2> = <var:L> ^ <nat:2> /\ <var:k0> = <nat:1> /\ <var:V> = <nat:3> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:k0> = <nat:1> /\ <var:V> = <nat:3> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:L> /\ <var:V> = <nat:3> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 