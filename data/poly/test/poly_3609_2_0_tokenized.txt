\begin{document} \begin{theorem} Define the following set of instructions : \begin{verbatim} <var:C0> := <nat:1> ; <var:X> := <var:C0> \end{verbatim} Given $ <var:Y> = <var:S> $ prior to running our list of instructions , it follows that $ <var:X> = <nat:1> $ . \end{theorem} \begin{proof} The argument for our set of commands is done by standard Hoare techniques . Honing in on the next bits of codefound in the program , \begin{eqnarray} \{ <var:Y> = <var:S> \} \, <var:C0> := <nat:1> \, \{ <var:Y> = <var:S> \land <var:C0> = <nat:1> \} \\ \{ <var:Y> = <var:S> \land <var:C0> = <nat:1> \} \, <var:X> := <var:C0\, \{ <var:Y> = <var:S> \land <var:X> = <nat:1> \} \end{eqnarray} This is guaranteed using the variable update law given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Y> = <var:S> }} <var:C0> := <nat:1> ; <var:X> := <var:C0> {{ <var:X> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:S> /\ <var:X> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 