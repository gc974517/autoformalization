\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:D1> := <var:q> ; <var:D2> := <var:D1> * <var:q> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:6> ; <var:D2> := <var:D2> * <nat:7> ; <var:I> := <var:D2> <var:I> := <var:I> + <var:D1> <var:I> := <var:I> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> . Given it to be that $ <var:q> = <var:E> $ ahead of the execution of the program it holds that $ <var:I> = <nat:7> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> + <nat:4> $ when set of instructions exits . \end{theorem} \begin{proof} Using typical Hoare logic produces : \begin{eqnarray} \{ <var:q> = <var:E> \} \\ <var:D1> := <var:q> ; \\ \{ <var:q> = <var:E> \land <var:D1> = <var:E> \} \\ <var:D2> := <var:D1> * <var:q> ; \\ \{ <var:q> = <var:E> \land <var:D1> = <var:E> \land <var:D2> = <var:E> ^ <nat:2> \} \end{eqnarray} Advancing the evaluation of this series of commands yields : \begin{eqnarray} <var:D0> := <nat:4> ; \\ \{ <var:q> = <var:E> \land <var:D1> = <var:E> \land <var:D2> = <var:E> ^ <nat:2> \land <var:D0> = <nat:4> \} \\ <var:D1> := <var:D1> * <nat:6> ; \\ \{ <var:q> = <var:E> \land <var:D1> = <nat:6> \cdot <var:E> \land <var:D2> = <var:E> ^ <nat:2> \land <var:D0> = <nat:4> \} \\ <var:D2> := <var:D2> * <nat:7> ; \\ \{ <var:q> = <var:E> \land <var:D1> = <nat:6> \cdot <var:E> \land <var:D2> = <nat:7> \cdot <var:E> ^ <nat:2> \land <var:D0> = <nat:4> \} \\ <var:I> := <var:D2> \\ \{ <var:q> = <var:E> \land <var:D1> = <nat:6> \cdot <var:E> \land <var:D0> = <nat:4> \land <var:I> = <nat:7> \cdot <var:E> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:D1> \\ \{ <var:q> = <var:E> \land <var:D0> = <nat:4> \land <var:I> = <nat:7> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> \} \\ <var:I> := <var:I> + <var:D0> \\ \{ <var:q> = <var:E> \land <var:I> = <nat:7> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> + <nat:4> \} \end{eqnarray} As a consequence , the set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <def:poly> := <var:D1> := <var:q> ; <var:D2> := <var:D1> * <var:q> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:6> ; <var:D2> := <var:D2> * <nat:7> ; <var:I> := <var:D2> <var:I> := <var:I> + <var:D1> <var:I> := <var:I> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:q> = <var:E> }} <def:poly> {{ <var:I> = <nat:7> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:D1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:D1> = <var:E> /\ <var:D2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:D1> = <var:E> /\ <var:D2> = <var:E> ^ <nat:2> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:D1> = <nat:6> * <var:E> /\ <var:D2> = <var:E> ^ <nat:2> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:D1> = <nat:6> * <var:E> /\ <var:D2> = <nat:7> * <var:E> ^ <nat:2> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:D1> = <nat:6> * <var:E> /\ <var:D0> = <nat:4> /\ <var:I> = <nat:7> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:D0> = <nat:4> /\ <var:I> = <nat:7> * <var:E> ^ <nat:2> + <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:E> /\ <var:I> = <nat:7> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 