\begin{document} \begin{theorem} Consider a program in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:4> ; <var:L> := <var:R0> \end{verbatim} Allow that $ <var:j> = <var:e> $ ahead of running our list of commands , then we have $ <var:L> = <nat:4> $ once code executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:j> = <var:e> \} \\ <var:R0> := <nat:4> ; \\ \{ <var:j> = <var:e> \land <var:R0> = <nat:4> \} \\ <var:L> := <var:R0> \\ \{ <var:j> = <var:e> \land <var:L> = <nat:4> \} \end{eqnarray} The application of standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:j> = <var:e> }} <var:R0> := <nat:4> ; <var:L> := <var:R0> {{ <var:L> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:e> /\ <var:L> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 