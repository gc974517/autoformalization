\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:3> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:C> ; <var:o2> := <nat:4> ; <var:o2> := <var:o2> * <var:C> ; <var:o2> := <var:o2> * <var:C> ; <var:o3> := <nat:4> ; <var:o3> := <var:o3> * <var:C> ; <var:o3> := <var:o3> * <var:C> ; <var:o3> := <var:o3> * <var:C> ; <var:q> := <var:o3> ; <var:q> := <var:q> + <var:o2> ; <var:q> := <var:q> + <var:o1> ; <var:q> := <var:q> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> . Assume $ <var:C> = <var:z> $ before interpreting our series of commands it follows that we have $ <var:q> = <nat:4> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:3> $ . \end{theorem} \begin{proof} The application of typical Hoare logic yields : \begin{eqnarray} \{ <var:C> = <var:z> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:C> = <var:z> \land <var:o0> = <nat:3> \} \\ <var:o1> := <nat:1> ; \\ \{ <var:C> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \} \\ <var:o1> := <var:o1> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:z> \} \\ <var:o2> := <nat:4> ; \\ \{ <var:C> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:z> \land <var:o2> = <nat:4> \} \\ <var:o2> := <var:o2> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:z> \land <var:o2> = <nat:4> \cdot <var:z> \} \\ <var:o2> := <var:o2> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:z> \land <var:o2> = <nat:4> \cdot <var:z> ^ <nat:2> \} \\ <var:o3> := <nat:4> ; \\ \{ <var:C> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:z> \land <var:o2> = <nat:4> \cdot <var:z> ^ <nat:2> \land <var:o3> = <nat:4> \} \\ <var:o3> := <var:o3> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:z> \land <var:o2> = <nat:4> \cdot <var:z> ^ <nat:2> \land <var:o3> = <nat:4> \cdot <var:z> \} \\ <var:o3> := <var:o3> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:z> \land <var:o2> = <nat:4> \cdot <var:z> ^ <nat:2> \land <var:o3> = <nat:4> \cdot <var:z> ^ <nat:2> \} \\ <var:o3> := <var:o3> * <var:C> ; \\ \{ <var:C> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:z> \land <var:o2> = <nat:4> \cdot <var:z> ^ <nat:2> \land <var:o3> = <nat:4> \cdot <var:z> ^ <nat:3> \} \\ <var:q> := <var:o3> ; \\ \{ <var:C> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:z> \land <var:o2> = <nat:4> \cdot <var:z> ^ <nat:2> \land <var:q> = <nat:4> \cdot <var:z> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:o2> ; \\ \{ <var:C> = <var:z> \land <var:o0> = <nat:3> \land <var:o1> = <nat:1> \cdot <var:z> \land <var:q> = <nat:4> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:o1> ; \\ \{ <var:C> = <var:z> \land <var:o0> = <nat:3> \land <var:q> = <nat:4> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> \} \\ <var:q> := <var:q> + <var:o0> \\ \{ <var:C> = <var:z> \land <var:q> = <nat:4> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:3> \} \end{eqnarray} As a consequence , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o0> := <nat:3> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:C> ; <var:o2> := <nat:4> ; <var:o2> := <var:o2> * <var:C> ; <var:o2> := <var:o2> * <var:C> ; <var:o3> := <nat:4> ; <var:o3> := <var:o3> * <var:C> ; <var:o3> := <var:o3> * <var:C> ; <var:o3> := <var:o3> * <var:C> ; <var:q> := <var:o3> ; <var:q> := <var:q> + <var:o2> ; <var:q> := <var:q> + <var:o1> ; <var:q> := <var:q> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:C> = <var:z> }} <def:poly> {{ <var:q> = <nat:4> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> /\ <var:o2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> /\ <var:o2> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> /\ <var:o2> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> /\ <var:o2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:o3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> /\ <var:o2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:o3> = <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> /\ <var:o2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:o3> = <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> /\ <var:o2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:o3> = <nat:4> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> /\ <var:o2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:q> = <nat:4> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:o0> = <nat:3> /\ <var:o1> = <nat:1> * <var:z> /\ <var:q> = <nat:4> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:o0> = <nat:3> /\ <var:q> = <nat:4> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:z> /\ <var:q> = <nat:4> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 