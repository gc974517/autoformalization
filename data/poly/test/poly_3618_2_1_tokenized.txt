\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:3> ; <var:G> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Assuming $ <var:L> = <var:s> $ given natural numbers $ <var:s> $ ahead of running our set of commands it must be that we see $ <var:G> = <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this series of commands is clear through typical Hoare techniques . Moving forward to the next lines of codefound in the program , \begin{verbatim} { <var:L> = <var:s> } <var:F0> := <nat:3> { <var:L> = <var:s> \land <var:F0> = <nat:3> } { <var:L> = <var:s> \land <var:F0> = <nat:3> } <var:G> := <var:F0{ <var:L> = <var:s> \land <var:G> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:3> ; <var:G> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:L> = <var:s> }} <def:poly> {{ <var:G> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:F0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:G> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 