\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:8> ; <var:t1> := <nat:5> ; <var:t1> := <var:t1> * <var:x> ; <var:b> := <var:t1> ; <var:b> := <var:b> + <var:t0> \end{verbatim} Assume $ <var:x> = <var:K> $ letting positive numbers $ <var:K> $ before executing the segment of code , it must be that we have $ <var:b> = <nat:5> \times <var:K> + <nat:8> $ once series of instructions has terminated . \end{theorem} \begin{proof} We can see that the below decorated list of commands . \begin{eqnarray} \{ <var:x> = <var:K> \} \\ <var:t0> := <nat:8> ; \\ \{ <var:x> = <var:K> \land <var:t0> = <nat:8> \} \\ <var:t1> := <nat:5> ; \\ \{ <var:x> = <var:K> \land <var:t0> = <nat:8> \land <var:t1> = <nat:5> \} \\ <var:t1> := <var:t1> * <var:x> ; \\ \{ <var:x> = <var:K> \land <var:t0> = <nat:8> \land <var:t1> = <nat:5> * <var:K> \} \\ <var:b> := <var:t1> ; \\ \{ <var:x> = <var:K> \land <var:t0> = <nat:8> \land <var:b> = <nat:5> * <var:K> \} \\ <var:b> := <var:b> + <var:t0> \\ \{ <var:x> = <var:K> \land <var:b> = <nat:5> * <var:K> + <nat:8> \} \end{eqnarray} Applying typical Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:x> = <var:K> }} <var:t0> := <nat:8> ; <var:t1> := <nat:5> ; <var:t1> := <var:t1> * <var:x> ; <var:b> := <var:t1> ; <var:b> := <var:b> + <var:t0> {{ <var:b> = <nat:5> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:t0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:t0> = <nat:8> /\ <var:t1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:t0> = <nat:8> /\ <var:t1> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:t0> = <nat:8> /\ <var:b> = <nat:5> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:K> /\ <var:b> = <nat:5> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 