\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:6> ; <var:n> := <var:P0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> . Assuming $ <var:N> = <var:w> $ --- for $ <var:w> \in \mathbb{N} $ --- before the evaluation of this set of commands , it holds that we have $ <var:n> = <nat:6> $ once program exits . \end{theorem} \begin{proof} The flow of logic for the program can be given through Hoare techniques . Looking at the upcoming statement contained in our series of commands , we see the variable binding statement letting $ <nat:6> $ into $ <var:P0>$ . This code forwards the precondition $ \{ <var:N> = <var:w> \} $ into the condition $ \{ <var:N> = <var:w> \land <var:P0> = <nat:6> \} $ . Focusing on the upcoming step in our list of commands , the code \verb | <var:n> := <var:P0> | . This code advances the condition $ \{ <var:N> = <var:w> \land <var:P0> = <nat:6> \} $ into $ \{ <var:N> = <var:w> \land <var:n> = <nat:6> \} $ . This is shown to be logically sound by the assignment rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <def:poly> := <var:P0> := <nat:6> ; <var:n> := <var:P0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:N> = <var:w> }} <def:poly> {{ <var:n> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:w> /\ <var:n> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 