\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q> := <nat:3> ; <var:Q> := <nat:3> + <var:Q> * <var:g> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:g> = <var:J> $ prior to evaluating the program , then we have $ <var:Q> = <nat:3> \times <var:J> + <nat:3> $ once program finishes . \end{theorem} \begin{proof} Applying standard Hoare reasoning produces : \begin{eqnarray} \{ <var:g> = <var:J> \} \\ <var:Q> := <nat:3> ; \\ \{ <var:g> = <var:J> \land <var:Q> = <nat:3> \} \end{eqnarray} Furthering running this set of commands returns : \begin{eqnarray} <var:Q> := <nat:3> + <var:Q> * <var:g> \\ \{ <var:g> = <var:J> \land <var:Q> = <nat:3> \times <var:J> + <nat:3> \} \end{eqnarray} Hence , this list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:3> ; <var:Q> := <nat:3> + <var:Q> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:g> = <var:J> }} <def:poly> {{ <var:Q> = <nat:3> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:Q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:J> /\ <var:Q> = <nat:3> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 