\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:8> ; <var:I1> := <nat:1> ; <var:I1> := <var:I1> * <var:g> ; <var:I2> := <nat:8> ; <var:I2> := <var:I2> * <var:g> ; <var:I2> := <var:I2> * <var:g> ; <var:I3> := <nat:5> ; <var:I3> := <var:I3> * <var:g> ; <var:I3> := <var:I3> * <var:g> ; <var:I3> := <var:I3> * <var:g> ; <var:y> := <var:I3> ; <var:y> := <var:y> + <var:I2> ; <var:y> := <var:y> + <var:I1> ; <var:y> := <var:y> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Given for all $ <var:X> $ that we have $ <var:g> = <var:X> $ ahead of the evaluation of our segment of code it holds that we have $ <var:y> = <nat:5> \times <var:X> ^ <nat:3> + <nat:8> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:8> $ once series of instructions has terminated . \end{theorem} \begin{proof} The method of proof for the series of commands can be shown through Hoare techniques . After , we see \begin{verbatim} { <var:g> = <var:X> } <var:I0> := <nat:8> { <var:g> = <var:X> \land <var:I0> = <nat:8> } { <var:g> = <var:X> \land <var:I0> = <nat:8> } <var:I1> := <nat:1> { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> } \end{verbatim} Jumping to the subsequent commands seen in our list of commands , \begin{verbatim} { <var:g> = <var:X> } <var:I0> := <nat:8> { <var:g> = <var:X> \land <var:I0> = <nat:8> } { <var:g> = <var:X> \land <var:I0> = <nat:8> } <var:I1> := <nat:1> { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> } { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> } <var:I1> := <var:I1> * <var:g> { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> } { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> } <var:I2> := <nat:8> { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> } { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> } <var:I2> := <var:I2> * <var:g> { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> } { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> } <var:I2> := <var:I2> * <var:g> { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> ^ <nat:2> } { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> ^ <nat:2> } <var:I3> := <nat:5> { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:I3> = <nat:5> } { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:I3> = <nat:5> } <var:I3> := <var:I3> * <var:g> { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:I3> = <nat:5> \times <var:X> } { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:I3> = <nat:5> \times <var:X> } <var:I3> := <var:I3> * <var:g> { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:I3> = <nat:5> \times <var:X> ^ <nat:2> } { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:I3> = <nat:5> \times <var:X> ^ <nat:2> } <var:I3> := <var:I3> * <var:g> { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:I3> = <nat:5> \times <var:X> ^ <nat:3> } { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:I3> = <nat:5> \times <var:X> ^ <nat:3> } <var:y> := <var:I3> { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:y> = <nat:5> \times <var:X> ^ <nat:3> } { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:I2> = <nat:8> \times <var:X> ^ <nat:2> \land <var:y> = <nat:5> \times <var:X> ^ <nat:3> } <var:y> := <var:y> + <var:I2> { <var:g> = <var:X> \land <var:I0> = <nat:8> \land <var:I1> = <nat:1> \times <var:X> \land <var:y> = <nat:5> \times <var:X> ^ <nat:3> + <nat:8> \times <var:X> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I0> := <nat:8> ; <var:I1> := <nat:1> ; <var:I1> := <var:I1> * <var:g> ; <var:I2> := <nat:8> ; <var:I2> := <var:I2> * <var:g> ; <var:I2> := <var:I2> * <var:g> ; <var:I3> := <nat:5> ; <var:I3> := <var:I3> * <var:g> ; <var:I3> := <var:I3> * <var:g> ; <var:I3> := <var:I3> * <var:g> ; <var:y> := <var:I3> ; <var:y> := <var:y> + <var:I2> ; <var:y> := <var:y> + <var:I1> ; <var:y> := <var:y> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:g> = <var:X> }} <def:poly> {{ <var:y> = <nat:5> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:1> * <var:X> /\ <var:I2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:1> * <var:X> /\ <var:I2> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:1> * <var:X> /\ <var:I2> = <nat:8> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:1> * <var:X> /\ <var:I2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:I3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:1> * <var:X> /\ <var:I2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:I3> = <nat:5> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:1> * <var:X> /\ <var:I2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:I3> = <nat:5> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:1> * <var:X> /\ <var:I2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:I3> = <nat:5> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:1> * <var:X> /\ <var:I2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:y> = <nat:5> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:1> * <var:X> /\ <var:y> = <nat:5> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:I0> = <nat:8> /\ <var:y> = <nat:5> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:X> /\ <var:y> = <nat:5> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 