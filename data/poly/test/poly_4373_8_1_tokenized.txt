\begin{document} \begin{theorem} Take the following series of instructions such that \begin{verbatim} <var:H1> := <var:U> ; <var:H2> := <var:H1> * <var:U> ; <var:H0> := <nat:7> ; <var:H1> := <var:H1> * <nat:6> ; <var:H2> := <var:H2> * <nat:4> ; <var:f> := <var:H2> <var:f> := <var:f> + <var:H1> <var:f> := <var:f> + <var:H0> \end{verbatim} Assume it to be that $ <var:U> = <var:c> $ ( given $ <var:c> \in \mathbb{N} $ ) ahead of the evaluation of this set of instructions , it follows that we have $ <var:f> = <nat:4> \cdot <var:c> ^ <nat:2> + <nat:6> \cdot <var:c> + <nat:7> $ once series of instructions has exited . \end{theorem} \begin{proof} The flow of logic for this list of instructions can be shown through Hoare logic . Further , we have \[ \begin{tabular} {rcl} \{ <var:U> = <var:c> \} & <var:H1> := <var:U> & \{ <var:U> = <var:c> \land <var:H1> = <var:c> \} \\ \{ <var:U> = <var:c> \land <var:H1> = <var:c> \} & <var:H2> := <var:H1> * <var:U> & \{ <var:U> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \} \\ \{ <var:U> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \} & <var:H0> := <nat:7> & \{ <var:U> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \land <var:H0> = <nat:7> \} \\ \{ <var:U> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \land <var:H0> = <nat:7> \} & <var:H1> := <var:H1> * <nat:6> & \{ <var:U> = <var:c> \land <var:H1> = <nat:6> \times <var:c> \land <var:H2> = <var:c> ^ <nat:2> \land <var:H0> = <nat:7> \} \\ \{ <var:U> = <var:c> \land <var:H1> = <nat:6> \times <var:c> \land <var:H2> = <var:c> ^ <nat:2> \land <var:H0> = <nat:7> \} & <var:H2> := <var:H2> * <nat:4> & \{ <var:U> = <var:c> \land <var:H1> = <nat:6> \times <var:c> \land <var:H2> = <nat:4> \times <var:c> ^ <nat:2> \land <var:H0> = <nat:7> \} \\ \{ <var:U> = <var:c> \land <var:H1> = <nat:6> \times <var:c> \land <var:H2> = <nat:4> \times <var:c> ^ <nat:2> \land <var:H0> = <nat:7> \} & <var:f> := <var:H2& \{ <var:U> = <var:c> \land <var:H1> = <nat:6> \times <var:c> \land <var:H0> = <nat:7> \land <var:f> = <nat:4> \times <var:c> ^ <nat:2> \} \end{tabular} This is shown through the binding inference rule defined in Hoare logic . Observing the subsequent statements found in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:U> = <var:c> \} & <var:H1> := <var:U> & \{ <var:U> = <var:c> \land <var:H1> = <var:c> \} \\ \{ <var:U> = <var:c> \land <var:H1> = <var:c> \} & <var:H2> := <var:H1> * <var:U> & \{ <var:U> = <var:c> \land <var:H1> = <var:c> \land <var:H2> = <var:c> ^ <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:U> = <var:c> }} <var:H1> := <var:U> ; <var:H2> := <var:H1> * <var:U> ; <var:H0> := <nat:7> ; <var:H1> := <var:H1> * <nat:6> ; <var:H2> := <var:H2> * <nat:4> ; <var:f> := <var:H2> <var:f> := <var:f> + <var:H1> <var:f> := <var:f> + <var:H0> {{ <var:f> = <nat:4> * <var:c> ^ <nat:2> + <nat:6> * <var:c> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:H1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:H1> = <var:c> /\ <var:H2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:H1> = <var:c> /\ <var:H2> = <var:c> ^ <nat:2> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:H1> = <nat:6> * <var:c> /\ <var:H2> = <var:c> ^ <nat:2> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:H1> = <nat:6> * <var:c> /\ <var:H2> = <nat:4> * <var:c> ^ <nat:2> /\ <var:H0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:H1> = <nat:6> * <var:c> /\ <var:H0> = <nat:7> /\ <var:f> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:H0> = <nat:7> /\ <var:f> = <nat:4> * <var:c> ^ <nat:2> + <nat:6> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:c> /\ <var:f> = <nat:4> * <var:c> ^ <nat:2> + <nat:6> * <var:c> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 