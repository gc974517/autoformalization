\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:3> ; <var:I1> := <nat:6> ; <var:I1> := <var:I1> * <var:z> ; <var:A> := <var:I1> ; <var:A> := <var:A> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:z> = <var:D> $ --- taking $ <var:D> \in \mathbb{N} $ --- ahead of evaluating the set of commands , then $ <var:A> = <nat:6> * <var:D> + <nat:3> $ after list of commands executes . \end{theorem} \begin{proof} The proof of the list of commands can be demonstrated by standard Hoare logic . Moving forward , we see the variable update statement \verb | <var:I0> := <nat:3> ; | . This moves the precondition $ \{ <var:z> = <var:D> \} $ into $ \{ <var:z> = <var:D> \land <var:I0> = <nat:3> \} $ . Considering the following bit of code seen in our code , we have the environment update code yielding $ <nat:6> $ to $ <var:I1>$ . This code moves $ \{ <var:z> = <var:D> \land <var:I0> = <nat:3> \} $ toward the postcondition $ \{ <var:z> = <var:D> \land <var:I0> = <nat:3> \land <var:I1> = <nat:6> \} $ . This is ensured through the assignment scheme obtained from standard Hoare reasoning . Moving on to the proceeding line found in our code segment , we have the environment update command \verb | <var:I1> := <var:I1> * <var:z> ; | . This moves the precondition $ \{ <var:z> = <var:D> \land <var:I0> = <nat:3> \land <var:I1> = <nat:6> \} $ as $ \{ <var:z> = <var:D> \land <var:I0> = <nat:3> \land <var:I1> = <nat:6> \cdot <var:D> \} $ . Advancing on , we have the environment update statement \verb | <var:A> := <var:I1> ; | . This line forwards the condition $ \{ <var:z> = <var:D> \land <var:I0> = <nat:3> \land <var:I1> = <nat:6> \cdot <var:D> \} $ into the postcondition $ \{ <var:z> = <var:D> \land <var:I0> = <nat:3> \land <var:A> = <nat:6> \cdot <var:D> \} $ . This is rigorously given by the assignment rule in standard Hoare logic . Considering the upcoming line of code found in our set of instructions , the variable binding line \verb | <var:A> := <var:A> + <var:I0> | . This code moves $ \{ <var:z> = <var:D> \land <var:I0> = <nat:3> \land <var:A> = <nat:6> \cdot <var:D> \} $ toward the postcondition $ \{ <var:z> = <var:D> \land <var:A> = <nat:6> \cdot <var:D> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <def:poly> := <var:I0> := <nat:3> ; <var:I1> := <nat:6> ; <var:I1> := <var:I1> * <var:z> ; <var:A> := <var:I1> ; <var:A> := <var:A> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:z> = <var:D> }} <def:poly> {{ <var:A> = <nat:6> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:I0> = <nat:3> /\ <var:I1> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:I0> = <nat:3> /\ <var:A> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:A> = <nat:6> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 