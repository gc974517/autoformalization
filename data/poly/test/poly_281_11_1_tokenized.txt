\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:t1> := <var:p> ; <var:t2> := <var:t1> * <var:p> ; <var:t3> := <var:t2> * <var:p> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:3> ; <var:t2> := <var:t2> * <nat:9> ; <var:t3> := <var:t3> * <nat:2> ; <var:s> := <var:t3> <var:s> := <var:s> + <var:t2> <var:s> := <var:s> + <var:t1> <var:s> := <var:s> + <var:t0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> in \emph{Imp} . Allow that $ <var:p> = <var:j> $ before running the list of instructions it follows that we have $ <var:s> = <nat:2> \times <var:j> ^ <nat:3> + <nat:9> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:2> $ when list of instructions finishes . \end{theorem} \begin{proof} The proof of the set of instructions can be demonstrated through standard Hoare reasoning . Moving on to the next pieces of code in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:p> = <var:j> \} & <var:t1> := <var:p> & \{ <var:p> = <var:j> \land <var:t1> = <var:j> \} \\ \{ <var:p> = <var:j> \land <var:t1> = <var:j> \} & <var:t2> := <var:t1> * <var:p> & \{ <var:p> = <var:j> \land <var:t1> = <var:j> \land <var:t2> = <var:j> ^ <nat:2> \} \\ \{ <var:p> = <var:j> \land <var:t1> = <var:j> \land <var:t2> = <var:j> ^ <nat:2> \} & <var:t3> := <var:t2> * <var:p> & \{ <var:p> = <var:j> \land <var:t1> = <var:j> \land <var:t2> = <var:j> ^ <nat:2> \land <var:t3> = <var:j> ^ <nat:3> \} \\ \{ <var:p> = <var:j> \land <var:t1> = <var:j> \land <var:t2> = <var:j> ^ <nat:2> \land <var:t3> = <var:j> ^ <nat:3> \} & <var:t0> := <nat:2> & \{ <var:p> = <var:j> \land <var:t1> = <var:j> \land <var:t2> = <var:j> ^ <nat:2> \land <var:t3> = <var:j> ^ <nat:3> \land <var:t0> = <nat:2> \} \\ \{ <var:p> = <var:j> \land <var:t1> = <var:j> \land <var:t2> = <var:j> ^ <nat:2> \land <var:t3> = <var:j> ^ <nat:3> \land <var:t0> = <nat:2> \} & <var:t1> := <var:t1> * <nat:3> & \{ <var:p> = <var:j> \land <var:t1> = <nat:3> * <var:j> \land <var:t2> = <var:j> ^ <nat:2> \land <var:t3> = <var:j> ^ <nat:3> \land <var:t0> = <nat:2> \} \\ \{ <var:p> = <var:j> \land <var:t1> = <nat:3> * <var:j> \land <var:t2> = <var:j> ^ <nat:2> \land <var:t3> = <var:j> ^ <nat:3> \land <var:t0> = <nat:2> \} & <var:t2> := <var:t2> * <nat:9> & \{ <var:p> = <var:j> \land <var:t1> = <nat:3> * <var:j> \land <var:t2> = <nat:9> * <var:j> ^ <nat:2> \land <var:t3> = <var:j> ^ <nat:3> \land <var:t0> = <nat:2> \} \\ \{ <var:p> = <var:j> \land <var:t1> = <nat:3> * <var:j> \land <var:t2> = <nat:9> * <var:j> ^ <nat:2> \land <var:t3> = <var:j> ^ <nat:3> \land <var:t0> = <nat:2> \} & <var:t3> := <var:t3> * <nat:2> & \{ <var:p> = <var:j> \land <var:t1> = <nat:3> * <var:j> \land <var:t2> = <nat:9> * <var:j> ^ <nat:2> \land <var:t3> = <nat:2> * <var:j> ^ <nat:3> \land <var:t0> = <nat:2> \} \\ \{ <var:p> = <var:j> \land <var:t1> = <nat:3> * <var:j> \land <var:t2> = <nat:9> * <var:j> ^ <nat:2> \land <var:t3> = <nat:2> * <var:j> ^ <nat:3> \land <var:t0> = <nat:2> \} & <var:s> := <var:t3& \{ <var:p> = <var:j> \land <var:t1> = <nat:3> * <var:j> \land <var:t2> = <nat:9> * <var:j> ^ <nat:2> \land <var:t0> = <nat:2> \land <var:s> = <nat:2> * <var:j> ^ <nat:3> \} \\ \{ <var:p> = <var:j> \land <var:t1> = <nat:3> * <var:j> \land <var:t2> = <nat:9> * <var:j> ^ <nat:2> \land <var:t0> = <nat:2> \land <var:s> = <nat:2> * <var:j> ^ <nat:3> \} & <var:s> := <var:s> + <var:t2& \{ <var:p> = <var:j> \land <var:t1> = <nat:3> * <var:j> \land <var:t0> = <nat:2> \land <var:s> = <nat:2> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> \} \end{tabular} This is deduced using the variable assignmet law defined by standard Hoare reasoning . Further , we have \[ \begin{tabular} {rcl} \{ <var:p> = <var:j> \} & <var:t1> := <var:p> & \{ <var:p> = <var:j> \land <var:t1> = <var:j> \} \end{tabular} Jumping to the subsequent bit of code in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:p> = <var:j> \} & <var:t1> := <var:p> & \{ <var:p> = <var:j> \land <var:t1> = <var:j> \} \end{tabular} This is shown through the variable update law given by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Definition <def:poly> := <var:t1> := <var:p> ; <var:t2> := <var:t1> * <var:p> ; <var:t3> := <var:t2> * <var:p> ; <var:t0> := <nat:2> ; <var:t1> := <var:t1> * <nat:3> ; <var:t2> := <var:t2> * <nat:9> ; <var:t3> := <var:t3> * <nat:2> ; <var:s> := <var:t3> <var:s> := <var:s> + <var:t2> <var:s> := <var:s> + <var:t1> <var:s> := <var:s> + <var:t0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:p> = <var:j> }} <def:poly> {{ <var:s> = <nat:2> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t1> = <var:j> /\ <var:t2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t1> = <var:j> /\ <var:t2> = <var:j> ^ <nat:2> /\ <var:t3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t1> = <var:j> /\ <var:t2> = <var:j> ^ <nat:2> /\ <var:t3> = <var:j> ^ <nat:3> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t1> = <nat:3> * <var:j> /\ <var:t2> = <var:j> ^ <nat:2> /\ <var:t3> = <var:j> ^ <nat:3> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t1> = <nat:3> * <var:j> /\ <var:t2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:t3> = <var:j> ^ <nat:3> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t1> = <nat:3> * <var:j> /\ <var:t2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:t3> = <nat:2> * <var:j> ^ <nat:3> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t1> = <nat:3> * <var:j> /\ <var:t2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:t0> = <nat:2> /\ <var:s> = <nat:2> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t1> = <nat:3> * <var:j> /\ <var:t0> = <nat:2> /\ <var:s> = <nat:2> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:t0> = <nat:2> /\ <var:s> = <nat:2> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:j> /\ <var:s> = <nat:2> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 