\begin{document} \begin{theorem} Define the following set of instructions such that \begin{verbatim} <var:x0> := <nat:1> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:O> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:O> ; <var:x2> := <var:x2> * <var:O> ; <var:Z> := <var:x2> ; <var:Z> := <var:Z> + <var:x1> ; <var:Z> := <var:Z> + <var:x0> \end{verbatim} Allowing it to be that $ <var:O> = <var:c> $ --- letting integers $ <var:c> $ --- ahead of interpreting our list of instructions it holds that we have $ <var:Z> = <nat:4> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for this set of commands is clear using standard Hoare reasoning . Further , we have \[ \begin{tabular} {rcl} \{ <var:O> = <var:c> \} & <var:x0> := <nat:1> & \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \} \\ \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \} & <var:x1> := <nat:2> & \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \} \\ \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \} & <var:x1> := <var:x1> * <var:O> & \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:c> \} \\ \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:c> \} & <var:x2> := <nat:4> & \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:c> \land <var:x2> = <nat:4> \} \\ \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:c> \land <var:x2> = <nat:4> \} & <var:x2> := <var:x2> * <var:O> & \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:c> \land <var:x2> = <nat:4> \cdot <var:c> \} \\ \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:c> \land <var:x2> = <nat:4> \cdot <var:c> \} & <var:x2> := <var:x2> * <var:O> & \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:c> \land <var:x2> = <nat:4> \cdot <var:c> ^ <nat:2> \} \\ \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:c> \land <var:x2> = <nat:4> \cdot <var:c> ^ <nat:2> \} & <var:Z> := <var:x2> & \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \land <var:x1> = <nat:2> \cdot <var:c> \land <var:Z> = <nat:4> \cdot <var:c> ^ <nat:2> \} \end{tabular} This is rigorously given through the variable binding scheme found in typical Hoare logic . Focusing on the proceeding line in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:O> = <var:c> \} & <var:x0> := <nat:1> & \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \} \end{tabular} Immediately after , \[ \begin{tabular} {rcl} \{ <var:O> = <var:c> \} & <var:x0> := <nat:1> & \{ <var:O> = <var:c> \land <var:x0> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:O> = <var:c> }} <var:x0> := <nat:1> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:O> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:O> ; <var:x2> := <var:x2> * <var:O> ; <var:Z> := <var:x2> ; <var:Z> := <var:Z> + <var:x1> ; <var:Z> := <var:Z> + <var:x0> {{ <var:Z> = <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:c> /\ <var:x2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:c> /\ <var:x2> = <nat:4> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:c> /\ <var:x2> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:2> * <var:c> /\ <var:Z> = <nat:4> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:x0> = <nat:1> /\ <var:Z> = <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:c> /\ <var:Z> = <nat:4> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 