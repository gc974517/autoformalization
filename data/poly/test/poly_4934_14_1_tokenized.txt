\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:a> ; <var:e2> := <var:e1> * <var:a> ; <var:e3> := <var:e2> * <var:a> ; <var:e4> := <var:e3> * <var:a> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:2> ; <var:e2> := <var:e2> * <nat:3> ; <var:e3> := <var:e3> * <nat:4> ; <var:e4> := <var:e4> * <nat:3> ; <var:b> := <var:e4> <var:b> := <var:b> + <var:e3> <var:b> := <var:b> + <var:e2> <var:b> := <var:b> + <var:e1> <var:b> := <var:b> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} We define the following code <def:poly> . Allowing that $ <var:a> = <var:f> $ prior to interpreting our series of instructions it holds that we have $ <var:b> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> $ when list of instructions has finished . \end{theorem} \begin{proof} The way to prove correctness for the list of instructions is done with standard Hoare reasoning . Paying attention to the next line seen in our list of instructions , the assignment code assigning $ <var:a> $ toward $ <var:e1>$ . This statement forwards the precondition $ \{ <var:a> = <var:f> \} $ to the condition $ \{ <var:a> = <var:f> \land <var:e1> = <var:f> \} $ . This is rigorously given using the assignment rule defined by typical Hoare reasoning . Moving on to the next step , we have the binding command \verb | <var:e2> := <var:e1> * <var:a> ; | . This moves the condition $ \{ <var:a> = <var:f> \land <var:e1> = <var:f> \} $ as $ \{ <var:a> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \} $ . This is given through the assignment inference rule obtained from typical Hoare reasoning . Going forward , we have the binding command \verb | <var:e3> := <var:e2> * <var:a> ; | . This line takes the precondition $ \{ <var:a> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \} $ as the condition $ \{ <var:a> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \} $ . This is deduced through the assignment rule obtained from usual Hoare reasoning . Observing the upcoming line of code found in our list of commands , we have the variable assignmet line \verb | <var:e4> := <var:e3> * <var:a> ; | . This takes $ \{ <var:a> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \} $ to the postcondition $ \{ <var:a> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e4> = <var:f> ^ <nat:4> \} $ . Moving forward , we see the statement \verb | <var:e0> := <nat:2> ; | . This advances $ \{ <var:a> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e4> = <var:f> ^ <nat:4> \} $ into the postcondition $ \{ <var:a> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e4> = <var:f> ^ <nat:4> \land <var:e0> = <nat:2> \} $ . Jumping to the upcoming line seen in the program , we see the variable assignmet code \verb | <var:e1> := <var:e1> * <nat:2> ; | . This code redefines the condition $ \{ <var:a> = <var:f> \land <var:e1> = <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e4> = <var:f> ^ <nat:4> \land <var:e0> = <nat:2> \} $ into $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e4> = <var:f> ^ <nat:4> \land <var:e0> = <nat:2> \} $ . Shifting focus toward the proceeding line of code contained in the set of instructions , we have the variable assignmet code \verb | <var:e2> := <var:e2> * <nat:3> ; | . This code redefines the condition $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e2> = <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e4> = <var:f> ^ <nat:4> \land <var:e0> = <nat:2> \} $ as $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e2> = <nat:3> * <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e4> = <var:f> ^ <nat:4> \land <var:e0> = <nat:2> \} $ . Shifting focus toward the subsequent step found in our set of instructions , we have the environment update code assigning $ <var:e3> * <nat:4> $ as $ <var:e3>$ . This statement takes $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e2> = <nat:3> * <var:f> ^ <nat:2> \land <var:e3> = <var:f> ^ <nat:3> \land <var:e4> = <var:f> ^ <nat:4> \land <var:e0> = <nat:2> \} $ as the postcondition $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e2> = <nat:3> * <var:f> ^ <nat:2> \land <var:e3> = <nat:4> * <var:f> ^ <nat:3> \land <var:e4> = <var:f> ^ <nat:4> \land <var:e0> = <nat:2> \} $ . This is deduced through the assignment law defined by Hoare techniques . Taking a look at the proceeding step in the list of instructions , the environment update code assigning $ <var:e4> * <nat:3> $ to $ <var:e4>$ . This code redefines the precondition $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e2> = <nat:3> * <var:f> ^ <nat:2> \land <var:e3> = <nat:4> * <var:f> ^ <nat:3> \land <var:e4> = <var:f> ^ <nat:4> \land <var:e0> = <nat:2> \} $ to the postcondition $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e2> = <nat:3> * <var:f> ^ <nat:2> \land <var:e3> = <nat:4> * <var:f> ^ <nat:3> \land <var:e4> = <nat:3> * <var:f> ^ <nat:4> \land <var:e0> = <nat:2> \} $ . This is guaranteed with the assignment rule found in Hoare logic . Advancing to the upcoming step found in the program , we have the variable assignmet command \verb | <var:b> := <var:e4> | . This takes $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e2> = <nat:3> * <var:f> ^ <nat:2> \land <var:e3> = <nat:4> * <var:f> ^ <nat:3> \land <var:e4> = <nat:3> * <var:f> ^ <nat:4> \land <var:e0> = <nat:2> \} $ into the condition $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e2> = <nat:3> * <var:f> ^ <nat:2> \land <var:e3> = <nat:4> * <var:f> ^ <nat:3> \land <var:e0> = <nat:2> \land <var:b> = <nat:3> * <var:f> ^ <nat:4> \} $ . Moving forward to the next step , we see the assignment command \verb | <var:b> := <var:b> + <var:e3> | . This forwards $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e2> = <nat:3> * <var:f> ^ <nat:2> \land <var:e3> = <nat:4> * <var:f> ^ <nat:3> \land <var:e0> = <nat:2> \land <var:b> = <nat:3> * <var:f> ^ <nat:4> \} $ into the condition $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e2> = <nat:3> * <var:f> ^ <nat:2> \land <var:e0> = <nat:2> \land <var:b> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> \} $ . This is ensured through the assignment law given in standard Hoare logic . Shifting focus toward the proceeding bit of code found in the list of commands , we see the binding statement \verb | <var:b> := <var:b> + <var:e2> | . This advances the condition $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e2> = <nat:3> * <var:f> ^ <nat:2> \land <var:e0> = <nat:2> \land <var:b> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> \} $ as the postcondition $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e0> = <nat:2> \land <var:b> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> \} $ . Advancing to the following bit of code in our set of commands , we see the binding line \verb | <var:b> := <var:b> + <var:e1> | . This transfers the precondition $ \{ <var:a> = <var:f> \land <var:e1> = <nat:2> * <var:f> \land <var:e0> = <nat:2> \land <var:b> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> \} $ to $ \{ <var:a> = <var:f> \land <var:e0> = <nat:2> \land <var:b> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> \} $ . Looking at the upcoming command found in our series of instructions , we have the binding line \verb | <var:b> := <var:b> + <var:e0> | . This command takes the precondition $ \{ <var:a> = <var:f> \land <var:e0> = <nat:2> \land <var:b> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> \} $ into the condition $ \{ <var:a> = <var:f> \land <var:b> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> \} $ . This is ensured by the assignment inference rule given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <var:e4> : string := " <var:e4> " . Definition <def:poly> := <var:e1> := <var:a> ; <var:e2> := <var:e1> * <var:a> ; <var:e3> := <var:e2> * <var:a> ; <var:e4> := <var:e3> * <var:a> ; <var:e0> := <nat:2> ; <var:e1> := <var:e1> * <nat:2> ; <var:e2> := <var:e2> * <nat:3> ; <var:e3> := <var:e3> * <nat:4> ; <var:e4> := <var:e4> * <nat:3> ; <var:b> := <var:e4> <var:b> := <var:b> + <var:e3> <var:b> := <var:b> + <var:e2> <var:b> := <var:b> + <var:e1> <var:b> := <var:b> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:a> = <var:f> }} <def:poly> {{ <var:b> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:e1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:e1> = <var:f> /\ <var:e2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:e1> = <var:f> /\ <var:e2> = <var:f> ^ <nat:2> /\ <var:e3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:e1> = <var:f> /\ <var:e2> = <var:f> ^ <nat:2> /\ <var:e3> = <var:f> ^ <nat:3> /\ <var:e4> = <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:e1> = <var:f> /\ <var:e2> = <var:f> ^ <nat:2> /\ <var:e3> = <var:f> ^ <nat:3> /\ <var:e4> = <var:f> ^ <nat:4> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:e1> = <nat:2> * <var:f> /\ <var:e2> = <var:f> ^ <nat:2> /\ <var:e3> = <var:f> ^ <nat:3> /\ <var:e4> = <var:f> ^ <nat:4> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:e1> = <nat:2> * <var:f> /\ <var:e2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:e3> = <var:f> ^ <nat:3> /\ <var:e4> = <var:f> ^ <nat:4> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:e1> = <nat:2> * <var:f> /\ <var:e2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:e3> = <nat:4> * <var:f> ^ <nat:3> /\ <var:e4> = <var:f> ^ <nat:4> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:e1> = <nat:2> * <var:f> /\ <var:e2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:e3> = <nat:4> * <var:f> ^ <nat:3> /\ <var:e4> = <nat:3> * <var:f> ^ <nat:4> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:e1> = <nat:2> * <var:f> /\ <var:e2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:e3> = <nat:4> * <var:f> ^ <nat:3> /\ <var:e0> = <nat:2> /\ <var:b> = <nat:3> * <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:e1> = <nat:2> * <var:f> /\ <var:e2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:e0> = <nat:2> /\ <var:b> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:e1> = <nat:2> * <var:f> /\ <var:e0> = <nat:2> /\ <var:b> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:e0> = <nat:2> /\ <var:b> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:f> /\ <var:b> = <nat:3> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:2> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 