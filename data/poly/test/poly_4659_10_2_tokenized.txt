\begin{document} \begin{theorem} Consider a list of commands as follows \begin{verbatim} <var:j> := <nat:1> ; <var:j> := <nat:4> + <var:j> * <var:r> ; <var:j> := <nat:3> + <var:j> * <var:r> ; <var:j> := <var:j> * <var:r> ; <var:j> := <nat:1> + <var:j> * <var:r> ; <var:j> := <nat:3> + <var:j> * <var:r> ; <var:j> := <nat:1> + <var:j> * <var:r> ; <var:j> := <var:j> * <var:r> ; <var:j> := <nat:4> + <var:j> * <var:r> ; <var:j> := <nat:3> + <var:j> * <var:r> \end{verbatim} Given it to hold that $ <var:r> = <var:k> $ before executing our segment of code , it follows that $ <var:j> = <nat:1> * <var:k> ^ <nat:9> + <nat:4> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:4> * <var:k> + <nat:3> $ after code segment is done . \end{theorem} \begin{proof} Applying Hoare techniques gives us : \begin{eqnarray} \{ <var:r> = <var:k> \} \\ <var:j> := <nat:1> ; \\ \{ <var:r> = <var:k> \land <var:j> = <nat:1> \} \\ <var:j> := <nat:4> + <var:j> * <var:r> ; \\ \{ <var:r> = <var:k> \land <var:j> = <nat:1> \cdot <var:k> + <nat:4> \} \\ <var:j> := <nat:3> + <var:j> * <var:r> ; \\ \{ <var:r> = <var:k> \land <var:j> = <nat:1> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:3> \} \\ <var:j> := <var:j> * <var:r> ; \\ \{ <var:r> = <var:k> \land <var:j> = <nat:1> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + \} \\ <var:j> := <nat:1> + <var:j> * <var:r> ; \\ \{ <var:r> = <var:k> \land <var:j> = <nat:1> \cdot <var:k> ^ <nat:4> + <nat:4> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> ^ <nat:2> + <nat:1> \} \\ <var:j> := <nat:3> + <var:j> * <var:r> ; \\ \{ <var:r> = <var:k> \land <var:j> = <nat:1> \cdot <var:k> ^ <nat:5> + <nat:4> \cdot <var:k> ^ <nat:4> + <nat:3> \cdot <var:k> ^ <nat:3> + <nat:1> \cdot <var:k> + <nat:3> \} \\ <var:j> := <nat:1> + <var:j> * <var:r> ; \\ \{ <var:r> = <var:k> \land <var:j> = <nat:1> \cdot <var:k> ^ <nat:6> + <nat:4> \cdot <var:k> ^ <nat:5> + <nat:3> \cdot <var:k> ^ <nat:4> + <nat:1> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:1> \} \\ <var:j> := <var:j> * <var:r> ; \\ \{ <var:r> = <var:k> \land <var:j> = <nat:1> \cdot <var:k> ^ <nat:7> + <nat:4> \cdot <var:k> ^ <nat:6> + <nat:3> \cdot <var:k> ^ <nat:5> + <nat:1> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> ^ <nat:2> + <nat:1> \cdot <var:k> + \} \\ <var:j> := <nat:4> + <var:j> * <var:r> ; \\ \{ <var:r> = <var:k> \land <var:j> = <nat:1> \cdot <var:k> ^ <nat:8> + <nat:4> \cdot <var:k> ^ <nat:7> + <nat:3> \cdot <var:k> ^ <nat:6> + <nat:1> \cdot <var:k> ^ <nat:4> + <nat:3> \cdot <var:k> ^ <nat:3> + <nat:1> \cdot <var:k> ^ <nat:2> + <nat:4> \} \\ <var:j> := <nat:3> + <var:j> * <var:r> \\ \{ <var:r> = <var:k> \land <var:j> = <nat:1> \cdot <var:k> ^ <nat:9> + <nat:4> \cdot <var:k> ^ <nat:8> + <nat:3> \cdot <var:k> ^ <nat:7> + <nat:1> \cdot <var:k> ^ <nat:5> + <nat:3> \cdot <var:k> ^ <nat:4> + <nat:1> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> + <nat:3> \} \end{eqnarray} As a consequence , this series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:r> = <var:k> }} <var:j> := <nat:1> ; <var:j> := <nat:4> + <var:j> * <var:r> ; <var:j> := <nat:3> + <var:j> * <var:r> ; <var:j> := <var:j> * <var:r> ; <var:j> := <nat:1> + <var:j> * <var:r> ; <var:j> := <nat:3> + <var:j> * <var:r> ; <var:j> := <nat:1> + <var:j> * <var:r> ; <var:j> := <var:j> * <var:r> ; <var:j> := <nat:4> + <var:j> * <var:r> ; <var:j> := <nat:3> + <var:j> * <var:r> {{ <var:j> = <nat:1> * <var:k> ^ <nat:9> + <nat:4> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:4> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:j> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:j> = <nat:1> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:j> = <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:j> = <nat:1> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:j> = <nat:1> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:j> = <nat:1> * <var:k> ^ <nat:5> + <nat:4> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:j> = <nat:1> * <var:k> ^ <nat:6> + <nat:4> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:j> = <nat:1> * <var:k> ^ <nat:7> + <nat:4> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:j> = <nat:1> * <var:k> ^ <nat:8> + <nat:4> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:j> = <nat:1> * <var:k> ^ <nat:9> + <nat:4> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 