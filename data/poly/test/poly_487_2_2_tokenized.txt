\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:G> := <nat:2> ; <var:G> := <nat:2> + <var:G> * <var:x> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> . Assume ( given all $ <var:m> $ ) $ <var:x> = <var:m> $ prior to running this program , it follows that we have $ <var:G> = <nat:2> * <var:m> + <nat:2> $ . \end{theorem} \begin{proof} Applying usual Hoare logic results in : \begin{eqnarray} \{ <var:x> = <var:m> \} \\ <var:G> := <nat:2> ; \\ \{ <var:x> = <var:m> \land <var:G> = <nat:2> \} \\ <var:G> := <nat:2> + <var:G> * <var:x> \\ \{ <var:x> = <var:m> \land <var:G> = <nat:2> \cdot <var:m> + <nat:2> \} \end{eqnarray} Thus , this segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:G> := <nat:2> ; <var:G> := <nat:2> + <var:G> * <var:x> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:x> = <var:m> }} <def:poly> {{ <var:G> = <nat:2> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:G> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:m> /\ <var:G> = <nat:2> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 