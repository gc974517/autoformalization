\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:2> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:b> ; <var:x3> := <nat:2> ; <var:x3> := <var:x3> * <var:b> ; <var:x3> := <var:x3> * <var:b> ; <var:x3> := <var:x3> * <var:b> ; <var:u> := <var:x3> ; <var:u> := <var:u> + <var:x1> ; <var:u> := <var:u> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> . Assuming ( with some natural numbers $ <var:H> $ ) that we have $ <var:b> = <var:H> $ prior to the evaluation of this set of instructions , it follows that we see $ <var:u> = <nat:2> \times <var:H> ^ <nat:3> + <nat:7> \times <var:H> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code segment is shown by Hoare logic . Considering the proceeding lines of codein our set of commands , \[ \begin{tabular} {rcl} \{ <var:b> = <var:H> \} & <var:x0> := <nat:2> & \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \} \\ \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \} & <var:x1> := <nat:7> & \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> \} \\ \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> \} & <var:x1> := <var:x1> * <var:b> & \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> * <var:H> \} \\ \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> * <var:H> \} & <var:x3> := <nat:2> & \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> * <var:H> \land <var:x3> = <nat:2> \} \\ \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> * <var:H> \land <var:x3> = <nat:2> \} & <var:x3> := <var:x3> * <var:b> & \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> * <var:H> \land <var:x3> = <nat:2> * <var:H> \} \\ \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> * <var:H> \land <var:x3> = <nat:2> * <var:H> \} & <var:x3> := <var:x3> * <var:b> & \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> * <var:H> \land <var:x3> = <nat:2> * <var:H> ^ <nat:2> \} \\ \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> * <var:H> \land <var:x3> = <nat:2> * <var:H> ^ <nat:2> \} & <var:x3> := <var:x3> * <var:b> & \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> * <var:H> \land <var:x3> = <nat:2> * <var:H> ^ <nat:3> \} \\ \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> * <var:H> \land <var:x3> = <nat:2> * <var:H> ^ <nat:3> \} & <var:u> := <var:x3> & \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> * <var:H> \land <var:u> = <nat:2> * <var:H> ^ <nat:3> \} \\ \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:x1> = <nat:7> * <var:H> \land <var:u> = <nat:2> * <var:H> ^ <nat:3> \} & <var:u> := <var:u> + <var:x1> & \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \land <var:u> = <nat:2> * <var:H> ^ <nat:3> + <nat:7> * <var:H> \} \end{tabular} This is shown by the variable binding rule given by Hoare logic . Observing the proceeding line of code found in the list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:b> = <var:H> \} & <var:x0> := <nat:2> & \{ <var:b> = <var:H> \land <var:x0> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x0> := <nat:2> ; <var:x1> := <nat:7> ; <var:x1> := <var:x1> * <var:b> ; <var:x3> := <nat:2> ; <var:x3> := <var:x3> * <var:b> ; <var:x3> := <var:x3> * <var:b> ; <var:x3> := <var:x3> * <var:b> ; <var:u> := <var:x3> ; <var:u> := <var:u> + <var:x1> ; <var:u> := <var:u> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:b> = <var:H> }} <def:poly> {{ <var:u> = <nat:2> * <var:H> ^ <nat:3> + <nat:7> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:x0> = <nat:2> /\ <var:x1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:x0> = <nat:2> /\ <var:x1> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:x0> = <nat:2> /\ <var:x1> = <nat:7> * <var:H> /\ <var:x3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:x0> = <nat:2> /\ <var:x1> = <nat:7> * <var:H> /\ <var:x3> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:x0> = <nat:2> /\ <var:x1> = <nat:7> * <var:H> /\ <var:x3> = <nat:2> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:x0> = <nat:2> /\ <var:x1> = <nat:7> * <var:H> /\ <var:x3> = <nat:2> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:x0> = <nat:2> /\ <var:x1> = <nat:7> * <var:H> /\ <var:u> = <nat:2> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:x0> = <nat:2> /\ <var:u> = <nat:2> * <var:H> ^ <nat:3> + <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:H> /\ <var:u> = <nat:2> * <var:H> ^ <nat:3> + <nat:7> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 