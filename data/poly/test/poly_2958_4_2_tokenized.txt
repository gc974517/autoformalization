\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:t> := <nat:1> ; <var:t> := <nat:3> + <var:t> * <var:p> ; <var:t> := <nat:2> + <var:t> * <var:p> ; <var:t> := <nat:4> + <var:t> * <var:p> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> . Assuming it to hold that $ <var:p> = <var:i> $ ahead of the evaluation of this series of commands it follows that we see $ <var:t> = <nat:1> \times <var:i> ^ <nat:3> + <nat:3> \times <var:i> ^ <nat:2> + <nat:2> \times <var:i> + <nat:4> $ when program executes . \end{theorem} \begin{proof} Proving correctness for this series of instructions is clear with usual Hoare reasoning . Taking another step toward the upcoming bits of codeseen in our list of commands , we have \begin{eqnarray} \{ <var:p> = <var:i> \} \, <var:t> := <nat:1> \, \{ <var:p> = <var:i> \land <var:t> = <nat:1> \} \\ \{ <var:p> = <var:i> \land <var:t> = <nat:1> \} \, <var:t> := <nat:3> + <var:t> * <var:p> \, \{ <var:p> = <var:i> \land <var:t> = <nat:1> * <var:i> + <nat:3> \} \\ \{ <var:p> = <var:i> \land <var:t> = <nat:1> * <var:i> + <nat:3> \} \, <var:t> := <nat:2> + <var:t> * <var:p> \, \{ <var:p> = <var:i> \land <var:t> = <nat:1> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:2> \} \\ \{ <var:p> = <var:i> \land <var:t> = <nat:1> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:2> \} \, <var:t> := <nat:4> + <var:t> * <var:p\, \{ <var:p> = <var:i> \land <var:t> = <nat:1> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:1> ; <var:t> := <nat:3> + <var:t> * <var:p> ; <var:t> := <nat:2> + <var:t> * <var:p> ; <var:t> := <nat:4> + <var:t> * <var:p> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:p> = <var:i> }} <def:poly> {{ <var:t> = <nat:1> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:t> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:t> = <nat:1> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:t> = <nat:1> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:i> /\ <var:t> = <nat:1> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 