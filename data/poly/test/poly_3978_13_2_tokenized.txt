\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} : \begin{verbatim} <var:Q> := <nat:2> ; <var:Q> := <nat:3> + <var:Q> * <var:N> ; <var:Q> := <nat:2> + <var:Q> * <var:N> ; <var:Q> := <nat:2> + <var:Q> * <var:N> ; <var:Q> := <nat:1> + <var:Q> * <var:N> ; <var:Q> := <var:Q> * <var:N> ; <var:Q> := <var:Q> * <var:N> ; <var:Q> := <nat:1> + <var:Q> * <var:N> ; <var:Q> := <nat:1> + <var:Q> * <var:N> ; <var:Q> := <var:Q> * <var:N> ; <var:Q> := <var:Q> * <var:N> ; <var:Q> := <var:Q> * <var:N> ; <var:Q> := <nat:1> + <var:Q> * <var:N> \end{verbatim} Assume that we have $ <var:N> = <var:k> $ ahead of evaluating our set of commands , it holds that we have $ <var:Q> = <nat:2> \times <var:k> ^ <nat:12> + <nat:3> \times <var:k> ^ <nat:11> + <nat:2> \times <var:k> ^ <nat:10> + <nat:2> \times <var:k> ^ <nat:9> + <nat:1> \times <var:k> ^ <nat:8> + <nat:1> \times <var:k> ^ <nat:5> + <nat:1> \times <var:k> ^ <nat:4> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for the program is done using Hoare logic . Moving forward to the next step , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:k> \} & <var:Q> := <nat:2> & \{ <var:N> = <var:k> \land <var:Q> = <nat:2> \} \\ \{ <var:N> = <var:k> \land <var:Q> = <nat:2> \} & <var:Q> := <nat:3> + <var:Q> * <var:N> & \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> + <nat:3> \} \\ \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> + <nat:3> \} & <var:Q> := <nat:2> + <var:Q> * <var:N> & \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:2> \} \\ \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:2> \} & <var:Q> := <nat:2> + <var:Q> * <var:N> & \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:2> \} \end{tabular} This is known to be sound with the assignment inference rule of Hoare techniques . Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:N> = <var:k> \} & <var:Q> := <nat:2> & \{ <var:N> = <var:k> \land <var:Q> = <nat:2> \} \\ \{ <var:N> = <var:k> \land <var:Q> = <nat:2> \} & <var:Q> := <nat:3> + <var:Q> * <var:N> & \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> + <nat:3> \} \\ \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> + <nat:3> \} & <var:Q> := <nat:2> + <var:Q> * <var:N> & \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:2> \} \\ \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:2> \} & <var:Q> := <nat:2> + <var:Q> * <var:N> & \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:2> \} \\ \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:2> \} & <var:Q> := <nat:1> + <var:Q> * <var:N> & \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> \} \\ \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> \} & <var:Q> := <var:Q> * <var:N> & \{ <var:N> = <var:k> \land <var:Q> = <nat:2> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + \} \end{tabular} Advancing on , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:k> \} & <var:Q> := <nat:2> & \{ <var:N> = <var:k> \land <var:Q> = <nat:2> \} \end{tabular} This is given through the assignment rule defined in standard Hoare logic . After , we have \[ \begin{tabular} {rcl} \{ <var:N> = <var:k> \} & <var:Q> := <nat:2> & \{ <var:N> = <var:k> \land <var:Q> = <nat:2> \} \end{tabular} This is guaranteed through the variable assignmet law defined by usual Hoare techniques . Taking a look at the proceeding line of code in our program , \[ \begin{tabular} {rcl} \{ <var:N> = <var:k> \} & <var:Q> := <nat:2> & \{ <var:N> = <var:k> \land <var:Q> = <nat:2> \} \end{tabular} This is shown to be logically sound with the variable update law given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:N> = <var:k> }} <var:Q> := <nat:2> ; <var:Q> := <nat:3> + <var:Q> * <var:N> ; <var:Q> := <nat:2> + <var:Q> * <var:N> ; <var:Q> := <nat:2> + <var:Q> * <var:N> ; <var:Q> := <nat:1> + <var:Q> * <var:N> ; <var:Q> := <var:Q> * <var:N> ; <var:Q> := <var:Q> * <var:N> ; <var:Q> := <nat:1> + <var:Q> * <var:N> ; <var:Q> := <nat:1> + <var:Q> * <var:N> ; <var:Q> := <var:Q> * <var:N> ; <var:Q> := <var:Q> * <var:N> ; <var:Q> := <var:Q> * <var:N> ; <var:Q> := <nat:1> + <var:Q> * <var:N> {{ <var:Q> = <nat:2> * <var:k> ^ <nat:12> + <nat:3> * <var:k> ^ <nat:11> + <nat:2> * <var:k> ^ <nat:10> + <nat:2> * <var:k> ^ <nat:9> + <nat:1> * <var:k> ^ <nat:8> + <nat:1> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:2> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:2> * <var:k> ^ <nat:5> + <nat:2> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:2> * <var:k> ^ <nat:6> + <nat:2> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:1> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:9> + <nat:3> * <var:k> ^ <nat:8> + <nat:2> * <var:k> ^ <nat:7> + <nat:2> * <var:k> ^ <nat:6> + <nat:1> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:10> + <nat:3> * <var:k> ^ <nat:9> + <nat:2> * <var:k> ^ <nat:8> + <nat:2> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:6> + <nat:1> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:11> + <nat:3> * <var:k> ^ <nat:10> + <nat:2> * <var:k> ^ <nat:9> + <nat:2> * <var:k> ^ <nat:8> + <nat:1> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:k> /\ <var:Q> = <nat:2> * <var:k> ^ <nat:12> + <nat:3> * <var:k> ^ <nat:11> + <nat:2> * <var:k> ^ <nat:10> + <nat:2> * <var:k> ^ <nat:9> + <nat:1> * <var:k> ^ <nat:8> + <nat:1> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 