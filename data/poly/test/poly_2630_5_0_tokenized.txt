\begin{document} \begin{theorem} Take a series of commands as follows \begin{verbatim} <var:g0> := <nat:7> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:z> ; <var:l> := <var:g1> ; <var:l> := <var:l> + <var:g0> \end{verbatim} Allowing it to hold that $ <var:z> = <var:o> $ before running our list of commands then we see $ <var:l> = <nat:2> \cdot <var:o> + <nat:7> $ when program has terminated . \end{theorem} \begin{proof} Using standard Hoare logic yields : \begin{eqnarray} \{ <var:z> = <var:o> \} \\ <var:g0> := <nat:7> ; \\ \{ <var:z> = <var:o> \land <var:g0> = <nat:7> \} \\ <var:g1> := <nat:2> ; \\ \{ <var:z> = <var:o> \land <var:g0> = <nat:7> \land <var:g1> = <nat:2> \} \\ <var:g1> := <var:g1> * <var:z> ; \\ \{ <var:z> = <var:o> \land <var:g0> = <nat:7> \land <var:g1> = <nat:2> \cdot <var:o> \} \\ <var:l> := <var:g1> ; \\ \{ <var:z> = <var:o> \land <var:g0> = <nat:7> \land <var:l> = <nat:2> \cdot <var:o> \} \\ <var:l> := <var:l> + <var:g0> \\ \{ <var:z> = <var:o> \land <var:l> = <nat:2> \cdot <var:o> + <nat:7> \} \end{eqnarray} Considering the above , this code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:z> = <var:o> }} <var:g0> := <nat:7> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:z> ; <var:l> := <var:g1> ; <var:l> := <var:l> + <var:g0> {{ <var:l> = <nat:2> * <var:o> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:g0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:g0> = <nat:7> /\ <var:g1> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:g0> = <nat:7> /\ <var:l> = <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:o> /\ <var:l> = <nat:2> * <var:o> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 