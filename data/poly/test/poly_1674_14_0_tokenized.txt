\begin{document} \begin{theorem} Consider the following list of instructions as follows \begin{verbatim} <var:K0> := <nat:2> ; <var:K1> := <nat:7> ; <var:K1> := <var:K1> * <var:m> ; <var:K2> := <nat:4> ; <var:K2> := <var:K2> * <var:m> ; <var:K2> := <var:K2> * <var:m> ; <var:K3> := <nat:7> ; <var:K3> := <var:K3> * <var:m> ; <var:K3> := <var:K3> * <var:m> ; <var:K3> := <var:K3> * <var:m> ; <var:L> := <var:K3> ; <var:L> := <var:L> + <var:K2> ; <var:L> := <var:L> + <var:K1> ; <var:L> := <var:L> + <var:K0> \end{verbatim} Assuming that $ <var:m> = <var:g> $ prior to the evaluation of the segment of code it must be that we have $ <var:L> = <nat:7> \cdot <var:g> ^ <nat:3> + <nat:4> \cdot <var:g> ^ <nat:2> + <nat:7> \cdot <var:g> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning gives : \begin{eqnarray} \{ <var:m> = <var:g> \} \\ <var:K0> := <nat:2> ; \\ \{ <var:m> = <var:g> \land <var:K0> = <nat:2> \} \\ <var:K1> := <nat:7> ; \\ \{ <var:m> = <var:g> \land <var:K0> = <nat:2> \land <var:K1> = <nat:7> \} \\ <var:K1> := <var:K1> * <var:m> ; \\ \{ <var:m> = <var:g> \land <var:K0> = <nat:2> \land <var:K1> = <nat:7> * <var:g> \} \\ <var:K2> := <nat:4> ; \\ \{ <var:m> = <var:g> \land <var:K0> = <nat:2> \land <var:K1> = <nat:7> * <var:g> \land <var:K2> = <nat:4> \} \\ <var:K2> := <var:K2> * <var:m> ; \\ \{ <var:m> = <var:g> \land <var:K0> = <nat:2> \land <var:K1> = <nat:7> * <var:g> \land <var:K2> = <nat:4> * <var:g> \} \\ <var:K2> := <var:K2> * <var:m> ; \\ \{ <var:m> = <var:g> \land <var:K0> = <nat:2> \land <var:K1> = <nat:7> * <var:g> \land <var:K2> = <nat:4> * <var:g> ^ <nat:2> \} \\ <var:K3> := <nat:7> ; \\ \{ <var:m> = <var:g> \land <var:K0> = <nat:2> \land <var:K1> = <nat:7> * <var:g> \land <var:K2> = <nat:4> * <var:g> ^ <nat:2> \land <var:K3> = <nat:7> \} \\ <var:K3> := <var:K3> * <var:m> ; \\ \{ <var:m> = <var:g> \land <var:K0> = <nat:2> \land <var:K1> = <nat:7> * <var:g> \land <var:K2> = <nat:4> * <var:g> ^ <nat:2> \land <var:K3> = <nat:7> * <var:g> \} \\ <var:K3> := <var:K3> * <var:m> ; \\ \{ <var:m> = <var:g> \land <var:K0> = <nat:2> \land <var:K1> = <nat:7> * <var:g> \land <var:K2> = <nat:4> * <var:g> ^ <nat:2> \land <var:K3> = <nat:7> * <var:g> ^ <nat:2> \} \\ <var:K3> := <var:K3> * <var:m> ; \\ \{ <var:m> = <var:g> \land <var:K0> = <nat:2> \land <var:K1> = <nat:7> * <var:g> \land <var:K2> = <nat:4> * <var:g> ^ <nat:2> \land <var:K3> = <nat:7> * <var:g> ^ <nat:3> \} \\ <var:L> := <var:K3> ; \\ \{ <var:m> = <var:g> \land <var:K0> = <nat:2> \land <var:K1> = <nat:7> * <var:g> \land <var:K2> = <nat:4> * <var:g> ^ <nat:2> \land <var:L> = <nat:7> * <var:g> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:K2> ; \\ \{ <var:m> = <var:g> \land <var:K0> = <nat:2> \land <var:K1> = <nat:7> * <var:g> \land <var:L> = <nat:7> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:K1> ; \\ \{ <var:m> = <var:g> \land <var:K0> = <nat:2> \land <var:L> = <nat:7> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:7> * <var:g> \} \\ <var:L> := <var:L> + <var:K0> \\ \{ <var:m> = <var:g> \land <var:L> = <nat:7> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:2> \} \end{eqnarray} Given the preceding argument , our series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:m> = <var:g> }} <var:K0> := <nat:2> ; <var:K1> := <nat:7> ; <var:K1> := <var:K1> * <var:m> ; <var:K2> := <nat:4> ; <var:K2> := <var:K2> * <var:m> ; <var:K2> := <var:K2> * <var:m> ; <var:K3> := <nat:7> ; <var:K3> := <var:K3> * <var:m> ; <var:K3> := <var:K3> * <var:m> ; <var:K3> := <var:K3> * <var:m> ; <var:L> := <var:K3> ; <var:L> := <var:L> + <var:K2> ; <var:L> := <var:L> + <var:K1> ; <var:L> := <var:L> + <var:K0> {{ <var:L> = <nat:7> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:7> * <var:g> /\ <var:K2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:7> * <var:g> /\ <var:K2> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:7> * <var:g> /\ <var:K2> = <nat:4> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:7> * <var:g> /\ <var:K2> = <nat:4> * <var:g> ^ <nat:2> /\ <var:K3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:7> * <var:g> /\ <var:K2> = <nat:4> * <var:g> ^ <nat:2> /\ <var:K3> = <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:7> * <var:g> /\ <var:K2> = <nat:4> * <var:g> ^ <nat:2> /\ <var:K3> = <nat:7> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:7> * <var:g> /\ <var:K2> = <nat:4> * <var:g> ^ <nat:2> /\ <var:K3> = <nat:7> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:7> * <var:g> /\ <var:K2> = <nat:4> * <var:g> ^ <nat:2> /\ <var:L> = <nat:7> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:7> * <var:g> /\ <var:L> = <nat:7> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:K0> = <nat:2> /\ <var:L> = <nat:7> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:7> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:g> /\ <var:L> = <nat:7> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:7> * <var:g> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 