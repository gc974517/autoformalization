\begin{document} \begin{theorem} We define the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:w> := <nat:2> ; <var:w> := <var:w> * <var:i> ; <var:w> := <nat:4> + <var:w> * <var:i> ; <var:w> := <nat:4> + <var:w> * <var:i> ; <var:w> := <var:w> * <var:i> ; <var:w> := <nat:3> + <var:w> * <var:i> ; <var:w> := <nat:3> + <var:w> * <var:i> ; <var:w> := <nat:3> + <var:w> * <var:i> ; <var:w> := <nat:3> + <var:w> * <var:i> ; <var:w> := <nat:1> + <var:w> * <var:i> ; <var:w> := <nat:2> + <var:w> * <var:i> \end{verbatim} Given , for $ <var:T> $ , $ <var:i> = <var:T> $ before the evaluation of our segment of code it must be that $ <var:w> = <nat:2> \cdot <var:T> ^ <nat:10> + <nat:4> \cdot <var:T> ^ <nat:8> + <nat:4> \cdot <var:T> ^ <nat:7> + <nat:3> \cdot <var:T> ^ <nat:5> + <nat:3> \cdot <var:T> ^ <nat:4> + <nat:3> \cdot <var:T> ^ <nat:3> + <nat:3> \cdot <var:T> ^ <nat:2> + <nat:1> \cdot <var:T> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for our set of instructions can be demonstrated by standard Hoare techniques . Moving onward , \[ \begin{tabular} {rcl} \{ <var:i> = <var:T> \} & <var:w> := <nat:2> & \{ <var:i> = <var:T> \land <var:w> = <nat:2> \} \\ \{ <var:i> = <var:T> \land <var:w> = <nat:2> \} & <var:w> := <var:w> * <var:i> & \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> + \} \\ \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> + \} & <var:w> := <nat:4> + <var:w> * <var:i> & \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> ^ <nat:2> + <nat:4> \} \\ \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> ^ <nat:2> + <nat:4> \} & <var:w> := <nat:4> + <var:w> * <var:i> & \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:4> \} \\ \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:4> \} & <var:w> := <var:w> * <var:i> & \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + \} \\ \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + \} & <var:w> := <nat:3> + <var:w> * <var:i> & \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> \} \\ \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> \} & <var:w> := <nat:3> + <var:w> * <var:i> & \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> + <nat:3> \} \\ \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> + <nat:3> \} & <var:w> := <nat:3> + <var:w> * <var:i> & \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> ^ <nat:7> + <nat:4> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:3> \} \\ \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> ^ <nat:7> + <nat:4> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:3> \} & <var:w> := <nat:3> + <var:w> * <var:i> & \{ <var:i> = <var:T> \land <var:w> = <nat:2> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:3> \} \end{tabular} This is shown to be logically sound by the scheme given in Hoare reasoning . Going forward , we have \[ \begin{tabular} {rcl} \{ <var:i> = <var:T> \} & <var:w> := <nat:2> & \{ <var:i> = <var:T> \land <var:w> = <nat:2> \} \end{tabular} This is shown by the variable assignmet law in usual Hoare techniques . Going forward , we have \[ \begin{tabular} {rcl} \{ <var:i> = <var:T> \} & <var:w> := <nat:2> & \{ <var:i> = <var:T> \land <var:w> = <nat:2> \} \end{tabular} This is ensured using the environment update law defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:i> = <var:T> }} <var:w> := <nat:2> ; <var:w> := <var:w> * <var:i> ; <var:w> := <nat:4> + <var:w> * <var:i> ; <var:w> := <nat:4> + <var:w> * <var:i> ; <var:w> := <var:w> * <var:i> ; <var:w> := <nat:3> + <var:w> * <var:i> ; <var:w> := <nat:3> + <var:w> * <var:i> ; <var:w> := <nat:3> + <var:w> * <var:i> ; <var:w> := <nat:3> + <var:w> * <var:i> ; <var:w> := <nat:1> + <var:w> * <var:i> ; <var:w> := <nat:2> + <var:w> * <var:i> {{ <var:w> = <nat:2> * <var:T> ^ <nat:10> + <nat:4> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:7> + <nat:3> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:w> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:w> = <nat:2> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:w> = <nat:2> * <var:T> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:w> = <nat:2> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:w> = <nat:2> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:w> = <nat:2> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:w> = <nat:2> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:w> = <nat:2> * <var:T> ^ <nat:7> + <nat:4> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:w> = <nat:2> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:w> = <nat:2> * <var:T> ^ <nat:9> + <nat:4> * <var:T> ^ <nat:7> + <nat:4> * <var:T> ^ <nat:6> + <nat:3> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:w> = <nat:2> * <var:T> ^ <nat:10> + <nat:4> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:7> + <nat:3> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 