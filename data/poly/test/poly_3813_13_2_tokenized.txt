\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} as \begin{verbatim} <var:a> := <nat:4> ; <var:a> := <nat:1> + <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> ; <var:a> := <nat:3> + <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> ; <var:a> := <nat:3> + <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <nat:4> + <var:a> * <var:z> ; <var:a> := <nat:1> + <var:a> * <var:z> ; <var:a> := <nat:4> + <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> \end{verbatim} Allowing ( taking positive integer coefficients $ <var:h> $ ) $ <var:z> = <var:h> $ before running this series of instructions , it must be that we see $ <var:a> = <nat:4> * <var:h> ^ <nat:12> + <nat:1> * <var:h> ^ <nat:11> + <nat:2> * <var:h> ^ <nat:10> + <nat:3> * <var:h> ^ <nat:9> + <nat:2> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code can be seen using usual Hoare techniques . Focusing on the subsequent steps contained in our series of commands , \verb | { <var:z> = <var:h> } <var:a> := <nat:4> { <var:z> = <var:h> \land <var:a> = <nat:4> } | , \verb | { <var:z> = <var:h> \land <var:a> = <nat:4> } <var:a> := <nat:1> + <var:a> * <var:z> { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> + <nat:1> } | , \verb | { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> + <nat:1> } <var:a> := <nat:2> + <var:a> * <var:z> { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:2> } | , \verb | { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:2> } <var:a> := <nat:3> + <var:a> * <var:z> { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:3> } | , \verb | { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:3> } <var:a> := <nat:2> + <var:a> * <var:z> { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:2> } | and \verb | { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:2> } <var:a> := <nat:3> + <var:a> * <var:z> { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:3> } | . Moving on to the upcoming statements found in our code , we see \verb | { <var:z> = <var:h> } <var:a> := <nat:4> { <var:z> = <var:h> \land <var:a> = <nat:4> } | , \verb | { <var:z> = <var:h> \land <var:a> = <nat:4> } <var:a> := <nat:1> + <var:a> * <var:z> { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> + <nat:1> } | , \verb | { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> + <nat:1> } <var:a> := <nat:2> + <var:a> * <var:z> { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:2> } | and \verb | { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:2> } <var:a> := <nat:3> + <var:a> * <var:z> { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:3> } | . This is shown using the binding rule defined by standard Hoare techniques . Focusing on the subsequent steps contained in the list of instructions , we see \verb | { <var:z> = <var:h> } <var:a> := <nat:4> { <var:z> = <var:h> \land <var:a> = <nat:4> } | , \verb | { <var:z> = <var:h> \land <var:a> = <nat:4> } <var:a> := <nat:1> + <var:a> * <var:z> { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> + <nat:1> } | and \verb | { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> + <nat:1> } <var:a> := <nat:2> + <var:a> * <var:z> { <var:z> = <var:h> \land <var:a> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:z> = <var:h> }} <var:a> := <nat:4> ; <var:a> := <nat:1> + <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> ; <var:a> := <nat:3> + <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> ; <var:a> := <nat:3> + <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <var:a> * <var:z> ; <var:a> := <nat:4> + <var:a> * <var:z> ; <var:a> := <nat:1> + <var:a> * <var:z> ; <var:a> := <nat:4> + <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> ; <var:a> := <nat:2> + <var:a> * <var:z> {{ <var:a> = <nat:4> * <var:h> ^ <nat:12> + <nat:1> * <var:h> ^ <nat:11> + <nat:2> * <var:h> ^ <nat:10> + <nat:3> * <var:h> ^ <nat:9> + <nat:2> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a> = <nat:4> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a> = <nat:4> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a> = <nat:4> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a> = <nat:4> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a> = <nat:4> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a> = <nat:4> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a> = <nat:4> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a> = <nat:4> * <var:h> ^ <nat:8> + <nat:1> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a> = <nat:4> * <var:h> ^ <nat:9> + <nat:1> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a> = <nat:4> * <var:h> ^ <nat:10> + <nat:1> * <var:h> ^ <nat:9> + <nat:2> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a> = <nat:4> * <var:h> ^ <nat:11> + <nat:1> * <var:h> ^ <nat:10> + <nat:2> * <var:h> ^ <nat:9> + <nat:3> * <var:h> ^ <nat:8> + <nat:2> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a> = <nat:4> * <var:h> ^ <nat:12> + <nat:1> * <var:h> ^ <nat:11> + <nat:2> * <var:h> ^ <nat:10> + <nat:3> * <var:h> ^ <nat:9> + <nat:2> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 