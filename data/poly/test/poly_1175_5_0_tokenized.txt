\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:b0> := <nat:3> ; <var:b1> := <nat:1> ; <var:b1> := <var:b1> * <var:z> ; <var:i> := <var:b1> ; <var:i> := <var:i> + <var:b0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> in \emph{Imp} . Allowing with some natural numbers $ <var:D> $ that $ <var:z> = <var:D> $ prior to interpreting our segment of code then $ <var:i> = <nat:1> \cdot <var:D> + <nat:3> $ after code segment has exited . \end{theorem} \begin{proof} See that the following decorated code . \begin{eqnarray} \{ <var:z> = <var:D> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:z> = <var:D> \land <var:b0> = <nat:3> \} \\ <var:b1> := <nat:1> ; \\ \{ <var:z> = <var:D> \land <var:b0> = <nat:3> \land <var:b1> = <nat:1> \} \\ <var:b1> := <var:b1> * <var:z> ; \\ \{ <var:z> = <var:D> \land <var:b0> = <nat:3> \land <var:b1> = <nat:1> * <var:D> \} \\ <var:i> := <var:b1> ; \\ \{ <var:z> = <var:D> \land <var:b0> = <nat:3> \land <var:i> = <nat:1> * <var:D> \} \end{eqnarray} Furthering executing the list of instructions gives : \begin{eqnarray} <var:i> := <var:i> + <var:b0> \\ \{ <var:z> = <var:D> \land <var:i> = <nat:1> * <var:D> + <nat:3> \} \end{eqnarray} Using Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <def:poly> := <var:b0> := <nat:3> ; <var:b1> := <nat:1> ; <var:b1> := <var:b1> * <var:z> ; <var:i> := <var:b1> ; <var:i> := <var:i> + <var:b0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:z> = <var:D> }} <def:poly> {{ <var:i> = <nat:1> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:b0> = <nat:3> /\ <var:i> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:D> /\ <var:i> = <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 