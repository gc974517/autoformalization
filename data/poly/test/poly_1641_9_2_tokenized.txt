\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b> := <nat:3> ; <var:b> := <nat:1> + <var:b> * <var:y> ; <var:b> := <nat:4> + <var:b> * <var:y> ; <var:b> := <nat:2> + <var:b> * <var:y> ; <var:b> := <nat:3> + <var:b> * <var:y> ; <var:b> := <nat:3> + <var:b> * <var:y> ; <var:b> := <nat:3> + <var:b> * <var:y> ; <var:b> := <nat:2> + <var:b> * <var:y> ; <var:b> := <nat:4> + <var:b> * <var:y> \end{verbatim} \end{definition} \begin{theorem} Take a code segment <def:poly> . Assume that $ <var:y> = <var:d> $ --- for some integers $ <var:d> $ --- prior to running our series of commands it must be that we see $ <var:b> = <nat:3> \times <var:d> ^ <nat:8> + <nat:1> \times <var:d> ^ <nat:7> + <nat:4> \times <var:d> ^ <nat:6> + <nat:2> \times <var:d> ^ <nat:5> + <nat:3> \times <var:d> ^ <nat:4> + <nat:3> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:4> $ once code segment has executed . \end{theorem} \begin{proof} The flow of logic for the list of instructions can be accomplished by Hoare reasoning . Taking a look at the proceeding step contained in our series of instructions , we have the assignment line letting $ <nat:3> $ toward $ <var:b>$ . This forwards the condition $ \{ <var:y> = <var:d> \} $ as the postcondition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \} $ . Advancing , we see the line \verb | <var:b> := <nat:1> + <var:b> * <var:y> ; | . This statement takes the precondition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \} $ to the postcondition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> + <nat:1> \} $ . Moving forward to the next step , the binding line \verb | <var:b> := <nat:4> + <var:b> * <var:y> ; | . This transfers the precondition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> + <nat:1> \} $ toward the condition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:4> \} $ . Moving forward , we see the variable update command \verb | <var:b> := <nat:2> + <var:b> * <var:y> ; | . This moves $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:4> \} $ into the condition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> ^ <nat:3> + <nat:1> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:2> \} $ . This is known to be sound through the assignment rule in standard Hoare reasoning . Considering the upcoming command contained in the series of instructions , the assignment command \verb | <var:b> := <nat:3> + <var:b> * <var:y> ; | . This transfers the condition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> ^ <nat:3> + <nat:1> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:2> \} $ as the condition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> ^ <nat:4> + <nat:1> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:3> \} $ . Moving on , the assignment line \verb | <var:b> := <nat:3> + <var:b> * <var:y> ; | . This takes the condition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> ^ <nat:4> + <nat:1> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:3> \} $ as the postcondition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> ^ <nat:5> + <nat:1> \times <var:d> ^ <nat:4> + <nat:4> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:3> \} $ . Going to the next step , we see the binding line binding $ <nat:3> + <var:b> * <var:y> $ as $ <var:b>$ . This advances the precondition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> ^ <nat:5> + <nat:1> \times <var:d> ^ <nat:4> + <nat:4> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:3> \} $ as the condition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> ^ <nat:6> + <nat:1> \times <var:d> ^ <nat:5> + <nat:4> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:3> \} $ . Looking at the subsequent line of code found in our series of commands , we see the code \verb | <var:b> := <nat:2> + <var:b> * <var:y> ; | . This transfers the condition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> ^ <nat:6> + <nat:1> \times <var:d> ^ <nat:5> + <nat:4> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:3> \} $ to $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> ^ <nat:7> + <nat:1> \times <var:d> ^ <nat:6> + <nat:4> \times <var:d> ^ <nat:5> + <nat:2> \times <var:d> ^ <nat:4> + <nat:3> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:2> \} $ . Now , we see the command \verb | <var:b> := <nat:4> + <var:b> * <var:y> | . This line takes the precondition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> ^ <nat:7> + <nat:1> \times <var:d> ^ <nat:6> + <nat:4> \times <var:d> ^ <nat:5> + <nat:2> \times <var:d> ^ <nat:4> + <nat:3> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:2> \} $ as the postcondition $ \{ <var:y> = <var:d> \land <var:b> = <nat:3> \times <var:d> ^ <nat:8> + <nat:1> \times <var:d> ^ <nat:7> + <nat:4> \times <var:d> ^ <nat:6> + <nat:2> \times <var:d> ^ <nat:5> + <nat:3> \times <var:d> ^ <nat:4> + <nat:3> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:4> \} $ . This is ensured using the assignment law given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:3> ; <var:b> := <nat:1> + <var:b> * <var:y> ; <var:b> := <nat:4> + <var:b> * <var:y> ; <var:b> := <nat:2> + <var:b> * <var:y> ; <var:b> := <nat:3> + <var:b> * <var:y> ; <var:b> := <nat:3> + <var:b> * <var:y> ; <var:b> := <nat:3> + <var:b> * <var:y> ; <var:b> := <nat:2> + <var:b> * <var:y> ; <var:b> := <nat:4> + <var:b> * <var:y> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:y> = <var:d> }} <def:poly> {{ <var:b> = <nat:3> * <var:d> ^ <nat:8> + <nat:1> * <var:d> ^ <nat:7> + <nat:4> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:b> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:b> = <nat:3> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:b> = <nat:3> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:b> = <nat:3> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:b> = <nat:3> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:b> = <nat:3> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:b> = <nat:3> * <var:d> ^ <nat:6> + <nat:1> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:b> = <nat:3> * <var:d> ^ <nat:7> + <nat:1> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:d> /\ <var:b> = <nat:3> * <var:d> ^ <nat:8> + <nat:1> * <var:d> ^ <nat:7> + <nat:4> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 