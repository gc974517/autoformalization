\begin{document} \begin{theorem} Take a series of instructions such that \begin{verbatim} <var:J1> := <var:R> ; <var:J0> := <nat:1> ; <var:J1> := <var:J1> * <nat:6> ; <var:e> := <var:J1> <var:e> := <var:e> + <var:J0> \end{verbatim} Allowing it to hold that $ <var:R> = <var:w> $ , given some $ <var:w> $ , prior to the execution of the code segment , it must be that we have $ <var:e> = <nat:6> * <var:w> + <nat:1> $ when segment of code has finished . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions is clear through the below decorated list of commands . \begin{eqnarray} \{ <var:R> = <var:w> \} \\ <var:J1> := <var:R> ; \\ \{ <var:R> = <var:w> \land <var:J1> = <var:w> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:R> = <var:w> \land <var:J1> = <var:w> \land <var:J0> = <nat:1> \} \\ <var:J1> := <var:J1> * <nat:6> ; \\ \{ <var:R> = <var:w> \land <var:J1> = <nat:6> \times <var:w> \land <var:J0> = <nat:1> \} \\ <var:e> := <var:J1> \\ \{ <var:R> = <var:w> \land <var:J0> = <nat:1> \land <var:e> = <nat:6> \times <var:w> \} \\ <var:e> := <var:e> + <var:J0> \\ \{ <var:R> = <var:w> \land <var:e> = <nat:6> \times <var:w> + <nat:1> \} \end{eqnarray} Using typical Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:R> = <var:w> }} <var:J1> := <var:R> ; <var:J0> := <nat:1> ; <var:J1> := <var:J1> * <nat:6> ; <var:e> := <var:J1> <var:e> := <var:e> + <var:J0> {{ <var:e> = <nat:6> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:J1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:J1> = <var:w> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:J1> = <nat:6> * <var:w> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:J0> = <nat:1> /\ <var:e> = <nat:6> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:w> /\ <var:e> = <nat:6> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 