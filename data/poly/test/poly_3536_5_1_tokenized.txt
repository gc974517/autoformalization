\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:r1> := <var:k> ; <var:r0> := <nat:5> ; <var:r1> := <var:r1> * <nat:3> ; <var:P> := <var:r1> <var:P> := <var:P> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> . Allowing it to hold that $ <var:k> = <var:O> $ before the evaluation of our segment of code it holds that we see $ <var:P> = <nat:3> * <var:O> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques returns : \begin{eqnarray} \{ <var:k> = <var:O> \} \\ <var:r1> := <var:k> ; \\ \{ <var:k> = <var:O> \land <var:r1> = <var:O> \} \\ <var:r0> := <nat:5> ; \\ \{ <var:k> = <var:O> \land <var:r1> = <var:O> \land <var:r0> = <nat:5> \} \\ <var:r1> := <var:r1> * <nat:3> ; \\ \{ <var:k> = <var:O> \land <var:r1> = <nat:3> * <var:O> \land <var:r0> = <nat:5> \} \\ <var:P> := <var:r1> \\ \{ <var:k> = <var:O> \land <var:r0> = <nat:5> \land <var:P> = <nat:3> * <var:O> \} \\ <var:P> := <var:P> + <var:r0> \\ \{ <var:k> = <var:O> \land <var:P> = <nat:3> * <var:O> + <nat:5> \} \end{eqnarray} Hence , the code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r1> := <var:k> ; <var:r0> := <nat:5> ; <var:r1> := <var:r1> * <nat:3> ; <var:P> := <var:r1> <var:P> := <var:P> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:k> = <var:O> }} <def:poly> {{ <var:P> = <nat:3> * <var:O> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:r1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:r1> = <var:O> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:r1> = <nat:3> * <var:O> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:r0> = <nat:5> /\ <var:P> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:O> /\ <var:P> = <nat:3> * <var:O> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 