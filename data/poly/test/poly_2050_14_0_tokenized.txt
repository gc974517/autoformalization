\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:1> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:X> ; <var:M2> := <nat:1> ; <var:M2> := <var:M2> * <var:X> ; <var:M2> := <var:M2> * <var:X> ; <var:M3> := <nat:2> ; <var:M3> := <var:M3> * <var:X> ; <var:M3> := <var:M3> * <var:X> ; <var:M3> := <var:M3> * <var:X> ; <var:B> := <var:M3> ; <var:B> := <var:B> + <var:M2> ; <var:B> := <var:B> + <var:M1> ; <var:B> := <var:B> + <var:M0> \end{verbatim} Allowing it to be that $ <var:X> = <var:Z> $ ( given any positive coefficients $ <var:Z> $ ) prior to running the series of commands , then $ <var:B> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions is accomplished through typical Hoare logic . Advancing to the next line seen in the program , we have the command \verb | <var:M0> := <nat:1> ; | . This takes the precondition $ \{ <var:X> = <var:Z> \} $ as the condition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \} $ . This is sound using the assignment inference rule obtained from standard Hoare reasoning . Moving forward , we see the assignment code assigning $ <nat:4> $ to $ <var:M1>$ . This statement transfers $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \} $ toward $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> \} $ . Moving forward , we see the environment update command \verb | <var:M1> := <var:M1> * <var:X> ; | . This forwards the precondition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> \} $ to the condition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \} $ . This is shown by the assignment rule from usual Hoare logic . Advancing to the proceeding command seen in our code segment , we see the variable update line \verb | <var:M2> := <nat:1> ; | . This transfers the condition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \} $ toward $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> \} $ . Jumping to the subsequent command found in our set of instructions , we have the binding command letting $ <var:M2> * <var:X> $ as $ <var:M2>$ . This redefines the precondition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> \} $ into the condition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> \} $ . Following , we have the command \verb | <var:M2> := <var:M2> * <var:X> ; | . This statement transfers $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> \} $ as $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> ^ <nat:2> \} $ . Immediately following , the variable update line giving $ <nat:2> $ as $ <var:M3>$ . This transfers the condition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> ^ <nat:2> \} $ toward the postcondition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> ^ <nat:2> \land <var:M3> = <nat:2> \} $ . This is known to be sound with the assignment rule of standard Hoare logic . Considering the subsequent command contained in the series of instructions , we have the assignment statement yielding $ <var:M3> * <var:X> $ to $ <var:M3>$ . This line redefines the condition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> ^ <nat:2> \land <var:M3> = <nat:2> \} $ as the condition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> ^ <nat:2> \land <var:M3> = <nat:2> * <var:Z> \} $ . This is rigorously given with the assignment rule given by Hoare logic . Taking a look at the proceeding command found in our series of commands , we see the variable binding statement \verb | <var:M3> := <var:M3> * <var:X> ; | . This statement transfers the condition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> ^ <nat:2> \land <var:M3> = <nat:2> * <var:Z> \} $ to $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> ^ <nat:2> \land <var:M3> = <nat:2> * <var:Z> ^ <nat:2> \} $ . Honing in on the subsequent line of code found in the series of instructions , we see the variable assignmet command \verb | <var:M3> := <var:M3> * <var:X> ; | . This transfers the condition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> ^ <nat:2> \land <var:M3> = <nat:2> * <var:Z> ^ <nat:2> \} $ toward the condition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> ^ <nat:2> \land <var:M3> = <nat:2> * <var:Z> ^ <nat:3> \} $ . Taking a look at the next piece of code found in the series of commands , we see the variable update command letting $ <var:M3> $ to $ <var:B>$ . This advances the precondition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> ^ <nat:2> \land <var:M3> = <nat:2> * <var:Z> ^ <nat:3> \} $ as $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> ^ <nat:2> \land <var:B> = <nat:2> * <var:Z> ^ <nat:3> \} $ . Advancing , the binding code \verb | <var:B> := <var:B> + <var:M2> ; | . This code transfers $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:M2> = <nat:1> * <var:Z> ^ <nat:2> \land <var:B> = <nat:2> * <var:Z> ^ <nat:3> \} $ as $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:B> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> \} $ . This is deduced through the assignment inference rule given in typical Hoare reasoning . Next , we see the binding statement giving $ <var:B> + <var:M1> $ as $ <var:B>$ . This redefines the condition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:M1> = <nat:4> * <var:Z> \land <var:B> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> \} $ to $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:B> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> \} $ . This is shown by the assignment rule from standard Hoare logic . Now , we have the variable assignmet command assigning $ <var:B> + <var:M0$ toward $ <var:B>$ . This moves the condition $ \{ <var:X> = <var:Z> \land <var:M0> = <nat:1> \land <var:B> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> \} $ into $ \{ <var:X> = <var:Z> \land <var:B> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:X> = <var:Z> }} <var:M0> := <nat:1> ; <var:M1> := <nat:4> ; <var:M1> := <var:M1> * <var:X> ; <var:M2> := <nat:1> ; <var:M2> := <var:M2> * <var:X> ; <var:M2> := <var:M2> * <var:X> ; <var:M3> := <nat:2> ; <var:M3> := <var:M3> * <var:X> ; <var:M3> := <var:M3> * <var:X> ; <var:M3> := <var:M3> * <var:X> ; <var:B> := <var:M3> ; <var:B> := <var:B> + <var:M2> ; <var:B> := <var:B> + <var:M1> ; <var:B> := <var:B> + <var:M0> {{ <var:B> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:M0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:Z> /\ <var:M2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:Z> /\ <var:M2> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:Z> /\ <var:M2> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:Z> /\ <var:M2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:M3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:Z> /\ <var:M2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:M3> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:Z> /\ <var:M2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:M3> = <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:Z> /\ <var:M2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:M3> = <nat:2> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:Z> /\ <var:M2> = <nat:1> * <var:Z> ^ <nat:2> /\ <var:B> = <nat:2> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:M0> = <nat:1> /\ <var:M1> = <nat:4> * <var:Z> /\ <var:B> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:M0> = <nat:1> /\ <var:B> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:B> = <nat:2> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 