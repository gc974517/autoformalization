\begin{document} \begin{theorem} Take a code as follows \begin{verbatim} <var:q0> := <nat:6> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:B> ; <var:q2> := <nat:6> ; <var:q2> := <var:q2> * <var:B> ; <var:q2> := <var:q2> * <var:B> ; <var:K> := <var:q2> ; <var:K> := <var:K> + <var:q1> ; <var:K> := <var:K> + <var:q0> \end{verbatim} Allowing , with some positive numbers $ <var:h> $ , that $ <var:B> = <var:h> $ prior to interpreting the program it holds that we have $ <var:K> = <nat:6> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for our series of instructions is shown with typical Hoare logic . Following , \begin{eqnarray} \{ <var:B> = <var:h> \} \, <var:q0> := <nat:6> \, \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \} \\ \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \} \, <var:q1> := <nat:2> \, \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \} \\ \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \} \, <var:q1> := <var:q1> * <var:B> \, \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:h> \} \\ \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:h> \} \, <var:q2> := <nat:6> \, \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:h> \land <var:q2> = <nat:6> \} \\ \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:h> \land <var:q2> = <nat:6> \} \, <var:q2> := <var:q2> * <var:B> \, \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:h> \land <var:q2> = <nat:6> \times <var:h> \} \\ \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:h> \land <var:q2> = <nat:6> \times <var:h> \} \, <var:q2> := <var:q2> * <var:B> \, \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:h> \land <var:q2> = <nat:6> \times <var:h> ^ <nat:2> \} \\ \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:h> \land <var:q2> = <nat:6> \times <var:h> ^ <nat:2> \} \, <var:K> := <var:q2> \, \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:h> \land <var:K> = <nat:6> \times <var:h> ^ <nat:2> \} \\ \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:q1> = <nat:2> \times <var:h> \land <var:K> = <nat:6> \times <var:h> ^ <nat:2> \} \, <var:K> := <var:K> + <var:q1> \, \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:K> = <nat:6> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> \} \\ \{ <var:B> = <var:h> \land <var:q0> = <nat:6> \land <var:K> = <nat:6> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> \} \, <var:K> := <var:K> + <var:q0\, \{ <var:B> = <var:h> \land <var:K> = <nat:6> \times <var:h> ^ <nat:2> + <nat:2> \times <var:h> + <nat:6> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:B> = <var:h> }} <var:q0> := <nat:6> ; <var:q1> := <nat:2> ; <var:q1> := <var:q1> * <var:B> ; <var:q2> := <nat:6> ; <var:q2> := <var:q2> * <var:B> ; <var:q2> := <var:q2> * <var:B> ; <var:K> := <var:q2> ; <var:K> := <var:K> + <var:q1> ; <var:K> := <var:K> + <var:q0> {{ <var:K> = <nat:6> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:h> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:h> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:h> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:h> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:2> * <var:h> /\ <var:q2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:h> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:2> * <var:h> /\ <var:q2> = <nat:6> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:h> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:2> * <var:h> /\ <var:q2> = <nat:6> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:h> /\ <var:q0> = <nat:6> /\ <var:q1> = <nat:2> * <var:h> /\ <var:K> = <nat:6> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:h> /\ <var:q0> = <nat:6> /\ <var:K> = <nat:6> * <var:h> ^ <nat:2> + <nat:2> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:h> /\ <var:K> = <nat:6> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 