\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:q1> := <var:u> ; <var:q2> := <var:q1> * <var:u> ; <var:q3> := <var:q2> * <var:u> ; <var:q4> := <var:q3> * <var:u> ; <var:q0> := <nat:3> ; <var:q3> := <var:q3> * <nat:1> ; <var:q4> := <var:q4> * <nat:2> ; <var:x> := <var:q4> <var:x> := <var:x> + <var:q3> <var:x> := <var:x> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:u> = <var:D> $ prior to evaluating the set of instructions , it must be that $ <var:x> = <nat:2> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> $ after program exits . \end{theorem} \begin{proof} The course of logic for this segment of code is evident using standard Hoare logic . Advancing on , we see \begin{eqnarray} \{ <var:u> = <var:D> \} \, <var:q1> := <var:u> \, \{ <var:u> = <var:D> \land <var:q1> = <var:D> \} \\ \{ <var:u> = <var:D> \land <var:q1> = <var:D> \} \, <var:q2> := <var:q1> * <var:u> \, \{ <var:u> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \} \end{eqnarray} Keeping momentum , we see \begin{eqnarray} \{ <var:u> = <var:D> \} \, <var:q1> := <var:u> \, \{ <var:u> = <var:D> \land <var:q1> = <var:D> \} \\ \{ <var:u> = <var:D> \land <var:q1> = <var:D> \} \, <var:q2> := <var:q1> * <var:u> \, \{ <var:u> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \} \\ \{ <var:u> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \} \, <var:q3> := <var:q2> * <var:u> \, \{ <var:u> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \land <var:q3> = <var:D> ^ <nat:3> \} \\ \{ <var:u> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \land <var:q3> = <var:D> ^ <nat:3> \} \, <var:q4> := <var:q3> * <var:u> \, \{ <var:u> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \land <var:q3> = <var:D> ^ <nat:3> \land <var:q4> = <var:D> ^ <nat:4> \} \\ \{ <var:u> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \land <var:q3> = <var:D> ^ <nat:3> \land <var:q4> = <var:D> ^ <nat:4> \} \, <var:q0> := <nat:3> \, \{ <var:u> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \land <var:q3> = <var:D> ^ <nat:3> \land <var:q4> = <var:D> ^ <nat:4> \land <var:q0> = <nat:3> \} \\ \{ <var:u> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \land <var:q3> = <var:D> ^ <nat:3> \land <var:q4> = <var:D> ^ <nat:4> \land <var:q0> = <nat:3> \} \, <var:q3> := <var:q3> * <nat:1> \, \{ <var:u> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \land <var:q3> = <nat:1> * <var:D> ^ <nat:3> \land <var:q4> = <var:D> ^ <nat:4> \land <var:q0> = <nat:3> \} \\ \{ <var:u> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \land <var:q3> = <nat:1> * <var:D> ^ <nat:3> \land <var:q4> = <var:D> ^ <nat:4> \land <var:q0> = <nat:3> \} \, <var:q4> := <var:q4> * <nat:2> \, \{ <var:u> = <var:D> \land <var:q1> = <var:D> \land <var:q2> = <var:D> ^ <nat:2> \land <var:q3> = <nat:1> * <var:D> ^ <nat:3> \land <var:q4> = <nat:2> * <var:D> ^ <nat:4> \land <var:q0> = <nat:3> \} \end{eqnarray} This is ensured with the variable update law given in typical Hoare logic . Advancing on , \begin{eqnarray} \{ <var:u> = <var:D> \} \, <var:q1> := <var:u> \, \{ <var:u> = <var:D> \land <var:q1> = <var:D> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <var:q4> : string := " <var:q4> " . Definition <def:poly> := <var:q1> := <var:u> ; <var:q2> := <var:q1> * <var:u> ; <var:q3> := <var:q2> * <var:u> ; <var:q4> := <var:q3> * <var:u> ; <var:q0> := <nat:3> ; <var:q3> := <var:q3> * <nat:1> ; <var:q4> := <var:q4> * <nat:2> ; <var:x> := <var:q4> <var:x> := <var:x> + <var:q3> <var:x> := <var:x> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:u> = <var:D> }} <def:poly> {{ <var:x> = <nat:2> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:q1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <var:D> ^ <nat:2> /\ <var:q3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <var:D> ^ <nat:2> /\ <var:q3> = <var:D> ^ <nat:3> /\ <var:q4> = <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <var:D> ^ <nat:2> /\ <var:q3> = <var:D> ^ <nat:3> /\ <var:q4> = <var:D> ^ <nat:4> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <var:D> ^ <nat:2> /\ <var:q3> = <nat:1> * <var:D> ^ <nat:3> /\ <var:q4> = <var:D> ^ <nat:4> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <var:D> ^ <nat:2> /\ <var:q3> = <nat:1> * <var:D> ^ <nat:3> /\ <var:q4> = <nat:2> * <var:D> ^ <nat:4> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <var:D> ^ <nat:2> /\ <var:q3> = <nat:1> * <var:D> ^ <nat:3> /\ <var:q0> = <nat:3> /\ <var:x> = <nat:2> * <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:q1> = <var:D> /\ <var:q2> = <var:D> ^ <nat:2> /\ <var:q0> = <nat:3> /\ <var:x> = <nat:2> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:x> = <nat:2> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 