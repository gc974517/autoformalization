\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z1> := <var:k> ; <var:Z2> := <var:Z1> * <var:k> ; <var:Z3> := <var:Z2> * <var:k> ; <var:Z0> := <nat:3> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Z2> := <var:Z2> * <nat:8> ; <var:Z3> := <var:Z3> * <nat:9> ; <var:V> := <var:Z3> <var:V> := <var:V> + <var:Z2> <var:V> := <var:V> + <var:Z1> <var:V> := <var:V> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> . Given letting natural numbers $ <var:C> $ that we have $ <var:k> = <var:C> $ before the execution of the series of instructions , then we have $ <var:V> = <nat:9> * <var:C> ^ <nat:3> + <nat:8> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:3> $ when segment of code finishes . \end{theorem} \begin{proof} Applying typical Hoare reasoning results in : \begin{eqnarray} \{ <var:k> = <var:C> \} \\ <var:Z1> := <var:k> ; \\ \{ <var:k> = <var:C> \land <var:Z1> = <var:C> \} \\ <var:Z2> := <var:Z1> * <var:k> ; \\ \{ <var:k> = <var:C> \land <var:Z1> = <var:C> \land <var:Z2> = <var:C> ^ <nat:2> \} \\ <var:Z3> := <var:Z2> * <var:k> ; \\ \{ <var:k> = <var:C> \land <var:Z1> = <var:C> \land <var:Z2> = <var:C> ^ <nat:2> \land <var:Z3> = <var:C> ^ <nat:3> \} \\ <var:Z0> := <nat:3> ; \\ \{ <var:k> = <var:C> \land <var:Z1> = <var:C> \land <var:Z2> = <var:C> ^ <nat:2> \land <var:Z3> = <var:C> ^ <nat:3> \land <var:Z0> = <nat:3> \} \end{eqnarray} Furthering the evaluation of the segment of code returns : \begin{eqnarray} <var:Z1> := <var:Z1> * <nat:2> ; \\ \{ <var:k> = <var:C> \land <var:Z1> = <nat:2> \times <var:C> \land <var:Z2> = <var:C> ^ <nat:2> \land <var:Z3> = <var:C> ^ <nat:3> \land <var:Z0> = <nat:3> \} \\ <var:Z2> := <var:Z2> * <nat:8> ; \\ \{ <var:k> = <var:C> \land <var:Z1> = <nat:2> \times <var:C> \land <var:Z2> = <nat:8> \times <var:C> ^ <nat:2> \land <var:Z3> = <var:C> ^ <nat:3> \land <var:Z0> = <nat:3> \} \\ <var:Z3> := <var:Z3> * <nat:9> ; \\ \{ <var:k> = <var:C> \land <var:Z1> = <nat:2> \times <var:C> \land <var:Z2> = <nat:8> \times <var:C> ^ <nat:2> \land <var:Z3> = <nat:9> \times <var:C> ^ <nat:3> \land <var:Z0> = <nat:3> \} \\ <var:V> := <var:Z3> \\ \{ <var:k> = <var:C> \land <var:Z1> = <nat:2> \times <var:C> \land <var:Z2> = <nat:8> \times <var:C> ^ <nat:2> \land <var:Z0> = <nat:3> \land <var:V> = <nat:9> \times <var:C> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:Z2> \\ \{ <var:k> = <var:C> \land <var:Z1> = <nat:2> \times <var:C> \land <var:Z0> = <nat:3> \land <var:V> = <nat:9> \times <var:C> ^ <nat:3> + <nat:8> \times <var:C> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:Z1> \\ \{ <var:k> = <var:C> \land <var:Z0> = <nat:3> \land <var:V> = <nat:9> \times <var:C> ^ <nat:3> + <nat:8> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> \} \\ <var:V> := <var:V> + <var:Z0> \\ \{ <var:k> = <var:C> \land <var:V> = <nat:9> \times <var:C> ^ <nat:3> + <nat:8> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:3> \} \end{eqnarray} As a consequence , the code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z1> := <var:k> ; <var:Z2> := <var:Z1> * <var:k> ; <var:Z3> := <var:Z2> * <var:k> ; <var:Z0> := <nat:3> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Z2> := <var:Z2> * <nat:8> ; <var:Z3> := <var:Z3> * <nat:9> ; <var:V> := <var:Z3> <var:V> := <var:V> + <var:Z2> <var:V> := <var:V> + <var:Z1> <var:V> := <var:V> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:k> = <var:C> }} <def:poly> {{ <var:V> = <nat:9> * <var:C> ^ <nat:3> + <nat:8> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:Z1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:Z1> = <var:C> /\ <var:Z2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:Z1> = <var:C> /\ <var:Z2> = <var:C> ^ <nat:2> /\ <var:Z3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:Z1> = <var:C> /\ <var:Z2> = <var:C> ^ <nat:2> /\ <var:Z3> = <var:C> ^ <nat:3> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:Z1> = <nat:2> * <var:C> /\ <var:Z2> = <var:C> ^ <nat:2> /\ <var:Z3> = <var:C> ^ <nat:3> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:Z1> = <nat:2> * <var:C> /\ <var:Z2> = <nat:8> * <var:C> ^ <nat:2> /\ <var:Z3> = <var:C> ^ <nat:3> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:Z1> = <nat:2> * <var:C> /\ <var:Z2> = <nat:8> * <var:C> ^ <nat:2> /\ <var:Z3> = <nat:9> * <var:C> ^ <nat:3> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:Z1> = <nat:2> * <var:C> /\ <var:Z2> = <nat:8> * <var:C> ^ <nat:2> /\ <var:Z0> = <nat:3> /\ <var:V> = <nat:9> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:Z1> = <nat:2> * <var:C> /\ <var:Z0> = <nat:3> /\ <var:V> = <nat:9> * <var:C> ^ <nat:3> + <nat:8> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:Z0> = <nat:3> /\ <var:V> = <nat:9> * <var:C> ^ <nat:3> + <nat:8> * <var:C> ^ <nat:2> + <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:V> = <nat:9> * <var:C> ^ <nat:3> + <nat:8> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 