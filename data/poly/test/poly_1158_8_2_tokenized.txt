\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B> := <nat:4> ; <var:B> := <nat:3> + <var:B> * <var:A> ; <var:B> := <nat:3> + <var:B> * <var:A> ; <var:B> := <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> ; <var:B> := <nat:3> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:A> = <var:d> $ for whole numbers $ <var:d> $ prior to executing this list of instructions , it must be that we see $ <var:B> = <nat:4> * <var:d> ^ <nat:7> + <nat:3> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:4> $ . \end{theorem} \begin{proof} The proof of our series of commands can be given by typical Hoare reasoning . Taking a look at the subsequent statement contained in the series of commands , the variable update code \verb | <var:B> := <nat:4> ; | . This code moves $ \{ <var:A> = <var:d> \} $ toward the postcondition $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \} $ . Next , the command binding $ <nat:3> + <var:B> * <var:A> $ into $ <var:B>$ . This moves the precondition $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \} $ to $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \cdot <var:d> + <nat:3> \} $ . Immediately following , the variable binding line assigning $ <nat:3> + <var:B> * <var:A> $ into $ <var:B>$ . This line moves $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \cdot <var:d> + <nat:3> \} $ to $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + <nat:3> \} $ . Moving on to the next step , we have the command \verb | <var:B> := <var:B> * <var:A> ; | . This transfers $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + <nat:3> \} $ to the postcondition $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \cdot <var:d> ^ <nat:3> + <nat:3> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + \} $ . Going to the next step , we see the assignment command binding $ <nat:4> + <var:B> * <var:A> $ toward $ <var:B>$ . This command advances the precondition $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \cdot <var:d> ^ <nat:3> + <nat:3> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + \} $ toward the condition $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \cdot <var:d> ^ <nat:4> + <nat:3> \cdot <var:d> ^ <nat:3> + <nat:3> \cdot <var:d> ^ <nat:2> + <nat:4> \} $ . This is guaranteed using the assignment scheme from Hoare techniques . Moving onward , we see the variable assignmet statement defining $ <nat:3> + <var:B> * <var:A> $ as $ <var:B>$ . This code takes $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \cdot <var:d> ^ <nat:4> + <nat:3> \cdot <var:d> ^ <nat:3> + <nat:3> \cdot <var:d> ^ <nat:2> + <nat:4> \} $ toward the condition $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \cdot <var:d> ^ <nat:5> + <nat:3> \cdot <var:d> ^ <nat:4> + <nat:3> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> + <nat:3> \} $ . This is guaranteed through the assignment rule defined by usual Hoare techniques . Taking another step toward the following line of code seen in the list of instructions , the binding statement \verb | <var:B> := <nat:4> + <var:B> * <var:A> ; | . This command advances $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \cdot <var:d> ^ <nat:5> + <nat:3> \cdot <var:d> ^ <nat:4> + <nat:3> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> + <nat:3> \} $ as the postcondition $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \cdot <var:d> ^ <nat:6> + <nat:3> \cdot <var:d> ^ <nat:5> + <nat:3> \cdot <var:d> ^ <nat:4> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + <nat:4> \} $ . Taking a look at the following line of code found in our set of commands , the variable binding statement letting $ <nat:4> + <var:B> * <var:A$ as $ <var:B>$ . This transfers $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \cdot <var:d> ^ <nat:6> + <nat:3> \cdot <var:d> ^ <nat:5> + <nat:3> \cdot <var:d> ^ <nat:4> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + <nat:4> \} $ into the postcondition $ \{ <var:A> = <var:d> \land <var:B> = <nat:4> \cdot <var:d> ^ <nat:7> + <nat:3> \cdot <var:d> ^ <nat:6> + <nat:3> \cdot <var:d> ^ <nat:5> + <nat:4> \cdot <var:d> ^ <nat:3> + <nat:3> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:4> \} $ . This is sound with the assignment scheme defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:B> := <nat:4> ; <var:B> := <nat:3> + <var:B> * <var:A> ; <var:B> := <nat:3> + <var:B> * <var:A> ; <var:B> := <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> ; <var:B> := <nat:3> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> ; <var:B> := <nat:4> + <var:B> * <var:A> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:A> = <var:d> }} <def:poly> {{ <var:B> = <nat:4> * <var:d> ^ <nat:7> + <nat:3> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:B> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:B> = <nat:4> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:B> = <nat:4> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:B> = <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:B> = <nat:4> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:B> = <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:B> = <nat:4> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:d> /\ <var:B> = <nat:4> * <var:d> ^ <nat:7> + <nat:3> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 