\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q> := <nat:3> ; <var:Q> := <nat:1> + <var:Q> * <var:b> ; <var:Q> := <nat:4> + <var:Q> * <var:b> ; <var:Q> := <var:Q> * <var:b> ; <var:Q> := <nat:3> + <var:Q> * <var:b> ; <var:Q> := <var:Q> * <var:b> ; <var:Q> := <nat:1> + <var:Q> * <var:b> ; <var:Q> := <var:Q> * <var:b> ; <var:Q> := <nat:1> + <var:Q> * <var:b> ; <var:Q> := <nat:4> + <var:Q> * <var:b> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> . Assuming that we have $ <var:b> = <var:f> $ ( taking positive numbers $ <var:f> $ ) prior to the evaluation of our list of instructions it must be that we see $ <var:Q> = <nat:3> \cdot <var:f> ^ <nat:9> + <nat:1> \cdot <var:f> ^ <nat:8> + <nat:4> \cdot <var:f> ^ <nat:7> + <nat:3> \cdot <var:f> ^ <nat:5> + <nat:1> \cdot <var:f> ^ <nat:3> + <nat:1> \cdot <var:f> + <nat:4> $ once code segment has finished . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions is done through standard Hoare logic . Jumping to the proceeding lines of codeseen in the code , we have \begin{eqnarray} \{ <var:b> = <var:f> \} \, <var:Q> := <nat:3> \, \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \} \\ \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \} \, <var:Q> := <nat:1> + <var:Q> * <var:b> \, \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> + <nat:1> \} \\ \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> + <nat:1> \} \, <var:Q> := <nat:4> + <var:Q> * <var:b> \, \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:4> \} \\ \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:4> \} \, <var:Q> := <var:Q> * <var:b> \, \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + \} \\ \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + \} \, <var:Q> := <nat:3> + <var:Q> * <var:b> \, \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> ^ <nat:4> + <nat:1> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:3> \} \\ \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> ^ <nat:4> + <nat:1> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:3> \} \, <var:Q> := <var:Q> * <var:b> \, \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> ^ <nat:5> + <nat:1> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:3> \times <var:f> + \} \\ \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> ^ <nat:5> + <nat:1> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:3> \times <var:f> + \} \, <var:Q> := <nat:1> + <var:Q> * <var:b> \, \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> ^ <nat:6> + <nat:1> \times <var:f> ^ <nat:5> + <nat:4> \times <var:f> ^ <nat:4> + <nat:3> \times <var:f> ^ <nat:2> + <nat:1> \} \\ \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> ^ <nat:6> + <nat:1> \times <var:f> ^ <nat:5> + <nat:4> \times <var:f> ^ <nat:4> + <nat:3> \times <var:f> ^ <nat:2> + <nat:1> \} \, <var:Q> := <var:Q> * <var:b> \, \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> ^ <nat:7> + <nat:1> \times <var:f> ^ <nat:6> + <nat:4> \times <var:f> ^ <nat:5> + <nat:3> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> + \} \\ \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> ^ <nat:7> + <nat:1> \times <var:f> ^ <nat:6> + <nat:4> \times <var:f> ^ <nat:5> + <nat:3> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> + \} \, <var:Q> := <nat:1> + <var:Q> * <var:b> \, \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \times <var:f> ^ <nat:8> + <nat:1> \times <var:f> ^ <nat:7> + <nat:4> \times <var:f> ^ <nat:6> + <nat:3> \times <var:f> ^ <nat:4> + <nat:1> \times <var:f> ^ <nat:2> + <nat:1> \} \end{eqnarray} Shifting focus toward the upcoming command found in the set of commands , we have \begin{eqnarray} \{ <var:b> = <var:f> \} \, <var:Q> := <nat:3> \, \{ <var:b> = <var:f> \land <var:Q> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:3> ; <var:Q> := <nat:1> + <var:Q> * <var:b> ; <var:Q> := <nat:4> + <var:Q> * <var:b> ; <var:Q> := <var:Q> * <var:b> ; <var:Q> := <nat:3> + <var:Q> * <var:b> ; <var:Q> := <var:Q> * <var:b> ; <var:Q> := <nat:1> + <var:Q> * <var:b> ; <var:Q> := <var:Q> * <var:b> ; <var:Q> := <nat:1> + <var:Q> * <var:b> ; <var:Q> := <nat:4> + <var:Q> * <var:b> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:b> = <var:f> }} <def:poly> {{ <var:Q> = <nat:3> * <var:f> ^ <nat:9> + <nat:1> * <var:f> ^ <nat:8> + <nat:4> * <var:f> ^ <nat:7> + <nat:3> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:Q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:Q> = <nat:3> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:Q> = <nat:3> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:Q> = <nat:3> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:Q> = <nat:3> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:Q> = <nat:3> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:3> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:Q> = <nat:3> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:Q> = <nat:3> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:3> * <var:f> ^ <nat:3> + <nat:1> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:Q> = <nat:3> * <var:f> ^ <nat:8> + <nat:1> * <var:f> ^ <nat:7> + <nat:4> * <var:f> ^ <nat:6> + <nat:3> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:f> /\ <var:Q> = <nat:3> * <var:f> ^ <nat:9> + <nat:1> * <var:f> ^ <nat:8> + <nat:4> * <var:f> ^ <nat:7> + <nat:3> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 