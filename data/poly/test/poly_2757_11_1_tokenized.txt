\begin{document} \begin{theorem} Take a code such that \begin{verbatim} <var:w1> := <var:Z> ; <var:w2> := <var:w1> * <var:Z> ; <var:w3> := <var:w2> * <var:Z> ; <var:w0> := <nat:1> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:1> ; <var:w3> := <var:w3> * <nat:4> ; <var:J> := <var:w3> <var:J> := <var:J> + <var:w2> <var:J> := <var:J> + <var:w1> <var:J> := <var:J> + <var:w0> \end{verbatim} Allow --- letting whole numbers $ <var:E> $ --- that $ <var:Z> = <var:E> $ before the execution of the program , it follows that we see $ <var:J> = <nat:4> \times <var:E> ^ <nat:3> + <nat:1> \times <var:E> ^ <nat:2> + <nat:2> \times <var:E> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:E> \} \\ <var:w1> := <var:Z> ; \\ \{ <var:Z> = <var:E> \land <var:w1> = <var:E> \} \\ <var:w2> := <var:w1> * <var:Z> ; \\ \{ <var:Z> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \} \\ <var:w3> := <var:w2> * <var:Z> ; \\ \{ <var:Z> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \} \\ <var:w0> := <nat:1> ; \\ \{ <var:Z> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w0> = <nat:1> \} \\ <var:w1> := <var:w1> * <nat:2> ; \\ \{ <var:Z> = <var:E> \land <var:w1> = <nat:2> * <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w0> = <nat:1> \} \\ <var:w2> := <var:w2> * <nat:1> ; \\ \{ <var:Z> = <var:E> \land <var:w1> = <nat:2> * <var:E> \land <var:w2> = <nat:1> * <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w0> = <nat:1> \} \\ <var:w3> := <var:w3> * <nat:4> ; \\ \{ <var:Z> = <var:E> \land <var:w1> = <nat:2> * <var:E> \land <var:w2> = <nat:1> * <var:E> ^ <nat:2> \land <var:w3> = <nat:4> * <var:E> ^ <nat:3> \land <var:w0> = <nat:1> \} \\ <var:J> := <var:w3> \\ \{ <var:Z> = <var:E> \land <var:w1> = <nat:2> * <var:E> \land <var:w2> = <nat:1> * <var:E> ^ <nat:2> \land <var:w0> = <nat:1> \land <var:J> = <nat:4> * <var:E> ^ <nat:3> \} \\ <var:J> := <var:J> + <var:w2> \\ \{ <var:Z> = <var:E> \land <var:w1> = <nat:2> * <var:E> \land <var:w0> = <nat:1> \land <var:J> = <nat:4> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:w1> \\ \{ <var:Z> = <var:E> \land <var:w0> = <nat:1> \land <var:J> = <nat:4> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> \} \\ <var:J> := <var:J> + <var:w0> \\ \{ <var:Z> = <var:E> \land <var:J> = <nat:4> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> \} \end{eqnarray} Applying Hoare logic finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:Z> = <var:E> }} <var:w1> := <var:Z> ; <var:w2> := <var:w1> * <var:Z> ; <var:w3> := <var:w2> * <var:Z> ; <var:w0> := <nat:1> ; <var:w1> := <var:w1> * <nat:2> ; <var:w2> := <var:w2> * <nat:1> ; <var:w3> := <var:w3> * <nat:4> ; <var:J> := <var:w3> <var:J> := <var:J> + <var:w2> <var:J> := <var:J> + <var:w1> <var:J> := <var:J> + <var:w0> {{ <var:J> = <nat:4> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:w1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:w1> = <nat:2> * <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:w1> = <nat:2> * <var:E> /\ <var:w2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:w1> = <nat:2> * <var:E> /\ <var:w2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:w3> = <nat:4> * <var:E> ^ <nat:3> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:w1> = <nat:2> * <var:E> /\ <var:w2> = <nat:1> * <var:E> ^ <nat:2> /\ <var:w0> = <nat:1> /\ <var:J> = <nat:4> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:w1> = <nat:2> * <var:E> /\ <var:w0> = <nat:1> /\ <var:J> = <nat:4> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:w0> = <nat:1> /\ <var:J> = <nat:4> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:E> /\ <var:J> = <nat:4> * <var:E> ^ <nat:3> + <nat:1> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 