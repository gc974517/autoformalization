\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:S> := <nat:3> ; <var:S> := <nat:2> + <var:S> * <var:i> ; <var:S> := <nat:3> + <var:S> * <var:i> ; <var:S> := <nat:3> + <var:S> * <var:i> ; <var:S> := <nat:2> + <var:S> * <var:i> ; <var:S> := <var:S> * <var:i> ; <var:S> := <nat:3> + <var:S> * <var:i> ; <var:S> := <nat:4> + <var:S> * <var:i> ; <var:S> := <nat:2> + <var:S> * <var:i> ; <var:S> := <nat:2> + <var:S> * <var:i> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:i> = <var:v> $ before running our code segment , it must be that we see $ <var:S> = <nat:3> \cdot <var:v> ^ <nat:9> + <nat:2> \cdot <var:v> ^ <nat:8> + <nat:3> \cdot <var:v> ^ <nat:7> + <nat:3> \cdot <var:v> ^ <nat:6> + <nat:2> \cdot <var:v> ^ <nat:5> + <nat:3> \cdot <var:v> ^ <nat:3> + <nat:4> \cdot <var:v> ^ <nat:2> + <nat:2> \cdot <var:v> + <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare logic gives us : \begin{eqnarray} \{ <var:i> = <var:v> \} \\ <var:S> := <nat:3> ; \\ \{ <var:i> = <var:v> \land <var:S> = <nat:3> \} \\ <var:S> := <nat:2> + <var:S> * <var:i> ; \\ \{ <var:i> = <var:v> \land <var:S> = <nat:3> * <var:v> + <nat:2> \} \\ <var:S> := <nat:3> + <var:S> * <var:i> ; \\ \{ <var:i> = <var:v> \land <var:S> = <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:3> \} \end{eqnarray} Furthering interpreting this set of commands results in : \begin{eqnarray} <var:S> := <nat:3> + <var:S> * <var:i> ; \\ \{ <var:i> = <var:v> \land <var:S> = <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:3> \} \\ <var:S> := <nat:2> + <var:S> * <var:i> ; \\ \{ <var:i> = <var:v> \land <var:S> = <nat:3> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> \} \\ <var:S> := <var:S> * <var:i> ; \\ \{ <var:i> = <var:v> \land <var:S> = <nat:3> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + \} \end{eqnarray} Allowing evaluating the set of instructions gives us : \begin{eqnarray} <var:S> := <nat:3> + <var:S> * <var:i> ; \\ \{ <var:i> = <var:v> \land <var:S> = <nat:3> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:3> \} \end{eqnarray} Continuing the evaluation of the set of instructions returns : \begin{eqnarray} <var:S> := <nat:4> + <var:S> * <var:i> ; \\ \{ <var:i> = <var:v> \land <var:S> = <nat:3> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + <nat:4> \} \\ <var:S> := <nat:2> + <var:S> * <var:i> ; \\ \{ <var:i> = <var:v> \land <var:S> = <nat:3> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> \} \\ <var:S> := <nat:2> + <var:S> * <var:i> \\ \{ <var:i> = <var:v> \land <var:S> = <nat:3> * <var:v> ^ <nat:9> + <nat:2> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:2> \} \end{eqnarray} Given the preceding argument , the code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:S> := <nat:3> ; <var:S> := <nat:2> + <var:S> * <var:i> ; <var:S> := <nat:3> + <var:S> * <var:i> ; <var:S> := <nat:3> + <var:S> * <var:i> ; <var:S> := <nat:2> + <var:S> * <var:i> ; <var:S> := <var:S> * <var:i> ; <var:S> := <nat:3> + <var:S> * <var:i> ; <var:S> := <nat:4> + <var:S> * <var:i> ; <var:S> := <nat:2> + <var:S> * <var:i> ; <var:S> := <nat:2> + <var:S> * <var:i> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:i> = <var:v> }} <def:poly> {{ <var:S> = <nat:3> * <var:v> ^ <nat:9> + <nat:2> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:S> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:S> = <nat:3> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:S> = <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:S> = <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:S> = <nat:3> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:S> = <nat:3> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:S> = <nat:3> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:S> = <nat:3> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:S> = <nat:3> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:v> /\ <var:S> = <nat:3> * <var:v> ^ <nat:9> + <nat:2> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 