\begin{document} \begin{theorem} Consider the following program in \emph{Imp} as follows \begin{verbatim} <var:y> := <nat:3> ; <var:y> := <nat:2> + <var:y> * <var:a> ; <var:y> := <nat:2> + <var:y> * <var:a> ; <var:y> := <var:y> * <var:a> ; <var:y> := <var:y> * <var:a> ; <var:y> := <nat:2> + <var:y> * <var:a> ; <var:y> := <nat:1> + <var:y> * <var:a> ; <var:y> := <var:y> * <var:a> ; <var:y> := <nat:3> + <var:y> * <var:a> ; <var:y> := <var:y> * <var:a> ; <var:y> := <nat:1> + <var:y> * <var:a> ; <var:y> := <var:y> * <var:a> ; <var:y> := <nat:3> + <var:y> * <var:a> ; <var:y> := <nat:4> + <var:y> * <var:a> \end{verbatim} Given $ <var:a> = <var:W> $ prior to executing the set of commands , it follows that we have $ <var:y> = <nat:3> \cdot <var:W> ^ <nat:13> + <nat:2> \cdot <var:W> ^ <nat:12> + <nat:2> \cdot <var:W> ^ <nat:11> + <nat:2> \cdot <var:W> ^ <nat:8> + <nat:1> \cdot <var:W> ^ <nat:7> + <nat:3> \cdot <var:W> ^ <nat:5> + <nat:1> \cdot <var:W> ^ <nat:3> + <nat:3> \cdot <var:W> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for the set of commands can be demonstrated with standard Hoare reasoning . Going forward , the binding line yielding $ <nat:3> $ to $ <var:y>$ . This code advances the precondition $ \{ <var:a> = <var:W> \} $ to $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> \} $ . Moving on , we see the variable assignmet command assigning $ <nat:2> + <var:y> * <var:a> $ as $ <var:y>$ . This line redefines the condition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> \} $ as the postcondition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> + <nat:2> \} $ . This is given through the assignment law obtained from typical Hoare techniques . After , we have the assignment code \verb | <var:y> := <nat:2> + <var:y> * <var:a> ; | . This forwards the precondition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> + <nat:2> \} $ toward the postcondition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:2> \} $ . Now , we have the variable update command defining $ <var:y> * <var:a> $ toward $ <var:y>$ . This redefines $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:2> \} $ to $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + \} $ . Advancing , we have the variable assignmet command \verb | <var:y> := <var:y> * <var:a> ; | . This transfers the precondition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + \} $ into the condition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + \} $ . Advancing , we see the variable assignmet command binding $ <nat:2> + <var:y> * <var:a> $ toward $ <var:y>$ . This redefines the precondition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + \} $ as $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> \} $ . Moving on , we see the statement \verb | <var:y> := <nat:1> + <var:y> * <var:a> ; | . This moves $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> \} $ into the condition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> + <nat:1> \} $ . Observing the upcoming piece of code found in the series of instructions , the binding line binding $ <var:y> * <var:a> $ as $ <var:y>$ . This command moves the precondition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> + <nat:1> \} $ as $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + \} $ . This is given by the assignment rule from usual Hoare logic . Now , we see the environment update command \verb | <var:y> := <nat:3> + <var:y> * <var:a> ; | . This forwards $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + \} $ into the condition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> \} $ . Keeping momentum , we have the binding command \verb | <var:y> := <var:y> * <var:a> ; | . This statement takes the precondition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> \} $ into the condition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:3> * <var:W> + \} $ . This is rigorously given using the assignment law given by typical Hoare reasoning . Advancing , we have the variable assignmet line \verb | <var:y> := <nat:1> + <var:y> * <var:a> ; | . This code forwards the precondition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:3> * <var:W> + \} $ toward the condition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:10> + <nat:2> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:2> + <nat:1> \} $ . Further , we see the assignment command giving $ <var:y> * <var:a> $ to $ <var:y>$ . This code takes the condition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:10> + <nat:2> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:2> + <nat:1> \} $ as $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:11> + <nat:2> * <var:W> ^ <nat:10> + <nat:2> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> + \} $ . Going to the next step , we have the variable update statement \verb | <var:y> := <nat:3> + <var:y> * <var:a> ; | . This line moves the precondition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:11> + <nat:2> * <var:W> ^ <nat:10> + <nat:2> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> + \} $ into the postcondition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:12> + <nat:2> * <var:W> ^ <nat:11> + <nat:2> * <var:W> ^ <nat:10> + <nat:2> * <var:W> ^ <nat:7> + <nat:1> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> \} $ . This is shown to be logically sound using the assignment law given by standard Hoare logic . Considering the proceeding command in our set of commands , we see the variable assignmet command binding $ <nat:4> + <var:y> * <var:a$ to $ <var:y>$ . This transfers the precondition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:12> + <nat:2> * <var:W> ^ <nat:11> + <nat:2> * <var:W> ^ <nat:10> + <nat:2> * <var:W> ^ <nat:7> + <nat:1> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> \} $ to the postcondition $ \{ <var:a> = <var:W> \land <var:y> = <nat:3> * <var:W> ^ <nat:13> + <nat:2> * <var:W> ^ <nat:12> + <nat:2> * <var:W> ^ <nat:11> + <nat:2> * <var:W> ^ <nat:8> + <nat:1> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:3> + <nat:3> * <var:W> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:a> = <var:W> }} <var:y> := <nat:3> ; <var:y> := <nat:2> + <var:y> * <var:a> ; <var:y> := <nat:2> + <var:y> * <var:a> ; <var:y> := <var:y> * <var:a> ; <var:y> := <var:y> * <var:a> ; <var:y> := <nat:2> + <var:y> * <var:a> ; <var:y> := <nat:1> + <var:y> * <var:a> ; <var:y> := <var:y> * <var:a> ; <var:y> := <nat:3> + <var:y> * <var:a> ; <var:y> := <var:y> * <var:a> ; <var:y> := <nat:1> + <var:y> * <var:a> ; <var:y> := <var:y> * <var:a> ; <var:y> := <nat:3> + <var:y> * <var:a> ; <var:y> := <nat:4> + <var:y> * <var:a> {{ <var:y> = <nat:3> * <var:W> ^ <nat:13> + <nat:2> * <var:W> ^ <nat:12> + <nat:2> * <var:W> ^ <nat:11> + <nat:2> * <var:W> ^ <nat:8> + <nat:1> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:3> + <nat:3> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:4> + <nat:2> * <var:W> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:5> + <nat:2> * <var:W> ^ <nat:2> + <nat:1> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:6> + <nat:2> * <var:W> ^ <nat:3> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:7> + <nat:2> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:3> + <nat:3> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:10> + <nat:2> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:8> + <nat:2> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:4> + <nat:3> * <var:W> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:11> + <nat:2> * <var:W> ^ <nat:10> + <nat:2> * <var:W> ^ <nat:9> + <nat:2> * <var:W> ^ <nat:6> + <nat:1> * <var:W> ^ <nat:5> + <nat:3> * <var:W> ^ <nat:3> + <nat:1> * <var:W> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:12> + <nat:2> * <var:W> ^ <nat:11> + <nat:2> * <var:W> ^ <nat:10> + <nat:2> * <var:W> ^ <nat:7> + <nat:1> * <var:W> ^ <nat:6> + <nat:3> * <var:W> ^ <nat:4> + <nat:1> * <var:W> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:W> /\ <var:y> = <nat:3> * <var:W> ^ <nat:13> + <nat:2> * <var:W> ^ <nat:12> + <nat:2> * <var:W> ^ <nat:11> + <nat:2> * <var:W> ^ <nat:8> + <nat:1> * <var:W> ^ <nat:7> + <nat:3> * <var:W> ^ <nat:5> + <nat:1> * <var:W> ^ <nat:3> + <nat:3> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 