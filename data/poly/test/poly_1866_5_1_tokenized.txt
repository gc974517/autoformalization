\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B1> := <var:x> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:5> ; <var:E> := <var:B1> <var:E> := <var:E> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:x> = <var:F> $ --- for every positive integer coefficients $ <var:F> $ --- ahead of interpreting this segment of code , then we see $ <var:E> = <nat:5> \cdot <var:F> + <nat:7> $ after code segment has terminated . \end{theorem} \begin{proof} Arguing the correctness of this series of instructions is accomplished by Hoare techniques . Moving on , the line yielding $ <var:x> $ toward $ <var:B1>$ . This statement forwards the condition $ \{ <var:x> = <var:F> \} $ into the condition $ \{ <var:x> = <var:F> \land <var:B1> = <var:F> \} $ . This is sound through the assignment scheme defined by Hoare reasoning . Immediately following , the assignment statement \verb | <var:B0> := <nat:7> ; | . This command forwards the condition $ \{ <var:x> = <var:F> \land <var:B1> = <var:F> \} $ to $ \{ <var:x> = <var:F> \land <var:B1> = <var:F> \land <var:B0> = <nat:7> \} $ . This is rigorously given by the assignment rule found in typical Hoare logic . Immediately after , we see the variable update line \verb | <var:B1> := <var:B1> * <nat:5> ; | . This code takes $ \{ <var:x> = <var:F> \land <var:B1> = <var:F> \land <var:B0> = <nat:7> \} $ to the condition $ \{ <var:x> = <var:F> \land <var:B1> = <nat:5> \cdot <var:F> \land <var:B0> = <nat:7> \} $ . This is known to be sound by the assignment inference rule given in usual Hoare reasoning . Keeping momentum , we see the variable assignmet line binding $ <var:B1$ toward $ <var:E>$ . This moves the precondition $ \{ <var:x> = <var:F> \land <var:B1> = <nat:5> \cdot <var:F> \land <var:B0> = <nat:7> \} $ as $ \{ <var:x> = <var:F> \land <var:B0> = <nat:7> \land <var:E> = <nat:5> \cdot <var:F> \} $ . After , the variable assignmet code giving $ <var:E> + <var:B0$ toward $ <var:E>$ . This statement takes $ \{ <var:x> = <var:F> \land <var:B0> = <nat:7> \land <var:E> = <nat:5> \cdot <var:F> \} $ as $ \{ <var:x> = <var:F> \land <var:E> = <nat:5> \cdot <var:F> + <nat:7> \} $ . This is shown with the assignment inference rule defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B1> := <var:x> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:5> ; <var:E> := <var:B1> <var:E> := <var:E> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:x> = <var:F> }} <def:poly> {{ <var:E> = <nat:5> * <var:F> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:B1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:B1> = <var:F> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:B1> = <nat:5> * <var:F> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:B0> = <nat:7> /\ <var:E> = <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:E> = <nat:5> * <var:F> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 