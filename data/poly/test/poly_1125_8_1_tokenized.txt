\begin{document} \begin{theorem} We define a program as follows \begin{verbatim} <var:g1> := <var:d> ; <var:g2> := <var:g1> * <var:d> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:7> ; <var:g2> := <var:g2> * <nat:8> ; <var:B> := <var:g2> <var:B> := <var:B> + <var:g1> <var:B> := <var:B> + <var:g0> \end{verbatim} Assume $ <var:d> = <var:r> $ prior to the evaluation of the list of commands , it must be that we have $ <var:B> = <nat:8> \times <var:r> ^ <nat:2> + <nat:7> \times <var:r> + <nat:2> $ once code segment has exited . \end{theorem} \begin{proof} Proving correctness for the program is evident using Hoare techniques . Observing the following commands seen in our program , \[ \begin{tabular} {rcl} \{ <var:d> = <var:r> \} & <var:g1> := <var:d> & \{ <var:d> = <var:r> \land <var:g1> = <var:r> \} \\ \{ <var:d> = <var:r> \land <var:g1> = <var:r> \} & <var:g2> := <var:g1> * <var:d> & \{ <var:d> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> \} \\ \{ <var:d> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> \} & <var:g0> := <nat:2> & \{ <var:d> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> \land <var:g0> = <nat:2> \} \\ \{ <var:d> = <var:r> \land <var:g1> = <var:r> \land <var:g2> = <var:r> ^ <nat:2> \land <var:g0> = <nat:2> \} & <var:g1> := <var:g1> * <nat:7> & \{ <var:d> = <var:r> \land <var:g1> = <nat:7> \cdot <var:r> \land <var:g2> = <var:r> ^ <nat:2> \land <var:g0> = <nat:2> \} \\ \{ <var:d> = <var:r> \land <var:g1> = <nat:7> \cdot <var:r> \land <var:g2> = <var:r> ^ <nat:2> \land <var:g0> = <nat:2> \} & <var:g2> := <var:g2> * <nat:8> & \{ <var:d> = <var:r> \land <var:g1> = <nat:7> \cdot <var:r> \land <var:g2> = <nat:8> \cdot <var:r> ^ <nat:2> \land <var:g0> = <nat:2> \} \end{tabular} This is guaranteed by the variable assignmet inference rule found in Hoare reasoning . Following , \[ \begin{tabular} {rcl} \{ <var:d> = <var:r> \} & <var:g1> := <var:d> & \{ <var:d> = <var:r> \land <var:g1> = <var:r> \} \end{tabular} Advancing on , we have \[ \begin{tabular} {rcl} \{ <var:d> = <var:r> \} & <var:g1> := <var:d> & \{ <var:d> = <var:r> \land <var:g1> = <var:r> \} \end{tabular} This is deduced through the binding scheme found in usual Hoare techniques . Immediately following , \[ \begin{tabular} {rcl} \{ <var:d> = <var:r> \} & <var:g1> := <var:d> & \{ <var:d> = <var:r> \land <var:g1> = <var:r> \} \end{tabular} This is sound using the variable binding scheme found in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:d> = <var:r> }} <var:g1> := <var:d> ; <var:g2> := <var:g1> * <var:d> ; <var:g0> := <nat:2> ; <var:g1> := <var:g1> * <nat:7> ; <var:g2> := <var:g2> * <nat:8> ; <var:B> := <var:g2> <var:B> := <var:B> + <var:g1> <var:B> := <var:B> + <var:g0> {{ <var:B> = <nat:8> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:g1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:g1> = <var:r> /\ <var:g2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:g1> = <var:r> /\ <var:g2> = <var:r> ^ <nat:2> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:g1> = <nat:7> * <var:r> /\ <var:g2> = <var:r> ^ <nat:2> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:g1> = <nat:7> * <var:r> /\ <var:g2> = <nat:8> * <var:r> ^ <nat:2> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:g1> = <nat:7> * <var:r> /\ <var:g0> = <nat:2> /\ <var:B> = <nat:8> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:g0> = <nat:2> /\ <var:B> = <nat:8> * <var:r> ^ <nat:2> + <nat:7> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:r> /\ <var:B> = <nat:8> * <var:r> ^ <nat:2> + <nat:7> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 