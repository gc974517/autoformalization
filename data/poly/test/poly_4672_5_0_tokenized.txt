\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:5> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:y> ; <var:e> := <var:F1> ; <var:e> := <var:e> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> . Assume it to hold that $ <var:y> = <var:J> $ before the evaluation of our list of instructions , it follows that we see $ <var:e> = <nat:4> * <var:J> + <nat:5> $ when list of instructions is done executing . \end{theorem} \begin{proof} The way to prove correctness for our segment of code can be accomplished through Hoare logic . Moving onward , we have \verb | { <var:y> = <var:J> } <var:F0> := <nat:5> { <var:y> = <var:J> \land <var:F0> = <nat:5> } | , \verb | { <var:y> = <var:J> \land <var:F0> = <nat:5> } <var:F1> := <nat:4> { <var:y> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:4> } | and \verb | { <var:y> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:4> } <var:F1> := <var:F1> * <var:y> { <var:y> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:4> * <var:J> } | . Advancing on , we have \verb | { <var:y> = <var:J> } <var:F0> := <nat:5> { <var:y> = <var:J> \land <var:F0> = <nat:5> } | and \verb | { <var:y> = <var:J> \land <var:F0> = <nat:5> } <var:F1> := <nat:4> { <var:y> = <var:J> \land <var:F0> = <nat:5> \land <var:F1> = <nat:4> } | . This is rigorously given through the variable assignmet rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <def:poly> := <var:F0> := <nat:5> ; <var:F1> := <nat:4> ; <var:F1> := <var:F1> * <var:y> ; <var:e> := <var:F1> ; <var:e> := <var:e> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:y> = <var:J> }} <def:poly> {{ <var:e> = <nat:4> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:F0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:F0> = <nat:5> /\ <var:F1> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:F0> = <nat:5> /\ <var:e> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:J> /\ <var:e> = <nat:4> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 