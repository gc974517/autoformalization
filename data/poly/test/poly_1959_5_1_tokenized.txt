\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:d1> := <var:Q> ; <var:d0> := <nat:6> ; <var:d1> := <var:d1> * <nat:3> ; <var:T> := <var:d1> <var:T> := <var:T> + <var:d0> \end{verbatim} Given $ <var:Q> = <var:o> $ letting natural coefficients $ <var:o> $ before executing the code segment , it must be that $ <var:T> = <nat:3> \times <var:o> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:o> \} \\ <var:d1> := <var:Q> ; \\ \{ <var:Q> = <var:o> \land <var:d1> = <var:o> \} \\ <var:d0> := <nat:6> ; \\ \{ <var:Q> = <var:o> \land <var:d1> = <var:o> \land <var:d0> = <nat:6> \} \\ <var:d1> := <var:d1> * <nat:3> ; \\ \{ <var:Q> = <var:o> \land <var:d1> = <nat:3> \cdot <var:o> \land <var:d0> = <nat:6> \} \\ <var:T> := <var:d1> \\ \{ <var:Q> = <var:o> \land <var:d0> = <nat:6> \land <var:T> = <nat:3> \cdot <var:o> \} \\ <var:T> := <var:T> + <var:d0> \\ \{ <var:Q> = <var:o> \land <var:T> = <nat:3> \cdot <var:o> + <nat:6> \} \end{eqnarray} Applying typical Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:Q> = <var:o> }} <var:d1> := <var:Q> ; <var:d0> := <nat:6> ; <var:d1> := <var:d1> * <nat:3> ; <var:T> := <var:d1> <var:T> := <var:T> + <var:d0> {{ <var:T> = <nat:3> * <var:o> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:o> /\ <var:d1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:o> /\ <var:d1> = <var:o> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:o> /\ <var:d1> = <nat:3> * <var:o> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:o> /\ <var:d0> = <nat:6> /\ <var:T> = <nat:3> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:o> /\ <var:T> = <nat:3> * <var:o> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 