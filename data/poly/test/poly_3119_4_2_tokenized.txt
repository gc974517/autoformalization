\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A> := <nat:2> ; <var:A> := <nat:1> + <var:A> * <var:p> ; <var:A> := <nat:3> + <var:A> * <var:p> ; <var:A> := <nat:3> + <var:A> * <var:p> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:p> = <var:L> $ --- letting $ <var:L> \in \mathbb{N} $ --- ahead of the execution of the series of instructions it holds that we see $ <var:A> = <nat:2> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:L> \} \\ <var:A> := <nat:2> ; \\ \{ <var:p> = <var:L> \land <var:A> = <nat:2> \} \\ <var:A> := <nat:1> + <var:A> * <var:p> ; \\ \{ <var:p> = <var:L> \land <var:A> = <nat:2> \times <var:L> + <nat:1> \} \\ <var:A> := <nat:3> + <var:A> * <var:p> ; \\ \{ <var:p> = <var:L> \land <var:A> = <nat:2> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:3> \} \\ <var:A> := <nat:3> + <var:A> * <var:p> \\ \{ <var:p> = <var:L> \land <var:A> = <nat:2> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:3> \} \end{eqnarray} Applying typical Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:A> := <nat:2> ; <var:A> := <nat:1> + <var:A> * <var:p> ; <var:A> := <nat:3> + <var:A> * <var:p> ; <var:A> := <nat:3> + <var:A> * <var:p> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:p> = <var:L> }} <def:poly> {{ <var:A> = <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:L> /\ <var:A> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:L> /\ <var:A> = <nat:2> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:L> /\ <var:A> = <nat:2> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:L> /\ <var:A> = <nat:2> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 