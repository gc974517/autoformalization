\begin{document} \begin{theorem} Take a program such that \begin{verbatim} <var:z1> := <var:o> ; <var:z2> := <var:z1> * <var:o> ; <var:z3> := <var:z2> * <var:o> ; <var:z4> := <var:z3> * <var:o> ; <var:z0> := <nat:2> ; <var:z1> := <var:z1> * <nat:9> ; <var:z2> := <var:z2> * <nat:6> ; <var:z3> := <var:z3> * <nat:4> ; <var:z4> := <var:z4> * <nat:7> ; <var:T> := <var:z4> <var:T> := <var:T> + <var:z3> <var:T> := <var:T> + <var:z2> <var:T> := <var:T> + <var:z1> <var:T> := <var:T> + <var:z0> \end{verbatim} Given it to be that $ <var:o> = <var:Y> $ ahead of the evaluation of the program then we have $ <var:T> = <nat:7> \cdot <var:Y> ^ <nat:4> + <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:6> \cdot <var:Y> ^ <nat:2> + <nat:9> \cdot <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning results in : \begin{eqnarray} \{ <var:o> = <var:Y> \} \\ <var:z1> := <var:o> ; \\ \{ <var:o> = <var:Y> \land <var:z1> = <var:Y> \} \\ <var:z2> := <var:z1> * <var:o> ; \\ \{ <var:o> = <var:Y> \land <var:z1> = <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \} \\ <var:z3> := <var:z2> * <var:o> ; \\ \{ <var:o> = <var:Y> \land <var:z1> = <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \land <var:z3> = <var:Y> ^ <nat:3> \} \\ <var:z4> := <var:z3> * <var:o> ; \\ \{ <var:o> = <var:Y> \land <var:z1> = <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \land <var:z3> = <var:Y> ^ <nat:3> \land <var:z4> = <var:Y> ^ <nat:4> \} \\ <var:z0> := <nat:2> ; \\ \{ <var:o> = <var:Y> \land <var:z1> = <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \land <var:z3> = <var:Y> ^ <nat:3> \land <var:z4> = <var:Y> ^ <nat:4> \land <var:z0> = <nat:2> \} \\ <var:z1> := <var:z1> * <nat:9> ; \\ \{ <var:o> = <var:Y> \land <var:z1> = <nat:9> * <var:Y> \land <var:z2> = <var:Y> ^ <nat:2> \land <var:z3> = <var:Y> ^ <nat:3> \land <var:z4> = <var:Y> ^ <nat:4> \land <var:z0> = <nat:2> \} \\ <var:z2> := <var:z2> * <nat:6> ; \\ \{ <var:o> = <var:Y> \land <var:z1> = <nat:9> * <var:Y> \land <var:z2> = <nat:6> * <var:Y> ^ <nat:2> \land <var:z3> = <var:Y> ^ <nat:3> \land <var:z4> = <var:Y> ^ <nat:4> \land <var:z0> = <nat:2> \} \\ <var:z3> := <var:z3> * <nat:4> ; \\ \{ <var:o> = <var:Y> \land <var:z1> = <nat:9> * <var:Y> \land <var:z2> = <nat:6> * <var:Y> ^ <nat:2> \land <var:z3> = <nat:4> * <var:Y> ^ <nat:3> \land <var:z4> = <var:Y> ^ <nat:4> \land <var:z0> = <nat:2> \} \\ <var:z4> := <var:z4> * <nat:7> ; \\ \{ <var:o> = <var:Y> \land <var:z1> = <nat:9> * <var:Y> \land <var:z2> = <nat:6> * <var:Y> ^ <nat:2> \land <var:z3> = <nat:4> * <var:Y> ^ <nat:3> \land <var:z4> = <nat:7> * <var:Y> ^ <nat:4> \land <var:z0> = <nat:2> \} \\ <var:T> := <var:z4> \\ \{ <var:o> = <var:Y> \land <var:z1> = <nat:9> * <var:Y> \land <var:z2> = <nat:6> * <var:Y> ^ <nat:2> \land <var:z3> = <nat:4> * <var:Y> ^ <nat:3> \land <var:z0> = <nat:2> \land <var:T> = <nat:7> * <var:Y> ^ <nat:4> \} \\ <var:T> := <var:T> + <var:z3> \\ \{ <var:o> = <var:Y> \land <var:z1> = <nat:9> * <var:Y> \land <var:z2> = <nat:6> * <var:Y> ^ <nat:2> \land <var:z0> = <nat:2> \land <var:T> = <nat:7> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:z2> \\ \{ <var:o> = <var:Y> \land <var:z1> = <nat:9> * <var:Y> \land <var:z0> = <nat:2> \land <var:T> = <nat:7> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:z1> \\ \{ <var:o> = <var:Y> \land <var:z0> = <nat:2> \land <var:T> = <nat:7> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> \} \end{eqnarray} Allowing executing our set of commands produces : \begin{eqnarray} <var:T> := <var:T> + <var:z0> \\ \{ <var:o> = <var:Y> \land <var:T> = <nat:7> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:2> \} \end{eqnarray} Given the preceding argument , this code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <var:z4> : string := " <var:z4> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:o> = <var:Y> }} <var:z1> := <var:o> ; <var:z2> := <var:z1> * <var:o> ; <var:z3> := <var:z2> * <var:o> ; <var:z4> := <var:z3> * <var:o> ; <var:z0> := <nat:2> ; <var:z1> := <var:z1> * <nat:9> ; <var:z2> := <var:z2> * <nat:6> ; <var:z3> := <var:z3> * <nat:4> ; <var:z4> := <var:z4> * <nat:7> ; <var:T> := <var:z4> <var:T> := <var:T> + <var:z3> <var:T> := <var:T> + <var:z2> <var:T> := <var:T> + <var:z1> <var:T> := <var:T> + <var:z0> {{ <var:T> = <nat:7> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:z1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:z1> = <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:z1> = <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> /\ <var:z3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:z1> = <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> /\ <var:z3> = <var:Y> ^ <nat:3> /\ <var:z4> = <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:z1> = <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> /\ <var:z3> = <var:Y> ^ <nat:3> /\ <var:z4> = <var:Y> ^ <nat:4> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:z1> = <nat:9> * <var:Y> /\ <var:z2> = <var:Y> ^ <nat:2> /\ <var:z3> = <var:Y> ^ <nat:3> /\ <var:z4> = <var:Y> ^ <nat:4> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:z1> = <nat:9> * <var:Y> /\ <var:z2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:z3> = <var:Y> ^ <nat:3> /\ <var:z4> = <var:Y> ^ <nat:4> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:z1> = <nat:9> * <var:Y> /\ <var:z2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:z3> = <nat:4> * <var:Y> ^ <nat:3> /\ <var:z4> = <var:Y> ^ <nat:4> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:z1> = <nat:9> * <var:Y> /\ <var:z2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:z3> = <nat:4> * <var:Y> ^ <nat:3> /\ <var:z4> = <nat:7> * <var:Y> ^ <nat:4> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:z1> = <nat:9> * <var:Y> /\ <var:z2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:z3> = <nat:4> * <var:Y> ^ <nat:3> /\ <var:z0> = <nat:2> /\ <var:T> = <nat:7> * <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:z1> = <nat:9> * <var:Y> /\ <var:z2> = <nat:6> * <var:Y> ^ <nat:2> /\ <var:z0> = <nat:2> /\ <var:T> = <nat:7> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:z1> = <nat:9> * <var:Y> /\ <var:z0> = <nat:2> /\ <var:T> = <nat:7> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:z0> = <nat:2> /\ <var:T> = <nat:7> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:T> = <nat:7> * <var:Y> ^ <nat:4> + <nat:4> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 