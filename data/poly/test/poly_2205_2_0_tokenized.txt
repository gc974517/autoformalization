\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:1> ; <var:E> := <var:i0> \end{verbatim} Given it to hold that $ <var:S> = <var:K> $ , given any whole numbers $ <var:K> $ , prior to the execution of this list of commands it follows that we see $ <var:E> = <nat:1> $ . \end{theorem} \begin{proof} The method of proof for this program is demonstrated using usual Hoare logic . Advancing on , we have the variable update command giving $ <nat:1> $ toward $ <var:i0>$ . This line transfers $ \{ <var:S> = <var:K> \} $ to the postcondition $ \{ <var:S> = <var:K> \land <var:i0> = <nat:1> \} $ . This is known to be sound using the assignment scheme given in Hoare logic . Focusing on the next statement found in the set of instructions , we see the binding statement assigning $ <var:i0$ to $ <var:E>$ . This takes $ \{ <var:S> = <var:K> \land <var:i0> = <nat:1> \} $ as the postcondition $ \{ <var:S> = <var:K> \land <var:E> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:S> = <var:K> }} <var:i0> := <nat:1> ; <var:E> := <var:i0> {{ <var:E> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:K> /\ <var:E> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 