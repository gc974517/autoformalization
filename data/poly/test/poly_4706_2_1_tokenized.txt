\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:3> ; <var:R> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:q> = <var:k> $ with some $ <var:k> \in \mathbb{N} $ ahead of the evaluation of the series of commands it holds that we have $ <var:R> = <nat:3> $ . \end{theorem} \begin{proof} The proof of this series of instructions is accomplished through Hoare logic . Advancing , \[ \begin{tabular} {rcl} \{ <var:q> = <var:k> \} & <var:A0> := <nat:3> & \{ <var:q> = <var:k> \land <var:A0> = <nat:3> \} \end{tabular} Jumping to the proceeding statement found in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:q> = <var:k> \} & <var:A0> := <nat:3> & \{ <var:q> = <var:k> \land <var:A0> = <nat:3> \} \end{tabular} This is deduced by the variable binding law from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:3> ; <var:R> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:q> = <var:k> }} <def:poly> {{ <var:R> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:k> /\ <var:R> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 