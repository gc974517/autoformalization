\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:y> := <nat:1> ; <var:y> := <nat:4> + <var:y> * <var:C> ; <var:y> := <nat:2> + <var:y> * <var:C> ; <var:y> := <var:y> * <var:C> ; <var:y> := <nat:3> + <var:y> * <var:C> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:C> = <var:E> $ before executing the segment of code , it must be that $ <var:y> = <nat:1> \cdot <var:E> ^ <nat:4> + <nat:4> \cdot <var:E> ^ <nat:3> + <nat:2> \cdot <var:E> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of instructions is demonstrated with the below decorated code . \begin{eqnarray} \{ <var:C> = <var:E> \} \\ <var:y> := <nat:1> ; \\ \{ <var:C> = <var:E> \land <var:y> = <nat:1> \} \\ <var:y> := <nat:4> + <var:y> * <var:C> ; \\ \{ <var:C> = <var:E> \land <var:y> = <nat:1> * <var:E> + <nat:4> \} \\ <var:y> := <nat:2> + <var:y> * <var:C> ; \\ \{ <var:C> = <var:E> \land <var:y> = <nat:1> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> \} \\ <var:y> := <var:y> * <var:C> ; \\ \{ <var:C> = <var:E> \land <var:y> = <nat:1> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + \} \\ <var:y> := <nat:3> + <var:y> * <var:C> \\ \{ <var:C> = <var:E> \land <var:y> = <nat:1> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> \} \end{eqnarray} Utilizing Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:y> := <nat:1> ; <var:y> := <nat:4> + <var:y> * <var:C> ; <var:y> := <nat:2> + <var:y> * <var:C> ; <var:y> := <var:y> * <var:C> ; <var:y> := <nat:3> + <var:y> * <var:C> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:C> = <var:E> }} <def:poly> {{ <var:y> = <nat:1> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:y> = <nat:1> * <var:E> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:y> = <nat:1> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:y> = <nat:1> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ^ <nat:2> + <nat:2> * <var:E> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:E> /\ <var:y> = <nat:1> * <var:E> ^ <nat:4> + <nat:4> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 