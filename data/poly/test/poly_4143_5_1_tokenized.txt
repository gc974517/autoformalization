\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:m1> := <var:y> ; <var:m0> := <nat:6> ; <var:m1> := <var:m1> * <nat:2> ; <var:v> := <var:m1> <var:v> := <var:v> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> in \emph{Imp} . Assuming that $ <var:y> = <var:Z> $ prior to the execution of this program it must be that we have $ <var:v> = <nat:2> \cdot <var:Z> + <nat:6> $ when segment of code has terminated . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands can be demonstrated through typical Hoare logic . Taking a look at the upcoming lines found in our segment of code , we have \begin{verbatim} { <var:y> = <var:Z> } <var:m1> := <var:y> { <var:y> = <var:Z> \land <var:m1> = <var:Z> } { <var:y> = <var:Z> \land <var:m1> = <var:Z> } <var:m0> := <nat:6> { <var:y> = <var:Z> \land <var:m1> = <var:Z> \land <var:m0> = <nat:6> } { <var:y> = <var:Z> \land <var:m1> = <var:Z> \land <var:m0> = <nat:6> } <var:m1> := <var:m1> * <nat:2> { <var:y> = <var:Z> \land <var:m1> = <nat:2> \cdot <var:Z> \land <var:m0> = <nat:6> } { <var:y> = <var:Z> \land <var:m1> = <nat:2> \cdot <var:Z> \land <var:m0> = <nat:6> } <var:v> := <var:m1{ <var:y> = <var:Z> \land <var:m0> = <nat:6> \land <var:v> = <nat:2> \cdot <var:Z> } { <var:y> = <var:Z> \land <var:m0> = <nat:6> \land <var:v> = <nat:2> \cdot <var:Z> } <var:v> := <var:v> + <var:m0{ <var:y> = <var:Z> \land <var:v> = <nat:2> \cdot <var:Z> + <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:y> ; <var:m0> := <nat:6> ; <var:m1> := <var:m1> * <nat:2> ; <var:v> := <var:m1> <var:v> := <var:v> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:y> = <var:Z> }} <def:poly> {{ <var:v> = <nat:2> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:m1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:m1> = <var:Z> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:m1> = <nat:2> * <var:Z> /\ <var:m0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:m0> = <nat:6> /\ <var:v> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Z> /\ <var:v> = <nat:2> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 