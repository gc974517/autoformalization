\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:5> ; <var:E> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> . Allowing --- given all $ <var:I> $ --- $ <var:C> = <var:I> $ prior to running the code it must be that $ <var:E> = <nat:5> $ when set of commands has exited . \end{theorem} \begin{proof} Arguing the correctness of this list of instructions can be demonstrated through usual Hoare reasoning . Further , we have the assignment command \verb | <var:U0> := <nat:5> ; | . This advances the precondition $ \{ <var:C> = <var:I> \} $ to $ \{ <var:C> = <var:I> \land <var:U0> = <nat:5> \} $ . Advancing to the next step , we see the environment update statement \verb | <var:E> := <var:U0> | . This takes the condition $ \{ <var:C> = <var:I> \land <var:U0> = <nat:5> \} $ as $ \{ <var:C> = <var:I> \land <var:E> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:5> ; <var:E> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:C> = <var:I> }} <def:poly> {{ <var:E> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:U0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:E> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 