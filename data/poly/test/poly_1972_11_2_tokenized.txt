\begin{document} \begin{theorem} Take a list of commands in \emph{Imp} : \begin{verbatim} <var:B> := <nat:4> ; <var:B> := <nat:2> + <var:B> * <var:i> ; <var:B> := <var:B> * <var:i> ; <var:B> := <nat:2> + <var:B> * <var:i> ; <var:B> := <nat:2> + <var:B> * <var:i> ; <var:B> := <var:B> * <var:i> ; <var:B> := <nat:4> + <var:B> * <var:i> ; <var:B> := <nat:3> + <var:B> * <var:i> ; <var:B> := <nat:2> + <var:B> * <var:i> ; <var:B> := <nat:1> + <var:B> * <var:i> ; <var:B> := <nat:2> + <var:B> * <var:i> \end{verbatim} Allow it to be that $ <var:i> = <var:p> $ --- with some natural coefficients $ <var:p> $ --- prior to the execution of the series of instructions it follows that we have $ <var:B> = <nat:4> \times <var:p> ^ <nat:10> + <nat:2> \times <var:p> ^ <nat:9> + <nat:2> \times <var:p> ^ <nat:7> + <nat:2> \times <var:p> ^ <nat:6> + <nat:4> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this list of instructions can be given by Hoare techniques . Stepping through , we have the variable binding line yielding $ <nat:4> $ to $ <var:B>$ . This line redefines $ \{ <var:i> = <var:p> \} $ toward the postcondition $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> \} $ . This is ensured using the assignment scheme given by Hoare logic . Taking another step toward the following line contained in the code , we see the assignment line \verb | <var:B> := <nat:2> + <var:B> * <var:i> ; | . This line forwards $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> \} $ into $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> + <nat:2> \} $ . This is guaranteed by the assignment rule obtained from usual Hoare techniques . Keeping momentum , the variable binding command binding $ <var:B> * <var:i> $ to $ <var:B>$ . This command forwards the precondition $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> + <nat:2> \} $ to the condition $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + \} $ . Shifting focus toward the next piece of code in the series of commands , we see the variable update statement giving $ <nat:2> + <var:B> * <var:i> $ into $ <var:B>$ . This moves the condition $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + \} $ toward the postcondition $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> \} $ . Going to the next step , the variable binding line \verb | <var:B> := <nat:2> + <var:B> * <var:i> ; | . This code moves the precondition $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> \} $ as $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> + <nat:2> \} $ . This is rigorously given using the assignment inference rule obtained from usual Hoare techniques . Considering the subsequent bit of code found in our segment of code , we have the binding statement \verb | <var:B> := <var:B> * <var:i> ; | . This code transfers $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> + <nat:2> \} $ into $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + \} $ . Advancing , we have the statement binding $ <nat:4> + <var:B> * <var:i> $ toward $ <var:B>$ . This takes the condition $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + \} $ to the condition $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> \} $ . Shifting focus toward the following statement found in our set of commands , we have the line defining $ <nat:3> + <var:B> * <var:i> $ toward $ <var:B>$ . This advances the condition $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> \} $ as the condition $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + <nat:3> \} $ . Jumping to the following step contained in our segment of code , the variable assignmet statement \verb | <var:B> := <nat:2> + <var:B> * <var:i> ; | . This code advances $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + <nat:3> \} $ as the postcondition $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:2> \} $ . This is known to be sound by the assignment law given by typical Hoare logic . Moving on to the following command in the set of instructions , we have the assignment line \verb | <var:B> := <nat:1> + <var:B> * <var:i> ; | . This moves the condition $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:2> \} $ to $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> \} $ . This is shown through the assignment inference rule given in typical Hoare techniques . Jumping to the proceeding bit of code contained in the program , we have the statement assigning $ <nat:2> + <var:B> * <var:i$ toward $ <var:B>$ . This code advances $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> \} $ toward the postcondition $ \{ <var:i> = <var:p> \land <var:B> = <nat:4> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:i> = <var:p> }} <var:B> := <nat:4> ; <var:B> := <nat:2> + <var:B> * <var:i> ; <var:B> := <var:B> * <var:i> ; <var:B> := <nat:2> + <var:B> * <var:i> ; <var:B> := <nat:2> + <var:B> * <var:i> ; <var:B> := <var:B> * <var:i> ; <var:B> := <nat:4> + <var:B> * <var:i> ; <var:B> := <nat:3> + <var:B> * <var:i> ; <var:B> := <nat:2> + <var:B> * <var:i> ; <var:B> := <nat:1> + <var:B> * <var:i> ; <var:B> := <nat:2> + <var:B> * <var:i> {{ <var:B> = <nat:4> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:B> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:B> = <nat:4> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:B> = <nat:4> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:B> = <nat:4> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:B> = <nat:4> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:B> = <nat:4> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:B> = <nat:4> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:B> = <nat:4> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:4> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:B> = <nat:4> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:B> = <nat:4> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:p> /\ <var:B> = <nat:4> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 