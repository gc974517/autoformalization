\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:M1> := <var:X> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:2> ; <var:A> := <var:M1> <var:A> := <var:A> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Assuming that $ <var:X> = <var:f> $ ahead of evaluating the list of instructions , it follows that we have $ <var:A> = <nat:2> * <var:f> + <nat:2> $ once segment of code exits . \end{theorem} \begin{proof} Applying usual Hoare logic returns : \begin{eqnarray} \{ <var:X> = <var:f> \} \\ <var:M1> := <var:X> ; \\ \{ <var:X> = <var:f> \land <var:M1> = <var:f> \} \\ <var:M0> := <nat:2> ; \\ \{ <var:X> = <var:f> \land <var:M1> = <var:f> \land <var:M0> = <nat:2> \} \\ <var:M1> := <var:M1> * <nat:2> ; \\ \{ <var:X> = <var:f> \land <var:M1> = <nat:2> \cdot <var:f> \land <var:M0> = <nat:2> \} \\ <var:A> := <var:M1> \\ \{ <var:X> = <var:f> \land <var:M0> = <nat:2> \land <var:A> = <nat:2> \cdot <var:f> \} \\ <var:A> := <var:A> + <var:M0> \\ \{ <var:X> = <var:f> \land <var:A> = <nat:2> \cdot <var:f> + <nat:2> \} \end{eqnarray} As a result , this list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:X> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:2> ; <var:A> := <var:M1> <var:A> := <var:A> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:X> = <var:f> }} <def:poly> {{ <var:A> = <nat:2> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:M1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:M1> = <var:f> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:M1> = <nat:2> * <var:f> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:M0> = <nat:2> /\ <var:A> = <nat:2> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:f> /\ <var:A> = <nat:2> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 