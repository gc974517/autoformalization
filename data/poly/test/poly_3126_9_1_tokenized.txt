\begin{document} \begin{theorem} Define a set of commands such that \begin{verbatim} <var:c1> := <var:b> ; <var:c2> := <var:c1> * <var:b> ; <var:c3> := <var:c2> * <var:b> ; <var:c0> := <nat:3> ; <var:c2> := <var:c2> * <nat:1> ; <var:c3> := <var:c3> * <nat:1> ; <var:l> := <var:c3> <var:l> := <var:l> + <var:c2> <var:l> := <var:l> + <var:c0> \end{verbatim} Assuming that $ <var:b> = <var:p> $ prior to executing this program , then we see $ <var:l> = <nat:1> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare logic yields : \begin{eqnarray} \{ <var:b> = <var:p> \} \\ <var:c1> := <var:b> ; \\ \{ <var:b> = <var:p> \land <var:c1> = <var:p> \} \\ <var:c2> := <var:c1> * <var:b> ; \\ \{ <var:b> = <var:p> \land <var:c1> = <var:p> \land <var:c2> = <var:p> ^ <nat:2> \} \\ <var:c3> := <var:c2> * <var:b> ; \\ \{ <var:b> = <var:p> \land <var:c1> = <var:p> \land <var:c2> = <var:p> ^ <nat:2> \land <var:c3> = <var:p> ^ <nat:3> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:b> = <var:p> \land <var:c1> = <var:p> \land <var:c2> = <var:p> ^ <nat:2> \land <var:c3> = <var:p> ^ <nat:3> \land <var:c0> = <nat:3> \} \\ <var:c2> := <var:c2> * <nat:1> ; \\ \{ <var:b> = <var:p> \land <var:c1> = <var:p> \land <var:c2> = <nat:1> * <var:p> ^ <nat:2> \land <var:c3> = <var:p> ^ <nat:3> \land <var:c0> = <nat:3> \} \\ <var:c3> := <var:c3> * <nat:1> ; \\ \{ <var:b> = <var:p> \land <var:c1> = <var:p> \land <var:c2> = <nat:1> * <var:p> ^ <nat:2> \land <var:c3> = <nat:1> * <var:p> ^ <nat:3> \land <var:c0> = <nat:3> \} \\ <var:l> := <var:c3> \\ \{ <var:b> = <var:p> \land <var:c1> = <var:p> \land <var:c2> = <nat:1> * <var:p> ^ <nat:2> \land <var:c0> = <nat:3> \land <var:l> = <nat:1> * <var:p> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:c2> \\ \{ <var:b> = <var:p> \land <var:c1> = <var:p> \land <var:c0> = <nat:3> \land <var:l> = <nat:1> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:c0> \\ \{ <var:b> = <var:p> \land <var:l> = <nat:1> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> \} \end{eqnarray} As a result , the program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:b> = <var:p> }} <var:c1> := <var:b> ; <var:c2> := <var:c1> * <var:b> ; <var:c3> := <var:c2> * <var:b> ; <var:c0> := <nat:3> ; <var:c2> := <var:c2> * <nat:1> ; <var:c3> := <var:c3> * <nat:1> ; <var:l> := <var:c3> <var:l> := <var:l> + <var:c2> <var:l> := <var:l> + <var:c0> {{ <var:l> = <nat:1> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:c1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:c1> = <var:p> /\ <var:c2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:c1> = <var:p> /\ <var:c2> = <var:p> ^ <nat:2> /\ <var:c3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:c1> = <var:p> /\ <var:c2> = <var:p> ^ <nat:2> /\ <var:c3> = <var:p> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:c1> = <var:p> /\ <var:c2> = <nat:1> * <var:p> ^ <nat:2> /\ <var:c3> = <var:p> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:c1> = <var:p> /\ <var:c2> = <nat:1> * <var:p> ^ <nat:2> /\ <var:c3> = <nat:1> * <var:p> ^ <nat:3> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:c1> = <var:p> /\ <var:c2> = <nat:1> * <var:p> ^ <nat:2> /\ <var:c0> = <nat:3> /\ <var:l> = <nat:1> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:c1> = <var:p> /\ <var:c0> = <nat:3> /\ <var:l> = <nat:1> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:p> /\ <var:l> = <nat:1> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 