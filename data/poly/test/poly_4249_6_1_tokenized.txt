\begin{document} \begin{theorem} Let the following program in \emph{Imp} : \begin{verbatim} <var:n1> := <var:h> ; <var:n2> := <var:n1> * <var:h> ; <var:n0> := <nat:5> ; <var:n2> := <var:n2> * <nat:9> ; <var:G> := <var:n2> <var:G> := <var:G> + <var:n0> \end{verbatim} Allowing $ <var:h> = <var:Q> $ ahead of interpreting this set of instructions it follows that we see $ <var:G> = <nat:9> * <var:Q> ^ <nat:2> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for the series of commands can be shown through Hoare reasoning . Observing the proceeding statement contained in our program , the binding command giving $ <var:h> $ toward $ <var:n1>$ . This forwards the precondition $ \{ <var:h> = <var:Q> \} $ as $ \{ <var:h> = <var:Q> \land <var:n1> = <var:Q> \} $ . This is ensured with the assignment inference rule defined in typical Hoare reasoning . Next , we have the variable assignmet code binding $ <var:n1> * <var:h> $ to $ <var:n2>$ . This takes the precondition $ \{ <var:h> = <var:Q> \land <var:n1> = <var:Q> \} $ into the condition $ \{ <var:h> = <var:Q> \land <var:n1> = <var:Q> \land <var:n2> = <var:Q> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment scheme given in typical Hoare techniques . Advancing to the next step , we see the variable assignmet command yielding $ <nat:5> $ as $ <var:n0>$ . This statement advances the condition $ \{ <var:h> = <var:Q> \land <var:n1> = <var:Q> \land <var:n2> = <var:Q> ^ <nat:2> \} $ toward $ \{ <var:h> = <var:Q> \land <var:n1> = <var:Q> \land <var:n2> = <var:Q> ^ <nat:2> \land <var:n0> = <nat:5> \} $ . Stepping through , the binding code \verb | <var:n2> := <var:n2> * <nat:9> ; | . This redefines the precondition $ \{ <var:h> = <var:Q> \land <var:n1> = <var:Q> \land <var:n2> = <var:Q> ^ <nat:2> \land <var:n0> = <nat:5> \} $ to $ \{ <var:h> = <var:Q> \land <var:n1> = <var:Q> \land <var:n2> = <nat:9> * <var:Q> ^ <nat:2> \land <var:n0> = <nat:5> \} $ . Observing the following command found in our segment of code , we have the variable assignmet command letting $ <var:n2$ into $ <var:G>$ . This moves the condition $ \{ <var:h> = <var:Q> \land <var:n1> = <var:Q> \land <var:n2> = <nat:9> * <var:Q> ^ <nat:2> \land <var:n0> = <nat:5> \} $ into $ \{ <var:h> = <var:Q> \land <var:n1> = <var:Q> \land <var:n0> = <nat:5> \land <var:G> = <nat:9> * <var:Q> ^ <nat:2> \} $ . This is shown with the assignment rule given in Hoare logic . Moving on to the next line of code contained in our series of commands , we see the environment update command \verb | <var:G> := <var:G> + <var:n0> | . This code advances $ \{ <var:h> = <var:Q> \land <var:n1> = <var:Q> \land <var:n0> = <nat:5> \land <var:G> = <nat:9> * <var:Q> ^ <nat:2> \} $ into the postcondition $ \{ <var:h> = <var:Q> \land <var:G> = <nat:9> * <var:Q> ^ <nat:2> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:h> = <var:Q> }} <var:n1> := <var:h> ; <var:n2> := <var:n1> * <var:h> ; <var:n0> := <nat:5> ; <var:n2> := <var:n2> * <nat:9> ; <var:G> := <var:n2> <var:G> := <var:G> + <var:n0> {{ <var:G> = <nat:9> * <var:Q> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:n1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:n1> = <var:Q> /\ <var:n2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:n1> = <var:Q> /\ <var:n2> = <var:Q> ^ <nat:2> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:n1> = <var:Q> /\ <var:n2> = <nat:9> * <var:Q> ^ <nat:2> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:n1> = <var:Q> /\ <var:n0> = <nat:5> /\ <var:G> = <nat:9> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Q> /\ <var:G> = <nat:9> * <var:Q> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 