\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K1> := <var:j> ; <var:K2> := <var:K1> * <var:j> ; <var:K0> := <nat:3> ; <var:K2> := <var:K2> * <nat:1> ; <var:Y> := <var:K2> <var:Y> := <var:Y> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> in \emph{Imp} . Given it to be that $ <var:j> = <var:C> $ prior to the execution of this program it follows that we have $ <var:Y> = <nat:1> \cdot <var:C> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The argument for the set of instructions is shown by usual Hoare reasoning . Keeping momentum , we see the binding statement \verb | <var:K1> := <var:j> ; | . This transfers the precondition $ \{ <var:j> = <var:C> \} $ as the postcondition $ \{ <var:j> = <var:C> \land <var:K1> = <var:C> \} $ . This is shown to be logically sound by the assignment rule of Hoare techniques . Stepping forward , we have the environment update statement giving $ <var:K1> * <var:j> $ into $ <var:K2>$ . This statement redefines the condition $ \{ <var:j> = <var:C> \land <var:K1> = <var:C> \} $ to $ \{ <var:j> = <var:C> \land <var:K1> = <var:C> \land <var:K2> = <var:C> ^ <nat:2> \} $ . This is known to be sound by the assignment rule found in usual Hoare logic . Following , we have the variable assignmet code \verb | <var:K0> := <nat:3> ; | . This moves $ \{ <var:j> = <var:C> \land <var:K1> = <var:C> \land <var:K2> = <var:C> ^ <nat:2> \} $ to the postcondition $ \{ <var:j> = <var:C> \land <var:K1> = <var:C> \land <var:K2> = <var:C> ^ <nat:2> \land <var:K0> = <nat:3> \} $ . Honing in on the next statement contained in our set of commands , we have the variable binding code \verb | <var:K2> := <var:K2> * <nat:1> ; | . This transfers the condition $ \{ <var:j> = <var:C> \land <var:K1> = <var:C> \land <var:K2> = <var:C> ^ <nat:2> \land <var:K0> = <nat:3> \} $ as the postcondition $ \{ <var:j> = <var:C> \land <var:K1> = <var:C> \land <var:K2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:K0> = <nat:3> \} $ . This is given using the assignment rule found in typical Hoare reasoning . Moving forward to the subsequent statement in our list of instructions , the statement binding $ <var:K2$ as $ <var:Y>$ . This redefines $ \{ <var:j> = <var:C> \land <var:K1> = <var:C> \land <var:K2> = <nat:1> \cdot <var:C> ^ <nat:2> \land <var:K0> = <nat:3> \} $ as the condition $ \{ <var:j> = <var:C> \land <var:K1> = <var:C> \land <var:K0> = <nat:3> \land <var:Y> = <nat:1> \cdot <var:C> ^ <nat:2> \} $ . Observing the next step found in the list of commands , we see the statement \verb | <var:Y> := <var:Y> + <var:K0> | . This transfers the condition $ \{ <var:j> = <var:C> \land <var:K1> = <var:C> \land <var:K0> = <nat:3> \land <var:Y> = <nat:1> \cdot <var:C> ^ <nat:2> \} $ toward the postcondition $ \{ <var:j> = <var:C> \land <var:Y> = <nat:1> \cdot <var:C> ^ <nat:2> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K1> := <var:j> ; <var:K2> := <var:K1> * <var:j> ; <var:K0> := <nat:3> ; <var:K2> := <var:K2> * <nat:1> ; <var:Y> := <var:K2> <var:Y> := <var:Y> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:j> = <var:C> }} <def:poly> {{ <var:Y> = <nat:1> * <var:C> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:K1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:K1> = <var:C> /\ <var:K2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:K1> = <var:C> /\ <var:K2> = <var:C> ^ <nat:2> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:K1> = <var:C> /\ <var:K2> = <nat:1> * <var:C> ^ <nat:2> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:K1> = <var:C> /\ <var:K0> = <nat:3> /\ <var:Y> = <nat:1> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:Y> = <nat:1> * <var:C> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 