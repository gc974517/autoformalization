\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:7> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:m> ; <var:U2> := <nat:8> ; <var:U2> := <var:U2> * <var:m> ; <var:U2> := <var:U2> * <var:m> ; <var:D> := <var:U2> ; <var:D> := <var:D> + <var:U1> ; <var:D> := <var:D> + <var:U0> \end{verbatim} Assuming it to hold that $ <var:m> = <var:y> $ before the evaluation of the set of instructions then we see $ <var:D> = <nat:8> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for the code is demonstrated with standard Hoare techniques . Further , the variable update statement \verb | <var:U0> := <nat:7> ; | . This advances the condition $ \{ <var:m> = <var:y> \} $ to $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \} $ . Shifting focus toward the following step found in our segment of code , we see the variable binding command defining $ <nat:8> $ as $ <var:U1>$ . This line transfers $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \} $ as $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \} $ . Taking another step toward the following statement in the segment of code , we see the environment update code binding $ <var:U1> * <var:m> $ into $ <var:U1>$ . This command redefines $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \} $ as the condition $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \cdot <var:y> \} $ . Taking a look at the proceeding bit of code seen in our segment of code , the variable binding code giving $ <nat:8> $ toward $ <var:U2>$ . This transfers the condition $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \cdot <var:y> \} $ as $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \cdot <var:y> \land <var:U2> = <nat:8> \} $ . Observing the proceeding statement seen in the series of commands , we have the command defining $ <var:U2> * <var:m> $ toward $ <var:U2>$ . This statement moves $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \cdot <var:y> \land <var:U2> = <nat:8> \} $ into the condition $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \cdot <var:y> \land <var:U2> = <nat:8> \cdot <var:y> \} $ . This is deduced by the assignment rule given in standard Hoare reasoning . Considering the upcoming statement in the program , we have the assignment code binding $ <var:U2> * <var:m> $ toward $ <var:U2>$ . This forwards the condition $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \cdot <var:y> \land <var:U2> = <nat:8> \cdot <var:y> \} $ into the postcondition $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \cdot <var:y> \land <var:U2> = <nat:8> \cdot <var:y> ^ <nat:2> \} $ . This is shown with the assignment scheme found in typical Hoare techniques . Looking at the following step contained in the series of instructions , we have the binding command letting $ <var:U2> $ to $ <var:D>$ . This command forwards the precondition $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \cdot <var:y> \land <var:U2> = <nat:8> \cdot <var:y> ^ <nat:2> \} $ to $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \cdot <var:y> \land <var:D> = <nat:8> \cdot <var:y> ^ <nat:2> \} $ . This is given using the assignment scheme defined by standard Hoare techniques . Jumping to the upcoming command seen in the code , we see the environment update line \verb | <var:D> := <var:D> + <var:U1> ; | . This code forwards $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:U1> = <nat:8> \cdot <var:y> \land <var:D> = <nat:8> \cdot <var:y> ^ <nat:2> \} $ into the postcondition $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:D> = <nat:8> \cdot <var:y> ^ <nat:2> + <nat:8> \cdot <var:y> \} $ . Paying attention to the upcoming statement contained in our set of instructions , the variable binding command defining $ <var:D> + <var:U0$ into $ <var:D>$ . This transfers the precondition $ \{ <var:m> = <var:y> \land <var:U0> = <nat:7> \land <var:D> = <nat:8> \cdot <var:y> ^ <nat:2> + <nat:8> \cdot <var:y> \} $ toward the postcondition $ \{ <var:m> = <var:y> \land <var:D> = <nat:8> \cdot <var:y> ^ <nat:2> + <nat:8> \cdot <var:y> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:m> = <var:y> }} <var:U0> := <nat:7> ; <var:U1> := <nat:8> ; <var:U1> := <var:U1> * <var:m> ; <var:U2> := <nat:8> ; <var:U2> := <var:U2> * <var:m> ; <var:U2> := <var:U2> * <var:m> ; <var:D> := <var:U2> ; <var:D> := <var:D> + <var:U1> ; <var:D> := <var:D> + <var:U0> {{ <var:D> = <nat:8> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:8> * <var:y> /\ <var:U2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:8> * <var:y> /\ <var:U2> = <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:8> * <var:y> /\ <var:U2> = <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:8> * <var:y> /\ <var:D> = <nat:8> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:U0> = <nat:7> /\ <var:D> = <nat:8> * <var:y> ^ <nat:2> + <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:D> = <nat:8> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 