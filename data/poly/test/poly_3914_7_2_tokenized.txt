\begin{document} \begin{theorem} Take a code : \begin{verbatim} <var:N> := <nat:2> ; <var:N> := <nat:4> + <var:N> * <var:t> ; <var:N> := <var:N> * <var:t> ; <var:N> := <nat:1> + <var:N> * <var:t> ; <var:N> := <nat:2> + <var:N> * <var:t> ; <var:N> := <nat:2> + <var:N> * <var:t> ; <var:N> := <nat:3> + <var:N> * <var:t> \end{verbatim} Allow that $ <var:t> = <var:B> $ before the evaluation of our set of instructions then we see $ <var:N> = <nat:2> \times <var:B> ^ <nat:6> + <nat:4> \times <var:B> ^ <nat:5> + <nat:1> \times <var:B> ^ <nat:3> + <nat:2> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:t> = <var:B> \} \\ <var:N> := <nat:2> ; \\ \{ <var:t> = <var:B> \land <var:N> = <nat:2> \} \\ <var:N> := <nat:4> + <var:N> * <var:t> ; \\ \{ <var:t> = <var:B> \land <var:N> = <nat:2> \times <var:B> + <nat:4> \} \\ <var:N> := <var:N> * <var:t> ; \\ \{ <var:t> = <var:B> \land <var:N> = <nat:2> \times <var:B> ^ <nat:2> + <nat:4> \times <var:B> + \} \\ <var:N> := <nat:1> + <var:N> * <var:t> ; \\ \{ <var:t> = <var:B> \land <var:N> = <nat:2> \times <var:B> ^ <nat:3> + <nat:4> \times <var:B> ^ <nat:2> + <nat:1> \} \\ <var:N> := <nat:2> + <var:N> * <var:t> ; \\ \{ <var:t> = <var:B> \land <var:N> = <nat:2> \times <var:B> ^ <nat:4> + <nat:4> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> + <nat:2> \} \\ <var:N> := <nat:2> + <var:N> * <var:t> ; \\ \{ <var:t> = <var:B> \land <var:N> = <nat:2> \times <var:B> ^ <nat:5> + <nat:4> \times <var:B> ^ <nat:4> + <nat:1> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:2> \} \\ <var:N> := <nat:3> + <var:N> * <var:t> \\ \{ <var:t> = <var:B> \land <var:N> = <nat:2> \times <var:B> ^ <nat:6> + <nat:4> \times <var:B> ^ <nat:5> + <nat:1> \times <var:B> ^ <nat:3> + <nat:2> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:3> \} \end{eqnarray} Therefore , the list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:t> = <var:B> }} <var:N> := <nat:2> ; <var:N> := <nat:4> + <var:N> * <var:t> ; <var:N> := <var:N> * <var:t> ; <var:N> := <nat:1> + <var:N> * <var:t> ; <var:N> := <nat:2> + <var:N> * <var:t> ; <var:N> := <nat:2> + <var:N> * <var:t> ; <var:N> := <nat:3> + <var:N> * <var:t> {{ <var:N> = <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:N> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:N> = <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:N> = <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:N> = <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:N> = <nat:2> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:1> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:N> = <nat:2> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:B> /\ <var:N> = <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 