\begin{document} \begin{theorem} Consider the following code segment such that \begin{verbatim} <var:N> := <nat:3> ; <var:N> := <nat:4> + <var:N> * <var:C> ; <var:N> := <nat:2> + <var:N> * <var:C> ; <var:N> := <nat:3> + <var:N> * <var:C> ; <var:N> := <nat:3> + <var:N> * <var:C> ; <var:N> := <nat:3> + <var:N> * <var:C> ; <var:N> := <nat:4> + <var:N> * <var:C> ; <var:N> := <var:N> * <var:C> ; <var:N> := <nat:1> + <var:N> * <var:C> ; <var:N> := <nat:2> + <var:N> * <var:C> ; <var:N> := <var:N> * <var:C> ; <var:N> := <var:N> * <var:C> ; <var:N> := <nat:1> + <var:N> * <var:C> ; <var:N> := <nat:3> + <var:N> * <var:C> \end{verbatim} Assume that we have $ <var:C> = <var:i> $ given every positive numbers $ <var:i> $ prior to the execution of the list of instructions , it must be that we see $ <var:N> = <nat:3> \cdot <var:i> ^ <nat:13> + <nat:4> \cdot <var:i> ^ <nat:12> + <nat:2> \cdot <var:i> ^ <nat:11> + <nat:3> \cdot <var:i> ^ <nat:10> + <nat:3> \cdot <var:i> ^ <nat:9> + <nat:3> \cdot <var:i> ^ <nat:8> + <nat:4> \cdot <var:i> ^ <nat:7> + <nat:1> \cdot <var:i> ^ <nat:5> + <nat:2> \cdot <var:i> ^ <nat:4> + <nat:1> \cdot <var:i> + <nat:3> $ . \end{theorem} \begin{proof} The argument for this series of commands can be given with typical Hoare reasoning . Immediately following , we see the code \verb | <var:N> := <nat:3> ; | . This statement takes the precondition $ \{ <var:C> = <var:i> \} $ as the condition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \} $ . Honing in on the next line of code found in our list of commands , we see the variable assignmet code letting $ <nat:4> + <var:N> * <var:C> $ to $ <var:N>$ . This code redefines $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \} $ into $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> + <nat:4> \} $ . This is shown to be logically sound through the assignment law in Hoare reasoning . Paying attention to the next step in our series of commands , we see the variable assignmet line \verb | <var:N> := <nat:2> + <var:N> * <var:C> ; | . This command transfers the precondition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> + <nat:4> \} $ into $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:2> \} $ . This is guaranteed with the assignment rule defined by typical Hoare reasoning . Going to the next step , the line assigning $ <nat:3> + <var:N> * <var:C> $ to $ <var:N>$ . This statement takes $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:2> \} $ to the postcondition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:2> \cdot <var:i> + <nat:3> \} $ . This is known to be sound with the assignment scheme given by usual Hoare logic . Considering the following piece of code contained in our code segment , the environment update statement assigning $ <nat:3> + <var:N> * <var:C> $ to $ <var:N>$ . This code takes the precondition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:2> \cdot <var:i> + <nat:3> \} $ into the condition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:3> \} $ . Observing the next piece of code in our program , we have the binding statement assigning $ <nat:3> + <var:N> * <var:C> $ into $ <var:N>$ . This takes the condition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:3> \} $ to the condition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:5> + <nat:4> \cdot <var:i> ^ <nat:4> + <nat:2> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:3> \} $ . Observing the following command in our code segment , we have the code \verb | <var:N> := <nat:4> + <var:N> * <var:C> ; | . This takes the condition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:5> + <nat:4> \cdot <var:i> ^ <nat:4> + <nat:2> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:3> \} $ toward the postcondition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:6> + <nat:4> \cdot <var:i> ^ <nat:5> + <nat:2> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:4> \} $ . Going to the next step , we have the environment update line \verb | <var:N> := <var:N> * <var:C> ; | . This forwards the precondition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:6> + <nat:4> \cdot <var:i> ^ <nat:5> + <nat:2> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:4> \} $ as $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:7> + <nat:4> \cdot <var:i> ^ <nat:6> + <nat:2> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + \} $ . This is ensured by the assignment scheme of standard Hoare reasoning . Moving on to the subsequent line of code found in our list of commands , we have the binding command giving $ <nat:1> + <var:N> * <var:C> $ as $ <var:N>$ . This line takes the precondition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:7> + <nat:4> \cdot <var:i> ^ <nat:6> + <nat:2> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + \} $ toward the condition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:8> + <nat:4> \cdot <var:i> ^ <nat:7> + <nat:2> \cdot <var:i> ^ <nat:6> + <nat:3> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:1> \} $ . This is guaranteed by the assignment rule defined by usual Hoare logic . Next , the environment update statement defining $ <nat:2> + <var:N> * <var:C> $ as $ <var:N>$ . This redefines the condition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:8> + <nat:4> \cdot <var:i> ^ <nat:7> + <nat:2> \cdot <var:i> ^ <nat:6> + <nat:3> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:1> \} $ to $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:9> + <nat:4> \cdot <var:i> ^ <nat:8> + <nat:2> \cdot <var:i> ^ <nat:7> + <nat:3> \cdot <var:i> ^ <nat:6> + <nat:3> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> + <nat:2> \} $ . Jumping to the subsequent step seen in the code segment , we have the variable binding command assigning $ <var:N> * <var:C> $ into $ <var:N>$ . This transfers the precondition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:9> + <nat:4> \cdot <var:i> ^ <nat:8> + <nat:2> \cdot <var:i> ^ <nat:7> + <nat:3> \cdot <var:i> ^ <nat:6> + <nat:3> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> + <nat:2> \} $ to the condition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:10> + <nat:4> \cdot <var:i> ^ <nat:9> + <nat:2> \cdot <var:i> ^ <nat:8> + <nat:3> \cdot <var:i> ^ <nat:7> + <nat:3> \cdot <var:i> ^ <nat:6> + <nat:3> \cdot <var:i> ^ <nat:5> + <nat:4> \cdot <var:i> ^ <nat:4> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:2> \cdot <var:i> + \} $ . This is known to be sound by the assignment scheme given in usual Hoare logic . Observing the subsequent statement found in our segment of code , we see the environment update code defining $ <var:N> * <var:C> $ to $ <var:N>$ . This transfers the precondition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:10> + <nat:4> \cdot <var:i> ^ <nat:9> + <nat:2> \cdot <var:i> ^ <nat:8> + <nat:3> \cdot <var:i> ^ <nat:7> + <nat:3> \cdot <var:i> ^ <nat:6> + <nat:3> \cdot <var:i> ^ <nat:5> + <nat:4> \cdot <var:i> ^ <nat:4> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:2> \cdot <var:i> + \} $ toward the postcondition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:11> + <nat:4> \cdot <var:i> ^ <nat:10> + <nat:2> \cdot <var:i> ^ <nat:9> + <nat:3> \cdot <var:i> ^ <nat:8> + <nat:3> \cdot <var:i> ^ <nat:7> + <nat:3> \cdot <var:i> ^ <nat:6> + <nat:4> \cdot <var:i> ^ <nat:5> + <nat:1> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> + \} $ . Honing in on the proceeding line seen in the code segment , we see the variable binding code \verb | <var:N> := <nat:1> + <var:N> * <var:C> ; | . This line redefines the precondition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:11> + <nat:4> \cdot <var:i> ^ <nat:10> + <nat:2> \cdot <var:i> ^ <nat:9> + <nat:3> \cdot <var:i> ^ <nat:8> + <nat:3> \cdot <var:i> ^ <nat:7> + <nat:3> \cdot <var:i> ^ <nat:6> + <nat:4> \cdot <var:i> ^ <nat:5> + <nat:1> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> + \} $ to $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:12> + <nat:4> \cdot <var:i> ^ <nat:11> + <nat:2> \cdot <var:i> ^ <nat:10> + <nat:3> \cdot <var:i> ^ <nat:9> + <nat:3> \cdot <var:i> ^ <nat:8> + <nat:3> \cdot <var:i> ^ <nat:7> + <nat:4> \cdot <var:i> ^ <nat:6> + <nat:1> \cdot <var:i> ^ <nat:4> + <nat:2> \cdot <var:i> ^ <nat:3> + <nat:1> \} $ . Next , the assignment code \verb | <var:N> := <nat:3> + <var:N> * <var:C> | . This takes the precondition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:12> + <nat:4> \cdot <var:i> ^ <nat:11> + <nat:2> \cdot <var:i> ^ <nat:10> + <nat:3> \cdot <var:i> ^ <nat:9> + <nat:3> \cdot <var:i> ^ <nat:8> + <nat:3> \cdot <var:i> ^ <nat:7> + <nat:4> \cdot <var:i> ^ <nat:6> + <nat:1> \cdot <var:i> ^ <nat:4> + <nat:2> \cdot <var:i> ^ <nat:3> + <nat:1> \} $ toward the postcondition $ \{ <var:C> = <var:i> \land <var:N> = <nat:3> \cdot <var:i> ^ <nat:13> + <nat:4> \cdot <var:i> ^ <nat:12> + <nat:2> \cdot <var:i> ^ <nat:11> + <nat:3> \cdot <var:i> ^ <nat:10> + <nat:3> \cdot <var:i> ^ <nat:9> + <nat:3> \cdot <var:i> ^ <nat:8> + <nat:4> \cdot <var:i> ^ <nat:7> + <nat:1> \cdot <var:i> ^ <nat:5> + <nat:2> \cdot <var:i> ^ <nat:4> + <nat:1> \cdot <var:i> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:C> = <var:i> }} <var:N> := <nat:3> ; <var:N> := <nat:4> + <var:N> * <var:C> ; <var:N> := <nat:2> + <var:N> * <var:C> ; <var:N> := <nat:3> + <var:N> * <var:C> ; <var:N> := <nat:3> + <var:N> * <var:C> ; <var:N> := <nat:3> + <var:N> * <var:C> ; <var:N> := <nat:4> + <var:N> * <var:C> ; <var:N> := <var:N> * <var:C> ; <var:N> := <nat:1> + <var:N> * <var:C> ; <var:N> := <nat:2> + <var:N> * <var:C> ; <var:N> := <var:N> * <var:C> ; <var:N> := <var:N> * <var:C> ; <var:N> := <nat:1> + <var:N> * <var:C> ; <var:N> := <nat:3> + <var:N> * <var:C> {{ <var:N> = <nat:3> * <var:i> ^ <nat:13> + <nat:4> * <var:i> ^ <nat:12> + <nat:2> * <var:i> ^ <nat:11> + <nat:3> * <var:i> ^ <nat:10> + <nat:3> * <var:i> ^ <nat:9> + <nat:3> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:1> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:1> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:8> + <nat:3> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> * <var:i> ^ <nat:11> + <nat:4> * <var:i> ^ <nat:10> + <nat:2> * <var:i> ^ <nat:9> + <nat:3> * <var:i> ^ <nat:8> + <nat:3> * <var:i> ^ <nat:7> + <nat:3> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> * <var:i> ^ <nat:12> + <nat:4> * <var:i> ^ <nat:11> + <nat:2> * <var:i> ^ <nat:10> + <nat:3> * <var:i> ^ <nat:9> + <nat:3> * <var:i> ^ <nat:8> + <nat:3> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:1> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:i> /\ <var:N> = <nat:3> * <var:i> ^ <nat:13> + <nat:4> * <var:i> ^ <nat:12> + <nat:2> * <var:i> ^ <nat:11> + <nat:3> * <var:i> ^ <nat:10> + <nat:3> * <var:i> ^ <nat:9> + <nat:3> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:1> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:1> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 