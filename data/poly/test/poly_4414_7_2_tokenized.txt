\begin{document} \begin{theorem} Take a series of instructions : \begin{verbatim} <var:J> := <nat:2> ; <var:J> := <nat:2> + <var:J> * <var:n> ; <var:J> := <nat:3> + <var:J> * <var:n> ; <var:J> := <nat:1> + <var:J> * <var:n> ; <var:J> := <nat:4> + <var:J> * <var:n> ; <var:J> := <nat:4> + <var:J> * <var:n> ; <var:J> := <nat:1> + <var:J> * <var:n> \end{verbatim} Allow it to hold that $ <var:n> = <var:K> $ ahead of evaluating our program it must be that we see $ <var:J> = <nat:2> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this code segment can be given by standard Hoare reasoning . Going to the next step , we have the assignment line letting $ <nat:2> $ to $ <var:J>$ . This statement forwards the condition $ \{ <var:n> = <var:K> \} $ as the condition $ \{ <var:n> = <var:K> \land <var:J> = <nat:2> \} $ . Moving onward , we see the variable update statement \verb | <var:J> := <nat:2> + <var:J> * <var:n> ; | . This takes the condition $ \{ <var:n> = <var:K> \land <var:J> = <nat:2> \} $ toward $ \{ <var:n> = <var:K> \land <var:J> = <nat:2> * <var:K> + <nat:2> \} $ . Paying attention to the proceeding line found in our set of instructions , we have the environment update line yielding $ <nat:3> + <var:J> * <var:n> $ as $ <var:J>$ . This statement transfers $ \{ <var:n> = <var:K> \land <var:J> = <nat:2> * <var:K> + <nat:2> \} $ into the postcondition $ \{ <var:n> = <var:K> \land <var:J> = <nat:2> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> \} $ . This is guaranteed through the assignment inference rule defined by Hoare reasoning . Moving forward , the assignment command \verb | <var:J> := <nat:1> + <var:J> * <var:n> ; | . This moves the condition $ \{ <var:n> = <var:K> \land <var:J> = <nat:2> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> \} $ to $ \{ <var:n> = <var:K> \land <var:J> = <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:1> \} $ . Moving onward , we see the variable update code \verb | <var:J> := <nat:4> + <var:J> * <var:n> ; | . This line transfers the condition $ \{ <var:n> = <var:K> \land <var:J> = <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:1> \} $ to the postcondition $ \{ <var:n> = <var:K> \land <var:J> = <nat:2> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:4> \} $ . This is known to be sound by the assignment scheme from standard Hoare techniques . Advancing to the proceeding line of code seen in the series of instructions , we have the variable binding command \verb | <var:J> := <nat:4> + <var:J> * <var:n> ; | . This code advances the condition $ \{ <var:n> = <var:K> \land <var:J> = <nat:2> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:4> \} $ as $ \{ <var:n> = <var:K> \land <var:J> = <nat:2> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:4> \} $ . This is sound with the assignment law defined by standard Hoare reasoning . Looking at the following piece of code contained in the set of commands , the environment update statement \verb | <var:J> := <nat:1> + <var:J> * <var:n> | . This forwards the condition $ \{ <var:n> = <var:K> \land <var:J> = <nat:2> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:4> \} $ to $ \{ <var:n> = <var:K> \land <var:J> = <nat:2> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:n> = <var:K> }} <var:J> := <nat:2> ; <var:J> := <nat:2> + <var:J> * <var:n> ; <var:J> := <nat:3> + <var:J> * <var:n> ; <var:J> := <nat:1> + <var:J> * <var:n> ; <var:J> := <nat:4> + <var:J> * <var:n> ; <var:J> := <nat:4> + <var:J> * <var:n> ; <var:J> := <nat:1> + <var:J> * <var:n> {{ <var:J> = <nat:2> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:J> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:J> = <nat:2> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:J> = <nat:2> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:J> = <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:J> = <nat:2> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:J> = <nat:2> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:K> /\ <var:J> = <nat:2> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:4> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 