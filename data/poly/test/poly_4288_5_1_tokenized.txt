\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:X1> := <var:l> ; <var:X0> := <nat:9> ; <var:X1> := <var:X1> * <nat:6> ; <var:f> := <var:X1> <var:f> := <var:f> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:l> = <var:h> $ ahead of evaluating the list of commands , it must be that $ <var:f> = <nat:6> \times <var:h> + <nat:9> $ after list of instructions is done executing . \end{theorem} \begin{proof} The argument for this code is done with typical Hoare logic . Keeping momentum , the environment update command assigning $ <var:l> $ as $ <var:X1>$ . This moves the condition $ \{ <var:l> = <var:h> \} $ toward the condition $ \{ <var:l> = <var:h> \land <var:X1> = <var:h> \} $ . This is deduced with the assignment rule defined by usual Hoare reasoning . Honing in on the upcoming step in the set of instructions , we have the assignment code \verb | <var:X0> := <nat:9> ; | . This code takes $ \{ <var:l> = <var:h> \land <var:X1> = <var:h> \} $ as $ \{ <var:l> = <var:h> \land <var:X1> = <var:h> \land <var:X0> = <nat:9> \} $ . This is deduced by the assignment inference rule found in Hoare reasoning . Going forward , we see the environment update line \verb | <var:X1> := <var:X1> * <nat:6> ; | . This statement forwards $ \{ <var:l> = <var:h> \land <var:X1> = <var:h> \land <var:X0> = <nat:9> \} $ toward $ \{ <var:l> = <var:h> \land <var:X1> = <nat:6> * <var:h> \land <var:X0> = <nat:9> \} $ . This is ensured with the assignment inference rule defined in typical Hoare logic . Stepping forward , we see the statement giving $ <var:X1$ to $ <var:f>$ . This command takes $ \{ <var:l> = <var:h> \land <var:X1> = <nat:6> * <var:h> \land <var:X0> = <nat:9> \} $ into the postcondition $ \{ <var:l> = <var:h> \land <var:X0> = <nat:9> \land <var:f> = <nat:6> * <var:h> \} $ . This is given through the assignment inference rule obtained from typical Hoare logic . Shifting focus toward the upcoming line contained in our series of commands , we have the variable assignmet line \verb | <var:f> := <var:f> + <var:X0> | . This line transfers the precondition $ \{ <var:l> = <var:h> \land <var:X0> = <nat:9> \land <var:f> = <nat:6> * <var:h> \} $ into the condition $ \{ <var:l> = <var:h> \land <var:f> = <nat:6> * <var:h> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <def:poly> := <var:X1> := <var:l> ; <var:X0> := <nat:9> ; <var:X1> := <var:X1> * <nat:6> ; <var:f> := <var:X1> <var:f> := <var:f> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:l> = <var:h> }} <def:poly> {{ <var:f> = <nat:6> * <var:h> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:X1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:X1> = <var:h> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:X1> = <nat:6> * <var:h> /\ <var:X0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:X0> = <nat:9> /\ <var:f> = <nat:6> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:h> /\ <var:f> = <nat:6> * <var:h> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 