\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:a0> := <nat:7> ; <var:U> := <var:a0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> . Allowing $ <var:z> = <var:h> $ ( given $ <var:h> \in \mathbb{Z}^+ $ ) before the evaluation of the series of instructions , it must be that we have $ <var:U> = <nat:7> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is done through standard Hoare techniques . Next , we see the variable binding code assigning $ <nat:7> $ to $ <var:a0>$ . This advances $ \{ <var:z> = <var:h> \} $ toward $ \{ <var:z> = <var:h> \land <var:a0> = <nat:7> \} $ . Shifting focus toward the following step contained in the set of instructions , the variable binding command \verb | <var:U> := <var:a0> | . This line transfers the precondition $ \{ <var:z> = <var:h> \land <var:a0> = <nat:7> \} $ toward $ \{ <var:z> = <var:h> \land <var:U> = <nat:7> \} $ . This is guaranteed using the assignment scheme in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <def:poly> := <var:a0> := <nat:7> ; <var:U> := <var:a0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:z> = <var:h> }} <def:poly> {{ <var:U> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:U> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 