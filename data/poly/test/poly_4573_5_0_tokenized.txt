\begin{document} \begin{theorem} We define a code : \begin{verbatim} <var:s0> := <nat:4> ; <var:s1> := <nat:9> ; <var:s1> := <var:s1> * <var:o> ; <var:h> := <var:s1> ; <var:h> := <var:h> + <var:s0> \end{verbatim} Assume it to be that $ <var:o> = <var:Y> $ ( for all $ <var:Y> \in \mathbb{Z}^+ $ ) prior to running the series of commands it follows that we see $ <var:h> = <nat:9> \cdot <var:Y> + <nat:4> $ once list of commands is done . \end{theorem} \begin{proof} The application of typical Hoare reasoning produces : \begin{eqnarray} \{ <var:o> = <var:Y> \} \\ <var:s0> := <nat:4> ; \\ \{ <var:o> = <var:Y> \land <var:s0> = <nat:4> \} \\ <var:s1> := <nat:9> ; \\ \{ <var:o> = <var:Y> \land <var:s0> = <nat:4> \land <var:s1> = <nat:9> \} \\ <var:s1> := <var:s1> * <var:o> ; \\ \{ <var:o> = <var:Y> \land <var:s0> = <nat:4> \land <var:s1> = <nat:9> \times <var:Y> \} \\ <var:h> := <var:s1> ; \\ \{ <var:o> = <var:Y> \land <var:s0> = <nat:4> \land <var:h> = <nat:9> \times <var:Y> \} \\ <var:h> := <var:h> + <var:s0> \\ \{ <var:o> = <var:Y> \land <var:h> = <nat:9> \times <var:Y> + <nat:4> \} \end{eqnarray} Considering the above , this code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:o> = <var:Y> }} <var:s0> := <nat:4> ; <var:s1> := <nat:9> ; <var:s1> := <var:s1> * <var:o> ; <var:h> := <var:s1> ; <var:h> := <var:h> + <var:s0> {{ <var:h> = <nat:9> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:s0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:s0> = <nat:4> /\ <var:s1> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:s0> = <nat:4> /\ <var:h> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:Y> /\ <var:h> = <nat:9> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 