\begin{document} \begin{theorem} Take the following series of instructions as \begin{verbatim} <var:S0> := <nat:5> ; <var:a> := <var:S0> \end{verbatim} Allowing it to be that $ <var:e> = <var:T> $ prior to interpreting this list of instructions it holds that we see $ <var:a> = <nat:5> $ . \end{theorem} \begin{proof} The course of logic for this list of instructions can be accomplished using the below decorated program . \begin{eqnarray} \{ <var:e> = <var:T> \} \\ <var:S0> := <nat:5> ; \\ \{ <var:e> = <var:T> \land <var:S0> = <nat:5> \} \\ <var:a> := <var:S0> \\ \{ <var:e> = <var:T> \land <var:a> = <nat:5> \} \end{eqnarray} Applying Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:e> = <var:T> }} <var:S0> := <nat:5> ; <var:a> := <var:S0> {{ <var:a> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:T> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:T> /\ <var:a> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 