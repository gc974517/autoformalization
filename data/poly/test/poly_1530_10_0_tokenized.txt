\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:1> ; <var:f1> := <nat:4> ; <var:f1> := <var:f1> * <var:Z> ; <var:f3> := <nat:1> ; <var:f3> := <var:f3> * <var:Z> ; <var:f3> := <var:f3> * <var:Z> ; <var:f3> := <var:f3> * <var:Z> ; <var:O> := <var:f3> ; <var:O> := <var:O> + <var:f1> ; <var:O> := <var:O> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Given that we have $ <var:Z> = <var:L> $ before executing our list of commands it must be that we see $ <var:O> = <nat:1> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> + <nat:1> $ once series of instructions has finished executing . \end{theorem} \begin{proof} Note that the following decorated list of instructions . \begin{eqnarray} \{ <var:Z> = <var:L> \} \\ <var:f0> := <nat:1> ; \\ \{ <var:Z> = <var:L> \land <var:f0> = <nat:1> \} \\ <var:f1> := <nat:4> ; \\ \{ <var:Z> = <var:L> \land <var:f0> = <nat:1> \land <var:f1> = <nat:4> \} \\ <var:f1> := <var:f1> * <var:Z> ; \\ \{ <var:Z> = <var:L> \land <var:f0> = <nat:1> \land <var:f1> = <nat:4> * <var:L> \} \\ <var:f3> := <nat:1> ; \\ \{ <var:Z> = <var:L> \land <var:f0> = <nat:1> \land <var:f1> = <nat:4> * <var:L> \land <var:f3> = <nat:1> \} \\ <var:f3> := <var:f3> * <var:Z> ; \\ \{ <var:Z> = <var:L> \land <var:f0> = <nat:1> \land <var:f1> = <nat:4> * <var:L> \land <var:f3> = <nat:1> * <var:L> \} \\ <var:f3> := <var:f3> * <var:Z> ; \\ \{ <var:Z> = <var:L> \land <var:f0> = <nat:1> \land <var:f1> = <nat:4> * <var:L> \land <var:f3> = <nat:1> * <var:L> ^ <nat:2> \} \\ <var:f3> := <var:f3> * <var:Z> ; \\ \{ <var:Z> = <var:L> \land <var:f0> = <nat:1> \land <var:f1> = <nat:4> * <var:L> \land <var:f3> = <nat:1> * <var:L> ^ <nat:3> \} \\ <var:O> := <var:f3> ; \\ \{ <var:Z> = <var:L> \land <var:f0> = <nat:1> \land <var:f1> = <nat:4> * <var:L> \land <var:O> = <nat:1> * <var:L> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:f1> ; \\ \{ <var:Z> = <var:L> \land <var:f0> = <nat:1> \land <var:O> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> \} \\ <var:O> := <var:O> + <var:f0> \\ \{ <var:Z> = <var:L> \land <var:O> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + <nat:1> \} \end{eqnarray} Applying Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f0> := <nat:1> ; <var:f1> := <nat:4> ; <var:f1> := <var:f1> * <var:Z> ; <var:f3> := <nat:1> ; <var:f3> := <var:f3> * <var:Z> ; <var:f3> := <var:f3> * <var:Z> ; <var:f3> := <var:f3> * <var:Z> ; <var:O> := <var:f3> ; <var:O> := <var:O> + <var:f1> ; <var:O> := <var:O> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:Z> = <var:L> }} <def:poly> {{ <var:O> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:f0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:4> * <var:L> /\ <var:f3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:4> * <var:L> /\ <var:f3> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:4> * <var:L> /\ <var:f3> = <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:4> * <var:L> /\ <var:f3> = <nat:1> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:f0> = <nat:1> /\ <var:f1> = <nat:4> * <var:L> /\ <var:O> = <nat:1> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:f0> = <nat:1> /\ <var:O> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:O> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 