\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:1> ; <var:a1> := <nat:3> ; <var:a1> := <var:a1> * <var:V> ; <var:a2> := <nat:2> ; <var:a2> := <var:a2> * <var:V> ; <var:a2> := <var:a2> * <var:V> ; <var:c> := <var:a2> ; <var:c> := <var:c> + <var:a1> ; <var:c> := <var:c> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> . Allow $ <var:V> = <var:m> $ ahead of the evaluation of this list of instructions , it must be that $ <var:c> = <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of commands is clear using this decorated segment of code . \begin{eqnarray} \{ <var:V> = <var:m> \} \\ <var:a0> := <nat:1> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:1> \} \\ <var:a1> := <nat:3> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:1> \land <var:a1> = <nat:3> \} \\ <var:a1> := <var:a1> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:1> \land <var:a1> = <nat:3> \times <var:m> \} \\ <var:a2> := <nat:2> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:1> \land <var:a1> = <nat:3> \times <var:m> \land <var:a2> = <nat:2> \} \\ <var:a2> := <var:a2> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:1> \land <var:a1> = <nat:3> \times <var:m> \land <var:a2> = <nat:2> \times <var:m> \} \\ <var:a2> := <var:a2> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:1> \land <var:a1> = <nat:3> \times <var:m> \land <var:a2> = <nat:2> \times <var:m> ^ <nat:2> \} \\ <var:c> := <var:a2> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:1> \land <var:a1> = <nat:3> \times <var:m> \land <var:c> = <nat:2> \times <var:m> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:a1> ; \\ \{ <var:V> = <var:m> \land <var:a0> = <nat:1> \land <var:c> = <nat:2> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> \} \\ <var:c> := <var:c> + <var:a0> \\ \{ <var:V> = <var:m> \land <var:c> = <nat:2> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:1> \} \end{eqnarray} The application of typical Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <def:poly> := <var:a0> := <nat:1> ; <var:a1> := <nat:3> ; <var:a1> := <var:a1> * <var:V> ; <var:a2> := <nat:2> ; <var:a2> := <var:a2> * <var:V> ; <var:a2> := <var:a2> * <var:V> ; <var:c> := <var:a2> ; <var:c> := <var:c> + <var:a1> ; <var:c> := <var:c> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:V> = <var:m> }} <def:poly> {{ <var:c> = <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:3> * <var:m> /\ <var:a2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:3> * <var:m> /\ <var:a2> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:3> * <var:m> /\ <var:a2> = <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:3> * <var:m> /\ <var:c> = <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:a0> = <nat:1> /\ <var:c> = <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:c> = <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 