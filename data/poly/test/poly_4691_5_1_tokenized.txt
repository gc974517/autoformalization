\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m1> := <var:O> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:8> ; <var:b> := <var:m1> <var:b> := <var:b> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> . Allow $ <var:O> = <var:Z> $ ahead of the execution of this set of commands it holds that we have $ <var:b> = <nat:8> \times <var:Z> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic produces : \begin{eqnarray} \{ <var:O> = <var:Z> \} \\ <var:m1> := <var:O> ; \\ \{ <var:O> = <var:Z> \land <var:m1> = <var:Z> \} \\ <var:m0> := <nat:2> ; \\ \{ <var:O> = <var:Z> \land <var:m1> = <var:Z> \land <var:m0> = <nat:2> \} \\ <var:m1> := <var:m1> * <nat:8> ; \\ \{ <var:O> = <var:Z> \land <var:m1> = <nat:8> \cdot <var:Z> \land <var:m0> = <nat:2> \} \\ <var:b> := <var:m1> \\ \{ <var:O> = <var:Z> \land <var:m0> = <nat:2> \land <var:b> = <nat:8> \cdot <var:Z> \} \\ <var:b> := <var:b> + <var:m0> \\ \{ <var:O> = <var:Z> \land <var:b> = <nat:8> \cdot <var:Z> + <nat:2> \} \end{eqnarray} Thus , this list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m1> := <var:O> ; <var:m0> := <nat:2> ; <var:m1> := <var:m1> * <nat:8> ; <var:b> := <var:m1> <var:b> := <var:b> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:O> = <var:Z> }} <def:poly> {{ <var:b> = <nat:8> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:m1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:m1> = <var:Z> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:m1> = <nat:8> * <var:Z> /\ <var:m0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:m0> = <nat:2> /\ <var:b> = <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:Z> /\ <var:b> = <nat:8> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 