\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G1> := <var:s> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:2> ; <var:N> := <var:G1> <var:N> := <var:N> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> . Given it to hold that $ <var:s> = <var:Y> $ , for any natural numbers $ <var:Y> $ , ahead of running the list of commands it holds that $ <var:N> = <nat:2> \times <var:Y> + <nat:3> $ after set of commands executes . \end{theorem} \begin{proof} The argument for our segment of code can be done through standard Hoare logic . Taking a look at the proceeding pieces of code in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:s> = <var:Y> \} & <var:G1> := <var:s> & \{ <var:s> = <var:Y> \land <var:G1> = <var:Y> \} \\ \{ <var:s> = <var:Y> \land <var:G1> = <var:Y> \} & <var:G0> := <nat:3> & \{ <var:s> = <var:Y> \land <var:G1> = <var:Y> \land <var:G0> = <nat:3> \} \\ \{ <var:s> = <var:Y> \land <var:G1> = <var:Y> \land <var:G0> = <nat:3> \} & <var:G1> := <var:G1> * <nat:2> & \{ <var:s> = <var:Y> \land <var:G1> = <nat:2> * <var:Y> \land <var:G0> = <nat:3> \} \\ \{ <var:s> = <var:Y> \land <var:G1> = <nat:2> * <var:Y> \land <var:G0> = <nat:3> \} & <var:N> := <var:G1& \{ <var:s> = <var:Y> \land <var:G0> = <nat:3> \land <var:N> = <nat:2> * <var:Y> \} \\ \{ <var:s> = <var:Y> \land <var:G0> = <nat:3> \land <var:N> = <nat:2> * <var:Y> \} & <var:N> := <var:N> + <var:G0& \{ <var:s> = <var:Y> \land <var:N> = <nat:2> * <var:Y> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G1> := <var:s> ; <var:G0> := <nat:3> ; <var:G1> := <var:G1> * <nat:2> ; <var:N> := <var:G1> <var:N> := <var:N> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:s> = <var:Y> }} <def:poly> {{ <var:N> = <nat:2> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:G1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:G1> = <var:Y> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:G1> = <nat:2> * <var:Y> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:G0> = <nat:3> /\ <var:N> = <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Y> /\ <var:N> = <nat:2> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 