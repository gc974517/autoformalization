\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a> := <nat:3> ; <var:a> := <nat:4> + <var:a> * <var:Q> ; <var:a> := <nat:2> + <var:a> * <var:Q> ; <var:a> := <nat:2> + <var:a> * <var:Q> ; <var:a> := <nat:4> + <var:a> * <var:Q> ; <var:a> := <nat:3> + <var:a> * <var:Q> ; <var:a> := <nat:1> + <var:a> * <var:Q> ; <var:a> := <nat:2> + <var:a> * <var:Q> ; <var:a> := <nat:2> + <var:a> * <var:Q> ; <var:a> := <nat:3> + <var:a> * <var:Q> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> . Allowing ( for some positive integer coefficients $ <var:d> $ ) that $ <var:Q> = <var:d> $ prior to evaluating our series of commands , then $ <var:a> = <nat:3> * <var:d> ^ <nat:9> + <nat:4> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> $ once list of commands terminates . \end{theorem} \begin{proof} Showing our claim about correctness for our code segment can be seen through standard Hoare techniques . Observing the next statement seen in our set of commands , we have the variable binding statement defining $ <nat:3> $ to $ <var:a>$ . This transfers the precondition $ \{ <var:Q> = <var:d> \} $ toward the postcondition $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \} $ . This is shown to be logically sound using the assignment law defined in typical Hoare techniques . Shifting focus toward the next command found in the code segment , we have the variable assignmet code giving $ <nat:4> + <var:a> * <var:Q> $ toward $ <var:a>$ . This command advances $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \} $ to $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> + <nat:4> \} $ . This is sound with the assignment law in standard Hoare logic . Moving on , we have the variable binding command letting $ <nat:2> + <var:a> * <var:Q> $ into $ <var:a>$ . This code moves the precondition $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> + <nat:4> \} $ into the postcondition $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:2> \} $ . This is deduced by the assignment inference rule from usual Hoare logic . Jumping to the following step found in the set of instructions , we have the environment update code defining $ <nat:2> + <var:a> * <var:Q> $ into $ <var:a>$ . This redefines the precondition $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:2> \} $ to the postcondition $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:2> \} $ . Observing the proceeding line of code found in our segment of code , we have the environment update code \verb | <var:a> := <nat:4> + <var:a> * <var:Q> ; | . This transfers $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:2> \} $ toward $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:4> + <nat:4> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:4> \} $ . Honing in on the next statement found in our series of commands , we see the environment update line yielding $ <nat:3> + <var:a> * <var:Q> $ toward $ <var:a>$ . This line redefines the condition $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:4> + <nat:4> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:4> \} $ toward the postcondition $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:5> + <nat:4> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:3> \} $ . Honing in on the following step in our series of instructions , we have the variable update statement assigning $ <nat:1> + <var:a> * <var:Q> $ toward $ <var:a>$ . This moves the condition $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:5> + <nat:4> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:4> \times <var:d> + <nat:3> \} $ toward the condition $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:6> + <nat:4> \times <var:d> ^ <nat:5> + <nat:2> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:1> \} $ . Stepping through , we see the variable assignmet statement \verb | <var:a> := <nat:2> + <var:a> * <var:Q> ; | . This takes the condition $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:6> + <nat:4> \times <var:d> ^ <nat:5> + <nat:2> \times <var:d> ^ <nat:4> + <nat:2> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:1> \} $ into $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:7> + <nat:4> \times <var:d> ^ <nat:6> + <nat:2> \times <var:d> ^ <nat:5> + <nat:2> \times <var:d> ^ <nat:4> + <nat:4> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:2> \} $ . This is guaranteed with the assignment scheme given by Hoare logic . Going to the next step , we have the variable assignmet line giving $ <nat:2> + <var:a> * <var:Q> $ into $ <var:a>$ . This command takes the condition $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:7> + <nat:4> \times <var:d> ^ <nat:6> + <nat:2> \times <var:d> ^ <nat:5> + <nat:2> \times <var:d> ^ <nat:4> + <nat:4> \times <var:d> ^ <nat:3> + <nat:3> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:2> \} $ into the postcondition $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:8> + <nat:4> \times <var:d> ^ <nat:7> + <nat:2> \times <var:d> ^ <nat:6> + <nat:2> \times <var:d> ^ <nat:5> + <nat:4> \times <var:d> ^ <nat:4> + <nat:3> \times <var:d> ^ <nat:3> + <nat:1> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:2> \} $ . Keeping momentum , we see the command \verb | <var:a> := <nat:3> + <var:a> * <var:Q> | . This advances $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:8> + <nat:4> \times <var:d> ^ <nat:7> + <nat:2> \times <var:d> ^ <nat:6> + <nat:2> \times <var:d> ^ <nat:5> + <nat:4> \times <var:d> ^ <nat:4> + <nat:3> \times <var:d> ^ <nat:3> + <nat:1> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:2> \} $ to the postcondition $ \{ <var:Q> = <var:d> \land <var:a> = <nat:3> \times <var:d> ^ <nat:9> + <nat:4> \times <var:d> ^ <nat:8> + <nat:2> \times <var:d> ^ <nat:7> + <nat:2> \times <var:d> ^ <nat:6> + <nat:4> \times <var:d> ^ <nat:5> + <nat:3> \times <var:d> ^ <nat:4> + <nat:1> \times <var:d> ^ <nat:3> + <nat:2> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:a> := <nat:3> ; <var:a> := <nat:4> + <var:a> * <var:Q> ; <var:a> := <nat:2> + <var:a> * <var:Q> ; <var:a> := <nat:2> + <var:a> * <var:Q> ; <var:a> := <nat:4> + <var:a> * <var:Q> ; <var:a> := <nat:3> + <var:a> * <var:Q> ; <var:a> := <nat:1> + <var:a> * <var:Q> ; <var:a> := <nat:2> + <var:a> * <var:Q> ; <var:a> := <nat:2> + <var:a> * <var:Q> ; <var:a> := <nat:3> + <var:a> * <var:Q> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:Q> = <var:d> }} <def:poly> {{ <var:a> = <nat:3> * <var:d> ^ <nat:9> + <nat:4> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:a> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:a> = <nat:3> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:7> + <nat:4> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:8> + <nat:4> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:d> /\ <var:a> = <nat:3> * <var:d> ^ <nat:9> + <nat:4> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 