\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:1> ; <var:H> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Given it to be that $ <var:k> = <var:V> $ prior to running our segment of code , then we have $ <var:H> = <nat:1> $ once program terminates . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code is evident through typical Hoare techniques . Jumping to the subsequent statements contained in our code segment , \begin{eqnarray} \{ <var:k> = <var:V> \} \, <var:q0> := <nat:1> \, \{ <var:k> = <var:V> \land <var:q0> = <nat:1> \} \\ \{ <var:k> = <var:V> \land <var:q0> = <nat:1> \} \, <var:H> := <var:q0\, \{ <var:k> = <var:V> \land <var:H> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:1> ; <var:H> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:k> = <var:V> }} <def:poly> {{ <var:H> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:V> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:V> /\ <var:H> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 