\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as \begin{verbatim} <var:l1> := <var:c> ; <var:l2> := <var:l1> * <var:c> ; <var:l3> := <var:l2> * <var:c> ; <var:l4> := <var:l3> * <var:c> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:6> ; <var:l2> := <var:l2> * <nat:1> ; <var:l3> := <var:l3> * <nat:5> ; <var:l4> := <var:l4> * <nat:5> ; <var:x> := <var:l4> <var:x> := <var:x> + <var:l3> <var:x> := <var:x> + <var:l2> <var:x> := <var:x> + <var:l1> <var:x> := <var:x> + <var:l0> \end{verbatim} Allowing $ <var:c> = <var:k> $ ahead of interpreting this series of commands , it holds that $ <var:x> = <nat:5> * <var:k> ^ <nat:4> + <nat:5> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:3> $ once set of instructions is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for the code is demonstrated by typical Hoare techniques . Following , we see \begin{verbatim} { <var:c> = <var:k> } <var:l1> := <var:c> { <var:c> = <var:k> \land <var:l1> = <var:k> } { <var:c> = <var:k> \land <var:l1> = <var:k> } <var:l2> := <var:l1> * <var:c> { <var:c> = <var:k> \land <var:l1> = <var:k> \land <var:l2> = <var:k> ^ <nat:2> } { <var:c> = <var:k> \land <var:l1> = <var:k> \land <var:l2> = <var:k> ^ <nat:2> } <var:l3> := <var:l2> * <var:c> { <var:c> = <var:k> \land <var:l1> = <var:k> \land <var:l2> = <var:k> ^ <nat:2> \land <var:l3> = <var:k> ^ <nat:3> } { <var:c> = <var:k> \land <var:l1> = <var:k> \land <var:l2> = <var:k> ^ <nat:2> \land <var:l3> = <var:k> ^ <nat:3> } <var:l4> := <var:l3> * <var:c> { <var:c> = <var:k> \land <var:l1> = <var:k> \land <var:l2> = <var:k> ^ <nat:2> \land <var:l3> = <var:k> ^ <nat:3> \land <var:l4> = <var:k> ^ <nat:4> } { <var:c> = <var:k> \land <var:l1> = <var:k> \land <var:l2> = <var:k> ^ <nat:2> \land <var:l3> = <var:k> ^ <nat:3> \land <var:l4> = <var:k> ^ <nat:4> } <var:l0> := <nat:3> { <var:c> = <var:k> \land <var:l1> = <var:k> \land <var:l2> = <var:k> ^ <nat:2> \land <var:l3> = <var:k> ^ <nat:3> \land <var:l4> = <var:k> ^ <nat:4> \land <var:l0> = <nat:3> } { <var:c> = <var:k> \land <var:l1> = <var:k> \land <var:l2> = <var:k> ^ <nat:2> \land <var:l3> = <var:k> ^ <nat:3> \land <var:l4> = <var:k> ^ <nat:4> \land <var:l0> = <nat:3> } <var:l1> := <var:l1> * <nat:6> { <var:c> = <var:k> \land <var:l1> = <nat:6> \cdot <var:k> \land <var:l2> = <var:k> ^ <nat:2> \land <var:l3> = <var:k> ^ <nat:3> \land <var:l4> = <var:k> ^ <nat:4> \land <var:l0> = <nat:3> } { <var:c> = <var:k> \land <var:l1> = <nat:6> \cdot <var:k> \land <var:l2> = <var:k> ^ <nat:2> \land <var:l3> = <var:k> ^ <nat:3> \land <var:l4> = <var:k> ^ <nat:4> \land <var:l0> = <nat:3> } <var:l2> := <var:l2> * <nat:1> { <var:c> = <var:k> \land <var:l1> = <nat:6> \cdot <var:k> \land <var:l2> = <nat:1> \cdot <var:k> ^ <nat:2> \land <var:l3> = <var:k> ^ <nat:3> \land <var:l4> = <var:k> ^ <nat:4> \land <var:l0> = <nat:3> } { <var:c> = <var:k> \land <var:l1> = <nat:6> \cdot <var:k> \land <var:l2> = <nat:1> \cdot <var:k> ^ <nat:2> \land <var:l3> = <var:k> ^ <nat:3> \land <var:l4> = <var:k> ^ <nat:4> \land <var:l0> = <nat:3> } <var:l3> := <var:l3> * <nat:5> { <var:c> = <var:k> \land <var:l1> = <nat:6> \cdot <var:k> \land <var:l2> = <nat:1> \cdot <var:k> ^ <nat:2> \land <var:l3> = <nat:5> \cdot <var:k> ^ <nat:3> \land <var:l4> = <var:k> ^ <nat:4> \land <var:l0> = <nat:3> } { <var:c> = <var:k> \land <var:l1> = <nat:6> \cdot <var:k> \land <var:l2> = <nat:1> \cdot <var:k> ^ <nat:2> \land <var:l3> = <nat:5> \cdot <var:k> ^ <nat:3> \land <var:l4> = <var:k> ^ <nat:4> \land <var:l0> = <nat:3> } <var:l4> := <var:l4> * <nat:5> { <var:c> = <var:k> \land <var:l1> = <nat:6> \cdot <var:k> \land <var:l2> = <nat:1> \cdot <var:k> ^ <nat:2> \land <var:l3> = <nat:5> \cdot <var:k> ^ <nat:3> \land <var:l4> = <nat:5> \cdot <var:k> ^ <nat:4> \land <var:l0> = <nat:3> } { <var:c> = <var:k> \land <var:l1> = <nat:6> \cdot <var:k> \land <var:l2> = <nat:1> \cdot <var:k> ^ <nat:2> \land <var:l3> = <nat:5> \cdot <var:k> ^ <nat:3> \land <var:l4> = <nat:5> \cdot <var:k> ^ <nat:4> \land <var:l0> = <nat:3> } <var:x> := <var:l4{ <var:c> = <var:k> \land <var:l1> = <nat:6> \cdot <var:k> \land <var:l2> = <nat:1> \cdot <var:k> ^ <nat:2> \land <var:l3> = <nat:5> \cdot <var:k> ^ <nat:3> \land <var:l0> = <nat:3> \land <var:x> = <nat:5> \cdot <var:k> ^ <nat:4> } { <var:c> = <var:k> \land <var:l1> = <nat:6> \cdot <var:k> \land <var:l2> = <nat:1> \cdot <var:k> ^ <nat:2> \land <var:l3> = <nat:5> \cdot <var:k> ^ <nat:3> \land <var:l0> = <nat:3> \land <var:x> = <nat:5> \cdot <var:k> ^ <nat:4> } <var:x> := <var:x> + <var:l3{ <var:c> = <var:k> \land <var:l1> = <nat:6> \cdot <var:k> \land <var:l2> = <nat:1> \cdot <var:k> ^ <nat:2> \land <var:l0> = <nat:3> \land <var:x> = <nat:5> \cdot <var:k> ^ <nat:4> + <nat:5> \cdot <var:k> ^ <nat:3> } { <var:c> = <var:k> \land <var:l1> = <nat:6> \cdot <var:k> \land <var:l2> = <nat:1> \cdot <var:k> ^ <nat:2> \land <var:l0> = <nat:3> \land <var:x> = <nat:5> \cdot <var:k> ^ <nat:4> + <nat:5> \cdot <var:k> ^ <nat:3> } <var:x> := <var:x> + <var:l2{ <var:c> = <var:k> \land <var:l1> = <nat:6> \cdot <var:k> \land <var:l0> = <nat:3> \land <var:x> = <nat:5> \cdot <var:k> ^ <nat:4> + <nat:5> \cdot <var:k> ^ <nat:3> + <nat:1> \cdot <var:k> ^ <nat:2> } \end{verbatim} Advancing on , we have \begin{verbatim} { <var:c> = <var:k> } <var:l1> := <var:c> { <var:c> = <var:k> \land <var:l1> = <var:k> } \end{verbatim} Looking at the subsequent step found in the list of instructions , \begin{verbatim} { <var:c> = <var:k> } <var:l1> := <var:c> { <var:c> = <var:k> \land <var:l1> = <var:k> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <var:l4> : string := " <var:l4> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:c> = <var:k> }} <var:l1> := <var:c> ; <var:l2> := <var:l1> * <var:c> ; <var:l3> := <var:l2> * <var:c> ; <var:l4> := <var:l3> * <var:c> ; <var:l0> := <nat:3> ; <var:l1> := <var:l1> * <nat:6> ; <var:l2> := <var:l2> * <nat:1> ; <var:l3> := <var:l3> * <nat:5> ; <var:l4> := <var:l4> * <nat:5> ; <var:x> := <var:l4> <var:x> := <var:x> + <var:l3> <var:x> := <var:x> + <var:l2> <var:x> := <var:x> + <var:l1> <var:x> := <var:x> + <var:l0> {{ <var:x> = <nat:5> * <var:k> ^ <nat:4> + <nat:5> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:l1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:l1> = <var:k> /\ <var:l2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:l1> = <var:k> /\ <var:l2> = <var:k> ^ <nat:2> /\ <var:l3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:l1> = <var:k> /\ <var:l2> = <var:k> ^ <nat:2> /\ <var:l3> = <var:k> ^ <nat:3> /\ <var:l4> = <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:l1> = <var:k> /\ <var:l2> = <var:k> ^ <nat:2> /\ <var:l3> = <var:k> ^ <nat:3> /\ <var:l4> = <var:k> ^ <nat:4> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:l1> = <nat:6> * <var:k> /\ <var:l2> = <var:k> ^ <nat:2> /\ <var:l3> = <var:k> ^ <nat:3> /\ <var:l4> = <var:k> ^ <nat:4> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:l1> = <nat:6> * <var:k> /\ <var:l2> = <nat:1> * <var:k> ^ <nat:2> /\ <var:l3> = <var:k> ^ <nat:3> /\ <var:l4> = <var:k> ^ <nat:4> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:l1> = <nat:6> * <var:k> /\ <var:l2> = <nat:1> * <var:k> ^ <nat:2> /\ <var:l3> = <nat:5> * <var:k> ^ <nat:3> /\ <var:l4> = <var:k> ^ <nat:4> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:l1> = <nat:6> * <var:k> /\ <var:l2> = <nat:1> * <var:k> ^ <nat:2> /\ <var:l3> = <nat:5> * <var:k> ^ <nat:3> /\ <var:l4> = <nat:5> * <var:k> ^ <nat:4> /\ <var:l0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:l1> = <nat:6> * <var:k> /\ <var:l2> = <nat:1> * <var:k> ^ <nat:2> /\ <var:l3> = <nat:5> * <var:k> ^ <nat:3> /\ <var:l0> = <nat:3> /\ <var:x> = <nat:5> * <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:l1> = <nat:6> * <var:k> /\ <var:l2> = <nat:1> * <var:k> ^ <nat:2> /\ <var:l0> = <nat:3> /\ <var:x> = <nat:5> * <var:k> ^ <nat:4> + <nat:5> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:l1> = <nat:6> * <var:k> /\ <var:l0> = <nat:3> /\ <var:x> = <nat:5> * <var:k> ^ <nat:4> + <nat:5> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:l0> = <nat:3> /\ <var:x> = <nat:5> * <var:k> ^ <nat:4> + <nat:5> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:x> = <nat:5> * <var:k> ^ <nat:4> + <nat:5> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 