\begin{document} \begin{theorem} Take the following code as \begin{verbatim} <var:A> := <nat:2> ; <var:A> := <nat:1> + <var:A> * <var:m> ; <var:A> := <nat:1> + <var:A> * <var:m> ; <var:A> := <nat:3> + <var:A> * <var:m> ; <var:A> := <nat:4> + <var:A> * <var:m> ; <var:A> := <nat:2> + <var:A> * <var:m> \end{verbatim} Allow that we have $ <var:m> = <var:l> $ before evaluating this set of instructions it must be that we have $ <var:A> = <nat:2> \times <var:l> ^ <nat:5> + <nat:1> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:3> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:2> $ . \end{theorem} \begin{proof} The flow of logic for the series of commands is done using usual Hoare techniques . Paying attention to the upcoming step contained in our set of instructions , the assignment line \verb | <var:A> := <nat:2> ; | . This command forwards the precondition $ \{ <var:m> = <var:l> \} $ into the condition $ \{ <var:m> = <var:l> \land <var:A> = <nat:2> \} $ . This is guaranteed through the assignment inference rule defined by typical Hoare reasoning . Immediately following , we have the variable update line \verb | <var:A> := <nat:1> + <var:A> * <var:m> ; | . This moves $ \{ <var:m> = <var:l> \land <var:A> = <nat:2> \} $ as the condition $ \{ <var:m> = <var:l> \land <var:A> = <nat:2> \times <var:l> + <nat:1> \} $ . This is ensured with the assignment law in typical Hoare logic . Next , we have the binding command yielding $ <nat:1> + <var:A> * <var:m> $ toward $ <var:A>$ . This redefines $ \{ <var:m> = <var:l> \land <var:A> = <nat:2> \times <var:l> + <nat:1> \} $ toward the condition $ \{ <var:m> = <var:l> \land <var:A> = <nat:2> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:1> \} $ . Advancing , we see the assignment line \verb | <var:A> := <nat:3> + <var:A> * <var:m> ; | . This takes the condition $ \{ <var:m> = <var:l> \land <var:A> = <nat:2> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:1> \} $ into the postcondition $ \{ <var:m> = <var:l> \land <var:A> = <nat:2> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:3> \} $ . Shifting focus toward the upcoming bit of code contained in our program , we have the variable update command letting $ <nat:4> + <var:A> * <var:m> $ into $ <var:A>$ . This line moves the precondition $ \{ <var:m> = <var:l> \land <var:A> = <nat:2> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:3> \} $ into the postcondition $ \{ <var:m> = <var:l> \land <var:A> = <nat:2> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:4> \} $ . This is deduced using the assignment scheme in Hoare techniques . Observing the proceeding statement seen in the code segment , we have the variable assignmet code yielding $ <nat:2> + <var:A> * <var:m$ as $ <var:A>$ . This moves the condition $ \{ <var:m> = <var:l> \land <var:A> = <nat:2> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:1> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:4> \} $ toward the postcondition $ \{ <var:m> = <var:l> \land <var:A> = <nat:2> \times <var:l> ^ <nat:5> + <nat:1> \times <var:l> ^ <nat:4> + <nat:1> \times <var:l> ^ <nat:3> + <nat:3> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:2> \} $ . This is ensured using the assignment inference rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:m> = <var:l> }} <var:A> := <nat:2> ; <var:A> := <nat:1> + <var:A> * <var:m> ; <var:A> := <nat:1> + <var:A> * <var:m> ; <var:A> := <nat:3> + <var:A> * <var:m> ; <var:A> := <nat:4> + <var:A> * <var:m> ; <var:A> := <nat:2> + <var:A> * <var:m> {{ <var:A> = <nat:2> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:A> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:A> = <nat:2> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:A> = <nat:2> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:A> = <nat:2> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:A> = <nat:2> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:l> /\ <var:A> = <nat:2> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 