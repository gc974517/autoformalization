\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:E0> := <nat:9> ; <var:u> := <var:E0> \end{verbatim} \end{definition} \begin{theorem} Allow , given some natural numbers $ <var:F> $ , it to be that $ <var:M> = <var:F> $ before evaluating our code segment it must be that $ <var:u> = <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:F> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:M> = <var:F> \land <var:E0> = <nat:9> \} \\ <var:u> := <var:E0> \\ \{ <var:M> = <var:F> \land <var:u> = <nat:9> \} \end{eqnarray} Using typical Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <def:poly> := <var:E0> := <nat:9> ; <var:u> := <var:E0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:M> = <var:F> }} <def:poly> {{ <var:u> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:F> /\ <var:u> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 