\begin{document} \begin{theorem} We define a program as \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:5> ; <var:c1> := <var:c1> * <var:f> ; <var:e> := <var:c1> ; <var:e> := <var:e> + <var:c0> \end{verbatim} Assuming $ <var:f> = <var:j> $ ahead of executing the series of instructions , it follows that $ <var:e> = <nat:5> \cdot <var:j> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques results in : \begin{eqnarray} \{ <var:f> = <var:j> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:f> = <var:j> \land <var:c0> = <nat:3> \} \\ <var:c1> := <nat:5> ; \\ \{ <var:f> = <var:j> \land <var:c0> = <nat:3> \land <var:c1> = <nat:5> \} \\ <var:c1> := <var:c1> * <var:f> ; \\ \{ <var:f> = <var:j> \land <var:c0> = <nat:3> \land <var:c1> = <nat:5> \times <var:j> \} \\ <var:e> := <var:c1> ; \\ \{ <var:f> = <var:j> \land <var:c0> = <nat:3> \land <var:e> = <nat:5> \times <var:j> \} \\ <var:e> := <var:e> + <var:c0> \\ \{ <var:f> = <var:j> \land <var:e> = <nat:5> \times <var:j> + <nat:3> \} \end{eqnarray} Thusly , the code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:f> = <var:j> }} <var:c0> := <nat:3> ; <var:c1> := <nat:5> ; <var:c1> := <var:c1> * <var:f> ; <var:e> := <var:c1> ; <var:e> := <var:e> + <var:c0> {{ <var:e> = <nat:5> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:5> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:c0> = <nat:3> /\ <var:e> = <nat:5> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:j> /\ <var:e> = <nat:5> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 