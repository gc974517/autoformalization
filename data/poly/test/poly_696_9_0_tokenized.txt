\begin{document} \begin{theorem} Consider a set of instructions : \begin{verbatim} <var:r0> := <nat:9> ; <var:r1> := <nat:5> ; <var:r1> := <var:r1> * <var:y> ; <var:r2> := <nat:2> ; <var:r2> := <var:r2> * <var:y> ; <var:r2> := <var:r2> * <var:y> ; <var:u> := <var:r2> ; <var:u> := <var:u> + <var:r1> ; <var:u> := <var:u> + <var:r0> \end{verbatim} Assume that $ <var:y> = <var:p> $ --- given $ <var:p> \in \mathbb{N} $ --- ahead of the evaluation of this code , it follows that we see $ <var:u> = <nat:2> \cdot <var:p> ^ <nat:2> + <nat:5> \cdot <var:p> + <nat:9> $ . \end{theorem} \begin{proof} Applying Hoare techniques gives : \begin{eqnarray} \{ <var:y> = <var:p> \} \\ <var:r0> := <nat:9> ; \\ \{ <var:y> = <var:p> \land <var:r0> = <nat:9> \} \\ <var:r1> := <nat:5> ; \\ \{ <var:y> = <var:p> \land <var:r0> = <nat:9> \land <var:r1> = <nat:5> \} \\ <var:r1> := <var:r1> * <var:y> ; \\ \{ <var:y> = <var:p> \land <var:r0> = <nat:9> \land <var:r1> = <nat:5> \times <var:p> \} \\ <var:r2> := <nat:2> ; \\ \{ <var:y> = <var:p> \land <var:r0> = <nat:9> \land <var:r1> = <nat:5> \times <var:p> \land <var:r2> = <nat:2> \} \\ <var:r2> := <var:r2> * <var:y> ; \\ \{ <var:y> = <var:p> \land <var:r0> = <nat:9> \land <var:r1> = <nat:5> \times <var:p> \land <var:r2> = <nat:2> \times <var:p> \} \\ <var:r2> := <var:r2> * <var:y> ; \\ \{ <var:y> = <var:p> \land <var:r0> = <nat:9> \land <var:r1> = <nat:5> \times <var:p> \land <var:r2> = <nat:2> \times <var:p> ^ <nat:2> \} \\ <var:u> := <var:r2> ; \\ \{ <var:y> = <var:p> \land <var:r0> = <nat:9> \land <var:r1> = <nat:5> \times <var:p> \land <var:u> = <nat:2> \times <var:p> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:r1> ; \\ \{ <var:y> = <var:p> \land <var:r0> = <nat:9> \land <var:u> = <nat:2> \times <var:p> ^ <nat:2> + <nat:5> \times <var:p> \} \\ <var:u> := <var:u> + <var:r0> \\ \{ <var:y> = <var:p> \land <var:u> = <nat:2> \times <var:p> ^ <nat:2> + <nat:5> \times <var:p> + <nat:9> \} \end{eqnarray} As a result , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:y> = <var:p> }} <var:r0> := <nat:9> ; <var:r1> := <nat:5> ; <var:r1> := <var:r1> * <var:y> ; <var:r2> := <nat:2> ; <var:r2> := <var:r2> * <var:y> ; <var:r2> := <var:r2> * <var:y> ; <var:u> := <var:r2> ; <var:u> := <var:u> + <var:r1> ; <var:u> := <var:u> + <var:r0> {{ <var:u> = <nat:2> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:5> * <var:p> /\ <var:r2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:5> * <var:p> /\ <var:r2> = <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:5> * <var:p> /\ <var:r2> = <nat:2> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:r0> = <nat:9> /\ <var:r1> = <nat:5> * <var:p> /\ <var:u> = <nat:2> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:r0> = <nat:9> /\ <var:u> = <nat:2> * <var:p> ^ <nat:2> + <nat:5> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:u> = <nat:2> * <var:p> ^ <nat:2> + <nat:5> * <var:p> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 