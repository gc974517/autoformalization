\begin{document} \begin{theorem} Take the following code as \begin{verbatim} <var:X0> := <nat:3> ; <var:X1> := <nat:6> ; <var:X1> := <var:X1> * <var:M> ; <var:w> := <var:X1> ; <var:w> := <var:w> + <var:X0> \end{verbatim} Assume that we have $ <var:M> = <var:K> $ letting $ <var:K> $ prior to the evaluation of the segment of code , it holds that we see $ <var:w> = <nat:6> \times <var:K> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the program is evident using Hoare reasoning . Paying attention to the following line contained in our code , we have the command letting $ <nat:3> $ into $ <var:X0>$ . This transfers $ \{ <var:M> = <var:K> \} $ to $ \{ <var:M> = <var:K> \land <var:X0> = <nat:3> \} $ . Moving on to the next command found in the series of commands , we see the variable update code letting $ <nat:6> $ to $ <var:X1>$ . This advances the precondition $ \{ <var:M> = <var:K> \land <var:X0> = <nat:3> \} $ as $ \{ <var:M> = <var:K> \land <var:X0> = <nat:3> \land <var:X1> = <nat:6> \} $ . This is sound by the assignment inference rule in usual Hoare techniques . Advancing to the next step , we see the line yielding $ <var:X1> * <var:M> $ to $ <var:X1>$ . This code transfers the precondition $ \{ <var:M> = <var:K> \land <var:X0> = <nat:3> \land <var:X1> = <nat:6> \} $ as the condition $ \{ <var:M> = <var:K> \land <var:X0> = <nat:3> \land <var:X1> = <nat:6> \times <var:K> \} $ . This is rigorously given using the assignment law obtained from standard Hoare techniques . Stepping through , we see the variable binding statement \verb | <var:w> := <var:X1> ; | . This redefines $ \{ <var:M> = <var:K> \land <var:X0> = <nat:3> \land <var:X1> = <nat:6> \times <var:K> \} $ into the postcondition $ \{ <var:M> = <var:K> \land <var:X0> = <nat:3> \land <var:w> = <nat:6> \times <var:K> \} $ . Moving on , the command binding $ <var:w> + <var:X0$ as $ <var:w>$ . This command transfers the condition $ \{ <var:M> = <var:K> \land <var:X0> = <nat:3> \land <var:w> = <nat:6> \times <var:K> \} $ to $ \{ <var:M> = <var:K> \land <var:w> = <nat:6> \times <var:K> + <nat:3> \} $ . This is deduced through the assignment inference rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:M> = <var:K> }} <var:X0> := <nat:3> ; <var:X1> := <nat:6> ; <var:X1> := <var:X1> * <var:M> ; <var:w> := <var:X1> ; <var:w> := <var:w> + <var:X0> {{ <var:w> = <nat:6> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:X0> = <nat:3> /\ <var:w> = <nat:6> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:K> /\ <var:w> = <nat:6> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 