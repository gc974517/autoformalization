\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t0> := <nat:9> ; <var:Z> := <var:t0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:m> = <var:k> $ , for $ <var:k> $ , prior to the evaluation of the list of commands it follows that $ <var:Z> = <nat:9> $ . \end{theorem} \begin{proof} The proof of the set of instructions is evident by typical Hoare techniques . Advancing to the next step , we see \verb | { <var:m> = <var:k> } <var:t0> := <nat:9> { <var:m> = <var:k> \land <var:t0> = <nat:9> } | and \verb | { <var:m> = <var:k> \land <var:t0> = <nat:9> } <var:Z> := <var:t0{ <var:m> = <var:k> \land <var:Z> = <nat:9> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <def:poly> := <var:t0> := <nat:9> ; <var:Z> := <var:t0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:m> = <var:k> }} <def:poly> {{ <var:Z> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:t0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:k> /\ <var:Z> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 