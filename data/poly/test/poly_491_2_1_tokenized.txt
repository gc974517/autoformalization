\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:I0> := <nat:5> ; <var:D> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> in \emph{Imp} . Assume that $ <var:t> = <var:M> $ prior to the evaluation of the set of instructions then we see $ <var:D> = <nat:5> $ . \end{theorem} \begin{proof} Notice this decorated set of instructions . \begin{eqnarray} \{ <var:t> = <var:M> \} \\ <var:I0> := <nat:5> ; \\ \{ <var:t> = <var:M> \land <var:I0> = <nat:5> \} \\ <var:D> := <var:I0> \\ \{ <var:t> = <var:M> \land <var:D> = <nat:5> \} \end{eqnarray} The application of Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:5> ; <var:D> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:t> = <var:M> }} <def:poly> {{ <var:D> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:M> /\ <var:I0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:M> /\ <var:D> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 