\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:R> ; <var:e2> := <var:e1> * <var:R> ; <var:e3> := <var:e2> * <var:R> ; <var:e4> := <var:e3> * <var:R> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:9> ; <var:e2> := <var:e2> * <nat:6> ; <var:e4> := <var:e4> * <nat:3> ; <var:x> := <var:e4> <var:x> := <var:x> + <var:e2> <var:x> := <var:x> + <var:e1> <var:x> := <var:x> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Allowing it to hold that $ <var:R> = <var:C> $ prior to the execution of our code then $ <var:x> = <nat:3> \times <var:C> ^ <nat:4> + <nat:6> \times <var:C> ^ <nat:2> + <nat:9> \times <var:C> + <nat:7> $ once segment of code terminates . \end{theorem} \begin{proof} See that the below decorated list of instructions . \begin{eqnarray} \{ <var:R> = <var:C> \} \\ <var:e1> := <var:R> ; \\ \{ <var:R> = <var:C> \land <var:e1> = <var:C> \} \\ <var:e2> := <var:e1> * <var:R> ; \\ \{ <var:R> = <var:C> \land <var:e1> = <var:C> \land <var:e2> = <var:C> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:R> ; \\ \{ <var:R> = <var:C> \land <var:e1> = <var:C> \land <var:e2> = <var:C> ^ <nat:2> \land <var:e3> = <var:C> ^ <nat:3> \} \\ <var:e4> := <var:e3> * <var:R> ; \\ \{ <var:R> = <var:C> \land <var:e1> = <var:C> \land <var:e2> = <var:C> ^ <nat:2> \land <var:e3> = <var:C> ^ <nat:3> \land <var:e4> = <var:C> ^ <nat:4> \} \\ <var:e0> := <nat:7> ; \\ \{ <var:R> = <var:C> \land <var:e1> = <var:C> \land <var:e2> = <var:C> ^ <nat:2> \land <var:e3> = <var:C> ^ <nat:3> \land <var:e4> = <var:C> ^ <nat:4> \land <var:e0> = <nat:7> \} \\ <var:e1> := <var:e1> * <nat:9> ; \\ \{ <var:R> = <var:C> \land <var:e1> = <nat:9> \cdot <var:C> \land <var:e2> = <var:C> ^ <nat:2> \land <var:e3> = <var:C> ^ <nat:3> \land <var:e4> = <var:C> ^ <nat:4> \land <var:e0> = <nat:7> \} \\ <var:e2> := <var:e2> * <nat:6> ; \\ \{ <var:R> = <var:C> \land <var:e1> = <nat:9> \cdot <var:C> \land <var:e2> = <nat:6> \cdot <var:C> ^ <nat:2> \land <var:e3> = <var:C> ^ <nat:3> \land <var:e4> = <var:C> ^ <nat:4> \land <var:e0> = <nat:7> \} \\ <var:e4> := <var:e4> * <nat:3> ; \\ \{ <var:R> = <var:C> \land <var:e1> = <nat:9> \cdot <var:C> \land <var:e2> = <nat:6> \cdot <var:C> ^ <nat:2> \land <var:e3> = <var:C> ^ <nat:3> \land <var:e4> = <nat:3> \cdot <var:C> ^ <nat:4> \land <var:e0> = <nat:7> \} \\ <var:x> := <var:e4> \\ \{ <var:R> = <var:C> \land <var:e1> = <nat:9> \cdot <var:C> \land <var:e2> = <nat:6> \cdot <var:C> ^ <nat:2> \land <var:e3> = <var:C> ^ <nat:3> \land <var:e0> = <nat:7> \land <var:x> = <nat:3> \cdot <var:C> ^ <nat:4> \} \\ <var:x> := <var:x> + <var:e2> \\ \{ <var:R> = <var:C> \land <var:e1> = <nat:9> \cdot <var:C> \land <var:e0> = <nat:7> \land <var:x> = <nat:3> \cdot <var:C> ^ <nat:4> + <nat:6> \cdot <var:C> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:e1> \\ \{ <var:R> = <var:C> \land <var:e0> = <nat:7> \land <var:x> = <nat:3> \cdot <var:C> ^ <nat:4> + <nat:6> \cdot <var:C> ^ <nat:2> + <nat:9> \cdot <var:C> \} \\ <var:x> := <var:x> + <var:e0> \\ \{ <var:R> = <var:C> \land <var:x> = <nat:3> \cdot <var:C> ^ <nat:4> + <nat:6> \cdot <var:C> ^ <nat:2> + <nat:9> \cdot <var:C> + <nat:7> \} \end{eqnarray} Applying typical Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <var:e4> : string := " <var:e4> " . Definition <def:poly> := <var:e1> := <var:R> ; <var:e2> := <var:e1> * <var:R> ; <var:e3> := <var:e2> * <var:R> ; <var:e4> := <var:e3> * <var:R> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:9> ; <var:e2> := <var:e2> * <nat:6> ; <var:e4> := <var:e4> * <nat:3> ; <var:x> := <var:e4> <var:x> := <var:x> + <var:e2> <var:x> := <var:x> + <var:e1> <var:x> := <var:x> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:R> = <var:C> }} <def:poly> {{ <var:x> = <nat:3> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:e1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:e1> = <var:C> /\ <var:e2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:e1> = <var:C> /\ <var:e2> = <var:C> ^ <nat:2> /\ <var:e3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:e1> = <var:C> /\ <var:e2> = <var:C> ^ <nat:2> /\ <var:e3> = <var:C> ^ <nat:3> /\ <var:e4> = <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:e1> = <var:C> /\ <var:e2> = <var:C> ^ <nat:2> /\ <var:e3> = <var:C> ^ <nat:3> /\ <var:e4> = <var:C> ^ <nat:4> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:e1> = <nat:9> * <var:C> /\ <var:e2> = <var:C> ^ <nat:2> /\ <var:e3> = <var:C> ^ <nat:3> /\ <var:e4> = <var:C> ^ <nat:4> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:e1> = <nat:9> * <var:C> /\ <var:e2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:e3> = <var:C> ^ <nat:3> /\ <var:e4> = <var:C> ^ <nat:4> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:e1> = <nat:9> * <var:C> /\ <var:e2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:e3> = <var:C> ^ <nat:3> /\ <var:e4> = <nat:3> * <var:C> ^ <nat:4> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:e1> = <nat:9> * <var:C> /\ <var:e2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:e3> = <var:C> ^ <nat:3> /\ <var:e0> = <nat:7> /\ <var:x> = <nat:3> * <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:e1> = <nat:9> * <var:C> /\ <var:e0> = <nat:7> /\ <var:x> = <nat:3> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:e0> = <nat:7> /\ <var:x> = <nat:3> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:2> + <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:C> /\ <var:x> = <nat:3> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:2> + <nat:9> * <var:C> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 