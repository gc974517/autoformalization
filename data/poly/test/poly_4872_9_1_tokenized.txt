\begin{document} \begin{theorem} We define the following series of commands : \begin{verbatim} <var:Z1> := <var:Y> ; <var:Z2> := <var:Z1> * <var:Y> ; <var:Z3> := <var:Z2> * <var:Y> ; <var:Z0> := <nat:3> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Z3> := <var:Z3> * <nat:6> ; <var:b> := <var:Z3> <var:b> := <var:b> + <var:Z1> <var:b> := <var:b> + <var:Z0> \end{verbatim} Given given any positive integers $ <var:p> $ it to hold that $ <var:Y> = <var:p> $ before running our code segment it holds that we have $ <var:b> = <nat:6> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> + <nat:3> $ when code segment has finished executing . \end{theorem} \begin{proof} The flow of logic for our set of commands can be done with standard Hoare reasoning . Observing the next step contained in the code , we see the assignment code \verb | <var:Z1> := <var:Y> ; | . This moves $ \{ <var:Y> = <var:p> \} $ into the postcondition $ \{ <var:Y> = <var:p> \land <var:Z1> = <var:p> \} $ . Paying attention to the upcoming bit of code in the code , the variable assignmet command \verb | <var:Z2> := <var:Z1> * <var:Y> ; | . This statement moves the condition $ \{ <var:Y> = <var:p> \land <var:Z1> = <var:p> \} $ to the condition $ \{ <var:Y> = <var:p> \land <var:Z1> = <var:p> \land <var:Z2> = <var:p> ^ <nat:2> \} $ . Following , the assignment code \verb | <var:Z3> := <var:Z2> * <var:Y> ; | . This line takes the precondition $ \{ <var:Y> = <var:p> \land <var:Z1> = <var:p> \land <var:Z2> = <var:p> ^ <nat:2> \} $ into $ \{ <var:Y> = <var:p> \land <var:Z1> = <var:p> \land <var:Z2> = <var:p> ^ <nat:2> \land <var:Z3> = <var:p> ^ <nat:3> \} $ . Moving forward , the line yielding $ <nat:3> $ to $ <var:Z0>$ . This command forwards the precondition $ \{ <var:Y> = <var:p> \land <var:Z1> = <var:p> \land <var:Z2> = <var:p> ^ <nat:2> \land <var:Z3> = <var:p> ^ <nat:3> \} $ into $ \{ <var:Y> = <var:p> \land <var:Z1> = <var:p> \land <var:Z2> = <var:p> ^ <nat:2> \land <var:Z3> = <var:p> ^ <nat:3> \land <var:Z0> = <nat:3> \} $ . This is rigorously given with the assignment inference rule obtained from standard Hoare logic . Looking at the next statement seen in our list of commands , the environment update command \verb | <var:Z1> := <var:Z1> * <nat:2> ; | . This command redefines the precondition $ \{ <var:Y> = <var:p> \land <var:Z1> = <var:p> \land <var:Z2> = <var:p> ^ <nat:2> \land <var:Z3> = <var:p> ^ <nat:3> \land <var:Z0> = <nat:3> \} $ to the condition $ \{ <var:Y> = <var:p> \land <var:Z1> = <nat:2> \times <var:p> \land <var:Z2> = <var:p> ^ <nat:2> \land <var:Z3> = <var:p> ^ <nat:3> \land <var:Z0> = <nat:3> \} $ . Advancing to the next step , we see the binding statement \verb | <var:Z3> := <var:Z3> * <nat:6> ; | . This moves $ \{ <var:Y> = <var:p> \land <var:Z1> = <nat:2> \times <var:p> \land <var:Z2> = <var:p> ^ <nat:2> \land <var:Z3> = <var:p> ^ <nat:3> \land <var:Z0> = <nat:3> \} $ toward the postcondition $ \{ <var:Y> = <var:p> \land <var:Z1> = <nat:2> \times <var:p> \land <var:Z2> = <var:p> ^ <nat:2> \land <var:Z3> = <nat:6> \times <var:p> ^ <nat:3> \land <var:Z0> = <nat:3> \} $ . This is sound with the assignment law obtained from Hoare reasoning . Going to the next step , we have the variable update command \verb | <var:b> := <var:Z3> | . This forwards the precondition $ \{ <var:Y> = <var:p> \land <var:Z1> = <nat:2> \times <var:p> \land <var:Z2> = <var:p> ^ <nat:2> \land <var:Z3> = <nat:6> \times <var:p> ^ <nat:3> \land <var:Z0> = <nat:3> \} $ to the condition $ \{ <var:Y> = <var:p> \land <var:Z1> = <nat:2> \times <var:p> \land <var:Z2> = <var:p> ^ <nat:2> \land <var:Z0> = <nat:3> \land <var:b> = <nat:6> \times <var:p> ^ <nat:3> \} $ . This is ensured with the assignment rule defined by typical Hoare techniques . Moving forward to the next step , we see the assignment line assigning $ <var:b> + <var:Z1$ toward $ <var:b>$ . This moves $ \{ <var:Y> = <var:p> \land <var:Z1> = <nat:2> \times <var:p> \land <var:Z2> = <var:p> ^ <nat:2> \land <var:Z0> = <nat:3> \land <var:b> = <nat:6> \times <var:p> ^ <nat:3> \} $ as the condition $ \{ <var:Y> = <var:p> \land <var:Z0> = <nat:3> \land <var:b> = <nat:6> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> \} $ . This is deduced with the assignment law in Hoare reasoning . Moving on , we see the environment update statement \verb | <var:b> := <var:b> + <var:Z0> | . This statement advances $ \{ <var:Y> = <var:p> \land <var:Z0> = <nat:3> \land <var:b> = <nat:6> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> \} $ into the postcondition $ \{ <var:Y> = <var:p> \land <var:b> = <nat:6> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:Y> = <var:p> }} <var:Z1> := <var:Y> ; <var:Z2> := <var:Z1> * <var:Y> ; <var:Z3> := <var:Z2> * <var:Y> ; <var:Z0> := <nat:3> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Z3> := <var:Z3> * <nat:6> ; <var:b> := <var:Z3> <var:b> := <var:b> + <var:Z1> <var:b> := <var:b> + <var:Z0> {{ <var:b> = <nat:6> * <var:p> ^ <nat:3> + <nat:2> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:Z1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:Z1> = <var:p> /\ <var:Z2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:Z1> = <var:p> /\ <var:Z2> = <var:p> ^ <nat:2> /\ <var:Z3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:Z1> = <var:p> /\ <var:Z2> = <var:p> ^ <nat:2> /\ <var:Z3> = <var:p> ^ <nat:3> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:Z1> = <nat:2> * <var:p> /\ <var:Z2> = <var:p> ^ <nat:2> /\ <var:Z3> = <var:p> ^ <nat:3> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:Z1> = <nat:2> * <var:p> /\ <var:Z2> = <var:p> ^ <nat:2> /\ <var:Z3> = <nat:6> * <var:p> ^ <nat:3> /\ <var:Z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:Z1> = <nat:2> * <var:p> /\ <var:Z2> = <var:p> ^ <nat:2> /\ <var:Z0> = <nat:3> /\ <var:b> = <nat:6> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:Z0> = <nat:3> /\ <var:b> = <nat:6> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:p> /\ <var:b> = <nat:6> * <var:p> ^ <nat:3> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 