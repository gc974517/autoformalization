\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L> := <nat:4> ; <var:L> := <nat:3> + <var:L> * <var:i> ; <var:L> := <nat:3> + <var:L> * <var:i> ; <var:L> := <nat:3> + <var:L> * <var:i> ; <var:L> := <nat:3> + <var:L> * <var:i> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> in \emph{Imp} . Allowing that we have $ <var:i> = <var:J> $ before interpreting our list of instructions it must be that $ <var:L> = <nat:4> \times <var:J> ^ <nat:4> + <nat:3> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> + <nat:3> \times <var:J> + <nat:3> $ . \end{theorem} \begin{proof} The proof of this set of instructions can be done using usual Hoare techniques . Paying attention to the following line of code in the series of commands , the command \verb | <var:L> := <nat:4> ; | . This code advances the precondition $ \{ <var:i> = <var:J> \} $ as $ \{ <var:i> = <var:J> \land <var:L> = <nat:4> \} $ . This is guaranteed through the assignment scheme defined in usual Hoare reasoning . Observing the proceeding line of code found in our code segment , we have the variable update line giving $ <nat:3> + <var:L> * <var:i> $ toward $ <var:L>$ . This moves the precondition $ \{ <var:i> = <var:J> \land <var:L> = <nat:4> \} $ into the postcondition $ \{ <var:i> = <var:J> \land <var:L> = <nat:4> \times <var:J> + <nat:3> \} $ . This is given by the assignment inference rule in standard Hoare logic . Honing in on the next statement found in our code segment , the statement \verb | <var:L> := <nat:3> + <var:L> * <var:i> ; | . This transfers the precondition $ \{ <var:i> = <var:J> \land <var:L> = <nat:4> \times <var:J> + <nat:3> \} $ toward the postcondition $ \{ <var:i> = <var:J> \land <var:L> = <nat:4> \times <var:J> ^ <nat:2> + <nat:3> \times <var:J> + <nat:3> \} $ . This is rigorously given through the assignment scheme given in typical Hoare reasoning . Honing in on the following statement in the series of instructions , we have the variable binding line \verb | <var:L> := <nat:3> + <var:L> * <var:i> ; | . This redefines $ \{ <var:i> = <var:J> \land <var:L> = <nat:4> \times <var:J> ^ <nat:2> + <nat:3> \times <var:J> + <nat:3> \} $ toward $ \{ <var:i> = <var:J> \land <var:L> = <nat:4> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> + <nat:3> \times <var:J> + <nat:3> \} $ . Moving on to the next step , the assignment line \verb | <var:L> := <nat:3> + <var:L> * <var:i> | . This line moves the condition $ \{ <var:i> = <var:J> \land <var:L> = <nat:4> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> + <nat:3> \times <var:J> + <nat:3> \} $ into $ \{ <var:i> = <var:J> \land <var:L> = <nat:4> \times <var:J> ^ <nat:4> + <nat:3> \times <var:J> ^ <nat:3> + <nat:3> \times <var:J> ^ <nat:2> + <nat:3> \times <var:J> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:4> ; <var:L> := <nat:3> + <var:L> * <var:i> ; <var:L> := <nat:3> + <var:L> * <var:i> ; <var:L> := <nat:3> + <var:L> * <var:i> ; <var:L> := <nat:3> + <var:L> * <var:i> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:i> = <var:J> }} <def:poly> {{ <var:L> = <nat:4> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:J> /\ <var:L> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:J> /\ <var:L> = <nat:4> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:J> /\ <var:L> = <nat:4> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:J> /\ <var:L> = <nat:4> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:J> /\ <var:L> = <nat:4> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 