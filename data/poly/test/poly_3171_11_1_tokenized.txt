\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l1> := <var:M> ; <var:l2> := <var:l1> * <var:M> ; <var:l3> := <var:l2> * <var:M> ; <var:l0> := <nat:7> ; <var:l1> := <var:l1> * <nat:5> ; <var:l2> := <var:l2> * <nat:6> ; <var:l3> := <var:l3> * <nat:3> ; <var:x> := <var:l3> <var:x> := <var:x> + <var:l2> <var:x> := <var:x> + <var:l1> <var:x> := <var:x> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:M> = <var:t> $ ( with some $ <var:t> \in \mathbb{Z}^+ $ ) before evaluating this series of commands , it holds that $ <var:x> = <nat:3> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> + <nat:5> * <var:t> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic yields : \begin{eqnarray} \{ <var:M> = <var:t> \} \\ <var:l1> := <var:M> ; \\ \{ <var:M> = <var:t> \land <var:l1> = <var:t> \} \\ <var:l2> := <var:l1> * <var:M> ; \\ \{ <var:M> = <var:t> \land <var:l1> = <var:t> \land <var:l2> = <var:t> ^ <nat:2> \} \\ <var:l3> := <var:l2> * <var:M> ; \\ \{ <var:M> = <var:t> \land <var:l1> = <var:t> \land <var:l2> = <var:t> ^ <nat:2> \land <var:l3> = <var:t> ^ <nat:3> \} \\ <var:l0> := <nat:7> ; \\ \{ <var:M> = <var:t> \land <var:l1> = <var:t> \land <var:l2> = <var:t> ^ <nat:2> \land <var:l3> = <var:t> ^ <nat:3> \land <var:l0> = <nat:7> \} \\ <var:l1> := <var:l1> * <nat:5> ; \\ \{ <var:M> = <var:t> \land <var:l1> = <nat:5> \times <var:t> \land <var:l2> = <var:t> ^ <nat:2> \land <var:l3> = <var:t> ^ <nat:3> \land <var:l0> = <nat:7> \} \\ <var:l2> := <var:l2> * <nat:6> ; \\ \{ <var:M> = <var:t> \land <var:l1> = <nat:5> \times <var:t> \land <var:l2> = <nat:6> \times <var:t> ^ <nat:2> \land <var:l3> = <var:t> ^ <nat:3> \land <var:l0> = <nat:7> \} \\ <var:l3> := <var:l3> * <nat:3> ; \\ \{ <var:M> = <var:t> \land <var:l1> = <nat:5> \times <var:t> \land <var:l2> = <nat:6> \times <var:t> ^ <nat:2> \land <var:l3> = <nat:3> \times <var:t> ^ <nat:3> \land <var:l0> = <nat:7> \} \\ <var:x> := <var:l3> \\ \{ <var:M> = <var:t> \land <var:l1> = <nat:5> \times <var:t> \land <var:l2> = <nat:6> \times <var:t> ^ <nat:2> \land <var:l0> = <nat:7> \land <var:x> = <nat:3> \times <var:t> ^ <nat:3> \} \\ <var:x> := <var:x> + <var:l2> \\ \{ <var:M> = <var:t> \land <var:l1> = <nat:5> \times <var:t> \land <var:l0> = <nat:7> \land <var:x> = <nat:3> \times <var:t> ^ <nat:3> + <nat:6> \times <var:t> ^ <nat:2> \} \\ <var:x> := <var:x> + <var:l1> \\ \{ <var:M> = <var:t> \land <var:l0> = <nat:7> \land <var:x> = <nat:3> \times <var:t> ^ <nat:3> + <nat:6> \times <var:t> ^ <nat:2> + <nat:5> \times <var:t> \} \\ <var:x> := <var:x> + <var:l0> \\ \{ <var:M> = <var:t> \land <var:x> = <nat:3> \times <var:t> ^ <nat:3> + <nat:6> \times <var:t> ^ <nat:2> + <nat:5> \times <var:t> + <nat:7> \} \end{eqnarray} Thus , our list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <var:l3> : string := " <var:l3> " . Definition <def:poly> := <var:l1> := <var:M> ; <var:l2> := <var:l1> * <var:M> ; <var:l3> := <var:l2> * <var:M> ; <var:l0> := <nat:7> ; <var:l1> := <var:l1> * <nat:5> ; <var:l2> := <var:l2> * <nat:6> ; <var:l3> := <var:l3> * <nat:3> ; <var:x> := <var:l3> <var:x> := <var:x> + <var:l2> <var:x> := <var:x> + <var:l1> <var:x> := <var:x> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:M> = <var:t> }} <def:poly> {{ <var:x> = <nat:3> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> + <nat:5> * <var:t> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:l1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:l1> = <var:t> /\ <var:l2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:l1> = <var:t> /\ <var:l2> = <var:t> ^ <nat:2> /\ <var:l3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:l1> = <var:t> /\ <var:l2> = <var:t> ^ <nat:2> /\ <var:l3> = <var:t> ^ <nat:3> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:l1> = <nat:5> * <var:t> /\ <var:l2> = <var:t> ^ <nat:2> /\ <var:l3> = <var:t> ^ <nat:3> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:l1> = <nat:5> * <var:t> /\ <var:l2> = <nat:6> * <var:t> ^ <nat:2> /\ <var:l3> = <var:t> ^ <nat:3> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:l1> = <nat:5> * <var:t> /\ <var:l2> = <nat:6> * <var:t> ^ <nat:2> /\ <var:l3> = <nat:3> * <var:t> ^ <nat:3> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:l1> = <nat:5> * <var:t> /\ <var:l2> = <nat:6> * <var:t> ^ <nat:2> /\ <var:l0> = <nat:7> /\ <var:x> = <nat:3> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:l1> = <nat:5> * <var:t> /\ <var:l0> = <nat:7> /\ <var:x> = <nat:3> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:l0> = <nat:7> /\ <var:x> = <nat:3> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> + <nat:5> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:t> /\ <var:x> = <nat:3> * <var:t> ^ <nat:3> + <nat:6> * <var:t> ^ <nat:2> + <nat:5> * <var:t> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 