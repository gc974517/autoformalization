\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:E> := <nat:4> ; <var:E> := <nat:2> + <var:E> * <var:F> ; <var:E> := <nat:1> + <var:E> * <var:F> ; <var:E> := <nat:4> + <var:E> * <var:F> ; <var:E> := <nat:2> + <var:E> * <var:F> ; <var:E> := <var:E> * <var:F> ; <var:E> := <var:E> * <var:F> ; <var:E> := <var:E> * <var:F> ; <var:E> := <nat:2> + <var:E> * <var:F> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Assume it to be that $ <var:F> = <var:g> $ prior to the evaluation of this list of commands , it must be that we see $ <var:E> = <nat:4> \cdot <var:g> ^ <nat:8> + <nat:2> \cdot <var:g> ^ <nat:7> + <nat:1> \cdot <var:g> ^ <nat:6> + <nat:4> \cdot <var:g> ^ <nat:5> + <nat:2> \cdot <var:g> ^ <nat:4> + <nat:2> $ after series of commands has exited . \end{theorem} \begin{proof} The argument for the series of commands can be done by Hoare reasoning . Shifting focus toward the subsequent statement contained in the set of commands , we see the environment update command giving $ <nat:4> $ into $ <var:E>$ . This forwards the condition $ \{ <var:F> = <var:g> \} $ into the condition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> \} $ . This is shown through the assignment inference rule given by standard Hoare logic . Considering the proceeding line seen in the set of commands , we have the binding command giving $ <nat:2> + <var:E> * <var:F> $ as $ <var:E>$ . This forwards the condition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> \} $ toward $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> + <nat:2> \} $ . Considering the upcoming line of code seen in our series of instructions , we see the environment update line giving $ <nat:1> + <var:E> * <var:F> $ into $ <var:E>$ . This line forwards the precondition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> + <nat:2> \} $ toward the condition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> \} $ . Immediately after , we see the variable update statement assigning $ <nat:4> + <var:E> * <var:F> $ as $ <var:E>$ . This moves the condition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> \} $ into the condition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:4> \} $ . This is shown to be logically sound by the assignment scheme found in typical Hoare logic . Looking at the upcoming step seen in our set of instructions , the binding command letting $ <nat:2> + <var:E> * <var:F> $ into $ <var:E>$ . This command transfers the precondition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:4> \} $ into $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:2> \} $ . Advancing , we have the variable assignmet command \verb | <var:E> := <var:E> * <var:F> ; | . This takes the precondition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:2> \} $ into the condition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + \} $ . Going to the next step , we see the variable update line giving $ <var:E> * <var:F> $ toward $ <var:E>$ . This statement transfers the precondition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + \} $ into the postcondition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + \} $ . Observing the upcoming command contained in the list of instructions , we see the binding command \verb | <var:E> := <var:E> * <var:F> ; | . This statement takes the condition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + \} $ toward the condition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + \} $ . This is given with the assignment rule in Hoare techniques . Shifting focus toward the proceeding piece of code seen in the list of commands , we see the variable update command \verb | <var:E> := <nat:2> + <var:E> * <var:F> | . This line moves the condition $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + \} $ toward $ \{ <var:F> = <var:g> \land <var:E> = <nat:4> * <var:g> ^ <nat:8> + <nat:2> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:E> := <nat:4> ; <var:E> := <nat:2> + <var:E> * <var:F> ; <var:E> := <nat:1> + <var:E> * <var:F> ; <var:E> := <nat:4> + <var:E> * <var:F> ; <var:E> := <nat:2> + <var:E> * <var:F> ; <var:E> := <var:E> * <var:F> ; <var:E> := <var:E> * <var:F> ; <var:E> := <var:E> * <var:F> ; <var:E> := <nat:2> + <var:E> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:F> = <var:g> }} <def:poly> {{ <var:E> = <nat:4> * <var:g> ^ <nat:8> + <nat:2> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:E> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:E> = <nat:4> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:E> = <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:E> = <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:E> = <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:E> = <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:E> = <nat:4> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:E> = <nat:4> * <var:g> ^ <nat:7> + <nat:2> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:4> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:g> /\ <var:E> = <nat:4> * <var:g> ^ <nat:8> + <nat:2> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:6> + <nat:4> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 