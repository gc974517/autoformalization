\begin{document} \begin{theorem} Consider a program as \begin{verbatim} <var:g1> := <var:o> ; <var:g2> := <var:g1> * <var:o> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:1> ; <var:g2> := <var:g2> * <nat:3> ; <var:l> := <var:g2> <var:l> := <var:l> + <var:g1> <var:l> := <var:l> + <var:g0> \end{verbatim} Allow it to hold that $ <var:o> = <var:T> $ , for integers $ <var:T> $ , ahead of the execution of the list of instructions , it holds that $ <var:l> = <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> $ when set of commands has terminated . \end{theorem} \begin{proof} Utilizing usual Hoare techniques yields : \begin{eqnarray} \{ <var:o> = <var:T> \} \\ <var:g1> := <var:o> ; \\ \{ <var:o> = <var:T> \land <var:g1> = <var:T> \} \\ <var:g2> := <var:g1> * <var:o> ; \\ \{ <var:o> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \} \\ <var:g0> := <nat:4> ; \\ \{ <var:o> = <var:T> \land <var:g1> = <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g0> = <nat:4> \} \\ <var:g1> := <var:g1> * <nat:1> ; \\ \{ <var:o> = <var:T> \land <var:g1> = <nat:1> * <var:T> \land <var:g2> = <var:T> ^ <nat:2> \land <var:g0> = <nat:4> \} \end{eqnarray} Continuing the evaluation of this list of instructions produces : \begin{eqnarray} <var:g2> := <var:g2> * <nat:3> ; \\ \{ <var:o> = <var:T> \land <var:g1> = <nat:1> * <var:T> \land <var:g2> = <nat:3> * <var:T> ^ <nat:2> \land <var:g0> = <nat:4> \} \\ <var:l> := <var:g2> \\ \{ <var:o> = <var:T> \land <var:g1> = <nat:1> * <var:T> \land <var:g0> = <nat:4> \land <var:l> = <nat:3> * <var:T> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:g1> \\ \{ <var:o> = <var:T> \land <var:g0> = <nat:4> \land <var:l> = <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> \} \\ <var:l> := <var:l> + <var:g0> \\ \{ <var:o> = <var:T> \land <var:l> = <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> \} \end{eqnarray} As a result , the list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:o> = <var:T> }} <var:g1> := <var:o> ; <var:g2> := <var:g1> * <var:o> ; <var:g0> := <nat:4> ; <var:g1> := <var:g1> * <nat:1> ; <var:g2> := <var:g2> * <nat:3> ; <var:l> := <var:g2> <var:l> := <var:l> + <var:g1> <var:l> := <var:l> + <var:g0> {{ <var:l> = <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:g1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:g1> = <var:T> /\ <var:g2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:g1> = <var:T> /\ <var:g2> = <var:T> ^ <nat:2> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:g1> = <nat:1> * <var:T> /\ <var:g2> = <var:T> ^ <nat:2> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:g1> = <nat:1> * <var:T> /\ <var:g2> = <nat:3> * <var:T> ^ <nat:2> /\ <var:g0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:g1> = <nat:1> * <var:T> /\ <var:g0> = <nat:4> /\ <var:l> = <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:g0> = <nat:4> /\ <var:l> = <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:T> /\ <var:l> = <nat:3> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 