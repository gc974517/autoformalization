\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:7> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:z> ; <var:x2> := <nat:9> ; <var:x2> := <var:x2> * <var:z> ; <var:x2> := <var:x2> * <var:z> ; <var:x3> := <nat:8> ; <var:x3> := <var:x3> * <var:z> ; <var:x3> := <var:x3> * <var:z> ; <var:x3> := <var:x3> * <var:z> ; <var:V> := <var:x3> ; <var:V> := <var:V> + <var:x2> ; <var:V> := <var:V> + <var:x1> ; <var:V> := <var:V> + <var:x0> \end{verbatim} Allow that we have $ <var:z> = <var:Z> $ prior to the evaluation of our code segment then $ <var:V> = <nat:8> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:Z> \} \\ <var:x0> := <nat:7> ; \\ \{ <var:z> = <var:Z> \land <var:x0> = <nat:7> \} \\ <var:x1> := <nat:1> ; \\ \{ <var:z> = <var:Z> \land <var:x0> = <nat:7> \land <var:x1> = <nat:1> \} \\ <var:x1> := <var:x1> * <var:z> ; \\ \{ <var:z> = <var:Z> \land <var:x0> = <nat:7> \land <var:x1> = <nat:1> * <var:Z> \} \\ <var:x2> := <nat:9> ; \\ \{ <var:z> = <var:Z> \land <var:x0> = <nat:7> \land <var:x1> = <nat:1> * <var:Z> \land <var:x2> = <nat:9> \} \\ <var:x2> := <var:x2> * <var:z> ; \\ \{ <var:z> = <var:Z> \land <var:x0> = <nat:7> \land <var:x1> = <nat:1> * <var:Z> \land <var:x2> = <nat:9> * <var:Z> \} \\ <var:x2> := <var:x2> * <var:z> ; \\ \{ <var:z> = <var:Z> \land <var:x0> = <nat:7> \land <var:x1> = <nat:1> * <var:Z> \land <var:x2> = <nat:9> * <var:Z> ^ <nat:2> \} \\ <var:x3> := <nat:8> ; \\ \{ <var:z> = <var:Z> \land <var:x0> = <nat:7> \land <var:x1> = <nat:1> * <var:Z> \land <var:x2> = <nat:9> * <var:Z> ^ <nat:2> \land <var:x3> = <nat:8> \} \\ <var:x3> := <var:x3> * <var:z> ; \\ \{ <var:z> = <var:Z> \land <var:x0> = <nat:7> \land <var:x1> = <nat:1> * <var:Z> \land <var:x2> = <nat:9> * <var:Z> ^ <nat:2> \land <var:x3> = <nat:8> * <var:Z> \} \\ <var:x3> := <var:x3> * <var:z> ; \\ \{ <var:z> = <var:Z> \land <var:x0> = <nat:7> \land <var:x1> = <nat:1> * <var:Z> \land <var:x2> = <nat:9> * <var:Z> ^ <nat:2> \land <var:x3> = <nat:8> * <var:Z> ^ <nat:2> \} \\ <var:x3> := <var:x3> * <var:z> ; \\ \{ <var:z> = <var:Z> \land <var:x0> = <nat:7> \land <var:x1> = <nat:1> * <var:Z> \land <var:x2> = <nat:9> * <var:Z> ^ <nat:2> \land <var:x3> = <nat:8> * <var:Z> ^ <nat:3> \} \\ <var:V> := <var:x3> ; \\ \{ <var:z> = <var:Z> \land <var:x0> = <nat:7> \land <var:x1> = <nat:1> * <var:Z> \land <var:x2> = <nat:9> * <var:Z> ^ <nat:2> \land <var:V> = <nat:8> * <var:Z> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:x2> ; \\ \{ <var:z> = <var:Z> \land <var:x0> = <nat:7> \land <var:x1> = <nat:1> * <var:Z> \land <var:V> = <nat:8> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:x1> ; \\ \{ <var:z> = <var:Z> \land <var:x0> = <nat:7> \land <var:V> = <nat:8> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> \} \\ <var:V> := <var:V> + <var:x0> \\ \{ <var:z> = <var:Z> \land <var:V> = <nat:8> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:7> \} \end{eqnarray} Utilizing standard Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:z> = <var:Z> }} <var:x0> := <nat:7> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:z> ; <var:x2> := <nat:9> ; <var:x2> := <var:x2> * <var:z> ; <var:x2> := <var:x2> * <var:z> ; <var:x3> := <nat:8> ; <var:x3> := <var:x3> * <var:z> ; <var:x3> := <var:x3> * <var:z> ; <var:x3> := <var:x3> * <var:z> ; <var:V> := <var:x3> ; <var:V> := <var:V> + <var:x2> ; <var:V> := <var:V> + <var:x1> ; <var:V> := <var:V> + <var:x0> {{ <var:V> = <nat:8> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:1> * <var:Z> /\ <var:x2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:1> * <var:Z> /\ <var:x2> = <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:1> * <var:Z> /\ <var:x2> = <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:1> * <var:Z> /\ <var:x2> = <nat:9> * <var:Z> ^ <nat:2> /\ <var:x3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:1> * <var:Z> /\ <var:x2> = <nat:9> * <var:Z> ^ <nat:2> /\ <var:x3> = <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:1> * <var:Z> /\ <var:x2> = <nat:9> * <var:Z> ^ <nat:2> /\ <var:x3> = <nat:8> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:1> * <var:Z> /\ <var:x2> = <nat:9> * <var:Z> ^ <nat:2> /\ <var:x3> = <nat:8> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:1> * <var:Z> /\ <var:x2> = <nat:9> * <var:Z> ^ <nat:2> /\ <var:V> = <nat:8> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:1> * <var:Z> /\ <var:V> = <nat:8> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:x0> = <nat:7> /\ <var:V> = <nat:8> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Z> /\ <var:V> = <nat:8> * <var:Z> ^ <nat:3> + <nat:9> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 