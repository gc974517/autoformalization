\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c0> := <nat:9> ; <var:L> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Assuming $ <var:F> = <var:Y> $ before evaluating our series of commands it holds that $ <var:L> = <nat:9> $ when code segment has finished . \end{theorem} \begin{proof} The proof of our list of instructions can be given through standard Hoare techniques . Taking a look at the upcoming piece of code in our program , we have \begin{eqnarray} \{ <var:F> = <var:Y> \} \, <var:c0> := <nat:9> \, \{ <var:F> = <var:Y> \land <var:c0> = <nat:9> \} \end{eqnarray} This is given through the binding law from standard Hoare logic . Stepping forward , \begin{eqnarray} \{ <var:F> = <var:Y> \} \, <var:c0> := <nat:9> \, \{ <var:F> = <var:Y> \land <var:c0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:9> ; <var:L> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:F> = <var:Y> }} <def:poly> {{ <var:L> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Y> /\ <var:L> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 