\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G> := <nat:4> ; <var:G> := <nat:1> + <var:G> * <var:d> ; <var:G> := <var:G> * <var:d> ; <var:G> := <nat:2> + <var:G> * <var:d> ; <var:G> := <nat:3> + <var:G> * <var:d> ; <var:G> := <nat:4> + <var:G> * <var:d> ; <var:G> := <nat:3> + <var:G> * <var:d> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> in \emph{Imp} . Allowing that $ <var:d> = <var:S> $ ahead of evaluating our list of commands , then $ <var:G> = <nat:4> * <var:S> ^ <nat:6> + <nat:1> * <var:S> ^ <nat:5> + <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:3> $ when list of instructions exits . \end{theorem} \begin{proof} Arguing the correctness of our set of commands is demonstrated by Hoare reasoning . Moving on to the next step , we see the variable assignmet line \verb | <var:G> := <nat:4> ; | . This takes $ \{ <var:d> = <var:S> \} $ into $ \{ <var:d> = <var:S> \land <var:G> = <nat:4> \} $ . Taking another step toward the upcoming step in our set of commands , we have the variable binding code \verb | <var:G> := <nat:1> + <var:G> * <var:d> ; | . This forwards the precondition $ \{ <var:d> = <var:S> \land <var:G> = <nat:4> \} $ toward the condition $ \{ <var:d> = <var:S> \land <var:G> = <nat:4> \times <var:S> + <nat:1> \} $ . Further , we have the line \verb | <var:G> := <var:G> * <var:d> ; | . This command moves the condition $ \{ <var:d> = <var:S> \land <var:G> = <nat:4> \times <var:S> + <nat:1> \} $ as the condition $ \{ <var:d> = <var:S> \land <var:G> = <nat:4> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + \} $ . Moving forward , we see the assignment code \verb | <var:G> := <nat:2> + <var:G> * <var:d> ; | . This forwards $ \{ <var:d> = <var:S> \land <var:G> = <nat:4> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + \} $ into the postcondition $ \{ <var:d> = <var:S> \land <var:G> = <nat:4> \times <var:S> ^ <nat:3> + <nat:1> \times <var:S> ^ <nat:2> + <nat:2> \} $ . This is shown by the assignment inference rule obtained from usual Hoare techniques . Moving onward , the variable binding line \verb | <var:G> := <nat:3> + <var:G> * <var:d> ; | . This redefines the condition $ \{ <var:d> = <var:S> \land <var:G> = <nat:4> \times <var:S> ^ <nat:3> + <nat:1> \times <var:S> ^ <nat:2> + <nat:2> \} $ to the condition $ \{ <var:d> = <var:S> \land <var:G> = <nat:4> \times <var:S> ^ <nat:4> + <nat:1> \times <var:S> ^ <nat:3> + <nat:2> \times <var:S> + <nat:3> \} $ . This is rigorously given using the assignment rule of typical Hoare reasoning . Keeping momentum , the statement \verb | <var:G> := <nat:4> + <var:G> * <var:d> ; | . This redefines $ \{ <var:d> = <var:S> \land <var:G> = <nat:4> \times <var:S> ^ <nat:4> + <nat:1> \times <var:S> ^ <nat:3> + <nat:2> \times <var:S> + <nat:3> \} $ to $ \{ <var:d> = <var:S> \land <var:G> = <nat:4> \times <var:S> ^ <nat:5> + <nat:1> \times <var:S> ^ <nat:4> + <nat:2> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:4> \} $ . This is known to be sound with the assignment inference rule from standard Hoare logic . Focusing on the proceeding bit of code found in the code segment , we have the assignment code yielding $ <nat:3> + <var:G> * <var:d$ to $ <var:G>$ . This command transfers the condition $ \{ <var:d> = <var:S> \land <var:G> = <nat:4> \times <var:S> ^ <nat:5> + <nat:1> \times <var:S> ^ <nat:4> + <nat:2> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:4> \} $ as $ \{ <var:d> = <var:S> \land <var:G> = <nat:4> \times <var:S> ^ <nat:6> + <nat:1> \times <var:S> ^ <nat:5> + <nat:2> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:3> \} $ . This is given through the assignment scheme from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:G> := <nat:4> ; <var:G> := <nat:1> + <var:G> * <var:d> ; <var:G> := <var:G> * <var:d> ; <var:G> := <nat:2> + <var:G> * <var:d> ; <var:G> := <nat:3> + <var:G> * <var:d> ; <var:G> := <nat:4> + <var:G> * <var:d> ; <var:G> := <nat:3> + <var:G> * <var:d> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:d> = <var:S> }} <def:poly> {{ <var:G> = <nat:4> * <var:S> ^ <nat:6> + <nat:1> * <var:S> ^ <nat:5> + <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:G> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:G> = <nat:4> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:G> = <nat:4> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:G> = <nat:4> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:G> = <nat:4> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:2> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:G> = <nat:4> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:S> /\ <var:G> = <nat:4> * <var:S> ^ <nat:6> + <nat:1> * <var:S> ^ <nat:5> + <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 