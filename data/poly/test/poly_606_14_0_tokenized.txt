\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:7> ; <var:v1> := <nat:1> ; <var:v1> := <var:v1> * <var:N> ; <var:v2> := <nat:8> ; <var:v2> := <var:v2> * <var:N> ; <var:v2> := <var:v2> * <var:N> ; <var:v3> := <nat:3> ; <var:v3> := <var:v3> * <var:N> ; <var:v3> := <var:v3> * <var:N> ; <var:v3> := <var:v3> * <var:N> ; <var:V> := <var:v3> ; <var:V> := <var:V> + <var:v2> ; <var:V> := <var:V> + <var:v1> ; <var:V> := <var:V> + <var:v0> \end{verbatim} Given for all natural numbers $ <var:p> $ that $ <var:N> = <var:p> $ ahead of running this list of commands , then $ <var:V> = <nat:3> \cdot <var:p> ^ <nat:3> + <nat:8> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:7> $ after code has executed . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives : \begin{eqnarray} \{ <var:N> = <var:p> \} \\ <var:v0> := <nat:7> ; \\ \{ <var:N> = <var:p> \land <var:v0> = <nat:7> \} \\ <var:v1> := <nat:1> ; \\ \{ <var:N> = <var:p> \land <var:v0> = <nat:7> \land <var:v1> = <nat:1> \} \\ <var:v1> := <var:v1> * <var:N> ; \\ \{ <var:N> = <var:p> \land <var:v0> = <nat:7> \land <var:v1> = <nat:1> \cdot <var:p> \} \\ <var:v2> := <nat:8> ; \\ \{ <var:N> = <var:p> \land <var:v0> = <nat:7> \land <var:v1> = <nat:1> \cdot <var:p> \land <var:v2> = <nat:8> \} \\ <var:v2> := <var:v2> * <var:N> ; \\ \{ <var:N> = <var:p> \land <var:v0> = <nat:7> \land <var:v1> = <nat:1> \cdot <var:p> \land <var:v2> = <nat:8> \cdot <var:p> \} \\ <var:v2> := <var:v2> * <var:N> ; \\ \{ <var:N> = <var:p> \land <var:v0> = <nat:7> \land <var:v1> = <nat:1> \cdot <var:p> \land <var:v2> = <nat:8> \cdot <var:p> ^ <nat:2> \} \\ <var:v3> := <nat:3> ; \\ \{ <var:N> = <var:p> \land <var:v0> = <nat:7> \land <var:v1> = <nat:1> \cdot <var:p> \land <var:v2> = <nat:8> \cdot <var:p> ^ <nat:2> \land <var:v3> = <nat:3> \} \\ <var:v3> := <var:v3> * <var:N> ; \\ \{ <var:N> = <var:p> \land <var:v0> = <nat:7> \land <var:v1> = <nat:1> \cdot <var:p> \land <var:v2> = <nat:8> \cdot <var:p> ^ <nat:2> \land <var:v3> = <nat:3> \cdot <var:p> \} \\ <var:v3> := <var:v3> * <var:N> ; \\ \{ <var:N> = <var:p> \land <var:v0> = <nat:7> \land <var:v1> = <nat:1> \cdot <var:p> \land <var:v2> = <nat:8> \cdot <var:p> ^ <nat:2> \land <var:v3> = <nat:3> \cdot <var:p> ^ <nat:2> \} \\ <var:v3> := <var:v3> * <var:N> ; \\ \{ <var:N> = <var:p> \land <var:v0> = <nat:7> \land <var:v1> = <nat:1> \cdot <var:p> \land <var:v2> = <nat:8> \cdot <var:p> ^ <nat:2> \land <var:v3> = <nat:3> \cdot <var:p> ^ <nat:3> \} \\ <var:V> := <var:v3> ; \\ \{ <var:N> = <var:p> \land <var:v0> = <nat:7> \land <var:v1> = <nat:1> \cdot <var:p> \land <var:v2> = <nat:8> \cdot <var:p> ^ <nat:2> \land <var:V> = <nat:3> \cdot <var:p> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:v2> ; \\ \{ <var:N> = <var:p> \land <var:v0> = <nat:7> \land <var:v1> = <nat:1> \cdot <var:p> \land <var:V> = <nat:3> \cdot <var:p> ^ <nat:3> + <nat:8> \cdot <var:p> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:v1> ; \\ \{ <var:N> = <var:p> \land <var:v0> = <nat:7> \land <var:V> = <nat:3> \cdot <var:p> ^ <nat:3> + <nat:8> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> \} \\ <var:V> := <var:V> + <var:v0> \\ \{ <var:N> = <var:p> \land <var:V> = <nat:3> \cdot <var:p> ^ <nat:3> + <nat:8> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:7> \} \end{eqnarray} As a result , this set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:N> = <var:p> }} <var:v0> := <nat:7> ; <var:v1> := <nat:1> ; <var:v1> := <var:v1> * <var:N> ; <var:v2> := <nat:8> ; <var:v2> := <var:v2> * <var:N> ; <var:v2> := <var:v2> * <var:N> ; <var:v3> := <nat:3> ; <var:v3> := <var:v3> * <var:N> ; <var:v3> := <var:v3> * <var:N> ; <var:v3> := <var:v3> * <var:N> ; <var:V> := <var:v3> ; <var:V> := <var:V> + <var:v2> ; <var:V> := <var:V> + <var:v1> ; <var:V> := <var:V> + <var:v0> {{ <var:V> = <nat:3> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:v0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:1> * <var:p> /\ <var:v2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:1> * <var:p> /\ <var:v2> = <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:1> * <var:p> /\ <var:v2> = <nat:8> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:1> * <var:p> /\ <var:v2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:v3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:1> * <var:p> /\ <var:v2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:v3> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:1> * <var:p> /\ <var:v2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:v3> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:1> * <var:p> /\ <var:v2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:v3> = <nat:3> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:1> * <var:p> /\ <var:v2> = <nat:8> * <var:p> ^ <nat:2> /\ <var:V> = <nat:3> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:v0> = <nat:7> /\ <var:v1> = <nat:1> * <var:p> /\ <var:V> = <nat:3> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:v0> = <nat:7> /\ <var:V> = <nat:3> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:p> /\ <var:V> = <nat:3> * <var:p> ^ <nat:3> + <nat:8> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 