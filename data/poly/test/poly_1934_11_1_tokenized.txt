\begin{document} \begin{theorem} Take the following series of instructions such that \begin{verbatim} <var:B1> := <var:N> ; <var:B2> := <var:B1> * <var:N> ; <var:B3> := <var:B2> * <var:N> ; <var:B0> := <nat:3> ; <var:B1> := <var:B1> * <nat:6> ; <var:B2> := <var:B2> * <nat:8> ; <var:B3> := <var:B3> * <nat:4> ; <var:l> := <var:B3> <var:l> := <var:l> + <var:B2> <var:l> := <var:l> + <var:B1> <var:l> := <var:l> + <var:B0> \end{verbatim} Allowing it to be that $ <var:N> = <var:i> $ --- for positive coefficients $ <var:i> $ --- before executing the list of instructions , it must be that we see $ <var:l> = <nat:4> \cdot <var:i> ^ <nat:3> + <nat:8> \cdot <var:i> ^ <nat:2> + <nat:6> \cdot <var:i> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for our series of commands can be seen by Hoare logic . Moving on to the next step , the binding command giving $ <var:N> $ to $ <var:B1>$ . This redefines the condition $ \{ <var:N> = <var:i> \} $ toward $ \{ <var:N> = <var:i> \land <var:B1> = <var:i> \} $ . This is sound using the assignment law given in typical Hoare techniques . Moving forward to the upcoming piece of code contained in our series of instructions , we see the variable update code \verb | <var:B2> := <var:B1> * <var:N> ; | . This code forwards the precondition $ \{ <var:N> = <var:i> \land <var:B1> = <var:i> \} $ as the condition $ \{ <var:N> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \} $ . Taking a look at the proceeding step in the list of instructions , the assignment line \verb | <var:B3> := <var:B2> * <var:N> ; | . This statement transfers $ \{ <var:N> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \} $ toward $ \{ <var:N> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \} $ . This is given using the assignment rule obtained from usual Hoare reasoning . Looking at the upcoming line seen in the set of commands , we see the binding code defining $ <nat:3> $ toward $ <var:B0>$ . This command forwards the condition $ \{ <var:N> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \} $ as the condition $ \{ <var:N> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B0> = <nat:3> \} $ . This is shown to be logically sound using the assignment scheme given by Hoare logic . Taking a look at the upcoming line of code found in our segment of code , we have the variable binding line yielding $ <var:B1> * <nat:6> $ into $ <var:B1>$ . This line redefines the condition $ \{ <var:N> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B0> = <nat:3> \} $ to the postcondition $ \{ <var:N> = <var:i> \land <var:B1> = <nat:6> * <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B0> = <nat:3> \} $ . This is known to be sound with the assignment inference rule in Hoare techniques . Shifting focus toward the next bit of code contained in the segment of code , the binding command \verb | <var:B2> := <var:B2> * <nat:8> ; | . This command moves the condition $ \{ <var:N> = <var:i> \land <var:B1> = <nat:6> * <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B0> = <nat:3> \} $ toward the condition $ \{ <var:N> = <var:i> \land <var:B1> = <nat:6> * <var:i> \land <var:B2> = <nat:8> * <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B0> = <nat:3> \} $ . This is ensured using the assignment law defined by typical Hoare reasoning . Advancing , we have the variable assignmet command \verb | <var:B3> := <var:B3> * <nat:4> ; | . This advances the condition $ \{ <var:N> = <var:i> \land <var:B1> = <nat:6> * <var:i> \land <var:B2> = <nat:8> * <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B0> = <nat:3> \} $ toward $ \{ <var:N> = <var:i> \land <var:B1> = <nat:6> * <var:i> \land <var:B2> = <nat:8> * <var:i> ^ <nat:2> \land <var:B3> = <nat:4> * <var:i> ^ <nat:3> \land <var:B0> = <nat:3> \} $ . This is shown by the assignment scheme found in usual Hoare techniques . Jumping to the following statement contained in our series of instructions , we have the environment update line yielding $ <var:B3$ as $ <var:l>$ . This redefines $ \{ <var:N> = <var:i> \land <var:B1> = <nat:6> * <var:i> \land <var:B2> = <nat:8> * <var:i> ^ <nat:2> \land <var:B3> = <nat:4> * <var:i> ^ <nat:3> \land <var:B0> = <nat:3> \} $ toward $ \{ <var:N> = <var:i> \land <var:B1> = <nat:6> * <var:i> \land <var:B2> = <nat:8> * <var:i> ^ <nat:2> \land <var:B0> = <nat:3> \land <var:l> = <nat:4> * <var:i> ^ <nat:3> \} $ . Considering the proceeding line of code seen in our code segment , we see the variable update statement defining $ <var:l> + <var:B2$ into $ <var:l>$ . This line takes $ \{ <var:N> = <var:i> \land <var:B1> = <nat:6> * <var:i> \land <var:B2> = <nat:8> * <var:i> ^ <nat:2> \land <var:B0> = <nat:3> \land <var:l> = <nat:4> * <var:i> ^ <nat:3> \} $ toward the postcondition $ \{ <var:N> = <var:i> \land <var:B1> = <nat:6> * <var:i> \land <var:B0> = <nat:3> \land <var:l> = <nat:4> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> \} $ . Now , we have the variable binding statement yielding $ <var:l> + <var:B1$ to $ <var:l>$ . This statement takes the precondition $ \{ <var:N> = <var:i> \land <var:B1> = <nat:6> * <var:i> \land <var:B0> = <nat:3> \land <var:l> = <nat:4> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> \} $ as the condition $ \{ <var:N> = <var:i> \land <var:B0> = <nat:3> \land <var:l> = <nat:4> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:6> * <var:i> \} $ . This is guaranteed by the assignment rule given by Hoare logic . Further , we see the assignment line yielding $ <var:l> + <var:B0$ as $ <var:l>$ . This advances $ \{ <var:N> = <var:i> \land <var:B0> = <nat:3> \land <var:l> = <nat:4> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:6> * <var:i> \} $ to the postcondition $ \{ <var:N> = <var:i> \land <var:l> = <nat:4> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:N> = <var:i> }} <var:B1> := <var:N> ; <var:B2> := <var:B1> * <var:N> ; <var:B3> := <var:B2> * <var:N> ; <var:B0> := <nat:3> ; <var:B1> := <var:B1> * <nat:6> ; <var:B2> := <var:B2> * <nat:8> ; <var:B3> := <var:B3> * <nat:4> ; <var:l> := <var:B3> <var:l> := <var:l> + <var:B2> <var:l> := <var:l> + <var:B1> <var:l> := <var:l> + <var:B0> {{ <var:l> = <nat:4> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:B1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:B1> = <var:i> /\ <var:B2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:B1> = <var:i> /\ <var:B2> = <var:i> ^ <nat:2> /\ <var:B3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:B1> = <var:i> /\ <var:B2> = <var:i> ^ <nat:2> /\ <var:B3> = <var:i> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:B1> = <nat:6> * <var:i> /\ <var:B2> = <var:i> ^ <nat:2> /\ <var:B3> = <var:i> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:B1> = <nat:6> * <var:i> /\ <var:B2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:B3> = <var:i> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:B1> = <nat:6> * <var:i> /\ <var:B2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:B3> = <nat:4> * <var:i> ^ <nat:3> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:B1> = <nat:6> * <var:i> /\ <var:B2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:B0> = <nat:3> /\ <var:l> = <nat:4> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:B1> = <nat:6> * <var:i> /\ <var:B0> = <nat:3> /\ <var:l> = <nat:4> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:B0> = <nat:3> /\ <var:l> = <nat:4> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:6> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:i> /\ <var:l> = <nat:4> * <var:i> ^ <nat:3> + <nat:8> * <var:i> ^ <nat:2> + <nat:6> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 