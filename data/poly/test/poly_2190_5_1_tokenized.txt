\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h1> := <var:f> ; <var:h0> := <nat:4> ; <var:h1> := <var:h1> * <nat:5> ; <var:e> := <var:h1> <var:e> := <var:e> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:f> = <var:c> $ before running our code segment it holds that $ <var:e> = <nat:5> * <var:c> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this code is given through Hoare techniques . Keeping momentum , \begin{eqnarray} \{ <var:f> = <var:c> \} \, <var:h1> := <var:f> \, \{ <var:f> = <var:c> \land <var:h1> = <var:c> \} \\ \{ <var:f> = <var:c> \land <var:h1> = <var:c> \} \, <var:h0> := <nat:4> \, \{ <var:f> = <var:c> \land <var:h1> = <var:c> \land <var:h0> = <nat:4> \} \\ \{ <var:f> = <var:c> \land <var:h1> = <var:c> \land <var:h0> = <nat:4> \} \, <var:h1> := <var:h1> * <nat:5> \, \{ <var:f> = <var:c> \land <var:h1> = <nat:5> \times <var:c> \land <var:h0> = <nat:4> \} \\ \{ <var:f> = <var:c> \land <var:h1> = <nat:5> \times <var:c> \land <var:h0> = <nat:4> \} \, <var:e> := <var:h1\, \{ <var:f> = <var:c> \land <var:h0> = <nat:4> \land <var:e> = <nat:5> \times <var:c> \} \\ \{ <var:f> = <var:c> \land <var:h0> = <nat:4> \land <var:e> = <nat:5> \times <var:c> \} \, <var:e> := <var:e> + <var:h0\, \{ <var:f> = <var:c> \land <var:e> = <nat:5> \times <var:c> + <nat:4> \} \end{eqnarray} This is ensured through the variable assignmet rule given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <def:poly> := <var:h1> := <var:f> ; <var:h0> := <nat:4> ; <var:h1> := <var:h1> * <nat:5> ; <var:e> := <var:h1> <var:e> := <var:e> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:f> = <var:c> }} <def:poly> {{ <var:e> = <nat:5> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:h1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:h1> = <var:c> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:h1> = <nat:5> * <var:c> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:h0> = <nat:4> /\ <var:e> = <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:c> /\ <var:e> = <nat:5> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 