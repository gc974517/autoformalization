\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m1> := <var:w> ; <var:m2> := <var:m1> * <var:w> ; <var:m3> := <var:m2> * <var:w> ; <var:m0> := <nat:1> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:3> ; <var:m3> := <var:m3> * <nat:1> ; <var:e> := <var:m3> <var:e> := <var:e> + <var:m2> <var:e> := <var:e> + <var:m1> <var:e> := <var:e> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:w> = <var:j> $ , for any $ <var:j> \in \mathbb{Z}^+ $ , ahead of the execution of this list of commands it follows that we see $ <var:e> = <nat:1> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this code segment can be given with typical Hoare techniques . Moving on to the next step , we have \begin{eqnarray} \{ <var:w> = <var:j> \} \, <var:m1> := <var:w> \, \{ <var:w> = <var:j> \land <var:m1> = <var:j> \} \end{eqnarray} This is ensured by the binding scheme in standard Hoare logic . Moving onward , \begin{eqnarray} \{ <var:w> = <var:j> \} \, <var:m1> := <var:w> \, \{ <var:w> = <var:j> \land <var:m1> = <var:j> \} \\ \{ <var:w> = <var:j> \land <var:m1> = <var:j> \} \, <var:m2> := <var:m1> * <var:w> \, \{ <var:w> = <var:j> \land <var:m1> = <var:j> \land <var:m2> = <var:j> ^ <nat:2> \} \\ \{ <var:w> = <var:j> \land <var:m1> = <var:j> \land <var:m2> = <var:j> ^ <nat:2> \} \, <var:m3> := <var:m2> * <var:w> \, \{ <var:w> = <var:j> \land <var:m1> = <var:j> \land <var:m2> = <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \} \\ \{ <var:w> = <var:j> \land <var:m1> = <var:j> \land <var:m2> = <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \} \, <var:m0> := <nat:1> \, \{ <var:w> = <var:j> \land <var:m1> = <var:j> \land <var:m2> = <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \land <var:m0> = <nat:1> \} \\ \{ <var:w> = <var:j> \land <var:m1> = <var:j> \land <var:m2> = <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \land <var:m0> = <nat:1> \} \, <var:m1> := <var:m1> * <nat:3> \, \{ <var:w> = <var:j> \land <var:m1> = <nat:3> \cdot <var:j> \land <var:m2> = <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \land <var:m0> = <nat:1> \} \\ \{ <var:w> = <var:j> \land <var:m1> = <nat:3> \cdot <var:j> \land <var:m2> = <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \land <var:m0> = <nat:1> \} \, <var:m2> := <var:m2> * <nat:3> \, \{ <var:w> = <var:j> \land <var:m1> = <nat:3> \cdot <var:j> \land <var:m2> = <nat:3> \cdot <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \land <var:m0> = <nat:1> \} \\ \{ <var:w> = <var:j> \land <var:m1> = <nat:3> \cdot <var:j> \land <var:m2> = <nat:3> \cdot <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \land <var:m0> = <nat:1> \} \, <var:m3> := <var:m3> * <nat:1> \, \{ <var:w> = <var:j> \land <var:m1> = <nat:3> \cdot <var:j> \land <var:m2> = <nat:3> \cdot <var:j> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:j> ^ <nat:3> \land <var:m0> = <nat:1> \} \end{eqnarray} Shifting focus toward the proceeding steps seen in the series of commands , we see \begin{eqnarray} \{ <var:w> = <var:j> \} \, <var:m1> := <var:w> \, \{ <var:w> = <var:j> \land <var:m1> = <var:j> \} \\ \{ <var:w> = <var:j> \land <var:m1> = <var:j> \} \, <var:m2> := <var:m1> * <var:w> \, \{ <var:w> = <var:j> \land <var:m1> = <var:j> \land <var:m2> = <var:j> ^ <nat:2> \} \\ \{ <var:w> = <var:j> \land <var:m1> = <var:j> \land <var:m2> = <var:j> ^ <nat:2> \} \, <var:m3> := <var:m2> * <var:w> \, \{ <var:w> = <var:j> \land <var:m1> = <var:j> \land <var:m2> = <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m1> := <var:w> ; <var:m2> := <var:m1> * <var:w> ; <var:m3> := <var:m2> * <var:w> ; <var:m0> := <nat:1> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:3> ; <var:m3> := <var:m3> * <nat:1> ; <var:e> := <var:m3> <var:e> := <var:e> + <var:m2> <var:e> := <var:e> + <var:m1> <var:e> := <var:e> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:w> = <var:j> }} <def:poly> {{ <var:e> = <nat:1> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:m1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:m1> = <var:j> /\ <var:m2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:m1> = <var:j> /\ <var:m2> = <var:j> ^ <nat:2> /\ <var:m3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:m1> = <var:j> /\ <var:m2> = <var:j> ^ <nat:2> /\ <var:m3> = <var:j> ^ <nat:3> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:m1> = <nat:3> * <var:j> /\ <var:m2> = <var:j> ^ <nat:2> /\ <var:m3> = <var:j> ^ <nat:3> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:m1> = <nat:3> * <var:j> /\ <var:m2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:m3> = <var:j> ^ <nat:3> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:m1> = <nat:3> * <var:j> /\ <var:m2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:j> ^ <nat:3> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:m1> = <nat:3> * <var:j> /\ <var:m2> = <nat:3> * <var:j> ^ <nat:2> /\ <var:m0> = <nat:1> /\ <var:e> = <nat:1> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:m1> = <nat:3> * <var:j> /\ <var:m0> = <nat:1> /\ <var:e> = <nat:1> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:m0> = <nat:1> /\ <var:e> = <nat:1> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:e> = <nat:1> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 