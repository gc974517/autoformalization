\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:2> ; <var:Z> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:H> = <var:G> $ given any $ <var:G> \in \mathbb{Z}^+ $ prior to the evaluation of this segment of code it must be that we see $ <var:Z> = <nat:2> $ . \end{theorem} \begin{proof} Applying usual Hoare logic returns : \begin{eqnarray} \{ <var:H> = <var:G> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:H> = <var:G> \land <var:C0> = <nat:2> \} \\ <var:Z> := <var:C0> \\ \{ <var:H> = <var:G> \land <var:Z> = <nat:2> \} \end{eqnarray} Given the preceding argument , our list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:2> ; <var:Z> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:H> = <var:G> }} <def:poly> {{ <var:Z> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:Z> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 