\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:6> ; <var:n1> := <nat:6> ; <var:n1> := <var:n1> * <var:s> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:s> ; <var:n2> := <var:n2> * <var:s> ; <var:P> := <var:n2> ; <var:P> := <var:P> + <var:n1> ; <var:P> := <var:P> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> in \emph{Imp} . Given it to be that $ <var:s> = <var:Q> $ ahead of running the series of instructions , then we have $ <var:P> = <nat:4> \times <var:Q> ^ <nat:2> + <nat:6> \times <var:Q> + <nat:6> $ once code segment terminates . \end{theorem} \begin{proof} The method of proof for this set of commands is done using usual Hoare logic . Taking a look at the subsequent steps seen in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:s> = <var:Q> \} & <var:n0> := <nat:6> & \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \} \\ \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \} & <var:n1> := <nat:6> & \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:6> \} \\ \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:6> \} & <var:n1> := <var:n1> * <var:s> & \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:6> * <var:Q> \} \\ \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:6> * <var:Q> \} & <var:n2> := <nat:4> & \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:6> * <var:Q> \land <var:n2> = <nat:4> \} \\ \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:6> * <var:Q> \land <var:n2> = <nat:4> \} & <var:n2> := <var:n2> * <var:s> & \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:6> * <var:Q> \land <var:n2> = <nat:4> * <var:Q> \} \end{tabular} Following , we have \[ \begin{tabular} {rcl} \{ <var:s> = <var:Q> \} & <var:n0> := <nat:6> & \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \} \\ \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \} & <var:n1> := <nat:6> & \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:6> \} \end{tabular} Keeping momentum , we see \[ \begin{tabular} {rcl} \{ <var:s> = <var:Q> \} & <var:n0> := <nat:6> & \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \} \\ \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \} & <var:n1> := <nat:6> & \{ <var:s> = <var:Q> \land <var:n0> = <nat:6> \land <var:n1> = <nat:6> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n0> := <nat:6> ; <var:n1> := <nat:6> ; <var:n1> := <var:n1> * <var:s> ; <var:n2> := <nat:4> ; <var:n2> := <var:n2> * <var:s> ; <var:n2> := <var:n2> * <var:s> ; <var:P> := <var:n2> ; <var:P> := <var:P> + <var:n1> ; <var:P> := <var:P> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:s> = <var:Q> }} <def:poly> {{ <var:P> = <nat:4> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:Q> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:6> * <var:Q> /\ <var:n2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:6> * <var:Q> /\ <var:n2> = <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:6> * <var:Q> /\ <var:n2> = <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:n1> = <nat:6> * <var:Q> /\ <var:P> = <nat:4> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Q> /\ <var:n0> = <nat:6> /\ <var:P> = <nat:4> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:Q> /\ <var:P> = <nat:4> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 