\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:7> ; <var:z1> := <nat:3> ; <var:z1> := <var:z1> * <var:r> ; <var:z3> := <nat:4> ; <var:z3> := <var:z3> * <var:r> ; <var:z3> := <var:z3> * <var:r> ; <var:z3> := <var:z3> * <var:r> ; <var:m> := <var:z3> ; <var:m> := <var:m> + <var:z1> ; <var:m> := <var:m> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allowing given some positive integers $ <var:k> $ $ <var:r> = <var:k> $ ahead of the evaluation of this code segment , it must be that $ <var:m> = <nat:4> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> + <nat:7> $ once series of commands finishes . \end{theorem} \begin{proof} The proof of our set of instructions is shown with standard Hoare reasoning . Considering the proceeding command contained in the list of instructions , we see the variable update statement defining $ <nat:7> $ into $ <var:z0>$ . This code takes the condition $ \{ <var:r> = <var:k> \} $ to the condition $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \} $ . Advancing to the upcoming line in the set of instructions , the variable binding statement binding $ <nat:3> $ toward $ <var:z1>$ . This statement takes the precondition $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \} $ as the condition $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \} $ . Moving on to the next command found in the code , we see the variable binding code \verb | <var:z1> := <var:z1> * <var:r> ; | . This line moves the condition $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \} $ into $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \cdot <var:k> \} $ . This is rigorously given using the assignment law given by typical Hoare techniques . Advancing to the next step , we see the variable assignmet code defining $ <nat:4> $ toward $ <var:z3>$ . This forwards the condition $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \cdot <var:k> \} $ toward $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \cdot <var:k> \land <var:z3> = <nat:4> \} $ . This is sound through the assignment law of typical Hoare logic . Next , the assignment code \verb | <var:z3> := <var:z3> * <var:r> ; | . This command transfers the precondition $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \cdot <var:k> \land <var:z3> = <nat:4> \} $ as the condition $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \cdot <var:k> \land <var:z3> = <nat:4> \cdot <var:k> \} $ . Moving forward to the upcoming bit of code in the series of commands , we see the code yielding $ <var:z3> * <var:r> $ as $ <var:z3>$ . This advances $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \cdot <var:k> \land <var:z3> = <nat:4> \cdot <var:k> \} $ into the postcondition $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \cdot <var:k> \land <var:z3> = <nat:4> \cdot <var:k> ^ <nat:2> \} $ . This is guaranteed using the assignment inference rule obtained from typical Hoare techniques . Further , the variable update code \verb | <var:z3> := <var:z3> * <var:r> ; | . This line advances the precondition $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \cdot <var:k> \land <var:z3> = <nat:4> \cdot <var:k> ^ <nat:2> \} $ into $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \cdot <var:k> \land <var:z3> = <nat:4> \cdot <var:k> ^ <nat:3> \} $ . Considering the following piece of code contained in our program , we see the binding command \verb | <var:m> := <var:z3> ; | . This command forwards the condition $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \cdot <var:k> \land <var:z3> = <nat:4> \cdot <var:k> ^ <nat:3> \} $ into the condition $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \cdot <var:k> \land <var:m> = <nat:4> \cdot <var:k> ^ <nat:3> \} $ . Paying attention to the upcoming piece of code contained in our series of instructions , we have the assignment code binding $ <var:m> + <var:z1> $ as $ <var:m>$ . This statement forwards $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:z1> = <nat:3> \cdot <var:k> \land <var:m> = <nat:4> \cdot <var:k> ^ <nat:3> \} $ toward $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:m> = <nat:4> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> \} $ . This is known to be sound through the assignment rule of typical Hoare techniques . Moving onward , we have the variable assignmet line assigning $ <var:m> + <var:z0$ toward $ <var:m>$ . This redefines $ \{ <var:r> = <var:k> \land <var:z0> = <nat:7> \land <var:m> = <nat:4> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> \} $ as $ \{ <var:r> = <var:k> \land <var:m> = <nat:4> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z3> : string := " <var:z3> " . Definition <def:poly> := <var:z0> := <nat:7> ; <var:z1> := <nat:3> ; <var:z1> := <var:z1> * <var:r> ; <var:z3> := <nat:4> ; <var:z3> := <var:z3> * <var:r> ; <var:z3> := <var:z3> * <var:r> ; <var:z3> := <var:z3> * <var:r> ; <var:m> := <var:z3> ; <var:m> := <var:m> + <var:z1> ; <var:m> := <var:m> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:r> = <var:k> }} <def:poly> {{ <var:m> = <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:3> * <var:k> /\ <var:z3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:3> * <var:k> /\ <var:z3> = <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:3> * <var:k> /\ <var:z3> = <nat:4> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:3> * <var:k> /\ <var:z3> = <nat:4> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:3> * <var:k> /\ <var:m> = <nat:4> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:z0> = <nat:7> /\ <var:m> = <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:m> = <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 