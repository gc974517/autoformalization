\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:3> ; <var:L> := <var:y0> \end{verbatim} \end{definition} \begin{theorem} Take the following segment of code <def:poly> in \emph{Imp} . Assuming that we have $ <var:D> = <var:r> $ before evaluating our series of instructions , it follows that $ <var:L> = <nat:3> $ . \end{theorem} \begin{proof} Utilizing Hoare logic gives : \begin{eqnarray} \{ <var:D> = <var:r> \} \\ <var:y0> := <nat:3> ; \\ \{ <var:D> = <var:r> \land <var:y0> = <nat:3> \} \\ <var:L> := <var:y0> \\ \{ <var:D> = <var:r> \land <var:L> = <nat:3> \} \end{eqnarray} Thusly , the set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <def:poly> := <var:y0> := <nat:3> ; <var:L> := <var:y0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:D> = <var:r> }} <def:poly> {{ <var:L> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:r> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:r> /\ <var:L> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 