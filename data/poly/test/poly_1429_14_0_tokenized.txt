\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:8> ; <var:K1> := <nat:7> ; <var:K1> := <var:K1> * <var:y> ; <var:K2> := <nat:5> ; <var:K2> := <var:K2> * <var:y> ; <var:K2> := <var:K2> * <var:y> ; <var:K3> := <nat:9> ; <var:K3> := <var:K3> * <var:y> ; <var:K3> := <var:K3> * <var:y> ; <var:K3> := <var:K3> * <var:y> ; <var:Y> := <var:K3> ; <var:Y> := <var:Y> + <var:K2> ; <var:Y> := <var:Y> + <var:K1> ; <var:Y> := <var:Y> + <var:K0> \end{verbatim} Assuming that we have $ <var:y> = <var:B> $ ahead of the evaluation of the code segment it holds that we have $ <var:Y> = <nat:9> \times <var:B> ^ <nat:3> + <nat:5> \times <var:B> ^ <nat:2> + <nat:7> \times <var:B> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:B> \} \\ <var:K0> := <nat:8> ; \\ \{ <var:y> = <var:B> \land <var:K0> = <nat:8> \} \\ <var:K1> := <nat:7> ; \\ \{ <var:y> = <var:B> \land <var:K0> = <nat:8> \land <var:K1> = <nat:7> \} \\ <var:K1> := <var:K1> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:K0> = <nat:8> \land <var:K1> = <nat:7> * <var:B> \} \\ <var:K2> := <nat:5> ; \\ \{ <var:y> = <var:B> \land <var:K0> = <nat:8> \land <var:K1> = <nat:7> * <var:B> \land <var:K2> = <nat:5> \} \\ <var:K2> := <var:K2> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:K0> = <nat:8> \land <var:K1> = <nat:7> * <var:B> \land <var:K2> = <nat:5> * <var:B> \} \\ <var:K2> := <var:K2> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:K0> = <nat:8> \land <var:K1> = <nat:7> * <var:B> \land <var:K2> = <nat:5> * <var:B> ^ <nat:2> \} \\ <var:K3> := <nat:9> ; \\ \{ <var:y> = <var:B> \land <var:K0> = <nat:8> \land <var:K1> = <nat:7> * <var:B> \land <var:K2> = <nat:5> * <var:B> ^ <nat:2> \land <var:K3> = <nat:9> \} \\ <var:K3> := <var:K3> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:K0> = <nat:8> \land <var:K1> = <nat:7> * <var:B> \land <var:K2> = <nat:5> * <var:B> ^ <nat:2> \land <var:K3> = <nat:9> * <var:B> \} \\ <var:K3> := <var:K3> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:K0> = <nat:8> \land <var:K1> = <nat:7> * <var:B> \land <var:K2> = <nat:5> * <var:B> ^ <nat:2> \land <var:K3> = <nat:9> * <var:B> ^ <nat:2> \} \\ <var:K3> := <var:K3> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:K0> = <nat:8> \land <var:K1> = <nat:7> * <var:B> \land <var:K2> = <nat:5> * <var:B> ^ <nat:2> \land <var:K3> = <nat:9> * <var:B> ^ <nat:3> \} \\ <var:Y> := <var:K3> ; \\ \{ <var:y> = <var:B> \land <var:K0> = <nat:8> \land <var:K1> = <nat:7> * <var:B> \land <var:K2> = <nat:5> * <var:B> ^ <nat:2> \land <var:Y> = <nat:9> * <var:B> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:K2> ; \\ \{ <var:y> = <var:B> \land <var:K0> = <nat:8> \land <var:K1> = <nat:7> * <var:B> \land <var:Y> = <nat:9> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:K1> ; \\ \{ <var:y> = <var:B> \land <var:K0> = <nat:8> \land <var:Y> = <nat:9> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:7> * <var:B> \} \\ <var:Y> := <var:Y> + <var:K0> \\ \{ <var:y> = <var:B> \land <var:Y> = <nat:9> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:8> \} \end{eqnarray} Utilizing Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:y> = <var:B> }} <var:K0> := <nat:8> ; <var:K1> := <nat:7> ; <var:K1> := <var:K1> * <var:y> ; <var:K2> := <nat:5> ; <var:K2> := <var:K2> * <var:y> ; <var:K2> := <var:K2> * <var:y> ; <var:K3> := <nat:9> ; <var:K3> := <var:K3> * <var:y> ; <var:K3> := <var:K3> * <var:y> ; <var:K3> := <var:K3> * <var:y> ; <var:Y> := <var:K3> ; <var:Y> := <var:Y> + <var:K2> ; <var:Y> := <var:Y> + <var:K1> ; <var:Y> := <var:Y> + <var:K0> {{ <var:Y> = <nat:9> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K0> = <nat:8> /\ <var:K1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K0> = <nat:8> /\ <var:K1> = <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K0> = <nat:8> /\ <var:K1> = <nat:7> * <var:B> /\ <var:K2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K0> = <nat:8> /\ <var:K1> = <nat:7> * <var:B> /\ <var:K2> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K0> = <nat:8> /\ <var:K1> = <nat:7> * <var:B> /\ <var:K2> = <nat:5> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K0> = <nat:8> /\ <var:K1> = <nat:7> * <var:B> /\ <var:K2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:K3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K0> = <nat:8> /\ <var:K1> = <nat:7> * <var:B> /\ <var:K2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:K3> = <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K0> = <nat:8> /\ <var:K1> = <nat:7> * <var:B> /\ <var:K2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:K3> = <nat:9> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K0> = <nat:8> /\ <var:K1> = <nat:7> * <var:B> /\ <var:K2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:K3> = <nat:9> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K0> = <nat:8> /\ <var:K1> = <nat:7> * <var:B> /\ <var:K2> = <nat:5> * <var:B> ^ <nat:2> /\ <var:Y> = <nat:9> * <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K0> = <nat:8> /\ <var:K1> = <nat:7> * <var:B> /\ <var:Y> = <nat:9> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:K0> = <nat:8> /\ <var:Y> = <nat:9> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:Y> = <nat:9> * <var:B> ^ <nat:3> + <nat:5> * <var:B> ^ <nat:2> + <nat:7> * <var:B> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 