\begin{document} \begin{theorem} Define the following set of commands : \begin{verbatim} <var:V> := <nat:3> ; <var:V> := <var:V> * <var:I> ; <var:V> := <nat:1> + <var:V> * <var:I> ; <var:V> := <nat:4> + <var:V> * <var:I> ; <var:V> := <nat:3> + <var:V> * <var:I> ; <var:V> := <nat:1> + <var:V> * <var:I> ; <var:V> := <nat:2> + <var:V> * <var:I> ; <var:V> := <nat:1> + <var:V> * <var:I> ; <var:V> := <nat:2> + <var:V> * <var:I> \end{verbatim} Assume ( for every $ <var:j> $ ) that we have $ <var:I> = <var:j> $ prior to interpreting this series of commands , it must be that $ <var:V> = <nat:3> \cdot <var:j> ^ <nat:8> + <nat:1> \cdot <var:j> ^ <nat:6> + <nat:4> \cdot <var:j> ^ <nat:5> + <nat:3> \cdot <var:j> ^ <nat:4> + <nat:1> \cdot <var:j> ^ <nat:3> + <nat:2> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of commands is accomplished through usual Hoare reasoning . Paying attention to the following lines in the segment of code , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:j> \} & <var:V> := <nat:3> & \{ <var:I> = <var:j> \land <var:V> = <nat:3> \} \\ \{ <var:I> = <var:j> \land <var:V> = <nat:3> \} & <var:V> := <var:V> * <var:I> & \{ <var:I> = <var:j> \land <var:V> = <nat:3> * <var:j> + \} \\ \{ <var:I> = <var:j> \land <var:V> = <nat:3> * <var:j> + \} & <var:V> := <nat:1> + <var:V> * <var:I> & \{ <var:I> = <var:j> \land <var:V> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> \} \\ \{ <var:I> = <var:j> \land <var:V> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> \} & <var:V> := <nat:4> + <var:V> * <var:I> & \{ <var:I> = <var:j> \land <var:V> = <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> + <nat:4> \} \\ \{ <var:I> = <var:j> \land <var:V> = <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> + <nat:4> \} & <var:V> := <nat:3> + <var:V> * <var:I> & \{ <var:I> = <var:j> \land <var:V> = <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> \} \\ \{ <var:I> = <var:j> \land <var:V> = <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> \} & <var:V> := <nat:1> + <var:V> * <var:I> & \{ <var:I> = <var:j> \land <var:V> = <nat:3> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> \} \\ \{ <var:I> = <var:j> \land <var:V> = <nat:3> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> \} & <var:V> := <nat:2> + <var:V> * <var:I> & \{ <var:I> = <var:j> \land <var:V> = <nat:3> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:2> \} \\ \{ <var:I> = <var:j> \land <var:V> = <nat:3> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:2> \} & <var:V> := <nat:1> + <var:V> * <var:I> & \{ <var:I> = <var:j> \land <var:V> = <nat:3> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:1> \} \end{tabular} This is shown with the environment update rule found in Hoare logic . Observing the following step in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:I> = <var:j> \} & <var:V> := <nat:3> & \{ <var:I> = <var:j> \land <var:V> = <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:I> = <var:j> }} <var:V> := <nat:3> ; <var:V> := <var:V> * <var:I> ; <var:V> := <nat:1> + <var:V> * <var:I> ; <var:V> := <nat:4> + <var:V> * <var:I> ; <var:V> := <nat:3> + <var:V> * <var:I> ; <var:V> := <nat:1> + <var:V> * <var:I> ; <var:V> := <nat:2> + <var:V> * <var:I> ; <var:V> := <nat:1> + <var:V> * <var:I> ; <var:V> := <nat:2> + <var:V> * <var:I> {{ <var:V> = <nat:3> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:V> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:V> = <nat:3> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:V> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:V> = <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:V> = <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:V> = <nat:3> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:V> = <nat:3> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:V> = <nat:3> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:V> = <nat:3> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 