\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:L> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:3> ; <var:T> := <var:Q1> <var:T> := <var:T> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> . Allow that $ <var:L> = <var:G> $ before executing this program then we see $ <var:T> = <nat:3> \times <var:G> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of commands is shown using Hoare reasoning . Taking another step toward the proceeding step found in our program , we have the variable binding command letting $ <var:L> $ into $ <var:Q1>$ . This statement advances the precondition $ \{ <var:L> = <var:G> \} $ into the postcondition $ \{ <var:L> = <var:G> \land <var:Q1> = <var:G> \} $ . Paying attention to the subsequent command in our set of commands , we see the variable binding code giving $ <nat:1> $ into $ <var:Q0>$ . This redefines $ \{ <var:L> = <var:G> \land <var:Q1> = <var:G> \} $ into the condition $ \{ <var:L> = <var:G> \land <var:Q1> = <var:G> \land <var:Q0> = <nat:1> \} $ . Honing in on the next command found in the segment of code , the variable assignmet line \verb | <var:Q1> := <var:Q1> * <nat:3> ; | . This command moves the condition $ \{ <var:L> = <var:G> \land <var:Q1> = <var:G> \land <var:Q0> = <nat:1> \} $ into the condition $ \{ <var:L> = <var:G> \land <var:Q1> = <nat:3> \cdot <var:G> \land <var:Q0> = <nat:1> \} $ . Paying attention to the upcoming command in our series of instructions , we have the variable binding statement \verb | <var:T> := <var:Q1> | . This line takes $ \{ <var:L> = <var:G> \land <var:Q1> = <nat:3> \cdot <var:G> \land <var:Q0> = <nat:1> \} $ toward the postcondition $ \{ <var:L> = <var:G> \land <var:Q0> = <nat:1> \land <var:T> = <nat:3> \cdot <var:G> \} $ . This is shown to be logically sound by the assignment scheme given by usual Hoare logic . Next , we have the environment update line yielding $ <var:T> + <var:Q0$ into $ <var:T>$ . This line moves the precondition $ \{ <var:L> = <var:G> \land <var:Q0> = <nat:1> \land <var:T> = <nat:3> \cdot <var:G> \} $ as the postcondition $ \{ <var:L> = <var:G> \land <var:T> = <nat:3> \cdot <var:G> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <def:poly> := <var:Q1> := <var:L> ; <var:Q0> := <nat:1> ; <var:Q1> := <var:Q1> * <nat:3> ; <var:T> := <var:Q1> <var:T> := <var:T> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:L> = <var:G> }} <def:poly> {{ <var:T> = <nat:3> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:Q1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:Q1> = <var:G> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:Q1> = <nat:3> * <var:G> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:Q0> = <nat:1> /\ <var:T> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:T> = <nat:3> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 