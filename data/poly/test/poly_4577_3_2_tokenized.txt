\begin{document} \begin{theorem} Take a list of instructions as follows \begin{verbatim} <var:U> := <nat:1> ; <var:U> := <nat:2> + <var:U> * <var:x> ; <var:U> := <nat:4> + <var:U> * <var:x> \end{verbatim} Assuming $ <var:x> = <var:c> $ before executing the list of commands it must be that we have $ <var:U> = <nat:1> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:4> $ when list of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:c> \} \\ <var:U> := <nat:1> ; \\ \{ <var:x> = <var:c> \land <var:U> = <nat:1> \} \\ <var:U> := <nat:2> + <var:U> * <var:x> ; \\ \{ <var:x> = <var:c> \land <var:U> = <nat:1> * <var:c> + <nat:2> \} \\ <var:U> := <nat:4> + <var:U> * <var:x> \\ \{ <var:x> = <var:c> \land <var:U> = <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> \} \end{eqnarray} The application of typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:x> = <var:c> }} <var:U> := <nat:1> ; <var:U> := <nat:2> + <var:U> * <var:x> ; <var:U> := <nat:4> + <var:U> * <var:x> {{ <var:U> = <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:U> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:U> = <nat:1> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:U> = <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 