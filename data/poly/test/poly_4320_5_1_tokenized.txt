\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:q1> := <var:c> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:4> ; <var:u> := <var:q1> <var:u> := <var:u> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:c> = <var:k> $ --- for $ <var:k> \in \mathbb{Z}^+ $ --- before the execution of our series of instructions , it holds that we have $ <var:u> = <nat:4> \times <var:k> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is demonstrated through usual Hoare techniques . Moving on to the proceeding bits of codecontained in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:c> = <var:k> \} & <var:q1> := <var:c> & \{ <var:c> = <var:k> \land <var:q1> = <var:k> \} \\ \{ <var:c> = <var:k> \land <var:q1> = <var:k> \} & <var:q0> := <nat:2> & \{ <var:c> = <var:k> \land <var:q1> = <var:k> \land <var:q0> = <nat:2> \} \\ \{ <var:c> = <var:k> \land <var:q1> = <var:k> \land <var:q0> = <nat:2> \} & <var:q1> := <var:q1> * <nat:4> & \{ <var:c> = <var:k> \land <var:q1> = <nat:4> \cdot <var:k> \land <var:q0> = <nat:2> \} \\ \{ <var:c> = <var:k> \land <var:q1> = <nat:4> \cdot <var:k> \land <var:q0> = <nat:2> \} & <var:u> := <var:q1& \{ <var:c> = <var:k> \land <var:q0> = <nat:2> \land <var:u> = <nat:4> \cdot <var:k> \} \end{tabular} Advancing , \[ \begin{tabular} {rcl} \{ <var:c> = <var:k> \} & <var:q1> := <var:c> & \{ <var:c> = <var:k> \land <var:q1> = <var:k> \} \end{tabular} This is known to be sound with the binding law given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q1> := <var:c> ; <var:q0> := <nat:2> ; <var:q1> := <var:q1> * <nat:4> ; <var:u> := <var:q1> <var:u> := <var:u> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:c> = <var:k> }} <def:poly> {{ <var:u> = <nat:4> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:q1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:q1> = <var:k> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:q1> = <nat:4> * <var:k> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:q0> = <nat:2> /\ <var:u> = <nat:4> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:k> /\ <var:u> = <nat:4> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 