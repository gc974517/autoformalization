\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a1> := <var:y> ; <var:a2> := <var:a1> * <var:y> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:3> ; <var:a2> := <var:a2> * <nat:5> ; <var:P> := <var:a2> <var:P> := <var:P> + <var:a1> <var:P> := <var:P> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> in \emph{Imp} . Assuming it to be that $ <var:y> = <var:I> $ , for every natural numbers $ <var:I> $ , before running this set of instructions , then we have $ <var:P> = <nat:5> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:1> $ when program exits . \end{theorem} \begin{proof} The argument for the set of commands can be given by usual Hoare techniques . Moving forward , the environment update line letting $ <var:y> $ toward $ <var:a1>$ . This forwards the condition $ \{ <var:y> = <var:I> \} $ to the condition $ \{ <var:y> = <var:I> \land <var:a1> = <var:I> \} $ . This is sound by the assignment inference rule found in standard Hoare logic . Shifting focus toward the subsequent line found in our code , we see the environment update command binding $ <var:a1> * <var:y> $ as $ <var:a2>$ . This code moves $ \{ <var:y> = <var:I> \land <var:a1> = <var:I> \} $ toward $ \{ <var:y> = <var:I> \land <var:a1> = <var:I> \land <var:a2> = <var:I> ^ <nat:2> \} $ . Advancing to the next step , we have the variable update line \verb | <var:a0> := <nat:1> ; | . This transfers the precondition $ \{ <var:y> = <var:I> \land <var:a1> = <var:I> \land <var:a2> = <var:I> ^ <nat:2> \} $ toward $ \{ <var:y> = <var:I> \land <var:a1> = <var:I> \land <var:a2> = <var:I> ^ <nat:2> \land <var:a0> = <nat:1> \} $ . This is guaranteed through the assignment rule of typical Hoare reasoning . Moving onward , we see the variable binding line binding $ <var:a1> * <nat:3> $ as $ <var:a1>$ . This statement takes $ \{ <var:y> = <var:I> \land <var:a1> = <var:I> \land <var:a2> = <var:I> ^ <nat:2> \land <var:a0> = <nat:1> \} $ to $ \{ <var:y> = <var:I> \land <var:a1> = <nat:3> * <var:I> \land <var:a2> = <var:I> ^ <nat:2> \land <var:a0> = <nat:1> \} $ . Moving on to the subsequent command in the set of instructions , the binding statement \verb | <var:a2> := <var:a2> * <nat:5> ; | . This code moves $ \{ <var:y> = <var:I> \land <var:a1> = <nat:3> * <var:I> \land <var:a2> = <var:I> ^ <nat:2> \land <var:a0> = <nat:1> \} $ toward the condition $ \{ <var:y> = <var:I> \land <var:a1> = <nat:3> * <var:I> \land <var:a2> = <nat:5> * <var:I> ^ <nat:2> \land <var:a0> = <nat:1> \} $ . This is deduced with the assignment rule given in typical Hoare techniques . Moving on to the next step , we have the statement \verb | <var:P> := <var:a2> | . This line advances the precondition $ \{ <var:y> = <var:I> \land <var:a1> = <nat:3> * <var:I> \land <var:a2> = <nat:5> * <var:I> ^ <nat:2> \land <var:a0> = <nat:1> \} $ to the postcondition $ \{ <var:y> = <var:I> \land <var:a1> = <nat:3> * <var:I> \land <var:a0> = <nat:1> \land <var:P> = <nat:5> * <var:I> ^ <nat:2> \} $ . This is rigorously given with the assignment rule of usual Hoare techniques . Taking another step toward the next step found in the code , we see the variable binding code letting $ <var:P> + <var:a1$ as $ <var:P>$ . This command redefines the precondition $ \{ <var:y> = <var:I> \land <var:a1> = <nat:3> * <var:I> \land <var:a0> = <nat:1> \land <var:P> = <nat:5> * <var:I> ^ <nat:2> \} $ toward the condition $ \{ <var:y> = <var:I> \land <var:a0> = <nat:1> \land <var:P> = <nat:5> * <var:I> ^ <nat:2> + <nat:3> * <var:I> \} $ . Honing in on the next bit of code seen in the code segment , we have the command \verb | <var:P> := <var:P> + <var:a0> | . This redefines the precondition $ \{ <var:y> = <var:I> \land <var:a0> = <nat:1> \land <var:P> = <nat:5> * <var:I> ^ <nat:2> + <nat:3> * <var:I> \} $ to the postcondition $ \{ <var:y> = <var:I> \land <var:P> = <nat:5> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <def:poly> := <var:a1> := <var:y> ; <var:a2> := <var:a1> * <var:y> ; <var:a0> := <nat:1> ; <var:a1> := <var:a1> * <nat:3> ; <var:a2> := <var:a2> * <nat:5> ; <var:P> := <var:a2> <var:P> := <var:P> + <var:a1> <var:P> := <var:P> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:y> = <var:I> }} <def:poly> {{ <var:P> = <nat:5> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:a1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:a1> = <var:I> /\ <var:a2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:a1> = <var:I> /\ <var:a2> = <var:I> ^ <nat:2> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:a1> = <nat:3> * <var:I> /\ <var:a2> = <var:I> ^ <nat:2> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:a1> = <nat:3> * <var:I> /\ <var:a2> = <nat:5> * <var:I> ^ <nat:2> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:a1> = <nat:3> * <var:I> /\ <var:a0> = <nat:1> /\ <var:P> = <nat:5> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:a0> = <nat:1> /\ <var:P> = <nat:5> * <var:I> ^ <nat:2> + <nat:3> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:I> /\ <var:P> = <nat:5> * <var:I> ^ <nat:2> + <nat:3> * <var:I> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 