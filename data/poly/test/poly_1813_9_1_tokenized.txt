\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:y1> := <var:j> ; <var:y2> := <var:y1> * <var:j> ; <var:y3> := <var:y2> * <var:j> ; <var:y0> := <nat:4> ; <var:y1> := <var:y1> * <nat:4> ; <var:y3> := <var:y3> * <nat:8> ; <var:T> := <var:y3> <var:T> := <var:T> + <var:y1> <var:T> := <var:T> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> . Assuming that $ <var:j> = <var:X> $ before evaluating the list of commands then $ <var:T> = <nat:8> \cdot <var:X> ^ <nat:3> + <nat:4> \cdot <var:X> + <nat:4> $ when set of commands has finished . \end{theorem} \begin{proof} Applying standard Hoare reasoning yields : \begin{eqnarray} \{ <var:j> = <var:X> \} \\ <var:y1> := <var:j> ; \\ \{ <var:j> = <var:X> \land <var:y1> = <var:X> \} \\ <var:y2> := <var:y1> * <var:j> ; \\ \{ <var:j> = <var:X> \land <var:y1> = <var:X> \land <var:y2> = <var:X> ^ <nat:2> \} \\ <var:y3> := <var:y2> * <var:j> ; \\ \{ <var:j> = <var:X> \land <var:y1> = <var:X> \land <var:y2> = <var:X> ^ <nat:2> \land <var:y3> = <var:X> ^ <nat:3> \} \\ <var:y0> := <nat:4> ; \\ \{ <var:j> = <var:X> \land <var:y1> = <var:X> \land <var:y2> = <var:X> ^ <nat:2> \land <var:y3> = <var:X> ^ <nat:3> \land <var:y0> = <nat:4> \} \\ <var:y1> := <var:y1> * <nat:4> ; \\ \{ <var:j> = <var:X> \land <var:y1> = <nat:4> \times <var:X> \land <var:y2> = <var:X> ^ <nat:2> \land <var:y3> = <var:X> ^ <nat:3> \land <var:y0> = <nat:4> \} \\ <var:y3> := <var:y3> * <nat:8> ; \\ \{ <var:j> = <var:X> \land <var:y1> = <nat:4> \times <var:X> \land <var:y2> = <var:X> ^ <nat:2> \land <var:y3> = <nat:8> \times <var:X> ^ <nat:3> \land <var:y0> = <nat:4> \} \\ <var:T> := <var:y3> \\ \{ <var:j> = <var:X> \land <var:y1> = <nat:4> \times <var:X> \land <var:y2> = <var:X> ^ <nat:2> \land <var:y0> = <nat:4> \land <var:T> = <nat:8> \times <var:X> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:y1> \\ \{ <var:j> = <var:X> \land <var:y0> = <nat:4> \land <var:T> = <nat:8> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> \} \\ <var:T> := <var:T> + <var:y0> \\ \{ <var:j> = <var:X> \land <var:T> = <nat:8> \times <var:X> ^ <nat:3> + <nat:4> \times <var:X> + <nat:4> \} \end{eqnarray} Hence , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y1> := <var:j> ; <var:y2> := <var:y1> * <var:j> ; <var:y3> := <var:y2> * <var:j> ; <var:y0> := <nat:4> ; <var:y1> := <var:y1> * <nat:4> ; <var:y3> := <var:y3> * <nat:8> ; <var:T> := <var:y3> <var:T> := <var:T> + <var:y1> <var:T> := <var:T> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:j> = <var:X> }} <def:poly> {{ <var:T> = <nat:8> * <var:X> ^ <nat:3> + <nat:4> * <var:X> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:y1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:y1> = <var:X> /\ <var:y2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:y1> = <var:X> /\ <var:y2> = <var:X> ^ <nat:2> /\ <var:y3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:y1> = <var:X> /\ <var:y2> = <var:X> ^ <nat:2> /\ <var:y3> = <var:X> ^ <nat:3> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:y1> = <nat:4> * <var:X> /\ <var:y2> = <var:X> ^ <nat:2> /\ <var:y3> = <var:X> ^ <nat:3> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:y1> = <nat:4> * <var:X> /\ <var:y2> = <var:X> ^ <nat:2> /\ <var:y3> = <nat:8> * <var:X> ^ <nat:3> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:y1> = <nat:4> * <var:X> /\ <var:y2> = <var:X> ^ <nat:2> /\ <var:y0> = <nat:4> /\ <var:T> = <nat:8> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:y0> = <nat:4> /\ <var:T> = <nat:8> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:X> /\ <var:T> = <nat:8> * <var:X> ^ <nat:3> + <nat:4> * <var:X> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 