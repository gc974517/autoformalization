\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r> := <nat:3> ; <var:r> := <nat:3> + <var:r> * <var:L> ; <var:r> := <nat:3> + <var:r> * <var:L> ; <var:r> := <nat:3> + <var:r> * <var:L> ; <var:r> := <nat:4> + <var:r> * <var:L> ; <var:r> := <nat:2> + <var:r> * <var:L> ; <var:r> := <nat:1> + <var:r> * <var:L> ; <var:r> := <nat:4> + <var:r> * <var:L> ; <var:r> := <nat:1> + <var:r> * <var:L> \end{verbatim} \end{definition} \begin{theorem} Assuming , given any $ <var:v> $ , that $ <var:L> = <var:v> $ before executing our code it must be that we have $ <var:r> = <nat:3> \times <var:v> ^ <nat:8> + <nat:3> \times <var:v> ^ <nat:7> + <nat:3> \times <var:v> ^ <nat:6> + <nat:3> \times <var:v> ^ <nat:5> + <nat:4> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:1> $ when list of instructions has finished . \end{theorem} \begin{proof} The flow of logic for this set of commands can be demonstrated with standard Hoare techniques . Advancing to the next lines contained in the code , \begin{eqnarray} \{ <var:L> = <var:v> \} \, <var:r> := <nat:3> \, \{ <var:L> = <var:v> \land <var:r> = <nat:3> \} \\ \{ <var:L> = <var:v> \land <var:r> = <nat:3> \} \, <var:r> := <nat:3> + <var:r> * <var:L> \, \{ <var:L> = <var:v> \land <var:r> = <nat:3> * <var:v> + <nat:3> \} \\ \{ <var:L> = <var:v> \land <var:r> = <nat:3> * <var:v> + <nat:3> \} \, <var:r> := <nat:3> + <var:r> * <var:L> \, \{ <var:L> = <var:v> \land <var:r> = <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:3> \} \\ \{ <var:L> = <var:v> \land <var:r> = <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:3> \} \, <var:r> := <nat:3> + <var:r> * <var:L> \, \{ <var:L> = <var:v> \land <var:r> = <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:3> \} \\ \{ <var:L> = <var:v> \land <var:r> = <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:3> \} \, <var:r> := <nat:4> + <var:r> * <var:L> \, \{ <var:L> = <var:v> \land <var:r> = <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> \} \\ \{ <var:L> = <var:v> \land <var:r> = <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> \} \, <var:r> := <nat:2> + <var:r> * <var:L> \, \{ <var:L> = <var:v> \land <var:r> = <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> \} \end{eqnarray} This is ensured using the variable update rule from usual Hoare logic . Shifting focus toward the proceeding statements seen in our program , we see \begin{eqnarray} \{ <var:L> = <var:v> \} \, <var:r> := <nat:3> \, \{ <var:L> = <var:v> \land <var:r> = <nat:3> \} \\ \{ <var:L> = <var:v> \land <var:r> = <nat:3> \} \, <var:r> := <nat:3> + <var:r> * <var:L> \, \{ <var:L> = <var:v> \land <var:r> = <nat:3> * <var:v> + <nat:3> \} \end{eqnarray} This is rigorously given using the binding scheme obtained from typical Hoare techniques . Focusing on the next command seen in the list of instructions , we see \begin{eqnarray} \{ <var:L> = <var:v> \} \, <var:r> := <nat:3> \, \{ <var:L> = <var:v> \land <var:r> = <nat:3> \} \end{eqnarray} This is known to be sound by the variable assignmet rule given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:r> := <nat:3> ; <var:r> := <nat:3> + <var:r> * <var:L> ; <var:r> := <nat:3> + <var:r> * <var:L> ; <var:r> := <nat:3> + <var:r> * <var:L> ; <var:r> := <nat:4> + <var:r> * <var:L> ; <var:r> := <nat:2> + <var:r> * <var:L> ; <var:r> := <nat:1> + <var:r> * <var:L> ; <var:r> := <nat:4> + <var:r> * <var:L> ; <var:r> := <nat:1> + <var:r> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:L> = <var:v> }} <def:poly> {{ <var:r> = <nat:3> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:r> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:r> = <nat:3> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:r> = <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:r> = <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:r> = <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:r> = <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:r> = <nat:3> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:r> = <nat:3> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:v> /\ <var:r> = <nat:3> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 