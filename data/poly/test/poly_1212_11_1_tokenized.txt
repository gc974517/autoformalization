\begin{document} \begin{theorem} Consider the following series of instructions such that \begin{verbatim} <var:S1> := <var:R> ; <var:S2> := <var:S1> * <var:R> ; <var:S3> := <var:S2> * <var:R> ; <var:S0> := <nat:5> ; <var:S1> := <var:S1> * <nat:8> ; <var:S2> := <var:S2> * <nat:1> ; <var:S3> := <var:S3> * <nat:7> ; <var:L> := <var:S3> <var:L> := <var:L> + <var:S2> <var:L> := <var:L> + <var:S1> <var:L> := <var:L> + <var:S0> \end{verbatim} Allow it to hold that $ <var:R> = <var:Y> $ ahead of the execution of this code segment , it holds that we have $ <var:L> = <nat:7> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> + <nat:5> $ . \end{theorem} \begin{proof} The proof of this series of instructions can be accomplished with Hoare reasoning . Honing in on the next line of code contained in our program , we have the binding statement \verb | <var:S1> := <var:R> ; | . This code transfers the condition $ \{ <var:R> = <var:Y> \} $ to the postcondition $ \{ <var:R> = <var:Y> \land <var:S1> = <var:Y> \} $ . Moving forward , we see the binding command \verb | <var:S2> := <var:S1> * <var:R> ; | . This code moves the precondition $ \{ <var:R> = <var:Y> \land <var:S1> = <var:Y> \} $ as the condition $ \{ <var:R> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \} $ . Considering the upcoming bit of code seen in the set of commands , the variable binding line binding $ <var:S2> * <var:R> $ to $ <var:S3>$ . This line moves the condition $ \{ <var:R> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \} $ to the postcondition $ \{ <var:R> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \} $ . Looking at the next line of code in our code , we have the code \verb | <var:S0> := <nat:5> ; | . This statement forwards $ \{ <var:R> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \} $ toward the condition $ \{ <var:R> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \land <var:S0> = <nat:5> \} $ . Keeping momentum , the line \verb | <var:S1> := <var:S1> * <nat:8> ; | . This forwards the condition $ \{ <var:R> = <var:Y> \land <var:S1> = <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \land <var:S0> = <nat:5> \} $ toward $ \{ <var:R> = <var:Y> \land <var:S1> = <nat:8> \cdot <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \land <var:S0> = <nat:5> \} $ . This is given through the assignment scheme defined in typical Hoare techniques . Moving forward , we have the assignment command binding $ <var:S2> * <nat:1> $ to $ <var:S2>$ . This line takes $ \{ <var:R> = <var:Y> \land <var:S1> = <nat:8> \cdot <var:Y> \land <var:S2> = <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \land <var:S0> = <nat:5> \} $ to the condition $ \{ <var:R> = <var:Y> \land <var:S1> = <nat:8> \cdot <var:Y> \land <var:S2> = <nat:1> \cdot <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \land <var:S0> = <nat:5> \} $ . This is shown with the assignment scheme defined in standard Hoare techniques . Advancing to the next step , the variable binding code \verb | <var:S3> := <var:S3> * <nat:7> ; | . This moves $ \{ <var:R> = <var:Y> \land <var:S1> = <nat:8> \cdot <var:Y> \land <var:S2> = <nat:1> \cdot <var:Y> ^ <nat:2> \land <var:S3> = <var:Y> ^ <nat:3> \land <var:S0> = <nat:5> \} $ into the condition $ \{ <var:R> = <var:Y> \land <var:S1> = <nat:8> \cdot <var:Y> \land <var:S2> = <nat:1> \cdot <var:Y> ^ <nat:2> \land <var:S3> = <nat:7> \cdot <var:Y> ^ <nat:3> \land <var:S0> = <nat:5> \} $ . Advancing to the upcoming line contained in the program , we have the command \verb | <var:L> := <var:S3> | . This takes the precondition $ \{ <var:R> = <var:Y> \land <var:S1> = <nat:8> \cdot <var:Y> \land <var:S2> = <nat:1> \cdot <var:Y> ^ <nat:2> \land <var:S3> = <nat:7> \cdot <var:Y> ^ <nat:3> \land <var:S0> = <nat:5> \} $ to $ \{ <var:R> = <var:Y> \land <var:S1> = <nat:8> \cdot <var:Y> \land <var:S2> = <nat:1> \cdot <var:Y> ^ <nat:2> \land <var:S0> = <nat:5> \land <var:L> = <nat:7> \cdot <var:Y> ^ <nat:3> \} $ . After , the binding command letting $ <var:L> + <var:S2$ as $ <var:L>$ . This statement takes the condition $ \{ <var:R> = <var:Y> \land <var:S1> = <nat:8> \cdot <var:Y> \land <var:S2> = <nat:1> \cdot <var:Y> ^ <nat:2> \land <var:S0> = <nat:5> \land <var:L> = <nat:7> \cdot <var:Y> ^ <nat:3> \} $ into the postcondition $ \{ <var:R> = <var:Y> \land <var:S1> = <nat:8> \cdot <var:Y> \land <var:S0> = <nat:5> \land <var:L> = <nat:7> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> ^ <nat:2> \} $ . This is known to be sound by the assignment inference rule in typical Hoare logic . Stepping forward , we have the assignment command \verb | <var:L> := <var:L> + <var:S1> | . This command forwards the condition $ \{ <var:R> = <var:Y> \land <var:S1> = <nat:8> \cdot <var:Y> \land <var:S0> = <nat:5> \land <var:L> = <nat:7> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> ^ <nat:2> \} $ into the postcondition $ \{ <var:R> = <var:Y> \land <var:S0> = <nat:5> \land <var:L> = <nat:7> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:8> \cdot <var:Y> \} $ . This is shown to be logically sound through the assignment law defined by standard Hoare techniques . Shifting focus toward the next piece of code seen in the list of instructions , we see the variable binding line binding $ <var:L> + <var:S0$ as $ <var:L>$ . This command redefines the precondition $ \{ <var:R> = <var:Y> \land <var:S0> = <nat:5> \land <var:L> = <nat:7> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:8> \cdot <var:Y> \} $ toward the condition $ \{ <var:R> = <var:Y> \land <var:L> = <nat:7> \cdot <var:Y> ^ <nat:3> + <nat:1> \cdot <var:Y> ^ <nat:2> + <nat:8> \cdot <var:Y> + <nat:5> \} $ . This is deduced with the assignment rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:R> = <var:Y> }} <var:S1> := <var:R> ; <var:S2> := <var:S1> * <var:R> ; <var:S3> := <var:S2> * <var:R> ; <var:S0> := <nat:5> ; <var:S1> := <var:S1> * <nat:8> ; <var:S2> := <var:S2> * <nat:1> ; <var:S3> := <var:S3> * <nat:7> ; <var:L> := <var:S3> <var:L> := <var:L> + <var:S2> <var:L> := <var:L> + <var:S1> <var:L> := <var:L> + <var:S0> {{ <var:L> = <nat:7> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:S1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:S1> = <var:Y> /\ <var:S2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:S1> = <var:Y> /\ <var:S2> = <var:Y> ^ <nat:2> /\ <var:S3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:S1> = <var:Y> /\ <var:S2> = <var:Y> ^ <nat:2> /\ <var:S3> = <var:Y> ^ <nat:3> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:S1> = <nat:8> * <var:Y> /\ <var:S2> = <var:Y> ^ <nat:2> /\ <var:S3> = <var:Y> ^ <nat:3> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:S1> = <nat:8> * <var:Y> /\ <var:S2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:S3> = <var:Y> ^ <nat:3> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:S1> = <nat:8> * <var:Y> /\ <var:S2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:S3> = <nat:7> * <var:Y> ^ <nat:3> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:S1> = <nat:8> * <var:Y> /\ <var:S2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:S0> = <nat:5> /\ <var:L> = <nat:7> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:S1> = <nat:8> * <var:Y> /\ <var:S0> = <nat:5> /\ <var:L> = <nat:7> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:S0> = <nat:5> /\ <var:L> = <nat:7> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Y> /\ <var:L> = <nat:7> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:8> * <var:Y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 