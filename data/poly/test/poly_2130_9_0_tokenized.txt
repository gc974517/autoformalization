\begin{document} \begin{theorem} Consider a code segment as \begin{verbatim} <var:I0> := <nat:2> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:T> ; <var:I2> := <nat:1> ; <var:I2> := <var:I2> * <var:T> ; <var:I2> := <var:I2> * <var:T> ; <var:h> := <var:I2> ; <var:h> := <var:h> + <var:I1> ; <var:h> := <var:h> + <var:I0> \end{verbatim} Assume that $ <var:T> = <var:B> $ before the evaluation of the code , it must be that we see $ <var:h> = <nat:1> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:2> $ after series of instructions is done executing . \end{theorem} \begin{proof} Utilizing Hoare logic returns : \begin{eqnarray} \{ <var:T> = <var:B> \} \\ <var:I0> := <nat:2> ; \\ \{ <var:T> = <var:B> \land <var:I0> = <nat:2> \} \\ <var:I1> := <nat:8> ; \\ \{ <var:T> = <var:B> \land <var:I0> = <nat:2> \land <var:I1> = <nat:8> \} \\ <var:I1> := <var:I1> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:I0> = <nat:2> \land <var:I1> = <nat:8> \cdot <var:B> \} \\ <var:I2> := <nat:1> ; \\ \{ <var:T> = <var:B> \land <var:I0> = <nat:2> \land <var:I1> = <nat:8> \cdot <var:B> \land <var:I2> = <nat:1> \} \\ <var:I2> := <var:I2> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:I0> = <nat:2> \land <var:I1> = <nat:8> \cdot <var:B> \land <var:I2> = <nat:1> \cdot <var:B> \} \\ <var:I2> := <var:I2> * <var:T> ; \\ \{ <var:T> = <var:B> \land <var:I0> = <nat:2> \land <var:I1> = <nat:8> \cdot <var:B> \land <var:I2> = <nat:1> \cdot <var:B> ^ <nat:2> \} \\ <var:h> := <var:I2> ; \\ \{ <var:T> = <var:B> \land <var:I0> = <nat:2> \land <var:I1> = <nat:8> \cdot <var:B> \land <var:h> = <nat:1> \cdot <var:B> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:I1> ; \\ \{ <var:T> = <var:B> \land <var:I0> = <nat:2> \land <var:h> = <nat:1> \cdot <var:B> ^ <nat:2> + <nat:8> \cdot <var:B> \} \\ <var:h> := <var:h> + <var:I0> \\ \{ <var:T> = <var:B> \land <var:h> = <nat:1> \cdot <var:B> ^ <nat:2> + <nat:8> \cdot <var:B> + <nat:2> \} \end{eqnarray} Therefore , our series of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:T> = <var:B> }} <var:I0> := <nat:2> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:T> ; <var:I2> := <nat:1> ; <var:I2> := <var:I2> * <var:T> ; <var:I2> := <var:I2> * <var:T> ; <var:h> := <var:I2> ; <var:h> := <var:h> + <var:I1> ; <var:h> := <var:h> + <var:I0> {{ <var:h> = <nat:1> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:8> * <var:B> /\ <var:I2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:8> * <var:B> /\ <var:I2> = <nat:1> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:8> * <var:B> /\ <var:I2> = <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:8> * <var:B> /\ <var:h> = <nat:1> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:I0> = <nat:2> /\ <var:h> = <nat:1> * <var:B> ^ <nat:2> + <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:B> /\ <var:h> = <nat:1> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 