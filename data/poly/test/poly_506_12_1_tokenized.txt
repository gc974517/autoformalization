\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:F1> := <var:V> ; <var:F2> := <var:F1> * <var:V> ; <var:F3> := <var:F2> * <var:V> ; <var:F4> := <var:F3> * <var:V> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:3> ; <var:F2> := <var:F2> * <nat:1> ; <var:F4> := <var:F4> * <nat:3> ; <var:J> := <var:F4> <var:J> := <var:J> + <var:F2> <var:J> := <var:J> + <var:F1> <var:J> := <var:J> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> in \emph{Imp} . Assume $ <var:V> = <var:N> $ before the evaluation of our series of commands then $ <var:J> = <nat:3> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:2> $ when list of instructions has exited . \end{theorem} \begin{proof} The course of logic for our list of instructions can be accomplished using standard Hoare reasoning . Considering the following step found in the series of commands , the assignment statement \verb | <var:F1> := <var:V> ; | . This advances the condition $ \{ <var:V> = <var:N> \} $ as the condition $ \{ <var:V> = <var:N> \land <var:F1> = <var:N> \} $ . This is ensured by the assignment law of typical Hoare techniques . Honing in on the subsequent line of code in the program , the variable update statement \verb | <var:F2> := <var:F1> * <var:V> ; | . This forwards the precondition $ \{ <var:V> = <var:N> \land <var:F1> = <var:N> \} $ to the condition $ \{ <var:V> = <var:N> \land <var:F1> = <var:N> \land <var:F2> = <var:N> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme from usual Hoare reasoning . Stepping forward , we have the variable assignmet command \verb | <var:F3> := <var:F2> * <var:V> ; | . This statement moves the condition $ \{ <var:V> = <var:N> \land <var:F1> = <var:N> \land <var:F2> = <var:N> ^ <nat:2> \} $ to the condition $ \{ <var:V> = <var:N> \land <var:F1> = <var:N> \land <var:F2> = <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \} $ . Following , we see the environment update command \verb | <var:F4> := <var:F3> * <var:V> ; | . This code takes the condition $ \{ <var:V> = <var:N> \land <var:F1> = <var:N> \land <var:F2> = <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \} $ toward $ \{ <var:V> = <var:N> \land <var:F1> = <var:N> \land <var:F2> = <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \land <var:F4> = <var:N> ^ <nat:4> \} $ . This is shown to be logically sound using the assignment scheme obtained from standard Hoare techniques . Next , we see the statement \verb | <var:F0> := <nat:2> ; | . This transfers the precondition $ \{ <var:V> = <var:N> \land <var:F1> = <var:N> \land <var:F2> = <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \land <var:F4> = <var:N> ^ <nat:4> \} $ to the condition $ \{ <var:V> = <var:N> \land <var:F1> = <var:N> \land <var:F2> = <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \land <var:F4> = <var:N> ^ <nat:4> \land <var:F0> = <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule defined in Hoare techniques . Moving onward , we have the code \verb | <var:F1> := <var:F1> * <nat:3> ; | . This command moves $ \{ <var:V> = <var:N> \land <var:F1> = <var:N> \land <var:F2> = <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \land <var:F4> = <var:N> ^ <nat:4> \land <var:F0> = <nat:2> \} $ into the condition $ \{ <var:V> = <var:N> \land <var:F1> = <nat:3> * <var:N> \land <var:F2> = <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \land <var:F4> = <var:N> ^ <nat:4> \land <var:F0> = <nat:2> \} $ . This is deduced with the assignment law from standard Hoare logic . Advancing , we see the binding line \verb | <var:F2> := <var:F2> * <nat:1> ; | . This command advances the precondition $ \{ <var:V> = <var:N> \land <var:F1> = <nat:3> * <var:N> \land <var:F2> = <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \land <var:F4> = <var:N> ^ <nat:4> \land <var:F0> = <nat:2> \} $ toward the condition $ \{ <var:V> = <var:N> \land <var:F1> = <nat:3> * <var:N> \land <var:F2> = <nat:1> * <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \land <var:F4> = <var:N> ^ <nat:4> \land <var:F0> = <nat:2> \} $ . This is deduced using the assignment rule of usual Hoare logic . Jumping to the subsequent line in our series of commands , we see the environment update code giving $ <var:F4> * <nat:3> $ to $ <var:F4>$ . This statement takes the precondition $ \{ <var:V> = <var:N> \land <var:F1> = <nat:3> * <var:N> \land <var:F2> = <nat:1> * <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \land <var:F4> = <var:N> ^ <nat:4> \land <var:F0> = <nat:2> \} $ as $ \{ <var:V> = <var:N> \land <var:F1> = <nat:3> * <var:N> \land <var:F2> = <nat:1> * <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \land <var:F4> = <nat:3> * <var:N> ^ <nat:4> \land <var:F0> = <nat:2> \} $ . Moving on to the proceeding bit of code contained in our segment of code , we see the environment update statement \verb | <var:J> := <var:F4> | . This takes the precondition $ \{ <var:V> = <var:N> \land <var:F1> = <nat:3> * <var:N> \land <var:F2> = <nat:1> * <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \land <var:F4> = <nat:3> * <var:N> ^ <nat:4> \land <var:F0> = <nat:2> \} $ into $ \{ <var:V> = <var:N> \land <var:F1> = <nat:3> * <var:N> \land <var:F2> = <nat:1> * <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \land <var:F0> = <nat:2> \land <var:J> = <nat:3> * <var:N> ^ <nat:4> \} $ . Going forward , we see the variable binding statement binding $ <var:J> + <var:F2$ toward $ <var:J>$ . This forwards the precondition $ \{ <var:V> = <var:N> \land <var:F1> = <nat:3> * <var:N> \land <var:F2> = <nat:1> * <var:N> ^ <nat:2> \land <var:F3> = <var:N> ^ <nat:3> \land <var:F0> = <nat:2> \land <var:J> = <nat:3> * <var:N> ^ <nat:4> \} $ toward the postcondition $ \{ <var:V> = <var:N> \land <var:F1> = <nat:3> * <var:N> \land <var:F0> = <nat:2> \land <var:J> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:2> \} $ . Moving forward to the next step , we see the variable update statement \verb | <var:J> := <var:J> + <var:F1> | . This advances $ \{ <var:V> = <var:N> \land <var:F1> = <nat:3> * <var:N> \land <var:F0> = <nat:2> \land <var:J> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:2> \} $ as $ \{ <var:V> = <var:N> \land <var:F0> = <nat:2> \land <var:J> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> \} $ . After , the variable assignmet line \verb | <var:J> := <var:J> + <var:F0> | . This code forwards the precondition $ \{ <var:V> = <var:N> \land <var:F0> = <nat:2> \land <var:J> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> \} $ toward $ \{ <var:V> = <var:N> \land <var:J> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> \} $ . This is shown through the assignment inference rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <var:F4> : string := " <var:F4> " . Definition <def:poly> := <var:F1> := <var:V> ; <var:F2> := <var:F1> * <var:V> ; <var:F3> := <var:F2> * <var:V> ; <var:F4> := <var:F3> * <var:V> ; <var:F0> := <nat:2> ; <var:F1> := <var:F1> * <nat:3> ; <var:F2> := <var:F2> * <nat:1> ; <var:F4> := <var:F4> * <nat:3> ; <var:J> := <var:F4> <var:J> := <var:J> + <var:F2> <var:J> := <var:J> + <var:F1> <var:J> := <var:J> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:V> = <var:N> }} <def:poly> {{ <var:J> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:F1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:F1> = <var:N> /\ <var:F2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:F1> = <var:N> /\ <var:F2> = <var:N> ^ <nat:2> /\ <var:F3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:F1> = <var:N> /\ <var:F2> = <var:N> ^ <nat:2> /\ <var:F3> = <var:N> ^ <nat:3> /\ <var:F4> = <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:F1> = <var:N> /\ <var:F2> = <var:N> ^ <nat:2> /\ <var:F3> = <var:N> ^ <nat:3> /\ <var:F4> = <var:N> ^ <nat:4> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:F1> = <nat:3> * <var:N> /\ <var:F2> = <var:N> ^ <nat:2> /\ <var:F3> = <var:N> ^ <nat:3> /\ <var:F4> = <var:N> ^ <nat:4> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:F1> = <nat:3> * <var:N> /\ <var:F2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:F3> = <var:N> ^ <nat:3> /\ <var:F4> = <var:N> ^ <nat:4> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:F1> = <nat:3> * <var:N> /\ <var:F2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:F3> = <var:N> ^ <nat:3> /\ <var:F4> = <nat:3> * <var:N> ^ <nat:4> /\ <var:F0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:F1> = <nat:3> * <var:N> /\ <var:F2> = <nat:1> * <var:N> ^ <nat:2> /\ <var:F3> = <var:N> ^ <nat:3> /\ <var:F0> = <nat:2> /\ <var:J> = <nat:3> * <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:F1> = <nat:3> * <var:N> /\ <var:F0> = <nat:2> /\ <var:J> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:F0> = <nat:2> /\ <var:J> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:N> /\ <var:J> = <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 