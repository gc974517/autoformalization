\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:7> ; <var:i1> := <nat:8> ; <var:i1> := <var:i1> * <var:e> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:e> ; <var:i2> := <var:i2> * <var:e> ; <var:y> := <var:i2> ; <var:y> := <var:y> + <var:i1> ; <var:y> := <var:y> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> in \emph{Imp} . Allowing ( given all whole numbers $ <var:P> $ ) it to be that $ <var:e> = <var:P> $ prior to executing this code segment it must be that $ <var:y> = <nat:9> \cdot <var:P> ^ <nat:2> + <nat:8> \cdot <var:P> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning yields : \begin{eqnarray} \{ <var:e> = <var:P> \} \\ <var:i0> := <nat:7> ; \\ \{ <var:e> = <var:P> \land <var:i0> = <nat:7> \} \\ <var:i1> := <nat:8> ; \\ \{ <var:e> = <var:P> \land <var:i0> = <nat:7> \land <var:i1> = <nat:8> \} \\ <var:i1> := <var:i1> * <var:e> ; \\ \{ <var:e> = <var:P> \land <var:i0> = <nat:7> \land <var:i1> = <nat:8> \cdot <var:P> \} \\ <var:i2> := <nat:9> ; \\ \{ <var:e> = <var:P> \land <var:i0> = <nat:7> \land <var:i1> = <nat:8> \cdot <var:P> \land <var:i2> = <nat:9> \} \\ <var:i2> := <var:i2> * <var:e> ; \\ \{ <var:e> = <var:P> \land <var:i0> = <nat:7> \land <var:i1> = <nat:8> \cdot <var:P> \land <var:i2> = <nat:9> \cdot <var:P> \} \\ <var:i2> := <var:i2> * <var:e> ; \\ \{ <var:e> = <var:P> \land <var:i0> = <nat:7> \land <var:i1> = <nat:8> \cdot <var:P> \land <var:i2> = <nat:9> \cdot <var:P> ^ <nat:2> \} \\ <var:y> := <var:i2> ; \\ \{ <var:e> = <var:P> \land <var:i0> = <nat:7> \land <var:i1> = <nat:8> \cdot <var:P> \land <var:y> = <nat:9> \cdot <var:P> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:i1> ; \\ \{ <var:e> = <var:P> \land <var:i0> = <nat:7> \land <var:y> = <nat:9> \cdot <var:P> ^ <nat:2> + <nat:8> \cdot <var:P> \} \\ <var:y> := <var:y> + <var:i0> \\ \{ <var:e> = <var:P> \land <var:y> = <nat:9> \cdot <var:P> ^ <nat:2> + <nat:8> \cdot <var:P> + <nat:7> \} \end{eqnarray} As a result , the list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i0> := <nat:7> ; <var:i1> := <nat:8> ; <var:i1> := <var:i1> * <var:e> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:e> ; <var:i2> := <var:i2> * <var:e> ; <var:y> := <var:i2> ; <var:y> := <var:y> + <var:i1> ; <var:y> := <var:y> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:e> = <var:P> }} <def:poly> {{ <var:y> = <nat:9> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:8> * <var:P> /\ <var:i2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:8> * <var:P> /\ <var:i2> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:8> * <var:P> /\ <var:i2> = <nat:9> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:8> * <var:P> /\ <var:y> = <nat:9> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:i0> = <nat:7> /\ <var:y> = <nat:9> * <var:P> ^ <nat:2> + <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:P> /\ <var:y> = <nat:9> * <var:P> ^ <nat:2> + <nat:8> * <var:P> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 