\begin{document} \begin{theorem} Define a segment of code as \begin{verbatim} <var:N0> := <nat:2> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:i> ; <var:p> := <var:N1> ; <var:p> := <var:p> + <var:N0> \end{verbatim} Assuming given any natural coefficients $ <var:M> $ it to be that $ <var:i> = <var:M> $ prior to the execution of our set of instructions it follows that we see $ <var:p> = <nat:3> * <var:M> + <nat:2> $ after program executes . \end{theorem} \begin{proof} The course of logic for the segment of code can be given through usual Hoare logic . Moving on to the next step , we have \begin{eqnarray} \{ <var:i> = <var:M> \} \, <var:N0> := <nat:2> \, \{ <var:i> = <var:M> \land <var:N0> = <nat:2> \} \end{eqnarray} This is shown to be logically sound by the variable update inference rule in standard Hoare reasoning . Moving on to the upcoming commands seen in our list of commands , \begin{eqnarray} \{ <var:i> = <var:M> \} \, <var:N0> := <nat:2> \, \{ <var:i> = <var:M> \land <var:N0> = <nat:2> \} \\ \{ <var:i> = <var:M> \land <var:N0> = <nat:2> \} \, <var:N1> := <nat:3> \, \{ <var:i> = <var:M> \land <var:N0> = <nat:2> \land <var:N1> = <nat:3> \} \\ \{ <var:i> = <var:M> \land <var:N0> = <nat:2> \land <var:N1> = <nat:3> \} \, <var:N1> := <var:N1> * <var:i> \, \{ <var:i> = <var:M> \land <var:N0> = <nat:2> \land <var:N1> = <nat:3> * <var:M> \} \\ \{ <var:i> = <var:M> \land <var:N0> = <nat:2> \land <var:N1> = <nat:3> * <var:M> \} \, <var:p> := <var:N1> \, \{ <var:i> = <var:M> \land <var:N0> = <nat:2> \land <var:p> = <nat:3> * <var:M> \} \end{eqnarray} This is guaranteed by the variable binding rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:i> = <var:M> }} <var:N0> := <nat:2> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:i> ; <var:p> := <var:N1> ; <var:p> := <var:p> + <var:N0> {{ <var:p> = <nat:3> * <var:M> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:N0> = <nat:2> /\ <var:N1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:N0> = <nat:2> /\ <var:N1> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:N0> = <nat:2> /\ <var:p> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:p> = <nat:3> * <var:M> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 