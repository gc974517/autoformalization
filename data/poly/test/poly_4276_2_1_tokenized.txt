\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:1> ; <var:c> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:h> = <var:F> $ --- for $ <var:F> $ --- prior to running our series of instructions it holds that we have $ <var:c> = <nat:1> $ . \end{theorem} \begin{proof} The method of proof for the segment of code is shown through standard Hoare logic . Observing the subsequent statement contained in the series of instructions , the assignment statement binding $ <nat:1> $ as $ <var:G0>$ . This line redefines the condition $ \{ <var:h> = <var:F> \} $ toward the postcondition $ \{ <var:h> = <var:F> \land <var:G0> = <nat:1> \} $ . Jumping to the subsequent command in our code , we see the statement yielding $ <var:G0$ to $ <var:c>$ . This takes $ \{ <var:h> = <var:F> \land <var:G0> = <nat:1> \} $ toward the condition $ \{ <var:h> = <var:F> \land <var:c> = <nat:1> \} $ . This is guaranteed with the assignment inference rule of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:1> ; <var:c> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:h> = <var:F> }} <def:poly> {{ <var:c> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:F> /\ <var:c> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 