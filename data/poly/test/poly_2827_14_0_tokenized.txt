\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:3> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:A> ; <var:y2> := <nat:7> ; <var:y2> := <var:y2> * <var:A> ; <var:y2> := <var:y2> * <var:A> ; <var:y3> := <nat:1> ; <var:y3> := <var:y3> * <var:A> ; <var:y3> := <var:y3> * <var:A> ; <var:y3> := <var:y3> * <var:A> ; <var:n> := <var:y3> ; <var:n> := <var:n> + <var:y2> ; <var:n> := <var:n> + <var:y1> ; <var:n> := <var:n> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> . Given it to be that $ <var:A> = <var:V> $ ahead of the execution of this code , it holds that we see $ <var:n> = <nat:1> \times <var:V> ^ <nat:3> + <nat:7> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the code can be accomplished through typical Hoare techniques . Next , the statement \verb | <var:y0> := <nat:3> ; | . This statement moves $ \{ <var:A> = <var:V> \} $ toward the condition $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \} $ . This is rigorously given using the assignment inference rule in typical Hoare logic . Moving on to the upcoming command in the series of instructions , the binding code assigning $ <nat:4> $ into $ <var:y1>$ . This forwards the precondition $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \} $ as the condition $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \} $ . This is guaranteed with the assignment law in Hoare logic . Focusing on the proceeding line of code seen in our code segment , we see the variable assignmet code defining $ <var:y1> * <var:A> $ toward $ <var:y1>$ . This line takes $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \} $ into $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \} $ . This is deduced by the assignment inference rule given by typical Hoare techniques . Stepping forward , we have the environment update line \verb | <var:y2> := <nat:7> ; | . This transfers $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \} $ as the postcondition $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \} $ . Now , the binding command giving $ <var:y2> * <var:A> $ into $ <var:y2>$ . This code takes $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \} $ to the condition $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> \} $ . This is known to be sound through the assignment law defined by usual Hoare logic . Taking another step toward the subsequent command contained in our segment of code , we see the assignment command \verb | <var:y2> := <var:y2> * <var:A> ; | . This takes the precondition $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> \} $ toward $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> ^ <nat:2> \} $ . Moving forward to the next step , we see the assignment statement assigning $ <nat:1> $ as $ <var:y3>$ . This line advances $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> ^ <nat:2> \} $ as the condition $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> ^ <nat:2> \land <var:y3> = <nat:1> \} $ . This is shown to be logically sound with the assignment scheme given in usual Hoare reasoning . Honing in on the following bit of code contained in the set of commands , we see the variable assignmet statement binding $ <var:y3> * <var:A> $ to $ <var:y3>$ . This forwards $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> ^ <nat:2> \land <var:y3> = <nat:1> \} $ as $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:V> \} $ . This is sound through the assignment inference rule from standard Hoare logic . Jumping to the next piece of code seen in our code segment , the variable assignmet statement \verb | <var:y3> := <var:y3> * <var:A> ; | . This command transfers $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:V> \} $ toward the postcondition $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:V> ^ <nat:2> \} $ . This is given with the assignment law obtained from standard Hoare reasoning . Moving on , we see the variable binding code defining $ <var:y3> * <var:A> $ into $ <var:y3>$ . This command moves the condition $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:V> ^ <nat:2> \} $ as $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:V> ^ <nat:3> \} $ . Moving on to the next step , we see the environment update command \verb | <var:n> := <var:y3> ; | . This takes $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> ^ <nat:2> \land <var:y3> = <nat:1> \cdot <var:V> ^ <nat:3> \} $ toward $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> ^ <nat:2> \land <var:n> = <nat:1> \cdot <var:V> ^ <nat:3> \} $ . This is known to be sound with the assignment law given in typical Hoare reasoning . Immediately after , the variable update line \verb | <var:n> := <var:n> + <var:y2> ; | . This statement redefines the precondition $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:y2> = <nat:7> \cdot <var:V> ^ <nat:2> \land <var:n> = <nat:1> \cdot <var:V> ^ <nat:3> \} $ into the condition $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:n> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:7> \cdot <var:V> ^ <nat:2> \} $ . This is deduced using the assignment law of usual Hoare techniques . Looking at the proceeding line seen in the code segment , we have the environment update statement assigning $ <var:n> + <var:y1> $ toward $ <var:n>$ . This statement advances $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:y1> = <nat:4> \cdot <var:V> \land <var:n> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:7> \cdot <var:V> ^ <nat:2> \} $ to the postcondition $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:n> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:7> \cdot <var:V> ^ <nat:2> + <nat:4> \cdot <var:V> \} $ . Moving onward , we have the assignment command defining $ <var:n> + <var:y0$ toward $ <var:n>$ . This command advances the condition $ \{ <var:A> = <var:V> \land <var:y0> = <nat:3> \land <var:n> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:7> \cdot <var:V> ^ <nat:2> + <nat:4> \cdot <var:V> \} $ toward the postcondition $ \{ <var:A> = <var:V> \land <var:n> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:7> \cdot <var:V> ^ <nat:2> + <nat:4> \cdot <var:V> + <nat:3> \} $ . This is shown to be logically sound with the assignment scheme in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y0> := <nat:3> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:A> ; <var:y2> := <nat:7> ; <var:y2> := <var:y2> * <var:A> ; <var:y2> := <var:y2> * <var:A> ; <var:y3> := <nat:1> ; <var:y3> := <var:y3> * <var:A> ; <var:y3> := <var:y3> * <var:A> ; <var:y3> := <var:y3> * <var:A> ; <var:n> := <var:y3> ; <var:n> := <var:n> + <var:y2> ; <var:n> := <var:n> + <var:y1> ; <var:n> := <var:n> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:A> = <var:V> }} <def:poly> {{ <var:n> = <nat:1> * <var:V> ^ <nat:3> + <nat:7> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:4> * <var:V> /\ <var:y2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:4> * <var:V> /\ <var:y2> = <nat:7> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:4> * <var:V> /\ <var:y2> = <nat:7> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:4> * <var:V> /\ <var:y2> = <nat:7> * <var:V> ^ <nat:2> /\ <var:y3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:4> * <var:V> /\ <var:y2> = <nat:7> * <var:V> ^ <nat:2> /\ <var:y3> = <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:4> * <var:V> /\ <var:y2> = <nat:7> * <var:V> ^ <nat:2> /\ <var:y3> = <nat:1> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:4> * <var:V> /\ <var:y2> = <nat:7> * <var:V> ^ <nat:2> /\ <var:y3> = <nat:1> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:4> * <var:V> /\ <var:y2> = <nat:7> * <var:V> ^ <nat:2> /\ <var:n> = <nat:1> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:y0> = <nat:3> /\ <var:y1> = <nat:4> * <var:V> /\ <var:n> = <nat:1> * <var:V> ^ <nat:3> + <nat:7> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:y0> = <nat:3> /\ <var:n> = <nat:1> * <var:V> ^ <nat:3> + <nat:7> * <var:V> ^ <nat:2> + <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:V> /\ <var:n> = <nat:1> * <var:V> ^ <nat:3> + <nat:7> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 