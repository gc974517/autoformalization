\begin{document} \begin{theorem} We define the following segment of code such that \begin{verbatim} <var:M0> := <nat:4> ; <var:M1> := <nat:7> ; <var:M1> := <var:M1> * <var:p> ; <var:U> := <var:M1> ; <var:U> := <var:U> + <var:M0> \end{verbatim} Allowing it to hold that $ <var:p> = <var:s> $ for all positive integer coefficients $ <var:s> $ before executing our list of commands it must be that we have $ <var:U> = <nat:7> \cdot <var:s> + <nat:4> $ . \end{theorem} \begin{proof} See that the below decorated set of commands . \begin{eqnarray} \{ <var:p> = <var:s> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:p> = <var:s> \land <var:M0> = <nat:4> \} \\ <var:M1> := <nat:7> ; \\ \{ <var:p> = <var:s> \land <var:M0> = <nat:4> \land <var:M1> = <nat:7> \} \\ <var:M1> := <var:M1> * <var:p> ; \\ \{ <var:p> = <var:s> \land <var:M0> = <nat:4> \land <var:M1> = <nat:7> \cdot <var:s> \} \\ <var:U> := <var:M1> ; \\ \{ <var:p> = <var:s> \land <var:M0> = <nat:4> \land <var:U> = <nat:7> \cdot <var:s> \} \\ <var:U> := <var:U> + <var:M0> \\ \{ <var:p> = <var:s> \land <var:U> = <nat:7> \cdot <var:s> + <nat:4> \} \end{eqnarray} Applying typical Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:p> = <var:s> }} <var:M0> := <nat:4> ; <var:M1> := <nat:7> ; <var:M1> := <var:M1> * <var:p> ; <var:U> := <var:M1> ; <var:U> := <var:U> + <var:M0> {{ <var:U> = <nat:7> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:M0> = <nat:4> /\ <var:M1> = <nat:7> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:M0> = <nat:4> /\ <var:U> = <nat:7> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:U> = <nat:7> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 