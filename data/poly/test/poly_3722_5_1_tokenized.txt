\begin{document} \begin{theorem} Take a series of instructions : \begin{verbatim} <var:x1> := <var:i> ; <var:x0> := <nat:5> ; <var:x1> := <var:x1> * <nat:1> ; <var:G> := <var:x1> <var:G> := <var:G> + <var:x0> \end{verbatim} Assume that we have $ <var:i> = <var:W> $ ahead of executing the set of commands , it holds that $ <var:G> = <nat:1> * <var:W> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:W> \} \\ <var:x1> := <var:i> ; \\ \{ <var:i> = <var:W> \land <var:x1> = <var:W> \} \\ <var:x0> := <nat:5> ; \\ \{ <var:i> = <var:W> \land <var:x1> = <var:W> \land <var:x0> = <nat:5> \} \\ <var:x1> := <var:x1> * <nat:1> ; \\ \{ <var:i> = <var:W> \land <var:x1> = <nat:1> \times <var:W> \land <var:x0> = <nat:5> \} \\ <var:G> := <var:x1> \\ \{ <var:i> = <var:W> \land <var:x0> = <nat:5> \land <var:G> = <nat:1> \times <var:W> \} \\ <var:G> := <var:G> + <var:x0> \\ \{ <var:i> = <var:W> \land <var:G> = <nat:1> \times <var:W> + <nat:5> \} \end{eqnarray} The application of typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:i> = <var:W> }} <var:x1> := <var:i> ; <var:x0> := <nat:5> ; <var:x1> := <var:x1> * <nat:1> ; <var:G> := <var:x1> <var:G> := <var:G> + <var:x0> {{ <var:G> = <nat:1> * <var:W> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:x1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:x1> = <var:W> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:x1> = <nat:1> * <var:W> /\ <var:x0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:x0> = <nat:5> /\ <var:G> = <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:G> = <nat:1> * <var:W> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 