\begin{document} \begin{theorem} Take a set of commands such that \begin{verbatim} <var:I0> := <nat:1> ; <var:K> := <var:I0> \end{verbatim} Assume it to hold that $ <var:C> = <var:Z> $ ahead of running this program it holds that we have $ <var:K> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of commands can be accomplished by usual Hoare techniques . Next , we see \verb | { <var:C> = <var:Z> } <var:I0> := <nat:1> { <var:C> = <var:Z> \land <var:I0> = <nat:1> } | . This is given using the binding rule of usual Hoare logic . Advancing to the upcoming piece of code in the code segment , we see \verb | { <var:C> = <var:Z> } <var:I0> := <nat:1> { <var:C> = <var:Z> \land <var:I0> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:C> = <var:Z> }} <var:I0> := <nat:1> ; <var:K> := <var:I0> {{ <var:K> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Z> /\ <var:K> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 