\begin{document} \begin{theorem} Take the following series of commands : \begin{verbatim} <var:k1> := <var:Z> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:6> ; <var:x> := <var:k1> <var:x> := <var:x> + <var:k0> \end{verbatim} Allowing $ <var:Z> = <var:Y> $ ahead of running the segment of code , it holds that we have $ <var:x> = <nat:6> \times <var:Y> + <nat:4> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques gives us : \begin{eqnarray} \{ <var:Z> = <var:Y> \} \\ <var:k1> := <var:Z> ; \\ \{ <var:Z> = <var:Y> \land <var:k1> = <var:Y> \} \\ <var:k0> := <nat:4> ; \\ \{ <var:Z> = <var:Y> \land <var:k1> = <var:Y> \land <var:k0> = <nat:4> \} \\ <var:k1> := <var:k1> * <nat:6> ; \\ \{ <var:Z> = <var:Y> \land <var:k1> = <nat:6> \cdot <var:Y> \land <var:k0> = <nat:4> \} \\ <var:x> := <var:k1> \\ \{ <var:Z> = <var:Y> \land <var:k0> = <nat:4> \land <var:x> = <nat:6> \cdot <var:Y> \} \\ <var:x> := <var:x> + <var:k0> \\ \{ <var:Z> = <var:Y> \land <var:x> = <nat:6> \cdot <var:Y> + <nat:4> \} \end{eqnarray} Therefore , our series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:Z> = <var:Y> }} <var:k1> := <var:Z> ; <var:k0> := <nat:4> ; <var:k1> := <var:k1> * <nat:6> ; <var:x> := <var:k1> <var:x> := <var:x> + <var:k0> {{ <var:x> = <nat:6> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:k1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:k1> = <var:Y> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:k1> = <nat:6> * <var:Y> /\ <var:k0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:k0> = <nat:4> /\ <var:x> = <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:Y> /\ <var:x> = <nat:6> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 