\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k1> := <var:m> ; <var:k2> := <var:k1> * <var:m> ; <var:k3> := <var:k2> * <var:m> ; <var:k4> := <var:k3> * <var:m> ; <var:k0> := <nat:3> ; <var:k2> := <var:k2> * <nat:4> ; <var:k3> := <var:k3> * <nat:2> ; <var:k4> := <var:k4> * <nat:3> ; <var:s> := <var:k4> <var:s> := <var:s> + <var:k3> <var:s> := <var:s> + <var:k2> <var:s> := <var:s> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Allow that we have $ <var:m> = <var:N> $ --- given $ <var:N> $ --- prior to running this series of commands it holds that we have $ <var:s> = <nat:3> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} Using usual Hoare logic produces : \begin{eqnarray} \{ <var:m> = <var:N> \} \\ <var:k1> := <var:m> ; \\ \{ <var:m> = <var:N> \land <var:k1> = <var:N> \} \\ <var:k2> := <var:k1> * <var:m> ; \\ \{ <var:m> = <var:N> \land <var:k1> = <var:N> \land <var:k2> = <var:N> ^ <nat:2> \} \\ <var:k3> := <var:k2> * <var:m> ; \\ \{ <var:m> = <var:N> \land <var:k1> = <var:N> \land <var:k2> = <var:N> ^ <nat:2> \land <var:k3> = <var:N> ^ <nat:3> \} \\ <var:k4> := <var:k3> * <var:m> ; \\ \{ <var:m> = <var:N> \land <var:k1> = <var:N> \land <var:k2> = <var:N> ^ <nat:2> \land <var:k3> = <var:N> ^ <nat:3> \land <var:k4> = <var:N> ^ <nat:4> \} \\ <var:k0> := <nat:3> ; \\ \{ <var:m> = <var:N> \land <var:k1> = <var:N> \land <var:k2> = <var:N> ^ <nat:2> \land <var:k3> = <var:N> ^ <nat:3> \land <var:k4> = <var:N> ^ <nat:4> \land <var:k0> = <nat:3> \} \\ <var:k2> := <var:k2> * <nat:4> ; \\ \{ <var:m> = <var:N> \land <var:k1> = <var:N> \land <var:k2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:k3> = <var:N> ^ <nat:3> \land <var:k4> = <var:N> ^ <nat:4> \land <var:k0> = <nat:3> \} \\ <var:k3> := <var:k3> * <nat:2> ; \\ \{ <var:m> = <var:N> \land <var:k1> = <var:N> \land <var:k2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:N> ^ <nat:3> \land <var:k4> = <var:N> ^ <nat:4> \land <var:k0> = <nat:3> \} \end{eqnarray} Advancing executing the list of commands returns : \begin{eqnarray} <var:k4> := <var:k4> * <nat:3> ; \\ \{ <var:m> = <var:N> \land <var:k1> = <var:N> \land <var:k2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:N> ^ <nat:3> \land <var:k4> = <nat:3> \times <var:N> ^ <nat:4> \land <var:k0> = <nat:3> \} \\ <var:s> := <var:k4> \\ \{ <var:m> = <var:N> \land <var:k1> = <var:N> \land <var:k2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:k3> = <nat:2> \times <var:N> ^ <nat:3> \land <var:k0> = <nat:3> \land <var:s> = <nat:3> \times <var:N> ^ <nat:4> \} \\ <var:s> := <var:s> + <var:k3> \\ \{ <var:m> = <var:N> \land <var:k1> = <var:N> \land <var:k2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:k0> = <nat:3> \land <var:s> = <nat:3> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> \} \\ <var:s> := <var:s> + <var:k2> \\ \{ <var:m> = <var:N> \land <var:k1> = <var:N> \land <var:k0> = <nat:3> \land <var:s> = <nat:3> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> \} \end{eqnarray} Advancing interpreting our list of instructions gives us : \begin{eqnarray} <var:s> := <var:s> + <var:k0> \\ \{ <var:m> = <var:N> \land <var:s> = <nat:3> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:3> \} \end{eqnarray} Considering the above , this set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <var:k4> : string := " <var:k4> " . Definition <def:poly> := <var:k1> := <var:m> ; <var:k2> := <var:k1> * <var:m> ; <var:k3> := <var:k2> * <var:m> ; <var:k4> := <var:k3> * <var:m> ; <var:k0> := <nat:3> ; <var:k2> := <var:k2> * <nat:4> ; <var:k3> := <var:k3> * <nat:2> ; <var:k4> := <var:k4> * <nat:3> ; <var:s> := <var:k4> <var:s> := <var:s> + <var:k3> <var:s> := <var:s> + <var:k2> <var:s> := <var:s> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:m> = <var:N> }} <def:poly> {{ <var:s> = <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:k1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:k1> = <var:N> /\ <var:k2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:k1> = <var:N> /\ <var:k2> = <var:N> ^ <nat:2> /\ <var:k3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:k1> = <var:N> /\ <var:k2> = <var:N> ^ <nat:2> /\ <var:k3> = <var:N> ^ <nat:3> /\ <var:k4> = <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:k1> = <var:N> /\ <var:k2> = <var:N> ^ <nat:2> /\ <var:k3> = <var:N> ^ <nat:3> /\ <var:k4> = <var:N> ^ <nat:4> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:k1> = <var:N> /\ <var:k2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:k3> = <var:N> ^ <nat:3> /\ <var:k4> = <var:N> ^ <nat:4> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:k1> = <var:N> /\ <var:k2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:k3> = <nat:2> * <var:N> ^ <nat:3> /\ <var:k4> = <var:N> ^ <nat:4> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:k1> = <var:N> /\ <var:k2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:k3> = <nat:2> * <var:N> ^ <nat:3> /\ <var:k4> = <nat:3> * <var:N> ^ <nat:4> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:k1> = <var:N> /\ <var:k2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:k3> = <nat:2> * <var:N> ^ <nat:3> /\ <var:k0> = <nat:3> /\ <var:s> = <nat:3> * <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:k1> = <var:N> /\ <var:k2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:k0> = <nat:3> /\ <var:s> = <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:k1> = <var:N> /\ <var:k0> = <nat:3> /\ <var:s> = <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:N> /\ <var:s> = <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 