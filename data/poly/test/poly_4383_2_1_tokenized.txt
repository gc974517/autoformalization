\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:3> ; <var:T> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> in \emph{Imp} . Assume it to be that $ <var:C> = <var:I> $ ahead of running this program it holds that $ <var:T> = <nat:3> $ when program finishes . \end{theorem} \begin{proof} The application of Hoare techniques yields : \begin{eqnarray} \{ <var:C> = <var:I> \} \\ <var:x0> := <nat:3> ; \\ \{ <var:C> = <var:I> \land <var:x0> = <nat:3> \} \\ <var:T> := <var:x0> \\ \{ <var:C> = <var:I> \land <var:T> = <nat:3> \} \end{eqnarray} Therefore , this list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:3> ; <var:T> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:C> = <var:I> }} <def:poly> {{ <var:T> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:I> /\ <var:T> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 