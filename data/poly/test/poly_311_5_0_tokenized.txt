\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:7> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:U> ; <var:E> := <var:e1> ; <var:E> := <var:E> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Take a program <def:poly> . Allowing it to be that $ <var:U> = <var:F> $ --- for any integers $ <var:F> $ --- prior to the execution of this set of instructions then we see $ <var:E> = <nat:5> \cdot <var:F> + <nat:7> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions is shown by standard Hoare reasoning . Further , we have the assignment command defining $ <nat:7> $ as $ <var:e0>$ . This statement moves $ \{ <var:U> = <var:F> \} $ as the condition $ \{ <var:U> = <var:F> \land <var:e0> = <nat:7> \} $ . This is known to be sound with the assignment rule from typical Hoare logic . Immediately following , we have the line yielding $ <nat:5> $ into $ <var:e1>$ . This transfers the condition $ \{ <var:U> = <var:F> \land <var:e0> = <nat:7> \} $ into the postcondition $ \{ <var:U> = <var:F> \land <var:e0> = <nat:7> \land <var:e1> = <nat:5> \} $ . Moving onward , we have the variable assignmet command binding $ <var:e1> * <var:U> $ to $ <var:e1>$ . This command moves the condition $ \{ <var:U> = <var:F> \land <var:e0> = <nat:7> \land <var:e1> = <nat:5> \} $ into the postcondition $ \{ <var:U> = <var:F> \land <var:e0> = <nat:7> \land <var:e1> = <nat:5> \times <var:F> \} $ . Focusing on the subsequent statement seen in the code segment , the variable assignmet command binding $ <var:e1> $ to $ <var:E>$ . This statement takes the condition $ \{ <var:U> = <var:F> \land <var:e0> = <nat:7> \land <var:e1> = <nat:5> \times <var:F> \} $ as the condition $ \{ <var:U> = <var:F> \land <var:e0> = <nat:7> \land <var:E> = <nat:5> \times <var:F> \} $ . This is known to be sound through the assignment law defined in standard Hoare logic . Stepping forward , the line \verb | <var:E> := <var:E> + <var:e0> | . This line forwards $ \{ <var:U> = <var:F> \land <var:e0> = <nat:7> \land <var:E> = <nat:5> \times <var:F> \} $ toward the postcondition $ \{ <var:U> = <var:F> \land <var:E> = <nat:5> \times <var:F> + <nat:7> \} $ . This is rigorously given through the assignment scheme in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e0> := <nat:7> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:U> ; <var:E> := <var:e1> ; <var:E> := <var:E> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:U> = <var:F> }} <def:poly> {{ <var:E> = <nat:5> * <var:F> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:e0> = <nat:7> /\ <var:E> = <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:F> /\ <var:E> = <nat:5> * <var:F> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 