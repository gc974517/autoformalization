\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} : \begin{verbatim} <var:d0> := <nat:7> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:K> ; <var:p> := <var:d1> ; <var:p> := <var:p> + <var:d0> \end{verbatim} Given that we have $ <var:K> = <var:X> $ prior to executing the code segment it follows that we see $ <var:p> = <nat:2> \times <var:X> + <nat:7> $ after code exits . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment is given with Hoare logic . After , we have the variable update line \verb | <var:d0> := <nat:7> ; | . This line moves $ \{ <var:K> = <var:X> \} $ into the condition $ \{ <var:K> = <var:X> \land <var:d0> = <nat:7> \} $ . This is guaranteed using the assignment rule found in typical Hoare logic . Keeping momentum , the variable binding statement yielding $ <nat:2> $ as $ <var:d1>$ . This transfers the precondition $ \{ <var:K> = <var:X> \land <var:d0> = <nat:7> \} $ toward $ \{ <var:K> = <var:X> \land <var:d0> = <nat:7> \land <var:d1> = <nat:2> \} $ . This is shown with the assignment inference rule defined in usual Hoare techniques . Keeping momentum , we have the environment update code \verb | <var:d1> := <var:d1> * <var:K> ; | . This statement redefines $ \{ <var:K> = <var:X> \land <var:d0> = <nat:7> \land <var:d1> = <nat:2> \} $ as $ \{ <var:K> = <var:X> \land <var:d0> = <nat:7> \land <var:d1> = <nat:2> \cdot <var:X> \} $ . Shifting focus toward the following bit of code contained in our series of commands , we have the assignment code defining $ <var:d1> $ into $ <var:p>$ . This forwards $ \{ <var:K> = <var:X> \land <var:d0> = <nat:7> \land <var:d1> = <nat:2> \cdot <var:X> \} $ into the condition $ \{ <var:K> = <var:X> \land <var:d0> = <nat:7> \land <var:p> = <nat:2> \cdot <var:X> \} $ . This is sound by the assignment law found in Hoare logic . Moving on , we see the variable update statement \verb | <var:p> := <var:p> + <var:d0> | . This moves the precondition $ \{ <var:K> = <var:X> \land <var:d0> = <nat:7> \land <var:p> = <nat:2> \cdot <var:X> \} $ as the postcondition $ \{ <var:K> = <var:X> \land <var:p> = <nat:2> \cdot <var:X> + <nat:7> \} $ . This is shown by the assignment rule obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:K> = <var:X> }} <var:d0> := <nat:7> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:K> ; <var:p> := <var:d1> ; <var:p> := <var:p> + <var:d0> {{ <var:p> = <nat:2> * <var:X> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:d0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:d0> = <nat:7> /\ <var:d1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:d0> = <nat:7> /\ <var:d1> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:d0> = <nat:7> /\ <var:p> = <nat:2> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:X> /\ <var:p> = <nat:2> * <var:X> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 