\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:6> ; <var:r1> := <nat:9> ; <var:r1> := <var:r1> * <var:Y> ; <var:r2> := <nat:9> ; <var:r2> := <var:r2> * <var:Y> ; <var:r2> := <var:r2> * <var:Y> ; <var:I> := <var:r2> ; <var:I> := <var:I> + <var:r1> ; <var:I> := <var:I> + <var:r0> \end{verbatim} Assume $ <var:Y> = <var:J> $ prior to executing this segment of code it holds that we see $ <var:I> = <nat:9> \times <var:J> ^ <nat:2> + <nat:9> \times <var:J> + <nat:6> $ when segment of code has finished executing . \end{theorem} \begin{proof} The flow of logic for the series of instructions is demonstrated using typical Hoare reasoning . Jumping to the proceeding commands contained in our code segment , we have \begin{eqnarray} \{ <var:Y> = <var:J> \} \, <var:r0> := <nat:6> \, \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \} \\ \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \} \, <var:r1> := <nat:9> \, \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> \} \\ \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> \} \, <var:r1> := <var:r1> * <var:Y> \, \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> \times <var:J> \} \\ \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> \times <var:J> \} \, <var:r2> := <nat:9> \, \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> \times <var:J> \land <var:r2> = <nat:9> \} \\ \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> \times <var:J> \land <var:r2> = <nat:9> \} \, <var:r2> := <var:r2> * <var:Y> \, \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> \times <var:J> \land <var:r2> = <nat:9> \times <var:J> \} \end{eqnarray} This is given using the variable binding scheme obtained from usual Hoare reasoning . Taking a look at the upcoming lines of codein the segment of code , we have \begin{eqnarray} \{ <var:Y> = <var:J> \} \, <var:r0> := <nat:6> \, \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \} \\ \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \} \, <var:r1> := <nat:9> \, \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> \} \\ \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> \} \, <var:r1> := <var:r1> * <var:Y> \, \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> \times <var:J> \} \\ \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> \times <var:J> \} \, <var:r2> := <nat:9> \, \{ <var:Y> = <var:J> \land <var:r0> = <nat:6> \land <var:r1> = <nat:9> \times <var:J> \land <var:r2> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:Y> = <var:J> }} <var:r0> := <nat:6> ; <var:r1> := <nat:9> ; <var:r1> := <var:r1> * <var:Y> ; <var:r2> := <nat:9> ; <var:r2> := <var:r2> * <var:Y> ; <var:r2> := <var:r2> * <var:Y> ; <var:I> := <var:r2> ; <var:I> := <var:I> + <var:r1> ; <var:I> := <var:I> + <var:r0> {{ <var:I> = <nat:9> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:r0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:9> * <var:J> /\ <var:r2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:9> * <var:J> /\ <var:r2> = <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:9> * <var:J> /\ <var:r2> = <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:r0> = <nat:6> /\ <var:r1> = <nat:9> * <var:J> /\ <var:I> = <nat:9> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:r0> = <nat:6> /\ <var:I> = <nat:9> * <var:J> ^ <nat:2> + <nat:9> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:J> /\ <var:I> = <nat:9> * <var:J> ^ <nat:2> + <nat:9> * <var:J> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 