\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:Y0> := <nat:2> ; <var:z> := <var:Y0> \end{verbatim} Allowing given any positive numbers $ <var:P> $ that $ <var:n> = <var:P> $ ahead of interpreting the segment of code it holds that we see $ <var:z> = <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands is shown by typical Hoare reasoning . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:P> \} & <var:Y0> := <nat:2> & \{ <var:n> = <var:P> \land <var:Y0> = <nat:2> \} \\ \{ <var:n> = <var:P> \land <var:Y0> = <nat:2> \} & <var:z> := <var:Y0& \{ <var:n> = <var:P> \land <var:z> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:n> = <var:P> }} <var:Y0> := <nat:2> ; <var:z> := <var:Y0> {{ <var:z> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:P> /\ <var:z> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 