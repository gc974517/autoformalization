\begin{document} \begin{theorem} Consider a segment of code as \begin{verbatim} <var:t> := <nat:1> ; <var:t> := <nat:3> + <var:t> * <var:O> ; <var:t> := <nat:1> + <var:t> * <var:O> ; <var:t> := <nat:4> + <var:t> * <var:O> \end{verbatim} Given that $ <var:O> = <var:l> $ prior to evaluating this series of commands it holds that $ <var:t> = <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for our list of instructions is done using typical Hoare logic . Looking at the subsequent bits of codein the code segment , \[ \begin{tabular} {rcl} \{ <var:O> = <var:l> \} & <var:t> := <nat:1> & \{ <var:O> = <var:l> \land <var:t> = <nat:1> \} \\ \{ <var:O> = <var:l> \land <var:t> = <nat:1> \} & <var:t> := <nat:3> + <var:t> * <var:O> & \{ <var:O> = <var:l> \land <var:t> = <nat:1> \cdot <var:l> + <nat:3> \} \end{tabular} This is known to be sound by the law given by Hoare logic . Further , we have \[ \begin{tabular} {rcl} \{ <var:O> = <var:l> \} & <var:t> := <nat:1> & \{ <var:O> = <var:l> \land <var:t> = <nat:1> \} \\ \{ <var:O> = <var:l> \land <var:t> = <nat:1> \} & <var:t> := <nat:3> + <var:t> * <var:O> & \{ <var:O> = <var:l> \land <var:t> = <nat:1> \cdot <var:l> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:O> = <var:l> }} <var:t> := <nat:1> ; <var:t> := <nat:3> + <var:t> * <var:O> ; <var:t> := <nat:1> + <var:t> * <var:O> ; <var:t> := <nat:4> + <var:t> * <var:O> {{ <var:t> = <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:t> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:t> = <nat:1> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:t> = <nat:1> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:t> = <nat:1> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 