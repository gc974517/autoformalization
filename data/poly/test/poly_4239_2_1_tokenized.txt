\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:4> ; <var:B> := <var:c0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:S> = <var:a> $ letting natural numbers $ <var:a> $ before the evaluation of the series of commands it holds that we see $ <var:B> = <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this set of commands can be seen by standard Hoare reasoning . Looking at the following command found in the code , we see the variable assignmet code \verb | <var:c0> := <nat:4> ; | . This redefines the precondition $ \{ <var:S> = <var:a> \} $ as the postcondition $ \{ <var:S> = <var:a> \land <var:c0> = <nat:4> \} $ . This is given by the assignment law in Hoare reasoning . Advancing , we see the variable binding statement giving $ <var:c0$ as $ <var:B>$ . This line advances $ \{ <var:S> = <var:a> \land <var:c0> = <nat:4> \} $ toward the condition $ \{ <var:S> = <var:a> \land <var:B> = <nat:4> \} $ . This is ensured through the assignment inference rule found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <def:poly> := <var:c0> := <nat:4> ; <var:B> := <var:c0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:S> = <var:a> }} <def:poly> {{ <var:B> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:a> /\ <var:B> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 