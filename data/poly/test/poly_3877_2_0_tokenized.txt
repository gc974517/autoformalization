\begin{document} \begin{theorem} Take a code segment : \begin{verbatim} <var:w0> := <nat:1> ; <var:h> := <var:w0> \end{verbatim} Given $ <var:r> = <var:W> $ ahead of the execution of this code segment then we have $ <var:h> = <nat:1> $ after code is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for this series of commands is given by typical Hoare reasoning . Immediately after , we see the command binding $ <nat:1> $ to $ <var:w0>$ . This forwards the condition $ \{ <var:r> = <var:W> \} $ into $ \{ <var:r> = <var:W> \land <var:w0> = <nat:1> \} $ . This is rigorously given by the assignment inference rule defined in usual Hoare logic . Next , we see the variable binding command giving $ <var:w0$ as $ <var:h>$ . This command moves the precondition $ \{ <var:r> = <var:W> \land <var:w0> = <nat:1> \} $ toward $ \{ <var:r> = <var:W> \land <var:h> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:r> = <var:W> }} <var:w0> := <nat:1> ; <var:h> := <var:w0> {{ <var:h> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:h> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 