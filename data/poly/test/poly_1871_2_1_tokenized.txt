\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:u0> := <nat:8> ; <var:P> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Allow , given some natural coefficients $ <var:G> $ , it to be that $ <var:T> = <var:G> $ ahead of evaluating this set of commands it follows that we see $ <var:P> = <nat:8> $ after list of instructions executes . \end{theorem} \begin{proof} The argument for the set of instructions can be seen using the below decorated code . \begin{eqnarray} \{ <var:T> = <var:G> \} \\ <var:u0> := <nat:8> ; \\ \{ <var:T> = <var:G> \land <var:u0> = <nat:8> \} \\ <var:P> := <var:u0> \\ \{ <var:T> = <var:G> \land <var:P> = <nat:8> \} \end{eqnarray} Using typical Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:8> ; <var:P> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:T> = <var:G> }} <def:poly> {{ <var:P> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:u0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:P> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 