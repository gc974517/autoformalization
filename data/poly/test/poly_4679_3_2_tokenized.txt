\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as follows \begin{verbatim} <var:Q> := <nat:3> ; <var:Q> := <var:Q> * <var:p> ; <var:Q> := <nat:3> + <var:Q> * <var:p> \end{verbatim} Assuming it to hold that $ <var:p> = <var:U> $ , assuming some $ <var:U> \in \mathbb{N} $ , prior to interpreting our list of commands , it follows that $ <var:Q> = <nat:3> \times <var:U> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our code segment is accomplished through this decorated program . \begin{eqnarray} \{ <var:p> = <var:U> \} \\ <var:Q> := <nat:3> ; \\ \{ <var:p> = <var:U> \land <var:Q> = <nat:3> \} \\ <var:Q> := <var:Q> * <var:p> ; \\ \{ <var:p> = <var:U> \land <var:Q> = <nat:3> \cdot <var:U> + \} \\ <var:Q> := <nat:3> + <var:Q> * <var:p> \\ \{ <var:p> = <var:U> \land <var:Q> = <nat:3> \cdot <var:U> ^ <nat:2> + <nat:3> \} \end{eqnarray} Utilizing Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:p> = <var:U> }} <var:Q> := <nat:3> ; <var:Q> := <var:Q> * <var:p> ; <var:Q> := <nat:3> + <var:Q> * <var:p> {{ <var:Q> = <nat:3> * <var:U> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:U> /\ <var:Q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:U> /\ <var:Q> = <nat:3> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:U> /\ <var:Q> = <nat:3> * <var:U> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 