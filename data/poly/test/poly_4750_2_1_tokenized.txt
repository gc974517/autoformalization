\begin{document} \begin{theorem} We define a set of instructions such that \begin{verbatim} <var:m0> := <nat:7> ; <var:I> := <var:m0> \end{verbatim} Allowing , given some natural coefficients $ <var:W> $ , that $ <var:R> = <var:W> $ before interpreting the set of commands , then we see $ <var:I> = <nat:7> $ when segment of code has finished . \end{theorem} \begin{proof} The argument for this code segment is clear with standard Hoare logic . Following , \verb | { <var:R> = <var:W> } <var:m0> := <nat:7> { <var:R> = <var:W> \land <var:m0> = <nat:7> } | . Focusing on the upcoming bit of code found in our set of instructions , \verb | { <var:R> = <var:W> } <var:m0> := <nat:7> { <var:R> = <var:W> \land <var:m0> = <nat:7> } | . This is shown to be logically sound by the variable update inference rule given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:R> = <var:W> }} <var:m0> := <nat:7> ; <var:I> := <var:m0> {{ <var:I> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:W> /\ <var:I> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 