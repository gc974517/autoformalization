\begin{document} \begin{theorem} Take a segment of code as \begin{verbatim} <var:c1> := <var:M> ; <var:c2> := <var:c1> * <var:M> ; <var:c3> := <var:c2> * <var:M> ; <var:c0> := <nat:5> ; <var:c1> := <var:c1> * <nat:8> ; <var:c2> := <var:c2> * <nat:6> ; <var:c3> := <var:c3> * <nat:3> ; <var:O> := <var:c3> <var:O> := <var:O> + <var:c2> <var:O> := <var:O> + <var:c1> <var:O> := <var:O> + <var:c0> \end{verbatim} Assuming $ <var:M> = <var:s> $ for any positive numbers $ <var:s> $ before evaluating our set of instructions it must be that we see $ <var:O> = <nat:3> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:5> $ . \end{theorem} \begin{proof} The argument for our series of commands can be done through standard Hoare logic . Immediately following , we see \begin{verbatim} { <var:M> = <var:s> } <var:c1> := <var:M> { <var:M> = <var:s> \land <var:c1> = <var:s> } \end{verbatim} This is sound using the variable update rule in Hoare techniques . Jumping to the next lines of codeseen in the set of commands , we have \begin{verbatim} { <var:M> = <var:s> } <var:c1> := <var:M> { <var:M> = <var:s> \land <var:c1> = <var:s> } { <var:M> = <var:s> \land <var:c1> = <var:s> } <var:c2> := <var:c1> * <var:M> { <var:M> = <var:s> \land <var:c1> = <var:s> \land <var:c2> = <var:s> ^ <nat:2> } { <var:M> = <var:s> \land <var:c1> = <var:s> \land <var:c2> = <var:s> ^ <nat:2> } <var:c3> := <var:c2> * <var:M> { <var:M> = <var:s> \land <var:c1> = <var:s> \land <var:c2> = <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> } { <var:M> = <var:s> \land <var:c1> = <var:s> \land <var:c2> = <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> } <var:c0> := <nat:5> { <var:M> = <var:s> \land <var:c1> = <var:s> \land <var:c2> = <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \land <var:c0> = <nat:5> } { <var:M> = <var:s> \land <var:c1> = <var:s> \land <var:c2> = <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \land <var:c0> = <nat:5> } <var:c1> := <var:c1> * <nat:8> { <var:M> = <var:s> \land <var:c1> = <nat:8> * <var:s> \land <var:c2> = <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \land <var:c0> = <nat:5> } { <var:M> = <var:s> \land <var:c1> = <nat:8> * <var:s> \land <var:c2> = <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \land <var:c0> = <nat:5> } <var:c2> := <var:c2> * <nat:6> { <var:M> = <var:s> \land <var:c1> = <nat:8> * <var:s> \land <var:c2> = <nat:6> * <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \land <var:c0> = <nat:5> } { <var:M> = <var:s> \land <var:c1> = <nat:8> * <var:s> \land <var:c2> = <nat:6> * <var:s> ^ <nat:2> \land <var:c3> = <var:s> ^ <nat:3> \land <var:c0> = <nat:5> } <var:c3> := <var:c3> * <nat:3> { <var:M> = <var:s> \land <var:c1> = <nat:8> * <var:s> \land <var:c2> = <nat:6> * <var:s> ^ <nat:2> \land <var:c3> = <nat:3> * <var:s> ^ <nat:3> \land <var:c0> = <nat:5> } { <var:M> = <var:s> \land <var:c1> = <nat:8> * <var:s> \land <var:c2> = <nat:6> * <var:s> ^ <nat:2> \land <var:c3> = <nat:3> * <var:s> ^ <nat:3> \land <var:c0> = <nat:5> } <var:O> := <var:c3{ <var:M> = <var:s> \land <var:c1> = <nat:8> * <var:s> \land <var:c2> = <nat:6> * <var:s> ^ <nat:2> \land <var:c0> = <nat:5> \land <var:O> = <nat:3> * <var:s> ^ <nat:3> } { <var:M> = <var:s> \land <var:c1> = <nat:8> * <var:s> \land <var:c2> = <nat:6> * <var:s> ^ <nat:2> \land <var:c0> = <nat:5> \land <var:O> = <nat:3> * <var:s> ^ <nat:3> } <var:O> := <var:O> + <var:c2{ <var:M> = <var:s> \land <var:c1> = <nat:8> * <var:s> \land <var:c0> = <nat:5> \land <var:O> = <nat:3> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> } \end{verbatim} This is guaranteed through the binding rule in usual Hoare techniques . Following , \begin{verbatim} { <var:M> = <var:s> } <var:c1> := <var:M> { <var:M> = <var:s> \land <var:c1> = <var:s> } \end{verbatim} This is deduced through the environment update rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:M> = <var:s> }} <var:c1> := <var:M> ; <var:c2> := <var:c1> * <var:M> ; <var:c3> := <var:c2> * <var:M> ; <var:c0> := <nat:5> ; <var:c1> := <var:c1> * <nat:8> ; <var:c2> := <var:c2> * <nat:6> ; <var:c3> := <var:c3> * <nat:3> ; <var:O> := <var:c3> <var:O> := <var:O> + <var:c2> <var:O> := <var:O> + <var:c1> <var:O> := <var:O> + <var:c0> {{ <var:O> = <nat:3> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c1> = <var:s> /\ <var:c2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c1> = <var:s> /\ <var:c2> = <var:s> ^ <nat:2> /\ <var:c3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c1> = <var:s> /\ <var:c2> = <var:s> ^ <nat:2> /\ <var:c3> = <var:s> ^ <nat:3> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c1> = <nat:8> * <var:s> /\ <var:c2> = <var:s> ^ <nat:2> /\ <var:c3> = <var:s> ^ <nat:3> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c1> = <nat:8> * <var:s> /\ <var:c2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:c3> = <var:s> ^ <nat:3> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c1> = <nat:8> * <var:s> /\ <var:c2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:c3> = <nat:3> * <var:s> ^ <nat:3> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c1> = <nat:8> * <var:s> /\ <var:c2> = <nat:6> * <var:s> ^ <nat:2> /\ <var:c0> = <nat:5> /\ <var:O> = <nat:3> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c1> = <nat:8> * <var:s> /\ <var:c0> = <nat:5> /\ <var:O> = <nat:3> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:c0> = <nat:5> /\ <var:O> = <nat:3> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> + <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:s> /\ <var:O> = <nat:3> * <var:s> ^ <nat:3> + <nat:6> * <var:s> ^ <nat:2> + <nat:8> * <var:s> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 