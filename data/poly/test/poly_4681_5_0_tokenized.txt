\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:4> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:F> ; <var:K> := <var:P1> ; <var:K> := <var:K> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:F> = <var:N> $ ( for $ <var:N> \in \mathbb{N} $ ) before interpreting the set of instructions , it must be that $ <var:K> = <nat:4> * <var:N> + <nat:4> $ . \end{theorem} \begin{proof} Observe this decorated code . \begin{eqnarray} \{ <var:F> = <var:N> \} \\ <var:P0> := <nat:4> ; \\ \{ <var:F> = <var:N> \land <var:P0> = <nat:4> \} \end{eqnarray} Furthering evaluating our series of instructions returns : \begin{eqnarray} <var:P1> := <nat:4> ; \\ \{ <var:F> = <var:N> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> \} \\ <var:P1> := <var:P1> * <var:F> ; \\ \{ <var:F> = <var:N> \land <var:P0> = <nat:4> \land <var:P1> = <nat:4> \times <var:N> \} \\ <var:K> := <var:P1> ; \\ \{ <var:F> = <var:N> \land <var:P0> = <nat:4> \land <var:K> = <nat:4> \times <var:N> \} \end{eqnarray} Furthering executing this set of commands yields : \begin{eqnarray} <var:K> := <var:K> + <var:P0> \\ \{ <var:F> = <var:N> \land <var:K> = <nat:4> \times <var:N> + <nat:4> \} \end{eqnarray} Applying Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <def:poly> := <var:P0> := <nat:4> ; <var:P1> := <nat:4> ; <var:P1> := <var:P1> * <var:F> ; <var:K> := <var:P1> ; <var:K> := <var:K> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:F> = <var:N> }} <def:poly> {{ <var:K> = <nat:4> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:P0> = <nat:4> /\ <var:P1> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:P0> = <nat:4> /\ <var:K> = <nat:4> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:N> /\ <var:K> = <nat:4> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 