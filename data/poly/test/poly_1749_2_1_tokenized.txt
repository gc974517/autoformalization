\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:3> ; <var:c> := <var:S0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> in \emph{Imp} . Allow $ <var:k> = <var:D> $ prior to executing our code , then we have $ <var:c> = <nat:3> $ when code has finished . \end{theorem} \begin{proof} The course of logic for this set of instructions is given through the following decorated set of commands . \begin{eqnarray} \{ <var:k> = <var:D> \} \\ <var:S0> := <nat:3> ; \\ \{ <var:k> = <var:D> \land <var:S0> = <nat:3> \} \\ <var:c> := <var:S0> \\ \{ <var:k> = <var:D> \land <var:c> = <nat:3> \} \end{eqnarray} Utilizing Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <def:poly> := <var:S0> := <nat:3> ; <var:c> := <var:S0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:k> = <var:D> }} <def:poly> {{ <var:c> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:D> /\ <var:S0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:D> /\ <var:c> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 