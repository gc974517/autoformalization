\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:8> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:L> ; <var:a2> := <nat:2> ; <var:a2> := <var:a2> * <var:L> ; <var:a2> := <var:a2> * <var:L> ; <var:a3> := <nat:7> ; <var:a3> := <var:a3> * <var:L> ; <var:a3> := <var:a3> * <var:L> ; <var:a3> := <var:a3> * <var:L> ; <var:b> := <var:a3> ; <var:b> := <var:b> + <var:a2> ; <var:b> := <var:b> + <var:a1> ; <var:b> := <var:b> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> . Allow it to hold that $ <var:L> = <var:I> $ prior to interpreting the set of instructions it follows that we see $ <var:b> = <nat:7> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:8> $ after code is done . \end{theorem} \begin{proof} Note that the below decorated set of commands . \begin{eqnarray} \{ <var:L> = <var:I> \} \\ <var:a0> := <nat:8> ; \\ \{ <var:L> = <var:I> \land <var:a0> = <nat:8> \} \\ <var:a1> := <nat:8> ; \\ \{ <var:L> = <var:I> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> \} \\ <var:a1> := <var:a1> * <var:L> ; \\ \{ <var:L> = <var:I> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> * <var:I> \} \\ <var:a2> := <nat:2> ; \\ \{ <var:L> = <var:I> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> * <var:I> \land <var:a2> = <nat:2> \} \\ <var:a2> := <var:a2> * <var:L> ; \\ \{ <var:L> = <var:I> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> * <var:I> \land <var:a2> = <nat:2> * <var:I> \} \\ <var:a2> := <var:a2> * <var:L> ; \\ \{ <var:L> = <var:I> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> * <var:I> \land <var:a2> = <nat:2> * <var:I> ^ <nat:2> \} \\ <var:a3> := <nat:7> ; \\ \{ <var:L> = <var:I> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> * <var:I> \land <var:a2> = <nat:2> * <var:I> ^ <nat:2> \land <var:a3> = <nat:7> \} \\ <var:a3> := <var:a3> * <var:L> ; \\ \{ <var:L> = <var:I> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> * <var:I> \land <var:a2> = <nat:2> * <var:I> ^ <nat:2> \land <var:a3> = <nat:7> * <var:I> \} \\ <var:a3> := <var:a3> * <var:L> ; \\ \{ <var:L> = <var:I> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> * <var:I> \land <var:a2> = <nat:2> * <var:I> ^ <nat:2> \land <var:a3> = <nat:7> * <var:I> ^ <nat:2> \} \\ <var:a3> := <var:a3> * <var:L> ; \\ \{ <var:L> = <var:I> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> * <var:I> \land <var:a2> = <nat:2> * <var:I> ^ <nat:2> \land <var:a3> = <nat:7> * <var:I> ^ <nat:3> \} \\ <var:b> := <var:a3> ; \\ \{ <var:L> = <var:I> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> * <var:I> \land <var:a2> = <nat:2> * <var:I> ^ <nat:2> \land <var:b> = <nat:7> * <var:I> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:a2> ; \\ \{ <var:L> = <var:I> \land <var:a0> = <nat:8> \land <var:a1> = <nat:8> * <var:I> \land <var:b> = <nat:7> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:a1> ; \\ \{ <var:L> = <var:I> \land <var:a0> = <nat:8> \land <var:b> = <nat:7> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:8> * <var:I> \} \\ <var:b> := <var:b> + <var:a0> \\ \{ <var:L> = <var:I> \land <var:b> = <nat:7> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:8> \} \end{eqnarray} Applying standard Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a0> := <nat:8> ; <var:a1> := <nat:8> ; <var:a1> := <var:a1> * <var:L> ; <var:a2> := <nat:2> ; <var:a2> := <var:a2> * <var:L> ; <var:a2> := <var:a2> * <var:L> ; <var:a3> := <nat:7> ; <var:a3> := <var:a3> * <var:L> ; <var:a3> := <var:a3> * <var:L> ; <var:a3> := <var:a3> * <var:L> ; <var:b> := <var:a3> ; <var:b> := <var:b> + <var:a2> ; <var:b> := <var:b> + <var:a1> ; <var:b> := <var:b> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:L> = <var:I> }} <def:poly> {{ <var:b> = <nat:7> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:I> /\ <var:a2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:I> /\ <var:a2> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:I> /\ <var:a2> = <nat:2> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:I> /\ <var:a2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:a3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:I> /\ <var:a2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:a3> = <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:I> /\ <var:a2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:a3> = <nat:7> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:I> /\ <var:a2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:a3> = <nat:7> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:I> /\ <var:a2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:b> = <nat:7> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:8> * <var:I> /\ <var:b> = <nat:7> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:a0> = <nat:8> /\ <var:b> = <nat:7> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:b> = <nat:7> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 