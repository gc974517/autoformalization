\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:5> ; <var:k1> := <nat:1> ; <var:k1> := <var:k1> * <var:U> ; <var:k2> := <nat:3> ; <var:k2> := <var:k2> * <var:U> ; <var:k2> := <var:k2> * <var:U> ; <var:h> := <var:k2> ; <var:h> := <var:h> + <var:k1> ; <var:h> := <var:h> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Assume $ <var:U> = <var:j> $ ahead of evaluating this set of instructions , it must be that we have $ <var:h> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:5> $ . \end{theorem} \begin{proof} Using typical Hoare techniques produces : \begin{eqnarray} \{ <var:U> = <var:j> \} \\ <var:k0> := <nat:5> ; \\ \{ <var:U> = <var:j> \land <var:k0> = <nat:5> \} \\ <var:k1> := <nat:1> ; \\ \{ <var:U> = <var:j> \land <var:k0> = <nat:5> \land <var:k1> = <nat:1> \} \\ <var:k1> := <var:k1> * <var:U> ; \\ \{ <var:U> = <var:j> \land <var:k0> = <nat:5> \land <var:k1> = <nat:1> \times <var:j> \} \\ <var:k2> := <nat:3> ; \\ \{ <var:U> = <var:j> \land <var:k0> = <nat:5> \land <var:k1> = <nat:1> \times <var:j> \land <var:k2> = <nat:3> \} \\ <var:k2> := <var:k2> * <var:U> ; \\ \{ <var:U> = <var:j> \land <var:k0> = <nat:5> \land <var:k1> = <nat:1> \times <var:j> \land <var:k2> = <nat:3> \times <var:j> \} \\ <var:k2> := <var:k2> * <var:U> ; \\ \{ <var:U> = <var:j> \land <var:k0> = <nat:5> \land <var:k1> = <nat:1> \times <var:j> \land <var:k2> = <nat:3> \times <var:j> ^ <nat:2> \} \\ <var:h> := <var:k2> ; \\ \{ <var:U> = <var:j> \land <var:k0> = <nat:5> \land <var:k1> = <nat:1> \times <var:j> \land <var:h> = <nat:3> \times <var:j> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:k1> ; \\ \{ <var:U> = <var:j> \land <var:k0> = <nat:5> \land <var:h> = <nat:3> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> \} \\ <var:h> := <var:h> + <var:k0> \\ \{ <var:U> = <var:j> \land <var:h> = <nat:3> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> + <nat:5> \} \end{eqnarray} Hence , this set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <def:poly> := <var:k0> := <nat:5> ; <var:k1> := <nat:1> ; <var:k1> := <var:k1> * <var:U> ; <var:k2> := <nat:3> ; <var:k2> := <var:k2> * <var:U> ; <var:k2> := <var:k2> * <var:U> ; <var:h> := <var:k2> ; <var:h> := <var:h> + <var:k1> ; <var:h> := <var:h> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:U> = <var:j> }} <def:poly> {{ <var:h> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:k0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:k0> = <nat:5> /\ <var:k1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:k0> = <nat:5> /\ <var:k1> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:k0> = <nat:5> /\ <var:k1> = <nat:1> * <var:j> /\ <var:k2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:k0> = <nat:5> /\ <var:k1> = <nat:1> * <var:j> /\ <var:k2> = <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:k0> = <nat:5> /\ <var:k1> = <nat:1> * <var:j> /\ <var:k2> = <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:k0> = <nat:5> /\ <var:k1> = <nat:1> * <var:j> /\ <var:h> = <nat:3> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:k0> = <nat:5> /\ <var:h> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:j> /\ <var:h> = <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 