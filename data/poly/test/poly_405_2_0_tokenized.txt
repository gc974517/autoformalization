\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n0> := <nat:6> ; <var:J> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> in \emph{Imp} . Allowing that $ <var:q> = <var:T> $ ahead of running our code segment it must be that we see $ <var:J> = <nat:6> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions is demonstrated by usual Hoare techniques . Further , we have the environment update line \verb | <var:n0> := <nat:6> ; | . This advances the condition $ \{ <var:q> = <var:T> \} $ toward the postcondition $ \{ <var:q> = <var:T> \land <var:n0> = <nat:6> \} $ . After , we see the binding command \verb | <var:J> := <var:n0> | . This statement takes the precondition $ \{ <var:q> = <var:T> \land <var:n0> = <nat:6> \} $ as $ \{ <var:q> = <var:T> \land <var:J> = <nat:6> \} $ . This is shown using the assignment scheme defined by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:6> ; <var:J> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:q> = <var:T> }} <def:poly> {{ <var:J> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:n0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:T> /\ <var:J> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 