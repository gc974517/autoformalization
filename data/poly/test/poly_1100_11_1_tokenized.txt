\begin{document} \begin{theorem} Let the following segment of code : \begin{verbatim} <var:H1> := <var:s> ; <var:H2> := <var:H1> * <var:s> ; <var:H3> := <var:H2> * <var:s> ; <var:H0> := <nat:1> ; <var:H1> := <var:H1> * <nat:6> ; <var:H2> := <var:H2> * <nat:2> ; <var:H3> := <var:H3> * <nat:5> ; <var:B> := <var:H3> <var:B> := <var:B> + <var:H2> <var:B> := <var:B> + <var:H1> <var:B> := <var:B> + <var:H0> \end{verbatim} Allow that we have $ <var:s> = <var:j> $ ahead of executing the code segment , it holds that we have $ <var:B> = <nat:5> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:j> \} \\ <var:H1> := <var:s> ; \\ \{ <var:s> = <var:j> \land <var:H1> = <var:j> \} \\ <var:H2> := <var:H1> * <var:s> ; \\ \{ <var:s> = <var:j> \land <var:H1> = <var:j> \land <var:H2> = <var:j> ^ <nat:2> \} \\ <var:H3> := <var:H2> * <var:s> ; \\ \{ <var:s> = <var:j> \land <var:H1> = <var:j> \land <var:H2> = <var:j> ^ <nat:2> \land <var:H3> = <var:j> ^ <nat:3> \} \\ <var:H0> := <nat:1> ; \\ \{ <var:s> = <var:j> \land <var:H1> = <var:j> \land <var:H2> = <var:j> ^ <nat:2> \land <var:H3> = <var:j> ^ <nat:3> \land <var:H0> = <nat:1> \} \\ <var:H1> := <var:H1> * <nat:6> ; \\ \{ <var:s> = <var:j> \land <var:H1> = <nat:6> \cdot <var:j> \land <var:H2> = <var:j> ^ <nat:2> \land <var:H3> = <var:j> ^ <nat:3> \land <var:H0> = <nat:1> \} \\ <var:H2> := <var:H2> * <nat:2> ; \\ \{ <var:s> = <var:j> \land <var:H1> = <nat:6> \cdot <var:j> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \land <var:H3> = <var:j> ^ <nat:3> \land <var:H0> = <nat:1> \} \\ <var:H3> := <var:H3> * <nat:5> ; \\ \{ <var:s> = <var:j> \land <var:H1> = <nat:6> \cdot <var:j> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \land <var:H3> = <nat:5> \cdot <var:j> ^ <nat:3> \land <var:H0> = <nat:1> \} \\ <var:B> := <var:H3> \\ \{ <var:s> = <var:j> \land <var:H1> = <nat:6> \cdot <var:j> \land <var:H2> = <nat:2> \cdot <var:j> ^ <nat:2> \land <var:H0> = <nat:1> \land <var:B> = <nat:5> \cdot <var:j> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:H2> \\ \{ <var:s> = <var:j> \land <var:H1> = <nat:6> \cdot <var:j> \land <var:H0> = <nat:1> \land <var:B> = <nat:5> \cdot <var:j> ^ <nat:3> + <nat:2> \cdot <var:j> ^ <nat:2> \} \\ <var:B> := <var:B> + <var:H1> \\ \{ <var:s> = <var:j> \land <var:H0> = <nat:1> \land <var:B> = <nat:5> \cdot <var:j> ^ <nat:3> + <nat:2> \cdot <var:j> ^ <nat:2> + <nat:6> \cdot <var:j> \} \\ <var:B> := <var:B> + <var:H0> \\ \{ <var:s> = <var:j> \land <var:B> = <nat:5> \cdot <var:j> ^ <nat:3> + <nat:2> \cdot <var:j> ^ <nat:2> + <nat:6> \cdot <var:j> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:s> = <var:j> }} <var:H1> := <var:s> ; <var:H2> := <var:H1> * <var:s> ; <var:H3> := <var:H2> * <var:s> ; <var:H0> := <nat:1> ; <var:H1> := <var:H1> * <nat:6> ; <var:H2> := <var:H2> * <nat:2> ; <var:H3> := <var:H3> * <nat:5> ; <var:B> := <var:H3> <var:B> := <var:B> + <var:H2> <var:B> := <var:B> + <var:H1> <var:B> := <var:B> + <var:H0> {{ <var:B> = <nat:5> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:H1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:H1> = <var:j> /\ <var:H2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:H1> = <var:j> /\ <var:H2> = <var:j> ^ <nat:2> /\ <var:H3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:H1> = <var:j> /\ <var:H2> = <var:j> ^ <nat:2> /\ <var:H3> = <var:j> ^ <nat:3> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:H1> = <nat:6> * <var:j> /\ <var:H2> = <var:j> ^ <nat:2> /\ <var:H3> = <var:j> ^ <nat:3> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:H1> = <nat:6> * <var:j> /\ <var:H2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:H3> = <var:j> ^ <nat:3> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:H1> = <nat:6> * <var:j> /\ <var:H2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:H3> = <nat:5> * <var:j> ^ <nat:3> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:H1> = <nat:6> * <var:j> /\ <var:H2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:H0> = <nat:1> /\ <var:B> = <nat:5> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:H1> = <nat:6> * <var:j> /\ <var:H0> = <nat:1> /\ <var:B> = <nat:5> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:H0> = <nat:1> /\ <var:B> = <nat:5> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:j> /\ <var:B> = <nat:5> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 