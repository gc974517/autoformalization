\begin{document} \begin{theorem} We define the following code as follows \begin{verbatim} <var:i0> := <nat:4> ; <var:E> := <var:i0> \end{verbatim} Allow --- given all natural coefficients $ <var:W> $ --- it to be that $ <var:h> = <var:W> $ ahead of interpreting our program it follows that we see $ <var:E> = <nat:4> $ when segment of code is done executing . \end{theorem} \begin{proof} Applying Hoare logic yields : \begin{eqnarray} \{ <var:h> = <var:W> \} \\ <var:i0> := <nat:4> ; \\ \{ <var:h> = <var:W> \land <var:i0> = <nat:4> \} \end{eqnarray} Continuing evaluating the list of instructions produces : \begin{eqnarray} <var:E> := <var:i0> \\ \{ <var:h> = <var:W> \land <var:E> = <nat:4> \} \end{eqnarray} Thus , this series of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:h> = <var:W> }} <var:i0> := <nat:4> ; <var:E> := <var:i0> {{ <var:E> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:W> /\ <var:E> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 