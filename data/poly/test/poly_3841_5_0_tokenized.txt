\begin{document} \begin{theorem} Define a program in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:2> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:f> ; <var:W> := <var:L1> ; <var:W> := <var:W> + <var:L0> \end{verbatim} Given assuming some natural numbers $ <var:Y> $ $ <var:f> = <var:Y> $ ahead of executing the series of instructions , it must be that we have $ <var:W> = <nat:8> \times <var:Y> + <nat:2> $ when code segment has exited . \end{theorem} \begin{proof} Arguing the correctness of our set of instructions is accomplished by usual Hoare reasoning . Keeping momentum , we see the environment update line letting $ <nat:2> $ into $ <var:L0>$ . This takes $ \{ <var:f> = <var:Y> \} $ toward the postcondition $ \{ <var:f> = <var:Y> \land <var:L0> = <nat:2> \} $ . Immediately after , we have the variable assignmet code \verb | <var:L1> := <nat:8> ; | . This advances the precondition $ \{ <var:f> = <var:Y> \land <var:L0> = <nat:2> \} $ to the condition $ \{ <var:f> = <var:Y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:8> \} $ . Observing the following command contained in the list of instructions , we see the variable assignmet code binding $ <var:L1> * <var:f> $ toward $ <var:L1>$ . This statement advances the precondition $ \{ <var:f> = <var:Y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:8> \} $ to the postcondition $ \{ <var:f> = <var:Y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:8> \times <var:Y> \} $ . Moving forward to the upcoming command in the set of commands , we see the assignment command binding $ <var:L1> $ toward $ <var:W>$ . This moves $ \{ <var:f> = <var:Y> \land <var:L0> = <nat:2> \land <var:L1> = <nat:8> \times <var:Y> \} $ toward the condition $ \{ <var:f> = <var:Y> \land <var:L0> = <nat:2> \land <var:W> = <nat:8> \times <var:Y> \} $ . This is rigorously given through the assignment inference rule found in Hoare reasoning . Considering the upcoming bit of code found in the list of commands , the assignment statement assigning $ <var:W> + <var:L0$ into $ <var:W>$ . This line forwards $ \{ <var:f> = <var:Y> \land <var:L0> = <nat:2> \land <var:W> = <nat:8> \times <var:Y> \} $ to the condition $ \{ <var:f> = <var:Y> \land <var:W> = <nat:8> \times <var:Y> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:f> = <var:Y> }} <var:L0> := <nat:2> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:f> ; <var:W> := <var:L1> ; <var:W> := <var:W> + <var:L0> {{ <var:W> = <nat:8> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:L0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:L0> = <nat:2> /\ <var:L1> = <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:L0> = <nat:2> /\ <var:W> = <nat:8> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:Y> /\ <var:W> = <nat:8> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 