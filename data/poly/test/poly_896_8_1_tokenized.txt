\begin{document} \begin{theorem} Take a set of commands in \emph{Imp} as follows \begin{verbatim} <var:v1> := <var:g> ; <var:v2> := <var:v1> * <var:g> ; <var:v0> := <nat:5> ; <var:v1> := <var:v1> * <nat:4> ; <var:v2> := <var:v2> * <nat:8> ; <var:G> := <var:v2> <var:G> := <var:G> + <var:v1> <var:G> := <var:G> + <var:v0> \end{verbatim} Allowing $ <var:g> = <var:b> $ ahead of the execution of our code then we see $ <var:G> = <nat:8> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:5> $ . \end{theorem} \begin{proof} The argument for the code is evident by typical Hoare logic . Stepping through , we have the variable update line assigning $ <var:g> $ as $ <var:v1>$ . This forwards the precondition $ \{ <var:g> = <var:b> \} $ as the postcondition $ \{ <var:g> = <var:b> \land <var:v1> = <var:b> \} $ . Shifting focus toward the next step contained in our series of instructions , the variable assignmet command \verb | <var:v2> := <var:v1> * <var:g> ; | . This command takes the precondition $ \{ <var:g> = <var:b> \land <var:v1> = <var:b> \} $ as the condition $ \{ <var:g> = <var:b> \land <var:v1> = <var:b> \land <var:v2> = <var:b> ^ <nat:2> \} $ . Keeping momentum , the environment update line yielding $ <nat:5> $ to $ <var:v0>$ . This takes $ \{ <var:g> = <var:b> \land <var:v1> = <var:b> \land <var:v2> = <var:b> ^ <nat:2> \} $ into the postcondition $ \{ <var:g> = <var:b> \land <var:v1> = <var:b> \land <var:v2> = <var:b> ^ <nat:2> \land <var:v0> = <nat:5> \} $ . This is guaranteed using the assignment scheme defined in standard Hoare reasoning . Moving on , the environment update statement \verb | <var:v1> := <var:v1> * <nat:4> ; | . This line takes the precondition $ \{ <var:g> = <var:b> \land <var:v1> = <var:b> \land <var:v2> = <var:b> ^ <nat:2> \land <var:v0> = <nat:5> \} $ toward the condition $ \{ <var:g> = <var:b> \land <var:v1> = <nat:4> \cdot <var:b> \land <var:v2> = <var:b> ^ <nat:2> \land <var:v0> = <nat:5> \} $ . Paying attention to the proceeding statement contained in the code , we see the variable update command \verb | <var:v2> := <var:v2> * <nat:8> ; | . This moves $ \{ <var:g> = <var:b> \land <var:v1> = <nat:4> \cdot <var:b> \land <var:v2> = <var:b> ^ <nat:2> \land <var:v0> = <nat:5> \} $ to the condition $ \{ <var:g> = <var:b> \land <var:v1> = <nat:4> \cdot <var:b> \land <var:v2> = <nat:8> \cdot <var:b> ^ <nat:2> \land <var:v0> = <nat:5> \} $ . This is known to be sound by the assignment inference rule obtained from standard Hoare techniques . Keeping momentum , we have the variable binding statement \verb | <var:G> := <var:v2> | . This statement transfers the precondition $ \{ <var:g> = <var:b> \land <var:v1> = <nat:4> \cdot <var:b> \land <var:v2> = <nat:8> \cdot <var:b> ^ <nat:2> \land <var:v0> = <nat:5> \} $ toward the condition $ \{ <var:g> = <var:b> \land <var:v1> = <nat:4> \cdot <var:b> \land <var:v0> = <nat:5> \land <var:G> = <nat:8> \cdot <var:b> ^ <nat:2> \} $ . Advancing to the subsequent command contained in the list of instructions , we see the variable binding statement defining $ <var:G> + <var:v1$ to $ <var:G>$ . This takes the precondition $ \{ <var:g> = <var:b> \land <var:v1> = <nat:4> \cdot <var:b> \land <var:v0> = <nat:5> \land <var:G> = <nat:8> \cdot <var:b> ^ <nat:2> \} $ into $ \{ <var:g> = <var:b> \land <var:v0> = <nat:5> \land <var:G> = <nat:8> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> \} $ . Advancing , we have the variable binding statement \verb | <var:G> := <var:G> + <var:v0> | . This moves the condition $ \{ <var:g> = <var:b> \land <var:v0> = <nat:5> \land <var:G> = <nat:8> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> \} $ toward $ \{ <var:g> = <var:b> \land <var:G> = <nat:8> \cdot <var:b> ^ <nat:2> + <nat:4> \cdot <var:b> + <nat:5> \} $ . This is shown to be logically sound using the assignment law given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:g> = <var:b> }} <var:v1> := <var:g> ; <var:v2> := <var:v1> * <var:g> ; <var:v0> := <nat:5> ; <var:v1> := <var:v1> * <nat:4> ; <var:v2> := <var:v2> * <nat:8> ; <var:G> := <var:v2> <var:G> := <var:G> + <var:v1> <var:G> := <var:G> + <var:v0> {{ <var:G> = <nat:8> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:v1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:v1> = <var:b> /\ <var:v2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:v1> = <var:b> /\ <var:v2> = <var:b> ^ <nat:2> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:v1> = <nat:4> * <var:b> /\ <var:v2> = <var:b> ^ <nat:2> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:v1> = <nat:4> * <var:b> /\ <var:v2> = <nat:8> * <var:b> ^ <nat:2> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:v1> = <nat:4> * <var:b> /\ <var:v0> = <nat:5> /\ <var:G> = <nat:8> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:v0> = <nat:5> /\ <var:G> = <nat:8> * <var:b> ^ <nat:2> + <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:G> = <nat:8> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 