\begin{document} \begin{theorem} Consider a list of commands as \begin{verbatim} <var:J1> := <var:W> ; <var:J2> := <var:J1> * <var:W> ; <var:J0> := <nat:5> ; <var:J1> := <var:J1> * <nat:6> ; <var:J2> := <var:J2> * <nat:6> ; <var:z> := <var:J2> <var:z> := <var:z> + <var:J1> <var:z> := <var:z> + <var:J0> \end{verbatim} Assume it to hold that $ <var:W> = <var:F> $ , given some integers $ <var:F> $ , before executing our code segment it holds that we have $ <var:z> = <nat:6> \times <var:F> ^ <nat:2> + <nat:6> \times <var:F> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program is shown by standard Hoare logic . Now , \[ \begin{tabular} {rcl} \{ <var:W> = <var:F> \} & <var:J1> := <var:W> & \{ <var:W> = <var:F> \land <var:J1> = <var:F> \} \\ \{ <var:W> = <var:F> \land <var:J1> = <var:F> \} & <var:J2> := <var:J1> * <var:W> & \{ <var:W> = <var:F> \land <var:J1> = <var:F> \land <var:J2> = <var:F> ^ <nat:2> \} \end{tabular} This is shown through the variable assignmet law obtained from Hoare logic . Moving forward to the next step , \[ \begin{tabular} {rcl} \{ <var:W> = <var:F> \} & <var:J1> := <var:W> & \{ <var:W> = <var:F> \land <var:J1> = <var:F> \} \end{tabular} This is guaranteed using the inference rule defined in typical Hoare logic . Considering the following steps in our list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:W> = <var:F> \} & <var:J1> := <var:W> & \{ <var:W> = <var:F> \land <var:J1> = <var:F> \} \\ \{ <var:W> = <var:F> \land <var:J1> = <var:F> \} & <var:J2> := <var:J1> * <var:W> & \{ <var:W> = <var:F> \land <var:J1> = <var:F> \land <var:J2> = <var:F> ^ <nat:2> \} \\ \{ <var:W> = <var:F> \land <var:J1> = <var:F> \land <var:J2> = <var:F> ^ <nat:2> \} & <var:J0> := <nat:5> & \{ <var:W> = <var:F> \land <var:J1> = <var:F> \land <var:J2> = <var:F> ^ <nat:2> \land <var:J0> = <nat:5> \} \\ \{ <var:W> = <var:F> \land <var:J1> = <var:F> \land <var:J2> = <var:F> ^ <nat:2> \land <var:J0> = <nat:5> \} & <var:J1> := <var:J1> * <nat:6> & \{ <var:W> = <var:F> \land <var:J1> = <nat:6> \times <var:F> \land <var:J2> = <var:F> ^ <nat:2> \land <var:J0> = <nat:5> \} \end{tabular} This is ensured with the environment update rule in Hoare techniques . Further , we see \[ \begin{tabular} {rcl} \{ <var:W> = <var:F> \} & <var:J1> := <var:W> & \{ <var:W> = <var:F> \land <var:J1> = <var:F> \} \end{tabular} This is shown to be logically sound using the law given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:W> = <var:F> }} <var:J1> := <var:W> ; <var:J2> := <var:J1> * <var:W> ; <var:J0> := <nat:5> ; <var:J1> := <var:J1> * <nat:6> ; <var:J2> := <var:J2> * <nat:6> ; <var:z> := <var:J2> <var:z> := <var:z> + <var:J1> <var:z> := <var:z> + <var:J0> {{ <var:z> = <nat:6> * <var:F> ^ <nat:2> + <nat:6> * <var:F> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:J1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:J1> = <var:F> /\ <var:J2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:J1> = <var:F> /\ <var:J2> = <var:F> ^ <nat:2> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:J1> = <nat:6> * <var:F> /\ <var:J2> = <var:F> ^ <nat:2> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:J1> = <nat:6> * <var:F> /\ <var:J2> = <nat:6> * <var:F> ^ <nat:2> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:J1> = <nat:6> * <var:F> /\ <var:J0> = <nat:5> /\ <var:z> = <nat:6> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:J0> = <nat:5> /\ <var:z> = <nat:6> * <var:F> ^ <nat:2> + <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:F> /\ <var:z> = <nat:6> * <var:F> ^ <nat:2> + <nat:6> * <var:F> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 