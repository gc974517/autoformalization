\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c> := <nat:4> ; <var:c> := <nat:3> + <var:c> * <var:Z> ; <var:c> := <nat:4> + <var:c> * <var:Z> ; <var:c> := <var:c> * <var:Z> ; <var:c> := <nat:4> + <var:c> * <var:Z> ; <var:c> := <nat:1> + <var:c> * <var:Z> ; <var:c> := <nat:4> + <var:c> * <var:Z> ; <var:c> := <nat:3> + <var:c> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> in \emph{Imp} . Given it to hold that $ <var:Z> = <var:x> $ prior to executing this code , it follows that we see $ <var:c> = <nat:4> * <var:x> ^ <nat:7> + <nat:3> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:3> $ after code has exited . \end{theorem} \begin{proof} The way to prove correctness for our segment of code can be shown by typical Hoare reasoning . Advancing , the variable binding code giving $ <nat:4> $ into $ <var:c>$ . This advances the precondition $ \{ <var:Z> = <var:x> \} $ as the postcondition $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \} $ . Considering the following command contained in the list of instructions , we have the variable update line binding $ <nat:3> + <var:c> * <var:Z> $ toward $ <var:c>$ . This statement redefines the precondition $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \} $ to the postcondition $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \times <var:x> + <nat:3> \} $ . Moving onward , the variable update code giving $ <nat:4> + <var:c> * <var:Z> $ to $ <var:c>$ . This takes $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \times <var:x> + <nat:3> \} $ as $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> + <nat:4> \} $ . This is shown by the assignment scheme given in standard Hoare logic . Keeping momentum , we see the line \verb | <var:c> := <var:c> * <var:Z> ; | . This forwards the condition $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> + <nat:4> \} $ toward the postcondition $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + \} $ . Advancing , we have the line assigning $ <nat:4> + <var:c> * <var:Z> $ into $ <var:c>$ . This moves the condition $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \times <var:x> ^ <nat:3> + <nat:3> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + \} $ as the postcondition $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \times <var:x> ^ <nat:4> + <nat:3> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:4> \} $ . Going forward , the command \verb | <var:c> := <nat:1> + <var:c> * <var:Z> ; | . This forwards $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \times <var:x> ^ <nat:4> + <nat:3> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> ^ <nat:2> + <nat:4> \} $ to the postcondition $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \times <var:x> ^ <nat:5> + <nat:3> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> + <nat:1> \} $ . This is shown by the assignment rule defined in typical Hoare techniques . Taking another step toward the next command seen in our segment of code , the variable assignmet line \verb | <var:c> := <nat:4> + <var:c> * <var:Z> ; | . This takes the precondition $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \times <var:x> ^ <nat:5> + <nat:3> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:3> + <nat:4> \times <var:x> + <nat:1> \} $ toward the condition $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \times <var:x> ^ <nat:6> + <nat:3> \times <var:x> ^ <nat:5> + <nat:4> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:4> \} $ . This is shown with the assignment scheme in typical Hoare logic . Moving on , we have the environment update statement assigning $ <nat:3> + <var:c> * <var:Z$ as $ <var:c>$ . This transfers the precondition $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \times <var:x> ^ <nat:6> + <nat:3> \times <var:x> ^ <nat:5> + <nat:4> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:2> + <nat:1> \times <var:x> + <nat:4> \} $ as the condition $ \{ <var:Z> = <var:x> \land <var:c> = <nat:4> \times <var:x> ^ <nat:7> + <nat:3> \times <var:x> ^ <nat:6> + <nat:4> \times <var:x> ^ <nat:5> + <nat:4> \times <var:x> ^ <nat:3> + <nat:1> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:3> \} $ . This is shown by the assignment rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:c> := <nat:4> ; <var:c> := <nat:3> + <var:c> * <var:Z> ; <var:c> := <nat:4> + <var:c> * <var:Z> ; <var:c> := <var:c> * <var:Z> ; <var:c> := <nat:4> + <var:c> * <var:Z> ; <var:c> := <nat:1> + <var:c> * <var:Z> ; <var:c> := <nat:4> + <var:c> * <var:Z> ; <var:c> := <nat:3> + <var:c> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:Z> = <var:x> }} <def:poly> {{ <var:c> = <nat:4> * <var:x> ^ <nat:7> + <nat:3> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:c> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:c> = <nat:4> * <var:x> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:3> + <nat:3> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:4> + <nat:3> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:5> + <nat:3> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:4> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:6> + <nat:3> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:7> + <nat:3> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 