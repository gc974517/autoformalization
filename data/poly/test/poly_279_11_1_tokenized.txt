\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:s1> := <var:x> ; <var:s2> := <var:s1> * <var:x> ; <var:s3> := <var:s2> * <var:x> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:3> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:3> ; <var:d> := <var:s3> <var:d> := <var:d> + <var:s2> <var:d> := <var:d> + <var:s1> <var:d> := <var:d> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:x> = <var:b> $ ahead of evaluating our code , then we have $ <var:d> = <nat:3> \times <var:b> ^ <nat:3> + <nat:3> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:3> $ when series of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:b> \} \\ <var:s1> := <var:x> ; \\ \{ <var:x> = <var:b> \land <var:s1> = <var:b> \} \\ <var:s2> := <var:s1> * <var:x> ; \\ \{ <var:x> = <var:b> \land <var:s1> = <var:b> \land <var:s2> = <var:b> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:x> ; \\ \{ <var:x> = <var:b> \land <var:s1> = <var:b> \land <var:s2> = <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \} \\ <var:s0> := <nat:3> ; \\ \{ <var:x> = <var:b> \land <var:s1> = <var:b> \land <var:s2> = <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:s1> := <var:s1> * <nat:3> ; \\ \{ <var:x> = <var:b> \land <var:s1> = <nat:3> \cdot <var:b> \land <var:s2> = <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:s2> := <var:s2> * <nat:3> ; \\ \{ <var:x> = <var:b> \land <var:s1> = <nat:3> \cdot <var:b> \land <var:s2> = <nat:3> \cdot <var:b> ^ <nat:2> \land <var:s3> = <var:b> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:s3> := <var:s3> * <nat:3> ; \\ \{ <var:x> = <var:b> \land <var:s1> = <nat:3> \cdot <var:b> \land <var:s2> = <nat:3> \cdot <var:b> ^ <nat:2> \land <var:s3> = <nat:3> \cdot <var:b> ^ <nat:3> \land <var:s0> = <nat:3> \} \\ <var:d> := <var:s3> \\ \{ <var:x> = <var:b> \land <var:s1> = <nat:3> \cdot <var:b> \land <var:s2> = <nat:3> \cdot <var:b> ^ <nat:2> \land <var:s0> = <nat:3> \land <var:d> = <nat:3> \cdot <var:b> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:s2> \\ \{ <var:x> = <var:b> \land <var:s1> = <nat:3> \cdot <var:b> \land <var:s0> = <nat:3> \land <var:d> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:3> \cdot <var:b> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:s1> \\ \{ <var:x> = <var:b> \land <var:s0> = <nat:3> \land <var:d> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:3> \cdot <var:b> ^ <nat:2> + <nat:3> \cdot <var:b> \} \\ <var:d> := <var:d> + <var:s0> \\ \{ <var:x> = <var:b> \land <var:d> = <nat:3> \cdot <var:b> ^ <nat:3> + <nat:3> \cdot <var:b> ^ <nat:2> + <nat:3> \cdot <var:b> + <nat:3> \} \end{eqnarray} Applying Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s1> := <var:x> ; <var:s2> := <var:s1> * <var:x> ; <var:s3> := <var:s2> * <var:x> ; <var:s0> := <nat:3> ; <var:s1> := <var:s1> * <nat:3> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:3> ; <var:d> := <var:s3> <var:d> := <var:d> + <var:s2> <var:d> := <var:d> + <var:s1> <var:d> := <var:d> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:x> = <var:b> }} <def:poly> {{ <var:d> = <nat:3> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:s1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:s1> = <var:b> /\ <var:s2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:s1> = <var:b> /\ <var:s2> = <var:b> ^ <nat:2> /\ <var:s3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:s1> = <var:b> /\ <var:s2> = <var:b> ^ <nat:2> /\ <var:s3> = <var:b> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:s1> = <nat:3> * <var:b> /\ <var:s2> = <var:b> ^ <nat:2> /\ <var:s3> = <var:b> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:s1> = <nat:3> * <var:b> /\ <var:s2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:s3> = <var:b> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:s1> = <nat:3> * <var:b> /\ <var:s2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:b> ^ <nat:3> /\ <var:s0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:s1> = <nat:3> * <var:b> /\ <var:s2> = <nat:3> * <var:b> ^ <nat:2> /\ <var:s0> = <nat:3> /\ <var:d> = <nat:3> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:s1> = <nat:3> * <var:b> /\ <var:s0> = <nat:3> /\ <var:d> = <nat:3> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:s0> = <nat:3> /\ <var:d> = <nat:3> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:b> /\ <var:d> = <nat:3> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 