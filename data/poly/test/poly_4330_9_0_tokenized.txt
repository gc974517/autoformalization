\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:3> ; <var:k1> := <nat:1> ; <var:k1> := <var:k1> * <var:L> ; <var:k2> := <nat:3> ; <var:k2> := <var:k2> * <var:L> ; <var:k2> := <var:k2> * <var:L> ; <var:B> := <var:k2> ; <var:B> := <var:B> + <var:k1> ; <var:B> := <var:B> + <var:k0> \end{verbatim} Allowing that $ <var:L> = <var:G> $ before interpreting our segment of code it follows that we have $ <var:B> = <nat:3> \times <var:G> ^ <nat:2> + <nat:1> \times <var:G> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this program is evident by usual Hoare reasoning . Moving forward to the next step , \verb | { <var:L> = <var:G> } <var:k0> := <nat:3> { <var:L> = <var:G> \land <var:k0> = <nat:3> } | , \verb | { <var:L> = <var:G> \land <var:k0> = <nat:3> } <var:k1> := <nat:1> { <var:L> = <var:G> \land <var:k0> = <nat:3> \land <var:k1> = <nat:1> } | and \verb | { <var:L> = <var:G> \land <var:k0> = <nat:3> \land <var:k1> = <nat:1> } <var:k1> := <var:k1> * <var:L> { <var:L> = <var:G> \land <var:k0> = <nat:3> \land <var:k1> = <nat:1> \times <var:G> } | . This is rigorously given with the variable update law of typical Hoare reasoning . Paying attention to the proceeding statements in the code , \verb | { <var:L> = <var:G> } <var:k0> := <nat:3> { <var:L> = <var:G> \land <var:k0> = <nat:3> } | , \verb | { <var:L> = <var:G> \land <var:k0> = <nat:3> } <var:k1> := <nat:1> { <var:L> = <var:G> \land <var:k0> = <nat:3> \land <var:k1> = <nat:1> } | and \verb | { <var:L> = <var:G> \land <var:k0> = <nat:3> \land <var:k1> = <nat:1> } <var:k1> := <var:k1> * <var:L> { <var:L> = <var:G> \land <var:k0> = <nat:3> \land <var:k1> = <nat:1> \times <var:G> } | . This is guaranteed through the rule in usual Hoare logic . Advancing on , we have \verb | { <var:L> = <var:G> } <var:k0> := <nat:3> { <var:L> = <var:G> \land <var:k0> = <nat:3> } | , \verb | { <var:L> = <var:G> \land <var:k0> = <nat:3> } <var:k1> := <nat:1> { <var:L> = <var:G> \land <var:k0> = <nat:3> \land <var:k1> = <nat:1> } | and \verb | { <var:L> = <var:G> \land <var:k0> = <nat:3> \land <var:k1> = <nat:1> } <var:k1> := <var:k1> * <var:L> { <var:L> = <var:G> \land <var:k0> = <nat:3> \land <var:k1> = <nat:1> \times <var:G> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:L> = <var:G> }} <var:k0> := <nat:3> ; <var:k1> := <nat:1> ; <var:k1> := <var:k1> * <var:L> ; <var:k2> := <nat:3> ; <var:k2> := <var:k2> * <var:L> ; <var:k2> := <var:k2> * <var:L> ; <var:B> := <var:k2> ; <var:B> := <var:B> + <var:k1> ; <var:B> := <var:B> + <var:k0> {{ <var:B> = <nat:3> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:1> * <var:G> /\ <var:k2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:1> * <var:G> /\ <var:k2> = <nat:3> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:1> * <var:G> /\ <var:k2> = <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:1> * <var:G> /\ <var:B> = <nat:3> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:k0> = <nat:3> /\ <var:B> = <nat:3> * <var:G> ^ <nat:2> + <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:G> /\ <var:B> = <nat:3> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 