\begin{document} \begin{theorem} Take the following program in \emph{Imp} : \begin{verbatim} <var:m1> := <var:y> ; <var:m2> := <var:m1> * <var:y> ; <var:m0> := <nat:8> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:8> ; <var:g> := <var:m2> <var:g> := <var:g> + <var:m1> <var:g> := <var:g> + <var:m0> \end{verbatim} Assuming that $ <var:y> = <var:H> $ ( for all whole numbers $ <var:H> $ ) prior to evaluating our code segment it must be that we have $ <var:g> = <nat:8> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:8> $ . \end{theorem} \begin{proof} The proof of this code segment can be accomplished through standard Hoare reasoning . Immediately following , we see the variable assignmet command \verb | <var:m1> := <var:y> ; | . This command transfers the condition $ \{ <var:y> = <var:H> \} $ to the condition $ \{ <var:y> = <var:H> \land <var:m1> = <var:H> \} $ . Focusing on the subsequent bit of code contained in our series of instructions , we have the binding line \verb | <var:m2> := <var:m1> * <var:y> ; | . This advances the precondition $ \{ <var:y> = <var:H> \land <var:m1> = <var:H> \} $ to the condition $ \{ <var:y> = <var:H> \land <var:m1> = <var:H> \land <var:m2> = <var:H> ^ <nat:2> \} $ . This is guaranteed by the assignment law in standard Hoare reasoning . Advancing to the proceeding statement found in the code segment , the variable update code defining $ <nat:8> $ into $ <var:m0>$ . This redefines the condition $ \{ <var:y> = <var:H> \land <var:m1> = <var:H> \land <var:m2> = <var:H> ^ <nat:2> \} $ to the condition $ \{ <var:y> = <var:H> \land <var:m1> = <var:H> \land <var:m2> = <var:H> ^ <nat:2> \land <var:m0> = <nat:8> \} $ . Jumping to the subsequent line found in our series of commands , we have the assignment line \verb | <var:m1> := <var:m1> * <nat:3> ; | . This forwards $ \{ <var:y> = <var:H> \land <var:m1> = <var:H> \land <var:m2> = <var:H> ^ <nat:2> \land <var:m0> = <nat:8> \} $ as the postcondition $ \{ <var:y> = <var:H> \land <var:m1> = <nat:3> \times <var:H> \land <var:m2> = <var:H> ^ <nat:2> \land <var:m0> = <nat:8> \} $ . Keeping momentum , the line \verb | <var:m2> := <var:m2> * <nat:8> ; | . This forwards $ \{ <var:y> = <var:H> \land <var:m1> = <nat:3> \times <var:H> \land <var:m2> = <var:H> ^ <nat:2> \land <var:m0> = <nat:8> \} $ as the postcondition $ \{ <var:y> = <var:H> \land <var:m1> = <nat:3> \times <var:H> \land <var:m2> = <nat:8> \times <var:H> ^ <nat:2> \land <var:m0> = <nat:8> \} $ . Moving forward to the following statement found in our list of instructions , we have the environment update statement \verb | <var:g> := <var:m2> | . This takes $ \{ <var:y> = <var:H> \land <var:m1> = <nat:3> \times <var:H> \land <var:m2> = <nat:8> \times <var:H> ^ <nat:2> \land <var:m0> = <nat:8> \} $ to the condition $ \{ <var:y> = <var:H> \land <var:m1> = <nat:3> \times <var:H> \land <var:m0> = <nat:8> \land <var:g> = <nat:8> \times <var:H> ^ <nat:2> \} $ . Advancing to the following command in our code segment , we have the assignment command yielding $ <var:g> + <var:m1$ into $ <var:g>$ . This code moves $ \{ <var:y> = <var:H> \land <var:m1> = <nat:3> \times <var:H> \land <var:m0> = <nat:8> \land <var:g> = <nat:8> \times <var:H> ^ <nat:2> \} $ to the postcondition $ \{ <var:y> = <var:H> \land <var:m0> = <nat:8> \land <var:g> = <nat:8> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> \} $ . Observing the subsequent line of code seen in our list of commands , the assignment line \verb | <var:g> := <var:g> + <var:m0> | . This line takes the condition $ \{ <var:y> = <var:H> \land <var:m0> = <nat:8> \land <var:g> = <nat:8> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> \} $ to the condition $ \{ <var:y> = <var:H> \land <var:g> = <nat:8> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:8> \} $ . This is guaranteed through the assignment law defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:y> = <var:H> }} <var:m1> := <var:y> ; <var:m2> := <var:m1> * <var:y> ; <var:m0> := <nat:8> ; <var:m1> := <var:m1> * <nat:3> ; <var:m2> := <var:m2> * <nat:8> ; <var:g> := <var:m2> <var:g> := <var:g> + <var:m1> <var:g> := <var:g> + <var:m0> {{ <var:g> = <nat:8> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:m1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:m1> = <var:H> /\ <var:m2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:m1> = <var:H> /\ <var:m2> = <var:H> ^ <nat:2> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:m1> = <nat:3> * <var:H> /\ <var:m2> = <var:H> ^ <nat:2> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:m1> = <nat:3> * <var:H> /\ <var:m2> = <nat:8> * <var:H> ^ <nat:2> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:m1> = <nat:3> * <var:H> /\ <var:m0> = <nat:8> /\ <var:g> = <nat:8> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:m0> = <nat:8> /\ <var:g> = <nat:8> * <var:H> ^ <nat:2> + <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:H> /\ <var:g> = <nat:8> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 