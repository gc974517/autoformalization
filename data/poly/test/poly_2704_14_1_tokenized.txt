\begin{document} \begin{theorem} Define a code in \emph{Imp} as \begin{verbatim} <var:h1> := <var:U> ; <var:h2> := <var:h1> * <var:U> ; <var:h3> := <var:h2> * <var:U> ; <var:h4> := <var:h3> * <var:U> ; <var:h0> := <nat:7> ; <var:h1> := <var:h1> * <nat:6> ; <var:h2> := <var:h2> * <nat:6> ; <var:h3> := <var:h3> * <nat:8> ; <var:h4> := <var:h4> * <nat:8> ; <var:g> := <var:h4> <var:g> := <var:g> + <var:h3> <var:g> := <var:g> + <var:h2> <var:g> := <var:g> + <var:h1> <var:g> := <var:g> + <var:h0> \end{verbatim} Assume it to hold that $ <var:U> = <var:f> $ ahead of interpreting the set of instructions , it holds that we have $ <var:g> = <nat:8> \cdot <var:f> ^ <nat:4> + <nat:8> \cdot <var:f> ^ <nat:3> + <nat:6> \cdot <var:f> ^ <nat:2> + <nat:6> \cdot <var:f> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions can be given using standard Hoare logic . Stepping forward , we see the variable binding command \verb | <var:h1> := <var:U> ; | . This takes the precondition $ \{ <var:U> = <var:f> \} $ toward the postcondition $ \{ <var:U> = <var:f> \land <var:h1> = <var:f> \} $ . This is rigorously given by the assignment inference rule given by standard Hoare logic . Keeping momentum , we see the binding command binding $ <var:h1> * <var:U> $ as $ <var:h2>$ . This command takes $ \{ <var:U> = <var:f> \land <var:h1> = <var:f> \} $ toward the condition $ \{ <var:U> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \} $ . Immediately after , we have the binding code \verb | <var:h3> := <var:h2> * <var:U> ; | . This line redefines the condition $ \{ <var:U> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \} $ to the postcondition $ \{ <var:U> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \} $ . This is deduced using the assignment rule from usual Hoare reasoning . Taking a look at the proceeding bit of code seen in our code , the variable update statement yielding $ <var:h3> * <var:U> $ into $ <var:h4>$ . This line takes $ \{ <var:U> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \} $ toward the condition $ \{ <var:U> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h4> = <var:f> ^ <nat:4> \} $ . This is guaranteed through the assignment rule given by usual Hoare techniques . Next , we see the variable assignmet line \verb | <var:h0> := <nat:7> ; | . This command redefines the precondition $ \{ <var:U> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h4> = <var:f> ^ <nat:4> \} $ as the postcondition $ \{ <var:U> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h4> = <var:f> ^ <nat:4> \land <var:h0> = <nat:7> \} $ . This is shown by the assignment rule found in Hoare techniques . Immediately after , the variable update line yielding $ <var:h1> * <nat:6> $ into $ <var:h1>$ . This advances the precondition $ \{ <var:U> = <var:f> \land <var:h1> = <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h4> = <var:f> ^ <nat:4> \land <var:h0> = <nat:7> \} $ to $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h4> = <var:f> ^ <nat:4> \land <var:h0> = <nat:7> \} $ . Further , we have the variable update line giving $ <var:h2> * <nat:6> $ to $ <var:h2>$ . This line takes the condition $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h2> = <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h4> = <var:f> ^ <nat:4> \land <var:h0> = <nat:7> \} $ toward $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h2> = <nat:6> \cdot <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h4> = <var:f> ^ <nat:4> \land <var:h0> = <nat:7> \} $ . This is shown with the assignment scheme found in standard Hoare logic . Moving onward , we have the line letting $ <var:h3> * <nat:8> $ to $ <var:h3>$ . This code moves the precondition $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h2> = <nat:6> \cdot <var:f> ^ <nat:2> \land <var:h3> = <var:f> ^ <nat:3> \land <var:h4> = <var:f> ^ <nat:4> \land <var:h0> = <nat:7> \} $ to the postcondition $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h2> = <nat:6> \cdot <var:f> ^ <nat:2> \land <var:h3> = <nat:8> \cdot <var:f> ^ <nat:3> \land <var:h4> = <var:f> ^ <nat:4> \land <var:h0> = <nat:7> \} $ . This is ensured with the assignment inference rule defined by typical Hoare logic . Moving forward , we see the variable update command \verb | <var:h4> := <var:h4> * <nat:8> ; | . This moves $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h2> = <nat:6> \cdot <var:f> ^ <nat:2> \land <var:h3> = <nat:8> \cdot <var:f> ^ <nat:3> \land <var:h4> = <var:f> ^ <nat:4> \land <var:h0> = <nat:7> \} $ into $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h2> = <nat:6> \cdot <var:f> ^ <nat:2> \land <var:h3> = <nat:8> \cdot <var:f> ^ <nat:3> \land <var:h4> = <nat:8> \cdot <var:f> ^ <nat:4> \land <var:h0> = <nat:7> \} $ . This is shown using the assignment scheme obtained from standard Hoare reasoning . Jumping to the following command contained in our code segment , the variable assignmet command \verb | <var:g> := <var:h4> | . This statement transfers the condition $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h2> = <nat:6> \cdot <var:f> ^ <nat:2> \land <var:h3> = <nat:8> \cdot <var:f> ^ <nat:3> \land <var:h4> = <nat:8> \cdot <var:f> ^ <nat:4> \land <var:h0> = <nat:7> \} $ to the condition $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h2> = <nat:6> \cdot <var:f> ^ <nat:2> \land <var:h3> = <nat:8> \cdot <var:f> ^ <nat:3> \land <var:h0> = <nat:7> \land <var:g> = <nat:8> \cdot <var:f> ^ <nat:4> \} $ . Looking at the proceeding piece of code contained in our list of commands , we see the binding statement giving $ <var:g> + <var:h3$ as $ <var:g>$ . This transfers the precondition $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h2> = <nat:6> \cdot <var:f> ^ <nat:2> \land <var:h3> = <nat:8> \cdot <var:f> ^ <nat:3> \land <var:h0> = <nat:7> \land <var:g> = <nat:8> \cdot <var:f> ^ <nat:4> \} $ into the condition $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h2> = <nat:6> \cdot <var:f> ^ <nat:2> \land <var:h0> = <nat:7> \land <var:g> = <nat:8> \cdot <var:f> ^ <nat:4> + <nat:8> \cdot <var:f> ^ <nat:3> \} $ . This is known to be sound by the assignment rule defined in typical Hoare reasoning . Looking at the upcoming line seen in our series of instructions , we have the variable assignmet line \verb | <var:g> := <var:g> + <var:h2> | . This line advances the condition $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h2> = <nat:6> \cdot <var:f> ^ <nat:2> \land <var:h0> = <nat:7> \land <var:g> = <nat:8> \cdot <var:f> ^ <nat:4> + <nat:8> \cdot <var:f> ^ <nat:3> \} $ into the condition $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h0> = <nat:7> \land <var:g> = <nat:8> \cdot <var:f> ^ <nat:4> + <nat:8> \cdot <var:f> ^ <nat:3> + <nat:6> \cdot <var:f> ^ <nat:2> \} $ . Focusing on the upcoming bit of code seen in our segment of code , we have the binding command \verb | <var:g> := <var:g> + <var:h1> | . This transfers the condition $ \{ <var:U> = <var:f> \land <var:h1> = <nat:6> \cdot <var:f> \land <var:h0> = <nat:7> \land <var:g> = <nat:8> \cdot <var:f> ^ <nat:4> + <nat:8> \cdot <var:f> ^ <nat:3> + <nat:6> \cdot <var:f> ^ <nat:2> \} $ into $ \{ <var:U> = <var:f> \land <var:h0> = <nat:7> \land <var:g> = <nat:8> \cdot <var:f> ^ <nat:4> + <nat:8> \cdot <var:f> ^ <nat:3> + <nat:6> \cdot <var:f> ^ <nat:2> + <nat:6> \cdot <var:f> \} $ . After , we have the variable update code \verb | <var:g> := <var:g> + <var:h0> | . This line redefines $ \{ <var:U> = <var:f> \land <var:h0> = <nat:7> \land <var:g> = <nat:8> \cdot <var:f> ^ <nat:4> + <nat:8> \cdot <var:f> ^ <nat:3> + <nat:6> \cdot <var:f> ^ <nat:2> + <nat:6> \cdot <var:f> \} $ to the postcondition $ \{ <var:U> = <var:f> \land <var:g> = <nat:8> \cdot <var:f> ^ <nat:4> + <nat:8> \cdot <var:f> ^ <nat:3> + <nat:6> \cdot <var:f> ^ <nat:2> + <nat:6> \cdot <var:f> + <nat:7> \} $ . This is shown to be logically sound with the assignment scheme obtained from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <var:h4> : string := " <var:h4> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:U> = <var:f> }} <var:h1> := <var:U> ; <var:h2> := <var:h1> * <var:U> ; <var:h3> := <var:h2> * <var:U> ; <var:h4> := <var:h3> * <var:U> ; <var:h0> := <nat:7> ; <var:h1> := <var:h1> * <nat:6> ; <var:h2> := <var:h2> * <nat:6> ; <var:h3> := <var:h3> * <nat:8> ; <var:h4> := <var:h4> * <nat:8> ; <var:g> := <var:h4> <var:g> := <var:g> + <var:h3> <var:g> := <var:g> + <var:h2> <var:g> := <var:g> + <var:h1> <var:g> := <var:g> + <var:h0> {{ <var:g> = <nat:8> * <var:f> ^ <nat:4> + <nat:8> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:6> * <var:f> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:h1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:h1> = <var:f> /\ <var:h2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:h1> = <var:f> /\ <var:h2> = <var:f> ^ <nat:2> /\ <var:h3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:h1> = <var:f> /\ <var:h2> = <var:f> ^ <nat:2> /\ <var:h3> = <var:f> ^ <nat:3> /\ <var:h4> = <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:h1> = <var:f> /\ <var:h2> = <var:f> ^ <nat:2> /\ <var:h3> = <var:f> ^ <nat:3> /\ <var:h4> = <var:f> ^ <nat:4> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:h1> = <nat:6> * <var:f> /\ <var:h2> = <var:f> ^ <nat:2> /\ <var:h3> = <var:f> ^ <nat:3> /\ <var:h4> = <var:f> ^ <nat:4> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:h1> = <nat:6> * <var:f> /\ <var:h2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:h3> = <var:f> ^ <nat:3> /\ <var:h4> = <var:f> ^ <nat:4> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:h1> = <nat:6> * <var:f> /\ <var:h2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:h3> = <nat:8> * <var:f> ^ <nat:3> /\ <var:h4> = <var:f> ^ <nat:4> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:h1> = <nat:6> * <var:f> /\ <var:h2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:h3> = <nat:8> * <var:f> ^ <nat:3> /\ <var:h4> = <nat:8> * <var:f> ^ <nat:4> /\ <var:h0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:h1> = <nat:6> * <var:f> /\ <var:h2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:h3> = <nat:8> * <var:f> ^ <nat:3> /\ <var:h0> = <nat:7> /\ <var:g> = <nat:8> * <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:h1> = <nat:6> * <var:f> /\ <var:h2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:h0> = <nat:7> /\ <var:g> = <nat:8> * <var:f> ^ <nat:4> + <nat:8> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:h1> = <nat:6> * <var:f> /\ <var:h0> = <nat:7> /\ <var:g> = <nat:8> * <var:f> ^ <nat:4> + <nat:8> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:h0> = <nat:7> /\ <var:g> = <nat:8> * <var:f> ^ <nat:4> + <nat:8> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:6> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:g> = <nat:8> * <var:f> ^ <nat:4> + <nat:8> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:6> * <var:f> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 