\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:W> := <nat:2> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:1> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:3> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:3> + <var:W> * <var:P> ; <var:W> := <nat:1> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:1> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:P> = <var:y> $ , given all $ <var:y> \in \mathbb{N} $ , before the execution of the series of commands it follows that we see $ <var:W> = <nat:2> \times <var:y> ^ <nat:13> + <nat:4> \times <var:y> ^ <nat:12> + <nat:4> \times <var:y> ^ <nat:11> + <nat:4> \times <var:y> ^ <nat:10> + <nat:1> \times <var:y> ^ <nat:9> + <nat:4> \times <var:y> ^ <nat:8> + <nat:3> \times <var:y> ^ <nat:7> + <nat:4> \times <var:y> ^ <nat:6> + <nat:4> \times <var:y> ^ <nat:5> + <nat:3> \times <var:y> ^ <nat:4> + <nat:1> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:y> \} \\ <var:W> := <nat:2> ; \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \} \\ <var:W> := <nat:4> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \cdot <var:y> + <nat:4> \} \\ <var:W> := <nat:4> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:4> \} \\ <var:W> := <nat:4> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:4> \} \\ <var:W> := <nat:1> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:1> \} \\ <var:W> := <nat:4> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \cdot <var:y> ^ <nat:5> + <nat:4> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> + <nat:4> \} \\ <var:W> := <nat:3> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \cdot <var:y> ^ <nat:6> + <nat:4> \cdot <var:y> ^ <nat:5> + <nat:4> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:3> \} \\ <var:W> := <nat:4> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \cdot <var:y> ^ <nat:7> + <nat:4> \cdot <var:y> ^ <nat:6> + <nat:4> \cdot <var:y> ^ <nat:5> + <nat:4> \cdot <var:y> ^ <nat:4> + <nat:1> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> + <nat:4> \} \\ <var:W> := <nat:4> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \cdot <var:y> ^ <nat:8> + <nat:4> \cdot <var:y> ^ <nat:7> + <nat:4> \cdot <var:y> ^ <nat:6> + <nat:4> \cdot <var:y> ^ <nat:5> + <nat:1> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:4> \} \\ <var:W> := <nat:3> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \cdot <var:y> ^ <nat:9> + <nat:4> \cdot <var:y> ^ <nat:8> + <nat:4> \cdot <var:y> ^ <nat:7> + <nat:4> \cdot <var:y> ^ <nat:6> + <nat:1> \cdot <var:y> ^ <nat:5> + <nat:4> \cdot <var:y> ^ <nat:4> + <nat:3> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:3> \} \\ <var:W> := <nat:1> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \cdot <var:y> ^ <nat:10> + <nat:4> \cdot <var:y> ^ <nat:9> + <nat:4> \cdot <var:y> ^ <nat:8> + <nat:4> \cdot <var:y> ^ <nat:7> + <nat:1> \cdot <var:y> ^ <nat:6> + <nat:4> \cdot <var:y> ^ <nat:5> + <nat:3> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> + <nat:1> \} \\ <var:W> := <nat:4> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \cdot <var:y> ^ <nat:11> + <nat:4> \cdot <var:y> ^ <nat:10> + <nat:4> \cdot <var:y> ^ <nat:9> + <nat:4> \cdot <var:y> ^ <nat:8> + <nat:1> \cdot <var:y> ^ <nat:7> + <nat:4> \cdot <var:y> ^ <nat:6> + <nat:3> \cdot <var:y> ^ <nat:5> + <nat:4> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:3> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> + <nat:4> \} \\ <var:W> := <nat:1> + <var:W> * <var:P> ; \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \cdot <var:y> ^ <nat:12> + <nat:4> \cdot <var:y> ^ <nat:11> + <nat:4> \cdot <var:y> ^ <nat:10> + <nat:4> \cdot <var:y> ^ <nat:9> + <nat:1> \cdot <var:y> ^ <nat:8> + <nat:4> \cdot <var:y> ^ <nat:7> + <nat:3> \cdot <var:y> ^ <nat:6> + <nat:4> \cdot <var:y> ^ <nat:5> + <nat:4> \cdot <var:y> ^ <nat:4> + <nat:3> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:1> \} \\ <var:W> := <nat:4> + <var:W> * <var:P> \\ \{ <var:P> = <var:y> \land <var:W> = <nat:2> \cdot <var:y> ^ <nat:13> + <nat:4> \cdot <var:y> ^ <nat:12> + <nat:4> \cdot <var:y> ^ <nat:11> + <nat:4> \cdot <var:y> ^ <nat:10> + <nat:1> \cdot <var:y> ^ <nat:9> + <nat:4> \cdot <var:y> ^ <nat:8> + <nat:3> \cdot <var:y> ^ <nat:7> + <nat:4> \cdot <var:y> ^ <nat:6> + <nat:4> \cdot <var:y> ^ <nat:5> + <nat:3> \cdot <var:y> ^ <nat:4> + <nat:1> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:1> \cdot <var:y> + <nat:4> \} \end{eqnarray} Applying standard Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:W> := <nat:2> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:1> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:3> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:3> + <var:W> * <var:P> ; <var:W> := <nat:1> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> ; <var:W> := <nat:1> + <var:W> * <var:P> ; <var:W> := <nat:4> + <var:W> * <var:P> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:P> = <var:y> }} <def:poly> {{ <var:W> = <nat:2> * <var:y> ^ <nat:13> + <nat:4> * <var:y> ^ <nat:12> + <nat:4> * <var:y> ^ <nat:11> + <nat:4> * <var:y> ^ <nat:10> + <nat:1> * <var:y> ^ <nat:9> + <nat:4> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> * <var:y> ^ <nat:8> + <nat:4> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> * <var:y> ^ <nat:9> + <nat:4> * <var:y> ^ <nat:8> + <nat:4> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> * <var:y> ^ <nat:10> + <nat:4> * <var:y> ^ <nat:9> + <nat:4> * <var:y> ^ <nat:8> + <nat:4> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> * <var:y> ^ <nat:11> + <nat:4> * <var:y> ^ <nat:10> + <nat:4> * <var:y> ^ <nat:9> + <nat:4> * <var:y> ^ <nat:8> + <nat:1> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> * <var:y> ^ <nat:12> + <nat:4> * <var:y> ^ <nat:11> + <nat:4> * <var:y> ^ <nat:10> + <nat:4> * <var:y> ^ <nat:9> + <nat:1> * <var:y> ^ <nat:8> + <nat:4> * <var:y> ^ <nat:7> + <nat:3> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:y> /\ <var:W> = <nat:2> * <var:y> ^ <nat:13> + <nat:4> * <var:y> ^ <nat:12> + <nat:4> * <var:y> ^ <nat:11> + <nat:4> * <var:y> ^ <nat:10> + <nat:1> * <var:y> ^ <nat:9> + <nat:4> * <var:y> ^ <nat:8> + <nat:3> * <var:y> ^ <nat:7> + <nat:4> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 