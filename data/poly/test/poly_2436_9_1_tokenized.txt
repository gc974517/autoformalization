\begin{document} \begin{theorem} Define the following series of instructions as \begin{verbatim} <var:k1> := <var:x> ; <var:k2> := <var:k1> * <var:x> ; <var:k3> := <var:k2> * <var:x> ; <var:k0> := <nat:6> ; <var:k1> := <var:k1> * <nat:4> ; <var:k3> := <var:k3> * <nat:4> ; <var:M> := <var:k3> <var:M> := <var:M> + <var:k1> <var:M> := <var:M> + <var:k0> \end{verbatim} Allowing ( for positive integer coefficients $ <var:E> $ ) it to be that $ <var:x> = <var:E> $ before the evaluation of this program it holds that we see $ <var:M> = <nat:4> \cdot <var:E> ^ <nat:3> + <nat:4> \cdot <var:E> + <nat:6> $ . \end{theorem} \begin{proof} The argument for the segment of code is accomplished by usual Hoare reasoning . Moving on to the proceeding step seen in the list of commands , we see the assignment code \verb | <var:k1> := <var:x> ; | . This command transfers $ \{ <var:x> = <var:E> \} $ toward $ \{ <var:x> = <var:E> \land <var:k1> = <var:E> \} $ . Taking a look at the next step contained in our segment of code , we have the code \verb | <var:k2> := <var:k1> * <var:x> ; | . This redefines the condition $ \{ <var:x> = <var:E> \land <var:k1> = <var:E> \} $ into the condition $ \{ <var:x> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \} $ . Taking another step toward the following bit of code contained in the code , we see the variable assignmet line defining $ <var:k2> * <var:x> $ as $ <var:k3>$ . This command transfers the condition $ \{ <var:x> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \} $ into the condition $ \{ <var:x> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \} $ . This is given with the assignment rule given by typical Hoare techniques . Looking at the next command in our program , we see the assignment line \verb | <var:k0> := <nat:6> ; | . This command advances $ \{ <var:x> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \} $ to the postcondition $ \{ <var:x> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k0> = <nat:6> \} $ . Keeping momentum , we see the variable update line \verb | <var:k1> := <var:k1> * <nat:4> ; | . This command advances the condition $ \{ <var:x> = <var:E> \land <var:k1> = <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k0> = <nat:6> \} $ to $ \{ <var:x> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k0> = <nat:6> \} $ . This is shown to be logically sound with the assignment law obtained from typical Hoare logic . After , we have the variable update statement assigning $ <var:k3> * <nat:4> $ into $ <var:k3>$ . This forwards the precondition $ \{ <var:x> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <var:E> ^ <nat:3> \land <var:k0> = <nat:6> \} $ into the postcondition $ \{ <var:x> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <nat:4> * <var:E> ^ <nat:3> \land <var:k0> = <nat:6> \} $ . This is guaranteed using the assignment law defined by standard Hoare techniques . Moving on to the proceeding step in the code , we have the assignment statement \verb | <var:M> := <var:k3> | . This statement redefines the condition $ \{ <var:x> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k3> = <nat:4> * <var:E> ^ <nat:3> \land <var:k0> = <nat:6> \} $ to the postcondition $ \{ <var:x> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k0> = <nat:6> \land <var:M> = <nat:4> * <var:E> ^ <nat:3> \} $ . Going forward , we have the environment update code \verb | <var:M> := <var:M> + <var:k1> | . This code moves $ \{ <var:x> = <var:E> \land <var:k1> = <nat:4> * <var:E> \land <var:k2> = <var:E> ^ <nat:2> \land <var:k0> = <nat:6> \land <var:M> = <nat:4> * <var:E> ^ <nat:3> \} $ into $ \{ <var:x> = <var:E> \land <var:k0> = <nat:6> \land <var:M> = <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> \} $ . Now , we see the assignment statement \verb | <var:M> := <var:M> + <var:k0> | . This transfers $ \{ <var:x> = <var:E> \land <var:k0> = <nat:6> \land <var:M> = <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> \} $ into the condition $ \{ <var:x> = <var:E> \land <var:M> = <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> + <nat:6> \} $ . This is guaranteed through the assignment inference rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:x> = <var:E> }} <var:k1> := <var:x> ; <var:k2> := <var:k1> * <var:x> ; <var:k3> := <var:k2> * <var:x> ; <var:k0> := <nat:6> ; <var:k1> := <var:k1> * <nat:4> ; <var:k3> := <var:k3> * <nat:4> ; <var:M> := <var:k3> <var:M> := <var:M> + <var:k1> <var:M> := <var:M> + <var:k0> {{ <var:M> = <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:k1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:k1> = <var:E> /\ <var:k2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:k1> = <var:E> /\ <var:k2> = <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:k1> = <var:E> /\ <var:k2> = <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:k1> = <nat:4> * <var:E> /\ <var:k2> = <var:E> ^ <nat:2> /\ <var:k3> = <var:E> ^ <nat:3> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:k1> = <nat:4> * <var:E> /\ <var:k2> = <var:E> ^ <nat:2> /\ <var:k3> = <nat:4> * <var:E> ^ <nat:3> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:k1> = <nat:4> * <var:E> /\ <var:k2> = <var:E> ^ <nat:2> /\ <var:k0> = <nat:6> /\ <var:M> = <nat:4> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:k0> = <nat:6> /\ <var:M> = <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:E> /\ <var:M> = <nat:4> * <var:E> ^ <nat:3> + <nat:4> * <var:E> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 