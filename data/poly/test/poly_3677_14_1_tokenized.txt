\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} such that \begin{verbatim} <var:n1> := <var:h> ; <var:n2> := <var:n1> * <var:h> ; <var:n3> := <var:n2> * <var:h> ; <var:n4> := <var:n3> * <var:h> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:6> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:6> ; <var:n4> := <var:n4> * <nat:4> ; <var:q> := <var:n4> <var:q> := <var:q> + <var:n3> <var:q> := <var:q> + <var:n2> <var:q> := <var:q> + <var:n1> <var:q> := <var:q> + <var:n0> \end{verbatim} Assume that $ <var:h> = <var:C> $ ahead of executing the program , it follows that we see $ <var:q> = <nat:4> \cdot <var:C> ^ <nat:4> + <nat:6> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:6> \cdot <var:C> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for our program can be demonstrated through usual Hoare logic . Jumping to the subsequent line of code seen in our list of instructions , we see the environment update code letting $ <var:h> $ into $ <var:n1>$ . This moves the precondition $ \{ <var:h> = <var:C> \} $ to the condition $ \{ <var:h> = <var:C> \land <var:n1> = <var:C> \} $ . This is guaranteed with the assignment inference rule defined by typical Hoare techniques . Stepping forward , we have the variable binding code giving $ <var:n1> * <var:h> $ into $ <var:n2>$ . This moves the condition $ \{ <var:h> = <var:C> \land <var:n1> = <var:C> \} $ into $ \{ <var:h> = <var:C> \land <var:n1> = <var:C> \land <var:n2> = <var:C> ^ <nat:2> \} $ . This is deduced by the assignment inference rule obtained from typical Hoare reasoning . Paying attention to the proceeding command found in our series of instructions , we have the variable update line \verb | <var:n3> := <var:n2> * <var:h> ; | . This takes the precondition $ \{ <var:h> = <var:C> \land <var:n1> = <var:C> \land <var:n2> = <var:C> ^ <nat:2> \} $ into the postcondition $ \{ <var:h> = <var:C> \land <var:n1> = <var:C> \land <var:n2> = <var:C> ^ <nat:2> \land <var:n3> = <var:C> ^ <nat:3> \} $ . This is shown using the assignment scheme given by usual Hoare techniques . Going to the next step , the variable assignmet command \verb | <var:n4> := <var:n3> * <var:h> ; | . This redefines the precondition $ \{ <var:h> = <var:C> \land <var:n1> = <var:C> \land <var:n2> = <var:C> ^ <nat:2> \land <var:n3> = <var:C> ^ <nat:3> \} $ as $ \{ <var:h> = <var:C> \land <var:n1> = <var:C> \land <var:n2> = <var:C> ^ <nat:2> \land <var:n3> = <var:C> ^ <nat:3> \land <var:n4> = <var:C> ^ <nat:4> \} $ . Immediately after , we see the assignment command \verb | <var:n0> := <nat:4> ; | . This takes the precondition $ \{ <var:h> = <var:C> \land <var:n1> = <var:C> \land <var:n2> = <var:C> ^ <nat:2> \land <var:n3> = <var:C> ^ <nat:3> \land <var:n4> = <var:C> ^ <nat:4> \} $ toward $ \{ <var:h> = <var:C> \land <var:n1> = <var:C> \land <var:n2> = <var:C> ^ <nat:2> \land <var:n3> = <var:C> ^ <nat:3> \land <var:n4> = <var:C> ^ <nat:4> \land <var:n0> = <nat:4> \} $ . Taking another step toward the following bit of code found in our series of commands , the statement \verb | <var:n1> := <var:n1> * <nat:6> ; | . This redefines $ \{ <var:h> = <var:C> \land <var:n1> = <var:C> \land <var:n2> = <var:C> ^ <nat:2> \land <var:n3> = <var:C> ^ <nat:3> \land <var:n4> = <var:C> ^ <nat:4> \land <var:n0> = <nat:4> \} $ into $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n2> = <var:C> ^ <nat:2> \land <var:n3> = <var:C> ^ <nat:3> \land <var:n4> = <var:C> ^ <nat:4> \land <var:n0> = <nat:4> \} $ . Going forward , the environment update statement defining $ <var:n2> * <nat:2> $ toward $ <var:n2>$ . This line moves $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n2> = <var:C> ^ <nat:2> \land <var:n3> = <var:C> ^ <nat:3> \land <var:n4> = <var:C> ^ <nat:4> \land <var:n0> = <nat:4> \} $ as the condition $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n2> = <nat:2> * <var:C> ^ <nat:2> \land <var:n3> = <var:C> ^ <nat:3> \land <var:n4> = <var:C> ^ <nat:4> \land <var:n0> = <nat:4> \} $ . Moving forward to the subsequent command seen in our list of commands , the assignment line \verb | <var:n3> := <var:n3> * <nat:6> ; | . This command forwards the condition $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n2> = <nat:2> * <var:C> ^ <nat:2> \land <var:n3> = <var:C> ^ <nat:3> \land <var:n4> = <var:C> ^ <nat:4> \land <var:n0> = <nat:4> \} $ to $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n2> = <nat:2> * <var:C> ^ <nat:2> \land <var:n3> = <nat:6> * <var:C> ^ <nat:3> \land <var:n4> = <var:C> ^ <nat:4> \land <var:n0> = <nat:4> \} $ . This is deduced through the assignment law given in Hoare logic . Jumping to the subsequent step found in the series of commands , we see the variable update statement assigning $ <var:n4> * <nat:4> $ toward $ <var:n4>$ . This command takes $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n2> = <nat:2> * <var:C> ^ <nat:2> \land <var:n3> = <nat:6> * <var:C> ^ <nat:3> \land <var:n4> = <var:C> ^ <nat:4> \land <var:n0> = <nat:4> \} $ as $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n2> = <nat:2> * <var:C> ^ <nat:2> \land <var:n3> = <nat:6> * <var:C> ^ <nat:3> \land <var:n4> = <nat:4> * <var:C> ^ <nat:4> \land <var:n0> = <nat:4> \} $ . This is ensured through the assignment rule in standard Hoare logic . Moving forward , the variable assignmet code \verb | <var:q> := <var:n4> | . This moves the condition $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n2> = <nat:2> * <var:C> ^ <nat:2> \land <var:n3> = <nat:6> * <var:C> ^ <nat:3> \land <var:n4> = <nat:4> * <var:C> ^ <nat:4> \land <var:n0> = <nat:4> \} $ toward the condition $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n2> = <nat:2> * <var:C> ^ <nat:2> \land <var:n3> = <nat:6> * <var:C> ^ <nat:3> \land <var:n0> = <nat:4> \land <var:q> = <nat:4> * <var:C> ^ <nat:4> \} $ . This is sound using the assignment inference rule from typical Hoare logic . Now , we see the line \verb | <var:q> := <var:q> + <var:n3> | . This redefines $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n2> = <nat:2> * <var:C> ^ <nat:2> \land <var:n3> = <nat:6> * <var:C> ^ <nat:3> \land <var:n0> = <nat:4> \land <var:q> = <nat:4> * <var:C> ^ <nat:4> \} $ to $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n2> = <nat:2> * <var:C> ^ <nat:2> \land <var:n0> = <nat:4> \land <var:q> = <nat:4> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> \} $ . This is guaranteed by the assignment law from usual Hoare techniques . Taking another step toward the following line of code seen in our set of instructions , the variable assignmet statement \verb | <var:q> := <var:q> + <var:n2> | . This takes the condition $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n2> = <nat:2> * <var:C> ^ <nat:2> \land <var:n0> = <nat:4> \land <var:q> = <nat:4> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> \} $ to the postcondition $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n0> = <nat:4> \land <var:q> = <nat:4> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> \} $ . Advancing to the following command seen in the set of instructions , we have the environment update code \verb | <var:q> := <var:q> + <var:n1> | . This command advances the precondition $ \{ <var:h> = <var:C> \land <var:n1> = <nat:6> * <var:C> \land <var:n0> = <nat:4> \land <var:q> = <nat:4> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> \} $ as the postcondition $ \{ <var:h> = <var:C> \land <var:n0> = <nat:4> \land <var:q> = <nat:4> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:6> * <var:C> \} $ . This is ensured by the assignment inference rule of Hoare techniques . Paying attention to the proceeding line contained in the program , the variable update statement \verb | <var:q> := <var:q> + <var:n0> | . This moves the condition $ \{ <var:h> = <var:C> \land <var:n0> = <nat:4> \land <var:q> = <nat:4> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:6> * <var:C> \} $ toward $ \{ <var:h> = <var:C> \land <var:q> = <nat:4> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:6> * <var:C> + <nat:4> \} $ . This is rigorously given with the assignment law defined by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Definition <var:n4> : string := " <var:n4> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:h> = <var:C> }} <var:n1> := <var:h> ; <var:n2> := <var:n1> * <var:h> ; <var:n3> := <var:n2> * <var:h> ; <var:n4> := <var:n3> * <var:h> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:6> ; <var:n2> := <var:n2> * <nat:2> ; <var:n3> := <var:n3> * <nat:6> ; <var:n4> := <var:n4> * <nat:4> ; <var:q> := <var:n4> <var:q> := <var:q> + <var:n3> <var:q> := <var:q> + <var:n2> <var:q> := <var:q> + <var:n1> <var:q> := <var:q> + <var:n0> {{ <var:q> = <nat:4> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:6> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:n1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:n1> = <var:C> /\ <var:n2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:n1> = <var:C> /\ <var:n2> = <var:C> ^ <nat:2> /\ <var:n3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:n1> = <var:C> /\ <var:n2> = <var:C> ^ <nat:2> /\ <var:n3> = <var:C> ^ <nat:3> /\ <var:n4> = <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:n1> = <var:C> /\ <var:n2> = <var:C> ^ <nat:2> /\ <var:n3> = <var:C> ^ <nat:3> /\ <var:n4> = <var:C> ^ <nat:4> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:n1> = <nat:6> * <var:C> /\ <var:n2> = <var:C> ^ <nat:2> /\ <var:n3> = <var:C> ^ <nat:3> /\ <var:n4> = <var:C> ^ <nat:4> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:n1> = <nat:6> * <var:C> /\ <var:n2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:n3> = <var:C> ^ <nat:3> /\ <var:n4> = <var:C> ^ <nat:4> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:n1> = <nat:6> * <var:C> /\ <var:n2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:n3> = <nat:6> * <var:C> ^ <nat:3> /\ <var:n4> = <var:C> ^ <nat:4> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:n1> = <nat:6> * <var:C> /\ <var:n2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:n3> = <nat:6> * <var:C> ^ <nat:3> /\ <var:n4> = <nat:4> * <var:C> ^ <nat:4> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:n1> = <nat:6> * <var:C> /\ <var:n2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:n3> = <nat:6> * <var:C> ^ <nat:3> /\ <var:n0> = <nat:4> /\ <var:q> = <nat:4> * <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:n1> = <nat:6> * <var:C> /\ <var:n2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:n0> = <nat:4> /\ <var:q> = <nat:4> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:n1> = <nat:6> * <var:C> /\ <var:n0> = <nat:4> /\ <var:q> = <nat:4> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:n0> = <nat:4> /\ <var:q> = <nat:4> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:6> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:C> /\ <var:q> = <nat:4> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:6> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 