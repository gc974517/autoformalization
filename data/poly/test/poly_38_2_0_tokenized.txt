\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:7> ; <var:b> := <var:L0> \end{verbatim} \end{definition} \begin{theorem} Take a set of instructions <def:poly> . Allow ( letting $ <var:K> $ ) that $ <var:e> = <var:K> $ before interpreting this list of commands , then we see $ <var:b> = <nat:7> $ . \end{theorem} \begin{proof} The proof of the set of commands is evident using usual Hoare logic . Moving onward , we see \[ \begin{tabular} {rcl} \{ <var:e> = <var:K> \} & <var:L0> := <nat:7> & \{ <var:e> = <var:K> \land <var:L0> = <nat:7> \} \end{tabular} This is guaranteed by the variable binding rule of standard Hoare logic . Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:e> = <var:K> \} & <var:L0> := <nat:7> & \{ <var:e> = <var:K> \land <var:L0> = <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <def:poly> := <var:L0> := <nat:7> ; <var:b> := <var:L0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:e> = <var:K> }} <def:poly> {{ <var:b> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:L0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:b> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 