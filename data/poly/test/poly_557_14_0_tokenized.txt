\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:L0> := <nat:1> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:v> ; <var:L2> := <nat:2> ; <var:L2> := <var:L2> * <var:v> ; <var:L2> := <var:L2> * <var:v> ; <var:L3> := <nat:5> ; <var:L3> := <var:L3> * <var:v> ; <var:L3> := <var:L3> * <var:v> ; <var:L3> := <var:L3> * <var:v> ; <var:c> := <var:L3> ; <var:c> := <var:c> + <var:L2> ; <var:c> := <var:c> + <var:L1> ; <var:c> := <var:c> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:v> = <var:n> $ before interpreting our segment of code , it holds that we see $ <var:c> = <nat:5> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for this set of instructions can be given by usual Hoare techniques . Considering the subsequent lines of codecontained in our program , we see \verb | { <var:v> = <var:n> } <var:L0> := <nat:1> { <var:v> = <var:n> \land <var:L0> = <nat:1> } | , \verb | { <var:v> = <var:n> \land <var:L0> = <nat:1> } <var:L1> := <nat:2> { <var:v> = <var:n> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> } | , \verb | { <var:v> = <var:n> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> } <var:L1> := <var:L1> * <var:v> { <var:v> = <var:n> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> \cdot <var:n> } | , \verb | { <var:v> = <var:n> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> \cdot <var:n> } <var:L2> := <nat:2> { <var:v> = <var:n> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> \cdot <var:n> \land <var:L2> = <nat:2> } | and \verb | { <var:v> = <var:n> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> \cdot <var:n> \land <var:L2> = <nat:2> } <var:L2> := <var:L2> * <var:v> { <var:v> = <var:n> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> \cdot <var:n> \land <var:L2> = <nat:2> \cdot <var:n> } | . Advancing on , we have \verb | { <var:v> = <var:n> } <var:L0> := <nat:1> { <var:v> = <var:n> \land <var:L0> = <nat:1> } | and \verb | { <var:v> = <var:n> \land <var:L0> = <nat:1> } <var:L1> := <nat:2> { <var:v> = <var:n> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> } | . This is given through the variable update rule given by standard Hoare logic . Shifting focus toward the subsequent steps found in the program , we see \verb | { <var:v> = <var:n> } <var:L0> := <nat:1> { <var:v> = <var:n> \land <var:L0> = <nat:1> } | , \verb | { <var:v> = <var:n> \land <var:L0> = <nat:1> } <var:L1> := <nat:2> { <var:v> = <var:n> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> } | and \verb | { <var:v> = <var:n> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> } <var:L1> := <var:L1> * <var:v> { <var:v> = <var:n> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> \cdot <var:n> } | . Going to the next step , we have \verb | { <var:v> = <var:n> } <var:L0> := <nat:1> { <var:v> = <var:n> \land <var:L0> = <nat:1> } | and \verb | { <var:v> = <var:n> \land <var:L0> = <nat:1> } <var:L1> := <nat:2> { <var:v> = <var:n> \land <var:L0> = <nat:1> \land <var:L1> = <nat:2> } | . Observing the following piece of code contained in the code segment , \verb | { <var:v> = <var:n> } <var:L0> := <nat:1> { <var:v> = <var:n> \land <var:L0> = <nat:1> } | . This is guaranteed by the environment update scheme given in Hoare techniques . Taking a look at the next bit of code seen in the list of instructions , we have \verb | { <var:v> = <var:n> } <var:L0> := <nat:1> { <var:v> = <var:n> \land <var:L0> = <nat:1> } | . This is sound by the binding inference rule obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L0> := <nat:1> ; <var:L1> := <nat:2> ; <var:L1> := <var:L1> * <var:v> ; <var:L2> := <nat:2> ; <var:L2> := <var:L2> * <var:v> ; <var:L2> := <var:L2> * <var:v> ; <var:L3> := <nat:5> ; <var:L3> := <var:L3> * <var:v> ; <var:L3> := <var:L3> * <var:v> ; <var:L3> := <var:L3> * <var:v> ; <var:c> := <var:L3> ; <var:c> := <var:c> + <var:L2> ; <var:c> := <var:c> + <var:L1> ; <var:c> := <var:c> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:v> = <var:n> }} <def:poly> {{ <var:c> = <nat:5> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:2> * <var:n> /\ <var:L2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:2> * <var:n> /\ <var:L2> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:2> * <var:n> /\ <var:L2> = <nat:2> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:2> * <var:n> /\ <var:L2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:L3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:2> * <var:n> /\ <var:L2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:L3> = <nat:5> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:2> * <var:n> /\ <var:L2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:L3> = <nat:5> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:2> * <var:n> /\ <var:L2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:L3> = <nat:5> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:2> * <var:n> /\ <var:L2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:c> = <nat:5> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:L0> = <nat:1> /\ <var:L1> = <nat:2> * <var:n> /\ <var:c> = <nat:5> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:L0> = <nat:1> /\ <var:c> = <nat:5> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:n> /\ <var:c> = <nat:5> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 