\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:7> ; <var:k1> := <nat:9> ; <var:k1> := <var:k1> * <var:v> ; <var:L> := <var:k1> ; <var:L> := <var:L> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:v> = <var:h> $ for any whole numbers $ <var:h> $ ahead of executing the series of instructions it holds that we see $ <var:L> = <nat:9> * <var:h> + <nat:7> $ when series of instructions has exited . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is demonstrated with Hoare techniques . Shifting focus toward the upcoming statements contained in our list of instructions , we have \begin{verbatim} { <var:v> = <var:h> } <var:k0> := <nat:7> { <var:v> = <var:h> \land <var:k0> = <nat:7> } { <var:v> = <var:h> \land <var:k0> = <nat:7> } <var:k1> := <nat:9> { <var:v> = <var:h> \land <var:k0> = <nat:7> \land <var:k1> = <nat:9> } { <var:v> = <var:h> \land <var:k0> = <nat:7> \land <var:k1> = <nat:9> } <var:k1> := <var:k1> * <var:v> { <var:v> = <var:h> \land <var:k0> = <nat:7> \land <var:k1> = <nat:9> \times <var:h> } { <var:v> = <var:h> \land <var:k0> = <nat:7> \land <var:k1> = <nat:9> \times <var:h> } <var:L> := <var:k1> { <var:v> = <var:h> \land <var:k0> = <nat:7> \land <var:L> = <nat:9> \times <var:h> } { <var:v> = <var:h> \land <var:k0> = <nat:7> \land <var:L> = <nat:9> \times <var:h> } <var:L> := <var:L> + <var:k0{ <var:v> = <var:h> \land <var:L> = <nat:9> \times <var:h> + <nat:7> } \end{verbatim} This is rigorously given using the variable update law given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k0> := <nat:7> ; <var:k1> := <nat:9> ; <var:k1> := <var:k1> * <var:v> ; <var:L> := <var:k1> ; <var:L> := <var:L> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:v> = <var:h> }} <def:poly> {{ <var:L> = <nat:9> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:k0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:k0> = <nat:7> /\ <var:k1> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:k0> = <nat:7> /\ <var:L> = <nat:9> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:L> = <nat:9> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 