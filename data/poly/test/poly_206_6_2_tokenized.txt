\begin{document} \begin{theorem} Let the following code in \emph{Imp} : \begin{verbatim} <var:E> := <nat:4> ; <var:E> := <var:E> * <var:N> ; <var:E> := <var:E> * <var:N> ; <var:E> := <nat:2> + <var:E> * <var:N> ; <var:E> := <nat:2> + <var:E> * <var:N> ; <var:E> := <nat:2> + <var:E> * <var:N> \end{verbatim} Given --- taking natural coefficients $ <var:L> $ --- it to hold that $ <var:N> = <var:L> $ ahead of running our code then $ <var:E> = <nat:4> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:2> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques gives us : \begin{eqnarray} \{ <var:N> = <var:L> \} \\ <var:E> := <nat:4> ; \\ \{ <var:N> = <var:L> \land <var:E> = <nat:4> \} \\ <var:E> := <var:E> * <var:N> ; \\ \{ <var:N> = <var:L> \land <var:E> = <nat:4> \times <var:L> + \} \\ <var:E> := <var:E> * <var:N> ; \\ \{ <var:N> = <var:L> \land <var:E> = <nat:4> \times <var:L> ^ <nat:2> + \} \\ <var:E> := <nat:2> + <var:E> * <var:N> ; \\ \{ <var:N> = <var:L> \land <var:E> = <nat:4> \times <var:L> ^ <nat:3> + <nat:2> \} \\ <var:E> := <nat:2> + <var:E> * <var:N> ; \\ \{ <var:N> = <var:L> \land <var:E> = <nat:4> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> + <nat:2> \} \\ <var:E> := <nat:2> + <var:E> * <var:N> \\ \{ <var:N> = <var:L> \land <var:E> = <nat:4> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:2> \} \end{eqnarray} As a result , this list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:N> = <var:L> }} <var:E> := <nat:4> ; <var:E> := <var:E> * <var:N> ; <var:E> := <var:E> * <var:N> ; <var:E> := <nat:2> + <var:E> * <var:N> ; <var:E> := <nat:2> + <var:E> * <var:N> ; <var:E> := <nat:2> + <var:E> * <var:N> {{ <var:E> = <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:E> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:E> = <nat:4> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:E> = <nat:4> * <var:L> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:E> = <nat:4> * <var:L> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:E> = <nat:4> * <var:L> ^ <nat:4> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:L> /\ <var:E> = <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 