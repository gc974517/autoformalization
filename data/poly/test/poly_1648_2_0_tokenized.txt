\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:1> ; <var:H> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> . Assuming that we have $ <var:B> = <var:F> $ prior to running our set of instructions , it must be that we see $ <var:H> = <nat:1> $ . \end{theorem} \begin{proof} The argument for our program can be given using Hoare techniques . Now , we have \[ \begin{tabular} {rcl} \{ <var:B> = <var:F> \} & <var:q0> := <nat:1> & \{ <var:B> = <var:F> \land <var:q0> = <nat:1> \} \end{tabular} Immediately following , we see \[ \begin{tabular} {rcl} \{ <var:B> = <var:F> \} & <var:q0> := <nat:1> & \{ <var:B> = <var:F> \land <var:q0> = <nat:1> \} \end{tabular} This is rigorously given by the variable update inference rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:1> ; <var:H> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:B> = <var:F> }} <def:poly> {{ <var:H> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:F> /\ <var:H> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 