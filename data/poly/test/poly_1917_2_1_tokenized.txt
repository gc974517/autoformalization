\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:4> ; <var:L> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Given that we have $ <var:G> = <var:B> $ --- taking $ <var:B> \in \mathbb{Z}^+ $ --- prior to running the series of commands , it follows that we have $ <var:L> = <nat:4> $ . \end{theorem} \begin{proof} The proof of our set of commands can be given by usual Hoare reasoning . Honing in on the upcoming commands seen in our program , \[ \begin{tabular} {rcl} \{ <var:G> = <var:B> \} & <var:p0> := <nat:4> & \{ <var:G> = <var:B> \land <var:p0> = <nat:4> \} \\ \{ <var:G> = <var:B> \land <var:p0> = <nat:4> \} & <var:L> := <var:p0& \{ <var:G> = <var:B> \land <var:L> = <nat:4> \} \end{tabular} This is shown by the variable binding rule found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:4> ; <var:L> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:G> = <var:B> }} <def:poly> {{ <var:L> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:B> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:B> /\ <var:L> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 