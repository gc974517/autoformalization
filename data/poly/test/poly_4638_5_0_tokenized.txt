\begin{document} \begin{theorem} Take a series of instructions : \begin{verbatim} <var:U0> := <nat:4> ; <var:U1> := <nat:1> ; <var:U1> := <var:U1> * <var:k> ; <var:R> := <var:U1> ; <var:R> := <var:R> + <var:U0> \end{verbatim} Given that we have $ <var:k> = <var:N> $ prior to the execution of this set of instructions it must be that $ <var:R> = <nat:1> * <var:N> + <nat:4> $ when list of instructions terminates . \end{theorem} \begin{proof} Applying usual Hoare logic produces : \begin{eqnarray} \{ <var:k> = <var:N> \} \\ <var:U0> := <nat:4> ; \\ \{ <var:k> = <var:N> \land <var:U0> = <nat:4> \} \\ <var:U1> := <nat:1> ; \\ \{ <var:k> = <var:N> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> \} \\ <var:U1> := <var:U1> * <var:k> ; \\ \{ <var:k> = <var:N> \land <var:U0> = <nat:4> \land <var:U1> = <nat:1> \cdot <var:N> \} \\ <var:R> := <var:U1> ; \\ \{ <var:k> = <var:N> \land <var:U0> = <nat:4> \land <var:R> = <nat:1> \cdot <var:N> \} \\ <var:R> := <var:R> + <var:U0> \\ \{ <var:k> = <var:N> \land <var:R> = <nat:1> \cdot <var:N> + <nat:4> \} \end{eqnarray} Given the above , our list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:k> = <var:N> }} <var:U0> := <nat:4> ; <var:U1> := <nat:1> ; <var:U1> := <var:U1> * <var:k> ; <var:R> := <var:U1> ; <var:R> := <var:R> + <var:U0> {{ <var:R> = <nat:1> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:U0> = <nat:4> /\ <var:U1> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:U0> = <nat:4> /\ <var:R> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:N> /\ <var:R> = <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 