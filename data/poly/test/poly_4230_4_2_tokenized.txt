\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:s> := <nat:3> ; <var:s> := <nat:3> + <var:s> * <var:G> ; <var:s> := <nat:4> + <var:s> * <var:G> ; <var:s> := <nat:2> + <var:s> * <var:G> \end{verbatim} \end{definition} \begin{theorem} Given , letting positive coefficients $ <var:n> $ , it to be that $ <var:G> = <var:n> $ before the evaluation of the program , it holds that we have $ <var:s> = <nat:3> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:2> $ . \end{theorem} \begin{proof} Proving correctness for our segment of code is done using Hoare techniques . Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:G> = <var:n> \} & <var:s> := <nat:3> & \{ <var:G> = <var:n> \land <var:s> = <nat:3> \} \end{tabular} This is known to be sound by the variable binding law given by Hoare reasoning . Further , \[ \begin{tabular} {rcl} \{ <var:G> = <var:n> \} & <var:s> := <nat:3> & \{ <var:G> = <var:n> \land <var:s> = <nat:3> \} \\ \{ <var:G> = <var:n> \land <var:s> = <nat:3> \} & <var:s> := <nat:3> + <var:s> * <var:G> & \{ <var:G> = <var:n> \land <var:s> = <nat:3> \cdot <var:n> + <nat:3> \} \\ \{ <var:G> = <var:n> \land <var:s> = <nat:3> \cdot <var:n> + <nat:3> \} & <var:s> := <nat:4> + <var:s> * <var:G> & \{ <var:G> = <var:n> \land <var:s> = <nat:3> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> + <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:s> := <nat:3> ; <var:s> := <nat:3> + <var:s> * <var:G> ; <var:s> := <nat:4> + <var:s> * <var:G> ; <var:s> := <nat:2> + <var:s> * <var:G> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:G> = <var:n> }} <def:poly> {{ <var:s> = <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:s> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:s> = <nat:3> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:s> = <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:n> /\ <var:s> = <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 