\begin{document} \begin{theorem} We define the following segment of code such that \begin{verbatim} <var:e0> := <nat:9> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:H> ; <var:L> := <var:e1> ; <var:L> := <var:L> + <var:e0> \end{verbatim} Given that $ <var:H> = <var:x> $ prior to executing this list of instructions , then we see $ <var:L> = <nat:5> * <var:x> + <nat:9> $ . \end{theorem} \begin{proof} The course of logic for the set of instructions can be shown through typical Hoare reasoning . Moving on to the next lines of codeseen in the list of commands , \begin{verbatim} { <var:H> = <var:x> } <var:e0> := <nat:9> { <var:H> = <var:x> \land <var:e0> = <nat:9> } { <var:H> = <var:x> \land <var:e0> = <nat:9> } <var:e1> := <nat:5> { <var:H> = <var:x> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> } { <var:H> = <var:x> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> } <var:e1> := <var:e1> * <var:H> { <var:H> = <var:x> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> \times <var:x> } \end{verbatim} After , we have \begin{verbatim} { <var:H> = <var:x> } <var:e0> := <nat:9> { <var:H> = <var:x> \land <var:e0> = <nat:9> } { <var:H> = <var:x> \land <var:e0> = <nat:9> } <var:e1> := <nat:5> { <var:H> = <var:x> \land <var:e0> = <nat:9> \land <var:e1> = <nat:5> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:H> = <var:x> }} <var:e0> := <nat:9> ; <var:e1> := <nat:5> ; <var:e1> := <var:e1> * <var:H> ; <var:L> := <var:e1> ; <var:L> := <var:L> + <var:e0> {{ <var:L> = <nat:5> * <var:x> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:e0> = <nat:9> /\ <var:e1> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:e0> = <nat:9> /\ <var:L> = <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:L> = <nat:5> * <var:x> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 