\begin{document} \begin{theorem} We define the following code in \emph{Imp} as \begin{verbatim} <var:Q1> := <var:i> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:7> ; <var:o> := <var:Q1> <var:o> := <var:o> + <var:Q0> \end{verbatim} Given $ <var:i> = <var:W> $ before evaluating the list of commands , it follows that we have $ <var:o> = <nat:7> * <var:W> + <nat:7> $ after list of commands has exited . \end{theorem} \begin{proof} Observe that the following decorated list of commands . \begin{eqnarray} \{ <var:i> = <var:W> \} \\ <var:Q1> := <var:i> ; \\ \{ <var:i> = <var:W> \land <var:Q1> = <var:W> \} \\ <var:Q0> := <nat:7> ; \\ \{ <var:i> = <var:W> \land <var:Q1> = <var:W> \land <var:Q0> = <nat:7> \} \\ <var:Q1> := <var:Q1> * <nat:7> ; \\ \{ <var:i> = <var:W> \land <var:Q1> = <nat:7> \times <var:W> \land <var:Q0> = <nat:7> \} \\ <var:o> := <var:Q1> \\ \{ <var:i> = <var:W> \land <var:Q0> = <nat:7> \land <var:o> = <nat:7> \times <var:W> \} \\ <var:o> := <var:o> + <var:Q0> \\ \{ <var:i> = <var:W> \land <var:o> = <nat:7> \times <var:W> + <nat:7> \} \end{eqnarray} Utilizing standard Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:i> = <var:W> }} <var:Q1> := <var:i> ; <var:Q0> := <nat:7> ; <var:Q1> := <var:Q1> * <nat:7> ; <var:o> := <var:Q1> <var:o> := <var:o> + <var:Q0> {{ <var:o> = <nat:7> * <var:W> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:Q1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:Q1> = <var:W> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:Q1> = <nat:7> * <var:W> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:Q0> = <nat:7> /\ <var:o> = <nat:7> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:W> /\ <var:o> = <nat:7> * <var:W> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 