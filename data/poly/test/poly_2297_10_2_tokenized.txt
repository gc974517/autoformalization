\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:x> := <nat:4> ; <var:x> := <var:x> * <var:J> ; <var:x> := <nat:4> + <var:x> * <var:J> ; <var:x> := <var:x> * <var:J> ; <var:x> := <nat:3> + <var:x> * <var:J> ; <var:x> := <nat:1> + <var:x> * <var:J> ; <var:x> := <nat:4> + <var:x> * <var:J> ; <var:x> := <nat:3> + <var:x> * <var:J> ; <var:x> := <nat:1> + <var:x> * <var:J> ; <var:x> := <nat:3> + <var:x> * <var:J> \end{verbatim} Assuming ( given any natural coefficients $ <var:b> $ ) it to hold that $ <var:J> = <var:b> $ before interpreting this code segment , it follows that we see $ <var:x> = <nat:4> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:7> + <nat:3> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:3> $ when series of instructions is done . \end{theorem} \begin{proof} The proof of our code can be done with Hoare logic . Taking another step toward the subsequent step contained in our series of commands , we see the variable assignmet code defining $ <nat:4> $ toward $ <var:x>$ . This statement transfers the condition $ \{ <var:J> = <var:b> \} $ as the postcondition $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> \} $ . Focusing on the next line seen in the set of commands , we have the variable assignmet code \verb | <var:x> := <var:x> * <var:J> ; | . This advances $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> \} $ to the postcondition $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> + \} $ . This is known to be sound with the assignment inference rule found in standard Hoare reasoning . Moving on , we have the assignment command yielding $ <nat:4> + <var:x> * <var:J> $ to $ <var:x>$ . This command moves the condition $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> + \} $ toward the condition $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:2> + <nat:4> \} $ . This is ensured with the assignment law obtained from Hoare logic . Jumping to the following command in our set of instructions , the binding command defining $ <var:x> * <var:J> $ to $ <var:x>$ . This command forwards $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:2> + <nat:4> \} $ as $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> + \} $ . Observing the proceeding piece of code found in our series of instructions , the assignment code binding $ <nat:3> + <var:x> * <var:J> $ into $ <var:x>$ . This transfers the condition $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> + \} $ toward the condition $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> \} $ . This is guaranteed with the assignment scheme given by typical Hoare techniques . Shifting focus toward the subsequent piece of code found in our segment of code , the statement \verb | <var:x> := <nat:1> + <var:x> * <var:J> ; | . This forwards $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> \} $ as the condition $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> + <nat:1> \} $ . Immediately after , we see the variable update command yielding $ <nat:4> + <var:x> * <var:J> $ to $ <var:x>$ . This moves the precondition $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> + <nat:1> \} $ into $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:4> \} $ . This is guaranteed with the assignment inference rule obtained from Hoare reasoning . Stepping through , we have the variable binding statement \verb | <var:x> := <nat:3> + <var:x> * <var:J> ; | . This statement forwards $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:4> \} $ into $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> \} $ . Looking at the subsequent line found in the code , the assignment command letting $ <nat:1> + <var:x> * <var:J> $ into $ <var:x>$ . This forwards the condition $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> \} $ as the postcondition $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:1> \} $ . Shifting focus toward the upcoming line seen in the set of instructions , we have the environment update code \verb | <var:x> := <nat:3> + <var:x> * <var:J> | . This line transfers the condition $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:1> \} $ as the postcondition $ \{ <var:J> = <var:b> \land <var:x> = <nat:4> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:7> + <nat:3> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:J> = <var:b> }} <var:x> := <nat:4> ; <var:x> := <var:x> * <var:J> ; <var:x> := <nat:4> + <var:x> * <var:J> ; <var:x> := <var:x> * <var:J> ; <var:x> := <nat:3> + <var:x> * <var:J> ; <var:x> := <nat:1> + <var:x> * <var:J> ; <var:x> := <nat:4> + <var:x> * <var:J> ; <var:x> := <nat:3> + <var:x> * <var:J> ; <var:x> := <nat:1> + <var:x> * <var:J> ; <var:x> := <nat:3> + <var:x> * <var:J> {{ <var:x> = <nat:4> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:7> + <nat:3> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:x> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:x> = <nat:4> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:x> = <nat:4> * <var:b> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:x> = <nat:4> * <var:b> ^ <nat:3> + <nat:4> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:x> = <nat:4> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:x> = <nat:4> * <var:b> ^ <nat:5> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:x> = <nat:4> * <var:b> ^ <nat:6> + <nat:4> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:x> = <nat:4> * <var:b> ^ <nat:7> + <nat:4> * <var:b> ^ <nat:5> + <nat:3> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:4> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:x> = <nat:4> * <var:b> ^ <nat:8> + <nat:4> * <var:b> ^ <nat:6> + <nat:3> * <var:b> ^ <nat:4> + <nat:1> * <var:b> ^ <nat:3> + <nat:4> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:b> /\ <var:x> = <nat:4> * <var:b> ^ <nat:9> + <nat:4> * <var:b> ^ <nat:7> + <nat:3> * <var:b> ^ <nat:5> + <nat:1> * <var:b> ^ <nat:4> + <nat:4> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 