\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:I> ; <var:f2> := <var:f1> * <var:I> ; <var:f0> := <nat:5> ; <var:f2> := <var:f2> * <nat:9> ; <var:k> := <var:f2> <var:k> := <var:k> + <var:f0> \end{verbatim} Assume it to be that $ <var:I> = <var:S> $ ahead of running the code segment then we have $ <var:k> = <nat:9> \cdot <var:S> ^ <nat:2> + <nat:5> $ when program terminates . \end{theorem} \begin{proof} The method of proof for this code is evident using Hoare techniques . After , we have the variable assignmet code giving $ <var:I> $ as $ <var:f1>$ . This code transfers the precondition $ \{ <var:I> = <var:S> \} $ toward the postcondition $ \{ <var:I> = <var:S> \land <var:f1> = <var:S> \} $ . This is sound through the assignment law obtained from Hoare reasoning . Moving on to the following piece of code seen in our set of instructions , the variable assignmet statement binding $ <var:f1> * <var:I> $ as $ <var:f2>$ . This command takes the condition $ \{ <var:I> = <var:S> \land <var:f1> = <var:S> \} $ toward $ \{ <var:I> = <var:S> \land <var:f1> = <var:S> \land <var:f2> = <var:S> ^ <nat:2> \} $ . Moving on to the next step , we have the variable binding statement \verb | <var:f0> := <nat:5> ; | . This code transfers the precondition $ \{ <var:I> = <var:S> \land <var:f1> = <var:S> \land <var:f2> = <var:S> ^ <nat:2> \} $ toward the postcondition $ \{ <var:I> = <var:S> \land <var:f1> = <var:S> \land <var:f2> = <var:S> ^ <nat:2> \land <var:f0> = <nat:5> \} $ . Further , the variable binding statement \verb | <var:f2> := <var:f2> * <nat:9> ; | . This takes the condition $ \{ <var:I> = <var:S> \land <var:f1> = <var:S> \land <var:f2> = <var:S> ^ <nat:2> \land <var:f0> = <nat:5> \} $ as the postcondition $ \{ <var:I> = <var:S> \land <var:f1> = <var:S> \land <var:f2> = <nat:9> * <var:S> ^ <nat:2> \land <var:f0> = <nat:5> \} $ . Immediately after , we see the variable assignmet code yielding $ <var:f2$ toward $ <var:k>$ . This command takes the condition $ \{ <var:I> = <var:S> \land <var:f1> = <var:S> \land <var:f2> = <nat:9> * <var:S> ^ <nat:2> \land <var:f0> = <nat:5> \} $ into the postcondition $ \{ <var:I> = <var:S> \land <var:f1> = <var:S> \land <var:f0> = <nat:5> \land <var:k> = <nat:9> * <var:S> ^ <nat:2> \} $ . This is known to be sound using the assignment law given in standard Hoare techniques . Moving forward to the following command seen in our set of commands , we have the binding line letting $ <var:k> + <var:f0$ as $ <var:k>$ . This command advances $ \{ <var:I> = <var:S> \land <var:f1> = <var:S> \land <var:f0> = <nat:5> \land <var:k> = <nat:9> * <var:S> ^ <nat:2> \} $ to $ \{ <var:I> = <var:S> \land <var:k> = <nat:9> * <var:S> ^ <nat:2> + <nat:5> \} $ . This is ensured through the assignment scheme obtained from standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:I> = <var:S> }} <var:f1> := <var:I> ; <var:f2> := <var:f1> * <var:I> ; <var:f0> := <nat:5> ; <var:f2> := <var:f2> * <nat:9> ; <var:k> := <var:f2> <var:k> := <var:k> + <var:f0> {{ <var:k> = <nat:9> * <var:S> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:f1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:f1> = <var:S> /\ <var:f2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:f1> = <var:S> /\ <var:f2> = <var:S> ^ <nat:2> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:f1> = <var:S> /\ <var:f2> = <nat:9> * <var:S> ^ <nat:2> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:f1> = <var:S> /\ <var:f0> = <nat:5> /\ <var:k> = <nat:9> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:S> /\ <var:k> = <nat:9> * <var:S> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 