\begin{document} \begin{theorem} We define the following code : \begin{verbatim} <var:k> := <nat:1> ; <var:k> := <nat:2> + <var:k> * <var:R> ; <var:k> := <nat:3> + <var:k> * <var:R> ; <var:k> := <nat:3> + <var:k> * <var:R> ; <var:k> := <nat:4> + <var:k> * <var:R> ; <var:k> := <nat:2> + <var:k> * <var:R> \end{verbatim} Assuming , for all $ <var:L> \in \mathbb{Z}^+ $ , that $ <var:R> = <var:L> $ before running this set of commands then we have $ <var:k> = <nat:1> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is done by typical Hoare reasoning . Jumping to the subsequent statement contained in the list of instructions , the assignment line assigning $ <nat:1> $ toward $ <var:k>$ . This code redefines the condition $ \{ <var:R> = <var:L> \} $ as $ \{ <var:R> = <var:L> \land <var:k> = <nat:1> \} $ . This is known to be sound with the assignment scheme given in standard Hoare techniques . Going to the next step , the variable assignmet code \verb | <var:k> := <nat:2> + <var:k> * <var:R> ; | . This forwards the condition $ \{ <var:R> = <var:L> \land <var:k> = <nat:1> \} $ toward $ \{ <var:R> = <var:L> \land <var:k> = <nat:1> \times <var:L> + <nat:2> \} $ . This is deduced through the assignment rule defined in typical Hoare techniques . Looking at the next line of code found in our set of instructions , the variable assignmet code \verb | <var:k> := <nat:3> + <var:k> * <var:R> ; | . This line moves the condition $ \{ <var:R> = <var:L> \land <var:k> = <nat:1> \times <var:L> + <nat:2> \} $ as $ \{ <var:R> = <var:L> \land <var:k> = <nat:1> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:3> \} $ . This is sound through the assignment scheme given in usual Hoare techniques . Advancing to the next step , we have the binding code \verb | <var:k> := <nat:3> + <var:k> * <var:R> ; | . This command takes the precondition $ \{ <var:R> = <var:L> \land <var:k> = <nat:1> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:3> \} $ to $ \{ <var:R> = <var:L> \land <var:k> = <nat:1> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:3> \} $ . Advancing to the subsequent piece of code in our series of instructions , the assignment statement \verb | <var:k> := <nat:4> + <var:k> * <var:R> ; | . This code moves $ \{ <var:R> = <var:L> \land <var:k> = <nat:1> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:3> \} $ as the postcondition $ \{ <var:R> = <var:L> \land <var:k> = <nat:1> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:4> \} $ . This is rigorously given with the assignment rule from Hoare logic . Advancing to the next step , we have the code \verb | <var:k> := <nat:2> + <var:k> * <var:R> | . This code moves $ \{ <var:R> = <var:L> \land <var:k> = <nat:1> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:4> \} $ into the condition $ \{ <var:R> = <var:L> \land <var:k> = <nat:1> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:4> + <nat:3> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:2> \} $ . This is known to be sound by the assignment law in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:R> = <var:L> }} <var:k> := <nat:1> ; <var:k> := <nat:2> + <var:k> * <var:R> ; <var:k> := <nat:3> + <var:k> * <var:R> ; <var:k> := <nat:3> + <var:k> * <var:R> ; <var:k> := <nat:4> + <var:k> * <var:R> ; <var:k> := <nat:2> + <var:k> * <var:R> {{ <var:k> = <nat:1> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:k> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:k> = <nat:1> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:k> = <nat:1> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:k> = <nat:1> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:k> = <nat:1> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:L> /\ <var:k> = <nat:1> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 