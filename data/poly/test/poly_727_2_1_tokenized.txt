\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R0> := <nat:2> ; <var:F> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:e> = <var:J> $ , assuming some integers $ <var:J> $ , prior to running this code , it must be that we see $ <var:F> = <nat:2> $ . \end{theorem} \begin{proof} Using standard Hoare techniques produces : \begin{eqnarray} \{ <var:e> = <var:J> \} \\ <var:R0> := <nat:2> ; \\ \{ <var:e> = <var:J> \land <var:R0> = <nat:2> \} \\ <var:F> := <var:R0> \\ \{ <var:e> = <var:J> \land <var:F> = <nat:2> \} \end{eqnarray} Considering the above , our list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:2> ; <var:F> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:e> = <var:J> }} <def:poly> {{ <var:F> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:R0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:J> /\ <var:F> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 