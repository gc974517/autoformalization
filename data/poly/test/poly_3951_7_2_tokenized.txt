\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:m> := <nat:4> ; <var:m> := <nat:3> + <var:m> * <var:V> ; <var:m> := <var:m> * <var:V> ; <var:m> := <var:m> * <var:V> ; <var:m> := <var:m> * <var:V> ; <var:m> := <nat:2> + <var:m> * <var:V> ; <var:m> := <nat:4> + <var:m> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:V> = <var:n> $ before executing this series of instructions it follows that we have $ <var:m> = <nat:4> \times <var:n> ^ <nat:6> + <nat:3> \times <var:n> ^ <nat:5> + <nat:2> \times <var:n> + <nat:4> $ when list of instructions is done executing . \end{theorem} \begin{proof} Using Hoare logic gives us : \begin{eqnarray} \{ <var:V> = <var:n> \} \\ <var:m> := <nat:4> ; \\ \{ <var:V> = <var:n> \land <var:m> = <nat:4> \} \\ <var:m> := <nat:3> + <var:m> * <var:V> ; \\ \{ <var:V> = <var:n> \land <var:m> = <nat:4> \times <var:n> + <nat:3> \} \\ <var:m> := <var:m> * <var:V> ; \\ \{ <var:V> = <var:n> \land <var:m> = <nat:4> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + \} \\ <var:m> := <var:m> * <var:V> ; \\ \{ <var:V> = <var:n> \land <var:m> = <nat:4> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + \} \\ <var:m> := <var:m> * <var:V> ; \\ \{ <var:V> = <var:n> \land <var:m> = <nat:4> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:3> + \} \\ <var:m> := <nat:2> + <var:m> * <var:V> ; \\ \{ <var:V> = <var:n> \land <var:m> = <nat:4> \times <var:n> ^ <nat:5> + <nat:3> \times <var:n> ^ <nat:4> + <nat:2> \} \\ <var:m> := <nat:4> + <var:m> * <var:V> \\ \{ <var:V> = <var:n> \land <var:m> = <nat:4> \times <var:n> ^ <nat:6> + <nat:3> \times <var:n> ^ <nat:5> + <nat:2> \times <var:n> + <nat:4> \} \end{eqnarray} As a consequence , this code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:m> := <nat:4> ; <var:m> := <nat:3> + <var:m> * <var:V> ; <var:m> := <var:m> * <var:V> ; <var:m> := <var:m> * <var:V> ; <var:m> := <var:m> * <var:V> ; <var:m> := <nat:2> + <var:m> * <var:V> ; <var:m> := <nat:4> + <var:m> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:V> = <var:n> }} <def:poly> {{ <var:m> = <nat:4> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:2> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:m> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:m> = <nat:4> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:m> = <nat:4> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:m> = <nat:4> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:m> = <nat:4> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:m> = <nat:4> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:n> /\ <var:m> = <nat:4> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:2> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 