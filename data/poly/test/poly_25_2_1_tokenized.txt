\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:v0> := <nat:5> ; <var:o> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> . Assuming it to hold that $ <var:r> = <var:k> $ prior to the execution of the code segment it follows that $ <var:o> = <nat:5> $ . \end{theorem} \begin{proof} The method of proof for our series of commands can be given using Hoare techniques . Advancing on , we see the environment update statement giving $ <nat:5> $ into $ <var:v0>$ . This code redefines $ \{ <var:r> = <var:k> \} $ to the condition $ \{ <var:r> = <var:k> \land <var:v0> = <nat:5> \} $ . Keeping momentum , we see the variable update statement \verb | <var:o> := <var:v0> | . This command moves $ \{ <var:r> = <var:k> \land <var:v0> = <nat:5> \} $ as the postcondition $ \{ <var:r> = <var:k> \land <var:o> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:5> ; <var:o> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:r> = <var:k> }} <def:poly> {{ <var:o> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:o> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 