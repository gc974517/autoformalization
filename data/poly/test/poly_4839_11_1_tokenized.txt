\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:O1> := <var:s> ; <var:O2> := <var:O1> * <var:s> ; <var:O3> := <var:O2> * <var:s> ; <var:O0> := <nat:7> ; <var:O1> := <var:O1> * <nat:6> ; <var:O2> := <var:O2> * <nat:7> ; <var:O3> := <var:O3> * <nat:3> ; <var:p> := <var:O3> <var:p> := <var:p> + <var:O2> <var:p> := <var:p> + <var:O1> <var:p> := <var:p> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> in \emph{Imp} . Assume that we have $ <var:s> = <var:X> $ ( for some integers $ <var:X> $ ) before the execution of our code segment , it holds that we have $ <var:p> = <nat:3> \times <var:X> ^ <nat:3> + <nat:7> \times <var:X> ^ <nat:2> + <nat:6> \times <var:X> + <nat:7> $ once list of instructions is done . \end{theorem} \begin{proof} Applying standard Hoare logic results in : \begin{eqnarray} \{ <var:s> = <var:X> \} \\ <var:O1> := <var:s> ; \\ \{ <var:s> = <var:X> \land <var:O1> = <var:X> \} \\ <var:O2> := <var:O1> * <var:s> ; \\ \{ <var:s> = <var:X> \land <var:O1> = <var:X> \land <var:O2> = <var:X> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:s> ; \\ \{ <var:s> = <var:X> \land <var:O1> = <var:X> \land <var:O2> = <var:X> ^ <nat:2> \land <var:O3> = <var:X> ^ <nat:3> \} \\ <var:O0> := <nat:7> ; \\ \{ <var:s> = <var:X> \land <var:O1> = <var:X> \land <var:O2> = <var:X> ^ <nat:2> \land <var:O3> = <var:X> ^ <nat:3> \land <var:O0> = <nat:7> \} \\ <var:O1> := <var:O1> * <nat:6> ; \\ \{ <var:s> = <var:X> \land <var:O1> = <nat:6> * <var:X> \land <var:O2> = <var:X> ^ <nat:2> \land <var:O3> = <var:X> ^ <nat:3> \land <var:O0> = <nat:7> \} \\ <var:O2> := <var:O2> * <nat:7> ; \\ \{ <var:s> = <var:X> \land <var:O1> = <nat:6> * <var:X> \land <var:O2> = <nat:7> * <var:X> ^ <nat:2> \land <var:O3> = <var:X> ^ <nat:3> \land <var:O0> = <nat:7> \} \\ <var:O3> := <var:O3> * <nat:3> ; \\ \{ <var:s> = <var:X> \land <var:O1> = <nat:6> * <var:X> \land <var:O2> = <nat:7> * <var:X> ^ <nat:2> \land <var:O3> = <nat:3> * <var:X> ^ <nat:3> \land <var:O0> = <nat:7> \} \\ <var:p> := <var:O3> \\ \{ <var:s> = <var:X> \land <var:O1> = <nat:6> * <var:X> \land <var:O2> = <nat:7> * <var:X> ^ <nat:2> \land <var:O0> = <nat:7> \land <var:p> = <nat:3> * <var:X> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:O2> \\ \{ <var:s> = <var:X> \land <var:O1> = <nat:6> * <var:X> \land <var:O0> = <nat:7> \land <var:p> = <nat:3> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:O1> \\ \{ <var:s> = <var:X> \land <var:O0> = <nat:7> \land <var:p> = <nat:3> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:6> * <var:X> \} \\ <var:p> := <var:p> + <var:O0> \\ \{ <var:s> = <var:X> \land <var:p> = <nat:3> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:6> * <var:X> + <nat:7> \} \end{eqnarray} Given the preceding argument , the code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Definition <def:poly> := <var:O1> := <var:s> ; <var:O2> := <var:O1> * <var:s> ; <var:O3> := <var:O2> * <var:s> ; <var:O0> := <nat:7> ; <var:O1> := <var:O1> * <nat:6> ; <var:O2> := <var:O2> * <nat:7> ; <var:O3> := <var:O3> * <nat:3> ; <var:p> := <var:O3> <var:p> := <var:p> + <var:O2> <var:p> := <var:p> + <var:O1> <var:p> := <var:p> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:s> = <var:X> }} <def:poly> {{ <var:p> = <nat:3> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:6> * <var:X> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:X> /\ <var:O1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:X> /\ <var:O1> = <var:X> /\ <var:O2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:X> /\ <var:O1> = <var:X> /\ <var:O2> = <var:X> ^ <nat:2> /\ <var:O3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:X> /\ <var:O1> = <var:X> /\ <var:O2> = <var:X> ^ <nat:2> /\ <var:O3> = <var:X> ^ <nat:3> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:X> /\ <var:O1> = <nat:6> * <var:X> /\ <var:O2> = <var:X> ^ <nat:2> /\ <var:O3> = <var:X> ^ <nat:3> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:X> /\ <var:O1> = <nat:6> * <var:X> /\ <var:O2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:O3> = <var:X> ^ <nat:3> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:X> /\ <var:O1> = <nat:6> * <var:X> /\ <var:O2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:O3> = <nat:3> * <var:X> ^ <nat:3> /\ <var:O0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:X> /\ <var:O1> = <nat:6> * <var:X> /\ <var:O2> = <nat:7> * <var:X> ^ <nat:2> /\ <var:O0> = <nat:7> /\ <var:p> = <nat:3> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:X> /\ <var:O1> = <nat:6> * <var:X> /\ <var:O0> = <nat:7> /\ <var:p> = <nat:3> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:X> /\ <var:O0> = <nat:7> /\ <var:p> = <nat:3> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:6> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:X> /\ <var:p> = <nat:3> * <var:X> ^ <nat:3> + <nat:7> * <var:X> ^ <nat:2> + <nat:6> * <var:X> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 