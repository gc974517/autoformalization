\begin{document} \begin{theorem} Let the following program in \emph{Imp} : \begin{verbatim} <var:m> := <nat:3> ; <var:m> := <nat:3> + <var:m> * <var:k> ; <var:m> := <nat:1> + <var:m> * <var:k> ; <var:m> := <nat:1> + <var:m> * <var:k> ; <var:m> := <nat:3> + <var:m> * <var:k> ; <var:m> := <nat:1> + <var:m> * <var:k> ; <var:m> := <nat:4> + <var:m> * <var:k> ; <var:m> := <nat:3> + <var:m> * <var:k> ; <var:m> := <nat:3> + <var:m> * <var:k> ; <var:m> := <nat:3> + <var:m> * <var:k> ; <var:m> := <nat:3> + <var:m> * <var:k> \end{verbatim} Assuming assuming some positive coefficients $ <var:z> $ it to hold that $ <var:k> = <var:z> $ before the evaluation of this code segment , it follows that $ <var:m> = <nat:3> * <var:z> ^ <nat:10> + <nat:3> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> $ after segment of code is done . \end{theorem} \begin{proof} The argument for the set of instructions can be done by standard Hoare reasoning . Jumping to the proceeding step contained in the list of commands , the variable assignmet code binding $ <nat:3> $ to $ <var:m>$ . This advances the condition $ \{ <var:k> = <var:z> \} $ toward the condition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \} $ . This is shown to be logically sound by the assignment inference rule found in Hoare techniques . After , we have the environment update line \verb | <var:m> := <nat:3> + <var:m> * <var:k> ; | . This command takes the precondition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \} $ to the condition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> + <nat:3> \} $ . Following , we see the environment update code \verb | <var:m> := <nat:1> + <var:m> * <var:k> ; | . This line transfers the condition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> + <nat:3> \} $ toward the condition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:1> \} $ . This is ensured by the assignment scheme defined by standard Hoare logic . Stepping forward , we see the assignment command \verb | <var:m> := <nat:1> + <var:m> * <var:k> ; | . This takes the precondition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:1> \} $ as the postcondition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:1> \} $ . Going to the next step , the variable assignmet code defining $ <nat:3> + <var:m> * <var:k> $ into $ <var:m>$ . This code forwards $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:1> \} $ into $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:4> + <nat:3> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:3> \} $ . This is shown to be logically sound through the assignment inference rule in usual Hoare techniques . Moving on to the next step , the variable update command assigning $ <nat:1> + <var:m> * <var:k> $ to $ <var:m>$ . This transfers $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:4> + <nat:3> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:3> \} $ to the postcondition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:5> + <nat:3> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:1> \} $ . This is shown through the assignment scheme obtained from Hoare reasoning . Taking a look at the subsequent line of code in our set of instructions , we see the variable update command \verb | <var:m> := <nat:4> + <var:m> * <var:k> ; | . This redefines the precondition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:5> + <nat:3> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:1> \} $ toward the condition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:6> + <nat:3> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:4> \} $ . This is shown to be logically sound by the assignment inference rule given in typical Hoare techniques . Keeping momentum , we have the variable update statement \verb | <var:m> := <nat:3> + <var:m> * <var:k> ; | . This redefines $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:6> + <nat:3> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:4> \} $ toward the condition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:7> + <nat:3> \times <var:z> ^ <nat:6> + <nat:1> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:4> + <nat:3> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:3> \} $ . Stepping forward , we have the code \verb | <var:m> := <nat:3> + <var:m> * <var:k> ; | . This redefines the condition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:7> + <nat:3> \times <var:z> ^ <nat:6> + <nat:1> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:4> + <nat:3> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:3> \} $ as $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:8> + <nat:3> \times <var:z> ^ <nat:7> + <nat:1> \times <var:z> ^ <nat:6> + <nat:1> \times <var:z> ^ <nat:5> + <nat:3> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:3> \} $ . Moving forward to the next step , we see the variable update code defining $ <nat:3> + <var:m> * <var:k> $ to $ <var:m>$ . This statement moves $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:8> + <nat:3> \times <var:z> ^ <nat:7> + <nat:1> \times <var:z> ^ <nat:6> + <nat:1> \times <var:z> ^ <nat:5> + <nat:3> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:3> \} $ to the condition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:9> + <nat:3> \times <var:z> ^ <nat:8> + <nat:1> \times <var:z> ^ <nat:7> + <nat:1> \times <var:z> ^ <nat:6> + <nat:3> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:3> \} $ . This is guaranteed through the assignment inference rule defined by Hoare techniques . Moving on to the next command seen in our set of commands , we have the assignment statement letting $ <nat:3> + <var:m> * <var:k$ toward $ <var:m>$ . This redefines the condition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:9> + <nat:3> \times <var:z> ^ <nat:8> + <nat:1> \times <var:z> ^ <nat:7> + <nat:1> \times <var:z> ^ <nat:6> + <nat:3> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:3> \} $ as the postcondition $ \{ <var:k> = <var:z> \land <var:m> = <nat:3> \times <var:z> ^ <nat:10> + <nat:3> \times <var:z> ^ <nat:9> + <nat:1> \times <var:z> ^ <nat:8> + <nat:1> \times <var:z> ^ <nat:7> + <nat:3> \times <var:z> ^ <nat:6> + <nat:1> \times <var:z> ^ <nat:5> + <nat:4> \times <var:z> ^ <nat:4> + <nat:3> \times <var:z> ^ <nat:3> + <nat:3> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:3> \} $ . This is rigorously given with the assignment rule obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:k> = <var:z> }} <var:m> := <nat:3> ; <var:m> := <nat:3> + <var:m> * <var:k> ; <var:m> := <nat:1> + <var:m> * <var:k> ; <var:m> := <nat:1> + <var:m> * <var:k> ; <var:m> := <nat:3> + <var:m> * <var:k> ; <var:m> := <nat:1> + <var:m> * <var:k> ; <var:m> := <nat:4> + <var:m> * <var:k> ; <var:m> := <nat:3> + <var:m> * <var:k> ; <var:m> := <nat:3> + <var:m> * <var:k> ; <var:m> := <nat:3> + <var:m> * <var:k> ; <var:m> := <nat:3> + <var:m> * <var:k> {{ <var:m> = <nat:3> * <var:z> ^ <nat:10> + <nat:3> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:m> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:m> = <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:m> = <nat:3> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:m> = <nat:3> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:m> = <nat:3> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:m> = <nat:3> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:m> = <nat:3> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:m> = <nat:3> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:m> = <nat:3> * <var:z> ^ <nat:8> + <nat:3> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:m> = <nat:3> * <var:z> ^ <nat:9> + <nat:3> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:z> /\ <var:m> = <nat:3> * <var:z> ^ <nat:10> + <nat:3> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 