\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:o1> := <var:W> ; <var:o2> := <var:o1> * <var:W> ; <var:o3> := <var:o2> * <var:W> ; <var:o0> := <nat:3> ; <var:o3> := <var:o3> * <nat:4> ; <var:p> := <var:o3> <var:p> := <var:p> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> in \emph{Imp} . Assume --- for all $ <var:V> \in \mathbb{Z}^+ $ --- $ <var:W> = <var:V> $ prior to interpreting this series of commands , it must be that we have $ <var:p> = <nat:4> \cdot <var:V> ^ <nat:3> + <nat:3> $ after list of commands terminates . \end{theorem} \begin{proof} Applying Hoare reasoning gives us : \begin{eqnarray} \{ <var:W> = <var:V> \} \\ <var:o1> := <var:W> ; \\ \{ <var:W> = <var:V> \land <var:o1> = <var:V> \} \\ <var:o2> := <var:o1> * <var:W> ; \\ \{ <var:W> = <var:V> \land <var:o1> = <var:V> \land <var:o2> = <var:V> ^ <nat:2> \} \\ <var:o3> := <var:o2> * <var:W> ; \\ \{ <var:W> = <var:V> \land <var:o1> = <var:V> \land <var:o2> = <var:V> ^ <nat:2> \land <var:o3> = <var:V> ^ <nat:3> \} \\ <var:o0> := <nat:3> ; \\ \{ <var:W> = <var:V> \land <var:o1> = <var:V> \land <var:o2> = <var:V> ^ <nat:2> \land <var:o3> = <var:V> ^ <nat:3> \land <var:o0> = <nat:3> \} \\ <var:o3> := <var:o3> * <nat:4> ; \\ \{ <var:W> = <var:V> \land <var:o1> = <var:V> \land <var:o2> = <var:V> ^ <nat:2> \land <var:o3> = <nat:4> * <var:V> ^ <nat:3> \land <var:o0> = <nat:3> \} \\ <var:p> := <var:o3> \\ \{ <var:W> = <var:V> \land <var:o1> = <var:V> \land <var:o2> = <var:V> ^ <nat:2> \land <var:o0> = <nat:3> \land <var:p> = <nat:4> * <var:V> ^ <nat:3> \} \\ <var:p> := <var:p> + <var:o0> \\ \{ <var:W> = <var:V> \land <var:p> = <nat:4> * <var:V> ^ <nat:3> + <nat:3> \} \end{eqnarray} Considering the above , our set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <def:poly> := <var:o1> := <var:W> ; <var:o2> := <var:o1> * <var:W> ; <var:o3> := <var:o2> * <var:W> ; <var:o0> := <nat:3> ; <var:o3> := <var:o3> * <nat:4> ; <var:p> := <var:o3> <var:p> := <var:p> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:W> = <var:V> }} <def:poly> {{ <var:p> = <nat:4> * <var:V> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:o1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:o1> = <var:V> /\ <var:o2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:o1> = <var:V> /\ <var:o2> = <var:V> ^ <nat:2> /\ <var:o3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:o1> = <var:V> /\ <var:o2> = <var:V> ^ <nat:2> /\ <var:o3> = <var:V> ^ <nat:3> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:o1> = <var:V> /\ <var:o2> = <var:V> ^ <nat:2> /\ <var:o3> = <nat:4> * <var:V> ^ <nat:3> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:o1> = <var:V> /\ <var:o2> = <var:V> ^ <nat:2> /\ <var:o0> = <nat:3> /\ <var:p> = <nat:4> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:V> /\ <var:p> = <nat:4> * <var:V> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 