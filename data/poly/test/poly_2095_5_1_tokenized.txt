\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:l1> := <var:O> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:5> ; <var:k> := <var:l1> <var:k> := <var:k> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allow ( given any whole numbers $ <var:H> $ ) that we have $ <var:O> = <var:H> $ before the evaluation of this set of instructions then we have $ <var:k> = <nat:5> * <var:H> + <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for the code is evident with typical Hoare reasoning . Advancing to the proceeding pieces of code found in the set of instructions , \verb | { <var:O> = <var:H> } <var:l1> := <var:O> { <var:O> = <var:H> \land <var:l1> = <var:H> } | , \verb | { <var:O> = <var:H> \land <var:l1> = <var:H> } <var:l0> := <nat:9> { <var:O> = <var:H> \land <var:l1> = <var:H> \land <var:l0> = <nat:9> } | and \verb | { <var:O> = <var:H> \land <var:l1> = <var:H> \land <var:l0> = <nat:9> } <var:l1> := <var:l1> * <nat:5> { <var:O> = <var:H> \land <var:l1> = <nat:5> \cdot <var:H> \land <var:l0> = <nat:9> } | . Moving onward , \verb | { <var:O> = <var:H> } <var:l1> := <var:O> { <var:O> = <var:H> \land <var:l1> = <var:H> } | and \verb | { <var:O> = <var:H> \land <var:l1> = <var:H> } <var:l0> := <nat:9> { <var:O> = <var:H> \land <var:l1> = <var:H> \land <var:l0> = <nat:9> } | . This is shown using the binding scheme in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l1> := <var:O> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:5> ; <var:k> := <var:l1> <var:k> := <var:k> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:O> = <var:H> }} <def:poly> {{ <var:k> = <nat:5> * <var:H> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:l1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:l1> = <var:H> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:l1> = <nat:5> * <var:H> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:l0> = <nat:9> /\ <var:k> = <nat:5> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:H> /\ <var:k> = <nat:5> * <var:H> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 