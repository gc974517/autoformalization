\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:3> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:z> ; <var:x> := <var:k1> ; <var:x> := <var:x> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:z> = <var:C> $ before the evaluation of this program it follows that we have $ <var:x> = <nat:4> \times <var:C> + <nat:3> $ when code segment exits . \end{theorem} \begin{proof} Using usual Hoare reasoning results in : \begin{eqnarray} \{ <var:z> = <var:C> \} \\ <var:k0> := <nat:3> ; \\ \{ <var:z> = <var:C> \land <var:k0> = <nat:3> \} \\ <var:k1> := <nat:4> ; \\ \{ <var:z> = <var:C> \land <var:k0> = <nat:3> \land <var:k1> = <nat:4> \} \\ <var:k1> := <var:k1> * <var:z> ; \\ \{ <var:z> = <var:C> \land <var:k0> = <nat:3> \land <var:k1> = <nat:4> \times <var:C> \} \\ <var:x> := <var:k1> ; \\ \{ <var:z> = <var:C> \land <var:k0> = <nat:3> \land <var:x> = <nat:4> \times <var:C> \} \\ <var:x> := <var:x> + <var:k0> \\ \{ <var:z> = <var:C> \land <var:x> = <nat:4> \times <var:C> + <nat:3> \} \end{eqnarray} Hence , the segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <def:poly> := <var:k0> := <nat:3> ; <var:k1> := <nat:4> ; <var:k1> := <var:k1> * <var:z> ; <var:x> := <var:k1> ; <var:x> := <var:x> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:z> = <var:C> }} <def:poly> {{ <var:x> = <nat:4> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:k0> = <nat:3> /\ <var:k1> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:k0> = <nat:3> /\ <var:x> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:C> /\ <var:x> = <nat:4> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 