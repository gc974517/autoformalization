\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:2> ; <var:J> := <var:O0> \end{verbatim} Assume $ <var:f> = <var:L> $ ahead of executing this segment of code it holds that $ <var:J> = <nat:2> $ once code segment has executed . \end{theorem} \begin{proof} Using typical Hoare reasoning produces : \begin{eqnarray} \{ <var:f> = <var:L> \} \\ <var:O0> := <nat:2> ; \\ \{ <var:f> = <var:L> \land <var:O0> = <nat:2> \} \\ <var:J> := <var:O0> \\ \{ <var:f> = <var:L> \land <var:J> = <nat:2> \} \end{eqnarray} Thusly , the list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:f> = <var:L> }} <var:O0> := <nat:2> ; <var:J> := <var:O0> {{ <var:J> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:L> /\ <var:J> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 