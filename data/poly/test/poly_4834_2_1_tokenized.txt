\begin{document} \begin{theorem} Consider a series of commands as \begin{verbatim} <var:o0> := <nat:8> ; <var:J> := <var:o0> \end{verbatim} Given $ <var:T> = <var:R> $ ahead of the evaluation of the segment of code then we see $ <var:J> = <nat:8> $ after segment of code has executed . \end{theorem} \begin{proof} Observe that this decorated series of commands . \begin{eqnarray} \{ <var:T> = <var:R> \} \\ <var:o0> := <nat:8> ; \\ \{ <var:T> = <var:R> \land <var:o0> = <nat:8> \} \\ <var:J> := <var:o0> \\ \{ <var:T> = <var:R> \land <var:J> = <nat:8> \} \end{eqnarray} Applying standard Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:T> = <var:R> }} <var:o0> := <nat:8> ; <var:J> := <var:o0> {{ <var:J> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:R> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:R> /\ <var:J> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 