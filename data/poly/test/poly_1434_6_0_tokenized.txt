\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} : \begin{verbatim} <var:x0> := <nat:4> ; <var:x2> := <nat:1> ; <var:x2> := <var:x2> * <var:X> ; <var:x2> := <var:x2> * <var:X> ; <var:B> := <var:x2> ; <var:B> := <var:B> + <var:x0> \end{verbatim} Allowing for whole numbers $ <var:o> $ it to be that $ <var:X> = <var:o> $ ahead of the evaluation of our program , it must be that we see $ <var:B> = <nat:1> * <var:o> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code is shown through typical Hoare logic . Moving forward to the next step , we see \begin{eqnarray} \{ <var:X> = <var:o> \} \, <var:x0> := <nat:4> \, \{ <var:X> = <var:o> \land <var:x0> = <nat:4> \} \\ \{ <var:X> = <var:o> \land <var:x0> = <nat:4> \} \, <var:x2> := <nat:1> \, \{ <var:X> = <var:o> \land <var:x0> = <nat:4> \land <var:x2> = <nat:1> \} \end{eqnarray} Advancing to the proceeding pieces of code seen in our code , we see \begin{eqnarray} \{ <var:X> = <var:o> \} \, <var:x0> := <nat:4> \, \{ <var:X> = <var:o> \land <var:x0> = <nat:4> \} \\ \{ <var:X> = <var:o> \land <var:x0> = <nat:4> \} \, <var:x2> := <nat:1> \, \{ <var:X> = <var:o> \land <var:x0> = <nat:4> \land <var:x2> = <nat:1> \} \\ \{ <var:X> = <var:o> \land <var:x0> = <nat:4> \land <var:x2> = <nat:1> \} \, <var:x2> := <var:x2> * <var:X> \, \{ <var:X> = <var:o> \land <var:x0> = <nat:4> \land <var:x2> = <nat:1> * <var:o> \} \end{eqnarray} Focusing on the following bit of code contained in our set of instructions , \begin{eqnarray} \{ <var:X> = <var:o> \} \, <var:x0> := <nat:4> \, \{ <var:X> = <var:o> \land <var:x0> = <nat:4> \} \end{eqnarray} This is ensured using the variable binding rule defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:X> = <var:o> }} <var:x0> := <nat:4> ; <var:x2> := <nat:1> ; <var:x2> := <var:x2> * <var:X> ; <var:x2> := <var:x2> * <var:X> ; <var:B> := <var:x2> ; <var:B> := <var:B> + <var:x0> {{ <var:B> = <nat:1> * <var:o> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:x0> = <nat:4> /\ <var:x2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:x0> = <nat:4> /\ <var:x2> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:x0> = <nat:4> /\ <var:x2> = <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:x0> = <nat:4> /\ <var:B> = <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:o> /\ <var:B> = <nat:1> * <var:o> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 