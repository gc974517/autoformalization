\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:4> ; <var:o> := <var:e0> \end{verbatim} Allow $ <var:w> = <var:M> $ prior to the execution of our segment of code , it follows that we see $ <var:o> = <nat:4> $ . \end{theorem} \begin{proof} Utilizing typical Hoare techniques produces : \begin{eqnarray} \{ <var:w> = <var:M> \} \\ <var:e0> := <nat:4> ; \\ \{ <var:w> = <var:M> \land <var:e0> = <nat:4> \} \\ <var:o> := <var:e0> \\ \{ <var:w> = <var:M> \land <var:o> = <nat:4> \} \end{eqnarray} Considering the above , the list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:w> = <var:M> }} <var:e0> := <nat:4> ; <var:o> := <var:e0> {{ <var:o> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:M> /\ <var:o> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 