\begin{document} \begin{theorem} Take a set of instructions : \begin{verbatim} <var:W0> := <nat:1> ; <var:W1> := <nat:8> ; <var:W1> := <var:W1> * <var:D> ; <var:W2> := <nat:7> ; <var:W2> := <var:W2> * <var:D> ; <var:W2> := <var:W2> * <var:D> ; <var:W3> := <nat:8> ; <var:W3> := <var:W3> * <var:D> ; <var:W3> := <var:W3> * <var:D> ; <var:W3> := <var:W3> * <var:D> ; <var:H> := <var:W3> ; <var:H> := <var:H> + <var:W2> ; <var:H> := <var:H> + <var:W1> ; <var:H> := <var:H> + <var:W0> \end{verbatim} Allow $ <var:D> = <var:G> $ ahead of interpreting our program it holds that we see $ <var:H> = <nat:8> \times <var:G> ^ <nat:3> + <nat:7> \times <var:G> ^ <nat:2> + <nat:8> \times <var:G> + <nat:1> $ when list of commands terminates . \end{theorem} \begin{proof} Observe this decorated set of commands . \begin{eqnarray} \{ <var:D> = <var:G> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:D> = <var:G> \land <var:W0> = <nat:1> \} \\ <var:W1> := <nat:8> ; \\ \{ <var:D> = <var:G> \land <var:W0> = <nat:1> \land <var:W1> = <nat:8> \} \\ <var:W1> := <var:W1> * <var:D> ; \\ \{ <var:D> = <var:G> \land <var:W0> = <nat:1> \land <var:W1> = <nat:8> \times <var:G> \} \\ <var:W2> := <nat:7> ; \\ \{ <var:D> = <var:G> \land <var:W0> = <nat:1> \land <var:W1> = <nat:8> \times <var:G> \land <var:W2> = <nat:7> \} \\ <var:W2> := <var:W2> * <var:D> ; \\ \{ <var:D> = <var:G> \land <var:W0> = <nat:1> \land <var:W1> = <nat:8> \times <var:G> \land <var:W2> = <nat:7> \times <var:G> \} \\ <var:W2> := <var:W2> * <var:D> ; \\ \{ <var:D> = <var:G> \land <var:W0> = <nat:1> \land <var:W1> = <nat:8> \times <var:G> \land <var:W2> = <nat:7> \times <var:G> ^ <nat:2> \} \\ <var:W3> := <nat:8> ; \\ \{ <var:D> = <var:G> \land <var:W0> = <nat:1> \land <var:W1> = <nat:8> \times <var:G> \land <var:W2> = <nat:7> \times <var:G> ^ <nat:2> \land <var:W3> = <nat:8> \} \\ <var:W3> := <var:W3> * <var:D> ; \\ \{ <var:D> = <var:G> \land <var:W0> = <nat:1> \land <var:W1> = <nat:8> \times <var:G> \land <var:W2> = <nat:7> \times <var:G> ^ <nat:2> \land <var:W3> = <nat:8> \times <var:G> \} \\ <var:W3> := <var:W3> * <var:D> ; \\ \{ <var:D> = <var:G> \land <var:W0> = <nat:1> \land <var:W1> = <nat:8> \times <var:G> \land <var:W2> = <nat:7> \times <var:G> ^ <nat:2> \land <var:W3> = <nat:8> \times <var:G> ^ <nat:2> \} \\ <var:W3> := <var:W3> * <var:D> ; \\ \{ <var:D> = <var:G> \land <var:W0> = <nat:1> \land <var:W1> = <nat:8> \times <var:G> \land <var:W2> = <nat:7> \times <var:G> ^ <nat:2> \land <var:W3> = <nat:8> \times <var:G> ^ <nat:3> \} \\ <var:H> := <var:W3> ; \\ \{ <var:D> = <var:G> \land <var:W0> = <nat:1> \land <var:W1> = <nat:8> \times <var:G> \land <var:W2> = <nat:7> \times <var:G> ^ <nat:2> \land <var:H> = <nat:8> \times <var:G> ^ <nat:3> \} \\ <var:H> := <var:H> + <var:W2> ; \\ \{ <var:D> = <var:G> \land <var:W0> = <nat:1> \land <var:W1> = <nat:8> \times <var:G> \land <var:H> = <nat:8> \times <var:G> ^ <nat:3> + <nat:7> \times <var:G> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:W1> ; \\ \{ <var:D> = <var:G> \land <var:W0> = <nat:1> \land <var:H> = <nat:8> \times <var:G> ^ <nat:3> + <nat:7> \times <var:G> ^ <nat:2> + <nat:8> \times <var:G> \} \\ <var:H> := <var:H> + <var:W0> \\ \{ <var:D> = <var:G> \land <var:H> = <nat:8> \times <var:G> ^ <nat:3> + <nat:7> \times <var:G> ^ <nat:2> + <nat:8> \times <var:G> + <nat:1> \} \end{eqnarray} Applying typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:D> = <var:G> }} <var:W0> := <nat:1> ; <var:W1> := <nat:8> ; <var:W1> := <var:W1> * <var:D> ; <var:W2> := <nat:7> ; <var:W2> := <var:W2> * <var:D> ; <var:W2> := <var:W2> * <var:D> ; <var:W3> := <nat:8> ; <var:W3> := <var:W3> * <var:D> ; <var:W3> := <var:W3> * <var:D> ; <var:W3> := <var:W3> * <var:D> ; <var:H> := <var:W3> ; <var:H> := <var:H> + <var:W2> ; <var:H> := <var:H> + <var:W1> ; <var:H> := <var:H> + <var:W0> {{ <var:H> = <nat:8> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:8> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:8> * <var:G> /\ <var:W2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:8> * <var:G> /\ <var:W2> = <nat:7> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:8> * <var:G> /\ <var:W2> = <nat:7> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:8> * <var:G> /\ <var:W2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:W3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:8> * <var:G> /\ <var:W2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:W3> = <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:8> * <var:G> /\ <var:W2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:W3> = <nat:8> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:8> * <var:G> /\ <var:W2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:W3> = <nat:8> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:8> * <var:G> /\ <var:W2> = <nat:7> * <var:G> ^ <nat:2> /\ <var:H> = <nat:8> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:W0> = <nat:1> /\ <var:W1> = <nat:8> * <var:G> /\ <var:H> = <nat:8> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:W0> = <nat:1> /\ <var:H> = <nat:8> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:H> = <nat:8> * <var:G> ^ <nat:3> + <nat:7> * <var:G> ^ <nat:2> + <nat:8> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 