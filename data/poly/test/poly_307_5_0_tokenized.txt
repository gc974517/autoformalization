\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:7> ; <var:A1> := <nat:8> ; <var:A1> := <var:A1> * <var:s> ; <var:y> := <var:A1> ; <var:y> := <var:y> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:s> = <var:w> $ ( given any integers $ <var:w> $ ) before the execution of this list of instructions it must be that we have $ <var:y> = <nat:8> * <var:w> + <nat:7> $ . \end{theorem} \begin{proof} Using usual Hoare logic gives us : \begin{eqnarray} \{ <var:s> = <var:w> \} \\ <var:A0> := <nat:7> ; \\ \{ <var:s> = <var:w> \land <var:A0> = <nat:7> \} \\ <var:A1> := <nat:8> ; \\ \{ <var:s> = <var:w> \land <var:A0> = <nat:7> \land <var:A1> = <nat:8> \} \\ <var:A1> := <var:A1> * <var:s> ; \\ \{ <var:s> = <var:w> \land <var:A0> = <nat:7> \land <var:A1> = <nat:8> \times <var:w> \} \\ <var:y> := <var:A1> ; \\ \{ <var:s> = <var:w> \land <var:A0> = <nat:7> \land <var:y> = <nat:8> \times <var:w> \} \\ <var:y> := <var:y> + <var:A0> \\ \{ <var:s> = <var:w> \land <var:y> = <nat:8> \times <var:w> + <nat:7> \} \end{eqnarray} Considering the above , our program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <def:poly> := <var:A0> := <nat:7> ; <var:A1> := <nat:8> ; <var:A1> := <var:A1> * <var:s> ; <var:y> := <var:A1> ; <var:y> := <var:y> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:s> = <var:w> }} <def:poly> {{ <var:y> = <nat:8> * <var:w> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:A0> = <nat:7> /\ <var:y> = <nat:8> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:w> /\ <var:y> = <nat:8> * <var:w> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 