\begin{document} \begin{theorem} Let the following list of instructions as follows \begin{verbatim} <var:t> := <nat:2> ; <var:t> := <nat:2> + <var:t> * <var:q> ; <var:t> := <nat:3> + <var:t> * <var:q> ; <var:t> := <nat:2> + <var:t> * <var:q> ; <var:t> := <nat:2> + <var:t> * <var:q> ; <var:t> := <nat:4> + <var:t> * <var:q> ; <var:t> := <nat:4> + <var:t> * <var:q> \end{verbatim} Assume $ <var:q> = <var:V> $ --- for some natural numbers $ <var:V> $ --- prior to running our segment of code it follows that we have $ <var:t> = <nat:2> \cdot <var:V> ^ <nat:6> + <nat:2> \cdot <var:V> ^ <nat:5> + <nat:3> \cdot <var:V> ^ <nat:4> + <nat:2> \cdot <var:V> ^ <nat:3> + <nat:2> \cdot <var:V> ^ <nat:2> + <nat:4> \cdot <var:V> + <nat:4> $ once program has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:V> \} \\ <var:t> := <nat:2> ; \\ \{ <var:q> = <var:V> \land <var:t> = <nat:2> \} \\ <var:t> := <nat:2> + <var:t> * <var:q> ; \\ \{ <var:q> = <var:V> \land <var:t> = <nat:2> * <var:V> + <nat:2> \} \\ <var:t> := <nat:3> + <var:t> * <var:q> ; \\ \{ <var:q> = <var:V> \land <var:t> = <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:3> \} \\ <var:t> := <nat:2> + <var:t> * <var:q> ; \\ \{ <var:q> = <var:V> \land <var:t> = <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:2> \} \\ <var:t> := <nat:2> + <var:t> * <var:q> ; \\ \{ <var:q> = <var:V> \land <var:t> = <nat:2> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:2> \} \\ <var:t> := <nat:4> + <var:t> * <var:q> ; \\ \{ <var:q> = <var:V> \land <var:t> = <nat:2> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:4> \} \\ <var:t> := <nat:4> + <var:t> * <var:q> \\ \{ <var:q> = <var:V> \land <var:t> = <nat:2> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:4> \} \end{eqnarray} Utilizing usual Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:q> = <var:V> }} <var:t> := <nat:2> ; <var:t> := <nat:2> + <var:t> * <var:q> ; <var:t> := <nat:3> + <var:t> * <var:q> ; <var:t> := <nat:2> + <var:t> * <var:q> ; <var:t> := <nat:2> + <var:t> * <var:q> ; <var:t> := <nat:4> + <var:t> * <var:q> ; <var:t> := <nat:4> + <var:t> * <var:q> {{ <var:t> = <nat:2> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:t> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:t> = <nat:2> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:t> = <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:t> = <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:3> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:t> = <nat:2> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:t> = <nat:2> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:V> /\ <var:t> = <nat:2> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:3> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 