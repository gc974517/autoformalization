\begin{document} \begin{theorem} Define the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:3> ; <var:U> := <var:I0> \end{verbatim} Allowing that we have $ <var:D> = <var:J> $ prior to executing this code segment , it must be that $ <var:U> = <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this code is given by Hoare logic . Advancing to the following command found in our code segment , the statement assigning $ <nat:3> $ as $ <var:I0>$ . This command takes the condition $ \{ <var:D> = <var:J> \} $ to the postcondition $ \{ <var:D> = <var:J> \land <var:I0> = <nat:3> \} $ . Advancing to the following piece of code contained in the set of commands , the assignment line binding $ <var:I0$ as $ <var:U>$ . This takes the condition $ \{ <var:D> = <var:J> \land <var:I0> = <nat:3> \} $ into the postcondition $ \{ <var:D> = <var:J> \land <var:U> = <nat:3> \} $ . This is guaranteed using the assignment scheme in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:D> = <var:J> }} <var:I0> := <nat:3> ; <var:U> := <var:I0> {{ <var:U> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:I0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:J> /\ <var:U> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 