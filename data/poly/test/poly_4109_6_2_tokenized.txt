\begin{document} \begin{theorem} We define the following code as \begin{verbatim} <var:X> := <nat:1> ; <var:X> := <nat:2> + <var:X> * <var:k> ; <var:X> := <nat:4> + <var:X> * <var:k> ; <var:X> := <var:X> * <var:k> ; <var:X> := <var:X> * <var:k> ; <var:X> := <nat:2> + <var:X> * <var:k> \end{verbatim} Assuming given every integers $ <var:a> $ it to be that $ <var:k> = <var:a> $ before running our series of instructions it holds that we have $ <var:X> = <nat:1> \times <var:a> ^ <nat:5> + <nat:2> \times <var:a> ^ <nat:4> + <nat:4> \times <var:a> ^ <nat:3> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the series of commands can be done using typical Hoare techniques . Moving on to the following commands seen in our segment of code , we have \begin{verbatim} { <var:k> = <var:a> } <var:X> := <nat:1> { <var:k> = <var:a> \land <var:X> = <nat:1> } { <var:k> = <var:a> \land <var:X> = <nat:1> } <var:X> := <nat:2> + <var:X> * <var:k> { <var:k> = <var:a> \land <var:X> = <nat:1> * <var:a> + <nat:2> } { <var:k> = <var:a> \land <var:X> = <nat:1> * <var:a> + <nat:2> } <var:X> := <nat:4> + <var:X> * <var:k> { <var:k> = <var:a> \land <var:X> = <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:4> } { <var:k> = <var:a> \land <var:X> = <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:4> } <var:X> := <var:X> * <var:k> { <var:k> = <var:a> \land <var:X> = <nat:1> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + } { <var:k> = <var:a> \land <var:X> = <nat:1> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + } <var:X> := <var:X> * <var:k> { <var:k> = <var:a> \land <var:X> = <nat:1> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + } \end{verbatim} Moving onward , we see \begin{verbatim} { <var:k> = <var:a> } <var:X> := <nat:1> { <var:k> = <var:a> \land <var:X> = <nat:1> } \end{verbatim} This is given through the environment update scheme given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:k> = <var:a> }} <var:X> := <nat:1> ; <var:X> := <nat:2> + <var:X> * <var:k> ; <var:X> := <nat:4> + <var:X> * <var:k> ; <var:X> := <var:X> * <var:k> ; <var:X> := <var:X> * <var:k> ; <var:X> := <nat:2> + <var:X> * <var:k> {{ <var:X> = <nat:1> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:X> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:X> = <nat:1> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:X> = <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:X> = <nat:1> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:X> = <nat:1> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:a> /\ <var:X> = <nat:1> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:4> * <var:a> ^ <nat:3> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 