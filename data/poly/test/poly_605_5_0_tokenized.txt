\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:4> ; <var:G1> := <nat:2> ; <var:G1> := <var:G1> * <var:b> ; <var:N> := <var:G1> ; <var:N> := <var:N> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:b> = <var:S> $ --- given any $ <var:S> $ --- before interpreting our set of commands , it holds that we see $ <var:N> = <nat:2> \cdot <var:S> + <nat:4> $ . \end{theorem} \begin{proof} Using typical Hoare logic returns : \begin{eqnarray} \{ <var:b> = <var:S> \} \\ <var:G0> := <nat:4> ; \\ \{ <var:b> = <var:S> \land <var:G0> = <nat:4> \} \\ <var:G1> := <nat:2> ; \\ \{ <var:b> = <var:S> \land <var:G0> = <nat:4> \land <var:G1> = <nat:2> \} \\ <var:G1> := <var:G1> * <var:b> ; \\ \{ <var:b> = <var:S> \land <var:G0> = <nat:4> \land <var:G1> = <nat:2> * <var:S> \} \\ <var:N> := <var:G1> ; \\ \{ <var:b> = <var:S> \land <var:G0> = <nat:4> \land <var:N> = <nat:2> * <var:S> \} \\ <var:N> := <var:N> + <var:G0> \\ \{ <var:b> = <var:S> \land <var:N> = <nat:2> * <var:S> + <nat:4> \} \end{eqnarray} As a consequence , this set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:4> ; <var:G1> := <nat:2> ; <var:G1> := <var:G1> * <var:b> ; <var:N> := <var:G1> ; <var:N> := <var:N> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:b> = <var:S> }} <def:poly> {{ <var:N> = <nat:2> * <var:S> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:G0> = <nat:4> /\ <var:N> = <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:S> /\ <var:N> = <nat:2> * <var:S> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 