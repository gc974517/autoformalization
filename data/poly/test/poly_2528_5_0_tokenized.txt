\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:K0> := <nat:7> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:s> ; <var:Y> := <var:K1> ; <var:Y> := <var:Y> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:s> = <var:g> $ prior to interpreting our set of commands , then $ <var:Y> = <nat:6> * <var:g> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for this set of commands is given using usual Hoare logic . Stepping through , we see the code defining $ <nat:7> $ into $ <var:K0>$ . This statement transfers $ \{ <var:s> = <var:g> \} $ toward the condition $ \{ <var:s> = <var:g> \land <var:K0> = <nat:7> \} $ . Advancing on , the variable update command defining $ <nat:6> $ into $ <var:K1>$ . This forwards the condition $ \{ <var:s> = <var:g> \land <var:K0> = <nat:7> \} $ toward $ \{ <var:s> = <var:g> \land <var:K0> = <nat:7> \land <var:K1> = <nat:6> \} $ . This is known to be sound using the assignment scheme obtained from typical Hoare techniques . Focusing on the upcoming bit of code in the set of instructions , we see the binding code \verb | <var:K1> := <var:K1> * <var:s> ; | . This line redefines the condition $ \{ <var:s> = <var:g> \land <var:K0> = <nat:7> \land <var:K1> = <nat:6> \} $ to $ \{ <var:s> = <var:g> \land <var:K0> = <nat:7> \land <var:K1> = <nat:6> \cdot <var:g> \} $ . This is sound by the assignment rule defined by Hoare reasoning . Jumping to the subsequent bit of code seen in the set of instructions , we have the variable update command \verb | <var:Y> := <var:K1> ; | . This command takes the precondition $ \{ <var:s> = <var:g> \land <var:K0> = <nat:7> \land <var:K1> = <nat:6> \cdot <var:g> \} $ into the postcondition $ \{ <var:s> = <var:g> \land <var:K0> = <nat:7> \land <var:Y> = <nat:6> \cdot <var:g> \} $ . This is shown to be logically sound with the assignment rule given by typical Hoare logic . Advancing to the next step , we see the variable assignmet line \verb | <var:Y> := <var:Y> + <var:K0> | . This transfers the precondition $ \{ <var:s> = <var:g> \land <var:K0> = <nat:7> \land <var:Y> = <nat:6> \cdot <var:g> \} $ to the condition $ \{ <var:s> = <var:g> \land <var:Y> = <nat:6> \cdot <var:g> + <nat:7> \} $ . This is rigorously given by the assignment law of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K0> := <nat:7> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:s> ; <var:Y> := <var:K1> ; <var:Y> := <var:Y> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:s> = <var:g> }} <def:poly> {{ <var:Y> = <nat:6> * <var:g> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:K0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:K0> = <nat:7> /\ <var:K1> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:K0> = <nat:7> /\ <var:Y> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:g> /\ <var:Y> = <nat:6> * <var:g> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 