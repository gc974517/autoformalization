\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:B0> := <nat:5> ; <var:B1> := <nat:8> ; <var:B1> := <var:B1> * <var:f> ; <var:a> := <var:B1> ; <var:a> := <var:a> + <var:B0> \end{verbatim} Assume it to be that $ <var:f> = <var:P> $ ahead of running the program then $ <var:a> = <nat:8> \cdot <var:P> + <nat:5> $ when code segment has terminated . \end{theorem} \begin{proof} The course of logic for the code can be shown through usual Hoare techniques . Honing in on the subsequent command in our segment of code , we have the variable binding line \verb | <var:B0> := <nat:5> ; | . This command redefines the precondition $ \{ <var:f> = <var:P> \} $ into the condition $ \{ <var:f> = <var:P> \land <var:B0> = <nat:5> \} $ . Jumping to the upcoming command contained in the series of instructions , we have the variable assignmet command defining $ <nat:8> $ to $ <var:B1>$ . This advances the condition $ \{ <var:f> = <var:P> \land <var:B0> = <nat:5> \} $ into the condition $ \{ <var:f> = <var:P> \land <var:B0> = <nat:5> \land <var:B1> = <nat:8> \} $ . Going forward , we have the variable binding statement defining $ <var:B1> * <var:f> $ as $ <var:B1>$ . This code transfers the precondition $ \{ <var:f> = <var:P> \land <var:B0> = <nat:5> \land <var:B1> = <nat:8> \} $ as the condition $ \{ <var:f> = <var:P> \land <var:B0> = <nat:5> \land <var:B1> = <nat:8> \times <var:P> \} $ . This is given through the assignment scheme defined in typical Hoare logic . Observing the following command found in our segment of code , we have the statement \verb | <var:a> := <var:B1> ; | . This statement advances the precondition $ \{ <var:f> = <var:P> \land <var:B0> = <nat:5> \land <var:B1> = <nat:8> \times <var:P> \} $ to $ \{ <var:f> = <var:P> \land <var:B0> = <nat:5> \land <var:a> = <nat:8> \times <var:P> \} $ . Taking a look at the proceeding step contained in our list of instructions , we have the code defining $ <var:a> + <var:B0$ as $ <var:a>$ . This command redefines the condition $ \{ <var:f> = <var:P> \land <var:B0> = <nat:5> \land <var:a> = <nat:8> \times <var:P> \} $ toward the postcondition $ \{ <var:f> = <var:P> \land <var:a> = <nat:8> \times <var:P> + <nat:5> \} $ . This is rigorously given through the assignment rule defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:f> = <var:P> }} <var:B0> := <nat:5> ; <var:B1> := <nat:8> ; <var:B1> := <var:B1> * <var:f> ; <var:a> := <var:B1> ; <var:a> := <var:a> + <var:B0> {{ <var:a> = <nat:8> * <var:P> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:B0> = <nat:5> /\ <var:B1> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:B0> = <nat:5> /\ <var:a> = <nat:8> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:a> = <nat:8> * <var:P> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 