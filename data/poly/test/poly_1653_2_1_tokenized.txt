\begin{document} \begin{theorem} Consider the following code as \begin{verbatim} <var:V0> := <nat:1> ; <var:C> := <var:V0> \end{verbatim} Allow , for every integers $ <var:S> $ , $ <var:H> = <var:S> $ prior to the evaluation of this set of commands , it holds that $ <var:C> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our code can be given through standard Hoare logic . Looking at the upcoming command found in the series of instructions , we have the binding line \verb | <var:V0> := <nat:1> ; | . This command advances the condition $ \{ <var:H> = <var:S> \} $ to the condition $ \{ <var:H> = <var:S> \land <var:V0> = <nat:1> \} $ . Taking a look at the subsequent step in our series of instructions , we have the variable update command yielding $ <var:V0$ as $ <var:C>$ . This statement redefines $ \{ <var:H> = <var:S> \land <var:V0> = <nat:1> \} $ toward the postcondition $ \{ <var:H> = <var:S> \land <var:C> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:H> = <var:S> }} <var:V0> := <nat:1> ; <var:C> := <var:V0> {{ <var:C> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:C> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 