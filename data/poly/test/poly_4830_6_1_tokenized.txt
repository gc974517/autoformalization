\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} such that \begin{verbatim} <var:D1> := <var:W> ; <var:D2> := <var:D1> * <var:W> ; <var:D0> := <nat:7> ; <var:D2> := <var:D2> * <nat:7> ; <var:s> := <var:D2> <var:s> := <var:s> + <var:D0> \end{verbatim} Assuming it to hold that $ <var:W> = <var:l> $ prior to interpreting this series of commands it follows that we see $ <var:s> = <nat:7> \cdot <var:l> ^ <nat:2> + <nat:7> $ when series of commands has terminated . \end{theorem} \begin{proof} Utilizing Hoare techniques returns : \begin{eqnarray} \{ <var:W> = <var:l> \} \\ <var:D1> := <var:W> ; \\ \{ <var:W> = <var:l> \land <var:D1> = <var:l> \} \\ <var:D2> := <var:D1> * <var:W> ; \\ \{ <var:W> = <var:l> \land <var:D1> = <var:l> \land <var:D2> = <var:l> ^ <nat:2> \} \\ <var:D0> := <nat:7> ; \\ \{ <var:W> = <var:l> \land <var:D1> = <var:l> \land <var:D2> = <var:l> ^ <nat:2> \land <var:D0> = <nat:7> \} \\ <var:D2> := <var:D2> * <nat:7> ; \\ \{ <var:W> = <var:l> \land <var:D1> = <var:l> \land <var:D2> = <nat:7> \times <var:l> ^ <nat:2> \land <var:D0> = <nat:7> \} \\ <var:s> := <var:D2> \\ \{ <var:W> = <var:l> \land <var:D1> = <var:l> \land <var:D0> = <nat:7> \land <var:s> = <nat:7> \times <var:l> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:D0> \\ \{ <var:W> = <var:l> \land <var:s> = <nat:7> \times <var:l> ^ <nat:2> + <nat:7> \} \end{eqnarray} Thus , the set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:W> = <var:l> }} <var:D1> := <var:W> ; <var:D2> := <var:D1> * <var:W> ; <var:D0> := <nat:7> ; <var:D2> := <var:D2> * <nat:7> ; <var:s> := <var:D2> <var:s> := <var:s> + <var:D0> {{ <var:s> = <nat:7> * <var:l> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:D1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:D1> = <var:l> /\ <var:D2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:D1> = <var:l> /\ <var:D2> = <var:l> ^ <nat:2> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:D1> = <var:l> /\ <var:D2> = <nat:7> * <var:l> ^ <nat:2> /\ <var:D0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:D1> = <var:l> /\ <var:D0> = <nat:7> /\ <var:s> = <nat:7> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:l> /\ <var:s> = <nat:7> * <var:l> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 