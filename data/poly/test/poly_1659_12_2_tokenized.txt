\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as follows \begin{verbatim} <var:n> := <nat:1> ; <var:n> := <nat:2> + <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <nat:2> + <var:n> * <var:s> ; <var:n> := <nat:1> + <var:n> * <var:s> ; <var:n> := <nat:2> + <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <nat:3> + <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <nat:2> + <var:n> * <var:s> ; <var:n> := <nat:2> + <var:n> * <var:s> \end{verbatim} Allowing that $ <var:s> = <var:l> $ ( letting $ <var:l> \in \mathbb{N} $ ) ahead of executing our set of commands , it follows that we see $ <var:n> = <nat:1> * <var:l> ^ <nat:11> + <nat:2> * <var:l> ^ <nat:10> + <nat:2> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:3> + <nat:2> * <var:l> + <nat:2> $ . \end{theorem} \begin{proof} The course of logic for the series of instructions is accomplished with Hoare logic . After , we see the assignment line letting $ <nat:1> $ toward $ <var:n>$ . This command transfers the precondition $ \{ <var:s> = <var:l> \} $ to $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \} $ . Going to the next step , we see the binding command assigning $ <nat:2> + <var:n> * <var:s> $ to $ <var:n>$ . This line forwards the condition $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \} $ to the condition $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> + <nat:2> \} $ . Taking another step toward the upcoming statement in the list of commands , the variable update line \verb | <var:n> := <var:n> * <var:s> ; | . This advances the condition $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> + <nat:2> \} $ as $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + \} $ . Considering the next command found in the list of commands , the binding command \verb | <var:n> := <var:n> * <var:s> ; | . This line takes the condition $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + \} $ toward $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> ^ <nat:2> + \} $ . This is ensured by the assignment law found in typical Hoare techniques . Considering the upcoming bit of code contained in our series of commands , we see the command \verb | <var:n> := <nat:2> + <var:n> * <var:s> ; | . This advances the condition $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> ^ <nat:2> + \} $ into $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:3> + <nat:2> \} $ . Looking at the following line of code in our list of instructions , we have the line assigning $ <nat:1> + <var:n> * <var:s> $ into $ <var:n>$ . This line forwards the condition $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:3> + <nat:2> \} $ toward $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:5> + <nat:2> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> + <nat:1> \} $ . This is shown to be logically sound with the assignment law of typical Hoare techniques . Keeping momentum , we see the environment update statement defining $ <nat:2> + <var:n> * <var:s> $ to $ <var:n>$ . This code transfers the precondition $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:5> + <nat:2> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> + <nat:1> \} $ as the condition $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:5> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + <nat:2> \} $ . This is ensured by the assignment rule given in typical Hoare logic . Now , the variable assignmet statement binding $ <var:n> * <var:s> $ toward $ <var:n>$ . This redefines the precondition $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:5> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + <nat:2> \} $ toward the condition $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:7> + <nat:2> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + \} $ . This is shown with the assignment scheme found in Hoare logic . Moving forward , we see the environment update code \verb | <var:n> := <nat:3> + <var:n> * <var:s> ; | . This takes $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:7> + <nat:2> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + \} $ as the condition $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:8> + <nat:2> \cdot <var:l> ^ <nat:7> + <nat:2> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:3> \} $ . Moving forward , we see the variable binding code \verb | <var:n> := <var:n> * <var:s> ; | . This forwards $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:8> + <nat:2> \cdot <var:l> ^ <nat:7> + <nat:2> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:3> \} $ as $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:9> + <nat:2> \cdot <var:l> ^ <nat:8> + <nat:2> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:3> + <nat:3> \cdot <var:l> + \} $ . Stepping through , we have the line \verb | <var:n> := <nat:2> + <var:n> * <var:s> ; | . This code takes $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:9> + <nat:2> \cdot <var:l> ^ <nat:8> + <nat:2> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:3> + <nat:3> \cdot <var:l> + \} $ to $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:10> + <nat:2> \cdot <var:l> ^ <nat:9> + <nat:2> \cdot <var:l> ^ <nat:6> + <nat:1> \cdot <var:l> ^ <nat:5> + <nat:2> \cdot <var:l> ^ <nat:4> + <nat:3> \cdot <var:l> ^ <nat:2> + <nat:2> \} $ . This is ensured through the assignment rule given by Hoare techniques . Moving forward , we see the assignment statement binding $ <nat:2> + <var:n> * <var:s$ into $ <var:n>$ . This statement redefines $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:10> + <nat:2> \cdot <var:l> ^ <nat:9> + <nat:2> \cdot <var:l> ^ <nat:6> + <nat:1> \cdot <var:l> ^ <nat:5> + <nat:2> \cdot <var:l> ^ <nat:4> + <nat:3> \cdot <var:l> ^ <nat:2> + <nat:2> \} $ into $ \{ <var:s> = <var:l> \land <var:n> = <nat:1> \cdot <var:l> ^ <nat:11> + <nat:2> \cdot <var:l> ^ <nat:10> + <nat:2> \cdot <var:l> ^ <nat:7> + <nat:1> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:5> + <nat:3> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:s> = <var:l> }} <var:n> := <nat:1> ; <var:n> := <nat:2> + <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <nat:2> + <var:n> * <var:s> ; <var:n> := <nat:1> + <var:n> * <var:s> ; <var:n> := <nat:2> + <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <nat:3> + <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <nat:2> + <var:n> * <var:s> ; <var:n> := <nat:2> + <var:n> * <var:s> {{ <var:n> = <nat:1> * <var:l> ^ <nat:11> + <nat:2> * <var:l> ^ <nat:10> + <nat:2> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:3> + <nat:2> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:n> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:n> = <nat:1> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:n> = <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:n> = <nat:1> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:n> = <nat:1> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:n> = <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:2> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:n> = <nat:1> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:n> = <nat:1> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:n> = <nat:1> * <var:l> ^ <nat:8> + <nat:2> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:n> = <nat:1> * <var:l> ^ <nat:9> + <nat:2> * <var:l> ^ <nat:8> + <nat:2> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:3> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:n> = <nat:1> * <var:l> ^ <nat:10> + <nat:2> * <var:l> ^ <nat:9> + <nat:2> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:3> * <var:l> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:n> = <nat:1> * <var:l> ^ <nat:11> + <nat:2> * <var:l> ^ <nat:10> + <nat:2> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:3> + <nat:2> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 