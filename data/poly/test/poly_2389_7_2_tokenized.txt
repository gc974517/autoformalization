\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:a> := <nat:2> ; <var:a> := <nat:1> + <var:a> * <var:b> ; <var:a> := <nat:2> + <var:a> * <var:b> ; <var:a> := <var:a> * <var:b> ; <var:a> := <nat:3> + <var:a> * <var:b> ; <var:a> := <nat:1> + <var:a> * <var:b> ; <var:a> := <nat:4> + <var:a> * <var:b> \end{verbatim} \end{definition} \begin{theorem} Consider a list of instructions <def:poly> in \emph{Imp} . Assuming ( for any integers $ <var:V> $ ) it to hold that $ <var:b> = <var:V> $ before running our segment of code , it must be that $ <var:a> = <nat:2> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> $ when set of instructions terminates . \end{theorem} \begin{proof} Proving correctness for the set of commands can be given using usual Hoare techniques . Advancing , the environment update command yielding $ <nat:2> $ as $ <var:a>$ . This line forwards $ \{ <var:b> = <var:V> \} $ as the postcondition $ \{ <var:b> = <var:V> \land <var:a> = <nat:2> \} $ . Observing the proceeding command in our list of commands , we see the variable binding line \verb | <var:a> := <nat:1> + <var:a> * <var:b> ; | . This statement transfers the condition $ \{ <var:b> = <var:V> \land <var:a> = <nat:2> \} $ as the postcondition $ \{ <var:b> = <var:V> \land <var:a> = <nat:2> \times <var:V> + <nat:1> \} $ . This is shown to be logically sound with the assignment rule defined in typical Hoare techniques . Taking another step toward the subsequent command in our set of instructions , we have the variable update statement \verb | <var:a> := <nat:2> + <var:a> * <var:b> ; | . This forwards the precondition $ \{ <var:b> = <var:V> \land <var:a> = <nat:2> \times <var:V> + <nat:1> \} $ toward $ \{ <var:b> = <var:V> \land <var:a> = <nat:2> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:2> \} $ . This is sound with the assignment inference rule defined by typical Hoare techniques . Advancing , we have the assignment statement letting $ <var:a> * <var:b> $ as $ <var:a>$ . This moves the condition $ \{ <var:b> = <var:V> \land <var:a> = <nat:2> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:2> \} $ toward the condition $ \{ <var:b> = <var:V> \land <var:a> = <nat:2> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + \} $ . This is deduced by the assignment scheme in standard Hoare reasoning . Advancing to the next piece of code seen in our code , we see the binding command giving $ <nat:3> + <var:a> * <var:b> $ toward $ <var:a>$ . This line forwards $ \{ <var:b> = <var:V> \land <var:a> = <nat:2> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + \} $ into the postcondition $ \{ <var:b> = <var:V> \land <var:a> = <nat:2> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:3> \} $ . Keeping momentum , we see the variable assignmet statement defining $ <nat:1> + <var:a> * <var:b> $ into $ <var:a>$ . This redefines $ \{ <var:b> = <var:V> \land <var:a> = <nat:2> \times <var:V> ^ <nat:4> + <nat:1> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:3> \} $ toward the postcondition $ \{ <var:b> = <var:V> \land <var:a> = <nat:2> \times <var:V> ^ <nat:5> + <nat:1> \times <var:V> ^ <nat:4> + <nat:2> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> + <nat:1> \} $ . This is rigorously given through the assignment inference rule obtained from usual Hoare techniques . Going to the next step , we see the environment update statement \verb | <var:a> := <nat:4> + <var:a> * <var:b> | . This redefines $ \{ <var:b> = <var:V> \land <var:a> = <nat:2> \times <var:V> ^ <nat:5> + <nat:1> \times <var:V> ^ <nat:4> + <nat:2> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> + <nat:1> \} $ into the condition $ \{ <var:b> = <var:V> \land <var:a> = <nat:2> \times <var:V> ^ <nat:6> + <nat:1> \times <var:V> ^ <nat:5> + <nat:2> \times <var:V> ^ <nat:4> + <nat:3> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:a> := <nat:2> ; <var:a> := <nat:1> + <var:a> * <var:b> ; <var:a> := <nat:2> + <var:a> * <var:b> ; <var:a> := <var:a> * <var:b> ; <var:a> := <nat:3> + <var:a> * <var:b> ; <var:a> := <nat:1> + <var:a> * <var:b> ; <var:a> := <nat:4> + <var:a> * <var:b> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:b> = <var:V> }} <def:poly> {{ <var:a> = <nat:2> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:a> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:a> = <nat:2> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:a> = <nat:2> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:a> = <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:a> = <nat:2> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:a> = <nat:2> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:a> = <nat:2> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 