\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:4> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:j> ; <var:Y> := <var:G1> ; <var:Y> := <var:Y> + <var:G0> \end{verbatim} Assuming that we have $ <var:j> = <var:b> $ for integers $ <var:b> $ before executing the code segment , it must be that we have $ <var:Y> = <nat:3> \cdot <var:b> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of our series of instructions is evident using typical Hoare reasoning . Honing in on the upcoming step found in the list of instructions , we have the variable assignmet command \verb | <var:G0> := <nat:4> ; | . This takes the condition $ \{ <var:j> = <var:b> \} $ toward $ \{ <var:j> = <var:b> \land <var:G0> = <nat:4> \} $ . This is given using the assignment inference rule defined in usual Hoare techniques . Advancing to the next step , we see the binding statement \verb | <var:G1> := <nat:3> ; | . This command transfers the condition $ \{ <var:j> = <var:b> \land <var:G0> = <nat:4> \} $ as the postcondition $ \{ <var:j> = <var:b> \land <var:G0> = <nat:4> \land <var:G1> = <nat:3> \} $ . This is deduced with the assignment rule defined by usual Hoare reasoning . Immediately after , we see the environment update line letting $ <var:G1> * <var:j> $ toward $ <var:G1>$ . This moves the condition $ \{ <var:j> = <var:b> \land <var:G0> = <nat:4> \land <var:G1> = <nat:3> \} $ as the postcondition $ \{ <var:j> = <var:b> \land <var:G0> = <nat:4> \land <var:G1> = <nat:3> * <var:b> \} $ . Moving on to the subsequent command in the series of commands , we see the assignment line \verb | <var:Y> := <var:G1> ; | . This code moves $ \{ <var:j> = <var:b> \land <var:G0> = <nat:4> \land <var:G1> = <nat:3> * <var:b> \} $ as the postcondition $ \{ <var:j> = <var:b> \land <var:G0> = <nat:4> \land <var:Y> = <nat:3> * <var:b> \} $ . Looking at the upcoming piece of code in our code , we have the environment update line \verb | <var:Y> := <var:Y> + <var:G0> | . This takes $ \{ <var:j> = <var:b> \land <var:G0> = <nat:4> \land <var:Y> = <nat:3> * <var:b> \} $ to the postcondition $ \{ <var:j> = <var:b> \land <var:Y> = <nat:3> * <var:b> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:j> = <var:b> }} <var:G0> := <nat:4> ; <var:G1> := <nat:3> ; <var:G1> := <var:G1> * <var:j> ; <var:Y> := <var:G1> ; <var:Y> := <var:Y> + <var:G0> {{ <var:Y> = <nat:3> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:G0> = <nat:4> /\ <var:Y> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:Y> = <nat:3> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 