\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h> := <nat:4> ; <var:h> := <nat:4> + <var:h> * <var:d> ; <var:h> := <nat:2> + <var:h> * <var:d> ; <var:h> := <nat:3> + <var:h> * <var:d> ; <var:h> := <var:h> * <var:d> ; <var:h> := <nat:3> + <var:h> * <var:d> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:d> = <var:R> $ before executing our code segment , it holds that we have $ <var:h> = <nat:4> \times <var:R> ^ <nat:5> + <nat:4> \times <var:R> ^ <nat:4> + <nat:2> \times <var:R> ^ <nat:3> + <nat:3> \times <var:R> ^ <nat:2> + <nat:3> $ after series of commands finishes . \end{theorem} \begin{proof} The method of proof for the list of commands is accomplished by usual Hoare reasoning . Observing the proceeding steps seen in the list of commands , we see \verb | { <var:d> = <var:R> } <var:h> := <nat:4> { <var:d> = <var:R> \land <var:h> = <nat:4> } | , \verb | { <var:d> = <var:R> \land <var:h> = <nat:4> } <var:h> := <nat:4> + <var:h> * <var:d> { <var:d> = <var:R> \land <var:h> = <nat:4> \times <var:R> + <nat:4> } | and \verb | { <var:d> = <var:R> \land <var:h> = <nat:4> \times <var:R> + <nat:4> } <var:h> := <nat:2> + <var:h> * <var:d> { <var:d> = <var:R> \land <var:h> = <nat:4> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:2> } | . This is sound with the assignment inference rule from usual Hoare reasoning . Honing in on the proceeding statement contained in our series of instructions , we see \verb | { <var:d> = <var:R> } <var:h> := <nat:4> { <var:d> = <var:R> \land <var:h> = <nat:4> } | . Moving forward , we see \verb | { <var:d> = <var:R> } <var:h> := <nat:4> { <var:d> = <var:R> \land <var:h> = <nat:4> } | and \verb | { <var:d> = <var:R> \land <var:h> = <nat:4> } <var:h> := <nat:4> + <var:h> * <var:d> { <var:d> = <var:R> \land <var:h> = <nat:4> \times <var:R> + <nat:4> } | . This is given through the assignment scheme defined by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:4> ; <var:h> := <nat:4> + <var:h> * <var:d> ; <var:h> := <nat:2> + <var:h> * <var:d> ; <var:h> := <nat:3> + <var:h> * <var:d> ; <var:h> := <var:h> * <var:d> ; <var:h> := <nat:3> + <var:h> * <var:d> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:d> = <var:R> }} <def:poly> {{ <var:h> = <nat:4> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:h> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:h> = <nat:4> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:h> = <nat:4> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:h> = <nat:4> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:h> = <nat:4> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:R> /\ <var:h> = <nat:4> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:2> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 