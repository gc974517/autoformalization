\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:7> ; <var:U1> := <nat:6> ; <var:U1> := <var:U1> * <var:W> ; <var:U2> := <nat:2> ; <var:U2> := <var:U2> * <var:W> ; <var:U2> := <var:U2> * <var:W> ; <var:M> := <var:U2> ; <var:M> := <var:M> + <var:U1> ; <var:M> := <var:M> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> in \emph{Imp} . Allow it to hold that $ <var:W> = <var:s> $ prior to the execution of this code , it must be that $ <var:M> = <nat:2> \cdot <var:s> ^ <nat:2> + <nat:6> \cdot <var:s> + <nat:7> $ when list of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:W> = <var:s> \} \\ <var:U0> := <nat:7> ; \\ \{ <var:W> = <var:s> \land <var:U0> = <nat:7> \} \\ <var:U1> := <nat:6> ; \\ \{ <var:W> = <var:s> \land <var:U0> = <nat:7> \land <var:U1> = <nat:6> \} \\ <var:U1> := <var:U1> * <var:W> ; \\ \{ <var:W> = <var:s> \land <var:U0> = <nat:7> \land <var:U1> = <nat:6> * <var:s> \} \\ <var:U2> := <nat:2> ; \\ \{ <var:W> = <var:s> \land <var:U0> = <nat:7> \land <var:U1> = <nat:6> * <var:s> \land <var:U2> = <nat:2> \} \\ <var:U2> := <var:U2> * <var:W> ; \\ \{ <var:W> = <var:s> \land <var:U0> = <nat:7> \land <var:U1> = <nat:6> * <var:s> \land <var:U2> = <nat:2> * <var:s> \} \\ <var:U2> := <var:U2> * <var:W> ; \\ \{ <var:W> = <var:s> \land <var:U0> = <nat:7> \land <var:U1> = <nat:6> * <var:s> \land <var:U2> = <nat:2> * <var:s> ^ <nat:2> \} \\ <var:M> := <var:U2> ; \\ \{ <var:W> = <var:s> \land <var:U0> = <nat:7> \land <var:U1> = <nat:6> * <var:s> \land <var:M> = <nat:2> * <var:s> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:U1> ; \\ \{ <var:W> = <var:s> \land <var:U0> = <nat:7> \land <var:M> = <nat:2> * <var:s> ^ <nat:2> + <nat:6> * <var:s> \} \\ <var:M> := <var:M> + <var:U0> \\ \{ <var:W> = <var:s> \land <var:M> = <nat:2> * <var:s> ^ <nat:2> + <nat:6> * <var:s> + <nat:7> \} \end{eqnarray} The application of usual Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U0> := <nat:7> ; <var:U1> := <nat:6> ; <var:U1> := <var:U1> * <var:W> ; <var:U2> := <nat:2> ; <var:U2> := <var:U2> * <var:W> ; <var:U2> := <var:U2> * <var:W> ; <var:M> := <var:U2> ; <var:M> := <var:M> + <var:U1> ; <var:M> := <var:M> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:W> = <var:s> }} <def:poly> {{ <var:M> = <nat:2> * <var:s> ^ <nat:2> + <nat:6> * <var:s> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:6> * <var:s> /\ <var:U2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:6> * <var:s> /\ <var:U2> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:6> * <var:s> /\ <var:U2> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:U0> = <nat:7> /\ <var:U1> = <nat:6> * <var:s> /\ <var:M> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:U0> = <nat:7> /\ <var:M> = <nat:2> * <var:s> ^ <nat:2> + <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:s> /\ <var:M> = <nat:2> * <var:s> ^ <nat:2> + <nat:6> * <var:s> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 