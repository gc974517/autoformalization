\begin{document} \begin{theorem} We define a code segment : \begin{verbatim} <var:s1> := <var:r> ; <var:s2> := <var:s1> * <var:r> ; <var:s3> := <var:s2> * <var:r> ; <var:s0> := <nat:7> ; <var:s1> := <var:s1> * <nat:6> ; <var:s2> := <var:s2> * <nat:6> ; <var:s3> := <var:s3> * <nat:3> ; <var:U> := <var:s3> <var:U> := <var:U> + <var:s2> <var:U> := <var:U> + <var:s1> <var:U> := <var:U> + <var:s0> \end{verbatim} Given it to be that $ <var:r> = <var:f> $ ahead of the execution of our segment of code , it holds that we have $ <var:U> = <nat:3> \times <var:f> ^ <nat:3> + <nat:6> \times <var:f> ^ <nat:2> + <nat:6> \times <var:f> + <nat:7> $ after set of instructions has executed . \end{theorem} \begin{proof} See that this decorated segment of code . \begin{eqnarray} \{ <var:r> = <var:f> \} \\ <var:s1> := <var:r> ; \\ \{ <var:r> = <var:f> \land <var:s1> = <var:f> \} \\ <var:s2> := <var:s1> * <var:r> ; \\ \{ <var:r> = <var:f> \land <var:s1> = <var:f> \land <var:s2> = <var:f> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:r> ; \\ \{ <var:r> = <var:f> \land <var:s1> = <var:f> \land <var:s2> = <var:f> ^ <nat:2> \land <var:s3> = <var:f> ^ <nat:3> \} \\ <var:s0> := <nat:7> ; \\ \{ <var:r> = <var:f> \land <var:s1> = <var:f> \land <var:s2> = <var:f> ^ <nat:2> \land <var:s3> = <var:f> ^ <nat:3> \land <var:s0> = <nat:7> \} \\ <var:s1> := <var:s1> * <nat:6> ; \\ \{ <var:r> = <var:f> \land <var:s1> = <nat:6> * <var:f> \land <var:s2> = <var:f> ^ <nat:2> \land <var:s3> = <var:f> ^ <nat:3> \land <var:s0> = <nat:7> \} \\ <var:s2> := <var:s2> * <nat:6> ; \\ \{ <var:r> = <var:f> \land <var:s1> = <nat:6> * <var:f> \land <var:s2> = <nat:6> * <var:f> ^ <nat:2> \land <var:s3> = <var:f> ^ <nat:3> \land <var:s0> = <nat:7> \} \\ <var:s3> := <var:s3> * <nat:3> ; \\ \{ <var:r> = <var:f> \land <var:s1> = <nat:6> * <var:f> \land <var:s2> = <nat:6> * <var:f> ^ <nat:2> \land <var:s3> = <nat:3> * <var:f> ^ <nat:3> \land <var:s0> = <nat:7> \} \\ <var:U> := <var:s3> \\ \{ <var:r> = <var:f> \land <var:s1> = <nat:6> * <var:f> \land <var:s2> = <nat:6> * <var:f> ^ <nat:2> \land <var:s0> = <nat:7> \land <var:U> = <nat:3> * <var:f> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:s2> \\ \{ <var:r> = <var:f> \land <var:s1> = <nat:6> * <var:f> \land <var:s0> = <nat:7> \land <var:U> = <nat:3> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:s1> \\ \{ <var:r> = <var:f> \land <var:s0> = <nat:7> \land <var:U> = <nat:3> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:6> * <var:f> \} \\ <var:U> := <var:U> + <var:s0> \\ \{ <var:r> = <var:f> \land <var:U> = <nat:3> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:6> * <var:f> + <nat:7> \} \end{eqnarray} Utilizing usual Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:r> = <var:f> }} <var:s1> := <var:r> ; <var:s2> := <var:s1> * <var:r> ; <var:s3> := <var:s2> * <var:r> ; <var:s0> := <nat:7> ; <var:s1> := <var:s1> * <nat:6> ; <var:s2> := <var:s2> * <nat:6> ; <var:s3> := <var:s3> * <nat:3> ; <var:U> := <var:s3> <var:U> := <var:U> + <var:s2> <var:U> := <var:U> + <var:s1> <var:U> := <var:U> + <var:s0> {{ <var:U> = <nat:3> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:6> * <var:f> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:s1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:s1> = <var:f> /\ <var:s2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:s1> = <var:f> /\ <var:s2> = <var:f> ^ <nat:2> /\ <var:s3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:s1> = <var:f> /\ <var:s2> = <var:f> ^ <nat:2> /\ <var:s3> = <var:f> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:s1> = <nat:6> * <var:f> /\ <var:s2> = <var:f> ^ <nat:2> /\ <var:s3> = <var:f> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:s1> = <nat:6> * <var:f> /\ <var:s2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:s3> = <var:f> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:s1> = <nat:6> * <var:f> /\ <var:s2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:s3> = <nat:3> * <var:f> ^ <nat:3> /\ <var:s0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:s1> = <nat:6> * <var:f> /\ <var:s2> = <nat:6> * <var:f> ^ <nat:2> /\ <var:s0> = <nat:7> /\ <var:U> = <nat:3> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:s1> = <nat:6> * <var:f> /\ <var:s0> = <nat:7> /\ <var:U> = <nat:3> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:s0> = <nat:7> /\ <var:U> = <nat:3> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:6> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:f> /\ <var:U> = <nat:3> * <var:f> ^ <nat:3> + <nat:6> * <var:f> ^ <nat:2> + <nat:6> * <var:f> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 