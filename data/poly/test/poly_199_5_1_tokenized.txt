\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:G1> := <var:q> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:2> ; <var:L> := <var:G1> <var:L> := <var:L> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:q> = <var:A> $ prior to interpreting this program , it holds that $ <var:L> = <nat:2> \times <var:A> + <nat:1> $ after program executes . \end{theorem} \begin{proof} Demonstrating correctness of the list of commands is done using Hoare logic . Moving forward , we have \[ \begin{tabular} {rcl} \{ <var:q> = <var:A> \} & <var:G1> := <var:q> & \{ <var:q> = <var:A> \land <var:G1> = <var:A> \} \\ \{ <var:q> = <var:A> \land <var:G1> = <var:A> \} & <var:G0> := <nat:1> & \{ <var:q> = <var:A> \land <var:G1> = <var:A> \land <var:G0> = <nat:1> \} \end{tabular} This is rigorously given using the variable binding inference rule given in usual Hoare logic . Shifting focus toward the next statements contained in the program , \[ \begin{tabular} {rcl} \{ <var:q> = <var:A> \} & <var:G1> := <var:q> & \{ <var:q> = <var:A> \land <var:G1> = <var:A> \} \\ \{ <var:q> = <var:A> \land <var:G1> = <var:A> \} & <var:G0> := <nat:1> & \{ <var:q> = <var:A> \land <var:G1> = <var:A> \land <var:G0> = <nat:1> \} \\ \{ <var:q> = <var:A> \land <var:G1> = <var:A> \land <var:G0> = <nat:1> \} & <var:G1> := <var:G1> * <nat:2> & \{ <var:q> = <var:A> \land <var:G1> = <nat:2> \cdot <var:A> \land <var:G0> = <nat:1> \} \end{tabular} This is rigorously given using the variable assignmet law defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G1> := <var:q> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:2> ; <var:L> := <var:G1> <var:L> := <var:L> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:q> = <var:A> }} <def:poly> {{ <var:L> = <nat:2> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:G1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:G1> = <var:A> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:G1> = <nat:2> * <var:A> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:G0> = <nat:1> /\ <var:L> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:A> /\ <var:L> = <nat:2> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 