\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:4> ; <var:M> := <var:F0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:D> = <var:H> $ before the execution of our code segment it follows that we have $ <var:M> = <nat:4> $ when series of instructions terminates . \end{theorem} \begin{proof} Arguing the correctness of this program can be accomplished through standard Hoare logic . Moving on to the upcoming bit of code contained in our code segment , the variable update command letting $ <nat:4> $ as $ <var:F0>$ . This code advances $ \{ <var:D> = <var:H> \} $ into $ \{ <var:D> = <var:H> \land <var:F0> = <nat:4> \} $ . Immediately following , we have the environment update line assigning $ <var:F0$ into $ <var:M>$ . This statement transfers the precondition $ \{ <var:D> = <var:H> \land <var:F0> = <nat:4> \} $ to the postcondition $ \{ <var:D> = <var:H> \land <var:M> = <nat:4> \} $ . This is shown by the assignment rule of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <def:poly> := <var:F0> := <nat:4> ; <var:M> := <var:F0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:D> = <var:H> }} <def:poly> {{ <var:M> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:F0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:M> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 