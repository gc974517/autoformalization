\begin{document} \begin{theorem} We define a program as \begin{verbatim} <var:e0> := <nat:4> ; <var:R> := <var:e0> \end{verbatim} Allow ( for any whole numbers $ <var:Q> $ ) that we have $ <var:D> = <var:Q> $ ahead of the execution of our code then we see $ <var:R> = <nat:4> $ after set of instructions exits . \end{theorem} \begin{proof} Arguing the correctness of our list of instructions can be accomplished through standard Hoare reasoning . Further , the assignment code yielding $ <nat:4> $ to $ <var:e0>$ . This forwards the condition $ \{ <var:D> = <var:Q> \} $ to $ \{ <var:D> = <var:Q> \land <var:e0> = <nat:4> \} $ . Going to the next step , the line \verb | <var:R> := <var:e0> | . This command moves $ \{ <var:D> = <var:Q> \land <var:e0> = <nat:4> \} $ into the condition $ \{ <var:D> = <var:Q> \land <var:R> = <nat:4> \} $ . This is guaranteed by the assignment rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:D> = <var:Q> }} <var:e0> := <nat:4> ; <var:R> := <var:e0> {{ <var:R> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:e0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:Q> /\ <var:R> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 