\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:7> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:Z> ; <var:T> := <var:j1> ; <var:T> := <var:T> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:Z> = <var:N> $ --- assuming some whole numbers $ <var:N> $ --- before interpreting the set of instructions it holds that we have $ <var:T> = <nat:1> * <var:N> + <nat:7> $ after set of instructions has finished executing . \end{theorem} \begin{proof} Arguing the correctness of our set of commands is given through Hoare techniques . Observing the next bits of codein our list of instructions , we see \[ \begin{tabular} {rcl} \{ <var:Z> = <var:N> \} & <var:j0> := <nat:7> & \{ <var:Z> = <var:N> \land <var:j0> = <nat:7> \} \\ \{ <var:Z> = <var:N> \land <var:j0> = <nat:7> \} & <var:j1> := <nat:1> & \{ <var:Z> = <var:N> \land <var:j0> = <nat:7> \land <var:j1> = <nat:1> \} \\ \{ <var:Z> = <var:N> \land <var:j0> = <nat:7> \land <var:j1> = <nat:1> \} & <var:j1> := <var:j1> * <var:Z> & \{ <var:Z> = <var:N> \land <var:j0> = <nat:7> \land <var:j1> = <nat:1> \times <var:N> \} \\ \{ <var:Z> = <var:N> \land <var:j0> = <nat:7> \land <var:j1> = <nat:1> \times <var:N> \} & <var:T> := <var:j1> & \{ <var:Z> = <var:N> \land <var:j0> = <nat:7> \land <var:T> = <nat:1> \times <var:N> \} \\ \{ <var:Z> = <var:N> \land <var:j0> = <nat:7> \land <var:T> = <nat:1> \times <var:N> \} & <var:T> := <var:T> + <var:j0& \{ <var:Z> = <var:N> \land <var:T> = <nat:1> \times <var:N> + <nat:7> \} \end{tabular} This is ensured through the assignment scheme given in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <def:poly> := <var:j0> := <nat:7> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:Z> ; <var:T> := <var:j1> ; <var:T> := <var:T> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Z> = <var:N> }} <def:poly> {{ <var:T> = <nat:1> * <var:N> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:j0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:j0> = <nat:7> /\ <var:j1> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:j0> = <nat:7> /\ <var:T> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:T> = <nat:1> * <var:N> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 