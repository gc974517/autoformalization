\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:4> ; <var:A> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> . Allow ( assuming some whole numbers $ <var:M> $ ) that we have $ <var:f> = <var:M> $ before executing our program it follows that we have $ <var:A> = <nat:4> $ after set of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:M> \} \\ <var:o0> := <nat:4> ; \\ \{ <var:f> = <var:M> \land <var:o0> = <nat:4> \} \\ <var:A> := <var:o0> \\ \{ <var:f> = <var:M> \land <var:A> = <nat:4> \} \end{eqnarray} Using typical Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:4> ; <var:A> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:f> = <var:M> }} <def:poly> {{ <var:A> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:M> /\ <var:A> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 