\begin{document} \begin{theorem} Take a segment of code as \begin{verbatim} <var:t1> := <var:D> ; <var:t2> := <var:t1> * <var:D> ; <var:t0> := <nat:1> ; <var:t1> := <var:t1> * <nat:4> ; <var:t2> := <var:t2> * <nat:8> ; <var:O> := <var:t2> <var:O> := <var:O> + <var:t1> <var:O> := <var:O> + <var:t0> \end{verbatim} Given that $ <var:D> = <var:L> $ ahead of the evaluation of our list of commands it follows that we see $ <var:O> = <nat:8> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the code segment can be demonstrated with usual Hoare reasoning . Considering the following lines of codein the set of commands , we see \begin{verbatim} { <var:D> = <var:L> } <var:t1> := <var:D> { <var:D> = <var:L> \land <var:t1> = <var:L> } { <var:D> = <var:L> \land <var:t1> = <var:L> } <var:t2> := <var:t1> * <var:D> { <var:D> = <var:L> \land <var:t1> = <var:L> \land <var:t2> = <var:L> ^ <nat:2> } { <var:D> = <var:L> \land <var:t1> = <var:L> \land <var:t2> = <var:L> ^ <nat:2> } <var:t0> := <nat:1> { <var:D> = <var:L> \land <var:t1> = <var:L> \land <var:t2> = <var:L> ^ <nat:2> \land <var:t0> = <nat:1> } \end{verbatim} Jumping to the next commands in the list of commands , we have \begin{verbatim} { <var:D> = <var:L> } <var:t1> := <var:D> { <var:D> = <var:L> \land <var:t1> = <var:L> } { <var:D> = <var:L> \land <var:t1> = <var:L> } <var:t2> := <var:t1> * <var:D> { <var:D> = <var:L> \land <var:t1> = <var:L> \land <var:t2> = <var:L> ^ <nat:2> } { <var:D> = <var:L> \land <var:t1> = <var:L> \land <var:t2> = <var:L> ^ <nat:2> } <var:t0> := <nat:1> { <var:D> = <var:L> \land <var:t1> = <var:L> \land <var:t2> = <var:L> ^ <nat:2> \land <var:t0> = <nat:1> } \end{verbatim} This is ensured by the assignment scheme obtained from standard Hoare logic . Considering the proceeding lines of codefound in the program , \begin{verbatim} { <var:D> = <var:L> } <var:t1> := <var:D> { <var:D> = <var:L> \land <var:t1> = <var:L> } { <var:D> = <var:L> \land <var:t1> = <var:L> } <var:t2> := <var:t1> * <var:D> { <var:D> = <var:L> \land <var:t1> = <var:L> \land <var:t2> = <var:L> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:D> = <var:L> }} <var:t1> := <var:D> ; <var:t2> := <var:t1> * <var:D> ; <var:t0> := <nat:1> ; <var:t1> := <var:t1> * <nat:4> ; <var:t2> := <var:t2> * <nat:8> ; <var:O> := <var:t2> <var:O> := <var:O> + <var:t1> <var:O> := <var:O> + <var:t0> {{ <var:O> = <nat:8> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:L> /\ <var:t1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:L> /\ <var:t1> = <var:L> /\ <var:t2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:L> /\ <var:t1> = <var:L> /\ <var:t2> = <var:L> ^ <nat:2> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:L> /\ <var:t1> = <nat:4> * <var:L> /\ <var:t2> = <var:L> ^ <nat:2> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:L> /\ <var:t1> = <nat:4> * <var:L> /\ <var:t2> = <nat:8> * <var:L> ^ <nat:2> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:L> /\ <var:t1> = <nat:4> * <var:L> /\ <var:t0> = <nat:1> /\ <var:O> = <nat:8> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:L> /\ <var:t0> = <nat:1> /\ <var:O> = <nat:8> * <var:L> ^ <nat:2> + <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:L> /\ <var:O> = <nat:8> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 