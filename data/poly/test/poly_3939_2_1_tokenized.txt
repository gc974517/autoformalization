\begin{document} \begin{theorem} Define a list of instructions such that \begin{verbatim} <var:E0> := <nat:1> ; <var:y> := <var:E0> \end{verbatim} Assume it to be that $ <var:I> = <var:o> $ for some natural coefficients $ <var:o> $ ahead of executing our set of commands then $ <var:y> = <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this series of instructions can be accomplished with standard Hoare reasoning . Moving on , the command \verb | <var:E0> := <nat:1> ; | . This redefines the precondition $ \{ <var:I> = <var:o> \} $ into the postcondition $ \{ <var:I> = <var:o> \land <var:E0> = <nat:1> \} $ . Next , the code giving $ <var:E0$ toward $ <var:y>$ . This moves the condition $ \{ <var:I> = <var:o> \land <var:E0> = <nat:1> \} $ toward the postcondition $ \{ <var:I> = <var:o> \land <var:y> = <nat:1> \} $ . This is sound through the assignment inference rule in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:I> = <var:o> }} <var:E0> := <nat:1> ; <var:y> := <var:E0> {{ <var:y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:E0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:o> /\ <var:y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 