\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} such that \begin{verbatim} <var:m> := <nat:1> ; <var:m> := <nat:2> + <var:m> * <var:L> ; <var:m> := <nat:1> + <var:m> * <var:L> \end{verbatim} Assuming for some positive numbers $ <var:t> $ it to be that $ <var:L> = <var:t> $ before executing the code , it must be that we have $ <var:m> = <nat:1> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:t> \} \\ <var:m> := <nat:1> ; \\ \{ <var:L> = <var:t> \land <var:m> = <nat:1> \} \\ <var:m> := <nat:2> + <var:m> * <var:L> ; \\ \{ <var:L> = <var:t> \land <var:m> = <nat:1> * <var:t> + <nat:2> \} \\ <var:m> := <nat:1> + <var:m> * <var:L> \\ \{ <var:L> = <var:t> \land <var:m> = <nat:1> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:1> \} \end{eqnarray} Applying usual Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:L> = <var:t> }} <var:m> := <nat:1> ; <var:m> := <nat:2> + <var:m> * <var:L> ; <var:m> := <nat:1> + <var:m> * <var:L> {{ <var:m> = <nat:1> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:m> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:m> = <nat:1> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:t> /\ <var:m> = <nat:1> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 