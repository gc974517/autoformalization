\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} as \begin{verbatim} <var:C0> := <nat:2> ; <var:B> := <var:C0> \end{verbatim} Allowing it to hold that $ <var:c> = <var:J> $ before the execution of the set of instructions it holds that $ <var:B> = <nat:2> $ once set of instructions has finished executing . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:c> = <var:J> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:c> = <var:J> \land <var:C0> = <nat:2> \} \\ <var:B> := <var:C0> \\ \{ <var:c> = <var:J> \land <var:B> = <nat:2> \} \end{eqnarray} Thus , the code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:c> = <var:J> }} <var:C0> := <nat:2> ; <var:B> := <var:C0> {{ <var:B> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:B> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 