\begin{document} \begin{theorem} Define the following set of instructions as follows \begin{verbatim} <var:P1> := <var:R> ; <var:P0> := <nat:8> ; <var:P1> := <var:P1> * <nat:6> ; <var:H> := <var:P1> <var:H> := <var:H> + <var:P0> \end{verbatim} Allowing it to hold that $ <var:R> = <var:e> $ ahead of evaluating this code segment then we have $ <var:H> = <nat:6> * <var:e> + <nat:8> $ when list of instructions has finished executing . \end{theorem} \begin{proof} The course of logic for our list of instructions is done through typical Hoare techniques . Taking a look at the next piece of code found in our series of instructions , we see the variable assignmet statement assigning $ <var:R> $ to $ <var:P1>$ . This line moves $ \{ <var:R> = <var:e> \} $ toward $ \{ <var:R> = <var:e> \land <var:P1> = <var:e> \} $ . Taking another step toward the proceeding command in our set of commands , we have the environment update command \verb | <var:P0> := <nat:8> ; | . This takes the condition $ \{ <var:R> = <var:e> \land <var:P1> = <var:e> \} $ to $ \{ <var:R> = <var:e> \land <var:P1> = <var:e> \land <var:P0> = <nat:8> \} $ . This is ensured with the assignment scheme obtained from Hoare reasoning . Taking a look at the subsequent piece of code in the list of commands , we see the variable update command giving $ <var:P1> * <nat:6> $ to $ <var:P1>$ . This code moves $ \{ <var:R> = <var:e> \land <var:P1> = <var:e> \land <var:P0> = <nat:8> \} $ to $ \{ <var:R> = <var:e> \land <var:P1> = <nat:6> * <var:e> \land <var:P0> = <nat:8> \} $ . Immediately after , the binding command \verb | <var:H> := <var:P1> | . This moves the condition $ \{ <var:R> = <var:e> \land <var:P1> = <nat:6> * <var:e> \land <var:P0> = <nat:8> \} $ to the postcondition $ \{ <var:R> = <var:e> \land <var:P0> = <nat:8> \land <var:H> = <nat:6> * <var:e> \} $ . Shifting focus toward the subsequent command in our segment of code , we have the binding statement defining $ <var:H> + <var:P0$ into $ <var:H>$ . This code advances the precondition $ \{ <var:R> = <var:e> \land <var:P0> = <nat:8> \land <var:H> = <nat:6> * <var:e> \} $ toward $ \{ <var:R> = <var:e> \land <var:H> = <nat:6> * <var:e> + <nat:8> \} $ . This is guaranteed using the assignment inference rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:R> = <var:e> }} <var:P1> := <var:R> ; <var:P0> := <nat:8> ; <var:P1> := <var:P1> * <nat:6> ; <var:H> := <var:P1> <var:H> := <var:H> + <var:P0> {{ <var:H> = <nat:6> * <var:e> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:P1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:P1> = <var:e> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:P1> = <nat:6> * <var:e> /\ <var:P0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:P0> = <nat:8> /\ <var:H> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:e> /\ <var:H> = <nat:6> * <var:e> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 