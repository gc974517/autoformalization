\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H> := <nat:2> ; <var:H> := <nat:4> + <var:H> * <var:K> ; <var:H> := <nat:4> + <var:H> * <var:K> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <var:H> * <var:K> ; <var:H> := <nat:4> + <var:H> * <var:K> ; <var:H> := <var:H> * <var:K> ; <var:H> := <var:H> * <var:K> ; <var:H> := <var:H> * <var:K> ; <var:H> := <nat:2> + <var:H> * <var:K> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:K> = <var:L> $ before the evaluation of our code segment , it must be that $ <var:H> = <nat:2> \cdot <var:L> ^ <nat:9> + <nat:4> \cdot <var:L> ^ <nat:8> + <nat:4> \cdot <var:L> ^ <nat:7> + <nat:1> \cdot <var:L> ^ <nat:6> + <nat:4> \cdot <var:L> ^ <nat:4> + <nat:2> $ . \end{theorem} \begin{proof} The argument for the list of instructions can be demonstrated through usual Hoare logic . Moving forward to the next lines of codeseen in the list of instructions , we have \verb | { <var:K> = <var:L> } <var:H> := <nat:2> { <var:K> = <var:L> \land <var:H> = <nat:2> } | , \verb | { <var:K> = <var:L> \land <var:H> = <nat:2> } <var:H> := <nat:4> + <var:H> * <var:K> { <var:K> = <var:L> \land <var:H> = <nat:2> * <var:L> + <nat:4> } | , \verb | { <var:K> = <var:L> \land <var:H> = <nat:2> * <var:L> + <nat:4> } <var:H> := <nat:4> + <var:H> * <var:K> { <var:K> = <var:L> \land <var:H> = <nat:2> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:4> } | , \verb | { <var:K> = <var:L> \land <var:H> = <nat:2> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:4> } <var:H> := <nat:1> + <var:H> * <var:K> { <var:K> = <var:L> \land <var:H> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:1> } | , \verb | { <var:K> = <var:L> \land <var:H> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:1> } <var:H> := <var:H> * <var:K> { <var:K> = <var:L> \land <var:H> = <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + } | , \verb | { <var:K> = <var:L> \land <var:H> = <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + } <var:H> := <nat:4> + <var:H> * <var:K> { <var:K> = <var:L> \land <var:H> = <nat:2> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:4> } | and \verb | { <var:K> = <var:L> \land <var:H> = <nat:2> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:4> } <var:H> := <var:H> * <var:K> { <var:K> = <var:L> \land <var:H> = <nat:2> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + } | . Immediately following , we see \verb | { <var:K> = <var:L> } <var:H> := <nat:2> { <var:K> = <var:L> \land <var:H> = <nat:2> } | . Next , we see \verb | { <var:K> = <var:L> } <var:H> := <nat:2> { <var:K> = <var:L> \land <var:H> = <nat:2> } | . Immediately after , we have \verb | { <var:K> = <var:L> } <var:H> := <nat:2> { <var:K> = <var:L> \land <var:H> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:2> ; <var:H> := <nat:4> + <var:H> * <var:K> ; <var:H> := <nat:4> + <var:H> * <var:K> ; <var:H> := <nat:1> + <var:H> * <var:K> ; <var:H> := <var:H> * <var:K> ; <var:H> := <nat:4> + <var:H> * <var:K> ; <var:H> := <var:H> * <var:K> ; <var:H> := <var:H> * <var:K> ; <var:H> := <var:H> * <var:K> ; <var:H> := <nat:2> + <var:H> * <var:K> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:K> = <var:L> }} <def:poly> {{ <var:H> = <nat:2> * <var:L> ^ <nat:9> + <nat:4> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:4> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:H> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:H> = <nat:2> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:H> = <nat:2> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:H> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:H> = <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:H> = <nat:2> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:H> = <nat:2> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:H> = <nat:2> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:H> = <nat:2> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:6> + <nat:1> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:L> /\ <var:H> = <nat:2> * <var:L> ^ <nat:9> + <nat:4> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:4> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 