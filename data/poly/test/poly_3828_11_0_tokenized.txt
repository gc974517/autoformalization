\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:4> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:C> ; <var:V4> := <nat:1> ; <var:V4> := <var:V4> * <var:C> ; <var:V4> := <var:V4> * <var:C> ; <var:V4> := <var:V4> * <var:C> ; <var:V4> := <var:V4> * <var:C> ; <var:I> := <var:V4> ; <var:I> := <var:I> + <var:V1> ; <var:I> := <var:I> + <var:V0> \end{verbatim} Allow $ <var:C> = <var:K> $ prior to evaluating this set of instructions it must be that we have $ <var:I> = <nat:1> \times <var:K> ^ <nat:4> + <nat:1> \times <var:K> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of our set of commands is clear using Hoare reasoning . Advancing to the next step , \verb | { <var:C> = <var:K> } <var:V0> := <nat:4> { <var:C> = <var:K> \land <var:V0> = <nat:4> } | and \verb | { <var:C> = <var:K> \land <var:V0> = <nat:4> } <var:V1> := <nat:1> { <var:C> = <var:K> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> } | . Moving forward to the upcoming lines of codecontained in the program , we see \verb | { <var:C> = <var:K> } <var:V0> := <nat:4> { <var:C> = <var:K> \land <var:V0> = <nat:4> } | , \verb | { <var:C> = <var:K> \land <var:V0> = <nat:4> } <var:V1> := <nat:1> { <var:C> = <var:K> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> } | , \verb | { <var:C> = <var:K> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> } <var:V1> := <var:V1> * <var:C> { <var:C> = <var:K> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> * <var:K> } | , \verb | { <var:C> = <var:K> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> * <var:K> } <var:V4> := <nat:1> { <var:C> = <var:K> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> * <var:K> \land <var:V4> = <nat:1> } | and \verb | { <var:C> = <var:K> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> * <var:K> \land <var:V4> = <nat:1> } <var:V4> := <var:V4> * <var:C> { <var:C> = <var:K> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> * <var:K> \land <var:V4> = <nat:1> * <var:K> } | . Moving onward , we see \verb | { <var:C> = <var:K> } <var:V0> := <nat:4> { <var:C> = <var:K> \land <var:V0> = <nat:4> } | and \verb | { <var:C> = <var:K> \land <var:V0> = <nat:4> } <var:V1> := <nat:1> { <var:C> = <var:K> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> } | . Moving forward to the next steps found in our set of commands , \verb | { <var:C> = <var:K> } <var:V0> := <nat:4> { <var:C> = <var:K> \land <var:V0> = <nat:4> } | and \verb | { <var:C> = <var:K> \land <var:V0> = <nat:4> } <var:V1> := <nat:1> { <var:C> = <var:K> \land <var:V0> = <nat:4> \land <var:V1> = <nat:1> } | . This is ensured with the assignment scheme defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V4> : string := " <var:V4> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:C> = <var:K> }} <var:V0> := <nat:4> ; <var:V1> := <nat:1> ; <var:V1> := <var:V1> * <var:C> ; <var:V4> := <nat:1> ; <var:V4> := <var:V4> * <var:C> ; <var:V4> := <var:V4> * <var:C> ; <var:V4> := <var:V4> * <var:C> ; <var:V4> := <var:V4> * <var:C> ; <var:I> := <var:V4> ; <var:I> := <var:I> + <var:V1> ; <var:I> := <var:I> + <var:V0> {{ <var:I> = <nat:1> * <var:K> ^ <nat:4> + <nat:1> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> * <var:K> /\ <var:V4> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> * <var:K> /\ <var:V4> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> * <var:K> /\ <var:V4> = <nat:1> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> * <var:K> /\ <var:V4> = <nat:1> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> * <var:K> /\ <var:V4> = <nat:1> * <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:V0> = <nat:4> /\ <var:V1> = <nat:1> * <var:K> /\ <var:I> = <nat:1> * <var:K> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:V0> = <nat:4> /\ <var:I> = <nat:1> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:K> /\ <var:I> = <nat:1> * <var:K> ^ <nat:4> + <nat:1> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 