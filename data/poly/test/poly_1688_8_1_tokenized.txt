\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U1> := <var:w> ; <var:U2> := <var:U1> * <var:w> ; <var:U0> := <nat:8> ; <var:U1> := <var:U1> * <nat:2> ; <var:U2> := <var:U2> * <nat:1> ; <var:c> := <var:U2> <var:c> := <var:c> + <var:U1> <var:c> := <var:c> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} We define a series of commands <def:poly> . Assume $ <var:w> = <var:K> $ --- assuming some whole numbers $ <var:K> $ --- ahead of the evaluation of this code segment , it follows that we have $ <var:c> = <nat:1> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> + <nat:8> $ once program is done executing . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands can be seen with standard Hoare techniques . Shifting focus toward the next commands found in the code , we see \begin{eqnarray} \{ <var:w> = <var:K> \} \, <var:U1> := <var:w> \, \{ <var:w> = <var:K> \land <var:U1> = <var:K> \} \\ \{ <var:w> = <var:K> \land <var:U1> = <var:K> \} \, <var:U2> := <var:U1> * <var:w> \, \{ <var:w> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \} \\ \{ <var:w> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \} \, <var:U0> := <nat:8> \, \{ <var:w> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U0> = <nat:8> \} \\ \{ <var:w> = <var:K> \land <var:U1> = <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U0> = <nat:8> \} \, <var:U1> := <var:U1> * <nat:2> \, \{ <var:w> = <var:K> \land <var:U1> = <nat:2> \cdot <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U0> = <nat:8> \} \\ \{ <var:w> = <var:K> \land <var:U1> = <nat:2> \cdot <var:K> \land <var:U2> = <var:K> ^ <nat:2> \land <var:U0> = <nat:8> \} \, <var:U2> := <var:U2> * <nat:1> \, \{ <var:w> = <var:K> \land <var:U1> = <nat:2> \cdot <var:K> \land <var:U2> = <nat:1> \cdot <var:K> ^ <nat:2> \land <var:U0> = <nat:8> \} \\ \{ <var:w> = <var:K> \land <var:U1> = <nat:2> \cdot <var:K> \land <var:U2> = <nat:1> \cdot <var:K> ^ <nat:2> \land <var:U0> = <nat:8> \} \, <var:c> := <var:U2\, \{ <var:w> = <var:K> \land <var:U1> = <nat:2> \cdot <var:K> \land <var:U0> = <nat:8> \land <var:c> = <nat:1> \cdot <var:K> ^ <nat:2> \} \\ \{ <var:w> = <var:K> \land <var:U1> = <nat:2> \cdot <var:K> \land <var:U0> = <nat:8> \land <var:c> = <nat:1> \cdot <var:K> ^ <nat:2> \} \, <var:c> := <var:c> + <var:U1\, \{ <var:w> = <var:K> \land <var:U0> = <nat:8> \land <var:c> = <nat:1> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> \} \end{eqnarray} Moving forward to the next step , we have \begin{eqnarray} \{ <var:w> = <var:K> \} \, <var:U1> := <var:w> \, \{ <var:w> = <var:K> \land <var:U1> = <var:K> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U1> := <var:w> ; <var:U2> := <var:U1> * <var:w> ; <var:U0> := <nat:8> ; <var:U1> := <var:U1> * <nat:2> ; <var:U2> := <var:U2> * <nat:1> ; <var:c> := <var:U2> <var:c> := <var:c> + <var:U1> <var:c> := <var:c> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:w> = <var:K> }} <def:poly> {{ <var:c> = <nat:1> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:U1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:U1> = <var:K> /\ <var:U2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:U1> = <var:K> /\ <var:U2> = <var:K> ^ <nat:2> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:U1> = <nat:2> * <var:K> /\ <var:U2> = <var:K> ^ <nat:2> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:U1> = <nat:2> * <var:K> /\ <var:U2> = <nat:1> * <var:K> ^ <nat:2> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:U1> = <nat:2> * <var:K> /\ <var:U0> = <nat:8> /\ <var:c> = <nat:1> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:U0> = <nat:8> /\ <var:c> = <nat:1> * <var:K> ^ <nat:2> + <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:K> /\ <var:c> = <nat:1> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 