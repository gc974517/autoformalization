\begin{document} \begin{theorem} Take the following series of instructions as \begin{verbatim} <var:a0> := <nat:1> ; <var:a1> := <nat:1> ; <var:a1> := <var:a1> * <var:j> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:j> ; <var:a2> := <var:a2> * <var:j> ; <var:a3> := <nat:5> ; <var:a3> := <var:a3> * <var:j> ; <var:a3> := <var:a3> * <var:j> ; <var:a3> := <var:a3> * <var:j> ; <var:X> := <var:a3> ; <var:X> := <var:X> + <var:a2> ; <var:X> := <var:X> + <var:a1> ; <var:X> := <var:X> + <var:a0> \end{verbatim} Assume , for every $ <var:r> \in \mathbb{N} $ , that $ <var:j> = <var:r> $ ahead of evaluating the segment of code it follows that $ <var:X> = <nat:5> \times <var:r> ^ <nat:3> + <nat:3> \times <var:r> ^ <nat:2> + <nat:1> \times <var:r> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for the list of instructions is done with Hoare techniques . Moving forward to the upcoming command found in our code segment , we see the variable assignmet code letting $ <nat:1> $ to $ <var:a0>$ . This command redefines the condition $ \{ <var:j> = <var:r> \} $ toward $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \} $ . Moving on to the subsequent command seen in our list of instructions , we see the variable update statement defining $ <nat:1> $ toward $ <var:a1>$ . This moves the precondition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \} $ to $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \} $ . Advancing to the next step , we see the variable update code \verb | <var:a1> := <var:a1> * <var:j> ; | . This code moves the condition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \} $ toward the condition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \} $ . This is ensured with the assignment rule defined by standard Hoare reasoning . Immediately after , the code giving $ <nat:3> $ into $ <var:a2>$ . This takes the condition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \} $ toward $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \} $ . Moving on to the next step , we have the environment update line yielding $ <var:a2> * <var:j> $ to $ <var:a2>$ . This takes the condition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \} $ into $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> \} $ . Focusing on the subsequent statement in our series of commands , we have the environment update code letting $ <var:a2> * <var:j> $ toward $ <var:a2>$ . This statement advances the condition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> \} $ to the condition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> ^ <nat:2> \} $ . This is sound with the assignment law given in usual Hoare techniques . Jumping to the next statement contained in our set of commands , we see the variable binding statement defining $ <nat:5> $ into $ <var:a3>$ . This command forwards the condition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> ^ <nat:2> \} $ as the condition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:5> \} $ . Taking a look at the subsequent line seen in our list of instructions , we have the variable assignmet line letting $ <var:a3> * <var:j> $ to $ <var:a3>$ . This command advances the precondition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:5> \} $ into the postcondition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:5> \cdot <var:r> \} $ . Moving forward to the next step , the code \verb | <var:a3> := <var:a3> * <var:j> ; | . This command takes $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:5> \cdot <var:r> \} $ toward $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:5> \cdot <var:r> ^ <nat:2> \} $ . This is deduced by the assignment law of Hoare techniques . Looking at the subsequent piece of code seen in our list of instructions , the variable assignmet code defining $ <var:a3> * <var:j> $ as $ <var:a3>$ . This forwards the precondition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:5> \cdot <var:r> ^ <nat:2> \} $ as the condition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:5> \cdot <var:r> ^ <nat:3> \} $ . Moving forward , the code \verb | <var:X> := <var:a3> ; | . This takes $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:5> \cdot <var:r> ^ <nat:3> \} $ as the postcondition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:X> = <nat:5> \cdot <var:r> ^ <nat:3> \} $ . Moving forward to the following bit of code found in our code segment , the assignment statement \verb | <var:X> := <var:X> + <var:a2> ; | . This line transfers the condition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:a2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:X> = <nat:5> \cdot <var:r> ^ <nat:3> \} $ to the condition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:X> = <nat:5> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> \} $ . Honing in on the upcoming statement found in our program , we see the binding code yielding $ <var:X> + <var:a1> $ toward $ <var:X>$ . This redefines the precondition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:a1> = <nat:1> \cdot <var:r> \land <var:X> = <nat:5> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> \} $ into the condition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:X> = <nat:5> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> + <nat:1> \cdot <var:r> \} $ . This is guaranteed through the assignment scheme from typical Hoare techniques . Stepping forward , we see the variable assignmet line \verb | <var:X> := <var:X> + <var:a0> | . This command redefines the precondition $ \{ <var:j> = <var:r> \land <var:a0> = <nat:1> \land <var:X> = <nat:5> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> + <nat:1> \cdot <var:r> \} $ toward $ \{ <var:j> = <var:r> \land <var:X> = <nat:5> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> + <nat:1> \cdot <var:r> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:j> = <var:r> }} <var:a0> := <nat:1> ; <var:a1> := <nat:1> ; <var:a1> := <var:a1> * <var:j> ; <var:a2> := <nat:3> ; <var:a2> := <var:a2> * <var:j> ; <var:a2> := <var:a2> * <var:j> ; <var:a3> := <nat:5> ; <var:a3> := <var:a3> * <var:j> ; <var:a3> := <var:a3> * <var:j> ; <var:a3> := <var:a3> * <var:j> ; <var:X> := <var:a3> ; <var:X> := <var:X> + <var:a2> ; <var:X> := <var:X> + <var:a1> ; <var:X> := <var:X> + <var:a0> {{ <var:X> = <nat:5> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:1> * <var:r> /\ <var:a2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:1> * <var:r> /\ <var:a2> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:1> * <var:r> /\ <var:a2> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:1> * <var:r> /\ <var:a2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:1> * <var:r> /\ <var:a2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:5> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:1> * <var:r> /\ <var:a2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:5> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:1> * <var:r> /\ <var:a2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:5> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:1> * <var:r> /\ <var:a2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:X> = <nat:5> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a0> = <nat:1> /\ <var:a1> = <nat:1> * <var:r> /\ <var:X> = <nat:5> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:a0> = <nat:1> /\ <var:X> = <nat:5> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:1> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:r> /\ <var:X> = <nat:5> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:1> * <var:r> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 