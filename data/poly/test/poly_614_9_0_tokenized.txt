\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:3> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:i> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:i> ; <var:c2> := <var:c2> * <var:i> ; <var:T> := <var:c2> ; <var:T> := <var:T> + <var:c1> ; <var:T> := <var:T> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Given assuming some $ <var:M> \in \mathbb{Z}^+ $ that we have $ <var:i> = <var:M> $ prior to the execution of the code segment , then $ <var:T> = <nat:2> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:3> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning results in : \begin{eqnarray} \{ <var:i> = <var:M> \} \\ <var:c0> := <nat:3> ; \\ \{ <var:i> = <var:M> \land <var:c0> = <nat:3> \} \\ <var:c1> := <nat:3> ; \\ \{ <var:i> = <var:M> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \} \\ <var:c1> := <var:c1> * <var:i> ; \\ \{ <var:i> = <var:M> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \times <var:M> \} \\ <var:c2> := <nat:2> ; \\ \{ <var:i> = <var:M> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \times <var:M> \land <var:c2> = <nat:2> \} \\ <var:c2> := <var:c2> * <var:i> ; \\ \{ <var:i> = <var:M> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \times <var:M> \land <var:c2> = <nat:2> \times <var:M> \} \\ <var:c2> := <var:c2> * <var:i> ; \\ \{ <var:i> = <var:M> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \times <var:M> \land <var:c2> = <nat:2> \times <var:M> ^ <nat:2> \} \\ <var:T> := <var:c2> ; \\ \{ <var:i> = <var:M> \land <var:c0> = <nat:3> \land <var:c1> = <nat:3> \times <var:M> \land <var:T> = <nat:2> \times <var:M> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:c1> ; \\ \{ <var:i> = <var:M> \land <var:c0> = <nat:3> \land <var:T> = <nat:2> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> \} \\ <var:T> := <var:T> + <var:c0> \\ \{ <var:i> = <var:M> \land <var:T> = <nat:2> \times <var:M> ^ <nat:2> + <nat:3> \times <var:M> + <nat:3> \} \end{eqnarray} As a consequence , our series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c0> := <nat:3> ; <var:c1> := <nat:3> ; <var:c1> := <var:c1> * <var:i> ; <var:c2> := <nat:2> ; <var:c2> := <var:c2> * <var:i> ; <var:c2> := <var:c2> * <var:i> ; <var:T> := <var:c2> ; <var:T> := <var:T> + <var:c1> ; <var:T> := <var:T> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:i> = <var:M> }} <def:poly> {{ <var:T> = <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:M> /\ <var:c2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:M> /\ <var:c2> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:M> /\ <var:c2> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:c0> = <nat:3> /\ <var:c1> = <nat:3> * <var:M> /\ <var:T> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:c0> = <nat:3> /\ <var:T> = <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:M> /\ <var:T> = <nat:2> * <var:M> ^ <nat:2> + <nat:3> * <var:M> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 