\begin{document} \begin{theorem} Take a list of instructions in \emph{Imp} : \begin{verbatim} <var:w1> := <var:N> ; <var:w2> := <var:w1> * <var:N> ; <var:w3> := <var:w2> * <var:N> ; <var:w4> := <var:w3> * <var:N> ; <var:w0> := <nat:4> ; <var:w1> := <var:w1> * <nat:4> ; <var:w2> := <var:w2> * <nat:5> ; <var:w3> := <var:w3> * <nat:2> ; <var:w4> := <var:w4> * <nat:9> ; <var:f> := <var:w4> <var:f> := <var:f> + <var:w3> <var:f> := <var:f> + <var:w2> <var:f> := <var:f> + <var:w1> <var:f> := <var:f> + <var:w0> \end{verbatim} Allowing that we have $ <var:N> = <var:E> $ before the evaluation of the list of instructions , it must be that $ <var:f> = <nat:9> \cdot <var:E> ^ <nat:4> + <nat:2> \cdot <var:E> ^ <nat:3> + <nat:5> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> + <nat:4> $ . \end{theorem} \begin{proof} Proving correctness for this list of commands is demonstrated through Hoare reasoning . Jumping to the upcoming steps seen in our series of instructions , \[ \begin{tabular} {rcl} \{ <var:N> = <var:E> \} & <var:w1> := <var:N> & \{ <var:N> = <var:E> \land <var:w1> = <var:E> \} \\ \{ <var:N> = <var:E> \land <var:w1> = <var:E> \} & <var:w2> := <var:w1> * <var:N> & \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \} \\ \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \} & <var:w3> := <var:w2> * <var:N> & \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \} \\ \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \} & <var:w4> := <var:w3> * <var:N> & \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w4> = <var:E> ^ <nat:4> \} \\ \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w4> = <var:E> ^ <nat:4> \} & <var:w0> := <nat:4> & \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w4> = <var:E> ^ <nat:4> \land <var:w0> = <nat:4> \} \\ \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w4> = <var:E> ^ <nat:4> \land <var:w0> = <nat:4> \} & <var:w1> := <var:w1> * <nat:4> & \{ <var:N> = <var:E> \land <var:w1> = <nat:4> * <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w4> = <var:E> ^ <nat:4> \land <var:w0> = <nat:4> \} \\ \{ <var:N> = <var:E> \land <var:w1> = <nat:4> * <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w4> = <var:E> ^ <nat:4> \land <var:w0> = <nat:4> \} & <var:w2> := <var:w2> * <nat:5> & \{ <var:N> = <var:E> \land <var:w1> = <nat:4> * <var:E> \land <var:w2> = <nat:5> * <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w4> = <var:E> ^ <nat:4> \land <var:w0> = <nat:4> \} \\ \{ <var:N> = <var:E> \land <var:w1> = <nat:4> * <var:E> \land <var:w2> = <nat:5> * <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w4> = <var:E> ^ <nat:4> \land <var:w0> = <nat:4> \} & <var:w3> := <var:w3> * <nat:2> & \{ <var:N> = <var:E> \land <var:w1> = <nat:4> * <var:E> \land <var:w2> = <nat:5> * <var:E> ^ <nat:2> \land <var:w3> = <nat:2> * <var:E> ^ <nat:3> \land <var:w4> = <var:E> ^ <nat:4> \land <var:w0> = <nat:4> \} \end{tabular} Jumping to the following bits of codein the code segment , we have \[ \begin{tabular} {rcl} \{ <var:N> = <var:E> \} & <var:w1> := <var:N> & \{ <var:N> = <var:E> \land <var:w1> = <var:E> \} \\ \{ <var:N> = <var:E> \land <var:w1> = <var:E> \} & <var:w2> := <var:w1> * <var:N> & \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \} \\ \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \} & <var:w3> := <var:w2> * <var:N> & \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \} \\ \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \} & <var:w4> := <var:w3> * <var:N> & \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w4> = <var:E> ^ <nat:4> \} \\ \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w4> = <var:E> ^ <nat:4> \} & <var:w0> := <nat:4> & \{ <var:N> = <var:E> \land <var:w1> = <var:E> \land <var:w2> = <var:E> ^ <nat:2> \land <var:w3> = <var:E> ^ <nat:3> \land <var:w4> = <var:E> ^ <nat:4> \land <var:w0> = <nat:4> \} \end{tabular} This is given with the variable binding law found in usual Hoare techniques . Advancing on , \[ \begin{tabular} {rcl} \{ <var:N> = <var:E> \} & <var:w1> := <var:N> & \{ <var:N> = <var:E> \land <var:w1> = <var:E> \} \end{tabular} This is known to be sound through the variable assignmet scheme given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Definition <var:w4> : string := " <var:w4> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:N> = <var:E> }} <var:w1> := <var:N> ; <var:w2> := <var:w1> * <var:N> ; <var:w3> := <var:w2> * <var:N> ; <var:w4> := <var:w3> * <var:N> ; <var:w0> := <nat:4> ; <var:w1> := <var:w1> * <nat:4> ; <var:w2> := <var:w2> * <nat:5> ; <var:w3> := <var:w3> * <nat:2> ; <var:w4> := <var:w4> * <nat:9> ; <var:f> := <var:w4> <var:f> := <var:f> + <var:w3> <var:f> := <var:f> + <var:w2> <var:f> := <var:f> + <var:w1> <var:f> := <var:f> + <var:w0> {{ <var:f> = <nat:9> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:5> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> /\ <var:w4> = <var:E> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w1> = <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> /\ <var:w4> = <var:E> ^ <nat:4> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w1> = <nat:4> * <var:E> /\ <var:w2> = <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> /\ <var:w4> = <var:E> ^ <nat:4> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w1> = <nat:4> * <var:E> /\ <var:w2> = <nat:5> * <var:E> ^ <nat:2> /\ <var:w3> = <var:E> ^ <nat:3> /\ <var:w4> = <var:E> ^ <nat:4> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w1> = <nat:4> * <var:E> /\ <var:w2> = <nat:5> * <var:E> ^ <nat:2> /\ <var:w3> = <nat:2> * <var:E> ^ <nat:3> /\ <var:w4> = <var:E> ^ <nat:4> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w1> = <nat:4> * <var:E> /\ <var:w2> = <nat:5> * <var:E> ^ <nat:2> /\ <var:w3> = <nat:2> * <var:E> ^ <nat:3> /\ <var:w4> = <nat:9> * <var:E> ^ <nat:4> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w1> = <nat:4> * <var:E> /\ <var:w2> = <nat:5> * <var:E> ^ <nat:2> /\ <var:w3> = <nat:2> * <var:E> ^ <nat:3> /\ <var:w0> = <nat:4> /\ <var:f> = <nat:9> * <var:E> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w1> = <nat:4> * <var:E> /\ <var:w2> = <nat:5> * <var:E> ^ <nat:2> /\ <var:w0> = <nat:4> /\ <var:f> = <nat:9> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w1> = <nat:4> * <var:E> /\ <var:w0> = <nat:4> /\ <var:f> = <nat:9> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:5> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w0> = <nat:4> /\ <var:f> = <nat:9> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:5> * <var:E> ^ <nat:2> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:f> = <nat:9> * <var:E> ^ <nat:4> + <nat:2> * <var:E> ^ <nat:3> + <nat:5> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 