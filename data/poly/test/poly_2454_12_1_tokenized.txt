\begin{document} \begin{theorem} Let the following code in \emph{Imp} such that \begin{verbatim} <var:w1> := <var:G> ; <var:w2> := <var:w1> * <var:G> ; <var:w3> := <var:w2> * <var:G> ; <var:w4> := <var:w3> * <var:G> ; <var:w0> := <nat:1> ; <var:w1> := <var:w1> * <nat:2> ; <var:w3> := <var:w3> * <nat:3> ; <var:w4> := <var:w4> * <nat:4> ; <var:Q> := <var:w4> <var:Q> := <var:Q> + <var:w3> <var:Q> := <var:Q> + <var:w1> <var:Q> := <var:Q> + <var:w0> \end{verbatim} Assuming it to be that $ <var:G> = <var:N> $ prior to interpreting the program then we see $ <var:Q> = <nat:4> \cdot <var:N> ^ <nat:4> + <nat:3> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> + <nat:1> $ once segment of code exits . \end{theorem} \begin{proof} The course of logic for the series of commands can be demonstrated using standard Hoare reasoning . Immediately after , \[ \begin{tabular} {rcl} \{ <var:G> = <var:N> \} & <var:w1> := <var:G> & \{ <var:G> = <var:N> \land <var:w1> = <var:N> \} \\ \{ <var:G> = <var:N> \land <var:w1> = <var:N> \} & <var:w2> := <var:w1> * <var:G> & \{ <var:G> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> \} \\ \{ <var:G> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> \} & <var:w3> := <var:w2> * <var:G> & \{ <var:G> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> \} \\ \{ <var:G> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> \} & <var:w4> := <var:w3> * <var:G> & \{ <var:G> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> \land <var:w4> = <var:N> ^ <nat:4> \} \\ \{ <var:G> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> \land <var:w4> = <var:N> ^ <nat:4> \} & <var:w0> := <nat:1> & \{ <var:G> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> \land <var:w4> = <var:N> ^ <nat:4> \land <var:w0> = <nat:1> \} \\ \{ <var:G> = <var:N> \land <var:w1> = <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> \land <var:w4> = <var:N> ^ <nat:4> \land <var:w0> = <nat:1> \} & <var:w1> := <var:w1> * <nat:2> & \{ <var:G> = <var:N> \land <var:w1> = <nat:2> * <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> \land <var:w4> = <var:N> ^ <nat:4> \land <var:w0> = <nat:1> \} \\ \{ <var:G> = <var:N> \land <var:w1> = <nat:2> * <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <var:N> ^ <nat:3> \land <var:w4> = <var:N> ^ <nat:4> \land <var:w0> = <nat:1> \} & <var:w3> := <var:w3> * <nat:3> & \{ <var:G> = <var:N> \land <var:w1> = <nat:2> * <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <nat:3> * <var:N> ^ <nat:3> \land <var:w4> = <var:N> ^ <nat:4> \land <var:w0> = <nat:1> \} \\ \{ <var:G> = <var:N> \land <var:w1> = <nat:2> * <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <nat:3> * <var:N> ^ <nat:3> \land <var:w4> = <var:N> ^ <nat:4> \land <var:w0> = <nat:1> \} & <var:w4> := <var:w4> * <nat:4> & \{ <var:G> = <var:N> \land <var:w1> = <nat:2> * <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <nat:3> * <var:N> ^ <nat:3> \land <var:w4> = <nat:4> * <var:N> ^ <nat:4> \land <var:w0> = <nat:1> \} \\ \{ <var:G> = <var:N> \land <var:w1> = <nat:2> * <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <nat:3> * <var:N> ^ <nat:3> \land <var:w4> = <nat:4> * <var:N> ^ <nat:4> \land <var:w0> = <nat:1> \} & <var:Q> := <var:w4& \{ <var:G> = <var:N> \land <var:w1> = <nat:2> * <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <nat:3> * <var:N> ^ <nat:3> \land <var:w0> = <nat:1> \land <var:Q> = <nat:4> * <var:N> ^ <nat:4> \} \\ \{ <var:G> = <var:N> \land <var:w1> = <nat:2> * <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w3> = <nat:3> * <var:N> ^ <nat:3> \land <var:w0> = <nat:1> \land <var:Q> = <nat:4> * <var:N> ^ <nat:4> \} & <var:Q> := <var:Q> + <var:w3& \{ <var:G> = <var:N> \land <var:w1> = <nat:2> * <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w0> = <nat:1> \land <var:Q> = <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> \} \\ \{ <var:G> = <var:N> \land <var:w1> = <nat:2> * <var:N> \land <var:w2> = <var:N> ^ <nat:2> \land <var:w0> = <nat:1> \land <var:Q> = <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> \} & <var:Q> := <var:Q> + <var:w1& \{ <var:G> = <var:N> \land <var:w0> = <nat:1> \land <var:Q> = <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:2> * <var:N> \} \end{tabular} This is rigorously given with the environment update rule defined in standard Hoare reasoning . Keeping momentum , \[ \begin{tabular} {rcl} \{ <var:G> = <var:N> \} & <var:w1> := <var:G> & \{ <var:G> = <var:N> \land <var:w1> = <var:N> \} \end{tabular} This is ensured using the environment update law in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Definition <var:w4> : string := " <var:w4> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:G> = <var:N> }} <var:w1> := <var:G> ; <var:w2> := <var:w1> * <var:G> ; <var:w3> := <var:w2> * <var:G> ; <var:w4> := <var:w3> * <var:G> ; <var:w0> := <nat:1> ; <var:w1> := <var:w1> * <nat:2> ; <var:w3> := <var:w3> * <nat:3> ; <var:w4> := <var:w4> * <nat:4> ; <var:Q> := <var:w4> <var:Q> := <var:Q> + <var:w3> <var:Q> := <var:Q> + <var:w1> <var:Q> := <var:Q> + <var:w0> {{ <var:Q> = <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:2> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:w1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:w1> = <var:N> /\ <var:w2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:w1> = <var:N> /\ <var:w2> = <var:N> ^ <nat:2> /\ <var:w3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:w1> = <var:N> /\ <var:w2> = <var:N> ^ <nat:2> /\ <var:w3> = <var:N> ^ <nat:3> /\ <var:w4> = <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:w1> = <var:N> /\ <var:w2> = <var:N> ^ <nat:2> /\ <var:w3> = <var:N> ^ <nat:3> /\ <var:w4> = <var:N> ^ <nat:4> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:w1> = <nat:2> * <var:N> /\ <var:w2> = <var:N> ^ <nat:2> /\ <var:w3> = <var:N> ^ <nat:3> /\ <var:w4> = <var:N> ^ <nat:4> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:w1> = <nat:2> * <var:N> /\ <var:w2> = <var:N> ^ <nat:2> /\ <var:w3> = <nat:3> * <var:N> ^ <nat:3> /\ <var:w4> = <var:N> ^ <nat:4> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:w1> = <nat:2> * <var:N> /\ <var:w2> = <var:N> ^ <nat:2> /\ <var:w3> = <nat:3> * <var:N> ^ <nat:3> /\ <var:w4> = <nat:4> * <var:N> ^ <nat:4> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:w1> = <nat:2> * <var:N> /\ <var:w2> = <var:N> ^ <nat:2> /\ <var:w3> = <nat:3> * <var:N> ^ <nat:3> /\ <var:w0> = <nat:1> /\ <var:Q> = <nat:4> * <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:w1> = <nat:2> * <var:N> /\ <var:w2> = <var:N> ^ <nat:2> /\ <var:w0> = <nat:1> /\ <var:Q> = <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:w0> = <nat:1> /\ <var:Q> = <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:N> /\ <var:Q> = <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:2> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 