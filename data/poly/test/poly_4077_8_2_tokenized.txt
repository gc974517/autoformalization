\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:C> := <nat:1> ; <var:C> := <nat:2> + <var:C> * <var:M> ; <var:C> := <var:C> * <var:M> ; <var:C> := <nat:4> + <var:C> * <var:M> ; <var:C> := <nat:4> + <var:C> * <var:M> ; <var:C> := <nat:4> + <var:C> * <var:M> ; <var:C> := <nat:4> + <var:C> * <var:M> ; <var:C> := <nat:1> + <var:C> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> . Allowing $ <var:M> = <var:y> $ given $ <var:y> \in \mathbb{Z}^+ $ prior to interpreting the list of instructions it holds that $ <var:C> = <nat:1> \times <var:y> ^ <nat:7> + <nat:2> \times <var:y> ^ <nat:6> + <nat:4> \times <var:y> ^ <nat:4> + <nat:4> \times <var:y> ^ <nat:3> + <nat:4> \times <var:y> ^ <nat:2> + <nat:4> \times <var:y> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of the code is given by usual Hoare logic . Paying attention to the following statement found in our series of instructions , the variable binding line yielding $ <nat:1> $ toward $ <var:C>$ . This line moves $ \{ <var:M> = <var:y> \} $ toward the postcondition $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \} $ . Honing in on the subsequent bit of code seen in our code , the variable binding statement \verb | <var:C> := <nat:2> + <var:C> * <var:M> ; | . This statement forwards the condition $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \} $ into the postcondition $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \cdot <var:y> + <nat:2> \} $ . Jumping to the upcoming step contained in our list of commands , the assignment code \verb | <var:C> := <var:C> * <var:M> ; | . This statement moves $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \cdot <var:y> + <nat:2> \} $ toward $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> + \} $ . Stepping forward , we see the variable update command defining $ <nat:4> + <var:C> * <var:M> $ as $ <var:C>$ . This code advances the precondition $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \cdot <var:y> ^ <nat:2> + <nat:2> \cdot <var:y> + \} $ as the condition $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \cdot <var:y> ^ <nat:3> + <nat:2> \cdot <var:y> ^ <nat:2> + <nat:4> \} $ . This is known to be sound with the assignment scheme obtained from Hoare techniques . Moving forward to the subsequent line contained in our code segment , we have the variable assignmet command giving $ <nat:4> + <var:C> * <var:M> $ into $ <var:C>$ . This moves the precondition $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \cdot <var:y> ^ <nat:3> + <nat:2> \cdot <var:y> ^ <nat:2> + <nat:4> \} $ to $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \cdot <var:y> ^ <nat:4> + <nat:2> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> + <nat:4> \} $ . This is known to be sound by the assignment rule in usual Hoare techniques . Advancing to the subsequent command seen in our list of instructions , we see the binding command assigning $ <nat:4> + <var:C> * <var:M> $ to $ <var:C>$ . This forwards $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \cdot <var:y> ^ <nat:4> + <nat:2> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> + <nat:4> \} $ as the postcondition $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \cdot <var:y> ^ <nat:5> + <nat:2> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:4> \} $ . This is known to be sound through the assignment rule in standard Hoare reasoning . Moving forward , we have the variable assignmet statement \verb | <var:C> := <nat:4> + <var:C> * <var:M> ; | . This transfers the condition $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \cdot <var:y> ^ <nat:5> + <nat:2> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:4> \} $ as the condition $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \cdot <var:y> ^ <nat:6> + <nat:2> \cdot <var:y> ^ <nat:5> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:4> \} $ . Moving forward to the next statement in our set of instructions , we have the assignment code giving $ <nat:1> + <var:C> * <var:M$ as $ <var:C>$ . This command redefines the condition $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \cdot <var:y> ^ <nat:6> + <nat:2> \cdot <var:y> ^ <nat:5> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:4> \} $ into the condition $ \{ <var:M> = <var:y> \land <var:C> = <nat:1> \cdot <var:y> ^ <nat:7> + <nat:2> \cdot <var:y> ^ <nat:6> + <nat:4> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:4> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:1> \} $ . This is shown to be logically sound through the assignment rule found in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:1> ; <var:C> := <nat:2> + <var:C> * <var:M> ; <var:C> := <var:C> * <var:M> ; <var:C> := <nat:4> + <var:C> * <var:M> ; <var:C> := <nat:4> + <var:C> * <var:M> ; <var:C> := <nat:4> + <var:C> * <var:M> ; <var:C> := <nat:4> + <var:C> * <var:M> ; <var:C> := <nat:1> + <var:C> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:M> = <var:y> }} <def:poly> {{ <var:C> = <nat:1> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:C> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:C> = <nat:1> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:C> = <nat:1> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:C> = <nat:1> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:C> = <nat:1> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:4> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:C> = <nat:1> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:C> = <nat:1> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:4> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:y> /\ <var:C> = <nat:1> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:4> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:4> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 