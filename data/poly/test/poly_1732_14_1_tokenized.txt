\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q1> := <var:y> ; <var:Q2> := <var:Q1> * <var:y> ; <var:Q3> := <var:Q2> * <var:y> ; <var:Q4> := <var:Q3> * <var:y> ; <var:Q0> := <nat:5> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:Q2> := <var:Q2> * <nat:6> ; <var:Q3> := <var:Q3> * <nat:8> ; <var:Q4> := <var:Q4> * <nat:4> ; <var:F> := <var:Q4> <var:F> := <var:F> + <var:Q3> <var:F> := <var:F> + <var:Q2> <var:F> := <var:F> + <var:Q1> <var:F> := <var:F> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:y> = <var:u> $ ahead of the evaluation of this code segment it holds that $ <var:F> = <nat:4> \cdot <var:u> ^ <nat:4> + <nat:8> \cdot <var:u> ^ <nat:3> + <nat:6> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques results in : \begin{eqnarray} \{ <var:y> = <var:u> \} \\ <var:Q1> := <var:y> ; \\ \{ <var:y> = <var:u> \land <var:Q1> = <var:u> \} \\ <var:Q2> := <var:Q1> * <var:y> ; \\ \{ <var:y> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \} \\ <var:Q3> := <var:Q2> * <var:y> ; \\ \{ <var:y> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \land <var:Q3> = <var:u> ^ <nat:3> \} \\ <var:Q4> := <var:Q3> * <var:y> ; \\ \{ <var:y> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \land <var:Q3> = <var:u> ^ <nat:3> \land <var:Q4> = <var:u> ^ <nat:4> \} \\ <var:Q0> := <nat:5> ; \\ \{ <var:y> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \land <var:Q3> = <var:u> ^ <nat:3> \land <var:Q4> = <var:u> ^ <nat:4> \land <var:Q0> = <nat:5> \} \\ <var:Q1> := <var:Q1> * <nat:4> ; \\ \{ <var:y> = <var:u> \land <var:Q1> = <nat:4> * <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \land <var:Q3> = <var:u> ^ <nat:3> \land <var:Q4> = <var:u> ^ <nat:4> \land <var:Q0> = <nat:5> \} \\ <var:Q2> := <var:Q2> * <nat:6> ; \\ \{ <var:y> = <var:u> \land <var:Q1> = <nat:4> * <var:u> \land <var:Q2> = <nat:6> * <var:u> ^ <nat:2> \land <var:Q3> = <var:u> ^ <nat:3> \land <var:Q4> = <var:u> ^ <nat:4> \land <var:Q0> = <nat:5> \} \\ <var:Q3> := <var:Q3> * <nat:8> ; \\ \{ <var:y> = <var:u> \land <var:Q1> = <nat:4> * <var:u> \land <var:Q2> = <nat:6> * <var:u> ^ <nat:2> \land <var:Q3> = <nat:8> * <var:u> ^ <nat:3> \land <var:Q4> = <var:u> ^ <nat:4> \land <var:Q0> = <nat:5> \} \\ <var:Q4> := <var:Q4> * <nat:4> ; \\ \{ <var:y> = <var:u> \land <var:Q1> = <nat:4> * <var:u> \land <var:Q2> = <nat:6> * <var:u> ^ <nat:2> \land <var:Q3> = <nat:8> * <var:u> ^ <nat:3> \land <var:Q4> = <nat:4> * <var:u> ^ <nat:4> \land <var:Q0> = <nat:5> \} \\ <var:F> := <var:Q4> \\ \{ <var:y> = <var:u> \land <var:Q1> = <nat:4> * <var:u> \land <var:Q2> = <nat:6> * <var:u> ^ <nat:2> \land <var:Q3> = <nat:8> * <var:u> ^ <nat:3> \land <var:Q0> = <nat:5> \land <var:F> = <nat:4> * <var:u> ^ <nat:4> \} \\ <var:F> := <var:F> + <var:Q3> \\ \{ <var:y> = <var:u> \land <var:Q1> = <nat:4> * <var:u> \land <var:Q2> = <nat:6> * <var:u> ^ <nat:2> \land <var:Q0> = <nat:5> \land <var:F> = <nat:4> * <var:u> ^ <nat:4> + <nat:8> * <var:u> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:Q2> \\ \{ <var:y> = <var:u> \land <var:Q1> = <nat:4> * <var:u> \land <var:Q0> = <nat:5> \land <var:F> = <nat:4> * <var:u> ^ <nat:4> + <nat:8> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:Q1> \\ \{ <var:y> = <var:u> \land <var:Q0> = <nat:5> \land <var:F> = <nat:4> * <var:u> ^ <nat:4> + <nat:8> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:4> * <var:u> \} \\ <var:F> := <var:F> + <var:Q0> \\ \{ <var:y> = <var:u> \land <var:F> = <nat:4> * <var:u> ^ <nat:4> + <nat:8> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:5> \} \end{eqnarray} Therefore , this set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <var:Q4> : string := " <var:Q4> " . Definition <def:poly> := <var:Q1> := <var:y> ; <var:Q2> := <var:Q1> * <var:y> ; <var:Q3> := <var:Q2> * <var:y> ; <var:Q4> := <var:Q3> * <var:y> ; <var:Q0> := <nat:5> ; <var:Q1> := <var:Q1> * <nat:4> ; <var:Q2> := <var:Q2> * <nat:6> ; <var:Q3> := <var:Q3> * <nat:8> ; <var:Q4> := <var:Q4> * <nat:4> ; <var:F> := <var:Q4> <var:F> := <var:F> + <var:Q3> <var:F> := <var:F> + <var:Q2> <var:F> := <var:F> + <var:Q1> <var:F> := <var:F> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:y> = <var:u> }} <def:poly> {{ <var:F> = <nat:4> * <var:u> ^ <nat:4> + <nat:8> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:Q1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:Q1> = <var:u> /\ <var:Q2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:Q1> = <var:u> /\ <var:Q2> = <var:u> ^ <nat:2> /\ <var:Q3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:Q1> = <var:u> /\ <var:Q2> = <var:u> ^ <nat:2> /\ <var:Q3> = <var:u> ^ <nat:3> /\ <var:Q4> = <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:Q1> = <var:u> /\ <var:Q2> = <var:u> ^ <nat:2> /\ <var:Q3> = <var:u> ^ <nat:3> /\ <var:Q4> = <var:u> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:Q1> = <nat:4> * <var:u> /\ <var:Q2> = <var:u> ^ <nat:2> /\ <var:Q3> = <var:u> ^ <nat:3> /\ <var:Q4> = <var:u> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:Q1> = <nat:4> * <var:u> /\ <var:Q2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:Q3> = <var:u> ^ <nat:3> /\ <var:Q4> = <var:u> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:Q1> = <nat:4> * <var:u> /\ <var:Q2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:Q3> = <nat:8> * <var:u> ^ <nat:3> /\ <var:Q4> = <var:u> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:Q1> = <nat:4> * <var:u> /\ <var:Q2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:Q3> = <nat:8> * <var:u> ^ <nat:3> /\ <var:Q4> = <nat:4> * <var:u> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:Q1> = <nat:4> * <var:u> /\ <var:Q2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:Q3> = <nat:8> * <var:u> ^ <nat:3> /\ <var:Q0> = <nat:5> /\ <var:F> = <nat:4> * <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:Q1> = <nat:4> * <var:u> /\ <var:Q2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:Q0> = <nat:5> /\ <var:F> = <nat:4> * <var:u> ^ <nat:4> + <nat:8> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:Q1> = <nat:4> * <var:u> /\ <var:Q0> = <nat:5> /\ <var:F> = <nat:4> * <var:u> ^ <nat:4> + <nat:8> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:Q0> = <nat:5> /\ <var:F> = <nat:4> * <var:u> ^ <nat:4> + <nat:8> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:u> /\ <var:F> = <nat:4> * <var:u> ^ <nat:4> + <nat:8> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 