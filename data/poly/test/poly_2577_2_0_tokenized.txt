\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p0> := <nat:4> ; <var:q> := <var:p0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:J> = <var:A> $ ahead of the evaluation of this series of commands it must be that we see $ <var:q> = <nat:4> $ when segment of code has executed . \end{theorem} \begin{proof} The course of logic for the series of commands can be accomplished with Hoare logic . Moving forward , we have \begin{eqnarray} \{ <var:J> = <var:A> \} \, <var:p0> := <nat:4> \, \{ <var:J> = <var:A> \land <var:p0> = <nat:4> \} \end{eqnarray} This is given with the rule defined in typical Hoare reasoning . Now , we see \begin{eqnarray} \{ <var:J> = <var:A> \} \, <var:p0> := <nat:4> \, \{ <var:J> = <var:A> \land <var:p0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <def:poly> := <var:p0> := <nat:4> ; <var:q> := <var:p0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:J> = <var:A> }} <def:poly> {{ <var:q> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:p0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:A> /\ <var:q> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 