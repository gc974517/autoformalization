\begin{document} \begin{theorem} Take the following segment of code as follows \begin{verbatim} <var:T0> := <nat:5> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:K> ; <var:T2> := <nat:9> ; <var:T2> := <var:T2> * <var:K> ; <var:T2> := <var:T2> * <var:K> ; <var:T3> := <nat:6> ; <var:T3> := <var:T3> * <var:K> ; <var:T3> := <var:T3> * <var:K> ; <var:T3> := <var:T3> * <var:K> ; <var:H> := <var:T3> ; <var:H> := <var:H> + <var:T2> ; <var:H> := <var:H> + <var:T1> ; <var:H> := <var:H> + <var:T0> \end{verbatim} Assume it to be that $ <var:K> = <var:j> $ ahead of evaluating the set of instructions , it follows that we have $ <var:H> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:5> $ when code segment has terminated . \end{theorem} \begin{proof} The way to prove correctness for our program is demonstrated using Hoare logic . Looking at the following commands seen in the program , we see \[ \begin{tabular} {rcl} \{ <var:K> = <var:j> \} & <var:T0> := <nat:5> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \} \\ \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \} & <var:T1> := <nat:4> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \} \\ \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \} & <var:T1> := <var:T1> * <var:K> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \} \\ \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \} & <var:T2> := <nat:9> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \land <var:T2> = <nat:9> \} \\ \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \land <var:T2> = <nat:9> \} & <var:T2> := <var:T2> * <var:K> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \land <var:T2> = <nat:9> \cdot <var:j> \} \\ \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \land <var:T2> = <nat:9> \cdot <var:j> \} & <var:T2> := <var:T2> * <var:K> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \land <var:T2> = <nat:9> \cdot <var:j> ^ <nat:2> \} \\ \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \land <var:T2> = <nat:9> \cdot <var:j> ^ <nat:2> \} & <var:T3> := <nat:6> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \land <var:T2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:T3> = <nat:6> \} \\ \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \land <var:T2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:T3> = <nat:6> \} & <var:T3> := <var:T3> * <var:K> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \land <var:T2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:T3> = <nat:6> \cdot <var:j> \} \\ \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \land <var:T2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:T3> = <nat:6> \cdot <var:j> \} & <var:T3> := <var:T3> * <var:K> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \land <var:T2> = <nat:9> \cdot <var:j> ^ <nat:2> \land <var:T3> = <nat:6> \cdot <var:j> ^ <nat:2> \} \end{tabular} Considering the next steps found in our code segment , \[ \begin{tabular} {rcl} \{ <var:K> = <var:j> \} & <var:T0> := <nat:5> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \} \\ \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \} & <var:T1> := <nat:4> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \} \\ \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \} & <var:T1> := <var:T1> * <var:K> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \cdot <var:j> \} \end{tabular} This is guaranteed through the variable binding law given by standard Hoare reasoning . Moving on to the following step found in the series of commands , we have \[ \begin{tabular} {rcl} \{ <var:K> = <var:j> \} & <var:T0> := <nat:5> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \} \end{tabular} This is deduced using the variable update rule from Hoare techniques . Going forward , \[ \begin{tabular} {rcl} \{ <var:K> = <var:j> \} & <var:T0> := <nat:5> & \{ <var:K> = <var:j> \land <var:T0> = <nat:5> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:K> = <var:j> }} <var:T0> := <nat:5> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:K> ; <var:T2> := <nat:9> ; <var:T2> := <var:T2> * <var:K> ; <var:T2> := <var:T2> * <var:K> ; <var:T3> := <nat:6> ; <var:T3> := <var:T3> * <var:K> ; <var:T3> := <var:T3> * <var:K> ; <var:T3> := <var:T3> * <var:K> ; <var:H> := <var:T3> ; <var:H> := <var:H> + <var:T2> ; <var:H> := <var:H> + <var:T1> ; <var:H> := <var:H> + <var:T0> {{ <var:H> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:4> * <var:j> /\ <var:T2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:4> * <var:j> /\ <var:T2> = <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:4> * <var:j> /\ <var:T2> = <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:4> * <var:j> /\ <var:T2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:T3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:4> * <var:j> /\ <var:T2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:T3> = <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:4> * <var:j> /\ <var:T2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:T3> = <nat:6> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:4> * <var:j> /\ <var:T2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:T3> = <nat:6> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:4> * <var:j> /\ <var:T2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:H> = <nat:6> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:4> * <var:j> /\ <var:H> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:T0> = <nat:5> /\ <var:H> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:j> /\ <var:H> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 