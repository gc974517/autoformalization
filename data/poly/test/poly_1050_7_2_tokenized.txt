\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h> := <nat:1> ; <var:h> := <nat:4> + <var:h> * <var:t> ; <var:h> := <var:h> * <var:t> ; <var:h> := <nat:3> + <var:h> * <var:t> ; <var:h> := <nat:2> + <var:h> * <var:t> ; <var:h> := <nat:1> + <var:h> * <var:t> ; <var:h> := <nat:2> + <var:h> * <var:t> \end{verbatim} \end{definition} \begin{theorem} Allowing ( assuming some positive integers $ <var:U> $ ) it to hold that $ <var:t> = <var:U> $ before running our program it holds that we see $ <var:h> = <nat:1> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:2> $ . \end{theorem} \begin{proof} Let the below decorated set of commands . \begin{eqnarray} \{ <var:t> = <var:U> \} \\ <var:h> := <nat:1> ; \\ \{ <var:t> = <var:U> \land <var:h> = <nat:1> \} \\ <var:h> := <nat:4> + <var:h> * <var:t> ; \\ \{ <var:t> = <var:U> \land <var:h> = <nat:1> \times <var:U> + <nat:4> \} \\ <var:h> := <var:h> * <var:t> ; \\ \{ <var:t> = <var:U> \land <var:h> = <nat:1> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + \} \\ <var:h> := <nat:3> + <var:h> * <var:t> ; \\ \{ <var:t> = <var:U> \land <var:h> = <nat:1> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:3> \} \\ <var:h> := <nat:2> + <var:h> * <var:t> ; \\ \{ <var:t> = <var:U> \land <var:h> = <nat:1> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:3> + <nat:3> \times <var:U> + <nat:2> \} \\ <var:h> := <nat:1> + <var:h> * <var:t> ; \\ \{ <var:t> = <var:U> \land <var:h> = <nat:1> \times <var:U> ^ <nat:5> + <nat:4> \times <var:U> ^ <nat:4> + <nat:3> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:1> \} \\ <var:h> := <nat:2> + <var:h> * <var:t> \\ \{ <var:t> = <var:U> \land <var:h> = <nat:1> \times <var:U> ^ <nat:6> + <nat:4> \times <var:U> ^ <nat:5> + <nat:3> \times <var:U> ^ <nat:3> + <nat:2> \times <var:U> ^ <nat:2> + <nat:1> \times <var:U> + <nat:2> \} \end{eqnarray} Applying usual Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:1> ; <var:h> := <nat:4> + <var:h> * <var:t> ; <var:h> := <var:h> * <var:t> ; <var:h> := <nat:3> + <var:h> * <var:t> ; <var:h> := <nat:2> + <var:h> * <var:t> ; <var:h> := <nat:1> + <var:h> * <var:t> ; <var:h> := <nat:2> + <var:h> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:t> = <var:U> }} <def:poly> {{ <var:h> = <nat:1> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:h> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:h> = <nat:1> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:h> = <nat:1> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:h> = <nat:1> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:h> = <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:3> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:h> = <nat:1> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:h> = <nat:1> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:1> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 