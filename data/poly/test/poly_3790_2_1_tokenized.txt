\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:9> ; <var:e> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Assume $ <var:r> = <var:k> $ before the evaluation of this list of instructions , it holds that we have $ <var:e> = <nat:9> $ . \end{theorem} \begin{proof} Using typical Hoare logic yields : \begin{eqnarray} \{ <var:r> = <var:k> \} \\ <var:v0> := <nat:9> ; \\ \{ <var:r> = <var:k> \land <var:v0> = <nat:9> \} \\ <var:e> := <var:v0> \\ \{ <var:r> = <var:k> \land <var:e> = <nat:9> \} \end{eqnarray} Thusly , our code is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:9> ; <var:e> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:r> = <var:k> }} <def:poly> {{ <var:e> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:k> /\ <var:e> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 