\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:N> ; <var:R2> := <var:R1> * <var:N> ; <var:R3> := <var:R2> * <var:N> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:4> ; <var:R2> := <var:R2> * <nat:1> ; <var:R3> := <var:R3> * <nat:1> ; <var:J> := <var:R3> <var:J> := <var:J> + <var:R2> <var:J> := <var:J> + <var:R1> <var:J> := <var:J> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> in \emph{Imp} . Given for every positive coefficients $ <var:Y> $ it to be that $ <var:N> = <var:Y> $ prior to the evaluation of this list of commands , it holds that $ <var:J> = <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> $ when series of commands exits . \end{theorem} \begin{proof} Arguing the correctness of the code can be done with Hoare logic . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:Y> \} & <var:R1> := <var:N> & \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \} \\ \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \} & <var:R2> := <var:R1> * <var:N> & \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \land <var:R2> = <var:Y> ^ <nat:2> \} \\ \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \land <var:R2> = <var:Y> ^ <nat:2> \} & <var:R3> := <var:R2> * <var:N> & \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \land <var:R2> = <var:Y> ^ <nat:2> \land <var:R3> = <var:Y> ^ <nat:3> \} \\ \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \land <var:R2> = <var:Y> ^ <nat:2> \land <var:R3> = <var:Y> ^ <nat:3> \} & <var:R0> := <nat:4> & \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \land <var:R2> = <var:Y> ^ <nat:2> \land <var:R3> = <var:Y> ^ <nat:3> \land <var:R0> = <nat:4> \} \end{tabular} Considering the following pieces of code in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:N> = <var:Y> \} & <var:R1> := <var:N> & \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \} \\ \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \} & <var:R2> := <var:R1> * <var:N> & \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \land <var:R2> = <var:Y> ^ <nat:2> \} \\ \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \land <var:R2> = <var:Y> ^ <nat:2> \} & <var:R3> := <var:R2> * <var:N> & \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \land <var:R2> = <var:Y> ^ <nat:2> \land <var:R3> = <var:Y> ^ <nat:3> \} \\ \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \land <var:R2> = <var:Y> ^ <nat:2> \land <var:R3> = <var:Y> ^ <nat:3> \} & <var:R0> := <nat:4> & \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \land <var:R2> = <var:Y> ^ <nat:2> \land <var:R3> = <var:Y> ^ <nat:3> \land <var:R0> = <nat:4> \} \\ \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \land <var:R2> = <var:Y> ^ <nat:2> \land <var:R3> = <var:Y> ^ <nat:3> \land <var:R0> = <nat:4> \} & <var:R1> := <var:R1> * <nat:4> & \{ <var:N> = <var:Y> \land <var:R1> = <nat:4> \cdot <var:Y> \land <var:R2> = <var:Y> ^ <nat:2> \land <var:R3> = <var:Y> ^ <nat:3> \land <var:R0> = <nat:4> \} \end{tabular} Taking another step toward the subsequent pieces of code contained in our series of instructions , \[ \begin{tabular} {rcl} \{ <var:N> = <var:Y> \} & <var:R1> := <var:N> & \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \} \\ \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \} & <var:R2> := <var:R1> * <var:N> & \{ <var:N> = <var:Y> \land <var:R1> = <var:Y> \land <var:R2> = <var:Y> ^ <nat:2> \} \end{tabular} This is guaranteed with the variable binding rule in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:N> ; <var:R2> := <var:R1> * <var:N> ; <var:R3> := <var:R2> * <var:N> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:4> ; <var:R2> := <var:R2> * <nat:1> ; <var:R3> := <var:R3> * <nat:1> ; <var:J> := <var:R3> <var:J> := <var:J> + <var:R2> <var:J> := <var:J> + <var:R1> <var:J> := <var:J> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:N> = <var:Y> }} <def:poly> {{ <var:J> = <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:R1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:R1> = <var:Y> /\ <var:R2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:R1> = <var:Y> /\ <var:R2> = <var:Y> ^ <nat:2> /\ <var:R3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:R1> = <var:Y> /\ <var:R2> = <var:Y> ^ <nat:2> /\ <var:R3> = <var:Y> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:R1> = <nat:4> * <var:Y> /\ <var:R2> = <var:Y> ^ <nat:2> /\ <var:R3> = <var:Y> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:R1> = <nat:4> * <var:Y> /\ <var:R2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:R3> = <var:Y> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:R1> = <nat:4> * <var:Y> /\ <var:R2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:R3> = <nat:1> * <var:Y> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:R1> = <nat:4> * <var:Y> /\ <var:R2> = <nat:1> * <var:Y> ^ <nat:2> /\ <var:R0> = <nat:4> /\ <var:J> = <nat:1> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:R1> = <nat:4> * <var:Y> /\ <var:R0> = <nat:4> /\ <var:J> = <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:R0> = <nat:4> /\ <var:J> = <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:Y> /\ <var:J> = <nat:1> * <var:Y> ^ <nat:3> + <nat:1> * <var:Y> ^ <nat:2> + <nat:4> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 