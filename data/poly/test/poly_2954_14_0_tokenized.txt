\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H0> := <nat:9> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:Q> ; <var:H2> := <nat:6> ; <var:H2> := <var:H2> * <var:Q> ; <var:H2> := <var:H2> * <var:Q> ; <var:H3> := <nat:7> ; <var:H3> := <var:H3> * <var:Q> ; <var:H3> := <var:H3> * <var:Q> ; <var:H3> := <var:H3> * <var:Q> ; <var:c> := <var:H3> ; <var:c> := <var:c> + <var:H2> ; <var:c> := <var:c> + <var:H1> ; <var:c> := <var:c> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:Q> = <var:R> $ ahead of interpreting the segment of code it must be that we see $ <var:c> = <nat:7> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of this set of commands is done by usual Hoare logic . Jumping to the following statement found in our series of commands , we see the variable assignmet statement \verb | <var:H0> := <nat:9> ; | . This code moves $ \{ <var:Q> = <var:R> \} $ into the postcondition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \} $ . Advancing to the next step , we have the environment update command defining $ <nat:1> $ into $ <var:H1>$ . This statement transfers $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \} $ to $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \} $ . This is given through the assignment inference rule defined by Hoare techniques . Advancing to the next step , we see the variable assignmet statement \verb | <var:H1> := <var:H1> * <var:Q> ; | . This statement takes $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \} $ into the postcondition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \} $ . This is deduced by the assignment law defined by typical Hoare reasoning . Following , the line binding $ <nat:6> $ as $ <var:H2>$ . This statement advances $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \} $ toward the condition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \} $ . Stepping forward , the line \verb | <var:H2> := <var:H2> * <var:Q> ; | . This statement forwards the condition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \} $ into $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> \} $ . This is rigorously given with the assignment scheme defined in standard Hoare logic . Going forward , we see the variable assignmet line \verb | <var:H2> := <var:H2> * <var:Q> ; | . This takes the precondition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> \} $ into the postcondition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> ^ <nat:2> \} $ . Advancing to the proceeding bit of code contained in our list of commands , we have the assignment code giving $ <nat:7> $ to $ <var:H3>$ . This statement redefines $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> ^ <nat:2> \} $ as the postcondition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> ^ <nat:2> \land <var:H3> = <nat:7> \} $ . This is shown using the assignment rule in usual Hoare reasoning . Moving on to the next step , we have the assignment line \verb | <var:H3> := <var:H3> * <var:Q> ; | . This advances the precondition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> ^ <nat:2> \land <var:H3> = <nat:7> \} $ into $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> ^ <nat:2> \land <var:H3> = <nat:7> \cdot <var:R> \} $ . This is shown to be logically sound with the assignment rule defined by usual Hoare logic . Stepping through , we have the binding code \verb | <var:H3> := <var:H3> * <var:Q> ; | . This line takes the precondition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> ^ <nat:2> \land <var:H3> = <nat:7> \cdot <var:R> \} $ toward the postcondition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> ^ <nat:2> \land <var:H3> = <nat:7> \cdot <var:R> ^ <nat:2> \} $ . Focusing on the proceeding line seen in our code segment , we have the variable binding line \verb | <var:H3> := <var:H3> * <var:Q> ; | . This advances $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> ^ <nat:2> \land <var:H3> = <nat:7> \cdot <var:R> ^ <nat:2> \} $ as the condition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> ^ <nat:2> \land <var:H3> = <nat:7> \cdot <var:R> ^ <nat:3> \} $ . This is ensured with the assignment rule in typical Hoare techniques . Taking a look at the next piece of code contained in our program , the environment update statement \verb | <var:c> := <var:H3> ; | . This line advances $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> ^ <nat:2> \land <var:H3> = <nat:7> \cdot <var:R> ^ <nat:3> \} $ as the condition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> ^ <nat:2> \land <var:c> = <nat:7> \cdot <var:R> ^ <nat:3> \} $ . Moving forward to the next line of code in our set of instructions , the environment update code \verb | <var:c> := <var:c> + <var:H2> ; | . This command forwards the condition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:H2> = <nat:6> \cdot <var:R> ^ <nat:2> \land <var:c> = <nat:7> \cdot <var:R> ^ <nat:3> \} $ toward $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:c> = <nat:7> \cdot <var:R> ^ <nat:3> + <nat:6> \cdot <var:R> ^ <nat:2> \} $ . Moving onward , we have the environment update statement \verb | <var:c> := <var:c> + <var:H1> ; | . This line transfers the precondition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:H1> = <nat:1> \cdot <var:R> \land <var:c> = <nat:7> \cdot <var:R> ^ <nat:3> + <nat:6> \cdot <var:R> ^ <nat:2> \} $ toward the condition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:c> = <nat:7> \cdot <var:R> ^ <nat:3> + <nat:6> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> \} $ . This is rigorously given by the assignment scheme found in Hoare logic . Moving forward to the next step , we see the variable binding statement letting $ <var:c> + <var:H0$ into $ <var:c>$ . This redefines the condition $ \{ <var:Q> = <var:R> \land <var:H0> = <nat:9> \land <var:c> = <nat:7> \cdot <var:R> ^ <nat:3> + <nat:6> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> \} $ to the postcondition $ \{ <var:Q> = <var:R> \land <var:c> = <nat:7> \cdot <var:R> ^ <nat:3> + <nat:6> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <def:poly> := <var:H0> := <nat:9> ; <var:H1> := <nat:1> ; <var:H1> := <var:H1> * <var:Q> ; <var:H2> := <nat:6> ; <var:H2> := <var:H2> * <var:Q> ; <var:H2> := <var:H2> * <var:Q> ; <var:H3> := <nat:7> ; <var:H3> := <var:H3> * <var:Q> ; <var:H3> := <var:H3> * <var:Q> ; <var:H3> := <var:H3> * <var:Q> ; <var:c> := <var:H3> ; <var:c> := <var:c> + <var:H2> ; <var:c> := <var:c> + <var:H1> ; <var:c> := <var:c> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:Q> = <var:R> }} <def:poly> {{ <var:c> = <nat:7> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:H0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:1> * <var:R> /\ <var:H2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:1> * <var:R> /\ <var:H2> = <nat:6> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:1> * <var:R> /\ <var:H2> = <nat:6> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:1> * <var:R> /\ <var:H2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:H3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:1> * <var:R> /\ <var:H2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:H3> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:1> * <var:R> /\ <var:H2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:H3> = <nat:7> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:1> * <var:R> /\ <var:H2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:H3> = <nat:7> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:1> * <var:R> /\ <var:H2> = <nat:6> * <var:R> ^ <nat:2> /\ <var:c> = <nat:7> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:H0> = <nat:9> /\ <var:H1> = <nat:1> * <var:R> /\ <var:c> = <nat:7> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:H0> = <nat:9> /\ <var:c> = <nat:7> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:R> /\ <var:c> = <nat:7> * <var:R> ^ <nat:3> + <nat:6> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 