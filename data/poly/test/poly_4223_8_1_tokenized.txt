\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:K1> := <var:J> ; <var:K2> := <var:K1> * <var:J> ; <var:K0> := <nat:4> ; <var:K1> := <var:K1> * <nat:1> ; <var:K2> := <var:K2> * <nat:4> ; <var:M> := <var:K2> <var:M> := <var:M> + <var:K1> <var:M> := <var:M> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:J> = <var:D> $ taking $ <var:D> $ before the execution of the series of instructions it must be that we have $ <var:M> = <nat:4> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:4> $ after series of commands has exited . \end{theorem} \begin{proof} Arguing the correctness of our code is demonstrated with Hoare logic . Going forward , \begin{verbatim} { <var:J> = <var:D> } <var:K1> := <var:J> { <var:J> = <var:D> \land <var:K1> = <var:D> } { <var:J> = <var:D> \land <var:K1> = <var:D> } <var:K2> := <var:K1> * <var:J> { <var:J> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> } { <var:J> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> } <var:K0> := <nat:4> { <var:J> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K0> = <nat:4> } { <var:J> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K0> = <nat:4> } <var:K1> := <var:K1> * <nat:1> { <var:J> = <var:D> \land <var:K1> = <nat:1> \cdot <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K0> = <nat:4> } { <var:J> = <var:D> \land <var:K1> = <nat:1> \cdot <var:D> \land <var:K2> = <var:D> ^ <nat:2> \land <var:K0> = <nat:4> } <var:K2> := <var:K2> * <nat:4> { <var:J> = <var:D> \land <var:K1> = <nat:1> \cdot <var:D> \land <var:K2> = <nat:4> \cdot <var:D> ^ <nat:2> \land <var:K0> = <nat:4> } \end{verbatim} Now , we see \begin{verbatim} { <var:J> = <var:D> } <var:K1> := <var:J> { <var:J> = <var:D> \land <var:K1> = <var:D> } \end{verbatim} This is given using the binding inference rule defined in typical Hoare logic . Going forward , \begin{verbatim} { <var:J> = <var:D> } <var:K1> := <var:J> { <var:J> = <var:D> \land <var:K1> = <var:D> } { <var:J> = <var:D> \land <var:K1> = <var:D> } <var:K2> := <var:K1> * <var:J> { <var:J> = <var:D> \land <var:K1> = <var:D> \land <var:K2> = <var:D> ^ <nat:2> } \end{verbatim} This is shown by the variable update inference rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <def:poly> := <var:K1> := <var:J> ; <var:K2> := <var:K1> * <var:J> ; <var:K0> := <nat:4> ; <var:K1> := <var:K1> * <nat:1> ; <var:K2> := <var:K2> * <nat:4> ; <var:M> := <var:K2> <var:M> := <var:M> + <var:K1> <var:M> := <var:M> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:J> = <var:D> }} <def:poly> {{ <var:M> = <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:K1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:K1> = <var:D> /\ <var:K2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:K1> = <var:D> /\ <var:K2> = <var:D> ^ <nat:2> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:K1> = <nat:1> * <var:D> /\ <var:K2> = <var:D> ^ <nat:2> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:K1> = <nat:1> * <var:D> /\ <var:K2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:K1> = <nat:1> * <var:D> /\ <var:K0> = <nat:4> /\ <var:M> = <nat:4> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:K0> = <nat:4> /\ <var:M> = <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:D> /\ <var:M> = <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 