\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} as follows \begin{verbatim} <var:m> := <nat:3> ; <var:m> := <nat:1> + <var:m> * <var:u> ; <var:m> := <nat:2> + <var:m> * <var:u> ; <var:m> := <nat:2> + <var:m> * <var:u> ; <var:m> := <nat:1> + <var:m> * <var:u> ; <var:m> := <nat:3> + <var:m> * <var:u> \end{verbatim} Given that we have $ <var:u> = <var:D> $ prior to interpreting this segment of code it holds that we have $ <var:m> = <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code can be seen with typical Hoare techniques . Following , the binding statement \verb | <var:m> := <nat:3> ; | . This code transfers the precondition $ \{ <var:u> = <var:D> \} $ to $ \{ <var:u> = <var:D> \land <var:m> = <nat:3> \} $ . This is deduced using the assignment law of standard Hoare logic . Honing in on the proceeding step in the list of commands , we see the binding code \verb | <var:m> := <nat:1> + <var:m> * <var:u> ; | . This transfers $ \{ <var:u> = <var:D> \land <var:m> = <nat:3> \} $ as the postcondition $ \{ <var:u> = <var:D> \land <var:m> = <nat:3> \cdot <var:D> + <nat:1> \} $ . This is known to be sound through the assignment inference rule found in standard Hoare techniques . Immediately after , we see the environment update line yielding $ <nat:2> + <var:m> * <var:u> $ into $ <var:m>$ . This line takes $ \{ <var:u> = <var:D> \land <var:m> = <nat:3> \cdot <var:D> + <nat:1> \} $ toward $ \{ <var:u> = <var:D> \land <var:m> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:2> \} $ . Looking at the next piece of code seen in the set of commands , we see the environment update statement \verb | <var:m> := <nat:2> + <var:m> * <var:u> ; | . This forwards the condition $ \{ <var:u> = <var:D> \land <var:m> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:2> \} $ to the postcondition $ \{ <var:u> = <var:D> \land <var:m> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:2> \} $ . Immediately after , we have the assignment line \verb | <var:m> := <nat:1> + <var:m> * <var:u> ; | . This code forwards $ \{ <var:u> = <var:D> \land <var:m> = <nat:3> \cdot <var:D> ^ <nat:3> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:2> \} $ toward the condition $ \{ <var:u> = <var:D> \land <var:m> = <nat:3> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:1> \} $ . Now , we have the command yielding $ <nat:3> + <var:m> * <var:u$ toward $ <var:m>$ . This line forwards the condition $ \{ <var:u> = <var:D> \land <var:m> = <nat:3> \cdot <var:D> ^ <nat:4> + <nat:1> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:1> \} $ toward the condition $ \{ <var:u> = <var:D> \land <var:m> = <nat:3> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:4> + <nat:2> \cdot <var:D> ^ <nat:3> + <nat:2> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:3> \} $ . This is guaranteed using the assignment inference rule defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:u> = <var:D> }} <var:m> := <nat:3> ; <var:m> := <nat:1> + <var:m> * <var:u> ; <var:m> := <nat:2> + <var:m> * <var:u> ; <var:m> := <nat:2> + <var:m> * <var:u> ; <var:m> := <nat:1> + <var:m> * <var:u> ; <var:m> := <nat:3> + <var:m> * <var:u> {{ <var:m> = <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:m> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:m> = <nat:3> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:m> = <nat:3> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:m> = <nat:3> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:m> = <nat:3> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:D> /\ <var:m> = <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:2> * <var:D> ^ <nat:3> + <nat:2> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 