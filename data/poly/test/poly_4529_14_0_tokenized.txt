\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:S0> := <nat:4> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:w> ; <var:S2> := <nat:1> ; <var:S2> := <var:S2> * <var:w> ; <var:S2> := <var:S2> * <var:w> ; <var:S3> := <nat:1> ; <var:S3> := <var:S3> * <var:w> ; <var:S3> := <var:S3> * <var:w> ; <var:S3> := <var:S3> * <var:w> ; <var:a> := <var:S3> ; <var:a> := <var:a> + <var:S2> ; <var:a> := <var:a> + <var:S1> ; <var:a> := <var:a> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Given , with some positive integer coefficients $ <var:x> $ , that $ <var:w> = <var:x> $ prior to the evaluation of this set of instructions it follows that we see $ <var:a> = <nat:1> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this set of instructions is shown with standard Hoare reasoning . Further , we have \verb | { <var:w> = <var:x> } <var:S0> := <nat:4> { <var:w> = <var:x> \land <var:S0> = <nat:4> } | , \verb | { <var:w> = <var:x> \land <var:S0> = <nat:4> } <var:S1> := <nat:1> { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> } | , \verb | { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> } <var:S1> := <var:S1> * <var:w> { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> } | , \verb | { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> } <var:S2> := <nat:1> { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> } | , \verb | { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> } <var:S2> := <var:S2> * <var:w> { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> } | , \verb | { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> } <var:S2> := <var:S2> * <var:w> { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> } | , \verb | { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> } <var:S3> := <nat:1> { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:S3> = <nat:1> } | , \verb | { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:S3> = <nat:1> } <var:S3> := <var:S3> * <var:w> { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:S3> = <nat:1> \cdot <var:x> } | , \verb | { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:S3> = <nat:1> \cdot <var:x> } <var:S3> := <var:S3> * <var:w> { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:S3> = <nat:1> \cdot <var:x> ^ <nat:2> } | , \verb | { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:S3> = <nat:1> \cdot <var:x> ^ <nat:2> } <var:S3> := <var:S3> * <var:w> { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:S3> = <nat:1> \cdot <var:x> ^ <nat:3> } | , \verb | { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:S3> = <nat:1> \cdot <var:x> ^ <nat:3> } <var:a> := <var:S3> { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:a> = <nat:1> \cdot <var:x> ^ <nat:3> } | , \verb | { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> \land <var:a> = <nat:1> \cdot <var:x> ^ <nat:3> } <var:a> := <var:a> + <var:S2> { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:a> = <nat:1> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> } | , \verb | { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:a> = <nat:1> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> } <var:a> := <var:a> + <var:S1> { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:a> = <nat:1> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> } | and \verb | { <var:w> = <var:x> \land <var:S0> = <nat:4> \land <var:a> = <nat:1> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> } <var:a> := <var:a> + <var:S0{ <var:w> = <var:x> \land <var:a> = <nat:1> \cdot <var:x> ^ <nat:3> + <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <def:poly> := <var:S0> := <nat:4> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:w> ; <var:S2> := <nat:1> ; <var:S2> := <var:S2> * <var:w> ; <var:S2> := <var:S2> * <var:w> ; <var:S3> := <nat:1> ; <var:S3> := <var:S3> * <var:w> ; <var:S3> := <var:S3> * <var:w> ; <var:S3> := <var:S3> * <var:w> ; <var:a> := <var:S3> ; <var:a> := <var:a> + <var:S2> ; <var:a> := <var:a> + <var:S1> ; <var:a> := <var:a> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:w> = <var:x> }} <def:poly> {{ <var:a> = <nat:1> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:S3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:S3> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:S3> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:S3> = <nat:1> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> /\ <var:a> = <nat:1> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:1> * <var:x> /\ <var:a> = <nat:1> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:S0> = <nat:4> /\ <var:a> = <nat:1> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:x> /\ <var:a> = <nat:1> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 