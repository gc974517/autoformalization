\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:M> := <nat:4> ; <var:M> := <nat:2> + <var:M> * <var:n> ; <var:M> := <nat:2> + <var:M> * <var:n> ; <var:M> := <nat:3> + <var:M> * <var:n> ; <var:M> := <nat:2> + <var:M> * <var:n> ; <var:M> := <nat:1> + <var:M> * <var:n> ; <var:M> := <nat:3> + <var:M> * <var:n> ; <var:M> := <nat:2> + <var:M> * <var:n> ; <var:M> := <nat:2> + <var:M> * <var:n> ; <var:M> := <var:M> * <var:n> ; <var:M> := <nat:1> + <var:M> * <var:n> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:n> = <var:S> $ --- assuming some whole numbers $ <var:S> $ --- ahead of interpreting the series of instructions then we have $ <var:M> = <nat:4> \cdot <var:S> ^ <nat:10> + <nat:2> \cdot <var:S> ^ <nat:9> + <nat:2> \cdot <var:S> ^ <nat:8> + <nat:3> \cdot <var:S> ^ <nat:7> + <nat:2> \cdot <var:S> ^ <nat:6> + <nat:1> \cdot <var:S> ^ <nat:5> + <nat:3> \cdot <var:S> ^ <nat:4> + <nat:2> \cdot <var:S> ^ <nat:3> + <nat:2> \cdot <var:S> ^ <nat:2> + <nat:1> $ when set of instructions has finished . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions can be seen by typical Hoare reasoning . Paying attention to the subsequent steps found in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:S> \} & <var:M> := <nat:4> & \{ <var:n> = <var:S> \land <var:M> = <nat:4> \} \\ \{ <var:n> = <var:S> \land <var:M> = <nat:4> \} & <var:M> := <nat:2> + <var:M> * <var:n> & \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> + <nat:2> \} \\ \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> + <nat:2> \} & <var:M> := <nat:2> + <var:M> * <var:n> & \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> ^ <nat:2> + <nat:2> \cdot <var:S> + <nat:2> \} \\ \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> ^ <nat:2> + <nat:2> \cdot <var:S> + <nat:2> \} & <var:M> := <nat:3> + <var:M> * <var:n> & \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> ^ <nat:3> + <nat:2> \cdot <var:S> ^ <nat:2> + <nat:2> \cdot <var:S> + <nat:3> \} \\ \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> ^ <nat:3> + <nat:2> \cdot <var:S> ^ <nat:2> + <nat:2> \cdot <var:S> + <nat:3> \} & <var:M> := <nat:2> + <var:M> * <var:n> & \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> ^ <nat:4> + <nat:2> \cdot <var:S> ^ <nat:3> + <nat:2> \cdot <var:S> ^ <nat:2> + <nat:3> \cdot <var:S> + <nat:2> \} \\ \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> ^ <nat:4> + <nat:2> \cdot <var:S> ^ <nat:3> + <nat:2> \cdot <var:S> ^ <nat:2> + <nat:3> \cdot <var:S> + <nat:2> \} & <var:M> := <nat:1> + <var:M> * <var:n> & \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> ^ <nat:5> + <nat:2> \cdot <var:S> ^ <nat:4> + <nat:2> \cdot <var:S> ^ <nat:3> + <nat:3> \cdot <var:S> ^ <nat:2> + <nat:2> \cdot <var:S> + <nat:1> \} \end{tabular} This is shown to be logically sound through the assignment scheme defined in usual Hoare reasoning . Moving on to the next statements found in the list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:S> \} & <var:M> := <nat:4> & \{ <var:n> = <var:S> \land <var:M> = <nat:4> \} \\ \{ <var:n> = <var:S> \land <var:M> = <nat:4> \} & <var:M> := <nat:2> + <var:M> * <var:n> & \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> + <nat:2> \} \\ \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> + <nat:2> \} & <var:M> := <nat:2> + <var:M> * <var:n> & \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> ^ <nat:2> + <nat:2> \cdot <var:S> + <nat:2> \} \\ \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> ^ <nat:2> + <nat:2> \cdot <var:S> + <nat:2> \} & <var:M> := <nat:3> + <var:M> * <var:n> & \{ <var:n> = <var:S> \land <var:M> = <nat:4> \cdot <var:S> ^ <nat:3> + <nat:2> \cdot <var:S> ^ <nat:2> + <nat:2> \cdot <var:S> + <nat:3> \} \end{tabular} Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:S> \} & <var:M> := <nat:4> & \{ <var:n> = <var:S> \land <var:M> = <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:4> ; <var:M> := <nat:2> + <var:M> * <var:n> ; <var:M> := <nat:2> + <var:M> * <var:n> ; <var:M> := <nat:3> + <var:M> * <var:n> ; <var:M> := <nat:2> + <var:M> * <var:n> ; <var:M> := <nat:1> + <var:M> * <var:n> ; <var:M> := <nat:3> + <var:M> * <var:n> ; <var:M> := <nat:2> + <var:M> * <var:n> ; <var:M> := <nat:2> + <var:M> * <var:n> ; <var:M> := <var:M> * <var:n> ; <var:M> := <nat:1> + <var:M> * <var:n> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:n> = <var:S> }} <def:poly> {{ <var:M> = <nat:4> * <var:S> ^ <nat:10> + <nat:2> * <var:S> ^ <nat:9> + <nat:2> * <var:S> ^ <nat:8> + <nat:3> * <var:S> ^ <nat:7> + <nat:2> * <var:S> ^ <nat:6> + <nat:1> * <var:S> ^ <nat:5> + <nat:3> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:M> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:M> = <nat:4> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:M> = <nat:4> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:M> = <nat:4> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:M> = <nat:4> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:M> = <nat:4> * <var:S> ^ <nat:5> + <nat:2> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:M> = <nat:4> * <var:S> ^ <nat:6> + <nat:2> * <var:S> ^ <nat:5> + <nat:2> * <var:S> ^ <nat:4> + <nat:3> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:M> = <nat:4> * <var:S> ^ <nat:7> + <nat:2> * <var:S> ^ <nat:6> + <nat:2> * <var:S> ^ <nat:5> + <nat:3> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:1> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:M> = <nat:4> * <var:S> ^ <nat:8> + <nat:2> * <var:S> ^ <nat:7> + <nat:2> * <var:S> ^ <nat:6> + <nat:3> * <var:S> ^ <nat:5> + <nat:2> * <var:S> ^ <nat:4> + <nat:1> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:M> = <nat:4> * <var:S> ^ <nat:9> + <nat:2> * <var:S> ^ <nat:8> + <nat:2> * <var:S> ^ <nat:7> + <nat:3> * <var:S> ^ <nat:6> + <nat:2> * <var:S> ^ <nat:5> + <nat:1> * <var:S> ^ <nat:4> + <nat:3> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:S> /\ <var:M> = <nat:4> * <var:S> ^ <nat:10> + <nat:2> * <var:S> ^ <nat:9> + <nat:2> * <var:S> ^ <nat:8> + <nat:3> * <var:S> ^ <nat:7> + <nat:2> * <var:S> ^ <nat:6> + <nat:1> * <var:S> ^ <nat:5> + <nat:3> * <var:S> ^ <nat:4> + <nat:2> * <var:S> ^ <nat:3> + <nat:2> * <var:S> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 