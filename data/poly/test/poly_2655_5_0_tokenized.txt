\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:3> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:p> ; <var:u> := <var:z1> ; <var:u> := <var:u> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> in \emph{Imp} . Given it to be that $ <var:p> = <var:K> $ prior to evaluating this series of commands it follows that we see $ <var:u> = <nat:2> \cdot <var:K> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:p> = <var:K> \} \\ <var:z0> := <nat:3> ; \\ \{ <var:p> = <var:K> \land <var:z0> = <nat:3> \} \\ <var:z1> := <nat:2> ; \\ \{ <var:p> = <var:K> \land <var:z0> = <nat:3> \land <var:z1> = <nat:2> \} \\ <var:z1> := <var:z1> * <var:p> ; \\ \{ <var:p> = <var:K> \land <var:z0> = <nat:3> \land <var:z1> = <nat:2> * <var:K> \} \\ <var:u> := <var:z1> ; \\ \{ <var:p> = <var:K> \land <var:z0> = <nat:3> \land <var:u> = <nat:2> * <var:K> \} \\ <var:u> := <var:u> + <var:z0> \\ \{ <var:p> = <var:K> \land <var:u> = <nat:2> * <var:K> + <nat:3> \} \end{eqnarray} The application of Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:3> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:p> ; <var:u> := <var:z1> ; <var:u> := <var:u> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:p> = <var:K> }} <def:poly> {{ <var:u> = <nat:2> * <var:K> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:z0> = <nat:3> /\ <var:u> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:u> = <nat:2> * <var:K> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 