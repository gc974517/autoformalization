\begin{document} \begin{theorem} Take the following list of commands as follows \begin{verbatim} <var:L1> := <var:o> ; <var:L2> := <var:L1> * <var:o> ; <var:L3> := <var:L2> * <var:o> ; <var:L0> := <nat:5> ; <var:L1> := <var:L1> * <nat:4> ; <var:L2> := <var:L2> * <nat:1> ; <var:L3> := <var:L3> * <nat:3> ; <var:M> := <var:L3> <var:M> := <var:M> + <var:L2> <var:M> := <var:M> + <var:L1> <var:M> := <var:M> + <var:L0> \end{verbatim} Assume that we have $ <var:o> = <var:i> $ --- for some positive integer coefficients $ <var:i> $ --- before evaluating the segment of code it holds that $ <var:M> = <nat:3> \times <var:i> ^ <nat:3> + <nat:1> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:5> $ when segment of code finishes . \end{theorem} \begin{proof} Utilizing typical Hoare logic returns : \begin{eqnarray} \{ <var:o> = <var:i> \} \\ <var:L1> := <var:o> ; \\ \{ <var:o> = <var:i> \land <var:L1> = <var:i> \} \\ <var:L2> := <var:L1> * <var:o> ; \\ \{ <var:o> = <var:i> \land <var:L1> = <var:i> \land <var:L2> = <var:i> ^ <nat:2> \} \\ <var:L3> := <var:L2> * <var:o> ; \\ \{ <var:o> = <var:i> \land <var:L1> = <var:i> \land <var:L2> = <var:i> ^ <nat:2> \land <var:L3> = <var:i> ^ <nat:3> \} \\ <var:L0> := <nat:5> ; \\ \{ <var:o> = <var:i> \land <var:L1> = <var:i> \land <var:L2> = <var:i> ^ <nat:2> \land <var:L3> = <var:i> ^ <nat:3> \land <var:L0> = <nat:5> \} \\ <var:L1> := <var:L1> * <nat:4> ; \\ \{ <var:o> = <var:i> \land <var:L1> = <nat:4> \times <var:i> \land <var:L2> = <var:i> ^ <nat:2> \land <var:L3> = <var:i> ^ <nat:3> \land <var:L0> = <nat:5> \} \\ <var:L2> := <var:L2> * <nat:1> ; \\ \{ <var:o> = <var:i> \land <var:L1> = <nat:4> \times <var:i> \land <var:L2> = <nat:1> \times <var:i> ^ <nat:2> \land <var:L3> = <var:i> ^ <nat:3> \land <var:L0> = <nat:5> \} \\ <var:L3> := <var:L3> * <nat:3> ; \\ \{ <var:o> = <var:i> \land <var:L1> = <nat:4> \times <var:i> \land <var:L2> = <nat:1> \times <var:i> ^ <nat:2> \land <var:L3> = <nat:3> \times <var:i> ^ <nat:3> \land <var:L0> = <nat:5> \} \\ <var:M> := <var:L3> \\ \{ <var:o> = <var:i> \land <var:L1> = <nat:4> \times <var:i> \land <var:L2> = <nat:1> \times <var:i> ^ <nat:2> \land <var:L0> = <nat:5> \land <var:M> = <nat:3> \times <var:i> ^ <nat:3> \} \\ <var:M> := <var:M> + <var:L2> \\ \{ <var:o> = <var:i> \land <var:L1> = <nat:4> \times <var:i> \land <var:L0> = <nat:5> \land <var:M> = <nat:3> \times <var:i> ^ <nat:3> + <nat:1> \times <var:i> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:L1> \\ \{ <var:o> = <var:i> \land <var:L0> = <nat:5> \land <var:M> = <nat:3> \times <var:i> ^ <nat:3> + <nat:1> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> \} \\ <var:M> := <var:M> + <var:L0> \\ \{ <var:o> = <var:i> \land <var:M> = <nat:3> \times <var:i> ^ <nat:3> + <nat:1> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:5> \} \end{eqnarray} Hence , this series of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:o> = <var:i> }} <var:L1> := <var:o> ; <var:L2> := <var:L1> * <var:o> ; <var:L3> := <var:L2> * <var:o> ; <var:L0> := <nat:5> ; <var:L1> := <var:L1> * <nat:4> ; <var:L2> := <var:L2> * <nat:1> ; <var:L3> := <var:L3> * <nat:3> ; <var:M> := <var:L3> <var:M> := <var:M> + <var:L2> <var:M> := <var:M> + <var:L1> <var:M> := <var:M> + <var:L0> {{ <var:M> = <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:L1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:L1> = <var:i> /\ <var:L2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:L1> = <var:i> /\ <var:L2> = <var:i> ^ <nat:2> /\ <var:L3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:L1> = <var:i> /\ <var:L2> = <var:i> ^ <nat:2> /\ <var:L3> = <var:i> ^ <nat:3> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:L1> = <nat:4> * <var:i> /\ <var:L2> = <var:i> ^ <nat:2> /\ <var:L3> = <var:i> ^ <nat:3> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:L1> = <nat:4> * <var:i> /\ <var:L2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:L3> = <var:i> ^ <nat:3> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:L1> = <nat:4> * <var:i> /\ <var:L2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:L3> = <nat:3> * <var:i> ^ <nat:3> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:L1> = <nat:4> * <var:i> /\ <var:L2> = <nat:1> * <var:i> ^ <nat:2> /\ <var:L0> = <nat:5> /\ <var:M> = <nat:3> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:L1> = <nat:4> * <var:i> /\ <var:L0> = <nat:5> /\ <var:M> = <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:L0> = <nat:5> /\ <var:M> = <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:i> /\ <var:M> = <nat:3> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 