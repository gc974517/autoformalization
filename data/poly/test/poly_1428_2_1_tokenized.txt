\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:3> ; <var:x> := <var:d0> \end{verbatim} Allowing it to be that $ <var:g> = <var:L> $ prior to evaluating the set of instructions then $ <var:x> = <nat:3> $ once list of commands executes . \end{theorem} \begin{proof} The way to prove correctness for this segment of code can be demonstrated using typical Hoare techniques . Moving forward , we see the variable binding line yielding $ <nat:3> $ toward $ <var:d0>$ . This takes the condition $ \{ <var:g> = <var:L> \} $ as the condition $ \{ <var:g> = <var:L> \land <var:d0> = <nat:3> \} $ . This is deduced through the assignment scheme found in standard Hoare techniques . Advancing , we see the variable update statement giving $ <var:d0$ into $ <var:x>$ . This forwards $ \{ <var:g> = <var:L> \land <var:d0> = <nat:3> \} $ as the postcondition $ \{ <var:g> = <var:L> \land <var:x> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:g> = <var:L> }} <var:d0> := <nat:3> ; <var:x> := <var:d0> {{ <var:x> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:L> /\ <var:x> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 