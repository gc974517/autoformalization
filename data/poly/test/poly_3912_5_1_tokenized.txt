\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z1> := <var:q> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Q> := <var:Z1> <var:Q> := <var:Q> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Given ( given any whole numbers $ <var:W> $ ) $ <var:q> = <var:W> $ prior to executing our code segment , it follows that $ <var:Q> = <nat:2> \times <var:W> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for the program is accomplished using standard Hoare techniques . Taking another step toward the subsequent piece of code found in the series of instructions , the variable update code assigning $ <var:q> $ toward $ <var:Z1>$ . This statement forwards the condition $ \{ <var:q> = <var:W> \} $ toward the postcondition $ \{ <var:q> = <var:W> \land <var:Z1> = <var:W> \} $ . Moving forward to the proceeding statement seen in the segment of code , the binding code \verb | <var:Z0> := <nat:4> ; | . This takes $ \{ <var:q> = <var:W> \land <var:Z1> = <var:W> \} $ into $ \{ <var:q> = <var:W> \land <var:Z1> = <var:W> \land <var:Z0> = <nat:4> \} $ . Following , we see the environment update command defining $ <var:Z1> * <nat:2> $ into $ <var:Z1>$ . This forwards the condition $ \{ <var:q> = <var:W> \land <var:Z1> = <var:W> \land <var:Z0> = <nat:4> \} $ to the postcondition $ \{ <var:q> = <var:W> \land <var:Z1> = <nat:2> * <var:W> \land <var:Z0> = <nat:4> \} $ . Moving forward to the proceeding command found in the list of commands , we have the command letting $ <var:Z1$ toward $ <var:Q>$ . This command takes $ \{ <var:q> = <var:W> \land <var:Z1> = <nat:2> * <var:W> \land <var:Z0> = <nat:4> \} $ into the postcondition $ \{ <var:q> = <var:W> \land <var:Z0> = <nat:4> \land <var:Q> = <nat:2> * <var:W> \} $ . This is guaranteed through the assignment inference rule given by Hoare techniques . Honing in on the next statement seen in our code , the line assigning $ <var:Q> + <var:Z0$ into $ <var:Q>$ . This statement moves the condition $ \{ <var:q> = <var:W> \land <var:Z0> = <nat:4> \land <var:Q> = <nat:2> * <var:W> \} $ into the condition $ \{ <var:q> = <var:W> \land <var:Q> = <nat:2> * <var:W> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z1> := <var:q> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:2> ; <var:Q> := <var:Z1> <var:Q> := <var:Q> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:q> = <var:W> }} <def:poly> {{ <var:Q> = <nat:2> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:Z1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:Z1> = <var:W> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:Z1> = <nat:2> * <var:W> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:Z0> = <nat:4> /\ <var:Q> = <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:W> /\ <var:Q> = <nat:2> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 