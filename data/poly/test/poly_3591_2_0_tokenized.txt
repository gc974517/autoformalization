\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:h0> := <nat:2> ; <var:B> := <var:h0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:W> = <var:v> $ before running this list of commands it holds that we see $ <var:B> = <nat:2> $ once code has finished . \end{theorem} \begin{proof} Utilizing typical Hoare logic yields : \begin{eqnarray} \{ <var:W> = <var:v> \} \\ <var:h0> := <nat:2> ; \\ \{ <var:W> = <var:v> \land <var:h0> = <nat:2> \} \\ <var:B> := <var:h0> \\ \{ <var:W> = <var:v> \land <var:B> = <nat:2> \} \end{eqnarray} Given the above , the program has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <def:poly> := <var:h0> := <nat:2> ; <var:B> := <var:h0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:W> = <var:v> }} <def:poly> {{ <var:B> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:v> /\ <var:B> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 