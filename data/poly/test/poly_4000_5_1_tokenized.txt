\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v1> := <var:B> ; <var:v0> := <nat:5> ; <var:v1> := <var:v1> * <nat:1> ; <var:K> := <var:v1> <var:K> := <var:K> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:B> = <var:N> $ ahead of running this program it must be that we see $ <var:K> = <nat:1> \cdot <var:N> + <nat:5> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning yields : \begin{eqnarray} \{ <var:B> = <var:N> \} \\ <var:v1> := <var:B> ; \\ \{ <var:B> = <var:N> \land <var:v1> = <var:N> \} \\ <var:v0> := <nat:5> ; \\ \{ <var:B> = <var:N> \land <var:v1> = <var:N> \land <var:v0> = <nat:5> \} \\ <var:v1> := <var:v1> * <nat:1> ; \\ \{ <var:B> = <var:N> \land <var:v1> = <nat:1> \cdot <var:N> \land <var:v0> = <nat:5> \} \\ <var:K> := <var:v1> \\ \{ <var:B> = <var:N> \land <var:v0> = <nat:5> \land <var:K> = <nat:1> \cdot <var:N> \} \\ <var:K> := <var:K> + <var:v0> \\ \{ <var:B> = <var:N> \land <var:K> = <nat:1> \cdot <var:N> + <nat:5> \} \end{eqnarray} As a consequence , the code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v1> := <var:B> ; <var:v0> := <nat:5> ; <var:v1> := <var:v1> * <nat:1> ; <var:K> := <var:v1> <var:K> := <var:K> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:B> = <var:N> }} <def:poly> {{ <var:K> = <nat:1> * <var:N> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:v1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:v1> = <var:N> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:v1> = <nat:1> * <var:N> /\ <var:v0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:v0> = <nat:5> /\ <var:K> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:N> /\ <var:K> = <nat:1> * <var:N> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 