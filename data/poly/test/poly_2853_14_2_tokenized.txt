\begin{document} \begin{theorem} Consider the following set of instructions : \begin{verbatim} <var:K> := <nat:1> ; <var:K> := <var:K> * <var:e> ; <var:K> := <nat:4> + <var:K> * <var:e> ; <var:K> := <nat:3> + <var:K> * <var:e> ; <var:K> := <nat:3> + <var:K> * <var:e> ; <var:K> := <nat:1> + <var:K> * <var:e> ; <var:K> := <nat:2> + <var:K> * <var:e> ; <var:K> := <var:K> * <var:e> ; <var:K> := <nat:2> + <var:K> * <var:e> ; <var:K> := <nat:3> + <var:K> * <var:e> ; <var:K> := <nat:4> + <var:K> * <var:e> ; <var:K> := <nat:3> + <var:K> * <var:e> ; <var:K> := <nat:2> + <var:K> * <var:e> ; <var:K> := <nat:1> + <var:K> * <var:e> \end{verbatim} Allow , letting natural coefficients $ <var:k> $ , that we have $ <var:e> = <var:k> $ ahead of the evaluation of this set of commands it follows that we see $ <var:K> = <nat:1> * <var:k> ^ <nat:13> + <nat:4> * <var:k> ^ <nat:11> + <nat:3> * <var:k> ^ <nat:10> + <nat:3> * <var:k> ^ <nat:9> + <nat:1> * <var:k> ^ <nat:8> + <nat:2> * <var:k> ^ <nat:7> + <nat:2> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> $ . \end{theorem} \begin{proof} Applying typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:e> = <var:k> \} \\ <var:K> := <nat:1> ; \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \} \\ <var:K> := <var:K> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \times <var:k> + \} \\ <var:K> := <nat:4> + <var:K> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \times <var:k> ^ <nat:2> + <nat:4> \} \\ <var:K> := <nat:3> + <var:K> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> + <nat:3> \} \end{eqnarray} Continuing evaluating this set of commands returns : \begin{eqnarray} <var:K> := <nat:3> + <var:K> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \times <var:k> ^ <nat:4> + <nat:4> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:3> \} \\ <var:K> := <nat:1> + <var:K> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \times <var:k> ^ <nat:5> + <nat:4> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:1> \} \\ <var:K> := <nat:2> + <var:K> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \times <var:k> ^ <nat:6> + <nat:4> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:1> \times <var:k> + <nat:2> \} \\ <var:K> := <var:K> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \times <var:k> ^ <nat:7> + <nat:4> \times <var:k> ^ <nat:5> + <nat:3> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:1> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + \} \\ <var:K> := <nat:2> + <var:K> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \times <var:k> ^ <nat:8> + <nat:4> \times <var:k> ^ <nat:6> + <nat:3> \times <var:k> ^ <nat:5> + <nat:3> \times <var:k> ^ <nat:4> + <nat:1> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> ^ <nat:2> + <nat:2> \} \\ <var:K> := <nat:3> + <var:K> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \times <var:k> ^ <nat:9> + <nat:4> \times <var:k> ^ <nat:7> + <nat:3> \times <var:k> ^ <nat:6> + <nat:3> \times <var:k> ^ <nat:5> + <nat:1> \times <var:k> ^ <nat:4> + <nat:2> \times <var:k> ^ <nat:3> + <nat:2> \times <var:k> + <nat:3> \} \\ <var:K> := <nat:4> + <var:K> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \times <var:k> ^ <nat:10> + <nat:4> \times <var:k> ^ <nat:8> + <nat:3> \times <var:k> ^ <nat:7> + <nat:3> \times <var:k> ^ <nat:6> + <nat:1> \times <var:k> ^ <nat:5> + <nat:2> \times <var:k> ^ <nat:4> + <nat:2> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:4> \} \end{eqnarray} Allowing the execution of this list of commands gives : \begin{eqnarray} <var:K> := <nat:3> + <var:K> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \times <var:k> ^ <nat:11> + <nat:4> \times <var:k> ^ <nat:9> + <nat:3> \times <var:k> ^ <nat:8> + <nat:3> \times <var:k> ^ <nat:7> + <nat:1> \times <var:k> ^ <nat:6> + <nat:2> \times <var:k> ^ <nat:5> + <nat:2> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:4> \times <var:k> + <nat:3> \} \\ <var:K> := <nat:2> + <var:K> * <var:e> ; \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \times <var:k> ^ <nat:12> + <nat:4> \times <var:k> ^ <nat:10> + <nat:3> \times <var:k> ^ <nat:9> + <nat:3> \times <var:k> ^ <nat:8> + <nat:1> \times <var:k> ^ <nat:7> + <nat:2> \times <var:k> ^ <nat:6> + <nat:2> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:2> \} \\ <var:K> := <nat:1> + <var:K> * <var:e> \\ \{ <var:e> = <var:k> \land <var:K> = <nat:1> \times <var:k> ^ <nat:13> + <nat:4> \times <var:k> ^ <nat:11> + <nat:3> \times <var:k> ^ <nat:10> + <nat:3> \times <var:k> ^ <nat:9> + <nat:1> \times <var:k> ^ <nat:8> + <nat:2> \times <var:k> ^ <nat:7> + <nat:2> \times <var:k> ^ <nat:5> + <nat:3> \times <var:k> ^ <nat:4> + <nat:4> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:1> \} \end{eqnarray} As a result , the set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:e> = <var:k> }} <var:K> := <nat:1> ; <var:K> := <var:K> * <var:e> ; <var:K> := <nat:4> + <var:K> * <var:e> ; <var:K> := <nat:3> + <var:K> * <var:e> ; <var:K> := <nat:3> + <var:K> * <var:e> ; <var:K> := <nat:1> + <var:K> * <var:e> ; <var:K> := <nat:2> + <var:K> * <var:e> ; <var:K> := <var:K> * <var:e> ; <var:K> := <nat:2> + <var:K> * <var:e> ; <var:K> := <nat:3> + <var:K> * <var:e> ; <var:K> := <nat:4> + <var:K> * <var:e> ; <var:K> := <nat:3> + <var:K> * <var:e> ; <var:K> := <nat:2> + <var:K> * <var:e> ; <var:K> := <nat:1> + <var:K> * <var:e> {{ <var:K> = <nat:1> * <var:k> ^ <nat:13> + <nat:4> * <var:k> ^ <nat:11> + <nat:3> * <var:k> ^ <nat:10> + <nat:3> * <var:k> ^ <nat:9> + <nat:1> * <var:k> ^ <nat:8> + <nat:2> * <var:k> ^ <nat:7> + <nat:2> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> * <var:k> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> * <var:k> ^ <nat:3> + <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> * <var:k> ^ <nat:5> + <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> * <var:k> ^ <nat:6> + <nat:4> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> * <var:k> ^ <nat:7> + <nat:4> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> * <var:k> ^ <nat:8> + <nat:4> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> * <var:k> ^ <nat:9> + <nat:4> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:2> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> * <var:k> ^ <nat:10> + <nat:4> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:1> * <var:k> ^ <nat:5> + <nat:2> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> * <var:k> ^ <nat:11> + <nat:4> * <var:k> ^ <nat:9> + <nat:3> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:1> * <var:k> ^ <nat:6> + <nat:2> * <var:k> ^ <nat:5> + <nat:2> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> * <var:k> ^ <nat:12> + <nat:4> * <var:k> ^ <nat:10> + <nat:3> * <var:k> ^ <nat:9> + <nat:3> * <var:k> ^ <nat:8> + <nat:1> * <var:k> ^ <nat:7> + <nat:2> * <var:k> ^ <nat:6> + <nat:2> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:k> /\ <var:K> = <nat:1> * <var:k> ^ <nat:13> + <nat:4> * <var:k> ^ <nat:11> + <nat:3> * <var:k> ^ <nat:10> + <nat:3> * <var:k> ^ <nat:9> + <nat:1> * <var:k> ^ <nat:8> + <nat:2> * <var:k> ^ <nat:7> + <nat:2> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 