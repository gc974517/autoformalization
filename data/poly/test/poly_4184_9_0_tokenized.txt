\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:8> ; <var:O1> := <nat:2> ; <var:O1> := <var:O1> * <var:P> ; <var:O2> := <nat:8> ; <var:O2> := <var:O2> * <var:P> ; <var:O2> := <var:O2> * <var:P> ; <var:w> := <var:O2> ; <var:w> := <var:w> + <var:O1> ; <var:w> := <var:w> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:P> = <var:D> $ prior to interpreting this list of commands it must be that $ <var:w> = <nat:8> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code can be given with usual Hoare logic . Going to the next step , we have the code \verb | <var:O0> := <nat:8> ; | . This takes the precondition $ \{ <var:P> = <var:D> \} $ into the postcondition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \} $ . This is rigorously given with the assignment inference rule given in Hoare logic . Jumping to the subsequent line found in our segment of code , we see the command assigning $ <nat:2> $ into $ <var:O1>$ . This advances the precondition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \} $ as the condition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \} $ . This is deduced using the assignment inference rule of Hoare logic . Taking another step toward the subsequent statement in the set of commands , the assignment command letting $ <var:O1> * <var:P> $ into $ <var:O1>$ . This forwards the precondition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \} $ toward the postcondition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:D> \} $ . This is shown to be logically sound through the assignment rule defined by typical Hoare logic . Immediately after , we see the binding line \verb | <var:O2> := <nat:8> ; | . This line transfers the precondition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:D> \} $ toward the postcondition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:D> \land <var:O2> = <nat:8> \} $ . Taking a look at the proceeding line of code seen in our series of instructions , we see the variable assignmet code yielding $ <var:O2> * <var:P> $ toward $ <var:O2>$ . This forwards the precondition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:D> \land <var:O2> = <nat:8> \} $ to the condition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:D> \land <var:O2> = <nat:8> \cdot <var:D> \} $ . Moving on to the subsequent command seen in our series of commands , we have the variable binding statement defining $ <var:O2> * <var:P> $ into $ <var:O2>$ . This statement takes the precondition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:D> \land <var:O2> = <nat:8> \cdot <var:D> \} $ toward the condition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:D> \land <var:O2> = <nat:8> \cdot <var:D> ^ <nat:2> \} $ . This is ensured by the assignment law given by typical Hoare logic . Moving on to the following piece of code contained in the segment of code , the environment update command yielding $ <var:O2> $ to $ <var:w>$ . This code moves the precondition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:D> \land <var:O2> = <nat:8> \cdot <var:D> ^ <nat:2> \} $ as $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:D> \land <var:w> = <nat:8> \cdot <var:D> ^ <nat:2> \} $ . This is given through the assignment rule defined in usual Hoare techniques . Jumping to the upcoming command seen in the series of commands , we see the variable assignmet code \verb | <var:w> := <var:w> + <var:O1> ; | . This statement forwards the precondition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:O1> = <nat:2> \cdot <var:D> \land <var:w> = <nat:8> \cdot <var:D> ^ <nat:2> \} $ toward the condition $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:w> = <nat:8> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> \} $ . Moving on , we see the variable update command giving $ <var:w> + <var:O0$ to $ <var:w>$ . This line advances $ \{ <var:P> = <var:D> \land <var:O0> = <nat:8> \land <var:w> = <nat:8> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> \} $ toward $ \{ <var:P> = <var:D> \land <var:w> = <nat:8> \cdot <var:D> ^ <nat:2> + <nat:2> \cdot <var:D> + <nat:8> \} $ . This is rigorously given with the assignment inference rule from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O0> := <nat:8> ; <var:O1> := <nat:2> ; <var:O1> := <var:O1> * <var:P> ; <var:O2> := <nat:8> ; <var:O2> := <var:O2> * <var:P> ; <var:O2> := <var:O2> * <var:P> ; <var:w> := <var:O2> ; <var:w> := <var:w> + <var:O1> ; <var:w> := <var:w> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:P> = <var:D> }} <def:poly> {{ <var:w> = <nat:8> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:O0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:D> /\ <var:O2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:D> /\ <var:O2> = <nat:8> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:D> /\ <var:O2> = <nat:8> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:O0> = <nat:8> /\ <var:O1> = <nat:2> * <var:D> /\ <var:w> = <nat:8> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:O0> = <nat:8> /\ <var:w> = <nat:8> * <var:D> ^ <nat:2> + <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:D> /\ <var:w> = <nat:8> * <var:D> ^ <nat:2> + <nat:2> * <var:D> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 