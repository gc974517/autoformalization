\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T1> := <var:Z> ; <var:T2> := <var:T1> * <var:Z> ; <var:T0> := <nat:7> ; <var:T1> := <var:T1> * <nat:3> ; <var:T2> := <var:T2> * <nat:1> ; <var:b> := <var:T2> <var:b> := <var:b> + <var:T1> <var:b> := <var:b> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> . Allow it to hold that $ <var:Z> = <var:n> $ before running the series of instructions , it must be that we see $ <var:b> = <nat:1> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:7> $ . \end{theorem} \begin{proof} The argument for our list of instructions can be demonstrated with Hoare logic . Advancing to the following command seen in our code , the variable assignmet statement assigning $ <var:Z> $ toward $ <var:T1>$ . This forwards the condition $ \{ <var:Z> = <var:n> \} $ into the postcondition $ \{ <var:Z> = <var:n> \land <var:T1> = <var:n> \} $ . Going forward , the binding statement giving $ <var:T1> * <var:Z> $ to $ <var:T2>$ . This line forwards $ \{ <var:Z> = <var:n> \land <var:T1> = <var:n> \} $ to $ \{ <var:Z> = <var:n> \land <var:T1> = <var:n> \land <var:T2> = <var:n> ^ <nat:2> \} $ . Moving forward to the upcoming statement in our code , we see the assignment code letting $ <nat:7> $ into $ <var:T0>$ . This forwards $ \{ <var:Z> = <var:n> \land <var:T1> = <var:n> \land <var:T2> = <var:n> ^ <nat:2> \} $ to the condition $ \{ <var:Z> = <var:n> \land <var:T1> = <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T0> = <nat:7> \} $ . Observing the subsequent step found in the segment of code , the environment update statement \verb | <var:T1> := <var:T1> * <nat:3> ; | . This code redefines the condition $ \{ <var:Z> = <var:n> \land <var:T1> = <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T0> = <nat:7> \} $ toward the postcondition $ \{ <var:Z> = <var:n> \land <var:T1> = <nat:3> \cdot <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T0> = <nat:7> \} $ . This is ensured with the assignment scheme of Hoare techniques . Immediately following , we see the code \verb | <var:T2> := <var:T2> * <nat:1> ; | . This line moves $ \{ <var:Z> = <var:n> \land <var:T1> = <nat:3> \cdot <var:n> \land <var:T2> = <var:n> ^ <nat:2> \land <var:T0> = <nat:7> \} $ as $ \{ <var:Z> = <var:n> \land <var:T1> = <nat:3> \cdot <var:n> \land <var:T2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:T0> = <nat:7> \} $ . Keeping momentum , the variable binding line assigning $ <var:T2$ to $ <var:b>$ . This transfers $ \{ <var:Z> = <var:n> \land <var:T1> = <nat:3> \cdot <var:n> \land <var:T2> = <nat:1> \cdot <var:n> ^ <nat:2> \land <var:T0> = <nat:7> \} $ into $ \{ <var:Z> = <var:n> \land <var:T1> = <nat:3> \cdot <var:n> \land <var:T0> = <nat:7> \land <var:b> = <nat:1> \cdot <var:n> ^ <nat:2> \} $ . This is known to be sound through the assignment law of Hoare techniques . Moving forward to the following piece of code contained in our set of instructions , we have the assignment line \verb | <var:b> := <var:b> + <var:T1> | . This command takes the condition $ \{ <var:Z> = <var:n> \land <var:T1> = <nat:3> \cdot <var:n> \land <var:T0> = <nat:7> \land <var:b> = <nat:1> \cdot <var:n> ^ <nat:2> \} $ toward the postcondition $ \{ <var:Z> = <var:n> \land <var:T0> = <nat:7> \land <var:b> = <nat:1> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> \} $ . Advancing to the next step , we have the binding command binding $ <var:b> + <var:T0$ into $ <var:b>$ . This redefines the condition $ \{ <var:Z> = <var:n> \land <var:T0> = <nat:7> \land <var:b> = <nat:1> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> \} $ into $ \{ <var:Z> = <var:n> \land <var:b> = <nat:1> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <def:poly> := <var:T1> := <var:Z> ; <var:T2> := <var:T1> * <var:Z> ; <var:T0> := <nat:7> ; <var:T1> := <var:T1> * <nat:3> ; <var:T2> := <var:T2> * <nat:1> ; <var:b> := <var:T2> <var:b> := <var:b> + <var:T1> <var:b> := <var:b> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:Z> = <var:n> }} <def:poly> {{ <var:b> = <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:T1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:T1> = <var:n> /\ <var:T2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:T1> = <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:T1> = <nat:3> * <var:n> /\ <var:T2> = <var:n> ^ <nat:2> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:T1> = <nat:3> * <var:n> /\ <var:T2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:T0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:T1> = <nat:3> * <var:n> /\ <var:T0> = <nat:7> /\ <var:b> = <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:T0> = <nat:7> /\ <var:b> = <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:n> /\ <var:b> = <nat:1> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 