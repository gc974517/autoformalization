\begin{document} \begin{theorem} Define the following list of instructions such that \begin{verbatim} <var:U1> := <var:g> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:4> ; <var:b> := <var:U1> <var:b> := <var:b> + <var:U0> \end{verbatim} Allowing that we have $ <var:g> = <var:h> $ prior to running this set of commands , it must be that we see $ <var:b> = <nat:4> * <var:h> + <nat:2> $ when list of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for this segment of code can be shown with Hoare reasoning . After , we see \verb | { <var:g> = <var:h> } <var:U1> := <var:g> { <var:g> = <var:h> \land <var:U1> = <var:h> } | , \verb | { <var:g> = <var:h> \land <var:U1> = <var:h> } <var:U0> := <nat:2> { <var:g> = <var:h> \land <var:U1> = <var:h> \land <var:U0> = <nat:2> } | , \verb | { <var:g> = <var:h> \land <var:U1> = <var:h> \land <var:U0> = <nat:2> } <var:U1> := <var:U1> * <nat:4> { <var:g> = <var:h> \land <var:U1> = <nat:4> \times <var:h> \land <var:U0> = <nat:2> } | , \verb | { <var:g> = <var:h> \land <var:U1> = <nat:4> \times <var:h> \land <var:U0> = <nat:2> } <var:b> := <var:U1{ <var:g> = <var:h> \land <var:U0> = <nat:2> \land <var:b> = <nat:4> \times <var:h> } | and \verb | { <var:g> = <var:h> \land <var:U0> = <nat:2> \land <var:b> = <nat:4> \times <var:h> } <var:b> := <var:b> + <var:U0{ <var:g> = <var:h> \land <var:b> = <nat:4> \times <var:h> + <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:g> = <var:h> }} <var:U1> := <var:g> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:4> ; <var:b> := <var:U1> <var:b> := <var:b> + <var:U0> {{ <var:b> = <nat:4> * <var:h> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:U1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:U1> = <var:h> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:U1> = <nat:4> * <var:h> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:U0> = <nat:2> /\ <var:b> = <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:b> = <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 