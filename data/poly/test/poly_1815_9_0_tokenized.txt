\begin{document} \begin{theorem} Let the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:9> ; <var:o1> := <nat:6> ; <var:o1> := <var:o1> * <var:J> ; <var:o2> := <nat:1> ; <var:o2> := <var:o2> * <var:J> ; <var:o2> := <var:o2> * <var:J> ; <var:P> := <var:o2> ; <var:P> := <var:P> + <var:o1> ; <var:P> := <var:P> + <var:o0> \end{verbatim} Allow , given any positive integers $ <var:W> $ , that we have $ <var:J> = <var:W> $ ahead of the execution of our series of instructions then we have $ <var:P> = <nat:1> \times <var:W> ^ <nat:2> + <nat:6> \times <var:W> + <nat:9> $ . \end{theorem} \begin{proof} The proof of the series of instructions is done by standard Hoare logic . Considering the upcoming steps seen in our code segment , we see \begin{verbatim} { <var:J> = <var:W> } <var:o0> := <nat:9> { <var:J> = <var:W> \land <var:o0> = <nat:9> } { <var:J> = <var:W> \land <var:o0> = <nat:9> } <var:o1> := <nat:6> { <var:J> = <var:W> \land <var:o0> = <nat:9> \land <var:o1> = <nat:6> } { <var:J> = <var:W> \land <var:o0> = <nat:9> \land <var:o1> = <nat:6> } <var:o1> := <var:o1> * <var:J> { <var:J> = <var:W> \land <var:o0> = <nat:9> \land <var:o1> = <nat:6> \cdot <var:W> } { <var:J> = <var:W> \land <var:o0> = <nat:9> \land <var:o1> = <nat:6> \cdot <var:W> } <var:o2> := <nat:1> { <var:J> = <var:W> \land <var:o0> = <nat:9> \land <var:o1> = <nat:6> \cdot <var:W> \land <var:o2> = <nat:1> } { <var:J> = <var:W> \land <var:o0> = <nat:9> \land <var:o1> = <nat:6> \cdot <var:W> \land <var:o2> = <nat:1> } <var:o2> := <var:o2> * <var:J> { <var:J> = <var:W> \land <var:o0> = <nat:9> \land <var:o1> = <nat:6> \cdot <var:W> \land <var:o2> = <nat:1> \cdot <var:W> } { <var:J> = <var:W> \land <var:o0> = <nat:9> \land <var:o1> = <nat:6> \cdot <var:W> \land <var:o2> = <nat:1> \cdot <var:W> } <var:o2> := <var:o2> * <var:J> { <var:J> = <var:W> \land <var:o0> = <nat:9> \land <var:o1> = <nat:6> \cdot <var:W> \land <var:o2> = <nat:1> \cdot <var:W> ^ <nat:2> } { <var:J> = <var:W> \land <var:o0> = <nat:9> \land <var:o1> = <nat:6> \cdot <var:W> \land <var:o2> = <nat:1> \cdot <var:W> ^ <nat:2> } <var:P> := <var:o2> { <var:J> = <var:W> \land <var:o0> = <nat:9> \land <var:o1> = <nat:6> \cdot <var:W> \land <var:P> = <nat:1> \cdot <var:W> ^ <nat:2> } \end{verbatim} This is deduced using the assignment inference rule found in standard Hoare reasoning . Shifting focus toward the subsequent steps seen in the set of instructions , we see \begin{verbatim} { <var:J> = <var:W> } <var:o0> := <nat:9> { <var:J> = <var:W> \land <var:o0> = <nat:9> } { <var:J> = <var:W> \land <var:o0> = <nat:9> } <var:o1> := <nat:6> { <var:J> = <var:W> \land <var:o0> = <nat:9> \land <var:o1> = <nat:6> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:J> = <var:W> }} <var:o0> := <nat:9> ; <var:o1> := <nat:6> ; <var:o1> := <var:o1> * <var:J> ; <var:o2> := <nat:1> ; <var:o2> := <var:o2> * <var:J> ; <var:o2> := <var:o2> * <var:J> ; <var:P> := <var:o2> ; <var:P> := <var:P> + <var:o1> ; <var:P> := <var:P> + <var:o0> {{ <var:P> = <nat:1> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:6> * <var:W> /\ <var:o2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:6> * <var:W> /\ <var:o2> = <nat:1> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:6> * <var:W> /\ <var:o2> = <nat:1> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:o0> = <nat:9> /\ <var:o1> = <nat:6> * <var:W> /\ <var:P> = <nat:1> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:o0> = <nat:9> /\ <var:P> = <nat:1> * <var:W> ^ <nat:2> + <nat:6> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:W> /\ <var:P> = <nat:1> * <var:W> ^ <nat:2> + <nat:6> * <var:W> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 