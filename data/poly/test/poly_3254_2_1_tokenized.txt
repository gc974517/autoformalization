\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:9> ; <var:w> := <var:I0> \end{verbatim} \end{definition} \begin{theorem} We define the following series of commands <def:poly> . Allow that $ <var:P> = <var:U> $ before evaluating our code , it must be that we have $ <var:w> = <nat:9> $ after set of instructions has finished executing . \end{theorem} \begin{proof} Using usual Hoare reasoning results in : \begin{eqnarray} \{ <var:P> = <var:U> \} \\ <var:I0> := <nat:9> ; \\ \{ <var:P> = <var:U> \land <var:I0> = <nat:9> \} \\ <var:w> := <var:I0> \\ \{ <var:P> = <var:U> \land <var:w> = <nat:9> \} \end{eqnarray} Thus , this code segment has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <def:poly> := <var:I0> := <nat:9> ; <var:w> := <var:I0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:P> = <var:U> }} <def:poly> {{ <var:w> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:U> /\ <var:w> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 