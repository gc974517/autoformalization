\begin{document} \begin{theorem} Let the following series of instructions such that \begin{verbatim} <var:X> := <nat:1> ; <var:X> := <nat:1> + <var:X> * <var:m> ; <var:X> := <nat:4> + <var:X> * <var:m> ; <var:X> := <nat:1> + <var:X> * <var:m> \end{verbatim} Allow that we have $ <var:m> = <var:Z> $ before running this series of instructions it must be that $ <var:X> = <nat:1> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:1> $ after series of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:Z> \} \\ <var:X> := <nat:1> ; \\ \{ <var:m> = <var:Z> \land <var:X> = <nat:1> \} \\ <var:X> := <nat:1> + <var:X> * <var:m> ; \\ \{ <var:m> = <var:Z> \land <var:X> = <nat:1> * <var:Z> + <nat:1> \} \\ <var:X> := <nat:4> + <var:X> * <var:m> ; \\ \{ <var:m> = <var:Z> \land <var:X> = <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:4> \} \\ <var:X> := <nat:1> + <var:X> * <var:m> \\ \{ <var:m> = <var:Z> \land <var:X> = <nat:1> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> \} \end{eqnarray} Applying standard Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:m> = <var:Z> }} <var:X> := <nat:1> ; <var:X> := <nat:1> + <var:X> * <var:m> ; <var:X> := <nat:4> + <var:X> * <var:m> ; <var:X> := <nat:1> + <var:X> * <var:m> {{ <var:X> = <nat:1> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:X> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:X> = <nat:1> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:X> = <nat:1> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:X> = <nat:1> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 