\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} such that \begin{verbatim} <var:L1> := <var:F> ; <var:L2> := <var:L1> * <var:F> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:6> ; <var:L2> := <var:L2> * <nat:6> ; <var:T> := <var:L2> <var:T> := <var:T> + <var:L1> <var:T> := <var:T> + <var:L0> \end{verbatim} Assuming it to be that $ <var:F> = <var:v> $ --- for all $ <var:v> \in \mathbb{N} $ --- before the execution of this program then we have $ <var:T> = <nat:6> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:3> $ after code segment has terminated . \end{theorem} \begin{proof} The flow of logic for the set of commands can be given by Hoare logic . Advancing on , we have the assignment statement defining $ <var:F> $ into $ <var:L1>$ . This line forwards the precondition $ \{ <var:F> = <var:v> \} $ into the condition $ \{ <var:F> = <var:v> \land <var:L1> = <var:v> \} $ . This is rigorously given through the assignment law from Hoare techniques . Honing in on the proceeding command contained in our set of instructions , we have the assignment command \verb | <var:L2> := <var:L1> * <var:F> ; | . This forwards the precondition $ \{ <var:F> = <var:v> \land <var:L1> = <var:v> \} $ toward the condition $ \{ <var:F> = <var:v> \land <var:L1> = <var:v> \land <var:L2> = <var:v> ^ <nat:2> \} $ . Moving on to the following line seen in the set of instructions , we have the variable binding line \verb | <var:L0> := <nat:3> ; | . This takes the precondition $ \{ <var:F> = <var:v> \land <var:L1> = <var:v> \land <var:L2> = <var:v> ^ <nat:2> \} $ into the postcondition $ \{ <var:F> = <var:v> \land <var:L1> = <var:v> \land <var:L2> = <var:v> ^ <nat:2> \land <var:L0> = <nat:3> \} $ . This is sound with the assignment scheme obtained from Hoare logic . Moving forward , we see the variable binding code giving $ <var:L1> * <nat:6> $ toward $ <var:L1>$ . This command moves the condition $ \{ <var:F> = <var:v> \land <var:L1> = <var:v> \land <var:L2> = <var:v> ^ <nat:2> \land <var:L0> = <nat:3> \} $ into $ \{ <var:F> = <var:v> \land <var:L1> = <nat:6> * <var:v> \land <var:L2> = <var:v> ^ <nat:2> \land <var:L0> = <nat:3> \} $ . This is ensured by the assignment scheme obtained from standard Hoare techniques . Moving forward to the proceeding command found in the program , the code \verb | <var:L2> := <var:L2> * <nat:6> ; | . This code forwards the condition $ \{ <var:F> = <var:v> \land <var:L1> = <nat:6> * <var:v> \land <var:L2> = <var:v> ^ <nat:2> \land <var:L0> = <nat:3> \} $ into the condition $ \{ <var:F> = <var:v> \land <var:L1> = <nat:6> * <var:v> \land <var:L2> = <nat:6> * <var:v> ^ <nat:2> \land <var:L0> = <nat:3> \} $ . This is guaranteed by the assignment inference rule in typical Hoare reasoning . Immediately following , we have the variable binding statement defining $ <var:L2$ as $ <var:T>$ . This redefines the precondition $ \{ <var:F> = <var:v> \land <var:L1> = <nat:6> * <var:v> \land <var:L2> = <nat:6> * <var:v> ^ <nat:2> \land <var:L0> = <nat:3> \} $ as the condition $ \{ <var:F> = <var:v> \land <var:L1> = <nat:6> * <var:v> \land <var:L0> = <nat:3> \land <var:T> = <nat:6> * <var:v> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment law of typical Hoare reasoning . Moving onward , we see the variable binding code binding $ <var:T> + <var:L1$ toward $ <var:T>$ . This statement transfers $ \{ <var:F> = <var:v> \land <var:L1> = <nat:6> * <var:v> \land <var:L0> = <nat:3> \land <var:T> = <nat:6> * <var:v> ^ <nat:2> \} $ as the postcondition $ \{ <var:F> = <var:v> \land <var:L0> = <nat:3> \land <var:T> = <nat:6> * <var:v> ^ <nat:2> + <nat:6> * <var:v> \} $ . Immediately after , we have the binding statement assigning $ <var:T> + <var:L0$ into $ <var:T>$ . This line transfers $ \{ <var:F> = <var:v> \land <var:L0> = <nat:3> \land <var:T> = <nat:6> * <var:v> ^ <nat:2> + <nat:6> * <var:v> \} $ as the postcondition $ \{ <var:F> = <var:v> \land <var:T> = <nat:6> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:3> \} $ . This is shown through the assignment inference rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:F> = <var:v> }} <var:L1> := <var:F> ; <var:L2> := <var:L1> * <var:F> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:6> ; <var:L2> := <var:L2> * <nat:6> ; <var:T> := <var:L2> <var:T> := <var:T> + <var:L1> <var:T> := <var:T> + <var:L0> {{ <var:T> = <nat:6> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:L1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:L1> = <var:v> /\ <var:L2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:L1> = <var:v> /\ <var:L2> = <var:v> ^ <nat:2> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:L1> = <nat:6> * <var:v> /\ <var:L2> = <var:v> ^ <nat:2> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:L1> = <nat:6> * <var:v> /\ <var:L2> = <nat:6> * <var:v> ^ <nat:2> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:L1> = <nat:6> * <var:v> /\ <var:L0> = <nat:3> /\ <var:T> = <nat:6> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:L0> = <nat:3> /\ <var:T> = <nat:6> * <var:v> ^ <nat:2> + <nat:6> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:v> /\ <var:T> = <nat:6> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 