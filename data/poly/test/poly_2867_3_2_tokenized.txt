\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f> := <nat:1> ; <var:f> := <nat:4> + <var:f> * <var:m> ; <var:f> := <nat:1> + <var:f> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:m> = <var:d> $ prior to the execution of our program , it follows that we have $ <var:f> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the series of commands is accomplished through typical Hoare logic . Focusing on the upcoming line in our segment of code , we see the assignment code \verb | <var:f> := <nat:1> ; | . This advances the precondition $ \{ <var:m> = <var:d> \} $ into the postcondition $ \{ <var:m> = <var:d> \land <var:f> = <nat:1> \} $ . Jumping to the subsequent statement found in our series of instructions , we have the variable binding line \verb | <var:f> := <nat:4> + <var:f> * <var:m> ; | . This statement transfers the condition $ \{ <var:m> = <var:d> \land <var:f> = <nat:1> \} $ into the condition $ \{ <var:m> = <var:d> \land <var:f> = <nat:1> \cdot <var:d> + <nat:4> \} $ . Stepping forward , we see the code yielding $ <nat:1> + <var:f> * <var:m$ as $ <var:f>$ . This line redefines $ \{ <var:m> = <var:d> \land <var:f> = <nat:1> \cdot <var:d> + <nat:4> \} $ to the postcondition $ \{ <var:m> = <var:d> \land <var:f> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:1> ; <var:f> := <nat:4> + <var:f> * <var:m> ; <var:f> := <nat:1> + <var:f> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:m> = <var:d> }} <def:poly> {{ <var:f> = <nat:1> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:f> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:f> = <nat:1> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:f> = <nat:1> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 