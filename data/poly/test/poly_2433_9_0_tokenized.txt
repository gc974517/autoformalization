\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as follows \begin{verbatim} <var:y0> := <nat:1> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:X> ; <var:y2> := <nat:4> ; <var:y2> := <var:y2> * <var:X> ; <var:y2> := <var:y2> * <var:X> ; <var:k> := <var:y2> ; <var:k> := <var:k> + <var:y1> ; <var:k> := <var:k> + <var:y0> \end{verbatim} Allow that $ <var:X> = <var:K> $ before interpreting the set of commands , it holds that we have $ <var:k> = <nat:4> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> + <nat:1> $ after program has terminated . \end{theorem} \begin{proof} The application of typical Hoare logic results in : \begin{eqnarray} \{ <var:X> = <var:K> \} \\ <var:y0> := <nat:1> ; \\ \{ <var:X> = <var:K> \land <var:y0> = <nat:1> \} \\ <var:y1> := <nat:2> ; \\ \{ <var:X> = <var:K> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> \} \\ <var:y1> := <var:y1> * <var:X> ; \\ \{ <var:X> = <var:K> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> \cdot <var:K> \} \\ <var:y2> := <nat:4> ; \\ \{ <var:X> = <var:K> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> \cdot <var:K> \land <var:y2> = <nat:4> \} \\ <var:y2> := <var:y2> * <var:X> ; \\ \{ <var:X> = <var:K> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> \cdot <var:K> \land <var:y2> = <nat:4> \cdot <var:K> \} \\ <var:y2> := <var:y2> * <var:X> ; \\ \{ <var:X> = <var:K> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> \cdot <var:K> \land <var:y2> = <nat:4> \cdot <var:K> ^ <nat:2> \} \\ <var:k> := <var:y2> ; \\ \{ <var:X> = <var:K> \land <var:y0> = <nat:1> \land <var:y1> = <nat:2> \cdot <var:K> \land <var:k> = <nat:4> \cdot <var:K> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:y1> ; \\ \{ <var:X> = <var:K> \land <var:y0> = <nat:1> \land <var:k> = <nat:4> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> \} \end{eqnarray} Continuing the execution of the program yields : \begin{eqnarray} <var:k> := <var:k> + <var:y0> \\ \{ <var:X> = <var:K> \land <var:k> = <nat:4> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> + <nat:1> \} \end{eqnarray} Considering the preceding argument , this set of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:X> = <var:K> }} <var:y0> := <nat:1> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:X> ; <var:y2> := <nat:4> ; <var:y2> := <var:y2> * <var:X> ; <var:y2> := <var:y2> * <var:X> ; <var:k> := <var:y2> ; <var:k> := <var:k> + <var:y1> ; <var:k> := <var:k> + <var:y0> {{ <var:k> = <nat:4> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:K> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:K> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:K> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:K> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:2> * <var:K> /\ <var:y2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:K> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:2> * <var:K> /\ <var:y2> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:K> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:2> * <var:K> /\ <var:y2> = <nat:4> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:K> /\ <var:y0> = <nat:1> /\ <var:y1> = <nat:2> * <var:K> /\ <var:k> = <nat:4> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:K> /\ <var:y0> = <nat:1> /\ <var:k> = <nat:4> * <var:K> ^ <nat:2> + <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:K> /\ <var:k> = <nat:4> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 