\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:o1> := <var:A> ; <var:o2> := <var:o1> * <var:A> ; <var:o3> := <var:o2> * <var:A> ; <var:o4> := <var:o3> * <var:A> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:8> ; <var:o3> := <var:o3> * <nat:2> ; <var:o4> := <var:o4> * <nat:3> ; <var:a> := <var:o4> <var:a> := <var:a> + <var:o3> <var:a> := <var:a> + <var:o1> <var:a> := <var:a> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:A> = <var:T> $ before the execution of this list of instructions , it must be that we see $ <var:a> = <nat:3> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:8> * <var:T> + <nat:8> $ when set of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:T> \} \\ <var:o1> := <var:A> ; \\ \{ <var:A> = <var:T> \land <var:o1> = <var:T> \} \\ <var:o2> := <var:o1> * <var:A> ; \\ \{ <var:A> = <var:T> \land <var:o1> = <var:T> \land <var:o2> = <var:T> ^ <nat:2> \} \\ <var:o3> := <var:o2> * <var:A> ; \\ \{ <var:A> = <var:T> \land <var:o1> = <var:T> \land <var:o2> = <var:T> ^ <nat:2> \land <var:o3> = <var:T> ^ <nat:3> \} \\ <var:o4> := <var:o3> * <var:A> ; \\ \{ <var:A> = <var:T> \land <var:o1> = <var:T> \land <var:o2> = <var:T> ^ <nat:2> \land <var:o3> = <var:T> ^ <nat:3> \land <var:o4> = <var:T> ^ <nat:4> \} \\ <var:o0> := <nat:8> ; \\ \{ <var:A> = <var:T> \land <var:o1> = <var:T> \land <var:o2> = <var:T> ^ <nat:2> \land <var:o3> = <var:T> ^ <nat:3> \land <var:o4> = <var:T> ^ <nat:4> \land <var:o0> = <nat:8> \} \\ <var:o1> := <var:o1> * <nat:8> ; \\ \{ <var:A> = <var:T> \land <var:o1> = <nat:8> \times <var:T> \land <var:o2> = <var:T> ^ <nat:2> \land <var:o3> = <var:T> ^ <nat:3> \land <var:o4> = <var:T> ^ <nat:4> \land <var:o0> = <nat:8> \} \\ <var:o3> := <var:o3> * <nat:2> ; \\ \{ <var:A> = <var:T> \land <var:o1> = <nat:8> \times <var:T> \land <var:o2> = <var:T> ^ <nat:2> \land <var:o3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:o4> = <var:T> ^ <nat:4> \land <var:o0> = <nat:8> \} \\ <var:o4> := <var:o4> * <nat:3> ; \\ \{ <var:A> = <var:T> \land <var:o1> = <nat:8> \times <var:T> \land <var:o2> = <var:T> ^ <nat:2> \land <var:o3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:o4> = <nat:3> \times <var:T> ^ <nat:4> \land <var:o0> = <nat:8> \} \\ <var:a> := <var:o4> \\ \{ <var:A> = <var:T> \land <var:o1> = <nat:8> \times <var:T> \land <var:o2> = <var:T> ^ <nat:2> \land <var:o3> = <nat:2> \times <var:T> ^ <nat:3> \land <var:o0> = <nat:8> \land <var:a> = <nat:3> \times <var:T> ^ <nat:4> \} \\ <var:a> := <var:a> + <var:o3> \\ \{ <var:A> = <var:T> \land <var:o1> = <nat:8> \times <var:T> \land <var:o2> = <var:T> ^ <nat:2> \land <var:o0> = <nat:8> \land <var:a> = <nat:3> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:o1> \\ \{ <var:A> = <var:T> \land <var:o0> = <nat:8> \land <var:a> = <nat:3> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> + <nat:8> \times <var:T> \} \\ <var:a> := <var:a> + <var:o0> \\ \{ <var:A> = <var:T> \land <var:a> = <nat:3> \times <var:T> ^ <nat:4> + <nat:2> \times <var:T> ^ <nat:3> + <nat:8> \times <var:T> + <nat:8> \} \end{eqnarray} The application of typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <var:o4> : string := " <var:o4> " . Definition <def:poly> := <var:o1> := <var:A> ; <var:o2> := <var:o1> * <var:A> ; <var:o3> := <var:o2> * <var:A> ; <var:o4> := <var:o3> * <var:A> ; <var:o0> := <nat:8> ; <var:o1> := <var:o1> * <nat:8> ; <var:o3> := <var:o3> * <nat:2> ; <var:o4> := <var:o4> * <nat:3> ; <var:a> := <var:o4> <var:a> := <var:a> + <var:o3> <var:a> := <var:a> + <var:o1> <var:a> := <var:a> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:A> = <var:T> }} <def:poly> {{ <var:a> = <nat:3> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:8> * <var:T> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:o1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:o1> = <var:T> /\ <var:o2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:o1> = <var:T> /\ <var:o2> = <var:T> ^ <nat:2> /\ <var:o3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:o1> = <var:T> /\ <var:o2> = <var:T> ^ <nat:2> /\ <var:o3> = <var:T> ^ <nat:3> /\ <var:o4> = <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:o1> = <var:T> /\ <var:o2> = <var:T> ^ <nat:2> /\ <var:o3> = <var:T> ^ <nat:3> /\ <var:o4> = <var:T> ^ <nat:4> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:o1> = <nat:8> * <var:T> /\ <var:o2> = <var:T> ^ <nat:2> /\ <var:o3> = <var:T> ^ <nat:3> /\ <var:o4> = <var:T> ^ <nat:4> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:o1> = <nat:8> * <var:T> /\ <var:o2> = <var:T> ^ <nat:2> /\ <var:o3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:o4> = <var:T> ^ <nat:4> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:o1> = <nat:8> * <var:T> /\ <var:o2> = <var:T> ^ <nat:2> /\ <var:o3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:o4> = <nat:3> * <var:T> ^ <nat:4> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:o1> = <nat:8> * <var:T> /\ <var:o2> = <var:T> ^ <nat:2> /\ <var:o3> = <nat:2> * <var:T> ^ <nat:3> /\ <var:o0> = <nat:8> /\ <var:a> = <nat:3> * <var:T> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:o1> = <nat:8> * <var:T> /\ <var:o2> = <var:T> ^ <nat:2> /\ <var:o0> = <nat:8> /\ <var:a> = <nat:3> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:o0> = <nat:8> /\ <var:a> = <nat:3> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:8> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:T> /\ <var:a> = <nat:3> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:8> * <var:T> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 