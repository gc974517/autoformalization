\begin{document} \begin{theorem} We define the following series of instructions such that \begin{verbatim} <var:M0> := <nat:2> ; <var:c> := <var:M0> \end{verbatim} Assuming it to hold that $ <var:R> = <var:H> $ prior to running the set of instructions it follows that $ <var:c> = <nat:2> $ when program exits . \end{theorem} \begin{proof} Demonstrating correctness of our code segment is evident through standard Hoare techniques . Now , \[ \begin{tabular} {rcl} \{ <var:R> = <var:H> \} & <var:M0> := <nat:2> & \{ <var:R> = <var:H> \land <var:M0> = <nat:2> \} \end{tabular} Considering the next statement seen in the series of instructions , \[ \begin{tabular} {rcl} \{ <var:R> = <var:H> \} & <var:M0> := <nat:2> & \{ <var:R> = <var:H> \land <var:M0> = <nat:2> \} \end{tabular} This is known to be sound with the variable assignmet law of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:R> = <var:H> }} <var:M0> := <nat:2> ; <var:c> := <var:M0> {{ <var:c> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:c> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 