\begin{document} \begin{theorem} Let the following list of commands such that \begin{verbatim} <var:M> := <nat:3> ; <var:M> := <nat:1> + <var:M> * <var:Y> ; <var:M> := <nat:2> + <var:M> * <var:Y> ; <var:M> := <nat:3> + <var:M> * <var:Y> ; <var:M> := <nat:1> + <var:M> * <var:Y> ; <var:M> := <nat:2> + <var:M> * <var:Y> \end{verbatim} Allow it to hold that $ <var:Y> = <var:z> $ for any integers $ <var:z> $ prior to the execution of this code , it holds that $ <var:M> = <nat:3> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> $ after code has exited . \end{theorem} \begin{proof} The argument for our list of instructions is demonstrated by Hoare techniques . Next , we have the binding code defining $ <nat:3> $ as $ <var:M>$ . This redefines $ \{ <var:Y> = <var:z> \} $ into $ \{ <var:Y> = <var:z> \land <var:M> = <nat:3> \} $ . Paying attention to the upcoming piece of code seen in the list of commands , we see the binding statement defining $ <nat:1> + <var:M> * <var:Y> $ as $ <var:M>$ . This code forwards the precondition $ \{ <var:Y> = <var:z> \land <var:M> = <nat:3> \} $ into $ \{ <var:Y> = <var:z> \land <var:M> = <nat:3> * <var:z> + <nat:1> \} $ . This is guaranteed using the assignment inference rule found in Hoare techniques . Moving on to the next step , we see the assignment statement \verb | <var:M> := <nat:2> + <var:M> * <var:Y> ; | . This command moves the condition $ \{ <var:Y> = <var:z> \land <var:M> = <nat:3> * <var:z> + <nat:1> \} $ to $ \{ <var:Y> = <var:z> \land <var:M> = <nat:3> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> \} $ . This is ensured by the assignment scheme defined by Hoare techniques . Focusing on the proceeding piece of code in the list of commands , we see the assignment statement defining $ <nat:3> + <var:M> * <var:Y> $ into $ <var:M>$ . This statement takes the precondition $ \{ <var:Y> = <var:z> \land <var:M> = <nat:3> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> \} $ toward $ \{ <var:Y> = <var:z> \land <var:M> = <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:3> \} $ . Taking another step toward the next piece of code seen in our code segment , we have the variable assignmet code \verb | <var:M> := <nat:1> + <var:M> * <var:Y> ; | . This forwards the precondition $ \{ <var:Y> = <var:z> \land <var:M> = <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:3> \} $ into the condition $ \{ <var:Y> = <var:z> \land <var:M> = <nat:3> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> \} $ . Shifting focus toward the following step found in our code segment , the binding command letting $ <nat:2> + <var:M> * <var:Y$ toward $ <var:M>$ . This line takes the precondition $ \{ <var:Y> = <var:z> \land <var:M> = <nat:3> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> \} $ to the postcondition $ \{ <var:Y> = <var:z> \land <var:M> = <nat:3> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> \} $ . This is known to be sound with the assignment inference rule defined by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:Y> = <var:z> }} <var:M> := <nat:3> ; <var:M> := <nat:1> + <var:M> * <var:Y> ; <var:M> := <nat:2> + <var:M> * <var:Y> ; <var:M> := <nat:3> + <var:M> * <var:Y> ; <var:M> := <nat:1> + <var:M> * <var:Y> ; <var:M> := <nat:2> + <var:M> * <var:Y> {{ <var:M> = <nat:3> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:M> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:M> = <nat:3> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:M> = <nat:3> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:M> = <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:M> = <nat:3> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:z> /\ <var:M> = <nat:3> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 