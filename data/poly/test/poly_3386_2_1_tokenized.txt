\begin{document} \begin{theorem} Let the following series of commands as \begin{verbatim} <var:Q0> := <nat:7> ; <var:n> := <var:Q0> \end{verbatim} Allow that we have $ <var:E> = <var:K> $ prior to executing our code it holds that we see $ <var:n> = <nat:7> $ after code has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of the program can be demonstrated through usual Hoare reasoning . Following , we see the code binding $ <nat:7> $ to $ <var:Q0>$ . This statement forwards $ \{ <var:E> = <var:K> \} $ as the condition $ \{ <var:E> = <var:K> \land <var:Q0> = <nat:7> \} $ . Moving onward , we see the assignment code \verb | <var:n> := <var:Q0> | . This statement forwards $ \{ <var:E> = <var:K> \land <var:Q0> = <nat:7> \} $ into the postcondition $ \{ <var:E> = <var:K> \land <var:n> = <nat:7> \} $ . This is known to be sound through the assignment rule in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:E> = <var:K> }} <var:Q0> := <nat:7> ; <var:n> := <var:Q0> {{ <var:n> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:K> /\ <var:n> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 