\begin{document} \begin{theorem} Take the following series of instructions as follows \begin{verbatim} <var:H0> := <nat:4> ; <var:g> := <var:H0> \end{verbatim} Allow that $ <var:G> = <var:J> $ before executing the set of instructions , then $ <var:g> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:J> \} \\ <var:H0> := <nat:4> ; \\ \{ <var:G> = <var:J> \land <var:H0> = <nat:4> \} \\ <var:g> := <var:H0> \\ \{ <var:G> = <var:J> \land <var:g> = <nat:4> \} \end{eqnarray} Utilizing standard Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:G> = <var:J> }} <var:H0> := <nat:4> ; <var:g> := <var:H0> {{ <var:g> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:H0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:J> /\ <var:g> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 