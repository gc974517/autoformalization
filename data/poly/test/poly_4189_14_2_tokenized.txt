\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:w> := <nat:2> ; <var:w> := <nat:4> + <var:w> * <var:S> ; <var:w> := <nat:4> + <var:w> * <var:S> ; <var:w> := <nat:1> + <var:w> * <var:S> ; <var:w> := <var:w> * <var:S> ; <var:w> := <var:w> * <var:S> ; <var:w> := <nat:3> + <var:w> * <var:S> ; <var:w> := <nat:2> + <var:w> * <var:S> ; <var:w> := <nat:1> + <var:w> * <var:S> ; <var:w> := <nat:2> + <var:w> * <var:S> ; <var:w> := <var:w> * <var:S> ; <var:w> := <nat:2> + <var:w> * <var:S> ; <var:w> := <nat:4> + <var:w> * <var:S> ; <var:w> := <nat:2> + <var:w> * <var:S> \end{verbatim} \end{definition} \begin{theorem} Define the following program <def:poly> . Given --- for any $ <var:l> \in \mathbb{Z}^+ $ --- that we have $ <var:S> = <var:l> $ prior to the evaluation of our program then we have $ <var:w> = <nat:2> \times <var:l> ^ <nat:13> + <nat:4> \times <var:l> ^ <nat:12> + <nat:4> \times <var:l> ^ <nat:11> + <nat:1> \times <var:l> ^ <nat:10> + <nat:3> \times <var:l> ^ <nat:7> + <nat:2> \times <var:l> ^ <nat:6> + <nat:1> \times <var:l> ^ <nat:5> + <nat:2> \times <var:l> ^ <nat:4> + <nat:2> \times <var:l> ^ <nat:2> + <nat:4> \times <var:l> + <nat:2> $ once series of commands has exited . \end{theorem} \begin{proof} The course of logic for the series of commands is shown through usual Hoare logic . Stepping through , we have the assignment code letting $ <nat:2> $ into $ <var:w>$ . This takes the condition $ \{ <var:S> = <var:l> \} $ as $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \} $ . This is sound by the assignment rule found in usual Hoare techniques . Advancing to the upcoming command found in the series of commands , we see the variable update line defining $ <nat:4> + <var:w> * <var:S> $ as $ <var:w>$ . This moves the precondition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \} $ as the postcondition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> + <nat:4> \} $ . Shifting focus toward the next line contained in our code segment , we have the binding command assigning $ <nat:4> + <var:w> * <var:S> $ as $ <var:w>$ . This transfers $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> + <nat:4> \} $ as $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> + <nat:4> \} $ . Moving on to the next step , the environment update command \verb | <var:w> := <nat:1> + <var:w> * <var:S> ; | . This command redefines $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> + <nat:4> \} $ into the condition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> + <nat:1> \} $ . This is shown by the assignment scheme given in standard Hoare reasoning . Going forward , the command assigning $ <var:w> * <var:S> $ into $ <var:w>$ . This code takes $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> + <nat:1> \} $ to $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:4> + <nat:4> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + \} $ . Advancing to the next line in the series of commands , we see the environment update code \verb | <var:w> := <var:w> * <var:S> ; | . This transfers the condition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:4> + <nat:4> \cdot <var:l> ^ <nat:3> + <nat:4> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + \} $ into the condition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + \} $ . This is ensured using the assignment scheme from standard Hoare reasoning . Moving forward to the proceeding command contained in our code segment , we see the binding line \verb | <var:w> := <nat:3> + <var:w> * <var:S> ; | . This redefines $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:4> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + \} $ to the postcondition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:6> + <nat:4> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:3> + <nat:3> \} $ . Moving on to the next bit of code in the list of instructions , the environment update command yielding $ <nat:2> + <var:w> * <var:S> $ toward $ <var:w>$ . This command takes $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:6> + <nat:4> \cdot <var:l> ^ <nat:5> + <nat:4> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:3> + <nat:3> \} $ toward the condition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:7> + <nat:4> \cdot <var:l> ^ <nat:6> + <nat:4> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:4> + <nat:3> \cdot <var:l> + <nat:2> \} $ . This is shown to be logically sound using the assignment rule defined by typical Hoare logic . Taking a look at the upcoming step in the list of instructions , we have the variable update line yielding $ <nat:1> + <var:w> * <var:S> $ into $ <var:w>$ . This takes $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:7> + <nat:4> \cdot <var:l> ^ <nat:6> + <nat:4> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:4> + <nat:3> \cdot <var:l> + <nat:2> \} $ as the postcondition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:8> + <nat:4> \cdot <var:l> ^ <nat:7> + <nat:4> \cdot <var:l> ^ <nat:6> + <nat:1> \cdot <var:l> ^ <nat:5> + <nat:3> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + <nat:1> \} $ . Stepping through , we see the assignment statement \verb | <var:w> := <nat:2> + <var:w> * <var:S> ; | . This redefines $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:8> + <nat:4> \cdot <var:l> ^ <nat:7> + <nat:4> \cdot <var:l> ^ <nat:6> + <nat:1> \cdot <var:l> ^ <nat:5> + <nat:3> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + <nat:1> \} $ as $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:9> + <nat:4> \cdot <var:l> ^ <nat:8> + <nat:4> \cdot <var:l> ^ <nat:7> + <nat:1> \cdot <var:l> ^ <nat:6> + <nat:3> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + <nat:2> \} $ . This is shown using the assignment law found in typical Hoare logic . Taking another step toward the next command in the program , the binding command assigning $ <var:w> * <var:S> $ toward $ <var:w>$ . This redefines the condition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:9> + <nat:4> \cdot <var:l> ^ <nat:8> + <nat:4> \cdot <var:l> ^ <nat:7> + <nat:1> \cdot <var:l> ^ <nat:6> + <nat:3> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:1> \cdot <var:l> + <nat:2> \} $ as $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:10> + <nat:4> \cdot <var:l> ^ <nat:9> + <nat:4> \cdot <var:l> ^ <nat:8> + <nat:1> \cdot <var:l> ^ <nat:7> + <nat:3> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + \} $ . This is guaranteed through the assignment rule given by standard Hoare techniques . Further , the variable update statement \verb | <var:w> := <nat:2> + <var:w> * <var:S> ; | . This advances the condition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:10> + <nat:4> \cdot <var:l> ^ <nat:9> + <nat:4> \cdot <var:l> ^ <nat:8> + <nat:1> \cdot <var:l> ^ <nat:7> + <nat:3> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:3> + <nat:1> \cdot <var:l> ^ <nat:2> + <nat:2> \cdot <var:l> + \} $ to the postcondition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:11> + <nat:4> \cdot <var:l> ^ <nat:10> + <nat:4> \cdot <var:l> ^ <nat:9> + <nat:1> \cdot <var:l> ^ <nat:8> + <nat:3> \cdot <var:l> ^ <nat:5> + <nat:2> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:2> \} $ . Taking a look at the subsequent command in our set of commands , the binding line \verb | <var:w> := <nat:4> + <var:w> * <var:S> ; | . This statement advances the condition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:11> + <nat:4> \cdot <var:l> ^ <nat:10> + <nat:4> \cdot <var:l> ^ <nat:9> + <nat:1> \cdot <var:l> ^ <nat:8> + <nat:3> \cdot <var:l> ^ <nat:5> + <nat:2> \cdot <var:l> ^ <nat:4> + <nat:1> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:2> \} $ to the postcondition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:12> + <nat:4> \cdot <var:l> ^ <nat:11> + <nat:4> \cdot <var:l> ^ <nat:10> + <nat:1> \cdot <var:l> ^ <nat:9> + <nat:3> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> + <nat:4> \} $ . This is shown to be logically sound through the assignment scheme given in usual Hoare techniques . Honing in on the next command in the set of instructions , we see the assignment line yielding $ <nat:2> + <var:w> * <var:S$ to $ <var:w>$ . This code moves the condition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:12> + <nat:4> \cdot <var:l> ^ <nat:11> + <nat:4> \cdot <var:l> ^ <nat:10> + <nat:1> \cdot <var:l> ^ <nat:9> + <nat:3> \cdot <var:l> ^ <nat:6> + <nat:2> \cdot <var:l> ^ <nat:5> + <nat:1> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:3> + <nat:2> \cdot <var:l> + <nat:4> \} $ to the condition $ \{ <var:S> = <var:l> \land <var:w> = <nat:2> \cdot <var:l> ^ <nat:13> + <nat:4> \cdot <var:l> ^ <nat:12> + <nat:4> \cdot <var:l> ^ <nat:11> + <nat:1> \cdot <var:l> ^ <nat:10> + <nat:3> \cdot <var:l> ^ <nat:7> + <nat:2> \cdot <var:l> ^ <nat:6> + <nat:1> \cdot <var:l> ^ <nat:5> + <nat:2> \cdot <var:l> ^ <nat:4> + <nat:2> \cdot <var:l> ^ <nat:2> + <nat:4> \cdot <var:l> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:w> := <nat:2> ; <var:w> := <nat:4> + <var:w> * <var:S> ; <var:w> := <nat:4> + <var:w> * <var:S> ; <var:w> := <nat:1> + <var:w> * <var:S> ; <var:w> := <var:w> * <var:S> ; <var:w> := <var:w> * <var:S> ; <var:w> := <nat:3> + <var:w> * <var:S> ; <var:w> := <nat:2> + <var:w> * <var:S> ; <var:w> := <nat:1> + <var:w> * <var:S> ; <var:w> := <nat:2> + <var:w> * <var:S> ; <var:w> := <var:w> * <var:S> ; <var:w> := <nat:2> + <var:w> * <var:S> ; <var:w> := <nat:4> + <var:w> * <var:S> ; <var:w> := <nat:2> + <var:w> * <var:S> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:S> = <var:l> }} <def:poly> {{ <var:w> = <nat:2> * <var:l> ^ <nat:13> + <nat:4> * <var:l> ^ <nat:12> + <nat:4> * <var:l> ^ <nat:11> + <nat:1> * <var:l> ^ <nat:10> + <nat:3> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:3> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:3> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> * <var:l> ^ <nat:9> + <nat:4> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:7> + <nat:1> * <var:l> ^ <nat:6> + <nat:3> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> * <var:l> ^ <nat:10> + <nat:4> * <var:l> ^ <nat:9> + <nat:4> * <var:l> ^ <nat:8> + <nat:1> * <var:l> ^ <nat:7> + <nat:3> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> * <var:l> ^ <nat:11> + <nat:4> * <var:l> ^ <nat:10> + <nat:4> * <var:l> ^ <nat:9> + <nat:1> * <var:l> ^ <nat:8> + <nat:3> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:2> * <var:l> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> * <var:l> ^ <nat:12> + <nat:4> * <var:l> ^ <nat:11> + <nat:4> * <var:l> ^ <nat:10> + <nat:1> * <var:l> ^ <nat:9> + <nat:3> * <var:l> ^ <nat:6> + <nat:2> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:3> + <nat:2> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:l> /\ <var:w> = <nat:2> * <var:l> ^ <nat:13> + <nat:4> * <var:l> ^ <nat:12> + <nat:4> * <var:l> ^ <nat:11> + <nat:1> * <var:l> ^ <nat:10> + <nat:3> * <var:l> ^ <nat:7> + <nat:2> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:2> * <var:l> ^ <nat:4> + <nat:2> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 