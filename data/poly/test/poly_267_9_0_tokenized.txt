\begin{document} \begin{theorem} We define the following list of instructions such that \begin{verbatim} <var:r0> := <nat:3> ; <var:r1> := <nat:1> ; <var:r1> := <var:r1> * <var:C> ; <var:r2> := <nat:3> ; <var:r2> := <var:r2> * <var:C> ; <var:r2> := <var:r2> * <var:C> ; <var:s> := <var:r2> ; <var:s> := <var:s> + <var:r1> ; <var:s> := <var:s> + <var:r0> \end{verbatim} Assuming it to be that $ <var:C> = <var:P> $ before interpreting this list of commands it must be that we have $ <var:s> = <nat:3> \times <var:P> ^ <nat:2> + <nat:1> \times <var:P> + <nat:3> $ after set of commands is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:P> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:C> = <var:P> \land <var:r0> = <nat:3> \} \\ <var:r1> := <nat:1> ; \\ \{ <var:C> = <var:P> \land <var:r0> = <nat:3> \land <var:r1> = <nat:1> \} \\ <var:r1> := <var:r1> * <var:C> ; \\ \{ <var:C> = <var:P> \land <var:r0> = <nat:3> \land <var:r1> = <nat:1> * <var:P> \} \\ <var:r2> := <nat:3> ; \\ \{ <var:C> = <var:P> \land <var:r0> = <nat:3> \land <var:r1> = <nat:1> * <var:P> \land <var:r2> = <nat:3> \} \\ <var:r2> := <var:r2> * <var:C> ; \\ \{ <var:C> = <var:P> \land <var:r0> = <nat:3> \land <var:r1> = <nat:1> * <var:P> \land <var:r2> = <nat:3> * <var:P> \} \\ <var:r2> := <var:r2> * <var:C> ; \\ \{ <var:C> = <var:P> \land <var:r0> = <nat:3> \land <var:r1> = <nat:1> * <var:P> \land <var:r2> = <nat:3> * <var:P> ^ <nat:2> \} \\ <var:s> := <var:r2> ; \\ \{ <var:C> = <var:P> \land <var:r0> = <nat:3> \land <var:r1> = <nat:1> * <var:P> \land <var:s> = <nat:3> * <var:P> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:r1> ; \\ \{ <var:C> = <var:P> \land <var:r0> = <nat:3> \land <var:s> = <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> \} \\ <var:s> := <var:s> + <var:r0> \\ \{ <var:C> = <var:P> \land <var:s> = <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:3> \} \end{eqnarray} The application of typical Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:C> = <var:P> }} <var:r0> := <nat:3> ; <var:r1> := <nat:1> ; <var:r1> := <var:r1> * <var:C> ; <var:r2> := <nat:3> ; <var:r2> := <var:r2> * <var:C> ; <var:r2> := <var:r2> * <var:C> ; <var:s> := <var:r2> ; <var:s> := <var:s> + <var:r1> ; <var:s> := <var:s> + <var:r0> {{ <var:s> = <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:1> * <var:P> /\ <var:r2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:1> * <var:P> /\ <var:r2> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:1> * <var:P> /\ <var:r2> = <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:1> * <var:P> /\ <var:s> = <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:r0> = <nat:3> /\ <var:s> = <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:P> /\ <var:s> = <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 