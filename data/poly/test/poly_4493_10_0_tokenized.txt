\begin{document} \begin{theorem} Let the following program in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:1> ; <var:I1> := <nat:1> ; <var:I1> := <var:I1> * <var:e> ; <var:I3> := <nat:2> ; <var:I3> := <var:I3> * <var:e> ; <var:I3> := <var:I3> * <var:e> ; <var:I3> := <var:I3> * <var:e> ; <var:b> := <var:I3> ; <var:b> := <var:b> + <var:I1> ; <var:b> := <var:b> + <var:I0> \end{verbatim} Given --- for some positive numbers $ <var:K> $ --- that we have $ <var:e> = <var:K> $ ahead of the evaluation of our code then $ <var:b> = <nat:2> * <var:K> ^ <nat:3> + <nat:1> * <var:K> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of commands can be done by usual Hoare logic . Further , the assignment line \verb | <var:I0> := <nat:1> ; | . This line moves the precondition $ \{ <var:e> = <var:K> \} $ to the postcondition $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \} $ . This is known to be sound by the assignment law of typical Hoare reasoning . Shifting focus toward the following piece of code seen in the code segment , we see the variable assignmet command binding $ <nat:1> $ into $ <var:I1>$ . This command redefines the condition $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \} $ toward the postcondition $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \} $ . This is given using the assignment scheme of standard Hoare techniques . Moving on to the next step , we have the binding statement defining $ <var:I1> * <var:e> $ into $ <var:I1>$ . This code moves $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \} $ to $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \cdot <var:K> \} $ . Now , we have the variable update command assigning $ <nat:2> $ to $ <var:I3>$ . This moves $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \cdot <var:K> \} $ to the postcondition $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \cdot <var:K> \land <var:I3> = <nat:2> \} $ . This is guaranteed by the assignment law from standard Hoare reasoning . Immediately after , the binding code \verb | <var:I3> := <var:I3> * <var:e> ; | . This command takes $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \cdot <var:K> \land <var:I3> = <nat:2> \} $ toward $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \cdot <var:K> \land <var:I3> = <nat:2> \cdot <var:K> \} $ . This is known to be sound through the assignment inference rule given in usual Hoare reasoning . After , the assignment statement \verb | <var:I3> := <var:I3> * <var:e> ; | . This code takes $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \cdot <var:K> \land <var:I3> = <nat:2> \cdot <var:K> \} $ to the condition $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \cdot <var:K> \land <var:I3> = <nat:2> \cdot <var:K> ^ <nat:2> \} $ . Advancing to the subsequent step found in the code segment , we have the variable update code \verb | <var:I3> := <var:I3> * <var:e> ; | . This takes the condition $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \cdot <var:K> \land <var:I3> = <nat:2> \cdot <var:K> ^ <nat:2> \} $ into the postcondition $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \cdot <var:K> \land <var:I3> = <nat:2> \cdot <var:K> ^ <nat:3> \} $ . This is given by the assignment scheme from typical Hoare logic . Following , we have the environment update command giving $ <var:I3> $ to $ <var:b>$ . This redefines the precondition $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \cdot <var:K> \land <var:I3> = <nat:2> \cdot <var:K> ^ <nat:3> \} $ toward the condition $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \cdot <var:K> \land <var:b> = <nat:2> \cdot <var:K> ^ <nat:3> \} $ . Looking at the subsequent statement in our series of commands , we have the command letting $ <var:b> + <var:I1> $ into $ <var:b>$ . This line moves $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:I1> = <nat:1> \cdot <var:K> \land <var:b> = <nat:2> \cdot <var:K> ^ <nat:3> \} $ to the condition $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:b> = <nat:2> \cdot <var:K> ^ <nat:3> + <nat:1> \cdot <var:K> \} $ . Now , we have the environment update line \verb | <var:b> := <var:b> + <var:I0> | . This command forwards the condition $ \{ <var:e> = <var:K> \land <var:I0> = <nat:1> \land <var:b> = <nat:2> \cdot <var:K> ^ <nat:3> + <nat:1> \cdot <var:K> \} $ into the condition $ \{ <var:e> = <var:K> \land <var:b> = <nat:2> \cdot <var:K> ^ <nat:3> + <nat:1> \cdot <var:K> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I3> : string := " <var:I3> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:e> = <var:K> }} <var:I0> := <nat:1> ; <var:I1> := <nat:1> ; <var:I1> := <var:I1> * <var:e> ; <var:I3> := <nat:2> ; <var:I3> := <var:I3> * <var:e> ; <var:I3> := <var:I3> * <var:e> ; <var:I3> := <var:I3> * <var:e> ; <var:b> := <var:I3> ; <var:b> := <var:b> + <var:I1> ; <var:b> := <var:b> + <var:I0> {{ <var:b> = <nat:2> * <var:K> ^ <nat:3> + <nat:1> * <var:K> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:I0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:1> * <var:K> /\ <var:I3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:1> * <var:K> /\ <var:I3> = <nat:2> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:1> * <var:K> /\ <var:I3> = <nat:2> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:1> * <var:K> /\ <var:I3> = <nat:2> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:I0> = <nat:1> /\ <var:I1> = <nat:1> * <var:K> /\ <var:b> = <nat:2> * <var:K> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:I0> = <nat:1> /\ <var:b> = <nat:2> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:K> /\ <var:b> = <nat:2> * <var:K> ^ <nat:3> + <nat:1> * <var:K> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 