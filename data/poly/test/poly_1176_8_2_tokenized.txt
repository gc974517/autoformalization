\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y> := <nat:2> ; <var:Y> := <nat:4> + <var:Y> * <var:V> ; <var:Y> := <var:Y> * <var:V> ; <var:Y> := <nat:2> + <var:Y> * <var:V> ; <var:Y> := <nat:1> + <var:Y> * <var:V> ; <var:Y> := <nat:2> + <var:Y> * <var:V> ; <var:Y> := <nat:3> + <var:Y> * <var:V> ; <var:Y> := <nat:1> + <var:Y> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:V> = <var:u> $ , for any positive numbers $ <var:u> $ , before running our segment of code it holds that we have $ <var:Y> = <nat:2> \cdot <var:u> ^ <nat:7> + <nat:4> \cdot <var:u> ^ <nat:6> + <nat:2> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + <nat:1> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques returns : \begin{eqnarray} \{ <var:V> = <var:u> \} \\ <var:Y> := <nat:2> ; \\ \{ <var:V> = <var:u> \land <var:Y> = <nat:2> \} \\ <var:Y> := <nat:4> + <var:Y> * <var:V> ; \\ \{ <var:V> = <var:u> \land <var:Y> = <nat:2> \cdot <var:u> + <nat:4> \} \\ <var:Y> := <var:Y> * <var:V> ; \\ \{ <var:V> = <var:u> \land <var:Y> = <nat:2> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + \} \\ <var:Y> := <nat:2> + <var:Y> * <var:V> ; \\ \{ <var:V> = <var:u> \land <var:Y> = <nat:2> \cdot <var:u> ^ <nat:3> + <nat:4> \cdot <var:u> ^ <nat:2> + <nat:2> \} \\ <var:Y> := <nat:1> + <var:Y> * <var:V> ; \\ \{ <var:V> = <var:u> \land <var:Y> = <nat:2> \cdot <var:u> ^ <nat:4> + <nat:4> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> + <nat:1> \} \\ <var:Y> := <nat:2> + <var:Y> * <var:V> ; \\ \{ <var:V> = <var:u> \land <var:Y> = <nat:2> \cdot <var:u> ^ <nat:5> + <nat:4> \cdot <var:u> ^ <nat:4> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:1> \cdot <var:u> + <nat:2> \} \\ <var:Y> := <nat:3> + <var:Y> * <var:V> ; \\ \{ <var:V> = <var:u> \land <var:Y> = <nat:2> \cdot <var:u> ^ <nat:6> + <nat:4> \cdot <var:u> ^ <nat:5> + <nat:2> \cdot <var:u> ^ <nat:3> + <nat:1> \cdot <var:u> ^ <nat:2> + <nat:2> \cdot <var:u> + <nat:3> \} \\ <var:Y> := <nat:1> + <var:Y> * <var:V> \\ \{ <var:V> = <var:u> \land <var:Y> = <nat:2> \cdot <var:u> ^ <nat:7> + <nat:4> \cdot <var:u> ^ <nat:6> + <nat:2> \cdot <var:u> ^ <nat:4> + <nat:1> \cdot <var:u> ^ <nat:3> + <nat:2> \cdot <var:u> ^ <nat:2> + <nat:3> \cdot <var:u> + <nat:1> \} \end{eqnarray} Thusly , our list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Y> := <nat:2> ; <var:Y> := <nat:4> + <var:Y> * <var:V> ; <var:Y> := <var:Y> * <var:V> ; <var:Y> := <nat:2> + <var:Y> * <var:V> ; <var:Y> := <nat:1> + <var:Y> * <var:V> ; <var:Y> := <nat:2> + <var:Y> * <var:V> ; <var:Y> := <nat:3> + <var:Y> * <var:V> ; <var:Y> := <nat:1> + <var:Y> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:V> = <var:u> }} <def:poly> {{ <var:Y> = <nat:2> * <var:u> ^ <nat:7> + <nat:4> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:Y> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:Y> = <nat:2> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:Y> = <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:Y> = <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:Y> = <nat:2> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:3> + <nat:2> * <var:u> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:Y> = <nat:2> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:Y> = <nat:2> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:1> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:u> /\ <var:Y> = <nat:2> * <var:u> ^ <nat:7> + <nat:4> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:4> + <nat:1> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 