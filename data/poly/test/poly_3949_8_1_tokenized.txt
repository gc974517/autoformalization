\begin{document} \begin{theorem} Consider the following set of commands as \begin{verbatim} <var:r1> := <var:h> ; <var:r2> := <var:r1> * <var:h> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:5> ; <var:r2> := <var:r2> * <nat:5> ; <var:J> := <var:r2> <var:J> := <var:J> + <var:r1> <var:J> := <var:J> + <var:r0> \end{verbatim} Assume it to be that $ <var:h> = <var:i> $ ( with some integers $ <var:i> $ ) before the evaluation of this series of commands it holds that we see $ <var:J> = <nat:5> \times <var:i> ^ <nat:2> + <nat:5> \times <var:i> + <nat:1> $ . \end{theorem} \begin{proof} Notice this decorated list of instructions . \begin{eqnarray} \{ <var:h> = <var:i> \} \\ <var:r1> := <var:h> ; \\ \{ <var:h> = <var:i> \land <var:r1> = <var:i> \} \\ <var:r2> := <var:r1> * <var:h> ; \\ \{ <var:h> = <var:i> \land <var:r1> = <var:i> \land <var:r2> = <var:i> ^ <nat:2> \} \\ <var:r0> := <nat:1> ; \\ \{ <var:h> = <var:i> \land <var:r1> = <var:i> \land <var:r2> = <var:i> ^ <nat:2> \land <var:r0> = <nat:1> \} \\ <var:r1> := <var:r1> * <nat:5> ; \\ \{ <var:h> = <var:i> \land <var:r1> = <nat:5> \cdot <var:i> \land <var:r2> = <var:i> ^ <nat:2> \land <var:r0> = <nat:1> \} \\ <var:r2> := <var:r2> * <nat:5> ; \\ \{ <var:h> = <var:i> \land <var:r1> = <nat:5> \cdot <var:i> \land <var:r2> = <nat:5> \cdot <var:i> ^ <nat:2> \land <var:r0> = <nat:1> \} \\ <var:J> := <var:r2> \\ \{ <var:h> = <var:i> \land <var:r1> = <nat:5> \cdot <var:i> \land <var:r0> = <nat:1> \land <var:J> = <nat:5> \cdot <var:i> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:r1> \\ \{ <var:h> = <var:i> \land <var:r0> = <nat:1> \land <var:J> = <nat:5> \cdot <var:i> ^ <nat:2> + <nat:5> \cdot <var:i> \} \\ <var:J> := <var:J> + <var:r0> \\ \{ <var:h> = <var:i> \land <var:J> = <nat:5> \cdot <var:i> ^ <nat:2> + <nat:5> \cdot <var:i> + <nat:1> \} \end{eqnarray} Applying Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:h> = <var:i> }} <var:r1> := <var:h> ; <var:r2> := <var:r1> * <var:h> ; <var:r0> := <nat:1> ; <var:r1> := <var:r1> * <nat:5> ; <var:r2> := <var:r2> * <nat:5> ; <var:J> := <var:r2> <var:J> := <var:J> + <var:r1> <var:J> := <var:J> + <var:r0> {{ <var:J> = <nat:5> * <var:i> ^ <nat:2> + <nat:5> * <var:i> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:r1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:r1> = <var:i> /\ <var:r2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:r1> = <var:i> /\ <var:r2> = <var:i> ^ <nat:2> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:r1> = <nat:5> * <var:i> /\ <var:r2> = <var:i> ^ <nat:2> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:r1> = <nat:5> * <var:i> /\ <var:r2> = <nat:5> * <var:i> ^ <nat:2> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:r1> = <nat:5> * <var:i> /\ <var:r0> = <nat:1> /\ <var:J> = <nat:5> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:r0> = <nat:1> /\ <var:J> = <nat:5> * <var:i> ^ <nat:2> + <nat:5> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:i> /\ <var:J> = <nat:5> * <var:i> ^ <nat:2> + <nat:5> * <var:i> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 