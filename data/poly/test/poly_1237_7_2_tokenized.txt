\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:N> := <nat:4> ; <var:N> := <nat:1> + <var:N> * <var:a> ; <var:N> := <nat:4> + <var:N> * <var:a> ; <var:N> := <var:N> * <var:a> ; <var:N> := <nat:1> + <var:N> * <var:a> ; <var:N> := <nat:2> + <var:N> * <var:a> ; <var:N> := <nat:3> + <var:N> * <var:a> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:a> = <var:X> $ , given all $ <var:X> $ , ahead of evaluating our code segment , it holds that we have $ <var:N> = <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:3> $ once series of instructions is done executing . \end{theorem} \begin{proof} The way to prove correctness for the set of commands can be done by Hoare techniques . Advancing , we see \verb | { <var:a> = <var:X> } <var:N> := <nat:4> { <var:a> = <var:X> \land <var:N> = <nat:4> } | , \verb | { <var:a> = <var:X> \land <var:N> = <nat:4> } <var:N> := <nat:1> + <var:N> * <var:a> { <var:a> = <var:X> \land <var:N> = <nat:4> \cdot <var:X> + <nat:1> } | , \verb | { <var:a> = <var:X> \land <var:N> = <nat:4> \cdot <var:X> + <nat:1> } <var:N> := <nat:4> + <var:N> * <var:a> { <var:a> = <var:X> \land <var:N> = <nat:4> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> } | and \verb | { <var:a> = <var:X> \land <var:N> = <nat:4> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> } <var:N> := <var:N> * <var:a> { <var:a> = <var:X> \land <var:N> = <nat:4> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:4> \cdot <var:X> + } | . This is rigorously given with the assignment scheme of usual Hoare reasoning . Looking at the proceeding commands seen in the series of instructions , we have \verb | { <var:a> = <var:X> } <var:N> := <nat:4> { <var:a> = <var:X> \land <var:N> = <nat:4> } | , \verb | { <var:a> = <var:X> \land <var:N> = <nat:4> } <var:N> := <nat:1> + <var:N> * <var:a> { <var:a> = <var:X> \land <var:N> = <nat:4> \cdot <var:X> + <nat:1> } | and \verb | { <var:a> = <var:X> \land <var:N> = <nat:4> \cdot <var:X> + <nat:1> } <var:N> := <nat:4> + <var:N> * <var:a> { <var:a> = <var:X> \land <var:N> = <nat:4> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:4> } | . This is deduced through the environment update scheme given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:N> := <nat:4> ; <var:N> := <nat:1> + <var:N> * <var:a> ; <var:N> := <nat:4> + <var:N> * <var:a> ; <var:N> := <var:N> * <var:a> ; <var:N> := <nat:1> + <var:N> * <var:a> ; <var:N> := <nat:2> + <var:N> * <var:a> ; <var:N> := <nat:3> + <var:N> * <var:a> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:a> = <var:X> }} <def:poly> {{ <var:N> = <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:N> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:N> = <nat:4> * <var:X> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:N> = <nat:4> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:N> = <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:N> = <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:N> = <nat:4> * <var:X> ^ <nat:5> + <nat:1> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:1> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:X> /\ <var:N> = <nat:4> * <var:X> ^ <nat:6> + <nat:1> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:1> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 