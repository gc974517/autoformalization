\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H1> := <var:R> ; <var:H2> := <var:H1> * <var:R> ; <var:H3> := <var:H2> * <var:R> ; <var:H4> := <var:H3> * <var:R> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:6> ; <var:H2> := <var:H2> * <nat:1> ; <var:H3> := <var:H3> * <nat:1> ; <var:H4> := <var:H4> * <nat:5> ; <var:r> := <var:H4> <var:r> := <var:r> + <var:H3> <var:r> := <var:r> + <var:H2> <var:r> := <var:r> + <var:H1> <var:r> := <var:r> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> . Assuming $ <var:R> = <var:f> $ ahead of executing this series of instructions it follows that we see $ <var:r> = <nat:5> \times <var:f> ^ <nat:4> + <nat:1> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> ^ <nat:2> + <nat:6> \times <var:f> + <nat:6> $ . \end{theorem} \begin{proof} The course of logic for our code segment is evident with typical Hoare logic . Following , we have the command defining $ <var:R> $ toward $ <var:H1>$ . This transfers the precondition $ \{ <var:R> = <var:f> \} $ to the condition $ \{ <var:R> = <var:f> \land <var:H1> = <var:f> \} $ . This is sound by the assignment rule obtained from typical Hoare logic . Going forward , we have the environment update line \verb | <var:H2> := <var:H1> * <var:R> ; | . This moves $ \{ <var:R> = <var:f> \land <var:H1> = <var:f> \} $ toward $ \{ <var:R> = <var:f> \land <var:H1> = <var:f> \land <var:H2> = <var:f> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment rule defined by typical Hoare techniques . Moving forward , we have the assignment command \verb | <var:H3> := <var:H2> * <var:R> ; | . This transfers the precondition $ \{ <var:R> = <var:f> \land <var:H1> = <var:f> \land <var:H2> = <var:f> ^ <nat:2> \} $ toward the postcondition $ \{ <var:R> = <var:f> \land <var:H1> = <var:f> \land <var:H2> = <var:f> ^ <nat:2> \land <var:H3> = <var:f> ^ <nat:3> \} $ . Moving forward , we see the variable assignmet command assigning $ <var:H3> * <var:R> $ as $ <var:H4>$ . This line takes $ \{ <var:R> = <var:f> \land <var:H1> = <var:f> \land <var:H2> = <var:f> ^ <nat:2> \land <var:H3> = <var:f> ^ <nat:3> \} $ into the postcondition $ \{ <var:R> = <var:f> \land <var:H1> = <var:f> \land <var:H2> = <var:f> ^ <nat:2> \land <var:H3> = <var:f> ^ <nat:3> \land <var:H4> = <var:f> ^ <nat:4> \} $ . Advancing on , we see the environment update command assigning $ <nat:6> $ into $ <var:H0>$ . This moves the precondition $ \{ <var:R> = <var:f> \land <var:H1> = <var:f> \land <var:H2> = <var:f> ^ <nat:2> \land <var:H3> = <var:f> ^ <nat:3> \land <var:H4> = <var:f> ^ <nat:4> \} $ as $ \{ <var:R> = <var:f> \land <var:H1> = <var:f> \land <var:H2> = <var:f> ^ <nat:2> \land <var:H3> = <var:f> ^ <nat:3> \land <var:H4> = <var:f> ^ <nat:4> \land <var:H0> = <nat:6> \} $ . Keeping momentum , we see the assignment command defining $ <var:H1> * <nat:6> $ to $ <var:H1>$ . This statement advances the condition $ \{ <var:R> = <var:f> \land <var:H1> = <var:f> \land <var:H2> = <var:f> ^ <nat:2> \land <var:H3> = <var:f> ^ <nat:3> \land <var:H4> = <var:f> ^ <nat:4> \land <var:H0> = <nat:6> \} $ toward the condition $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H2> = <var:f> ^ <nat:2> \land <var:H3> = <var:f> ^ <nat:3> \land <var:H4> = <var:f> ^ <nat:4> \land <var:H0> = <nat:6> \} $ . Moving forward , we see the binding line yielding $ <var:H2> * <nat:1> $ as $ <var:H2>$ . This line advances the precondition $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H2> = <var:f> ^ <nat:2> \land <var:H3> = <var:f> ^ <nat:3> \land <var:H4> = <var:f> ^ <nat:4> \land <var:H0> = <nat:6> \} $ into the postcondition $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H2> = <nat:1> * <var:f> ^ <nat:2> \land <var:H3> = <var:f> ^ <nat:3> \land <var:H4> = <var:f> ^ <nat:4> \land <var:H0> = <nat:6> \} $ . Shifting focus toward the upcoming command in the segment of code , we see the binding code \verb | <var:H3> := <var:H3> * <nat:1> ; | . This redefines the condition $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H2> = <nat:1> * <var:f> ^ <nat:2> \land <var:H3> = <var:f> ^ <nat:3> \land <var:H4> = <var:f> ^ <nat:4> \land <var:H0> = <nat:6> \} $ as $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H2> = <nat:1> * <var:f> ^ <nat:2> \land <var:H3> = <nat:1> * <var:f> ^ <nat:3> \land <var:H4> = <var:f> ^ <nat:4> \land <var:H0> = <nat:6> \} $ . Stepping through , we have the variable assignmet line \verb | <var:H4> := <var:H4> * <nat:5> ; | . This line redefines the condition $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H2> = <nat:1> * <var:f> ^ <nat:2> \land <var:H3> = <nat:1> * <var:f> ^ <nat:3> \land <var:H4> = <var:f> ^ <nat:4> \land <var:H0> = <nat:6> \} $ to the condition $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H2> = <nat:1> * <var:f> ^ <nat:2> \land <var:H3> = <nat:1> * <var:f> ^ <nat:3> \land <var:H4> = <nat:5> * <var:f> ^ <nat:4> \land <var:H0> = <nat:6> \} $ . Going to the next step , we have the environment update statement \verb | <var:r> := <var:H4> | . This line takes the condition $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H2> = <nat:1> * <var:f> ^ <nat:2> \land <var:H3> = <nat:1> * <var:f> ^ <nat:3> \land <var:H4> = <nat:5> * <var:f> ^ <nat:4> \land <var:H0> = <nat:6> \} $ to $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H2> = <nat:1> * <var:f> ^ <nat:2> \land <var:H3> = <nat:1> * <var:f> ^ <nat:3> \land <var:H0> = <nat:6> \land <var:r> = <nat:5> * <var:f> ^ <nat:4> \} $ . This is sound with the assignment rule given by Hoare techniques . Keeping momentum , we have the environment update command binding $ <var:r> + <var:H3$ to $ <var:r>$ . This transfers the precondition $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H2> = <nat:1> * <var:f> ^ <nat:2> \land <var:H3> = <nat:1> * <var:f> ^ <nat:3> \land <var:H0> = <nat:6> \land <var:r> = <nat:5> * <var:f> ^ <nat:4> \} $ to the postcondition $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H2> = <nat:1> * <var:f> ^ <nat:2> \land <var:H0> = <nat:6> \land <var:r> = <nat:5> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> \} $ . This is shown with the assignment rule obtained from usual Hoare logic . Considering the following line of code found in our list of instructions , the statement \verb | <var:r> := <var:r> + <var:H2> | . This redefines the precondition $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H2> = <nat:1> * <var:f> ^ <nat:2> \land <var:H0> = <nat:6> \land <var:r> = <nat:5> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> \} $ toward the postcondition $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H0> = <nat:6> \land <var:r> = <nat:5> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> \} $ . Stepping forward , we see the variable assignmet command yielding $ <var:r> + <var:H1$ toward $ <var:r>$ . This takes $ \{ <var:R> = <var:f> \land <var:H1> = <nat:6> * <var:f> \land <var:H0> = <nat:6> \land <var:r> = <nat:5> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> \} $ toward the condition $ \{ <var:R> = <var:f> \land <var:H0> = <nat:6> \land <var:r> = <nat:5> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:6> * <var:f> \} $ . This is rigorously given through the assignment scheme in typical Hoare logic . Advancing to the next statement seen in our set of instructions , we have the variable binding command \verb | <var:r> := <var:r> + <var:H0> | . This takes $ \{ <var:R> = <var:f> \land <var:H0> = <nat:6> \land <var:r> = <nat:5> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:6> * <var:f> \} $ into the condition $ \{ <var:R> = <var:f> \land <var:r> = <nat:5> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:6> * <var:f> + <nat:6> \} $ . This is shown with the assignment inference rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <var:H4> : string := " <var:H4> " . Definition <def:poly> := <var:H1> := <var:R> ; <var:H2> := <var:H1> * <var:R> ; <var:H3> := <var:H2> * <var:R> ; <var:H4> := <var:H3> * <var:R> ; <var:H0> := <nat:6> ; <var:H1> := <var:H1> * <nat:6> ; <var:H2> := <var:H2> * <nat:1> ; <var:H3> := <var:H3> * <nat:1> ; <var:H4> := <var:H4> * <nat:5> ; <var:r> := <var:H4> <var:r> := <var:r> + <var:H3> <var:r> := <var:r> + <var:H2> <var:r> := <var:r> + <var:H1> <var:r> := <var:r> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:R> = <var:f> }} <def:poly> {{ <var:r> = <nat:5> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:6> * <var:f> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:H1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:H1> = <var:f> /\ <var:H2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:H1> = <var:f> /\ <var:H2> = <var:f> ^ <nat:2> /\ <var:H3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:H1> = <var:f> /\ <var:H2> = <var:f> ^ <nat:2> /\ <var:H3> = <var:f> ^ <nat:3> /\ <var:H4> = <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:H1> = <var:f> /\ <var:H2> = <var:f> ^ <nat:2> /\ <var:H3> = <var:f> ^ <nat:3> /\ <var:H4> = <var:f> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:H1> = <nat:6> * <var:f> /\ <var:H2> = <var:f> ^ <nat:2> /\ <var:H3> = <var:f> ^ <nat:3> /\ <var:H4> = <var:f> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:H1> = <nat:6> * <var:f> /\ <var:H2> = <nat:1> * <var:f> ^ <nat:2> /\ <var:H3> = <var:f> ^ <nat:3> /\ <var:H4> = <var:f> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:H1> = <nat:6> * <var:f> /\ <var:H2> = <nat:1> * <var:f> ^ <nat:2> /\ <var:H3> = <nat:1> * <var:f> ^ <nat:3> /\ <var:H4> = <var:f> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:H1> = <nat:6> * <var:f> /\ <var:H2> = <nat:1> * <var:f> ^ <nat:2> /\ <var:H3> = <nat:1> * <var:f> ^ <nat:3> /\ <var:H4> = <nat:5> * <var:f> ^ <nat:4> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:H1> = <nat:6> * <var:f> /\ <var:H2> = <nat:1> * <var:f> ^ <nat:2> /\ <var:H3> = <nat:1> * <var:f> ^ <nat:3> /\ <var:H0> = <nat:6> /\ <var:r> = <nat:5> * <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:H1> = <nat:6> * <var:f> /\ <var:H2> = <nat:1> * <var:f> ^ <nat:2> /\ <var:H0> = <nat:6> /\ <var:r> = <nat:5> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:H1> = <nat:6> * <var:f> /\ <var:H0> = <nat:6> /\ <var:r> = <nat:5> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:H0> = <nat:6> /\ <var:r> = <nat:5> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:6> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:f> /\ <var:r> = <nat:5> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:6> * <var:f> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 