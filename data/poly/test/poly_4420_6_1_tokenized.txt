\begin{document} \begin{theorem} Take the following code in \emph{Imp} as follows \begin{verbatim} <var:t1> := <var:x> ; <var:t2> := <var:t1> * <var:x> ; <var:t0> := <nat:3> ; <var:t2> := <var:t2> * <nat:2> ; <var:l> := <var:t2> <var:l> := <var:l> + <var:t0> \end{verbatim} Allowing that $ <var:x> = <var:q> $ before the evaluation of our set of commands it follows that we have $ <var:l> = <nat:2> \cdot <var:q> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:q> \} \\ <var:t1> := <var:x> ; \\ \{ <var:x> = <var:q> \land <var:t1> = <var:q> \} \\ <var:t2> := <var:t1> * <var:x> ; \\ \{ <var:x> = <var:q> \land <var:t1> = <var:q> \land <var:t2> = <var:q> ^ <nat:2> \} \\ <var:t0> := <nat:3> ; \\ \{ <var:x> = <var:q> \land <var:t1> = <var:q> \land <var:t2> = <var:q> ^ <nat:2> \land <var:t0> = <nat:3> \} \\ <var:t2> := <var:t2> * <nat:2> ; \\ \{ <var:x> = <var:q> \land <var:t1> = <var:q> \land <var:t2> = <nat:2> * <var:q> ^ <nat:2> \land <var:t0> = <nat:3> \} \\ <var:l> := <var:t2> \\ \{ <var:x> = <var:q> \land <var:t1> = <var:q> \land <var:t0> = <nat:3> \land <var:l> = <nat:2> * <var:q> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:t0> \\ \{ <var:x> = <var:q> \land <var:l> = <nat:2> * <var:q> ^ <nat:2> + <nat:3> \} \end{eqnarray} Applying usual Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:x> = <var:q> }} <var:t1> := <var:x> ; <var:t2> := <var:t1> * <var:x> ; <var:t0> := <nat:3> ; <var:t2> := <var:t2> * <nat:2> ; <var:l> := <var:t2> <var:l> := <var:l> + <var:t0> {{ <var:l> = <nat:2> * <var:q> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:q> /\ <var:t1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:q> /\ <var:t1> = <var:q> /\ <var:t2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:q> /\ <var:t1> = <var:q> /\ <var:t2> = <var:q> ^ <nat:2> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:q> /\ <var:t1> = <var:q> /\ <var:t2> = <nat:2> * <var:q> ^ <nat:2> /\ <var:t0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:q> /\ <var:t1> = <var:q> /\ <var:t0> = <nat:3> /\ <var:l> = <nat:2> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:q> /\ <var:l> = <nat:2> * <var:q> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 