\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as \begin{verbatim} <var:i1> := <var:W> ; <var:i2> := <var:i1> * <var:W> ; <var:i0> := <nat:9> ; <var:i1> := <var:i1> * <nat:9> ; <var:i2> := <var:i2> * <nat:2> ; <var:Q> := <var:i2> <var:Q> := <var:Q> + <var:i1> <var:Q> := <var:Q> + <var:i0> \end{verbatim} Given that we have $ <var:W> = <var:Z> $ ahead of running this segment of code it follows that we see $ <var:Q> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:9> \cdot <var:Z> + <nat:9> $ . \end{theorem} \begin{proof} Applying standard Hoare logic results in : \begin{eqnarray} \{ <var:W> = <var:Z> \} \\ <var:i1> := <var:W> ; \\ \{ <var:W> = <var:Z> \land <var:i1> = <var:Z> \} \\ <var:i2> := <var:i1> * <var:W> ; \\ \{ <var:W> = <var:Z> \land <var:i1> = <var:Z> \land <var:i2> = <var:Z> ^ <nat:2> \} \\ <var:i0> := <nat:9> ; \\ \{ <var:W> = <var:Z> \land <var:i1> = <var:Z> \land <var:i2> = <var:Z> ^ <nat:2> \land <var:i0> = <nat:9> \} \\ <var:i1> := <var:i1> * <nat:9> ; \\ \{ <var:W> = <var:Z> \land <var:i1> = <nat:9> \cdot <var:Z> \land <var:i2> = <var:Z> ^ <nat:2> \land <var:i0> = <nat:9> \} \\ <var:i2> := <var:i2> * <nat:2> ; \\ \{ <var:W> = <var:Z> \land <var:i1> = <nat:9> \cdot <var:Z> \land <var:i2> = <nat:2> \cdot <var:Z> ^ <nat:2> \land <var:i0> = <nat:9> \} \\ <var:Q> := <var:i2> \\ \{ <var:W> = <var:Z> \land <var:i1> = <nat:9> \cdot <var:Z> \land <var:i0> = <nat:9> \land <var:Q> = <nat:2> \cdot <var:Z> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:i1> \\ \{ <var:W> = <var:Z> \land <var:i0> = <nat:9> \land <var:Q> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:9> \cdot <var:Z> \} \\ <var:Q> := <var:Q> + <var:i0> \\ \{ <var:W> = <var:Z> \land <var:Q> = <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:9> \cdot <var:Z> + <nat:9> \} \end{eqnarray} Given the above , our code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:W> = <var:Z> }} <var:i1> := <var:W> ; <var:i2> := <var:i1> * <var:W> ; <var:i0> := <nat:9> ; <var:i1> := <var:i1> * <nat:9> ; <var:i2> := <var:i2> * <nat:2> ; <var:Q> := <var:i2> <var:Q> := <var:Q> + <var:i1> <var:Q> := <var:Q> + <var:i0> {{ <var:Q> = <nat:2> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:i1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:i1> = <var:Z> /\ <var:i2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:i1> = <var:Z> /\ <var:i2> = <var:Z> ^ <nat:2> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:i1> = <nat:9> * <var:Z> /\ <var:i2> = <var:Z> ^ <nat:2> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:i1> = <nat:9> * <var:Z> /\ <var:i2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:i1> = <nat:9> * <var:Z> /\ <var:i0> = <nat:9> /\ <var:Q> = <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:i0> = <nat:9> /\ <var:Q> = <nat:2> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:Z> /\ <var:Q> = <nat:2> * <var:Z> ^ <nat:2> + <nat:9> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 