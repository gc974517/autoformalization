\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:8> ; <var:u> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> in \emph{Imp} . Allow $ <var:E> = <var:y> $ , letting $ <var:y> \in \mathbb{Z}^+ $ , before executing our set of commands , it holds that we see $ <var:u> = <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for our list of commands is clear through standard Hoare techniques . Keeping momentum , the binding command giving $ <nat:8> $ as $ <var:d0>$ . This forwards the precondition $ \{ <var:E> = <var:y> \} $ into the condition $ \{ <var:E> = <var:y> \land <var:d0> = <nat:8> \} $ . This is ensured with the assignment rule from standard Hoare techniques . Moving on to the upcoming piece of code contained in our set of instructions , the variable binding line letting $ <var:d0$ as $ <var:u>$ . This code forwards the precondition $ \{ <var:E> = <var:y> \land <var:d0> = <nat:8> \} $ to the postcondition $ \{ <var:E> = <var:y> \land <var:u> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:8> ; <var:u> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:E> = <var:y> }} <def:poly> {{ <var:u> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:y> /\ <var:u> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 