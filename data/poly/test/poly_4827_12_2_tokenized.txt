\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} : \begin{verbatim} <var:c> := <nat:2> ; <var:c> := <nat:3> + <var:c> * <var:m> ; <var:c> := <nat:4> + <var:c> * <var:m> ; <var:c> := <var:c> * <var:m> ; <var:c> := <nat:4> + <var:c> * <var:m> ; <var:c> := <nat:4> + <var:c> * <var:m> ; <var:c> := <nat:4> + <var:c> * <var:m> ; <var:c> := <var:c> * <var:m> ; <var:c> := <nat:2> + <var:c> * <var:m> ; <var:c> := <nat:1> + <var:c> * <var:m> ; <var:c> := <nat:3> + <var:c> * <var:m> ; <var:c> := <nat:1> + <var:c> * <var:m> \end{verbatim} Allow it to be that $ <var:m> = <var:h> $ --- given any positive numbers $ <var:h> $ --- prior to interpreting this set of instructions it holds that $ <var:c> = <nat:2> \cdot <var:h> ^ <nat:11> + <nat:3> \cdot <var:h> ^ <nat:10> + <nat:4> \cdot <var:h> ^ <nat:9> + <nat:4> \cdot <var:h> ^ <nat:7> + <nat:4> \cdot <var:h> ^ <nat:6> + <nat:4> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:1> $ when segment of code executes . \end{theorem} \begin{proof} Utilizing Hoare techniques gives : \begin{eqnarray} \{ <var:m> = <var:h> \} \\ <var:c> := <nat:2> ; \\ \{ <var:m> = <var:h> \land <var:c> = <nat:2> \} \\ <var:c> := <nat:3> + <var:c> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:c> = <nat:2> * <var:h> + <nat:3> \} \\ <var:c> := <nat:4> + <var:c> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:c> = <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> \} \\ <var:c> := <var:c> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:c> = <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + \} \\ <var:c> := <nat:4> + <var:c> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:c> = <nat:2> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:4> \} \\ <var:c> := <nat:4> + <var:c> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:c> = <nat:2> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:4> * <var:h> + <nat:4> \} \\ <var:c> := <nat:4> + <var:c> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:c> = <nat:2> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:4> \} \\ <var:c> := <var:c> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:c> = <nat:2> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + \} \\ <var:c> := <nat:2> + <var:c> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:c> = <nat:2> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> \} \\ <var:c> := <nat:1> + <var:c> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:c> = <nat:2> * <var:h> ^ <nat:9> + <nat:3> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> + <nat:1> \} \\ <var:c> := <nat:3> + <var:c> * <var:m> ; \\ \{ <var:m> = <var:h> \land <var:c> = <nat:2> * <var:h> ^ <nat:10> + <nat:3> * <var:h> ^ <nat:9> + <nat:4> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:3> \} \\ <var:c> := <nat:1> + <var:c> * <var:m> \\ \{ <var:m> = <var:h> \land <var:c> = <nat:2> * <var:h> ^ <nat:11> + <nat:3> * <var:h> ^ <nat:10> + <nat:4> * <var:h> ^ <nat:9> + <nat:4> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> \} \end{eqnarray} Considering the above , the program has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:m> = <var:h> }} <var:c> := <nat:2> ; <var:c> := <nat:3> + <var:c> * <var:m> ; <var:c> := <nat:4> + <var:c> * <var:m> ; <var:c> := <var:c> * <var:m> ; <var:c> := <nat:4> + <var:c> * <var:m> ; <var:c> := <nat:4> + <var:c> * <var:m> ; <var:c> := <nat:4> + <var:c> * <var:m> ; <var:c> := <var:c> * <var:m> ; <var:c> := <nat:2> + <var:c> * <var:m> ; <var:c> := <nat:1> + <var:c> * <var:m> ; <var:c> := <nat:3> + <var:c> * <var:m> ; <var:c> := <nat:1> + <var:c> * <var:m> {{ <var:c> = <nat:2> * <var:h> ^ <nat:11> + <nat:3> * <var:h> ^ <nat:10> + <nat:4> * <var:h> ^ <nat:9> + <nat:4> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:c> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:c> = <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:c> = <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:c> = <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:c> = <nat:2> * <var:h> ^ <nat:4> + <nat:3> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:c> = <nat:2> * <var:h> ^ <nat:5> + <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:4> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:c> = <nat:2> * <var:h> ^ <nat:6> + <nat:3> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:c> = <nat:2> * <var:h> ^ <nat:7> + <nat:3> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:c> = <nat:2> * <var:h> ^ <nat:8> + <nat:3> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:c> = <nat:2> * <var:h> ^ <nat:9> + <nat:3> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:c> = <nat:2> * <var:h> ^ <nat:10> + <nat:3> * <var:h> ^ <nat:9> + <nat:4> * <var:h> ^ <nat:8> + <nat:4> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:h> /\ <var:c> = <nat:2> * <var:h> ^ <nat:11> + <nat:3> * <var:h> ^ <nat:10> + <nat:4> * <var:h> ^ <nat:9> + <nat:4> * <var:h> ^ <nat:7> + <nat:4> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 