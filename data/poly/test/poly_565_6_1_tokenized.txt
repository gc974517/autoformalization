\begin{document} \begin{definition} Take a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:E1> := <var:r> ; <var:E2> := <var:E1> * <var:r> ; <var:E0> := <nat:3> ; <var:E2> := <var:E2> * <nat:2> ; <var:e> := <var:E2> <var:e> := <var:e> + <var:E0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:r> = <var:B> $ before interpreting the set of instructions , it holds that we see $ <var:e> = <nat:2> * <var:B> ^ <nat:2> + <nat:3> $ when program is done . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions can be accomplished using typical Hoare logic . Considering the upcoming pieces of code found in the list of commands , we have \begin{verbatim} { <var:r> = <var:B> } <var:E1> := <var:r> { <var:r> = <var:B> \land <var:E1> = <var:B> } { <var:r> = <var:B> \land <var:E1> = <var:B> } <var:E2> := <var:E1> * <var:r> { <var:r> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> } { <var:r> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> } <var:E0> := <nat:3> { <var:r> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> \land <var:E0> = <nat:3> } { <var:r> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> \land <var:E0> = <nat:3> } <var:E2> := <var:E2> * <nat:2> { <var:r> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <nat:2> * <var:B> ^ <nat:2> \land <var:E0> = <nat:3> } \end{verbatim} This is shown through the environment update law obtained from typical Hoare logic . Moving forward to the following steps found in the set of commands , \begin{verbatim} { <var:r> = <var:B> } <var:E1> := <var:r> { <var:r> = <var:B> \land <var:E1> = <var:B> } { <var:r> = <var:B> \land <var:E1> = <var:B> } <var:E2> := <var:E1> * <var:r> { <var:r> = <var:B> \land <var:E1> = <var:B> \land <var:E2> = <var:B> ^ <nat:2> } \end{verbatim} This is guaranteed with the variable binding rule defined in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Definition <def:poly> := <var:E1> := <var:r> ; <var:E2> := <var:E1> * <var:r> ; <var:E0> := <nat:3> ; <var:E2> := <var:E2> * <nat:2> ; <var:e> := <var:E2> <var:e> := <var:e> + <var:E0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:r> = <var:B> }} <def:poly> {{ <var:e> = <nat:2> * <var:B> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:E1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <var:B> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:E1> = <var:B> /\ <var:E2> = <nat:2> * <var:B> ^ <nat:2> /\ <var:E0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:E1> = <var:B> /\ <var:E0> = <nat:3> /\ <var:e> = <nat:2> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:e> = <nat:2> * <var:B> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 