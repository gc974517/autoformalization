\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:D1> := <var:v> ; <var:D2> := <var:D1> * <var:v> ; <var:D0> := <nat:6> ; <var:D2> := <var:D2> * <nat:1> ; <var:K> := <var:D2> <var:K> := <var:K> + <var:D0> \end{verbatim} Allow $ <var:v> = <var:M> $ before the execution of the code , it holds that we see $ <var:K> = <nat:1> \times <var:M> ^ <nat:2> + <nat:6> $ when list of commands executes . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions can be done using typical Hoare techniques . Taking another step toward the upcoming statement contained in our set of commands , we have the environment update code \verb | <var:D1> := <var:v> ; | . This redefines the precondition $ \{ <var:v> = <var:M> \} $ as the condition $ \{ <var:v> = <var:M> \land <var:D1> = <var:M> \} $ . This is shown to be logically sound by the assignment inference rule found in Hoare reasoning . Considering the following piece of code seen in the series of commands , we have the assignment line assigning $ <var:D1> * <var:v> $ as $ <var:D2>$ . This forwards the condition $ \{ <var:v> = <var:M> \land <var:D1> = <var:M> \} $ toward the postcondition $ \{ <var:v> = <var:M> \land <var:D1> = <var:M> \land <var:D2> = <var:M> ^ <nat:2> \} $ . Going to the next step , the environment update statement giving $ <nat:6> $ as $ <var:D0>$ . This statement takes the condition $ \{ <var:v> = <var:M> \land <var:D1> = <var:M> \land <var:D2> = <var:M> ^ <nat:2> \} $ to $ \{ <var:v> = <var:M> \land <var:D1> = <var:M> \land <var:D2> = <var:M> ^ <nat:2> \land <var:D0> = <nat:6> \} $ . This is guaranteed with the assignment scheme defined by typical Hoare techniques . Honing in on the upcoming line found in the list of commands , the variable update code letting $ <var:D2> * <nat:1> $ as $ <var:D2>$ . This transfers the condition $ \{ <var:v> = <var:M> \land <var:D1> = <var:M> \land <var:D2> = <var:M> ^ <nat:2> \land <var:D0> = <nat:6> \} $ as $ \{ <var:v> = <var:M> \land <var:D1> = <var:M> \land <var:D2> = <nat:1> \times <var:M> ^ <nat:2> \land <var:D0> = <nat:6> \} $ . This is rigorously given through the assignment law defined by usual Hoare techniques . Focusing on the following step contained in the code segment , we have the variable update statement yielding $ <var:D2$ as $ <var:K>$ . This advances the condition $ \{ <var:v> = <var:M> \land <var:D1> = <var:M> \land <var:D2> = <nat:1> \times <var:M> ^ <nat:2> \land <var:D0> = <nat:6> \} $ as the condition $ \{ <var:v> = <var:M> \land <var:D1> = <var:M> \land <var:D0> = <nat:6> \land <var:K> = <nat:1> \times <var:M> ^ <nat:2> \} $ . Stepping forward , we see the environment update command \verb | <var:K> := <var:K> + <var:D0> | . This redefines $ \{ <var:v> = <var:M> \land <var:D1> = <var:M> \land <var:D0> = <nat:6> \land <var:K> = <nat:1> \times <var:M> ^ <nat:2> \} $ into $ \{ <var:v> = <var:M> \land <var:K> = <nat:1> \times <var:M> ^ <nat:2> + <nat:6> \} $ . This is guaranteed with the assignment law in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:v> = <var:M> }} <var:D1> := <var:v> ; <var:D2> := <var:D1> * <var:v> ; <var:D0> := <nat:6> ; <var:D2> := <var:D2> * <nat:1> ; <var:K> := <var:D2> <var:K> := <var:K> + <var:D0> {{ <var:K> = <nat:1> * <var:M> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:D1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:D1> = <var:M> /\ <var:D2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:D1> = <var:M> /\ <var:D2> = <var:M> ^ <nat:2> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:D1> = <var:M> /\ <var:D2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:D1> = <var:M> /\ <var:D0> = <nat:6> /\ <var:K> = <nat:1> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:K> = <nat:1> * <var:M> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 