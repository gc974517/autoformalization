\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:F> ; <var:R2> := <var:R1> * <var:F> ; <var:R3> := <var:R2> * <var:F> ; <var:R4> := <var:R3> * <var:F> ; <var:R0> := <nat:9> ; <var:R1> := <var:R1> * <nat:2> ; <var:R2> := <var:R2> * <nat:8> ; <var:R3> := <var:R3> * <nat:8> ; <var:R4> := <var:R4> * <nat:4> ; <var:U> := <var:R4> <var:U> := <var:U> + <var:R3> <var:U> := <var:U> + <var:R2> <var:U> := <var:U> + <var:R1> <var:U> := <var:U> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:F> = <var:q> $ ( given positive coefficients $ <var:q> $ ) prior to the execution of this set of instructions , it holds that $ <var:U> = <nat:4> \times <var:q> ^ <nat:4> + <nat:8> \times <var:q> ^ <nat:3> + <nat:8> \times <var:q> ^ <nat:2> + <nat:2> \times <var:q> + <nat:9> $ . \end{theorem} \begin{proof} The proof of our code can be demonstrated by Hoare techniques . Advancing on , we see the binding line \verb | <var:R1> := <var:F> ; | . This forwards the condition $ \{ <var:F> = <var:q> \} $ to $ \{ <var:F> = <var:q> \land <var:R1> = <var:q> \} $ . Moving forward to the upcoming line found in the series of instructions , we see the variable assignmet command binding $ <var:R1> * <var:F> $ to $ <var:R2>$ . This forwards the condition $ \{ <var:F> = <var:q> \land <var:R1> = <var:q> \} $ as the postcondition $ \{ <var:F> = <var:q> \land <var:R1> = <var:q> \land <var:R2> = <var:q> ^ <nat:2> \} $ . This is ensured by the assignment inference rule found in Hoare logic . Next , we have the assignment statement defining $ <var:R2> * <var:F> $ as $ <var:R3>$ . This statement advances the precondition $ \{ <var:F> = <var:q> \land <var:R1> = <var:q> \land <var:R2> = <var:q> ^ <nat:2> \} $ to $ \{ <var:F> = <var:q> \land <var:R1> = <var:q> \land <var:R2> = <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \} $ . This is given using the assignment inference rule given by Hoare reasoning . Moving on to the upcoming line seen in our code segment , we have the binding code \verb | <var:R4> := <var:R3> * <var:F> ; | . This takes the condition $ \{ <var:F> = <var:q> \land <var:R1> = <var:q> \land <var:R2> = <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \} $ into the postcondition $ \{ <var:F> = <var:q> \land <var:R1> = <var:q> \land <var:R2> = <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \land <var:R4> = <var:q> ^ <nat:4> \} $ . This is sound through the assignment inference rule defined by usual Hoare reasoning . Moving on to the proceeding step in the list of instructions , we see the variable assignmet statement defining $ <nat:9> $ to $ <var:R0>$ . This code redefines the condition $ \{ <var:F> = <var:q> \land <var:R1> = <var:q> \land <var:R2> = <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \land <var:R4> = <var:q> ^ <nat:4> \} $ toward the condition $ \{ <var:F> = <var:q> \land <var:R1> = <var:q> \land <var:R2> = <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \land <var:R4> = <var:q> ^ <nat:4> \land <var:R0> = <nat:9> \} $ . Advancing to the next step , the variable update line \verb | <var:R1> := <var:R1> * <nat:2> ; | . This takes $ \{ <var:F> = <var:q> \land <var:R1> = <var:q> \land <var:R2> = <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \land <var:R4> = <var:q> ^ <nat:4> \land <var:R0> = <nat:9> \} $ as $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R2> = <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \land <var:R4> = <var:q> ^ <nat:4> \land <var:R0> = <nat:9> \} $ . This is ensured using the assignment law found in typical Hoare logic . Looking at the upcoming command contained in our code segment , we see the binding command defining $ <var:R2> * <nat:8> $ to $ <var:R2>$ . This statement takes the condition $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R2> = <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \land <var:R4> = <var:q> ^ <nat:4> \land <var:R0> = <nat:9> \} $ to the condition $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \land <var:R4> = <var:q> ^ <nat:4> \land <var:R0> = <nat:9> \} $ . Looking at the next line of code seen in our code , the environment update code yielding $ <var:R3> * <nat:8> $ into $ <var:R3>$ . This statement takes the condition $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:R3> = <var:q> ^ <nat:3> \land <var:R4> = <var:q> ^ <nat:4> \land <var:R0> = <nat:9> \} $ to $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:R3> = <nat:8> \cdot <var:q> ^ <nat:3> \land <var:R4> = <var:q> ^ <nat:4> \land <var:R0> = <nat:9> \} $ . This is shown using the assignment scheme of standard Hoare techniques . Immediately following , we see the code \verb | <var:R4> := <var:R4> * <nat:4> ; | . This transfers the condition $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:R3> = <nat:8> \cdot <var:q> ^ <nat:3> \land <var:R4> = <var:q> ^ <nat:4> \land <var:R0> = <nat:9> \} $ as $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:R3> = <nat:8> \cdot <var:q> ^ <nat:3> \land <var:R4> = <nat:4> \cdot <var:q> ^ <nat:4> \land <var:R0> = <nat:9> \} $ . This is shown with the assignment scheme given by usual Hoare reasoning . After , the environment update line letting $ <var:R4$ toward $ <var:U>$ . This line redefines the condition $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:R3> = <nat:8> \cdot <var:q> ^ <nat:3> \land <var:R4> = <nat:4> \cdot <var:q> ^ <nat:4> \land <var:R0> = <nat:9> \} $ into the postcondition $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:R3> = <nat:8> \cdot <var:q> ^ <nat:3> \land <var:R0> = <nat:9> \land <var:U> = <nat:4> \cdot <var:q> ^ <nat:4> \} $ . Paying attention to the proceeding statement seen in our code , the command \verb | <var:U> := <var:U> + <var:R3> | . This code redefines the condition $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:R3> = <nat:8> \cdot <var:q> ^ <nat:3> \land <var:R0> = <nat:9> \land <var:U> = <nat:4> \cdot <var:q> ^ <nat:4> \} $ as the condition $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:R0> = <nat:9> \land <var:U> = <nat:4> \cdot <var:q> ^ <nat:4> + <nat:8> \cdot <var:q> ^ <nat:3> \} $ . Focusing on the subsequent piece of code contained in our program , we have the variable binding line \verb | <var:U> := <var:U> + <var:R2> | . This statement transfers the precondition $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R2> = <nat:8> \cdot <var:q> ^ <nat:2> \land <var:R0> = <nat:9> \land <var:U> = <nat:4> \cdot <var:q> ^ <nat:4> + <nat:8> \cdot <var:q> ^ <nat:3> \} $ toward the postcondition $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R0> = <nat:9> \land <var:U> = <nat:4> \cdot <var:q> ^ <nat:4> + <nat:8> \cdot <var:q> ^ <nat:3> + <nat:8> \cdot <var:q> ^ <nat:2> \} $ . This is deduced using the assignment law from Hoare reasoning . Following , we have the code binding $ <var:U> + <var:R1$ into $ <var:U>$ . This moves the condition $ \{ <var:F> = <var:q> \land <var:R1> = <nat:2> \cdot <var:q> \land <var:R0> = <nat:9> \land <var:U> = <nat:4> \cdot <var:q> ^ <nat:4> + <nat:8> \cdot <var:q> ^ <nat:3> + <nat:8> \cdot <var:q> ^ <nat:2> \} $ toward the postcondition $ \{ <var:F> = <var:q> \land <var:R0> = <nat:9> \land <var:U> = <nat:4> \cdot <var:q> ^ <nat:4> + <nat:8> \cdot <var:q> ^ <nat:3> + <nat:8> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> \} $ . Next , the statement yielding $ <var:U> + <var:R0$ toward $ <var:U>$ . This moves $ \{ <var:F> = <var:q> \land <var:R0> = <nat:9> \land <var:U> = <nat:4> \cdot <var:q> ^ <nat:4> + <nat:8> \cdot <var:q> ^ <nat:3> + <nat:8> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> \} $ into the condition $ \{ <var:F> = <var:q> \land <var:U> = <nat:4> \cdot <var:q> ^ <nat:4> + <nat:8> \cdot <var:q> ^ <nat:3> + <nat:8> \cdot <var:q> ^ <nat:2> + <nat:2> \cdot <var:q> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <var:R4> : string := " <var:R4> " . Definition <def:poly> := <var:R1> := <var:F> ; <var:R2> := <var:R1> * <var:F> ; <var:R3> := <var:R2> * <var:F> ; <var:R4> := <var:R3> * <var:F> ; <var:R0> := <nat:9> ; <var:R1> := <var:R1> * <nat:2> ; <var:R2> := <var:R2> * <nat:8> ; <var:R3> := <var:R3> * <nat:8> ; <var:R4> := <var:R4> * <nat:4> ; <var:U> := <var:R4> <var:U> := <var:U> + <var:R3> <var:U> := <var:U> + <var:R2> <var:U> := <var:U> + <var:R1> <var:U> := <var:U> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:F> = <var:q> }} <def:poly> {{ <var:U> = <nat:4> * <var:q> ^ <nat:4> + <nat:8> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R1> = <var:q> /\ <var:R2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R1> = <var:q> /\ <var:R2> = <var:q> ^ <nat:2> /\ <var:R3> = <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R1> = <var:q> /\ <var:R2> = <var:q> ^ <nat:2> /\ <var:R3> = <var:q> ^ <nat:3> /\ <var:R4> = <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R1> = <var:q> /\ <var:R2> = <var:q> ^ <nat:2> /\ <var:R3> = <var:q> ^ <nat:3> /\ <var:R4> = <var:q> ^ <nat:4> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R1> = <nat:2> * <var:q> /\ <var:R2> = <var:q> ^ <nat:2> /\ <var:R3> = <var:q> ^ <nat:3> /\ <var:R4> = <var:q> ^ <nat:4> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R1> = <nat:2> * <var:q> /\ <var:R2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:R3> = <var:q> ^ <nat:3> /\ <var:R4> = <var:q> ^ <nat:4> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R1> = <nat:2> * <var:q> /\ <var:R2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:R3> = <nat:8> * <var:q> ^ <nat:3> /\ <var:R4> = <var:q> ^ <nat:4> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R1> = <nat:2> * <var:q> /\ <var:R2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:R3> = <nat:8> * <var:q> ^ <nat:3> /\ <var:R4> = <nat:4> * <var:q> ^ <nat:4> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R1> = <nat:2> * <var:q> /\ <var:R2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:R3> = <nat:8> * <var:q> ^ <nat:3> /\ <var:R0> = <nat:9> /\ <var:U> = <nat:4> * <var:q> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R1> = <nat:2> * <var:q> /\ <var:R2> = <nat:8> * <var:q> ^ <nat:2> /\ <var:R0> = <nat:9> /\ <var:U> = <nat:4> * <var:q> ^ <nat:4> + <nat:8> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R1> = <nat:2> * <var:q> /\ <var:R0> = <nat:9> /\ <var:U> = <nat:4> * <var:q> ^ <nat:4> + <nat:8> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:R0> = <nat:9> /\ <var:U> = <nat:4> * <var:q> ^ <nat:4> + <nat:8> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> + <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:q> /\ <var:U> = <nat:4> * <var:q> ^ <nat:4> + <nat:8> * <var:q> ^ <nat:3> + <nat:8> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 