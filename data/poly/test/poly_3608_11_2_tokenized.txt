\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x> := <nat:1> ; <var:x> := <nat:2> + <var:x> * <var:Y> ; <var:x> := <nat:4> + <var:x> * <var:Y> ; <var:x> := <nat:1> + <var:x> * <var:Y> ; <var:x> := <nat:1> + <var:x> * <var:Y> ; <var:x> := <nat:4> + <var:x> * <var:Y> ; <var:x> := <nat:3> + <var:x> * <var:Y> ; <var:x> := <nat:2> + <var:x> * <var:Y> ; <var:x> := <nat:2> + <var:x> * <var:Y> ; <var:x> := <nat:1> + <var:x> * <var:Y> ; <var:x> := <nat:2> + <var:x> * <var:Y> \end{verbatim} \end{definition} \begin{theorem} Take the following set of instructions <def:poly> in \emph{Imp} . Allowing that $ <var:Y> = <var:Q> $ prior to the execution of the series of commands then $ <var:x> = <nat:1> \cdot <var:Q> ^ <nat:10> + <nat:2> \cdot <var:Q> ^ <nat:9> + <nat:4> \cdot <var:Q> ^ <nat:8> + <nat:1> \cdot <var:Q> ^ <nat:7> + <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:3> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:2> $ . \end{theorem} \begin{proof} The argument for our code segment is given by standard Hoare logic . Considering the following pieces of code in the segment of code , we have \verb | { <var:Y> = <var:Q> } <var:x> := <nat:1> { <var:Y> = <var:Q> \land <var:x> = <nat:1> } | , \verb | { <var:Y> = <var:Q> \land <var:x> = <nat:1> } <var:x> := <nat:2> + <var:x> * <var:Y> { <var:Y> = <var:Q> \land <var:x> = <nat:1> \times <var:Q> + <nat:2> } | and \verb | { <var:Y> = <var:Q> \land <var:x> = <nat:1> \times <var:Q> + <nat:2> } <var:x> := <nat:4> + <var:x> * <var:Y> { <var:Y> = <var:Q> \land <var:x> = <nat:1> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:4> } | . Shifting focus toward the subsequent pieces of code seen in our set of commands , we have \verb | { <var:Y> = <var:Q> } <var:x> := <nat:1> { <var:Y> = <var:Q> \land <var:x> = <nat:1> } | and \verb | { <var:Y> = <var:Q> \land <var:x> = <nat:1> } <var:x> := <nat:2> + <var:x> * <var:Y> { <var:Y> = <var:Q> \land <var:x> = <nat:1> \times <var:Q> + <nat:2> } | . Taking another step toward the subsequent statements in our code , we see \verb | { <var:Y> = <var:Q> } <var:x> := <nat:1> { <var:Y> = <var:Q> \land <var:x> = <nat:1> } | , \verb | { <var:Y> = <var:Q> \land <var:x> = <nat:1> } <var:x> := <nat:2> + <var:x> * <var:Y> { <var:Y> = <var:Q> \land <var:x> = <nat:1> \times <var:Q> + <nat:2> } | and \verb | { <var:Y> = <var:Q> \land <var:x> = <nat:1> \times <var:Q> + <nat:2> } <var:x> := <nat:4> + <var:x> * <var:Y> { <var:Y> = <var:Q> \land <var:x> = <nat:1> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:4> } | . This is sound through the environment update scheme of Hoare reasoning . Looking at the proceeding bits of codein the code segment , \verb | { <var:Y> = <var:Q> } <var:x> := <nat:1> { <var:Y> = <var:Q> \land <var:x> = <nat:1> } | , \verb | { <var:Y> = <var:Q> \land <var:x> = <nat:1> } <var:x> := <nat:2> + <var:x> * <var:Y> { <var:Y> = <var:Q> \land <var:x> = <nat:1> \times <var:Q> + <nat:2> } | and \verb | { <var:Y> = <var:Q> \land <var:x> = <nat:1> \times <var:Q> + <nat:2> } <var:x> := <nat:4> + <var:x> * <var:Y> { <var:Y> = <var:Q> \land <var:x> = <nat:1> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:4> } | . This is known to be sound using the binding scheme defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:x> := <nat:1> ; <var:x> := <nat:2> + <var:x> * <var:Y> ; <var:x> := <nat:4> + <var:x> * <var:Y> ; <var:x> := <nat:1> + <var:x> * <var:Y> ; <var:x> := <nat:1> + <var:x> * <var:Y> ; <var:x> := <nat:4> + <var:x> * <var:Y> ; <var:x> := <nat:3> + <var:x> * <var:Y> ; <var:x> := <nat:2> + <var:x> * <var:Y> ; <var:x> := <nat:2> + <var:x> * <var:Y> ; <var:x> := <nat:1> + <var:x> * <var:Y> ; <var:x> := <nat:2> + <var:x> * <var:Y> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:Y> = <var:Q> }} <def:poly> {{ <var:x> = <nat:1> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:4> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:x> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:x> = <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:x> = <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:x> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:x> = <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:x> = <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:x> = <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:x> = <nat:1> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:x> = <nat:1> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:x> = <nat:1> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:Q> /\ <var:x> = <nat:1> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:4> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 