\begin{document} \begin{theorem} Define the following set of instructions : \begin{verbatim} <var:G0> := <nat:4> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:F> ; <var:G2> := <nat:1> ; <var:G2> := <var:G2> * <var:F> ; <var:G2> := <var:G2> * <var:F> ; <var:N> := <var:G2> ; <var:N> := <var:N> + <var:G1> ; <var:N> := <var:N> + <var:G0> \end{verbatim} Allowing , given any integers $ <var:Z> $ , $ <var:F> = <var:Z> $ prior to the evaluation of the series of instructions , it must be that we have $ <var:N> = <nat:1> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:4> $ after program is done . \end{theorem} \begin{proof} The application of usual Hoare techniques yields : \begin{eqnarray} \{ <var:F> = <var:Z> \} \\ <var:G0> := <nat:4> ; \\ \{ <var:F> = <var:Z> \land <var:G0> = <nat:4> \} \\ <var:G1> := <nat:6> ; \\ \{ <var:F> = <var:Z> \land <var:G0> = <nat:4> \land <var:G1> = <nat:6> \} \end{eqnarray} Continuing running our list of instructions gives us : \begin{eqnarray} <var:G1> := <var:G1> * <var:F> ; \\ \{ <var:F> = <var:Z> \land <var:G0> = <nat:4> \land <var:G1> = <nat:6> \times <var:Z> \} \\ <var:G2> := <nat:1> ; \\ \{ <var:F> = <var:Z> \land <var:G0> = <nat:4> \land <var:G1> = <nat:6> \times <var:Z> \land <var:G2> = <nat:1> \} \\ <var:G2> := <var:G2> * <var:F> ; \\ \{ <var:F> = <var:Z> \land <var:G0> = <nat:4> \land <var:G1> = <nat:6> \times <var:Z> \land <var:G2> = <nat:1> \times <var:Z> \} \end{eqnarray} Allowing the evaluation of our series of instructions yields : \begin{eqnarray} <var:G2> := <var:G2> * <var:F> ; \\ \{ <var:F> = <var:Z> \land <var:G0> = <nat:4> \land <var:G1> = <nat:6> \times <var:Z> \land <var:G2> = <nat:1> \times <var:Z> ^ <nat:2> \} \\ <var:N> := <var:G2> ; \\ \{ <var:F> = <var:Z> \land <var:G0> = <nat:4> \land <var:G1> = <nat:6> \times <var:Z> \land <var:N> = <nat:1> \times <var:Z> ^ <nat:2> \} \\ <var:N> := <var:N> + <var:G1> ; \\ \{ <var:F> = <var:Z> \land <var:G0> = <nat:4> \land <var:N> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:6> \times <var:Z> \} \\ <var:N> := <var:N> + <var:G0> \\ \{ <var:F> = <var:Z> \land <var:N> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:6> \times <var:Z> + <nat:4> \} \end{eqnarray} Given the preceding argument , our code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:F> = <var:Z> }} <var:G0> := <nat:4> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:F> ; <var:G2> := <nat:1> ; <var:G2> := <var:G2> * <var:F> ; <var:G2> := <var:G2> * <var:F> ; <var:N> := <var:G2> ; <var:N> := <var:N> + <var:G1> ; <var:N> := <var:N> + <var:G0> {{ <var:N> = <nat:1> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:6> * <var:Z> /\ <var:G2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:6> * <var:Z> /\ <var:G2> = <nat:1> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:6> * <var:Z> /\ <var:G2> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:6> * <var:Z> /\ <var:N> = <nat:1> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:G0> = <nat:4> /\ <var:N> = <nat:1> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:Z> /\ <var:N> = <nat:1> * <var:Z> ^ <nat:2> + <nat:6> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 