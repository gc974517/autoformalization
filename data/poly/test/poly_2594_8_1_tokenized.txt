\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:D1> := <var:e> ; <var:D2> := <var:D1> * <var:e> ; <var:D0> := <nat:5> ; <var:D1> := <var:D1> * <nat:8> ; <var:D2> := <var:D2> * <nat:7> ; <var:m> := <var:D2> <var:m> := <var:m> + <var:D1> <var:m> := <var:m> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Given given any whole numbers $ <var:a> $ that we have $ <var:e> = <var:a> $ ahead of the evaluation of this list of instructions it follows that we see $ <var:m> = <nat:7> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:5> $ . \end{theorem} \begin{proof} Applying typical Hoare techniques produces : \begin{eqnarray} \{ <var:e> = <var:a> \} \\ <var:D1> := <var:e> ; \\ \{ <var:e> = <var:a> \land <var:D1> = <var:a> \} \end{eqnarray} Advancing running the code segment yields : \begin{eqnarray} <var:D2> := <var:D1> * <var:e> ; \\ \{ <var:e> = <var:a> \land <var:D1> = <var:a> \land <var:D2> = <var:a> ^ <nat:2> \} \\ <var:D0> := <nat:5> ; \\ \{ <var:e> = <var:a> \land <var:D1> = <var:a> \land <var:D2> = <var:a> ^ <nat:2> \land <var:D0> = <nat:5> \} \\ <var:D1> := <var:D1> * <nat:8> ; \\ \{ <var:e> = <var:a> \land <var:D1> = <nat:8> * <var:a> \land <var:D2> = <var:a> ^ <nat:2> \land <var:D0> = <nat:5> \} \\ <var:D2> := <var:D2> * <nat:7> ; \\ \{ <var:e> = <var:a> \land <var:D1> = <nat:8> * <var:a> \land <var:D2> = <nat:7> * <var:a> ^ <nat:2> \land <var:D0> = <nat:5> \} \\ <var:m> := <var:D2> \\ \{ <var:e> = <var:a> \land <var:D1> = <nat:8> * <var:a> \land <var:D0> = <nat:5> \land <var:m> = <nat:7> * <var:a> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:D1> \\ \{ <var:e> = <var:a> \land <var:D0> = <nat:5> \land <var:m> = <nat:7> * <var:a> ^ <nat:2> + <nat:8> * <var:a> \} \\ <var:m> := <var:m> + <var:D0> \\ \{ <var:e> = <var:a> \land <var:m> = <nat:7> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:5> \} \end{eqnarray} Considering the preceding argument , our set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <def:poly> := <var:D1> := <var:e> ; <var:D2> := <var:D1> * <var:e> ; <var:D0> := <nat:5> ; <var:D1> := <var:D1> * <nat:8> ; <var:D2> := <var:D2> * <nat:7> ; <var:m> := <var:D2> <var:m> := <var:m> + <var:D1> <var:m> := <var:m> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:e> = <var:a> }} <def:poly> {{ <var:m> = <nat:7> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:D1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:D1> = <var:a> /\ <var:D2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:D1> = <var:a> /\ <var:D2> = <var:a> ^ <nat:2> /\ <var:D0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:D1> = <nat:8> * <var:a> /\ <var:D2> = <var:a> ^ <nat:2> /\ <var:D0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:D1> = <nat:8> * <var:a> /\ <var:D2> = <nat:7> * <var:a> ^ <nat:2> /\ <var:D0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:D1> = <nat:8> * <var:a> /\ <var:D0> = <nat:5> /\ <var:m> = <nat:7> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:D0> = <nat:5> /\ <var:m> = <nat:7> * <var:a> ^ <nat:2> + <nat:8> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:m> = <nat:7> * <var:a> ^ <nat:2> + <nat:8> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 