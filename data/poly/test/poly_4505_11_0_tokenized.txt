\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:2> ; <var:I2> := <nat:9> ; <var:I2> := <var:I2> * <var:D> ; <var:I2> := <var:I2> * <var:D> ; <var:I3> := <nat:8> ; <var:I3> := <var:I3> * <var:D> ; <var:I3> := <var:I3> * <var:D> ; <var:I3> := <var:I3> * <var:D> ; <var:n> := <var:I3> ; <var:n> := <var:n> + <var:I2> ; <var:n> := <var:n> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:D> = <var:l> $ ahead of executing the code segment , then we see $ <var:n> = <nat:8> \times <var:l> ^ <nat:3> + <nat:9> \times <var:l> ^ <nat:2> + <nat:2> $ once segment of code has finished . \end{theorem} \begin{proof} The method of proof for this set of instructions is given through typical Hoare logic . Looking at the proceeding command contained in the set of instructions , the variable update line \verb | <var:I0> := <nat:2> ; | . This takes the precondition $ \{ <var:D> = <var:l> \} $ to the postcondition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \} $ . This is given through the assignment scheme found in usual Hoare reasoning . Stepping through , we have the binding line \verb | <var:I2> := <nat:9> ; | . This command forwards $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \} $ into the postcondition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> \} $ . This is rigorously given using the assignment law obtained from usual Hoare techniques . Taking a look at the following line in the code , we see the variable binding command yielding $ <var:I2> * <var:D> $ into $ <var:I2>$ . This redefines the condition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> \} $ to the postcondition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> \} $ . Paying attention to the proceeding line contained in the segment of code , we have the binding command binding $ <var:I2> * <var:D> $ as $ <var:I2>$ . This moves the condition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> \} $ toward the condition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> ^ <nat:2> \} $ . This is ensured by the assignment law defined by usual Hoare reasoning . Immediately following , we see the environment update statement \verb | <var:I3> := <nat:8> ; | . This moves the precondition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> ^ <nat:2> \} $ into $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> ^ <nat:2> \land <var:I3> = <nat:8> \} $ . Going to the next step , we see the variable update statement yielding $ <var:I3> * <var:D> $ into $ <var:I3>$ . This forwards the precondition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> ^ <nat:2> \land <var:I3> = <nat:8> \} $ toward $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> ^ <nat:2> \land <var:I3> = <nat:8> * <var:l> \} $ . This is ensured using the assignment law given in typical Hoare techniques . Moving on to the next step , the variable binding line \verb | <var:I3> := <var:I3> * <var:D> ; | . This transfers the condition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> ^ <nat:2> \land <var:I3> = <nat:8> * <var:l> \} $ as the postcondition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> ^ <nat:2> \land <var:I3> = <nat:8> * <var:l> ^ <nat:2> \} $ . Immediately following , the assignment line letting $ <var:I3> * <var:D> $ to $ <var:I3>$ . This forwards the precondition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> ^ <nat:2> \land <var:I3> = <nat:8> * <var:l> ^ <nat:2> \} $ as $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> ^ <nat:2> \land <var:I3> = <nat:8> * <var:l> ^ <nat:3> \} $ . Moving onward , we have the variable assignmet command \verb | <var:n> := <var:I3> ; | . This takes the condition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> ^ <nat:2> \land <var:I3> = <nat:8> * <var:l> ^ <nat:3> \} $ as the condition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> ^ <nat:2> \land <var:n> = <nat:8> * <var:l> ^ <nat:3> \} $ . This is shown to be logically sound with the assignment inference rule obtained from typical Hoare techniques . Moving on to the next step , we see the variable assignmet statement \verb | <var:n> := <var:n> + <var:I2> ; | . This line moves the precondition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:I2> = <nat:9> * <var:l> ^ <nat:2> \land <var:n> = <nat:8> * <var:l> ^ <nat:3> \} $ to the postcondition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:n> = <nat:8> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> \} $ . Stepping forward , we see the variable update statement \verb | <var:n> := <var:n> + <var:I0> | . This takes the precondition $ \{ <var:D> = <var:l> \land <var:I0> = <nat:2> \land <var:n> = <nat:8> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> \} $ toward the postcondition $ \{ <var:D> = <var:l> \land <var:n> = <nat:8> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I0> := <nat:2> ; <var:I2> := <nat:9> ; <var:I2> := <var:I2> * <var:D> ; <var:I2> := <var:I2> * <var:D> ; <var:I3> := <nat:8> ; <var:I3> := <var:I3> * <var:D> ; <var:I3> := <var:I3> * <var:D> ; <var:I3> := <var:I3> * <var:D> ; <var:n> := <var:I3> ; <var:n> := <var:n> + <var:I2> ; <var:n> := <var:n> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:D> = <var:l> }} <def:poly> {{ <var:n> = <nat:8> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:I0> = <nat:2> /\ <var:I2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:I0> = <nat:2> /\ <var:I2> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:I0> = <nat:2> /\ <var:I2> = <nat:9> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:I0> = <nat:2> /\ <var:I2> = <nat:9> * <var:l> ^ <nat:2> /\ <var:I3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:I0> = <nat:2> /\ <var:I2> = <nat:9> * <var:l> ^ <nat:2> /\ <var:I3> = <nat:8> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:I0> = <nat:2> /\ <var:I2> = <nat:9> * <var:l> ^ <nat:2> /\ <var:I3> = <nat:8> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:I0> = <nat:2> /\ <var:I2> = <nat:9> * <var:l> ^ <nat:2> /\ <var:I3> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:I0> = <nat:2> /\ <var:I2> = <nat:9> * <var:l> ^ <nat:2> /\ <var:n> = <nat:8> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:I0> = <nat:2> /\ <var:n> = <nat:8> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:l> /\ <var:n> = <nat:8> * <var:l> ^ <nat:3> + <nat:9> * <var:l> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 