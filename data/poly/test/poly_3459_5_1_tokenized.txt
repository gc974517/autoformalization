\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} such that \begin{verbatim} <var:h1> := <var:w> ; <var:h0> := <nat:9> ; <var:h1> := <var:h1> * <nat:1> ; <var:W> := <var:h1> <var:W> := <var:W> + <var:h0> \end{verbatim} Assuming --- for every integers $ <var:d> $ --- that $ <var:w> = <var:d> $ ahead of the evaluation of this program it must be that we have $ <var:W> = <nat:1> \times <var:d> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for our series of commands is given through standard Hoare logic . Advancing on , the code \verb | <var:h1> := <var:w> ; | . This code takes the condition $ \{ <var:w> = <var:d> \} $ as the postcondition $ \{ <var:w> = <var:d> \land <var:h1> = <var:d> \} $ . After , we have the binding line giving $ <nat:9> $ to $ <var:h0>$ . This statement redefines the precondition $ \{ <var:w> = <var:d> \land <var:h1> = <var:d> \} $ toward the postcondition $ \{ <var:w> = <var:d> \land <var:h1> = <var:d> \land <var:h0> = <nat:9> \} $ . This is shown to be logically sound by the assignment rule of typical Hoare techniques . Moving onward , the variable update code \verb | <var:h1> := <var:h1> * <nat:1> ; | . This command advances the precondition $ \{ <var:w> = <var:d> \land <var:h1> = <var:d> \land <var:h0> = <nat:9> \} $ into the condition $ \{ <var:w> = <var:d> \land <var:h1> = <nat:1> * <var:d> \land <var:h0> = <nat:9> \} $ . Considering the subsequent command found in our series of instructions , we have the variable update command yielding $ <var:h1$ as $ <var:W>$ . This command advances the condition $ \{ <var:w> = <var:d> \land <var:h1> = <nat:1> * <var:d> \land <var:h0> = <nat:9> \} $ to the postcondition $ \{ <var:w> = <var:d> \land <var:h0> = <nat:9> \land <var:W> = <nat:1> * <var:d> \} $ . Considering the proceeding line of code contained in the program , the environment update statement \verb | <var:W> := <var:W> + <var:h0> | . This line forwards the condition $ \{ <var:w> = <var:d> \land <var:h0> = <nat:9> \land <var:W> = <nat:1> * <var:d> \} $ to the postcondition $ \{ <var:w> = <var:d> \land <var:W> = <nat:1> * <var:d> + <nat:9> \} $ . This is ensured with the assignment rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:w> = <var:d> }} <var:h1> := <var:w> ; <var:h0> := <nat:9> ; <var:h1> := <var:h1> * <nat:1> ; <var:W> := <var:h1> <var:W> := <var:W> + <var:h0> {{ <var:W> = <nat:1> * <var:d> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:h1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:h1> = <var:d> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:h1> = <nat:1> * <var:d> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:h0> = <nat:9> /\ <var:W> = <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:W> = <nat:1> * <var:d> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 