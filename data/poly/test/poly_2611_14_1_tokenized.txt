\begin{document} \begin{theorem} Consider a set of instructions as follows \begin{verbatim} <var:a1> := <var:e> ; <var:a2> := <var:a1> * <var:e> ; <var:a3> := <var:a2> * <var:e> ; <var:a4> := <var:a3> * <var:e> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:4> ; <var:a2> := <var:a2> * <nat:9> ; <var:a3> := <var:a3> * <nat:2> ; <var:a4> := <var:a4> * <nat:2> ; <var:n> := <var:a4> <var:n> := <var:n> + <var:a3> <var:n> := <var:n> + <var:a2> <var:n> := <var:n> + <var:a1> <var:n> := <var:n> + <var:a0> \end{verbatim} Allowing --- given every positive numbers $ <var:F> $ --- it to hold that $ <var:e> = <var:F> $ ahead of running this list of commands , it follows that $ <var:n> = <nat:2> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:3> $ after list of commands has executed . \end{theorem} \begin{proof} The method of proof for our program can be given through typical Hoare logic . Moving on to the subsequent steps contained in the code segment , we have \verb | { <var:e> = <var:F> } <var:a1> := <var:e> { <var:e> = <var:F> \land <var:a1> = <var:F> } | and \verb | { <var:e> = <var:F> \land <var:a1> = <var:F> } <var:a2> := <var:a1> * <var:e> { <var:e> = <var:F> \land <var:a1> = <var:F> \land <var:a2> = <var:F> ^ <nat:2> } | . This is given by the variable assignmet inference rule found in standard Hoare techniques . Focusing on the following lines found in our series of instructions , we have \verb | { <var:e> = <var:F> } <var:a1> := <var:e> { <var:e> = <var:F> \land <var:a1> = <var:F> } | , \verb | { <var:e> = <var:F> \land <var:a1> = <var:F> } <var:a2> := <var:a1> * <var:e> { <var:e> = <var:F> \land <var:a1> = <var:F> \land <var:a2> = <var:F> ^ <nat:2> } | and \verb | { <var:e> = <var:F> \land <var:a1> = <var:F> \land <var:a2> = <var:F> ^ <nat:2> } <var:a3> := <var:a2> * <var:e> { <var:e> = <var:F> \land <var:a1> = <var:F> \land <var:a2> = <var:F> ^ <nat:2> \land <var:a3> = <var:F> ^ <nat:3> } | . This is known to be sound with the environment update rule defined by usual Hoare logic . Advancing to the following pieces of code contained in the list of commands , we have \verb | { <var:e> = <var:F> } <var:a1> := <var:e> { <var:e> = <var:F> \land <var:a1> = <var:F> } | , \verb | { <var:e> = <var:F> \land <var:a1> = <var:F> } <var:a2> := <var:a1> * <var:e> { <var:e> = <var:F> \land <var:a1> = <var:F> \land <var:a2> = <var:F> ^ <nat:2> } | , \verb | { <var:e> = <var:F> \land <var:a1> = <var:F> \land <var:a2> = <var:F> ^ <nat:2> } <var:a3> := <var:a2> * <var:e> { <var:e> = <var:F> \land <var:a1> = <var:F> \land <var:a2> = <var:F> ^ <nat:2> \land <var:a3> = <var:F> ^ <nat:3> } | , \verb | { <var:e> = <var:F> \land <var:a1> = <var:F> \land <var:a2> = <var:F> ^ <nat:2> \land <var:a3> = <var:F> ^ <nat:3> } <var:a4> := <var:a3> * <var:e> { <var:e> = <var:F> \land <var:a1> = <var:F> \land <var:a2> = <var:F> ^ <nat:2> \land <var:a3> = <var:F> ^ <nat:3> \land <var:a4> = <var:F> ^ <nat:4> } | , \verb | { <var:e> = <var:F> \land <var:a1> = <var:F> \land <var:a2> = <var:F> ^ <nat:2> \land <var:a3> = <var:F> ^ <nat:3> \land <var:a4> = <var:F> ^ <nat:4> } <var:a0> := <nat:3> { <var:e> = <var:F> \land <var:a1> = <var:F> \land <var:a2> = <var:F> ^ <nat:2> \land <var:a3> = <var:F> ^ <nat:3> \land <var:a4> = <var:F> ^ <nat:4> \land <var:a0> = <nat:3> } | , \verb | { <var:e> = <var:F> \land <var:a1> = <var:F> \land <var:a2> = <var:F> ^ <nat:2> \land <var:a3> = <var:F> ^ <nat:3> \land <var:a4> = <var:F> ^ <nat:4> \land <var:a0> = <nat:3> } <var:a1> := <var:a1> * <nat:4> { <var:e> = <var:F> \land <var:a1> = <nat:4> \cdot <var:F> \land <var:a2> = <var:F> ^ <nat:2> \land <var:a3> = <var:F> ^ <nat:3> \land <var:a4> = <var:F> ^ <nat:4> \land <var:a0> = <nat:3> } | , \verb | { <var:e> = <var:F> \land <var:a1> = <nat:4> \cdot <var:F> \land <var:a2> = <var:F> ^ <nat:2> \land <var:a3> = <var:F> ^ <nat:3> \land <var:a4> = <var:F> ^ <nat:4> \land <var:a0> = <nat:3> } <var:a2> := <var:a2> * <nat:9> { <var:e> = <var:F> \land <var:a1> = <nat:4> \cdot <var:F> \land <var:a2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:a3> = <var:F> ^ <nat:3> \land <var:a4> = <var:F> ^ <nat:4> \land <var:a0> = <nat:3> } | , \verb | { <var:e> = <var:F> \land <var:a1> = <nat:4> \cdot <var:F> \land <var:a2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:a3> = <var:F> ^ <nat:3> \land <var:a4> = <var:F> ^ <nat:4> \land <var:a0> = <nat:3> } <var:a3> := <var:a3> * <nat:2> { <var:e> = <var:F> \land <var:a1> = <nat:4> \cdot <var:F> \land <var:a2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:a3> = <nat:2> \cdot <var:F> ^ <nat:3> \land <var:a4> = <var:F> ^ <nat:4> \land <var:a0> = <nat:3> } | and \verb | { <var:e> = <var:F> \land <var:a1> = <nat:4> \cdot <var:F> \land <var:a2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:a3> = <nat:2> \cdot <var:F> ^ <nat:3> \land <var:a4> = <var:F> ^ <nat:4> \land <var:a0> = <nat:3> } <var:a4> := <var:a4> * <nat:2> { <var:e> = <var:F> \land <var:a1> = <nat:4> \cdot <var:F> \land <var:a2> = <nat:9> \cdot <var:F> ^ <nat:2> \land <var:a3> = <nat:2> \cdot <var:F> ^ <nat:3> \land <var:a4> = <nat:2> \cdot <var:F> ^ <nat:4> \land <var:a0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <var:a4> : string := " <var:a4> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:e> = <var:F> }} <var:a1> := <var:e> ; <var:a2> := <var:a1> * <var:e> ; <var:a3> := <var:a2> * <var:e> ; <var:a4> := <var:a3> * <var:e> ; <var:a0> := <nat:3> ; <var:a1> := <var:a1> * <nat:4> ; <var:a2> := <var:a2> * <nat:9> ; <var:a3> := <var:a3> * <nat:2> ; <var:a4> := <var:a4> * <nat:2> ; <var:n> := <var:a4> <var:n> := <var:n> + <var:a3> <var:n> := <var:n> + <var:a2> <var:n> := <var:n> + <var:a1> <var:n> := <var:n> + <var:a0> {{ <var:n> = <nat:2> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:a1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:a1> = <var:F> /\ <var:a2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:a1> = <var:F> /\ <var:a2> = <var:F> ^ <nat:2> /\ <var:a3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:a1> = <var:F> /\ <var:a2> = <var:F> ^ <nat:2> /\ <var:a3> = <var:F> ^ <nat:3> /\ <var:a4> = <var:F> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:a1> = <var:F> /\ <var:a2> = <var:F> ^ <nat:2> /\ <var:a3> = <var:F> ^ <nat:3> /\ <var:a4> = <var:F> ^ <nat:4> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:a1> = <nat:4> * <var:F> /\ <var:a2> = <var:F> ^ <nat:2> /\ <var:a3> = <var:F> ^ <nat:3> /\ <var:a4> = <var:F> ^ <nat:4> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:a1> = <nat:4> * <var:F> /\ <var:a2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:a3> = <var:F> ^ <nat:3> /\ <var:a4> = <var:F> ^ <nat:4> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:a1> = <nat:4> * <var:F> /\ <var:a2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:a3> = <nat:2> * <var:F> ^ <nat:3> /\ <var:a4> = <var:F> ^ <nat:4> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:a1> = <nat:4> * <var:F> /\ <var:a2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:a3> = <nat:2> * <var:F> ^ <nat:3> /\ <var:a4> = <nat:2> * <var:F> ^ <nat:4> /\ <var:a0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:a1> = <nat:4> * <var:F> /\ <var:a2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:a3> = <nat:2> * <var:F> ^ <nat:3> /\ <var:a0> = <nat:3> /\ <var:n> = <nat:2> * <var:F> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:a1> = <nat:4> * <var:F> /\ <var:a2> = <nat:9> * <var:F> ^ <nat:2> /\ <var:a0> = <nat:3> /\ <var:n> = <nat:2> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:a1> = <nat:4> * <var:F> /\ <var:a0> = <nat:3> /\ <var:n> = <nat:2> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:a0> = <nat:3> /\ <var:n> = <nat:2> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:4> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:F> /\ <var:n> = <nat:2> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:9> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 