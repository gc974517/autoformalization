\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:J1> := <var:v> ; <var:J2> := <var:J1> * <var:v> ; <var:J3> := <var:J2> * <var:v> ; <var:J0> := <nat:7> ; <var:J1> := <var:J1> * <nat:7> ; <var:J2> := <var:J2> * <nat:5> ; <var:J3> := <var:J3> * <nat:6> ; <var:G> := <var:J3> <var:G> := <var:G> + <var:J2> <var:G> := <var:G> + <var:J1> <var:G> := <var:G> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Assume $ <var:v> = <var:m> $ ahead of interpreting our set of instructions it holds that we see $ <var:G> = <nat:6> \times <var:m> ^ <nat:3> + <nat:5> \times <var:m> ^ <nat:2> + <nat:7> \times <var:m> + <nat:7> $ after program is done . \end{theorem} \begin{proof} The proof of the segment of code is given with the following decorated code . \begin{eqnarray} \{ <var:v> = <var:m> \} \\ <var:J1> := <var:v> ; \\ \{ <var:v> = <var:m> \land <var:J1> = <var:m> \} \\ <var:J2> := <var:J1> * <var:v> ; \\ \{ <var:v> = <var:m> \land <var:J1> = <var:m> \land <var:J2> = <var:m> ^ <nat:2> \} \\ <var:J3> := <var:J2> * <var:v> ; \\ \{ <var:v> = <var:m> \land <var:J1> = <var:m> \land <var:J2> = <var:m> ^ <nat:2> \land <var:J3> = <var:m> ^ <nat:3> \} \\ <var:J0> := <nat:7> ; \\ \{ <var:v> = <var:m> \land <var:J1> = <var:m> \land <var:J2> = <var:m> ^ <nat:2> \land <var:J3> = <var:m> ^ <nat:3> \land <var:J0> = <nat:7> \} \\ <var:J1> := <var:J1> * <nat:7> ; \\ \{ <var:v> = <var:m> \land <var:J1> = <nat:7> * <var:m> \land <var:J2> = <var:m> ^ <nat:2> \land <var:J3> = <var:m> ^ <nat:3> \land <var:J0> = <nat:7> \} \\ <var:J2> := <var:J2> * <nat:5> ; \\ \{ <var:v> = <var:m> \land <var:J1> = <nat:7> * <var:m> \land <var:J2> = <nat:5> * <var:m> ^ <nat:2> \land <var:J3> = <var:m> ^ <nat:3> \land <var:J0> = <nat:7> \} \\ <var:J3> := <var:J3> * <nat:6> ; \\ \{ <var:v> = <var:m> \land <var:J1> = <nat:7> * <var:m> \land <var:J2> = <nat:5> * <var:m> ^ <nat:2> \land <var:J3> = <nat:6> * <var:m> ^ <nat:3> \land <var:J0> = <nat:7> \} \\ <var:G> := <var:J3> \\ \{ <var:v> = <var:m> \land <var:J1> = <nat:7> * <var:m> \land <var:J2> = <nat:5> * <var:m> ^ <nat:2> \land <var:J0> = <nat:7> \land <var:G> = <nat:6> * <var:m> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:J2> \\ \{ <var:v> = <var:m> \land <var:J1> = <nat:7> * <var:m> \land <var:J0> = <nat:7> \land <var:G> = <nat:6> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:J1> \\ \{ <var:v> = <var:m> \land <var:J0> = <nat:7> \land <var:G> = <nat:6> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:7> * <var:m> \} \\ <var:G> := <var:G> + <var:J0> \\ \{ <var:v> = <var:m> \land <var:G> = <nat:6> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:7> \} \end{eqnarray} Applying standard Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <def:poly> := <var:J1> := <var:v> ; <var:J2> := <var:J1> * <var:v> ; <var:J3> := <var:J2> * <var:v> ; <var:J0> := <nat:7> ; <var:J1> := <var:J1> * <nat:7> ; <var:J2> := <var:J2> * <nat:5> ; <var:J3> := <var:J3> * <nat:6> ; <var:G> := <var:J3> <var:G> := <var:G> + <var:J2> <var:G> := <var:G> + <var:J1> <var:G> := <var:G> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:v> = <var:m> }} <def:poly> {{ <var:G> = <nat:6> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:J1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:J1> = <var:m> /\ <var:J2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:J1> = <var:m> /\ <var:J2> = <var:m> ^ <nat:2> /\ <var:J3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:J1> = <var:m> /\ <var:J2> = <var:m> ^ <nat:2> /\ <var:J3> = <var:m> ^ <nat:3> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:J1> = <nat:7> * <var:m> /\ <var:J2> = <var:m> ^ <nat:2> /\ <var:J3> = <var:m> ^ <nat:3> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:J1> = <nat:7> * <var:m> /\ <var:J2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:J3> = <var:m> ^ <nat:3> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:J1> = <nat:7> * <var:m> /\ <var:J2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:J3> = <nat:6> * <var:m> ^ <nat:3> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:J1> = <nat:7> * <var:m> /\ <var:J2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:J0> = <nat:7> /\ <var:G> = <nat:6> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:J1> = <nat:7> * <var:m> /\ <var:J0> = <nat:7> /\ <var:G> = <nat:6> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:J0> = <nat:7> /\ <var:G> = <nat:6> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:m> /\ <var:G> = <nat:6> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:7> * <var:m> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 