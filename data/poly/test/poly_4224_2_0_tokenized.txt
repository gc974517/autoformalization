\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:8> ; <var:P> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:X> = <var:R> $ before the execution of our segment of code then we have $ <var:P> = <nat:8> $ when set of instructions finishes . \end{theorem} \begin{proof} The method of proof for the code can be seen through standard Hoare techniques . Advancing on , we see \verb | { <var:X> = <var:R> } <var:x0> := <nat:8> { <var:X> = <var:R> \land <var:x0> = <nat:8> } | and \verb | { <var:X> = <var:R> \land <var:x0> = <nat:8> } <var:P> := <var:x0{ <var:X> = <var:R> \land <var:P> = <nat:8> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:8> ; <var:P> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:X> = <var:R> }} <def:poly> {{ <var:P> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:x0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:P> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 