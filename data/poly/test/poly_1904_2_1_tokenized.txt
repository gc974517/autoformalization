\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:4> ; <var:v> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Allow that $ <var:g> = <var:h> $ before executing our list of commands , it holds that $ <var:v> = <nat:4> $ when program executes . \end{theorem} \begin{proof} Applying Hoare logic results in : \begin{eqnarray} \{ <var:g> = <var:h> \} \\ <var:o0> := <nat:4> ; \\ \{ <var:g> = <var:h> \land <var:o0> = <nat:4> \} \\ <var:v> := <var:o0> \\ \{ <var:g> = <var:h> \land <var:v> = <nat:4> \} \end{eqnarray} Thusly , this set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:4> ; <var:v> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:g> = <var:h> }} <def:poly> {{ <var:v> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:o0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:h> /\ <var:v> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 