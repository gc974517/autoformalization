\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} such that \begin{verbatim} <var:X1> := <var:Q> ; <var:X0> := <nat:2> ; <var:X1> := <var:X1> * <nat:1> ; <var:g> := <var:X1> <var:g> := <var:g> + <var:X0> \end{verbatim} Allow that $ <var:Q> = <var:l> $ ( given all whole numbers $ <var:l> $ ) prior to the evaluation of the list of instructions , it holds that we have $ <var:g> = <nat:1> \cdot <var:l> + <nat:2> $ once set of commands exits . \end{theorem} \begin{proof} Using usual Hoare reasoning yields : \begin{eqnarray} \{ <var:Q> = <var:l> \} \\ <var:X1> := <var:Q> ; \\ \{ <var:Q> = <var:l> \land <var:X1> = <var:l> \} \\ <var:X0> := <nat:2> ; \\ \{ <var:Q> = <var:l> \land <var:X1> = <var:l> \land <var:X0> = <nat:2> \} \\ <var:X1> := <var:X1> * <nat:1> ; \\ \{ <var:Q> = <var:l> \land <var:X1> = <nat:1> \cdot <var:l> \land <var:X0> = <nat:2> \} \\ <var:g> := <var:X1> \\ \{ <var:Q> = <var:l> \land <var:X0> = <nat:2> \land <var:g> = <nat:1> \cdot <var:l> \} \\ <var:g> := <var:g> + <var:X0> \\ \{ <var:Q> = <var:l> \land <var:g> = <nat:1> \cdot <var:l> + <nat:2> \} \end{eqnarray} As a consequence , the code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:Q> = <var:l> }} <var:X1> := <var:Q> ; <var:X0> := <nat:2> ; <var:X1> := <var:X1> * <nat:1> ; <var:g> := <var:X1> <var:g> := <var:g> + <var:X0> {{ <var:g> = <nat:1> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:X1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:X1> = <var:l> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:X1> = <nat:1> * <var:l> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:X0> = <nat:2> /\ <var:g> = <nat:1> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:l> /\ <var:g> = <nat:1> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 