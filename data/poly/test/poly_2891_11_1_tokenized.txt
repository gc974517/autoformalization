\begin{document} \begin{theorem} We define the following list of instructions : \begin{verbatim} <var:D1> := <var:E> ; <var:D2> := <var:D1> * <var:E> ; <var:D3> := <var:D2> * <var:E> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:3> ; <var:D2> := <var:D2> * <nat:2> ; <var:D3> := <var:D3> * <nat:4> ; <var:W> := <var:D3> <var:W> := <var:W> + <var:D2> <var:W> := <var:W> + <var:D1> <var:W> := <var:W> + <var:D0> \end{verbatim} Given --- for any $ <var:j> \in \mathbb{Z}^+ $ --- it to hold that $ <var:E> = <var:j> $ prior to executing our series of commands , then $ <var:W> = <nat:4> \cdot <var:j> ^ <nat:3> + <nat:2> \cdot <var:j> ^ <nat:2> + <nat:3> \cdot <var:j> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for this series of instructions is shown by standard Hoare techniques . Advancing , we have \begin{verbatim} { <var:E> = <var:j> } <var:D1> := <var:E> { <var:E> = <var:j> \land <var:D1> = <var:j> } { <var:E> = <var:j> \land <var:D1> = <var:j> } <var:D2> := <var:D1> * <var:E> { <var:E> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> } { <var:E> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> } <var:D3> := <var:D2> * <var:E> { <var:E> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> } \end{verbatim} This is ensured through the binding law defined in usual Hoare techniques . Stepping forward , we have \begin{verbatim} { <var:E> = <var:j> } <var:D1> := <var:E> { <var:E> = <var:j> \land <var:D1> = <var:j> } { <var:E> = <var:j> \land <var:D1> = <var:j> } <var:D2> := <var:D1> * <var:E> { <var:E> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> } { <var:E> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> } <var:D3> := <var:D2> * <var:E> { <var:E> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> } \end{verbatim} This is sound with the variable update scheme given in typical Hoare logic . Moving forward to the upcoming commands in the code segment , we have \begin{verbatim} { <var:E> = <var:j> } <var:D1> := <var:E> { <var:E> = <var:j> \land <var:D1> = <var:j> } { <var:E> = <var:j> \land <var:D1> = <var:j> } <var:D2> := <var:D1> * <var:E> { <var:E> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> } { <var:E> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> } <var:D3> := <var:D2> * <var:E> { <var:E> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> } { <var:E> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> } <var:D0> := <nat:3> { <var:E> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> \land <var:D0> = <nat:3> } { <var:E> = <var:j> \land <var:D1> = <var:j> \land <var:D2> = <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> \land <var:D0> = <nat:3> } <var:D1> := <var:D1> * <nat:3> { <var:E> = <var:j> \land <var:D1> = <nat:3> \times <var:j> \land <var:D2> = <var:j> ^ <nat:2> \land <var:D3> = <var:j> ^ <nat:3> \land <var:D0> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:E> = <var:j> }} <var:D1> := <var:E> ; <var:D2> := <var:D1> * <var:E> ; <var:D3> := <var:D2> * <var:E> ; <var:D0> := <nat:3> ; <var:D1> := <var:D1> * <nat:3> ; <var:D2> := <var:D2> * <nat:2> ; <var:D3> := <var:D3> * <nat:4> ; <var:W> := <var:D3> <var:W> := <var:W> + <var:D2> <var:W> := <var:W> + <var:D1> <var:W> := <var:W> + <var:D0> {{ <var:W> = <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:D1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:D1> = <var:j> /\ <var:D2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:D1> = <var:j> /\ <var:D2> = <var:j> ^ <nat:2> /\ <var:D3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:D1> = <var:j> /\ <var:D2> = <var:j> ^ <nat:2> /\ <var:D3> = <var:j> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:D1> = <nat:3> * <var:j> /\ <var:D2> = <var:j> ^ <nat:2> /\ <var:D3> = <var:j> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:D1> = <nat:3> * <var:j> /\ <var:D2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:D3> = <var:j> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:D1> = <nat:3> * <var:j> /\ <var:D2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:D3> = <nat:4> * <var:j> ^ <nat:3> /\ <var:D0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:D1> = <nat:3> * <var:j> /\ <var:D2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:D0> = <nat:3> /\ <var:W> = <nat:4> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:D1> = <nat:3> * <var:j> /\ <var:D0> = <nat:3> /\ <var:W> = <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:D0> = <nat:3> /\ <var:W> = <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:j> /\ <var:W> = <nat:4> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 