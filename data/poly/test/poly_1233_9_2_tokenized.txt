\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} such that \begin{verbatim} <var:y> := <nat:4> ; <var:y> := <nat:3> + <var:y> * <var:o> ; <var:y> := <nat:4> + <var:y> * <var:o> ; <var:y> := <nat:1> + <var:y> * <var:o> ; <var:y> := <var:y> * <var:o> ; <var:y> := <nat:1> + <var:y> * <var:o> ; <var:y> := <nat:2> + <var:y> * <var:o> ; <var:y> := <nat:4> + <var:y> * <var:o> ; <var:y> := <nat:3> + <var:y> * <var:o> \end{verbatim} Assume that we have $ <var:o> = <var:R> $ before running this list of commands , it follows that we see $ <var:y> = <nat:4> * <var:R> ^ <nat:8> + <nat:3> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:3> $ once set of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:R> \} \\ <var:y> := <nat:4> ; \\ \{ <var:o> = <var:R> \land <var:y> = <nat:4> \} \\ <var:y> := <nat:3> + <var:y> * <var:o> ; \\ \{ <var:o> = <var:R> \land <var:y> = <nat:4> \cdot <var:R> + <nat:3> \} \\ <var:y> := <nat:4> + <var:y> * <var:o> ; \\ \{ <var:o> = <var:R> \land <var:y> = <nat:4> \cdot <var:R> ^ <nat:2> + <nat:3> \cdot <var:R> + <nat:4> \} \\ <var:y> := <nat:1> + <var:y> * <var:o> ; \\ \{ <var:o> = <var:R> \land <var:y> = <nat:4> \cdot <var:R> ^ <nat:3> + <nat:3> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:1> \} \\ <var:y> := <var:y> * <var:o> ; \\ \{ <var:o> = <var:R> \land <var:y> = <nat:4> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:1> \cdot <var:R> + \} \\ <var:y> := <nat:1> + <var:y> * <var:o> ; \\ \{ <var:o> = <var:R> \land <var:y> = <nat:4> \cdot <var:R> ^ <nat:5> + <nat:3> \cdot <var:R> ^ <nat:4> + <nat:4> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:1> \} \\ <var:y> := <nat:2> + <var:y> * <var:o> ; \\ \{ <var:o> = <var:R> \land <var:y> = <nat:4> \cdot <var:R> ^ <nat:6> + <nat:3> \cdot <var:R> ^ <nat:5> + <nat:4> \cdot <var:R> ^ <nat:4> + <nat:1> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> + <nat:2> \} \\ <var:y> := <nat:4> + <var:y> * <var:o> ; \\ \{ <var:o> = <var:R> \land <var:y> = <nat:4> \cdot <var:R> ^ <nat:7> + <nat:3> \cdot <var:R> ^ <nat:6> + <nat:4> \cdot <var:R> ^ <nat:5> + <nat:1> \cdot <var:R> ^ <nat:4> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:2> \cdot <var:R> + <nat:4> \} \\ <var:y> := <nat:3> + <var:y> * <var:o> \\ \{ <var:o> = <var:R> \land <var:y> = <nat:4> \cdot <var:R> ^ <nat:8> + <nat:3> \cdot <var:R> ^ <nat:7> + <nat:4> \cdot <var:R> ^ <nat:6> + <nat:1> \cdot <var:R> ^ <nat:5> + <nat:1> \cdot <var:R> ^ <nat:3> + <nat:2> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:3> \} \end{eqnarray} The application of typical Hoare logic resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:o> = <var:R> }} <var:y> := <nat:4> ; <var:y> := <nat:3> + <var:y> * <var:o> ; <var:y> := <nat:4> + <var:y> * <var:o> ; <var:y> := <nat:1> + <var:y> * <var:o> ; <var:y> := <var:y> * <var:o> ; <var:y> := <nat:1> + <var:y> * <var:o> ; <var:y> := <nat:2> + <var:y> * <var:o> ; <var:y> := <nat:4> + <var:y> * <var:o> ; <var:y> := <nat:3> + <var:y> * <var:o> {{ <var:y> = <nat:4> * <var:R> ^ <nat:8> + <nat:3> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:R> /\ <var:y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:R> /\ <var:y> = <nat:4> * <var:R> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:R> /\ <var:y> = <nat:4> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:R> /\ <var:y> = <nat:4> * <var:R> ^ <nat:3> + <nat:3> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:R> /\ <var:y> = <nat:4> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:1> * <var:R> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:R> /\ <var:y> = <nat:4> * <var:R> ^ <nat:5> + <nat:3> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:R> /\ <var:y> = <nat:4> * <var:R> ^ <nat:6> + <nat:3> * <var:R> ^ <nat:5> + <nat:4> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:R> /\ <var:y> = <nat:4> * <var:R> ^ <nat:7> + <nat:3> * <var:R> ^ <nat:6> + <nat:4> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:4> + <nat:1> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:R> /\ <var:y> = <nat:4> * <var:R> ^ <nat:8> + <nat:3> * <var:R> ^ <nat:7> + <nat:4> * <var:R> ^ <nat:6> + <nat:1> * <var:R> ^ <nat:5> + <nat:1> * <var:R> ^ <nat:3> + <nat:2> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 