\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:2> ; <var:l> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Take the following code <def:poly> . Allowing ( letting $ <var:P> $ ) that we have $ <var:d> = <var:P> $ before interpreting our set of commands , it follows that we have $ <var:l> = <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:P> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:d> = <var:P> \land <var:C0> = <nat:2> \} \\ <var:l> := <var:C0> \\ \{ <var:d> = <var:P> \land <var:l> = <nat:2> \} \end{eqnarray} The application of usual Hoare reasoning ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:2> ; <var:l> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:d> = <var:P> }} <def:poly> {{ <var:l> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:P> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:P> /\ <var:l> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 