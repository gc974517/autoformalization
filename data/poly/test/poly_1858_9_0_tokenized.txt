\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:3> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:I> ; <var:j2> := <nat:3> ; <var:j2> := <var:j2> * <var:I> ; <var:j2> := <var:j2> * <var:I> ; <var:C> := <var:j2> ; <var:C> := <var:C> + <var:j1> ; <var:C> := <var:C> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Allow ( given $ <var:T> $ ) it to be that $ <var:I> = <var:T> $ ahead of interpreting our list of commands , it holds that we see $ <var:C> = <nat:3> \cdot <var:T> ^ <nat:2> + <nat:4> \cdot <var:T> + <nat:3> $ after list of commands has finished executing . \end{theorem} \begin{proof} Showing our claim about correctness for the code can be demonstrated using standard Hoare logic . Stepping through , \verb | { <var:I> = <var:T> } <var:j0> := <nat:3> { <var:I> = <var:T> \land <var:j0> = <nat:3> } | , \verb | { <var:I> = <var:T> \land <var:j0> = <nat:3> } <var:j1> := <nat:4> { <var:I> = <var:T> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> } | , \verb | { <var:I> = <var:T> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> } <var:j1> := <var:j1> * <var:I> { <var:I> = <var:T> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:T> } | , \verb | { <var:I> = <var:T> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:T> } <var:j2> := <nat:3> { <var:I> = <var:T> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:T> \land <var:j2> = <nat:3> } | , \verb | { <var:I> = <var:T> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:T> \land <var:j2> = <nat:3> } <var:j2> := <var:j2> * <var:I> { <var:I> = <var:T> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:T> \land <var:j2> = <nat:3> \times <var:T> } | , \verb | { <var:I> = <var:T> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:T> \land <var:j2> = <nat:3> \times <var:T> } <var:j2> := <var:j2> * <var:I> { <var:I> = <var:T> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:T> \land <var:j2> = <nat:3> \times <var:T> ^ <nat:2> } | , \verb | { <var:I> = <var:T> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:T> \land <var:j2> = <nat:3> \times <var:T> ^ <nat:2> } <var:C> := <var:j2> { <var:I> = <var:T> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:T> \land <var:C> = <nat:3> \times <var:T> ^ <nat:2> } | and \verb | { <var:I> = <var:T> \land <var:j0> = <nat:3> \land <var:j1> = <nat:4> \times <var:T> \land <var:C> = <nat:3> \times <var:T> ^ <nat:2> } <var:C> := <var:C> + <var:j1> { <var:I> = <var:T> \land <var:j0> = <nat:3> \land <var:C> = <nat:3> \times <var:T> ^ <nat:2> + <nat:4> \times <var:T> } | . Observing the next step seen in our series of commands , \verb | { <var:I> = <var:T> } <var:j0> := <nat:3> { <var:I> = <var:T> \land <var:j0> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <def:poly> := <var:j0> := <nat:3> ; <var:j1> := <nat:4> ; <var:j1> := <var:j1> * <var:I> ; <var:j2> := <nat:3> ; <var:j2> := <var:j2> * <var:I> ; <var:j2> := <var:j2> * <var:I> ; <var:C> := <var:j2> ; <var:C> := <var:C> + <var:j1> ; <var:C> := <var:C> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:I> = <var:T> }} <def:poly> {{ <var:C> = <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:4> * <var:T> /\ <var:j2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:4> * <var:T> /\ <var:j2> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:4> * <var:T> /\ <var:j2> = <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:j0> = <nat:3> /\ <var:j1> = <nat:4> * <var:T> /\ <var:C> = <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:j0> = <nat:3> /\ <var:C> = <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:T> /\ <var:C> = <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 