\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:3> ; <var:N> := <var:K0> \end{verbatim} Allowing it to hold that $ <var:D> = <var:V> $ before interpreting this set of instructions , it must be that we have $ <var:N> = <nat:3> $ . \end{theorem} \begin{proof} Utilizing standard Hoare techniques results in : \begin{eqnarray} \{ <var:D> = <var:V> \} \\ <var:K0> := <nat:3> ; \\ \{ <var:D> = <var:V> \land <var:K0> = <nat:3> \} \\ <var:N> := <var:K0> \\ \{ <var:D> = <var:V> \land <var:N> = <nat:3> \} \end{eqnarray} Thus , our series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:D> = <var:V> }} <var:K0> := <nat:3> ; <var:N> := <var:K0> {{ <var:N> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:K0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:V> /\ <var:N> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 