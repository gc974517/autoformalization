\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:7> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:n> ; <var:r> := <var:x1> ; <var:r> := <var:r> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- taking whole numbers $ <var:U> $ --- that $ <var:n> = <var:U> $ prior to evaluating our list of commands , it follows that $ <var:r> = <nat:2> \cdot <var:U> + <nat:7> $ once code has executed . \end{theorem} \begin{proof} Proving correctness for the series of instructions can be accomplished through typical Hoare techniques . Stepping through , we have \[ \begin{tabular} {rcl} \{ <var:n> = <var:U> \} & <var:x0> := <nat:7> & \{ <var:n> = <var:U> \land <var:x0> = <nat:7> \} \\ \{ <var:n> = <var:U> \land <var:x0> = <nat:7> \} & <var:x1> := <nat:2> & \{ <var:n> = <var:U> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> \} \\ \{ <var:n> = <var:U> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> \} & <var:x1> := <var:x1> * <var:n> & \{ <var:n> = <var:U> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> * <var:U> \} \\ \{ <var:n> = <var:U> \land <var:x0> = <nat:7> \land <var:x1> = <nat:2> * <var:U> \} & <var:r> := <var:x1> & \{ <var:n> = <var:U> \land <var:x0> = <nat:7> \land <var:r> = <nat:2> * <var:U> \} \end{tabular} Shifting focus toward the proceeding line in our set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:n> = <var:U> \} & <var:x0> := <nat:7> & \{ <var:n> = <var:U> \land <var:x0> = <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <def:poly> := <var:x0> := <nat:7> ; <var:x1> := <nat:2> ; <var:x1> := <var:x1> * <var:n> ; <var:r> := <var:x1> ; <var:r> := <var:r> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:n> = <var:U> }} <def:poly> {{ <var:r> = <nat:2> * <var:U> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:x0> = <nat:7> /\ <var:x1> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:x0> = <nat:7> /\ <var:r> = <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:r> = <nat:2> * <var:U> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 