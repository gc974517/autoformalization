\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:8> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:n> ; <var:K> := <var:w1> ; <var:K> := <var:K> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> in \emph{Imp} . Allowing that we have $ <var:n> = <var:v> $ ( given every integers $ <var:v> $ ) prior to running the series of commands , it follows that we have $ <var:K> = <nat:4> * <var:v> + <nat:8> $ after list of instructions has exited . \end{theorem} \begin{proof} Proving correctness for the set of instructions is given with usual Hoare techniques . Moving forward to the next step , we have the environment update statement binding $ <nat:8> $ as $ <var:w0>$ . This advances the condition $ \{ <var:n> = <var:v> \} $ toward the postcondition $ \{ <var:n> = <var:v> \land <var:w0> = <nat:8> \} $ . This is rigorously given by the assignment inference rule found in typical Hoare logic . Taking another step toward the next line of code found in the code , we see the line binding $ <nat:4> $ into $ <var:w1>$ . This moves the condition $ \{ <var:n> = <var:v> \land <var:w0> = <nat:8> \} $ to $ \{ <var:n> = <var:v> \land <var:w0> = <nat:8> \land <var:w1> = <nat:4> \} $ . This is guaranteed by the assignment law given in typical Hoare techniques . Moving on to the following bit of code in the code segment , we have the variable assignmet command \verb | <var:w1> := <var:w1> * <var:n> ; | . This command redefines $ \{ <var:n> = <var:v> \land <var:w0> = <nat:8> \land <var:w1> = <nat:4> \} $ as the postcondition $ \{ <var:n> = <var:v> \land <var:w0> = <nat:8> \land <var:w1> = <nat:4> \times <var:v> \} $ . This is known to be sound by the assignment rule defined in typical Hoare techniques . Immediately following , the variable update command yielding $ <var:w1> $ as $ <var:K>$ . This transfers the condition $ \{ <var:n> = <var:v> \land <var:w0> = <nat:8> \land <var:w1> = <nat:4> \times <var:v> \} $ toward $ \{ <var:n> = <var:v> \land <var:w0> = <nat:8> \land <var:K> = <nat:4> \times <var:v> \} $ . This is ensured using the assignment rule from standard Hoare logic . After , we see the environment update line yielding $ <var:K> + <var:w0$ into $ <var:K>$ . This statement moves $ \{ <var:n> = <var:v> \land <var:w0> = <nat:8> \land <var:K> = <nat:4> \times <var:v> \} $ as the condition $ \{ <var:n> = <var:v> \land <var:K> = <nat:4> \times <var:v> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:8> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:n> ; <var:K> := <var:w1> ; <var:K> := <var:K> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:n> = <var:v> }} <def:poly> {{ <var:K> = <nat:4> * <var:v> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:w0> = <nat:8> /\ <var:w1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:w0> = <nat:8> /\ <var:w1> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:w0> = <nat:8> /\ <var:K> = <nat:4> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:v> /\ <var:K> = <nat:4> * <var:v> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 