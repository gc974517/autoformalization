\begin{document} \begin{theorem} Let the following series of instructions such that \begin{verbatim} <var:e0> := <nat:8> ; <var:l> := <var:e0> \end{verbatim} Allow it to hold that $ <var:f> = <var:T> $ ahead of the evaluation of our series of commands it must be that we have $ <var:l> = <nat:8> $ . \end{theorem} \begin{proof} The method of proof for this code segment is done using usual Hoare reasoning . Moving onward , we have the variable binding code \verb | <var:e0> := <nat:8> ; | . This code redefines the condition $ \{ <var:f> = <var:T> \} $ as $ \{ <var:f> = <var:T> \land <var:e0> = <nat:8> \} $ . Moving forward to the next step , we have the binding line defining $ <var:e0$ to $ <var:l>$ . This code forwards $ \{ <var:f> = <var:T> \land <var:e0> = <nat:8> \} $ into the condition $ \{ <var:f> = <var:T> \land <var:l> = <nat:8> \} $ . This is shown with the assignment scheme obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:f> = <var:T> }} <var:e0> := <nat:8> ; <var:l> := <var:e0> {{ <var:l> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:e0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:T> /\ <var:l> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 