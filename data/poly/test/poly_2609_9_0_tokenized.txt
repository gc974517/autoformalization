\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:I0> := <nat:2> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:P> ; <var:I2> := <nat:6> ; <var:I2> := <var:I2> * <var:P> ; <var:I2> := <var:I2> * <var:P> ; <var:g> := <var:I2> ; <var:g> := <var:g> + <var:I1> ; <var:g> := <var:g> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assume ( given any $ <var:Z> \in \mathbb{Z}^+ $ ) that $ <var:P> = <var:Z> $ ahead of interpreting our series of instructions , it holds that we have $ <var:g> = <nat:6> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:2> $ . \end{theorem} \begin{proof} The proof of our set of instructions is given with usual Hoare reasoning . Shifting focus toward the proceeding piece of code contained in our segment of code , we have the variable update line yielding $ <nat:2> $ as $ <var:I0>$ . This forwards $ \{ <var:P> = <var:Z> \} $ as the postcondition $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \} $ . Immediately following , we have the variable update code \verb | <var:I1> := <nat:2> ; | . This moves $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \} $ toward the postcondition $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:I1> = <nat:2> \} $ . This is sound through the assignment scheme in standard Hoare logic . Further , the assignment code giving $ <var:I1> * <var:P> $ toward $ <var:I1>$ . This transfers the condition $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:I1> = <nat:2> \} $ as the postcondition $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:I1> = <nat:2> \cdot <var:Z> \} $ . Now , we have the variable binding command \verb | <var:I2> := <nat:6> ; | . This advances the condition $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:I1> = <nat:2> \cdot <var:Z> \} $ as the condition $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:I1> = <nat:2> \cdot <var:Z> \land <var:I2> = <nat:6> \} $ . This is deduced with the assignment rule in Hoare techniques . Jumping to the next step seen in our list of instructions , we see the environment update command giving $ <var:I2> * <var:P> $ as $ <var:I2>$ . This moves the precondition $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:I1> = <nat:2> \cdot <var:Z> \land <var:I2> = <nat:6> \} $ into $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:I1> = <nat:2> \cdot <var:Z> \land <var:I2> = <nat:6> \cdot <var:Z> \} $ . This is rigorously given with the assignment inference rule given by Hoare techniques . Jumping to the subsequent bit of code in the series of commands , we have the assignment command \verb | <var:I2> := <var:I2> * <var:P> ; | . This advances the condition $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:I1> = <nat:2> \cdot <var:Z> \land <var:I2> = <nat:6> \cdot <var:Z> \} $ into $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:I1> = <nat:2> \cdot <var:Z> \land <var:I2> = <nat:6> \cdot <var:Z> ^ <nat:2> \} $ . This is guaranteed through the assignment law given by Hoare reasoning . Honing in on the following line seen in our set of instructions , we have the binding line \verb | <var:g> := <var:I2> ; | . This command redefines $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:I1> = <nat:2> \cdot <var:Z> \land <var:I2> = <nat:6> \cdot <var:Z> ^ <nat:2> \} $ toward $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:I1> = <nat:2> \cdot <var:Z> \land <var:g> = <nat:6> \cdot <var:Z> ^ <nat:2> \} $ . This is deduced by the assignment rule from usual Hoare reasoning . Advancing to the next step , we see the assignment statement \verb | <var:g> := <var:g> + <var:I1> ; | . This moves $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:I1> = <nat:2> \cdot <var:Z> \land <var:g> = <nat:6> \cdot <var:Z> ^ <nat:2> \} $ to the condition $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:g> = <nat:6> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> \} $ . This is rigorously given by the assignment law given by usual Hoare reasoning . Next , we see the line defining $ <var:g> + <var:I0$ to $ <var:g>$ . This command advances the condition $ \{ <var:P> = <var:Z> \land <var:I0> = <nat:2> \land <var:g> = <nat:6> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> \} $ toward the condition $ \{ <var:P> = <var:Z> \land <var:g> = <nat:6> \cdot <var:Z> ^ <nat:2> + <nat:2> \cdot <var:Z> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I0> := <nat:2> ; <var:I1> := <nat:2> ; <var:I1> := <var:I1> * <var:P> ; <var:I2> := <nat:6> ; <var:I2> := <var:I2> * <var:P> ; <var:I2> := <var:I2> * <var:P> ; <var:g> := <var:I2> ; <var:g> := <var:g> + <var:I1> ; <var:g> := <var:g> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:P> = <var:Z> }} <def:poly> {{ <var:g> = <nat:6> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:2> * <var:Z> /\ <var:I2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:2> * <var:Z> /\ <var:I2> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:2> * <var:Z> /\ <var:I2> = <nat:6> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:2> * <var:Z> /\ <var:g> = <nat:6> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:I0> = <nat:2> /\ <var:g> = <nat:6> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:g> = <nat:6> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 