\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:N> := <nat:1> ; <var:N> := <nat:4> + <var:N> * <var:v> ; <var:N> := <nat:3> + <var:N> * <var:v> ; <var:N> := <nat:4> + <var:N> * <var:v> ; <var:N> := <nat:3> + <var:N> * <var:v> ; <var:N> := <nat:2> + <var:N> * <var:v> ; <var:N> := <nat:4> + <var:N> * <var:v> ; <var:N> := <var:N> * <var:v> ; <var:N> := <nat:4> + <var:N> * <var:v> ; <var:N> := <nat:3> + <var:N> * <var:v> ; <var:N> := <nat:2> + <var:N> * <var:v> ; <var:N> := <nat:2> + <var:N> * <var:v> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> in \emph{Imp} . Given that we have $ <var:v> = <var:j> $ before the evaluation of this list of instructions it holds that we have $ <var:N> = <nat:1> * <var:j> ^ <nat:11> + <nat:4> * <var:j> ^ <nat:10> + <nat:3> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:2> $ when list of commands is done . \end{theorem} \begin{proof} The flow of logic for this series of instructions can be done through Hoare techniques . Going to the next step , we have the assignment code \verb | <var:N> := <nat:1> ; | . This forwards the precondition $ \{ <var:v> = <var:j> \} $ toward the condition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \} $ . Stepping forward , the assignment code letting $ <nat:4> + <var:N> * <var:v> $ to $ <var:N>$ . This code redefines $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \} $ toward the postcondition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> + <nat:4> \} $ . This is shown to be logically sound with the assignment inference rule of Hoare reasoning . Considering the subsequent statement contained in the code segment , we have the binding code defining $ <nat:3> + <var:N> * <var:v> $ as $ <var:N>$ . This takes the precondition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> + <nat:4> \} $ into the postcondition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + <nat:3> \} $ . This is known to be sound using the assignment scheme given in typical Hoare reasoning . Following , we have the command defining $ <nat:4> + <var:N> * <var:v> $ into $ <var:N>$ . This transfers the condition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + <nat:3> \} $ to the postcondition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:4> \} $ . Paying attention to the next bit of code contained in our segment of code , we see the statement giving $ <nat:3> + <var:N> * <var:v> $ into $ <var:N>$ . This moves the precondition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:4> \} $ toward the condition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + <nat:3> \} $ . Going to the next step , we have the environment update code defining $ <nat:2> + <var:N> * <var:v> $ to $ <var:N>$ . This command redefines the precondition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + <nat:3> \} $ as $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:2> \} $ . Advancing to the following statement seen in the series of instructions , we have the assignment line letting $ <nat:4> + <var:N> * <var:v> $ to $ <var:N>$ . This command redefines the condition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:2> \} $ into $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:6> + <nat:4> \times <var:j> ^ <nat:5> + <nat:3> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> + <nat:4> \} $ . Advancing to the subsequent line of code seen in our program , the binding command \verb | <var:N> := <var:N> * <var:v> ; | . This moves the precondition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:6> + <nat:4> \times <var:j> ^ <nat:5> + <nat:3> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> + <nat:4> \} $ toward $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:7> + <nat:4> \times <var:j> ^ <nat:6> + <nat:3> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:2> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + \} $ . This is rigorously given through the assignment inference rule found in standard Hoare techniques . Now , the variable binding code defining $ <nat:4> + <var:N> * <var:v> $ to $ <var:N>$ . This forwards the condition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:7> + <nat:4> \times <var:j> ^ <nat:6> + <nat:3> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:2> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + \} $ as the postcondition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:8> + <nat:4> \times <var:j> ^ <nat:7> + <nat:3> \times <var:j> ^ <nat:6> + <nat:4> \times <var:j> ^ <nat:5> + <nat:3> \times <var:j> ^ <nat:4> + <nat:2> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:4> \} $ . Advancing to the subsequent statement found in the list of commands , the environment update command letting $ <nat:3> + <var:N> * <var:v> $ toward $ <var:N>$ . This advances the precondition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:8> + <nat:4> \times <var:j> ^ <nat:7> + <nat:3> \times <var:j> ^ <nat:6> + <nat:4> \times <var:j> ^ <nat:5> + <nat:3> \times <var:j> ^ <nat:4> + <nat:2> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:4> \} $ to the condition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:9> + <nat:4> \times <var:j> ^ <nat:8> + <nat:3> \times <var:j> ^ <nat:7> + <nat:4> \times <var:j> ^ <nat:6> + <nat:3> \times <var:j> ^ <nat:5> + <nat:2> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> + <nat:3> \} $ . Keeping momentum , the assignment code giving $ <nat:2> + <var:N> * <var:v> $ to $ <var:N>$ . This line redefines $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:9> + <nat:4> \times <var:j> ^ <nat:8> + <nat:3> \times <var:j> ^ <nat:7> + <nat:4> \times <var:j> ^ <nat:6> + <nat:3> \times <var:j> ^ <nat:5> + <nat:2> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> + <nat:3> \} $ into the condition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:10> + <nat:4> \times <var:j> ^ <nat:9> + <nat:3> \times <var:j> ^ <nat:8> + <nat:4> \times <var:j> ^ <nat:7> + <nat:3> \times <var:j> ^ <nat:6> + <nat:2> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:2> \} $ . This is ensured by the assignment rule obtained from standard Hoare reasoning . Honing in on the next line of code in our program , we have the environment update command \verb | <var:N> := <nat:2> + <var:N> * <var:v> | . This line forwards the condition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:10> + <nat:4> \times <var:j> ^ <nat:9> + <nat:3> \times <var:j> ^ <nat:8> + <nat:4> \times <var:j> ^ <nat:7> + <nat:3> \times <var:j> ^ <nat:6> + <nat:2> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:2> \} $ to the condition $ \{ <var:v> = <var:j> \land <var:N> = <nat:1> \times <var:j> ^ <nat:11> + <nat:4> \times <var:j> ^ <nat:10> + <nat:3> \times <var:j> ^ <nat:9> + <nat:4> \times <var:j> ^ <nat:8> + <nat:3> \times <var:j> ^ <nat:7> + <nat:2> \times <var:j> ^ <nat:6> + <nat:4> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> + <nat:2> \} $ . This is deduced with the assignment inference rule defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:N> := <nat:1> ; <var:N> := <nat:4> + <var:N> * <var:v> ; <var:N> := <nat:3> + <var:N> * <var:v> ; <var:N> := <nat:4> + <var:N> * <var:v> ; <var:N> := <nat:3> + <var:N> * <var:v> ; <var:N> := <nat:2> + <var:N> * <var:v> ; <var:N> := <nat:4> + <var:N> * <var:v> ; <var:N> := <var:N> * <var:v> ; <var:N> := <nat:4> + <var:N> * <var:v> ; <var:N> := <nat:3> + <var:N> * <var:v> ; <var:N> := <nat:2> + <var:N> * <var:v> ; <var:N> := <nat:2> + <var:N> * <var:v> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:v> = <var:j> }} <def:poly> {{ <var:N> = <nat:1> * <var:j> ^ <nat:11> + <nat:4> * <var:j> ^ <nat:10> + <nat:3> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:N> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:N> = <nat:1> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:N> = <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:N> = <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:N> = <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:N> = <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:N> = <nat:1> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:N> = <nat:1> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:N> = <nat:1> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:N> = <nat:1> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:N> = <nat:1> * <var:j> ^ <nat:10> + <nat:4> * <var:j> ^ <nat:9> + <nat:3> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:N> = <nat:1> * <var:j> ^ <nat:11> + <nat:4> * <var:j> ^ <nat:10> + <nat:3> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:2> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 