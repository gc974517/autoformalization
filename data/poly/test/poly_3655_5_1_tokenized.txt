\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:T1> := <var:D> ; <var:T0> := <nat:6> ; <var:T1> := <var:T1> * <nat:7> ; <var:C> := <var:T1> <var:C> := <var:C> + <var:T0> \end{verbatim} Given $ <var:D> = <var:P> $ ahead of the execution of our set of commands then we have $ <var:C> = <nat:7> * <var:P> + <nat:6> $ . \end{theorem} \begin{proof} Notice the below decorated list of instructions . \begin{eqnarray} \{ <var:D> = <var:P> \} \\ <var:T1> := <var:D> ; \\ \{ <var:D> = <var:P> \land <var:T1> = <var:P> \} \\ <var:T0> := <nat:6> ; \\ \{ <var:D> = <var:P> \land <var:T1> = <var:P> \land <var:T0> = <nat:6> \} \\ <var:T1> := <var:T1> * <nat:7> ; \\ \{ <var:D> = <var:P> \land <var:T1> = <nat:7> * <var:P> \land <var:T0> = <nat:6> \} \\ <var:C> := <var:T1> \\ \{ <var:D> = <var:P> \land <var:T0> = <nat:6> \land <var:C> = <nat:7> * <var:P> \} \\ <var:C> := <var:C> + <var:T0> \\ \{ <var:D> = <var:P> \land <var:C> = <nat:7> * <var:P> + <nat:6> \} \end{eqnarray} Using standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:D> = <var:P> }} <var:T1> := <var:D> ; <var:T0> := <nat:6> ; <var:T1> := <var:T1> * <nat:7> ; <var:C> := <var:T1> <var:C> := <var:C> + <var:T0> {{ <var:C> = <nat:7> * <var:P> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:T1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:T1> = <var:P> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:T1> = <nat:7> * <var:P> /\ <var:T0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:T0> = <nat:6> /\ <var:C> = <nat:7> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:C> = <nat:7> * <var:P> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 