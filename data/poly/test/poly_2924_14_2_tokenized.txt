\begin{document} \begin{theorem} Take a code segment : \begin{verbatim} <var:D> := <nat:2> ; <var:D> := <nat:4> + <var:D> * <var:E> ; <var:D> := <nat:4> + <var:D> * <var:E> ; <var:D> := <nat:1> + <var:D> * <var:E> ; <var:D> := <nat:2> + <var:D> * <var:E> ; <var:D> := <nat:2> + <var:D> * <var:E> ; <var:D> := <nat:3> + <var:D> * <var:E> ; <var:D> := <nat:3> + <var:D> * <var:E> ; <var:D> := <nat:4> + <var:D> * <var:E> ; <var:D> := <nat:1> + <var:D> * <var:E> ; <var:D> := <nat:1> + <var:D> * <var:E> ; <var:D> := <nat:2> + <var:D> * <var:E> ; <var:D> := <nat:4> + <var:D> * <var:E> ; <var:D> := <nat:4> + <var:D> * <var:E> \end{verbatim} Assume that $ <var:E> = <var:C> $ for natural numbers $ <var:C> $ before the execution of this program then $ <var:D> = <nat:2> * <var:C> ^ <nat:13> + <nat:4> * <var:C> ^ <nat:12> + <nat:4> * <var:C> ^ <nat:11> + <nat:1> * <var:C> ^ <nat:10> + <nat:2> * <var:C> ^ <nat:9> + <nat:2> * <var:C> ^ <nat:8> + <nat:3> * <var:C> ^ <nat:7> + <nat:3> * <var:C> ^ <nat:6> + <nat:4> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> $ when segment of code terminates . \end{theorem} \begin{proof} The method of proof for this set of commands can be accomplished using typical Hoare logic . Considering the following line seen in our program , we have the command \verb | <var:D> := <nat:2> ; | . This code redefines the precondition $ \{ <var:E> = <var:C> \} $ to the postcondition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \} $ . This is deduced with the assignment law given by typical Hoare reasoning . Moving on to the next step , we have the variable binding statement \verb | <var:D> := <nat:4> + <var:D> * <var:E> ; | . This takes the precondition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \} $ as the postcondition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> + <nat:4> \} $ . Moving on to the proceeding line found in our set of instructions , we see the variable update code giving $ <nat:4> + <var:D> * <var:E> $ to $ <var:D>$ . This forwards $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> + <nat:4> \} $ as $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:4> \} $ . Focusing on the upcoming command in the list of commands , we have the variable binding code \verb | <var:D> := <nat:1> + <var:D> * <var:E> ; | . This takes the precondition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:4> \} $ as $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:3> + <nat:4> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:1> \} $ . This is known to be sound through the assignment scheme in usual Hoare logic . Focusing on the subsequent line contained in the set of instructions , the variable binding code binding $ <nat:2> + <var:D> * <var:E> $ toward $ <var:D>$ . This command advances $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:3> + <nat:4> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:1> \} $ to $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:4> + <nat:4> \times <var:C> ^ <nat:3> + <nat:4> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:2> \} $ . This is sound with the assignment scheme defined by Hoare techniques . Moving on to the following line of code seen in our code segment , the environment update line binding $ <nat:2> + <var:D> * <var:E> $ toward $ <var:D>$ . This code redefines the precondition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:4> + <nat:4> \times <var:C> ^ <nat:3> + <nat:4> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:2> \} $ as the condition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:5> + <nat:4> \times <var:C> ^ <nat:4> + <nat:4> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:2> \} $ . Honing in on the upcoming piece of code in the code segment , we see the binding code defining $ <nat:3> + <var:D> * <var:E> $ as $ <var:D>$ . This transfers $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:5> + <nat:4> \times <var:C> ^ <nat:4> + <nat:4> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:2> \} $ toward the condition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:6> + <nat:4> \times <var:C> ^ <nat:5> + <nat:4> \times <var:C> ^ <nat:4> + <nat:1> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:3> \} $ . This is known to be sound using the assignment law found in typical Hoare logic . Stepping through , the environment update command yielding $ <nat:3> + <var:D> * <var:E> $ as $ <var:D>$ . This redefines $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:6> + <nat:4> \times <var:C> ^ <nat:5> + <nat:4> \times <var:C> ^ <nat:4> + <nat:1> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:3> \} $ as the postcondition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:7> + <nat:4> \times <var:C> ^ <nat:6> + <nat:4> \times <var:C> ^ <nat:5> + <nat:1> \times <var:C> ^ <nat:4> + <nat:2> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + <nat:3> \} $ . Moving on , we see the assignment command defining $ <nat:4> + <var:D> * <var:E> $ to $ <var:D>$ . This code moves $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:7> + <nat:4> \times <var:C> ^ <nat:6> + <nat:4> \times <var:C> ^ <nat:5> + <nat:1> \times <var:C> ^ <nat:4> + <nat:2> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + <nat:3> \} $ as the postcondition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:8> + <nat:4> \times <var:C> ^ <nat:7> + <nat:4> \times <var:C> ^ <nat:6> + <nat:1> \times <var:C> ^ <nat:5> + <nat:2> \times <var:C> ^ <nat:4> + <nat:2> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + <nat:4> \} $ . This is guaranteed with the assignment rule defined by typical Hoare techniques . Advancing , we have the variable binding code \verb | <var:D> := <nat:1> + <var:D> * <var:E> ; | . This statement takes $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:8> + <nat:4> \times <var:C> ^ <nat:7> + <nat:4> \times <var:C> ^ <nat:6> + <nat:1> \times <var:C> ^ <nat:5> + <nat:2> \times <var:C> ^ <nat:4> + <nat:2> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:3> \times <var:C> + <nat:4> \} $ as the condition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:9> + <nat:4> \times <var:C> ^ <nat:8> + <nat:4> \times <var:C> ^ <nat:7> + <nat:1> \times <var:C> ^ <nat:6> + <nat:2> \times <var:C> ^ <nat:5> + <nat:2> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:1> \} $ . This is deduced with the assignment law from typical Hoare logic . Considering the following line contained in our code segment , we have the variable update code binding $ <nat:1> + <var:D> * <var:E> $ toward $ <var:D>$ . This takes the condition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:9> + <nat:4> \times <var:C> ^ <nat:8> + <nat:4> \times <var:C> ^ <nat:7> + <nat:1> \times <var:C> ^ <nat:6> + <nat:2> \times <var:C> ^ <nat:5> + <nat:2> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:3> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:1> \} $ toward the postcondition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:10> + <nat:4> \times <var:C> ^ <nat:9> + <nat:4> \times <var:C> ^ <nat:8> + <nat:1> \times <var:C> ^ <nat:7> + <nat:2> \times <var:C> ^ <nat:6> + <nat:2> \times <var:C> ^ <nat:5> + <nat:3> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:4> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:1> \} $ . This is given using the assignment rule obtained from typical Hoare logic . Stepping through , we see the environment update command defining $ <nat:2> + <var:D> * <var:E> $ as $ <var:D>$ . This forwards the condition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:10> + <nat:4> \times <var:C> ^ <nat:9> + <nat:4> \times <var:C> ^ <nat:8> + <nat:1> \times <var:C> ^ <nat:7> + <nat:2> \times <var:C> ^ <nat:6> + <nat:2> \times <var:C> ^ <nat:5> + <nat:3> \times <var:C> ^ <nat:4> + <nat:3> \times <var:C> ^ <nat:3> + <nat:4> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:1> \} $ into the postcondition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:11> + <nat:4> \times <var:C> ^ <nat:10> + <nat:4> \times <var:C> ^ <nat:9> + <nat:1> \times <var:C> ^ <nat:8> + <nat:2> \times <var:C> ^ <nat:7> + <nat:2> \times <var:C> ^ <nat:6> + <nat:3> \times <var:C> ^ <nat:5> + <nat:3> \times <var:C> ^ <nat:4> + <nat:4> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:2> \} $ . Jumping to the subsequent step contained in our set of instructions , the environment update command defining $ <nat:4> + <var:D> * <var:E> $ as $ <var:D>$ . This statement moves the condition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:11> + <nat:4> \times <var:C> ^ <nat:10> + <nat:4> \times <var:C> ^ <nat:9> + <nat:1> \times <var:C> ^ <nat:8> + <nat:2> \times <var:C> ^ <nat:7> + <nat:2> \times <var:C> ^ <nat:6> + <nat:3> \times <var:C> ^ <nat:5> + <nat:3> \times <var:C> ^ <nat:4> + <nat:4> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:2> \} $ into the condition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:12> + <nat:4> \times <var:C> ^ <nat:11> + <nat:4> \times <var:C> ^ <nat:10> + <nat:1> \times <var:C> ^ <nat:9> + <nat:2> \times <var:C> ^ <nat:8> + <nat:2> \times <var:C> ^ <nat:7> + <nat:3> \times <var:C> ^ <nat:6> + <nat:3> \times <var:C> ^ <nat:5> + <nat:4> \times <var:C> ^ <nat:4> + <nat:1> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:4> \} $ . This is ensured through the assignment law defined in standard Hoare logic . Moving on to the next step , we see the variable binding code binding $ <nat:4> + <var:D> * <var:E$ as $ <var:D>$ . This code advances the condition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:12> + <nat:4> \times <var:C> ^ <nat:11> + <nat:4> \times <var:C> ^ <nat:10> + <nat:1> \times <var:C> ^ <nat:9> + <nat:2> \times <var:C> ^ <nat:8> + <nat:2> \times <var:C> ^ <nat:7> + <nat:3> \times <var:C> ^ <nat:6> + <nat:3> \times <var:C> ^ <nat:5> + <nat:4> \times <var:C> ^ <nat:4> + <nat:1> \times <var:C> ^ <nat:3> + <nat:1> \times <var:C> ^ <nat:2> + <nat:2> \times <var:C> + <nat:4> \} $ as the postcondition $ \{ <var:E> = <var:C> \land <var:D> = <nat:2> \times <var:C> ^ <nat:13> + <nat:4> \times <var:C> ^ <nat:12> + <nat:4> \times <var:C> ^ <nat:11> + <nat:1> \times <var:C> ^ <nat:10> + <nat:2> \times <var:C> ^ <nat:9> + <nat:2> \times <var:C> ^ <nat:8> + <nat:3> \times <var:C> ^ <nat:7> + <nat:3> \times <var:C> ^ <nat:6> + <nat:4> \times <var:C> ^ <nat:5> + <nat:1> \times <var:C> ^ <nat:4> + <nat:1> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:4> \} $ . This is ensured through the assignment rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:E> = <var:C> }} <var:D> := <nat:2> ; <var:D> := <nat:4> + <var:D> * <var:E> ; <var:D> := <nat:4> + <var:D> * <var:E> ; <var:D> := <nat:1> + <var:D> * <var:E> ; <var:D> := <nat:2> + <var:D> * <var:E> ; <var:D> := <nat:2> + <var:D> * <var:E> ; <var:D> := <nat:3> + <var:D> * <var:E> ; <var:D> := <nat:3> + <var:D> * <var:E> ; <var:D> := <nat:4> + <var:D> * <var:E> ; <var:D> := <nat:1> + <var:D> * <var:E> ; <var:D> := <nat:1> + <var:D> * <var:E> ; <var:D> := <nat:2> + <var:D> * <var:E> ; <var:D> := <nat:4> + <var:D> * <var:E> ; <var:D> := <nat:4> + <var:D> * <var:E> {{ <var:D> = <nat:2> * <var:C> ^ <nat:13> + <nat:4> * <var:C> ^ <nat:12> + <nat:4> * <var:C> ^ <nat:11> + <nat:1> * <var:C> ^ <nat:10> + <nat:2> * <var:C> ^ <nat:9> + <nat:2> * <var:C> ^ <nat:8> + <nat:3> * <var:C> ^ <nat:7> + <nat:3> * <var:C> ^ <nat:6> + <nat:4> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> * <var:C> ^ <nat:6> + <nat:4> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> * <var:C> ^ <nat:7> + <nat:4> * <var:C> ^ <nat:6> + <nat:4> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> * <var:C> ^ <nat:8> + <nat:4> * <var:C> ^ <nat:7> + <nat:4> * <var:C> ^ <nat:6> + <nat:1> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:4> + <nat:2> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> * <var:C> ^ <nat:9> + <nat:4> * <var:C> ^ <nat:8> + <nat:4> * <var:C> ^ <nat:7> + <nat:1> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> * <var:C> ^ <nat:10> + <nat:4> * <var:C> ^ <nat:9> + <nat:4> * <var:C> ^ <nat:8> + <nat:1> * <var:C> ^ <nat:7> + <nat:2> * <var:C> ^ <nat:6> + <nat:2> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:4> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> * <var:C> ^ <nat:11> + <nat:4> * <var:C> ^ <nat:10> + <nat:4> * <var:C> ^ <nat:9> + <nat:1> * <var:C> ^ <nat:8> + <nat:2> * <var:C> ^ <nat:7> + <nat:2> * <var:C> ^ <nat:6> + <nat:3> * <var:C> ^ <nat:5> + <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> * <var:C> ^ <nat:12> + <nat:4> * <var:C> ^ <nat:11> + <nat:4> * <var:C> ^ <nat:10> + <nat:1> * <var:C> ^ <nat:9> + <nat:2> * <var:C> ^ <nat:8> + <nat:2> * <var:C> ^ <nat:7> + <nat:3> * <var:C> ^ <nat:6> + <nat:3> * <var:C> ^ <nat:5> + <nat:4> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:1> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:C> /\ <var:D> = <nat:2> * <var:C> ^ <nat:13> + <nat:4> * <var:C> ^ <nat:12> + <nat:4> * <var:C> ^ <nat:11> + <nat:1> * <var:C> ^ <nat:10> + <nat:2> * <var:C> ^ <nat:9> + <nat:2> * <var:C> ^ <nat:8> + <nat:3> * <var:C> ^ <nat:7> + <nat:3> * <var:C> ^ <nat:6> + <nat:4> * <var:C> ^ <nat:5> + <nat:1> * <var:C> ^ <nat:4> + <nat:1> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 