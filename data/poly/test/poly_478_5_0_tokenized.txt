\begin{document} \begin{theorem} Consider the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:5> ; <var:c1> := <nat:5> ; <var:c1> := <var:c1> * <var:r> ; <var:G> := <var:c1> ; <var:G> := <var:G> + <var:c0> \end{verbatim} Assume assuming some positive numbers $ <var:y> $ it to be that $ <var:r> = <var:y> $ before executing our code segment , it must be that we have $ <var:G> = <nat:5> \times <var:y> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for our segment of code is given through standard Hoare techniques . Considering the proceeding line of code contained in the list of commands , we see the line binding $ <nat:5> $ as $ <var:c0>$ . This takes the precondition $ \{ <var:r> = <var:y> \} $ toward $ \{ <var:r> = <var:y> \land <var:c0> = <nat:5> \} $ . Paying attention to the subsequent line found in our program , we have the assignment command assigning $ <nat:5> $ toward $ <var:c1>$ . This line moves the precondition $ \{ <var:r> = <var:y> \land <var:c0> = <nat:5> \} $ to the postcondition $ \{ <var:r> = <var:y> \land <var:c0> = <nat:5> \land <var:c1> = <nat:5> \} $ . Considering the subsequent piece of code seen in the series of commands , we have the binding command yielding $ <var:c1> * <var:r> $ toward $ <var:c1>$ . This line takes the precondition $ \{ <var:r> = <var:y> \land <var:c0> = <nat:5> \land <var:c1> = <nat:5> \} $ into $ \{ <var:r> = <var:y> \land <var:c0> = <nat:5> \land <var:c1> = <nat:5> * <var:y> \} $ . This is rigorously given with the assignment rule obtained from Hoare techniques . Now , the variable update statement letting $ <var:c1> $ as $ <var:G>$ . This redefines the precondition $ \{ <var:r> = <var:y> \land <var:c0> = <nat:5> \land <var:c1> = <nat:5> * <var:y> \} $ toward the condition $ \{ <var:r> = <var:y> \land <var:c0> = <nat:5> \land <var:G> = <nat:5> * <var:y> \} $ . Moving onward , we have the binding code letting $ <var:G> + <var:c0$ as $ <var:G>$ . This advances $ \{ <var:r> = <var:y> \land <var:c0> = <nat:5> \land <var:G> = <nat:5> * <var:y> \} $ to the postcondition $ \{ <var:r> = <var:y> \land <var:G> = <nat:5> * <var:y> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:r> = <var:y> }} <var:c0> := <nat:5> ; <var:c1> := <nat:5> ; <var:c1> := <var:c1> * <var:r> ; <var:G> := <var:c1> ; <var:G> := <var:G> + <var:c0> {{ <var:G> = <nat:5> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:c0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:c0> = <nat:5> /\ <var:c1> = <nat:5> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:c0> = <nat:5> /\ <var:G> = <nat:5> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:y> /\ <var:G> = <nat:5> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 