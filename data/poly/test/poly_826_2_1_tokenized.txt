\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:2> ; <var:n> := <var:q0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Allow that $ <var:f> = <var:o> $ prior to executing the list of instructions , it must be that we have $ <var:n> = <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program can be done using standard Hoare techniques . After , the code \verb | <var:q0> := <nat:2> ; | . This redefines the precondition $ \{ <var:f> = <var:o> \} $ as $ \{ <var:f> = <var:o> \land <var:q0> = <nat:2> \} $ . Taking another step toward the proceeding command found in our series of instructions , we see the binding code binding $ <var:q0$ as $ <var:n>$ . This forwards the condition $ \{ <var:f> = <var:o> \land <var:q0> = <nat:2> \} $ into the condition $ \{ <var:f> = <var:o> \land <var:n> = <nat:2> \} $ . This is deduced with the assignment rule found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <def:poly> := <var:q0> := <nat:2> ; <var:n> := <var:q0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:f> = <var:o> }} <def:poly> {{ <var:n> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:o> /\ <var:n> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 