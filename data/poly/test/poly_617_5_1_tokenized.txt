\begin{document} \begin{theorem} Define a code segment as follows \begin{verbatim} <var:p1> := <var:L> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:1> ; <var:S> := <var:p1> <var:S> := <var:S> + <var:p0> \end{verbatim} Assuming ( given every $ <var:I> \in \mathbb{Z}^+ $ ) it to be that $ <var:L> = <var:I> $ before running this code segment , it follows that we have $ <var:S> = <nat:1> \cdot <var:I> + <nat:2> $ once set of instructions executes . \end{theorem} \begin{proof} The proof of the series of commands is evident through Hoare techniques . Stepping through , \begin{eqnarray} \{ <var:L> = <var:I> \} \, <var:p1> := <var:L> \, \{ <var:L> = <var:I> \land <var:p1> = <var:I> \} \\ \{ <var:L> = <var:I> \land <var:p1> = <var:I> \} \, <var:p0> := <nat:2> \, \{ <var:L> = <var:I> \land <var:p1> = <var:I> \land <var:p0> = <nat:2> \} \\ \{ <var:L> = <var:I> \land <var:p1> = <var:I> \land <var:p0> = <nat:2> \} \, <var:p1> := <var:p1> * <nat:1> \, \{ <var:L> = <var:I> \land <var:p1> = <nat:1> * <var:I> \land <var:p0> = <nat:2> \} \\ \{ <var:L> = <var:I> \land <var:p1> = <nat:1> * <var:I> \land <var:p0> = <nat:2> \} \, <var:S> := <var:p1\, \{ <var:L> = <var:I> \land <var:p0> = <nat:2> \land <var:S> = <nat:1> * <var:I> \} \end{eqnarray} This is rigorously given through the environment update rule from usual Hoare logic . Shifting focus toward the following statement found in our list of commands , \begin{eqnarray} \{ <var:L> = <var:I> \} \, <var:p1> := <var:L> \, \{ <var:L> = <var:I> \land <var:p1> = <var:I> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:L> = <var:I> }} <var:p1> := <var:L> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:1> ; <var:S> := <var:p1> <var:S> := <var:S> + <var:p0> {{ <var:S> = <nat:1> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:p1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:p1> = <var:I> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:p1> = <nat:1> * <var:I> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:p0> = <nat:2> /\ <var:S> = <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:I> /\ <var:S> = <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 