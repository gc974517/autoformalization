\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G1> := <var:x> ; <var:G2> := <var:G1> * <var:x> ; <var:G3> := <var:G2> * <var:x> ; <var:G0> := <nat:4> ; <var:G2> := <var:G2> * <nat:3> ; <var:G3> := <var:G3> * <nat:4> ; <var:d> := <var:G3> <var:d> := <var:d> + <var:G2> <var:d> := <var:d> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> . Assuming it to be that $ <var:x> = <var:Y> $ ahead of the execution of the list of instructions it holds that $ <var:d> = <nat:4> \cdot <var:Y> ^ <nat:3> + <nat:3> \cdot <var:Y> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for this set of instructions can be accomplished using usual Hoare logic . Observing the proceeding statement seen in our series of commands , the command assigning $ <var:x> $ into $ <var:G1>$ . This statement forwards $ \{ <var:x> = <var:Y> \} $ as the postcondition $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \} $ . This is shown with the assignment inference rule from typical Hoare logic . Now , we see the variable binding command \verb | <var:G2> := <var:G1> * <var:x> ; | . This code advances $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \} $ to the condition $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G2> = <var:Y> ^ <nat:2> \} $ . This is sound by the assignment rule given by usual Hoare techniques . Immediately after , we have the command assigning $ <var:G2> * <var:x> $ into $ <var:G3>$ . This moves the precondition $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G2> = <var:Y> ^ <nat:2> \} $ into the condition $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G2> = <var:Y> ^ <nat:2> \land <var:G3> = <var:Y> ^ <nat:3> \} $ . This is shown to be logically sound with the assignment scheme given by standard Hoare reasoning . Advancing to the next step , the code \verb | <var:G0> := <nat:4> ; | . This transfers $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G2> = <var:Y> ^ <nat:2> \land <var:G3> = <var:Y> ^ <nat:3> \} $ to the postcondition $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G2> = <var:Y> ^ <nat:2> \land <var:G3> = <var:Y> ^ <nat:3> \land <var:G0> = <nat:4> \} $ . This is shown using the assignment rule given by usual Hoare logic . Paying attention to the proceeding line of code found in the code segment , the variable assignmet code \verb | <var:G2> := <var:G2> * <nat:3> ; | . This redefines the precondition $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G2> = <var:Y> ^ <nat:2> \land <var:G3> = <var:Y> ^ <nat:3> \land <var:G0> = <nat:4> \} $ as the condition $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:G3> = <var:Y> ^ <nat:3> \land <var:G0> = <nat:4> \} $ . Advancing to the next step , we have the variable assignmet command defining $ <var:G3> * <nat:4> $ as $ <var:G3>$ . This forwards the precondition $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:G3> = <var:Y> ^ <nat:3> \land <var:G0> = <nat:4> \} $ toward $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:G3> = <nat:4> \times <var:Y> ^ <nat:3> \land <var:G0> = <nat:4> \} $ . Paying attention to the upcoming step seen in the program , we have the variable binding command letting $ <var:G3$ toward $ <var:d>$ . This moves the precondition $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:G3> = <nat:4> \times <var:Y> ^ <nat:3> \land <var:G0> = <nat:4> \} $ to $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:G0> = <nat:4> \land <var:d> = <nat:4> \times <var:Y> ^ <nat:3> \} $ . Paying attention to the subsequent line of code in our series of instructions , we see the binding statement \verb | <var:d> := <var:d> + <var:G2> | . This command advances the condition $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G2> = <nat:3> \times <var:Y> ^ <nat:2> \land <var:G0> = <nat:4> \land <var:d> = <nat:4> \times <var:Y> ^ <nat:3> \} $ into the condition $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G0> = <nat:4> \land <var:d> = <nat:4> \times <var:Y> ^ <nat:3> + <nat:3> \times <var:Y> ^ <nat:2> \} $ . Moving forward to the next step , the variable assignmet command \verb | <var:d> := <var:d> + <var:G0> | . This advances $ \{ <var:x> = <var:Y> \land <var:G1> = <var:Y> \land <var:G0> = <nat:4> \land <var:d> = <nat:4> \times <var:Y> ^ <nat:3> + <nat:3> \times <var:Y> ^ <nat:2> \} $ toward the postcondition $ \{ <var:x> = <var:Y> \land <var:d> = <nat:4> \times <var:Y> ^ <nat:3> + <nat:3> \times <var:Y> ^ <nat:2> + <nat:4> \} $ . This is shown by the assignment rule found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <def:poly> := <var:G1> := <var:x> ; <var:G2> := <var:G1> * <var:x> ; <var:G3> := <var:G2> * <var:x> ; <var:G0> := <nat:4> ; <var:G2> := <var:G2> * <nat:3> ; <var:G3> := <var:G3> * <nat:4> ; <var:d> := <var:G3> <var:d> := <var:d> + <var:G2> <var:d> := <var:d> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:x> = <var:Y> }} <def:poly> {{ <var:d> = <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:G1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:G1> = <var:Y> /\ <var:G2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:G1> = <var:Y> /\ <var:G2> = <var:Y> ^ <nat:2> /\ <var:G3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:G1> = <var:Y> /\ <var:G2> = <var:Y> ^ <nat:2> /\ <var:G3> = <var:Y> ^ <nat:3> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:G1> = <var:Y> /\ <var:G2> = <nat:3> * <var:Y> ^ <nat:2> /\ <var:G3> = <var:Y> ^ <nat:3> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:G1> = <var:Y> /\ <var:G2> = <nat:3> * <var:Y> ^ <nat:2> /\ <var:G3> = <nat:4> * <var:Y> ^ <nat:3> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:G1> = <var:Y> /\ <var:G2> = <nat:3> * <var:Y> ^ <nat:2> /\ <var:G0> = <nat:4> /\ <var:d> = <nat:4> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:G1> = <var:Y> /\ <var:G0> = <nat:4> /\ <var:d> = <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:Y> /\ <var:d> = <nat:4> * <var:Y> ^ <nat:3> + <nat:3> * <var:Y> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 