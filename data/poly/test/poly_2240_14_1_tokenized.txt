\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} as follows \begin{verbatim} <var:S1> := <var:m> ; <var:S2> := <var:S1> * <var:m> ; <var:S3> := <var:S2> * <var:m> ; <var:S4> := <var:S3> * <var:m> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:8> ; <var:S2> := <var:S2> * <nat:6> ; <var:S3> := <var:S3> * <nat:9> ; <var:S4> := <var:S4> * <nat:9> ; <var:g> := <var:S4> <var:g> := <var:g> + <var:S3> <var:g> := <var:g> + <var:S2> <var:g> := <var:g> + <var:S1> <var:g> := <var:g> + <var:S0> \end{verbatim} Assuming that $ <var:m> = <var:y> $ prior to interpreting this segment of code it follows that we see $ <var:g> = <nat:9> * <var:y> ^ <nat:4> + <nat:9> * <var:y> ^ <nat:3> + <nat:6> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:2> $ after series of commands is done . \end{theorem} \begin{proof} The argument for this segment of code is clear with typical Hoare logic . Moving on to the next step , the environment update line yielding $ <var:m> $ toward $ <var:S1>$ . This takes the condition $ \{ <var:m> = <var:y> \} $ toward $ \{ <var:m> = <var:y> \land <var:S1> = <var:y> \} $ . Taking another step toward the next line of code seen in our set of instructions , the variable binding line assigning $ <var:S1> * <var:m> $ toward $ <var:S2>$ . This transfers the condition $ \{ <var:m> = <var:y> \land <var:S1> = <var:y> \} $ as the postcondition $ \{ <var:m> = <var:y> \land <var:S1> = <var:y> \land <var:S2> = <var:y> ^ <nat:2> \} $ . This is guaranteed by the assignment inference rule found in Hoare techniques . Stepping through , we see the assignment statement letting $ <var:S2> * <var:m> $ to $ <var:S3>$ . This statement takes the precondition $ \{ <var:m> = <var:y> \land <var:S1> = <var:y> \land <var:S2> = <var:y> ^ <nat:2> \} $ toward the postcondition $ \{ <var:m> = <var:y> \land <var:S1> = <var:y> \land <var:S2> = <var:y> ^ <nat:2> \land <var:S3> = <var:y> ^ <nat:3> \} $ . This is guaranteed using the assignment law defined by usual Hoare reasoning . Taking a look at the following command in the set of instructions , we see the variable assignmet statement binding $ <var:S3> * <var:m> $ to $ <var:S4>$ . This code redefines $ \{ <var:m> = <var:y> \land <var:S1> = <var:y> \land <var:S2> = <var:y> ^ <nat:2> \land <var:S3> = <var:y> ^ <nat:3> \} $ into the postcondition $ \{ <var:m> = <var:y> \land <var:S1> = <var:y> \land <var:S2> = <var:y> ^ <nat:2> \land <var:S3> = <var:y> ^ <nat:3> \land <var:S4> = <var:y> ^ <nat:4> \} $ . This is guaranteed through the assignment law defined by typical Hoare logic . Jumping to the upcoming step in the series of instructions , we have the assignment line \verb | <var:S0> := <nat:2> ; | . This forwards the precondition $ \{ <var:m> = <var:y> \land <var:S1> = <var:y> \land <var:S2> = <var:y> ^ <nat:2> \land <var:S3> = <var:y> ^ <nat:3> \land <var:S4> = <var:y> ^ <nat:4> \} $ to the condition $ \{ <var:m> = <var:y> \land <var:S1> = <var:y> \land <var:S2> = <var:y> ^ <nat:2> \land <var:S3> = <var:y> ^ <nat:3> \land <var:S4> = <var:y> ^ <nat:4> \land <var:S0> = <nat:2> \} $ . Looking at the next line of code found in our segment of code , we see the variable binding line letting $ <var:S1> * <nat:8> $ into $ <var:S1>$ . This code forwards the precondition $ \{ <var:m> = <var:y> \land <var:S1> = <var:y> \land <var:S2> = <var:y> ^ <nat:2> \land <var:S3> = <var:y> ^ <nat:3> \land <var:S4> = <var:y> ^ <nat:4> \land <var:S0> = <nat:2> \} $ to the postcondition $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S2> = <var:y> ^ <nat:2> \land <var:S3> = <var:y> ^ <nat:3> \land <var:S4> = <var:y> ^ <nat:4> \land <var:S0> = <nat:2> \} $ . Keeping momentum , we see the variable update command \verb | <var:S2> := <var:S2> * <nat:6> ; | . This line moves $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S2> = <var:y> ^ <nat:2> \land <var:S3> = <var:y> ^ <nat:3> \land <var:S4> = <var:y> ^ <nat:4> \land <var:S0> = <nat:2> \} $ toward the condition $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S2> = <nat:6> \times <var:y> ^ <nat:2> \land <var:S3> = <var:y> ^ <nat:3> \land <var:S4> = <var:y> ^ <nat:4> \land <var:S0> = <nat:2> \} $ . Taking a look at the next command seen in the set of instructions , we have the assignment line yielding $ <var:S3> * <nat:9> $ into $ <var:S3>$ . This statement transfers $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S2> = <nat:6> \times <var:y> ^ <nat:2> \land <var:S3> = <var:y> ^ <nat:3> \land <var:S4> = <var:y> ^ <nat:4> \land <var:S0> = <nat:2> \} $ into the condition $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S2> = <nat:6> \times <var:y> ^ <nat:2> \land <var:S3> = <nat:9> \times <var:y> ^ <nat:3> \land <var:S4> = <var:y> ^ <nat:4> \land <var:S0> = <nat:2> \} $ . Stepping forward , the code defining $ <var:S4> * <nat:9> $ to $ <var:S4>$ . This moves $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S2> = <nat:6> \times <var:y> ^ <nat:2> \land <var:S3> = <nat:9> \times <var:y> ^ <nat:3> \land <var:S4> = <var:y> ^ <nat:4> \land <var:S0> = <nat:2> \} $ into the postcondition $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S2> = <nat:6> \times <var:y> ^ <nat:2> \land <var:S3> = <nat:9> \times <var:y> ^ <nat:3> \land <var:S4> = <nat:9> \times <var:y> ^ <nat:4> \land <var:S0> = <nat:2> \} $ . Considering the subsequent bit of code seen in the series of commands , we have the assignment code \verb | <var:g> := <var:S4> | . This line moves the condition $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S2> = <nat:6> \times <var:y> ^ <nat:2> \land <var:S3> = <nat:9> \times <var:y> ^ <nat:3> \land <var:S4> = <nat:9> \times <var:y> ^ <nat:4> \land <var:S0> = <nat:2> \} $ toward $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S2> = <nat:6> \times <var:y> ^ <nat:2> \land <var:S3> = <nat:9> \times <var:y> ^ <nat:3> \land <var:S0> = <nat:2> \land <var:g> = <nat:9> \times <var:y> ^ <nat:4> \} $ . Moving on to the subsequent command seen in the list of instructions , we have the variable assignmet line binding $ <var:g> + <var:S3$ toward $ <var:g>$ . This transfers the precondition $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S2> = <nat:6> \times <var:y> ^ <nat:2> \land <var:S3> = <nat:9> \times <var:y> ^ <nat:3> \land <var:S0> = <nat:2> \land <var:g> = <nat:9> \times <var:y> ^ <nat:4> \} $ to the postcondition $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S2> = <nat:6> \times <var:y> ^ <nat:2> \land <var:S0> = <nat:2> \land <var:g> = <nat:9> \times <var:y> ^ <nat:4> + <nat:9> \times <var:y> ^ <nat:3> \} $ . This is given by the assignment inference rule of Hoare logic . Paying attention to the proceeding piece of code seen in the set of instructions , we see the environment update command binding $ <var:g> + <var:S2$ toward $ <var:g>$ . This line advances the condition $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S2> = <nat:6> \times <var:y> ^ <nat:2> \land <var:S0> = <nat:2> \land <var:g> = <nat:9> \times <var:y> ^ <nat:4> + <nat:9> \times <var:y> ^ <nat:3> \} $ as the postcondition $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S0> = <nat:2> \land <var:g> = <nat:9> \times <var:y> ^ <nat:4> + <nat:9> \times <var:y> ^ <nat:3> + <nat:6> \times <var:y> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment inference rule given in typical Hoare techniques . Considering the subsequent statement found in the code segment , the variable binding code \verb | <var:g> := <var:g> + <var:S1> | . This line moves $ \{ <var:m> = <var:y> \land <var:S1> = <nat:8> \times <var:y> \land <var:S0> = <nat:2> \land <var:g> = <nat:9> \times <var:y> ^ <nat:4> + <nat:9> \times <var:y> ^ <nat:3> + <nat:6> \times <var:y> ^ <nat:2> \} $ as the postcondition $ \{ <var:m> = <var:y> \land <var:S0> = <nat:2> \land <var:g> = <nat:9> \times <var:y> ^ <nat:4> + <nat:9> \times <var:y> ^ <nat:3> + <nat:6> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> \} $ . This is ensured through the assignment rule defined in Hoare reasoning . Taking a look at the following line of code found in our series of commands , we have the variable binding command \verb | <var:g> := <var:g> + <var:S0> | . This statement takes the condition $ \{ <var:m> = <var:y> \land <var:S0> = <nat:2> \land <var:g> = <nat:9> \times <var:y> ^ <nat:4> + <nat:9> \times <var:y> ^ <nat:3> + <nat:6> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> \} $ toward the postcondition $ \{ <var:m> = <var:y> \land <var:g> = <nat:9> \times <var:y> ^ <nat:4> + <nat:9> \times <var:y> ^ <nat:3> + <nat:6> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <var:S4> : string := " <var:S4> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:m> = <var:y> }} <var:S1> := <var:m> ; <var:S2> := <var:S1> * <var:m> ; <var:S3> := <var:S2> * <var:m> ; <var:S4> := <var:S3> * <var:m> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:8> ; <var:S2> := <var:S2> * <nat:6> ; <var:S3> := <var:S3> * <nat:9> ; <var:S4> := <var:S4> * <nat:9> ; <var:g> := <var:S4> <var:g> := <var:g> + <var:S3> <var:g> := <var:g> + <var:S2> <var:g> := <var:g> + <var:S1> <var:g> := <var:g> + <var:S0> {{ <var:g> = <nat:9> * <var:y> ^ <nat:4> + <nat:9> * <var:y> ^ <nat:3> + <nat:6> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:S1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:S1> = <var:y> /\ <var:S2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:S1> = <var:y> /\ <var:S2> = <var:y> ^ <nat:2> /\ <var:S3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:S1> = <var:y> /\ <var:S2> = <var:y> ^ <nat:2> /\ <var:S3> = <var:y> ^ <nat:3> /\ <var:S4> = <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:S1> = <var:y> /\ <var:S2> = <var:y> ^ <nat:2> /\ <var:S3> = <var:y> ^ <nat:3> /\ <var:S4> = <var:y> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:S1> = <nat:8> * <var:y> /\ <var:S2> = <var:y> ^ <nat:2> /\ <var:S3> = <var:y> ^ <nat:3> /\ <var:S4> = <var:y> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:S1> = <nat:8> * <var:y> /\ <var:S2> = <nat:6> * <var:y> ^ <nat:2> /\ <var:S3> = <var:y> ^ <nat:3> /\ <var:S4> = <var:y> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:S1> = <nat:8> * <var:y> /\ <var:S2> = <nat:6> * <var:y> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:y> ^ <nat:3> /\ <var:S4> = <var:y> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:S1> = <nat:8> * <var:y> /\ <var:S2> = <nat:6> * <var:y> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:y> ^ <nat:3> /\ <var:S4> = <nat:9> * <var:y> ^ <nat:4> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:S1> = <nat:8> * <var:y> /\ <var:S2> = <nat:6> * <var:y> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:y> ^ <nat:3> /\ <var:S0> = <nat:2> /\ <var:g> = <nat:9> * <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:S1> = <nat:8> * <var:y> /\ <var:S2> = <nat:6> * <var:y> ^ <nat:2> /\ <var:S0> = <nat:2> /\ <var:g> = <nat:9> * <var:y> ^ <nat:4> + <nat:9> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:S1> = <nat:8> * <var:y> /\ <var:S0> = <nat:2> /\ <var:g> = <nat:9> * <var:y> ^ <nat:4> + <nat:9> * <var:y> ^ <nat:3> + <nat:6> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:S0> = <nat:2> /\ <var:g> = <nat:9> * <var:y> ^ <nat:4> + <nat:9> * <var:y> ^ <nat:3> + <nat:6> * <var:y> ^ <nat:2> + <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:y> /\ <var:g> = <nat:9> * <var:y> ^ <nat:4> + <nat:9> * <var:y> ^ <nat:3> + <nat:6> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 