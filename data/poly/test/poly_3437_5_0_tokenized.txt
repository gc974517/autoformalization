\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:2> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:D> ; <var:M> := <var:K1> ; <var:M> := <var:M> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:D> = <var:a> $ ahead of the execution of our list of commands it follows that we have $ <var:M> = <nat:3> \cdot <var:a> + <nat:2> $ after series of instructions has terminated . \end{theorem} \begin{proof} See that the below decorated code . \begin{eqnarray} \{ <var:D> = <var:a> \} \\ <var:K0> := <nat:2> ; \\ \{ <var:D> = <var:a> \land <var:K0> = <nat:2> \} \\ <var:K1> := <nat:3> ; \\ \{ <var:D> = <var:a> \land <var:K0> = <nat:2> \land <var:K1> = <nat:3> \} \\ <var:K1> := <var:K1> * <var:D> ; \\ \{ <var:D> = <var:a> \land <var:K0> = <nat:2> \land <var:K1> = <nat:3> \cdot <var:a> \} \end{eqnarray} Allowing evaluating our series of commands gives : \begin{eqnarray} <var:M> := <var:K1> ; \\ \{ <var:D> = <var:a> \land <var:K0> = <nat:2> \land <var:M> = <nat:3> \cdot <var:a> \} \\ <var:M> := <var:M> + <var:K0> \\ \{ <var:D> = <var:a> \land <var:M> = <nat:3> \cdot <var:a> + <nat:2> \} \end{eqnarray} Using standard Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K0> := <nat:2> ; <var:K1> := <nat:3> ; <var:K1> := <var:K1> * <var:D> ; <var:M> := <var:K1> ; <var:M> := <var:M> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:D> = <var:a> }} <def:poly> {{ <var:M> = <nat:3> * <var:a> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:K0> = <nat:2> /\ <var:K1> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:K0> = <nat:2> /\ <var:M> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:a> /\ <var:M> = <nat:3> * <var:a> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 