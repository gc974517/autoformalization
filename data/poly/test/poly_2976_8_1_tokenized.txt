\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:J1> := <var:j> ; <var:J2> := <var:J1> * <var:j> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:3> ; <var:J2> := <var:J2> * <nat:2> ; <var:t> := <var:J2> <var:t> := <var:t> + <var:J1> <var:t> := <var:t> + <var:J0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> in \emph{Imp} . Assuming that we have $ <var:j> = <var:n> $ ( for $ <var:n> $ ) before executing our segment of code it follows that we have $ <var:t> = <nat:2> \cdot <var:n> ^ <nat:2> + <nat:3> \cdot <var:n> + <nat:4> $ after series of instructions has exited . \end{theorem} \begin{proof} Applying usual Hoare logic results in : \begin{eqnarray} \{ <var:j> = <var:n> \} \\ <var:J1> := <var:j> ; \\ \{ <var:j> = <var:n> \land <var:J1> = <var:n> \} \\ <var:J2> := <var:J1> * <var:j> ; \\ \{ <var:j> = <var:n> \land <var:J1> = <var:n> \land <var:J2> = <var:n> ^ <nat:2> \} \\ <var:J0> := <nat:4> ; \\ \{ <var:j> = <var:n> \land <var:J1> = <var:n> \land <var:J2> = <var:n> ^ <nat:2> \land <var:J0> = <nat:4> \} \\ <var:J1> := <var:J1> * <nat:3> ; \\ \{ <var:j> = <var:n> \land <var:J1> = <nat:3> * <var:n> \land <var:J2> = <var:n> ^ <nat:2> \land <var:J0> = <nat:4> \} \\ <var:J2> := <var:J2> * <nat:2> ; \\ \{ <var:j> = <var:n> \land <var:J1> = <nat:3> * <var:n> \land <var:J2> = <nat:2> * <var:n> ^ <nat:2> \land <var:J0> = <nat:4> \} \\ <var:t> := <var:J2> \\ \{ <var:j> = <var:n> \land <var:J1> = <nat:3> * <var:n> \land <var:J0> = <nat:4> \land <var:t> = <nat:2> * <var:n> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:J1> \\ \{ <var:j> = <var:n> \land <var:J0> = <nat:4> \land <var:t> = <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> \} \\ <var:t> := <var:t> + <var:J0> \\ \{ <var:j> = <var:n> \land <var:t> = <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> \} \end{eqnarray} As a consequence , this program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <def:poly> := <var:J1> := <var:j> ; <var:J2> := <var:J1> * <var:j> ; <var:J0> := <nat:4> ; <var:J1> := <var:J1> * <nat:3> ; <var:J2> := <var:J2> * <nat:2> ; <var:t> := <var:J2> <var:t> := <var:t> + <var:J1> <var:t> := <var:t> + <var:J0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:j> = <var:n> }} <def:poly> {{ <var:t> = <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:n> /\ <var:J1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:n> /\ <var:J1> = <var:n> /\ <var:J2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:n> /\ <var:J1> = <var:n> /\ <var:J2> = <var:n> ^ <nat:2> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:n> /\ <var:J1> = <nat:3> * <var:n> /\ <var:J2> = <var:n> ^ <nat:2> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:n> /\ <var:J1> = <nat:3> * <var:n> /\ <var:J2> = <nat:2> * <var:n> ^ <nat:2> /\ <var:J0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:n> /\ <var:J1> = <nat:3> * <var:n> /\ <var:J0> = <nat:4> /\ <var:t> = <nat:2> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:n> /\ <var:J0> = <nat:4> /\ <var:t> = <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:n> /\ <var:t> = <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 