\begin{document} \begin{theorem} We define a list of commands in \emph{Imp} such that \begin{verbatim} <var:C0> := <nat:1> ; <var:H> := <var:C0> \end{verbatim} Assume it to hold that $ <var:o> = <var:F> $ taking $ <var:F> \in \mathbb{Z}^+ $ prior to running our segment of code it holds that we see $ <var:H> = <nat:1> $ once segment of code executes . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions is demonstrated through Hoare reasoning . Moving forward , \begin{eqnarray} \{ <var:o> = <var:F> \} \, <var:C0> := <nat:1> \, \{ <var:o> = <var:F> \land <var:C0> = <nat:1> \} \\ \{ <var:o> = <var:F> \land <var:C0> = <nat:1> \} \, <var:H> := <var:C0\, \{ <var:o> = <var:F> \land <var:H> = <nat:1> \} \end{eqnarray} This is ensured with the environment update inference rule obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:o> = <var:F> }} <var:C0> := <nat:1> ; <var:H> := <var:C0> {{ <var:H> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:F> /\ <var:H> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 