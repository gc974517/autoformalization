\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p> := <nat:3> ; <var:p> := <nat:2> + <var:p> * <var:r> ; <var:p> := <var:p> * <var:r> ; <var:p> := <nat:3> + <var:p> * <var:r> ; <var:p> := <nat:2> + <var:p> * <var:r> ; <var:p> := <nat:2> + <var:p> * <var:r> ; <var:p> := <nat:4> + <var:p> * <var:r> ; <var:p> := <nat:4> + <var:p> * <var:r> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:r> = <var:i> $ before evaluating this code segment , it must be that $ <var:p> = <nat:3> \times <var:i> ^ <nat:7> + <nat:2> \times <var:i> ^ <nat:6> + <nat:3> \times <var:i> ^ <nat:4> + <nat:2> \times <var:i> ^ <nat:3> + <nat:2> \times <var:i> ^ <nat:2> + <nat:4> \times <var:i> + <nat:4> $ after segment of code exits . \end{theorem} \begin{proof} Proving correctness for this program can be accomplished using usual Hoare reasoning . Following , we see the statement \verb | <var:p> := <nat:3> ; | . This line redefines the condition $ \{ <var:r> = <var:i> \} $ as the postcondition $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> \} $ . Honing in on the upcoming piece of code found in the segment of code , we have the variable assignmet line \verb | <var:p> := <nat:2> + <var:p> * <var:r> ; | . This transfers the condition $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> \} $ to the condition $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> * <var:i> + <nat:2> \} $ . Moving forward , we have the variable assignmet command yielding $ <var:p> * <var:r> $ into $ <var:p>$ . This line moves the condition $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> * <var:i> + <nat:2> \} $ to the condition $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + \} $ . Taking another step toward the upcoming statement found in our set of instructions , we see the assignment command binding $ <nat:3> + <var:p> * <var:r> $ as $ <var:p>$ . This code moves the condition $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + \} $ toward $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:3> \} $ . This is sound through the assignment law from Hoare techniques . Moving on to the upcoming step seen in our series of instructions , the variable binding command defining $ <nat:2> + <var:p> * <var:r> $ into $ <var:p>$ . This transfers $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:3> \} $ to the condition $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:3> * <var:i> + <nat:2> \} $ . This is rigorously given using the assignment inference rule given in typical Hoare techniques . Observing the upcoming statement in the program , we have the binding command yielding $ <nat:2> + <var:p> * <var:r> $ toward $ <var:p>$ . This moves $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:3> * <var:i> + <nat:2> \} $ into the postcondition $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> \} $ . Shifting focus toward the subsequent bit of code found in our set of commands , the binding statement defining $ <nat:4> + <var:p> * <var:r> $ to $ <var:p>$ . This line advances the condition $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> \} $ as $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:4> \} $ . Looking at the following line of code seen in our code , we have the assignment code binding $ <nat:4> + <var:p> * <var:r$ as $ <var:p>$ . This line forwards the precondition $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:4> \} $ as the condition $ \{ <var:r> = <var:i> \land <var:p> = <nat:3> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:3> ; <var:p> := <nat:2> + <var:p> * <var:r> ; <var:p> := <var:p> * <var:r> ; <var:p> := <nat:3> + <var:p> * <var:r> ; <var:p> := <nat:2> + <var:p> * <var:r> ; <var:p> := <nat:2> + <var:p> * <var:r> ; <var:p> := <nat:4> + <var:p> * <var:r> ; <var:p> := <nat:4> + <var:p> * <var:r> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:r> = <var:i> }} <def:poly> {{ <var:p> = <nat:3> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:p> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:p> = <nat:3> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:p> = <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:p> = <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:p> = <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:3> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:p> = <nat:3> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:p> = <nat:3> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:i> /\ <var:p> = <nat:3> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:3> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 