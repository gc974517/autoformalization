\begin{document} \begin{theorem} Let the following program in \emph{Imp} as follows \begin{verbatim} <var:F> := <nat:2> ; <var:F> := <nat:4> + <var:F> * <var:X> \end{verbatim} Given $ <var:X> = <var:Z> $ ahead of executing this set of commands it follows that $ <var:F> = <nat:2> * <var:Z> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:Z> \} \\ <var:F> := <nat:2> ; \\ \{ <var:X> = <var:Z> \land <var:F> = <nat:2> \} \\ <var:F> := <nat:4> + <var:F> * <var:X> \\ \{ <var:X> = <var:Z> \land <var:F> = <nat:2> \times <var:Z> + <nat:4> \} \end{eqnarray} The application of typical Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:X> = <var:Z> }} <var:F> := <nat:2> ; <var:F> := <nat:4> + <var:F> * <var:X> {{ <var:F> = <nat:2> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:F> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Z> /\ <var:F> = <nat:2> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 