\begin{document} \begin{theorem} We define the following segment of code in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:7> ; <var:K> := <var:z0> \end{verbatim} Assume $ <var:c> = <var:L> $ , given every whole numbers $ <var:L> $ , prior to evaluating this code segment , then we have $ <var:K> = <nat:7> $ after list of instructions has finished executing . \end{theorem} \begin{proof} Proving correctness for this code can be given with standard Hoare logic . Moving on to the next step , we see the variable binding statement defining $ <nat:7> $ to $ <var:z0>$ . This forwards $ \{ <var:c> = <var:L> \} $ to $ \{ <var:c> = <var:L> \land <var:z0> = <nat:7> \} $ . Moving forward to the following line of code contained in our series of commands , the variable binding statement \verb | <var:K> := <var:z0> | . This line advances the condition $ \{ <var:c> = <var:L> \land <var:z0> = <nat:7> \} $ as the condition $ \{ <var:c> = <var:L> \land <var:K> = <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:c> = <var:L> }} <var:z0> := <nat:7> ; <var:K> := <var:z0> {{ <var:K> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:L> /\ <var:K> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 