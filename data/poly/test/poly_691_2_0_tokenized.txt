\begin{document} \begin{theorem} We define the following code segment as \begin{verbatim} <var:M0> := <nat:4> ; <var:N> := <var:M0> \end{verbatim} Given it to be that $ <var:v> = <var:z> $ ( given all positive integers $ <var:z> $ ) before running the list of instructions , then we see $ <var:N> = <nat:4> $ . \end{theorem} \begin{proof} We can see that this decorated set of instructions . \begin{eqnarray} \{ <var:v> = <var:z> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:v> = <var:z> \land <var:M0> = <nat:4> \} \end{eqnarray} Continuing executing this series of commands produces : \begin{eqnarray} <var:N> := <var:M0> \\ \{ <var:v> = <var:z> \land <var:N> = <nat:4> \} \end{eqnarray} The application of standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:v> = <var:z> }} <var:M0> := <nat:4> ; <var:N> := <var:M0> {{ <var:N> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:z> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:z> /\ <var:N> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 