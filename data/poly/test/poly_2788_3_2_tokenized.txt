\begin{document} \begin{theorem} Define a series of instructions as follows \begin{verbatim} <var:H> := <nat:3> ; <var:H> := <var:H> * <var:w> ; <var:H> := <nat:3> + <var:H> * <var:w> \end{verbatim} Allowing that we have $ <var:w> = <var:b> $ prior to evaluating our program it must be that we see $ <var:H> = <nat:3> * <var:b> ^ <nat:2> + <nat:3> $ after list of instructions exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:b> \} \\ <var:H> := <nat:3> ; \\ \{ <var:w> = <var:b> \land <var:H> = <nat:3> \} \\ <var:H> := <var:H> * <var:w> ; \\ \{ <var:w> = <var:b> \land <var:H> = <nat:3> * <var:b> + \} \\ <var:H> := <nat:3> + <var:H> * <var:w> \\ \{ <var:w> = <var:b> \land <var:H> = <nat:3> * <var:b> ^ <nat:2> + <nat:3> \} \end{eqnarray} Using usual Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:w> = <var:b> }} <var:H> := <nat:3> ; <var:H> := <var:H> * <var:w> ; <var:H> := <nat:3> + <var:H> * <var:w> {{ <var:H> = <nat:3> * <var:b> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:b> /\ <var:H> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:b> /\ <var:H> = <nat:3> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:b> /\ <var:H> = <nat:3> * <var:b> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 