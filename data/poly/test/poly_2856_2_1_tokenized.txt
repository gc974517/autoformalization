\begin{document} \begin{theorem} Let the following set of commands such that \begin{verbatim} <var:V0> := <nat:3> ; <var:D> := <var:V0> \end{verbatim} Given it to be that $ <var:Z> = <var:W> $ before interpreting this list of commands , then $ <var:D> = <nat:3> $ when series of instructions has exited . \end{theorem} \begin{proof} Applying typical Hoare reasoning produces : \begin{eqnarray} \{ <var:Z> = <var:W> \} \\ <var:V0> := <nat:3> ; \\ \{ <var:Z> = <var:W> \land <var:V0> = <nat:3> \} \\ <var:D> := <var:V0> \\ \{ <var:Z> = <var:W> \land <var:D> = <nat:3> \} \end{eqnarray} Thus , our list of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:Z> = <var:W> }} <var:V0> := <nat:3> ; <var:D> := <var:V0> {{ <var:D> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:W> /\ <var:D> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 