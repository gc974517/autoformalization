\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q0> := <nat:3> ; <var:S> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:G> = <var:x> $ ahead of executing our list of instructions it must be that we have $ <var:S> = <nat:3> $ when code segment executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:x> \} \\ <var:Q0> := <nat:3> ; \\ \{ <var:G> = <var:x> \land <var:Q0> = <nat:3> \} \\ <var:S> := <var:Q0> \\ \{ <var:G> = <var:x> \land <var:S> = <nat:3> \} \end{eqnarray} Using typical Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:3> ; <var:S> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:G> = <var:x> }} <def:poly> {{ <var:S> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:Q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:x> /\ <var:S> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 