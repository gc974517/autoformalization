\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} such that \begin{verbatim} <var:o0> := <nat:1> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:U> ; <var:o3> := <nat:4> ; <var:o3> := <var:o3> * <var:U> ; <var:o3> := <var:o3> * <var:U> ; <var:o3> := <var:o3> * <var:U> ; <var:j> := <var:o3> ; <var:j> := <var:j> + <var:o1> ; <var:j> := <var:j> + <var:o0> \end{verbatim} Allowing that we have $ <var:U> = <var:g> $ ahead of interpreting our program , it follows that we see $ <var:j> = <nat:4> \cdot <var:g> ^ <nat:3> + <nat:1> \cdot <var:g> + <nat:1> $ when code segment exits . \end{theorem} \begin{proof} The method of proof for our series of commands can be accomplished with standard Hoare techniques . Going to the next step , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:g> \} & <var:o0> := <nat:1> & \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \} \\ \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \} & <var:o1> := <nat:1> & \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \land <var:o1> = <nat:1> \} \\ \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \land <var:o1> = <nat:1> \} & <var:o1> := <var:o1> * <var:U> & \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \land <var:o1> = <nat:1> \times <var:g> \} \end{tabular} This is shown to be logically sound with the binding scheme in Hoare logic . Moving forward to the next statements contained in our code , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:g> \} & <var:o0> := <nat:1> & \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \} \\ \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \} & <var:o1> := <nat:1> & \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \land <var:o1> = <nat:1> \} \\ \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \land <var:o1> = <nat:1> \} & <var:o1> := <var:o1> * <var:U> & \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \land <var:o1> = <nat:1> \times <var:g> \} \end{tabular} This is sound through the variable update inference rule given in standard Hoare reasoning . Advancing to the upcoming line of code found in the code segment , \[ \begin{tabular} {rcl} \{ <var:U> = <var:g> \} & <var:o0> := <nat:1> & \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \} \end{tabular} This is ensured using the rule in standard Hoare logic . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:U> = <var:g> \} & <var:o0> := <nat:1> & \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \} \\ \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \} & <var:o1> := <nat:1> & \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \land <var:o1> = <nat:1> \} \\ \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \land <var:o1> = <nat:1> \} & <var:o1> := <var:o1> * <var:U> & \{ <var:U> = <var:g> \land <var:o0> = <nat:1> \land <var:o1> = <nat:1> \times <var:g> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:U> = <var:g> }} <var:o0> := <nat:1> ; <var:o1> := <nat:1> ; <var:o1> := <var:o1> * <var:U> ; <var:o3> := <nat:4> ; <var:o3> := <var:o3> * <var:U> ; <var:o3> := <var:o3> * <var:U> ; <var:o3> := <var:o3> * <var:U> ; <var:j> := <var:o3> ; <var:j> := <var:j> + <var:o1> ; <var:j> := <var:j> + <var:o0> {{ <var:j> = <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:g> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:g> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:g> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:g> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:1> * <var:g> /\ <var:o3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:g> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:1> * <var:g> /\ <var:o3> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:g> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:1> * <var:g> /\ <var:o3> = <nat:4> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:g> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:1> * <var:g> /\ <var:o3> = <nat:4> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:g> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:1> * <var:g> /\ <var:j> = <nat:4> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:g> /\ <var:o0> = <nat:1> /\ <var:j> = <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:g> /\ <var:j> = <nat:4> * <var:g> ^ <nat:3> + <nat:1> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 