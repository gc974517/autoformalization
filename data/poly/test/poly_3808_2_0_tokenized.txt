\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:A0> := <nat:6> ; <var:M> := <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:F> = <var:a> $ --- taking positive numbers $ <var:a> $ --- before executing our series of commands , it follows that we see $ <var:M> = <nat:6> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning results in : \begin{eqnarray} \{ <var:F> = <var:a> \} \\ <var:A0> := <nat:6> ; \\ \{ <var:F> = <var:a> \land <var:A0> = <nat:6> \} \\ <var:M> := <var:A0> \\ \{ <var:F> = <var:a> \land <var:M> = <nat:6> \} \end{eqnarray} Furthering running the series of commands produces : \begin{eqnarray} \end{eqnarray} Considering the preceding argument , this set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <def:poly> := <var:A0> := <nat:6> ; <var:M> := <var:A0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:F> = <var:a> }} <def:poly> {{ <var:M> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:A0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:a> /\ <var:M> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 