\begin{document} \begin{theorem} Consider a series of instructions such that \begin{verbatim} <var:t> := <nat:3> ; <var:t> := <nat:2> + <var:t> * <var:y> ; <var:t> := <var:t> * <var:y> ; <var:t> := <nat:3> + <var:t> * <var:y> \end{verbatim} Allowing $ <var:y> = <var:o> $ ahead of evaluating this set of instructions , it holds that we see $ <var:t> = <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our list of commands is clear by standard Hoare logic . Moving on to the next step , we see \begin{eqnarray} \{ <var:y> = <var:o> \} \, <var:t> := <nat:3> \, \{ <var:y> = <var:o> \land <var:t> = <nat:3> \} \\ \{ <var:y> = <var:o> \land <var:t> = <nat:3> \} \, <var:t> := <nat:2> + <var:t> * <var:y> \, \{ <var:y> = <var:o> \land <var:t> = <nat:3> * <var:o> + <nat:2> \} \\ \{ <var:y> = <var:o> \land <var:t> = <nat:3> * <var:o> + <nat:2> \} \, <var:t> := <var:t> * <var:y> \, \{ <var:y> = <var:o> \land <var:t> = <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + \} \\ \{ <var:y> = <var:o> \land <var:t> = <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + \} \, <var:t> := <nat:3> + <var:t> * <var:y\, \{ <var:y> = <var:o> \land <var:t> = <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> \} \end{eqnarray} This is sound using the variable assignmet rule defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:y> = <var:o> }} <var:t> := <nat:3> ; <var:t> := <nat:2> + <var:t> * <var:y> ; <var:t> := <var:t> * <var:y> ; <var:t> := <nat:3> + <var:t> * <var:y> {{ <var:t> = <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:t> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:t> = <nat:3> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:t> = <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:t> = <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 