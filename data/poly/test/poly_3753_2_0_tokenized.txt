\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:1> ; <var:Y> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:y> = <var:U> $ ( letting natural numbers $ <var:U> $ ) before interpreting our series of commands , it must be that we have $ <var:Y> = <nat:1> $ . \end{theorem} \begin{proof} The course of logic for this series of instructions is shown through Hoare logic . Taking another step toward the upcoming step seen in the set of commands , we have the environment update command assigning $ <nat:1> $ as $ <var:e0>$ . This code transfers the condition $ \{ <var:y> = <var:U> \} $ as $ \{ <var:y> = <var:U> \land <var:e0> = <nat:1> \} $ . Advancing to the subsequent piece of code in our series of commands , we have the variable assignmet statement assigning $ <var:e0$ to $ <var:Y>$ . This statement takes the condition $ \{ <var:y> = <var:U> \land <var:e0> = <nat:1> \} $ as the postcondition $ \{ <var:y> = <var:U> \land <var:Y> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:1> ; <var:Y> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:y> = <var:U> }} <def:poly> {{ <var:Y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:U> /\ <var:Y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 