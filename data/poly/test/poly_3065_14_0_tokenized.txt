\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H0> := <nat:1> ; <var:H1> := <nat:5> ; <var:H1> := <var:H1> * <var:U> ; <var:H2> := <nat:5> ; <var:H2> := <var:H2> * <var:U> ; <var:H2> := <var:H2> * <var:U> ; <var:H3> := <nat:4> ; <var:H3> := <var:H3> * <var:U> ; <var:H3> := <var:H3> * <var:U> ; <var:H3> := <var:H3> * <var:U> ; <var:g> := <var:H3> ; <var:g> := <var:g> + <var:H2> ; <var:g> := <var:g> + <var:H1> ; <var:g> := <var:g> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:U> = <var:q> $ before executing the set of commands , it must be that we see $ <var:g> = <nat:4> \cdot <var:q> ^ <nat:3> + <nat:5> \cdot <var:q> ^ <nat:2> + <nat:5> \cdot <var:q> + <nat:1> $ once set of instructions is done . \end{theorem} \begin{proof} The proof of our list of instructions can be given with typical Hoare logic . Observing the proceeding step found in our program , the variable update code \verb | <var:H0> := <nat:1> ; | . This moves the precondition $ \{ <var:U> = <var:q> \} $ as $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \} $ . Advancing to the next step , we see the binding command \verb | <var:H1> := <nat:5> ; | . This forwards the condition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \} $ as $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \} $ . This is ensured with the assignment scheme from standard Hoare reasoning . Moving forward , the variable assignmet statement \verb | <var:H1> := <var:H1> * <var:U> ; | . This command redefines $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \} $ to the condition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \} $ . This is ensured using the assignment scheme given by typical Hoare techniques . Immediately following , we have the assignment command \verb | <var:H2> := <nat:5> ; | . This code transfers $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \} $ as $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \} $ . This is shown through the assignment inference rule given in typical Hoare reasoning . Going forward , the variable assignmet statement letting $ <var:H2> * <var:U> $ to $ <var:H2>$ . This takes the precondition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \} $ to the condition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> \} $ . This is guaranteed using the assignment scheme given in typical Hoare techniques . Considering the following statement in the series of commands , the variable assignmet code assigning $ <var:H2> * <var:U> $ to $ <var:H2>$ . This transfers the condition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> \} $ to the postcondition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> ^ <nat:2> \} $ . This is rigorously given with the assignment rule found in Hoare reasoning . Stepping forward , the binding statement giving $ <nat:4> $ toward $ <var:H3>$ . This code moves $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> ^ <nat:2> \} $ to $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> ^ <nat:2> \land <var:H3> = <nat:4> \} $ . This is ensured by the assignment scheme defined by typical Hoare logic . Now , we have the assignment command \verb | <var:H3> := <var:H3> * <var:U> ; | . This takes $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> ^ <nat:2> \land <var:H3> = <nat:4> \} $ into $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> ^ <nat:2> \land <var:H3> = <nat:4> \times <var:q> \} $ . This is shown to be logically sound using the assignment inference rule obtained from typical Hoare reasoning . Immediately following , the variable binding command \verb | <var:H3> := <var:H3> * <var:U> ; | . This statement moves the condition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> ^ <nat:2> \land <var:H3> = <nat:4> \times <var:q> \} $ to the postcondition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> ^ <nat:2> \land <var:H3> = <nat:4> \times <var:q> ^ <nat:2> \} $ . Paying attention to the upcoming step seen in the code segment , we see the command defining $ <var:H3> * <var:U> $ toward $ <var:H3>$ . This code moves the precondition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> ^ <nat:2> \land <var:H3> = <nat:4> \times <var:q> ^ <nat:2> \} $ into $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> ^ <nat:2> \land <var:H3> = <nat:4> \times <var:q> ^ <nat:3> \} $ . Now , we have the assignment code yielding $ <var:H3> $ toward $ <var:g>$ . This statement transfers the precondition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> ^ <nat:2> \land <var:H3> = <nat:4> \times <var:q> ^ <nat:3> \} $ to $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> ^ <nat:2> \land <var:g> = <nat:4> \times <var:q> ^ <nat:3> \} $ . Further , we see the binding command \verb | <var:g> := <var:g> + <var:H2> ; | . This code forwards the condition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:H2> = <nat:5> \times <var:q> ^ <nat:2> \land <var:g> = <nat:4> \times <var:q> ^ <nat:3> \} $ as the condition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:g> = <nat:4> \times <var:q> ^ <nat:3> + <nat:5> \times <var:q> ^ <nat:2> \} $ . This is shown with the assignment scheme from standard Hoare techniques . Advancing on , we have the binding statement \verb | <var:g> := <var:g> + <var:H1> ; | . This command redefines the condition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:H1> = <nat:5> \times <var:q> \land <var:g> = <nat:4> \times <var:q> ^ <nat:3> + <nat:5> \times <var:q> ^ <nat:2> \} $ toward the postcondition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:g> = <nat:4> \times <var:q> ^ <nat:3> + <nat:5> \times <var:q> ^ <nat:2> + <nat:5> \times <var:q> \} $ . Going forward , we have the code assigning $ <var:g> + <var:H0$ as $ <var:g>$ . This code transfers the precondition $ \{ <var:U> = <var:q> \land <var:H0> = <nat:1> \land <var:g> = <nat:4> \times <var:q> ^ <nat:3> + <nat:5> \times <var:q> ^ <nat:2> + <nat:5> \times <var:q> \} $ into the condition $ \{ <var:U> = <var:q> \land <var:g> = <nat:4> \times <var:q> ^ <nat:3> + <nat:5> \times <var:q> ^ <nat:2> + <nat:5> \times <var:q> + <nat:1> \} $ . This is deduced by the assignment law of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <def:poly> := <var:H0> := <nat:1> ; <var:H1> := <nat:5> ; <var:H1> := <var:H1> * <var:U> ; <var:H2> := <nat:5> ; <var:H2> := <var:H2> * <var:U> ; <var:H2> := <var:H2> * <var:U> ; <var:H3> := <nat:4> ; <var:H3> := <var:H3> * <var:U> ; <var:H3> := <var:H3> * <var:U> ; <var:H3> := <var:H3> * <var:U> ; <var:g> := <var:H3> ; <var:g> := <var:g> + <var:H2> ; <var:g> := <var:g> + <var:H1> ; <var:g> := <var:g> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:U> = <var:q> }} <def:poly> {{ <var:g> = <nat:4> * <var:q> ^ <nat:3> + <nat:5> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:5> * <var:q> /\ <var:H2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:5> * <var:q> /\ <var:H2> = <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:5> * <var:q> /\ <var:H2> = <nat:5> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:5> * <var:q> /\ <var:H2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:H3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:5> * <var:q> /\ <var:H2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:H3> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:5> * <var:q> /\ <var:H2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:H3> = <nat:4> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:5> * <var:q> /\ <var:H2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:H3> = <nat:4> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:5> * <var:q> /\ <var:H2> = <nat:5> * <var:q> ^ <nat:2> /\ <var:g> = <nat:4> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:H0> = <nat:1> /\ <var:H1> = <nat:5> * <var:q> /\ <var:g> = <nat:4> * <var:q> ^ <nat:3> + <nat:5> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:H0> = <nat:1> /\ <var:g> = <nat:4> * <var:q> ^ <nat:3> + <nat:5> * <var:q> ^ <nat:2> + <nat:5> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:q> /\ <var:g> = <nat:4> * <var:q> ^ <nat:3> + <nat:5> * <var:q> ^ <nat:2> + <nat:5> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 