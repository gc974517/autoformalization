\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:q0> := <nat:4> ; <var:q1> := <nat:6> ; <var:q1> := <var:q1> * <var:l> ; <var:a> := <var:q1> ; <var:a> := <var:a> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:l> = <var:g> $ before the execution of the set of commands , it must be that we have $ <var:a> = <nat:6> * <var:g> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this set of instructions can be given by usual Hoare reasoning . Taking another step toward the subsequent line of code seen in our series of commands , the environment update command \verb | <var:q0> := <nat:4> ; | . This moves $ \{ <var:l> = <var:g> \} $ toward the condition $ \{ <var:l> = <var:g> \land <var:q0> = <nat:4> \} $ . Taking another step toward the subsequent line found in our series of instructions , we see the variable update line letting $ <nat:6> $ as $ <var:q1>$ . This line moves the condition $ \{ <var:l> = <var:g> \land <var:q0> = <nat:4> \} $ as the condition $ \{ <var:l> = <var:g> \land <var:q0> = <nat:4> \land <var:q1> = <nat:6> \} $ . Moving onward , we see the variable assignmet line giving $ <var:q1> * <var:l> $ into $ <var:q1>$ . This redefines $ \{ <var:l> = <var:g> \land <var:q0> = <nat:4> \land <var:q1> = <nat:6> \} $ as $ \{ <var:l> = <var:g> \land <var:q0> = <nat:4> \land <var:q1> = <nat:6> \times <var:g> \} $ . Shifting focus toward the upcoming command contained in our list of instructions , we have the command defining $ <var:q1> $ to $ <var:a>$ . This forwards the precondition $ \{ <var:l> = <var:g> \land <var:q0> = <nat:4> \land <var:q1> = <nat:6> \times <var:g> \} $ into the condition $ \{ <var:l> = <var:g> \land <var:q0> = <nat:4> \land <var:a> = <nat:6> \times <var:g> \} $ . Moving on , the environment update command yielding $ <var:a> + <var:q0$ to $ <var:a>$ . This takes $ \{ <var:l> = <var:g> \land <var:q0> = <nat:4> \land <var:a> = <nat:6> \times <var:g> \} $ as $ \{ <var:l> = <var:g> \land <var:a> = <nat:6> \times <var:g> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q0> := <nat:4> ; <var:q1> := <nat:6> ; <var:q1> := <var:q1> * <var:l> ; <var:a> := <var:q1> ; <var:a> := <var:a> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:l> = <var:g> }} <def:poly> {{ <var:a> = <nat:6> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:q0> = <nat:4> /\ <var:q1> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:q0> = <nat:4> /\ <var:a> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:g> /\ <var:a> = <nat:6> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 