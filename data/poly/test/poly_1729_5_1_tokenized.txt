\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:r1> := <var:y> ; <var:r0> := <nat:9> ; <var:r1> := <var:r1> * <nat:8> ; <var:G> := <var:r1> <var:G> := <var:G> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:y> = <var:v> $ ahead of executing this set of commands then $ <var:G> = <nat:8> \times <var:v> + <nat:9> $ after set of instructions executes . \end{theorem} \begin{proof} Arguing the correctness of the segment of code is shown with usual Hoare techniques . Looking at the proceeding step seen in our code segment , we see the variable assignmet code \verb | <var:r1> := <var:y> ; | . This command redefines the condition $ \{ <var:y> = <var:v> \} $ to $ \{ <var:y> = <var:v> \land <var:r1> = <var:v> \} $ . This is rigorously given with the assignment inference rule obtained from typical Hoare logic . Advancing , we have the binding line giving $ <nat:9> $ as $ <var:r0>$ . This redefines the precondition $ \{ <var:y> = <var:v> \land <var:r1> = <var:v> \} $ toward the condition $ \{ <var:y> = <var:v> \land <var:r1> = <var:v> \land <var:r0> = <nat:9> \} $ . This is given using the assignment law obtained from standard Hoare logic . Advancing to the next step , the variable assignmet command \verb | <var:r1> := <var:r1> * <nat:8> ; | . This forwards the condition $ \{ <var:y> = <var:v> \land <var:r1> = <var:v> \land <var:r0> = <nat:9> \} $ to $ \{ <var:y> = <var:v> \land <var:r1> = <nat:8> * <var:v> \land <var:r0> = <nat:9> \} $ . This is ensured using the assignment rule obtained from usual Hoare logic . Now , we see the line \verb | <var:G> := <var:r1> | . This advances the precondition $ \{ <var:y> = <var:v> \land <var:r1> = <nat:8> * <var:v> \land <var:r0> = <nat:9> \} $ into the postcondition $ \{ <var:y> = <var:v> \land <var:r0> = <nat:9> \land <var:G> = <nat:8> * <var:v> \} $ . Shifting focus toward the next command seen in our set of commands , we see the environment update code \verb | <var:G> := <var:G> + <var:r0> | . This code takes $ \{ <var:y> = <var:v> \land <var:r0> = <nat:9> \land <var:G> = <nat:8> * <var:v> \} $ toward $ \{ <var:y> = <var:v> \land <var:G> = <nat:8> * <var:v> + <nat:9> \} $ . This is shown with the assignment scheme given by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <def:poly> := <var:r1> := <var:y> ; <var:r0> := <nat:9> ; <var:r1> := <var:r1> * <nat:8> ; <var:G> := <var:r1> <var:G> := <var:G> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:y> = <var:v> }} <def:poly> {{ <var:G> = <nat:8> * <var:v> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:r1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:r1> = <var:v> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:r1> = <nat:8> * <var:v> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:r0> = <nat:9> /\ <var:G> = <nat:8> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:v> /\ <var:G> = <nat:8> * <var:v> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 