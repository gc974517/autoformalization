\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Q> := <nat:2> ; <var:Q> := <nat:3> + <var:Q> * <var:u> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Given , for some $ <var:O> \in \mathbb{N} $ , it to be that $ <var:u> = <var:O> $ ahead of evaluating our segment of code , it must be that $ <var:Q> = <nat:2> \cdot <var:O> + <nat:3> $ after set of instructions executes . \end{theorem} \begin{proof} The method of proof for the code segment is evident by typical Hoare logic . Advancing , \verb | { <var:u> = <var:O> } <var:Q> := <nat:2> { <var:u> = <var:O> \land <var:Q> = <nat:2> } | . Moving forward , we see \verb | { <var:u> = <var:O> } <var:Q> := <nat:2> { <var:u> = <var:O> \land <var:Q> = <nat:2> } | . This is sound by the binding law found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:2> ; <var:Q> := <nat:3> + <var:Q> * <var:u> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:u> = <var:O> }} <def:poly> {{ <var:Q> = <nat:2> * <var:O> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:Q> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:O> /\ <var:Q> = <nat:2> * <var:O> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 