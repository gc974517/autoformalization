\begin{document} \begin{theorem} Define a program in \emph{Imp} such that \begin{verbatim} <var:i1> := <var:J> ; <var:i2> := <var:i1> * <var:J> ; <var:i0> := <nat:2> ; <var:i1> := <var:i1> * <nat:1> ; <var:i2> := <var:i2> * <nat:1> ; <var:Y> := <var:i2> <var:Y> := <var:Y> + <var:i1> <var:Y> := <var:Y> + <var:i0> \end{verbatim} Assuming it to hold that $ <var:J> = <var:w> $ , given integers $ <var:w> $ , before the evaluation of our list of instructions it holds that we have $ <var:Y> = <nat:1> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of our code can be given through the following decorated code segment . \begin{eqnarray} \{ <var:J> = <var:w> \} \\ <var:i1> := <var:J> ; \\ \{ <var:J> = <var:w> \land <var:i1> = <var:w> \} \\ <var:i2> := <var:i1> * <var:J> ; \\ \{ <var:J> = <var:w> \land <var:i1> = <var:w> \land <var:i2> = <var:w> ^ <nat:2> \} \\ <var:i0> := <nat:2> ; \\ \{ <var:J> = <var:w> \land <var:i1> = <var:w> \land <var:i2> = <var:w> ^ <nat:2> \land <var:i0> = <nat:2> \} \\ <var:i1> := <var:i1> * <nat:1> ; \\ \{ <var:J> = <var:w> \land <var:i1> = <nat:1> * <var:w> \land <var:i2> = <var:w> ^ <nat:2> \land <var:i0> = <nat:2> \} \\ <var:i2> := <var:i2> * <nat:1> ; \\ \{ <var:J> = <var:w> \land <var:i1> = <nat:1> * <var:w> \land <var:i2> = <nat:1> * <var:w> ^ <nat:2> \land <var:i0> = <nat:2> \} \\ <var:Y> := <var:i2> \\ \{ <var:J> = <var:w> \land <var:i1> = <nat:1> * <var:w> \land <var:i0> = <nat:2> \land <var:Y> = <nat:1> * <var:w> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:i1> \\ \{ <var:J> = <var:w> \land <var:i0> = <nat:2> \land <var:Y> = <nat:1> * <var:w> ^ <nat:2> + <nat:1> * <var:w> \} \\ <var:Y> := <var:Y> + <var:i0> \\ \{ <var:J> = <var:w> \land <var:Y> = <nat:1> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> \} \end{eqnarray} Utilizing usual Hoare techniques finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:J> = <var:w> }} <var:i1> := <var:J> ; <var:i2> := <var:i1> * <var:J> ; <var:i0> := <nat:2> ; <var:i1> := <var:i1> * <nat:1> ; <var:i2> := <var:i2> * <nat:1> ; <var:Y> := <var:i2> <var:Y> := <var:Y> + <var:i1> <var:Y> := <var:Y> + <var:i0> {{ <var:Y> = <nat:1> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:i1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:i1> = <var:w> /\ <var:i2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:i1> = <var:w> /\ <var:i2> = <var:w> ^ <nat:2> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:i1> = <nat:1> * <var:w> /\ <var:i2> = <var:w> ^ <nat:2> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:i1> = <nat:1> * <var:w> /\ <var:i2> = <nat:1> * <var:w> ^ <nat:2> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:i1> = <nat:1> * <var:w> /\ <var:i0> = <nat:2> /\ <var:Y> = <nat:1> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:i0> = <nat:2> /\ <var:Y> = <nat:1> * <var:w> ^ <nat:2> + <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:w> /\ <var:Y> = <nat:1> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 