\begin{document} \begin{theorem} Take the following list of instructions : \begin{verbatim} <var:Q1> := <var:y> ; <var:Q2> := <var:Q1> * <var:y> ; <var:Q3> := <var:Q2> * <var:y> ; <var:Q4> := <var:Q3> * <var:y> ; <var:Q0> := <nat:5> ; <var:Q2> := <var:Q2> * <nat:5> ; <var:Q3> := <var:Q3> * <nat:3> ; <var:Q4> := <var:Q4> * <nat:7> ; <var:M> := <var:Q4> <var:M> := <var:M> + <var:Q3> <var:M> := <var:M> + <var:Q2> <var:M> := <var:M> + <var:Q0> \end{verbatim} Given it to hold that $ <var:y> = <var:R> $ for every positive coefficients $ <var:R> $ before evaluating our set of commands , it holds that we see $ <var:M> = <nat:7> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:5> * <var:R> ^ <nat:2> + <nat:5> $ . \end{theorem} \begin{proof} The argument for the code segment is clear with usual Hoare logic . After , we have the assignment code \verb | <var:Q1> := <var:y> ; | . This advances the condition $ \{ <var:y> = <var:R> \} $ into $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \} $ . This is shown to be logically sound by the assignment rule defined in Hoare logic . Moving forward , we have the variable binding statement \verb | <var:Q2> := <var:Q1> * <var:y> ; | . This moves the condition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \} $ as the postcondition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <var:R> ^ <nat:2> \} $ . Stepping forward , we have the variable assignmet line \verb | <var:Q3> := <var:Q2> * <var:y> ; | . This statement transfers the precondition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <var:R> ^ <nat:2> \} $ toward the postcondition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <var:R> ^ <nat:2> \land <var:Q3> = <var:R> ^ <nat:3> \} $ . Jumping to the following piece of code found in the code segment , we have the variable assignmet statement binding $ <var:Q3> * <var:y> $ into $ <var:Q4>$ . This line takes the precondition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <var:R> ^ <nat:2> \land <var:Q3> = <var:R> ^ <nat:3> \} $ into the postcondition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <var:R> ^ <nat:2> \land <var:Q3> = <var:R> ^ <nat:3> \land <var:Q4> = <var:R> ^ <nat:4> \} $ . This is sound with the assignment inference rule defined by typical Hoare techniques . Now , we have the assignment statement yielding $ <nat:5> $ toward $ <var:Q0>$ . This forwards $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <var:R> ^ <nat:2> \land <var:Q3> = <var:R> ^ <nat:3> \land <var:Q4> = <var:R> ^ <nat:4> \} $ as the condition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <var:R> ^ <nat:2> \land <var:Q3> = <var:R> ^ <nat:3> \land <var:Q4> = <var:R> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ . This is rigorously given by the assignment rule in usual Hoare reasoning . Considering the upcoming line found in the list of instructions , we see the binding line \verb | <var:Q2> := <var:Q2> * <nat:5> ; | . This statement takes $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <var:R> ^ <nat:2> \land <var:Q3> = <var:R> ^ <nat:3> \land <var:Q4> = <var:R> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ toward the condition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <nat:5> \cdot <var:R> ^ <nat:2> \land <var:Q3> = <var:R> ^ <nat:3> \land <var:Q4> = <var:R> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ . Looking at the subsequent bit of code in the code segment , we see the binding code letting $ <var:Q3> * <nat:3> $ into $ <var:Q3>$ . This command moves the precondition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <nat:5> \cdot <var:R> ^ <nat:2> \land <var:Q3> = <var:R> ^ <nat:3> \land <var:Q4> = <var:R> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ toward the postcondition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <nat:5> \cdot <var:R> ^ <nat:2> \land <var:Q3> = <nat:3> \cdot <var:R> ^ <nat:3> \land <var:Q4> = <var:R> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ . Taking a look at the subsequent bit of code in the list of instructions , the variable binding command \verb | <var:Q4> := <var:Q4> * <nat:7> ; | . This redefines $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <nat:5> \cdot <var:R> ^ <nat:2> \land <var:Q3> = <nat:3> \cdot <var:R> ^ <nat:3> \land <var:Q4> = <var:R> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ to the condition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <nat:5> \cdot <var:R> ^ <nat:2> \land <var:Q3> = <nat:3> \cdot <var:R> ^ <nat:3> \land <var:Q4> = <nat:7> \cdot <var:R> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ . Honing in on the next line of code seen in the segment of code , we see the variable binding command binding $ <var:Q4$ into $ <var:M>$ . This transfers $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <nat:5> \cdot <var:R> ^ <nat:2> \land <var:Q3> = <nat:3> \cdot <var:R> ^ <nat:3> \land <var:Q4> = <nat:7> \cdot <var:R> ^ <nat:4> \land <var:Q0> = <nat:5> \} $ to the condition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <nat:5> \cdot <var:R> ^ <nat:2> \land <var:Q3> = <nat:3> \cdot <var:R> ^ <nat:3> \land <var:Q0> = <nat:5> \land <var:M> = <nat:7> \cdot <var:R> ^ <nat:4> \} $ . This is known to be sound using the assignment inference rule defined by typical Hoare techniques . Moving on , we have the variable update statement \verb | <var:M> := <var:M> + <var:Q3> | . This command redefines the precondition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <nat:5> \cdot <var:R> ^ <nat:2> \land <var:Q3> = <nat:3> \cdot <var:R> ^ <nat:3> \land <var:Q0> = <nat:5> \land <var:M> = <nat:7> \cdot <var:R> ^ <nat:4> \} $ into $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <nat:5> \cdot <var:R> ^ <nat:2> \land <var:Q0> = <nat:5> \land <var:M> = <nat:7> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> \} $ . Moving onward , we have the statement letting $ <var:M> + <var:Q2$ as $ <var:M>$ . This command redefines the condition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q2> = <nat:5> \cdot <var:R> ^ <nat:2> \land <var:Q0> = <nat:5> \land <var:M> = <nat:7> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> \} $ to the postcondition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q0> = <nat:5> \land <var:M> = <nat:7> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> + <nat:5> \cdot <var:R> ^ <nat:2> \} $ . Honing in on the subsequent line of code contained in the set of instructions , we see the variable update statement \verb | <var:M> := <var:M> + <var:Q0> | . This transfers the condition $ \{ <var:y> = <var:R> \land <var:Q1> = <var:R> \land <var:Q0> = <nat:5> \land <var:M> = <nat:7> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> + <nat:5> \cdot <var:R> ^ <nat:2> \} $ toward the postcondition $ \{ <var:y> = <var:R> \land <var:M> = <nat:7> \cdot <var:R> ^ <nat:4> + <nat:3> \cdot <var:R> ^ <nat:3> + <nat:5> \cdot <var:R> ^ <nat:2> + <nat:5> \} $ . This is shown by the assignment law in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <var:Q4> : string := " <var:Q4> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:y> = <var:R> }} <var:Q1> := <var:y> ; <var:Q2> := <var:Q1> * <var:y> ; <var:Q3> := <var:Q2> * <var:y> ; <var:Q4> := <var:Q3> * <var:y> ; <var:Q0> := <nat:5> ; <var:Q2> := <var:Q2> * <nat:5> ; <var:Q3> := <var:Q3> * <nat:3> ; <var:Q4> := <var:Q4> * <nat:7> ; <var:M> := <var:Q4> <var:M> := <var:M> + <var:Q3> <var:M> := <var:M> + <var:Q2> <var:M> := <var:M> + <var:Q0> {{ <var:M> = <nat:7> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:5> * <var:R> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:Q1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:Q1> = <var:R> /\ <var:Q2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:Q1> = <var:R> /\ <var:Q2> = <var:R> ^ <nat:2> /\ <var:Q3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:Q1> = <var:R> /\ <var:Q2> = <var:R> ^ <nat:2> /\ <var:Q3> = <var:R> ^ <nat:3> /\ <var:Q4> = <var:R> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:Q1> = <var:R> /\ <var:Q2> = <var:R> ^ <nat:2> /\ <var:Q3> = <var:R> ^ <nat:3> /\ <var:Q4> = <var:R> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:Q1> = <var:R> /\ <var:Q2> = <nat:5> * <var:R> ^ <nat:2> /\ <var:Q3> = <var:R> ^ <nat:3> /\ <var:Q4> = <var:R> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:Q1> = <var:R> /\ <var:Q2> = <nat:5> * <var:R> ^ <nat:2> /\ <var:Q3> = <nat:3> * <var:R> ^ <nat:3> /\ <var:Q4> = <var:R> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:Q1> = <var:R> /\ <var:Q2> = <nat:5> * <var:R> ^ <nat:2> /\ <var:Q3> = <nat:3> * <var:R> ^ <nat:3> /\ <var:Q4> = <nat:7> * <var:R> ^ <nat:4> /\ <var:Q0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:Q1> = <var:R> /\ <var:Q2> = <nat:5> * <var:R> ^ <nat:2> /\ <var:Q3> = <nat:3> * <var:R> ^ <nat:3> /\ <var:Q0> = <nat:5> /\ <var:M> = <nat:7> * <var:R> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:Q1> = <var:R> /\ <var:Q2> = <nat:5> * <var:R> ^ <nat:2> /\ <var:Q0> = <nat:5> /\ <var:M> = <nat:7> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:Q1> = <var:R> /\ <var:Q0> = <nat:5> /\ <var:M> = <nat:7> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:5> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:R> /\ <var:M> = <nat:7> * <var:R> ^ <nat:4> + <nat:3> * <var:R> ^ <nat:3> + <nat:5> * <var:R> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 