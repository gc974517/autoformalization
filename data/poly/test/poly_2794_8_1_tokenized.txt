\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:Y1> := <var:f> ; <var:Y2> := <var:Y1> * <var:f> ; <var:Y0> := <nat:5> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:Y2> := <var:Y2> * <nat:6> ; <var:Q> := <var:Y2> <var:Q> := <var:Q> + <var:Y1> <var:Q> := <var:Q> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:f> = <var:z> $ ahead of interpreting this program , then we see $ <var:Q> = <nat:6> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> + <nat:5> $ once set of instructions has finished . \end{theorem} \begin{proof} Applying usual Hoare logic returns : \begin{eqnarray} \{ <var:f> = <var:z> \} \\ <var:Y1> := <var:f> ; \\ \{ <var:f> = <var:z> \land <var:Y1> = <var:z> \} \\ <var:Y2> := <var:Y1> * <var:f> ; \\ \{ <var:f> = <var:z> \land <var:Y1> = <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \} \\ <var:Y0> := <nat:5> ; \\ \{ <var:f> = <var:z> \land <var:Y1> = <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \land <var:Y0> = <nat:5> \} \\ <var:Y1> := <var:Y1> * <nat:9> ; \\ \{ <var:f> = <var:z> \land <var:Y1> = <nat:9> \cdot <var:z> \land <var:Y2> = <var:z> ^ <nat:2> \land <var:Y0> = <nat:5> \} \\ <var:Y2> := <var:Y2> * <nat:6> ; \\ \{ <var:f> = <var:z> \land <var:Y1> = <nat:9> \cdot <var:z> \land <var:Y2> = <nat:6> \cdot <var:z> ^ <nat:2> \land <var:Y0> = <nat:5> \} \\ <var:Q> := <var:Y2> \\ \{ <var:f> = <var:z> \land <var:Y1> = <nat:9> \cdot <var:z> \land <var:Y0> = <nat:5> \land <var:Q> = <nat:6> \cdot <var:z> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:Y1> \\ \{ <var:f> = <var:z> \land <var:Y0> = <nat:5> \land <var:Q> = <nat:6> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> \} \\ <var:Q> := <var:Q> + <var:Y0> \\ \{ <var:f> = <var:z> \land <var:Q> = <nat:6> \cdot <var:z> ^ <nat:2> + <nat:9> \cdot <var:z> + <nat:5> \} \end{eqnarray} Considering the preceding argument , the program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <def:poly> := <var:Y1> := <var:f> ; <var:Y2> := <var:Y1> * <var:f> ; <var:Y0> := <nat:5> ; <var:Y1> := <var:Y1> * <nat:9> ; <var:Y2> := <var:Y2> * <nat:6> ; <var:Q> := <var:Y2> <var:Q> := <var:Q> + <var:Y1> <var:Q> := <var:Q> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:f> = <var:z> }} <def:poly> {{ <var:Q> = <nat:6> * <var:z> ^ <nat:2> + <nat:9> * <var:z> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:Y1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:Y1> = <var:z> /\ <var:Y2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:Y1> = <var:z> /\ <var:Y2> = <var:z> ^ <nat:2> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:Y1> = <nat:9> * <var:z> /\ <var:Y2> = <var:z> ^ <nat:2> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:Y1> = <nat:9> * <var:z> /\ <var:Y2> = <nat:6> * <var:z> ^ <nat:2> /\ <var:Y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:Y1> = <nat:9> * <var:z> /\ <var:Y0> = <nat:5> /\ <var:Q> = <nat:6> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:Y0> = <nat:5> /\ <var:Q> = <nat:6> * <var:z> ^ <nat:2> + <nat:9> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:Q> = <nat:6> * <var:z> ^ <nat:2> + <nat:9> * <var:z> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 