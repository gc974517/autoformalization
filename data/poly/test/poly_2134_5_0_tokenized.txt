\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:G0> := <nat:6> ; <var:G1> := <nat:8> ; <var:G1> := <var:G1> * <var:d> ; <var:F> := <var:G1> ; <var:F> := <var:F> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> . Assume --- for every positive coefficients $ <var:z> $ --- that we have $ <var:d> = <var:z> $ prior to the execution of this list of instructions then $ <var:F> = <nat:8> * <var:z> + <nat:6> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques produces : \begin{eqnarray} \{ <var:d> = <var:z> \} \\ <var:G0> := <nat:6> ; \\ \{ <var:d> = <var:z> \land <var:G0> = <nat:6> \} \\ <var:G1> := <nat:8> ; \\ \{ <var:d> = <var:z> \land <var:G0> = <nat:6> \land <var:G1> = <nat:8> \} \\ <var:G1> := <var:G1> * <var:d> ; \\ \{ <var:d> = <var:z> \land <var:G0> = <nat:6> \land <var:G1> = <nat:8> * <var:z> \} \\ <var:F> := <var:G1> ; \\ \{ <var:d> = <var:z> \land <var:G0> = <nat:6> \land <var:F> = <nat:8> * <var:z> \} \\ <var:F> := <var:F> + <var:G0> \\ \{ <var:d> = <var:z> \land <var:F> = <nat:8> * <var:z> + <nat:6> \} \end{eqnarray} Thus , our set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:6> ; <var:G1> := <nat:8> ; <var:G1> := <var:G1> * <var:d> ; <var:F> := <var:G1> ; <var:F> := <var:F> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:d> = <var:z> }} <def:poly> {{ <var:F> = <nat:8> * <var:z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:G0> = <nat:6> /\ <var:G1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:G0> = <nat:6> /\ <var:G1> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:G0> = <nat:6> /\ <var:F> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:z> /\ <var:F> = <nat:8> * <var:z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 