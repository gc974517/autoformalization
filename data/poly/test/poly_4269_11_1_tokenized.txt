\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:T1> := <var:w> ; <var:T2> := <var:T1> * <var:w> ; <var:T3> := <var:T2> * <var:w> ; <var:T0> := <nat:4> ; <var:T1> := <var:T1> * <nat:2> ; <var:T2> := <var:T2> * <nat:2> ; <var:T3> := <var:T3> * <nat:7> ; <var:Z> := <var:T3> <var:Z> := <var:Z> + <var:T2> <var:Z> := <var:Z> + <var:T1> <var:Z> := <var:Z> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Given ( for all $ <var:W> $ ) that $ <var:w> = <var:W> $ ahead of executing this segment of code then $ <var:Z> = <nat:7> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning yields : \begin{eqnarray} \{ <var:w> = <var:W> \} \\ <var:T1> := <var:w> ; \\ \{ <var:w> = <var:W> \land <var:T1> = <var:W> \} \\ <var:T2> := <var:T1> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:T1> = <var:W> \land <var:T2> = <var:W> ^ <nat:2> \} \\ <var:T3> := <var:T2> * <var:w> ; \\ \{ <var:w> = <var:W> \land <var:T1> = <var:W> \land <var:T2> = <var:W> ^ <nat:2> \land <var:T3> = <var:W> ^ <nat:3> \} \\ <var:T0> := <nat:4> ; \\ \{ <var:w> = <var:W> \land <var:T1> = <var:W> \land <var:T2> = <var:W> ^ <nat:2> \land <var:T3> = <var:W> ^ <nat:3> \land <var:T0> = <nat:4> \} \\ <var:T1> := <var:T1> * <nat:2> ; \\ \{ <var:w> = <var:W> \land <var:T1> = <nat:2> \times <var:W> \land <var:T2> = <var:W> ^ <nat:2> \land <var:T3> = <var:W> ^ <nat:3> \land <var:T0> = <nat:4> \} \\ <var:T2> := <var:T2> * <nat:2> ; \\ \{ <var:w> = <var:W> \land <var:T1> = <nat:2> \times <var:W> \land <var:T2> = <nat:2> \times <var:W> ^ <nat:2> \land <var:T3> = <var:W> ^ <nat:3> \land <var:T0> = <nat:4> \} \\ <var:T3> := <var:T3> * <nat:7> ; \\ \{ <var:w> = <var:W> \land <var:T1> = <nat:2> \times <var:W> \land <var:T2> = <nat:2> \times <var:W> ^ <nat:2> \land <var:T3> = <nat:7> \times <var:W> ^ <nat:3> \land <var:T0> = <nat:4> \} \\ <var:Z> := <var:T3> \\ \{ <var:w> = <var:W> \land <var:T1> = <nat:2> \times <var:W> \land <var:T2> = <nat:2> \times <var:W> ^ <nat:2> \land <var:T0> = <nat:4> \land <var:Z> = <nat:7> \times <var:W> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:T2> \\ \{ <var:w> = <var:W> \land <var:T1> = <nat:2> \times <var:W> \land <var:T0> = <nat:4> \land <var:Z> = <nat:7> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:T1> \\ \{ <var:w> = <var:W> \land <var:T0> = <nat:4> \land <var:Z> = <nat:7> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> \} \\ <var:Z> := <var:Z> + <var:T0> \\ \{ <var:w> = <var:W> \land <var:Z> = <nat:7> \times <var:W> ^ <nat:3> + <nat:2> \times <var:W> ^ <nat:2> + <nat:2> \times <var:W> + <nat:4> \} \end{eqnarray} Hence , this series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T1> := <var:w> ; <var:T2> := <var:T1> * <var:w> ; <var:T3> := <var:T2> * <var:w> ; <var:T0> := <nat:4> ; <var:T1> := <var:T1> * <nat:2> ; <var:T2> := <var:T2> * <nat:2> ; <var:T3> := <var:T3> * <nat:7> ; <var:Z> := <var:T3> <var:Z> := <var:Z> + <var:T2> <var:Z> := <var:Z> + <var:T1> <var:Z> := <var:Z> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:w> = <var:W> }} <def:poly> {{ <var:Z> = <nat:7> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:T1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:T1> = <var:W> /\ <var:T2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:T1> = <var:W> /\ <var:T2> = <var:W> ^ <nat:2> /\ <var:T3> = <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:T1> = <var:W> /\ <var:T2> = <var:W> ^ <nat:2> /\ <var:T3> = <var:W> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:T1> = <nat:2> * <var:W> /\ <var:T2> = <var:W> ^ <nat:2> /\ <var:T3> = <var:W> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:T1> = <nat:2> * <var:W> /\ <var:T2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:T3> = <var:W> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:T1> = <nat:2> * <var:W> /\ <var:T2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:T3> = <nat:7> * <var:W> ^ <nat:3> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:T1> = <nat:2> * <var:W> /\ <var:T2> = <nat:2> * <var:W> ^ <nat:2> /\ <var:T0> = <nat:4> /\ <var:Z> = <nat:7> * <var:W> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:T1> = <nat:2> * <var:W> /\ <var:T0> = <nat:4> /\ <var:Z> = <nat:7> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:T0> = <nat:4> /\ <var:Z> = <nat:7> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:W> /\ <var:Z> = <nat:7> * <var:W> ^ <nat:3> + <nat:2> * <var:W> ^ <nat:2> + <nat:2> * <var:W> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 