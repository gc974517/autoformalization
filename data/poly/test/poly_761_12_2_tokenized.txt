\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:u> := <nat:2> ; <var:u> := <var:u> * <var:V> ; <var:u> := <nat:3> + <var:u> * <var:V> ; <var:u> := <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> ; <var:u> := <nat:2> + <var:u> * <var:V> ; <var:u> := <nat:3> + <var:u> * <var:V> ; <var:u> := <nat:1> + <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> ; <var:u> := <nat:3> + <var:u> * <var:V> ; <var:u> := <nat:2> + <var:u> * <var:V> ; <var:u> := <nat:3> + <var:u> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:V> = <var:m> $ given every $ <var:m> \in \mathbb{Z}^+ $ before evaluating our segment of code , it holds that we see $ <var:u> = <nat:2> \cdot <var:m> ^ <nat:11> + <nat:3> \cdot <var:m> ^ <nat:9> + <nat:4> \cdot <var:m> ^ <nat:7> + <nat:2> \cdot <var:m> ^ <nat:6> + <nat:3> \cdot <var:m> ^ <nat:5> + <nat:1> \cdot <var:m> ^ <nat:4> + <nat:4> \cdot <var:m> ^ <nat:3> + <nat:3> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:3> $ . \end{theorem} \begin{proof} Using Hoare reasoning gives : \begin{eqnarray} \{ <var:V> = <var:m> \} \\ <var:u> := <nat:2> ; \\ \{ <var:V> = <var:m> \land <var:u> = <nat:2> \} \\ <var:u> := <var:u> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:u> = <nat:2> \times <var:m> + \} \\ <var:u> := <nat:3> + <var:u> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:u> = <nat:2> \times <var:m> ^ <nat:2> + <nat:3> \} \\ <var:u> := <var:u> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:u> = <nat:2> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> + \} \\ <var:u> := <nat:4> + <var:u> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:u> = <nat:2> \times <var:m> ^ <nat:4> + <nat:3> \times <var:m> ^ <nat:2> + <nat:4> \} \\ <var:u> := <nat:2> + <var:u> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:u> = <nat:2> \times <var:m> ^ <nat:5> + <nat:3> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> + <nat:2> \} \\ <var:u> := <nat:3> + <var:u> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:u> = <nat:2> \times <var:m> ^ <nat:6> + <nat:3> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:3> \} \\ <var:u> := <nat:1> + <var:u> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:u> = <nat:2> \times <var:m> ^ <nat:7> + <nat:3> \times <var:m> ^ <nat:5> + <nat:4> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:1> \} \\ <var:u> := <nat:4> + <var:u> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:u> = <nat:2> \times <var:m> ^ <nat:8> + <nat:3> \times <var:m> ^ <nat:6> + <nat:4> \times <var:m> ^ <nat:4> + <nat:2> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:4> \} \\ <var:u> := <nat:3> + <var:u> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:u> = <nat:2> \times <var:m> ^ <nat:9> + <nat:3> \times <var:m> ^ <nat:7> + <nat:4> \times <var:m> ^ <nat:5> + <nat:2> \times <var:m> ^ <nat:4> + <nat:3> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:3> \} \\ <var:u> := <nat:2> + <var:u> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:u> = <nat:2> \times <var:m> ^ <nat:10> + <nat:3> \times <var:m> ^ <nat:8> + <nat:4> \times <var:m> ^ <nat:6> + <nat:2> \times <var:m> ^ <nat:5> + <nat:3> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:2> \} \\ <var:u> := <nat:3> + <var:u> * <var:V> \\ \{ <var:V> = <var:m> \land <var:u> = <nat:2> \times <var:m> ^ <nat:11> + <nat:3> \times <var:m> ^ <nat:9> + <nat:4> \times <var:m> ^ <nat:7> + <nat:2> \times <var:m> ^ <nat:6> + <nat:3> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:3> \} \end{eqnarray} Hence , the segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:2> ; <var:u> := <var:u> * <var:V> ; <var:u> := <nat:3> + <var:u> * <var:V> ; <var:u> := <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> ; <var:u> := <nat:2> + <var:u> * <var:V> ; <var:u> := <nat:3> + <var:u> * <var:V> ; <var:u> := <nat:1> + <var:u> * <var:V> ; <var:u> := <nat:4> + <var:u> * <var:V> ; <var:u> := <nat:3> + <var:u> * <var:V> ; <var:u> := <nat:2> + <var:u> * <var:V> ; <var:u> := <nat:3> + <var:u> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:V> = <var:m> }} <def:poly> {{ <var:u> = <nat:2> * <var:m> ^ <nat:11> + <nat:3> * <var:m> ^ <nat:9> + <nat:4> * <var:m> ^ <nat:7> + <nat:2> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:u> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:u> = <nat:2> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:u> = <nat:2> * <var:m> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:u> = <nat:2> * <var:m> ^ <nat:3> + <nat:3> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:u> = <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:u> = <nat:2> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:u> = <nat:2> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:u> = <nat:2> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:u> = <nat:2> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:u> = <nat:2> * <var:m> ^ <nat:9> + <nat:3> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:5> + <nat:2> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:u> = <nat:2> * <var:m> ^ <nat:10> + <nat:3> * <var:m> ^ <nat:8> + <nat:4> * <var:m> ^ <nat:6> + <nat:2> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:u> = <nat:2> * <var:m> ^ <nat:11> + <nat:3> * <var:m> ^ <nat:9> + <nat:4> * <var:m> ^ <nat:7> + <nat:2> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 