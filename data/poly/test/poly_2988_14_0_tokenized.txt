\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:x0> := <nat:1> ; <var:x1> := <nat:6> ; <var:x1> := <var:x1> * <var:c> ; <var:x2> := <nat:2> ; <var:x2> := <var:x2> * <var:c> ; <var:x2> := <var:x2> * <var:c> ; <var:x3> := <nat:3> ; <var:x3> := <var:x3> * <var:c> ; <var:x3> := <var:x3> * <var:c> ; <var:x3> := <var:x3> * <var:c> ; <var:T> := <var:x3> ; <var:T> := <var:T> + <var:x2> ; <var:T> := <var:T> + <var:x1> ; <var:T> := <var:T> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Given ( with some integers $ <var:e> $ ) $ <var:c> = <var:e> $ ahead of interpreting this series of commands , it follows that we have $ <var:T> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:e> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:c> = <var:e> \land <var:x0> = <nat:1> \} \\ <var:x1> := <nat:6> ; \\ \{ <var:c> = <var:e> \land <var:x0> = <nat:1> \land <var:x1> = <nat:6> \} \\ <var:x1> := <var:x1> * <var:c> ; \\ \{ <var:c> = <var:e> \land <var:x0> = <nat:1> \land <var:x1> = <nat:6> \cdot <var:e> \} \\ <var:x2> := <nat:2> ; \\ \{ <var:c> = <var:e> \land <var:x0> = <nat:1> \land <var:x1> = <nat:6> \cdot <var:e> \land <var:x2> = <nat:2> \} \\ <var:x2> := <var:x2> * <var:c> ; \\ \{ <var:c> = <var:e> \land <var:x0> = <nat:1> \land <var:x1> = <nat:6> \cdot <var:e> \land <var:x2> = <nat:2> \cdot <var:e> \} \\ <var:x2> := <var:x2> * <var:c> ; \\ \{ <var:c> = <var:e> \land <var:x0> = <nat:1> \land <var:x1> = <nat:6> \cdot <var:e> \land <var:x2> = <nat:2> \cdot <var:e> ^ <nat:2> \} \\ <var:x3> := <nat:3> ; \\ \{ <var:c> = <var:e> \land <var:x0> = <nat:1> \land <var:x1> = <nat:6> \cdot <var:e> \land <var:x2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:x3> = <nat:3> \} \\ <var:x3> := <var:x3> * <var:c> ; \\ \{ <var:c> = <var:e> \land <var:x0> = <nat:1> \land <var:x1> = <nat:6> \cdot <var:e> \land <var:x2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:x3> = <nat:3> \cdot <var:e> \} \\ <var:x3> := <var:x3> * <var:c> ; \\ \{ <var:c> = <var:e> \land <var:x0> = <nat:1> \land <var:x1> = <nat:6> \cdot <var:e> \land <var:x2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:x3> = <nat:3> \cdot <var:e> ^ <nat:2> \} \\ <var:x3> := <var:x3> * <var:c> ; \\ \{ <var:c> = <var:e> \land <var:x0> = <nat:1> \land <var:x1> = <nat:6> \cdot <var:e> \land <var:x2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:x3> = <nat:3> \cdot <var:e> ^ <nat:3> \} \\ <var:T> := <var:x3> ; \\ \{ <var:c> = <var:e> \land <var:x0> = <nat:1> \land <var:x1> = <nat:6> \cdot <var:e> \land <var:x2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:T> = <nat:3> \cdot <var:e> ^ <nat:3> \} \\ <var:T> := <var:T> + <var:x2> ; \\ \{ <var:c> = <var:e> \land <var:x0> = <nat:1> \land <var:x1> = <nat:6> \cdot <var:e> \land <var:T> = <nat:3> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> \} \\ <var:T> := <var:T> + <var:x1> ; \\ \{ <var:c> = <var:e> \land <var:x0> = <nat:1> \land <var:T> = <nat:3> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:6> \cdot <var:e> \} \\ <var:T> := <var:T> + <var:x0> \\ \{ <var:c> = <var:e> \land <var:T> = <nat:3> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:6> \cdot <var:e> + <nat:1> \} \end{eqnarray} The application of typical Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <def:poly> := <var:x0> := <nat:1> ; <var:x1> := <nat:6> ; <var:x1> := <var:x1> * <var:c> ; <var:x2> := <nat:2> ; <var:x2> := <var:x2> * <var:c> ; <var:x2> := <var:x2> * <var:c> ; <var:x3> := <nat:3> ; <var:x3> := <var:x3> * <var:c> ; <var:x3> := <var:x3> * <var:c> ; <var:x3> := <var:x3> * <var:c> ; <var:T> := <var:x3> ; <var:T> := <var:T> + <var:x2> ; <var:T> := <var:T> + <var:x1> ; <var:T> := <var:T> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:c> = <var:e> }} <def:poly> {{ <var:T> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:6> * <var:e> /\ <var:x2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:6> * <var:e> /\ <var:x2> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:6> * <var:e> /\ <var:x2> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:6> * <var:e> /\ <var:x2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:x3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:6> * <var:e> /\ <var:x2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:x3> = <nat:3> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:6> * <var:e> /\ <var:x2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:x3> = <nat:3> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:6> * <var:e> /\ <var:x2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:x3> = <nat:3> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:6> * <var:e> /\ <var:x2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:T> = <nat:3> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:6> * <var:e> /\ <var:T> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:x0> = <nat:1> /\ <var:T> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:6> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:e> /\ <var:T> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:6> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 