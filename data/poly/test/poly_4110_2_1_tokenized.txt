\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:4> ; <var:n> := <var:z0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:v> = <var:g> $ prior to running our program it must be that we have $ <var:n> = <nat:4> $ once program exits . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is accomplished using usual Hoare logic . Next , we have \verb | { <var:v> = <var:g> } <var:z0> := <nat:4> { <var:v> = <var:g> \land <var:z0> = <nat:4> } | and \verb | { <var:v> = <var:g> \land <var:z0> = <nat:4> } <var:n> := <var:z0{ <var:v> = <var:g> \land <var:n> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <def:poly> := <var:z0> := <nat:4> ; <var:n> := <var:z0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:v> = <var:g> }} <def:poly> {{ <var:n> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:g> /\ <var:n> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 