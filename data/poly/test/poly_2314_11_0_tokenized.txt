\begin{document} \begin{theorem} Take the following program : \begin{verbatim} <var:X0> := <nat:6> ; <var:X2> := <nat:2> ; <var:X2> := <var:X2> * <var:E> ; <var:X2> := <var:X2> * <var:E> ; <var:X3> := <nat:9> ; <var:X3> := <var:X3> * <var:E> ; <var:X3> := <var:X3> * <var:E> ; <var:X3> := <var:X3> * <var:E> ; <var:h> := <var:X3> ; <var:h> := <var:h> + <var:X2> ; <var:h> := <var:h> + <var:X0> \end{verbatim} Allowing that we have $ <var:E> = <var:m> $ before evaluating our set of instructions , it holds that we see $ <var:h> = <nat:9> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be given using typical Hoare reasoning . Focusing on the upcoming line contained in the program , the variable update command yielding $ <nat:6> $ toward $ <var:X0>$ . This transfers the precondition $ \{ <var:E> = <var:m> \} $ toward $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \} $ . Moving forward to the next step , the variable binding statement letting $ <nat:2> $ into $ <var:X2>$ . This moves the precondition $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \} $ to $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \} $ . Further , we see the assignment code \verb | <var:X2> := <var:X2> * <var:E> ; | . This command forwards $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \} $ as the condition $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> \} $ . This is ensured with the assignment scheme defined by usual Hoare techniques . Considering the next line contained in the list of commands , the environment update line \verb | <var:X2> := <var:X2> * <var:E> ; | . This advances $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> \} $ into the postcondition $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> ^ <nat:2> \} $ . This is rigorously given using the assignment law obtained from standard Hoare reasoning . Advancing to the upcoming step found in our list of instructions , the assignment statement \verb | <var:X3> := <nat:9> ; | . This line redefines $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> ^ <nat:2> \} $ as $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:X3> = <nat:9> \} $ . Going to the next step , we have the assignment command binding $ <var:X3> * <var:E> $ as $ <var:X3>$ . This command advances the condition $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:X3> = <nat:9> \} $ toward $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:X3> = <nat:9> \times <var:m> \} $ . This is deduced by the assignment rule found in standard Hoare techniques . Shifting focus toward the upcoming piece of code in our list of commands , we have the assignment code \verb | <var:X3> := <var:X3> * <var:E> ; | . This advances $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:X3> = <nat:9> \times <var:m> \} $ as $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:X3> = <nat:9> \times <var:m> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule of Hoare logic . Next , we have the environment update statement letting $ <var:X3> * <var:E> $ into $ <var:X3>$ . This redefines the condition $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:X3> = <nat:9> \times <var:m> ^ <nat:2> \} $ toward the condition $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:X3> = <nat:9> \times <var:m> ^ <nat:3> \} $ . Moving forward to the proceeding piece of code found in the series of instructions , the variable binding line \verb | <var:h> := <var:X3> ; | . This forwards the condition $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:X3> = <nat:9> \times <var:m> ^ <nat:3> \} $ as the postcondition $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:h> = <nat:9> \times <var:m> ^ <nat:3> \} $ . Taking a look at the upcoming statement found in our code , the variable assignmet line \verb | <var:h> := <var:h> + <var:X2> ; | . This line moves the condition $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:X2> = <nat:2> \times <var:m> ^ <nat:2> \land <var:h> = <nat:9> \times <var:m> ^ <nat:3> \} $ into the postcondition $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:h> = <nat:9> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> \} $ . Further , the variable update command yielding $ <var:h> + <var:X0$ into $ <var:h>$ . This redefines $ \{ <var:E> = <var:m> \land <var:X0> = <nat:6> \land <var:h> = <nat:9> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> \} $ to the condition $ \{ <var:E> = <var:m> \land <var:h> = <nat:9> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X2> : string := " <var:X2> " . Definition <var:X3> : string := " <var:X3> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:E> = <var:m> }} <var:X0> := <nat:6> ; <var:X2> := <nat:2> ; <var:X2> := <var:X2> * <var:E> ; <var:X2> := <var:X2> * <var:E> ; <var:X3> := <nat:9> ; <var:X3> := <var:X3> * <var:E> ; <var:X3> := <var:X3> * <var:E> ; <var:X3> := <var:X3> * <var:E> ; <var:h> := <var:X3> ; <var:h> := <var:h> + <var:X2> ; <var:h> := <var:h> + <var:X0> {{ <var:h> = <nat:9> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X2> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X2> = <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:X3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:X3> = <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:X3> = <nat:9> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:X3> = <nat:9> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:X0> = <nat:6> /\ <var:X2> = <nat:2> * <var:m> ^ <nat:2> /\ <var:h> = <nat:9> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:X0> = <nat:6> /\ <var:h> = <nat:9> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:m> /\ <var:h> = <nat:9> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 