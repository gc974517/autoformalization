\begin{document} \begin{theorem} We define a program in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:2> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:q> ; <var:Z> := <var:N1> ; <var:Z> := <var:Z> + <var:N0> \end{verbatim} Given it to be that $ <var:q> = <var:O> $ --- given some whole numbers $ <var:O> $ --- ahead of the execution of the code segment it follows that $ <var:Z> = <nat:3> * <var:O> + <nat:2> $ after series of instructions is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:q> = <var:O> \} \\ <var:N0> := <nat:2> ; \\ \{ <var:q> = <var:O> \land <var:N0> = <nat:2> \} \\ <var:N1> := <nat:3> ; \\ \{ <var:q> = <var:O> \land <var:N0> = <nat:2> \land <var:N1> = <nat:3> \} \\ <var:N1> := <var:N1> * <var:q> ; \\ \{ <var:q> = <var:O> \land <var:N0> = <nat:2> \land <var:N1> = <nat:3> \cdot <var:O> \} \\ <var:Z> := <var:N1> ; \\ \{ <var:q> = <var:O> \land <var:N0> = <nat:2> \land <var:Z> = <nat:3> \cdot <var:O> \} \\ <var:Z> := <var:Z> + <var:N0> \\ \{ <var:q> = <var:O> \land <var:Z> = <nat:3> \cdot <var:O> + <nat:2> \} \end{eqnarray} Applying standard Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:q> = <var:O> }} <var:N0> := <nat:2> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:q> ; <var:Z> := <var:N1> ; <var:Z> := <var:Z> + <var:N0> {{ <var:Z> = <nat:3> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:N0> = <nat:2> /\ <var:N1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:N0> = <nat:2> /\ <var:N1> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:N0> = <nat:2> /\ <var:Z> = <nat:3> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:O> /\ <var:Z> = <nat:3> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 