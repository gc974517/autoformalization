\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B1> := <var:r> ; <var:B2> := <var:B1> * <var:r> ; <var:B3> := <var:B2> * <var:r> ; <var:B0> := <nat:6> ; <var:B1> := <var:B1> * <nat:6> ; <var:B2> := <var:B2> * <nat:2> ; <var:B3> := <var:B3> * <nat:6> ; <var:C> := <var:B3> <var:C> := <var:C> + <var:B2> <var:C> := <var:C> + <var:B1> <var:C> := <var:C> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Allow that $ <var:r> = <var:E> $ , taking natural numbers $ <var:E> $ , ahead of evaluating the list of instructions then we have $ <var:C> = <nat:6> \cdot <var:E> ^ <nat:3> + <nat:2> \cdot <var:E> ^ <nat:2> + <nat:6> \cdot <var:E> + <nat:6> $ . \end{theorem} \begin{proof} The argument for our code segment is done using Hoare logic . Jumping to the upcoming statements found in the list of instructions , \[ \begin{tabular} {rcl} \{ <var:r> = <var:E> \} & <var:B1> := <var:r> & \{ <var:r> = <var:E> \land <var:B1> = <var:E> \} \\ \{ <var:r> = <var:E> \land <var:B1> = <var:E> \} & <var:B2> := <var:B1> * <var:r> & \{ <var:r> = <var:E> \land <var:B1> = <var:E> \land <var:B2> = <var:E> ^ <nat:2> \} \\ \{ <var:r> = <var:E> \land <var:B1> = <var:E> \land <var:B2> = <var:E> ^ <nat:2> \} & <var:B3> := <var:B2> * <var:r> & \{ <var:r> = <var:E> \land <var:B1> = <var:E> \land <var:B2> = <var:E> ^ <nat:2> \land <var:B3> = <var:E> ^ <nat:3> \} \\ \{ <var:r> = <var:E> \land <var:B1> = <var:E> \land <var:B2> = <var:E> ^ <nat:2> \land <var:B3> = <var:E> ^ <nat:3> \} & <var:B0> := <nat:6> & \{ <var:r> = <var:E> \land <var:B1> = <var:E> \land <var:B2> = <var:E> ^ <nat:2> \land <var:B3> = <var:E> ^ <nat:3> \land <var:B0> = <nat:6> \} \\ \{ <var:r> = <var:E> \land <var:B1> = <var:E> \land <var:B2> = <var:E> ^ <nat:2> \land <var:B3> = <var:E> ^ <nat:3> \land <var:B0> = <nat:6> \} & <var:B1> := <var:B1> * <nat:6> & \{ <var:r> = <var:E> \land <var:B1> = <nat:6> * <var:E> \land <var:B2> = <var:E> ^ <nat:2> \land <var:B3> = <var:E> ^ <nat:3> \land <var:B0> = <nat:6> \} \\ \{ <var:r> = <var:E> \land <var:B1> = <nat:6> * <var:E> \land <var:B2> = <var:E> ^ <nat:2> \land <var:B3> = <var:E> ^ <nat:3> \land <var:B0> = <nat:6> \} & <var:B2> := <var:B2> * <nat:2> & \{ <var:r> = <var:E> \land <var:B1> = <nat:6> * <var:E> \land <var:B2> = <nat:2> * <var:E> ^ <nat:2> \land <var:B3> = <var:E> ^ <nat:3> \land <var:B0> = <nat:6> \} \\ \{ <var:r> = <var:E> \land <var:B1> = <nat:6> * <var:E> \land <var:B2> = <nat:2> * <var:E> ^ <nat:2> \land <var:B3> = <var:E> ^ <nat:3> \land <var:B0> = <nat:6> \} & <var:B3> := <var:B3> * <nat:6> & \{ <var:r> = <var:E> \land <var:B1> = <nat:6> * <var:E> \land <var:B2> = <nat:2> * <var:E> ^ <nat:2> \land <var:B3> = <nat:6> * <var:E> ^ <nat:3> \land <var:B0> = <nat:6> \} \\ \{ <var:r> = <var:E> \land <var:B1> = <nat:6> * <var:E> \land <var:B2> = <nat:2> * <var:E> ^ <nat:2> \land <var:B3> = <nat:6> * <var:E> ^ <nat:3> \land <var:B0> = <nat:6> \} & <var:C> := <var:B3& \{ <var:r> = <var:E> \land <var:B1> = <nat:6> * <var:E> \land <var:B2> = <nat:2> * <var:E> ^ <nat:2> \land <var:B0> = <nat:6> \land <var:C> = <nat:6> * <var:E> ^ <nat:3> \} \\ \{ <var:r> = <var:E> \land <var:B1> = <nat:6> * <var:E> \land <var:B2> = <nat:2> * <var:E> ^ <nat:2> \land <var:B0> = <nat:6> \land <var:C> = <nat:6> * <var:E> ^ <nat:3> \} & <var:C> := <var:C> + <var:B2& \{ <var:r> = <var:E> \land <var:B1> = <nat:6> * <var:E> \land <var:B0> = <nat:6> \land <var:C> = <nat:6> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> \} \end{tabular} This is guaranteed through the rule obtained from usual Hoare techniques . Moving on , \[ \begin{tabular} {rcl} \{ <var:r> = <var:E> \} & <var:B1> := <var:r> & \{ <var:r> = <var:E> \land <var:B1> = <var:E> \} \end{tabular} This is rigorously given through the variable binding law given by usual Hoare techniques . Further , we have \[ \begin{tabular} {rcl} \{ <var:r> = <var:E> \} & <var:B1> := <var:r> & \{ <var:r> = <var:E> \land <var:B1> = <var:E> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B1> := <var:r> ; <var:B2> := <var:B1> * <var:r> ; <var:B3> := <var:B2> * <var:r> ; <var:B0> := <nat:6> ; <var:B1> := <var:B1> * <nat:6> ; <var:B2> := <var:B2> * <nat:2> ; <var:B3> := <var:B3> * <nat:6> ; <var:C> := <var:B3> <var:C> := <var:C> + <var:B2> <var:C> := <var:C> + <var:B1> <var:C> := <var:C> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:r> = <var:E> }} <def:poly> {{ <var:C> = <nat:6> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:B1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:B1> = <var:E> /\ <var:B2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:B1> = <var:E> /\ <var:B2> = <var:E> ^ <nat:2> /\ <var:B3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:B1> = <var:E> /\ <var:B2> = <var:E> ^ <nat:2> /\ <var:B3> = <var:E> ^ <nat:3> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:B1> = <nat:6> * <var:E> /\ <var:B2> = <var:E> ^ <nat:2> /\ <var:B3> = <var:E> ^ <nat:3> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:B1> = <nat:6> * <var:E> /\ <var:B2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:B3> = <var:E> ^ <nat:3> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:B1> = <nat:6> * <var:E> /\ <var:B2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:B3> = <nat:6> * <var:E> ^ <nat:3> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:B1> = <nat:6> * <var:E> /\ <var:B2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:B0> = <nat:6> /\ <var:C> = <nat:6> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:B1> = <nat:6> * <var:E> /\ <var:B0> = <nat:6> /\ <var:C> = <nat:6> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:B0> = <nat:6> /\ <var:C> = <nat:6> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:C> = <nat:6> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:6> * <var:E> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 