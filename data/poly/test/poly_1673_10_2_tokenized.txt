\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:L> := <nat:2> ; <var:L> := <nat:4> + <var:L> * <var:U> ; <var:L> := <nat:4> + <var:L> * <var:U> ; <var:L> := <nat:3> + <var:L> * <var:U> ; <var:L> := <var:L> * <var:U> ; <var:L> := <nat:2> + <var:L> * <var:U> ; <var:L> := <nat:3> + <var:L> * <var:U> ; <var:L> := <nat:4> + <var:L> * <var:U> ; <var:L> := <nat:1> + <var:L> * <var:U> ; <var:L> := <nat:1> + <var:L> * <var:U> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:U> = <var:B> $ , taking positive integers $ <var:B> $ , ahead of running our program , it holds that $ <var:L> = <nat:2> \cdot <var:B> ^ <nat:9> + <nat:4> \cdot <var:B> ^ <nat:8> + <nat:4> \cdot <var:B> ^ <nat:7> + <nat:3> \cdot <var:B> ^ <nat:6> + <nat:2> \cdot <var:B> ^ <nat:4> + <nat:3> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing Hoare techniques produces : \begin{eqnarray} \{ <var:U> = <var:B> \} \\ <var:L> := <nat:2> ; \\ \{ <var:U> = <var:B> \land <var:L> = <nat:2> \} \end{eqnarray} Furthering evaluating the set of commands yields : \begin{eqnarray} <var:L> := <nat:4> + <var:L> * <var:U> ; \\ \{ <var:U> = <var:B> \land <var:L> = <nat:2> * <var:B> + <nat:4> \} \\ <var:L> := <nat:4> + <var:L> * <var:U> ; \\ \{ <var:U> = <var:B> \land <var:L> = <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:4> \} \\ <var:L> := <nat:3> + <var:L> * <var:U> ; \\ \{ <var:U> = <var:B> \land <var:L> = <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> \} \\ <var:L> := <var:L> * <var:U> ; \\ \{ <var:U> = <var:B> \land <var:L> = <nat:2> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + \} \\ <var:L> := <nat:2> + <var:L> * <var:U> ; \\ \{ <var:U> = <var:B> \land <var:L> = <nat:2> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> \} \\ <var:L> := <nat:3> + <var:L> * <var:U> ; \\ \{ <var:U> = <var:B> \land <var:L> = <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:3> \} \\ <var:L> := <nat:4> + <var:L> * <var:U> ; \\ \{ <var:U> = <var:B> \land <var:L> = <nat:2> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> \} \\ <var:L> := <nat:1> + <var:L> * <var:U> ; \\ \{ <var:U> = <var:B> \land <var:L> = <nat:2> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:1> \} \end{eqnarray} Continuing evaluating our code segment gives : \begin{eqnarray} <var:L> := <nat:1> + <var:L> * <var:U> \\ \{ <var:U> = <var:B> \land <var:L> = <nat:2> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:3> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:1> \} \end{eqnarray} Thusly , the list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:L> := <nat:2> ; <var:L> := <nat:4> + <var:L> * <var:U> ; <var:L> := <nat:4> + <var:L> * <var:U> ; <var:L> := <nat:3> + <var:L> * <var:U> ; <var:L> := <var:L> * <var:U> ; <var:L> := <nat:2> + <var:L> * <var:U> ; <var:L> := <nat:3> + <var:L> * <var:U> ; <var:L> := <nat:4> + <var:L> * <var:U> ; <var:L> := <nat:1> + <var:L> * <var:U> ; <var:L> := <nat:1> + <var:L> * <var:U> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:U> = <var:B> }} <def:poly> {{ <var:L> = <nat:2> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:3> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:L> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:L> = <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:L> = <nat:2> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:L> = <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:L> = <nat:2> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:L> = <nat:2> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:L> = <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:L> = <nat:2> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:L> = <nat:2> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:B> /\ <var:L> = <nat:2> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:3> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 