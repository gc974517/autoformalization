\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:p> := <nat:3> ; <var:p> := <nat:1> + <var:p> * <var:F> ; <var:p> := <var:p> * <var:F> ; <var:p> := <nat:2> + <var:p> * <var:F> ; <var:p> := <nat:4> + <var:p> * <var:F> ; <var:p> := <nat:1> + <var:p> * <var:F> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Assuming --- for every $ <var:c> $ --- it to hold that $ <var:F> = <var:c> $ prior to the execution of the code it follows that we see $ <var:p> = <nat:3> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions can be seen with Hoare reasoning . Considering the proceeding commands found in the list of instructions , \begin{eqnarray} \{ <var:F> = <var:c> \} \, <var:p> := <nat:3> \, \{ <var:F> = <var:c> \land <var:p> = <nat:3> \} \\ \{ <var:F> = <var:c> \land <var:p> = <nat:3> \} \, <var:p> := <nat:1> + <var:p> * <var:F> \, \{ <var:F> = <var:c> \land <var:p> = <nat:3> * <var:c> + <nat:1> \} \\ \{ <var:F> = <var:c> \land <var:p> = <nat:3> * <var:c> + <nat:1> \} \, <var:p> := <var:p> * <var:F> \, \{ <var:F> = <var:c> \land <var:p> = <nat:3> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + \} \end{eqnarray} This is guaranteed through the variable update inference rule given by typical Hoare logic . Moving forward to the subsequent line contained in the program , we have \begin{eqnarray} \{ <var:F> = <var:c> \} \, <var:p> := <nat:3> \, \{ <var:F> = <var:c> \land <var:p> = <nat:3> \} \end{eqnarray} This is guaranteed using the variable update rule defined in usual Hoare logic . Moving on to the proceeding piece of code contained in the list of instructions , we see \begin{eqnarray} \{ <var:F> = <var:c> \} \, <var:p> := <nat:3> \, \{ <var:F> = <var:c> \land <var:p> = <nat:3> \} \end{eqnarray} This is ensured with the assignment rule defined in Hoare reasoning . Stepping through , \begin{eqnarray} \{ <var:F> = <var:c> \} \, <var:p> := <nat:3> \, \{ <var:F> = <var:c> \land <var:p> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:3> ; <var:p> := <nat:1> + <var:p> * <var:F> ; <var:p> := <var:p> * <var:F> ; <var:p> := <nat:2> + <var:p> * <var:F> ; <var:p> := <nat:4> + <var:p> * <var:F> ; <var:p> := <nat:1> + <var:p> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:F> = <var:c> }} <def:poly> {{ <var:p> = <nat:3> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:p> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:p> = <nat:3> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:p> = <nat:3> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:p> = <nat:3> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:p> = <nat:3> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:p> = <nat:3> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 