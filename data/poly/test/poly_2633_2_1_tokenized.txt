\begin{document} \begin{theorem} Let the following series of commands : \begin{verbatim} <var:P0> := <nat:1> ; <var:H> := <var:P0> \end{verbatim} Allowing it to be that $ <var:E> = <var:T> $ ahead of executing the code segment it follows that we have $ <var:H> = <nat:1> $ . \end{theorem} \begin{proof} The proof of this set of instructions is given by typical Hoare reasoning . Honing in on the proceeding bit of code seen in our program , the assignment command \verb | <var:P0> := <nat:1> ; | . This statement transfers the precondition $ \{ <var:E> = <var:T> \} $ into $ \{ <var:E> = <var:T> \land <var:P0> = <nat:1> \} $ . Following , the environment update statement \verb | <var:H> := <var:P0> | . This transfers the condition $ \{ <var:E> = <var:T> \land <var:P0> = <nat:1> \} $ as the condition $ \{ <var:E> = <var:T> \land <var:H> = <nat:1> \} $ . This is shown through the assignment rule from usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:E> = <var:T> }} <var:P0> := <nat:1> ; <var:H> := <var:P0> {{ <var:H> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:T> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:T> /\ <var:H> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 