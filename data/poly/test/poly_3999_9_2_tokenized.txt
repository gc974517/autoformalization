\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} as \begin{verbatim} <var:O> := <nat:1> ; <var:O> := <var:O> * <var:M> ; <var:O> := <nat:4> + <var:O> * <var:M> ; <var:O> := <nat:1> + <var:O> * <var:M> ; <var:O> := <nat:1> + <var:O> * <var:M> ; <var:O> := <nat:1> + <var:O> * <var:M> ; <var:O> := <nat:4> + <var:O> * <var:M> ; <var:O> := <nat:4> + <var:O> * <var:M> ; <var:O> := <nat:1> + <var:O> * <var:M> \end{verbatim} Allowing ( given every $ <var:l> \in \mathbb{Z}^+ $ ) it to be that $ <var:M> = <var:l> $ prior to evaluating this list of instructions it must be that we have $ <var:O> = <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> $ . \end{theorem} \begin{proof} Applying Hoare logic yields : \begin{eqnarray} \{ <var:M> = <var:l> \} \\ <var:O> := <nat:1> ; \\ \{ <var:M> = <var:l> \land <var:O> = <nat:1> \} \\ <var:O> := <var:O> * <var:M> ; \\ \{ <var:M> = <var:l> \land <var:O> = <nat:1> * <var:l> + \} \\ <var:O> := <nat:4> + <var:O> * <var:M> ; \\ \{ <var:M> = <var:l> \land <var:O> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> \} \\ <var:O> := <nat:1> + <var:O> * <var:M> ; \\ \{ <var:M> = <var:l> \land <var:O> = <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> + <nat:1> \} \\ <var:O> := <nat:1> + <var:O> * <var:M> ; \\ \{ <var:M> = <var:l> \land <var:O> = <nat:1> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:1> \} \\ <var:O> := <nat:1> + <var:O> * <var:M> ; \\ \{ <var:M> = <var:l> \land <var:O> = <nat:1> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:1> \} \\ <var:O> := <nat:4> + <var:O> * <var:M> ; \\ \{ <var:M> = <var:l> \land <var:O> = <nat:1> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> \} \\ <var:O> := <nat:4> + <var:O> * <var:M> ; \\ \{ <var:M> = <var:l> \land <var:O> = <nat:1> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> \} \\ <var:O> := <nat:1> + <var:O> * <var:M> \\ \{ <var:M> = <var:l> \land <var:O> = <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> \} \end{eqnarray} Given the above , the code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:M> = <var:l> }} <var:O> := <nat:1> ; <var:O> := <var:O> * <var:M> ; <var:O> := <nat:4> + <var:O> * <var:M> ; <var:O> := <nat:1> + <var:O> * <var:M> ; <var:O> := <nat:1> + <var:O> * <var:M> ; <var:O> := <nat:1> + <var:O> * <var:M> ; <var:O> := <nat:4> + <var:O> * <var:M> ; <var:O> := <nat:4> + <var:O> * <var:M> ; <var:O> := <nat:1> + <var:O> * <var:M> {{ <var:O> = <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:O> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:O> = <nat:1> * <var:l> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:O> = <nat:1> * <var:l> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:O> = <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:O> = <nat:1> * <var:l> ^ <nat:4> + <nat:4> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:O> = <nat:1> * <var:l> ^ <nat:5> + <nat:4> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:O> = <nat:1> * <var:l> ^ <nat:6> + <nat:4> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:O> = <nat:1> * <var:l> ^ <nat:7> + <nat:4> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:1> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:l> /\ <var:O> = <nat:1> * <var:l> ^ <nat:8> + <nat:4> * <var:l> ^ <nat:6> + <nat:1> * <var:l> ^ <nat:5> + <nat:1> * <var:l> ^ <nat:4> + <nat:1> * <var:l> ^ <nat:3> + <nat:4> * <var:l> ^ <nat:2> + <nat:4> * <var:l> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 