\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:r1> := <var:t> ; <var:r2> := <var:r1> * <var:t> ; <var:r3> := <var:r2> * <var:t> ; <var:r0> := <nat:2> ; <var:r1> := <var:r1> * <nat:2> ; <var:r2> := <var:r2> * <nat:3> ; <var:r3> := <var:r3> * <nat:3> ; <var:L> := <var:r3> <var:L> := <var:L> + <var:r2> <var:L> := <var:L> + <var:r1> <var:L> := <var:L> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:t> = <var:V> $ ahead of evaluating this set of commands , then we have $ <var:L> = <nat:3> \times <var:V> ^ <nat:3> + <nat:3> \times <var:V> ^ <nat:2> + <nat:2> \times <var:V> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands can be done with standard Hoare techniques . Observing the upcoming steps found in our code segment , \begin{verbatim} { <var:t> = <var:V> } <var:r1> := <var:t> { <var:t> = <var:V> \land <var:r1> = <var:V> } { <var:t> = <var:V> \land <var:r1> = <var:V> } <var:r2> := <var:r1> * <var:t> { <var:t> = <var:V> \land <var:r1> = <var:V> \land <var:r2> = <var:V> ^ <nat:2> } { <var:t> = <var:V> \land <var:r1> = <var:V> \land <var:r2> = <var:V> ^ <nat:2> } <var:r3> := <var:r2> * <var:t> { <var:t> = <var:V> \land <var:r1> = <var:V> \land <var:r2> = <var:V> ^ <nat:2> \land <var:r3> = <var:V> ^ <nat:3> } { <var:t> = <var:V> \land <var:r1> = <var:V> \land <var:r2> = <var:V> ^ <nat:2> \land <var:r3> = <var:V> ^ <nat:3> } <var:r0> := <nat:2> { <var:t> = <var:V> \land <var:r1> = <var:V> \land <var:r2> = <var:V> ^ <nat:2> \land <var:r3> = <var:V> ^ <nat:3> \land <var:r0> = <nat:2> } { <var:t> = <var:V> \land <var:r1> = <var:V> \land <var:r2> = <var:V> ^ <nat:2> \land <var:r3> = <var:V> ^ <nat:3> \land <var:r0> = <nat:2> } <var:r1> := <var:r1> * <nat:2> { <var:t> = <var:V> \land <var:r1> = <nat:2> \cdot <var:V> \land <var:r2> = <var:V> ^ <nat:2> \land <var:r3> = <var:V> ^ <nat:3> \land <var:r0> = <nat:2> } { <var:t> = <var:V> \land <var:r1> = <nat:2> \cdot <var:V> \land <var:r2> = <var:V> ^ <nat:2> \land <var:r3> = <var:V> ^ <nat:3> \land <var:r0> = <nat:2> } <var:r2> := <var:r2> * <nat:3> { <var:t> = <var:V> \land <var:r1> = <nat:2> \cdot <var:V> \land <var:r2> = <nat:3> \cdot <var:V> ^ <nat:2> \land <var:r3> = <var:V> ^ <nat:3> \land <var:r0> = <nat:2> } \end{verbatim} Advancing on , \begin{verbatim} { <var:t> = <var:V> } <var:r1> := <var:t> { <var:t> = <var:V> \land <var:r1> = <var:V> } { <var:t> = <var:V> \land <var:r1> = <var:V> } <var:r2> := <var:r1> * <var:t> { <var:t> = <var:V> \land <var:r1> = <var:V> \land <var:r2> = <var:V> ^ <nat:2> } { <var:t> = <var:V> \land <var:r1> = <var:V> \land <var:r2> = <var:V> ^ <nat:2> } <var:r3> := <var:r2> * <var:t> { <var:t> = <var:V> \land <var:r1> = <var:V> \land <var:r2> = <var:V> ^ <nat:2> \land <var:r3> = <var:V> ^ <nat:3> } { <var:t> = <var:V> \land <var:r1> = <var:V> \land <var:r2> = <var:V> ^ <nat:2> \land <var:r3> = <var:V> ^ <nat:3> } <var:r0> := <nat:2> { <var:t> = <var:V> \land <var:r1> = <var:V> \land <var:r2> = <var:V> ^ <nat:2> \land <var:r3> = <var:V> ^ <nat:3> \land <var:r0> = <nat:2> } \end{verbatim} This is rigorously given using the variable binding scheme found in typical Hoare logic . Jumping to the next command seen in the series of commands , we see \begin{verbatim} { <var:t> = <var:V> } <var:r1> := <var:t> { <var:t> = <var:V> \land <var:r1> = <var:V> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:t> ; <var:r2> := <var:r1> * <var:t> ; <var:r3> := <var:r2> * <var:t> ; <var:r0> := <nat:2> ; <var:r1> := <var:r1> * <nat:2> ; <var:r2> := <var:r2> * <nat:3> ; <var:r3> := <var:r3> * <nat:3> ; <var:L> := <var:r3> <var:L> := <var:L> + <var:r2> <var:L> := <var:L> + <var:r1> <var:L> := <var:L> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:t> = <var:V> }} <def:poly> {{ <var:L> = <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:r1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:r1> = <var:V> /\ <var:r2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:r1> = <var:V> /\ <var:r2> = <var:V> ^ <nat:2> /\ <var:r3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:r1> = <var:V> /\ <var:r2> = <var:V> ^ <nat:2> /\ <var:r3> = <var:V> ^ <nat:3> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:r1> = <nat:2> * <var:V> /\ <var:r2> = <var:V> ^ <nat:2> /\ <var:r3> = <var:V> ^ <nat:3> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:r1> = <nat:2> * <var:V> /\ <var:r2> = <nat:3> * <var:V> ^ <nat:2> /\ <var:r3> = <var:V> ^ <nat:3> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:r1> = <nat:2> * <var:V> /\ <var:r2> = <nat:3> * <var:V> ^ <nat:2> /\ <var:r3> = <nat:3> * <var:V> ^ <nat:3> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:r1> = <nat:2> * <var:V> /\ <var:r2> = <nat:3> * <var:V> ^ <nat:2> /\ <var:r0> = <nat:2> /\ <var:L> = <nat:3> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:r1> = <nat:2> * <var:V> /\ <var:r0> = <nat:2> /\ <var:L> = <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:r0> = <nat:2> /\ <var:L> = <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:V> /\ <var:L> = <nat:3> * <var:V> ^ <nat:3> + <nat:3> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 