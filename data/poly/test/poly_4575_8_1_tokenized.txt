\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} as \begin{verbatim} <var:n1> := <var:L> ; <var:n2> := <var:n1> * <var:L> ; <var:n0> := <nat:7> ; <var:n1> := <var:n1> * <nat:5> ; <var:n2> := <var:n2> * <nat:6> ; <var:a> := <var:n2> <var:a> := <var:a> + <var:n1> <var:a> := <var:a> + <var:n0> \end{verbatim} Allow that $ <var:L> = <var:h> $ , assuming some natural numbers $ <var:h> $ , prior to the evaluation of the series of commands then $ <var:a> = <nat:6> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:h> \} \\ <var:n1> := <var:L> ; \\ \{ <var:L> = <var:h> \land <var:n1> = <var:h> \} \\ <var:n2> := <var:n1> * <var:L> ; \\ \{ <var:L> = <var:h> \land <var:n1> = <var:h> \land <var:n2> = <var:h> ^ <nat:2> \} \\ <var:n0> := <nat:7> ; \\ \{ <var:L> = <var:h> \land <var:n1> = <var:h> \land <var:n2> = <var:h> ^ <nat:2> \land <var:n0> = <nat:7> \} \\ <var:n1> := <var:n1> * <nat:5> ; \\ \{ <var:L> = <var:h> \land <var:n1> = <nat:5> * <var:h> \land <var:n2> = <var:h> ^ <nat:2> \land <var:n0> = <nat:7> \} \\ <var:n2> := <var:n2> * <nat:6> ; \\ \{ <var:L> = <var:h> \land <var:n1> = <nat:5> * <var:h> \land <var:n2> = <nat:6> * <var:h> ^ <nat:2> \land <var:n0> = <nat:7> \} \\ <var:a> := <var:n2> \\ \{ <var:L> = <var:h> \land <var:n1> = <nat:5> * <var:h> \land <var:n0> = <nat:7> \land <var:a> = <nat:6> * <var:h> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:n1> \\ \{ <var:L> = <var:h> \land <var:n0> = <nat:7> \land <var:a> = <nat:6> * <var:h> ^ <nat:2> + <nat:5> * <var:h> \} \\ <var:a> := <var:a> + <var:n0> \\ \{ <var:L> = <var:h> \land <var:a> = <nat:6> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:7> \} \end{eqnarray} Using standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:L> = <var:h> }} <var:n1> := <var:L> ; <var:n2> := <var:n1> * <var:L> ; <var:n0> := <nat:7> ; <var:n1> := <var:n1> * <nat:5> ; <var:n2> := <var:n2> * <nat:6> ; <var:a> := <var:n2> <var:a> := <var:a> + <var:n1> <var:a> := <var:a> + <var:n0> {{ <var:a> = <nat:6> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:n1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:n1> = <var:h> /\ <var:n2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:n1> = <var:h> /\ <var:n2> = <var:h> ^ <nat:2> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:n1> = <nat:5> * <var:h> /\ <var:n2> = <var:h> ^ <nat:2> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:n1> = <nat:5> * <var:h> /\ <var:n2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:n1> = <nat:5> * <var:h> /\ <var:n0> = <nat:7> /\ <var:a> = <nat:6> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:n0> = <nat:7> /\ <var:a> = <nat:6> * <var:h> ^ <nat:2> + <nat:5> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:h> /\ <var:a> = <nat:6> * <var:h> ^ <nat:2> + <nat:5> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 