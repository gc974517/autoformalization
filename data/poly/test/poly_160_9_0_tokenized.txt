\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:s0> := <nat:8> ; <var:s1> := <nat:6> ; <var:s1> := <var:s1> * <var:T> ; <var:s2> := <nat:6> ; <var:s2> := <var:s2> * <var:T> ; <var:s2> := <var:s2> * <var:T> ; <var:a> := <var:s2> ; <var:a> := <var:a> + <var:s1> ; <var:a> := <var:a> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> in \emph{Imp} . Assuming --- for all whole numbers $ <var:N> $ --- that we have $ <var:T> = <var:N> $ ahead of the execution of the program it holds that we have $ <var:a> = <nat:6> \cdot <var:N> ^ <nat:2> + <nat:6> \cdot <var:N> + <nat:8> $ . \end{theorem} \begin{proof} Proving correctness for our set of commands can be shown by the following decorated segment of code . \begin{eqnarray} \{ <var:T> = <var:N> \} \\ <var:s0> := <nat:8> ; \\ \{ <var:T> = <var:N> \land <var:s0> = <nat:8> \} \\ <var:s1> := <nat:6> ; \\ \{ <var:T> = <var:N> \land <var:s0> = <nat:8> \land <var:s1> = <nat:6> \} \\ <var:s1> := <var:s1> * <var:T> ; \\ \{ <var:T> = <var:N> \land <var:s0> = <nat:8> \land <var:s1> = <nat:6> * <var:N> \} \\ <var:s2> := <nat:6> ; \\ \{ <var:T> = <var:N> \land <var:s0> = <nat:8> \land <var:s1> = <nat:6> * <var:N> \land <var:s2> = <nat:6> \} \\ <var:s2> := <var:s2> * <var:T> ; \\ \{ <var:T> = <var:N> \land <var:s0> = <nat:8> \land <var:s1> = <nat:6> * <var:N> \land <var:s2> = <nat:6> * <var:N> \} \\ <var:s2> := <var:s2> * <var:T> ; \\ \{ <var:T> = <var:N> \land <var:s0> = <nat:8> \land <var:s1> = <nat:6> * <var:N> \land <var:s2> = <nat:6> * <var:N> ^ <nat:2> \} \\ <var:a> := <var:s2> ; \\ \{ <var:T> = <var:N> \land <var:s0> = <nat:8> \land <var:s1> = <nat:6> * <var:N> \land <var:a> = <nat:6> * <var:N> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:s1> ; \\ \{ <var:T> = <var:N> \land <var:s0> = <nat:8> \land <var:a> = <nat:6> * <var:N> ^ <nat:2> + <nat:6> * <var:N> \} \\ <var:a> := <var:a> + <var:s0> \\ \{ <var:T> = <var:N> \land <var:a> = <nat:6> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:8> \} \end{eqnarray} Applying typical Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:8> ; <var:s1> := <nat:6> ; <var:s1> := <var:s1> * <var:T> ; <var:s2> := <nat:6> ; <var:s2> := <var:s2> * <var:T> ; <var:s2> := <var:s2> * <var:T> ; <var:a> := <var:s2> ; <var:a> := <var:a> + <var:s1> ; <var:a> := <var:a> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:T> = <var:N> }} <def:poly> {{ <var:a> = <nat:6> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:6> * <var:N> /\ <var:s2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:6> * <var:N> /\ <var:s2> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:6> * <var:N> /\ <var:s2> = <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:s0> = <nat:8> /\ <var:s1> = <nat:6> * <var:N> /\ <var:a> = <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:s0> = <nat:8> /\ <var:a> = <nat:6> * <var:N> ^ <nat:2> + <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:N> /\ <var:a> = <nat:6> * <var:N> ^ <nat:2> + <nat:6> * <var:N> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 