\begin{document} \begin{theorem} Define the following series of instructions : \begin{verbatim} <var:p1> := <var:k> ; <var:p2> := <var:p1> * <var:k> ; <var:p3> := <var:p2> * <var:k> ; <var:p4> := <var:p3> * <var:k> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:1> ; <var:p2> := <var:p2> * <nat:8> ; <var:p3> := <var:p3> * <nat:9> ; <var:p4> := <var:p4> * <nat:6> ; <var:i> := <var:p4> <var:i> := <var:i> + <var:p3> <var:i> := <var:i> + <var:p2> <var:i> := <var:i> + <var:p1> <var:i> := <var:i> + <var:p0> \end{verbatim} Given $ <var:k> = <var:t> $ prior to executing our series of commands , it must be that we have $ <var:i> = <nat:6> \times <var:t> ^ <nat:4> + <nat:9> \times <var:t> ^ <nat:3> + <nat:8> \times <var:t> ^ <nat:2> + <nat:1> \times <var:t> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our series of commands can be done through Hoare reasoning . Further , we have \[ \begin{tabular} {rcl} \{ <var:k> = <var:t> \} & <var:p1> := <var:k> & \{ <var:k> = <var:t> \land <var:p1> = <var:t> \} \\ \{ <var:k> = <var:t> \land <var:p1> = <var:t> \} & <var:p2> := <var:p1> * <var:k> & \{ <var:k> = <var:t> \land <var:p1> = <var:t> \land <var:p2> = <var:t> ^ <nat:2> \} \\ \{ <var:k> = <var:t> \land <var:p1> = <var:t> \land <var:p2> = <var:t> ^ <nat:2> \} & <var:p3> := <var:p2> * <var:k> & \{ <var:k> = <var:t> \land <var:p1> = <var:t> \land <var:p2> = <var:t> ^ <nat:2> \land <var:p3> = <var:t> ^ <nat:3> \} \\ \{ <var:k> = <var:t> \land <var:p1> = <var:t> \land <var:p2> = <var:t> ^ <nat:2> \land <var:p3> = <var:t> ^ <nat:3> \} & <var:p4> := <var:p3> * <var:k> & \{ <var:k> = <var:t> \land <var:p1> = <var:t> \land <var:p2> = <var:t> ^ <nat:2> \land <var:p3> = <var:t> ^ <nat:3> \land <var:p4> = <var:t> ^ <nat:4> \} \\ \{ <var:k> = <var:t> \land <var:p1> = <var:t> \land <var:p2> = <var:t> ^ <nat:2> \land <var:p3> = <var:t> ^ <nat:3> \land <var:p4> = <var:t> ^ <nat:4> \} & <var:p0> := <nat:2> & \{ <var:k> = <var:t> \land <var:p1> = <var:t> \land <var:p2> = <var:t> ^ <nat:2> \land <var:p3> = <var:t> ^ <nat:3> \land <var:p4> = <var:t> ^ <nat:4> \land <var:p0> = <nat:2> \} \\ \{ <var:k> = <var:t> \land <var:p1> = <var:t> \land <var:p2> = <var:t> ^ <nat:2> \land <var:p3> = <var:t> ^ <nat:3> \land <var:p4> = <var:t> ^ <nat:4> \land <var:p0> = <nat:2> \} & <var:p1> := <var:p1> * <nat:1> & \{ <var:k> = <var:t> \land <var:p1> = <nat:1> \cdot <var:t> \land <var:p2> = <var:t> ^ <nat:2> \land <var:p3> = <var:t> ^ <nat:3> \land <var:p4> = <var:t> ^ <nat:4> \land <var:p0> = <nat:2> \} \\ \{ <var:k> = <var:t> \land <var:p1> = <nat:1> \cdot <var:t> \land <var:p2> = <var:t> ^ <nat:2> \land <var:p3> = <var:t> ^ <nat:3> \land <var:p4> = <var:t> ^ <nat:4> \land <var:p0> = <nat:2> \} & <var:p2> := <var:p2> * <nat:8> & \{ <var:k> = <var:t> \land <var:p1> = <nat:1> \cdot <var:t> \land <var:p2> = <nat:8> \cdot <var:t> ^ <nat:2> \land <var:p3> = <var:t> ^ <nat:3> \land <var:p4> = <var:t> ^ <nat:4> \land <var:p0> = <nat:2> \} \\ \{ <var:k> = <var:t> \land <var:p1> = <nat:1> \cdot <var:t> \land <var:p2> = <nat:8> \cdot <var:t> ^ <nat:2> \land <var:p3> = <var:t> ^ <nat:3> \land <var:p4> = <var:t> ^ <nat:4> \land <var:p0> = <nat:2> \} & <var:p3> := <var:p3> * <nat:9> & \{ <var:k> = <var:t> \land <var:p1> = <nat:1> \cdot <var:t> \land <var:p2> = <nat:8> \cdot <var:t> ^ <nat:2> \land <var:p3> = <nat:9> \cdot <var:t> ^ <nat:3> \land <var:p4> = <var:t> ^ <nat:4> \land <var:p0> = <nat:2> \} \\ \{ <var:k> = <var:t> \land <var:p1> = <nat:1> \cdot <var:t> \land <var:p2> = <nat:8> \cdot <var:t> ^ <nat:2> \land <var:p3> = <nat:9> \cdot <var:t> ^ <nat:3> \land <var:p4> = <var:t> ^ <nat:4> \land <var:p0> = <nat:2> \} & <var:p4> := <var:p4> * <nat:6> & \{ <var:k> = <var:t> \land <var:p1> = <nat:1> \cdot <var:t> \land <var:p2> = <nat:8> \cdot <var:t> ^ <nat:2> \land <var:p3> = <nat:9> \cdot <var:t> ^ <nat:3> \land <var:p4> = <nat:6> \cdot <var:t> ^ <nat:4> \land <var:p0> = <nat:2> \} \\ \{ <var:k> = <var:t> \land <var:p1> = <nat:1> \cdot <var:t> \land <var:p2> = <nat:8> \cdot <var:t> ^ <nat:2> \land <var:p3> = <nat:9> \cdot <var:t> ^ <nat:3> \land <var:p4> = <nat:6> \cdot <var:t> ^ <nat:4> \land <var:p0> = <nat:2> \} & <var:i> := <var:p4& \{ <var:k> = <var:t> \land <var:p1> = <nat:1> \cdot <var:t> \land <var:p2> = <nat:8> \cdot <var:t> ^ <nat:2> \land <var:p3> = <nat:9> \cdot <var:t> ^ <nat:3> \land <var:p0> = <nat:2> \land <var:i> = <nat:6> \cdot <var:t> ^ <nat:4> \} \end{tabular} Honing in on the next bit of code contained in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:k> = <var:t> \} & <var:p1> := <var:k> & \{ <var:k> = <var:t> \land <var:p1> = <var:t> \} \end{tabular} Considering the proceeding commands found in the program , we have \[ \begin{tabular} {rcl} \{ <var:k> = <var:t> \} & <var:p1> := <var:k> & \{ <var:k> = <var:t> \land <var:p1> = <var:t> \} \\ \{ <var:k> = <var:t> \land <var:p1> = <var:t> \} & <var:p2> := <var:p1> * <var:k> & \{ <var:k> = <var:t> \land <var:p1> = <var:t> \land <var:p2> = <var:t> ^ <nat:2> \} \\ \{ <var:k> = <var:t> \land <var:p1> = <var:t> \land <var:p2> = <var:t> ^ <nat:2> \} & <var:p3> := <var:p2> * <var:k> & \{ <var:k> = <var:t> \land <var:p1> = <var:t> \land <var:p2> = <var:t> ^ <nat:2> \land <var:p3> = <var:t> ^ <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:k> = <var:t> }} <var:p1> := <var:k> ; <var:p2> := <var:p1> * <var:k> ; <var:p3> := <var:p2> * <var:k> ; <var:p4> := <var:p3> * <var:k> ; <var:p0> := <nat:2> ; <var:p1> := <var:p1> * <nat:1> ; <var:p2> := <var:p2> * <nat:8> ; <var:p3> := <var:p3> * <nat:9> ; <var:p4> := <var:p4> * <nat:6> ; <var:i> := <var:p4> <var:i> := <var:i> + <var:p3> <var:i> := <var:i> + <var:p2> <var:i> := <var:i> + <var:p1> <var:i> := <var:i> + <var:p0> {{ <var:i> = <nat:6> * <var:t> ^ <nat:4> + <nat:9> * <var:t> ^ <nat:3> + <nat:8> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:p1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:p1> = <var:t> /\ <var:p2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:p1> = <var:t> /\ <var:p2> = <var:t> ^ <nat:2> /\ <var:p3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:p1> = <var:t> /\ <var:p2> = <var:t> ^ <nat:2> /\ <var:p3> = <var:t> ^ <nat:3> /\ <var:p4> = <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:p1> = <var:t> /\ <var:p2> = <var:t> ^ <nat:2> /\ <var:p3> = <var:t> ^ <nat:3> /\ <var:p4> = <var:t> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:p1> = <nat:1> * <var:t> /\ <var:p2> = <var:t> ^ <nat:2> /\ <var:p3> = <var:t> ^ <nat:3> /\ <var:p4> = <var:t> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:p1> = <nat:1> * <var:t> /\ <var:p2> = <nat:8> * <var:t> ^ <nat:2> /\ <var:p3> = <var:t> ^ <nat:3> /\ <var:p4> = <var:t> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:p1> = <nat:1> * <var:t> /\ <var:p2> = <nat:8> * <var:t> ^ <nat:2> /\ <var:p3> = <nat:9> * <var:t> ^ <nat:3> /\ <var:p4> = <var:t> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:p1> = <nat:1> * <var:t> /\ <var:p2> = <nat:8> * <var:t> ^ <nat:2> /\ <var:p3> = <nat:9> * <var:t> ^ <nat:3> /\ <var:p4> = <nat:6> * <var:t> ^ <nat:4> /\ <var:p0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:p1> = <nat:1> * <var:t> /\ <var:p2> = <nat:8> * <var:t> ^ <nat:2> /\ <var:p3> = <nat:9> * <var:t> ^ <nat:3> /\ <var:p0> = <nat:2> /\ <var:i> = <nat:6> * <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:p1> = <nat:1> * <var:t> /\ <var:p2> = <nat:8> * <var:t> ^ <nat:2> /\ <var:p0> = <nat:2> /\ <var:i> = <nat:6> * <var:t> ^ <nat:4> + <nat:9> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:p1> = <nat:1> * <var:t> /\ <var:p0> = <nat:2> /\ <var:i> = <nat:6> * <var:t> ^ <nat:4> + <nat:9> * <var:t> ^ <nat:3> + <nat:8> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:p0> = <nat:2> /\ <var:i> = <nat:6> * <var:t> ^ <nat:4> + <nat:9> * <var:t> ^ <nat:3> + <nat:8> * <var:t> ^ <nat:2> + <nat:1> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:t> /\ <var:i> = <nat:6> * <var:t> ^ <nat:4> + <nat:9> * <var:t> ^ <nat:3> + <nat:8> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 