\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:u> := <nat:3> ; <var:u> := <nat:2> + <var:u> * <var:m> ; <var:u> := <nat:3> + <var:u> * <var:m> ; <var:u> := <nat:4> + <var:u> * <var:m> ; <var:u> := <var:u> * <var:m> ; <var:u> := <nat:3> + <var:u> * <var:m> ; <var:u> := <var:u> * <var:m> ; <var:u> := <nat:4> + <var:u> * <var:m> ; <var:u> := <nat:1> + <var:u> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:m> = <var:t> $ ahead of the evaluation of the list of commands it holds that $ <var:u> = <nat:3> * <var:t> ^ <nat:8> + <nat:2> * <var:t> ^ <nat:7> + <nat:3> * <var:t> ^ <nat:6> + <nat:4> * <var:t> ^ <nat:5> + <nat:3> * <var:t> ^ <nat:3> + <nat:4> * <var:t> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for this segment of code is shown using usual Hoare reasoning . Observing the subsequent steps contained in the series of instructions , \verb | { <var:m> = <var:t> } <var:u> := <nat:3> { <var:m> = <var:t> \land <var:u> = <nat:3> } | , \verb | { <var:m> = <var:t> \land <var:u> = <nat:3> } <var:u> := <nat:2> + <var:u> * <var:m> { <var:m> = <var:t> \land <var:u> = <nat:3> \cdot <var:t> + <nat:2> } | , \verb | { <var:m> = <var:t> \land <var:u> = <nat:3> \cdot <var:t> + <nat:2> } <var:u> := <nat:3> + <var:u> * <var:m> { <var:m> = <var:t> \land <var:u> = <nat:3> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:3> } | , \verb | { <var:m> = <var:t> \land <var:u> = <nat:3> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:3> } <var:u> := <nat:4> + <var:u> * <var:m> { <var:m> = <var:t> \land <var:u> = <nat:3> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:4> } | , \verb | { <var:m> = <var:t> \land <var:u> = <nat:3> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:4> } <var:u> := <var:u> * <var:m> { <var:m> = <var:t> \land <var:u> = <nat:3> \cdot <var:t> ^ <nat:4> + <nat:2> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + } | , \verb | { <var:m> = <var:t> \land <var:u> = <nat:3> \cdot <var:t> ^ <nat:4> + <nat:2> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + } <var:u> := <nat:3> + <var:u> * <var:m> { <var:m> = <var:t> \land <var:u> = <nat:3> \cdot <var:t> ^ <nat:5> + <nat:2> \cdot <var:t> ^ <nat:4> + <nat:3> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:3> } | and \verb | { <var:m> = <var:t> \land <var:u> = <nat:3> \cdot <var:t> ^ <nat:5> + <nat:2> \cdot <var:t> ^ <nat:4> + <nat:3> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:3> } <var:u> := <var:u> * <var:m> { <var:m> = <var:t> \land <var:u> = <nat:3> \cdot <var:t> ^ <nat:6> + <nat:2> \cdot <var:t> ^ <nat:5> + <nat:3> \cdot <var:t> ^ <nat:4> + <nat:4> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> + } | . Moving forward to the subsequent piece of code found in our series of commands , \verb | { <var:m> = <var:t> } <var:u> := <nat:3> { <var:m> = <var:t> \land <var:u> = <nat:3> } | . Taking a look at the proceeding piece of code found in the series of commands , \verb | { <var:m> = <var:t> } <var:u> := <nat:3> { <var:m> = <var:t> \land <var:u> = <nat:3> } | . This is ensured using the binding rule found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:3> ; <var:u> := <nat:2> + <var:u> * <var:m> ; <var:u> := <nat:3> + <var:u> * <var:m> ; <var:u> := <nat:4> + <var:u> * <var:m> ; <var:u> := <var:u> * <var:m> ; <var:u> := <nat:3> + <var:u> * <var:m> ; <var:u> := <var:u> * <var:m> ; <var:u> := <nat:4> + <var:u> * <var:m> ; <var:u> := <nat:1> + <var:u> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:m> = <var:t> }} <def:poly> {{ <var:u> = <nat:3> * <var:t> ^ <nat:8> + <nat:2> * <var:t> ^ <nat:7> + <nat:3> * <var:t> ^ <nat:6> + <nat:4> * <var:t> ^ <nat:5> + <nat:3> * <var:t> ^ <nat:3> + <nat:4> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:u> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:u> = <nat:3> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:u> = <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:u> = <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:u> = <nat:3> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:u> = <nat:3> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:u> = <nat:3> * <var:t> ^ <nat:6> + <nat:2> * <var:t> ^ <nat:5> + <nat:3> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:u> = <nat:3> * <var:t> ^ <nat:7> + <nat:2> * <var:t> ^ <nat:6> + <nat:3> * <var:t> ^ <nat:5> + <nat:4> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:t> /\ <var:u> = <nat:3> * <var:t> ^ <nat:8> + <nat:2> * <var:t> ^ <nat:7> + <nat:3> * <var:t> ^ <nat:6> + <nat:4> * <var:t> ^ <nat:5> + <nat:3> * <var:t> ^ <nat:3> + <nat:4> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 