\begin{document} \begin{theorem} We define a code segment such that \begin{verbatim} <var:u0> := <nat:3> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:H> ; <var:u2> := <nat:4> ; <var:u2> := <var:u2> * <var:H> ; <var:u2> := <var:u2> * <var:H> ; <var:A> := <var:u2> ; <var:A> := <var:A> + <var:u1> ; <var:A> := <var:A> + <var:u0> \end{verbatim} Assume ( letting positive numbers $ <var:o> $ ) it to be that $ <var:H> = <var:o> $ prior to interpreting the set of commands , it holds that we have $ <var:A> = <nat:4> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:3> $ when list of commands has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:o> \} \\ <var:u0> := <nat:3> ; \\ \{ <var:H> = <var:o> \land <var:u0> = <nat:3> \} \\ <var:u1> := <nat:4> ; \\ \{ <var:H> = <var:o> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> \} \\ <var:u1> := <var:u1> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:o> \} \\ <var:u2> := <nat:4> ; \\ \{ <var:H> = <var:o> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:o> \land <var:u2> = <nat:4> \} \\ <var:u2> := <var:u2> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:o> \land <var:u2> = <nat:4> * <var:o> \} \\ <var:u2> := <var:u2> * <var:H> ; \\ \{ <var:H> = <var:o> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:o> \land <var:u2> = <nat:4> * <var:o> ^ <nat:2> \} \\ <var:A> := <var:u2> ; \\ \{ <var:H> = <var:o> \land <var:u0> = <nat:3> \land <var:u1> = <nat:4> * <var:o> \land <var:A> = <nat:4> * <var:o> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:u1> ; \\ \{ <var:H> = <var:o> \land <var:u0> = <nat:3> \land <var:A> = <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> \} \\ <var:A> := <var:A> + <var:u0> \\ \{ <var:H> = <var:o> \land <var:A> = <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:3> \} \end{eqnarray} The application of usual Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:H> = <var:o> }} <var:u0> := <nat:3> ; <var:u1> := <nat:4> ; <var:u1> := <var:u1> * <var:H> ; <var:u2> := <nat:4> ; <var:u2> := <var:u2> * <var:H> ; <var:u2> := <var:u2> * <var:H> ; <var:A> := <var:u2> ; <var:A> := <var:A> + <var:u1> ; <var:A> := <var:A> + <var:u0> {{ <var:A> = <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:4> * <var:o> /\ <var:u2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:4> * <var:o> /\ <var:u2> = <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:4> * <var:o> /\ <var:u2> = <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:u0> = <nat:3> /\ <var:u1> = <nat:4> * <var:o> /\ <var:A> = <nat:4> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:u0> = <nat:3> /\ <var:A> = <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:o> /\ <var:A> = <nat:4> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 