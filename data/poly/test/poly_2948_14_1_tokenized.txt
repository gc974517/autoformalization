\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:B1> := <var:a> ; <var:B2> := <var:B1> * <var:a> ; <var:B3> := <var:B2> * <var:a> ; <var:B4> := <var:B3> * <var:a> ; <var:B0> := <nat:5> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:1> ; <var:B3> := <var:B3> * <nat:8> ; <var:B4> := <var:B4> * <nat:5> ; <var:X> := <var:B4> <var:X> := <var:X> + <var:B3> <var:X> := <var:X> + <var:B2> <var:X> := <var:X> + <var:B1> <var:X> := <var:X> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:a> = <var:J> $ prior to running the list of commands it holds that we see $ <var:X> = <nat:5> \cdot <var:J> ^ <nat:4> + <nat:8> \cdot <var:J> ^ <nat:3> + <nat:1> \cdot <var:J> ^ <nat:2> + <nat:2> \cdot <var:J> + <nat:5> $ after series of commands terminates . \end{theorem} \begin{proof} The flow of logic for the list of commands is done by standard Hoare techniques . Moving forward to the upcoming line of code contained in our series of instructions , we see the binding statement \verb | <var:B1> := <var:a> ; | . This command forwards the condition $ \{ <var:a> = <var:J> \} $ as the condition $ \{ <var:a> = <var:J> \land <var:B1> = <var:J> \} $ . This is ensured with the assignment rule given in standard Hoare techniques . Going forward , the assignment line binding $ <var:B1> * <var:a> $ toward $ <var:B2>$ . This line takes $ \{ <var:a> = <var:J> \land <var:B1> = <var:J> \} $ toward the postcondition $ \{ <var:a> = <var:J> \land <var:B1> = <var:J> \land <var:B2> = <var:J> ^ <nat:2> \} $ . Next , we see the variable binding line \verb | <var:B3> := <var:B2> * <var:a> ; | . This moves $ \{ <var:a> = <var:J> \land <var:B1> = <var:J> \land <var:B2> = <var:J> ^ <nat:2> \} $ toward the condition $ \{ <var:a> = <var:J> \land <var:B1> = <var:J> \land <var:B2> = <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \} $ . This is sound with the assignment rule found in Hoare reasoning . Advancing to the next piece of code contained in our code segment , we have the variable assignmet statement \verb | <var:B4> := <var:B3> * <var:a> ; | . This forwards the precondition $ \{ <var:a> = <var:J> \land <var:B1> = <var:J> \land <var:B2> = <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \} $ toward the condition $ \{ <var:a> = <var:J> \land <var:B1> = <var:J> \land <var:B2> = <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \} $ . This is given by the assignment inference rule given in standard Hoare reasoning . Following , we have the variable assignmet line binding $ <nat:5> $ toward $ <var:B0>$ . This code redefines $ \{ <var:a> = <var:J> \land <var:B1> = <var:J> \land <var:B2> = <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \} $ to $ \{ <var:a> = <var:J> \land <var:B1> = <var:J> \land <var:B2> = <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \land <var:B0> = <nat:5> \} $ . This is known to be sound through the assignment scheme in standard Hoare reasoning . Immediately following , we see the assignment statement binding $ <var:B1> * <nat:2> $ as $ <var:B1>$ . This code forwards $ \{ <var:a> = <var:J> \land <var:B1> = <var:J> \land <var:B2> = <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \land <var:B0> = <nat:5> \} $ to the condition $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \land <var:B0> = <nat:5> \} $ . This is rigorously given through the assignment scheme of Hoare techniques . Moving on to the next step , the code \verb | <var:B2> := <var:B2> * <nat:1> ; | . This forwards the condition $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \land <var:B0> = <nat:5> \} $ toward the condition $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:1> * <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \land <var:B0> = <nat:5> \} $ . This is guaranteed by the assignment law given in typical Hoare techniques . Taking a look at the following step in our series of commands , the variable update statement assigning $ <var:B3> * <nat:8> $ into $ <var:B3>$ . This statement advances the condition $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:1> * <var:J> ^ <nat:2> \land <var:B3> = <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \land <var:B0> = <nat:5> \} $ into the postcondition $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:1> * <var:J> ^ <nat:2> \land <var:B3> = <nat:8> * <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \land <var:B0> = <nat:5> \} $ . This is deduced by the assignment scheme of typical Hoare logic . Jumping to the upcoming statement seen in the code segment , the variable update command giving $ <var:B4> * <nat:5> $ to $ <var:B4>$ . This advances the precondition $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:1> * <var:J> ^ <nat:2> \land <var:B3> = <nat:8> * <var:J> ^ <nat:3> \land <var:B4> = <var:J> ^ <nat:4> \land <var:B0> = <nat:5> \} $ into $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:1> * <var:J> ^ <nat:2> \land <var:B3> = <nat:8> * <var:J> ^ <nat:3> \land <var:B4> = <nat:5> * <var:J> ^ <nat:4> \land <var:B0> = <nat:5> \} $ . Considering the next line of code contained in our series of instructions , the assignment statement giving $ <var:B4$ as $ <var:X>$ . This command forwards $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:1> * <var:J> ^ <nat:2> \land <var:B3> = <nat:8> * <var:J> ^ <nat:3> \land <var:B4> = <nat:5> * <var:J> ^ <nat:4> \land <var:B0> = <nat:5> \} $ as the postcondition $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:1> * <var:J> ^ <nat:2> \land <var:B3> = <nat:8> * <var:J> ^ <nat:3> \land <var:B0> = <nat:5> \land <var:X> = <nat:5> * <var:J> ^ <nat:4> \} $ . Jumping to the next step contained in our code , the variable binding line \verb | <var:X> := <var:X> + <var:B3> | . This code transfers the condition $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:1> * <var:J> ^ <nat:2> \land <var:B3> = <nat:8> * <var:J> ^ <nat:3> \land <var:B0> = <nat:5> \land <var:X> = <nat:5> * <var:J> ^ <nat:4> \} $ toward the condition $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:1> * <var:J> ^ <nat:2> \land <var:B0> = <nat:5> \land <var:X> = <nat:5> * <var:J> ^ <nat:4> + <nat:8> * <var:J> ^ <nat:3> \} $ . Taking another step toward the following command found in our program , we see the variable update line \verb | <var:X> := <var:X> + <var:B2> | . This code transfers the condition $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B2> = <nat:1> * <var:J> ^ <nat:2> \land <var:B0> = <nat:5> \land <var:X> = <nat:5> * <var:J> ^ <nat:4> + <nat:8> * <var:J> ^ <nat:3> \} $ toward the postcondition $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B0> = <nat:5> \land <var:X> = <nat:5> * <var:J> ^ <nat:4> + <nat:8> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> \} $ . Keeping momentum , we see the assignment command \verb | <var:X> := <var:X> + <var:B1> | . This redefines $ \{ <var:a> = <var:J> \land <var:B1> = <nat:2> * <var:J> \land <var:B0> = <nat:5> \land <var:X> = <nat:5> * <var:J> ^ <nat:4> + <nat:8> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> \} $ to $ \{ <var:a> = <var:J> \land <var:B0> = <nat:5> \land <var:X> = <nat:5> * <var:J> ^ <nat:4> + <nat:8> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> \} $ . This is ensured with the assignment rule found in typical Hoare logic . Advancing to the next step , we see the environment update statement \verb | <var:X> := <var:X> + <var:B0> | . This code advances $ \{ <var:a> = <var:J> \land <var:B0> = <nat:5> \land <var:X> = <nat:5> * <var:J> ^ <nat:4> + <nat:8> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> \} $ to the postcondition $ \{ <var:a> = <var:J> \land <var:X> = <nat:5> * <var:J> ^ <nat:4> + <nat:8> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:5> \} $ . This is rigorously given with the assignment inference rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <var:B4> : string := " <var:B4> " . Definition <def:poly> := <var:B1> := <var:a> ; <var:B2> := <var:B1> * <var:a> ; <var:B3> := <var:B2> * <var:a> ; <var:B4> := <var:B3> * <var:a> ; <var:B0> := <nat:5> ; <var:B1> := <var:B1> * <nat:2> ; <var:B2> := <var:B2> * <nat:1> ; <var:B3> := <var:B3> * <nat:8> ; <var:B4> := <var:B4> * <nat:5> ; <var:X> := <var:B4> <var:X> := <var:X> + <var:B3> <var:X> := <var:X> + <var:B2> <var:X> := <var:X> + <var:B1> <var:X> := <var:X> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:a> = <var:J> }} <def:poly> {{ <var:X> = <nat:5> * <var:J> ^ <nat:4> + <nat:8> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:B1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:B1> = <var:J> /\ <var:B2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:B1> = <var:J> /\ <var:B2> = <var:J> ^ <nat:2> /\ <var:B3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:B1> = <var:J> /\ <var:B2> = <var:J> ^ <nat:2> /\ <var:B3> = <var:J> ^ <nat:3> /\ <var:B4> = <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:B1> = <var:J> /\ <var:B2> = <var:J> ^ <nat:2> /\ <var:B3> = <var:J> ^ <nat:3> /\ <var:B4> = <var:J> ^ <nat:4> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B2> = <var:J> ^ <nat:2> /\ <var:B3> = <var:J> ^ <nat:3> /\ <var:B4> = <var:J> ^ <nat:4> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:B3> = <var:J> ^ <nat:3> /\ <var:B4> = <var:J> ^ <nat:4> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:B3> = <nat:8> * <var:J> ^ <nat:3> /\ <var:B4> = <var:J> ^ <nat:4> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:B3> = <nat:8> * <var:J> ^ <nat:3> /\ <var:B4> = <nat:5> * <var:J> ^ <nat:4> /\ <var:B0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:B3> = <nat:8> * <var:J> ^ <nat:3> /\ <var:B0> = <nat:5> /\ <var:X> = <nat:5> * <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B2> = <nat:1> * <var:J> ^ <nat:2> /\ <var:B0> = <nat:5> /\ <var:X> = <nat:5> * <var:J> ^ <nat:4> + <nat:8> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:B1> = <nat:2> * <var:J> /\ <var:B0> = <nat:5> /\ <var:X> = <nat:5> * <var:J> ^ <nat:4> + <nat:8> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:B0> = <nat:5> /\ <var:X> = <nat:5> * <var:J> ^ <nat:4> + <nat:8> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:J> /\ <var:X> = <nat:5> * <var:J> ^ <nat:4> + <nat:8> * <var:J> ^ <nat:3> + <nat:1> * <var:J> ^ <nat:2> + <nat:2> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 