\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} such that \begin{verbatim} <var:H> := <nat:2> ; <var:H> := <nat:3> + <var:H> * <var:n> \end{verbatim} Assuming it to hold that $ <var:n> = <var:l> $ before executing this segment of code it follows that we have $ <var:H> = <nat:2> * <var:l> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this program is demonstrated through Hoare techniques . Next , we see \begin{eqnarray} \{ <var:n> = <var:l> \} \, <var:H> := <nat:2> \, \{ <var:n> = <var:l> \land <var:H> = <nat:2> \} \end{eqnarray} This is shown with the binding scheme in usual Hoare reasoning . Observing the proceeding line seen in the list of instructions , we see \begin{eqnarray} \{ <var:n> = <var:l> \} \, <var:H> := <nat:2> \, \{ <var:n> = <var:l> \land <var:H> = <nat:2> \} \end{eqnarray} This is deduced by the law given by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:n> = <var:l> }} <var:H> := <nat:2> ; <var:H> := <nat:3> + <var:H> * <var:n> {{ <var:H> = <nat:2> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:H> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:l> /\ <var:H> = <nat:2> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 