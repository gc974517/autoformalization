\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as \begin{verbatim} <var:o1> := <var:n> ; <var:o2> := <var:o1> * <var:n> ; <var:o0> := <nat:1> ; <var:o1> := <var:o1> * <nat:4> ; <var:o2> := <var:o2> * <nat:1> ; <var:H> := <var:o2> <var:H> := <var:H> + <var:o1> <var:H> := <var:H> + <var:o0> \end{verbatim} Assume it to hold that $ <var:n> = <var:U> $ ( for all integers $ <var:U> $ ) ahead of evaluating our series of instructions , it holds that we see $ <var:H> = <nat:1> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of commands is clear with Hoare logic . Keeping momentum , we see the command binding $ <var:n> $ to $ <var:o1>$ . This code takes the condition $ \{ <var:n> = <var:U> \} $ into the condition $ \{ <var:n> = <var:U> \land <var:o1> = <var:U> \} $ . This is ensured by the assignment rule defined in typical Hoare logic . Immediately after , we have the variable binding line \verb | <var:o2> := <var:o1> * <var:n> ; | . This line takes the condition $ \{ <var:n> = <var:U> \land <var:o1> = <var:U> \} $ toward the condition $ \{ <var:n> = <var:U> \land <var:o1> = <var:U> \land <var:o2> = <var:U> ^ <nat:2> \} $ . Paying attention to the subsequent command contained in the list of commands , the code giving $ <nat:1> $ into $ <var:o0>$ . This transfers the condition $ \{ <var:n> = <var:U> \land <var:o1> = <var:U> \land <var:o2> = <var:U> ^ <nat:2> \} $ into the postcondition $ \{ <var:n> = <var:U> \land <var:o1> = <var:U> \land <var:o2> = <var:U> ^ <nat:2> \land <var:o0> = <nat:1> \} $ . Looking at the next command found in the set of instructions , we see the assignment statement letting $ <var:o1> * <nat:4> $ to $ <var:o1>$ . This advances the precondition $ \{ <var:n> = <var:U> \land <var:o1> = <var:U> \land <var:o2> = <var:U> ^ <nat:2> \land <var:o0> = <nat:1> \} $ as $ \{ <var:n> = <var:U> \land <var:o1> = <nat:4> \cdot <var:U> \land <var:o2> = <var:U> ^ <nat:2> \land <var:o0> = <nat:1> \} $ . This is shown to be logically sound using the assignment law found in standard Hoare reasoning . Advancing to the next step , the environment update line assigning $ <var:o2> * <nat:1> $ to $ <var:o2>$ . This statement transfers $ \{ <var:n> = <var:U> \land <var:o1> = <nat:4> \cdot <var:U> \land <var:o2> = <var:U> ^ <nat:2> \land <var:o0> = <nat:1> \} $ as the postcondition $ \{ <var:n> = <var:U> \land <var:o1> = <nat:4> \cdot <var:U> \land <var:o2> = <nat:1> \cdot <var:U> ^ <nat:2> \land <var:o0> = <nat:1> \} $ . Observing the next line seen in our code , we have the binding command defining $ <var:o2$ into $ <var:H>$ . This line transfers $ \{ <var:n> = <var:U> \land <var:o1> = <nat:4> \cdot <var:U> \land <var:o2> = <nat:1> \cdot <var:U> ^ <nat:2> \land <var:o0> = <nat:1> \} $ as $ \{ <var:n> = <var:U> \land <var:o1> = <nat:4> \cdot <var:U> \land <var:o0> = <nat:1> \land <var:H> = <nat:1> \cdot <var:U> ^ <nat:2> \} $ . Taking another step toward the subsequent command seen in the series of instructions , the variable update command giving $ <var:H> + <var:o1$ toward $ <var:H>$ . This transfers the precondition $ \{ <var:n> = <var:U> \land <var:o1> = <nat:4> \cdot <var:U> \land <var:o0> = <nat:1> \land <var:H> = <nat:1> \cdot <var:U> ^ <nat:2> \} $ to the postcondition $ \{ <var:n> = <var:U> \land <var:o0> = <nat:1> \land <var:H> = <nat:1> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> \} $ . Moving forward , we have the variable assignmet code \verb | <var:H> := <var:H> + <var:o0> | . This command transfers $ \{ <var:n> = <var:U> \land <var:o0> = <nat:1> \land <var:H> = <nat:1> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> \} $ into the postcondition $ \{ <var:n> = <var:U> \land <var:H> = <nat:1> \cdot <var:U> ^ <nat:2> + <nat:4> \cdot <var:U> + <nat:1> \} $ . This is sound by the assignment scheme given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:n> = <var:U> }} <var:o1> := <var:n> ; <var:o2> := <var:o1> * <var:n> ; <var:o0> := <nat:1> ; <var:o1> := <var:o1> * <nat:4> ; <var:o2> := <var:o2> * <nat:1> ; <var:H> := <var:o2> <var:H> := <var:H> + <var:o1> <var:H> := <var:H> + <var:o0> {{ <var:H> = <nat:1> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:o1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:o1> = <var:U> /\ <var:o2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:o1> = <var:U> /\ <var:o2> = <var:U> ^ <nat:2> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:o1> = <nat:4> * <var:U> /\ <var:o2> = <var:U> ^ <nat:2> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:o1> = <nat:4> * <var:U> /\ <var:o2> = <nat:1> * <var:U> ^ <nat:2> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:o1> = <nat:4> * <var:U> /\ <var:o0> = <nat:1> /\ <var:H> = <nat:1> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:o0> = <nat:1> /\ <var:H> = <nat:1> * <var:U> ^ <nat:2> + <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:H> = <nat:1> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 