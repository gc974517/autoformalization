\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:5> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:b> ; <var:R2> := <nat:3> ; <var:R2> := <var:R2> * <var:b> ; <var:R2> := <var:R2> * <var:b> ; <var:w> := <var:R2> ; <var:w> := <var:w> + <var:R1> ; <var:w> := <var:w> + <var:R0> \end{verbatim} Given that we have $ <var:b> = <var:g> $ prior to the evaluation of the set of instructions , it follows that $ <var:w> = <nat:3> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + <nat:5> $ when series of instructions terminates . \end{theorem} \begin{proof} The way to prove correctness for the set of commands is demonstrated using usual Hoare logic . Moving forward to the subsequent bit of code seen in the series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:b> = <var:g> \} & <var:R0> := <nat:5> & \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \} \end{tabular} Jumping to the upcoming lines of codecontained in our program , we have \[ \begin{tabular} {rcl} \{ <var:b> = <var:g> \} & <var:R0> := <nat:5> & \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \} \\ \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \} & <var:R1> := <nat:4> & \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \land <var:R1> = <nat:4> \} \\ \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \land <var:R1> = <nat:4> \} & <var:R1> := <var:R1> * <var:b> & \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \land <var:R1> = <nat:4> \cdot <var:g> \} \\ \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \land <var:R1> = <nat:4> \cdot <var:g> \} & <var:R2> := <nat:3> & \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \land <var:R1> = <nat:4> \cdot <var:g> \land <var:R2> = <nat:3> \} \\ \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \land <var:R1> = <nat:4> \cdot <var:g> \land <var:R2> = <nat:3> \} & <var:R2> := <var:R2> * <var:b> & \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \land <var:R1> = <nat:4> \cdot <var:g> \land <var:R2> = <nat:3> \cdot <var:g> \} \end{tabular} This is deduced with the variable binding law obtained from standard Hoare reasoning . Looking at the subsequent steps seen in the set of instructions , we see \[ \begin{tabular} {rcl} \{ <var:b> = <var:g> \} & <var:R0> := <nat:5> & \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \} \\ \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \} & <var:R1> := <nat:4> & \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \land <var:R1> = <nat:4> \} \end{tabular} Taking a look at the proceeding statement in our code , \[ \begin{tabular} {rcl} \{ <var:b> = <var:g> \} & <var:R0> := <nat:5> & \{ <var:b> = <var:g> \land <var:R0> = <nat:5> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:b> = <var:g> }} <var:R0> := <nat:5> ; <var:R1> := <nat:4> ; <var:R1> := <var:R1> * <var:b> ; <var:R2> := <nat:3> ; <var:R2> := <var:R2> * <var:b> ; <var:R2> := <var:R2> * <var:b> ; <var:w> := <var:R2> ; <var:w> := <var:w> + <var:R1> ; <var:w> := <var:w> + <var:R0> {{ <var:w> = <nat:3> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:4> * <var:g> /\ <var:R2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:4> * <var:g> /\ <var:R2> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:4> * <var:g> /\ <var:R2> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:R0> = <nat:5> /\ <var:R1> = <nat:4> * <var:g> /\ <var:w> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:R0> = <nat:5> /\ <var:w> = <nat:3> * <var:g> ^ <nat:2> + <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:g> /\ <var:w> = <nat:3> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 