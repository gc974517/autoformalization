\begin{document} \begin{theorem} Take the following series of commands in \emph{Imp} as follows \begin{verbatim} <var:r0> := <nat:9> ; <var:t> := <var:r0> \end{verbatim} Assuming --- given every integers $ <var:i> $ --- that $ <var:G> = <var:i> $ prior to interpreting our series of instructions , it holds that we have $ <var:t> = <nat:9> $ once segment of code has executed . \end{theorem} \begin{proof} Applying standard Hoare reasoning gives : \begin{eqnarray} \{ <var:G> = <var:i> \} \\ <var:r0> := <nat:9> ; \\ \{ <var:G> = <var:i> \land <var:r0> = <nat:9> \} \end{eqnarray} Allowing the evaluation of our code segment gives us : \begin{eqnarray} <var:t> := <var:r0> \\ \{ <var:G> = <var:i> \land <var:t> = <nat:9> \} \end{eqnarray} Advancing executing the set of instructions produces : \begin{eqnarray} \end{eqnarray} Thusly , the code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:G> = <var:i> }} <var:r0> := <nat:9> ; <var:t> := <var:r0> {{ <var:t> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:r0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:t> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 