\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:I> ; <var:P2> := <var:P1> * <var:I> ; <var:P3> := <var:P2> * <var:I> ; <var:P4> := <var:P3> * <var:I> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:6> ; <var:P2> := <var:P2> * <nat:5> ; <var:P3> := <var:P3> * <nat:7> ; <var:P4> := <var:P4> * <nat:5> ; <var:a> := <var:P4> <var:a> := <var:a> + <var:P3> <var:a> := <var:a> + <var:P2> <var:a> := <var:a> + <var:P1> <var:a> := <var:a> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> . Assume it to hold that $ <var:I> = <var:m> $ ahead of interpreting the segment of code , then we have $ <var:a> = <nat:5> \cdot <var:m> ^ <nat:4> + <nat:7> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> + <nat:6> \cdot <var:m> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:m> \} \\ <var:P1> := <var:I> ; \\ \{ <var:I> = <var:m> \land <var:P1> = <var:m> \} \\ <var:P2> := <var:P1> * <var:I> ; \\ \{ <var:I> = <var:m> \land <var:P1> = <var:m> \land <var:P2> = <var:m> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:I> ; \\ \{ <var:I> = <var:m> \land <var:P1> = <var:m> \land <var:P2> = <var:m> ^ <nat:2> \land <var:P3> = <var:m> ^ <nat:3> \} \\ <var:P4> := <var:P3> * <var:I> ; \\ \{ <var:I> = <var:m> \land <var:P1> = <var:m> \land <var:P2> = <var:m> ^ <nat:2> \land <var:P3> = <var:m> ^ <nat:3> \land <var:P4> = <var:m> ^ <nat:4> \} \\ <var:P0> := <nat:3> ; \\ \{ <var:I> = <var:m> \land <var:P1> = <var:m> \land <var:P2> = <var:m> ^ <nat:2> \land <var:P3> = <var:m> ^ <nat:3> \land <var:P4> = <var:m> ^ <nat:4> \land <var:P0> = <nat:3> \} \\ <var:P1> := <var:P1> * <nat:6> ; \\ \{ <var:I> = <var:m> \land <var:P1> = <nat:6> \cdot <var:m> \land <var:P2> = <var:m> ^ <nat:2> \land <var:P3> = <var:m> ^ <nat:3> \land <var:P4> = <var:m> ^ <nat:4> \land <var:P0> = <nat:3> \} \\ <var:P2> := <var:P2> * <nat:5> ; \\ \{ <var:I> = <var:m> \land <var:P1> = <nat:6> \cdot <var:m> \land <var:P2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:P3> = <var:m> ^ <nat:3> \land <var:P4> = <var:m> ^ <nat:4> \land <var:P0> = <nat:3> \} \\ <var:P3> := <var:P3> * <nat:7> ; \\ \{ <var:I> = <var:m> \land <var:P1> = <nat:6> \cdot <var:m> \land <var:P2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:P3> = <nat:7> \cdot <var:m> ^ <nat:3> \land <var:P4> = <var:m> ^ <nat:4> \land <var:P0> = <nat:3> \} \\ <var:P4> := <var:P4> * <nat:5> ; \\ \{ <var:I> = <var:m> \land <var:P1> = <nat:6> \cdot <var:m> \land <var:P2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:P3> = <nat:7> \cdot <var:m> ^ <nat:3> \land <var:P4> = <nat:5> \cdot <var:m> ^ <nat:4> \land <var:P0> = <nat:3> \} \\ <var:a> := <var:P4> \\ \{ <var:I> = <var:m> \land <var:P1> = <nat:6> \cdot <var:m> \land <var:P2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:P3> = <nat:7> \cdot <var:m> ^ <nat:3> \land <var:P0> = <nat:3> \land <var:a> = <nat:5> \cdot <var:m> ^ <nat:4> \} \\ <var:a> := <var:a> + <var:P3> \\ \{ <var:I> = <var:m> \land <var:P1> = <nat:6> \cdot <var:m> \land <var:P2> = <nat:5> \cdot <var:m> ^ <nat:2> \land <var:P0> = <nat:3> \land <var:a> = <nat:5> \cdot <var:m> ^ <nat:4> + <nat:7> \cdot <var:m> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:P2> \\ \{ <var:I> = <var:m> \land <var:P1> = <nat:6> \cdot <var:m> \land <var:P0> = <nat:3> \land <var:a> = <nat:5> \cdot <var:m> ^ <nat:4> + <nat:7> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:P1> \\ \{ <var:I> = <var:m> \land <var:P0> = <nat:3> \land <var:a> = <nat:5> \cdot <var:m> ^ <nat:4> + <nat:7> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> + <nat:6> \cdot <var:m> \} \\ <var:a> := <var:a> + <var:P0> \\ \{ <var:I> = <var:m> \land <var:a> = <nat:5> \cdot <var:m> ^ <nat:4> + <nat:7> \cdot <var:m> ^ <nat:3> + <nat:5> \cdot <var:m> ^ <nat:2> + <nat:6> \cdot <var:m> + <nat:3> \} \end{eqnarray} The application of usual Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <var:P4> : string := " <var:P4> " . Definition <def:poly> := <var:P1> := <var:I> ; <var:P2> := <var:P1> * <var:I> ; <var:P3> := <var:P2> * <var:I> ; <var:P4> := <var:P3> * <var:I> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:6> ; <var:P2> := <var:P2> * <nat:5> ; <var:P3> := <var:P3> * <nat:7> ; <var:P4> := <var:P4> * <nat:5> ; <var:a> := <var:P4> <var:a> := <var:a> + <var:P3> <var:a> := <var:a> + <var:P2> <var:a> := <var:a> + <var:P1> <var:a> := <var:a> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:I> = <var:m> }} <def:poly> {{ <var:a> = <nat:5> * <var:m> ^ <nat:4> + <nat:7> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:6> * <var:m> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:P1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:P1> = <var:m> /\ <var:P2> = <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:P1> = <var:m> /\ <var:P2> = <var:m> ^ <nat:2> /\ <var:P3> = <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:P1> = <var:m> /\ <var:P2> = <var:m> ^ <nat:2> /\ <var:P3> = <var:m> ^ <nat:3> /\ <var:P4> = <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:P1> = <var:m> /\ <var:P2> = <var:m> ^ <nat:2> /\ <var:P3> = <var:m> ^ <nat:3> /\ <var:P4> = <var:m> ^ <nat:4> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:P1> = <nat:6> * <var:m> /\ <var:P2> = <var:m> ^ <nat:2> /\ <var:P3> = <var:m> ^ <nat:3> /\ <var:P4> = <var:m> ^ <nat:4> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:P1> = <nat:6> * <var:m> /\ <var:P2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:P3> = <var:m> ^ <nat:3> /\ <var:P4> = <var:m> ^ <nat:4> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:P1> = <nat:6> * <var:m> /\ <var:P2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:P3> = <nat:7> * <var:m> ^ <nat:3> /\ <var:P4> = <var:m> ^ <nat:4> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:P1> = <nat:6> * <var:m> /\ <var:P2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:P3> = <nat:7> * <var:m> ^ <nat:3> /\ <var:P4> = <nat:5> * <var:m> ^ <nat:4> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:P1> = <nat:6> * <var:m> /\ <var:P2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:P3> = <nat:7> * <var:m> ^ <nat:3> /\ <var:P0> = <nat:3> /\ <var:a> = <nat:5> * <var:m> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:P1> = <nat:6> * <var:m> /\ <var:P2> = <nat:5> * <var:m> ^ <nat:2> /\ <var:P0> = <nat:3> /\ <var:a> = <nat:5> * <var:m> ^ <nat:4> + <nat:7> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:P1> = <nat:6> * <var:m> /\ <var:P0> = <nat:3> /\ <var:a> = <nat:5> * <var:m> ^ <nat:4> + <nat:7> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:P0> = <nat:3> /\ <var:a> = <nat:5> * <var:m> ^ <nat:4> + <nat:7> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:6> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:a> = <nat:5> * <var:m> ^ <nat:4> + <nat:7> * <var:m> ^ <nat:3> + <nat:5> * <var:m> ^ <nat:2> + <nat:6> * <var:m> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 