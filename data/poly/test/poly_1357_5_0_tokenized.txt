\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:5> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:H> ; <var:f> := <var:L1> ; <var:f> := <var:f> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:H> = <var:m> $ before the evaluation of our segment of code , it holds that we have $ <var:f> = <nat:8> \cdot <var:m> + <nat:5> $ . \end{theorem} \begin{proof} The method of proof for the set of commands is demonstrated with Hoare reasoning . Shifting focus toward the upcoming bits of codecontained in our program , we see \[ \begin{tabular} {rcl} \{ <var:H> = <var:m> \} & <var:L0> := <nat:5> & \{ <var:H> = <var:m> \land <var:L0> = <nat:5> \} \\ \{ <var:H> = <var:m> \land <var:L0> = <nat:5> \} & <var:L1> := <nat:8> & \{ <var:H> = <var:m> \land <var:L0> = <nat:5> \land <var:L1> = <nat:8> \} \\ \{ <var:H> = <var:m> \land <var:L0> = <nat:5> \land <var:L1> = <nat:8> \} & <var:L1> := <var:L1> * <var:H> & \{ <var:H> = <var:m> \land <var:L0> = <nat:5> \land <var:L1> = <nat:8> \cdot <var:m> \} \\ \{ <var:H> = <var:m> \land <var:L0> = <nat:5> \land <var:L1> = <nat:8> \cdot <var:m> \} & <var:f> := <var:L1> & \{ <var:H> = <var:m> \land <var:L0> = <nat:5> \land <var:f> = <nat:8> \cdot <var:m> \} \end{tabular} Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:H> = <var:m> \} & <var:L0> := <nat:5> & \{ <var:H> = <var:m> \land <var:L0> = <nat:5> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:5> ; <var:L1> := <nat:8> ; <var:L1> := <var:L1> * <var:H> ; <var:f> := <var:L1> ; <var:f> := <var:f> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:H> = <var:m> }} <def:poly> {{ <var:f> = <nat:8> * <var:m> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:L0> = <nat:5> /\ <var:f> = <nat:8> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:m> /\ <var:f> = <nat:8> * <var:m> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 