\begin{document} \begin{theorem} We define a code : \begin{verbatim} <var:K1> := <var:O> ; <var:K2> := <var:K1> * <var:O> ; <var:K0> := <nat:4> ; <var:K2> := <var:K2> * <nat:3> ; <var:k> := <var:K2> <var:k> := <var:k> + <var:K0> \end{verbatim} Allow , assuming some positive numbers $ <var:y> $ , it to hold that $ <var:O> = <var:y> $ prior to executing our code segment then we see $ <var:k> = <nat:3> \times <var:y> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for this set of instructions is shown with usual Hoare logic . Taking a look at the next line in our program , we have \begin{verbatim} { <var:O> = <var:y> } <var:K1> := <var:O> { <var:O> = <var:y> \land <var:K1> = <var:y> } \end{verbatim} This is given using the law given by usual Hoare logic . Taking a look at the subsequent lines in the list of instructions , we see \begin{verbatim} { <var:O> = <var:y> } <var:K1> := <var:O> { <var:O> = <var:y> \land <var:K1> = <var:y> } { <var:O> = <var:y> \land <var:K1> = <var:y> } <var:K2> := <var:K1> * <var:O> { <var:O> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> } { <var:O> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> } <var:K0> := <nat:4> { <var:O> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K0> = <nat:4> } { <var:O> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K0> = <nat:4> } <var:K2> := <var:K2> * <nat:3> { <var:O> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:K0> = <nat:4> } { <var:O> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <nat:3> \cdot <var:y> ^ <nat:2> \land <var:K0> = <nat:4> } <var:k> := <var:K2{ <var:O> = <var:y> \land <var:K1> = <var:y> \land <var:K0> = <nat:4> \land <var:k> = <nat:3> \cdot <var:y> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:O> = <var:y> }} <var:K1> := <var:O> ; <var:K2> := <var:K1> * <var:O> ; <var:K0> := <nat:4> ; <var:K2> := <var:K2> * <nat:3> ; <var:k> := <var:K2> <var:k> := <var:k> + <var:K0> {{ <var:k> = <nat:3> * <var:y> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:K1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <var:y> ^ <nat:2> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <nat:3> * <var:y> ^ <nat:2> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:K1> = <var:y> /\ <var:K0> = <nat:4> /\ <var:k> = <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:y> /\ <var:k> = <nat:3> * <var:y> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 