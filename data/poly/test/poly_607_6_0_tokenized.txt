\begin{document} \begin{theorem} Take a segment of code as follows \begin{verbatim} <var:i0> := <nat:2> ; <var:i2> := <nat:1> ; <var:i2> := <var:i2> * <var:e> ; <var:i2> := <var:i2> * <var:e> ; <var:p> := <var:i2> ; <var:p> := <var:p> + <var:i0> \end{verbatim} Allow $ <var:e> = <var:L> $ given positive integers $ <var:L> $ prior to running the series of commands it follows that we see $ <var:p> = <nat:1> \cdot <var:L> ^ <nat:2> + <nat:2> $ when list of commands has finished executing . \end{theorem} \begin{proof} Using typical Hoare techniques gives us : \begin{eqnarray} \{ <var:e> = <var:L> \} \\ <var:i0> := <nat:2> ; \\ \{ <var:e> = <var:L> \land <var:i0> = <nat:2> \} \\ <var:i2> := <nat:1> ; \\ \{ <var:e> = <var:L> \land <var:i0> = <nat:2> \land <var:i2> = <nat:1> \} \\ <var:i2> := <var:i2> * <var:e> ; \\ \{ <var:e> = <var:L> \land <var:i0> = <nat:2> \land <var:i2> = <nat:1> \times <var:L> \} \end{eqnarray} Furthering the evaluation of the list of commands returns : \begin{eqnarray} <var:i2> := <var:i2> * <var:e> ; \\ \{ <var:e> = <var:L> \land <var:i0> = <nat:2> \land <var:i2> = <nat:1> \times <var:L> ^ <nat:2> \} \\ <var:p> := <var:i2> ; \\ \{ <var:e> = <var:L> \land <var:i0> = <nat:2> \land <var:p> = <nat:1> \times <var:L> ^ <nat:2> \} \\ <var:p> := <var:p> + <var:i0> \\ \{ <var:e> = <var:L> \land <var:p> = <nat:1> \times <var:L> ^ <nat:2> + <nat:2> \} \end{eqnarray} As a consequence , the code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i2> : string := " <var:i2> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:e> = <var:L> }} <var:i0> := <nat:2> ; <var:i2> := <nat:1> ; <var:i2> := <var:i2> * <var:e> ; <var:i2> := <var:i2> * <var:e> ; <var:p> := <var:i2> ; <var:p> := <var:p> + <var:i0> {{ <var:p> = <nat:1> * <var:L> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:L> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:L> /\ <var:i0> = <nat:2> /\ <var:i2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:L> /\ <var:i0> = <nat:2> /\ <var:i2> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:L> /\ <var:i0> = <nat:2> /\ <var:i2> = <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:L> /\ <var:i0> = <nat:2> /\ <var:p> = <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:L> /\ <var:p> = <nat:1> * <var:L> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 