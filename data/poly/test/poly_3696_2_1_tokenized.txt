\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:d0> := <nat:1> ; <var:V> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Let the following code segment <def:poly> . Allowing $ <var:E> = <var:I> $ before executing our program it holds that $ <var:V> = <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this series of commands can be demonstrated using usual Hoare reasoning . Considering the subsequent bits of codeseen in our segment of code , \begin{eqnarray} \{ <var:E> = <var:I> \} \, <var:d0> := <nat:1> \, \{ <var:E> = <var:I> \land <var:d0> = <nat:1> \} \\ \{ <var:E> = <var:I> \land <var:d0> = <nat:1> \} \, <var:V> := <var:d0\, \{ <var:E> = <var:I> \land <var:V> = <nat:1> \} \end{eqnarray} This is deduced by the scheme defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:1> ; <var:V> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:E> = <var:I> }} <def:poly> {{ <var:V> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:I> /\ <var:V> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 