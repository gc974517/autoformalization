\begin{document} \begin{theorem} Take the following code such that \begin{verbatim} <var:I> := <nat:2> ; <var:I> := <var:I> * <var:s> ; <var:I> := <nat:3> + <var:I> * <var:s> ; <var:I> := <nat:4> + <var:I> * <var:s> ; <var:I> := <var:I> * <var:s> ; <var:I> := <nat:2> + <var:I> * <var:s> ; <var:I> := <nat:4> + <var:I> * <var:s> \end{verbatim} Assuming that $ <var:s> = <var:P> $ --- assuming some integers $ <var:P> $ --- ahead of running the list of instructions , it must be that we see $ <var:I> = <nat:2> \cdot <var:P> ^ <nat:6> + <nat:3> \cdot <var:P> ^ <nat:4> + <nat:4> \cdot <var:P> ^ <nat:3> + <nat:2> \cdot <var:P> + <nat:4> $ after list of instructions finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:P> \} \\ <var:I> := <nat:2> ; \\ \{ <var:s> = <var:P> \land <var:I> = <nat:2> \} \\ <var:I> := <var:I> * <var:s> ; \\ \{ <var:s> = <var:P> \land <var:I> = <nat:2> * <var:P> + \} \\ <var:I> := <nat:3> + <var:I> * <var:s> ; \\ \{ <var:s> = <var:P> \land <var:I> = <nat:2> * <var:P> ^ <nat:2> + <nat:3> \} \\ <var:I> := <nat:4> + <var:I> * <var:s> ; \\ \{ <var:s> = <var:P> \land <var:I> = <nat:2> * <var:P> ^ <nat:3> + <nat:3> * <var:P> + <nat:4> \} \\ <var:I> := <var:I> * <var:s> ; \\ \{ <var:s> = <var:P> \land <var:I> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + \} \\ <var:I> := <nat:2> + <var:I> * <var:s> ; \\ \{ <var:s> = <var:P> \land <var:I> = <nat:2> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:2> \} \\ <var:I> := <nat:4> + <var:I> * <var:s> \\ \{ <var:s> = <var:P> \land <var:I> = <nat:2> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:2> * <var:P> + <nat:4> \} \end{eqnarray} Using standard Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:s> = <var:P> }} <var:I> := <nat:2> ; <var:I> := <var:I> * <var:s> ; <var:I> := <nat:3> + <var:I> * <var:s> ; <var:I> := <nat:4> + <var:I> * <var:s> ; <var:I> := <var:I> * <var:s> ; <var:I> := <nat:2> + <var:I> * <var:s> ; <var:I> := <nat:4> + <var:I> * <var:s> {{ <var:I> = <nat:2> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:2> * <var:P> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:I> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:I> = <nat:2> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:I> = <nat:2> * <var:P> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:I> = <nat:2> * <var:P> ^ <nat:3> + <nat:3> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:I> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:I> = <nat:2> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:P> /\ <var:I> = <nat:2> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:2> * <var:P> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 