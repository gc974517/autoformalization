\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:h0> := <nat:2> ; <var:h1> := <nat:3> ; <var:h1> := <var:h1> * <var:V> ; <var:h2> := <nat:3> ; <var:h2> := <var:h2> * <var:V> ; <var:h2> := <var:h2> * <var:V> ; <var:T> := <var:h2> ; <var:T> := <var:T> + <var:h1> ; <var:T> := <var:T> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( given any $ <var:D> \in \mathbb{N} $ ) that $ <var:V> = <var:D> $ before evaluating our list of instructions then $ <var:T> = <nat:3> \times <var:D> ^ <nat:2> + <nat:3> \times <var:D> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for this code segment can be given by Hoare reasoning . Advancing , we see the variable assignmet statement letting $ <nat:2> $ to $ <var:h0>$ . This forwards the condition $ \{ <var:V> = <var:D> \} $ into the postcondition $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \} $ . This is sound through the assignment inference rule from typical Hoare logic . Honing in on the subsequent statement contained in our program , we have the variable binding line \verb | <var:h1> := <nat:3> ; | . This redefines the precondition $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \} $ to the postcondition $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:h1> = <nat:3> \} $ . This is ensured using the assignment scheme given in standard Hoare techniques . Moving forward to the next statement found in the list of commands , the code \verb | <var:h1> := <var:h1> * <var:V> ; | . This forwards the condition $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:h1> = <nat:3> \} $ as $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:h1> = <nat:3> \cdot <var:D> \} $ . Stepping forward , we have the variable update command \verb | <var:h2> := <nat:3> ; | . This transfers $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:h1> = <nat:3> \cdot <var:D> \} $ into $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:h1> = <nat:3> \cdot <var:D> \land <var:h2> = <nat:3> \} $ . This is deduced by the assignment law defined by standard Hoare logic . Paying attention to the following command contained in our program , we have the line \verb | <var:h2> := <var:h2> * <var:V> ; | . This statement advances $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:h1> = <nat:3> \cdot <var:D> \land <var:h2> = <nat:3> \} $ as the postcondition $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:h1> = <nat:3> \cdot <var:D> \land <var:h2> = <nat:3> \cdot <var:D> \} $ . Immediately after , we see the variable binding line defining $ <var:h2> * <var:V> $ as $ <var:h2>$ . This advances $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:h1> = <nat:3> \cdot <var:D> \land <var:h2> = <nat:3> \cdot <var:D> \} $ into the postcondition $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:h1> = <nat:3> \cdot <var:D> \land <var:h2> = <nat:3> \cdot <var:D> ^ <nat:2> \} $ . This is ensured using the assignment inference rule given in typical Hoare reasoning . Keeping momentum , we see the variable update statement \verb | <var:T> := <var:h2> ; | . This redefines the precondition $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:h1> = <nat:3> \cdot <var:D> \land <var:h2> = <nat:3> \cdot <var:D> ^ <nat:2> \} $ toward $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:h1> = <nat:3> \cdot <var:D> \land <var:T> = <nat:3> \cdot <var:D> ^ <nat:2> \} $ . Now , the binding line defining $ <var:T> + <var:h1> $ to $ <var:T>$ . This advances the condition $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:h1> = <nat:3> \cdot <var:D> \land <var:T> = <nat:3> \cdot <var:D> ^ <nat:2> \} $ as the postcondition $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:T> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> \} $ . Focusing on the upcoming bit of code found in our program , the variable update statement binding $ <var:T> + <var:h0$ as $ <var:T>$ . This forwards the condition $ \{ <var:V> = <var:D> \land <var:h0> = <nat:2> \land <var:T> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> \} $ into $ \{ <var:V> = <var:D> \land <var:T> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:3> \cdot <var:D> + <nat:2> \} $ . This is deduced using the assignment law defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <def:poly> := <var:h0> := <nat:2> ; <var:h1> := <nat:3> ; <var:h1> := <var:h1> * <var:V> ; <var:h2> := <nat:3> ; <var:h2> := <var:h2> * <var:V> ; <var:h2> := <var:h2> * <var:V> ; <var:T> := <var:h2> ; <var:T> := <var:T> + <var:h1> ; <var:T> := <var:T> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:V> = <var:D> }} <def:poly> {{ <var:T> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:h0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:3> * <var:D> /\ <var:h2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:3> * <var:D> /\ <var:h2> = <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:3> * <var:D> /\ <var:h2> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:h0> = <nat:2> /\ <var:h1> = <nat:3> * <var:D> /\ <var:T> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:h0> = <nat:2> /\ <var:T> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:T> = <nat:3> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 