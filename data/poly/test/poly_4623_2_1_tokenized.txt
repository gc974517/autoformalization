\begin{document} \begin{theorem} Define a segment of code such that \begin{verbatim} <var:B0> := <nat:6> ; <var:U> := <var:B0> \end{verbatim} Assuming it to hold that $ <var:T> = <var:Z> $ prior to evaluating the series of instructions , it must be that $ <var:U> = <nat:6> $ after code segment has executed . \end{theorem} \begin{proof} The method of proof for our list of instructions is demonstrated by standard Hoare reasoning . Paying attention to the proceeding commands seen in our code segment , \[ \begin{tabular} {rcl} \{ <var:T> = <var:Z> \} & <var:B0> := <nat:6> & \{ <var:T> = <var:Z> \land <var:B0> = <nat:6> \} \\ \{ <var:T> = <var:Z> \land <var:B0> = <nat:6> \} & <var:U> := <var:B0& \{ <var:T> = <var:Z> \land <var:U> = <nat:6> \} \end{tabular} This is ensured through the variable binding law given in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:T> = <var:Z> }} <var:B0> := <nat:6> ; <var:U> := <var:B0> {{ <var:U> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:B0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Z> /\ <var:U> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 