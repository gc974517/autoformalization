\begin{document} \begin{definition} Let the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:5> ; <var:v> := <var:J0> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Assume that $ <var:a> = <var:V> $ ( taking positive integer coefficients $ <var:V> $ ) ahead of the evaluation of our series of instructions , it must be that we have $ <var:v> = <nat:5> $ when series of commands is done . \end{theorem} \begin{proof} The course of logic for this segment of code is clear through Hoare techniques . Advancing , the variable assignmet statement \verb | <var:J0> := <nat:5> ; | . This code advances the precondition $ \{ <var:a> = <var:V> \} $ as the postcondition $ \{ <var:a> = <var:V> \land <var:J0> = <nat:5> \} $ . This is guaranteed using the assignment inference rule given in usual Hoare techniques . Next , the variable update line \verb | <var:v> := <var:J0> | . This transfers $ \{ <var:a> = <var:V> \land <var:J0> = <nat:5> \} $ into $ \{ <var:a> = <var:V> \land <var:v> = <nat:5> \} $ . This is shown to be logically sound with the assignment scheme in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <def:poly> := <var:J0> := <nat:5> ; <var:v> := <var:J0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:a> = <var:V> }} <def:poly> {{ <var:v> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:v> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 