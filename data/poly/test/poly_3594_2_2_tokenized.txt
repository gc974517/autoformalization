\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m> := <nat:3> ; <var:m> := <nat:1> + <var:m> * <var:G> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:G> = <var:e> $ before running this series of instructions then we have $ <var:m> = <nat:3> * <var:e> + <nat:1> $ when set of commands exits . \end{theorem} \begin{proof} Using standard Hoare logic returns : \begin{eqnarray} \{ <var:G> = <var:e> \} \\ <var:m> := <nat:3> ; \\ \{ <var:G> = <var:e> \land <var:m> = <nat:3> \} \\ <var:m> := <nat:1> + <var:m> * <var:G> \\ \{ <var:G> = <var:e> \land <var:m> = <nat:3> \cdot <var:e> + <nat:1> \} \end{eqnarray} Given the above , our series of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:m> := <nat:3> ; <var:m> := <nat:1> + <var:m> * <var:G> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:G> = <var:e> }} <def:poly> {{ <var:m> = <nat:3> * <var:e> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:e> /\ <var:m> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:e> /\ <var:m> = <nat:3> * <var:e> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 