\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:1> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:j> ; <var:D> := <var:w1> ; <var:D> := <var:D> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> in \emph{Imp} . Assuming that we have $ <var:j> = <var:A> $ for every whole numbers $ <var:A> $ before the evaluation of our set of commands it follows that we have $ <var:D> = <nat:2> * <var:A> + <nat:1> $ when series of commands is done executing . \end{theorem} \begin{proof} Using Hoare logic gives us : \begin{eqnarray} \{ <var:j> = <var:A> \} \\ <var:w0> := <nat:1> ; \\ \{ <var:j> = <var:A> \land <var:w0> = <nat:1> \} \\ <var:w1> := <nat:2> ; \\ \{ <var:j> = <var:A> \land <var:w0> = <nat:1> \land <var:w1> = <nat:2> \} \\ <var:w1> := <var:w1> * <var:j> ; \\ \{ <var:j> = <var:A> \land <var:w0> = <nat:1> \land <var:w1> = <nat:2> \cdot <var:A> \} \\ <var:D> := <var:w1> ; \\ \{ <var:j> = <var:A> \land <var:w0> = <nat:1> \land <var:D> = <nat:2> \cdot <var:A> \} \\ <var:D> := <var:D> + <var:w0> \\ \{ <var:j> = <var:A> \land <var:D> = <nat:2> \cdot <var:A> + <nat:1> \} \end{eqnarray} Considering the above , this series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:1> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:j> ; <var:D> := <var:w1> ; <var:D> := <var:D> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:j> = <var:A> }} <def:poly> {{ <var:D> = <nat:2> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:w0> = <nat:1> /\ <var:D> = <nat:2> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:A> /\ <var:D> = <nat:2> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 