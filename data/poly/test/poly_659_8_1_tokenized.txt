\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X1> := <var:y> ; <var:X2> := <var:X1> * <var:y> ; <var:X0> := <nat:6> ; <var:X1> := <var:X1> * <nat:9> ; <var:X2> := <var:X2> * <nat:2> ; <var:u> := <var:X2> <var:u> := <var:u> + <var:X1> <var:u> := <var:u> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> in \emph{Imp} . Allowing it to hold that $ <var:y> = <var:e> $ before evaluating our series of instructions , it follows that we have $ <var:u> = <nat:2> \times <var:e> ^ <nat:2> + <nat:9> \times <var:e> + <nat:6> $ when list of instructions exits . \end{theorem} \begin{proof} Arguing the correctness of our set of commands is accomplished by standard Hoare reasoning . Taking another step toward the subsequent line of code seen in our program , we see the environment update code assigning $ <var:y> $ toward $ <var:X1>$ . This command takes the precondition $ \{ <var:y> = <var:e> \} $ as the postcondition $ \{ <var:y> = <var:e> \land <var:X1> = <var:e> \} $ . Moving onward , the environment update code \verb | <var:X2> := <var:X1> * <var:y> ; | . This command forwards the precondition $ \{ <var:y> = <var:e> \land <var:X1> = <var:e> \} $ as $ \{ <var:y> = <var:e> \land <var:X1> = <var:e> \land <var:X2> = <var:e> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment law given in typical Hoare reasoning . Paying attention to the proceeding bit of code found in our list of instructions , we see the code giving $ <nat:6> $ to $ <var:X0>$ . This line redefines the precondition $ \{ <var:y> = <var:e> \land <var:X1> = <var:e> \land <var:X2> = <var:e> ^ <nat:2> \} $ into the postcondition $ \{ <var:y> = <var:e> \land <var:X1> = <var:e> \land <var:X2> = <var:e> ^ <nat:2> \land <var:X0> = <nat:6> \} $ . Looking at the following statement in the segment of code , we have the assignment line \verb | <var:X1> := <var:X1> * <nat:9> ; | . This code moves $ \{ <var:y> = <var:e> \land <var:X1> = <var:e> \land <var:X2> = <var:e> ^ <nat:2> \land <var:X0> = <nat:6> \} $ into the postcondition $ \{ <var:y> = <var:e> \land <var:X1> = <nat:9> * <var:e> \land <var:X2> = <var:e> ^ <nat:2> \land <var:X0> = <nat:6> \} $ . After , we have the line \verb | <var:X2> := <var:X2> * <nat:2> ; | . This command transfers the precondition $ \{ <var:y> = <var:e> \land <var:X1> = <nat:9> * <var:e> \land <var:X2> = <var:e> ^ <nat:2> \land <var:X0> = <nat:6> \} $ as the condition $ \{ <var:y> = <var:e> \land <var:X1> = <nat:9> * <var:e> \land <var:X2> = <nat:2> * <var:e> ^ <nat:2> \land <var:X0> = <nat:6> \} $ . Advancing to the proceeding piece of code in our set of commands , the statement assigning $ <var:X2$ to $ <var:u>$ . This code forwards $ \{ <var:y> = <var:e> \land <var:X1> = <nat:9> * <var:e> \land <var:X2> = <nat:2> * <var:e> ^ <nat:2> \land <var:X0> = <nat:6> \} $ as $ \{ <var:y> = <var:e> \land <var:X1> = <nat:9> * <var:e> \land <var:X0> = <nat:6> \land <var:u> = <nat:2> * <var:e> ^ <nat:2> \} $ . This is known to be sound through the assignment rule given in Hoare techniques . Observing the subsequent step in our series of commands , we see the variable assignmet statement \verb | <var:u> := <var:u> + <var:X1> | . This line advances the precondition $ \{ <var:y> = <var:e> \land <var:X1> = <nat:9> * <var:e> \land <var:X0> = <nat:6> \land <var:u> = <nat:2> * <var:e> ^ <nat:2> \} $ into the postcondition $ \{ <var:y> = <var:e> \land <var:X0> = <nat:6> \land <var:u> = <nat:2> * <var:e> ^ <nat:2> + <nat:9> * <var:e> \} $ . Jumping to the following piece of code found in our set of instructions , we see the assignment statement \verb | <var:u> := <var:u> + <var:X0> | . This line takes $ \{ <var:y> = <var:e> \land <var:X0> = <nat:6> \land <var:u> = <nat:2> * <var:e> ^ <nat:2> + <nat:9> * <var:e> \} $ as the postcondition $ \{ <var:y> = <var:e> \land <var:u> = <nat:2> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <def:poly> := <var:X1> := <var:y> ; <var:X2> := <var:X1> * <var:y> ; <var:X0> := <nat:6> ; <var:X1> := <var:X1> * <nat:9> ; <var:X2> := <var:X2> * <nat:2> ; <var:u> := <var:X2> <var:u> := <var:u> + <var:X1> <var:u> := <var:u> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:y> = <var:e> }} <def:poly> {{ <var:u> = <nat:2> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:X1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:X1> = <var:e> /\ <var:X2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:X1> = <var:e> /\ <var:X2> = <var:e> ^ <nat:2> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:X1> = <nat:9> * <var:e> /\ <var:X2> = <var:e> ^ <nat:2> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:X1> = <nat:9> * <var:e> /\ <var:X2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:X1> = <nat:9> * <var:e> /\ <var:X0> = <nat:6> /\ <var:u> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:X0> = <nat:6> /\ <var:u> = <nat:2> * <var:e> ^ <nat:2> + <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:e> /\ <var:u> = <nat:2> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 