\begin{document} \begin{theorem} Consider the following segment of code such that \begin{verbatim} <var:d0> := <nat:8> ; <var:d1> := <nat:4> ; <var:d1> := <var:d1> * <var:n> ; <var:d2> := <nat:4> ; <var:d2> := <var:d2> * <var:n> ; <var:d2> := <var:d2> * <var:n> ; <var:k> := <var:d2> ; <var:k> := <var:k> + <var:d1> ; <var:k> := <var:k> + <var:d0> \end{verbatim} Given $ <var:n> = <var:E> $ before running the segment of code , it must be that we see $ <var:k> = <nat:4> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> + <nat:8> $ . \end{theorem} \begin{proof} The flow of logic for our code is evident using usual Hoare techniques . Moving onward , the environment update command \verb | <var:d0> := <nat:8> ; | . This line redefines the precondition $ \{ <var:n> = <var:E> \} $ as $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \} $ . Following , we have the binding line assigning $ <nat:4> $ toward $ <var:d1>$ . This code moves $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \} $ into the postcondition $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:d1> = <nat:4> \} $ . Observing the following bit of code found in our code segment , the environment update command assigning $ <var:d1> * <var:n> $ as $ <var:d1>$ . This code transfers the condition $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:d1> = <nat:4> \} $ toward the condition $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:d1> = <nat:4> \cdot <var:E> \} $ . Focusing on the subsequent line of code seen in our code segment , the binding statement \verb | <var:d2> := <nat:4> ; | . This takes $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:d1> = <nat:4> \cdot <var:E> \} $ to $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:d1> = <nat:4> \cdot <var:E> \land <var:d2> = <nat:4> \} $ . Shifting focus toward the next line seen in our code segment , we see the variable update command binding $ <var:d2> * <var:n> $ into $ <var:d2>$ . This code redefines $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:d1> = <nat:4> \cdot <var:E> \land <var:d2> = <nat:4> \} $ as the postcondition $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:d1> = <nat:4> \cdot <var:E> \land <var:d2> = <nat:4> \cdot <var:E> \} $ . This is shown using the assignment inference rule from Hoare techniques . Keeping momentum , the environment update code binding $ <var:d2> * <var:n> $ as $ <var:d2>$ . This code advances the precondition $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:d1> = <nat:4> \cdot <var:E> \land <var:d2> = <nat:4> \cdot <var:E> \} $ to the condition $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:d1> = <nat:4> \cdot <var:E> \land <var:d2> = <nat:4> \cdot <var:E> ^ <nat:2> \} $ . This is known to be sound by the assignment rule in standard Hoare reasoning . Moving on , we see the binding command giving $ <var:d2> $ into $ <var:k>$ . This command transfers the condition $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:d1> = <nat:4> \cdot <var:E> \land <var:d2> = <nat:4> \cdot <var:E> ^ <nat:2> \} $ toward the condition $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:d1> = <nat:4> \cdot <var:E> \land <var:k> = <nat:4> \cdot <var:E> ^ <nat:2> \} $ . This is shown using the assignment law given by typical Hoare logic . Stepping forward , we see the variable update command giving $ <var:k> + <var:d1> $ toward $ <var:k>$ . This forwards $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:d1> = <nat:4> \cdot <var:E> \land <var:k> = <nat:4> \cdot <var:E> ^ <nat:2> \} $ into $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:k> = <nat:4> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> \} $ . After , we see the assignment statement yielding $ <var:k> + <var:d0$ into $ <var:k>$ . This code forwards the condition $ \{ <var:n> = <var:E> \land <var:d0> = <nat:8> \land <var:k> = <nat:4> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> \} $ toward the postcondition $ \{ <var:n> = <var:E> \land <var:k> = <nat:4> \cdot <var:E> ^ <nat:2> + <nat:4> \cdot <var:E> + <nat:8> \} $ . This is rigorously given using the assignment law of Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:n> = <var:E> }} <var:d0> := <nat:8> ; <var:d1> := <nat:4> ; <var:d1> := <var:d1> * <var:n> ; <var:d2> := <nat:4> ; <var:d2> := <var:d2> * <var:n> ; <var:d2> := <var:d2> * <var:n> ; <var:k> := <var:d2> ; <var:k> := <var:k> + <var:d1> ; <var:k> := <var:k> + <var:d0> {{ <var:k> = <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:4> * <var:E> /\ <var:d2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:4> * <var:E> /\ <var:d2> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:4> * <var:E> /\ <var:d2> = <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:d0> = <nat:8> /\ <var:d1> = <nat:4> * <var:E> /\ <var:k> = <nat:4> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:d0> = <nat:8> /\ <var:k> = <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:E> /\ <var:k> = <nat:4> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 