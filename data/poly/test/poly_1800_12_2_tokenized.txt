\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <nat:4> + <var:e> * <var:b> ; <var:e> := <nat:4> + <var:e> * <var:b> ; <var:e> := <nat:4> + <var:e> * <var:b> ; <var:e> := <nat:3> + <var:e> * <var:b> ; <var:e> := <nat:2> + <var:e> * <var:b> ; <var:e> := <nat:3> + <var:e> * <var:b> ; <var:e> := <nat:4> + <var:e> * <var:b> ; <var:e> := <nat:4> + <var:e> * <var:b> ; <var:e> := <var:e> * <var:b> ; <var:e> := <nat:1> + <var:e> * <var:b> ; <var:e> := <nat:4> + <var:e> * <var:b> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of instructions <def:poly> in \emph{Imp} . Allowing taking positive coefficients $ <var:U> $ that $ <var:b> = <var:U> $ before executing our list of commands , it holds that we see $ <var:e> = <nat:3> \times <var:U> ^ <nat:11> + <nat:4> \times <var:U> ^ <nat:10> + <nat:4> \times <var:U> ^ <nat:9> + <nat:4> \times <var:U> ^ <nat:8> + <nat:3> \times <var:U> ^ <nat:7> + <nat:2> \times <var:U> ^ <nat:6> + <nat:3> \times <var:U> ^ <nat:5> + <nat:4> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:3> + <nat:1> \times <var:U> + <nat:4> $ when set of commands has finished . \end{theorem} \begin{proof} Demonstrating correctness of our code is accomplished using Hoare techniques . Next , \begin{verbatim} { <var:b> = <var:U> } <var:e> := <nat:3> { <var:b> = <var:U> \land <var:e> = <nat:3> } { <var:b> = <var:U> \land <var:e> = <nat:3> } <var:e> := <nat:4> + <var:e> * <var:b> { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> + <nat:4> } \end{verbatim} Moving forward , \begin{verbatim} { <var:b> = <var:U> } <var:e> := <nat:3> { <var:b> = <var:U> \land <var:e> = <nat:3> } { <var:b> = <var:U> \land <var:e> = <nat:3> } <var:e> := <nat:4> + <var:e> * <var:b> { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> + <nat:4> } { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> + <nat:4> } <var:e> := <nat:4> + <var:e> * <var:b> { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + <nat:4> } \end{verbatim} Moving onward , we see \begin{verbatim} { <var:b> = <var:U> } <var:e> := <nat:3> { <var:b> = <var:U> \land <var:e> = <nat:3> } { <var:b> = <var:U> \land <var:e> = <nat:3> } <var:e> := <nat:4> + <var:e> * <var:b> { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> + <nat:4> } { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> + <nat:4> } <var:e> := <nat:4> + <var:e> * <var:b> { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + <nat:4> } { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + <nat:4> } <var:e> := <nat:4> + <var:e> * <var:b> { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + <nat:4> } { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + <nat:4> } <var:e> := <nat:3> + <var:e> * <var:b> { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + <nat:3> } { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:4> \times <var:U> + <nat:3> } <var:e> := <nat:2> + <var:e> * <var:b> { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> ^ <nat:5> + <nat:4> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> + <nat:2> } { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> ^ <nat:5> + <nat:4> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:3> + <nat:4> \times <var:U> ^ <nat:2> + <nat:3> \times <var:U> + <nat:2> } <var:e> := <nat:3> + <var:e> * <var:b> { <var:b> = <var:U> \land <var:e> = <nat:3> \times <var:U> ^ <nat:6> + <nat:4> \times <var:U> ^ <nat:5> + <nat:4> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:3> + <nat:3> \times <var:U> ^ <nat:2> + <nat:2> \times <var:U> + <nat:3> } \end{verbatim} This is known to be sound using the variable binding inference rule obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:3> ; <var:e> := <nat:4> + <var:e> * <var:b> ; <var:e> := <nat:4> + <var:e> * <var:b> ; <var:e> := <nat:4> + <var:e> * <var:b> ; <var:e> := <nat:3> + <var:e> * <var:b> ; <var:e> := <nat:2> + <var:e> * <var:b> ; <var:e> := <nat:3> + <var:e> * <var:b> ; <var:e> := <nat:4> + <var:e> * <var:b> ; <var:e> := <nat:4> + <var:e> * <var:b> ; <var:e> := <var:e> * <var:b> ; <var:e> := <nat:1> + <var:e> * <var:b> ; <var:e> := <nat:4> + <var:e> * <var:b> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:b> = <var:U> }} <def:poly> {{ <var:e> = <nat:3> * <var:U> ^ <nat:11> + <nat:4> * <var:U> ^ <nat:10> + <nat:4> * <var:U> ^ <nat:9> + <nat:4> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:2> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:1> * <var:U> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:e> = <nat:3> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:e> = <nat:3> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:e> = <nat:3> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:e> = <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:e> = <nat:3> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:e> = <nat:3> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:e> = <nat:3> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:3> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:e> = <nat:3> * <var:U> ^ <nat:8> + <nat:4> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:6> + <nat:4> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:2> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:e> = <nat:3> * <var:U> ^ <nat:9> + <nat:4> * <var:U> ^ <nat:8> + <nat:4> * <var:U> ^ <nat:7> + <nat:4> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:2> * <var:U> ^ <nat:4> + <nat:3> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:4> * <var:U> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:e> = <nat:3> * <var:U> ^ <nat:10> + <nat:4> * <var:U> ^ <nat:9> + <nat:4> * <var:U> ^ <nat:8> + <nat:4> * <var:U> ^ <nat:7> + <nat:3> * <var:U> ^ <nat:6> + <nat:2> * <var:U> ^ <nat:5> + <nat:3> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:4> * <var:U> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:U> /\ <var:e> = <nat:3> * <var:U> ^ <nat:11> + <nat:4> * <var:U> ^ <nat:10> + <nat:4> * <var:U> ^ <nat:9> + <nat:4> * <var:U> ^ <nat:8> + <nat:3> * <var:U> ^ <nat:7> + <nat:2> * <var:U> ^ <nat:6> + <nat:3> * <var:U> ^ <nat:5> + <nat:4> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:1> * <var:U> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 