\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:1> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:Q> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:Q> ; <var:c2> := <var:c2> * <var:Q> ; <var:b> := <var:c2> ; <var:b> := <var:b> + <var:c1> ; <var:b> := <var:b> + <var:c0> \end{verbatim} Allow it to be that $ <var:Q> = <var:p> $ , for every positive integer coefficients $ <var:p> $ , before interpreting this set of instructions , it holds that we see $ <var:b> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:2> \cdot <var:p> + <nat:1> $ when set of commands has executed . \end{theorem} \begin{proof} Proving correctness for the program is demonstrated using typical Hoare techniques . Considering the upcoming statement contained in the set of commands , the variable update command yielding $ <nat:1> $ toward $ <var:c0>$ . This moves the condition $ \{ <var:Q> = <var:p> \} $ toward the condition $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \} $ . This is sound by the assignment law defined in standard Hoare techniques . Going to the next step , we see the line \verb | <var:c1> := <nat:2> ; | . This transfers $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \} $ into $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:c1> = <nat:2> \} $ . This is known to be sound with the assignment law obtained from Hoare reasoning . Taking another step toward the proceeding bit of code seen in the program , we see the environment update code \verb | <var:c1> := <var:c1> * <var:Q> ; | . This takes $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:c1> = <nat:2> \} $ toward the postcondition $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:c1> = <nat:2> \times <var:p> \} $ . This is shown through the assignment scheme defined by standard Hoare logic . Stepping through , we see the assignment command assigning $ <nat:3> $ toward $ <var:c2>$ . This redefines the condition $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:c1> = <nat:2> \times <var:p> \} $ to the postcondition $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:c1> = <nat:2> \times <var:p> \land <var:c2> = <nat:3> \} $ . This is known to be sound through the assignment scheme obtained from standard Hoare techniques . Moving onward , the variable assignmet statement binding $ <var:c2> * <var:Q> $ into $ <var:c2>$ . This line moves $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:c1> = <nat:2> \times <var:p> \land <var:c2> = <nat:3> \} $ toward $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:c1> = <nat:2> \times <var:p> \land <var:c2> = <nat:3> \times <var:p> \} $ . This is guaranteed by the assignment rule of typical Hoare techniques . Moving on to the next step , we see the environment update code binding $ <var:c2> * <var:Q> $ toward $ <var:c2>$ . This advances $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:c1> = <nat:2> \times <var:p> \land <var:c2> = <nat:3> \times <var:p> \} $ to the postcondition $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:c1> = <nat:2> \times <var:p> \land <var:c2> = <nat:3> \times <var:p> ^ <nat:2> \} $ . Further , we have the command letting $ <var:c2> $ to $ <var:b>$ . This advances the precondition $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:c1> = <nat:2> \times <var:p> \land <var:c2> = <nat:3> \times <var:p> ^ <nat:2> \} $ toward the postcondition $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:c1> = <nat:2> \times <var:p> \land <var:b> = <nat:3> \times <var:p> ^ <nat:2> \} $ . Next , we have the variable binding code \verb | <var:b> := <var:b> + <var:c1> ; | . This line takes the precondition $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:c1> = <nat:2> \times <var:p> \land <var:b> = <nat:3> \times <var:p> ^ <nat:2> \} $ to the postcondition $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:b> = <nat:3> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> \} $ . This is deduced through the assignment law obtained from typical Hoare reasoning . Jumping to the next statement contained in the series of instructions , we see the assignment command letting $ <var:b> + <var:c0$ toward $ <var:b>$ . This transfers $ \{ <var:Q> = <var:p> \land <var:c0> = <nat:1> \land <var:b> = <nat:3> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> \} $ into $ \{ <var:Q> = <var:p> \land <var:b> = <nat:3> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:1> \} $ . This is rigorously given through the assignment rule defined in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:Q> = <var:p> }} <var:c0> := <nat:1> ; <var:c1> := <nat:2> ; <var:c1> := <var:c1> * <var:Q> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:Q> ; <var:c2> := <var:c2> * <var:Q> ; <var:b> := <var:c2> ; <var:b> := <var:b> + <var:c1> ; <var:b> := <var:b> + <var:c0> {{ <var:b> = <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:p> /\ <var:c0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:p> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:p> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:p> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:2> * <var:p> /\ <var:c2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:p> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:2> * <var:p> /\ <var:c2> = <nat:3> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:p> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:2> * <var:p> /\ <var:c2> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:p> /\ <var:c0> = <nat:1> /\ <var:c1> = <nat:2> * <var:p> /\ <var:b> = <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:p> /\ <var:c0> = <nat:1> /\ <var:b> = <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:p> /\ <var:b> = <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 