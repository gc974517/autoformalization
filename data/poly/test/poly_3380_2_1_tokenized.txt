\begin{document} \begin{theorem} We define the following code in \emph{Imp} as follows \begin{verbatim} <var:E0> := <nat:8> ; <var:j> := <var:E0> \end{verbatim} Given it to hold that $ <var:c> = <var:s> $ prior to the evaluation of our series of commands , it follows that we have $ <var:j> = <nat:8> $ after set of commands is done . \end{theorem} \begin{proof} The method of proof for this code is accomplished by standard Hoare logic . Jumping to the following steps contained in the set of commands , we see \begin{eqnarray} \{ <var:c> = <var:s> \} \, <var:E0> := <nat:8> \, \{ <var:c> = <var:s> \land <var:E0> = <nat:8> \} \\ \{ <var:c> = <var:s> \land <var:E0> = <nat:8> \} \, <var:j> := <var:E0\, \{ <var:c> = <var:s> \land <var:j> = <nat:8> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:c> = <var:s> }} <var:E0> := <nat:8> ; <var:j> := <var:E0> {{ <var:j> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:s> /\ <var:E0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:s> /\ <var:j> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 