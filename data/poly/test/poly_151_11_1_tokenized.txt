\begin{document} \begin{theorem} Let the following segment of code as \begin{verbatim} <var:V1> := <var:t> ; <var:V2> := <var:V1> * <var:t> ; <var:V3> := <var:V2> * <var:t> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:4> ; <var:V2> := <var:V2> * <nat:4> ; <var:V3> := <var:V3> * <nat:2> ; <var:X> := <var:V3> <var:X> := <var:X> + <var:V2> <var:X> := <var:X> + <var:V1> <var:X> := <var:X> + <var:V0> \end{verbatim} Allowing , given positive numbers $ <var:z> $ , that we have $ <var:t> = <var:z> $ ahead of evaluating our code then $ <var:X> = <nat:2> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:2> $ after list of commands exits . \end{theorem} \begin{proof} Arguing the correctness of this series of commands is demonstrated with the following decorated code . \begin{eqnarray} \{ <var:t> = <var:z> \} \\ <var:V1> := <var:t> ; \\ \{ <var:t> = <var:z> \land <var:V1> = <var:z> \} \\ <var:V2> := <var:V1> * <var:t> ; \\ \{ <var:t> = <var:z> \land <var:V1> = <var:z> \land <var:V2> = <var:z> ^ <nat:2> \} \\ <var:V3> := <var:V2> * <var:t> ; \\ \{ <var:t> = <var:z> \land <var:V1> = <var:z> \land <var:V2> = <var:z> ^ <nat:2> \land <var:V3> = <var:z> ^ <nat:3> \} \\ <var:V0> := <nat:2> ; \\ \{ <var:t> = <var:z> \land <var:V1> = <var:z> \land <var:V2> = <var:z> ^ <nat:2> \land <var:V3> = <var:z> ^ <nat:3> \land <var:V0> = <nat:2> \} \\ <var:V1> := <var:V1> * <nat:4> ; \\ \{ <var:t> = <var:z> \land <var:V1> = <nat:4> \cdot <var:z> \land <var:V2> = <var:z> ^ <nat:2> \land <var:V3> = <var:z> ^ <nat:3> \land <var:V0> = <nat:2> \} \\ <var:V2> := <var:V2> * <nat:4> ; \\ \{ <var:t> = <var:z> \land <var:V1> = <nat:4> \cdot <var:z> \land <var:V2> = <nat:4> \cdot <var:z> ^ <nat:2> \land <var:V3> = <var:z> ^ <nat:3> \land <var:V0> = <nat:2> \} \\ <var:V3> := <var:V3> * <nat:2> ; \\ \{ <var:t> = <var:z> \land <var:V1> = <nat:4> \cdot <var:z> \land <var:V2> = <nat:4> \cdot <var:z> ^ <nat:2> \land <var:V3> = <nat:2> \cdot <var:z> ^ <nat:3> \land <var:V0> = <nat:2> \} \\ <var:X> := <var:V3> \\ \{ <var:t> = <var:z> \land <var:V1> = <nat:4> \cdot <var:z> \land <var:V2> = <nat:4> \cdot <var:z> ^ <nat:2> \land <var:V0> = <nat:2> \land <var:X> = <nat:2> \cdot <var:z> ^ <nat:3> \} \\ <var:X> := <var:X> + <var:V2> \\ \{ <var:t> = <var:z> \land <var:V1> = <nat:4> \cdot <var:z> \land <var:V0> = <nat:2> \land <var:X> = <nat:2> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:V1> \\ \{ <var:t> = <var:z> \land <var:V0> = <nat:2> \land <var:X> = <nat:2> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> \} \\ <var:X> := <var:X> + <var:V0> \\ \{ <var:t> = <var:z> \land <var:X> = <nat:2> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:2> \} \end{eqnarray} The application of Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <var:V3> : string := " <var:V3> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:t> = <var:z> }} <var:V1> := <var:t> ; <var:V2> := <var:V1> * <var:t> ; <var:V3> := <var:V2> * <var:t> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:4> ; <var:V2> := <var:V2> * <nat:4> ; <var:V3> := <var:V3> * <nat:2> ; <var:X> := <var:V3> <var:X> := <var:X> + <var:V2> <var:X> := <var:X> + <var:V1> <var:X> := <var:X> + <var:V0> {{ <var:X> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:V1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:V1> = <var:z> /\ <var:V2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:V1> = <var:z> /\ <var:V2> = <var:z> ^ <nat:2> /\ <var:V3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:V1> = <var:z> /\ <var:V2> = <var:z> ^ <nat:2> /\ <var:V3> = <var:z> ^ <nat:3> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:V1> = <nat:4> * <var:z> /\ <var:V2> = <var:z> ^ <nat:2> /\ <var:V3> = <var:z> ^ <nat:3> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:V1> = <nat:4> * <var:z> /\ <var:V2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:V3> = <var:z> ^ <nat:3> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:V1> = <nat:4> * <var:z> /\ <var:V2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:V3> = <nat:2> * <var:z> ^ <nat:3> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:V1> = <nat:4> * <var:z> /\ <var:V2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:V0> = <nat:2> /\ <var:X> = <nat:2> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:V1> = <nat:4> * <var:z> /\ <var:V0> = <nat:2> /\ <var:X> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:V0> = <nat:2> /\ <var:X> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:4> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:z> /\ <var:X> = <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 