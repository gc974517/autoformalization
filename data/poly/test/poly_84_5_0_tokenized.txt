\begin{document} \begin{theorem} Take the following code in \emph{Imp} as \begin{verbatim} <var:O0> := <nat:3> ; <var:O1> := <nat:3> ; <var:O1> := <var:O1> * <var:m> ; <var:T> := <var:O1> ; <var:T> := <var:T> + <var:O0> \end{verbatim} Assume ( given every whole numbers $ <var:c> $ ) $ <var:m> = <var:c> $ before evaluating our series of commands then $ <var:T> = <nat:3> \cdot <var:c> + <nat:3> $ . \end{theorem} \begin{proof} Notice the following decorated segment of code . \begin{eqnarray} \{ <var:m> = <var:c> \} \\ <var:O0> := <nat:3> ; \\ \{ <var:m> = <var:c> \land <var:O0> = <nat:3> \} \\ <var:O1> := <nat:3> ; \\ \{ <var:m> = <var:c> \land <var:O0> = <nat:3> \land <var:O1> = <nat:3> \} \\ <var:O1> := <var:O1> * <var:m> ; \\ \{ <var:m> = <var:c> \land <var:O0> = <nat:3> \land <var:O1> = <nat:3> * <var:c> \} \\ <var:T> := <var:O1> ; \\ \{ <var:m> = <var:c> \land <var:O0> = <nat:3> \land <var:T> = <nat:3> * <var:c> \} \\ <var:T> := <var:T> + <var:O0> \\ \{ <var:m> = <var:c> \land <var:T> = <nat:3> * <var:c> + <nat:3> \} \end{eqnarray} Using Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:m> = <var:c> }} <var:O0> := <nat:3> ; <var:O1> := <nat:3> ; <var:O1> := <var:O1> * <var:m> ; <var:T> := <var:O1> ; <var:T> := <var:T> + <var:O0> {{ <var:T> = <nat:3> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:O0> = <nat:3> /\ <var:O1> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:O0> = <nat:3> /\ <var:T> = <nat:3> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:c> /\ <var:T> = <nat:3> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 