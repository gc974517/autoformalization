\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} : \begin{verbatim} <var:H0> := <nat:1> ; <var:x> := <var:H0> \end{verbatim} Assuming , given some positive coefficients $ <var:a> $ , that we have $ <var:N> = <var:a> $ before the evaluation of this set of instructions it must be that $ <var:x> = <nat:1> $ when list of instructions terminates . \end{theorem} \begin{proof} The method of proof for this set of commands is demonstrated with typical Hoare reasoning . Looking at the next step seen in our set of commands , we have \verb | { <var:N> = <var:a> } <var:H0> := <nat:1> { <var:N> = <var:a> \land <var:H0> = <nat:1> } | . This is known to be sound using the variable update law given in usual Hoare reasoning . Next , we see \verb | { <var:N> = <var:a> } <var:H0> := <nat:1> { <var:N> = <var:a> \land <var:H0> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:N> = <var:a> }} <var:H0> := <nat:1> ; <var:x> := <var:H0> {{ <var:x> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:a> /\ <var:x> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 