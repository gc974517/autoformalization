\begin{document} \begin{theorem} We define the following list of commands as follows \begin{verbatim} <var:M> := <nat:1> ; <var:M> := <nat:3> + <var:M> * <var:r> ; <var:M> := <nat:4> + <var:M> * <var:r> ; <var:M> := <nat:1> + <var:M> * <var:r> ; <var:M> := <nat:2> + <var:M> * <var:r> ; <var:M> := <var:M> * <var:r> ; <var:M> := <nat:3> + <var:M> * <var:r> ; <var:M> := <var:M> * <var:r> ; <var:M> := <nat:3> + <var:M> * <var:r> ; <var:M> := <nat:3> + <var:M> * <var:r> ; <var:M> := <nat:2> + <var:M> * <var:r> ; <var:M> := <nat:2> + <var:M> * <var:r> \end{verbatim} Assuming that we have $ <var:r> = <var:v> $ with some positive integers $ <var:v> $ ahead of interpreting our set of instructions , then we have $ <var:M> = <nat:1> \times <var:v> ^ <nat:11> + <nat:3> \times <var:v> ^ <nat:10> + <nat:4> \times <var:v> ^ <nat:9> + <nat:1> \times <var:v> ^ <nat:8> + <nat:2> \times <var:v> ^ <nat:7> + <nat:3> \times <var:v> ^ <nat:5> + <nat:3> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:2> $ when set of commands has terminated . \end{theorem} \begin{proof} The argument for our code can be demonstrated by usual Hoare techniques . Moving onward , we have the code yielding $ <nat:1> $ as $ <var:M>$ . This command forwards the precondition $ \{ <var:r> = <var:v> \} $ toward the postcondition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \} $ . Honing in on the subsequent command in our program , we have the assignment statement \verb | <var:M> := <nat:3> + <var:M> * <var:r> ; | . This line takes the precondition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \} $ as $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> + <nat:3> \} $ . This is rigorously given by the assignment scheme in usual Hoare reasoning . Immediately following , we have the assignment statement letting $ <nat:4> + <var:M> * <var:r> $ toward $ <var:M>$ . This line redefines the precondition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> + <nat:3> \} $ toward the postcondition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + <nat:4> \} $ . Immediately following , we have the variable update command binding $ <nat:1> + <var:M> * <var:r> $ to $ <var:M>$ . This redefines the precondition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + <nat:4> \} $ into the condition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:1> \} $ . Shifting focus toward the upcoming command seen in the segment of code , we have the variable update line \verb | <var:M> := <nat:2> + <var:M> * <var:r> ; | . This takes $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:1> \} $ as $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:4> + <nat:3> \times <var:v> ^ <nat:3> + <nat:4> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:2> \} $ . Immediately following , the command \verb | <var:M> := <var:M> * <var:r> ; | . This forwards the precondition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:4> + <nat:3> \times <var:v> ^ <nat:3> + <nat:4> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:2> \} $ toward the condition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:5> + <nat:3> \times <var:v> ^ <nat:4> + <nat:4> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + \} $ . This is guaranteed through the assignment rule of typical Hoare reasoning . Immediately following , we have the environment update line \verb | <var:M> := <nat:3> + <var:M> * <var:r> ; | . This transfers $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:5> + <nat:3> \times <var:v> ^ <nat:4> + <nat:4> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + \} $ into the condition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:6> + <nat:3> \times <var:v> ^ <nat:5> + <nat:4> \times <var:v> ^ <nat:4> + <nat:1> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:3> \} $ . Considering the subsequent statement seen in our set of instructions , the binding line yielding $ <var:M> * <var:r> $ into $ <var:M>$ . This command advances the condition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:6> + <nat:3> \times <var:v> ^ <nat:5> + <nat:4> \times <var:v> ^ <nat:4> + <nat:1> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:3> \} $ toward $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:7> + <nat:3> \times <var:v> ^ <nat:6> + <nat:4> \times <var:v> ^ <nat:5> + <nat:1> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> + \} $ . Advancing to the next step , we have the variable assignmet command defining $ <nat:3> + <var:M> * <var:r> $ into $ <var:M>$ . This takes the condition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:7> + <nat:3> \times <var:v> ^ <nat:6> + <nat:4> \times <var:v> ^ <nat:5> + <nat:1> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> + \} $ into $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:8> + <nat:3> \times <var:v> ^ <nat:7> + <nat:4> \times <var:v> ^ <nat:6> + <nat:1> \times <var:v> ^ <nat:5> + <nat:2> \times <var:v> ^ <nat:4> + <nat:3> \times <var:v> ^ <nat:2> + <nat:3> \} $ . Looking at the next bit of code seen in our series of commands , we see the variable update code \verb | <var:M> := <nat:3> + <var:M> * <var:r> ; | . This forwards the condition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:8> + <nat:3> \times <var:v> ^ <nat:7> + <nat:4> \times <var:v> ^ <nat:6> + <nat:1> \times <var:v> ^ <nat:5> + <nat:2> \times <var:v> ^ <nat:4> + <nat:3> \times <var:v> ^ <nat:2> + <nat:3> \} $ to the condition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:9> + <nat:3> \times <var:v> ^ <nat:8> + <nat:4> \times <var:v> ^ <nat:7> + <nat:1> \times <var:v> ^ <nat:6> + <nat:2> \times <var:v> ^ <nat:5> + <nat:3> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> + <nat:3> \} $ . This is shown through the assignment law from standard Hoare logic . Moving onward , we see the environment update line defining $ <nat:2> + <var:M> * <var:r> $ to $ <var:M>$ . This command moves the condition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:9> + <nat:3> \times <var:v> ^ <nat:8> + <nat:4> \times <var:v> ^ <nat:7> + <nat:1> \times <var:v> ^ <nat:6> + <nat:2> \times <var:v> ^ <nat:5> + <nat:3> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> + <nat:3> \} $ into the condition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:10> + <nat:3> \times <var:v> ^ <nat:9> + <nat:4> \times <var:v> ^ <nat:8> + <nat:1> \times <var:v> ^ <nat:7> + <nat:2> \times <var:v> ^ <nat:6> + <nat:3> \times <var:v> ^ <nat:4> + <nat:3> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + <nat:2> \} $ . This is rigorously given with the assignment scheme obtained from usual Hoare reasoning . Advancing to the next step , we have the variable update line letting $ <nat:2> + <var:M> * <var:r$ as $ <var:M>$ . This redefines the precondition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:10> + <nat:3> \times <var:v> ^ <nat:9> + <nat:4> \times <var:v> ^ <nat:8> + <nat:1> \times <var:v> ^ <nat:7> + <nat:2> \times <var:v> ^ <nat:6> + <nat:3> \times <var:v> ^ <nat:4> + <nat:3> \times <var:v> ^ <nat:2> + <nat:3> \times <var:v> + <nat:2> \} $ as the condition $ \{ <var:r> = <var:v> \land <var:M> = <nat:1> \times <var:v> ^ <nat:11> + <nat:3> \times <var:v> ^ <nat:10> + <nat:4> \times <var:v> ^ <nat:9> + <nat:1> \times <var:v> ^ <nat:8> + <nat:2> \times <var:v> ^ <nat:7> + <nat:3> \times <var:v> ^ <nat:5> + <nat:3> \times <var:v> ^ <nat:3> + <nat:3> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:r> = <var:v> }} <var:M> := <nat:1> ; <var:M> := <nat:3> + <var:M> * <var:r> ; <var:M> := <nat:4> + <var:M> * <var:r> ; <var:M> := <nat:1> + <var:M> * <var:r> ; <var:M> := <nat:2> + <var:M> * <var:r> ; <var:M> := <var:M> * <var:r> ; <var:M> := <nat:3> + <var:M> * <var:r> ; <var:M> := <var:M> * <var:r> ; <var:M> := <nat:3> + <var:M> * <var:r> ; <var:M> := <nat:3> + <var:M> * <var:r> ; <var:M> := <nat:2> + <var:M> * <var:r> ; <var:M> := <nat:2> + <var:M> * <var:r> {{ <var:M> = <nat:1> * <var:v> ^ <nat:11> + <nat:3> * <var:v> ^ <nat:10> + <nat:4> * <var:v> ^ <nat:9> + <nat:1> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:M> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:M> = <nat:1> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:M> = <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:M> = <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:M> = <nat:1> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:4> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:M> = <nat:1> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:4> + <nat:4> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:M> = <nat:1> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:5> + <nat:4> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:M> = <nat:1> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:6> + <nat:4> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:M> = <nat:1> * <var:v> ^ <nat:8> + <nat:3> * <var:v> ^ <nat:7> + <nat:4> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:M> = <nat:1> * <var:v> ^ <nat:9> + <nat:3> * <var:v> ^ <nat:8> + <nat:4> * <var:v> ^ <nat:7> + <nat:1> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:M> = <nat:1> * <var:v> ^ <nat:10> + <nat:3> * <var:v> ^ <nat:9> + <nat:4> * <var:v> ^ <nat:8> + <nat:1> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:6> + <nat:3> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:v> /\ <var:M> = <nat:1> * <var:v> ^ <nat:11> + <nat:3> * <var:v> ^ <nat:10> + <nat:4> * <var:v> ^ <nat:9> + <nat:1> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:7> + <nat:3> * <var:v> ^ <nat:5> + <nat:3> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 