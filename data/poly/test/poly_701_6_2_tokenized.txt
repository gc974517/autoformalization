\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R> := <nat:3> ; <var:R> := <var:R> * <var:K> ; <var:R> := <nat:3> + <var:R> * <var:K> ; <var:R> := <nat:1> + <var:R> * <var:K> ; <var:R> := <var:R> * <var:K> ; <var:R> := <nat:2> + <var:R> * <var:K> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Assume it to hold that $ <var:K> = <var:Q> $ before the evaluation of our list of commands it must be that we have $ <var:R> = <nat:3> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:Q> \} \\ <var:R> := <nat:3> ; \\ \{ <var:K> = <var:Q> \land <var:R> = <nat:3> \} \\ <var:R> := <var:R> * <var:K> ; \\ \{ <var:K> = <var:Q> \land <var:R> = <nat:3> \times <var:Q> + \} \\ <var:R> := <nat:3> + <var:R> * <var:K> ; \\ \{ <var:K> = <var:Q> \land <var:R> = <nat:3> \times <var:Q> ^ <nat:2> + <nat:3> \} \\ <var:R> := <nat:1> + <var:R> * <var:K> ; \\ \{ <var:K> = <var:Q> \land <var:R> = <nat:3> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> + <nat:1> \} \\ <var:R> := <var:R> * <var:K> ; \\ \{ <var:K> = <var:Q> \land <var:R> = <nat:3> \times <var:Q> ^ <nat:4> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + \} \\ <var:R> := <nat:2> + <var:R> * <var:K> \\ \{ <var:K> = <var:Q> \land <var:R> = <nat:3> \times <var:Q> ^ <nat:5> + <nat:3> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:2> \} \end{eqnarray} The application of usual Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:R> := <nat:3> ; <var:R> := <var:R> * <var:K> ; <var:R> := <nat:3> + <var:R> * <var:K> ; <var:R> := <nat:1> + <var:R> * <var:K> ; <var:R> := <var:R> * <var:K> ; <var:R> := <nat:2> + <var:R> * <var:K> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:K> = <var:Q> }} <def:poly> {{ <var:R> = <nat:3> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:R> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:R> = <nat:3> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:R> = <nat:3> * <var:Q> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:R> = <nat:3> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:R> = <nat:3> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:Q> /\ <var:R> = <nat:3> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 