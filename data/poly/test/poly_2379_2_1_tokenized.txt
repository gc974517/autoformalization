\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:C0> := <nat:3> ; <var:R> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Given , given whole numbers $ <var:y> $ , $ <var:g> = <var:y> $ prior to interpreting the series of instructions then we have $ <var:R> = <nat:3> $ once set of instructions exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:y> \} \\ <var:C0> := <nat:3> ; \\ \{ <var:g> = <var:y> \land <var:C0> = <nat:3> \} \\ <var:R> := <var:C0> \\ \{ <var:g> = <var:y> \land <var:R> = <nat:3> \} \end{eqnarray} The application of standard Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:3> ; <var:R> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:g> = <var:y> }} <def:poly> {{ <var:R> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:C0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:y> /\ <var:R> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 