\begin{document} \begin{theorem} We define a series of instructions such that \begin{verbatim} <var:h> := <nat:3> ; <var:h> := <nat:4> + <var:h> * <var:I> ; <var:h> := <var:h> * <var:I> ; <var:h> := <nat:1> + <var:h> * <var:I> ; <var:h> := <nat:1> + <var:h> * <var:I> ; <var:h> := <nat:4> + <var:h> * <var:I> \end{verbatim} Allow $ <var:I> = <var:j> $ --- for all positive coefficients $ <var:j> $ --- prior to interpreting this series of instructions it holds that we have $ <var:h> = <nat:3> \cdot <var:j> ^ <nat:5> + <nat:4> \cdot <var:j> ^ <nat:4> + <nat:1> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code is evident through usual Hoare techniques . Paying attention to the next statement in the code segment , the binding command letting $ <nat:3> $ to $ <var:h>$ . This code advances the condition $ \{ <var:I> = <var:j> \} $ as $ \{ <var:I> = <var:j> \land <var:h> = <nat:3> \} $ . This is shown to be logically sound with the assignment inference rule obtained from typical Hoare reasoning . Moving on to the next bit of code found in the list of instructions , we see the assignment statement yielding $ <nat:4> + <var:h> * <var:I> $ into $ <var:h>$ . This redefines $ \{ <var:I> = <var:j> \land <var:h> = <nat:3> \} $ into the condition $ \{ <var:I> = <var:j> \land <var:h> = <nat:3> \cdot <var:j> + <nat:4> \} $ . Moving forward , the assignment line letting $ <var:h> * <var:I> $ as $ <var:h>$ . This line redefines the condition $ \{ <var:I> = <var:j> \land <var:h> = <nat:3> \cdot <var:j> + <nat:4> \} $ to $ \{ <var:I> = <var:j> \land <var:h> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + \} $ . This is rigorously given using the assignment scheme in Hoare techniques . Honing in on the subsequent statement contained in our code , we see the variable update line assigning $ <nat:1> + <var:h> * <var:I> $ to $ <var:h>$ . This takes the condition $ \{ <var:I> = <var:j> \land <var:h> = <nat:3> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + \} $ toward the postcondition $ \{ <var:I> = <var:j> \land <var:h> = <nat:3> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:1> \} $ . Paying attention to the proceeding command found in our series of instructions , we see the binding line binding $ <nat:1> + <var:h> * <var:I> $ to $ <var:h>$ . This takes $ \{ <var:I> = <var:j> \land <var:h> = <nat:3> \cdot <var:j> ^ <nat:3> + <nat:4> \cdot <var:j> ^ <nat:2> + <nat:1> \} $ toward the postcondition $ \{ <var:I> = <var:j> \land <var:h> = <nat:3> \cdot <var:j> ^ <nat:4> + <nat:4> \cdot <var:j> ^ <nat:3> + <nat:1> \cdot <var:j> + <nat:1> \} $ . Advancing to the upcoming command contained in the segment of code , the variable assignmet line \verb | <var:h> := <nat:4> + <var:h> * <var:I> | . This advances the precondition $ \{ <var:I> = <var:j> \land <var:h> = <nat:3> \cdot <var:j> ^ <nat:4> + <nat:4> \cdot <var:j> ^ <nat:3> + <nat:1> \cdot <var:j> + <nat:1> \} $ into $ \{ <var:I> = <var:j> \land <var:h> = <nat:3> \cdot <var:j> ^ <nat:5> + <nat:4> \cdot <var:j> ^ <nat:4> + <nat:1> \cdot <var:j> ^ <nat:2> + <nat:1> \cdot <var:j> + <nat:4> \} $ . This is shown through the assignment inference rule obtained from typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:I> = <var:j> }} <var:h> := <nat:3> ; <var:h> := <nat:4> + <var:h> * <var:I> ; <var:h> := <var:h> * <var:I> ; <var:h> := <nat:1> + <var:h> * <var:I> ; <var:h> := <nat:1> + <var:h> * <var:I> ; <var:h> := <nat:4> + <var:h> * <var:I> {{ <var:h> = <nat:3> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:h> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:h> = <nat:3> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:h> = <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:h> = <nat:3> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:h> = <nat:3> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:1> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:h> = <nat:3> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 