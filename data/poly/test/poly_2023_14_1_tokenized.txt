\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:i1> := <var:s> ; <var:i2> := <var:i1> * <var:s> ; <var:i3> := <var:i2> * <var:s> ; <var:i4> := <var:i3> * <var:s> ; <var:i0> := <nat:9> ; <var:i1> := <var:i1> * <nat:4> ; <var:i2> := <var:i2> * <nat:6> ; <var:i3> := <var:i3> * <nat:5> ; <var:i4> := <var:i4> * <nat:9> ; <var:n> := <var:i4> <var:n> := <var:n> + <var:i3> <var:n> := <var:n> + <var:i2> <var:n> := <var:n> + <var:i1> <var:n> := <var:n> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> . Allowing , given any positive numbers $ <var:H> $ , it to hold that $ <var:s> = <var:H> $ prior to interpreting this code segment it must be that we have $ <var:n> = <nat:9> \cdot <var:H> ^ <nat:4> + <nat:5> \cdot <var:H> ^ <nat:3> + <nat:6> \cdot <var:H> ^ <nat:2> + <nat:4> \cdot <var:H> + <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:s> = <var:H> \} \\ <var:i1> := <var:s> ; \\ \{ <var:s> = <var:H> \land <var:i1> = <var:H> \} \\ <var:i2> := <var:i1> * <var:s> ; \\ \{ <var:s> = <var:H> \land <var:i1> = <var:H> \land <var:i2> = <var:H> ^ <nat:2> \} \\ <var:i3> := <var:i2> * <var:s> ; \\ \{ <var:s> = <var:H> \land <var:i1> = <var:H> \land <var:i2> = <var:H> ^ <nat:2> \land <var:i3> = <var:H> ^ <nat:3> \} \\ <var:i4> := <var:i3> * <var:s> ; \\ \{ <var:s> = <var:H> \land <var:i1> = <var:H> \land <var:i2> = <var:H> ^ <nat:2> \land <var:i3> = <var:H> ^ <nat:3> \land <var:i4> = <var:H> ^ <nat:4> \} \\ <var:i0> := <nat:9> ; \\ \{ <var:s> = <var:H> \land <var:i1> = <var:H> \land <var:i2> = <var:H> ^ <nat:2> \land <var:i3> = <var:H> ^ <nat:3> \land <var:i4> = <var:H> ^ <nat:4> \land <var:i0> = <nat:9> \} \\ <var:i1> := <var:i1> * <nat:4> ; \\ \{ <var:s> = <var:H> \land <var:i1> = <nat:4> \times <var:H> \land <var:i2> = <var:H> ^ <nat:2> \land <var:i3> = <var:H> ^ <nat:3> \land <var:i4> = <var:H> ^ <nat:4> \land <var:i0> = <nat:9> \} \\ <var:i2> := <var:i2> * <nat:6> ; \\ \{ <var:s> = <var:H> \land <var:i1> = <nat:4> \times <var:H> \land <var:i2> = <nat:6> \times <var:H> ^ <nat:2> \land <var:i3> = <var:H> ^ <nat:3> \land <var:i4> = <var:H> ^ <nat:4> \land <var:i0> = <nat:9> \} \\ <var:i3> := <var:i3> * <nat:5> ; \\ \{ <var:s> = <var:H> \land <var:i1> = <nat:4> \times <var:H> \land <var:i2> = <nat:6> \times <var:H> ^ <nat:2> \land <var:i3> = <nat:5> \times <var:H> ^ <nat:3> \land <var:i4> = <var:H> ^ <nat:4> \land <var:i0> = <nat:9> \} \\ <var:i4> := <var:i4> * <nat:9> ; \\ \{ <var:s> = <var:H> \land <var:i1> = <nat:4> \times <var:H> \land <var:i2> = <nat:6> \times <var:H> ^ <nat:2> \land <var:i3> = <nat:5> \times <var:H> ^ <nat:3> \land <var:i4> = <nat:9> \times <var:H> ^ <nat:4> \land <var:i0> = <nat:9> \} \\ <var:n> := <var:i4> \\ \{ <var:s> = <var:H> \land <var:i1> = <nat:4> \times <var:H> \land <var:i2> = <nat:6> \times <var:H> ^ <nat:2> \land <var:i3> = <nat:5> \times <var:H> ^ <nat:3> \land <var:i0> = <nat:9> \land <var:n> = <nat:9> \times <var:H> ^ <nat:4> \} \\ <var:n> := <var:n> + <var:i3> \\ \{ <var:s> = <var:H> \land <var:i1> = <nat:4> \times <var:H> \land <var:i2> = <nat:6> \times <var:H> ^ <nat:2> \land <var:i0> = <nat:9> \land <var:n> = <nat:9> \times <var:H> ^ <nat:4> + <nat:5> \times <var:H> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:i2> \\ \{ <var:s> = <var:H> \land <var:i1> = <nat:4> \times <var:H> \land <var:i0> = <nat:9> \land <var:n> = <nat:9> \times <var:H> ^ <nat:4> + <nat:5> \times <var:H> ^ <nat:3> + <nat:6> \times <var:H> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:i1> \\ \{ <var:s> = <var:H> \land <var:i0> = <nat:9> \land <var:n> = <nat:9> \times <var:H> ^ <nat:4> + <nat:5> \times <var:H> ^ <nat:3> + <nat:6> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> \} \\ <var:n> := <var:n> + <var:i0> \\ \{ <var:s> = <var:H> \land <var:n> = <nat:9> \times <var:H> ^ <nat:4> + <nat:5> \times <var:H> ^ <nat:3> + <nat:6> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:9> \} \end{eqnarray} Using typical Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <var:i4> : string := " <var:i4> " . Definition <def:poly> := <var:i1> := <var:s> ; <var:i2> := <var:i1> * <var:s> ; <var:i3> := <var:i2> * <var:s> ; <var:i4> := <var:i3> * <var:s> ; <var:i0> := <nat:9> ; <var:i1> := <var:i1> * <nat:4> ; <var:i2> := <var:i2> * <nat:6> ; <var:i3> := <var:i3> * <nat:5> ; <var:i4> := <var:i4> * <nat:9> ; <var:n> := <var:i4> <var:n> := <var:n> + <var:i3> <var:n> := <var:n> + <var:i2> <var:n> := <var:n> + <var:i1> <var:n> := <var:n> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:s> = <var:H> }} <def:poly> {{ <var:n> = <nat:9> * <var:H> ^ <nat:4> + <nat:5> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:i1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:i1> = <var:H> /\ <var:i2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:i1> = <var:H> /\ <var:i2> = <var:H> ^ <nat:2> /\ <var:i3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:i1> = <var:H> /\ <var:i2> = <var:H> ^ <nat:2> /\ <var:i3> = <var:H> ^ <nat:3> /\ <var:i4> = <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:i1> = <var:H> /\ <var:i2> = <var:H> ^ <nat:2> /\ <var:i3> = <var:H> ^ <nat:3> /\ <var:i4> = <var:H> ^ <nat:4> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:i1> = <nat:4> * <var:H> /\ <var:i2> = <var:H> ^ <nat:2> /\ <var:i3> = <var:H> ^ <nat:3> /\ <var:i4> = <var:H> ^ <nat:4> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:i1> = <nat:4> * <var:H> /\ <var:i2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:i3> = <var:H> ^ <nat:3> /\ <var:i4> = <var:H> ^ <nat:4> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:i1> = <nat:4> * <var:H> /\ <var:i2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:i3> = <nat:5> * <var:H> ^ <nat:3> /\ <var:i4> = <var:H> ^ <nat:4> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:i1> = <nat:4> * <var:H> /\ <var:i2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:i3> = <nat:5> * <var:H> ^ <nat:3> /\ <var:i4> = <nat:9> * <var:H> ^ <nat:4> /\ <var:i0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:i1> = <nat:4> * <var:H> /\ <var:i2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:i3> = <nat:5> * <var:H> ^ <nat:3> /\ <var:i0> = <nat:9> /\ <var:n> = <nat:9> * <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:i1> = <nat:4> * <var:H> /\ <var:i2> = <nat:6> * <var:H> ^ <nat:2> /\ <var:i0> = <nat:9> /\ <var:n> = <nat:9> * <var:H> ^ <nat:4> + <nat:5> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:i1> = <nat:4> * <var:H> /\ <var:i0> = <nat:9> /\ <var:n> = <nat:9> * <var:H> ^ <nat:4> + <nat:5> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:i0> = <nat:9> /\ <var:n> = <nat:9> * <var:H> ^ <nat:4> + <nat:5> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:4> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:H> /\ <var:n> = <nat:9> * <var:H> ^ <nat:4> + <nat:5> * <var:H> ^ <nat:3> + <nat:6> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 