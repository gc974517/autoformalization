\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b0> := <nat:4> ; <var:r> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:R> = <var:S> $ ahead of evaluating the list of instructions it follows that we see $ <var:r> = <nat:4> $ after program has finished . \end{theorem} \begin{proof} Proving correctness for the segment of code is evident with usual Hoare logic . Advancing , we have the variable assignmet command giving $ <nat:4> $ into $ <var:b0>$ . This code takes $ \{ <var:R> = <var:S> \} $ toward $ \{ <var:R> = <var:S> \land <var:b0> = <nat:4> \} $ . Immediately following , we see the variable assignmet line letting $ <var:b0$ into $ <var:r>$ . This line takes the precondition $ \{ <var:R> = <var:S> \land <var:b0> = <nat:4> \} $ to the postcondition $ \{ <var:R> = <var:S> \land <var:r> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:4> ; <var:r> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:R> = <var:S> }} <def:poly> {{ <var:r> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:S> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:S> /\ <var:r> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 