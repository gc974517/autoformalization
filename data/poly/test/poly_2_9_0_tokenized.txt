\begin{document} \begin{theorem} We define a series of commands as \begin{verbatim} <var:z0> := <nat:4> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:s> ; <var:z2> := <nat:2> ; <var:z2> := <var:z2> * <var:s> ; <var:z2> := <var:z2> * <var:s> ; <var:r> := <var:z2> ; <var:r> := <var:r> + <var:z1> ; <var:r> := <var:r> + <var:z0> \end{verbatim} Allow it to hold that $ <var:s> = <var:E> $ given any natural numbers $ <var:E> $ ahead of executing the series of instructions it holds that $ <var:r> = <nat:2> \times <var:E> ^ <nat:2> + <nat:4> \times <var:E> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for our code is shown through usual Hoare reasoning . Moving on to the next step , we have \verb | { <var:s> = <var:E> } <var:z0> := <nat:4> { <var:s> = <var:E> \land <var:z0> = <nat:4> } | , \verb | { <var:s> = <var:E> \land <var:z0> = <nat:4> } <var:z1> := <nat:4> { <var:s> = <var:E> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> } | , \verb | { <var:s> = <var:E> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> } <var:z1> := <var:z1> * <var:s> { <var:s> = <var:E> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> \cdot <var:E> } | , \verb | { <var:s> = <var:E> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> \cdot <var:E> } <var:z2> := <nat:2> { <var:s> = <var:E> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> \cdot <var:E> \land <var:z2> = <nat:2> } | , \verb | { <var:s> = <var:E> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> \cdot <var:E> \land <var:z2> = <nat:2> } <var:z2> := <var:z2> * <var:s> { <var:s> = <var:E> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> \cdot <var:E> \land <var:z2> = <nat:2> \cdot <var:E> } | and \verb | { <var:s> = <var:E> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> \cdot <var:E> \land <var:z2> = <nat:2> \cdot <var:E> } <var:z2> := <var:z2> * <var:s> { <var:s> = <var:E> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> \cdot <var:E> \land <var:z2> = <nat:2> \cdot <var:E> ^ <nat:2> } | . Moving forward to the next step , we see \verb | { <var:s> = <var:E> } <var:z0> := <nat:4> { <var:s> = <var:E> \land <var:z0> = <nat:4> } | . This is deduced through the variable assignmet scheme defined in typical Hoare techniques . Advancing , we see \verb | { <var:s> = <var:E> } <var:z0> := <nat:4> { <var:s> = <var:E> \land <var:z0> = <nat:4> } | and \verb | { <var:s> = <var:E> \land <var:z0> = <nat:4> } <var:z1> := <nat:4> { <var:s> = <var:E> \land <var:z0> = <nat:4> \land <var:z1> = <nat:4> } | . This is ensured with the assignment law obtained from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:s> = <var:E> }} <var:z0> := <nat:4> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:s> ; <var:z2> := <nat:2> ; <var:z2> := <var:z2> * <var:s> ; <var:z2> := <var:z2> * <var:s> ; <var:r> := <var:z2> ; <var:r> := <var:r> + <var:z1> ; <var:r> := <var:r> + <var:z0> {{ <var:r> = <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> * <var:E> /\ <var:z2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> * <var:E> /\ <var:z2> = <nat:2> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> * <var:E> /\ <var:z2> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:z0> = <nat:4> /\ <var:z1> = <nat:4> * <var:E> /\ <var:r> = <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:z0> = <nat:4> /\ <var:r> = <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:E> /\ <var:r> = <nat:2> * <var:E> ^ <nat:2> + <nat:4> * <var:E> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 