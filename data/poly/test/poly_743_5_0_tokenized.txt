\begin{document} \begin{theorem} Take the following code segment : \begin{verbatim} <var:y0> := <nat:7> ; <var:y1> := <nat:3> ; <var:y1> := <var:y1> * <var:G> ; <var:a> := <var:y1> ; <var:a> := <var:a> + <var:y0> \end{verbatim} Given $ <var:G> = <var:Q> $ before the execution of our list of commands then we see $ <var:a> = <nat:3> \cdot <var:Q> + <nat:7> $ when series of instructions has terminated . \end{theorem} \begin{proof} Proving correctness for our series of commands can be demonstrated by usual Hoare techniques . Moving forward to the proceeding piece of code contained in our segment of code , we have the assignment line giving $ <nat:7> $ toward $ <var:y0>$ . This advances the condition $ \{ <var:G> = <var:Q> \} $ as $ \{ <var:G> = <var:Q> \land <var:y0> = <nat:7> \} $ . This is known to be sound with the assignment rule obtained from usual Hoare reasoning . Moving on to the proceeding statement contained in our set of commands , we have the code \verb | <var:y1> := <nat:3> ; | . This takes the precondition $ \{ <var:G> = <var:Q> \land <var:y0> = <nat:7> \} $ toward the condition $ \{ <var:G> = <var:Q> \land <var:y0> = <nat:7> \land <var:y1> = <nat:3> \} $ . Jumping to the following bit of code seen in our code segment , the statement \verb | <var:y1> := <var:y1> * <var:G> ; | . This code advances the precondition $ \{ <var:G> = <var:Q> \land <var:y0> = <nat:7> \land <var:y1> = <nat:3> \} $ to the condition $ \{ <var:G> = <var:Q> \land <var:y0> = <nat:7> \land <var:y1> = <nat:3> * <var:Q> \} $ . This is given with the assignment rule obtained from standard Hoare reasoning . Jumping to the proceeding command in our code , the variable binding code \verb | <var:a> := <var:y1> ; | . This command forwards the condition $ \{ <var:G> = <var:Q> \land <var:y0> = <nat:7> \land <var:y1> = <nat:3> * <var:Q> \} $ toward the condition $ \{ <var:G> = <var:Q> \land <var:y0> = <nat:7> \land <var:a> = <nat:3> * <var:Q> \} $ . Shifting focus toward the upcoming line contained in the list of instructions , the assignment line yielding $ <var:a> + <var:y0$ as $ <var:a>$ . This line moves $ \{ <var:G> = <var:Q> \land <var:y0> = <nat:7> \land <var:a> = <nat:3> * <var:Q> \} $ to the postcondition $ \{ <var:G> = <var:Q> \land <var:a> = <nat:3> * <var:Q> + <nat:7> \} $ . This is rigorously given with the assignment scheme in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:G> = <var:Q> }} <var:y0> := <nat:7> ; <var:y1> := <nat:3> ; <var:y1> := <var:y1> * <var:G> ; <var:a> := <var:y1> ; <var:a> := <var:a> + <var:y0> {{ <var:a> = <nat:3> * <var:Q> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:Q> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Q> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Q> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Q> /\ <var:y0> = <nat:7> /\ <var:a> = <nat:3> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Q> /\ <var:a> = <nat:3> * <var:Q> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 