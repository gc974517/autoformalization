\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:2> ; <var:Y> := <var:V0> \end{verbatim} Allow that we have $ <var:F> = <var:z> $ prior to the execution of this list of commands it follows that we have $ <var:Y> = <nat:2> $ after code segment has executed . \end{theorem} \begin{proof} Demonstrating correctness of the set of commands can be given with standard Hoare logic . Immediately following , we have \begin{verbatim} { <var:F> = <var:z> } <var:V0> := <nat:2> { <var:F> = <var:z> \land <var:V0> = <nat:2> } { <var:F> = <var:z> \land <var:V0> = <nat:2> } <var:Y> := <var:V0{ <var:F> = <var:z> \land <var:Y> = <nat:2> } \end{verbatim} This is given by the environment update scheme given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:F> = <var:z> }} <var:V0> := <nat:2> ; <var:Y> := <var:V0> {{ <var:Y> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:z> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:z> /\ <var:Y> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 