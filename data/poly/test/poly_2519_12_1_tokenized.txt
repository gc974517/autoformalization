\begin{document} \begin{theorem} Consider the following program as \begin{verbatim} <var:x1> := <var:u> ; <var:x2> := <var:x1> * <var:u> ; <var:x3> := <var:x2> * <var:u> ; <var:x4> := <var:x3> * <var:u> ; <var:x0> := <nat:4> ; <var:x2> := <var:x2> * <nat:2> ; <var:x3> := <var:x3> * <nat:3> ; <var:x4> := <var:x4> * <nat:4> ; <var:z> := <var:x4> <var:z> := <var:z> + <var:x3> <var:z> := <var:z> + <var:x2> <var:z> := <var:z> + <var:x0> \end{verbatim} Assume $ <var:u> = <var:F> $ ahead of interpreting our code segment , it must be that $ <var:z> = <nat:4> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:3> + <nat:2> \times <var:F> ^ <nat:2> + <nat:4> $ once set of commands has exited . \end{theorem} \begin{proof} Arguing the correctness of our program can be given through usual Hoare techniques . Immediately after , we see the variable assignmet command giving $ <var:u> $ toward $ <var:x1>$ . This command redefines the precondition $ \{ <var:u> = <var:F> \} $ toward the postcondition $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \} $ . Shifting focus toward the subsequent statement in the list of commands , we see the binding line letting $ <var:x1> * <var:u> $ toward $ <var:x2>$ . This statement forwards the condition $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \} $ as $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \} $ . Keeping momentum , we see the assignment line defining $ <var:x2> * <var:u> $ toward $ <var:x3>$ . This advances $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \} $ into the postcondition $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \} $ . Immediately after , the variable update command \verb | <var:x4> := <var:x3> * <var:u> ; | . This moves $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \} $ toward the postcondition $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \land <var:x4> = <var:F> ^ <nat:4> \} $ . This is ensured through the assignment law from usual Hoare techniques . Looking at the following step in the program , we see the variable binding code \verb | <var:x0> := <nat:4> ; | . This transfers $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \land <var:x4> = <var:F> ^ <nat:4> \} $ as $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \land <var:x4> = <var:F> ^ <nat:4> \land <var:x0> = <nat:4> \} $ . Further , we have the assignment command \verb | <var:x2> := <var:x2> * <nat:2> ; | . This command moves the precondition $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \land <var:x4> = <var:F> ^ <nat:4> \land <var:x0> = <nat:4> \} $ to the postcondition $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <nat:2> \times <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \land <var:x4> = <var:F> ^ <nat:4> \land <var:x0> = <nat:4> \} $ . This is known to be sound using the assignment law in usual Hoare reasoning . Advancing to the next step , we see the variable assignmet code giving $ <var:x3> * <nat:3> $ toward $ <var:x3>$ . This line redefines $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <nat:2> \times <var:F> ^ <nat:2> \land <var:x3> = <var:F> ^ <nat:3> \land <var:x4> = <var:F> ^ <nat:4> \land <var:x0> = <nat:4> \} $ as the postcondition $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <nat:2> \times <var:F> ^ <nat:2> \land <var:x3> = <nat:3> \times <var:F> ^ <nat:3> \land <var:x4> = <var:F> ^ <nat:4> \land <var:x0> = <nat:4> \} $ . Jumping to the subsequent bit of code seen in our set of commands , we see the binding command \verb | <var:x4> := <var:x4> * <nat:4> ; | . This line advances $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <nat:2> \times <var:F> ^ <nat:2> \land <var:x3> = <nat:3> \times <var:F> ^ <nat:3> \land <var:x4> = <var:F> ^ <nat:4> \land <var:x0> = <nat:4> \} $ as $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <nat:2> \times <var:F> ^ <nat:2> \land <var:x3> = <nat:3> \times <var:F> ^ <nat:3> \land <var:x4> = <nat:4> \times <var:F> ^ <nat:4> \land <var:x0> = <nat:4> \} $ . This is sound using the assignment scheme defined by Hoare logic . Advancing to the subsequent step in our list of instructions , we have the environment update statement yielding $ <var:x4$ to $ <var:z>$ . This forwards the precondition $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <nat:2> \times <var:F> ^ <nat:2> \land <var:x3> = <nat:3> \times <var:F> ^ <nat:3> \land <var:x4> = <nat:4> \times <var:F> ^ <nat:4> \land <var:x0> = <nat:4> \} $ toward $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <nat:2> \times <var:F> ^ <nat:2> \land <var:x3> = <nat:3> \times <var:F> ^ <nat:3> \land <var:x0> = <nat:4> \land <var:z> = <nat:4> \times <var:F> ^ <nat:4> \} $ . This is given through the assignment law given in Hoare logic . Following , we have the statement giving $ <var:z> + <var:x3$ to $ <var:z>$ . This code transfers the condition $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <nat:2> \times <var:F> ^ <nat:2> \land <var:x3> = <nat:3> \times <var:F> ^ <nat:3> \land <var:x0> = <nat:4> \land <var:z> = <nat:4> \times <var:F> ^ <nat:4> \} $ into $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <nat:2> \times <var:F> ^ <nat:2> \land <var:x0> = <nat:4> \land <var:z> = <nat:4> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:3> \} $ . Advancing , the binding statement defining $ <var:z> + <var:x2$ into $ <var:z>$ . This line advances the precondition $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x2> = <nat:2> \times <var:F> ^ <nat:2> \land <var:x0> = <nat:4> \land <var:z> = <nat:4> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:3> \} $ toward the condition $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x0> = <nat:4> \land <var:z> = <nat:4> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:3> + <nat:2> \times <var:F> ^ <nat:2> \} $ . This is ensured through the assignment scheme defined in usual Hoare reasoning . Advancing to the next step , the variable assignmet statement yielding $ <var:z> + <var:x0$ to $ <var:z>$ . This forwards the precondition $ \{ <var:u> = <var:F> \land <var:x1> = <var:F> \land <var:x0> = <nat:4> \land <var:z> = <nat:4> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:3> + <nat:2> \times <var:F> ^ <nat:2> \} $ to the condition $ \{ <var:u> = <var:F> \land <var:z> = <nat:4> \times <var:F> ^ <nat:4> + <nat:3> \times <var:F> ^ <nat:3> + <nat:2> \times <var:F> ^ <nat:2> + <nat:4> \} $ . This is given using the assignment law defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <var:x4> : string := " <var:x4> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:u> = <var:F> }} <var:x1> := <var:u> ; <var:x2> := <var:x1> * <var:u> ; <var:x3> := <var:x2> * <var:u> ; <var:x4> := <var:x3> * <var:u> ; <var:x0> := <nat:4> ; <var:x2> := <var:x2> * <nat:2> ; <var:x3> := <var:x3> * <nat:3> ; <var:x4> := <var:x4> * <nat:4> ; <var:z> := <var:x4> <var:z> := <var:z> + <var:x3> <var:z> := <var:z> + <var:x2> <var:z> := <var:z> + <var:x0> {{ <var:z> = <nat:4> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:x1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:x1> = <var:F> /\ <var:x2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:x1> = <var:F> /\ <var:x2> = <var:F> ^ <nat:2> /\ <var:x3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:x1> = <var:F> /\ <var:x2> = <var:F> ^ <nat:2> /\ <var:x3> = <var:F> ^ <nat:3> /\ <var:x4> = <var:F> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:x1> = <var:F> /\ <var:x2> = <var:F> ^ <nat:2> /\ <var:x3> = <var:F> ^ <nat:3> /\ <var:x4> = <var:F> ^ <nat:4> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:x1> = <var:F> /\ <var:x2> = <nat:2> * <var:F> ^ <nat:2> /\ <var:x3> = <var:F> ^ <nat:3> /\ <var:x4> = <var:F> ^ <nat:4> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:x1> = <var:F> /\ <var:x2> = <nat:2> * <var:F> ^ <nat:2> /\ <var:x3> = <nat:3> * <var:F> ^ <nat:3> /\ <var:x4> = <var:F> ^ <nat:4> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:x1> = <var:F> /\ <var:x2> = <nat:2> * <var:F> ^ <nat:2> /\ <var:x3> = <nat:3> * <var:F> ^ <nat:3> /\ <var:x4> = <nat:4> * <var:F> ^ <nat:4> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:x1> = <var:F> /\ <var:x2> = <nat:2> * <var:F> ^ <nat:2> /\ <var:x3> = <nat:3> * <var:F> ^ <nat:3> /\ <var:x0> = <nat:4> /\ <var:z> = <nat:4> * <var:F> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:x1> = <var:F> /\ <var:x2> = <nat:2> * <var:F> ^ <nat:2> /\ <var:x0> = <nat:4> /\ <var:z> = <nat:4> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:x1> = <var:F> /\ <var:x0> = <nat:4> /\ <var:z> = <nat:4> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:F> /\ <var:z> = <nat:4> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 