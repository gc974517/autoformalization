\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:V1> := <var:g> ; <var:V2> := <var:V1> * <var:g> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:7> ; <var:V2> := <var:V2> * <nat:2> ; <var:t> := <var:V2> <var:t> := <var:t> + <var:V1> <var:t> := <var:t> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:g> = <var:u> $ ahead of evaluating this program , it holds that we see $ <var:t> = <nat:2> \times <var:u> ^ <nat:2> + <nat:7> \times <var:u> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for our list of commands can be shown with usual Hoare logic . Honing in on the subsequent line of code seen in the list of instructions , we have the variable update code binding $ <var:g> $ into $ <var:V1>$ . This transfers the precondition $ \{ <var:g> = <var:u> \} $ to $ \{ <var:g> = <var:u> \land <var:V1> = <var:u> \} $ . This is known to be sound by the assignment law defined by standard Hoare logic . Advancing to the next bit of code found in the list of commands , we have the variable update line yielding $ <var:V1> * <var:g> $ toward $ <var:V2>$ . This code advances the condition $ \{ <var:g> = <var:u> \land <var:V1> = <var:u> \} $ toward the condition $ \{ <var:g> = <var:u> \land <var:V1> = <var:u> \land <var:V2> = <var:u> ^ <nat:2> \} $ . This is rigorously given by the assignment rule defined by standard Hoare techniques . Observing the proceeding statement found in the series of commands , we have the assignment code defining $ <nat:1> $ into $ <var:V0>$ . This command moves $ \{ <var:g> = <var:u> \land <var:V1> = <var:u> \land <var:V2> = <var:u> ^ <nat:2> \} $ as $ \{ <var:g> = <var:u> \land <var:V1> = <var:u> \land <var:V2> = <var:u> ^ <nat:2> \land <var:V0> = <nat:1> \} $ . This is ensured by the assignment law given by usual Hoare techniques . Moving on , we have the line assigning $ <var:V1> * <nat:7> $ toward $ <var:V1>$ . This transfers $ \{ <var:g> = <var:u> \land <var:V1> = <var:u> \land <var:V2> = <var:u> ^ <nat:2> \land <var:V0> = <nat:1> \} $ as the condition $ \{ <var:g> = <var:u> \land <var:V1> = <nat:7> \cdot <var:u> \land <var:V2> = <var:u> ^ <nat:2> \land <var:V0> = <nat:1> \} $ . This is rigorously given through the assignment rule defined in typical Hoare reasoning . After , the binding line \verb | <var:V2> := <var:V2> * <nat:2> ; | . This command moves $ \{ <var:g> = <var:u> \land <var:V1> = <nat:7> \cdot <var:u> \land <var:V2> = <var:u> ^ <nat:2> \land <var:V0> = <nat:1> \} $ into the condition $ \{ <var:g> = <var:u> \land <var:V1> = <nat:7> \cdot <var:u> \land <var:V2> = <nat:2> \cdot <var:u> ^ <nat:2> \land <var:V0> = <nat:1> \} $ . Further , we see the assignment command \verb | <var:t> := <var:V2> | . This line redefines the condition $ \{ <var:g> = <var:u> \land <var:V1> = <nat:7> \cdot <var:u> \land <var:V2> = <nat:2> \cdot <var:u> ^ <nat:2> \land <var:V0> = <nat:1> \} $ as $ \{ <var:g> = <var:u> \land <var:V1> = <nat:7> \cdot <var:u> \land <var:V0> = <nat:1> \land <var:t> = <nat:2> \cdot <var:u> ^ <nat:2> \} $ . Advancing to the following line of code found in our series of instructions , the statement \verb | <var:t> := <var:t> + <var:V1> | . This line redefines the condition $ \{ <var:g> = <var:u> \land <var:V1> = <nat:7> \cdot <var:u> \land <var:V0> = <nat:1> \land <var:t> = <nat:2> \cdot <var:u> ^ <nat:2> \} $ as the postcondition $ \{ <var:g> = <var:u> \land <var:V0> = <nat:1> \land <var:t> = <nat:2> \cdot <var:u> ^ <nat:2> + <nat:7> \cdot <var:u> \} $ . This is sound using the assignment law obtained from Hoare logic . Honing in on the upcoming statement contained in our list of instructions , the variable binding code binding $ <var:t> + <var:V0$ as $ <var:t>$ . This forwards $ \{ <var:g> = <var:u> \land <var:V0> = <nat:1> \land <var:t> = <nat:2> \cdot <var:u> ^ <nat:2> + <nat:7> \cdot <var:u> \} $ toward $ \{ <var:g> = <var:u> \land <var:t> = <nat:2> \cdot <var:u> ^ <nat:2> + <nat:7> \cdot <var:u> + <nat:1> \} $ . This is guaranteed with the assignment inference rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V1> := <var:g> ; <var:V2> := <var:V1> * <var:g> ; <var:V0> := <nat:1> ; <var:V1> := <var:V1> * <nat:7> ; <var:V2> := <var:V2> * <nat:2> ; <var:t> := <var:V2> <var:t> := <var:t> + <var:V1> <var:t> := <var:t> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:g> = <var:u> }} <def:poly> {{ <var:t> = <nat:2> * <var:u> ^ <nat:2> + <nat:7> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:V1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:V1> = <var:u> /\ <var:V2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:V1> = <var:u> /\ <var:V2> = <var:u> ^ <nat:2> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:V1> = <nat:7> * <var:u> /\ <var:V2> = <var:u> ^ <nat:2> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:V1> = <nat:7> * <var:u> /\ <var:V2> = <nat:2> * <var:u> ^ <nat:2> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:V1> = <nat:7> * <var:u> /\ <var:V0> = <nat:1> /\ <var:t> = <nat:2> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:V0> = <nat:1> /\ <var:t> = <nat:2> * <var:u> ^ <nat:2> + <nat:7> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:u> /\ <var:t> = <nat:2> * <var:u> ^ <nat:2> + <nat:7> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 