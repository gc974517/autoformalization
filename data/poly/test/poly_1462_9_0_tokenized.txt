\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A0> := <nat:1> ; <var:A1> := <nat:2> ; <var:A1> := <var:A1> * <var:e> ; <var:A2> := <nat:3> ; <var:A2> := <var:A2> * <var:e> ; <var:A2> := <var:A2> * <var:e> ; <var:U> := <var:A2> ; <var:U> := <var:U> + <var:A1> ; <var:U> := <var:U> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:e> = <var:g> $ before running our segment of code , it must be that $ <var:U> = <nat:3> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:1> $ . \end{theorem} \begin{proof} The argument for this code is given using standard Hoare logic . Moving onward , the variable binding command \verb | <var:A0> := <nat:1> ; | . This takes the condition $ \{ <var:e> = <var:g> \} $ as $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \} $ . Focusing on the subsequent step contained in our set of instructions , the environment update line letting $ <nat:2> $ to $ <var:A1>$ . This transfers the precondition $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \} $ toward the condition $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:A1> = <nat:2> \} $ . This is known to be sound with the assignment rule given by Hoare techniques . Paying attention to the next command seen in our series of instructions , we see the assignment statement \verb | <var:A1> := <var:A1> * <var:e> ; | . This advances $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:A1> = <nat:2> \} $ into $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:A1> = <nat:2> \cdot <var:g> \} $ . Moving forward to the following line found in our list of commands , we have the variable update code yielding $ <nat:3> $ to $ <var:A2>$ . This advances $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:A1> = <nat:2> \cdot <var:g> \} $ to the postcondition $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:A1> = <nat:2> \cdot <var:g> \land <var:A2> = <nat:3> \} $ . Immediately following , the statement binding $ <var:A2> * <var:e> $ as $ <var:A2>$ . This advances $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:A1> = <nat:2> \cdot <var:g> \land <var:A2> = <nat:3> \} $ toward the postcondition $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:A1> = <nat:2> \cdot <var:g> \land <var:A2> = <nat:3> \cdot <var:g> \} $ . Jumping to the following statement contained in the list of commands , the binding command \verb | <var:A2> := <var:A2> * <var:e> ; | . This takes the precondition $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:A1> = <nat:2> \cdot <var:g> \land <var:A2> = <nat:3> \cdot <var:g> \} $ to $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:A1> = <nat:2> \cdot <var:g> \land <var:A2> = <nat:3> \cdot <var:g> ^ <nat:2> \} $ . Advancing on , we see the assignment statement giving $ <var:A2> $ into $ <var:U>$ . This statement moves the precondition $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:A1> = <nat:2> \cdot <var:g> \land <var:A2> = <nat:3> \cdot <var:g> ^ <nat:2> \} $ to $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:A1> = <nat:2> \cdot <var:g> \land <var:U> = <nat:3> \cdot <var:g> ^ <nat:2> \} $ . Paying attention to the proceeding piece of code in our set of commands , the binding statement letting $ <var:U> + <var:A1> $ as $ <var:U>$ . This transfers $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:A1> = <nat:2> \cdot <var:g> \land <var:U> = <nat:3> \cdot <var:g> ^ <nat:2> \} $ toward the postcondition $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:U> = <nat:3> \cdot <var:g> ^ <nat:2> + <nat:2> \cdot <var:g> \} $ . This is sound with the assignment inference rule in Hoare techniques . Moving forward to the proceeding bit of code seen in the code , the assignment code binding $ <var:U> + <var:A0$ as $ <var:U>$ . This line forwards $ \{ <var:e> = <var:g> \land <var:A0> = <nat:1> \land <var:U> = <nat:3> \cdot <var:g> ^ <nat:2> + <nat:2> \cdot <var:g> \} $ to the postcondition $ \{ <var:e> = <var:g> \land <var:U> = <nat:3> \cdot <var:g> ^ <nat:2> + <nat:2> \cdot <var:g> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <def:poly> := <var:A0> := <nat:1> ; <var:A1> := <nat:2> ; <var:A1> := <var:A1> * <var:e> ; <var:A2> := <nat:3> ; <var:A2> := <var:A2> * <var:e> ; <var:A2> := <var:A2> * <var:e> ; <var:U> := <var:A2> ; <var:U> := <var:U> + <var:A1> ; <var:U> := <var:U> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:e> = <var:g> }} <def:poly> {{ <var:U> = <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:2> * <var:g> /\ <var:A2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:2> * <var:g> /\ <var:A2> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:2> * <var:g> /\ <var:A2> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:A0> = <nat:1> /\ <var:A1> = <nat:2> * <var:g> /\ <var:U> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:A0> = <nat:1> /\ <var:U> = <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:U> = <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 