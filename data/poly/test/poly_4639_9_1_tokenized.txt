\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:q1> := <var:b> ; <var:q2> := <var:q1> * <var:b> ; <var:q3> := <var:q2> * <var:b> ; <var:q0> := <nat:1> ; <var:q2> := <var:q2> * <nat:6> ; <var:q3> := <var:q3> * <nat:7> ; <var:g> := <var:q3> <var:g> := <var:g> + <var:q2> <var:g> := <var:g> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Define the following code <def:poly> in \emph{Imp} . Given ( given all positive integers $ <var:N> $ ) that we have $ <var:b> = <var:N> $ ahead of evaluating this set of commands it follows that $ <var:g> = <nat:7> \times <var:N> ^ <nat:3> + <nat:6> \times <var:N> ^ <nat:2> + <nat:1> $ after program has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:N> \} \\ <var:q1> := <var:b> ; \\ \{ <var:b> = <var:N> \land <var:q1> = <var:N> \} \\ <var:q2> := <var:q1> * <var:b> ; \\ \{ <var:b> = <var:N> \land <var:q1> = <var:N> \land <var:q2> = <var:N> ^ <nat:2> \} \\ <var:q3> := <var:q2> * <var:b> ; \\ \{ <var:b> = <var:N> \land <var:q1> = <var:N> \land <var:q2> = <var:N> ^ <nat:2> \land <var:q3> = <var:N> ^ <nat:3> \} \\ <var:q0> := <nat:1> ; \\ \{ <var:b> = <var:N> \land <var:q1> = <var:N> \land <var:q2> = <var:N> ^ <nat:2> \land <var:q3> = <var:N> ^ <nat:3> \land <var:q0> = <nat:1> \} \\ <var:q2> := <var:q2> * <nat:6> ; \\ \{ <var:b> = <var:N> \land <var:q1> = <var:N> \land <var:q2> = <nat:6> \cdot <var:N> ^ <nat:2> \land <var:q3> = <var:N> ^ <nat:3> \land <var:q0> = <nat:1> \} \\ <var:q3> := <var:q3> * <nat:7> ; \\ \{ <var:b> = <var:N> \land <var:q1> = <var:N> \land <var:q2> = <nat:6> \cdot <var:N> ^ <nat:2> \land <var:q3> = <nat:7> \cdot <var:N> ^ <nat:3> \land <var:q0> = <nat:1> \} \\ <var:g> := <var:q3> \\ \{ <var:b> = <var:N> \land <var:q1> = <var:N> \land <var:q2> = <nat:6> \cdot <var:N> ^ <nat:2> \land <var:q0> = <nat:1> \land <var:g> = <nat:7> \cdot <var:N> ^ <nat:3> \} \\ <var:g> := <var:g> + <var:q2> \\ \{ <var:b> = <var:N> \land <var:q1> = <var:N> \land <var:q0> = <nat:1> \land <var:g> = <nat:7> \cdot <var:N> ^ <nat:3> + <nat:6> \cdot <var:N> ^ <nat:2> \} \\ <var:g> := <var:g> + <var:q0> \\ \{ <var:b> = <var:N> \land <var:g> = <nat:7> \cdot <var:N> ^ <nat:3> + <nat:6> \cdot <var:N> ^ <nat:2> + <nat:1> \} \end{eqnarray} Applying usual Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <def:poly> := <var:q1> := <var:b> ; <var:q2> := <var:q1> * <var:b> ; <var:q3> := <var:q2> * <var:b> ; <var:q0> := <nat:1> ; <var:q2> := <var:q2> * <nat:6> ; <var:q3> := <var:q3> * <nat:7> ; <var:g> := <var:q3> <var:g> := <var:g> + <var:q2> <var:g> := <var:g> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:b> = <var:N> }} <def:poly> {{ <var:g> = <nat:7> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:q1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:q1> = <var:N> /\ <var:q2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:q1> = <var:N> /\ <var:q2> = <var:N> ^ <nat:2> /\ <var:q3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:q1> = <var:N> /\ <var:q2> = <var:N> ^ <nat:2> /\ <var:q3> = <var:N> ^ <nat:3> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:q1> = <var:N> /\ <var:q2> = <nat:6> * <var:N> ^ <nat:2> /\ <var:q3> = <var:N> ^ <nat:3> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:q1> = <var:N> /\ <var:q2> = <nat:6> * <var:N> ^ <nat:2> /\ <var:q3> = <nat:7> * <var:N> ^ <nat:3> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:q1> = <var:N> /\ <var:q2> = <nat:6> * <var:N> ^ <nat:2> /\ <var:q0> = <nat:1> /\ <var:g> = <nat:7> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:q1> = <var:N> /\ <var:q0> = <nat:1> /\ <var:g> = <nat:7> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:N> /\ <var:g> = <nat:7> * <var:N> ^ <nat:3> + <nat:6> * <var:N> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 