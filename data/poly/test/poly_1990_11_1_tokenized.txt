\begin{document} \begin{theorem} We define the following list of commands in \emph{Imp} : \begin{verbatim} <var:L1> := <var:O> ; <var:L2> := <var:L1> * <var:O> ; <var:L3> := <var:L2> * <var:O> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:2> ; <var:L2> := <var:L2> * <nat:3> ; <var:L3> := <var:L3> * <nat:4> ; <var:m> := <var:L3> <var:m> := <var:m> + <var:L2> <var:m> := <var:m> + <var:L1> <var:m> := <var:m> + <var:L0> \end{verbatim} Allowing given positive integers $ <var:S> $ it to be that $ <var:O> = <var:S> $ ahead of running the set of commands , it holds that we have $ <var:m> = <nat:4> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> + <nat:3> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our program is shown using Hoare reasoning . Immediately following , \begin{eqnarray} \{ <var:O> = <var:S> \} \, <var:L1> := <var:O> \, \{ <var:O> = <var:S> \land <var:L1> = <var:S> \} \\ \{ <var:O> = <var:S> \land <var:L1> = <var:S> \} \, <var:L2> := <var:L1> * <var:O> \, \{ <var:O> = <var:S> \land <var:L1> = <var:S> \land <var:L2> = <var:S> ^ <nat:2> \} \\ \{ <var:O> = <var:S> \land <var:L1> = <var:S> \land <var:L2> = <var:S> ^ <nat:2> \} \, <var:L3> := <var:L2> * <var:O> \, \{ <var:O> = <var:S> \land <var:L1> = <var:S> \land <var:L2> = <var:S> ^ <nat:2> \land <var:L3> = <var:S> ^ <nat:3> \} \\ \{ <var:O> = <var:S> \land <var:L1> = <var:S> \land <var:L2> = <var:S> ^ <nat:2> \land <var:L3> = <var:S> ^ <nat:3> \} \, <var:L0> := <nat:3> \, \{ <var:O> = <var:S> \land <var:L1> = <var:S> \land <var:L2> = <var:S> ^ <nat:2> \land <var:L3> = <var:S> ^ <nat:3> \land <var:L0> = <nat:3> \} \\ \{ <var:O> = <var:S> \land <var:L1> = <var:S> \land <var:L2> = <var:S> ^ <nat:2> \land <var:L3> = <var:S> ^ <nat:3> \land <var:L0> = <nat:3> \} \, <var:L1> := <var:L1> * <nat:2> \, \{ <var:O> = <var:S> \land <var:L1> = <nat:2> \times <var:S> \land <var:L2> = <var:S> ^ <nat:2> \land <var:L3> = <var:S> ^ <nat:3> \land <var:L0> = <nat:3> \} \\ \{ <var:O> = <var:S> \land <var:L1> = <nat:2> \times <var:S> \land <var:L2> = <var:S> ^ <nat:2> \land <var:L3> = <var:S> ^ <nat:3> \land <var:L0> = <nat:3> \} \, <var:L2> := <var:L2> * <nat:3> \, \{ <var:O> = <var:S> \land <var:L1> = <nat:2> \times <var:S> \land <var:L2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:L3> = <var:S> ^ <nat:3> \land <var:L0> = <nat:3> \} \\ \{ <var:O> = <var:S> \land <var:L1> = <nat:2> \times <var:S> \land <var:L2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:L3> = <var:S> ^ <nat:3> \land <var:L0> = <nat:3> \} \, <var:L3> := <var:L3> * <nat:4> \, \{ <var:O> = <var:S> \land <var:L1> = <nat:2> \times <var:S> \land <var:L2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:L3> = <nat:4> \times <var:S> ^ <nat:3> \land <var:L0> = <nat:3> \} \\ \{ <var:O> = <var:S> \land <var:L1> = <nat:2> \times <var:S> \land <var:L2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:L3> = <nat:4> \times <var:S> ^ <nat:3> \land <var:L0> = <nat:3> \} \, <var:m> := <var:L3\, \{ <var:O> = <var:S> \land <var:L1> = <nat:2> \times <var:S> \land <var:L2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:L0> = <nat:3> \land <var:m> = <nat:4> \times <var:S> ^ <nat:3> \} \\ \{ <var:O> = <var:S> \land <var:L1> = <nat:2> \times <var:S> \land <var:L2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:L0> = <nat:3> \land <var:m> = <nat:4> \times <var:S> ^ <nat:3> \} \, <var:m> := <var:m> + <var:L2\, \{ <var:O> = <var:S> \land <var:L1> = <nat:2> \times <var:S> \land <var:L0> = <nat:3> \land <var:m> = <nat:4> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> \} \\ \{ <var:O> = <var:S> \land <var:L1> = <nat:2> \times <var:S> \land <var:L0> = <nat:3> \land <var:m> = <nat:4> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> \} \, <var:m> := <var:m> + <var:L1\, \{ <var:O> = <var:S> \land <var:L0> = <nat:3> \land <var:m> = <nat:4> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> \} \end{eqnarray} This is ensured using the variable update law defined in typical Hoare reasoning . Further , we have \begin{eqnarray} \{ <var:O> = <var:S> \} \, <var:L1> := <var:O> \, \{ <var:O> = <var:S> \land <var:L1> = <var:S> \} \end{eqnarray} This is known to be sound using the environment update scheme defined by typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:O> = <var:S> }} <var:L1> := <var:O> ; <var:L2> := <var:L1> * <var:O> ; <var:L3> := <var:L2> * <var:O> ; <var:L0> := <nat:3> ; <var:L1> := <var:L1> * <nat:2> ; <var:L2> := <var:L2> * <nat:3> ; <var:L3> := <var:L3> * <nat:4> ; <var:m> := <var:L3> <var:m> := <var:m> + <var:L2> <var:m> := <var:m> + <var:L1> <var:m> := <var:m> + <var:L0> {{ <var:m> = <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:L1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:L1> = <var:S> /\ <var:L2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:L1> = <var:S> /\ <var:L2> = <var:S> ^ <nat:2> /\ <var:L3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:L1> = <var:S> /\ <var:L2> = <var:S> ^ <nat:2> /\ <var:L3> = <var:S> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:L1> = <nat:2> * <var:S> /\ <var:L2> = <var:S> ^ <nat:2> /\ <var:L3> = <var:S> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:L1> = <nat:2> * <var:S> /\ <var:L2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:L3> = <var:S> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:L1> = <nat:2> * <var:S> /\ <var:L2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:L3> = <nat:4> * <var:S> ^ <nat:3> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:L1> = <nat:2> * <var:S> /\ <var:L2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:L0> = <nat:3> /\ <var:m> = <nat:4> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:L1> = <nat:2> * <var:S> /\ <var:L0> = <nat:3> /\ <var:m> = <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:L0> = <nat:3> /\ <var:m> = <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:2> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:S> /\ <var:m> = <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 