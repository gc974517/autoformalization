\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:7> ; <var:P> := <var:S0> \end{verbatim} Allow $ <var:v> = <var:U> $ before executing our segment of code , it holds that we see $ <var:P> = <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:U> \} \\ <var:S0> := <nat:7> ; \\ \{ <var:v> = <var:U> \land <var:S0> = <nat:7> \} \\ <var:P> := <var:S0> \\ \{ <var:v> = <var:U> \land <var:P> = <nat:7> \} \end{eqnarray} Utilizing Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:v> = <var:U> }} <var:S0> := <nat:7> ; <var:P> := <var:S0> {{ <var:P> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:S0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:U> /\ <var:P> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 