\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:9> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:N> ; <var:R3> := <nat:7> ; <var:R3> := <var:R3> * <var:N> ; <var:R3> := <var:R3> * <var:N> ; <var:R3> := <var:R3> * <var:N> ; <var:D> := <var:R3> ; <var:D> := <var:D> + <var:R1> ; <var:D> := <var:D> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> in \emph{Imp} . Allowing that $ <var:N> = <var:b> $ , given positive integers $ <var:b> $ , ahead of running this set of instructions , it follows that $ <var:D> = <nat:7> \cdot <var:b> ^ <nat:3> + <nat:9> \cdot <var:b> + <nat:9> $ when program has finished executing . \end{theorem} \begin{proof} The way to prove correctness for our program can be given with standard Hoare logic . Advancing to the next step , we have the environment update statement \verb | <var:R0> := <nat:9> ; | . This line forwards the precondition $ \{ <var:N> = <var:b> \} $ toward $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \} $ . This is given by the assignment inference rule defined in standard Hoare techniques . Advancing , we see the variable update command \verb | <var:R1> := <nat:9> ; | . This code forwards $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \} $ toward the postcondition $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \} $ . Taking another step toward the upcoming piece of code found in the series of instructions , we have the binding statement \verb | <var:R1> := <var:R1> * <var:N> ; | . This takes the precondition $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \} $ into $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \times <var:b> \} $ . Advancing , the assignment command letting $ <nat:7> $ as $ <var:R3>$ . This code advances the precondition $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \times <var:b> \} $ to the condition $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \times <var:b> \land <var:R3> = <nat:7> \} $ . Moving on to the next step , the assignment code binding $ <var:R3> * <var:N> $ to $ <var:R3>$ . This command redefines the precondition $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \times <var:b> \land <var:R3> = <nat:7> \} $ into the postcondition $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \times <var:b> \land <var:R3> = <nat:7> \times <var:b> \} $ . Keeping momentum , we see the variable binding line letting $ <var:R3> * <var:N> $ as $ <var:R3>$ . This takes the precondition $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \times <var:b> \land <var:R3> = <nat:7> \times <var:b> \} $ into the postcondition $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \times <var:b> \land <var:R3> = <nat:7> \times <var:b> ^ <nat:2> \} $ . This is ensured through the assignment scheme obtained from typical Hoare techniques . Paying attention to the proceeding bit of code in the code , we see the binding statement binding $ <var:R3> * <var:N> $ to $ <var:R3>$ . This transfers the condition $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \times <var:b> \land <var:R3> = <nat:7> \times <var:b> ^ <nat:2> \} $ to the condition $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \times <var:b> \land <var:R3> = <nat:7> \times <var:b> ^ <nat:3> \} $ . This is rigorously given through the assignment rule given by usual Hoare techniques . Looking at the next line of code seen in the code , we have the binding code yielding $ <var:R3> $ as $ <var:D>$ . This code forwards $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \times <var:b> \land <var:R3> = <nat:7> \times <var:b> ^ <nat:3> \} $ as $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \times <var:b> \land <var:D> = <nat:7> \times <var:b> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment rule defined by standard Hoare reasoning . Considering the upcoming statement seen in our set of instructions , we have the environment update command letting $ <var:D> + <var:R1> $ toward $ <var:D>$ . This takes the precondition $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:R1> = <nat:9> \times <var:b> \land <var:D> = <nat:7> \times <var:b> ^ <nat:3> \} $ toward $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:D> = <nat:7> \times <var:b> ^ <nat:3> + <nat:9> \times <var:b> \} $ . This is ensured by the assignment rule given in typical Hoare logic . Considering the subsequent step contained in the code , we have the line binding $ <var:D> + <var:R0$ as $ <var:D>$ . This code advances the precondition $ \{ <var:N> = <var:b> \land <var:R0> = <nat:9> \land <var:D> = <nat:7> \times <var:b> ^ <nat:3> + <nat:9> \times <var:b> \} $ to the condition $ \{ <var:N> = <var:b> \land <var:D> = <nat:7> \times <var:b> ^ <nat:3> + <nat:9> \times <var:b> + <nat:9> \} $ . This is guaranteed using the assignment rule found in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R0> := <nat:9> ; <var:R1> := <nat:9> ; <var:R1> := <var:R1> * <var:N> ; <var:R3> := <nat:7> ; <var:R3> := <var:R3> * <var:N> ; <var:R3> := <var:R3> * <var:N> ; <var:R3> := <var:R3> * <var:N> ; <var:D> := <var:R3> ; <var:D> := <var:D> + <var:R1> ; <var:D> := <var:D> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:N> = <var:b> }} <def:poly> {{ <var:D> = <nat:7> * <var:b> ^ <nat:3> + <nat:9> * <var:b> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:R0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:9> * <var:b> /\ <var:R3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:9> * <var:b> /\ <var:R3> = <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:9> * <var:b> /\ <var:R3> = <nat:7> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:9> * <var:b> /\ <var:R3> = <nat:7> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:R0> = <nat:9> /\ <var:R1> = <nat:9> * <var:b> /\ <var:D> = <nat:7> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:R0> = <nat:9> /\ <var:D> = <nat:7> * <var:b> ^ <nat:3> + <nat:9> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:b> /\ <var:D> = <nat:7> * <var:b> ^ <nat:3> + <nat:9> * <var:b> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 