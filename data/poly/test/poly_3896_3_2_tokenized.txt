\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:J> := <nat:2> ; <var:J> := <nat:3> + <var:J> * <var:I> ; <var:J> := <nat:3> + <var:J> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> . Assuming it to be that $ <var:I> = <var:N> $ --- given all positive numbers $ <var:N> $ --- before interpreting this series of instructions , it holds that we have $ <var:J> = <nat:2> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:3> $ once segment of code is done . \end{theorem} \begin{proof} Applying standard Hoare reasoning yields : \begin{eqnarray} \{ <var:I> = <var:N> \} \\ <var:J> := <nat:2> ; \\ \{ <var:I> = <var:N> \land <var:J> = <nat:2> \} \\ <var:J> := <nat:3> + <var:J> * <var:I> ; \\ \{ <var:I> = <var:N> \land <var:J> = <nat:2> \cdot <var:N> + <nat:3> \} \\ <var:J> := <nat:3> + <var:J> * <var:I> \\ \{ <var:I> = <var:N> \land <var:J> = <nat:2> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:3> \} \end{eqnarray} As a result , this list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:J> := <nat:2> ; <var:J> := <nat:3> + <var:J> * <var:I> ; <var:J> := <nat:3> + <var:J> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:I> = <var:N> }} <def:poly> {{ <var:J> = <nat:2> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:J> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:J> = <nat:2> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:N> /\ <var:J> = <nat:2> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 