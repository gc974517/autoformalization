\begin{document} \begin{definition} We define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:k> := <nat:3> ; <var:k> := <nat:3> + <var:k> * <var:h> ; <var:k> := <var:k> * <var:h> ; <var:k> := <nat:4> + <var:k> * <var:h> ; <var:k> := <nat:4> + <var:k> * <var:h> ; <var:k> := <nat:2> + <var:k> * <var:h> ; <var:k> := <nat:3> + <var:k> * <var:h> ; <var:k> := <nat:3> + <var:k> * <var:h> ; <var:k> := <var:k> * <var:h> ; <var:k> := <nat:2> + <var:k> * <var:h> ; <var:k> := <nat:1> + <var:k> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:h> = <var:n> $ ahead of interpreting our series of instructions it holds that $ <var:k> = <nat:3> \cdot <var:n> ^ <nat:10> + <nat:3> \cdot <var:n> ^ <nat:9> + <nat:4> \cdot <var:n> ^ <nat:7> + <nat:4> \cdot <var:n> ^ <nat:6> + <nat:2> \cdot <var:n> ^ <nat:5> + <nat:3> \cdot <var:n> ^ <nat:4> + <nat:3> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> + <nat:1> $ . \end{theorem} \begin{proof} The argument for this set of commands can be done using this decorated code segment . \begin{eqnarray} \{ <var:h> = <var:n> \} \\ <var:k> := <nat:3> ; \\ \{ <var:h> = <var:n> \land <var:k> = <nat:3> \} \\ <var:k> := <nat:3> + <var:k> * <var:h> ; \\ \{ <var:h> = <var:n> \land <var:k> = <nat:3> \times <var:n> + <nat:3> \} \\ <var:k> := <var:k> * <var:h> ; \\ \{ <var:h> = <var:n> \land <var:k> = <nat:3> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + \} \\ <var:k> := <nat:4> + <var:k> * <var:h> ; \\ \{ <var:h> = <var:n> \land <var:k> = <nat:3> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:4> \} \\ <var:k> := <nat:4> + <var:k> * <var:h> ; \\ \{ <var:h> = <var:n> \land <var:k> = <nat:3> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> + <nat:4> \} \\ <var:k> := <nat:2> + <var:k> * <var:h> ; \\ \{ <var:h> = <var:n> \land <var:k> = <nat:3> \times <var:n> ^ <nat:5> + <nat:3> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:2> + <nat:4> \times <var:n> + <nat:2> \} \\ <var:k> := <nat:3> + <var:k> * <var:h> ; \\ \{ <var:h> = <var:n> \land <var:k> = <nat:3> \times <var:n> ^ <nat:6> + <nat:3> \times <var:n> ^ <nat:5> + <nat:4> \times <var:n> ^ <nat:3> + <nat:4> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:3> \} \\ <var:k> := <nat:3> + <var:k> * <var:h> ; \\ \{ <var:h> = <var:n> \land <var:k> = <nat:3> \times <var:n> ^ <nat:7> + <nat:3> \times <var:n> ^ <nat:6> + <nat:4> \times <var:n> ^ <nat:4> + <nat:4> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + <nat:3> \} \\ <var:k> := <var:k> * <var:h> ; \\ \{ <var:h> = <var:n> \land <var:k> = <nat:3> \times <var:n> ^ <nat:8> + <nat:3> \times <var:n> ^ <nat:7> + <nat:4> \times <var:n> ^ <nat:5> + <nat:4> \times <var:n> ^ <nat:4> + <nat:2> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:3> \times <var:n> + \} \\ <var:k> := <nat:2> + <var:k> * <var:h> ; \\ \{ <var:h> = <var:n> \land <var:k> = <nat:3> \times <var:n> ^ <nat:9> + <nat:3> \times <var:n> ^ <nat:8> + <nat:4> \times <var:n> ^ <nat:6> + <nat:4> \times <var:n> ^ <nat:5> + <nat:2> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:3> + <nat:3> \times <var:n> ^ <nat:2> + <nat:2> \} \\ <var:k> := <nat:1> + <var:k> * <var:h> \\ \{ <var:h> = <var:n> \land <var:k> = <nat:3> \times <var:n> ^ <nat:10> + <nat:3> \times <var:n> ^ <nat:9> + <nat:4> \times <var:n> ^ <nat:7> + <nat:4> \times <var:n> ^ <nat:6> + <nat:2> \times <var:n> ^ <nat:5> + <nat:3> \times <var:n> ^ <nat:4> + <nat:3> \times <var:n> ^ <nat:3> + <nat:2> \times <var:n> + <nat:1> \} \end{eqnarray} Applying usual Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:k> := <nat:3> ; <var:k> := <nat:3> + <var:k> * <var:h> ; <var:k> := <var:k> * <var:h> ; <var:k> := <nat:4> + <var:k> * <var:h> ; <var:k> := <nat:4> + <var:k> * <var:h> ; <var:k> := <nat:2> + <var:k> * <var:h> ; <var:k> := <nat:3> + <var:k> * <var:h> ; <var:k> := <nat:3> + <var:k> * <var:h> ; <var:k> := <var:k> * <var:h> ; <var:k> := <nat:2> + <var:k> * <var:h> ; <var:k> := <nat:1> + <var:k> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:h> = <var:n> }} <def:poly> {{ <var:k> = <nat:3> * <var:n> ^ <nat:10> + <nat:3> * <var:n> ^ <nat:9> + <nat:4> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:2> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:k> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:k> = <nat:3> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:k> = <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:k> = <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:k> = <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:4> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:k> = <nat:3> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:k> = <nat:3> * <var:n> ^ <nat:6> + <nat:3> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:3> + <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:k> = <nat:3> * <var:n> ^ <nat:7> + <nat:3> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:4> + <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:k> = <nat:3> * <var:n> ^ <nat:8> + <nat:3> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:5> + <nat:4> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:3> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:k> = <nat:3> * <var:n> ^ <nat:9> + <nat:3> * <var:n> ^ <nat:8> + <nat:4> * <var:n> ^ <nat:6> + <nat:4> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:3> * <var:n> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:n> /\ <var:k> = <nat:3> * <var:n> ^ <nat:10> + <nat:3> * <var:n> ^ <nat:9> + <nat:4> * <var:n> ^ <nat:7> + <nat:4> * <var:n> ^ <nat:6> + <nat:2> * <var:n> ^ <nat:5> + <nat:3> * <var:n> ^ <nat:4> + <nat:3> * <var:n> ^ <nat:3> + <nat:2> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 