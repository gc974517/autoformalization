\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:7> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:H> ; <var:y2> := <nat:5> ; <var:y2> := <var:y2> * <var:H> ; <var:y2> := <var:y2> * <var:H> ; <var:y3> := <nat:6> ; <var:y3> := <var:y3> * <var:H> ; <var:y3> := <var:y3> * <var:H> ; <var:y3> := <var:y3> * <var:H> ; <var:X> := <var:y3> ; <var:X> := <var:X> + <var:y2> ; <var:X> := <var:X> + <var:y1> ; <var:X> := <var:X> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:H> = <var:C> $ for $ <var:C> \in \mathbb{N} $ prior to the evaluation of our set of instructions , then we see $ <var:X> = <nat:6> \cdot <var:C> ^ <nat:3> + <nat:5> \cdot <var:C> ^ <nat:2> + <nat:8> \cdot <var:C> + <nat:7> $ . \end{theorem} \begin{proof} Using Hoare reasoning gives us : \begin{eqnarray} \{ <var:H> = <var:C> \} \\ <var:y0> := <nat:7> ; \\ \{ <var:H> = <var:C> \land <var:y0> = <nat:7> \} \\ <var:y1> := <nat:8> ; \\ \{ <var:H> = <var:C> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \} \\ <var:y1> := <var:y1> * <var:H> ; \\ \{ <var:H> = <var:C> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \cdot <var:C> \} \\ <var:y2> := <nat:5> ; \\ \{ <var:H> = <var:C> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \cdot <var:C> \land <var:y2> = <nat:5> \} \\ <var:y2> := <var:y2> * <var:H> ; \\ \{ <var:H> = <var:C> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \cdot <var:C> \land <var:y2> = <nat:5> \cdot <var:C> \} \\ <var:y2> := <var:y2> * <var:H> ; \\ \{ <var:H> = <var:C> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \cdot <var:C> \land <var:y2> = <nat:5> \cdot <var:C> ^ <nat:2> \} \\ <var:y3> := <nat:6> ; \\ \{ <var:H> = <var:C> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \cdot <var:C> \land <var:y2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:y3> = <nat:6> \} \\ <var:y3> := <var:y3> * <var:H> ; \\ \{ <var:H> = <var:C> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \cdot <var:C> \land <var:y2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:y3> = <nat:6> \cdot <var:C> \} \\ <var:y3> := <var:y3> * <var:H> ; \\ \{ <var:H> = <var:C> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \cdot <var:C> \land <var:y2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:y3> = <nat:6> \cdot <var:C> ^ <nat:2> \} \\ <var:y3> := <var:y3> * <var:H> ; \\ \{ <var:H> = <var:C> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \cdot <var:C> \land <var:y2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:y3> = <nat:6> \cdot <var:C> ^ <nat:3> \} \\ <var:X> := <var:y3> ; \\ \{ <var:H> = <var:C> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \cdot <var:C> \land <var:y2> = <nat:5> \cdot <var:C> ^ <nat:2> \land <var:X> = <nat:6> \cdot <var:C> ^ <nat:3> \} \\ <var:X> := <var:X> + <var:y2> ; \\ \{ <var:H> = <var:C> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \cdot <var:C> \land <var:X> = <nat:6> \cdot <var:C> ^ <nat:3> + <nat:5> \cdot <var:C> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:y1> ; \\ \{ <var:H> = <var:C> \land <var:y0> = <nat:7> \land <var:X> = <nat:6> \cdot <var:C> ^ <nat:3> + <nat:5> \cdot <var:C> ^ <nat:2> + <nat:8> \cdot <var:C> \} \\ <var:X> := <var:X> + <var:y0> \\ \{ <var:H> = <var:C> \land <var:X> = <nat:6> \cdot <var:C> ^ <nat:3> + <nat:5> \cdot <var:C> ^ <nat:2> + <nat:8> \cdot <var:C> + <nat:7> \} \end{eqnarray} Considering the above , the list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y0> := <nat:7> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:H> ; <var:y2> := <nat:5> ; <var:y2> := <var:y2> * <var:H> ; <var:y2> := <var:y2> * <var:H> ; <var:y3> := <nat:6> ; <var:y3> := <var:y3> * <var:H> ; <var:y3> := <var:y3> * <var:H> ; <var:y3> := <var:y3> * <var:H> ; <var:X> := <var:y3> ; <var:X> := <var:X> + <var:y2> ; <var:X> := <var:X> + <var:y1> ; <var:X> := <var:X> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:H> = <var:C> }} <def:poly> {{ <var:X> = <nat:6> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:8> * <var:C> /\ <var:y2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:8> * <var:C> /\ <var:y2> = <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:8> * <var:C> /\ <var:y2> = <nat:5> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:8> * <var:C> /\ <var:y2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:y3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:8> * <var:C> /\ <var:y2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:y3> = <nat:6> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:8> * <var:C> /\ <var:y2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:y3> = <nat:6> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:8> * <var:C> /\ <var:y2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:y3> = <nat:6> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:8> * <var:C> /\ <var:y2> = <nat:5> * <var:C> ^ <nat:2> /\ <var:X> = <nat:6> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:8> * <var:C> /\ <var:X> = <nat:6> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:y0> = <nat:7> /\ <var:X> = <nat:6> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> + <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:C> /\ <var:X> = <nat:6> * <var:C> ^ <nat:3> + <nat:5> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 