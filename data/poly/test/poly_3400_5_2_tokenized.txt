\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:r> := <nat:4> ; <var:r> := <var:r> * <var:z> ; <var:r> := <nat:1> + <var:r> * <var:z> ; <var:r> := <nat:4> + <var:r> * <var:z> ; <var:r> := <nat:1> + <var:r> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:z> = <var:J> $ prior to evaluating our list of instructions , it holds that we have $ <var:r> = <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:J> \} \\ <var:r> := <nat:4> ; \\ \{ <var:z> = <var:J> \land <var:r> = <nat:4> \} \\ <var:r> := <var:r> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:r> = <nat:4> * <var:J> + \} \\ <var:r> := <nat:1> + <var:r> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:r> = <nat:4> * <var:J> ^ <nat:2> + <nat:1> \} \\ <var:r> := <nat:4> + <var:r> * <var:z> ; \\ \{ <var:z> = <var:J> \land <var:r> = <nat:4> * <var:J> ^ <nat:3> + <nat:1> * <var:J> + <nat:4> \} \\ <var:r> := <nat:1> + <var:r> * <var:z> \\ \{ <var:z> = <var:J> \land <var:r> = <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:1> \} \end{eqnarray} Applying usual Hoare logic solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:r> := <nat:4> ; <var:r> := <var:r> * <var:z> ; <var:r> := <nat:1> + <var:r> * <var:z> ; <var:r> := <nat:4> + <var:r> * <var:z> ; <var:r> := <nat:1> + <var:r> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:z> = <var:J> }} <def:poly> {{ <var:r> = <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:r> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:r> = <nat:4> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:r> = <nat:4> * <var:J> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:r> = <nat:4> * <var:J> ^ <nat:3> + <nat:1> * <var:J> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:r> = <nat:4> * <var:J> ^ <nat:4> + <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 