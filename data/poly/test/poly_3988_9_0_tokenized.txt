\begin{document} \begin{theorem} We define a code such that \begin{verbatim} <var:x0> := <nat:1> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:X> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:X> ; <var:x2> := <var:x2> * <var:X> ; <var:U> := <var:x2> ; <var:U> := <var:U> + <var:x1> ; <var:U> := <var:U> + <var:x0> \end{verbatim} Assuming it to hold that $ <var:X> = <var:C> $ --- with some $ <var:C> \in \mathbb{N} $ --- prior to executing the series of commands , it follows that we see $ <var:U> = <nat:4> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic produces : \begin{eqnarray} \{ <var:X> = <var:C> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:X> = <var:C> \land <var:x0> = <nat:1> \} \\ <var:x1> := <nat:1> ; \\ \{ <var:X> = <var:C> \land <var:x0> = <nat:1> \land <var:x1> = <nat:1> \} \\ <var:x1> := <var:x1> * <var:X> ; \\ \{ <var:X> = <var:C> \land <var:x0> = <nat:1> \land <var:x1> = <nat:1> \times <var:C> \} \\ <var:x2> := <nat:4> ; \\ \{ <var:X> = <var:C> \land <var:x0> = <nat:1> \land <var:x1> = <nat:1> \times <var:C> \land <var:x2> = <nat:4> \} \\ <var:x2> := <var:x2> * <var:X> ; \\ \{ <var:X> = <var:C> \land <var:x0> = <nat:1> \land <var:x1> = <nat:1> \times <var:C> \land <var:x2> = <nat:4> \times <var:C> \} \\ <var:x2> := <var:x2> * <var:X> ; \\ \{ <var:X> = <var:C> \land <var:x0> = <nat:1> \land <var:x1> = <nat:1> \times <var:C> \land <var:x2> = <nat:4> \times <var:C> ^ <nat:2> \} \\ <var:U> := <var:x2> ; \\ \{ <var:X> = <var:C> \land <var:x0> = <nat:1> \land <var:x1> = <nat:1> \times <var:C> \land <var:U> = <nat:4> \times <var:C> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:x1> ; \\ \{ <var:X> = <var:C> \land <var:x0> = <nat:1> \land <var:U> = <nat:4> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> \} \\ <var:U> := <var:U> + <var:x0> \\ \{ <var:X> = <var:C> \land <var:U> = <nat:4> \times <var:C> ^ <nat:2> + <nat:1> \times <var:C> + <nat:1> \} \end{eqnarray} As a result , the list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:X> = <var:C> }} <var:x0> := <nat:1> ; <var:x1> := <nat:1> ; <var:x1> := <var:x1> * <var:X> ; <var:x2> := <nat:4> ; <var:x2> := <var:x2> * <var:X> ; <var:x2> := <var:x2> * <var:X> ; <var:U> := <var:x2> ; <var:U> := <var:U> + <var:x1> ; <var:U> := <var:U> + <var:x0> {{ <var:U> = <nat:4> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:1> * <var:C> /\ <var:x2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:1> * <var:C> /\ <var:x2> = <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:1> * <var:C> /\ <var:x2> = <nat:4> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:x0> = <nat:1> /\ <var:x1> = <nat:1> * <var:C> /\ <var:U> = <nat:4> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:x0> = <nat:1> /\ <var:U> = <nat:4> * <var:C> ^ <nat:2> + <nat:1> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:C> /\ <var:U> = <nat:4> * <var:C> ^ <nat:2> + <nat:1> * <var:C> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 