\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:y1> := <var:H> ; <var:y2> := <var:y1> * <var:H> ; <var:y3> := <var:y2> * <var:H> ; <var:y4> := <var:y3> * <var:H> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:7> ; <var:y2> := <var:y2> * <nat:6> ; <var:y4> := <var:y4> * <nat:7> ; <var:a> := <var:y4> <var:a> := <var:a> + <var:y2> <var:a> := <var:a> + <var:y1> <var:a> := <var:a> + <var:y0> \end{verbatim} Assume that $ <var:H> = <var:S> $ before evaluating this code , it follows that we see $ <var:a> = <nat:7> \cdot <var:S> ^ <nat:4> + <nat:6> \cdot <var:S> ^ <nat:2> + <nat:7> \cdot <var:S> + <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code is done with this decorated code . \begin{eqnarray} \{ <var:H> = <var:S> \} \\ <var:y1> := <var:H> ; \\ \{ <var:H> = <var:S> \land <var:y1> = <var:S> \} \\ <var:y2> := <var:y1> * <var:H> ; \\ \{ <var:H> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \} \\ <var:y3> := <var:y2> * <var:H> ; \\ \{ <var:H> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \} \\ <var:y4> := <var:y3> * <var:H> ; \\ \{ <var:H> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y4> = <var:S> ^ <nat:4> \} \\ <var:y0> := <nat:1> ; \\ \{ <var:H> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y4> = <var:S> ^ <nat:4> \land <var:y0> = <nat:1> \} \\ <var:y1> := <var:y1> * <nat:7> ; \\ \{ <var:H> = <var:S> \land <var:y1> = <nat:7> \times <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y4> = <var:S> ^ <nat:4> \land <var:y0> = <nat:1> \} \\ <var:y2> := <var:y2> * <nat:6> ; \\ \{ <var:H> = <var:S> \land <var:y1> = <nat:7> \times <var:S> \land <var:y2> = <nat:6> \times <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y4> = <var:S> ^ <nat:4> \land <var:y0> = <nat:1> \} \\ <var:y4> := <var:y4> * <nat:7> ; \\ \{ <var:H> = <var:S> \land <var:y1> = <nat:7> \times <var:S> \land <var:y2> = <nat:6> \times <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y4> = <nat:7> \times <var:S> ^ <nat:4> \land <var:y0> = <nat:1> \} \\ <var:a> := <var:y4> \\ \{ <var:H> = <var:S> \land <var:y1> = <nat:7> \times <var:S> \land <var:y2> = <nat:6> \times <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y0> = <nat:1> \land <var:a> = <nat:7> \times <var:S> ^ <nat:4> \} \\ <var:a> := <var:a> + <var:y2> \\ \{ <var:H> = <var:S> \land <var:y1> = <nat:7> \times <var:S> \land <var:y0> = <nat:1> \land <var:a> = <nat:7> \times <var:S> ^ <nat:4> + <nat:6> \times <var:S> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:y1> \\ \{ <var:H> = <var:S> \land <var:y0> = <nat:1> \land <var:a> = <nat:7> \times <var:S> ^ <nat:4> + <nat:6> \times <var:S> ^ <nat:2> + <nat:7> \times <var:S> \} \\ <var:a> := <var:a> + <var:y0> \\ \{ <var:H> = <var:S> \land <var:a> = <nat:7> \times <var:S> ^ <nat:4> + <nat:6> \times <var:S> ^ <nat:2> + <nat:7> \times <var:S> + <nat:1> \} \end{eqnarray} Utilizing Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <var:y4> : string := " <var:y4> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:H> = <var:S> }} <var:y1> := <var:H> ; <var:y2> := <var:y1> * <var:H> ; <var:y3> := <var:y2> * <var:H> ; <var:y4> := <var:y3> * <var:H> ; <var:y0> := <nat:1> ; <var:y1> := <var:y1> * <nat:7> ; <var:y2> := <var:y2> * <nat:6> ; <var:y4> := <var:y4> * <nat:7> ; <var:a> := <var:y4> <var:a> := <var:a> + <var:y2> <var:a> := <var:a> + <var:y1> <var:a> := <var:a> + <var:y0> {{ <var:a> = <nat:7> * <var:S> ^ <nat:4> + <nat:6> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:y1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:y1> = <var:S> /\ <var:y2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:y1> = <var:S> /\ <var:y2> = <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:y1> = <var:S> /\ <var:y2> = <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> /\ <var:y4> = <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:y1> = <var:S> /\ <var:y2> = <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> /\ <var:y4> = <var:S> ^ <nat:4> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:y1> = <nat:7> * <var:S> /\ <var:y2> = <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> /\ <var:y4> = <var:S> ^ <nat:4> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:y1> = <nat:7> * <var:S> /\ <var:y2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> /\ <var:y4> = <var:S> ^ <nat:4> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:y1> = <nat:7> * <var:S> /\ <var:y2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> /\ <var:y4> = <nat:7> * <var:S> ^ <nat:4> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:y1> = <nat:7> * <var:S> /\ <var:y2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> /\ <var:y0> = <nat:1> /\ <var:a> = <nat:7> * <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:y1> = <nat:7> * <var:S> /\ <var:y0> = <nat:1> /\ <var:a> = <nat:7> * <var:S> ^ <nat:4> + <nat:6> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:y0> = <nat:1> /\ <var:a> = <nat:7> * <var:S> ^ <nat:4> + <nat:6> * <var:S> ^ <nat:2> + <nat:7> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:S> /\ <var:a> = <nat:7> * <var:S> ^ <nat:4> + <nat:6> * <var:S> ^ <nat:2> + <nat:7> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 