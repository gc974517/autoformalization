\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:g> := <nat:4> ; <var:g> := <nat:3> + <var:g> * <var:c> ; <var:g> := <var:g> * <var:c> ; <var:g> := <nat:4> + <var:g> * <var:c> ; <var:g> := <nat:4> + <var:g> * <var:c> ; <var:g> := <nat:4> + <var:g> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:c> = <var:i> $ for every $ <var:i> \in \mathbb{N} $ ahead of the evaluation of the set of commands it follows that we see $ <var:g> = <nat:4> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:i> \} \\ <var:g> := <nat:4> ; \\ \{ <var:c> = <var:i> \land <var:g> = <nat:4> \} \\ <var:g> := <nat:3> + <var:g> * <var:c> ; \\ \{ <var:c> = <var:i> \land <var:g> = <nat:4> \cdot <var:i> + <nat:3> \} \\ <var:g> := <var:g> * <var:c> ; \\ \{ <var:c> = <var:i> \land <var:g> = <nat:4> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + \} \\ <var:g> := <nat:4> + <var:g> * <var:c> ; \\ \{ <var:c> = <var:i> \land <var:g> = <nat:4> \cdot <var:i> ^ <nat:3> + <nat:3> \cdot <var:i> ^ <nat:2> + <nat:4> \} \\ <var:g> := <nat:4> + <var:g> * <var:c> ; \\ \{ <var:c> = <var:i> \land <var:g> = <nat:4> \cdot <var:i> ^ <nat:4> + <nat:3> \cdot <var:i> ^ <nat:3> + <nat:4> \cdot <var:i> + <nat:4> \} \\ <var:g> := <nat:4> + <var:g> * <var:c> \\ \{ <var:c> = <var:i> \land <var:g> = <nat:4> \cdot <var:i> ^ <nat:5> + <nat:3> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:4> \} \end{eqnarray} Using usual Hoare reasoning finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:4> ; <var:g> := <nat:3> + <var:g> * <var:c> ; <var:g> := <var:g> * <var:c> ; <var:g> := <nat:4> + <var:g> * <var:c> ; <var:g> := <nat:4> + <var:g> * <var:c> ; <var:g> := <nat:4> + <var:g> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:c> = <var:i> }} <def:poly> {{ <var:g> = <nat:4> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:g> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:g> = <nat:4> * <var:i> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:g> = <nat:4> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:g> = <nat:4> * <var:i> ^ <nat:3> + <nat:3> * <var:i> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:g> = <nat:4> * <var:i> ^ <nat:4> + <nat:3> * <var:i> ^ <nat:3> + <nat:4> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:i> /\ <var:g> = <nat:4> * <var:i> ^ <nat:5> + <nat:3> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 