\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R> := <nat:2> ; <var:R> := <nat:2> + <var:R> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:V> = <var:f> $ before running this list of commands , it holds that we see $ <var:R> = <nat:2> \cdot <var:f> + <nat:2> $ when set of instructions has exited . \end{theorem} \begin{proof} The flow of logic for our segment of code can be done through standard Hoare techniques . Advancing to the next step , we have \[ \begin{tabular} {rcl} \{ <var:V> = <var:f> \} & <var:R> := <nat:2> & \{ <var:V> = <var:f> \land <var:R> = <nat:2> \} \end{tabular} Advancing to the proceeding bit of code in our segment of code , we have \[ \begin{tabular} {rcl} \{ <var:V> = <var:f> \} & <var:R> := <nat:2> & \{ <var:V> = <var:f> \land <var:R> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:R> := <nat:2> ; <var:R> := <nat:2> + <var:R> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:V> = <var:f> }} <def:poly> {{ <var:R> = <nat:2> * <var:f> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:f> /\ <var:R> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:f> /\ <var:R> = <nat:2> * <var:f> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 