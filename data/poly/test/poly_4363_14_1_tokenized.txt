\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:I1> := <var:e> ; <var:I2> := <var:I1> * <var:e> ; <var:I3> := <var:I2> * <var:e> ; <var:I4> := <var:I3> * <var:e> ; <var:I0> := <nat:6> ; <var:I1> := <var:I1> * <nat:5> ; <var:I2> := <var:I2> * <nat:2> ; <var:I3> := <var:I3> * <nat:3> ; <var:I4> := <var:I4> * <nat:8> ; <var:R> := <var:I4> <var:R> := <var:R> + <var:I3> <var:R> := <var:R> + <var:I2> <var:R> := <var:R> + <var:I1> <var:R> := <var:R> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:e> = <var:Z> $ ( letting positive numbers $ <var:Z> $ ) prior to executing this program , it must be that we have $ <var:R> = <nat:8> \cdot <var:Z> ^ <nat:4> + <nat:3> \cdot <var:Z> ^ <nat:3> + <nat:2> \cdot <var:Z> ^ <nat:2> + <nat:5> \cdot <var:Z> + <nat:6> $ . \end{theorem} \begin{proof} The flow of logic for this series of instructions is given using typical Hoare reasoning . Shifting focus toward the proceeding bit of code seen in the segment of code , we have the line letting $ <var:e> $ into $ <var:I1>$ . This line transfers the precondition $ \{ <var:e> = <var:Z> \} $ into $ \{ <var:e> = <var:Z> \land <var:I1> = <var:Z> \} $ . This is rigorously given using the assignment inference rule of standard Hoare techniques . Focusing on the next line seen in our set of commands , we have the statement \verb | <var:I2> := <var:I1> * <var:e> ; | . This command moves $ \{ <var:e> = <var:Z> \land <var:I1> = <var:Z> \} $ to the condition $ \{ <var:e> = <var:Z> \land <var:I1> = <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \} $ . This is shown with the assignment law defined in Hoare reasoning . Moving forward to the next step , we see the statement \verb | <var:I3> := <var:I2> * <var:e> ; | . This forwards the condition $ \{ <var:e> = <var:Z> \land <var:I1> = <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \} $ to the condition $ \{ <var:e> = <var:Z> \land <var:I1> = <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \} $ . Moving forward to the next statement in our series of commands , we see the variable assignmet code \verb | <var:I4> := <var:I3> * <var:e> ; | . This takes $ \{ <var:e> = <var:Z> \land <var:I1> = <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \} $ to $ \{ <var:e> = <var:Z> \land <var:I1> = <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \land <var:I4> = <var:Z> ^ <nat:4> \} $ . Focusing on the upcoming line in our series of commands , the binding code \verb | <var:I0> := <nat:6> ; | . This takes the condition $ \{ <var:e> = <var:Z> \land <var:I1> = <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \land <var:I4> = <var:Z> ^ <nat:4> \} $ toward the postcondition $ \{ <var:e> = <var:Z> \land <var:I1> = <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \land <var:I4> = <var:Z> ^ <nat:4> \land <var:I0> = <nat:6> \} $ . This is rigorously given by the assignment law in typical Hoare logic . Moving forward to the proceeding piece of code in the list of instructions , we have the variable update command \verb | <var:I1> := <var:I1> * <nat:5> ; | . This line transfers the precondition $ \{ <var:e> = <var:Z> \land <var:I1> = <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \land <var:I4> = <var:Z> ^ <nat:4> \land <var:I0> = <nat:6> \} $ as $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \land <var:I4> = <var:Z> ^ <nat:4> \land <var:I0> = <nat:6> \} $ . This is shown to be logically sound using the assignment law in typical Hoare logic . Moving on to the next step , we see the variable binding statement \verb | <var:I2> := <var:I2> * <nat:2> ; | . This redefines $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I2> = <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \land <var:I4> = <var:Z> ^ <nat:4> \land <var:I0> = <nat:6> \} $ toward $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I2> = <nat:2> * <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \land <var:I4> = <var:Z> ^ <nat:4> \land <var:I0> = <nat:6> \} $ . Moving on , the code \verb | <var:I3> := <var:I3> * <nat:3> ; | . This line transfers $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I2> = <nat:2> * <var:Z> ^ <nat:2> \land <var:I3> = <var:Z> ^ <nat:3> \land <var:I4> = <var:Z> ^ <nat:4> \land <var:I0> = <nat:6> \} $ toward the condition $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I2> = <nat:2> * <var:Z> ^ <nat:2> \land <var:I3> = <nat:3> * <var:Z> ^ <nat:3> \land <var:I4> = <var:Z> ^ <nat:4> \land <var:I0> = <nat:6> \} $ . This is ensured through the assignment law defined by Hoare reasoning . Moving forward , we have the variable update code assigning $ <var:I4> * <nat:8> $ toward $ <var:I4>$ . This code transfers the precondition $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I2> = <nat:2> * <var:Z> ^ <nat:2> \land <var:I3> = <nat:3> * <var:Z> ^ <nat:3> \land <var:I4> = <var:Z> ^ <nat:4> \land <var:I0> = <nat:6> \} $ toward the condition $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I2> = <nat:2> * <var:Z> ^ <nat:2> \land <var:I3> = <nat:3> * <var:Z> ^ <nat:3> \land <var:I4> = <nat:8> * <var:Z> ^ <nat:4> \land <var:I0> = <nat:6> \} $ . This is guaranteed using the assignment law given in usual Hoare techniques . Moving onward , we have the variable update command \verb | <var:R> := <var:I4> | . This forwards the precondition $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I2> = <nat:2> * <var:Z> ^ <nat:2> \land <var:I3> = <nat:3> * <var:Z> ^ <nat:3> \land <var:I4> = <nat:8> * <var:Z> ^ <nat:4> \land <var:I0> = <nat:6> \} $ into the condition $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I2> = <nat:2> * <var:Z> ^ <nat:2> \land <var:I3> = <nat:3> * <var:Z> ^ <nat:3> \land <var:I0> = <nat:6> \land <var:R> = <nat:8> * <var:Z> ^ <nat:4> \} $ . Moving onward , we have the environment update code assigning $ <var:R> + <var:I3$ into $ <var:R>$ . This statement takes $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I2> = <nat:2> * <var:Z> ^ <nat:2> \land <var:I3> = <nat:3> * <var:Z> ^ <nat:3> \land <var:I0> = <nat:6> \land <var:R> = <nat:8> * <var:Z> ^ <nat:4> \} $ as the postcondition $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I2> = <nat:2> * <var:Z> ^ <nat:2> \land <var:I0> = <nat:6> \land <var:R> = <nat:8> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> \} $ . This is rigorously given by the assignment inference rule of usual Hoare reasoning . Advancing , we see the variable assignmet statement letting $ <var:R> + <var:I2$ into $ <var:R>$ . This statement advances $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I2> = <nat:2> * <var:Z> ^ <nat:2> \land <var:I0> = <nat:6> \land <var:R> = <nat:8> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> \} $ toward the postcondition $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I0> = <nat:6> \land <var:R> = <nat:8> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> \} $ . This is ensured using the assignment rule in typical Hoare techniques . Following , we see the statement assigning $ <var:R> + <var:I1$ into $ <var:R>$ . This command forwards the condition $ \{ <var:e> = <var:Z> \land <var:I1> = <nat:5> * <var:Z> \land <var:I0> = <nat:6> \land <var:R> = <nat:8> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> \} $ toward $ \{ <var:e> = <var:Z> \land <var:I0> = <nat:6> \land <var:R> = <nat:8> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> \} $ . This is deduced through the assignment rule given in usual Hoare reasoning . Taking another step toward the upcoming piece of code contained in our series of instructions , we see the variable assignmet statement defining $ <var:R> + <var:I0$ toward $ <var:R>$ . This line forwards the condition $ \{ <var:e> = <var:Z> \land <var:I0> = <nat:6> \land <var:R> = <nat:8> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> \} $ as $ \{ <var:e> = <var:Z> \land <var:R> = <nat:8> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:6> \} $ . This is given by the assignment inference rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <var:I4> : string := " <var:I4> " . Definition <def:poly> := <var:I1> := <var:e> ; <var:I2> := <var:I1> * <var:e> ; <var:I3> := <var:I2> * <var:e> ; <var:I4> := <var:I3> * <var:e> ; <var:I0> := <nat:6> ; <var:I1> := <var:I1> * <nat:5> ; <var:I2> := <var:I2> * <nat:2> ; <var:I3> := <var:I3> * <nat:3> ; <var:I4> := <var:I4> * <nat:8> ; <var:R> := <var:I4> <var:R> := <var:R> + <var:I3> <var:R> := <var:R> + <var:I2> <var:R> := <var:R> + <var:I1> <var:R> := <var:R> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:e> = <var:Z> }} <def:poly> {{ <var:R> = <nat:8> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:I1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:I1> = <var:Z> /\ <var:I2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:I1> = <var:Z> /\ <var:I2> = <var:Z> ^ <nat:2> /\ <var:I3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:I1> = <var:Z> /\ <var:I2> = <var:Z> ^ <nat:2> /\ <var:I3> = <var:Z> ^ <nat:3> /\ <var:I4> = <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:I1> = <var:Z> /\ <var:I2> = <var:Z> ^ <nat:2> /\ <var:I3> = <var:Z> ^ <nat:3> /\ <var:I4> = <var:Z> ^ <nat:4> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:I1> = <nat:5> * <var:Z> /\ <var:I2> = <var:Z> ^ <nat:2> /\ <var:I3> = <var:Z> ^ <nat:3> /\ <var:I4> = <var:Z> ^ <nat:4> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:I1> = <nat:5> * <var:Z> /\ <var:I2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:I3> = <var:Z> ^ <nat:3> /\ <var:I4> = <var:Z> ^ <nat:4> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:I1> = <nat:5> * <var:Z> /\ <var:I2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:I3> = <nat:3> * <var:Z> ^ <nat:3> /\ <var:I4> = <var:Z> ^ <nat:4> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:I1> = <nat:5> * <var:Z> /\ <var:I2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:I3> = <nat:3> * <var:Z> ^ <nat:3> /\ <var:I4> = <nat:8> * <var:Z> ^ <nat:4> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:I1> = <nat:5> * <var:Z> /\ <var:I2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:I3> = <nat:3> * <var:Z> ^ <nat:3> /\ <var:I0> = <nat:6> /\ <var:R> = <nat:8> * <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:I1> = <nat:5> * <var:Z> /\ <var:I2> = <nat:2> * <var:Z> ^ <nat:2> /\ <var:I0> = <nat:6> /\ <var:R> = <nat:8> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:I1> = <nat:5> * <var:Z> /\ <var:I0> = <nat:6> /\ <var:R> = <nat:8> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:I0> = <nat:6> /\ <var:R> = <nat:8> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:Z> /\ <var:R> = <nat:8> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:2> * <var:Z> ^ <nat:2> + <nat:5> * <var:Z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 