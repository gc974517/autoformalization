\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R1> := <var:v> ; <var:R2> := <var:R1> * <var:v> ; <var:R0> := <nat:5> ; <var:R1> := <var:R1> * <nat:4> ; <var:R2> := <var:R2> * <nat:4> ; <var:c> := <var:R2> <var:c> := <var:c> + <var:R1> <var:c> := <var:c> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:v> = <var:J> $ before evaluating the set of commands , it must be that $ <var:c> = <nat:4> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:5> $ . \end{theorem} \begin{proof} The proof of this series of instructions can be shown by standard Hoare techniques . Immediately after , we see \verb | { <var:v> = <var:J> } <var:R1> := <var:v> { <var:v> = <var:J> \land <var:R1> = <var:J> } | and \verb | { <var:v> = <var:J> \land <var:R1> = <var:J> } <var:R2> := <var:R1> * <var:v> { <var:v> = <var:J> \land <var:R1> = <var:J> \land <var:R2> = <var:J> ^ <nat:2> } | . This is ensured through the assignment law given in Hoare reasoning . Advancing to the next step , we have \verb | { <var:v> = <var:J> } <var:R1> := <var:v> { <var:v> = <var:J> \land <var:R1> = <var:J> } | . Immediately following , we see \verb | { <var:v> = <var:J> } <var:R1> := <var:v> { <var:v> = <var:J> \land <var:R1> = <var:J> } | , \verb | { <var:v> = <var:J> \land <var:R1> = <var:J> } <var:R2> := <var:R1> * <var:v> { <var:v> = <var:J> \land <var:R1> = <var:J> \land <var:R2> = <var:J> ^ <nat:2> } | , \verb | { <var:v> = <var:J> \land <var:R1> = <var:J> \land <var:R2> = <var:J> ^ <nat:2> } <var:R0> := <nat:5> { <var:v> = <var:J> \land <var:R1> = <var:J> \land <var:R2> = <var:J> ^ <nat:2> \land <var:R0> = <nat:5> } | , \verb | { <var:v> = <var:J> \land <var:R1> = <var:J> \land <var:R2> = <var:J> ^ <nat:2> \land <var:R0> = <nat:5> } <var:R1> := <var:R1> * <nat:4> { <var:v> = <var:J> \land <var:R1> = <nat:4> * <var:J> \land <var:R2> = <var:J> ^ <nat:2> \land <var:R0> = <nat:5> } | and \verb | { <var:v> = <var:J> \land <var:R1> = <nat:4> * <var:J> \land <var:R2> = <var:J> ^ <nat:2> \land <var:R0> = <nat:5> } <var:R2> := <var:R2> * <nat:4> { <var:v> = <var:J> \land <var:R1> = <nat:4> * <var:J> \land <var:R2> = <nat:4> * <var:J> ^ <nat:2> \land <var:R0> = <nat:5> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <def:poly> := <var:R1> := <var:v> ; <var:R2> := <var:R1> * <var:v> ; <var:R0> := <nat:5> ; <var:R1> := <var:R1> * <nat:4> ; <var:R2> := <var:R2> * <nat:4> ; <var:c> := <var:R2> <var:c> := <var:c> + <var:R1> <var:c> := <var:c> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:v> = <var:J> }} <def:poly> {{ <var:c> = <nat:4> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:R1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:R1> = <var:J> /\ <var:R2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:R1> = <var:J> /\ <var:R2> = <var:J> ^ <nat:2> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:R1> = <nat:4> * <var:J> /\ <var:R2> = <var:J> ^ <nat:2> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:R1> = <nat:4> * <var:J> /\ <var:R2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:R0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:R1> = <nat:4> * <var:J> /\ <var:R0> = <nat:5> /\ <var:c> = <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:R0> = <nat:5> /\ <var:c> = <nat:4> * <var:J> ^ <nat:2> + <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:J> /\ <var:c> = <nat:4> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 