\begin{document} \begin{theorem} We define the following set of commands such that \begin{verbatim} <var:w0> := <nat:3> ; <var:X> := <var:w0> \end{verbatim} Assume , given some integers $ <var:g> $ , it to be that $ <var:z> = <var:g> $ ahead of the execution of this series of commands , it follows that we see $ <var:X> = <nat:3> $ once series of instructions has finished . \end{theorem} \begin{proof} The proof of our program can be seen through usual Hoare logic . Advancing , we see \begin{eqnarray} \{ <var:z> = <var:g> \} \, <var:w0> := <nat:3> \, \{ <var:z> = <var:g> \land <var:w0> = <nat:3> \} \\ \{ <var:z> = <var:g> \land <var:w0> = <nat:3> \} \, <var:X> := <var:w0\, \{ <var:z> = <var:g> \land <var:X> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:z> = <var:g> }} <var:w0> := <nat:3> ; <var:X> := <var:w0> {{ <var:X> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:g> /\ <var:X> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 