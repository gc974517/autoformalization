\begin{document} \begin{definition} We define the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:m1> := <var:g> ; <var:m2> := <var:m1> * <var:g> ; <var:m3> := <var:m2> * <var:g> ; <var:m4> := <var:m3> * <var:g> ; <var:m0> := <nat:4> ; <var:m1> := <var:m1> * <nat:4> ; <var:m2> := <var:m2> * <nat:6> ; <var:m3> := <var:m3> * <nat:4> ; <var:m4> := <var:m4> * <nat:1> ; <var:n> := <var:m4> <var:n> := <var:n> + <var:m3> <var:n> := <var:n> + <var:m2> <var:n> := <var:n> + <var:m1> <var:n> := <var:n> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assuming , taking positive numbers $ <var:j> $ , $ <var:g> = <var:j> $ ahead of evaluating the set of instructions it follows that we see $ <var:n> = <nat:1> \cdot <var:j> ^ <nat:4> + <nat:4> \cdot <var:j> ^ <nat:3> + <nat:6> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + <nat:4> $ after code segment executes . \end{theorem} \begin{proof} Showing our claim about correctness for this list of commands is demonstrated using the following decorated set of instructions . \begin{eqnarray} \{ <var:g> = <var:j> \} \\ <var:m1> := <var:g> ; \\ \{ <var:g> = <var:j> \land <var:m1> = <var:j> \} \\ <var:m2> := <var:m1> * <var:g> ; \\ \{ <var:g> = <var:j> \land <var:m1> = <var:j> \land <var:m2> = <var:j> ^ <nat:2> \} \\ <var:m3> := <var:m2> * <var:g> ; \\ \{ <var:g> = <var:j> \land <var:m1> = <var:j> \land <var:m2> = <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \} \\ <var:m4> := <var:m3> * <var:g> ; \\ \{ <var:g> = <var:j> \land <var:m1> = <var:j> \land <var:m2> = <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \land <var:m4> = <var:j> ^ <nat:4> \} \end{eqnarray} Furthering running our code gives us : \begin{eqnarray} <var:m0> := <nat:4> ; \\ \{ <var:g> = <var:j> \land <var:m1> = <var:j> \land <var:m2> = <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \land <var:m4> = <var:j> ^ <nat:4> \land <var:m0> = <nat:4> \} \\ <var:m1> := <var:m1> * <nat:4> ; \\ \{ <var:g> = <var:j> \land <var:m1> = <nat:4> \cdot <var:j> \land <var:m2> = <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \land <var:m4> = <var:j> ^ <nat:4> \land <var:m0> = <nat:4> \} \\ <var:m2> := <var:m2> * <nat:6> ; \\ \{ <var:g> = <var:j> \land <var:m1> = <nat:4> \cdot <var:j> \land <var:m2> = <nat:6> \cdot <var:j> ^ <nat:2> \land <var:m3> = <var:j> ^ <nat:3> \land <var:m4> = <var:j> ^ <nat:4> \land <var:m0> = <nat:4> \} \\ <var:m3> := <var:m3> * <nat:4> ; \\ \{ <var:g> = <var:j> \land <var:m1> = <nat:4> \cdot <var:j> \land <var:m2> = <nat:6> \cdot <var:j> ^ <nat:2> \land <var:m3> = <nat:4> \cdot <var:j> ^ <nat:3> \land <var:m4> = <var:j> ^ <nat:4> \land <var:m0> = <nat:4> \} \\ <var:m4> := <var:m4> * <nat:1> ; \\ \{ <var:g> = <var:j> \land <var:m1> = <nat:4> \cdot <var:j> \land <var:m2> = <nat:6> \cdot <var:j> ^ <nat:2> \land <var:m3> = <nat:4> \cdot <var:j> ^ <nat:3> \land <var:m4> = <nat:1> \cdot <var:j> ^ <nat:4> \land <var:m0> = <nat:4> \} \\ <var:n> := <var:m4> \\ \{ <var:g> = <var:j> \land <var:m1> = <nat:4> \cdot <var:j> \land <var:m2> = <nat:6> \cdot <var:j> ^ <nat:2> \land <var:m3> = <nat:4> \cdot <var:j> ^ <nat:3> \land <var:m0> = <nat:4> \land <var:n> = <nat:1> \cdot <var:j> ^ <nat:4> \} \\ <var:n> := <var:n> + <var:m3> \\ \{ <var:g> = <var:j> \land <var:m1> = <nat:4> \cdot <var:j> \land <var:m2> = <nat:6> \cdot <var:j> ^ <nat:2> \land <var:m0> = <nat:4> \land <var:n> = <nat:1> \cdot <var:j> ^ <nat:4> + <nat:4> \cdot <var:j> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:m2> \\ \{ <var:g> = <var:j> \land <var:m1> = <nat:4> \cdot <var:j> \land <var:m0> = <nat:4> \land <var:n> = <nat:1> \cdot <var:j> ^ <nat:4> + <nat:4> \cdot <var:j> ^ <nat:3> + <nat:6> \cdot <var:j> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:m1> \\ \{ <var:g> = <var:j> \land <var:m0> = <nat:4> \land <var:n> = <nat:1> \cdot <var:j> ^ <nat:4> + <nat:4> \cdot <var:j> ^ <nat:3> + <nat:6> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> \} \\ <var:n> := <var:n> + <var:m0> \\ \{ <var:g> = <var:j> \land <var:n> = <nat:1> \cdot <var:j> ^ <nat:4> + <nat:4> \cdot <var:j> ^ <nat:3> + <nat:6> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + <nat:4> \} \end{eqnarray} Using typical Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <var:m4> : string := " <var:m4> " . Definition <def:poly> := <var:m1> := <var:g> ; <var:m2> := <var:m1> * <var:g> ; <var:m3> := <var:m2> * <var:g> ; <var:m4> := <var:m3> * <var:g> ; <var:m0> := <nat:4> ; <var:m1> := <var:m1> * <nat:4> ; <var:m2> := <var:m2> * <nat:6> ; <var:m3> := <var:m3> * <nat:4> ; <var:m4> := <var:m4> * <nat:1> ; <var:n> := <var:m4> <var:n> := <var:n> + <var:m3> <var:n> := <var:n> + <var:m2> <var:n> := <var:n> + <var:m1> <var:n> := <var:n> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:g> = <var:j> }} <def:poly> {{ <var:n> = <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:6> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:m1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:m1> = <var:j> /\ <var:m2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:m1> = <var:j> /\ <var:m2> = <var:j> ^ <nat:2> /\ <var:m3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:m1> = <var:j> /\ <var:m2> = <var:j> ^ <nat:2> /\ <var:m3> = <var:j> ^ <nat:3> /\ <var:m4> = <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:m1> = <var:j> /\ <var:m2> = <var:j> ^ <nat:2> /\ <var:m3> = <var:j> ^ <nat:3> /\ <var:m4> = <var:j> ^ <nat:4> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:m1> = <nat:4> * <var:j> /\ <var:m2> = <var:j> ^ <nat:2> /\ <var:m3> = <var:j> ^ <nat:3> /\ <var:m4> = <var:j> ^ <nat:4> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:m1> = <nat:4> * <var:j> /\ <var:m2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:m3> = <var:j> ^ <nat:3> /\ <var:m4> = <var:j> ^ <nat:4> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:m1> = <nat:4> * <var:j> /\ <var:m2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:m3> = <nat:4> * <var:j> ^ <nat:3> /\ <var:m4> = <var:j> ^ <nat:4> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:m1> = <nat:4> * <var:j> /\ <var:m2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:m3> = <nat:4> * <var:j> ^ <nat:3> /\ <var:m4> = <nat:1> * <var:j> ^ <nat:4> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:m1> = <nat:4> * <var:j> /\ <var:m2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:m3> = <nat:4> * <var:j> ^ <nat:3> /\ <var:m0> = <nat:4> /\ <var:n> = <nat:1> * <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:m1> = <nat:4> * <var:j> /\ <var:m2> = <nat:6> * <var:j> ^ <nat:2> /\ <var:m0> = <nat:4> /\ <var:n> = <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:m1> = <nat:4> * <var:j> /\ <var:m0> = <nat:4> /\ <var:n> = <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:6> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:m0> = <nat:4> /\ <var:n> = <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:6> * <var:j> ^ <nat:2> + <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:j> /\ <var:n> = <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:6> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 