\begin{document} \begin{theorem} Take a list of instructions as \begin{verbatim} <var:o1> := <var:U> ; <var:o2> := <var:o1> * <var:U> ; <var:o3> := <var:o2> * <var:U> ; <var:o0> := <nat:1> ; <var:o1> := <var:o1> * <nat:3> ; <var:o3> := <var:o3> * <nat:4> ; <var:a> := <var:o3> <var:a> := <var:a> + <var:o1> <var:a> := <var:a> + <var:o0> \end{verbatim} Assuming --- taking positive numbers $ <var:H> $ --- it to hold that $ <var:U> = <var:H> $ before the execution of this code , it holds that $ <var:a> = <nat:4> \cdot <var:H> ^ <nat:3> + <nat:3> \cdot <var:H> + <nat:1> $ when set of commands exits . \end{theorem} \begin{proof} The application of typical Hoare reasoning gives : \begin{eqnarray} \{ <var:U> = <var:H> \} \\ <var:o1> := <var:U> ; \\ \{ <var:U> = <var:H> \land <var:o1> = <var:H> \} \\ <var:o2> := <var:o1> * <var:U> ; \\ \{ <var:U> = <var:H> \land <var:o1> = <var:H> \land <var:o2> = <var:H> ^ <nat:2> \} \\ <var:o3> := <var:o2> * <var:U> ; \\ \{ <var:U> = <var:H> \land <var:o1> = <var:H> \land <var:o2> = <var:H> ^ <nat:2> \land <var:o3> = <var:H> ^ <nat:3> \} \\ <var:o0> := <nat:1> ; \\ \{ <var:U> = <var:H> \land <var:o1> = <var:H> \land <var:o2> = <var:H> ^ <nat:2> \land <var:o3> = <var:H> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:o1> := <var:o1> * <nat:3> ; \\ \{ <var:U> = <var:H> \land <var:o1> = <nat:3> * <var:H> \land <var:o2> = <var:H> ^ <nat:2> \land <var:o3> = <var:H> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:o3> := <var:o3> * <nat:4> ; \\ \{ <var:U> = <var:H> \land <var:o1> = <nat:3> * <var:H> \land <var:o2> = <var:H> ^ <nat:2> \land <var:o3> = <nat:4> * <var:H> ^ <nat:3> \land <var:o0> = <nat:1> \} \\ <var:a> := <var:o3> \\ \{ <var:U> = <var:H> \land <var:o1> = <nat:3> * <var:H> \land <var:o2> = <var:H> ^ <nat:2> \land <var:o0> = <nat:1> \land <var:a> = <nat:4> * <var:H> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:o1> \\ \{ <var:U> = <var:H> \land <var:o0> = <nat:1> \land <var:a> = <nat:4> * <var:H> ^ <nat:3> + <nat:3> * <var:H> \} \\ <var:a> := <var:a> + <var:o0> \\ \{ <var:U> = <var:H> \land <var:a> = <nat:4> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:1> \} \end{eqnarray} Given the above , this program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:U> = <var:H> }} <var:o1> := <var:U> ; <var:o2> := <var:o1> * <var:U> ; <var:o3> := <var:o2> * <var:U> ; <var:o0> := <nat:1> ; <var:o1> := <var:o1> * <nat:3> ; <var:o3> := <var:o3> * <nat:4> ; <var:a> := <var:o3> <var:a> := <var:a> + <var:o1> <var:a> := <var:a> + <var:o0> {{ <var:a> = <nat:4> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:H> /\ <var:o1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:H> /\ <var:o1> = <var:H> /\ <var:o2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:H> /\ <var:o1> = <var:H> /\ <var:o2> = <var:H> ^ <nat:2> /\ <var:o3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:H> /\ <var:o1> = <var:H> /\ <var:o2> = <var:H> ^ <nat:2> /\ <var:o3> = <var:H> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:H> /\ <var:o1> = <nat:3> * <var:H> /\ <var:o2> = <var:H> ^ <nat:2> /\ <var:o3> = <var:H> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:H> /\ <var:o1> = <nat:3> * <var:H> /\ <var:o2> = <var:H> ^ <nat:2> /\ <var:o3> = <nat:4> * <var:H> ^ <nat:3> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:H> /\ <var:o1> = <nat:3> * <var:H> /\ <var:o2> = <var:H> ^ <nat:2> /\ <var:o0> = <nat:1> /\ <var:a> = <nat:4> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:H> /\ <var:o0> = <nat:1> /\ <var:a> = <nat:4> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:H> /\ <var:a> = <nat:4> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 