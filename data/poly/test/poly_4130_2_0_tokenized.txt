\begin{document} \begin{theorem} Define the following code segment such that \begin{verbatim} <var:p0> := <nat:3> ; <var:h> := <var:p0> \end{verbatim} Assuming that $ <var:i> = <var:n> $ given any positive integer coefficients $ <var:n> $ ahead of interpreting this program then $ <var:h> = <nat:3> $ once list of commands has executed . \end{theorem} \begin{proof} Arguing the correctness of the series of commands can be demonstrated through Hoare techniques . Paying attention to the proceeding step found in our segment of code , the binding statement \verb | <var:p0> := <nat:3> ; | . This command moves $ \{ <var:i> = <var:n> \} $ to the postcondition $ \{ <var:i> = <var:n> \land <var:p0> = <nat:3> \} $ . This is given using the assignment law found in typical Hoare reasoning . Taking a look at the following bit of code seen in the segment of code , we see the code giving $ <var:p0$ into $ <var:h>$ . This code takes $ \{ <var:i> = <var:n> \land <var:p0> = <nat:3> \} $ as the postcondition $ \{ <var:i> = <var:n> \land <var:h> = <nat:3> \} $ . This is shown using the assignment scheme found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:i> = <var:n> }} <var:p0> := <nat:3> ; <var:h> := <var:p0> {{ <var:h> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:n> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:n> /\ <var:h> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 