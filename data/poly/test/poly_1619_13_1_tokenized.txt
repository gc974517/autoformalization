\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:A1> := <var:n> ; <var:A2> := <var:A1> * <var:n> ; <var:A3> := <var:A2> * <var:n> ; <var:A4> := <var:A3> * <var:n> ; <var:A5> := <var:A4> * <var:n> ; <var:A0> := <nat:1> ; <var:A1> := <var:A1> * <nat:2> ; <var:A4> := <var:A4> * <nat:3> ; <var:A5> := <var:A5> * <nat:1> ; <var:k> := <var:A5> <var:k> := <var:k> + <var:A4> <var:k> := <var:k> + <var:A1> <var:k> := <var:k> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:n> = <var:F> $ prior to the execution of this set of instructions it follows that we see $ <var:k> = <nat:1> \times <var:F> ^ <nat:5> + <nat:3> \times <var:F> ^ <nat:4> + <nat:2> \times <var:F> + <nat:1> $ after code is done . \end{theorem} \begin{proof} Showing our claim about correctness for our code is evident by typical Hoare techniques . Immediately following , we see the binding command \verb | <var:A1> := <var:n> ; | . This forwards the condition $ \{ <var:n> = <var:F> \} $ into the condition $ \{ <var:n> = <var:F> \land <var:A1> = <var:F> \} $ . Honing in on the subsequent piece of code found in the code , the variable binding line \verb | <var:A2> := <var:A1> * <var:n> ; | . This code forwards the precondition $ \{ <var:n> = <var:F> \land <var:A1> = <var:F> \} $ into the condition $ \{ <var:n> = <var:F> \land <var:A1> = <var:F> \land <var:A2> = <var:F> ^ <nat:2> \} $ . This is rigorously given through the assignment rule defined in typical Hoare logic . Shifting focus toward the proceeding line seen in the program , the variable binding command defining $ <var:A2> * <var:n> $ into $ <var:A3>$ . This takes the condition $ \{ <var:n> = <var:F> \land <var:A1> = <var:F> \land <var:A2> = <var:F> ^ <nat:2> \} $ toward the postcondition $ \{ <var:n> = <var:F> \land <var:A1> = <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \} $ . Observing the following step seen in the list of instructions , the binding code \verb | <var:A4> := <var:A3> * <var:n> ; | . This command advances $ \{ <var:n> = <var:F> \land <var:A1> = <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \} $ as the condition $ \{ <var:n> = <var:F> \land <var:A1> = <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <var:F> ^ <nat:4> \} $ . Immediately after , the binding code defining $ <var:A4> * <var:n> $ toward $ <var:A5>$ . This takes $ \{ <var:n> = <var:F> \land <var:A1> = <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <var:F> ^ <nat:4> \} $ as the postcondition $ \{ <var:n> = <var:F> \land <var:A1> = <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <var:F> ^ <nat:4> \land <var:A5> = <var:F> ^ <nat:5> \} $ . Shifting focus toward the proceeding step contained in our code , we see the variable assignmet statement \verb | <var:A0> := <nat:1> ; | . This takes the condition $ \{ <var:n> = <var:F> \land <var:A1> = <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <var:F> ^ <nat:4> \land <var:A5> = <var:F> ^ <nat:5> \} $ as the postcondition $ \{ <var:n> = <var:F> \land <var:A1> = <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <var:F> ^ <nat:4> \land <var:A5> = <var:F> ^ <nat:5> \land <var:A0> = <nat:1> \} $ . This is known to be sound using the assignment law of standard Hoare logic . Keeping momentum , the assignment line \verb | <var:A1> := <var:A1> * <nat:2> ; | . This transfers $ \{ <var:n> = <var:F> \land <var:A1> = <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <var:F> ^ <nat:4> \land <var:A5> = <var:F> ^ <nat:5> \land <var:A0> = <nat:1> \} $ into the postcondition $ \{ <var:n> = <var:F> \land <var:A1> = <nat:2> \cdot <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <var:F> ^ <nat:4> \land <var:A5> = <var:F> ^ <nat:5> \land <var:A0> = <nat:1> \} $ . Advancing to the next step , the variable binding line \verb | <var:A4> := <var:A4> * <nat:3> ; | . This redefines $ \{ <var:n> = <var:F> \land <var:A1> = <nat:2> \cdot <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <var:F> ^ <nat:4> \land <var:A5> = <var:F> ^ <nat:5> \land <var:A0> = <nat:1> \} $ as the postcondition $ \{ <var:n> = <var:F> \land <var:A1> = <nat:2> \cdot <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <nat:3> \cdot <var:F> ^ <nat:4> \land <var:A5> = <var:F> ^ <nat:5> \land <var:A0> = <nat:1> \} $ . Focusing on the next statement seen in the code segment , we have the variable update code \verb | <var:A5> := <var:A5> * <nat:1> ; | . This statement redefines $ \{ <var:n> = <var:F> \land <var:A1> = <nat:2> \cdot <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <nat:3> \cdot <var:F> ^ <nat:4> \land <var:A5> = <var:F> ^ <nat:5> \land <var:A0> = <nat:1> \} $ to $ \{ <var:n> = <var:F> \land <var:A1> = <nat:2> \cdot <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <nat:3> \cdot <var:F> ^ <nat:4> \land <var:A5> = <nat:1> \cdot <var:F> ^ <nat:5> \land <var:A0> = <nat:1> \} $ . This is shown using the assignment law of standard Hoare techniques . Taking a look at the subsequent command found in our set of commands , we have the assignment code yielding $ <var:A5$ into $ <var:k>$ . This moves $ \{ <var:n> = <var:F> \land <var:A1> = <nat:2> \cdot <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <nat:3> \cdot <var:F> ^ <nat:4> \land <var:A5> = <nat:1> \cdot <var:F> ^ <nat:5> \land <var:A0> = <nat:1> \} $ into the postcondition $ \{ <var:n> = <var:F> \land <var:A1> = <nat:2> \cdot <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <nat:3> \cdot <var:F> ^ <nat:4> \land <var:A0> = <nat:1> \land <var:k> = <nat:1> \cdot <var:F> ^ <nat:5> \} $ . This is shown with the assignment law from Hoare reasoning . Going to the next step , we see the environment update line \verb | <var:k> := <var:k> + <var:A4> | . This forwards the condition $ \{ <var:n> = <var:F> \land <var:A1> = <nat:2> \cdot <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A4> = <nat:3> \cdot <var:F> ^ <nat:4> \land <var:A0> = <nat:1> \land <var:k> = <nat:1> \cdot <var:F> ^ <nat:5> \} $ toward $ \{ <var:n> = <var:F> \land <var:A1> = <nat:2> \cdot <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A0> = <nat:1> \land <var:k> = <nat:1> \cdot <var:F> ^ <nat:5> + <nat:3> \cdot <var:F> ^ <nat:4> \} $ . Observing the following line seen in our program , we have the binding command \verb | <var:k> := <var:k> + <var:A1> | . This line advances the precondition $ \{ <var:n> = <var:F> \land <var:A1> = <nat:2> \cdot <var:F> \land <var:A2> = <var:F> ^ <nat:2> \land <var:A3> = <var:F> ^ <nat:3> \land <var:A0> = <nat:1> \land <var:k> = <nat:1> \cdot <var:F> ^ <nat:5> + <nat:3> \cdot <var:F> ^ <nat:4> \} $ into the condition $ \{ <var:n> = <var:F> \land <var:A0> = <nat:1> \land <var:k> = <nat:1> \cdot <var:F> ^ <nat:5> + <nat:3> \cdot <var:F> ^ <nat:4> + <nat:2> \cdot <var:F> \} $ . This is ensured using the assignment law given by Hoare reasoning . Moving forward to the subsequent line of code found in our list of commands , the assignment code binding $ <var:k> + <var:A0$ toward $ <var:k>$ . This line moves the condition $ \{ <var:n> = <var:F> \land <var:A0> = <nat:1> \land <var:k> = <nat:1> \cdot <var:F> ^ <nat:5> + <nat:3> \cdot <var:F> ^ <nat:4> + <nat:2> \cdot <var:F> \} $ as $ \{ <var:n> = <var:F> \land <var:k> = <nat:1> \cdot <var:F> ^ <nat:5> + <nat:3> \cdot <var:F> ^ <nat:4> + <nat:2> \cdot <var:F> + <nat:1> \} $ . This is shown through the assignment inference rule obtained from Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <var:A4> : string := " <var:A4> " . Definition <var:A5> : string := " <var:A5> " . Definition <def:poly> := <var:A1> := <var:n> ; <var:A2> := <var:A1> * <var:n> ; <var:A3> := <var:A2> * <var:n> ; <var:A4> := <var:A3> * <var:n> ; <var:A5> := <var:A4> * <var:n> ; <var:A0> := <nat:1> ; <var:A1> := <var:A1> * <nat:2> ; <var:A4> := <var:A4> * <nat:3> ; <var:A5> := <var:A5> * <nat:1> ; <var:k> := <var:A5> <var:k> := <var:k> + <var:A4> <var:k> := <var:k> + <var:A1> <var:k> := <var:k> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:n> = <var:F> }} <def:poly> {{ <var:k> = <nat:1> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:2> * <var:F> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:A1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:A1> = <var:F> /\ <var:A2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:A1> = <var:F> /\ <var:A2> = <var:F> ^ <nat:2> /\ <var:A3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:A1> = <var:F> /\ <var:A2> = <var:F> ^ <nat:2> /\ <var:A3> = <var:F> ^ <nat:3> /\ <var:A4> = <var:F> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:A1> = <var:F> /\ <var:A2> = <var:F> ^ <nat:2> /\ <var:A3> = <var:F> ^ <nat:3> /\ <var:A4> = <var:F> ^ <nat:4> /\ <var:A5> = <var:F> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:A1> = <var:F> /\ <var:A2> = <var:F> ^ <nat:2> /\ <var:A3> = <var:F> ^ <nat:3> /\ <var:A4> = <var:F> ^ <nat:4> /\ <var:A5> = <var:F> ^ <nat:5> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:A1> = <nat:2> * <var:F> /\ <var:A2> = <var:F> ^ <nat:2> /\ <var:A3> = <var:F> ^ <nat:3> /\ <var:A4> = <var:F> ^ <nat:4> /\ <var:A5> = <var:F> ^ <nat:5> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:A1> = <nat:2> * <var:F> /\ <var:A2> = <var:F> ^ <nat:2> /\ <var:A3> = <var:F> ^ <nat:3> /\ <var:A4> = <nat:3> * <var:F> ^ <nat:4> /\ <var:A5> = <var:F> ^ <nat:5> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:A1> = <nat:2> * <var:F> /\ <var:A2> = <var:F> ^ <nat:2> /\ <var:A3> = <var:F> ^ <nat:3> /\ <var:A4> = <nat:3> * <var:F> ^ <nat:4> /\ <var:A5> = <nat:1> * <var:F> ^ <nat:5> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:A1> = <nat:2> * <var:F> /\ <var:A2> = <var:F> ^ <nat:2> /\ <var:A3> = <var:F> ^ <nat:3> /\ <var:A4> = <nat:3> * <var:F> ^ <nat:4> /\ <var:A0> = <nat:1> /\ <var:k> = <nat:1> * <var:F> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:A1> = <nat:2> * <var:F> /\ <var:A2> = <var:F> ^ <nat:2> /\ <var:A3> = <var:F> ^ <nat:3> /\ <var:A0> = <nat:1> /\ <var:k> = <nat:1> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:A0> = <nat:1> /\ <var:k> = <nat:1> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:F> /\ <var:k> = <nat:1> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:2> * <var:F> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 