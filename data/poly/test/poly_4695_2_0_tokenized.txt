\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as \begin{verbatim} <var:A0> := <nat:2> ; <var:o> := <var:A0> \end{verbatim} Allow --- taking positive integer coefficients $ <var:R> $ --- $ <var:r> = <var:R> $ before the evaluation of this program then $ <var:o> = <nat:2> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning results in : \begin{eqnarray} \{ <var:r> = <var:R> \} \\ <var:A0> := <nat:2> ; \\ \{ <var:r> = <var:R> \land <var:A0> = <nat:2> \} \\ <var:o> := <var:A0> \\ \{ <var:r> = <var:R> \land <var:o> = <nat:2> \} \end{eqnarray} Given the above , our series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:r> = <var:R> }} <var:A0> := <nat:2> ; <var:o> := <var:A0> {{ <var:o> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:o> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 