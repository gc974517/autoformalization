\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:Z1> := <var:a> ; <var:Z2> := <var:Z1> * <var:a> ; <var:Z0> := <nat:2> ; <var:Z2> := <var:Z2> * <nat:3> ; <var:k> := <var:Z2> <var:k> := <var:k> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> . Allowing that $ <var:a> = <var:g> $ given $ <var:g> $ before the execution of the program it holds that we see $ <var:k> = <nat:3> \times <var:g> ^ <nat:2> + <nat:2> $ after code has finished . \end{theorem} \begin{proof} Applying standard Hoare logic returns : \begin{eqnarray} \{ <var:a> = <var:g> \} \\ <var:Z1> := <var:a> ; \\ \{ <var:a> = <var:g> \land <var:Z1> = <var:g> \} \\ <var:Z2> := <var:Z1> * <var:a> ; \\ \{ <var:a> = <var:g> \land <var:Z1> = <var:g> \land <var:Z2> = <var:g> ^ <nat:2> \} \\ <var:Z0> := <nat:2> ; \\ \{ <var:a> = <var:g> \land <var:Z1> = <var:g> \land <var:Z2> = <var:g> ^ <nat:2> \land <var:Z0> = <nat:2> \} \\ <var:Z2> := <var:Z2> * <nat:3> ; \\ \{ <var:a> = <var:g> \land <var:Z1> = <var:g> \land <var:Z2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:Z0> = <nat:2> \} \\ <var:k> := <var:Z2> \\ \{ <var:a> = <var:g> \land <var:Z1> = <var:g> \land <var:Z0> = <nat:2> \land <var:k> = <nat:3> \times <var:g> ^ <nat:2> \} \end{eqnarray} Advancing the execution of the set of instructions gives : \begin{eqnarray} <var:k> := <var:k> + <var:Z0> \\ \{ <var:a> = <var:g> \land <var:k> = <nat:3> \times <var:g> ^ <nat:2> + <nat:2> \} \end{eqnarray} Considering the preceding argument , this code segment has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z1> := <var:a> ; <var:Z2> := <var:Z1> * <var:a> ; <var:Z0> := <nat:2> ; <var:Z2> := <var:Z2> * <nat:3> ; <var:k> := <var:Z2> <var:k> := <var:k> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:a> = <var:g> }} <def:poly> {{ <var:k> = <nat:3> * <var:g> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:Z1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:Z1> = <var:g> /\ <var:Z2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:Z1> = <var:g> /\ <var:Z2> = <var:g> ^ <nat:2> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:Z1> = <var:g> /\ <var:Z2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:Z1> = <var:g> /\ <var:Z0> = <nat:2> /\ <var:k> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:g> /\ <var:k> = <nat:3> * <var:g> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 