\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:o0> := <nat:7> ; <var:q> := <var:o0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Given that we have $ <var:p> = <var:O> $ , letting positive coefficients $ <var:O> $ , prior to executing the series of instructions it holds that we have $ <var:q> = <nat:7> $ after list of instructions has exited . \end{theorem} \begin{proof} The method of proof for the set of commands can be seen with standard Hoare techniques . Moving forward to the upcoming command contained in our code , we see the variable assignmet line \verb | <var:o0> := <nat:7> ; | . This command forwards the condition $ \{ <var:p> = <var:O> \} $ toward $ \{ <var:p> = <var:O> \land <var:o0> = <nat:7> \} $ . This is deduced with the assignment rule given in standard Hoare logic . Now , the binding statement yielding $ <var:o0$ to $ <var:q>$ . This statement advances the precondition $ \{ <var:p> = <var:O> \land <var:o0> = <nat:7> \} $ to the condition $ \{ <var:p> = <var:O> \land <var:q> = <nat:7> \} $ . This is deduced using the assignment rule found in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <def:poly> := <var:o0> := <nat:7> ; <var:q> := <var:o0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:p> = <var:O> }} <def:poly> {{ <var:q> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:O> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:O> /\ <var:q> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 