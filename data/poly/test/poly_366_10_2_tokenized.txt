\begin{document} \begin{theorem} Define the following code such that \begin{verbatim} <var:z> := <nat:4> ; <var:z> := <nat:3> + <var:z> * <var:w> ; <var:z> := <nat:1> + <var:z> * <var:w> ; <var:z> := <nat:3> + <var:z> * <var:w> ; <var:z> := <nat:2> + <var:z> * <var:w> ; <var:z> := <nat:4> + <var:z> * <var:w> ; <var:z> := <nat:1> + <var:z> * <var:w> ; <var:z> := <nat:3> + <var:z> * <var:w> ; <var:z> := <nat:1> + <var:z> * <var:w> ; <var:z> := <nat:2> + <var:z> * <var:w> \end{verbatim} Allowing that $ <var:w> = <var:j> $ , for all natural coefficients $ <var:j> $ , prior to the execution of our program , it follows that $ <var:z> = <nat:4> \times <var:j> ^ <nat:9> + <nat:3> \times <var:j> ^ <nat:8> + <nat:1> \times <var:j> ^ <nat:7> + <nat:3> \times <var:j> ^ <nat:6> + <nat:2> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:4> + <nat:1> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:j> \} \\ <var:z> := <nat:4> ; \\ \{ <var:w> = <var:j> \land <var:z> = <nat:4> \} \\ <var:z> := <nat:3> + <var:z> * <var:w> ; \\ \{ <var:w> = <var:j> \land <var:z> = <nat:4> \times <var:j> + <nat:3> \} \\ <var:z> := <nat:1> + <var:z> * <var:w> ; \\ \{ <var:w> = <var:j> \land <var:z> = <nat:4> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:1> \} \\ <var:z> := <nat:3> + <var:z> * <var:w> ; \\ \{ <var:w> = <var:j> \land <var:z> = <nat:4> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> + <nat:3> \} \\ <var:z> := <nat:2> + <var:z> * <var:w> ; \\ \{ <var:w> = <var:j> \land <var:z> = <nat:4> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:1> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:2> \} \end{eqnarray} Advancing interpreting the series of instructions gives us : \begin{eqnarray} <var:z> := <nat:4> + <var:z> * <var:w> ; \\ \{ <var:w> = <var:j> \land <var:z> = <nat:4> \times <var:j> ^ <nat:5> + <nat:3> \times <var:j> ^ <nat:4> + <nat:1> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:2> \times <var:j> + <nat:4> \} \\ <var:z> := <nat:1> + <var:z> * <var:w> ; \\ \{ <var:w> = <var:j> \land <var:z> = <nat:4> \times <var:j> ^ <nat:6> + <nat:3> \times <var:j> ^ <nat:5> + <nat:1> \times <var:j> ^ <nat:4> + <nat:3> \times <var:j> ^ <nat:3> + <nat:2> \times <var:j> ^ <nat:2> + <nat:4> \times <var:j> + <nat:1> \} \\ <var:z> := <nat:3> + <var:z> * <var:w> ; \\ \{ <var:w> = <var:j> \land <var:z> = <nat:4> \times <var:j> ^ <nat:7> + <nat:3> \times <var:j> ^ <nat:6> + <nat:1> \times <var:j> ^ <nat:5> + <nat:3> \times <var:j> ^ <nat:4> + <nat:2> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> + <nat:3> \} \\ <var:z> := <nat:1> + <var:z> * <var:w> ; \\ \{ <var:w> = <var:j> \land <var:z> = <nat:4> \times <var:j> ^ <nat:8> + <nat:3> \times <var:j> ^ <nat:7> + <nat:1> \times <var:j> ^ <nat:6> + <nat:3> \times <var:j> ^ <nat:5> + <nat:2> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:3> + <nat:1> \times <var:j> ^ <nat:2> + <nat:3> \times <var:j> + <nat:1> \} \\ <var:z> := <nat:2> + <var:z> * <var:w> \\ \{ <var:w> = <var:j> \land <var:z> = <nat:4> \times <var:j> ^ <nat:9> + <nat:3> \times <var:j> ^ <nat:8> + <nat:1> \times <var:j> ^ <nat:7> + <nat:3> \times <var:j> ^ <nat:6> + <nat:2> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:4> + <nat:1> \times <var:j> ^ <nat:3> + <nat:3> \times <var:j> ^ <nat:2> + <nat:1> \times <var:j> + <nat:2> \} \end{eqnarray} Applying usual Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:w> = <var:j> }} <var:z> := <nat:4> ; <var:z> := <nat:3> + <var:z> * <var:w> ; <var:z> := <nat:1> + <var:z> * <var:w> ; <var:z> := <nat:3> + <var:z> * <var:w> ; <var:z> := <nat:2> + <var:z> * <var:w> ; <var:z> := <nat:4> + <var:z> * <var:w> ; <var:z> := <nat:1> + <var:z> * <var:w> ; <var:z> := <nat:3> + <var:z> * <var:w> ; <var:z> := <nat:1> + <var:z> * <var:w> ; <var:z> := <nat:2> + <var:z> * <var:w> {{ <var:z> = <nat:4> * <var:j> ^ <nat:9> + <nat:3> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:z> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:z> = <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:z> = <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:z> = <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:z> = <nat:4> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:z> = <nat:4> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:2> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:z> = <nat:4> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:4> + <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:z> = <nat:4> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:5> + <nat:3> * <var:j> ^ <nat:4> + <nat:2> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:z> = <nat:4> * <var:j> ^ <nat:8> + <nat:3> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:6> + <nat:3> * <var:j> ^ <nat:5> + <nat:2> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:1> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:j> /\ <var:z> = <nat:4> * <var:j> ^ <nat:9> + <nat:3> * <var:j> ^ <nat:8> + <nat:1> * <var:j> ^ <nat:7> + <nat:3> * <var:j> ^ <nat:6> + <nat:2> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:1> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 