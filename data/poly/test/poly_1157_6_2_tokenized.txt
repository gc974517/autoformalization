\begin{document} \begin{theorem} We define a code segment in \emph{Imp} : \begin{verbatim} <var:z> := <nat:4> ; <var:z> := <nat:3> + <var:z> * <var:Q> ; <var:z> := <nat:3> + <var:z> * <var:Q> ; <var:z> := <nat:4> + <var:z> * <var:Q> ; <var:z> := <nat:3> + <var:z> * <var:Q> ; <var:z> := <nat:2> + <var:z> * <var:Q> \end{verbatim} Given it to hold that $ <var:Q> = <var:L> $ before the execution of this list of commands it holds that $ <var:z> = <nat:4> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> $ once set of instructions finishes . \end{theorem} \begin{proof} The argument for our series of instructions is clear by usual Hoare logic . Moving on to the following statement seen in our series of commands , we have the binding line \verb | <var:z> := <nat:4> ; | . This moves the precondition $ \{ <var:Q> = <var:L> \} $ as the postcondition $ \{ <var:Q> = <var:L> \land <var:z> = <nat:4> \} $ . Focusing on the upcoming bit of code found in the segment of code , we have the variable binding line \verb | <var:z> := <nat:3> + <var:z> * <var:Q> ; | . This transfers $ \{ <var:Q> = <var:L> \land <var:z> = <nat:4> \} $ as the condition $ \{ <var:Q> = <var:L> \land <var:z> = <nat:4> \cdot <var:L> + <nat:3> \} $ . Moving onward , we have the assignment command assigning $ <nat:3> + <var:z> * <var:Q> $ into $ <var:z>$ . This statement advances $ \{ <var:Q> = <var:L> \land <var:z> = <nat:4> \cdot <var:L> + <nat:3> \} $ as $ \{ <var:Q> = <var:L> \land <var:z> = <nat:4> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:3> \} $ . Moving forward to the proceeding line of code seen in the series of commands , we see the command \verb | <var:z> := <nat:4> + <var:z> * <var:Q> ; | . This command moves the precondition $ \{ <var:Q> = <var:L> \land <var:z> = <nat:4> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:3> \} $ toward the postcondition $ \{ <var:Q> = <var:L> \land <var:z> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:4> \} $ . Moving forward to the following step found in our list of instructions , we see the variable assignmet line \verb | <var:z> := <nat:3> + <var:z> * <var:Q> ; | . This transfers $ \{ <var:Q> = <var:L> \land <var:z> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:4> \} $ toward $ \{ <var:Q> = <var:L> \land <var:z> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:3> \} $ . Observing the subsequent bit of code contained in the code , we see the environment update command \verb | <var:z> := <nat:2> + <var:z> * <var:Q> | . This takes the condition $ \{ <var:Q> = <var:L> \land <var:z> = <nat:4> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:3> \} $ as the postcondition $ \{ <var:Q> = <var:L> \land <var:z> = <nat:4> \cdot <var:L> ^ <nat:5> + <nat:3> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:Q> = <var:L> }} <var:z> := <nat:4> ; <var:z> := <nat:3> + <var:z> * <var:Q> ; <var:z> := <nat:3> + <var:z> * <var:Q> ; <var:z> := <nat:4> + <var:z> * <var:Q> ; <var:z> := <nat:3> + <var:z> * <var:Q> ; <var:z> := <nat:2> + <var:z> * <var:Q> {{ <var:z> = <nat:4> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:z> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:z> = <nat:4> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:z> = <nat:4> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:z> = <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:z> = <nat:4> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:L> /\ <var:z> = <nat:4> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 