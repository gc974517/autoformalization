\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z> := <nat:3> ; <var:Z> := <nat:3> + <var:Z> * <var:T> ; <var:Z> := <nat:3> + <var:Z> * <var:T> ; <var:Z> := <nat:1> + <var:Z> * <var:T> ; <var:Z> := <nat:2> + <var:Z> * <var:T> ; <var:Z> := <var:Z> * <var:T> ; <var:Z> := <nat:1> + <var:Z> * <var:T> ; <var:Z> := <nat:1> + <var:Z> * <var:T> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Assuming --- for all positive integer coefficients $ <var:m> $ --- it to hold that $ <var:T> = <var:m> $ prior to running our list of instructions then we have $ <var:Z> = <nat:3> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:1> $ after code segment executes . \end{theorem} \begin{proof} Note that the following decorated series of instructions . \begin{eqnarray} \{ <var:T> = <var:m> \} \\ <var:Z> := <nat:3> ; \\ \{ <var:T> = <var:m> \land <var:Z> = <nat:3> \} \\ <var:Z> := <nat:3> + <var:Z> * <var:T> ; \\ \{ <var:T> = <var:m> \land <var:Z> = <nat:3> * <var:m> + <nat:3> \} \\ <var:Z> := <nat:3> + <var:Z> * <var:T> ; \\ \{ <var:T> = <var:m> \land <var:Z> = <nat:3> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> \} \\ <var:Z> := <nat:1> + <var:Z> * <var:T> ; \\ \{ <var:T> = <var:m> \land <var:Z> = <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> \} \\ <var:Z> := <nat:2> + <var:Z> * <var:T> ; \\ \{ <var:T> = <var:m> \land <var:Z> = <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> \} \\ <var:Z> := <var:Z> * <var:T> ; \\ \{ <var:T> = <var:m> \land <var:Z> = <nat:3> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + \} \\ <var:Z> := <nat:1> + <var:Z> * <var:T> ; \\ \{ <var:T> = <var:m> \land <var:Z> = <nat:3> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> \} \\ <var:Z> := <nat:1> + <var:Z> * <var:T> \\ \{ <var:T> = <var:m> \land <var:Z> = <nat:3> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:1> \} \end{eqnarray} Applying standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Z> := <nat:3> ; <var:Z> := <nat:3> + <var:Z> * <var:T> ; <var:Z> := <nat:3> + <var:Z> * <var:T> ; <var:Z> := <nat:1> + <var:Z> * <var:T> ; <var:Z> := <nat:2> + <var:Z> * <var:T> ; <var:Z> := <var:Z> * <var:T> ; <var:Z> := <nat:1> + <var:Z> * <var:T> ; <var:Z> := <nat:1> + <var:Z> * <var:T> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:T> = <var:m> }} <def:poly> {{ <var:Z> = <nat:3> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Z> = <nat:3> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Z> = <nat:3> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Z> = <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Z> = <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Z> = <nat:3> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Z> = <nat:3> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Z> = <nat:3> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:2> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 