\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:2> ; <var:l1> := <nat:3> ; <var:l1> := <var:l1> * <var:d> ; <var:p> := <var:l1> ; <var:p> := <var:p> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:d> = <var:v> $ before interpreting the list of commands , then $ <var:p> = <nat:3> \cdot <var:v> + <nat:2> $ when list of instructions has finished executing . \end{theorem} \begin{proof} The proof of this series of commands can be shown using usual Hoare logic . After , we have \[ \begin{tabular} {rcl} \{ <var:d> = <var:v> \} & <var:l0> := <nat:2> & \{ <var:d> = <var:v> \land <var:l0> = <nat:2> \} \\ \{ <var:d> = <var:v> \land <var:l0> = <nat:2> \} & <var:l1> := <nat:3> & \{ <var:d> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:3> \} \end{tabular} This is shown to be logically sound with the assignment scheme defined by standard Hoare techniques . Moving forward to the subsequent piece of code seen in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:d> = <var:v> \} & <var:l0> := <nat:2> & \{ <var:d> = <var:v> \land <var:l0> = <nat:2> \} \end{tabular} Now , we have \[ \begin{tabular} {rcl} \{ <var:d> = <var:v> \} & <var:l0> := <nat:2> & \{ <var:d> = <var:v> \land <var:l0> = <nat:2> \} \\ \{ <var:d> = <var:v> \land <var:l0> = <nat:2> \} & <var:l1> := <nat:3> & \{ <var:d> = <var:v> \land <var:l0> = <nat:2> \land <var:l1> = <nat:3> \} \end{tabular} This is given by the binding inference rule found in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <def:poly> := <var:l0> := <nat:2> ; <var:l1> := <nat:3> ; <var:l1> := <var:l1> * <var:d> ; <var:p> := <var:l1> ; <var:p> := <var:p> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:d> = <var:v> }} <def:poly> {{ <var:p> = <nat:3> * <var:v> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:l0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:l0> = <nat:2> /\ <var:l1> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:l0> = <nat:2> /\ <var:p> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:v> /\ <var:p> = <nat:3> * <var:v> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 