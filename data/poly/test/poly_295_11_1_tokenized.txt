\begin{document} \begin{theorem} We define a code segment in \emph{Imp} : \begin{verbatim} <var:z1> := <var:g> ; <var:z2> := <var:z1> * <var:g> ; <var:z3> := <var:z2> * <var:g> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:5> ; <var:z2> := <var:z2> * <nat:5> ; <var:z3> := <var:z3> * <nat:4> ; <var:O> := <var:z3> <var:O> := <var:O> + <var:z2> <var:O> := <var:O> + <var:z1> <var:O> := <var:O> + <var:z0> \end{verbatim} Given that $ <var:g> = <var:F> $ prior to running this list of commands it must be that we see $ <var:O> = <nat:4> \times <var:F> ^ <nat:3> + <nat:5> \times <var:F> ^ <nat:2> + <nat:5> \times <var:F> + <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for the segment of code can be done through Hoare logic . Taking a look at the next statement seen in our code segment , we see the variable update statement defining $ <var:g> $ as $ <var:z1>$ . This redefines the precondition $ \{ <var:g> = <var:F> \} $ toward the postcondition $ \{ <var:g> = <var:F> \land <var:z1> = <var:F> \} $ . Moving forward , we see the code binding $ <var:z1> * <var:g> $ as $ <var:z2>$ . This line advances the condition $ \{ <var:g> = <var:F> \land <var:z1> = <var:F> \} $ into the condition $ \{ <var:g> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \} $ . Moving onward , we have the variable assignmet statement \verb | <var:z3> := <var:z2> * <var:g> ; | . This redefines the precondition $ \{ <var:g> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \} $ into the condition $ \{ <var:g> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \} $ . This is given by the assignment rule defined by typical Hoare reasoning . Keeping momentum , we see the assignment code \verb | <var:z0> := <nat:6> ; | . This code transfers the precondition $ \{ <var:g> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \} $ into $ \{ <var:g> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} $ . Moving on to the next step , we have the assignment statement giving $ <var:z1> * <nat:5> $ toward $ <var:z1>$ . This redefines $ \{ <var:g> = <var:F> \land <var:z1> = <var:F> \land <var:z2> = <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} $ to the condition $ \{ <var:g> = <var:F> \land <var:z1> = <nat:5> \times <var:F> \land <var:z2> = <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} $ . This is sound using the assignment inference rule from Hoare techniques . Next , the variable assignmet line \verb | <var:z2> := <var:z2> * <nat:5> ; | . This code transfers the condition $ \{ <var:g> = <var:F> \land <var:z1> = <nat:5> \times <var:F> \land <var:z2> = <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} $ toward $ \{ <var:g> = <var:F> \land <var:z1> = <nat:5> \times <var:F> \land <var:z2> = <nat:5> \times <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} $ . Observing the subsequent bit of code found in the list of instructions , we have the variable binding statement letting $ <var:z3> * <nat:4> $ as $ <var:z3>$ . This redefines $ \{ <var:g> = <var:F> \land <var:z1> = <nat:5> \times <var:F> \land <var:z2> = <nat:5> \times <var:F> ^ <nat:2> \land <var:z3> = <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} $ to the postcondition $ \{ <var:g> = <var:F> \land <var:z1> = <nat:5> \times <var:F> \land <var:z2> = <nat:5> \times <var:F> ^ <nat:2> \land <var:z3> = <nat:4> \times <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} $ . Moving onward , we see the environment update code letting $ <var:z3$ into $ <var:O>$ . This redefines $ \{ <var:g> = <var:F> \land <var:z1> = <nat:5> \times <var:F> \land <var:z2> = <nat:5> \times <var:F> ^ <nat:2> \land <var:z3> = <nat:4> \times <var:F> ^ <nat:3> \land <var:z0> = <nat:6> \} $ toward the condition $ \{ <var:g> = <var:F> \land <var:z1> = <nat:5> \times <var:F> \land <var:z2> = <nat:5> \times <var:F> ^ <nat:2> \land <var:z0> = <nat:6> \land <var:O> = <nat:4> \times <var:F> ^ <nat:3> \} $ . Advancing to the upcoming line of code contained in our list of commands , we have the variable assignmet line \verb | <var:O> := <var:O> + <var:z2> | . This line moves the condition $ \{ <var:g> = <var:F> \land <var:z1> = <nat:5> \times <var:F> \land <var:z2> = <nat:5> \times <var:F> ^ <nat:2> \land <var:z0> = <nat:6> \land <var:O> = <nat:4> \times <var:F> ^ <nat:3> \} $ toward the postcondition $ \{ <var:g> = <var:F> \land <var:z1> = <nat:5> \times <var:F> \land <var:z0> = <nat:6> \land <var:O> = <nat:4> \times <var:F> ^ <nat:3> + <nat:5> \times <var:F> ^ <nat:2> \} $ . Focusing on the proceeding command found in the code , the code binding $ <var:O> + <var:z1$ into $ <var:O>$ . This line forwards the condition $ \{ <var:g> = <var:F> \land <var:z1> = <nat:5> \times <var:F> \land <var:z0> = <nat:6> \land <var:O> = <nat:4> \times <var:F> ^ <nat:3> + <nat:5> \times <var:F> ^ <nat:2> \} $ toward $ \{ <var:g> = <var:F> \land <var:z0> = <nat:6> \land <var:O> = <nat:4> \times <var:F> ^ <nat:3> + <nat:5> \times <var:F> ^ <nat:2> + <nat:5> \times <var:F> \} $ . This is guaranteed through the assignment inference rule defined by typical Hoare reasoning . Honing in on the subsequent statement seen in the code segment , we see the assignment statement binding $ <var:O> + <var:z0$ as $ <var:O>$ . This moves the condition $ \{ <var:g> = <var:F> \land <var:z0> = <nat:6> \land <var:O> = <nat:4> \times <var:F> ^ <nat:3> + <nat:5> \times <var:F> ^ <nat:2> + <nat:5> \times <var:F> \} $ to $ \{ <var:g> = <var:F> \land <var:O> = <nat:4> \times <var:F> ^ <nat:3> + <nat:5> \times <var:F> ^ <nat:2> + <nat:5> \times <var:F> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:g> = <var:F> }} <var:z1> := <var:g> ; <var:z2> := <var:z1> * <var:g> ; <var:z3> := <var:z2> * <var:g> ; <var:z0> := <nat:6> ; <var:z1> := <var:z1> * <nat:5> ; <var:z2> := <var:z2> * <nat:5> ; <var:z3> := <var:z3> * <nat:4> ; <var:O> := <var:z3> <var:O> := <var:O> + <var:z2> <var:O> := <var:O> + <var:z1> <var:O> := <var:O> + <var:z0> {{ <var:O> = <nat:4> * <var:F> ^ <nat:3> + <nat:5> * <var:F> ^ <nat:2> + <nat:5> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:z1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:z1> = <var:F> /\ <var:z2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:z1> = <var:F> /\ <var:z2> = <var:F> ^ <nat:2> /\ <var:z3> = <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:z1> = <var:F> /\ <var:z2> = <var:F> ^ <nat:2> /\ <var:z3> = <var:F> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:z1> = <nat:5> * <var:F> /\ <var:z2> = <var:F> ^ <nat:2> /\ <var:z3> = <var:F> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:z1> = <nat:5> * <var:F> /\ <var:z2> = <nat:5> * <var:F> ^ <nat:2> /\ <var:z3> = <var:F> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:z1> = <nat:5> * <var:F> /\ <var:z2> = <nat:5> * <var:F> ^ <nat:2> /\ <var:z3> = <nat:4> * <var:F> ^ <nat:3> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:z1> = <nat:5> * <var:F> /\ <var:z2> = <nat:5> * <var:F> ^ <nat:2> /\ <var:z0> = <nat:6> /\ <var:O> = <nat:4> * <var:F> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:z1> = <nat:5> * <var:F> /\ <var:z0> = <nat:6> /\ <var:O> = <nat:4> * <var:F> ^ <nat:3> + <nat:5> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:z0> = <nat:6> /\ <var:O> = <nat:4> * <var:F> ^ <nat:3> + <nat:5> * <var:F> ^ <nat:2> + <nat:5> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:F> /\ <var:O> = <nat:4> * <var:F> ^ <nat:3> + <nat:5> * <var:F> ^ <nat:2> + <nat:5> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 