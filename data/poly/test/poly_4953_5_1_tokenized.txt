\begin{document} \begin{theorem} We define the following series of commands in \emph{Imp} such that \begin{verbatim} <var:X1> := <var:m> ; <var:X0> := <nat:5> ; <var:X1> := <var:X1> * <nat:8> ; <var:Q> := <var:X1> <var:Q> := <var:Q> + <var:X0> \end{verbatim} Allowing that we have $ <var:m> = <var:d> $ ( taking $ <var:d> \in \mathbb{N} $ ) prior to evaluating the list of instructions , it follows that $ <var:Q> = <nat:8> \times <var:d> + <nat:5> $ once set of commands exits . \end{theorem} \begin{proof} Arguing the correctness of our code segment can be given by Hoare logic . Going to the next step , we see the binding line \verb | <var:X1> := <var:m> ; | . This code redefines the precondition $ \{ <var:m> = <var:d> \} $ toward $ \{ <var:m> = <var:d> \land <var:X1> = <var:d> \} $ . Keeping momentum , the assignment statement assigning $ <nat:5> $ into $ <var:X0>$ . This transfers the condition $ \{ <var:m> = <var:d> \land <var:X1> = <var:d> \} $ as the condition $ \{ <var:m> = <var:d> \land <var:X1> = <var:d> \land <var:X0> = <nat:5> \} $ . This is known to be sound by the assignment rule found in typical Hoare techniques . Following , the environment update command yielding $ <var:X1> * <nat:8> $ to $ <var:X1>$ . This moves the condition $ \{ <var:m> = <var:d> \land <var:X1> = <var:d> \land <var:X0> = <nat:5> \} $ toward the postcondition $ \{ <var:m> = <var:d> \land <var:X1> = <nat:8> * <var:d> \land <var:X0> = <nat:5> \} $ . Focusing on the upcoming line of code in our segment of code , the assignment statement \verb | <var:Q> := <var:X1> | . This command forwards the condition $ \{ <var:m> = <var:d> \land <var:X1> = <nat:8> * <var:d> \land <var:X0> = <nat:5> \} $ as the postcondition $ \{ <var:m> = <var:d> \land <var:X0> = <nat:5> \land <var:Q> = <nat:8> * <var:d> \} $ . This is shown using the assignment scheme of Hoare logic . Focusing on the upcoming bit of code contained in the list of instructions , we see the variable update command giving $ <var:Q> + <var:X0$ into $ <var:Q>$ . This statement forwards the precondition $ \{ <var:m> = <var:d> \land <var:X0> = <nat:5> \land <var:Q> = <nat:8> * <var:d> \} $ to the condition $ \{ <var:m> = <var:d> \land <var:Q> = <nat:8> * <var:d> + <nat:5> \} $ . This is shown using the assignment law given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:m> = <var:d> }} <var:X1> := <var:m> ; <var:X0> := <nat:5> ; <var:X1> := <var:X1> * <nat:8> ; <var:Q> := <var:X1> <var:Q> := <var:Q> + <var:X0> {{ <var:Q> = <nat:8> * <var:d> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:X1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:X1> = <var:d> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:X1> = <nat:8> * <var:d> /\ <var:X0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:X0> = <nat:5> /\ <var:Q> = <nat:8> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:d> /\ <var:Q> = <nat:8> * <var:d> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 