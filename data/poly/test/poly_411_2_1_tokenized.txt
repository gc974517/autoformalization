\begin{document} \begin{theorem} We define a set of commands as follows \begin{verbatim} <var:M0> := <nat:3> ; <var:L> := <var:M0> \end{verbatim} Assume it to hold that $ <var:N> = <var:C> $ , for all positive numbers $ <var:C> $ , prior to running our set of instructions it must be that $ <var:L> = <nat:3> $ after set of commands has executed . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is shown through the below decorated code . \begin{eqnarray} \{ <var:N> = <var:C> \} \\ <var:M0> := <nat:3> ; \\ \{ <var:N> = <var:C> \land <var:M0> = <nat:3> \} \\ <var:L> := <var:M0> \\ \{ <var:N> = <var:C> \land <var:L> = <nat:3> \} \end{eqnarray} Applying Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:N> = <var:C> }} <var:M0> := <nat:3> ; <var:L> := <var:M0> {{ <var:L> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:C> /\ <var:L> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 