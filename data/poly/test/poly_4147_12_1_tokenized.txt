\begin{document} \begin{theorem} Consider a segment of code : \begin{verbatim} <var:r1> := <var:A> ; <var:r2> := <var:r1> * <var:A> ; <var:r3> := <var:r2> * <var:A> ; <var:r4> := <var:r3> * <var:A> ; <var:r0> := <nat:2> ; <var:r2> := <var:r2> * <nat:9> ; <var:r3> := <var:r3> * <nat:8> ; <var:r4> := <var:r4> * <nat:8> ; <var:c> := <var:r4> <var:c> := <var:c> + <var:r3> <var:c> := <var:c> + <var:r2> <var:c> := <var:c> + <var:r0> \end{verbatim} Allow that we have $ <var:A> = <var:g> $ ( for every natural coefficients $ <var:g> $ ) before the execution of our list of instructions , then $ <var:c> = <nat:8> \times <var:g> ^ <nat:4> + <nat:8> \times <var:g> ^ <nat:3> + <nat:9> \times <var:g> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} See that the following decorated set of instructions . \begin{eqnarray} \{ <var:A> = <var:g> \} \\ <var:r1> := <var:A> ; \\ \{ <var:A> = <var:g> \land <var:r1> = <var:g> \} \\ <var:r2> := <var:r1> * <var:A> ; \\ \{ <var:A> = <var:g> \land <var:r1> = <var:g> \land <var:r2> = <var:g> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:A> ; \\ \{ <var:A> = <var:g> \land <var:r1> = <var:g> \land <var:r2> = <var:g> ^ <nat:2> \land <var:r3> = <var:g> ^ <nat:3> \} \\ <var:r4> := <var:r3> * <var:A> ; \\ \{ <var:A> = <var:g> \land <var:r1> = <var:g> \land <var:r2> = <var:g> ^ <nat:2> \land <var:r3> = <var:g> ^ <nat:3> \land <var:r4> = <var:g> ^ <nat:4> \} \\ <var:r0> := <nat:2> ; \\ \{ <var:A> = <var:g> \land <var:r1> = <var:g> \land <var:r2> = <var:g> ^ <nat:2> \land <var:r3> = <var:g> ^ <nat:3> \land <var:r4> = <var:g> ^ <nat:4> \land <var:r0> = <nat:2> \} \\ <var:r2> := <var:r2> * <nat:9> ; \\ \{ <var:A> = <var:g> \land <var:r1> = <var:g> \land <var:r2> = <nat:9> * <var:g> ^ <nat:2> \land <var:r3> = <var:g> ^ <nat:3> \land <var:r4> = <var:g> ^ <nat:4> \land <var:r0> = <nat:2> \} \\ <var:r3> := <var:r3> * <nat:8> ; \\ \{ <var:A> = <var:g> \land <var:r1> = <var:g> \land <var:r2> = <nat:9> * <var:g> ^ <nat:2> \land <var:r3> = <nat:8> * <var:g> ^ <nat:3> \land <var:r4> = <var:g> ^ <nat:4> \land <var:r0> = <nat:2> \} \\ <var:r4> := <var:r4> * <nat:8> ; \\ \{ <var:A> = <var:g> \land <var:r1> = <var:g> \land <var:r2> = <nat:9> * <var:g> ^ <nat:2> \land <var:r3> = <nat:8> * <var:g> ^ <nat:3> \land <var:r4> = <nat:8> * <var:g> ^ <nat:4> \land <var:r0> = <nat:2> \} \\ <var:c> := <var:r4> \\ \{ <var:A> = <var:g> \land <var:r1> = <var:g> \land <var:r2> = <nat:9> * <var:g> ^ <nat:2> \land <var:r3> = <nat:8> * <var:g> ^ <nat:3> \land <var:r0> = <nat:2> \land <var:c> = <nat:8> * <var:g> ^ <nat:4> \} \end{eqnarray} Advancing interpreting our code segment gives us : \begin{eqnarray} <var:c> := <var:c> + <var:r3> \\ \{ <var:A> = <var:g> \land <var:r1> = <var:g> \land <var:r2> = <nat:9> * <var:g> ^ <nat:2> \land <var:r0> = <nat:2> \land <var:c> = <nat:8> * <var:g> ^ <nat:4> + <nat:8> * <var:g> ^ <nat:3> \} \\ <var:c> := <var:c> + <var:r2> \\ \{ <var:A> = <var:g> \land <var:r1> = <var:g> \land <var:r0> = <nat:2> \land <var:c> = <nat:8> * <var:g> ^ <nat:4> + <nat:8> * <var:g> ^ <nat:3> + <nat:9> * <var:g> ^ <nat:2> \} \\ <var:c> := <var:c> + <var:r0> \\ \{ <var:A> = <var:g> \land <var:c> = <nat:8> * <var:g> ^ <nat:4> + <nat:8> * <var:g> ^ <nat:3> + <nat:9> * <var:g> ^ <nat:2> + <nat:2> \} \end{eqnarray} The application of Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <var:r4> : string := " <var:r4> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:A> = <var:g> }} <var:r1> := <var:A> ; <var:r2> := <var:r1> * <var:A> ; <var:r3> := <var:r2> * <var:A> ; <var:r4> := <var:r3> * <var:A> ; <var:r0> := <nat:2> ; <var:r2> := <var:r2> * <nat:9> ; <var:r3> := <var:r3> * <nat:8> ; <var:r4> := <var:r4> * <nat:8> ; <var:c> := <var:r4> <var:c> := <var:c> + <var:r3> <var:c> := <var:c> + <var:r2> <var:c> := <var:c> + <var:r0> {{ <var:c> = <nat:8> * <var:g> ^ <nat:4> + <nat:8> * <var:g> ^ <nat:3> + <nat:9> * <var:g> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r1> = <var:g> /\ <var:r2> = <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r1> = <var:g> /\ <var:r2> = <var:g> ^ <nat:2> /\ <var:r3> = <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r1> = <var:g> /\ <var:r2> = <var:g> ^ <nat:2> /\ <var:r3> = <var:g> ^ <nat:3> /\ <var:r4> = <var:g> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r1> = <var:g> /\ <var:r2> = <var:g> ^ <nat:2> /\ <var:r3> = <var:g> ^ <nat:3> /\ <var:r4> = <var:g> ^ <nat:4> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r1> = <var:g> /\ <var:r2> = <nat:9> * <var:g> ^ <nat:2> /\ <var:r3> = <var:g> ^ <nat:3> /\ <var:r4> = <var:g> ^ <nat:4> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r1> = <var:g> /\ <var:r2> = <nat:9> * <var:g> ^ <nat:2> /\ <var:r3> = <nat:8> * <var:g> ^ <nat:3> /\ <var:r4> = <var:g> ^ <nat:4> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r1> = <var:g> /\ <var:r2> = <nat:9> * <var:g> ^ <nat:2> /\ <var:r3> = <nat:8> * <var:g> ^ <nat:3> /\ <var:r4> = <nat:8> * <var:g> ^ <nat:4> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r1> = <var:g> /\ <var:r2> = <nat:9> * <var:g> ^ <nat:2> /\ <var:r3> = <nat:8> * <var:g> ^ <nat:3> /\ <var:r0> = <nat:2> /\ <var:c> = <nat:8> * <var:g> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r1> = <var:g> /\ <var:r2> = <nat:9> * <var:g> ^ <nat:2> /\ <var:r0> = <nat:2> /\ <var:c> = <nat:8> * <var:g> ^ <nat:4> + <nat:8> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:r1> = <var:g> /\ <var:r0> = <nat:2> /\ <var:c> = <nat:8> * <var:g> ^ <nat:4> + <nat:8> * <var:g> ^ <nat:3> + <nat:9> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:g> /\ <var:c> = <nat:8> * <var:g> ^ <nat:4> + <nat:8> * <var:g> ^ <nat:3> + <nat:9> * <var:g> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 