\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:E> ; <var:d2> := <var:d1> * <var:E> ; <var:d3> := <var:d2> * <var:E> ; <var:d0> := <nat:5> ; <var:d1> := <var:d1> * <nat:3> ; <var:d2> := <var:d2> * <nat:5> ; <var:d3> := <var:d3> * <nat:3> ; <var:f> := <var:d3> <var:f> := <var:f> + <var:d2> <var:f> := <var:f> + <var:d1> <var:f> := <var:f> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:E> = <var:x> $ taking positive coefficients $ <var:x> $ prior to executing our code , it must be that $ <var:f> = <nat:3> \times <var:x> ^ <nat:3> + <nat:5> \times <var:x> ^ <nat:2> + <nat:3> \times <var:x> + <nat:5> $ . \end{theorem} \begin{proof} The argument for the set of commands can be seen through Hoare techniques . Moving on to the next step , we see the command assigning $ <var:E> $ toward $ <var:d1>$ . This statement moves $ \{ <var:E> = <var:x> \} $ to the postcondition $ \{ <var:E> = <var:x> \land <var:d1> = <var:x> \} $ . This is rigorously given through the assignment scheme given in standard Hoare logic . Advancing , the variable binding code binding $ <var:d1> * <var:E> $ to $ <var:d2>$ . This takes the condition $ \{ <var:E> = <var:x> \land <var:d1> = <var:x> \} $ into the condition $ \{ <var:E> = <var:x> \land <var:d1> = <var:x> \land <var:d2> = <var:x> ^ <nat:2> \} $ . This is shown through the assignment rule obtained from typical Hoare logic . Going forward , we have the variable update statement letting $ <var:d2> * <var:E> $ as $ <var:d3>$ . This command redefines $ \{ <var:E> = <var:x> \land <var:d1> = <var:x> \land <var:d2> = <var:x> ^ <nat:2> \} $ toward $ \{ <var:E> = <var:x> \land <var:d1> = <var:x> \land <var:d2> = <var:x> ^ <nat:2> \land <var:d3> = <var:x> ^ <nat:3> \} $ . Moving on to the next step , we see the variable binding line \verb | <var:d0> := <nat:5> ; | . This code forwards the condition $ \{ <var:E> = <var:x> \land <var:d1> = <var:x> \land <var:d2> = <var:x> ^ <nat:2> \land <var:d3> = <var:x> ^ <nat:3> \} $ into the condition $ \{ <var:E> = <var:x> \land <var:d1> = <var:x> \land <var:d2> = <var:x> ^ <nat:2> \land <var:d3> = <var:x> ^ <nat:3> \land <var:d0> = <nat:5> \} $ . This is deduced using the assignment rule defined in Hoare techniques . Going forward , we see the command \verb | <var:d1> := <var:d1> * <nat:3> ; | . This line transfers the condition $ \{ <var:E> = <var:x> \land <var:d1> = <var:x> \land <var:d2> = <var:x> ^ <nat:2> \land <var:d3> = <var:x> ^ <nat:3> \land <var:d0> = <nat:5> \} $ as $ \{ <var:E> = <var:x> \land <var:d1> = <nat:3> * <var:x> \land <var:d2> = <var:x> ^ <nat:2> \land <var:d3> = <var:x> ^ <nat:3> \land <var:d0> = <nat:5> \} $ . Considering the upcoming bit of code in our set of commands , we see the variable assignmet statement defining $ <var:d2> * <nat:5> $ into $ <var:d2>$ . This redefines the condition $ \{ <var:E> = <var:x> \land <var:d1> = <nat:3> * <var:x> \land <var:d2> = <var:x> ^ <nat:2> \land <var:d3> = <var:x> ^ <nat:3> \land <var:d0> = <nat:5> \} $ toward the postcondition $ \{ <var:E> = <var:x> \land <var:d1> = <nat:3> * <var:x> \land <var:d2> = <nat:5> * <var:x> ^ <nat:2> \land <var:d3> = <var:x> ^ <nat:3> \land <var:d0> = <nat:5> \} $ . Looking at the following command seen in our set of commands , the line giving $ <var:d3> * <nat:3> $ as $ <var:d3>$ . This transfers the precondition $ \{ <var:E> = <var:x> \land <var:d1> = <nat:3> * <var:x> \land <var:d2> = <nat:5> * <var:x> ^ <nat:2> \land <var:d3> = <var:x> ^ <nat:3> \land <var:d0> = <nat:5> \} $ as the condition $ \{ <var:E> = <var:x> \land <var:d1> = <nat:3> * <var:x> \land <var:d2> = <nat:5> * <var:x> ^ <nat:2> \land <var:d3> = <nat:3> * <var:x> ^ <nat:3> \land <var:d0> = <nat:5> \} $ . This is given with the assignment scheme of usual Hoare techniques . Considering the upcoming line of code seen in our series of instructions , we see the variable update statement \verb | <var:f> := <var:d3> | . This statement redefines the condition $ \{ <var:E> = <var:x> \land <var:d1> = <nat:3> * <var:x> \land <var:d2> = <nat:5> * <var:x> ^ <nat:2> \land <var:d3> = <nat:3> * <var:x> ^ <nat:3> \land <var:d0> = <nat:5> \} $ as the postcondition $ \{ <var:E> = <var:x> \land <var:d1> = <nat:3> * <var:x> \land <var:d2> = <nat:5> * <var:x> ^ <nat:2> \land <var:d0> = <nat:5> \land <var:f> = <nat:3> * <var:x> ^ <nat:3> \} $ . Moving onward , we have the code assigning $ <var:f> + <var:d2$ to $ <var:f>$ . This statement transfers $ \{ <var:E> = <var:x> \land <var:d1> = <nat:3> * <var:x> \land <var:d2> = <nat:5> * <var:x> ^ <nat:2> \land <var:d0> = <nat:5> \land <var:f> = <nat:3> * <var:x> ^ <nat:3> \} $ as $ \{ <var:E> = <var:x> \land <var:d1> = <nat:3> * <var:x> \land <var:d0> = <nat:5> \land <var:f> = <nat:3> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> \} $ . Moving on to the following statement contained in our series of instructions , we have the code giving $ <var:f> + <var:d1$ as $ <var:f>$ . This line moves $ \{ <var:E> = <var:x> \land <var:d1> = <nat:3> * <var:x> \land <var:d0> = <nat:5> \land <var:f> = <nat:3> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> \} $ toward $ \{ <var:E> = <var:x> \land <var:d0> = <nat:5> \land <var:f> = <nat:3> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:3> * <var:x> \} $ . This is shown with the assignment inference rule of usual Hoare reasoning . Going forward , the variable update statement giving $ <var:f> + <var:d0$ into $ <var:f>$ . This forwards the condition $ \{ <var:E> = <var:x> \land <var:d0> = <nat:5> \land <var:f> = <nat:3> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:3> * <var:x> \} $ as the postcondition $ \{ <var:E> = <var:x> \land <var:f> = <nat:3> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <def:poly> := <var:d1> := <var:E> ; <var:d2> := <var:d1> * <var:E> ; <var:d3> := <var:d2> * <var:E> ; <var:d0> := <nat:5> ; <var:d1> := <var:d1> * <nat:3> ; <var:d2> := <var:d2> * <nat:5> ; <var:d3> := <var:d3> * <nat:3> ; <var:f> := <var:d3> <var:f> := <var:f> + <var:d2> <var:f> := <var:f> + <var:d1> <var:f> := <var:f> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:E> = <var:x> }} <def:poly> {{ <var:f> = <nat:3> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:d1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:d1> = <var:x> /\ <var:d2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:d1> = <var:x> /\ <var:d2> = <var:x> ^ <nat:2> /\ <var:d3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:d1> = <var:x> /\ <var:d2> = <var:x> ^ <nat:2> /\ <var:d3> = <var:x> ^ <nat:3> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:d1> = <nat:3> * <var:x> /\ <var:d2> = <var:x> ^ <nat:2> /\ <var:d3> = <var:x> ^ <nat:3> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:d1> = <nat:3> * <var:x> /\ <var:d2> = <nat:5> * <var:x> ^ <nat:2> /\ <var:d3> = <var:x> ^ <nat:3> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:d1> = <nat:3> * <var:x> /\ <var:d2> = <nat:5> * <var:x> ^ <nat:2> /\ <var:d3> = <nat:3> * <var:x> ^ <nat:3> /\ <var:d0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:d1> = <nat:3> * <var:x> /\ <var:d2> = <nat:5> * <var:x> ^ <nat:2> /\ <var:d0> = <nat:5> /\ <var:f> = <nat:3> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:d1> = <nat:3> * <var:x> /\ <var:d0> = <nat:5> /\ <var:f> = <nat:3> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:d0> = <nat:5> /\ <var:f> = <nat:3> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:3> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:x> /\ <var:f> = <nat:3> * <var:x> ^ <nat:3> + <nat:5> * <var:x> ^ <nat:2> + <nat:3> * <var:x> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 