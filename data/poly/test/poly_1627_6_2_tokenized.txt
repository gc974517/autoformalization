\begin{document} \begin{theorem} We define a code segment in \emph{Imp} such that \begin{verbatim} <var:U> := <nat:1> ; <var:U> := <nat:4> + <var:U> * <var:W> ; <var:U> := <nat:3> + <var:U> * <var:W> ; <var:U> := <nat:4> + <var:U> * <var:W> ; <var:U> := <var:U> * <var:W> ; <var:U> := <nat:1> + <var:U> * <var:W> \end{verbatim} Allow --- for all positive integer coefficients $ <var:A> $ --- $ <var:W> = <var:A> $ ahead of evaluating the set of commands then we have $ <var:U> = <nat:1> \times <var:A> ^ <nat:5> + <nat:4> \times <var:A> ^ <nat:4> + <nat:3> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> ^ <nat:2> + <nat:1> $ after list of instructions is done executing . \end{theorem} \begin{proof} The proof of the program is done using standard Hoare logic . Observing the subsequent lines of codeseen in the set of commands , we have \verb | { <var:W> = <var:A> } <var:U> := <nat:1> { <var:W> = <var:A> \land <var:U> = <nat:1> } | , \verb | { <var:W> = <var:A> \land <var:U> = <nat:1> } <var:U> := <nat:4> + <var:U> * <var:W> { <var:W> = <var:A> \land <var:U> = <nat:1> * <var:A> + <nat:4> } | , \verb | { <var:W> = <var:A> \land <var:U> = <nat:1> * <var:A> + <nat:4> } <var:U> := <nat:3> + <var:U> * <var:W> { <var:W> = <var:A> \land <var:U> = <nat:1> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:3> } | , \verb | { <var:W> = <var:A> \land <var:U> = <nat:1> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:3> } <var:U> := <nat:4> + <var:U> * <var:W> { <var:W> = <var:A> \land <var:U> = <nat:1> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:4> } | and \verb | { <var:W> = <var:A> \land <var:U> = <nat:1> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:4> } <var:U> := <var:U> * <var:W> { <var:W> = <var:A> \land <var:U> = <nat:1> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + } | . Keeping momentum , we see \verb | { <var:W> = <var:A> } <var:U> := <nat:1> { <var:W> = <var:A> \land <var:U> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:W> = <var:A> }} <var:U> := <nat:1> ; <var:U> := <nat:4> + <var:U> * <var:W> ; <var:U> := <nat:3> + <var:U> * <var:W> ; <var:U> := <nat:4> + <var:U> * <var:W> ; <var:U> := <var:U> * <var:W> ; <var:U> := <nat:1> + <var:U> * <var:W> {{ <var:U> = <nat:1> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:U> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:U> = <nat:1> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:U> = <nat:1> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:U> = <nat:1> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:U> = <nat:1> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:4> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:U> = <nat:1> * <var:A> ^ <nat:5> + <nat:4> * <var:A> ^ <nat:4> + <nat:3> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 