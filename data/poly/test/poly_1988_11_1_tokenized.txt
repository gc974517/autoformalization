\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e1> := <var:p> ; <var:e2> := <var:e1> * <var:p> ; <var:e3> := <var:e2> * <var:p> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:7> ; <var:e2> := <var:e2> * <nat:6> ; <var:e3> := <var:e3> * <nat:4> ; <var:J> := <var:e3> <var:J> := <var:J> + <var:e2> <var:J> := <var:J> + <var:e1> <var:J> := <var:J> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:p> = <var:P> $ prior to evaluating this set of commands , it must be that we see $ <var:J> = <nat:4> \times <var:P> ^ <nat:3> + <nat:6> \times <var:P> ^ <nat:2> + <nat:7> \times <var:P> + <nat:5> $ once list of instructions executes . \end{theorem} \begin{proof} Using typical Hoare reasoning yields : \begin{eqnarray} \{ <var:p> = <var:P> \} \\ <var:e1> := <var:p> ; \\ \{ <var:p> = <var:P> \land <var:e1> = <var:P> \} \\ <var:e2> := <var:e1> * <var:p> ; \\ \{ <var:p> = <var:P> \land <var:e1> = <var:P> \land <var:e2> = <var:P> ^ <nat:2> \} \\ <var:e3> := <var:e2> * <var:p> ; \\ \{ <var:p> = <var:P> \land <var:e1> = <var:P> \land <var:e2> = <var:P> ^ <nat:2> \land <var:e3> = <var:P> ^ <nat:3> \} \\ <var:e0> := <nat:5> ; \\ \{ <var:p> = <var:P> \land <var:e1> = <var:P> \land <var:e2> = <var:P> ^ <nat:2> \land <var:e3> = <var:P> ^ <nat:3> \land <var:e0> = <nat:5> \} \\ <var:e1> := <var:e1> * <nat:7> ; \\ \{ <var:p> = <var:P> \land <var:e1> = <nat:7> * <var:P> \land <var:e2> = <var:P> ^ <nat:2> \land <var:e3> = <var:P> ^ <nat:3> \land <var:e0> = <nat:5> \} \\ <var:e2> := <var:e2> * <nat:6> ; \\ \{ <var:p> = <var:P> \land <var:e1> = <nat:7> * <var:P> \land <var:e2> = <nat:6> * <var:P> ^ <nat:2> \land <var:e3> = <var:P> ^ <nat:3> \land <var:e0> = <nat:5> \} \\ <var:e3> := <var:e3> * <nat:4> ; \\ \{ <var:p> = <var:P> \land <var:e1> = <nat:7> * <var:P> \land <var:e2> = <nat:6> * <var:P> ^ <nat:2> \land <var:e3> = <nat:4> * <var:P> ^ <nat:3> \land <var:e0> = <nat:5> \} \\ <var:J> := <var:e3> \\ \{ <var:p> = <var:P> \land <var:e1> = <nat:7> * <var:P> \land <var:e2> = <nat:6> * <var:P> ^ <nat:2> \land <var:e0> = <nat:5> \land <var:J> = <nat:4> * <var:P> ^ <nat:3> \} \\ <var:J> := <var:J> + <var:e2> \\ \{ <var:p> = <var:P> \land <var:e1> = <nat:7> * <var:P> \land <var:e0> = <nat:5> \land <var:J> = <nat:4> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:e1> \\ \{ <var:p> = <var:P> \land <var:e0> = <nat:5> \land <var:J> = <nat:4> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> + <nat:7> * <var:P> \} \\ <var:J> := <var:J> + <var:e0> \\ \{ <var:p> = <var:P> \land <var:J> = <nat:4> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> + <nat:7> * <var:P> + <nat:5> \} \end{eqnarray} Given the preceding argument , this code segment has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:p> ; <var:e2> := <var:e1> * <var:p> ; <var:e3> := <var:e2> * <var:p> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:7> ; <var:e2> := <var:e2> * <nat:6> ; <var:e3> := <var:e3> * <nat:4> ; <var:J> := <var:e3> <var:J> := <var:J> + <var:e2> <var:J> := <var:J> + <var:e1> <var:J> := <var:J> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:p> = <var:P> }} <def:poly> {{ <var:J> = <nat:4> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> + <nat:7> * <var:P> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:e1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:e1> = <var:P> /\ <var:e2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:e1> = <var:P> /\ <var:e2> = <var:P> ^ <nat:2> /\ <var:e3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:e1> = <var:P> /\ <var:e2> = <var:P> ^ <nat:2> /\ <var:e3> = <var:P> ^ <nat:3> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:e1> = <nat:7> * <var:P> /\ <var:e2> = <var:P> ^ <nat:2> /\ <var:e3> = <var:P> ^ <nat:3> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:e1> = <nat:7> * <var:P> /\ <var:e2> = <nat:6> * <var:P> ^ <nat:2> /\ <var:e3> = <var:P> ^ <nat:3> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:e1> = <nat:7> * <var:P> /\ <var:e2> = <nat:6> * <var:P> ^ <nat:2> /\ <var:e3> = <nat:4> * <var:P> ^ <nat:3> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:e1> = <nat:7> * <var:P> /\ <var:e2> = <nat:6> * <var:P> ^ <nat:2> /\ <var:e0> = <nat:5> /\ <var:J> = <nat:4> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:e1> = <nat:7> * <var:P> /\ <var:e0> = <nat:5> /\ <var:J> = <nat:4> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:e0> = <nat:5> /\ <var:J> = <nat:4> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> + <nat:7> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:P> /\ <var:J> = <nat:4> * <var:P> ^ <nat:3> + <nat:6> * <var:P> ^ <nat:2> + <nat:7> * <var:P> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 