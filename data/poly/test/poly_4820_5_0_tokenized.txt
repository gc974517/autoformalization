\begin{document} \begin{theorem} Define a list of instructions such that \begin{verbatim} <var:w0> := <nat:1> ; <var:w1> := <nat:1> ; <var:w1> := <var:w1> * <var:u> ; <var:A> := <var:w1> ; <var:A> := <var:A> + <var:w0> \end{verbatim} Allow it to be that $ <var:u> = <var:p> $ given all positive integer coefficients $ <var:p> $ before executing this list of commands , it must be that $ <var:A> = <nat:1> * <var:p> + <nat:1> $ once set of instructions has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code is evident by typical Hoare techniques . Moving onward , we have \verb | { <var:u> = <var:p> } <var:w0> := <nat:1> { <var:u> = <var:p> \land <var:w0> = <nat:1> } | . Taking a look at the next step contained in our list of commands , \verb | { <var:u> = <var:p> } <var:w0> := <nat:1> { <var:u> = <var:p> \land <var:w0> = <nat:1> } | . Immediately after , \verb | { <var:u> = <var:p> } <var:w0> := <nat:1> { <var:u> = <var:p> \land <var:w0> = <nat:1> } | , \verb | { <var:u> = <var:p> \land <var:w0> = <nat:1> } <var:w1> := <nat:1> { <var:u> = <var:p> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> } | and \verb | { <var:u> = <var:p> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> } <var:w1> := <var:w1> * <var:u> { <var:u> = <var:p> \land <var:w0> = <nat:1> \land <var:w1> = <nat:1> \cdot <var:p> } | . This is given through the assignment law defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:u> = <var:p> }} <var:w0> := <nat:1> ; <var:w1> := <nat:1> ; <var:w1> := <var:w1> * <var:u> ; <var:A> := <var:w1> ; <var:A> := <var:A> + <var:w0> {{ <var:A> = <nat:1> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:w0> = <nat:1> /\ <var:A> = <nat:1> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:p> /\ <var:A> = <nat:1> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 