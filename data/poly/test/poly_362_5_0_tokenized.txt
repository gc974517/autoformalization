\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:8> ; <var:w1> := <nat:8> ; <var:w1> := <var:w1> * <var:V> ; <var:p> := <var:w1> ; <var:p> := <var:p> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:V> = <var:E> $ before the execution of the list of instructions it must be that $ <var:p> = <nat:8> * <var:E> + <nat:8> $ once series of commands has exited . \end{theorem} \begin{proof} The application of Hoare logic produces : \begin{eqnarray} \{ <var:V> = <var:E> \} \\ <var:w0> := <nat:8> ; \\ \{ <var:V> = <var:E> \land <var:w0> = <nat:8> \} \\ <var:w1> := <nat:8> ; \\ \{ <var:V> = <var:E> \land <var:w0> = <nat:8> \land <var:w1> = <nat:8> \} \\ <var:w1> := <var:w1> * <var:V> ; \\ \{ <var:V> = <var:E> \land <var:w0> = <nat:8> \land <var:w1> = <nat:8> \times <var:E> \} \\ <var:p> := <var:w1> ; \\ \{ <var:V> = <var:E> \land <var:w0> = <nat:8> \land <var:p> = <nat:8> \times <var:E> \} \\ <var:p> := <var:p> + <var:w0> \\ \{ <var:V> = <var:E> \land <var:p> = <nat:8> \times <var:E> + <nat:8> \} \end{eqnarray} Hence , this set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <def:poly> := <var:w0> := <nat:8> ; <var:w1> := <nat:8> ; <var:w1> := <var:w1> * <var:V> ; <var:p> := <var:w1> ; <var:p> := <var:p> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:V> = <var:E> }} <def:poly> {{ <var:p> = <nat:8> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:E> /\ <var:w0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:E> /\ <var:w0> = <nat:8> /\ <var:w1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:E> /\ <var:w0> = <nat:8> /\ <var:w1> = <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:E> /\ <var:w0> = <nat:8> /\ <var:p> = <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:E> /\ <var:p> = <nat:8> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 