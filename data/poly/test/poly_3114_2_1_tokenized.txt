\begin{document} \begin{definition} Take the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:l0> := <nat:6> ; <var:d> := <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:M> = <var:P> $ before the execution of our program it holds that we have $ <var:d> = <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this program is given by typical Hoare reasoning . Moving forward to the next step , \begin{eqnarray} \{ <var:M> = <var:P> \} \, <var:l0> := <nat:6> \, \{ <var:M> = <var:P> \land <var:l0> = <nat:6> \} \end{eqnarray} Advancing to the next command seen in the list of instructions , we have \begin{eqnarray} \{ <var:M> = <var:P> \} \, <var:l0> := <nat:6> \, \{ <var:M> = <var:P> \land <var:l0> = <nat:6> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <def:poly> := <var:l0> := <nat:6> ; <var:d> := <var:l0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:M> = <var:P> }} <def:poly> {{ <var:d> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:P> /\ <var:d> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 