\begin{document} \begin{definition} Define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:A1> := <var:b> ; <var:A2> := <var:A1> * <var:b> ; <var:A0> := <nat:5> ; <var:A1> := <var:A1> * <nat:6> ; <var:A2> := <var:A2> * <nat:6> ; <var:H> := <var:A2> <var:H> := <var:H> + <var:A1> <var:H> := <var:H> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:b> = <var:h> $ ( for natural numbers $ <var:h> $ ) before the execution of this set of commands , then $ <var:H> = <nat:6> * <var:h> ^ <nat:2> + <nat:6> * <var:h> + <nat:5> $ when set of instructions is done . \end{theorem} \begin{proof} Observe the following decorated list of instructions . \begin{eqnarray} \{ <var:b> = <var:h> \} \\ <var:A1> := <var:b> ; \\ \{ <var:b> = <var:h> \land <var:A1> = <var:h> \} \\ <var:A2> := <var:A1> * <var:b> ; \\ \{ <var:b> = <var:h> \land <var:A1> = <var:h> \land <var:A2> = <var:h> ^ <nat:2> \} \\ <var:A0> := <nat:5> ; \\ \{ <var:b> = <var:h> \land <var:A1> = <var:h> \land <var:A2> = <var:h> ^ <nat:2> \land <var:A0> = <nat:5> \} \\ <var:A1> := <var:A1> * <nat:6> ; \\ \{ <var:b> = <var:h> \land <var:A1> = <nat:6> \cdot <var:h> \land <var:A2> = <var:h> ^ <nat:2> \land <var:A0> = <nat:5> \} \\ <var:A2> := <var:A2> * <nat:6> ; \\ \{ <var:b> = <var:h> \land <var:A1> = <nat:6> \cdot <var:h> \land <var:A2> = <nat:6> \cdot <var:h> ^ <nat:2> \land <var:A0> = <nat:5> \} \\ <var:H> := <var:A2> \\ \{ <var:b> = <var:h> \land <var:A1> = <nat:6> \cdot <var:h> \land <var:A0> = <nat:5> \land <var:H> = <nat:6> \cdot <var:h> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:A1> \\ \{ <var:b> = <var:h> \land <var:A0> = <nat:5> \land <var:H> = <nat:6> \cdot <var:h> ^ <nat:2> + <nat:6> \cdot <var:h> \} \\ <var:H> := <var:H> + <var:A0> \\ \{ <var:b> = <var:h> \land <var:H> = <nat:6> \cdot <var:h> ^ <nat:2> + <nat:6> \cdot <var:h> + <nat:5> \} \end{eqnarray} Applying Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <def:poly> := <var:A1> := <var:b> ; <var:A2> := <var:A1> * <var:b> ; <var:A0> := <nat:5> ; <var:A1> := <var:A1> * <nat:6> ; <var:A2> := <var:A2> * <nat:6> ; <var:H> := <var:A2> <var:H> := <var:H> + <var:A1> <var:H> := <var:H> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:b> = <var:h> }} <def:poly> {{ <var:H> = <nat:6> * <var:h> ^ <nat:2> + <nat:6> * <var:h> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:A1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:A1> = <var:h> /\ <var:A2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:A1> = <var:h> /\ <var:A2> = <var:h> ^ <nat:2> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:A1> = <nat:6> * <var:h> /\ <var:A2> = <var:h> ^ <nat:2> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:A1> = <nat:6> * <var:h> /\ <var:A2> = <nat:6> * <var:h> ^ <nat:2> /\ <var:A0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:A1> = <nat:6> * <var:h> /\ <var:A0> = <nat:5> /\ <var:H> = <nat:6> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:A0> = <nat:5> /\ <var:H> = <nat:6> * <var:h> ^ <nat:2> + <nat:6> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:h> /\ <var:H> = <nat:6> * <var:h> ^ <nat:2> + <nat:6> * <var:h> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 