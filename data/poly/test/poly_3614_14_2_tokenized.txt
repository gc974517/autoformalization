\begin{document} \begin{theorem} Define the following code as \begin{verbatim} <var:w> := <nat:4> ; <var:w> := <nat:4> + <var:w> * <var:U> ; <var:w> := <nat:4> + <var:w> * <var:U> ; <var:w> := <nat:2> + <var:w> * <var:U> ; <var:w> := <var:w> * <var:U> ; <var:w> := <var:w> * <var:U> ; <var:w> := <nat:4> + <var:w> * <var:U> ; <var:w> := <var:w> * <var:U> ; <var:w> := <var:w> * <var:U> ; <var:w> := <nat:2> + <var:w> * <var:U> ; <var:w> := <nat:4> + <var:w> * <var:U> ; <var:w> := <nat:1> + <var:w> * <var:U> ; <var:w> := <nat:4> + <var:w> * <var:U> ; <var:w> := <nat:4> + <var:w> * <var:U> \end{verbatim} Allowing , given all positive coefficients $ <var:i> $ , it to be that $ <var:U> = <var:i> $ prior to the execution of our set of instructions it follows that $ <var:w> = <nat:4> \cdot <var:i> ^ <nat:13> + <nat:4> \cdot <var:i> ^ <nat:12> + <nat:4> \cdot <var:i> ^ <nat:11> + <nat:2> \cdot <var:i> ^ <nat:10> + <nat:4> \cdot <var:i> ^ <nat:7> + <nat:2> \cdot <var:i> ^ <nat:4> + <nat:4> \cdot <var:i> ^ <nat:3> + <nat:1> \cdot <var:i> ^ <nat:2> + <nat:4> \cdot <var:i> + <nat:4> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions is demonstrated with standard Hoare techniques . Considering the following piece of code seen in the segment of code , we see the assignment statement \verb | <var:w> := <nat:4> ; | . This line forwards the precondition $ \{ <var:U> = <var:i> \} $ to the condition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> \} $ . Going to the next step , the variable assignmet code yielding $ <nat:4> + <var:w> * <var:U> $ into $ <var:w>$ . This takes $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> \} $ toward the postcondition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> + <nat:4> \} $ . This is given with the assignment scheme obtained from standard Hoare reasoning . Moving on to the upcoming line in our set of instructions , we see the assignment line letting $ <nat:4> + <var:w> * <var:U> $ toward $ <var:w>$ . This redefines the precondition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> + <nat:4> \} $ toward $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> \} $ . This is sound with the assignment rule defined in usual Hoare reasoning . Stepping through , we see the variable update statement \verb | <var:w> := <nat:2> + <var:w> * <var:U> ; | . This statement forwards $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> \} $ toward $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:2> \} $ . Shifting focus toward the subsequent statement seen in our code segment , we see the variable binding line binding $ <var:w> * <var:U> $ as $ <var:w>$ . This code takes the precondition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:2> \} $ into the condition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + \} $ . This is given using the assignment inference rule defined in usual Hoare reasoning . Going forward , we see the variable assignmet statement \verb | <var:w> := <var:w> * <var:U> ; | . This code forwards the precondition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + \} $ to the condition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + \} $ . This is known to be sound through the assignment law given in typical Hoare techniques . Honing in on the following command seen in the code , we see the binding statement \verb | <var:w> := <nat:4> + <var:w> * <var:U> ; | . This moves the condition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + \} $ to the postcondition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:4> \} $ . Considering the subsequent bit of code in the series of instructions , we have the binding code \verb | <var:w> := <var:w> * <var:U> ; | . This statement takes the precondition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:4> \} $ into the postcondition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:4> * <var:i> + \} $ . Taking another step toward the proceeding piece of code contained in the set of instructions , the environment update command \verb | <var:w> := <var:w> * <var:U> ; | . This redefines $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:4> * <var:i> + \} $ toward the condition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:2> + \} $ . Advancing on , the environment update command letting $ <nat:2> + <var:w> * <var:U> $ to $ <var:w>$ . This statement advances the precondition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:2> + \} $ toward $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:3> + <nat:2> \} $ . This is ensured through the assignment law defined in standard Hoare logic . Taking a look at the upcoming piece of code found in the set of instructions , we see the variable binding command \verb | <var:w> := <nat:4> + <var:w> * <var:U> ; | . This moves the precondition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:3> + <nat:2> \} $ as $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:4> + <nat:2> * <var:i> + <nat:4> \} $ . Taking another step toward the next line found in our series of commands , the binding statement yielding $ <nat:1> + <var:w> * <var:U> $ toward $ <var:w>$ . This takes the condition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:4> + <nat:2> * <var:i> + <nat:4> \} $ to the postcondition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:11> + <nat:4> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:1> \} $ . Moving forward to the upcoming line of code contained in the segment of code , we see the variable binding command yielding $ <nat:4> + <var:w> * <var:U> $ to $ <var:w>$ . This moves $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:11> + <nat:4> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:1> \} $ as the condition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:12> + <nat:4> * <var:i> ^ <nat:11> + <nat:4> * <var:i> ^ <nat:10> + <nat:2> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:4> \} $ . Honing in on the subsequent step contained in our series of commands , we have the environment update statement giving $ <nat:4> + <var:w> * <var:U$ as $ <var:w>$ . This takes the precondition $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:12> + <nat:4> * <var:i> ^ <nat:11> + <nat:4> * <var:i> ^ <nat:10> + <nat:2> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:4> \} $ as $ \{ <var:U> = <var:i> \land <var:w> = <nat:4> * <var:i> ^ <nat:13> + <nat:4> * <var:i> ^ <nat:12> + <nat:4> * <var:i> ^ <nat:11> + <nat:2> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> \} $ . This is guaranteed with the assignment inference rule found in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:U> = <var:i> }} <var:w> := <nat:4> ; <var:w> := <nat:4> + <var:w> * <var:U> ; <var:w> := <nat:4> + <var:w> * <var:U> ; <var:w> := <nat:2> + <var:w> * <var:U> ; <var:w> := <var:w> * <var:U> ; <var:w> := <var:w> * <var:U> ; <var:w> := <nat:4> + <var:w> * <var:U> ; <var:w> := <var:w> * <var:U> ; <var:w> := <var:w> * <var:U> ; <var:w> := <nat:2> + <var:w> * <var:U> ; <var:w> := <nat:4> + <var:w> * <var:U> ; <var:w> := <nat:1> + <var:w> * <var:U> ; <var:w> := <nat:4> + <var:w> * <var:U> ; <var:w> := <nat:4> + <var:w> * <var:U> {{ <var:w> = <nat:4> * <var:i> ^ <nat:13> + <nat:4> * <var:i> ^ <nat:12> + <nat:4> * <var:i> ^ <nat:11> + <nat:2> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:2> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:4> + <nat:2> * <var:i> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:4> + <nat:4> * <var:i> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:5> + <nat:4> * <var:i> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:6> + <nat:4> * <var:i> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:8> + <nat:2> * <var:i> ^ <nat:7> + <nat:4> * <var:i> ^ <nat:4> + <nat:2> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> * <var:i> ^ <nat:11> + <nat:4> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:9> + <nat:2> * <var:i> ^ <nat:8> + <nat:4> * <var:i> ^ <nat:5> + <nat:2> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> * <var:i> ^ <nat:12> + <nat:4> * <var:i> ^ <nat:11> + <nat:4> * <var:i> ^ <nat:10> + <nat:2> * <var:i> ^ <nat:9> + <nat:4> * <var:i> ^ <nat:6> + <nat:2> * <var:i> ^ <nat:3> + <nat:4> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:i> /\ <var:w> = <nat:4> * <var:i> ^ <nat:13> + <nat:4> * <var:i> ^ <nat:12> + <nat:4> * <var:i> ^ <nat:11> + <nat:2> * <var:i> ^ <nat:10> + <nat:4> * <var:i> ^ <nat:7> + <nat:2> * <var:i> ^ <nat:4> + <nat:4> * <var:i> ^ <nat:3> + <nat:1> * <var:i> ^ <nat:2> + <nat:4> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 