\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:6> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:J> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:J> ; <var:s2> := <var:s2> * <var:J> ; <var:A> := <var:s2> ; <var:A> := <var:A> + <var:s1> ; <var:A> := <var:A> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( given $ <var:O> \in \mathbb{Z}^+ $ ) that $ <var:J> = <var:O> $ before the evaluation of this series of instructions , it must be that $ <var:A> = <nat:7> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:6> $ . \end{theorem} \begin{proof} Applying Hoare reasoning returns : \begin{eqnarray} \{ <var:J> = <var:O> \} \\ <var:s0> := <nat:6> ; \\ \{ <var:J> = <var:O> \land <var:s0> = <nat:6> \} \\ <var:s1> := <nat:1> ; \\ \{ <var:J> = <var:O> \land <var:s0> = <nat:6> \land <var:s1> = <nat:1> \} \\ <var:s1> := <var:s1> * <var:J> ; \\ \{ <var:J> = <var:O> \land <var:s0> = <nat:6> \land <var:s1> = <nat:1> \times <var:O> \} \\ <var:s2> := <nat:7> ; \\ \{ <var:J> = <var:O> \land <var:s0> = <nat:6> \land <var:s1> = <nat:1> \times <var:O> \land <var:s2> = <nat:7> \} \\ <var:s2> := <var:s2> * <var:J> ; \\ \{ <var:J> = <var:O> \land <var:s0> = <nat:6> \land <var:s1> = <nat:1> \times <var:O> \land <var:s2> = <nat:7> \times <var:O> \} \\ <var:s2> := <var:s2> * <var:J> ; \\ \{ <var:J> = <var:O> \land <var:s0> = <nat:6> \land <var:s1> = <nat:1> \times <var:O> \land <var:s2> = <nat:7> \times <var:O> ^ <nat:2> \} \\ <var:A> := <var:s2> ; \\ \{ <var:J> = <var:O> \land <var:s0> = <nat:6> \land <var:s1> = <nat:1> \times <var:O> \land <var:A> = <nat:7> \times <var:O> ^ <nat:2> \} \\ <var:A> := <var:A> + <var:s1> ; \\ \{ <var:J> = <var:O> \land <var:s0> = <nat:6> \land <var:A> = <nat:7> \times <var:O> ^ <nat:2> + <nat:1> \times <var:O> \} \\ <var:A> := <var:A> + <var:s0> \\ \{ <var:J> = <var:O> \land <var:A> = <nat:7> \times <var:O> ^ <nat:2> + <nat:1> \times <var:O> + <nat:6> \} \end{eqnarray} Therefore , this code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:6> ; <var:s1> := <nat:1> ; <var:s1> := <var:s1> * <var:J> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:J> ; <var:s2> := <var:s2> * <var:J> ; <var:A> := <var:s2> ; <var:A> := <var:A> + <var:s1> ; <var:A> := <var:A> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:J> = <var:O> }} <def:poly> {{ <var:A> = <nat:7> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:s0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:1> * <var:O> /\ <var:s2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:1> * <var:O> /\ <var:s2> = <nat:7> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:1> * <var:O> /\ <var:s2> = <nat:7> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:s0> = <nat:6> /\ <var:s1> = <nat:1> * <var:O> /\ <var:A> = <nat:7> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:s0> = <nat:6> /\ <var:A> = <nat:7> * <var:O> ^ <nat:2> + <nat:1> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:O> /\ <var:A> = <nat:7> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 