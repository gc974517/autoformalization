\begin{document} \begin{theorem} Take the following code segment in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:6> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:q> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:q> ; <var:P2> := <var:P2> * <var:q> ; <var:s> := <var:P2> ; <var:s> := <var:s> + <var:P1> ; <var:s> := <var:s> + <var:P0> \end{verbatim} Assume it to be that $ <var:q> = <var:v> $ before interpreting the code segment , it holds that $ <var:s> = <nat:3> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:6> $ . \end{theorem} \begin{proof} The proof of the program is done by usual Hoare techniques . Paying attention to the subsequent steps in the code segment , \begin{eqnarray} \{ <var:q> = <var:v> \} \, <var:P0> := <nat:6> \, \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \} \\ \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \} \, <var:P1> := <nat:2> \, \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \} \\ \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \} \, <var:P1> := <var:P1> * <var:q> \, \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \cdot <var:v> \} \\ \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \cdot <var:v> \} \, <var:P2> := <nat:3> \, \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \cdot <var:v> \land <var:P2> = <nat:3> \} \end{eqnarray} Looking at the following commands contained in the code segment , \begin{eqnarray} \{ <var:q> = <var:v> \} \, <var:P0> := <nat:6> \, \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \} \\ \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \} \, <var:P1> := <nat:2> \, \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \} \\ \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \} \, <var:P1> := <var:P1> * <var:q> \, \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \cdot <var:v> \} \\ \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \cdot <var:v> \} \, <var:P2> := <nat:3> \, \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \land <var:P1> = <nat:2> \cdot <var:v> \land <var:P2> = <nat:3> \} \end{eqnarray} This is rigorously given using the law defined by Hoare logic . After , we see \begin{eqnarray} \{ <var:q> = <var:v> \} \, <var:P0> := <nat:6> \, \{ <var:q> = <var:v> \land <var:P0> = <nat:6> \} \end{eqnarray} This is rigorously given by the variable assignmet scheme in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:q> = <var:v> }} <var:P0> := <nat:6> ; <var:P1> := <nat:2> ; <var:P1> := <var:P1> * <var:q> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:q> ; <var:P2> := <var:P2> * <var:q> ; <var:s> := <var:P2> ; <var:s> := <var:s> + <var:P1> ; <var:s> := <var:s> + <var:P0> {{ <var:s> = <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:P0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:2> * <var:v> /\ <var:P2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:2> * <var:v> /\ <var:P2> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:2> * <var:v> /\ <var:P2> = <nat:3> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:P0> = <nat:6> /\ <var:P1> = <nat:2> * <var:v> /\ <var:s> = <nat:3> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:P0> = <nat:6> /\ <var:s> = <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:v> /\ <var:s> = <nat:3> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 