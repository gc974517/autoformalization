\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:5> ; <var:z1> := <nat:9> ; <var:z1> := <var:z1> * <var:l> ; <var:N> := <var:z1> ; <var:N> := <var:N> + <var:z0> \end{verbatim} Assume that $ <var:l> = <var:X> $ , letting natural numbers $ <var:X> $ , ahead of interpreting our series of commands it holds that $ <var:N> = <nat:9> \cdot <var:X> + <nat:5> $ . \end{theorem} \begin{proof} We can see that this decorated segment of code . \begin{eqnarray} \{ <var:l> = <var:X> \} \\ <var:z0> := <nat:5> ; \\ \{ <var:l> = <var:X> \land <var:z0> = <nat:5> \} \\ <var:z1> := <nat:9> ; \\ \{ <var:l> = <var:X> \land <var:z0> = <nat:5> \land <var:z1> = <nat:9> \} \\ <var:z1> := <var:z1> * <var:l> ; \\ \{ <var:l> = <var:X> \land <var:z0> = <nat:5> \land <var:z1> = <nat:9> * <var:X> \} \\ <var:N> := <var:z1> ; \\ \{ <var:l> = <var:X> \land <var:z0> = <nat:5> \land <var:N> = <nat:9> * <var:X> \} \\ <var:N> := <var:N> + <var:z0> \\ \{ <var:l> = <var:X> \land <var:N> = <nat:9> * <var:X> + <nat:5> \} \end{eqnarray} The application of Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:l> = <var:X> }} <var:z0> := <nat:5> ; <var:z1> := <nat:9> ; <var:z1> := <var:z1> * <var:l> ; <var:N> := <var:z1> ; <var:N> := <var:N> + <var:z0> {{ <var:N> = <nat:9> * <var:X> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:z0> = <nat:5> /\ <var:z1> = <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:z0> = <nat:5> /\ <var:N> = <nat:9> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:X> /\ <var:N> = <nat:9> * <var:X> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 