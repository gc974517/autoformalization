\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e0> := <nat:1> ; <var:F> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> in \emph{Imp} . Assuming $ <var:N> = <var:n> $ taking positive integer coefficients $ <var:n> $ before the execution of the code segment it follows that we see $ <var:F> = <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions is evident by this decorated list of commands . \begin{eqnarray} \{ <var:N> = <var:n> \} \\ <var:e0> := <nat:1> ; \\ \{ <var:N> = <var:n> \land <var:e0> = <nat:1> \} \\ <var:F> := <var:e0> \\ \{ <var:N> = <var:n> \land <var:F> = <nat:1> \} \end{eqnarray} Using Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:1> ; <var:F> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:N> = <var:n> }} <def:poly> {{ <var:F> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:e0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:n> /\ <var:F> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 