\begin{document} \begin{theorem} We define the following program such that \begin{verbatim} <var:Q0> := <nat:1> ; <var:M> := <var:Q0> \end{verbatim} Given $ <var:Y> = <var:C> $ ahead of interpreting our set of instructions then we have $ <var:M> = <nat:1> $ once code executes . \end{theorem} \begin{proof} The course of logic for the set of commands can be given through standard Hoare logic . Moving on to the following commands seen in the list of instructions , we see \begin{verbatim} { <var:Y> = <var:C> } <var:Q0> := <nat:1> { <var:Y> = <var:C> \land <var:Q0> = <nat:1> } { <var:Y> = <var:C> \land <var:Q0> = <nat:1> } <var:M> := <var:Q0{ <var:Y> = <var:C> \land <var:M> = <nat:1> } \end{verbatim} This is rigorously given through the environment update rule given in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:Y> = <var:C> }} <var:Q0> := <nat:1> ; <var:M> := <var:Q0> {{ <var:M> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:C> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:C> /\ <var:M> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 