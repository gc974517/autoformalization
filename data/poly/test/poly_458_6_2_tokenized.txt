\begin{document} \begin{theorem} We define a code as follows \begin{verbatim} <var:W> := <nat:1> ; <var:W> := <nat:1> + <var:W> * <var:t> ; <var:W> := <nat:4> + <var:W> * <var:t> ; <var:W> := <var:W> * <var:t> ; <var:W> := <var:W> * <var:t> ; <var:W> := <nat:3> + <var:W> * <var:t> \end{verbatim} Assume it to hold that $ <var:t> = <var:p> $ ahead of the execution of our list of instructions it follows that we see $ <var:W> = <nat:1> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:3> $ . \end{theorem} \begin{proof} The argument for the list of commands can be shown using Hoare logic . Keeping momentum , we have the environment update code letting $ <nat:1> $ toward $ <var:W>$ . This statement transfers the condition $ \{ <var:t> = <var:p> \} $ into the condition $ \{ <var:t> = <var:p> \land <var:W> = <nat:1> \} $ . This is guaranteed using the assignment inference rule in typical Hoare logic . Going forward , we see the variable binding code \verb | <var:W> := <nat:1> + <var:W> * <var:t> ; | . This transfers the precondition $ \{ <var:t> = <var:p> \land <var:W> = <nat:1> \} $ as the condition $ \{ <var:t> = <var:p> \land <var:W> = <nat:1> \cdot <var:p> + <nat:1> \} $ . This is sound with the assignment inference rule found in typical Hoare logic . Advancing on , we have the variable assignmet statement \verb | <var:W> := <nat:4> + <var:W> * <var:t> ; | . This redefines $ \{ <var:t> = <var:p> \land <var:W> = <nat:1> \cdot <var:p> + <nat:1> \} $ as $ \{ <var:t> = <var:p> \land <var:W> = <nat:1> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:4> \} $ . This is rigorously given through the assignment scheme defined by Hoare logic . Advancing , we have the assignment line yielding $ <var:W> * <var:t> $ to $ <var:W>$ . This redefines $ \{ <var:t> = <var:p> \land <var:W> = <nat:1> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:4> \} $ as $ \{ <var:t> = <var:p> \land <var:W> = <nat:1> \cdot <var:p> ^ <nat:3> + <nat:1> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> + \} $ . Stepping forward , the assignment line yielding $ <var:W> * <var:t> $ to $ <var:W>$ . This forwards the condition $ \{ <var:t> = <var:p> \land <var:W> = <nat:1> \cdot <var:p> ^ <nat:3> + <nat:1> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> + \} $ toward the condition $ \{ <var:t> = <var:p> \land <var:W> = <nat:1> \cdot <var:p> ^ <nat:4> + <nat:1> \cdot <var:p> ^ <nat:3> + <nat:4> \cdot <var:p> ^ <nat:2> + \} $ . This is shown with the assignment scheme obtained from typical Hoare logic . Looking at the next step in the segment of code , we see the variable assignmet statement assigning $ <nat:3> + <var:W> * <var:t$ as $ <var:W>$ . This line transfers the condition $ \{ <var:t> = <var:p> \land <var:W> = <nat:1> \cdot <var:p> ^ <nat:4> + <nat:1> \cdot <var:p> ^ <nat:3> + <nat:4> \cdot <var:p> ^ <nat:2> + \} $ as $ \{ <var:t> = <var:p> \land <var:W> = <nat:1> \cdot <var:p> ^ <nat:5> + <nat:1> \cdot <var:p> ^ <nat:4> + <nat:4> \cdot <var:p> ^ <nat:3> + <nat:3> \} $ . This is ensured with the assignment scheme in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:t> = <var:p> }} <var:W> := <nat:1> ; <var:W> := <nat:1> + <var:W> * <var:t> ; <var:W> := <nat:4> + <var:W> * <var:t> ; <var:W> := <var:W> * <var:t> ; <var:W> := <var:W> * <var:t> ; <var:W> := <nat:3> + <var:W> * <var:t> {{ <var:W> = <nat:1> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:W> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:W> = <nat:1> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:W> = <nat:1> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:W> = <nat:1> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:W> = <nat:1> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:p> /\ <var:W> = <nat:1> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 