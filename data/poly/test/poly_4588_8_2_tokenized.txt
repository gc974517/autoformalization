\begin{document} \begin{theorem} Let the following list of instructions : \begin{verbatim} <var:m> := <nat:2> ; <var:m> := <nat:2> + <var:m> * <var:A> ; <var:m> := <nat:2> + <var:m> * <var:A> ; <var:m> := <nat:3> + <var:m> * <var:A> ; <var:m> := <nat:2> + <var:m> * <var:A> ; <var:m> := <nat:3> + <var:m> * <var:A> ; <var:m> := <nat:4> + <var:m> * <var:A> ; <var:m> := <nat:2> + <var:m> * <var:A> \end{verbatim} Assuming it to hold that $ <var:A> = <var:B> $ before executing the segment of code it holds that we see $ <var:m> = <nat:2> \cdot <var:B> ^ <nat:7> + <nat:2> \cdot <var:B> ^ <nat:6> + <nat:2> \cdot <var:B> ^ <nat:5> + <nat:3> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:3> \cdot <var:B> ^ <nat:2> + <nat:4> \cdot <var:B> + <nat:2> $ after set of commands has finished . \end{theorem} \begin{proof} The application of Hoare reasoning gives : \begin{eqnarray} \{ <var:A> = <var:B> \} \\ <var:m> := <nat:2> ; \\ \{ <var:A> = <var:B> \land <var:m> = <nat:2> \} \\ <var:m> := <nat:2> + <var:m> * <var:A> ; \\ \{ <var:A> = <var:B> \land <var:m> = <nat:2> \cdot <var:B> + <nat:2> \} \\ <var:m> := <nat:2> + <var:m> * <var:A> ; \\ \{ <var:A> = <var:B> \land <var:m> = <nat:2> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:2> \} \\ <var:m> := <nat:3> + <var:m> * <var:A> ; \\ \{ <var:A> = <var:B> \land <var:m> = <nat:2> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:3> \} \\ <var:m> := <nat:2> + <var:m> * <var:A> ; \\ \{ <var:A> = <var:B> \land <var:m> = <nat:2> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:2> \} \\ <var:m> := <nat:3> + <var:m> * <var:A> ; \\ \{ <var:A> = <var:B> \land <var:m> = <nat:2> \cdot <var:B> ^ <nat:5> + <nat:2> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:3> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:3> \} \\ <var:m> := <nat:4> + <var:m> * <var:A> ; \\ \{ <var:A> = <var:B> \land <var:m> = <nat:2> \cdot <var:B> ^ <nat:6> + <nat:2> \cdot <var:B> ^ <nat:5> + <nat:2> \cdot <var:B> ^ <nat:4> + <nat:3> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:4> \} \\ <var:m> := <nat:2> + <var:m> * <var:A> \\ \{ <var:A> = <var:B> \land <var:m> = <nat:2> \cdot <var:B> ^ <nat:7> + <nat:2> \cdot <var:B> ^ <nat:6> + <nat:2> \cdot <var:B> ^ <nat:5> + <nat:3> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:3> \cdot <var:B> ^ <nat:2> + <nat:4> \cdot <var:B> + <nat:2> \} \end{eqnarray} Given the above , this series of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:A> = <var:B> }} <var:m> := <nat:2> ; <var:m> := <nat:2> + <var:m> * <var:A> ; <var:m> := <nat:2> + <var:m> * <var:A> ; <var:m> := <nat:3> + <var:m> * <var:A> ; <var:m> := <nat:2> + <var:m> * <var:A> ; <var:m> := <nat:3> + <var:m> * <var:A> ; <var:m> := <nat:4> + <var:m> * <var:A> ; <var:m> := <nat:2> + <var:m> * <var:A> {{ <var:m> = <nat:2> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:m> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:m> = <nat:2> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:m> = <nat:2> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:m> = <nat:2> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:m> = <nat:2> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:m> = <nat:2> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:m> = <nat:2> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:m> = <nat:2> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 