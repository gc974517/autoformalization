\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:X1> := <var:G> ; <var:X2> := <var:X1> * <var:G> ; <var:X0> := <nat:2> ; <var:X1> := <var:X1> * <nat:2> ; <var:X2> := <var:X2> * <nat:4> ; <var:O> := <var:X2> <var:O> := <var:O> + <var:X1> <var:O> := <var:O> + <var:X0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> in \emph{Imp} . Allow ( with some positive integers $ <var:r> $ ) it to be that $ <var:G> = <var:r> $ prior to evaluating our code segment , it holds that $ <var:O> = <nat:4> \times <var:r> ^ <nat:2> + <nat:2> \times <var:r> + <nat:2> $ when code segment executes . \end{theorem} \begin{proof} Observe that the below decorated list of commands . \begin{eqnarray} \{ <var:G> = <var:r> \} \\ <var:X1> := <var:G> ; \\ \{ <var:G> = <var:r> \land <var:X1> = <var:r> \} \\ <var:X2> := <var:X1> * <var:G> ; \\ \{ <var:G> = <var:r> \land <var:X1> = <var:r> \land <var:X2> = <var:r> ^ <nat:2> \} \\ <var:X0> := <nat:2> ; \\ \{ <var:G> = <var:r> \land <var:X1> = <var:r> \land <var:X2> = <var:r> ^ <nat:2> \land <var:X0> = <nat:2> \} \\ <var:X1> := <var:X1> * <nat:2> ; \\ \{ <var:G> = <var:r> \land <var:X1> = <nat:2> \times <var:r> \land <var:X2> = <var:r> ^ <nat:2> \land <var:X0> = <nat:2> \} \\ <var:X2> := <var:X2> * <nat:4> ; \\ \{ <var:G> = <var:r> \land <var:X1> = <nat:2> \times <var:r> \land <var:X2> = <nat:4> \times <var:r> ^ <nat:2> \land <var:X0> = <nat:2> \} \\ <var:O> := <var:X2> \\ \{ <var:G> = <var:r> \land <var:X1> = <nat:2> \times <var:r> \land <var:X0> = <nat:2> \land <var:O> = <nat:4> \times <var:r> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:X1> \\ \{ <var:G> = <var:r> \land <var:X0> = <nat:2> \land <var:O> = <nat:4> \times <var:r> ^ <nat:2> + <nat:2> \times <var:r> \} \\ <var:O> := <var:O> + <var:X0> \\ \{ <var:G> = <var:r> \land <var:O> = <nat:4> \times <var:r> ^ <nat:2> + <nat:2> \times <var:r> + <nat:2> \} \end{eqnarray} The application of Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Definition <var:X2> : string := " <var:X2> " . Definition <def:poly> := <var:X1> := <var:G> ; <var:X2> := <var:X1> * <var:G> ; <var:X0> := <nat:2> ; <var:X1> := <var:X1> * <nat:2> ; <var:X2> := <var:X2> * <nat:4> ; <var:O> := <var:X2> <var:O> := <var:O> + <var:X1> <var:O> := <var:O> + <var:X0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:G> = <var:r> }} <def:poly> {{ <var:O> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:X1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:X1> = <var:r> /\ <var:X2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:X1> = <var:r> /\ <var:X2> = <var:r> ^ <nat:2> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:X1> = <nat:2> * <var:r> /\ <var:X2> = <var:r> ^ <nat:2> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:X1> = <nat:2> * <var:r> /\ <var:X2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:X0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:X1> = <nat:2> * <var:r> /\ <var:X0> = <nat:2> /\ <var:O> = <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:X0> = <nat:2> /\ <var:O> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:r> /\ <var:O> = <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 