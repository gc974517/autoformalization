\begin{document} \begin{theorem} Take the following code in \emph{Imp} : \begin{verbatim} <var:J0> := <nat:1> ; <var:J2> := <nat:5> ; <var:J2> := <var:J2> * <var:h> ; <var:J2> := <var:J2> * <var:h> ; <var:E> := <var:J2> ; <var:E> := <var:E> + <var:J0> \end{verbatim} Assume that we have $ <var:h> = <var:w> $ given any positive numbers $ <var:w> $ prior to evaluating our set of instructions it must be that we have $ <var:E> = <nat:5> \times <var:w> ^ <nat:2> + <nat:1> $ when series of commands executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:h> = <var:w> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:h> = <var:w> \land <var:J0> = <nat:1> \} \\ <var:J2> := <nat:5> ; \\ \{ <var:h> = <var:w> \land <var:J0> = <nat:1> \land <var:J2> = <nat:5> \} \\ <var:J2> := <var:J2> * <var:h> ; \\ \{ <var:h> = <var:w> \land <var:J0> = <nat:1> \land <var:J2> = <nat:5> \cdot <var:w> \} \\ <var:J2> := <var:J2> * <var:h> ; \\ \{ <var:h> = <var:w> \land <var:J0> = <nat:1> \land <var:J2> = <nat:5> \cdot <var:w> ^ <nat:2> \} \\ <var:E> := <var:J2> ; \\ \{ <var:h> = <var:w> \land <var:J0> = <nat:1> \land <var:E> = <nat:5> \cdot <var:w> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:J0> \\ \{ <var:h> = <var:w> \land <var:E> = <nat:5> \cdot <var:w> ^ <nat:2> + <nat:1> \} \end{eqnarray} Using standard Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:h> = <var:w> }} <var:J0> := <nat:1> ; <var:J2> := <nat:5> ; <var:J2> := <var:J2> * <var:h> ; <var:J2> := <var:J2> * <var:h> ; <var:E> := <var:J2> ; <var:E> := <var:E> + <var:J0> {{ <var:E> = <nat:5> * <var:w> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:J0> = <nat:1> /\ <var:J2> = <nat:5> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:J0> = <nat:1> /\ <var:E> = <nat:5> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:w> /\ <var:E> = <nat:5> * <var:w> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 