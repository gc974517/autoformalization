\begin{document} \begin{theorem} Consider the following code as follows \begin{verbatim} <var:Z1> := <var:a> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:d> := <var:Z1> <var:d> := <var:d> + <var:Z0> \end{verbatim} Allow it to be that $ <var:a> = <var:q> $ prior to the execution of this set of commands , then $ <var:d> = <nat:4> \cdot <var:q> + <nat:2> $ after segment of code has executed . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions is demonstrated by typical Hoare logic . Now , \begin{verbatim} { <var:a> = <var:q> } <var:Z1> := <var:a> { <var:a> = <var:q> \land <var:Z1> = <var:q> } { <var:a> = <var:q> \land <var:Z1> = <var:q> } <var:Z0> := <nat:2> { <var:a> = <var:q> \land <var:Z1> = <var:q> \land <var:Z0> = <nat:2> } { <var:a> = <var:q> \land <var:Z1> = <var:q> \land <var:Z0> = <nat:2> } <var:Z1> := <var:Z1> * <nat:4> { <var:a> = <var:q> \land <var:Z1> = <nat:4> \times <var:q> \land <var:Z0> = <nat:2> } \end{verbatim} Going to the next step , we see \begin{verbatim} { <var:a> = <var:q> } <var:Z1> := <var:a> { <var:a> = <var:q> \land <var:Z1> = <var:q> } { <var:a> = <var:q> \land <var:Z1> = <var:q> } <var:Z0> := <nat:2> { <var:a> = <var:q> \land <var:Z1> = <var:q> \land <var:Z0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:a> = <var:q> }} <var:Z1> := <var:a> ; <var:Z0> := <nat:2> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:d> := <var:Z1> <var:d> := <var:d> + <var:Z0> {{ <var:d> = <nat:4> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:Z1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:Z1> = <var:q> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:Z1> = <nat:4> * <var:q> /\ <var:Z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:Z0> = <nat:2> /\ <var:d> = <nat:4> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:q> /\ <var:d> = <nat:4> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 