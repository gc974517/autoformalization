\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v1> := <var:q> ; <var:v2> := <var:v1> * <var:q> ; <var:v3> := <var:v2> * <var:q> ; <var:v0> := <nat:6> ; <var:v1> := <var:v1> * <nat:4> ; <var:v2> := <var:v2> * <nat:1> ; <var:v3> := <var:v3> * <nat:4> ; <var:i> := <var:v3> <var:i> := <var:i> + <var:v2> <var:i> := <var:i> + <var:v1> <var:i> := <var:i> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to be that $ <var:q> = <var:o> $ ( for any positive integers $ <var:o> $ ) ahead of executing the code segment , it follows that $ <var:i> = <nat:4> \cdot <var:o> ^ <nat:3> + <nat:1> \cdot <var:o> ^ <nat:2> + <nat:4> \cdot <var:o> + <nat:6> $ . \end{theorem} \begin{proof} Proving correctness for this segment of code is done by typical Hoare reasoning . Moving forward to the following statement in the code , we see the binding line \verb | <var:v1> := <var:q> ; | . This advances the condition $ \{ <var:q> = <var:o> \} $ as the postcondition $ \{ <var:q> = <var:o> \land <var:v1> = <var:o> \} $ . This is rigorously given with the assignment scheme defined by typical Hoare logic . Moving on to the next line of code found in our list of instructions , the environment update command \verb | <var:v2> := <var:v1> * <var:q> ; | . This statement moves $ \{ <var:q> = <var:o> \land <var:v1> = <var:o> \} $ toward $ \{ <var:q> = <var:o> \land <var:v1> = <var:o> \land <var:v2> = <var:o> ^ <nat:2> \} $ . This is sound by the assignment law obtained from Hoare reasoning . Focusing on the following command contained in the set of instructions , we see the variable assignmet command binding $ <var:v2> * <var:q> $ as $ <var:v3>$ . This transfers the precondition $ \{ <var:q> = <var:o> \land <var:v1> = <var:o> \land <var:v2> = <var:o> ^ <nat:2> \} $ toward $ \{ <var:q> = <var:o> \land <var:v1> = <var:o> \land <var:v2> = <var:o> ^ <nat:2> \land <var:v3> = <var:o> ^ <nat:3> \} $ . This is guaranteed by the assignment inference rule given in typical Hoare logic . Moving forward to the upcoming bit of code found in our series of instructions , we have the command binding $ <nat:6> $ into $ <var:v0>$ . This statement moves the condition $ \{ <var:q> = <var:o> \land <var:v1> = <var:o> \land <var:v2> = <var:o> ^ <nat:2> \land <var:v3> = <var:o> ^ <nat:3> \} $ as the condition $ \{ <var:q> = <var:o> \land <var:v1> = <var:o> \land <var:v2> = <var:o> ^ <nat:2> \land <var:v3> = <var:o> ^ <nat:3> \land <var:v0> = <nat:6> \} $ . After , we see the variable binding statement assigning $ <var:v1> * <nat:4> $ toward $ <var:v1>$ . This advances the condition $ \{ <var:q> = <var:o> \land <var:v1> = <var:o> \land <var:v2> = <var:o> ^ <nat:2> \land <var:v3> = <var:o> ^ <nat:3> \land <var:v0> = <nat:6> \} $ into $ \{ <var:q> = <var:o> \land <var:v1> = <nat:4> * <var:o> \land <var:v2> = <var:o> ^ <nat:2> \land <var:v3> = <var:o> ^ <nat:3> \land <var:v0> = <nat:6> \} $ . Further , the binding command \verb | <var:v2> := <var:v2> * <nat:1> ; | . This code forwards $ \{ <var:q> = <var:o> \land <var:v1> = <nat:4> * <var:o> \land <var:v2> = <var:o> ^ <nat:2> \land <var:v3> = <var:o> ^ <nat:3> \land <var:v0> = <nat:6> \} $ toward $ \{ <var:q> = <var:o> \land <var:v1> = <nat:4> * <var:o> \land <var:v2> = <nat:1> * <var:o> ^ <nat:2> \land <var:v3> = <var:o> ^ <nat:3> \land <var:v0> = <nat:6> \} $ . This is shown through the assignment inference rule obtained from Hoare reasoning . Stepping through , the variable binding command yielding $ <var:v3> * <nat:4> $ toward $ <var:v3>$ . This advances the condition $ \{ <var:q> = <var:o> \land <var:v1> = <nat:4> * <var:o> \land <var:v2> = <nat:1> * <var:o> ^ <nat:2> \land <var:v3> = <var:o> ^ <nat:3> \land <var:v0> = <nat:6> \} $ as the postcondition $ \{ <var:q> = <var:o> \land <var:v1> = <nat:4> * <var:o> \land <var:v2> = <nat:1> * <var:o> ^ <nat:2> \land <var:v3> = <nat:4> * <var:o> ^ <nat:3> \land <var:v0> = <nat:6> \} $ . This is deduced with the assignment law defined by typical Hoare reasoning . Going to the next step , we see the environment update statement defining $ <var:v3$ toward $ <var:i>$ . This advances $ \{ <var:q> = <var:o> \land <var:v1> = <nat:4> * <var:o> \land <var:v2> = <nat:1> * <var:o> ^ <nat:2> \land <var:v3> = <nat:4> * <var:o> ^ <nat:3> \land <var:v0> = <nat:6> \} $ to $ \{ <var:q> = <var:o> \land <var:v1> = <nat:4> * <var:o> \land <var:v2> = <nat:1> * <var:o> ^ <nat:2> \land <var:v0> = <nat:6> \land <var:i> = <nat:4> * <var:o> ^ <nat:3> \} $ . This is shown through the assignment rule defined by usual Hoare reasoning . Now , we have the variable assignmet command giving $ <var:i> + <var:v2$ toward $ <var:i>$ . This command moves $ \{ <var:q> = <var:o> \land <var:v1> = <nat:4> * <var:o> \land <var:v2> = <nat:1> * <var:o> ^ <nat:2> \land <var:v0> = <nat:6> \land <var:i> = <nat:4> * <var:o> ^ <nat:3> \} $ to $ \{ <var:q> = <var:o> \land <var:v1> = <nat:4> * <var:o> \land <var:v0> = <nat:6> \land <var:i> = <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> \} $ . This is guaranteed with the assignment scheme given by Hoare logic . Considering the proceeding piece of code contained in the set of commands , we have the variable assignmet line assigning $ <var:i> + <var:v1$ into $ <var:i>$ . This code forwards the condition $ \{ <var:q> = <var:o> \land <var:v1> = <nat:4> * <var:o> \land <var:v0> = <nat:6> \land <var:i> = <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> \} $ into $ \{ <var:q> = <var:o> \land <var:v0> = <nat:6> \land <var:i> = <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> \} $ . Stepping forward , we see the assignment statement \verb | <var:i> := <var:i> + <var:v0> | . This command redefines the condition $ \{ <var:q> = <var:o> \land <var:v0> = <nat:6> \land <var:i> = <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> \} $ into $ \{ <var:q> = <var:o> \land <var:i> = <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:6> \} $ . This is ensured using the assignment rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v1> := <var:q> ; <var:v2> := <var:v1> * <var:q> ; <var:v3> := <var:v2> * <var:q> ; <var:v0> := <nat:6> ; <var:v1> := <var:v1> * <nat:4> ; <var:v2> := <var:v2> * <nat:1> ; <var:v3> := <var:v3> * <nat:4> ; <var:i> := <var:v3> <var:i> := <var:i> + <var:v2> <var:i> := <var:i> + <var:v1> <var:i> := <var:i> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:q> = <var:o> }} <def:poly> {{ <var:i> = <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:v1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:v1> = <var:o> /\ <var:v2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:v1> = <var:o> /\ <var:v2> = <var:o> ^ <nat:2> /\ <var:v3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:v1> = <var:o> /\ <var:v2> = <var:o> ^ <nat:2> /\ <var:v3> = <var:o> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:v1> = <nat:4> * <var:o> /\ <var:v2> = <var:o> ^ <nat:2> /\ <var:v3> = <var:o> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:v1> = <nat:4> * <var:o> /\ <var:v2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:v3> = <var:o> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:v1> = <nat:4> * <var:o> /\ <var:v2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:v3> = <nat:4> * <var:o> ^ <nat:3> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:v1> = <nat:4> * <var:o> /\ <var:v2> = <nat:1> * <var:o> ^ <nat:2> /\ <var:v0> = <nat:6> /\ <var:i> = <nat:4> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:v1> = <nat:4> * <var:o> /\ <var:v0> = <nat:6> /\ <var:i> = <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:v0> = <nat:6> /\ <var:i> = <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:o> /\ <var:i> = <nat:4> * <var:o> ^ <nat:3> + <nat:1> * <var:o> ^ <nat:2> + <nat:4> * <var:o> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 