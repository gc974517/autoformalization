\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:4> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:b> ; <var:W2> := <nat:1> ; <var:W2> := <var:W2> * <var:b> ; <var:W2> := <var:W2> * <var:b> ; <var:W3> := <nat:1> ; <var:W3> := <var:W3> * <var:b> ; <var:W3> := <var:W3> * <var:b> ; <var:W3> := <var:W3> * <var:b> ; <var:I> := <var:W3> ; <var:I> := <var:I> + <var:W2> ; <var:I> := <var:I> + <var:W1> ; <var:I> := <var:I> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Allowing , assuming some positive integer coefficients $ <var:V> $ , that we have $ <var:b> = <var:V> $ ahead of running our code , it holds that $ <var:I> = <nat:1> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:4> $ after code segment has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:b> = <var:V> \} \\ <var:W0> := <nat:4> ; \\ \{ <var:b> = <var:V> \land <var:W0> = <nat:4> \} \\ <var:W1> := <nat:4> ; \\ \{ <var:b> = <var:V> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \} \\ <var:W1> := <var:W1> * <var:b> ; \\ \{ <var:b> = <var:V> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \times <var:V> \} \\ <var:W2> := <nat:1> ; \\ \{ <var:b> = <var:V> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \times <var:V> \land <var:W2> = <nat:1> \} \\ <var:W2> := <var:W2> * <var:b> ; \\ \{ <var:b> = <var:V> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \times <var:V> \land <var:W2> = <nat:1> \times <var:V> \} \\ <var:W2> := <var:W2> * <var:b> ; \\ \{ <var:b> = <var:V> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \times <var:V> \land <var:W2> = <nat:1> \times <var:V> ^ <nat:2> \} \\ <var:W3> := <nat:1> ; \\ \{ <var:b> = <var:V> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \times <var:V> \land <var:W2> = <nat:1> \times <var:V> ^ <nat:2> \land <var:W3> = <nat:1> \} \\ <var:W3> := <var:W3> * <var:b> ; \\ \{ <var:b> = <var:V> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \times <var:V> \land <var:W2> = <nat:1> \times <var:V> ^ <nat:2> \land <var:W3> = <nat:1> \times <var:V> \} \\ <var:W3> := <var:W3> * <var:b> ; \\ \{ <var:b> = <var:V> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \times <var:V> \land <var:W2> = <nat:1> \times <var:V> ^ <nat:2> \land <var:W3> = <nat:1> \times <var:V> ^ <nat:2> \} \\ <var:W3> := <var:W3> * <var:b> ; \\ \{ <var:b> = <var:V> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \times <var:V> \land <var:W2> = <nat:1> \times <var:V> ^ <nat:2> \land <var:W3> = <nat:1> \times <var:V> ^ <nat:3> \} \end{eqnarray} Continuing the execution of our code segment gives : \begin{eqnarray} <var:I> := <var:W3> ; \\ \{ <var:b> = <var:V> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \times <var:V> \land <var:W2> = <nat:1> \times <var:V> ^ <nat:2> \land <var:I> = <nat:1> \times <var:V> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:W2> ; \\ \{ <var:b> = <var:V> \land <var:W0> = <nat:4> \land <var:W1> = <nat:4> \times <var:V> \land <var:I> = <nat:1> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:W1> ; \\ \{ <var:b> = <var:V> \land <var:W0> = <nat:4> \land <var:I> = <nat:1> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> \} \\ <var:I> := <var:I> + <var:W0> \\ \{ <var:b> = <var:V> \land <var:I> = <nat:1> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:4> \times <var:V> + <nat:4> \} \end{eqnarray} Continuing evaluating the set of commands results in : \begin{eqnarray} \end{eqnarray} Applying standard Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <def:poly> := <var:W0> := <nat:4> ; <var:W1> := <nat:4> ; <var:W1> := <var:W1> * <var:b> ; <var:W2> := <nat:1> ; <var:W2> := <var:W2> * <var:b> ; <var:W2> := <var:W2> * <var:b> ; <var:W3> := <nat:1> ; <var:W3> := <var:W3> * <var:b> ; <var:W3> := <var:W3> * <var:b> ; <var:W3> := <var:W3> * <var:b> ; <var:I> := <var:W3> ; <var:I> := <var:I> + <var:W2> ; <var:I> := <var:I> + <var:W1> ; <var:I> := <var:I> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:b> = <var:V> }} <def:poly> {{ <var:I> = <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:V> /\ <var:W2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:V> /\ <var:W2> = <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:V> /\ <var:W2> = <nat:1> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:V> /\ <var:W2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:W3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:V> /\ <var:W2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:W3> = <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:V> /\ <var:W2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:W3> = <nat:1> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:V> /\ <var:W2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:W3> = <nat:1> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:V> /\ <var:W2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:I> = <nat:1> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:W0> = <nat:4> /\ <var:W1> = <nat:4> * <var:V> /\ <var:I> = <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:W0> = <nat:4> /\ <var:I> = <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:V> /\ <var:I> = <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 