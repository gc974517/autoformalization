\begin{document} \begin{theorem} Consider the following code in \emph{Imp} such that \begin{verbatim} <var:F0> := <nat:9> ; <var:F2> := <nat:5> ; <var:F2> := <var:F2> * <var:n> ; <var:F2> := <var:F2> * <var:n> ; <var:i> := <var:F2> ; <var:i> := <var:i> + <var:F0> \end{verbatim} Allowing $ <var:n> = <var:C> $ before executing our set of commands , then $ <var:i> = <nat:5> \times <var:C> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} The proof of our set of commands is clear through standard Hoare techniques . Shifting focus toward the following steps contained in our segment of code , we see \begin{eqnarray} \{ <var:n> = <var:C> \} \, <var:F0> := <nat:9> \, \{ <var:n> = <var:C> \land <var:F0> = <nat:9> \} \\ \{ <var:n> = <var:C> \land <var:F0> = <nat:9> \} \, <var:F2> := <nat:5> \, \{ <var:n> = <var:C> \land <var:F0> = <nat:9> \land <var:F2> = <nat:5> \} \\ \{ <var:n> = <var:C> \land <var:F0> = <nat:9> \land <var:F2> = <nat:5> \} \, <var:F2> := <var:F2> * <var:n> \, \{ <var:n> = <var:C> \land <var:F0> = <nat:9> \land <var:F2> = <nat:5> \times <var:C> \} \\ \{ <var:n> = <var:C> \land <var:F0> = <nat:9> \land <var:F2> = <nat:5> \times <var:C> \} \, <var:F2> := <var:F2> * <var:n> \, \{ <var:n> = <var:C> \land <var:F0> = <nat:9> \land <var:F2> = <nat:5> \times <var:C> ^ <nat:2> \} \\ \{ <var:n> = <var:C> \land <var:F0> = <nat:9> \land <var:F2> = <nat:5> \times <var:C> ^ <nat:2> \} \, <var:i> := <var:F2> \, \{ <var:n> = <var:C> \land <var:F0> = <nat:9> \land <var:i> = <nat:5> \times <var:C> ^ <nat:2> \} \end{eqnarray} Moving forward , we have \begin{eqnarray} \{ <var:n> = <var:C> \} \, <var:F0> := <nat:9> \, \{ <var:n> = <var:C> \land <var:F0> = <nat:9> \} \end{eqnarray} This is guaranteed with the variable assignmet scheme found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:n> = <var:C> }} <var:F0> := <nat:9> ; <var:F2> := <nat:5> ; <var:F2> := <var:F2> * <var:n> ; <var:F2> := <var:F2> * <var:n> ; <var:i> := <var:F2> ; <var:i> := <var:i> + <var:F0> {{ <var:i> = <nat:5> * <var:C> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:F0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:F0> = <nat:9> /\ <var:F2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:F0> = <nat:9> /\ <var:F2> = <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:F0> = <nat:9> /\ <var:F2> = <nat:5> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:F0> = <nat:9> /\ <var:i> = <nat:5> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:C> /\ <var:i> = <nat:5> * <var:C> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 