\begin{document} \begin{theorem} Take a list of instructions such that \begin{verbatim} <var:R0> := <nat:1> ; <var:R1> := <nat:2> ; <var:R1> := <var:R1> * <var:L> ; <var:r> := <var:R1> ; <var:r> := <var:r> + <var:R0> \end{verbatim} Assuming --- with some positive integers $ <var:n> $ --- that $ <var:L> = <var:n> $ ahead of executing this segment of code , then $ <var:r> = <nat:2> \times <var:n> + <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our list of instructions is clear through usual Hoare logic . Advancing to the proceeding piece of code in our set of commands , we see the variable binding code defining $ <nat:1> $ into $ <var:R0>$ . This moves the condition $ \{ <var:L> = <var:n> \} $ toward the postcondition $ \{ <var:L> = <var:n> \land <var:R0> = <nat:1> \} $ . Moving forward , the environment update command \verb | <var:R1> := <nat:2> ; | . This command redefines the condition $ \{ <var:L> = <var:n> \land <var:R0> = <nat:1> \} $ into the condition $ \{ <var:L> = <var:n> \land <var:R0> = <nat:1> \land <var:R1> = <nat:2> \} $ . This is shown with the assignment scheme from standard Hoare reasoning . Keeping momentum , we have the assignment statement defining $ <var:R1> * <var:L> $ as $ <var:R1>$ . This code forwards the precondition $ \{ <var:L> = <var:n> \land <var:R0> = <nat:1> \land <var:R1> = <nat:2> \} $ toward $ \{ <var:L> = <var:n> \land <var:R0> = <nat:1> \land <var:R1> = <nat:2> \times <var:n> \} $ . Shifting focus toward the subsequent step found in the series of instructions , we see the binding code \verb | <var:r> := <var:R1> ; | . This command transfers $ \{ <var:L> = <var:n> \land <var:R0> = <nat:1> \land <var:R1> = <nat:2> \times <var:n> \} $ into $ \{ <var:L> = <var:n> \land <var:R0> = <nat:1> \land <var:r> = <nat:2> \times <var:n> \} $ . This is known to be sound through the assignment scheme of typical Hoare reasoning . Moving forward to the next step , the line letting $ <var:r> + <var:R0$ to $ <var:r>$ . This redefines the condition $ \{ <var:L> = <var:n> \land <var:R0> = <nat:1> \land <var:r> = <nat:2> \times <var:n> \} $ to the postcondition $ \{ <var:L> = <var:n> \land <var:r> = <nat:2> \times <var:n> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:L> = <var:n> }} <var:R0> := <nat:1> ; <var:R1> := <nat:2> ; <var:R1> := <var:R1> * <var:L> ; <var:r> := <var:R1> ; <var:r> := <var:r> + <var:R0> {{ <var:r> = <nat:2> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:R0> = <nat:1> /\ <var:R1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:R0> = <nat:1> /\ <var:R1> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:R0> = <nat:1> /\ <var:r> = <nat:2> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:r> = <nat:2> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 