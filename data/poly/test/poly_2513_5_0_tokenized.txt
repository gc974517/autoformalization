\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:7> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:z> ; <var:I> := <var:y1> ; <var:I> := <var:I> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:z> = <var:h> $ ahead of evaluating this set of instructions , it follows that $ <var:I> = <nat:8> \cdot <var:h> + <nat:7> $ once series of instructions finishes . \end{theorem} \begin{proof} The method of proof for this list of commands can be shown by typical Hoare logic . Jumping to the upcoming statement in the code segment , the assignment statement \verb | <var:y0> := <nat:7> ; | . This statement moves $ \{ <var:z> = <var:h> \} $ as the condition $ \{ <var:z> = <var:h> \land <var:y0> = <nat:7> \} $ . This is rigorously given by the assignment inference rule defined in typical Hoare reasoning . Focusing on the next piece of code found in our program , we have the variable update line \verb | <var:y1> := <nat:8> ; | . This advances $ \{ <var:z> = <var:h> \land <var:y0> = <nat:7> \} $ as $ \{ <var:z> = <var:h> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \} $ . This is deduced with the assignment scheme obtained from Hoare techniques . Considering the following line contained in the series of instructions , we have the variable update statement yielding $ <var:y1> * <var:z> $ to $ <var:y1>$ . This statement redefines the precondition $ \{ <var:z> = <var:h> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \} $ toward the postcondition $ \{ <var:z> = <var:h> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \cdot <var:h> \} $ . Advancing to the next line seen in the series of commands , we have the assignment command \verb | <var:I> := <var:y1> ; | . This line moves the condition $ \{ <var:z> = <var:h> \land <var:y0> = <nat:7> \land <var:y1> = <nat:8> \cdot <var:h> \} $ as $ \{ <var:z> = <var:h> \land <var:y0> = <nat:7> \land <var:I> = <nat:8> \cdot <var:h> \} $ . Honing in on the proceeding statement in our set of instructions , we have the variable update line defining $ <var:I> + <var:y0$ into $ <var:I>$ . This advances the precondition $ \{ <var:z> = <var:h> \land <var:y0> = <nat:7> \land <var:I> = <nat:8> \cdot <var:h> \} $ toward $ \{ <var:z> = <var:h> \land <var:I> = <nat:8> \cdot <var:h> + <nat:7> \} $ . This is sound through the assignment scheme obtained from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y0> := <nat:7> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:z> ; <var:I> := <var:y1> ; <var:I> := <var:I> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:z> = <var:h> }} <def:poly> {{ <var:I> = <nat:8> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:y0> = <nat:7> /\ <var:I> = <nat:8> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:h> /\ <var:I> = <nat:8> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 