\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:a1> := <var:i> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:1> ; <var:s> := <var:a1> <var:s> := <var:s> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:i> = <var:L> $ --- given any $ <var:L> $ --- before running the list of instructions it must be that $ <var:s> = <nat:1> \cdot <var:L> + <nat:7> $ after code executes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:L> \} \\ <var:a1> := <var:i> ; \\ \{ <var:i> = <var:L> \land <var:a1> = <var:L> \} \\ <var:a0> := <nat:7> ; \\ \{ <var:i> = <var:L> \land <var:a1> = <var:L> \land <var:a0> = <nat:7> \} \\ <var:a1> := <var:a1> * <nat:1> ; \\ \{ <var:i> = <var:L> \land <var:a1> = <nat:1> \times <var:L> \land <var:a0> = <nat:7> \} \\ <var:s> := <var:a1> \\ \{ <var:i> = <var:L> \land <var:a0> = <nat:7> \land <var:s> = <nat:1> \times <var:L> \} \\ <var:s> := <var:s> + <var:a0> \\ \{ <var:i> = <var:L> \land <var:s> = <nat:1> \times <var:L> + <nat:7> \} \end{eqnarray} Using Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <def:poly> := <var:a1> := <var:i> ; <var:a0> := <nat:7> ; <var:a1> := <var:a1> * <nat:1> ; <var:s> := <var:a1> <var:s> := <var:s> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:i> = <var:L> }} <def:poly> {{ <var:s> = <nat:1> * <var:L> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:a1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:a1> = <var:L> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:a1> = <nat:1> * <var:L> /\ <var:a0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:a0> = <nat:7> /\ <var:s> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:L> /\ <var:s> = <nat:1> * <var:L> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 