\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:3> ; <var:L1> := <nat:5> ; <var:L1> := <var:L1> * <var:V> ; <var:f> := <var:L1> ; <var:f> := <var:f> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Assume , taking $ <var:Z> \in \mathbb{Z}^+ $ , that $ <var:V> = <var:Z> $ before the evaluation of this segment of code it must be that we see $ <var:f> = <nat:5> * <var:Z> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the set of commands is clear through Hoare logic . Advancing to the upcoming piece of code found in our series of commands , we see the variable assignmet command assigning $ <nat:3> $ into $ <var:L0>$ . This moves the precondition $ \{ <var:V> = <var:Z> \} $ into the postcondition $ \{ <var:V> = <var:Z> \land <var:L0> = <nat:3> \} $ . Advancing to the next step , we see the binding statement yielding $ <nat:5> $ as $ <var:L1>$ . This redefines $ \{ <var:V> = <var:Z> \land <var:L0> = <nat:3> \} $ to the postcondition $ \{ <var:V> = <var:Z> \land <var:L0> = <nat:3> \land <var:L1> = <nat:5> \} $ . Advancing to the next step , the variable binding statement \verb | <var:L1> := <var:L1> * <var:V> ; | . This redefines $ \{ <var:V> = <var:Z> \land <var:L0> = <nat:3> \land <var:L1> = <nat:5> \} $ toward the postcondition $ \{ <var:V> = <var:Z> \land <var:L0> = <nat:3> \land <var:L1> = <nat:5> \cdot <var:Z> \} $ . This is guaranteed with the assignment rule given in typical Hoare reasoning . Following , we have the assignment command letting $ <var:L1> $ toward $ <var:f>$ . This moves $ \{ <var:V> = <var:Z> \land <var:L0> = <nat:3> \land <var:L1> = <nat:5> \cdot <var:Z> \} $ toward the postcondition $ \{ <var:V> = <var:Z> \land <var:L0> = <nat:3> \land <var:f> = <nat:5> \cdot <var:Z> \} $ . This is deduced using the assignment scheme found in typical Hoare logic . Stepping forward , the variable assignmet statement \verb | <var:f> := <var:f> + <var:L0> | . This command takes $ \{ <var:V> = <var:Z> \land <var:L0> = <nat:3> \land <var:f> = <nat:5> \cdot <var:Z> \} $ toward the postcondition $ \{ <var:V> = <var:Z> \land <var:f> = <nat:5> \cdot <var:Z> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:3> ; <var:L1> := <nat:5> ; <var:L1> := <var:L1> * <var:V> ; <var:f> := <var:L1> ; <var:f> := <var:f> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:V> = <var:Z> }} <def:poly> {{ <var:f> = <nat:5> * <var:Z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:L0> = <nat:3> /\ <var:f> = <nat:5> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:Z> /\ <var:f> = <nat:5> * <var:Z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 