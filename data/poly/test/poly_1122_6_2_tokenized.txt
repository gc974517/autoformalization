\begin{document} \begin{theorem} Take the following code segment as follows \begin{verbatim} <var:a> := <nat:1> ; <var:a> := <var:a> * <var:U> ; <var:a> := <var:a> * <var:U> ; <var:a> := <nat:1> + <var:a> * <var:U> ; <var:a> := <nat:2> + <var:a> * <var:U> ; <var:a> := <nat:1> + <var:a> * <var:U> \end{verbatim} Allowing it to hold that $ <var:U> = <var:n> $ prior to evaluating the code segment , then we see $ <var:a> = <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:1> $ after list of commands executes . \end{theorem} \begin{proof} Demonstrating correctness of this series of commands can be done with Hoare techniques . Taking another step toward the following step contained in our program , we see the variable binding statement letting $ <nat:1> $ to $ <var:a>$ . This advances the condition $ \{ <var:U> = <var:n> \} $ to $ \{ <var:U> = <var:n> \land <var:a> = <nat:1> \} $ . Immediately following , we see the variable binding command giving $ <var:a> * <var:U> $ into $ <var:a>$ . This forwards the condition $ \{ <var:U> = <var:n> \land <var:a> = <nat:1> \} $ to the postcondition $ \{ <var:U> = <var:n> \land <var:a> = <nat:1> \times <var:n> + \} $ . This is guaranteed using the assignment scheme obtained from standard Hoare logic . Next , we have the environment update statement yielding $ <var:a> * <var:U> $ to $ <var:a>$ . This advances the precondition $ \{ <var:U> = <var:n> \land <var:a> = <nat:1> \times <var:n> + \} $ into the condition $ \{ <var:U> = <var:n> \land <var:a> = <nat:1> \times <var:n> ^ <nat:2> + \} $ . Keeping momentum , the variable assignmet statement \verb | <var:a> := <nat:1> + <var:a> * <var:U> ; | . This takes $ \{ <var:U> = <var:n> \land <var:a> = <nat:1> \times <var:n> ^ <nat:2> + \} $ as $ \{ <var:U> = <var:n> \land <var:a> = <nat:1> \times <var:n> ^ <nat:3> + <nat:1> \} $ . Advancing to the following command contained in our set of commands , we have the statement \verb | <var:a> := <nat:2> + <var:a> * <var:U> ; | . This forwards the precondition $ \{ <var:U> = <var:n> \land <var:a> = <nat:1> \times <var:n> ^ <nat:3> + <nat:1> \} $ to the condition $ \{ <var:U> = <var:n> \land <var:a> = <nat:1> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> + <nat:2> \} $ . Advancing , we see the variable update command assigning $ <nat:1> + <var:a> * <var:U$ into $ <var:a>$ . This advances $ \{ <var:U> = <var:n> \land <var:a> = <nat:1> \times <var:n> ^ <nat:4> + <nat:1> \times <var:n> + <nat:2> \} $ to the condition $ \{ <var:U> = <var:n> \land <var:a> = <nat:1> \times <var:n> ^ <nat:5> + <nat:1> \times <var:n> ^ <nat:2> + <nat:2> \times <var:n> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:U> = <var:n> }} <var:a> := <nat:1> ; <var:a> := <var:a> * <var:U> ; <var:a> := <var:a> * <var:U> ; <var:a> := <nat:1> + <var:a> * <var:U> ; <var:a> := <nat:2> + <var:a> * <var:U> ; <var:a> := <nat:1> + <var:a> * <var:U> {{ <var:a> = <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:a> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:a> = <nat:1> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:a> = <nat:1> * <var:n> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:a> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:a> = <nat:1> * <var:n> ^ <nat:4> + <nat:1> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:n> /\ <var:a> = <nat:1> * <var:n> ^ <nat:5> + <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 