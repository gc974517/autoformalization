\begin{document} \begin{theorem} Take the following series of instructions as follows \begin{verbatim} <var:P0> := <nat:2> ; <var:P1> := <nat:7> ; <var:P1> := <var:P1> * <var:y> ; <var:P2> := <nat:9> ; <var:P2> := <var:P2> * <var:y> ; <var:P2> := <var:P2> * <var:y> ; <var:o> := <var:P2> ; <var:o> := <var:o> + <var:P1> ; <var:o> := <var:o> + <var:P0> \end{verbatim} Given it to be that $ <var:y> = <var:p> $ , given some positive coefficients $ <var:p> $ , before the evaluation of the code then $ <var:o> = <nat:9> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic produces : \begin{eqnarray} \{ <var:y> = <var:p> \} \\ <var:P0> := <nat:2> ; \\ \{ <var:y> = <var:p> \land <var:P0> = <nat:2> \} \\ <var:P1> := <nat:7> ; \\ \{ <var:y> = <var:p> \land <var:P0> = <nat:2> \land <var:P1> = <nat:7> \} \\ <var:P1> := <var:P1> * <var:y> ; \\ \{ <var:y> = <var:p> \land <var:P0> = <nat:2> \land <var:P1> = <nat:7> * <var:p> \} \\ <var:P2> := <nat:9> ; \\ \{ <var:y> = <var:p> \land <var:P0> = <nat:2> \land <var:P1> = <nat:7> * <var:p> \land <var:P2> = <nat:9> \} \\ <var:P2> := <var:P2> * <var:y> ; \\ \{ <var:y> = <var:p> \land <var:P0> = <nat:2> \land <var:P1> = <nat:7> * <var:p> \land <var:P2> = <nat:9> * <var:p> \} \\ <var:P2> := <var:P2> * <var:y> ; \\ \{ <var:y> = <var:p> \land <var:P0> = <nat:2> \land <var:P1> = <nat:7> * <var:p> \land <var:P2> = <nat:9> * <var:p> ^ <nat:2> \} \\ <var:o> := <var:P2> ; \\ \{ <var:y> = <var:p> \land <var:P0> = <nat:2> \land <var:P1> = <nat:7> * <var:p> \land <var:o> = <nat:9> * <var:p> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:P1> ; \\ \{ <var:y> = <var:p> \land <var:P0> = <nat:2> \land <var:o> = <nat:9> * <var:p> ^ <nat:2> + <nat:7> * <var:p> \} \\ <var:o> := <var:o> + <var:P0> \\ \{ <var:y> = <var:p> \land <var:o> = <nat:9> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:2> \} \end{eqnarray} Given the above , the code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:y> = <var:p> }} <var:P0> := <nat:2> ; <var:P1> := <nat:7> ; <var:P1> := <var:P1> * <var:y> ; <var:P2> := <nat:9> ; <var:P2> := <var:P2> * <var:y> ; <var:P2> := <var:P2> * <var:y> ; <var:o> := <var:P2> ; <var:o> := <var:o> + <var:P1> ; <var:o> := <var:o> + <var:P0> {{ <var:o> = <nat:9> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:P0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:7> * <var:p> /\ <var:P2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:7> * <var:p> /\ <var:P2> = <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:7> * <var:p> /\ <var:P2> = <nat:9> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:P0> = <nat:2> /\ <var:P1> = <nat:7> * <var:p> /\ <var:o> = <nat:9> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:P0> = <nat:2> /\ <var:o> = <nat:9> * <var:p> ^ <nat:2> + <nat:7> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:p> /\ <var:o> = <nat:9> * <var:p> ^ <nat:2> + <nat:7> * <var:p> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 