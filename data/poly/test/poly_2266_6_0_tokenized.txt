\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:w0> := <nat:1> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:Z> ; <var:w2> := <var:w2> * <var:Z> ; <var:m> := <var:w2> ; <var:m> := <var:m> + <var:w0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:Z> = <var:P> $ ( given any integers $ <var:P> $ ) prior to the evaluation of the segment of code it follows that we see $ <var:m> = <nat:3> \cdot <var:P> ^ <nat:2> + <nat:1> $ when series of commands is done . \end{theorem} \begin{proof} The application of typical Hoare reasoning produces : \begin{eqnarray} \{ <var:Z> = <var:P> \} \\ <var:w0> := <nat:1> ; \\ \{ <var:Z> = <var:P> \land <var:w0> = <nat:1> \} \\ <var:w2> := <nat:3> ; \\ \{ <var:Z> = <var:P> \land <var:w0> = <nat:1> \land <var:w2> = <nat:3> \} \\ <var:w2> := <var:w2> * <var:Z> ; \\ \{ <var:Z> = <var:P> \land <var:w0> = <nat:1> \land <var:w2> = <nat:3> \cdot <var:P> \} \\ <var:w2> := <var:w2> * <var:Z> ; \\ \{ <var:Z> = <var:P> \land <var:w0> = <nat:1> \land <var:w2> = <nat:3> \cdot <var:P> ^ <nat:2> \} \\ <var:m> := <var:w2> ; \\ \{ <var:Z> = <var:P> \land <var:w0> = <nat:1> \land <var:m> = <nat:3> \cdot <var:P> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:w0> \\ \{ <var:Z> = <var:P> \land <var:m> = <nat:3> \cdot <var:P> ^ <nat:2> + <nat:1> \} \end{eqnarray} Therefore , this list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w2> : string := " <var:w2> " . Definition <def:poly> := <var:w0> := <nat:1> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:Z> ; <var:w2> := <var:w2> * <var:Z> ; <var:m> := <var:w2> ; <var:m> := <var:m> + <var:w0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:Z> = <var:P> }} <def:poly> {{ <var:m> = <nat:3> * <var:P> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:w0> = <nat:1> /\ <var:w2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:w0> = <nat:1> /\ <var:w2> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:w0> = <nat:1> /\ <var:w2> = <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:w0> = <nat:1> /\ <var:m> = <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:P> /\ <var:m> = <nat:3> * <var:P> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 