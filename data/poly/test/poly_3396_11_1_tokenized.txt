\begin{document} \begin{theorem} Let the following list of instructions such that \begin{verbatim} <var:c1> := <var:u> ; <var:c2> := <var:c1> * <var:u> ; <var:c3> := <var:c2> * <var:u> ; <var:c0> := <nat:4> ; <var:c1> := <var:c1> * <nat:2> ; <var:c2> := <var:c2> * <nat:2> ; <var:c3> := <var:c3> * <nat:4> ; <var:N> := <var:c3> <var:N> := <var:N> + <var:c2> <var:N> := <var:N> + <var:c1> <var:N> := <var:N> + <var:c0> \end{verbatim} Allowing that we have $ <var:u> = <var:r> $ prior to executing our list of instructions it follows that $ <var:N> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:2> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:4> $ when code segment executes . \end{theorem} \begin{proof} The flow of logic for the series of instructions is demonstrated through Hoare techniques . After , \begin{verbatim} { <var:u> = <var:r> } <var:c1> := <var:u> { <var:u> = <var:r> \land <var:c1> = <var:r> } { <var:u> = <var:r> \land <var:c1> = <var:r> } <var:c2> := <var:c1> * <var:u> { <var:u> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <var:r> ^ <nat:2> } { <var:u> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <var:r> ^ <nat:2> } <var:c3> := <var:c2> * <var:u> { <var:u> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> } { <var:u> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> } <var:c0> := <nat:4> { <var:u> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> \land <var:c0> = <nat:4> } { <var:u> = <var:r> \land <var:c1> = <var:r> \land <var:c2> = <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> \land <var:c0> = <nat:4> } <var:c1> := <var:c1> * <nat:2> { <var:u> = <var:r> \land <var:c1> = <nat:2> * <var:r> \land <var:c2> = <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> \land <var:c0> = <nat:4> } { <var:u> = <var:r> \land <var:c1> = <nat:2> * <var:r> \land <var:c2> = <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> \land <var:c0> = <nat:4> } <var:c2> := <var:c2> * <nat:2> { <var:u> = <var:r> \land <var:c1> = <nat:2> * <var:r> \land <var:c2> = <nat:2> * <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> \land <var:c0> = <nat:4> } { <var:u> = <var:r> \land <var:c1> = <nat:2> * <var:r> \land <var:c2> = <nat:2> * <var:r> ^ <nat:2> \land <var:c3> = <var:r> ^ <nat:3> \land <var:c0> = <nat:4> } <var:c3> := <var:c3> * <nat:4> { <var:u> = <var:r> \land <var:c1> = <nat:2> * <var:r> \land <var:c2> = <nat:2> * <var:r> ^ <nat:2> \land <var:c3> = <nat:4> * <var:r> ^ <nat:3> \land <var:c0> = <nat:4> } { <var:u> = <var:r> \land <var:c1> = <nat:2> * <var:r> \land <var:c2> = <nat:2> * <var:r> ^ <nat:2> \land <var:c3> = <nat:4> * <var:r> ^ <nat:3> \land <var:c0> = <nat:4> } <var:N> := <var:c3{ <var:u> = <var:r> \land <var:c1> = <nat:2> * <var:r> \land <var:c2> = <nat:2> * <var:r> ^ <nat:2> \land <var:c0> = <nat:4> \land <var:N> = <nat:4> * <var:r> ^ <nat:3> } { <var:u> = <var:r> \land <var:c1> = <nat:2> * <var:r> \land <var:c2> = <nat:2> * <var:r> ^ <nat:2> \land <var:c0> = <nat:4> \land <var:N> = <nat:4> * <var:r> ^ <nat:3> } <var:N> := <var:N> + <var:c2{ <var:u> = <var:r> \land <var:c1> = <nat:2> * <var:r> \land <var:c0> = <nat:4> \land <var:N> = <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> } { <var:u> = <var:r> \land <var:c1> = <nat:2> * <var:r> \land <var:c0> = <nat:4> \land <var:N> = <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> } <var:N> := <var:N> + <var:c1{ <var:u> = <var:r> \land <var:c0> = <nat:4> \land <var:N> = <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:2> * <var:r> } \end{verbatim} Moving on to the following command contained in our list of commands , we see \begin{verbatim} { <var:u> = <var:r> } <var:c1> := <var:u> { <var:u> = <var:r> \land <var:c1> = <var:r> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:u> = <var:r> }} <var:c1> := <var:u> ; <var:c2> := <var:c1> * <var:u> ; <var:c3> := <var:c2> * <var:u> ; <var:c0> := <nat:4> ; <var:c1> := <var:c1> * <nat:2> ; <var:c2> := <var:c2> * <nat:2> ; <var:c3> := <var:c3> * <nat:4> ; <var:N> := <var:c3> <var:N> := <var:N> + <var:c2> <var:N> := <var:N> + <var:c1> <var:N> := <var:N> + <var:c0> {{ <var:N> = <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:c1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:c1> = <var:r> /\ <var:c2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:c1> = <var:r> /\ <var:c2> = <var:r> ^ <nat:2> /\ <var:c3> = <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:c1> = <var:r> /\ <var:c2> = <var:r> ^ <nat:2> /\ <var:c3> = <var:r> ^ <nat:3> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:c1> = <nat:2> * <var:r> /\ <var:c2> = <var:r> ^ <nat:2> /\ <var:c3> = <var:r> ^ <nat:3> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:c1> = <nat:2> * <var:r> /\ <var:c2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:c3> = <var:r> ^ <nat:3> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:c1> = <nat:2> * <var:r> /\ <var:c2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:c3> = <nat:4> * <var:r> ^ <nat:3> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:c1> = <nat:2> * <var:r> /\ <var:c2> = <nat:2> * <var:r> ^ <nat:2> /\ <var:c0> = <nat:4> /\ <var:N> = <nat:4> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:c1> = <nat:2> * <var:r> /\ <var:c0> = <nat:4> /\ <var:N> = <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:c0> = <nat:4> /\ <var:N> = <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:r> /\ <var:N> = <nat:4> * <var:r> ^ <nat:3> + <nat:2> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 