\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:O> := <nat:4> ; <var:O> := <nat:3> + <var:O> * <var:N> ; <var:O> := <var:O> * <var:N> ; <var:O> := <nat:1> + <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> ; <var:O> := <var:O> * <var:N> ; <var:O> := <nat:4> + <var:O> * <var:N> ; <var:O> := <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> \end{verbatim} \end{definition} \begin{theorem} Let the following code <def:poly> . Given it to hold that $ <var:N> = <var:o> $ prior to evaluating the program , it holds that we have $ <var:O> = <nat:4> \cdot <var:o> ^ <nat:9> + <nat:3> \cdot <var:o> ^ <nat:8> + <nat:1> \cdot <var:o> ^ <nat:6> + <nat:2> \cdot <var:o> ^ <nat:5> + <nat:4> \cdot <var:o> ^ <nat:3> + <nat:2> \cdot <var:o> + <nat:2> $ when code segment is done executing . \end{theorem} \begin{proof} Utilizing Hoare techniques results in : \begin{eqnarray} \{ <var:N> = <var:o> \} \\ <var:O> := <nat:4> ; \\ \{ <var:N> = <var:o> \land <var:O> = <nat:4> \} \\ <var:O> := <nat:3> + <var:O> * <var:N> ; \\ \{ <var:N> = <var:o> \land <var:O> = <nat:4> * <var:o> + <nat:3> \} \\ <var:O> := <var:O> * <var:N> ; \\ \{ <var:N> = <var:o> \land <var:O> = <nat:4> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + \} \\ <var:O> := <nat:1> + <var:O> * <var:N> ; \\ \{ <var:N> = <var:o> \land <var:O> = <nat:4> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:1> \} \\ <var:O> := <nat:2> + <var:O> * <var:N> ; \\ \{ <var:N> = <var:o> \land <var:O> = <nat:4> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:2> \} \\ <var:O> := <var:O> * <var:N> ; \\ \{ <var:N> = <var:o> \land <var:O> = <nat:4> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + \} \\ <var:O> := <nat:4> + <var:O> * <var:N> ; \\ \{ <var:N> = <var:o> \land <var:O> = <nat:4> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:4> \} \\ <var:O> := <var:O> * <var:N> ; \\ \{ <var:N> = <var:o> \land <var:O> = <nat:4> * <var:o> ^ <nat:7> + <nat:3> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:4> * <var:o> + \} \\ <var:O> := <nat:2> + <var:O> * <var:N> ; \\ \{ <var:N> = <var:o> \land <var:O> = <nat:4> * <var:o> ^ <nat:8> + <nat:3> * <var:o> ^ <nat:7> + <nat:1> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> + <nat:2> \} \\ <var:O> := <nat:2> + <var:O> * <var:N> \\ \{ <var:N> = <var:o> \land <var:O> = <nat:4> * <var:o> ^ <nat:9> + <nat:3> * <var:o> ^ <nat:8> + <nat:1> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:3> + <nat:2> * <var:o> + <nat:2> \} \end{eqnarray} Considering the preceding argument , the program is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:4> ; <var:O> := <nat:3> + <var:O> * <var:N> ; <var:O> := <var:O> * <var:N> ; <var:O> := <nat:1> + <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> ; <var:O> := <var:O> * <var:N> ; <var:O> := <nat:4> + <var:O> * <var:N> ; <var:O> := <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> ; <var:O> := <nat:2> + <var:O> * <var:N> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:N> = <var:o> }} <def:poly> {{ <var:O> = <nat:4> * <var:o> ^ <nat:9> + <nat:3> * <var:o> ^ <nat:8> + <nat:1> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:3> + <nat:2> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:o> /\ <var:O> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:o> /\ <var:O> = <nat:4> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:o> /\ <var:O> = <nat:4> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:o> /\ <var:O> = <nat:4> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:o> /\ <var:O> = <nat:4> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:1> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:o> /\ <var:O> = <nat:4> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:o> /\ <var:O> = <nat:4> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:1> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:o> /\ <var:O> = <nat:4> * <var:o> ^ <nat:7> + <nat:3> * <var:o> ^ <nat:6> + <nat:1> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:4> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:o> /\ <var:O> = <nat:4> * <var:o> ^ <nat:8> + <nat:3> * <var:o> ^ <nat:7> + <nat:1> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:o> /\ <var:O> = <nat:4> * <var:o> ^ <nat:9> + <nat:3> * <var:o> ^ <nat:8> + <nat:1> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:3> + <nat:2> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 