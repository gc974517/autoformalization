\begin{document} \begin{theorem} Define the following series of instructions as \begin{verbatim} <var:C0> := <nat:1> ; <var:k> := <var:C0> \end{verbatim} Allowing that we have $ <var:S> = <var:Q> $ for all whole numbers $ <var:Q> $ ahead of the evaluation of this list of commands it must be that $ <var:k> = <nat:1> $ . \end{theorem} \begin{proof} Observe this decorated list of commands . \begin{eqnarray} \{ <var:S> = <var:Q> \} \\ <var:C0> := <nat:1> ; \\ \{ <var:S> = <var:Q> \land <var:C0> = <nat:1> \} \\ <var:k> := <var:C0> \\ \{ <var:S> = <var:Q> \land <var:k> = <nat:1> \} \end{eqnarray} Using usual Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:S> = <var:Q> }} <var:C0> := <nat:1> ; <var:k> := <var:C0> {{ <var:k> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:C0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:Q> /\ <var:k> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 