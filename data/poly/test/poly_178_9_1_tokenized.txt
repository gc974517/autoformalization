\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:h1> := <var:a> ; <var:h2> := <var:h1> * <var:a> ; <var:h3> := <var:h2> * <var:a> ; <var:h0> := <nat:9> ; <var:h2> := <var:h2> * <nat:6> ; <var:h3> := <var:h3> * <nat:2> ; <var:w> := <var:h3> <var:w> := <var:w> + <var:h2> <var:w> := <var:w> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Assume --- assuming some positive integers $ <var:p> $ --- it to hold that $ <var:a> = <var:p> $ before the evaluation of our list of instructions , it follows that we have $ <var:w> = <nat:2> \times <var:p> ^ <nat:3> + <nat:6> \times <var:p> ^ <nat:2> + <nat:9> $ once segment of code terminates . \end{theorem} \begin{proof} Demonstrating correctness of this list of commands is evident with Hoare reasoning . Going forward , we see \begin{eqnarray} \{ <var:a> = <var:p> \} \, <var:h1> := <var:a> \, \{ <var:a> = <var:p> \land <var:h1> = <var:p> \} \\ \{ <var:a> = <var:p> \land <var:h1> = <var:p> \} \, <var:h2> := <var:h1> * <var:a> \, \{ <var:a> = <var:p> \land <var:h1> = <var:p> \land <var:h2> = <var:p> ^ <nat:2> \} \\ \{ <var:a> = <var:p> \land <var:h1> = <var:p> \land <var:h2> = <var:p> ^ <nat:2> \} \, <var:h3> := <var:h2> * <var:a> \, \{ <var:a> = <var:p> \land <var:h1> = <var:p> \land <var:h2> = <var:p> ^ <nat:2> \land <var:h3> = <var:p> ^ <nat:3> \} \end{eqnarray} Moving on to the following commands contained in our list of commands , we see \begin{eqnarray} \{ <var:a> = <var:p> \} \, <var:h1> := <var:a> \, \{ <var:a> = <var:p> \land <var:h1> = <var:p> \} \\ \{ <var:a> = <var:p> \land <var:h1> = <var:p> \} \, <var:h2> := <var:h1> * <var:a> \, \{ <var:a> = <var:p> \land <var:h1> = <var:p> \land <var:h2> = <var:p> ^ <nat:2> \} \\ \{ <var:a> = <var:p> \land <var:h1> = <var:p> \land <var:h2> = <var:p> ^ <nat:2> \} \, <var:h3> := <var:h2> * <var:a> \, \{ <var:a> = <var:p> \land <var:h1> = <var:p> \land <var:h2> = <var:p> ^ <nat:2> \land <var:h3> = <var:p> ^ <nat:3> \} \\ \{ <var:a> = <var:p> \land <var:h1> = <var:p> \land <var:h2> = <var:p> ^ <nat:2> \land <var:h3> = <var:p> ^ <nat:3> \} \, <var:h0> := <nat:9> \, \{ <var:a> = <var:p> \land <var:h1> = <var:p> \land <var:h2> = <var:p> ^ <nat:2> \land <var:h3> = <var:p> ^ <nat:3> \land <var:h0> = <nat:9> \} \\ \{ <var:a> = <var:p> \land <var:h1> = <var:p> \land <var:h2> = <var:p> ^ <nat:2> \land <var:h3> = <var:p> ^ <nat:3> \land <var:h0> = <nat:9> \} \, <var:h2> := <var:h2> * <nat:6> \, \{ <var:a> = <var:p> \land <var:h1> = <var:p> \land <var:h2> = <nat:6> * <var:p> ^ <nat:2> \land <var:h3> = <var:p> ^ <nat:3> \land <var:h0> = <nat:9> \} \end{eqnarray} This is shown to be logically sound through the scheme obtained from typical Hoare reasoning . Taking a look at the proceeding statement in the series of instructions , \begin{eqnarray} \{ <var:a> = <var:p> \} \, <var:h1> := <var:a> \, \{ <var:a> = <var:p> \land <var:h1> = <var:p> \} \end{eqnarray} This is shown through the variable update law given in usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:a> ; <var:h2> := <var:h1> * <var:a> ; <var:h3> := <var:h2> * <var:a> ; <var:h0> := <nat:9> ; <var:h2> := <var:h2> * <nat:6> ; <var:h3> := <var:h3> * <nat:2> ; <var:w> := <var:h3> <var:w> := <var:w> + <var:h2> <var:w> := <var:w> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:a> = <var:p> }} <def:poly> {{ <var:w> = <nat:2> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:h1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:h1> = <var:p> /\ <var:h2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:h1> = <var:p> /\ <var:h2> = <var:p> ^ <nat:2> /\ <var:h3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:h1> = <var:p> /\ <var:h2> = <var:p> ^ <nat:2> /\ <var:h3> = <var:p> ^ <nat:3> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:h1> = <var:p> /\ <var:h2> = <nat:6> * <var:p> ^ <nat:2> /\ <var:h3> = <var:p> ^ <nat:3> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:h1> = <var:p> /\ <var:h2> = <nat:6> * <var:p> ^ <nat:2> /\ <var:h3> = <nat:2> * <var:p> ^ <nat:3> /\ <var:h0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:h1> = <var:p> /\ <var:h2> = <nat:6> * <var:p> ^ <nat:2> /\ <var:h0> = <nat:9> /\ <var:w> = <nat:2> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:h1> = <var:p> /\ <var:h0> = <nat:9> /\ <var:w> = <nat:2> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:p> /\ <var:w> = <nat:2> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 