\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:d> := <nat:1> ; <var:d> := <var:d> * <var:K> ; <var:d> := <nat:3> + <var:d> * <var:K> ; <var:d> := <var:d> * <var:K> ; <var:d> := <nat:2> + <var:d> * <var:K> ; <var:d> := <nat:3> + <var:d> * <var:K> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:K> = <var:I> $ before running the list of commands , it follows that we have $ <var:d> = <nat:1> \times <var:I> ^ <nat:5> + <nat:3> \times <var:I> ^ <nat:3> + <nat:2> \times <var:I> + <nat:3> $ after set of commands terminates . \end{theorem} \begin{proof} Demonstrating correctness of the code is accomplished through Hoare techniques . Stepping forward , we have the variable assignmet statement \verb | <var:d> := <nat:1> ; | . This redefines the condition $ \{ <var:K> = <var:I> \} $ as $ \{ <var:K> = <var:I> \land <var:d> = <nat:1> \} $ . Taking another step toward the upcoming line of code seen in the list of commands , we have the environment update command \verb | <var:d> := <var:d> * <var:K> ; | . This line advances $ \{ <var:K> = <var:I> \land <var:d> = <nat:1> \} $ to the condition $ \{ <var:K> = <var:I> \land <var:d> = <nat:1> * <var:I> + \} $ . Honing in on the subsequent bit of code seen in our series of instructions , the assignment statement defining $ <nat:3> + <var:d> * <var:K> $ toward $ <var:d>$ . This moves $ \{ <var:K> = <var:I> \land <var:d> = <nat:1> * <var:I> + \} $ as $ \{ <var:K> = <var:I> \land <var:d> = <nat:1> * <var:I> ^ <nat:2> + <nat:3> \} $ . This is guaranteed with the assignment scheme defined in usual Hoare reasoning . Moving forward , we have the statement \verb | <var:d> := <var:d> * <var:K> ; | . This moves the condition $ \{ <var:K> = <var:I> \land <var:d> = <nat:1> * <var:I> ^ <nat:2> + <nat:3> \} $ toward the postcondition $ \{ <var:K> = <var:I> \land <var:d> = <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> + \} $ . This is sound through the assignment law obtained from typical Hoare reasoning . Focusing on the proceeding bit of code in the code segment , we see the binding line yielding $ <nat:2> + <var:d> * <var:K> $ as $ <var:d>$ . This line forwards the precondition $ \{ <var:K> = <var:I> \land <var:d> = <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> + \} $ as the postcondition $ \{ <var:K> = <var:I> \land <var:d> = <nat:1> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> \} $ . This is rigorously given with the assignment rule from Hoare logic . Immediately after , we have the variable assignmet statement giving $ <nat:3> + <var:d> * <var:K$ toward $ <var:d>$ . This statement transfers $ \{ <var:K> = <var:I> \land <var:d> = <nat:1> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> \} $ as $ \{ <var:K> = <var:I> \land <var:d> = <nat:1> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + <nat:3> \} $ . This is rigorously given with the assignment rule in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:1> ; <var:d> := <var:d> * <var:K> ; <var:d> := <nat:3> + <var:d> * <var:K> ; <var:d> := <var:d> * <var:K> ; <var:d> := <nat:2> + <var:d> * <var:K> ; <var:d> := <nat:3> + <var:d> * <var:K> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:K> = <var:I> }} <def:poly> {{ <var:d> = <nat:1> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:d> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:d> = <nat:1> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:d> = <nat:1> * <var:I> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:d> = <nat:1> * <var:I> ^ <nat:3> + <nat:3> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:d> = <nat:1> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:I> /\ <var:d> = <nat:1> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 