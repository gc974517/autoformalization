\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:g1> := <var:R> ; <var:g2> := <var:g1> * <var:R> ; <var:g3> := <var:g2> * <var:R> ; <var:g4> := <var:g3> * <var:R> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:6> ; <var:g2> := <var:g2> * <nat:9> ; <var:g3> := <var:g3> * <nat:3> ; <var:g4> := <var:g4> * <nat:7> ; <var:U> := <var:g4> <var:U> := <var:U> + <var:g3> <var:U> := <var:U> + <var:g2> <var:U> := <var:U> + <var:g1> <var:U> := <var:U> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:R> = <var:v> $ prior to executing the series of instructions , it follows that $ <var:U> = <nat:7> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:9> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:3> $ after segment of code is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:v> \} \\ <var:g1> := <var:R> ; \\ \{ <var:R> = <var:v> \land <var:g1> = <var:v> \} \\ <var:g2> := <var:g1> * <var:R> ; \\ \{ <var:R> = <var:v> \land <var:g1> = <var:v> \land <var:g2> = <var:v> ^ <nat:2> \} \\ <var:g3> := <var:g2> * <var:R> ; \\ \{ <var:R> = <var:v> \land <var:g1> = <var:v> \land <var:g2> = <var:v> ^ <nat:2> \land <var:g3> = <var:v> ^ <nat:3> \} \\ <var:g4> := <var:g3> * <var:R> ; \\ \{ <var:R> = <var:v> \land <var:g1> = <var:v> \land <var:g2> = <var:v> ^ <nat:2> \land <var:g3> = <var:v> ^ <nat:3> \land <var:g4> = <var:v> ^ <nat:4> \} \\ <var:g0> := <nat:3> ; \\ \{ <var:R> = <var:v> \land <var:g1> = <var:v> \land <var:g2> = <var:v> ^ <nat:2> \land <var:g3> = <var:v> ^ <nat:3> \land <var:g4> = <var:v> ^ <nat:4> \land <var:g0> = <nat:3> \} \\ <var:g1> := <var:g1> * <nat:6> ; \\ \{ <var:R> = <var:v> \land <var:g1> = <nat:6> * <var:v> \land <var:g2> = <var:v> ^ <nat:2> \land <var:g3> = <var:v> ^ <nat:3> \land <var:g4> = <var:v> ^ <nat:4> \land <var:g0> = <nat:3> \} \\ <var:g2> := <var:g2> * <nat:9> ; \\ \{ <var:R> = <var:v> \land <var:g1> = <nat:6> * <var:v> \land <var:g2> = <nat:9> * <var:v> ^ <nat:2> \land <var:g3> = <var:v> ^ <nat:3> \land <var:g4> = <var:v> ^ <nat:4> \land <var:g0> = <nat:3> \} \\ <var:g3> := <var:g3> * <nat:3> ; \\ \{ <var:R> = <var:v> \land <var:g1> = <nat:6> * <var:v> \land <var:g2> = <nat:9> * <var:v> ^ <nat:2> \land <var:g3> = <nat:3> * <var:v> ^ <nat:3> \land <var:g4> = <var:v> ^ <nat:4> \land <var:g0> = <nat:3> \} \\ <var:g4> := <var:g4> * <nat:7> ; \\ \{ <var:R> = <var:v> \land <var:g1> = <nat:6> * <var:v> \land <var:g2> = <nat:9> * <var:v> ^ <nat:2> \land <var:g3> = <nat:3> * <var:v> ^ <nat:3> \land <var:g4> = <nat:7> * <var:v> ^ <nat:4> \land <var:g0> = <nat:3> \} \\ <var:U> := <var:g4> \\ \{ <var:R> = <var:v> \land <var:g1> = <nat:6> * <var:v> \land <var:g2> = <nat:9> * <var:v> ^ <nat:2> \land <var:g3> = <nat:3> * <var:v> ^ <nat:3> \land <var:g0> = <nat:3> \land <var:U> = <nat:7> * <var:v> ^ <nat:4> \} \\ <var:U> := <var:U> + <var:g3> \\ \{ <var:R> = <var:v> \land <var:g1> = <nat:6> * <var:v> \land <var:g2> = <nat:9> * <var:v> ^ <nat:2> \land <var:g0> = <nat:3> \land <var:U> = <nat:7> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:g2> \\ \{ <var:R> = <var:v> \land <var:g1> = <nat:6> * <var:v> \land <var:g0> = <nat:3> \land <var:U> = <nat:7> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:9> * <var:v> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:g1> \\ \{ <var:R> = <var:v> \land <var:g0> = <nat:3> \land <var:U> = <nat:7> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:9> * <var:v> ^ <nat:2> + <nat:6> * <var:v> \} \\ <var:U> := <var:U> + <var:g0> \\ \{ <var:R> = <var:v> \land <var:U> = <nat:7> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:9> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:3> \} \end{eqnarray} Applying Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <var:g4> : string := " <var:g4> " . Definition <def:poly> := <var:g1> := <var:R> ; <var:g2> := <var:g1> * <var:R> ; <var:g3> := <var:g2> * <var:R> ; <var:g4> := <var:g3> * <var:R> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:6> ; <var:g2> := <var:g2> * <nat:9> ; <var:g3> := <var:g3> * <nat:3> ; <var:g4> := <var:g4> * <nat:7> ; <var:U> := <var:g4> <var:U> := <var:U> + <var:g3> <var:U> := <var:U> + <var:g2> <var:U> := <var:U> + <var:g1> <var:U> := <var:U> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:R> = <var:v> }} <def:poly> {{ <var:U> = <nat:7> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:9> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g1> = <var:v> /\ <var:g2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g1> = <var:v> /\ <var:g2> = <var:v> ^ <nat:2> /\ <var:g3> = <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g1> = <var:v> /\ <var:g2> = <var:v> ^ <nat:2> /\ <var:g3> = <var:v> ^ <nat:3> /\ <var:g4> = <var:v> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g1> = <var:v> /\ <var:g2> = <var:v> ^ <nat:2> /\ <var:g3> = <var:v> ^ <nat:3> /\ <var:g4> = <var:v> ^ <nat:4> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g1> = <nat:6> * <var:v> /\ <var:g2> = <var:v> ^ <nat:2> /\ <var:g3> = <var:v> ^ <nat:3> /\ <var:g4> = <var:v> ^ <nat:4> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g1> = <nat:6> * <var:v> /\ <var:g2> = <nat:9> * <var:v> ^ <nat:2> /\ <var:g3> = <var:v> ^ <nat:3> /\ <var:g4> = <var:v> ^ <nat:4> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g1> = <nat:6> * <var:v> /\ <var:g2> = <nat:9> * <var:v> ^ <nat:2> /\ <var:g3> = <nat:3> * <var:v> ^ <nat:3> /\ <var:g4> = <var:v> ^ <nat:4> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g1> = <nat:6> * <var:v> /\ <var:g2> = <nat:9> * <var:v> ^ <nat:2> /\ <var:g3> = <nat:3> * <var:v> ^ <nat:3> /\ <var:g4> = <nat:7> * <var:v> ^ <nat:4> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g1> = <nat:6> * <var:v> /\ <var:g2> = <nat:9> * <var:v> ^ <nat:2> /\ <var:g3> = <nat:3> * <var:v> ^ <nat:3> /\ <var:g0> = <nat:3> /\ <var:U> = <nat:7> * <var:v> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g1> = <nat:6> * <var:v> /\ <var:g2> = <nat:9> * <var:v> ^ <nat:2> /\ <var:g0> = <nat:3> /\ <var:U> = <nat:7> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g1> = <nat:6> * <var:v> /\ <var:g0> = <nat:3> /\ <var:U> = <nat:7> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:9> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:g0> = <nat:3> /\ <var:U> = <nat:7> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:9> * <var:v> ^ <nat:2> + <nat:6> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:v> /\ <var:U> = <nat:7> * <var:v> ^ <nat:4> + <nat:3> * <var:v> ^ <nat:3> + <nat:9> * <var:v> ^ <nat:2> + <nat:6> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 