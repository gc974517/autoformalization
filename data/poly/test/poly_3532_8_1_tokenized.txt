\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:f1> := <var:Y> ; <var:f2> := <var:f1> * <var:Y> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:7> ; <var:L> := <var:f2> <var:L> := <var:L> + <var:f1> <var:L> := <var:L> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:Y> = <var:F> $ prior to the evaluation of this series of instructions , it must be that $ <var:L> = <nat:7> \times <var:F> ^ <nat:2> + <nat:8> \times <var:F> + <nat:4> $ once list of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:F> \} \\ <var:f1> := <var:Y> ; \\ \{ <var:Y> = <var:F> \land <var:f1> = <var:F> \} \\ <var:f2> := <var:f1> * <var:Y> ; \\ \{ <var:Y> = <var:F> \land <var:f1> = <var:F> \land <var:f2> = <var:F> ^ <nat:2> \} \\ <var:f0> := <nat:4> ; \\ \{ <var:Y> = <var:F> \land <var:f1> = <var:F> \land <var:f2> = <var:F> ^ <nat:2> \land <var:f0> = <nat:4> \} \\ <var:f1> := <var:f1> * <nat:8> ; \\ \{ <var:Y> = <var:F> \land <var:f1> = <nat:8> \times <var:F> \land <var:f2> = <var:F> ^ <nat:2> \land <var:f0> = <nat:4> \} \\ <var:f2> := <var:f2> * <nat:7> ; \\ \{ <var:Y> = <var:F> \land <var:f1> = <nat:8> \times <var:F> \land <var:f2> = <nat:7> \times <var:F> ^ <nat:2> \land <var:f0> = <nat:4> \} \\ <var:L> := <var:f2> \\ \{ <var:Y> = <var:F> \land <var:f1> = <nat:8> \times <var:F> \land <var:f0> = <nat:4> \land <var:L> = <nat:7> \times <var:F> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:f1> \\ \{ <var:Y> = <var:F> \land <var:f0> = <nat:4> \land <var:L> = <nat:7> \times <var:F> ^ <nat:2> + <nat:8> \times <var:F> \} \\ <var:L> := <var:L> + <var:f0> \\ \{ <var:Y> = <var:F> \land <var:L> = <nat:7> \times <var:F> ^ <nat:2> + <nat:8> \times <var:F> + <nat:4> \} \end{eqnarray} Using Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <def:poly> := <var:f1> := <var:Y> ; <var:f2> := <var:f1> * <var:Y> ; <var:f0> := <nat:4> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:7> ; <var:L> := <var:f2> <var:L> := <var:L> + <var:f1> <var:L> := <var:L> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:Y> = <var:F> }} <def:poly> {{ <var:L> = <nat:7> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:f1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:f1> = <var:F> /\ <var:f2> = <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:f1> = <var:F> /\ <var:f2> = <var:F> ^ <nat:2> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:f1> = <nat:8> * <var:F> /\ <var:f2> = <var:F> ^ <nat:2> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:f1> = <nat:8> * <var:F> /\ <var:f2> = <nat:7> * <var:F> ^ <nat:2> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:f1> = <nat:8> * <var:F> /\ <var:f0> = <nat:4> /\ <var:L> = <nat:7> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:f0> = <nat:4> /\ <var:L> = <nat:7> * <var:F> ^ <nat:2> + <nat:8> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:F> /\ <var:L> = <nat:7> * <var:F> ^ <nat:2> + <nat:8> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 