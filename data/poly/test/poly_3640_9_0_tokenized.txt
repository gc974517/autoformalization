\begin{document} \begin{theorem} Define the following series of commands such that \begin{verbatim} <var:d0> := <nat:1> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:M> ; <var:d2> := <nat:6> ; <var:d2> := <var:d2> * <var:M> ; <var:d2> := <var:d2> * <var:M> ; <var:j> := <var:d2> ; <var:j> := <var:j> + <var:d1> ; <var:j> := <var:j> + <var:d0> \end{verbatim} Assume that $ <var:M> = <var:p> $ ahead of the execution of the program it must be that $ <var:j> = <nat:6> \cdot <var:p> ^ <nat:2> + <nat:2> \cdot <var:p> + <nat:1> $ once set of instructions is done . \end{theorem} \begin{proof} Demonstrating correctness of our set of commands can be seen through typical Hoare logic . Moving onward , we have \begin{verbatim} { <var:M> = <var:p> } <var:d0> := <nat:1> { <var:M> = <var:p> \land <var:d0> = <nat:1> } \end{verbatim} Taking a look at the next steps in our code segment , we have \begin{verbatim} { <var:M> = <var:p> } <var:d0> := <nat:1> { <var:M> = <var:p> \land <var:d0> = <nat:1> } { <var:M> = <var:p> \land <var:d0> = <nat:1> } <var:d1> := <nat:2> { <var:M> = <var:p> \land <var:d0> = <nat:1> \land <var:d1> = <nat:2> } { <var:M> = <var:p> \land <var:d0> = <nat:1> \land <var:d1> = <nat:2> } <var:d1> := <var:d1> * <var:M> { <var:M> = <var:p> \land <var:d0> = <nat:1> \land <var:d1> = <nat:2> \cdot <var:p> } { <var:M> = <var:p> \land <var:d0> = <nat:1> \land <var:d1> = <nat:2> \cdot <var:p> } <var:d2> := <nat:6> { <var:M> = <var:p> \land <var:d0> = <nat:1> \land <var:d1> = <nat:2> \cdot <var:p> \land <var:d2> = <nat:6> } { <var:M> = <var:p> \land <var:d0> = <nat:1> \land <var:d1> = <nat:2> \cdot <var:p> \land <var:d2> = <nat:6> } <var:d2> := <var:d2> * <var:M> { <var:M> = <var:p> \land <var:d0> = <nat:1> \land <var:d1> = <nat:2> \cdot <var:p> \land <var:d2> = <nat:6> \cdot <var:p> } { <var:M> = <var:p> \land <var:d0> = <nat:1> \land <var:d1> = <nat:2> \cdot <var:p> \land <var:d2> = <nat:6> \cdot <var:p> } <var:d2> := <var:d2> * <var:M> { <var:M> = <var:p> \land <var:d0> = <nat:1> \land <var:d1> = <nat:2> \cdot <var:p> \land <var:d2> = <nat:6> \cdot <var:p> ^ <nat:2> } { <var:M> = <var:p> \land <var:d0> = <nat:1> \land <var:d1> = <nat:2> \cdot <var:p> \land <var:d2> = <nat:6> \cdot <var:p> ^ <nat:2> } <var:j> := <var:d2> { <var:M> = <var:p> \land <var:d0> = <nat:1> \land <var:d1> = <nat:2> \cdot <var:p> \land <var:j> = <nat:6> \cdot <var:p> ^ <nat:2> } \end{verbatim} This is known to be sound through the environment update scheme given by Hoare logic . Taking another step toward the next statement found in our code , we have \begin{verbatim} { <var:M> = <var:p> } <var:d0> := <nat:1> { <var:M> = <var:p> \land <var:d0> = <nat:1> } \end{verbatim} This is deduced with the variable assignmet law of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:M> = <var:p> }} <var:d0> := <nat:1> ; <var:d1> := <nat:2> ; <var:d1> := <var:d1> * <var:M> ; <var:d2> := <nat:6> ; <var:d2> := <var:d2> * <var:M> ; <var:d2> := <var:d2> * <var:M> ; <var:j> := <var:d2> ; <var:j> := <var:j> + <var:d1> ; <var:j> := <var:j> + <var:d0> {{ <var:j> = <nat:6> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:2> * <var:p> /\ <var:d2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:2> * <var:p> /\ <var:d2> = <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:2> * <var:p> /\ <var:d2> = <nat:6> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:d0> = <nat:1> /\ <var:d1> = <nat:2> * <var:p> /\ <var:j> = <nat:6> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:d0> = <nat:1> /\ <var:j> = <nat:6> * <var:p> ^ <nat:2> + <nat:2> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:p> /\ <var:j> = <nat:6> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 