\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:f1> := <var:J> ; <var:f2> := <var:f1> * <var:J> ; <var:f3> := <var:f2> * <var:J> ; <var:f4> := <var:f3> * <var:J> ; <var:f0> := <nat:6> ; <var:f1> := <var:f1> * <nat:4> ; <var:f2> := <var:f2> * <nat:2> ; <var:f3> := <var:f3> * <nat:9> ; <var:f4> := <var:f4> * <nat:7> ; <var:n> := <var:f4> <var:n> := <var:n> + <var:f3> <var:n> := <var:n> + <var:f2> <var:n> := <var:n> + <var:f1> <var:n> := <var:n> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> in \emph{Imp} . Given ( assuming some $ <var:e> $ ) $ <var:J> = <var:e> $ before the evaluation of our list of commands then we see $ <var:n> = <nat:7> \cdot <var:e> ^ <nat:4> + <nat:9> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:4> \cdot <var:e> + <nat:6> $ . \end{theorem} \begin{proof} Let this decorated program . \begin{eqnarray} \{ <var:J> = <var:e> \} \\ <var:f1> := <var:J> ; \\ \{ <var:J> = <var:e> \land <var:f1> = <var:e> \} \\ <var:f2> := <var:f1> * <var:J> ; \\ \{ <var:J> = <var:e> \land <var:f1> = <var:e> \land <var:f2> = <var:e> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:J> ; \\ \{ <var:J> = <var:e> \land <var:f1> = <var:e> \land <var:f2> = <var:e> ^ <nat:2> \land <var:f3> = <var:e> ^ <nat:3> \} \\ <var:f4> := <var:f3> * <var:J> ; \\ \{ <var:J> = <var:e> \land <var:f1> = <var:e> \land <var:f2> = <var:e> ^ <nat:2> \land <var:f3> = <var:e> ^ <nat:3> \land <var:f4> = <var:e> ^ <nat:4> \} \\ <var:f0> := <nat:6> ; \\ \{ <var:J> = <var:e> \land <var:f1> = <var:e> \land <var:f2> = <var:e> ^ <nat:2> \land <var:f3> = <var:e> ^ <nat:3> \land <var:f4> = <var:e> ^ <nat:4> \land <var:f0> = <nat:6> \} \\ <var:f1> := <var:f1> * <nat:4> ; \\ \{ <var:J> = <var:e> \land <var:f1> = <nat:4> \cdot <var:e> \land <var:f2> = <var:e> ^ <nat:2> \land <var:f3> = <var:e> ^ <nat:3> \land <var:f4> = <var:e> ^ <nat:4> \land <var:f0> = <nat:6> \} \\ <var:f2> := <var:f2> * <nat:2> ; \\ \{ <var:J> = <var:e> \land <var:f1> = <nat:4> \cdot <var:e> \land <var:f2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:f3> = <var:e> ^ <nat:3> \land <var:f4> = <var:e> ^ <nat:4> \land <var:f0> = <nat:6> \} \\ <var:f3> := <var:f3> * <nat:9> ; \\ \{ <var:J> = <var:e> \land <var:f1> = <nat:4> \cdot <var:e> \land <var:f2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:f3> = <nat:9> \cdot <var:e> ^ <nat:3> \land <var:f4> = <var:e> ^ <nat:4> \land <var:f0> = <nat:6> \} \\ <var:f4> := <var:f4> * <nat:7> ; \\ \{ <var:J> = <var:e> \land <var:f1> = <nat:4> \cdot <var:e> \land <var:f2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:f3> = <nat:9> \cdot <var:e> ^ <nat:3> \land <var:f4> = <nat:7> \cdot <var:e> ^ <nat:4> \land <var:f0> = <nat:6> \} \\ <var:n> := <var:f4> \\ \{ <var:J> = <var:e> \land <var:f1> = <nat:4> \cdot <var:e> \land <var:f2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:f3> = <nat:9> \cdot <var:e> ^ <nat:3> \land <var:f0> = <nat:6> \land <var:n> = <nat:7> \cdot <var:e> ^ <nat:4> \} \\ <var:n> := <var:n> + <var:f3> \\ \{ <var:J> = <var:e> \land <var:f1> = <nat:4> \cdot <var:e> \land <var:f2> = <nat:2> \cdot <var:e> ^ <nat:2> \land <var:f0> = <nat:6> \land <var:n> = <nat:7> \cdot <var:e> ^ <nat:4> + <nat:9> \cdot <var:e> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:f2> \\ \{ <var:J> = <var:e> \land <var:f1> = <nat:4> \cdot <var:e> \land <var:f0> = <nat:6> \land <var:n> = <nat:7> \cdot <var:e> ^ <nat:4> + <nat:9> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:f1> \\ \{ <var:J> = <var:e> \land <var:f0> = <nat:6> \land <var:n> = <nat:7> \cdot <var:e> ^ <nat:4> + <nat:9> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:4> \cdot <var:e> \} \\ <var:n> := <var:n> + <var:f0> \\ \{ <var:J> = <var:e> \land <var:n> = <nat:7> \cdot <var:e> ^ <nat:4> + <nat:9> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:4> \cdot <var:e> + <nat:6> \} \end{eqnarray} Utilizing Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <var:f4> : string := " <var:f4> " . Definition <def:poly> := <var:f1> := <var:J> ; <var:f2> := <var:f1> * <var:J> ; <var:f3> := <var:f2> * <var:J> ; <var:f4> := <var:f3> * <var:J> ; <var:f0> := <nat:6> ; <var:f1> := <var:f1> * <nat:4> ; <var:f2> := <var:f2> * <nat:2> ; <var:f3> := <var:f3> * <nat:9> ; <var:f4> := <var:f4> * <nat:7> ; <var:n> := <var:f4> <var:n> := <var:n> + <var:f3> <var:n> := <var:n> + <var:f2> <var:n> := <var:n> + <var:f1> <var:n> := <var:n> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:J> = <var:e> }} <def:poly> {{ <var:n> = <nat:7> * <var:e> ^ <nat:4> + <nat:9> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:f1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:f1> = <var:e> /\ <var:f2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:f1> = <var:e> /\ <var:f2> = <var:e> ^ <nat:2> /\ <var:f3> = <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:f1> = <var:e> /\ <var:f2> = <var:e> ^ <nat:2> /\ <var:f3> = <var:e> ^ <nat:3> /\ <var:f4> = <var:e> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:f1> = <var:e> /\ <var:f2> = <var:e> ^ <nat:2> /\ <var:f3> = <var:e> ^ <nat:3> /\ <var:f4> = <var:e> ^ <nat:4> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:f1> = <nat:4> * <var:e> /\ <var:f2> = <var:e> ^ <nat:2> /\ <var:f3> = <var:e> ^ <nat:3> /\ <var:f4> = <var:e> ^ <nat:4> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:f1> = <nat:4> * <var:e> /\ <var:f2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:f3> = <var:e> ^ <nat:3> /\ <var:f4> = <var:e> ^ <nat:4> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:f1> = <nat:4> * <var:e> /\ <var:f2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:f3> = <nat:9> * <var:e> ^ <nat:3> /\ <var:f4> = <var:e> ^ <nat:4> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:f1> = <nat:4> * <var:e> /\ <var:f2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:f3> = <nat:9> * <var:e> ^ <nat:3> /\ <var:f4> = <nat:7> * <var:e> ^ <nat:4> /\ <var:f0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:f1> = <nat:4> * <var:e> /\ <var:f2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:f3> = <nat:9> * <var:e> ^ <nat:3> /\ <var:f0> = <nat:6> /\ <var:n> = <nat:7> * <var:e> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:f1> = <nat:4> * <var:e> /\ <var:f2> = <nat:2> * <var:e> ^ <nat:2> /\ <var:f0> = <nat:6> /\ <var:n> = <nat:7> * <var:e> ^ <nat:4> + <nat:9> * <var:e> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:f1> = <nat:4> * <var:e> /\ <var:f0> = <nat:6> /\ <var:n> = <nat:7> * <var:e> ^ <nat:4> + <nat:9> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:f0> = <nat:6> /\ <var:n> = <nat:7> * <var:e> ^ <nat:4> + <nat:9> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:e> /\ <var:n> = <nat:7> * <var:e> ^ <nat:4> + <nat:9> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 