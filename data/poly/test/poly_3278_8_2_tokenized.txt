\begin{document} \begin{theorem} Consider a code such that \begin{verbatim} <var:N> := <nat:2> ; <var:N> := <nat:1> + <var:N> * <var:V> ; <var:N> := <nat:3> + <var:N> * <var:V> ; <var:N> := <var:N> * <var:V> ; <var:N> := <var:N> * <var:V> ; <var:N> := <nat:1> + <var:N> * <var:V> ; <var:N> := <var:N> * <var:V> ; <var:N> := <nat:2> + <var:N> * <var:V> \end{verbatim} Allow it to hold that $ <var:V> = <var:D> $ , given whole numbers $ <var:D> $ , before running this set of commands , then we see $ <var:N> = <nat:2> \cdot <var:D> ^ <nat:7> + <nat:1> \cdot <var:D> ^ <nat:6> + <nat:3> \cdot <var:D> ^ <nat:5> + <nat:1> \cdot <var:D> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Let the following decorated set of instructions . \begin{eqnarray} \{ <var:V> = <var:D> \} \\ <var:N> := <nat:2> ; \\ \{ <var:V> = <var:D> \land <var:N> = <nat:2> \} \\ <var:N> := <nat:1> + <var:N> * <var:V> ; \\ \{ <var:V> = <var:D> \land <var:N> = <nat:2> \times <var:D> + <nat:1> \} \\ <var:N> := <nat:3> + <var:N> * <var:V> ; \\ \{ <var:V> = <var:D> \land <var:N> = <nat:2> \times <var:D> ^ <nat:2> + <nat:1> \times <var:D> + <nat:3> \} \\ <var:N> := <var:N> * <var:V> ; \\ \{ <var:V> = <var:D> \land <var:N> = <nat:2> \times <var:D> ^ <nat:3> + <nat:1> \times <var:D> ^ <nat:2> + <nat:3> \times <var:D> + \} \\ <var:N> := <var:N> * <var:V> ; \\ \{ <var:V> = <var:D> \land <var:N> = <nat:2> \times <var:D> ^ <nat:4> + <nat:1> \times <var:D> ^ <nat:3> + <nat:3> \times <var:D> ^ <nat:2> + \} \\ <var:N> := <nat:1> + <var:N> * <var:V> ; \\ \{ <var:V> = <var:D> \land <var:N> = <nat:2> \times <var:D> ^ <nat:5> + <nat:1> \times <var:D> ^ <nat:4> + <nat:3> \times <var:D> ^ <nat:3> + <nat:1> \} \\ <var:N> := <var:N> * <var:V> ; \\ \{ <var:V> = <var:D> \land <var:N> = <nat:2> \times <var:D> ^ <nat:6> + <nat:1> \times <var:D> ^ <nat:5> + <nat:3> \times <var:D> ^ <nat:4> + <nat:1> \times <var:D> + \} \\ <var:N> := <nat:2> + <var:N> * <var:V> \\ \{ <var:V> = <var:D> \land <var:N> = <nat:2> \times <var:D> ^ <nat:7> + <nat:1> \times <var:D> ^ <nat:6> + <nat:3> \times <var:D> ^ <nat:5> + <nat:1> \times <var:D> ^ <nat:2> + <nat:2> \} \end{eqnarray} Utilizing Hoare techniques resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:V> = <var:D> }} <var:N> := <nat:2> ; <var:N> := <nat:1> + <var:N> * <var:V> ; <var:N> := <nat:3> + <var:N> * <var:V> ; <var:N> := <var:N> * <var:V> ; <var:N> := <var:N> * <var:V> ; <var:N> := <nat:1> + <var:N> * <var:V> ; <var:N> := <var:N> * <var:V> ; <var:N> := <nat:2> + <var:N> * <var:V> {{ <var:N> = <nat:2> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:N> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:N> = <nat:2> * <var:D> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:N> = <nat:2> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:N> = <nat:2> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:N> = <nat:2> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:3> * <var:D> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:N> = <nat:2> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:4> + <nat:3> * <var:D> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:N> = <nat:2> * <var:D> ^ <nat:6> + <nat:1> * <var:D> ^ <nat:5> + <nat:3> * <var:D> ^ <nat:4> + <nat:1> * <var:D> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:D> /\ <var:N> = <nat:2> * <var:D> ^ <nat:7> + <nat:1> * <var:D> ^ <nat:6> + <nat:3> * <var:D> ^ <nat:5> + <nat:1> * <var:D> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 