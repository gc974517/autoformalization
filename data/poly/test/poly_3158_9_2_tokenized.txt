\begin{document} \begin{theorem} Define a program such that \begin{verbatim} <var:A> := <nat:1> ; <var:A> := <nat:4> + <var:A> * <var:m> ; <var:A> := <nat:4> + <var:A> * <var:m> ; <var:A> := <nat:3> + <var:A> * <var:m> ; <var:A> := <nat:4> + <var:A> * <var:m> ; <var:A> := <var:A> * <var:m> ; <var:A> := <nat:4> + <var:A> * <var:m> ; <var:A> := <nat:3> + <var:A> * <var:m> ; <var:A> := <nat:4> + <var:A> * <var:m> \end{verbatim} Assume , given all $ <var:P> \in \mathbb{Z}^+ $ , $ <var:m> = <var:P> $ before executing the list of commands it holds that we see $ <var:A> = <nat:1> \cdot <var:P> ^ <nat:8> + <nat:4> \cdot <var:P> ^ <nat:7> + <nat:4> \cdot <var:P> ^ <nat:6> + <nat:3> \cdot <var:P> ^ <nat:5> + <nat:4> \cdot <var:P> ^ <nat:4> + <nat:4> \cdot <var:P> ^ <nat:2> + <nat:3> \cdot <var:P> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions is accomplished by typical Hoare logic . Focusing on the next command seen in our code segment , we see the binding line letting $ <nat:1> $ into $ <var:A>$ . This advances the precondition $ \{ <var:m> = <var:P> \} $ as the postcondition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> \} $ . This is shown to be logically sound by the assignment law defined in usual Hoare logic . Moving forward to the following piece of code found in the code , we see the assignment statement \verb | <var:A> := <nat:4> + <var:A> * <var:m> ; | . This advances the condition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> \} $ toward the condition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> + <nat:4> \} $ . Jumping to the following bit of code seen in our code segment , we have the assignment command giving $ <nat:4> + <var:A> * <var:m> $ to $ <var:A>$ . This redefines the condition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> + <nat:4> \} $ into $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:4> \} $ . Advancing to the next step , we have the statement \verb | <var:A> := <nat:3> + <var:A> * <var:m> ; | . This moves the condition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:4> \} $ toward the postcondition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> \} $ . This is known to be sound through the assignment inference rule found in Hoare techniques . Focusing on the next command contained in our code , we see the variable binding line giving $ <nat:4> + <var:A> * <var:m> $ toward $ <var:A>$ . This line forwards $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> \} $ to the condition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:4> \} $ . This is ensured through the assignment scheme from typical Hoare logic . Advancing on , we see the variable update code \verb | <var:A> := <var:A> * <var:m> ; | . This takes the condition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:4> \} $ as the condition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + \} $ . This is shown to be logically sound using the assignment law from Hoare techniques . Moving on , we see the environment update statement defining $ <nat:4> + <var:A> * <var:m> $ as $ <var:A>$ . This forwards $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + \} $ toward the postcondition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> ^ <nat:6> + <nat:4> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:4> \} $ . Going forward , we have the assignment command \verb | <var:A> := <nat:3> + <var:A> * <var:m> ; | . This line advances the condition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> ^ <nat:6> + <nat:4> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:4> \} $ toward the postcondition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:4> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:4> * <var:P> + <nat:3> \} $ . This is sound using the assignment law from usual Hoare techniques . Paying attention to the upcoming command contained in our list of instructions , we have the assignment statement \verb | <var:A> := <nat:4> + <var:A> * <var:m> | . This forwards the precondition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:4> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:4> * <var:P> + <nat:3> \} $ into the condition $ \{ <var:m> = <var:P> \land <var:A> = <nat:1> * <var:P> ^ <nat:8> + <nat:4> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:m> = <var:P> }} <var:A> := <nat:1> ; <var:A> := <nat:4> + <var:A> * <var:m> ; <var:A> := <nat:4> + <var:A> * <var:m> ; <var:A> := <nat:3> + <var:A> * <var:m> ; <var:A> := <nat:4> + <var:A> * <var:m> ; <var:A> := <var:A> * <var:m> ; <var:A> := <nat:4> + <var:A> * <var:m> ; <var:A> := <nat:3> + <var:A> * <var:m> ; <var:A> := <nat:4> + <var:A> * <var:m> {{ <var:A> = <nat:1> * <var:P> ^ <nat:8> + <nat:4> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:A> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:A> = <nat:1> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:A> = <nat:1> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:A> = <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:A> = <nat:1> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:A> = <nat:1> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:A> = <nat:1> * <var:P> ^ <nat:6> + <nat:4> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:3> + <nat:4> * <var:P> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:A> = <nat:1> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:4> * <var:P> ^ <nat:5> + <nat:3> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:3> + <nat:4> * <var:P> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:P> /\ <var:A> = <nat:1> * <var:P> ^ <nat:8> + <nat:4> * <var:P> ^ <nat:7> + <nat:4> * <var:P> ^ <nat:6> + <nat:3> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 