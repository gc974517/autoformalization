\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c1> := <var:e> ; <var:c2> := <var:c1> * <var:e> ; <var:c3> := <var:c2> * <var:e> ; <var:c4> := <var:c3> * <var:e> ; <var:c0> := <nat:4> ; <var:c1> := <var:c1> * <nat:1> ; <var:c2> := <var:c2> * <nat:9> ; <var:c3> := <var:c3> * <nat:5> ; <var:c4> := <var:c4> * <nat:5> ; <var:M> := <var:c4> <var:M> := <var:M> + <var:c3> <var:M> := <var:M> + <var:c2> <var:M> := <var:M> + <var:c1> <var:M> := <var:M> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:e> = <var:H> $ prior to the evaluation of the series of commands , then $ <var:M> = <nat:5> \times <var:H> ^ <nat:4> + <nat:5> \times <var:H> ^ <nat:3> + <nat:9> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> + <nat:4> $ once series of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:e> = <var:H> \} \\ <var:c1> := <var:e> ; \\ \{ <var:e> = <var:H> \land <var:c1> = <var:H> \} \\ <var:c2> := <var:c1> * <var:e> ; \\ \{ <var:e> = <var:H> \land <var:c1> = <var:H> \land <var:c2> = <var:H> ^ <nat:2> \} \\ <var:c3> := <var:c2> * <var:e> ; \\ \{ <var:e> = <var:H> \land <var:c1> = <var:H> \land <var:c2> = <var:H> ^ <nat:2> \land <var:c3> = <var:H> ^ <nat:3> \} \\ <var:c4> := <var:c3> * <var:e> ; \\ \{ <var:e> = <var:H> \land <var:c1> = <var:H> \land <var:c2> = <var:H> ^ <nat:2> \land <var:c3> = <var:H> ^ <nat:3> \land <var:c4> = <var:H> ^ <nat:4> \} \\ <var:c0> := <nat:4> ; \\ \{ <var:e> = <var:H> \land <var:c1> = <var:H> \land <var:c2> = <var:H> ^ <nat:2> \land <var:c3> = <var:H> ^ <nat:3> \land <var:c4> = <var:H> ^ <nat:4> \land <var:c0> = <nat:4> \} \\ <var:c1> := <var:c1> * <nat:1> ; \\ \{ <var:e> = <var:H> \land <var:c1> = <nat:1> \times <var:H> \land <var:c2> = <var:H> ^ <nat:2> \land <var:c3> = <var:H> ^ <nat:3> \land <var:c4> = <var:H> ^ <nat:4> \land <var:c0> = <nat:4> \} \\ <var:c2> := <var:c2> * <nat:9> ; \\ \{ <var:e> = <var:H> \land <var:c1> = <nat:1> \times <var:H> \land <var:c2> = <nat:9> \times <var:H> ^ <nat:2> \land <var:c3> = <var:H> ^ <nat:3> \land <var:c4> = <var:H> ^ <nat:4> \land <var:c0> = <nat:4> \} \\ <var:c3> := <var:c3> * <nat:5> ; \\ \{ <var:e> = <var:H> \land <var:c1> = <nat:1> \times <var:H> \land <var:c2> = <nat:9> \times <var:H> ^ <nat:2> \land <var:c3> = <nat:5> \times <var:H> ^ <nat:3> \land <var:c4> = <var:H> ^ <nat:4> \land <var:c0> = <nat:4> \} \\ <var:c4> := <var:c4> * <nat:5> ; \\ \{ <var:e> = <var:H> \land <var:c1> = <nat:1> \times <var:H> \land <var:c2> = <nat:9> \times <var:H> ^ <nat:2> \land <var:c3> = <nat:5> \times <var:H> ^ <nat:3> \land <var:c4> = <nat:5> \times <var:H> ^ <nat:4> \land <var:c0> = <nat:4> \} \\ <var:M> := <var:c4> \\ \{ <var:e> = <var:H> \land <var:c1> = <nat:1> \times <var:H> \land <var:c2> = <nat:9> \times <var:H> ^ <nat:2> \land <var:c3> = <nat:5> \times <var:H> ^ <nat:3> \land <var:c0> = <nat:4> \land <var:M> = <nat:5> \times <var:H> ^ <nat:4> \} \\ <var:M> := <var:M> + <var:c3> \\ \{ <var:e> = <var:H> \land <var:c1> = <nat:1> \times <var:H> \land <var:c2> = <nat:9> \times <var:H> ^ <nat:2> \land <var:c0> = <nat:4> \land <var:M> = <nat:5> \times <var:H> ^ <nat:4> + <nat:5> \times <var:H> ^ <nat:3> \} \\ <var:M> := <var:M> + <var:c2> \\ \{ <var:e> = <var:H> \land <var:c1> = <nat:1> \times <var:H> \land <var:c0> = <nat:4> \land <var:M> = <nat:5> \times <var:H> ^ <nat:4> + <nat:5> \times <var:H> ^ <nat:3> + <nat:9> \times <var:H> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:c1> \\ \{ <var:e> = <var:H> \land <var:c0> = <nat:4> \land <var:M> = <nat:5> \times <var:H> ^ <nat:4> + <nat:5> \times <var:H> ^ <nat:3> + <nat:9> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> \} \\ <var:M> := <var:M> + <var:c0> \\ \{ <var:e> = <var:H> \land <var:M> = <nat:5> \times <var:H> ^ <nat:4> + <nat:5> \times <var:H> ^ <nat:3> + <nat:9> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> + <nat:4> \} \end{eqnarray} Using typical Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <var:c3> : string := " <var:c3> " . Definition <var:c4> : string := " <var:c4> " . Definition <def:poly> := <var:c1> := <var:e> ; <var:c2> := <var:c1> * <var:e> ; <var:c3> := <var:c2> * <var:e> ; <var:c4> := <var:c3> * <var:e> ; <var:c0> := <nat:4> ; <var:c1> := <var:c1> * <nat:1> ; <var:c2> := <var:c2> * <nat:9> ; <var:c3> := <var:c3> * <nat:5> ; <var:c4> := <var:c4> * <nat:5> ; <var:M> := <var:c4> <var:M> := <var:M> + <var:c3> <var:M> := <var:M> + <var:c2> <var:M> := <var:M> + <var:c1> <var:M> := <var:M> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:e> = <var:H> }} <def:poly> {{ <var:M> = <nat:5> * <var:H> ^ <nat:4> + <nat:5> * <var:H> ^ <nat:3> + <nat:9> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:c1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:c1> = <var:H> /\ <var:c2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:c1> = <var:H> /\ <var:c2> = <var:H> ^ <nat:2> /\ <var:c3> = <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:c1> = <var:H> /\ <var:c2> = <var:H> ^ <nat:2> /\ <var:c3> = <var:H> ^ <nat:3> /\ <var:c4> = <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:c1> = <var:H> /\ <var:c2> = <var:H> ^ <nat:2> /\ <var:c3> = <var:H> ^ <nat:3> /\ <var:c4> = <var:H> ^ <nat:4> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:c1> = <nat:1> * <var:H> /\ <var:c2> = <var:H> ^ <nat:2> /\ <var:c3> = <var:H> ^ <nat:3> /\ <var:c4> = <var:H> ^ <nat:4> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:c1> = <nat:1> * <var:H> /\ <var:c2> = <nat:9> * <var:H> ^ <nat:2> /\ <var:c3> = <var:H> ^ <nat:3> /\ <var:c4> = <var:H> ^ <nat:4> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:c1> = <nat:1> * <var:H> /\ <var:c2> = <nat:9> * <var:H> ^ <nat:2> /\ <var:c3> = <nat:5> * <var:H> ^ <nat:3> /\ <var:c4> = <var:H> ^ <nat:4> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:c1> = <nat:1> * <var:H> /\ <var:c2> = <nat:9> * <var:H> ^ <nat:2> /\ <var:c3> = <nat:5> * <var:H> ^ <nat:3> /\ <var:c4> = <nat:5> * <var:H> ^ <nat:4> /\ <var:c0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:c1> = <nat:1> * <var:H> /\ <var:c2> = <nat:9> * <var:H> ^ <nat:2> /\ <var:c3> = <nat:5> * <var:H> ^ <nat:3> /\ <var:c0> = <nat:4> /\ <var:M> = <nat:5> * <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:c1> = <nat:1> * <var:H> /\ <var:c2> = <nat:9> * <var:H> ^ <nat:2> /\ <var:c0> = <nat:4> /\ <var:M> = <nat:5> * <var:H> ^ <nat:4> + <nat:5> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:c1> = <nat:1> * <var:H> /\ <var:c0> = <nat:4> /\ <var:M> = <nat:5> * <var:H> ^ <nat:4> + <nat:5> * <var:H> ^ <nat:3> + <nat:9> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:c0> = <nat:4> /\ <var:M> = <nat:5> * <var:H> ^ <nat:4> + <nat:5> * <var:H> ^ <nat:3> + <nat:9> * <var:H> ^ <nat:2> + <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:M> = <nat:5> * <var:H> ^ <nat:4> + <nat:5> * <var:H> ^ <nat:3> + <nat:9> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 