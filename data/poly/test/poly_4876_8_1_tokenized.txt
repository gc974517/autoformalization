\begin{document} \begin{theorem} We define the following series of commands as follows \begin{verbatim} <var:t1> := <var:w> ; <var:t2> := <var:t1> * <var:w> ; <var:t0> := <nat:7> ; <var:t1> := <var:t1> * <nat:8> ; <var:t2> := <var:t2> * <nat:4> ; <var:d> := <var:t2> <var:d> := <var:d> + <var:t1> <var:d> := <var:d> + <var:t0> \end{verbatim} Assume ( given some positive integers $ <var:Z> $ ) it to be that $ <var:w> = <var:Z> $ ahead of the evaluation of this code segment , it must be that $ <var:d> = <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:8> \cdot <var:Z> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for the segment of code is done by Hoare logic . Immediately following , we see the environment update command assigning $ <var:w> $ as $ <var:t1>$ . This statement advances the precondition $ \{ <var:w> = <var:Z> \} $ to $ \{ <var:w> = <var:Z> \land <var:t1> = <var:Z> \} $ . Shifting focus toward the subsequent bit of code seen in our series of instructions , the environment update code \verb | <var:t2> := <var:t1> * <var:w> ; | . This statement moves the condition $ \{ <var:w> = <var:Z> \land <var:t1> = <var:Z> \} $ into the condition $ \{ <var:w> = <var:Z> \land <var:t1> = <var:Z> \land <var:t2> = <var:Z> ^ <nat:2> \} $ . Observing the upcoming line of code contained in the program , the binding line \verb | <var:t0> := <nat:7> ; | . This advances the condition $ \{ <var:w> = <var:Z> \land <var:t1> = <var:Z> \land <var:t2> = <var:Z> ^ <nat:2> \} $ toward $ \{ <var:w> = <var:Z> \land <var:t1> = <var:Z> \land <var:t2> = <var:Z> ^ <nat:2> \land <var:t0> = <nat:7> \} $ . This is known to be sound through the assignment rule defined by Hoare techniques . Shifting focus toward the next line of code found in our series of commands , the environment update code \verb | <var:t1> := <var:t1> * <nat:8> ; | . This advances the precondition $ \{ <var:w> = <var:Z> \land <var:t1> = <var:Z> \land <var:t2> = <var:Z> ^ <nat:2> \land <var:t0> = <nat:7> \} $ toward the postcondition $ \{ <var:w> = <var:Z> \land <var:t1> = <nat:8> \cdot <var:Z> \land <var:t2> = <var:Z> ^ <nat:2> \land <var:t0> = <nat:7> \} $ . Paying attention to the subsequent bit of code contained in our segment of code , the variable binding statement \verb | <var:t2> := <var:t2> * <nat:4> ; | . This line forwards the precondition $ \{ <var:w> = <var:Z> \land <var:t1> = <nat:8> \cdot <var:Z> \land <var:t2> = <var:Z> ^ <nat:2> \land <var:t0> = <nat:7> \} $ into the condition $ \{ <var:w> = <var:Z> \land <var:t1> = <nat:8> \cdot <var:Z> \land <var:t2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:t0> = <nat:7> \} $ . Advancing to the subsequent bit of code seen in our list of instructions , we have the variable assignmet code defining $ <var:t2$ toward $ <var:d>$ . This code takes $ \{ <var:w> = <var:Z> \land <var:t1> = <nat:8> \cdot <var:Z> \land <var:t2> = <nat:4> \cdot <var:Z> ^ <nat:2> \land <var:t0> = <nat:7> \} $ to $ \{ <var:w> = <var:Z> \land <var:t1> = <nat:8> \cdot <var:Z> \land <var:t0> = <nat:7> \land <var:d> = <nat:4> \cdot <var:Z> ^ <nat:2> \} $ . Shifting focus toward the subsequent line of code seen in the program , the code giving $ <var:d> + <var:t1$ into $ <var:d>$ . This line forwards the condition $ \{ <var:w> = <var:Z> \land <var:t1> = <nat:8> \cdot <var:Z> \land <var:t0> = <nat:7> \land <var:d> = <nat:4> \cdot <var:Z> ^ <nat:2> \} $ as the condition $ \{ <var:w> = <var:Z> \land <var:t0> = <nat:7> \land <var:d> = <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:8> \cdot <var:Z> \} $ . Considering the following line found in the series of instructions , the assignment statement yielding $ <var:d> + <var:t0$ toward $ <var:d>$ . This moves $ \{ <var:w> = <var:Z> \land <var:t0> = <nat:7> \land <var:d> = <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:8> \cdot <var:Z> \} $ into the condition $ \{ <var:w> = <var:Z> \land <var:d> = <nat:4> \cdot <var:Z> ^ <nat:2> + <nat:8> \cdot <var:Z> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:w> = <var:Z> }} <var:t1> := <var:w> ; <var:t2> := <var:t1> * <var:w> ; <var:t0> := <nat:7> ; <var:t1> := <var:t1> * <nat:8> ; <var:t2> := <var:t2> * <nat:4> ; <var:d> := <var:t2> <var:d> := <var:d> + <var:t1> <var:d> := <var:d> + <var:t0> {{ <var:d> = <nat:4> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:t1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:t1> = <var:Z> /\ <var:t2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:t1> = <var:Z> /\ <var:t2> = <var:Z> ^ <nat:2> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:t1> = <nat:8> * <var:Z> /\ <var:t2> = <var:Z> ^ <nat:2> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:t1> = <nat:8> * <var:Z> /\ <var:t2> = <nat:4> * <var:Z> ^ <nat:2> /\ <var:t0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:t1> = <nat:8> * <var:Z> /\ <var:t0> = <nat:7> /\ <var:d> = <nat:4> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:t0> = <nat:7> /\ <var:d> = <nat:4> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:Z> /\ <var:d> = <nat:4> * <var:Z> ^ <nat:2> + <nat:8> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 