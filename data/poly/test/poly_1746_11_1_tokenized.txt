\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h1> := <var:j> ; <var:h2> := <var:h1> * <var:j> ; <var:h3> := <var:h2> * <var:j> ; <var:h0> := <nat:4> ; <var:h1> := <var:h1> * <nat:1> ; <var:h2> := <var:h2> * <nat:6> ; <var:h3> := <var:h3> * <nat:2> ; <var:A> := <var:h3> <var:A> := <var:A> + <var:h2> <var:A> := <var:A> + <var:h1> <var:A> := <var:A> + <var:h0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> . Assume that $ <var:j> = <var:u> $ prior to executing the list of commands then we see $ <var:A> = <nat:2> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for the list of instructions is clear using usual Hoare reasoning . Taking another step toward the next steps contained in our series of instructions , we see \begin{verbatim} { <var:j> = <var:u> } <var:h1> := <var:j> { <var:j> = <var:u> \land <var:h1> = <var:u> } { <var:j> = <var:u> \land <var:h1> = <var:u> } <var:h2> := <var:h1> * <var:j> { <var:j> = <var:u> \land <var:h1> = <var:u> \land <var:h2> = <var:u> ^ <nat:2> } { <var:j> = <var:u> \land <var:h1> = <var:u> \land <var:h2> = <var:u> ^ <nat:2> } <var:h3> := <var:h2> * <var:j> { <var:j> = <var:u> \land <var:h1> = <var:u> \land <var:h2> = <var:u> ^ <nat:2> \land <var:h3> = <var:u> ^ <nat:3> } { <var:j> = <var:u> \land <var:h1> = <var:u> \land <var:h2> = <var:u> ^ <nat:2> \land <var:h3> = <var:u> ^ <nat:3> } <var:h0> := <nat:4> { <var:j> = <var:u> \land <var:h1> = <var:u> \land <var:h2> = <var:u> ^ <nat:2> \land <var:h3> = <var:u> ^ <nat:3> \land <var:h0> = <nat:4> } { <var:j> = <var:u> \land <var:h1> = <var:u> \land <var:h2> = <var:u> ^ <nat:2> \land <var:h3> = <var:u> ^ <nat:3> \land <var:h0> = <nat:4> } <var:h1> := <var:h1> * <nat:1> { <var:j> = <var:u> \land <var:h1> = <nat:1> * <var:u> \land <var:h2> = <var:u> ^ <nat:2> \land <var:h3> = <var:u> ^ <nat:3> \land <var:h0> = <nat:4> } { <var:j> = <var:u> \land <var:h1> = <nat:1> * <var:u> \land <var:h2> = <var:u> ^ <nat:2> \land <var:h3> = <var:u> ^ <nat:3> \land <var:h0> = <nat:4> } <var:h2> := <var:h2> * <nat:6> { <var:j> = <var:u> \land <var:h1> = <nat:1> * <var:u> \land <var:h2> = <nat:6> * <var:u> ^ <nat:2> \land <var:h3> = <var:u> ^ <nat:3> \land <var:h0> = <nat:4> } { <var:j> = <var:u> \land <var:h1> = <nat:1> * <var:u> \land <var:h2> = <nat:6> * <var:u> ^ <nat:2> \land <var:h3> = <var:u> ^ <nat:3> \land <var:h0> = <nat:4> } <var:h3> := <var:h3> * <nat:2> { <var:j> = <var:u> \land <var:h1> = <nat:1> * <var:u> \land <var:h2> = <nat:6> * <var:u> ^ <nat:2> \land <var:h3> = <nat:2> * <var:u> ^ <nat:3> \land <var:h0> = <nat:4> } { <var:j> = <var:u> \land <var:h1> = <nat:1> * <var:u> \land <var:h2> = <nat:6> * <var:u> ^ <nat:2> \land <var:h3> = <nat:2> * <var:u> ^ <nat:3> \land <var:h0> = <nat:4> } <var:A> := <var:h3{ <var:j> = <var:u> \land <var:h1> = <nat:1> * <var:u> \land <var:h2> = <nat:6> * <var:u> ^ <nat:2> \land <var:h0> = <nat:4> \land <var:A> = <nat:2> * <var:u> ^ <nat:3> } { <var:j> = <var:u> \land <var:h1> = <nat:1> * <var:u> \land <var:h2> = <nat:6> * <var:u> ^ <nat:2> \land <var:h0> = <nat:4> \land <var:A> = <nat:2> * <var:u> ^ <nat:3> } <var:A> := <var:A> + <var:h2{ <var:j> = <var:u> \land <var:h1> = <nat:1> * <var:u> \land <var:h0> = <nat:4> \land <var:A> = <nat:2> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> } \end{verbatim} Immediately after , we see \begin{verbatim} { <var:j> = <var:u> } <var:h1> := <var:j> { <var:j> = <var:u> \land <var:h1> = <var:u> } { <var:j> = <var:u> \land <var:h1> = <var:u> } <var:h2> := <var:h1> * <var:j> { <var:j> = <var:u> \land <var:h1> = <var:u> \land <var:h2> = <var:u> ^ <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <def:poly> := <var:h1> := <var:j> ; <var:h2> := <var:h1> * <var:j> ; <var:h3> := <var:h2> * <var:j> ; <var:h0> := <nat:4> ; <var:h1> := <var:h1> * <nat:1> ; <var:h2> := <var:h2> * <nat:6> ; <var:h3> := <var:h3> * <nat:2> ; <var:A> := <var:h3> <var:A> := <var:A> + <var:h2> <var:A> := <var:A> + <var:h1> <var:A> := <var:A> + <var:h0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:j> = <var:u> }} <def:poly> {{ <var:A> = <nat:2> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:h1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:h1> = <var:u> /\ <var:h2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:h1> = <var:u> /\ <var:h2> = <var:u> ^ <nat:2> /\ <var:h3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:h1> = <var:u> /\ <var:h2> = <var:u> ^ <nat:2> /\ <var:h3> = <var:u> ^ <nat:3> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:h1> = <nat:1> * <var:u> /\ <var:h2> = <var:u> ^ <nat:2> /\ <var:h3> = <var:u> ^ <nat:3> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:h1> = <nat:1> * <var:u> /\ <var:h2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:h3> = <var:u> ^ <nat:3> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:h1> = <nat:1> * <var:u> /\ <var:h2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:h3> = <nat:2> * <var:u> ^ <nat:3> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:h1> = <nat:1> * <var:u> /\ <var:h2> = <nat:6> * <var:u> ^ <nat:2> /\ <var:h0> = <nat:4> /\ <var:A> = <nat:2> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:h1> = <nat:1> * <var:u> /\ <var:h0> = <nat:4> /\ <var:A> = <nat:2> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:h0> = <nat:4> /\ <var:A> = <nat:2> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:1> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:u> /\ <var:A> = <nat:2> * <var:u> ^ <nat:3> + <nat:6> * <var:u> ^ <nat:2> + <nat:1> * <var:u> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 