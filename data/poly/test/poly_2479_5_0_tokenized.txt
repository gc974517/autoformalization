\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:8> ; <var:m1> := <nat:4> ; <var:m1> := <var:m1> * <var:j> ; <var:h> := <var:m1> ; <var:h> := <var:h> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Assuming it to be that $ <var:j> = <var:b> $ before executing the code , then we have $ <var:h> = <nat:4> * <var:b> + <nat:8> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands can be shown by usual Hoare logic . Taking another step toward the next bits of codefound in the series of instructions , we see \begin{verbatim} { <var:j> = <var:b> } <var:m0> := <nat:8> { <var:j> = <var:b> \land <var:m0> = <nat:8> } { <var:j> = <var:b> \land <var:m0> = <nat:8> } <var:m1> := <nat:4> { <var:j> = <var:b> \land <var:m0> = <nat:8> \land <var:m1> = <nat:4> } { <var:j> = <var:b> \land <var:m0> = <nat:8> \land <var:m1> = <nat:4> } <var:m1> := <var:m1> * <var:j> { <var:j> = <var:b> \land <var:m0> = <nat:8> \land <var:m1> = <nat:4> \times <var:b> } { <var:j> = <var:b> \land <var:m0> = <nat:8> \land <var:m1> = <nat:4> \times <var:b> } <var:h> := <var:m1> { <var:j> = <var:b> \land <var:m0> = <nat:8> \land <var:h> = <nat:4> \times <var:b> } \end{verbatim} Moving onward , \begin{verbatim} { <var:j> = <var:b> } <var:m0> := <nat:8> { <var:j> = <var:b> \land <var:m0> = <nat:8> } \end{verbatim} This is shown using the variable assignmet scheme defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <def:poly> := <var:m0> := <nat:8> ; <var:m1> := <nat:4> ; <var:m1> := <var:m1> * <var:j> ; <var:h> := <var:m1> ; <var:h> := <var:h> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:j> = <var:b> }} <def:poly> {{ <var:h> = <nat:4> * <var:b> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:m0> = <nat:8> /\ <var:m1> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:m0> = <nat:8> /\ <var:h> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:b> /\ <var:h> = <nat:4> * <var:b> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 