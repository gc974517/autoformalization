\begin{document} \begin{theorem} We define the following code segment : \begin{verbatim} <var:W1> := <var:y> ; <var:W2> := <var:W1> * <var:y> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:2> ; <var:W2> := <var:W2> * <nat:3> ; <var:D> := <var:W2> <var:D> := <var:D> + <var:W1> <var:D> := <var:D> + <var:W0> \end{verbatim} Given that we have $ <var:y> = <var:B> $ prior to the evaluation of this list of commands , it must be that we have $ <var:D> = <nat:3> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:B> \} \\ <var:W1> := <var:y> ; \\ \{ <var:y> = <var:B> \land <var:W1> = <var:B> \} \\ <var:W2> := <var:W1> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:W1> = <var:B> \land <var:W2> = <var:B> ^ <nat:2> \} \\ <var:W0> := <nat:1> ; \\ \{ <var:y> = <var:B> \land <var:W1> = <var:B> \land <var:W2> = <var:B> ^ <nat:2> \land <var:W0> = <nat:1> \} \\ <var:W1> := <var:W1> * <nat:2> ; \\ \{ <var:y> = <var:B> \land <var:W1> = <nat:2> * <var:B> \land <var:W2> = <var:B> ^ <nat:2> \land <var:W0> = <nat:1> \} \\ <var:W2> := <var:W2> * <nat:3> ; \\ \{ <var:y> = <var:B> \land <var:W1> = <nat:2> * <var:B> \land <var:W2> = <nat:3> * <var:B> ^ <nat:2> \land <var:W0> = <nat:1> \} \\ <var:D> := <var:W2> \\ \{ <var:y> = <var:B> \land <var:W1> = <nat:2> * <var:B> \land <var:W0> = <nat:1> \land <var:D> = <nat:3> * <var:B> ^ <nat:2> \} \end{eqnarray} Furthering executing our series of instructions results in : \begin{eqnarray} <var:D> := <var:D> + <var:W1> \\ \{ <var:y> = <var:B> \land <var:W0> = <nat:1> \land <var:D> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> \} \\ <var:D> := <var:D> + <var:W0> \\ \{ <var:y> = <var:B> \land <var:D> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:1> \} \end{eqnarray} Utilizing typical Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:y> = <var:B> }} <var:W1> := <var:y> ; <var:W2> := <var:W1> * <var:y> ; <var:W0> := <nat:1> ; <var:W1> := <var:W1> * <nat:2> ; <var:W2> := <var:W2> * <nat:3> ; <var:D> := <var:W2> <var:D> := <var:D> + <var:W1> <var:D> := <var:D> + <var:W0> {{ <var:D> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:W1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:W1> = <var:B> /\ <var:W2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:W1> = <var:B> /\ <var:W2> = <var:B> ^ <nat:2> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:W1> = <nat:2> * <var:B> /\ <var:W2> = <var:B> ^ <nat:2> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:W1> = <nat:2> * <var:B> /\ <var:W2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:W1> = <nat:2> * <var:B> /\ <var:W0> = <nat:1> /\ <var:D> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:W0> = <nat:1> /\ <var:D> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:D> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 