\begin{document} \begin{theorem} Let the following set of commands such that \begin{verbatim} <var:c> := <nat:1> ; <var:c> := <nat:1> + <var:c> * <var:J> ; <var:c> := <nat:4> + <var:c> * <var:J> ; <var:c> := <var:c> * <var:J> ; <var:c> := <var:c> * <var:J> ; <var:c> := <nat:2> + <var:c> * <var:J> ; <var:c> := <nat:2> + <var:c> * <var:J> ; <var:c> := <nat:2> + <var:c> * <var:J> ; <var:c> := <nat:3> + <var:c> * <var:J> ; <var:c> := <nat:4> + <var:c> * <var:J> ; <var:c> := <nat:2> + <var:c> * <var:J> ; <var:c> := <var:c> * <var:J> ; <var:c> := <nat:1> + <var:c> * <var:J> \end{verbatim} Given that $ <var:J> = <var:L> $ given every $ <var:L> \in \mathbb{Z}^+ $ before interpreting the set of instructions , it holds that we have $ <var:c> = <nat:1> \times <var:L> ^ <nat:12> + <nat:1> \times <var:L> ^ <nat:11> + <nat:4> \times <var:L> ^ <nat:10> + <nat:2> \times <var:L> ^ <nat:7> + <nat:2> \times <var:L> ^ <nat:6> + <nat:2> \times <var:L> ^ <nat:5> + <nat:3> \times <var:L> ^ <nat:4> + <nat:4> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:1> $ once code has terminated . \end{theorem} \begin{proof} The flow of logic for our set of instructions is given by standard Hoare reasoning . Moving on to the next step , we have the variable update code \verb | <var:c> := <nat:1> ; | . This line takes the condition $ \{ <var:J> = <var:L> \} $ toward $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \} $ . Following , we see the code yielding $ <nat:1> + <var:c> * <var:J> $ into $ <var:c>$ . This advances $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \} $ to the condition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> + <nat:1> \} $ . This is guaranteed through the assignment inference rule defined by usual Hoare logic . Next , we see the assignment line \verb | <var:c> := <nat:4> + <var:c> * <var:J> ; | . This forwards the precondition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> + <nat:1> \} $ toward the postcondition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:4> \} $ . This is shown using the assignment scheme defined in standard Hoare techniques . Honing in on the proceeding bit of code contained in the code , the environment update statement \verb | <var:c> := <var:c> * <var:J> ; | . This code transfers the condition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:2> + <nat:1> \times <var:L> + <nat:4> \} $ toward the postcondition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + \} $ . Moving forward to the next step , the assignment statement binding $ <var:c> * <var:J> $ as $ <var:c>$ . This command transfers the condition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:3> + <nat:1> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + \} $ to the condition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + \} $ . Advancing to the subsequent piece of code found in our segment of code , the environment update statement letting $ <nat:2> + <var:c> * <var:J> $ as $ <var:c>$ . This line moves $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + \} $ into the condition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:5> + <nat:1> \times <var:L> ^ <nat:4> + <nat:4> \times <var:L> ^ <nat:3> + <nat:2> \} $ . Jumping to the upcoming bit of code found in the code segment , we have the binding line assigning $ <nat:2> + <var:c> * <var:J> $ as $ <var:c>$ . This transfers the precondition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:5> + <nat:1> \times <var:L> ^ <nat:4> + <nat:4> \times <var:L> ^ <nat:3> + <nat:2> \} $ into the condition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:6> + <nat:1> \times <var:L> ^ <nat:5> + <nat:4> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> + <nat:2> \} $ . Taking another step toward the upcoming line of code found in our series of instructions , the binding code \verb | <var:c> := <nat:2> + <var:c> * <var:J> ; | . This command transfers the precondition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:6> + <nat:1> \times <var:L> ^ <nat:5> + <nat:4> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> + <nat:2> \} $ into the postcondition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:7> + <nat:1> \times <var:L> ^ <nat:6> + <nat:4> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:2> \} $ . This is given through the assignment scheme defined by Hoare logic . Observing the upcoming line in our list of instructions , the variable update statement \verb | <var:c> := <nat:3> + <var:c> * <var:J> ; | . This code transfers the precondition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:7> + <nat:1> \times <var:L> ^ <nat:6> + <nat:4> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:2> \} $ into the postcondition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:8> + <nat:1> \times <var:L> ^ <nat:7> + <nat:4> \times <var:L> ^ <nat:6> + <nat:2> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:3> \} $ . This is rigorously given through the assignment scheme found in Hoare techniques . Honing in on the subsequent statement in the program , the command yielding $ <nat:4> + <var:c> * <var:J> $ as $ <var:c>$ . This command takes $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:8> + <nat:1> \times <var:L> ^ <nat:7> + <nat:4> \times <var:L> ^ <nat:6> + <nat:2> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + <nat:3> \} $ as the postcondition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:9> + <nat:1> \times <var:L> ^ <nat:8> + <nat:4> \times <var:L> ^ <nat:7> + <nat:2> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:4> \} $ . This is shown to be logically sound using the assignment scheme defined by standard Hoare techniques . Shifting focus toward the next piece of code seen in our list of commands , we see the variable assignmet command \verb | <var:c> := <nat:2> + <var:c> * <var:J> ; | . This command moves the condition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:9> + <nat:1> \times <var:L> ^ <nat:8> + <nat:4> \times <var:L> ^ <nat:7> + <nat:2> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:3> \times <var:L> + <nat:4> \} $ into the postcondition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:10> + <nat:1> \times <var:L> ^ <nat:9> + <nat:4> \times <var:L> ^ <nat:8> + <nat:2> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:2> \} $ . Shifting focus toward the following step in our program , we have the command letting $ <var:c> * <var:J> $ into $ <var:c>$ . This moves the precondition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:10> + <nat:1> \times <var:L> ^ <nat:9> + <nat:4> \times <var:L> ^ <nat:8> + <nat:2> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:4> + <nat:2> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:4> \times <var:L> + <nat:2> \} $ toward the condition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:11> + <nat:1> \times <var:L> ^ <nat:10> + <nat:4> \times <var:L> ^ <nat:9> + <nat:2> \times <var:L> ^ <nat:6> + <nat:2> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:4> + <nat:3> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + \} $ . Observing the upcoming bit of code contained in our segment of code , the variable update statement letting $ <nat:1> + <var:c> * <var:J$ toward $ <var:c>$ . This code transfers the precondition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:11> + <nat:1> \times <var:L> ^ <nat:10> + <nat:4> \times <var:L> ^ <nat:9> + <nat:2> \times <var:L> ^ <nat:6> + <nat:2> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:4> + <nat:3> \times <var:L> ^ <nat:3> + <nat:4> \times <var:L> ^ <nat:2> + <nat:2> \times <var:L> + \} $ into the postcondition $ \{ <var:J> = <var:L> \land <var:c> = <nat:1> \times <var:L> ^ <nat:12> + <nat:1> \times <var:L> ^ <nat:11> + <nat:4> \times <var:L> ^ <nat:10> + <nat:2> \times <var:L> ^ <nat:7> + <nat:2> \times <var:L> ^ <nat:6> + <nat:2> \times <var:L> ^ <nat:5> + <nat:3> \times <var:L> ^ <nat:4> + <nat:4> \times <var:L> ^ <nat:3> + <nat:2> \times <var:L> ^ <nat:2> + <nat:1> \} $ . This is rigorously given by the assignment law in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:J> = <var:L> }} <var:c> := <nat:1> ; <var:c> := <nat:1> + <var:c> * <var:J> ; <var:c> := <nat:4> + <var:c> * <var:J> ; <var:c> := <var:c> * <var:J> ; <var:c> := <var:c> * <var:J> ; <var:c> := <nat:2> + <var:c> * <var:J> ; <var:c> := <nat:2> + <var:c> * <var:J> ; <var:c> := <nat:2> + <var:c> * <var:J> ; <var:c> := <nat:3> + <var:c> * <var:J> ; <var:c> := <nat:4> + <var:c> * <var:J> ; <var:c> := <nat:2> + <var:c> * <var:J> ; <var:c> := <var:c> * <var:J> ; <var:c> := <nat:1> + <var:c> * <var:J> {{ <var:c> = <nat:1> * <var:L> ^ <nat:12> + <nat:1> * <var:L> ^ <nat:11> + <nat:4> * <var:L> ^ <nat:10> + <nat:2> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:c> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:c> = <nat:1> * <var:L> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:c> = <nat:1> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:c> = <nat:1> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:c> = <nat:1> * <var:L> ^ <nat:4> + <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:c> = <nat:1> * <var:L> ^ <nat:5> + <nat:1> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:c> = <nat:1> * <var:L> ^ <nat:6> + <nat:1> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:c> = <nat:1> * <var:L> ^ <nat:7> + <nat:1> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:c> = <nat:1> * <var:L> ^ <nat:8> + <nat:1> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:c> = <nat:1> * <var:L> ^ <nat:9> + <nat:1> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:c> = <nat:1> * <var:L> ^ <nat:10> + <nat:1> * <var:L> ^ <nat:9> + <nat:4> * <var:L> ^ <nat:8> + <nat:2> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:c> = <nat:1> * <var:L> ^ <nat:11> + <nat:1> * <var:L> ^ <nat:10> + <nat:4> * <var:L> ^ <nat:9> + <nat:2> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:c> = <nat:1> * <var:L> ^ <nat:12> + <nat:1> * <var:L> ^ <nat:11> + <nat:4> * <var:L> ^ <nat:10> + <nat:2> * <var:L> ^ <nat:7> + <nat:2> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 