\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:U> ; <var:e2> := <var:e1> * <var:U> ; <var:e3> := <var:e2> * <var:U> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:3> ; <var:e2> := <var:e2> * <nat:1> ; <var:e3> := <var:e3> * <nat:8> ; <var:N> := <var:e3> <var:N> := <var:N> + <var:e2> <var:N> := <var:N> + <var:e1> <var:N> := <var:N> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> . Allowing that $ <var:U> = <var:D> $ --- for all whole numbers $ <var:D> $ --- prior to executing the list of commands , it holds that we have $ <var:N> = <nat:8> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:5> $ after series of instructions is done . \end{theorem} \begin{proof} The course of logic for the set of commands is evident using usual Hoare reasoning . Advancing to the next bit of code contained in the set of instructions , \verb | { <var:U> = <var:D> } <var:e1> := <var:U> { <var:U> = <var:D> \land <var:e1> = <var:D> } | . Observing the next lines found in the list of commands , we have \verb | { <var:U> = <var:D> } <var:e1> := <var:U> { <var:U> = <var:D> \land <var:e1> = <var:D> } | , \verb | { <var:U> = <var:D> \land <var:e1> = <var:D> } <var:e2> := <var:e1> * <var:U> { <var:U> = <var:D> \land <var:e1> = <var:D> \land <var:e2> = <var:D> ^ <nat:2> } | , \verb | { <var:U> = <var:D> \land <var:e1> = <var:D> \land <var:e2> = <var:D> ^ <nat:2> } <var:e3> := <var:e2> * <var:U> { <var:U> = <var:D> \land <var:e1> = <var:D> \land <var:e2> = <var:D> ^ <nat:2> \land <var:e3> = <var:D> ^ <nat:3> } | , \verb | { <var:U> = <var:D> \land <var:e1> = <var:D> \land <var:e2> = <var:D> ^ <nat:2> \land <var:e3> = <var:D> ^ <nat:3> } <var:e0> := <nat:5> { <var:U> = <var:D> \land <var:e1> = <var:D> \land <var:e2> = <var:D> ^ <nat:2> \land <var:e3> = <var:D> ^ <nat:3> \land <var:e0> = <nat:5> } | and \verb | { <var:U> = <var:D> \land <var:e1> = <var:D> \land <var:e2> = <var:D> ^ <nat:2> \land <var:e3> = <var:D> ^ <nat:3> \land <var:e0> = <nat:5> } <var:e1> := <var:e1> * <nat:3> { <var:U> = <var:D> \land <var:e1> = <nat:3> \cdot <var:D> \land <var:e2> = <var:D> ^ <nat:2> \land <var:e3> = <var:D> ^ <nat:3> \land <var:e0> = <nat:5> } | . Moving on to the upcoming statement found in the program , we have \verb | { <var:U> = <var:D> } <var:e1> := <var:U> { <var:U> = <var:D> \land <var:e1> = <var:D> } | . This is sound with the variable update scheme in typical Hoare reasoning . Advancing , we have \verb | { <var:U> = <var:D> } <var:e1> := <var:U> { <var:U> = <var:D> \land <var:e1> = <var:D> } | and \verb | { <var:U> = <var:D> \land <var:e1> = <var:D> } <var:e2> := <var:e1> * <var:U> { <var:U> = <var:D> \land <var:e1> = <var:D> \land <var:e2> = <var:D> ^ <nat:2> } | . Advancing , \verb | { <var:U> = <var:D> } <var:e1> := <var:U> { <var:U> = <var:D> \land <var:e1> = <var:D> } | and \verb | { <var:U> = <var:D> \land <var:e1> = <var:D> } <var:e2> := <var:e1> * <var:U> { <var:U> = <var:D> \land <var:e1> = <var:D> \land <var:e2> = <var:D> ^ <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:U> ; <var:e2> := <var:e1> * <var:U> ; <var:e3> := <var:e2> * <var:U> ; <var:e0> := <nat:5> ; <var:e1> := <var:e1> * <nat:3> ; <var:e2> := <var:e2> * <nat:1> ; <var:e3> := <var:e3> * <nat:8> ; <var:N> := <var:e3> <var:N> := <var:N> + <var:e2> <var:N> := <var:N> + <var:e1> <var:N> := <var:N> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:U> = <var:D> }} <def:poly> {{ <var:N> = <nat:8> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:e1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:e1> = <var:D> /\ <var:e2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:e1> = <var:D> /\ <var:e2> = <var:D> ^ <nat:2> /\ <var:e3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:e1> = <var:D> /\ <var:e2> = <var:D> ^ <nat:2> /\ <var:e3> = <var:D> ^ <nat:3> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:e1> = <nat:3> * <var:D> /\ <var:e2> = <var:D> ^ <nat:2> /\ <var:e3> = <var:D> ^ <nat:3> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:e1> = <nat:3> * <var:D> /\ <var:e2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:e3> = <var:D> ^ <nat:3> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:e1> = <nat:3> * <var:D> /\ <var:e2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:e3> = <nat:8> * <var:D> ^ <nat:3> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:e1> = <nat:3> * <var:D> /\ <var:e2> = <nat:1> * <var:D> ^ <nat:2> /\ <var:e0> = <nat:5> /\ <var:N> = <nat:8> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:e1> = <nat:3> * <var:D> /\ <var:e0> = <nat:5> /\ <var:N> = <nat:8> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:e0> = <nat:5> /\ <var:N> = <nat:8> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:D> /\ <var:N> = <nat:8> * <var:D> ^ <nat:3> + <nat:1> * <var:D> ^ <nat:2> + <nat:3> * <var:D> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 