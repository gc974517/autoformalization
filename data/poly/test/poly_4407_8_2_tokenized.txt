\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:i> := <nat:3> ; <var:i> := <nat:2> + <var:i> * <var:R> ; <var:i> := <var:i> * <var:R> ; <var:i> := <nat:3> + <var:i> * <var:R> ; <var:i> := <nat:1> + <var:i> * <var:R> ; <var:i> := <nat:4> + <var:i> * <var:R> ; <var:i> := <nat:2> + <var:i> * <var:R> ; <var:i> := <nat:2> + <var:i> * <var:R> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> in \emph{Imp} . Allow it to hold that $ <var:R> = <var:B> $ before executing our code , it follows that we have $ <var:i> = <nat:3> \cdot <var:B> ^ <nat:7> + <nat:2> \cdot <var:B> ^ <nat:6> + <nat:3> \cdot <var:B> ^ <nat:4> + <nat:1> \cdot <var:B> ^ <nat:3> + <nat:4> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:2> $ once segment of code is done executing . \end{theorem} \begin{proof} The method of proof for the series of commands is shown by usual Hoare reasoning . Going forward , we have the variable binding code defining $ <nat:3> $ to $ <var:i>$ . This redefines the precondition $ \{ <var:R> = <var:B> \} $ into the condition $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \} $ . Looking at the next command seen in our list of instructions , the environment update statement \verb | <var:i> := <nat:2> + <var:i> * <var:R> ; | . This code forwards the condition $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \} $ as $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \times <var:B> + <nat:2> \} $ . Considering the upcoming piece of code contained in the code segment , we see the statement \verb | <var:i> := <var:i> * <var:R> ; | . This advances the condition $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \times <var:B> + <nat:2> \} $ toward the postcondition $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + \} $ . Going forward , the environment update line defining $ <nat:3> + <var:i> * <var:R> $ to $ <var:i>$ . This moves the condition $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + \} $ toward the postcondition $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \times <var:B> ^ <nat:3> + <nat:2> \times <var:B> ^ <nat:2> + <nat:3> \} $ . Next , the variable assignmet line giving $ <nat:1> + <var:i> * <var:R> $ toward $ <var:i>$ . This command forwards the condition $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \times <var:B> ^ <nat:3> + <nat:2> \times <var:B> ^ <nat:2> + <nat:3> \} $ toward the condition $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \times <var:B> ^ <nat:4> + <nat:2> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> + <nat:1> \} $ . This is known to be sound by the assignment rule defined by usual Hoare logic . After , we see the variable assignmet code yielding $ <nat:4> + <var:i> * <var:R> $ into $ <var:i>$ . This moves the precondition $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \times <var:B> ^ <nat:4> + <nat:2> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> + <nat:1> \} $ into $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \times <var:B> ^ <nat:5> + <nat:2> \times <var:B> ^ <nat:4> + <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:4> \} $ . This is guaranteed with the assignment scheme found in usual Hoare logic . Advancing on , we have the statement \verb | <var:i> := <nat:2> + <var:i> * <var:R> ; | . This code transfers the condition $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \times <var:B> ^ <nat:5> + <nat:2> \times <var:B> ^ <nat:4> + <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:4> \} $ to the condition $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \times <var:B> ^ <nat:6> + <nat:2> \times <var:B> ^ <nat:5> + <nat:3> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:4> \times <var:B> + <nat:2> \} $ . This is shown through the assignment inference rule in typical Hoare reasoning . Jumping to the next piece of code found in the list of commands , we see the variable binding command defining $ <nat:2> + <var:i> * <var:R$ to $ <var:i>$ . This statement forwards the condition $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \times <var:B> ^ <nat:6> + <nat:2> \times <var:B> ^ <nat:5> + <nat:3> \times <var:B> ^ <nat:3> + <nat:1> \times <var:B> ^ <nat:2> + <nat:4> \times <var:B> + <nat:2> \} $ as the postcondition $ \{ <var:R> = <var:B> \land <var:i> = <nat:3> \times <var:B> ^ <nat:7> + <nat:2> \times <var:B> ^ <nat:6> + <nat:3> \times <var:B> ^ <nat:4> + <nat:1> \times <var:B> ^ <nat:3> + <nat:4> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:2> \} $ . This is deduced by the assignment rule obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:i> := <nat:3> ; <var:i> := <nat:2> + <var:i> * <var:R> ; <var:i> := <var:i> * <var:R> ; <var:i> := <nat:3> + <var:i> * <var:R> ; <var:i> := <nat:1> + <var:i> * <var:R> ; <var:i> := <nat:4> + <var:i> * <var:R> ; <var:i> := <nat:2> + <var:i> * <var:R> ; <var:i> := <nat:2> + <var:i> * <var:R> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:R> = <var:B> }} <def:poly> {{ <var:i> = <nat:3> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:i> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:i> = <nat:3> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:i> = <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:i> = <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:i> = <nat:3> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:i> = <nat:3> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:i> = <nat:3> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:i> = <nat:3> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 