\begin{document} \begin{theorem} We define a series of commands such that \begin{verbatim} <var:q1> := <var:A> ; <var:q2> := <var:q1> * <var:A> ; <var:q0> := <nat:4> ; <var:q1> := <var:q1> * <nat:8> ; <var:q2> := <var:q2> * <nat:7> ; <var:x> := <var:q2> <var:x> := <var:x> + <var:q1> <var:x> := <var:x> + <var:q0> \end{verbatim} Given , with some positive numbers $ <var:K> $ , that we have $ <var:A> = <var:K> $ ahead of the execution of the set of instructions it must be that $ <var:x> = <nat:7> \times <var:K> ^ <nat:2> + <nat:8> \times <var:K> + <nat:4> $ when set of instructions exits . \end{theorem} \begin{proof} The proof of the set of instructions is demonstrated through usual Hoare logic . Keeping momentum , we have \verb | { <var:A> = <var:K> } <var:q1> := <var:A> { <var:A> = <var:K> \land <var:q1> = <var:K> } | , \verb | { <var:A> = <var:K> \land <var:q1> = <var:K> } <var:q2> := <var:q1> * <var:A> { <var:A> = <var:K> \land <var:q1> = <var:K> \land <var:q2> = <var:K> ^ <nat:2> } | , \verb | { <var:A> = <var:K> \land <var:q1> = <var:K> \land <var:q2> = <var:K> ^ <nat:2> } <var:q0> := <nat:4> { <var:A> = <var:K> \land <var:q1> = <var:K> \land <var:q2> = <var:K> ^ <nat:2> \land <var:q0> = <nat:4> } | , \verb | { <var:A> = <var:K> \land <var:q1> = <var:K> \land <var:q2> = <var:K> ^ <nat:2> \land <var:q0> = <nat:4> } <var:q1> := <var:q1> * <nat:8> { <var:A> = <var:K> \land <var:q1> = <nat:8> \times <var:K> \land <var:q2> = <var:K> ^ <nat:2> \land <var:q0> = <nat:4> } | , \verb | { <var:A> = <var:K> \land <var:q1> = <nat:8> \times <var:K> \land <var:q2> = <var:K> ^ <nat:2> \land <var:q0> = <nat:4> } <var:q2> := <var:q2> * <nat:7> { <var:A> = <var:K> \land <var:q1> = <nat:8> \times <var:K> \land <var:q2> = <nat:7> \times <var:K> ^ <nat:2> \land <var:q0> = <nat:4> } | and \verb | { <var:A> = <var:K> \land <var:q1> = <nat:8> \times <var:K> \land <var:q2> = <nat:7> \times <var:K> ^ <nat:2> \land <var:q0> = <nat:4> } <var:x> := <var:q2{ <var:A> = <var:K> \land <var:q1> = <nat:8> \times <var:K> \land <var:q0> = <nat:4> \land <var:x> = <nat:7> \times <var:K> ^ <nat:2> } | . This is sound using the binding law defined by standard Hoare logic . Further , we see \verb | { <var:A> = <var:K> } <var:q1> := <var:A> { <var:A> = <var:K> \land <var:q1> = <var:K> } | . This is ensured using the binding inference rule found in usual Hoare techniques . Next , we see \verb | { <var:A> = <var:K> } <var:q1> := <var:A> { <var:A> = <var:K> \land <var:q1> = <var:K> } | . This is deduced by the assignment scheme of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:A> = <var:K> }} <var:q1> := <var:A> ; <var:q2> := <var:q1> * <var:A> ; <var:q0> := <nat:4> ; <var:q1> := <var:q1> * <nat:8> ; <var:q2> := <var:q2> * <nat:7> ; <var:x> := <var:q2> <var:x> := <var:x> + <var:q1> <var:x> := <var:x> + <var:q0> {{ <var:x> = <nat:7> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:q1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:q1> = <var:K> /\ <var:q2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:q1> = <var:K> /\ <var:q2> = <var:K> ^ <nat:2> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:q1> = <nat:8> * <var:K> /\ <var:q2> = <var:K> ^ <nat:2> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:q1> = <nat:8> * <var:K> /\ <var:q2> = <nat:7> * <var:K> ^ <nat:2> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:q1> = <nat:8> * <var:K> /\ <var:q0> = <nat:4> /\ <var:x> = <nat:7> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:q0> = <nat:4> /\ <var:x> = <nat:7> * <var:K> ^ <nat:2> + <nat:8> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:K> /\ <var:x> = <nat:7> * <var:K> ^ <nat:2> + <nat:8> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 