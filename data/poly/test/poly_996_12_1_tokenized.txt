\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:x1> := <var:K> ; <var:x2> := <var:x1> * <var:K> ; <var:x3> := <var:x2> * <var:K> ; <var:x4> := <var:x3> * <var:K> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:2> ; <var:x2> := <var:x2> * <nat:8> ; <var:x4> := <var:x4> * <nat:9> ; <var:O> := <var:x4> <var:O> := <var:O> + <var:x2> <var:O> := <var:O> + <var:x1> <var:O> := <var:O> + <var:x0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:K> = <var:B> $ , for any integers $ <var:B> $ , before running the list of commands it must be that we see $ <var:O> = <nat:9> \times <var:B> ^ <nat:4> + <nat:8> \times <var:B> ^ <nat:2> + <nat:2> \times <var:B> + <nat:7> $ once set of commands is done . \end{theorem} \begin{proof} The proof of this set of commands can be accomplished by Hoare reasoning . Immediately after , we have \verb | { <var:K> = <var:B> } <var:x1> := <var:K> { <var:K> = <var:B> \land <var:x1> = <var:B> } | and \verb | { <var:K> = <var:B> \land <var:x1> = <var:B> } <var:x2> := <var:x1> * <var:K> { <var:K> = <var:B> \land <var:x1> = <var:B> \land <var:x2> = <var:B> ^ <nat:2> } | . This is shown using the variable update rule obtained from Hoare reasoning . Further , we have \verb | { <var:K> = <var:B> } <var:x1> := <var:K> { <var:K> = <var:B> \land <var:x1> = <var:B> } | . This is deduced with the binding rule defined in usual Hoare techniques . Advancing , \verb | { <var:K> = <var:B> } <var:x1> := <var:K> { <var:K> = <var:B> \land <var:x1> = <var:B> } | . This is shown with the binding rule found in typical Hoare techniques . Focusing on the following lines of codefound in the segment of code , \verb | { <var:K> = <var:B> } <var:x1> := <var:K> { <var:K> = <var:B> \land <var:x1> = <var:B> } | , \verb | { <var:K> = <var:B> \land <var:x1> = <var:B> } <var:x2> := <var:x1> * <var:K> { <var:K> = <var:B> \land <var:x1> = <var:B> \land <var:x2> = <var:B> ^ <nat:2> } | , \verb | { <var:K> = <var:B> \land <var:x1> = <var:B> \land <var:x2> = <var:B> ^ <nat:2> } <var:x3> := <var:x2> * <var:K> { <var:K> = <var:B> \land <var:x1> = <var:B> \land <var:x2> = <var:B> ^ <nat:2> \land <var:x3> = <var:B> ^ <nat:3> } | , \verb | { <var:K> = <var:B> \land <var:x1> = <var:B> \land <var:x2> = <var:B> ^ <nat:2> \land <var:x3> = <var:B> ^ <nat:3> } <var:x4> := <var:x3> * <var:K> { <var:K> = <var:B> \land <var:x1> = <var:B> \land <var:x2> = <var:B> ^ <nat:2> \land <var:x3> = <var:B> ^ <nat:3> \land <var:x4> = <var:B> ^ <nat:4> } | , \verb | { <var:K> = <var:B> \land <var:x1> = <var:B> \land <var:x2> = <var:B> ^ <nat:2> \land <var:x3> = <var:B> ^ <nat:3> \land <var:x4> = <var:B> ^ <nat:4> } <var:x0> := <nat:7> { <var:K> = <var:B> \land <var:x1> = <var:B> \land <var:x2> = <var:B> ^ <nat:2> \land <var:x3> = <var:B> ^ <nat:3> \land <var:x4> = <var:B> ^ <nat:4> \land <var:x0> = <nat:7> } | and \verb | { <var:K> = <var:B> \land <var:x1> = <var:B> \land <var:x2> = <var:B> ^ <nat:2> \land <var:x3> = <var:B> ^ <nat:3> \land <var:x4> = <var:B> ^ <nat:4> \land <var:x0> = <nat:7> } <var:x1> := <var:x1> * <nat:2> { <var:K> = <var:B> \land <var:x1> = <nat:2> \cdot <var:B> \land <var:x2> = <var:B> ^ <nat:2> \land <var:x3> = <var:B> ^ <nat:3> \land <var:x4> = <var:B> ^ <nat:4> \land <var:x0> = <nat:7> } | . Observing the upcoming piece of code found in the program , we have \verb | { <var:K> = <var:B> } <var:x1> := <var:K> { <var:K> = <var:B> \land <var:x1> = <var:B> } | . Advancing on , we see \verb | { <var:K> = <var:B> } <var:x1> := <var:K> { <var:K> = <var:B> \land <var:x1> = <var:B> } | . This is deduced using the variable update inference rule defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Definition <var:x4> : string := " <var:x4> " . Definition <def:poly> := <var:x1> := <var:K> ; <var:x2> := <var:x1> * <var:K> ; <var:x3> := <var:x2> * <var:K> ; <var:x4> := <var:x3> * <var:K> ; <var:x0> := <nat:7> ; <var:x1> := <var:x1> * <nat:2> ; <var:x2> := <var:x2> * <nat:8> ; <var:x4> := <var:x4> * <nat:9> ; <var:O> := <var:x4> <var:O> := <var:O> + <var:x2> <var:O> := <var:O> + <var:x1> <var:O> := <var:O> + <var:x0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:K> = <var:B> }} <def:poly> {{ <var:O> = <nat:9> * <var:B> ^ <nat:4> + <nat:8> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:x1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:x1> = <var:B> /\ <var:x2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:x1> = <var:B> /\ <var:x2> = <var:B> ^ <nat:2> /\ <var:x3> = <var:B> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:x1> = <var:B> /\ <var:x2> = <var:B> ^ <nat:2> /\ <var:x3> = <var:B> ^ <nat:3> /\ <var:x4> = <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:x1> = <var:B> /\ <var:x2> = <var:B> ^ <nat:2> /\ <var:x3> = <var:B> ^ <nat:3> /\ <var:x4> = <var:B> ^ <nat:4> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:x1> = <nat:2> * <var:B> /\ <var:x2> = <var:B> ^ <nat:2> /\ <var:x3> = <var:B> ^ <nat:3> /\ <var:x4> = <var:B> ^ <nat:4> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:x1> = <nat:2> * <var:B> /\ <var:x2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:x3> = <var:B> ^ <nat:3> /\ <var:x4> = <var:B> ^ <nat:4> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:x1> = <nat:2> * <var:B> /\ <var:x2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:x3> = <var:B> ^ <nat:3> /\ <var:x4> = <nat:9> * <var:B> ^ <nat:4> /\ <var:x0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:x1> = <nat:2> * <var:B> /\ <var:x2> = <nat:8> * <var:B> ^ <nat:2> /\ <var:x3> = <var:B> ^ <nat:3> /\ <var:x0> = <nat:7> /\ <var:O> = <nat:9> * <var:B> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:x1> = <nat:2> * <var:B> /\ <var:x0> = <nat:7> /\ <var:O> = <nat:9> * <var:B> ^ <nat:4> + <nat:8> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:x0> = <nat:7> /\ <var:O> = <nat:9> * <var:B> ^ <nat:4> + <nat:8> * <var:B> ^ <nat:2> + <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:B> /\ <var:O> = <nat:9> * <var:B> ^ <nat:4> + <nat:8> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 