\begin{document} \begin{theorem} We define a code segment in \emph{Imp} : \begin{verbatim} <var:o0> := <nat:8> ; <var:o1> := <nat:9> ; <var:o1> := <var:o1> * <var:I> ; <var:d> := <var:o1> ; <var:d> := <var:d> + <var:o0> \end{verbatim} Assuming $ <var:I> = <var:C> $ ahead of the evaluation of our code segment , it must be that we have $ <var:d> = <nat:9> * <var:C> + <nat:8> $ when list of commands has finished . \end{theorem} \begin{proof} Proving correctness for our series of instructions can be given with standard Hoare logic . Immediately following , we have the binding code yielding $ <nat:8> $ toward $ <var:o0>$ . This statement forwards the condition $ \{ <var:I> = <var:C> \} $ to the condition $ \{ <var:I> = <var:C> \land <var:o0> = <nat:8> \} $ . Moving on to the next step , we have the variable update line binding $ <nat:9> $ as $ <var:o1>$ . This line advances the precondition $ \{ <var:I> = <var:C> \land <var:o0> = <nat:8> \} $ to $ \{ <var:I> = <var:C> \land <var:o0> = <nat:8> \land <var:o1> = <nat:9> \} $ . Observing the following piece of code seen in the set of commands , we see the variable assignmet command assigning $ <var:o1> * <var:I> $ toward $ <var:o1>$ . This command transfers the precondition $ \{ <var:I> = <var:C> \land <var:o0> = <nat:8> \land <var:o1> = <nat:9> \} $ as $ \{ <var:I> = <var:C> \land <var:o0> = <nat:8> \land <var:o1> = <nat:9> * <var:C> \} $ . Advancing to the subsequent piece of code in our set of instructions , the variable binding statement \verb | <var:d> := <var:o1> ; | . This code moves $ \{ <var:I> = <var:C> \land <var:o0> = <nat:8> \land <var:o1> = <nat:9> * <var:C> \} $ toward $ \{ <var:I> = <var:C> \land <var:o0> = <nat:8> \land <var:d> = <nat:9> * <var:C> \} $ . Focusing on the proceeding line found in our list of instructions , the variable assignmet statement binding $ <var:d> + <var:o0$ into $ <var:d>$ . This advances the precondition $ \{ <var:I> = <var:C> \land <var:o0> = <nat:8> \land <var:d> = <nat:9> * <var:C> \} $ as the condition $ \{ <var:I> = <var:C> \land <var:d> = <nat:9> * <var:C> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:I> = <var:C> }} <var:o0> := <nat:8> ; <var:o1> := <nat:9> ; <var:o1> := <var:o1> * <var:I> ; <var:d> := <var:o1> ; <var:d> := <var:d> + <var:o0> {{ <var:d> = <nat:9> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:C> /\ <var:o0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:C> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:C> /\ <var:o0> = <nat:8> /\ <var:o1> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:C> /\ <var:o0> = <nat:8> /\ <var:d> = <nat:9> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:C> /\ <var:d> = <nat:9> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 