\begin{document} \begin{theorem} Take the following set of commands as follows \begin{verbatim} <var:v1> := <var:I> ; <var:v2> := <var:v1> * <var:I> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:6> ; <var:v2> := <var:v2> * <nat:3> ; <var:x> := <var:v2> <var:x> := <var:x> + <var:v1> <var:x> := <var:x> + <var:v0> \end{verbatim} Allowing that $ <var:I> = <var:q> $ ahead of evaluating this code segment it holds that we have $ <var:x> = <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the segment of code is demonstrated through standard Hoare reasoning . Moving forward , the assignment command yielding $ <var:I> $ toward $ <var:v1>$ . This code forwards the condition $ \{ <var:I> = <var:q> \} $ to $ \{ <var:I> = <var:q> \land <var:v1> = <var:q> \} $ . This is given using the assignment inference rule defined by typical Hoare reasoning . Going to the next step , we have the statement \verb | <var:v2> := <var:v1> * <var:I> ; | . This forwards the precondition $ \{ <var:I> = <var:q> \land <var:v1> = <var:q> \} $ toward $ \{ <var:I> = <var:q> \land <var:v1> = <var:q> \land <var:v2> = <var:q> ^ <nat:2> \} $ . Immediately following , we see the code letting $ <nat:1> $ as $ <var:v0>$ . This command moves the condition $ \{ <var:I> = <var:q> \land <var:v1> = <var:q> \land <var:v2> = <var:q> ^ <nat:2> \} $ toward the condition $ \{ <var:I> = <var:q> \land <var:v1> = <var:q> \land <var:v2> = <var:q> ^ <nat:2> \land <var:v0> = <nat:1> \} $ . Now , the variable update code \verb | <var:v1> := <var:v1> * <nat:6> ; | . This transfers $ \{ <var:I> = <var:q> \land <var:v1> = <var:q> \land <var:v2> = <var:q> ^ <nat:2> \land <var:v0> = <nat:1> \} $ as the postcondition $ \{ <var:I> = <var:q> \land <var:v1> = <nat:6> \cdot <var:q> \land <var:v2> = <var:q> ^ <nat:2> \land <var:v0> = <nat:1> \} $ . Paying attention to the upcoming line contained in our series of commands , the variable update command \verb | <var:v2> := <var:v2> * <nat:3> ; | . This redefines $ \{ <var:I> = <var:q> \land <var:v1> = <nat:6> \cdot <var:q> \land <var:v2> = <var:q> ^ <nat:2> \land <var:v0> = <nat:1> \} $ into $ \{ <var:I> = <var:q> \land <var:v1> = <nat:6> \cdot <var:q> \land <var:v2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:v0> = <nat:1> \} $ . This is shown to be logically sound by the assignment scheme of Hoare techniques . Honing in on the upcoming step contained in the series of commands , we see the variable assignmet statement \verb | <var:x> := <var:v2> | . This advances the precondition $ \{ <var:I> = <var:q> \land <var:v1> = <nat:6> \cdot <var:q> \land <var:v2> = <nat:3> \cdot <var:q> ^ <nat:2> \land <var:v0> = <nat:1> \} $ to the condition $ \{ <var:I> = <var:q> \land <var:v1> = <nat:6> \cdot <var:q> \land <var:v0> = <nat:1> \land <var:x> = <nat:3> \cdot <var:q> ^ <nat:2> \} $ . This is guaranteed by the assignment scheme given by standard Hoare techniques . Advancing to the next step , the assignment statement letting $ <var:x> + <var:v1$ as $ <var:x>$ . This statement transfers the condition $ \{ <var:I> = <var:q> \land <var:v1> = <nat:6> \cdot <var:q> \land <var:v0> = <nat:1> \land <var:x> = <nat:3> \cdot <var:q> ^ <nat:2> \} $ into $ \{ <var:I> = <var:q> \land <var:v0> = <nat:1> \land <var:x> = <nat:3> \cdot <var:q> ^ <nat:2> + <nat:6> \cdot <var:q> \} $ . This is shown by the assignment inference rule in typical Hoare logic . Paying attention to the upcoming command in the code segment , the environment update command \verb | <var:x> := <var:x> + <var:v0> | . This code takes the precondition $ \{ <var:I> = <var:q> \land <var:v0> = <nat:1> \land <var:x> = <nat:3> \cdot <var:q> ^ <nat:2> + <nat:6> \cdot <var:q> \} $ as $ \{ <var:I> = <var:q> \land <var:x> = <nat:3> \cdot <var:q> ^ <nat:2> + <nat:6> \cdot <var:q> + <nat:1> \} $ . This is given with the assignment inference rule in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:I> = <var:q> }} <var:v1> := <var:I> ; <var:v2> := <var:v1> * <var:I> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:6> ; <var:v2> := <var:v2> * <nat:3> ; <var:x> := <var:v2> <var:x> := <var:x> + <var:v1> <var:x> := <var:x> + <var:v0> {{ <var:x> = <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:v1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:v1> = <var:q> /\ <var:v2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:v1> = <var:q> /\ <var:v2> = <var:q> ^ <nat:2> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:v1> = <nat:6> * <var:q> /\ <var:v2> = <var:q> ^ <nat:2> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:v1> = <nat:6> * <var:q> /\ <var:v2> = <nat:3> * <var:q> ^ <nat:2> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:v1> = <nat:6> * <var:q> /\ <var:v0> = <nat:1> /\ <var:x> = <nat:3> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:v0> = <nat:1> /\ <var:x> = <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:q> /\ <var:x> = <nat:3> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 