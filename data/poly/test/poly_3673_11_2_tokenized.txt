\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:b> := <nat:2> ; <var:b> := <nat:2> + <var:b> * <var:D> ; <var:b> := <nat:4> + <var:b> * <var:D> ; <var:b> := <nat:4> + <var:b> * <var:D> ; <var:b> := <var:b> * <var:D> ; <var:b> := <nat:3> + <var:b> * <var:D> ; <var:b> := <nat:3> + <var:b> * <var:D> ; <var:b> := <nat:3> + <var:b> * <var:D> ; <var:b> := <nat:1> + <var:b> * <var:D> ; <var:b> := <nat:2> + <var:b> * <var:D> ; <var:b> := <nat:1> + <var:b> * <var:D> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:D> = <var:H> $ ahead of executing our series of commands , then we see $ <var:b> = <nat:2> * <var:H> ^ <nat:10> + <nat:2> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> $ when list of commands is done executing . \end{theorem} \begin{proof} The application of standard Hoare reasoning gives : \begin{eqnarray} \{ <var:D> = <var:H> \} \\ <var:b> := <nat:2> ; \\ \{ <var:D> = <var:H> \land <var:b> = <nat:2> \} \\ <var:b> := <nat:2> + <var:b> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:b> = <nat:2> \times <var:H> + <nat:2> \} \\ <var:b> := <nat:4> + <var:b> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:b> = <nat:2> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:4> \} \\ <var:b> := <nat:4> + <var:b> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:b> = <nat:2> \times <var:H> ^ <nat:3> + <nat:2> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:4> \} \end{eqnarray} Advancing executing our list of commands produces : \begin{eqnarray} <var:b> := <var:b> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:b> = <nat:2> \times <var:H> ^ <nat:4> + <nat:2> \times <var:H> ^ <nat:3> + <nat:4> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + \} \\ <var:b> := <nat:3> + <var:b> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:b> = <nat:2> \times <var:H> ^ <nat:5> + <nat:2> \times <var:H> ^ <nat:4> + <nat:4> \times <var:H> ^ <nat:3> + <nat:4> \times <var:H> ^ <nat:2> + <nat:3> \} \\ <var:b> := <nat:3> + <var:b> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:b> = <nat:2> \times <var:H> ^ <nat:6> + <nat:2> \times <var:H> ^ <nat:5> + <nat:4> \times <var:H> ^ <nat:4> + <nat:4> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> + <nat:3> \} \\ <var:b> := <nat:3> + <var:b> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:b> = <nat:2> \times <var:H> ^ <nat:7> + <nat:2> \times <var:H> ^ <nat:6> + <nat:4> \times <var:H> ^ <nat:5> + <nat:4> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:3> \} \\ <var:b> := <nat:1> + <var:b> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:b> = <nat:2> \times <var:H> ^ <nat:8> + <nat:2> \times <var:H> ^ <nat:7> + <nat:4> \times <var:H> ^ <nat:6> + <nat:4> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:3> \times <var:H> + <nat:1> \} \\ <var:b> := <nat:2> + <var:b> * <var:D> ; \\ \{ <var:D> = <var:H> \land <var:b> = <nat:2> \times <var:H> ^ <nat:9> + <nat:2> \times <var:H> ^ <nat:8> + <nat:4> \times <var:H> ^ <nat:7> + <nat:4> \times <var:H> ^ <nat:6> + <nat:3> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:3> + <nat:3> \times <var:H> ^ <nat:2> + <nat:1> \times <var:H> + <nat:2> \} \\ <var:b> := <nat:1> + <var:b> * <var:D> \\ \{ <var:D> = <var:H> \land <var:b> = <nat:2> \times <var:H> ^ <nat:10> + <nat:2> \times <var:H> ^ <nat:9> + <nat:4> \times <var:H> ^ <nat:8> + <nat:4> \times <var:H> ^ <nat:7> + <nat:3> \times <var:H> ^ <nat:5> + <nat:3> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:3> + <nat:1> \times <var:H> ^ <nat:2> + <nat:2> \times <var:H> + <nat:1> \} \end{eqnarray} Furthering executing this segment of code yields : \begin{eqnarray} \end{eqnarray} As a result , the set of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:b> := <nat:2> ; <var:b> := <nat:2> + <var:b> * <var:D> ; <var:b> := <nat:4> + <var:b> * <var:D> ; <var:b> := <nat:4> + <var:b> * <var:D> ; <var:b> := <var:b> * <var:D> ; <var:b> := <nat:3> + <var:b> * <var:D> ; <var:b> := <nat:3> + <var:b> * <var:D> ; <var:b> := <nat:3> + <var:b> * <var:D> ; <var:b> := <nat:1> + <var:b> * <var:D> ; <var:b> := <nat:2> + <var:b> * <var:D> ; <var:b> := <nat:1> + <var:b> * <var:D> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:D> = <var:H> }} <def:poly> {{ <var:b> = <nat:2> * <var:H> ^ <nat:10> + <nat:2> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:b> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:b> = <nat:2> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:b> = <nat:2> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:b> = <nat:2> * <var:H> ^ <nat:3> + <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:b> = <nat:2> * <var:H> ^ <nat:4> + <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:b> = <nat:2> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:b> = <nat:2> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:b> = <nat:2> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:b> = <nat:2> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:b> = <nat:2> * <var:H> ^ <nat:9> + <nat:2> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:4> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:H> /\ <var:b> = <nat:2> * <var:H> ^ <nat:10> + <nat:2> * <var:H> ^ <nat:9> + <nat:4> * <var:H> ^ <nat:8> + <nat:4> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 