\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:2> ; <var:d> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Define a code segment <def:poly> . Assuming $ <var:n> = <var:U> $ for every $ <var:U> $ prior to executing our segment of code , it must be that $ <var:d> = <nat:2> $ after list of instructions has exited . \end{theorem} \begin{proof} Note that this decorated code . \begin{eqnarray} \{ <var:n> = <var:U> \} \\ <var:w0> := <nat:2> ; \\ \{ <var:n> = <var:U> \land <var:w0> = <nat:2> \} \end{eqnarray} Allowing the execution of this series of instructions yields : \begin{eqnarray} <var:d> := <var:w0> \\ \{ <var:n> = <var:U> \land <var:d> = <nat:2> \} \end{eqnarray} Applying standard Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:2> ; <var:d> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:n> = <var:U> }} <def:poly> {{ <var:d> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:U> /\ <var:d> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 