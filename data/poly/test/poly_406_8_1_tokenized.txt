\begin{document} \begin{theorem} Take a list of commands such that \begin{verbatim} <var:J1> := <var:D> ; <var:J2> := <var:J1> * <var:D> ; <var:J0> := <nat:1> ; <var:J1> := <var:J1> * <nat:2> ; <var:J2> := <var:J2> * <nat:4> ; <var:W> := <var:J2> <var:W> := <var:W> + <var:J1> <var:W> := <var:W> + <var:J0> \end{verbatim} Allowing that $ <var:D> = <var:M> $ before the evaluation of our series of instructions , it holds that $ <var:W> = <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:1> $ . \end{theorem} \begin{proof} Applying Hoare techniques yields : \begin{eqnarray} \{ <var:D> = <var:M> \} \\ <var:J1> := <var:D> ; \\ \{ <var:D> = <var:M> \land <var:J1> = <var:M> \} \\ <var:J2> := <var:J1> * <var:D> ; \\ \{ <var:D> = <var:M> \land <var:J1> = <var:M> \land <var:J2> = <var:M> ^ <nat:2> \} \\ <var:J0> := <nat:1> ; \\ \{ <var:D> = <var:M> \land <var:J1> = <var:M> \land <var:J2> = <var:M> ^ <nat:2> \land <var:J0> = <nat:1> \} \\ <var:J1> := <var:J1> * <nat:2> ; \\ \{ <var:D> = <var:M> \land <var:J1> = <nat:2> * <var:M> \land <var:J2> = <var:M> ^ <nat:2> \land <var:J0> = <nat:1> \} \\ <var:J2> := <var:J2> * <nat:4> ; \\ \{ <var:D> = <var:M> \land <var:J1> = <nat:2> * <var:M> \land <var:J2> = <nat:4> * <var:M> ^ <nat:2> \land <var:J0> = <nat:1> \} \\ <var:W> := <var:J2> \\ \{ <var:D> = <var:M> \land <var:J1> = <nat:2> * <var:M> \land <var:J0> = <nat:1> \land <var:W> = <nat:4> * <var:M> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:J1> \\ \{ <var:D> = <var:M> \land <var:J0> = <nat:1> \land <var:W> = <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> \} \\ <var:W> := <var:W> + <var:J0> \\ \{ <var:D> = <var:M> \land <var:W> = <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:1> \} \end{eqnarray} Given the preceding argument , the set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:D> = <var:M> }} <var:J1> := <var:D> ; <var:J2> := <var:J1> * <var:D> ; <var:J0> := <nat:1> ; <var:J1> := <var:J1> * <nat:2> ; <var:J2> := <var:J2> * <nat:4> ; <var:W> := <var:J2> <var:W> := <var:W> + <var:J1> <var:W> := <var:W> + <var:J0> {{ <var:W> = <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:J1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:J1> = <var:M> /\ <var:J2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:J1> = <var:M> /\ <var:J2> = <var:M> ^ <nat:2> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:J1> = <nat:2> * <var:M> /\ <var:J2> = <var:M> ^ <nat:2> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:J1> = <nat:2> * <var:M> /\ <var:J2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:J1> = <nat:2> * <var:M> /\ <var:J0> = <nat:1> /\ <var:W> = <nat:4> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:J0> = <nat:1> /\ <var:W> = <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:M> /\ <var:W> = <nat:4> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 