\begin{document} \begin{theorem} Take a list of instructions as follows \begin{verbatim} <var:W1> := <var:o> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:5> ; <var:Y> := <var:W1> <var:Y> := <var:Y> + <var:W0> \end{verbatim} Given that $ <var:o> = <var:C> $ before evaluating our series of instructions it must be that we see $ <var:Y> = <nat:5> \times <var:C> + <nat:8> $ . \end{theorem} \begin{proof} The method of proof for our list of instructions is demonstrated by Hoare techniques . Keeping momentum , \begin{verbatim} { <var:o> = <var:C> } <var:W1> := <var:o> { <var:o> = <var:C> \land <var:W1> = <var:C> } { <var:o> = <var:C> \land <var:W1> = <var:C> } <var:W0> := <nat:8> { <var:o> = <var:C> \land <var:W1> = <var:C> \land <var:W0> = <nat:8> } { <var:o> = <var:C> \land <var:W1> = <var:C> \land <var:W0> = <nat:8> } <var:W1> := <var:W1> * <nat:5> { <var:o> = <var:C> \land <var:W1> = <nat:5> \cdot <var:C> \land <var:W0> = <nat:8> } { <var:o> = <var:C> \land <var:W1> = <nat:5> \cdot <var:C> \land <var:W0> = <nat:8> } <var:Y> := <var:W1{ <var:o> = <var:C> \land <var:W0> = <nat:8> \land <var:Y> = <nat:5> \cdot <var:C> } \end{verbatim} This is shown to be logically sound by the environment update rule defined by standard Hoare logic . Taking another step toward the subsequent line of code found in our code segment , we see \begin{verbatim} { <var:o> = <var:C> } <var:W1> := <var:o> { <var:o> = <var:C> \land <var:W1> = <var:C> } \end{verbatim} This is shown using the variable update scheme in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:o> = <var:C> }} <var:W1> := <var:o> ; <var:W0> := <nat:8> ; <var:W1> := <var:W1> * <nat:5> ; <var:Y> := <var:W1> <var:Y> := <var:Y> + <var:W0> {{ <var:Y> = <nat:5> * <var:C> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:W1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:W1> = <var:C> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:W1> = <nat:5> * <var:C> /\ <var:W0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:W0> = <nat:8> /\ <var:Y> = <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:C> /\ <var:Y> = <nat:5> * <var:C> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 