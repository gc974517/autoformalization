\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:d> ; <var:I2> := <var:I1> * <var:d> ; <var:I3> := <var:I2> * <var:d> ; <var:I4> := <var:I3> * <var:d> ; <var:I0> := <nat:6> ; <var:I1> := <var:I1> * <nat:2> ; <var:I3> := <var:I3> * <nat:8> ; <var:I4> := <var:I4> * <nat:4> ; <var:h> := <var:I4> <var:h> := <var:h> + <var:I3> <var:h> := <var:h> + <var:I1> <var:h> := <var:h> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Define a series of commands <def:poly> . Allow $ <var:d> = <var:G> $ --- letting natural numbers $ <var:G> $ --- prior to executing this list of commands it follows that $ <var:h> = <nat:4> \cdot <var:G> ^ <nat:4> + <nat:8> \cdot <var:G> ^ <nat:3> + <nat:2> \cdot <var:G> + <nat:6> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands can be done using usual Hoare techniques . Considering the upcoming line of code contained in the list of instructions , the environment update code \verb | <var:I1> := <var:d> ; | . This transfers the condition $ \{ <var:d> = <var:G> \} $ toward the postcondition $ \{ <var:d> = <var:G> \land <var:I1> = <var:G> \} $ . This is rigorously given through the assignment rule given in typical Hoare reasoning . Looking at the following step found in our set of commands , we see the assignment statement \verb | <var:I2> := <var:I1> * <var:d> ; | . This forwards the condition $ \{ <var:d> = <var:G> \land <var:I1> = <var:G> \} $ as $ \{ <var:d> = <var:G> \land <var:I1> = <var:G> \land <var:I2> = <var:G> ^ <nat:2> \} $ . Advancing on , we see the variable binding statement binding $ <var:I2> * <var:d> $ into $ <var:I3>$ . This takes the precondition $ \{ <var:d> = <var:G> \land <var:I1> = <var:G> \land <var:I2> = <var:G> ^ <nat:2> \} $ toward $ \{ <var:d> = <var:G> \land <var:I1> = <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <var:G> ^ <nat:3> \} $ . This is shown by the assignment law from Hoare reasoning . After , we see the assignment line binding $ <var:I3> * <var:d> $ toward $ <var:I4>$ . This code advances $ \{ <var:d> = <var:G> \land <var:I1> = <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <var:G> ^ <nat:3> \} $ to the condition $ \{ <var:d> = <var:G> \land <var:I1> = <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <var:G> ^ <nat:3> \land <var:I4> = <var:G> ^ <nat:4> \} $ . This is shown through the assignment inference rule from standard Hoare logic . After , the line defining $ <nat:6> $ into $ <var:I0>$ . This code moves $ \{ <var:d> = <var:G> \land <var:I1> = <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <var:G> ^ <nat:3> \land <var:I4> = <var:G> ^ <nat:4> \} $ to $ \{ <var:d> = <var:G> \land <var:I1> = <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <var:G> ^ <nat:3> \land <var:I4> = <var:G> ^ <nat:4> \land <var:I0> = <nat:6> \} $ . This is ensured through the assignment scheme from Hoare logic . Further , the variable assignmet code binding $ <var:I1> * <nat:2> $ toward $ <var:I1>$ . This statement moves the precondition $ \{ <var:d> = <var:G> \land <var:I1> = <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <var:G> ^ <nat:3> \land <var:I4> = <var:G> ^ <nat:4> \land <var:I0> = <nat:6> \} $ toward $ \{ <var:d> = <var:G> \land <var:I1> = <nat:2> \cdot <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <var:G> ^ <nat:3> \land <var:I4> = <var:G> ^ <nat:4> \land <var:I0> = <nat:6> \} $ . Next , we have the assignment line giving $ <var:I3> * <nat:8> $ to $ <var:I3>$ . This line transfers the precondition $ \{ <var:d> = <var:G> \land <var:I1> = <nat:2> \cdot <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <var:G> ^ <nat:3> \land <var:I4> = <var:G> ^ <nat:4> \land <var:I0> = <nat:6> \} $ into the condition $ \{ <var:d> = <var:G> \land <var:I1> = <nat:2> \cdot <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <nat:8> \cdot <var:G> ^ <nat:3> \land <var:I4> = <var:G> ^ <nat:4> \land <var:I0> = <nat:6> \} $ . Advancing , the variable binding statement binding $ <var:I4> * <nat:4> $ as $ <var:I4>$ . This line moves $ \{ <var:d> = <var:G> \land <var:I1> = <nat:2> \cdot <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <nat:8> \cdot <var:G> ^ <nat:3> \land <var:I4> = <var:G> ^ <nat:4> \land <var:I0> = <nat:6> \} $ toward $ \{ <var:d> = <var:G> \land <var:I1> = <nat:2> \cdot <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <nat:8> \cdot <var:G> ^ <nat:3> \land <var:I4> = <nat:4> \cdot <var:G> ^ <nat:4> \land <var:I0> = <nat:6> \} $ . Further , the variable binding code defining $ <var:I4$ to $ <var:h>$ . This command advances the precondition $ \{ <var:d> = <var:G> \land <var:I1> = <nat:2> \cdot <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <nat:8> \cdot <var:G> ^ <nat:3> \land <var:I4> = <nat:4> \cdot <var:G> ^ <nat:4> \land <var:I0> = <nat:6> \} $ as the condition $ \{ <var:d> = <var:G> \land <var:I1> = <nat:2> \cdot <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <nat:8> \cdot <var:G> ^ <nat:3> \land <var:I0> = <nat:6> \land <var:h> = <nat:4> \cdot <var:G> ^ <nat:4> \} $ . Focusing on the next piece of code found in the program , the environment update code giving $ <var:h> + <var:I3$ to $ <var:h>$ . This forwards $ \{ <var:d> = <var:G> \land <var:I1> = <nat:2> \cdot <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I3> = <nat:8> \cdot <var:G> ^ <nat:3> \land <var:I0> = <nat:6> \land <var:h> = <nat:4> \cdot <var:G> ^ <nat:4> \} $ to $ \{ <var:d> = <var:G> \land <var:I1> = <nat:2> \cdot <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I0> = <nat:6> \land <var:h> = <nat:4> \cdot <var:G> ^ <nat:4> + <nat:8> \cdot <var:G> ^ <nat:3> \} $ . Immediately after , the environment update code \verb | <var:h> := <var:h> + <var:I1> | . This code moves the condition $ \{ <var:d> = <var:G> \land <var:I1> = <nat:2> \cdot <var:G> \land <var:I2> = <var:G> ^ <nat:2> \land <var:I0> = <nat:6> \land <var:h> = <nat:4> \cdot <var:G> ^ <nat:4> + <nat:8> \cdot <var:G> ^ <nat:3> \} $ to $ \{ <var:d> = <var:G> \land <var:I0> = <nat:6> \land <var:h> = <nat:4> \cdot <var:G> ^ <nat:4> + <nat:8> \cdot <var:G> ^ <nat:3> + <nat:2> \cdot <var:G> \} $ . Further , we see the binding code \verb | <var:h> := <var:h> + <var:I0> | . This moves $ \{ <var:d> = <var:G> \land <var:I0> = <nat:6> \land <var:h> = <nat:4> \cdot <var:G> ^ <nat:4> + <nat:8> \cdot <var:G> ^ <nat:3> + <nat:2> \cdot <var:G> \} $ toward the condition $ \{ <var:d> = <var:G> \land <var:h> = <nat:4> \cdot <var:G> ^ <nat:4> + <nat:8> \cdot <var:G> ^ <nat:3> + <nat:2> \cdot <var:G> + <nat:6> \} $ . This is sound by the assignment inference rule given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <var:I4> : string := " <var:I4> " . Definition <def:poly> := <var:I1> := <var:d> ; <var:I2> := <var:I1> * <var:d> ; <var:I3> := <var:I2> * <var:d> ; <var:I4> := <var:I3> * <var:d> ; <var:I0> := <nat:6> ; <var:I1> := <var:I1> * <nat:2> ; <var:I3> := <var:I3> * <nat:8> ; <var:I4> := <var:I4> * <nat:4> ; <var:h> := <var:I4> <var:h> := <var:h> + <var:I3> <var:h> := <var:h> + <var:I1> <var:h> := <var:h> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:d> = <var:G> }} <def:poly> {{ <var:h> = <nat:4> * <var:G> ^ <nat:4> + <nat:8> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:I1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:I1> = <var:G> /\ <var:I2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:I1> = <var:G> /\ <var:I2> = <var:G> ^ <nat:2> /\ <var:I3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:I1> = <var:G> /\ <var:I2> = <var:G> ^ <nat:2> /\ <var:I3> = <var:G> ^ <nat:3> /\ <var:I4> = <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:I1> = <var:G> /\ <var:I2> = <var:G> ^ <nat:2> /\ <var:I3> = <var:G> ^ <nat:3> /\ <var:I4> = <var:G> ^ <nat:4> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:I1> = <nat:2> * <var:G> /\ <var:I2> = <var:G> ^ <nat:2> /\ <var:I3> = <var:G> ^ <nat:3> /\ <var:I4> = <var:G> ^ <nat:4> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:I1> = <nat:2> * <var:G> /\ <var:I2> = <var:G> ^ <nat:2> /\ <var:I3> = <nat:8> * <var:G> ^ <nat:3> /\ <var:I4> = <var:G> ^ <nat:4> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:I1> = <nat:2> * <var:G> /\ <var:I2> = <var:G> ^ <nat:2> /\ <var:I3> = <nat:8> * <var:G> ^ <nat:3> /\ <var:I4> = <nat:4> * <var:G> ^ <nat:4> /\ <var:I0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:I1> = <nat:2> * <var:G> /\ <var:I2> = <var:G> ^ <nat:2> /\ <var:I3> = <nat:8> * <var:G> ^ <nat:3> /\ <var:I0> = <nat:6> /\ <var:h> = <nat:4> * <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:I1> = <nat:2> * <var:G> /\ <var:I2> = <var:G> ^ <nat:2> /\ <var:I0> = <nat:6> /\ <var:h> = <nat:4> * <var:G> ^ <nat:4> + <nat:8> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:I0> = <nat:6> /\ <var:h> = <nat:4> * <var:G> ^ <nat:4> + <nat:8> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:G> /\ <var:h> = <nat:4> * <var:G> ^ <nat:4> + <nat:8> * <var:G> ^ <nat:3> + <nat:2> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 