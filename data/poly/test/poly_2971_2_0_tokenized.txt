\begin{document} \begin{theorem} We define a series of commands such that \begin{verbatim} <var:i0> := <nat:1> ; <var:o> := <var:i0> \end{verbatim} Allowing that we have $ <var:a> = <var:D> $ before the evaluation of this code segment then we have $ <var:o> = <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for the list of instructions can be done by typical Hoare logic . Moving forward to the upcoming pieces of code seen in the list of commands , we see \begin{verbatim} { <var:a> = <var:D> } <var:i0> := <nat:1> { <var:a> = <var:D> \land <var:i0> = <nat:1> } { <var:a> = <var:D> \land <var:i0> = <nat:1> } <var:o> := <var:i0{ <var:a> = <var:D> \land <var:o> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:a> = <var:D> }} <var:i0> := <nat:1> ; <var:o> := <var:i0> {{ <var:o> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:D> /\ <var:o> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 