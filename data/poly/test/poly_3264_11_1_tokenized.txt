\begin{document} \begin{theorem} Consider the following series of instructions in \emph{Imp} as \begin{verbatim} <var:e1> := <var:u> ; <var:e2> := <var:e1> * <var:u> ; <var:e3> := <var:e2> * <var:u> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:1> ; <var:e2> := <var:e2> * <nat:8> ; <var:e3> := <var:e3> * <nat:2> ; <var:f> := <var:e3> <var:f> := <var:f> + <var:e2> <var:f> := <var:f> + <var:e1> <var:f> := <var:f> + <var:e0> \end{verbatim} Allowing that $ <var:u> = <var:X> $ prior to evaluating our series of commands , then we have $ <var:f> = <nat:2> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> $ once segment of code has finished . \end{theorem} \begin{proof} Demonstrating correctness of this set of instructions can be accomplished with usual Hoare logic . Moving forward to the next step , we have the variable assignmet command \verb | <var:e1> := <var:u> ; | . This takes the precondition $ \{ <var:u> = <var:X> \} $ as the condition $ \{ <var:u> = <var:X> \land <var:e1> = <var:X> \} $ . Observing the next piece of code in the series of instructions , we have the variable assignmet command assigning $ <var:e1> * <var:u> $ to $ <var:e2>$ . This moves the condition $ \{ <var:u> = <var:X> \land <var:e1> = <var:X> \} $ to the postcondition $ \{ <var:u> = <var:X> \land <var:e1> = <var:X> \land <var:e2> = <var:X> ^ <nat:2> \} $ . Moving forward to the next statement found in the segment of code , the variable update command \verb | <var:e3> := <var:e2> * <var:u> ; | . This moves $ \{ <var:u> = <var:X> \land <var:e1> = <var:X> \land <var:e2> = <var:X> ^ <nat:2> \} $ toward the condition $ \{ <var:u> = <var:X> \land <var:e1> = <var:X> \land <var:e2> = <var:X> ^ <nat:2> \land <var:e3> = <var:X> ^ <nat:3> \} $ . This is guaranteed through the assignment scheme obtained from typical Hoare reasoning . Advancing to the next step , we have the code defining $ <nat:3> $ to $ <var:e0>$ . This redefines the condition $ \{ <var:u> = <var:X> \land <var:e1> = <var:X> \land <var:e2> = <var:X> ^ <nat:2> \land <var:e3> = <var:X> ^ <nat:3> \} $ into the condition $ \{ <var:u> = <var:X> \land <var:e1> = <var:X> \land <var:e2> = <var:X> ^ <nat:2> \land <var:e3> = <var:X> ^ <nat:3> \land <var:e0> = <nat:3> \} $ . This is known to be sound through the assignment law obtained from usual Hoare techniques . Jumping to the proceeding step found in the set of instructions , we have the environment update code yielding $ <var:e1> * <nat:1> $ as $ <var:e1>$ . This transfers the condition $ \{ <var:u> = <var:X> \land <var:e1> = <var:X> \land <var:e2> = <var:X> ^ <nat:2> \land <var:e3> = <var:X> ^ <nat:3> \land <var:e0> = <nat:3> \} $ as the condition $ \{ <var:u> = <var:X> \land <var:e1> = <nat:1> * <var:X> \land <var:e2> = <var:X> ^ <nat:2> \land <var:e3> = <var:X> ^ <nat:3> \land <var:e0> = <nat:3> \} $ . This is known to be sound through the assignment scheme from typical Hoare reasoning . Advancing on , the variable assignmet code \verb | <var:e2> := <var:e2> * <nat:8> ; | . This line advances the condition $ \{ <var:u> = <var:X> \land <var:e1> = <nat:1> * <var:X> \land <var:e2> = <var:X> ^ <nat:2> \land <var:e3> = <var:X> ^ <nat:3> \land <var:e0> = <nat:3> \} $ into the postcondition $ \{ <var:u> = <var:X> \land <var:e1> = <nat:1> * <var:X> \land <var:e2> = <nat:8> * <var:X> ^ <nat:2> \land <var:e3> = <var:X> ^ <nat:3> \land <var:e0> = <nat:3> \} $ . Taking another step toward the next line of code found in our list of instructions , we have the variable update command binding $ <var:e3> * <nat:2> $ into $ <var:e3>$ . This line moves $ \{ <var:u> = <var:X> \land <var:e1> = <nat:1> * <var:X> \land <var:e2> = <nat:8> * <var:X> ^ <nat:2> \land <var:e3> = <var:X> ^ <nat:3> \land <var:e0> = <nat:3> \} $ to the condition $ \{ <var:u> = <var:X> \land <var:e1> = <nat:1> * <var:X> \land <var:e2> = <nat:8> * <var:X> ^ <nat:2> \land <var:e3> = <nat:2> * <var:X> ^ <nat:3> \land <var:e0> = <nat:3> \} $ . Now , we see the assignment statement \verb | <var:f> := <var:e3> | . This advances $ \{ <var:u> = <var:X> \land <var:e1> = <nat:1> * <var:X> \land <var:e2> = <nat:8> * <var:X> ^ <nat:2> \land <var:e3> = <nat:2> * <var:X> ^ <nat:3> \land <var:e0> = <nat:3> \} $ toward the postcondition $ \{ <var:u> = <var:X> \land <var:e1> = <nat:1> * <var:X> \land <var:e2> = <nat:8> * <var:X> ^ <nat:2> \land <var:e0> = <nat:3> \land <var:f> = <nat:2> * <var:X> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment rule found in standard Hoare techniques . Going forward , the binding code yielding $ <var:f> + <var:e2$ toward $ <var:f>$ . This redefines the condition $ \{ <var:u> = <var:X> \land <var:e1> = <nat:1> * <var:X> \land <var:e2> = <nat:8> * <var:X> ^ <nat:2> \land <var:e0> = <nat:3> \land <var:f> = <nat:2> * <var:X> ^ <nat:3> \} $ toward the postcondition $ \{ <var:u> = <var:X> \land <var:e1> = <nat:1> * <var:X> \land <var:e0> = <nat:3> \land <var:f> = <nat:2> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment inference rule obtained from standard Hoare techniques . Shifting focus toward the proceeding statement contained in our code segment , we have the line defining $ <var:f> + <var:e1$ to $ <var:f>$ . This transfers the precondition $ \{ <var:u> = <var:X> \land <var:e1> = <nat:1> * <var:X> \land <var:e0> = <nat:3> \land <var:f> = <nat:2> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> \} $ as $ \{ <var:u> = <var:X> \land <var:e0> = <nat:3> \land <var:f> = <nat:2> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> \} $ . Advancing to the next step , we have the statement binding $ <var:f> + <var:e0$ as $ <var:f>$ . This redefines $ \{ <var:u> = <var:X> \land <var:e0> = <nat:3> \land <var:f> = <nat:2> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> \} $ to the postcondition $ \{ <var:u> = <var:X> \land <var:f> = <nat:2> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:u> = <var:X> }} <var:e1> := <var:u> ; <var:e2> := <var:e1> * <var:u> ; <var:e3> := <var:e2> * <var:u> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:1> ; <var:e2> := <var:e2> * <nat:8> ; <var:e3> := <var:e3> * <nat:2> ; <var:f> := <var:e3> <var:f> := <var:f> + <var:e2> <var:f> := <var:f> + <var:e1> <var:f> := <var:f> + <var:e0> {{ <var:f> = <nat:2> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:e1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:e1> = <var:X> /\ <var:e2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:e1> = <var:X> /\ <var:e2> = <var:X> ^ <nat:2> /\ <var:e3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:e1> = <var:X> /\ <var:e2> = <var:X> ^ <nat:2> /\ <var:e3> = <var:X> ^ <nat:3> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:e1> = <nat:1> * <var:X> /\ <var:e2> = <var:X> ^ <nat:2> /\ <var:e3> = <var:X> ^ <nat:3> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:e1> = <nat:1> * <var:X> /\ <var:e2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:e3> = <var:X> ^ <nat:3> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:e1> = <nat:1> * <var:X> /\ <var:e2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:e3> = <nat:2> * <var:X> ^ <nat:3> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:e1> = <nat:1> * <var:X> /\ <var:e2> = <nat:8> * <var:X> ^ <nat:2> /\ <var:e0> = <nat:3> /\ <var:f> = <nat:2> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:e1> = <nat:1> * <var:X> /\ <var:e0> = <nat:3> /\ <var:f> = <nat:2> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:e0> = <nat:3> /\ <var:f> = <nat:2> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:X> /\ <var:f> = <nat:2> * <var:X> ^ <nat:3> + <nat:8> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 