\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:5> ; <var:n1> := <nat:7> ; <var:n1> := <var:n1> * <var:f> ; <var:n2> := <nat:5> ; <var:n2> := <var:n2> * <var:f> ; <var:n2> := <var:n2> * <var:f> ; <var:n3> := <nat:6> ; <var:n3> := <var:n3> * <var:f> ; <var:n3> := <var:n3> * <var:f> ; <var:n3> := <var:n3> * <var:f> ; <var:s> := <var:n3> ; <var:s> := <var:s> + <var:n2> ; <var:s> := <var:s> + <var:n1> ; <var:s> := <var:s> + <var:n0> \end{verbatim} Allowing $ <var:f> = <var:u> $ ahead of running our segment of code , then $ <var:s> = <nat:6> \cdot <var:u> ^ <nat:3> + <nat:5> \cdot <var:u> ^ <nat:2> + <nat:7> \cdot <var:u> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for the series of commands is shown through usual Hoare reasoning . Jumping to the proceeding statement in the set of commands , we see the binding code \verb | <var:n0> := <nat:5> ; | . This statement transfers $ \{ <var:f> = <var:u> \} $ as the condition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \} $ . Focusing on the proceeding command found in the segment of code , we have the binding line giving $ <nat:7> $ to $ <var:n1>$ . This transfers the precondition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \} $ as the condition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> \} $ . This is guaranteed by the assignment inference rule in standard Hoare reasoning . Keeping momentum , we have the statement \verb | <var:n1> := <var:n1> * <var:f> ; | . This transfers the condition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> \} $ as the condition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \} $ . This is shown by the assignment scheme given by usual Hoare techniques . Taking another step toward the next step contained in the set of commands , we see the variable update line letting $ <nat:5> $ toward $ <var:n2>$ . This redefines the precondition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \} $ to the postcondition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> \} $ . Taking another step toward the following bit of code contained in our list of commands , we see the variable binding line \verb | <var:n2> := <var:n2> * <var:f> ; | . This statement moves the condition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> \} $ toward the condition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> \} $ . This is rigorously given through the assignment scheme found in typical Hoare logic . Further , we see the variable update statement \verb | <var:n2> := <var:n2> * <var:f> ; | . This command forwards $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> \} $ toward the condition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> ^ <nat:2> \} $ . Following , the variable assignmet line \verb | <var:n3> := <nat:6> ; | . This statement transfers the precondition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> ^ <nat:2> \} $ toward the condition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> ^ <nat:2> \land <var:n3> = <nat:6> \} $ . Looking at the upcoming command in the code , we see the line assigning $ <var:n3> * <var:f> $ as $ <var:n3>$ . This statement redefines the precondition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> ^ <nat:2> \land <var:n3> = <nat:6> \} $ into the postcondition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> ^ <nat:2> \land <var:n3> = <nat:6> * <var:u> \} $ . This is given using the assignment law given in standard Hoare reasoning . Moving on to the upcoming piece of code in our list of commands , the variable binding command \verb | <var:n3> := <var:n3> * <var:f> ; | . This command moves $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> ^ <nat:2> \land <var:n3> = <nat:6> * <var:u> \} $ to the postcondition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> ^ <nat:2> \land <var:n3> = <nat:6> * <var:u> ^ <nat:2> \} $ . Advancing on , the environment update line \verb | <var:n3> := <var:n3> * <var:f> ; | . This line transfers the condition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> ^ <nat:2> \land <var:n3> = <nat:6> * <var:u> ^ <nat:2> \} $ as $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> ^ <nat:2> \land <var:n3> = <nat:6> * <var:u> ^ <nat:3> \} $ . This is sound through the assignment rule from usual Hoare techniques . Immediately following , we see the environment update command \verb | <var:s> := <var:n3> ; | . This transfers the condition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> ^ <nat:2> \land <var:n3> = <nat:6> * <var:u> ^ <nat:3> \} $ to $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> ^ <nat:2> \land <var:s> = <nat:6> * <var:u> ^ <nat:3> \} $ . Observing the next step seen in the list of commands , we see the environment update code yielding $ <var:s> + <var:n2> $ as $ <var:s>$ . This command transfers the precondition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:n2> = <nat:5> * <var:u> ^ <nat:2> \land <var:s> = <nat:6> * <var:u> ^ <nat:3> \} $ into $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:s> = <nat:6> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> \} $ . This is guaranteed through the assignment inference rule found in usual Hoare reasoning . Following , the variable update command letting $ <var:s> + <var:n1> $ into $ <var:s>$ . This moves the condition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:n1> = <nat:7> * <var:u> \land <var:s> = <nat:6> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> \} $ as the postcondition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:s> = <nat:6> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:7> * <var:u> \} $ . This is shown using the assignment inference rule defined by Hoare reasoning . Focusing on the upcoming bit of code in our program , we have the code giving $ <var:s> + <var:n0$ toward $ <var:s>$ . This line transfers the condition $ \{ <var:f> = <var:u> \land <var:n0> = <nat:5> \land <var:s> = <nat:6> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:7> * <var:u> \} $ toward the condition $ \{ <var:f> = <var:u> \land <var:s> = <nat:6> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:7> * <var:u> + <nat:5> \} $ . This is guaranteed through the assignment rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <var:n3> : string := " <var:n3> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:f> = <var:u> }} <var:n0> := <nat:5> ; <var:n1> := <nat:7> ; <var:n1> := <var:n1> * <var:f> ; <var:n2> := <nat:5> ; <var:n2> := <var:n2> * <var:f> ; <var:n2> := <var:n2> * <var:f> ; <var:n3> := <nat:6> ; <var:n3> := <var:n3> * <var:f> ; <var:n3> := <var:n3> * <var:f> ; <var:n3> := <var:n3> * <var:f> ; <var:s> := <var:n3> ; <var:s> := <var:s> + <var:n2> ; <var:s> := <var:s> + <var:n1> ; <var:s> := <var:s> + <var:n0> {{ <var:s> = <nat:6> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:7> * <var:u> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:n0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:7> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:7> * <var:u> /\ <var:n2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:7> * <var:u> /\ <var:n2> = <nat:5> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:7> * <var:u> /\ <var:n2> = <nat:5> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:7> * <var:u> /\ <var:n2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:n3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:7> * <var:u> /\ <var:n2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:n3> = <nat:6> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:7> * <var:u> /\ <var:n2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:n3> = <nat:6> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:7> * <var:u> /\ <var:n2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:n3> = <nat:6> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:7> * <var:u> /\ <var:n2> = <nat:5> * <var:u> ^ <nat:2> /\ <var:s> = <nat:6> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:n0> = <nat:5> /\ <var:n1> = <nat:7> * <var:u> /\ <var:s> = <nat:6> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:n0> = <nat:5> /\ <var:s> = <nat:6> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:7> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:u> /\ <var:s> = <nat:6> * <var:u> ^ <nat:3> + <nat:5> * <var:u> ^ <nat:2> + <nat:7> * <var:u> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 