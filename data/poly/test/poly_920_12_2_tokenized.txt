\begin{document} \begin{theorem} Let the following set of instructions : \begin{verbatim} <var:X> := <nat:1> ; <var:X> := <var:X> * <var:w> ; <var:X> := <nat:2> + <var:X> * <var:w> ; <var:X> := <nat:4> + <var:X> * <var:w> ; <var:X> := <var:X> * <var:w> ; <var:X> := <nat:1> + <var:X> * <var:w> ; <var:X> := <nat:4> + <var:X> * <var:w> ; <var:X> := <var:X> * <var:w> ; <var:X> := <nat:3> + <var:X> * <var:w> ; <var:X> := <nat:4> + <var:X> * <var:w> ; <var:X> := <nat:1> + <var:X> * <var:w> ; <var:X> := <nat:4> + <var:X> * <var:w> \end{verbatim} Given that we have $ <var:w> = <var:d> $ before interpreting our segment of code , then we see $ <var:X> = <nat:1> * <var:d> ^ <nat:11> + <nat:2> * <var:d> ^ <nat:9> + <nat:4> * <var:d> ^ <nat:8> + <nat:1> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:4> $ when list of commands finishes . \end{theorem} \begin{proof} The way to prove correctness for this code segment is given using standard Hoare techniques . Advancing on , \begin{eqnarray} \{ <var:w> = <var:d> \} \, <var:X> := <nat:1> \, \{ <var:w> = <var:d> \land <var:X> = <nat:1> \} \\ \{ <var:w> = <var:d> \land <var:X> = <nat:1> \} \, <var:X> := <var:X> * <var:w> \, \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> + \} \\ \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> + \} \, <var:X> := <nat:2> + <var:X> * <var:w> \, \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:2> \} \\ \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:2> \} \, <var:X> := <nat:4> + <var:X> * <var:w> \, \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> ^ <nat:3> + <nat:2> \cdot <var:d> + <nat:4> \} \\ \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> ^ <nat:3> + <nat:2> \cdot <var:d> + <nat:4> \} \, <var:X> := <var:X> * <var:w> \, \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> ^ <nat:4> + <nat:2> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + \} \\ \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> ^ <nat:4> + <nat:2> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + \} \, <var:X> := <nat:1> + <var:X> * <var:w> \, \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> ^ <nat:5> + <nat:2> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:1> \} \\ \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> ^ <nat:5> + <nat:2> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:1> \} \, <var:X> := <nat:4> + <var:X> * <var:w> \, \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> ^ <nat:6> + <nat:2> \cdot <var:d> ^ <nat:4> + <nat:4> \cdot <var:d> ^ <nat:3> + <nat:1> \cdot <var:d> + <nat:4> \} \\ \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> ^ <nat:6> + <nat:2> \cdot <var:d> ^ <nat:4> + <nat:4> \cdot <var:d> ^ <nat:3> + <nat:1> \cdot <var:d> + <nat:4> \} \, <var:X> := <var:X> * <var:w> \, \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> ^ <nat:7> + <nat:2> \cdot <var:d> ^ <nat:5> + <nat:4> \cdot <var:d> ^ <nat:4> + <nat:1> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + \} \end{eqnarray} Moving forward to the upcoming bits of codein our series of commands , we see \begin{eqnarray} \{ <var:w> = <var:d> \} \, <var:X> := <nat:1> \, \{ <var:w> = <var:d> \land <var:X> = <nat:1> \} \\ \{ <var:w> = <var:d> \land <var:X> = <nat:1> \} \, <var:X> := <var:X> * <var:w> \, \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> + \} \\ \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> + \} \, <var:X> := <nat:2> + <var:X> * <var:w> \, \{ <var:w> = <var:d> \land <var:X> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:2> \} \end{eqnarray} Stepping through , we have \begin{eqnarray} \{ <var:w> = <var:d> \} \, <var:X> := <nat:1> \, \{ <var:w> = <var:d> \land <var:X> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:w> = <var:d> }} <var:X> := <nat:1> ; <var:X> := <var:X> * <var:w> ; <var:X> := <nat:2> + <var:X> * <var:w> ; <var:X> := <nat:4> + <var:X> * <var:w> ; <var:X> := <var:X> * <var:w> ; <var:X> := <nat:1> + <var:X> * <var:w> ; <var:X> := <nat:4> + <var:X> * <var:w> ; <var:X> := <var:X> * <var:w> ; <var:X> := <nat:3> + <var:X> * <var:w> ; <var:X> := <nat:4> + <var:X> * <var:w> ; <var:X> := <nat:1> + <var:X> * <var:w> ; <var:X> := <nat:4> + <var:X> * <var:w> {{ <var:X> = <nat:1> * <var:d> ^ <nat:11> + <nat:2> * <var:d> ^ <nat:9> + <nat:4> * <var:d> ^ <nat:8> + <nat:1> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:X> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:X> = <nat:1> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:X> = <nat:1> * <var:d> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:X> = <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:X> = <nat:1> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:X> = <nat:1> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:X> = <nat:1> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:X> = <nat:1> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:X> = <nat:1> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:X> = <nat:1> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:7> + <nat:4> * <var:d> ^ <nat:6> + <nat:1> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:X> = <nat:1> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:8> + <nat:4> * <var:d> ^ <nat:7> + <nat:1> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:d> /\ <var:X> = <nat:1> * <var:d> ^ <nat:11> + <nat:2> * <var:d> ^ <nat:9> + <nat:4> * <var:d> ^ <nat:8> + <nat:1> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 