\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U1> := <var:G> ; <var:U2> := <var:U1> * <var:G> ; <var:U3> := <var:U2> * <var:G> ; <var:U4> := <var:U3> * <var:G> ; <var:U0> := <nat:4> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:5> ; <var:U3> := <var:U3> * <nat:1> ; <var:U4> := <var:U4> * <nat:8> ; <var:E> := <var:U4> <var:E> := <var:E> + <var:U3> <var:E> := <var:E> + <var:U2> <var:E> := <var:E> + <var:U1> <var:E> := <var:E> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of commands <def:poly> . Given , given any $ <var:Z> \in \mathbb{N} $ , $ <var:G> = <var:Z> $ before evaluating the code it follows that $ <var:E> = <nat:8> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic returns : \begin{eqnarray} \{ <var:G> = <var:Z> \} \\ <var:U1> := <var:G> ; \\ \{ <var:G> = <var:Z> \land <var:U1> = <var:Z> \} \\ <var:U2> := <var:U1> * <var:G> ; \\ \{ <var:G> = <var:Z> \land <var:U1> = <var:Z> \land <var:U2> = <var:Z> ^ <nat:2> \} \\ <var:U3> := <var:U2> * <var:G> ; \\ \{ <var:G> = <var:Z> \land <var:U1> = <var:Z> \land <var:U2> = <var:Z> ^ <nat:2> \land <var:U3> = <var:Z> ^ <nat:3> \} \\ <var:U4> := <var:U3> * <var:G> ; \\ \{ <var:G> = <var:Z> \land <var:U1> = <var:Z> \land <var:U2> = <var:Z> ^ <nat:2> \land <var:U3> = <var:Z> ^ <nat:3> \land <var:U4> = <var:Z> ^ <nat:4> \} \\ <var:U0> := <nat:4> ; \\ \{ <var:G> = <var:Z> \land <var:U1> = <var:Z> \land <var:U2> = <var:Z> ^ <nat:2> \land <var:U3> = <var:Z> ^ <nat:3> \land <var:U4> = <var:Z> ^ <nat:4> \land <var:U0> = <nat:4> \} \\ <var:U1> := <var:U1> * <nat:4> ; \\ \{ <var:G> = <var:Z> \land <var:U1> = <nat:4> \times <var:Z> \land <var:U2> = <var:Z> ^ <nat:2> \land <var:U3> = <var:Z> ^ <nat:3> \land <var:U4> = <var:Z> ^ <nat:4> \land <var:U0> = <nat:4> \} \\ <var:U2> := <var:U2> * <nat:5> ; \\ \{ <var:G> = <var:Z> \land <var:U1> = <nat:4> \times <var:Z> \land <var:U2> = <nat:5> \times <var:Z> ^ <nat:2> \land <var:U3> = <var:Z> ^ <nat:3> \land <var:U4> = <var:Z> ^ <nat:4> \land <var:U0> = <nat:4> \} \\ <var:U3> := <var:U3> * <nat:1> ; \\ \{ <var:G> = <var:Z> \land <var:U1> = <nat:4> \times <var:Z> \land <var:U2> = <nat:5> \times <var:Z> ^ <nat:2> \land <var:U3> = <nat:1> \times <var:Z> ^ <nat:3> \land <var:U4> = <var:Z> ^ <nat:4> \land <var:U0> = <nat:4> \} \\ <var:U4> := <var:U4> * <nat:8> ; \\ \{ <var:G> = <var:Z> \land <var:U1> = <nat:4> \times <var:Z> \land <var:U2> = <nat:5> \times <var:Z> ^ <nat:2> \land <var:U3> = <nat:1> \times <var:Z> ^ <nat:3> \land <var:U4> = <nat:8> \times <var:Z> ^ <nat:4> \land <var:U0> = <nat:4> \} \\ <var:E> := <var:U4> \\ \{ <var:G> = <var:Z> \land <var:U1> = <nat:4> \times <var:Z> \land <var:U2> = <nat:5> \times <var:Z> ^ <nat:2> \land <var:U3> = <nat:1> \times <var:Z> ^ <nat:3> \land <var:U0> = <nat:4> \land <var:E> = <nat:8> \times <var:Z> ^ <nat:4> \} \\ <var:E> := <var:E> + <var:U3> \\ \{ <var:G> = <var:Z> \land <var:U1> = <nat:4> \times <var:Z> \land <var:U2> = <nat:5> \times <var:Z> ^ <nat:2> \land <var:U0> = <nat:4> \land <var:E> = <nat:8> \times <var:Z> ^ <nat:4> + <nat:1> \times <var:Z> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:U2> \\ \{ <var:G> = <var:Z> \land <var:U1> = <nat:4> \times <var:Z> \land <var:U0> = <nat:4> \land <var:E> = <nat:8> \times <var:Z> ^ <nat:4> + <nat:1> \times <var:Z> ^ <nat:3> + <nat:5> \times <var:Z> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:U1> \\ \{ <var:G> = <var:Z> \land <var:U0> = <nat:4> \land <var:E> = <nat:8> \times <var:Z> ^ <nat:4> + <nat:1> \times <var:Z> ^ <nat:3> + <nat:5> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> \} \\ <var:E> := <var:E> + <var:U0> \\ \{ <var:G> = <var:Z> \land <var:E> = <nat:8> \times <var:Z> ^ <nat:4> + <nat:1> \times <var:Z> ^ <nat:3> + <nat:5> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:4> \} \end{eqnarray} Allowing executing our series of instructions gives us : \begin{eqnarray} \end{eqnarray} Considering the preceding argument , our code segment is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <var:U4> : string := " <var:U4> " . Definition <def:poly> := <var:U1> := <var:G> ; <var:U2> := <var:U1> * <var:G> ; <var:U3> := <var:U2> * <var:G> ; <var:U4> := <var:U3> * <var:G> ; <var:U0> := <nat:4> ; <var:U1> := <var:U1> * <nat:4> ; <var:U2> := <var:U2> * <nat:5> ; <var:U3> := <var:U3> * <nat:1> ; <var:U4> := <var:U4> * <nat:8> ; <var:E> := <var:U4> <var:E> := <var:E> + <var:U3> <var:E> := <var:E> + <var:U2> <var:E> := <var:E> + <var:U1> <var:E> := <var:E> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:G> = <var:Z> }} <def:poly> {{ <var:E> = <nat:8> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:U1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:U1> = <var:Z> /\ <var:U2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:U1> = <var:Z> /\ <var:U2> = <var:Z> ^ <nat:2> /\ <var:U3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:U1> = <var:Z> /\ <var:U2> = <var:Z> ^ <nat:2> /\ <var:U3> = <var:Z> ^ <nat:3> /\ <var:U4> = <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:U1> = <var:Z> /\ <var:U2> = <var:Z> ^ <nat:2> /\ <var:U3> = <var:Z> ^ <nat:3> /\ <var:U4> = <var:Z> ^ <nat:4> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:U1> = <nat:4> * <var:Z> /\ <var:U2> = <var:Z> ^ <nat:2> /\ <var:U3> = <var:Z> ^ <nat:3> /\ <var:U4> = <var:Z> ^ <nat:4> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:U1> = <nat:4> * <var:Z> /\ <var:U2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:U3> = <var:Z> ^ <nat:3> /\ <var:U4> = <var:Z> ^ <nat:4> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:U1> = <nat:4> * <var:Z> /\ <var:U2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:U3> = <nat:1> * <var:Z> ^ <nat:3> /\ <var:U4> = <var:Z> ^ <nat:4> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:U1> = <nat:4> * <var:Z> /\ <var:U2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:U3> = <nat:1> * <var:Z> ^ <nat:3> /\ <var:U4> = <nat:8> * <var:Z> ^ <nat:4> /\ <var:U0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:U1> = <nat:4> * <var:Z> /\ <var:U2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:U3> = <nat:1> * <var:Z> ^ <nat:3> /\ <var:U0> = <nat:4> /\ <var:E> = <nat:8> * <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:U1> = <nat:4> * <var:Z> /\ <var:U2> = <nat:5> * <var:Z> ^ <nat:2> /\ <var:U0> = <nat:4> /\ <var:E> = <nat:8> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:U1> = <nat:4> * <var:Z> /\ <var:U0> = <nat:4> /\ <var:E> = <nat:8> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:U0> = <nat:4> /\ <var:E> = <nat:8> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:Z> /\ <var:E> = <nat:8> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:5> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 