\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:l> := <nat:3> ; <var:l> := <nat:1> + <var:l> * <var:K> ; <var:l> := <var:l> * <var:K> ; <var:l> := <nat:4> + <var:l> * <var:K> ; <var:l> := <nat:1> + <var:l> * <var:K> ; <var:l> := <nat:2> + <var:l> * <var:K> ; <var:l> := <nat:1> + <var:l> * <var:K> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:K> = <var:P> $ before the evaluation of this list of commands it follows that we have $ <var:l> = <nat:3> \cdot <var:P> ^ <nat:6> + <nat:1> \cdot <var:P> ^ <nat:5> + <nat:4> \cdot <var:P> ^ <nat:3> + <nat:1> \cdot <var:P> ^ <nat:2> + <nat:2> \cdot <var:P> + <nat:1> $ after set of instructions executes . \end{theorem} \begin{proof} The way to prove correctness for the list of commands is done by typical Hoare reasoning . Going forward , we see \begin{verbatim} { <var:K> = <var:P> } <var:l> := <nat:3> { <var:K> = <var:P> \land <var:l> = <nat:3> } \end{verbatim} This is shown with the rule obtained from usual Hoare techniques . Focusing on the upcoming steps in our set of commands , \begin{verbatim} { <var:K> = <var:P> } <var:l> := <nat:3> { <var:K> = <var:P> \land <var:l> = <nat:3> } { <var:K> = <var:P> \land <var:l> = <nat:3> } <var:l> := <nat:1> + <var:l> * <var:K> { <var:K> = <var:P> \land <var:l> = <nat:3> * <var:P> + <nat:1> } { <var:K> = <var:P> \land <var:l> = <nat:3> * <var:P> + <nat:1> } <var:l> := <var:l> * <var:K> { <var:K> = <var:P> \land <var:l> = <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + } \end{verbatim} This is rigorously given with the variable binding inference rule defined in Hoare logic . Advancing to the next step , we have \begin{verbatim} { <var:K> = <var:P> } <var:l> := <nat:3> { <var:K> = <var:P> \land <var:l> = <nat:3> } { <var:K> = <var:P> \land <var:l> = <nat:3> } <var:l> := <nat:1> + <var:l> * <var:K> { <var:K> = <var:P> \land <var:l> = <nat:3> * <var:P> + <nat:1> } \end{verbatim} This is guaranteed with the binding law from typical Hoare techniques . Advancing to the following command contained in our series of instructions , we have \begin{verbatim} { <var:K> = <var:P> } <var:l> := <nat:3> { <var:K> = <var:P> \land <var:l> = <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:l> := <nat:3> ; <var:l> := <nat:1> + <var:l> * <var:K> ; <var:l> := <var:l> * <var:K> ; <var:l> := <nat:4> + <var:l> * <var:K> ; <var:l> := <nat:1> + <var:l> * <var:K> ; <var:l> := <nat:2> + <var:l> * <var:K> ; <var:l> := <nat:1> + <var:l> * <var:K> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:K> = <var:P> }} <def:poly> {{ <var:l> = <nat:3> * <var:P> ^ <nat:6> + <nat:1> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:l> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:l> = <nat:3> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:l> = <nat:3> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:l> = <nat:3> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:l> = <nat:3> * <var:P> ^ <nat:4> + <nat:1> * <var:P> ^ <nat:3> + <nat:4> * <var:P> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:l> = <nat:3> * <var:P> ^ <nat:5> + <nat:1> * <var:P> ^ <nat:4> + <nat:4> * <var:P> ^ <nat:2> + <nat:1> * <var:P> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:P> /\ <var:l> = <nat:3> * <var:P> ^ <nat:6> + <nat:1> * <var:P> ^ <nat:5> + <nat:4> * <var:P> ^ <nat:3> + <nat:1> * <var:P> ^ <nat:2> + <nat:2> * <var:P> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 