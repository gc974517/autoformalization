\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:S1> := <var:H> ; <var:S2> := <var:S1> * <var:H> ; <var:S0> := <nat:5> ; <var:S1> := <var:S1> * <nat:1> ; <var:S2> := <var:S2> * <nat:2> ; <var:Y> := <var:S2> <var:Y> := <var:Y> + <var:S1> <var:Y> := <var:Y> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} We define a list of commands <def:poly> . Allow it to hold that $ <var:H> = <var:G> $ before interpreting our segment of code then we have $ <var:Y> = <nat:2> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:5> $ once code is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:H> = <var:G> \} \\ <var:S1> := <var:H> ; \\ \{ <var:H> = <var:G> \land <var:S1> = <var:G> \} \\ <var:S2> := <var:S1> * <var:H> ; \\ \{ <var:H> = <var:G> \land <var:S1> = <var:G> \land <var:S2> = <var:G> ^ <nat:2> \} \\ <var:S0> := <nat:5> ; \\ \{ <var:H> = <var:G> \land <var:S1> = <var:G> \land <var:S2> = <var:G> ^ <nat:2> \land <var:S0> = <nat:5> \} \\ <var:S1> := <var:S1> * <nat:1> ; \\ \{ <var:H> = <var:G> \land <var:S1> = <nat:1> * <var:G> \land <var:S2> = <var:G> ^ <nat:2> \land <var:S0> = <nat:5> \} \end{eqnarray} Advancing running the segment of code returns : \begin{eqnarray} <var:S2> := <var:S2> * <nat:2> ; \\ \{ <var:H> = <var:G> \land <var:S1> = <nat:1> * <var:G> \land <var:S2> = <nat:2> * <var:G> ^ <nat:2> \land <var:S0> = <nat:5> \} \\ <var:Y> := <var:S2> \\ \{ <var:H> = <var:G> \land <var:S1> = <nat:1> * <var:G> \land <var:S0> = <nat:5> \land <var:Y> = <nat:2> * <var:G> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:S1> \\ \{ <var:H> = <var:G> \land <var:S0> = <nat:5> \land <var:Y> = <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> \} \\ <var:Y> := <var:Y> + <var:S0> \\ \{ <var:H> = <var:G> \land <var:Y> = <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:5> \} \end{eqnarray} Advancing running our set of instructions returns : \begin{eqnarray} \end{eqnarray} The application of Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <def:poly> := <var:S1> := <var:H> ; <var:S2> := <var:S1> * <var:H> ; <var:S0> := <nat:5> ; <var:S1> := <var:S1> * <nat:1> ; <var:S2> := <var:S2> * <nat:2> ; <var:Y> := <var:S2> <var:Y> := <var:Y> + <var:S1> <var:Y> := <var:Y> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:H> = <var:G> }} <def:poly> {{ <var:Y> = <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:S1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:S1> = <var:G> /\ <var:S2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:S1> = <var:G> /\ <var:S2> = <var:G> ^ <nat:2> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:S1> = <nat:1> * <var:G> /\ <var:S2> = <var:G> ^ <nat:2> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:S1> = <nat:1> * <var:G> /\ <var:S2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:S1> = <nat:1> * <var:G> /\ <var:S0> = <nat:5> /\ <var:Y> = <nat:2> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:S0> = <nat:5> /\ <var:Y> = <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:G> /\ <var:Y> = <nat:2> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 