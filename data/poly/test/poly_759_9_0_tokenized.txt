\begin{document} \begin{theorem} Define a program as follows \begin{verbatim} <var:S0> := <nat:5> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:L> ; <var:S2> := <nat:1> ; <var:S2> := <var:S2> * <var:L> ; <var:S2> := <var:S2> * <var:L> ; <var:v> := <var:S2> ; <var:v> := <var:v> + <var:S1> ; <var:v> := <var:v> + <var:S0> \end{verbatim} Assume $ <var:L> = <var:x> $ before running the code it holds that $ <var:v> = <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:5> $ after program finishes . \end{theorem} \begin{proof} Applying usual Hoare techniques yields : \begin{eqnarray} \{ <var:L> = <var:x> \} \\ <var:S0> := <nat:5> ; \\ \{ <var:L> = <var:x> \land <var:S0> = <nat:5> \} \\ <var:S1> := <nat:1> ; \\ \{ <var:L> = <var:x> \land <var:S0> = <nat:5> \land <var:S1> = <nat:1> \} \\ <var:S1> := <var:S1> * <var:L> ; \\ \{ <var:L> = <var:x> \land <var:S0> = <nat:5> \land <var:S1> = <nat:1> \cdot <var:x> \} \\ <var:S2> := <nat:1> ; \\ \{ <var:L> = <var:x> \land <var:S0> = <nat:5> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \} \\ <var:S2> := <var:S2> * <var:L> ; \\ \{ <var:L> = <var:x> \land <var:S0> = <nat:5> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> \} \\ <var:S2> := <var:S2> * <var:L> ; \\ \{ <var:L> = <var:x> \land <var:S0> = <nat:5> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:S2> = <nat:1> \cdot <var:x> ^ <nat:2> \} \\ <var:v> := <var:S2> ; \\ \{ <var:L> = <var:x> \land <var:S0> = <nat:5> \land <var:S1> = <nat:1> \cdot <var:x> \land <var:v> = <nat:1> \cdot <var:x> ^ <nat:2> \} \\ <var:v> := <var:v> + <var:S1> ; \\ \{ <var:L> = <var:x> \land <var:S0> = <nat:5> \land <var:v> = <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> \} \\ <var:v> := <var:v> + <var:S0> \\ \{ <var:L> = <var:x> \land <var:v> = <nat:1> \cdot <var:x> ^ <nat:2> + <nat:1> \cdot <var:x> + <nat:5> \} \end{eqnarray} Given the above , this series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:L> = <var:x> }} <var:S0> := <nat:5> ; <var:S1> := <nat:1> ; <var:S1> := <var:S1> * <var:L> ; <var:S2> := <nat:1> ; <var:S2> := <var:S2> * <var:L> ; <var:S2> := <var:S2> * <var:L> ; <var:v> := <var:S2> ; <var:v> := <var:v> + <var:S1> ; <var:v> := <var:v> + <var:S0> {{ <var:v> = <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:S0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:1> * <var:x> /\ <var:S2> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:S0> = <nat:5> /\ <var:S1> = <nat:1> * <var:x> /\ <var:v> = <nat:1> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:S0> = <nat:5> /\ <var:v> = <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:x> /\ <var:v> = <nat:1> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 