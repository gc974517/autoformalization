\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as \begin{verbatim} <var:v1> := <var:L> ; <var:v2> := <var:v1> * <var:L> ; <var:v0> := <nat:9> ; <var:v1> := <var:v1> * <nat:9> ; <var:v2> := <var:v2> * <nat:9> ; <var:U> := <var:v2> <var:U> := <var:U> + <var:v1> <var:U> := <var:U> + <var:v0> \end{verbatim} Assume that we have $ <var:L> = <var:a> $ prior to running this series of commands it must be that we see $ <var:U> = <nat:9> \times <var:a> ^ <nat:2> + <nat:9> \times <var:a> + <nat:9> $ after code segment is done executing . \end{theorem} \begin{proof} The flow of logic for the program is shown by usual Hoare techniques . Advancing , we have the variable assignmet command binding $ <var:L> $ toward $ <var:v1>$ . This code advances $ \{ <var:L> = <var:a> \} $ to the condition $ \{ <var:L> = <var:a> \land <var:v1> = <var:a> \} $ . This is shown using the assignment law obtained from standard Hoare logic . Focusing on the following line seen in our segment of code , we have the binding command \verb | <var:v2> := <var:v1> * <var:L> ; | . This code forwards the precondition $ \{ <var:L> = <var:a> \land <var:v1> = <var:a> \} $ toward the condition $ \{ <var:L> = <var:a> \land <var:v1> = <var:a> \land <var:v2> = <var:a> ^ <nat:2> \} $ . This is sound through the assignment inference rule obtained from Hoare logic . After , we see the line yielding $ <nat:9> $ toward $ <var:v0>$ . This moves the condition $ \{ <var:L> = <var:a> \land <var:v1> = <var:a> \land <var:v2> = <var:a> ^ <nat:2> \} $ as the condition $ \{ <var:L> = <var:a> \land <var:v1> = <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v0> = <nat:9> \} $ . Moving onward , we have the assignment command defining $ <var:v1> * <nat:9> $ to $ <var:v1>$ . This forwards $ \{ <var:L> = <var:a> \land <var:v1> = <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v0> = <nat:9> \} $ into the condition $ \{ <var:L> = <var:a> \land <var:v1> = <nat:9> * <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v0> = <nat:9> \} $ . Next , we have the variable update line binding $ <var:v2> * <nat:9> $ toward $ <var:v2>$ . This statement moves $ \{ <var:L> = <var:a> \land <var:v1> = <nat:9> * <var:a> \land <var:v2> = <var:a> ^ <nat:2> \land <var:v0> = <nat:9> \} $ toward the postcondition $ \{ <var:L> = <var:a> \land <var:v1> = <nat:9> * <var:a> \land <var:v2> = <nat:9> * <var:a> ^ <nat:2> \land <var:v0> = <nat:9> \} $ . This is rigorously given with the assignment law from typical Hoare reasoning . Next , we see the variable update statement assigning $ <var:v2$ into $ <var:U>$ . This statement moves $ \{ <var:L> = <var:a> \land <var:v1> = <nat:9> * <var:a> \land <var:v2> = <nat:9> * <var:a> ^ <nat:2> \land <var:v0> = <nat:9> \} $ to the postcondition $ \{ <var:L> = <var:a> \land <var:v1> = <nat:9> * <var:a> \land <var:v0> = <nat:9> \land <var:U> = <nat:9> * <var:a> ^ <nat:2> \} $ . Keeping momentum , we have the assignment command \verb | <var:U> := <var:U> + <var:v1> | . This advances the precondition $ \{ <var:L> = <var:a> \land <var:v1> = <nat:9> * <var:a> \land <var:v0> = <nat:9> \land <var:U> = <nat:9> * <var:a> ^ <nat:2> \} $ into the condition $ \{ <var:L> = <var:a> \land <var:v0> = <nat:9> \land <var:U> = <nat:9> * <var:a> ^ <nat:2> + <nat:9> * <var:a> \} $ . This is ensured using the assignment law defined by Hoare techniques . Taking another step toward the proceeding command contained in the list of instructions , we see the binding statement defining $ <var:U> + <var:v0$ to $ <var:U>$ . This code takes $ \{ <var:L> = <var:a> \land <var:v0> = <nat:9> \land <var:U> = <nat:9> * <var:a> ^ <nat:2> + <nat:9> * <var:a> \} $ into the condition $ \{ <var:L> = <var:a> \land <var:U> = <nat:9> * <var:a> ^ <nat:2> + <nat:9> * <var:a> + <nat:9> \} $ . This is known to be sound with the assignment scheme of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:L> = <var:a> }} <var:v1> := <var:L> ; <var:v2> := <var:v1> * <var:L> ; <var:v0> := <nat:9> ; <var:v1> := <var:v1> * <nat:9> ; <var:v2> := <var:v2> * <nat:9> ; <var:U> := <var:v2> <var:U> := <var:U> + <var:v1> <var:U> := <var:U> + <var:v0> {{ <var:U> = <nat:9> * <var:a> ^ <nat:2> + <nat:9> * <var:a> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:v1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:v1> = <var:a> /\ <var:v2> = <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:v1> = <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:v1> = <nat:9> * <var:a> /\ <var:v2> = <var:a> ^ <nat:2> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:v1> = <nat:9> * <var:a> /\ <var:v2> = <nat:9> * <var:a> ^ <nat:2> /\ <var:v0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:v1> = <nat:9> * <var:a> /\ <var:v0> = <nat:9> /\ <var:U> = <nat:9> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:v0> = <nat:9> /\ <var:U> = <nat:9> * <var:a> ^ <nat:2> + <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:a> /\ <var:U> = <nat:9> * <var:a> ^ <nat:2> + <nat:9> * <var:a> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 