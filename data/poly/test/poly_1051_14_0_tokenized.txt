\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:w0> := <nat:1> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:C> ; <var:w2> := <nat:7> ; <var:w2> := <var:w2> * <var:C> ; <var:w2> := <var:w2> * <var:C> ; <var:w3> := <nat:4> ; <var:w3> := <var:w3> * <var:C> ; <var:w3> := <var:w3> * <var:C> ; <var:w3> := <var:w3> * <var:C> ; <var:s> := <var:w3> ; <var:s> := <var:s> + <var:w2> ; <var:s> := <var:s> + <var:w1> ; <var:s> := <var:s> + <var:w0> \end{verbatim} Allowing that $ <var:C> = <var:u> $ for every natural numbers $ <var:u> $ ahead of the execution of our series of instructions , it holds that we have $ <var:s> = <nat:4> \cdot <var:u> ^ <nat:3> + <nat:7> \cdot <var:u> ^ <nat:2> + <nat:4> \cdot <var:u> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of instructions can be accomplished using usual Hoare logic . Moving forward to the next step , we see the environment update command \verb | <var:w0> := <nat:1> ; | . This takes the precondition $ \{ <var:C> = <var:u> \} $ to the condition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \} $ . This is sound by the assignment inference rule given by typical Hoare reasoning . After , we have the environment update command \verb | <var:w1> := <nat:4> ; | . This command transfers the precondition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \} $ as the condition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> \} $ . This is rigorously given through the assignment scheme from usual Hoare techniques . Advancing to the proceeding line in the list of commands , we have the variable assignmet statement yielding $ <var:w1> * <var:C> $ as $ <var:w1>$ . This moves the precondition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> \} $ to the condition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \} $ . Moving onward , we have the code \verb | <var:w2> := <nat:7> ; | . This advances $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \} $ as the condition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> \} $ . This is shown to be logically sound using the assignment law in Hoare logic . Taking a look at the following line of code contained in our code , we see the variable binding command yielding $ <var:w2> * <var:C> $ to $ <var:w2>$ . This code transfers the condition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> \} $ toward $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> \} $ . Focusing on the next bit of code found in the series of commands , we have the variable binding command assigning $ <var:w2> * <var:C> $ into $ <var:w2>$ . This forwards the precondition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> \} $ toward the condition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> ^ <nat:2> \} $ . Moving on to the next step , we have the environment update code yielding $ <nat:4> $ as $ <var:w3>$ . This line redefines the precondition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> ^ <nat:2> \} $ to the postcondition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> ^ <nat:2> \land <var:w3> = <nat:4> \} $ . Advancing to the next step , the environment update command \verb | <var:w3> := <var:w3> * <var:C> ; | . This takes the precondition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> ^ <nat:2> \land <var:w3> = <nat:4> \} $ into the postcondition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> ^ <nat:2> \land <var:w3> = <nat:4> * <var:u> \} $ . This is known to be sound through the assignment rule given in typical Hoare logic . Following , we have the assignment code giving $ <var:w3> * <var:C> $ into $ <var:w3>$ . This moves $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> ^ <nat:2> \land <var:w3> = <nat:4> * <var:u> \} $ toward the postcondition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> ^ <nat:2> \land <var:w3> = <nat:4> * <var:u> ^ <nat:2> \} $ . This is guaranteed through the assignment inference rule in usual Hoare logic . Taking a look at the proceeding piece of code in the set of instructions , we have the variable update code yielding $ <var:w3> * <var:C> $ toward $ <var:w3>$ . This redefines the condition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> ^ <nat:2> \land <var:w3> = <nat:4> * <var:u> ^ <nat:2> \} $ toward the postcondition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> ^ <nat:2> \land <var:w3> = <nat:4> * <var:u> ^ <nat:3> \} $ . Moving on , we have the environment update code \verb | <var:s> := <var:w3> ; | . This forwards the precondition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> ^ <nat:2> \land <var:w3> = <nat:4> * <var:u> ^ <nat:3> \} $ as the postcondition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> ^ <nat:2> \land <var:s> = <nat:4> * <var:u> ^ <nat:3> \} $ . This is shown using the assignment scheme defined in usual Hoare techniques . Advancing on , we have the environment update code assigning $ <var:s> + <var:w2> $ into $ <var:s>$ . This code advances the precondition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:w2> = <nat:7> * <var:u> ^ <nat:2> \land <var:s> = <nat:4> * <var:u> ^ <nat:3> \} $ into $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:s> = <nat:4> * <var:u> ^ <nat:3> + <nat:7> * <var:u> ^ <nat:2> \} $ . This is deduced by the assignment scheme from Hoare reasoning . Going forward , the line \verb | <var:s> := <var:s> + <var:w1> ; | . This forwards the condition $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:w1> = <nat:4> * <var:u> \land <var:s> = <nat:4> * <var:u> ^ <nat:3> + <nat:7> * <var:u> ^ <nat:2> \} $ into $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:s> = <nat:4> * <var:u> ^ <nat:3> + <nat:7> * <var:u> ^ <nat:2> + <nat:4> * <var:u> \} $ . Looking at the proceeding bit of code in our series of commands , we have the variable assignmet code letting $ <var:s> + <var:w0$ as $ <var:s>$ . This command redefines $ \{ <var:C> = <var:u> \land <var:w0> = <nat:1> \land <var:s> = <nat:4> * <var:u> ^ <nat:3> + <nat:7> * <var:u> ^ <nat:2> + <nat:4> * <var:u> \} $ toward $ \{ <var:C> = <var:u> \land <var:s> = <nat:4> * <var:u> ^ <nat:3> + <nat:7> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> \} $ . This is shown to be logically sound through the assignment scheme of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:C> = <var:u> }} <var:w0> := <nat:1> ; <var:w1> := <nat:4> ; <var:w1> := <var:w1> * <var:C> ; <var:w2> := <nat:7> ; <var:w2> := <var:w2> * <var:C> ; <var:w2> := <var:w2> * <var:C> ; <var:w3> := <nat:4> ; <var:w3> := <var:w3> * <var:C> ; <var:w3> := <var:w3> * <var:C> ; <var:w3> := <var:w3> * <var:C> ; <var:s> := <var:w3> ; <var:s> := <var:s> + <var:w2> ; <var:s> := <var:s> + <var:w1> ; <var:s> := <var:s> + <var:w0> {{ <var:s> = <nat:4> * <var:u> ^ <nat:3> + <nat:7> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:w0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:u> /\ <var:w2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:u> /\ <var:w2> = <nat:7> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:u> /\ <var:w2> = <nat:7> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:u> /\ <var:w2> = <nat:7> * <var:u> ^ <nat:2> /\ <var:w3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:u> /\ <var:w2> = <nat:7> * <var:u> ^ <nat:2> /\ <var:w3> = <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:u> /\ <var:w2> = <nat:7> * <var:u> ^ <nat:2> /\ <var:w3> = <nat:4> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:u> /\ <var:w2> = <nat:7> * <var:u> ^ <nat:2> /\ <var:w3> = <nat:4> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:u> /\ <var:w2> = <nat:7> * <var:u> ^ <nat:2> /\ <var:s> = <nat:4> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:w0> = <nat:1> /\ <var:w1> = <nat:4> * <var:u> /\ <var:s> = <nat:4> * <var:u> ^ <nat:3> + <nat:7> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:w0> = <nat:1> /\ <var:s> = <nat:4> * <var:u> ^ <nat:3> + <nat:7> * <var:u> ^ <nat:2> + <nat:4> * <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:u> /\ <var:s> = <nat:4> * <var:u> ^ <nat:3> + <nat:7> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 