\begin{document} \begin{definition} Define a set of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:4> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:L> ; <var:G2> := <nat:2> ; <var:G2> := <var:G2> * <var:L> ; <var:G2> := <var:G2> * <var:L> ; <var:i> := <var:G2> ; <var:i> := <var:i> + <var:G1> ; <var:i> := <var:i> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> . Allow that we have $ <var:L> = <var:y> $ ahead of executing our set of instructions it must be that $ <var:i> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> $ when series of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:L> = <var:y> \} \\ <var:G0> := <nat:4> ; \\ \{ <var:L> = <var:y> \land <var:G0> = <nat:4> \} \\ <var:G1> := <nat:4> ; \\ \{ <var:L> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \} \\ <var:G1> := <var:G1> * <var:L> ; \\ \{ <var:L> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \cdot <var:y> \} \\ <var:G2> := <nat:2> ; \\ \{ <var:L> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \cdot <var:y> \land <var:G2> = <nat:2> \} \\ <var:G2> := <var:G2> * <var:L> ; \\ \{ <var:L> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \cdot <var:y> \land <var:G2> = <nat:2> \cdot <var:y> \} \\ <var:G2> := <var:G2> * <var:L> ; \\ \{ <var:L> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \cdot <var:y> \land <var:G2> = <nat:2> \cdot <var:y> ^ <nat:2> \} \\ <var:i> := <var:G2> ; \\ \{ <var:L> = <var:y> \land <var:G0> = <nat:4> \land <var:G1> = <nat:4> \cdot <var:y> \land <var:i> = <nat:2> \cdot <var:y> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:G1> ; \\ \{ <var:L> = <var:y> \land <var:G0> = <nat:4> \land <var:i> = <nat:2> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> \} \\ <var:i> := <var:i> + <var:G0> \\ \{ <var:L> = <var:y> \land <var:i> = <nat:2> \cdot <var:y> ^ <nat:2> + <nat:4> \cdot <var:y> + <nat:4> \} \end{eqnarray} Utilizing Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <def:poly> := <var:G0> := <nat:4> ; <var:G1> := <nat:4> ; <var:G1> := <var:G1> * <var:L> ; <var:G2> := <nat:2> ; <var:G2> := <var:G2> * <var:L> ; <var:G2> := <var:G2> * <var:L> ; <var:i> := <var:G2> ; <var:i> := <var:i> + <var:G1> ; <var:i> := <var:i> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:L> = <var:y> }} <def:poly> {{ <var:i> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:G0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:4> * <var:y> /\ <var:G2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:4> * <var:y> /\ <var:G2> = <nat:2> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:4> * <var:y> /\ <var:G2> = <nat:2> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:G0> = <nat:4> /\ <var:G1> = <nat:4> * <var:y> /\ <var:i> = <nat:2> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:G0> = <nat:4> /\ <var:i> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:i> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> * <var:y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 