\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:R0> := <nat:8> ; <var:R1> := <nat:6> ; <var:R1> := <var:R1> * <var:A> ; <var:s> := <var:R1> ; <var:s> := <var:s> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:A> = <var:D> $ before executing the list of instructions then $ <var:s> = <nat:6> \times <var:D> + <nat:8> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic yields : \begin{eqnarray} \{ <var:A> = <var:D> \} \\ <var:R0> := <nat:8> ; \\ \{ <var:A> = <var:D> \land <var:R0> = <nat:8> \} \\ <var:R1> := <nat:6> ; \\ \{ <var:A> = <var:D> \land <var:R0> = <nat:8> \land <var:R1> = <nat:6> \} \\ <var:R1> := <var:R1> * <var:A> ; \\ \{ <var:A> = <var:D> \land <var:R0> = <nat:8> \land <var:R1> = <nat:6> \times <var:D> \} \\ <var:s> := <var:R1> ; \\ \{ <var:A> = <var:D> \land <var:R0> = <nat:8> \land <var:s> = <nat:6> \times <var:D> \} \\ <var:s> := <var:s> + <var:R0> \\ \{ <var:A> = <var:D> \land <var:s> = <nat:6> \times <var:D> + <nat:8> \} \end{eqnarray} As a result , the list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <def:poly> := <var:R0> := <nat:8> ; <var:R1> := <nat:6> ; <var:R1> := <var:R1> * <var:A> ; <var:s> := <var:R1> ; <var:s> := <var:s> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:A> = <var:D> }} <def:poly> {{ <var:s> = <nat:6> * <var:D> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:D> /\ <var:R0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:D> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:D> /\ <var:R0> = <nat:8> /\ <var:R1> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:D> /\ <var:R0> = <nat:8> /\ <var:s> = <nat:6> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:D> /\ <var:s> = <nat:6> * <var:D> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 