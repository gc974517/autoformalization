\begin{document} \begin{theorem} We define the following series of commands such that \begin{verbatim} <var:h> := <nat:4> ; <var:h> := <nat:1> + <var:h> * <var:e> ; <var:h> := <nat:3> + <var:h> * <var:e> ; <var:h> := <var:h> * <var:e> ; <var:h> := <var:h> * <var:e> ; <var:h> := <nat:2> + <var:h> * <var:e> ; <var:h> := <var:h> * <var:e> ; <var:h> := <var:h> * <var:e> ; <var:h> := <var:h> * <var:e> ; <var:h> := <nat:1> + <var:h> * <var:e> ; <var:h> := <nat:3> + <var:h> * <var:e> \end{verbatim} Allowing ( given any positive integers $ <var:H> $ ) it to hold that $ <var:e> = <var:H> $ prior to the execution of this set of instructions , it must be that we have $ <var:h> = <nat:4> \cdot <var:H> ^ <nat:10> + <nat:1> \cdot <var:H> ^ <nat:9> + <nat:3> \cdot <var:H> ^ <nat:8> + <nat:2> \cdot <var:H> ^ <nat:5> + <nat:1> \cdot <var:H> + <nat:3> $ when program has finished executing . \end{theorem} \begin{proof} The way to prove correctness for this segment of code is given through typical Hoare techniques . Further , the variable assignmet command \verb | <var:h> := <nat:4> ; | . This takes the precondition $ \{ <var:e> = <var:H> \} $ into the postcondition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> \} $ . This is sound by the assignment inference rule found in Hoare reasoning . Stepping through , we have the assignment line letting $ <nat:1> + <var:h> * <var:e> $ as $ <var:h>$ . This statement moves the precondition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> \} $ to $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> + <nat:1> \} $ . This is ensured with the assignment scheme defined in typical Hoare techniques . Shifting focus toward the next command found in the set of instructions , we see the variable binding command binding $ <nat:3> + <var:h> * <var:e> $ into $ <var:h>$ . This redefines $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> + <nat:1> \} $ toward the condition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:3> \} $ . This is shown to be logically sound by the assignment law given in usual Hoare techniques . Jumping to the proceeding line of code in our code , we see the binding code \verb | <var:h> := <var:h> * <var:e> ; | . This statement forwards the precondition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:3> \} $ into the postcondition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + \} $ . This is shown through the assignment inference rule defined by usual Hoare reasoning . Keeping momentum , we have the variable assignmet line defining $ <var:h> * <var:e> $ to $ <var:h>$ . This command redefines the precondition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + \} $ into the condition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + \} $ . Immediately following , we have the statement yielding $ <nat:2> + <var:h> * <var:e> $ into $ <var:h>$ . This statement redefines the precondition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + \} $ into $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> \} $ . This is known to be sound using the assignment law given by Hoare techniques . Paying attention to the following bit of code in the code segment , we have the environment update code defining $ <var:h> * <var:e> $ as $ <var:h>$ . This redefines the precondition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> \} $ as the condition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:2> * <var:H> + \} $ . This is deduced using the assignment inference rule given by standard Hoare techniques . Taking another step toward the subsequent line seen in the code segment , we see the binding command \verb | <var:h> := <var:h> * <var:e> ; | . This line transfers the precondition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:2> * <var:H> + \} $ into the condition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:2> + \} $ . This is ensured with the assignment scheme defined in standard Hoare logic . Stepping forward , we see the variable assignmet code \verb | <var:h> := <var:h> * <var:e> ; | . This line transfers $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:2> + \} $ as the condition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:3> + \} $ . Further , we see the variable binding statement \verb | <var:h> := <nat:1> + <var:h> * <var:e> ; | . This takes the condition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:3> + \} $ into $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:9> + <nat:1> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> \} $ . Considering the next piece of code found in our set of instructions , the environment update code \verb | <var:h> := <nat:3> + <var:h> * <var:e> | . This line moves the precondition $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:9> + <nat:1> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> \} $ to $ \{ <var:e> = <var:H> \land <var:h> = <nat:4> * <var:H> ^ <nat:10> + <nat:1> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> + <nat:3> \} $ . This is rigorously given using the assignment law given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:e> = <var:H> }} <var:h> := <nat:4> ; <var:h> := <nat:1> + <var:h> * <var:e> ; <var:h> := <nat:3> + <var:h> * <var:e> ; <var:h> := <var:h> * <var:e> ; <var:h> := <var:h> * <var:e> ; <var:h> := <nat:2> + <var:h> * <var:e> ; <var:h> := <var:h> * <var:e> ; <var:h> := <var:h> * <var:e> ; <var:h> := <var:h> * <var:e> ; <var:h> := <nat:1> + <var:h> * <var:e> ; <var:h> := <nat:3> + <var:h> * <var:e> {{ <var:h> = <nat:4> * <var:H> ^ <nat:10> + <nat:1> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:h> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:h> = <nat:4> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:h> = <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:h> = <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:h> = <nat:4> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:h> = <nat:4> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:h> = <nat:4> * <var:H> ^ <nat:6> + <nat:1> * <var:H> ^ <nat:5> + <nat:3> * <var:H> ^ <nat:4> + <nat:2> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:h> = <nat:4> * <var:H> ^ <nat:7> + <nat:1> * <var:H> ^ <nat:6> + <nat:3> * <var:H> ^ <nat:5> + <nat:2> * <var:H> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:h> = <nat:4> * <var:H> ^ <nat:8> + <nat:1> * <var:H> ^ <nat:7> + <nat:3> * <var:H> ^ <nat:6> + <nat:2> * <var:H> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:h> = <nat:4> * <var:H> ^ <nat:9> + <nat:1> * <var:H> ^ <nat:8> + <nat:3> * <var:H> ^ <nat:7> + <nat:2> * <var:H> ^ <nat:4> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:H> /\ <var:h> = <nat:4> * <var:H> ^ <nat:10> + <nat:1> * <var:H> ^ <nat:9> + <nat:3> * <var:H> ^ <nat:8> + <nat:2> * <var:H> ^ <nat:5> + <nat:1> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 