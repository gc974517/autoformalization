\begin{document} \begin{theorem} Take the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:m0> := <nat:3> ; <var:m1> := <nat:8> ; <var:m1> := <var:m1> * <var:f> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:f> ; <var:m2> := <var:m2> * <var:f> ; <var:F> := <var:m2> ; <var:F> := <var:F> + <var:m1> ; <var:F> := <var:F> + <var:m0> \end{verbatim} Assume that we have $ <var:f> = <var:x> $ prior to evaluating our set of commands , it must be that we have $ <var:F> = <nat:2> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:3> $ when list of instructions has exited . \end{theorem} \begin{proof} Proving correctness for our series of commands is shown through usual Hoare reasoning . Moving forward to the proceeding statement seen in our series of commands , we have the code defining $ <nat:3> $ into $ <var:m0>$ . This line forwards the precondition $ \{ <var:f> = <var:x> \} $ as the postcondition $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \} $ . Advancing on , the variable update line letting $ <nat:8> $ as $ <var:m1>$ . This line forwards $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \} $ toward the condition $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:m1> = <nat:8> \} $ . This is rigorously given by the assignment scheme given in usual Hoare logic . Considering the subsequent step found in the code segment , we have the command binding $ <var:m1> * <var:f> $ into $ <var:m1>$ . This line transfers $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:m1> = <nat:8> \} $ as $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:m1> = <nat:8> \times <var:x> \} $ . Advancing , we see the variable update line yielding $ <nat:2> $ into $ <var:m2>$ . This takes the condition $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:m1> = <nat:8> \times <var:x> \} $ into the postcondition $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:m1> = <nat:8> \times <var:x> \land <var:m2> = <nat:2> \} $ . This is guaranteed with the assignment rule from standard Hoare techniques . Moving on to the next step , the binding line yielding $ <var:m2> * <var:f> $ toward $ <var:m2>$ . This line forwards the precondition $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:m1> = <nat:8> \times <var:x> \land <var:m2> = <nat:2> \} $ toward the condition $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:m1> = <nat:8> \times <var:x> \land <var:m2> = <nat:2> \times <var:x> \} $ . Next , we have the assignment code \verb | <var:m2> := <var:m2> * <var:f> ; | . This moves the condition $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:m1> = <nat:8> \times <var:x> \land <var:m2> = <nat:2> \times <var:x> \} $ to the postcondition $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:m1> = <nat:8> \times <var:x> \land <var:m2> = <nat:2> \times <var:x> ^ <nat:2> \} $ . This is known to be sound using the assignment scheme in typical Hoare techniques . Taking a look at the next step in the set of commands , the environment update statement \verb | <var:F> := <var:m2> ; | . This statement transfers the precondition $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:m1> = <nat:8> \times <var:x> \land <var:m2> = <nat:2> \times <var:x> ^ <nat:2> \} $ as the condition $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:m1> = <nat:8> \times <var:x> \land <var:F> = <nat:2> \times <var:x> ^ <nat:2> \} $ . Looking at the proceeding step seen in the list of commands , we have the variable binding line \verb | <var:F> := <var:F> + <var:m1> ; | . This line transfers the condition $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:m1> = <nat:8> \times <var:x> \land <var:F> = <nat:2> \times <var:x> ^ <nat:2> \} $ to $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:F> = <nat:2> \times <var:x> ^ <nat:2> + <nat:8> \times <var:x> \} $ . This is shown to be logically sound by the assignment inference rule defined in usual Hoare logic . Further , we see the variable binding statement \verb | <var:F> := <var:F> + <var:m0> | . This takes $ \{ <var:f> = <var:x> \land <var:m0> = <nat:3> \land <var:F> = <nat:2> \times <var:x> ^ <nat:2> + <nat:8> \times <var:x> \} $ as the condition $ \{ <var:f> = <var:x> \land <var:F> = <nat:2> \times <var:x> ^ <nat:2> + <nat:8> \times <var:x> + <nat:3> \} $ . This is rigorously given using the assignment scheme from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:f> = <var:x> }} <var:m0> := <nat:3> ; <var:m1> := <nat:8> ; <var:m1> := <var:m1> * <var:f> ; <var:m2> := <nat:2> ; <var:m2> := <var:m2> * <var:f> ; <var:m2> := <var:m2> * <var:f> ; <var:F> := <var:m2> ; <var:F> := <var:F> + <var:m1> ; <var:F> := <var:F> + <var:m0> {{ <var:F> = <nat:2> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:8> * <var:x> /\ <var:m2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:8> * <var:x> /\ <var:m2> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:8> * <var:x> /\ <var:m2> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:m0> = <nat:3> /\ <var:m1> = <nat:8> * <var:x> /\ <var:F> = <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:m0> = <nat:3> /\ <var:F> = <nat:2> * <var:x> ^ <nat:2> + <nat:8> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:x> /\ <var:F> = <nat:2> * <var:x> ^ <nat:2> + <nat:8> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 