\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:7> ; <var:y> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:O> = <var:R> $ for any integers $ <var:R> $ prior to interpreting this code segment it must be that we have $ <var:y> = <nat:7> $ when series of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:O> = <var:R> \} \\ <var:N0> := <nat:7> ; \\ \{ <var:O> = <var:R> \land <var:N0> = <nat:7> \} \\ <var:y> := <var:N0> \\ \{ <var:O> = <var:R> \land <var:y> = <nat:7> \} \end{eqnarray} Utilizing typical Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:7> ; <var:y> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:O> = <var:R> }} <def:poly> {{ <var:y> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:y> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 