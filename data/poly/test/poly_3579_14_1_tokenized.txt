\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M1> := <var:g> ; <var:M2> := <var:M1> * <var:g> ; <var:M3> := <var:M2> * <var:g> ; <var:M4> := <var:M3> * <var:g> ; <var:M0> := <nat:6> ; <var:M1> := <var:M1> * <nat:7> ; <var:M2> := <var:M2> * <nat:2> ; <var:M3> := <var:M3> * <nat:1> ; <var:M4> := <var:M4> * <nat:8> ; <var:V> := <var:M4> <var:V> := <var:V> + <var:M3> <var:V> := <var:V> + <var:M2> <var:V> := <var:V> + <var:M1> <var:V> := <var:V> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:g> = <var:t> $ ( given any positive integer coefficients $ <var:t> $ ) prior to interpreting the list of instructions , then we see $ <var:V> = <nat:8> \times <var:t> ^ <nat:4> + <nat:1> \times <var:t> ^ <nat:3> + <nat:2> \times <var:t> ^ <nat:2> + <nat:7> \times <var:t> + <nat:6> $ once set of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:t> \} \\ <var:M1> := <var:g> ; \\ \{ <var:g> = <var:t> \land <var:M1> = <var:t> \} \\ <var:M2> := <var:M1> * <var:g> ; \\ \{ <var:g> = <var:t> \land <var:M1> = <var:t> \land <var:M2> = <var:t> ^ <nat:2> \} \\ <var:M3> := <var:M2> * <var:g> ; \\ \{ <var:g> = <var:t> \land <var:M1> = <var:t> \land <var:M2> = <var:t> ^ <nat:2> \land <var:M3> = <var:t> ^ <nat:3> \} \\ <var:M4> := <var:M3> * <var:g> ; \\ \{ <var:g> = <var:t> \land <var:M1> = <var:t> \land <var:M2> = <var:t> ^ <nat:2> \land <var:M3> = <var:t> ^ <nat:3> \land <var:M4> = <var:t> ^ <nat:4> \} \\ <var:M0> := <nat:6> ; \\ \{ <var:g> = <var:t> \land <var:M1> = <var:t> \land <var:M2> = <var:t> ^ <nat:2> \land <var:M3> = <var:t> ^ <nat:3> \land <var:M4> = <var:t> ^ <nat:4> \land <var:M0> = <nat:6> \} \\ <var:M1> := <var:M1> * <nat:7> ; \\ \{ <var:g> = <var:t> \land <var:M1> = <nat:7> \cdot <var:t> \land <var:M2> = <var:t> ^ <nat:2> \land <var:M3> = <var:t> ^ <nat:3> \land <var:M4> = <var:t> ^ <nat:4> \land <var:M0> = <nat:6> \} \\ <var:M2> := <var:M2> * <nat:2> ; \\ \{ <var:g> = <var:t> \land <var:M1> = <nat:7> \cdot <var:t> \land <var:M2> = <nat:2> \cdot <var:t> ^ <nat:2> \land <var:M3> = <var:t> ^ <nat:3> \land <var:M4> = <var:t> ^ <nat:4> \land <var:M0> = <nat:6> \} \\ <var:M3> := <var:M3> * <nat:1> ; \\ \{ <var:g> = <var:t> \land <var:M1> = <nat:7> \cdot <var:t> \land <var:M2> = <nat:2> \cdot <var:t> ^ <nat:2> \land <var:M3> = <nat:1> \cdot <var:t> ^ <nat:3> \land <var:M4> = <var:t> ^ <nat:4> \land <var:M0> = <nat:6> \} \\ <var:M4> := <var:M4> * <nat:8> ; \\ \{ <var:g> = <var:t> \land <var:M1> = <nat:7> \cdot <var:t> \land <var:M2> = <nat:2> \cdot <var:t> ^ <nat:2> \land <var:M3> = <nat:1> \cdot <var:t> ^ <nat:3> \land <var:M4> = <nat:8> \cdot <var:t> ^ <nat:4> \land <var:M0> = <nat:6> \} \\ <var:V> := <var:M4> \\ \{ <var:g> = <var:t> \land <var:M1> = <nat:7> \cdot <var:t> \land <var:M2> = <nat:2> \cdot <var:t> ^ <nat:2> \land <var:M3> = <nat:1> \cdot <var:t> ^ <nat:3> \land <var:M0> = <nat:6> \land <var:V> = <nat:8> \cdot <var:t> ^ <nat:4> \} \\ <var:V> := <var:V> + <var:M3> \\ \{ <var:g> = <var:t> \land <var:M1> = <nat:7> \cdot <var:t> \land <var:M2> = <nat:2> \cdot <var:t> ^ <nat:2> \land <var:M0> = <nat:6> \land <var:V> = <nat:8> \cdot <var:t> ^ <nat:4> + <nat:1> \cdot <var:t> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:M2> \\ \{ <var:g> = <var:t> \land <var:M1> = <nat:7> \cdot <var:t> \land <var:M0> = <nat:6> \land <var:V> = <nat:8> \cdot <var:t> ^ <nat:4> + <nat:1> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:M1> \\ \{ <var:g> = <var:t> \land <var:M0> = <nat:6> \land <var:V> = <nat:8> \cdot <var:t> ^ <nat:4> + <nat:1> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:7> \cdot <var:t> \} \\ <var:V> := <var:V> + <var:M0> \\ \{ <var:g> = <var:t> \land <var:V> = <nat:8> \cdot <var:t> ^ <nat:4> + <nat:1> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:7> \cdot <var:t> + <nat:6> \} \end{eqnarray} Applying usual Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <var:M4> : string := " <var:M4> " . Definition <def:poly> := <var:M1> := <var:g> ; <var:M2> := <var:M1> * <var:g> ; <var:M3> := <var:M2> * <var:g> ; <var:M4> := <var:M3> * <var:g> ; <var:M0> := <nat:6> ; <var:M1> := <var:M1> * <nat:7> ; <var:M2> := <var:M2> * <nat:2> ; <var:M3> := <var:M3> * <nat:1> ; <var:M4> := <var:M4> * <nat:8> ; <var:V> := <var:M4> <var:V> := <var:V> + <var:M3> <var:V> := <var:V> + <var:M2> <var:V> := <var:V> + <var:M1> <var:V> := <var:V> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:g> = <var:t> }} <def:poly> {{ <var:V> = <nat:8> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:M1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:M1> = <var:t> /\ <var:M2> = <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:M1> = <var:t> /\ <var:M2> = <var:t> ^ <nat:2> /\ <var:M3> = <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:M1> = <var:t> /\ <var:M2> = <var:t> ^ <nat:2> /\ <var:M3> = <var:t> ^ <nat:3> /\ <var:M4> = <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:M1> = <var:t> /\ <var:M2> = <var:t> ^ <nat:2> /\ <var:M3> = <var:t> ^ <nat:3> /\ <var:M4> = <var:t> ^ <nat:4> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:M1> = <nat:7> * <var:t> /\ <var:M2> = <var:t> ^ <nat:2> /\ <var:M3> = <var:t> ^ <nat:3> /\ <var:M4> = <var:t> ^ <nat:4> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:M1> = <nat:7> * <var:t> /\ <var:M2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:M3> = <var:t> ^ <nat:3> /\ <var:M4> = <var:t> ^ <nat:4> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:M1> = <nat:7> * <var:t> /\ <var:M2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:M3> = <nat:1> * <var:t> ^ <nat:3> /\ <var:M4> = <var:t> ^ <nat:4> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:M1> = <nat:7> * <var:t> /\ <var:M2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:M3> = <nat:1> * <var:t> ^ <nat:3> /\ <var:M4> = <nat:8> * <var:t> ^ <nat:4> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:M1> = <nat:7> * <var:t> /\ <var:M2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:M3> = <nat:1> * <var:t> ^ <nat:3> /\ <var:M0> = <nat:6> /\ <var:V> = <nat:8> * <var:t> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:M1> = <nat:7> * <var:t> /\ <var:M2> = <nat:2> * <var:t> ^ <nat:2> /\ <var:M0> = <nat:6> /\ <var:V> = <nat:8> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:M1> = <nat:7> * <var:t> /\ <var:M0> = <nat:6> /\ <var:V> = <nat:8> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:M0> = <nat:6> /\ <var:V> = <nat:8> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:V> = <nat:8> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:7> * <var:t> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 