\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:6> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:Y> ; <var:k2> := <nat:9> ; <var:k2> := <var:k2> * <var:Y> ; <var:k2> := <var:k2> * <var:Y> ; <var:k3> := <nat:7> ; <var:k3> := <var:k3> * <var:Y> ; <var:k3> := <var:k3> * <var:Y> ; <var:k3> := <var:k3> * <var:Y> ; <var:U> := <var:k3> ; <var:U> := <var:U> + <var:k2> ; <var:U> := <var:U> + <var:k1> ; <var:U> := <var:U> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:Y> = <var:m> $ ( given all positive integers $ <var:m> $ ) ahead of evaluating this program , then $ <var:U> = <nat:7> \cdot <var:m> ^ <nat:3> + <nat:9> \cdot <var:m> ^ <nat:2> + <nat:2> \cdot <var:m> + <nat:6> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:m> \} \\ <var:k0> := <nat:6> ; \\ \{ <var:Y> = <var:m> \land <var:k0> = <nat:6> \} \\ <var:k1> := <nat:2> ; \\ \{ <var:Y> = <var:m> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \} \\ <var:k1> := <var:k1> * <var:Y> ; \\ \{ <var:Y> = <var:m> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \times <var:m> \} \\ <var:k2> := <nat:9> ; \\ \{ <var:Y> = <var:m> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \times <var:m> \land <var:k2> = <nat:9> \} \\ <var:k2> := <var:k2> * <var:Y> ; \\ \{ <var:Y> = <var:m> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \times <var:m> \land <var:k2> = <nat:9> \times <var:m> \} \\ <var:k2> := <var:k2> * <var:Y> ; \\ \{ <var:Y> = <var:m> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \times <var:m> \land <var:k2> = <nat:9> \times <var:m> ^ <nat:2> \} \\ <var:k3> := <nat:7> ; \\ \{ <var:Y> = <var:m> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \times <var:m> \land <var:k2> = <nat:9> \times <var:m> ^ <nat:2> \land <var:k3> = <nat:7> \} \\ <var:k3> := <var:k3> * <var:Y> ; \\ \{ <var:Y> = <var:m> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \times <var:m> \land <var:k2> = <nat:9> \times <var:m> ^ <nat:2> \land <var:k3> = <nat:7> \times <var:m> \} \\ <var:k3> := <var:k3> * <var:Y> ; \\ \{ <var:Y> = <var:m> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \times <var:m> \land <var:k2> = <nat:9> \times <var:m> ^ <nat:2> \land <var:k3> = <nat:7> \times <var:m> ^ <nat:2> \} \\ <var:k3> := <var:k3> * <var:Y> ; \\ \{ <var:Y> = <var:m> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \times <var:m> \land <var:k2> = <nat:9> \times <var:m> ^ <nat:2> \land <var:k3> = <nat:7> \times <var:m> ^ <nat:3> \} \\ <var:U> := <var:k3> ; \\ \{ <var:Y> = <var:m> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \times <var:m> \land <var:k2> = <nat:9> \times <var:m> ^ <nat:2> \land <var:U> = <nat:7> \times <var:m> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:k2> ; \\ \{ <var:Y> = <var:m> \land <var:k0> = <nat:6> \land <var:k1> = <nat:2> \times <var:m> \land <var:U> = <nat:7> \times <var:m> ^ <nat:3> + <nat:9> \times <var:m> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:k1> ; \\ \{ <var:Y> = <var:m> \land <var:k0> = <nat:6> \land <var:U> = <nat:7> \times <var:m> ^ <nat:3> + <nat:9> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> \} \\ <var:U> := <var:U> + <var:k0> \\ \{ <var:Y> = <var:m> \land <var:U> = <nat:7> \times <var:m> ^ <nat:3> + <nat:9> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:6> \} \end{eqnarray} Applying Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <def:poly> := <var:k0> := <nat:6> ; <var:k1> := <nat:2> ; <var:k1> := <var:k1> * <var:Y> ; <var:k2> := <nat:9> ; <var:k2> := <var:k2> * <var:Y> ; <var:k2> := <var:k2> * <var:Y> ; <var:k3> := <nat:7> ; <var:k3> := <var:k3> * <var:Y> ; <var:k3> := <var:k3> * <var:Y> ; <var:k3> := <var:k3> * <var:Y> ; <var:U> := <var:k3> ; <var:U> := <var:U> + <var:k2> ; <var:U> := <var:U> + <var:k1> ; <var:U> := <var:U> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:Y> = <var:m> }} <def:poly> {{ <var:U> = <nat:7> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> * <var:m> /\ <var:k2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> * <var:m> /\ <var:k2> = <nat:9> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> * <var:m> /\ <var:k2> = <nat:9> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> * <var:m> /\ <var:k2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:k3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> * <var:m> /\ <var:k2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:k3> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> * <var:m> /\ <var:k2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:k3> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> * <var:m> /\ <var:k2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:k3> = <nat:7> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> * <var:m> /\ <var:k2> = <nat:9> * <var:m> ^ <nat:2> /\ <var:U> = <nat:7> * <var:m> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:k0> = <nat:6> /\ <var:k1> = <nat:2> * <var:m> /\ <var:U> = <nat:7> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:k0> = <nat:6> /\ <var:U> = <nat:7> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:2> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:m> /\ <var:U> = <nat:7> * <var:m> ^ <nat:3> + <nat:9> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 