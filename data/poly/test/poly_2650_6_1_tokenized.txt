\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} : \begin{verbatim} <var:s1> := <var:f> ; <var:s2> := <var:s1> * <var:f> ; <var:s0> := <nat:2> ; <var:s2> := <var:s2> * <nat:4> ; <var:Q> := <var:s2> <var:Q> := <var:Q> + <var:s0> \end{verbatim} Assuming that we have $ <var:f> = <var:v> $ , given all whole numbers $ <var:v> $ , ahead of executing the set of commands it follows that we have $ <var:Q> = <nat:4> * <var:v> ^ <nat:2> + <nat:2> $ when code segment has exited . \end{theorem} \begin{proof} Arguing the correctness of the list of instructions is clear through this decorated code . \begin{eqnarray} \{ <var:f> = <var:v> \} \\ <var:s1> := <var:f> ; \\ \{ <var:f> = <var:v> \land <var:s1> = <var:v> \} \\ <var:s2> := <var:s1> * <var:f> ; \\ \{ <var:f> = <var:v> \land <var:s1> = <var:v> \land <var:s2> = <var:v> ^ <nat:2> \} \\ <var:s0> := <nat:2> ; \\ \{ <var:f> = <var:v> \land <var:s1> = <var:v> \land <var:s2> = <var:v> ^ <nat:2> \land <var:s0> = <nat:2> \} \\ <var:s2> := <var:s2> * <nat:4> ; \\ \{ <var:f> = <var:v> \land <var:s1> = <var:v> \land <var:s2> = <nat:4> * <var:v> ^ <nat:2> \land <var:s0> = <nat:2> \} \\ <var:Q> := <var:s2> \\ \{ <var:f> = <var:v> \land <var:s1> = <var:v> \land <var:s0> = <nat:2> \land <var:Q> = <nat:4> * <var:v> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:s0> \\ \{ <var:f> = <var:v> \land <var:Q> = <nat:4> * <var:v> ^ <nat:2> + <nat:2> \} \end{eqnarray} Applying standard Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:f> = <var:v> }} <var:s1> := <var:f> ; <var:s2> := <var:s1> * <var:f> ; <var:s0> := <nat:2> ; <var:s2> := <var:s2> * <nat:4> ; <var:Q> := <var:s2> <var:Q> := <var:Q> + <var:s0> {{ <var:Q> = <nat:4> * <var:v> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:s1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:s1> = <var:v> /\ <var:s2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:s1> = <var:v> /\ <var:s2> = <var:v> ^ <nat:2> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:s1> = <var:v> /\ <var:s2> = <nat:4> * <var:v> ^ <nat:2> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:s1> = <var:v> /\ <var:s0> = <nat:2> /\ <var:Q> = <nat:4> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:v> /\ <var:Q> = <nat:4> * <var:v> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 