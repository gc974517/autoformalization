\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:D1> := <var:A> ; <var:D2> := <var:D1> * <var:A> ; <var:D3> := <var:D2> * <var:A> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:9> ; <var:D2> := <var:D2> * <nat:1> ; <var:D3> := <var:D3> * <nat:1> ; <var:F> := <var:D3> <var:F> := <var:F> + <var:D2> <var:F> := <var:F> + <var:D1> <var:F> := <var:F> + <var:D0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> . Assuming that $ <var:A> = <var:n> $ ahead of the evaluation of the list of instructions it must be that $ <var:F> = <nat:1> \times <var:n> ^ <nat:3> + <nat:1> \times <var:n> ^ <nat:2> + <nat:9> \times <var:n> + <nat:4> $ . \end{theorem} \begin{proof} The argument for this program is given using standard Hoare reasoning . Paying attention to the subsequent statements seen in the set of instructions , \begin{verbatim} { <var:A> = <var:n> } <var:D1> := <var:A> { <var:A> = <var:n> \land <var:D1> = <var:n> } { <var:A> = <var:n> \land <var:D1> = <var:n> } <var:D2> := <var:D1> * <var:A> { <var:A> = <var:n> \land <var:D1> = <var:n> \land <var:D2> = <var:n> ^ <nat:2> } { <var:A> = <var:n> \land <var:D1> = <var:n> \land <var:D2> = <var:n> ^ <nat:2> } <var:D3> := <var:D2> * <var:A> { <var:A> = <var:n> \land <var:D1> = <var:n> \land <var:D2> = <var:n> ^ <nat:2> \land <var:D3> = <var:n> ^ <nat:3> } { <var:A> = <var:n> \land <var:D1> = <var:n> \land <var:D2> = <var:n> ^ <nat:2> \land <var:D3> = <var:n> ^ <nat:3> } <var:D0> := <nat:4> { <var:A> = <var:n> \land <var:D1> = <var:n> \land <var:D2> = <var:n> ^ <nat:2> \land <var:D3> = <var:n> ^ <nat:3> \land <var:D0> = <nat:4> } { <var:A> = <var:n> \land <var:D1> = <var:n> \land <var:D2> = <var:n> ^ <nat:2> \land <var:D3> = <var:n> ^ <nat:3> \land <var:D0> = <nat:4> } <var:D1> := <var:D1> * <nat:9> { <var:A> = <var:n> \land <var:D1> = <nat:9> * <var:n> \land <var:D2> = <var:n> ^ <nat:2> \land <var:D3> = <var:n> ^ <nat:3> \land <var:D0> = <nat:4> } { <var:A> = <var:n> \land <var:D1> = <nat:9> * <var:n> \land <var:D2> = <var:n> ^ <nat:2> \land <var:D3> = <var:n> ^ <nat:3> \land <var:D0> = <nat:4> } <var:D2> := <var:D2> * <nat:1> { <var:A> = <var:n> \land <var:D1> = <nat:9> * <var:n> \land <var:D2> = <nat:1> * <var:n> ^ <nat:2> \land <var:D3> = <var:n> ^ <nat:3> \land <var:D0> = <nat:4> } { <var:A> = <var:n> \land <var:D1> = <nat:9> * <var:n> \land <var:D2> = <nat:1> * <var:n> ^ <nat:2> \land <var:D3> = <var:n> ^ <nat:3> \land <var:D0> = <nat:4> } <var:D3> := <var:D3> * <nat:1> { <var:A> = <var:n> \land <var:D1> = <nat:9> * <var:n> \land <var:D2> = <nat:1> * <var:n> ^ <nat:2> \land <var:D3> = <nat:1> * <var:n> ^ <nat:3> \land <var:D0> = <nat:4> } { <var:A> = <var:n> \land <var:D1> = <nat:9> * <var:n> \land <var:D2> = <nat:1> * <var:n> ^ <nat:2> \land <var:D3> = <nat:1> * <var:n> ^ <nat:3> \land <var:D0> = <nat:4> } <var:F> := <var:D3{ <var:A> = <var:n> \land <var:D1> = <nat:9> * <var:n> \land <var:D2> = <nat:1> * <var:n> ^ <nat:2> \land <var:D0> = <nat:4> \land <var:F> = <nat:1> * <var:n> ^ <nat:3> } \end{verbatim} Moving forward to the upcoming pieces of code seen in the segment of code , we see \begin{verbatim} { <var:A> = <var:n> } <var:D1> := <var:A> { <var:A> = <var:n> \land <var:D1> = <var:n> } { <var:A> = <var:n> \land <var:D1> = <var:n> } <var:D2> := <var:D1> * <var:A> { <var:A> = <var:n> \land <var:D1> = <var:n> \land <var:D2> = <var:n> ^ <nat:2> } { <var:A> = <var:n> \land <var:D1> = <var:n> \land <var:D2> = <var:n> ^ <nat:2> } <var:D3> := <var:D2> * <var:A> { <var:A> = <var:n> \land <var:D1> = <var:n> \land <var:D2> = <var:n> ^ <nat:2> \land <var:D3> = <var:n> ^ <nat:3> } \end{verbatim} This is guaranteed with the variable update law given by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Definition <def:poly> := <var:D1> := <var:A> ; <var:D2> := <var:D1> * <var:A> ; <var:D3> := <var:D2> * <var:A> ; <var:D0> := <nat:4> ; <var:D1> := <var:D1> * <nat:9> ; <var:D2> := <var:D2> * <nat:1> ; <var:D3> := <var:D3> * <nat:1> ; <var:F> := <var:D3> <var:F> := <var:F> + <var:D2> <var:F> := <var:F> + <var:D1> <var:F> := <var:F> + <var:D0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:A> = <var:n> }} <def:poly> {{ <var:F> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:D1> = <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:D1> = <var:n> /\ <var:D2> = <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:D1> = <var:n> /\ <var:D2> = <var:n> ^ <nat:2> /\ <var:D3> = <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:D1> = <var:n> /\ <var:D2> = <var:n> ^ <nat:2> /\ <var:D3> = <var:n> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:D1> = <nat:9> * <var:n> /\ <var:D2> = <var:n> ^ <nat:2> /\ <var:D3> = <var:n> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:D1> = <nat:9> * <var:n> /\ <var:D2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:D3> = <var:n> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:D1> = <nat:9> * <var:n> /\ <var:D2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:D3> = <nat:1> * <var:n> ^ <nat:3> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:D1> = <nat:9> * <var:n> /\ <var:D2> = <nat:1> * <var:n> ^ <nat:2> /\ <var:D0> = <nat:4> /\ <var:F> = <nat:1> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:D1> = <nat:9> * <var:n> /\ <var:D0> = <nat:4> /\ <var:F> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:D0> = <nat:4> /\ <var:F> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:9> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:n> /\ <var:F> = <nat:1> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:9> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 