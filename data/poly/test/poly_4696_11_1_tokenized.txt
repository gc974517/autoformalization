\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:F1> := <var:h> ; <var:F2> := <var:F1> * <var:h> ; <var:F3> := <var:F2> * <var:h> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:4> ; <var:F2> := <var:F2> * <nat:4> ; <var:F3> := <var:F3> * <nat:2> ; <var:X> := <var:F3> <var:X> := <var:X> + <var:F2> <var:X> := <var:X> + <var:F1> <var:X> := <var:X> + <var:F0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Assuming it to be that $ <var:h> = <var:J> $ , for all positive numbers $ <var:J> $ , prior to executing the list of commands it follows that $ <var:X> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:1> $ . \end{theorem} \begin{proof} Notice the below decorated series of commands . \begin{eqnarray} \{ <var:h> = <var:J> \} \\ <var:F1> := <var:h> ; \\ \{ <var:h> = <var:J> \land <var:F1> = <var:J> \} \\ <var:F2> := <var:F1> * <var:h> ; \\ \{ <var:h> = <var:J> \land <var:F1> = <var:J> \land <var:F2> = <var:J> ^ <nat:2> \} \\ <var:F3> := <var:F2> * <var:h> ; \\ \{ <var:h> = <var:J> \land <var:F1> = <var:J> \land <var:F2> = <var:J> ^ <nat:2> \land <var:F3> = <var:J> ^ <nat:3> \} \\ <var:F0> := <nat:1> ; \\ \{ <var:h> = <var:J> \land <var:F1> = <var:J> \land <var:F2> = <var:J> ^ <nat:2> \land <var:F3> = <var:J> ^ <nat:3> \land <var:F0> = <nat:1> \} \\ <var:F1> := <var:F1> * <nat:4> ; \\ \{ <var:h> = <var:J> \land <var:F1> = <nat:4> \cdot <var:J> \land <var:F2> = <var:J> ^ <nat:2> \land <var:F3> = <var:J> ^ <nat:3> \land <var:F0> = <nat:1> \} \\ <var:F2> := <var:F2> * <nat:4> ; \\ \{ <var:h> = <var:J> \land <var:F1> = <nat:4> \cdot <var:J> \land <var:F2> = <nat:4> \cdot <var:J> ^ <nat:2> \land <var:F3> = <var:J> ^ <nat:3> \land <var:F0> = <nat:1> \} \\ <var:F3> := <var:F3> * <nat:2> ; \\ \{ <var:h> = <var:J> \land <var:F1> = <nat:4> \cdot <var:J> \land <var:F2> = <nat:4> \cdot <var:J> ^ <nat:2> \land <var:F3> = <nat:2> \cdot <var:J> ^ <nat:3> \land <var:F0> = <nat:1> \} \\ <var:X> := <var:F3> \\ \{ <var:h> = <var:J> \land <var:F1> = <nat:4> \cdot <var:J> \land <var:F2> = <nat:4> \cdot <var:J> ^ <nat:2> \land <var:F0> = <nat:1> \land <var:X> = <nat:2> \cdot <var:J> ^ <nat:3> \} \\ <var:X> := <var:X> + <var:F2> \\ \{ <var:h> = <var:J> \land <var:F1> = <nat:4> \cdot <var:J> \land <var:F0> = <nat:1> \land <var:X> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:F1> \\ \{ <var:h> = <var:J> \land <var:F0> = <nat:1> \land <var:X> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> \} \\ <var:X> := <var:X> + <var:F0> \\ \{ <var:h> = <var:J> \land <var:X> = <nat:2> \cdot <var:J> ^ <nat:3> + <nat:4> \cdot <var:J> ^ <nat:2> + <nat:4> \cdot <var:J> + <nat:1> \} \end{eqnarray} The application of usual Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Definition <def:poly> := <var:F1> := <var:h> ; <var:F2> := <var:F1> * <var:h> ; <var:F3> := <var:F2> * <var:h> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:4> ; <var:F2> := <var:F2> * <nat:4> ; <var:F3> := <var:F3> * <nat:2> ; <var:X> := <var:F3> <var:X> := <var:X> + <var:F2> <var:X> := <var:X> + <var:F1> <var:X> := <var:X> + <var:F0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:h> = <var:J> }} <def:poly> {{ <var:X> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:F1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:F1> = <var:J> /\ <var:F2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:F1> = <var:J> /\ <var:F2> = <var:J> ^ <nat:2> /\ <var:F3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:F1> = <var:J> /\ <var:F2> = <var:J> ^ <nat:2> /\ <var:F3> = <var:J> ^ <nat:3> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:F1> = <nat:4> * <var:J> /\ <var:F2> = <var:J> ^ <nat:2> /\ <var:F3> = <var:J> ^ <nat:3> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:F1> = <nat:4> * <var:J> /\ <var:F2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:F3> = <var:J> ^ <nat:3> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:F1> = <nat:4> * <var:J> /\ <var:F2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:F3> = <nat:2> * <var:J> ^ <nat:3> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:F1> = <nat:4> * <var:J> /\ <var:F2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:F0> = <nat:1> /\ <var:X> = <nat:2> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:F1> = <nat:4> * <var:J> /\ <var:F0> = <nat:1> /\ <var:X> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:F0> = <nat:1> /\ <var:X> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:J> /\ <var:X> = <nat:2> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 