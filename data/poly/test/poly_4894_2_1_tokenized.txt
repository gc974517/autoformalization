\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:X0> := <nat:1> ; <var:y> := <var:X0> \end{verbatim} \end{definition} \begin{theorem} Allow --- for every positive integers $ <var:j> $ --- it to be that $ <var:B> = <var:j> $ prior to the evaluation of this program , it must be that we have $ <var:y> = <nat:1> $ . \end{theorem} \begin{proof} The method of proof for our list of instructions can be seen with usual Hoare reasoning . Focusing on the following piece of code contained in the code segment , we see the assignment command \verb | <var:X0> := <nat:1> ; | . This command forwards the condition $ \{ <var:B> = <var:j> \} $ into $ \{ <var:B> = <var:j> \land <var:X0> = <nat:1> \} $ . Taking a look at the subsequent command found in the series of instructions , the statement \verb | <var:y> := <var:X0> | . This command advances the condition $ \{ <var:B> = <var:j> \land <var:X0> = <nat:1> \} $ toward the condition $ \{ <var:B> = <var:j> \land <var:y> = <nat:1> \} $ . This is given using the assignment scheme obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <def:poly> := <var:X0> := <nat:1> ; <var:y> := <var:X0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:B> = <var:j> }} <def:poly> {{ <var:y> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:X0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:j> /\ <var:y> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 