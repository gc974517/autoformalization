\begin{document} \begin{theorem} We define a program in \emph{Imp} as \begin{verbatim} <var:B> := <nat:4> ; <var:B> := <nat:2> + <var:B> * <var:k> ; <var:B> := <nat:4> + <var:B> * <var:k> ; <var:B> := <nat:2> + <var:B> * <var:k> ; <var:B> := <nat:4> + <var:B> * <var:k> ; <var:B> := <var:B> * <var:k> ; <var:B> := <nat:3> + <var:B> * <var:k> ; <var:B> := <nat:4> + <var:B> * <var:k> ; <var:B> := <nat:1> + <var:B> * <var:k> ; <var:B> := <nat:4> + <var:B> * <var:k> \end{verbatim} Allowing it to be that $ <var:k> = <var:T> $ ( for some natural numbers $ <var:T> $ ) ahead of evaluating the code segment it holds that we see $ <var:B> = <nat:4> \times <var:T> ^ <nat:9> + <nat:2> \times <var:T> ^ <nat:8> + <nat:4> \times <var:T> ^ <nat:7> + <nat:2> \times <var:T> ^ <nat:6> + <nat:4> \times <var:T> ^ <nat:5> + <nat:3> \times <var:T> ^ <nat:3> + <nat:4> \times <var:T> ^ <nat:2> + <nat:1> \times <var:T> + <nat:4> $ after series of commands has finished . \end{theorem} \begin{proof} The flow of logic for our code can be shown through usual Hoare techniques . Advancing to the upcoming lines of codein our code , \begin{eqnarray} \{ <var:k> = <var:T> \} \, <var:B> := <nat:4> \, \{ <var:k> = <var:T> \land <var:B> = <nat:4> \} \\ \{ <var:k> = <var:T> \land <var:B> = <nat:4> \} \, <var:B> := <nat:2> + <var:B> * <var:k> \, \{ <var:k> = <var:T> \land <var:B> = <nat:4> * <var:T> + <nat:2> \} \\ \{ <var:k> = <var:T> \land <var:B> = <nat:4> * <var:T> + <nat:2> \} \, <var:B> := <nat:4> + <var:B> * <var:k> \, \{ <var:k> = <var:T> \land <var:B> = <nat:4> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:4> \} \\ \{ <var:k> = <var:T> \land <var:B> = <nat:4> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:4> \} \, <var:B> := <nat:2> + <var:B> * <var:k> \, \{ <var:k> = <var:T> \land <var:B> = <nat:4> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:2> \} \end{eqnarray} This is given through the binding inference rule given in usual Hoare techniques . Focusing on the following pieces of code in our set of commands , \begin{eqnarray} \{ <var:k> = <var:T> \} \, <var:B> := <nat:4> \, \{ <var:k> = <var:T> \land <var:B> = <nat:4> \} \\ \{ <var:k> = <var:T> \land <var:B> = <nat:4> \} \, <var:B> := <nat:2> + <var:B> * <var:k> \, \{ <var:k> = <var:T> \land <var:B> = <nat:4> * <var:T> + <nat:2> \} \end{eqnarray} Following , \begin{eqnarray} \{ <var:k> = <var:T> \} \, <var:B> := <nat:4> \, \{ <var:k> = <var:T> \land <var:B> = <nat:4> \} \end{eqnarray} Considering the upcoming step seen in the set of commands , we have \begin{eqnarray} \{ <var:k> = <var:T> \} \, <var:B> := <nat:4> \, \{ <var:k> = <var:T> \land <var:B> = <nat:4> \} \end{eqnarray} This is shown to be logically sound by the variable update law in typical Hoare logic . Honing in on the subsequent lines contained in our series of commands , we see \begin{eqnarray} \{ <var:k> = <var:T> \} \, <var:B> := <nat:4> \, \{ <var:k> = <var:T> \land <var:B> = <nat:4> \} \\ \{ <var:k> = <var:T> \land <var:B> = <nat:4> \} \, <var:B> := <nat:2> + <var:B> * <var:k> \, \{ <var:k> = <var:T> \land <var:B> = <nat:4> * <var:T> + <nat:2> \} \end{eqnarray} This is ensured using the law in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:k> = <var:T> }} <var:B> := <nat:4> ; <var:B> := <nat:2> + <var:B> * <var:k> ; <var:B> := <nat:4> + <var:B> * <var:k> ; <var:B> := <nat:2> + <var:B> * <var:k> ; <var:B> := <nat:4> + <var:B> * <var:k> ; <var:B> := <var:B> * <var:k> ; <var:B> := <nat:3> + <var:B> * <var:k> ; <var:B> := <nat:4> + <var:B> * <var:k> ; <var:B> := <nat:1> + <var:B> * <var:k> ; <var:B> := <nat:4> + <var:B> * <var:k> {{ <var:B> = <nat:4> * <var:T> ^ <nat:9> + <nat:2> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:7> + <nat:2> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:B> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:B> = <nat:4> * <var:T> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:B> = <nat:4> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:B> = <nat:4> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:B> = <nat:4> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:B> = <nat:4> * <var:T> ^ <nat:5> + <nat:2> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:B> = <nat:4> * <var:T> ^ <nat:6> + <nat:2> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:B> = <nat:4> * <var:T> ^ <nat:7> + <nat:2> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:2> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:B> = <nat:4> * <var:T> ^ <nat:8> + <nat:2> * <var:T> ^ <nat:7> + <nat:4> * <var:T> ^ <nat:6> + <nat:2> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:4> + <nat:3> * <var:T> ^ <nat:2> + <nat:4> * <var:T> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:T> /\ <var:B> = <nat:4> * <var:T> ^ <nat:9> + <nat:2> * <var:T> ^ <nat:8> + <nat:4> * <var:T> ^ <nat:7> + <nat:2> * <var:T> ^ <nat:6> + <nat:4> * <var:T> ^ <nat:5> + <nat:3> * <var:T> ^ <nat:3> + <nat:4> * <var:T> ^ <nat:2> + <nat:1> * <var:T> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 