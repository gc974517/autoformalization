\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:R> := <nat:3> ; <var:R> := <nat:1> + <var:R> * <var:Z> ; <var:R> := <nat:3> + <var:R> * <var:Z> ; <var:R> := <nat:2> + <var:R> * <var:Z> ; <var:R> := <nat:3> + <var:R> * <var:Z> ; <var:R> := <nat:4> + <var:R> * <var:Z> ; <var:R> := <nat:3> + <var:R> * <var:Z> ; <var:R> := <nat:2> + <var:R> * <var:Z> ; <var:R> := <nat:1> + <var:R> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:Z> = <var:g> $ , letting integers $ <var:g> $ , ahead of evaluating the list of instructions it holds that $ <var:R> = <nat:3> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> $ once set of commands has terminated . \end{theorem} \begin{proof} The method of proof for the set of instructions can be done through Hoare reasoning . Jumping to the following statement contained in the series of commands , we see the binding code \verb | <var:R> := <nat:3> ; | . This advances $ \{ <var:Z> = <var:g> \} $ to $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \} $ . This is shown through the assignment rule in usual Hoare techniques . Moving onward , we see the variable update statement \verb | <var:R> := <nat:1> + <var:R> * <var:Z> ; | . This command takes $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \} $ toward the postcondition $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> + <nat:1> \} $ . Advancing to the next step , we see the variable update code binding $ <nat:3> + <var:R> * <var:Z> $ into $ <var:R>$ . This advances the condition $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> + <nat:1> \} $ to the condition $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + <nat:3> \} $ . This is known to be sound using the assignment law in typical Hoare techniques . Taking another step toward the upcoming step in the list of commands , the environment update line letting $ <nat:2> + <var:R> * <var:Z> $ toward $ <var:R>$ . This forwards the condition $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:2> + <nat:1> \times <var:g> + <nat:3> \} $ as $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:2> \} $ . Further , the environment update command \verb | <var:R> := <nat:3> + <var:R> * <var:Z> ; | . This command transfers the condition $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:3> + <nat:1> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:2> \} $ into the postcondition $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:3> \} $ . This is deduced through the assignment rule given by typical Hoare logic . Advancing to the next step seen in our code , the environment update line \verb | <var:R> := <nat:4> + <var:R> * <var:Z> ; | . This advances the precondition $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:4> + <nat:1> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:3> \} $ to $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:5> + <nat:1> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:4> \} $ . This is sound through the assignment scheme from standard Hoare logic . Now , the binding command \verb | <var:R> := <nat:3> + <var:R> * <var:Z> ; | . This code redefines $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:5> + <nat:1> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:4> \} $ into the condition $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:6> + <nat:1> \times <var:g> ^ <nat:5> + <nat:3> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + <nat:3> \} $ . Advancing to the next step , we see the line letting $ <nat:2> + <var:R> * <var:Z> $ toward $ <var:R>$ . This advances the precondition $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:6> + <nat:1> \times <var:g> ^ <nat:5> + <nat:3> \times <var:g> ^ <nat:4> + <nat:2> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:4> \times <var:g> + <nat:3> \} $ to $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:7> + <nat:1> \times <var:g> ^ <nat:6> + <nat:3> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:4> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:2> \} $ . Considering the subsequent line found in the segment of code , we have the environment update code \verb | <var:R> := <nat:1> + <var:R> * <var:Z> | . This line forwards the precondition $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:7> + <nat:1> \times <var:g> ^ <nat:6> + <nat:3> \times <var:g> ^ <nat:5> + <nat:2> \times <var:g> ^ <nat:4> + <nat:3> \times <var:g> ^ <nat:3> + <nat:4> \times <var:g> ^ <nat:2> + <nat:3> \times <var:g> + <nat:2> \} $ toward the condition $ \{ <var:Z> = <var:g> \land <var:R> = <nat:3> \times <var:g> ^ <nat:8> + <nat:1> \times <var:g> ^ <nat:7> + <nat:3> \times <var:g> ^ <nat:6> + <nat:2> \times <var:g> ^ <nat:5> + <nat:3> \times <var:g> ^ <nat:4> + <nat:4> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:2> \times <var:g> + <nat:1> \} $ . This is known to be sound through the assignment inference rule defined by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:R> := <nat:3> ; <var:R> := <nat:1> + <var:R> * <var:Z> ; <var:R> := <nat:3> + <var:R> * <var:Z> ; <var:R> := <nat:2> + <var:R> * <var:Z> ; <var:R> := <nat:3> + <var:R> * <var:Z> ; <var:R> := <nat:4> + <var:R> * <var:Z> ; <var:R> := <nat:3> + <var:R> * <var:Z> ; <var:R> := <nat:2> + <var:R> * <var:Z> ; <var:R> := <nat:1> + <var:R> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:Z> = <var:g> }} <def:poly> {{ <var:R> = <nat:3> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:R> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:R> = <nat:3> * <var:g> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:R> = <nat:3> * <var:g> ^ <nat:2> + <nat:1> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:R> = <nat:3> * <var:g> ^ <nat:3> + <nat:1> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:R> = <nat:3> * <var:g> ^ <nat:4> + <nat:1> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:R> = <nat:3> * <var:g> ^ <nat:5> + <nat:1> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:R> = <nat:3> * <var:g> ^ <nat:6> + <nat:1> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:4> + <nat:2> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:4> * <var:g> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:R> = <nat:3> * <var:g> ^ <nat:7> + <nat:1> * <var:g> ^ <nat:6> + <nat:3> * <var:g> ^ <nat:5> + <nat:2> * <var:g> ^ <nat:4> + <nat:3> * <var:g> ^ <nat:3> + <nat:4> * <var:g> ^ <nat:2> + <nat:3> * <var:g> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:g> /\ <var:R> = <nat:3> * <var:g> ^ <nat:8> + <nat:1> * <var:g> ^ <nat:7> + <nat:3> * <var:g> ^ <nat:6> + <nat:2> * <var:g> ^ <nat:5> + <nat:3> * <var:g> ^ <nat:4> + <nat:4> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:2> * <var:g> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 