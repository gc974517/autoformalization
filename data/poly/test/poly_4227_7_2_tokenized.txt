\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:c> := <nat:2> ; <var:c> := <nat:4> + <var:c> * <var:M> ; <var:c> := <nat:1> + <var:c> * <var:M> ; <var:c> := <var:c> * <var:M> ; <var:c> := <nat:3> + <var:c> * <var:M> ; <var:c> := <nat:4> + <var:c> * <var:M> ; <var:c> := <nat:3> + <var:c> * <var:M> \end{verbatim} Allowing it to hold that $ <var:M> = <var:H> $ --- given every $ <var:H> \in \mathbb{N} $ --- prior to evaluating this list of instructions it holds that $ <var:c> = <nat:2> \times <var:H> ^ <nat:6> + <nat:4> \times <var:H> ^ <nat:5> + <nat:1> \times <var:H> ^ <nat:4> + <nat:3> \times <var:H> ^ <nat:2> + <nat:4> \times <var:H> + <nat:3> $ after code segment is done executing . \end{theorem} \begin{proof} Proving correctness for this code segment can be demonstrated by Hoare techniques . Moving forward to the next commands found in the code , \verb | { <var:M> = <var:H> } <var:c> := <nat:2> { <var:M> = <var:H> \land <var:c> = <nat:2> } | , \verb | { <var:M> = <var:H> \land <var:c> = <nat:2> } <var:c> := <nat:4> + <var:c> * <var:M> { <var:M> = <var:H> \land <var:c> = <nat:2> \cdot <var:H> + <nat:4> } | and \verb | { <var:M> = <var:H> \land <var:c> = <nat:2> \cdot <var:H> + <nat:4> } <var:c> := <nat:1> + <var:c> * <var:M> { <var:M> = <var:H> \land <var:c> = <nat:2> \cdot <var:H> ^ <nat:2> + <nat:4> \cdot <var:H> + <nat:1> } | . This is shown to be logically sound using the variable binding law from usual Hoare techniques . Considering the subsequent steps in our set of instructions , we have \verb | { <var:M> = <var:H> } <var:c> := <nat:2> { <var:M> = <var:H> \land <var:c> = <nat:2> } | and \verb | { <var:M> = <var:H> \land <var:c> = <nat:2> } <var:c> := <nat:4> + <var:c> * <var:M> { <var:M> = <var:H> \land <var:c> = <nat:2> \cdot <var:H> + <nat:4> } | . This is guaranteed through the environment update law of standard Hoare reasoning . Moving on , \verb | { <var:M> = <var:H> } <var:c> := <nat:2> { <var:M> = <var:H> \land <var:c> = <nat:2> } | and \verb | { <var:M> = <var:H> \land <var:c> = <nat:2> } <var:c> := <nat:4> + <var:c> * <var:M> { <var:M> = <var:H> \land <var:c> = <nat:2> \cdot <var:H> + <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:M> = <var:H> }} <var:c> := <nat:2> ; <var:c> := <nat:4> + <var:c> * <var:M> ; <var:c> := <nat:1> + <var:c> * <var:M> ; <var:c> := <var:c> * <var:M> ; <var:c> := <nat:3> + <var:c> * <var:M> ; <var:c> := <nat:4> + <var:c> * <var:M> ; <var:c> := <nat:3> + <var:c> * <var:M> {{ <var:c> = <nat:2> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:c> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:c> = <nat:2> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:c> = <nat:2> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:c> = <nat:2> * <var:H> ^ <nat:3> + <nat:4> * <var:H> ^ <nat:2> + <nat:1> * <var:H> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:c> = <nat:2> * <var:H> ^ <nat:4> + <nat:4> * <var:H> ^ <nat:3> + <nat:1> * <var:H> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:c> = <nat:2> * <var:H> ^ <nat:5> + <nat:4> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ^ <nat:3> + <nat:3> * <var:H> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:H> /\ <var:c> = <nat:2> * <var:H> ^ <nat:6> + <nat:4> * <var:H> ^ <nat:5> + <nat:1> * <var:H> ^ <nat:4> + <nat:3> * <var:H> ^ <nat:2> + <nat:4> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 