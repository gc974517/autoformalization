\begin{document} \begin{theorem} Consider a list of commands as \begin{verbatim} <var:B1> := <var:s> ; <var:B2> := <var:B1> * <var:s> ; <var:B3> := <var:B2> * <var:s> ; <var:B4> := <var:B3> * <var:s> ; <var:B0> := <nat:3> ; <var:B1> := <var:B1> * <nat:4> ; <var:B2> := <var:B2> * <nat:3> ; <var:B4> := <var:B4> * <nat:3> ; <var:q> := <var:B4> <var:q> := <var:q> + <var:B2> <var:q> := <var:q> + <var:B1> <var:q> := <var:q> + <var:B0> \end{verbatim} Allow it to be that $ <var:s> = <var:p> $ before the execution of the set of instructions then $ <var:q> = <nat:3> \times <var:p> ^ <nat:4> + <nat:3> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the series of instructions is shown by standard Hoare techniques . Moving on to the following statements contained in our code , we have \[ \begin{tabular} {rcl} \{ <var:s> = <var:p> \} & <var:B1> := <var:s> & \{ <var:s> = <var:p> \land <var:B1> = <var:p> \} \\ \{ <var:s> = <var:p> \land <var:B1> = <var:p> \} & <var:B2> := <var:B1> * <var:s> & \{ <var:s> = <var:p> \land <var:B1> = <var:p> \land <var:B2> = <var:p> ^ <nat:2> \} \\ \{ <var:s> = <var:p> \land <var:B1> = <var:p> \land <var:B2> = <var:p> ^ <nat:2> \} & <var:B3> := <var:B2> * <var:s> & \{ <var:s> = <var:p> \land <var:B1> = <var:p> \land <var:B2> = <var:p> ^ <nat:2> \land <var:B3> = <var:p> ^ <nat:3> \} \\ \{ <var:s> = <var:p> \land <var:B1> = <var:p> \land <var:B2> = <var:p> ^ <nat:2> \land <var:B3> = <var:p> ^ <nat:3> \} & <var:B4> := <var:B3> * <var:s> & \{ <var:s> = <var:p> \land <var:B1> = <var:p> \land <var:B2> = <var:p> ^ <nat:2> \land <var:B3> = <var:p> ^ <nat:3> \land <var:B4> = <var:p> ^ <nat:4> \} \\ \{ <var:s> = <var:p> \land <var:B1> = <var:p> \land <var:B2> = <var:p> ^ <nat:2> \land <var:B3> = <var:p> ^ <nat:3> \land <var:B4> = <var:p> ^ <nat:4> \} & <var:B0> := <nat:3> & \{ <var:s> = <var:p> \land <var:B1> = <var:p> \land <var:B2> = <var:p> ^ <nat:2> \land <var:B3> = <var:p> ^ <nat:3> \land <var:B4> = <var:p> ^ <nat:4> \land <var:B0> = <nat:3> \} \\ \{ <var:s> = <var:p> \land <var:B1> = <var:p> \land <var:B2> = <var:p> ^ <nat:2> \land <var:B3> = <var:p> ^ <nat:3> \land <var:B4> = <var:p> ^ <nat:4> \land <var:B0> = <nat:3> \} & <var:B1> := <var:B1> * <nat:4> & \{ <var:s> = <var:p> \land <var:B1> = <nat:4> \times <var:p> \land <var:B2> = <var:p> ^ <nat:2> \land <var:B3> = <var:p> ^ <nat:3> \land <var:B4> = <var:p> ^ <nat:4> \land <var:B0> = <nat:3> \} \\ \{ <var:s> = <var:p> \land <var:B1> = <nat:4> \times <var:p> \land <var:B2> = <var:p> ^ <nat:2> \land <var:B3> = <var:p> ^ <nat:3> \land <var:B4> = <var:p> ^ <nat:4> \land <var:B0> = <nat:3> \} & <var:B2> := <var:B2> * <nat:3> & \{ <var:s> = <var:p> \land <var:B1> = <nat:4> \times <var:p> \land <var:B2> = <nat:3> \times <var:p> ^ <nat:2> \land <var:B3> = <var:p> ^ <nat:3> \land <var:B4> = <var:p> ^ <nat:4> \land <var:B0> = <nat:3> \} \end{tabular} This is sound by the variable update scheme defined by standard Hoare techniques . Stepping forward , we have \[ \begin{tabular} {rcl} \{ <var:s> = <var:p> \} & <var:B1> := <var:s> & \{ <var:s> = <var:p> \land <var:B1> = <var:p> \} \\ \{ <var:s> = <var:p> \land <var:B1> = <var:p> \} & <var:B2> := <var:B1> * <var:s> & \{ <var:s> = <var:p> \land <var:B1> = <var:p> \land <var:B2> = <var:p> ^ <nat:2> \} \\ \{ <var:s> = <var:p> \land <var:B1> = <var:p> \land <var:B2> = <var:p> ^ <nat:2> \} & <var:B3> := <var:B2> * <var:s> & \{ <var:s> = <var:p> \land <var:B1> = <var:p> \land <var:B2> = <var:p> ^ <nat:2> \land <var:B3> = <var:p> ^ <nat:3> \} \end{tabular} This is shown through the binding scheme defined in standard Hoare logic . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:s> = <var:p> \} & <var:B1> := <var:s> & \{ <var:s> = <var:p> \land <var:B1> = <var:p> \} \\ \{ <var:s> = <var:p> \land <var:B1> = <var:p> \} & <var:B2> := <var:B1> * <var:s> & \{ <var:s> = <var:p> \land <var:B1> = <var:p> \land <var:B2> = <var:p> ^ <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <var:B4> : string := " <var:B4> " . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:s> = <var:p> }} <var:B1> := <var:s> ; <var:B2> := <var:B1> * <var:s> ; <var:B3> := <var:B2> * <var:s> ; <var:B4> := <var:B3> * <var:s> ; <var:B0> := <nat:3> ; <var:B1> := <var:B1> * <nat:4> ; <var:B2> := <var:B2> * <nat:3> ; <var:B4> := <var:B4> * <nat:3> ; <var:q> := <var:B4> <var:q> := <var:q> + <var:B2> <var:q> := <var:q> + <var:B1> <var:q> := <var:q> + <var:B0> {{ <var:q> = <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:B1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:B1> = <var:p> /\ <var:B2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:B1> = <var:p> /\ <var:B2> = <var:p> ^ <nat:2> /\ <var:B3> = <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:B1> = <var:p> /\ <var:B2> = <var:p> ^ <nat:2> /\ <var:B3> = <var:p> ^ <nat:3> /\ <var:B4> = <var:p> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:B1> = <var:p> /\ <var:B2> = <var:p> ^ <nat:2> /\ <var:B3> = <var:p> ^ <nat:3> /\ <var:B4> = <var:p> ^ <nat:4> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:B1> = <nat:4> * <var:p> /\ <var:B2> = <var:p> ^ <nat:2> /\ <var:B3> = <var:p> ^ <nat:3> /\ <var:B4> = <var:p> ^ <nat:4> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:B1> = <nat:4> * <var:p> /\ <var:B2> = <nat:3> * <var:p> ^ <nat:2> /\ <var:B3> = <var:p> ^ <nat:3> /\ <var:B4> = <var:p> ^ <nat:4> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:B1> = <nat:4> * <var:p> /\ <var:B2> = <nat:3> * <var:p> ^ <nat:2> /\ <var:B3> = <var:p> ^ <nat:3> /\ <var:B4> = <nat:3> * <var:p> ^ <nat:4> /\ <var:B0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:B1> = <nat:4> * <var:p> /\ <var:B2> = <nat:3> * <var:p> ^ <nat:2> /\ <var:B3> = <var:p> ^ <nat:3> /\ <var:B0> = <nat:3> /\ <var:q> = <nat:3> * <var:p> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:B1> = <nat:4> * <var:p> /\ <var:B0> = <nat:3> /\ <var:q> = <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:B0> = <nat:3> /\ <var:q> = <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:p> /\ <var:q> = <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 