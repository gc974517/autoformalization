\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} such that \begin{verbatim} <var:Q1> := <var:Y> ; <var:Q0> := <nat:6> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:V> := <var:Q1> <var:V> := <var:V> + <var:Q0> \end{verbatim} Given it to be that $ <var:Y> = <var:N> $ before the execution of this code it follows that we see $ <var:V> = <nat:6> \times <var:N> + <nat:6> $ when series of commands exits . \end{theorem} \begin{proof} Proving correctness for the code segment can be accomplished using standard Hoare logic . Moving on to the next line in our program , \begin{verbatim} { <var:Y> = <var:N> } <var:Q1> := <var:Y> { <var:Y> = <var:N> \land <var:Q1> = <var:N> } \end{verbatim} This is guaranteed with the variable assignmet rule found in Hoare logic . Advancing to the proceeding commands in the code , we have \begin{verbatim} { <var:Y> = <var:N> } <var:Q1> := <var:Y> { <var:Y> = <var:N> \land <var:Q1> = <var:N> } { <var:Y> = <var:N> \land <var:Q1> = <var:N> } <var:Q0> := <nat:6> { <var:Y> = <var:N> \land <var:Q1> = <var:N> \land <var:Q0> = <nat:6> } \end{verbatim} This is shown with the variable binding inference rule of Hoare techniques . Looking at the subsequent statement in the code , \begin{verbatim} { <var:Y> = <var:N> } <var:Q1> := <var:Y> { <var:Y> = <var:N> \land <var:Q1> = <var:N> } \end{verbatim} This is given using the variable update inference rule defined by Hoare logic . Following , we see \begin{verbatim} { <var:Y> = <var:N> } <var:Q1> := <var:Y> { <var:Y> = <var:N> \land <var:Q1> = <var:N> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Y> = <var:N> }} <var:Q1> := <var:Y> ; <var:Q0> := <nat:6> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:V> := <var:Q1> <var:V> := <var:V> + <var:Q0> {{ <var:V> = <nat:6> * <var:N> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:Q1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:Q1> = <var:N> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:Q1> = <nat:6> * <var:N> /\ <var:Q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:Q0> = <nat:6> /\ <var:V> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:N> /\ <var:V> = <nat:6> * <var:N> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 