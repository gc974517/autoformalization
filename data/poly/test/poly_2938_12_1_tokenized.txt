\begin{document} \begin{theorem} Take the following code in \emph{Imp} such that \begin{verbatim} <var:B1> := <var:Q> ; <var:B2> := <var:B1> * <var:Q> ; <var:B3> := <var:B2> * <var:Q> ; <var:B4> := <var:B3> * <var:Q> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:3> ; <var:B2> := <var:B2> * <nat:8> ; <var:B4> := <var:B4> * <nat:8> ; <var:C> := <var:B4> <var:C> := <var:C> + <var:B2> <var:C> := <var:C> + <var:B1> <var:C> := <var:C> + <var:B0> \end{verbatim} Assuming ( given any integers $ <var:i> $ ) $ <var:Q> = <var:i> $ ahead of running our set of instructions , it follows that we have $ <var:C> = <nat:8> \times <var:i> ^ <nat:4> + <nat:8> \times <var:i> ^ <nat:2> + <nat:3> \times <var:i> + <nat:7> $ after set of commands is done executing . \end{theorem} \begin{proof} Demonstrating correctness of our code can be given through typical Hoare reasoning . Considering the following command contained in the list of commands , we have the assignment statement binding $ <var:Q> $ to $ <var:B1>$ . This command takes the condition $ \{ <var:Q> = <var:i> \} $ into the postcondition $ \{ <var:Q> = <var:i> \land <var:B1> = <var:i> \} $ . Advancing on , the binding statement \verb | <var:B2> := <var:B1> * <var:Q> ; | . This code moves the condition $ \{ <var:Q> = <var:i> \land <var:B1> = <var:i> \} $ as the condition $ \{ <var:Q> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \} $ . This is shown by the assignment law defined by standard Hoare reasoning . Advancing to the next step , the environment update code \verb | <var:B3> := <var:B2> * <var:Q> ; | . This line takes the condition $ \{ <var:Q> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \} $ to $ \{ <var:Q> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \} $ . Going to the next step , we have the variable assignmet command defining $ <var:B3> * <var:Q> $ toward $ <var:B4>$ . This code takes the precondition $ \{ <var:Q> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \} $ as the postcondition $ \{ <var:Q> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B4> = <var:i> ^ <nat:4> \} $ . This is given using the assignment law in typical Hoare reasoning . Focusing on the next bit of code in the program , we have the environment update statement assigning $ <nat:7> $ as $ <var:B0>$ . This line takes the condition $ \{ <var:Q> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B4> = <var:i> ^ <nat:4> \} $ as the condition $ \{ <var:Q> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B4> = <var:i> ^ <nat:4> \land <var:B0> = <nat:7> \} $ . Advancing , the binding line \verb | <var:B1> := <var:B1> * <nat:3> ; | . This moves the precondition $ \{ <var:Q> = <var:i> \land <var:B1> = <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B4> = <var:i> ^ <nat:4> \land <var:B0> = <nat:7> \} $ to the condition $ \{ <var:Q> = <var:i> \land <var:B1> = <nat:3> * <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B4> = <var:i> ^ <nat:4> \land <var:B0> = <nat:7> \} $ . This is given with the assignment inference rule of typical Hoare logic . Looking at the following statement found in our segment of code , we see the assignment line \verb | <var:B2> := <var:B2> * <nat:8> ; | . This advances the condition $ \{ <var:Q> = <var:i> \land <var:B1> = <nat:3> * <var:i> \land <var:B2> = <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B4> = <var:i> ^ <nat:4> \land <var:B0> = <nat:7> \} $ into $ \{ <var:Q> = <var:i> \land <var:B1> = <nat:3> * <var:i> \land <var:B2> = <nat:8> * <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B4> = <var:i> ^ <nat:4> \land <var:B0> = <nat:7> \} $ . Moving on to the following line seen in our code segment , we have the variable binding statement \verb | <var:B4> := <var:B4> * <nat:8> ; | . This statement takes $ \{ <var:Q> = <var:i> \land <var:B1> = <nat:3> * <var:i> \land <var:B2> = <nat:8> * <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B4> = <var:i> ^ <nat:4> \land <var:B0> = <nat:7> \} $ toward the postcondition $ \{ <var:Q> = <var:i> \land <var:B1> = <nat:3> * <var:i> \land <var:B2> = <nat:8> * <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B4> = <nat:8> * <var:i> ^ <nat:4> \land <var:B0> = <nat:7> \} $ . Shifting focus toward the proceeding command contained in our series of instructions , we see the variable update statement \verb | <var:C> := <var:B4> | . This advances $ \{ <var:Q> = <var:i> \land <var:B1> = <nat:3> * <var:i> \land <var:B2> = <nat:8> * <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B4> = <nat:8> * <var:i> ^ <nat:4> \land <var:B0> = <nat:7> \} $ into the condition $ \{ <var:Q> = <var:i> \land <var:B1> = <nat:3> * <var:i> \land <var:B2> = <nat:8> * <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B0> = <nat:7> \land <var:C> = <nat:8> * <var:i> ^ <nat:4> \} $ . This is rigorously given by the assignment scheme obtained from usual Hoare techniques . Paying attention to the upcoming line of code contained in the set of commands , the assignment command \verb | <var:C> := <var:C> + <var:B2> | . This code forwards the condition $ \{ <var:Q> = <var:i> \land <var:B1> = <nat:3> * <var:i> \land <var:B2> = <nat:8> * <var:i> ^ <nat:2> \land <var:B3> = <var:i> ^ <nat:3> \land <var:B0> = <nat:7> \land <var:C> = <nat:8> * <var:i> ^ <nat:4> \} $ as the postcondition $ \{ <var:Q> = <var:i> \land <var:B1> = <nat:3> * <var:i> \land <var:B0> = <nat:7> \land <var:C> = <nat:8> * <var:i> ^ <nat:4> + <nat:8> * <var:i> ^ <nat:2> \} $ . This is shown to be logically sound by the assignment rule in usual Hoare logic . Taking a look at the next line of code seen in our series of instructions , we see the environment update statement \verb | <var:C> := <var:C> + <var:B1> | . This code advances $ \{ <var:Q> = <var:i> \land <var:B1> = <nat:3> * <var:i> \land <var:B0> = <nat:7> \land <var:C> = <nat:8> * <var:i> ^ <nat:4> + <nat:8> * <var:i> ^ <nat:2> \} $ toward the condition $ \{ <var:Q> = <var:i> \land <var:B0> = <nat:7> \land <var:C> = <nat:8> * <var:i> ^ <nat:4> + <nat:8> * <var:i> ^ <nat:2> + <nat:3> * <var:i> \} $ . Next , we see the variable assignmet line letting $ <var:C> + <var:B0$ as $ <var:C>$ . This takes the condition $ \{ <var:Q> = <var:i> \land <var:B0> = <nat:7> \land <var:C> = <nat:8> * <var:i> ^ <nat:4> + <nat:8> * <var:i> ^ <nat:2> + <nat:3> * <var:i> \} $ into the condition $ \{ <var:Q> = <var:i> \land <var:C> = <nat:8> * <var:i> ^ <nat:4> + <nat:8> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <var:B4> : string := " <var:B4> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:Q> = <var:i> }} <var:B1> := <var:Q> ; <var:B2> := <var:B1> * <var:Q> ; <var:B3> := <var:B2> * <var:Q> ; <var:B4> := <var:B3> * <var:Q> ; <var:B0> := <nat:7> ; <var:B1> := <var:B1> * <nat:3> ; <var:B2> := <var:B2> * <nat:8> ; <var:B4> := <var:B4> * <nat:8> ; <var:C> := <var:B4> <var:C> := <var:C> + <var:B2> <var:C> := <var:C> + <var:B1> <var:C> := <var:C> + <var:B0> {{ <var:C> = <nat:8> * <var:i> ^ <nat:4> + <nat:8> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:B1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:B1> = <var:i> /\ <var:B2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:B1> = <var:i> /\ <var:B2> = <var:i> ^ <nat:2> /\ <var:B3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:B1> = <var:i> /\ <var:B2> = <var:i> ^ <nat:2> /\ <var:B3> = <var:i> ^ <nat:3> /\ <var:B4> = <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:B1> = <var:i> /\ <var:B2> = <var:i> ^ <nat:2> /\ <var:B3> = <var:i> ^ <nat:3> /\ <var:B4> = <var:i> ^ <nat:4> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:B1> = <nat:3> * <var:i> /\ <var:B2> = <var:i> ^ <nat:2> /\ <var:B3> = <var:i> ^ <nat:3> /\ <var:B4> = <var:i> ^ <nat:4> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:B1> = <nat:3> * <var:i> /\ <var:B2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:B3> = <var:i> ^ <nat:3> /\ <var:B4> = <var:i> ^ <nat:4> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:B1> = <nat:3> * <var:i> /\ <var:B2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:B3> = <var:i> ^ <nat:3> /\ <var:B4> = <nat:8> * <var:i> ^ <nat:4> /\ <var:B0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:B1> = <nat:3> * <var:i> /\ <var:B2> = <nat:8> * <var:i> ^ <nat:2> /\ <var:B3> = <var:i> ^ <nat:3> /\ <var:B0> = <nat:7> /\ <var:C> = <nat:8> * <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:B1> = <nat:3> * <var:i> /\ <var:B0> = <nat:7> /\ <var:C> = <nat:8> * <var:i> ^ <nat:4> + <nat:8> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:B0> = <nat:7> /\ <var:C> = <nat:8> * <var:i> ^ <nat:4> + <nat:8> * <var:i> ^ <nat:2> + <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:i> /\ <var:C> = <nat:8> * <var:i> ^ <nat:4> + <nat:8> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 