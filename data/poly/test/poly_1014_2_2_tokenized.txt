\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y> := <nat:4> ; <var:Y> := <nat:3> + <var:Y> * <var:W> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> . Assume that $ <var:W> = <var:G> $ prior to executing this series of commands it must be that we see $ <var:Y> = <nat:4> \times <var:G> + <nat:3> $ when segment of code has executed . \end{theorem} \begin{proof} Observe the below decorated segment of code . \begin{eqnarray} \{ <var:W> = <var:G> \} \\ <var:Y> := <nat:4> ; \\ \{ <var:W> = <var:G> \land <var:Y> = <nat:4> \} \\ <var:Y> := <nat:3> + <var:Y> * <var:W> \\ \{ <var:W> = <var:G> \land <var:Y> = <nat:4> \times <var:G> + <nat:3> \} \end{eqnarray} Applying usual Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Y> := <nat:4> ; <var:Y> := <nat:3> + <var:Y> * <var:W> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:W> = <var:G> }} <def:poly> {{ <var:Y> = <nat:4> * <var:G> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:Y> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:G> /\ <var:Y> = <nat:4> * <var:G> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 