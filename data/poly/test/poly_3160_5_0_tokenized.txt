\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:4> ; <var:O1> := <nat:1> ; <var:O1> := <var:O1> * <var:p> ; <var:s> := <var:O1> ; <var:s> := <var:s> + <var:O0> \end{verbatim} Given given some natural coefficients $ <var:K> $ that $ <var:p> = <var:K> $ prior to interpreting our list of commands it must be that we have $ <var:s> = <nat:1> * <var:K> + <nat:4> $ . \end{theorem} \begin{proof} See that the following decorated code . \begin{eqnarray} \{ <var:p> = <var:K> \} \\ <var:O0> := <nat:4> ; \\ \{ <var:p> = <var:K> \land <var:O0> = <nat:4> \} \\ <var:O1> := <nat:1> ; \\ \{ <var:p> = <var:K> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> \} \\ <var:O1> := <var:O1> * <var:p> ; \\ \{ <var:p> = <var:K> \land <var:O0> = <nat:4> \land <var:O1> = <nat:1> * <var:K> \} \\ <var:s> := <var:O1> ; \\ \{ <var:p> = <var:K> \land <var:O0> = <nat:4> \land <var:s> = <nat:1> * <var:K> \} \\ <var:s> := <var:s> + <var:O0> \\ \{ <var:p> = <var:K> \land <var:s> = <nat:1> * <var:K> + <nat:4> \} \end{eqnarray} Using typical Hoare reasoning completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:p> = <var:K> }} <var:O0> := <nat:4> ; <var:O1> := <nat:1> ; <var:O1> := <var:O1> * <var:p> ; <var:s> := <var:O1> ; <var:s> := <var:s> + <var:O0> {{ <var:s> = <nat:1> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:O0> = <nat:4> /\ <var:O1> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:O0> = <nat:4> /\ <var:s> = <nat:1> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:K> /\ <var:s> = <nat:1> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 