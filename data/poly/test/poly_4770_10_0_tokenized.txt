\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:T0> := <nat:5> ; <var:T1> := <nat:6> ; <var:T1> := <var:T1> * <var:g> ; <var:T3> := <nat:8> ; <var:T3> := <var:T3> * <var:g> ; <var:T3> := <var:T3> * <var:g> ; <var:T3> := <var:T3> * <var:g> ; <var:j> := <var:T3> ; <var:j> := <var:j> + <var:T1> ; <var:j> := <var:j> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:g> = <var:p> $ --- for $ <var:p> \in \mathbb{Z}^+ $ --- ahead of the execution of our series of instructions , then we have $ <var:j> = <nat:8> \times <var:p> ^ <nat:3> + <nat:6> \times <var:p> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions can be done through standard Hoare logic . Now , we have the variable binding statement \verb | <var:T0> := <nat:5> ; | . This advances the condition $ \{ <var:g> = <var:p> \} $ to the condition $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \} $ . This is given with the assignment law from Hoare logic . Going forward , we have the variable update statement binding $ <nat:6> $ into $ <var:T1>$ . This command advances the condition $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \} $ to $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> \} $ . Taking another step toward the upcoming command contained in the series of instructions , we see the binding line binding $ <var:T1> * <var:g> $ to $ <var:T1>$ . This line redefines $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> \} $ toward the postcondition $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> * <var:p> \} $ . This is shown to be logically sound through the assignment scheme given in standard Hoare reasoning . Taking a look at the following bit of code seen in the segment of code , the variable update code \verb | <var:T3> := <nat:8> ; | . This forwards $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> * <var:p> \} $ toward the condition $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> * <var:p> \land <var:T3> = <nat:8> \} $ . This is shown to be logically sound with the assignment law given by usual Hoare techniques . Going to the next step , we have the environment update line \verb | <var:T3> := <var:T3> * <var:g> ; | . This statement redefines the precondition $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> * <var:p> \land <var:T3> = <nat:8> \} $ toward the postcondition $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> * <var:p> \land <var:T3> = <nat:8> * <var:p> \} $ . Moving forward to the next piece of code seen in the code segment , we have the environment update command binding $ <var:T3> * <var:g> $ to $ <var:T3>$ . This command advances the condition $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> * <var:p> \land <var:T3> = <nat:8> * <var:p> \} $ as the condition $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> * <var:p> \land <var:T3> = <nat:8> * <var:p> ^ <nat:2> \} $ . This is sound with the assignment scheme defined in standard Hoare logic . After , we see the binding line assigning $ <var:T3> * <var:g> $ toward $ <var:T3>$ . This command takes the condition $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> * <var:p> \land <var:T3> = <nat:8> * <var:p> ^ <nat:2> \} $ as the postcondition $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> * <var:p> \land <var:T3> = <nat:8> * <var:p> ^ <nat:3> \} $ . This is shown using the assignment scheme defined by usual Hoare logic . Stepping forward , we see the environment update statement \verb | <var:j> := <var:T3> ; | . This transfers $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> * <var:p> \land <var:T3> = <nat:8> * <var:p> ^ <nat:3> \} $ toward $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> * <var:p> \land <var:j> = <nat:8> * <var:p> ^ <nat:3> \} $ . Going forward , the assignment line \verb | <var:j> := <var:j> + <var:T1> ; | . This takes the precondition $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:T1> = <nat:6> * <var:p> \land <var:j> = <nat:8> * <var:p> ^ <nat:3> \} $ into $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:j> = <nat:8> * <var:p> ^ <nat:3> + <nat:6> * <var:p> \} $ . Going forward , we see the variable update statement \verb | <var:j> := <var:j> + <var:T0> | . This transfers the precondition $ \{ <var:g> = <var:p> \land <var:T0> = <nat:5> \land <var:j> = <nat:8> * <var:p> ^ <nat:3> + <nat:6> * <var:p> \} $ as the postcondition $ \{ <var:g> = <var:p> \land <var:j> = <nat:8> * <var:p> ^ <nat:3> + <nat:6> * <var:p> + <nat:5> \} $ . This is deduced using the assignment rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T3> : string := " <var:T3> " . Definition <def:poly> := <var:T0> := <nat:5> ; <var:T1> := <nat:6> ; <var:T1> := <var:T1> * <var:g> ; <var:T3> := <nat:8> ; <var:T3> := <var:T3> * <var:g> ; <var:T3> := <var:T3> * <var:g> ; <var:T3> := <var:T3> * <var:g> ; <var:j> := <var:T3> ; <var:j> := <var:j> + <var:T1> ; <var:j> := <var:j> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:g> = <var:p> }} <def:poly> {{ <var:j> = <nat:8> * <var:p> ^ <nat:3> + <nat:6> * <var:p> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:6> * <var:p> /\ <var:T3> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:6> * <var:p> /\ <var:T3> = <nat:8> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:6> * <var:p> /\ <var:T3> = <nat:8> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:6> * <var:p> /\ <var:T3> = <nat:8> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:6> * <var:p> /\ <var:j> = <nat:8> * <var:p> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:T0> = <nat:5> /\ <var:j> = <nat:8> * <var:p> ^ <nat:3> + <nat:6> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:j> = <nat:8> * <var:p> ^ <nat:3> + <nat:6> * <var:p> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 