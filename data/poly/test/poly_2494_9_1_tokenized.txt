\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g1> := <var:H> ; <var:g2> := <var:g1> * <var:H> ; <var:g3> := <var:g2> * <var:H> ; <var:g0> := <nat:2> ; <var:g2> := <var:g2> * <nat:2> ; <var:g3> := <var:g3> * <nat:4> ; <var:m> := <var:g3> <var:m> := <var:m> + <var:g2> <var:m> := <var:m> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of commands <def:poly> . Allow that $ <var:H> = <var:J> $ before the execution of our series of instructions it follows that we see $ <var:m> = <nat:4> \times <var:J> ^ <nat:3> + <nat:2> \times <var:J> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The application of Hoare techniques yields : \begin{eqnarray} \{ <var:H> = <var:J> \} \\ <var:g1> := <var:H> ; \\ \{ <var:H> = <var:J> \land <var:g1> = <var:J> \} \\ <var:g2> := <var:g1> * <var:H> ; \\ \{ <var:H> = <var:J> \land <var:g1> = <var:J> \land <var:g2> = <var:J> ^ <nat:2> \} \\ <var:g3> := <var:g2> * <var:H> ; \\ \{ <var:H> = <var:J> \land <var:g1> = <var:J> \land <var:g2> = <var:J> ^ <nat:2> \land <var:g3> = <var:J> ^ <nat:3> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:H> = <var:J> \land <var:g1> = <var:J> \land <var:g2> = <var:J> ^ <nat:2> \land <var:g3> = <var:J> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ <var:g2> := <var:g2> * <nat:2> ; \\ \{ <var:H> = <var:J> \land <var:g1> = <var:J> \land <var:g2> = <nat:2> \cdot <var:J> ^ <nat:2> \land <var:g3> = <var:J> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ <var:g3> := <var:g3> * <nat:4> ; \\ \{ <var:H> = <var:J> \land <var:g1> = <var:J> \land <var:g2> = <nat:2> \cdot <var:J> ^ <nat:2> \land <var:g3> = <nat:4> \cdot <var:J> ^ <nat:3> \land <var:g0> = <nat:2> \} \\ <var:m> := <var:g3> \\ \{ <var:H> = <var:J> \land <var:g1> = <var:J> \land <var:g2> = <nat:2> \cdot <var:J> ^ <nat:2> \land <var:g0> = <nat:2> \land <var:m> = <nat:4> \cdot <var:J> ^ <nat:3> \} \\ <var:m> := <var:m> + <var:g2> \\ \{ <var:H> = <var:J> \land <var:g1> = <var:J> \land <var:g0> = <nat:2> \land <var:m> = <nat:4> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> ^ <nat:2> \} \\ <var:m> := <var:m> + <var:g0> \\ \{ <var:H> = <var:J> \land <var:m> = <nat:4> \cdot <var:J> ^ <nat:3> + <nat:2> \cdot <var:J> ^ <nat:2> + <nat:2> \} \end{eqnarray} As a consequence , this set of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Definition <def:poly> := <var:g1> := <var:H> ; <var:g2> := <var:g1> * <var:H> ; <var:g3> := <var:g2> * <var:H> ; <var:g0> := <nat:2> ; <var:g2> := <var:g2> * <nat:2> ; <var:g3> := <var:g3> * <nat:4> ; <var:m> := <var:g3> <var:m> := <var:m> + <var:g2> <var:m> := <var:m> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:H> = <var:J> }} <def:poly> {{ <var:m> = <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:g1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:g1> = <var:J> /\ <var:g2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:g1> = <var:J> /\ <var:g2> = <var:J> ^ <nat:2> /\ <var:g3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:g1> = <var:J> /\ <var:g2> = <var:J> ^ <nat:2> /\ <var:g3> = <var:J> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:g1> = <var:J> /\ <var:g2> = <nat:2> * <var:J> ^ <nat:2> /\ <var:g3> = <var:J> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:g1> = <var:J> /\ <var:g2> = <nat:2> * <var:J> ^ <nat:2> /\ <var:g3> = <nat:4> * <var:J> ^ <nat:3> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:g1> = <var:J> /\ <var:g2> = <nat:2> * <var:J> ^ <nat:2> /\ <var:g0> = <nat:2> /\ <var:m> = <nat:4> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:g1> = <var:J> /\ <var:g0> = <nat:2> /\ <var:m> = <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:J> /\ <var:m> = <nat:4> * <var:J> ^ <nat:3> + <nat:2> * <var:J> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 