\begin{document} \begin{theorem} We define the following series of instructions as \begin{verbatim} <var:N0> := <nat:5> ; <var:u> := <var:N0> \end{verbatim} Allow ( letting positive integer coefficients $ <var:i> $ ) that we have $ <var:w> = <var:i> $ before interpreting this program then we have $ <var:u> = <nat:5> $ once program is done executing . \end{theorem} \begin{proof} The proof of our segment of code is given by standard Hoare techniques . Focusing on the upcoming line found in the list of instructions , we have the variable assignmet command binding $ <nat:5> $ into $ <var:N0>$ . This redefines the condition $ \{ <var:w> = <var:i> \} $ toward the condition $ \{ <var:w> = <var:i> \land <var:N0> = <nat:5> \} $ . This is deduced with the assignment scheme given by typical Hoare reasoning . Honing in on the next bit of code seen in the series of instructions , we see the binding statement binding $ <var:N0$ to $ <var:u>$ . This advances the precondition $ \{ <var:w> = <var:i> \land <var:N0> = <nat:5> \} $ into $ \{ <var:w> = <var:i> \land <var:u> = <nat:5> \} $ . This is ensured with the assignment scheme given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:w> = <var:i> }} <var:N0> := <nat:5> ; <var:u> := <var:N0> {{ <var:u> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:i> /\ <var:u> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 