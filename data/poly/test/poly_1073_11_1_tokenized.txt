\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} as \begin{verbatim} <var:O1> := <var:x> ; <var:O2> := <var:O1> * <var:x> ; <var:O3> := <var:O2> * <var:x> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:2> ; <var:O2> := <var:O2> * <nat:2> ; <var:O3> := <var:O3> * <nat:3> ; <var:h> := <var:O3> <var:h> := <var:h> + <var:O2> <var:h> := <var:h> + <var:O1> <var:h> := <var:h> + <var:O0> \end{verbatim} Assume it to hold that $ <var:x> = <var:C> $ before interpreting the set of instructions it must be that we see $ <var:h> = <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:C> \} \\ <var:O1> := <var:x> ; \\ \{ <var:x> = <var:C> \land <var:O1> = <var:C> \} \\ <var:O2> := <var:O1> * <var:x> ; \\ \{ <var:x> = <var:C> \land <var:O1> = <var:C> \land <var:O2> = <var:C> ^ <nat:2> \} \\ <var:O3> := <var:O2> * <var:x> ; \\ \{ <var:x> = <var:C> \land <var:O1> = <var:C> \land <var:O2> = <var:C> ^ <nat:2> \land <var:O3> = <var:C> ^ <nat:3> \} \\ <var:O0> := <nat:2> ; \\ \{ <var:x> = <var:C> \land <var:O1> = <var:C> \land <var:O2> = <var:C> ^ <nat:2> \land <var:O3> = <var:C> ^ <nat:3> \land <var:O0> = <nat:2> \} \\ <var:O1> := <var:O1> * <nat:2> ; \\ \{ <var:x> = <var:C> \land <var:O1> = <nat:2> * <var:C> \land <var:O2> = <var:C> ^ <nat:2> \land <var:O3> = <var:C> ^ <nat:3> \land <var:O0> = <nat:2> \} \\ <var:O2> := <var:O2> * <nat:2> ; \\ \{ <var:x> = <var:C> \land <var:O1> = <nat:2> * <var:C> \land <var:O2> = <nat:2> * <var:C> ^ <nat:2> \land <var:O3> = <var:C> ^ <nat:3> \land <var:O0> = <nat:2> \} \\ <var:O3> := <var:O3> * <nat:3> ; \\ \{ <var:x> = <var:C> \land <var:O1> = <nat:2> * <var:C> \land <var:O2> = <nat:2> * <var:C> ^ <nat:2> \land <var:O3> = <nat:3> * <var:C> ^ <nat:3> \land <var:O0> = <nat:2> \} \\ <var:h> := <var:O3> \\ \{ <var:x> = <var:C> \land <var:O1> = <nat:2> * <var:C> \land <var:O2> = <nat:2> * <var:C> ^ <nat:2> \land <var:O0> = <nat:2> \land <var:h> = <nat:3> * <var:C> ^ <nat:3> \} \\ <var:h> := <var:h> + <var:O2> \\ \{ <var:x> = <var:C> \land <var:O1> = <nat:2> * <var:C> \land <var:O0> = <nat:2> \land <var:h> = <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:O1> \\ \{ <var:x> = <var:C> \land <var:O0> = <nat:2> \land <var:h> = <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> \} \\ <var:h> := <var:h> + <var:O0> \\ \{ <var:x> = <var:C> \land <var:h> = <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:2> \} \end{eqnarray} Applying Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <var:O3> : string := " <var:O3> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:x> = <var:C> }} <var:O1> := <var:x> ; <var:O2> := <var:O1> * <var:x> ; <var:O3> := <var:O2> * <var:x> ; <var:O0> := <nat:2> ; <var:O1> := <var:O1> * <nat:2> ; <var:O2> := <var:O2> * <nat:2> ; <var:O3> := <var:O3> * <nat:3> ; <var:h> := <var:O3> <var:h> := <var:h> + <var:O2> <var:h> := <var:h> + <var:O1> <var:h> := <var:h> + <var:O0> {{ <var:h> = <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:O1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:O1> = <var:C> /\ <var:O2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:O1> = <var:C> /\ <var:O2> = <var:C> ^ <nat:2> /\ <var:O3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:O1> = <var:C> /\ <var:O2> = <var:C> ^ <nat:2> /\ <var:O3> = <var:C> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:O1> = <nat:2> * <var:C> /\ <var:O2> = <var:C> ^ <nat:2> /\ <var:O3> = <var:C> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:O1> = <nat:2> * <var:C> /\ <var:O2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:O3> = <var:C> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:O1> = <nat:2> * <var:C> /\ <var:O2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:O3> = <nat:3> * <var:C> ^ <nat:3> /\ <var:O0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:O1> = <nat:2> * <var:C> /\ <var:O2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:O0> = <nat:2> /\ <var:h> = <nat:3> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:O1> = <nat:2> * <var:C> /\ <var:O0> = <nat:2> /\ <var:h> = <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:O0> = <nat:2> /\ <var:h> = <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:C> /\ <var:h> = <nat:3> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:2> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 