\begin{document} \begin{definition} Consider the following series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p0> := <nat:3> ; <var:p1> := <nat:2> ; <var:p1> := <var:p1> * <var:D> ; <var:d> := <var:p1> ; <var:d> := <var:d> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Allow letting whole numbers $ <var:x> $ $ <var:D> = <var:x> $ ahead of running our series of commands it follows that we see $ <var:d> = <nat:2> \cdot <var:x> + <nat:3> $ once list of commands is done executing . \end{theorem} \begin{proof} The argument for the code segment is clear through standard Hoare reasoning . Moving on to the proceeding bit of code contained in the code , we have the environment update statement \verb | <var:p0> := <nat:3> ; | . This transfers the precondition $ \{ <var:D> = <var:x> \} $ into the condition $ \{ <var:D> = <var:x> \land <var:p0> = <nat:3> \} $ . This is shown using the assignment law defined in Hoare logic . Moving forward to the upcoming line contained in our program , we have the assignment line \verb | <var:p1> := <nat:2> ; | . This command moves $ \{ <var:D> = <var:x> \land <var:p0> = <nat:3> \} $ into the postcondition $ \{ <var:D> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \} $ . This is shown by the assignment scheme from standard Hoare techniques . After , we see the variable assignmet statement defining $ <var:p1> * <var:D> $ to $ <var:p1>$ . This statement forwards the condition $ \{ <var:D> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \} $ to $ \{ <var:D> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \times <var:x> \} $ . This is given using the assignment law given by Hoare techniques . Moving forward to the next step , the binding command assigning $ <var:p1> $ into $ <var:d>$ . This advances the condition $ \{ <var:D> = <var:x> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \times <var:x> \} $ toward $ \{ <var:D> = <var:x> \land <var:p0> = <nat:3> \land <var:d> = <nat:2> \times <var:x> \} $ . Moving forward to the subsequent command contained in our set of instructions , the variable update line defining $ <var:d> + <var:p0$ as $ <var:d>$ . This command moves the precondition $ \{ <var:D> = <var:x> \land <var:p0> = <nat:3> \land <var:d> = <nat:2> \times <var:x> \} $ to the condition $ \{ <var:D> = <var:x> \land <var:d> = <nat:2> \times <var:x> + <nat:3> \} $ . This is guaranteed using the assignment inference rule defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <def:poly> := <var:p0> := <nat:3> ; <var:p1> := <nat:2> ; <var:p1> := <var:p1> * <var:D> ; <var:d> := <var:p1> ; <var:d> := <var:d> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:D> = <var:x> }} <def:poly> {{ <var:d> = <nat:2> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:p0> = <nat:3> /\ <var:d> = <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:d> = <nat:2> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 