\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y0> := <nat:2> ; <var:H> := <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:v> = <var:N> $ ( for some $ <var:N> \in \mathbb{N} $ ) prior to executing the set of instructions it must be that we see $ <var:H> = <nat:2> $ once series of instructions has exited . \end{theorem} \begin{proof} Proving correctness for our code is given with usual Hoare logic . Stepping through , we see the binding command \verb | <var:Y0> := <nat:2> ; | . This command advances the precondition $ \{ <var:v> = <var:N> \} $ as the condition $ \{ <var:v> = <var:N> \land <var:Y0> = <nat:2> \} $ . This is shown by the assignment rule of standard Hoare techniques . Observing the proceeding line of code seen in our code segment , we see the code \verb | <var:H> := <var:Y0> | . This code forwards the precondition $ \{ <var:v> = <var:N> \land <var:Y0> = <nat:2> \} $ to the postcondition $ \{ <var:v> = <var:N> \land <var:H> = <nat:2> \} $ . This is given with the assignment scheme of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <def:poly> := <var:Y0> := <nat:2> ; <var:H> := <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:v> = <var:N> }} <def:poly> {{ <var:H> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:Y0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:N> /\ <var:H> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 