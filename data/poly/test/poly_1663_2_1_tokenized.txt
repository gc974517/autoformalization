\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:R0> := <nat:1> ; <var:r> := <var:R0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:X> = <var:A> $ with some natural coefficients $ <var:A> $ before running the code , it must be that we have $ <var:r> = <nat:1> $ once list of instructions is done executing . \end{theorem} \begin{proof} The course of logic for the set of instructions can be accomplished by Hoare techniques . Focusing on the proceeding lines of codein the code , we see \[ \begin{tabular} {rcl} \{ <var:X> = <var:A> \} & <var:R0> := <nat:1> & \{ <var:X> = <var:A> \land <var:R0> = <nat:1> \} \\ \{ <var:X> = <var:A> \land <var:R0> = <nat:1> \} & <var:r> := <var:R0& \{ <var:X> = <var:A> \land <var:r> = <nat:1> \} \end{tabular} This is sound by the assignment rule defined by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <def:poly> := <var:R0> := <nat:1> ; <var:r> := <var:R0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:X> = <var:A> }} <def:poly> {{ <var:r> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:A> /\ <var:R0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:A> /\ <var:r> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 