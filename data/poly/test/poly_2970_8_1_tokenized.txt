\begin{document} \begin{theorem} Take a set of commands : \begin{verbatim} <var:I1> := <var:r> ; <var:I2> := <var:I1> * <var:r> ; <var:I0> := <nat:2> ; <var:I1> := <var:I1> * <nat:3> ; <var:I2> := <var:I2> * <nat:4> ; <var:v> := <var:I2> <var:v> := <var:v> + <var:I1> <var:v> := <var:v> + <var:I0> \end{verbatim} Allowing $ <var:r> = <var:R> $ letting positive integers $ <var:R> $ prior to the execution of this code segment , it must be that we see $ <var:v> = <nat:4> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code segment is done with Hoare logic . Moving forward , we have \verb | { <var:r> = <var:R> } <var:I1> := <var:r> { <var:r> = <var:R> \land <var:I1> = <var:R> } | , \verb | { <var:r> = <var:R> \land <var:I1> = <var:R> } <var:I2> := <var:I1> * <var:r> { <var:r> = <var:R> \land <var:I1> = <var:R> \land <var:I2> = <var:R> ^ <nat:2> } | , \verb | { <var:r> = <var:R> \land <var:I1> = <var:R> \land <var:I2> = <var:R> ^ <nat:2> } <var:I0> := <nat:2> { <var:r> = <var:R> \land <var:I1> = <var:R> \land <var:I2> = <var:R> ^ <nat:2> \land <var:I0> = <nat:2> } | , \verb | { <var:r> = <var:R> \land <var:I1> = <var:R> \land <var:I2> = <var:R> ^ <nat:2> \land <var:I0> = <nat:2> } <var:I1> := <var:I1> * <nat:3> { <var:r> = <var:R> \land <var:I1> = <nat:3> \cdot <var:R> \land <var:I2> = <var:R> ^ <nat:2> \land <var:I0> = <nat:2> } | , \verb | { <var:r> = <var:R> \land <var:I1> = <nat:3> \cdot <var:R> \land <var:I2> = <var:R> ^ <nat:2> \land <var:I0> = <nat:2> } <var:I2> := <var:I2> * <nat:4> { <var:r> = <var:R> \land <var:I1> = <nat:3> \cdot <var:R> \land <var:I2> = <nat:4> \cdot <var:R> ^ <nat:2> \land <var:I0> = <nat:2> } | , \verb | { <var:r> = <var:R> \land <var:I1> = <nat:3> \cdot <var:R> \land <var:I2> = <nat:4> \cdot <var:R> ^ <nat:2> \land <var:I0> = <nat:2> } <var:v> := <var:I2{ <var:r> = <var:R> \land <var:I1> = <nat:3> \cdot <var:R> \land <var:I0> = <nat:2> \land <var:v> = <nat:4> \cdot <var:R> ^ <nat:2> } | , \verb | { <var:r> = <var:R> \land <var:I1> = <nat:3> \cdot <var:R> \land <var:I0> = <nat:2> \land <var:v> = <nat:4> \cdot <var:R> ^ <nat:2> } <var:v> := <var:v> + <var:I1{ <var:r> = <var:R> \land <var:I0> = <nat:2> \land <var:v> = <nat:4> \cdot <var:R> ^ <nat:2> + <nat:3> \cdot <var:R> } | and \verb | { <var:r> = <var:R> \land <var:I0> = <nat:2> \land <var:v> = <nat:4> \cdot <var:R> ^ <nat:2> + <nat:3> \cdot <var:R> } <var:v> := <var:v> + <var:I0{ <var:r> = <var:R> \land <var:v> = <nat:4> \cdot <var:R> ^ <nat:2> + <nat:3> \cdot <var:R> + <nat:2> } | . This is known to be sound using the assignment law from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:r> = <var:R> }} <var:I1> := <var:r> ; <var:I2> := <var:I1> * <var:r> ; <var:I0> := <nat:2> ; <var:I1> := <var:I1> * <nat:3> ; <var:I2> := <var:I2> * <nat:4> ; <var:v> := <var:I2> <var:v> := <var:v> + <var:I1> <var:v> := <var:v> + <var:I0> {{ <var:v> = <nat:4> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:I1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:I1> = <var:R> /\ <var:I2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:I1> = <var:R> /\ <var:I2> = <var:R> ^ <nat:2> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:I1> = <nat:3> * <var:R> /\ <var:I2> = <var:R> ^ <nat:2> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:I1> = <nat:3> * <var:R> /\ <var:I2> = <nat:4> * <var:R> ^ <nat:2> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:I1> = <nat:3> * <var:R> /\ <var:I0> = <nat:2> /\ <var:v> = <nat:4> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:I0> = <nat:2> /\ <var:v> = <nat:4> * <var:R> ^ <nat:2> + <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:v> = <nat:4> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 