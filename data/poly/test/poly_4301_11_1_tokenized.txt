\begin{document} \begin{theorem} Let the following segment of code as follows \begin{verbatim} <var:x1> := <var:Q> ; <var:x2> := <var:x1> * <var:Q> ; <var:x3> := <var:x2> * <var:Q> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:8> ; <var:x2> := <var:x2> * <nat:7> ; <var:x3> := <var:x3> * <nat:8> ; <var:U> := <var:x3> <var:U> := <var:U> + <var:x2> <var:U> := <var:U> + <var:x1> <var:U> := <var:U> + <var:x0> \end{verbatim} Assuming it to hold that $ <var:Q> = <var:A> $ ( taking natural coefficients $ <var:A> $ ) before running our segment of code , it must be that we have $ <var:U> = <nat:8> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:4> $ . \end{theorem} \begin{proof} Observe that this decorated code . \begin{eqnarray} \{ <var:Q> = <var:A> \} \\ <var:x1> := <var:Q> ; \\ \{ <var:Q> = <var:A> \land <var:x1> = <var:A> \} \\ <var:x2> := <var:x1> * <var:Q> ; \\ \{ <var:Q> = <var:A> \land <var:x1> = <var:A> \land <var:x2> = <var:A> ^ <nat:2> \} \\ <var:x3> := <var:x2> * <var:Q> ; \\ \{ <var:Q> = <var:A> \land <var:x1> = <var:A> \land <var:x2> = <var:A> ^ <nat:2> \land <var:x3> = <var:A> ^ <nat:3> \} \\ <var:x0> := <nat:4> ; \\ \{ <var:Q> = <var:A> \land <var:x1> = <var:A> \land <var:x2> = <var:A> ^ <nat:2> \land <var:x3> = <var:A> ^ <nat:3> \land <var:x0> = <nat:4> \} \\ <var:x1> := <var:x1> * <nat:8> ; \\ \{ <var:Q> = <var:A> \land <var:x1> = <nat:8> \times <var:A> \land <var:x2> = <var:A> ^ <nat:2> \land <var:x3> = <var:A> ^ <nat:3> \land <var:x0> = <nat:4> \} \\ <var:x2> := <var:x2> * <nat:7> ; \\ \{ <var:Q> = <var:A> \land <var:x1> = <nat:8> \times <var:A> \land <var:x2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:x3> = <var:A> ^ <nat:3> \land <var:x0> = <nat:4> \} \\ <var:x3> := <var:x3> * <nat:8> ; \\ \{ <var:Q> = <var:A> \land <var:x1> = <nat:8> \times <var:A> \land <var:x2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:x3> = <nat:8> \times <var:A> ^ <nat:3> \land <var:x0> = <nat:4> \} \\ <var:U> := <var:x3> \\ \{ <var:Q> = <var:A> \land <var:x1> = <nat:8> \times <var:A> \land <var:x2> = <nat:7> \times <var:A> ^ <nat:2> \land <var:x0> = <nat:4> \land <var:U> = <nat:8> \times <var:A> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:x2> \\ \{ <var:Q> = <var:A> \land <var:x1> = <nat:8> \times <var:A> \land <var:x0> = <nat:4> \land <var:U> = <nat:8> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:x1> \\ \{ <var:Q> = <var:A> \land <var:x0> = <nat:4> \land <var:U> = <nat:8> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> + <nat:8> \times <var:A> \} \end{eqnarray} Allowing running the list of instructions gives us : \begin{eqnarray} <var:U> := <var:U> + <var:x0> \\ \{ <var:Q> = <var:A> \land <var:U> = <nat:8> \times <var:A> ^ <nat:3> + <nat:7> \times <var:A> ^ <nat:2> + <nat:8> \times <var:A> + <nat:4> \} \end{eqnarray} Using usual Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:Q> = <var:A> }} <var:x1> := <var:Q> ; <var:x2> := <var:x1> * <var:Q> ; <var:x3> := <var:x2> * <var:Q> ; <var:x0> := <nat:4> ; <var:x1> := <var:x1> * <nat:8> ; <var:x2> := <var:x2> * <nat:7> ; <var:x3> := <var:x3> * <nat:8> ; <var:U> := <var:x3> <var:U> := <var:U> + <var:x2> <var:U> := <var:U> + <var:x1> <var:U> := <var:U> + <var:x0> {{ <var:U> = <nat:8> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:x1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:x1> = <var:A> /\ <var:x2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:x1> = <var:A> /\ <var:x2> = <var:A> ^ <nat:2> /\ <var:x3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:x1> = <var:A> /\ <var:x2> = <var:A> ^ <nat:2> /\ <var:x3> = <var:A> ^ <nat:3> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:x1> = <nat:8> * <var:A> /\ <var:x2> = <var:A> ^ <nat:2> /\ <var:x3> = <var:A> ^ <nat:3> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:x1> = <nat:8> * <var:A> /\ <var:x2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:x3> = <var:A> ^ <nat:3> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:x1> = <nat:8> * <var:A> /\ <var:x2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:x3> = <nat:8> * <var:A> ^ <nat:3> /\ <var:x0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:x1> = <nat:8> * <var:A> /\ <var:x2> = <nat:7> * <var:A> ^ <nat:2> /\ <var:x0> = <nat:4> /\ <var:U> = <nat:8> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:x1> = <nat:8> * <var:A> /\ <var:x0> = <nat:4> /\ <var:U> = <nat:8> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:x0> = <nat:4> /\ <var:U> = <nat:8> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:8> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:A> /\ <var:U> = <nat:8> * <var:A> ^ <nat:3> + <nat:7> * <var:A> ^ <nat:2> + <nat:8> * <var:A> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 