\begin{document} \begin{theorem} Let the following program as \begin{verbatim} <var:U1> := <var:B> ; <var:U2> := <var:U1> * <var:B> ; <var:U3> := <var:U2> * <var:B> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:4> ; <var:U3> := <var:U3> * <nat:2> ; <var:x> := <var:U3> <var:x> := <var:x> + <var:U1> <var:x> := <var:x> + <var:U0> \end{verbatim} Assuming , given all integers $ <var:A> $ , that we have $ <var:B> = <var:A> $ before evaluating the code segment it follows that we have $ <var:x> = <nat:2> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> + <nat:3> $ once code has terminated . \end{theorem} \begin{proof} Showing our claim about correctness for the list of instructions can be given using Hoare reasoning . Moving on , we have \begin{eqnarray} \{ <var:B> = <var:A> \} \, <var:U1> := <var:B> \, \{ <var:B> = <var:A> \land <var:U1> = <var:A> \} \\ \{ <var:B> = <var:A> \land <var:U1> = <var:A> \} \, <var:U2> := <var:U1> * <var:B> \, \{ <var:B> = <var:A> \land <var:U1> = <var:A> \land <var:U2> = <var:A> ^ <nat:2> \} \\ \{ <var:B> = <var:A> \land <var:U1> = <var:A> \land <var:U2> = <var:A> ^ <nat:2> \} \, <var:U3> := <var:U2> * <var:B> \, \{ <var:B> = <var:A> \land <var:U1> = <var:A> \land <var:U2> = <var:A> ^ <nat:2> \land <var:U3> = <var:A> ^ <nat:3> \} \\ \{ <var:B> = <var:A> \land <var:U1> = <var:A> \land <var:U2> = <var:A> ^ <nat:2> \land <var:U3> = <var:A> ^ <nat:3> \} \, <var:U0> := <nat:3> \, \{ <var:B> = <var:A> \land <var:U1> = <var:A> \land <var:U2> = <var:A> ^ <nat:2> \land <var:U3> = <var:A> ^ <nat:3> \land <var:U0> = <nat:3> \} \end{eqnarray} Paying attention to the proceeding steps in our set of instructions , we see \begin{eqnarray} \{ <var:B> = <var:A> \} \, <var:U1> := <var:B> \, \{ <var:B> = <var:A> \land <var:U1> = <var:A> \} \\ \{ <var:B> = <var:A> \land <var:U1> = <var:A> \} \, <var:U2> := <var:U1> * <var:B> \, \{ <var:B> = <var:A> \land <var:U1> = <var:A> \land <var:U2> = <var:A> ^ <nat:2> \} \\ \{ <var:B> = <var:A> \land <var:U1> = <var:A> \land <var:U2> = <var:A> ^ <nat:2> \} \, <var:U3> := <var:U2> * <var:B> \, \{ <var:B> = <var:A> \land <var:U1> = <var:A> \land <var:U2> = <var:A> ^ <nat:2> \land <var:U3> = <var:A> ^ <nat:3> \} \end{eqnarray} This is sound with the rule found in standard Hoare reasoning . Taking a look at the proceeding bits of codecontained in our set of commands , we see \begin{eqnarray} \{ <var:B> = <var:A> \} \, <var:U1> := <var:B> \, \{ <var:B> = <var:A> \land <var:U1> = <var:A> \} \\ \{ <var:B> = <var:A> \land <var:U1> = <var:A> \} \, <var:U2> := <var:U1> * <var:B> \, \{ <var:B> = <var:A> \land <var:U1> = <var:A> \land <var:U2> = <var:A> ^ <nat:2> \} \end{eqnarray} This is ensured using the assignment rule from usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:B> = <var:A> }} <var:U1> := <var:B> ; <var:U2> := <var:U1> * <var:B> ; <var:U3> := <var:U2> * <var:B> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:4> ; <var:U3> := <var:U3> * <nat:2> ; <var:x> := <var:U3> <var:x> := <var:x> + <var:U1> <var:x> := <var:x> + <var:U0> {{ <var:x> = <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:U1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:U1> = <var:A> /\ <var:U2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:U1> = <var:A> /\ <var:U2> = <var:A> ^ <nat:2> /\ <var:U3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:U1> = <var:A> /\ <var:U2> = <var:A> ^ <nat:2> /\ <var:U3> = <var:A> ^ <nat:3> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:U1> = <nat:4> * <var:A> /\ <var:U2> = <var:A> ^ <nat:2> /\ <var:U3> = <var:A> ^ <nat:3> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:U1> = <nat:4> * <var:A> /\ <var:U2> = <var:A> ^ <nat:2> /\ <var:U3> = <nat:2> * <var:A> ^ <nat:3> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:U1> = <nat:4> * <var:A> /\ <var:U2> = <var:A> ^ <nat:2> /\ <var:U0> = <nat:3> /\ <var:x> = <nat:2> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:U0> = <nat:3> /\ <var:x> = <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:A> /\ <var:x> = <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 