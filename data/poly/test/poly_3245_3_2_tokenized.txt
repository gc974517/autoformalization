\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M> := <nat:2> ; <var:M> := <nat:1> + <var:M> * <var:k> ; <var:M> := <nat:3> + <var:M> * <var:k> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:k> = <var:q> $ prior to running our set of instructions then we have $ <var:M> = <nat:2> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions can be seen using Hoare techniques . Focusing on the next piece of code seen in our program , we have the assignment code \verb | <var:M> := <nat:2> ; | . This command moves the precondition $ \{ <var:k> = <var:q> \} $ to the postcondition $ \{ <var:k> = <var:q> \land <var:M> = <nat:2> \} $ . This is sound through the assignment law defined in standard Hoare techniques . Shifting focus toward the next step seen in our set of commands , we have the variable binding command yielding $ <nat:1> + <var:M> * <var:k> $ as $ <var:M>$ . This advances $ \{ <var:k> = <var:q> \land <var:M> = <nat:2> \} $ toward $ \{ <var:k> = <var:q> \land <var:M> = <nat:2> * <var:q> + <nat:1> \} $ . Looking at the upcoming piece of code contained in our list of commands , we see the binding statement \verb | <var:M> := <nat:3> + <var:M> * <var:k> | . This code redefines the precondition $ \{ <var:k> = <var:q> \land <var:M> = <nat:2> * <var:q> + <nat:1> \} $ toward $ \{ <var:k> = <var:q> \land <var:M> = <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> \} $ . This is ensured using the assignment inference rule of standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:2> ; <var:M> := <nat:1> + <var:M> * <var:k> ; <var:M> := <nat:3> + <var:M> * <var:k> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:k> = <var:q> }} <def:poly> {{ <var:M> = <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:M> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:M> = <nat:2> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:q> /\ <var:M> = <nat:2> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 