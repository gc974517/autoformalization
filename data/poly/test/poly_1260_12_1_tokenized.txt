\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q1> := <var:v> ; <var:Q2> := <var:Q1> * <var:v> ; <var:Q3> := <var:Q2> * <var:v> ; <var:Q4> := <var:Q3> * <var:v> ; <var:Q0> := <nat:8> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:Q2> := <var:Q2> * <nat:4> ; <var:Q4> := <var:Q4> * <nat:6> ; <var:I> := <var:Q4> <var:I> := <var:I> + <var:Q2> <var:I> := <var:I> + <var:Q1> <var:I> := <var:I> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allowing that we have $ <var:v> = <var:j> $ ahead of interpreting this list of instructions it follows that we have $ <var:I> = <nat:6> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:8> $ after program exits . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is shown by standard Hoare techniques . Observing the subsequent command found in the program , the command \verb | <var:Q1> := <var:v> ; | . This transfers the condition $ \{ <var:v> = <var:j> \} $ to $ \{ <var:v> = <var:j> \land <var:Q1> = <var:j> \} $ . Looking at the following bit of code contained in our set of instructions , we see the environment update code \verb | <var:Q2> := <var:Q1> * <var:v> ; | . This takes the condition $ \{ <var:v> = <var:j> \land <var:Q1> = <var:j> \} $ to the postcondition $ \{ <var:v> = <var:j> \land <var:Q1> = <var:j> \land <var:Q2> = <var:j> ^ <nat:2> \} $ . Observing the subsequent statement seen in the list of commands , we see the variable binding line \verb | <var:Q3> := <var:Q2> * <var:v> ; | . This advances the precondition $ \{ <var:v> = <var:j> \land <var:Q1> = <var:j> \land <var:Q2> = <var:j> ^ <nat:2> \} $ to $ \{ <var:v> = <var:j> \land <var:Q1> = <var:j> \land <var:Q2> = <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \} $ . This is shown with the assignment inference rule obtained from usual Hoare reasoning . Focusing on the proceeding bit of code found in the program , the environment update command binding $ <var:Q3> * <var:v> $ toward $ <var:Q4>$ . This redefines $ \{ <var:v> = <var:j> \land <var:Q1> = <var:j> \land <var:Q2> = <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \} $ to $ \{ <var:v> = <var:j> \land <var:Q1> = <var:j> \land <var:Q2> = <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \land <var:Q4> = <var:j> ^ <nat:4> \} $ . Taking another step toward the following line of code found in our list of instructions , we have the variable binding command letting $ <nat:8> $ as $ <var:Q0>$ . This command moves $ \{ <var:v> = <var:j> \land <var:Q1> = <var:j> \land <var:Q2> = <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \land <var:Q4> = <var:j> ^ <nat:4> \} $ toward the postcondition $ \{ <var:v> = <var:j> \land <var:Q1> = <var:j> \land <var:Q2> = <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \land <var:Q4> = <var:j> ^ <nat:4> \land <var:Q0> = <nat:8> \} $ . Immediately following , the variable update code \verb | <var:Q1> := <var:Q1> * <nat:6> ; | . This moves $ \{ <var:v> = <var:j> \land <var:Q1> = <var:j> \land <var:Q2> = <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \land <var:Q4> = <var:j> ^ <nat:4> \land <var:Q0> = <nat:8> \} $ to the condition $ \{ <var:v> = <var:j> \land <var:Q1> = <nat:6> \times <var:j> \land <var:Q2> = <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \land <var:Q4> = <var:j> ^ <nat:4> \land <var:Q0> = <nat:8> \} $ . Observing the upcoming command seen in our segment of code , we see the variable binding command \verb | <var:Q2> := <var:Q2> * <nat:4> ; | . This statement redefines the condition $ \{ <var:v> = <var:j> \land <var:Q1> = <nat:6> \times <var:j> \land <var:Q2> = <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \land <var:Q4> = <var:j> ^ <nat:4> \land <var:Q0> = <nat:8> \} $ into the condition $ \{ <var:v> = <var:j> \land <var:Q1> = <nat:6> \times <var:j> \land <var:Q2> = <nat:4> \times <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \land <var:Q4> = <var:j> ^ <nat:4> \land <var:Q0> = <nat:8> \} $ . Taking another step toward the upcoming piece of code found in our list of commands , we have the assignment command defining $ <var:Q4> * <nat:6> $ as $ <var:Q4>$ . This statement takes the condition $ \{ <var:v> = <var:j> \land <var:Q1> = <nat:6> \times <var:j> \land <var:Q2> = <nat:4> \times <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \land <var:Q4> = <var:j> ^ <nat:4> \land <var:Q0> = <nat:8> \} $ into the condition $ \{ <var:v> = <var:j> \land <var:Q1> = <nat:6> \times <var:j> \land <var:Q2> = <nat:4> \times <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \land <var:Q4> = <nat:6> \times <var:j> ^ <nat:4> \land <var:Q0> = <nat:8> \} $ . Moving on , we have the assignment command letting $ <var:Q4$ to $ <var:I>$ . This forwards the condition $ \{ <var:v> = <var:j> \land <var:Q1> = <nat:6> \times <var:j> \land <var:Q2> = <nat:4> \times <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \land <var:Q4> = <nat:6> \times <var:j> ^ <nat:4> \land <var:Q0> = <nat:8> \} $ to the postcondition $ \{ <var:v> = <var:j> \land <var:Q1> = <nat:6> \times <var:j> \land <var:Q2> = <nat:4> \times <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \land <var:Q0> = <nat:8> \land <var:I> = <nat:6> \times <var:j> ^ <nat:4> \} $ . Considering the upcoming line in the code segment , we see the command \verb | <var:I> := <var:I> + <var:Q2> | . This command takes the precondition $ \{ <var:v> = <var:j> \land <var:Q1> = <nat:6> \times <var:j> \land <var:Q2> = <nat:4> \times <var:j> ^ <nat:2> \land <var:Q3> = <var:j> ^ <nat:3> \land <var:Q0> = <nat:8> \land <var:I> = <nat:6> \times <var:j> ^ <nat:4> \} $ as $ \{ <var:v> = <var:j> \land <var:Q1> = <nat:6> \times <var:j> \land <var:Q0> = <nat:8> \land <var:I> = <nat:6> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:2> \} $ . This is ensured through the assignment scheme found in Hoare techniques . Taking another step toward the upcoming step contained in our series of instructions , we have the environment update code \verb | <var:I> := <var:I> + <var:Q1> | . This advances $ \{ <var:v> = <var:j> \land <var:Q1> = <nat:6> \times <var:j> \land <var:Q0> = <nat:8> \land <var:I> = <nat:6> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:2> \} $ as $ \{ <var:v> = <var:j> \land <var:Q0> = <nat:8> \land <var:I> = <nat:6> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:2> + <nat:6> \times <var:j> \} $ . This is shown using the assignment law defined by typical Hoare techniques . Advancing to the next step , we have the variable update line defining $ <var:I> + <var:Q0$ into $ <var:I>$ . This redefines the precondition $ \{ <var:v> = <var:j> \land <var:Q0> = <nat:8> \land <var:I> = <nat:6> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:2> + <nat:6> \times <var:j> \} $ as the condition $ \{ <var:v> = <var:j> \land <var:I> = <nat:6> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:2> + <nat:6> \times <var:j> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Definition <var:Q4> : string := " <var:Q4> " . Definition <def:poly> := <var:Q1> := <var:v> ; <var:Q2> := <var:Q1> * <var:v> ; <var:Q3> := <var:Q2> * <var:v> ; <var:Q4> := <var:Q3> * <var:v> ; <var:Q0> := <nat:8> ; <var:Q1> := <var:Q1> * <nat:6> ; <var:Q2> := <var:Q2> * <nat:4> ; <var:Q4> := <var:Q4> * <nat:6> ; <var:I> := <var:Q4> <var:I> := <var:I> + <var:Q2> <var:I> := <var:I> + <var:Q1> <var:I> := <var:I> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:v> = <var:j> }} <def:poly> {{ <var:I> = <nat:6> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Q1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Q1> = <var:j> /\ <var:Q2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Q1> = <var:j> /\ <var:Q2> = <var:j> ^ <nat:2> /\ <var:Q3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Q1> = <var:j> /\ <var:Q2> = <var:j> ^ <nat:2> /\ <var:Q3> = <var:j> ^ <nat:3> /\ <var:Q4> = <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Q1> = <var:j> /\ <var:Q2> = <var:j> ^ <nat:2> /\ <var:Q3> = <var:j> ^ <nat:3> /\ <var:Q4> = <var:j> ^ <nat:4> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Q1> = <nat:6> * <var:j> /\ <var:Q2> = <var:j> ^ <nat:2> /\ <var:Q3> = <var:j> ^ <nat:3> /\ <var:Q4> = <var:j> ^ <nat:4> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Q1> = <nat:6> * <var:j> /\ <var:Q2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:Q3> = <var:j> ^ <nat:3> /\ <var:Q4> = <var:j> ^ <nat:4> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Q1> = <nat:6> * <var:j> /\ <var:Q2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:Q3> = <var:j> ^ <nat:3> /\ <var:Q4> = <nat:6> * <var:j> ^ <nat:4> /\ <var:Q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Q1> = <nat:6> * <var:j> /\ <var:Q2> = <nat:4> * <var:j> ^ <nat:2> /\ <var:Q3> = <var:j> ^ <nat:3> /\ <var:Q0> = <nat:8> /\ <var:I> = <nat:6> * <var:j> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Q1> = <nat:6> * <var:j> /\ <var:Q0> = <nat:8> /\ <var:I> = <nat:6> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:Q0> = <nat:8> /\ <var:I> = <nat:6> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:2> + <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:j> /\ <var:I> = <nat:6> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:2> + <nat:6> * <var:j> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 