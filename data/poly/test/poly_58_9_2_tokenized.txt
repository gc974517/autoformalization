\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Y> := <nat:1> ; <var:Y> := <nat:3> + <var:Y> * <var:m> ; <var:Y> := <nat:1> + <var:Y> * <var:m> ; <var:Y> := <nat:3> + <var:Y> * <var:m> ; <var:Y> := <nat:4> + <var:Y> * <var:m> ; <var:Y> := <nat:4> + <var:Y> * <var:m> ; <var:Y> := <nat:3> + <var:Y> * <var:m> ; <var:Y> := <nat:3> + <var:Y> * <var:m> ; <var:Y> := <nat:3> + <var:Y> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Assuming that we have $ <var:m> = <var:s> $ --- letting $ <var:s> \in \mathbb{N} $ --- prior to evaluating our set of instructions it follows that we see $ <var:Y> = <nat:1> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:7> + <nat:1> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands is done by typical Hoare logic . Considering the next line contained in our series of instructions , we have the code giving $ <nat:1> $ toward $ <var:Y>$ . This code moves the precondition $ \{ <var:m> = <var:s> \} $ into the condition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> \} $ . Advancing on , the environment update statement yielding $ <nat:3> + <var:Y> * <var:m> $ toward $ <var:Y>$ . This forwards the precondition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> \} $ into $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> + <nat:3> \} $ . Observing the subsequent piece of code contained in the code segment , we see the line giving $ <nat:1> + <var:Y> * <var:m> $ toward $ <var:Y>$ . This code takes the precondition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> + <nat:3> \} $ toward $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:1> \} $ . This is sound by the assignment law defined by typical Hoare logic . Further , the binding code defining $ <nat:3> + <var:Y> * <var:m> $ to $ <var:Y>$ . This statement advances the condition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:1> \} $ into the condition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:3> \} $ . Taking a look at the subsequent statement found in the program , we have the command giving $ <nat:4> + <var:Y> * <var:m> $ as $ <var:Y>$ . This advances the precondition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:3> \} $ toward the postcondition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> \} $ . This is known to be sound with the assignment law of usual Hoare reasoning . Jumping to the upcoming command found in our series of commands , we have the environment update command \verb | <var:Y> := <nat:4> + <var:Y> * <var:m> ; | . This statement takes the condition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> \} $ to the postcondition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> \} $ . Following , the variable update statement \verb | <var:Y> := <nat:3> + <var:Y> * <var:m> ; | . This takes the precondition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> \} $ toward the postcondition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> \} $ . This is known to be sound with the assignment rule found in typical Hoare reasoning . Focusing on the proceeding command found in our list of instructions , we have the variable binding command \verb | <var:Y> := <nat:3> + <var:Y> * <var:m> ; | . This line redefines the precondition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> \} $ toward the condition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:1> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> \} $ . This is shown to be logically sound through the assignment inference rule of Hoare logic . Moving forward to the following step contained in our set of instructions , we have the assignment code letting $ <nat:3> + <var:Y> * <var:m$ to $ <var:Y>$ . This statement advances the precondition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:1> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> \} $ toward the postcondition $ \{ <var:m> = <var:s> \land <var:Y> = <nat:1> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:7> + <nat:1> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> \} $ . This is deduced through the assignment rule found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Y> := <nat:1> ; <var:Y> := <nat:3> + <var:Y> * <var:m> ; <var:Y> := <nat:1> + <var:Y> * <var:m> ; <var:Y> := <nat:3> + <var:Y> * <var:m> ; <var:Y> := <nat:4> + <var:Y> * <var:m> ; <var:Y> := <nat:4> + <var:Y> * <var:m> ; <var:Y> := <nat:3> + <var:Y> * <var:m> ; <var:Y> := <nat:3> + <var:Y> * <var:m> ; <var:Y> := <nat:3> + <var:Y> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:m> = <var:s> }} <def:poly> {{ <var:Y> = <nat:1> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:7> + <nat:1> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:Y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:Y> = <nat:1> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:Y> = <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:Y> = <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:Y> = <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:Y> = <nat:1> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:Y> = <nat:1> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:Y> = <nat:1> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:1> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:s> /\ <var:Y> = <nat:1> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:7> + <nat:1> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 