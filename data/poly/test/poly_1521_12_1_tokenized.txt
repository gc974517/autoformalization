\begin{document} \begin{theorem} We define a list of instructions in \emph{Imp} : \begin{verbatim} <var:C1> := <var:I> ; <var:C2> := <var:C1> * <var:I> ; <var:C3> := <var:C2> * <var:I> ; <var:C4> := <var:C3> * <var:I> ; <var:C0> := <nat:2> ; <var:C1> := <var:C1> * <nat:6> ; <var:C3> := <var:C3> * <nat:3> ; <var:C4> := <var:C4> * <nat:8> ; <var:G> := <var:C4> <var:G> := <var:G> + <var:C3> <var:G> := <var:G> + <var:C1> <var:G> := <var:G> + <var:C0> \end{verbatim} Given --- given all positive integer coefficients $ <var:Y> $ --- it to be that $ <var:I> = <var:Y> $ prior to running this code it follows that $ <var:G> = <nat:8> \cdot <var:Y> ^ <nat:4> + <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:6> \cdot <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:I> = <var:Y> \} \\ <var:C1> := <var:I> ; \\ \{ <var:I> = <var:Y> \land <var:C1> = <var:Y> \} \\ <var:C2> := <var:C1> * <var:I> ; \\ \{ <var:I> = <var:Y> \land <var:C1> = <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \} \\ <var:C3> := <var:C2> * <var:I> ; \\ \{ <var:I> = <var:Y> \land <var:C1> = <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C3> = <var:Y> ^ <nat:3> \} \\ <var:C4> := <var:C3> * <var:I> ; \\ \{ <var:I> = <var:Y> \land <var:C1> = <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C3> = <var:Y> ^ <nat:3> \land <var:C4> = <var:Y> ^ <nat:4> \} \\ <var:C0> := <nat:2> ; \\ \{ <var:I> = <var:Y> \land <var:C1> = <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C3> = <var:Y> ^ <nat:3> \land <var:C4> = <var:Y> ^ <nat:4> \land <var:C0> = <nat:2> \} \\ <var:C1> := <var:C1> * <nat:6> ; \\ \{ <var:I> = <var:Y> \land <var:C1> = <nat:6> \cdot <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C3> = <var:Y> ^ <nat:3> \land <var:C4> = <var:Y> ^ <nat:4> \land <var:C0> = <nat:2> \} \\ <var:C3> := <var:C3> * <nat:3> ; \\ \{ <var:I> = <var:Y> \land <var:C1> = <nat:6> \cdot <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C3> = <nat:3> \cdot <var:Y> ^ <nat:3> \land <var:C4> = <var:Y> ^ <nat:4> \land <var:C0> = <nat:2> \} \\ <var:C4> := <var:C4> * <nat:8> ; \\ \{ <var:I> = <var:Y> \land <var:C1> = <nat:6> \cdot <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C3> = <nat:3> \cdot <var:Y> ^ <nat:3> \land <var:C4> = <nat:8> \cdot <var:Y> ^ <nat:4> \land <var:C0> = <nat:2> \} \\ <var:G> := <var:C4> \\ \{ <var:I> = <var:Y> \land <var:C1> = <nat:6> \cdot <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C3> = <nat:3> \cdot <var:Y> ^ <nat:3> \land <var:C0> = <nat:2> \land <var:G> = <nat:8> \cdot <var:Y> ^ <nat:4> \} \\ <var:G> := <var:G> + <var:C3> \\ \{ <var:I> = <var:Y> \land <var:C1> = <nat:6> \cdot <var:Y> \land <var:C2> = <var:Y> ^ <nat:2> \land <var:C0> = <nat:2> \land <var:G> = <nat:8> \cdot <var:Y> ^ <nat:4> + <nat:3> \cdot <var:Y> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:C1> \\ \{ <var:I> = <var:Y> \land <var:C0> = <nat:2> \land <var:G> = <nat:8> \cdot <var:Y> ^ <nat:4> + <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:6> \cdot <var:Y> \} \\ <var:G> := <var:G> + <var:C0> \\ \{ <var:I> = <var:Y> \land <var:G> = <nat:8> \cdot <var:Y> ^ <nat:4> + <nat:3> \cdot <var:Y> ^ <nat:3> + <nat:6> \cdot <var:Y> + <nat:2> \} \end{eqnarray} Considering the preceding argument , this code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <var:C4> : string := " <var:C4> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:I> = <var:Y> }} <var:C1> := <var:I> ; <var:C2> := <var:C1> * <var:I> ; <var:C3> := <var:C2> * <var:I> ; <var:C4> := <var:C3> * <var:I> ; <var:C0> := <nat:2> ; <var:C1> := <var:C1> * <nat:6> ; <var:C3> := <var:C3> * <nat:3> ; <var:C4> := <var:C4> * <nat:8> ; <var:G> := <var:C4> <var:G> := <var:G> + <var:C3> <var:G> := <var:G> + <var:C1> <var:G> := <var:G> + <var:C0> {{ <var:G> = <nat:8> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:Y> /\ <var:C1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Y> /\ <var:C1> = <var:Y> /\ <var:C2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Y> /\ <var:C1> = <var:Y> /\ <var:C2> = <var:Y> ^ <nat:2> /\ <var:C3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Y> /\ <var:C1> = <var:Y> /\ <var:C2> = <var:Y> ^ <nat:2> /\ <var:C3> = <var:Y> ^ <nat:3> /\ <var:C4> = <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Y> /\ <var:C1> = <var:Y> /\ <var:C2> = <var:Y> ^ <nat:2> /\ <var:C3> = <var:Y> ^ <nat:3> /\ <var:C4> = <var:Y> ^ <nat:4> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Y> /\ <var:C1> = <nat:6> * <var:Y> /\ <var:C2> = <var:Y> ^ <nat:2> /\ <var:C3> = <var:Y> ^ <nat:3> /\ <var:C4> = <var:Y> ^ <nat:4> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Y> /\ <var:C1> = <nat:6> * <var:Y> /\ <var:C2> = <var:Y> ^ <nat:2> /\ <var:C3> = <nat:3> * <var:Y> ^ <nat:3> /\ <var:C4> = <var:Y> ^ <nat:4> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Y> /\ <var:C1> = <nat:6> * <var:Y> /\ <var:C2> = <var:Y> ^ <nat:2> /\ <var:C3> = <nat:3> * <var:Y> ^ <nat:3> /\ <var:C4> = <nat:8> * <var:Y> ^ <nat:4> /\ <var:C0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Y> /\ <var:C1> = <nat:6> * <var:Y> /\ <var:C2> = <var:Y> ^ <nat:2> /\ <var:C3> = <nat:3> * <var:Y> ^ <nat:3> /\ <var:C0> = <nat:2> /\ <var:G> = <nat:8> * <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Y> /\ <var:C1> = <nat:6> * <var:Y> /\ <var:C2> = <var:Y> ^ <nat:2> /\ <var:C0> = <nat:2> /\ <var:G> = <nat:8> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Y> /\ <var:C0> = <nat:2> /\ <var:G> = <nat:8> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Y> /\ <var:G> = <nat:8> * <var:Y> ^ <nat:4> + <nat:3> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 