\begin{document} \begin{theorem} Consider the following program in \emph{Imp} as \begin{verbatim} <var:f0> := <nat:4> ; <var:z> := <var:f0> \end{verbatim} Assume $ <var:a> = <var:d> $ prior to executing the series of commands it must be that we have $ <var:z> = <nat:4> $ . \end{theorem} \begin{proof} Applying Hoare logic returns : \begin{eqnarray} \{ <var:a> = <var:d> \} \\ <var:f0> := <nat:4> ; \\ \{ <var:a> = <var:d> \land <var:f0> = <nat:4> \} \\ <var:z> := <var:f0> \\ \{ <var:a> = <var:d> \land <var:z> = <nat:4> \} \end{eqnarray} Thus , this list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:a> = <var:d> }} <var:f0> := <nat:4> ; <var:z> := <var:f0> {{ <var:z> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:f0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:d> /\ <var:z> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 