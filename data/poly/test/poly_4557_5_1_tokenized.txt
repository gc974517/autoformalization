\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:o1> := <var:u> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:3> ; <var:s> := <var:o1> <var:s> := <var:s> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Given given any integers $ <var:a> $ it to be that $ <var:u> = <var:a> $ ahead of the evaluation of this segment of code , it must be that we have $ <var:s> = <nat:3> \times <var:a> + <nat:7> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the list of commands is clear through the below decorated list of commands . \begin{eqnarray} \{ <var:u> = <var:a> \} \\ <var:o1> := <var:u> ; \\ \{ <var:u> = <var:a> \land <var:o1> = <var:a> \} \\ <var:o0> := <nat:7> ; \\ \{ <var:u> = <var:a> \land <var:o1> = <var:a> \land <var:o0> = <nat:7> \} \\ <var:o1> := <var:o1> * <nat:3> ; \\ \{ <var:u> = <var:a> \land <var:o1> = <nat:3> \times <var:a> \land <var:o0> = <nat:7> \} \\ <var:s> := <var:o1> \\ \{ <var:u> = <var:a> \land <var:o0> = <nat:7> \land <var:s> = <nat:3> \times <var:a> \} \\ <var:s> := <var:s> + <var:o0> \\ \{ <var:u> = <var:a> \land <var:s> = <nat:3> \times <var:a> + <nat:7> \} \end{eqnarray} The application of standard Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <def:poly> := <var:o1> := <var:u> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:3> ; <var:s> := <var:o1> <var:s> := <var:s> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:u> = <var:a> }} <def:poly> {{ <var:s> = <nat:3> * <var:a> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:o1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:o1> = <var:a> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:o1> = <nat:3> * <var:a> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:o0> = <nat:7> /\ <var:s> = <nat:3> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:a> /\ <var:s> = <nat:3> * <var:a> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 