\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:s0> := <nat:1> ; <var:d> := <var:s0> \end{verbatim} \end{definition} \begin{theorem} Define a code <def:poly> . Given that $ <var:P> = <var:E> $ prior to evaluating our set of instructions it follows that $ <var:d> = <nat:1> $ . \end{theorem} \begin{proof} Demonstrating correctness of this segment of code can be demonstrated through typical Hoare techniques . Focusing on the proceeding statements contained in our list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:P> = <var:E> \} & <var:s0> := <nat:1> & \{ <var:P> = <var:E> \land <var:s0> = <nat:1> \} \\ \{ <var:P> = <var:E> \land <var:s0> = <nat:1> \} & <var:d> := <var:s0& \{ <var:P> = <var:E> \land <var:d> = <nat:1> \} \end{tabular} This is shown by the scheme given by Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <def:poly> := <var:s0> := <nat:1> ; <var:d> := <var:s0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:P> = <var:E> }} <def:poly> {{ <var:d> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:E> /\ <var:d> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 