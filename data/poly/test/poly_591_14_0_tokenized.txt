\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:a0> := <nat:4> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:E> ; <var:a2> := <nat:4> ; <var:a2> := <var:a2> * <var:E> ; <var:a2> := <var:a2> * <var:E> ; <var:a3> := <nat:4> ; <var:a3> := <var:a3> * <var:E> ; <var:a3> := <var:a3> * <var:E> ; <var:a3> := <var:a3> * <var:E> ; <var:h> := <var:a3> ; <var:h> := <var:h> + <var:a2> ; <var:h> := <var:h> + <var:a1> ; <var:h> := <var:h> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> . Given that $ <var:E> = <var:r> $ before the evaluation of our series of commands it follows that we see $ <var:h> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:4> $ when program has finished executing . \end{theorem} \begin{proof} Demonstrating correctness of our code segment can be done through typical Hoare techniques . Next , the variable update code \verb | <var:a0> := <nat:4> ; | . This line moves $ \{ <var:E> = <var:r> \} $ as the postcondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \} $ . This is shown using the assignment law of Hoare logic . Immediately following , we see the variable update statement \verb | <var:a1> := <nat:2> ; | . This code takes the precondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \} $ toward the condition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \} $ . This is rigorously given with the assignment law given in typical Hoare techniques . After , the variable binding code defining $ <var:a1> * <var:E> $ into $ <var:a1>$ . This command redefines the precondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \} $ to the condition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \} $ . Paying attention to the proceeding command in our list of commands , we have the variable binding line \verb | <var:a2> := <nat:4> ; | . This code advances the condition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \} $ toward $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \} $ . This is given using the assignment rule given in usual Hoare techniques . Shifting focus toward the following line seen in our set of commands , the environment update line \verb | <var:a2> := <var:a2> * <var:E> ; | . This moves the condition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \} $ into the postcondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> \} $ . This is guaranteed using the assignment scheme defined in usual Hoare techniques . Moving forward to the next step , we see the environment update command \verb | <var:a2> := <var:a2> * <var:E> ; | . This code takes the precondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> \} $ into the postcondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \} $ . Moving forward to the following piece of code found in our code segment , we have the environment update command \verb | <var:a3> := <nat:4> ; | . This redefines the condition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \} $ toward $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \} $ . Immediately after , we have the binding statement \verb | <var:a3> := <var:a3> * <var:E> ; | . This takes the precondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \} $ into the postcondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \cdot <var:r> \} $ . Shifting focus toward the next statement in the list of instructions , the assignment line yielding $ <var:a3> * <var:E> $ toward $ <var:a3>$ . This takes the condition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \cdot <var:r> \} $ into $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \cdot <var:r> ^ <nat:2> \} $ . Taking a look at the subsequent piece of code seen in the series of commands , we have the assignment line binding $ <var:a3> * <var:E> $ as $ <var:a3>$ . This statement advances the precondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \cdot <var:r> ^ <nat:2> \} $ as the condition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \cdot <var:r> ^ <nat:3> \} $ . This is sound using the assignment rule found in usual Hoare logic . Taking a look at the proceeding piece of code seen in our list of commands , we see the binding line \verb | <var:h> := <var:a3> ; | . This line advances the precondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:a3> = <nat:4> \cdot <var:r> ^ <nat:3> \} $ toward the condition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:h> = <nat:4> \cdot <var:r> ^ <nat:3> \} $ . This is ensured with the assignment law defined in typical Hoare techniques . Moving on , we have the variable binding command \verb | <var:h> := <var:h> + <var:a2> ; | . This code redefines the precondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:a2> = <nat:4> \cdot <var:r> ^ <nat:2> \land <var:h> = <nat:4> \cdot <var:r> ^ <nat:3> \} $ toward the condition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:h> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> \} $ . Advancing to the following step in our set of instructions , we see the variable assignmet statement letting $ <var:h> + <var:a1> $ as $ <var:h>$ . This line forwards the precondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:a1> = <nat:2> \cdot <var:r> \land <var:h> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> \} $ toward the postcondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:h> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> \} $ . Next , the code assigning $ <var:h> + <var:a0$ to $ <var:h>$ . This code redefines the precondition $ \{ <var:E> = <var:r> \land <var:a0> = <nat:4> \land <var:h> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> \} $ to the condition $ \{ <var:E> = <var:r> \land <var:h> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:4> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:4> \} $ . This is given through the assignment law from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a0> := <nat:4> ; <var:a1> := <nat:2> ; <var:a1> := <var:a1> * <var:E> ; <var:a2> := <nat:4> ; <var:a2> := <var:a2> * <var:E> ; <var:a2> := <var:a2> * <var:E> ; <var:a3> := <nat:4> ; <var:a3> := <var:a3> * <var:E> ; <var:a3> := <var:a3> * <var:E> ; <var:a3> := <var:a3> * <var:E> ; <var:h> := <var:a3> ; <var:h> := <var:h> + <var:a2> ; <var:h> := <var:h> + <var:a1> ; <var:h> := <var:h> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:E> = <var:r> }} <def:poly> {{ <var:h> = <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:a0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:2> * <var:r> /\ <var:a2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:2> * <var:r> /\ <var:a2> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:2> * <var:r> /\ <var:a2> = <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:2> * <var:r> /\ <var:a2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:2> * <var:r> /\ <var:a2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:2> * <var:r> /\ <var:a2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:2> * <var:r> /\ <var:a2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:a3> = <nat:4> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:2> * <var:r> /\ <var:a2> = <nat:4> * <var:r> ^ <nat:2> /\ <var:h> = <nat:4> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:a0> = <nat:4> /\ <var:a1> = <nat:2> * <var:r> /\ <var:h> = <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:a0> = <nat:4> /\ <var:h> = <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:r> /\ <var:h> = <nat:4> * <var:r> ^ <nat:3> + <nat:4> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 