\begin{document} \begin{theorem} Define the following segment of code in \emph{Imp} as \begin{verbatim} <var:e0> := <nat:9> ; <var:e2> := <nat:7> ; <var:e2> := <var:e2> * <var:d> ; <var:e2> := <var:e2> * <var:d> ; <var:s> := <var:e2> ; <var:s> := <var:s> + <var:e0> \end{verbatim} Assume it to be that $ <var:d> = <var:E> $ ahead of executing the program it must be that $ <var:s> = <nat:7> \cdot <var:E> ^ <nat:2> + <nat:9> $ when series of instructions is done executing . \end{theorem} \begin{proof} The flow of logic for our series of commands can be given through standard Hoare logic . Next , \begin{eqnarray} \{ <var:d> = <var:E> \} \, <var:e0> := <nat:9> \, \{ <var:d> = <var:E> \land <var:e0> = <nat:9> \} \\ \{ <var:d> = <var:E> \land <var:e0> = <nat:9> \} \, <var:e2> := <nat:7> \, \{ <var:d> = <var:E> \land <var:e0> = <nat:9> \land <var:e2> = <nat:7> \} \\ \{ <var:d> = <var:E> \land <var:e0> = <nat:9> \land <var:e2> = <nat:7> \} \, <var:e2> := <var:e2> * <var:d> \, \{ <var:d> = <var:E> \land <var:e0> = <nat:9> \land <var:e2> = <nat:7> * <var:E> \} \\ \{ <var:d> = <var:E> \land <var:e0> = <nat:9> \land <var:e2> = <nat:7> * <var:E> \} \, <var:e2> := <var:e2> * <var:d> \, \{ <var:d> = <var:E> \land <var:e0> = <nat:9> \land <var:e2> = <nat:7> * <var:E> ^ <nat:2> \} \end{eqnarray} Observing the upcoming piece of code seen in the series of commands , we have \begin{eqnarray} \{ <var:d> = <var:E> \} \, <var:e0> := <nat:9> \, \{ <var:d> = <var:E> \land <var:e0> = <nat:9> \} \end{eqnarray} This is guaranteed with the variable binding law obtained from Hoare techniques . Focusing on the subsequent bit of code found in our code segment , \begin{eqnarray} \{ <var:d> = <var:E> \} \, <var:e0> := <nat:9> \, \{ <var:d> = <var:E> \land <var:e0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e2> : string := " <var:e2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:d> = <var:E> }} <var:e0> := <nat:9> ; <var:e2> := <nat:7> ; <var:e2> := <var:e2> * <var:d> ; <var:e2> := <var:e2> * <var:d> ; <var:s> := <var:e2> ; <var:s> := <var:s> + <var:e0> {{ <var:s> = <nat:7> * <var:E> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:e0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:e0> = <nat:9> /\ <var:e2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:e0> = <nat:9> /\ <var:e2> = <nat:7> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:e0> = <nat:9> /\ <var:e2> = <nat:7> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:e0> = <nat:9> /\ <var:s> = <nat:7> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:s> = <nat:7> * <var:E> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 