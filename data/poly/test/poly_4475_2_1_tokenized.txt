\begin{document} \begin{theorem} We define the following set of instructions as \begin{verbatim} <var:Q0> := <nat:9> ; <var:u> := <var:Q0> \end{verbatim} Assume that we have $ <var:N> = <var:D> $ --- taking $ <var:D> \in \mathbb{N} $ --- prior to executing our code , then we see $ <var:u> = <nat:9> $ . \end{theorem} \begin{proof} The way to prove correctness for the series of commands is clear with standard Hoare techniques . Immediately following , \[ \begin{tabular} {rcl} \{ <var:N> = <var:D> \} & <var:Q0> := <nat:9> & \{ <var:N> = <var:D> \land <var:Q0> = <nat:9> \} \end{tabular} This is rigorously given through the law obtained from Hoare logic . Advancing to the next step , \[ \begin{tabular} {rcl} \{ <var:N> = <var:D> \} & <var:Q0> := <nat:9> & \{ <var:N> = <var:D> \land <var:Q0> = <nat:9> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:N> = <var:D> }} <var:Q0> := <nat:9> ; <var:u> := <var:Q0> {{ <var:u> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:D> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:D> /\ <var:u> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 