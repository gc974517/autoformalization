\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:G1> := <var:k> ; <var:G2> := <var:G1> * <var:k> ; <var:G3> := <var:G2> * <var:k> ; <var:G4> := <var:G3> * <var:k> ; <var:G0> := <nat:6> ; <var:G1> := <var:G1> * <nat:3> ; <var:G2> := <var:G2> * <nat:3> ; <var:G4> := <var:G4> * <nat:7> ; <var:I> := <var:G4> <var:I> := <var:I> + <var:G2> <var:I> := <var:I> + <var:G1> <var:I> := <var:I> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assume , given some $ <var:P> \in \mathbb{N} $ , $ <var:k> = <var:P> $ prior to running this program it holds that we have $ <var:I> = <nat:7> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:3> \cdot <var:P> + <nat:6> $ . \end{theorem} \begin{proof} The proof of this series of instructions is given with standard Hoare reasoning . Jumping to the proceeding bit of code seen in our code segment , the variable binding statement \verb | <var:G1> := <var:k> ; | . This transfers $ \{ <var:k> = <var:P> \} $ into the postcondition $ \{ <var:k> = <var:P> \land <var:G1> = <var:P> \} $ . This is deduced with the assignment law obtained from Hoare logic . Immediately following , we have the binding code \verb | <var:G2> := <var:G1> * <var:k> ; | . This redefines $ \{ <var:k> = <var:P> \land <var:G1> = <var:P> \} $ into $ \{ <var:k> = <var:P> \land <var:G1> = <var:P> \land <var:G2> = <var:P> ^ <nat:2> \} $ . This is guaranteed through the assignment inference rule given by standard Hoare techniques . Now , the assignment line \verb | <var:G3> := <var:G2> * <var:k> ; | . This line transfers the precondition $ \{ <var:k> = <var:P> \land <var:G1> = <var:P> \land <var:G2> = <var:P> ^ <nat:2> \} $ to the condition $ \{ <var:k> = <var:P> \land <var:G1> = <var:P> \land <var:G2> = <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \} $ . Looking at the following line of code in our series of commands , we have the assignment command \verb | <var:G4> := <var:G3> * <var:k> ; | . This statement redefines the condition $ \{ <var:k> = <var:P> \land <var:G1> = <var:P> \land <var:G2> = <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \} $ toward $ \{ <var:k> = <var:P> \land <var:G1> = <var:P> \land <var:G2> = <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \land <var:G4> = <var:P> ^ <nat:4> \} $ . This is guaranteed through the assignment rule defined by Hoare logic . Keeping momentum , we see the assignment statement \verb | <var:G0> := <nat:6> ; | . This code transfers the precondition $ \{ <var:k> = <var:P> \land <var:G1> = <var:P> \land <var:G2> = <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \land <var:G4> = <var:P> ^ <nat:4> \} $ toward the postcondition $ \{ <var:k> = <var:P> \land <var:G1> = <var:P> \land <var:G2> = <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \land <var:G4> = <var:P> ^ <nat:4> \land <var:G0> = <nat:6> \} $ . Now , the variable update statement defining $ <var:G1> * <nat:3> $ toward $ <var:G1>$ . This advances the precondition $ \{ <var:k> = <var:P> \land <var:G1> = <var:P> \land <var:G2> = <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \land <var:G4> = <var:P> ^ <nat:4> \land <var:G0> = <nat:6> \} $ as the condition $ \{ <var:k> = <var:P> \land <var:G1> = <nat:3> \cdot <var:P> \land <var:G2> = <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \land <var:G4> = <var:P> ^ <nat:4> \land <var:G0> = <nat:6> \} $ . This is rigorously given using the assignment rule from typical Hoare logic . Taking a look at the following piece of code contained in the list of instructions , the binding code assigning $ <var:G2> * <nat:3> $ as $ <var:G2>$ . This line moves the condition $ \{ <var:k> = <var:P> \land <var:G1> = <nat:3> \cdot <var:P> \land <var:G2> = <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \land <var:G4> = <var:P> ^ <nat:4> \land <var:G0> = <nat:6> \} $ into the postcondition $ \{ <var:k> = <var:P> \land <var:G1> = <nat:3> \cdot <var:P> \land <var:G2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \land <var:G4> = <var:P> ^ <nat:4> \land <var:G0> = <nat:6> \} $ . This is known to be sound through the assignment inference rule given by Hoare reasoning . Taking another step toward the following bit of code found in our segment of code , the command \verb | <var:G4> := <var:G4> * <nat:7> ; | . This line moves the condition $ \{ <var:k> = <var:P> \land <var:G1> = <nat:3> \cdot <var:P> \land <var:G2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \land <var:G4> = <var:P> ^ <nat:4> \land <var:G0> = <nat:6> \} $ to the postcondition $ \{ <var:k> = <var:P> \land <var:G1> = <nat:3> \cdot <var:P> \land <var:G2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \land <var:G4> = <nat:7> \cdot <var:P> ^ <nat:4> \land <var:G0> = <nat:6> \} $ . This is deduced by the assignment inference rule defined in Hoare reasoning . Moving forward to the next step , the variable binding line letting $ <var:G4$ to $ <var:I>$ . This moves the precondition $ \{ <var:k> = <var:P> \land <var:G1> = <nat:3> \cdot <var:P> \land <var:G2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \land <var:G4> = <nat:7> \cdot <var:P> ^ <nat:4> \land <var:G0> = <nat:6> \} $ as $ \{ <var:k> = <var:P> \land <var:G1> = <nat:3> \cdot <var:P> \land <var:G2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \land <var:G0> = <nat:6> \land <var:I> = <nat:7> \cdot <var:P> ^ <nat:4> \} $ . Moving forward to the following statement found in our code segment , we see the assignment statement defining $ <var:I> + <var:G2$ toward $ <var:I>$ . This command forwards the precondition $ \{ <var:k> = <var:P> \land <var:G1> = <nat:3> \cdot <var:P> \land <var:G2> = <nat:3> \cdot <var:P> ^ <nat:2> \land <var:G3> = <var:P> ^ <nat:3> \land <var:G0> = <nat:6> \land <var:I> = <nat:7> \cdot <var:P> ^ <nat:4> \} $ as the condition $ \{ <var:k> = <var:P> \land <var:G1> = <nat:3> \cdot <var:P> \land <var:G0> = <nat:6> \land <var:I> = <nat:7> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:2> \} $ . After , we see the variable assignmet line defining $ <var:I> + <var:G1$ into $ <var:I>$ . This forwards $ \{ <var:k> = <var:P> \land <var:G1> = <nat:3> \cdot <var:P> \land <var:G0> = <nat:6> \land <var:I> = <nat:7> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:2> \} $ toward $ \{ <var:k> = <var:P> \land <var:G0> = <nat:6> \land <var:I> = <nat:7> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:3> \cdot <var:P> \} $ . This is guaranteed with the assignment law defined in Hoare techniques . Immediately after , we have the variable assignmet line \verb | <var:I> := <var:I> + <var:G0> | . This statement transfers $ \{ <var:k> = <var:P> \land <var:G0> = <nat:6> \land <var:I> = <nat:7> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:3> \cdot <var:P> \} $ to the postcondition $ \{ <var:k> = <var:P> \land <var:I> = <nat:7> \cdot <var:P> ^ <nat:4> + <nat:3> \cdot <var:P> ^ <nat:2> + <nat:3> \cdot <var:P> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <var:G4> : string := " <var:G4> " . Definition <def:poly> := <var:G1> := <var:k> ; <var:G2> := <var:G1> * <var:k> ; <var:G3> := <var:G2> * <var:k> ; <var:G4> := <var:G3> * <var:k> ; <var:G0> := <nat:6> ; <var:G1> := <var:G1> * <nat:3> ; <var:G2> := <var:G2> * <nat:3> ; <var:G4> := <var:G4> * <nat:7> ; <var:I> := <var:G4> <var:I> := <var:I> + <var:G2> <var:I> := <var:I> + <var:G1> <var:I> := <var:I> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:k> = <var:P> }} <def:poly> {{ <var:I> = <nat:7> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:G1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:G1> = <var:P> /\ <var:G2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:G1> = <var:P> /\ <var:G2> = <var:P> ^ <nat:2> /\ <var:G3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:G1> = <var:P> /\ <var:G2> = <var:P> ^ <nat:2> /\ <var:G3> = <var:P> ^ <nat:3> /\ <var:G4> = <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:G1> = <var:P> /\ <var:G2> = <var:P> ^ <nat:2> /\ <var:G3> = <var:P> ^ <nat:3> /\ <var:G4> = <var:P> ^ <nat:4> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:G1> = <nat:3> * <var:P> /\ <var:G2> = <var:P> ^ <nat:2> /\ <var:G3> = <var:P> ^ <nat:3> /\ <var:G4> = <var:P> ^ <nat:4> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:G1> = <nat:3> * <var:P> /\ <var:G2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:G3> = <var:P> ^ <nat:3> /\ <var:G4> = <var:P> ^ <nat:4> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:G1> = <nat:3> * <var:P> /\ <var:G2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:G3> = <var:P> ^ <nat:3> /\ <var:G4> = <nat:7> * <var:P> ^ <nat:4> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:G1> = <nat:3> * <var:P> /\ <var:G2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:G3> = <var:P> ^ <nat:3> /\ <var:G0> = <nat:6> /\ <var:I> = <nat:7> * <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:G1> = <nat:3> * <var:P> /\ <var:G0> = <nat:6> /\ <var:I> = <nat:7> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:G0> = <nat:6> /\ <var:I> = <nat:7> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:P> /\ <var:I> = <nat:7> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 