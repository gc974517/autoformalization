\begin{document} \begin{theorem} Consider the following series of commands as follows \begin{verbatim} <var:c> := <nat:3> ; <var:c> := <nat:3> + <var:c> * <var:I> ; <var:c> := <nat:3> + <var:c> * <var:I> ; <var:c> := <nat:1> + <var:c> * <var:I> ; <var:c> := <nat:4> + <var:c> * <var:I> ; <var:c> := <nat:4> + <var:c> * <var:I> ; <var:c> := <nat:2> + <var:c> * <var:I> ; <var:c> := <nat:1> + <var:c> * <var:I> \end{verbatim} Given $ <var:I> = <var:k> $ --- given all whole numbers $ <var:k> $ --- ahead of executing our code segment it holds that we have $ <var:c> = <nat:3> \times <var:k> ^ <nat:7> + <nat:3> \times <var:k> ^ <nat:6> + <nat:3> \times <var:k> ^ <nat:5> + <nat:1> \times <var:k> ^ <nat:4> + <nat:4> \times <var:k> ^ <nat:3> + <nat:4> \times <var:k> ^ <nat:2> + <nat:2> \times <var:k> + <nat:1> $ when set of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:k> \} \\ <var:c> := <nat:3> ; \\ \{ <var:I> = <var:k> \land <var:c> = <nat:3> \} \\ <var:c> := <nat:3> + <var:c> * <var:I> ; \\ \{ <var:I> = <var:k> \land <var:c> = <nat:3> \cdot <var:k> + <nat:3> \} \\ <var:c> := <nat:3> + <var:c> * <var:I> ; \\ \{ <var:I> = <var:k> \land <var:c> = <nat:3> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:3> \} \\ <var:c> := <nat:1> + <var:c> * <var:I> ; \\ \{ <var:I> = <var:k> \land <var:c> = <nat:3> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:1> \} \\ <var:c> := <nat:4> + <var:c> * <var:I> ; \\ \{ <var:I> = <var:k> \land <var:c> = <nat:3> \cdot <var:k> ^ <nat:4> + <nat:3> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> ^ <nat:2> + <nat:1> \cdot <var:k> + <nat:4> \} \\ <var:c> := <nat:4> + <var:c> * <var:I> ; \\ \{ <var:I> = <var:k> \land <var:c> = <nat:3> \cdot <var:k> ^ <nat:5> + <nat:3> \cdot <var:k> ^ <nat:4> + <nat:3> \cdot <var:k> ^ <nat:3> + <nat:1> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:4> \} \\ <var:c> := <nat:2> + <var:c> * <var:I> ; \\ \{ <var:I> = <var:k> \land <var:c> = <nat:3> \cdot <var:k> ^ <nat:6> + <nat:3> \cdot <var:k> ^ <nat:5> + <nat:3> \cdot <var:k> ^ <nat:4> + <nat:1> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:2> \} \\ <var:c> := <nat:1> + <var:c> * <var:I> \\ \{ <var:I> = <var:k> \land <var:c> = <nat:3> \cdot <var:k> ^ <nat:7> + <nat:3> \cdot <var:k> ^ <nat:6> + <nat:3> \cdot <var:k> ^ <nat:5> + <nat:1> \cdot <var:k> ^ <nat:4> + <nat:4> \cdot <var:k> ^ <nat:3> + <nat:4> \cdot <var:k> ^ <nat:2> + <nat:2> \cdot <var:k> + <nat:1> \} \end{eqnarray} Utilizing Hoare reasoning completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:I> = <var:k> }} <var:c> := <nat:3> ; <var:c> := <nat:3> + <var:c> * <var:I> ; <var:c> := <nat:3> + <var:c> * <var:I> ; <var:c> := <nat:1> + <var:c> * <var:I> ; <var:c> := <nat:4> + <var:c> * <var:I> ; <var:c> := <nat:4> + <var:c> * <var:I> ; <var:c> := <nat:2> + <var:c> * <var:I> ; <var:c> := <nat:1> + <var:c> * <var:I> {{ <var:c> = <nat:3> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:k> /\ <var:c> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:k> /\ <var:c> = <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:k> /\ <var:c> = <nat:3> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:k> /\ <var:c> = <nat:3> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:k> /\ <var:c> = <nat:3> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:k> /\ <var:c> = <nat:3> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:k> /\ <var:c> = <nat:3> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:k> /\ <var:c> = <nat:3> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:4> * <var:k> ^ <nat:3> + <nat:4> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 