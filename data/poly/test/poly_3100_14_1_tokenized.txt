\begin{document} \begin{definition} Take the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f1> := <var:c> ; <var:f2> := <var:f1> * <var:c> ; <var:f3> := <var:f2> * <var:c> ; <var:f4> := <var:f3> * <var:c> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:9> ; <var:f3> := <var:f3> * <nat:6> ; <var:f4> := <var:f4> * <nat:5> ; <var:O> := <var:f4> <var:O> := <var:O> + <var:f3> <var:O> := <var:O> + <var:f2> <var:O> := <var:O> + <var:f1> <var:O> := <var:O> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:c> = <var:C> $ prior to running the series of commands it follows that $ <var:O> = <nat:5> \times <var:C> ^ <nat:4> + <nat:6> \times <var:C> ^ <nat:3> + <nat:9> \times <var:C> ^ <nat:2> + <nat:8> \times <var:C> + <nat:2> $ when code executes . \end{theorem} \begin{proof} Showing our claim about correctness for the program is clear using typical Hoare logic . Taking a look at the proceeding bit of code seen in the list of instructions , the variable assignmet line defining $ <var:c> $ to $ <var:f1>$ . This advances $ \{ <var:c> = <var:C> \} $ into the condition $ \{ <var:c> = <var:C> \land <var:f1> = <var:C> \} $ . Advancing to the next line in our segment of code , we have the variable update code \verb | <var:f2> := <var:f1> * <var:c> ; | . This statement takes $ \{ <var:c> = <var:C> \land <var:f1> = <var:C> \} $ into $ \{ <var:c> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \} $ . This is known to be sound by the assignment rule in standard Hoare reasoning . Looking at the proceeding line found in the list of instructions , we see the variable binding code \verb | <var:f3> := <var:f2> * <var:c> ; | . This command forwards $ \{ <var:c> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \} $ to the condition $ \{ <var:c> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f3> = <var:C> ^ <nat:3> \} $ . This is shown using the assignment scheme from typical Hoare logic . Shifting focus toward the following command contained in the list of commands , the binding command \verb | <var:f4> := <var:f3> * <var:c> ; | . This moves the condition $ \{ <var:c> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f3> = <var:C> ^ <nat:3> \} $ into the postcondition $ \{ <var:c> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f3> = <var:C> ^ <nat:3> \land <var:f4> = <var:C> ^ <nat:4> \} $ . Jumping to the subsequent step seen in the code segment , we see the environment update line binding $ <nat:2> $ toward $ <var:f0>$ . This statement advances the condition $ \{ <var:c> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f3> = <var:C> ^ <nat:3> \land <var:f4> = <var:C> ^ <nat:4> \} $ toward the postcondition $ \{ <var:c> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f3> = <var:C> ^ <nat:3> \land <var:f4> = <var:C> ^ <nat:4> \land <var:f0> = <nat:2> \} $ . This is given with the assignment law given by usual Hoare techniques . After , we see the variable binding code assigning $ <var:f1> * <nat:8> $ toward $ <var:f1>$ . This moves $ \{ <var:c> = <var:C> \land <var:f1> = <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f3> = <var:C> ^ <nat:3> \land <var:f4> = <var:C> ^ <nat:4> \land <var:f0> = <nat:2> \} $ as $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f3> = <var:C> ^ <nat:3> \land <var:f4> = <var:C> ^ <nat:4> \land <var:f0> = <nat:2> \} $ . Moving forward to the following line of code contained in the code segment , we see the variable binding command \verb | <var:f2> := <var:f2> * <nat:9> ; | . This statement advances $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f2> = <var:C> ^ <nat:2> \land <var:f3> = <var:C> ^ <nat:3> \land <var:f4> = <var:C> ^ <nat:4> \land <var:f0> = <nat:2> \} $ to the postcondition $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:f3> = <var:C> ^ <nat:3> \land <var:f4> = <var:C> ^ <nat:4> \land <var:f0> = <nat:2> \} $ . Moving forward to the upcoming piece of code found in our list of instructions , we see the assignment line letting $ <var:f3> * <nat:6> $ into $ <var:f3>$ . This takes $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:f3> = <var:C> ^ <nat:3> \land <var:f4> = <var:C> ^ <nat:4> \land <var:f0> = <nat:2> \} $ toward the postcondition $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:f3> = <nat:6> \times <var:C> ^ <nat:3> \land <var:f4> = <var:C> ^ <nat:4> \land <var:f0> = <nat:2> \} $ . Considering the next bit of code contained in the list of commands , the variable update code binding $ <var:f4> * <nat:5> $ to $ <var:f4>$ . This advances the condition $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:f3> = <nat:6> \times <var:C> ^ <nat:3> \land <var:f4> = <var:C> ^ <nat:4> \land <var:f0> = <nat:2> \} $ into the condition $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:f3> = <nat:6> \times <var:C> ^ <nat:3> \land <var:f4> = <nat:5> \times <var:C> ^ <nat:4> \land <var:f0> = <nat:2> \} $ . This is rigorously given with the assignment inference rule found in Hoare logic . Next , the variable update command assigning $ <var:f4$ into $ <var:O>$ . This code forwards the condition $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:f3> = <nat:6> \times <var:C> ^ <nat:3> \land <var:f4> = <nat:5> \times <var:C> ^ <nat:4> \land <var:f0> = <nat:2> \} $ into $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:f3> = <nat:6> \times <var:C> ^ <nat:3> \land <var:f0> = <nat:2> \land <var:O> = <nat:5> \times <var:C> ^ <nat:4> \} $ . This is ensured through the assignment scheme given in typical Hoare techniques . Looking at the proceeding step seen in our series of commands , the binding line letting $ <var:O> + <var:f3$ into $ <var:O>$ . This line redefines the condition $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:f3> = <nat:6> \times <var:C> ^ <nat:3> \land <var:f0> = <nat:2> \land <var:O> = <nat:5> \times <var:C> ^ <nat:4> \} $ into the postcondition $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:f0> = <nat:2> \land <var:O> = <nat:5> \times <var:C> ^ <nat:4> + <nat:6> \times <var:C> ^ <nat:3> \} $ . This is sound with the assignment rule in standard Hoare logic . Honing in on the proceeding line seen in our list of commands , we have the binding command \verb | <var:O> := <var:O> + <var:f2> | . This line transfers the condition $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:f0> = <nat:2> \land <var:O> = <nat:5> \times <var:C> ^ <nat:4> + <nat:6> \times <var:C> ^ <nat:3> \} $ into the condition $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f0> = <nat:2> \land <var:O> = <nat:5> \times <var:C> ^ <nat:4> + <nat:6> \times <var:C> ^ <nat:3> + <nat:9> \times <var:C> ^ <nat:2> \} $ . This is known to be sound with the assignment inference rule defined in usual Hoare reasoning . Observing the following bit of code in the set of commands , we see the environment update line binding $ <var:O> + <var:f1$ into $ <var:O>$ . This statement advances $ \{ <var:c> = <var:C> \land <var:f1> = <nat:8> \times <var:C> \land <var:f0> = <nat:2> \land <var:O> = <nat:5> \times <var:C> ^ <nat:4> + <nat:6> \times <var:C> ^ <nat:3> + <nat:9> \times <var:C> ^ <nat:2> \} $ to $ \{ <var:c> = <var:C> \land <var:f0> = <nat:2> \land <var:O> = <nat:5> \times <var:C> ^ <nat:4> + <nat:6> \times <var:C> ^ <nat:3> + <nat:9> \times <var:C> ^ <nat:2> + <nat:8> \times <var:C> \} $ . This is shown with the assignment inference rule given by usual Hoare techniques . Considering the upcoming statement contained in our code segment , the line \verb | <var:O> := <var:O> + <var:f0> | . This command redefines $ \{ <var:c> = <var:C> \land <var:f0> = <nat:2> \land <var:O> = <nat:5> \times <var:C> ^ <nat:4> + <nat:6> \times <var:C> ^ <nat:3> + <nat:9> \times <var:C> ^ <nat:2> + <nat:8> \times <var:C> \} $ as the postcondition $ \{ <var:c> = <var:C> \land <var:O> = <nat:5> \times <var:C> ^ <nat:4> + <nat:6> \times <var:C> ^ <nat:3> + <nat:9> \times <var:C> ^ <nat:2> + <nat:8> \times <var:C> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <var:f4> : string := " <var:f4> " . Definition <def:poly> := <var:f1> := <var:c> ; <var:f2> := <var:f1> * <var:c> ; <var:f3> := <var:f2> * <var:c> ; <var:f4> := <var:f3> * <var:c> ; <var:f0> := <nat:2> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:9> ; <var:f3> := <var:f3> * <nat:6> ; <var:f4> := <var:f4> * <nat:5> ; <var:O> := <var:f4> <var:O> := <var:O> + <var:f3> <var:O> := <var:O> + <var:f2> <var:O> := <var:O> + <var:f1> <var:O> := <var:O> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:c> = <var:C> }} <def:poly> {{ <var:O> = <nat:5> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> + <nat:9> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:f1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:f1> = <var:C> /\ <var:f2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:f1> = <var:C> /\ <var:f2> = <var:C> ^ <nat:2> /\ <var:f3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:f1> = <var:C> /\ <var:f2> = <var:C> ^ <nat:2> /\ <var:f3> = <var:C> ^ <nat:3> /\ <var:f4> = <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:f1> = <var:C> /\ <var:f2> = <var:C> ^ <nat:2> /\ <var:f3> = <var:C> ^ <nat:3> /\ <var:f4> = <var:C> ^ <nat:4> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:f1> = <nat:8> * <var:C> /\ <var:f2> = <var:C> ^ <nat:2> /\ <var:f3> = <var:C> ^ <nat:3> /\ <var:f4> = <var:C> ^ <nat:4> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:f1> = <nat:8> * <var:C> /\ <var:f2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:f3> = <var:C> ^ <nat:3> /\ <var:f4> = <var:C> ^ <nat:4> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:f1> = <nat:8> * <var:C> /\ <var:f2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:f3> = <nat:6> * <var:C> ^ <nat:3> /\ <var:f4> = <var:C> ^ <nat:4> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:f1> = <nat:8> * <var:C> /\ <var:f2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:f3> = <nat:6> * <var:C> ^ <nat:3> /\ <var:f4> = <nat:5> * <var:C> ^ <nat:4> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:f1> = <nat:8> * <var:C> /\ <var:f2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:f3> = <nat:6> * <var:C> ^ <nat:3> /\ <var:f0> = <nat:2> /\ <var:O> = <nat:5> * <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:f1> = <nat:8> * <var:C> /\ <var:f2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:f0> = <nat:2> /\ <var:O> = <nat:5> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:f1> = <nat:8> * <var:C> /\ <var:f0> = <nat:2> /\ <var:O> = <nat:5> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> + <nat:9> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:f0> = <nat:2> /\ <var:O> = <nat:5> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> + <nat:9> * <var:C> ^ <nat:2> + <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:C> /\ <var:O> = <nat:5> * <var:C> ^ <nat:4> + <nat:6> * <var:C> ^ <nat:3> + <nat:9> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 