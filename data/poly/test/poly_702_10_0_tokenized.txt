\begin{document} \begin{theorem} Let the following code segment such that \begin{verbatim} <var:u0> := <nat:5> ; <var:u1> := <nat:9> ; <var:u1> := <var:u1> * <var:I> ; <var:u3> := <nat:6> ; <var:u3> := <var:u3> * <var:I> ; <var:u3> := <var:u3> * <var:I> ; <var:u3> := <var:u3> * <var:I> ; <var:A> := <var:u3> ; <var:A> := <var:A> + <var:u1> ; <var:A> := <var:A> + <var:u0> \end{verbatim} Given that we have $ <var:I> = <var:j> $ --- for some positive integer coefficients $ <var:j> $ --- prior to executing this segment of code , it must be that $ <var:A> = <nat:6> \times <var:j> ^ <nat:3> + <nat:9> \times <var:j> + <nat:5> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions is done through typical Hoare logic . Advancing , we have \verb | { <var:I> = <var:j> } <var:u0> := <nat:5> { <var:I> = <var:j> \land <var:u0> = <nat:5> } | , \verb | { <var:I> = <var:j> \land <var:u0> = <nat:5> } <var:u1> := <nat:9> { <var:I> = <var:j> \land <var:u0> = <nat:5> \land <var:u1> = <nat:9> } | , \verb | { <var:I> = <var:j> \land <var:u0> = <nat:5> \land <var:u1> = <nat:9> } <var:u1> := <var:u1> * <var:I> { <var:I> = <var:j> \land <var:u0> = <nat:5> \land <var:u1> = <nat:9> \cdot <var:j> } | and \verb | { <var:I> = <var:j> \land <var:u0> = <nat:5> \land <var:u1> = <nat:9> \cdot <var:j> } <var:u3> := <nat:6> { <var:I> = <var:j> \land <var:u0> = <nat:5> \land <var:u1> = <nat:9> \cdot <var:j> \land <var:u3> = <nat:6> } | . Now , \verb | { <var:I> = <var:j> } <var:u0> := <nat:5> { <var:I> = <var:j> \land <var:u0> = <nat:5> } | and \verb | { <var:I> = <var:j> \land <var:u0> = <nat:5> } <var:u1> := <nat:9> { <var:I> = <var:j> \land <var:u0> = <nat:5> \land <var:u1> = <nat:9> } | . This is shown to be logically sound with the law obtained from standard Hoare reasoning . Keeping momentum , we have \verb | { <var:I> = <var:j> } <var:u0> := <nat:5> { <var:I> = <var:j> \land <var:u0> = <nat:5> } | and \verb | { <var:I> = <var:j> \land <var:u0> = <nat:5> } <var:u1> := <nat:9> { <var:I> = <var:j> \land <var:u0> = <nat:5> \land <var:u1> = <nat:9> } | . This is shown to be logically sound through the rule defined by usual Hoare reasoning . Moving on to the upcoming lines seen in the program , we see \verb | { <var:I> = <var:j> } <var:u0> := <nat:5> { <var:I> = <var:j> \land <var:u0> = <nat:5> } | and \verb | { <var:I> = <var:j> \land <var:u0> = <nat:5> } <var:u1> := <nat:9> { <var:I> = <var:j> \land <var:u0> = <nat:5> \land <var:u1> = <nat:9> } | . This is guaranteed using the variable update inference rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u3> : string := " <var:u3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:I> = <var:j> }} <var:u0> := <nat:5> ; <var:u1> := <nat:9> ; <var:u1> := <var:u1> * <var:I> ; <var:u3> := <nat:6> ; <var:u3> := <var:u3> * <var:I> ; <var:u3> := <var:u3> * <var:I> ; <var:u3> := <var:u3> * <var:I> ; <var:A> := <var:u3> ; <var:A> := <var:A> + <var:u1> ; <var:A> := <var:A> + <var:u0> {{ <var:A> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:9> * <var:j> /\ <var:u3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:9> * <var:j> /\ <var:u3> = <nat:6> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:9> * <var:j> /\ <var:u3> = <nat:6> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:9> * <var:j> /\ <var:u3> = <nat:6> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:9> * <var:j> /\ <var:A> = <nat:6> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:u0> = <nat:5> /\ <var:A> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:A> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 