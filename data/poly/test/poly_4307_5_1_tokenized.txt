\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y1> := <var:g> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:2> ; <var:l> := <var:y1> <var:l> := <var:l> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:g> = <var:w> $ ahead of executing the list of instructions , then $ <var:l> = <nat:2> \times <var:w> + <nat:8> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands is given through typical Hoare reasoning . Immediately after , we have the variable binding statement \verb | <var:y1> := <var:g> ; | . This takes $ \{ <var:g> = <var:w> \} $ toward $ \{ <var:g> = <var:w> \land <var:y1> = <var:w> \} $ . This is shown to be logically sound through the assignment law defined by Hoare logic . Moving forward to the upcoming line of code contained in our program , we have the variable assignmet statement assigning $ <nat:8> $ toward $ <var:y0>$ . This redefines the condition $ \{ <var:g> = <var:w> \land <var:y1> = <var:w> \} $ to $ \{ <var:g> = <var:w> \land <var:y1> = <var:w> \land <var:y0> = <nat:8> \} $ . Looking at the next statement in our set of commands , we have the variable assignmet line \verb | <var:y1> := <var:y1> * <nat:2> ; | . This command moves the condition $ \{ <var:g> = <var:w> \land <var:y1> = <var:w> \land <var:y0> = <nat:8> \} $ as the condition $ \{ <var:g> = <var:w> \land <var:y1> = <nat:2> \times <var:w> \land <var:y0> = <nat:8> \} $ . This is shown through the assignment law found in usual Hoare logic . Moving forward to the next line of code seen in our list of instructions , the variable binding code \verb | <var:l> := <var:y1> | . This moves $ \{ <var:g> = <var:w> \land <var:y1> = <nat:2> \times <var:w> \land <var:y0> = <nat:8> \} $ to the condition $ \{ <var:g> = <var:w> \land <var:y0> = <nat:8> \land <var:l> = <nat:2> \times <var:w> \} $ . Stepping forward , we see the environment update command \verb | <var:l> := <var:l> + <var:y0> | . This statement redefines the condition $ \{ <var:g> = <var:w> \land <var:y0> = <nat:8> \land <var:l> = <nat:2> \times <var:w> \} $ to the postcondition $ \{ <var:g> = <var:w> \land <var:l> = <nat:2> \times <var:w> + <nat:8> \} $ . This is known to be sound with the assignment rule in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <def:poly> := <var:y1> := <var:g> ; <var:y0> := <nat:8> ; <var:y1> := <var:y1> * <nat:2> ; <var:l> := <var:y1> <var:l> := <var:l> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:g> = <var:w> }} <def:poly> {{ <var:l> = <nat:2> * <var:w> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:y1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:y1> = <var:w> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:y1> = <nat:2> * <var:w> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:y0> = <nat:8> /\ <var:l> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:w> /\ <var:l> = <nat:2> * <var:w> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 