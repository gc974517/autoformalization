\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:q> := <nat:4> ; <var:q> := <var:q> * <var:f> ; <var:q> := <nat:1> + <var:q> * <var:f> ; <var:q> := <nat:2> + <var:q> * <var:f> ; <var:q> := <var:q> * <var:f> ; <var:q> := <nat:4> + <var:q> * <var:f> ; <var:q> := <nat:2> + <var:q> * <var:f> ; <var:q> := <nat:3> + <var:q> * <var:f> ; <var:q> := <nat:1> + <var:q> * <var:f> ; <var:q> := <nat:1> + <var:q> * <var:f> \end{verbatim} \end{definition} \begin{theorem} Allow --- for every positive numbers $ <var:h> $ --- it to be that $ <var:f> = <var:h> $ ahead of running our list of commands , it follows that we have $ <var:q> = <nat:4> * <var:h> ^ <nat:9> + <nat:1> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:1> $ after set of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for our segment of code can be accomplished by Hoare reasoning . Advancing to the next step , we have the variable assignmet statement letting $ <nat:4> $ toward $ <var:q>$ . This takes the precondition $ \{ <var:f> = <var:h> \} $ toward the postcondition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \} $ . Advancing to the next step , we see the binding statement defining $ <var:q> * <var:f> $ into $ <var:q>$ . This code moves the condition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \} $ as the postcondition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> + \} $ . Advancing , we have the variable assignmet line \verb | <var:q> := <nat:1> + <var:q> * <var:f> ; | . This redefines the precondition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> + \} $ toward the condition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:1> \} $ . This is known to be sound through the assignment law from Hoare techniques . Immediately following , we see the variable binding line letting $ <nat:2> + <var:q> * <var:f> $ into $ <var:q>$ . This moves the precondition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:2> + <nat:1> \} $ to the postcondition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> + <nat:2> \} $ . This is rigorously given using the assignment rule obtained from Hoare reasoning . Going forward , we have the variable update command giving $ <var:q> * <var:f> $ as $ <var:q>$ . This statement advances the precondition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> + <nat:2> \} $ into $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + \} $ . Going to the next step , we see the statement assigning $ <nat:4> + <var:q> * <var:f> $ toward $ <var:q>$ . This command forwards the precondition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:4> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + \} $ as the postcondition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:4> \} $ . This is shown to be logically sound through the assignment scheme of Hoare logic . Following , we have the variable update code \verb | <var:q> := <nat:2> + <var:q> * <var:f> ; | . This redefines $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:5> + <nat:1> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:4> \} $ into the postcondition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:6> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> + <nat:2> \} $ . Next , we have the variable binding line assigning $ <nat:3> + <var:q> * <var:f> $ to $ <var:q>$ . This line forwards the precondition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:6> + <nat:1> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> + <nat:2> \} $ toward the condition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:7> + <nat:1> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:3> \} $ . Moving onward , the statement giving $ <nat:1> + <var:q> * <var:f> $ to $ <var:q>$ . This command moves the precondition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:7> + <nat:1> \cdot <var:h> ^ <nat:5> + <nat:2> \cdot <var:h> ^ <nat:4> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:3> \} $ into $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:8> + <nat:1> \cdot <var:h> ^ <nat:6> + <nat:2> \cdot <var:h> ^ <nat:5> + <nat:4> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:1> \} $ . This is shown with the assignment law obtained from typical Hoare reasoning . After , the variable update command defining $ <nat:1> + <var:q> * <var:f$ to $ <var:q>$ . This statement forwards the precondition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:8> + <nat:1> \cdot <var:h> ^ <nat:6> + <nat:2> \cdot <var:h> ^ <nat:5> + <nat:4> \cdot <var:h> ^ <nat:3> + <nat:2> \cdot <var:h> ^ <nat:2> + <nat:3> \cdot <var:h> + <nat:1> \} $ toward the condition $ \{ <var:f> = <var:h> \land <var:q> = <nat:4> \cdot <var:h> ^ <nat:9> + <nat:1> \cdot <var:h> ^ <nat:7> + <nat:2> \cdot <var:h> ^ <nat:6> + <nat:4> \cdot <var:h> ^ <nat:4> + <nat:2> \cdot <var:h> ^ <nat:3> + <nat:3> \cdot <var:h> ^ <nat:2> + <nat:1> \cdot <var:h> + <nat:1> \} $ . This is shown to be logically sound by the assignment law from usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:4> ; <var:q> := <var:q> * <var:f> ; <var:q> := <nat:1> + <var:q> * <var:f> ; <var:q> := <nat:2> + <var:q> * <var:f> ; <var:q> := <var:q> * <var:f> ; <var:q> := <nat:4> + <var:q> * <var:f> ; <var:q> := <nat:2> + <var:q> * <var:f> ; <var:q> := <nat:3> + <var:q> * <var:f> ; <var:q> := <nat:1> + <var:q> * <var:f> ; <var:q> := <nat:1> + <var:q> * <var:f> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:f> = <var:h> }} <def:poly> {{ <var:q> = <nat:4> * <var:h> ^ <nat:9> + <nat:1> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:q> = <nat:4> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:q> = <nat:4> * <var:h> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:q> = <nat:4> * <var:h> ^ <nat:3> + <nat:1> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:q> = <nat:4> * <var:h> ^ <nat:4> + <nat:1> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:q> = <nat:4> * <var:h> ^ <nat:5> + <nat:1> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:q> = <nat:4> * <var:h> ^ <nat:6> + <nat:1> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:q> = <nat:4> * <var:h> ^ <nat:7> + <nat:1> * <var:h> ^ <nat:5> + <nat:2> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:q> = <nat:4> * <var:h> ^ <nat:8> + <nat:1> * <var:h> ^ <nat:6> + <nat:2> * <var:h> ^ <nat:5> + <nat:4> * <var:h> ^ <nat:3> + <nat:2> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:q> = <nat:4> * <var:h> ^ <nat:9> + <nat:1> * <var:h> ^ <nat:7> + <nat:2> * <var:h> ^ <nat:6> + <nat:4> * <var:h> ^ <nat:4> + <nat:2> * <var:h> ^ <nat:3> + <nat:3> * <var:h> ^ <nat:2> + <nat:1> * <var:h> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 