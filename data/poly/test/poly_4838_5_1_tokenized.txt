\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z1> := <var:V> ; <var:Z0> := <nat:5> ; <var:Z1> := <var:Z1> * <nat:6> ; <var:n> := <var:Z1> <var:n> := <var:n> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Define a set of commands <def:poly> . Given that we have $ <var:V> = <var:F> $ --- given any positive coefficients $ <var:F> $ --- ahead of evaluating the series of commands then we see $ <var:n> = <nat:6> * <var:F> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:V> = <var:F> \} \\ <var:Z1> := <var:V> ; \\ \{ <var:V> = <var:F> \land <var:Z1> = <var:F> \} \\ <var:Z0> := <nat:5> ; \\ \{ <var:V> = <var:F> \land <var:Z1> = <var:F> \land <var:Z0> = <nat:5> \} \\ <var:Z1> := <var:Z1> * <nat:6> ; \\ \{ <var:V> = <var:F> \land <var:Z1> = <nat:6> \cdot <var:F> \land <var:Z0> = <nat:5> \} \\ <var:n> := <var:Z1> \\ \{ <var:V> = <var:F> \land <var:Z0> = <nat:5> \land <var:n> = <nat:6> \cdot <var:F> \} \\ <var:n> := <var:n> + <var:Z0> \\ \{ <var:V> = <var:F> \land <var:n> = <nat:6> \cdot <var:F> + <nat:5> \} \end{eqnarray} The application of typical Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <def:poly> := <var:Z1> := <var:V> ; <var:Z0> := <nat:5> ; <var:Z1> := <var:Z1> * <nat:6> ; <var:n> := <var:Z1> <var:n> := <var:n> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:V> = <var:F> }} <def:poly> {{ <var:n> = <nat:6> * <var:F> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:Z1> = <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:Z1> = <var:F> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:Z1> = <nat:6> * <var:F> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:Z0> = <nat:5> /\ <var:n> = <nat:6> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:F> /\ <var:n> = <nat:6> * <var:F> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 