\begin{document} \begin{theorem} We define a code as follows \begin{verbatim} <var:K1> := <var:L> ; <var:K2> := <var:K1> * <var:L> ; <var:K3> := <var:K2> * <var:L> ; <var:K4> := <var:K3> * <var:L> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:3> ; <var:K2> := <var:K2> * <nat:1> ; <var:K3> := <var:K3> * <nat:4> ; <var:K4> := <var:K4> * <nat:1> ; <var:U> := <var:K4> <var:U> := <var:U> + <var:K3> <var:U> := <var:U> + <var:K2> <var:U> := <var:U> + <var:K1> <var:U> := <var:U> + <var:K0> \end{verbatim} Allowing --- for any positive integer coefficients $ <var:y> $ --- that $ <var:L> = <var:y> $ ahead of executing this code it follows that we have $ <var:U> = <nat:1> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> $ when set of instructions has finished . \end{theorem} \begin{proof} The method of proof for this series of commands can be accomplished through the following decorated segment of code . \begin{eqnarray} \{ <var:L> = <var:y> \} \\ <var:K1> := <var:L> ; \\ \{ <var:L> = <var:y> \land <var:K1> = <var:y> \} \\ <var:K2> := <var:K1> * <var:L> ; \\ \{ <var:L> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \} \\ <var:K3> := <var:K2> * <var:L> ; \\ \{ <var:L> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \} \\ <var:K4> := <var:K3> * <var:L> ; \\ \{ <var:L> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \land <var:K4> = <var:y> ^ <nat:4> \} \\ <var:K0> := <nat:2> ; \\ \{ <var:L> = <var:y> \land <var:K1> = <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \land <var:K4> = <var:y> ^ <nat:4> \land <var:K0> = <nat:2> \} \\ <var:K1> := <var:K1> * <nat:3> ; \\ \{ <var:L> = <var:y> \land <var:K1> = <nat:3> \cdot <var:y> \land <var:K2> = <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \land <var:K4> = <var:y> ^ <nat:4> \land <var:K0> = <nat:2> \} \\ <var:K2> := <var:K2> * <nat:1> ; \\ \{ <var:L> = <var:y> \land <var:K1> = <nat:3> \cdot <var:y> \land <var:K2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:K3> = <var:y> ^ <nat:3> \land <var:K4> = <var:y> ^ <nat:4> \land <var:K0> = <nat:2> \} \\ <var:K3> := <var:K3> * <nat:4> ; \\ \{ <var:L> = <var:y> \land <var:K1> = <nat:3> \cdot <var:y> \land <var:K2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:K3> = <nat:4> \cdot <var:y> ^ <nat:3> \land <var:K4> = <var:y> ^ <nat:4> \land <var:K0> = <nat:2> \} \\ <var:K4> := <var:K4> * <nat:1> ; \\ \{ <var:L> = <var:y> \land <var:K1> = <nat:3> \cdot <var:y> \land <var:K2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:K3> = <nat:4> \cdot <var:y> ^ <nat:3> \land <var:K4> = <nat:1> \cdot <var:y> ^ <nat:4> \land <var:K0> = <nat:2> \} \\ <var:U> := <var:K4> \\ \{ <var:L> = <var:y> \land <var:K1> = <nat:3> \cdot <var:y> \land <var:K2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:K3> = <nat:4> \cdot <var:y> ^ <nat:3> \land <var:K0> = <nat:2> \land <var:U> = <nat:1> \cdot <var:y> ^ <nat:4> \} \\ <var:U> := <var:U> + <var:K3> \\ \{ <var:L> = <var:y> \land <var:K1> = <nat:3> \cdot <var:y> \land <var:K2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:K0> = <nat:2> \land <var:U> = <nat:1> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> \} \\ <var:U> := <var:U> + <var:K2> \\ \{ <var:L> = <var:y> \land <var:K1> = <nat:3> \cdot <var:y> \land <var:K0> = <nat:2> \land <var:U> = <nat:1> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> \} \\ <var:U> := <var:U> + <var:K1> \\ \{ <var:L> = <var:y> \land <var:K0> = <nat:2> \land <var:U> = <nat:1> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> \} \\ <var:U> := <var:U> + <var:K0> \\ \{ <var:L> = <var:y> \land <var:U> = <nat:1> \cdot <var:y> ^ <nat:4> + <nat:4> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:3> \cdot <var:y> + <nat:2> \} \end{eqnarray} The application of Hoare logic finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <var:K4> : string := " <var:K4> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:L> = <var:y> }} <var:K1> := <var:L> ; <var:K2> := <var:K1> * <var:L> ; <var:K3> := <var:K2> * <var:L> ; <var:K4> := <var:K3> * <var:L> ; <var:K0> := <nat:2> ; <var:K1> := <var:K1> * <nat:3> ; <var:K2> := <var:K2> * <nat:1> ; <var:K3> := <var:K3> * <nat:4> ; <var:K4> := <var:K4> * <nat:1> ; <var:U> := <var:K4> <var:U> := <var:U> + <var:K3> <var:U> := <var:U> + <var:K2> <var:U> := <var:U> + <var:K1> <var:U> := <var:U> + <var:K0> {{ <var:U> = <nat:1> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <var:y> ^ <nat:2> /\ <var:K3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <var:y> ^ <nat:2> /\ <var:K3> = <var:y> ^ <nat:3> /\ <var:K4> = <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K1> = <var:y> /\ <var:K2> = <var:y> ^ <nat:2> /\ <var:K3> = <var:y> ^ <nat:3> /\ <var:K4> = <var:y> ^ <nat:4> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K1> = <nat:3> * <var:y> /\ <var:K2> = <var:y> ^ <nat:2> /\ <var:K3> = <var:y> ^ <nat:3> /\ <var:K4> = <var:y> ^ <nat:4> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K1> = <nat:3> * <var:y> /\ <var:K2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:K3> = <var:y> ^ <nat:3> /\ <var:K4> = <var:y> ^ <nat:4> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K1> = <nat:3> * <var:y> /\ <var:K2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:y> ^ <nat:3> /\ <var:K4> = <var:y> ^ <nat:4> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K1> = <nat:3> * <var:y> /\ <var:K2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:y> ^ <nat:3> /\ <var:K4> = <nat:1> * <var:y> ^ <nat:4> /\ <var:K0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K1> = <nat:3> * <var:y> /\ <var:K2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:y> ^ <nat:3> /\ <var:K0> = <nat:2> /\ <var:U> = <nat:1> * <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K1> = <nat:3> * <var:y> /\ <var:K2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:K0> = <nat:2> /\ <var:U> = <nat:1> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K1> = <nat:3> * <var:y> /\ <var:K0> = <nat:2> /\ <var:U> = <nat:1> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:K0> = <nat:2> /\ <var:U> = <nat:1> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:y> /\ <var:U> = <nat:1> * <var:y> ^ <nat:4> + <nat:4> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 