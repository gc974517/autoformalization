\begin{document} \begin{theorem} Take the following program in \emph{Imp} such that \begin{verbatim} <var:X0> := <nat:3> ; <var:X1> := <nat:7> ; <var:X1> := <var:X1> * <var:y> ; <var:G> := <var:X1> ; <var:G> := <var:G> + <var:X0> \end{verbatim} Assuming it to be that $ <var:y> = <var:f> $ before evaluating our code it must be that $ <var:G> = <nat:7> * <var:f> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare reasoning produces : \begin{eqnarray} \{ <var:y> = <var:f> \} \\ <var:X0> := <nat:3> ; \\ \{ <var:y> = <var:f> \land <var:X0> = <nat:3> \} \\ <var:X1> := <nat:7> ; \\ \{ <var:y> = <var:f> \land <var:X0> = <nat:3> \land <var:X1> = <nat:7> \} \\ <var:X1> := <var:X1> * <var:y> ; \\ \{ <var:y> = <var:f> \land <var:X0> = <nat:3> \land <var:X1> = <nat:7> \times <var:f> \} \\ <var:G> := <var:X1> ; \\ \{ <var:y> = <var:f> \land <var:X0> = <nat:3> \land <var:G> = <nat:7> \times <var:f> \} \\ <var:G> := <var:G> + <var:X0> \\ \{ <var:y> = <var:f> \land <var:G> = <nat:7> \times <var:f> + <nat:3> \} \end{eqnarray} Given the above , the program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Definition <var:X1> : string := " <var:X1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:y> = <var:f> }} <var:X0> := <nat:3> ; <var:X1> := <nat:7> ; <var:X1> := <var:X1> * <var:y> ; <var:G> := <var:X1> ; <var:G> := <var:G> + <var:X0> {{ <var:G> = <nat:7> * <var:f> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:f> /\ <var:X0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:f> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:f> /\ <var:X0> = <nat:3> /\ <var:X1> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:f> /\ <var:X0> = <nat:3> /\ <var:G> = <nat:7> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:f> /\ <var:G> = <nat:7> * <var:f> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 