\begin{document} \begin{theorem} Consider a series of instructions in \emph{Imp} as follows \begin{verbatim} <var:A1> := <var:V> ; <var:A0> := <nat:8> ; <var:A1> := <var:A1> * <nat:2> ; <var:h> := <var:A1> <var:h> := <var:h> + <var:A0> \end{verbatim} Assume it to be that $ <var:V> = <var:G> $ ahead of the execution of the series of instructions it must be that we have $ <var:h> = <nat:2> \cdot <var:G> + <nat:8> $ after code is done . \end{theorem} \begin{proof} The application of typical Hoare techniques results in : \begin{eqnarray} \{ <var:V> = <var:G> \} \\ <var:A1> := <var:V> ; \\ \{ <var:V> = <var:G> \land <var:A1> = <var:G> \} \\ <var:A0> := <nat:8> ; \\ \{ <var:V> = <var:G> \land <var:A1> = <var:G> \land <var:A0> = <nat:8> \} \end{eqnarray} Continuing interpreting the code gives : \begin{eqnarray} <var:A1> := <var:A1> * <nat:2> ; \\ \{ <var:V> = <var:G> \land <var:A1> = <nat:2> \cdot <var:G> \land <var:A0> = <nat:8> \} \\ <var:h> := <var:A1> \\ \{ <var:V> = <var:G> \land <var:A0> = <nat:8> \land <var:h> = <nat:2> \cdot <var:G> \} \\ <var:h> := <var:h> + <var:A0> \\ \{ <var:V> = <var:G> \land <var:h> = <nat:2> \cdot <var:G> + <nat:8> \} \end{eqnarray} Given the above , our code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:V> = <var:G> }} <var:A1> := <var:V> ; <var:A0> := <nat:8> ; <var:A1> := <var:A1> * <nat:2> ; <var:h> := <var:A1> <var:h> := <var:h> + <var:A0> {{ <var:h> = <nat:2> * <var:G> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:A1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:A1> = <var:G> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:A1> = <nat:2> * <var:G> /\ <var:A0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:A0> = <nat:8> /\ <var:h> = <nat:2> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:G> /\ <var:h> = <nat:2> * <var:G> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 