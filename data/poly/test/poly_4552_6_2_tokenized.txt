\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:J> := <nat:3> ; <var:J> := <nat:1> + <var:J> * <var:V> ; <var:J> := <nat:4> + <var:J> * <var:V> ; <var:J> := <nat:4> + <var:J> * <var:V> ; <var:J> := <nat:1> + <var:J> * <var:V> ; <var:J> := <nat:1> + <var:J> * <var:V> \end{verbatim} \end{definition} \begin{theorem} Given --- for every positive integer coefficients $ <var:q> $ --- it to hold that $ <var:V> = <var:q> $ prior to running the code , it follows that $ <var:J> = <nat:3> \cdot <var:q> ^ <nat:5> + <nat:1> \cdot <var:q> ^ <nat:4> + <nat:4> \cdot <var:q> ^ <nat:3> + <nat:4> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for this program is evident with typical Hoare logic . Immediately after , we see \verb | { <var:V> = <var:q> } <var:J> := <nat:3> { <var:V> = <var:q> \land <var:J> = <nat:3> } | , \verb | { <var:V> = <var:q> \land <var:J> = <nat:3> } <var:J> := <nat:1> + <var:J> * <var:V> { <var:V> = <var:q> \land <var:J> = <nat:3> \cdot <var:q> + <nat:1> } | , \verb | { <var:V> = <var:q> \land <var:J> = <nat:3> \cdot <var:q> + <nat:1> } <var:J> := <nat:4> + <var:J> * <var:V> { <var:V> = <var:q> \land <var:J> = <nat:3> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> + <nat:4> } | and \verb | { <var:V> = <var:q> \land <var:J> = <nat:3> \cdot <var:q> ^ <nat:2> + <nat:1> \cdot <var:q> + <nat:4> } <var:J> := <nat:4> + <var:J> * <var:V> { <var:V> = <var:q> \land <var:J> = <nat:3> \cdot <var:q> ^ <nat:3> + <nat:1> \cdot <var:q> ^ <nat:2> + <nat:4> \cdot <var:q> + <nat:4> } | . Stepping through , \verb | { <var:V> = <var:q> } <var:J> := <nat:3> { <var:V> = <var:q> \land <var:J> = <nat:3> } | . Stepping through , \verb | { <var:V> = <var:q> } <var:J> := <nat:3> { <var:V> = <var:q> \land <var:J> = <nat:3> } | . This is known to be sound with the variable assignmet scheme in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:J> := <nat:3> ; <var:J> := <nat:1> + <var:J> * <var:V> ; <var:J> := <nat:4> + <var:J> * <var:V> ; <var:J> := <nat:4> + <var:J> * <var:V> ; <var:J> := <nat:1> + <var:J> * <var:V> ; <var:J> := <nat:1> + <var:J> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:V> = <var:q> }} <def:poly> {{ <var:J> = <nat:3> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:J> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:J> = <nat:3> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:J> = <nat:3> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:J> = <nat:3> * <var:q> ^ <nat:3> + <nat:1> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:J> = <nat:3> * <var:q> ^ <nat:4> + <nat:1> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:4> * <var:q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:q> /\ <var:J> = <nat:3> * <var:q> ^ <nat:5> + <nat:1> * <var:q> ^ <nat:4> + <nat:4> * <var:q> ^ <nat:3> + <nat:4> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 