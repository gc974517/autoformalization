\begin{document} \begin{theorem} Take a code segment in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:5> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:R> ; <var:L4> := <nat:7> ; <var:L4> := <var:L4> * <var:R> ; <var:L4> := <var:L4> * <var:R> ; <var:L4> := <var:L4> * <var:R> ; <var:L4> := <var:L4> * <var:R> ; <var:P> := <var:L4> ; <var:P> := <var:P> + <var:L1> ; <var:P> := <var:P> + <var:L0> \end{verbatim} Allowing it to be that $ <var:R> = <var:H> $ before evaluating this code it holds that we see $ <var:P> = <nat:7> * <var:H> ^ <nat:4> + <nat:1> * <var:H> + <nat:5> $ when set of instructions is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:R> = <var:H> \} \\ <var:L0> := <nat:5> ; \\ \{ <var:R> = <var:H> \land <var:L0> = <nat:5> \} \\ <var:L1> := <nat:1> ; \\ \{ <var:R> = <var:H> \land <var:L0> = <nat:5> \land <var:L1> = <nat:1> \} \\ <var:L1> := <var:L1> * <var:R> ; \\ \{ <var:R> = <var:H> \land <var:L0> = <nat:5> \land <var:L1> = <nat:1> \cdot <var:H> \} \\ <var:L4> := <nat:7> ; \\ \{ <var:R> = <var:H> \land <var:L0> = <nat:5> \land <var:L1> = <nat:1> \cdot <var:H> \land <var:L4> = <nat:7> \} \\ <var:L4> := <var:L4> * <var:R> ; \\ \{ <var:R> = <var:H> \land <var:L0> = <nat:5> \land <var:L1> = <nat:1> \cdot <var:H> \land <var:L4> = <nat:7> \cdot <var:H> \} \\ <var:L4> := <var:L4> * <var:R> ; \\ \{ <var:R> = <var:H> \land <var:L0> = <nat:5> \land <var:L1> = <nat:1> \cdot <var:H> \land <var:L4> = <nat:7> \cdot <var:H> ^ <nat:2> \} \\ <var:L4> := <var:L4> * <var:R> ; \\ \{ <var:R> = <var:H> \land <var:L0> = <nat:5> \land <var:L1> = <nat:1> \cdot <var:H> \land <var:L4> = <nat:7> \cdot <var:H> ^ <nat:3> \} \\ <var:L4> := <var:L4> * <var:R> ; \\ \{ <var:R> = <var:H> \land <var:L0> = <nat:5> \land <var:L1> = <nat:1> \cdot <var:H> \land <var:L4> = <nat:7> \cdot <var:H> ^ <nat:4> \} \\ <var:P> := <var:L4> ; \\ \{ <var:R> = <var:H> \land <var:L0> = <nat:5> \land <var:L1> = <nat:1> \cdot <var:H> \land <var:P> = <nat:7> \cdot <var:H> ^ <nat:4> \} \\ <var:P> := <var:P> + <var:L1> ; \\ \{ <var:R> = <var:H> \land <var:L0> = <nat:5> \land <var:P> = <nat:7> \cdot <var:H> ^ <nat:4> + <nat:1> \cdot <var:H> \} \\ <var:P> := <var:P> + <var:L0> \\ \{ <var:R> = <var:H> \land <var:P> = <nat:7> \cdot <var:H> ^ <nat:4> + <nat:1> \cdot <var:H> + <nat:5> \} \end{eqnarray} Using typical Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L4> : string := " <var:L4> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:R> = <var:H> }} <var:L0> := <nat:5> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:R> ; <var:L4> := <nat:7> ; <var:L4> := <var:L4> * <var:R> ; <var:L4> := <var:L4> * <var:R> ; <var:L4> := <var:L4> * <var:R> ; <var:L4> := <var:L4> * <var:R> ; <var:P> := <var:L4> ; <var:P> := <var:P> + <var:L1> ; <var:P> := <var:P> + <var:L0> {{ <var:P> = <nat:7> * <var:H> ^ <nat:4> + <nat:1> * <var:H> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:1> * <var:H> /\ <var:L4> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:1> * <var:H> /\ <var:L4> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:1> * <var:H> /\ <var:L4> = <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:1> * <var:H> /\ <var:L4> = <nat:7> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:1> * <var:H> /\ <var:L4> = <nat:7> * <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:L0> = <nat:5> /\ <var:L1> = <nat:1> * <var:H> /\ <var:P> = <nat:7> * <var:H> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:L0> = <nat:5> /\ <var:P> = <nat:7> * <var:H> ^ <nat:4> + <nat:1> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:H> /\ <var:P> = <nat:7> * <var:H> ^ <nat:4> + <nat:1> * <var:H> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 