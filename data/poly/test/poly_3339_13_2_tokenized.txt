\begin{document} \begin{definition} Take a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:a> := <nat:1> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:2> + <var:a> * <var:h> ; <var:a> := <nat:2> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:1> + <var:a> * <var:h> ; <var:a> := <var:a> * <var:h> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:1> + <var:a> * <var:h> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:1> + <var:a> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:h> = <var:N> $ before running this set of commands , then $ <var:a> = <nat:1> \times <var:N> ^ <nat:12> + <nat:3> \times <var:N> ^ <nat:11> + <nat:2> \times <var:N> ^ <nat:10> + <nat:2> \times <var:N> ^ <nat:9> + <nat:4> \times <var:N> ^ <nat:8> + <nat:4> \times <var:N> ^ <nat:7> + <nat:1> \times <var:N> ^ <nat:6> + <nat:3> \times <var:N> ^ <nat:4> + <nat:3> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:1> $ after set of instructions executes . \end{theorem} \begin{proof} Proving correctness for the set of instructions can be shown through typical Hoare techniques . Moving forward to the upcoming statement seen in our set of instructions , we have the variable update statement \verb | <var:a> := <nat:1> ; | . This transfers $ \{ <var:h> = <var:N> \} $ to $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \} $ . Advancing , we see the variable update command \verb | <var:a> := <nat:3> + <var:a> * <var:h> ; | . This takes the precondition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \} $ to $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> + <nat:3> \} $ . This is known to be sound by the assignment rule from usual Hoare reasoning . Stepping through , the statement binding $ <nat:2> + <var:a> * <var:h> $ toward $ <var:a>$ . This statement transfers $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> + <nat:3> \} $ into $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:2> \} $ . Honing in on the next bit of code seen in our list of commands , the variable update command \verb | <var:a> := <nat:2> + <var:a> * <var:h> ; | . This advances the precondition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:2> \} $ into $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> + <nat:2> \} $ . Moving forward to the next piece of code contained in our set of instructions , we see the assignment statement yielding $ <nat:4> + <var:a> * <var:h> $ into $ <var:a>$ . This transfers the precondition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> + <nat:2> \} $ to the condition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:4> + <nat:3> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> + <nat:4> \} $ . This is shown using the assignment inference rule defined by usual Hoare techniques . Further , the assignment code giving $ <nat:4> + <var:a> * <var:h> $ toward $ <var:a>$ . This moves the precondition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:4> + <nat:3> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> + <nat:4> \} $ toward the condition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:5> + <nat:3> \cdot <var:N> ^ <nat:4> + <nat:2> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> + <nat:4> \} $ . This is rigorously given with the assignment inference rule in typical Hoare reasoning . Considering the upcoming piece of code in the series of commands , we have the assignment statement defining $ <nat:1> + <var:a> * <var:h> $ as $ <var:a>$ . This statement redefines the condition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:5> + <nat:3> \cdot <var:N> ^ <nat:4> + <nat:2> \cdot <var:N> ^ <nat:3> + <nat:2> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> + <nat:4> \} $ as the postcondition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:6> + <nat:3> \cdot <var:N> ^ <nat:5> + <nat:2> \cdot <var:N> ^ <nat:4> + <nat:2> \cdot <var:N> ^ <nat:3> + <nat:4> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> + <nat:1> \} $ . This is deduced through the assignment scheme obtained from standard Hoare reasoning . Advancing to the upcoming line found in our list of instructions , we have the code \verb | <var:a> := <var:a> * <var:h> ; | . This transfers the condition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:6> + <nat:3> \cdot <var:N> ^ <nat:5> + <nat:2> \cdot <var:N> ^ <nat:4> + <nat:2> \cdot <var:N> ^ <nat:3> + <nat:4> \cdot <var:N> ^ <nat:2> + <nat:4> \cdot <var:N> + <nat:1> \} $ to the postcondition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:7> + <nat:3> \cdot <var:N> ^ <nat:6> + <nat:2> \cdot <var:N> ^ <nat:5> + <nat:2> \cdot <var:N> ^ <nat:4> + <nat:4> \cdot <var:N> ^ <nat:3> + <nat:4> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + \} $ . Moving on to the subsequent command found in our code , the statement \verb | <var:a> := <nat:3> + <var:a> * <var:h> ; | . This advances the condition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:7> + <nat:3> \cdot <var:N> ^ <nat:6> + <nat:2> \cdot <var:N> ^ <nat:5> + <nat:2> \cdot <var:N> ^ <nat:4> + <nat:4> \cdot <var:N> ^ <nat:3> + <nat:4> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + \} $ as the postcondition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:8> + <nat:3> \cdot <var:N> ^ <nat:7> + <nat:2> \cdot <var:N> ^ <nat:6> + <nat:2> \cdot <var:N> ^ <nat:5> + <nat:4> \cdot <var:N> ^ <nat:4> + <nat:4> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:3> \} $ . This is known to be sound using the assignment scheme given in typical Hoare reasoning . Advancing to the following statement contained in our series of instructions , the binding line \verb | <var:a> := <nat:3> + <var:a> * <var:h> ; | . This code redefines the precondition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:8> + <nat:3> \cdot <var:N> ^ <nat:7> + <nat:2> \cdot <var:N> ^ <nat:6> + <nat:2> \cdot <var:N> ^ <nat:5> + <nat:4> \cdot <var:N> ^ <nat:4> + <nat:4> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:3> \} $ to the postcondition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:9> + <nat:3> \cdot <var:N> ^ <nat:8> + <nat:2> \cdot <var:N> ^ <nat:7> + <nat:2> \cdot <var:N> ^ <nat:6> + <nat:4> \cdot <var:N> ^ <nat:5> + <nat:4> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> + <nat:3> \} $ . This is guaranteed using the assignment law found in standard Hoare reasoning . Going forward , we see the assignment statement \verb | <var:a> := <nat:1> + <var:a> * <var:h> ; | . This redefines $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:9> + <nat:3> \cdot <var:N> ^ <nat:8> + <nat:2> \cdot <var:N> ^ <nat:7> + <nat:2> \cdot <var:N> ^ <nat:6> + <nat:4> \cdot <var:N> ^ <nat:5> + <nat:4> \cdot <var:N> ^ <nat:4> + <nat:1> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> + <nat:3> \} $ into the condition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:10> + <nat:3> \cdot <var:N> ^ <nat:9> + <nat:2> \cdot <var:N> ^ <nat:8> + <nat:2> \cdot <var:N> ^ <nat:7> + <nat:4> \cdot <var:N> ^ <nat:6> + <nat:4> \cdot <var:N> ^ <nat:5> + <nat:1> \cdot <var:N> ^ <nat:4> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:1> \} $ . Following , the binding statement letting $ <nat:3> + <var:a> * <var:h> $ into $ <var:a>$ . This transfers $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:10> + <nat:3> \cdot <var:N> ^ <nat:9> + <nat:2> \cdot <var:N> ^ <nat:8> + <nat:2> \cdot <var:N> ^ <nat:7> + <nat:4> \cdot <var:N> ^ <nat:6> + <nat:4> \cdot <var:N> ^ <nat:5> + <nat:1> \cdot <var:N> ^ <nat:4> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:1> \} $ to the postcondition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:11> + <nat:3> \cdot <var:N> ^ <nat:10> + <nat:2> \cdot <var:N> ^ <nat:9> + <nat:2> \cdot <var:N> ^ <nat:8> + <nat:4> \cdot <var:N> ^ <nat:7> + <nat:4> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:5> + <nat:3> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:3> \} $ . Advancing to the proceeding statement contained in the set of commands , we have the variable update command \verb | <var:a> := <nat:1> + <var:a> * <var:h> | . This code takes $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:11> + <nat:3> \cdot <var:N> ^ <nat:10> + <nat:2> \cdot <var:N> ^ <nat:9> + <nat:2> \cdot <var:N> ^ <nat:8> + <nat:4> \cdot <var:N> ^ <nat:7> + <nat:4> \cdot <var:N> ^ <nat:6> + <nat:1> \cdot <var:N> ^ <nat:5> + <nat:3> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:1> \cdot <var:N> + <nat:3> \} $ toward the condition $ \{ <var:h> = <var:N> \land <var:a> = <nat:1> \cdot <var:N> ^ <nat:12> + <nat:3> \cdot <var:N> ^ <nat:11> + <nat:2> \cdot <var:N> ^ <nat:10> + <nat:2> \cdot <var:N> ^ <nat:9> + <nat:4> \cdot <var:N> ^ <nat:8> + <nat:4> \cdot <var:N> ^ <nat:7> + <nat:1> \cdot <var:N> ^ <nat:6> + <nat:3> \cdot <var:N> ^ <nat:4> + <nat:3> \cdot <var:N> ^ <nat:3> + <nat:1> \cdot <var:N> ^ <nat:2> + <nat:3> \cdot <var:N> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:a> := <nat:1> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:2> + <var:a> * <var:h> ; <var:a> := <nat:2> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:4> + <var:a> * <var:h> ; <var:a> := <nat:1> + <var:a> * <var:h> ; <var:a> := <var:a> * <var:h> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:1> + <var:a> * <var:h> ; <var:a> := <nat:3> + <var:a> * <var:h> ; <var:a> := <nat:1> + <var:a> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:h> = <var:N> }} <def:poly> {{ <var:a> = <nat:1> * <var:N> ^ <nat:12> + <nat:3> * <var:N> ^ <nat:11> + <nat:2> * <var:N> ^ <nat:10> + <nat:2> * <var:N> ^ <nat:9> + <nat:4> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:a> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:a> = <nat:1> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:9> + <nat:3> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:10> + <nat:3> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:11> + <nat:3> * <var:N> ^ <nat:10> + <nat:2> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:7> + <nat:4> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:N> /\ <var:a> = <nat:1> * <var:N> ^ <nat:12> + <nat:3> * <var:N> ^ <nat:11> + <nat:2> * <var:N> ^ <nat:10> + <nat:2> * <var:N> ^ <nat:9> + <nat:4> * <var:N> ^ <nat:8> + <nat:4> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 