\begin{document} \begin{definition} Define a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:V0> := <nat:1> ; <var:V1> := <nat:9> ; <var:V1> := <var:V1> * <var:B> ; <var:L> := <var:V1> ; <var:L> := <var:L> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:B> = <var:i> $ prior to the evaluation of our series of instructions it holds that we see $ <var:L> = <nat:9> * <var:i> + <nat:1> $ when code has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:B> = <var:i> \} \\ <var:V0> := <nat:1> ; \\ \{ <var:B> = <var:i> \land <var:V0> = <nat:1> \} \\ <var:V1> := <nat:9> ; \\ \{ <var:B> = <var:i> \land <var:V0> = <nat:1> \land <var:V1> = <nat:9> \} \\ <var:V1> := <var:V1> * <var:B> ; \\ \{ <var:B> = <var:i> \land <var:V0> = <nat:1> \land <var:V1> = <nat:9> \cdot <var:i> \} \\ <var:L> := <var:V1> ; \\ \{ <var:B> = <var:i> \land <var:V0> = <nat:1> \land <var:L> = <nat:9> \cdot <var:i> \} \\ <var:L> := <var:L> + <var:V0> \\ \{ <var:B> = <var:i> \land <var:L> = <nat:9> \cdot <var:i> + <nat:1> \} \end{eqnarray} Applying Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V0> := <nat:1> ; <var:V1> := <nat:9> ; <var:V1> := <var:V1> * <var:B> ; <var:L> := <var:V1> ; <var:L> := <var:L> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:B> = <var:i> }} <def:poly> {{ <var:L> = <nat:9> * <var:i> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:V0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:V0> = <nat:1> /\ <var:V1> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:V0> = <nat:1> /\ <var:L> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:i> /\ <var:L> = <nat:9> * <var:i> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 