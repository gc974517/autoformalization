\begin{document} \begin{theorem} Let the following code segment as \begin{verbatim} <var:x0> := <nat:3> ; <var:x1> := <nat:3> ; <var:x1> := <var:x1> * <var:M> ; <var:Z> := <var:x1> ; <var:Z> := <var:Z> + <var:x0> \end{verbatim} Allowing for some $ <var:b> $ it to be that $ <var:M> = <var:b> $ ahead of running our code segment , it follows that we see $ <var:Z> = <nat:3> * <var:b> + <nat:3> $ after series of instructions has exited . \end{theorem} \begin{proof} The method of proof for our code is given using usual Hoare techniques . Moving on to the next step , we see \begin{eqnarray} \{ <var:M> = <var:b> \} \, <var:x0> := <nat:3> \, \{ <var:M> = <var:b> \land <var:x0> = <nat:3> \} \end{eqnarray} After , we have \begin{eqnarray} \{ <var:M> = <var:b> \} \, <var:x0> := <nat:3> \, \{ <var:M> = <var:b> \land <var:x0> = <nat:3> \} \\ \{ <var:M> = <var:b> \land <var:x0> = <nat:3> \} \, <var:x1> := <nat:3> \, \{ <var:M> = <var:b> \land <var:x0> = <nat:3> \land <var:x1> = <nat:3> \} \\ \{ <var:M> = <var:b> \land <var:x0> = <nat:3> \land <var:x1> = <nat:3> \} \, <var:x1> := <var:x1> * <var:M> \, \{ <var:M> = <var:b> \land <var:x0> = <nat:3> \land <var:x1> = <nat:3> * <var:b> \} \end{eqnarray} This is given with the assignment rule of standard Hoare reasoning . Paying attention to the proceeding line contained in the code segment , we have \begin{eqnarray} \{ <var:M> = <var:b> \} \, <var:x0> := <nat:3> \, \{ <var:M> = <var:b> \land <var:x0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:M> = <var:b> }} <var:x0> := <nat:3> ; <var:x1> := <nat:3> ; <var:x1> := <var:x1> * <var:M> ; <var:Z> := <var:x1> ; <var:Z> := <var:Z> + <var:x0> {{ <var:Z> = <nat:3> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:x0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:x0> = <nat:3> /\ <var:x1> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:x0> = <nat:3> /\ <var:Z> = <nat:3> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:b> /\ <var:Z> = <nat:3> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 