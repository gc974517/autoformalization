\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:b0> := <nat:9> ; <var:e> := <var:b0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Allowing , with some $ <var:K> \in \mathbb{N} $ , $ <var:m> = <var:K> $ ahead of evaluating the list of instructions , it follows that we see $ <var:e> = <nat:9> $ once set of commands has finished . \end{theorem} \begin{proof} The way to prove correctness for this code segment is accomplished through Hoare reasoning . Advancing on , \verb | { <var:m> = <var:K> } <var:b0> := <nat:9> { <var:m> = <var:K> \land <var:b0> = <nat:9> } | and \verb | { <var:m> = <var:K> \land <var:b0> = <nat:9> } <var:e> := <var:b0{ <var:m> = <var:K> \land <var:e> = <nat:9> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <def:poly> := <var:b0> := <nat:9> ; <var:e> := <var:b0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:m> = <var:K> }} <def:poly> {{ <var:e> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:b0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:e> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 