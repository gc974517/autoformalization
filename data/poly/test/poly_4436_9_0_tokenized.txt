\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:2> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:P> ; <var:g2> := <nat:9> ; <var:g2> := <var:g2> * <var:P> ; <var:g2> := <var:g2> * <var:P> ; <var:h> := <var:g2> ; <var:h> := <var:h> + <var:g1> ; <var:h> := <var:h> + <var:g0> \end{verbatim} Given it to be that $ <var:P> = <var:H> $ ahead of running our code , then we see $ <var:h> = <nat:9> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:2> $ when list of instructions exits . \end{theorem} \begin{proof} Notice this decorated list of commands . \begin{eqnarray} \{ <var:P> = <var:H> \} \\ <var:g0> := <nat:2> ; \\ \{ <var:P> = <var:H> \land <var:g0> = <nat:2> \} \\ <var:g1> := <nat:3> ; \\ \{ <var:P> = <var:H> \land <var:g0> = <nat:2> \land <var:g1> = <nat:3> \} \\ <var:g1> := <var:g1> * <var:P> ; \\ \{ <var:P> = <var:H> \land <var:g0> = <nat:2> \land <var:g1> = <nat:3> \cdot <var:H> \} \\ <var:g2> := <nat:9> ; \\ \{ <var:P> = <var:H> \land <var:g0> = <nat:2> \land <var:g1> = <nat:3> \cdot <var:H> \land <var:g2> = <nat:9> \} \\ <var:g2> := <var:g2> * <var:P> ; \\ \{ <var:P> = <var:H> \land <var:g0> = <nat:2> \land <var:g1> = <nat:3> \cdot <var:H> \land <var:g2> = <nat:9> \cdot <var:H> \} \\ <var:g2> := <var:g2> * <var:P> ; \\ \{ <var:P> = <var:H> \land <var:g0> = <nat:2> \land <var:g1> = <nat:3> \cdot <var:H> \land <var:g2> = <nat:9> \cdot <var:H> ^ <nat:2> \} \\ <var:h> := <var:g2> ; \\ \{ <var:P> = <var:H> \land <var:g0> = <nat:2> \land <var:g1> = <nat:3> \cdot <var:H> \land <var:h> = <nat:9> \cdot <var:H> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:g1> ; \\ \{ <var:P> = <var:H> \land <var:g0> = <nat:2> \land <var:h> = <nat:9> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> \} \\ <var:h> := <var:h> + <var:g0> \\ \{ <var:P> = <var:H> \land <var:h> = <nat:9> \cdot <var:H> ^ <nat:2> + <nat:3> \cdot <var:H> + <nat:2> \} \end{eqnarray} Advancing the evaluation of this set of commands gives us : \begin{eqnarray} \end{eqnarray} Using Hoare reasoning resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:P> = <var:H> }} <var:g0> := <nat:2> ; <var:g1> := <nat:3> ; <var:g1> := <var:g1> * <var:P> ; <var:g2> := <nat:9> ; <var:g2> := <var:g2> * <var:P> ; <var:g2> := <var:g2> * <var:P> ; <var:h> := <var:g2> ; <var:h> := <var:h> + <var:g1> ; <var:h> := <var:h> + <var:g0> {{ <var:h> = <nat:9> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:g0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:3> * <var:H> /\ <var:g2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:3> * <var:H> /\ <var:g2> = <nat:9> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:3> * <var:H> /\ <var:g2> = <nat:9> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:g0> = <nat:2> /\ <var:g1> = <nat:3> * <var:H> /\ <var:h> = <nat:9> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:g0> = <nat:2> /\ <var:h> = <nat:9> * <var:H> ^ <nat:2> + <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:H> /\ <var:h> = <nat:9> * <var:H> ^ <nat:2> + <nat:3> * <var:H> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 