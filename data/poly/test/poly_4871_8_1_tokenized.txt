\begin{document} \begin{theorem} Let the following code in \emph{Imp} such that \begin{verbatim} <var:l1> := <var:z> ; <var:l2> := <var:l1> * <var:z> ; <var:l0> := <nat:5> ; <var:l1> := <var:l1> * <nat:2> ; <var:l2> := <var:l2> * <nat:7> ; <var:T> := <var:l2> <var:T> := <var:T> + <var:l1> <var:T> := <var:T> + <var:l0> \end{verbatim} Allowing that we have $ <var:z> = <var:q> $ prior to running the series of instructions , it must be that $ <var:T> = <nat:7> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:5> $ . \end{theorem} \begin{proof} The flow of logic for our list of instructions is given by standard Hoare logic . Shifting focus toward the proceeding bits of codeseen in our program , we see \begin{verbatim} { <var:z> = <var:q> } <var:l1> := <var:z> { <var:z> = <var:q> \land <var:l1> = <var:q> } { <var:z> = <var:q> \land <var:l1> = <var:q> } <var:l2> := <var:l1> * <var:z> { <var:z> = <var:q> \land <var:l1> = <var:q> \land <var:l2> = <var:q> ^ <nat:2> } { <var:z> = <var:q> \land <var:l1> = <var:q> \land <var:l2> = <var:q> ^ <nat:2> } <var:l0> := <nat:5> { <var:z> = <var:q> \land <var:l1> = <var:q> \land <var:l2> = <var:q> ^ <nat:2> \land <var:l0> = <nat:5> } \end{verbatim} This is known to be sound through the binding law of Hoare techniques . Looking at the proceeding lines seen in the segment of code , we have \begin{verbatim} { <var:z> = <var:q> } <var:l1> := <var:z> { <var:z> = <var:q> \land <var:l1> = <var:q> } { <var:z> = <var:q> \land <var:l1> = <var:q> } <var:l2> := <var:l1> * <var:z> { <var:z> = <var:q> \land <var:l1> = <var:q> \land <var:l2> = <var:q> ^ <nat:2> } { <var:z> = <var:q> \land <var:l1> = <var:q> \land <var:l2> = <var:q> ^ <nat:2> } <var:l0> := <nat:5> { <var:z> = <var:q> \land <var:l1> = <var:q> \land <var:l2> = <var:q> ^ <nat:2> \land <var:l0> = <nat:5> } { <var:z> = <var:q> \land <var:l1> = <var:q> \land <var:l2> = <var:q> ^ <nat:2> \land <var:l0> = <nat:5> } <var:l1> := <var:l1> * <nat:2> { <var:z> = <var:q> \land <var:l1> = <nat:2> \cdot <var:q> \land <var:l2> = <var:q> ^ <nat:2> \land <var:l0> = <nat:5> } \end{verbatim} This is sound using the binding rule given by standard Hoare reasoning . Taking a look at the next line of code in the program , we have \begin{verbatim} { <var:z> = <var:q> } <var:l1> := <var:z> { <var:z> = <var:q> \land <var:l1> = <var:q> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:z> = <var:q> }} <var:l1> := <var:z> ; <var:l2> := <var:l1> * <var:z> ; <var:l0> := <nat:5> ; <var:l1> := <var:l1> * <nat:2> ; <var:l2> := <var:l2> * <nat:7> ; <var:T> := <var:l2> <var:T> := <var:T> + <var:l1> <var:T> := <var:T> + <var:l0> {{ <var:T> = <nat:7> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:l1> = <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:l1> = <var:q> /\ <var:l2> = <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:l1> = <var:q> /\ <var:l2> = <var:q> ^ <nat:2> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:l1> = <nat:2> * <var:q> /\ <var:l2> = <var:q> ^ <nat:2> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:l1> = <nat:2> * <var:q> /\ <var:l2> = <nat:7> * <var:q> ^ <nat:2> /\ <var:l0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:l1> = <nat:2> * <var:q> /\ <var:l0> = <nat:5> /\ <var:T> = <nat:7> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:l0> = <nat:5> /\ <var:T> = <nat:7> * <var:q> ^ <nat:2> + <nat:2> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:q> /\ <var:T> = <nat:7> * <var:q> ^ <nat:2> + <nat:2> * <var:q> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 