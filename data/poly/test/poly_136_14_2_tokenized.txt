\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} such that \begin{verbatim} <var:Y> := <nat:3> ; <var:Y> := <var:Y> * <var:B> ; <var:Y> := <nat:1> + <var:Y> * <var:B> ; <var:Y> := <var:Y> * <var:B> ; <var:Y> := <nat:3> + <var:Y> * <var:B> ; <var:Y> := <var:Y> * <var:B> ; <var:Y> := <nat:1> + <var:Y> * <var:B> ; <var:Y> := <nat:3> + <var:Y> * <var:B> ; <var:Y> := <nat:3> + <var:Y> * <var:B> ; <var:Y> := <nat:3> + <var:Y> * <var:B> ; <var:Y> := <nat:1> + <var:Y> * <var:B> ; <var:Y> := <nat:2> + <var:Y> * <var:B> ; <var:Y> := <nat:4> + <var:Y> * <var:B> ; <var:Y> := <nat:4> + <var:Y> * <var:B> \end{verbatim} Allow that $ <var:B> = <var:p> $ , assuming some positive integer coefficients $ <var:p> $ , before evaluating this series of instructions it must be that we see $ <var:Y> = <nat:3> \times <var:p> ^ <nat:13> + <nat:1> \times <var:p> ^ <nat:11> + <nat:3> \times <var:p> ^ <nat:9> + <nat:1> \times <var:p> ^ <nat:7> + <nat:3> \times <var:p> ^ <nat:6> + <nat:3> \times <var:p> ^ <nat:5> + <nat:3> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:4> $ when set of commands is done executing . \end{theorem} \begin{proof} The flow of logic for our series of instructions can be accomplished by typical Hoare techniques . Advancing to the next line of code found in the code segment , the binding line \verb | <var:Y> := <nat:3> ; | . This command forwards $ \{ <var:B> = <var:p> \} $ into the condition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \} $ . This is guaranteed using the assignment law defined in usual Hoare reasoning . Advancing , the binding line binding $ <var:Y> * <var:B> $ into $ <var:Y>$ . This line redefines the precondition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \} $ into the postcondition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> + \} $ . Moving forward , we have the environment update line \verb | <var:Y> := <nat:1> + <var:Y> * <var:B> ; | . This command advances $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> + \} $ into the condition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \} $ . This is known to be sound by the assignment rule given by usual Hoare techniques . Looking at the subsequent step contained in the segment of code , the command defining $ <var:Y> * <var:B> $ into $ <var:Y>$ . This moves the precondition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \} $ toward $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:3> + <nat:1> \cdot <var:p> + \} $ . After , we have the assignment statement \verb | <var:Y> := <nat:3> + <var:Y> * <var:B> ; | . This code takes the condition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:3> + <nat:1> \cdot <var:p> + \} $ into $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:4> + <nat:1> \cdot <var:p> ^ <nat:2> + <nat:3> \} $ . This is deduced using the assignment law from usual Hoare logic . Looking at the upcoming line in our list of instructions , the variable binding line \verb | <var:Y> := <var:Y> * <var:B> ; | . This statement takes the precondition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:4> + <nat:1> \cdot <var:p> ^ <nat:2> + <nat:3> \} $ as the postcondition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:5> + <nat:1> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> + \} $ . This is shown to be logically sound with the assignment scheme defined by standard Hoare reasoning . Moving onward , the variable assignmet command \verb | <var:Y> := <nat:1> + <var:Y> * <var:B> ; | . This forwards the precondition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:5> + <nat:1> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> + \} $ as $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:6> + <nat:1> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \} $ . Now , the binding code \verb | <var:Y> := <nat:3> + <var:Y> * <var:B> ; | . This transfers the condition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:6> + <nat:1> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \} $ toward the postcondition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:7> + <nat:1> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:1> \cdot <var:p> + <nat:3> \} $ . This is ensured through the assignment scheme in usual Hoare techniques . Advancing to the next step , we see the assignment command assigning $ <nat:3> + <var:Y> * <var:B> $ as $ <var:Y>$ . This code moves the precondition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:7> + <nat:1> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:1> \cdot <var:p> + <nat:3> \} $ toward the postcondition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:8> + <nat:1> \cdot <var:p> ^ <nat:6> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:1> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:3> \} $ . This is sound using the assignment law given in standard Hoare reasoning . Advancing to the following line of code seen in our series of commands , we see the environment update command giving $ <nat:3> + <var:Y> * <var:B> $ to $ <var:Y>$ . This moves $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:8> + <nat:1> \cdot <var:p> ^ <nat:6> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:1> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:3> \} $ as the condition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:9> + <nat:1> \cdot <var:p> ^ <nat:7> + <nat:3> \cdot <var:p> ^ <nat:5> + <nat:1> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:3> \} $ . Focusing on the following line of code seen in the set of instructions , the statement binding $ <nat:1> + <var:Y> * <var:B> $ into $ <var:Y>$ . This takes the condition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:9> + <nat:1> \cdot <var:p> ^ <nat:7> + <nat:3> \cdot <var:p> ^ <nat:5> + <nat:1> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:3> \} $ into the condition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:10> + <nat:1> \cdot <var:p> ^ <nat:8> + <nat:3> \cdot <var:p> ^ <nat:6> + <nat:1> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:1> \} $ . Advancing to the following line in the list of commands , the variable update line giving $ <nat:2> + <var:Y> * <var:B> $ as $ <var:Y>$ . This advances the condition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:10> + <nat:1> \cdot <var:p> ^ <nat:8> + <nat:3> \cdot <var:p> ^ <nat:6> + <nat:1> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:3> \cdot <var:p> + <nat:1> \} $ to $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:11> + <nat:1> \cdot <var:p> ^ <nat:9> + <nat:3> \cdot <var:p> ^ <nat:7> + <nat:1> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:2> \} $ . Taking a look at the next command seen in our series of instructions , the assignment code \verb | <var:Y> := <nat:4> + <var:Y> * <var:B> ; | . This code transfers the precondition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:11> + <nat:1> \cdot <var:p> ^ <nat:9> + <nat:3> \cdot <var:p> ^ <nat:7> + <nat:1> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:3> \cdot <var:p> ^ <nat:2> + <nat:1> \cdot <var:p> + <nat:2> \} $ to the condition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:12> + <nat:1> \cdot <var:p> ^ <nat:10> + <nat:3> \cdot <var:p> ^ <nat:8> + <nat:1> \cdot <var:p> ^ <nat:6> + <nat:3> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:1> \cdot <var:p> ^ <nat:2> + <nat:2> \cdot <var:p> + <nat:4> \} $ . This is given with the assignment rule given in Hoare reasoning . Advancing on , the environment update statement \verb | <var:Y> := <nat:4> + <var:Y> * <var:B> | . This command redefines the condition $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:12> + <nat:1> \cdot <var:p> ^ <nat:10> + <nat:3> \cdot <var:p> ^ <nat:8> + <nat:1> \cdot <var:p> ^ <nat:6> + <nat:3> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:1> \cdot <var:p> ^ <nat:2> + <nat:2> \cdot <var:p> + <nat:4> \} $ to $ \{ <var:B> = <var:p> \land <var:Y> = <nat:3> \cdot <var:p> ^ <nat:13> + <nat:1> \cdot <var:p> ^ <nat:11> + <nat:3> \cdot <var:p> ^ <nat:9> + <nat:1> \cdot <var:p> ^ <nat:7> + <nat:3> \cdot <var:p> ^ <nat:6> + <nat:3> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:1> \cdot <var:p> ^ <nat:3> + <nat:2> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> + <nat:4> \} $ . This is guaranteed with the assignment rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:B> = <var:p> }} <var:Y> := <nat:3> ; <var:Y> := <var:Y> * <var:B> ; <var:Y> := <nat:1> + <var:Y> * <var:B> ; <var:Y> := <var:Y> * <var:B> ; <var:Y> := <nat:3> + <var:Y> * <var:B> ; <var:Y> := <var:Y> * <var:B> ; <var:Y> := <nat:1> + <var:Y> * <var:B> ; <var:Y> := <nat:3> + <var:Y> * <var:B> ; <var:Y> := <nat:3> + <var:Y> * <var:B> ; <var:Y> := <nat:3> + <var:Y> * <var:B> ; <var:Y> := <nat:1> + <var:Y> * <var:B> ; <var:Y> := <nat:2> + <var:Y> * <var:B> ; <var:Y> := <nat:4> + <var:Y> * <var:B> ; <var:Y> := <nat:4> + <var:Y> * <var:B> {{ <var:Y> = <nat:3> * <var:p> ^ <nat:13> + <nat:1> * <var:p> ^ <nat:11> + <nat:3> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> * <var:p> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> * <var:p> ^ <nat:3> + <nat:1> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:3> + <nat:3> * <var:p> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:3> + <nat:1> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> * <var:p> ^ <nat:10> + <nat:1> * <var:p> ^ <nat:8> + <nat:3> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> * <var:p> ^ <nat:11> + <nat:1> * <var:p> ^ <nat:9> + <nat:3> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> * <var:p> ^ <nat:12> + <nat:1> * <var:p> ^ <nat:10> + <nat:3> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:p> /\ <var:Y> = <nat:3> * <var:p> ^ <nat:13> + <nat:1> * <var:p> ^ <nat:11> + <nat:3> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:7> + <nat:3> * <var:p> ^ <nat:6> + <nat:3> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 