\begin{document} \begin{definition} Consider a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:m1> := <var:c> ; <var:m2> := <var:m1> * <var:c> ; <var:m3> := <var:m2> * <var:c> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:5> ; <var:m2> := <var:m2> * <nat:2> ; <var:m3> := <var:m3> * <nat:9> ; <var:P> := <var:m3> <var:P> := <var:P> + <var:m2> <var:P> := <var:P> + <var:m1> <var:P> := <var:P> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:c> = <var:x> $ prior to running this series of commands , then we have $ <var:P> = <nat:9> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> + <nat:5> \times <var:x> + <nat:7> $ after list of commands executes . \end{theorem} \begin{proof} Demonstrating correctness of the series of commands can be shown using typical Hoare logic . Advancing to the next step , the assignment line yielding $ <var:c> $ to $ <var:m1>$ . This line takes the precondition $ \{ <var:c> = <var:x> \} $ into the postcondition $ \{ <var:c> = <var:x> \land <var:m1> = <var:x> \} $ . This is ensured using the assignment scheme given in Hoare logic . Taking another step toward the proceeding command seen in our list of commands , we see the environment update command defining $ <var:m1> * <var:c> $ to $ <var:m2>$ . This advances the condition $ \{ <var:c> = <var:x> \land <var:m1> = <var:x> \} $ into $ \{ <var:c> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <var:x> ^ <nat:2> \} $ . This is sound with the assignment scheme defined by typical Hoare reasoning . Further , we see the environment update code yielding $ <var:m2> * <var:c> $ toward $ <var:m3>$ . This advances the condition $ \{ <var:c> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <var:x> ^ <nat:2> \} $ to the condition $ \{ <var:c> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \} $ . Moving on to the next step , we see the variable update code giving $ <nat:7> $ into $ <var:m0>$ . This line advances the condition $ \{ <var:c> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \} $ as $ \{ <var:c> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \land <var:m0> = <nat:7> \} $ . Moving on to the proceeding bit of code found in our program , the line yielding $ <var:m1> * <nat:5> $ as $ <var:m1>$ . This transfers the condition $ \{ <var:c> = <var:x> \land <var:m1> = <var:x> \land <var:m2> = <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \land <var:m0> = <nat:7> \} $ toward the postcondition $ \{ <var:c> = <var:x> \land <var:m1> = <nat:5> \times <var:x> \land <var:m2> = <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \land <var:m0> = <nat:7> \} $ . Observing the next statement contained in the segment of code , we see the environment update command \verb | <var:m2> := <var:m2> * <nat:2> ; | . This takes the precondition $ \{ <var:c> = <var:x> \land <var:m1> = <nat:5> \times <var:x> \land <var:m2> = <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \land <var:m0> = <nat:7> \} $ into the postcondition $ \{ <var:c> = <var:x> \land <var:m1> = <nat:5> \times <var:x> \land <var:m2> = <nat:2> \times <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \land <var:m0> = <nat:7> \} $ . This is given through the assignment law given by standard Hoare reasoning . Taking a look at the subsequent line seen in the list of instructions , the environment update code \verb | <var:m3> := <var:m3> * <nat:9> ; | . This command advances the condition $ \{ <var:c> = <var:x> \land <var:m1> = <nat:5> \times <var:x> \land <var:m2> = <nat:2> \times <var:x> ^ <nat:2> \land <var:m3> = <var:x> ^ <nat:3> \land <var:m0> = <nat:7> \} $ to $ \{ <var:c> = <var:x> \land <var:m1> = <nat:5> \times <var:x> \land <var:m2> = <nat:2> \times <var:x> ^ <nat:2> \land <var:m3> = <nat:9> \times <var:x> ^ <nat:3> \land <var:m0> = <nat:7> \} $ . This is given through the assignment scheme in typical Hoare logic . Looking at the next bit of code in the set of commands , the binding code \verb | <var:P> := <var:m3> | . This code advances the condition $ \{ <var:c> = <var:x> \land <var:m1> = <nat:5> \times <var:x> \land <var:m2> = <nat:2> \times <var:x> ^ <nat:2> \land <var:m3> = <nat:9> \times <var:x> ^ <nat:3> \land <var:m0> = <nat:7> \} $ as the postcondition $ \{ <var:c> = <var:x> \land <var:m1> = <nat:5> \times <var:x> \land <var:m2> = <nat:2> \times <var:x> ^ <nat:2> \land <var:m0> = <nat:7> \land <var:P> = <nat:9> \times <var:x> ^ <nat:3> \} $ . This is sound with the assignment scheme found in Hoare logic . Immediately after , we see the variable update line letting $ <var:P> + <var:m2$ toward $ <var:P>$ . This line forwards the precondition $ \{ <var:c> = <var:x> \land <var:m1> = <nat:5> \times <var:x> \land <var:m2> = <nat:2> \times <var:x> ^ <nat:2> \land <var:m0> = <nat:7> \land <var:P> = <nat:9> \times <var:x> ^ <nat:3> \} $ into the condition $ \{ <var:c> = <var:x> \land <var:m1> = <nat:5> \times <var:x> \land <var:m0> = <nat:7> \land <var:P> = <nat:9> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> \} $ . This is given with the assignment rule found in standard Hoare techniques . Moving on to the upcoming command seen in our list of commands , we have the line \verb | <var:P> := <var:P> + <var:m1> | . This redefines $ \{ <var:c> = <var:x> \land <var:m1> = <nat:5> \times <var:x> \land <var:m0> = <nat:7> \land <var:P> = <nat:9> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> \} $ as the condition $ \{ <var:c> = <var:x> \land <var:m0> = <nat:7> \land <var:P> = <nat:9> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> + <nat:5> \times <var:x> \} $ . This is rigorously given with the assignment rule given by usual Hoare techniques . Moving on , we see the environment update statement \verb | <var:P> := <var:P> + <var:m0> | . This line takes the precondition $ \{ <var:c> = <var:x> \land <var:m0> = <nat:7> \land <var:P> = <nat:9> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> + <nat:5> \times <var:x> \} $ as the condition $ \{ <var:c> = <var:x> \land <var:P> = <nat:9> \times <var:x> ^ <nat:3> + <nat:2> \times <var:x> ^ <nat:2> + <nat:5> \times <var:x> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m1> := <var:c> ; <var:m2> := <var:m1> * <var:c> ; <var:m3> := <var:m2> * <var:c> ; <var:m0> := <nat:7> ; <var:m1> := <var:m1> * <nat:5> ; <var:m2> := <var:m2> * <nat:2> ; <var:m3> := <var:m3> * <nat:9> ; <var:P> := <var:m3> <var:P> := <var:P> + <var:m2> <var:P> := <var:P> + <var:m1> <var:P> := <var:P> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:c> = <var:x> }} <def:poly> {{ <var:P> = <nat:9> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:m1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:m1> = <var:x> /\ <var:m2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:m1> = <var:x> /\ <var:m2> = <var:x> ^ <nat:2> /\ <var:m3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:m1> = <var:x> /\ <var:m2> = <var:x> ^ <nat:2> /\ <var:m3> = <var:x> ^ <nat:3> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:m1> = <nat:5> * <var:x> /\ <var:m2> = <var:x> ^ <nat:2> /\ <var:m3> = <var:x> ^ <nat:3> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:m1> = <nat:5> * <var:x> /\ <var:m2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:m3> = <var:x> ^ <nat:3> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:m1> = <nat:5> * <var:x> /\ <var:m2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:m3> = <nat:9> * <var:x> ^ <nat:3> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:m1> = <nat:5> * <var:x> /\ <var:m2> = <nat:2> * <var:x> ^ <nat:2> /\ <var:m0> = <nat:7> /\ <var:P> = <nat:9> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:m1> = <nat:5> * <var:x> /\ <var:m0> = <nat:7> /\ <var:P> = <nat:9> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:m0> = <nat:7> /\ <var:P> = <nat:9> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:5> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:x> /\ <var:P> = <nat:9> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:5> * <var:x> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 