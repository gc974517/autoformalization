\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I0> := <nat:2> ; <var:I1> := <nat:9> ; <var:I1> := <var:I1> * <var:e> ; <var:I2> := <nat:6> ; <var:I2> := <var:I2> * <var:e> ; <var:I2> := <var:I2> * <var:e> ; <var:S> := <var:I2> ; <var:S> := <var:S> + <var:I1> ; <var:S> := <var:S> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Assume ( for any positive integer coefficients $ <var:N> $ ) $ <var:e> = <var:N> $ ahead of running this set of commands it holds that we have $ <var:S> = <nat:6> * <var:N> ^ <nat:2> + <nat:9> * <var:N> + <nat:2> $ once code terminates . \end{theorem} \begin{proof} Observe this decorated program . \begin{eqnarray} \{ <var:e> = <var:N> \} \\ <var:I0> := <nat:2> ; \\ \{ <var:e> = <var:N> \land <var:I0> = <nat:2> \} \\ <var:I1> := <nat:9> ; \\ \{ <var:e> = <var:N> \land <var:I0> = <nat:2> \land <var:I1> = <nat:9> \} \\ <var:I1> := <var:I1> * <var:e> ; \\ \{ <var:e> = <var:N> \land <var:I0> = <nat:2> \land <var:I1> = <nat:9> \cdot <var:N> \} \\ <var:I2> := <nat:6> ; \\ \{ <var:e> = <var:N> \land <var:I0> = <nat:2> \land <var:I1> = <nat:9> \cdot <var:N> \land <var:I2> = <nat:6> \} \\ <var:I2> := <var:I2> * <var:e> ; \\ \{ <var:e> = <var:N> \land <var:I0> = <nat:2> \land <var:I1> = <nat:9> \cdot <var:N> \land <var:I2> = <nat:6> \cdot <var:N> \} \\ <var:I2> := <var:I2> * <var:e> ; \\ \{ <var:e> = <var:N> \land <var:I0> = <nat:2> \land <var:I1> = <nat:9> \cdot <var:N> \land <var:I2> = <nat:6> \cdot <var:N> ^ <nat:2> \} \\ <var:S> := <var:I2> ; \\ \{ <var:e> = <var:N> \land <var:I0> = <nat:2> \land <var:I1> = <nat:9> \cdot <var:N> \land <var:S> = <nat:6> \cdot <var:N> ^ <nat:2> \} \\ <var:S> := <var:S> + <var:I1> ; \\ \{ <var:e> = <var:N> \land <var:I0> = <nat:2> \land <var:S> = <nat:6> \cdot <var:N> ^ <nat:2> + <nat:9> \cdot <var:N> \} \\ <var:S> := <var:S> + <var:I0> \\ \{ <var:e> = <var:N> \land <var:S> = <nat:6> \cdot <var:N> ^ <nat:2> + <nat:9> \cdot <var:N> + <nat:2> \} \end{eqnarray} The application of standard Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <def:poly> := <var:I0> := <nat:2> ; <var:I1> := <nat:9> ; <var:I1> := <var:I1> * <var:e> ; <var:I2> := <nat:6> ; <var:I2> := <var:I2> * <var:e> ; <var:I2> := <var:I2> * <var:e> ; <var:S> := <var:I2> ; <var:S> := <var:S> + <var:I1> ; <var:S> := <var:S> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:e> = <var:N> }} <def:poly> {{ <var:S> = <nat:6> * <var:N> ^ <nat:2> + <nat:9> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:9> * <var:N> /\ <var:I2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:9> * <var:N> /\ <var:I2> = <nat:6> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:9> * <var:N> /\ <var:I2> = <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:I0> = <nat:2> /\ <var:I1> = <nat:9> * <var:N> /\ <var:S> = <nat:6> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:I0> = <nat:2> /\ <var:S> = <nat:6> * <var:N> ^ <nat:2> + <nat:9> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:N> /\ <var:S> = <nat:6> * <var:N> ^ <nat:2> + <nat:9> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 