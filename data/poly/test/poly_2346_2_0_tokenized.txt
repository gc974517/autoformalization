\begin{document} \begin{theorem} Define the following code as follows \begin{verbatim} <var:J0> := <nat:5> ; <var:O> := <var:J0> \end{verbatim} Assuming it to hold that $ <var:A> = <var:j> $ prior to the evaluation of our set of instructions , it must be that we have $ <var:O> = <nat:5> $ once series of commands has finished executing . \end{theorem} \begin{proof} The flow of logic for the program can be demonstrated using typical Hoare reasoning . Immediately following , we have the variable update command \verb | <var:J0> := <nat:5> ; | . This redefines the condition $ \{ <var:A> = <var:j> \} $ toward the condition $ \{ <var:A> = <var:j> \land <var:J0> = <nat:5> \} $ . This is deduced through the assignment scheme found in standard Hoare reasoning . After , the variable binding statement \verb | <var:O> := <var:J0> | . This line takes $ \{ <var:A> = <var:j> \land <var:J0> = <nat:5> \} $ as the postcondition $ \{ <var:A> = <var:j> \land <var:O> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:A> = <var:j> }} <var:J0> := <nat:5> ; <var:O> := <var:J0> {{ <var:O> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:J0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:j> /\ <var:O> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 