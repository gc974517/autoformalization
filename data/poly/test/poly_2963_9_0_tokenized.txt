\begin{document} \begin{theorem} Define a program : \begin{verbatim} <var:S0> := <nat:6> ; <var:S1> := <nat:9> ; <var:S1> := <var:S1> * <var:v> ; <var:S2> := <nat:4> ; <var:S2> := <var:S2> * <var:v> ; <var:S2> := <var:S2> * <var:v> ; <var:n> := <var:S2> ; <var:n> := <var:n> + <var:S1> ; <var:n> := <var:n> + <var:S0> \end{verbatim} Given $ <var:v> = <var:T> $ prior to interpreting our set of commands , it holds that $ <var:n> = <nat:4> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:6> $ . \end{theorem} \begin{proof} Arguing the correctness of our program can be demonstrated using standard Hoare techniques . Moving onward , \[ \begin{tabular} {rcl} \{ <var:v> = <var:T> \} & <var:S0> := <nat:6> & \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \} \\ \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \} & <var:S1> := <nat:9> & \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \} \end{tabular} This is deduced using the variable update rule obtained from typical Hoare logic . Moving on to the next step , we see \[ \begin{tabular} {rcl} \{ <var:v> = <var:T> \} & <var:S0> := <nat:6> & \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \} \\ \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \} & <var:S1> := <nat:9> & \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \} \\ \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \} & <var:S1> := <var:S1> * <var:v> & \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \times <var:T> \} \\ \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \times <var:T> \} & <var:S2> := <nat:4> & \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \times <var:T> \land <var:S2> = <nat:4> \} \\ \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \times <var:T> \land <var:S2> = <nat:4> \} & <var:S2> := <var:S2> * <var:v> & \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \land <var:S1> = <nat:9> \times <var:T> \land <var:S2> = <nat:4> \times <var:T> \} \end{tabular} This is deduced with the binding rule found in usual Hoare techniques . Moving on to the proceeding piece of code seen in our code segment , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:T> \} & <var:S0> := <nat:6> & \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \} \end{tabular} This is ensured through the variable update scheme in usual Hoare logic . Paying attention to the proceeding statement found in the code segment , we see \[ \begin{tabular} {rcl} \{ <var:v> = <var:T> \} & <var:S0> := <nat:6> & \{ <var:v> = <var:T> \land <var:S0> = <nat:6> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:v> = <var:T> }} <var:S0> := <nat:6> ; <var:S1> := <nat:9> ; <var:S1> := <var:S1> * <var:v> ; <var:S2> := <nat:4> ; <var:S2> := <var:S2> * <var:v> ; <var:S2> := <var:S2> * <var:v> ; <var:n> := <var:S2> ; <var:n> := <var:n> + <var:S1> ; <var:n> := <var:n> + <var:S0> {{ <var:n> = <nat:4> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:T> /\ <var:S0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:T> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:T> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:T> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:T> /\ <var:S2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:T> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:T> /\ <var:S2> = <nat:4> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:T> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:T> /\ <var:S2> = <nat:4> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:T> /\ <var:S0> = <nat:6> /\ <var:S1> = <nat:9> * <var:T> /\ <var:n> = <nat:4> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:T> /\ <var:S0> = <nat:6> /\ <var:n> = <nat:4> * <var:T> ^ <nat:2> + <nat:9> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:T> /\ <var:n> = <nat:4> * <var:T> ^ <nat:2> + <nat:9> * <var:T> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 