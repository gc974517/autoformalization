\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:O> := <nat:4> ; <var:O> := <nat:2> + <var:O> * <var:F> ; <var:O> := <nat:2> + <var:O> * <var:F> ; <var:O> := <var:O> * <var:F> ; <var:O> := <var:O> * <var:F> ; <var:O> := <nat:4> + <var:O> * <var:F> ; <var:O> := <nat:2> + <var:O> * <var:F> ; <var:O> := <var:O> * <var:F> ; <var:O> := <nat:2> + <var:O> * <var:F> ; <var:O> := <nat:4> + <var:O> * <var:F> ; <var:O> := <nat:3> + <var:O> * <var:F> ; <var:O> := <nat:1> + <var:O> * <var:F> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Given that we have $ <var:F> = <var:u> $ prior to evaluating our code segment , it follows that we see $ <var:O> = <nat:4> * <var:u> ^ <nat:11> + <nat:2> * <var:u> ^ <nat:10> + <nat:2> * <var:u> ^ <nat:9> + <nat:4> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:1> $ once series of instructions has terminated . \end{theorem} \begin{proof} See that this decorated code . \begin{eqnarray} \{ <var:F> = <var:u> \} \\ <var:O> := <nat:4> ; \\ \{ <var:F> = <var:u> \land <var:O> = <nat:4> \} \\ <var:O> := <nat:2> + <var:O> * <var:F> ; \\ \{ <var:F> = <var:u> \land <var:O> = <nat:4> * <var:u> + <nat:2> \} \\ <var:O> := <nat:2> + <var:O> * <var:F> ; \\ \{ <var:F> = <var:u> \land <var:O> = <nat:4> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:2> \} \\ <var:O> := <var:O> * <var:F> ; \\ \{ <var:F> = <var:u> \land <var:O> = <nat:4> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + \} \\ <var:O> := <var:O> * <var:F> ; \\ \{ <var:F> = <var:u> \land <var:O> = <nat:4> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + \} \\ <var:O> := <nat:4> + <var:O> * <var:F> ; \\ \{ <var:F> = <var:u> \land <var:O> = <nat:4> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:4> \} \\ <var:O> := <nat:2> + <var:O> * <var:F> ; \\ \{ <var:F> = <var:u> \land <var:O> = <nat:4> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:4> * <var:u> + <nat:2> \} \\ <var:O> := <var:O> * <var:F> ; \\ \{ <var:F> = <var:u> \land <var:O> = <nat:4> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + \} \\ <var:O> := <nat:2> + <var:O> * <var:F> ; \\ \{ <var:F> = <var:u> \land <var:O> = <nat:4> * <var:u> ^ <nat:8> + <nat:2> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> \} \\ <var:O> := <nat:4> + <var:O> * <var:F> ; \\ \{ <var:F> = <var:u> \land <var:O> = <nat:4> * <var:u> ^ <nat:9> + <nat:2> * <var:u> ^ <nat:8> + <nat:2> * <var:u> ^ <nat:7> + <nat:4> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> + <nat:4> \} \\ <var:O> := <nat:3> + <var:O> * <var:F> ; \\ \{ <var:F> = <var:u> \land <var:O> = <nat:4> * <var:u> ^ <nat:10> + <nat:2> * <var:u> ^ <nat:9> + <nat:2> * <var:u> ^ <nat:8> + <nat:4> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:3> \} \\ <var:O> := <nat:1> + <var:O> * <var:F> \\ \{ <var:F> = <var:u> \land <var:O> = <nat:4> * <var:u> ^ <nat:11> + <nat:2> * <var:u> ^ <nat:10> + <nat:2> * <var:u> ^ <nat:9> + <nat:4> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:1> \} \end{eqnarray} Applying Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:O> := <nat:4> ; <var:O> := <nat:2> + <var:O> * <var:F> ; <var:O> := <nat:2> + <var:O> * <var:F> ; <var:O> := <var:O> * <var:F> ; <var:O> := <var:O> * <var:F> ; <var:O> := <nat:4> + <var:O> * <var:F> ; <var:O> := <nat:2> + <var:O> * <var:F> ; <var:O> := <var:O> * <var:F> ; <var:O> := <nat:2> + <var:O> * <var:F> ; <var:O> := <nat:4> + <var:O> * <var:F> ; <var:O> := <nat:3> + <var:O> * <var:F> ; <var:O> := <nat:1> + <var:O> * <var:F> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:F> = <var:u> }} <def:poly> {{ <var:O> = <nat:4> * <var:u> ^ <nat:11> + <nat:2> * <var:u> ^ <nat:10> + <nat:2> * <var:u> ^ <nat:9> + <nat:4> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:O> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:O> = <nat:4> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:O> = <nat:4> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:O> = <nat:4> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:O> = <nat:4> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:O> = <nat:4> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:O> = <nat:4> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:4> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:O> = <nat:4> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:O> = <nat:4> * <var:u> ^ <nat:8> + <nat:2> * <var:u> ^ <nat:7> + <nat:2> * <var:u> ^ <nat:6> + <nat:4> * <var:u> ^ <nat:3> + <nat:2> * <var:u> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:O> = <nat:4> * <var:u> ^ <nat:9> + <nat:2> * <var:u> ^ <nat:8> + <nat:2> * <var:u> ^ <nat:7> + <nat:4> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:3> + <nat:2> * <var:u> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:O> = <nat:4> * <var:u> ^ <nat:10> + <nat:2> * <var:u> ^ <nat:9> + <nat:2> * <var:u> ^ <nat:8> + <nat:4> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:4> + <nat:2> * <var:u> ^ <nat:2> + <nat:4> * <var:u> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:u> /\ <var:O> = <nat:4> * <var:u> ^ <nat:11> + <nat:2> * <var:u> ^ <nat:10> + <nat:2> * <var:u> ^ <nat:9> + <nat:4> * <var:u> ^ <nat:6> + <nat:2> * <var:u> ^ <nat:5> + <nat:2> * <var:u> ^ <nat:3> + <nat:4> * <var:u> ^ <nat:2> + <nat:3> * <var:u> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 