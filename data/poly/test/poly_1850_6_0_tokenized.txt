\begin{document} \begin{definition} Define the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:u0> := <nat:2> ; <var:u2> := <nat:3> ; <var:u2> := <var:u2> * <var:D> ; <var:u2> := <var:u2> * <var:D> ; <var:Y> := <var:u2> ; <var:Y> := <var:Y> + <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assume --- given all $ <var:y> \in \mathbb{Z}^+ $ --- it to hold that $ <var:D> = <var:y> $ before the evaluation of this series of instructions then we see $ <var:Y> = <nat:3> * <var:y> ^ <nat:2> + <nat:2> $ when code has finished . \end{theorem} \begin{proof} The flow of logic for the series of commands is done using standard Hoare reasoning . Considering the subsequent pieces of code seen in our list of commands , we have \begin{eqnarray} \{ <var:D> = <var:y> \} \, <var:u0> := <nat:2> \, \{ <var:D> = <var:y> \land <var:u0> = <nat:2> \} \\ \{ <var:D> = <var:y> \land <var:u0> = <nat:2> \} \, <var:u2> := <nat:3> \, \{ <var:D> = <var:y> \land <var:u0> = <nat:2> \land <var:u2> = <nat:3> \} \end{eqnarray} Honing in on the next lines of codecontained in our series of commands , \begin{eqnarray} \{ <var:D> = <var:y> \} \, <var:u0> := <nat:2> \, \{ <var:D> = <var:y> \land <var:u0> = <nat:2> \} \\ \{ <var:D> = <var:y> \land <var:u0> = <nat:2> \} \, <var:u2> := <nat:3> \, \{ <var:D> = <var:y> \land <var:u0> = <nat:2> \land <var:u2> = <nat:3> \} \\ \{ <var:D> = <var:y> \land <var:u0> = <nat:2> \land <var:u2> = <nat:3> \} \, <var:u2> := <var:u2> * <var:D> \, \{ <var:D> = <var:y> \land <var:u0> = <nat:2> \land <var:u2> = <nat:3> \cdot <var:y> \} \end{eqnarray} This is given through the law from standard Hoare reasoning . Further , we have \begin{eqnarray} \{ <var:D> = <var:y> \} \, <var:u0> := <nat:2> \, \{ <var:D> = <var:y> \land <var:u0> = <nat:2> \} \end{eqnarray} This is known to be sound using the variable binding rule given by Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u2> : string := " <var:u2> " . Definition <def:poly> := <var:u0> := <nat:2> ; <var:u2> := <nat:3> ; <var:u2> := <var:u2> * <var:D> ; <var:u2> := <var:u2> * <var:D> ; <var:Y> := <var:u2> ; <var:Y> := <var:Y> + <var:u0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:D> = <var:y> }} <def:poly> {{ <var:Y> = <nat:3> * <var:y> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:u0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:u0> = <nat:2> /\ <var:u2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:u0> = <nat:2> /\ <var:u2> = <nat:3> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:u0> = <nat:2> /\ <var:u2> = <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:u0> = <nat:2> /\ <var:Y> = <nat:3> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:y> /\ <var:Y> = <nat:3> * <var:y> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 