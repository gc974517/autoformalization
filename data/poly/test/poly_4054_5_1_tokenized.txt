\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:V1> := <var:P> ; <var:V0> := <nat:6> ; <var:V1> := <var:V1> * <nat:4> ; <var:H> := <var:V1> <var:H> := <var:H> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Given given all positive coefficients $ <var:m> $ it to be that $ <var:P> = <var:m> $ before the evaluation of this program it holds that $ <var:H> = <nat:4> \times <var:m> + <nat:6> $ . \end{theorem} \begin{proof} The proof of this code is shown by standard Hoare techniques . Moving forward to the next step , we have the binding command \verb | <var:V1> := <var:P> ; | . This statement transfers the precondition $ \{ <var:P> = <var:m> \} $ toward $ \{ <var:P> = <var:m> \land <var:V1> = <var:m> \} $ . This is sound by the assignment inference rule defined by usual Hoare reasoning . Further , the environment update line \verb | <var:V0> := <nat:6> ; | . This code transfers $ \{ <var:P> = <var:m> \land <var:V1> = <var:m> \} $ as the condition $ \{ <var:P> = <var:m> \land <var:V1> = <var:m> \land <var:V0> = <nat:6> \} $ . Going to the next step , we have the variable update statement assigning $ <var:V1> * <nat:4> $ to $ <var:V1>$ . This forwards the precondition $ \{ <var:P> = <var:m> \land <var:V1> = <var:m> \land <var:V0> = <nat:6> \} $ as the postcondition $ \{ <var:P> = <var:m> \land <var:V1> = <nat:4> \times <var:m> \land <var:V0> = <nat:6> \} $ . This is deduced through the assignment scheme from usual Hoare techniques . Going to the next step , we see the binding command letting $ <var:V1$ as $ <var:H>$ . This forwards the precondition $ \{ <var:P> = <var:m> \land <var:V1> = <nat:4> \times <var:m> \land <var:V0> = <nat:6> \} $ toward the condition $ \{ <var:P> = <var:m> \land <var:V0> = <nat:6> \land <var:H> = <nat:4> \times <var:m> \} $ . Shifting focus toward the upcoming piece of code contained in the code segment , we have the binding code assigning $ <var:H> + <var:V0$ toward $ <var:H>$ . This code redefines the precondition $ \{ <var:P> = <var:m> \land <var:V0> = <nat:6> \land <var:H> = <nat:4> \times <var:m> \} $ toward the postcondition $ \{ <var:P> = <var:m> \land <var:H> = <nat:4> \times <var:m> + <nat:6> \} $ . This is ensured through the assignment rule found in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <def:poly> := <var:V1> := <var:P> ; <var:V0> := <nat:6> ; <var:V1> := <var:V1> * <nat:4> ; <var:H> := <var:V1> <var:H> := <var:H> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:P> = <var:m> }} <def:poly> {{ <var:H> = <nat:4> * <var:m> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:V1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:V1> = <var:m> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:V1> = <nat:4> * <var:m> /\ <var:V0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:V0> = <nat:6> /\ <var:H> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:m> /\ <var:H> = <nat:4> * <var:m> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 