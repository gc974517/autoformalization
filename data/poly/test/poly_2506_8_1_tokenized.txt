\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i1> := <var:M> ; <var:i2> := <var:i1> * <var:M> ; <var:i0> := <nat:1> ; <var:i1> := <var:i1> * <nat:4> ; <var:i2> := <var:i2> * <nat:3> ; <var:S> := <var:i2> <var:S> := <var:S> + <var:i1> <var:S> := <var:S> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:M> = <var:D> $ --- given any $ <var:D> $ --- prior to running our code segment it must be that $ <var:S> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing standard Hoare logic returns : \begin{eqnarray} \{ <var:M> = <var:D> \} \\ <var:i1> := <var:M> ; \\ \{ <var:M> = <var:D> \land <var:i1> = <var:D> \} \\ <var:i2> := <var:i1> * <var:M> ; \\ \{ <var:M> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \} \end{eqnarray} Furthering evaluating this series of instructions produces : \begin{eqnarray} <var:i0> := <nat:1> ; \\ \{ <var:M> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i0> = <nat:1> \} \\ <var:i1> := <var:i1> * <nat:4> ; \\ \{ <var:M> = <var:D> \land <var:i1> = <nat:4> \cdot <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i0> = <nat:1> \} \\ <var:i2> := <var:i2> * <nat:3> ; \\ \{ <var:M> = <var:D> \land <var:i1> = <nat:4> \cdot <var:D> \land <var:i2> = <nat:3> \cdot <var:D> ^ <nat:2> \land <var:i0> = <nat:1> \} \end{eqnarray} Advancing evaluating our program returns : \begin{eqnarray} <var:S> := <var:i2> \\ \{ <var:M> = <var:D> \land <var:i1> = <nat:4> \cdot <var:D> \land <var:i0> = <nat:1> \land <var:S> = <nat:3> \cdot <var:D> ^ <nat:2> \} \end{eqnarray} Furthering executing the code results in : \begin{eqnarray} <var:S> := <var:S> + <var:i1> \\ \{ <var:M> = <var:D> \land <var:i0> = <nat:1> \land <var:S> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> \} \\ <var:S> := <var:S> + <var:i0> \\ \{ <var:M> = <var:D> \land <var:S> = <nat:3> \cdot <var:D> ^ <nat:2> + <nat:4> \cdot <var:D> + <nat:1> \} \end{eqnarray} Given the preceding argument , this list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i1> := <var:M> ; <var:i2> := <var:i1> * <var:M> ; <var:i0> := <nat:1> ; <var:i1> := <var:i1> * <nat:4> ; <var:i2> := <var:i2> * <nat:3> ; <var:S> := <var:i2> <var:S> := <var:S> + <var:i1> <var:S> := <var:S> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:M> = <var:D> }} <def:poly> {{ <var:S> = <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:i1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:i1> = <var:D> /\ <var:i2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:i1> = <var:D> /\ <var:i2> = <var:D> ^ <nat:2> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:i1> = <nat:4> * <var:D> /\ <var:i2> = <var:D> ^ <nat:2> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:i1> = <nat:4> * <var:D> /\ <var:i2> = <nat:3> * <var:D> ^ <nat:2> /\ <var:i0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:i1> = <nat:4> * <var:D> /\ <var:i0> = <nat:1> /\ <var:S> = <nat:3> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:i0> = <nat:1> /\ <var:S> = <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:D> /\ <var:S> = <nat:3> * <var:D> ^ <nat:2> + <nat:4> * <var:D> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 