\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:v0> := <nat:4> ; <var:v1> := <nat:4> ; <var:v1> := <var:v1> * <var:L> ; <var:s> := <var:v1> ; <var:s> := <var:s> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:L> = <var:g> $ ( given every natural coefficients $ <var:g> $ ) ahead of the execution of our list of instructions , then we have $ <var:s> = <nat:4> \cdot <var:g> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our set of instructions can be accomplished using typical Hoare logic . Moving forward to the proceeding statement in the list of commands , we see \[ \begin{tabular} {rcl} \{ <var:L> = <var:g> \} & <var:v0> := <nat:4> & \{ <var:L> = <var:g> \land <var:v0> = <nat:4> \} \end{tabular} Now , we see \[ \begin{tabular} {rcl} \{ <var:L> = <var:g> \} & <var:v0> := <nat:4> & \{ <var:L> = <var:g> \land <var:v0> = <nat:4> \} \\ \{ <var:L> = <var:g> \land <var:v0> = <nat:4> \} & <var:v1> := <nat:4> & \{ <var:L> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \} \\ \{ <var:L> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \} & <var:v1> := <var:v1> * <var:L> & \{ <var:L> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \times <var:g> \} \\ \{ <var:L> = <var:g> \land <var:v0> = <nat:4> \land <var:v1> = <nat:4> \times <var:g> \} & <var:s> := <var:v1> & \{ <var:L> = <var:g> \land <var:v0> = <nat:4> \land <var:s> = <nat:4> \times <var:g> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v0> := <nat:4> ; <var:v1> := <nat:4> ; <var:v1> := <var:v1> * <var:L> ; <var:s> := <var:v1> ; <var:s> := <var:s> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:L> = <var:g> }} <def:poly> {{ <var:s> = <nat:4> * <var:g> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:v0> = <nat:4> /\ <var:v1> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:v0> = <nat:4> /\ <var:s> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:g> /\ <var:s> = <nat:4> * <var:g> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 