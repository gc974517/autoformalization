\begin{document} \begin{theorem} We define the following series of instructions such that \begin{verbatim} <var:V0> := <nat:3> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:R> ; <var:V2> := <nat:6> ; <var:V2> := <var:V2> * <var:R> ; <var:V2> := <var:V2> * <var:R> ; <var:b> := <var:V2> ; <var:b> := <var:b> + <var:V1> ; <var:b> := <var:b> + <var:V0> \end{verbatim} Assuming --- for all positive numbers $ <var:P> $ --- that we have $ <var:R> = <var:P> $ prior to interpreting this series of instructions , it holds that we see $ <var:b> = <nat:6> \times <var:P> ^ <nat:2> + <nat:4> \times <var:P> + <nat:3> $ once series of instructions has finished . \end{theorem} \begin{proof} The argument for this code can be accomplished using standard Hoare logic . Jumping to the proceeding lines found in our series of commands , we see \begin{eqnarray} \{ <var:R> = <var:P> \} \, <var:V0> := <nat:3> \, \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \} \\ \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \} \, <var:V1> := <nat:4> \, \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> \} \\ \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> \} \, <var:V1> := <var:V1> * <var:R> \, \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> * <var:P> \} \\ \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> * <var:P> \} \, <var:V2> := <nat:6> \, \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> * <var:P> \land <var:V2> = <nat:6> \} \\ \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> * <var:P> \land <var:V2> = <nat:6> \} \, <var:V2> := <var:V2> * <var:R> \, \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> * <var:P> \land <var:V2> = <nat:6> * <var:P> \} \\ \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> * <var:P> \land <var:V2> = <nat:6> * <var:P> \} \, <var:V2> := <var:V2> * <var:R> \, \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> * <var:P> \land <var:V2> = <nat:6> * <var:P> ^ <nat:2> \} \\ \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> * <var:P> \land <var:V2> = <nat:6> * <var:P> ^ <nat:2> \} \, <var:b> := <var:V2> \, \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> * <var:P> \land <var:b> = <nat:6> * <var:P> ^ <nat:2> \} \end{eqnarray} This is guaranteed through the scheme given in typical Hoare logic . Moving on to the proceeding steps found in our segment of code , we have \begin{eqnarray} \{ <var:R> = <var:P> \} \, <var:V0> := <nat:3> \, \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \} \\ \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \} \, <var:V1> := <nat:4> \, \{ <var:R> = <var:P> \land <var:V0> = <nat:3> \land <var:V1> = <nat:4> \} \end{eqnarray} This is given by the binding law defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:R> = <var:P> }} <var:V0> := <nat:3> ; <var:V1> := <nat:4> ; <var:V1> := <var:V1> * <var:R> ; <var:V2> := <nat:6> ; <var:V2> := <var:V2> * <var:R> ; <var:V2> := <var:V2> * <var:R> ; <var:b> := <var:V2> ; <var:b> := <var:b> + <var:V1> ; <var:b> := <var:b> + <var:V0> {{ <var:b> = <nat:6> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:P> /\ <var:V0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:P> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:P> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:P> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:4> * <var:P> /\ <var:V2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:P> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:4> * <var:P> /\ <var:V2> = <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:P> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:4> * <var:P> /\ <var:V2> = <nat:6> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:P> /\ <var:V0> = <nat:3> /\ <var:V1> = <nat:4> * <var:P> /\ <var:b> = <nat:6> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:P> /\ <var:V0> = <nat:3> /\ <var:b> = <nat:6> * <var:P> ^ <nat:2> + <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:P> /\ <var:b> = <nat:6> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 