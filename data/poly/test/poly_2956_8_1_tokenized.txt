\begin{document} \begin{theorem} We define a code such that \begin{verbatim} <var:F1> := <var:S> ; <var:F2> := <var:F1> * <var:S> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:9> ; <var:F2> := <var:F2> * <nat:2> ; <var:C> := <var:F2> <var:C> := <var:C> + <var:F1> <var:C> := <var:C> + <var:F0> \end{verbatim} Allowing $ <var:S> = <var:L> $ --- given $ <var:L> \in \mathbb{N} $ --- before interpreting our list of commands it follows that we have $ <var:C> = <nat:2> \cdot <var:L> ^ <nat:2> + <nat:9> \cdot <var:L> + <nat:1> $ once series of instructions is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for our set of commands can be done with usual Hoare reasoning . Now , \begin{eqnarray} \{ <var:S> = <var:L> \} \, <var:F1> := <var:S> \, \{ <var:S> = <var:L> \land <var:F1> = <var:L> \} \\ \{ <var:S> = <var:L> \land <var:F1> = <var:L> \} \, <var:F2> := <var:F1> * <var:S> \, \{ <var:S> = <var:L> \land <var:F1> = <var:L> \land <var:F2> = <var:L> ^ <nat:2> \} \\ \{ <var:S> = <var:L> \land <var:F1> = <var:L> \land <var:F2> = <var:L> ^ <nat:2> \} \, <var:F0> := <nat:1> \, \{ <var:S> = <var:L> \land <var:F1> = <var:L> \land <var:F2> = <var:L> ^ <nat:2> \land <var:F0> = <nat:1> \} \\ \{ <var:S> = <var:L> \land <var:F1> = <var:L> \land <var:F2> = <var:L> ^ <nat:2> \land <var:F0> = <nat:1> \} \, <var:F1> := <var:F1> * <nat:9> \, \{ <var:S> = <var:L> \land <var:F1> = <nat:9> \cdot <var:L> \land <var:F2> = <var:L> ^ <nat:2> \land <var:F0> = <nat:1> \} \\ \{ <var:S> = <var:L> \land <var:F1> = <nat:9> \cdot <var:L> \land <var:F2> = <var:L> ^ <nat:2> \land <var:F0> = <nat:1> \} \, <var:F2> := <var:F2> * <nat:2> \, \{ <var:S> = <var:L> \land <var:F1> = <nat:9> \cdot <var:L> \land <var:F2> = <nat:2> \cdot <var:L> ^ <nat:2> \land <var:F0> = <nat:1> \} \\ \{ <var:S> = <var:L> \land <var:F1> = <nat:9> \cdot <var:L> \land <var:F2> = <nat:2> \cdot <var:L> ^ <nat:2> \land <var:F0> = <nat:1> \} \, <var:C> := <var:F2\, \{ <var:S> = <var:L> \land <var:F1> = <nat:9> \cdot <var:L> \land <var:F0> = <nat:1> \land <var:C> = <nat:2> \cdot <var:L> ^ <nat:2> \} \end{eqnarray} This is ensured by the assignment law defined by usual Hoare reasoning . Following , \begin{eqnarray} \{ <var:S> = <var:L> \} \, <var:F1> := <var:S> \, \{ <var:S> = <var:L> \land <var:F1> = <var:L> \} \end{eqnarray} This is shown to be logically sound with the scheme in typical Hoare logic . Moving onward , we see \begin{eqnarray} \{ <var:S> = <var:L> \} \, <var:F1> := <var:S> \, \{ <var:S> = <var:L> \land <var:F1> = <var:L> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:S> = <var:L> }} <var:F1> := <var:S> ; <var:F2> := <var:F1> * <var:S> ; <var:F0> := <nat:1> ; <var:F1> := <var:F1> * <nat:9> ; <var:F2> := <var:F2> * <nat:2> ; <var:C> := <var:F2> <var:C> := <var:C> + <var:F1> <var:C> := <var:C> + <var:F0> {{ <var:C> = <nat:2> * <var:L> ^ <nat:2> + <nat:9> * <var:L> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:F1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:F1> = <var:L> /\ <var:F2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:F1> = <var:L> /\ <var:F2> = <var:L> ^ <nat:2> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:F1> = <nat:9> * <var:L> /\ <var:F2> = <var:L> ^ <nat:2> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:F1> = <nat:9> * <var:L> /\ <var:F2> = <nat:2> * <var:L> ^ <nat:2> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:F1> = <nat:9> * <var:L> /\ <var:F0> = <nat:1> /\ <var:C> = <nat:2> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:F0> = <nat:1> /\ <var:C> = <nat:2> * <var:L> ^ <nat:2> + <nat:9> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:L> /\ <var:C> = <nat:2> * <var:L> ^ <nat:2> + <nat:9> * <var:L> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 