\begin{document} \begin{theorem} Take the following segment of code as follows \begin{verbatim} <var:q1> := <var:Y> ; <var:q2> := <var:q1> * <var:Y> ; <var:q0> := <nat:1> ; <var:q1> := <var:q1> * <nat:2> ; <var:q2> := <var:q2> * <nat:1> ; <var:z> := <var:q2> <var:z> := <var:z> + <var:q1> <var:z> := <var:z> + <var:q0> \end{verbatim} Given $ <var:Y> = <var:M> $ before executing the list of commands , it must be that we have $ <var:z> = <nat:1> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:1> $ after series of instructions exits . \end{theorem} \begin{proof} Applying usual Hoare techniques gives us : \begin{eqnarray} \{ <var:Y> = <var:M> \} \\ <var:q1> := <var:Y> ; \\ \{ <var:Y> = <var:M> \land <var:q1> = <var:M> \} \\ <var:q2> := <var:q1> * <var:Y> ; \\ \{ <var:Y> = <var:M> \land <var:q1> = <var:M> \land <var:q2> = <var:M> ^ <nat:2> \} \\ <var:q0> := <nat:1> ; \\ \{ <var:Y> = <var:M> \land <var:q1> = <var:M> \land <var:q2> = <var:M> ^ <nat:2> \land <var:q0> = <nat:1> \} \\ <var:q1> := <var:q1> * <nat:2> ; \\ \{ <var:Y> = <var:M> \land <var:q1> = <nat:2> \times <var:M> \land <var:q2> = <var:M> ^ <nat:2> \land <var:q0> = <nat:1> \} \\ <var:q2> := <var:q2> * <nat:1> ; \\ \{ <var:Y> = <var:M> \land <var:q1> = <nat:2> \times <var:M> \land <var:q2> = <nat:1> \times <var:M> ^ <nat:2> \land <var:q0> = <nat:1> \} \\ <var:z> := <var:q2> \\ \{ <var:Y> = <var:M> \land <var:q1> = <nat:2> \times <var:M> \land <var:q0> = <nat:1> \land <var:z> = <nat:1> \times <var:M> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:q1> \\ \{ <var:Y> = <var:M> \land <var:q0> = <nat:1> \land <var:z> = <nat:1> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> \} \\ <var:z> := <var:z> + <var:q0> \\ \{ <var:Y> = <var:M> \land <var:z> = <nat:1> \times <var:M> ^ <nat:2> + <nat:2> \times <var:M> + <nat:1> \} \end{eqnarray} Therefore , the program is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:Y> = <var:M> }} <var:q1> := <var:Y> ; <var:q2> := <var:q1> * <var:Y> ; <var:q0> := <nat:1> ; <var:q1> := <var:q1> * <nat:2> ; <var:q2> := <var:q2> * <nat:1> ; <var:z> := <var:q2> <var:z> := <var:z> + <var:q1> <var:z> := <var:z> + <var:q0> {{ <var:z> = <nat:1> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:q1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:q1> = <var:M> /\ <var:q2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:q1> = <var:M> /\ <var:q2> = <var:M> ^ <nat:2> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:q1> = <nat:2> * <var:M> /\ <var:q2> = <var:M> ^ <nat:2> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:q1> = <nat:2> * <var:M> /\ <var:q2> = <nat:1> * <var:M> ^ <nat:2> /\ <var:q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:q1> = <nat:2> * <var:M> /\ <var:q0> = <nat:1> /\ <var:z> = <nat:1> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:q0> = <nat:1> /\ <var:z> = <nat:1> * <var:M> ^ <nat:2> + <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:M> /\ <var:z> = <nat:1> * <var:M> ^ <nat:2> + <nat:2> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 