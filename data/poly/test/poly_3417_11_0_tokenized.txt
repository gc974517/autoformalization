\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:i0> := <nat:2> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:v> ; <var:i2> := <var:i2> * <var:v> ; <var:i3> := <nat:2> ; <var:i3> := <var:i3> * <var:v> ; <var:i3> := <var:i3> * <var:v> ; <var:i3> := <var:i3> * <var:v> ; <var:h> := <var:i3> ; <var:h> := <var:h> + <var:i2> ; <var:h> := <var:h> + <var:i0> \end{verbatim} Allowing that $ <var:v> = <var:M> $ ( given some natural coefficients $ <var:M> $ ) ahead of interpreting the code it must be that we see $ <var:h> = <nat:2> \times <var:M> ^ <nat:3> + <nat:9> \times <var:M> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the series of instructions can be accomplished by standard Hoare logic . Going forward , \[ \begin{tabular} {rcl} \{ <var:v> = <var:M> \} & <var:i0> := <nat:2> & \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \} \\ \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \} & <var:i2> := <nat:9> & \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \land <var:i2> = <nat:9> \} \end{tabular} Advancing on , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:M> \} & <var:i0> := <nat:2> & \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \} \end{tabular} Going forward , we have \[ \begin{tabular} {rcl} \{ <var:v> = <var:M> \} & <var:i0> := <nat:2> & \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \} \\ \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \} & <var:i2> := <nat:9> & \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \land <var:i2> = <nat:9> \} \\ \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \land <var:i2> = <nat:9> \} & <var:i2> := <var:i2> * <var:v> & \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \land <var:i2> = <nat:9> * <var:M> \} \end{tabular} Looking at the subsequent commands found in the series of commands , \[ \begin{tabular} {rcl} \{ <var:v> = <var:M> \} & <var:i0> := <nat:2> & \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \} \\ \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \} & <var:i2> := <nat:9> & \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \land <var:i2> = <nat:9> \} \\ \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \land <var:i2> = <nat:9> \} & <var:i2> := <var:i2> * <var:v> & \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \land <var:i2> = <nat:9> * <var:M> \} \\ \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \land <var:i2> = <nat:9> * <var:M> \} & <var:i2> := <var:i2> * <var:v> & \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \land <var:i2> = <nat:9> * <var:M> ^ <nat:2> \} \\ \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \land <var:i2> = <nat:9> * <var:M> ^ <nat:2> \} & <var:i3> := <nat:2> & \{ <var:v> = <var:M> \land <var:i0> = <nat:2> \land <var:i2> = <nat:9> * <var:M> ^ <nat:2> \land <var:i3> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:v> = <var:M> }} <var:i0> := <nat:2> ; <var:i2> := <nat:9> ; <var:i2> := <var:i2> * <var:v> ; <var:i2> := <var:i2> * <var:v> ; <var:i3> := <nat:2> ; <var:i3> := <var:i3> * <var:v> ; <var:i3> := <var:i3> * <var:v> ; <var:i3> := <var:i3> * <var:v> ; <var:h> := <var:i3> ; <var:h> := <var:h> + <var:i2> ; <var:h> := <var:h> + <var:i0> {{ <var:h> = <nat:2> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:i0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:i0> = <nat:2> /\ <var:i2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:i0> = <nat:2> /\ <var:i2> = <nat:9> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:i0> = <nat:2> /\ <var:i2> = <nat:9> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:i0> = <nat:2> /\ <var:i2> = <nat:9> * <var:M> ^ <nat:2> /\ <var:i3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:i0> = <nat:2> /\ <var:i2> = <nat:9> * <var:M> ^ <nat:2> /\ <var:i3> = <nat:2> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:i0> = <nat:2> /\ <var:i2> = <nat:9> * <var:M> ^ <nat:2> /\ <var:i3> = <nat:2> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:i0> = <nat:2> /\ <var:i2> = <nat:9> * <var:M> ^ <nat:2> /\ <var:i3> = <nat:2> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:i0> = <nat:2> /\ <var:i2> = <nat:9> * <var:M> ^ <nat:2> /\ <var:h> = <nat:2> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:i0> = <nat:2> /\ <var:h> = <nat:2> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:M> /\ <var:h> = <nat:2> * <var:M> ^ <nat:3> + <nat:9> * <var:M> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 