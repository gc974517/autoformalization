\begin{document} \begin{theorem} We define the following code in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:s> ; <var:M2> := <var:M1> * <var:s> ; <var:M3> := <var:M2> * <var:s> ; <var:M4> := <var:M3> * <var:s> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:3> ; <var:M2> := <var:M2> * <nat:3> ; <var:M3> := <var:M3> * <nat:4> ; <var:M4> := <var:M4> * <nat:3> ; <var:u> := <var:M4> <var:u> := <var:u> + <var:M3> <var:u> := <var:u> + <var:M2> <var:u> := <var:u> + <var:M1> <var:u> := <var:u> + <var:M0> \end{verbatim} Assuming ( taking $ <var:C> \in \mathbb{N} $ ) that we have $ <var:s> = <var:C> $ prior to evaluating the code segment , then we see $ <var:u> = <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:2> $ after list of commands has terminated . \end{theorem} \begin{proof} Proving correctness for this code segment is evident using typical Hoare techniques . After , we have \begin{verbatim} { <var:s> = <var:C> } <var:M1> := <var:s> { <var:s> = <var:C> \land <var:M1> = <var:C> } { <var:s> = <var:C> \land <var:M1> = <var:C> } <var:M2> := <var:M1> * <var:s> { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> } { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> } <var:M3> := <var:M2> * <var:s> { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> \land <var:M3> = <var:C> ^ <nat:3> } { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> \land <var:M3> = <var:C> ^ <nat:3> } <var:M4> := <var:M3> * <var:s> { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> \land <var:M3> = <var:C> ^ <nat:3> \land <var:M4> = <var:C> ^ <nat:4> } { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> \land <var:M3> = <var:C> ^ <nat:3> \land <var:M4> = <var:C> ^ <nat:4> } <var:M0> := <nat:2> { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> \land <var:M3> = <var:C> ^ <nat:3> \land <var:M4> = <var:C> ^ <nat:4> \land <var:M0> = <nat:2> } { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> \land <var:M3> = <var:C> ^ <nat:3> \land <var:M4> = <var:C> ^ <nat:4> \land <var:M0> = <nat:2> } <var:M1> := <var:M1> * <nat:3> { <var:s> = <var:C> \land <var:M1> = <nat:3> \times <var:C> \land <var:M2> = <var:C> ^ <nat:2> \land <var:M3> = <var:C> ^ <nat:3> \land <var:M4> = <var:C> ^ <nat:4> \land <var:M0> = <nat:2> } { <var:s> = <var:C> \land <var:M1> = <nat:3> \times <var:C> \land <var:M2> = <var:C> ^ <nat:2> \land <var:M3> = <var:C> ^ <nat:3> \land <var:M4> = <var:C> ^ <nat:4> \land <var:M0> = <nat:2> } <var:M2> := <var:M2> * <nat:3> { <var:s> = <var:C> \land <var:M1> = <nat:3> \times <var:C> \land <var:M2> = <nat:3> \times <var:C> ^ <nat:2> \land <var:M3> = <var:C> ^ <nat:3> \land <var:M4> = <var:C> ^ <nat:4> \land <var:M0> = <nat:2> } { <var:s> = <var:C> \land <var:M1> = <nat:3> \times <var:C> \land <var:M2> = <nat:3> \times <var:C> ^ <nat:2> \land <var:M3> = <var:C> ^ <nat:3> \land <var:M4> = <var:C> ^ <nat:4> \land <var:M0> = <nat:2> } <var:M3> := <var:M3> * <nat:4> { <var:s> = <var:C> \land <var:M1> = <nat:3> \times <var:C> \land <var:M2> = <nat:3> \times <var:C> ^ <nat:2> \land <var:M3> = <nat:4> \times <var:C> ^ <nat:3> \land <var:M4> = <var:C> ^ <nat:4> \land <var:M0> = <nat:2> } \end{verbatim} This is rigorously given with the assignment rule found in Hoare techniques . Next , we have \begin{verbatim} { <var:s> = <var:C> } <var:M1> := <var:s> { <var:s> = <var:C> \land <var:M1> = <var:C> } { <var:s> = <var:C> \land <var:M1> = <var:C> } <var:M2> := <var:M1> * <var:s> { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> } { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> } <var:M3> := <var:M2> * <var:s> { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> \land <var:M3> = <var:C> ^ <nat:3> } \end{verbatim} Advancing on , we have \begin{verbatim} { <var:s> = <var:C> } <var:M1> := <var:s> { <var:s> = <var:C> \land <var:M1> = <var:C> } { <var:s> = <var:C> \land <var:M1> = <var:C> } <var:M2> := <var:M1> * <var:s> { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> } { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> } <var:M3> := <var:M2> * <var:s> { <var:s> = <var:C> \land <var:M1> = <var:C> \land <var:M2> = <var:C> ^ <nat:2> \land <var:M3> = <var:C> ^ <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Definition <var:M4> : string := " <var:M4> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:s> = <var:C> }} <var:M1> := <var:s> ; <var:M2> := <var:M1> * <var:s> ; <var:M3> := <var:M2> * <var:s> ; <var:M4> := <var:M3> * <var:s> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:3> ; <var:M2> := <var:M2> * <nat:3> ; <var:M3> := <var:M3> * <nat:4> ; <var:M4> := <var:M4> * <nat:3> ; <var:u> := <var:M4> <var:u> := <var:u> + <var:M3> <var:u> := <var:u> + <var:M2> <var:u> := <var:u> + <var:M1> <var:u> := <var:u> + <var:M0> {{ <var:u> = <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:M1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:M1> = <var:C> /\ <var:M2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:M1> = <var:C> /\ <var:M2> = <var:C> ^ <nat:2> /\ <var:M3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:M1> = <var:C> /\ <var:M2> = <var:C> ^ <nat:2> /\ <var:M3> = <var:C> ^ <nat:3> /\ <var:M4> = <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:M1> = <var:C> /\ <var:M2> = <var:C> ^ <nat:2> /\ <var:M3> = <var:C> ^ <nat:3> /\ <var:M4> = <var:C> ^ <nat:4> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:M1> = <nat:3> * <var:C> /\ <var:M2> = <var:C> ^ <nat:2> /\ <var:M3> = <var:C> ^ <nat:3> /\ <var:M4> = <var:C> ^ <nat:4> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:M1> = <nat:3> * <var:C> /\ <var:M2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:M3> = <var:C> ^ <nat:3> /\ <var:M4> = <var:C> ^ <nat:4> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:M1> = <nat:3> * <var:C> /\ <var:M2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:M3> = <nat:4> * <var:C> ^ <nat:3> /\ <var:M4> = <var:C> ^ <nat:4> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:M1> = <nat:3> * <var:C> /\ <var:M2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:M3> = <nat:4> * <var:C> ^ <nat:3> /\ <var:M4> = <nat:3> * <var:C> ^ <nat:4> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:M1> = <nat:3> * <var:C> /\ <var:M2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:M3> = <nat:4> * <var:C> ^ <nat:3> /\ <var:M0> = <nat:2> /\ <var:u> = <nat:3> * <var:C> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:M1> = <nat:3> * <var:C> /\ <var:M2> = <nat:3> * <var:C> ^ <nat:2> /\ <var:M0> = <nat:2> /\ <var:u> = <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:M1> = <nat:3> * <var:C> /\ <var:M0> = <nat:2> /\ <var:u> = <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:M0> = <nat:2> /\ <var:u> = <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:u> = <nat:3> * <var:C> ^ <nat:4> + <nat:4> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 