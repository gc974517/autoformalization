\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:r1> := <var:N> ; <var:r2> := <var:r1> * <var:N> ; <var:r3> := <var:r2> * <var:N> ; <var:r0> := <nat:2> ; <var:r2> := <var:r2> * <nat:1> ; <var:r3> := <var:r3> * <nat:1> ; <var:V> := <var:r3> <var:V> := <var:V> + <var:r2> <var:V> := <var:V> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> . Assume that we have $ <var:N> = <var:R> $ --- for every $ <var:R> \in \mathbb{N} $ --- before interpreting our segment of code it must be that we have $ <var:V> = <nat:1> \times <var:R> ^ <nat:3> + <nat:1> \times <var:R> ^ <nat:2> + <nat:2> $ after list of commands exits . \end{theorem} \begin{proof} Notice the following decorated set of commands . \begin{eqnarray} \{ <var:N> = <var:R> \} \\ <var:r1> := <var:N> ; \\ \{ <var:N> = <var:R> \land <var:r1> = <var:R> \} \\ <var:r2> := <var:r1> * <var:N> ; \\ \{ <var:N> = <var:R> \land <var:r1> = <var:R> \land <var:r2> = <var:R> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:N> ; \\ \{ <var:N> = <var:R> \land <var:r1> = <var:R> \land <var:r2> = <var:R> ^ <nat:2> \land <var:r3> = <var:R> ^ <nat:3> \} \\ <var:r0> := <nat:2> ; \\ \{ <var:N> = <var:R> \land <var:r1> = <var:R> \land <var:r2> = <var:R> ^ <nat:2> \land <var:r3> = <var:R> ^ <nat:3> \land <var:r0> = <nat:2> \} \\ <var:r2> := <var:r2> * <nat:1> ; \\ \{ <var:N> = <var:R> \land <var:r1> = <var:R> \land <var:r2> = <nat:1> \cdot <var:R> ^ <nat:2> \land <var:r3> = <var:R> ^ <nat:3> \land <var:r0> = <nat:2> \} \\ <var:r3> := <var:r3> * <nat:1> ; \\ \{ <var:N> = <var:R> \land <var:r1> = <var:R> \land <var:r2> = <nat:1> \cdot <var:R> ^ <nat:2> \land <var:r3> = <nat:1> \cdot <var:R> ^ <nat:3> \land <var:r0> = <nat:2> \} \\ <var:V> := <var:r3> \\ \{ <var:N> = <var:R> \land <var:r1> = <var:R> \land <var:r2> = <nat:1> \cdot <var:R> ^ <nat:2> \land <var:r0> = <nat:2> \land <var:V> = <nat:1> \cdot <var:R> ^ <nat:3> \} \\ <var:V> := <var:V> + <var:r2> \\ \{ <var:N> = <var:R> \land <var:r1> = <var:R> \land <var:r0> = <nat:2> \land <var:V> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> ^ <nat:2> \} \\ <var:V> := <var:V> + <var:r0> \\ \{ <var:N> = <var:R> \land <var:V> = <nat:1> \cdot <var:R> ^ <nat:3> + <nat:1> \cdot <var:R> ^ <nat:2> + <nat:2> \} \end{eqnarray} Using standard Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <def:poly> := <var:r1> := <var:N> ; <var:r2> := <var:r1> * <var:N> ; <var:r3> := <var:r2> * <var:N> ; <var:r0> := <nat:2> ; <var:r2> := <var:r2> * <nat:1> ; <var:r3> := <var:r3> * <nat:1> ; <var:V> := <var:r3> <var:V> := <var:V> + <var:r2> <var:V> := <var:V> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:N> = <var:R> }} <def:poly> {{ <var:V> = <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:r1> = <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:r1> = <var:R> /\ <var:r2> = <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:r1> = <var:R> /\ <var:r2> = <var:R> ^ <nat:2> /\ <var:r3> = <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:r1> = <var:R> /\ <var:r2> = <var:R> ^ <nat:2> /\ <var:r3> = <var:R> ^ <nat:3> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:r1> = <var:R> /\ <var:r2> = <nat:1> * <var:R> ^ <nat:2> /\ <var:r3> = <var:R> ^ <nat:3> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:r1> = <var:R> /\ <var:r2> = <nat:1> * <var:R> ^ <nat:2> /\ <var:r3> = <nat:1> * <var:R> ^ <nat:3> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:r1> = <var:R> /\ <var:r2> = <nat:1> * <var:R> ^ <nat:2> /\ <var:r0> = <nat:2> /\ <var:V> = <nat:1> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:r1> = <var:R> /\ <var:r0> = <nat:2> /\ <var:V> = <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:R> /\ <var:V> = <nat:1> * <var:R> ^ <nat:3> + <nat:1> * <var:R> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 