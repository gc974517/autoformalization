\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:k0> := <nat:6> ; <var:K> := <var:k0> \end{verbatim} \end{definition} \begin{theorem} Define the following set of instructions <def:poly> in \emph{Imp} . Allow that $ <var:z> = <var:O> $ ahead of running the code it follows that $ <var:K> = <nat:6> $ when list of commands has executed . \end{theorem} \begin{proof} Demonstrating correctness of this set of commands is clear using Hoare reasoning . Paying attention to the upcoming bit of code in the program , we have \begin{verbatim} { <var:z> = <var:O> } <var:k0> := <nat:6> { <var:z> = <var:O> \land <var:k0> = <nat:6> } \end{verbatim} This is guaranteed using the variable binding inference rule obtained from usual Hoare reasoning . Jumping to the proceeding statement found in the list of instructions , we have \begin{verbatim} { <var:z> = <var:O> } <var:k0> := <nat:6> { <var:z> = <var:O> \land <var:k0> = <nat:6> } \end{verbatim} This is rigorously given through the inference rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <def:poly> := <var:k0> := <nat:6> ; <var:K> := <var:k0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:z> = <var:O> }} <def:poly> {{ <var:K> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:O> /\ <var:k0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:O> /\ <var:K> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 