\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} : \begin{verbatim} <var:n1> := <var:i> ; <var:n0> := <nat:1> ; <var:n1> := <var:n1> * <nat:6> ; <var:l> := <var:n1> <var:l> := <var:l> + <var:n0> \end{verbatim} Assume that we have $ <var:i> = <var:A> $ before interpreting the list of instructions it follows that we see $ <var:l> = <nat:6> \times <var:A> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for this program is clear through usual Hoare reasoning . Taking another step toward the next bits of codecontained in the series of instructions , \begin{eqnarray} \{ <var:i> = <var:A> \} \, <var:n1> := <var:i> \, \{ <var:i> = <var:A> \land <var:n1> = <var:A> \} \\ \{ <var:i> = <var:A> \land <var:n1> = <var:A> \} \, <var:n0> := <nat:1> \, \{ <var:i> = <var:A> \land <var:n1> = <var:A> \land <var:n0> = <nat:1> \} \\ \{ <var:i> = <var:A> \land <var:n1> = <var:A> \land <var:n0> = <nat:1> \} \, <var:n1> := <var:n1> * <nat:6> \, \{ <var:i> = <var:A> \land <var:n1> = <nat:6> \times <var:A> \land <var:n0> = <nat:1> \} \\ \{ <var:i> = <var:A> \land <var:n1> = <nat:6> \times <var:A> \land <var:n0> = <nat:1> \} \, <var:l> := <var:n1\, \{ <var:i> = <var:A> \land <var:n0> = <nat:1> \land <var:l> = <nat:6> \times <var:A> \} \\ \{ <var:i> = <var:A> \land <var:n0> = <nat:1> \land <var:l> = <nat:6> \times <var:A> \} \, <var:l> := <var:l> + <var:n0\, \{ <var:i> = <var:A> \land <var:l> = <nat:6> \times <var:A> + <nat:1> \} \end{eqnarray} This is shown to be logically sound by the assignment rule given by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:i> = <var:A> }} <var:n1> := <var:i> ; <var:n0> := <nat:1> ; <var:n1> := <var:n1> * <nat:6> ; <var:l> := <var:n1> <var:l> := <var:l> + <var:n0> {{ <var:l> = <nat:6> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:n1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:n1> = <var:A> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:n1> = <nat:6> * <var:A> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:n0> = <nat:1> /\ <var:l> = <nat:6> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:A> /\ <var:l> = <nat:6> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 