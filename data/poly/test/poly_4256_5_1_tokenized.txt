\begin{document} \begin{theorem} We define a code segment in \emph{Imp} as \begin{verbatim} <var:A1> := <var:q> ; <var:A0> := <nat:1> ; <var:A1> := <var:A1> * <nat:8> ; <var:h> := <var:A1> <var:h> := <var:h> + <var:A0> \end{verbatim} Given that $ <var:q> = <var:t> $ ahead of running this program , it follows that we have $ <var:h> = <nat:8> * <var:t> + <nat:1> $ when series of commands executes . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:q> = <var:t> \} \\ <var:A1> := <var:q> ; \\ \{ <var:q> = <var:t> \land <var:A1> = <var:t> \} \\ <var:A0> := <nat:1> ; \\ \{ <var:q> = <var:t> \land <var:A1> = <var:t> \land <var:A0> = <nat:1> \} \\ <var:A1> := <var:A1> * <nat:8> ; \\ \{ <var:q> = <var:t> \land <var:A1> = <nat:8> * <var:t> \land <var:A0> = <nat:1> \} \\ <var:h> := <var:A1> \\ \{ <var:q> = <var:t> \land <var:A0> = <nat:1> \land <var:h> = <nat:8> * <var:t> \} \\ <var:h> := <var:h> + <var:A0> \\ \{ <var:q> = <var:t> \land <var:h> = <nat:8> * <var:t> + <nat:1> \} \end{eqnarray} Hence , the set of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:q> = <var:t> }} <var:A1> := <var:q> ; <var:A0> := <nat:1> ; <var:A1> := <var:A1> * <nat:8> ; <var:h> := <var:A1> <var:h> := <var:h> + <var:A0> {{ <var:h> = <nat:8> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:t> /\ <var:A1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:t> /\ <var:A1> = <var:t> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:t> /\ <var:A1> = <nat:8> * <var:t> /\ <var:A0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:t> /\ <var:A0> = <nat:1> /\ <var:h> = <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:t> /\ <var:h> = <nat:8> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 