\begin{document} \begin{theorem} Consider a set of commands in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:3> ; <var:M1> := <nat:7> ; <var:M1> := <var:M1> * <var:l> ; <var:M2> := <nat:9> ; <var:M2> := <var:M2> * <var:l> ; <var:M2> := <var:M2> * <var:l> ; <var:M3> := <nat:4> ; <var:M3> := <var:M3> * <var:l> ; <var:M3> := <var:M3> * <var:l> ; <var:M3> := <var:M3> * <var:l> ; <var:u> := <var:M3> ; <var:u> := <var:u> + <var:M2> ; <var:u> := <var:u> + <var:M1> ; <var:u> := <var:u> + <var:M0> \end{verbatim} Allow $ <var:l> = <var:d> $ for integers $ <var:d> $ ahead of interpreting this list of instructions it follows that we have $ <var:u> = <nat:4> \cdot <var:d> ^ <nat:3> + <nat:9> \cdot <var:d> ^ <nat:2> + <nat:7> \cdot <var:d> + <nat:3> $ when list of instructions terminates . \end{theorem} \begin{proof} Applying usual Hoare techniques returns : \begin{eqnarray} \{ <var:l> = <var:d> \} \\ <var:M0> := <nat:3> ; \\ \{ <var:l> = <var:d> \land <var:M0> = <nat:3> \} \\ <var:M1> := <nat:7> ; \\ \{ <var:l> = <var:d> \land <var:M0> = <nat:3> \land <var:M1> = <nat:7> \} \\ <var:M1> := <var:M1> * <var:l> ; \\ \{ <var:l> = <var:d> \land <var:M0> = <nat:3> \land <var:M1> = <nat:7> \times <var:d> \} \\ <var:M2> := <nat:9> ; \\ \{ <var:l> = <var:d> \land <var:M0> = <nat:3> \land <var:M1> = <nat:7> \times <var:d> \land <var:M2> = <nat:9> \} \\ <var:M2> := <var:M2> * <var:l> ; \\ \{ <var:l> = <var:d> \land <var:M0> = <nat:3> \land <var:M1> = <nat:7> \times <var:d> \land <var:M2> = <nat:9> \times <var:d> \} \\ <var:M2> := <var:M2> * <var:l> ; \\ \{ <var:l> = <var:d> \land <var:M0> = <nat:3> \land <var:M1> = <nat:7> \times <var:d> \land <var:M2> = <nat:9> \times <var:d> ^ <nat:2> \} \\ <var:M3> := <nat:4> ; \\ \{ <var:l> = <var:d> \land <var:M0> = <nat:3> \land <var:M1> = <nat:7> \times <var:d> \land <var:M2> = <nat:9> \times <var:d> ^ <nat:2> \land <var:M3> = <nat:4> \} \\ <var:M3> := <var:M3> * <var:l> ; \\ \{ <var:l> = <var:d> \land <var:M0> = <nat:3> \land <var:M1> = <nat:7> \times <var:d> \land <var:M2> = <nat:9> \times <var:d> ^ <nat:2> \land <var:M3> = <nat:4> \times <var:d> \} \\ <var:M3> := <var:M3> * <var:l> ; \\ \{ <var:l> = <var:d> \land <var:M0> = <nat:3> \land <var:M1> = <nat:7> \times <var:d> \land <var:M2> = <nat:9> \times <var:d> ^ <nat:2> \land <var:M3> = <nat:4> \times <var:d> ^ <nat:2> \} \\ <var:M3> := <var:M3> * <var:l> ; \\ \{ <var:l> = <var:d> \land <var:M0> = <nat:3> \land <var:M1> = <nat:7> \times <var:d> \land <var:M2> = <nat:9> \times <var:d> ^ <nat:2> \land <var:M3> = <nat:4> \times <var:d> ^ <nat:3> \} \\ <var:u> := <var:M3> ; \\ \{ <var:l> = <var:d> \land <var:M0> = <nat:3> \land <var:M1> = <nat:7> \times <var:d> \land <var:M2> = <nat:9> \times <var:d> ^ <nat:2> \land <var:u> = <nat:4> \times <var:d> ^ <nat:3> \} \\ <var:u> := <var:u> + <var:M2> ; \\ \{ <var:l> = <var:d> \land <var:M0> = <nat:3> \land <var:M1> = <nat:7> \times <var:d> \land <var:u> = <nat:4> \times <var:d> ^ <nat:3> + <nat:9> \times <var:d> ^ <nat:2> \} \\ <var:u> := <var:u> + <var:M1> ; \\ \{ <var:l> = <var:d> \land <var:M0> = <nat:3> \land <var:u> = <nat:4> \times <var:d> ^ <nat:3> + <nat:9> \times <var:d> ^ <nat:2> + <nat:7> \times <var:d> \} \\ <var:u> := <var:u> + <var:M0> \\ \{ <var:l> = <var:d> \land <var:u> = <nat:4> \times <var:d> ^ <nat:3> + <nat:9> \times <var:d> ^ <nat:2> + <nat:7> \times <var:d> + <nat:3> \} \end{eqnarray} Thus , our list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <var:M3> : string := " <var:M3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:l> = <var:d> }} <var:M0> := <nat:3> ; <var:M1> := <nat:7> ; <var:M1> := <var:M1> * <var:l> ; <var:M2> := <nat:9> ; <var:M2> := <var:M2> * <var:l> ; <var:M2> := <var:M2> * <var:l> ; <var:M3> := <nat:4> ; <var:M3> := <var:M3> * <var:l> ; <var:M3> := <var:M3> * <var:l> ; <var:M3> := <var:M3> * <var:l> ; <var:u> := <var:M3> ; <var:u> := <var:u> + <var:M2> ; <var:u> := <var:u> + <var:M1> ; <var:u> := <var:u> + <var:M0> {{ <var:u> = <nat:4> * <var:d> ^ <nat:3> + <nat:9> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:7> * <var:d> /\ <var:M2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:7> * <var:d> /\ <var:M2> = <nat:9> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:7> * <var:d> /\ <var:M2> = <nat:9> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:7> * <var:d> /\ <var:M2> = <nat:9> * <var:d> ^ <nat:2> /\ <var:M3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:7> * <var:d> /\ <var:M2> = <nat:9> * <var:d> ^ <nat:2> /\ <var:M3> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:7> * <var:d> /\ <var:M2> = <nat:9> * <var:d> ^ <nat:2> /\ <var:M3> = <nat:4> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:7> * <var:d> /\ <var:M2> = <nat:9> * <var:d> ^ <nat:2> /\ <var:M3> = <nat:4> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:7> * <var:d> /\ <var:M2> = <nat:9> * <var:d> ^ <nat:2> /\ <var:u> = <nat:4> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M0> = <nat:3> /\ <var:M1> = <nat:7> * <var:d> /\ <var:u> = <nat:4> * <var:d> ^ <nat:3> + <nat:9> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:M0> = <nat:3> /\ <var:u> = <nat:4> * <var:d> ^ <nat:3> + <nat:9> * <var:d> ^ <nat:2> + <nat:7> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:d> /\ <var:u> = <nat:4> * <var:d> ^ <nat:3> + <nat:9> * <var:d> ^ <nat:2> + <nat:7> * <var:d> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 