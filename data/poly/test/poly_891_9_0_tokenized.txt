\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} : \begin{verbatim} <var:N0> := <nat:9> ; <var:N1> := <nat:7> ; <var:N1> := <var:N1> * <var:O> ; <var:N2> := <nat:6> ; <var:N2> := <var:N2> * <var:O> ; <var:N2> := <var:N2> * <var:O> ; <var:W> := <var:N2> ; <var:W> := <var:W> + <var:N1> ; <var:W> := <var:W> + <var:N0> \end{verbatim} Allowing that $ <var:O> = <var:E> $ --- assuming some positive coefficients $ <var:E> $ --- prior to interpreting the set of instructions then we see $ <var:W> = <nat:6> * <var:E> ^ <nat:2> + <nat:7> * <var:E> + <nat:9> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code segment can be demonstrated by Hoare reasoning . Considering the following pieces of code in our series of instructions , we have \begin{eqnarray} \{ <var:O> = <var:E> \} \, <var:N0> := <nat:9> \, \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \} \\ \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \} \, <var:N1> := <nat:7> \, \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \} \\ \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \} \, <var:N1> := <var:N1> * <var:O> \, \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \cdot <var:E> \} \\ \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \cdot <var:E> \} \, <var:N2> := <nat:6> \, \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \cdot <var:E> \land <var:N2> = <nat:6> \} \\ \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \cdot <var:E> \land <var:N2> = <nat:6> \} \, <var:N2> := <var:N2> * <var:O> \, \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \cdot <var:E> \land <var:N2> = <nat:6> \cdot <var:E> \} \\ \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \cdot <var:E> \land <var:N2> = <nat:6> \cdot <var:E> \} \, <var:N2> := <var:N2> * <var:O> \, \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \cdot <var:E> \land <var:N2> = <nat:6> \cdot <var:E> ^ <nat:2> \} \\ \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \cdot <var:E> \land <var:N2> = <nat:6> \cdot <var:E> ^ <nat:2> \} \, <var:W> := <var:N2> \, \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \cdot <var:E> \land <var:W> = <nat:6> \cdot <var:E> ^ <nat:2> \} \end{eqnarray} Taking another step toward the upcoming statements found in the series of commands , we see \begin{eqnarray} \{ <var:O> = <var:E> \} \, <var:N0> := <nat:9> \, \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \} \\ \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \} \, <var:N1> := <nat:7> \, \{ <var:O> = <var:E> \land <var:N0> = <nat:9> \land <var:N1> = <nat:7> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:O> = <var:E> }} <var:N0> := <nat:9> ; <var:N1> := <nat:7> ; <var:N1> := <var:N1> * <var:O> ; <var:N2> := <nat:6> ; <var:N2> := <var:N2> * <var:O> ; <var:N2> := <var:N2> * <var:O> ; <var:W> := <var:N2> ; <var:W> := <var:W> + <var:N1> ; <var:W> := <var:W> + <var:N0> {{ <var:W> = <nat:6> * <var:E> ^ <nat:2> + <nat:7> * <var:E> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:E> /\ <var:N2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:E> /\ <var:N2> = <nat:6> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:E> /\ <var:N2> = <nat:6> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:N0> = <nat:9> /\ <var:N1> = <nat:7> * <var:E> /\ <var:W> = <nat:6> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:N0> = <nat:9> /\ <var:W> = <nat:6> * <var:E> ^ <nat:2> + <nat:7> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:E> /\ <var:W> = <nat:6> * <var:E> ^ <nat:2> + <nat:7> * <var:E> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 