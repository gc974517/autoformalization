\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Y1> := <var:y> ; <var:Y2> := <var:Y1> * <var:y> ; <var:Y3> := <var:Y2> * <var:y> ; <var:Y4> := <var:Y3> * <var:y> ; <var:Y0> := <nat:8> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:Y2> := <var:Y2> * <nat:3> ; <var:Y3> := <var:Y3> * <nat:1> ; <var:Y4> := <var:Y4> * <nat:5> ; <var:E> := <var:Y4> <var:E> := <var:E> + <var:Y3> <var:E> := <var:E> + <var:Y2> <var:E> := <var:E> + <var:Y1> <var:E> := <var:E> + <var:Y0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> in \emph{Imp} . Assuming it to be that $ <var:y> = <var:o> $ ( for some whole numbers $ <var:o> $ ) ahead of the evaluation of this set of instructions , then we have $ <var:E> = <nat:5> \cdot <var:o> ^ <nat:4> + <nat:1> \cdot <var:o> ^ <nat:3> + <nat:3> \cdot <var:o> ^ <nat:2> + <nat:2> \cdot <var:o> + <nat:8> $ once code finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:o> \} \\ <var:Y1> := <var:y> ; \\ \{ <var:y> = <var:o> \land <var:Y1> = <var:o> \} \\ <var:Y2> := <var:Y1> * <var:y> ; \\ \{ <var:y> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \} \\ <var:Y3> := <var:Y2> * <var:y> ; \\ \{ <var:y> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \land <var:Y3> = <var:o> ^ <nat:3> \} \\ <var:Y4> := <var:Y3> * <var:y> ; \\ \{ <var:y> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \land <var:Y3> = <var:o> ^ <nat:3> \land <var:Y4> = <var:o> ^ <nat:4> \} \\ <var:Y0> := <nat:8> ; \\ \{ <var:y> = <var:o> \land <var:Y1> = <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \land <var:Y3> = <var:o> ^ <nat:3> \land <var:Y4> = <var:o> ^ <nat:4> \land <var:Y0> = <nat:8> \} \\ <var:Y1> := <var:Y1> * <nat:2> ; \\ \{ <var:y> = <var:o> \land <var:Y1> = <nat:2> \times <var:o> \land <var:Y2> = <var:o> ^ <nat:2> \land <var:Y3> = <var:o> ^ <nat:3> \land <var:Y4> = <var:o> ^ <nat:4> \land <var:Y0> = <nat:8> \} \\ <var:Y2> := <var:Y2> * <nat:3> ; \\ \{ <var:y> = <var:o> \land <var:Y1> = <nat:2> \times <var:o> \land <var:Y2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:Y3> = <var:o> ^ <nat:3> \land <var:Y4> = <var:o> ^ <nat:4> \land <var:Y0> = <nat:8> \} \\ <var:Y3> := <var:Y3> * <nat:1> ; \\ \{ <var:y> = <var:o> \land <var:Y1> = <nat:2> \times <var:o> \land <var:Y2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:Y3> = <nat:1> \times <var:o> ^ <nat:3> \land <var:Y4> = <var:o> ^ <nat:4> \land <var:Y0> = <nat:8> \} \\ <var:Y4> := <var:Y4> * <nat:5> ; \\ \{ <var:y> = <var:o> \land <var:Y1> = <nat:2> \times <var:o> \land <var:Y2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:Y3> = <nat:1> \times <var:o> ^ <nat:3> \land <var:Y4> = <nat:5> \times <var:o> ^ <nat:4> \land <var:Y0> = <nat:8> \} \\ <var:E> := <var:Y4> \\ \{ <var:y> = <var:o> \land <var:Y1> = <nat:2> \times <var:o> \land <var:Y2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:Y3> = <nat:1> \times <var:o> ^ <nat:3> \land <var:Y0> = <nat:8> \land <var:E> = <nat:5> \times <var:o> ^ <nat:4> \} \\ <var:E> := <var:E> + <var:Y3> \\ \{ <var:y> = <var:o> \land <var:Y1> = <nat:2> \times <var:o> \land <var:Y2> = <nat:3> \times <var:o> ^ <nat:2> \land <var:Y0> = <nat:8> \land <var:E> = <nat:5> \times <var:o> ^ <nat:4> + <nat:1> \times <var:o> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:Y2> \\ \{ <var:y> = <var:o> \land <var:Y1> = <nat:2> \times <var:o> \land <var:Y0> = <nat:8> \land <var:E> = <nat:5> \times <var:o> ^ <nat:4> + <nat:1> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:Y1> \\ \{ <var:y> = <var:o> \land <var:Y0> = <nat:8> \land <var:E> = <nat:5> \times <var:o> ^ <nat:4> + <nat:1> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> \} \\ <var:E> := <var:E> + <var:Y0> \\ \{ <var:y> = <var:o> \land <var:E> = <nat:5> \times <var:o> ^ <nat:4> + <nat:1> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + <nat:8> \} \end{eqnarray} Using typical Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Definition <var:Y4> : string := " <var:Y4> " . Definition <def:poly> := <var:Y1> := <var:y> ; <var:Y2> := <var:Y1> * <var:y> ; <var:Y3> := <var:Y2> * <var:y> ; <var:Y4> := <var:Y3> * <var:y> ; <var:Y0> := <nat:8> ; <var:Y1> := <var:Y1> * <nat:2> ; <var:Y2> := <var:Y2> * <nat:3> ; <var:Y3> := <var:Y3> * <nat:1> ; <var:Y4> := <var:Y4> * <nat:5> ; <var:E> := <var:Y4> <var:E> := <var:E> + <var:Y3> <var:E> := <var:E> + <var:Y2> <var:E> := <var:E> + <var:Y1> <var:E> := <var:E> + <var:Y0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:y> = <var:o> }} <def:poly> {{ <var:E> = <nat:5> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:Y1> = <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:Y1> = <var:o> /\ <var:Y2> = <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:Y1> = <var:o> /\ <var:Y2> = <var:o> ^ <nat:2> /\ <var:Y3> = <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:Y1> = <var:o> /\ <var:Y2> = <var:o> ^ <nat:2> /\ <var:Y3> = <var:o> ^ <nat:3> /\ <var:Y4> = <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:Y1> = <var:o> /\ <var:Y2> = <var:o> ^ <nat:2> /\ <var:Y3> = <var:o> ^ <nat:3> /\ <var:Y4> = <var:o> ^ <nat:4> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:Y1> = <nat:2> * <var:o> /\ <var:Y2> = <var:o> ^ <nat:2> /\ <var:Y3> = <var:o> ^ <nat:3> /\ <var:Y4> = <var:o> ^ <nat:4> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:Y1> = <nat:2> * <var:o> /\ <var:Y2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:Y3> = <var:o> ^ <nat:3> /\ <var:Y4> = <var:o> ^ <nat:4> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:Y1> = <nat:2> * <var:o> /\ <var:Y2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:Y3> = <nat:1> * <var:o> ^ <nat:3> /\ <var:Y4> = <var:o> ^ <nat:4> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:Y1> = <nat:2> * <var:o> /\ <var:Y2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:Y3> = <nat:1> * <var:o> ^ <nat:3> /\ <var:Y4> = <nat:5> * <var:o> ^ <nat:4> /\ <var:Y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:Y1> = <nat:2> * <var:o> /\ <var:Y2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:Y3> = <nat:1> * <var:o> ^ <nat:3> /\ <var:Y0> = <nat:8> /\ <var:E> = <nat:5> * <var:o> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:Y1> = <nat:2> * <var:o> /\ <var:Y2> = <nat:3> * <var:o> ^ <nat:2> /\ <var:Y0> = <nat:8> /\ <var:E> = <nat:5> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:Y1> = <nat:2> * <var:o> /\ <var:Y0> = <nat:8> /\ <var:E> = <nat:5> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:Y0> = <nat:8> /\ <var:E> = <nat:5> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:E> = <nat:5> * <var:o> ^ <nat:4> + <nat:1> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 