\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:2> ; <var:e> := <var:A0> \end{verbatim} Assuming that we have $ <var:X> = <var:R> $ before running the set of commands , it must be that we have $ <var:e> = <nat:2> $ . \end{theorem} \begin{proof} The proof of our program is demonstrated with Hoare techniques . Now , we have \begin{verbatim} { <var:X> = <var:R> } <var:A0> := <nat:2> { <var:X> = <var:R> \land <var:A0> = <nat:2> } \end{verbatim} Taking another step toward the following step contained in our program , we have \begin{verbatim} { <var:X> = <var:R> } <var:A0> := <nat:2> { <var:X> = <var:R> \land <var:A0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:X> = <var:R> }} <var:A0> := <nat:2> ; <var:e> := <var:A0> {{ <var:e> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:A0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:R> /\ <var:e> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 