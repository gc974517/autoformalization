\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:V1> := <var:u> ; <var:V2> := <var:V1> * <var:u> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:1> ; <var:V2> := <var:V2> * <nat:4> ; <var:B> := <var:V2> <var:B> := <var:B> + <var:V1> <var:B> := <var:B> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} We define a set of instructions <def:poly> . Allow it to hold that $ <var:u> = <var:G> $ ahead of interpreting this list of commands it must be that we have $ <var:B> = <nat:4> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:2> $ after program has exited . \end{theorem} \begin{proof} The method of proof for this set of commands is demonstrated through usual Hoare techniques . Immediately after , the environment update line binding $ <var:u> $ as $ <var:V1>$ . This statement takes the condition $ \{ <var:u> = <var:G> \} $ toward $ \{ <var:u> = <var:G> \land <var:V1> = <var:G> \} $ . This is rigorously given with the assignment rule found in usual Hoare logic . Paying attention to the upcoming statement seen in the list of commands , the environment update statement letting $ <var:V1> * <var:u> $ toward $ <var:V2>$ . This code advances the precondition $ \{ <var:u> = <var:G> \land <var:V1> = <var:G> \} $ as the condition $ \{ <var:u> = <var:G> \land <var:V1> = <var:G> \land <var:V2> = <var:G> ^ <nat:2> \} $ . This is given by the assignment scheme of standard Hoare logic . Considering the proceeding step contained in our segment of code , we have the assignment line \verb | <var:V0> := <nat:2> ; | . This code redefines the precondition $ \{ <var:u> = <var:G> \land <var:V1> = <var:G> \land <var:V2> = <var:G> ^ <nat:2> \} $ into the postcondition $ \{ <var:u> = <var:G> \land <var:V1> = <var:G> \land <var:V2> = <var:G> ^ <nat:2> \land <var:V0> = <nat:2> \} $ . This is sound with the assignment law defined by Hoare reasoning . Taking another step toward the upcoming step contained in our program , the binding line giving $ <var:V1> * <nat:1> $ into $ <var:V1>$ . This moves the precondition $ \{ <var:u> = <var:G> \land <var:V1> = <var:G> \land <var:V2> = <var:G> ^ <nat:2> \land <var:V0> = <nat:2> \} $ to the postcondition $ \{ <var:u> = <var:G> \land <var:V1> = <nat:1> \cdot <var:G> \land <var:V2> = <var:G> ^ <nat:2> \land <var:V0> = <nat:2> \} $ . Further , we have the environment update line \verb | <var:V2> := <var:V2> * <nat:4> ; | . This code takes $ \{ <var:u> = <var:G> \land <var:V1> = <nat:1> \cdot <var:G> \land <var:V2> = <var:G> ^ <nat:2> \land <var:V0> = <nat:2> \} $ toward $ \{ <var:u> = <var:G> \land <var:V1> = <nat:1> \cdot <var:G> \land <var:V2> = <nat:4> \cdot <var:G> ^ <nat:2> \land <var:V0> = <nat:2> \} $ . This is shown to be logically sound through the assignment scheme given by standard Hoare reasoning . Moving forward , we see the binding line letting $ <var:V2$ as $ <var:B>$ . This advances $ \{ <var:u> = <var:G> \land <var:V1> = <nat:1> \cdot <var:G> \land <var:V2> = <nat:4> \cdot <var:G> ^ <nat:2> \land <var:V0> = <nat:2> \} $ toward the postcondition $ \{ <var:u> = <var:G> \land <var:V1> = <nat:1> \cdot <var:G> \land <var:V0> = <nat:2> \land <var:B> = <nat:4> \cdot <var:G> ^ <nat:2> \} $ . This is given through the assignment law given in Hoare logic . Advancing , we have the variable update code \verb | <var:B> := <var:B> + <var:V1> | . This forwards the condition $ \{ <var:u> = <var:G> \land <var:V1> = <nat:1> \cdot <var:G> \land <var:V0> = <nat:2> \land <var:B> = <nat:4> \cdot <var:G> ^ <nat:2> \} $ as $ \{ <var:u> = <var:G> \land <var:V0> = <nat:2> \land <var:B> = <nat:4> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> \} $ . Moving forward , we see the variable assignmet statement binding $ <var:B> + <var:V0$ as $ <var:B>$ . This forwards the precondition $ \{ <var:u> = <var:G> \land <var:V0> = <nat:2> \land <var:B> = <nat:4> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> \} $ into $ \{ <var:u> = <var:G> \land <var:B> = <nat:4> \cdot <var:G> ^ <nat:2> + <nat:1> \cdot <var:G> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V1> := <var:u> ; <var:V2> := <var:V1> * <var:u> ; <var:V0> := <nat:2> ; <var:V1> := <var:V1> * <nat:1> ; <var:V2> := <var:V2> * <nat:4> ; <var:B> := <var:V2> <var:B> := <var:B> + <var:V1> <var:B> := <var:B> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:u> = <var:G> }} <def:poly> {{ <var:B> = <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:V1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:V1> = <var:G> /\ <var:V2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:V1> = <var:G> /\ <var:V2> = <var:G> ^ <nat:2> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:V1> = <nat:1> * <var:G> /\ <var:V2> = <var:G> ^ <nat:2> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:V1> = <nat:1> * <var:G> /\ <var:V2> = <nat:4> * <var:G> ^ <nat:2> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:V1> = <nat:1> * <var:G> /\ <var:V0> = <nat:2> /\ <var:B> = <nat:4> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:V0> = <nat:2> /\ <var:B> = <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:G> /\ <var:B> = <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 