\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:M> := <nat:1> ; <var:M> := <nat:3> + <var:M> * <var:m> ; <var:M> := <nat:1> + <var:M> * <var:m> ; <var:M> := <nat:3> + <var:M> * <var:m> ; <var:M> := <nat:4> + <var:M> * <var:m> ; <var:M> := <nat:1> + <var:M> * <var:m> ; <var:M> := <nat:2> + <var:M> * <var:m> ; <var:M> := <nat:2> + <var:M> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> . Assume it to be that $ <var:m> = <var:Z> $ ( given any integers $ <var:Z> $ ) ahead of executing this set of commands , then we see $ <var:M> = <nat:1> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:2> $ once set of instructions is done executing . \end{theorem} \begin{proof} Showing our claim about correctness for our list of commands is clear by usual Hoare logic . Moving on to the upcoming piece of code seen in our set of instructions , we see the environment update command \verb | <var:M> := <nat:1> ; | . This forwards the precondition $ \{ <var:m> = <var:Z> \} $ as the condition $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \} $ . This is shown with the assignment scheme given by Hoare reasoning . Paying attention to the proceeding command seen in our code segment , the statement \verb | <var:M> := <nat:3> + <var:M> * <var:m> ; | . This statement redefines the precondition $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \} $ as the condition $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \times <var:Z> + <nat:3> \} $ . Moving forward to the next step , the binding statement giving $ <nat:1> + <var:M> * <var:m> $ as $ <var:M>$ . This code forwards $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \times <var:Z> + <nat:3> \} $ into $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:1> \} $ . Moving on to the next step contained in our set of instructions , the variable assignmet command \verb | <var:M> := <nat:3> + <var:M> * <var:m> ; | . This code redefines the condition $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:1> \} $ as $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:3> \} $ . This is sound through the assignment inference rule of standard Hoare logic . Taking another step toward the subsequent line of code contained in our series of instructions , the binding command \verb | <var:M> := <nat:4> + <var:M> * <var:m> ; | . This statement advances the precondition $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:3> \} $ toward the postcondition $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \times <var:Z> ^ <nat:4> + <nat:3> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:4> \} $ . This is given with the assignment law defined in typical Hoare logic . Going to the next step , the environment update statement defining $ <nat:1> + <var:M> * <var:m> $ toward $ <var:M>$ . This moves the condition $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \times <var:Z> ^ <nat:4> + <nat:3> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:3> \times <var:Z> + <nat:4> \} $ into $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \times <var:Z> ^ <nat:5> + <nat:3> \times <var:Z> ^ <nat:4> + <nat:1> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:1> \} $ . Advancing to the following piece of code seen in the set of commands , the command binding $ <nat:2> + <var:M> * <var:m> $ into $ <var:M>$ . This statement advances $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \times <var:Z> ^ <nat:5> + <nat:3> \times <var:Z> ^ <nat:4> + <nat:1> \times <var:Z> ^ <nat:3> + <nat:3> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:1> \} $ toward the postcondition $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \times <var:Z> ^ <nat:6> + <nat:3> \times <var:Z> ^ <nat:5> + <nat:1> \times <var:Z> ^ <nat:4> + <nat:3> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:2> \} $ . Moving forward to the upcoming piece of code seen in our code , we have the assignment line yielding $ <nat:2> + <var:M> * <var:m$ to $ <var:M>$ . This line moves $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \times <var:Z> ^ <nat:6> + <nat:3> \times <var:Z> ^ <nat:5> + <nat:1> \times <var:Z> ^ <nat:4> + <nat:3> \times <var:Z> ^ <nat:3> + <nat:4> \times <var:Z> ^ <nat:2> + <nat:1> \times <var:Z> + <nat:2> \} $ as the condition $ \{ <var:m> = <var:Z> \land <var:M> = <nat:1> \times <var:Z> ^ <nat:7> + <nat:3> \times <var:Z> ^ <nat:6> + <nat:1> \times <var:Z> ^ <nat:5> + <nat:3> \times <var:Z> ^ <nat:4> + <nat:4> \times <var:Z> ^ <nat:3> + <nat:1> \times <var:Z> ^ <nat:2> + <nat:2> \times <var:Z> + <nat:2> \} $ . This is shown to be logically sound through the assignment inference rule given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:M> := <nat:1> ; <var:M> := <nat:3> + <var:M> * <var:m> ; <var:M> := <nat:1> + <var:M> * <var:m> ; <var:M> := <nat:3> + <var:M> * <var:m> ; <var:M> := <nat:4> + <var:M> * <var:m> ; <var:M> := <nat:1> + <var:M> * <var:m> ; <var:M> := <nat:2> + <var:M> * <var:m> ; <var:M> := <nat:2> + <var:M> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:m> = <var:Z> }} <def:poly> {{ <var:M> = <nat:1> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:M> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:M> = <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:M> = <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:M> = <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:M> = <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:3> * <var:Z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:M> = <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:1> * <var:Z> ^ <nat:3> + <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:M> = <nat:1> * <var:Z> ^ <nat:6> + <nat:3> * <var:Z> ^ <nat:5> + <nat:1> * <var:Z> ^ <nat:4> + <nat:3> * <var:Z> ^ <nat:3> + <nat:4> * <var:Z> ^ <nat:2> + <nat:1> * <var:Z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:Z> /\ <var:M> = <nat:1> * <var:Z> ^ <nat:7> + <nat:3> * <var:Z> ^ <nat:6> + <nat:1> * <var:Z> ^ <nat:5> + <nat:3> * <var:Z> ^ <nat:4> + <nat:4> * <var:Z> ^ <nat:3> + <nat:1> * <var:Z> ^ <nat:2> + <nat:2> * <var:Z> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 