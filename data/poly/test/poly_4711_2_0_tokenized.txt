\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:9> ; <var:o> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:I> = <var:n> $ prior to interpreting the code segment , then we have $ <var:o> = <nat:9> $ once code is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:n> \} \\ <var:Q0> := <nat:9> ; \\ \{ <var:I> = <var:n> \land <var:Q0> = <nat:9> \} \\ <var:o> := <var:Q0> \\ \{ <var:I> = <var:n> \land <var:o> = <nat:9> \} \end{eqnarray} Applying Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:9> ; <var:o> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:I> = <var:n> }} <def:poly> {{ <var:o> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:Q0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:n> /\ <var:o> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 