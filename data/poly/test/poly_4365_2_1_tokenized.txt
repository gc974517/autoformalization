\begin{document} \begin{theorem} We define a code segment as follows \begin{verbatim} <var:G0> := <nat:3> ; <var:E> := <var:G0> \end{verbatim} Allowing it to hold that $ <var:A> = <var:v> $ for all positive integers $ <var:v> $ ahead of executing this series of instructions it must be that we see $ <var:E> = <nat:3> $ once series of commands is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:A> = <var:v> \} \\ <var:G0> := <nat:3> ; \\ \{ <var:A> = <var:v> \land <var:G0> = <nat:3> \} \\ <var:E> := <var:G0> \\ \{ <var:A> = <var:v> \land <var:E> = <nat:3> \} \end{eqnarray} The application of usual Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:A> = <var:v> }} <var:G0> := <nat:3> ; <var:E> := <var:G0> {{ <var:E> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:G0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:v> /\ <var:E> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 