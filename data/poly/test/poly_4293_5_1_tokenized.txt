\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:B1> := <var:q> ; <var:B0> := <nat:9> ; <var:B1> := <var:B1> * <nat:7> ; <var:F> := <var:B1> <var:F> := <var:F> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of commands <def:poly> . Assuming given positive coefficients $ <var:x> $ that $ <var:q> = <var:x> $ prior to interpreting this code it follows that we see $ <var:F> = <nat:7> * <var:x> + <nat:9> $ . \end{theorem} \begin{proof} Utilizing typical Hoare logic returns : \begin{eqnarray} \{ <var:q> = <var:x> \} \\ <var:B1> := <var:q> ; \\ \{ <var:q> = <var:x> \land <var:B1> = <var:x> \} \\ <var:B0> := <nat:9> ; \\ \{ <var:q> = <var:x> \land <var:B1> = <var:x> \land <var:B0> = <nat:9> \} \\ <var:B1> := <var:B1> * <nat:7> ; \\ \{ <var:q> = <var:x> \land <var:B1> = <nat:7> * <var:x> \land <var:B0> = <nat:9> \} \\ <var:F> := <var:B1> \\ \{ <var:q> = <var:x> \land <var:B0> = <nat:9> \land <var:F> = <nat:7> * <var:x> \} \\ <var:F> := <var:F> + <var:B0> \\ \{ <var:q> = <var:x> \land <var:F> = <nat:7> * <var:x> + <nat:9> \} \end{eqnarray} Considering the above , the set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <def:poly> := <var:B1> := <var:q> ; <var:B0> := <nat:9> ; <var:B1> := <var:B1> * <nat:7> ; <var:F> := <var:B1> <var:F> := <var:F> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:q> = <var:x> }} <def:poly> {{ <var:F> = <nat:7> * <var:x> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:B1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:B1> = <var:x> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:B1> = <nat:7> * <var:x> /\ <var:B0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:B0> = <nat:9> /\ <var:F> = <nat:7> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:x> /\ <var:F> = <nat:7> * <var:x> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 