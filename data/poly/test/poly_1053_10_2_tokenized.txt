\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:m> := <nat:3> ; <var:m> := <var:m> * <var:O> ; <var:m> := <nat:4> + <var:m> * <var:O> ; <var:m> := <var:m> * <var:O> ; <var:m> := <nat:1> + <var:m> * <var:O> ; <var:m> := <var:m> * <var:O> ; <var:m> := <var:m> * <var:O> ; <var:m> := <var:m> * <var:O> ; <var:m> := <nat:4> + <var:m> * <var:O> ; <var:m> := <nat:2> + <var:m> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:O> = <var:j> $ before the execution of our set of commands , it holds that we see $ <var:m> = <nat:3> \cdot <var:j> ^ <nat:9> + <nat:4> \cdot <var:j> ^ <nat:7> + <nat:1> \cdot <var:j> ^ <nat:5> + <nat:4> \cdot <var:j> + <nat:2> $ . \end{theorem} \begin{proof} Applying usual Hoare reasoning gives : \begin{eqnarray} \{ <var:O> = <var:j> \} \\ <var:m> := <nat:3> ; \\ \{ <var:O> = <var:j> \land <var:m> = <nat:3> \} \\ <var:m> := <var:m> * <var:O> ; \\ \{ <var:O> = <var:j> \land <var:m> = <nat:3> \times <var:j> + \} \\ <var:m> := <nat:4> + <var:m> * <var:O> ; \\ \{ <var:O> = <var:j> \land <var:m> = <nat:3> \times <var:j> ^ <nat:2> + <nat:4> \} \\ <var:m> := <var:m> * <var:O> ; \\ \{ <var:O> = <var:j> \land <var:m> = <nat:3> \times <var:j> ^ <nat:3> + <nat:4> \times <var:j> + \} \\ <var:m> := <nat:1> + <var:m> * <var:O> ; \\ \{ <var:O> = <var:j> \land <var:m> = <nat:3> \times <var:j> ^ <nat:4> + <nat:4> \times <var:j> ^ <nat:2> + <nat:1> \} \\ <var:m> := <var:m> * <var:O> ; \\ \{ <var:O> = <var:j> \land <var:m> = <nat:3> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> ^ <nat:3> + <nat:1> \times <var:j> + \} \\ <var:m> := <var:m> * <var:O> ; \\ \{ <var:O> = <var:j> \land <var:m> = <nat:3> \times <var:j> ^ <nat:6> + <nat:4> \times <var:j> ^ <nat:4> + <nat:1> \times <var:j> ^ <nat:2> + \} \\ <var:m> := <var:m> * <var:O> ; \\ \{ <var:O> = <var:j> \land <var:m> = <nat:3> \times <var:j> ^ <nat:7> + <nat:4> \times <var:j> ^ <nat:5> + <nat:1> \times <var:j> ^ <nat:3> + \} \\ <var:m> := <nat:4> + <var:m> * <var:O> ; \\ \{ <var:O> = <var:j> \land <var:m> = <nat:3> \times <var:j> ^ <nat:8> + <nat:4> \times <var:j> ^ <nat:6> + <nat:1> \times <var:j> ^ <nat:4> + <nat:4> \} \\ <var:m> := <nat:2> + <var:m> * <var:O> \\ \{ <var:O> = <var:j> \land <var:m> = <nat:3> \times <var:j> ^ <nat:9> + <nat:4> \times <var:j> ^ <nat:7> + <nat:1> \times <var:j> ^ <nat:5> + <nat:4> \times <var:j> + <nat:2> \} \end{eqnarray} Therefore , the list of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:m> := <nat:3> ; <var:m> := <var:m> * <var:O> ; <var:m> := <nat:4> + <var:m> * <var:O> ; <var:m> := <var:m> * <var:O> ; <var:m> := <nat:1> + <var:m> * <var:O> ; <var:m> := <var:m> * <var:O> ; <var:m> := <var:m> * <var:O> ; <var:m> := <var:m> * <var:O> ; <var:m> := <nat:4> + <var:m> * <var:O> ; <var:m> := <nat:2> + <var:m> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:O> = <var:j> }} <def:poly> {{ <var:m> = <nat:3> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:m> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:m> = <nat:3> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:m> = <nat:3> * <var:j> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:m> = <nat:3> * <var:j> ^ <nat:3> + <nat:4> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:m> = <nat:3> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:m> = <nat:3> * <var:j> ^ <nat:5> + <nat:4> * <var:j> ^ <nat:3> + <nat:1> * <var:j> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:m> = <nat:3> * <var:j> ^ <nat:6> + <nat:4> * <var:j> ^ <nat:4> + <nat:1> * <var:j> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:m> = <nat:3> * <var:j> ^ <nat:7> + <nat:4> * <var:j> ^ <nat:5> + <nat:1> * <var:j> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:m> = <nat:3> * <var:j> ^ <nat:8> + <nat:4> * <var:j> ^ <nat:6> + <nat:1> * <var:j> ^ <nat:4> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:j> /\ <var:m> = <nat:3> * <var:j> ^ <nat:9> + <nat:4> * <var:j> ^ <nat:7> + <nat:1> * <var:j> ^ <nat:5> + <nat:4> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 