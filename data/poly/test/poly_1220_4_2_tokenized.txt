\begin{document} \begin{theorem} Let the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:x> := <nat:1> ; <var:x> := <nat:1> + <var:x> * <var:w> ; <var:x> := <nat:1> + <var:x> * <var:w> ; <var:x> := <nat:3> + <var:x> * <var:w> \end{verbatim} Assuming it to hold that $ <var:w> = <var:e> $ ahead of the execution of this set of commands , it must be that $ <var:x> = <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:w> = <var:e> \} \\ <var:x> := <nat:1> ; \\ \{ <var:w> = <var:e> \land <var:x> = <nat:1> \} \\ <var:x> := <nat:1> + <var:x> * <var:w> ; \\ \{ <var:w> = <var:e> \land <var:x> = <nat:1> \times <var:e> + <nat:1> \} \\ <var:x> := <nat:1> + <var:x> * <var:w> ; \\ \{ <var:w> = <var:e> \land <var:x> = <nat:1> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:1> \} \\ <var:x> := <nat:3> + <var:x> * <var:w> \\ \{ <var:w> = <var:e> \land <var:x> = <nat:1> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:3> \} \end{eqnarray} Utilizing typical Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:w> = <var:e> }} <var:x> := <nat:1> ; <var:x> := <nat:1> + <var:x> * <var:w> ; <var:x> := <nat:1> + <var:x> * <var:w> ; <var:x> := <nat:3> + <var:x> * <var:w> {{ <var:x> = <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:x> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:x> = <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:x> = <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:e> /\ <var:x> = <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 