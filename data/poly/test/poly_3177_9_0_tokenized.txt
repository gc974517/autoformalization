\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:O0> := <nat:6> ; <var:O1> := <nat:3> ; <var:O1> := <var:O1> * <var:G> ; <var:O2> := <nat:3> ; <var:O2> := <var:O2> * <var:G> ; <var:O2> := <var:O2> * <var:G> ; <var:d> := <var:O2> ; <var:d> := <var:d> + <var:O1> ; <var:d> := <var:d> + <var:O0> \end{verbatim} Allow that $ <var:G> = <var:S> $ before executing the set of instructions it holds that we have $ <var:d> = <nat:3> \cdot <var:S> ^ <nat:2> + <nat:3> \cdot <var:S> + <nat:6> $ . \end{theorem} \begin{proof} The way to prove correctness for our code segment is done with standard Hoare reasoning . Advancing to the next step , the variable assignmet statement yielding $ <nat:6> $ into $ <var:O0>$ . This moves the condition $ \{ <var:G> = <var:S> \} $ to the condition $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \} $ . Going to the next step , the assignment statement defining $ <nat:3> $ into $ <var:O1>$ . This transfers the precondition $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \} $ toward $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:O1> = <nat:3> \} $ . This is shown using the assignment inference rule defined in typical Hoare reasoning . Moving forward to the subsequent bit of code in the code , we have the binding statement assigning $ <var:O1> * <var:G> $ toward $ <var:O1>$ . This forwards $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:O1> = <nat:3> \} $ toward the condition $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:O1> = <nat:3> \times <var:S> \} $ . This is shown to be logically sound using the assignment scheme in Hoare logic . Advancing to the upcoming step contained in our list of commands , we see the binding code \verb | <var:O2> := <nat:3> ; | . This statement moves $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:O1> = <nat:3> \times <var:S> \} $ as the postcondition $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:O1> = <nat:3> \times <var:S> \land <var:O2> = <nat:3> \} $ . Honing in on the following command contained in the series of instructions , we have the environment update command defining $ <var:O2> * <var:G> $ as $ <var:O2>$ . This command redefines $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:O1> = <nat:3> \times <var:S> \land <var:O2> = <nat:3> \} $ to the postcondition $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:O1> = <nat:3> \times <var:S> \land <var:O2> = <nat:3> \times <var:S> \} $ . This is sound by the assignment law defined in standard Hoare reasoning . Moving forward to the next piece of code in our list of commands , we see the variable binding command \verb | <var:O2> := <var:O2> * <var:G> ; | . This redefines $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:O1> = <nat:3> \times <var:S> \land <var:O2> = <nat:3> \times <var:S> \} $ to the condition $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:O1> = <nat:3> \times <var:S> \land <var:O2> = <nat:3> \times <var:S> ^ <nat:2> \} $ . Moving forward to the next step , we have the variable binding statement \verb | <var:d> := <var:O2> ; | . This transfers $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:O1> = <nat:3> \times <var:S> \land <var:O2> = <nat:3> \times <var:S> ^ <nat:2> \} $ into the postcondition $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:O1> = <nat:3> \times <var:S> \land <var:d> = <nat:3> \times <var:S> ^ <nat:2> \} $ . This is ensured by the assignment inference rule defined in usual Hoare logic . Looking at the proceeding command seen in our set of commands , we see the assignment statement \verb | <var:d> := <var:d> + <var:O1> ; | . This statement redefines the precondition $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:O1> = <nat:3> \times <var:S> \land <var:d> = <nat:3> \times <var:S> ^ <nat:2> \} $ as the postcondition $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:d> = <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> \} $ . Immediately following , we have the binding code binding $ <var:d> + <var:O0$ toward $ <var:d>$ . This code transfers $ \{ <var:G> = <var:S> \land <var:O0> = <nat:6> \land <var:d> = <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> \} $ as the condition $ \{ <var:G> = <var:S> \land <var:d> = <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:6> \} $ . This is known to be sound using the assignment law from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:G> = <var:S> }} <var:O0> := <nat:6> ; <var:O1> := <nat:3> ; <var:O1> := <var:O1> * <var:G> ; <var:O2> := <nat:3> ; <var:O2> := <var:O2> * <var:G> ; <var:O2> := <var:O2> * <var:G> ; <var:d> := <var:O2> ; <var:d> := <var:d> + <var:O1> ; <var:d> := <var:d> + <var:O0> {{ <var:d> = <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:S> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:S> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:S> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:S> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:3> * <var:S> /\ <var:O2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:S> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:3> * <var:S> /\ <var:O2> = <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:S> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:3> * <var:S> /\ <var:O2> = <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:S> /\ <var:O0> = <nat:6> /\ <var:O1> = <nat:3> * <var:S> /\ <var:d> = <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:S> /\ <var:O0> = <nat:6> /\ <var:d> = <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:S> /\ <var:d> = <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 