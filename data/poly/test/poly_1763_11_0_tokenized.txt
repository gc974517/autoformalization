\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} : \begin{verbatim} <var:F0> := <nat:1> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:v> ; <var:F2> := <var:F2> * <var:v> ; <var:F3> := <nat:3> ; <var:F3> := <var:F3> * <var:v> ; <var:F3> := <var:F3> * <var:v> ; <var:F3> := <var:F3> * <var:v> ; <var:G> := <var:F3> ; <var:G> := <var:G> + <var:F2> ; <var:G> := <var:G> + <var:F0> \end{verbatim} Allow $ <var:v> = <var:h> $ ahead of the execution of the code , it holds that we see $ <var:G> = <nat:3> \cdot <var:h> ^ <nat:3> + <nat:1> \cdot <var:h> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:v> = <var:h> \} \\ <var:F0> := <nat:1> ; \\ \{ <var:v> = <var:h> \land <var:F0> = <nat:1> \} \\ <var:F2> := <nat:1> ; \\ \{ <var:v> = <var:h> \land <var:F0> = <nat:1> \land <var:F2> = <nat:1> \} \\ <var:F2> := <var:F2> * <var:v> ; \\ \{ <var:v> = <var:h> \land <var:F0> = <nat:1> \land <var:F2> = <nat:1> \times <var:h> \} \\ <var:F2> := <var:F2> * <var:v> ; \\ \{ <var:v> = <var:h> \land <var:F0> = <nat:1> \land <var:F2> = <nat:1> \times <var:h> ^ <nat:2> \} \\ <var:F3> := <nat:3> ; \\ \{ <var:v> = <var:h> \land <var:F0> = <nat:1> \land <var:F2> = <nat:1> \times <var:h> ^ <nat:2> \land <var:F3> = <nat:3> \} \\ <var:F3> := <var:F3> * <var:v> ; \\ \{ <var:v> = <var:h> \land <var:F0> = <nat:1> \land <var:F2> = <nat:1> \times <var:h> ^ <nat:2> \land <var:F3> = <nat:3> \times <var:h> \} \\ <var:F3> := <var:F3> * <var:v> ; \\ \{ <var:v> = <var:h> \land <var:F0> = <nat:1> \land <var:F2> = <nat:1> \times <var:h> ^ <nat:2> \land <var:F3> = <nat:3> \times <var:h> ^ <nat:2> \} \\ <var:F3> := <var:F3> * <var:v> ; \\ \{ <var:v> = <var:h> \land <var:F0> = <nat:1> \land <var:F2> = <nat:1> \times <var:h> ^ <nat:2> \land <var:F3> = <nat:3> \times <var:h> ^ <nat:3> \} \\ <var:G> := <var:F3> ; \\ \{ <var:v> = <var:h> \land <var:F0> = <nat:1> \land <var:F2> = <nat:1> \times <var:h> ^ <nat:2> \land <var:G> = <nat:3> \times <var:h> ^ <nat:3> \} \end{eqnarray} Advancing evaluating our list of instructions gives : \begin{eqnarray} <var:G> := <var:G> + <var:F2> ; \\ \{ <var:v> = <var:h> \land <var:F0> = <nat:1> \land <var:G> = <nat:3> \times <var:h> ^ <nat:3> + <nat:1> \times <var:h> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:F0> \\ \{ <var:v> = <var:h> \land <var:G> = <nat:3> \times <var:h> ^ <nat:3> + <nat:1> \times <var:h> ^ <nat:2> + <nat:1> \} \end{eqnarray} Using Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:v> = <var:h> }} <var:F0> := <nat:1> ; <var:F2> := <nat:1> ; <var:F2> := <var:F2> * <var:v> ; <var:F2> := <var:F2> * <var:v> ; <var:F3> := <nat:3> ; <var:F3> := <var:F3> * <var:v> ; <var:F3> := <var:F3> * <var:v> ; <var:F3> := <var:F3> * <var:v> ; <var:G> := <var:F3> ; <var:G> := <var:G> + <var:F2> ; <var:G> := <var:G> + <var:F0> {{ <var:G> = <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:F0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:1> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:1> * <var:h> ^ <nat:2> /\ <var:F3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:1> * <var:h> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:1> * <var:h> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:1> * <var:h> ^ <nat:2> /\ <var:F3> = <nat:3> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:F0> = <nat:1> /\ <var:F2> = <nat:1> * <var:h> ^ <nat:2> /\ <var:G> = <nat:3> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:F0> = <nat:1> /\ <var:G> = <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:h> /\ <var:G> = <nat:3> * <var:h> ^ <nat:3> + <nat:1> * <var:h> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 