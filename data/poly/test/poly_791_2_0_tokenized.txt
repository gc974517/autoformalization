\begin{document} \begin{definition} Take the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:T0> := <nat:4> ; <var:y> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Allow that $ <var:H> = <var:k> $ prior to running the program it holds that we have $ <var:y> = <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of commands is shown with usual Hoare reasoning . Advancing to the following statement contained in the segment of code , \begin{verbatim} { <var:H> = <var:k> } <var:T0> := <nat:4> { <var:H> = <var:k> \land <var:T0> = <nat:4> } \end{verbatim} Advancing to the next step , we have \begin{verbatim} { <var:H> = <var:k> } <var:T0> := <nat:4> { <var:H> = <var:k> \land <var:T0> = <nat:4> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:4> ; <var:y> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:H> = <var:k> }} <def:poly> {{ <var:y> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:k> /\ <var:y> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 