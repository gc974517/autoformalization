\begin{document} \begin{theorem} We define a set of instructions in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:8> ; <var:J> := <var:U0> \end{verbatim} Assuming given some integers $ <var:S> $ that we have $ <var:j> = <var:S> $ before running this set of instructions , then we see $ <var:J> = <nat:8> $ . \end{theorem} \begin{proof} The method of proof for the set of instructions can be seen with Hoare techniques . Moving forward , we have the variable update command \verb | <var:U0> := <nat:8> ; | . This moves $ \{ <var:j> = <var:S> \} $ as the condition $ \{ <var:j> = <var:S> \land <var:U0> = <nat:8> \} $ . This is given using the assignment scheme given by typical Hoare reasoning . Paying attention to the upcoming command contained in our list of commands , the variable assignmet statement \verb | <var:J> := <var:U0> | . This command moves the precondition $ \{ <var:j> = <var:S> \land <var:U0> = <nat:8> \} $ toward the condition $ \{ <var:j> = <var:S> \land <var:J> = <nat:8> \} $ . This is sound through the assignment scheme defined in standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:j> = <var:S> }} <var:U0> := <nat:8> ; <var:J> := <var:U0> {{ <var:J> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:S> /\ <var:J> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 