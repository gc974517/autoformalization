\begin{document} \begin{theorem} Consider a code as follows \begin{verbatim} <var:Y1> := <var:C> ; <var:Y2> := <var:Y1> * <var:C> ; <var:Y3> := <var:Y2> * <var:C> ; <var:Y0> := <nat:4> ; <var:Y2> := <var:Y2> * <nat:1> ; <var:Y3> := <var:Y3> * <nat:9> ; <var:k> := <var:Y3> <var:k> := <var:k> + <var:Y2> <var:k> := <var:k> + <var:Y0> \end{verbatim} Assuming it to hold that $ <var:C> = <var:y> $ , assuming some whole numbers $ <var:y> $ , before the evaluation of this list of commands , it follows that $ <var:k> = <nat:9> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:4> $ when segment of code finishes . \end{theorem} \begin{proof} Demonstrating correctness of the program can be accomplished using usual Hoare logic . Further , we see \[ \begin{tabular} {rcl} \{ <var:C> = <var:y> \} & <var:Y1> := <var:C> & \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \} \\ \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \} & <var:Y2> := <var:Y1> * <var:C> & \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <var:y> ^ <nat:2> \} \\ \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <var:y> ^ <nat:2> \} & <var:Y3> := <var:Y2> * <var:C> & \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <var:y> ^ <nat:2> \land <var:Y3> = <var:y> ^ <nat:3> \} \\ \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <var:y> ^ <nat:2> \land <var:Y3> = <var:y> ^ <nat:3> \} & <var:Y0> := <nat:4> & \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <var:y> ^ <nat:2> \land <var:Y3> = <var:y> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <var:y> ^ <nat:2> \land <var:Y3> = <var:y> ^ <nat:3> \land <var:Y0> = <nat:4> \} & <var:Y2> := <var:Y2> * <nat:1> & \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <nat:1> \times <var:y> ^ <nat:2> \land <var:Y3> = <var:y> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <nat:1> \times <var:y> ^ <nat:2> \land <var:Y3> = <var:y> ^ <nat:3> \land <var:Y0> = <nat:4> \} & <var:Y3> := <var:Y3> * <nat:9> & \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <nat:1> \times <var:y> ^ <nat:2> \land <var:Y3> = <nat:9> \times <var:y> ^ <nat:3> \land <var:Y0> = <nat:4> \} \\ \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <nat:1> \times <var:y> ^ <nat:2> \land <var:Y3> = <nat:9> \times <var:y> ^ <nat:3> \land <var:Y0> = <nat:4> \} & <var:k> := <var:Y3& \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <nat:1> \times <var:y> ^ <nat:2> \land <var:Y0> = <nat:4> \land <var:k> = <nat:9> \times <var:y> ^ <nat:3> \} \\ \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y2> = <nat:1> \times <var:y> ^ <nat:2> \land <var:Y0> = <nat:4> \land <var:k> = <nat:9> \times <var:y> ^ <nat:3> \} & <var:k> := <var:k> + <var:Y2& \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y0> = <nat:4> \land <var:k> = <nat:9> \times <var:y> ^ <nat:3> + <nat:1> \times <var:y> ^ <nat:2> \} \\ \{ <var:C> = <var:y> \land <var:Y1> = <var:y> \land <var:Y0> = <nat:4> \land <var:k> = <nat:9> \times <var:y> ^ <nat:3> + <nat:1> \times <var:y> ^ <nat:2> \} & <var:k> := <var:k> + <var:Y0& \{ <var:C> = <var:y> \land <var:k> = <nat:9> \times <var:y> ^ <nat:3> + <nat:1> \times <var:y> ^ <nat:2> + <nat:4> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Definition <var:Y2> : string := " <var:Y2> " . Definition <var:Y3> : string := " <var:Y3> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:C> = <var:y> }} <var:Y1> := <var:C> ; <var:Y2> := <var:Y1> * <var:C> ; <var:Y3> := <var:Y2> * <var:C> ; <var:Y0> := <nat:4> ; <var:Y2> := <var:Y2> * <nat:1> ; <var:Y3> := <var:Y3> * <nat:9> ; <var:k> := <var:Y3> <var:k> := <var:k> + <var:Y2> <var:k> := <var:k> + <var:Y0> {{ <var:k> = <nat:9> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:Y1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:Y1> = <var:y> /\ <var:Y2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:Y1> = <var:y> /\ <var:Y2> = <var:y> ^ <nat:2> /\ <var:Y3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:Y1> = <var:y> /\ <var:Y2> = <var:y> ^ <nat:2> /\ <var:Y3> = <var:y> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:Y1> = <var:y> /\ <var:Y2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:Y3> = <var:y> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:Y1> = <var:y> /\ <var:Y2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:Y3> = <nat:9> * <var:y> ^ <nat:3> /\ <var:Y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:Y1> = <var:y> /\ <var:Y2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:Y0> = <nat:4> /\ <var:k> = <nat:9> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:Y1> = <var:y> /\ <var:Y0> = <nat:4> /\ <var:k> = <nat:9> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:k> = <nat:9> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 