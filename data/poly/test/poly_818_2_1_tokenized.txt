\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:M0> := <nat:6> ; <var:f> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Allow that we have $ <var:b> = <var:e> $ ( given $ <var:e> \in \mathbb{Z}^+ $ ) ahead of the evaluation of our list of commands it follows that $ <var:f> = <nat:6> $ once set of commands has finished executing . \end{theorem} \begin{proof} Utilizing typical Hoare logic returns : \begin{eqnarray} \{ <var:b> = <var:e> \} \\ <var:M0> := <nat:6> ; \\ \{ <var:b> = <var:e> \land <var:M0> = <nat:6> \} \\ <var:f> := <var:M0> \\ \{ <var:b> = <var:e> \land <var:f> = <nat:6> \} \end{eqnarray} Thus , this set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:6> ; <var:f> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:b> = <var:e> }} <def:poly> {{ <var:f> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:e> /\ <var:f> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 