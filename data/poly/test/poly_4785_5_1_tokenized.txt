\begin{document} \begin{theorem} Define the following program in \emph{Imp} as follows \begin{verbatim} <var:l1> := <var:Q> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:6> ; <var:T> := <var:l1> <var:T> := <var:T> + <var:l0> \end{verbatim} Given it to hold that $ <var:Q> = <var:S> $ before the evaluation of this code , then $ <var:T> = <nat:6> \cdot <var:S> + <nat:9> $ once set of commands finishes . \end{theorem} \begin{proof} Using usual Hoare logic returns : \begin{eqnarray} \{ <var:Q> = <var:S> \} \\ <var:l1> := <var:Q> ; \\ \{ <var:Q> = <var:S> \land <var:l1> = <var:S> \} \\ <var:l0> := <nat:9> ; \\ \{ <var:Q> = <var:S> \land <var:l1> = <var:S> \land <var:l0> = <nat:9> \} \\ <var:l1> := <var:l1> * <nat:6> ; \\ \{ <var:Q> = <var:S> \land <var:l1> = <nat:6> * <var:S> \land <var:l0> = <nat:9> \} \\ <var:T> := <var:l1> \\ \{ <var:Q> = <var:S> \land <var:l0> = <nat:9> \land <var:T> = <nat:6> * <var:S> \} \\ <var:T> := <var:T> + <var:l0> \\ \{ <var:Q> = <var:S> \land <var:T> = <nat:6> * <var:S> + <nat:9> \} \end{eqnarray} Therefore , this program is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:Q> = <var:S> }} <var:l1> := <var:Q> ; <var:l0> := <nat:9> ; <var:l1> := <var:l1> * <nat:6> ; <var:T> := <var:l1> <var:T> := <var:T> + <var:l0> {{ <var:T> = <nat:6> * <var:S> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:l1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:l1> = <var:S> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:l1> = <nat:6> * <var:S> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:l0> = <nat:9> /\ <var:T> = <nat:6> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:S> /\ <var:T> = <nat:6> * <var:S> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 