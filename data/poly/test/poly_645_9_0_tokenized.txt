\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:M0> := <nat:6> ; <var:M1> := <nat:1> ; <var:M1> := <var:M1> * <var:s> ; <var:M2> := <nat:8> ; <var:M2> := <var:M2> * <var:s> ; <var:M2> := <var:M2> * <var:s> ; <var:w> := <var:M2> ; <var:w> := <var:w> + <var:M1> ; <var:w> := <var:w> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:s> = <var:q> $ ahead of running our list of commands then we have $ <var:w> = <nat:8> \times <var:q> ^ <nat:2> + <nat:1> \times <var:q> + <nat:6> $ once program has finished executing . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is clear using standard Hoare logic . Advancing to the next step , we see \[ \begin{tabular} {rcl} \{ <var:s> = <var:q> \} & <var:M0> := <nat:6> & \{ <var:s> = <var:q> \land <var:M0> = <nat:6> \} \\ \{ <var:s> = <var:q> \land <var:M0> = <nat:6> \} & <var:M1> := <nat:1> & \{ <var:s> = <var:q> \land <var:M0> = <nat:6> \land <var:M1> = <nat:1> \} \\ \{ <var:s> = <var:q> \land <var:M0> = <nat:6> \land <var:M1> = <nat:1> \} & <var:M1> := <var:M1> * <var:s> & \{ <var:s> = <var:q> \land <var:M0> = <nat:6> \land <var:M1> = <nat:1> \cdot <var:q> \} \\ \{ <var:s> = <var:q> \land <var:M0> = <nat:6> \land <var:M1> = <nat:1> \cdot <var:q> \} & <var:M2> := <nat:8> & \{ <var:s> = <var:q> \land <var:M0> = <nat:6> \land <var:M1> = <nat:1> \cdot <var:q> \land <var:M2> = <nat:8> \} \end{tabular} Moving onward , we have \[ \begin{tabular} {rcl} \{ <var:s> = <var:q> \} & <var:M0> := <nat:6> & \{ <var:s> = <var:q> \land <var:M0> = <nat:6> \} \\ \{ <var:s> = <var:q> \land <var:M0> = <nat:6> \} & <var:M1> := <nat:1> & \{ <var:s> = <var:q> \land <var:M0> = <nat:6> \land <var:M1> = <nat:1> \} \end{tabular} This is shown through the binding law given by usual Hoare logic . Shifting focus toward the upcoming bit of code in our list of commands , \[ \begin{tabular} {rcl} \{ <var:s> = <var:q> \} & <var:M0> := <nat:6> & \{ <var:s> = <var:q> \land <var:M0> = <nat:6> \} \end{tabular} This is shown to be logically sound with the binding law of typical Hoare logic . Going forward , \[ \begin{tabular} {rcl} \{ <var:s> = <var:q> \} & <var:M0> := <nat:6> & \{ <var:s> = <var:q> \land <var:M0> = <nat:6> \} \end{tabular} This is shown by the binding rule from typical Hoare techniques . Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:s> = <var:q> \} & <var:M0> := <nat:6> & \{ <var:s> = <var:q> \land <var:M0> = <nat:6> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M0> := <nat:6> ; <var:M1> := <nat:1> ; <var:M1> := <var:M1> * <var:s> ; <var:M2> := <nat:8> ; <var:M2> := <var:M2> * <var:s> ; <var:M2> := <var:M2> * <var:s> ; <var:w> := <var:M2> ; <var:w> := <var:w> + <var:M1> ; <var:w> := <var:w> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:s> = <var:q> }} <def:poly> {{ <var:w> = <nat:8> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:q> /\ <var:M0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:q> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:q> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:q> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:1> * <var:q> /\ <var:M2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:q> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:1> * <var:q> /\ <var:M2> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:q> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:1> * <var:q> /\ <var:M2> = <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:q> /\ <var:M0> = <nat:6> /\ <var:M1> = <nat:1> * <var:q> /\ <var:w> = <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:q> /\ <var:M0> = <nat:6> /\ <var:w> = <nat:8> * <var:q> ^ <nat:2> + <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:q> /\ <var:w> = <nat:8> * <var:q> ^ <nat:2> + <nat:1> * <var:q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 