\begin{document} \begin{theorem} We define a segment of code as \begin{verbatim} <var:q1> := <var:y> ; <var:q2> := <var:q1> * <var:y> ; <var:q3> := <var:q2> * <var:y> ; <var:q0> := <nat:6> ; <var:q1> := <var:q1> * <nat:1> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:9> ; <var:V> := <var:q3> <var:V> := <var:V> + <var:q2> <var:V> := <var:V> + <var:q1> <var:V> := <var:V> + <var:q0> \end{verbatim} Assuming that $ <var:y> = <var:Q> $ prior to the evaluation of the set of instructions it must be that we have $ <var:V> = <nat:9> \cdot <var:Q> ^ <nat:3> + <nat:7> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:6> $ after code segment finishes . \end{theorem} \begin{proof} The course of logic for our list of instructions can be seen by Hoare logic . Moving on to the next step , we see the variable update code assigning $ <var:y> $ as $ <var:q1>$ . This redefines the precondition $ \{ <var:y> = <var:Q> \} $ toward $ \{ <var:y> = <var:Q> \land <var:q1> = <var:Q> \} $ . Keeping momentum , we see the binding line \verb | <var:q2> := <var:q1> * <var:y> ; | . This code takes $ \{ <var:y> = <var:Q> \land <var:q1> = <var:Q> \} $ as $ \{ <var:y> = <var:Q> \land <var:q1> = <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \} $ . Taking another step toward the next bit of code found in our set of instructions , we have the binding statement yielding $ <var:q2> * <var:y> $ into $ <var:q3>$ . This command takes the condition $ \{ <var:y> = <var:Q> \land <var:q1> = <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \} $ into the postcondition $ \{ <var:y> = <var:Q> \land <var:q1> = <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \} $ . This is guaranteed by the assignment inference rule defined by standard Hoare reasoning . Shifting focus toward the following line of code seen in our list of instructions , we have the assignment code \verb | <var:q0> := <nat:6> ; | . This advances $ \{ <var:y> = <var:Q> \land <var:q1> = <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \} $ as the condition $ \{ <var:y> = <var:Q> \land <var:q1> = <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \land <var:q0> = <nat:6> \} $ . This is guaranteed using the assignment law from Hoare reasoning . Next , we see the variable binding command \verb | <var:q1> := <var:q1> * <nat:1> ; | . This advances the precondition $ \{ <var:y> = <var:Q> \land <var:q1> = <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \land <var:q0> = <nat:6> \} $ to the condition $ \{ <var:y> = <var:Q> \land <var:q1> = <nat:1> * <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \land <var:q0> = <nat:6> \} $ . Moving on to the subsequent line in our series of commands , we see the statement \verb | <var:q2> := <var:q2> * <nat:7> ; | . This redefines the precondition $ \{ <var:y> = <var:Q> \land <var:q1> = <nat:1> * <var:Q> \land <var:q2> = <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \land <var:q0> = <nat:6> \} $ into the condition $ \{ <var:y> = <var:Q> \land <var:q1> = <nat:1> * <var:Q> \land <var:q2> = <nat:7> * <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \land <var:q0> = <nat:6> \} $ . This is known to be sound through the assignment law given by typical Hoare techniques . Going forward , the variable assignmet command \verb | <var:q3> := <var:q3> * <nat:9> ; | . This advances the precondition $ \{ <var:y> = <var:Q> \land <var:q1> = <nat:1> * <var:Q> \land <var:q2> = <nat:7> * <var:Q> ^ <nat:2> \land <var:q3> = <var:Q> ^ <nat:3> \land <var:q0> = <nat:6> \} $ into the postcondition $ \{ <var:y> = <var:Q> \land <var:q1> = <nat:1> * <var:Q> \land <var:q2> = <nat:7> * <var:Q> ^ <nat:2> \land <var:q3> = <nat:9> * <var:Q> ^ <nat:3> \land <var:q0> = <nat:6> \} $ . Focusing on the upcoming line in our series of commands , the code binding $ <var:q3$ as $ <var:V>$ . This forwards the precondition $ \{ <var:y> = <var:Q> \land <var:q1> = <nat:1> * <var:Q> \land <var:q2> = <nat:7> * <var:Q> ^ <nat:2> \land <var:q3> = <nat:9> * <var:Q> ^ <nat:3> \land <var:q0> = <nat:6> \} $ into the postcondition $ \{ <var:y> = <var:Q> \land <var:q1> = <nat:1> * <var:Q> \land <var:q2> = <nat:7> * <var:Q> ^ <nat:2> \land <var:q0> = <nat:6> \land <var:V> = <nat:9> * <var:Q> ^ <nat:3> \} $ . Further , we have the assignment code assigning $ <var:V> + <var:q2$ as $ <var:V>$ . This redefines the precondition $ \{ <var:y> = <var:Q> \land <var:q1> = <nat:1> * <var:Q> \land <var:q2> = <nat:7> * <var:Q> ^ <nat:2> \land <var:q0> = <nat:6> \land <var:V> = <nat:9> * <var:Q> ^ <nat:3> \} $ toward $ \{ <var:y> = <var:Q> \land <var:q1> = <nat:1> * <var:Q> \land <var:q0> = <nat:6> \land <var:V> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> \} $ . This is guaranteed through the assignment rule given by Hoare techniques . Moving forward to the subsequent line of code found in our code segment , the environment update line \verb | <var:V> := <var:V> + <var:q1> | . This statement transfers the precondition $ \{ <var:y> = <var:Q> \land <var:q1> = <nat:1> * <var:Q> \land <var:q0> = <nat:6> \land <var:V> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> \} $ to the condition $ \{ <var:y> = <var:Q> \land <var:q0> = <nat:6> \land <var:V> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> \} $ . This is rigorously given with the assignment scheme defined by Hoare techniques . Moving on to the next step , we see the line \verb | <var:V> := <var:V> + <var:q0> | . This command redefines the condition $ \{ <var:y> = <var:Q> \land <var:q0> = <nat:6> \land <var:V> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> \} $ to the postcondition $ \{ <var:y> = <var:Q> \land <var:V> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:y> = <var:Q> }} <var:q1> := <var:y> ; <var:q2> := <var:q1> * <var:y> ; <var:q3> := <var:q2> * <var:y> ; <var:q0> := <nat:6> ; <var:q1> := <var:q1> * <nat:1> ; <var:q2> := <var:q2> * <nat:7> ; <var:q3> := <var:q3> * <nat:9> ; <var:V> := <var:q3> <var:V> := <var:V> + <var:q2> <var:V> := <var:V> + <var:q1> <var:V> := <var:V> + <var:q0> {{ <var:V> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:q1> = <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:q1> = <var:Q> /\ <var:q2> = <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:q1> = <var:Q> /\ <var:q2> = <var:Q> ^ <nat:2> /\ <var:q3> = <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:q1> = <var:Q> /\ <var:q2> = <var:Q> ^ <nat:2> /\ <var:q3> = <var:Q> ^ <nat:3> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:q1> = <nat:1> * <var:Q> /\ <var:q2> = <var:Q> ^ <nat:2> /\ <var:q3> = <var:Q> ^ <nat:3> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:q1> = <nat:1> * <var:Q> /\ <var:q2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:q3> = <var:Q> ^ <nat:3> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:q1> = <nat:1> * <var:Q> /\ <var:q2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:q3> = <nat:9> * <var:Q> ^ <nat:3> /\ <var:q0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:q1> = <nat:1> * <var:Q> /\ <var:q2> = <nat:7> * <var:Q> ^ <nat:2> /\ <var:q0> = <nat:6> /\ <var:V> = <nat:9> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:q1> = <nat:1> * <var:Q> /\ <var:q0> = <nat:6> /\ <var:V> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:q0> = <nat:6> /\ <var:V> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:V> = <nat:9> * <var:Q> ^ <nat:3> + <nat:7> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 