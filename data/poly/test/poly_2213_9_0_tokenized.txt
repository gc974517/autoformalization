\begin{document} \begin{theorem} Let the following set of commands : \begin{verbatim} <var:l0> := <nat:8> ; <var:l1> := <nat:4> ; <var:l1> := <var:l1> * <var:V> ; <var:l2> := <nat:5> ; <var:l2> := <var:l2> * <var:V> ; <var:l2> := <var:l2> * <var:V> ; <var:f> := <var:l2> ; <var:f> := <var:f> + <var:l1> ; <var:f> := <var:f> + <var:l0> \end{verbatim} Assuming $ <var:V> = <var:m> $ ahead of running the series of instructions it must be that we see $ <var:f> = <nat:5> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:8> $ after set of commands executes . \end{theorem} \begin{proof} The application of usual Hoare logic produces : \begin{eqnarray} \{ <var:V> = <var:m> \} \\ <var:l0> := <nat:8> ; \\ \{ <var:V> = <var:m> \land <var:l0> = <nat:8> \} \\ <var:l1> := <nat:4> ; \\ \{ <var:V> = <var:m> \land <var:l0> = <nat:8> \land <var:l1> = <nat:4> \} \\ <var:l1> := <var:l1> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:l0> = <nat:8> \land <var:l1> = <nat:4> \times <var:m> \} \\ <var:l2> := <nat:5> ; \\ \{ <var:V> = <var:m> \land <var:l0> = <nat:8> \land <var:l1> = <nat:4> \times <var:m> \land <var:l2> = <nat:5> \} \\ <var:l2> := <var:l2> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:l0> = <nat:8> \land <var:l1> = <nat:4> \times <var:m> \land <var:l2> = <nat:5> \times <var:m> \} \\ <var:l2> := <var:l2> * <var:V> ; \\ \{ <var:V> = <var:m> \land <var:l0> = <nat:8> \land <var:l1> = <nat:4> \times <var:m> \land <var:l2> = <nat:5> \times <var:m> ^ <nat:2> \} \\ <var:f> := <var:l2> ; \\ \{ <var:V> = <var:m> \land <var:l0> = <nat:8> \land <var:l1> = <nat:4> \times <var:m> \land <var:f> = <nat:5> \times <var:m> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:l1> ; \\ \{ <var:V> = <var:m> \land <var:l0> = <nat:8> \land <var:f> = <nat:5> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> \} \\ <var:f> := <var:f> + <var:l0> \\ \{ <var:V> = <var:m> \land <var:f> = <nat:5> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:8> \} \end{eqnarray} Considering the above , this series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:V> = <var:m> }} <var:l0> := <nat:8> ; <var:l1> := <nat:4> ; <var:l1> := <var:l1> * <var:V> ; <var:l2> := <nat:5> ; <var:l2> := <var:l2> * <var:V> ; <var:l2> := <var:l2> * <var:V> ; <var:f> := <var:l2> ; <var:f> := <var:f> + <var:l1> ; <var:f> := <var:f> + <var:l0> {{ <var:f> = <nat:5> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:l0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:4> * <var:m> /\ <var:l2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:4> * <var:m> /\ <var:l2> = <nat:5> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:4> * <var:m> /\ <var:l2> = <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:l0> = <nat:8> /\ <var:l1> = <nat:4> * <var:m> /\ <var:f> = <nat:5> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:l0> = <nat:8> /\ <var:f> = <nat:5> * <var:m> ^ <nat:2> + <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:m> /\ <var:f> = <nat:5> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 