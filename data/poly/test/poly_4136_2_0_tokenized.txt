\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:u0> := <nat:3> ; <var:i> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of commands <def:poly> in \emph{Imp} . Allowing $ <var:o> = <var:f> $ before running this series of commands then $ <var:i> = <nat:3> $ once code segment has exited . \end{theorem} \begin{proof} Proving correctness for the set of instructions can be seen by standard Hoare reasoning . Immediately after , \verb | { <var:o> = <var:f> } <var:u0> := <nat:3> { <var:o> = <var:f> \land <var:u0> = <nat:3> } | and \verb | { <var:o> = <var:f> \land <var:u0> = <nat:3> } <var:i> := <var:u0{ <var:o> = <var:f> \land <var:i> = <nat:3> } | . This is given through the binding inference rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:3> ; <var:i> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:o> = <var:f> }} <def:poly> {{ <var:i> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:f> /\ <var:i> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 