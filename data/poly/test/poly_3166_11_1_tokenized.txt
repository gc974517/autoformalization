\begin{document} \begin{definition} Consider a segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:e1> := <var:L> ; <var:e2> := <var:e1> * <var:L> ; <var:e3> := <var:e2> * <var:L> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:1> ; <var:e2> := <var:e2> * <nat:1> ; <var:e3> := <var:e3> * <nat:3> ; <var:b> := <var:e3> <var:b> := <var:b> + <var:e2> <var:b> := <var:b> + <var:e1> <var:b> := <var:b> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:L> = <var:V> $ ahead of evaluating the code segment , then we see $ <var:b> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:3> $ when set of instructions has executed . \end{theorem} \begin{proof} The way to prove correctness for this segment of code can be given through standard Hoare logic . Advancing to the proceeding bit of code in our code , we have \begin{verbatim} { <var:L> = <var:V> } <var:e1> := <var:L> { <var:L> = <var:V> \land <var:e1> = <var:V> } \end{verbatim} Honing in on the next pieces of code contained in our set of instructions , we have \begin{verbatim} { <var:L> = <var:V> } <var:e1> := <var:L> { <var:L> = <var:V> \land <var:e1> = <var:V> } { <var:L> = <var:V> \land <var:e1> = <var:V> } <var:e2> := <var:e1> * <var:L> { <var:L> = <var:V> \land <var:e1> = <var:V> \land <var:e2> = <var:V> ^ <nat:2> } { <var:L> = <var:V> \land <var:e1> = <var:V> \land <var:e2> = <var:V> ^ <nat:2> } <var:e3> := <var:e2> * <var:L> { <var:L> = <var:V> \land <var:e1> = <var:V> \land <var:e2> = <var:V> ^ <nat:2> \land <var:e3> = <var:V> ^ <nat:3> } { <var:L> = <var:V> \land <var:e1> = <var:V> \land <var:e2> = <var:V> ^ <nat:2> \land <var:e3> = <var:V> ^ <nat:3> } <var:e0> := <nat:3> { <var:L> = <var:V> \land <var:e1> = <var:V> \land <var:e2> = <var:V> ^ <nat:2> \land <var:e3> = <var:V> ^ <nat:3> \land <var:e0> = <nat:3> } { <var:L> = <var:V> \land <var:e1> = <var:V> \land <var:e2> = <var:V> ^ <nat:2> \land <var:e3> = <var:V> ^ <nat:3> \land <var:e0> = <nat:3> } <var:e1> := <var:e1> * <nat:1> { <var:L> = <var:V> \land <var:e1> = <nat:1> \cdot <var:V> \land <var:e2> = <var:V> ^ <nat:2> \land <var:e3> = <var:V> ^ <nat:3> \land <var:e0> = <nat:3> } { <var:L> = <var:V> \land <var:e1> = <nat:1> \cdot <var:V> \land <var:e2> = <var:V> ^ <nat:2> \land <var:e3> = <var:V> ^ <nat:3> \land <var:e0> = <nat:3> } <var:e2> := <var:e2> * <nat:1> { <var:L> = <var:V> \land <var:e1> = <nat:1> \cdot <var:V> \land <var:e2> = <nat:1> \cdot <var:V> ^ <nat:2> \land <var:e3> = <var:V> ^ <nat:3> \land <var:e0> = <nat:3> } \end{verbatim} This is shown to be logically sound with the variable binding inference rule defined by typical Hoare reasoning . Next , we have \begin{verbatim} { <var:L> = <var:V> } <var:e1> := <var:L> { <var:L> = <var:V> \land <var:e1> = <var:V> } { <var:L> = <var:V> \land <var:e1> = <var:V> } <var:e2> := <var:e1> * <var:L> { <var:L> = <var:V> \land <var:e1> = <var:V> \land <var:e2> = <var:V> ^ <nat:2> } { <var:L> = <var:V> \land <var:e1> = <var:V> \land <var:e2> = <var:V> ^ <nat:2> } <var:e3> := <var:e2> * <var:L> { <var:L> = <var:V> \land <var:e1> = <var:V> \land <var:e2> = <var:V> ^ <nat:2> \land <var:e3> = <var:V> ^ <nat:3> } { <var:L> = <var:V> \land <var:e1> = <var:V> \land <var:e2> = <var:V> ^ <nat:2> \land <var:e3> = <var:V> ^ <nat:3> } <var:e0> := <nat:3> { <var:L> = <var:V> \land <var:e1> = <var:V> \land <var:e2> = <var:V> ^ <nat:2> \land <var:e3> = <var:V> ^ <nat:3> \land <var:e0> = <nat:3> } \end{verbatim} This is known to be sound using the assignment inference rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <var:e2> : string := " <var:e2> " . Definition <var:e3> : string := " <var:e3> " . Definition <def:poly> := <var:e1> := <var:L> ; <var:e2> := <var:e1> * <var:L> ; <var:e3> := <var:e2> * <var:L> ; <var:e0> := <nat:3> ; <var:e1> := <var:e1> * <nat:1> ; <var:e2> := <var:e2> * <nat:1> ; <var:e3> := <var:e3> * <nat:3> ; <var:b> := <var:e3> <var:b> := <var:b> + <var:e2> <var:b> := <var:b> + <var:e1> <var:b> := <var:b> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:L> = <var:V> }} <def:poly> {{ <var:b> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:e1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:e1> = <var:V> /\ <var:e2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:e1> = <var:V> /\ <var:e2> = <var:V> ^ <nat:2> /\ <var:e3> = <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:e1> = <var:V> /\ <var:e2> = <var:V> ^ <nat:2> /\ <var:e3> = <var:V> ^ <nat:3> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:e1> = <nat:1> * <var:V> /\ <var:e2> = <var:V> ^ <nat:2> /\ <var:e3> = <var:V> ^ <nat:3> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:e1> = <nat:1> * <var:V> /\ <var:e2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:e3> = <var:V> ^ <nat:3> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:e1> = <nat:1> * <var:V> /\ <var:e2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:e3> = <nat:3> * <var:V> ^ <nat:3> /\ <var:e0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:e1> = <nat:1> * <var:V> /\ <var:e2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:e0> = <nat:3> /\ <var:b> = <nat:3> * <var:V> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:e1> = <nat:1> * <var:V> /\ <var:e0> = <nat:3> /\ <var:b> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:e0> = <nat:3> /\ <var:b> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:V> /\ <var:b> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 