\begin{document} \begin{theorem} Let the following set of instructions in \emph{Imp} : \begin{verbatim} <var:m1> := <var:e> ; <var:m0> := <nat:8> ; <var:m1> := <var:m1> * <nat:9> ; <var:S> := <var:m1> <var:S> := <var:S> + <var:m0> \end{verbatim} Allow that we have $ <var:e> = <var:a> $ before interpreting the segment of code , it must be that $ <var:S> = <nat:9> \cdot <var:a> + <nat:8> $ after program finishes . \end{theorem} \begin{proof} Using standard Hoare techniques gives us : \begin{eqnarray} \{ <var:e> = <var:a> \} \\ <var:m1> := <var:e> ; \\ \{ <var:e> = <var:a> \land <var:m1> = <var:a> \} \\ <var:m0> := <nat:8> ; \\ \{ <var:e> = <var:a> \land <var:m1> = <var:a> \land <var:m0> = <nat:8> \} \\ <var:m1> := <var:m1> * <nat:9> ; \\ \{ <var:e> = <var:a> \land <var:m1> = <nat:9> * <var:a> \land <var:m0> = <nat:8> \} \\ <var:S> := <var:m1> \\ \{ <var:e> = <var:a> \land <var:m0> = <nat:8> \land <var:S> = <nat:9> * <var:a> \} \\ <var:S> := <var:S> + <var:m0> \\ \{ <var:e> = <var:a> \land <var:S> = <nat:9> * <var:a> + <nat:8> \} \end{eqnarray} Thus , our code segment has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:e> = <var:a> }} <var:m1> := <var:e> ; <var:m0> := <nat:8> ; <var:m1> := <var:m1> * <nat:9> ; <var:S> := <var:m1> <var:S> := <var:S> + <var:m0> {{ <var:S> = <nat:9> * <var:a> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:m1> = <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:m1> = <var:a> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:m1> = <nat:9> * <var:a> /\ <var:m0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:m0> = <nat:8> /\ <var:S> = <nat:9> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:S> = <nat:9> * <var:a> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 