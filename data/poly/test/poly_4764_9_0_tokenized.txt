\begin{document} \begin{definition} Consider the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:p0> := <nat:3> ; <var:p1> := <nat:2> ; <var:p1> := <var:p1> * <var:U> ; <var:p2> := <nat:7> ; <var:p2> := <var:p2> * <var:U> ; <var:p2> := <var:p2> * <var:U> ; <var:d> := <var:p2> ; <var:d> := <var:d> + <var:p1> ; <var:d> := <var:d> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> in \emph{Imp} . Allow taking whole numbers $ <var:R> $ that we have $ <var:U> = <var:R> $ ahead of running the code , then we have $ <var:d> = <nat:7> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:3> $ when code executes . \end{theorem} \begin{proof} The application of typical Hoare techniques produces : \begin{eqnarray} \{ <var:U> = <var:R> \} \\ <var:p0> := <nat:3> ; \\ \{ <var:U> = <var:R> \land <var:p0> = <nat:3> \} \\ <var:p1> := <nat:2> ; \\ \{ <var:U> = <var:R> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \} \\ <var:p1> := <var:p1> * <var:U> ; \\ \{ <var:U> = <var:R> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:R> \} \\ <var:p2> := <nat:7> ; \\ \{ <var:U> = <var:R> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:R> \land <var:p2> = <nat:7> \} \\ <var:p2> := <var:p2> * <var:U> ; \\ \{ <var:U> = <var:R> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:R> \land <var:p2> = <nat:7> \cdot <var:R> \} \\ <var:p2> := <var:p2> * <var:U> ; \\ \{ <var:U> = <var:R> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:R> \land <var:p2> = <nat:7> \cdot <var:R> ^ <nat:2> \} \\ <var:d> := <var:p2> ; \\ \{ <var:U> = <var:R> \land <var:p0> = <nat:3> \land <var:p1> = <nat:2> \cdot <var:R> \land <var:d> = <nat:7> \cdot <var:R> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:p1> ; \\ \{ <var:U> = <var:R> \land <var:p0> = <nat:3> \land <var:d> = <nat:7> \cdot <var:R> ^ <nat:2> + <nat:2> \cdot <var:R> \} \\ <var:d> := <var:d> + <var:p0> \\ \{ <var:U> = <var:R> \land <var:d> = <nat:7> \cdot <var:R> ^ <nat:2> + <nat:2> \cdot <var:R> + <nat:3> \} \end{eqnarray} Considering the preceding argument , this code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <def:poly> := <var:p0> := <nat:3> ; <var:p1> := <nat:2> ; <var:p1> := <var:p1> * <var:U> ; <var:p2> := <nat:7> ; <var:p2> := <var:p2> * <var:U> ; <var:p2> := <var:p2> * <var:U> ; <var:d> := <var:p2> ; <var:d> := <var:d> + <var:p1> ; <var:d> := <var:d> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:U> = <var:R> }} <def:poly> {{ <var:d> = <nat:7> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> * <var:R> /\ <var:p2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> * <var:R> /\ <var:p2> = <nat:7> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> * <var:R> /\ <var:p2> = <nat:7> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:p0> = <nat:3> /\ <var:p1> = <nat:2> * <var:R> /\ <var:d> = <nat:7> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:p0> = <nat:3> /\ <var:d> = <nat:7> * <var:R> ^ <nat:2> + <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:R> /\ <var:d> = <nat:7> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 