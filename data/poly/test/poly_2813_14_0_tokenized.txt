\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:6> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:F> ; <var:D2> := <nat:8> ; <var:D2> := <var:D2> * <var:F> ; <var:D2> := <var:D2> * <var:F> ; <var:D3> := <nat:9> ; <var:D3> := <var:D3> * <var:F> ; <var:D3> := <var:D3> * <var:F> ; <var:D3> := <var:D3> * <var:F> ; <var:R> := <var:D3> ; <var:R> := <var:R> + <var:D2> ; <var:R> := <var:R> + <var:D1> ; <var:R> := <var:R> + <var:D0> \end{verbatim} Assuming that $ <var:F> = <var:G> $ before running the code segment it must be that we have $ <var:R> = <nat:9> * <var:G> ^ <nat:3> + <nat:8> * <var:G> ^ <nat:2> + <nat:6> * <var:G> + <nat:6> $ when program is done . \end{theorem} \begin{proof} The method of proof for our list of commands can be seen by the below decorated list of instructions . \begin{eqnarray} \{ <var:F> = <var:G> \} \\ <var:D0> := <nat:6> ; \\ \{ <var:F> = <var:G> \land <var:D0> = <nat:6> \} \\ <var:D1> := <nat:6> ; \\ \{ <var:F> = <var:G> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \} \\ <var:D1> := <var:D1> * <var:F> ; \\ \{ <var:F> = <var:G> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \cdot <var:G> \} \\ <var:D2> := <nat:8> ; \\ \{ <var:F> = <var:G> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \cdot <var:G> \land <var:D2> = <nat:8> \} \\ <var:D2> := <var:D2> * <var:F> ; \\ \{ <var:F> = <var:G> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \cdot <var:G> \land <var:D2> = <nat:8> \cdot <var:G> \} \\ <var:D2> := <var:D2> * <var:F> ; \\ \{ <var:F> = <var:G> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \cdot <var:G> \land <var:D2> = <nat:8> \cdot <var:G> ^ <nat:2> \} \\ <var:D3> := <nat:9> ; \\ \{ <var:F> = <var:G> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \cdot <var:G> \land <var:D2> = <nat:8> \cdot <var:G> ^ <nat:2> \land <var:D3> = <nat:9> \} \\ <var:D3> := <var:D3> * <var:F> ; \\ \{ <var:F> = <var:G> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \cdot <var:G> \land <var:D2> = <nat:8> \cdot <var:G> ^ <nat:2> \land <var:D3> = <nat:9> \cdot <var:G> \} \\ <var:D3> := <var:D3> * <var:F> ; \\ \{ <var:F> = <var:G> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \cdot <var:G> \land <var:D2> = <nat:8> \cdot <var:G> ^ <nat:2> \land <var:D3> = <nat:9> \cdot <var:G> ^ <nat:2> \} \\ <var:D3> := <var:D3> * <var:F> ; \\ \{ <var:F> = <var:G> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \cdot <var:G> \land <var:D2> = <nat:8> \cdot <var:G> ^ <nat:2> \land <var:D3> = <nat:9> \cdot <var:G> ^ <nat:3> \} \\ <var:R> := <var:D3> ; \\ \{ <var:F> = <var:G> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \cdot <var:G> \land <var:D2> = <nat:8> \cdot <var:G> ^ <nat:2> \land <var:R> = <nat:9> \cdot <var:G> ^ <nat:3> \} \\ <var:R> := <var:R> + <var:D2> ; \\ \{ <var:F> = <var:G> \land <var:D0> = <nat:6> \land <var:D1> = <nat:6> \cdot <var:G> \land <var:R> = <nat:9> \cdot <var:G> ^ <nat:3> + <nat:8> \cdot <var:G> ^ <nat:2> \} \\ <var:R> := <var:R> + <var:D1> ; \\ \{ <var:F> = <var:G> \land <var:D0> = <nat:6> \land <var:R> = <nat:9> \cdot <var:G> ^ <nat:3> + <nat:8> \cdot <var:G> ^ <nat:2> + <nat:6> \cdot <var:G> \} \\ <var:R> := <var:R> + <var:D0> \\ \{ <var:F> = <var:G> \land <var:R> = <nat:9> \cdot <var:G> ^ <nat:3> + <nat:8> \cdot <var:G> ^ <nat:2> + <nat:6> \cdot <var:G> + <nat:6> \} \end{eqnarray} Using typical Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D1> : string := " <var:D1> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:F> = <var:G> }} <var:D0> := <nat:6> ; <var:D1> := <nat:6> ; <var:D1> := <var:D1> * <var:F> ; <var:D2> := <nat:8> ; <var:D2> := <var:D2> * <var:F> ; <var:D2> := <var:D2> * <var:F> ; <var:D3> := <nat:9> ; <var:D3> := <var:D3> * <var:F> ; <var:D3> := <var:D3> * <var:F> ; <var:D3> := <var:D3> * <var:F> ; <var:R> := <var:D3> ; <var:R> := <var:R> + <var:D2> ; <var:R> := <var:R> + <var:D1> ; <var:R> := <var:R> + <var:D0> {{ <var:R> = <nat:9> * <var:G> ^ <nat:3> + <nat:8> * <var:G> ^ <nat:2> + <nat:6> * <var:G> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:D0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:G> /\ <var:D2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:G> /\ <var:D2> = <nat:8> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:G> /\ <var:D2> = <nat:8> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:G> /\ <var:D2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:D3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:G> /\ <var:D2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:D3> = <nat:9> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:G> /\ <var:D2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:D3> = <nat:9> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:G> /\ <var:D2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:D3> = <nat:9> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:G> /\ <var:D2> = <nat:8> * <var:G> ^ <nat:2> /\ <var:R> = <nat:9> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:D0> = <nat:6> /\ <var:D1> = <nat:6> * <var:G> /\ <var:R> = <nat:9> * <var:G> ^ <nat:3> + <nat:8> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:D0> = <nat:6> /\ <var:R> = <nat:9> * <var:G> ^ <nat:3> + <nat:8> * <var:G> ^ <nat:2> + <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:G> /\ <var:R> = <nat:9> * <var:G> ^ <nat:3> + <nat:8> * <var:G> ^ <nat:2> + <nat:6> * <var:G> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 