\begin{document} \begin{theorem} Consider the following series of commands in \emph{Imp} such that \begin{verbatim} <var:H> := <nat:4> ; <var:H> := <nat:1> + <var:H> * <var:N> ; <var:H> := <nat:4> + <var:H> * <var:N> ; <var:H> := <nat:4> + <var:H> * <var:N> ; <var:H> := <nat:4> + <var:H> * <var:N> ; <var:H> := <nat:1> + <var:H> * <var:N> ; <var:H> := <nat:1> + <var:H> * <var:N> ; <var:H> := <nat:1> + <var:H> * <var:N> ; <var:H> := <nat:3> + <var:H> * <var:N> ; <var:H> := <nat:4> + <var:H> * <var:N> ; <var:H> := <var:H> * <var:N> ; <var:H> := <nat:4> + <var:H> * <var:N> \end{verbatim} Allowing that $ <var:N> = <var:f> $ ahead of running this set of instructions , then we have $ <var:H> = <nat:4> \cdot <var:f> ^ <nat:11> + <nat:1> \cdot <var:f> ^ <nat:10> + <nat:4> \cdot <var:f> ^ <nat:9> + <nat:4> \cdot <var:f> ^ <nat:8> + <nat:4> \cdot <var:f> ^ <nat:7> + <nat:1> \cdot <var:f> ^ <nat:6> + <nat:1> \cdot <var:f> ^ <nat:5> + <nat:1> \cdot <var:f> ^ <nat:4> + <nat:3> \cdot <var:f> ^ <nat:3> + <nat:4> \cdot <var:f> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of our code can be demonstrated using usual Hoare techniques . Jumping to the subsequent statements in our list of instructions , we have \verb | { <var:N> = <var:f> } <var:H> := <nat:4> { <var:N> = <var:f> \land <var:H> = <nat:4> } | , \verb | { <var:N> = <var:f> \land <var:H> = <nat:4> } <var:H> := <nat:1> + <var:H> * <var:N> { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> + <nat:1> } | , \verb | { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> + <nat:1> } <var:H> := <nat:4> + <var:H> * <var:N> { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:4> } | , \verb | { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:4> } <var:H> := <nat:4> + <var:H> * <var:N> { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:4> } | , \verb | { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:4> } <var:H> := <nat:4> + <var:H> * <var:N> { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:4> + <nat:1> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:4> } | , \verb | { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:4> + <nat:1> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:4> } <var:H> := <nat:1> + <var:H> * <var:N> { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:5> + <nat:1> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:1> } | , \verb | { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:5> + <nat:1> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:1> } <var:H> := <nat:1> + <var:H> * <var:N> { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:6> + <nat:1> \times <var:f> ^ <nat:5> + <nat:4> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:1> } | , \verb | { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:6> + <nat:1> \times <var:f> ^ <nat:5> + <nat:4> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:4> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:1> } <var:H> := <nat:1> + <var:H> * <var:N> { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:7> + <nat:1> \times <var:f> ^ <nat:6> + <nat:4> \times <var:f> ^ <nat:5> + <nat:4> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:1> } | and \verb | { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:7> + <nat:1> \times <var:f> ^ <nat:6> + <nat:4> \times <var:f> ^ <nat:5> + <nat:4> \times <var:f> ^ <nat:4> + <nat:4> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:1> } <var:H> := <nat:3> + <var:H> * <var:N> { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:8> + <nat:1> \times <var:f> ^ <nat:7> + <nat:4> \times <var:f> ^ <nat:6> + <nat:4> \times <var:f> ^ <nat:5> + <nat:4> \times <var:f> ^ <nat:4> + <nat:1> \times <var:f> ^ <nat:3> + <nat:1> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:3> } | . Going to the next step , we have \verb | { <var:N> = <var:f> } <var:H> := <nat:4> { <var:N> = <var:f> \land <var:H> = <nat:4> } | , \verb | { <var:N> = <var:f> \land <var:H> = <nat:4> } <var:H> := <nat:1> + <var:H> * <var:N> { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> + <nat:1> } | and \verb | { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> + <nat:1> } <var:H> := <nat:4> + <var:H> * <var:N> { <var:N> = <var:f> \land <var:H> = <nat:4> \times <var:f> ^ <nat:2> + <nat:1> \times <var:f> + <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:N> = <var:f> }} <var:H> := <nat:4> ; <var:H> := <nat:1> + <var:H> * <var:N> ; <var:H> := <nat:4> + <var:H> * <var:N> ; <var:H> := <nat:4> + <var:H> * <var:N> ; <var:H> := <nat:4> + <var:H> * <var:N> ; <var:H> := <nat:1> + <var:H> * <var:N> ; <var:H> := <nat:1> + <var:H> * <var:N> ; <var:H> := <nat:1> + <var:H> * <var:N> ; <var:H> := <nat:3> + <var:H> * <var:N> ; <var:H> := <nat:4> + <var:H> * <var:N> ; <var:H> := <var:H> * <var:N> ; <var:H> := <nat:4> + <var:H> * <var:N> {{ <var:H> = <nat:4> * <var:f> ^ <nat:11> + <nat:1> * <var:f> ^ <nat:10> + <nat:4> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:4> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:H> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:H> = <nat:4> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:H> = <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:H> = <nat:4> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:H> = <nat:4> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:H> = <nat:4> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:H> = <nat:4> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:H> = <nat:4> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:4> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:H> = <nat:4> * <var:f> ^ <nat:8> + <nat:1> * <var:f> ^ <nat:7> + <nat:4> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:4> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:1> * <var:f> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:H> = <nat:4> * <var:f> ^ <nat:9> + <nat:1> * <var:f> ^ <nat:8> + <nat:4> * <var:f> ^ <nat:7> + <nat:4> * <var:f> ^ <nat:6> + <nat:4> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:1> * <var:f> ^ <nat:2> + <nat:3> * <var:f> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:H> = <nat:4> * <var:f> ^ <nat:10> + <nat:1> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:4> * <var:f> ^ <nat:7> + <nat:4> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:1> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:H> = <nat:4> * <var:f> ^ <nat:11> + <nat:1> * <var:f> ^ <nat:10> + <nat:4> * <var:f> ^ <nat:9> + <nat:4> * <var:f> ^ <nat:8> + <nat:4> * <var:f> ^ <nat:7> + <nat:1> * <var:f> ^ <nat:6> + <nat:1> * <var:f> ^ <nat:5> + <nat:1> * <var:f> ^ <nat:4> + <nat:3> * <var:f> ^ <nat:3> + <nat:4> * <var:f> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 