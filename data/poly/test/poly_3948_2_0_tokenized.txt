\begin{document} \begin{definition} We define a segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:M0> := <nat:4> ; <var:N> := <var:M0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:b> = <var:Q> $ before the evaluation of the set of commands then we have $ <var:N> = <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be done with Hoare reasoning . Advancing , we have \[ \begin{tabular} {rcl} \{ <var:b> = <var:Q> \} & <var:M0> := <nat:4> & \{ <var:b> = <var:Q> \land <var:M0> = <nat:4> \} \end{tabular} Moving forward to the following command in the series of commands , \[ \begin{tabular} {rcl} \{ <var:b> = <var:Q> \} & <var:M0> := <nat:4> & \{ <var:b> = <var:Q> \land <var:M0> = <nat:4> \} \end{tabular} This is deduced through the binding rule found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <def:poly> := <var:M0> := <nat:4> ; <var:N> := <var:M0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:b> = <var:Q> }} <def:poly> {{ <var:N> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:Q> /\ <var:N> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 