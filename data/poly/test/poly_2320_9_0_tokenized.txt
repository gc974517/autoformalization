\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:W0> := <nat:2> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:O> ; <var:W2> := <nat:6> ; <var:W2> := <var:W2> * <var:O> ; <var:W2> := <var:W2> * <var:O> ; <var:D> := <var:W2> ; <var:D> := <var:D> + <var:W1> ; <var:D> := <var:D> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Given that we have $ <var:O> = <var:R> $ prior to evaluating the code segment , it follows that $ <var:D> = <nat:6> \times <var:R> ^ <nat:2> + <nat:3> \times <var:R> + <nat:2> $ . \end{theorem} \begin{proof} The argument for the series of commands is evident with Hoare logic . Taking a look at the proceeding bits of codecontained in our program , \[ \begin{tabular} {rcl} \{ <var:O> = <var:R> \} & <var:W0> := <nat:2> & \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \} \\ \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \} & <var:W1> := <nat:3> & \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \land <var:W1> = <nat:3> \} \end{tabular} Advancing , we see \[ \begin{tabular} {rcl} \{ <var:O> = <var:R> \} & <var:W0> := <nat:2> & \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \} \\ \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \} & <var:W1> := <nat:3> & \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \land <var:W1> = <nat:3> \} \\ \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \land <var:W1> = <nat:3> \} & <var:W1> := <var:W1> * <var:O> & \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \land <var:W1> = <nat:3> * <var:R> \} \\ \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \land <var:W1> = <nat:3> * <var:R> \} & <var:W2> := <nat:6> & \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \land <var:W1> = <nat:3> * <var:R> \land <var:W2> = <nat:6> \} \end{tabular} Considering the next bits of codecontained in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:O> = <var:R> \} & <var:W0> := <nat:2> & \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \} \\ \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \} & <var:W1> := <nat:3> & \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \land <var:W1> = <nat:3> \} \end{tabular} This is rigorously given by the environment update scheme given in Hoare reasoning . Going forward , we have \[ \begin{tabular} {rcl} \{ <var:O> = <var:R> \} & <var:W0> := <nat:2> & \{ <var:O> = <var:R> \land <var:W0> = <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <def:poly> := <var:W0> := <nat:2> ; <var:W1> := <nat:3> ; <var:W1> := <var:W1> * <var:O> ; <var:W2> := <nat:6> ; <var:W2> := <var:W2> * <var:O> ; <var:W2> := <var:W2> * <var:O> ; <var:D> := <var:W2> ; <var:D> := <var:D> + <var:W1> ; <var:D> := <var:D> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:O> = <var:R> }} <def:poly> {{ <var:D> = <nat:6> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:W0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:3> * <var:R> /\ <var:W2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:3> * <var:R> /\ <var:W2> = <nat:6> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:3> * <var:R> /\ <var:W2> = <nat:6> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:W0> = <nat:2> /\ <var:W1> = <nat:3> * <var:R> /\ <var:D> = <nat:6> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:W0> = <nat:2> /\ <var:D> = <nat:6> * <var:R> ^ <nat:2> + <nat:3> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:R> /\ <var:D> = <nat:6> * <var:R> ^ <nat:2> + <nat:3> * <var:R> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 