\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:d1> := <var:z> ; <var:d2> := <var:d1> * <var:z> ; <var:d3> := <var:d2> * <var:z> ; <var:d4> := <var:d3> * <var:z> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:7> ; <var:d2> := <var:d2> * <nat:1> ; <var:d3> := <var:d3> * <nat:5> ; <var:d4> := <var:d4> * <nat:2> ; <var:r> := <var:d4> <var:r> := <var:r> + <var:d3> <var:r> := <var:r> + <var:d2> <var:r> := <var:r> + <var:d1> <var:r> := <var:r> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Given ( assuming some $ <var:L> \in \mathbb{Z}^+ $ ) that we have $ <var:z> = <var:L> $ prior to interpreting the code segment then we see $ <var:r> = <nat:2> * <var:L> ^ <nat:4> + <nat:5> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:7> * <var:L> + <nat:8> $ once segment of code has executed . \end{theorem} \begin{proof} The course of logic for our series of commands is given through Hoare logic . Going forward , \begin{verbatim} { <var:z> = <var:L> } <var:d1> := <var:z> { <var:z> = <var:L> \land <var:d1> = <var:L> } { <var:z> = <var:L> \land <var:d1> = <var:L> } <var:d2> := <var:d1> * <var:z> { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> } { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> } <var:d3> := <var:d2> * <var:z> { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> } { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> } <var:d4> := <var:d3> * <var:z> { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> \land <var:d4> = <var:L> ^ <nat:4> } { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> \land <var:d4> = <var:L> ^ <nat:4> } <var:d0> := <nat:8> { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> \land <var:d4> = <var:L> ^ <nat:4> \land <var:d0> = <nat:8> } \end{verbatim} Paying attention to the proceeding steps seen in our set of commands , we have \begin{verbatim} { <var:z> = <var:L> } <var:d1> := <var:z> { <var:z> = <var:L> \land <var:d1> = <var:L> } { <var:z> = <var:L> \land <var:d1> = <var:L> } <var:d2> := <var:d1> * <var:z> { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> } \end{verbatim} Shifting focus toward the upcoming statements seen in our program , we see \begin{verbatim} { <var:z> = <var:L> } <var:d1> := <var:z> { <var:z> = <var:L> \land <var:d1> = <var:L> } { <var:z> = <var:L> \land <var:d1> = <var:L> } <var:d2> := <var:d1> * <var:z> { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> } { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> } <var:d3> := <var:d2> * <var:z> { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> } { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> } <var:d4> := <var:d3> * <var:z> { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> \land <var:d4> = <var:L> ^ <nat:4> } { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> \land <var:d4> = <var:L> ^ <nat:4> } <var:d0> := <nat:8> { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> \land <var:d4> = <var:L> ^ <nat:4> \land <var:d0> = <nat:8> } { <var:z> = <var:L> \land <var:d1> = <var:L> \land <var:d2> = <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> \land <var:d4> = <var:L> ^ <nat:4> \land <var:d0> = <nat:8> } <var:d1> := <var:d1> * <nat:7> { <var:z> = <var:L> \land <var:d1> = <nat:7> * <var:L> \land <var:d2> = <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> \land <var:d4> = <var:L> ^ <nat:4> \land <var:d0> = <nat:8> } { <var:z> = <var:L> \land <var:d1> = <nat:7> * <var:L> \land <var:d2> = <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> \land <var:d4> = <var:L> ^ <nat:4> \land <var:d0> = <nat:8> } <var:d2> := <var:d2> * <nat:1> { <var:z> = <var:L> \land <var:d1> = <nat:7> * <var:L> \land <var:d2> = <nat:1> * <var:L> ^ <nat:2> \land <var:d3> = <var:L> ^ <nat:3> \land <var:d4> = <var:L> ^ <nat:4> \land <var:d0> = <nat:8> } \end{verbatim} This is given using the environment update scheme of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <var:d4> : string := " <var:d4> " . Definition <def:poly> := <var:d1> := <var:z> ; <var:d2> := <var:d1> * <var:z> ; <var:d3> := <var:d2> * <var:z> ; <var:d4> := <var:d3> * <var:z> ; <var:d0> := <nat:8> ; <var:d1> := <var:d1> * <nat:7> ; <var:d2> := <var:d2> * <nat:1> ; <var:d3> := <var:d3> * <nat:5> ; <var:d4> := <var:d4> * <nat:2> ; <var:r> := <var:d4> <var:r> := <var:r> + <var:d3> <var:r> := <var:r> + <var:d2> <var:r> := <var:r> + <var:d1> <var:r> := <var:r> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:z> = <var:L> }} <def:poly> {{ <var:r> = <nat:2> * <var:L> ^ <nat:4> + <nat:5> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:7> * <var:L> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d1> = <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d1> = <var:L> /\ <var:d2> = <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d1> = <var:L> /\ <var:d2> = <var:L> ^ <nat:2> /\ <var:d3> = <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d1> = <var:L> /\ <var:d2> = <var:L> ^ <nat:2> /\ <var:d3> = <var:L> ^ <nat:3> /\ <var:d4> = <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d1> = <var:L> /\ <var:d2> = <var:L> ^ <nat:2> /\ <var:d3> = <var:L> ^ <nat:3> /\ <var:d4> = <var:L> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d1> = <nat:7> * <var:L> /\ <var:d2> = <var:L> ^ <nat:2> /\ <var:d3> = <var:L> ^ <nat:3> /\ <var:d4> = <var:L> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d1> = <nat:7> * <var:L> /\ <var:d2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:d3> = <var:L> ^ <nat:3> /\ <var:d4> = <var:L> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d1> = <nat:7> * <var:L> /\ <var:d2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:d3> = <nat:5> * <var:L> ^ <nat:3> /\ <var:d4> = <var:L> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d1> = <nat:7> * <var:L> /\ <var:d2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:d3> = <nat:5> * <var:L> ^ <nat:3> /\ <var:d4> = <nat:2> * <var:L> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d1> = <nat:7> * <var:L> /\ <var:d2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:d3> = <nat:5> * <var:L> ^ <nat:3> /\ <var:d0> = <nat:8> /\ <var:r> = <nat:2> * <var:L> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d1> = <nat:7> * <var:L> /\ <var:d2> = <nat:1> * <var:L> ^ <nat:2> /\ <var:d0> = <nat:8> /\ <var:r> = <nat:2> * <var:L> ^ <nat:4> + <nat:5> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d1> = <nat:7> * <var:L> /\ <var:d0> = <nat:8> /\ <var:r> = <nat:2> * <var:L> ^ <nat:4> + <nat:5> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:d0> = <nat:8> /\ <var:r> = <nat:2> * <var:L> ^ <nat:4> + <nat:5> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:7> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:r> = <nat:2> * <var:L> ^ <nat:4> + <nat:5> * <var:L> ^ <nat:3> + <nat:1> * <var:L> ^ <nat:2> + <nat:7> * <var:L> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 