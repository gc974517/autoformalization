\begin{document} \begin{theorem} We define the following list of commands as follows \begin{verbatim} <var:v1> := <var:J> ; <var:v2> := <var:v1> * <var:J> ; <var:v3> := <var:v2> * <var:J> ; <var:v4> := <var:v3> * <var:J> ; <var:v0> := <nat:6> ; <var:v2> := <var:v2> * <nat:8> ; <var:v3> := <var:v3> * <nat:6> ; <var:v4> := <var:v4> * <nat:8> ; <var:H> := <var:v4> <var:H> := <var:H> + <var:v3> <var:H> := <var:H> + <var:v2> <var:H> := <var:H> + <var:v0> \end{verbatim} Given that we have $ <var:J> = <var:s> $ --- with some positive integers $ <var:s> $ --- prior to the evaluation of our segment of code it holds that $ <var:H> = <nat:8> \times <var:s> ^ <nat:4> + <nat:6> \times <var:s> ^ <nat:3> + <nat:8> \times <var:s> ^ <nat:2> + <nat:6> $ . \end{theorem} \begin{proof} The method of proof for our set of instructions can be done by usual Hoare logic . Now , \begin{verbatim} { <var:J> = <var:s> } <var:v1> := <var:J> { <var:J> = <var:s> \land <var:v1> = <var:s> } { <var:J> = <var:s> \land <var:v1> = <var:s> } <var:v2> := <var:v1> * <var:J> { <var:J> = <var:s> \land <var:v1> = <var:s> \land <var:v2> = <var:s> ^ <nat:2> } { <var:J> = <var:s> \land <var:v1> = <var:s> \land <var:v2> = <var:s> ^ <nat:2> } <var:v3> := <var:v2> * <var:J> { <var:J> = <var:s> \land <var:v1> = <var:s> \land <var:v2> = <var:s> ^ <nat:2> \land <var:v3> = <var:s> ^ <nat:3> } { <var:J> = <var:s> \land <var:v1> = <var:s> \land <var:v2> = <var:s> ^ <nat:2> \land <var:v3> = <var:s> ^ <nat:3> } <var:v4> := <var:v3> * <var:J> { <var:J> = <var:s> \land <var:v1> = <var:s> \land <var:v2> = <var:s> ^ <nat:2> \land <var:v3> = <var:s> ^ <nat:3> \land <var:v4> = <var:s> ^ <nat:4> } \end{verbatim} This is known to be sound by the variable binding law found in usual Hoare logic . Taking a look at the proceeding lines of codefound in the series of instructions , we see \begin{verbatim} { <var:J> = <var:s> } <var:v1> := <var:J> { <var:J> = <var:s> \land <var:v1> = <var:s> } { <var:J> = <var:s> \land <var:v1> = <var:s> } <var:v2> := <var:v1> * <var:J> { <var:J> = <var:s> \land <var:v1> = <var:s> \land <var:v2> = <var:s> ^ <nat:2> } { <var:J> = <var:s> \land <var:v1> = <var:s> \land <var:v2> = <var:s> ^ <nat:2> } <var:v3> := <var:v2> * <var:J> { <var:J> = <var:s> \land <var:v1> = <var:s> \land <var:v2> = <var:s> ^ <nat:2> \land <var:v3> = <var:s> ^ <nat:3> } { <var:J> = <var:s> \land <var:v1> = <var:s> \land <var:v2> = <var:s> ^ <nat:2> \land <var:v3> = <var:s> ^ <nat:3> } <var:v4> := <var:v3> * <var:J> { <var:J> = <var:s> \land <var:v1> = <var:s> \land <var:v2> = <var:s> ^ <nat:2> \land <var:v3> = <var:s> ^ <nat:3> \land <var:v4> = <var:s> ^ <nat:4> } { <var:J> = <var:s> \land <var:v1> = <var:s> \land <var:v2> = <var:s> ^ <nat:2> \land <var:v3> = <var:s> ^ <nat:3> \land <var:v4> = <var:s> ^ <nat:4> } <var:v0> := <nat:6> { <var:J> = <var:s> \land <var:v1> = <var:s> \land <var:v2> = <var:s> ^ <nat:2> \land <var:v3> = <var:s> ^ <nat:3> \land <var:v4> = <var:s> ^ <nat:4> \land <var:v0> = <nat:6> } \end{verbatim} Advancing to the next step , \begin{verbatim} { <var:J> = <var:s> } <var:v1> := <var:J> { <var:J> = <var:s> \land <var:v1> = <var:s> } \end{verbatim} This is guaranteed using the variable update scheme given by typical Hoare reasoning . Taking another step toward the upcoming piece of code found in the series of commands , we have \begin{verbatim} { <var:J> = <var:s> } <var:v1> := <var:J> { <var:J> = <var:s> \land <var:v1> = <var:s> } \end{verbatim} Moving forward to the proceeding statement in our series of commands , we have \begin{verbatim} { <var:J> = <var:s> } <var:v1> := <var:J> { <var:J> = <var:s> \land <var:v1> = <var:s> } \end{verbatim} This is shown with the variable assignmet law of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <var:v4> : string := " <var:v4> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:J> = <var:s> }} <var:v1> := <var:J> ; <var:v2> := <var:v1> * <var:J> ; <var:v3> := <var:v2> * <var:J> ; <var:v4> := <var:v3> * <var:J> ; <var:v0> := <nat:6> ; <var:v2> := <var:v2> * <nat:8> ; <var:v3> := <var:v3> * <nat:6> ; <var:v4> := <var:v4> * <nat:8> ; <var:H> := <var:v4> <var:H> := <var:H> + <var:v3> <var:H> := <var:H> + <var:v2> <var:H> := <var:H> + <var:v0> {{ <var:H> = <nat:8> * <var:s> ^ <nat:4> + <nat:6> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v1> = <var:s> /\ <var:v2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v1> = <var:s> /\ <var:v2> = <var:s> ^ <nat:2> /\ <var:v3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v1> = <var:s> /\ <var:v2> = <var:s> ^ <nat:2> /\ <var:v3> = <var:s> ^ <nat:3> /\ <var:v4> = <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v1> = <var:s> /\ <var:v2> = <var:s> ^ <nat:2> /\ <var:v3> = <var:s> ^ <nat:3> /\ <var:v4> = <var:s> ^ <nat:4> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v1> = <var:s> /\ <var:v2> = <nat:8> * <var:s> ^ <nat:2> /\ <var:v3> = <var:s> ^ <nat:3> /\ <var:v4> = <var:s> ^ <nat:4> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v1> = <var:s> /\ <var:v2> = <nat:8> * <var:s> ^ <nat:2> /\ <var:v3> = <nat:6> * <var:s> ^ <nat:3> /\ <var:v4> = <var:s> ^ <nat:4> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v1> = <var:s> /\ <var:v2> = <nat:8> * <var:s> ^ <nat:2> /\ <var:v3> = <nat:6> * <var:s> ^ <nat:3> /\ <var:v4> = <nat:8> * <var:s> ^ <nat:4> /\ <var:v0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v1> = <var:s> /\ <var:v2> = <nat:8> * <var:s> ^ <nat:2> /\ <var:v3> = <nat:6> * <var:s> ^ <nat:3> /\ <var:v0> = <nat:6> /\ <var:H> = <nat:8> * <var:s> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v1> = <var:s> /\ <var:v2> = <nat:8> * <var:s> ^ <nat:2> /\ <var:v0> = <nat:6> /\ <var:H> = <nat:8> * <var:s> ^ <nat:4> + <nat:6> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:v1> = <var:s> /\ <var:v0> = <nat:6> /\ <var:H> = <nat:8> * <var:s> ^ <nat:4> + <nat:6> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:s> /\ <var:H> = <nat:8> * <var:s> ^ <nat:4> + <nat:6> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ^ <nat:2> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 