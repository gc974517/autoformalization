\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:p1> := <var:k> ; <var:p2> := <var:p1> * <var:k> ; <var:p3> := <var:p2> * <var:k> ; <var:p0> := <nat:5> ; <var:p1> := <var:p1> * <nat:5> ; <var:p2> := <var:p2> * <nat:2> ; <var:p3> := <var:p3> * <nat:9> ; <var:X> := <var:p3> <var:X> := <var:X> + <var:p2> <var:X> := <var:X> + <var:p1> <var:X> := <var:X> + <var:p0> \end{verbatim} \end{definition} \begin{theorem} Assuming ( for any $ <var:C> $ ) that $ <var:k> = <var:C> $ prior to interpreting the code segment it must be that we have $ <var:X> = <nat:9> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:5> \cdot <var:C> + <nat:5> $ once series of instructions executes . \end{theorem} \begin{proof} Using typical Hoare reasoning produces : \begin{eqnarray} \{ <var:k> = <var:C> \} \\ <var:p1> := <var:k> ; \\ \{ <var:k> = <var:C> \land <var:p1> = <var:C> \} \\ <var:p2> := <var:p1> * <var:k> ; \\ \{ <var:k> = <var:C> \land <var:p1> = <var:C> \land <var:p2> = <var:C> ^ <nat:2> \} \\ <var:p3> := <var:p2> * <var:k> ; \\ \{ <var:k> = <var:C> \land <var:p1> = <var:C> \land <var:p2> = <var:C> ^ <nat:2> \land <var:p3> = <var:C> ^ <nat:3> \} \\ <var:p0> := <nat:5> ; \\ \{ <var:k> = <var:C> \land <var:p1> = <var:C> \land <var:p2> = <var:C> ^ <nat:2> \land <var:p3> = <var:C> ^ <nat:3> \land <var:p0> = <nat:5> \} \\ <var:p1> := <var:p1> * <nat:5> ; \\ \{ <var:k> = <var:C> \land <var:p1> = <nat:5> \cdot <var:C> \land <var:p2> = <var:C> ^ <nat:2> \land <var:p3> = <var:C> ^ <nat:3> \land <var:p0> = <nat:5> \} \\ <var:p2> := <var:p2> * <nat:2> ; \\ \{ <var:k> = <var:C> \land <var:p1> = <nat:5> \cdot <var:C> \land <var:p2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:p3> = <var:C> ^ <nat:3> \land <var:p0> = <nat:5> \} \\ <var:p3> := <var:p3> * <nat:9> ; \\ \{ <var:k> = <var:C> \land <var:p1> = <nat:5> \cdot <var:C> \land <var:p2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:p3> = <nat:9> \cdot <var:C> ^ <nat:3> \land <var:p0> = <nat:5> \} \\ <var:X> := <var:p3> \\ \{ <var:k> = <var:C> \land <var:p1> = <nat:5> \cdot <var:C> \land <var:p2> = <nat:2> \cdot <var:C> ^ <nat:2> \land <var:p0> = <nat:5> \land <var:X> = <nat:9> \cdot <var:C> ^ <nat:3> \} \\ <var:X> := <var:X> + <var:p2> \\ \{ <var:k> = <var:C> \land <var:p1> = <nat:5> \cdot <var:C> \land <var:p0> = <nat:5> \land <var:X> = <nat:9> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> \} \\ <var:X> := <var:X> + <var:p1> \\ \{ <var:k> = <var:C> \land <var:p0> = <nat:5> \land <var:X> = <nat:9> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:5> \cdot <var:C> \} \\ <var:X> := <var:X> + <var:p0> \\ \{ <var:k> = <var:C> \land <var:X> = <nat:9> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:5> \cdot <var:C> + <nat:5> \} \end{eqnarray} Allowing evaluating the segment of code yields : \begin{eqnarray} \end{eqnarray} Thus , the code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <def:poly> := <var:p1> := <var:k> ; <var:p2> := <var:p1> * <var:k> ; <var:p3> := <var:p2> * <var:k> ; <var:p0> := <nat:5> ; <var:p1> := <var:p1> * <nat:5> ; <var:p2> := <var:p2> * <nat:2> ; <var:p3> := <var:p3> * <nat:9> ; <var:X> := <var:p3> <var:X> := <var:X> + <var:p2> <var:X> := <var:X> + <var:p1> <var:X> := <var:X> + <var:p0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:k> = <var:C> }} <def:poly> {{ <var:X> = <nat:9> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:5> * <var:C> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:p1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:p1> = <var:C> /\ <var:p2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:p1> = <var:C> /\ <var:p2> = <var:C> ^ <nat:2> /\ <var:p3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:p1> = <var:C> /\ <var:p2> = <var:C> ^ <nat:2> /\ <var:p3> = <var:C> ^ <nat:3> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:p1> = <nat:5> * <var:C> /\ <var:p2> = <var:C> ^ <nat:2> /\ <var:p3> = <var:C> ^ <nat:3> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:p1> = <nat:5> * <var:C> /\ <var:p2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:p3> = <var:C> ^ <nat:3> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:p1> = <nat:5> * <var:C> /\ <var:p2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:p3> = <nat:9> * <var:C> ^ <nat:3> /\ <var:p0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:p1> = <nat:5> * <var:C> /\ <var:p2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:p0> = <nat:5> /\ <var:X> = <nat:9> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:p1> = <nat:5> * <var:C> /\ <var:p0> = <nat:5> /\ <var:X> = <nat:9> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:p0> = <nat:5> /\ <var:X> = <nat:9> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:5> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:C> /\ <var:X> = <nat:9> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:5> * <var:C> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 