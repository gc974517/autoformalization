\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q> := <nat:4> ; <var:q> := <nat:1> + <var:q> * <var:x> ; <var:q> := <nat:1> + <var:q> * <var:x> ; <var:q> := <nat:4> + <var:q> * <var:x> ; <var:q> := <nat:1> + <var:q> * <var:x> ; <var:q> := <nat:3> + <var:q> * <var:x> ; <var:q> := <nat:3> + <var:q> * <var:x> ; <var:q> := <nat:4> + <var:q> * <var:x> \end{verbatim} \end{definition} \begin{theorem} Take a series of commands <def:poly> . Given --- for any natural numbers $ <var:F> $ --- that we have $ <var:x> = <var:F> $ ahead of evaluating our list of commands it holds that $ <var:q> = <nat:4> \times <var:F> ^ <nat:7> + <nat:1> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:5> + <nat:4> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:3> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> + <nat:4> $ . \end{theorem} \begin{proof} The proof of the set of instructions is shown with standard Hoare logic . Taking a look at the subsequent piece of code in our set of instructions , the assignment code \verb | <var:q> := <nat:4> ; | . This statement transfers the precondition $ \{ <var:x> = <var:F> \} $ into the postcondition $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \} $ . This is sound with the assignment law obtained from usual Hoare logic . Immediately following , the binding code \verb | <var:q> := <nat:1> + <var:q> * <var:x> ; | . This command advances the condition $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \} $ toward $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \cdot <var:F> + <nat:1> \} $ . Taking another step toward the subsequent step contained in our segment of code , we have the environment update statement assigning $ <nat:1> + <var:q> * <var:x> $ into $ <var:q>$ . This transfers the precondition $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \cdot <var:F> + <nat:1> \} $ toward the postcondition $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:1> \} $ . Moving forward to the subsequent bit of code in the list of commands , we see the code assigning $ <nat:4> + <var:q> * <var:x> $ toward $ <var:q>$ . This line takes the precondition $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:1> \} $ into $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:4> \} $ . Moving on to the subsequent bit of code in our program , the assignment statement yielding $ <nat:1> + <var:q> * <var:x> $ to $ <var:q>$ . This takes $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:4> \} $ as $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \cdot <var:F> ^ <nat:4> + <nat:1> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> ^ <nat:2> + <nat:4> \cdot <var:F> + <nat:1> \} $ . Stepping through , we have the binding command assigning $ <nat:3> + <var:q> * <var:x> $ to $ <var:q>$ . This command redefines $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \cdot <var:F> ^ <nat:4> + <nat:1> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> ^ <nat:2> + <nat:4> \cdot <var:F> + <nat:1> \} $ into $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \cdot <var:F> ^ <nat:5> + <nat:1> \cdot <var:F> ^ <nat:4> + <nat:1> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:3> \} $ . Focusing on the next line of code seen in our segment of code , we have the variable binding line \verb | <var:q> := <nat:3> + <var:q> * <var:x> ; | . This redefines $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \cdot <var:F> ^ <nat:5> + <nat:1> \cdot <var:F> ^ <nat:4> + <nat:1> \cdot <var:F> ^ <nat:3> + <nat:4> \cdot <var:F> ^ <nat:2> + <nat:1> \cdot <var:F> + <nat:3> \} $ to the condition $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \cdot <var:F> ^ <nat:6> + <nat:1> \cdot <var:F> ^ <nat:5> + <nat:1> \cdot <var:F> ^ <nat:4> + <nat:4> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> ^ <nat:2> + <nat:3> \cdot <var:F> + <nat:3> \} $ . Stepping forward , we have the environment update line letting $ <nat:4> + <var:q> * <var:x$ into $ <var:q>$ . This redefines the condition $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \cdot <var:F> ^ <nat:6> + <nat:1> \cdot <var:F> ^ <nat:5> + <nat:1> \cdot <var:F> ^ <nat:4> + <nat:4> \cdot <var:F> ^ <nat:3> + <nat:1> \cdot <var:F> ^ <nat:2> + <nat:3> \cdot <var:F> + <nat:3> \} $ as the postcondition $ \{ <var:x> = <var:F> \land <var:q> = <nat:4> \cdot <var:F> ^ <nat:7> + <nat:1> \cdot <var:F> ^ <nat:6> + <nat:1> \cdot <var:F> ^ <nat:5> + <nat:4> \cdot <var:F> ^ <nat:4> + <nat:1> \cdot <var:F> ^ <nat:3> + <nat:3> \cdot <var:F> ^ <nat:2> + <nat:3> \cdot <var:F> + <nat:4> \} $ . This is shown to be logically sound with the assignment law defined in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:4> ; <var:q> := <nat:1> + <var:q> * <var:x> ; <var:q> := <nat:1> + <var:q> * <var:x> ; <var:q> := <nat:4> + <var:q> * <var:x> ; <var:q> := <nat:1> + <var:q> * <var:x> ; <var:q> := <nat:3> + <var:q> * <var:x> ; <var:q> := <nat:3> + <var:q> * <var:x> ; <var:q> := <nat:4> + <var:q> * <var:x> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:x> = <var:F> }} <def:poly> {{ <var:q> = <nat:4> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:q> = <nat:4> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:q> = <nat:4> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:q> = <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:q> = <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:q> = <nat:4> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:4> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:q> = <nat:4> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:4> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:F> /\ <var:q> = <nat:4> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:4> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 