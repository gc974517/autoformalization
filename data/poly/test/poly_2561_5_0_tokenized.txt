\begin{document} \begin{theorem} Let the following series of instructions in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:5> ; <var:K1> := <nat:2> ; <var:K1> := <var:K1> * <var:P> ; <var:C> := <var:K1> ; <var:C> := <var:C> + <var:K0> \end{verbatim} Allowing --- for some positive numbers $ <var:I> $ --- it to be that $ <var:P> = <var:I> $ ahead of running the series of commands it follows that we see $ <var:C> = <nat:2> \times <var:I> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:I> \} \\ <var:K0> := <nat:5> ; \\ \{ <var:P> = <var:I> \land <var:K0> = <nat:5> \} \\ <var:K1> := <nat:2> ; \\ \{ <var:P> = <var:I> \land <var:K0> = <nat:5> \land <var:K1> = <nat:2> \} \\ <var:K1> := <var:K1> * <var:P> ; \\ \{ <var:P> = <var:I> \land <var:K0> = <nat:5> \land <var:K1> = <nat:2> \times <var:I> \} \\ <var:C> := <var:K1> ; \\ \{ <var:P> = <var:I> \land <var:K0> = <nat:5> \land <var:C> = <nat:2> \times <var:I> \} \\ <var:C> := <var:C> + <var:K0> \\ \{ <var:P> = <var:I> \land <var:C> = <nat:2> \times <var:I> + <nat:5> \} \end{eqnarray} The application of Hoare reasoning finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:P> = <var:I> }} <var:K0> := <nat:5> ; <var:K1> := <nat:2> ; <var:K1> := <var:K1> * <var:P> ; <var:C> := <var:K1> ; <var:C> := <var:C> + <var:K0> {{ <var:C> = <nat:2> * <var:I> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:K0> = <nat:5> /\ <var:C> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:I> /\ <var:C> = <nat:2> * <var:I> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 