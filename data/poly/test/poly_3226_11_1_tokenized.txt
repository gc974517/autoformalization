\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:s1> := <var:V> ; <var:s2> := <var:s1> * <var:V> ; <var:s3> := <var:s2> * <var:V> ; <var:s0> := <nat:1> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:2> ; <var:i> := <var:s3> <var:i> := <var:i> + <var:s2> <var:i> := <var:i> + <var:s1> <var:i> := <var:i> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> . Allowing --- given positive numbers $ <var:M> $ --- that $ <var:V> = <var:M> $ before executing this series of commands , then we see $ <var:i> = <nat:2> \cdot <var:M> ^ <nat:3> + <nat:3> \cdot <var:M> ^ <nat:2> + <nat:4> \cdot <var:M> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions can be given by typical Hoare logic . Focusing on the following bit of code contained in our series of commands , the variable update code letting $ <var:V> $ as $ <var:s1>$ . This transfers the condition $ \{ <var:V> = <var:M> \} $ to the condition $ \{ <var:V> = <var:M> \land <var:s1> = <var:M> \} $ . Honing in on the following bit of code found in the series of commands , we have the statement \verb | <var:s2> := <var:s1> * <var:V> ; | . This transfers the condition $ \{ <var:V> = <var:M> \land <var:s1> = <var:M> \} $ as $ \{ <var:V> = <var:M> \land <var:s1> = <var:M> \land <var:s2> = <var:M> ^ <nat:2> \} $ . This is deduced with the assignment law found in typical Hoare reasoning . Immediately after , the binding code binding $ <var:s2> * <var:V> $ toward $ <var:s3>$ . This line moves $ \{ <var:V> = <var:M> \land <var:s1> = <var:M> \land <var:s2> = <var:M> ^ <nat:2> \} $ to the condition $ \{ <var:V> = <var:M> \land <var:s1> = <var:M> \land <var:s2> = <var:M> ^ <nat:2> \land <var:s3> = <var:M> ^ <nat:3> \} $ . This is deduced using the assignment scheme defined in typical Hoare reasoning . Moving on , we have the variable assignmet statement \verb | <var:s0> := <nat:1> ; | . This moves the precondition $ \{ <var:V> = <var:M> \land <var:s1> = <var:M> \land <var:s2> = <var:M> ^ <nat:2> \land <var:s3> = <var:M> ^ <nat:3> \} $ to the postcondition $ \{ <var:V> = <var:M> \land <var:s1> = <var:M> \land <var:s2> = <var:M> ^ <nat:2> \land <var:s3> = <var:M> ^ <nat:3> \land <var:s0> = <nat:1> \} $ . This is known to be sound using the assignment inference rule found in usual Hoare reasoning . Advancing , the binding statement \verb | <var:s1> := <var:s1> * <nat:4> ; | . This transfers the condition $ \{ <var:V> = <var:M> \land <var:s1> = <var:M> \land <var:s2> = <var:M> ^ <nat:2> \land <var:s3> = <var:M> ^ <nat:3> \land <var:s0> = <nat:1> \} $ into the postcondition $ \{ <var:V> = <var:M> \land <var:s1> = <nat:4> \times <var:M> \land <var:s2> = <var:M> ^ <nat:2> \land <var:s3> = <var:M> ^ <nat:3> \land <var:s0> = <nat:1> \} $ . Moving forward , the statement yielding $ <var:s2> * <nat:3> $ into $ <var:s2>$ . This redefines the condition $ \{ <var:V> = <var:M> \land <var:s1> = <nat:4> \times <var:M> \land <var:s2> = <var:M> ^ <nat:2> \land <var:s3> = <var:M> ^ <nat:3> \land <var:s0> = <nat:1> \} $ toward the condition $ \{ <var:V> = <var:M> \land <var:s1> = <nat:4> \times <var:M> \land <var:s2> = <nat:3> \times <var:M> ^ <nat:2> \land <var:s3> = <var:M> ^ <nat:3> \land <var:s0> = <nat:1> \} $ . Stepping forward , we see the assignment line \verb | <var:s3> := <var:s3> * <nat:2> ; | . This line takes the precondition $ \{ <var:V> = <var:M> \land <var:s1> = <nat:4> \times <var:M> \land <var:s2> = <nat:3> \times <var:M> ^ <nat:2> \land <var:s3> = <var:M> ^ <nat:3> \land <var:s0> = <nat:1> \} $ to the postcondition $ \{ <var:V> = <var:M> \land <var:s1> = <nat:4> \times <var:M> \land <var:s2> = <nat:3> \times <var:M> ^ <nat:2> \land <var:s3> = <nat:2> \times <var:M> ^ <nat:3> \land <var:s0> = <nat:1> \} $ . This is shown by the assignment rule given by typical Hoare techniques . Shifting focus toward the proceeding piece of code found in our segment of code , we have the binding line letting $ <var:s3$ into $ <var:i>$ . This redefines the precondition $ \{ <var:V> = <var:M> \land <var:s1> = <nat:4> \times <var:M> \land <var:s2> = <nat:3> \times <var:M> ^ <nat:2> \land <var:s3> = <nat:2> \times <var:M> ^ <nat:3> \land <var:s0> = <nat:1> \} $ toward the condition $ \{ <var:V> = <var:M> \land <var:s1> = <nat:4> \times <var:M> \land <var:s2> = <nat:3> \times <var:M> ^ <nat:2> \land <var:s0> = <nat:1> \land <var:i> = <nat:2> \times <var:M> ^ <nat:3> \} $ . Moving on to the subsequent command seen in our set of instructions , we have the variable update statement assigning $ <var:i> + <var:s2$ toward $ <var:i>$ . This takes the precondition $ \{ <var:V> = <var:M> \land <var:s1> = <nat:4> \times <var:M> \land <var:s2> = <nat:3> \times <var:M> ^ <nat:2> \land <var:s0> = <nat:1> \land <var:i> = <nat:2> \times <var:M> ^ <nat:3> \} $ into the postcondition $ \{ <var:V> = <var:M> \land <var:s1> = <nat:4> \times <var:M> \land <var:s0> = <nat:1> \land <var:i> = <nat:2> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> \} $ . This is guaranteed by the assignment rule in usual Hoare techniques . Taking another step toward the proceeding statement contained in our set of instructions , we have the binding code \verb | <var:i> := <var:i> + <var:s1> | . This redefines $ \{ <var:V> = <var:M> \land <var:s1> = <nat:4> \times <var:M> \land <var:s0> = <nat:1> \land <var:i> = <nat:2> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> \} $ as $ \{ <var:V> = <var:M> \land <var:s0> = <nat:1> \land <var:i> = <nat:2> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> \} $ . Looking at the following bit of code found in our set of instructions , we have the variable update command \verb | <var:i> := <var:i> + <var:s0> | . This forwards $ \{ <var:V> = <var:M> \land <var:s0> = <nat:1> \land <var:i> = <nat:2> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> \} $ to the condition $ \{ <var:V> = <var:M> \land <var:i> = <nat:2> \times <var:M> ^ <nat:3> + <nat:3> \times <var:M> ^ <nat:2> + <nat:4> \times <var:M> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <def:poly> := <var:s1> := <var:V> ; <var:s2> := <var:s1> * <var:V> ; <var:s3> := <var:s2> * <var:V> ; <var:s0> := <nat:1> ; <var:s1> := <var:s1> * <nat:4> ; <var:s2> := <var:s2> * <nat:3> ; <var:s3> := <var:s3> * <nat:2> ; <var:i> := <var:s3> <var:i> := <var:i> + <var:s2> <var:i> := <var:i> + <var:s1> <var:i> := <var:i> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:V> = <var:M> }} <def:poly> {{ <var:i> = <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:M> /\ <var:s1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:M> /\ <var:s1> = <var:M> /\ <var:s2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:M> /\ <var:s1> = <var:M> /\ <var:s2> = <var:M> ^ <nat:2> /\ <var:s3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:M> /\ <var:s1> = <var:M> /\ <var:s2> = <var:M> ^ <nat:2> /\ <var:s3> = <var:M> ^ <nat:3> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:M> /\ <var:s1> = <nat:4> * <var:M> /\ <var:s2> = <var:M> ^ <nat:2> /\ <var:s3> = <var:M> ^ <nat:3> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:M> /\ <var:s1> = <nat:4> * <var:M> /\ <var:s2> = <nat:3> * <var:M> ^ <nat:2> /\ <var:s3> = <var:M> ^ <nat:3> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:M> /\ <var:s1> = <nat:4> * <var:M> /\ <var:s2> = <nat:3> * <var:M> ^ <nat:2> /\ <var:s3> = <nat:2> * <var:M> ^ <nat:3> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:M> /\ <var:s1> = <nat:4> * <var:M> /\ <var:s2> = <nat:3> * <var:M> ^ <nat:2> /\ <var:s0> = <nat:1> /\ <var:i> = <nat:2> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:M> /\ <var:s1> = <nat:4> * <var:M> /\ <var:s0> = <nat:1> /\ <var:i> = <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:M> /\ <var:s0> = <nat:1> /\ <var:i> = <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:M> /\ <var:i> = <nat:2> * <var:M> ^ <nat:3> + <nat:3> * <var:M> ^ <nat:2> + <nat:4> * <var:M> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 