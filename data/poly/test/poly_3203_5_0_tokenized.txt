\begin{document} \begin{theorem} Let the following code segment such that \begin{verbatim} <var:Z0> := <nat:4> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:h> ; <var:X> := <var:Z1> ; <var:X> := <var:X> + <var:Z0> \end{verbatim} Assume it to be that $ <var:h> = <var:f> $ before the evaluation of the program , it follows that $ <var:X> = <nat:1> \cdot <var:f> + <nat:4> $ when set of instructions has executed . \end{theorem} \begin{proof} Using usual Hoare techniques gives : \begin{eqnarray} \{ <var:h> = <var:f> \} \\ <var:Z0> := <nat:4> ; \\ \{ <var:h> = <var:f> \land <var:Z0> = <nat:4> \} \\ <var:Z1> := <nat:1> ; \\ \{ <var:h> = <var:f> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> \} \\ <var:Z1> := <var:Z1> * <var:h> ; \\ \{ <var:h> = <var:f> \land <var:Z0> = <nat:4> \land <var:Z1> = <nat:1> \times <var:f> \} \\ <var:X> := <var:Z1> ; \\ \{ <var:h> = <var:f> \land <var:Z0> = <nat:4> \land <var:X> = <nat:1> \times <var:f> \} \\ <var:X> := <var:X> + <var:Z0> \\ \{ <var:h> = <var:f> \land <var:X> = <nat:1> \times <var:f> + <nat:4> \} \end{eqnarray} Therefore , the list of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:h> = <var:f> }} <var:Z0> := <nat:4> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:h> ; <var:X> := <var:Z1> ; <var:X> := <var:X> + <var:Z0> {{ <var:X> = <nat:1> * <var:f> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z0> = <nat:4> /\ <var:Z1> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:Z0> = <nat:4> /\ <var:X> = <nat:1> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:f> /\ <var:X> = <nat:1> * <var:f> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 