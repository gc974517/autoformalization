\begin{document} \begin{definition} Consider a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z0> := <nat:2> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:H> ; <var:z2> := <nat:9> ; <var:z2> := <var:z2> * <var:H> ; <var:z2> := <var:z2> * <var:H> ; <var:d> := <var:z2> ; <var:d> := <var:d> + <var:z1> ; <var:d> := <var:d> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Consider a program <def:poly> . Assuming it to hold that $ <var:H> = <var:j> $ ahead of evaluating the program , it must be that we see $ <var:d> = <nat:9> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + <nat:2> $ when set of instructions executes . \end{theorem} \begin{proof} We can see that the below decorated segment of code . \begin{eqnarray} \{ <var:H> = <var:j> \} \\ <var:z0> := <nat:2> ; \\ \{ <var:H> = <var:j> \land <var:z0> = <nat:2> \} \\ <var:z1> := <nat:4> ; \\ \{ <var:H> = <var:j> \land <var:z0> = <nat:2> \land <var:z1> = <nat:4> \} \\ <var:z1> := <var:z1> * <var:H> ; \\ \{ <var:H> = <var:j> \land <var:z0> = <nat:2> \land <var:z1> = <nat:4> \cdot <var:j> \} \\ <var:z2> := <nat:9> ; \\ \{ <var:H> = <var:j> \land <var:z0> = <nat:2> \land <var:z1> = <nat:4> \cdot <var:j> \land <var:z2> = <nat:9> \} \\ <var:z2> := <var:z2> * <var:H> ; \\ \{ <var:H> = <var:j> \land <var:z0> = <nat:2> \land <var:z1> = <nat:4> \cdot <var:j> \land <var:z2> = <nat:9> \cdot <var:j> \} \\ <var:z2> := <var:z2> * <var:H> ; \\ \{ <var:H> = <var:j> \land <var:z0> = <nat:2> \land <var:z1> = <nat:4> \cdot <var:j> \land <var:z2> = <nat:9> \cdot <var:j> ^ <nat:2> \} \\ <var:d> := <var:z2> ; \\ \{ <var:H> = <var:j> \land <var:z0> = <nat:2> \land <var:z1> = <nat:4> \cdot <var:j> \land <var:d> = <nat:9> \cdot <var:j> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:z1> ; \\ \{ <var:H> = <var:j> \land <var:z0> = <nat:2> \land <var:d> = <nat:9> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> \} \\ <var:d> := <var:d> + <var:z0> \\ \{ <var:H> = <var:j> \land <var:d> = <nat:9> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + <nat:2> \} \end{eqnarray} Applying Hoare techniques finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <def:poly> := <var:z0> := <nat:2> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:H> ; <var:z2> := <nat:9> ; <var:z2> := <var:z2> * <var:H> ; <var:z2> := <var:z2> * <var:H> ; <var:d> := <var:z2> ; <var:d> := <var:d> + <var:z1> ; <var:d> := <var:d> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:H> = <var:j> }} <def:poly> {{ <var:d> = <nat:9> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:j> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:j> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:j> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:j> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:4> * <var:j> /\ <var:z2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:j> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:4> * <var:j> /\ <var:z2> = <nat:9> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:j> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:4> * <var:j> /\ <var:z2> = <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:j> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:4> * <var:j> /\ <var:d> = <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:j> /\ <var:z0> = <nat:2> /\ <var:d> = <nat:9> * <var:j> ^ <nat:2> + <nat:4> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:j> /\ <var:d> = <nat:9> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 