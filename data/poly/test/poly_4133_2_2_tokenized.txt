\begin{document} \begin{theorem} Define a program : \begin{verbatim} <var:O> := <nat:3> ; <var:O> := <nat:3> + <var:O> * <var:X> \end{verbatim} Given that we have $ <var:X> = <var:q> $ --- for all positive integers $ <var:q> $ --- ahead of the evaluation of our set of instructions , it must be that we see $ <var:O> = <nat:3> \times <var:q> + <nat:3> $ once segment of code executes . \end{theorem} \begin{proof} The flow of logic for the code can be accomplished using typical Hoare logic . Stepping through , we see the assignment statement \verb | <var:O> := <nat:3> ; | . This forwards $ \{ <var:X> = <var:q> \} $ toward the condition $ \{ <var:X> = <var:q> \land <var:O> = <nat:3> \} $ . This is shown through the assignment rule given in Hoare logic . Going to the next step , we see the statement \verb | <var:O> := <nat:3> + <var:O> * <var:X> | . This line redefines the precondition $ \{ <var:X> = <var:q> \land <var:O> = <nat:3> \} $ as $ \{ <var:X> = <var:q> \land <var:O> = <nat:3> \cdot <var:q> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:X> = <var:q> }} <var:O> := <nat:3> ; <var:O> := <nat:3> + <var:O> * <var:X> {{ <var:O> = <nat:3> * <var:q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:q> /\ <var:O> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:q> /\ <var:O> = <nat:3> * <var:q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 