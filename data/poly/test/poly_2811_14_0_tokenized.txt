\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} as \begin{verbatim} <var:z0> := <nat:1> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:t> ; <var:z2> := <nat:2> ; <var:z2> := <var:z2> * <var:t> ; <var:z2> := <var:z2> * <var:t> ; <var:z3> := <nat:4> ; <var:z3> := <var:z3> * <var:t> ; <var:z3> := <var:z3> * <var:t> ; <var:z3> := <var:z3> * <var:t> ; <var:a> := <var:z3> ; <var:a> := <var:a> + <var:z2> ; <var:a> := <var:a> + <var:z1> ; <var:a> := <var:a> + <var:z0> \end{verbatim} Assuming that $ <var:t> = <var:b> $ prior to the execution of the set of commands , it must be that $ <var:a> = <nat:4> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:1> \times <var:b> + <nat:1> $ once list of commands has finished executing . \end{theorem} \begin{proof} Arguing the correctness of this program can be shown with standard Hoare logic . Considering the subsequent piece of code found in the set of commands , we have the command \verb | <var:z0> := <nat:1> ; | . This takes the precondition $ \{ <var:t> = <var:b> \} $ toward $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \} $ . Now , we see the variable update command \verb | <var:z1> := <nat:1> ; | . This advances the condition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \} $ to $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \} $ . Now , we have the line \verb | <var:z1> := <var:z1> * <var:t> ; | . This moves the precondition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \} $ as the postcondition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \} $ . Next , the variable update statement binding $ <nat:2> $ as $ <var:z2>$ . This command takes the precondition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \} $ to the postcondition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \} $ . This is shown to be logically sound by the assignment law from typical Hoare logic . Moving forward to the next step , we have the command letting $ <var:z2> * <var:t> $ to $ <var:z2>$ . This advances $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \} $ into the condition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> \} $ . Moving on to the subsequent command seen in the code , the binding command \verb | <var:z2> := <var:z2> * <var:t> ; | . This code takes $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> \} $ as $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> ^ <nat:2> \} $ . Paying attention to the following step seen in the series of commands , the variable assignmet statement \verb | <var:z3> := <nat:4> ; | . This command takes $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> ^ <nat:2> \} $ into the condition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:z3> = <nat:4> \} $ . Moving on to the next step , the variable binding line giving $ <var:z3> * <var:t> $ as $ <var:z3>$ . This takes the precondition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:z3> = <nat:4> \} $ to $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:z3> = <nat:4> \times <var:b> \} $ . This is shown to be logically sound using the assignment scheme obtained from Hoare techniques . Immediately after , we have the binding statement defining $ <var:z3> * <var:t> $ toward $ <var:z3>$ . This advances the condition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:z3> = <nat:4> \times <var:b> \} $ to the postcondition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:z3> = <nat:4> \times <var:b> ^ <nat:2> \} $ . Advancing on , the environment update line letting $ <var:z3> * <var:t> $ as $ <var:z3>$ . This line moves the precondition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:z3> = <nat:4> \times <var:b> ^ <nat:2> \} $ into $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:z3> = <nat:4> \times <var:b> ^ <nat:3> \} $ . Shifting focus toward the upcoming piece of code seen in our series of instructions , the variable binding statement yielding $ <var:z3> $ to $ <var:a>$ . This moves $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:z3> = <nat:4> \times <var:b> ^ <nat:3> \} $ into the postcondition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:a> = <nat:4> \times <var:b> ^ <nat:3> \} $ . Moving on to the proceeding statement contained in the set of instructions , the variable assignmet statement \verb | <var:a> := <var:a> + <var:z2> ; | . This forwards the precondition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:z2> = <nat:2> \times <var:b> ^ <nat:2> \land <var:a> = <nat:4> \times <var:b> ^ <nat:3> \} $ into the postcondition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:a> = <nat:4> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> \} $ . This is deduced through the assignment law defined by usual Hoare techniques . Next , the environment update command binding $ <var:a> + <var:z1> $ into $ <var:a>$ . This advances the precondition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:z1> = <nat:1> \times <var:b> \land <var:a> = <nat:4> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> \} $ to the postcondition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:a> = <nat:4> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:1> \times <var:b> \} $ . Shifting focus toward the subsequent statement in our set of instructions , we have the variable assignmet statement defining $ <var:a> + <var:z0$ to $ <var:a>$ . This line advances the precondition $ \{ <var:t> = <var:b> \land <var:z0> = <nat:1> \land <var:a> = <nat:4> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:1> \times <var:b> \} $ toward $ \{ <var:t> = <var:b> \land <var:a> = <nat:4> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:1> \times <var:b> + <nat:1> \} $ . This is ensured with the assignment inference rule from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:t> = <var:b> }} <var:z0> := <nat:1> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:t> ; <var:z2> := <nat:2> ; <var:z2> := <var:z2> * <var:t> ; <var:z2> := <var:z2> * <var:t> ; <var:z3> := <nat:4> ; <var:z3> := <var:z3> * <var:t> ; <var:z3> := <var:z3> * <var:t> ; <var:z3> := <var:z3> * <var:t> ; <var:a> := <var:z3> ; <var:a> := <var:a> + <var:z2> ; <var:a> := <var:a> + <var:z1> ; <var:a> := <var:a> + <var:z0> {{ <var:a> = <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:z0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:1> * <var:b> /\ <var:z2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:1> * <var:b> /\ <var:z2> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:1> * <var:b> /\ <var:z2> = <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:1> * <var:b> /\ <var:z2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:z3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:1> * <var:b> /\ <var:z2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:z3> = <nat:4> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:1> * <var:b> /\ <var:z2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:z3> = <nat:4> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:1> * <var:b> /\ <var:z2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:z3> = <nat:4> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:1> * <var:b> /\ <var:z2> = <nat:2> * <var:b> ^ <nat:2> /\ <var:a> = <nat:4> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:z0> = <nat:1> /\ <var:z1> = <nat:1> * <var:b> /\ <var:a> = <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:z0> = <nat:1> /\ <var:a> = <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:b> /\ <var:a> = <nat:4> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:1> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 