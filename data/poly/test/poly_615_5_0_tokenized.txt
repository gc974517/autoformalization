\begin{document} \begin{theorem} Define a series of instructions as \begin{verbatim} <var:l0> := <nat:7> ; <var:l1> := <nat:4> ; <var:l1> := <var:l1> * <var:U> ; <var:n> := <var:l1> ; <var:n> := <var:n> + <var:l0> \end{verbatim} Assuming for any natural numbers $ <var:G> $ it to be that $ <var:U> = <var:G> $ ahead of interpreting our list of instructions it holds that we have $ <var:n> = <nat:4> \cdot <var:G> + <nat:7> $ after series of instructions has executed . \end{theorem} \begin{proof} The proof of this set of commands can be shown through typical Hoare logic . Taking another step toward the proceeding lines found in our segment of code , \[ \begin{tabular} {rcl} \{ <var:U> = <var:G> \} & <var:l0> := <nat:7> & \{ <var:U> = <var:G> \land <var:l0> = <nat:7> \} \\ \{ <var:U> = <var:G> \land <var:l0> = <nat:7> \} & <var:l1> := <nat:4> & \{ <var:U> = <var:G> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \} \end{tabular} This is guaranteed by the environment update scheme from typical Hoare reasoning . Moving forward to the subsequent statements contained in the list of commands , we have \[ \begin{tabular} {rcl} \{ <var:U> = <var:G> \} & <var:l0> := <nat:7> & \{ <var:U> = <var:G> \land <var:l0> = <nat:7> \} \\ \{ <var:U> = <var:G> \land <var:l0> = <nat:7> \} & <var:l1> := <nat:4> & \{ <var:U> = <var:G> \land <var:l0> = <nat:7> \land <var:l1> = <nat:4> \} \end{tabular} Moving on to the next step , \[ \begin{tabular} {rcl} \{ <var:U> = <var:G> \} & <var:l0> := <nat:7> & \{ <var:U> = <var:G> \land <var:l0> = <nat:7> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:U> = <var:G> }} <var:l0> := <nat:7> ; <var:l1> := <nat:4> ; <var:l1> := <var:l1> * <var:U> ; <var:n> := <var:l1> ; <var:n> := <var:n> + <var:l0> {{ <var:n> = <nat:4> * <var:G> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:l0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:l0> = <nat:7> /\ <var:l1> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:l0> = <nat:7> /\ <var:n> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:G> /\ <var:n> = <nat:4> * <var:G> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 