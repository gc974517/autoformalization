\begin{document} \begin{theorem} Define the following series of instructions in \emph{Imp} : \begin{verbatim} <var:u1> := <var:U> ; <var:u2> := <var:u1> * <var:U> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:6> ; <var:u2> := <var:u2> * <nat:9> ; <var:W> := <var:u2> <var:W> := <var:W> + <var:u1> <var:W> := <var:W> + <var:u0> \end{verbatim} Assume it to be that $ <var:U> = <var:k> $ prior to evaluating our code segment then we see $ <var:W> = <nat:9> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:1> $ once program terminates . \end{theorem} \begin{proof} Using standard Hoare reasoning gives us : \begin{eqnarray} \{ <var:U> = <var:k> \} \\ <var:u1> := <var:U> ; \\ \{ <var:U> = <var:k> \land <var:u1> = <var:k> \} \\ <var:u2> := <var:u1> * <var:U> ; \\ \{ <var:U> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> \} \\ <var:u0> := <nat:1> ; \\ \{ <var:U> = <var:k> \land <var:u1> = <var:k> \land <var:u2> = <var:k> ^ <nat:2> \land <var:u0> = <nat:1> \} \\ <var:u1> := <var:u1> * <nat:6> ; \\ \{ <var:U> = <var:k> \land <var:u1> = <nat:6> * <var:k> \land <var:u2> = <var:k> ^ <nat:2> \land <var:u0> = <nat:1> \} \\ <var:u2> := <var:u2> * <nat:9> ; \\ \{ <var:U> = <var:k> \land <var:u1> = <nat:6> * <var:k> \land <var:u2> = <nat:9> * <var:k> ^ <nat:2> \land <var:u0> = <nat:1> \} \\ <var:W> := <var:u2> \\ \{ <var:U> = <var:k> \land <var:u1> = <nat:6> * <var:k> \land <var:u0> = <nat:1> \land <var:W> = <nat:9> * <var:k> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:u1> \\ \{ <var:U> = <var:k> \land <var:u0> = <nat:1> \land <var:W> = <nat:9> * <var:k> ^ <nat:2> + <nat:6> * <var:k> \} \\ <var:W> := <var:W> + <var:u0> \\ \{ <var:U> = <var:k> \land <var:W> = <nat:9> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:1> \} \end{eqnarray} Given the preceding argument , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Definition <var:u2> : string := " <var:u2> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:U> = <var:k> }} <var:u1> := <var:U> ; <var:u2> := <var:u1> * <var:U> ; <var:u0> := <nat:1> ; <var:u1> := <var:u1> * <nat:6> ; <var:u2> := <var:u2> * <nat:9> ; <var:W> := <var:u2> <var:W> := <var:W> + <var:u1> <var:W> := <var:W> + <var:u0> {{ <var:W> = <nat:9> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:u1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:u1> = <var:k> /\ <var:u2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:u1> = <var:k> /\ <var:u2> = <var:k> ^ <nat:2> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:u1> = <nat:6> * <var:k> /\ <var:u2> = <var:k> ^ <nat:2> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:u1> = <nat:6> * <var:k> /\ <var:u2> = <nat:9> * <var:k> ^ <nat:2> /\ <var:u0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:u1> = <nat:6> * <var:k> /\ <var:u0> = <nat:1> /\ <var:W> = <nat:9> * <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:u0> = <nat:1> /\ <var:W> = <nat:9> * <var:k> ^ <nat:2> + <nat:6> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:k> /\ <var:W> = <nat:9> * <var:k> ^ <nat:2> + <nat:6> * <var:k> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 