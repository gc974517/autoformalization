\begin{document} \begin{theorem} We define a set of commands in \emph{Imp} such that \begin{verbatim} <var:V0> := <nat:2> ; <var:p> := <var:V0> \end{verbatim} Allowing $ <var:N> = <var:f> $ , given all positive integers $ <var:f> $ , before the evaluation of this series of commands it follows that we have $ <var:p> = <nat:2> $ once code exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:N> = <var:f> \} \\ <var:V0> := <nat:2> ; \\ \{ <var:N> = <var:f> \land <var:V0> = <nat:2> \} \\ <var:p> := <var:V0> \\ \{ <var:N> = <var:f> \land <var:p> = <nat:2> \} \end{eqnarray} The application of standard Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:N> = <var:f> }} <var:V0> := <nat:2> ; <var:p> := <var:V0> {{ <var:p> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:f> /\ <var:p> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 