\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:U> := <nat:2> ; <var:U> := <nat:2> + <var:U> * <var:f> ; <var:U> := <nat:4> + <var:U> * <var:f> ; <var:U> := <nat:1> + <var:U> * <var:f> ; <var:U> := <nat:2> + <var:U> * <var:f> ; <var:U> := <var:U> * <var:f> ; <var:U> := <var:U> * <var:f> ; <var:U> := <var:U> * <var:f> ; <var:U> := <nat:3> + <var:U> * <var:f> ; <var:U> := <var:U> * <var:f> ; <var:U> := <nat:2> + <var:U> * <var:f> ; <var:U> := <nat:1> + <var:U> * <var:f> ; <var:U> := <nat:1> + <var:U> * <var:f> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:f> = <var:z> $ --- given $ <var:z> $ --- ahead of executing our code it follows that $ <var:U> = <nat:2> \times <var:z> ^ <nat:12> + <nat:2> \times <var:z> ^ <nat:11> + <nat:4> \times <var:z> ^ <nat:10> + <nat:1> \times <var:z> ^ <nat:9> + <nat:2> \times <var:z> ^ <nat:8> + <nat:3> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:1> $ after set of commands has exited . \end{theorem} \begin{proof} The proof of the list of instructions can be shown through Hoare reasoning . Further , \verb | { <var:f> = <var:z> } <var:U> := <nat:2> { <var:f> = <var:z> \land <var:U> = <nat:2> } | , \verb | { <var:f> = <var:z> \land <var:U> = <nat:2> } <var:U> := <nat:2> + <var:U> * <var:f> { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> + <nat:2> } | , \verb | { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> + <nat:2> } <var:U> := <nat:4> + <var:U> * <var:f> { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:4> } | , \verb | { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:4> } <var:U> := <nat:1> + <var:U> * <var:f> { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:1> } | and \verb | { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:1> } <var:U> := <nat:2> + <var:U> * <var:f> { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:4> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:2> } | . This is ensured with the environment update inference rule obtained from typical Hoare logic . Moving on , we have \verb | { <var:f> = <var:z> } <var:U> := <nat:2> { <var:f> = <var:z> \land <var:U> = <nat:2> } | , \verb | { <var:f> = <var:z> \land <var:U> = <nat:2> } <var:U> := <nat:2> + <var:U> * <var:f> { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> + <nat:2> } | , \verb | { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> + <nat:2> } <var:U> := <nat:4> + <var:U> * <var:f> { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:4> } | and \verb | { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:4> } <var:U> := <nat:1> + <var:U> * <var:f> { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:4> \cdot <var:z> + <nat:1> } | . Moving on to the next step , \verb | { <var:f> = <var:z> } <var:U> := <nat:2> { <var:f> = <var:z> \land <var:U> = <nat:2> } | and \verb | { <var:f> = <var:z> \land <var:U> = <nat:2> } <var:U> := <nat:2> + <var:U> * <var:f> { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> + <nat:2> } | . This is ensured using the variable assignmet law from usual Hoare logic . Moving forward , \verb | { <var:f> = <var:z> } <var:U> := <nat:2> { <var:f> = <var:z> \land <var:U> = <nat:2> } | and \verb | { <var:f> = <var:z> \land <var:U> = <nat:2> } <var:U> := <nat:2> + <var:U> * <var:f> { <var:f> = <var:z> \land <var:U> = <nat:2> \cdot <var:z> + <nat:2> } | . This is known to be sound using the variable update law given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:2> ; <var:U> := <nat:2> + <var:U> * <var:f> ; <var:U> := <nat:4> + <var:U> * <var:f> ; <var:U> := <nat:1> + <var:U> * <var:f> ; <var:U> := <nat:2> + <var:U> * <var:f> ; <var:U> := <var:U> * <var:f> ; <var:U> := <var:U> * <var:f> ; <var:U> := <var:U> * <var:f> ; <var:U> := <nat:3> + <var:U> * <var:f> ; <var:U> := <var:U> * <var:f> ; <var:U> := <nat:2> + <var:U> * <var:f> ; <var:U> := <nat:1> + <var:U> * <var:f> ; <var:U> := <nat:1> + <var:U> * <var:f> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:f> = <var:z> }} <def:poly> {{ <var:U> = <nat:2> * <var:z> ^ <nat:12> + <nat:2> * <var:z> ^ <nat:11> + <nat:4> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:8> + <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:U> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:U> = <nat:2> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:U> = <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:U> = <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:U> = <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:U> = <nat:2> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:U> = <nat:2> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:U> = <nat:2> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:U> = <nat:2> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:U> = <nat:2> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:8> + <nat:4> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:3> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:U> = <nat:2> * <var:z> ^ <nat:10> + <nat:2> * <var:z> ^ <nat:9> + <nat:4> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:U> = <nat:2> * <var:z> ^ <nat:11> + <nat:2> * <var:z> ^ <nat:10> + <nat:4> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:3> + <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:z> /\ <var:U> = <nat:2> * <var:z> ^ <nat:12> + <nat:2> * <var:z> ^ <nat:11> + <nat:4> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:8> + <nat:3> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 