\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} such that \begin{verbatim} <var:v1> := <var:V> ; <var:v2> := <var:v1> * <var:V> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:3> ; <var:v2> := <var:v2> * <nat:3> ; <var:Z> := <var:v2> <var:Z> := <var:Z> + <var:v1> <var:Z> := <var:Z> + <var:v0> \end{verbatim} Assume it to be that $ <var:V> = <var:i> $ before the execution of our segment of code it must be that we see $ <var:Z> = <nat:3> \cdot <var:i> ^ <nat:2> + <nat:3> \cdot <var:i> + <nat:1> $ once set of instructions terminates . \end{theorem} \begin{proof} Arguing the correctness of our segment of code is given through typical Hoare logic . Paying attention to the next line of code found in the list of instructions , we have the variable assignmet command binding $ <var:V> $ toward $ <var:v1>$ . This command transfers the precondition $ \{ <var:V> = <var:i> \} $ to $ \{ <var:V> = <var:i> \land <var:v1> = <var:i> \} $ . Advancing to the next step , we have the variable update code defining $ <var:v1> * <var:V> $ to $ <var:v2>$ . This code transfers $ \{ <var:V> = <var:i> \land <var:v1> = <var:i> \} $ as the postcondition $ \{ <var:V> = <var:i> \land <var:v1> = <var:i> \land <var:v2> = <var:i> ^ <nat:2> \} $ . Immediately after , we see the binding statement \verb | <var:v0> := <nat:1> ; | . This code advances $ \{ <var:V> = <var:i> \land <var:v1> = <var:i> \land <var:v2> = <var:i> ^ <nat:2> \} $ toward the condition $ \{ <var:V> = <var:i> \land <var:v1> = <var:i> \land <var:v2> = <var:i> ^ <nat:2> \land <var:v0> = <nat:1> \} $ . Stepping through , we see the assignment code assigning $ <var:v1> * <nat:3> $ as $ <var:v1>$ . This moves the precondition $ \{ <var:V> = <var:i> \land <var:v1> = <var:i> \land <var:v2> = <var:i> ^ <nat:2> \land <var:v0> = <nat:1> \} $ as the postcondition $ \{ <var:V> = <var:i> \land <var:v1> = <nat:3> * <var:i> \land <var:v2> = <var:i> ^ <nat:2> \land <var:v0> = <nat:1> \} $ . Taking a look at the following line of code in the list of commands , we see the variable assignmet line \verb | <var:v2> := <var:v2> * <nat:3> ; | . This redefines the condition $ \{ <var:V> = <var:i> \land <var:v1> = <nat:3> * <var:i> \land <var:v2> = <var:i> ^ <nat:2> \land <var:v0> = <nat:1> \} $ toward the postcondition $ \{ <var:V> = <var:i> \land <var:v1> = <nat:3> * <var:i> \land <var:v2> = <nat:3> * <var:i> ^ <nat:2> \land <var:v0> = <nat:1> \} $ . This is shown to be logically sound using the assignment scheme found in Hoare logic . Focusing on the subsequent piece of code seen in the list of instructions , the binding command yielding $ <var:v2$ toward $ <var:Z>$ . This moves $ \{ <var:V> = <var:i> \land <var:v1> = <nat:3> * <var:i> \land <var:v2> = <nat:3> * <var:i> ^ <nat:2> \land <var:v0> = <nat:1> \} $ into the postcondition $ \{ <var:V> = <var:i> \land <var:v1> = <nat:3> * <var:i> \land <var:v0> = <nat:1> \land <var:Z> = <nat:3> * <var:i> ^ <nat:2> \} $ . This is known to be sound with the assignment scheme obtained from usual Hoare logic . Immediately following , the binding command \verb | <var:Z> := <var:Z> + <var:v1> | . This forwards the precondition $ \{ <var:V> = <var:i> \land <var:v1> = <nat:3> * <var:i> \land <var:v0> = <nat:1> \land <var:Z> = <nat:3> * <var:i> ^ <nat:2> \} $ toward the condition $ \{ <var:V> = <var:i> \land <var:v0> = <nat:1> \land <var:Z> = <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> \} $ . This is guaranteed through the assignment inference rule in standard Hoare techniques . Moving on to the following line contained in the series of commands , we have the assignment line \verb | <var:Z> := <var:Z> + <var:v0> | . This line takes the precondition $ \{ <var:V> = <var:i> \land <var:v0> = <nat:1> \land <var:Z> = <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> \} $ toward $ \{ <var:V> = <var:i> \land <var:Z> = <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:V> = <var:i> }} <var:v1> := <var:V> ; <var:v2> := <var:v1> * <var:V> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:3> ; <var:v2> := <var:v2> * <nat:3> ; <var:Z> := <var:v2> <var:Z> := <var:Z> + <var:v1> <var:Z> := <var:Z> + <var:v0> {{ <var:Z> = <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:v1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:v1> = <var:i> /\ <var:v2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:v1> = <var:i> /\ <var:v2> = <var:i> ^ <nat:2> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:v1> = <nat:3> * <var:i> /\ <var:v2> = <var:i> ^ <nat:2> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:v1> = <nat:3> * <var:i> /\ <var:v2> = <nat:3> * <var:i> ^ <nat:2> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:v1> = <nat:3> * <var:i> /\ <var:v0> = <nat:1> /\ <var:Z> = <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:v0> = <nat:1> /\ <var:Z> = <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:Z> = <nat:3> * <var:i> ^ <nat:2> + <nat:3> * <var:i> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 