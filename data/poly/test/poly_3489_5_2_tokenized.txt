\begin{document} \begin{theorem} We define the following set of commands such that \begin{verbatim} <var:s> := <nat:4> ; <var:s> := <nat:4> + <var:s> * <var:a> ; <var:s> := <nat:4> + <var:s> * <var:a> ; <var:s> := <nat:2> + <var:s> * <var:a> ; <var:s> := <nat:4> + <var:s> * <var:a> \end{verbatim} Allow that we have $ <var:a> = <var:R> $ before interpreting the set of commands , it must be that we have $ <var:s> = <nat:4> \times <var:R> ^ <nat:4> + <nat:4> \times <var:R> ^ <nat:3> + <nat:4> \times <var:R> ^ <nat:2> + <nat:2> \times <var:R> + <nat:4> $ after list of commands finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:a> = <var:R> \} \\ <var:s> := <nat:4> ; \\ \{ <var:a> = <var:R> \land <var:s> = <nat:4> \} \\ <var:s> := <nat:4> + <var:s> * <var:a> ; \\ \{ <var:a> = <var:R> \land <var:s> = <nat:4> \cdot <var:R> + <nat:4> \} \\ <var:s> := <nat:4> + <var:s> * <var:a> ; \\ \{ <var:a> = <var:R> \land <var:s> = <nat:4> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:4> \} \\ <var:s> := <nat:2> + <var:s> * <var:a> ; \\ \{ <var:a> = <var:R> \land <var:s> = <nat:4> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:4> \cdot <var:R> + <nat:2> \} \\ <var:s> := <nat:4> + <var:s> * <var:a> \\ \{ <var:a> = <var:R> \land <var:s> = <nat:4> \cdot <var:R> ^ <nat:4> + <nat:4> \cdot <var:R> ^ <nat:3> + <nat:4> \cdot <var:R> ^ <nat:2> + <nat:2> \cdot <var:R> + <nat:4> \} \end{eqnarray} Applying usual Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:a> = <var:R> }} <var:s> := <nat:4> ; <var:s> := <nat:4> + <var:s> * <var:a> ; <var:s> := <nat:4> + <var:s> * <var:a> ; <var:s> := <nat:2> + <var:s> * <var:a> ; <var:s> := <nat:4> + <var:s> * <var:a> {{ <var:s> = <nat:4> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:s> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:s> = <nat:4> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:s> = <nat:4> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:s> = <nat:4> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:R> /\ <var:s> = <nat:4> * <var:R> ^ <nat:4> + <nat:4> * <var:R> ^ <nat:3> + <nat:4> * <var:R> ^ <nat:2> + <nat:2> * <var:R> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 