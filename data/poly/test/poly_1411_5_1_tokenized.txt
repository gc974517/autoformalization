\begin{document} \begin{definition} Take a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:i1> := <var:H> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:9> ; <var:f> := <var:i1> <var:f> := <var:f> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:H> = <var:U> $ prior to running the list of instructions it holds that $ <var:f> = <nat:9> \times <var:U> + <nat:3> $ . \end{theorem} \begin{proof} The course of logic for the segment of code can be given by standard Hoare techniques . Taking another step toward the upcoming bit of code in our code , we have \[ \begin{tabular} {rcl} \{ <var:H> = <var:U> \} & <var:i1> := <var:H> & \{ <var:H> = <var:U> \land <var:i1> = <var:U> \} \end{tabular} This is guaranteed by the rule in usual Hoare logic . Moving forward to the next step , we have \[ \begin{tabular} {rcl} \{ <var:H> = <var:U> \} & <var:i1> := <var:H> & \{ <var:H> = <var:U> \land <var:i1> = <var:U> \} \\ \{ <var:H> = <var:U> \land <var:i1> = <var:U> \} & <var:i0> := <nat:3> & \{ <var:H> = <var:U> \land <var:i1> = <var:U> \land <var:i0> = <nat:3> \} \\ \{ <var:H> = <var:U> \land <var:i1> = <var:U> \land <var:i0> = <nat:3> \} & <var:i1> := <var:i1> * <nat:9> & \{ <var:H> = <var:U> \land <var:i1> = <nat:9> \cdot <var:U> \land <var:i0> = <nat:3> \} \end{tabular} Moving on , we have \[ \begin{tabular} {rcl} \{ <var:H> = <var:U> \} & <var:i1> := <var:H> & \{ <var:H> = <var:U> \land <var:i1> = <var:U> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <def:poly> := <var:i1> := <var:H> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:9> ; <var:f> := <var:i1> <var:f> := <var:f> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:H> = <var:U> }} <def:poly> {{ <var:f> = <nat:9> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:i1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:i1> = <var:U> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:i1> = <nat:9> * <var:U> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:i0> = <nat:3> /\ <var:f> = <nat:9> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:U> /\ <var:f> = <nat:9> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 