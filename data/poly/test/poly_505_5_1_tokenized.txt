\begin{document} \begin{theorem} Consider a code segment in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:r> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:4> ; <var:p> := <var:b1> <var:p> := <var:p> + <var:b0> \end{verbatim} Given it to hold that $ <var:r> = <var:U> $ ( for positive coefficients $ <var:U> $ ) before interpreting this list of instructions , then we have $ <var:p> = <nat:4> \times <var:U> + <nat:2> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of instructions can be demonstrated by Hoare reasoning . Stepping through , we have the binding statement yielding $ <var:r> $ into $ <var:b1>$ . This redefines the precondition $ \{ <var:r> = <var:U> \} $ toward the condition $ \{ <var:r> = <var:U> \land <var:b1> = <var:U> \} $ . Jumping to the proceeding piece of code in our set of instructions , we have the variable assignmet command \verb | <var:b0> := <nat:2> ; | . This code forwards $ \{ <var:r> = <var:U> \land <var:b1> = <var:U> \} $ to the postcondition $ \{ <var:r> = <var:U> \land <var:b1> = <var:U> \land <var:b0> = <nat:2> \} $ . This is shown to be logically sound by the assignment inference rule from standard Hoare reasoning . Looking at the proceeding line seen in the segment of code , we see the variable binding code yielding $ <var:b1> * <nat:4> $ into $ <var:b1>$ . This code moves the precondition $ \{ <var:r> = <var:U> \land <var:b1> = <var:U> \land <var:b0> = <nat:2> \} $ to the postcondition $ \{ <var:r> = <var:U> \land <var:b1> = <nat:4> * <var:U> \land <var:b0> = <nat:2> \} $ . Immediately after , the environment update code \verb | <var:p> := <var:b1> | . This statement moves the precondition $ \{ <var:r> = <var:U> \land <var:b1> = <nat:4> * <var:U> \land <var:b0> = <nat:2> \} $ toward $ \{ <var:r> = <var:U> \land <var:b0> = <nat:2> \land <var:p> = <nat:4> * <var:U> \} $ . This is deduced using the assignment scheme defined by Hoare logic . Immediately following , we have the binding statement letting $ <var:p> + <var:b0$ to $ <var:p>$ . This forwards the condition $ \{ <var:r> = <var:U> \land <var:b0> = <nat:2> \land <var:p> = <nat:4> * <var:U> \} $ into $ \{ <var:r> = <var:U> \land <var:p> = <nat:4> * <var:U> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:r> = <var:U> }} <var:b1> := <var:r> ; <var:b0> := <nat:2> ; <var:b1> := <var:b1> * <nat:4> ; <var:p> := <var:b1> <var:p> := <var:p> + <var:b0> {{ <var:p> = <nat:4> * <var:U> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:b1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:b1> = <var:U> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:b1> = <nat:4> * <var:U> /\ <var:b0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:b0> = <nat:2> /\ <var:p> = <nat:4> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:U> /\ <var:p> = <nat:4> * <var:U> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 