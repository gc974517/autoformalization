\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:6> ; <var:h> := <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> . Given that we have $ <var:H> = <var:x> $ ahead of the evaluation of our series of commands , it follows that we see $ <var:h> = <nat:6> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning yields : \begin{eqnarray} \{ <var:H> = <var:x> \} \\ <var:Z0> := <nat:6> ; \\ \{ <var:H> = <var:x> \land <var:Z0> = <nat:6> \} \\ <var:h> := <var:Z0> \\ \{ <var:H> = <var:x> \land <var:h> = <nat:6> \} \end{eqnarray} Considering the preceding argument , our series of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <def:poly> := <var:Z0> := <nat:6> ; <var:h> := <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:H> = <var:x> }} <def:poly> {{ <var:h> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:Z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:x> /\ <var:h> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 