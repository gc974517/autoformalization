\begin{document} \begin{theorem} Define a segment of code such that \begin{verbatim} <var:F1> := <var:M> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:5> ; <var:v> := <var:F1> <var:v> := <var:v> + <var:F0> \end{verbatim} Assume $ <var:M> = <var:E> $ ahead of running the program , it holds that we see $ <var:v> = <nat:5> \times <var:E> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:E> \} \\ <var:F1> := <var:M> ; \\ \{ <var:M> = <var:E> \land <var:F1> = <var:E> \} \\ <var:F0> := <nat:8> ; \\ \{ <var:M> = <var:E> \land <var:F1> = <var:E> \land <var:F0> = <nat:8> \} \\ <var:F1> := <var:F1> * <nat:5> ; \\ \{ <var:M> = <var:E> \land <var:F1> = <nat:5> \cdot <var:E> \land <var:F0> = <nat:8> \} \\ <var:v> := <var:F1> \\ \{ <var:M> = <var:E> \land <var:F0> = <nat:8> \land <var:v> = <nat:5> \cdot <var:E> \} \\ <var:v> := <var:v> + <var:F0> \\ \{ <var:M> = <var:E> \land <var:v> = <nat:5> \cdot <var:E> + <nat:8> \} \end{eqnarray} Utilizing standard Hoare reasoning resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:M> = <var:E> }} <var:F1> := <var:M> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:5> ; <var:v> := <var:F1> <var:v> := <var:v> + <var:F0> {{ <var:v> = <nat:5> * <var:E> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:F1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:F1> = <var:E> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:F1> = <nat:5> * <var:E> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:F0> = <nat:8> /\ <var:v> = <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:E> /\ <var:v> = <nat:5> * <var:E> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 