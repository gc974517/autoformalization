\begin{document} \begin{theorem} Define the following set of commands such that \begin{verbatim} <var:u> := <nat:2> ; <var:u> := <nat:2> + <var:u> * <var:j> ; <var:u> := <nat:1> + <var:u> * <var:j> ; <var:u> := <nat:1> + <var:u> * <var:j> ; <var:u> := <nat:3> + <var:u> * <var:j> ; <var:u> := <nat:2> + <var:u> * <var:j> ; <var:u> := <nat:3> + <var:u> * <var:j> ; <var:u> := <var:u> * <var:j> ; <var:u> := <var:u> * <var:j> ; <var:u> := <nat:3> + <var:u> * <var:j> \end{verbatim} Given that $ <var:j> = <var:y> $ ahead of the evaluation of the set of instructions , it holds that $ <var:u> = <nat:2> \cdot <var:y> ^ <nat:9> + <nat:2> \cdot <var:y> ^ <nat:8> + <nat:1> \cdot <var:y> ^ <nat:7> + <nat:1> \cdot <var:y> ^ <nat:6> + <nat:3> \cdot <var:y> ^ <nat:5> + <nat:2> \cdot <var:y> ^ <nat:4> + <nat:3> \cdot <var:y> ^ <nat:3> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for this set of instructions can be given using usual Hoare reasoning . Keeping momentum , we see the binding code binding $ <nat:2> $ to $ <var:u>$ . This code transfers the condition $ \{ <var:j> = <var:y> \} $ as the postcondition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \} $ . This is sound through the assignment law given in usual Hoare techniques . Taking a look at the upcoming bit of code seen in the code segment , we have the statement yielding $ <nat:2> + <var:u> * <var:j> $ to $ <var:u>$ . This takes $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \} $ as the condition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> + <nat:2> \} $ . Keeping momentum , we see the variable update command \verb | <var:u> := <nat:1> + <var:u> * <var:j> ; | . This takes the precondition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> + <nat:2> \} $ into the condition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:1> \} $ . This is deduced using the assignment inference rule defined by Hoare logic . Further , we have the environment update command assigning $ <nat:1> + <var:u> * <var:j> $ toward $ <var:u>$ . This command forwards the condition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:1> \} $ to $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:3> + <nat:2> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> + <nat:1> \} $ . Further , we have the assignment statement assigning $ <nat:3> + <var:u> * <var:j> $ as $ <var:u>$ . This code advances $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:3> + <nat:2> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> + <nat:1> \} $ toward the condition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:4> + <nat:2> \times <var:y> ^ <nat:3> + <nat:1> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> + <nat:3> \} $ . Immediately after , we see the binding command letting $ <nat:2> + <var:u> * <var:j> $ to $ <var:u>$ . This transfers $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:4> + <nat:2> \times <var:y> ^ <nat:3> + <nat:1> \times <var:y> ^ <nat:2> + <nat:1> \times <var:y> + <nat:3> \} $ as the postcondition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:5> + <nat:2> \times <var:y> ^ <nat:4> + <nat:1> \times <var:y> ^ <nat:3> + <nat:1> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:2> \} $ . Paying attention to the following line of code in our set of commands , we have the environment update line \verb | <var:u> := <nat:3> + <var:u> * <var:j> ; | . This line advances the condition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:5> + <nat:2> \times <var:y> ^ <nat:4> + <nat:1> \times <var:y> ^ <nat:3> + <nat:1> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + <nat:2> \} $ into the condition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:6> + <nat:2> \times <var:y> ^ <nat:5> + <nat:1> \times <var:y> ^ <nat:4> + <nat:1> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:3> \} $ . Moving forward , we have the statement letting $ <var:u> * <var:j> $ toward $ <var:u>$ . This code advances the precondition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:6> + <nat:2> \times <var:y> ^ <nat:5> + <nat:1> \times <var:y> ^ <nat:4> + <nat:1> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + <nat:2> \times <var:y> + <nat:3> \} $ toward the condition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:7> + <nat:2> \times <var:y> ^ <nat:6> + <nat:1> \times <var:y> ^ <nat:5> + <nat:1> \times <var:y> ^ <nat:4> + <nat:3> \times <var:y> ^ <nat:3> + <nat:2> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + \} $ . This is deduced with the assignment law given by typical Hoare logic . Advancing to the next step found in the set of commands , we see the line binding $ <var:u> * <var:j> $ to $ <var:u>$ . This redefines the precondition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:7> + <nat:2> \times <var:y> ^ <nat:6> + <nat:1> \times <var:y> ^ <nat:5> + <nat:1> \times <var:y> ^ <nat:4> + <nat:3> \times <var:y> ^ <nat:3> + <nat:2> \times <var:y> ^ <nat:2> + <nat:3> \times <var:y> + \} $ as the postcondition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:8> + <nat:2> \times <var:y> ^ <nat:7> + <nat:1> \times <var:y> ^ <nat:6> + <nat:1> \times <var:y> ^ <nat:5> + <nat:3> \times <var:y> ^ <nat:4> + <nat:2> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + \} $ . Honing in on the next line of code contained in the series of commands , the binding code \verb | <var:u> := <nat:3> + <var:u> * <var:j> | . This statement forwards $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:8> + <nat:2> \times <var:y> ^ <nat:7> + <nat:1> \times <var:y> ^ <nat:6> + <nat:1> \times <var:y> ^ <nat:5> + <nat:3> \times <var:y> ^ <nat:4> + <nat:2> \times <var:y> ^ <nat:3> + <nat:3> \times <var:y> ^ <nat:2> + \} $ to the condition $ \{ <var:j> = <var:y> \land <var:u> = <nat:2> \times <var:y> ^ <nat:9> + <nat:2> \times <var:y> ^ <nat:8> + <nat:1> \times <var:y> ^ <nat:7> + <nat:1> \times <var:y> ^ <nat:6> + <nat:3> \times <var:y> ^ <nat:5> + <nat:2> \times <var:y> ^ <nat:4> + <nat:3> \times <var:y> ^ <nat:3> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:j> = <var:y> }} <var:u> := <nat:2> ; <var:u> := <nat:2> + <var:u> * <var:j> ; <var:u> := <nat:1> + <var:u> * <var:j> ; <var:u> := <nat:1> + <var:u> * <var:j> ; <var:u> := <nat:3> + <var:u> * <var:j> ; <var:u> := <nat:2> + <var:u> * <var:j> ; <var:u> := <nat:3> + <var:u> * <var:j> ; <var:u> := <var:u> * <var:j> ; <var:u> := <var:u> * <var:j> ; <var:u> := <nat:3> + <var:u> * <var:j> {{ <var:u> = <nat:2> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:1> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:u> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:u> = <nat:2> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:u> = <nat:2> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:u> = <nat:2> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:u> = <nat:2> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:1> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:u> = <nat:2> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:u> = <nat:2> * <var:y> ^ <nat:6> + <nat:2> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:1> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + <nat:2> * <var:y> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:u> = <nat:2> * <var:y> ^ <nat:7> + <nat:2> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:5> + <nat:1> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:2> * <var:y> ^ <nat:2> + <nat:3> * <var:y> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:u> = <nat:2> * <var:y> ^ <nat:8> + <nat:2> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:1> * <var:y> ^ <nat:5> + <nat:3> * <var:y> ^ <nat:4> + <nat:2> * <var:y> ^ <nat:3> + <nat:3> * <var:y> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:u> = <nat:2> * <var:y> ^ <nat:9> + <nat:2> * <var:y> ^ <nat:8> + <nat:1> * <var:y> ^ <nat:7> + <nat:1> * <var:y> ^ <nat:6> + <nat:3> * <var:y> ^ <nat:5> + <nat:2> * <var:y> ^ <nat:4> + <nat:3> * <var:y> ^ <nat:3> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 