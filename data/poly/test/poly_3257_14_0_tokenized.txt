\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:3> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:W> ; <var:z2> := <nat:3> ; <var:z2> := <var:z2> * <var:W> ; <var:z2> := <var:z2> * <var:W> ; <var:z3> := <nat:1> ; <var:z3> := <var:z3> * <var:W> ; <var:z3> := <var:z3> * <var:W> ; <var:z3> := <var:z3> * <var:W> ; <var:E> := <var:z3> ; <var:E> := <var:E> + <var:z2> ; <var:E> := <var:E> + <var:z1> ; <var:E> := <var:E> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> in \emph{Imp} . Allow it to hold that $ <var:W> = <var:w> $ before the execution of the code it must be that $ <var:E> = <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:3> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning results in : \begin{eqnarray} \{ <var:W> = <var:w> \} \\ <var:z0> := <nat:3> ; \\ \{ <var:W> = <var:w> \land <var:z0> = <nat:3> \} \\ <var:z1> := <nat:4> ; \\ \{ <var:W> = <var:w> \land <var:z0> = <nat:3> \land <var:z1> = <nat:4> \} \\ <var:z1> := <var:z1> * <var:W> ; \\ \{ <var:W> = <var:w> \land <var:z0> = <nat:3> \land <var:z1> = <nat:4> * <var:w> \} \\ <var:z2> := <nat:3> ; \\ \{ <var:W> = <var:w> \land <var:z0> = <nat:3> \land <var:z1> = <nat:4> * <var:w> \land <var:z2> = <nat:3> \} \\ <var:z2> := <var:z2> * <var:W> ; \\ \{ <var:W> = <var:w> \land <var:z0> = <nat:3> \land <var:z1> = <nat:4> * <var:w> \land <var:z2> = <nat:3> * <var:w> \} \\ <var:z2> := <var:z2> * <var:W> ; \\ \{ <var:W> = <var:w> \land <var:z0> = <nat:3> \land <var:z1> = <nat:4> * <var:w> \land <var:z2> = <nat:3> * <var:w> ^ <nat:2> \} \\ <var:z3> := <nat:1> ; \\ \{ <var:W> = <var:w> \land <var:z0> = <nat:3> \land <var:z1> = <nat:4> * <var:w> \land <var:z2> = <nat:3> * <var:w> ^ <nat:2> \land <var:z3> = <nat:1> \} \\ <var:z3> := <var:z3> * <var:W> ; \\ \{ <var:W> = <var:w> \land <var:z0> = <nat:3> \land <var:z1> = <nat:4> * <var:w> \land <var:z2> = <nat:3> * <var:w> ^ <nat:2> \land <var:z3> = <nat:1> * <var:w> \} \\ <var:z3> := <var:z3> * <var:W> ; \\ \{ <var:W> = <var:w> \land <var:z0> = <nat:3> \land <var:z1> = <nat:4> * <var:w> \land <var:z2> = <nat:3> * <var:w> ^ <nat:2> \land <var:z3> = <nat:1> * <var:w> ^ <nat:2> \} \\ <var:z3> := <var:z3> * <var:W> ; \\ \{ <var:W> = <var:w> \land <var:z0> = <nat:3> \land <var:z1> = <nat:4> * <var:w> \land <var:z2> = <nat:3> * <var:w> ^ <nat:2> \land <var:z3> = <nat:1> * <var:w> ^ <nat:3> \} \\ <var:E> := <var:z3> ; \\ \{ <var:W> = <var:w> \land <var:z0> = <nat:3> \land <var:z1> = <nat:4> * <var:w> \land <var:z2> = <nat:3> * <var:w> ^ <nat:2> \land <var:E> = <nat:1> * <var:w> ^ <nat:3> \} \\ <var:E> := <var:E> + <var:z2> ; \\ \{ <var:W> = <var:w> \land <var:z0> = <nat:3> \land <var:z1> = <nat:4> * <var:w> \land <var:E> = <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:z1> ; \\ \{ <var:W> = <var:w> \land <var:z0> = <nat:3> \land <var:E> = <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> \} \\ <var:E> := <var:E> + <var:z0> \\ \{ <var:W> = <var:w> \land <var:E> = <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:3> \} \end{eqnarray} Given the above , the series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <var:z2> : string := " <var:z2> " . Definition <var:z3> : string := " <var:z3> " . Definition <def:poly> := <var:z0> := <nat:3> ; <var:z1> := <nat:4> ; <var:z1> := <var:z1> * <var:W> ; <var:z2> := <nat:3> ; <var:z2> := <var:z2> * <var:W> ; <var:z2> := <var:z2> * <var:W> ; <var:z3> := <nat:1> ; <var:z3> := <var:z3> * <var:W> ; <var:z3> := <var:z3> * <var:W> ; <var:z3> := <var:z3> * <var:W> ; <var:E> := <var:z3> ; <var:E> := <var:E> + <var:z2> ; <var:E> := <var:E> + <var:z1> ; <var:E> := <var:E> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:W> = <var:w> }} <def:poly> {{ <var:E> = <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:z0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:4> * <var:w> /\ <var:z2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:4> * <var:w> /\ <var:z2> = <nat:3> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:4> * <var:w> /\ <var:z2> = <nat:3> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:4> * <var:w> /\ <var:z2> = <nat:3> * <var:w> ^ <nat:2> /\ <var:z3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:4> * <var:w> /\ <var:z2> = <nat:3> * <var:w> ^ <nat:2> /\ <var:z3> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:4> * <var:w> /\ <var:z2> = <nat:3> * <var:w> ^ <nat:2> /\ <var:z3> = <nat:1> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:4> * <var:w> /\ <var:z2> = <nat:3> * <var:w> ^ <nat:2> /\ <var:z3> = <nat:1> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:4> * <var:w> /\ <var:z2> = <nat:3> * <var:w> ^ <nat:2> /\ <var:E> = <nat:1> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:z0> = <nat:3> /\ <var:z1> = <nat:4> * <var:w> /\ <var:E> = <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:z0> = <nat:3> /\ <var:E> = <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:w> /\ <var:E> = <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 