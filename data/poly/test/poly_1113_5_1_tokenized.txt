\begin{document} \begin{theorem} Take the following segment of code : \begin{verbatim} <var:U1> := <var:O> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:4> ; <var:d> := <var:U1> <var:d> := <var:d> + <var:U0> \end{verbatim} Assume that we have $ <var:O> = <var:l> $ , given whole numbers $ <var:l> $ , ahead of evaluating this list of instructions then we see $ <var:d> = <nat:4> \times <var:l> + <nat:2> $ after list of instructions is done . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions can be done through usual Hoare techniques . Observing the next statements seen in the list of instructions , we have \verb | { <var:O> = <var:l> } <var:U1> := <var:O> { <var:O> = <var:l> \land <var:U1> = <var:l> } | and \verb | { <var:O> = <var:l> \land <var:U1> = <var:l> } <var:U0> := <nat:2> { <var:O> = <var:l> \land <var:U1> = <var:l> \land <var:U0> = <nat:2> } | . This is guaranteed using the assignment rule in standard Hoare techniques . Stepping forward , we see \verb | { <var:O> = <var:l> } <var:U1> := <var:O> { <var:O> = <var:l> \land <var:U1> = <var:l> } | . Advancing to the proceeding bits of codeseen in the set of commands , we see \verb | { <var:O> = <var:l> } <var:U1> := <var:O> { <var:O> = <var:l> \land <var:U1> = <var:l> } | and \verb | { <var:O> = <var:l> \land <var:U1> = <var:l> } <var:U0> := <nat:2> { <var:O> = <var:l> \land <var:U1> = <var:l> \land <var:U0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:O> = <var:l> }} <var:U1> := <var:O> ; <var:U0> := <nat:2> ; <var:U1> := <var:U1> * <nat:4> ; <var:d> := <var:U1> <var:d> := <var:d> + <var:U0> {{ <var:d> = <nat:4> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:U1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:U1> = <var:l> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:U1> = <nat:4> * <var:l> /\ <var:U0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:U0> = <nat:2> /\ <var:d> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:d> = <nat:4> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 