\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:t> := <nat:2> ; <var:t> := <nat:1> + <var:t> * <var:B> ; <var:t> := <nat:1> + <var:t> * <var:B> ; <var:t> := <var:t> * <var:B> ; <var:t> := <nat:2> + <var:t> * <var:B> ; <var:t> := <nat:1> + <var:t> * <var:B> ; <var:t> := <nat:4> + <var:t> * <var:B> ; <var:t> := <nat:4> + <var:t> * <var:B> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:B> = <var:Q> $ --- given every positive integer coefficients $ <var:Q> $ --- before running the code it must be that we see $ <var:t> = <nat:2> \cdot <var:Q> ^ <nat:7> + <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:4> $ when series of commands exits . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions is given using standard Hoare reasoning . Keeping momentum , \verb | { <var:B> = <var:Q> } <var:t> := <nat:2> { <var:B> = <var:Q> \land <var:t> = <nat:2> } | , \verb | { <var:B> = <var:Q> \land <var:t> = <nat:2> } <var:t> := <nat:1> + <var:t> * <var:B> { <var:B> = <var:Q> \land <var:t> = <nat:2> \times <var:Q> + <nat:1> } | , \verb | { <var:B> = <var:Q> \land <var:t> = <nat:2> \times <var:Q> + <nat:1> } <var:t> := <nat:1> + <var:t> * <var:B> { <var:B> = <var:Q> \land <var:t> = <nat:2> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:1> } | , \verb | { <var:B> = <var:Q> \land <var:t> = <nat:2> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:1> } <var:t> := <var:t> * <var:B> { <var:B> = <var:Q> \land <var:t> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + } | , \verb | { <var:B> = <var:Q> \land <var:t> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + } <var:t> := <nat:2> + <var:t> * <var:B> { <var:B> = <var:Q> \land <var:t> = <nat:2> \times <var:Q> ^ <nat:4> + <nat:1> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:2> } | , \verb | { <var:B> = <var:Q> \land <var:t> = <nat:2> \times <var:Q> ^ <nat:4> + <nat:1> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:2> } <var:t> := <nat:1> + <var:t> * <var:B> { <var:B> = <var:Q> \land <var:t> = <nat:2> \times <var:Q> ^ <nat:5> + <nat:1> \times <var:Q> ^ <nat:4> + <nat:1> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> + <nat:1> } | and \verb | { <var:B> = <var:Q> \land <var:t> = <nat:2> \times <var:Q> ^ <nat:5> + <nat:1> \times <var:Q> ^ <nat:4> + <nat:1> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> + <nat:1> } <var:t> := <nat:4> + <var:t> * <var:B> { <var:B> = <var:Q> \land <var:t> = <nat:2> \times <var:Q> ^ <nat:6> + <nat:1> \times <var:Q> ^ <nat:5> + <nat:1> \times <var:Q> ^ <nat:4> + <nat:2> \times <var:Q> ^ <nat:2> + <nat:1> \times <var:Q> + <nat:4> } | . This is rigorously given through the environment update rule in usual Hoare reasoning . Moving on to the subsequent command in our set of instructions , \verb | { <var:B> = <var:Q> } <var:t> := <nat:2> { <var:B> = <var:Q> \land <var:t> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:t> := <nat:2> ; <var:t> := <nat:1> + <var:t> * <var:B> ; <var:t> := <nat:1> + <var:t> * <var:B> ; <var:t> := <var:t> * <var:B> ; <var:t> := <nat:2> + <var:t> * <var:B> ; <var:t> := <nat:1> + <var:t> * <var:B> ; <var:t> := <nat:4> + <var:t> * <var:B> ; <var:t> := <nat:4> + <var:t> * <var:B> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:B> = <var:Q> }} <def:poly> {{ <var:t> = <nat:2> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:t> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:t> = <nat:2> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:t> = <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:t> = <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:t> = <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:t> = <nat:2> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:t> = <nat:2> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:Q> /\ <var:t> = <nat:2> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 