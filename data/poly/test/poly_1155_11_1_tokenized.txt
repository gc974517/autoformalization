\begin{document} \begin{theorem} Take the following set of commands as follows \begin{verbatim} <var:f1> := <var:k> ; <var:f2> := <var:f1> * <var:k> ; <var:f3> := <var:f2> * <var:k> ; <var:f0> := <nat:3> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:2> ; <var:f3> := <var:f3> * <nat:3> ; <var:b> := <var:f3> <var:b> := <var:b> + <var:f2> <var:b> := <var:b> + <var:f1> <var:b> := <var:b> + <var:f0> \end{verbatim} Allow that $ <var:k> = <var:j> $ ( for all $ <var:j> $ ) ahead of evaluating the code it follows that we have $ <var:b> = <nat:3> \times <var:j> ^ <nat:3> + <nat:2> \times <var:j> ^ <nat:2> + <nat:5> \times <var:j> + <nat:3> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques results in : \begin{eqnarray} \{ <var:k> = <var:j> \} \\ <var:f1> := <var:k> ; \\ \{ <var:k> = <var:j> \land <var:f1> = <var:j> \} \\ <var:f2> := <var:f1> * <var:k> ; \\ \{ <var:k> = <var:j> \land <var:f1> = <var:j> \land <var:f2> = <var:j> ^ <nat:2> \} \\ <var:f3> := <var:f2> * <var:k> ; \\ \{ <var:k> = <var:j> \land <var:f1> = <var:j> \land <var:f2> = <var:j> ^ <nat:2> \land <var:f3> = <var:j> ^ <nat:3> \} \\ <var:f0> := <nat:3> ; \\ \{ <var:k> = <var:j> \land <var:f1> = <var:j> \land <var:f2> = <var:j> ^ <nat:2> \land <var:f3> = <var:j> ^ <nat:3> \land <var:f0> = <nat:3> \} \\ <var:f1> := <var:f1> * <nat:5> ; \\ \{ <var:k> = <var:j> \land <var:f1> = <nat:5> * <var:j> \land <var:f2> = <var:j> ^ <nat:2> \land <var:f3> = <var:j> ^ <nat:3> \land <var:f0> = <nat:3> \} \\ <var:f2> := <var:f2> * <nat:2> ; \\ \{ <var:k> = <var:j> \land <var:f1> = <nat:5> * <var:j> \land <var:f2> = <nat:2> * <var:j> ^ <nat:2> \land <var:f3> = <var:j> ^ <nat:3> \land <var:f0> = <nat:3> \} \\ <var:f3> := <var:f3> * <nat:3> ; \\ \{ <var:k> = <var:j> \land <var:f1> = <nat:5> * <var:j> \land <var:f2> = <nat:2> * <var:j> ^ <nat:2> \land <var:f3> = <nat:3> * <var:j> ^ <nat:3> \land <var:f0> = <nat:3> \} \\ <var:b> := <var:f3> \\ \{ <var:k> = <var:j> \land <var:f1> = <nat:5> * <var:j> \land <var:f2> = <nat:2> * <var:j> ^ <nat:2> \land <var:f0> = <nat:3> \land <var:b> = <nat:3> * <var:j> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:f2> \\ \{ <var:k> = <var:j> \land <var:f1> = <nat:5> * <var:j> \land <var:f0> = <nat:3> \land <var:b> = <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> \} \\ <var:b> := <var:b> + <var:f1> \\ \{ <var:k> = <var:j> \land <var:f0> = <nat:3> \land <var:b> = <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:5> * <var:j> \} \\ <var:b> := <var:b> + <var:f0> \\ \{ <var:k> = <var:j> \land <var:b> = <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:3> \} \end{eqnarray} Considering the preceding argument , this set of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:k> = <var:j> }} <var:f1> := <var:k> ; <var:f2> := <var:f1> * <var:k> ; <var:f3> := <var:f2> * <var:k> ; <var:f0> := <nat:3> ; <var:f1> := <var:f1> * <nat:5> ; <var:f2> := <var:f2> * <nat:2> ; <var:f3> := <var:f3> * <nat:3> ; <var:b> := <var:f3> <var:b> := <var:b> + <var:f2> <var:b> := <var:b> + <var:f1> <var:b> := <var:b> + <var:f0> {{ <var:b> = <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:f1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:f1> = <var:j> /\ <var:f2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:f1> = <var:j> /\ <var:f2> = <var:j> ^ <nat:2> /\ <var:f3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:f1> = <var:j> /\ <var:f2> = <var:j> ^ <nat:2> /\ <var:f3> = <var:j> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:f1> = <nat:5> * <var:j> /\ <var:f2> = <var:j> ^ <nat:2> /\ <var:f3> = <var:j> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:f1> = <nat:5> * <var:j> /\ <var:f2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:f3> = <var:j> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:f1> = <nat:5> * <var:j> /\ <var:f2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:f3> = <nat:3> * <var:j> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:f1> = <nat:5> * <var:j> /\ <var:f2> = <nat:2> * <var:j> ^ <nat:2> /\ <var:f0> = <nat:3> /\ <var:b> = <nat:3> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:f1> = <nat:5> * <var:j> /\ <var:f0> = <nat:3> /\ <var:b> = <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:f0> = <nat:3> /\ <var:b> = <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:5> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:j> /\ <var:b> = <nat:3> * <var:j> ^ <nat:3> + <nat:2> * <var:j> ^ <nat:2> + <nat:5> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 