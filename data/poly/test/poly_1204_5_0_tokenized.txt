\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:6> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:t> ; <var:h> := <var:W1> ; <var:h> := <var:h> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:t> = <var:R> $ --- for every $ <var:R> \in \mathbb{N} $ --- ahead of running the series of commands it holds that we see $ <var:h> = <nat:2> \cdot <var:R> + <nat:6> $ after set of instructions executes . \end{theorem} \begin{proof} The method of proof for our segment of code is demonstrated with Hoare techniques . Moving on , we have the statement \verb | <var:W0> := <nat:6> ; | . This forwards $ \{ <var:t> = <var:R> \} $ toward the condition $ \{ <var:t> = <var:R> \land <var:W0> = <nat:6> \} $ . This is sound using the assignment scheme obtained from standard Hoare logic . Jumping to the following line of code seen in the segment of code , we have the variable assignmet code binding $ <nat:2> $ to $ <var:W1>$ . This redefines $ \{ <var:t> = <var:R> \land <var:W0> = <nat:6> \} $ as the condition $ \{ <var:t> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \} $ . This is rigorously given by the assignment rule in Hoare techniques . Moving on to the upcoming line of code seen in our code segment , we see the command assigning $ <var:W1> * <var:t> $ toward $ <var:W1>$ . This statement redefines $ \{ <var:t> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \} $ toward the postcondition $ \{ <var:t> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \times <var:R> \} $ . This is deduced through the assignment law found in Hoare techniques . Observing the next line of code seen in our list of commands , the line giving $ <var:W1> $ toward $ <var:h>$ . This advances $ \{ <var:t> = <var:R> \land <var:W0> = <nat:6> \land <var:W1> = <nat:2> \times <var:R> \} $ into $ \{ <var:t> = <var:R> \land <var:W0> = <nat:6> \land <var:h> = <nat:2> \times <var:R> \} $ . Going to the next step , we have the assignment line \verb | <var:h> := <var:h> + <var:W0> | . This takes $ \{ <var:t> = <var:R> \land <var:W0> = <nat:6> \land <var:h> = <nat:2> \times <var:R> \} $ into $ \{ <var:t> = <var:R> \land <var:h> = <nat:2> \times <var:R> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W0> := <nat:6> ; <var:W1> := <nat:2> ; <var:W1> := <var:W1> * <var:t> ; <var:h> := <var:W1> ; <var:h> := <var:h> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:t> = <var:R> }} <def:poly> {{ <var:h> = <nat:2> * <var:R> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:R> /\ <var:W0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:R> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:R> /\ <var:W0> = <nat:6> /\ <var:W1> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:R> /\ <var:W0> = <nat:6> /\ <var:h> = <nat:2> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:R> /\ <var:h> = <nat:2> * <var:R> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 