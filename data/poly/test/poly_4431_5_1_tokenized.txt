\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:W1> := <var:B> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:2> ; <var:Y> := <var:W1> <var:Y> := <var:Y> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:B> = <var:z> $ before the execution of the set of instructions it holds that we see $ <var:Y> = <nat:2> \times <var:z> + <nat:3> $ after program exits . \end{theorem} \begin{proof} Notice the below decorated list of commands . \begin{eqnarray} \{ <var:B> = <var:z> \} \\ <var:W1> := <var:B> ; \\ \{ <var:B> = <var:z> \land <var:W1> = <var:z> \} \\ <var:W0> := <nat:3> ; \\ \{ <var:B> = <var:z> \land <var:W1> = <var:z> \land <var:W0> = <nat:3> \} \\ <var:W1> := <var:W1> * <nat:2> ; \\ \{ <var:B> = <var:z> \land <var:W1> = <nat:2> \times <var:z> \land <var:W0> = <nat:3> \} \\ <var:Y> := <var:W1> \\ \{ <var:B> = <var:z> \land <var:W0> = <nat:3> \land <var:Y> = <nat:2> \times <var:z> \} \\ <var:Y> := <var:Y> + <var:W0> \\ \{ <var:B> = <var:z> \land <var:Y> = <nat:2> \times <var:z> + <nat:3> \} \end{eqnarray} Using usual Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <def:poly> := <var:W1> := <var:B> ; <var:W0> := <nat:3> ; <var:W1> := <var:W1> * <nat:2> ; <var:Y> := <var:W1> <var:Y> := <var:Y> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:B> = <var:z> }} <def:poly> {{ <var:Y> = <nat:2> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:W1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:W1> = <var:z> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:W1> = <nat:2> * <var:z> /\ <var:W0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:W0> = <nat:3> /\ <var:Y> = <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:z> /\ <var:Y> = <nat:2> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 