\begin{document} \begin{definition} Take the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:w0> := <nat:2> ; <var:z> := <var:w0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of commands <def:poly> in \emph{Imp} . Allow that we have $ <var:g> = <var:p> $ prior to evaluating our code segment , it follows that we see $ <var:z> = <nat:2> $ after set of instructions is done . \end{theorem} \begin{proof} The flow of logic for our series of commands is done using standard Hoare reasoning . Considering the subsequent piece of code contained in the set of commands , we have \begin{verbatim} { <var:g> = <var:p> } <var:w0> := <nat:2> { <var:g> = <var:p> \land <var:w0> = <nat:2> } \end{verbatim} This is rigorously given with the variable binding law defined in Hoare reasoning . Going forward , we see \begin{verbatim} { <var:g> = <var:p> } <var:w0> := <nat:2> { <var:g> = <var:p> \land <var:w0> = <nat:2> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <def:poly> := <var:w0> := <nat:2> ; <var:z> := <var:w0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:g> = <var:p> }} <def:poly> {{ <var:z> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:z> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 