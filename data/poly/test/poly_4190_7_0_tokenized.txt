\begin{document} \begin{definition} Define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:V0> := <nat:4> ; <var:V3> := <nat:4> ; <var:V3> := <var:V3> * <var:L> ; <var:V3> := <var:V3> * <var:L> ; <var:V3> := <var:V3> * <var:L> ; <var:K> := <var:V3> ; <var:K> := <var:K> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> in \emph{Imp} . Allow that $ <var:L> = <var:n> $ ahead of executing this code it must be that we see $ <var:K> = <nat:4> \times <var:n> ^ <nat:3> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of instructions can be demonstrated with typical Hoare logic . Advancing to the next step , we have \begin{verbatim} { <var:L> = <var:n> } <var:V0> := <nat:4> { <var:L> = <var:n> \land <var:V0> = <nat:4> } { <var:L> = <var:n> \land <var:V0> = <nat:4> } <var:V3> := <nat:4> { <var:L> = <var:n> \land <var:V0> = <nat:4> \land <var:V3> = <nat:4> } \end{verbatim} Honing in on the proceeding bits of codecontained in our code segment , \begin{verbatim} { <var:L> = <var:n> } <var:V0> := <nat:4> { <var:L> = <var:n> \land <var:V0> = <nat:4> } { <var:L> = <var:n> \land <var:V0> = <nat:4> } <var:V3> := <nat:4> { <var:L> = <var:n> \land <var:V0> = <nat:4> \land <var:V3> = <nat:4> } \end{verbatim} Paying attention to the subsequent bits of codefound in the code segment , \begin{verbatim} { <var:L> = <var:n> } <var:V0> := <nat:4> { <var:L> = <var:n> \land <var:V0> = <nat:4> } { <var:L> = <var:n> \land <var:V0> = <nat:4> } <var:V3> := <nat:4> { <var:L> = <var:n> \land <var:V0> = <nat:4> \land <var:V3> = <nat:4> } \end{verbatim} Taking another step toward the subsequent piece of code contained in the list of commands , \begin{verbatim} { <var:L> = <var:n> } <var:V0> := <nat:4> { <var:L> = <var:n> \land <var:V0> = <nat:4> } \end{verbatim} This is shown through the variable binding scheme of usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V3> : string := " <var:V3> " . Definition <def:poly> := <var:V0> := <nat:4> ; <var:V3> := <nat:4> ; <var:V3> := <var:V3> * <var:L> ; <var:V3> := <var:V3> * <var:L> ; <var:V3> := <var:V3> * <var:L> ; <var:K> := <var:V3> ; <var:K> := <var:K> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:L> = <var:n> }} <def:poly> {{ <var:K> = <nat:4> * <var:n> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:V0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:V0> = <nat:4> /\ <var:V3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:V0> = <nat:4> /\ <var:V3> = <nat:4> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:V0> = <nat:4> /\ <var:V3> = <nat:4> * <var:n> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:V0> = <nat:4> /\ <var:V3> = <nat:4> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:V0> = <nat:4> /\ <var:K> = <nat:4> * <var:n> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:n> /\ <var:K> = <nat:4> * <var:n> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 