\begin{document} \begin{definition} Consider the following code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:7> ; <var:A1> := <nat:8> ; <var:A1> := <var:A1> * <var:t> ; <var:A2> := <nat:6> ; <var:A2> := <var:A2> * <var:t> ; <var:A2> := <var:A2> * <var:t> ; <var:A3> := <nat:3> ; <var:A3> := <var:A3> * <var:t> ; <var:A3> := <var:A3> * <var:t> ; <var:A3> := <var:A3> * <var:t> ; <var:K> := <var:A3> ; <var:K> := <var:K> + <var:A2> ; <var:K> := <var:K> + <var:A1> ; <var:K> := <var:K> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:t> = <var:C> $ ahead of interpreting the set of instructions then we have $ <var:K> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:7> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning results in : \begin{eqnarray} \{ <var:t> = <var:C> \} \\ <var:A0> := <nat:7> ; \\ \{ <var:t> = <var:C> \land <var:A0> = <nat:7> \} \\ <var:A1> := <nat:8> ; \\ \{ <var:t> = <var:C> \land <var:A0> = <nat:7> \land <var:A1> = <nat:8> \} \\ <var:A1> := <var:A1> * <var:t> ; \\ \{ <var:t> = <var:C> \land <var:A0> = <nat:7> \land <var:A1> = <nat:8> \cdot <var:C> \} \\ <var:A2> := <nat:6> ; \\ \{ <var:t> = <var:C> \land <var:A0> = <nat:7> \land <var:A1> = <nat:8> \cdot <var:C> \land <var:A2> = <nat:6> \} \\ <var:A2> := <var:A2> * <var:t> ; \\ \{ <var:t> = <var:C> \land <var:A0> = <nat:7> \land <var:A1> = <nat:8> \cdot <var:C> \land <var:A2> = <nat:6> \cdot <var:C> \} \\ <var:A2> := <var:A2> * <var:t> ; \\ \{ <var:t> = <var:C> \land <var:A0> = <nat:7> \land <var:A1> = <nat:8> \cdot <var:C> \land <var:A2> = <nat:6> \cdot <var:C> ^ <nat:2> \} \\ <var:A3> := <nat:3> ; \\ \{ <var:t> = <var:C> \land <var:A0> = <nat:7> \land <var:A1> = <nat:8> \cdot <var:C> \land <var:A2> = <nat:6> \cdot <var:C> ^ <nat:2> \land <var:A3> = <nat:3> \} \\ <var:A3> := <var:A3> * <var:t> ; \\ \{ <var:t> = <var:C> \land <var:A0> = <nat:7> \land <var:A1> = <nat:8> \cdot <var:C> \land <var:A2> = <nat:6> \cdot <var:C> ^ <nat:2> \land <var:A3> = <nat:3> \cdot <var:C> \} \\ <var:A3> := <var:A3> * <var:t> ; \\ \{ <var:t> = <var:C> \land <var:A0> = <nat:7> \land <var:A1> = <nat:8> \cdot <var:C> \land <var:A2> = <nat:6> \cdot <var:C> ^ <nat:2> \land <var:A3> = <nat:3> \cdot <var:C> ^ <nat:2> \} \\ <var:A3> := <var:A3> * <var:t> ; \\ \{ <var:t> = <var:C> \land <var:A0> = <nat:7> \land <var:A1> = <nat:8> \cdot <var:C> \land <var:A2> = <nat:6> \cdot <var:C> ^ <nat:2> \land <var:A3> = <nat:3> \cdot <var:C> ^ <nat:3> \} \\ <var:K> := <var:A3> ; \\ \{ <var:t> = <var:C> \land <var:A0> = <nat:7> \land <var:A1> = <nat:8> \cdot <var:C> \land <var:A2> = <nat:6> \cdot <var:C> ^ <nat:2> \land <var:K> = <nat:3> \cdot <var:C> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:A2> ; \\ \{ <var:t> = <var:C> \land <var:A0> = <nat:7> \land <var:A1> = <nat:8> \cdot <var:C> \land <var:K> = <nat:3> \cdot <var:C> ^ <nat:3> + <nat:6> \cdot <var:C> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:A1> ; \\ \{ <var:t> = <var:C> \land <var:A0> = <nat:7> \land <var:K> = <nat:3> \cdot <var:C> ^ <nat:3> + <nat:6> \cdot <var:C> ^ <nat:2> + <nat:8> \cdot <var:C> \} \\ <var:K> := <var:K> + <var:A0> \\ \{ <var:t> = <var:C> \land <var:K> = <nat:3> \cdot <var:C> ^ <nat:3> + <nat:6> \cdot <var:C> ^ <nat:2> + <nat:8> \cdot <var:C> + <nat:7> \} \end{eqnarray} As a consequence , our series of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <var:A3> : string := " <var:A3> " . Definition <def:poly> := <var:A0> := <nat:7> ; <var:A1> := <nat:8> ; <var:A1> := <var:A1> * <var:t> ; <var:A2> := <nat:6> ; <var:A2> := <var:A2> * <var:t> ; <var:A2> := <var:A2> * <var:t> ; <var:A3> := <nat:3> ; <var:A3> := <var:A3> * <var:t> ; <var:A3> := <var:A3> * <var:t> ; <var:A3> := <var:A3> * <var:t> ; <var:K> := <var:A3> ; <var:K> := <var:K> + <var:A2> ; <var:K> := <var:K> + <var:A1> ; <var:K> := <var:K> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:t> = <var:C> }} <def:poly> {{ <var:K> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:A0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:8> * <var:C> /\ <var:A2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:8> * <var:C> /\ <var:A2> = <nat:6> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:8> * <var:C> /\ <var:A2> = <nat:6> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:8> * <var:C> /\ <var:A2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:A3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:8> * <var:C> /\ <var:A2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:A3> = <nat:3> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:8> * <var:C> /\ <var:A2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:A3> = <nat:3> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:8> * <var:C> /\ <var:A2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:A3> = <nat:3> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:8> * <var:C> /\ <var:A2> = <nat:6> * <var:C> ^ <nat:2> /\ <var:K> = <nat:3> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:A0> = <nat:7> /\ <var:A1> = <nat:8> * <var:C> /\ <var:K> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:A0> = <nat:7> /\ <var:K> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:C> /\ <var:K> = <nat:3> * <var:C> ^ <nat:3> + <nat:6> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 