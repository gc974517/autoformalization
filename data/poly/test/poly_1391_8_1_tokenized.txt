\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U1> := <var:E> ; <var:U2> := <var:U1> * <var:E> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:5> ; <var:U2> := <var:U2> * <nat:1> ; <var:z> := <var:U2> <var:z> := <var:z> + <var:U1> <var:z> := <var:z> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Consider a code <def:poly> in \emph{Imp} . Allow it to be that $ <var:E> = <var:v> $ ahead of interpreting our list of instructions , then we have $ <var:z> = <nat:1> \cdot <var:v> ^ <nat:2> + <nat:5> \cdot <var:v> + <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of this program is shown through usual Hoare techniques . Focusing on the following bits of codeseen in the list of commands , \begin{eqnarray} \{ <var:E> = <var:v> \} \, <var:U1> := <var:E> \, \{ <var:E> = <var:v> \land <var:U1> = <var:v> \} \\ \{ <var:E> = <var:v> \land <var:U1> = <var:v> \} \, <var:U2> := <var:U1> * <var:E> \, \{ <var:E> = <var:v> \land <var:U1> = <var:v> \land <var:U2> = <var:v> ^ <nat:2> \} \\ \{ <var:E> = <var:v> \land <var:U1> = <var:v> \land <var:U2> = <var:v> ^ <nat:2> \} \, <var:U0> := <nat:3> \, \{ <var:E> = <var:v> \land <var:U1> = <var:v> \land <var:U2> = <var:v> ^ <nat:2> \land <var:U0> = <nat:3> \} \\ \{ <var:E> = <var:v> \land <var:U1> = <var:v> \land <var:U2> = <var:v> ^ <nat:2> \land <var:U0> = <nat:3> \} \, <var:U1> := <var:U1> * <nat:5> \, \{ <var:E> = <var:v> \land <var:U1> = <nat:5> \cdot <var:v> \land <var:U2> = <var:v> ^ <nat:2> \land <var:U0> = <nat:3> \} \end{eqnarray} Going forward , \begin{eqnarray} \{ <var:E> = <var:v> \} \, <var:U1> := <var:E> \, \{ <var:E> = <var:v> \land <var:U1> = <var:v> \} \end{eqnarray} This is given with the variable update scheme given by Hoare logic . Moving forward to the following pieces of code seen in the list of instructions , \begin{eqnarray} \{ <var:E> = <var:v> \} \, <var:U1> := <var:E> \, \{ <var:E> = <var:v> \land <var:U1> = <var:v> \} \\ \{ <var:E> = <var:v> \land <var:U1> = <var:v> \} \, <var:U2> := <var:U1> * <var:E> \, \{ <var:E> = <var:v> \land <var:U1> = <var:v> \land <var:U2> = <var:v> ^ <nat:2> \} \end{eqnarray} This is deduced using the variable update scheme defined in typical Hoare logic . Moving forward to the subsequent line of code seen in our list of instructions , \begin{eqnarray} \{ <var:E> = <var:v> \} \, <var:U1> := <var:E> \, \{ <var:E> = <var:v> \land <var:U1> = <var:v> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <def:poly> := <var:U1> := <var:E> ; <var:U2> := <var:U1> * <var:E> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:5> ; <var:U2> := <var:U2> * <nat:1> ; <var:z> := <var:U2> <var:z> := <var:z> + <var:U1> <var:z> := <var:z> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:E> = <var:v> }} <def:poly> {{ <var:z> = <nat:1> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:U1> = <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:U1> = <var:v> /\ <var:U2> = <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:U1> = <var:v> /\ <var:U2> = <var:v> ^ <nat:2> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:U1> = <nat:5> * <var:v> /\ <var:U2> = <var:v> ^ <nat:2> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:U1> = <nat:5> * <var:v> /\ <var:U2> = <nat:1> * <var:v> ^ <nat:2> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:U1> = <nat:5> * <var:v> /\ <var:U0> = <nat:3> /\ <var:z> = <nat:1> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:U0> = <nat:3> /\ <var:z> = <nat:1> * <var:v> ^ <nat:2> + <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:v> /\ <var:z> = <nat:1> * <var:v> ^ <nat:2> + <nat:5> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 