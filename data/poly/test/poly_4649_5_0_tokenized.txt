\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:4> ; <var:N1> := <nat:5> ; <var:N1> := <var:N1> * <var:y> ; <var:L> := <var:N1> ; <var:L> := <var:L> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of commands <def:poly> . Allowing it to hold that $ <var:y> = <var:o> $ for natural numbers $ <var:o> $ before running this segment of code , it follows that we see $ <var:L> = <nat:5> * <var:o> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:y> = <var:o> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:y> = <var:o> \land <var:N0> = <nat:4> \} \\ <var:N1> := <nat:5> ; \\ \{ <var:y> = <var:o> \land <var:N0> = <nat:4> \land <var:N1> = <nat:5> \} \\ <var:N1> := <var:N1> * <var:y> ; \\ \{ <var:y> = <var:o> \land <var:N0> = <nat:4> \land <var:N1> = <nat:5> \times <var:o> \} \\ <var:L> := <var:N1> ; \\ \{ <var:y> = <var:o> \land <var:N0> = <nat:4> \land <var:L> = <nat:5> \times <var:o> \} \\ <var:L> := <var:L> + <var:N0> \\ \{ <var:y> = <var:o> \land <var:L> = <nat:5> \times <var:o> + <nat:4> \} \end{eqnarray} Using typical Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <def:poly> := <var:N0> := <nat:4> ; <var:N1> := <nat:5> ; <var:N1> := <var:N1> * <var:y> ; <var:L> := <var:N1> ; <var:L> := <var:L> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:y> = <var:o> }} <def:poly> {{ <var:L> = <nat:5> * <var:o> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:N0> = <nat:4> /\ <var:L> = <nat:5> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:o> /\ <var:L> = <nat:5> * <var:o> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 