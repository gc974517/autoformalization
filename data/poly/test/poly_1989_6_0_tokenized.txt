\begin{document} \begin{definition} Define a series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P0> := <nat:1> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:I> ; <var:P2> := <var:P2> * <var:I> ; <var:z> := <var:P2> ; <var:z> := <var:z> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:I> = <var:W> $ taking integers $ <var:W> $ prior to the evaluation of our program , then we have $ <var:z> = <nat:3> \times <var:W> ^ <nat:2> + <nat:1> $ when code has exited . \end{theorem} \begin{proof} The course of logic for the program is given by usual Hoare logic . Looking at the proceeding line of code seen in our series of instructions , we have the variable assignmet command assigning $ <nat:1> $ into $ <var:P0>$ . This forwards $ \{ <var:I> = <var:W> \} $ as the condition $ \{ <var:I> = <var:W> \land <var:P0> = <nat:1> \} $ . This is given through the assignment scheme defined in usual Hoare reasoning . Moving forward to the next step , the assignment statement \verb | <var:P2> := <nat:3> ; | . This advances the precondition $ \{ <var:I> = <var:W> \land <var:P0> = <nat:1> \} $ to the postcondition $ \{ <var:I> = <var:W> \land <var:P0> = <nat:1> \land <var:P2> = <nat:3> \} $ . Observing the proceeding piece of code found in our series of instructions , the variable binding code defining $ <var:P2> * <var:I> $ as $ <var:P2>$ . This command takes the precondition $ \{ <var:I> = <var:W> \land <var:P0> = <nat:1> \land <var:P2> = <nat:3> \} $ into the postcondition $ \{ <var:I> = <var:W> \land <var:P0> = <nat:1> \land <var:P2> = <nat:3> * <var:W> \} $ . This is ensured through the assignment rule of usual Hoare reasoning . Considering the upcoming piece of code seen in the series of instructions , we see the environment update code defining $ <var:P2> * <var:I> $ as $ <var:P2>$ . This statement takes $ \{ <var:I> = <var:W> \land <var:P0> = <nat:1> \land <var:P2> = <nat:3> * <var:W> \} $ to the postcondition $ \{ <var:I> = <var:W> \land <var:P0> = <nat:1> \land <var:P2> = <nat:3> * <var:W> ^ <nat:2> \} $ . This is ensured using the assignment scheme given by Hoare logic . Honing in on the proceeding command contained in the program , we see the environment update command \verb | <var:z> := <var:P2> ; | . This transfers $ \{ <var:I> = <var:W> \land <var:P0> = <nat:1> \land <var:P2> = <nat:3> * <var:W> ^ <nat:2> \} $ as the postcondition $ \{ <var:I> = <var:W> \land <var:P0> = <nat:1> \land <var:z> = <nat:3> * <var:W> ^ <nat:2> \} $ . Looking at the upcoming line of code seen in the set of commands , the environment update code assigning $ <var:z> + <var:P0$ as $ <var:z>$ . This command redefines the condition $ \{ <var:I> = <var:W> \land <var:P0> = <nat:1> \land <var:z> = <nat:3> * <var:W> ^ <nat:2> \} $ to the postcondition $ \{ <var:I> = <var:W> \land <var:z> = <nat:3> * <var:W> ^ <nat:2> + <nat:1> \} $ . This is rigorously given with the assignment scheme in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P2> : string := " <var:P2> " . Definition <def:poly> := <var:P0> := <nat:1> ; <var:P2> := <nat:3> ; <var:P2> := <var:P2> * <var:I> ; <var:P2> := <var:P2> * <var:I> ; <var:z> := <var:P2> ; <var:z> := <var:z> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:I> = <var:W> }} <def:poly> {{ <var:z> = <nat:3> * <var:W> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:P0> = <nat:1> /\ <var:P2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:P0> = <nat:1> /\ <var:P2> = <nat:3> * <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:P0> = <nat:1> /\ <var:P2> = <nat:3> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:P0> = <nat:1> /\ <var:z> = <nat:3> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:W> /\ <var:z> = <nat:3> * <var:W> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 