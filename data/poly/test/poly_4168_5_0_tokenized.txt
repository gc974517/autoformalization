\begin{document} \begin{theorem} Take a program such that \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:g> ; <var:D> := <var:w1> ; <var:D> := <var:D> + <var:w0> \end{verbatim} Allow , for some positive numbers $ <var:B> $ , it to be that $ <var:g> = <var:B> $ ahead of running the list of commands it must be that $ <var:D> = <nat:2> * <var:B> + <nat:3> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning returns : \begin{eqnarray} \{ <var:g> = <var:B> \} \\ <var:w0> := <nat:3> ; \\ \{ <var:g> = <var:B> \land <var:w0> = <nat:3> \} \\ <var:w1> := <nat:2> ; \\ \{ <var:g> = <var:B> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \} \\ <var:w1> := <var:w1> * <var:g> ; \\ \{ <var:g> = <var:B> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> \cdot <var:B> \} \\ <var:D> := <var:w1> ; \\ \{ <var:g> = <var:B> \land <var:w0> = <nat:3> \land <var:D> = <nat:2> \cdot <var:B> \} \\ <var:D> := <var:D> + <var:w0> \\ \{ <var:g> = <var:B> \land <var:D> = <nat:2> \cdot <var:B> + <nat:3> \} \end{eqnarray} Given the preceding argument , our set of commands is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:g> = <var:B> }} <var:w0> := <nat:3> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:g> ; <var:D> := <var:w1> ; <var:D> := <var:D> + <var:w0> {{ <var:D> = <nat:2> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:w0> = <nat:3> /\ <var:D> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:B> /\ <var:D> = <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 