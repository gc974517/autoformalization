\begin{document} \begin{theorem} We define the following list of instructions in \emph{Imp} as follows \begin{verbatim} <var:z0> := <nat:6> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:F> ; <var:A> := <var:z1> ; <var:A> := <var:A> + <var:z0> \end{verbatim} Assuming --- for every $ <var:X> $ --- $ <var:F> = <var:X> $ before the evaluation of the code segment , it follows that we see $ <var:A> = <nat:8> \times <var:X> + <nat:6> $ . \end{theorem} \begin{proof} The application of standard Hoare reasoning yields : \begin{eqnarray} \{ <var:F> = <var:X> \} \\ <var:z0> := <nat:6> ; \\ \{ <var:F> = <var:X> \land <var:z0> = <nat:6> \} \\ <var:z1> := <nat:8> ; \\ \{ <var:F> = <var:X> \land <var:z0> = <nat:6> \land <var:z1> = <nat:8> \} \\ <var:z1> := <var:z1> * <var:F> ; \\ \{ <var:F> = <var:X> \land <var:z0> = <nat:6> \land <var:z1> = <nat:8> \cdot <var:X> \} \\ <var:A> := <var:z1> ; \\ \{ <var:F> = <var:X> \land <var:z0> = <nat:6> \land <var:A> = <nat:8> \cdot <var:X> \} \\ <var:A> := <var:A> + <var:z0> \\ \{ <var:F> = <var:X> \land <var:A> = <nat:8> \cdot <var:X> + <nat:6> \} \end{eqnarray} Thus , our code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:F> = <var:X> }} <var:z0> := <nat:6> ; <var:z1> := <nat:8> ; <var:z1> := <var:z1> * <var:F> ; <var:A> := <var:z1> ; <var:A> := <var:A> + <var:z0> {{ <var:A> = <nat:8> * <var:X> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:z0> = <nat:6> /\ <var:z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:z0> = <nat:6> /\ <var:z1> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:z0> = <nat:6> /\ <var:A> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:X> /\ <var:A> = <nat:8> * <var:X> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 