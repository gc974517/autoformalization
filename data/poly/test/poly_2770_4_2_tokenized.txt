\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q> := <nat:1> ; <var:Q> := <nat:2> + <var:Q> * <var:T> ; <var:Q> := <nat:1> + <var:Q> * <var:T> ; <var:Q> := <nat:3> + <var:Q> * <var:T> \end{verbatim} \end{definition} \begin{theorem} Take a segment of code <def:poly> . Assume $ <var:T> = <var:z> $ assuming some $ <var:z> \in \mathbb{Z}^+ $ before executing our list of instructions it must be that we have $ <var:Q> = <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:3> $ once list of instructions executes . \end{theorem} \begin{proof} The way to prove correctness for our series of instructions is demonstrated with typical Hoare logic . Taking a look at the proceeding line of code contained in the set of commands , we have the variable update command binding $ <nat:1> $ as $ <var:Q>$ . This code takes the precondition $ \{ <var:T> = <var:z> \} $ to the condition $ \{ <var:T> = <var:z> \land <var:Q> = <nat:1> \} $ . This is sound with the assignment scheme in Hoare techniques . Immediately following , we see the assignment code assigning $ <nat:2> + <var:Q> * <var:T> $ to $ <var:Q>$ . This moves $ \{ <var:T> = <var:z> \land <var:Q> = <nat:1> \} $ into the condition $ \{ <var:T> = <var:z> \land <var:Q> = <nat:1> * <var:z> + <nat:2> \} $ . This is deduced through the assignment inference rule in usual Hoare reasoning . Moving forward to the next step , we have the variable update statement binding $ <nat:1> + <var:Q> * <var:T> $ toward $ <var:Q>$ . This code moves $ \{ <var:T> = <var:z> \land <var:Q> = <nat:1> * <var:z> + <nat:2> \} $ to the postcondition $ \{ <var:T> = <var:z> \land <var:Q> = <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> \} $ . This is shown to be logically sound with the assignment law defined by typical Hoare logic . Stepping forward , we have the binding command \verb | <var:Q> := <nat:3> + <var:Q> * <var:T> | . This line transfers the condition $ \{ <var:T> = <var:z> \land <var:Q> = <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> \} $ toward the postcondition $ \{ <var:T> = <var:z> \land <var:Q> = <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> \} $ . This is sound using the assignment law defined in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:Q> := <nat:1> ; <var:Q> := <nat:2> + <var:Q> * <var:T> ; <var:Q> := <nat:1> + <var:Q> * <var:T> ; <var:Q> := <nat:3> + <var:Q> * <var:T> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:T> = <var:z> }} <def:poly> {{ <var:Q> = <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:z> /\ <var:Q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:z> /\ <var:Q> = <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:z> /\ <var:Q> = <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:z> /\ <var:Q> = <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 