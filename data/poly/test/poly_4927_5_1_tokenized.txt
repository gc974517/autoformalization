\begin{document} \begin{theorem} Define a code segment : \begin{verbatim} <var:o1> := <var:A> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:7> ; <var:X> := <var:o1> <var:X> := <var:X> + <var:o0> \end{verbatim} Given --- letting $ <var:B> \in \mathbb{Z}^+ $ --- $ <var:A> = <var:B> $ before evaluating this set of instructions , then $ <var:X> = <nat:7> \times <var:B> + <nat:7> $ . \end{theorem} \begin{proof} Observe that the following decorated set of commands . \begin{eqnarray} \{ <var:A> = <var:B> \} \\ <var:o1> := <var:A> ; \\ \{ <var:A> = <var:B> \land <var:o1> = <var:B> \} \\ <var:o0> := <nat:7> ; \\ \{ <var:A> = <var:B> \land <var:o1> = <var:B> \land <var:o0> = <nat:7> \} \\ <var:o1> := <var:o1> * <nat:7> ; \\ \{ <var:A> = <var:B> \land <var:o1> = <nat:7> \cdot <var:B> \land <var:o0> = <nat:7> \} \\ <var:X> := <var:o1> \\ \{ <var:A> = <var:B> \land <var:o0> = <nat:7> \land <var:X> = <nat:7> \cdot <var:B> \} \\ <var:X> := <var:X> + <var:o0> \\ \{ <var:A> = <var:B> \land <var:X> = <nat:7> \cdot <var:B> + <nat:7> \} \end{eqnarray} Using usual Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:A> = <var:B> }} <var:o1> := <var:A> ; <var:o0> := <nat:7> ; <var:o1> := <var:o1> * <nat:7> ; <var:X> := <var:o1> <var:X> := <var:X> + <var:o0> {{ <var:X> = <nat:7> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:o1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:o1> = <var:B> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:o1> = <nat:7> * <var:B> /\ <var:o0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:o0> = <nat:7> /\ <var:X> = <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:B> /\ <var:X> = <nat:7> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 