\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} : \begin{verbatim} <var:t0> := <nat:2> ; <var:P> := <var:t0> \end{verbatim} Given that $ <var:A> = <var:C> $ before running our code segment it must be that $ <var:P> = <nat:2> $ when series of instructions has exited . \end{theorem} \begin{proof} The flow of logic for the set of commands can be given by usual Hoare logic . Moving onward , we see the variable binding code \verb | <var:t0> := <nat:2> ; | . This line advances $ \{ <var:A> = <var:C> \} $ into $ \{ <var:A> = <var:C> \land <var:t0> = <nat:2> \} $ . This is ensured by the assignment rule from typical Hoare techniques . Honing in on the next command in the list of commands , we see the environment update code \verb | <var:P> := <var:t0> | . This statement redefines $ \{ <var:A> = <var:C> \land <var:t0> = <nat:2> \} $ into $ \{ <var:A> = <var:C> \land <var:P> = <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:A> = <var:C> }} <var:t0> := <nat:2> ; <var:P> := <var:t0> {{ <var:P> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:t0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:C> /\ <var:P> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 