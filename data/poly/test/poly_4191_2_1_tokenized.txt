\begin{document} \begin{theorem} Take a code such that \begin{verbatim} <var:W0> := <nat:1> ; <var:b> := <var:W0> \end{verbatim} Given with some $ <var:u> \in \mathbb{N} $ that $ <var:n> = <var:u> $ prior to evaluating the segment of code it follows that we have $ <var:b> = <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of commands is clear using usual Hoare logic . Stepping through , we see \begin{verbatim} { <var:n> = <var:u> } <var:W0> := <nat:1> { <var:n> = <var:u> \land <var:W0> = <nat:1> } { <var:n> = <var:u> \land <var:W0> = <nat:1> } <var:b> := <var:W0{ <var:n> = <var:u> \land <var:b> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:n> = <var:u> }} <var:W0> := <nat:1> ; <var:b> := <var:W0> {{ <var:b> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:W0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:u> /\ <var:b> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 