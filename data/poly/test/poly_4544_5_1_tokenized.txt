\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:N1> := <var:Q> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:9> ; <var:I> := <var:N1> <var:I> := <var:I> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:Q> = <var:P> $ --- for $ <var:P> \in \mathbb{N} $ --- prior to evaluating the series of instructions then we see $ <var:I> = <nat:9> * <var:P> + <nat:5> $ . \end{theorem} \begin{proof} The course of logic for this series of instructions is done by Hoare reasoning . Immediately after , the variable binding code \verb | <var:N1> := <var:Q> ; | . This advances $ \{ <var:Q> = <var:P> \} $ to the condition $ \{ <var:Q> = <var:P> \land <var:N1> = <var:P> \} $ . This is rigorously given using the assignment scheme defined in typical Hoare logic . Advancing to the upcoming step contained in the code , the environment update statement letting $ <nat:5> $ toward $ <var:N0>$ . This statement forwards the condition $ \{ <var:Q> = <var:P> \land <var:N1> = <var:P> \} $ into the condition $ \{ <var:Q> = <var:P> \land <var:N1> = <var:P> \land <var:N0> = <nat:5> \} $ . Moving forward to the next bit of code found in our program , we have the command \verb | <var:N1> := <var:N1> * <nat:9> ; | . This takes $ \{ <var:Q> = <var:P> \land <var:N1> = <var:P> \land <var:N0> = <nat:5> \} $ into $ \{ <var:Q> = <var:P> \land <var:N1> = <nat:9> \cdot <var:P> \land <var:N0> = <nat:5> \} $ . Considering the next line in our code segment , we see the binding statement \verb | <var:I> := <var:N1> | . This code transfers the precondition $ \{ <var:Q> = <var:P> \land <var:N1> = <nat:9> \cdot <var:P> \land <var:N0> = <nat:5> \} $ into $ \{ <var:Q> = <var:P> \land <var:N0> = <nat:5> \land <var:I> = <nat:9> \cdot <var:P> \} $ . Stepping forward , the assignment line \verb | <var:I> := <var:I> + <var:N0> | . This takes $ \{ <var:Q> = <var:P> \land <var:N0> = <nat:5> \land <var:I> = <nat:9> \cdot <var:P> \} $ as the condition $ \{ <var:Q> = <var:P> \land <var:I> = <nat:9> \cdot <var:P> + <nat:5> \} $ . This is ensured with the assignment law given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <def:poly> := <var:N1> := <var:Q> ; <var:N0> := <nat:5> ; <var:N1> := <var:N1> * <nat:9> ; <var:I> := <var:N1> <var:I> := <var:I> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:Q> = <var:P> }} <def:poly> {{ <var:I> = <nat:9> * <var:P> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:N1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:N1> = <var:P> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:N1> = <nat:9> * <var:P> /\ <var:N0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:N0> = <nat:5> /\ <var:I> = <nat:9> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:I> = <nat:9> * <var:P> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 