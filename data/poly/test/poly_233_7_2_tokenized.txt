\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:o> := <nat:3> ; <var:o> := <var:o> * <var:L> ; <var:o> := <nat:4> + <var:o> * <var:L> ; <var:o> := <nat:1> + <var:o> * <var:L> ; <var:o> := <nat:1> + <var:o> * <var:L> ; <var:o> := <nat:2> + <var:o> * <var:L> ; <var:o> := <nat:2> + <var:o> * <var:L> \end{verbatim} \end{definition} \begin{theorem} Allow --- for some integers $ <var:e> $ --- that we have $ <var:L> = <var:e> $ ahead of interpreting our list of instructions , it must be that we see $ <var:o> = <nat:3> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> $ once series of instructions finishes . \end{theorem} \begin{proof} The course of logic for this code can be accomplished by typical Hoare logic . Moving onward , we see the binding statement \verb | <var:o> := <nat:3> ; | . This line redefines $ \{ <var:L> = <var:e> \} $ into the condition $ \{ <var:L> = <var:e> \land <var:o> = <nat:3> \} $ . Taking a look at the next statement in the segment of code , we see the variable binding statement \verb | <var:o> := <var:o> * <var:L> ; | . This forwards the precondition $ \{ <var:L> = <var:e> \land <var:o> = <nat:3> \} $ into the postcondition $ \{ <var:L> = <var:e> \land <var:o> = <nat:3> \times <var:e> + \} $ . Moving on to the next piece of code contained in the code , we see the assignment statement \verb | <var:o> := <nat:4> + <var:o> * <var:L> ; | . This advances the precondition $ \{ <var:L> = <var:e> \land <var:o> = <nat:3> \times <var:e> + \} $ as the condition $ \{ <var:L> = <var:e> \land <var:o> = <nat:3> \times <var:e> ^ <nat:2> + <nat:4> \} $ . Honing in on the upcoming line in the series of instructions , we see the command binding $ <nat:1> + <var:o> * <var:L> $ toward $ <var:o>$ . This line takes $ \{ <var:L> = <var:e> \land <var:o> = <nat:3> \times <var:e> ^ <nat:2> + <nat:4> \} $ toward the condition $ \{ <var:L> = <var:e> \land <var:o> = <nat:3> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> + <nat:1> \} $ . Moving on , we have the environment update line yielding $ <nat:1> + <var:o> * <var:L> $ to $ <var:o>$ . This advances $ \{ <var:L> = <var:e> \land <var:o> = <nat:3> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> + <nat:1> \} $ as the postcondition $ \{ <var:L> = <var:e> \land <var:o> = <nat:3> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:1> \} $ . Moving on to the upcoming statement seen in our set of commands , we see the environment update command \verb | <var:o> := <nat:2> + <var:o> * <var:L> ; | . This command forwards the precondition $ \{ <var:L> = <var:e> \land <var:o> = <nat:3> \times <var:e> ^ <nat:4> + <nat:4> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:1> \} $ toward the postcondition $ \{ <var:L> = <var:e> \land <var:o> = <nat:3> \times <var:e> ^ <nat:5> + <nat:4> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:2> \} $ . Considering the following line of code seen in the code , the environment update command \verb | <var:o> := <nat:2> + <var:o> * <var:L> | . This line takes the precondition $ \{ <var:L> = <var:e> \land <var:o> = <nat:3> \times <var:e> ^ <nat:5> + <nat:4> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:1> \times <var:e> + <nat:2> \} $ as the postcondition $ \{ <var:L> = <var:e> \land <var:o> = <nat:3> \times <var:e> ^ <nat:6> + <nat:4> \times <var:e> ^ <nat:4> + <nat:1> \times <var:e> ^ <nat:3> + <nat:1> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:3> ; <var:o> := <var:o> * <var:L> ; <var:o> := <nat:4> + <var:o> * <var:L> ; <var:o> := <nat:1> + <var:o> * <var:L> ; <var:o> := <nat:1> + <var:o> * <var:L> ; <var:o> := <nat:2> + <var:o> * <var:L> ; <var:o> := <nat:2> + <var:o> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:L> = <var:e> }} <def:poly> {{ <var:o> = <nat:3> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:o> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:o> = <nat:3> * <var:e> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:o> = <nat:3> * <var:e> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:o> = <nat:3> * <var:e> ^ <nat:3> + <nat:4> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:o> = <nat:3> * <var:e> ^ <nat:4> + <nat:4> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:o> = <nat:3> * <var:e> ^ <nat:5> + <nat:4> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:e> /\ <var:o> = <nat:3> * <var:e> ^ <nat:6> + <nat:4> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 