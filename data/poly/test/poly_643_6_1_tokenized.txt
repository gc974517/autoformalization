\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:L1> := <var:P> ; <var:L2> := <var:L1> * <var:P> ; <var:L0> := <nat:5> ; <var:L2> := <var:L2> * <nat:1> ; <var:W> := <var:L2> <var:W> := <var:W> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:P> = <var:e> $ --- with some $ <var:e> \in \mathbb{N} $ --- ahead of running the set of instructions , it holds that we have $ <var:W> = <nat:1> * <var:e> ^ <nat:2> + <nat:5> $ when series of instructions has exited . \end{theorem} \begin{proof} Using standard Hoare reasoning yields : \begin{eqnarray} \{ <var:P> = <var:e> \} \\ <var:L1> := <var:P> ; \\ \{ <var:P> = <var:e> \land <var:L1> = <var:e> \} \\ <var:L2> := <var:L1> * <var:P> ; \\ \{ <var:P> = <var:e> \land <var:L1> = <var:e> \land <var:L2> = <var:e> ^ <nat:2> \} \\ <var:L0> := <nat:5> ; \\ \{ <var:P> = <var:e> \land <var:L1> = <var:e> \land <var:L2> = <var:e> ^ <nat:2> \land <var:L0> = <nat:5> \} \\ <var:L2> := <var:L2> * <nat:1> ; \\ \{ <var:P> = <var:e> \land <var:L1> = <var:e> \land <var:L2> = <nat:1> \times <var:e> ^ <nat:2> \land <var:L0> = <nat:5> \} \\ <var:W> := <var:L2> \\ \{ <var:P> = <var:e> \land <var:L1> = <var:e> \land <var:L0> = <nat:5> \land <var:W> = <nat:1> \times <var:e> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:L0> \\ \{ <var:P> = <var:e> \land <var:W> = <nat:1> \times <var:e> ^ <nat:2> + <nat:5> \} \end{eqnarray} Given the above , this code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <def:poly> := <var:L1> := <var:P> ; <var:L2> := <var:L1> * <var:P> ; <var:L0> := <nat:5> ; <var:L2> := <var:L2> * <nat:1> ; <var:W> := <var:L2> <var:W> := <var:W> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:P> = <var:e> }} <def:poly> {{ <var:W> = <nat:1> * <var:e> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:e> /\ <var:L1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:e> /\ <var:L1> = <var:e> /\ <var:L2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:e> /\ <var:L1> = <var:e> /\ <var:L2> = <var:e> ^ <nat:2> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:e> /\ <var:L1> = <var:e> /\ <var:L2> = <nat:1> * <var:e> ^ <nat:2> /\ <var:L0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:e> /\ <var:L1> = <var:e> /\ <var:L0> = <nat:5> /\ <var:W> = <nat:1> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:e> /\ <var:W> = <nat:1> * <var:e> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 