\begin{document} \begin{theorem} Define the following list of instructions : \begin{verbatim} <var:u> := <nat:4> ; <var:u> := <nat:2> + <var:u> * <var:K> ; <var:u> := <nat:2> + <var:u> * <var:K> ; <var:u> := <var:u> * <var:K> ; <var:u> := <nat:1> + <var:u> * <var:K> ; <var:u> := <nat:2> + <var:u> * <var:K> \end{verbatim} Allowing that we have $ <var:K> = <var:n> $ ahead of the evaluation of the set of instructions , then we have $ <var:u> = <nat:4> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:1> * <var:n> + <nat:2> $ after list of instructions is done executing . \end{theorem} \begin{proof} The flow of logic for the series of instructions can be shown through usual Hoare reasoning . Shifting focus toward the subsequent statements contained in our program , we see \begin{eqnarray} \{ <var:K> = <var:n> \} \, <var:u> := <nat:4> \, \{ <var:K> = <var:n> \land <var:u> = <nat:4> \} \\ \{ <var:K> = <var:n> \land <var:u> = <nat:4> \} \, <var:u> := <nat:2> + <var:u> * <var:K> \, \{ <var:K> = <var:n> \land <var:u> = <nat:4> \cdot <var:n> + <nat:2> \} \end{eqnarray} Moving forward to the following line of code contained in the series of instructions , \begin{eqnarray} \{ <var:K> = <var:n> \} \, <var:u> := <nat:4> \, \{ <var:K> = <var:n> \land <var:u> = <nat:4> \} \end{eqnarray} Paying attention to the upcoming steps seen in the list of instructions , \begin{eqnarray} \{ <var:K> = <var:n> \} \, <var:u> := <nat:4> \, \{ <var:K> = <var:n> \land <var:u> = <nat:4> \} \\ \{ <var:K> = <var:n> \land <var:u> = <nat:4> \} \, <var:u> := <nat:2> + <var:u> * <var:K> \, \{ <var:K> = <var:n> \land <var:u> = <nat:4> \cdot <var:n> + <nat:2> \} \\ \{ <var:K> = <var:n> \land <var:u> = <nat:4> \cdot <var:n> + <nat:2> \} \, <var:u> := <nat:2> + <var:u> * <var:K> \, \{ <var:K> = <var:n> \land <var:u> = <nat:4> \cdot <var:n> ^ <nat:2> + <nat:2> \cdot <var:n> + <nat:2> \} \end{eqnarray} This is known to be sound by the assignment inference rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:K> = <var:n> }} <var:u> := <nat:4> ; <var:u> := <nat:2> + <var:u> * <var:K> ; <var:u> := <nat:2> + <var:u> * <var:K> ; <var:u> := <var:u> * <var:K> ; <var:u> := <nat:1> + <var:u> * <var:K> ; <var:u> := <nat:2> + <var:u> * <var:K> {{ <var:u> = <nat:4> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:1> * <var:n> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:u> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:u> = <nat:4> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:u> = <nat:4> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:u> = <nat:4> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:u> = <nat:4> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:n> /\ <var:u> = <nat:4> * <var:n> ^ <nat:5> + <nat:2> * <var:n> ^ <nat:4> + <nat:2> * <var:n> ^ <nat:3> + <nat:1> * <var:n> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 