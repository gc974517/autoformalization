\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:s1> := <var:G> ; <var:s2> := <var:s1> * <var:G> ; <var:s3> := <var:s2> * <var:G> ; <var:s4> := <var:s3> * <var:G> ; <var:s0> := <nat:8> ; <var:s1> := <var:s1> * <nat:1> ; <var:s2> := <var:s2> * <nat:4> ; <var:s3> := <var:s3> * <nat:4> ; <var:s4> := <var:s4> * <nat:5> ; <var:k> := <var:s4> <var:k> := <var:k> + <var:s3> <var:k> := <var:k> + <var:s2> <var:k> := <var:k> + <var:s1> <var:k> := <var:k> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Define the following list of instructions <def:poly> in \emph{Imp} . Allow that $ <var:G> = <var:M> $ --- for $ <var:M> \in \mathbb{N} $ --- before running this list of instructions then $ <var:k> = <nat:5> \cdot <var:M> ^ <nat:4> + <nat:4> \cdot <var:M> ^ <nat:3> + <nat:4> \cdot <var:M> ^ <nat:2> + <nat:1> \cdot <var:M> + <nat:8> $ after code segment exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:M> \} \\ <var:s1> := <var:G> ; \\ \{ <var:G> = <var:M> \land <var:s1> = <var:M> \} \\ <var:s2> := <var:s1> * <var:G> ; \\ \{ <var:G> = <var:M> \land <var:s1> = <var:M> \land <var:s2> = <var:M> ^ <nat:2> \} \\ <var:s3> := <var:s2> * <var:G> ; \\ \{ <var:G> = <var:M> \land <var:s1> = <var:M> \land <var:s2> = <var:M> ^ <nat:2> \land <var:s3> = <var:M> ^ <nat:3> \} \\ <var:s4> := <var:s3> * <var:G> ; \\ \{ <var:G> = <var:M> \land <var:s1> = <var:M> \land <var:s2> = <var:M> ^ <nat:2> \land <var:s3> = <var:M> ^ <nat:3> \land <var:s4> = <var:M> ^ <nat:4> \} \\ <var:s0> := <nat:8> ; \\ \{ <var:G> = <var:M> \land <var:s1> = <var:M> \land <var:s2> = <var:M> ^ <nat:2> \land <var:s3> = <var:M> ^ <nat:3> \land <var:s4> = <var:M> ^ <nat:4> \land <var:s0> = <nat:8> \} \\ <var:s1> := <var:s1> * <nat:1> ; \\ \{ <var:G> = <var:M> \land <var:s1> = <nat:1> \times <var:M> \land <var:s2> = <var:M> ^ <nat:2> \land <var:s3> = <var:M> ^ <nat:3> \land <var:s4> = <var:M> ^ <nat:4> \land <var:s0> = <nat:8> \} \\ <var:s2> := <var:s2> * <nat:4> ; \\ \{ <var:G> = <var:M> \land <var:s1> = <nat:1> \times <var:M> \land <var:s2> = <nat:4> \times <var:M> ^ <nat:2> \land <var:s3> = <var:M> ^ <nat:3> \land <var:s4> = <var:M> ^ <nat:4> \land <var:s0> = <nat:8> \} \\ <var:s3> := <var:s3> * <nat:4> ; \\ \{ <var:G> = <var:M> \land <var:s1> = <nat:1> \times <var:M> \land <var:s2> = <nat:4> \times <var:M> ^ <nat:2> \land <var:s3> = <nat:4> \times <var:M> ^ <nat:3> \land <var:s4> = <var:M> ^ <nat:4> \land <var:s0> = <nat:8> \} \end{eqnarray} Furthering interpreting the set of instructions results in : \begin{eqnarray} <var:s4> := <var:s4> * <nat:5> ; \\ \{ <var:G> = <var:M> \land <var:s1> = <nat:1> \times <var:M> \land <var:s2> = <nat:4> \times <var:M> ^ <nat:2> \land <var:s3> = <nat:4> \times <var:M> ^ <nat:3> \land <var:s4> = <nat:5> \times <var:M> ^ <nat:4> \land <var:s0> = <nat:8> \} \\ <var:k> := <var:s4> \\ \{ <var:G> = <var:M> \land <var:s1> = <nat:1> \times <var:M> \land <var:s2> = <nat:4> \times <var:M> ^ <nat:2> \land <var:s3> = <nat:4> \times <var:M> ^ <nat:3> \land <var:s0> = <nat:8> \land <var:k> = <nat:5> \times <var:M> ^ <nat:4> \} \\ <var:k> := <var:k> + <var:s3> \\ \{ <var:G> = <var:M> \land <var:s1> = <nat:1> \times <var:M> \land <var:s2> = <nat:4> \times <var:M> ^ <nat:2> \land <var:s0> = <nat:8> \land <var:k> = <nat:5> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:s2> \\ \{ <var:G> = <var:M> \land <var:s1> = <nat:1> \times <var:M> \land <var:s0> = <nat:8> \land <var:k> = <nat:5> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:s1> \\ \{ <var:G> = <var:M> \land <var:s0> = <nat:8> \land <var:k> = <nat:5> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> \} \\ <var:k> := <var:k> + <var:s0> \\ \{ <var:G> = <var:M> \land <var:k> = <nat:5> \times <var:M> ^ <nat:4> + <nat:4> \times <var:M> ^ <nat:3> + <nat:4> \times <var:M> ^ <nat:2> + <nat:1> \times <var:M> + <nat:8> \} \end{eqnarray} Continuing executing our segment of code gives : \begin{eqnarray} \end{eqnarray} Applying typical Hoare reasoning accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <var:s3> : string := " <var:s3> " . Definition <var:s4> : string := " <var:s4> " . Definition <def:poly> := <var:s1> := <var:G> ; <var:s2> := <var:s1> * <var:G> ; <var:s3> := <var:s2> * <var:G> ; <var:s4> := <var:s3> * <var:G> ; <var:s0> := <nat:8> ; <var:s1> := <var:s1> * <nat:1> ; <var:s2> := <var:s2> * <nat:4> ; <var:s3> := <var:s3> * <nat:4> ; <var:s4> := <var:s4> * <nat:5> ; <var:k> := <var:s4> <var:k> := <var:k> + <var:s3> <var:k> := <var:k> + <var:s2> <var:k> := <var:k> + <var:s1> <var:k> := <var:k> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:G> = <var:M> }} <def:poly> {{ <var:k> = <nat:5> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:s1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:s1> = <var:M> /\ <var:s2> = <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:s1> = <var:M> /\ <var:s2> = <var:M> ^ <nat:2> /\ <var:s3> = <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:s1> = <var:M> /\ <var:s2> = <var:M> ^ <nat:2> /\ <var:s3> = <var:M> ^ <nat:3> /\ <var:s4> = <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:s1> = <var:M> /\ <var:s2> = <var:M> ^ <nat:2> /\ <var:s3> = <var:M> ^ <nat:3> /\ <var:s4> = <var:M> ^ <nat:4> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:s1> = <nat:1> * <var:M> /\ <var:s2> = <var:M> ^ <nat:2> /\ <var:s3> = <var:M> ^ <nat:3> /\ <var:s4> = <var:M> ^ <nat:4> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:s1> = <nat:1> * <var:M> /\ <var:s2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:s3> = <var:M> ^ <nat:3> /\ <var:s4> = <var:M> ^ <nat:4> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:s1> = <nat:1> * <var:M> /\ <var:s2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:s3> = <nat:4> * <var:M> ^ <nat:3> /\ <var:s4> = <var:M> ^ <nat:4> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:s1> = <nat:1> * <var:M> /\ <var:s2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:s3> = <nat:4> * <var:M> ^ <nat:3> /\ <var:s4> = <nat:5> * <var:M> ^ <nat:4> /\ <var:s0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:s1> = <nat:1> * <var:M> /\ <var:s2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:s3> = <nat:4> * <var:M> ^ <nat:3> /\ <var:s0> = <nat:8> /\ <var:k> = <nat:5> * <var:M> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:s1> = <nat:1> * <var:M> /\ <var:s2> = <nat:4> * <var:M> ^ <nat:2> /\ <var:s0> = <nat:8> /\ <var:k> = <nat:5> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:s1> = <nat:1> * <var:M> /\ <var:s0> = <nat:8> /\ <var:k> = <nat:5> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:s0> = <nat:8> /\ <var:k> = <nat:5> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:M> /\ <var:k> = <nat:5> * <var:M> ^ <nat:4> + <nat:4> * <var:M> ^ <nat:3> + <nat:4> * <var:M> ^ <nat:2> + <nat:1> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 