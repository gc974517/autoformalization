\begin{document} \begin{theorem} Take a series of instructions in \emph{Imp} such that \begin{verbatim} <var:d1> := <var:Z> ; <var:d2> := <var:d1> * <var:Z> ; <var:d3> := <var:d2> * <var:Z> ; <var:d4> := <var:d3> * <var:Z> ; <var:d0> := <nat:8> ; <var:d3> := <var:d3> * <nat:5> ; <var:d4> := <var:d4> * <nat:1> ; <var:b> := <var:d4> <var:b> := <var:b> + <var:d3> <var:b> := <var:b> + <var:d0> \end{verbatim} Allowing that we have $ <var:Z> = <var:c> $ given every natural coefficients $ <var:c> $ ahead of interpreting the code segment , it holds that we have $ <var:b> = <nat:1> \cdot <var:c> ^ <nat:4> + <nat:5> \cdot <var:c> ^ <nat:3> + <nat:8> $ after series of instructions has exited . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Z> = <var:c> \} \\ <var:d1> := <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:d1> = <var:c> \} \\ <var:d2> := <var:d1> * <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:d1> = <var:c> \land <var:d2> = <var:c> ^ <nat:2> \} \\ <var:d3> := <var:d2> * <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:d1> = <var:c> \land <var:d2> = <var:c> ^ <nat:2> \land <var:d3> = <var:c> ^ <nat:3> \} \\ <var:d4> := <var:d3> * <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:d1> = <var:c> \land <var:d2> = <var:c> ^ <nat:2> \land <var:d3> = <var:c> ^ <nat:3> \land <var:d4> = <var:c> ^ <nat:4> \} \\ <var:d0> := <nat:8> ; \\ \{ <var:Z> = <var:c> \land <var:d1> = <var:c> \land <var:d2> = <var:c> ^ <nat:2> \land <var:d3> = <var:c> ^ <nat:3> \land <var:d4> = <var:c> ^ <nat:4> \land <var:d0> = <nat:8> \} \\ <var:d3> := <var:d3> * <nat:5> ; \\ \{ <var:Z> = <var:c> \land <var:d1> = <var:c> \land <var:d2> = <var:c> ^ <nat:2> \land <var:d3> = <nat:5> \times <var:c> ^ <nat:3> \land <var:d4> = <var:c> ^ <nat:4> \land <var:d0> = <nat:8> \} \\ <var:d4> := <var:d4> * <nat:1> ; \\ \{ <var:Z> = <var:c> \land <var:d1> = <var:c> \land <var:d2> = <var:c> ^ <nat:2> \land <var:d3> = <nat:5> \times <var:c> ^ <nat:3> \land <var:d4> = <nat:1> \times <var:c> ^ <nat:4> \land <var:d0> = <nat:8> \} \\ <var:b> := <var:d4> \\ \{ <var:Z> = <var:c> \land <var:d1> = <var:c> \land <var:d2> = <var:c> ^ <nat:2> \land <var:d3> = <nat:5> \times <var:c> ^ <nat:3> \land <var:d0> = <nat:8> \land <var:b> = <nat:1> \times <var:c> ^ <nat:4> \} \\ <var:b> := <var:b> + <var:d3> \\ \{ <var:Z> = <var:c> \land <var:d1> = <var:c> \land <var:d2> = <var:c> ^ <nat:2> \land <var:d0> = <nat:8> \land <var:b> = <nat:1> \times <var:c> ^ <nat:4> + <nat:5> \times <var:c> ^ <nat:3> \} \\ <var:b> := <var:b> + <var:d0> \\ \{ <var:Z> = <var:c> \land <var:b> = <nat:1> \times <var:c> ^ <nat:4> + <nat:5> \times <var:c> ^ <nat:3> + <nat:8> \} \end{eqnarray} The application of usual Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Definition <var:d3> : string := " <var:d3> " . Definition <var:d4> : string := " <var:d4> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Z> = <var:c> }} <var:d1> := <var:Z> ; <var:d2> := <var:d1> * <var:Z> ; <var:d3> := <var:d2> * <var:Z> ; <var:d4> := <var:d3> * <var:Z> ; <var:d0> := <nat:8> ; <var:d3> := <var:d3> * <nat:5> ; <var:d4> := <var:d4> * <nat:1> ; <var:b> := <var:d4> <var:b> := <var:b> + <var:d3> <var:b> := <var:b> + <var:d0> {{ <var:b> = <nat:1> * <var:c> ^ <nat:4> + <nat:5> * <var:c> ^ <nat:3> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:d1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:d1> = <var:c> /\ <var:d2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:d1> = <var:c> /\ <var:d2> = <var:c> ^ <nat:2> /\ <var:d3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:d1> = <var:c> /\ <var:d2> = <var:c> ^ <nat:2> /\ <var:d3> = <var:c> ^ <nat:3> /\ <var:d4> = <var:c> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:d1> = <var:c> /\ <var:d2> = <var:c> ^ <nat:2> /\ <var:d3> = <var:c> ^ <nat:3> /\ <var:d4> = <var:c> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:d1> = <var:c> /\ <var:d2> = <var:c> ^ <nat:2> /\ <var:d3> = <nat:5> * <var:c> ^ <nat:3> /\ <var:d4> = <var:c> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:d1> = <var:c> /\ <var:d2> = <var:c> ^ <nat:2> /\ <var:d3> = <nat:5> * <var:c> ^ <nat:3> /\ <var:d4> = <nat:1> * <var:c> ^ <nat:4> /\ <var:d0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:d1> = <var:c> /\ <var:d2> = <var:c> ^ <nat:2> /\ <var:d3> = <nat:5> * <var:c> ^ <nat:3> /\ <var:d0> = <nat:8> /\ <var:b> = <nat:1> * <var:c> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:d1> = <var:c> /\ <var:d2> = <var:c> ^ <nat:2> /\ <var:d0> = <nat:8> /\ <var:b> = <nat:1> * <var:c> ^ <nat:4> + <nat:5> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:b> = <nat:1> * <var:c> ^ <nat:4> + <nat:5> * <var:c> ^ <nat:3> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 