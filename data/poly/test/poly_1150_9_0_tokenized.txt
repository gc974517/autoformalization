\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:l0> := <nat:6> ; <var:l1> := <nat:9> ; <var:l1> := <var:l1> * <var:V> ; <var:l2> := <nat:3> ; <var:l2> := <var:l2> * <var:V> ; <var:l2> := <var:l2> * <var:V> ; <var:R> := <var:l2> ; <var:R> := <var:R> + <var:l1> ; <var:R> := <var:R> + <var:l0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:V> = <var:i> $ given any positive numbers $ <var:i> $ ahead of executing the segment of code it holds that we have $ <var:R> = <nat:3> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:6> $ when set of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for this segment of code can be demonstrated with Hoare logic . Immediately after , we see the binding command binding $ <nat:6> $ to $ <var:l0>$ . This takes the precondition $ \{ <var:V> = <var:i> \} $ as the condition $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \} $ . Looking at the next step seen in our set of commands , the environment update command binding $ <nat:9> $ toward $ <var:l1>$ . This advances $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \} $ into the condition $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:l1> = <nat:9> \} $ . This is deduced by the assignment law from usual Hoare logic . Looking at the subsequent bit of code found in our program , the variable assignmet statement \verb | <var:l1> := <var:l1> * <var:V> ; | . This statement transfers the precondition $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:l1> = <nat:9> \} $ into the postcondition $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:l1> = <nat:9> \times <var:i> \} $ . Advancing to the subsequent statement found in the segment of code , the variable assignmet statement \verb | <var:l2> := <nat:3> ; | . This line transfers the precondition $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:l1> = <nat:9> \times <var:i> \} $ as $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:l1> = <nat:9> \times <var:i> \land <var:l2> = <nat:3> \} $ . This is shown to be logically sound by the assignment inference rule of typical Hoare logic . Taking another step toward the proceeding line of code in our set of commands , we see the binding command assigning $ <var:l2> * <var:V> $ toward $ <var:l2>$ . This moves $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:l1> = <nat:9> \times <var:i> \land <var:l2> = <nat:3> \} $ to the condition $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:l1> = <nat:9> \times <var:i> \land <var:l2> = <nat:3> \times <var:i> \} $ . Advancing on , the binding line \verb | <var:l2> := <var:l2> * <var:V> ; | . This advances the precondition $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:l1> = <nat:9> \times <var:i> \land <var:l2> = <nat:3> \times <var:i> \} $ to the condition $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:l1> = <nat:9> \times <var:i> \land <var:l2> = <nat:3> \times <var:i> ^ <nat:2> \} $ . This is guaranteed using the assignment scheme from usual Hoare reasoning . Taking another step toward the proceeding bit of code seen in our list of instructions , the environment update command assigning $ <var:l2> $ to $ <var:R>$ . This moves $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:l1> = <nat:9> \times <var:i> \land <var:l2> = <nat:3> \times <var:i> ^ <nat:2> \} $ toward $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:l1> = <nat:9> \times <var:i> \land <var:R> = <nat:3> \times <var:i> ^ <nat:2> \} $ . Immediately following , the variable assignmet line \verb | <var:R> := <var:R> + <var:l1> ; | . This forwards $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:l1> = <nat:9> \times <var:i> \land <var:R> = <nat:3> \times <var:i> ^ <nat:2> \} $ toward the postcondition $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:R> = <nat:3> \times <var:i> ^ <nat:2> + <nat:9> \times <var:i> \} $ . Moving onward , we see the variable update command \verb | <var:R> := <var:R> + <var:l0> | . This command redefines $ \{ <var:V> = <var:i> \land <var:l0> = <nat:6> \land <var:R> = <nat:3> \times <var:i> ^ <nat:2> + <nat:9> \times <var:i> \} $ to the condition $ \{ <var:V> = <var:i> \land <var:R> = <nat:3> \times <var:i> ^ <nat:2> + <nat:9> \times <var:i> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Definition <var:l2> : string := " <var:l2> " . Definition <def:poly> := <var:l0> := <nat:6> ; <var:l1> := <nat:9> ; <var:l1> := <var:l1> * <var:V> ; <var:l2> := <nat:3> ; <var:l2> := <var:l2> * <var:V> ; <var:l2> := <var:l2> * <var:V> ; <var:R> := <var:l2> ; <var:R> := <var:R> + <var:l1> ; <var:R> := <var:R> + <var:l0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:V> = <var:i> }} <def:poly> {{ <var:R> = <nat:3> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:9> * <var:i> /\ <var:l2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:9> * <var:i> /\ <var:l2> = <nat:3> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:9> * <var:i> /\ <var:l2> = <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:l0> = <nat:6> /\ <var:l1> = <nat:9> * <var:i> /\ <var:R> = <nat:3> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:l0> = <nat:6> /\ <var:R> = <nat:3> * <var:i> ^ <nat:2> + <nat:9> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:i> /\ <var:R> = <nat:3> * <var:i> ^ <nat:2> + <nat:9> * <var:i> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 