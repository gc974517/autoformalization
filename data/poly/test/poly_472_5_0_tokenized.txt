\begin{document} \begin{theorem} We define a code in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:4> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:N> ; <var:M> := <var:Q1> ; <var:M> := <var:M> + <var:Q0> \end{verbatim} Assume , given $ <var:c> $ , $ <var:N> = <var:c> $ before the execution of this list of instructions , it must be that we have $ <var:M> = <nat:9> * <var:c> + <nat:4> $ after series of commands exits . \end{theorem} \begin{proof} We can see that the following decorated code segment . \begin{eqnarray} \{ <var:N> = <var:c> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:N> = <var:c> \land <var:Q0> = <nat:4> \} \\ <var:Q1> := <nat:9> ; \\ \{ <var:N> = <var:c> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:9> \} \\ <var:Q1> := <var:Q1> * <var:N> ; \\ \{ <var:N> = <var:c> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:9> \cdot <var:c> \} \\ <var:M> := <var:Q1> ; \\ \{ <var:N> = <var:c> \land <var:Q0> = <nat:4> \land <var:M> = <nat:9> \cdot <var:c> \} \\ <var:M> := <var:M> + <var:Q0> \\ \{ <var:N> = <var:c> \land <var:M> = <nat:9> \cdot <var:c> + <nat:4> \} \end{eqnarray} Applying standard Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:N> = <var:c> }} <var:Q0> := <nat:4> ; <var:Q1> := <nat:9> ; <var:Q1> := <var:Q1> * <var:N> ; <var:M> := <var:Q1> ; <var:M> := <var:M> + <var:Q0> {{ <var:M> = <nat:9> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:c> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:c> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:c> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:9> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:c> /\ <var:Q0> = <nat:4> /\ <var:M> = <nat:9> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:c> /\ <var:M> = <nat:9> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 