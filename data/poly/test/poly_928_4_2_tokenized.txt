\begin{document} \begin{definition} We define a code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:N> := <nat:2> ; <var:N> := <nat:3> + <var:N> * <var:O> ; <var:N> := <nat:1> + <var:N> * <var:O> ; <var:N> := <nat:2> + <var:N> * <var:O> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:O> = <var:l> $ before interpreting this series of instructions it holds that $ <var:N> = <nat:2> \times <var:l> ^ <nat:3> + <nat:3> \times <var:l> ^ <nat:2> + <nat:1> \times <var:l> + <nat:2> $ . \end{theorem} \begin{proof} The proof of the code is accomplished using typical Hoare reasoning . Paying attention to the upcoming pieces of code contained in our series of commands , \[ \begin{tabular} {rcl} \{ <var:O> = <var:l> \} & <var:N> := <nat:2> & \{ <var:O> = <var:l> \land <var:N> = <nat:2> \} \\ \{ <var:O> = <var:l> \land <var:N> = <nat:2> \} & <var:N> := <nat:3> + <var:N> * <var:O> & \{ <var:O> = <var:l> \land <var:N> = <nat:2> \cdot <var:l> + <nat:3> \} \end{tabular} Shifting focus toward the subsequent pieces of code contained in our series of commands , we have \[ \begin{tabular} {rcl} \{ <var:O> = <var:l> \} & <var:N> := <nat:2> & \{ <var:O> = <var:l> \land <var:N> = <nat:2> \} \\ \{ <var:O> = <var:l> \land <var:N> = <nat:2> \} & <var:N> := <nat:3> + <var:N> * <var:O> & \{ <var:O> = <var:l> \land <var:N> = <nat:2> \cdot <var:l> + <nat:3> \} \end{tabular} This is deduced through the environment update rule obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:N> := <nat:2> ; <var:N> := <nat:3> + <var:N> * <var:O> ; <var:N> := <nat:1> + <var:N> * <var:O> ; <var:N> := <nat:2> + <var:N> * <var:O> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:O> = <var:l> }} <def:poly> {{ <var:N> = <nat:2> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:N> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:N> = <nat:2> * <var:l> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:N> = <nat:2> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:l> /\ <var:N> = <nat:2> * <var:l> ^ <nat:3> + <nat:3> * <var:l> ^ <nat:2> + <nat:1> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 