\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:D> := <nat:3> ; <var:D> := <nat:2> + <var:D> * <var:i> ; <var:D> := <nat:3> + <var:D> * <var:i> ; <var:D> := <nat:3> + <var:D> * <var:i> ; <var:D> := <nat:1> + <var:D> * <var:i> ; <var:D> := <nat:4> + <var:D> * <var:i> ; <var:D> := <nat:3> + <var:D> * <var:i> ; <var:D> := <nat:2> + <var:D> * <var:i> ; <var:D> := <var:D> * <var:i> ; <var:D> := <nat:2> + <var:D> * <var:i> ; <var:D> := <nat:3> + <var:D> * <var:i> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Allowing --- for any positive numbers $ <var:N> $ --- it to hold that $ <var:i> = <var:N> $ ahead of the execution of this set of commands , it follows that we see $ <var:D> = <nat:3> \times <var:N> ^ <nat:10> + <nat:2> \times <var:N> ^ <nat:9> + <nat:3> \times <var:N> ^ <nat:8> + <nat:3> \times <var:N> ^ <nat:7> + <nat:1> \times <var:N> ^ <nat:6> + <nat:4> \times <var:N> ^ <nat:5> + <nat:3> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> + <nat:3> $ after list of instructions has terminated . \end{theorem} \begin{proof} Using Hoare logic gives us : \begin{eqnarray} \{ <var:i> = <var:N> \} \\ <var:D> := <nat:3> ; \\ \{ <var:i> = <var:N> \land <var:D> = <nat:3> \} \\ <var:D> := <nat:2> + <var:D> * <var:i> ; \\ \{ <var:i> = <var:N> \land <var:D> = <nat:3> * <var:N> + <nat:2> \} \\ <var:D> := <nat:3> + <var:D> * <var:i> ; \\ \{ <var:i> = <var:N> \land <var:D> = <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:3> \} \\ <var:D> := <nat:3> + <var:D> * <var:i> ; \\ \{ <var:i> = <var:N> \land <var:D> = <nat:3> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> \} \\ <var:D> := <nat:1> + <var:D> * <var:i> ; \\ \{ <var:i> = <var:N> \land <var:D> = <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> \} \\ <var:D> := <nat:4> + <var:D> * <var:i> ; \\ \{ <var:i> = <var:N> \land <var:D> = <nat:3> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> \} \\ <var:D> := <nat:3> + <var:D> * <var:i> ; \\ \{ <var:i> = <var:N> \land <var:D> = <nat:3> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:3> \} \\ <var:D> := <nat:2> + <var:D> * <var:i> ; \\ \{ <var:i> = <var:N> \land <var:D> = <nat:3> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> \} \\ <var:D> := <var:D> * <var:i> ; \\ \{ <var:i> = <var:N> \land <var:D> = <nat:3> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + \} \\ <var:D> := <nat:2> + <var:D> * <var:i> ; \\ \{ <var:i> = <var:N> \land <var:D> = <nat:3> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> \} \\ <var:D> := <nat:3> + <var:D> * <var:i> \\ \{ <var:i> = <var:N> \land <var:D> = <nat:3> * <var:N> ^ <nat:10> + <nat:2> * <var:N> ^ <nat:9> + <nat:3> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> + <nat:3> \} \end{eqnarray} Thusly , this list of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:3> ; <var:D> := <nat:2> + <var:D> * <var:i> ; <var:D> := <nat:3> + <var:D> * <var:i> ; <var:D> := <nat:3> + <var:D> * <var:i> ; <var:D> := <nat:1> + <var:D> * <var:i> ; <var:D> := <nat:4> + <var:D> * <var:i> ; <var:D> := <nat:3> + <var:D> * <var:i> ; <var:D> := <nat:2> + <var:D> * <var:i> ; <var:D> := <var:D> * <var:i> ; <var:D> := <nat:2> + <var:D> * <var:i> ; <var:D> := <nat:3> + <var:D> * <var:i> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:i> = <var:N> }} <def:poly> {{ <var:D> = <nat:3> * <var:N> ^ <nat:10> + <nat:2> * <var:N> ^ <nat:9> + <nat:3> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:D> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:D> = <nat:3> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:D> = <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:D> = <nat:3> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:D> = <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:D> = <nat:3> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:D> = <nat:3> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:1> * <var:N> ^ <nat:2> + <nat:4> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:D> = <nat:3> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:D> = <nat:3> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:4> + <nat:4> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:D> = <nat:3> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:5> + <nat:4> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:N> /\ <var:D> = <nat:3> * <var:N> ^ <nat:10> + <nat:2> * <var:N> ^ <nat:9> + <nat:3> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:6> + <nat:4> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 