\begin{document} \begin{definition} Let the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:g> := <nat:3> ; <var:g> := <nat:2> + <var:g> * <var:h> ; <var:g> := <var:g> * <var:h> ; <var:g> := <var:g> * <var:h> ; <var:g> := <nat:4> + <var:g> * <var:h> ; <var:g> := <nat:1> + <var:g> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:h> = <var:T> $ prior to running the series of commands , it holds that we have $ <var:g> = <nat:3> \times <var:T> ^ <nat:5> + <nat:2> \times <var:T> ^ <nat:4> + <nat:4> \times <var:T> + <nat:1> $ when segment of code has terminated . \end{theorem} \begin{proof} Demonstrating correctness of this series of instructions is evident with usual Hoare reasoning . Immediately following , \begin{eqnarray} \{ <var:h> = <var:T> \} \, <var:g> := <nat:3> \, \{ <var:h> = <var:T> \land <var:g> = <nat:3> \} \\ \{ <var:h> = <var:T> \land <var:g> = <nat:3> \} \, <var:g> := <nat:2> + <var:g> * <var:h> \, \{ <var:h> = <var:T> \land <var:g> = <nat:3> * <var:T> + <nat:2> \} \\ \{ <var:h> = <var:T> \land <var:g> = <nat:3> * <var:T> + <nat:2> \} \, <var:g> := <var:g> * <var:h> \, \{ <var:h> = <var:T> \land <var:g> = <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + \} \end{eqnarray} Following , we see \begin{eqnarray} \{ <var:h> = <var:T> \} \, <var:g> := <nat:3> \, \{ <var:h> = <var:T> \land <var:g> = <nat:3> \} \\ \{ <var:h> = <var:T> \land <var:g> = <nat:3> \} \, <var:g> := <nat:2> + <var:g> * <var:h> \, \{ <var:h> = <var:T> \land <var:g> = <nat:3> * <var:T> + <nat:2> \} \\ \{ <var:h> = <var:T> \land <var:g> = <nat:3> * <var:T> + <nat:2> \} \, <var:g> := <var:g> * <var:h> \, \{ <var:h> = <var:T> \land <var:g> = <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:g> := <nat:3> ; <var:g> := <nat:2> + <var:g> * <var:h> ; <var:g> := <var:g> * <var:h> ; <var:g> := <var:g> * <var:h> ; <var:g> := <nat:4> + <var:g> * <var:h> ; <var:g> := <nat:1> + <var:g> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:h> = <var:T> }} <def:poly> {{ <var:g> = <nat:3> * <var:T> ^ <nat:5> + <nat:2> * <var:T> ^ <nat:4> + <nat:4> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:g> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:g> = <nat:3> * <var:T> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:g> = <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:g> = <nat:3> * <var:T> ^ <nat:3> + <nat:2> * <var:T> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:g> = <nat:3> * <var:T> ^ <nat:4> + <nat:2> * <var:T> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:T> /\ <var:g> = <nat:3> * <var:T> ^ <nat:5> + <nat:2> * <var:T> ^ <nat:4> + <nat:4> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 