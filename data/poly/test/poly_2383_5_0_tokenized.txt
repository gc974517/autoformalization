\begin{document} \begin{theorem} Define a code segment in \emph{Imp} as \begin{verbatim} <var:q0> := <nat:8> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:g> ; <var:l> := <var:q1> ; <var:l> := <var:l> + <var:q0> \end{verbatim} Allow that we have $ <var:g> = <var:d> $ given $ <var:d> $ prior to executing the code it holds that $ <var:l> = <nat:4> * <var:d> + <nat:8> $ . \end{theorem} \begin{proof} Note that the following decorated segment of code . \begin{eqnarray} \{ <var:g> = <var:d> \} \\ <var:q0> := <nat:8> ; \\ \{ <var:g> = <var:d> \land <var:q0> = <nat:8> \} \\ <var:q1> := <nat:4> ; \\ \{ <var:g> = <var:d> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \} \\ <var:q1> := <var:q1> * <var:g> ; \\ \{ <var:g> = <var:d> \land <var:q0> = <nat:8> \land <var:q1> = <nat:4> \times <var:d> \} \\ <var:l> := <var:q1> ; \\ \{ <var:g> = <var:d> \land <var:q0> = <nat:8> \land <var:l> = <nat:4> \times <var:d> \} \\ <var:l> := <var:l> + <var:q0> \\ \{ <var:g> = <var:d> \land <var:l> = <nat:4> \times <var:d> + <nat:8> \} \end{eqnarray} Applying usual Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:g> = <var:d> }} <var:q0> := <nat:8> ; <var:q1> := <nat:4> ; <var:q1> := <var:q1> * <var:g> ; <var:l> := <var:q1> ; <var:l> := <var:l> + <var:q0> {{ <var:l> = <nat:4> * <var:d> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:d> /\ <var:q0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:d> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:d> /\ <var:q0> = <nat:8> /\ <var:q1> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:d> /\ <var:q0> = <nat:8> /\ <var:l> = <nat:4> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:d> /\ <var:l> = <nat:4> * <var:d> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 