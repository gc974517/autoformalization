\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:r> := <nat:3> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:3> + <var:r> * <var:k> ; <var:r> := <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:4> + <var:r> * <var:k> ; <var:r> := <nat:3> + <var:r> * <var:k> ; <var:r> := <nat:4> + <var:r> * <var:k> ; <var:r> := <nat:4> + <var:r> * <var:k> ; <var:r> := <nat:2> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> \end{verbatim} \end{definition} \begin{theorem} Take the following code segment <def:poly> . Given it to be that $ <var:k> = <var:m> $ before the execution of the set of instructions it follows that $ <var:r> = <nat:3> \times <var:m> ^ <nat:12> + <nat:1> \times <var:m> ^ <nat:11> + <nat:3> \times <var:m> ^ <nat:10> + <nat:1> \times <var:m> ^ <nat:8> + <nat:1> \times <var:m> ^ <nat:7> + <nat:4> \times <var:m> ^ <nat:6> + <nat:3> \times <var:m> ^ <nat:5> + <nat:4> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is shown through Hoare logic . Advancing on , we have the variable assignmet code yielding $ <nat:3> $ to $ <var:r>$ . This transfers the condition $ \{ <var:k> = <var:m> \} $ into the postcondition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \} $ . Taking another step toward the following bit of code found in the series of commands , the environment update statement binding $ <nat:1> + <var:r> * <var:k> $ to $ <var:r>$ . This line takes $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \} $ toward the postcondition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> + <nat:1> \} $ . Advancing to the subsequent line of code found in the set of instructions , the assignment code letting $ <nat:3> + <var:r> * <var:k> $ into $ <var:r>$ . This takes the condition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> + <nat:1> \} $ into the condition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:3> \} $ . Observing the next command in the list of commands , we have the variable assignmet code \verb | <var:r> := <var:r> * <var:k> ; | . This statement transfers the precondition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:3> \} $ as the condition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + \} $ . This is ensured through the assignment scheme defined in Hoare logic . Looking at the upcoming piece of code contained in the code segment , the assignment code \verb | <var:r> := <nat:1> + <var:r> * <var:k> ; | . This redefines the condition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + \} $ as $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:1> \} $ . This is guaranteed using the assignment scheme from usual Hoare logic . Shifting focus toward the upcoming line of code in the list of commands , the assignment line assigning $ <nat:1> + <var:r> * <var:k> $ toward $ <var:r>$ . This line moves the condition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:1> \} $ toward the condition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:4> + <nat:3> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> + <nat:1> \} $ . This is known to be sound with the assignment scheme defined in Hoare techniques . Taking a look at the upcoming line seen in the segment of code , we have the environment update line giving $ <nat:4> + <var:r> * <var:k> $ to $ <var:r>$ . This command transfers the precondition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:4> + <nat:3> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> + <nat:1> \} $ as the condition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:6> + <nat:1> \times <var:m> ^ <nat:5> + <nat:3> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:4> \} $ . Advancing on , we have the assignment code \verb | <var:r> := <nat:3> + <var:r> * <var:k> ; | . This code takes the precondition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:6> + <nat:1> \times <var:m> ^ <nat:5> + <nat:3> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:4> \} $ toward $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:7> + <nat:1> \times <var:m> ^ <nat:6> + <nat:3> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:3> \} $ . This is given by the assignment law in typical Hoare techniques . After , we have the variable update line \verb | <var:r> := <nat:4> + <var:r> * <var:k> ; | . This moves $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:7> + <nat:1> \times <var:m> ^ <nat:6> + <nat:3> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:3> + <nat:1> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:3> \} $ into the condition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:8> + <nat:1> \times <var:m> ^ <nat:7> + <nat:3> \times <var:m> ^ <nat:6> + <nat:1> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:4> \} $ . Looking at the following line found in our list of instructions , the code \verb | <var:r> := <nat:4> + <var:r> * <var:k> ; | . This moves $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:8> + <nat:1> \times <var:m> ^ <nat:7> + <nat:3> \times <var:m> ^ <nat:6> + <nat:1> \times <var:m> ^ <nat:4> + <nat:1> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:3> \times <var:m> + <nat:4> \} $ into $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:9> + <nat:1> \times <var:m> ^ <nat:8> + <nat:3> \times <var:m> ^ <nat:7> + <nat:1> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:4> \} $ . This is deduced using the assignment rule obtained from usual Hoare reasoning . Moving onward , we see the binding command \verb | <var:r> := <nat:2> + <var:r> * <var:k> ; | . This line takes the precondition $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:9> + <nat:1> \times <var:m> ^ <nat:8> + <nat:3> \times <var:m> ^ <nat:7> + <nat:1> \times <var:m> ^ <nat:5> + <nat:1> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:3> + <nat:3> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:4> \} $ as $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:10> + <nat:1> \times <var:m> ^ <nat:9> + <nat:3> \times <var:m> ^ <nat:8> + <nat:1> \times <var:m> ^ <nat:6> + <nat:1> \times <var:m> ^ <nat:5> + <nat:4> \times <var:m> ^ <nat:4> + <nat:3> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:2> \} $ . Observing the upcoming command seen in our list of commands , we have the statement giving $ <nat:1> + <var:r> * <var:k> $ into $ <var:r>$ . This command advances $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:10> + <nat:1> \times <var:m> ^ <nat:9> + <nat:3> \times <var:m> ^ <nat:8> + <nat:1> \times <var:m> ^ <nat:6> + <nat:1> \times <var:m> ^ <nat:5> + <nat:4> \times <var:m> ^ <nat:4> + <nat:3> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:4> \times <var:m> + <nat:2> \} $ as $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:11> + <nat:1> \times <var:m> ^ <nat:10> + <nat:3> \times <var:m> ^ <nat:9> + <nat:1> \times <var:m> ^ <nat:7> + <nat:1> \times <var:m> ^ <nat:6> + <nat:4> \times <var:m> ^ <nat:5> + <nat:3> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:1> \} $ . This is guaranteed with the assignment rule given by typical Hoare logic . Advancing to the following command found in our series of instructions , we have the environment update command \verb | <var:r> := <nat:1> + <var:r> * <var:k> | . This redefines $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:11> + <nat:1> \times <var:m> ^ <nat:10> + <nat:3> \times <var:m> ^ <nat:9> + <nat:1> \times <var:m> ^ <nat:7> + <nat:1> \times <var:m> ^ <nat:6> + <nat:4> \times <var:m> ^ <nat:5> + <nat:3> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:3> + <nat:4> \times <var:m> ^ <nat:2> + <nat:2> \times <var:m> + <nat:1> \} $ as $ \{ <var:k> = <var:m> \land <var:r> = <nat:3> \times <var:m> ^ <nat:12> + <nat:1> \times <var:m> ^ <nat:11> + <nat:3> \times <var:m> ^ <nat:10> + <nat:1> \times <var:m> ^ <nat:8> + <nat:1> \times <var:m> ^ <nat:7> + <nat:4> \times <var:m> ^ <nat:6> + <nat:3> \times <var:m> ^ <nat:5> + <nat:4> \times <var:m> ^ <nat:4> + <nat:4> \times <var:m> ^ <nat:3> + <nat:2> \times <var:m> ^ <nat:2> + <nat:1> \times <var:m> + <nat:1> \} $ . This is known to be sound by the assignment inference rule of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:r> := <nat:3> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:3> + <var:r> * <var:k> ; <var:r> := <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:4> + <var:r> * <var:k> ; <var:r> := <nat:3> + <var:r> * <var:k> ; <var:r> := <nat:4> + <var:r> * <var:k> ; <var:r> := <nat:4> + <var:r> * <var:k> ; <var:r> := <nat:2> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> ; <var:r> := <nat:1> + <var:r> * <var:k> . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:k> = <var:m> }} <def:poly> {{ <var:r> = <nat:3> * <var:m> ^ <nat:12> + <nat:1> * <var:m> ^ <nat:11> + <nat:3> * <var:m> ^ <nat:10> + <nat:1> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:r> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:r> = <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:r> = <nat:3> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:r> = <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:r> = <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:r> = <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:r> = <nat:3> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:r> = <nat:3> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:r> = <nat:3> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:3> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:r> = <nat:3> * <var:m> ^ <nat:9> + <nat:1> * <var:m> ^ <nat:8> + <nat:3> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:5> + <nat:1> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:3> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:r> = <nat:3> * <var:m> ^ <nat:10> + <nat:1> * <var:m> ^ <nat:9> + <nat:3> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:6> + <nat:1> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:3> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:r> = <nat:3> * <var:m> ^ <nat:11> + <nat:1> * <var:m> ^ <nat:10> + <nat:3> * <var:m> ^ <nat:9> + <nat:1> * <var:m> ^ <nat:7> + <nat:1> * <var:m> ^ <nat:6> + <nat:4> * <var:m> ^ <nat:5> + <nat:3> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:2> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:m> /\ <var:r> = <nat:3> * <var:m> ^ <nat:12> + <nat:1> * <var:m> ^ <nat:11> + <nat:3> * <var:m> ^ <nat:10> + <nat:1> * <var:m> ^ <nat:8> + <nat:1> * <var:m> ^ <nat:7> + <nat:4> * <var:m> ^ <nat:6> + <nat:3> * <var:m> ^ <nat:5> + <nat:4> * <var:m> ^ <nat:4> + <nat:4> * <var:m> ^ <nat:3> + <nat:2> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 