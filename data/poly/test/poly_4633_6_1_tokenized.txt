\begin{document} \begin{definition} We define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:r> ; <var:m2> := <var:m1> * <var:r> ; <var:m0> := <nat:1> ; <var:m2> := <var:m2> * <nat:1> ; <var:J> := <var:m2> <var:J> := <var:J> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of instructions <def:poly> in \emph{Imp} . Allowing that $ <var:r> = <var:W> $ taking natural numbers $ <var:W> $ ahead of running our set of commands then $ <var:J> = <nat:1> \cdot <var:W> ^ <nat:2> + <nat:1> $ once code is done . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:r> = <var:W> \} \\ <var:m1> := <var:r> ; \\ \{ <var:r> = <var:W> \land <var:m1> = <var:W> \} \\ <var:m2> := <var:m1> * <var:r> ; \\ \{ <var:r> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \} \\ <var:m0> := <nat:1> ; \\ \{ <var:r> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <var:W> ^ <nat:2> \land <var:m0> = <nat:1> \} \\ <var:m2> := <var:m2> * <nat:1> ; \\ \{ <var:r> = <var:W> \land <var:m1> = <var:W> \land <var:m2> = <nat:1> \times <var:W> ^ <nat:2> \land <var:m0> = <nat:1> \} \\ <var:J> := <var:m2> \\ \{ <var:r> = <var:W> \land <var:m1> = <var:W> \land <var:m0> = <nat:1> \land <var:J> = <nat:1> \times <var:W> ^ <nat:2> \} \\ <var:J> := <var:J> + <var:m0> \\ \{ <var:r> = <var:W> \land <var:J> = <nat:1> \times <var:W> ^ <nat:2> + <nat:1> \} \end{eqnarray} Applying standard Hoare techniques accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m1> := <var:r> ; <var:m2> := <var:m1> * <var:r> ; <var:m0> := <nat:1> ; <var:m2> := <var:m2> * <nat:1> ; <var:J> := <var:m2> <var:J> := <var:J> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:W> : nat , {{ <var:r> = <var:W> }} <def:poly> {{ <var:J> = <nat:1> * <var:W> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:m1> = <var:W> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:m1> = <var:W> /\ <var:m2> = <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:m1> = <var:W> /\ <var:m2> = <var:W> ^ <nat:2> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:m1> = <var:W> /\ <var:m2> = <nat:1> * <var:W> ^ <nat:2> /\ <var:m0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:m1> = <var:W> /\ <var:m0> = <nat:1> /\ <var:J> = <nat:1> * <var:W> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:W> /\ <var:J> = <nat:1> * <var:W> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 