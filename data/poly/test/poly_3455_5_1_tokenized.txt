\begin{document} \begin{theorem} We define the following set of instructions as follows \begin{verbatim} <var:e1> := <var:d> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:1> ; <var:D> := <var:e1> <var:D> := <var:D> + <var:e0> \end{verbatim} Given that we have $ <var:d> = <var:k> $ given all positive integer coefficients $ <var:k> $ before interpreting our series of commands it follows that we have $ <var:D> = <nat:1> \times <var:k> + <nat:7> $ . \end{theorem} \begin{proof} Arguing the correctness of the series of commands is accomplished with usual Hoare logic . Moving forward to the next lines contained in our code , we see \[ \begin{tabular} {rcl} \{ <var:d> = <var:k> \} & <var:e1> := <var:d> & \{ <var:d> = <var:k> \land <var:e1> = <var:k> \} \\ \{ <var:d> = <var:k> \land <var:e1> = <var:k> \} & <var:e0> := <nat:7> & \{ <var:d> = <var:k> \land <var:e1> = <var:k> \land <var:e0> = <nat:7> \} \\ \{ <var:d> = <var:k> \land <var:e1> = <var:k> \land <var:e0> = <nat:7> \} & <var:e1> := <var:e1> * <nat:1> & \{ <var:d> = <var:k> \land <var:e1> = <nat:1> \times <var:k> \land <var:e0> = <nat:7> \} \\ \{ <var:d> = <var:k> \land <var:e1> = <nat:1> \times <var:k> \land <var:e0> = <nat:7> \} & <var:D> := <var:e1& \{ <var:d> = <var:k> \land <var:e0> = <nat:7> \land <var:D> = <nat:1> \times <var:k> \} \end{tabular} Taking another step toward the proceeding piece of code contained in the set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:d> = <var:k> \} & <var:e1> := <var:d> & \{ <var:d> = <var:k> \land <var:e1> = <var:k> \} \end{tabular} This is known to be sound with the scheme given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:d> = <var:k> }} <var:e1> := <var:d> ; <var:e0> := <nat:7> ; <var:e1> := <var:e1> * <nat:1> ; <var:D> := <var:e1> <var:D> := <var:D> + <var:e0> {{ <var:D> = <nat:1> * <var:k> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:e1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:e1> = <var:k> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:e1> = <nat:1> * <var:k> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:e0> = <nat:7> /\ <var:D> = <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:k> /\ <var:D> = <nat:1> * <var:k> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 