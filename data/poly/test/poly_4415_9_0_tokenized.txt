\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:L0> := <nat:3> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:q> ; <var:L2> := <nat:4> ; <var:L2> := <var:L2> * <var:q> ; <var:L2> := <var:L2> * <var:q> ; <var:W> := <var:L2> ; <var:W> := <var:W> + <var:L1> ; <var:W> := <var:W> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:q> = <var:l> $ , for some whole numbers $ <var:l> $ , before interpreting this segment of code it holds that $ <var:W> = <nat:4> \times <var:l> ^ <nat:2> + <nat:3> \times <var:l> + <nat:3> $ after code has terminated . \end{theorem} \begin{proof} Arguing the correctness of this program can be accomplished with usual Hoare techniques . Considering the following command in our list of instructions , we have the variable update code \verb | <var:L0> := <nat:3> ; | . This transfers $ \{ <var:q> = <var:l> \} $ to the condition $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \} $ . This is deduced through the assignment scheme given in standard Hoare logic . Stepping forward , we see the command yielding $ <nat:3> $ into $ <var:L1>$ . This takes the condition $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \} $ as $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> \} $ . This is sound by the assignment inference rule found in usual Hoare logic . Taking a look at the proceeding statement found in our series of commands , we see the code defining $ <var:L1> * <var:q> $ as $ <var:L1>$ . This command moves $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> \} $ toward the postcondition $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:l> \} $ . Going to the next step , we see the binding line binding $ <nat:4> $ toward $ <var:L2>$ . This advances the precondition $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:l> \} $ into the postcondition $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:l> \land <var:L2> = <nat:4> \} $ . This is ensured with the assignment inference rule in standard Hoare techniques . Moving forward to the subsequent line of code seen in the series of instructions , we see the variable binding line \verb | <var:L2> := <var:L2> * <var:q> ; | . This moves the condition $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:l> \land <var:L2> = <nat:4> \} $ to the condition $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:l> \land <var:L2> = <nat:4> * <var:l> \} $ . Immediately following , the variable update line \verb | <var:L2> := <var:L2> * <var:q> ; | . This command forwards the condition $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:l> \land <var:L2> = <nat:4> * <var:l> \} $ as the condition $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:l> \land <var:L2> = <nat:4> * <var:l> ^ <nat:2> \} $ . This is deduced through the assignment scheme of typical Hoare reasoning . Keeping momentum , we have the variable assignmet code assigning $ <var:L2> $ toward $ <var:W>$ . This moves $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:l> \land <var:L2> = <nat:4> * <var:l> ^ <nat:2> \} $ toward the condition $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:l> \land <var:W> = <nat:4> * <var:l> ^ <nat:2> \} $ . This is given with the assignment law in Hoare logic . Going forward , we see the environment update code \verb | <var:W> := <var:W> + <var:L1> ; | . This forwards $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:L1> = <nat:3> * <var:l> \land <var:W> = <nat:4> * <var:l> ^ <nat:2> \} $ toward the postcondition $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:W> = <nat:4> * <var:l> ^ <nat:2> + <nat:3> * <var:l> \} $ . This is deduced with the assignment inference rule given by standard Hoare reasoning . Jumping to the upcoming line of code seen in our code segment , we see the command defining $ <var:W> + <var:L0$ to $ <var:W>$ . This line advances $ \{ <var:q> = <var:l> \land <var:L0> = <nat:3> \land <var:W> = <nat:4> * <var:l> ^ <nat:2> + <nat:3> * <var:l> \} $ into the postcondition $ \{ <var:q> = <var:l> \land <var:W> = <nat:4> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> \} $ . This is given through the assignment rule given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <def:poly> := <var:L0> := <nat:3> ; <var:L1> := <nat:3> ; <var:L1> := <var:L1> * <var:q> ; <var:L2> := <nat:4> ; <var:L2> := <var:L2> * <var:q> ; <var:L2> := <var:L2> * <var:q> ; <var:W> := <var:L2> ; <var:W> := <var:W> + <var:L1> ; <var:W> := <var:W> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:q> = <var:l> }} <def:poly> {{ <var:W> = <nat:4> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> * <var:l> /\ <var:L2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> * <var:l> /\ <var:L2> = <nat:4> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> * <var:l> /\ <var:L2> = <nat:4> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:L0> = <nat:3> /\ <var:L1> = <nat:3> * <var:l> /\ <var:W> = <nat:4> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:L0> = <nat:3> /\ <var:W> = <nat:4> * <var:l> ^ <nat:2> + <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:l> /\ <var:W> = <nat:4> * <var:l> ^ <nat:2> + <nat:3> * <var:l> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 