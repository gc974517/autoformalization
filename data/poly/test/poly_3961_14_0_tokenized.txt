\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:B0> := <nat:2> ; <var:B1> := <nat:2> ; <var:B1> := <var:B1> * <var:j> ; <var:B2> := <nat:3> ; <var:B2> := <var:B2> * <var:j> ; <var:B2> := <var:B2> * <var:j> ; <var:B3> := <nat:3> ; <var:B3> := <var:B3> * <var:j> ; <var:B3> := <var:B3> * <var:j> ; <var:B3> := <var:B3> * <var:j> ; <var:P> := <var:B3> ; <var:P> := <var:P> + <var:B2> ; <var:P> := <var:P> + <var:B1> ; <var:P> := <var:P> + <var:B0> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:j> = <var:N> $ ahead of evaluating this code segment it holds that we have $ <var:P> = <nat:3> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> + <nat:2> $ when series of instructions has terminated . \end{theorem} \begin{proof} Proving correctness for the series of instructions is clear with standard Hoare logic . Observing the upcoming piece of code contained in our code segment , the assignment command defining $ <nat:2> $ toward $ <var:B0>$ . This redefines the condition $ \{ <var:j> = <var:N> \} $ to $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \} $ . After , we have the variable update statement binding $ <nat:2> $ as $ <var:B1>$ . This statement takes the condition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \} $ toward the condition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \} $ . Considering the next line of code seen in our list of commands , the variable assignmet statement \verb | <var:B1> := <var:B1> * <var:j> ; | . This advances the condition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \} $ into $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \} $ . Further , we see the assignment code \verb | <var:B2> := <nat:3> ; | . This code takes the condition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \} $ toward the condition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \} $ . After , the binding line \verb | <var:B2> := <var:B2> * <var:j> ; | . This advances the precondition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \} $ as $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> \} $ . This is given through the assignment rule of typical Hoare reasoning . Next , the variable binding code assigning $ <var:B2> * <var:j> $ as $ <var:B2>$ . This command moves $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> \} $ to the condition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> ^ <nat:2> \} $ . Advancing to the next step , we have the environment update command \verb | <var:B3> := <nat:3> ; | . This command moves $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> ^ <nat:2> \} $ as the postcondition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:B3> = <nat:3> \} $ . This is deduced with the assignment law given by Hoare logic . After , we have the variable assignmet line binding $ <var:B3> * <var:j> $ as $ <var:B3>$ . This line advances the condition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:B3> = <nat:3> \} $ as the postcondition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:B3> = <nat:3> \cdot <var:N> \} $ . Moving on , we see the environment update line \verb | <var:B3> := <var:B3> * <var:j> ; | . This forwards the condition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:B3> = <nat:3> \cdot <var:N> \} $ as the postcondition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:B3> = <nat:3> \cdot <var:N> ^ <nat:2> \} $ . This is sound through the assignment rule found in Hoare reasoning . Moving on , we have the code letting $ <var:B3> * <var:j> $ toward $ <var:B3>$ . This takes $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:B3> = <nat:3> \cdot <var:N> ^ <nat:2> \} $ into $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:B3> = <nat:3> \cdot <var:N> ^ <nat:3> \} $ . This is rigorously given with the assignment inference rule given in typical Hoare logic . Looking at the upcoming line of code found in our list of commands , the variable assignmet line \verb | <var:P> := <var:B3> ; | . This code advances $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:B3> = <nat:3> \cdot <var:N> ^ <nat:3> \} $ into $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:P> = <nat:3> \cdot <var:N> ^ <nat:3> \} $ . Focusing on the proceeding bit of code seen in our set of commands , the binding command defining $ <var:P> + <var:B2> $ into $ <var:P>$ . This moves $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:B2> = <nat:3> \cdot <var:N> ^ <nat:2> \land <var:P> = <nat:3> \cdot <var:N> ^ <nat:3> \} $ toward the condition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:P> = <nat:3> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> \} $ . This is rigorously given with the assignment scheme found in typical Hoare techniques . Shifting focus toward the next command seen in our segment of code , we see the environment update command \verb | <var:P> := <var:P> + <var:B1> ; | . This moves the precondition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:B1> = <nat:2> \cdot <var:N> \land <var:P> = <nat:3> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> \} $ as the condition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:P> = <nat:3> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> \} $ . After , the variable binding code assigning $ <var:P> + <var:B0$ toward $ <var:P>$ . This redefines the precondition $ \{ <var:j> = <var:N> \land <var:B0> = <nat:2> \land <var:P> = <nat:3> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> \} $ to the condition $ \{ <var:j> = <var:N> \land <var:P> = <nat:3> \cdot <var:N> ^ <nat:3> + <nat:3> \cdot <var:N> ^ <nat:2> + <nat:2> \cdot <var:N> + <nat:2> \} $ . This is shown to be logically sound using the assignment law given in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:B0> : string := " <var:B0> " . Definition <var:B1> : string := " <var:B1> " . Definition <var:B2> : string := " <var:B2> " . Definition <var:B3> : string := " <var:B3> " . Definition <def:poly> := <var:B0> := <nat:2> ; <var:B1> := <nat:2> ; <var:B1> := <var:B1> * <var:j> ; <var:B2> := <nat:3> ; <var:B2> := <var:B2> * <var:j> ; <var:B2> := <var:B2> * <var:j> ; <var:B3> := <nat:3> ; <var:B3> := <var:B3> * <var:j> ; <var:B3> := <var:B3> * <var:j> ; <var:B3> := <var:B3> * <var:j> ; <var:P> := <var:B3> ; <var:P> := <var:P> + <var:B2> ; <var:P> := <var:P> + <var:B1> ; <var:P> := <var:P> + <var:B0> . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:j> = <var:N> }} <def:poly> {{ <var:P> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:B0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:2> * <var:N> /\ <var:B2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:2> * <var:N> /\ <var:B2> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:2> * <var:N> /\ <var:B2> = <nat:3> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:2> * <var:N> /\ <var:B2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:B3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:2> * <var:N> /\ <var:B2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:B3> = <nat:3> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:2> * <var:N> /\ <var:B2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:B3> = <nat:3> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:2> * <var:N> /\ <var:B2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:B3> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:2> * <var:N> /\ <var:B2> = <nat:3> * <var:N> ^ <nat:2> /\ <var:P> = <nat:3> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:B0> = <nat:2> /\ <var:B1> = <nat:2> * <var:N> /\ <var:P> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:B0> = <nat:2> /\ <var:P> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:N> /\ <var:P> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 