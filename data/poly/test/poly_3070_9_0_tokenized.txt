\begin{document} \begin{theorem} We define a code segment as follows \begin{verbatim} <var:H0> := <nat:6> ; <var:H1> := <nat:9> ; <var:H1> := <var:H1> * <var:s> ; <var:H2> := <nat:2> ; <var:H2> := <var:H2> * <var:s> ; <var:H2> := <var:H2> * <var:s> ; <var:a> := <var:H2> ; <var:a> := <var:a> + <var:H1> ; <var:a> := <var:a> + <var:H0> \end{verbatim} Allowing it to hold that $ <var:s> = <var:F> $ prior to running our code segment , it holds that we see $ <var:a> = <nat:2> \cdot <var:F> ^ <nat:2> + <nat:9> \cdot <var:F> + <nat:6> $ once series of commands is done . \end{theorem} \begin{proof} The course of logic for the program can be accomplished using standard Hoare techniques . Stepping forward , the variable assignmet command \verb | <var:H0> := <nat:6> ; | . This command transfers $ \{ <var:s> = <var:F> \} $ toward $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \} $ . This is known to be sound with the assignment scheme in typical Hoare logic . Advancing on , we see the variable update statement \verb | <var:H1> := <nat:9> ; | . This code moves the precondition $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \} $ into $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:H1> = <nat:9> \} $ . Moving on to the next step , we see the variable update code \verb | <var:H1> := <var:H1> * <var:s> ; | . This line transfers the precondition $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:H1> = <nat:9> \} $ toward the postcondition $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:H1> = <nat:9> \cdot <var:F> \} $ . This is deduced by the assignment law found in standard Hoare techniques . Further , the variable update statement \verb | <var:H2> := <nat:2> ; | . This code moves the condition $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:H1> = <nat:9> \cdot <var:F> \} $ toward the condition $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:H1> = <nat:9> \cdot <var:F> \land <var:H2> = <nat:2> \} $ . Moving forward , the environment update statement binding $ <var:H2> * <var:s> $ toward $ <var:H2>$ . This takes $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:H1> = <nat:9> \cdot <var:F> \land <var:H2> = <nat:2> \} $ to $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:H1> = <nat:9> \cdot <var:F> \land <var:H2> = <nat:2> \cdot <var:F> \} $ . This is rigorously given by the assignment inference rule found in usual Hoare reasoning . Taking another step toward the following line of code in the list of commands , the assignment code \verb | <var:H2> := <var:H2> * <var:s> ; | . This code advances the condition $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:H1> = <nat:9> \cdot <var:F> \land <var:H2> = <nat:2> \cdot <var:F> \} $ to the condition $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:H1> = <nat:9> \cdot <var:F> \land <var:H2> = <nat:2> \cdot <var:F> ^ <nat:2> \} $ . This is rigorously given with the assignment law given in standard Hoare reasoning . Stepping forward , we see the variable binding command defining $ <var:H2> $ into $ <var:a>$ . This code advances the precondition $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:H1> = <nat:9> \cdot <var:F> \land <var:H2> = <nat:2> \cdot <var:F> ^ <nat:2> \} $ as $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:H1> = <nat:9> \cdot <var:F> \land <var:a> = <nat:2> \cdot <var:F> ^ <nat:2> \} $ . This is guaranteed by the assignment inference rule given by usual Hoare reasoning . Stepping forward , we have the environment update command giving $ <var:a> + <var:H1> $ as $ <var:a>$ . This advances $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:H1> = <nat:9> \cdot <var:F> \land <var:a> = <nat:2> \cdot <var:F> ^ <nat:2> \} $ into the condition $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:a> = <nat:2> \cdot <var:F> ^ <nat:2> + <nat:9> \cdot <var:F> \} $ . This is sound through the assignment law obtained from typical Hoare logic . Immediately following , the variable update code binding $ <var:a> + <var:H0$ as $ <var:a>$ . This moves $ \{ <var:s> = <var:F> \land <var:H0> = <nat:6> \land <var:a> = <nat:2> \cdot <var:F> ^ <nat:2> + <nat:9> \cdot <var:F> \} $ as $ \{ <var:s> = <var:F> \land <var:a> = <nat:2> \cdot <var:F> ^ <nat:2> + <nat:9> \cdot <var:F> + <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:s> = <var:F> }} <var:H0> := <nat:6> ; <var:H1> := <nat:9> ; <var:H1> := <var:H1> * <var:s> ; <var:H2> := <nat:2> ; <var:H2> := <var:H2> * <var:s> ; <var:H2> := <var:H2> * <var:s> ; <var:a> := <var:H2> ; <var:a> := <var:a> + <var:H1> ; <var:a> := <var:a> + <var:H0> {{ <var:a> = <nat:2> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:H0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:9> * <var:F> /\ <var:H2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:9> * <var:F> /\ <var:H2> = <nat:2> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:9> * <var:F> /\ <var:H2> = <nat:2> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:H0> = <nat:6> /\ <var:H1> = <nat:9> * <var:F> /\ <var:a> = <nat:2> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:H0> = <nat:6> /\ <var:a> = <nat:2> * <var:F> ^ <nat:2> + <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:F> /\ <var:a> = <nat:2> * <var:F> ^ <nat:2> + <nat:9> * <var:F> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 