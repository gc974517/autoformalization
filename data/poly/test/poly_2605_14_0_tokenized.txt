\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:S0> := <nat:4> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:X> ; <var:S2> := <nat:2> ; <var:S2> := <var:S2> * <var:X> ; <var:S2> := <var:S2> * <var:X> ; <var:S3> := <nat:9> ; <var:S3> := <var:S3> * <var:X> ; <var:S3> := <var:S3> * <var:X> ; <var:S3> := <var:S3> * <var:X> ; <var:y> := <var:S3> ; <var:y> := <var:y> + <var:S2> ; <var:y> := <var:y> + <var:S1> ; <var:y> := <var:y> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Allow $ <var:X> = <var:I> $ ahead of running this code segment it holds that $ <var:y> = <nat:9> \times <var:I> ^ <nat:3> + <nat:2> \times <var:I> ^ <nat:2> + <nat:6> \times <var:I> + <nat:4> $ . \end{theorem} \begin{proof} The way to prove correctness for this segment of code can be demonstrated with standard Hoare techniques . Stepping forward , we see the binding command \verb | <var:S0> := <nat:4> ; | . This command transfers the condition $ \{ <var:X> = <var:I> \} $ to the condition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \} $ . This is deduced with the assignment rule defined by standard Hoare techniques . Moving onward , we have the binding line yielding $ <nat:6> $ to $ <var:S1>$ . This statement transfers the precondition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \} $ into the postcondition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \} $ . Advancing to the next step , the assignment line \verb | <var:S1> := <var:S1> * <var:X> ; | . This code takes the precondition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \} $ as the postcondition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \} $ . This is rigorously given using the assignment scheme defined by standard Hoare logic . Moving on , we have the variable update line yielding $ <nat:2> $ toward $ <var:S2>$ . This redefines $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \} $ into the condition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \} $ . Moving forward to the subsequent line found in the code , the variable assignmet code \verb | <var:S2> := <var:S2> * <var:X> ; | . This moves $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \} $ into the condition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> \} $ . This is shown with the assignment scheme found in typical Hoare techniques . Paying attention to the subsequent line of code contained in the series of instructions , the binding code yielding $ <var:S2> * <var:X> $ into $ <var:S2>$ . This redefines the precondition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> \} $ toward the condition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment rule given in Hoare techniques . Next , the binding code binding $ <nat:9> $ toward $ <var:S3>$ . This statement transfers the condition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> ^ <nat:2> \} $ as the postcondition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> ^ <nat:2> \land <var:S3> = <nat:9> \} $ . This is deduced by the assignment rule defined by typical Hoare techniques . Advancing to the next step , the variable binding command assigning $ <var:S3> * <var:X> $ into $ <var:S3>$ . This statement moves the precondition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> ^ <nat:2> \land <var:S3> = <nat:9> \} $ to $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:I> \} $ . Taking a look at the following step contained in the set of instructions , we see the binding command \verb | <var:S3> := <var:S3> * <var:X> ; | . This statement redefines the precondition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:I> \} $ into the condition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:I> ^ <nat:2> \} $ . This is given using the assignment scheme defined by usual Hoare techniques . Shifting focus toward the following step found in the set of commands , we see the assignment line \verb | <var:S3> := <var:S3> * <var:X> ; | . This advances the precondition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:I> ^ <nat:2> \} $ as the condition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:I> ^ <nat:3> \} $ . This is shown to be logically sound through the assignment rule given in typical Hoare logic . Considering the upcoming statement in our list of commands , we see the binding line \verb | <var:y> := <var:S3> ; | . This command moves the precondition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> ^ <nat:2> \land <var:S3> = <nat:9> \cdot <var:I> ^ <nat:3> \} $ to $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> ^ <nat:2> \land <var:y> = <nat:9> \cdot <var:I> ^ <nat:3> \} $ . Observing the next piece of code in the program , we see the code \verb | <var:y> := <var:y> + <var:S2> ; | . This code takes $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:S2> = <nat:2> \cdot <var:I> ^ <nat:2> \land <var:y> = <nat:9> \cdot <var:I> ^ <nat:3> \} $ into the postcondition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:y> = <nat:9> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> \} $ . Looking at the upcoming piece of code in the code segment , the line letting $ <var:y> + <var:S1> $ as $ <var:y>$ . This command transfers the condition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:S1> = <nat:6> \cdot <var:I> \land <var:y> = <nat:9> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> \} $ toward $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:y> = <nat:9> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:6> \cdot <var:I> \} $ . This is shown by the assignment rule from typical Hoare reasoning . Moving forward to the proceeding statement in the code , we have the variable update statement defining $ <var:y> + <var:S0$ toward $ <var:y>$ . This forwards the condition $ \{ <var:X> = <var:I> \land <var:S0> = <nat:4> \land <var:y> = <nat:9> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:6> \cdot <var:I> \} $ into the condition $ \{ <var:X> = <var:I> \land <var:y> = <nat:9> \cdot <var:I> ^ <nat:3> + <nat:2> \cdot <var:I> ^ <nat:2> + <nat:6> \cdot <var:I> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <def:poly> := <var:S0> := <nat:4> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:X> ; <var:S2> := <nat:2> ; <var:S2> := <var:S2> * <var:X> ; <var:S2> := <var:S2> * <var:X> ; <var:S3> := <nat:9> ; <var:S3> := <var:S3> * <var:X> ; <var:S3> := <var:S3> * <var:X> ; <var:S3> := <var:S3> * <var:X> ; <var:y> := <var:S3> ; <var:y> := <var:y> + <var:S2> ; <var:y> := <var:y> + <var:S1> ; <var:y> := <var:y> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:X> = <var:I> }} <def:poly> {{ <var:y> = <nat:9> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:6> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:6> * <var:I> /\ <var:S2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:6> * <var:I> /\ <var:S2> = <nat:2> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:6> * <var:I> /\ <var:S2> = <nat:2> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:6> * <var:I> /\ <var:S2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:S3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:6> * <var:I> /\ <var:S2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:6> * <var:I> /\ <var:S2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:6> * <var:I> /\ <var:S2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:S3> = <nat:9> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:6> * <var:I> /\ <var:S2> = <nat:2> * <var:I> ^ <nat:2> /\ <var:y> = <nat:9> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> /\ <var:S1> = <nat:6> * <var:I> /\ <var:y> = <nat:9> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:S0> = <nat:4> /\ <var:y> = <nat:9> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:y> = <nat:9> * <var:I> ^ <nat:3> + <nat:2> * <var:I> ^ <nat:2> + <nat:6> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 