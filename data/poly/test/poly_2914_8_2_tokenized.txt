\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:p> := <nat:1> ; <var:p> := <var:p> * <var:g> ; <var:p> := <nat:2> + <var:p> * <var:g> ; <var:p> := <nat:2> + <var:p> * <var:g> ; <var:p> := <nat:3> + <var:p> * <var:g> ; <var:p> := <nat:2> + <var:p> * <var:g> ; <var:p> := <nat:3> + <var:p> * <var:g> ; <var:p> := <nat:4> + <var:p> * <var:g> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:g> = <var:b> $ ahead of evaluating this series of commands , then we see $ <var:p> = <nat:1> \times <var:b> ^ <nat:7> + <nat:2> \times <var:b> ^ <nat:5> + <nat:2> \times <var:b> ^ <nat:4> + <nat:3> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:4> $ . \end{theorem} \begin{proof} The proof of our series of commands is demonstrated using the following decorated set of instructions . \begin{eqnarray} \{ <var:g> = <var:b> \} \\ <var:p> := <nat:1> ; \\ \{ <var:g> = <var:b> \land <var:p> = <nat:1> \} \\ <var:p> := <var:p> * <var:g> ; \\ \{ <var:g> = <var:b> \land <var:p> = <nat:1> \times <var:b> + \} \\ <var:p> := <nat:2> + <var:p> * <var:g> ; \\ \{ <var:g> = <var:b> \land <var:p> = <nat:1> \times <var:b> ^ <nat:2> + <nat:2> \} \\ <var:p> := <nat:2> + <var:p> * <var:g> ; \\ \{ <var:g> = <var:b> \land <var:p> = <nat:1> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> + <nat:2> \} \\ <var:p> := <nat:3> + <var:p> * <var:g> ; \\ \{ <var:g> = <var:b> \land <var:p> = <nat:1> \times <var:b> ^ <nat:4> + <nat:2> \times <var:b> ^ <nat:2> + <nat:2> \times <var:b> + <nat:3> \} \\ <var:p> := <nat:2> + <var:p> * <var:g> ; \\ \{ <var:g> = <var:b> \land <var:p> = <nat:1> \times <var:b> ^ <nat:5> + <nat:2> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:2> \} \\ <var:p> := <nat:3> + <var:p> * <var:g> ; \\ \{ <var:g> = <var:b> \land <var:p> = <nat:1> \times <var:b> ^ <nat:6> + <nat:2> \times <var:b> ^ <nat:4> + <nat:2> \times <var:b> ^ <nat:3> + <nat:3> \times <var:b> ^ <nat:2> + <nat:2> \times <var:b> + <nat:3> \} \\ <var:p> := <nat:4> + <var:p> * <var:g> \\ \{ <var:g> = <var:b> \land <var:p> = <nat:1> \times <var:b> ^ <nat:7> + <nat:2> \times <var:b> ^ <nat:5> + <nat:2> \times <var:b> ^ <nat:4> + <nat:3> \times <var:b> ^ <nat:3> + <nat:2> \times <var:b> ^ <nat:2> + <nat:3> \times <var:b> + <nat:4> \} \end{eqnarray} Using standard Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:p> := <nat:1> ; <var:p> := <var:p> * <var:g> ; <var:p> := <nat:2> + <var:p> * <var:g> ; <var:p> := <nat:2> + <var:p> * <var:g> ; <var:p> := <nat:3> + <var:p> * <var:g> ; <var:p> := <nat:2> + <var:p> * <var:g> ; <var:p> := <nat:3> + <var:p> * <var:g> ; <var:p> := <nat:4> + <var:p> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:g> = <var:b> }} <def:poly> {{ <var:p> = <nat:1> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:p> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:p> = <nat:1> * <var:b> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:p> = <nat:1> * <var:b> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:p> = <nat:1> * <var:b> ^ <nat:3> + <nat:2> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:p> = <nat:1> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:p> = <nat:1> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:p> = <nat:1> * <var:b> ^ <nat:6> + <nat:2> * <var:b> ^ <nat:4> + <nat:2> * <var:b> ^ <nat:3> + <nat:3> * <var:b> ^ <nat:2> + <nat:2> * <var:b> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:b> /\ <var:p> = <nat:1> * <var:b> ^ <nat:7> + <nat:2> * <var:b> ^ <nat:5> + <nat:2> * <var:b> ^ <nat:4> + <nat:3> * <var:b> ^ <nat:3> + <nat:2> * <var:b> ^ <nat:2> + <nat:3> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 