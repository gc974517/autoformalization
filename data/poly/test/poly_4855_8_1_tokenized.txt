\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:j1> := <var:E> ; <var:j2> := <var:j1> * <var:E> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:5> ; <var:j2> := <var:j2> * <nat:9> ; <var:O> := <var:j2> <var:O> := <var:O> + <var:j1> <var:O> := <var:O> + <var:j0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:E> = <var:w> $ ( letting positive coefficients $ <var:w> $ ) prior to the execution of our series of instructions , it holds that we have $ <var:O> = <nat:9> \cdot <var:w> ^ <nat:2> + <nat:5> \cdot <var:w> + <nat:6> $ after code has exited . \end{theorem} \begin{proof} The way to prove correctness for the series of commands can be done with usual Hoare reasoning . Further , \verb | { <var:E> = <var:w> } <var:j1> := <var:E> { <var:E> = <var:w> \land <var:j1> = <var:w> } | and \verb | { <var:E> = <var:w> \land <var:j1> = <var:w> } <var:j2> := <var:j1> * <var:E> { <var:E> = <var:w> \land <var:j1> = <var:w> \land <var:j2> = <var:w> ^ <nat:2> } | . This is guaranteed through the environment update law given in standard Hoare logic . Looking at the next lines of codein our set of instructions , \verb | { <var:E> = <var:w> } <var:j1> := <var:E> { <var:E> = <var:w> \land <var:j1> = <var:w> } | , \verb | { <var:E> = <var:w> \land <var:j1> = <var:w> } <var:j2> := <var:j1> * <var:E> { <var:E> = <var:w> \land <var:j1> = <var:w> \land <var:j2> = <var:w> ^ <nat:2> } | , \verb | { <var:E> = <var:w> \land <var:j1> = <var:w> \land <var:j2> = <var:w> ^ <nat:2> } <var:j0> := <nat:6> { <var:E> = <var:w> \land <var:j1> = <var:w> \land <var:j2> = <var:w> ^ <nat:2> \land <var:j0> = <nat:6> } | , \verb | { <var:E> = <var:w> \land <var:j1> = <var:w> \land <var:j2> = <var:w> ^ <nat:2> \land <var:j0> = <nat:6> } <var:j1> := <var:j1> * <nat:5> { <var:E> = <var:w> \land <var:j1> = <nat:5> * <var:w> \land <var:j2> = <var:w> ^ <nat:2> \land <var:j0> = <nat:6> } | and \verb | { <var:E> = <var:w> \land <var:j1> = <nat:5> * <var:w> \land <var:j2> = <var:w> ^ <nat:2> \land <var:j0> = <nat:6> } <var:j2> := <var:j2> * <nat:9> { <var:E> = <var:w> \land <var:j1> = <nat:5> * <var:w> \land <var:j2> = <nat:9> * <var:w> ^ <nat:2> \land <var:j0> = <nat:6> } | . Moving forward to the proceeding line of code in our code , \verb | { <var:E> = <var:w> } <var:j1> := <var:E> { <var:E> = <var:w> \land <var:j1> = <var:w> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Definition <def:poly> := <var:j1> := <var:E> ; <var:j2> := <var:j1> * <var:E> ; <var:j0> := <nat:6> ; <var:j1> := <var:j1> * <nat:5> ; <var:j2> := <var:j2> * <nat:9> ; <var:O> := <var:j2> <var:O> := <var:O> + <var:j1> <var:O> := <var:O> + <var:j0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:E> = <var:w> }} <def:poly> {{ <var:O> = <nat:9> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:j1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:j1> = <var:w> /\ <var:j2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:j1> = <var:w> /\ <var:j2> = <var:w> ^ <nat:2> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:j1> = <nat:5> * <var:w> /\ <var:j2> = <var:w> ^ <nat:2> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:j1> = <nat:5> * <var:w> /\ <var:j2> = <nat:9> * <var:w> ^ <nat:2> /\ <var:j0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:j1> = <nat:5> * <var:w> /\ <var:j0> = <nat:6> /\ <var:O> = <nat:9> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:j0> = <nat:6> /\ <var:O> = <nat:9> * <var:w> ^ <nat:2> + <nat:5> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:w> /\ <var:O> = <nat:9> * <var:w> ^ <nat:2> + <nat:5> * <var:w> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 