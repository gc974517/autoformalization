\begin{document} \begin{theorem} Take a list of commands such that \begin{verbatim} <var:G1> := <var:M> ; <var:G2> := <var:G1> * <var:M> ; <var:G3> := <var:G2> * <var:M> ; <var:G4> := <var:G3> * <var:M> ; <var:G0> := <nat:6> ; <var:G1> := <var:G1> * <nat:7> ; <var:G3> := <var:G3> * <nat:1> ; <var:G4> := <var:G4> * <nat:2> ; <var:I> := <var:G4> <var:I> := <var:I> + <var:G3> <var:I> := <var:I> + <var:G1> <var:I> := <var:I> + <var:G0> \end{verbatim} Allow ( for every integers $ <var:z> $ ) that $ <var:M> = <var:z> $ ahead of executing the code segment then we see $ <var:I> = <nat:2> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> + <nat:7> \cdot <var:z> + <nat:6> $ . \end{theorem} \begin{proof} See that this decorated segment of code . \begin{eqnarray} \{ <var:M> = <var:z> \} \\ <var:G1> := <var:M> ; \\ \{ <var:M> = <var:z> \land <var:G1> = <var:z> \} \\ <var:G2> := <var:G1> * <var:M> ; \\ \{ <var:M> = <var:z> \land <var:G1> = <var:z> \land <var:G2> = <var:z> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:M> ; \\ \{ <var:M> = <var:z> \land <var:G1> = <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G3> = <var:z> ^ <nat:3> \} \\ <var:G4> := <var:G3> * <var:M> ; \\ \{ <var:M> = <var:z> \land <var:G1> = <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G3> = <var:z> ^ <nat:3> \land <var:G4> = <var:z> ^ <nat:4> \} \\ <var:G0> := <nat:6> ; \\ \{ <var:M> = <var:z> \land <var:G1> = <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G3> = <var:z> ^ <nat:3> \land <var:G4> = <var:z> ^ <nat:4> \land <var:G0> = <nat:6> \} \\ <var:G1> := <var:G1> * <nat:7> ; \\ \{ <var:M> = <var:z> \land <var:G1> = <nat:7> \times <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G3> = <var:z> ^ <nat:3> \land <var:G4> = <var:z> ^ <nat:4> \land <var:G0> = <nat:6> \} \\ <var:G3> := <var:G3> * <nat:1> ; \\ \{ <var:M> = <var:z> \land <var:G1> = <nat:7> \times <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G3> = <nat:1> \times <var:z> ^ <nat:3> \land <var:G4> = <var:z> ^ <nat:4> \land <var:G0> = <nat:6> \} \\ <var:G4> := <var:G4> * <nat:2> ; \\ \{ <var:M> = <var:z> \land <var:G1> = <nat:7> \times <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G3> = <nat:1> \times <var:z> ^ <nat:3> \land <var:G4> = <nat:2> \times <var:z> ^ <nat:4> \land <var:G0> = <nat:6> \} \\ <var:I> := <var:G4> \\ \{ <var:M> = <var:z> \land <var:G1> = <nat:7> \times <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G3> = <nat:1> \times <var:z> ^ <nat:3> \land <var:G0> = <nat:6> \land <var:I> = <nat:2> \times <var:z> ^ <nat:4> \} \\ <var:I> := <var:I> + <var:G3> \\ \{ <var:M> = <var:z> \land <var:G1> = <nat:7> \times <var:z> \land <var:G2> = <var:z> ^ <nat:2> \land <var:G0> = <nat:6> \land <var:I> = <nat:2> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:G1> \\ \{ <var:M> = <var:z> \land <var:G0> = <nat:6> \land <var:I> = <nat:2> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:7> \times <var:z> \} \\ <var:I> := <var:I> + <var:G0> \\ \{ <var:M> = <var:z> \land <var:I> = <nat:2> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:7> \times <var:z> + <nat:6> \} \end{eqnarray} The application of usual Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <var:G4> : string := " <var:G4> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:M> = <var:z> }} <var:G1> := <var:M> ; <var:G2> := <var:G1> * <var:M> ; <var:G3> := <var:G2> * <var:M> ; <var:G4> := <var:G3> * <var:M> ; <var:G0> := <nat:6> ; <var:G1> := <var:G1> * <nat:7> ; <var:G3> := <var:G3> * <nat:1> ; <var:G4> := <var:G4> * <nat:2> ; <var:I> := <var:G4> <var:I> := <var:I> + <var:G3> <var:I> := <var:I> + <var:G1> <var:I> := <var:I> + <var:G0> {{ <var:I> = <nat:2> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:7> * <var:z> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:G1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:G1> = <var:z> /\ <var:G2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:G1> = <var:z> /\ <var:G2> = <var:z> ^ <nat:2> /\ <var:G3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:G1> = <var:z> /\ <var:G2> = <var:z> ^ <nat:2> /\ <var:G3> = <var:z> ^ <nat:3> /\ <var:G4> = <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:G1> = <var:z> /\ <var:G2> = <var:z> ^ <nat:2> /\ <var:G3> = <var:z> ^ <nat:3> /\ <var:G4> = <var:z> ^ <nat:4> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:G1> = <nat:7> * <var:z> /\ <var:G2> = <var:z> ^ <nat:2> /\ <var:G3> = <var:z> ^ <nat:3> /\ <var:G4> = <var:z> ^ <nat:4> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:G1> = <nat:7> * <var:z> /\ <var:G2> = <var:z> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:z> ^ <nat:3> /\ <var:G4> = <var:z> ^ <nat:4> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:G1> = <nat:7> * <var:z> /\ <var:G2> = <var:z> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:z> ^ <nat:3> /\ <var:G4> = <nat:2> * <var:z> ^ <nat:4> /\ <var:G0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:G1> = <nat:7> * <var:z> /\ <var:G2> = <var:z> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:z> ^ <nat:3> /\ <var:G0> = <nat:6> /\ <var:I> = <nat:2> * <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:G1> = <nat:7> * <var:z> /\ <var:G2> = <var:z> ^ <nat:2> /\ <var:G0> = <nat:6> /\ <var:I> = <nat:2> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:G0> = <nat:6> /\ <var:I> = <nat:2> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:7> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:z> /\ <var:I> = <nat:2> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:7> * <var:z> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 