\begin{document} \begin{theorem} Let the following code in \emph{Imp} as follows \begin{verbatim} <var:d> := <nat:1> ; <var:d> := <nat:4> + <var:d> * <var:A> ; <var:d> := <nat:1> + <var:d> * <var:A> ; <var:d> := <nat:1> + <var:d> * <var:A> ; <var:d> := <nat:4> + <var:d> * <var:A> ; <var:d> := <nat:1> + <var:d> * <var:A> ; <var:d> := <nat:2> + <var:d> * <var:A> ; <var:d> := <nat:2> + <var:d> * <var:A> ; <var:d> := <nat:2> + <var:d> * <var:A> ; <var:d> := <nat:4> + <var:d> * <var:A> ; <var:d> := <nat:1> + <var:d> * <var:A> ; <var:d> := <nat:3> + <var:d> * <var:A> ; <var:d> := <nat:1> + <var:d> * <var:A> \end{verbatim} Given --- with some integers $ <var:z> $ --- $ <var:A> = <var:z> $ ahead of the execution of our segment of code , it follows that we have $ <var:d> = <nat:1> \times <var:z> ^ <nat:12> + <nat:4> \times <var:z> ^ <nat:11> + <nat:1> \times <var:z> ^ <nat:10> + <nat:1> \times <var:z> ^ <nat:9> + <nat:4> \times <var:z> ^ <nat:8> + <nat:1> \times <var:z> ^ <nat:7> + <nat:2> \times <var:z> ^ <nat:6> + <nat:2> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:1> $ when program has exited . \end{theorem} \begin{proof} The flow of logic for the code segment is accomplished with standard Hoare techniques . Moving onward , the variable update line binding $ <nat:1> $ to $ <var:d>$ . This transfers $ \{ <var:A> = <var:z> \} $ to the postcondition $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \} $ . This is known to be sound by the assignment inference rule in Hoare techniques . Paying attention to the subsequent statement in our set of instructions , we have the environment update statement giving $ <nat:4> + <var:d> * <var:A> $ into $ <var:d>$ . This command forwards $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \} $ into $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> + <nat:4> \} $ . Next , the assignment statement assigning $ <nat:1> + <var:d> * <var:A> $ to $ <var:d>$ . This statement transfers the precondition $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> + <nat:4> \} $ as the condition $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:1> \} $ . This is deduced through the assignment rule of usual Hoare logic . Advancing to the next step , we see the variable binding line \verb | <var:d> := <nat:1> + <var:d> * <var:A> ; | . This advances the condition $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:1> \} $ as $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:1> \} $ . Keeping momentum , we see the variable update code \verb | <var:d> := <nat:4> + <var:d> * <var:A> ; | . This code takes the condition $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:1> \} $ as $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:4> \} $ . Taking another step toward the subsequent command contained in our set of instructions , we see the variable update code \verb | <var:d> := <nat:1> + <var:d> * <var:A> ; | . This advances the condition $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:4> \} $ as $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:5> + <nat:4> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:1> \} $ . This is sound by the assignment law from standard Hoare techniques . Moving forward to the next step , we have the environment update code \verb | <var:d> := <nat:2> + <var:d> * <var:A> ; | . This statement redefines $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:5> + <nat:4> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:1> \} $ to the condition $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:6> + <nat:4> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:2> \} $ . Paying attention to the upcoming piece of code found in the segment of code , we see the statement binding $ <nat:2> + <var:d> * <var:A> $ to $ <var:d>$ . This command transfers the condition $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:6> + <nat:4> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:2> \} $ as the postcondition $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:7> + <nat:4> \times <var:z> ^ <nat:6> + <nat:1> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:2> \} $ . Going forward , the variable binding statement binding $ <nat:2> + <var:d> * <var:A> $ toward $ <var:d>$ . This forwards $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:7> + <nat:4> \times <var:z> ^ <nat:6> + <nat:1> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:2> \} $ into $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:8> + <nat:4> \times <var:z> ^ <nat:7> + <nat:1> \times <var:z> ^ <nat:6> + <nat:1> \times <var:z> ^ <nat:5> + <nat:4> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:2> \} $ . Paying attention to the next command contained in our set of instructions , we see the line yielding $ <nat:4> + <var:d> * <var:A> $ into $ <var:d>$ . This transfers the precondition $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:8> + <nat:4> \times <var:z> ^ <nat:7> + <nat:1> \times <var:z> ^ <nat:6> + <nat:1> \times <var:z> ^ <nat:5> + <nat:4> \times <var:z> ^ <nat:4> + <nat:1> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:2> \} $ toward $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:9> + <nat:4> \times <var:z> ^ <nat:8> + <nat:1> \times <var:z> ^ <nat:7> + <nat:1> \times <var:z> ^ <nat:6> + <nat:4> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:4> \} $ . This is rigorously given with the assignment law in typical Hoare logic . Keeping momentum , we have the binding code binding $ <nat:1> + <var:d> * <var:A> $ to $ <var:d>$ . This redefines $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:9> + <nat:4> \times <var:z> ^ <nat:8> + <nat:1> \times <var:z> ^ <nat:7> + <nat:1> \times <var:z> ^ <nat:6> + <nat:4> \times <var:z> ^ <nat:5> + <nat:1> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:4> \} $ toward $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:10> + <nat:4> \times <var:z> ^ <nat:9> + <nat:1> \times <var:z> ^ <nat:8> + <nat:1> \times <var:z> ^ <nat:7> + <nat:4> \times <var:z> ^ <nat:6> + <nat:1> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:1> \} $ . This is shown to be logically sound through the assignment rule given in typical Hoare logic . Shifting focus toward the proceeding line contained in the segment of code , we have the variable update statement giving $ <nat:3> + <var:d> * <var:A> $ toward $ <var:d>$ . This moves $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:10> + <nat:4> \times <var:z> ^ <nat:9> + <nat:1> \times <var:z> ^ <nat:8> + <nat:1> \times <var:z> ^ <nat:7> + <nat:4> \times <var:z> ^ <nat:6> + <nat:1> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:2> \times <var:z> ^ <nat:2> + <nat:4> \times <var:z> + <nat:1> \} $ toward $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:11> + <nat:4> \times <var:z> ^ <nat:10> + <nat:1> \times <var:z> ^ <nat:9> + <nat:1> \times <var:z> ^ <nat:8> + <nat:4> \times <var:z> ^ <nat:7> + <nat:1> \times <var:z> ^ <nat:6> + <nat:2> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:3> \} $ . Following , we see the environment update statement \verb | <var:d> := <nat:1> + <var:d> * <var:A> | . This statement advances the precondition $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:11> + <nat:4> \times <var:z> ^ <nat:10> + <nat:1> \times <var:z> ^ <nat:9> + <nat:1> \times <var:z> ^ <nat:8> + <nat:4> \times <var:z> ^ <nat:7> + <nat:1> \times <var:z> ^ <nat:6> + <nat:2> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:4> + <nat:2> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:1> \times <var:z> + <nat:3> \} $ into the postcondition $ \{ <var:A> = <var:z> \land <var:d> = <nat:1> \times <var:z> ^ <nat:12> + <nat:4> \times <var:z> ^ <nat:11> + <nat:1> \times <var:z> ^ <nat:10> + <nat:1> \times <var:z> ^ <nat:9> + <nat:4> \times <var:z> ^ <nat:8> + <nat:1> \times <var:z> ^ <nat:7> + <nat:2> \times <var:z> ^ <nat:6> + <nat:2> \times <var:z> ^ <nat:5> + <nat:2> \times <var:z> ^ <nat:4> + <nat:4> \times <var:z> ^ <nat:3> + <nat:1> \times <var:z> ^ <nat:2> + <nat:3> \times <var:z> + <nat:1> \} $ . This is known to be sound through the assignment law defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:A> = <var:z> }} <var:d> := <nat:1> ; <var:d> := <nat:4> + <var:d> * <var:A> ; <var:d> := <nat:1> + <var:d> * <var:A> ; <var:d> := <nat:1> + <var:d> * <var:A> ; <var:d> := <nat:4> + <var:d> * <var:A> ; <var:d> := <nat:1> + <var:d> * <var:A> ; <var:d> := <nat:2> + <var:d> * <var:A> ; <var:d> := <nat:2> + <var:d> * <var:A> ; <var:d> := <nat:2> + <var:d> * <var:A> ; <var:d> := <nat:4> + <var:d> * <var:A> ; <var:d> := <nat:1> + <var:d> * <var:A> ; <var:d> := <nat:3> + <var:d> * <var:A> ; <var:d> := <nat:1> + <var:d> * <var:A> {{ <var:d> = <nat:1> * <var:z> ^ <nat:12> + <nat:4> * <var:z> ^ <nat:11> + <nat:1> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:4> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:z> /\ <var:d> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:z> /\ <var:d> = <nat:1> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:8> + <nat:4> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:4> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:9> + <nat:4> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:4> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:10> + <nat:4> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:4> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:4> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:11> + <nat:4> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:4> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:12> + <nat:4> * <var:z> ^ <nat:11> + <nat:1> * <var:z> ^ <nat:10> + <nat:1> * <var:z> ^ <nat:9> + <nat:4> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:4> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 