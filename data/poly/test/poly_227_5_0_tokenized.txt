\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:3> ; <var:q1> := <nat:3> ; <var:q1> := <var:q1> * <var:o> ; <var:i> := <var:q1> ; <var:i> := <var:i> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> . Allow $ <var:o> = <var:H> $ ahead of the evaluation of this list of instructions , it holds that we see $ <var:i> = <nat:3> \times <var:H> + <nat:3> $ when code finishes . \end{theorem} \begin{proof} Demonstrating correctness of our series of instructions can be demonstrated by usual Hoare reasoning . Jumping to the subsequent statements seen in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:o> = <var:H> \} & <var:q0> := <nat:3> & \{ <var:o> = <var:H> \land <var:q0> = <nat:3> \} \\ \{ <var:o> = <var:H> \land <var:q0> = <nat:3> \} & <var:q1> := <nat:3> & \{ <var:o> = <var:H> \land <var:q0> = <nat:3> \land <var:q1> = <nat:3> \} \\ \{ <var:o> = <var:H> \land <var:q0> = <nat:3> \land <var:q1> = <nat:3> \} & <var:q1> := <var:q1> * <var:o> & \{ <var:o> = <var:H> \land <var:q0> = <nat:3> \land <var:q1> = <nat:3> \times <var:H> \} \\ \{ <var:o> = <var:H> \land <var:q0> = <nat:3> \land <var:q1> = <nat:3> \times <var:H> \} & <var:i> := <var:q1> & \{ <var:o> = <var:H> \land <var:q0> = <nat:3> \land <var:i> = <nat:3> \times <var:H> \} \\ \{ <var:o> = <var:H> \land <var:q0> = <nat:3> \land <var:i> = <nat:3> \times <var:H> \} & <var:i> := <var:i> + <var:q0& \{ <var:o> = <var:H> \land <var:i> = <nat:3> \times <var:H> + <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <def:poly> := <var:q0> := <nat:3> ; <var:q1> := <nat:3> ; <var:q1> := <var:q1> * <var:o> ; <var:i> := <var:q1> ; <var:i> := <var:i> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:o> = <var:H> }} <def:poly> {{ <var:i> = <nat:3> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:q0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:q0> = <nat:3> /\ <var:q1> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:q0> = <nat:3> /\ <var:i> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:i> = <nat:3> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 