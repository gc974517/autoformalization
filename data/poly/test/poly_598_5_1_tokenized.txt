\begin{document} \begin{theorem} Consider a series of instructions as \begin{verbatim} <var:h1> := <var:g> ; <var:h0> := <nat:1> ; <var:h1> := <var:h1> * <nat:4> ; <var:J> := <var:h1> <var:J> := <var:J> + <var:h0> \end{verbatim} Allow it to hold that $ <var:g> = <var:t> $ ( for positive integers $ <var:t> $ ) prior to the execution of the program , it follows that we see $ <var:J> = <nat:4> \cdot <var:t> + <nat:1> $ once list of commands has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:t> \} \\ <var:h1> := <var:g> ; \\ \{ <var:g> = <var:t> \land <var:h1> = <var:t> \} \\ <var:h0> := <nat:1> ; \\ \{ <var:g> = <var:t> \land <var:h1> = <var:t> \land <var:h0> = <nat:1> \} \\ <var:h1> := <var:h1> * <nat:4> ; \\ \{ <var:g> = <var:t> \land <var:h1> = <nat:4> \cdot <var:t> \land <var:h0> = <nat:1> \} \\ <var:J> := <var:h1> \\ \{ <var:g> = <var:t> \land <var:h0> = <nat:1> \land <var:J> = <nat:4> \cdot <var:t> \} \\ <var:J> := <var:J> + <var:h0> \\ \{ <var:g> = <var:t> \land <var:J> = <nat:4> \cdot <var:t> + <nat:1> \} \end{eqnarray} Using standard Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:g> = <var:t> }} <var:h1> := <var:g> ; <var:h0> := <nat:1> ; <var:h1> := <var:h1> * <nat:4> ; <var:J> := <var:h1> <var:J> := <var:J> + <var:h0> {{ <var:J> = <nat:4> * <var:t> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:h1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:h1> = <var:t> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:h1> = <nat:4> * <var:t> /\ <var:h0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:h0> = <nat:1> /\ <var:J> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:t> /\ <var:J> = <nat:4> * <var:t> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 