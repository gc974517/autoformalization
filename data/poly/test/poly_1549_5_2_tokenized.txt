\begin{document} \begin{theorem} Define a set of instructions as follows \begin{verbatim} <var:N> := <nat:2> ; <var:N> := <nat:3> + <var:N> * <var:j> ; <var:N> := <var:N> * <var:j> ; <var:N> := <nat:1> + <var:N> * <var:j> ; <var:N> := <nat:3> + <var:N> * <var:j> \end{verbatim} Allow that $ <var:j> = <var:C> $ ahead of the execution of our segment of code it follows that we see $ <var:N> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> + <nat:3> $ after set of instructions terminates . \end{theorem} \begin{proof} The way to prove correctness for this series of commands is given with Hoare reasoning . Next , we have the binding code \verb | <var:N> := <nat:2> ; | . This statement transfers the condition $ \{ <var:j> = <var:C> \} $ into $ \{ <var:j> = <var:C> \land <var:N> = <nat:2> \} $ . Further , we see the statement \verb | <var:N> := <nat:3> + <var:N> * <var:j> ; | . This redefines the precondition $ \{ <var:j> = <var:C> \land <var:N> = <nat:2> \} $ toward the postcondition $ \{ <var:j> = <var:C> \land <var:N> = <nat:2> * <var:C> + <nat:3> \} $ . This is deduced with the assignment law defined by usual Hoare reasoning . Moving forward to the subsequent line of code in the code , the command \verb | <var:N> := <var:N> * <var:j> ; | . This statement moves $ \{ <var:j> = <var:C> \land <var:N> = <nat:2> * <var:C> + <nat:3> \} $ toward $ \{ <var:j> = <var:C> \land <var:N> = <nat:2> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + \} $ . Advancing to the proceeding statement found in our set of commands , we have the variable assignmet code \verb | <var:N> := <nat:1> + <var:N> * <var:j> ; | . This command transfers $ \{ <var:j> = <var:C> \land <var:N> = <nat:2> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + \} $ into $ \{ <var:j> = <var:C> \land <var:N> = <nat:2> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:1> \} $ . Advancing to the subsequent statement seen in our set of commands , the variable update statement \verb | <var:N> := <nat:3> + <var:N> * <var:j> | . This code forwards $ \{ <var:j> = <var:C> \land <var:N> = <nat:2> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:1> \} $ to $ \{ <var:j> = <var:C> \land <var:N> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:j> = <var:C> }} <var:N> := <nat:2> ; <var:N> := <nat:3> + <var:N> * <var:j> ; <var:N> := <var:N> * <var:j> ; <var:N> := <nat:1> + <var:N> * <var:j> ; <var:N> := <nat:3> + <var:N> * <var:j> {{ <var:N> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:N> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:N> = <nat:2> * <var:C> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:N> = <nat:2> * <var:C> ^ <nat:2> + <nat:3> * <var:C> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:N> = <nat:2> * <var:C> ^ <nat:3> + <nat:3> * <var:C> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:C> /\ <var:N> = <nat:2> * <var:C> ^ <nat:4> + <nat:3> * <var:C> ^ <nat:3> + <nat:1> * <var:C> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 