\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} as \begin{verbatim} <var:c> := <nat:1> ; <var:c> := <var:c> * <var:x> ; <var:c> := <var:c> * <var:x> ; <var:c> := <nat:4> + <var:c> * <var:x> ; <var:c> := <var:c> * <var:x> ; <var:c> := <nat:1> + <var:c> * <var:x> ; <var:c> := <nat:2> + <var:c> * <var:x> ; <var:c> := <nat:4> + <var:c> * <var:x> ; <var:c> := <nat:2> + <var:c> * <var:x> ; <var:c> := <nat:4> + <var:c> * <var:x> ; <var:c> := <var:c> * <var:x> ; <var:c> := <nat:1> + <var:c> * <var:x> \end{verbatim} Allow $ <var:x> = <var:w> $ ahead of evaluating our series of instructions it must be that $ <var:c> = <nat:1> * <var:w> ^ <nat:11> + <nat:4> * <var:w> ^ <nat:8> + <nat:1> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this segment of code is done by the following decorated segment of code . \begin{eqnarray} \{ <var:x> = <var:w> \} \\ <var:c> := <nat:1> ; \\ \{ <var:x> = <var:w> \land <var:c> = <nat:1> \} \\ <var:c> := <var:c> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:c> = <nat:1> * <var:w> + \} \\ <var:c> := <var:c> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:c> = <nat:1> * <var:w> ^ <nat:2> + \} \\ <var:c> := <nat:4> + <var:c> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:c> = <nat:1> * <var:w> ^ <nat:3> + <nat:4> \} \\ <var:c> := <var:c> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:c> = <nat:1> * <var:w> ^ <nat:4> + <nat:4> * <var:w> + \} \\ <var:c> := <nat:1> + <var:c> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:c> = <nat:1> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> \} \\ <var:c> := <nat:2> + <var:c> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:c> = <nat:1> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:3> + <nat:1> * <var:w> + <nat:2> \} \\ <var:c> := <nat:4> + <var:c> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:c> = <nat:1> * <var:w> ^ <nat:7> + <nat:4> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> \} \\ <var:c> := <nat:2> + <var:c> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:c> = <nat:1> * <var:w> ^ <nat:8> + <nat:4> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:2> \} \\ <var:c> := <nat:4> + <var:c> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:c> = <nat:1> * <var:w> ^ <nat:9> + <nat:4> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> \} \\ <var:c> := <var:c> * <var:x> ; \\ \{ <var:x> = <var:w> \land <var:c> = <nat:1> * <var:w> ^ <nat:10> + <nat:4> * <var:w> ^ <nat:7> + <nat:1> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + \} \\ <var:c> := <nat:1> + <var:c> * <var:x> \\ \{ <var:x> = <var:w> \land <var:c> = <nat:1> * <var:w> ^ <nat:11> + <nat:4> * <var:w> ^ <nat:8> + <nat:1> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> \} \end{eqnarray} The application of standard Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:x> = <var:w> }} <var:c> := <nat:1> ; <var:c> := <var:c> * <var:x> ; <var:c> := <var:c> * <var:x> ; <var:c> := <nat:4> + <var:c> * <var:x> ; <var:c> := <var:c> * <var:x> ; <var:c> := <nat:1> + <var:c> * <var:x> ; <var:c> := <nat:2> + <var:c> * <var:x> ; <var:c> := <nat:4> + <var:c> * <var:x> ; <var:c> := <nat:2> + <var:c> * <var:x> ; <var:c> := <nat:4> + <var:c> * <var:x> ; <var:c> := <var:c> * <var:x> ; <var:c> := <nat:1> + <var:c> * <var:x> {{ <var:c> = <nat:1> * <var:w> ^ <nat:11> + <nat:4> * <var:w> ^ <nat:8> + <nat:1> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:c> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:c> = <nat:1> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:c> = <nat:1> * <var:w> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:c> = <nat:1> * <var:w> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:c> = <nat:1> * <var:w> ^ <nat:4> + <nat:4> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:c> = <nat:1> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:c> = <nat:1> * <var:w> ^ <nat:6> + <nat:4> * <var:w> ^ <nat:3> + <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:c> = <nat:1> * <var:w> ^ <nat:7> + <nat:4> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:c> = <nat:1> * <var:w> ^ <nat:8> + <nat:4> * <var:w> ^ <nat:5> + <nat:1> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:c> = <nat:1> * <var:w> ^ <nat:9> + <nat:4> * <var:w> ^ <nat:6> + <nat:1> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:2> * <var:w> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:c> = <nat:1> * <var:w> ^ <nat:10> + <nat:4> * <var:w> ^ <nat:7> + <nat:1> * <var:w> ^ <nat:5> + <nat:2> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> * <var:w> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:w> /\ <var:c> = <nat:1> * <var:w> ^ <nat:11> + <nat:4> * <var:w> ^ <nat:8> + <nat:1> * <var:w> ^ <nat:6> + <nat:2> * <var:w> ^ <nat:5> + <nat:4> * <var:w> ^ <nat:4> + <nat:2> * <var:w> ^ <nat:3> + <nat:4> * <var:w> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 