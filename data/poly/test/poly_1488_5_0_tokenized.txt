\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:8> ; <var:S1> := <nat:8> ; <var:S1> := <var:S1> * <var:L> ; <var:D> := <var:S1> ; <var:D> := <var:D> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:L> = <var:z> $ ahead of interpreting our segment of code it must be that $ <var:D> = <nat:8> \cdot <var:z> + <nat:8> $ once series of commands is done executing . \end{theorem} \begin{proof} Proving correctness for this code segment is given with usual Hoare techniques . Jumping to the next step contained in our list of instructions , we have the variable update statement \verb | <var:S0> := <nat:8> ; | . This redefines the condition $ \{ <var:L> = <var:z> \} $ toward $ \{ <var:L> = <var:z> \land <var:S0> = <nat:8> \} $ . This is rigorously given through the assignment scheme in typical Hoare techniques . Moving forward to the upcoming command contained in the set of instructions , we see the command \verb | <var:S1> := <nat:8> ; | . This line moves the precondition $ \{ <var:L> = <var:z> \land <var:S0> = <nat:8> \} $ into the condition $ \{ <var:L> = <var:z> \land <var:S0> = <nat:8> \land <var:S1> = <nat:8> \} $ . This is ensured with the assignment law defined in Hoare reasoning . Paying attention to the subsequent line in the series of instructions , the assignment statement defining $ <var:S1> * <var:L> $ into $ <var:S1>$ . This takes $ \{ <var:L> = <var:z> \land <var:S0> = <nat:8> \land <var:S1> = <nat:8> \} $ to $ \{ <var:L> = <var:z> \land <var:S0> = <nat:8> \land <var:S1> = <nat:8> \cdot <var:z> \} $ . Stepping forward , we have the command \verb | <var:D> := <var:S1> ; | . This redefines the precondition $ \{ <var:L> = <var:z> \land <var:S0> = <nat:8> \land <var:S1> = <nat:8> \cdot <var:z> \} $ into the condition $ \{ <var:L> = <var:z> \land <var:S0> = <nat:8> \land <var:D> = <nat:8> \cdot <var:z> \} $ . This is sound by the assignment inference rule in standard Hoare techniques . Observing the proceeding statement in our set of instructions , we have the environment update statement yielding $ <var:D> + <var:S0$ toward $ <var:D>$ . This transfers $ \{ <var:L> = <var:z> \land <var:S0> = <nat:8> \land <var:D> = <nat:8> \cdot <var:z> \} $ to the postcondition $ \{ <var:L> = <var:z> \land <var:D> = <nat:8> \cdot <var:z> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <def:poly> := <var:S0> := <nat:8> ; <var:S1> := <nat:8> ; <var:S1> := <var:S1> * <var:L> ; <var:D> := <var:S1> ; <var:D> := <var:D> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:L> = <var:z> }} <def:poly> {{ <var:D> = <nat:8> * <var:z> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:z> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:z> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:z> /\ <var:S0> = <nat:8> /\ <var:S1> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:z> /\ <var:S0> = <nat:8> /\ <var:D> = <nat:8> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:z> /\ <var:D> = <nat:8> * <var:z> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 