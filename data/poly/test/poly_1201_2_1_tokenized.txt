\begin{document} \begin{theorem} Consider a program in \emph{Imp} as follows \begin{verbatim} <var:j0> := <nat:1> ; <var:S> := <var:j0> \end{verbatim} Allowing that we have $ <var:p> = <var:w> $ ( given all positive coefficients $ <var:w> $ ) ahead of executing the series of commands it follows that we see $ <var:S> = <nat:1> $ when set of instructions exits . \end{theorem} \begin{proof} Applying standard Hoare logic returns : \begin{eqnarray} \{ <var:p> = <var:w> \} \\ <var:j0> := <nat:1> ; \\ \{ <var:p> = <var:w> \land <var:j0> = <nat:1> \} \\ <var:S> := <var:j0> \\ \{ <var:p> = <var:w> \land <var:S> = <nat:1> \} \end{eqnarray} Therefore , this list of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:p> = <var:w> }} <var:j0> := <nat:1> ; <var:S> := <var:j0> {{ <var:S> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:w> /\ <var:S> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 