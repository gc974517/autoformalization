\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:c1> := <var:Y> ; <var:c2> := <var:c1> * <var:Y> ; <var:c0> := <nat:3> ; <var:c2> := <var:c2> * <nat:3> ; <var:k> := <var:c2> <var:k> := <var:k> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:Y> = <var:U> $ ahead of the evaluation of our list of instructions , it must be that we see $ <var:k> = <nat:3> \times <var:U> ^ <nat:2> + <nat:3> $ once series of instructions is done . \end{theorem} \begin{proof} The way to prove correctness for our program is accomplished by standard Hoare logic . Observing the following lines of codefound in the series of commands , \verb | { <var:Y> = <var:U> } <var:c1> := <var:Y> { <var:Y> = <var:U> \land <var:c1> = <var:U> } | , \verb | { <var:Y> = <var:U> \land <var:c1> = <var:U> } <var:c2> := <var:c1> * <var:Y> { <var:Y> = <var:U> \land <var:c1> = <var:U> \land <var:c2> = <var:U> ^ <nat:2> } | , \verb | { <var:Y> = <var:U> \land <var:c1> = <var:U> \land <var:c2> = <var:U> ^ <nat:2> } <var:c0> := <nat:3> { <var:Y> = <var:U> \land <var:c1> = <var:U> \land <var:c2> = <var:U> ^ <nat:2> \land <var:c0> = <nat:3> } | , \verb | { <var:Y> = <var:U> \land <var:c1> = <var:U> \land <var:c2> = <var:U> ^ <nat:2> \land <var:c0> = <nat:3> } <var:c2> := <var:c2> * <nat:3> { <var:Y> = <var:U> \land <var:c1> = <var:U> \land <var:c2> = <nat:3> \cdot <var:U> ^ <nat:2> \land <var:c0> = <nat:3> } | , \verb | { <var:Y> = <var:U> \land <var:c1> = <var:U> \land <var:c2> = <nat:3> \cdot <var:U> ^ <nat:2> \land <var:c0> = <nat:3> } <var:k> := <var:c2{ <var:Y> = <var:U> \land <var:c1> = <var:U> \land <var:c0> = <nat:3> \land <var:k> = <nat:3> \cdot <var:U> ^ <nat:2> } | and \verb | { <var:Y> = <var:U> \land <var:c1> = <var:U> \land <var:c0> = <nat:3> \land <var:k> = <nat:3> \cdot <var:U> ^ <nat:2> } <var:k> := <var:k> + <var:c0{ <var:Y> = <var:U> \land <var:k> = <nat:3> \cdot <var:U> ^ <nat:2> + <nat:3> } | . This is sound with the environment update inference rule given by usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c1> := <var:Y> ; <var:c2> := <var:c1> * <var:Y> ; <var:c0> := <nat:3> ; <var:c2> := <var:c2> * <nat:3> ; <var:k> := <var:c2> <var:k> := <var:k> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:Y> = <var:U> }} <def:poly> {{ <var:k> = <nat:3> * <var:U> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:c1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:c1> = <var:U> /\ <var:c2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:c1> = <var:U> /\ <var:c2> = <var:U> ^ <nat:2> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:c1> = <var:U> /\ <var:c2> = <nat:3> * <var:U> ^ <nat:2> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:c1> = <var:U> /\ <var:c0> = <nat:3> /\ <var:k> = <nat:3> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:U> /\ <var:k> = <nat:3> * <var:U> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 