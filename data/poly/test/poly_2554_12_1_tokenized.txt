\begin{document} \begin{theorem} Take a series of instructions as follows \begin{verbatim} <var:h1> := <var:j> ; <var:h2> := <var:h1> * <var:j> ; <var:h3> := <var:h2> * <var:j> ; <var:h4> := <var:h3> * <var:j> ; <var:h0> := <nat:4> ; <var:h2> := <var:h2> * <nat:2> ; <var:h3> := <var:h3> * <nat:4> ; <var:h4> := <var:h4> * <nat:4> ; <var:Z> := <var:h4> <var:Z> := <var:Z> + <var:h3> <var:Z> := <var:Z> + <var:h2> <var:Z> := <var:Z> + <var:h0> \end{verbatim} Assume it to be that $ <var:j> = <var:w> $ given all positive integers $ <var:w> $ ahead of evaluating the set of commands , then we see $ <var:Z> = <nat:4> \times <var:w> ^ <nat:4> + <nat:4> \times <var:w> ^ <nat:3> + <nat:2> \times <var:w> ^ <nat:2> + <nat:4> $ after program finishes . \end{theorem} \begin{proof} Let the below decorated series of instructions . \begin{eqnarray} \{ <var:j> = <var:w> \} \\ <var:h1> := <var:j> ; \\ \{ <var:j> = <var:w> \land <var:h1> = <var:w> \} \\ <var:h2> := <var:h1> * <var:j> ; \\ \{ <var:j> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <var:w> ^ <nat:2> \} \\ <var:h3> := <var:h2> * <var:j> ; \\ \{ <var:j> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <var:w> ^ <nat:2> \land <var:h3> = <var:w> ^ <nat:3> \} \\ <var:h4> := <var:h3> * <var:j> ; \\ \{ <var:j> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <var:w> ^ <nat:2> \land <var:h3> = <var:w> ^ <nat:3> \land <var:h4> = <var:w> ^ <nat:4> \} \\ <var:h0> := <nat:4> ; \\ \{ <var:j> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <var:w> ^ <nat:2> \land <var:h3> = <var:w> ^ <nat:3> \land <var:h4> = <var:w> ^ <nat:4> \land <var:h0> = <nat:4> \} \\ <var:h2> := <var:h2> * <nat:2> ; \\ \{ <var:j> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <nat:2> * <var:w> ^ <nat:2> \land <var:h3> = <var:w> ^ <nat:3> \land <var:h4> = <var:w> ^ <nat:4> \land <var:h0> = <nat:4> \} \\ <var:h3> := <var:h3> * <nat:4> ; \\ \{ <var:j> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <nat:2> * <var:w> ^ <nat:2> \land <var:h3> = <nat:4> * <var:w> ^ <nat:3> \land <var:h4> = <var:w> ^ <nat:4> \land <var:h0> = <nat:4> \} \\ <var:h4> := <var:h4> * <nat:4> ; \\ \{ <var:j> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <nat:2> * <var:w> ^ <nat:2> \land <var:h3> = <nat:4> * <var:w> ^ <nat:3> \land <var:h4> = <nat:4> * <var:w> ^ <nat:4> \land <var:h0> = <nat:4> \} \\ <var:Z> := <var:h4> \\ \{ <var:j> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <nat:2> * <var:w> ^ <nat:2> \land <var:h3> = <nat:4> * <var:w> ^ <nat:3> \land <var:h0> = <nat:4> \land <var:Z> = <nat:4> * <var:w> ^ <nat:4> \} \\ <var:Z> := <var:Z> + <var:h3> \\ \{ <var:j> = <var:w> \land <var:h1> = <var:w> \land <var:h2> = <nat:2> * <var:w> ^ <nat:2> \land <var:h0> = <nat:4> \land <var:Z> = <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> \} \\ <var:Z> := <var:Z> + <var:h2> \\ \{ <var:j> = <var:w> \land <var:h1> = <var:w> \land <var:h0> = <nat:4> \land <var:Z> = <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> \} \\ <var:Z> := <var:Z> + <var:h0> \\ \{ <var:j> = <var:w> \land <var:Z> = <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> \} \end{eqnarray} Applying standard Hoare reasoning solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:h0> : string := " <var:h0> " . Definition <var:h1> : string := " <var:h1> " . Definition <var:h2> : string := " <var:h2> " . Definition <var:h3> : string := " <var:h3> " . Definition <var:h4> : string := " <var:h4> " . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:j> = <var:w> }} <var:h1> := <var:j> ; <var:h2> := <var:h1> * <var:j> ; <var:h3> := <var:h2> * <var:j> ; <var:h4> := <var:h3> * <var:j> ; <var:h0> := <nat:4> ; <var:h2> := <var:h2> * <nat:2> ; <var:h3> := <var:h3> * <nat:4> ; <var:h4> := <var:h4> * <nat:4> ; <var:Z> := <var:h4> <var:Z> := <var:Z> + <var:h3> <var:Z> := <var:Z> + <var:h2> <var:Z> := <var:Z> + <var:h0> {{ <var:Z> = <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:h1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <var:w> ^ <nat:2> /\ <var:h3> = <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <var:w> ^ <nat:2> /\ <var:h3> = <var:w> ^ <nat:3> /\ <var:h4> = <var:w> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <var:w> ^ <nat:2> /\ <var:h3> = <var:w> ^ <nat:3> /\ <var:h4> = <var:w> ^ <nat:4> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <nat:2> * <var:w> ^ <nat:2> /\ <var:h3> = <var:w> ^ <nat:3> /\ <var:h4> = <var:w> ^ <nat:4> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <nat:2> * <var:w> ^ <nat:2> /\ <var:h3> = <nat:4> * <var:w> ^ <nat:3> /\ <var:h4> = <var:w> ^ <nat:4> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <nat:2> * <var:w> ^ <nat:2> /\ <var:h3> = <nat:4> * <var:w> ^ <nat:3> /\ <var:h4> = <nat:4> * <var:w> ^ <nat:4> /\ <var:h0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <nat:2> * <var:w> ^ <nat:2> /\ <var:h3> = <nat:4> * <var:w> ^ <nat:3> /\ <var:h0> = <nat:4> /\ <var:Z> = <nat:4> * <var:w> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:h1> = <var:w> /\ <var:h2> = <nat:2> * <var:w> ^ <nat:2> /\ <var:h0> = <nat:4> /\ <var:Z> = <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:h1> = <var:w> /\ <var:h0> = <nat:4> /\ <var:Z> = <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:w> /\ <var:Z> = <nat:4> * <var:w> ^ <nat:4> + <nat:4> * <var:w> ^ <nat:3> + <nat:2> * <var:w> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 