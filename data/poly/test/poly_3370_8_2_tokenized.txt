\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:z> := <nat:2> ; <var:z> := <nat:2> + <var:z> * <var:c> ; <var:z> := <nat:1> + <var:z> * <var:c> ; <var:z> := <nat:3> + <var:z> * <var:c> ; <var:z> := <nat:2> + <var:z> * <var:c> ; <var:z> := <nat:2> + <var:z> * <var:c> ; <var:z> := <nat:1> + <var:z> * <var:c> ; <var:z> := <nat:4> + <var:z> * <var:c> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> . Given that we have $ <var:c> = <var:K> $ prior to the execution of this segment of code , it must be that $ <var:z> = <nat:2> \times <var:K> ^ <nat:7> + <nat:2> \times <var:K> ^ <nat:6> + <nat:1> \times <var:K> ^ <nat:5> + <nat:3> \times <var:K> ^ <nat:4> + <nat:2> \times <var:K> ^ <nat:3> + <nat:2> \times <var:K> ^ <nat:2> + <nat:1> \times <var:K> + <nat:4> $ once code terminates . \end{theorem} \begin{proof} Using standard Hoare reasoning results in : \begin{eqnarray} \{ <var:c> = <var:K> \} \\ <var:z> := <nat:2> ; \\ \{ <var:c> = <var:K> \land <var:z> = <nat:2> \} \\ <var:z> := <nat:2> + <var:z> * <var:c> ; \\ \{ <var:c> = <var:K> \land <var:z> = <nat:2> \cdot <var:K> + <nat:2> \} \\ <var:z> := <nat:1> + <var:z> * <var:c> ; \\ \{ <var:c> = <var:K> \land <var:z> = <nat:2> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> + <nat:1> \} \\ <var:z> := <nat:3> + <var:z> * <var:c> ; \\ \{ <var:c> = <var:K> \land <var:z> = <nat:2> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> + <nat:1> \cdot <var:K> + <nat:3> \} \end{eqnarray} Continuing executing the set of instructions yields : \begin{eqnarray} <var:z> := <nat:2> + <var:z> * <var:c> ; \\ \{ <var:c> = <var:K> \land <var:z> = <nat:2> \cdot <var:K> ^ <nat:4> + <nat:2> \cdot <var:K> ^ <nat:3> + <nat:1> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:2> \} \\ <var:z> := <nat:2> + <var:z> * <var:c> ; \\ \{ <var:c> = <var:K> \land <var:z> = <nat:2> \cdot <var:K> ^ <nat:5> + <nat:2> \cdot <var:K> ^ <nat:4> + <nat:1> \cdot <var:K> ^ <nat:3> + <nat:3> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> + <nat:2> \} \\ <var:z> := <nat:1> + <var:z> * <var:c> ; \\ \{ <var:c> = <var:K> \land <var:z> = <nat:2> \cdot <var:K> ^ <nat:6> + <nat:2> \cdot <var:K> ^ <nat:5> + <nat:1> \cdot <var:K> ^ <nat:4> + <nat:3> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> + <nat:2> \cdot <var:K> + <nat:1> \} \\ <var:z> := <nat:4> + <var:z> * <var:c> \\ \{ <var:c> = <var:K> \land <var:z> = <nat:2> \cdot <var:K> ^ <nat:7> + <nat:2> \cdot <var:K> ^ <nat:6> + <nat:1> \cdot <var:K> ^ <nat:5> + <nat:3> \cdot <var:K> ^ <nat:4> + <nat:2> \cdot <var:K> ^ <nat:3> + <nat:2> \cdot <var:K> ^ <nat:2> + <nat:1> \cdot <var:K> + <nat:4> \} \end{eqnarray} Considering the above , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:z> := <nat:2> ; <var:z> := <nat:2> + <var:z> * <var:c> ; <var:z> := <nat:1> + <var:z> * <var:c> ; <var:z> := <nat:3> + <var:z> * <var:c> ; <var:z> := <nat:2> + <var:z> * <var:c> ; <var:z> := <nat:2> + <var:z> * <var:c> ; <var:z> := <nat:1> + <var:z> * <var:c> ; <var:z> := <nat:4> + <var:z> * <var:c> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:c> = <var:K> }} <def:poly> {{ <var:z> = <nat:2> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:6> + <nat:1> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:z> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:z> = <nat:2> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:z> = <nat:2> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:z> = <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:z> = <nat:2> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:1> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:z> = <nat:2> * <var:K> ^ <nat:5> + <nat:2> * <var:K> ^ <nat:4> + <nat:1> * <var:K> ^ <nat:3> + <nat:3> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:z> = <nat:2> * <var:K> ^ <nat:6> + <nat:2> * <var:K> ^ <nat:5> + <nat:1> * <var:K> ^ <nat:4> + <nat:3> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:2> * <var:K> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:z> = <nat:2> * <var:K> ^ <nat:7> + <nat:2> * <var:K> ^ <nat:6> + <nat:1> * <var:K> ^ <nat:5> + <nat:3> * <var:K> ^ <nat:4> + <nat:2> * <var:K> ^ <nat:3> + <nat:2> * <var:K> ^ <nat:2> + <nat:1> * <var:K> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 