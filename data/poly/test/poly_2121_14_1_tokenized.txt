\begin{document} \begin{theorem} Let the following list of commands : \begin{verbatim} <var:i1> := <var:a> ; <var:i2> := <var:i1> * <var:a> ; <var:i3> := <var:i2> * <var:a> ; <var:i4> := <var:i3> * <var:a> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:2> ; <var:i2> := <var:i2> * <nat:2> ; <var:i3> := <var:i3> * <nat:4> ; <var:i4> := <var:i4> * <nat:1> ; <var:D> := <var:i4> <var:D> := <var:D> + <var:i3> <var:D> := <var:D> + <var:i2> <var:D> := <var:D> + <var:i1> <var:D> := <var:D> + <var:i0> \end{verbatim} Allow ( for every whole numbers $ <var:U> $ ) it to hold that $ <var:a> = <var:U> $ prior to running this series of instructions , then $ <var:D> = <nat:1> \cdot <var:U> ^ <nat:4> + <nat:4> \cdot <var:U> ^ <nat:3> + <nat:2> \cdot <var:U> ^ <nat:2> + <nat:2> \cdot <var:U> + <nat:3> $ once list of instructions has finished . \end{theorem} \begin{proof} The course of logic for our set of commands can be accomplished using standard Hoare techniques . Further , we see \begin{verbatim} { <var:a> = <var:U> } <var:i1> := <var:a> { <var:a> = <var:U> \land <var:i1> = <var:U> } { <var:a> = <var:U> \land <var:i1> = <var:U> } <var:i2> := <var:i1> * <var:a> { <var:a> = <var:U> \land <var:i1> = <var:U> \land <var:i2> = <var:U> ^ <nat:2> } { <var:a> = <var:U> \land <var:i1> = <var:U> \land <var:i2> = <var:U> ^ <nat:2> } <var:i3> := <var:i2> * <var:a> { <var:a> = <var:U> \land <var:i1> = <var:U> \land <var:i2> = <var:U> ^ <nat:2> \land <var:i3> = <var:U> ^ <nat:3> } { <var:a> = <var:U> \land <var:i1> = <var:U> \land <var:i2> = <var:U> ^ <nat:2> \land <var:i3> = <var:U> ^ <nat:3> } <var:i4> := <var:i3> * <var:a> { <var:a> = <var:U> \land <var:i1> = <var:U> \land <var:i2> = <var:U> ^ <nat:2> \land <var:i3> = <var:U> ^ <nat:3> \land <var:i4> = <var:U> ^ <nat:4> } { <var:a> = <var:U> \land <var:i1> = <var:U> \land <var:i2> = <var:U> ^ <nat:2> \land <var:i3> = <var:U> ^ <nat:3> \land <var:i4> = <var:U> ^ <nat:4> } <var:i0> := <nat:3> { <var:a> = <var:U> \land <var:i1> = <var:U> \land <var:i2> = <var:U> ^ <nat:2> \land <var:i3> = <var:U> ^ <nat:3> \land <var:i4> = <var:U> ^ <nat:4> \land <var:i0> = <nat:3> } { <var:a> = <var:U> \land <var:i1> = <var:U> \land <var:i2> = <var:U> ^ <nat:2> \land <var:i3> = <var:U> ^ <nat:3> \land <var:i4> = <var:U> ^ <nat:4> \land <var:i0> = <nat:3> } <var:i1> := <var:i1> * <nat:2> { <var:a> = <var:U> \land <var:i1> = <nat:2> \times <var:U> \land <var:i2> = <var:U> ^ <nat:2> \land <var:i3> = <var:U> ^ <nat:3> \land <var:i4> = <var:U> ^ <nat:4> \land <var:i0> = <nat:3> } { <var:a> = <var:U> \land <var:i1> = <nat:2> \times <var:U> \land <var:i2> = <var:U> ^ <nat:2> \land <var:i3> = <var:U> ^ <nat:3> \land <var:i4> = <var:U> ^ <nat:4> \land <var:i0> = <nat:3> } <var:i2> := <var:i2> * <nat:2> { <var:a> = <var:U> \land <var:i1> = <nat:2> \times <var:U> \land <var:i2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:i3> = <var:U> ^ <nat:3> \land <var:i4> = <var:U> ^ <nat:4> \land <var:i0> = <nat:3> } { <var:a> = <var:U> \land <var:i1> = <nat:2> \times <var:U> \land <var:i2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:i3> = <var:U> ^ <nat:3> \land <var:i4> = <var:U> ^ <nat:4> \land <var:i0> = <nat:3> } <var:i3> := <var:i3> * <nat:4> { <var:a> = <var:U> \land <var:i1> = <nat:2> \times <var:U> \land <var:i2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:i3> = <nat:4> \times <var:U> ^ <nat:3> \land <var:i4> = <var:U> ^ <nat:4> \land <var:i0> = <nat:3> } { <var:a> = <var:U> \land <var:i1> = <nat:2> \times <var:U> \land <var:i2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:i3> = <nat:4> \times <var:U> ^ <nat:3> \land <var:i4> = <var:U> ^ <nat:4> \land <var:i0> = <nat:3> } <var:i4> := <var:i4> * <nat:1> { <var:a> = <var:U> \land <var:i1> = <nat:2> \times <var:U> \land <var:i2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:i3> = <nat:4> \times <var:U> ^ <nat:3> \land <var:i4> = <nat:1> \times <var:U> ^ <nat:4> \land <var:i0> = <nat:3> } { <var:a> = <var:U> \land <var:i1> = <nat:2> \times <var:U> \land <var:i2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:i3> = <nat:4> \times <var:U> ^ <nat:3> \land <var:i4> = <nat:1> \times <var:U> ^ <nat:4> \land <var:i0> = <nat:3> } <var:D> := <var:i4{ <var:a> = <var:U> \land <var:i1> = <nat:2> \times <var:U> \land <var:i2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:i3> = <nat:4> \times <var:U> ^ <nat:3> \land <var:i0> = <nat:3> \land <var:D> = <nat:1> \times <var:U> ^ <nat:4> } { <var:a> = <var:U> \land <var:i1> = <nat:2> \times <var:U> \land <var:i2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:i3> = <nat:4> \times <var:U> ^ <nat:3> \land <var:i0> = <nat:3> \land <var:D> = <nat:1> \times <var:U> ^ <nat:4> } <var:D> := <var:D> + <var:i3{ <var:a> = <var:U> \land <var:i1> = <nat:2> \times <var:U> \land <var:i2> = <nat:2> \times <var:U> ^ <nat:2> \land <var:i0> = <nat:3> \land <var:D> = <nat:1> \times <var:U> ^ <nat:4> + <nat:4> \times <var:U> ^ <nat:3> } \end{verbatim} This is shown using the environment update rule defined by usual Hoare logic . Going forward , \begin{verbatim} { <var:a> = <var:U> } <var:i1> := <var:a> { <var:a> = <var:U> \land <var:i1> = <var:U> } \end{verbatim} This is ensured with the environment update inference rule of typical Hoare techniques . Looking at the proceeding lines of codefound in the list of instructions , \begin{verbatim} { <var:a> = <var:U> } <var:i1> := <var:a> { <var:a> = <var:U> \land <var:i1> = <var:U> } { <var:a> = <var:U> \land <var:i1> = <var:U> } <var:i2> := <var:i1> * <var:a> { <var:a> = <var:U> \land <var:i1> = <var:U> \land <var:i2> = <var:U> ^ <nat:2> } \end{verbatim} This is shown to be logically sound by the environment update inference rule of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <var:i4> : string := " <var:i4> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:a> = <var:U> }} <var:i1> := <var:a> ; <var:i2> := <var:i1> * <var:a> ; <var:i3> := <var:i2> * <var:a> ; <var:i4> := <var:i3> * <var:a> ; <var:i0> := <nat:3> ; <var:i1> := <var:i1> * <nat:2> ; <var:i2> := <var:i2> * <nat:2> ; <var:i3> := <var:i3> * <nat:4> ; <var:i4> := <var:i4> * <nat:1> ; <var:D> := <var:i4> <var:D> := <var:D> + <var:i3> <var:D> := <var:D> + <var:i2> <var:D> := <var:D> + <var:i1> <var:D> := <var:D> + <var:i0> {{ <var:D> = <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:i1> = <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:i1> = <var:U> /\ <var:i2> = <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:i1> = <var:U> /\ <var:i2> = <var:U> ^ <nat:2> /\ <var:i3> = <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:i1> = <var:U> /\ <var:i2> = <var:U> ^ <nat:2> /\ <var:i3> = <var:U> ^ <nat:3> /\ <var:i4> = <var:U> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:i1> = <var:U> /\ <var:i2> = <var:U> ^ <nat:2> /\ <var:i3> = <var:U> ^ <nat:3> /\ <var:i4> = <var:U> ^ <nat:4> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:i1> = <nat:2> * <var:U> /\ <var:i2> = <var:U> ^ <nat:2> /\ <var:i3> = <var:U> ^ <nat:3> /\ <var:i4> = <var:U> ^ <nat:4> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:i1> = <nat:2> * <var:U> /\ <var:i2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:i3> = <var:U> ^ <nat:3> /\ <var:i4> = <var:U> ^ <nat:4> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:i1> = <nat:2> * <var:U> /\ <var:i2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:i3> = <nat:4> * <var:U> ^ <nat:3> /\ <var:i4> = <var:U> ^ <nat:4> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:i1> = <nat:2> * <var:U> /\ <var:i2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:i3> = <nat:4> * <var:U> ^ <nat:3> /\ <var:i4> = <nat:1> * <var:U> ^ <nat:4> /\ <var:i0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:i1> = <nat:2> * <var:U> /\ <var:i2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:i3> = <nat:4> * <var:U> ^ <nat:3> /\ <var:i0> = <nat:3> /\ <var:D> = <nat:1> * <var:U> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:i1> = <nat:2> * <var:U> /\ <var:i2> = <nat:2> * <var:U> ^ <nat:2> /\ <var:i0> = <nat:3> /\ <var:D> = <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:i1> = <nat:2> * <var:U> /\ <var:i0> = <nat:3> /\ <var:D> = <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:i0> = <nat:3> /\ <var:D> = <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:U> /\ <var:D> = <nat:1> * <var:U> ^ <nat:4> + <nat:4> * <var:U> ^ <nat:3> + <nat:2> * <var:U> ^ <nat:2> + <nat:2> * <var:U> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 