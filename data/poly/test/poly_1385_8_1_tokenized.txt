\begin{document} \begin{theorem} We define a set of instructions such that \begin{verbatim} <var:O1> := <var:m> ; <var:O2> := <var:O1> * <var:m> ; <var:O0> := <nat:6> ; <var:O1> := <var:O1> * <nat:3> ; <var:O2> := <var:O2> * <nat:3> ; <var:H> := <var:O2> <var:H> := <var:H> + <var:O1> <var:H> := <var:H> + <var:O0> \end{verbatim} Assume , taking $ <var:K> $ , that we have $ <var:m> = <var:K> $ prior to the execution of our segment of code , it must be that we have $ <var:H> = <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:6> $ once set of commands terminates . \end{theorem} \begin{proof} Utilizing usual Hoare techniques gives us : \begin{eqnarray} \{ <var:m> = <var:K> \} \\ <var:O1> := <var:m> ; \\ \{ <var:m> = <var:K> \land <var:O1> = <var:K> \} \\ <var:O2> := <var:O1> * <var:m> ; \\ \{ <var:m> = <var:K> \land <var:O1> = <var:K> \land <var:O2> = <var:K> ^ <nat:2> \} \\ <var:O0> := <nat:6> ; \\ \{ <var:m> = <var:K> \land <var:O1> = <var:K> \land <var:O2> = <var:K> ^ <nat:2> \land <var:O0> = <nat:6> \} \\ <var:O1> := <var:O1> * <nat:3> ; \\ \{ <var:m> = <var:K> \land <var:O1> = <nat:3> \cdot <var:K> \land <var:O2> = <var:K> ^ <nat:2> \land <var:O0> = <nat:6> \} \\ <var:O2> := <var:O2> * <nat:3> ; \\ \{ <var:m> = <var:K> \land <var:O1> = <nat:3> \cdot <var:K> \land <var:O2> = <nat:3> \cdot <var:K> ^ <nat:2> \land <var:O0> = <nat:6> \} \\ <var:H> := <var:O2> \\ \{ <var:m> = <var:K> \land <var:O1> = <nat:3> \cdot <var:K> \land <var:O0> = <nat:6> \land <var:H> = <nat:3> \cdot <var:K> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:O1> \\ \{ <var:m> = <var:K> \land <var:O0> = <nat:6> \land <var:H> = <nat:3> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> \} \\ <var:H> := <var:H> + <var:O0> \\ \{ <var:m> = <var:K> \land <var:H> = <nat:3> \cdot <var:K> ^ <nat:2> + <nat:3> \cdot <var:K> + <nat:6> \} \end{eqnarray} Therefore , this series of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:m> = <var:K> }} <var:O1> := <var:m> ; <var:O2> := <var:O1> * <var:m> ; <var:O0> := <nat:6> ; <var:O1> := <var:O1> * <nat:3> ; <var:O2> := <var:O2> * <nat:3> ; <var:H> := <var:O2> <var:H> := <var:H> + <var:O1> <var:H> := <var:H> + <var:O0> {{ <var:H> = <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:O1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:O1> = <var:K> /\ <var:O2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:O1> = <var:K> /\ <var:O2> = <var:K> ^ <nat:2> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:O1> = <nat:3> * <var:K> /\ <var:O2> = <var:K> ^ <nat:2> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:O1> = <nat:3> * <var:K> /\ <var:O2> = <nat:3> * <var:K> ^ <nat:2> /\ <var:O0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:O1> = <nat:3> * <var:K> /\ <var:O0> = <nat:6> /\ <var:H> = <nat:3> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:O0> = <nat:6> /\ <var:H> = <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:H> = <nat:3> * <var:K> ^ <nat:2> + <nat:3> * <var:K> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 