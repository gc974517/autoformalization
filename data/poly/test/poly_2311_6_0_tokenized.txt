\begin{document} \begin{theorem} Define the following code segment such that \begin{verbatim} <var:L0> := <nat:1> ; <var:L2> := <nat:2> ; <var:L2> := <var:L2> * <var:O> ; <var:L2> := <var:L2> * <var:O> ; <var:g> := <var:L2> ; <var:g> := <var:g> + <var:L0> \end{verbatim} Assuming $ <var:O> = <var:e> $ prior to running our code it follows that we have $ <var:g> = <nat:2> \times <var:e> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing Hoare logic gives : \begin{eqnarray} \{ <var:O> = <var:e> \} \\ <var:L0> := <nat:1> ; \\ \{ <var:O> = <var:e> \land <var:L0> = <nat:1> \} \\ <var:L2> := <nat:2> ; \\ \{ <var:O> = <var:e> \land <var:L0> = <nat:1> \land <var:L2> = <nat:2> \} \\ <var:L2> := <var:L2> * <var:O> ; \\ \{ <var:O> = <var:e> \land <var:L0> = <nat:1> \land <var:L2> = <nat:2> * <var:e> \} \\ <var:L2> := <var:L2> * <var:O> ; \\ \{ <var:O> = <var:e> \land <var:L0> = <nat:1> \land <var:L2> = <nat:2> * <var:e> ^ <nat:2> \} \\ <var:g> := <var:L2> ; \\ \{ <var:O> = <var:e> \land <var:L0> = <nat:1> \land <var:g> = <nat:2> * <var:e> ^ <nat:2> \} \end{eqnarray} Advancing executing our segment of code returns : \begin{eqnarray} <var:g> := <var:g> + <var:L0> \\ \{ <var:O> = <var:e> \land <var:g> = <nat:2> * <var:e> ^ <nat:2> + <nat:1> \} \end{eqnarray} Considering the preceding argument , the segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L2> : string := " <var:L2> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:O> = <var:e> }} <var:L0> := <nat:1> ; <var:L2> := <nat:2> ; <var:L2> := <var:L2> * <var:O> ; <var:L2> := <var:L2> * <var:O> ; <var:g> := <var:L2> ; <var:g> := <var:g> + <var:L0> {{ <var:g> = <nat:2> * <var:e> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:L0> = <nat:1> /\ <var:L2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:L0> = <nat:1> /\ <var:L2> = <nat:2> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:L0> = <nat:1> /\ <var:L2> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:L0> = <nat:1> /\ <var:g> = <nat:2> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:e> /\ <var:g> = <nat:2> * <var:e> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 