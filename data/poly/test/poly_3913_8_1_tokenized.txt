\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:O1> := <var:z> ; <var:O2> := <var:O1> * <var:z> ; <var:O0> := <nat:9> ; <var:O1> := <var:O1> * <nat:9> ; <var:O2> := <var:O2> * <nat:7> ; <var:q> := <var:O2> <var:q> := <var:q> + <var:O1> <var:q> := <var:q> + <var:O0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of instructions <def:poly> . Allow ( for any positive integer coefficients $ <var:p> $ ) it to hold that $ <var:z> = <var:p> $ before interpreting the series of commands then we see $ <var:q> = <nat:7> \cdot <var:p> ^ <nat:2> + <nat:9> \cdot <var:p> + <nat:9> $ after code segment finishes . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:p> \} \\ <var:O1> := <var:z> ; \\ \{ <var:z> = <var:p> \land <var:O1> = <var:p> \} \\ <var:O2> := <var:O1> * <var:z> ; \\ \{ <var:z> = <var:p> \land <var:O1> = <var:p> \land <var:O2> = <var:p> ^ <nat:2> \} \\ <var:O0> := <nat:9> ; \\ \{ <var:z> = <var:p> \land <var:O1> = <var:p> \land <var:O2> = <var:p> ^ <nat:2> \land <var:O0> = <nat:9> \} \\ <var:O1> := <var:O1> * <nat:9> ; \\ \{ <var:z> = <var:p> \land <var:O1> = <nat:9> \times <var:p> \land <var:O2> = <var:p> ^ <nat:2> \land <var:O0> = <nat:9> \} \\ <var:O2> := <var:O2> * <nat:7> ; \\ \{ <var:z> = <var:p> \land <var:O1> = <nat:9> \times <var:p> \land <var:O2> = <nat:7> \times <var:p> ^ <nat:2> \land <var:O0> = <nat:9> \} \\ <var:q> := <var:O2> \\ \{ <var:z> = <var:p> \land <var:O1> = <nat:9> \times <var:p> \land <var:O0> = <nat:9> \land <var:q> = <nat:7> \times <var:p> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:O1> \\ \{ <var:z> = <var:p> \land <var:O0> = <nat:9> \land <var:q> = <nat:7> \times <var:p> ^ <nat:2> + <nat:9> \times <var:p> \} \\ <var:q> := <var:q> + <var:O0> \\ \{ <var:z> = <var:p> \land <var:q> = <nat:7> \times <var:p> ^ <nat:2> + <nat:9> \times <var:p> + <nat:9> \} \end{eqnarray} Applying usual Hoare techniques finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Definition <var:O2> : string := " <var:O2> " . Definition <def:poly> := <var:O1> := <var:z> ; <var:O2> := <var:O1> * <var:z> ; <var:O0> := <nat:9> ; <var:O1> := <var:O1> * <nat:9> ; <var:O2> := <var:O2> * <nat:7> ; <var:q> := <var:O2> <var:q> := <var:q> + <var:O1> <var:q> := <var:q> + <var:O0> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:z> = <var:p> }} <def:poly> {{ <var:q> = <nat:7> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:O1> = <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:O1> = <var:p> /\ <var:O2> = <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:O1> = <var:p> /\ <var:O2> = <var:p> ^ <nat:2> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:O1> = <nat:9> * <var:p> /\ <var:O2> = <var:p> ^ <nat:2> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:O1> = <nat:9> * <var:p> /\ <var:O2> = <nat:7> * <var:p> ^ <nat:2> /\ <var:O0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:O1> = <nat:9> * <var:p> /\ <var:O0> = <nat:9> /\ <var:q> = <nat:7> * <var:p> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:O0> = <nat:9> /\ <var:q> = <nat:7> * <var:p> ^ <nat:2> + <nat:9> * <var:p> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:p> /\ <var:q> = <nat:7> * <var:p> ^ <nat:2> + <nat:9> * <var:p> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 