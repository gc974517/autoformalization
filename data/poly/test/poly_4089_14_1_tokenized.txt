\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:m1> := <var:b> ; <var:m2> := <var:m1> * <var:b> ; <var:m3> := <var:m2> * <var:b> ; <var:m4> := <var:m3> * <var:b> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:1> ; <var:m2> := <var:m2> * <nat:2> ; <var:m3> := <var:m3> * <nat:1> ; <var:m4> := <var:m4> * <nat:3> ; <var:d> := <var:m4> <var:d> := <var:d> + <var:m3> <var:d> := <var:d> + <var:m2> <var:d> := <var:d> + <var:m1> <var:d> := <var:d> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:b> = <var:i> $ ahead of executing our set of commands then we have $ <var:d> = <nat:3> \cdot <var:i> ^ <nat:4> + <nat:1> \cdot <var:i> ^ <nat:3> + <nat:2> \cdot <var:i> ^ <nat:2> + <nat:1> \cdot <var:i> + <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for our program can be seen through typical Hoare reasoning . Taking a look at the subsequent bit of code in our list of instructions , the environment update line \verb | <var:m1> := <var:b> ; | . This redefines the condition $ \{ <var:b> = <var:i> \} $ toward the condition $ \{ <var:b> = <var:i> \land <var:m1> = <var:i> \} $ . This is shown to be logically sound using the assignment law defined by typical Hoare logic . Moving forward , we have the assignment command binding $ <var:m1> * <var:b> $ as $ <var:m2>$ . This forwards the precondition $ \{ <var:b> = <var:i> \land <var:m1> = <var:i> \} $ as $ \{ <var:b> = <var:i> \land <var:m1> = <var:i> \land <var:m2> = <var:i> ^ <nat:2> \} $ . Moving on to the next piece of code contained in the set of commands , we see the assignment code defining $ <var:m2> * <var:b> $ as $ <var:m3>$ . This advances $ \{ <var:b> = <var:i> \land <var:m1> = <var:i> \land <var:m2> = <var:i> ^ <nat:2> \} $ into the condition $ \{ <var:b> = <var:i> \land <var:m1> = <var:i> \land <var:m2> = <var:i> ^ <nat:2> \land <var:m3> = <var:i> ^ <nat:3> \} $ . This is shown to be logically sound using the assignment scheme obtained from typical Hoare techniques . Focusing on the next line of code seen in the set of instructions , we see the variable assignmet code \verb | <var:m4> := <var:m3> * <var:b> ; | . This command moves $ \{ <var:b> = <var:i> \land <var:m1> = <var:i> \land <var:m2> = <var:i> ^ <nat:2> \land <var:m3> = <var:i> ^ <nat:3> \} $ to the postcondition $ \{ <var:b> = <var:i> \land <var:m1> = <var:i> \land <var:m2> = <var:i> ^ <nat:2> \land <var:m3> = <var:i> ^ <nat:3> \land <var:m4> = <var:i> ^ <nat:4> \} $ . Advancing to the proceeding command seen in our series of instructions , we see the binding statement \verb | <var:m0> := <nat:3> ; | . This forwards $ \{ <var:b> = <var:i> \land <var:m1> = <var:i> \land <var:m2> = <var:i> ^ <nat:2> \land <var:m3> = <var:i> ^ <nat:3> \land <var:m4> = <var:i> ^ <nat:4> \} $ into the postcondition $ \{ <var:b> = <var:i> \land <var:m1> = <var:i> \land <var:m2> = <var:i> ^ <nat:2> \land <var:m3> = <var:i> ^ <nat:3> \land <var:m4> = <var:i> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . This is given using the assignment law obtained from typical Hoare techniques . Taking another step toward the upcoming bit of code in the set of commands , we have the environment update line \verb | <var:m1> := <var:m1> * <nat:1> ; | . This takes $ \{ <var:b> = <var:i> \land <var:m1> = <var:i> \land <var:m2> = <var:i> ^ <nat:2> \land <var:m3> = <var:i> ^ <nat:3> \land <var:m4> = <var:i> ^ <nat:4> \land <var:m0> = <nat:3> \} $ to the postcondition $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m2> = <var:i> ^ <nat:2> \land <var:m3> = <var:i> ^ <nat:3> \land <var:m4> = <var:i> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . Next , the variable assignmet code assigning $ <var:m2> * <nat:2> $ to $ <var:m2>$ . This transfers $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m2> = <var:i> ^ <nat:2> \land <var:m3> = <var:i> ^ <nat:3> \land <var:m4> = <var:i> ^ <nat:4> \land <var:m0> = <nat:3> \} $ as $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m2> = <nat:2> * <var:i> ^ <nat:2> \land <var:m3> = <var:i> ^ <nat:3> \land <var:m4> = <var:i> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . Advancing to the next line in the segment of code , the binding code letting $ <var:m3> * <nat:1> $ into $ <var:m3>$ . This command redefines the condition $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m2> = <nat:2> * <var:i> ^ <nat:2> \land <var:m3> = <var:i> ^ <nat:3> \land <var:m4> = <var:i> ^ <nat:4> \land <var:m0> = <nat:3> \} $ into the postcondition $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m2> = <nat:2> * <var:i> ^ <nat:2> \land <var:m3> = <nat:1> * <var:i> ^ <nat:3> \land <var:m4> = <var:i> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . After , we have the binding statement \verb | <var:m4> := <var:m4> * <nat:3> ; | . This line redefines $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m2> = <nat:2> * <var:i> ^ <nat:2> \land <var:m3> = <nat:1> * <var:i> ^ <nat:3> \land <var:m4> = <var:i> ^ <nat:4> \land <var:m0> = <nat:3> \} $ into $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m2> = <nat:2> * <var:i> ^ <nat:2> \land <var:m3> = <nat:1> * <var:i> ^ <nat:3> \land <var:m4> = <nat:3> * <var:i> ^ <nat:4> \land <var:m0> = <nat:3> \} $ . Shifting focus toward the subsequent piece of code found in our set of instructions , the variable assignmet statement \verb | <var:d> := <var:m4> | . This code advances the precondition $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m2> = <nat:2> * <var:i> ^ <nat:2> \land <var:m3> = <nat:1> * <var:i> ^ <nat:3> \land <var:m4> = <nat:3> * <var:i> ^ <nat:4> \land <var:m0> = <nat:3> \} $ as $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m2> = <nat:2> * <var:i> ^ <nat:2> \land <var:m3> = <nat:1> * <var:i> ^ <nat:3> \land <var:m0> = <nat:3> \land <var:d> = <nat:3> * <var:i> ^ <nat:4> \} $ . Taking another step toward the following piece of code found in our series of commands , we have the variable binding line \verb | <var:d> := <var:d> + <var:m3> | . This advances $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m2> = <nat:2> * <var:i> ^ <nat:2> \land <var:m3> = <nat:1> * <var:i> ^ <nat:3> \land <var:m0> = <nat:3> \land <var:d> = <nat:3> * <var:i> ^ <nat:4> \} $ to the postcondition $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m2> = <nat:2> * <var:i> ^ <nat:2> \land <var:m0> = <nat:3> \land <var:d> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> \} $ . This is guaranteed through the assignment inference rule defined by usual Hoare logic . Going to the next step , we have the variable update command yielding $ <var:d> + <var:m2$ as $ <var:d>$ . This code takes $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m2> = <nat:2> * <var:i> ^ <nat:2> \land <var:m0> = <nat:3> \land <var:d> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> \} $ into the postcondition $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m0> = <nat:3> \land <var:d> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> \} $ . Moving forward to the following bit of code contained in our set of instructions , we have the environment update code yielding $ <var:d> + <var:m1$ into $ <var:d>$ . This redefines $ \{ <var:b> = <var:i> \land <var:m1> = <nat:1> * <var:i> \land <var:m0> = <nat:3> \land <var:d> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> \} $ as $ \{ <var:b> = <var:i> \land <var:m0> = <nat:3> \land <var:d> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> \} $ . Moving onward , we see the environment update command \verb | <var:d> := <var:d> + <var:m0> | . This advances the condition $ \{ <var:b> = <var:i> \land <var:m0> = <nat:3> \land <var:d> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> \} $ as the postcondition $ \{ <var:b> = <var:i> \land <var:d> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:3> \} $ . This is shown by the assignment rule of Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <var:m4> : string := " <var:m4> " . Definition <def:poly> := <var:m1> := <var:b> ; <var:m2> := <var:m1> * <var:b> ; <var:m3> := <var:m2> * <var:b> ; <var:m4> := <var:m3> * <var:b> ; <var:m0> := <nat:3> ; <var:m1> := <var:m1> * <nat:1> ; <var:m2> := <var:m2> * <nat:2> ; <var:m3> := <var:m3> * <nat:1> ; <var:m4> := <var:m4> * <nat:3> ; <var:d> := <var:m4> <var:d> := <var:d> + <var:m3> <var:d> := <var:d> + <var:m2> <var:d> := <var:d> + <var:m1> <var:d> := <var:d> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:b> = <var:i> }} <def:poly> {{ <var:d> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:m1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:m1> = <var:i> /\ <var:m2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:m1> = <var:i> /\ <var:m2> = <var:i> ^ <nat:2> /\ <var:m3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:m1> = <var:i> /\ <var:m2> = <var:i> ^ <nat:2> /\ <var:m3> = <var:i> ^ <nat:3> /\ <var:m4> = <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:m1> = <var:i> /\ <var:m2> = <var:i> ^ <nat:2> /\ <var:m3> = <var:i> ^ <nat:3> /\ <var:m4> = <var:i> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:m1> = <nat:1> * <var:i> /\ <var:m2> = <var:i> ^ <nat:2> /\ <var:m3> = <var:i> ^ <nat:3> /\ <var:m4> = <var:i> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:m1> = <nat:1> * <var:i> /\ <var:m2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:m3> = <var:i> ^ <nat:3> /\ <var:m4> = <var:i> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:m1> = <nat:1> * <var:i> /\ <var:m2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:i> ^ <nat:3> /\ <var:m4> = <var:i> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:m1> = <nat:1> * <var:i> /\ <var:m2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:i> ^ <nat:3> /\ <var:m4> = <nat:3> * <var:i> ^ <nat:4> /\ <var:m0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:m1> = <nat:1> * <var:i> /\ <var:m2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:i> ^ <nat:3> /\ <var:m0> = <nat:3> /\ <var:d> = <nat:3> * <var:i> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:m1> = <nat:1> * <var:i> /\ <var:m2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:m0> = <nat:3> /\ <var:d> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:m1> = <nat:1> * <var:i> /\ <var:m0> = <nat:3> /\ <var:d> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:m0> = <nat:3> /\ <var:d> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:i> /\ <var:d> = <nat:3> * <var:i> ^ <nat:4> + <nat:1> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:1> * <var:i> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 