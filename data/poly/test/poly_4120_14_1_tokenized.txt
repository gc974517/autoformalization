\begin{document} \begin{definition} Define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:K1> := <var:f> ; <var:K2> := <var:K1> * <var:f> ; <var:K3> := <var:K2> * <var:f> ; <var:K4> := <var:K3> * <var:f> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:4> ; <var:K2> := <var:K2> * <nat:5> ; <var:K3> := <var:K3> * <nat:4> ; <var:K4> := <var:K4> * <nat:3> ; <var:n> := <var:K4> <var:n> := <var:n> + <var:K3> <var:n> := <var:n> + <var:K2> <var:n> := <var:n> + <var:K1> <var:n> := <var:n> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:f> = <var:h> $ for any natural numbers $ <var:h> $ ahead of executing the series of instructions it follows that we have $ <var:n> = <nat:3> \times <var:h> ^ <nat:4> + <nat:4> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of the series of instructions is done through Hoare techniques . Now , we have the environment update statement binding $ <var:f> $ to $ <var:K1>$ . This command forwards the condition $ \{ <var:f> = <var:h> \} $ into $ \{ <var:f> = <var:h> \land <var:K1> = <var:h> \} $ . Stepping forward , we see the binding statement assigning $ <var:K1> * <var:f> $ as $ <var:K2>$ . This code transfers $ \{ <var:f> = <var:h> \land <var:K1> = <var:h> \} $ as the condition $ \{ <var:f> = <var:h> \land <var:K1> = <var:h> \land <var:K2> = <var:h> ^ <nat:2> \} $ . Advancing on , the code \verb | <var:K3> := <var:K2> * <var:f> ; | . This line moves $ \{ <var:f> = <var:h> \land <var:K1> = <var:h> \land <var:K2> = <var:h> ^ <nat:2> \} $ into $ \{ <var:f> = <var:h> \land <var:K1> = <var:h> \land <var:K2> = <var:h> ^ <nat:2> \land <var:K3> = <var:h> ^ <nat:3> \} $ . Keeping momentum , the variable assignmet statement yielding $ <var:K3> * <var:f> $ toward $ <var:K4>$ . This redefines the precondition $ \{ <var:f> = <var:h> \land <var:K1> = <var:h> \land <var:K2> = <var:h> ^ <nat:2> \land <var:K3> = <var:h> ^ <nat:3> \} $ into $ \{ <var:f> = <var:h> \land <var:K1> = <var:h> \land <var:K2> = <var:h> ^ <nat:2> \land <var:K3> = <var:h> ^ <nat:3> \land <var:K4> = <var:h> ^ <nat:4> \} $ . This is known to be sound through the assignment scheme in usual Hoare reasoning . Observing the upcoming line contained in the segment of code , we see the environment update command binding $ <nat:9> $ as $ <var:K0>$ . This code advances the condition $ \{ <var:f> = <var:h> \land <var:K1> = <var:h> \land <var:K2> = <var:h> ^ <nat:2> \land <var:K3> = <var:h> ^ <nat:3> \land <var:K4> = <var:h> ^ <nat:4> \} $ to $ \{ <var:f> = <var:h> \land <var:K1> = <var:h> \land <var:K2> = <var:h> ^ <nat:2> \land <var:K3> = <var:h> ^ <nat:3> \land <var:K4> = <var:h> ^ <nat:4> \land <var:K0> = <nat:9> \} $ . Moving forward to the upcoming line of code in our code segment , the environment update command \verb | <var:K1> := <var:K1> * <nat:4> ; | . This redefines the precondition $ \{ <var:f> = <var:h> \land <var:K1> = <var:h> \land <var:K2> = <var:h> ^ <nat:2> \land <var:K3> = <var:h> ^ <nat:3> \land <var:K4> = <var:h> ^ <nat:4> \land <var:K0> = <nat:9> \} $ into the postcondition $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K2> = <var:h> ^ <nat:2> \land <var:K3> = <var:h> ^ <nat:3> \land <var:K4> = <var:h> ^ <nat:4> \land <var:K0> = <nat:9> \} $ . This is sound through the assignment law given in typical Hoare logic . Now , we see the variable assignmet command \verb | <var:K2> := <var:K2> * <nat:5> ; | . This forwards the precondition $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K2> = <var:h> ^ <nat:2> \land <var:K3> = <var:h> ^ <nat:3> \land <var:K4> = <var:h> ^ <nat:4> \land <var:K0> = <nat:9> \} $ toward the condition $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:K3> = <var:h> ^ <nat:3> \land <var:K4> = <var:h> ^ <nat:4> \land <var:K0> = <nat:9> \} $ . Moving on to the following bit of code seen in the set of commands , we see the assignment command binding $ <var:K3> * <nat:4> $ into $ <var:K3>$ . This line forwards the condition $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:K3> = <var:h> ^ <nat:3> \land <var:K4> = <var:h> ^ <nat:4> \land <var:K0> = <nat:9> \} $ as the condition $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:K3> = <nat:4> \times <var:h> ^ <nat:3> \land <var:K4> = <var:h> ^ <nat:4> \land <var:K0> = <nat:9> \} $ . Now , we have the statement letting $ <var:K4> * <nat:3> $ as $ <var:K4>$ . This advances the precondition $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:K3> = <nat:4> \times <var:h> ^ <nat:3> \land <var:K4> = <var:h> ^ <nat:4> \land <var:K0> = <nat:9> \} $ into the condition $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:K3> = <nat:4> \times <var:h> ^ <nat:3> \land <var:K4> = <nat:3> \times <var:h> ^ <nat:4> \land <var:K0> = <nat:9> \} $ . This is known to be sound by the assignment rule from standard Hoare techniques . Moving on to the proceeding statement in our code , we see the assignment code letting $ <var:K4$ to $ <var:n>$ . This code transfers the precondition $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:K3> = <nat:4> \times <var:h> ^ <nat:3> \land <var:K4> = <nat:3> \times <var:h> ^ <nat:4> \land <var:K0> = <nat:9> \} $ toward $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:K3> = <nat:4> \times <var:h> ^ <nat:3> \land <var:K0> = <nat:9> \land <var:n> = <nat:3> \times <var:h> ^ <nat:4> \} $ . This is sound using the assignment inference rule given by Hoare techniques . Advancing , we see the variable update statement \verb | <var:n> := <var:n> + <var:K3> | . This advances the precondition $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:K3> = <nat:4> \times <var:h> ^ <nat:3> \land <var:K0> = <nat:9> \land <var:n> = <nat:3> \times <var:h> ^ <nat:4> \} $ as $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:K0> = <nat:9> \land <var:n> = <nat:3> \times <var:h> ^ <nat:4> + <nat:4> \times <var:h> ^ <nat:3> \} $ . Advancing , we see the command assigning $ <var:n> + <var:K2$ as $ <var:n>$ . This line moves the precondition $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K2> = <nat:5> \times <var:h> ^ <nat:2> \land <var:K0> = <nat:9> \land <var:n> = <nat:3> \times <var:h> ^ <nat:4> + <nat:4> \times <var:h> ^ <nat:3> \} $ as the condition $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K0> = <nat:9> \land <var:n> = <nat:3> \times <var:h> ^ <nat:4> + <nat:4> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> \} $ . This is rigorously given by the assignment inference rule obtained from usual Hoare logic . Following , the line \verb | <var:n> := <var:n> + <var:K1> | . This command moves $ \{ <var:f> = <var:h> \land <var:K1> = <nat:4> \times <var:h> \land <var:K0> = <nat:9> \land <var:n> = <nat:3> \times <var:h> ^ <nat:4> + <nat:4> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> \} $ as $ \{ <var:f> = <var:h> \land <var:K0> = <nat:9> \land <var:n> = <nat:3> \times <var:h> ^ <nat:4> + <nat:4> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> \} $ . This is rigorously given using the assignment inference rule found in usual Hoare reasoning . Stepping through , we see the assignment statement letting $ <var:n> + <var:K0$ into $ <var:n>$ . This advances the precondition $ \{ <var:f> = <var:h> \land <var:K0> = <nat:9> \land <var:n> = <nat:3> \times <var:h> ^ <nat:4> + <nat:4> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> \} $ to the postcondition $ \{ <var:f> = <var:h> \land <var:n> = <nat:3> \times <var:h> ^ <nat:4> + <nat:4> \times <var:h> ^ <nat:3> + <nat:5> \times <var:h> ^ <nat:2> + <nat:4> \times <var:h> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Definition <var:K4> : string := " <var:K4> " . Definition <def:poly> := <var:K1> := <var:f> ; <var:K2> := <var:K1> * <var:f> ; <var:K3> := <var:K2> * <var:f> ; <var:K4> := <var:K3> * <var:f> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:4> ; <var:K2> := <var:K2> * <nat:5> ; <var:K3> := <var:K3> * <nat:4> ; <var:K4> := <var:K4> * <nat:3> ; <var:n> := <var:K4> <var:n> := <var:n> + <var:K3> <var:n> := <var:n> + <var:K2> <var:n> := <var:n> + <var:K1> <var:n> := <var:n> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:f> = <var:h> }} <def:poly> {{ <var:n> = <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:K1> = <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:K1> = <var:h> /\ <var:K2> = <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:K1> = <var:h> /\ <var:K2> = <var:h> ^ <nat:2> /\ <var:K3> = <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:K1> = <var:h> /\ <var:K2> = <var:h> ^ <nat:2> /\ <var:K3> = <var:h> ^ <nat:3> /\ <var:K4> = <var:h> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:K1> = <var:h> /\ <var:K2> = <var:h> ^ <nat:2> /\ <var:K3> = <var:h> ^ <nat:3> /\ <var:K4> = <var:h> ^ <nat:4> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:K1> = <nat:4> * <var:h> /\ <var:K2> = <var:h> ^ <nat:2> /\ <var:K3> = <var:h> ^ <nat:3> /\ <var:K4> = <var:h> ^ <nat:4> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:K1> = <nat:4> * <var:h> /\ <var:K2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:K3> = <var:h> ^ <nat:3> /\ <var:K4> = <var:h> ^ <nat:4> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:K1> = <nat:4> * <var:h> /\ <var:K2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:h> ^ <nat:3> /\ <var:K4> = <var:h> ^ <nat:4> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:K1> = <nat:4> * <var:h> /\ <var:K2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:h> ^ <nat:3> /\ <var:K4> = <nat:3> * <var:h> ^ <nat:4> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:K1> = <nat:4> * <var:h> /\ <var:K2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:K3> = <nat:4> * <var:h> ^ <nat:3> /\ <var:K0> = <nat:9> /\ <var:n> = <nat:3> * <var:h> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:K1> = <nat:4> * <var:h> /\ <var:K2> = <nat:5> * <var:h> ^ <nat:2> /\ <var:K0> = <nat:9> /\ <var:n> = <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:K1> = <nat:4> * <var:h> /\ <var:K0> = <nat:9> /\ <var:n> = <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:K0> = <nat:9> /\ <var:n> = <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:4> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:h> /\ <var:n> = <nat:3> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:5> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 