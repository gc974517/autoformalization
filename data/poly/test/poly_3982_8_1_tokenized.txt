\begin{document} \begin{definition} Take a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:n1> := <var:v> ; <var:n2> := <var:n1> * <var:v> ; <var:n0> := <nat:2> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:2> ; <var:e> := <var:n2> <var:e> := <var:e> + <var:n1> <var:e> := <var:e> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:v> = <var:l> $ prior to the evaluation of this program , it must be that $ <var:e> = <nat:2> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:2> $ once code has executed . \end{theorem} \begin{proof} The way to prove correctness for this program is demonstrated with usual Hoare techniques . Jumping to the proceeding pieces of code seen in our list of instructions , \begin{eqnarray} \{ <var:v> = <var:l> \} \, <var:n1> := <var:v> \, \{ <var:v> = <var:l> \land <var:n1> = <var:l> \} \\ \{ <var:v> = <var:l> \land <var:n1> = <var:l> \} \, <var:n2> := <var:n1> * <var:v> \, \{ <var:v> = <var:l> \land <var:n1> = <var:l> \land <var:n2> = <var:l> ^ <nat:2> \} \\ \{ <var:v> = <var:l> \land <var:n1> = <var:l> \land <var:n2> = <var:l> ^ <nat:2> \} \, <var:n0> := <nat:2> \, \{ <var:v> = <var:l> \land <var:n1> = <var:l> \land <var:n2> = <var:l> ^ <nat:2> \land <var:n0> = <nat:2> \} \\ \{ <var:v> = <var:l> \land <var:n1> = <var:l> \land <var:n2> = <var:l> ^ <nat:2> \land <var:n0> = <nat:2> \} \, <var:n1> := <var:n1> * <nat:2> \, \{ <var:v> = <var:l> \land <var:n1> = <nat:2> * <var:l> \land <var:n2> = <var:l> ^ <nat:2> \land <var:n0> = <nat:2> \} \\ \{ <var:v> = <var:l> \land <var:n1> = <nat:2> * <var:l> \land <var:n2> = <var:l> ^ <nat:2> \land <var:n0> = <nat:2> \} \, <var:n2> := <var:n2> * <nat:2> \, \{ <var:v> = <var:l> \land <var:n1> = <nat:2> * <var:l> \land <var:n2> = <nat:2> * <var:l> ^ <nat:2> \land <var:n0> = <nat:2> \} \end{eqnarray} Honing in on the proceeding bit of code seen in our segment of code , we see \begin{eqnarray} \{ <var:v> = <var:l> \} \, <var:n1> := <var:v> \, \{ <var:v> = <var:l> \land <var:n1> = <var:l> \} \end{eqnarray} This is deduced through the variable assignmet scheme given by usual Hoare techniques . Observing the upcoming line seen in the code , \begin{eqnarray} \{ <var:v> = <var:l> \} \, <var:n1> := <var:v> \, \{ <var:v> = <var:l> \land <var:n1> = <var:l> \} \end{eqnarray} This is given by the rule given by Hoare logic . Observing the proceeding piece of code contained in our series of instructions , we have \begin{eqnarray} \{ <var:v> = <var:l> \} \, <var:n1> := <var:v> \, \{ <var:v> = <var:l> \land <var:n1> = <var:l> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n1> := <var:v> ; <var:n2> := <var:n1> * <var:v> ; <var:n0> := <nat:2> ; <var:n1> := <var:n1> * <nat:2> ; <var:n2> := <var:n2> * <nat:2> ; <var:e> := <var:n2> <var:e> := <var:e> + <var:n1> <var:e> := <var:e> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:v> = <var:l> }} <def:poly> {{ <var:e> = <nat:2> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:n1> = <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:n1> = <var:l> /\ <var:n2> = <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:n1> = <var:l> /\ <var:n2> = <var:l> ^ <nat:2> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:n1> = <nat:2> * <var:l> /\ <var:n2> = <var:l> ^ <nat:2> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:n1> = <nat:2> * <var:l> /\ <var:n2> = <nat:2> * <var:l> ^ <nat:2> /\ <var:n0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:n1> = <nat:2> * <var:l> /\ <var:n0> = <nat:2> /\ <var:e> = <nat:2> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:n0> = <nat:2> /\ <var:e> = <nat:2> * <var:l> ^ <nat:2> + <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:l> /\ <var:e> = <nat:2> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 