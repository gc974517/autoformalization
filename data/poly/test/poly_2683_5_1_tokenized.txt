\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:f1> := <var:l> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:7> ; <var:U> := <var:f1> <var:U> := <var:U> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> . Allow it to be that $ <var:l> = <var:M> $ prior to running this segment of code , then we see $ <var:U> = <nat:7> * <var:M> + <nat:8> $ . \end{theorem} \begin{proof} Using usual Hoare logic gives us : \begin{eqnarray} \{ <var:l> = <var:M> \} \\ <var:f1> := <var:l> ; \\ \{ <var:l> = <var:M> \land <var:f1> = <var:M> \} \\ <var:f0> := <nat:8> ; \\ \{ <var:l> = <var:M> \land <var:f1> = <var:M> \land <var:f0> = <nat:8> \} \\ <var:f1> := <var:f1> * <nat:7> ; \\ \{ <var:l> = <var:M> \land <var:f1> = <nat:7> \times <var:M> \land <var:f0> = <nat:8> \} \\ <var:U> := <var:f1> \\ \{ <var:l> = <var:M> \land <var:f0> = <nat:8> \land <var:U> = <nat:7> \times <var:M> \} \\ <var:U> := <var:U> + <var:f0> \\ \{ <var:l> = <var:M> \land <var:U> = <nat:7> \times <var:M> + <nat:8> \} \end{eqnarray} Given the preceding argument , the set of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <def:poly> := <var:f1> := <var:l> ; <var:f0> := <nat:8> ; <var:f1> := <var:f1> * <nat:7> ; <var:U> := <var:f1> <var:U> := <var:U> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:l> = <var:M> }} <def:poly> {{ <var:U> = <nat:7> * <var:M> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:f1> = <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:f1> = <var:M> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:f1> = <nat:7> * <var:M> /\ <var:f0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:f0> = <nat:8> /\ <var:U> = <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:M> /\ <var:U> = <nat:7> * <var:M> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 