\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} such that \begin{verbatim} <var:D0> := <nat:1> ; <var:D2> := <nat:3> ; <var:D2> := <var:D2> * <var:t> ; <var:D2> := <var:D2> * <var:t> ; <var:D3> := <nat:3> ; <var:D3> := <var:D3> * <var:t> ; <var:D3> := <var:D3> * <var:t> ; <var:D3> := <var:D3> * <var:t> ; <var:L> := <var:D3> ; <var:L> := <var:L> + <var:D2> ; <var:L> := <var:L> + <var:D0> \end{verbatim} Allow $ <var:t> = <var:U> $ ahead of executing the program , then we have $ <var:L> = <nat:3> \times <var:U> ^ <nat:3> + <nat:3> \times <var:U> ^ <nat:2> + <nat:1> $ when segment of code has finished . \end{theorem} \begin{proof} Utilizing standard Hoare techniques returns : \begin{eqnarray} \{ <var:t> = <var:U> \} \\ <var:D0> := <nat:1> ; \\ \{ <var:t> = <var:U> \land <var:D0> = <nat:1> \} \\ <var:D2> := <nat:3> ; \\ \{ <var:t> = <var:U> \land <var:D0> = <nat:1> \land <var:D2> = <nat:3> \} \\ <var:D2> := <var:D2> * <var:t> ; \\ \{ <var:t> = <var:U> \land <var:D0> = <nat:1> \land <var:D2> = <nat:3> \cdot <var:U> \} \\ <var:D2> := <var:D2> * <var:t> ; \\ \{ <var:t> = <var:U> \land <var:D0> = <nat:1> \land <var:D2> = <nat:3> \cdot <var:U> ^ <nat:2> \} \\ <var:D3> := <nat:3> ; \\ \{ <var:t> = <var:U> \land <var:D0> = <nat:1> \land <var:D2> = <nat:3> \cdot <var:U> ^ <nat:2> \land <var:D3> = <nat:3> \} \\ <var:D3> := <var:D3> * <var:t> ; \\ \{ <var:t> = <var:U> \land <var:D0> = <nat:1> \land <var:D2> = <nat:3> \cdot <var:U> ^ <nat:2> \land <var:D3> = <nat:3> \cdot <var:U> \} \\ <var:D3> := <var:D3> * <var:t> ; \\ \{ <var:t> = <var:U> \land <var:D0> = <nat:1> \land <var:D2> = <nat:3> \cdot <var:U> ^ <nat:2> \land <var:D3> = <nat:3> \cdot <var:U> ^ <nat:2> \} \\ <var:D3> := <var:D3> * <var:t> ; \\ \{ <var:t> = <var:U> \land <var:D0> = <nat:1> \land <var:D2> = <nat:3> \cdot <var:U> ^ <nat:2> \land <var:D3> = <nat:3> \cdot <var:U> ^ <nat:3> \} \\ <var:L> := <var:D3> ; \\ \{ <var:t> = <var:U> \land <var:D0> = <nat:1> \land <var:D2> = <nat:3> \cdot <var:U> ^ <nat:2> \land <var:L> = <nat:3> \cdot <var:U> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:D2> ; \\ \{ <var:t> = <var:U> \land <var:D0> = <nat:1> \land <var:L> = <nat:3> \cdot <var:U> ^ <nat:3> + <nat:3> \cdot <var:U> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:D0> \\ \{ <var:t> = <var:U> \land <var:L> = <nat:3> \cdot <var:U> ^ <nat:3> + <nat:3> \cdot <var:U> ^ <nat:2> + <nat:1> \} \end{eqnarray} Considering the preceding argument , our series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <var:D2> : string := " <var:D2> " . Definition <var:D3> : string := " <var:D3> " . Theorem <genH:poly_code_correct> : forall <var:U> : nat , {{ <var:t> = <var:U> }} <var:D0> := <nat:1> ; <var:D2> := <nat:3> ; <var:D2> := <var:D2> * <var:t> ; <var:D2> := <var:D2> * <var:t> ; <var:D3> := <nat:3> ; <var:D3> := <var:D3> * <var:t> ; <var:D3> := <var:D3> * <var:t> ; <var:D3> := <var:D3> * <var:t> ; <var:L> := <var:D3> ; <var:L> := <var:L> + <var:D2> ; <var:L> := <var:L> + <var:D0> {{ <var:L> = <nat:3> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:D0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:D0> = <nat:1> /\ <var:D2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:D0> = <nat:1> /\ <var:D2> = <nat:3> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:D0> = <nat:1> /\ <var:D2> = <nat:3> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:D0> = <nat:1> /\ <var:D2> = <nat:3> * <var:U> ^ <nat:2> /\ <var:D3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:D0> = <nat:1> /\ <var:D2> = <nat:3> * <var:U> ^ <nat:2> /\ <var:D3> = <nat:3> * <var:U> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:D0> = <nat:1> /\ <var:D2> = <nat:3> * <var:U> ^ <nat:2> /\ <var:D3> = <nat:3> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:D0> = <nat:1> /\ <var:D2> = <nat:3> * <var:U> ^ <nat:2> /\ <var:D3> = <nat:3> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:D0> = <nat:1> /\ <var:D2> = <nat:3> * <var:U> ^ <nat:2> /\ <var:L> = <nat:3> * <var:U> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:D0> = <nat:1> /\ <var:L> = <nat:3> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:U> /\ <var:L> = <nat:3> * <var:U> ^ <nat:3> + <nat:3> * <var:U> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 