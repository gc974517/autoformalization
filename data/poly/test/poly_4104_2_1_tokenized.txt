\begin{document} \begin{theorem} Define the following segment of code as \begin{verbatim} <var:U0> := <nat:7> ; <var:t> := <var:U0> \end{verbatim} Assume it to hold that $ <var:P> = <var:X> $ prior to running the series of instructions then we have $ <var:t> = <nat:7> $ . \end{theorem} \begin{proof} Applying Hoare reasoning gives : \begin{eqnarray} \{ <var:P> = <var:X> \} \\ <var:U0> := <nat:7> ; \\ \{ <var:P> = <var:X> \land <var:U0> = <nat:7> \} \\ <var:t> := <var:U0> \\ \{ <var:P> = <var:X> \land <var:t> = <nat:7> \} \end{eqnarray} Given the preceding argument , our segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:P> = <var:X> }} <var:U0> := <nat:7> ; <var:t> := <var:U0> {{ <var:t> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:U0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:X> /\ <var:t> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 