\begin{document} \begin{theorem} Consider the following program as \begin{verbatim} <var:i0> := <nat:4> ; <var:U> := <var:i0> \end{verbatim} Assume that $ <var:I> = <var:m> $ prior to executing our list of instructions , it holds that we see $ <var:U> = <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:m> \} \\ <var:i0> := <nat:4> ; \\ \{ <var:I> = <var:m> \land <var:i0> = <nat:4> \} \\ <var:U> := <var:i0> \\ \{ <var:I> = <var:m> \land <var:U> = <nat:4> \} \end{eqnarray} The application of typical Hoare techniques completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:I> = <var:m> }} <var:i0> := <nat:4> ; <var:U> := <var:i0> {{ <var:U> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:m> /\ <var:U> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 