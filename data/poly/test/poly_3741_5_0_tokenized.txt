\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:S0> := <nat:9> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:u> ; <var:n> := <var:S1> ; <var:n> := <var:n> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> . Allow that we have $ <var:u> = <var:g> $ ( given $ <var:g> $ ) before the evaluation of our set of instructions it holds that we have $ <var:n> = <nat:6> * <var:g> + <nat:9> $ once code terminates . \end{theorem} \begin{proof} The flow of logic for this series of instructions can be accomplished using usual Hoare reasoning . Moving forward to the next step , we have the environment update statement \verb | <var:S0> := <nat:9> ; | . This transfers the precondition $ \{ <var:u> = <var:g> \} $ toward the postcondition $ \{ <var:u> = <var:g> \land <var:S0> = <nat:9> \} $ . Moving forward to the next step , we see the code giving $ <nat:6> $ as $ <var:S1>$ . This statement forwards the precondition $ \{ <var:u> = <var:g> \land <var:S0> = <nat:9> \} $ to the postcondition $ \{ <var:u> = <var:g> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \} $ . Observing the next line found in the segment of code , the environment update code \verb | <var:S1> := <var:S1> * <var:u> ; | . This forwards the precondition $ \{ <var:u> = <var:g> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \} $ as the postcondition $ \{ <var:u> = <var:g> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \cdot <var:g> \} $ . Moving forward to the next step , the variable binding command \verb | <var:n> := <var:S1> ; | . This statement moves the condition $ \{ <var:u> = <var:g> \land <var:S0> = <nat:9> \land <var:S1> = <nat:6> \cdot <var:g> \} $ into the condition $ \{ <var:u> = <var:g> \land <var:S0> = <nat:9> \land <var:n> = <nat:6> \cdot <var:g> \} $ . Stepping forward , we have the variable update code \verb | <var:n> := <var:n> + <var:S0> | . This line advances $ \{ <var:u> = <var:g> \land <var:S0> = <nat:9> \land <var:n> = <nat:6> \cdot <var:g> \} $ to $ \{ <var:u> = <var:g> \land <var:n> = <nat:6> \cdot <var:g> + <nat:9> \} $ . This is given using the assignment scheme from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <def:poly> := <var:S0> := <nat:9> ; <var:S1> := <nat:6> ; <var:S1> := <var:S1> * <var:u> ; <var:n> := <var:S1> ; <var:n> := <var:n> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:u> = <var:g> }} <def:poly> {{ <var:n> = <nat:6> * <var:g> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:S0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:S0> = <nat:9> /\ <var:S1> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:S0> = <nat:9> /\ <var:n> = <nat:6> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:g> /\ <var:n> = <nat:6> * <var:g> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 