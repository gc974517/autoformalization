\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:C> := <nat:2> ; <var:C> := <nat:1> + <var:C> * <var:K> ; <var:C> := <nat:3> + <var:C> * <var:K> ; <var:C> := <var:C> * <var:K> ; <var:C> := <var:C> * <var:K> ; <var:C> := <nat:3> + <var:C> * <var:K> ; <var:C> := <nat:4> + <var:C> * <var:K> ; <var:C> := <nat:1> + <var:C> * <var:K> ; <var:C> := <nat:2> + <var:C> * <var:K> ; <var:C> := <nat:4> + <var:C> * <var:K> \end{verbatim} \end{definition} \begin{theorem} Assume --- taking $ <var:d> \in \mathbb{Z}^+ $ --- that $ <var:K> = <var:d> $ prior to the execution of our program it follows that we see $ <var:C> = <nat:2> \times <var:d> ^ <nat:9> + <nat:1> \times <var:d> ^ <nat:8> + <nat:3> \times <var:d> ^ <nat:7> + <nat:3> \times <var:d> ^ <nat:4> + <nat:4> \times <var:d> ^ <nat:3> + <nat:1> \times <var:d> ^ <nat:2> + <nat:2> \times <var:d> + <nat:4> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:K> = <var:d> \} \\ <var:C> := <nat:2> ; \\ \{ <var:K> = <var:d> \land <var:C> = <nat:2> \} \\ <var:C> := <nat:1> + <var:C> * <var:K> ; \\ \{ <var:K> = <var:d> \land <var:C> = <nat:2> \cdot <var:d> + <nat:1> \} \\ <var:C> := <nat:3> + <var:C> * <var:K> ; \\ \{ <var:K> = <var:d> \land <var:C> = <nat:2> \cdot <var:d> ^ <nat:2> + <nat:1> \cdot <var:d> + <nat:3> \} \\ <var:C> := <var:C> * <var:K> ; \\ \{ <var:K> = <var:d> \land <var:C> = <nat:2> \cdot <var:d> ^ <nat:3> + <nat:1> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + \} \\ <var:C> := <var:C> * <var:K> ; \\ \{ <var:K> = <var:d> \land <var:C> = <nat:2> \cdot <var:d> ^ <nat:4> + <nat:1> \cdot <var:d> ^ <nat:3> + <nat:3> \cdot <var:d> ^ <nat:2> + \} \\ <var:C> := <nat:3> + <var:C> * <var:K> ; \\ \{ <var:K> = <var:d> \land <var:C> = <nat:2> \cdot <var:d> ^ <nat:5> + <nat:1> \cdot <var:d> ^ <nat:4> + <nat:3> \cdot <var:d> ^ <nat:3> + <nat:3> \} \\ <var:C> := <nat:4> + <var:C> * <var:K> ; \\ \{ <var:K> = <var:d> \land <var:C> = <nat:2> \cdot <var:d> ^ <nat:6> + <nat:1> \cdot <var:d> ^ <nat:5> + <nat:3> \cdot <var:d> ^ <nat:4> + <nat:3> \cdot <var:d> + <nat:4> \} \\ <var:C> := <nat:1> + <var:C> * <var:K> ; \\ \{ <var:K> = <var:d> \land <var:C> = <nat:2> \cdot <var:d> ^ <nat:7> + <nat:1> \cdot <var:d> ^ <nat:6> + <nat:3> \cdot <var:d> ^ <nat:5> + <nat:3> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:1> \} \\ <var:C> := <nat:2> + <var:C> * <var:K> ; \\ \{ <var:K> = <var:d> \land <var:C> = <nat:2> \cdot <var:d> ^ <nat:8> + <nat:1> \cdot <var:d> ^ <nat:7> + <nat:3> \cdot <var:d> ^ <nat:6> + <nat:3> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:1> \cdot <var:d> + <nat:2> \} \\ <var:C> := <nat:4> + <var:C> * <var:K> \\ \{ <var:K> = <var:d> \land <var:C> = <nat:2> \cdot <var:d> ^ <nat:9> + <nat:1> \cdot <var:d> ^ <nat:8> + <nat:3> \cdot <var:d> ^ <nat:7> + <nat:3> \cdot <var:d> ^ <nat:4> + <nat:4> \cdot <var:d> ^ <nat:3> + <nat:1> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + <nat:4> \} \end{eqnarray} Hence , the set of commands has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:C> := <nat:2> ; <var:C> := <nat:1> + <var:C> * <var:K> ; <var:C> := <nat:3> + <var:C> * <var:K> ; <var:C> := <var:C> * <var:K> ; <var:C> := <var:C> * <var:K> ; <var:C> := <nat:3> + <var:C> * <var:K> ; <var:C> := <nat:4> + <var:C> * <var:K> ; <var:C> := <nat:1> + <var:C> * <var:K> ; <var:C> := <nat:2> + <var:C> * <var:K> ; <var:C> := <nat:4> + <var:C> * <var:K> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:K> = <var:d> }} <def:poly> {{ <var:C> = <nat:2> * <var:d> ^ <nat:9> + <nat:1> * <var:d> ^ <nat:8> + <nat:3> * <var:d> ^ <nat:7> + <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:C> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:C> = <nat:2> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:C> = <nat:2> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:C> = <nat:2> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:C> = <nat:2> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:C> = <nat:2> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:C> = <nat:2> * <var:d> ^ <nat:6> + <nat:1> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:3> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:C> = <nat:2> * <var:d> ^ <nat:7> + <nat:1> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:C> = <nat:2> * <var:d> ^ <nat:8> + <nat:1> * <var:d> ^ <nat:7> + <nat:3> * <var:d> ^ <nat:6> + <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:d> /\ <var:C> = <nat:2> * <var:d> ^ <nat:9> + <nat:1> * <var:d> ^ <nat:8> + <nat:3> * <var:d> ^ <nat:7> + <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 