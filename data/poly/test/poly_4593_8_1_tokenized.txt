\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:M1> := <var:L> ; <var:M2> := <var:M1> * <var:L> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:1> ; <var:M2> := <var:M2> * <nat:3> ; <var:y> := <var:M2> <var:y> := <var:y> + <var:M1> <var:y> := <var:y> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allow it to be that $ <var:L> = <var:s> $ before running our program , then we see $ <var:y> = <nat:3> \cdot <var:s> ^ <nat:2> + <nat:1> \cdot <var:s> + <nat:2> $ once code segment finishes . \end{theorem} \begin{proof} The application of standard Hoare techniques gives us : \begin{eqnarray} \{ <var:L> = <var:s> \} \\ <var:M1> := <var:L> ; \\ \{ <var:L> = <var:s> \land <var:M1> = <var:s> \} \\ <var:M2> := <var:M1> * <var:L> ; \\ \{ <var:L> = <var:s> \land <var:M1> = <var:s> \land <var:M2> = <var:s> ^ <nat:2> \} \\ <var:M0> := <nat:2> ; \\ \{ <var:L> = <var:s> \land <var:M1> = <var:s> \land <var:M2> = <var:s> ^ <nat:2> \land <var:M0> = <nat:2> \} \\ <var:M1> := <var:M1> * <nat:1> ; \\ \{ <var:L> = <var:s> \land <var:M1> = <nat:1> * <var:s> \land <var:M2> = <var:s> ^ <nat:2> \land <var:M0> = <nat:2> \} \\ <var:M2> := <var:M2> * <nat:3> ; \\ \{ <var:L> = <var:s> \land <var:M1> = <nat:1> * <var:s> \land <var:M2> = <nat:3> * <var:s> ^ <nat:2> \land <var:M0> = <nat:2> \} \\ <var:y> := <var:M2> \\ \{ <var:L> = <var:s> \land <var:M1> = <nat:1> * <var:s> \land <var:M0> = <nat:2> \land <var:y> = <nat:3> * <var:s> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:M1> \\ \{ <var:L> = <var:s> \land <var:M0> = <nat:2> \land <var:y> = <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> \} \\ <var:y> := <var:y> + <var:M0> \\ \{ <var:L> = <var:s> \land <var:y> = <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:2> \} \end{eqnarray} Given the preceding argument , the list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Definition <def:poly> := <var:M1> := <var:L> ; <var:M2> := <var:M1> * <var:L> ; <var:M0> := <nat:2> ; <var:M1> := <var:M1> * <nat:1> ; <var:M2> := <var:M2> * <nat:3> ; <var:y> := <var:M2> <var:y> := <var:y> + <var:M1> <var:y> := <var:y> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:L> = <var:s> }} <def:poly> {{ <var:y> = <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:M1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:M1> = <var:s> /\ <var:M2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:M1> = <var:s> /\ <var:M2> = <var:s> ^ <nat:2> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:M1> = <nat:1> * <var:s> /\ <var:M2> = <var:s> ^ <nat:2> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:M1> = <nat:1> * <var:s> /\ <var:M2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:M0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:M1> = <nat:1> * <var:s> /\ <var:M0> = <nat:2> /\ <var:y> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:M0> = <nat:2> /\ <var:y> = <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:s> /\ <var:y> = <nat:3> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 