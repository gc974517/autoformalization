\begin{document} \begin{theorem} Consider a set of instructions in \emph{Imp} as \begin{verbatim} <var:H1> := <var:p> ; <var:H2> := <var:H1> * <var:p> ; <var:H3> := <var:H2> * <var:p> ; <var:H4> := <var:H3> * <var:p> ; <var:H5> := <var:H4> * <var:p> ; <var:H0> := <nat:1> ; <var:H2> := <var:H2> * <nat:6> ; <var:H3> := <var:H3> * <nat:8> ; <var:H5> := <var:H5> * <nat:3> ; <var:f> := <var:H5> <var:f> := <var:f> + <var:H3> <var:f> := <var:f> + <var:H2> <var:f> := <var:f> + <var:H0> \end{verbatim} Allow , for some natural coefficients $ <var:Z> $ , that $ <var:p> = <var:Z> $ ahead of running this set of instructions then $ <var:f> = <nat:3> \cdot <var:Z> ^ <nat:5> + <nat:8> \cdot <var:Z> ^ <nat:3> + <nat:6> \cdot <var:Z> ^ <nat:2> + <nat:1> $ once series of instructions has exited . \end{theorem} \begin{proof} See that this decorated set of commands . \begin{eqnarray} \{ <var:p> = <var:Z> \} \\ <var:H1> := <var:p> ; \\ \{ <var:p> = <var:Z> \land <var:H1> = <var:Z> \} \\ <var:H2> := <var:H1> * <var:p> ; \\ \{ <var:p> = <var:Z> \land <var:H1> = <var:Z> \land <var:H2> = <var:Z> ^ <nat:2> \} \\ <var:H3> := <var:H2> * <var:p> ; \\ \{ <var:p> = <var:Z> \land <var:H1> = <var:Z> \land <var:H2> = <var:Z> ^ <nat:2> \land <var:H3> = <var:Z> ^ <nat:3> \} \\ <var:H4> := <var:H3> * <var:p> ; \\ \{ <var:p> = <var:Z> \land <var:H1> = <var:Z> \land <var:H2> = <var:Z> ^ <nat:2> \land <var:H3> = <var:Z> ^ <nat:3> \land <var:H4> = <var:Z> ^ <nat:4> \} \\ <var:H5> := <var:H4> * <var:p> ; \\ \{ <var:p> = <var:Z> \land <var:H1> = <var:Z> \land <var:H2> = <var:Z> ^ <nat:2> \land <var:H3> = <var:Z> ^ <nat:3> \land <var:H4> = <var:Z> ^ <nat:4> \land <var:H5> = <var:Z> ^ <nat:5> \} \\ <var:H0> := <nat:1> ; \\ \{ <var:p> = <var:Z> \land <var:H1> = <var:Z> \land <var:H2> = <var:Z> ^ <nat:2> \land <var:H3> = <var:Z> ^ <nat:3> \land <var:H4> = <var:Z> ^ <nat:4> \land <var:H5> = <var:Z> ^ <nat:5> \land <var:H0> = <nat:1> \} \\ <var:H2> := <var:H2> * <nat:6> ; \\ \{ <var:p> = <var:Z> \land <var:H1> = <var:Z> \land <var:H2> = <nat:6> \cdot <var:Z> ^ <nat:2> \land <var:H3> = <var:Z> ^ <nat:3> \land <var:H4> = <var:Z> ^ <nat:4> \land <var:H5> = <var:Z> ^ <nat:5> \land <var:H0> = <nat:1> \} \\ <var:H3> := <var:H3> * <nat:8> ; \\ \{ <var:p> = <var:Z> \land <var:H1> = <var:Z> \land <var:H2> = <nat:6> \cdot <var:Z> ^ <nat:2> \land <var:H3> = <nat:8> \cdot <var:Z> ^ <nat:3> \land <var:H4> = <var:Z> ^ <nat:4> \land <var:H5> = <var:Z> ^ <nat:5> \land <var:H0> = <nat:1> \} \\ <var:H5> := <var:H5> * <nat:3> ; \\ \{ <var:p> = <var:Z> \land <var:H1> = <var:Z> \land <var:H2> = <nat:6> \cdot <var:Z> ^ <nat:2> \land <var:H3> = <nat:8> \cdot <var:Z> ^ <nat:3> \land <var:H4> = <var:Z> ^ <nat:4> \land <var:H5> = <nat:3> \cdot <var:Z> ^ <nat:5> \land <var:H0> = <nat:1> \} \\ <var:f> := <var:H5> \\ \{ <var:p> = <var:Z> \land <var:H1> = <var:Z> \land <var:H2> = <nat:6> \cdot <var:Z> ^ <nat:2> \land <var:H3> = <nat:8> \cdot <var:Z> ^ <nat:3> \land <var:H4> = <var:Z> ^ <nat:4> \land <var:H0> = <nat:1> \land <var:f> = <nat:3> \cdot <var:Z> ^ <nat:5> \} \\ <var:f> := <var:f> + <var:H3> \\ \{ <var:p> = <var:Z> \land <var:H1> = <var:Z> \land <var:H2> = <nat:6> \cdot <var:Z> ^ <nat:2> \land <var:H0> = <nat:1> \land <var:f> = <nat:3> \cdot <var:Z> ^ <nat:5> + <nat:8> \cdot <var:Z> ^ <nat:3> \} \\ <var:f> := <var:f> + <var:H2> \\ \{ <var:p> = <var:Z> \land <var:H1> = <var:Z> \land <var:H0> = <nat:1> \land <var:f> = <nat:3> \cdot <var:Z> ^ <nat:5> + <nat:8> \cdot <var:Z> ^ <nat:3> + <nat:6> \cdot <var:Z> ^ <nat:2> \} \\ <var:f> := <var:f> + <var:H0> \\ \{ <var:p> = <var:Z> \land <var:f> = <nat:3> \cdot <var:Z> ^ <nat:5> + <nat:8> \cdot <var:Z> ^ <nat:3> + <nat:6> \cdot <var:Z> ^ <nat:2> + <nat:1> \} \end{eqnarray} The application of Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <var:H4> : string := " <var:H4> " . Definition <var:H5> : string := " <var:H5> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:p> = <var:Z> }} <var:H1> := <var:p> ; <var:H2> := <var:H1> * <var:p> ; <var:H3> := <var:H2> * <var:p> ; <var:H4> := <var:H3> * <var:p> ; <var:H5> := <var:H4> * <var:p> ; <var:H0> := <nat:1> ; <var:H2> := <var:H2> * <nat:6> ; <var:H3> := <var:H3> * <nat:8> ; <var:H5> := <var:H5> * <nat:3> ; <var:f> := <var:H5> <var:f> := <var:f> + <var:H3> <var:f> := <var:f> + <var:H2> <var:f> := <var:f> + <var:H0> {{ <var:f> = <nat:3> * <var:Z> ^ <nat:5> + <nat:8> * <var:Z> ^ <nat:3> + <nat:6> * <var:Z> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:H1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:H1> = <var:Z> /\ <var:H2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:H1> = <var:Z> /\ <var:H2> = <var:Z> ^ <nat:2> /\ <var:H3> = <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:H1> = <var:Z> /\ <var:H2> = <var:Z> ^ <nat:2> /\ <var:H3> = <var:Z> ^ <nat:3> /\ <var:H4> = <var:Z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:H1> = <var:Z> /\ <var:H2> = <var:Z> ^ <nat:2> /\ <var:H3> = <var:Z> ^ <nat:3> /\ <var:H4> = <var:Z> ^ <nat:4> /\ <var:H5> = <var:Z> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:H1> = <var:Z> /\ <var:H2> = <var:Z> ^ <nat:2> /\ <var:H3> = <var:Z> ^ <nat:3> /\ <var:H4> = <var:Z> ^ <nat:4> /\ <var:H5> = <var:Z> ^ <nat:5> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:H1> = <var:Z> /\ <var:H2> = <nat:6> * <var:Z> ^ <nat:2> /\ <var:H3> = <var:Z> ^ <nat:3> /\ <var:H4> = <var:Z> ^ <nat:4> /\ <var:H5> = <var:Z> ^ <nat:5> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:H1> = <var:Z> /\ <var:H2> = <nat:6> * <var:Z> ^ <nat:2> /\ <var:H3> = <nat:8> * <var:Z> ^ <nat:3> /\ <var:H4> = <var:Z> ^ <nat:4> /\ <var:H5> = <var:Z> ^ <nat:5> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:H1> = <var:Z> /\ <var:H2> = <nat:6> * <var:Z> ^ <nat:2> /\ <var:H3> = <nat:8> * <var:Z> ^ <nat:3> /\ <var:H4> = <var:Z> ^ <nat:4> /\ <var:H5> = <nat:3> * <var:Z> ^ <nat:5> /\ <var:H0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:H1> = <var:Z> /\ <var:H2> = <nat:6> * <var:Z> ^ <nat:2> /\ <var:H3> = <nat:8> * <var:Z> ^ <nat:3> /\ <var:H4> = <var:Z> ^ <nat:4> /\ <var:H0> = <nat:1> /\ <var:f> = <nat:3> * <var:Z> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:H1> = <var:Z> /\ <var:H2> = <nat:6> * <var:Z> ^ <nat:2> /\ <var:H0> = <nat:1> /\ <var:f> = <nat:3> * <var:Z> ^ <nat:5> + <nat:8> * <var:Z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:H1> = <var:Z> /\ <var:H0> = <nat:1> /\ <var:f> = <nat:3> * <var:Z> ^ <nat:5> + <nat:8> * <var:Z> ^ <nat:3> + <nat:6> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:Z> /\ <var:f> = <nat:3> * <var:Z> ^ <nat:5> + <nat:8> * <var:Z> ^ <nat:3> + <nat:6> * <var:Z> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 