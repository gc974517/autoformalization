\begin{document} \begin{theorem} Let the following program in \emph{Imp} as follows \begin{verbatim} <var:M1> := <var:l> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:1> ; <var:e> := <var:M1> <var:e> := <var:e> + <var:M0> \end{verbatim} Allow letting $ <var:N> \in \mathbb{Z}^+ $ that $ <var:l> = <var:N> $ prior to executing our code segment , it must be that we have $ <var:e> = <nat:1> \times <var:N> + <nat:4> $ when list of instructions is done executing . \end{theorem} \begin{proof} The application of standard Hoare techniques gives : \begin{eqnarray} \{ <var:l> = <var:N> \} \\ <var:M1> := <var:l> ; \\ \{ <var:l> = <var:N> \land <var:M1> = <var:N> \} \\ <var:M0> := <nat:4> ; \\ \{ <var:l> = <var:N> \land <var:M1> = <var:N> \land <var:M0> = <nat:4> \} \\ <var:M1> := <var:M1> * <nat:1> ; \\ \{ <var:l> = <var:N> \land <var:M1> = <nat:1> * <var:N> \land <var:M0> = <nat:4> \} \\ <var:e> := <var:M1> \\ \{ <var:l> = <var:N> \land <var:M0> = <nat:4> \land <var:e> = <nat:1> * <var:N> \} \\ <var:e> := <var:e> + <var:M0> \\ \{ <var:l> = <var:N> \land <var:e> = <nat:1> * <var:N> + <nat:4> \} \end{eqnarray} Therefore , our set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:l> = <var:N> }} <var:M1> := <var:l> ; <var:M0> := <nat:4> ; <var:M1> := <var:M1> * <nat:1> ; <var:e> := <var:M1> <var:e> := <var:e> + <var:M0> {{ <var:e> = <nat:1> * <var:N> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M1> = <var:N> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M1> = <nat:1> * <var:N> /\ <var:M0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:M0> = <nat:4> /\ <var:e> = <nat:1> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:N> /\ <var:e> = <nat:1> * <var:N> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 