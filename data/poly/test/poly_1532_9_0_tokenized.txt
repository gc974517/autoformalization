\begin{document} \begin{theorem} Take the following series of commands as follows \begin{verbatim} <var:M0> := <nat:5> ; <var:M1> := <nat:3> ; <var:M1> := <var:M1> * <var:t> ; <var:M2> := <nat:9> ; <var:M2> := <var:M2> * <var:t> ; <var:M2> := <var:M2> * <var:t> ; <var:q> := <var:M2> ; <var:q> := <var:q> + <var:M1> ; <var:q> := <var:q> + <var:M0> \end{verbatim} Given for any positive integers $ <var:F> $ that we have $ <var:t> = <var:F> $ before the execution of this series of commands , then $ <var:q> = <nat:9> \cdot <var:F> ^ <nat:2> + <nat:3> \cdot <var:F> + <nat:5> $ when series of instructions is done . \end{theorem} \begin{proof} The method of proof for the set of instructions is clear by typical Hoare reasoning . Paying attention to the upcoming line of code found in the code segment , the line letting $ <nat:5> $ as $ <var:M0>$ . This redefines $ \{ <var:t> = <var:F> \} $ as $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \} $ . Stepping through , we see the environment update code \verb | <var:M1> := <nat:3> ; | . This transfers the condition $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \} $ into $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:M1> = <nat:3> \} $ . Looking at the subsequent line of code in the code segment , we see the variable assignmet code binding $ <var:M1> * <var:t> $ toward $ <var:M1>$ . This line takes the condition $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:M1> = <nat:3> \} $ into $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:M1> = <nat:3> \times <var:F> \} $ . This is given through the assignment law defined in Hoare techniques . Advancing to the next step , the variable update statement binding $ <nat:9> $ toward $ <var:M2>$ . This takes the precondition $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:M1> = <nat:3> \times <var:F> \} $ toward the condition $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:M1> = <nat:3> \times <var:F> \land <var:M2> = <nat:9> \} $ . This is deduced with the assignment inference rule found in standard Hoare techniques . Advancing , we see the command defining $ <var:M2> * <var:t> $ toward $ <var:M2>$ . This redefines $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:M1> = <nat:3> \times <var:F> \land <var:M2> = <nat:9> \} $ to $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:M1> = <nat:3> \times <var:F> \land <var:M2> = <nat:9> \times <var:F> \} $ . This is ensured by the assignment rule obtained from usual Hoare reasoning . Next , the code \verb | <var:M2> := <var:M2> * <var:t> ; | . This advances the precondition $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:M1> = <nat:3> \times <var:F> \land <var:M2> = <nat:9> \times <var:F> \} $ toward the condition $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:M1> = <nat:3> \times <var:F> \land <var:M2> = <nat:9> \times <var:F> ^ <nat:2> \} $ . Looking at the upcoming statement in the code , we have the variable update line \verb | <var:q> := <var:M2> ; | . This statement redefines the condition $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:M1> = <nat:3> \times <var:F> \land <var:M2> = <nat:9> \times <var:F> ^ <nat:2> \} $ to $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:M1> = <nat:3> \times <var:F> \land <var:q> = <nat:9> \times <var:F> ^ <nat:2> \} $ . This is ensured with the assignment inference rule given by typical Hoare logic . Immediately after , the environment update code \verb | <var:q> := <var:q> + <var:M1> ; | . This advances $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:M1> = <nat:3> \times <var:F> \land <var:q> = <nat:9> \times <var:F> ^ <nat:2> \} $ as the postcondition $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:q> = <nat:9> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> \} $ . Stepping forward , the variable update statement \verb | <var:q> := <var:q> + <var:M0> | . This moves $ \{ <var:t> = <var:F> \land <var:M0> = <nat:5> \land <var:q> = <nat:9> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> \} $ into the postcondition $ \{ <var:t> = <var:F> \land <var:q> = <nat:9> \times <var:F> ^ <nat:2> + <nat:3> \times <var:F> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <var:M2> : string := " <var:M2> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:t> = <var:F> }} <var:M0> := <nat:5> ; <var:M1> := <nat:3> ; <var:M1> := <var:M1> * <var:t> ; <var:M2> := <nat:9> ; <var:M2> := <var:M2> * <var:t> ; <var:M2> := <var:M2> * <var:t> ; <var:q> := <var:M2> ; <var:q> := <var:q> + <var:M1> ; <var:q> := <var:q> + <var:M0> {{ <var:q> = <nat:9> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:M0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:3> * <var:F> /\ <var:M2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:3> * <var:F> /\ <var:M2> = <nat:9> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:3> * <var:F> /\ <var:M2> = <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:M0> = <nat:5> /\ <var:M1> = <nat:3> * <var:F> /\ <var:q> = <nat:9> * <var:F> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:M0> = <nat:5> /\ <var:q> = <nat:9> * <var:F> ^ <nat:2> + <nat:3> * <var:F> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:q> = <nat:9> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 