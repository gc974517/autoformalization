\begin{document} \begin{definition} Let the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:M1> := <var:g> ; <var:M0> := <nat:7> ; <var:M1> := <var:M1> * <nat:9> ; <var:R> := <var:M1> <var:R> := <var:R> + <var:M0> \end{verbatim} \end{definition} \begin{theorem} Allow for every positive coefficients $ <var:f> $ it to be that $ <var:g> = <var:f> $ prior to the evaluation of the list of commands , it follows that we see $ <var:R> = <nat:9> \times <var:f> + <nat:7> $ . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning yields : \begin{eqnarray} \{ <var:g> = <var:f> \} \\ <var:M1> := <var:g> ; \\ \{ <var:g> = <var:f> \land <var:M1> = <var:f> \} \\ <var:M0> := <nat:7> ; \\ \{ <var:g> = <var:f> \land <var:M1> = <var:f> \land <var:M0> = <nat:7> \} \\ <var:M1> := <var:M1> * <nat:9> ; \\ \{ <var:g> = <var:f> \land <var:M1> = <nat:9> \times <var:f> \land <var:M0> = <nat:7> \} \\ <var:R> := <var:M1> \\ \{ <var:g> = <var:f> \land <var:M0> = <nat:7> \land <var:R> = <nat:9> \times <var:f> \} \\ <var:R> := <var:R> + <var:M0> \\ \{ <var:g> = <var:f> \land <var:R> = <nat:9> \times <var:f> + <nat:7> \} \end{eqnarray} Thusly , our series of instructions is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:M0> : string := " <var:M0> " . Definition <var:M1> : string := " <var:M1> " . Definition <def:poly> := <var:M1> := <var:g> ; <var:M0> := <nat:7> ; <var:M1> := <var:M1> * <nat:9> ; <var:R> := <var:M1> <var:R> := <var:R> + <var:M0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:g> = <var:f> }} <def:poly> {{ <var:R> = <nat:9> * <var:f> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:M1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:M1> = <var:f> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:M1> = <nat:9> * <var:f> /\ <var:M0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:M0> = <nat:7> /\ <var:R> = <nat:9> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:f> /\ <var:R> = <nat:9> * <var:f> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 