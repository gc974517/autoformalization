\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:y0> := <nat:4> ; <var:y1> := <nat:6> ; <var:y1> := <var:y1> * <var:c> ; <var:y2> := <nat:4> ; <var:y2> := <var:y2> * <var:c> ; <var:y2> := <var:y2> * <var:c> ; <var:j> := <var:y2> ; <var:j> := <var:j> + <var:y1> ; <var:j> := <var:j> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} We define the following segment of code <def:poly> in \emph{Imp} . Given that we have $ <var:c> = <var:O> $ before interpreting the set of instructions , then we have $ <var:j> = <nat:4> \times <var:O> ^ <nat:2> + <nat:6> \times <var:O> + <nat:4> $ when list of instructions terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:c> = <var:O> \} \\ <var:y0> := <nat:4> ; \\ \{ <var:c> = <var:O> \land <var:y0> = <nat:4> \} \\ <var:y1> := <nat:6> ; \\ \{ <var:c> = <var:O> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> \} \\ <var:y1> := <var:y1> * <var:c> ; \\ \{ <var:c> = <var:O> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:O> \} \\ <var:y2> := <nat:4> ; \\ \{ <var:c> = <var:O> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:O> \land <var:y2> = <nat:4> \} \\ <var:y2> := <var:y2> * <var:c> ; \\ \{ <var:c> = <var:O> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:O> \land <var:y2> = <nat:4> * <var:O> \} \\ <var:y2> := <var:y2> * <var:c> ; \\ \{ <var:c> = <var:O> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:O> \land <var:y2> = <nat:4> * <var:O> ^ <nat:2> \} \\ <var:j> := <var:y2> ; \\ \{ <var:c> = <var:O> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:O> \land <var:j> = <nat:4> * <var:O> ^ <nat:2> \} \\ <var:j> := <var:j> + <var:y1> ; \\ \{ <var:c> = <var:O> \land <var:y0> = <nat:4> \land <var:j> = <nat:4> * <var:O> ^ <nat:2> + <nat:6> * <var:O> \} \\ <var:j> := <var:j> + <var:y0> \\ \{ <var:c> = <var:O> \land <var:j> = <nat:4> * <var:O> ^ <nat:2> + <nat:6> * <var:O> + <nat:4> \} \end{eqnarray} Using usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <def:poly> := <var:y0> := <nat:4> ; <var:y1> := <nat:6> ; <var:y1> := <var:y1> * <var:c> ; <var:y2> := <nat:4> ; <var:y2> := <var:y2> * <var:c> ; <var:y2> := <var:y2> * <var:c> ; <var:j> := <var:y2> ; <var:j> := <var:j> + <var:y1> ; <var:j> := <var:j> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:c> = <var:O> }} <def:poly> {{ <var:j> = <nat:4> * <var:O> ^ <nat:2> + <nat:6> * <var:O> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:O> /\ <var:y2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:O> /\ <var:y2> = <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:O> /\ <var:y2> = <nat:4> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:O> /\ <var:j> = <nat:4> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:y0> = <nat:4> /\ <var:j> = <nat:4> * <var:O> ^ <nat:2> + <nat:6> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:O> /\ <var:j> = <nat:4> * <var:O> ^ <nat:2> + <nat:6> * <var:O> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 