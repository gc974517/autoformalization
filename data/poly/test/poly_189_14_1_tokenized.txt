\begin{document} \begin{theorem} Take a set of instructions in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:o> ; <var:b2> := <var:b1> * <var:o> ; <var:b3> := <var:b2> * <var:o> ; <var:b4> := <var:b3> * <var:o> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:8> ; <var:b2> := <var:b2> * <nat:9> ; <var:b3> := <var:b3> * <nat:5> ; <var:b4> := <var:b4> * <nat:2> ; <var:k> := <var:b4> <var:k> := <var:k> + <var:b3> <var:k> := <var:k> + <var:b2> <var:k> := <var:k> + <var:b1> <var:k> := <var:k> + <var:b0> \end{verbatim} Assuming that we have $ <var:o> = <var:I> $ --- given natural numbers $ <var:I> $ --- prior to running our series of commands , it holds that we have $ <var:k> = <nat:2> \times <var:I> ^ <nat:4> + <nat:5> \times <var:I> ^ <nat:3> + <nat:9> \times <var:I> ^ <nat:2> + <nat:8> \times <var:I> + <nat:4> $ once code segment is done executing . \end{theorem} \begin{proof} The method of proof for the code segment is shown using standard Hoare techniques . Taking another step toward the upcoming line of code found in the code , we have the environment update statement \verb | <var:b1> := <var:o> ; | . This moves $ \{ <var:o> = <var:I> \} $ as the postcondition $ \{ <var:o> = <var:I> \land <var:b1> = <var:I> \} $ . Immediately following , we see the variable assignmet code \verb | <var:b2> := <var:b1> * <var:o> ; | . This code takes the condition $ \{ <var:o> = <var:I> \land <var:b1> = <var:I> \} $ as the postcondition $ \{ <var:o> = <var:I> \land <var:b1> = <var:I> \land <var:b2> = <var:I> ^ <nat:2> \} $ . Immediately following , the line binding $ <var:b2> * <var:o> $ to $ <var:b3>$ . This line forwards the condition $ \{ <var:o> = <var:I> \land <var:b1> = <var:I> \land <var:b2> = <var:I> ^ <nat:2> \} $ into the condition $ \{ <var:o> = <var:I> \land <var:b1> = <var:I> \land <var:b2> = <var:I> ^ <nat:2> \land <var:b3> = <var:I> ^ <nat:3> \} $ . Going to the next step , the variable assignmet code \verb | <var:b4> := <var:b3> * <var:o> ; | . This moves $ \{ <var:o> = <var:I> \land <var:b1> = <var:I> \land <var:b2> = <var:I> ^ <nat:2> \land <var:b3> = <var:I> ^ <nat:3> \} $ toward the postcondition $ \{ <var:o> = <var:I> \land <var:b1> = <var:I> \land <var:b2> = <var:I> ^ <nat:2> \land <var:b3> = <var:I> ^ <nat:3> \land <var:b4> = <var:I> ^ <nat:4> \} $ . Jumping to the next statement in our program , we have the assignment command \verb | <var:b0> := <nat:4> ; | . This line advances the precondition $ \{ <var:o> = <var:I> \land <var:b1> = <var:I> \land <var:b2> = <var:I> ^ <nat:2> \land <var:b3> = <var:I> ^ <nat:3> \land <var:b4> = <var:I> ^ <nat:4> \} $ to the postcondition $ \{ <var:o> = <var:I> \land <var:b1> = <var:I> \land <var:b2> = <var:I> ^ <nat:2> \land <var:b3> = <var:I> ^ <nat:3> \land <var:b4> = <var:I> ^ <nat:4> \land <var:b0> = <nat:4> \} $ . This is given using the assignment scheme defined in usual Hoare techniques . Jumping to the next command contained in the code , we see the assignment statement \verb | <var:b1> := <var:b1> * <nat:8> ; | . This moves the condition $ \{ <var:o> = <var:I> \land <var:b1> = <var:I> \land <var:b2> = <var:I> ^ <nat:2> \land <var:b3> = <var:I> ^ <nat:3> \land <var:b4> = <var:I> ^ <nat:4> \land <var:b0> = <nat:4> \} $ as $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b2> = <var:I> ^ <nat:2> \land <var:b3> = <var:I> ^ <nat:3> \land <var:b4> = <var:I> ^ <nat:4> \land <var:b0> = <nat:4> \} $ . Moving forward to the next line of code contained in the code , we see the variable update line giving $ <var:b2> * <nat:9> $ as $ <var:b2>$ . This code moves $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b2> = <var:I> ^ <nat:2> \land <var:b3> = <var:I> ^ <nat:3> \land <var:b4> = <var:I> ^ <nat:4> \land <var:b0> = <nat:4> \} $ toward $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b2> = <nat:9> \times <var:I> ^ <nat:2> \land <var:b3> = <var:I> ^ <nat:3> \land <var:b4> = <var:I> ^ <nat:4> \land <var:b0> = <nat:4> \} $ . Advancing , we see the variable binding line \verb | <var:b3> := <var:b3> * <nat:5> ; | . This statement transfers the precondition $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b2> = <nat:9> \times <var:I> ^ <nat:2> \land <var:b3> = <var:I> ^ <nat:3> \land <var:b4> = <var:I> ^ <nat:4> \land <var:b0> = <nat:4> \} $ toward the postcondition $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b2> = <nat:9> \times <var:I> ^ <nat:2> \land <var:b3> = <nat:5> \times <var:I> ^ <nat:3> \land <var:b4> = <var:I> ^ <nat:4> \land <var:b0> = <nat:4> \} $ . This is rigorously given using the assignment scheme obtained from typical Hoare logic . Moving forward , the variable update code \verb | <var:b4> := <var:b4> * <nat:2> ; | . This line advances the condition $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b2> = <nat:9> \times <var:I> ^ <nat:2> \land <var:b3> = <nat:5> \times <var:I> ^ <nat:3> \land <var:b4> = <var:I> ^ <nat:4> \land <var:b0> = <nat:4> \} $ into the postcondition $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b2> = <nat:9> \times <var:I> ^ <nat:2> \land <var:b3> = <nat:5> \times <var:I> ^ <nat:3> \land <var:b4> = <nat:2> \times <var:I> ^ <nat:4> \land <var:b0> = <nat:4> \} $ . This is shown by the assignment inference rule found in usual Hoare reasoning . Taking a look at the proceeding bit of code seen in our set of instructions , we see the binding command defining $ <var:b4$ as $ <var:k>$ . This redefines $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b2> = <nat:9> \times <var:I> ^ <nat:2> \land <var:b3> = <nat:5> \times <var:I> ^ <nat:3> \land <var:b4> = <nat:2> \times <var:I> ^ <nat:4> \land <var:b0> = <nat:4> \} $ as $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b2> = <nat:9> \times <var:I> ^ <nat:2> \land <var:b3> = <nat:5> \times <var:I> ^ <nat:3> \land <var:b0> = <nat:4> \land <var:k> = <nat:2> \times <var:I> ^ <nat:4> \} $ . Stepping through , the variable binding line letting $ <var:k> + <var:b3$ to $ <var:k>$ . This transfers the precondition $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b2> = <nat:9> \times <var:I> ^ <nat:2> \land <var:b3> = <nat:5> \times <var:I> ^ <nat:3> \land <var:b0> = <nat:4> \land <var:k> = <nat:2> \times <var:I> ^ <nat:4> \} $ as $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b2> = <nat:9> \times <var:I> ^ <nat:2> \land <var:b0> = <nat:4> \land <var:k> = <nat:2> \times <var:I> ^ <nat:4> + <nat:5> \times <var:I> ^ <nat:3> \} $ . Considering the upcoming command seen in the program , we have the statement letting $ <var:k> + <var:b2$ as $ <var:k>$ . This moves $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b2> = <nat:9> \times <var:I> ^ <nat:2> \land <var:b0> = <nat:4> \land <var:k> = <nat:2> \times <var:I> ^ <nat:4> + <nat:5> \times <var:I> ^ <nat:3> \} $ into the postcondition $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b0> = <nat:4> \land <var:k> = <nat:2> \times <var:I> ^ <nat:4> + <nat:5> \times <var:I> ^ <nat:3> + <nat:9> \times <var:I> ^ <nat:2> \} $ . This is guaranteed through the assignment inference rule in typical Hoare techniques . Going to the next step , the statement \verb | <var:k> := <var:k> + <var:b1> | . This forwards the condition $ \{ <var:o> = <var:I> \land <var:b1> = <nat:8> \times <var:I> \land <var:b0> = <nat:4> \land <var:k> = <nat:2> \times <var:I> ^ <nat:4> + <nat:5> \times <var:I> ^ <nat:3> + <nat:9> \times <var:I> ^ <nat:2> \} $ into the postcondition $ \{ <var:o> = <var:I> \land <var:b0> = <nat:4> \land <var:k> = <nat:2> \times <var:I> ^ <nat:4> + <nat:5> \times <var:I> ^ <nat:3> + <nat:9> \times <var:I> ^ <nat:2> + <nat:8> \times <var:I> \} $ . This is shown to be logically sound using the assignment rule obtained from typical Hoare logic . Honing in on the subsequent step contained in our series of instructions , we have the binding code letting $ <var:k> + <var:b0$ into $ <var:k>$ . This redefines the precondition $ \{ <var:o> = <var:I> \land <var:b0> = <nat:4> \land <var:k> = <nat:2> \times <var:I> ^ <nat:4> + <nat:5> \times <var:I> ^ <nat:3> + <nat:9> \times <var:I> ^ <nat:2> + <nat:8> \times <var:I> \} $ as the postcondition $ \{ <var:o> = <var:I> \land <var:k> = <nat:2> \times <var:I> ^ <nat:4> + <nat:5> \times <var:I> ^ <nat:3> + <nat:9> \times <var:I> ^ <nat:2> + <nat:8> \times <var:I> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Definition <var:b4> : string := " <var:b4> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:o> = <var:I> }} <var:b1> := <var:o> ; <var:b2> := <var:b1> * <var:o> ; <var:b3> := <var:b2> * <var:o> ; <var:b4> := <var:b3> * <var:o> ; <var:b0> := <nat:4> ; <var:b1> := <var:b1> * <nat:8> ; <var:b2> := <var:b2> * <nat:9> ; <var:b3> := <var:b3> * <nat:5> ; <var:b4> := <var:b4> * <nat:2> ; <var:k> := <var:b4> <var:k> := <var:k> + <var:b3> <var:k> := <var:k> + <var:b2> <var:k> := <var:k> + <var:b1> <var:k> := <var:k> + <var:b0> {{ <var:k> = <nat:2> * <var:I> ^ <nat:4> + <nat:5> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:b1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:b1> = <var:I> /\ <var:b2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:b1> = <var:I> /\ <var:b2> = <var:I> ^ <nat:2> /\ <var:b3> = <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:b1> = <var:I> /\ <var:b2> = <var:I> ^ <nat:2> /\ <var:b3> = <var:I> ^ <nat:3> /\ <var:b4> = <var:I> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:b1> = <var:I> /\ <var:b2> = <var:I> ^ <nat:2> /\ <var:b3> = <var:I> ^ <nat:3> /\ <var:b4> = <var:I> ^ <nat:4> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:b1> = <nat:8> * <var:I> /\ <var:b2> = <var:I> ^ <nat:2> /\ <var:b3> = <var:I> ^ <nat:3> /\ <var:b4> = <var:I> ^ <nat:4> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:b1> = <nat:8> * <var:I> /\ <var:b2> = <nat:9> * <var:I> ^ <nat:2> /\ <var:b3> = <var:I> ^ <nat:3> /\ <var:b4> = <var:I> ^ <nat:4> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:b1> = <nat:8> * <var:I> /\ <var:b2> = <nat:9> * <var:I> ^ <nat:2> /\ <var:b3> = <nat:5> * <var:I> ^ <nat:3> /\ <var:b4> = <var:I> ^ <nat:4> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:b1> = <nat:8> * <var:I> /\ <var:b2> = <nat:9> * <var:I> ^ <nat:2> /\ <var:b3> = <nat:5> * <var:I> ^ <nat:3> /\ <var:b4> = <nat:2> * <var:I> ^ <nat:4> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:b1> = <nat:8> * <var:I> /\ <var:b2> = <nat:9> * <var:I> ^ <nat:2> /\ <var:b3> = <nat:5> * <var:I> ^ <nat:3> /\ <var:b0> = <nat:4> /\ <var:k> = <nat:2> * <var:I> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:b1> = <nat:8> * <var:I> /\ <var:b2> = <nat:9> * <var:I> ^ <nat:2> /\ <var:b0> = <nat:4> /\ <var:k> = <nat:2> * <var:I> ^ <nat:4> + <nat:5> * <var:I> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:b1> = <nat:8> * <var:I> /\ <var:b0> = <nat:4> /\ <var:k> = <nat:2> * <var:I> ^ <nat:4> + <nat:5> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:b0> = <nat:4> /\ <var:k> = <nat:2> * <var:I> ^ <nat:4> + <nat:5> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> + <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:I> /\ <var:k> = <nat:2> * <var:I> ^ <nat:4> + <nat:5> * <var:I> ^ <nat:3> + <nat:9> * <var:I> ^ <nat:2> + <nat:8> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 