\begin{document} \begin{theorem} Define a series of instructions as \begin{verbatim} <var:j1> := <var:s> ; <var:j2> := <var:j1> * <var:s> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:9> ; <var:j2> := <var:j2> * <nat:1> ; <var:H> := <var:j2> <var:H> := <var:H> + <var:j1> <var:H> := <var:H> + <var:j0> \end{verbatim} Allow that $ <var:s> = <var:V> $ before executing this set of instructions , it holds that $ <var:H> = <nat:1> * <var:V> ^ <nat:2> + <nat:9> * <var:V> + <nat:1> $ when set of instructions has finished executing . \end{theorem} \begin{proof} Proving correctness for the list of instructions is done through typical Hoare reasoning . Advancing to the proceeding bit of code in our code , \begin{eqnarray} \{ <var:s> = <var:V> \} \, <var:j1> := <var:s> \, \{ <var:s> = <var:V> \land <var:j1> = <var:V> \} \end{eqnarray} This is sound with the binding law obtained from Hoare techniques . Jumping to the proceeding command contained in the series of commands , we see \begin{eqnarray} \{ <var:s> = <var:V> \} \, <var:j1> := <var:s> \, \{ <var:s> = <var:V> \land <var:j1> = <var:V> \} \end{eqnarray} Keeping momentum , we have \begin{eqnarray} \{ <var:s> = <var:V> \} \, <var:j1> := <var:s> \, \{ <var:s> = <var:V> \land <var:j1> = <var:V> \} \\ \{ <var:s> = <var:V> \land <var:j1> = <var:V> \} \, <var:j2> := <var:j1> * <var:s> \, \{ <var:s> = <var:V> \land <var:j1> = <var:V> \land <var:j2> = <var:V> ^ <nat:2> \} \\ \{ <var:s> = <var:V> \land <var:j1> = <var:V> \land <var:j2> = <var:V> ^ <nat:2> \} \, <var:j0> := <nat:1> \, \{ <var:s> = <var:V> \land <var:j1> = <var:V> \land <var:j2> = <var:V> ^ <nat:2> \land <var:j0> = <nat:1> \} \\ \{ <var:s> = <var:V> \land <var:j1> = <var:V> \land <var:j2> = <var:V> ^ <nat:2> \land <var:j0> = <nat:1> \} \, <var:j1> := <var:j1> * <nat:9> \, \{ <var:s> = <var:V> \land <var:j1> = <nat:9> \cdot <var:V> \land <var:j2> = <var:V> ^ <nat:2> \land <var:j0> = <nat:1> \} \end{eqnarray} This is sound using the environment update inference rule found in standard Hoare reasoning . Further , we have \begin{eqnarray} \{ <var:s> = <var:V> \} \, <var:j1> := <var:s> \, \{ <var:s> = <var:V> \land <var:j1> = <var:V> \} \end{eqnarray} This is sound by the assignment rule obtained from Hoare reasoning . Looking at the upcoming bit of code seen in the list of commands , \begin{eqnarray} \{ <var:s> = <var:V> \} \, <var:j1> := <var:s> \, \{ <var:s> = <var:V> \land <var:j1> = <var:V> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:s> = <var:V> }} <var:j1> := <var:s> ; <var:j2> := <var:j1> * <var:s> ; <var:j0> := <nat:1> ; <var:j1> := <var:j1> * <nat:9> ; <var:j2> := <var:j2> * <nat:1> ; <var:H> := <var:j2> <var:H> := <var:H> + <var:j1> <var:H> := <var:H> + <var:j0> {{ <var:H> = <nat:1> * <var:V> ^ <nat:2> + <nat:9> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:j1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:j1> = <var:V> /\ <var:j2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:j1> = <var:V> /\ <var:j2> = <var:V> ^ <nat:2> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:j1> = <nat:9> * <var:V> /\ <var:j2> = <var:V> ^ <nat:2> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:j1> = <nat:9> * <var:V> /\ <var:j2> = <nat:1> * <var:V> ^ <nat:2> /\ <var:j0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:j1> = <nat:9> * <var:V> /\ <var:j0> = <nat:1> /\ <var:H> = <nat:1> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:j0> = <nat:1> /\ <var:H> = <nat:1> * <var:V> ^ <nat:2> + <nat:9> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:V> /\ <var:H> = <nat:1> * <var:V> ^ <nat:2> + <nat:9> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 