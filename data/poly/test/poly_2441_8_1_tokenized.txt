\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:c1> := <var:I> ; <var:c2> := <var:c1> * <var:I> ; <var:c0> := <nat:7> ; <var:c1> := <var:c1> * <nat:4> ; <var:c2> := <var:c2> * <nat:7> ; <var:t> := <var:c2> <var:t> := <var:t> + <var:c1> <var:t> := <var:t> + <var:c0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Assuming that $ <var:I> = <var:Z> $ --- assuming some $ <var:Z> \in \mathbb{N} $ --- prior to the evaluation of our code it holds that we have $ <var:t> = <nat:7> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:7> $ once list of instructions has finished . \end{theorem} \begin{proof} The flow of logic for our list of instructions is clear using typical Hoare techniques . Jumping to the proceeding line of code found in the segment of code , the command defining $ <var:I> $ into $ <var:c1>$ . This command redefines the precondition $ \{ <var:I> = <var:Z> \} $ to $ \{ <var:I> = <var:Z> \land <var:c1> = <var:Z> \} $ . This is sound by the assignment law in usual Hoare reasoning . Keeping momentum , the binding code \verb | <var:c2> := <var:c1> * <var:I> ; | . This transfers $ \{ <var:I> = <var:Z> \land <var:c1> = <var:Z> \} $ to $ \{ <var:I> = <var:Z> \land <var:c1> = <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> \} $ . Going to the next step , the variable assignmet statement \verb | <var:c0> := <nat:7> ; | . This command forwards $ \{ <var:I> = <var:Z> \land <var:c1> = <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> \} $ as the postcondition $ \{ <var:I> = <var:Z> \land <var:c1> = <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> \land <var:c0> = <nat:7> \} $ . Advancing , we have the binding command \verb | <var:c1> := <var:c1> * <nat:4> ; | . This command forwards $ \{ <var:I> = <var:Z> \land <var:c1> = <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> \land <var:c0> = <nat:7> \} $ toward the postcondition $ \{ <var:I> = <var:Z> \land <var:c1> = <nat:4> \cdot <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> \land <var:c0> = <nat:7> \} $ . This is deduced by the assignment inference rule defined by standard Hoare techniques . Following , we see the binding statement \verb | <var:c2> := <var:c2> * <nat:7> ; | . This advances $ \{ <var:I> = <var:Z> \land <var:c1> = <nat:4> \cdot <var:Z> \land <var:c2> = <var:Z> ^ <nat:2> \land <var:c0> = <nat:7> \} $ into the postcondition $ \{ <var:I> = <var:Z> \land <var:c1> = <nat:4> \cdot <var:Z> \land <var:c2> = <nat:7> \cdot <var:Z> ^ <nat:2> \land <var:c0> = <nat:7> \} $ . This is guaranteed by the assignment rule of standard Hoare reasoning . Now , the environment update command letting $ <var:c2$ to $ <var:t>$ . This advances the condition $ \{ <var:I> = <var:Z> \land <var:c1> = <nat:4> \cdot <var:Z> \land <var:c2> = <nat:7> \cdot <var:Z> ^ <nat:2> \land <var:c0> = <nat:7> \} $ as the postcondition $ \{ <var:I> = <var:Z> \land <var:c1> = <nat:4> \cdot <var:Z> \land <var:c0> = <nat:7> \land <var:t> = <nat:7> \cdot <var:Z> ^ <nat:2> \} $ . Taking a look at the following line contained in the series of commands , we see the variable binding command yielding $ <var:t> + <var:c1$ into $ <var:t>$ . This takes the precondition $ \{ <var:I> = <var:Z> \land <var:c1> = <nat:4> \cdot <var:Z> \land <var:c0> = <nat:7> \land <var:t> = <nat:7> \cdot <var:Z> ^ <nat:2> \} $ to $ \{ <var:I> = <var:Z> \land <var:c0> = <nat:7> \land <var:t> = <nat:7> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> \} $ . Moving forward to the subsequent statement in our code segment , the statement giving $ <var:t> + <var:c0$ toward $ <var:t>$ . This advances the condition $ \{ <var:I> = <var:Z> \land <var:c0> = <nat:7> \land <var:t> = <nat:7> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> \} $ as $ \{ <var:I> = <var:Z> \land <var:t> = <nat:7> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Definition <def:poly> := <var:c1> := <var:I> ; <var:c2> := <var:c1> * <var:I> ; <var:c0> := <nat:7> ; <var:c1> := <var:c1> * <nat:4> ; <var:c2> := <var:c2> * <nat:7> ; <var:t> := <var:c2> <var:t> := <var:t> + <var:c1> <var:t> := <var:t> + <var:c0> . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:I> = <var:Z> }} <def:poly> {{ <var:t> = <nat:7> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:c1> = <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:c1> = <var:Z> /\ <var:c2> = <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:c1> = <var:Z> /\ <var:c2> = <var:Z> ^ <nat:2> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:c1> = <nat:4> * <var:Z> /\ <var:c2> = <var:Z> ^ <nat:2> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:c1> = <nat:4> * <var:Z> /\ <var:c2> = <nat:7> * <var:Z> ^ <nat:2> /\ <var:c0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:c1> = <nat:4> * <var:Z> /\ <var:c0> = <nat:7> /\ <var:t> = <nat:7> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:c0> = <nat:7> /\ <var:t> = <nat:7> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Z> /\ <var:t> = <nat:7> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 