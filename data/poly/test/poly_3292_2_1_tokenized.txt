\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:2> ; <var:K> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> in \emph{Imp} . Allow $ <var:i> = <var:I> $ before executing this set of commands it holds that $ <var:K> = <nat:2> $ once set of instructions exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:I> \} \\ <var:v0> := <nat:2> ; \\ \{ <var:i> = <var:I> \land <var:v0> = <nat:2> \} \\ <var:K> := <var:v0> \\ \{ <var:i> = <var:I> \land <var:K> = <nat:2> \} \end{eqnarray} Applying typical Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:2> ; <var:K> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:i> = <var:I> }} <def:poly> {{ <var:K> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:I> /\ <var:K> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 