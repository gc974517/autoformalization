\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:h> := <nat:4> ; <var:h> := <nat:2> + <var:h> * <var:V> ; <var:h> := <nat:3> + <var:h> * <var:V> ; <var:h> := <nat:2> + <var:h> * <var:V> ; <var:h> := <nat:4> + <var:h> * <var:V> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Given that we have $ <var:V> = <var:B> $ ahead of executing this segment of code then $ <var:h> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of this segment of code can be accomplished through standard Hoare reasoning . Advancing to the subsequent command in our segment of code , we have the binding code \verb | <var:h> := <nat:4> ; | . This code transfers $ \{ <var:V> = <var:B> \} $ toward the condition $ \{ <var:V> = <var:B> \land <var:h> = <nat:4> \} $ . Taking another step toward the subsequent line found in the set of instructions , the statement assigning $ <nat:2> + <var:h> * <var:V> $ to $ <var:h>$ . This statement takes $ \{ <var:V> = <var:B> \land <var:h> = <nat:4> \} $ into $ \{ <var:V> = <var:B> \land <var:h> = <nat:4> * <var:B> + <nat:2> \} $ . Moving forward to the upcoming line found in our series of commands , the line \verb | <var:h> := <nat:3> + <var:h> * <var:V> ; | . This code moves the condition $ \{ <var:V> = <var:B> \land <var:h> = <nat:4> * <var:B> + <nat:2> \} $ into the postcondition $ \{ <var:V> = <var:B> \land <var:h> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> \} $ . This is guaranteed using the assignment inference rule in standard Hoare techniques . Focusing on the proceeding piece of code found in our series of instructions , the variable update code \verb | <var:h> := <nat:2> + <var:h> * <var:V> ; | . This line advances the precondition $ \{ <var:V> = <var:B> \land <var:h> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> \} $ into the condition $ \{ <var:V> = <var:B> \land <var:h> = <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> \} $ . Paying attention to the subsequent bit of code found in our code segment , we see the assignment statement letting $ <nat:4> + <var:h> * <var:V$ as $ <var:h>$ . This transfers the condition $ \{ <var:V> = <var:B> \land <var:h> = <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> \} $ into $ \{ <var:V> = <var:B> \land <var:h> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:h> := <nat:4> ; <var:h> := <nat:2> + <var:h> * <var:V> ; <var:h> := <nat:3> + <var:h> * <var:V> ; <var:h> := <nat:2> + <var:h> * <var:V> ; <var:h> := <nat:4> + <var:h> * <var:V> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:V> = <var:B> }} <def:poly> {{ <var:h> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:h> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:h> = <nat:4> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:h> = <nat:4> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:h> = <nat:4> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:B> /\ <var:h> = <nat:4> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 