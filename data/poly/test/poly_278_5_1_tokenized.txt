\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:d1> := <var:X> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:9> ; <var:V> := <var:d1> <var:V> := <var:V> + <var:d0> \end{verbatim} \end{definition} \begin{theorem} Given that $ <var:X> = <var:Y> $ --- for all $ <var:Y> \in \mathbb{Z}^+ $ --- prior to interpreting the code , it holds that we see $ <var:V> = <nat:9> \times <var:Y> + <nat:3> $ when segment of code exits . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning gives us : \begin{eqnarray} \{ <var:X> = <var:Y> \} \\ <var:d1> := <var:X> ; \\ \{ <var:X> = <var:Y> \land <var:d1> = <var:Y> \} \\ <var:d0> := <nat:3> ; \\ \{ <var:X> = <var:Y> \land <var:d1> = <var:Y> \land <var:d0> = <nat:3> \} \\ <var:d1> := <var:d1> * <nat:9> ; \\ \{ <var:X> = <var:Y> \land <var:d1> = <nat:9> \times <var:Y> \land <var:d0> = <nat:3> \} \\ <var:V> := <var:d1> \\ \{ <var:X> = <var:Y> \land <var:d0> = <nat:3> \land <var:V> = <nat:9> \times <var:Y> \} \\ <var:V> := <var:V> + <var:d0> \\ \{ <var:X> = <var:Y> \land <var:V> = <nat:9> \times <var:Y> + <nat:3> \} \end{eqnarray} Given the preceding argument , this list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <def:poly> := <var:d1> := <var:X> ; <var:d0> := <nat:3> ; <var:d1> := <var:d1> * <nat:9> ; <var:V> := <var:d1> <var:V> := <var:V> + <var:d0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:X> = <var:Y> }} <def:poly> {{ <var:V> = <nat:9> * <var:Y> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:d1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:d1> = <var:Y> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:d1> = <nat:9> * <var:Y> /\ <var:d0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:d0> = <nat:3> /\ <var:V> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Y> /\ <var:V> = <nat:9> * <var:Y> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 