\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:2> ; <var:w1> := <nat:1> ; <var:w1> := <var:w1> * <var:u> ; <var:w2> := <nat:8> ; <var:w2> := <var:w2> * <var:u> ; <var:w2> := <var:w2> * <var:u> ; <var:w3> := <nat:1> ; <var:w3> := <var:w3> * <var:u> ; <var:w3> := <var:w3> * <var:u> ; <var:w3> := <var:w3> * <var:u> ; <var:Y> := <var:w3> ; <var:Y> := <var:Y> + <var:w2> ; <var:Y> := <var:Y> + <var:w1> ; <var:Y> := <var:Y> + <var:w0> \end{verbatim} Allow $ <var:u> = <var:c> $ before interpreting this code , it follows that we have $ <var:Y> = <nat:1> * <var:c> ^ <nat:3> + <nat:8> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:u> = <var:c> \} \\ <var:w0> := <nat:2> ; \\ \{ <var:u> = <var:c> \land <var:w0> = <nat:2> \} \end{eqnarray} Allowing running the segment of code gives us : \begin{eqnarray} <var:w1> := <nat:1> ; \\ \{ <var:u> = <var:c> \land <var:w0> = <nat:2> \land <var:w1> = <nat:1> \} \\ <var:w1> := <var:w1> * <var:u> ; \\ \{ <var:u> = <var:c> \land <var:w0> = <nat:2> \land <var:w1> = <nat:1> \times <var:c> \} \\ <var:w2> := <nat:8> ; \\ \{ <var:u> = <var:c> \land <var:w0> = <nat:2> \land <var:w1> = <nat:1> \times <var:c> \land <var:w2> = <nat:8> \} \\ <var:w2> := <var:w2> * <var:u> ; \\ \{ <var:u> = <var:c> \land <var:w0> = <nat:2> \land <var:w1> = <nat:1> \times <var:c> \land <var:w2> = <nat:8> \times <var:c> \} \\ <var:w2> := <var:w2> * <var:u> ; \\ \{ <var:u> = <var:c> \land <var:w0> = <nat:2> \land <var:w1> = <nat:1> \times <var:c> \land <var:w2> = <nat:8> \times <var:c> ^ <nat:2> \} \\ <var:w3> := <nat:1> ; \\ \{ <var:u> = <var:c> \land <var:w0> = <nat:2> \land <var:w1> = <nat:1> \times <var:c> \land <var:w2> = <nat:8> \times <var:c> ^ <nat:2> \land <var:w3> = <nat:1> \} \\ <var:w3> := <var:w3> * <var:u> ; \\ \{ <var:u> = <var:c> \land <var:w0> = <nat:2> \land <var:w1> = <nat:1> \times <var:c> \land <var:w2> = <nat:8> \times <var:c> ^ <nat:2> \land <var:w3> = <nat:1> \times <var:c> \} \end{eqnarray} Allowing the execution of our segment of code yields : \begin{eqnarray} <var:w3> := <var:w3> * <var:u> ; \\ \{ <var:u> = <var:c> \land <var:w0> = <nat:2> \land <var:w1> = <nat:1> \times <var:c> \land <var:w2> = <nat:8> \times <var:c> ^ <nat:2> \land <var:w3> = <nat:1> \times <var:c> ^ <nat:2> \} \\ <var:w3> := <var:w3> * <var:u> ; \\ \{ <var:u> = <var:c> \land <var:w0> = <nat:2> \land <var:w1> = <nat:1> \times <var:c> \land <var:w2> = <nat:8> \times <var:c> ^ <nat:2> \land <var:w3> = <nat:1> \times <var:c> ^ <nat:3> \} \\ <var:Y> := <var:w3> ; \\ \{ <var:u> = <var:c> \land <var:w0> = <nat:2> \land <var:w1> = <nat:1> \times <var:c> \land <var:w2> = <nat:8> \times <var:c> ^ <nat:2> \land <var:Y> = <nat:1> \times <var:c> ^ <nat:3> \} \\ <var:Y> := <var:Y> + <var:w2> ; \\ \{ <var:u> = <var:c> \land <var:w0> = <nat:2> \land <var:w1> = <nat:1> \times <var:c> \land <var:Y> = <nat:1> \times <var:c> ^ <nat:3> + <nat:8> \times <var:c> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:w1> ; \\ \{ <var:u> = <var:c> \land <var:w0> = <nat:2> \land <var:Y> = <nat:1> \times <var:c> ^ <nat:3> + <nat:8> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> \} \\ <var:Y> := <var:Y> + <var:w0> \\ \{ <var:u> = <var:c> \land <var:Y> = <nat:1> \times <var:c> ^ <nat:3> + <nat:8> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + <nat:2> \} \end{eqnarray} The application of Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:u> = <var:c> }} <var:w0> := <nat:2> ; <var:w1> := <nat:1> ; <var:w1> := <var:w1> * <var:u> ; <var:w2> := <nat:8> ; <var:w2> := <var:w2> * <var:u> ; <var:w2> := <var:w2> * <var:u> ; <var:w3> := <nat:1> ; <var:w3> := <var:w3> * <var:u> ; <var:w3> := <var:w3> * <var:u> ; <var:w3> := <var:w3> * <var:u> ; <var:Y> := <var:w3> ; <var:Y> := <var:Y> + <var:w2> ; <var:Y> := <var:Y> + <var:w1> ; <var:Y> := <var:Y> + <var:w0> {{ <var:Y> = <nat:1> * <var:c> ^ <nat:3> + <nat:8> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:w0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:1> * <var:c> /\ <var:w2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:1> * <var:c> /\ <var:w2> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:1> * <var:c> /\ <var:w2> = <nat:8> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:1> * <var:c> /\ <var:w2> = <nat:8> * <var:c> ^ <nat:2> /\ <var:w3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:1> * <var:c> /\ <var:w2> = <nat:8> * <var:c> ^ <nat:2> /\ <var:w3> = <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:1> * <var:c> /\ <var:w2> = <nat:8> * <var:c> ^ <nat:2> /\ <var:w3> = <nat:1> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:1> * <var:c> /\ <var:w2> = <nat:8> * <var:c> ^ <nat:2> /\ <var:w3> = <nat:1> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:1> * <var:c> /\ <var:w2> = <nat:8> * <var:c> ^ <nat:2> /\ <var:Y> = <nat:1> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:w0> = <nat:2> /\ <var:w1> = <nat:1> * <var:c> /\ <var:Y> = <nat:1> * <var:c> ^ <nat:3> + <nat:8> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:w0> = <nat:2> /\ <var:Y> = <nat:1> * <var:c> ^ <nat:3> + <nat:8> * <var:c> ^ <nat:2> + <nat:1> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:u> = <var:c> /\ <var:Y> = <nat:1> * <var:c> ^ <nat:3> + <nat:8> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 