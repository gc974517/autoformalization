\begin{document} \begin{theorem} We define the following segment of code as follows \begin{verbatim} <var:i1> := <var:n> ; <var:i2> := <var:i1> * <var:n> ; <var:i3> := <var:i2> * <var:n> ; <var:i4> := <var:i3> * <var:n> ; <var:i0> := <nat:4> ; <var:i3> := <var:i3> * <nat:1> ; <var:i4> := <var:i4> * <nat:4> ; <var:M> := <var:i4> <var:M> := <var:M> + <var:i3> <var:M> := <var:M> + <var:i0> \end{verbatim} Allow that $ <var:n> = <var:D> $ ( assuming some positive integers $ <var:D> $ ) before the evaluation of the program it must be that $ <var:M> = <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the program is shown by standard Hoare techniques . Moving on , the assignment command \verb | <var:i1> := <var:n> ; | . This redefines $ \{ <var:n> = <var:D> \} $ to the postcondition $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \} $ . This is shown to be logically sound through the assignment scheme defined by standard Hoare techniques . Jumping to the subsequent line of code in the list of instructions , we have the variable update command \verb | <var:i2> := <var:i1> * <var:n> ; | . This forwards $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \} $ toward $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \} $ . Moving on to the next step , we have the binding statement \verb | <var:i3> := <var:i2> * <var:n> ; | . This forwards $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \} $ as $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \} $ . This is known to be sound with the assignment law found in typical Hoare techniques . Jumping to the proceeding bit of code in our set of commands , the variable assignmet statement binding $ <var:i3> * <var:n> $ as $ <var:i4>$ . This advances the precondition $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \} $ into the condition $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \land <var:i4> = <var:D> ^ <nat:4> \} $ . Honing in on the proceeding command contained in our series of commands , we see the variable update line \verb | <var:i0> := <nat:4> ; | . This forwards the precondition $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \land <var:i4> = <var:D> ^ <nat:4> \} $ toward $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \land <var:i4> = <var:D> ^ <nat:4> \land <var:i0> = <nat:4> \} $ . Observing the next command contained in our set of commands , we see the binding code defining $ <var:i3> * <nat:1> $ toward $ <var:i3>$ . This forwards $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <var:D> ^ <nat:3> \land <var:i4> = <var:D> ^ <nat:4> \land <var:i0> = <nat:4> \} $ to the condition $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <nat:1> * <var:D> ^ <nat:3> \land <var:i4> = <var:D> ^ <nat:4> \land <var:i0> = <nat:4> \} $ . This is guaranteed by the assignment scheme defined in standard Hoare logic . After , we see the environment update line letting $ <var:i4> * <nat:4> $ toward $ <var:i4>$ . This moves the condition $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <nat:1> * <var:D> ^ <nat:3> \land <var:i4> = <var:D> ^ <nat:4> \land <var:i0> = <nat:4> \} $ into the condition $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <nat:1> * <var:D> ^ <nat:3> \land <var:i4> = <nat:4> * <var:D> ^ <nat:4> \land <var:i0> = <nat:4> \} $ . This is guaranteed with the assignment law obtained from usual Hoare logic . Taking a look at the next line of code contained in the code segment , the variable assignmet code yielding $ <var:i4$ to $ <var:M>$ . This code forwards the precondition $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <nat:1> * <var:D> ^ <nat:3> \land <var:i4> = <nat:4> * <var:D> ^ <nat:4> \land <var:i0> = <nat:4> \} $ toward $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <nat:1> * <var:D> ^ <nat:3> \land <var:i0> = <nat:4> \land <var:M> = <nat:4> * <var:D> ^ <nat:4> \} $ . Moving on to the next step , we see the variable update statement letting $ <var:M> + <var:i3$ toward $ <var:M>$ . This transfers the condition $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i3> = <nat:1> * <var:D> ^ <nat:3> \land <var:i0> = <nat:4> \land <var:M> = <nat:4> * <var:D> ^ <nat:4> \} $ as the condition $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i0> = <nat:4> \land <var:M> = <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> \} $ . Moving on to the following line of code seen in the set of instructions , we see the variable update command \verb | <var:M> := <var:M> + <var:i0> | . This statement redefines $ \{ <var:n> = <var:D> \land <var:i1> = <var:D> \land <var:i2> = <var:D> ^ <nat:2> \land <var:i0> = <nat:4> \land <var:M> = <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> \} $ to the condition $ \{ <var:n> = <var:D> \land <var:M> = <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <var:i4> : string := " <var:i4> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:n> = <var:D> }} <var:i1> := <var:n> ; <var:i2> := <var:i1> * <var:n> ; <var:i3> := <var:i2> * <var:n> ; <var:i4> := <var:i3> * <var:n> ; <var:i0> := <nat:4> ; <var:i3> := <var:i3> * <nat:1> ; <var:i4> := <var:i4> * <nat:4> ; <var:M> := <var:i4> <var:M> := <var:M> + <var:i3> <var:M> := <var:M> + <var:i0> {{ <var:M> = <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:i1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:i1> = <var:D> /\ <var:i2> = <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:i1> = <var:D> /\ <var:i2> = <var:D> ^ <nat:2> /\ <var:i3> = <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:i1> = <var:D> /\ <var:i2> = <var:D> ^ <nat:2> /\ <var:i3> = <var:D> ^ <nat:3> /\ <var:i4> = <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:i1> = <var:D> /\ <var:i2> = <var:D> ^ <nat:2> /\ <var:i3> = <var:D> ^ <nat:3> /\ <var:i4> = <var:D> ^ <nat:4> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:i1> = <var:D> /\ <var:i2> = <var:D> ^ <nat:2> /\ <var:i3> = <nat:1> * <var:D> ^ <nat:3> /\ <var:i4> = <var:D> ^ <nat:4> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:i1> = <var:D> /\ <var:i2> = <var:D> ^ <nat:2> /\ <var:i3> = <nat:1> * <var:D> ^ <nat:3> /\ <var:i4> = <nat:4> * <var:D> ^ <nat:4> /\ <var:i0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:i1> = <var:D> /\ <var:i2> = <var:D> ^ <nat:2> /\ <var:i3> = <nat:1> * <var:D> ^ <nat:3> /\ <var:i0> = <nat:4> /\ <var:M> = <nat:4> * <var:D> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:i1> = <var:D> /\ <var:i2> = <var:D> ^ <nat:2> /\ <var:i0> = <nat:4> /\ <var:M> = <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:D> /\ <var:M> = <nat:4> * <var:D> ^ <nat:4> + <nat:1> * <var:D> ^ <nat:3> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 