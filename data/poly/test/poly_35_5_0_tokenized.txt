\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:T0> := <nat:5> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:o> ; <var:Q> := <var:T1> ; <var:Q> := <var:Q> + <var:T0> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Given $ <var:o> = <var:P> $ taking integers $ <var:P> $ ahead of executing our set of commands , then $ <var:Q> = <nat:4> \cdot <var:P> + <nat:5> $ once series of instructions terminates . \end{theorem} \begin{proof} The argument for our list of instructions is done with this decorated set of commands . \begin{eqnarray} \{ <var:o> = <var:P> \} \\ <var:T0> := <nat:5> ; \\ \{ <var:o> = <var:P> \land <var:T0> = <nat:5> \} \\ <var:T1> := <nat:4> ; \\ \{ <var:o> = <var:P> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \} \\ <var:T1> := <var:T1> * <var:o> ; \\ \{ <var:o> = <var:P> \land <var:T0> = <nat:5> \land <var:T1> = <nat:4> \times <var:P> \} \\ <var:Q> := <var:T1> ; \\ \{ <var:o> = <var:P> \land <var:T0> = <nat:5> \land <var:Q> = <nat:4> \times <var:P> \} \\ <var:Q> := <var:Q> + <var:T0> \\ \{ <var:o> = <var:P> \land <var:Q> = <nat:4> \times <var:P> + <nat:5> \} \end{eqnarray} Using usual Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <def:poly> := <var:T0> := <nat:5> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:o> ; <var:Q> := <var:T1> ; <var:Q> := <var:Q> + <var:T0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:o> = <var:P> }} <def:poly> {{ <var:Q> = <nat:4> * <var:P> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:T0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:T0> = <nat:5> /\ <var:T1> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:T0> = <nat:5> /\ <var:Q> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:P> /\ <var:Q> = <nat:4> * <var:P> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 