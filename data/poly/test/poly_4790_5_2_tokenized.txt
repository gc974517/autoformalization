\begin{document} \begin{theorem} Consider a list of instructions in \emph{Imp} : \begin{verbatim} <var:w> := <nat:4> ; <var:w> := <nat:1> + <var:w> * <var:M> ; <var:w> := <nat:2> + <var:w> * <var:M> ; <var:w> := <nat:3> + <var:w> * <var:M> ; <var:w> := <nat:4> + <var:w> * <var:M> \end{verbatim} Assuming for every positive numbers $ <var:B> $ $ <var:M> = <var:B> $ ahead of interpreting our series of commands it must be that we have $ <var:w> = <nat:4> \cdot <var:B> ^ <nat:4> + <nat:1> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:M> = <var:B> \} \\ <var:w> := <nat:4> ; \\ \{ <var:M> = <var:B> \land <var:w> = <nat:4> \} \\ <var:w> := <nat:1> + <var:w> * <var:M> ; \\ \{ <var:M> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> + <nat:1> \} \\ <var:w> := <nat:2> + <var:w> * <var:M> ; \\ \{ <var:M> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:2> + <nat:1> \cdot <var:B> + <nat:2> \} \\ <var:w> := <nat:3> + <var:w> * <var:M> ; \\ \{ <var:M> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:3> + <nat:1> \cdot <var:B> ^ <nat:2> + <nat:2> \cdot <var:B> + <nat:3> \} \\ <var:w> := <nat:4> + <var:w> * <var:M> \\ \{ <var:M> = <var:B> \land <var:w> = <nat:4> \cdot <var:B> ^ <nat:4> + <nat:1> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:3> \cdot <var:B> + <nat:4> \} \end{eqnarray} Using usual Hoare logic finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:M> = <var:B> }} <var:w> := <nat:4> ; <var:w> := <nat:1> + <var:w> * <var:M> ; <var:w> := <nat:2> + <var:w> * <var:M> ; <var:w> := <nat:3> + <var:w> * <var:M> ; <var:w> := <nat:4> + <var:w> * <var:M> {{ <var:w> = <nat:4> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:w> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:w> = <nat:4> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:w> = <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:w> = <nat:4> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:B> /\ <var:w> = <nat:4> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 