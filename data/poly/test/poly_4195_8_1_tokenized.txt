\begin{document} \begin{theorem} Define a series of commands : \begin{verbatim} <var:K1> := <var:c> ; <var:K2> := <var:K1> * <var:c> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:5> ; <var:K2> := <var:K2> * <nat:7> ; <var:o> := <var:K2> <var:o> := <var:o> + <var:K1> <var:o> := <var:o> + <var:K0> \end{verbatim} Assume that $ <var:c> = <var:J> $ --- for all positive integer coefficients $ <var:J> $ --- before executing the set of commands it follows that $ <var:o> = <nat:7> \times <var:J> ^ <nat:2> + <nat:5> \times <var:J> + <nat:9> $ . \end{theorem} \begin{proof} Using Hoare logic returns : \begin{eqnarray} \{ <var:c> = <var:J> \} \\ <var:K1> := <var:c> ; \\ \{ <var:c> = <var:J> \land <var:K1> = <var:J> \} \\ <var:K2> := <var:K1> * <var:c> ; \\ \{ <var:c> = <var:J> \land <var:K1> = <var:J> \land <var:K2> = <var:J> ^ <nat:2> \} \\ <var:K0> := <nat:9> ; \\ \{ <var:c> = <var:J> \land <var:K1> = <var:J> \land <var:K2> = <var:J> ^ <nat:2> \land <var:K0> = <nat:9> \} \\ <var:K1> := <var:K1> * <nat:5> ; \\ \{ <var:c> = <var:J> \land <var:K1> = <nat:5> * <var:J> \land <var:K2> = <var:J> ^ <nat:2> \land <var:K0> = <nat:9> \} \\ <var:K2> := <var:K2> * <nat:7> ; \\ \{ <var:c> = <var:J> \land <var:K1> = <nat:5> * <var:J> \land <var:K2> = <nat:7> * <var:J> ^ <nat:2> \land <var:K0> = <nat:9> \} \\ <var:o> := <var:K2> \\ \{ <var:c> = <var:J> \land <var:K1> = <nat:5> * <var:J> \land <var:K0> = <nat:9> \land <var:o> = <nat:7> * <var:J> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:K1> \\ \{ <var:c> = <var:J> \land <var:K0> = <nat:9> \land <var:o> = <nat:7> * <var:J> ^ <nat:2> + <nat:5> * <var:J> \} \\ <var:o> := <var:o> + <var:K0> \\ \{ <var:c> = <var:J> \land <var:o> = <nat:7> * <var:J> ^ <nat:2> + <nat:5> * <var:J> + <nat:9> \} \end{eqnarray} Considering the preceding argument , the segment of code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:c> = <var:J> }} <var:K1> := <var:c> ; <var:K2> := <var:K1> * <var:c> ; <var:K0> := <nat:9> ; <var:K1> := <var:K1> * <nat:5> ; <var:K2> := <var:K2> * <nat:7> ; <var:o> := <var:K2> <var:o> := <var:o> + <var:K1> <var:o> := <var:o> + <var:K0> {{ <var:o> = <nat:7> * <var:J> ^ <nat:2> + <nat:5> * <var:J> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:K1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:K1> = <var:J> /\ <var:K2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:K1> = <var:J> /\ <var:K2> = <var:J> ^ <nat:2> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:K1> = <nat:5> * <var:J> /\ <var:K2> = <var:J> ^ <nat:2> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:K1> = <nat:5> * <var:J> /\ <var:K2> = <nat:7> * <var:J> ^ <nat:2> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:K1> = <nat:5> * <var:J> /\ <var:K0> = <nat:9> /\ <var:o> = <nat:7> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:K0> = <nat:9> /\ <var:o> = <nat:7> * <var:J> ^ <nat:2> + <nat:5> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:J> /\ <var:o> = <nat:7> * <var:J> ^ <nat:2> + <nat:5> * <var:J> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 