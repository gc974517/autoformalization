\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:5> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:I> ; <var:g2> := <nat:1> ; <var:g2> := <var:g2> * <var:I> ; <var:g2> := <var:g2> * <var:I> ; <var:O> := <var:g2> ; <var:O> := <var:O> + <var:g1> ; <var:O> := <var:O> + <var:g0> \end{verbatim} Assume it to hold that $ <var:I> = <var:Q> $ for every positive integer coefficients $ <var:Q> $ prior to evaluating our code , then $ <var:O> = <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:Q> \} \\ <var:g0> := <nat:5> ; \\ \{ <var:I> = <var:Q> \land <var:g0> = <nat:5> \} \\ <var:g1> := <nat:4> ; \\ \{ <var:I> = <var:Q> \land <var:g0> = <nat:5> \land <var:g1> = <nat:4> \} \\ <var:g1> := <var:g1> * <var:I> ; \\ \{ <var:I> = <var:Q> \land <var:g0> = <nat:5> \land <var:g1> = <nat:4> \cdot <var:Q> \} \\ <var:g2> := <nat:1> ; \\ \{ <var:I> = <var:Q> \land <var:g0> = <nat:5> \land <var:g1> = <nat:4> \cdot <var:Q> \land <var:g2> = <nat:1> \} \\ <var:g2> := <var:g2> * <var:I> ; \\ \{ <var:I> = <var:Q> \land <var:g0> = <nat:5> \land <var:g1> = <nat:4> \cdot <var:Q> \land <var:g2> = <nat:1> \cdot <var:Q> \} \\ <var:g2> := <var:g2> * <var:I> ; \\ \{ <var:I> = <var:Q> \land <var:g0> = <nat:5> \land <var:g1> = <nat:4> \cdot <var:Q> \land <var:g2> = <nat:1> \cdot <var:Q> ^ <nat:2> \} \\ <var:O> := <var:g2> ; \\ \{ <var:I> = <var:Q> \land <var:g0> = <nat:5> \land <var:g1> = <nat:4> \cdot <var:Q> \land <var:O> = <nat:1> \cdot <var:Q> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:g1> ; \\ \{ <var:I> = <var:Q> \land <var:g0> = <nat:5> \land <var:O> = <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> \} \\ <var:O> := <var:O> + <var:g0> \\ \{ <var:I> = <var:Q> \land <var:O> = <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:5> \} \end{eqnarray} The application of typical Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:I> = <var:Q> }} <var:g0> := <nat:5> ; <var:g1> := <nat:4> ; <var:g1> := <var:g1> * <var:I> ; <var:g2> := <nat:1> ; <var:g2> := <var:g2> * <var:I> ; <var:g2> := <var:g2> * <var:I> ; <var:O> := <var:g2> ; <var:O> := <var:O> + <var:g1> ; <var:O> := <var:O> + <var:g0> {{ <var:O> = <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:g0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:g0> = <nat:5> /\ <var:g1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:g0> = <nat:5> /\ <var:g1> = <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:g0> = <nat:5> /\ <var:g1> = <nat:4> * <var:Q> /\ <var:g2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:g0> = <nat:5> /\ <var:g1> = <nat:4> * <var:Q> /\ <var:g2> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:g0> = <nat:5> /\ <var:g1> = <nat:4> * <var:Q> /\ <var:g2> = <nat:1> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:g0> = <nat:5> /\ <var:g1> = <nat:4> * <var:Q> /\ <var:O> = <nat:1> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:g0> = <nat:5> /\ <var:O> = <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:Q> /\ <var:O> = <nat:1> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 