\begin{document} \begin{theorem} Define the following list of commands such that \begin{verbatim} <var:X0> := <nat:6> ; <var:U> := <var:X0> \end{verbatim} Given it to hold that $ <var:H> = <var:n> $ before the evaluation of the series of instructions it holds that we see $ <var:U> = <nat:6> $ after set of commands is done executing . \end{theorem} \begin{proof} The proof of our list of commands is done by typical Hoare techniques . Following , we see the variable assignmet line \verb | <var:X0> := <nat:6> ; | . This line redefines the precondition $ \{ <var:H> = <var:n> \} $ to the condition $ \{ <var:H> = <var:n> \land <var:X0> = <nat:6> \} $ . This is deduced through the assignment inference rule from standard Hoare techniques . Stepping forward , we have the assignment line yielding $ <var:X0$ into $ <var:U>$ . This command transfers the condition $ \{ <var:H> = <var:n> \land <var:X0> = <nat:6> \} $ as $ \{ <var:H> = <var:n> \land <var:U> = <nat:6> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:X0> : string := " <var:X0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:H> = <var:n> }} <var:X0> := <nat:6> ; <var:U> := <var:X0> {{ <var:U> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:X0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:n> /\ <var:U> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 