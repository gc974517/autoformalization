\begin{document} \begin{definition} Let the following series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:8> ; <var:y1> := <nat:6> ; <var:y1> := <var:y1> * <var:w> ; <var:y2> := <nat:7> ; <var:y2> := <var:y2> * <var:w> ; <var:y2> := <var:y2> * <var:w> ; <var:O> := <var:y2> ; <var:O> := <var:O> + <var:y1> ; <var:O> := <var:O> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Allowing $ <var:w> = <var:I> $ prior to running this program it must be that $ <var:O> = <nat:7> \cdot <var:I> ^ <nat:2> + <nat:6> \cdot <var:I> + <nat:8> $ . \end{theorem} \begin{proof} The proof of this set of commands can be seen through usual Hoare logic . Observing the next line found in the list of instructions , we see the variable binding statement \verb | <var:y0> := <nat:8> ; | . This statement forwards $ \{ <var:w> = <var:I> \} $ as $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \} $ . Moving on to the proceeding line contained in our code segment , we see the variable binding command yielding $ <nat:6> $ toward $ <var:y1>$ . This forwards the condition $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \} $ into the condition $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:y1> = <nat:6> \} $ . This is ensured with the assignment inference rule given in usual Hoare reasoning . Advancing , we have the variable update statement giving $ <var:y1> * <var:w> $ to $ <var:y1>$ . This line transfers the precondition $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:y1> = <nat:6> \} $ into the condition $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:y1> = <nat:6> \cdot <var:I> \} $ . This is deduced with the assignment rule defined by Hoare techniques . Shifting focus toward the following statement found in the code , the variable assignmet statement assigning $ <nat:7> $ into $ <var:y2>$ . This forwards $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:y1> = <nat:6> \cdot <var:I> \} $ as the postcondition $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:y1> = <nat:6> \cdot <var:I> \land <var:y2> = <nat:7> \} $ . Jumping to the upcoming command contained in our list of commands , we see the variable assignmet line \verb | <var:y2> := <var:y2> * <var:w> ; | . This redefines the precondition $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:y1> = <nat:6> \cdot <var:I> \land <var:y2> = <nat:7> \} $ toward the condition $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:y1> = <nat:6> \cdot <var:I> \land <var:y2> = <nat:7> \cdot <var:I> \} $ . This is shown to be logically sound through the assignment law found in standard Hoare reasoning . Taking a look at the following line found in our segment of code , the variable binding command binding $ <var:y2> * <var:w> $ into $ <var:y2>$ . This line transfers the condition $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:y1> = <nat:6> \cdot <var:I> \land <var:y2> = <nat:7> \cdot <var:I> \} $ toward $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:y1> = <nat:6> \cdot <var:I> \land <var:y2> = <nat:7> \cdot <var:I> ^ <nat:2> \} $ . Focusing on the next statement found in our series of commands , we have the binding statement \verb | <var:O> := <var:y2> ; | . This line moves the precondition $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:y1> = <nat:6> \cdot <var:I> \land <var:y2> = <nat:7> \cdot <var:I> ^ <nat:2> \} $ toward $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:y1> = <nat:6> \cdot <var:I> \land <var:O> = <nat:7> \cdot <var:I> ^ <nat:2> \} $ . Focusing on the next line found in the set of commands , we have the variable assignmet line \verb | <var:O> := <var:O> + <var:y1> ; | . This statement forwards the precondition $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:y1> = <nat:6> \cdot <var:I> \land <var:O> = <nat:7> \cdot <var:I> ^ <nat:2> \} $ into the condition $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:O> = <nat:7> \cdot <var:I> ^ <nat:2> + <nat:6> \cdot <var:I> \} $ . This is given using the assignment inference rule given in typical Hoare reasoning . Focusing on the upcoming line in the code , the assignment statement \verb | <var:O> := <var:O> + <var:y0> | . This code transfers the condition $ \{ <var:w> = <var:I> \land <var:y0> = <nat:8> \land <var:O> = <nat:7> \cdot <var:I> ^ <nat:2> + <nat:6> \cdot <var:I> \} $ as $ \{ <var:w> = <var:I> \land <var:O> = <nat:7> \cdot <var:I> ^ <nat:2> + <nat:6> \cdot <var:I> + <nat:8> \} $ . This is known to be sound with the assignment law obtained from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <def:poly> := <var:y0> := <nat:8> ; <var:y1> := <nat:6> ; <var:y1> := <var:y1> * <var:w> ; <var:y2> := <nat:7> ; <var:y2> := <var:y2> * <var:w> ; <var:y2> := <var:y2> * <var:w> ; <var:O> := <var:y2> ; <var:O> := <var:O> + <var:y1> ; <var:O> := <var:O> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:w> = <var:I> }} <def:poly> {{ <var:O> = <nat:7> * <var:I> ^ <nat:2> + <nat:6> * <var:I> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:y0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:6> * <var:I> /\ <var:y2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:6> * <var:I> /\ <var:y2> = <nat:7> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:6> * <var:I> /\ <var:y2> = <nat:7> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:y0> = <nat:8> /\ <var:y1> = <nat:6> * <var:I> /\ <var:O> = <nat:7> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:y0> = <nat:8> /\ <var:O> = <nat:7> * <var:I> ^ <nat:2> + <nat:6> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:O> = <nat:7> * <var:I> ^ <nat:2> + <nat:6> * <var:I> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 