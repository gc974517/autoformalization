\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:4> ; <var:p> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Given $ <var:d> = <var:t> $ ahead of executing this list of instructions it must be that $ <var:p> = <nat:4> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the set of instructions can be demonstrated with standard Hoare techniques . Going forward , we have the binding statement yielding $ <nat:4> $ toward $ <var:v0>$ . This line takes the condition $ \{ <var:d> = <var:t> \} $ toward the condition $ \{ <var:d> = <var:t> \land <var:v0> = <nat:4> \} $ . This is known to be sound through the assignment law found in typical Hoare techniques . Advancing to the next step , the variable assignmet code \verb | <var:p> := <var:v0> | . This redefines $ \{ <var:d> = <var:t> \land <var:v0> = <nat:4> \} $ toward the condition $ \{ <var:d> = <var:t> \land <var:p> = <nat:4> \} $ . This is shown to be logically sound with the assignment inference rule of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:4> ; <var:p> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:d> = <var:t> }} <def:poly> {{ <var:p> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:v0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:p> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 