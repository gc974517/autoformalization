\begin{document} \begin{theorem} Consider the following code segment in \emph{Imp} as \begin{verbatim} <var:p1> := <var:Q> ; <var:p2> := <var:p1> * <var:Q> ; <var:p3> := <var:p2> * <var:Q> ; <var:p4> := <var:p3> * <var:Q> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:3> ; <var:p2> := <var:p2> * <nat:3> ; <var:p4> := <var:p4> * <nat:2> ; <var:H> := <var:p4> <var:H> := <var:H> + <var:p2> <var:H> := <var:H> + <var:p1> <var:H> := <var:H> + <var:p0> \end{verbatim} Assume $ <var:Q> = <var:P> $ given natural numbers $ <var:P> $ prior to interpreting this list of commands , it holds that we have $ <var:H> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:3> $ after series of instructions exits . \end{theorem} \begin{proof} The argument for the list of instructions is accomplished using standard Hoare techniques . Following , the variable binding statement \verb | <var:p1> := <var:Q> ; | . This statement moves $ \{ <var:Q> = <var:P> \} $ toward the postcondition $ \{ <var:Q> = <var:P> \land <var:p1> = <var:P> \} $ . This is sound using the assignment scheme defined in typical Hoare reasoning . Advancing , we see the binding code giving $ <var:p1> * <var:Q> $ into $ <var:p2>$ . This advances the condition $ \{ <var:Q> = <var:P> \land <var:p1> = <var:P> \} $ to the postcondition $ \{ <var:Q> = <var:P> \land <var:p1> = <var:P> \land <var:p2> = <var:P> ^ <nat:2> \} $ . This is shown to be logically sound using the assignment scheme defined in Hoare techniques . Looking at the next line of code found in the list of instructions , we see the binding statement defining $ <var:p2> * <var:Q> $ toward $ <var:p3>$ . This advances the condition $ \{ <var:Q> = <var:P> \land <var:p1> = <var:P> \land <var:p2> = <var:P> ^ <nat:2> \} $ toward the condition $ \{ <var:Q> = <var:P> \land <var:p1> = <var:P> \land <var:p2> = <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \} $ . Honing in on the next statement seen in our code segment , we have the variable update code \verb | <var:p4> := <var:p3> * <var:Q> ; | . This forwards the condition $ \{ <var:Q> = <var:P> \land <var:p1> = <var:P> \land <var:p2> = <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \} $ into $ \{ <var:Q> = <var:P> \land <var:p1> = <var:P> \land <var:p2> = <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \land <var:p4> = <var:P> ^ <nat:4> \} $ . This is sound by the assignment law in typical Hoare techniques . Stepping through , we have the assignment code assigning $ <nat:3> $ into $ <var:p0>$ . This moves the precondition $ \{ <var:Q> = <var:P> \land <var:p1> = <var:P> \land <var:p2> = <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \land <var:p4> = <var:P> ^ <nat:4> \} $ to $ \{ <var:Q> = <var:P> \land <var:p1> = <var:P> \land <var:p2> = <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \land <var:p4> = <var:P> ^ <nat:4> \land <var:p0> = <nat:3> \} $ . This is known to be sound by the assignment law of Hoare logic . Keeping momentum , the environment update command \verb | <var:p1> := <var:p1> * <nat:3> ; | . This statement transfers $ \{ <var:Q> = <var:P> \land <var:p1> = <var:P> \land <var:p2> = <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \land <var:p4> = <var:P> ^ <nat:4> \land <var:p0> = <nat:3> \} $ as $ \{ <var:Q> = <var:P> \land <var:p1> = <nat:3> \times <var:P> \land <var:p2> = <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \land <var:p4> = <var:P> ^ <nat:4> \land <var:p0> = <nat:3> \} $ . Moving onward , we see the assignment line yielding $ <var:p2> * <nat:3> $ as $ <var:p2>$ . This transfers the precondition $ \{ <var:Q> = <var:P> \land <var:p1> = <nat:3> \times <var:P> \land <var:p2> = <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \land <var:p4> = <var:P> ^ <nat:4> \land <var:p0> = <nat:3> \} $ toward the condition $ \{ <var:Q> = <var:P> \land <var:p1> = <nat:3> \times <var:P> \land <var:p2> = <nat:3> \times <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \land <var:p4> = <var:P> ^ <nat:4> \land <var:p0> = <nat:3> \} $ . This is known to be sound by the assignment rule obtained from typical Hoare techniques . Stepping through , the variable binding code letting $ <var:p4> * <nat:2> $ into $ <var:p4>$ . This code transfers $ \{ <var:Q> = <var:P> \land <var:p1> = <nat:3> \times <var:P> \land <var:p2> = <nat:3> \times <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \land <var:p4> = <var:P> ^ <nat:4> \land <var:p0> = <nat:3> \} $ to the condition $ \{ <var:Q> = <var:P> \land <var:p1> = <nat:3> \times <var:P> \land <var:p2> = <nat:3> \times <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \land <var:p4> = <nat:2> \times <var:P> ^ <nat:4> \land <var:p0> = <nat:3> \} $ . This is given through the assignment rule obtained from Hoare logic . After , the variable assignmet code \verb | <var:H> := <var:p4> | . This line takes $ \{ <var:Q> = <var:P> \land <var:p1> = <nat:3> \times <var:P> \land <var:p2> = <nat:3> \times <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \land <var:p4> = <nat:2> \times <var:P> ^ <nat:4> \land <var:p0> = <nat:3> \} $ into the condition $ \{ <var:Q> = <var:P> \land <var:p1> = <nat:3> \times <var:P> \land <var:p2> = <nat:3> \times <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \land <var:p0> = <nat:3> \land <var:H> = <nat:2> \times <var:P> ^ <nat:4> \} $ . This is ensured with the assignment law obtained from typical Hoare logic . Paying attention to the upcoming step seen in our set of instructions , we have the binding command letting $ <var:H> + <var:p2$ to $ <var:H>$ . This redefines $ \{ <var:Q> = <var:P> \land <var:p1> = <nat:3> \times <var:P> \land <var:p2> = <nat:3> \times <var:P> ^ <nat:2> \land <var:p3> = <var:P> ^ <nat:3> \land <var:p0> = <nat:3> \land <var:H> = <nat:2> \times <var:P> ^ <nat:4> \} $ as $ \{ <var:Q> = <var:P> \land <var:p1> = <nat:3> \times <var:P> \land <var:p0> = <nat:3> \land <var:H> = <nat:2> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:2> \} $ . This is ensured using the assignment inference rule defined by usual Hoare reasoning . Keeping momentum , we see the statement binding $ <var:H> + <var:p1$ as $ <var:H>$ . This advances $ \{ <var:Q> = <var:P> \land <var:p1> = <nat:3> \times <var:P> \land <var:p0> = <nat:3> \land <var:H> = <nat:2> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:2> \} $ toward $ \{ <var:Q> = <var:P> \land <var:p0> = <nat:3> \land <var:H> = <nat:2> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> \} $ . This is guaranteed using the assignment law defined in Hoare logic . Advancing , we see the environment update code \verb | <var:H> := <var:H> + <var:p0> | . This transfers $ \{ <var:Q> = <var:P> \land <var:p0> = <nat:3> \land <var:H> = <nat:2> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> \} $ into the condition $ \{ <var:Q> = <var:P> \land <var:H> = <nat:2> \times <var:P> ^ <nat:4> + <nat:3> \times <var:P> ^ <nat:2> + <nat:3> \times <var:P> + <nat:3> \} $ . This is ensured using the assignment law given in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:p0> : string := " <var:p0> " . Definition <var:p1> : string := " <var:p1> " . Definition <var:p2> : string := " <var:p2> " . Definition <var:p3> : string := " <var:p3> " . Definition <var:p4> : string := " <var:p4> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:Q> = <var:P> }} <var:p1> := <var:Q> ; <var:p2> := <var:p1> * <var:Q> ; <var:p3> := <var:p2> * <var:Q> ; <var:p4> := <var:p3> * <var:Q> ; <var:p0> := <nat:3> ; <var:p1> := <var:p1> * <nat:3> ; <var:p2> := <var:p2> * <nat:3> ; <var:p4> := <var:p4> * <nat:2> ; <var:H> := <var:p4> <var:H> := <var:H> + <var:p2> <var:H> := <var:H> + <var:p1> <var:H> := <var:H> + <var:p0> {{ <var:H> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:p1> = <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:p1> = <var:P> /\ <var:p2> = <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:p1> = <var:P> /\ <var:p2> = <var:P> ^ <nat:2> /\ <var:p3> = <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:p1> = <var:P> /\ <var:p2> = <var:P> ^ <nat:2> /\ <var:p3> = <var:P> ^ <nat:3> /\ <var:p4> = <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:p1> = <var:P> /\ <var:p2> = <var:P> ^ <nat:2> /\ <var:p3> = <var:P> ^ <nat:3> /\ <var:p4> = <var:P> ^ <nat:4> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:p1> = <nat:3> * <var:P> /\ <var:p2> = <var:P> ^ <nat:2> /\ <var:p3> = <var:P> ^ <nat:3> /\ <var:p4> = <var:P> ^ <nat:4> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:p1> = <nat:3> * <var:P> /\ <var:p2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:p3> = <var:P> ^ <nat:3> /\ <var:p4> = <var:P> ^ <nat:4> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:p1> = <nat:3> * <var:P> /\ <var:p2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:p3> = <var:P> ^ <nat:3> /\ <var:p4> = <nat:2> * <var:P> ^ <nat:4> /\ <var:p0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:p1> = <nat:3> * <var:P> /\ <var:p2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:p3> = <var:P> ^ <nat:3> /\ <var:p0> = <nat:3> /\ <var:H> = <nat:2> * <var:P> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:p1> = <nat:3> * <var:P> /\ <var:p0> = <nat:3> /\ <var:H> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:p0> = <nat:3> /\ <var:H> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:P> /\ <var:H> = <nat:2> * <var:P> ^ <nat:4> + <nat:3> * <var:P> ^ <nat:2> + <nat:3> * <var:P> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 