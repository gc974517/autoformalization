\begin{document} \begin{theorem} Define a code in \emph{Imp} : \begin{verbatim} <var:Y> := <nat:1> ; <var:Y> := <nat:1> + <var:Y> * <var:T> ; <var:Y> := <nat:4> + <var:Y> * <var:T> ; <var:Y> := <nat:3> + <var:Y> * <var:T> ; <var:Y> := <nat:1> + <var:Y> * <var:T> \end{verbatim} Allowing , with some natural coefficients $ <var:m> $ , that $ <var:T> = <var:m> $ prior to the evaluation of our series of instructions , it follows that $ <var:Y> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> $ when code has finished executing . \end{theorem} \begin{proof} The argument for this program can be demonstrated with standard Hoare reasoning . After , we have \begin{eqnarray} \{ <var:T> = <var:m> \} \, <var:Y> := <nat:1> \, \{ <var:T> = <var:m> \land <var:Y> = <nat:1> \} \\ \{ <var:T> = <var:m> \land <var:Y> = <nat:1> \} \, <var:Y> := <nat:1> + <var:Y> * <var:T> \, \{ <var:T> = <var:m> \land <var:Y> = <nat:1> \cdot <var:m> + <nat:1> \} \end{eqnarray} This is shown to be logically sound by the variable assignmet scheme defined by typical Hoare techniques . Immediately after , we see \begin{eqnarray} \{ <var:T> = <var:m> \} \, <var:Y> := <nat:1> \, \{ <var:T> = <var:m> \land <var:Y> = <nat:1> \} \\ \{ <var:T> = <var:m> \land <var:Y> = <nat:1> \} \, <var:Y> := <nat:1> + <var:Y> * <var:T> \, \{ <var:T> = <var:m> \land <var:Y> = <nat:1> \cdot <var:m> + <nat:1> \} \end{eqnarray} Paying attention to the upcoming piece of code seen in the code , we have \begin{eqnarray} \{ <var:T> = <var:m> \} \, <var:Y> := <nat:1> \, \{ <var:T> = <var:m> \land <var:Y> = <nat:1> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:T> = <var:m> }} <var:Y> := <nat:1> ; <var:Y> := <nat:1> + <var:Y> * <var:T> ; <var:Y> := <nat:4> + <var:Y> * <var:T> ; <var:Y> := <nat:3> + <var:Y> * <var:T> ; <var:Y> := <nat:1> + <var:Y> * <var:T> {{ <var:Y> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Y> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Y> = <nat:1> * <var:m> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Y> = <nat:1> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Y> = <nat:1> * <var:m> ^ <nat:3> + <nat:1> * <var:m> ^ <nat:2> + <nat:4> * <var:m> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:m> /\ <var:Y> = <nat:1> * <var:m> ^ <nat:4> + <nat:1> * <var:m> ^ <nat:3> + <nat:4> * <var:m> ^ <nat:2> + <nat:3> * <var:m> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 