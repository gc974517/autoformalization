\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} : \begin{verbatim} <var:F1> := <var:z> ; <var:F2> := <var:F1> * <var:z> ; <var:F3> := <var:F2> * <var:z> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:3> ; <var:F2> := <var:F2> * <nat:3> ; <var:F3> := <var:F3> * <nat:8> ; <var:p> := <var:F3> <var:p> := <var:p> + <var:F2> <var:p> := <var:p> + <var:F1> <var:p> := <var:p> + <var:F0> \end{verbatim} Assuming $ <var:z> = <var:A> $ ahead of the execution of this set of instructions , it must be that we see $ <var:p> = <nat:8> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> + <nat:8> $ when list of commands has terminated . \end{theorem} \begin{proof} Demonstrating correctness of our segment of code is given through standard Hoare techniques . Moving on , the variable binding command giving $ <var:z> $ as $ <var:F1>$ . This moves the precondition $ \{ <var:z> = <var:A> \} $ as the postcondition $ \{ <var:z> = <var:A> \land <var:F1> = <var:A> \} $ . Moving forward to the next bit of code found in the series of instructions , we see the binding command giving $ <var:F1> * <var:z> $ into $ <var:F2>$ . This moves the condition $ \{ <var:z> = <var:A> \land <var:F1> = <var:A> \} $ toward the postcondition $ \{ <var:z> = <var:A> \land <var:F1> = <var:A> \land <var:F2> = <var:A> ^ <nat:2> \} $ . This is sound through the assignment law given in Hoare logic . Following , we see the command letting $ <var:F2> * <var:z> $ into $ <var:F3>$ . This command advances $ \{ <var:z> = <var:A> \land <var:F1> = <var:A> \land <var:F2> = <var:A> ^ <nat:2> \} $ into the postcondition $ \{ <var:z> = <var:A> \land <var:F1> = <var:A> \land <var:F2> = <var:A> ^ <nat:2> \land <var:F3> = <var:A> ^ <nat:3> \} $ . Moving on to the next line contained in the set of commands , the variable assignmet line \verb | <var:F0> := <nat:8> ; | . This statement advances the precondition $ \{ <var:z> = <var:A> \land <var:F1> = <var:A> \land <var:F2> = <var:A> ^ <nat:2> \land <var:F3> = <var:A> ^ <nat:3> \} $ into the postcondition $ \{ <var:z> = <var:A> \land <var:F1> = <var:A> \land <var:F2> = <var:A> ^ <nat:2> \land <var:F3> = <var:A> ^ <nat:3> \land <var:F0> = <nat:8> \} $ . This is shown by the assignment inference rule defined in usual Hoare techniques . Following , the environment update line \verb | <var:F1> := <var:F1> * <nat:3> ; | . This moves the precondition $ \{ <var:z> = <var:A> \land <var:F1> = <var:A> \land <var:F2> = <var:A> ^ <nat:2> \land <var:F3> = <var:A> ^ <nat:3> \land <var:F0> = <nat:8> \} $ as the condition $ \{ <var:z> = <var:A> \land <var:F1> = <nat:3> \times <var:A> \land <var:F2> = <var:A> ^ <nat:2> \land <var:F3> = <var:A> ^ <nat:3> \land <var:F0> = <nat:8> \} $ . This is shown to be logically sound with the assignment rule defined in standard Hoare techniques . Shifting focus toward the next command found in our program , we have the environment update line \verb | <var:F2> := <var:F2> * <nat:3> ; | . This line transfers the precondition $ \{ <var:z> = <var:A> \land <var:F1> = <nat:3> \times <var:A> \land <var:F2> = <var:A> ^ <nat:2> \land <var:F3> = <var:A> ^ <nat:3> \land <var:F0> = <nat:8> \} $ as the postcondition $ \{ <var:z> = <var:A> \land <var:F1> = <nat:3> \times <var:A> \land <var:F2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:F3> = <var:A> ^ <nat:3> \land <var:F0> = <nat:8> \} $ . Next , we have the variable binding statement \verb | <var:F3> := <var:F3> * <nat:8> ; | . This transfers the precondition $ \{ <var:z> = <var:A> \land <var:F1> = <nat:3> \times <var:A> \land <var:F2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:F3> = <var:A> ^ <nat:3> \land <var:F0> = <nat:8> \} $ to $ \{ <var:z> = <var:A> \land <var:F1> = <nat:3> \times <var:A> \land <var:F2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:F3> = <nat:8> \times <var:A> ^ <nat:3> \land <var:F0> = <nat:8> \} $ . Moving onward , we have the variable assignmet command \verb | <var:p> := <var:F3> | . This statement advances the condition $ \{ <var:z> = <var:A> \land <var:F1> = <nat:3> \times <var:A> \land <var:F2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:F3> = <nat:8> \times <var:A> ^ <nat:3> \land <var:F0> = <nat:8> \} $ to the condition $ \{ <var:z> = <var:A> \land <var:F1> = <nat:3> \times <var:A> \land <var:F2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:F0> = <nat:8> \land <var:p> = <nat:8> \times <var:A> ^ <nat:3> \} $ . Paying attention to the following line found in our list of instructions , we see the variable update statement giving $ <var:p> + <var:F2$ into $ <var:p>$ . This command redefines the precondition $ \{ <var:z> = <var:A> \land <var:F1> = <nat:3> \times <var:A> \land <var:F2> = <nat:3> \times <var:A> ^ <nat:2> \land <var:F0> = <nat:8> \land <var:p> = <nat:8> \times <var:A> ^ <nat:3> \} $ toward $ \{ <var:z> = <var:A> \land <var:F1> = <nat:3> \times <var:A> \land <var:F0> = <nat:8> \land <var:p> = <nat:8> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> \} $ . This is deduced with the assignment law obtained from Hoare reasoning . Stepping forward , the variable assignmet line yielding $ <var:p> + <var:F1$ as $ <var:p>$ . This advances the precondition $ \{ <var:z> = <var:A> \land <var:F1> = <nat:3> \times <var:A> \land <var:F0> = <nat:8> \land <var:p> = <nat:8> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> \} $ into the condition $ \{ <var:z> = <var:A> \land <var:F0> = <nat:8> \land <var:p> = <nat:8> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> \} $ . Paying attention to the proceeding line of code seen in our series of instructions , the variable update code \verb | <var:p> := <var:p> + <var:F0> | . This statement redefines $ \{ <var:z> = <var:A> \land <var:F0> = <nat:8> \land <var:p> = <nat:8> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> \} $ as $ \{ <var:z> = <var:A> \land <var:p> = <nat:8> \times <var:A> ^ <nat:3> + <nat:3> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> + <nat:8> \} $ . This is shown with the assignment rule defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Definition <var:F1> : string := " <var:F1> " . Definition <var:F2> : string := " <var:F2> " . Definition <var:F3> : string := " <var:F3> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:z> = <var:A> }} <var:F1> := <var:z> ; <var:F2> := <var:F1> * <var:z> ; <var:F3> := <var:F2> * <var:z> ; <var:F0> := <nat:8> ; <var:F1> := <var:F1> * <nat:3> ; <var:F2> := <var:F2> * <nat:3> ; <var:F3> := <var:F3> * <nat:8> ; <var:p> := <var:F3> <var:p> := <var:p> + <var:F2> <var:p> := <var:p> + <var:F1> <var:p> := <var:p> + <var:F0> {{ <var:p> = <nat:8> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F1> = <var:A> /\ <var:F2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F1> = <var:A> /\ <var:F2> = <var:A> ^ <nat:2> /\ <var:F3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F1> = <var:A> /\ <var:F2> = <var:A> ^ <nat:2> /\ <var:F3> = <var:A> ^ <nat:3> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F1> = <nat:3> * <var:A> /\ <var:F2> = <var:A> ^ <nat:2> /\ <var:F3> = <var:A> ^ <nat:3> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F1> = <nat:3> * <var:A> /\ <var:F2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:F3> = <var:A> ^ <nat:3> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F1> = <nat:3> * <var:A> /\ <var:F2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:F3> = <nat:8> * <var:A> ^ <nat:3> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F1> = <nat:3> * <var:A> /\ <var:F2> = <nat:3> * <var:A> ^ <nat:2> /\ <var:F0> = <nat:8> /\ <var:p> = <nat:8> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F1> = <nat:3> * <var:A> /\ <var:F0> = <nat:8> /\ <var:p> = <nat:8> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:F0> = <nat:8> /\ <var:p> = <nat:8> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:A> /\ <var:p> = <nat:8> * <var:A> ^ <nat:3> + <nat:3> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 