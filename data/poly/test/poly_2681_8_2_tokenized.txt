\begin{document} \begin{theorem} Define the following segment of code such that \begin{verbatim} <var:M> := <nat:1> ; <var:M> := <nat:2> + <var:M> * <var:a> ; <var:M> := <nat:1> + <var:M> * <var:a> ; <var:M> := <nat:4> + <var:M> * <var:a> ; <var:M> := <var:M> * <var:a> ; <var:M> := <var:M> * <var:a> ; <var:M> := <nat:4> + <var:M> * <var:a> ; <var:M> := <nat:3> + <var:M> * <var:a> \end{verbatim} Allowing it to hold that $ <var:a> = <var:c> $ before the evaluation of our list of commands , it holds that we see $ <var:M> = <nat:1> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> + <nat:3> $ once set of instructions has finished executing . \end{theorem} \begin{proof} Utilizing standard Hoare reasoning yields : \begin{eqnarray} \{ <var:a> = <var:c> \} \\ <var:M> := <nat:1> ; \\ \{ <var:a> = <var:c> \land <var:M> = <nat:1> \} \\ <var:M> := <nat:2> + <var:M> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:M> = <nat:1> \times <var:c> + <nat:2> \} \\ <var:M> := <nat:1> + <var:M> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:M> = <nat:1> \times <var:c> ^ <nat:2> + <nat:2> \times <var:c> + <nat:1> \} \\ <var:M> := <nat:4> + <var:M> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:M> = <nat:1> \times <var:c> ^ <nat:3> + <nat:2> \times <var:c> ^ <nat:2> + <nat:1> \times <var:c> + <nat:4> \} \\ <var:M> := <var:M> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:M> = <nat:1> \times <var:c> ^ <nat:4> + <nat:2> \times <var:c> ^ <nat:3> + <nat:1> \times <var:c> ^ <nat:2> + <nat:4> \times <var:c> + \} \\ <var:M> := <var:M> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:M> = <nat:1> \times <var:c> ^ <nat:5> + <nat:2> \times <var:c> ^ <nat:4> + <nat:1> \times <var:c> ^ <nat:3> + <nat:4> \times <var:c> ^ <nat:2> + \} \\ <var:M> := <nat:4> + <var:M> * <var:a> ; \\ \{ <var:a> = <var:c> \land <var:M> = <nat:1> \times <var:c> ^ <nat:6> + <nat:2> \times <var:c> ^ <nat:5> + <nat:1> \times <var:c> ^ <nat:4> + <nat:4> \times <var:c> ^ <nat:3> + <nat:4> \} \\ <var:M> := <nat:3> + <var:M> * <var:a> \\ \{ <var:a> = <var:c> \land <var:M> = <nat:1> \times <var:c> ^ <nat:7> + <nat:2> \times <var:c> ^ <nat:6> + <nat:1> \times <var:c> ^ <nat:5> + <nat:4> \times <var:c> ^ <nat:4> + <nat:4> \times <var:c> + <nat:3> \} \end{eqnarray} Hence , our set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:a> = <var:c> }} <var:M> := <nat:1> ; <var:M> := <nat:2> + <var:M> * <var:a> ; <var:M> := <nat:1> + <var:M> * <var:a> ; <var:M> := <nat:4> + <var:M> * <var:a> ; <var:M> := <var:M> * <var:a> ; <var:M> := <var:M> * <var:a> ; <var:M> := <nat:4> + <var:M> * <var:a> ; <var:M> := <nat:3> + <var:M> * <var:a> {{ <var:M> = <nat:1> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:M> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:M> = <nat:1> * <var:c> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:M> = <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:M> = <nat:1> * <var:c> ^ <nat:3> + <nat:2> * <var:c> ^ <nat:2> + <nat:1> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:M> = <nat:1> * <var:c> ^ <nat:4> + <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:M> = <nat:1> * <var:c> ^ <nat:5> + <nat:2> * <var:c> ^ <nat:4> + <nat:1> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:M> = <nat:1> * <var:c> ^ <nat:6> + <nat:2> * <var:c> ^ <nat:5> + <nat:1> * <var:c> ^ <nat:4> + <nat:4> * <var:c> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:c> /\ <var:M> = <nat:1> * <var:c> ^ <nat:7> + <nat:2> * <var:c> ^ <nat:6> + <nat:1> * <var:c> ^ <nat:5> + <nat:4> * <var:c> ^ <nat:4> + <nat:4> * <var:c> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 