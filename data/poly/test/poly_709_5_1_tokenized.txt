\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:v1> := <var:T> ; <var:v0> := <nat:3> ; <var:v1> := <var:v1> * <nat:2> ; <var:E> := <var:v1> <var:E> := <var:E> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> . Assuming it to be that $ <var:T> = <var:w> $ prior to executing the list of instructions , it holds that we have $ <var:E> = <nat:2> \cdot <var:w> + <nat:3> $ when series of instructions has exited . \end{theorem} \begin{proof} Arguing the correctness of the segment of code is evident through the below decorated set of instructions . \begin{eqnarray} \{ <var:T> = <var:w> \} \\ <var:v1> := <var:T> ; \\ \{ <var:T> = <var:w> \land <var:v1> = <var:w> \} \\ <var:v0> := <nat:3> ; \\ \{ <var:T> = <var:w> \land <var:v1> = <var:w> \land <var:v0> = <nat:3> \} \\ <var:v1> := <var:v1> * <nat:2> ; \\ \{ <var:T> = <var:w> \land <var:v1> = <nat:2> * <var:w> \land <var:v0> = <nat:3> \} \\ <var:E> := <var:v1> \\ \{ <var:T> = <var:w> \land <var:v0> = <nat:3> \land <var:E> = <nat:2> * <var:w> \} \\ <var:E> := <var:E> + <var:v0> \\ \{ <var:T> = <var:w> \land <var:E> = <nat:2> * <var:w> + <nat:3> \} \end{eqnarray} Applying usual Hoare logic solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <def:poly> := <var:v1> := <var:T> ; <var:v0> := <nat:3> ; <var:v1> := <var:v1> * <nat:2> ; <var:E> := <var:v1> <var:E> := <var:E> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:T> = <var:w> }} <def:poly> {{ <var:E> = <nat:2> * <var:w> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:w> /\ <var:v1> = <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:w> /\ <var:v1> = <var:w> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:w> /\ <var:v1> = <nat:2> * <var:w> /\ <var:v0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:w> /\ <var:v0> = <nat:3> /\ <var:E> = <nat:2> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:w> /\ <var:E> = <nat:2> * <var:w> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 