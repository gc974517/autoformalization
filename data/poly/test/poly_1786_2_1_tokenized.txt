\begin{document} \begin{theorem} Consider the following segment of code as \begin{verbatim} <var:N0> := <nat:3> ; <var:l> := <var:N0> \end{verbatim} Given it to be that $ <var:V> = <var:C> $ ahead of the evaluation of this segment of code , it must be that we see $ <var:l> = <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for the program can be done with usual Hoare logic . Moving forward to the next step , we have \begin{eqnarray} \{ <var:V> = <var:C> \} \, <var:N0> := <nat:3> \, \{ <var:V> = <var:C> \land <var:N0> = <nat:3> \} \end{eqnarray} This is given through the environment update inference rule of Hoare techniques . Taking another step toward the subsequent command found in the code , \begin{eqnarray} \{ <var:V> = <var:C> \} \, <var:N0> := <nat:3> \, \{ <var:V> = <var:C> \land <var:N0> = <nat:3> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:V> = <var:C> }} <var:N0> := <nat:3> ; <var:l> := <var:N0> {{ <var:l> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:C> /\ <var:l> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 