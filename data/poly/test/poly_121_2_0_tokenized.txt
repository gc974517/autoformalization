\begin{document} \begin{theorem} Consider the following list of commands in \emph{Imp} : \begin{verbatim} <var:U0> := <nat:9> ; <var:R> := <var:U0> \end{verbatim} Assuming $ <var:P> = <var:A> $ ahead of evaluating this segment of code , it must be that we have $ <var:R> = <nat:9> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:A> \} \\ <var:U0> := <nat:9> ; \\ \{ <var:P> = <var:A> \land <var:U0> = <nat:9> \} \\ <var:R> := <var:U0> \\ \{ <var:P> = <var:A> \land <var:R> = <nat:9> \} \end{eqnarray} Utilizing typical Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:P> = <var:A> }} <var:U0> := <nat:9> ; <var:R> := <var:U0> {{ <var:R> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:A> /\ <var:U0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:A> /\ <var:R> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 