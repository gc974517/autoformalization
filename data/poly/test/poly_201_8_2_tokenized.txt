\begin{document} \begin{theorem} Consider a list of instructions such that \begin{verbatim} <var:q> := <nat:4> ; <var:q> := <nat:2> + <var:q> * <var:o> ; <var:q> := <nat:1> + <var:q> * <var:o> ; <var:q> := <nat:4> + <var:q> * <var:o> ; <var:q> := <nat:4> + <var:q> * <var:o> ; <var:q> := <nat:3> + <var:q> * <var:o> ; <var:q> := <nat:2> + <var:q> * <var:o> ; <var:q> := <nat:3> + <var:q> * <var:o> \end{verbatim} Assume that we have $ <var:o> = <var:t> $ prior to the evaluation of our list of commands it follows that we see $ <var:q> = <nat:4> \cdot <var:t> ^ <nat:7> + <nat:2> \cdot <var:t> ^ <nat:6> + <nat:1> \cdot <var:t> ^ <nat:5> + <nat:4> \cdot <var:t> ^ <nat:4> + <nat:4> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for this program can be given using standard Hoare techniques . Next , we see the variable assignmet code assigning $ <nat:4> $ to $ <var:q>$ . This code transfers $ \{ <var:o> = <var:t> \} $ toward the condition $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \} $ . This is deduced using the assignment scheme in usual Hoare logic . Taking a look at the upcoming line found in our code segment , we see the assignment code \verb | <var:q> := <nat:2> + <var:q> * <var:o> ; | . This line advances the precondition $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \} $ toward the postcondition $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \cdot <var:t> + <nat:2> \} $ . After , we have the variable binding line letting $ <nat:1> + <var:q> * <var:o> $ into $ <var:q>$ . This advances the precondition $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \cdot <var:t> + <nat:2> \} $ to $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:1> \} $ . This is sound using the assignment scheme obtained from usual Hoare logic . Keeping momentum , the variable binding code letting $ <nat:4> + <var:q> * <var:o> $ toward $ <var:q>$ . This advances $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:1> \} $ to the condition $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> + <nat:4> \} $ . This is guaranteed by the assignment law defined in Hoare reasoning . Going to the next step , the environment update line \verb | <var:q> := <nat:4> + <var:q> * <var:o> ; | . This transfers the precondition $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:1> \cdot <var:t> + <nat:4> \} $ to $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \cdot <var:t> ^ <nat:4> + <nat:2> \cdot <var:t> ^ <nat:3> + <nat:1> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:4> \} $ . This is deduced with the assignment rule given by Hoare techniques . Moving on , we have the binding line \verb | <var:q> := <nat:3> + <var:q> * <var:o> ; | . This statement takes $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \cdot <var:t> ^ <nat:4> + <nat:2> \cdot <var:t> ^ <nat:3> + <nat:1> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:4> \} $ into the postcondition $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \cdot <var:t> ^ <nat:5> + <nat:2> \cdot <var:t> ^ <nat:4> + <nat:1> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:3> \} $ . This is ensured using the assignment scheme from Hoare techniques . Shifting focus toward the proceeding line of code contained in our list of instructions , we see the variable update line \verb | <var:q> := <nat:2> + <var:q> * <var:o> ; | . This line forwards the precondition $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \cdot <var:t> ^ <nat:5> + <nat:2> \cdot <var:t> ^ <nat:4> + <nat:1> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:3> \} $ as the postcondition $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \cdot <var:t> ^ <nat:6> + <nat:2> \cdot <var:t> ^ <nat:5> + <nat:1> \cdot <var:t> ^ <nat:4> + <nat:4> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:2> \} $ . This is rigorously given with the assignment law given in Hoare logic . Advancing to the upcoming step contained in our list of commands , the binding line \verb | <var:q> := <nat:3> + <var:q> * <var:o> | . This line redefines the precondition $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \cdot <var:t> ^ <nat:6> + <nat:2> \cdot <var:t> ^ <nat:5> + <nat:1> \cdot <var:t> ^ <nat:4> + <nat:4> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:2> \} $ into the condition $ \{ <var:o> = <var:t> \land <var:q> = <nat:4> \cdot <var:t> ^ <nat:7> + <nat:2> \cdot <var:t> ^ <nat:6> + <nat:1> \cdot <var:t> ^ <nat:5> + <nat:4> \cdot <var:t> ^ <nat:4> + <nat:4> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:o> = <var:t> }} <var:q> := <nat:4> ; <var:q> := <nat:2> + <var:q> * <var:o> ; <var:q> := <nat:1> + <var:q> * <var:o> ; <var:q> := <nat:4> + <var:q> * <var:o> ; <var:q> := <nat:4> + <var:q> * <var:o> ; <var:q> := <nat:3> + <var:q> * <var:o> ; <var:q> := <nat:2> + <var:q> * <var:o> ; <var:q> := <nat:3> + <var:q> * <var:o> {{ <var:q> = <nat:4> * <var:t> ^ <nat:7> + <nat:2> * <var:t> ^ <nat:6> + <nat:1> * <var:t> ^ <nat:5> + <nat:4> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:q> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:q> = <nat:4> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:q> = <nat:4> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:q> = <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:1> * <var:t> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:q> = <nat:4> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:1> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:q> = <nat:4> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:q> = <nat:4> * <var:t> ^ <nat:6> + <nat:2> * <var:t> ^ <nat:5> + <nat:1> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:t> /\ <var:q> = <nat:4> * <var:t> ^ <nat:7> + <nat:2> * <var:t> ^ <nat:6> + <nat:1> * <var:t> ^ <nat:5> + <nat:4> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 