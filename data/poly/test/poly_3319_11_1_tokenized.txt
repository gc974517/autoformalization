\begin{document} \begin{theorem} Define a code in \emph{Imp} : \begin{verbatim} <var:t1> := <var:R> ; <var:t2> := <var:t1> * <var:R> ; <var:t3> := <var:t2> * <var:R> ; <var:t0> := <nat:1> ; <var:t1> := <var:t1> * <nat:7> ; <var:t2> := <var:t2> * <nat:7> ; <var:t3> := <var:t3> * <nat:3> ; <var:P> := <var:t3> <var:P> := <var:P> + <var:t2> <var:P> := <var:P> + <var:t1> <var:P> := <var:P> + <var:t0> \end{verbatim} Assume that $ <var:R> = <var:b> $ before interpreting our code segment , it holds that $ <var:P> = <nat:3> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:1> $ . \end{theorem} \begin{proof} The proof of our set of commands can be shown through Hoare logic . Going forward , \begin{verbatim} { <var:R> = <var:b> } <var:t1> := <var:R> { <var:R> = <var:b> \land <var:t1> = <var:b> } { <var:R> = <var:b> \land <var:t1> = <var:b> } <var:t2> := <var:t1> * <var:R> { <var:R> = <var:b> \land <var:t1> = <var:b> \land <var:t2> = <var:b> ^ <nat:2> } { <var:R> = <var:b> \land <var:t1> = <var:b> \land <var:t2> = <var:b> ^ <nat:2> } <var:t3> := <var:t2> * <var:R> { <var:R> = <var:b> \land <var:t1> = <var:b> \land <var:t2> = <var:b> ^ <nat:2> \land <var:t3> = <var:b> ^ <nat:3> } { <var:R> = <var:b> \land <var:t1> = <var:b> \land <var:t2> = <var:b> ^ <nat:2> \land <var:t3> = <var:b> ^ <nat:3> } <var:t0> := <nat:1> { <var:R> = <var:b> \land <var:t1> = <var:b> \land <var:t2> = <var:b> ^ <nat:2> \land <var:t3> = <var:b> ^ <nat:3> \land <var:t0> = <nat:1> } { <var:R> = <var:b> \land <var:t1> = <var:b> \land <var:t2> = <var:b> ^ <nat:2> \land <var:t3> = <var:b> ^ <nat:3> \land <var:t0> = <nat:1> } <var:t1> := <var:t1> * <nat:7> { <var:R> = <var:b> \land <var:t1> = <nat:7> * <var:b> \land <var:t2> = <var:b> ^ <nat:2> \land <var:t3> = <var:b> ^ <nat:3> \land <var:t0> = <nat:1> } { <var:R> = <var:b> \land <var:t1> = <nat:7> * <var:b> \land <var:t2> = <var:b> ^ <nat:2> \land <var:t3> = <var:b> ^ <nat:3> \land <var:t0> = <nat:1> } <var:t2> := <var:t2> * <nat:7> { <var:R> = <var:b> \land <var:t1> = <nat:7> * <var:b> \land <var:t2> = <nat:7> * <var:b> ^ <nat:2> \land <var:t3> = <var:b> ^ <nat:3> \land <var:t0> = <nat:1> } { <var:R> = <var:b> \land <var:t1> = <nat:7> * <var:b> \land <var:t2> = <nat:7> * <var:b> ^ <nat:2> \land <var:t3> = <var:b> ^ <nat:3> \land <var:t0> = <nat:1> } <var:t3> := <var:t3> * <nat:3> { <var:R> = <var:b> \land <var:t1> = <nat:7> * <var:b> \land <var:t2> = <nat:7> * <var:b> ^ <nat:2> \land <var:t3> = <nat:3> * <var:b> ^ <nat:3> \land <var:t0> = <nat:1> } { <var:R> = <var:b> \land <var:t1> = <nat:7> * <var:b> \land <var:t2> = <nat:7> * <var:b> ^ <nat:2> \land <var:t3> = <nat:3> * <var:b> ^ <nat:3> \land <var:t0> = <nat:1> } <var:P> := <var:t3{ <var:R> = <var:b> \land <var:t1> = <nat:7> * <var:b> \land <var:t2> = <nat:7> * <var:b> ^ <nat:2> \land <var:t0> = <nat:1> \land <var:P> = <nat:3> * <var:b> ^ <nat:3> } { <var:R> = <var:b> \land <var:t1> = <nat:7> * <var:b> \land <var:t2> = <nat:7> * <var:b> ^ <nat:2> \land <var:t0> = <nat:1> \land <var:P> = <nat:3> * <var:b> ^ <nat:3> } <var:P> := <var:P> + <var:t2{ <var:R> = <var:b> \land <var:t1> = <nat:7> * <var:b> \land <var:t0> = <nat:1> \land <var:P> = <nat:3> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> } { <var:R> = <var:b> \land <var:t1> = <nat:7> * <var:b> \land <var:t0> = <nat:1> \land <var:P> = <nat:3> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> } <var:P> := <var:P> + <var:t1{ <var:R> = <var:b> \land <var:t0> = <nat:1> \land <var:P> = <nat:3> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> + <nat:7> * <var:b> } { <var:R> = <var:b> \land <var:t0> = <nat:1> \land <var:P> = <nat:3> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> + <nat:7> * <var:b> } <var:P> := <var:P> + <var:t0{ <var:R> = <var:b> \land <var:P> = <nat:3> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:1> } \end{verbatim} This is sound with the variable update inference rule found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:t0> : string := " <var:t0> " . Definition <var:t1> : string := " <var:t1> " . Definition <var:t2> : string := " <var:t2> " . Definition <var:t3> : string := " <var:t3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:R> = <var:b> }} <var:t1> := <var:R> ; <var:t2> := <var:t1> * <var:R> ; <var:t3> := <var:t2> * <var:R> ; <var:t0> := <nat:1> ; <var:t1> := <var:t1> * <nat:7> ; <var:t2> := <var:t2> * <nat:7> ; <var:t3> := <var:t3> * <nat:3> ; <var:P> := <var:t3> <var:P> := <var:P> + <var:t2> <var:P> := <var:P> + <var:t1> <var:P> := <var:P> + <var:t0> {{ <var:P> = <nat:3> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:t1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:t1> = <var:b> /\ <var:t2> = <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:t1> = <var:b> /\ <var:t2> = <var:b> ^ <nat:2> /\ <var:t3> = <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:t1> = <var:b> /\ <var:t2> = <var:b> ^ <nat:2> /\ <var:t3> = <var:b> ^ <nat:3> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:t1> = <nat:7> * <var:b> /\ <var:t2> = <var:b> ^ <nat:2> /\ <var:t3> = <var:b> ^ <nat:3> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:t1> = <nat:7> * <var:b> /\ <var:t2> = <nat:7> * <var:b> ^ <nat:2> /\ <var:t3> = <var:b> ^ <nat:3> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:t1> = <nat:7> * <var:b> /\ <var:t2> = <nat:7> * <var:b> ^ <nat:2> /\ <var:t3> = <nat:3> * <var:b> ^ <nat:3> /\ <var:t0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:t1> = <nat:7> * <var:b> /\ <var:t2> = <nat:7> * <var:b> ^ <nat:2> /\ <var:t0> = <nat:1> /\ <var:P> = <nat:3> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:t1> = <nat:7> * <var:b> /\ <var:t0> = <nat:1> /\ <var:P> = <nat:3> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:t0> = <nat:1> /\ <var:P> = <nat:3> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> + <nat:7> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:b> /\ <var:P> = <nat:3> * <var:b> ^ <nat:3> + <nat:7> * <var:b> ^ <nat:2> + <nat:7> * <var:b> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 