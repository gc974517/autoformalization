\begin{document} \begin{definition} We define a list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:P1> := <var:a> ; <var:P2> := <var:P1> * <var:a> ; <var:P3> := <var:P2> * <var:a> ; <var:P4> := <var:P3> * <var:a> ; <var:P0> := <nat:5> ; <var:P1> := <var:P1> * <nat:6> ; <var:P2> := <var:P2> * <nat:7> ; <var:P3> := <var:P3> * <nat:9> ; <var:P4> := <var:P4> * <nat:1> ; <var:I> := <var:P4> <var:I> := <var:I> + <var:P3> <var:I> := <var:I> + <var:P2> <var:I> := <var:I> + <var:P1> <var:I> := <var:I> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:a> = <var:Y> $ before executing the series of instructions , it follows that we see $ <var:I> = <nat:1> * <var:Y> ^ <nat:4> + <nat:9> * <var:Y> ^ <nat:3> + <nat:7> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for this program can be demonstrated with this decorated list of commands . \begin{eqnarray} \{ <var:a> = <var:Y> \} \\ <var:P1> := <var:a> ; \\ \{ <var:a> = <var:Y> \land <var:P1> = <var:Y> \} \\ <var:P2> := <var:P1> * <var:a> ; \\ \{ <var:a> = <var:Y> \land <var:P1> = <var:Y> \land <var:P2> = <var:Y> ^ <nat:2> \} \\ <var:P3> := <var:P2> * <var:a> ; \\ \{ <var:a> = <var:Y> \land <var:P1> = <var:Y> \land <var:P2> = <var:Y> ^ <nat:2> \land <var:P3> = <var:Y> ^ <nat:3> \} \\ <var:P4> := <var:P3> * <var:a> ; \\ \{ <var:a> = <var:Y> \land <var:P1> = <var:Y> \land <var:P2> = <var:Y> ^ <nat:2> \land <var:P3> = <var:Y> ^ <nat:3> \land <var:P4> = <var:Y> ^ <nat:4> \} \\ <var:P0> := <nat:5> ; \\ \{ <var:a> = <var:Y> \land <var:P1> = <var:Y> \land <var:P2> = <var:Y> ^ <nat:2> \land <var:P3> = <var:Y> ^ <nat:3> \land <var:P4> = <var:Y> ^ <nat:4> \land <var:P0> = <nat:5> \} \\ <var:P1> := <var:P1> * <nat:6> ; \\ \{ <var:a> = <var:Y> \land <var:P1> = <nat:6> * <var:Y> \land <var:P2> = <var:Y> ^ <nat:2> \land <var:P3> = <var:Y> ^ <nat:3> \land <var:P4> = <var:Y> ^ <nat:4> \land <var:P0> = <nat:5> \} \\ <var:P2> := <var:P2> * <nat:7> ; \\ \{ <var:a> = <var:Y> \land <var:P1> = <nat:6> * <var:Y> \land <var:P2> = <nat:7> * <var:Y> ^ <nat:2> \land <var:P3> = <var:Y> ^ <nat:3> \land <var:P4> = <var:Y> ^ <nat:4> \land <var:P0> = <nat:5> \} \\ <var:P3> := <var:P3> * <nat:9> ; \\ \{ <var:a> = <var:Y> \land <var:P1> = <nat:6> * <var:Y> \land <var:P2> = <nat:7> * <var:Y> ^ <nat:2> \land <var:P3> = <nat:9> * <var:Y> ^ <nat:3> \land <var:P4> = <var:Y> ^ <nat:4> \land <var:P0> = <nat:5> \} \\ <var:P4> := <var:P4> * <nat:1> ; \\ \{ <var:a> = <var:Y> \land <var:P1> = <nat:6> * <var:Y> \land <var:P2> = <nat:7> * <var:Y> ^ <nat:2> \land <var:P3> = <nat:9> * <var:Y> ^ <nat:3> \land <var:P4> = <nat:1> * <var:Y> ^ <nat:4> \land <var:P0> = <nat:5> \} \\ <var:I> := <var:P4> \\ \{ <var:a> = <var:Y> \land <var:P1> = <nat:6> * <var:Y> \land <var:P2> = <nat:7> * <var:Y> ^ <nat:2> \land <var:P3> = <nat:9> * <var:Y> ^ <nat:3> \land <var:P0> = <nat:5> \land <var:I> = <nat:1> * <var:Y> ^ <nat:4> \} \\ <var:I> := <var:I> + <var:P3> \\ \{ <var:a> = <var:Y> \land <var:P1> = <nat:6> * <var:Y> \land <var:P2> = <nat:7> * <var:Y> ^ <nat:2> \land <var:P0> = <nat:5> \land <var:I> = <nat:1> * <var:Y> ^ <nat:4> + <nat:9> * <var:Y> ^ <nat:3> \} \\ <var:I> := <var:I> + <var:P2> \\ \{ <var:a> = <var:Y> \land <var:P1> = <nat:6> * <var:Y> \land <var:P0> = <nat:5> \land <var:I> = <nat:1> * <var:Y> ^ <nat:4> + <nat:9> * <var:Y> ^ <nat:3> + <nat:7> * <var:Y> ^ <nat:2> \} \\ <var:I> := <var:I> + <var:P1> \\ \{ <var:a> = <var:Y> \land <var:P0> = <nat:5> \land <var:I> = <nat:1> * <var:Y> ^ <nat:4> + <nat:9> * <var:Y> ^ <nat:3> + <nat:7> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> \} \\ <var:I> := <var:I> + <var:P0> \\ \{ <var:a> = <var:Y> \land <var:I> = <nat:1> * <var:Y> ^ <nat:4> + <nat:9> * <var:Y> ^ <nat:3> + <nat:7> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:5> \} \end{eqnarray} Using usual Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <var:P3> : string := " <var:P3> " . Definition <var:P4> : string := " <var:P4> " . Definition <def:poly> := <var:P1> := <var:a> ; <var:P2> := <var:P1> * <var:a> ; <var:P3> := <var:P2> * <var:a> ; <var:P4> := <var:P3> * <var:a> ; <var:P0> := <nat:5> ; <var:P1> := <var:P1> * <nat:6> ; <var:P2> := <var:P2> * <nat:7> ; <var:P3> := <var:P3> * <nat:9> ; <var:P4> := <var:P4> * <nat:1> ; <var:I> := <var:P4> <var:I> := <var:I> + <var:P3> <var:I> := <var:I> + <var:P2> <var:I> := <var:I> + <var:P1> <var:I> := <var:I> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:a> = <var:Y> }} <def:poly> {{ <var:I> = <nat:1> * <var:Y> ^ <nat:4> + <nat:9> * <var:Y> ^ <nat:3> + <nat:7> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:P1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:P1> = <var:Y> /\ <var:P2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:P1> = <var:Y> /\ <var:P2> = <var:Y> ^ <nat:2> /\ <var:P3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:P1> = <var:Y> /\ <var:P2> = <var:Y> ^ <nat:2> /\ <var:P3> = <var:Y> ^ <nat:3> /\ <var:P4> = <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:P1> = <var:Y> /\ <var:P2> = <var:Y> ^ <nat:2> /\ <var:P3> = <var:Y> ^ <nat:3> /\ <var:P4> = <var:Y> ^ <nat:4> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:P1> = <nat:6> * <var:Y> /\ <var:P2> = <var:Y> ^ <nat:2> /\ <var:P3> = <var:Y> ^ <nat:3> /\ <var:P4> = <var:Y> ^ <nat:4> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:P1> = <nat:6> * <var:Y> /\ <var:P2> = <nat:7> * <var:Y> ^ <nat:2> /\ <var:P3> = <var:Y> ^ <nat:3> /\ <var:P4> = <var:Y> ^ <nat:4> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:P1> = <nat:6> * <var:Y> /\ <var:P2> = <nat:7> * <var:Y> ^ <nat:2> /\ <var:P3> = <nat:9> * <var:Y> ^ <nat:3> /\ <var:P4> = <var:Y> ^ <nat:4> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:P1> = <nat:6> * <var:Y> /\ <var:P2> = <nat:7> * <var:Y> ^ <nat:2> /\ <var:P3> = <nat:9> * <var:Y> ^ <nat:3> /\ <var:P4> = <nat:1> * <var:Y> ^ <nat:4> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:P1> = <nat:6> * <var:Y> /\ <var:P2> = <nat:7> * <var:Y> ^ <nat:2> /\ <var:P3> = <nat:9> * <var:Y> ^ <nat:3> /\ <var:P0> = <nat:5> /\ <var:I> = <nat:1> * <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:P1> = <nat:6> * <var:Y> /\ <var:P2> = <nat:7> * <var:Y> ^ <nat:2> /\ <var:P0> = <nat:5> /\ <var:I> = <nat:1> * <var:Y> ^ <nat:4> + <nat:9> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:P1> = <nat:6> * <var:Y> /\ <var:P0> = <nat:5> /\ <var:I> = <nat:1> * <var:Y> ^ <nat:4> + <nat:9> * <var:Y> ^ <nat:3> + <nat:7> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:P0> = <nat:5> /\ <var:I> = <nat:1> * <var:Y> ^ <nat:4> + <nat:9> * <var:Y> ^ <nat:3> + <nat:7> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:Y> /\ <var:I> = <nat:1> * <var:Y> ^ <nat:4> + <nat:9> * <var:Y> ^ <nat:3> + <nat:7> * <var:Y> ^ <nat:2> + <nat:6> * <var:Y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 