\begin{document} \begin{theorem} Consider the following series of instructions as follows \begin{verbatim} <var:z> := <nat:3> ; <var:z> := <nat:3> + <var:z> * <var:C> ; <var:z> := <nat:3> + <var:z> * <var:C> ; <var:z> := <nat:3> + <var:z> * <var:C> ; <var:z> := <nat:3> + <var:z> * <var:C> ; <var:z> := <nat:1> + <var:z> * <var:C> ; <var:z> := <nat:1> + <var:z> * <var:C> ; <var:z> := <nat:3> + <var:z> * <var:C> ; <var:z> := <nat:1> + <var:z> * <var:C> ; <var:z> := <nat:3> + <var:z> * <var:C> ; <var:z> := <nat:4> + <var:z> * <var:C> \end{verbatim} Allowing $ <var:C> = <var:k> $ prior to executing this segment of code , it must be that we see $ <var:z> = <nat:3> \cdot <var:k> ^ <nat:10> + <nat:3> \cdot <var:k> ^ <nat:9> + <nat:3> \cdot <var:k> ^ <nat:8> + <nat:3> \cdot <var:k> ^ <nat:7> + <nat:3> \cdot <var:k> ^ <nat:6> + <nat:1> \cdot <var:k> ^ <nat:5> + <nat:1> \cdot <var:k> ^ <nat:4> + <nat:3> \cdot <var:k> ^ <nat:3> + <nat:1> \cdot <var:k> ^ <nat:2> + <nat:3> \cdot <var:k> + <nat:4> $ . \end{theorem} \begin{proof} Utilizing usual Hoare techniques yields : \begin{eqnarray} \{ <var:C> = <var:k> \} \\ <var:z> := <nat:3> ; \\ \{ <var:C> = <var:k> \land <var:z> = <nat:3> \} \\ <var:z> := <nat:3> + <var:z> * <var:C> ; \\ \{ <var:C> = <var:k> \land <var:z> = <nat:3> \times <var:k> + <nat:3> \} \\ <var:z> := <nat:3> + <var:z> * <var:C> ; \\ \{ <var:C> = <var:k> \land <var:z> = <nat:3> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:3> \} \\ <var:z> := <nat:3> + <var:z> * <var:C> ; \\ \{ <var:C> = <var:k> \land <var:z> = <nat:3> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:3> \} \\ <var:z> := <nat:3> + <var:z> * <var:C> ; \\ \{ <var:C> = <var:k> \land <var:z> = <nat:3> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:3> \} \\ <var:z> := <nat:1> + <var:z> * <var:C> ; \\ \{ <var:C> = <var:k> \land <var:z> = <nat:3> \times <var:k> ^ <nat:5> + <nat:3> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:1> \} \\ <var:z> := <nat:1> + <var:z> * <var:C> ; \\ \{ <var:C> = <var:k> \land <var:z> = <nat:3> \times <var:k> ^ <nat:6> + <nat:3> \times <var:k> ^ <nat:5> + <nat:3> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:1> \times <var:k> + <nat:1> \} \\ <var:z> := <nat:3> + <var:z> * <var:C> ; \\ \{ <var:C> = <var:k> \land <var:z> = <nat:3> \times <var:k> ^ <nat:7> + <nat:3> \times <var:k> ^ <nat:6> + <nat:3> \times <var:k> ^ <nat:5> + <nat:3> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:1> \times <var:k> ^ <nat:2> + <nat:1> \times <var:k> + <nat:3> \} \\ <var:z> := <nat:1> + <var:z> * <var:C> ; \\ \{ <var:C> = <var:k> \land <var:z> = <nat:3> \times <var:k> ^ <nat:8> + <nat:3> \times <var:k> ^ <nat:7> + <nat:3> \times <var:k> ^ <nat:6> + <nat:3> \times <var:k> ^ <nat:5> + <nat:3> \times <var:k> ^ <nat:4> + <nat:1> \times <var:k> ^ <nat:3> + <nat:1> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:1> \} \end{eqnarray} Furthering the execution of our set of commands gives : \begin{eqnarray} <var:z> := <nat:3> + <var:z> * <var:C> ; \\ \{ <var:C> = <var:k> \land <var:z> = <nat:3> \times <var:k> ^ <nat:9> + <nat:3> \times <var:k> ^ <nat:8> + <nat:3> \times <var:k> ^ <nat:7> + <nat:3> \times <var:k> ^ <nat:6> + <nat:3> \times <var:k> ^ <nat:5> + <nat:1> \times <var:k> ^ <nat:4> + <nat:1> \times <var:k> ^ <nat:3> + <nat:3> \times <var:k> ^ <nat:2> + <nat:1> \times <var:k> + <nat:3> \} \\ <var:z> := <nat:4> + <var:z> * <var:C> \\ \{ <var:C> = <var:k> \land <var:z> = <nat:3> \times <var:k> ^ <nat:10> + <nat:3> \times <var:k> ^ <nat:9> + <nat:3> \times <var:k> ^ <nat:8> + <nat:3> \times <var:k> ^ <nat:7> + <nat:3> \times <var:k> ^ <nat:6> + <nat:1> \times <var:k> ^ <nat:5> + <nat:1> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:1> \times <var:k> ^ <nat:2> + <nat:3> \times <var:k> + <nat:4> \} \end{eqnarray} As a consequence , our list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:C> = <var:k> }} <var:z> := <nat:3> ; <var:z> := <nat:3> + <var:z> * <var:C> ; <var:z> := <nat:3> + <var:z> * <var:C> ; <var:z> := <nat:3> + <var:z> * <var:C> ; <var:z> := <nat:3> + <var:z> * <var:C> ; <var:z> := <nat:1> + <var:z> * <var:C> ; <var:z> := <nat:1> + <var:z> * <var:C> ; <var:z> := <nat:3> + <var:z> * <var:C> ; <var:z> := <nat:1> + <var:z> * <var:C> ; <var:z> := <nat:3> + <var:z> * <var:C> ; <var:z> := <nat:4> + <var:z> * <var:C> {{ <var:z> = <nat:3> * <var:k> ^ <nat:10> + <nat:3> * <var:k> ^ <nat:9> + <nat:3> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:1> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:z> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:z> = <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:z> = <nat:3> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:z> = <nat:3> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:z> = <nat:3> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:z> = <nat:3> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:z> = <nat:3> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:z> = <nat:3> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:z> = <nat:3> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:z> = <nat:3> * <var:k> ^ <nat:9> + <nat:3> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:1> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:1> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:k> /\ <var:z> = <nat:3> * <var:k> ^ <nat:10> + <nat:3> * <var:k> ^ <nat:9> + <nat:3> * <var:k> ^ <nat:8> + <nat:3> * <var:k> ^ <nat:7> + <nat:3> * <var:k> ^ <nat:6> + <nat:1> * <var:k> ^ <nat:5> + <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 