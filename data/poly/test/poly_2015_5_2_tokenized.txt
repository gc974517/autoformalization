\begin{document} \begin{definition} Define a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f> := <nat:1> ; <var:f> := <nat:1> + <var:f> * <var:I> ; <var:f> := <nat:3> + <var:f> * <var:I> ; <var:f> := <nat:1> + <var:f> * <var:I> ; <var:f> := <nat:3> + <var:f> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:I> = <var:v> $ ( taking positive integers $ <var:v> $ ) before interpreting this list of instructions then we see $ <var:f> = <nat:1> \cdot <var:v> ^ <nat:4> + <nat:1> \cdot <var:v> ^ <nat:3> + <nat:3> \cdot <var:v> ^ <nat:2> + <nat:1> \cdot <var:v> + <nat:3> $ once code finishes . \end{theorem} \begin{proof} Utilizing Hoare techniques gives : \begin{eqnarray} \{ <var:I> = <var:v> \} \\ <var:f> := <nat:1> ; \\ \{ <var:I> = <var:v> \land <var:f> = <nat:1> \} \\ <var:f> := <nat:1> + <var:f> * <var:I> ; \\ \{ <var:I> = <var:v> \land <var:f> = <nat:1> * <var:v> + <nat:1> \} \\ <var:f> := <nat:3> + <var:f> * <var:I> ; \\ \{ <var:I> = <var:v> \land <var:f> = <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:3> \} \\ <var:f> := <nat:1> + <var:f> * <var:I> ; \\ \{ <var:I> = <var:v> \land <var:f> = <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> \} \\ <var:f> := <nat:3> + <var:f> * <var:I> \\ \{ <var:I> = <var:v> \land <var:f> = <nat:1> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:3> \} \end{eqnarray} As a consequence , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:1> ; <var:f> := <nat:1> + <var:f> * <var:I> ; <var:f> := <nat:3> + <var:f> * <var:I> ; <var:f> := <nat:1> + <var:f> * <var:I> ; <var:f> := <nat:3> + <var:f> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:I> = <var:v> }} <def:poly> {{ <var:f> = <nat:1> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:f> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:f> = <nat:1> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:f> = <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:f> = <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:v> /\ <var:f> = <nat:1> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:3> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 