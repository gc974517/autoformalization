\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:A0> := <nat:3> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:J> ; <var:A2> := <nat:2> ; <var:A2> := <var:A2> * <var:J> ; <var:A2> := <var:A2> * <var:J> ; <var:i> := <var:A2> ; <var:i> := <var:i> + <var:A1> ; <var:i> := <var:i> + <var:A0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:J> = <var:L> $ --- given any $ <var:L> \in \mathbb{Z}^+ $ --- before evaluating this segment of code it follows that $ <var:i> = <nat:2> \cdot <var:L> ^ <nat:2> + <nat:6> \cdot <var:L> + <nat:3> $ when list of commands finishes . \end{theorem} \begin{proof} The argument for our segment of code can be given by Hoare techniques . Honing in on the subsequent bit of code seen in our set of instructions , the variable assignmet command \verb | <var:A0> := <nat:3> ; | . This statement advances $ \{ <var:J> = <var:L> \} $ as the postcondition $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \} $ . This is sound using the assignment inference rule obtained from standard Hoare logic . Advancing , we see the variable binding command \verb | <var:A1> := <nat:6> ; | . This statement takes $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \} $ as the postcondition $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:A1> = <nat:6> \} $ . This is sound through the assignment rule given in usual Hoare logic . Going forward , we see the variable assignmet line \verb | <var:A1> := <var:A1> * <var:J> ; | . This advances $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:A1> = <nat:6> \} $ into the condition $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:A1> = <nat:6> \times <var:L> \} $ . Looking at the subsequent step seen in our series of commands , the variable binding line letting $ <nat:2> $ into $ <var:A2>$ . This line advances the condition $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:A1> = <nat:6> \times <var:L> \} $ to the condition $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:A1> = <nat:6> \times <var:L> \land <var:A2> = <nat:2> \} $ . Observing the subsequent line of code contained in the series of commands , we see the binding command letting $ <var:A2> * <var:J> $ into $ <var:A2>$ . This line transfers $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:A1> = <nat:6> \times <var:L> \land <var:A2> = <nat:2> \} $ as the postcondition $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:A1> = <nat:6> \times <var:L> \land <var:A2> = <nat:2> \times <var:L> \} $ . This is guaranteed through the assignment scheme from typical Hoare reasoning . Paying attention to the following statement found in our series of commands , we have the binding code \verb | <var:A2> := <var:A2> * <var:J> ; | . This forwards the precondition $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:A1> = <nat:6> \times <var:L> \land <var:A2> = <nat:2> \times <var:L> \} $ toward $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:A1> = <nat:6> \times <var:L> \land <var:A2> = <nat:2> \times <var:L> ^ <nat:2> \} $ . This is guaranteed by the assignment rule in typical Hoare techniques . Further , we have the variable binding line defining $ <var:A2> $ as $ <var:i>$ . This takes the precondition $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:A1> = <nat:6> \times <var:L> \land <var:A2> = <nat:2> \times <var:L> ^ <nat:2> \} $ as the condition $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:A1> = <nat:6> \times <var:L> \land <var:i> = <nat:2> \times <var:L> ^ <nat:2> \} $ . This is deduced using the assignment inference rule found in standard Hoare techniques . Focusing on the upcoming piece of code found in the code segment , the assignment code \verb | <var:i> := <var:i> + <var:A1> ; | . This redefines $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:A1> = <nat:6> \times <var:L> \land <var:i> = <nat:2> \times <var:L> ^ <nat:2> \} $ to the postcondition $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:i> = <nat:2> \times <var:L> ^ <nat:2> + <nat:6> \times <var:L> \} $ . This is guaranteed with the assignment rule defined in standard Hoare techniques . Keeping momentum , we see the variable binding command \verb | <var:i> := <var:i> + <var:A0> | . This line moves the precondition $ \{ <var:J> = <var:L> \land <var:A0> = <nat:3> \land <var:i> = <nat:2> \times <var:L> ^ <nat:2> + <nat:6> \times <var:L> \} $ toward $ \{ <var:J> = <var:L> \land <var:i> = <nat:2> \times <var:L> ^ <nat:2> + <nat:6> \times <var:L> + <nat:3> \} $ . This is ensured through the assignment law defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:A0> : string := " <var:A0> " . Definition <var:A1> : string := " <var:A1> " . Definition <var:A2> : string := " <var:A2> " . Definition <def:poly> := <var:A0> := <nat:3> ; <var:A1> := <nat:6> ; <var:A1> := <var:A1> * <var:J> ; <var:A2> := <nat:2> ; <var:A2> := <var:A2> * <var:J> ; <var:A2> := <var:A2> * <var:J> ; <var:i> := <var:A2> ; <var:i> := <var:i> + <var:A1> ; <var:i> := <var:i> + <var:A0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:J> = <var:L> }} <def:poly> {{ <var:i> = <nat:2> * <var:L> ^ <nat:2> + <nat:6> * <var:L> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:A0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:6> * <var:L> /\ <var:A2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:6> * <var:L> /\ <var:A2> = <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:6> * <var:L> /\ <var:A2> = <nat:2> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:A0> = <nat:3> /\ <var:A1> = <nat:6> * <var:L> /\ <var:i> = <nat:2> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:A0> = <nat:3> /\ <var:i> = <nat:2> * <var:L> ^ <nat:2> + <nat:6> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:L> /\ <var:i> = <nat:2> * <var:L> ^ <nat:2> + <nat:6> * <var:L> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 