\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:H1> := <var:D> ; <var:H2> := <var:H1> * <var:D> ; <var:H3> := <var:H2> * <var:D> ; <var:H4> := <var:H3> * <var:D> ; <var:H0> := <nat:8> ; <var:H1> := <var:H1> * <nat:9> ; <var:H2> := <var:H2> * <nat:6> ; <var:H3> := <var:H3> * <nat:7> ; <var:H4> := <var:H4> * <nat:1> ; <var:v> := <var:H4> <var:v> := <var:v> + <var:H3> <var:v> := <var:v> + <var:H2> <var:v> := <var:v> + <var:H1> <var:v> := <var:v> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Consider a series of instructions <def:poly> . Assuming that we have $ <var:D> = <var:x> $ prior to interpreting this program , it holds that $ <var:v> = <nat:1> * <var:x> ^ <nat:4> + <nat:7> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> + <nat:9> * <var:x> + <nat:8> $ when series of commands finishes . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is evident by typical Hoare reasoning . Jumping to the following statement seen in our list of instructions , we see the variable binding command \verb | <var:H1> := <var:D> ; | . This code transfers $ \{ <var:D> = <var:x> \} $ into the postcondition $ \{ <var:D> = <var:x> \land <var:H1> = <var:x> \} $ . Going to the next step , we see the variable update command assigning $ <var:H1> * <var:D> $ as $ <var:H2>$ . This line advances the condition $ \{ <var:D> = <var:x> \land <var:H1> = <var:x> \} $ as $ \{ <var:D> = <var:x> \land <var:H1> = <var:x> \land <var:H2> = <var:x> ^ <nat:2> \} $ . This is shown by the assignment rule of usual Hoare logic . Taking another step toward the subsequent line seen in our code , the assignment command \verb | <var:H3> := <var:H2> * <var:D> ; | . This forwards the precondition $ \{ <var:D> = <var:x> \land <var:H1> = <var:x> \land <var:H2> = <var:x> ^ <nat:2> \} $ as the condition $ \{ <var:D> = <var:x> \land <var:H1> = <var:x> \land <var:H2> = <var:x> ^ <nat:2> \land <var:H3> = <var:x> ^ <nat:3> \} $ . This is shown using the assignment rule obtained from standard Hoare reasoning . Moving on , we see the assignment command \verb | <var:H4> := <var:H3> * <var:D> ; | . This command takes the precondition $ \{ <var:D> = <var:x> \land <var:H1> = <var:x> \land <var:H2> = <var:x> ^ <nat:2> \land <var:H3> = <var:x> ^ <nat:3> \} $ toward the condition $ \{ <var:D> = <var:x> \land <var:H1> = <var:x> \land <var:H2> = <var:x> ^ <nat:2> \land <var:H3> = <var:x> ^ <nat:3> \land <var:H4> = <var:x> ^ <nat:4> \} $ . Moving forward to the next step , we have the binding code \verb | <var:H0> := <nat:8> ; | . This takes the condition $ \{ <var:D> = <var:x> \land <var:H1> = <var:x> \land <var:H2> = <var:x> ^ <nat:2> \land <var:H3> = <var:x> ^ <nat:3> \land <var:H4> = <var:x> ^ <nat:4> \} $ into the postcondition $ \{ <var:D> = <var:x> \land <var:H1> = <var:x> \land <var:H2> = <var:x> ^ <nat:2> \land <var:H3> = <var:x> ^ <nat:3> \land <var:H4> = <var:x> ^ <nat:4> \land <var:H0> = <nat:8> \} $ . This is shown using the assignment rule given by Hoare techniques . Moving onward , we see the assignment statement letting $ <var:H1> * <nat:9> $ to $ <var:H1>$ . This takes the condition $ \{ <var:D> = <var:x> \land <var:H1> = <var:x> \land <var:H2> = <var:x> ^ <nat:2> \land <var:H3> = <var:x> ^ <nat:3> \land <var:H4> = <var:x> ^ <nat:4> \land <var:H0> = <nat:8> \} $ as $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H2> = <var:x> ^ <nat:2> \land <var:H3> = <var:x> ^ <nat:3> \land <var:H4> = <var:x> ^ <nat:4> \land <var:H0> = <nat:8> \} $ . This is known to be sound through the assignment law obtained from typical Hoare logic . Advancing , we see the variable assignmet command letting $ <var:H2> * <nat:6> $ toward $ <var:H2>$ . This line forwards $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H2> = <var:x> ^ <nat:2> \land <var:H3> = <var:x> ^ <nat:3> \land <var:H4> = <var:x> ^ <nat:4> \land <var:H0> = <nat:8> \} $ to $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H2> = <nat:6> \times <var:x> ^ <nat:2> \land <var:H3> = <var:x> ^ <nat:3> \land <var:H4> = <var:x> ^ <nat:4> \land <var:H0> = <nat:8> \} $ . This is known to be sound with the assignment law given by usual Hoare reasoning . Moving on to the next step found in our series of instructions , we see the binding statement \verb | <var:H3> := <var:H3> * <nat:7> ; | . This takes the condition $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H2> = <nat:6> \times <var:x> ^ <nat:2> \land <var:H3> = <var:x> ^ <nat:3> \land <var:H4> = <var:x> ^ <nat:4> \land <var:H0> = <nat:8> \} $ toward the condition $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H2> = <nat:6> \times <var:x> ^ <nat:2> \land <var:H3> = <nat:7> \times <var:x> ^ <nat:3> \land <var:H4> = <var:x> ^ <nat:4> \land <var:H0> = <nat:8> \} $ . After , the assignment command yielding $ <var:H4> * <nat:1> $ as $ <var:H4>$ . This redefines $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H2> = <nat:6> \times <var:x> ^ <nat:2> \land <var:H3> = <nat:7> \times <var:x> ^ <nat:3> \land <var:H4> = <var:x> ^ <nat:4> \land <var:H0> = <nat:8> \} $ to the condition $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H2> = <nat:6> \times <var:x> ^ <nat:2> \land <var:H3> = <nat:7> \times <var:x> ^ <nat:3> \land <var:H4> = <nat:1> \times <var:x> ^ <nat:4> \land <var:H0> = <nat:8> \} $ . Advancing to the next step , we have the variable update statement \verb | <var:v> := <var:H4> | . This code forwards the condition $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H2> = <nat:6> \times <var:x> ^ <nat:2> \land <var:H3> = <nat:7> \times <var:x> ^ <nat:3> \land <var:H4> = <nat:1> \times <var:x> ^ <nat:4> \land <var:H0> = <nat:8> \} $ as the condition $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H2> = <nat:6> \times <var:x> ^ <nat:2> \land <var:H3> = <nat:7> \times <var:x> ^ <nat:3> \land <var:H0> = <nat:8> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> \} $ . Advancing on , we have the assignment statement \verb | <var:v> := <var:v> + <var:H3> | . This transfers the precondition $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H2> = <nat:6> \times <var:x> ^ <nat:2> \land <var:H3> = <nat:7> \times <var:x> ^ <nat:3> \land <var:H0> = <nat:8> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> \} $ to the postcondition $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H2> = <nat:6> \times <var:x> ^ <nat:2> \land <var:H0> = <nat:8> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> + <nat:7> \times <var:x> ^ <nat:3> \} $ . This is sound using the assignment inference rule in standard Hoare reasoning . Shifting focus toward the next statement in the series of commands , we see the variable binding statement \verb | <var:v> := <var:v> + <var:H2> | . This line redefines the precondition $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H2> = <nat:6> \times <var:x> ^ <nat:2> \land <var:H0> = <nat:8> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> + <nat:7> \times <var:x> ^ <nat:3> \} $ to the postcondition $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H0> = <nat:8> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> + <nat:7> \times <var:x> ^ <nat:3> + <nat:6> \times <var:x> ^ <nat:2> \} $ . Further , we see the binding statement \verb | <var:v> := <var:v> + <var:H1> | . This moves the condition $ \{ <var:D> = <var:x> \land <var:H1> = <nat:9> \times <var:x> \land <var:H0> = <nat:8> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> + <nat:7> \times <var:x> ^ <nat:3> + <nat:6> \times <var:x> ^ <nat:2> \} $ to the postcondition $ \{ <var:D> = <var:x> \land <var:H0> = <nat:8> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> + <nat:7> \times <var:x> ^ <nat:3> + <nat:6> \times <var:x> ^ <nat:2> + <nat:9> \times <var:x> \} $ . This is rigorously given by the assignment rule found in standard Hoare logic . Advancing on , the variable update line giving $ <var:v> + <var:H0$ toward $ <var:v>$ . This redefines $ \{ <var:D> = <var:x> \land <var:H0> = <nat:8> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> + <nat:7> \times <var:x> ^ <nat:3> + <nat:6> \times <var:x> ^ <nat:2> + <nat:9> \times <var:x> \} $ to $ \{ <var:D> = <var:x> \land <var:v> = <nat:1> \times <var:x> ^ <nat:4> + <nat:7> \times <var:x> ^ <nat:3> + <nat:6> \times <var:x> ^ <nat:2> + <nat:9> \times <var:x> + <nat:8> \} $ . This is ensured by the assignment inference rule in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <var:H3> : string := " <var:H3> " . Definition <var:H4> : string := " <var:H4> " . Definition <def:poly> := <var:H1> := <var:D> ; <var:H2> := <var:H1> * <var:D> ; <var:H3> := <var:H2> * <var:D> ; <var:H4> := <var:H3> * <var:D> ; <var:H0> := <nat:8> ; <var:H1> := <var:H1> * <nat:9> ; <var:H2> := <var:H2> * <nat:6> ; <var:H3> := <var:H3> * <nat:7> ; <var:H4> := <var:H4> * <nat:1> ; <var:v> := <var:H4> <var:v> := <var:v> + <var:H3> <var:v> := <var:v> + <var:H2> <var:v> := <var:v> + <var:H1> <var:v> := <var:v> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:D> = <var:x> }} <def:poly> {{ <var:v> = <nat:1> * <var:x> ^ <nat:4> + <nat:7> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> + <nat:9> * <var:x> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:H1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:H1> = <var:x> /\ <var:H2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:H1> = <var:x> /\ <var:H2> = <var:x> ^ <nat:2> /\ <var:H3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:H1> = <var:x> /\ <var:H2> = <var:x> ^ <nat:2> /\ <var:H3> = <var:x> ^ <nat:3> /\ <var:H4> = <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:H1> = <var:x> /\ <var:H2> = <var:x> ^ <nat:2> /\ <var:H3> = <var:x> ^ <nat:3> /\ <var:H4> = <var:x> ^ <nat:4> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:H1> = <nat:9> * <var:x> /\ <var:H2> = <var:x> ^ <nat:2> /\ <var:H3> = <var:x> ^ <nat:3> /\ <var:H4> = <var:x> ^ <nat:4> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:H1> = <nat:9> * <var:x> /\ <var:H2> = <nat:6> * <var:x> ^ <nat:2> /\ <var:H3> = <var:x> ^ <nat:3> /\ <var:H4> = <var:x> ^ <nat:4> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:H1> = <nat:9> * <var:x> /\ <var:H2> = <nat:6> * <var:x> ^ <nat:2> /\ <var:H3> = <nat:7> * <var:x> ^ <nat:3> /\ <var:H4> = <var:x> ^ <nat:4> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:H1> = <nat:9> * <var:x> /\ <var:H2> = <nat:6> * <var:x> ^ <nat:2> /\ <var:H3> = <nat:7> * <var:x> ^ <nat:3> /\ <var:H4> = <nat:1> * <var:x> ^ <nat:4> /\ <var:H0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:H1> = <nat:9> * <var:x> /\ <var:H2> = <nat:6> * <var:x> ^ <nat:2> /\ <var:H3> = <nat:7> * <var:x> ^ <nat:3> /\ <var:H0> = <nat:8> /\ <var:v> = <nat:1> * <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:H1> = <nat:9> * <var:x> /\ <var:H2> = <nat:6> * <var:x> ^ <nat:2> /\ <var:H0> = <nat:8> /\ <var:v> = <nat:1> * <var:x> ^ <nat:4> + <nat:7> * <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:H1> = <nat:9> * <var:x> /\ <var:H0> = <nat:8> /\ <var:v> = <nat:1> * <var:x> ^ <nat:4> + <nat:7> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:H0> = <nat:8> /\ <var:v> = <nat:1> * <var:x> ^ <nat:4> + <nat:7> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> + <nat:9> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:x> /\ <var:v> = <nat:1> * <var:x> ^ <nat:4> + <nat:7> * <var:x> ^ <nat:3> + <nat:6> * <var:x> ^ <nat:2> + <nat:9> * <var:x> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 