\begin{document} \begin{theorem} Let the following program in \emph{Imp} such that \begin{verbatim} <var:e> := <nat:1> ; <var:e> := <var:e> * <var:n> ; <var:e> := <nat:1> + <var:e> * <var:n> ; <var:e> := <nat:2> + <var:e> * <var:n> ; <var:e> := <nat:1> + <var:e> * <var:n> ; <var:e> := <var:e> * <var:n> ; <var:e> := <nat:2> + <var:e> * <var:n> ; <var:e> := <nat:4> + <var:e> * <var:n> ; <var:e> := <nat:2> + <var:e> * <var:n> ; <var:e> := <var:e> * <var:n> ; <var:e> := <nat:1> + <var:e> * <var:n> \end{verbatim} Allowing that $ <var:n> = <var:V> $ ( for all whole numbers $ <var:V> $ ) ahead of evaluating our program , it follows that we have $ <var:e> = <nat:1> \times <var:V> ^ <nat:10> + <nat:1> \times <var:V> ^ <nat:8> + <nat:2> \times <var:V> ^ <nat:7> + <nat:1> \times <var:V> ^ <nat:6> + <nat:2> \times <var:V> ^ <nat:4> + <nat:4> \times <var:V> ^ <nat:3> + <nat:2> \times <var:V> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for the list of commands can be demonstrated through typical Hoare logic . Further , \begin{verbatim} { <var:n> = <var:V> } <var:e> := <nat:1> { <var:n> = <var:V> \land <var:e> = <nat:1> } { <var:n> = <var:V> \land <var:e> = <nat:1> } <var:e> := <var:e> * <var:n> { <var:n> = <var:V> \land <var:e> = <nat:1> \cdot <var:V> + } { <var:n> = <var:V> \land <var:e> = <nat:1> \cdot <var:V> + } <var:e> := <nat:1> + <var:e> * <var:n> { <var:n> = <var:V> \land <var:e> = <nat:1> \cdot <var:V> ^ <nat:2> + <nat:1> } { <var:n> = <var:V> \land <var:e> = <nat:1> \cdot <var:V> ^ <nat:2> + <nat:1> } <var:e> := <nat:2> + <var:e> * <var:n> { <var:n> = <var:V> \land <var:e> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:1> \cdot <var:V> + <nat:2> } \end{verbatim} This is sound with the variable update rule in Hoare logic . Observing the upcoming statements seen in our code segment , \begin{verbatim} { <var:n> = <var:V> } <var:e> := <nat:1> { <var:n> = <var:V> \land <var:e> = <nat:1> } { <var:n> = <var:V> \land <var:e> = <nat:1> } <var:e> := <var:e> * <var:n> { <var:n> = <var:V> \land <var:e> = <nat:1> \cdot <var:V> + } { <var:n> = <var:V> \land <var:e> = <nat:1> \cdot <var:V> + } <var:e> := <nat:1> + <var:e> * <var:n> { <var:n> = <var:V> \land <var:e> = <nat:1> \cdot <var:V> ^ <nat:2> + <nat:1> } { <var:n> = <var:V> \land <var:e> = <nat:1> \cdot <var:V> ^ <nat:2> + <nat:1> } <var:e> := <nat:2> + <var:e> * <var:n> { <var:n> = <var:V> \land <var:e> = <nat:1> \cdot <var:V> ^ <nat:3> + <nat:1> \cdot <var:V> + <nat:2> } \end{verbatim} This is shown to be logically sound with the variable assignmet inference rule of usual Hoare techniques . Next , we see \begin{verbatim} { <var:n> = <var:V> } <var:e> := <nat:1> { <var:n> = <var:V> \land <var:e> = <nat:1> } { <var:n> = <var:V> \land <var:e> = <nat:1> } <var:e> := <var:e> * <var:n> { <var:n> = <var:V> \land <var:e> = <nat:1> \cdot <var:V> + } { <var:n> = <var:V> \land <var:e> = <nat:1> \cdot <var:V> + } <var:e> := <nat:1> + <var:e> * <var:n> { <var:n> = <var:V> \land <var:e> = <nat:1> \cdot <var:V> ^ <nat:2> + <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:n> = <var:V> }} <var:e> := <nat:1> ; <var:e> := <var:e> * <var:n> ; <var:e> := <nat:1> + <var:e> * <var:n> ; <var:e> := <nat:2> + <var:e> * <var:n> ; <var:e> := <nat:1> + <var:e> * <var:n> ; <var:e> := <var:e> * <var:n> ; <var:e> := <nat:2> + <var:e> * <var:n> ; <var:e> := <nat:4> + <var:e> * <var:n> ; <var:e> := <nat:2> + <var:e> * <var:n> ; <var:e> := <var:e> * <var:n> ; <var:e> := <nat:1> + <var:e> * <var:n> {{ <var:e> = <nat:1> * <var:V> ^ <nat:10> + <nat:1> * <var:V> ^ <nat:8> + <nat:2> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:e> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:e> = <nat:1> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:e> = <nat:1> * <var:V> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:e> = <nat:1> * <var:V> ^ <nat:3> + <nat:1> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:e> = <nat:1> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:e> = <nat:1> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:e> = <nat:1> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:e> = <nat:1> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:4> + <nat:1> * <var:V> ^ <nat:3> + <nat:2> * <var:V> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:e> = <nat:1> * <var:V> ^ <nat:8> + <nat:1> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:5> + <nat:1> * <var:V> ^ <nat:4> + <nat:2> * <var:V> ^ <nat:2> + <nat:4> * <var:V> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:e> = <nat:1> * <var:V> ^ <nat:9> + <nat:1> * <var:V> ^ <nat:7> + <nat:2> * <var:V> ^ <nat:6> + <nat:1> * <var:V> ^ <nat:5> + <nat:2> * <var:V> ^ <nat:3> + <nat:4> * <var:V> ^ <nat:2> + <nat:2> * <var:V> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:V> /\ <var:e> = <nat:1> * <var:V> ^ <nat:10> + <nat:1> * <var:V> ^ <nat:8> + <nat:2> * <var:V> ^ <nat:7> + <nat:1> * <var:V> ^ <nat:6> + <nat:2> * <var:V> ^ <nat:4> + <nat:4> * <var:V> ^ <nat:3> + <nat:2> * <var:V> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 