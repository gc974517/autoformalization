\begin{document} \begin{theorem} Take the following list of commands such that \begin{verbatim} <var:y0> := <nat:4> ; <var:y1> := <nat:6> ; <var:y1> := <var:y1> * <var:S> ; <var:y2> := <nat:2> ; <var:y2> := <var:y2> * <var:S> ; <var:y2> := <var:y2> * <var:S> ; <var:p> := <var:y2> ; <var:p> := <var:p> + <var:y1> ; <var:p> := <var:p> + <var:y0> \end{verbatim} Assume ( for natural coefficients $ <var:b> $ ) that $ <var:S> = <var:b> $ prior to executing this program it holds that we have $ <var:p> = <nat:2> \cdot <var:b> ^ <nat:2> + <nat:6> \cdot <var:b> + <nat:4> $ . \end{theorem} \begin{proof} The proof of our list of commands is demonstrated with Hoare reasoning . Advancing to the proceeding pieces of code seen in our program , we see \begin{eqnarray} \{ <var:S> = <var:b> \} \, <var:y0> := <nat:4> \, \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \} \\ \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \} \, <var:y1> := <nat:6> \, \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> \} \\ \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> \} \, <var:y1> := <var:y1> * <var:S> \, \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:b> \} \\ \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:b> \} \, <var:y2> := <nat:2> \, \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:b> \land <var:y2> = <nat:2> \} \\ \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:b> \land <var:y2> = <nat:2> \} \, <var:y2> := <var:y2> * <var:S> \, \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:b> \land <var:y2> = <nat:2> * <var:b> \} \\ \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:b> \land <var:y2> = <nat:2> * <var:b> \} \, <var:y2> := <var:y2> * <var:S> \, \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:b> \land <var:y2> = <nat:2> * <var:b> ^ <nat:2> \} \\ \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:b> \land <var:y2> = <nat:2> * <var:b> ^ <nat:2> \} \, <var:p> := <var:y2> \, \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \land <var:y1> = <nat:6> * <var:b> \land <var:p> = <nat:2> * <var:b> ^ <nat:2> \} \end{eqnarray} Next , we see \begin{eqnarray} \{ <var:S> = <var:b> \} \, <var:y0> := <nat:4> \, \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \} \end{eqnarray} Keeping momentum , \begin{eqnarray} \{ <var:S> = <var:b> \} \, <var:y0> := <nat:4> \, \{ <var:S> = <var:b> \land <var:y0> = <nat:4> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:S> = <var:b> }} <var:y0> := <nat:4> ; <var:y1> := <nat:6> ; <var:y1> := <var:y1> * <var:S> ; <var:y2> := <nat:2> ; <var:y2> := <var:y2> * <var:S> ; <var:y2> := <var:y2> * <var:S> ; <var:p> := <var:y2> ; <var:p> := <var:p> + <var:y1> ; <var:p> := <var:p> + <var:y0> {{ <var:p> = <nat:2> * <var:b> ^ <nat:2> + <nat:6> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:b> /\ <var:y2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:b> /\ <var:y2> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:b> /\ <var:y2> = <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:y0> = <nat:4> /\ <var:y1> = <nat:6> * <var:b> /\ <var:p> = <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:y0> = <nat:4> /\ <var:p> = <nat:2> * <var:b> ^ <nat:2> + <nat:6> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:b> /\ <var:p> = <nat:2> * <var:b> ^ <nat:2> + <nat:6> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 