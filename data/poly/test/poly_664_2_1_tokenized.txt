\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} as \begin{verbatim} <var:w0> := <nat:4> ; <var:j> := <var:w0> \end{verbatim} Allowing $ <var:x> = <var:d> $ ahead of evaluating this set of instructions then we have $ <var:j> = <nat:4> $ once segment of code has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:x> = <var:d> \} \\ <var:w0> := <nat:4> ; \\ \{ <var:x> = <var:d> \land <var:w0> = <nat:4> \} \\ <var:j> := <var:w0> \\ \{ <var:x> = <var:d> \land <var:j> = <nat:4> \} \end{eqnarray} Using typical Hoare techniques finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:x> = <var:d> }} <var:w0> := <nat:4> ; <var:j> := <var:w0> {{ <var:j> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:w0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:d> /\ <var:j> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 