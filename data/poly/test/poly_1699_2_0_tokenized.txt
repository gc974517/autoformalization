\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} as \begin{verbatim} <var:d0> := <nat:1> ; <var:o> := <var:d0> \end{verbatim} \end{definition} \begin{theorem} Take a code <def:poly> . Assume given any natural coefficients $ <var:c> $ it to hold that $ <var:x> = <var:c> $ prior to evaluating the segment of code , then we see $ <var:o> = <nat:1> $ . \end{theorem} \begin{proof} The argument for this segment of code can be accomplished with standard Hoare techniques . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:x> = <var:c> \} & <var:d0> := <nat:1> & \{ <var:x> = <var:c> \land <var:d0> = <nat:1> \} \\ \{ <var:x> = <var:c> \land <var:d0> = <nat:1> \} & <var:o> := <var:d0& \{ <var:x> = <var:c> \land <var:o> = <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <def:poly> := <var:d0> := <nat:1> ; <var:o> := <var:d0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:x> = <var:c> }} <def:poly> {{ <var:o> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:d0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:c> /\ <var:o> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 