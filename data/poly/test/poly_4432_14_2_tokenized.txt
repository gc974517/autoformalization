\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:D> := <nat:1> ; <var:D> := <nat:1> + <var:D> * <var:t> ; <var:D> := <nat:1> + <var:D> * <var:t> ; <var:D> := <var:D> * <var:t> ; <var:D> := <var:D> * <var:t> ; <var:D> := <var:D> * <var:t> ; <var:D> := <nat:1> + <var:D> * <var:t> ; <var:D> := <nat:2> + <var:D> * <var:t> ; <var:D> := <nat:3> + <var:D> * <var:t> ; <var:D> := <var:D> * <var:t> ; <var:D> := <nat:2> + <var:D> * <var:t> ; <var:D> := <nat:2> + <var:D> * <var:t> ; <var:D> := <nat:4> + <var:D> * <var:t> ; <var:D> := <nat:3> + <var:D> * <var:t> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:t> = <var:F> $ --- letting positive integer coefficients $ <var:F> $ --- before running our series of commands it holds that we see $ <var:D> = <nat:1> \times <var:F> ^ <nat:13> + <nat:1> \times <var:F> ^ <nat:12> + <nat:1> \times <var:F> ^ <nat:11> + <nat:1> \times <var:F> ^ <nat:7> + <nat:2> \times <var:F> ^ <nat:6> + <nat:3> \times <var:F> ^ <nat:5> + <nat:2> \times <var:F> ^ <nat:3> + <nat:2> \times <var:F> ^ <nat:2> + <nat:4> \times <var:F> + <nat:3> $ . \end{theorem} \begin{proof} The argument for the set of instructions can be given by standard Hoare logic . Taking another step toward the proceeding pieces of code contained in our code , we see \begin{eqnarray} \{ <var:t> = <var:F> \} \, <var:D> := <nat:1> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \} \\ \{ <var:t> = <var:F> \land <var:D> = <nat:1> \} \, <var:D> := <nat:1> + <var:D> * <var:t> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> + <nat:1> \} \\ \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> + <nat:1> \} \, <var:D> := <nat:1> + <var:D> * <var:t> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:1> \} \\ \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:1> \} \, <var:D> := <var:D> * <var:t> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + \} \\ \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + \} \, <var:D> := <var:D> * <var:t> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + \} \end{eqnarray} This is ensured through the assignment scheme found in Hoare logic . Jumping to the upcoming lines of codeseen in the set of instructions , \begin{eqnarray} \{ <var:t> = <var:F> \} \, <var:D> := <nat:1> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \} \\ \{ <var:t> = <var:F> \land <var:D> = <nat:1> \} \, <var:D> := <nat:1> + <var:D> * <var:t> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> + <nat:1> \} \\ \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> + <nat:1> \} \, <var:D> := <nat:1> + <var:D> * <var:t> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:1> \} \\ \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + <nat:1> \} \, <var:D> := <var:D> * <var:t> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + \} \\ \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + <nat:1> \times <var:F> + \} \, <var:D> := <var:D> * <var:t> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + \} \\ \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + <nat:1> \times <var:F> ^ <nat:2> + \} \, <var:D> := <var:D> * <var:t> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + \} \\ \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> ^ <nat:4> + <nat:1> \times <var:F> ^ <nat:3> + \} \, <var:D> := <nat:1> + <var:D> * <var:t> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> ^ <nat:4> + <nat:1> \} \\ \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> ^ <nat:4> + <nat:1> \} \, <var:D> := <nat:2> + <var:D> * <var:t> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:7> + <nat:1> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> + <nat:2> \} \\ \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:7> + <nat:1> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:5> + <nat:1> \times <var:F> + <nat:2> \} \, <var:D> := <nat:3> + <var:D> * <var:t> \, \{ <var:t> = <var:F> \land <var:D> = <nat:1> \times <var:F> ^ <nat:8> + <nat:1> \times <var:F> ^ <nat:7> + <nat:1> \times <var:F> ^ <nat:6> + <nat:1> \times <var:F> ^ <nat:2> + <nat:2> \times <var:F> + <nat:3> \} \end{eqnarray} This is given through the assignment inference rule given by usual Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:D> := <nat:1> ; <var:D> := <nat:1> + <var:D> * <var:t> ; <var:D> := <nat:1> + <var:D> * <var:t> ; <var:D> := <var:D> * <var:t> ; <var:D> := <var:D> * <var:t> ; <var:D> := <var:D> * <var:t> ; <var:D> := <nat:1> + <var:D> * <var:t> ; <var:D> := <nat:2> + <var:D> * <var:t> ; <var:D> := <nat:3> + <var:D> * <var:t> ; <var:D> := <var:D> * <var:t> ; <var:D> := <nat:2> + <var:D> * <var:t> ; <var:D> := <nat:2> + <var:D> * <var:t> ; <var:D> := <nat:4> + <var:D> * <var:t> ; <var:D> := <nat:3> + <var:D> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:t> = <var:F> }} <def:poly> {{ <var:D> = <nat:1> * <var:F> ^ <nat:13> + <nat:1> * <var:F> ^ <nat:12> + <nat:1> * <var:F> ^ <nat:11> + <nat:1> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:3> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + <nat:1> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + <nat:1> * <var:F> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:1> * <var:F> ^ <nat:3> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:1> * <var:F> ^ <nat:4> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:5> + <nat:1> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:6> + <nat:1> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:7> + <nat:1> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:3> * <var:F> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> * <var:F> ^ <nat:10> + <nat:1> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:8> + <nat:1> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:3> + <nat:3> * <var:F> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> * <var:F> ^ <nat:11> + <nat:1> * <var:F> ^ <nat:10> + <nat:1> * <var:F> ^ <nat:9> + <nat:1> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:4> + <nat:3> * <var:F> ^ <nat:3> + <nat:2> * <var:F> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> * <var:F> ^ <nat:12> + <nat:1> * <var:F> ^ <nat:11> + <nat:1> * <var:F> ^ <nat:10> + <nat:1> * <var:F> ^ <nat:6> + <nat:2> * <var:F> ^ <nat:5> + <nat:3> * <var:F> ^ <nat:4> + <nat:2> * <var:F> ^ <nat:2> + <nat:2> * <var:F> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:F> /\ <var:D> = <nat:1> * <var:F> ^ <nat:13> + <nat:1> * <var:F> ^ <nat:12> + <nat:1> * <var:F> ^ <nat:11> + <nat:1> * <var:F> ^ <nat:7> + <nat:2> * <var:F> ^ <nat:6> + <nat:3> * <var:F> ^ <nat:5> + <nat:2> * <var:F> ^ <nat:3> + <nat:2> * <var:F> ^ <nat:2> + <nat:4> * <var:F> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 