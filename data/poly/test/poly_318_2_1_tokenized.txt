\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:D0> := <nat:4> ; <var:G> := <var:D0> \end{verbatim} \end{definition} \begin{theorem} Assuming $ <var:e> = <var:i> $ prior to evaluating our series of commands it follows that we see $ <var:G> = <nat:4> $ . \end{theorem} \begin{proof} Using usual Hoare techniques returns : \begin{eqnarray} \{ <var:e> = <var:i> \} \\ <var:D0> := <nat:4> ; \\ \{ <var:e> = <var:i> \land <var:D0> = <nat:4> \} \\ <var:G> := <var:D0> \\ \{ <var:e> = <var:i> \land <var:G> = <nat:4> \} \end{eqnarray} As a consequence , the set of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:D0> : string := " <var:D0> " . Definition <def:poly> := <var:D0> := <nat:4> ; <var:G> := <var:D0> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:e> = <var:i> }} <def:poly> {{ <var:G> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:i> /\ <var:D0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:i> /\ <var:G> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 