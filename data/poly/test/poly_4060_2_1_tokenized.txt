\begin{document} \begin{theorem} We define the following series of commands as \begin{verbatim} <var:i0> := <nat:8> ; <var:w> := <var:i0> \end{verbatim} Allow it to be that $ <var:J> = <var:n> $ , with some $ <var:n> $ , ahead of the execution of our segment of code , it holds that we have $ <var:w> = <nat:8> $ after list of commands has executed . \end{theorem} \begin{proof} Showing our claim about correctness for our program is demonstrated with Hoare reasoning . Going to the next step , the variable assignmet statement giving $ <nat:8> $ toward $ <var:i0>$ . This redefines the precondition $ \{ <var:J> = <var:n> \} $ to the condition $ \{ <var:J> = <var:n> \land <var:i0> = <nat:8> \} $ . Now , the statement \verb | <var:w> := <var:i0> | . This line transfers the precondition $ \{ <var:J> = <var:n> \land <var:i0> = <nat:8> \} $ into the postcondition $ \{ <var:J> = <var:n> \land <var:w> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:J> = <var:n> }} <var:i0> := <nat:8> ; <var:w> := <var:i0> {{ <var:w> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:n> /\ <var:i0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:n> /\ <var:w> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 