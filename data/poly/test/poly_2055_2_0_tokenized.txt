\begin{document} \begin{theorem} Define a set of commands in \emph{Imp} as follows \begin{verbatim} <var:F0> := <nat:8> ; <var:s> := <var:F0> \end{verbatim} Assuming $ <var:c> = <var:E> $ before the evaluation of the series of instructions it holds that we have $ <var:s> = <nat:8> $ after program finishes . \end{theorem} \begin{proof} The proof of the set of commands can be shown by Hoare techniques . Advancing , the binding command \verb | <var:F0> := <nat:8> ; | . This moves the condition $ \{ <var:c> = <var:E> \} $ to the condition $ \{ <var:c> = <var:E> \land <var:F0> = <nat:8> \} $ . This is sound by the assignment scheme defined in typical Hoare techniques . Taking another step toward the following line of code in our list of commands , we see the variable binding command \verb | <var:s> := <var:F0> | . This line redefines the precondition $ \{ <var:c> = <var:E> \land <var:F0> = <nat:8> \} $ as the condition $ \{ <var:c> = <var:E> \land <var:s> = <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:F0> : string := " <var:F0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:c> = <var:E> }} <var:F0> := <nat:8> ; <var:s> := <var:F0> {{ <var:s> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:F0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:E> /\ <var:s> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 