\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:V0> := <nat:2> ; <var:V1> := <nat:9> ; <var:V1> := <var:V1> * <var:h> ; <var:V2> := <nat:1> ; <var:V2> := <var:V2> * <var:h> ; <var:V2> := <var:V2> * <var:h> ; <var:B> := <var:V2> ; <var:B> := <var:B> + <var:V1> ; <var:B> := <var:B> + <var:V0> \end{verbatim} \end{definition} \begin{theorem} Consider the following list of commands <def:poly> in \emph{Imp} . Assume for all natural numbers $ <var:Y> $ $ <var:h> = <var:Y> $ prior to evaluating our code segment then we have $ <var:B> = <nat:1> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:2> $ . \end{theorem} \begin{proof} Arguing the correctness of the code segment is given using typical Hoare reasoning . Considering the subsequent command in the set of instructions , the binding command \verb | <var:V0> := <nat:2> ; | . This redefines $ \{ <var:h> = <var:Y> \} $ as the condition $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \} $ . Looking at the next piece of code contained in the set of commands , we have the variable update line giving $ <nat:9> $ to $ <var:V1>$ . This line moves $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \} $ toward the postcondition $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:V1> = <nat:9> \} $ . Advancing , we have the variable assignmet command assigning $ <var:V1> * <var:h> $ as $ <var:V1>$ . This moves the precondition $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:V1> = <nat:9> \} $ as the condition $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:V1> = <nat:9> \times <var:Y> \} $ . This is rigorously given with the assignment rule found in typical Hoare reasoning . Honing in on the upcoming line of code seen in the code segment , we have the variable update line defining $ <nat:1> $ as $ <var:V2>$ . This code advances the precondition $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:V1> = <nat:9> \times <var:Y> \} $ into the condition $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:V1> = <nat:9> \times <var:Y> \land <var:V2> = <nat:1> \} $ . Advancing to the next step , we see the variable assignmet command \verb | <var:V2> := <var:V2> * <var:h> ; | . This redefines $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:V1> = <nat:9> \times <var:Y> \land <var:V2> = <nat:1> \} $ toward the condition $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:V1> = <nat:9> \times <var:Y> \land <var:V2> = <nat:1> \times <var:Y> \} $ . Honing in on the upcoming step seen in our code , we have the assignment line \verb | <var:V2> := <var:V2> * <var:h> ; | . This transfers the condition $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:V1> = <nat:9> \times <var:Y> \land <var:V2> = <nat:1> \times <var:Y> \} $ into the condition $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:V1> = <nat:9> \times <var:Y> \land <var:V2> = <nat:1> \times <var:Y> ^ <nat:2> \} $ . This is shown by the assignment scheme obtained from Hoare techniques . Paying attention to the upcoming bit of code seen in the series of instructions , we see the binding command \verb | <var:B> := <var:V2> ; | . This takes $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:V1> = <nat:9> \times <var:Y> \land <var:V2> = <nat:1> \times <var:Y> ^ <nat:2> \} $ to the condition $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:V1> = <nat:9> \times <var:Y> \land <var:B> = <nat:1> \times <var:Y> ^ <nat:2> \} $ . Immediately following , we see the environment update statement defining $ <var:B> + <var:V1> $ to $ <var:B>$ . This code advances the condition $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:V1> = <nat:9> \times <var:Y> \land <var:B> = <nat:1> \times <var:Y> ^ <nat:2> \} $ into $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:B> = <nat:1> \times <var:Y> ^ <nat:2> + <nat:9> \times <var:Y> \} $ . Paying attention to the next line in our series of instructions , we have the environment update line giving $ <var:B> + <var:V0$ as $ <var:B>$ . This transfers $ \{ <var:h> = <var:Y> \land <var:V0> = <nat:2> \land <var:B> = <nat:1> \times <var:Y> ^ <nat:2> + <nat:9> \times <var:Y> \} $ toward the condition $ \{ <var:h> = <var:Y> \land <var:B> = <nat:1> \times <var:Y> ^ <nat:2> + <nat:9> \times <var:Y> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:V0> : string := " <var:V0> " . Definition <var:V1> : string := " <var:V1> " . Definition <var:V2> : string := " <var:V2> " . Definition <def:poly> := <var:V0> := <nat:2> ; <var:V1> := <nat:9> ; <var:V1> := <var:V1> * <var:h> ; <var:V2> := <nat:1> ; <var:V2> := <var:V2> * <var:h> ; <var:V2> := <var:V2> * <var:h> ; <var:B> := <var:V2> ; <var:B> := <var:B> + <var:V1> ; <var:B> := <var:B> + <var:V0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:h> = <var:Y> }} <def:poly> {{ <var:B> = <nat:1> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:V0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:9> * <var:Y> /\ <var:V2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:9> * <var:Y> /\ <var:V2> = <nat:1> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:9> * <var:Y> /\ <var:V2> = <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:V0> = <nat:2> /\ <var:V1> = <nat:9> * <var:Y> /\ <var:B> = <nat:1> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:V0> = <nat:2> /\ <var:B> = <nat:1> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:B> = <nat:1> * <var:Y> ^ <nat:2> + <nat:9> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 