\begin{document} \begin{theorem} Let the following list of instructions as \begin{verbatim} <var:g0> := <nat:8> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:P> ; <var:o> := <var:g1> ; <var:o> := <var:o> + <var:g0> \end{verbatim} Assuming it to hold that $ <var:P> = <var:Q> $ ahead of executing our program , then we have $ <var:o> = <nat:2> * <var:Q> + <nat:8> $ once series of commands has finished executing . \end{theorem} \begin{proof} The way to prove correctness for the segment of code can be demonstrated using usual Hoare reasoning . Going to the next step , \[ \begin{tabular} {rcl} \{ <var:P> = <var:Q> \} & <var:g0> := <nat:8> & \{ <var:P> = <var:Q> \land <var:g0> = <nat:8> \} \\ \{ <var:P> = <var:Q> \land <var:g0> = <nat:8> \} & <var:g1> := <nat:2> & \{ <var:P> = <var:Q> \land <var:g0> = <nat:8> \land <var:g1> = <nat:2> \} \\ \{ <var:P> = <var:Q> \land <var:g0> = <nat:8> \land <var:g1> = <nat:2> \} & <var:g1> := <var:g1> * <var:P> & \{ <var:P> = <var:Q> \land <var:g0> = <nat:8> \land <var:g1> = <nat:2> * <var:Q> \} \end{tabular} This is known to be sound through the variable assignmet law of standard Hoare logic . Moving forward to the next line found in the series of commands , we see \[ \begin{tabular} {rcl} \{ <var:P> = <var:Q> \} & <var:g0> := <nat:8> & \{ <var:P> = <var:Q> \land <var:g0> = <nat:8> \} \end{tabular} Stepping through , we see \[ \begin{tabular} {rcl} \{ <var:P> = <var:Q> \} & <var:g0> := <nat:8> & \{ <var:P> = <var:Q> \land <var:g0> = <nat:8> \} \end{tabular} This is guaranteed through the law given by usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:P> = <var:Q> }} <var:g0> := <nat:8> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:P> ; <var:o> := <var:g1> ; <var:o> := <var:o> + <var:g0> {{ <var:o> = <nat:2> * <var:Q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:2> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:g0> = <nat:8> /\ <var:o> = <nat:2> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Q> /\ <var:o> = <nat:2> * <var:Q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 