\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:3> ; <var:w> := <var:f0> \end{verbatim} Allow , given all $ <var:E> $ , that we have $ <var:N> = <var:E> $ ahead of the evaluation of our program , it follows that we have $ <var:w> = <nat:3> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code is accomplished by typical Hoare reasoning . Advancing , we have \verb | { <var:N> = <var:E> } <var:f0> := <nat:3> { <var:N> = <var:E> \land <var:f0> = <nat:3> } | and \verb | { <var:N> = <var:E> \land <var:f0> = <nat:3> } <var:w> := <var:f0{ <var:N> = <var:E> \land <var:w> = <nat:3> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:N> = <var:E> }} <var:f0> := <nat:3> ; <var:w> := <var:f0> {{ <var:w> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:E> /\ <var:w> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 