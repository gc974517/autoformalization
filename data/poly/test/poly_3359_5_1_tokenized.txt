\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:U1> := <var:l> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:4> ; <var:b> := <var:U1> <var:b> := <var:b> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:l> = <var:B> $ --- given every positive integers $ <var:B> $ --- ahead of executing this segment of code , it must be that $ <var:b> = <nat:4> \cdot <var:B> + <nat:3> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques returns : \begin{eqnarray} \{ <var:l> = <var:B> \} \\ <var:U1> := <var:l> ; \\ \{ <var:l> = <var:B> \land <var:U1> = <var:B> \} \\ <var:U0> := <nat:3> ; \\ \{ <var:l> = <var:B> \land <var:U1> = <var:B> \land <var:U0> = <nat:3> \} \\ <var:U1> := <var:U1> * <nat:4> ; \\ \{ <var:l> = <var:B> \land <var:U1> = <nat:4> * <var:B> \land <var:U0> = <nat:3> \} \\ <var:b> := <var:U1> \\ \{ <var:l> = <var:B> \land <var:U0> = <nat:3> \land <var:b> = <nat:4> * <var:B> \} \\ <var:b> := <var:b> + <var:U0> \\ \{ <var:l> = <var:B> \land <var:b> = <nat:4> * <var:B> + <nat:3> \} \end{eqnarray} Considering the above , this list of instructions is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:l> ; <var:U0> := <nat:3> ; <var:U1> := <var:U1> * <nat:4> ; <var:b> := <var:U1> <var:b> := <var:b> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:l> = <var:B> }} <def:poly> {{ <var:b> = <nat:4> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:U1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:U1> = <var:B> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:U1> = <nat:4> * <var:B> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:U0> = <nat:3> /\ <var:b> = <nat:4> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:b> = <nat:4> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 