\begin{document} \begin{theorem} Let the following series of commands such that \begin{verbatim} <var:K0> := <nat:5> ; <var:K1> := <nat:7> ; <var:K1> := <var:K1> * <var:J> ; <var:w> := <var:K1> ; <var:w> := <var:w> + <var:K0> \end{verbatim} Allowing it to be that $ <var:J> = <var:t> $ --- for all positive coefficients $ <var:t> $ --- prior to the evaluation of this set of commands , it must be that we have $ <var:w> = <nat:7> * <var:t> + <nat:5> $ when code segment executes . \end{theorem} \begin{proof} The proof of this set of commands is accomplished through typical Hoare techniques . Now , we see \[ \begin{tabular} {rcl} \{ <var:J> = <var:t> \} & <var:K0> := <nat:5> & \{ <var:J> = <var:t> \land <var:K0> = <nat:5> \} \\ \{ <var:J> = <var:t> \land <var:K0> = <nat:5> \} & <var:K1> := <nat:7> & \{ <var:J> = <var:t> \land <var:K0> = <nat:5> \land <var:K1> = <nat:7> \} \\ \{ <var:J> = <var:t> \land <var:K0> = <nat:5> \land <var:K1> = <nat:7> \} & <var:K1> := <var:K1> * <var:J> & \{ <var:J> = <var:t> \land <var:K0> = <nat:5> \land <var:K1> = <nat:7> * <var:t> \} \\ \{ <var:J> = <var:t> \land <var:K0> = <nat:5> \land <var:K1> = <nat:7> * <var:t> \} & <var:w> := <var:K1> & \{ <var:J> = <var:t> \land <var:K0> = <nat:5> \land <var:w> = <nat:7> * <var:t> \} \\ \{ <var:J> = <var:t> \land <var:K0> = <nat:5> \land <var:w> = <nat:7> * <var:t> \} & <var:w> := <var:w> + <var:K0& \{ <var:J> = <var:t> \land <var:w> = <nat:7> * <var:t> + <nat:5> \} \end{tabular} This is sound using the rule given by Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:J> = <var:t> }} <var:K0> := <nat:5> ; <var:K1> := <nat:7> ; <var:K1> := <var:K1> * <var:J> ; <var:w> := <var:K1> ; <var:w> := <var:w> + <var:K0> {{ <var:w> = <nat:7> * <var:t> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:t> /\ <var:K0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:t> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:t> /\ <var:K0> = <nat:5> /\ <var:K1> = <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:t> /\ <var:K0> = <nat:5> /\ <var:w> = <nat:7> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:t> /\ <var:w> = <nat:7> * <var:t> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 