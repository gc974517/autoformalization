\begin{document} \begin{theorem} Take the following list of commands as follows \begin{verbatim} <var:d1> := <var:w> ; <var:d2> := <var:d1> * <var:w> ; <var:d0> := <nat:6> ; <var:d1> := <var:d1> * <nat:4> ; <var:d2> := <var:d2> * <nat:6> ; <var:O> := <var:d2> <var:O> := <var:O> + <var:d1> <var:O> := <var:O> + <var:d0> \end{verbatim} Assuming it to hold that $ <var:w> = <var:I> $ prior to executing the series of instructions then $ <var:O> = <nat:6> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:6> $ . \end{theorem} \begin{proof} The application of typical Hoare techniques yields : \begin{eqnarray} \{ <var:w> = <var:I> \} \\ <var:d1> := <var:w> ; \\ \{ <var:w> = <var:I> \land <var:d1> = <var:I> \} \end{eqnarray} Continuing executing our list of instructions produces : \begin{eqnarray} <var:d2> := <var:d1> * <var:w> ; \\ \{ <var:w> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \} \\ <var:d0> := <nat:6> ; \\ \{ <var:w> = <var:I> \land <var:d1> = <var:I> \land <var:d2> = <var:I> ^ <nat:2> \land <var:d0> = <nat:6> \} \\ <var:d1> := <var:d1> * <nat:4> ; \\ \{ <var:w> = <var:I> \land <var:d1> = <nat:4> \cdot <var:I> \land <var:d2> = <var:I> ^ <nat:2> \land <var:d0> = <nat:6> \} \\ <var:d2> := <var:d2> * <nat:6> ; \\ \{ <var:w> = <var:I> \land <var:d1> = <nat:4> \cdot <var:I> \land <var:d2> = <nat:6> \cdot <var:I> ^ <nat:2> \land <var:d0> = <nat:6> \} \\ <var:O> := <var:d2> \\ \{ <var:w> = <var:I> \land <var:d1> = <nat:4> \cdot <var:I> \land <var:d0> = <nat:6> \land <var:O> = <nat:6> \cdot <var:I> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:d1> \\ \{ <var:w> = <var:I> \land <var:d0> = <nat:6> \land <var:O> = <nat:6> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> \} \\ <var:O> := <var:O> + <var:d0> \\ \{ <var:w> = <var:I> \land <var:O> = <nat:6> \cdot <var:I> ^ <nat:2> + <nat:4> \cdot <var:I> + <nat:6> \} \end{eqnarray} As a consequence , our set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Definition <var:d2> : string := " <var:d2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:w> = <var:I> }} <var:d1> := <var:w> ; <var:d2> := <var:d1> * <var:w> ; <var:d0> := <nat:6> ; <var:d1> := <var:d1> * <nat:4> ; <var:d2> := <var:d2> * <nat:6> ; <var:O> := <var:d2> <var:O> := <var:O> + <var:d1> <var:O> := <var:O> + <var:d0> {{ <var:O> = <nat:6> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:d1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:d1> = <var:I> /\ <var:d2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:d1> = <var:I> /\ <var:d2> = <var:I> ^ <nat:2> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:d1> = <nat:4> * <var:I> /\ <var:d2> = <var:I> ^ <nat:2> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:d1> = <nat:4> * <var:I> /\ <var:d2> = <nat:6> * <var:I> ^ <nat:2> /\ <var:d0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:d1> = <nat:4> * <var:I> /\ <var:d0> = <nat:6> /\ <var:O> = <nat:6> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:d0> = <nat:6> /\ <var:O> = <nat:6> * <var:I> ^ <nat:2> + <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:I> /\ <var:O> = <nat:6> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 