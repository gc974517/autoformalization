\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:P1> := <var:p> ; <var:P2> := <var:P1> * <var:p> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:9> ; <var:P2> := <var:P2> * <nat:3> ; <var:O> := <var:P2> <var:O> := <var:O> + <var:P1> <var:O> := <var:O> + <var:P0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:p> = <var:B> $ before executing this list of commands it follows that we have $ <var:O> = <nat:3> * <var:B> ^ <nat:2> + <nat:9> * <var:B> + <nat:3> $ . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is evident with standard Hoare reasoning . Moving forward to the next step , we have \begin{verbatim} { <var:p> = <var:B> } <var:P1> := <var:p> { <var:p> = <var:B> \land <var:P1> = <var:B> } { <var:p> = <var:B> \land <var:P1> = <var:B> } <var:P2> := <var:P1> * <var:p> { <var:p> = <var:B> \land <var:P1> = <var:B> \land <var:P2> = <var:B> ^ <nat:2> } { <var:p> = <var:B> \land <var:P1> = <var:B> \land <var:P2> = <var:B> ^ <nat:2> } <var:P0> := <nat:3> { <var:p> = <var:B> \land <var:P1> = <var:B> \land <var:P2> = <var:B> ^ <nat:2> \land <var:P0> = <nat:3> } { <var:p> = <var:B> \land <var:P1> = <var:B> \land <var:P2> = <var:B> ^ <nat:2> \land <var:P0> = <nat:3> } <var:P1> := <var:P1> * <nat:9> { <var:p> = <var:B> \land <var:P1> = <nat:9> \cdot <var:B> \land <var:P2> = <var:B> ^ <nat:2> \land <var:P0> = <nat:3> } { <var:p> = <var:B> \land <var:P1> = <nat:9> \cdot <var:B> \land <var:P2> = <var:B> ^ <nat:2> \land <var:P0> = <nat:3> } <var:P2> := <var:P2> * <nat:3> { <var:p> = <var:B> \land <var:P1> = <nat:9> \cdot <var:B> \land <var:P2> = <nat:3> \cdot <var:B> ^ <nat:2> \land <var:P0> = <nat:3> } \end{verbatim} Moving onward , we see \begin{verbatim} { <var:p> = <var:B> } <var:P1> := <var:p> { <var:p> = <var:B> \land <var:P1> = <var:B> } \end{verbatim} Considering the subsequent line contained in the segment of code , we see \begin{verbatim} { <var:p> = <var:B> } <var:P1> := <var:p> { <var:p> = <var:B> \land <var:P1> = <var:B> } \end{verbatim} This is deduced by the variable update scheme found in usual Hoare techniques . Paying attention to the subsequent step contained in the set of instructions , \begin{verbatim} { <var:p> = <var:B> } <var:P1> := <var:p> { <var:p> = <var:B> \land <var:P1> = <var:B> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Definition <var:P1> : string := " <var:P1> " . Definition <var:P2> : string := " <var:P2> " . Definition <def:poly> := <var:P1> := <var:p> ; <var:P2> := <var:P1> * <var:p> ; <var:P0> := <nat:3> ; <var:P1> := <var:P1> * <nat:9> ; <var:P2> := <var:P2> * <nat:3> ; <var:O> := <var:P2> <var:O> := <var:O> + <var:P1> <var:O> := <var:O> + <var:P0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:p> = <var:B> }} <def:poly> {{ <var:O> = <nat:3> * <var:B> ^ <nat:2> + <nat:9> * <var:B> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:P1> = <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:P1> = <var:B> /\ <var:P2> = <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:P1> = <var:B> /\ <var:P2> = <var:B> ^ <nat:2> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:P1> = <nat:9> * <var:B> /\ <var:P2> = <var:B> ^ <nat:2> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:P1> = <nat:9> * <var:B> /\ <var:P2> = <nat:3> * <var:B> ^ <nat:2> /\ <var:P0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:P1> = <nat:9> * <var:B> /\ <var:P0> = <nat:3> /\ <var:O> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:P0> = <nat:3> /\ <var:O> = <nat:3> * <var:B> ^ <nat:2> + <nat:9> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:B> /\ <var:O> = <nat:3> * <var:B> ^ <nat:2> + <nat:9> * <var:B> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 