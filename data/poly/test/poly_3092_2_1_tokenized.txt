\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n0> := <nat:7> ; <var:w> := <var:n0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> . Allow $ <var:m> = <var:K> $ prior to the execution of the set of commands then we see $ <var:w> = <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:m> = <var:K> \} \\ <var:n0> := <nat:7> ; \\ \{ <var:m> = <var:K> \land <var:n0> = <nat:7> \} \\ <var:w> := <var:n0> \\ \{ <var:m> = <var:K> \land <var:w> = <nat:7> \} \end{eqnarray} Using Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <def:poly> := <var:n0> := <nat:7> ; <var:w> := <var:n0> . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:m> = <var:K> }} <def:poly> {{ <var:w> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:n0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:K> /\ <var:w> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 