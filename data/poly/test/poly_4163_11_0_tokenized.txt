\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:i0> := <nat:7> ; <var:i2> := <nat:3> ; <var:i2> := <var:i2> * <var:p> ; <var:i2> := <var:i2> * <var:p> ; <var:i3> := <nat:9> ; <var:i3> := <var:i3> * <var:p> ; <var:i3> := <var:i3> * <var:p> ; <var:i3> := <var:i3> * <var:p> ; <var:R> := <var:i3> ; <var:R> := <var:R> + <var:i2> ; <var:R> := <var:R> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:p> = <var:g> $ prior to evaluating our set of instructions it holds that we have $ <var:R> = <nat:9> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:7> $ once program is done . \end{theorem} \begin{proof} The method of proof for this list of instructions is evident using usual Hoare reasoning . Taking a look at the next line of code seen in the list of commands , we see the variable update command \verb | <var:i0> := <nat:7> ; | . This transfers $ \{ <var:p> = <var:g> \} $ to the condition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \} $ . This is shown to be logically sound using the assignment scheme defined in standard Hoare techniques . Jumping to the next step found in the list of commands , we see the assignment code \verb | <var:i2> := <nat:3> ; | . This code transfers the precondition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \} $ toward the condition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \} $ . Moving onward , we see the binding line yielding $ <var:i2> * <var:p> $ toward $ <var:i2>$ . This command moves $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \} $ into the condition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> \} $ . Moving forward to the subsequent bit of code contained in our set of instructions , the assignment code \verb | <var:i2> := <var:i2> * <var:p> ; | . This line redefines the condition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> \} $ as $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> ^ <nat:2> \} $ . This is rigorously given using the assignment scheme from Hoare techniques . After , we see the binding command assigning $ <nat:9> $ into $ <var:i3>$ . This command moves the condition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> ^ <nat:2> \} $ as the condition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:i3> = <nat:9> \} $ . Shifting focus toward the subsequent bit of code contained in the list of commands , we see the binding command defining $ <var:i3> * <var:p> $ as $ <var:i3>$ . This line redefines the precondition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:i3> = <nat:9> \} $ toward the condition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:i3> = <nat:9> \times <var:g> \} $ . This is rigorously given by the assignment scheme defined in Hoare logic . Immediately after , the assignment code letting $ <var:i3> * <var:p> $ as $ <var:i3>$ . This code takes the condition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:i3> = <nat:9> \times <var:g> \} $ as $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:i3> = <nat:9> \times <var:g> ^ <nat:2> \} $ . Honing in on the following statement in our program , we have the variable update statement assigning $ <var:i3> * <var:p> $ as $ <var:i3>$ . This statement moves the precondition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:i3> = <nat:9> \times <var:g> ^ <nat:2> \} $ as the postcondition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:i3> = <nat:9> \times <var:g> ^ <nat:3> \} $ . This is given by the assignment law obtained from usual Hoare reasoning . Further , the environment update code yielding $ <var:i3> $ as $ <var:R>$ . This line redefines the condition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:i3> = <nat:9> \times <var:g> ^ <nat:3> \} $ into the postcondition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:R> = <nat:9> \times <var:g> ^ <nat:3> \} $ . Moving onward , we have the line assigning $ <var:R> + <var:i2> $ as $ <var:R>$ . This statement transfers the condition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:i2> = <nat:3> \times <var:g> ^ <nat:2> \land <var:R> = <nat:9> \times <var:g> ^ <nat:3> \} $ toward the postcondition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:R> = <nat:9> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> \} $ . This is shown with the assignment rule defined by usual Hoare techniques . Moving on to the proceeding bit of code in the program , we have the code \verb | <var:R> := <var:R> + <var:i0> | . This command forwards the precondition $ \{ <var:p> = <var:g> \land <var:i0> = <nat:7> \land <var:R> = <nat:9> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> \} $ as the postcondition $ \{ <var:p> = <var:g> \land <var:R> = <nat:9> \times <var:g> ^ <nat:3> + <nat:3> \times <var:g> ^ <nat:2> + <nat:7> \} $ . This is sound by the assignment law of usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i2> : string := " <var:i2> " . Definition <var:i3> : string := " <var:i3> " . Definition <def:poly> := <var:i0> := <nat:7> ; <var:i2> := <nat:3> ; <var:i2> := <var:i2> * <var:p> ; <var:i2> := <var:i2> * <var:p> ; <var:i3> := <nat:9> ; <var:i3> := <var:i3> * <var:p> ; <var:i3> := <var:i3> * <var:p> ; <var:i3> := <var:i3> * <var:p> ; <var:R> := <var:i3> ; <var:R> := <var:R> + <var:i2> ; <var:R> := <var:R> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:p> = <var:g> }} <def:poly> {{ <var:R> = <nat:9> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:i0> = <nat:7> /\ <var:i2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:i0> = <nat:7> /\ <var:i2> = <nat:3> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:i0> = <nat:7> /\ <var:i2> = <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:i0> = <nat:7> /\ <var:i2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:i3> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:i0> = <nat:7> /\ <var:i2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:i3> = <nat:9> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:i0> = <nat:7> /\ <var:i2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:i3> = <nat:9> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:i0> = <nat:7> /\ <var:i2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:i3> = <nat:9> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:i0> = <nat:7> /\ <var:i2> = <nat:3> * <var:g> ^ <nat:2> /\ <var:R> = <nat:9> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:i0> = <nat:7> /\ <var:R> = <nat:9> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:g> /\ <var:R> = <nat:9> * <var:g> ^ <nat:3> + <nat:3> * <var:g> ^ <nat:2> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 