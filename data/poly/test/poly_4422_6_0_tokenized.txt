\begin{document} \begin{theorem} Consider the following set of commands in \emph{Imp} such that \begin{verbatim} <var:W0> := <nat:5> ; <var:W2> := <nat:4> ; <var:W2> := <var:W2> * <var:f> ; <var:W2> := <var:W2> * <var:f> ; <var:s> := <var:W2> ; <var:s> := <var:s> + <var:W0> \end{verbatim} Assume that $ <var:f> = <var:I> $ before evaluating our program , it holds that $ <var:s> = <nat:4> \times <var:I> ^ <nat:2> + <nat:5> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:f> = <var:I> \} \\ <var:W0> := <nat:5> ; \\ \{ <var:f> = <var:I> \land <var:W0> = <nat:5> \} \\ <var:W2> := <nat:4> ; \\ \{ <var:f> = <var:I> \land <var:W0> = <nat:5> \land <var:W2> = <nat:4> \} \\ <var:W2> := <var:W2> * <var:f> ; \\ \{ <var:f> = <var:I> \land <var:W0> = <nat:5> \land <var:W2> = <nat:4> \cdot <var:I> \} \\ <var:W2> := <var:W2> * <var:f> ; \\ \{ <var:f> = <var:I> \land <var:W0> = <nat:5> \land <var:W2> = <nat:4> \cdot <var:I> ^ <nat:2> \} \\ <var:s> := <var:W2> ; \\ \{ <var:f> = <var:I> \land <var:W0> = <nat:5> \land <var:s> = <nat:4> \cdot <var:I> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:W0> \\ \{ <var:f> = <var:I> \land <var:s> = <nat:4> \cdot <var:I> ^ <nat:2> + <nat:5> \} \end{eqnarray} Utilizing Hoare reasoning solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W2> : string := " <var:W2> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:f> = <var:I> }} <var:W0> := <nat:5> ; <var:W2> := <nat:4> ; <var:W2> := <var:W2> * <var:f> ; <var:W2> := <var:W2> * <var:f> ; <var:s> := <var:W2> ; <var:s> := <var:s> + <var:W0> {{ <var:s> = <nat:4> * <var:I> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:W0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:4> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:W0> = <nat:5> /\ <var:W2> = <nat:4> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:W0> = <nat:5> /\ <var:s> = <nat:4> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:I> /\ <var:s> = <nat:4> * <var:I> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 