\begin{document} \begin{definition} Define the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:a1> := <var:R> ; <var:a2> := <var:a1> * <var:R> ; <var:a3> := <var:a2> * <var:R> ; <var:a0> := <nat:5> ; <var:a2> := <var:a2> * <nat:6> ; <var:a3> := <var:a3> * <nat:3> ; <var:l> := <var:a3> <var:l> := <var:l> + <var:a2> <var:l> := <var:l> + <var:a0> \end{verbatim} \end{definition} \begin{theorem} Take the following set of commands <def:poly> in \emph{Imp} . Assume it to be that $ <var:R> = <var:J> $ ahead of evaluating this series of commands , then we see $ <var:l> = <nat:3> \cdot <var:J> ^ <nat:3> + <nat:6> \cdot <var:J> ^ <nat:2> + <nat:5> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our set of instructions is accomplished with this decorated set of instructions . \begin{eqnarray} \{ <var:R> = <var:J> \} \\ <var:a1> := <var:R> ; \\ \{ <var:R> = <var:J> \land <var:a1> = <var:J> \} \\ <var:a2> := <var:a1> * <var:R> ; \\ \{ <var:R> = <var:J> \land <var:a1> = <var:J> \land <var:a2> = <var:J> ^ <nat:2> \} \\ <var:a3> := <var:a2> * <var:R> ; \\ \{ <var:R> = <var:J> \land <var:a1> = <var:J> \land <var:a2> = <var:J> ^ <nat:2> \land <var:a3> = <var:J> ^ <nat:3> \} \\ <var:a0> := <nat:5> ; \\ \{ <var:R> = <var:J> \land <var:a1> = <var:J> \land <var:a2> = <var:J> ^ <nat:2> \land <var:a3> = <var:J> ^ <nat:3> \land <var:a0> = <nat:5> \} \\ <var:a2> := <var:a2> * <nat:6> ; \\ \{ <var:R> = <var:J> \land <var:a1> = <var:J> \land <var:a2> = <nat:6> \cdot <var:J> ^ <nat:2> \land <var:a3> = <var:J> ^ <nat:3> \land <var:a0> = <nat:5> \} \\ <var:a3> := <var:a3> * <nat:3> ; \\ \{ <var:R> = <var:J> \land <var:a1> = <var:J> \land <var:a2> = <nat:6> \cdot <var:J> ^ <nat:2> \land <var:a3> = <nat:3> \cdot <var:J> ^ <nat:3> \land <var:a0> = <nat:5> \} \\ <var:l> := <var:a3> \\ \{ <var:R> = <var:J> \land <var:a1> = <var:J> \land <var:a2> = <nat:6> \cdot <var:J> ^ <nat:2> \land <var:a0> = <nat:5> \land <var:l> = <nat:3> \cdot <var:J> ^ <nat:3> \} \\ <var:l> := <var:l> + <var:a2> \\ \{ <var:R> = <var:J> \land <var:a1> = <var:J> \land <var:a0> = <nat:5> \land <var:l> = <nat:3> \cdot <var:J> ^ <nat:3> + <nat:6> \cdot <var:J> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:a0> \\ \{ <var:R> = <var:J> \land <var:l> = <nat:3> \cdot <var:J> ^ <nat:3> + <nat:6> \cdot <var:J> ^ <nat:2> + <nat:5> \} \end{eqnarray} Applying Hoare techniques ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Definition <var:a3> : string := " <var:a3> " . Definition <def:poly> := <var:a1> := <var:R> ; <var:a2> := <var:a1> * <var:R> ; <var:a3> := <var:a2> * <var:R> ; <var:a0> := <nat:5> ; <var:a2> := <var:a2> * <nat:6> ; <var:a3> := <var:a3> * <nat:3> ; <var:l> := <var:a3> <var:l> := <var:l> + <var:a2> <var:l> := <var:l> + <var:a0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:R> = <var:J> }} <def:poly> {{ <var:l> = <nat:3> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:a1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:a1> = <var:J> /\ <var:a2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:a1> = <var:J> /\ <var:a2> = <var:J> ^ <nat:2> /\ <var:a3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:a1> = <var:J> /\ <var:a2> = <var:J> ^ <nat:2> /\ <var:a3> = <var:J> ^ <nat:3> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:a1> = <var:J> /\ <var:a2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:a3> = <var:J> ^ <nat:3> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:a1> = <var:J> /\ <var:a2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:a3> = <nat:3> * <var:J> ^ <nat:3> /\ <var:a0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:a1> = <var:J> /\ <var:a2> = <nat:6> * <var:J> ^ <nat:2> /\ <var:a0> = <nat:5> /\ <var:l> = <nat:3> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:a1> = <var:J> /\ <var:a0> = <nat:5> /\ <var:l> = <nat:3> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:J> /\ <var:l> = <nat:3> * <var:J> ^ <nat:3> + <nat:6> * <var:J> ^ <nat:2> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 