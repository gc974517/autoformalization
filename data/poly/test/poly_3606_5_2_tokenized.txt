\begin{document} \begin{theorem} Take the following series of commands as follows \begin{verbatim} <var:Q> := <nat:1> ; <var:Q> := <nat:4> + <var:Q> * <var:I> ; <var:Q> := <nat:3> + <var:Q> * <var:I> ; <var:Q> := <nat:4> + <var:Q> * <var:I> ; <var:Q> := <nat:3> + <var:Q> * <var:I> \end{verbatim} Assuming it to hold that $ <var:I> = <var:j> $ taking natural coefficients $ <var:j> $ ahead of the execution of the series of commands , it holds that $ <var:Q> = <nat:1> \cdot <var:j> ^ <nat:4> + <nat:4> \cdot <var:j> ^ <nat:3> + <nat:3> \cdot <var:j> ^ <nat:2> + <nat:4> \cdot <var:j> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:j> \} \\ <var:Q> := <nat:1> ; \\ \{ <var:I> = <var:j> \land <var:Q> = <nat:1> \} \\ <var:Q> := <nat:4> + <var:Q> * <var:I> ; \\ \{ <var:I> = <var:j> \land <var:Q> = <nat:1> * <var:j> + <nat:4> \} \\ <var:Q> := <nat:3> + <var:Q> * <var:I> ; \\ \{ <var:I> = <var:j> \land <var:Q> = <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> \} \\ <var:Q> := <nat:4> + <var:Q> * <var:I> ; \\ \{ <var:I> = <var:j> \land <var:Q> = <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:4> \} \\ <var:Q> := <nat:3> + <var:Q> * <var:I> \\ \{ <var:I> = <var:j> \land <var:Q> = <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> \} \end{eqnarray} Applying standard Hoare reasoning accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:I> = <var:j> }} <var:Q> := <nat:1> ; <var:Q> := <nat:4> + <var:Q> * <var:I> ; <var:Q> := <nat:3> + <var:Q> * <var:I> ; <var:Q> := <nat:4> + <var:Q> * <var:I> ; <var:Q> := <nat:3> + <var:Q> * <var:I> {{ <var:Q> = <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:Q> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:Q> = <nat:1> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:Q> = <nat:1> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:Q> = <nat:1> * <var:j> ^ <nat:3> + <nat:4> * <var:j> ^ <nat:2> + <nat:3> * <var:j> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:j> /\ <var:Q> = <nat:1> * <var:j> ^ <nat:4> + <nat:4> * <var:j> ^ <nat:3> + <nat:3> * <var:j> ^ <nat:2> + <nat:4> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 