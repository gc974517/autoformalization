\begin{document} \begin{definition} Take the following list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e> := <nat:4> ; <var:e> := <nat:1> + <var:e> * <var:m> ; <var:e> := <nat:2> + <var:e> * <var:m> ; <var:e> := <nat:4> + <var:e> * <var:m> ; <var:e> := <nat:4> + <var:e> * <var:m> \end{verbatim} \end{definition} \begin{theorem} Assuming that $ <var:m> = <var:n> $ ahead of interpreting the code , it must be that we see $ <var:e> = <nat:4> \cdot <var:n> ^ <nat:4> + <nat:1> \cdot <var:n> ^ <nat:3> + <nat:2> \cdot <var:n> ^ <nat:2> + <nat:4> \cdot <var:n> + <nat:4> $ once code segment is done . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code is evident using the below decorated series of instructions . \begin{eqnarray} \{ <var:m> = <var:n> \} \\ <var:e> := <nat:4> ; \\ \{ <var:m> = <var:n> \land <var:e> = <nat:4> \} \\ <var:e> := <nat:1> + <var:e> * <var:m> ; \\ \{ <var:m> = <var:n> \land <var:e> = <nat:4> * <var:n> + <nat:1> \} \\ <var:e> := <nat:2> + <var:e> * <var:m> ; \\ \{ <var:m> = <var:n> \land <var:e> = <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:2> \} \\ <var:e> := <nat:4> + <var:e> * <var:m> ; \\ \{ <var:m> = <var:n> \land <var:e> = <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> \} \\ <var:e> := <nat:4> + <var:e> * <var:m> \\ \{ <var:m> = <var:n> \land <var:e> = <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> \} \end{eqnarray} Using typical Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:4> ; <var:e> := <nat:1> + <var:e> * <var:m> ; <var:e> := <nat:2> + <var:e> * <var:m> ; <var:e> := <nat:4> + <var:e> * <var:m> ; <var:e> := <nat:4> + <var:e> * <var:m> . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:m> = <var:n> }} <def:poly> {{ <var:e> = <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:e> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:e> = <nat:4> * <var:n> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:e> = <nat:4> * <var:n> ^ <nat:2> + <nat:1> * <var:n> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:e> = <nat:4> * <var:n> ^ <nat:3> + <nat:1> * <var:n> ^ <nat:2> + <nat:2> * <var:n> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:n> /\ <var:e> = <nat:4> * <var:n> ^ <nat:4> + <nat:1> * <var:n> ^ <nat:3> + <nat:2> * <var:n> ^ <nat:2> + <nat:4> * <var:n> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 