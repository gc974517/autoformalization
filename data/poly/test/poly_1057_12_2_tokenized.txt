\begin{document} \begin{definition} Consider the following code <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f> := <nat:3> ; <var:f> := <nat:4> + <var:f> * <var:Z> ; <var:f> := <nat:3> + <var:f> * <var:Z> ; <var:f> := <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <var:f> * <var:Z> ; <var:f> := <nat:4> + <var:f> * <var:Z> ; <var:f> := <nat:1> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Allowing letting positive coefficients $ <var:B> $ $ <var:Z> = <var:B> $ before the execution of the code it follows that we have $ <var:f> = <nat:3> \cdot <var:B> ^ <nat:11> + <nat:4> \cdot <var:B> ^ <nat:10> + <nat:3> \cdot <var:B> ^ <nat:9> + <nat:2> \cdot <var:B> ^ <nat:7> + <nat:4> \cdot <var:B> ^ <nat:5> + <nat:1> \cdot <var:B> ^ <nat:4> + <nat:2> \cdot <var:B> ^ <nat:3> + <nat:2> \cdot <var:B> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The argument for the code segment is accomplished by Hoare reasoning . Focusing on the following bits of codecontained in our program , \verb | { <var:Z> = <var:B> } <var:f> := <nat:3> { <var:Z> = <var:B> \land <var:f> = <nat:3> } | , \verb | { <var:Z> = <var:B> \land <var:f> = <nat:3> } <var:f> := <nat:4> + <var:f> * <var:Z> { <var:Z> = <var:B> \land <var:f> = <nat:3> * <var:B> + <nat:4> } | , \verb | { <var:Z> = <var:B> \land <var:f> = <nat:3> * <var:B> + <nat:4> } <var:f> := <nat:3> + <var:f> * <var:Z> { <var:Z> = <var:B> \land <var:f> = <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> } | , \verb | { <var:Z> = <var:B> \land <var:f> = <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> } <var:f> := <var:f> * <var:Z> { <var:Z> = <var:B> \land <var:f> = <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + } | , \verb | { <var:Z> = <var:B> \land <var:f> = <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + } <var:f> := <nat:2> + <var:f> * <var:Z> { <var:Z> = <var:B> \land <var:f> = <nat:3> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> } | and \verb | { <var:Z> = <var:B> \land <var:f> = <nat:3> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> } <var:f> := <var:f> * <var:Z> { <var:Z> = <var:B> \land <var:f> = <nat:3> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + } | . Taking another step toward the subsequent bits of codeseen in our series of instructions , \verb | { <var:Z> = <var:B> } <var:f> := <nat:3> { <var:Z> = <var:B> \land <var:f> = <nat:3> } | , \verb | { <var:Z> = <var:B> \land <var:f> = <nat:3> } <var:f> := <nat:4> + <var:f> * <var:Z> { <var:Z> = <var:B> \land <var:f> = <nat:3> * <var:B> + <nat:4> } | and \verb | { <var:Z> = <var:B> \land <var:f> = <nat:3> * <var:B> + <nat:4> } <var:f> := <nat:3> + <var:f> * <var:Z> { <var:Z> = <var:B> \land <var:f> = <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> } | . This is deduced with the assignment scheme defined by usual Hoare logic . Moving forward , we have \verb | { <var:Z> = <var:B> } <var:f> := <nat:3> { <var:Z> = <var:B> \land <var:f> = <nat:3> } | and \verb | { <var:Z> = <var:B> \land <var:f> = <nat:3> } <var:f> := <nat:4> + <var:f> * <var:Z> { <var:Z> = <var:B> \land <var:f> = <nat:3> * <var:B> + <nat:4> } | . This is rigorously given with the variable update scheme found in Hoare techniques . Following , \verb | { <var:Z> = <var:B> } <var:f> := <nat:3> { <var:Z> = <var:B> \land <var:f> = <nat:3> } | . This is ensured with the binding scheme found in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:3> ; <var:f> := <nat:4> + <var:f> * <var:Z> ; <var:f> := <nat:3> + <var:f> * <var:Z> ; <var:f> := <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <var:f> * <var:Z> ; <var:f> := <nat:4> + <var:f> * <var:Z> ; <var:f> := <nat:1> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:Z> = <var:B> }} <def:poly> {{ <var:f> = <nat:3> * <var:B> ^ <nat:11> + <nat:4> * <var:B> ^ <nat:10> + <nat:3> * <var:B> ^ <nat:9> + <nat:2> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:f> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:f> = <nat:3> * <var:B> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:f> = <nat:3> * <var:B> ^ <nat:2> + <nat:4> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:f> = <nat:3> * <var:B> ^ <nat:3> + <nat:4> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:f> = <nat:3> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:f> = <nat:3> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:4> + <nat:3> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:f> = <nat:3> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:5> + <nat:3> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:f> = <nat:3> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:6> + <nat:3> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:3> + <nat:4> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:f> = <nat:3> * <var:B> ^ <nat:8> + <nat:4> * <var:B> ^ <nat:7> + <nat:3> * <var:B> ^ <nat:6> + <nat:2> * <var:B> ^ <nat:4> + <nat:4> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:f> = <nat:3> * <var:B> ^ <nat:9> + <nat:4> * <var:B> ^ <nat:8> + <nat:3> * <var:B> ^ <nat:7> + <nat:2> * <var:B> ^ <nat:5> + <nat:4> * <var:B> ^ <nat:3> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:f> = <nat:3> * <var:B> ^ <nat:10> + <nat:4> * <var:B> ^ <nat:9> + <nat:3> * <var:B> ^ <nat:8> + <nat:2> * <var:B> ^ <nat:6> + <nat:4> * <var:B> ^ <nat:4> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:B> /\ <var:f> = <nat:3> * <var:B> ^ <nat:11> + <nat:4> * <var:B> ^ <nat:10> + <nat:3> * <var:B> ^ <nat:9> + <nat:2> * <var:B> ^ <nat:7> + <nat:4> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:3> + <nat:2> * <var:B> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 