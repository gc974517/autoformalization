\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as follows \begin{verbatim} <var:b1> := <var:G> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:8> ; <var:N> := <var:b1> <var:N> := <var:N> + <var:b0> \end{verbatim} Assume that we have $ <var:G> = <var:t> $ before interpreting the set of commands it follows that we see $ <var:N> = <nat:8> * <var:t> + <nat:3> $ once series of commands is done executing . \end{theorem} \begin{proof} Applying usual Hoare logic gives us : \begin{eqnarray} \{ <var:G> = <var:t> \} \\ <var:b1> := <var:G> ; \\ \{ <var:G> = <var:t> \land <var:b1> = <var:t> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:G> = <var:t> \land <var:b1> = <var:t> \land <var:b0> = <nat:3> \} \\ <var:b1> := <var:b1> * <nat:8> ; \\ \{ <var:G> = <var:t> \land <var:b1> = <nat:8> \times <var:t> \land <var:b0> = <nat:3> \} \\ <var:N> := <var:b1> \\ \{ <var:G> = <var:t> \land <var:b0> = <nat:3> \land <var:N> = <nat:8> \times <var:t> \} \\ <var:N> := <var:N> + <var:b0> \\ \{ <var:G> = <var:t> \land <var:N> = <nat:8> \times <var:t> + <nat:3> \} \end{eqnarray} Given the above , the segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:G> = <var:t> }} <var:b1> := <var:G> ; <var:b0> := <nat:3> ; <var:b1> := <var:b1> * <nat:8> ; <var:N> := <var:b1> <var:N> := <var:N> + <var:b0> {{ <var:N> = <nat:8> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:b1> = <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:b1> = <var:t> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:b1> = <nat:8> * <var:t> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:b0> = <nat:3> /\ <var:N> = <nat:8> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:t> /\ <var:N> = <nat:8> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 