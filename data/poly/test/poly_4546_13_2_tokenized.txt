\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} : \begin{verbatim} <var:E> := <nat:2> ; <var:E> := <nat:1> + <var:E> * <var:A> ; <var:E> := <nat:3> + <var:E> * <var:A> ; <var:E> := <nat:2> + <var:E> * <var:A> ; <var:E> := <nat:1> + <var:E> * <var:A> ; <var:E> := <nat:2> + <var:E> * <var:A> ; <var:E> := <var:E> * <var:A> ; <var:E> := <nat:1> + <var:E> * <var:A> ; <var:E> := <nat:1> + <var:E> * <var:A> ; <var:E> := <nat:2> + <var:E> * <var:A> ; <var:E> := <nat:3> + <var:E> * <var:A> ; <var:E> := <nat:3> + <var:E> * <var:A> ; <var:E> := <nat:3> + <var:E> * <var:A> \end{verbatim} Allowing that $ <var:A> = <var:Q> $ ahead of executing this code , then we have $ <var:E> = <nat:2> \times <var:Q> ^ <nat:12> + <nat:1> \times <var:Q> ^ <nat:11> + <nat:3> \times <var:Q> ^ <nat:10> + <nat:2> \times <var:Q> ^ <nat:9> + <nat:1> \times <var:Q> ^ <nat:8> + <nat:2> \times <var:Q> ^ <nat:7> + <nat:1> \times <var:Q> ^ <nat:5> + <nat:1> \times <var:Q> ^ <nat:4> + <nat:2> \times <var:Q> ^ <nat:3> + <nat:3> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for this segment of code is shown by Hoare techniques . Next , we see \[ \begin{tabular} {rcl} \{ <var:A> = <var:Q> \} & <var:E> := <nat:2> & \{ <var:A> = <var:Q> \land <var:E> = <nat:2> \} \\ \{ <var:A> = <var:Q> \land <var:E> = <nat:2> \} & <var:E> := <nat:1> + <var:E> * <var:A> & \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> + <nat:1> \} \\ \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> + <nat:1> \} & <var:E> := <nat:3> + <var:E> * <var:A> & \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> \} \\ \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> \} & <var:E> := <nat:2> + <var:E> * <var:A> & \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> \} \\ \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> \} & <var:E> := <nat:1> + <var:E> * <var:A> & \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:1> \} \\ \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:1> \} & <var:E> := <nat:2> + <var:E> * <var:A> & \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> \} \\ \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> \} & <var:E> := <var:E> * <var:A> & \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + \} \\ \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + \} & <var:E> := <nat:1> + <var:E> * <var:A> & \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> \} \\ \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> \} & <var:E> := <nat:1> + <var:E> * <var:A> & \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> + <nat:1> \} \end{tabular} After , we see \[ \begin{tabular} {rcl} \{ <var:A> = <var:Q> \} & <var:E> := <nat:2> & \{ <var:A> = <var:Q> \land <var:E> = <nat:2> \} \\ \{ <var:A> = <var:Q> \land <var:E> = <nat:2> \} & <var:E> := <nat:1> + <var:E> * <var:A> & \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> + <nat:1> \} \end{tabular} This is guaranteed using the binding law defined in usual Hoare logic . Moving forward , \[ \begin{tabular} {rcl} \{ <var:A> = <var:Q> \} & <var:E> := <nat:2> & \{ <var:A> = <var:Q> \land <var:E> = <nat:2> \} \\ \{ <var:A> = <var:Q> \land <var:E> = <nat:2> \} & <var:E> := <nat:1> + <var:E> * <var:A> & \{ <var:A> = <var:Q> \land <var:E> = <nat:2> * <var:Q> + <nat:1> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:A> = <var:Q> }} <var:E> := <nat:2> ; <var:E> := <nat:1> + <var:E> * <var:A> ; <var:E> := <nat:3> + <var:E> * <var:A> ; <var:E> := <nat:2> + <var:E> * <var:A> ; <var:E> := <nat:1> + <var:E> * <var:A> ; <var:E> := <nat:2> + <var:E> * <var:A> ; <var:E> := <var:E> * <var:A> ; <var:E> := <nat:1> + <var:E> * <var:A> ; <var:E> := <nat:1> + <var:E> * <var:A> ; <var:E> := <nat:2> + <var:E> * <var:A> ; <var:E> := <nat:3> + <var:E> * <var:A> ; <var:E> := <nat:3> + <var:E> * <var:A> ; <var:E> := <nat:3> + <var:E> * <var:A> {{ <var:E> = <nat:2> * <var:Q> ^ <nat:12> + <nat:1> * <var:Q> ^ <nat:11> + <nat:3> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:2> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:3> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:10> + <nat:1> * <var:Q> ^ <nat:9> + <nat:3> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:11> + <nat:1> * <var:Q> ^ <nat:10> + <nat:3> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:Q> /\ <var:E> = <nat:2> * <var:Q> ^ <nat:12> + <nat:1> * <var:Q> ^ <nat:11> + <nat:3> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 