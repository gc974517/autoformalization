\begin{document} \begin{definition} Define the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:8> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:w> ; <var:L2> := <nat:4> ; <var:L2> := <var:L2> * <var:w> ; <var:L2> := <var:L2> * <var:w> ; <var:L3> := <nat:7> ; <var:L3> := <var:L3> * <var:w> ; <var:L3> := <var:L3> * <var:w> ; <var:L3> := <var:L3> * <var:w> ; <var:n> := <var:L3> ; <var:n> := <var:n> + <var:L2> ; <var:n> := <var:n> + <var:L1> ; <var:n> := <var:n> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Define a segment of code <def:poly> in \emph{Imp} . Assume that we have $ <var:w> = <var:D> $ , letting $ <var:D> \in \mathbb{Z}^+ $ , prior to the evaluation of this series of instructions , it holds that we see $ <var:n> = <nat:7> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:8> $ when code finishes . \end{theorem} \begin{proof} The course of logic for this list of commands is clear by the following decorated program . \begin{eqnarray} \{ <var:w> = <var:D> \} \\ <var:L0> := <nat:8> ; \\ \{ <var:w> = <var:D> \land <var:L0> = <nat:8> \} \\ <var:L1> := <nat:1> ; \\ \{ <var:w> = <var:D> \land <var:L0> = <nat:8> \land <var:L1> = <nat:1> \} \\ <var:L1> := <var:L1> * <var:w> ; \\ \{ <var:w> = <var:D> \land <var:L0> = <nat:8> \land <var:L1> = <nat:1> \cdot <var:D> \} \\ <var:L2> := <nat:4> ; \\ \{ <var:w> = <var:D> \land <var:L0> = <nat:8> \land <var:L1> = <nat:1> \cdot <var:D> \land <var:L2> = <nat:4> \} \\ <var:L2> := <var:L2> * <var:w> ; \\ \{ <var:w> = <var:D> \land <var:L0> = <nat:8> \land <var:L1> = <nat:1> \cdot <var:D> \land <var:L2> = <nat:4> \cdot <var:D> \} \\ <var:L2> := <var:L2> * <var:w> ; \\ \{ <var:w> = <var:D> \land <var:L0> = <nat:8> \land <var:L1> = <nat:1> \cdot <var:D> \land <var:L2> = <nat:4> \cdot <var:D> ^ <nat:2> \} \\ <var:L3> := <nat:7> ; \\ \{ <var:w> = <var:D> \land <var:L0> = <nat:8> \land <var:L1> = <nat:1> \cdot <var:D> \land <var:L2> = <nat:4> \cdot <var:D> ^ <nat:2> \land <var:L3> = <nat:7> \} \\ <var:L3> := <var:L3> * <var:w> ; \\ \{ <var:w> = <var:D> \land <var:L0> = <nat:8> \land <var:L1> = <nat:1> \cdot <var:D> \land <var:L2> = <nat:4> \cdot <var:D> ^ <nat:2> \land <var:L3> = <nat:7> \cdot <var:D> \} \\ <var:L3> := <var:L3> * <var:w> ; \\ \{ <var:w> = <var:D> \land <var:L0> = <nat:8> \land <var:L1> = <nat:1> \cdot <var:D> \land <var:L2> = <nat:4> \cdot <var:D> ^ <nat:2> \land <var:L3> = <nat:7> \cdot <var:D> ^ <nat:2> \} \\ <var:L3> := <var:L3> * <var:w> ; \\ \{ <var:w> = <var:D> \land <var:L0> = <nat:8> \land <var:L1> = <nat:1> \cdot <var:D> \land <var:L2> = <nat:4> \cdot <var:D> ^ <nat:2> \land <var:L3> = <nat:7> \cdot <var:D> ^ <nat:3> \} \\ <var:n> := <var:L3> ; \\ \{ <var:w> = <var:D> \land <var:L0> = <nat:8> \land <var:L1> = <nat:1> \cdot <var:D> \land <var:L2> = <nat:4> \cdot <var:D> ^ <nat:2> \land <var:n> = <nat:7> \cdot <var:D> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:L2> ; \\ \{ <var:w> = <var:D> \land <var:L0> = <nat:8> \land <var:L1> = <nat:1> \cdot <var:D> \land <var:n> = <nat:7> \cdot <var:D> ^ <nat:3> + <nat:4> \cdot <var:D> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:L1> ; \\ \{ <var:w> = <var:D> \land <var:L0> = <nat:8> \land <var:n> = <nat:7> \cdot <var:D> ^ <nat:3> + <nat:4> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> \} \\ <var:n> := <var:n> + <var:L0> \\ \{ <var:w> = <var:D> \land <var:n> = <nat:7> \cdot <var:D> ^ <nat:3> + <nat:4> \cdot <var:D> ^ <nat:2> + <nat:1> \cdot <var:D> + <nat:8> \} \end{eqnarray} Utilizing typical Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L0> := <nat:8> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:w> ; <var:L2> := <nat:4> ; <var:L2> := <var:L2> * <var:w> ; <var:L2> := <var:L2> * <var:w> ; <var:L3> := <nat:7> ; <var:L3> := <var:L3> * <var:w> ; <var:L3> := <var:L3> * <var:w> ; <var:L3> := <var:L3> * <var:w> ; <var:n> := <var:L3> ; <var:n> := <var:n> + <var:L2> ; <var:n> := <var:n> + <var:L1> ; <var:n> := <var:n> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:w> = <var:D> }} <def:poly> {{ <var:n> = <nat:7> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:1> * <var:D> /\ <var:L2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:1> * <var:D> /\ <var:L2> = <nat:4> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:1> * <var:D> /\ <var:L2> = <nat:4> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:1> * <var:D> /\ <var:L2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:L3> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:1> * <var:D> /\ <var:L2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:L3> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:1> * <var:D> /\ <var:L2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:L3> = <nat:7> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:1> * <var:D> /\ <var:L2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:L3> = <nat:7> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:1> * <var:D> /\ <var:L2> = <nat:4> * <var:D> ^ <nat:2> /\ <var:n> = <nat:7> * <var:D> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L0> = <nat:8> /\ <var:L1> = <nat:1> * <var:D> /\ <var:n> = <nat:7> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:L0> = <nat:8> /\ <var:n> = <nat:7> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:D> /\ <var:n> = <nat:7> * <var:D> ^ <nat:3> + <nat:4> * <var:D> ^ <nat:2> + <nat:1> * <var:D> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 