\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:G1> := <var:M> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:9> ; <var:X> := <var:G1> <var:X> := <var:X> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Given for some $ <var:Y> \in \mathbb{Z}^+ $ it to be that $ <var:M> = <var:Y> $ prior to evaluating this program it holds that we have $ <var:X> = <nat:9> \times <var:Y> + <nat:1> $ once code has executed . \end{theorem} \begin{proof} The argument for this series of instructions is demonstrated with Hoare techniques . Advancing to the next step , we have the environment update line \verb | <var:G1> := <var:M> ; | . This takes the precondition $ \{ <var:M> = <var:Y> \} $ to the postcondition $ \{ <var:M> = <var:Y> \land <var:G1> = <var:Y> \} $ . Moving on to the next step , we have the line assigning $ <nat:1> $ as $ <var:G0>$ . This advances the precondition $ \{ <var:M> = <var:Y> \land <var:G1> = <var:Y> \} $ as $ \{ <var:M> = <var:Y> \land <var:G1> = <var:Y> \land <var:G0> = <nat:1> \} $ . Immediately after , we see the variable update statement \verb | <var:G1> := <var:G1> * <nat:9> ; | . This line redefines the precondition $ \{ <var:M> = <var:Y> \land <var:G1> = <var:Y> \land <var:G0> = <nat:1> \} $ to $ \{ <var:M> = <var:Y> \land <var:G1> = <nat:9> * <var:Y> \land <var:G0> = <nat:1> \} $ . Immediately after , we have the variable binding code \verb | <var:X> := <var:G1> | . This redefines the condition $ \{ <var:M> = <var:Y> \land <var:G1> = <nat:9> * <var:Y> \land <var:G0> = <nat:1> \} $ toward the condition $ \{ <var:M> = <var:Y> \land <var:G0> = <nat:1> \land <var:X> = <nat:9> * <var:Y> \} $ . Following , the variable binding code binding $ <var:X> + <var:G0$ into $ <var:X>$ . This advances $ \{ <var:M> = <var:Y> \land <var:G0> = <nat:1> \land <var:X> = <nat:9> * <var:Y> \} $ to the condition $ \{ <var:M> = <var:Y> \land <var:X> = <nat:9> * <var:Y> + <nat:1> \} $ . This is sound with the assignment law defined by standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G1> := <var:M> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:9> ; <var:X> := <var:G1> <var:X> := <var:X> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:M> = <var:Y> }} <def:poly> {{ <var:X> = <nat:9> * <var:Y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:G1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:G1> = <var:Y> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:G1> = <nat:9> * <var:Y> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:G0> = <nat:1> /\ <var:X> = <nat:9> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:Y> /\ <var:X> = <nat:9> * <var:Y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 