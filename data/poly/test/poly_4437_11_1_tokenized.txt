\begin{document} \begin{theorem} Define the following code such that \begin{verbatim} <var:N1> := <var:V> ; <var:N2> := <var:N1> * <var:V> ; <var:N3> := <var:N2> * <var:V> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:1> ; <var:N2> := <var:N2> * <nat:7> ; <var:N3> := <var:N3> * <nat:9> ; <var:m> := <var:N3> <var:m> := <var:m> + <var:N2> <var:m> := <var:m> + <var:N1> <var:m> := <var:m> + <var:N0> \end{verbatim} Given assuming some $ <var:d> \in \mathbb{Z}^+ $ $ <var:V> = <var:d> $ before interpreting our program , it holds that we see $ <var:m> = <nat:9> \times <var:d> ^ <nat:3> + <nat:7> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this program can be done using typical Hoare logic . Advancing to the proceeding line in the series of commands , the variable assignmet code defining $ <var:V> $ to $ <var:N1>$ . This advances the precondition $ \{ <var:V> = <var:d> \} $ toward $ \{ <var:V> = <var:d> \land <var:N1> = <var:d> \} $ . Immediately after , we have the variable assignmet command \verb | <var:N2> := <var:N1> * <var:V> ; | . This forwards the condition $ \{ <var:V> = <var:d> \land <var:N1> = <var:d> \} $ as the condition $ \{ <var:V> = <var:d> \land <var:N1> = <var:d> \land <var:N2> = <var:d> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment scheme defined by typical Hoare reasoning . Jumping to the upcoming command found in our set of commands , we see the variable assignmet command yielding $ <var:N2> * <var:V> $ into $ <var:N3>$ . This line takes the precondition $ \{ <var:V> = <var:d> \land <var:N1> = <var:d> \land <var:N2> = <var:d> ^ <nat:2> \} $ toward $ \{ <var:V> = <var:d> \land <var:N1> = <var:d> \land <var:N2> = <var:d> ^ <nat:2> \land <var:N3> = <var:d> ^ <nat:3> \} $ . This is rigorously given by the assignment rule from standard Hoare techniques . Advancing to the next step , the binding line \verb | <var:N0> := <nat:2> ; | . This line forwards $ \{ <var:V> = <var:d> \land <var:N1> = <var:d> \land <var:N2> = <var:d> ^ <nat:2> \land <var:N3> = <var:d> ^ <nat:3> \} $ into $ \{ <var:V> = <var:d> \land <var:N1> = <var:d> \land <var:N2> = <var:d> ^ <nat:2> \land <var:N3> = <var:d> ^ <nat:3> \land <var:N0> = <nat:2> \} $ . This is shown through the assignment rule defined in usual Hoare reasoning . Advancing on , we see the command binding $ <var:N1> * <nat:1> $ as $ <var:N1>$ . This statement moves $ \{ <var:V> = <var:d> \land <var:N1> = <var:d> \land <var:N2> = <var:d> ^ <nat:2> \land <var:N3> = <var:d> ^ <nat:3> \land <var:N0> = <nat:2> \} $ to the condition $ \{ <var:V> = <var:d> \land <var:N1> = <nat:1> * <var:d> \land <var:N2> = <var:d> ^ <nat:2> \land <var:N3> = <var:d> ^ <nat:3> \land <var:N0> = <nat:2> \} $ . This is deduced using the assignment law obtained from Hoare logic . Immediately after , we see the environment update line \verb | <var:N2> := <var:N2> * <nat:7> ; | . This statement advances the condition $ \{ <var:V> = <var:d> \land <var:N1> = <nat:1> * <var:d> \land <var:N2> = <var:d> ^ <nat:2> \land <var:N3> = <var:d> ^ <nat:3> \land <var:N0> = <nat:2> \} $ as the condition $ \{ <var:V> = <var:d> \land <var:N1> = <nat:1> * <var:d> \land <var:N2> = <nat:7> * <var:d> ^ <nat:2> \land <var:N3> = <var:d> ^ <nat:3> \land <var:N0> = <nat:2> \} $ . Stepping forward , the variable binding line defining $ <var:N3> * <nat:9> $ into $ <var:N3>$ . This code forwards $ \{ <var:V> = <var:d> \land <var:N1> = <nat:1> * <var:d> \land <var:N2> = <nat:7> * <var:d> ^ <nat:2> \land <var:N3> = <var:d> ^ <nat:3> \land <var:N0> = <nat:2> \} $ as the postcondition $ \{ <var:V> = <var:d> \land <var:N1> = <nat:1> * <var:d> \land <var:N2> = <nat:7> * <var:d> ^ <nat:2> \land <var:N3> = <nat:9> * <var:d> ^ <nat:3> \land <var:N0> = <nat:2> \} $ . Advancing to the proceeding step contained in the program , we see the assignment command binding $ <var:N3$ to $ <var:m>$ . This transfers $ \{ <var:V> = <var:d> \land <var:N1> = <nat:1> * <var:d> \land <var:N2> = <nat:7> * <var:d> ^ <nat:2> \land <var:N3> = <nat:9> * <var:d> ^ <nat:3> \land <var:N0> = <nat:2> \} $ toward the postcondition $ \{ <var:V> = <var:d> \land <var:N1> = <nat:1> * <var:d> \land <var:N2> = <nat:7> * <var:d> ^ <nat:2> \land <var:N0> = <nat:2> \land <var:m> = <nat:9> * <var:d> ^ <nat:3> \} $ . Paying attention to the following piece of code contained in our code segment , the variable assignmet code \verb | <var:m> := <var:m> + <var:N2> | . This takes the precondition $ \{ <var:V> = <var:d> \land <var:N1> = <nat:1> * <var:d> \land <var:N2> = <nat:7> * <var:d> ^ <nat:2> \land <var:N0> = <nat:2> \land <var:m> = <nat:9> * <var:d> ^ <nat:3> \} $ to the postcondition $ \{ <var:V> = <var:d> \land <var:N1> = <nat:1> * <var:d> \land <var:N0> = <nat:2> \land <var:m> = <nat:9> * <var:d> ^ <nat:3> + <nat:7> * <var:d> ^ <nat:2> \} $ . This is sound using the assignment inference rule obtained from usual Hoare techniques . Advancing , the variable assignmet line \verb | <var:m> := <var:m> + <var:N1> | . This code redefines $ \{ <var:V> = <var:d> \land <var:N1> = <nat:1> * <var:d> \land <var:N0> = <nat:2> \land <var:m> = <nat:9> * <var:d> ^ <nat:3> + <nat:7> * <var:d> ^ <nat:2> \} $ into the postcondition $ \{ <var:V> = <var:d> \land <var:N0> = <nat:2> \land <var:m> = <nat:9> * <var:d> ^ <nat:3> + <nat:7> * <var:d> ^ <nat:2> + <nat:1> * <var:d> \} $ . This is ensured by the assignment scheme found in usual Hoare techniques . Stepping through , the assignment statement binding $ <var:m> + <var:N0$ toward $ <var:m>$ . This takes the condition $ \{ <var:V> = <var:d> \land <var:N0> = <nat:2> \land <var:m> = <nat:9> * <var:d> ^ <nat:3> + <nat:7> * <var:d> ^ <nat:2> + <nat:1> * <var:d> \} $ as the postcondition $ \{ <var:V> = <var:d> \land <var:m> = <nat:9> * <var:d> ^ <nat:3> + <nat:7> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:V> = <var:d> }} <var:N1> := <var:V> ; <var:N2> := <var:N1> * <var:V> ; <var:N3> := <var:N2> * <var:V> ; <var:N0> := <nat:2> ; <var:N1> := <var:N1> * <nat:1> ; <var:N2> := <var:N2> * <nat:7> ; <var:N3> := <var:N3> * <nat:9> ; <var:m> := <var:N3> <var:m> := <var:m> + <var:N2> <var:m> := <var:m> + <var:N1> <var:m> := <var:m> + <var:N0> {{ <var:m> = <nat:9> * <var:d> ^ <nat:3> + <nat:7> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:d> /\ <var:N1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:d> /\ <var:N1> = <var:d> /\ <var:N2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:d> /\ <var:N1> = <var:d> /\ <var:N2> = <var:d> ^ <nat:2> /\ <var:N3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:d> /\ <var:N1> = <var:d> /\ <var:N2> = <var:d> ^ <nat:2> /\ <var:N3> = <var:d> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:d> /\ <var:N1> = <nat:1> * <var:d> /\ <var:N2> = <var:d> ^ <nat:2> /\ <var:N3> = <var:d> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:d> /\ <var:N1> = <nat:1> * <var:d> /\ <var:N2> = <nat:7> * <var:d> ^ <nat:2> /\ <var:N3> = <var:d> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:d> /\ <var:N1> = <nat:1> * <var:d> /\ <var:N2> = <nat:7> * <var:d> ^ <nat:2> /\ <var:N3> = <nat:9> * <var:d> ^ <nat:3> /\ <var:N0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:d> /\ <var:N1> = <nat:1> * <var:d> /\ <var:N2> = <nat:7> * <var:d> ^ <nat:2> /\ <var:N0> = <nat:2> /\ <var:m> = <nat:9> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:d> /\ <var:N1> = <nat:1> * <var:d> /\ <var:N0> = <nat:2> /\ <var:m> = <nat:9> * <var:d> ^ <nat:3> + <nat:7> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:d> /\ <var:N0> = <nat:2> /\ <var:m> = <nat:9> * <var:d> ^ <nat:3> + <nat:7> * <var:d> ^ <nat:2> + <nat:1> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:d> /\ <var:m> = <nat:9> * <var:d> ^ <nat:3> + <nat:7> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 