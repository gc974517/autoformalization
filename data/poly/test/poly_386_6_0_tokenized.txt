\begin{document} \begin{theorem} Define a set of instructions as follows \begin{verbatim} <var:y0> := <nat:4> ; <var:y2> := <nat:8> ; <var:y2> := <var:y2> * <var:H> ; <var:y2> := <var:y2> * <var:H> ; <var:w> := <var:y2> ; <var:w> := <var:w> + <var:y0> \end{verbatim} Assume it to hold that $ <var:H> = <var:c> $ prior to running our series of commands it holds that $ <var:w> = <nat:8> \times <var:c> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} The proof of this code is accomplished with the following decorated segment of code . \begin{eqnarray} \{ <var:H> = <var:c> \} \\ <var:y0> := <nat:4> ; \\ \{ <var:H> = <var:c> \land <var:y0> = <nat:4> \} \\ <var:y2> := <nat:8> ; \\ \{ <var:H> = <var:c> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \} \\ <var:y2> := <var:y2> * <var:H> ; \\ \{ <var:H> = <var:c> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \times <var:c> \} \\ <var:y2> := <var:y2> * <var:H> ; \\ \{ <var:H> = <var:c> \land <var:y0> = <nat:4> \land <var:y2> = <nat:8> \times <var:c> ^ <nat:2> \} \\ <var:w> := <var:y2> ; \\ \{ <var:H> = <var:c> \land <var:y0> = <nat:4> \land <var:w> = <nat:8> \times <var:c> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:y0> \\ \{ <var:H> = <var:c> \land <var:w> = <nat:8> \times <var:c> ^ <nat:2> + <nat:4> \} \end{eqnarray} The application of standard Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y2> : string := " <var:y2> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:H> = <var:c> }} <var:y0> := <nat:4> ; <var:y2> := <nat:8> ; <var:y2> := <var:y2> * <var:H> ; <var:y2> := <var:y2> * <var:H> ; <var:w> := <var:y2> ; <var:w> := <var:w> + <var:y0> {{ <var:w> = <nat:8> * <var:c> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:H> = <var:c> /\ <var:y0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:c> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:c> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:c> /\ <var:y0> = <nat:4> /\ <var:y2> = <nat:8> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:c> /\ <var:y0> = <nat:4> /\ <var:w> = <nat:8> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:H> = <var:c> /\ <var:w> = <nat:8> * <var:c> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 