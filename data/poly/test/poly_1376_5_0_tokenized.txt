\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:7> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:y> ; <var:c> := <var:z1> ; <var:c> := <var:c> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Assuming , given all positive numbers $ <var:B> $ , that $ <var:y> = <var:B> $ prior to the evaluation of the list of commands then $ <var:c> = <nat:2> \times <var:B> + <nat:7> $ when code exits . \end{theorem} \begin{proof} Applying Hoare logic produces : \begin{eqnarray} \{ <var:y> = <var:B> \} \\ <var:z0> := <nat:7> ; \\ \{ <var:y> = <var:B> \land <var:z0> = <nat:7> \} \\ <var:z1> := <nat:2> ; \\ \{ <var:y> = <var:B> \land <var:z0> = <nat:7> \land <var:z1> = <nat:2> \} \\ <var:z1> := <var:z1> * <var:y> ; \\ \{ <var:y> = <var:B> \land <var:z0> = <nat:7> \land <var:z1> = <nat:2> \cdot <var:B> \} \\ <var:c> := <var:z1> ; \\ \{ <var:y> = <var:B> \land <var:z0> = <nat:7> \land <var:c> = <nat:2> \cdot <var:B> \} \\ <var:c> := <var:c> + <var:z0> \\ \{ <var:y> = <var:B> \land <var:c> = <nat:2> \cdot <var:B> + <nat:7> \} \end{eqnarray} Thusly , our program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:7> ; <var:z1> := <nat:2> ; <var:z1> := <var:z1> * <var:y> ; <var:c> := <var:z1> ; <var:c> := <var:c> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:y> = <var:B> }} <def:poly> {{ <var:c> = <nat:2> * <var:B> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:z0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:z0> = <nat:7> /\ <var:z1> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:z0> = <nat:7> /\ <var:c> = <nat:2> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:B> /\ <var:c> = <nat:2> * <var:B> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 