\begin{document} \begin{definition} We define the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:i0> := <nat:7> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:y> ; <var:i2> := <nat:6> ; <var:i2> := <var:i2> * <var:y> ; <var:i2> := <var:i2> * <var:y> ; <var:j> := <var:i2> ; <var:j> := <var:j> + <var:i1> ; <var:j> := <var:j> + <var:i0> \end{verbatim} \end{definition} \begin{theorem} Allowing that $ <var:y> = <var:h> $ ahead of evaluating this set of instructions it follows that we see $ <var:j> = <nat:6> \times <var:h> ^ <nat:2> + <nat:3> \times <var:h> + <nat:7> $ once program exits . \end{theorem} \begin{proof} Demonstrating correctness of our set of instructions can be demonstrated using standard Hoare techniques . Honing in on the following command contained in our code segment , the variable update command yielding $ <nat:7> $ into $ <var:i0>$ . This command transfers the condition $ \{ <var:y> = <var:h> \} $ to the postcondition $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \} $ . Going forward , the binding code yielding $ <nat:3> $ into $ <var:i1>$ . This code forwards the precondition $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \} $ into $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:i1> = <nat:3> \} $ . Focusing on the next line in the series of instructions , we see the command \verb | <var:i1> := <var:i1> * <var:y> ; | . This statement advances $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:i1> = <nat:3> \} $ toward the postcondition $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:i1> = <nat:3> * <var:h> \} $ . This is known to be sound with the assignment inference rule found in Hoare techniques . Advancing to the following statement seen in our set of commands , the binding line \verb | <var:i2> := <nat:6> ; | . This moves the precondition $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:i1> = <nat:3> * <var:h> \} $ to the postcondition $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:i1> = <nat:3> * <var:h> \land <var:i2> = <nat:6> \} $ . This is deduced using the assignment inference rule from usual Hoare techniques . Stepping forward , the assignment command letting $ <var:i2> * <var:y> $ toward $ <var:i2>$ . This transfers the precondition $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:i1> = <nat:3> * <var:h> \land <var:i2> = <nat:6> \} $ into the postcondition $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:i1> = <nat:3> * <var:h> \land <var:i2> = <nat:6> * <var:h> \} $ . Moving forward to the proceeding line of code seen in our list of instructions , we have the variable update command \verb | <var:i2> := <var:i2> * <var:y> ; | . This takes the condition $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:i1> = <nat:3> * <var:h> \land <var:i2> = <nat:6> * <var:h> \} $ as the condition $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:i1> = <nat:3> * <var:h> \land <var:i2> = <nat:6> * <var:h> ^ <nat:2> \} $ . Moving onward , the assignment code \verb | <var:j> := <var:i2> ; | . This takes the precondition $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:i1> = <nat:3> * <var:h> \land <var:i2> = <nat:6> * <var:h> ^ <nat:2> \} $ as the postcondition $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:i1> = <nat:3> * <var:h> \land <var:j> = <nat:6> * <var:h> ^ <nat:2> \} $ . This is deduced through the assignment law obtained from typical Hoare reasoning . Moving forward to the next step , we see the assignment line assigning $ <var:j> + <var:i1> $ as $ <var:j>$ . This line advances $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:i1> = <nat:3> * <var:h> \land <var:j> = <nat:6> * <var:h> ^ <nat:2> \} $ into the postcondition $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:j> = <nat:6> * <var:h> ^ <nat:2> + <nat:3> * <var:h> \} $ . Focusing on the subsequent piece of code contained in the segment of code , the environment update command binding $ <var:j> + <var:i0$ toward $ <var:j>$ . This line redefines the condition $ \{ <var:y> = <var:h> \land <var:i0> = <nat:7> \land <var:j> = <nat:6> * <var:h> ^ <nat:2> + <nat:3> * <var:h> \} $ toward $ \{ <var:y> = <var:h> \land <var:j> = <nat:6> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:7> \} $ . This is shown using the assignment scheme given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Definition <def:poly> := <var:i0> := <nat:7> ; <var:i1> := <nat:3> ; <var:i1> := <var:i1> * <var:y> ; <var:i2> := <nat:6> ; <var:i2> := <var:i2> * <var:y> ; <var:i2> := <var:i2> * <var:y> ; <var:j> := <var:i2> ; <var:j> := <var:j> + <var:i1> ; <var:j> := <var:j> + <var:i0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:y> = <var:h> }} <def:poly> {{ <var:j> = <nat:6> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:h> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:h> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:h> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:h> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:3> * <var:h> /\ <var:i2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:h> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:3> * <var:h> /\ <var:i2> = <nat:6> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:h> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:3> * <var:h> /\ <var:i2> = <nat:6> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:h> /\ <var:i0> = <nat:7> /\ <var:i1> = <nat:3> * <var:h> /\ <var:j> = <nat:6> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:h> /\ <var:i0> = <nat:7> /\ <var:j> = <nat:6> * <var:h> ^ <nat:2> + <nat:3> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:h> /\ <var:j> = <nat:6> * <var:h> ^ <nat:2> + <nat:3> * <var:h> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 