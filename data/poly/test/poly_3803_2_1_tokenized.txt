\begin{document} \begin{definition} Define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Q0> := <nat:4> ; <var:i> := <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Given for positive integers $ <var:F> $ it to be that $ <var:k> = <var:F> $ before the evaluation of this set of commands , it holds that $ <var:i> = <nat:4> $ once code executes . \end{theorem} \begin{proof} The way to prove correctness for our set of instructions can be seen through Hoare techniques . Taking another step toward the upcoming bit of code found in the list of commands , we see \verb | { <var:k> = <var:F> } <var:Q0> := <nat:4> { <var:k> = <var:F> \land <var:Q0> = <nat:4> } | . Focusing on the following line of code found in the list of instructions , \verb | { <var:k> = <var:F> } <var:Q0> := <nat:4> { <var:k> = <var:F> \land <var:Q0> = <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <def:poly> := <var:Q0> := <nat:4> ; <var:i> := <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:k> = <var:F> }} <def:poly> {{ <var:i> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:F> /\ <var:i> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 