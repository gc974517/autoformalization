\begin{document} \begin{theorem} Define the following set of instructions in \emph{Imp} : \begin{verbatim} <var:g1> := <var:Z> ; <var:g2> := <var:g1> * <var:Z> ; <var:g3> := <var:g2> * <var:Z> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:8> ; <var:g2> := <var:g2> * <nat:9> ; <var:g3> := <var:g3> * <nat:6> ; <var:s> := <var:g3> <var:s> := <var:s> + <var:g2> <var:s> := <var:s> + <var:g1> <var:s> := <var:s> + <var:g0> \end{verbatim} Allowing it to hold that $ <var:Z> = <var:j> $ ahead of the evaluation of the code segment it follows that we see $ <var:s> = <nat:6> \cdot <var:j> ^ <nat:3> + <nat:9> \cdot <var:j> ^ <nat:2> + <nat:8> \cdot <var:j> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for this list of instructions can be shown using Hoare techniques . Further , we have the variable update statement \verb | <var:g1> := <var:Z> ; | . This moves the condition $ \{ <var:Z> = <var:j> \} $ to the condition $ \{ <var:Z> = <var:j> \land <var:g1> = <var:j> \} $ . Moving forward , the variable update statement \verb | <var:g2> := <var:g1> * <var:Z> ; | . This line forwards the precondition $ \{ <var:Z> = <var:j> \land <var:g1> = <var:j> \} $ into $ \{ <var:Z> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \} $ . Moving on to the next step , we see the assignment line yielding $ <var:g2> * <var:Z> $ to $ <var:g3>$ . This code takes the precondition $ \{ <var:Z> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \} $ to the condition $ \{ <var:Z> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \} $ . This is rigorously given through the assignment rule given in Hoare logic . Moving forward to the proceeding line found in the code , we see the code giving $ <nat:3> $ as $ <var:g0>$ . This code forwards the condition $ \{ <var:Z> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \} $ toward $ \{ <var:Z> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g0> = <nat:3> \} $ . This is known to be sound through the assignment law from standard Hoare reasoning . Advancing , we see the variable assignmet statement \verb | <var:g1> := <var:g1> * <nat:8> ; | . This command forwards the precondition $ \{ <var:Z> = <var:j> \land <var:g1> = <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g0> = <nat:3> \} $ into the condition $ \{ <var:Z> = <var:j> \land <var:g1> = <nat:8> * <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g0> = <nat:3> \} $ . This is guaranteed with the assignment scheme given by standard Hoare logic . Immediately after , we have the variable update code letting $ <var:g2> * <nat:9> $ as $ <var:g2>$ . This statement redefines the condition $ \{ <var:Z> = <var:j> \land <var:g1> = <nat:8> * <var:j> \land <var:g2> = <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g0> = <nat:3> \} $ to the condition $ \{ <var:Z> = <var:j> \land <var:g1> = <nat:8> * <var:j> \land <var:g2> = <nat:9> * <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g0> = <nat:3> \} $ . Considering the upcoming line seen in our list of commands , we see the variable assignmet line \verb | <var:g3> := <var:g3> * <nat:6> ; | . This redefines the condition $ \{ <var:Z> = <var:j> \land <var:g1> = <nat:8> * <var:j> \land <var:g2> = <nat:9> * <var:j> ^ <nat:2> \land <var:g3> = <var:j> ^ <nat:3> \land <var:g0> = <nat:3> \} $ to the postcondition $ \{ <var:Z> = <var:j> \land <var:g1> = <nat:8> * <var:j> \land <var:g2> = <nat:9> * <var:j> ^ <nat:2> \land <var:g3> = <nat:6> * <var:j> ^ <nat:3> \land <var:g0> = <nat:3> \} $ . This is shown through the assignment rule defined in usual Hoare techniques . Advancing to the proceeding statement seen in the segment of code , we see the variable update statement \verb | <var:s> := <var:g3> | . This statement transfers the condition $ \{ <var:Z> = <var:j> \land <var:g1> = <nat:8> * <var:j> \land <var:g2> = <nat:9> * <var:j> ^ <nat:2> \land <var:g3> = <nat:6> * <var:j> ^ <nat:3> \land <var:g0> = <nat:3> \} $ to the condition $ \{ <var:Z> = <var:j> \land <var:g1> = <nat:8> * <var:j> \land <var:g2> = <nat:9> * <var:j> ^ <nat:2> \land <var:g0> = <nat:3> \land <var:s> = <nat:6> * <var:j> ^ <nat:3> \} $ . Moving on , we have the environment update code assigning $ <var:s> + <var:g2$ toward $ <var:s>$ . This moves the condition $ \{ <var:Z> = <var:j> \land <var:g1> = <nat:8> * <var:j> \land <var:g2> = <nat:9> * <var:j> ^ <nat:2> \land <var:g0> = <nat:3> \land <var:s> = <nat:6> * <var:j> ^ <nat:3> \} $ as the postcondition $ \{ <var:Z> = <var:j> \land <var:g1> = <nat:8> * <var:j> \land <var:g0> = <nat:3> \land <var:s> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> \} $ . Immediately after , we have the binding code \verb | <var:s> := <var:s> + <var:g1> | . This moves $ \{ <var:Z> = <var:j> \land <var:g1> = <nat:8> * <var:j> \land <var:g0> = <nat:3> \land <var:s> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> \} $ toward the postcondition $ \{ <var:Z> = <var:j> \land <var:g0> = <nat:3> \land <var:s> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:8> * <var:j> \} $ . This is guaranteed using the assignment rule given by Hoare logic . Taking a look at the subsequent command seen in our list of instructions , we have the environment update line \verb | <var:s> := <var:s> + <var:g0> | . This command takes the precondition $ \{ <var:Z> = <var:j> \land <var:g0> = <nat:3> \land <var:s> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:8> * <var:j> \} $ toward $ \{ <var:Z> = <var:j> \land <var:s> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <var:g2> : string := " <var:g2> " . Definition <var:g3> : string := " <var:g3> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:Z> = <var:j> }} <var:g1> := <var:Z> ; <var:g2> := <var:g1> * <var:Z> ; <var:g3> := <var:g2> * <var:Z> ; <var:g0> := <nat:3> ; <var:g1> := <var:g1> * <nat:8> ; <var:g2> := <var:g2> * <nat:9> ; <var:g3> := <var:g3> * <nat:6> ; <var:s> := <var:g3> <var:s> := <var:s> + <var:g2> <var:s> := <var:s> + <var:g1> <var:s> := <var:s> + <var:g0> {{ <var:s> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:g1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g3> = <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:g1> = <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g3> = <var:j> ^ <nat:3> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:g1> = <nat:8> * <var:j> /\ <var:g2> = <var:j> ^ <nat:2> /\ <var:g3> = <var:j> ^ <nat:3> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:g1> = <nat:8> * <var:j> /\ <var:g2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:g3> = <var:j> ^ <nat:3> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:g1> = <nat:8> * <var:j> /\ <var:g2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:g3> = <nat:6> * <var:j> ^ <nat:3> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:g1> = <nat:8> * <var:j> /\ <var:g2> = <nat:9> * <var:j> ^ <nat:2> /\ <var:g0> = <nat:3> /\ <var:s> = <nat:6> * <var:j> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:g1> = <nat:8> * <var:j> /\ <var:g0> = <nat:3> /\ <var:s> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:g0> = <nat:3> /\ <var:s> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:8> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:j> /\ <var:s> = <nat:6> * <var:j> ^ <nat:3> + <nat:9> * <var:j> ^ <nat:2> + <nat:8> * <var:j> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 