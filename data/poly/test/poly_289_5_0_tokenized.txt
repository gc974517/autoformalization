\begin{document} \begin{theorem} Define a series of instructions as \begin{verbatim} <var:b0> := <nat:3> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:W> ; <var:S> := <var:b1> ; <var:S> := <var:S> + <var:b0> \end{verbatim} Assume that $ <var:W> = <var:A> $ before executing this series of commands it holds that we have $ <var:S> = <nat:5> * <var:A> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare logic produces : \begin{eqnarray} \{ <var:W> = <var:A> \} \\ <var:b0> := <nat:3> ; \\ \{ <var:W> = <var:A> \land <var:b0> = <nat:3> \} \\ <var:b1> := <nat:5> ; \\ \{ <var:W> = <var:A> \land <var:b0> = <nat:3> \land <var:b1> = <nat:5> \} \\ <var:b1> := <var:b1> * <var:W> ; \\ \{ <var:W> = <var:A> \land <var:b0> = <nat:3> \land <var:b1> = <nat:5> * <var:A> \} \\ <var:S> := <var:b1> ; \\ \{ <var:W> = <var:A> \land <var:b0> = <nat:3> \land <var:S> = <nat:5> * <var:A> \} \\ <var:S> := <var:S> + <var:b0> \\ \{ <var:W> = <var:A> \land <var:S> = <nat:5> * <var:A> + <nat:3> \} \end{eqnarray} Considering the above , this code is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:W> = <var:A> }} <var:b0> := <nat:3> ; <var:b1> := <nat:5> ; <var:b1> := <var:b1> * <var:W> ; <var:S> := <var:b1> ; <var:S> := <var:S> + <var:b0> {{ <var:S> = <nat:5> * <var:A> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:b0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:b0> = <nat:3> /\ <var:b1> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:b0> = <nat:3> /\ <var:S> = <nat:5> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:W> = <var:A> /\ <var:S> = <nat:5> * <var:A> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 