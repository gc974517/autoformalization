\begin{document} \begin{definition} Consider a code segment <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H> := <nat:3> ; <var:H> := <nat:4> + <var:H> * <var:g> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Given , taking positive integers $ <var:i> $ , $ <var:g> = <var:i> $ prior to the evaluation of the program it holds that $ <var:H> = <nat:3> * <var:i> + <nat:4> $ when program has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:i> \} \\ <var:H> := <nat:3> ; \\ \{ <var:g> = <var:i> \land <var:H> = <nat:3> \} \\ <var:H> := <nat:4> + <var:H> * <var:g> \\ \{ <var:g> = <var:i> \land <var:H> = <nat:3> \cdot <var:i> + <nat:4> \} \end{eqnarray} Allowing interpreting our list of instructions gives us : \begin{eqnarray} \end{eqnarray} The application of standard Hoare techniques ends the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:3> ; <var:H> := <nat:4> + <var:H> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:g> = <var:i> }} <def:poly> {{ <var:H> = <nat:3> * <var:i> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:i> /\ <var:H> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:i> /\ <var:H> = <nat:3> * <var:i> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 