\begin{document} \begin{theorem} Define a set of instructions in \emph{Imp} : \begin{verbatim} <var:P0> := <nat:5> ; <var:X> := <var:P0> \end{verbatim} Given that we have $ <var:p> = <var:y> $ ahead of executing this code , it must be that we see $ <var:X> = <nat:5> $ . \end{theorem} \begin{proof} The argument for this series of commands is shown with usual Hoare logic . Considering the subsequent bit of code in the series of commands , we see the variable update command \verb | <var:P0> := <nat:5> ; | . This statement takes the precondition $ \{ <var:p> = <var:y> \} $ into the condition $ \{ <var:p> = <var:y> \land <var:P0> = <nat:5> \} $ . Moving on to the upcoming bit of code in the series of instructions , we have the environment update statement yielding $ <var:P0$ as $ <var:X>$ . This advances $ \{ <var:p> = <var:y> \land <var:P0> = <nat:5> \} $ toward the condition $ \{ <var:p> = <var:y> \land <var:X> = <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:p> = <var:y> }} <var:P0> := <nat:5> ; <var:X> := <var:P0> {{ <var:X> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:P0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:y> /\ <var:X> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 