\begin{document} \begin{theorem} Take the following program in \emph{Imp} such that \begin{verbatim} <var:O1> := <var:D> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:8> ; <var:x> := <var:O1> <var:x> := <var:x> + <var:O0> \end{verbatim} Assuming it to be that $ <var:D> = <var:g> $ ahead of interpreting this series of commands , it holds that we see $ <var:x> = <nat:8> * <var:g> + <nat:3> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:D> = <var:g> \} \\ <var:O1> := <var:D> ; \\ \{ <var:D> = <var:g> \land <var:O1> = <var:g> \} \\ <var:O0> := <nat:3> ; \\ \{ <var:D> = <var:g> \land <var:O1> = <var:g> \land <var:O0> = <nat:3> \} \\ <var:O1> := <var:O1> * <nat:8> ; \\ \{ <var:D> = <var:g> \land <var:O1> = <nat:8> \times <var:g> \land <var:O0> = <nat:3> \} \\ <var:x> := <var:O1> \\ \{ <var:D> = <var:g> \land <var:O0> = <nat:3> \land <var:x> = <nat:8> \times <var:g> \} \\ <var:x> := <var:x> + <var:O0> \\ \{ <var:D> = <var:g> \land <var:x> = <nat:8> \times <var:g> + <nat:3> \} \end{eqnarray} The application of standard Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <var:O1> : string := " <var:O1> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:D> = <var:g> }} <var:O1> := <var:D> ; <var:O0> := <nat:3> ; <var:O1> := <var:O1> * <nat:8> ; <var:x> := <var:O1> <var:x> := <var:x> + <var:O0> {{ <var:x> = <nat:8> * <var:g> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:g> /\ <var:O1> = <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:g> /\ <var:O1> = <var:g> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:g> /\ <var:O1> = <nat:8> * <var:g> /\ <var:O0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:g> /\ <var:O0> = <nat:3> /\ <var:x> = <nat:8> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:g> /\ <var:x> = <nat:8> * <var:g> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 