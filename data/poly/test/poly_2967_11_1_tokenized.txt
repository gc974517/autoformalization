\begin{document} \begin{definition} Take a code segment <def:poly> in \emph{Imp} as \begin{verbatim} <var:U1> := <var:c> ; <var:U2> := <var:U1> * <var:c> ; <var:U3> := <var:U2> * <var:c> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:3> ; <var:U2> := <var:U2> * <nat:5> ; <var:U3> := <var:U3> * <nat:5> ; <var:w> := <var:U3> <var:w> := <var:w> + <var:U2> <var:w> := <var:w> + <var:U1> <var:w> := <var:w> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Define a list of instructions <def:poly> in \emph{Imp} . Assume that we have $ <var:c> = <var:A> $ prior to the evaluation of our segment of code , it follows that $ <var:w> = <nat:5> \times <var:A> ^ <nat:3> + <nat:5> \times <var:A> ^ <nat:2> + <nat:3> \times <var:A> + <nat:1> $ once list of commands finishes . \end{theorem} \begin{proof} Using standard Hoare techniques gives : \begin{eqnarray} \{ <var:c> = <var:A> \} \\ <var:U1> := <var:c> ; \\ \{ <var:c> = <var:A> \land <var:U1> = <var:A> \} \\ <var:U2> := <var:U1> * <var:c> ; \\ \{ <var:c> = <var:A> \land <var:U1> = <var:A> \land <var:U2> = <var:A> ^ <nat:2> \} \\ <var:U3> := <var:U2> * <var:c> ; \\ \{ <var:c> = <var:A> \land <var:U1> = <var:A> \land <var:U2> = <var:A> ^ <nat:2> \land <var:U3> = <var:A> ^ <nat:3> \} \\ <var:U0> := <nat:1> ; \\ \{ <var:c> = <var:A> \land <var:U1> = <var:A> \land <var:U2> = <var:A> ^ <nat:2> \land <var:U3> = <var:A> ^ <nat:3> \land <var:U0> = <nat:1> \} \\ <var:U1> := <var:U1> * <nat:3> ; \\ \{ <var:c> = <var:A> \land <var:U1> = <nat:3> \cdot <var:A> \land <var:U2> = <var:A> ^ <nat:2> \land <var:U3> = <var:A> ^ <nat:3> \land <var:U0> = <nat:1> \} \\ <var:U2> := <var:U2> * <nat:5> ; \\ \{ <var:c> = <var:A> \land <var:U1> = <nat:3> \cdot <var:A> \land <var:U2> = <nat:5> \cdot <var:A> ^ <nat:2> \land <var:U3> = <var:A> ^ <nat:3> \land <var:U0> = <nat:1> \} \\ <var:U3> := <var:U3> * <nat:5> ; \\ \{ <var:c> = <var:A> \land <var:U1> = <nat:3> \cdot <var:A> \land <var:U2> = <nat:5> \cdot <var:A> ^ <nat:2> \land <var:U3> = <nat:5> \cdot <var:A> ^ <nat:3> \land <var:U0> = <nat:1> \} \\ <var:w> := <var:U3> \\ \{ <var:c> = <var:A> \land <var:U1> = <nat:3> \cdot <var:A> \land <var:U2> = <nat:5> \cdot <var:A> ^ <nat:2> \land <var:U0> = <nat:1> \land <var:w> = <nat:5> \cdot <var:A> ^ <nat:3> \} \\ <var:w> := <var:w> + <var:U2> \\ \{ <var:c> = <var:A> \land <var:U1> = <nat:3> \cdot <var:A> \land <var:U0> = <nat:1> \land <var:w> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:5> \cdot <var:A> ^ <nat:2> \} \\ <var:w> := <var:w> + <var:U1> \\ \{ <var:c> = <var:A> \land <var:U0> = <nat:1> \land <var:w> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:5> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> \} \\ <var:w> := <var:w> + <var:U0> \\ \{ <var:c> = <var:A> \land <var:w> = <nat:5> \cdot <var:A> ^ <nat:3> + <nat:5> \cdot <var:A> ^ <nat:2> + <nat:3> \cdot <var:A> + <nat:1> \} \end{eqnarray} Furthering the execution of the set of instructions gives : \begin{eqnarray} \end{eqnarray} Therefore , the program is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U1> := <var:c> ; <var:U2> := <var:U1> * <var:c> ; <var:U3> := <var:U2> * <var:c> ; <var:U0> := <nat:1> ; <var:U1> := <var:U1> * <nat:3> ; <var:U2> := <var:U2> * <nat:5> ; <var:U3> := <var:U3> * <nat:5> ; <var:w> := <var:U3> <var:w> := <var:w> + <var:U2> <var:w> := <var:w> + <var:U1> <var:w> := <var:w> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:c> = <var:A> }} <def:poly> {{ <var:w> = <nat:5> * <var:A> ^ <nat:3> + <nat:5> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:U1> = <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:U1> = <var:A> /\ <var:U2> = <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:U1> = <var:A> /\ <var:U2> = <var:A> ^ <nat:2> /\ <var:U3> = <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:U1> = <var:A> /\ <var:U2> = <var:A> ^ <nat:2> /\ <var:U3> = <var:A> ^ <nat:3> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:U1> = <nat:3> * <var:A> /\ <var:U2> = <var:A> ^ <nat:2> /\ <var:U3> = <var:A> ^ <nat:3> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:U1> = <nat:3> * <var:A> /\ <var:U2> = <nat:5> * <var:A> ^ <nat:2> /\ <var:U3> = <var:A> ^ <nat:3> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:U1> = <nat:3> * <var:A> /\ <var:U2> = <nat:5> * <var:A> ^ <nat:2> /\ <var:U3> = <nat:5> * <var:A> ^ <nat:3> /\ <var:U0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:U1> = <nat:3> * <var:A> /\ <var:U2> = <nat:5> * <var:A> ^ <nat:2> /\ <var:U0> = <nat:1> /\ <var:w> = <nat:5> * <var:A> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:U1> = <nat:3> * <var:A> /\ <var:U0> = <nat:1> /\ <var:w> = <nat:5> * <var:A> ^ <nat:3> + <nat:5> * <var:A> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:U0> = <nat:1> /\ <var:w> = <nat:5> * <var:A> ^ <nat:3> + <nat:5> * <var:A> ^ <nat:2> + <nat:3> * <var:A> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:A> /\ <var:w> = <nat:5> * <var:A> ^ <nat:3> + <nat:5> * <var:A> ^ <nat:2> + <nat:3> * <var:A> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 