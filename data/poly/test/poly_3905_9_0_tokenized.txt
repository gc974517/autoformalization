\begin{document} \begin{theorem} Take a program in \emph{Imp} : \begin{verbatim} <var:c0> := <nat:8> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:C> ; <var:c2> := <nat:1> ; <var:c2> := <var:c2> * <var:C> ; <var:c2> := <var:c2> * <var:C> ; <var:F> := <var:c2> ; <var:F> := <var:F> + <var:c1> ; <var:F> := <var:F> + <var:c0> \end{verbatim} Allow that $ <var:C> = <var:J> $ prior to the execution of this list of instructions , it must be that we see $ <var:F> = <nat:1> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:8> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:C> = <var:J> \} \\ <var:c0> := <nat:8> ; \\ \{ <var:C> = <var:J> \land <var:c0> = <nat:8> \} \end{eqnarray} Furthering evaluating the list of instructions yields : \begin{eqnarray} <var:c1> := <nat:4> ; \\ \{ <var:C> = <var:J> \land <var:c0> = <nat:8> \land <var:c1> = <nat:4> \} \\ <var:c1> := <var:c1> * <var:C> ; \\ \{ <var:C> = <var:J> \land <var:c0> = <nat:8> \land <var:c1> = <nat:4> \times <var:J> \} \\ <var:c2> := <nat:1> ; \\ \{ <var:C> = <var:J> \land <var:c0> = <nat:8> \land <var:c1> = <nat:4> \times <var:J> \land <var:c2> = <nat:1> \} \\ <var:c2> := <var:c2> * <var:C> ; \\ \{ <var:C> = <var:J> \land <var:c0> = <nat:8> \land <var:c1> = <nat:4> \times <var:J> \land <var:c2> = <nat:1> \times <var:J> \} \\ <var:c2> := <var:c2> * <var:C> ; \\ \{ <var:C> = <var:J> \land <var:c0> = <nat:8> \land <var:c1> = <nat:4> \times <var:J> \land <var:c2> = <nat:1> \times <var:J> ^ <nat:2> \} \\ <var:F> := <var:c2> ; \\ \{ <var:C> = <var:J> \land <var:c0> = <nat:8> \land <var:c1> = <nat:4> \times <var:J> \land <var:F> = <nat:1> \times <var:J> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:c1> ; \\ \{ <var:C> = <var:J> \land <var:c0> = <nat:8> \land <var:F> = <nat:1> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> \} \\ <var:F> := <var:F> + <var:c0> \\ \{ <var:C> = <var:J> \land <var:F> = <nat:1> \times <var:J> ^ <nat:2> + <nat:4> \times <var:J> + <nat:8> \} \end{eqnarray} The application of typical Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:C> = <var:J> }} <var:c0> := <nat:8> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:C> ; <var:c2> := <nat:1> ; <var:c2> := <var:c2> * <var:C> ; <var:c2> := <var:c2> * <var:C> ; <var:F> := <var:c2> ; <var:F> := <var:F> + <var:c1> ; <var:F> := <var:F> + <var:c0> {{ <var:F> = <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:c0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:4> * <var:J> /\ <var:c2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:4> * <var:J> /\ <var:c2> = <nat:1> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:4> * <var:J> /\ <var:c2> = <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:c0> = <nat:8> /\ <var:c1> = <nat:4> * <var:J> /\ <var:F> = <nat:1> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:c0> = <nat:8> /\ <var:F> = <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:J> /\ <var:F> = <nat:1> * <var:J> ^ <nat:2> + <nat:4> * <var:J> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 