\begin{document} \begin{theorem} We define a series of commands in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:9> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:r> ; <var:T2> := <nat:8> ; <var:T2> := <var:T2> * <var:r> ; <var:T2> := <var:T2> * <var:r> ; <var:T3> := <nat:1> ; <var:T3> := <var:T3> * <var:r> ; <var:T3> := <var:T3> * <var:r> ; <var:T3> := <var:T3> * <var:r> ; <var:K> := <var:T3> ; <var:K> := <var:K> + <var:T2> ; <var:K> := <var:K> + <var:T1> ; <var:K> := <var:K> + <var:T0> \end{verbatim} Given , given some positive coefficients $ <var:R> $ , it to hold that $ <var:r> = <var:R> $ ahead of the execution of this list of instructions , it must be that we have $ <var:K> = <nat:1> \times <var:R> ^ <nat:3> + <nat:8> \times <var:R> ^ <nat:2> + <nat:4> \times <var:R> + <nat:9> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives : \begin{eqnarray} \{ <var:r> = <var:R> \} \\ <var:T0> := <nat:9> ; \\ \{ <var:r> = <var:R> \land <var:T0> = <nat:9> \} \\ <var:T1> := <nat:4> ; \\ \{ <var:r> = <var:R> \land <var:T0> = <nat:9> \land <var:T1> = <nat:4> \} \\ <var:T1> := <var:T1> * <var:r> ; \\ \{ <var:r> = <var:R> \land <var:T0> = <nat:9> \land <var:T1> = <nat:4> * <var:R> \} \\ <var:T2> := <nat:8> ; \\ \{ <var:r> = <var:R> \land <var:T0> = <nat:9> \land <var:T1> = <nat:4> * <var:R> \land <var:T2> = <nat:8> \} \\ <var:T2> := <var:T2> * <var:r> ; \\ \{ <var:r> = <var:R> \land <var:T0> = <nat:9> \land <var:T1> = <nat:4> * <var:R> \land <var:T2> = <nat:8> * <var:R> \} \\ <var:T2> := <var:T2> * <var:r> ; \\ \{ <var:r> = <var:R> \land <var:T0> = <nat:9> \land <var:T1> = <nat:4> * <var:R> \land <var:T2> = <nat:8> * <var:R> ^ <nat:2> \} \\ <var:T3> := <nat:1> ; \\ \{ <var:r> = <var:R> \land <var:T0> = <nat:9> \land <var:T1> = <nat:4> * <var:R> \land <var:T2> = <nat:8> * <var:R> ^ <nat:2> \land <var:T3> = <nat:1> \} \\ <var:T3> := <var:T3> * <var:r> ; \\ \{ <var:r> = <var:R> \land <var:T0> = <nat:9> \land <var:T1> = <nat:4> * <var:R> \land <var:T2> = <nat:8> * <var:R> ^ <nat:2> \land <var:T3> = <nat:1> * <var:R> \} \\ <var:T3> := <var:T3> * <var:r> ; \\ \{ <var:r> = <var:R> \land <var:T0> = <nat:9> \land <var:T1> = <nat:4> * <var:R> \land <var:T2> = <nat:8> * <var:R> ^ <nat:2> \land <var:T3> = <nat:1> * <var:R> ^ <nat:2> \} \\ <var:T3> := <var:T3> * <var:r> ; \\ \{ <var:r> = <var:R> \land <var:T0> = <nat:9> \land <var:T1> = <nat:4> * <var:R> \land <var:T2> = <nat:8> * <var:R> ^ <nat:2> \land <var:T3> = <nat:1> * <var:R> ^ <nat:3> \} \\ <var:K> := <var:T3> ; \\ \{ <var:r> = <var:R> \land <var:T0> = <nat:9> \land <var:T1> = <nat:4> * <var:R> \land <var:T2> = <nat:8> * <var:R> ^ <nat:2> \land <var:K> = <nat:1> * <var:R> ^ <nat:3> \} \\ <var:K> := <var:K> + <var:T2> ; \\ \{ <var:r> = <var:R> \land <var:T0> = <nat:9> \land <var:T1> = <nat:4> * <var:R> \land <var:K> = <nat:1> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> \} \\ <var:K> := <var:K> + <var:T1> ; \\ \{ <var:r> = <var:R> \land <var:T0> = <nat:9> \land <var:K> = <nat:1> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:4> * <var:R> \} \\ <var:K> := <var:K> + <var:T0> \\ \{ <var:r> = <var:R> \land <var:K> = <nat:1> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:9> \} \end{eqnarray} As a result , the segment of code has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <var:T1> : string := " <var:T1> " . Definition <var:T2> : string := " <var:T2> " . Definition <var:T3> : string := " <var:T3> " . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:r> = <var:R> }} <var:T0> := <nat:9> ; <var:T1> := <nat:4> ; <var:T1> := <var:T1> * <var:r> ; <var:T2> := <nat:8> ; <var:T2> := <var:T2> * <var:r> ; <var:T2> := <var:T2> * <var:r> ; <var:T3> := <nat:1> ; <var:T3> := <var:T3> * <var:r> ; <var:T3> := <var:T3> * <var:r> ; <var:T3> := <var:T3> * <var:r> ; <var:K> := <var:T3> ; <var:K> := <var:K> + <var:T2> ; <var:K> := <var:K> + <var:T1> ; <var:K> := <var:K> + <var:T0> {{ <var:K> = <nat:1> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:T0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:4> * <var:R> /\ <var:T2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:4> * <var:R> /\ <var:T2> = <nat:8> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:4> * <var:R> /\ <var:T2> = <nat:8> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:4> * <var:R> /\ <var:T2> = <nat:8> * <var:R> ^ <nat:2> /\ <var:T3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:4> * <var:R> /\ <var:T2> = <nat:8> * <var:R> ^ <nat:2> /\ <var:T3> = <nat:1> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:4> * <var:R> /\ <var:T2> = <nat:8> * <var:R> ^ <nat:2> /\ <var:T3> = <nat:1> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:4> * <var:R> /\ <var:T2> = <nat:8> * <var:R> ^ <nat:2> /\ <var:T3> = <nat:1> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:4> * <var:R> /\ <var:T2> = <nat:8> * <var:R> ^ <nat:2> /\ <var:K> = <nat:1> * <var:R> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:T0> = <nat:9> /\ <var:T1> = <nat:4> * <var:R> /\ <var:K> = <nat:1> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:T0> = <nat:9> /\ <var:K> = <nat:1> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:R> /\ <var:K> = <nat:1> * <var:R> ^ <nat:3> + <nat:8> * <var:R> ^ <nat:2> + <nat:4> * <var:R> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 