\begin{document} \begin{theorem} Define a series of commands in \emph{Imp} such that \begin{verbatim} <var:x1> := <var:o> ; <var:x2> := <var:x1> * <var:o> ; <var:x3> := <var:x2> * <var:o> ; <var:x0> := <nat:9> ; <var:x1> := <var:x1> * <nat:8> ; <var:x3> := <var:x3> * <nat:9> ; <var:q> := <var:x3> <var:q> := <var:q> + <var:x1> <var:q> := <var:q> + <var:x0> \end{verbatim} Allowing that we have $ <var:o> = <var:s> $ before executing the segment of code , it must be that we have $ <var:q> = <nat:9> \times <var:s> ^ <nat:3> + <nat:8> \times <var:s> + <nat:9> $ once list of commands is done executing . \end{theorem} \begin{proof} The argument for this set of commands is done with usual Hoare techniques . Shifting focus toward the subsequent statements contained in the segment of code , we have \begin{eqnarray} \{ <var:o> = <var:s> \} \, <var:x1> := <var:o> \, \{ <var:o> = <var:s> \land <var:x1> = <var:s> \} \\ \{ <var:o> = <var:s> \land <var:x1> = <var:s> \} \, <var:x2> := <var:x1> * <var:o> \, \{ <var:o> = <var:s> \land <var:x1> = <var:s> \land <var:x2> = <var:s> ^ <nat:2> \} \\ \{ <var:o> = <var:s> \land <var:x1> = <var:s> \land <var:x2> = <var:s> ^ <nat:2> \} \, <var:x3> := <var:x2> * <var:o> \, \{ <var:o> = <var:s> \land <var:x1> = <var:s> \land <var:x2> = <var:s> ^ <nat:2> \land <var:x3> = <var:s> ^ <nat:3> \} \\ \{ <var:o> = <var:s> \land <var:x1> = <var:s> \land <var:x2> = <var:s> ^ <nat:2> \land <var:x3> = <var:s> ^ <nat:3> \} \, <var:x0> := <nat:9> \, \{ <var:o> = <var:s> \land <var:x1> = <var:s> \land <var:x2> = <var:s> ^ <nat:2> \land <var:x3> = <var:s> ^ <nat:3> \land <var:x0> = <nat:9> \} \\ \{ <var:o> = <var:s> \land <var:x1> = <var:s> \land <var:x2> = <var:s> ^ <nat:2> \land <var:x3> = <var:s> ^ <nat:3> \land <var:x0> = <nat:9> \} \, <var:x1> := <var:x1> * <nat:8> \, \{ <var:o> = <var:s> \land <var:x1> = <nat:8> \times <var:s> \land <var:x2> = <var:s> ^ <nat:2> \land <var:x3> = <var:s> ^ <nat:3> \land <var:x0> = <nat:9> \} \\ \{ <var:o> = <var:s> \land <var:x1> = <nat:8> \times <var:s> \land <var:x2> = <var:s> ^ <nat:2> \land <var:x3> = <var:s> ^ <nat:3> \land <var:x0> = <nat:9> \} \, <var:x3> := <var:x3> * <nat:9> \, \{ <var:o> = <var:s> \land <var:x1> = <nat:8> \times <var:s> \land <var:x2> = <var:s> ^ <nat:2> \land <var:x3> = <nat:9> \times <var:s> ^ <nat:3> \land <var:x0> = <nat:9> \} \end{eqnarray} This is ensured using the assignment scheme of usual Hoare reasoning . Advancing on , we have \begin{eqnarray} \{ <var:o> = <var:s> \} \, <var:x1> := <var:o> \, \{ <var:o> = <var:s> \land <var:x1> = <var:s> \} \end{eqnarray} This is ensured using the law from Hoare reasoning . Moving forward to the upcoming bits of codefound in our series of instructions , we see \begin{eqnarray} \{ <var:o> = <var:s> \} \, <var:x1> := <var:o> \, \{ <var:o> = <var:s> \land <var:x1> = <var:s> \} \\ \{ <var:o> = <var:s> \land <var:x1> = <var:s> \} \, <var:x2> := <var:x1> * <var:o> \, \{ <var:o> = <var:s> \land <var:x1> = <var:s> \land <var:x2> = <var:s> ^ <nat:2> \} \end{eqnarray} This is given through the binding scheme defined in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Definition <var:x3> : string := " <var:x3> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:o> = <var:s> }} <var:x1> := <var:o> ; <var:x2> := <var:x1> * <var:o> ; <var:x3> := <var:x2> * <var:o> ; <var:x0> := <nat:9> ; <var:x1> := <var:x1> * <nat:8> ; <var:x3> := <var:x3> * <nat:9> ; <var:q> := <var:x3> <var:q> := <var:q> + <var:x1> <var:q> := <var:q> + <var:x0> {{ <var:q> = <nat:9> * <var:s> ^ <nat:3> + <nat:8> * <var:s> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:x1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:x1> = <var:s> /\ <var:x2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:x1> = <var:s> /\ <var:x2> = <var:s> ^ <nat:2> /\ <var:x3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:x1> = <var:s> /\ <var:x2> = <var:s> ^ <nat:2> /\ <var:x3> = <var:s> ^ <nat:3> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:x1> = <nat:8> * <var:s> /\ <var:x2> = <var:s> ^ <nat:2> /\ <var:x3> = <var:s> ^ <nat:3> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:x1> = <nat:8> * <var:s> /\ <var:x2> = <var:s> ^ <nat:2> /\ <var:x3> = <nat:9> * <var:s> ^ <nat:3> /\ <var:x0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:x1> = <nat:8> * <var:s> /\ <var:x2> = <var:s> ^ <nat:2> /\ <var:x0> = <nat:9> /\ <var:q> = <nat:9> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:x0> = <nat:9> /\ <var:q> = <nat:9> * <var:s> ^ <nat:3> + <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:s> /\ <var:q> = <nat:9> * <var:s> ^ <nat:3> + <nat:8> * <var:s> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 