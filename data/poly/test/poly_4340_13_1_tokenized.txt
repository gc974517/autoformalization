\begin{document} \begin{definition} Take a program <def:poly> in \emph{Imp} : \begin{verbatim} <var:S1> := <var:i> ; <var:S2> := <var:S1> * <var:i> ; <var:S3> := <var:S2> * <var:i> ; <var:S4> := <var:S3> * <var:i> ; <var:S5> := <var:S4> * <var:i> ; <var:S0> := <nat:1> ; <var:S2> := <var:S2> * <nat:4> ; <var:S4> := <var:S4> * <nat:4> ; <var:S5> := <var:S5> * <nat:3> ; <var:Y> := <var:S5> <var:Y> := <var:Y> + <var:S4> <var:Y> := <var:Y> + <var:S2> <var:Y> := <var:Y> + <var:S0> \end{verbatim} \end{definition} \begin{theorem} Given it to hold that $ <var:i> = <var:u> $ prior to the execution of our set of commands , then we have $ <var:Y> = <nat:3> \times <var:u> ^ <nat:5> + <nat:4> \times <var:u> ^ <nat:4> + <nat:4> \times <var:u> ^ <nat:2> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for our code segment is demonstrated with this decorated program . \begin{eqnarray} \{ <var:i> = <var:u> \} \\ <var:S1> := <var:i> ; \\ \{ <var:i> = <var:u> \land <var:S1> = <var:u> \} \end{eqnarray} Advancing the evaluation of our list of commands returns : \begin{eqnarray} <var:S2> := <var:S1> * <var:i> ; \\ \{ <var:i> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <var:u> ^ <nat:2> \} \\ <var:S3> := <var:S2> * <var:i> ; \\ \{ <var:i> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <var:u> ^ <nat:2> \land <var:S3> = <var:u> ^ <nat:3> \} \\ <var:S4> := <var:S3> * <var:i> ; \\ \{ <var:i> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <var:u> ^ <nat:2> \land <var:S3> = <var:u> ^ <nat:3> \land <var:S4> = <var:u> ^ <nat:4> \} \\ <var:S5> := <var:S4> * <var:i> ; \\ \{ <var:i> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <var:u> ^ <nat:2> \land <var:S3> = <var:u> ^ <nat:3> \land <var:S4> = <var:u> ^ <nat:4> \land <var:S5> = <var:u> ^ <nat:5> \} \\ <var:S0> := <nat:1> ; \\ \{ <var:i> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <var:u> ^ <nat:2> \land <var:S3> = <var:u> ^ <nat:3> \land <var:S4> = <var:u> ^ <nat:4> \land <var:S5> = <var:u> ^ <nat:5> \land <var:S0> = <nat:1> \} \\ <var:S2> := <var:S2> * <nat:4> ; \\ \{ <var:i> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <nat:4> \cdot <var:u> ^ <nat:2> \land <var:S3> = <var:u> ^ <nat:3> \land <var:S4> = <var:u> ^ <nat:4> \land <var:S5> = <var:u> ^ <nat:5> \land <var:S0> = <nat:1> \} \\ <var:S4> := <var:S4> * <nat:4> ; \\ \{ <var:i> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <nat:4> \cdot <var:u> ^ <nat:2> \land <var:S3> = <var:u> ^ <nat:3> \land <var:S4> = <nat:4> \cdot <var:u> ^ <nat:4> \land <var:S5> = <var:u> ^ <nat:5> \land <var:S0> = <nat:1> \} \\ <var:S5> := <var:S5> * <nat:3> ; \\ \{ <var:i> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <nat:4> \cdot <var:u> ^ <nat:2> \land <var:S3> = <var:u> ^ <nat:3> \land <var:S4> = <nat:4> \cdot <var:u> ^ <nat:4> \land <var:S5> = <nat:3> \cdot <var:u> ^ <nat:5> \land <var:S0> = <nat:1> \} \end{eqnarray} Allowing evaluating our program gives : \begin{eqnarray} <var:Y> := <var:S5> \\ \{ <var:i> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <nat:4> \cdot <var:u> ^ <nat:2> \land <var:S3> = <var:u> ^ <nat:3> \land <var:S4> = <nat:4> \cdot <var:u> ^ <nat:4> \land <var:S0> = <nat:1> \land <var:Y> = <nat:3> \cdot <var:u> ^ <nat:5> \} \\ <var:Y> := <var:Y> + <var:S4> \\ \{ <var:i> = <var:u> \land <var:S1> = <var:u> \land <var:S2> = <nat:4> \cdot <var:u> ^ <nat:2> \land <var:S3> = <var:u> ^ <nat:3> \land <var:S0> = <nat:1> \land <var:Y> = <nat:3> \cdot <var:u> ^ <nat:5> + <nat:4> \cdot <var:u> ^ <nat:4> \} \\ <var:Y> := <var:Y> + <var:S2> \\ \{ <var:i> = <var:u> \land <var:S1> = <var:u> \land <var:S0> = <nat:1> \land <var:Y> = <nat:3> \cdot <var:u> ^ <nat:5> + <nat:4> \cdot <var:u> ^ <nat:4> + <nat:4> \cdot <var:u> ^ <nat:2> \} \\ <var:Y> := <var:Y> + <var:S0> \\ \{ <var:i> = <var:u> \land <var:Y> = <nat:3> \cdot <var:u> ^ <nat:5> + <nat:4> \cdot <var:u> ^ <nat:4> + <nat:4> \cdot <var:u> ^ <nat:2> + <nat:1> \} \end{eqnarray} Using standard Hoare techniques ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Definition <var:S2> : string := " <var:S2> " . Definition <var:S3> : string := " <var:S3> " . Definition <var:S4> : string := " <var:S4> " . Definition <var:S5> : string := " <var:S5> " . Definition <def:poly> := <var:S1> := <var:i> ; <var:S2> := <var:S1> * <var:i> ; <var:S3> := <var:S2> * <var:i> ; <var:S4> := <var:S3> * <var:i> ; <var:S5> := <var:S4> * <var:i> ; <var:S0> := <nat:1> ; <var:S2> := <var:S2> * <nat:4> ; <var:S4> := <var:S4> * <nat:4> ; <var:S5> := <var:S5> * <nat:3> ; <var:Y> := <var:S5> <var:Y> := <var:Y> + <var:S4> <var:Y> := <var:Y> + <var:S2> <var:Y> := <var:Y> + <var:S0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:i> = <var:u> }} <def:poly> {{ <var:Y> = <nat:3> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:S1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:S1> = <var:u> /\ <var:S2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:S1> = <var:u> /\ <var:S2> = <var:u> ^ <nat:2> /\ <var:S3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:S1> = <var:u> /\ <var:S2> = <var:u> ^ <nat:2> /\ <var:S3> = <var:u> ^ <nat:3> /\ <var:S4> = <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:S1> = <var:u> /\ <var:S2> = <var:u> ^ <nat:2> /\ <var:S3> = <var:u> ^ <nat:3> /\ <var:S4> = <var:u> ^ <nat:4> /\ <var:S5> = <var:u> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:S1> = <var:u> /\ <var:S2> = <var:u> ^ <nat:2> /\ <var:S3> = <var:u> ^ <nat:3> /\ <var:S4> = <var:u> ^ <nat:4> /\ <var:S5> = <var:u> ^ <nat:5> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:S1> = <var:u> /\ <var:S2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:S3> = <var:u> ^ <nat:3> /\ <var:S4> = <var:u> ^ <nat:4> /\ <var:S5> = <var:u> ^ <nat:5> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:S1> = <var:u> /\ <var:S2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:S3> = <var:u> ^ <nat:3> /\ <var:S4> = <nat:4> * <var:u> ^ <nat:4> /\ <var:S5> = <var:u> ^ <nat:5> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:S1> = <var:u> /\ <var:S2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:S3> = <var:u> ^ <nat:3> /\ <var:S4> = <nat:4> * <var:u> ^ <nat:4> /\ <var:S5> = <nat:3> * <var:u> ^ <nat:5> /\ <var:S0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:S1> = <var:u> /\ <var:S2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:S3> = <var:u> ^ <nat:3> /\ <var:S4> = <nat:4> * <var:u> ^ <nat:4> /\ <var:S0> = <nat:1> /\ <var:Y> = <nat:3> * <var:u> ^ <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:S1> = <var:u> /\ <var:S2> = <nat:4> * <var:u> ^ <nat:2> /\ <var:S3> = <var:u> ^ <nat:3> /\ <var:S0> = <nat:1> /\ <var:Y> = <nat:3> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:S1> = <var:u> /\ <var:S0> = <nat:1> /\ <var:Y> = <nat:3> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:u> /\ <var:Y> = <nat:3> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:4> + <nat:4> * <var:u> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 