\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} : \begin{verbatim} <var:T> := <nat:3> ; <var:T> := <nat:1> + <var:T> * <var:z> ; <var:T> := <nat:1> + <var:T> * <var:z> ; <var:T> := <nat:1> + <var:T> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Consider the following program <def:poly> . Assuming $ <var:z> = <var:V> $ ahead of the execution of the program it follows that we see $ <var:T> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:z> = <var:V> \} \\ <var:T> := <nat:3> ; \\ \{ <var:z> = <var:V> \land <var:T> = <nat:3> \} \end{eqnarray} Continuing the execution of our list of instructions gives : \begin{eqnarray} <var:T> := <nat:1> + <var:T> * <var:z> ; \\ \{ <var:z> = <var:V> \land <var:T> = <nat:3> \times <var:V> + <nat:1> \} \\ <var:T> := <nat:1> + <var:T> * <var:z> ; \\ \{ <var:z> = <var:V> \land <var:T> = <nat:3> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:1> \} \\ <var:T> := <nat:1> + <var:T> * <var:z> \\ \{ <var:z> = <var:V> \land <var:T> = <nat:3> \times <var:V> ^ <nat:3> + <nat:1> \times <var:V> ^ <nat:2> + <nat:1> \times <var:V> + <nat:1> \} \end{eqnarray} The application of typical Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:T> := <nat:3> ; <var:T> := <nat:1> + <var:T> * <var:z> ; <var:T> := <nat:1> + <var:T> * <var:z> ; <var:T> := <nat:1> + <var:T> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:z> = <var:V> }} <def:poly> {{ <var:T> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:T> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:T> = <nat:3> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:T> = <nat:3> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:V> /\ <var:T> = <nat:3> * <var:V> ^ <nat:3> + <nat:1> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 