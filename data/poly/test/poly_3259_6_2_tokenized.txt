\begin{document} \begin{theorem} Define a list of commands : \begin{verbatim} <var:F> := <nat:1> ; <var:F> := <nat:3> + <var:F> * <var:B> ; <var:F> := <nat:1> + <var:F> * <var:B> ; <var:F> := <nat:3> + <var:F> * <var:B> ; <var:F> := <nat:3> + <var:F> * <var:B> ; <var:F> := <nat:1> + <var:F> * <var:B> \end{verbatim} Assume it to hold that $ <var:B> = <var:w> $ ( for positive integers $ <var:w> $ ) prior to the execution of this series of instructions it follows that we have $ <var:F> = <nat:1> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our code segment is shown through Hoare techniques . Now , \verb | { <var:B> = <var:w> } <var:F> := <nat:1> { <var:B> = <var:w> \land <var:F> = <nat:1> } | , \verb | { <var:B> = <var:w> \land <var:F> = <nat:1> } <var:F> := <nat:3> + <var:F> * <var:B> { <var:B> = <var:w> \land <var:F> = <nat:1> \cdot <var:w> + <nat:3> } | , \verb | { <var:B> = <var:w> \land <var:F> = <nat:1> \cdot <var:w> + <nat:3> } <var:F> := <nat:1> + <var:F> * <var:B> { <var:B> = <var:w> \land <var:F> = <nat:1> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:1> } | , \verb | { <var:B> = <var:w> \land <var:F> = <nat:1> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:1> } <var:F> := <nat:3> + <var:F> * <var:B> { <var:B> = <var:w> \land <var:F> = <nat:1> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:3> } | , \verb | { <var:B> = <var:w> \land <var:F> = <nat:1> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:1> \cdot <var:w> + <nat:3> } <var:F> := <nat:3> + <var:F> * <var:B> { <var:B> = <var:w> \land <var:F> = <nat:1> \cdot <var:w> ^ <nat:4> + <nat:3> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:3> } | and \verb | { <var:B> = <var:w> \land <var:F> = <nat:1> \cdot <var:w> ^ <nat:4> + <nat:3> \cdot <var:w> ^ <nat:3> + <nat:1> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:3> } <var:F> := <nat:1> + <var:F> * <var:B{ <var:B> = <var:w> \land <var:F> = <nat:1> \cdot <var:w> ^ <nat:5> + <nat:3> \cdot <var:w> ^ <nat:4> + <nat:1> \cdot <var:w> ^ <nat:3> + <nat:3> \cdot <var:w> ^ <nat:2> + <nat:3> \cdot <var:w> + <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:B> = <var:w> }} <var:F> := <nat:1> ; <var:F> := <nat:3> + <var:F> * <var:B> ; <var:F> := <nat:1> + <var:F> * <var:B> ; <var:F> := <nat:3> + <var:F> * <var:B> ; <var:F> := <nat:3> + <var:F> * <var:B> ; <var:F> := <nat:1> + <var:F> * <var:B> {{ <var:F> = <nat:1> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:F> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:F> = <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:F> = <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:F> = <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:1> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:F> = <nat:1> * <var:w> ^ <nat:4> + <nat:3> * <var:w> ^ <nat:3> + <nat:1> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:w> /\ <var:F> = <nat:1> * <var:w> ^ <nat:5> + <nat:3> * <var:w> ^ <nat:4> + <nat:1> * <var:w> ^ <nat:3> + <nat:3> * <var:w> ^ <nat:2> + <nat:3> * <var:w> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 