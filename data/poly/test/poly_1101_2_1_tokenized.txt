\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} : \begin{verbatim} <var:O0> := <nat:4> ; <var:e> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} We define a code <def:poly> in \emph{Imp} . Given --- for $ <var:u> $ --- that $ <var:U> = <var:u> $ ahead of executing this series of instructions , then we have $ <var:e> = <nat:4> $ once series of instructions exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:U> = <var:u> \} \\ <var:O0> := <nat:4> ; \\ \{ <var:U> = <var:u> \land <var:O0> = <nat:4> \} \\ <var:e> := <var:O0> \\ \{ <var:U> = <var:u> \land <var:e> = <nat:4> \} \end{eqnarray} Using standard Hoare techniques resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:4> ; <var:e> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:U> = <var:u> }} <def:poly> {{ <var:e> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:u> /\ <var:e> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 