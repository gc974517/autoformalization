\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f> := <nat:4> ; <var:f> := <nat:4> + <var:f> * <var:o> ; <var:f> := <nat:4> + <var:f> * <var:o> \end{verbatim} \end{definition} \begin{theorem} We define the following series of instructions <def:poly> . Assume $ <var:o> = <var:v> $ ahead of the execution of our set of commands , it must be that $ <var:f> = <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of our list of commands is given through typical Hoare techniques . After , \begin{verbatim} { <var:o> = <var:v> } <var:f> := <nat:4> { <var:o> = <var:v> \land <var:f> = <nat:4> } \end{verbatim} This is given with the variable update scheme defined in Hoare techniques . Shifting focus toward the next statement seen in our series of commands , \begin{verbatim} { <var:o> = <var:v> } <var:f> := <nat:4> { <var:o> = <var:v> \land <var:f> = <nat:4> } \end{verbatim} This is rigorously given using the inference rule of Hoare logic . Considering the next piece of code in our segment of code , we have \begin{verbatim} { <var:o> = <var:v> } <var:f> := <nat:4> { <var:o> = <var:v> \land <var:f> = <nat:4> } \end{verbatim} This is rigorously given through the binding law defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:f> := <nat:4> ; <var:f> := <nat:4> + <var:f> * <var:o> ; <var:f> := <nat:4> + <var:f> * <var:o> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:o> = <var:v> }} <def:poly> {{ <var:f> = <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:f> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:f> = <nat:4> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:v> /\ <var:f> = <nat:4> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 