\begin{document} \begin{theorem} Define the following code segment in \emph{Imp} as \begin{verbatim} <var:J0> := <nat:7> ; <var:J1> := <nat:7> ; <var:J1> := <var:J1> * <var:s> ; <var:X> := <var:J1> ; <var:X> := <var:X> + <var:J0> \end{verbatim} Allowing it to be that $ <var:s> = <var:n> $ prior to running this set of instructions , it follows that we have $ <var:X> = <nat:7> \times <var:n> + <nat:7> $ after series of commands is done executing . \end{theorem} \begin{proof} The way to prove correctness for the code is shown using Hoare logic . Moving on to the following line contained in our series of commands , we see the statement assigning $ <nat:7> $ to $ <var:J0>$ . This statement redefines the condition $ \{ <var:s> = <var:n> \} $ into the condition $ \{ <var:s> = <var:n> \land <var:J0> = <nat:7> \} $ . This is given through the assignment law obtained from usual Hoare logic . Immediately following , the variable update line \verb | <var:J1> := <nat:7> ; | . This statement forwards $ \{ <var:s> = <var:n> \land <var:J0> = <nat:7> \} $ into the condition $ \{ <var:s> = <var:n> \land <var:J0> = <nat:7> \land <var:J1> = <nat:7> \} $ . This is guaranteed with the assignment scheme from Hoare reasoning . Honing in on the upcoming line seen in the series of instructions , we have the variable binding code \verb | <var:J1> := <var:J1> * <var:s> ; | . This advances the condition $ \{ <var:s> = <var:n> \land <var:J0> = <nat:7> \land <var:J1> = <nat:7> \} $ to the condition $ \{ <var:s> = <var:n> \land <var:J0> = <nat:7> \land <var:J1> = <nat:7> \times <var:n> \} $ . Moving forward to the next line contained in the list of instructions , we have the binding command \verb | <var:X> := <var:J1> ; | . This takes $ \{ <var:s> = <var:n> \land <var:J0> = <nat:7> \land <var:J1> = <nat:7> \times <var:n> \} $ into $ \{ <var:s> = <var:n> \land <var:J0> = <nat:7> \land <var:X> = <nat:7> \times <var:n> \} $ . Moving on to the upcoming statement seen in the program , we see the variable update code assigning $ <var:X> + <var:J0$ as $ <var:X>$ . This command advances the precondition $ \{ <var:s> = <var:n> \land <var:J0> = <nat:7> \land <var:X> = <nat:7> \times <var:n> \} $ toward the condition $ \{ <var:s> = <var:n> \land <var:X> = <nat:7> \times <var:n> + <nat:7> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:s> = <var:n> }} <var:J0> := <nat:7> ; <var:J1> := <nat:7> ; <var:J1> := <var:J1> * <var:s> ; <var:X> := <var:J1> ; <var:X> := <var:X> + <var:J0> {{ <var:X> = <nat:7> * <var:n> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:J0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:J0> = <nat:7> /\ <var:J1> = <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:J0> = <nat:7> /\ <var:X> = <nat:7> * <var:n> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:n> /\ <var:X> = <nat:7> * <var:n> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 