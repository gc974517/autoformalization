\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:x0> := <nat:2> ; <var:e> := <var:x0> \end{verbatim} \end{definition} \begin{theorem} Define a list of commands <def:poly> . Assume --- given positive coefficients $ <var:s> $ --- it to hold that $ <var:K> = <var:s> $ before evaluating this segment of code , then we see $ <var:e> = <nat:2> $ . \end{theorem} \begin{proof} The proof of this set of commands can be demonstrated with usual Hoare reasoning . Moving on to the next statement in the code segment , we have \begin{eqnarray} \{ <var:K> = <var:s> \} \, <var:x0> := <nat:2> \, \{ <var:K> = <var:s> \land <var:x0> = <nat:2> \} \end{eqnarray} Paying attention to the following bit of code found in our code , we see \begin{eqnarray} \{ <var:K> = <var:s> \} \, <var:x0> := <nat:2> \, \{ <var:K> = <var:s> \land <var:x0> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <def:poly> := <var:x0> := <nat:2> ; <var:e> := <var:x0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:K> = <var:s> }} <def:poly> {{ <var:e> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:x0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:s> /\ <var:e> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 