\begin{document} \begin{theorem} We define a list of commands such that \begin{verbatim} <var:s0> := <nat:9> ; <var:v> := <var:s0> \end{verbatim} Assuming that $ <var:x> = <var:J> $ ( given positive integer coefficients $ <var:J> $ ) before evaluating this code segment it holds that $ <var:v> = <nat:9> $ . \end{theorem} \begin{proof} The course of logic for our series of instructions can be done through Hoare logic . Moving forward to the subsequent pieces of code contained in our list of commands , we see \[ \begin{tabular} {rcl} \{ <var:x> = <var:J> \} & <var:s0> := <nat:9> & \{ <var:x> = <var:J> \land <var:s0> = <nat:9> \} \\ \{ <var:x> = <var:J> \land <var:s0> = <nat:9> \} & <var:v> := <var:s0& \{ <var:x> = <var:J> \land <var:v> = <nat:9> \} \end{tabular} This is shown to be logically sound using the environment update inference rule of typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:x> = <var:J> }} <var:s0> := <nat:9> ; <var:v> := <var:s0> {{ <var:v> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:J> /\ <var:v> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 