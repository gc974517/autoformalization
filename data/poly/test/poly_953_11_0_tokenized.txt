\begin{document} \begin{theorem} We define the following code segment in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:2> ; <var:G2> := <nat:2> ; <var:G2> := <var:G2> * <var:e> ; <var:G2> := <var:G2> * <var:e> ; <var:G3> := <nat:4> ; <var:G3> := <var:G3> * <var:e> ; <var:G3> := <var:G3> * <var:e> ; <var:G3> := <var:G3> * <var:e> ; <var:k> := <var:G3> ; <var:k> := <var:k> + <var:G2> ; <var:k> := <var:k> + <var:G0> \end{verbatim} Assume it to hold that $ <var:e> = <var:g> $ ahead of running our list of commands then we have $ <var:k> = <nat:4> \times <var:g> ^ <nat:3> + <nat:2> \times <var:g> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} The method of proof for our set of commands can be seen through typical Hoare logic . Focusing on the following step contained in our list of commands , \verb | { <var:e> = <var:g> } <var:G0> := <nat:2> { <var:e> = <var:g> \land <var:G0> = <nat:2> } | . Going forward , we have \verb | { <var:e> = <var:g> } <var:G0> := <nat:2> { <var:e> = <var:g> \land <var:G0> = <nat:2> } | , \verb | { <var:e> = <var:g> \land <var:G0> = <nat:2> } <var:G2> := <nat:2> { <var:e> = <var:g> \land <var:G0> = <nat:2> \land <var:G2> = <nat:2> } | and \verb | { <var:e> = <var:g> \land <var:G0> = <nat:2> \land <var:G2> = <nat:2> } <var:G2> := <var:G2> * <var:e> { <var:e> = <var:g> \land <var:G0> = <nat:2> \land <var:G2> = <nat:2> \cdot <var:g> } | . This is shown to be logically sound through the variable update rule defined in Hoare techniques . Advancing to the following pieces of code in the series of instructions , \verb | { <var:e> = <var:g> } <var:G0> := <nat:2> { <var:e> = <var:g> \land <var:G0> = <nat:2> } | , \verb | { <var:e> = <var:g> \land <var:G0> = <nat:2> } <var:G2> := <nat:2> { <var:e> = <var:g> \land <var:G0> = <nat:2> \land <var:G2> = <nat:2> } | , \verb | { <var:e> = <var:g> \land <var:G0> = <nat:2> \land <var:G2> = <nat:2> } <var:G2> := <var:G2> * <var:e> { <var:e> = <var:g> \land <var:G0> = <nat:2> \land <var:G2> = <nat:2> \cdot <var:g> } | , \verb | { <var:e> = <var:g> \land <var:G0> = <nat:2> \land <var:G2> = <nat:2> \cdot <var:g> } <var:G2> := <var:G2> * <var:e> { <var:e> = <var:g> \land <var:G0> = <nat:2> \land <var:G2> = <nat:2> \cdot <var:g> ^ <nat:2> } | and \verb | { <var:e> = <var:g> \land <var:G0> = <nat:2> \land <var:G2> = <nat:2> \cdot <var:g> ^ <nat:2> } <var:G3> := <nat:4> { <var:e> = <var:g> \land <var:G0> = <nat:2> \land <var:G2> = <nat:2> \cdot <var:g> ^ <nat:2> \land <var:G3> = <nat:4> } | . This is sound using the environment update scheme defined in standard Hoare reasoning . After , we have \verb | { <var:e> = <var:g> } <var:G0> := <nat:2> { <var:e> = <var:g> \land <var:G0> = <nat:2> } | . Following , we have \verb | { <var:e> = <var:g> } <var:G0> := <nat:2> { <var:e> = <var:g> \land <var:G0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:e> = <var:g> }} <var:G0> := <nat:2> ; <var:G2> := <nat:2> ; <var:G2> := <var:G2> * <var:e> ; <var:G2> := <var:G2> * <var:e> ; <var:G3> := <nat:4> ; <var:G3> := <var:G3> * <var:e> ; <var:G3> := <var:G3> * <var:e> ; <var:G3> := <var:G3> * <var:e> ; <var:k> := <var:G3> ; <var:k> := <var:k> + <var:G2> ; <var:k> := <var:k> + <var:G0> {{ <var:k> = <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:G0> = <nat:2> /\ <var:G2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:G0> = <nat:2> /\ <var:G2> = <nat:2> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:G0> = <nat:2> /\ <var:G2> = <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:G0> = <nat:2> /\ <var:G2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:G3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:G0> = <nat:2> /\ <var:G2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:G3> = <nat:4> * <var:g> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:G0> = <nat:2> /\ <var:G2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:G3> = <nat:4> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:G0> = <nat:2> /\ <var:G2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:G3> = <nat:4> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:G0> = <nat:2> /\ <var:G2> = <nat:2> * <var:g> ^ <nat:2> /\ <var:k> = <nat:4> * <var:g> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:G0> = <nat:2> /\ <var:k> = <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:g> /\ <var:k> = <nat:4> * <var:g> ^ <nat:3> + <nat:2> * <var:g> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 