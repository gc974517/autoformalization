\begin{document} \begin{theorem} Let the following set of instructions as follows \begin{verbatim} <var:x> := <nat:2> ; <var:x> := <var:x> * <var:p> ; <var:x> := <nat:3> + <var:x> * <var:p> ; <var:x> := <nat:2> + <var:x> * <var:p> ; <var:x> := <nat:3> + <var:x> * <var:p> ; <var:x> := <nat:4> + <var:x> * <var:p> ; <var:x> := <nat:2> + <var:x> * <var:p> \end{verbatim} Assume that $ <var:p> = <var:k> $ before interpreting the series of instructions , it follows that $ <var:x> = <nat:2> \cdot <var:k> ^ <nat:6> + <nat:3> \cdot <var:k> ^ <nat:4> + <nat:2> \cdot <var:k> ^ <nat:3> + <nat:3> \cdot <var:k> ^ <nat:2> + <nat:4> \cdot <var:k> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the segment of code can be given by usual Hoare reasoning . Moving forward , the environment update command \verb | <var:x> := <nat:2> ; | . This moves $ \{ <var:p> = <var:k> \} $ as the condition $ \{ <var:p> = <var:k> \land <var:x> = <nat:2> \} $ . Advancing to the next step , we have the assignment line defining $ <var:x> * <var:p> $ into $ <var:x>$ . This transfers $ \{ <var:p> = <var:k> \land <var:x> = <nat:2> \} $ into the postcondition $ \{ <var:p> = <var:k> \land <var:x> = <nat:2> * <var:k> + \} $ . Focusing on the proceeding bit of code seen in our code segment , we see the assignment code \verb | <var:x> := <nat:3> + <var:x> * <var:p> ; | . This statement redefines the precondition $ \{ <var:p> = <var:k> \land <var:x> = <nat:2> * <var:k> + \} $ toward the condition $ \{ <var:p> = <var:k> \land <var:x> = <nat:2> * <var:k> ^ <nat:2> + <nat:3> \} $ . Moving on to the next step , we see the variable binding code yielding $ <nat:2> + <var:x> * <var:p> $ into $ <var:x>$ . This code forwards the condition $ \{ <var:p> = <var:k> \land <var:x> = <nat:2> * <var:k> ^ <nat:2> + <nat:3> \} $ into the postcondition $ \{ <var:p> = <var:k> \land <var:x> = <nat:2> * <var:k> ^ <nat:3> + <nat:3> * <var:k> + <nat:2> \} $ . Looking at the subsequent statement in the set of instructions , the environment update command \verb | <var:x> := <nat:3> + <var:x> * <var:p> ; | . This command transfers the condition $ \{ <var:p> = <var:k> \land <var:x> = <nat:2> * <var:k> ^ <nat:3> + <nat:3> * <var:k> + <nat:2> \} $ to the condition $ \{ <var:p> = <var:k> \land <var:x> = <nat:2> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> \} $ . Going to the next step , we see the environment update statement giving $ <nat:4> + <var:x> * <var:p> $ to $ <var:x>$ . This command moves the precondition $ \{ <var:p> = <var:k> \land <var:x> = <nat:2> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> \} $ into the condition $ \{ <var:p> = <var:k> \land <var:x> = <nat:2> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:4> \} $ . This is shown using the assignment scheme in Hoare reasoning . Immediately after , we see the variable assignmet code \verb | <var:x> := <nat:2> + <var:x> * <var:p> | . This forwards the precondition $ \{ <var:p> = <var:k> \land <var:x> = <nat:2> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:4> \} $ toward the postcondition $ \{ <var:p> = <var:k> \land <var:x> = <nat:2> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:p> = <var:k> }} <var:x> := <nat:2> ; <var:x> := <var:x> * <var:p> ; <var:x> := <nat:3> + <var:x> * <var:p> ; <var:x> := <nat:2> + <var:x> * <var:p> ; <var:x> := <nat:3> + <var:x> * <var:p> ; <var:x> := <nat:4> + <var:x> * <var:p> ; <var:x> := <nat:2> + <var:x> * <var:p> {{ <var:x> = <nat:2> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:x> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:x> = <nat:2> * <var:k> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:x> = <nat:2> * <var:k> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:x> = <nat:2> * <var:k> ^ <nat:3> + <nat:3> * <var:k> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:x> = <nat:2> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:2> + <nat:2> * <var:k> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:x> = <nat:2> * <var:k> ^ <nat:5> + <nat:3> * <var:k> ^ <nat:3> + <nat:2> * <var:k> ^ <nat:2> + <nat:3> * <var:k> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:k> /\ <var:x> = <nat:2> * <var:k> ^ <nat:6> + <nat:3> * <var:k> ^ <nat:4> + <nat:2> * <var:k> ^ <nat:3> + <nat:3> * <var:k> ^ <nat:2> + <nat:4> * <var:k> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 