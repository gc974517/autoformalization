\begin{document} \begin{definition} Define the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:T0> := <nat:4> ; <var:U> := <var:T0> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:E> = <var:h> $ , taking $ <var:h> \in \mathbb{Z}^+ $ , before the execution of our series of instructions then we see $ <var:U> = <nat:4> $ . \end{theorem} \begin{proof} The proof of the set of instructions is evident by Hoare techniques . Observing the proceeding line of code in the segment of code , we have the line \verb | <var:T0> := <nat:4> ; | . This line takes $ \{ <var:E> = <var:h> \} $ toward the condition $ \{ <var:E> = <var:h> \land <var:T0> = <nat:4> \} $ . Moving forward to the next step , we see the variable assignmet statement \verb | <var:U> := <var:T0> | . This redefines $ \{ <var:E> = <var:h> \land <var:T0> = <nat:4> \} $ to the postcondition $ \{ <var:E> = <var:h> \land <var:U> = <nat:4> \} $ . This is shown to be logically sound using the assignment scheme from typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:T0> : string := " <var:T0> " . Definition <def:poly> := <var:T0> := <nat:4> ; <var:U> := <var:T0> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:E> = <var:h> }} <def:poly> {{ <var:U> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:T0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:h> /\ <var:U> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 