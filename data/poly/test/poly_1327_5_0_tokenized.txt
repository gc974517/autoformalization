\begin{document} \begin{theorem} Let the following code as follows \begin{verbatim} <var:e0> := <nat:2> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:t> ; <var:m> := <var:e1> ; <var:m> := <var:m> + <var:e0> \end{verbatim} Assume $ <var:t> = <var:o> $ prior to interpreting our series of commands , it holds that we have $ <var:m> = <nat:1> \times <var:o> + <nat:2> $ after set of instructions executes . \end{theorem} \begin{proof} Using typical Hoare logic produces : \begin{eqnarray} \{ <var:t> = <var:o> \} \\ <var:e0> := <nat:2> ; \\ \{ <var:t> = <var:o> \land <var:e0> = <nat:2> \} \\ <var:e1> := <nat:1> ; \\ \{ <var:t> = <var:o> \land <var:e0> = <nat:2> \land <var:e1> = <nat:1> \} \\ <var:e1> := <var:e1> * <var:t> ; \\ \{ <var:t> = <var:o> \land <var:e0> = <nat:2> \land <var:e1> = <nat:1> \times <var:o> \} \\ <var:m> := <var:e1> ; \\ \{ <var:t> = <var:o> \land <var:e0> = <nat:2> \land <var:m> = <nat:1> \times <var:o> \} \\ <var:m> := <var:m> + <var:e0> \\ \{ <var:t> = <var:o> \land <var:m> = <nat:1> \times <var:o> + <nat:2> \} \end{eqnarray} Therefore , the code segment is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:t> = <var:o> }} <var:e0> := <nat:2> ; <var:e1> := <nat:1> ; <var:e1> := <var:e1> * <var:t> ; <var:m> := <var:e1> ; <var:m> := <var:m> + <var:e0> {{ <var:m> = <nat:1> * <var:o> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:e0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:e0> = <nat:2> /\ <var:e1> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:e0> = <nat:2> /\ <var:m> = <nat:1> * <var:o> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:o> /\ <var:m> = <nat:1> * <var:o> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 