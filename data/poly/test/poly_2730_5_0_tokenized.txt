\begin{document} \begin{theorem} We define the following program in \emph{Imp} as follows \begin{verbatim} <var:l0> := <nat:9> ; <var:l1> := <nat:8> ; <var:l1> := <var:l1> * <var:t> ; <var:d> := <var:l1> ; <var:d> := <var:d> + <var:l0> \end{verbatim} Given that $ <var:t> = <var:s> $ before running the code , it follows that we see $ <var:d> = <nat:8> * <var:s> + <nat:9> $ when set of commands has exited . \end{theorem} \begin{proof} Showing our claim about correctness for the program is demonstrated through typical Hoare techniques . Further , the variable binding statement defining $ <nat:9> $ into $ <var:l0>$ . This command advances $ \{ <var:t> = <var:s> \} $ to the postcondition $ \{ <var:t> = <var:s> \land <var:l0> = <nat:9> \} $ . This is given with the assignment rule given by Hoare logic . Stepping through , the environment update statement \verb | <var:l1> := <nat:8> ; | . This code redefines the condition $ \{ <var:t> = <var:s> \land <var:l0> = <nat:9> \} $ to the postcondition $ \{ <var:t> = <var:s> \land <var:l0> = <nat:9> \land <var:l1> = <nat:8> \} $ . Advancing to the subsequent command found in the set of instructions , the assignment line letting $ <var:l1> * <var:t> $ as $ <var:l1>$ . This statement takes the precondition $ \{ <var:t> = <var:s> \land <var:l0> = <nat:9> \land <var:l1> = <nat:8> \} $ into the postcondition $ \{ <var:t> = <var:s> \land <var:l0> = <nat:9> \land <var:l1> = <nat:8> \times <var:s> \} $ . This is sound by the assignment law of usual Hoare techniques . Moving on to the next step , we have the variable assignmet command letting $ <var:l1> $ to $ <var:d>$ . This line transfers the precondition $ \{ <var:t> = <var:s> \land <var:l0> = <nat:9> \land <var:l1> = <nat:8> \times <var:s> \} $ to the postcondition $ \{ <var:t> = <var:s> \land <var:l0> = <nat:9> \land <var:d> = <nat:8> \times <var:s> \} $ . Observing the subsequent command contained in the code segment , we have the variable binding line yielding $ <var:d> + <var:l0$ into $ <var:d>$ . This transfers the precondition $ \{ <var:t> = <var:s> \land <var:l0> = <nat:9> \land <var:d> = <nat:8> \times <var:s> \} $ toward $ \{ <var:t> = <var:s> \land <var:d> = <nat:8> \times <var:s> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Definition <var:l1> : string := " <var:l1> " . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:t> = <var:s> }} <var:l0> := <nat:9> ; <var:l1> := <nat:8> ; <var:l1> := <var:l1> * <var:t> ; <var:d> := <var:l1> ; <var:d> := <var:d> + <var:l0> {{ <var:d> = <nat:8> * <var:s> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:l0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:l0> = <nat:9> /\ <var:l1> = <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:l0> = <nat:9> /\ <var:d> = <nat:8> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:s> /\ <var:d> = <nat:8> * <var:s> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 