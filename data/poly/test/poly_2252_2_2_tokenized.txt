\begin{document} \begin{theorem} Define a list of commands such that \begin{verbatim} <var:s> := <nat:4> ; <var:s> := <nat:3> + <var:s> * <var:c> \end{verbatim} Allow ( for all natural coefficients $ <var:T> $ ) it to be that $ <var:c> = <var:T> $ before the evaluation of this code it must be that $ <var:s> = <nat:4> \times <var:T> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for our set of commands can be given with typical Hoare techniques . Jumping to the upcoming step in the list of commands , we see the variable binding line \verb | <var:s> := <nat:4> ; | . This code transfers the condition $ \{ <var:c> = <var:T> \} $ to $ \{ <var:c> = <var:T> \land <var:s> = <nat:4> \} $ . Further , we see the variable update line defining $ <nat:3> + <var:s> * <var:c$ as $ <var:s>$ . This forwards the precondition $ \{ <var:c> = <var:T> \land <var:s> = <nat:4> \} $ as $ \{ <var:c> = <var:T> \land <var:s> = <nat:4> * <var:T> + <nat:3> \} $ . This is sound through the assignment law of typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:c> = <var:T> }} <var:s> := <nat:4> ; <var:s> := <nat:3> + <var:s> * <var:c> {{ <var:s> = <nat:4> * <var:T> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:s> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:T> /\ <var:s> = <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 