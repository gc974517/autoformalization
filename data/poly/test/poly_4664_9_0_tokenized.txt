\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} as follows \begin{verbatim} <var:c0> := <nat:9> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:P> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:P> ; <var:c2> := <var:c2> * <var:P> ; <var:p> := <var:c2> ; <var:p> := <var:p> + <var:c1> ; <var:p> := <var:p> + <var:c0> \end{verbatim} Assume $ <var:P> = <var:Z> $ before evaluating the series of instructions then we have $ <var:p> = <nat:3> \cdot <var:Z> ^ <nat:2> + <nat:4> \cdot <var:Z> + <nat:9> $ . \end{theorem} \begin{proof} The method of proof for this code can be given using typical Hoare techniques . Moving forward to the proceeding piece of code in our code segment , we have the binding command \verb | <var:c0> := <nat:9> ; | . This statement takes the condition $ \{ <var:P> = <var:Z> \} $ to the postcondition $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \} $ . This is sound with the assignment rule obtained from typical Hoare techniques . Now , we see the assignment command defining $ <nat:4> $ to $ <var:c1>$ . This code takes $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \} $ into $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:4> \} $ . This is ensured with the assignment rule from typical Hoare logic . Advancing to the proceeding statement seen in our code segment , we have the variable assignmet statement \verb | <var:c1> := <var:c1> * <var:P> ; | . This redefines the condition $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:4> \} $ as the postcondition $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:4> \times <var:Z> \} $ . After , the command assigning $ <nat:3> $ to $ <var:c2>$ . This transfers $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:4> \times <var:Z> \} $ toward $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:4> \times <var:Z> \land <var:c2> = <nat:3> \} $ . Keeping momentum , the binding command assigning $ <var:c2> * <var:P> $ to $ <var:c2>$ . This advances $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:4> \times <var:Z> \land <var:c2> = <nat:3> \} $ as $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:4> \times <var:Z> \land <var:c2> = <nat:3> \times <var:Z> \} $ . This is known to be sound by the assignment inference rule found in typical Hoare logic . Next , we see the variable binding line \verb | <var:c2> := <var:c2> * <var:P> ; | . This redefines $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:4> \times <var:Z> \land <var:c2> = <nat:3> \times <var:Z> \} $ as the condition $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:4> \times <var:Z> \land <var:c2> = <nat:3> \times <var:Z> ^ <nat:2> \} $ . Paying attention to the following line in the series of instructions , we have the binding line \verb | <var:p> := <var:c2> ; | . This command takes the condition $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:4> \times <var:Z> \land <var:c2> = <nat:3> \times <var:Z> ^ <nat:2> \} $ toward the condition $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:4> \times <var:Z> \land <var:p> = <nat:3> \times <var:Z> ^ <nat:2> \} $ . This is known to be sound by the assignment law defined by standard Hoare techniques . Moving forward to the upcoming command contained in the series of instructions , we have the assignment line \verb | <var:p> := <var:p> + <var:c1> ; | . This transfers the precondition $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:c1> = <nat:4> \times <var:Z> \land <var:p> = <nat:3> \times <var:Z> ^ <nat:2> \} $ to $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:p> = <nat:3> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> \} $ . Jumping to the following command in our list of commands , we have the assignment command \verb | <var:p> := <var:p> + <var:c0> | . This takes the precondition $ \{ <var:P> = <var:Z> \land <var:c0> = <nat:9> \land <var:p> = <nat:3> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> \} $ as the postcondition $ \{ <var:P> = <var:Z> \land <var:p> = <nat:3> \times <var:Z> ^ <nat:2> + <nat:4> \times <var:Z> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Definition <var:c1> : string := " <var:c1> " . Definition <var:c2> : string := " <var:c2> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:P> = <var:Z> }} <var:c0> := <nat:9> ; <var:c1> := <nat:4> ; <var:c1> := <var:c1> * <var:P> ; <var:c2> := <nat:3> ; <var:c2> := <var:c2> * <var:P> ; <var:c2> := <var:c2> * <var:P> ; <var:p> := <var:c2> ; <var:p> := <var:p> + <var:c1> ; <var:p> := <var:p> + <var:c0> {{ <var:p> = <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:c0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:4> * <var:Z> /\ <var:c2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:4> * <var:Z> /\ <var:c2> = <nat:3> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:4> * <var:Z> /\ <var:c2> = <nat:3> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:c0> = <nat:9> /\ <var:c1> = <nat:4> * <var:Z> /\ <var:p> = <nat:3> * <var:Z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:c0> = <nat:9> /\ <var:p> = <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:Z> /\ <var:p> = <nat:3> * <var:Z> ^ <nat:2> + <nat:4> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 