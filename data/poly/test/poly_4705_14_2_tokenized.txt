\begin{document} \begin{definition} Consider a list of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:n> := <nat:3> ; <var:n> := <nat:3> + <var:n> * <var:s> ; <var:n> := <nat:2> + <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <nat:4> + <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <nat:4> + <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <nat:3> + <var:n> * <var:s> ; <var:n> := <nat:3> + <var:n> * <var:s> ; <var:n> := <nat:2> + <var:n> * <var:s> ; <var:n> := <nat:3> + <var:n> * <var:s> \end{verbatim} \end{definition} \begin{theorem} We define the following set of commands <def:poly> . Given that we have $ <var:s> = <var:o> $ ahead of evaluating our code , it holds that we have $ <var:n> = <nat:3> \times <var:o> ^ <nat:13> + <nat:3> \times <var:o> ^ <nat:12> + <nat:2> \times <var:o> ^ <nat:11> + <nat:4> \times <var:o> ^ <nat:8> + <nat:4> \times <var:o> ^ <nat:6> + <nat:3> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + <nat:3> $ once code has finished . \end{theorem} \begin{proof} Arguing the correctness of the code segment is evident through typical Hoare techniques . Moving on , the variable binding line \verb | <var:n> := <nat:3> ; | . This takes the condition $ \{ <var:s> = <var:o> \} $ to the postcondition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \} $ . This is given through the assignment inference rule defined in standard Hoare logic . Jumping to the upcoming piece of code seen in the segment of code , we have the variable binding line giving $ <nat:3> + <var:n> * <var:s> $ into $ <var:n>$ . This forwards the condition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \} $ into the postcondition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> + <nat:3> \} $ . This is deduced through the assignment inference rule from standard Hoare reasoning . Immediately after , the variable assignmet line yielding $ <nat:2> + <var:n> * <var:s> $ to $ <var:n>$ . This code redefines the precondition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> + <nat:3> \} $ to the condition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:2> \} $ . Stepping through , we have the binding statement \verb | <var:n> := <var:n> * <var:s> ; | . This advances $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:2> \} $ as the postcondition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + \} $ . This is guaranteed by the assignment law obtained from standard Hoare logic . Considering the next statement seen in our set of commands , we see the variable update command letting $ <var:n> * <var:s> $ into $ <var:n>$ . This code advances the condition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + \} $ as $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:4> + <nat:3> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> ^ <nat:2> + \} $ . This is known to be sound using the assignment inference rule in Hoare techniques . Advancing , the binding code yielding $ <nat:4> + <var:n> * <var:s> $ to $ <var:n>$ . This moves the condition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:4> + <nat:3> \times <var:o> ^ <nat:3> + <nat:2> \times <var:o> ^ <nat:2> + \} $ to the postcondition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:5> + <nat:3> \times <var:o> ^ <nat:4> + <nat:2> \times <var:o> ^ <nat:3> + <nat:4> \} $ . This is known to be sound by the assignment inference rule defined by standard Hoare techniques . Now , we have the assignment command letting $ <var:n> * <var:s> $ into $ <var:n>$ . This code forwards the condition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:5> + <nat:3> \times <var:o> ^ <nat:4> + <nat:2> \times <var:o> ^ <nat:3> + <nat:4> \} $ as the condition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:6> + <nat:3> \times <var:o> ^ <nat:5> + <nat:2> \times <var:o> ^ <nat:4> + <nat:4> \times <var:o> + \} $ . This is deduced using the assignment law found in typical Hoare logic . Next , the variable binding statement \verb | <var:n> := <nat:4> + <var:n> * <var:s> ; | . This takes $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:6> + <nat:3> \times <var:o> ^ <nat:5> + <nat:2> \times <var:o> ^ <nat:4> + <nat:4> \times <var:o> + \} $ as $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:7> + <nat:3> \times <var:o> ^ <nat:6> + <nat:2> \times <var:o> ^ <nat:5> + <nat:4> \times <var:o> ^ <nat:2> + <nat:4> \} $ . Shifting focus toward the subsequent step found in the list of instructions , we see the variable assignmet statement binding $ <var:n> * <var:s> $ toward $ <var:n>$ . This code moves the precondition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:7> + <nat:3> \times <var:o> ^ <nat:6> + <nat:2> \times <var:o> ^ <nat:5> + <nat:4> \times <var:o> ^ <nat:2> + <nat:4> \} $ to $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:8> + <nat:3> \times <var:o> ^ <nat:7> + <nat:2> \times <var:o> ^ <nat:6> + <nat:4> \times <var:o> ^ <nat:3> + <nat:4> \times <var:o> + \} $ . This is deduced through the assignment scheme given by typical Hoare reasoning . Looking at the proceeding step found in our list of commands , we have the variable assignmet line \verb | <var:n> := <var:n> * <var:s> ; | . This moves $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:8> + <nat:3> \times <var:o> ^ <nat:7> + <nat:2> \times <var:o> ^ <nat:6> + <nat:4> \times <var:o> ^ <nat:3> + <nat:4> \times <var:o> + \} $ to the condition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:9> + <nat:3> \times <var:o> ^ <nat:8> + <nat:2> \times <var:o> ^ <nat:7> + <nat:4> \times <var:o> ^ <nat:4> + <nat:4> \times <var:o> ^ <nat:2> + \} $ . Honing in on the upcoming line seen in our program , we see the variable assignmet line defining $ <nat:3> + <var:n> * <var:s> $ to $ <var:n>$ . This moves $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:9> + <nat:3> \times <var:o> ^ <nat:8> + <nat:2> \times <var:o> ^ <nat:7> + <nat:4> \times <var:o> ^ <nat:4> + <nat:4> \times <var:o> ^ <nat:2> + \} $ into $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:10> + <nat:3> \times <var:o> ^ <nat:9> + <nat:2> \times <var:o> ^ <nat:8> + <nat:4> \times <var:o> ^ <nat:5> + <nat:4> \times <var:o> ^ <nat:3> + <nat:3> \} $ . Going to the next step , we have the binding command assigning $ <nat:3> + <var:n> * <var:s> $ as $ <var:n>$ . This advances the precondition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:10> + <nat:3> \times <var:o> ^ <nat:9> + <nat:2> \times <var:o> ^ <nat:8> + <nat:4> \times <var:o> ^ <nat:5> + <nat:4> \times <var:o> ^ <nat:3> + <nat:3> \} $ to the condition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:11> + <nat:3> \times <var:o> ^ <nat:10> + <nat:2> \times <var:o> ^ <nat:9> + <nat:4> \times <var:o> ^ <nat:6> + <nat:4> \times <var:o> ^ <nat:4> + <nat:3> \times <var:o> + <nat:3> \} $ . This is ensured by the assignment inference rule found in usual Hoare reasoning . Looking at the next statement in our list of commands , we see the variable assignmet command assigning $ <nat:2> + <var:n> * <var:s> $ to $ <var:n>$ . This transfers the condition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:11> + <nat:3> \times <var:o> ^ <nat:10> + <nat:2> \times <var:o> ^ <nat:9> + <nat:4> \times <var:o> ^ <nat:6> + <nat:4> \times <var:o> ^ <nat:4> + <nat:3> \times <var:o> + <nat:3> \} $ into the condition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:12> + <nat:3> \times <var:o> ^ <nat:11> + <nat:2> \times <var:o> ^ <nat:10> + <nat:4> \times <var:o> ^ <nat:7> + <nat:4> \times <var:o> ^ <nat:5> + <nat:3> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:2> \} $ . This is deduced using the assignment inference rule of standard Hoare techniques . Stepping forward , we see the variable assignmet statement \verb | <var:n> := <nat:3> + <var:n> * <var:s> | . This moves the condition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:12> + <nat:3> \times <var:o> ^ <nat:11> + <nat:2> \times <var:o> ^ <nat:10> + <nat:4> \times <var:o> ^ <nat:7> + <nat:4> \times <var:o> ^ <nat:5> + <nat:3> \times <var:o> ^ <nat:2> + <nat:3> \times <var:o> + <nat:2> \} $ toward the postcondition $ \{ <var:s> = <var:o> \land <var:n> = <nat:3> \times <var:o> ^ <nat:13> + <nat:3> \times <var:o> ^ <nat:12> + <nat:2> \times <var:o> ^ <nat:11> + <nat:4> \times <var:o> ^ <nat:8> + <nat:4> \times <var:o> ^ <nat:6> + <nat:3> \times <var:o> ^ <nat:3> + <nat:3> \times <var:o> ^ <nat:2> + <nat:2> \times <var:o> + <nat:3> \} $ . This is sound with the assignment rule given in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:n> := <nat:3> ; <var:n> := <nat:3> + <var:n> * <var:s> ; <var:n> := <nat:2> + <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <nat:4> + <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <nat:4> + <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <var:n> * <var:s> ; <var:n> := <nat:3> + <var:n> * <var:s> ; <var:n> := <nat:3> + <var:n> * <var:s> ; <var:n> := <nat:2> + <var:n> * <var:s> ; <var:n> := <nat:3> + <var:n> * <var:s> . Theorem <genH:poly_code_correct> : forall <var:o> : nat , {{ <var:s> = <var:o> }} <def:poly> {{ <var:n> = <nat:3> * <var:o> ^ <nat:13> + <nat:3> * <var:o> ^ <nat:12> + <nat:2> * <var:o> ^ <nat:11> + <nat:4> * <var:o> ^ <nat:8> + <nat:4> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> * <var:o> ^ <nat:4> + <nat:3> * <var:o> ^ <nat:3> + <nat:2> * <var:o> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:4> + <nat:2> * <var:o> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:5> + <nat:2> * <var:o> ^ <nat:4> + <nat:4> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> * <var:o> ^ <nat:7> + <nat:3> * <var:o> ^ <nat:6> + <nat:2> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> * <var:o> ^ <nat:8> + <nat:3> * <var:o> ^ <nat:7> + <nat:2> * <var:o> ^ <nat:6> + <nat:4> * <var:o> ^ <nat:3> + <nat:4> * <var:o> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> * <var:o> ^ <nat:9> + <nat:3> * <var:o> ^ <nat:8> + <nat:2> * <var:o> ^ <nat:7> + <nat:4> * <var:o> ^ <nat:4> + <nat:4> * <var:o> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> * <var:o> ^ <nat:10> + <nat:3> * <var:o> ^ <nat:9> + <nat:2> * <var:o> ^ <nat:8> + <nat:4> * <var:o> ^ <nat:5> + <nat:4> * <var:o> ^ <nat:3> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> * <var:o> ^ <nat:11> + <nat:3> * <var:o> ^ <nat:10> + <nat:2> * <var:o> ^ <nat:9> + <nat:4> * <var:o> ^ <nat:6> + <nat:4> * <var:o> ^ <nat:4> + <nat:3> * <var:o> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> * <var:o> ^ <nat:12> + <nat:3> * <var:o> ^ <nat:11> + <nat:2> * <var:o> ^ <nat:10> + <nat:4> * <var:o> ^ <nat:7> + <nat:4> * <var:o> ^ <nat:5> + <nat:3> * <var:o> ^ <nat:2> + <nat:3> * <var:o> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:o> /\ <var:n> = <nat:3> * <var:o> ^ <nat:13> + <nat:3> * <var:o> ^ <nat:12> + <nat:2> * <var:o> ^ <nat:11> + <nat:4> * <var:o> ^ <nat:8> + <nat:4> * <var:o> ^ <nat:6> + <nat:3> * <var:o> ^ <nat:3> + <nat:3> * <var:o> ^ <nat:2> + <nat:2> * <var:o> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 