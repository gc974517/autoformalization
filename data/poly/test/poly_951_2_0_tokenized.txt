\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} such that \begin{verbatim} <var:j0> := <nat:3> ; <var:o> := <var:j0> \end{verbatim} Assume for some positive integer coefficients $ <var:X> $ $ <var:G> = <var:X> $ before the evaluation of the set of commands it must be that we have $ <var:o> = <nat:3> $ after segment of code has finished . \end{theorem} \begin{proof} The argument for our program is clear through standard Hoare techniques . Now , \begin{eqnarray} \{ <var:G> = <var:X> \} \, <var:j0> := <nat:3> \, \{ <var:G> = <var:X> \land <var:j0> = <nat:3> \} \\ \{ <var:G> = <var:X> \land <var:j0> = <nat:3> \} \, <var:o> := <var:j0\, \{ <var:G> = <var:X> \land <var:o> = <nat:3> \} \end{eqnarray} This is given using the rule in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:G> = <var:X> }} <var:j0> := <nat:3> ; <var:o> := <var:j0> {{ <var:o> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:j0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:X> /\ <var:o> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 