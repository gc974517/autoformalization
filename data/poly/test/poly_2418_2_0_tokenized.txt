\begin{document} \begin{theorem} Consider the following list of instructions as follows \begin{verbatim} <var:P0> := <nat:1> ; <var:V> := <var:P0> \end{verbatim} Allow that $ <var:T> = <var:G> $ before the execution of the series of instructions it follows that we have $ <var:V> = <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:T> = <var:G> \} \\ <var:P0> := <nat:1> ; \\ \{ <var:T> = <var:G> \land <var:P0> = <nat:1> \} \\ <var:V> := <var:P0> \\ \{ <var:T> = <var:G> \land <var:V> = <nat:1> \} \end{eqnarray} Utilizing standard Hoare techniques solves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:T> = <var:G> }} <var:P0> := <nat:1> ; <var:V> := <var:P0> {{ <var:V> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:P0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:G> /\ <var:V> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 