\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:k0> := <nat:2> ; <var:k1> := <nat:8> ; <var:k1> := <var:k1> * <var:r> ; <var:k2> := <nat:3> ; <var:k2> := <var:k2> * <var:r> ; <var:k2> := <var:k2> * <var:r> ; <var:I> := <var:k2> ; <var:I> := <var:I> + <var:k1> ; <var:I> := <var:I> + <var:k0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> in \emph{Imp} . Given that we have $ <var:r> = <var:B> $ ahead of running the set of commands , then we see $ <var:I> = <nat:3> \times <var:B> ^ <nat:2> + <nat:8> \times <var:B> + <nat:2> $ once program has executed . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions is clear using typical Hoare logic . Further , the binding code \verb | <var:k0> := <nat:2> ; | . This line transfers $ \{ <var:r> = <var:B> \} $ toward $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \} $ . This is guaranteed by the assignment law of typical Hoare logic . Moving forward to the proceeding step found in our code segment , we have the assignment code giving $ <nat:8> $ to $ <var:k1>$ . This command moves $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \} $ toward the postcondition $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> \} $ . This is given through the assignment inference rule of standard Hoare logic . Moving onward , we have the environment update command assigning $ <var:k1> * <var:r> $ to $ <var:k1>$ . This line moves the precondition $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> \} $ into the condition $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:B> \} $ . This is deduced by the assignment inference rule in Hoare logic . Further , the variable assignmet line defining $ <nat:3> $ toward $ <var:k2>$ . This statement forwards the condition $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:B> \} $ as $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:B> \land <var:k2> = <nat:3> \} $ . Immediately following , we have the variable update statement \verb | <var:k2> := <var:k2> * <var:r> ; | . This statement forwards the precondition $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:B> \land <var:k2> = <nat:3> \} $ toward $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:B> \land <var:k2> = <nat:3> * <var:B> \} $ . Further , we see the variable assignmet statement \verb | <var:k2> := <var:k2> * <var:r> ; | . This transfers the condition $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:B> \land <var:k2> = <nat:3> * <var:B> \} $ into $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:B> \land <var:k2> = <nat:3> * <var:B> ^ <nat:2> \} $ . This is given with the assignment law given in typical Hoare techniques . Advancing to the next step , we see the environment update line \verb | <var:I> := <var:k2> ; | . This line moves the precondition $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:B> \land <var:k2> = <nat:3> * <var:B> ^ <nat:2> \} $ as $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:B> \land <var:I> = <nat:3> * <var:B> ^ <nat:2> \} $ . Immediately after , we see the variable assignmet statement \verb | <var:I> := <var:I> + <var:k1> ; | . This code advances the precondition $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:k1> = <nat:8> * <var:B> \land <var:I> = <nat:3> * <var:B> ^ <nat:2> \} $ into the condition $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:I> = <nat:3> * <var:B> ^ <nat:2> + <nat:8> * <var:B> \} $ . Going to the next step , we see the statement yielding $ <var:I> + <var:k0$ as $ <var:I>$ . This line transfers the precondition $ \{ <var:r> = <var:B> \land <var:k0> = <nat:2> \land <var:I> = <nat:3> * <var:B> ^ <nat:2> + <nat:8> * <var:B> \} $ toward $ \{ <var:r> = <var:B> \land <var:I> = <nat:3> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:2> \} $ . This is known to be sound using the assignment rule defined in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <def:poly> := <var:k0> := <nat:2> ; <var:k1> := <nat:8> ; <var:k1> := <var:k1> * <var:r> ; <var:k2> := <nat:3> ; <var:k2> := <var:k2> * <var:r> ; <var:k2> := <var:k2> * <var:r> ; <var:I> := <var:k2> ; <var:I> := <var:I> + <var:k1> ; <var:I> := <var:I> + <var:k0> . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:r> = <var:B> }} <def:poly> {{ <var:I> = <nat:3> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:8> * <var:B> /\ <var:k2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:8> * <var:B> /\ <var:k2> = <nat:3> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:8> * <var:B> /\ <var:k2> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:k0> = <nat:2> /\ <var:k1> = <nat:8> * <var:B> /\ <var:I> = <nat:3> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:k0> = <nat:2> /\ <var:I> = <nat:3> * <var:B> ^ <nat:2> + <nat:8> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:B> /\ <var:I> = <nat:3> * <var:B> ^ <nat:2> + <nat:8> * <var:B> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 