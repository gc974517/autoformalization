\begin{document} \begin{definition} We define a program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:s> := <nat:1> ; <var:s> := <nat:4> + <var:s> * <var:I> ; <var:s> := <nat:3> + <var:s> * <var:I> ; <var:s> := <nat:4> + <var:s> * <var:I> ; <var:s> := <nat:4> + <var:s> * <var:I> ; <var:s> := <nat:2> + <var:s> * <var:I> ; <var:s> := <nat:2> + <var:s> * <var:I> ; <var:s> := <nat:4> + <var:s> * <var:I> ; <var:s> := <nat:3> + <var:s> * <var:I> ; <var:s> := <var:s> * <var:I> ; <var:s> := <nat:1> + <var:s> * <var:I> \end{verbatim} \end{definition} \begin{theorem} Define the following code segment <def:poly> . Allow it to be that $ <var:I> = <var:L> $ prior to evaluating our series of instructions it must be that $ <var:s> = <nat:1> \times <var:L> ^ <nat:10> + <nat:4> \times <var:L> ^ <nat:9> + <nat:3> \times <var:L> ^ <nat:8> + <nat:4> \times <var:L> ^ <nat:7> + <nat:4> \times <var:L> ^ <nat:6> + <nat:2> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:4> + <nat:4> \times <var:L> ^ <nat:3> + <nat:3> \times <var:L> ^ <nat:2> + <nat:1> $ when set of commands executes . \end{theorem} \begin{proof} Using Hoare techniques returns : \begin{eqnarray} \{ <var:I> = <var:L> \} \\ <var:s> := <nat:1> ; \\ \{ <var:I> = <var:L> \land <var:s> = <nat:1> \} \\ <var:s> := <nat:4> + <var:s> * <var:I> ; \\ \{ <var:I> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> + <nat:4> \} \\ <var:s> := <nat:3> + <var:s> * <var:I> ; \\ \{ <var:I> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:3> \} \\ <var:s> := <nat:4> + <var:s> * <var:I> ; \\ \{ <var:I> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + <nat:4> \} \\ <var:s> := <nat:4> + <var:s> * <var:I> ; \\ \{ <var:I> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:4> + <nat:4> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:4> \} \\ <var:s> := <nat:2> + <var:s> * <var:I> ; \\ \{ <var:I> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:5> + <nat:4> \cdot <var:L> ^ <nat:4> + <nat:3> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:2> \} \\ <var:s> := <nat:2> + <var:s> * <var:I> ; \\ \{ <var:I> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:6> + <nat:4> \cdot <var:L> ^ <nat:5> + <nat:3> \cdot <var:L> ^ <nat:4> + <nat:4> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:2> \} \\ <var:s> := <nat:4> + <var:s> * <var:I> ; \\ \{ <var:I> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:7> + <nat:4> \cdot <var:L> ^ <nat:6> + <nat:3> \cdot <var:L> ^ <nat:5> + <nat:4> \cdot <var:L> ^ <nat:4> + <nat:4> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:2> \cdot <var:L> + <nat:4> \} \\ <var:s> := <nat:3> + <var:s> * <var:I> ; \\ \{ <var:I> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:8> + <nat:4> \cdot <var:L> ^ <nat:7> + <nat:3> \cdot <var:L> ^ <nat:6> + <nat:4> \cdot <var:L> ^ <nat:5> + <nat:4> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:2> \cdot <var:L> ^ <nat:2> + <nat:4> \cdot <var:L> + <nat:3> \} \\ <var:s> := <var:s> * <var:I> ; \\ \{ <var:I> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:9> + <nat:4> \cdot <var:L> ^ <nat:8> + <nat:3> \cdot <var:L> ^ <nat:7> + <nat:4> \cdot <var:L> ^ <nat:6> + <nat:4> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:4> + <nat:2> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:3> \cdot <var:L> + \} \\ <var:s> := <nat:1> + <var:s> * <var:I> \\ \{ <var:I> = <var:L> \land <var:s> = <nat:1> \cdot <var:L> ^ <nat:10> + <nat:4> \cdot <var:L> ^ <nat:9> + <nat:3> \cdot <var:L> ^ <nat:8> + <nat:4> \cdot <var:L> ^ <nat:7> + <nat:4> \cdot <var:L> ^ <nat:6> + <nat:2> \cdot <var:L> ^ <nat:5> + <nat:2> \cdot <var:L> ^ <nat:4> + <nat:4> \cdot <var:L> ^ <nat:3> + <nat:3> \cdot <var:L> ^ <nat:2> + <nat:1> \} \end{eqnarray} As a result , this list of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:s> := <nat:1> ; <var:s> := <nat:4> + <var:s> * <var:I> ; <var:s> := <nat:3> + <var:s> * <var:I> ; <var:s> := <nat:4> + <var:s> * <var:I> ; <var:s> := <nat:4> + <var:s> * <var:I> ; <var:s> := <nat:2> + <var:s> * <var:I> ; <var:s> := <nat:2> + <var:s> * <var:I> ; <var:s> := <nat:4> + <var:s> * <var:I> ; <var:s> := <nat:3> + <var:s> * <var:I> ; <var:s> := <var:s> * <var:I> ; <var:s> := <nat:1> + <var:s> * <var:I> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:I> = <var:L> }} <def:poly> {{ <var:s> = <nat:1> * <var:L> ^ <nat:10> + <nat:4> * <var:L> ^ <nat:9> + <nat:3> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:s> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:s> = <nat:1> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:3> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:3> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:6> + <nat:3> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:3> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:9> + <nat:4> * <var:L> ^ <nat:8> + <nat:3> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:3> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:L> /\ <var:s> = <nat:1> * <var:L> ^ <nat:10> + <nat:4> * <var:L> ^ <nat:9> + <nat:3> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:6> + <nat:2> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:3> * <var:L> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 