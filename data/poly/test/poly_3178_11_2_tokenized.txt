\begin{document} \begin{definition} Consider the following list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:u> := <nat:2> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <nat:4> + <var:u> * <var:Z> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <nat:4> + <var:u> * <var:Z> ; <var:u> := <nat:4> + <var:u> * <var:Z> ; <var:u> := <nat:2> + <var:u> * <var:Z> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <nat:1> + <var:u> * <var:Z> ; <var:u> := <nat:1> + <var:u> * <var:Z> \end{verbatim} \end{definition} \begin{theorem} Define a program <def:poly> in \emph{Imp} . Assuming that we have $ <var:Z> = <var:L> $ letting $ <var:L> \in \mathbb{N} $ before the execution of this list of commands , then we see $ <var:u> = <nat:2> \times <var:L> ^ <nat:10> + <nat:4> \times <var:L> ^ <nat:8> + <nat:4> \times <var:L> ^ <nat:6> + <nat:4> \times <var:L> ^ <nat:5> + <nat:2> \times <var:L> ^ <nat:4> + <nat:1> \times <var:L> + <nat:1> $ once set of instructions is done executing . \end{theorem} \begin{proof} Applying standard Hoare reasoning results in : \begin{eqnarray} \{ <var:Z> = <var:L> \} \\ <var:u> := <nat:2> ; \\ \{ <var:Z> = <var:L> \land <var:u> = <nat:2> \} \\ <var:u> := <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:L> \land <var:u> = <nat:2> * <var:L> + \} \\ <var:u> := <nat:4> + <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:L> \land <var:u> = <nat:2> * <var:L> ^ <nat:2> + <nat:4> \} \\ <var:u> := <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:L> \land <var:u> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + \} \\ <var:u> := <nat:4> + <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:L> \land <var:u> = <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:2> + <nat:4> \} \\ <var:u> := <nat:4> + <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:L> \land <var:u> = <nat:2> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + <nat:4> \} \\ <var:u> := <nat:2> + <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:L> \land <var:u> = <nat:2> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> \} \\ <var:u> := <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:L> \land <var:u> = <nat:2> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + \} \\ <var:u> := <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:L> \land <var:u> = <nat:2> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + \} \\ <var:u> := <nat:1> + <var:u> * <var:Z> ; \\ \{ <var:Z> = <var:L> \land <var:u> = <nat:2> * <var:L> ^ <nat:9> + <nat:4> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> \} \\ <var:u> := <nat:1> + <var:u> * <var:Z> \\ \{ <var:Z> = <var:L> \land <var:u> = <nat:2> * <var:L> ^ <nat:10> + <nat:4> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:1> * <var:L> + <nat:1> \} \end{eqnarray} As a result , this segment of code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:u> := <nat:2> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <nat:4> + <var:u> * <var:Z> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <nat:4> + <var:u> * <var:Z> ; <var:u> := <nat:4> + <var:u> * <var:Z> ; <var:u> := <nat:2> + <var:u> * <var:Z> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <var:u> * <var:Z> ; <var:u> := <nat:1> + <var:u> * <var:Z> ; <var:u> := <nat:1> + <var:u> * <var:Z> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:Z> = <var:L> }} <def:poly> {{ <var:u> = <nat:2> * <var:L> ^ <nat:10> + <nat:4> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:1> * <var:L> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:u> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:u> = <nat:2> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:u> = <nat:2> * <var:L> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:u> = <nat:2> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:u> = <nat:2> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:u> = <nat:2> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:u> = <nat:2> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:2> + <nat:4> * <var:L> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:u> = <nat:2> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:2> * <var:L> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:u> = <nat:2> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:4> + <nat:4> * <var:L> ^ <nat:3> + <nat:2> * <var:L> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:u> = <nat:2> * <var:L> ^ <nat:9> + <nat:4> * <var:L> ^ <nat:7> + <nat:4> * <var:L> ^ <nat:5> + <nat:4> * <var:L> ^ <nat:4> + <nat:2> * <var:L> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:L> /\ <var:u> = <nat:2> * <var:L> ^ <nat:10> + <nat:4> * <var:L> ^ <nat:8> + <nat:4> * <var:L> ^ <nat:6> + <nat:4> * <var:L> ^ <nat:5> + <nat:2> * <var:L> ^ <nat:4> + <nat:1> * <var:L> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 