\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:m1> := <var:s> ; <var:m2> := <var:m1> * <var:s> ; <var:m3> := <var:m2> * <var:s> ; <var:m0> := <nat:9> ; <var:m1> := <var:m1> * <nat:8> ; <var:m2> := <var:m2> * <nat:2> ; <var:m3> := <var:m3> * <nat:9> ; <var:N> := <var:m3> <var:N> := <var:N> + <var:m2> <var:N> := <var:N> + <var:m1> <var:N> := <var:N> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Let the following segment of code <def:poly> in \emph{Imp} . Assume that we have $ <var:s> = <var:C> $ --- for all natural coefficients $ <var:C> $ --- prior to executing this set of commands , then we see $ <var:N> = <nat:9> \cdot <var:C> ^ <nat:3> + <nat:2> \cdot <var:C> ^ <nat:2> + <nat:8> \cdot <var:C> + <nat:9> $ after set of commands is done . \end{theorem} \begin{proof} The flow of logic for the code can be demonstrated by standard Hoare reasoning . Considering the proceeding step contained in our program , we see the variable binding line \verb | <var:m1> := <var:s> ; | . This line forwards $ \{ <var:s> = <var:C> \} $ to the condition $ \{ <var:s> = <var:C> \land <var:m1> = <var:C> \} $ . Keeping momentum , we have the command \verb | <var:m2> := <var:m1> * <var:s> ; | . This transfers the condition $ \{ <var:s> = <var:C> \land <var:m1> = <var:C> \} $ as the postcondition $ \{ <var:s> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \} $ . This is guaranteed through the assignment rule given in typical Hoare logic . Now , the environment update code \verb | <var:m3> := <var:m2> * <var:s> ; | . This takes $ \{ <var:s> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \} $ toward the condition $ \{ <var:s> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \} $ . This is given using the assignment scheme given by Hoare techniques . Moving forward , we see the variable binding line assigning $ <nat:9> $ into $ <var:m0>$ . This redefines the precondition $ \{ <var:s> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \} $ toward $ \{ <var:s> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m0> = <nat:9> \} $ . This is sound with the assignment rule given in standard Hoare techniques . Stepping through , the variable binding line binding $ <var:m1> * <nat:8> $ into $ <var:m1>$ . This advances the precondition $ \{ <var:s> = <var:C> \land <var:m1> = <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m0> = <nat:9> \} $ to $ \{ <var:s> = <var:C> \land <var:m1> = <nat:8> \times <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m0> = <nat:9> \} $ . Advancing on , we have the environment update statement yielding $ <var:m2> * <nat:2> $ as $ <var:m2>$ . This moves the precondition $ \{ <var:s> = <var:C> \land <var:m1> = <nat:8> \times <var:C> \land <var:m2> = <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m0> = <nat:9> \} $ toward the postcondition $ \{ <var:s> = <var:C> \land <var:m1> = <nat:8> \times <var:C> \land <var:m2> = <nat:2> \times <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m0> = <nat:9> \} $ . This is given using the assignment inference rule found in standard Hoare logic . Moving forward to the next step , we have the command \verb | <var:m3> := <var:m3> * <nat:9> ; | . This statement forwards the precondition $ \{ <var:s> = <var:C> \land <var:m1> = <nat:8> \times <var:C> \land <var:m2> = <nat:2> \times <var:C> ^ <nat:2> \land <var:m3> = <var:C> ^ <nat:3> \land <var:m0> = <nat:9> \} $ to $ \{ <var:s> = <var:C> \land <var:m1> = <nat:8> \times <var:C> \land <var:m2> = <nat:2> \times <var:C> ^ <nat:2> \land <var:m3> = <nat:9> \times <var:C> ^ <nat:3> \land <var:m0> = <nat:9> \} $ . This is rigorously given through the assignment scheme defined by typical Hoare reasoning . Looking at the following piece of code seen in the series of instructions , we see the variable assignmet statement binding $ <var:m3$ into $ <var:N>$ . This redefines the precondition $ \{ <var:s> = <var:C> \land <var:m1> = <nat:8> \times <var:C> \land <var:m2> = <nat:2> \times <var:C> ^ <nat:2> \land <var:m3> = <nat:9> \times <var:C> ^ <nat:3> \land <var:m0> = <nat:9> \} $ into the condition $ \{ <var:s> = <var:C> \land <var:m1> = <nat:8> \times <var:C> \land <var:m2> = <nat:2> \times <var:C> ^ <nat:2> \land <var:m0> = <nat:9> \land <var:N> = <nat:9> \times <var:C> ^ <nat:3> \} $ . This is shown by the assignment law obtained from Hoare techniques . Advancing to the following line of code seen in the series of instructions , the variable binding line \verb | <var:N> := <var:N> + <var:m2> | . This moves the precondition $ \{ <var:s> = <var:C> \land <var:m1> = <nat:8> \times <var:C> \land <var:m2> = <nat:2> \times <var:C> ^ <nat:2> \land <var:m0> = <nat:9> \land <var:N> = <nat:9> \times <var:C> ^ <nat:3> \} $ to the postcondition $ \{ <var:s> = <var:C> \land <var:m1> = <nat:8> \times <var:C> \land <var:m0> = <nat:9> \land <var:N> = <nat:9> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> \} $ . Further , we see the statement yielding $ <var:N> + <var:m1$ to $ <var:N>$ . This redefines the condition $ \{ <var:s> = <var:C> \land <var:m1> = <nat:8> \times <var:C> \land <var:m0> = <nat:9> \land <var:N> = <nat:9> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> \} $ toward the postcondition $ \{ <var:s> = <var:C> \land <var:m0> = <nat:9> \land <var:N> = <nat:9> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:8> \times <var:C> \} $ . This is shown to be logically sound using the assignment law of Hoare reasoning . Advancing , we have the variable binding command \verb | <var:N> := <var:N> + <var:m0> | . This statement transfers the precondition $ \{ <var:s> = <var:C> \land <var:m0> = <nat:9> \land <var:N> = <nat:9> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:8> \times <var:C> \} $ to the postcondition $ \{ <var:s> = <var:C> \land <var:N> = <nat:9> \times <var:C> ^ <nat:3> + <nat:2> \times <var:C> ^ <nat:2> + <nat:8> \times <var:C> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m1> := <var:s> ; <var:m2> := <var:m1> * <var:s> ; <var:m3> := <var:m2> * <var:s> ; <var:m0> := <nat:9> ; <var:m1> := <var:m1> * <nat:8> ; <var:m2> := <var:m2> * <nat:2> ; <var:m3> := <var:m3> * <nat:9> ; <var:N> := <var:m3> <var:N> := <var:N> + <var:m2> <var:N> := <var:N> + <var:m1> <var:N> := <var:N> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:s> = <var:C> }} <def:poly> {{ <var:N> = <nat:9> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:m1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:m1> = <var:C> /\ <var:m2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:m1> = <var:C> /\ <var:m2> = <var:C> ^ <nat:2> /\ <var:m3> = <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:m1> = <var:C> /\ <var:m2> = <var:C> ^ <nat:2> /\ <var:m3> = <var:C> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:m1> = <nat:8> * <var:C> /\ <var:m2> = <var:C> ^ <nat:2> /\ <var:m3> = <var:C> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:m1> = <nat:8> * <var:C> /\ <var:m2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:m3> = <var:C> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:m1> = <nat:8> * <var:C> /\ <var:m2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:m3> = <nat:9> * <var:C> ^ <nat:3> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:m1> = <nat:8> * <var:C> /\ <var:m2> = <nat:2> * <var:C> ^ <nat:2> /\ <var:m0> = <nat:9> /\ <var:N> = <nat:9> * <var:C> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:m1> = <nat:8> * <var:C> /\ <var:m0> = <nat:9> /\ <var:N> = <nat:9> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:m0> = <nat:9> /\ <var:N> = <nat:9> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:8> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:C> /\ <var:N> = <nat:9> * <var:C> ^ <nat:3> + <nat:2> * <var:C> ^ <nat:2> + <nat:8> * <var:C> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 