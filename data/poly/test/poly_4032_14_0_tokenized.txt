\begin{document} \begin{theorem} Consider a list of commands in \emph{Imp} as follows \begin{verbatim} <var:f0> := <nat:7> ; <var:f1> := <nat:1> ; <var:f1> := <var:f1> * <var:h> ; <var:f2> := <nat:4> ; <var:f2> := <var:f2> * <var:h> ; <var:f2> := <var:f2> * <var:h> ; <var:f3> := <nat:4> ; <var:f3> := <var:f3> * <var:h> ; <var:f3> := <var:f3> * <var:h> ; <var:f3> := <var:f3> * <var:h> ; <var:R> := <var:f3> ; <var:R> := <var:R> + <var:f2> ; <var:R> := <var:R> + <var:f1> ; <var:R> := <var:R> + <var:f0> \end{verbatim} Assuming $ <var:h> = <var:L> $ prior to the execution of this series of commands , it holds that we have $ <var:R> = <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:7> $ when set of instructions is done . \end{theorem} \begin{proof} The argument for the set of instructions can be done through standard Hoare techniques . Going to the next step , we see the variable assignmet command letting $ <nat:7> $ into $ <var:f0>$ . This line forwards $ \{ <var:h> = <var:L> \} $ into the postcondition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \} $ . Shifting focus toward the next line of code seen in our list of instructions , the binding line \verb | <var:f1> := <nat:1> ; | . This transfers $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \} $ toward the condition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \} $ . Keeping momentum , we have the variable binding code letting $ <var:f1> * <var:h> $ into $ <var:f1>$ . This transfers the precondition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \} $ into the postcondition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \} $ . This is guaranteed with the assignment scheme given in Hoare reasoning . Stepping forward , we see the variable binding command \verb | <var:f2> := <nat:4> ; | . This command transfers $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \} $ to the postcondition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \} $ . Looking at the next line found in our program , we see the environment update command binding $ <var:f2> * <var:h> $ toward $ <var:f2>$ . This line advances the precondition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \} $ to $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> \} $ . Further , the variable update statement binding $ <var:f2> * <var:h> $ as $ <var:f2>$ . This takes $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> \} $ into the postcondition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> ^ <nat:2> \} $ . Stepping through , the variable binding statement giving $ <nat:4> $ to $ <var:f3>$ . This code advances $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> ^ <nat:2> \} $ to the condition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:f3> = <nat:4> \} $ . This is sound with the assignment law given by usual Hoare techniques . Immediately after , we see the variable update command defining $ <var:f3> * <var:h> $ to $ <var:f3>$ . This statement moves the precondition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:f3> = <nat:4> \} $ toward $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:f3> = <nat:4> \cdot <var:L> \} $ . This is sound using the assignment law given by Hoare logic . Moving on , the variable assignmet code defining $ <var:f3> * <var:h> $ as $ <var:f3>$ . This statement transfers the condition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:f3> = <nat:4> \cdot <var:L> \} $ into the postcondition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:f3> = <nat:4> \cdot <var:L> ^ <nat:2> \} $ . This is guaranteed through the assignment law given by Hoare reasoning . Moving on to the following statement contained in the list of instructions , we have the variable update command \verb | <var:f3> := <var:f3> * <var:h> ; | . This statement moves $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:f3> = <nat:4> \cdot <var:L> ^ <nat:2> \} $ as the condition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:f3> = <nat:4> \cdot <var:L> ^ <nat:3> \} $ . This is deduced through the assignment rule given in usual Hoare logic . Paying attention to the proceeding step contained in our list of commands , we see the binding code \verb | <var:R> := <var:f3> ; | . This forwards the precondition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:f3> = <nat:4> \cdot <var:L> ^ <nat:3> \} $ toward the postcondition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:R> = <nat:4> \cdot <var:L> ^ <nat:3> \} $ . Moving forward to the next step , the statement letting $ <var:R> + <var:f2> $ toward $ <var:R>$ . This code transfers the precondition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:f2> = <nat:4> \cdot <var:L> ^ <nat:2> \land <var:R> = <nat:4> \cdot <var:L> ^ <nat:3> \} $ toward $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:R> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> \} $ . This is ensured using the assignment rule from typical Hoare logic . Advancing on , we have the statement defining $ <var:R> + <var:f1> $ into $ <var:R>$ . This moves the condition $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:f1> = <nat:1> \cdot <var:L> \land <var:R> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> \} $ into $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:R> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> \} $ . Looking at the upcoming statement contained in our program , we have the variable assignmet code letting $ <var:R> + <var:f0$ as $ <var:R>$ . This transfers $ \{ <var:h> = <var:L> \land <var:f0> = <nat:7> \land <var:R> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> \} $ to the condition $ \{ <var:h> = <var:L> \land <var:R> = <nat:4> \cdot <var:L> ^ <nat:3> + <nat:4> \cdot <var:L> ^ <nat:2> + <nat:1> \cdot <var:L> + <nat:7> \} $ . This is shown to be logically sound with the assignment law in Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:h> = <var:L> }} <var:f0> := <nat:7> ; <var:f1> := <nat:1> ; <var:f1> := <var:f1> * <var:h> ; <var:f2> := <nat:4> ; <var:f2> := <var:f2> * <var:h> ; <var:f2> := <var:f2> * <var:h> ; <var:f3> := <nat:4> ; <var:f3> := <var:f3> * <var:h> ; <var:f3> := <var:f3> * <var:h> ; <var:f3> := <var:f3> * <var:h> ; <var:R> := <var:f3> ; <var:R> := <var:R> + <var:f2> ; <var:R> := <var:R> + <var:f1> ; <var:R> := <var:R> + <var:f0> {{ <var:R> = <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:f0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:1> * <var:L> /\ <var:f2> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:1> * <var:L> /\ <var:f2> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:1> * <var:L> /\ <var:f2> = <nat:4> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:1> * <var:L> /\ <var:f2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:f3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:1> * <var:L> /\ <var:f2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:f3> = <nat:4> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:1> * <var:L> /\ <var:f2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:f3> = <nat:4> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:1> * <var:L> /\ <var:f2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:f3> = <nat:4> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:1> * <var:L> /\ <var:f2> = <nat:4> * <var:L> ^ <nat:2> /\ <var:R> = <nat:4> * <var:L> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:f0> = <nat:7> /\ <var:f1> = <nat:1> * <var:L> /\ <var:R> = <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:f0> = <nat:7> /\ <var:R> = <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:L> /\ <var:R> = <nat:4> * <var:L> ^ <nat:3> + <nat:4> * <var:L> ^ <nat:2> + <nat:1> * <var:L> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 