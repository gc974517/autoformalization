\begin{document} \begin{theorem} Define a list of commands in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:5> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:a> ; <var:P> := <var:I1> ; <var:P> := <var:P> + <var:I0> \end{verbatim} Given $ <var:a> = <var:V> $ prior to interpreting our code it follows that we have $ <var:P> = <nat:8> * <var:V> + <nat:5> $ once list of commands terminates . \end{theorem} \begin{proof} The flow of logic for our code segment can be done using Hoare logic . Moving on to the next step , we have the binding command \verb | <var:I0> := <nat:5> ; | . This line forwards the condition $ \{ <var:a> = <var:V> \} $ to $ \{ <var:a> = <var:V> \land <var:I0> = <nat:5> \} $ . Following , we have the assignment statement \verb | <var:I1> := <nat:8> ; | . This takes the condition $ \{ <var:a> = <var:V> \land <var:I0> = <nat:5> \} $ into the condition $ \{ <var:a> = <var:V> \land <var:I0> = <nat:5> \land <var:I1> = <nat:8> \} $ . Next , the variable update statement \verb | <var:I1> := <var:I1> * <var:a> ; | . This advances $ \{ <var:a> = <var:V> \land <var:I0> = <nat:5> \land <var:I1> = <nat:8> \} $ to the postcondition $ \{ <var:a> = <var:V> \land <var:I0> = <nat:5> \land <var:I1> = <nat:8> \times <var:V> \} $ . Paying attention to the subsequent line seen in the series of instructions , we have the assignment line \verb | <var:P> := <var:I1> ; | . This redefines the precondition $ \{ <var:a> = <var:V> \land <var:I0> = <nat:5> \land <var:I1> = <nat:8> \times <var:V> \} $ to the condition $ \{ <var:a> = <var:V> \land <var:I0> = <nat:5> \land <var:P> = <nat:8> \times <var:V> \} $ . Focusing on the upcoming line found in our code segment , the binding line \verb | <var:P> := <var:P> + <var:I0> | . This transfers the condition $ \{ <var:a> = <var:V> \land <var:I0> = <nat:5> \land <var:P> = <nat:8> \times <var:V> \} $ to the postcondition $ \{ <var:a> = <var:V> \land <var:P> = <nat:8> \times <var:V> + <nat:5> \} $ . This is ensured using the assignment scheme in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:a> = <var:V> }} <var:I0> := <nat:5> ; <var:I1> := <nat:8> ; <var:I1> := <var:I1> * <var:a> ; <var:P> := <var:I1> ; <var:P> := <var:P> + <var:I0> {{ <var:P> = <nat:8> * <var:V> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:I0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:I0> = <nat:5> /\ <var:I1> = <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:I0> = <nat:5> /\ <var:P> = <nat:8> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:V> /\ <var:P> = <nat:8> * <var:V> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 