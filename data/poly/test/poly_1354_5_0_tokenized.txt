\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} : \begin{verbatim} <var:f0> := <nat:2> ; <var:f1> := <nat:4> ; <var:f1> := <var:f1> * <var:c> ; <var:M> := <var:f1> ; <var:M> := <var:M> + <var:f0> \end{verbatim} Given that $ <var:c> = <var:K> $ ahead of interpreting the series of instructions , it must be that we see $ <var:M> = <nat:4> \times <var:K> + <nat:2> $ once segment of code has finished . \end{theorem} \begin{proof} Utilizing typical Hoare techniques yields : \begin{eqnarray} \{ <var:c> = <var:K> \} \\ <var:f0> := <nat:2> ; \\ \{ <var:c> = <var:K> \land <var:f0> = <nat:2> \} \\ <var:f1> := <nat:4> ; \\ \{ <var:c> = <var:K> \land <var:f0> = <nat:2> \land <var:f1> = <nat:4> \} \\ <var:f1> := <var:f1> * <var:c> ; \\ \{ <var:c> = <var:K> \land <var:f0> = <nat:2> \land <var:f1> = <nat:4> \times <var:K> \} \\ <var:M> := <var:f1> ; \\ \{ <var:c> = <var:K> \land <var:f0> = <nat:2> \land <var:M> = <nat:4> \times <var:K> \} \\ <var:M> := <var:M> + <var:f0> \\ \{ <var:c> = <var:K> \land <var:M> = <nat:4> \times <var:K> + <nat:2> \} \end{eqnarray} Considering the preceding argument , our code is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:c> = <var:K> }} <var:f0> := <nat:2> ; <var:f1> := <nat:4> ; <var:f1> := <var:f1> * <var:c> ; <var:M> := <var:f1> ; <var:M> := <var:M> + <var:f0> {{ <var:M> = <nat:4> * <var:K> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:f0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:f0> = <nat:2> /\ <var:f1> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:f0> = <nat:2> /\ <var:M> = <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:K> /\ <var:M> = <nat:4> * <var:K> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 