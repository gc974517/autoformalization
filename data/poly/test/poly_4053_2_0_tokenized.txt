\begin{document} \begin{theorem} Let the following code segment in \emph{Imp} as follows \begin{verbatim} <var:P0> := <nat:4> ; <var:p> := <var:P0> \end{verbatim} Allowing $ <var:z> = <var:Y> $ --- given every $ <var:Y> \in \mathbb{N} $ --- ahead of the evaluation of the series of commands , then $ <var:p> = <nat:4> $ . \end{theorem} \begin{proof} The course of logic for the set of commands is accomplished using usual Hoare logic . Considering the proceeding bit of code contained in the series of commands , the variable assignmet line \verb | <var:P0> := <nat:4> ; | . This command takes the condition $ \{ <var:z> = <var:Y> \} $ toward the condition $ \{ <var:z> = <var:Y> \land <var:P0> = <nat:4> \} $ . This is given with the assignment inference rule obtained from typical Hoare logic . Immediately following , the variable binding statement \verb | <var:p> := <var:P0> | . This redefines the condition $ \{ <var:z> = <var:Y> \land <var:P0> = <nat:4> \} $ to the postcondition $ \{ <var:z> = <var:Y> \land <var:p> = <nat:4> \} $ . This is guaranteed using the assignment rule given in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:z> = <var:Y> }} <var:P0> := <nat:4> ; <var:p> := <var:P0> {{ <var:p> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:Y> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:Y> /\ <var:p> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 