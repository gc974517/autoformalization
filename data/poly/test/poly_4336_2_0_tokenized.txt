\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} as \begin{verbatim} <var:U0> := <nat:8> ; <var:G> := <var:U0> \end{verbatim} \end{definition} \begin{theorem} We define a list of instructions <def:poly> . Assuming $ <var:K> = <var:y> $ ahead of executing this list of instructions it must be that we have $ <var:G> = <nat:8> $ once set of instructions has finished . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:K> = <var:y> \} \\ <var:U0> := <nat:8> ; \\ \{ <var:K> = <var:y> \land <var:U0> = <nat:8> \} \\ <var:G> := <var:U0> \\ \{ <var:K> = <var:y> \land <var:G> = <nat:8> \} \end{eqnarray} Utilizing usual Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <def:poly> := <var:U0> := <nat:8> ; <var:G> := <var:U0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:K> = <var:y> }} <def:poly> {{ <var:G> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:y> /\ <var:U0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:y> /\ <var:G> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 