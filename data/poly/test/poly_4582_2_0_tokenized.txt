\begin{document} \begin{theorem} Take the following code segment as \begin{verbatim} <var:L0> := <nat:9> ; <var:X> := <var:L0> \end{verbatim} Allowing $ <var:w> = <var:b> $ prior to interpreting our list of instructions it must be that we see $ <var:X> = <nat:9> $ after series of instructions is done executing . \end{theorem} \begin{proof} The proof of our set of commands can be accomplished through usual Hoare logic . After , we see \begin{verbatim} { <var:w> = <var:b> } <var:L0> := <nat:9> { <var:w> = <var:b> \land <var:L0> = <nat:9> } { <var:w> = <var:b> \land <var:L0> = <nat:9> } <var:X> := <var:L0{ <var:w> = <var:b> \land <var:X> = <nat:9> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:w> = <var:b> }} <var:L0> := <nat:9> ; <var:X> := <var:L0> {{ <var:X> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:b> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:b> /\ <var:X> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 