\begin{document} \begin{theorem} Define the following set of commands in \emph{Imp} such that \begin{verbatim} <var:G0> := <nat:9> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:l> ; <var:f> := <var:G1> ; <var:f> := <var:f> + <var:G0> \end{verbatim} Allow $ <var:l> = <var:B> $ ahead of evaluating our code segment , it follows that $ <var:f> = <nat:6> \times <var:B> + <nat:9> $ when segment of code has terminated . \end{theorem} \begin{proof} The argument for the program is evident by standard Hoare techniques . Moving on , we see the assignment line defining $ <nat:9> $ into $ <var:G0>$ . This line moves the condition $ \{ <var:l> = <var:B> \} $ into the condition $ \{ <var:l> = <var:B> \land <var:G0> = <nat:9> \} $ . This is sound using the assignment inference rule of typical Hoare logic . Considering the upcoming line contained in our list of instructions , we see the variable update command giving $ <nat:6> $ toward $ <var:G1>$ . This forwards the condition $ \{ <var:l> = <var:B> \land <var:G0> = <nat:9> \} $ as the condition $ \{ <var:l> = <var:B> \land <var:G0> = <nat:9> \land <var:G1> = <nat:6> \} $ . This is sound with the assignment rule defined in standard Hoare techniques . Now , we have the variable update command \verb | <var:G1> := <var:G1> * <var:l> ; | . This command advances the precondition $ \{ <var:l> = <var:B> \land <var:G0> = <nat:9> \land <var:G1> = <nat:6> \} $ as the postcondition $ \{ <var:l> = <var:B> \land <var:G0> = <nat:9> \land <var:G1> = <nat:6> * <var:B> \} $ . This is guaranteed with the assignment rule defined by Hoare reasoning . Immediately after , the variable assignmet code \verb | <var:f> := <var:G1> ; | . This takes the precondition $ \{ <var:l> = <var:B> \land <var:G0> = <nat:9> \land <var:G1> = <nat:6> * <var:B> \} $ to the postcondition $ \{ <var:l> = <var:B> \land <var:G0> = <nat:9> \land <var:f> = <nat:6> * <var:B> \} $ . This is rigorously given by the assignment rule in Hoare reasoning . Moving on to the next step seen in the series of commands , the variable update command \verb | <var:f> := <var:f> + <var:G0> | . This advances the precondition $ \{ <var:l> = <var:B> \land <var:G0> = <nat:9> \land <var:f> = <nat:6> * <var:B> \} $ into $ \{ <var:l> = <var:B> \land <var:f> = <nat:6> * <var:B> + <nat:9> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:l> = <var:B> }} <var:G0> := <nat:9> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:l> ; <var:f> := <var:G1> ; <var:f> := <var:f> + <var:G0> {{ <var:f> = <nat:6> * <var:B> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:G0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:G0> = <nat:9> /\ <var:G1> = <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:G0> = <nat:9> /\ <var:f> = <nat:6> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:B> /\ <var:f> = <nat:6> * <var:B> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 