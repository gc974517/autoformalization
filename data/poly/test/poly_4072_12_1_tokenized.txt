\begin{document} \begin{theorem} We define a series of instructions in \emph{Imp} such that \begin{verbatim} <var:r1> := <var:T> ; <var:r2> := <var:r1> * <var:T> ; <var:r3> := <var:r2> * <var:T> ; <var:r4> := <var:r3> * <var:T> ; <var:r0> := <nat:1> ; <var:r2> := <var:r2> * <nat:4> ; <var:r3> := <var:r3> * <nat:5> ; <var:r4> := <var:r4> * <nat:7> ; <var:z> := <var:r4> <var:z> := <var:z> + <var:r3> <var:z> := <var:z> + <var:r2> <var:z> := <var:z> + <var:r0> \end{verbatim} Allow it to hold that $ <var:T> = <var:J> $ prior to interpreting our list of instructions then we see $ <var:z> = <nat:7> \times <var:J> ^ <nat:4> + <nat:5> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:1> $ once segment of code is done executing . \end{theorem} \begin{proof} Note that the below decorated set of commands . \begin{eqnarray} \{ <var:T> = <var:J> \} \\ <var:r1> := <var:T> ; \\ \{ <var:T> = <var:J> \land <var:r1> = <var:J> \} \\ <var:r2> := <var:r1> * <var:T> ; \\ \{ <var:T> = <var:J> \land <var:r1> = <var:J> \land <var:r2> = <var:J> ^ <nat:2> \} \\ <var:r3> := <var:r2> * <var:T> ; \\ \{ <var:T> = <var:J> \land <var:r1> = <var:J> \land <var:r2> = <var:J> ^ <nat:2> \land <var:r3> = <var:J> ^ <nat:3> \} \\ <var:r4> := <var:r3> * <var:T> ; \\ \{ <var:T> = <var:J> \land <var:r1> = <var:J> \land <var:r2> = <var:J> ^ <nat:2> \land <var:r3> = <var:J> ^ <nat:3> \land <var:r4> = <var:J> ^ <nat:4> \} \\ <var:r0> := <nat:1> ; \\ \{ <var:T> = <var:J> \land <var:r1> = <var:J> \land <var:r2> = <var:J> ^ <nat:2> \land <var:r3> = <var:J> ^ <nat:3> \land <var:r4> = <var:J> ^ <nat:4> \land <var:r0> = <nat:1> \} \\ <var:r2> := <var:r2> * <nat:4> ; \\ \{ <var:T> = <var:J> \land <var:r1> = <var:J> \land <var:r2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:r3> = <var:J> ^ <nat:3> \land <var:r4> = <var:J> ^ <nat:4> \land <var:r0> = <nat:1> \} \end{eqnarray} Continuing interpreting the program gives us : \begin{eqnarray} <var:r3> := <var:r3> * <nat:5> ; \\ \{ <var:T> = <var:J> \land <var:r1> = <var:J> \land <var:r2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:r3> = <nat:5> \times <var:J> ^ <nat:3> \land <var:r4> = <var:J> ^ <nat:4> \land <var:r0> = <nat:1> \} \\ <var:r4> := <var:r4> * <nat:7> ; \\ \{ <var:T> = <var:J> \land <var:r1> = <var:J> \land <var:r2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:r3> = <nat:5> \times <var:J> ^ <nat:3> \land <var:r4> = <nat:7> \times <var:J> ^ <nat:4> \land <var:r0> = <nat:1> \} \\ <var:z> := <var:r4> \\ \{ <var:T> = <var:J> \land <var:r1> = <var:J> \land <var:r2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:r3> = <nat:5> \times <var:J> ^ <nat:3> \land <var:r0> = <nat:1> \land <var:z> = <nat:7> \times <var:J> ^ <nat:4> \} \\ <var:z> := <var:z> + <var:r3> \\ \{ <var:T> = <var:J> \land <var:r1> = <var:J> \land <var:r2> = <nat:4> \times <var:J> ^ <nat:2> \land <var:r0> = <nat:1> \land <var:z> = <nat:7> \times <var:J> ^ <nat:4> + <nat:5> \times <var:J> ^ <nat:3> \} \\ <var:z> := <var:z> + <var:r2> \\ \{ <var:T> = <var:J> \land <var:r1> = <var:J> \land <var:r0> = <nat:1> \land <var:z> = <nat:7> \times <var:J> ^ <nat:4> + <nat:5> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> \} \\ <var:z> := <var:z> + <var:r0> \\ \{ <var:T> = <var:J> \land <var:z> = <nat:7> \times <var:J> ^ <nat:4> + <nat:5> \times <var:J> ^ <nat:3> + <nat:4> \times <var:J> ^ <nat:2> + <nat:1> \} \end{eqnarray} Applying usual Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <var:r3> : string := " <var:r3> " . Definition <var:r4> : string := " <var:r4> " . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:T> = <var:J> }} <var:r1> := <var:T> ; <var:r2> := <var:r1> * <var:T> ; <var:r3> := <var:r2> * <var:T> ; <var:r4> := <var:r3> * <var:T> ; <var:r0> := <nat:1> ; <var:r2> := <var:r2> * <nat:4> ; <var:r3> := <var:r3> * <nat:5> ; <var:r4> := <var:r4> * <nat:7> ; <var:z> := <var:r4> <var:z> := <var:z> + <var:r3> <var:z> := <var:z> + <var:r2> <var:z> := <var:z> + <var:r0> {{ <var:z> = <nat:7> * <var:J> ^ <nat:4> + <nat:5> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:r1> = <var:J> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:r1> = <var:J> /\ <var:r2> = <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:r1> = <var:J> /\ <var:r2> = <var:J> ^ <nat:2> /\ <var:r3> = <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:r1> = <var:J> /\ <var:r2> = <var:J> ^ <nat:2> /\ <var:r3> = <var:J> ^ <nat:3> /\ <var:r4> = <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:r1> = <var:J> /\ <var:r2> = <var:J> ^ <nat:2> /\ <var:r3> = <var:J> ^ <nat:3> /\ <var:r4> = <var:J> ^ <nat:4> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:r1> = <var:J> /\ <var:r2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:r3> = <var:J> ^ <nat:3> /\ <var:r4> = <var:J> ^ <nat:4> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:r1> = <var:J> /\ <var:r2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:r3> = <nat:5> * <var:J> ^ <nat:3> /\ <var:r4> = <var:J> ^ <nat:4> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:r1> = <var:J> /\ <var:r2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:r3> = <nat:5> * <var:J> ^ <nat:3> /\ <var:r4> = <nat:7> * <var:J> ^ <nat:4> /\ <var:r0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:r1> = <var:J> /\ <var:r2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:r3> = <nat:5> * <var:J> ^ <nat:3> /\ <var:r0> = <nat:1> /\ <var:z> = <nat:7> * <var:J> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:r1> = <var:J> /\ <var:r2> = <nat:4> * <var:J> ^ <nat:2> /\ <var:r0> = <nat:1> /\ <var:z> = <nat:7> * <var:J> ^ <nat:4> + <nat:5> * <var:J> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:r1> = <var:J> /\ <var:r0> = <nat:1> /\ <var:z> = <nat:7> * <var:J> ^ <nat:4> + <nat:5> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:J> /\ <var:z> = <nat:7> * <var:J> ^ <nat:4> + <nat:5> * <var:J> ^ <nat:3> + <nat:4> * <var:J> ^ <nat:2> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 