\begin{document} \begin{theorem} Take the following set of instructions in \emph{Imp} : \begin{verbatim} <var:q0> := <nat:2> ; <var:q1> := <nat:5> ; <var:q1> := <var:q1> * <var:O> ; <var:q2> := <nat:1> ; <var:q2> := <var:q2> * <var:O> ; <var:q2> := <var:q2> * <var:O> ; <var:q3> := <nat:2> ; <var:q3> := <var:q3> * <var:O> ; <var:q3> := <var:q3> * <var:O> ; <var:q3> := <var:q3> * <var:O> ; <var:L> := <var:q3> ; <var:L> := <var:L> + <var:q2> ; <var:L> := <var:L> + <var:q1> ; <var:L> := <var:L> + <var:q0> \end{verbatim} Assuming that $ <var:O> = <var:b> $ ahead of interpreting the code it follows that $ <var:L> = <nat:2> \times <var:b> ^ <nat:3> + <nat:1> \times <var:b> ^ <nat:2> + <nat:5> \times <var:b> + <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for our series of instructions is given using this decorated code . \begin{eqnarray} \{ <var:O> = <var:b> \} \\ <var:q0> := <nat:2> ; \\ \{ <var:O> = <var:b> \land <var:q0> = <nat:2> \} \\ <var:q1> := <nat:5> ; \\ \{ <var:O> = <var:b> \land <var:q0> = <nat:2> \land <var:q1> = <nat:5> \} \\ <var:q1> := <var:q1> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:q0> = <nat:2> \land <var:q1> = <nat:5> * <var:b> \} \\ <var:q2> := <nat:1> ; \\ \{ <var:O> = <var:b> \land <var:q0> = <nat:2> \land <var:q1> = <nat:5> * <var:b> \land <var:q2> = <nat:1> \} \\ <var:q2> := <var:q2> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:q0> = <nat:2> \land <var:q1> = <nat:5> * <var:b> \land <var:q2> = <nat:1> * <var:b> \} \\ <var:q2> := <var:q2> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:q0> = <nat:2> \land <var:q1> = <nat:5> * <var:b> \land <var:q2> = <nat:1> * <var:b> ^ <nat:2> \} \\ <var:q3> := <nat:2> ; \\ \{ <var:O> = <var:b> \land <var:q0> = <nat:2> \land <var:q1> = <nat:5> * <var:b> \land <var:q2> = <nat:1> * <var:b> ^ <nat:2> \land <var:q3> = <nat:2> \} \\ <var:q3> := <var:q3> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:q0> = <nat:2> \land <var:q1> = <nat:5> * <var:b> \land <var:q2> = <nat:1> * <var:b> ^ <nat:2> \land <var:q3> = <nat:2> * <var:b> \} \\ <var:q3> := <var:q3> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:q0> = <nat:2> \land <var:q1> = <nat:5> * <var:b> \land <var:q2> = <nat:1> * <var:b> ^ <nat:2> \land <var:q3> = <nat:2> * <var:b> ^ <nat:2> \} \\ <var:q3> := <var:q3> * <var:O> ; \\ \{ <var:O> = <var:b> \land <var:q0> = <nat:2> \land <var:q1> = <nat:5> * <var:b> \land <var:q2> = <nat:1> * <var:b> ^ <nat:2> \land <var:q3> = <nat:2> * <var:b> ^ <nat:3> \} \\ <var:L> := <var:q3> ; \\ \{ <var:O> = <var:b> \land <var:q0> = <nat:2> \land <var:q1> = <nat:5> * <var:b> \land <var:q2> = <nat:1> * <var:b> ^ <nat:2> \land <var:L> = <nat:2> * <var:b> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:q2> ; \\ \{ <var:O> = <var:b> \land <var:q0> = <nat:2> \land <var:q1> = <nat:5> * <var:b> \land <var:L> = <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> \} \\ <var:L> := <var:L> + <var:q1> ; \\ \{ <var:O> = <var:b> \land <var:q0> = <nat:2> \land <var:L> = <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:5> * <var:b> \} \\ <var:L> := <var:L> + <var:q0> \\ \{ <var:O> = <var:b> \land <var:L> = <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:5> * <var:b> + <nat:2> \} \end{eqnarray} Applying Hoare techniques solves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:O> = <var:b> }} <var:q0> := <nat:2> ; <var:q1> := <nat:5> ; <var:q1> := <var:q1> * <var:O> ; <var:q2> := <nat:1> ; <var:q2> := <var:q2> * <var:O> ; <var:q2> := <var:q2> * <var:O> ; <var:q3> := <nat:2> ; <var:q3> := <var:q3> * <var:O> ; <var:q3> := <var:q3> * <var:O> ; <var:q3> := <var:q3> * <var:O> ; <var:L> := <var:q3> ; <var:L> := <var:L> + <var:q2> ; <var:L> := <var:L> + <var:q1> ; <var:L> := <var:L> + <var:q0> {{ <var:L> = <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:5> * <var:b> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:q0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:5> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:5> * <var:b> /\ <var:q2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:5> * <var:b> /\ <var:q2> = <nat:1> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:5> * <var:b> /\ <var:q2> = <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:5> * <var:b> /\ <var:q2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:q3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:5> * <var:b> /\ <var:q2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:q3> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:5> * <var:b> /\ <var:q2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:q3> = <nat:2> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:5> * <var:b> /\ <var:q2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:q3> = <nat:2> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:5> * <var:b> /\ <var:q2> = <nat:1> * <var:b> ^ <nat:2> /\ <var:L> = <nat:2> * <var:b> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:q0> = <nat:2> /\ <var:q1> = <nat:5> * <var:b> /\ <var:L> = <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:q0> = <nat:2> /\ <var:L> = <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:5> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:b> /\ <var:L> = <nat:2> * <var:b> ^ <nat:3> + <nat:1> * <var:b> ^ <nat:2> + <nat:5> * <var:b> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 