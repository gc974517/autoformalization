\begin{document} \begin{theorem} We define the following set of commands such that \begin{verbatim} <var:q> := <nat:2> ; <var:q> := <nat:4> + <var:q> * <var:X> ; <var:q> := <nat:4> + <var:q> * <var:X> ; <var:q> := <nat:2> + <var:q> * <var:X> ; <var:q> := <nat:3> + <var:q> * <var:X> ; <var:q> := <var:q> * <var:X> ; <var:q> := <nat:4> + <var:q> * <var:X> ; <var:q> := <nat:4> + <var:q> * <var:X> ; <var:q> := <nat:1> + <var:q> * <var:X> ; <var:q> := <var:q> * <var:X> ; <var:q> := <nat:4> + <var:q> * <var:X> \end{verbatim} Assume --- with some positive integers $ <var:Q> $ --- it to be that $ <var:X> = <var:Q> $ ahead of interpreting this code , then $ <var:q> = <nat:2> \times <var:Q> ^ <nat:10> + <nat:4> \times <var:Q> ^ <nat:9> + <nat:4> \times <var:Q> ^ <nat:8> + <nat:2> \times <var:Q> ^ <nat:7> + <nat:3> \times <var:Q> ^ <nat:6> + <nat:4> \times <var:Q> ^ <nat:4> + <nat:4> \times <var:Q> ^ <nat:3> + <nat:1> \times <var:Q> ^ <nat:2> + <nat:4> $ after list of instructions has terminated . \end{theorem} \begin{proof} The way to prove correctness for our set of commands is done using Hoare logic . Focusing on the next command seen in our series of commands , we have \begin{eqnarray} \{ <var:X> = <var:Q> \} \, <var:q> := <nat:2> \, \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \} \end{eqnarray} Keeping momentum , we have \begin{eqnarray} \{ <var:X> = <var:Q> \} \, <var:q> := <nat:2> \, \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \} \\ \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \} \, <var:q> := <nat:4> + <var:q> * <var:X> \, \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> + <nat:4> \} \\ \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> + <nat:4> \} \, <var:q> := <nat:4> + <var:q> * <var:X> \, \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:4> \} \\ \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:4> \} \, <var:q> := <nat:2> + <var:q> * <var:X> \, \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:2> \} \\ \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:2> \} \, <var:q> := <nat:3> + <var:q> * <var:X> \, \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:4> + <nat:4> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:3> \} \\ \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:4> + <nat:4> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:2> \times <var:Q> + <nat:3> \} \, <var:q> := <var:q> * <var:X> \, \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:5> + <nat:4> \times <var:Q> ^ <nat:4> + <nat:4> \times <var:Q> ^ <nat:3> + <nat:2> \times <var:Q> ^ <nat:2> + <nat:3> \times <var:Q> + \} \end{eqnarray} This is given by the variable update inference rule found in usual Hoare techniques . Following , we see \begin{eqnarray} \{ <var:X> = <var:Q> \} \, <var:q> := <nat:2> \, \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \} \\ \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \} \, <var:q> := <nat:4> + <var:q> * <var:X> \, \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> + <nat:4> \} \\ \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> + <nat:4> \} \, <var:q> := <nat:4> + <var:q> * <var:X> \, \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:4> \} \end{eqnarray} Advancing to the next step , we see \begin{eqnarray} \{ <var:X> = <var:Q> \} \, <var:q> := <nat:2> \, \{ <var:X> = <var:Q> \land <var:q> = <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:X> = <var:Q> }} <var:q> := <nat:2> ; <var:q> := <nat:4> + <var:q> * <var:X> ; <var:q> := <nat:4> + <var:q> * <var:X> ; <var:q> := <nat:2> + <var:q> * <var:X> ; <var:q> := <nat:3> + <var:q> * <var:X> ; <var:q> := <var:q> * <var:X> ; <var:q> := <nat:4> + <var:q> * <var:X> ; <var:q> := <nat:4> + <var:q> * <var:X> ; <var:q> := <nat:1> + <var:q> * <var:X> ; <var:q> := <var:q> * <var:X> ; <var:q> := <nat:4> + <var:q> * <var:X> {{ <var:q> = <nat:2> * <var:Q> ^ <nat:10> + <nat:4> * <var:Q> ^ <nat:9> + <nat:4> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:q> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:3> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:3> * <var:Q> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:3> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:3> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:9> + <nat:4> * <var:Q> ^ <nat:8> + <nat:4> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:3> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:Q> /\ <var:q> = <nat:2> * <var:Q> ^ <nat:10> + <nat:4> * <var:Q> ^ <nat:9> + <nat:4> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:3> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 