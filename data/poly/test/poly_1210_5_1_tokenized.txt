\begin{document} \begin{theorem} Consider a list of instructions as \begin{verbatim} <var:Y1> := <var:R> ; <var:Y0> := <nat:9> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:d> := <var:Y1> <var:d> := <var:d> + <var:Y0> \end{verbatim} Assume , given every positive integer coefficients $ <var:j> $ , that we have $ <var:R> = <var:j> $ ahead of interpreting the segment of code , then $ <var:d> = <nat:1> \times <var:j> + <nat:9> $ once series of commands has exited . \end{theorem} \begin{proof} The method of proof for the segment of code is shown by Hoare reasoning . Moving on to the next step , \begin{eqnarray} \{ <var:R> = <var:j> \} \, <var:Y1> := <var:R> \, \{ <var:R> = <var:j> \land <var:Y1> = <var:j> \} \\ \{ <var:R> = <var:j> \land <var:Y1> = <var:j> \} \, <var:Y0> := <nat:9> \, \{ <var:R> = <var:j> \land <var:Y1> = <var:j> \land <var:Y0> = <nat:9> \} \\ \{ <var:R> = <var:j> \land <var:Y1> = <var:j> \land <var:Y0> = <nat:9> \} \, <var:Y1> := <var:Y1> * <nat:1> \, \{ <var:R> = <var:j> \land <var:Y1> = <nat:1> \times <var:j> \land <var:Y0> = <nat:9> \} \end{eqnarray} Taking another step toward the upcoming lines of codecontained in the set of instructions , \begin{eqnarray} \{ <var:R> = <var:j> \} \, <var:Y1> := <var:R> \, \{ <var:R> = <var:j> \land <var:Y1> = <var:j> \} \\ \{ <var:R> = <var:j> \land <var:Y1> = <var:j> \} \, <var:Y0> := <nat:9> \, \{ <var:R> = <var:j> \land <var:Y1> = <var:j> \land <var:Y0> = <nat:9> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Y0> : string := " <var:Y0> " . Definition <var:Y1> : string := " <var:Y1> " . Theorem <genH:poly_code_correct> : forall <var:j> : nat , {{ <var:R> = <var:j> }} <var:Y1> := <var:R> ; <var:Y0> := <nat:9> ; <var:Y1> := <var:Y1> * <nat:1> ; <var:d> := <var:Y1> <var:d> := <var:d> + <var:Y0> {{ <var:d> = <nat:1> * <var:j> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:Y1> = <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:Y1> = <var:j> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:Y1> = <nat:1> * <var:j> /\ <var:Y0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:Y0> = <nat:9> /\ <var:d> = <nat:1> * <var:j> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:j> /\ <var:d> = <nat:1> * <var:j> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 