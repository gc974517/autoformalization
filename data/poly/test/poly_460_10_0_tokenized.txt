\begin{document} \begin{definition} Define a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:y0> := <nat:5> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:e> ; <var:y3> := <nat:4> ; <var:y3> := <var:y3> * <var:e> ; <var:y3> := <var:y3> * <var:e> ; <var:y3> := <var:y3> * <var:e> ; <var:L> := <var:y3> ; <var:L> := <var:L> + <var:y1> ; <var:L> := <var:L> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} We define a program <def:poly> . Given it to hold that $ <var:e> = <var:a> $ ahead of interpreting this series of instructions , it must be that we have $ <var:L> = <nat:4> * <var:a> ^ <nat:3> + <nat:4> * <var:a> + <nat:5> $ when set of instructions is done executing . \end{theorem} \begin{proof} Using usual Hoare techniques returns : \begin{eqnarray} \{ <var:e> = <var:a> \} \\ <var:y0> := <nat:5> ; \\ \{ <var:e> = <var:a> \land <var:y0> = <nat:5> \} \\ <var:y1> := <nat:4> ; \\ \{ <var:e> = <var:a> \land <var:y0> = <nat:5> \land <var:y1> = <nat:4> \} \\ <var:y1> := <var:y1> * <var:e> ; \\ \{ <var:e> = <var:a> \land <var:y0> = <nat:5> \land <var:y1> = <nat:4> \cdot <var:a> \} \\ <var:y3> := <nat:4> ; \\ \{ <var:e> = <var:a> \land <var:y0> = <nat:5> \land <var:y1> = <nat:4> \cdot <var:a> \land <var:y3> = <nat:4> \} \\ <var:y3> := <var:y3> * <var:e> ; \\ \{ <var:e> = <var:a> \land <var:y0> = <nat:5> \land <var:y1> = <nat:4> \cdot <var:a> \land <var:y3> = <nat:4> \cdot <var:a> \} \\ <var:y3> := <var:y3> * <var:e> ; \\ \{ <var:e> = <var:a> \land <var:y0> = <nat:5> \land <var:y1> = <nat:4> \cdot <var:a> \land <var:y3> = <nat:4> \cdot <var:a> ^ <nat:2> \} \\ <var:y3> := <var:y3> * <var:e> ; \\ \{ <var:e> = <var:a> \land <var:y0> = <nat:5> \land <var:y1> = <nat:4> \cdot <var:a> \land <var:y3> = <nat:4> \cdot <var:a> ^ <nat:3> \} \\ <var:L> := <var:y3> ; \\ \{ <var:e> = <var:a> \land <var:y0> = <nat:5> \land <var:y1> = <nat:4> \cdot <var:a> \land <var:L> = <nat:4> \cdot <var:a> ^ <nat:3> \} \\ <var:L> := <var:L> + <var:y1> ; \\ \{ <var:e> = <var:a> \land <var:y0> = <nat:5> \land <var:L> = <nat:4> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> \} \\ <var:L> := <var:L> + <var:y0> \\ \{ <var:e> = <var:a> \land <var:L> = <nat:4> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> + <nat:5> \} \end{eqnarray} Given the above , this set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y0> := <nat:5> ; <var:y1> := <nat:4> ; <var:y1> := <var:y1> * <var:e> ; <var:y3> := <nat:4> ; <var:y3> := <var:y3> * <var:e> ; <var:y3> := <var:y3> * <var:e> ; <var:y3> := <var:y3> * <var:e> ; <var:L> := <var:y3> ; <var:L> := <var:L> + <var:y1> ; <var:L> := <var:L> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:e> = <var:a> }} <def:poly> {{ <var:L> = <nat:4> * <var:a> ^ <nat:3> + <nat:4> * <var:a> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:4> * <var:a> /\ <var:y3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:4> * <var:a> /\ <var:y3> = <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:4> * <var:a> /\ <var:y3> = <nat:4> * <var:a> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:4> * <var:a> /\ <var:y3> = <nat:4> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:4> * <var:a> /\ <var:L> = <nat:4> * <var:a> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:y0> = <nat:5> /\ <var:L> = <nat:4> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:a> /\ <var:L> = <nat:4> * <var:a> ^ <nat:3> + <nat:4> * <var:a> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 