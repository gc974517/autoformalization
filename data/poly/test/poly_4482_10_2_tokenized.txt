\begin{document} \begin{definition} Take a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K> := <nat:1> ; <var:K> := <nat:2> + <var:K> * <var:h> ; <var:K> := <nat:2> + <var:K> * <var:h> ; <var:K> := <nat:2> + <var:K> * <var:h> ; <var:K> := <nat:1> + <var:K> * <var:h> ; <var:K> := <nat:2> + <var:K> * <var:h> ; <var:K> := <var:K> * <var:h> ; <var:K> := <nat:4> + <var:K> * <var:h> ; <var:K> := <var:K> * <var:h> ; <var:K> := <nat:4> + <var:K> * <var:h> \end{verbatim} \end{definition} \begin{theorem} Take the following list of commands <def:poly> . Allowing $ <var:h> = <var:A> $ before interpreting our series of commands it must be that we have $ <var:K> = <nat:1> \cdot <var:A> ^ <nat:9> + <nat:2> \cdot <var:A> ^ <nat:8> + <nat:2> \cdot <var:A> ^ <nat:7> + <nat:2> \cdot <var:A> ^ <nat:6> + <nat:1> \cdot <var:A> ^ <nat:5> + <nat:2> \cdot <var:A> ^ <nat:4> + <nat:4> \cdot <var:A> ^ <nat:2> + <nat:4> $ after list of commands has exited . \end{theorem} \begin{proof} The course of logic for our list of instructions is given by typical Hoare techniques . Paying attention to the next piece of code seen in our series of commands , the binding statement giving $ <nat:1> $ to $ <var:K>$ . This code forwards the condition $ \{ <var:h> = <var:A> \} $ as the postcondition $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \} $ . This is deduced with the assignment inference rule of standard Hoare logic . Considering the upcoming line of code contained in our set of commands , we see the variable binding line \verb | <var:K> := <nat:2> + <var:K> * <var:h> ; | . This advances the precondition $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \} $ as the condition $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> + <nat:2> \} $ . Going forward , we see the binding code \verb | <var:K> := <nat:2> + <var:K> * <var:h> ; | . This statement advances the condition $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> + <nat:2> \} $ toward the postcondition $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:2> \} $ . This is shown to be logically sound with the assignment law defined by standard Hoare reasoning . Shifting focus toward the upcoming command found in our list of instructions , we see the variable binding command yielding $ <nat:2> + <var:K> * <var:h> $ toward $ <var:K>$ . This statement forwards the precondition $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:2> \} $ toward the condition $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:2> \} $ . This is ensured using the assignment scheme defined in Hoare logic . Keeping momentum , the variable update code \verb | <var:K> := <nat:1> + <var:K> * <var:h> ; | . This transfers the condition $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:2> \} $ into $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:1> \} $ . Keeping momentum , the statement assigning $ <nat:2> + <var:K> * <var:h> $ as $ <var:K>$ . This moves $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + <nat:1> \} $ to the postcondition $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:1> \times <var:A> + <nat:2> \} $ . This is shown using the assignment inference rule in standard Hoare logic . Advancing , we see the line \verb | <var:K> := <var:K> * <var:h> ; | . This line forwards the condition $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:1> \times <var:A> + <nat:2> \} $ to $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:6> + <nat:2> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:1> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + \} $ . Now , we see the variable update line \verb | <var:K> := <nat:4> + <var:K> * <var:h> ; | . This forwards $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:6> + <nat:2> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:1> \times <var:A> ^ <nat:2> + <nat:2> \times <var:A> + \} $ as the postcondition $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:7> + <nat:2> \times <var:A> ^ <nat:6> + <nat:2> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:1> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:4> \} $ . This is ensured with the assignment inference rule of Hoare reasoning . Moving onward , we see the variable update command binding $ <var:K> * <var:h> $ as $ <var:K>$ . This code moves $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:7> + <nat:2> \times <var:A> ^ <nat:6> + <nat:2> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:1> \times <var:A> ^ <nat:3> + <nat:2> \times <var:A> ^ <nat:2> + <nat:4> \} $ to the condition $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:8> + <nat:2> \times <var:A> ^ <nat:7> + <nat:2> \times <var:A> ^ <nat:6> + <nat:2> \times <var:A> ^ <nat:5> + <nat:1> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> + \} $ . Looking at the upcoming piece of code found in the list of instructions , we see the environment update command \verb | <var:K> := <nat:4> + <var:K> * <var:h> | . This takes the precondition $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:8> + <nat:2> \times <var:A> ^ <nat:7> + <nat:2> \times <var:A> ^ <nat:6> + <nat:2> \times <var:A> ^ <nat:5> + <nat:1> \times <var:A> ^ <nat:4> + <nat:2> \times <var:A> ^ <nat:3> + <nat:4> \times <var:A> + \} $ into $ \{ <var:h> = <var:A> \land <var:K> = <nat:1> \times <var:A> ^ <nat:9> + <nat:2> \times <var:A> ^ <nat:8> + <nat:2> \times <var:A> ^ <nat:7> + <nat:2> \times <var:A> ^ <nat:6> + <nat:1> \times <var:A> ^ <nat:5> + <nat:2> \times <var:A> ^ <nat:4> + <nat:4> \times <var:A> ^ <nat:2> + <nat:4> \} $ . This is given by the assignment rule defined by standard Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:K> := <nat:1> ; <var:K> := <nat:2> + <var:K> * <var:h> ; <var:K> := <nat:2> + <var:K> * <var:h> ; <var:K> := <nat:2> + <var:K> * <var:h> ; <var:K> := <nat:1> + <var:K> * <var:h> ; <var:K> := <nat:2> + <var:K> * <var:h> ; <var:K> := <var:K> * <var:h> ; <var:K> := <nat:4> + <var:K> * <var:h> ; <var:K> := <var:K> * <var:h> ; <var:K> := <nat:4> + <var:K> * <var:h> . Theorem <genH:poly_code_correct> : forall <var:A> : nat , {{ <var:h> = <var:A> }} <def:poly> {{ <var:K> = <nat:1> * <var:A> ^ <nat:9> + <nat:2> * <var:A> ^ <nat:8> + <nat:2> * <var:A> ^ <nat:7> + <nat:2> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:K> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:K> = <nat:1> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:K> = <nat:1> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:K> = <nat:1> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:K> = <nat:1> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:K> = <nat:1> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:1> * <var:A> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:K> = <nat:1> * <var:A> ^ <nat:6> + <nat:2> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:1> * <var:A> ^ <nat:2> + <nat:2> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:K> = <nat:1> * <var:A> ^ <nat:7> + <nat:2> * <var:A> ^ <nat:6> + <nat:2> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:1> * <var:A> ^ <nat:3> + <nat:2> * <var:A> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:K> = <nat:1> * <var:A> ^ <nat:8> + <nat:2> * <var:A> ^ <nat:7> + <nat:2> * <var:A> ^ <nat:6> + <nat:2> * <var:A> ^ <nat:5> + <nat:1> * <var:A> ^ <nat:4> + <nat:2> * <var:A> ^ <nat:3> + <nat:4> * <var:A> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:A> /\ <var:K> = <nat:1> * <var:A> ^ <nat:9> + <nat:2> * <var:A> ^ <nat:8> + <nat:2> * <var:A> ^ <nat:7> + <nat:2> * <var:A> ^ <nat:6> + <nat:1> * <var:A> ^ <nat:5> + <nat:2> * <var:A> ^ <nat:4> + <nat:4> * <var:A> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 