\begin{document} \begin{definition} We define the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:z0> := <nat:2> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:x> ; <var:q> := <var:z1> ; <var:q> := <var:q> + <var:z0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:x> = <var:T> $ prior to interpreting our series of commands then we see $ <var:q> = <nat:1> \times <var:T> + <nat:2> $ . \end{theorem} \begin{proof} Applying usual Hoare techniques returns : \begin{eqnarray} \{ <var:x> = <var:T> \} \\ <var:z0> := <nat:2> ; \\ \{ <var:x> = <var:T> \land <var:z0> = <nat:2> \} \\ <var:z1> := <nat:1> ; \\ \{ <var:x> = <var:T> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> \} \\ <var:z1> := <var:z1> * <var:x> ; \\ \{ <var:x> = <var:T> \land <var:z0> = <nat:2> \land <var:z1> = <nat:1> \cdot <var:T> \} \\ <var:q> := <var:z1> ; \\ \{ <var:x> = <var:T> \land <var:z0> = <nat:2> \land <var:q> = <nat:1> \cdot <var:T> \} \\ <var:q> := <var:q> + <var:z0> \\ \{ <var:x> = <var:T> \land <var:q> = <nat:1> \cdot <var:T> + <nat:2> \} \end{eqnarray} Given the above , the series of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:z0> : string := " <var:z0> " . Definition <var:z1> : string := " <var:z1> " . Definition <def:poly> := <var:z0> := <nat:2> ; <var:z1> := <nat:1> ; <var:z1> := <var:z1> * <var:x> ; <var:q> := <var:z1> ; <var:q> := <var:q> + <var:z0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:x> = <var:T> }} <def:poly> {{ <var:q> = <nat:1> * <var:T> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:z0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:z0> = <nat:2> /\ <var:z1> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:z0> = <nat:2> /\ <var:q> = <nat:1> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:T> /\ <var:q> = <nat:1> * <var:T> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 