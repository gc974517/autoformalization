\begin{document} \begin{definition} Take the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:N1> := <var:X> ; <var:N2> := <var:N1> * <var:X> ; <var:N3> := <var:N2> * <var:X> ; <var:N4> := <var:N3> * <var:X> ; <var:N0> := <nat:9> ; <var:N1> := <var:N1> * <nat:2> ; <var:N2> := <var:N2> * <nat:4> ; <var:N3> := <var:N3> * <nat:8> ; <var:N4> := <var:N4> * <nat:5> ; <var:a> := <var:N4> <var:a> := <var:a> + <var:N3> <var:a> := <var:a> + <var:N2> <var:a> := <var:a> + <var:N1> <var:a> := <var:a> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Consider the following series of instructions <def:poly> in \emph{Imp} . Allowing ( given some $ <var:z> \in \mathbb{N} $ ) that we have $ <var:X> = <var:z> $ before the execution of the list of commands , it follows that we have $ <var:a> = <nat:5> \times <var:z> ^ <nat:4> + <nat:8> \times <var:z> ^ <nat:3> + <nat:4> \times <var:z> ^ <nat:2> + <nat:2> \times <var:z> + <nat:9> $ when code segment is done executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:X> = <var:z> \} \\ <var:N1> := <var:X> ; \\ \{ <var:X> = <var:z> \land <var:N1> = <var:z> \} \\ <var:N2> := <var:N1> * <var:X> ; \\ \{ <var:X> = <var:z> \land <var:N1> = <var:z> \land <var:N2> = <var:z> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:X> ; \\ \{ <var:X> = <var:z> \land <var:N1> = <var:z> \land <var:N2> = <var:z> ^ <nat:2> \land <var:N3> = <var:z> ^ <nat:3> \} \\ <var:N4> := <var:N3> * <var:X> ; \\ \{ <var:X> = <var:z> \land <var:N1> = <var:z> \land <var:N2> = <var:z> ^ <nat:2> \land <var:N3> = <var:z> ^ <nat:3> \land <var:N4> = <var:z> ^ <nat:4> \} \\ <var:N0> := <nat:9> ; \\ \{ <var:X> = <var:z> \land <var:N1> = <var:z> \land <var:N2> = <var:z> ^ <nat:2> \land <var:N3> = <var:z> ^ <nat:3> \land <var:N4> = <var:z> ^ <nat:4> \land <var:N0> = <nat:9> \} \\ <var:N1> := <var:N1> * <nat:2> ; \\ \{ <var:X> = <var:z> \land <var:N1> = <nat:2> * <var:z> \land <var:N2> = <var:z> ^ <nat:2> \land <var:N3> = <var:z> ^ <nat:3> \land <var:N4> = <var:z> ^ <nat:4> \land <var:N0> = <nat:9> \} \\ <var:N2> := <var:N2> * <nat:4> ; \\ \{ <var:X> = <var:z> \land <var:N1> = <nat:2> * <var:z> \land <var:N2> = <nat:4> * <var:z> ^ <nat:2> \land <var:N3> = <var:z> ^ <nat:3> \land <var:N4> = <var:z> ^ <nat:4> \land <var:N0> = <nat:9> \} \\ <var:N3> := <var:N3> * <nat:8> ; \\ \{ <var:X> = <var:z> \land <var:N1> = <nat:2> * <var:z> \land <var:N2> = <nat:4> * <var:z> ^ <nat:2> \land <var:N3> = <nat:8> * <var:z> ^ <nat:3> \land <var:N4> = <var:z> ^ <nat:4> \land <var:N0> = <nat:9> \} \\ <var:N4> := <var:N4> * <nat:5> ; \\ \{ <var:X> = <var:z> \land <var:N1> = <nat:2> * <var:z> \land <var:N2> = <nat:4> * <var:z> ^ <nat:2> \land <var:N3> = <nat:8> * <var:z> ^ <nat:3> \land <var:N4> = <nat:5> * <var:z> ^ <nat:4> \land <var:N0> = <nat:9> \} \\ <var:a> := <var:N4> \\ \{ <var:X> = <var:z> \land <var:N1> = <nat:2> * <var:z> \land <var:N2> = <nat:4> * <var:z> ^ <nat:2> \land <var:N3> = <nat:8> * <var:z> ^ <nat:3> \land <var:N0> = <nat:9> \land <var:a> = <nat:5> * <var:z> ^ <nat:4> \} \\ <var:a> := <var:a> + <var:N3> \\ \{ <var:X> = <var:z> \land <var:N1> = <nat:2> * <var:z> \land <var:N2> = <nat:4> * <var:z> ^ <nat:2> \land <var:N0> = <nat:9> \land <var:a> = <nat:5> * <var:z> ^ <nat:4> + <nat:8> * <var:z> ^ <nat:3> \} \\ <var:a> := <var:a> + <var:N2> \\ \{ <var:X> = <var:z> \land <var:N1> = <nat:2> * <var:z> \land <var:N0> = <nat:9> \land <var:a> = <nat:5> * <var:z> ^ <nat:4> + <nat:8> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:N1> \\ \{ <var:X> = <var:z> \land <var:N0> = <nat:9> \land <var:a> = <nat:5> * <var:z> ^ <nat:4> + <nat:8> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> \} \\ <var:a> := <var:a> + <var:N0> \\ \{ <var:X> = <var:z> \land <var:a> = <nat:5> * <var:z> ^ <nat:4> + <nat:8> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:9> \} \end{eqnarray} Utilizing typical Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <var:N4> : string := " <var:N4> " . Definition <def:poly> := <var:N1> := <var:X> ; <var:N2> := <var:N1> * <var:X> ; <var:N3> := <var:N2> * <var:X> ; <var:N4> := <var:N3> * <var:X> ; <var:N0> := <nat:9> ; <var:N1> := <var:N1> * <nat:2> ; <var:N2> := <var:N2> * <nat:4> ; <var:N3> := <var:N3> * <nat:8> ; <var:N4> := <var:N4> * <nat:5> ; <var:a> := <var:N4> <var:a> := <var:a> + <var:N3> <var:a> := <var:a> + <var:N2> <var:a> := <var:a> + <var:N1> <var:a> := <var:a> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:X> = <var:z> }} <def:poly> {{ <var:a> = <nat:5> * <var:z> ^ <nat:4> + <nat:8> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:N1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:N1> = <var:z> /\ <var:N2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:N1> = <var:z> /\ <var:N2> = <var:z> ^ <nat:2> /\ <var:N3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:N1> = <var:z> /\ <var:N2> = <var:z> ^ <nat:2> /\ <var:N3> = <var:z> ^ <nat:3> /\ <var:N4> = <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:N1> = <var:z> /\ <var:N2> = <var:z> ^ <nat:2> /\ <var:N3> = <var:z> ^ <nat:3> /\ <var:N4> = <var:z> ^ <nat:4> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:N1> = <nat:2> * <var:z> /\ <var:N2> = <var:z> ^ <nat:2> /\ <var:N3> = <var:z> ^ <nat:3> /\ <var:N4> = <var:z> ^ <nat:4> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:N1> = <nat:2> * <var:z> /\ <var:N2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:N3> = <var:z> ^ <nat:3> /\ <var:N4> = <var:z> ^ <nat:4> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:N1> = <nat:2> * <var:z> /\ <var:N2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:N3> = <nat:8> * <var:z> ^ <nat:3> /\ <var:N4> = <var:z> ^ <nat:4> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:N1> = <nat:2> * <var:z> /\ <var:N2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:N3> = <nat:8> * <var:z> ^ <nat:3> /\ <var:N4> = <nat:5> * <var:z> ^ <nat:4> /\ <var:N0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:N1> = <nat:2> * <var:z> /\ <var:N2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:N3> = <nat:8> * <var:z> ^ <nat:3> /\ <var:N0> = <nat:9> /\ <var:a> = <nat:5> * <var:z> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:N1> = <nat:2> * <var:z> /\ <var:N2> = <nat:4> * <var:z> ^ <nat:2> /\ <var:N0> = <nat:9> /\ <var:a> = <nat:5> * <var:z> ^ <nat:4> + <nat:8> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:N1> = <nat:2> * <var:z> /\ <var:N0> = <nat:9> /\ <var:a> = <nat:5> * <var:z> ^ <nat:4> + <nat:8> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:N0> = <nat:9> /\ <var:a> = <nat:5> * <var:z> ^ <nat:4> + <nat:8> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:z> /\ <var:a> = <nat:5> * <var:z> ^ <nat:4> + <nat:8> * <var:z> ^ <nat:3> + <nat:4> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 