\begin{document} \begin{theorem} Define the following list of commands in \emph{Imp} as follows \begin{verbatim} <var:S0> := <nat:8> ; <var:N> := <var:S0> \end{verbatim} Allow for $ <var:n> \in \mathbb{N} $ that we have $ <var:k> = <var:n> $ before executing the list of commands then we see $ <var:N> = <nat:8> $ when set of instructions has exited . \end{theorem} \begin{proof} Applying usual Hoare logic produces : \begin{eqnarray} \{ <var:k> = <var:n> \} \\ <var:S0> := <nat:8> ; \\ \{ <var:k> = <var:n> \land <var:S0> = <nat:8> \} \\ <var:N> := <var:S0> \\ \{ <var:k> = <var:n> \land <var:N> = <nat:8> \} \end{eqnarray} Considering the above , this list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Theorem <genH:poly_code_correct> : forall <var:n> : nat , {{ <var:k> = <var:n> }} <var:S0> := <nat:8> ; <var:N> := <var:S0> {{ <var:N> = <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:S0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:n> /\ <var:N> = <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 