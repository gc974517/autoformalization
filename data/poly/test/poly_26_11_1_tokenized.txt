\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:W1> := <var:F> ; <var:W2> := <var:W1> * <var:F> ; <var:W3> := <var:W2> * <var:F> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:2> ; <var:W2> := <var:W2> * <nat:1> ; <var:W3> := <var:W3> * <nat:2> ; <var:g> := <var:W3> <var:g> := <var:g> + <var:W2> <var:g> := <var:g> + <var:W1> <var:g> := <var:g> + <var:W0> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Allow that we have $ <var:F> = <var:c> $ ahead of the evaluation of this set of commands , it must be that we have $ <var:g> = <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> $ . \end{theorem} \begin{proof} Demonstrating correctness of the code can be done using typical Hoare logic . Moving forward to the next step , we have \begin{eqnarray} \{ <var:F> = <var:c> \} \, <var:W1> := <var:F> \, \{ <var:F> = <var:c> \land <var:W1> = <var:c> \} \\ \{ <var:F> = <var:c> \land <var:W1> = <var:c> \} \, <var:W2> := <var:W1> * <var:F> \, \{ <var:F> = <var:c> \land <var:W1> = <var:c> \land <var:W2> = <var:c> ^ <nat:2> \} \\ \{ <var:F> = <var:c> \land <var:W1> = <var:c> \land <var:W2> = <var:c> ^ <nat:2> \} \, <var:W3> := <var:W2> * <var:F> \, \{ <var:F> = <var:c> \land <var:W1> = <var:c> \land <var:W2> = <var:c> ^ <nat:2> \land <var:W3> = <var:c> ^ <nat:3> \} \\ \{ <var:F> = <var:c> \land <var:W1> = <var:c> \land <var:W2> = <var:c> ^ <nat:2> \land <var:W3> = <var:c> ^ <nat:3> \} \, <var:W0> := <nat:4> \, \{ <var:F> = <var:c> \land <var:W1> = <var:c> \land <var:W2> = <var:c> ^ <nat:2> \land <var:W3> = <var:c> ^ <nat:3> \land <var:W0> = <nat:4> \} \\ \{ <var:F> = <var:c> \land <var:W1> = <var:c> \land <var:W2> = <var:c> ^ <nat:2> \land <var:W3> = <var:c> ^ <nat:3> \land <var:W0> = <nat:4> \} \, <var:W1> := <var:W1> * <nat:2> \, \{ <var:F> = <var:c> \land <var:W1> = <nat:2> \cdot <var:c> \land <var:W2> = <var:c> ^ <nat:2> \land <var:W3> = <var:c> ^ <nat:3> \land <var:W0> = <nat:4> \} \\ \{ <var:F> = <var:c> \land <var:W1> = <nat:2> \cdot <var:c> \land <var:W2> = <var:c> ^ <nat:2> \land <var:W3> = <var:c> ^ <nat:3> \land <var:W0> = <nat:4> \} \, <var:W2> := <var:W2> * <nat:1> \, \{ <var:F> = <var:c> \land <var:W1> = <nat:2> \cdot <var:c> \land <var:W2> = <nat:1> \cdot <var:c> ^ <nat:2> \land <var:W3> = <var:c> ^ <nat:3> \land <var:W0> = <nat:4> \} \\ \{ <var:F> = <var:c> \land <var:W1> = <nat:2> \cdot <var:c> \land <var:W2> = <nat:1> \cdot <var:c> ^ <nat:2> \land <var:W3> = <var:c> ^ <nat:3> \land <var:W0> = <nat:4> \} \, <var:W3> := <var:W3> * <nat:2> \, \{ <var:F> = <var:c> \land <var:W1> = <nat:2> \cdot <var:c> \land <var:W2> = <nat:1> \cdot <var:c> ^ <nat:2> \land <var:W3> = <nat:2> \cdot <var:c> ^ <nat:3> \land <var:W0> = <nat:4> \} \\ \{ <var:F> = <var:c> \land <var:W1> = <nat:2> \cdot <var:c> \land <var:W2> = <nat:1> \cdot <var:c> ^ <nat:2> \land <var:W3> = <nat:2> \cdot <var:c> ^ <nat:3> \land <var:W0> = <nat:4> \} \, <var:g> := <var:W3\, \{ <var:F> = <var:c> \land <var:W1> = <nat:2> \cdot <var:c> \land <var:W2> = <nat:1> \cdot <var:c> ^ <nat:2> \land <var:W0> = <nat:4> \land <var:g> = <nat:2> \cdot <var:c> ^ <nat:3> \} \\ \{ <var:F> = <var:c> \land <var:W1> = <nat:2> \cdot <var:c> \land <var:W2> = <nat:1> \cdot <var:c> ^ <nat:2> \land <var:W0> = <nat:4> \land <var:g> = <nat:2> \cdot <var:c> ^ <nat:3> \} \, <var:g> := <var:g> + <var:W2\, \{ <var:F> = <var:c> \land <var:W1> = <nat:2> \cdot <var:c> \land <var:W0> = <nat:4> \land <var:g> = <nat:2> \cdot <var:c> ^ <nat:3> + <nat:1> \cdot <var:c> ^ <nat:2> \} \\ \{ <var:F> = <var:c> \land <var:W1> = <nat:2> \cdot <var:c> \land <var:W0> = <nat:4> \land <var:g> = <nat:2> \cdot <var:c> ^ <nat:3> + <nat:1> \cdot <var:c> ^ <nat:2> \} \, <var:g> := <var:g> + <var:W1\, \{ <var:F> = <var:c> \land <var:W0> = <nat:4> \land <var:g> = <nat:2> \cdot <var:c> ^ <nat:3> + <nat:1> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> \} \\ \{ <var:F> = <var:c> \land <var:W0> = <nat:4> \land <var:g> = <nat:2> \cdot <var:c> ^ <nat:3> + <nat:1> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> \} \, <var:g> := <var:g> + <var:W0\, \{ <var:F> = <var:c> \land <var:g> = <nat:2> \cdot <var:c> ^ <nat:3> + <nat:1> \cdot <var:c> ^ <nat:2> + <nat:2> \cdot <var:c> + <nat:4> \} \end{eqnarray} This is shown using the assignment law defined in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:W0> : string := " <var:W0> " . Definition <var:W1> : string := " <var:W1> " . Definition <var:W2> : string := " <var:W2> " . Definition <var:W3> : string := " <var:W3> " . Definition <def:poly> := <var:W1> := <var:F> ; <var:W2> := <var:W1> * <var:F> ; <var:W3> := <var:W2> * <var:F> ; <var:W0> := <nat:4> ; <var:W1> := <var:W1> * <nat:2> ; <var:W2> := <var:W2> * <nat:1> ; <var:W3> := <var:W3> * <nat:2> ; <var:g> := <var:W3> <var:g> := <var:g> + <var:W2> <var:g> := <var:g> + <var:W1> <var:g> := <var:g> + <var:W0> . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:F> = <var:c> }} <def:poly> {{ <var:g> = <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:W1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:W1> = <var:c> /\ <var:W2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:W1> = <var:c> /\ <var:W2> = <var:c> ^ <nat:2> /\ <var:W3> = <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:W1> = <var:c> /\ <var:W2> = <var:c> ^ <nat:2> /\ <var:W3> = <var:c> ^ <nat:3> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:W1> = <nat:2> * <var:c> /\ <var:W2> = <var:c> ^ <nat:2> /\ <var:W3> = <var:c> ^ <nat:3> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:W1> = <nat:2> * <var:c> /\ <var:W2> = <nat:1> * <var:c> ^ <nat:2> /\ <var:W3> = <var:c> ^ <nat:3> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:W1> = <nat:2> * <var:c> /\ <var:W2> = <nat:1> * <var:c> ^ <nat:2> /\ <var:W3> = <nat:2> * <var:c> ^ <nat:3> /\ <var:W0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:W1> = <nat:2> * <var:c> /\ <var:W2> = <nat:1> * <var:c> ^ <nat:2> /\ <var:W0> = <nat:4> /\ <var:g> = <nat:2> * <var:c> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:W1> = <nat:2> * <var:c> /\ <var:W0> = <nat:4> /\ <var:g> = <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:W0> = <nat:4> /\ <var:g> = <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:c> /\ <var:g> = <nat:2> * <var:c> ^ <nat:3> + <nat:1> * <var:c> ^ <nat:2> + <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 