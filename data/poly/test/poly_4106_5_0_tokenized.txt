\begin{document} \begin{definition} Consider a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:K0> := <nat:1> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:g> ; <var:T> := <var:K1> ; <var:T> := <var:T> + <var:K0> \end{verbatim} \end{definition} \begin{theorem} Assume , with some $ <var:R> \in \mathbb{Z}^+ $ , it to hold that $ <var:g> = <var:R> $ ahead of the evaluation of our segment of code it must be that $ <var:T> = <nat:4> \cdot <var:R> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:g> = <var:R> \} \\ <var:K0> := <nat:1> ; \\ \{ <var:g> = <var:R> \land <var:K0> = <nat:1> \} \\ <var:K1> := <nat:4> ; \\ \{ <var:g> = <var:R> \land <var:K0> = <nat:1> \land <var:K1> = <nat:4> \} \\ <var:K1> := <var:K1> * <var:g> ; \\ \{ <var:g> = <var:R> \land <var:K0> = <nat:1> \land <var:K1> = <nat:4> \cdot <var:R> \} \\ <var:T> := <var:K1> ; \\ \{ <var:g> = <var:R> \land <var:K0> = <nat:1> \land <var:T> = <nat:4> \cdot <var:R> \} \\ <var:T> := <var:T> + <var:K0> \\ \{ <var:g> = <var:R> \land <var:T> = <nat:4> \cdot <var:R> + <nat:1> \} \end{eqnarray} Applying Hoare reasoning accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <def:poly> := <var:K0> := <nat:1> ; <var:K1> := <nat:4> ; <var:K1> := <var:K1> * <var:g> ; <var:T> := <var:K1> ; <var:T> := <var:T> + <var:K0> . Theorem <genH:poly_code_correct> : forall <var:R> : nat , {{ <var:g> = <var:R> }} <def:poly> {{ <var:T> = <nat:4> * <var:R> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:K0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:K0> = <nat:1> /\ <var:K1> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:K0> = <nat:1> /\ <var:T> = <nat:4> * <var:R> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:R> /\ <var:T> = <nat:4> * <var:R> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 