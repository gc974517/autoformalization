\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:5> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:X> ; <var:T> := <var:y1> ; <var:T> := <var:T> + <var:y0> \end{verbatim} Assuming it to hold that $ <var:X> = <var:c> $ prior to evaluating this code segment , it must be that we see $ <var:T> = <nat:8> \cdot <var:c> + <nat:5> $ when list of instructions has finished executing . \end{theorem} \begin{proof} The application of usual Hoare logic gives : \begin{eqnarray} \{ <var:X> = <var:c> \} \\ <var:y0> := <nat:5> ; \\ \{ <var:X> = <var:c> \land <var:y0> = <nat:5> \} \\ <var:y1> := <nat:8> ; \\ \{ <var:X> = <var:c> \land <var:y0> = <nat:5> \land <var:y1> = <nat:8> \} \\ <var:y1> := <var:y1> * <var:X> ; \\ \{ <var:X> = <var:c> \land <var:y0> = <nat:5> \land <var:y1> = <nat:8> \times <var:c> \} \\ <var:T> := <var:y1> ; \\ \{ <var:X> = <var:c> \land <var:y0> = <nat:5> \land <var:T> = <nat:8> \times <var:c> \} \\ <var:T> := <var:T> + <var:y0> \\ \{ <var:X> = <var:c> \land <var:T> = <nat:8> \times <var:c> + <nat:5> \} \end{eqnarray} Given the above , this set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:X> = <var:c> }} <var:y0> := <nat:5> ; <var:y1> := <nat:8> ; <var:y1> := <var:y1> * <var:X> ; <var:T> := <var:y1> ; <var:T> := <var:T> + <var:y0> {{ <var:T> = <nat:8> * <var:c> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:c> /\ <var:y0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:c> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:c> /\ <var:y0> = <nat:5> /\ <var:y1> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:c> /\ <var:y0> = <nat:5> /\ <var:T> = <nat:8> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:c> /\ <var:T> = <nat:8> * <var:c> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 