\begin{document} \begin{definition} Define a list of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:a> := <nat:1> ; <var:a> := <nat:4> + <var:a> * <var:S> ; <var:a> := <nat:4> + <var:a> * <var:S> ; <var:a> := <nat:2> + <var:a> * <var:S> ; <var:a> := <nat:3> + <var:a> * <var:S> \end{verbatim} \end{definition} \begin{theorem} We define the following set of instructions <def:poly> in \emph{Imp} . Allow ( for $ <var:h> $ ) that $ <var:S> = <var:h> $ before executing this set of commands it must be that we have $ <var:a> = <nat:1> \cdot <var:h> ^ <nat:4> + <nat:4> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:3> $ after code segment is done executing . \end{theorem} \begin{proof} Demonstrating correctness of this list of instructions is demonstrated with the below decorated series of commands . \begin{eqnarray} \{ <var:S> = <var:h> \} \\ <var:a> := <nat:1> ; \\ \{ <var:S> = <var:h> \land <var:a> = <nat:1> \} \\ <var:a> := <nat:4> + <var:a> * <var:S> ; \\ \{ <var:S> = <var:h> \land <var:a> = <nat:1> \cdot <var:h> + <nat:4> \} \\ <var:a> := <nat:4> + <var:a> * <var:S> ; \\ \{ <var:S> = <var:h> \land <var:a> = <nat:1> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:4> \} \\ <var:a> := <nat:2> + <var:a> * <var:S> ; \\ \{ <var:S> = <var:h> \land <var:a> = <nat:1> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:4> \cdot <var:h> + <nat:2> \} \end{eqnarray} Furthering interpreting our series of instructions returns : \begin{eqnarray} <var:a> := <nat:3> + <var:a> * <var:S> \\ \{ <var:S> = <var:h> \land <var:a> = <nat:1> \cdot <var:h> ^ <nat:4> + <nat:4> \cdot <var:h> ^ <nat:3> + <nat:4> \cdot <var:h> ^ <nat:2> + <nat:2> \cdot <var:h> + <nat:3> \} \end{eqnarray} Using typical Hoare logic completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:a> := <nat:1> ; <var:a> := <nat:4> + <var:a> * <var:S> ; <var:a> := <nat:4> + <var:a> * <var:S> ; <var:a> := <nat:2> + <var:a> * <var:S> ; <var:a> := <nat:3> + <var:a> * <var:S> . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:S> = <var:h> }} <def:poly> {{ <var:a> = <nat:1> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:h> /\ <var:a> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:h> /\ <var:a> = <nat:1> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:h> /\ <var:a> = <nat:1> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:h> /\ <var:a> = <nat:1> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:4> * <var:h> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:h> /\ <var:a> = <nat:1> * <var:h> ^ <nat:4> + <nat:4> * <var:h> ^ <nat:3> + <nat:4> * <var:h> ^ <nat:2> + <nat:2> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 