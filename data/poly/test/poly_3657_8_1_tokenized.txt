\begin{document} \begin{theorem} Take a set of commands such that \begin{verbatim} <var:x1> := <var:Z> ; <var:x2> := <var:x1> * <var:Z> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:5> ; <var:x2> := <var:x2> * <nat:2> ; <var:s> := <var:x2> <var:s> := <var:s> + <var:x1> <var:s> := <var:s> + <var:x0> \end{verbatim} Allowing $ <var:Z> = <var:c> $ for all natural coefficients $ <var:c> $ ahead of the execution of this list of commands , then we have $ <var:s> = <nat:2> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:1> $ . \end{theorem} \begin{proof} Utilizing usual Hoare logic yields : \begin{eqnarray} \{ <var:Z> = <var:c> \} \\ <var:x1> := <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:x1> = <var:c> \} \\ <var:x2> := <var:x1> * <var:Z> ; \\ \{ <var:Z> = <var:c> \land <var:x1> = <var:c> \land <var:x2> = <var:c> ^ <nat:2> \} \\ <var:x0> := <nat:1> ; \\ \{ <var:Z> = <var:c> \land <var:x1> = <var:c> \land <var:x2> = <var:c> ^ <nat:2> \land <var:x0> = <nat:1> \} \\ <var:x1> := <var:x1> * <nat:5> ; \\ \{ <var:Z> = <var:c> \land <var:x1> = <nat:5> \cdot <var:c> \land <var:x2> = <var:c> ^ <nat:2> \land <var:x0> = <nat:1> \} \\ <var:x2> := <var:x2> * <nat:2> ; \\ \{ <var:Z> = <var:c> \land <var:x1> = <nat:5> \cdot <var:c> \land <var:x2> = <nat:2> \cdot <var:c> ^ <nat:2> \land <var:x0> = <nat:1> \} \\ <var:s> := <var:x2> \\ \{ <var:Z> = <var:c> \land <var:x1> = <nat:5> \cdot <var:c> \land <var:x0> = <nat:1> \land <var:s> = <nat:2> \cdot <var:c> ^ <nat:2> \} \\ <var:s> := <var:s> + <var:x1> \\ \{ <var:Z> = <var:c> \land <var:x0> = <nat:1> \land <var:s> = <nat:2> \cdot <var:c> ^ <nat:2> + <nat:5> \cdot <var:c> \} \\ <var:s> := <var:s> + <var:x0> \\ \{ <var:Z> = <var:c> \land <var:s> = <nat:2> \cdot <var:c> ^ <nat:2> + <nat:5> \cdot <var:c> + <nat:1> \} \end{eqnarray} As a result , the code segment is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Definition <var:x1> : string := " <var:x1> " . Definition <var:x2> : string := " <var:x2> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Z> = <var:c> }} <var:x1> := <var:Z> ; <var:x2> := <var:x1> * <var:Z> ; <var:x0> := <nat:1> ; <var:x1> := <var:x1> * <nat:5> ; <var:x2> := <var:x2> * <nat:2> ; <var:s> := <var:x2> <var:s> := <var:s> + <var:x1> <var:s> := <var:s> + <var:x0> {{ <var:s> = <nat:2> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:x1> = <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:x1> = <var:c> /\ <var:x2> = <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:x1> = <var:c> /\ <var:x2> = <var:c> ^ <nat:2> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:x1> = <nat:5> * <var:c> /\ <var:x2> = <var:c> ^ <nat:2> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:x1> = <nat:5> * <var:c> /\ <var:x2> = <nat:2> * <var:c> ^ <nat:2> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:x1> = <nat:5> * <var:c> /\ <var:x0> = <nat:1> /\ <var:s> = <nat:2> * <var:c> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:x0> = <nat:1> /\ <var:s> = <nat:2> * <var:c> ^ <nat:2> + <nat:5> * <var:c> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:c> /\ <var:s> = <nat:2> * <var:c> ^ <nat:2> + <nat:5> * <var:c> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 