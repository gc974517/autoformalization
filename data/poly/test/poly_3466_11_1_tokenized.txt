\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:R1> := <var:B> ; <var:R2> := <var:R1> * <var:B> ; <var:R3> := <var:R2> * <var:B> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:7> ; <var:R2> := <var:R2> * <nat:9> ; <var:R3> := <var:R3> * <nat:1> ; <var:z> := <var:R3> <var:z> := <var:z> + <var:R2> <var:z> := <var:z> + <var:R1> <var:z> := <var:z> + <var:R0> \end{verbatim} \end{definition} \begin{theorem} We define the following list of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:B> = <var:s> $ prior to evaluating the program it must be that we see $ <var:z> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:9> \cdot <var:s> ^ <nat:2> + <nat:7> \cdot <var:s> + <nat:4> $ . \end{theorem} \begin{proof} The argument for our code can be demonstrated using typical Hoare techniques . Advancing on , we have the variable binding line assigning $ <var:B> $ to $ <var:R1>$ . This forwards $ \{ <var:B> = <var:s> \} $ toward $ \{ <var:B> = <var:s> \land <var:R1> = <var:s> \} $ . This is shown to be logically sound using the assignment inference rule of Hoare logic . Moving on to the following piece of code contained in our set of commands , we see the assignment command giving $ <var:R1> * <var:B> $ toward $ <var:R2>$ . This advances the precondition $ \{ <var:B> = <var:s> \land <var:R1> = <var:s> \} $ as the condition $ \{ <var:B> = <var:s> \land <var:R1> = <var:s> \land <var:R2> = <var:s> ^ <nat:2> \} $ . This is sound by the assignment rule given in usual Hoare techniques . Jumping to the subsequent line of code contained in our set of instructions , the variable assignmet statement \verb | <var:R3> := <var:R2> * <var:B> ; | . This advances the condition $ \{ <var:B> = <var:s> \land <var:R1> = <var:s> \land <var:R2> = <var:s> ^ <nat:2> \} $ to the postcondition $ \{ <var:B> = <var:s> \land <var:R1> = <var:s> \land <var:R2> = <var:s> ^ <nat:2> \land <var:R3> = <var:s> ^ <nat:3> \} $ . Considering the subsequent line of code seen in the list of commands , we see the binding line \verb | <var:R0> := <nat:4> ; | . This statement redefines the condition $ \{ <var:B> = <var:s> \land <var:R1> = <var:s> \land <var:R2> = <var:s> ^ <nat:2> \land <var:R3> = <var:s> ^ <nat:3> \} $ toward the postcondition $ \{ <var:B> = <var:s> \land <var:R1> = <var:s> \land <var:R2> = <var:s> ^ <nat:2> \land <var:R3> = <var:s> ^ <nat:3> \land <var:R0> = <nat:4> \} $ . Moving on to the subsequent line of code contained in the set of instructions , we have the variable binding line yielding $ <var:R1> * <nat:7> $ to $ <var:R1>$ . This statement moves $ \{ <var:B> = <var:s> \land <var:R1> = <var:s> \land <var:R2> = <var:s> ^ <nat:2> \land <var:R3> = <var:s> ^ <nat:3> \land <var:R0> = <nat:4> \} $ toward the condition $ \{ <var:B> = <var:s> \land <var:R1> = <nat:7> \cdot <var:s> \land <var:R2> = <var:s> ^ <nat:2> \land <var:R3> = <var:s> ^ <nat:3> \land <var:R0> = <nat:4> \} $ . Taking another step toward the proceeding statement contained in our code segment , we see the variable update code \verb | <var:R2> := <var:R2> * <nat:9> ; | . This statement forwards the condition $ \{ <var:B> = <var:s> \land <var:R1> = <nat:7> \cdot <var:s> \land <var:R2> = <var:s> ^ <nat:2> \land <var:R3> = <var:s> ^ <nat:3> \land <var:R0> = <nat:4> \} $ into the postcondition $ \{ <var:B> = <var:s> \land <var:R1> = <nat:7> \cdot <var:s> \land <var:R2> = <nat:9> \cdot <var:s> ^ <nat:2> \land <var:R3> = <var:s> ^ <nat:3> \land <var:R0> = <nat:4> \} $ . This is shown through the assignment rule given by standard Hoare reasoning . Considering the proceeding piece of code contained in our code , we see the binding code giving $ <var:R3> * <nat:1> $ into $ <var:R3>$ . This line moves $ \{ <var:B> = <var:s> \land <var:R1> = <nat:7> \cdot <var:s> \land <var:R2> = <nat:9> \cdot <var:s> ^ <nat:2> \land <var:R3> = <var:s> ^ <nat:3> \land <var:R0> = <nat:4> \} $ toward the condition $ \{ <var:B> = <var:s> \land <var:R1> = <nat:7> \cdot <var:s> \land <var:R2> = <nat:9> \cdot <var:s> ^ <nat:2> \land <var:R3> = <nat:1> \cdot <var:s> ^ <nat:3> \land <var:R0> = <nat:4> \} $ . Now , the variable assignmet line \verb | <var:z> := <var:R3> | . This transfers $ \{ <var:B> = <var:s> \land <var:R1> = <nat:7> \cdot <var:s> \land <var:R2> = <nat:9> \cdot <var:s> ^ <nat:2> \land <var:R3> = <nat:1> \cdot <var:s> ^ <nat:3> \land <var:R0> = <nat:4> \} $ into the condition $ \{ <var:B> = <var:s> \land <var:R1> = <nat:7> \cdot <var:s> \land <var:R2> = <nat:9> \cdot <var:s> ^ <nat:2> \land <var:R0> = <nat:4> \land <var:z> = <nat:1> \cdot <var:s> ^ <nat:3> \} $ . This is deduced through the assignment scheme obtained from standard Hoare reasoning . Moving on to the next step , we have the variable binding code \verb | <var:z> := <var:z> + <var:R2> | . This advances the precondition $ \{ <var:B> = <var:s> \land <var:R1> = <nat:7> \cdot <var:s> \land <var:R2> = <nat:9> \cdot <var:s> ^ <nat:2> \land <var:R0> = <nat:4> \land <var:z> = <nat:1> \cdot <var:s> ^ <nat:3> \} $ to $ \{ <var:B> = <var:s> \land <var:R1> = <nat:7> \cdot <var:s> \land <var:R0> = <nat:4> \land <var:z> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:9> \cdot <var:s> ^ <nat:2> \} $ . This is known to be sound with the assignment law of standard Hoare logic . Looking at the subsequent bit of code found in the segment of code , we have the statement binding $ <var:z> + <var:R1$ as $ <var:z>$ . This command advances the precondition $ \{ <var:B> = <var:s> \land <var:R1> = <nat:7> \cdot <var:s> \land <var:R0> = <nat:4> \land <var:z> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:9> \cdot <var:s> ^ <nat:2> \} $ to $ \{ <var:B> = <var:s> \land <var:R0> = <nat:4> \land <var:z> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:9> \cdot <var:s> ^ <nat:2> + <nat:7> \cdot <var:s> \} $ . Taking a look at the proceeding line of code seen in our program , we have the assignment line yielding $ <var:z> + <var:R0$ toward $ <var:z>$ . This takes $ \{ <var:B> = <var:s> \land <var:R0> = <nat:4> \land <var:z> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:9> \cdot <var:s> ^ <nat:2> + <nat:7> \cdot <var:s> \} $ as the condition $ \{ <var:B> = <var:s> \land <var:z> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:9> \cdot <var:s> ^ <nat:2> + <nat:7> \cdot <var:s> + <nat:4> \} $ . This is deduced through the assignment rule defined by typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:R0> : string := " <var:R0> " . Definition <var:R1> : string := " <var:R1> " . Definition <var:R2> : string := " <var:R2> " . Definition <var:R3> : string := " <var:R3> " . Definition <def:poly> := <var:R1> := <var:B> ; <var:R2> := <var:R1> * <var:B> ; <var:R3> := <var:R2> * <var:B> ; <var:R0> := <nat:4> ; <var:R1> := <var:R1> * <nat:7> ; <var:R2> := <var:R2> * <nat:9> ; <var:R3> := <var:R3> * <nat:1> ; <var:z> := <var:R3> <var:z> := <var:z> + <var:R2> <var:z> := <var:z> + <var:R1> <var:z> := <var:z> + <var:R0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:B> = <var:s> }} <def:poly> {{ <var:z> = <nat:1> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:7> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:R1> = <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:R1> = <var:s> /\ <var:R2> = <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:R1> = <var:s> /\ <var:R2> = <var:s> ^ <nat:2> /\ <var:R3> = <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:R1> = <var:s> /\ <var:R2> = <var:s> ^ <nat:2> /\ <var:R3> = <var:s> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:R1> = <nat:7> * <var:s> /\ <var:R2> = <var:s> ^ <nat:2> /\ <var:R3> = <var:s> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:R1> = <nat:7> * <var:s> /\ <var:R2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:R3> = <var:s> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:R1> = <nat:7> * <var:s> /\ <var:R2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:R3> = <nat:1> * <var:s> ^ <nat:3> /\ <var:R0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:R1> = <nat:7> * <var:s> /\ <var:R2> = <nat:9> * <var:s> ^ <nat:2> /\ <var:R0> = <nat:4> /\ <var:z> = <nat:1> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:R1> = <nat:7> * <var:s> /\ <var:R0> = <nat:4> /\ <var:z> = <nat:1> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:R0> = <nat:4> /\ <var:z> = <nat:1> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:7> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:s> /\ <var:z> = <nat:1> * <var:s> ^ <nat:3> + <nat:9> * <var:s> ^ <nat:2> + <nat:7> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 