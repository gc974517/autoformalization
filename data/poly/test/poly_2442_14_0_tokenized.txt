\begin{document} \begin{definition} Let the following list of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:Z0> := <nat:5> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:r> ; <var:Z2> := <nat:8> ; <var:Z2> := <var:Z2> * <var:r> ; <var:Z2> := <var:Z2> * <var:r> ; <var:Z3> := <nat:5> ; <var:Z3> := <var:Z3> * <var:r> ; <var:Z3> := <var:Z3> * <var:r> ; <var:Z3> := <var:Z3> * <var:r> ; <var:W> := <var:Z3> ; <var:W> := <var:W> + <var:Z2> ; <var:W> := <var:W> + <var:Z1> ; <var:W> := <var:W> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Consider a code segment <def:poly> . Allowing that we have $ <var:r> = <var:E> $ --- for every positive integer coefficients $ <var:E> $ --- before executing our code segment , then $ <var:W> = <nat:5> \times <var:E> ^ <nat:3> + <nat:8> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + <nat:5> $ . \end{theorem} \begin{proof} Utilizing usual Hoare reasoning gives us : \begin{eqnarray} \{ <var:r> = <var:E> \} \\ <var:Z0> := <nat:5> ; \\ \{ <var:r> = <var:E> \land <var:Z0> = <nat:5> \} \\ <var:Z1> := <nat:1> ; \\ \{ <var:r> = <var:E> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:1> \} \\ <var:Z1> := <var:Z1> * <var:r> ; \\ \{ <var:r> = <var:E> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:1> * <var:E> \} \\ <var:Z2> := <nat:8> ; \\ \{ <var:r> = <var:E> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:1> * <var:E> \land <var:Z2> = <nat:8> \} \\ <var:Z2> := <var:Z2> * <var:r> ; \\ \{ <var:r> = <var:E> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:1> * <var:E> \land <var:Z2> = <nat:8> * <var:E> \} \\ <var:Z2> := <var:Z2> * <var:r> ; \\ \{ <var:r> = <var:E> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:1> * <var:E> \land <var:Z2> = <nat:8> * <var:E> ^ <nat:2> \} \\ <var:Z3> := <nat:5> ; \\ \{ <var:r> = <var:E> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:1> * <var:E> \land <var:Z2> = <nat:8> * <var:E> ^ <nat:2> \land <var:Z3> = <nat:5> \} \\ <var:Z3> := <var:Z3> * <var:r> ; \\ \{ <var:r> = <var:E> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:1> * <var:E> \land <var:Z2> = <nat:8> * <var:E> ^ <nat:2> \land <var:Z3> = <nat:5> * <var:E> \} \\ <var:Z3> := <var:Z3> * <var:r> ; \\ \{ <var:r> = <var:E> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:1> * <var:E> \land <var:Z2> = <nat:8> * <var:E> ^ <nat:2> \land <var:Z3> = <nat:5> * <var:E> ^ <nat:2> \} \\ <var:Z3> := <var:Z3> * <var:r> ; \\ \{ <var:r> = <var:E> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:1> * <var:E> \land <var:Z2> = <nat:8> * <var:E> ^ <nat:2> \land <var:Z3> = <nat:5> * <var:E> ^ <nat:3> \} \\ <var:W> := <var:Z3> ; \\ \{ <var:r> = <var:E> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:1> * <var:E> \land <var:Z2> = <nat:8> * <var:E> ^ <nat:2> \land <var:W> = <nat:5> * <var:E> ^ <nat:3> \} \\ <var:W> := <var:W> + <var:Z2> ; \\ \{ <var:r> = <var:E> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:1> * <var:E> \land <var:W> = <nat:5> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> \} \\ <var:W> := <var:W> + <var:Z1> ; \\ \{ <var:r> = <var:E> \land <var:Z0> = <nat:5> \land <var:W> = <nat:5> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:1> * <var:E> \} \\ <var:W> := <var:W> + <var:Z0> \\ \{ <var:r> = <var:E> \land <var:W> = <nat:5> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:5> \} \end{eqnarray} As a consequence , the series of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z0> := <nat:5> ; <var:Z1> := <nat:1> ; <var:Z1> := <var:Z1> * <var:r> ; <var:Z2> := <nat:8> ; <var:Z2> := <var:Z2> * <var:r> ; <var:Z2> := <var:Z2> * <var:r> ; <var:Z3> := <nat:5> ; <var:Z3> := <var:Z3> * <var:r> ; <var:Z3> := <var:Z3> * <var:r> ; <var:Z3> := <var:Z3> * <var:r> ; <var:W> := <var:Z3> ; <var:W> := <var:W> + <var:Z2> ; <var:W> := <var:W> + <var:Z1> ; <var:W> := <var:W> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:r> = <var:E> }} <def:poly> {{ <var:W> = <nat:5> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:1> * <var:E> /\ <var:Z2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:1> * <var:E> /\ <var:Z2> = <nat:8> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:1> * <var:E> /\ <var:Z2> = <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:1> * <var:E> /\ <var:Z2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:Z3> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:1> * <var:E> /\ <var:Z2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:Z3> = <nat:5> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:1> * <var:E> /\ <var:Z2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:Z3> = <nat:5> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:1> * <var:E> /\ <var:Z2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:Z3> = <nat:5> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:1> * <var:E> /\ <var:Z2> = <nat:8> * <var:E> ^ <nat:2> /\ <var:W> = <nat:5> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:1> * <var:E> /\ <var:W> = <nat:5> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:Z0> = <nat:5> /\ <var:W> = <nat:5> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:E> /\ <var:W> = <nat:5> * <var:E> ^ <nat:3> + <nat:8> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 