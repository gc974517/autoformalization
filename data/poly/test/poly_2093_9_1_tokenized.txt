\begin{document} \begin{theorem} Consider a series of instructions as follows \begin{verbatim} <var:m1> := <var:i> ; <var:m2> := <var:m1> * <var:i> ; <var:m3> := <var:m2> * <var:i> ; <var:m0> := <nat:4> ; <var:m2> := <var:m2> * <nat:3> ; <var:m3> := <var:m3> * <nat:3> ; <var:n> := <var:m3> <var:n> := <var:n> + <var:m2> <var:n> := <var:n> + <var:m0> \end{verbatim} Given that $ <var:i> = <var:T> $ ( taking positive integer coefficients $ <var:T> $ ) before the execution of the code , it must be that $ <var:n> = <nat:3> \times <var:T> ^ <nat:3> + <nat:3> \times <var:T> ^ <nat:2> + <nat:4> $ . \end{theorem} \begin{proof} Note that the following decorated series of instructions . \begin{eqnarray} \{ <var:i> = <var:T> \} \\ <var:m1> := <var:i> ; \\ \{ <var:i> = <var:T> \land <var:m1> = <var:T> \} \\ <var:m2> := <var:m1> * <var:i> ; \\ \{ <var:i> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <var:T> ^ <nat:2> \} \\ <var:m3> := <var:m2> * <var:i> ; \\ \{ <var:i> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <var:T> ^ <nat:2> \land <var:m3> = <var:T> ^ <nat:3> \} \\ <var:m0> := <nat:4> ; \\ \{ <var:i> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <var:T> ^ <nat:2> \land <var:m3> = <var:T> ^ <nat:3> \land <var:m0> = <nat:4> \} \\ <var:m2> := <var:m2> * <nat:3> ; \\ \{ <var:i> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <nat:3> \times <var:T> ^ <nat:2> \land <var:m3> = <var:T> ^ <nat:3> \land <var:m0> = <nat:4> \} \end{eqnarray} Advancing interpreting this set of instructions gives us : \begin{eqnarray} <var:m3> := <var:m3> * <nat:3> ; \\ \{ <var:i> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <nat:3> \times <var:T> ^ <nat:2> \land <var:m3> = <nat:3> \times <var:T> ^ <nat:3> \land <var:m0> = <nat:4> \} \\ <var:n> := <var:m3> \\ \{ <var:i> = <var:T> \land <var:m1> = <var:T> \land <var:m2> = <nat:3> \times <var:T> ^ <nat:2> \land <var:m0> = <nat:4> \land <var:n> = <nat:3> \times <var:T> ^ <nat:3> \} \\ <var:n> := <var:n> + <var:m2> \\ \{ <var:i> = <var:T> \land <var:m1> = <var:T> \land <var:m0> = <nat:4> \land <var:n> = <nat:3> \times <var:T> ^ <nat:3> + <nat:3> \times <var:T> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:m0> \\ \{ <var:i> = <var:T> \land <var:n> = <nat:3> \times <var:T> ^ <nat:3> + <nat:3> \times <var:T> ^ <nat:2> + <nat:4> \} \end{eqnarray} The application of Hoare reasoning completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:i> = <var:T> }} <var:m1> := <var:i> ; <var:m2> := <var:m1> * <var:i> ; <var:m3> := <var:m2> * <var:i> ; <var:m0> := <nat:4> ; <var:m2> := <var:m2> * <nat:3> ; <var:m3> := <var:m3> * <nat:3> ; <var:n> := <var:m3> <var:n> := <var:n> + <var:m2> <var:n> := <var:n> + <var:m0> {{ <var:n> = <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:m1> = <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:m1> = <var:T> /\ <var:m2> = <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:m1> = <var:T> /\ <var:m2> = <var:T> ^ <nat:2> /\ <var:m3> = <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:m1> = <var:T> /\ <var:m2> = <var:T> ^ <nat:2> /\ <var:m3> = <var:T> ^ <nat:3> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:m1> = <var:T> /\ <var:m2> = <nat:3> * <var:T> ^ <nat:2> /\ <var:m3> = <var:T> ^ <nat:3> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:m1> = <var:T> /\ <var:m2> = <nat:3> * <var:T> ^ <nat:2> /\ <var:m3> = <nat:3> * <var:T> ^ <nat:3> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:m1> = <var:T> /\ <var:m2> = <nat:3> * <var:T> ^ <nat:2> /\ <var:m0> = <nat:4> /\ <var:n> = <nat:3> * <var:T> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:m1> = <var:T> /\ <var:m0> = <nat:4> /\ <var:n> = <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:T> /\ <var:n> = <nat:3> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 