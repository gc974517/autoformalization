\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:r1> := <var:A> ; <var:r2> := <var:r1> * <var:A> ; <var:r0> := <nat:4> ; <var:r2> := <var:r2> * <nat:2> ; <var:a> := <var:r2> <var:a> := <var:a> + <var:r0> \end{verbatim} \end{definition} \begin{theorem} Assume it to hold that $ <var:A> = <var:y> $ prior to evaluating this code segment it must be that we see $ <var:a> = <nat:2> \times <var:y> ^ <nat:2> + <nat:4> $ once segment of code has finished . \end{theorem} \begin{proof} The proof of our code can be demonstrated with standard Hoare techniques . Immediately after , \[ \begin{tabular} {rcl} \{ <var:A> = <var:y> \} & <var:r1> := <var:A> & \{ <var:A> = <var:y> \land <var:r1> = <var:y> \} \\ \{ <var:A> = <var:y> \land <var:r1> = <var:y> \} & <var:r2> := <var:r1> * <var:A> & \{ <var:A> = <var:y> \land <var:r1> = <var:y> \land <var:r2> = <var:y> ^ <nat:2> \} \\ \{ <var:A> = <var:y> \land <var:r1> = <var:y> \land <var:r2> = <var:y> ^ <nat:2> \} & <var:r0> := <nat:4> & \{ <var:A> = <var:y> \land <var:r1> = <var:y> \land <var:r2> = <var:y> ^ <nat:2> \land <var:r0> = <nat:4> \} \end{tabular} This is ensured with the scheme from typical Hoare techniques . Moving on , we see \[ \begin{tabular} {rcl} \{ <var:A> = <var:y> \} & <var:r1> := <var:A> & \{ <var:A> = <var:y> \land <var:r1> = <var:y> \} \end{tabular} Stepping through , \[ \begin{tabular} {rcl} \{ <var:A> = <var:y> \} & <var:r1> := <var:A> & \{ <var:A> = <var:y> \land <var:r1> = <var:y> \} \end{tabular} This is known to be sound through the assignment scheme of standard Hoare logic . Observing the subsequent statement in our set of instructions , \[ \begin{tabular} {rcl} \{ <var:A> = <var:y> \} & <var:r1> := <var:A> & \{ <var:A> = <var:y> \land <var:r1> = <var:y> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r2> : string := " <var:r2> " . Definition <def:poly> := <var:r1> := <var:A> ; <var:r2> := <var:r1> * <var:A> ; <var:r0> := <nat:4> ; <var:r2> := <var:r2> * <nat:2> ; <var:a> := <var:r2> <var:a> := <var:a> + <var:r0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:A> = <var:y> }} <def:poly> {{ <var:a> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:r1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:r1> = <var:y> /\ <var:r2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:r1> = <var:y> /\ <var:r2> = <var:y> ^ <nat:2> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:r1> = <var:y> /\ <var:r2> = <nat:2> * <var:y> ^ <nat:2> /\ <var:r0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:r1> = <var:y> /\ <var:r0> = <nat:4> /\ <var:a> = <nat:2> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:A> = <var:y> /\ <var:a> = <nat:2> * <var:y> ^ <nat:2> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 