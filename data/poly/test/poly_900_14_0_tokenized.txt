\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:U0> := <nat:3> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:N> ; <var:U2> := <nat:3> ; <var:U2> := <var:U2> * <var:N> ; <var:U2> := <var:U2> * <var:N> ; <var:U3> := <nat:6> ; <var:U3> := <var:U3> * <var:N> ; <var:U3> := <var:U3> * <var:N> ; <var:U3> := <var:U3> * <var:N> ; <var:y> := <var:U3> ; <var:y> := <var:y> + <var:U2> ; <var:y> := <var:y> + <var:U1> ; <var:y> := <var:y> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} We define a set of commands <def:poly> . Assume that we have $ <var:N> = <var:s> $ for natural numbers $ <var:s> $ prior to executing this segment of code , then we have $ <var:y> = <nat:6> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:3> $ after set of instructions has executed . \end{theorem} \begin{proof} The application of usual Hoare techniques results in : \begin{eqnarray} \{ <var:N> = <var:s> \} \\ <var:U0> := <nat:3> ; \\ \{ <var:N> = <var:s> \land <var:U0> = <nat:3> \} \\ <var:U1> := <nat:3> ; \\ \{ <var:N> = <var:s> \land <var:U0> = <nat:3> \land <var:U1> = <nat:3> \} \\ <var:U1> := <var:U1> * <var:N> ; \\ \{ <var:N> = <var:s> \land <var:U0> = <nat:3> \land <var:U1> = <nat:3> * <var:s> \} \\ <var:U2> := <nat:3> ; \\ \{ <var:N> = <var:s> \land <var:U0> = <nat:3> \land <var:U1> = <nat:3> * <var:s> \land <var:U2> = <nat:3> \} \\ <var:U2> := <var:U2> * <var:N> ; \\ \{ <var:N> = <var:s> \land <var:U0> = <nat:3> \land <var:U1> = <nat:3> * <var:s> \land <var:U2> = <nat:3> * <var:s> \} \\ <var:U2> := <var:U2> * <var:N> ; \\ \{ <var:N> = <var:s> \land <var:U0> = <nat:3> \land <var:U1> = <nat:3> * <var:s> \land <var:U2> = <nat:3> * <var:s> ^ <nat:2> \} \\ <var:U3> := <nat:6> ; \\ \{ <var:N> = <var:s> \land <var:U0> = <nat:3> \land <var:U1> = <nat:3> * <var:s> \land <var:U2> = <nat:3> * <var:s> ^ <nat:2> \land <var:U3> = <nat:6> \} \\ <var:U3> := <var:U3> * <var:N> ; \\ \{ <var:N> = <var:s> \land <var:U0> = <nat:3> \land <var:U1> = <nat:3> * <var:s> \land <var:U2> = <nat:3> * <var:s> ^ <nat:2> \land <var:U3> = <nat:6> * <var:s> \} \\ <var:U3> := <var:U3> * <var:N> ; \\ \{ <var:N> = <var:s> \land <var:U0> = <nat:3> \land <var:U1> = <nat:3> * <var:s> \land <var:U2> = <nat:3> * <var:s> ^ <nat:2> \land <var:U3> = <nat:6> * <var:s> ^ <nat:2> \} \\ <var:U3> := <var:U3> * <var:N> ; \\ \{ <var:N> = <var:s> \land <var:U0> = <nat:3> \land <var:U1> = <nat:3> * <var:s> \land <var:U2> = <nat:3> * <var:s> ^ <nat:2> \land <var:U3> = <nat:6> * <var:s> ^ <nat:3> \} \end{eqnarray} Furthering running this code segment results in : \begin{eqnarray} <var:y> := <var:U3> ; \\ \{ <var:N> = <var:s> \land <var:U0> = <nat:3> \land <var:U1> = <nat:3> * <var:s> \land <var:U2> = <nat:3> * <var:s> ^ <nat:2> \land <var:y> = <nat:6> * <var:s> ^ <nat:3> \} \\ <var:y> := <var:y> + <var:U2> ; \\ \{ <var:N> = <var:s> \land <var:U0> = <nat:3> \land <var:U1> = <nat:3> * <var:s> \land <var:y> = <nat:6> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:U1> ; \\ \{ <var:N> = <var:s> \land <var:U0> = <nat:3> \land <var:y> = <nat:6> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> \} \\ <var:y> := <var:y> + <var:U0> \\ \{ <var:N> = <var:s> \land <var:y> = <nat:6> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> \} \end{eqnarray} Therefore , the segment of code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <var:U2> : string := " <var:U2> " . Definition <var:U3> : string := " <var:U3> " . Definition <def:poly> := <var:U0> := <nat:3> ; <var:U1> := <nat:3> ; <var:U1> := <var:U1> * <var:N> ; <var:U2> := <nat:3> ; <var:U2> := <var:U2> * <var:N> ; <var:U2> := <var:U2> * <var:N> ; <var:U3> := <nat:6> ; <var:U3> := <var:U3> * <var:N> ; <var:U3> := <var:U3> * <var:N> ; <var:U3> := <var:U3> * <var:N> ; <var:y> := <var:U3> ; <var:y> := <var:y> + <var:U2> ; <var:y> := <var:y> + <var:U1> ; <var:y> := <var:y> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:N> = <var:s> }} <def:poly> {{ <var:y> = <nat:6> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:U0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:3> * <var:s> /\ <var:U2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:3> * <var:s> /\ <var:U2> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:3> * <var:s> /\ <var:U2> = <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:3> * <var:s> /\ <var:U2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:U3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:3> * <var:s> /\ <var:U2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:U3> = <nat:6> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:3> * <var:s> /\ <var:U2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:U3> = <nat:6> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:3> * <var:s> /\ <var:U2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:U3> = <nat:6> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:3> * <var:s> /\ <var:U2> = <nat:3> * <var:s> ^ <nat:2> /\ <var:y> = <nat:6> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:U0> = <nat:3> /\ <var:U1> = <nat:3> * <var:s> /\ <var:y> = <nat:6> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:U0> = <nat:3> /\ <var:y> = <nat:6> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:N> = <var:s> /\ <var:y> = <nat:6> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 