\begin{document} \begin{theorem} Take the following list of instructions in \emph{Imp} such that \begin{verbatim} <var:K0> := <nat:9> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:g> ; <var:H> := <var:K1> ; <var:H> := <var:H> + <var:K0> \end{verbatim} Assuming with some $ <var:Z> \in \mathbb{N} $ it to be that $ <var:g> = <var:Z> $ ahead of the evaluation of the list of commands , it must be that we see $ <var:H> = <nat:6> * <var:Z> + <nat:9> $ when list of commands has exited . \end{theorem} \begin{proof} Using typical Hoare logic results in : \begin{eqnarray} \{ <var:g> = <var:Z> \} \\ <var:K0> := <nat:9> ; \\ \{ <var:g> = <var:Z> \land <var:K0> = <nat:9> \} \\ <var:K1> := <nat:6> ; \\ \{ <var:g> = <var:Z> \land <var:K0> = <nat:9> \land <var:K1> = <nat:6> \} \\ <var:K1> := <var:K1> * <var:g> ; \\ \{ <var:g> = <var:Z> \land <var:K0> = <nat:9> \land <var:K1> = <nat:6> \times <var:Z> \} \\ <var:H> := <var:K1> ; \\ \{ <var:g> = <var:Z> \land <var:K0> = <nat:9> \land <var:H> = <nat:6> \times <var:Z> \} \\ <var:H> := <var:H> + <var:K0> \\ \{ <var:g> = <var:Z> \land <var:H> = <nat:6> \times <var:Z> + <nat:9> \} \end{eqnarray} Thusly , the series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Theorem <genH:poly_code_correct> : forall <var:Z> : nat , {{ <var:g> = <var:Z> }} <var:K0> := <nat:9> ; <var:K1> := <nat:6> ; <var:K1> := <var:K1> * <var:g> ; <var:H> := <var:K1> ; <var:H> := <var:H> + <var:K0> {{ <var:H> = <nat:6> * <var:Z> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:K0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:K0> = <nat:9> /\ <var:K1> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:K0> = <nat:9> /\ <var:H> = <nat:6> * <var:Z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:Z> /\ <var:H> = <nat:6> * <var:Z> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 