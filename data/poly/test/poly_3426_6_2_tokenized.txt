\begin{document} \begin{definition} Take a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:X> := <nat:4> ; <var:X> := <var:X> * <var:n> ; <var:X> := <nat:4> + <var:X> * <var:n> ; <var:X> := <nat:3> + <var:X> * <var:n> ; <var:X> := <nat:2> + <var:X> * <var:n> ; <var:X> := <nat:1> + <var:X> * <var:n> \end{verbatim} \end{definition} \begin{theorem} Allowing it to be that $ <var:n> = <var:T> $ ahead of evaluating the code , it follows that we see $ <var:X> = <nat:4> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our list of commands can be shown using standard Hoare logic . Immediately after , the binding statement defining $ <nat:4> $ into $ <var:X>$ . This line moves $ \{ <var:n> = <var:T> \} $ as $ \{ <var:n> = <var:T> \land <var:X> = <nat:4> \} $ . This is known to be sound through the assignment scheme obtained from standard Hoare techniques . Advancing to the upcoming step contained in our series of commands , the command \verb | <var:X> := <var:X> * <var:n> ; | . This command moves the precondition $ \{ <var:n> = <var:T> \land <var:X> = <nat:4> \} $ to $ \{ <var:n> = <var:T> \land <var:X> = <nat:4> * <var:T> + \} $ . This is deduced using the assignment law found in usual Hoare reasoning . Advancing to the upcoming statement contained in our series of instructions , we see the variable assignmet statement \verb | <var:X> := <nat:4> + <var:X> * <var:n> ; | . This code redefines the condition $ \{ <var:n> = <var:T> \land <var:X> = <nat:4> * <var:T> + \} $ into $ \{ <var:n> = <var:T> \land <var:X> = <nat:4> * <var:T> ^ <nat:2> + <nat:4> \} $ . This is ensured using the assignment law found in typical Hoare techniques . Stepping forward , we have the variable update line \verb | <var:X> := <nat:3> + <var:X> * <var:n> ; | . This redefines the condition $ \{ <var:n> = <var:T> \land <var:X> = <nat:4> * <var:T> ^ <nat:2> + <nat:4> \} $ into the condition $ \{ <var:n> = <var:T> \land <var:X> = <nat:4> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:3> \} $ . This is deduced through the assignment scheme from standard Hoare logic . Taking another step toward the next line found in the series of commands , we have the variable assignmet code letting $ <nat:2> + <var:X> * <var:n> $ to $ <var:X>$ . This statement forwards the precondition $ \{ <var:n> = <var:T> \land <var:X> = <nat:4> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:3> \} $ as $ \{ <var:n> = <var:T> \land <var:X> = <nat:4> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:2> \} $ . This is shown to be logically sound using the assignment scheme given by typical Hoare logic . Immediately after , the environment update command letting $ <nat:1> + <var:X> * <var:n$ as $ <var:X>$ . This transfers the condition $ \{ <var:n> = <var:T> \land <var:X> = <nat:4> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:2> \} $ toward the condition $ \{ <var:n> = <var:T> \land <var:X> = <nat:4> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:X> := <nat:4> ; <var:X> := <var:X> * <var:n> ; <var:X> := <nat:4> + <var:X> * <var:n> ; <var:X> := <nat:3> + <var:X> * <var:n> ; <var:X> := <nat:2> + <var:X> * <var:n> ; <var:X> := <nat:1> + <var:X> * <var:n> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:n> = <var:T> }} <def:poly> {{ <var:X> = <nat:4> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:X> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:X> = <nat:4> * <var:T> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:X> = <nat:4> * <var:T> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:X> = <nat:4> * <var:T> ^ <nat:3> + <nat:4> * <var:T> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:X> = <nat:4> * <var:T> ^ <nat:4> + <nat:4> * <var:T> ^ <nat:2> + <nat:3> * <var:T> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:T> /\ <var:X> = <nat:4> * <var:T> ^ <nat:5> + <nat:4> * <var:T> ^ <nat:3> + <nat:3> * <var:T> ^ <nat:2> + <nat:2> * <var:T> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 