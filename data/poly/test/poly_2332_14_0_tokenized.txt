\begin{document} \begin{definition} Consider a series of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:8> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:R> ; <var:G2> := <nat:2> ; <var:G2> := <var:G2> * <var:R> ; <var:G2> := <var:G2> * <var:R> ; <var:G3> := <nat:1> ; <var:G3> := <var:G3> * <var:R> ; <var:G3> := <var:G3> * <var:R> ; <var:G3> := <var:G3> * <var:R> ; <var:k> := <var:G3> ; <var:k> := <var:k> + <var:G2> ; <var:k> := <var:k> + <var:G1> ; <var:k> := <var:k> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Allow that $ <var:R> = <var:Q> $ ( for every natural coefficients $ <var:Q> $ ) prior to the execution of our code segment it must be that we see $ <var:k> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:8> $ after series of instructions is done . \end{theorem} \begin{proof} The argument for this series of commands is accomplished with the below decorated set of instructions . \begin{eqnarray} \{ <var:R> = <var:Q> \} \\ <var:G0> := <nat:8> ; \\ \{ <var:R> = <var:Q> \land <var:G0> = <nat:8> \} \\ <var:G1> := <nat:6> ; \\ \{ <var:R> = <var:Q> \land <var:G0> = <nat:8> \land <var:G1> = <nat:6> \} \\ <var:G1> := <var:G1> * <var:R> ; \\ \{ <var:R> = <var:Q> \land <var:G0> = <nat:8> \land <var:G1> = <nat:6> * <var:Q> \} \\ <var:G2> := <nat:2> ; \\ \{ <var:R> = <var:Q> \land <var:G0> = <nat:8> \land <var:G1> = <nat:6> * <var:Q> \land <var:G2> = <nat:2> \} \\ <var:G2> := <var:G2> * <var:R> ; \\ \{ <var:R> = <var:Q> \land <var:G0> = <nat:8> \land <var:G1> = <nat:6> * <var:Q> \land <var:G2> = <nat:2> * <var:Q> \} \\ <var:G2> := <var:G2> * <var:R> ; \\ \{ <var:R> = <var:Q> \land <var:G0> = <nat:8> \land <var:G1> = <nat:6> * <var:Q> \land <var:G2> = <nat:2> * <var:Q> ^ <nat:2> \} \\ <var:G3> := <nat:1> ; \\ \{ <var:R> = <var:Q> \land <var:G0> = <nat:8> \land <var:G1> = <nat:6> * <var:Q> \land <var:G2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:G3> = <nat:1> \} \\ <var:G3> := <var:G3> * <var:R> ; \\ \{ <var:R> = <var:Q> \land <var:G0> = <nat:8> \land <var:G1> = <nat:6> * <var:Q> \land <var:G2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:G3> = <nat:1> * <var:Q> \} \\ <var:G3> := <var:G3> * <var:R> ; \\ \{ <var:R> = <var:Q> \land <var:G0> = <nat:8> \land <var:G1> = <nat:6> * <var:Q> \land <var:G2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:G3> = <nat:1> * <var:Q> ^ <nat:2> \} \\ <var:G3> := <var:G3> * <var:R> ; \\ \{ <var:R> = <var:Q> \land <var:G0> = <nat:8> \land <var:G1> = <nat:6> * <var:Q> \land <var:G2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:G3> = <nat:1> * <var:Q> ^ <nat:3> \} \\ <var:k> := <var:G3> ; \\ \{ <var:R> = <var:Q> \land <var:G0> = <nat:8> \land <var:G1> = <nat:6> * <var:Q> \land <var:G2> = <nat:2> * <var:Q> ^ <nat:2> \land <var:k> = <nat:1> * <var:Q> ^ <nat:3> \} \\ <var:k> := <var:k> + <var:G2> ; \\ \{ <var:R> = <var:Q> \land <var:G0> = <nat:8> \land <var:G1> = <nat:6> * <var:Q> \land <var:k> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> \} \\ <var:k> := <var:k> + <var:G1> ; \\ \{ <var:R> = <var:Q> \land <var:G0> = <nat:8> \land <var:k> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> \} \\ <var:k> := <var:k> + <var:G0> \\ \{ <var:R> = <var:Q> \land <var:k> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:8> \} \end{eqnarray} Using Hoare logic solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Definition <def:poly> := <var:G0> := <nat:8> ; <var:G1> := <nat:6> ; <var:G1> := <var:G1> * <var:R> ; <var:G2> := <nat:2> ; <var:G2> := <var:G2> * <var:R> ; <var:G2> := <var:G2> * <var:R> ; <var:G3> := <nat:1> ; <var:G3> := <var:G3> * <var:R> ; <var:G3> := <var:G3> * <var:R> ; <var:G3> := <var:G3> * <var:R> ; <var:k> := <var:G3> ; <var:k> := <var:k> + <var:G2> ; <var:k> := <var:k> + <var:G1> ; <var:k> := <var:k> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:R> = <var:Q> }} <def:poly> {{ <var:k> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:G0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:6> * <var:Q> /\ <var:G2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:6> * <var:Q> /\ <var:G2> = <nat:2> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:6> * <var:Q> /\ <var:G2> = <nat:2> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:6> * <var:Q> /\ <var:G2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:G3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:6> * <var:Q> /\ <var:G2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:6> * <var:Q> /\ <var:G2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:6> * <var:Q> /\ <var:G2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:G3> = <nat:1> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:6> * <var:Q> /\ <var:G2> = <nat:2> * <var:Q> ^ <nat:2> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:G0> = <nat:8> /\ <var:G1> = <nat:6> * <var:Q> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:G0> = <nat:8> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:Q> /\ <var:k> = <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:6> * <var:Q> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 