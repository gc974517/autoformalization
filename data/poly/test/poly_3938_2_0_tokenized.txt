\begin{document} \begin{theorem} Let the following code : \begin{verbatim} <var:m0> := <nat:7> ; <var:a> := <var:m0> \end{verbatim} Allow it to be that $ <var:Z> = <var:x> $ prior to running this list of instructions then $ <var:a> = <nat:7> $ once list of commands is done . \end{theorem} \begin{proof} See that the following decorated set of instructions . \begin{eqnarray} \{ <var:Z> = <var:x> \} \\ <var:m0> := <nat:7> ; \\ \{ <var:Z> = <var:x> \land <var:m0> = <nat:7> \} \\ <var:a> := <var:m0> \\ \{ <var:Z> = <var:x> \land <var:a> = <nat:7> \} \end{eqnarray} Using Hoare logic accomplishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:Z> = <var:x> }} <var:m0> := <nat:7> ; <var:a> := <var:m0> {{ <var:a> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:m0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:x> /\ <var:a> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 