\begin{document} \begin{definition} Let the following code <def:poly> in \emph{Imp} : \begin{verbatim} <var:y0> := <nat:7> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:f> ; <var:y2> := <nat:9> ; <var:y2> := <var:y2> * <var:f> ; <var:y2> := <var:y2> * <var:f> ; <var:i> := <var:y2> ; <var:i> := <var:i> + <var:y1> ; <var:i> := <var:i> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Consider the following segment of code <def:poly> in \emph{Imp} . Allowing that we have $ <var:f> = <var:l> $ ahead of evaluating the code , it holds that $ <var:i> = <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:7> $ when segment of code has finished . \end{theorem} \begin{proof} Using usual Hoare logic gives us : \begin{eqnarray} \{ <var:f> = <var:l> \} \\ <var:y0> := <nat:7> ; \\ \{ <var:f> = <var:l> \land <var:y0> = <nat:7> \} \\ <var:y1> := <nat:2> ; \\ \{ <var:f> = <var:l> \land <var:y0> = <nat:7> \land <var:y1> = <nat:2> \} \\ <var:y1> := <var:y1> * <var:f> ; \\ \{ <var:f> = <var:l> \land <var:y0> = <nat:7> \land <var:y1> = <nat:2> * <var:l> \} \\ <var:y2> := <nat:9> ; \\ \{ <var:f> = <var:l> \land <var:y0> = <nat:7> \land <var:y1> = <nat:2> * <var:l> \land <var:y2> = <nat:9> \} \\ <var:y2> := <var:y2> * <var:f> ; \\ \{ <var:f> = <var:l> \land <var:y0> = <nat:7> \land <var:y1> = <nat:2> * <var:l> \land <var:y2> = <nat:9> * <var:l> \} \\ <var:y2> := <var:y2> * <var:f> ; \\ \{ <var:f> = <var:l> \land <var:y0> = <nat:7> \land <var:y1> = <nat:2> * <var:l> \land <var:y2> = <nat:9> * <var:l> ^ <nat:2> \} \\ <var:i> := <var:y2> ; \\ \{ <var:f> = <var:l> \land <var:y0> = <nat:7> \land <var:y1> = <nat:2> * <var:l> \land <var:i> = <nat:9> * <var:l> ^ <nat:2> \} \\ <var:i> := <var:i> + <var:y1> ; \\ \{ <var:f> = <var:l> \land <var:y0> = <nat:7> \land <var:i> = <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> \} \\ <var:i> := <var:i> + <var:y0> \\ \{ <var:f> = <var:l> \land <var:i> = <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:7> \} \end{eqnarray} As a consequence , the program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <def:poly> := <var:y0> := <nat:7> ; <var:y1> := <nat:2> ; <var:y1> := <var:y1> * <var:f> ; <var:y2> := <nat:9> ; <var:y2> := <var:y2> * <var:f> ; <var:y2> := <var:y2> * <var:f> ; <var:i> := <var:y2> ; <var:i> := <var:i> + <var:y1> ; <var:i> := <var:i> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:f> = <var:l> }} <def:poly> {{ <var:i> = <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:y0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:2> * <var:l> /\ <var:y2> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:2> * <var:l> /\ <var:y2> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:2> * <var:l> /\ <var:y2> = <nat:9> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:y0> = <nat:7> /\ <var:y1> = <nat:2> * <var:l> /\ <var:i> = <nat:9> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:y0> = <nat:7> /\ <var:i> = <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:i> = <nat:9> * <var:l> ^ <nat:2> + <nat:2> * <var:l> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 