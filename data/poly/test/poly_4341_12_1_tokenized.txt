\begin{document} \begin{theorem} Consider the following code segment : \begin{verbatim} <var:L1> := <var:P> ; <var:L2> := <var:L1> * <var:P> ; <var:L3> := <var:L2> * <var:P> ; <var:L4> := <var:L3> * <var:P> ; <var:L0> := <nat:3> ; <var:L2> := <var:L2> * <nat:8> ; <var:L3> := <var:L3> * <nat:5> ; <var:L4> := <var:L4> * <nat:8> ; <var:A> := <var:L4> <var:A> := <var:A> + <var:L3> <var:A> := <var:A> + <var:L2> <var:A> := <var:A> + <var:L0> \end{verbatim} Allowing $ <var:P> = <var:d> $ ( given every $ <var:d> $ ) before running the list of commands , it must be that we see $ <var:A> = <nat:8> \cdot <var:d> ^ <nat:4> + <nat:5> \cdot <var:d> ^ <nat:3> + <nat:8> \cdot <var:d> ^ <nat:2> + <nat:3> $ . \end{theorem} \begin{proof} The flow of logic for our list of instructions can be given with usual Hoare techniques . Moving on to the upcoming steps found in the program , \verb | { <var:P> = <var:d> } <var:L1> := <var:P> { <var:P> = <var:d> \land <var:L1> = <var:d> } | , \verb | { <var:P> = <var:d> \land <var:L1> = <var:d> } <var:L2> := <var:L1> * <var:P> { <var:P> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> } | and \verb | { <var:P> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> } <var:L3> := <var:L2> * <var:P> { <var:P> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> \land <var:L3> = <var:d> ^ <nat:3> } | . Honing in on the subsequent statements contained in the set of commands , we see \verb | { <var:P> = <var:d> } <var:L1> := <var:P> { <var:P> = <var:d> \land <var:L1> = <var:d> } | and \verb | { <var:P> = <var:d> \land <var:L1> = <var:d> } <var:L2> := <var:L1> * <var:P> { <var:P> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> } | . Advancing on , we have \verb | { <var:P> = <var:d> } <var:L1> := <var:P> { <var:P> = <var:d> \land <var:L1> = <var:d> } | , \verb | { <var:P> = <var:d> \land <var:L1> = <var:d> } <var:L2> := <var:L1> * <var:P> { <var:P> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> } | , \verb | { <var:P> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> } <var:L3> := <var:L2> * <var:P> { <var:P> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> \land <var:L3> = <var:d> ^ <nat:3> } | and \verb | { <var:P> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> \land <var:L3> = <var:d> ^ <nat:3> } <var:L4> := <var:L3> * <var:P> { <var:P> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> \land <var:L3> = <var:d> ^ <nat:3> \land <var:L4> = <var:d> ^ <nat:4> } | . This is shown through the variable binding law from usual Hoare techniques . Taking a look at the subsequent steps in the list of instructions , we have \verb | { <var:P> = <var:d> } <var:L1> := <var:P> { <var:P> = <var:d> \land <var:L1> = <var:d> } | and \verb | { <var:P> = <var:d> \land <var:L1> = <var:d> } <var:L2> := <var:L1> * <var:P> { <var:P> = <var:d> \land <var:L1> = <var:d> \land <var:L2> = <var:d> ^ <nat:2> } | . This is sound through the assignment rule in typical Hoare logic . Moving on to the next step , we have \verb | { <var:P> = <var:d> } <var:L1> := <var:P> { <var:P> = <var:d> \land <var:L1> = <var:d> } | . This is shown to be logically sound with the law obtained from typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <var:L4> : string := " <var:L4> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:P> = <var:d> }} <var:L1> := <var:P> ; <var:L2> := <var:L1> * <var:P> ; <var:L3> := <var:L2> * <var:P> ; <var:L4> := <var:L3> * <var:P> ; <var:L0> := <nat:3> ; <var:L2> := <var:L2> * <nat:8> ; <var:L3> := <var:L3> * <nat:5> ; <var:L4> := <var:L4> * <nat:8> ; <var:A> := <var:L4> <var:A> := <var:A> + <var:L3> <var:A> := <var:A> + <var:L2> <var:A> := <var:A> + <var:L0> {{ <var:A> = <nat:8> * <var:d> ^ <nat:4> + <nat:5> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:L1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:L1> = <var:d> /\ <var:L2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:L1> = <var:d> /\ <var:L2> = <var:d> ^ <nat:2> /\ <var:L3> = <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:L1> = <var:d> /\ <var:L2> = <var:d> ^ <nat:2> /\ <var:L3> = <var:d> ^ <nat:3> /\ <var:L4> = <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:L1> = <var:d> /\ <var:L2> = <var:d> ^ <nat:2> /\ <var:L3> = <var:d> ^ <nat:3> /\ <var:L4> = <var:d> ^ <nat:4> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:L1> = <var:d> /\ <var:L2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:L3> = <var:d> ^ <nat:3> /\ <var:L4> = <var:d> ^ <nat:4> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:L1> = <var:d> /\ <var:L2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:L3> = <nat:5> * <var:d> ^ <nat:3> /\ <var:L4> = <var:d> ^ <nat:4> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:L1> = <var:d> /\ <var:L2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:L3> = <nat:5> * <var:d> ^ <nat:3> /\ <var:L4> = <nat:8> * <var:d> ^ <nat:4> /\ <var:L0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:L1> = <var:d> /\ <var:L2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:L3> = <nat:5> * <var:d> ^ <nat:3> /\ <var:L0> = <nat:3> /\ <var:A> = <nat:8> * <var:d> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:L1> = <var:d> /\ <var:L2> = <nat:8> * <var:d> ^ <nat:2> /\ <var:L0> = <nat:3> /\ <var:A> = <nat:8> * <var:d> ^ <nat:4> + <nat:5> * <var:d> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:L1> = <var:d> /\ <var:L0> = <nat:3> /\ <var:A> = <nat:8> * <var:d> ^ <nat:4> + <nat:5> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:d> /\ <var:A> = <nat:8> * <var:d> ^ <nat:4> + <nat:5> * <var:d> ^ <nat:3> + <nat:8> * <var:d> ^ <nat:2> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 