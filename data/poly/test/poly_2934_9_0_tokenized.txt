\begin{document} \begin{definition} Let the following list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:Q0> := <nat:4> ; <var:Q1> := <nat:3> ; <var:Q1> := <var:Q1> * <var:o> ; <var:Q2> := <nat:2> ; <var:Q2> := <var:Q2> * <var:o> ; <var:Q2> := <var:Q2> * <var:o> ; <var:t> := <var:Q2> ; <var:t> := <var:t> + <var:Q1> ; <var:t> := <var:t> + <var:Q0> \end{verbatim} \end{definition} \begin{theorem} Let the following set of instructions <def:poly> in \emph{Imp} . Given given all positive numbers $ <var:d> $ it to hold that $ <var:o> = <var:d> $ ahead of the execution of this code segment , then $ <var:t> = <nat:2> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:4> $ when set of commands exits . \end{theorem} \begin{proof} Applying typical Hoare logic gives us : \begin{eqnarray} \{ <var:o> = <var:d> \} \\ <var:Q0> := <nat:4> ; \\ \{ <var:o> = <var:d> \land <var:Q0> = <nat:4> \} \\ <var:Q1> := <nat:3> ; \\ \{ <var:o> = <var:d> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:3> \} \\ <var:Q1> := <var:Q1> * <var:o> ; \\ \{ <var:o> = <var:d> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:3> \times <var:d> \} \\ <var:Q2> := <nat:2> ; \\ \{ <var:o> = <var:d> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:3> \times <var:d> \land <var:Q2> = <nat:2> \} \\ <var:Q2> := <var:Q2> * <var:o> ; \\ \{ <var:o> = <var:d> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:3> \times <var:d> \land <var:Q2> = <nat:2> \times <var:d> \} \\ <var:Q2> := <var:Q2> * <var:o> ; \\ \{ <var:o> = <var:d> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:3> \times <var:d> \land <var:Q2> = <nat:2> \times <var:d> ^ <nat:2> \} \\ <var:t> := <var:Q2> ; \\ \{ <var:o> = <var:d> \land <var:Q0> = <nat:4> \land <var:Q1> = <nat:3> \times <var:d> \land <var:t> = <nat:2> \times <var:d> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:Q1> ; \\ \{ <var:o> = <var:d> \land <var:Q0> = <nat:4> \land <var:t> = <nat:2> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> \} \\ <var:t> := <var:t> + <var:Q0> \\ \{ <var:o> = <var:d> \land <var:t> = <nat:2> \times <var:d> ^ <nat:2> + <nat:3> \times <var:d> + <nat:4> \} \end{eqnarray} Hence , this series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <def:poly> := <var:Q0> := <nat:4> ; <var:Q1> := <nat:3> ; <var:Q1> := <var:Q1> * <var:o> ; <var:Q2> := <nat:2> ; <var:Q2> := <var:Q2> * <var:o> ; <var:Q2> := <var:Q2> * <var:o> ; <var:t> := <var:Q2> ; <var:t> := <var:t> + <var:Q1> ; <var:t> := <var:t> + <var:Q0> . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:o> = <var:d> }} <def:poly> {{ <var:t> = <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:Q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:3> * <var:d> /\ <var:Q2> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:3> * <var:d> /\ <var:Q2> = <nat:2> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:3> * <var:d> /\ <var:Q2> = <nat:2> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:Q0> = <nat:4> /\ <var:Q1> = <nat:3> * <var:d> /\ <var:t> = <nat:2> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:Q0> = <nat:4> /\ <var:t> = <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:d> /\ <var:t> = <nat:2> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 