\begin{document} \begin{theorem} We define a set of commands as follows \begin{verbatim} <var:G> := <nat:2> ; <var:G> := <nat:4> + <var:G> * <var:o> ; <var:G> := <nat:3> + <var:G> * <var:o> ; <var:G> := <nat:1> + <var:G> * <var:o> ; <var:G> := <nat:3> + <var:G> * <var:o> \end{verbatim} Given it to be that $ <var:o> = <var:S> $ --- for some whole numbers $ <var:S> $ --- ahead of running this program , it holds that we see $ <var:G> = <nat:2> \cdot <var:S> ^ <nat:4> + <nat:4> \cdot <var:S> ^ <nat:3> + <nat:3> \cdot <var:S> ^ <nat:2> + <nat:1> \cdot <var:S> + <nat:3> $ . \end{theorem} \begin{proof} Applying Hoare logic yields : \begin{eqnarray} \{ <var:o> = <var:S> \} \\ <var:G> := <nat:2> ; \\ \{ <var:o> = <var:S> \land <var:G> = <nat:2> \} \\ <var:G> := <nat:4> + <var:G> * <var:o> ; \\ \{ <var:o> = <var:S> \land <var:G> = <nat:2> \times <var:S> + <nat:4> \} \\ <var:G> := <nat:3> + <var:G> * <var:o> ; \\ \{ <var:o> = <var:S> \land <var:G> = <nat:2> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:3> \} \\ <var:G> := <nat:1> + <var:G> * <var:o> ; \\ \{ <var:o> = <var:S> \land <var:G> = <nat:2> \times <var:S> ^ <nat:3> + <nat:4> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:1> \} \\ <var:G> := <nat:3> + <var:G> * <var:o> \\ \{ <var:o> = <var:S> \land <var:G> = <nat:2> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:1> \times <var:S> + <nat:3> \} \end{eqnarray} Given the preceding argument , the code segment is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:o> = <var:S> }} <var:G> := <nat:2> ; <var:G> := <nat:4> + <var:G> * <var:o> ; <var:G> := <nat:3> + <var:G> * <var:o> ; <var:G> := <nat:1> + <var:G> * <var:o> ; <var:G> := <nat:3> + <var:G> * <var:o> {{ <var:G> = <nat:2> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:G> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:G> = <nat:2> * <var:S> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:G> = <nat:2> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:G> = <nat:2> * <var:S> ^ <nat:3> + <nat:4> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:S> /\ <var:G> = <nat:2> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:1> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 