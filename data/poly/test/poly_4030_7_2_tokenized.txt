\begin{document} \begin{theorem} Let the following program in \emph{Imp} as \begin{verbatim} <var:d> := <nat:3> ; <var:d> := <nat:2> + <var:d> * <var:Q> ; <var:d> := <nat:2> + <var:d> * <var:Q> ; <var:d> := <nat:3> + <var:d> * <var:Q> ; <var:d> := <nat:2> + <var:d> * <var:Q> ; <var:d> := <nat:2> + <var:d> * <var:Q> ; <var:d> := <nat:4> + <var:d> * <var:Q> \end{verbatim} Assume , letting positive numbers $ <var:e> $ , it to be that $ <var:Q> = <var:e> $ before the evaluation of this series of commands then we have $ <var:d> = <nat:3> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this set of instructions is accomplished with typical Hoare techniques . Advancing on , we have \verb | { <var:Q> = <var:e> } <var:d> := <nat:3> { <var:Q> = <var:e> \land <var:d> = <nat:3> } | , \verb | { <var:Q> = <var:e> \land <var:d> = <nat:3> } <var:d> := <nat:2> + <var:d> * <var:Q> { <var:Q> = <var:e> \land <var:d> = <nat:3> \times <var:e> + <nat:2> } | , \verb | { <var:Q> = <var:e> \land <var:d> = <nat:3> \times <var:e> + <nat:2> } <var:d> := <nat:2> + <var:d> * <var:Q> { <var:Q> = <var:e> \land <var:d> = <nat:3> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:2> } | , \verb | { <var:Q> = <var:e> \land <var:d> = <nat:3> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:2> } <var:d> := <nat:3> + <var:d> * <var:Q> { <var:Q> = <var:e> \land <var:d> = <nat:3> \times <var:e> ^ <nat:3> + <nat:2> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:3> } | , \verb | { <var:Q> = <var:e> \land <var:d> = <nat:3> \times <var:e> ^ <nat:3> + <nat:2> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:3> } <var:d> := <nat:2> + <var:d> * <var:Q> { <var:Q> = <var:e> \land <var:d> = <nat:3> \times <var:e> ^ <nat:4> + <nat:2> \times <var:e> ^ <nat:3> + <nat:2> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:2> } | , \verb | { <var:Q> = <var:e> \land <var:d> = <nat:3> \times <var:e> ^ <nat:4> + <nat:2> \times <var:e> ^ <nat:3> + <nat:2> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:2> } <var:d> := <nat:2> + <var:d> * <var:Q> { <var:Q> = <var:e> \land <var:d> = <nat:3> \times <var:e> ^ <nat:5> + <nat:2> \times <var:e> ^ <nat:4> + <nat:2> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:2> } | and \verb | { <var:Q> = <var:e> \land <var:d> = <nat:3> \times <var:e> ^ <nat:5> + <nat:2> \times <var:e> ^ <nat:4> + <nat:2> \times <var:e> ^ <nat:3> + <nat:3> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:2> } <var:d> := <nat:4> + <var:d> * <var:Q{ <var:Q> = <var:e> \land <var:d> = <nat:3> \times <var:e> ^ <nat:6> + <nat:2> \times <var:e> ^ <nat:5> + <nat:2> \times <var:e> ^ <nat:4> + <nat:3> \times <var:e> ^ <nat:3> + <nat:2> \times <var:e> ^ <nat:2> + <nat:2> \times <var:e> + <nat:4> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:Q> = <var:e> }} <var:d> := <nat:3> ; <var:d> := <nat:2> + <var:d> * <var:Q> ; <var:d> := <nat:2> + <var:d> * <var:Q> ; <var:d> := <nat:3> + <var:d> * <var:Q> ; <var:d> := <nat:2> + <var:d> * <var:Q> ; <var:d> := <nat:2> + <var:d> * <var:Q> ; <var:d> := <nat:4> + <var:d> * <var:Q> {{ <var:d> = <nat:3> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:d> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:d> = <nat:3> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:d> = <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:d> = <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:d> = <nat:3> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:d> = <nat:3> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:e> /\ <var:d> = <nat:3> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 