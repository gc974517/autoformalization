\begin{document} \begin{theorem} Consider a series of instructions as follows \begin{verbatim} <var:I0> := <nat:8> ; <var:I1> := <nat:6> ; <var:I1> := <var:I1> * <var:j> ; <var:V> := <var:I1> ; <var:V> := <var:V> + <var:I0> \end{verbatim} Allowing that $ <var:j> = <var:y> $ prior to executing our series of commands , it holds that we see $ <var:V> = <nat:6> \cdot <var:y> + <nat:8> $ . \end{theorem} \begin{proof} We can see that this decorated series of commands . \begin{eqnarray} \{ <var:j> = <var:y> \} \\ <var:I0> := <nat:8> ; \\ \{ <var:j> = <var:y> \land <var:I0> = <nat:8> \} \\ <var:I1> := <nat:6> ; \\ \{ <var:j> = <var:y> \land <var:I0> = <nat:8> \land <var:I1> = <nat:6> \} \\ <var:I1> := <var:I1> * <var:j> ; \\ \{ <var:j> = <var:y> \land <var:I0> = <nat:8> \land <var:I1> = <nat:6> \cdot <var:y> \} \\ <var:V> := <var:I1> ; \\ \{ <var:j> = <var:y> \land <var:I0> = <nat:8> \land <var:V> = <nat:6> \cdot <var:y> \} \\ <var:V> := <var:V> + <var:I0> \\ \{ <var:j> = <var:y> \land <var:V> = <nat:6> \cdot <var:y> + <nat:8> \} \end{eqnarray} Using standard Hoare reasoning solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:j> = <var:y> }} <var:I0> := <nat:8> ; <var:I1> := <nat:6> ; <var:I1> := <var:I1> * <var:j> ; <var:V> := <var:I1> ; <var:V> := <var:V> + <var:I0> {{ <var:V> = <nat:6> * <var:y> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:I0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:I0> = <nat:8> /\ <var:I1> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:I0> = <nat:8> /\ <var:V> = <nat:6> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:y> /\ <var:V> = <nat:6> * <var:y> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 