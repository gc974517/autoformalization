\begin{document} \begin{definition} Consider the following set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:Z0> := <nat:6> ; <var:Z1> := <nat:6> ; <var:Z1> := <var:Z1> * <var:S> ; <var:Z2> := <nat:6> ; <var:Z2> := <var:Z2> * <var:S> ; <var:Z2> := <var:Z2> * <var:S> ; <var:Z3> := <nat:1> ; <var:Z3> := <var:Z3> * <var:S> ; <var:Z3> := <var:Z3> * <var:S> ; <var:Z3> := <var:Z3> * <var:S> ; <var:d> := <var:Z3> ; <var:d> := <var:d> + <var:Z2> ; <var:d> := <var:d> + <var:Z1> ; <var:d> := <var:d> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Take a list of commands <def:poly> in \emph{Imp} . Assuming letting positive coefficients $ <var:q> $ that $ <var:S> = <var:q> $ prior to executing this segment of code , it holds that $ <var:d> = <nat:1> \times <var:q> ^ <nat:3> + <nat:6> \times <var:q> ^ <nat:2> + <nat:6> \times <var:q> + <nat:6> $ . \end{theorem} \begin{proof} See that the below decorated set of commands . \begin{eqnarray} \{ <var:S> = <var:q> \} \\ <var:Z0> := <nat:6> ; \\ \{ <var:S> = <var:q> \land <var:Z0> = <nat:6> \} \\ <var:Z1> := <nat:6> ; \\ \{ <var:S> = <var:q> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> \} \\ <var:Z1> := <var:Z1> * <var:S> ; \\ \{ <var:S> = <var:q> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> \times <var:q> \} \\ <var:Z2> := <nat:6> ; \\ \{ <var:S> = <var:q> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> \times <var:q> \land <var:Z2> = <nat:6> \} \\ <var:Z2> := <var:Z2> * <var:S> ; \\ \{ <var:S> = <var:q> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> \times <var:q> \land <var:Z2> = <nat:6> \times <var:q> \} \\ <var:Z2> := <var:Z2> * <var:S> ; \\ \{ <var:S> = <var:q> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> \times <var:q> \land <var:Z2> = <nat:6> \times <var:q> ^ <nat:2> \} \\ <var:Z3> := <nat:1> ; \\ \{ <var:S> = <var:q> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> \times <var:q> \land <var:Z2> = <nat:6> \times <var:q> ^ <nat:2> \land <var:Z3> = <nat:1> \} \end{eqnarray} Furthering executing this list of instructions gives us : \begin{eqnarray} <var:Z3> := <var:Z3> * <var:S> ; \\ \{ <var:S> = <var:q> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> \times <var:q> \land <var:Z2> = <nat:6> \times <var:q> ^ <nat:2> \land <var:Z3> = <nat:1> \times <var:q> \} \\ <var:Z3> := <var:Z3> * <var:S> ; \\ \{ <var:S> = <var:q> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> \times <var:q> \land <var:Z2> = <nat:6> \times <var:q> ^ <nat:2> \land <var:Z3> = <nat:1> \times <var:q> ^ <nat:2> \} \\ <var:Z3> := <var:Z3> * <var:S> ; \\ \{ <var:S> = <var:q> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> \times <var:q> \land <var:Z2> = <nat:6> \times <var:q> ^ <nat:2> \land <var:Z3> = <nat:1> \times <var:q> ^ <nat:3> \} \\ <var:d> := <var:Z3> ; \\ \{ <var:S> = <var:q> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> \times <var:q> \land <var:Z2> = <nat:6> \times <var:q> ^ <nat:2> \land <var:d> = <nat:1> \times <var:q> ^ <nat:3> \} \\ <var:d> := <var:d> + <var:Z2> ; \\ \{ <var:S> = <var:q> \land <var:Z0> = <nat:6> \land <var:Z1> = <nat:6> \times <var:q> \land <var:d> = <nat:1> \times <var:q> ^ <nat:3> + <nat:6> \times <var:q> ^ <nat:2> \} \\ <var:d> := <var:d> + <var:Z1> ; \\ \{ <var:S> = <var:q> \land <var:Z0> = <nat:6> \land <var:d> = <nat:1> \times <var:q> ^ <nat:3> + <nat:6> \times <var:q> ^ <nat:2> + <nat:6> \times <var:q> \} \\ <var:d> := <var:d> + <var:Z0> \\ \{ <var:S> = <var:q> \land <var:d> = <nat:1> \times <var:q> ^ <nat:3> + <nat:6> \times <var:q> ^ <nat:2> + <nat:6> \times <var:q> + <nat:6> \} \end{eqnarray} The application of Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <var:Z3> : string := " <var:Z3> " . Definition <def:poly> := <var:Z0> := <nat:6> ; <var:Z1> := <nat:6> ; <var:Z1> := <var:Z1> * <var:S> ; <var:Z2> := <nat:6> ; <var:Z2> := <var:Z2> * <var:S> ; <var:Z2> := <var:Z2> * <var:S> ; <var:Z3> := <nat:1> ; <var:Z3> := <var:Z3> * <var:S> ; <var:Z3> := <var:Z3> * <var:S> ; <var:Z3> := <var:Z3> * <var:S> ; <var:d> := <var:Z3> ; <var:d> := <var:d> + <var:Z2> ; <var:d> := <var:d> + <var:Z1> ; <var:d> := <var:d> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:S> = <var:q> }} <def:poly> {{ <var:d> = <nat:1> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:Z0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> * <var:q> /\ <var:Z2> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> * <var:q> /\ <var:Z2> = <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> * <var:q> /\ <var:Z2> = <nat:6> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> * <var:q> /\ <var:Z2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:Z3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> * <var:q> /\ <var:Z2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:Z3> = <nat:1> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> * <var:q> /\ <var:Z2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:Z3> = <nat:1> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> * <var:q> /\ <var:Z2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:Z3> = <nat:1> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> * <var:q> /\ <var:Z2> = <nat:6> * <var:q> ^ <nat:2> /\ <var:d> = <nat:1> * <var:q> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:Z0> = <nat:6> /\ <var:Z1> = <nat:6> * <var:q> /\ <var:d> = <nat:1> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:Z0> = <nat:6> /\ <var:d> = <nat:1> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> + <nat:6> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:q> /\ <var:d> = <nat:1> * <var:q> ^ <nat:3> + <nat:6> * <var:q> ^ <nat:2> + <nat:6> * <var:q> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 