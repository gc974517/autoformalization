\begin{document} \begin{theorem} Define the following series of commands as \begin{verbatim} <var:w0> := <nat:3> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:v> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:v> ; <var:w2> := <var:w2> * <var:v> ; <var:w3> := <nat:2> ; <var:w3> := <var:w3> * <var:v> ; <var:w3> := <var:w3> * <var:v> ; <var:w3> := <var:w3> * <var:v> ; <var:s> := <var:w3> ; <var:s> := <var:s> + <var:w2> ; <var:s> := <var:s> + <var:w1> ; <var:s> := <var:s> + <var:w0> \end{verbatim} Assuming that $ <var:v> = <var:H> $ ahead of interpreting the code , it holds that we have $ <var:s> = <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> $ when code segment terminates . \end{theorem} \begin{proof} Demonstrating correctness of our list of commands can be done with usual Hoare techniques . After , we have \verb | { <var:v> = <var:H> } <var:w0> := <nat:3> { <var:v> = <var:H> \land <var:w0> = <nat:3> } | , \verb | { <var:v> = <var:H> \land <var:w0> = <nat:3> } <var:w1> := <nat:2> { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> } | , \verb | { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> } <var:w1> := <var:w1> * <var:v> { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> } | , \verb | { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> } <var:w2> := <nat:3> { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> \land <var:w2> = <nat:3> } | , \verb | { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> \land <var:w2> = <nat:3> } <var:w2> := <var:w2> * <var:v> { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> \land <var:w2> = <nat:3> * <var:H> } | , \verb | { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> \land <var:w2> = <nat:3> * <var:H> } <var:w2> := <var:w2> * <var:v> { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> \land <var:w2> = <nat:3> * <var:H> ^ <nat:2> } | , \verb | { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> \land <var:w2> = <nat:3> * <var:H> ^ <nat:2> } <var:w3> := <nat:2> { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> \land <var:w2> = <nat:3> * <var:H> ^ <nat:2> \land <var:w3> = <nat:2> } | and \verb | { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> \land <var:w2> = <nat:3> * <var:H> ^ <nat:2> \land <var:w3> = <nat:2> } <var:w3> := <var:w3> * <var:v> { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> \land <var:w2> = <nat:3> * <var:H> ^ <nat:2> \land <var:w3> = <nat:2> * <var:H> } | . Paying attention to the upcoming statement found in the code , \verb | { <var:v> = <var:H> } <var:w0> := <nat:3> { <var:v> = <var:H> \land <var:w0> = <nat:3> } | . Moving on , \verb | { <var:v> = <var:H> } <var:w0> := <nat:3> { <var:v> = <var:H> \land <var:w0> = <nat:3> } | , \verb | { <var:v> = <var:H> \land <var:w0> = <nat:3> } <var:w1> := <nat:2> { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> } | , \verb | { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> } <var:w1> := <var:w1> * <var:v> { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> } | and \verb | { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> } <var:w2> := <nat:3> { <var:v> = <var:H> \land <var:w0> = <nat:3> \land <var:w1> = <nat:2> * <var:H> \land <var:w2> = <nat:3> } | . This is shown to be logically sound by the inference rule given by Hoare techniques . Jumping to the upcoming command seen in the series of instructions , we see \verb | { <var:v> = <var:H> } <var:w0> := <nat:3> { <var:v> = <var:H> \land <var:w0> = <nat:3> } | . This is sound using the variable assignmet scheme given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:w0> : string := " <var:w0> " . Definition <var:w1> : string := " <var:w1> " . Definition <var:w2> : string := " <var:w2> " . Definition <var:w3> : string := " <var:w3> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:v> = <var:H> }} <var:w0> := <nat:3> ; <var:w1> := <nat:2> ; <var:w1> := <var:w1> * <var:v> ; <var:w2> := <nat:3> ; <var:w2> := <var:w2> * <var:v> ; <var:w2> := <var:w2> * <var:v> ; <var:w3> := <nat:2> ; <var:w3> := <var:w3> * <var:v> ; <var:w3> := <var:w3> * <var:v> ; <var:w3> := <var:w3> * <var:v> ; <var:s> := <var:w3> ; <var:s> := <var:s> + <var:w2> ; <var:s> := <var:s> + <var:w1> ; <var:s> := <var:s> + <var:w0> {{ <var:s> = <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:w0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:H> /\ <var:w2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:H> /\ <var:w2> = <nat:3> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:H> /\ <var:w2> = <nat:3> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:H> /\ <var:w2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:w3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:H> /\ <var:w2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:w3> = <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:H> /\ <var:w2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:w3> = <nat:2> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:H> /\ <var:w2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:w3> = <nat:2> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:H> /\ <var:w2> = <nat:3> * <var:H> ^ <nat:2> /\ <var:s> = <nat:2> * <var:H> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:w0> = <nat:3> /\ <var:w1> = <nat:2> * <var:H> /\ <var:s> = <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:w0> = <nat:3> /\ <var:s> = <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:H> /\ <var:s> = <nat:2> * <var:H> ^ <nat:3> + <nat:3> * <var:H> ^ <nat:2> + <nat:2> * <var:H> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 