\begin{document} \begin{definition} We define a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:g0> := <nat:3> ; <var:D> := <var:g0> \end{verbatim} \end{definition} \begin{theorem} We define a series of instructions <def:poly> in \emph{Imp} . Allowing that we have $ <var:X> = <var:G> $ prior to the evaluation of our program it holds that we have $ <var:D> = <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for the segment of code is shown with standard Hoare reasoning . Observing the proceeding line of code found in our list of commands , we see the environment update line letting $ <nat:3> $ into $ <var:g0>$ . This statement takes $ \{ <var:X> = <var:G> \} $ to the postcondition $ \{ <var:X> = <var:G> \land <var:g0> = <nat:3> \} $ . Taking a look at the next statement contained in the list of commands , we have the variable binding code letting $ <var:g0$ into $ <var:D>$ . This command transfers $ \{ <var:X> = <var:G> \land <var:g0> = <nat:3> \} $ toward the condition $ \{ <var:X> = <var:G> \land <var:D> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <def:poly> := <var:g0> := <nat:3> ; <var:D> := <var:g0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:X> = <var:G> }} <def:poly> {{ <var:D> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:G> /\ <var:g0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:G> /\ <var:D> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 