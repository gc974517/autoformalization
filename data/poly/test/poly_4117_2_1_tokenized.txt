\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v0> := <nat:2> ; <var:j> := <var:v0> \end{verbatim} \end{definition} \begin{theorem} Define a series of instructions <def:poly> in \emph{Imp} . Assuming that $ <var:z> = <var:k> $ before the execution of our code segment , it follows that we see $ <var:j> = <nat:2> $ once set of instructions terminates . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is evident with standard Hoare reasoning . Going forward , we have the variable update statement defining $ <nat:2> $ to $ <var:v0>$ . This statement moves the condition $ \{ <var:z> = <var:k> \} $ toward $ \{ <var:z> = <var:k> \land <var:v0> = <nat:2> \} $ . This is rigorously given using the assignment scheme found in Hoare techniques . Advancing to the following line of code in our program , we have the variable assignmet line \verb | <var:j> := <var:v0> | . This statement forwards the condition $ \{ <var:z> = <var:k> \land <var:v0> = <nat:2> \} $ as the condition $ \{ <var:z> = <var:k> \land <var:j> = <nat:2> \} $ . This is deduced through the assignment rule defined in typical Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <def:poly> := <var:v0> := <nat:2> ; <var:j> := <var:v0> . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:z> = <var:k> }} <def:poly> {{ <var:j> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:v0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:k> /\ <var:j> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 