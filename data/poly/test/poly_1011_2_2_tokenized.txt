\begin{document} \begin{theorem} We define the following series of commands as follows \begin{verbatim} <var:N> := <nat:2> ; <var:N> := <nat:3> + <var:N> * <var:L> \end{verbatim} Given it to be that $ <var:L> = <var:b> $ given all $ <var:b> \in \mathbb{N} $ prior to the execution of the program , it follows that $ <var:N> = <nat:2> \cdot <var:b> + <nat:3> $ . \end{theorem} \begin{proof} The way to prove correctness for our segment of code can be given by standard Hoare techniques . Honing in on the subsequent bits of codecontained in the list of instructions , we see \begin{verbatim} { <var:L> = <var:b> } <var:N> := <nat:2> { <var:L> = <var:b> \land <var:N> = <nat:2> } { <var:L> = <var:b> \land <var:N> = <nat:2> } <var:N> := <nat:3> + <var:N> * <var:L{ <var:L> = <var:b> \land <var:N> = <nat:2> \times <var:b> + <nat:3> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:L> = <var:b> }} <var:N> := <nat:2> ; <var:N> := <nat:3> + <var:N> * <var:L> {{ <var:N> = <nat:2> * <var:b> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:b> /\ <var:N> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:b> /\ <var:N> = <nat:2> * <var:b> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 