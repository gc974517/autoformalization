\begin{document} \begin{theorem} We define a segment of code in \emph{Imp} as follows \begin{verbatim} <var:k0> := <nat:3> ; <var:i> := <var:k0> \end{verbatim} Assuming , given some natural coefficients $ <var:P> $ , it to be that $ <var:f> = <var:P> $ before executing this set of instructions , then $ <var:i> = <nat:3> $ when set of commands has exited . \end{theorem} \begin{proof} Demonstrating correctness of the set of instructions is evident through typical Hoare logic . Taking another step toward the proceeding line seen in the set of instructions , we see the binding statement \verb | <var:k0> := <nat:3> ; | . This code advances $ \{ <var:f> = <var:P> \} $ to the postcondition $ \{ <var:f> = <var:P> \land <var:k0> = <nat:3> \} $ . This is given by the assignment scheme defined by Hoare techniques . Moving forward to the following line in our set of instructions , the variable assignmet line \verb | <var:i> := <var:k0> | . This takes $ \{ <var:f> = <var:P> \land <var:k0> = <nat:3> \} $ to the condition $ \{ <var:f> = <var:P> \land <var:i> = <nat:3> \} $ . This is given by the assignment law obtained from Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:f> = <var:P> }} <var:k0> := <nat:3> ; <var:i> := <var:k0> {{ <var:i> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:k0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:P> /\ <var:i> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 