\begin{document} \begin{theorem} We define the following set of commands : \begin{verbatim} <var:L1> := <var:d> ; <var:L2> := <var:L1> * <var:d> ; <var:L3> := <var:L2> * <var:d> ; <var:L4> := <var:L3> * <var:d> ; <var:L0> := <nat:1> ; <var:L1> := <var:L1> * <nat:7> ; <var:L2> := <var:L2> * <nat:4> ; <var:L3> := <var:L3> * <nat:5> ; <var:L4> := <var:L4> * <nat:1> ; <var:G> := <var:L4> <var:G> := <var:G> + <var:L3> <var:G> := <var:G> + <var:L2> <var:G> := <var:G> + <var:L1> <var:G> := <var:G> + <var:L0> \end{verbatim} Allow that we have $ <var:d> = <var:N> $ taking natural coefficients $ <var:N> $ prior to executing the code segment it holds that we see $ <var:G> = <nat:1> * <var:N> ^ <nat:4> + <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:d> = <var:N> \} \\ <var:L1> := <var:d> ; \\ \{ <var:d> = <var:N> \land <var:L1> = <var:N> \} \\ <var:L2> := <var:L1> * <var:d> ; \\ \{ <var:d> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \} \\ <var:L3> := <var:L2> * <var:d> ; \\ \{ <var:d> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \land <var:L3> = <var:N> ^ <nat:3> \} \\ <var:L4> := <var:L3> * <var:d> ; \\ \{ <var:d> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \land <var:L3> = <var:N> ^ <nat:3> \land <var:L4> = <var:N> ^ <nat:4> \} \\ <var:L0> := <nat:1> ; \\ \{ <var:d> = <var:N> \land <var:L1> = <var:N> \land <var:L2> = <var:N> ^ <nat:2> \land <var:L3> = <var:N> ^ <nat:3> \land <var:L4> = <var:N> ^ <nat:4> \land <var:L0> = <nat:1> \} \\ <var:L1> := <var:L1> * <nat:7> ; \\ \{ <var:d> = <var:N> \land <var:L1> = <nat:7> \times <var:N> \land <var:L2> = <var:N> ^ <nat:2> \land <var:L3> = <var:N> ^ <nat:3> \land <var:L4> = <var:N> ^ <nat:4> \land <var:L0> = <nat:1> \} \\ <var:L2> := <var:L2> * <nat:4> ; \\ \{ <var:d> = <var:N> \land <var:L1> = <nat:7> \times <var:N> \land <var:L2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:L3> = <var:N> ^ <nat:3> \land <var:L4> = <var:N> ^ <nat:4> \land <var:L0> = <nat:1> \} \\ <var:L3> := <var:L3> * <nat:5> ; \\ \{ <var:d> = <var:N> \land <var:L1> = <nat:7> \times <var:N> \land <var:L2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:L3> = <nat:5> \times <var:N> ^ <nat:3> \land <var:L4> = <var:N> ^ <nat:4> \land <var:L0> = <nat:1> \} \\ <var:L4> := <var:L4> * <nat:1> ; \\ \{ <var:d> = <var:N> \land <var:L1> = <nat:7> \times <var:N> \land <var:L2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:L3> = <nat:5> \times <var:N> ^ <nat:3> \land <var:L4> = <nat:1> \times <var:N> ^ <nat:4> \land <var:L0> = <nat:1> \} \\ <var:G> := <var:L4> \\ \{ <var:d> = <var:N> \land <var:L1> = <nat:7> \times <var:N> \land <var:L2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:L3> = <nat:5> \times <var:N> ^ <nat:3> \land <var:L0> = <nat:1> \land <var:G> = <nat:1> \times <var:N> ^ <nat:4> \} \\ <var:G> := <var:G> + <var:L3> \\ \{ <var:d> = <var:N> \land <var:L1> = <nat:7> \times <var:N> \land <var:L2> = <nat:4> \times <var:N> ^ <nat:2> \land <var:L0> = <nat:1> \land <var:G> = <nat:1> \times <var:N> ^ <nat:4> + <nat:5> \times <var:N> ^ <nat:3> \} \\ <var:G> := <var:G> + <var:L2> \\ \{ <var:d> = <var:N> \land <var:L1> = <nat:7> \times <var:N> \land <var:L0> = <nat:1> \land <var:G> = <nat:1> \times <var:N> ^ <nat:4> + <nat:5> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> \} \\ <var:G> := <var:G> + <var:L1> \\ \{ <var:d> = <var:N> \land <var:L0> = <nat:1> \land <var:G> = <nat:1> \times <var:N> ^ <nat:4> + <nat:5> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:7> \times <var:N> \} \\ <var:G> := <var:G> + <var:L0> \\ \{ <var:d> = <var:N> \land <var:G> = <nat:1> \times <var:N> ^ <nat:4> + <nat:5> \times <var:N> ^ <nat:3> + <nat:4> \times <var:N> ^ <nat:2> + <nat:7> \times <var:N> + <nat:1> \} \end{eqnarray} The application of typical Hoare reasoning ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <var:L4> : string := " <var:L4> " . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:d> = <var:N> }} <var:L1> := <var:d> ; <var:L2> := <var:L1> * <var:d> ; <var:L3> := <var:L2> * <var:d> ; <var:L4> := <var:L3> * <var:d> ; <var:L0> := <nat:1> ; <var:L1> := <var:L1> * <nat:7> ; <var:L2> := <var:L2> * <nat:4> ; <var:L3> := <var:L3> * <nat:5> ; <var:L4> := <var:L4> * <nat:1> ; <var:G> := <var:L4> <var:G> := <var:G> + <var:L3> <var:G> := <var:G> + <var:L2> <var:G> := <var:G> + <var:L1> <var:G> := <var:G> + <var:L0> {{ <var:G> = <nat:1> * <var:N> ^ <nat:4> + <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:L1> = <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:L1> = <var:N> /\ <var:L2> = <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:L1> = <var:N> /\ <var:L2> = <var:N> ^ <nat:2> /\ <var:L3> = <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:L1> = <var:N> /\ <var:L2> = <var:N> ^ <nat:2> /\ <var:L3> = <var:N> ^ <nat:3> /\ <var:L4> = <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:L1> = <var:N> /\ <var:L2> = <var:N> ^ <nat:2> /\ <var:L3> = <var:N> ^ <nat:3> /\ <var:L4> = <var:N> ^ <nat:4> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:L1> = <nat:7> * <var:N> /\ <var:L2> = <var:N> ^ <nat:2> /\ <var:L3> = <var:N> ^ <nat:3> /\ <var:L4> = <var:N> ^ <nat:4> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:L1> = <nat:7> * <var:N> /\ <var:L2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:L3> = <var:N> ^ <nat:3> /\ <var:L4> = <var:N> ^ <nat:4> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:L1> = <nat:7> * <var:N> /\ <var:L2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:L3> = <nat:5> * <var:N> ^ <nat:3> /\ <var:L4> = <var:N> ^ <nat:4> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:L1> = <nat:7> * <var:N> /\ <var:L2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:L3> = <nat:5> * <var:N> ^ <nat:3> /\ <var:L4> = <nat:1> * <var:N> ^ <nat:4> /\ <var:L0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:L1> = <nat:7> * <var:N> /\ <var:L2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:L3> = <nat:5> * <var:N> ^ <nat:3> /\ <var:L0> = <nat:1> /\ <var:G> = <nat:1> * <var:N> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:L1> = <nat:7> * <var:N> /\ <var:L2> = <nat:4> * <var:N> ^ <nat:2> /\ <var:L0> = <nat:1> /\ <var:G> = <nat:1> * <var:N> ^ <nat:4> + <nat:5> * <var:N> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:L1> = <nat:7> * <var:N> /\ <var:L0> = <nat:1> /\ <var:G> = <nat:1> * <var:N> ^ <nat:4> + <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:L0> = <nat:1> /\ <var:G> = <nat:1> * <var:N> ^ <nat:4> + <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:7> * <var:N> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:N> /\ <var:G> = <nat:1> * <var:N> ^ <nat:4> + <nat:5> * <var:N> ^ <nat:3> + <nat:4> * <var:N> ^ <nat:2> + <nat:7> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 