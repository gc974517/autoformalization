\begin{document} \begin{theorem} Take the following code segment as \begin{verbatim} <var:a> := <nat:4> ; <var:a> := <nat:4> + <var:a> * <var:G> ; <var:a> := <nat:1> + <var:a> * <var:G> ; <var:a> := <nat:2> + <var:a> * <var:G> ; <var:a> := <var:a> * <var:G> ; <var:a> := <var:a> * <var:G> ; <var:a> := <nat:2> + <var:a> * <var:G> ; <var:a> := <var:a> * <var:G> ; <var:a> := <nat:4> + <var:a> * <var:G> ; <var:a> := <nat:3> + <var:a> * <var:G> ; <var:a> := <nat:4> + <var:a> * <var:G> ; <var:a> := <nat:4> + <var:a> * <var:G> ; <var:a> := <nat:1> + <var:a> * <var:G> ; <var:a> := <nat:4> + <var:a> * <var:G> \end{verbatim} Allowing $ <var:G> = <var:d> $ ahead of running this segment of code , it holds that we have $ <var:a> = <nat:4> \times <var:d> ^ <nat:13> + <nat:4> \times <var:d> ^ <nat:12> + <nat:1> \times <var:d> ^ <nat:11> + <nat:2> \times <var:d> ^ <nat:10> + <nat:2> \times <var:d> ^ <nat:7> + <nat:4> \times <var:d> ^ <nat:5> + <nat:3> \times <var:d> ^ <nat:4> + <nat:4> \times <var:d> ^ <nat:3> + <nat:4> \times <var:d> ^ <nat:2> + <nat:1> \times <var:d> + <nat:4> $ . \end{theorem} \begin{proof} The argument for this series of commands can be accomplished by usual Hoare techniques . Moving on to the next step , we see \[ \begin{tabular} {rcl} \{ <var:G> = <var:d> \} & <var:a> := <nat:4> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \} \\ \{ <var:G> = <var:d> \land <var:a> = <nat:4> \} & <var:a> := <nat:4> + <var:a> * <var:G> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> + <nat:4> \} \\ \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> + <nat:4> \} & <var:a> := <nat:1> + <var:a> * <var:G> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:1> \} \\ \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:1> \} & <var:a> := <nat:2> + <var:a> * <var:G> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:1> \cdot <var:d> + <nat:2> \} \\ \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:1> \cdot <var:d> + <nat:2> \} & <var:a> := <var:a> * <var:G> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:4> + <nat:4> \cdot <var:d> ^ <nat:3> + <nat:1> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + \} \\ \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:4> + <nat:4> \cdot <var:d> ^ <nat:3> + <nat:1> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + \} & <var:a> := <var:a> * <var:G> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:5> + <nat:4> \cdot <var:d> ^ <nat:4> + <nat:1> \cdot <var:d> ^ <nat:3> + <nat:2> \cdot <var:d> ^ <nat:2> + \} \\ \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:5> + <nat:4> \cdot <var:d> ^ <nat:4> + <nat:1> \cdot <var:d> ^ <nat:3> + <nat:2> \cdot <var:d> ^ <nat:2> + \} & <var:a> := <nat:2> + <var:a> * <var:G> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:6> + <nat:4> \cdot <var:d> ^ <nat:5> + <nat:1> \cdot <var:d> ^ <nat:4> + <nat:2> \cdot <var:d> ^ <nat:3> + <nat:2> \} \\ \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:6> + <nat:4> \cdot <var:d> ^ <nat:5> + <nat:1> \cdot <var:d> ^ <nat:4> + <nat:2> \cdot <var:d> ^ <nat:3> + <nat:2> \} & <var:a> := <var:a> * <var:G> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:7> + <nat:4> \cdot <var:d> ^ <nat:6> + <nat:1> \cdot <var:d> ^ <nat:5> + <nat:2> \cdot <var:d> ^ <nat:4> + <nat:2> \cdot <var:d> + \} \end{tabular} Considering the subsequent pieces of code in our series of instructions , we have \[ \begin{tabular} {rcl} \{ <var:G> = <var:d> \} & <var:a> := <nat:4> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \} \\ \{ <var:G> = <var:d> \land <var:a> = <nat:4> \} & <var:a> := <nat:4> + <var:a> * <var:G> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> + <nat:4> \} \\ \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> + <nat:4> \} & <var:a> := <nat:1> + <var:a> * <var:G> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:1> \} \\ \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:2> + <nat:4> \cdot <var:d> + <nat:1> \} & <var:a> := <nat:2> + <var:a> * <var:G> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:1> \cdot <var:d> + <nat:2> \} \\ \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:3> + <nat:4> \cdot <var:d> ^ <nat:2> + <nat:1> \cdot <var:d> + <nat:2> \} & <var:a> := <var:a> * <var:G> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:4> + <nat:4> \cdot <var:d> ^ <nat:3> + <nat:1> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + \} \\ \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:4> + <nat:4> \cdot <var:d> ^ <nat:3> + <nat:1> \cdot <var:d> ^ <nat:2> + <nat:2> \cdot <var:d> + \} & <var:a> := <var:a> * <var:G> & \{ <var:G> = <var:d> \land <var:a> = <nat:4> \cdot <var:d> ^ <nat:5> + <nat:4> \cdot <var:d> ^ <nat:4> + <nat:1> \cdot <var:d> ^ <nat:3> + <nat:2> \cdot <var:d> ^ <nat:2> + \} \end{tabular} This is sound with the binding rule given in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:G> = <var:d> }} <var:a> := <nat:4> ; <var:a> := <nat:4> + <var:a> * <var:G> ; <var:a> := <nat:1> + <var:a> * <var:G> ; <var:a> := <nat:2> + <var:a> * <var:G> ; <var:a> := <var:a> * <var:G> ; <var:a> := <var:a> * <var:G> ; <var:a> := <nat:2> + <var:a> * <var:G> ; <var:a> := <var:a> * <var:G> ; <var:a> := <nat:4> + <var:a> * <var:G> ; <var:a> := <nat:3> + <var:a> * <var:G> ; <var:a> := <nat:4> + <var:a> * <var:G> ; <var:a> := <nat:4> + <var:a> * <var:G> ; <var:a> := <nat:1> + <var:a> * <var:G> ; <var:a> := <nat:4> + <var:a> * <var:G> {{ <var:a> = <nat:4> * <var:d> ^ <nat:13> + <nat:4> * <var:d> ^ <nat:12> + <nat:1> * <var:d> ^ <nat:11> + <nat:2> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:7> + <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:1> * <var:d> ^ <nat:2> + <nat:2> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:4> + <nat:1> * <var:d> ^ <nat:3> + <nat:2> * <var:d> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:5> + <nat:1> * <var:d> ^ <nat:4> + <nat:2> * <var:d> ^ <nat:3> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> * <var:d> ^ <nat:7> + <nat:4> * <var:d> ^ <nat:6> + <nat:1> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:4> + <nat:2> * <var:d> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> * <var:d> ^ <nat:8> + <nat:4> * <var:d> ^ <nat:7> + <nat:1> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:5> + <nat:2> * <var:d> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> * <var:d> ^ <nat:9> + <nat:4> * <var:d> ^ <nat:8> + <nat:1> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:6> + <nat:2> * <var:d> ^ <nat:3> + <nat:4> * <var:d> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> * <var:d> ^ <nat:10> + <nat:4> * <var:d> ^ <nat:9> + <nat:1> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:7> + <nat:2> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> * <var:d> ^ <nat:11> + <nat:4> * <var:d> ^ <nat:10> + <nat:1> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:8> + <nat:2> * <var:d> ^ <nat:5> + <nat:4> * <var:d> ^ <nat:3> + <nat:3> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> * <var:d> ^ <nat:12> + <nat:4> * <var:d> ^ <nat:11> + <nat:1> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:9> + <nat:2> * <var:d> ^ <nat:6> + <nat:4> * <var:d> ^ <nat:4> + <nat:3> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:4> * <var:d> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:d> /\ <var:a> = <nat:4> * <var:d> ^ <nat:13> + <nat:4> * <var:d> ^ <nat:12> + <nat:1> * <var:d> ^ <nat:11> + <nat:2> * <var:d> ^ <nat:10> + <nat:2> * <var:d> ^ <nat:7> + <nat:4> * <var:d> ^ <nat:5> + <nat:3> * <var:d> ^ <nat:4> + <nat:4> * <var:d> ^ <nat:3> + <nat:4> * <var:d> ^ <nat:2> + <nat:1> * <var:d> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 