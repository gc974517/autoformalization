\begin{document} \begin{theorem} Consider a series of instructions : \begin{verbatim} <var:Q0> := <nat:7> ; <var:b> := <var:Q0> \end{verbatim} Assume $ <var:V> = <var:x> $ for all positive integers $ <var:x> $ prior to running this set of commands it follows that we have $ <var:b> = <nat:7> $ . \end{theorem} \begin{proof} Let the following decorated segment of code . \begin{eqnarray} \{ <var:V> = <var:x> \} \\ <var:Q0> := <nat:7> ; \\ \{ <var:V> = <var:x> \land <var:Q0> = <nat:7> \} \\ <var:b> := <var:Q0> \\ \{ <var:V> = <var:x> \land <var:b> = <nat:7> \} \end{eqnarray} Using typical Hoare techniques finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:V> = <var:x> }} <var:Q0> := <nat:7> ; <var:b> := <var:Q0> {{ <var:b> = <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:Q0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:V> = <var:x> /\ <var:b> = <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 