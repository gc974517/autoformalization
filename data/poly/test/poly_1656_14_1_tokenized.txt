\begin{document} \begin{definition} Consider a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:q1> := <var:D> ; <var:q2> := <var:q1> * <var:D> ; <var:q3> := <var:q2> * <var:D> ; <var:q4> := <var:q3> * <var:D> ; <var:q0> := <nat:4> ; <var:q1> := <var:q1> * <nat:4> ; <var:q2> := <var:q2> * <nat:2> ; <var:q3> := <var:q3> * <nat:4> ; <var:q4> := <var:q4> * <nat:2> ; <var:z> := <var:q4> <var:z> := <var:z> + <var:q3> <var:z> := <var:z> + <var:q2> <var:z> := <var:z> + <var:q1> <var:z> := <var:z> + <var:q0> \end{verbatim} \end{definition} \begin{theorem} Assume given $ <var:G> \in \mathbb{N} $ that $ <var:D> = <var:G> $ prior to executing this list of commands it must be that we have $ <var:z> = <nat:2> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:4> $ after list of commands exits . \end{theorem} \begin{proof} Demonstrating correctness of this set of instructions is evident by Hoare reasoning . Shifting focus toward the subsequent bits of codecontained in the code segment , we have \[ \begin{tabular} {rcl} \{ <var:D> = <var:G> \} & <var:q1> := <var:D> & \{ <var:D> = <var:G> \land <var:q1> = <var:G> \} \\ \{ <var:D> = <var:G> \land <var:q1> = <var:G> \} & <var:q2> := <var:q1> * <var:D> & \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \} \\ \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \} & <var:q3> := <var:q2> * <var:D> & \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \} \\ \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \} & <var:q4> := <var:q3> * <var:D> & \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \} \\ \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \} & <var:q0> := <nat:4> & \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \land <var:q0> = <nat:4> \} \\ \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \land <var:q0> = <nat:4> \} & <var:q1> := <var:q1> * <nat:4> & \{ <var:D> = <var:G> \land <var:q1> = <nat:4> \cdot <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \land <var:q0> = <nat:4> \} \\ \{ <var:D> = <var:G> \land <var:q1> = <nat:4> \cdot <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \land <var:q0> = <nat:4> \} & <var:q2> := <var:q2> * <nat:2> & \{ <var:D> = <var:G> \land <var:q1> = <nat:4> \cdot <var:G> \land <var:q2> = <nat:2> \cdot <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \land <var:q0> = <nat:4> \} \end{tabular} Now , \[ \begin{tabular} {rcl} \{ <var:D> = <var:G> \} & <var:q1> := <var:D> & \{ <var:D> = <var:G> \land <var:q1> = <var:G> \} \\ \{ <var:D> = <var:G> \land <var:q1> = <var:G> \} & <var:q2> := <var:q1> * <var:D> & \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \} \\ \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \} & <var:q3> := <var:q2> * <var:D> & \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \} \\ \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \} & <var:q4> := <var:q3> * <var:D> & \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \} \\ \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \} & <var:q0> := <nat:4> & \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \land <var:q0> = <nat:4> \} \\ \{ <var:D> = <var:G> \land <var:q1> = <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \land <var:q0> = <nat:4> \} & <var:q1> := <var:q1> * <nat:4> & \{ <var:D> = <var:G> \land <var:q1> = <nat:4> \cdot <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \land <var:q0> = <nat:4> \} \\ \{ <var:D> = <var:G> \land <var:q1> = <nat:4> \cdot <var:G> \land <var:q2> = <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \land <var:q0> = <nat:4> \} & <var:q2> := <var:q2> * <nat:2> & \{ <var:D> = <var:G> \land <var:q1> = <nat:4> \cdot <var:G> \land <var:q2> = <nat:2> \cdot <var:G> ^ <nat:2> \land <var:q3> = <var:G> ^ <nat:3> \land <var:q4> = <var:G> ^ <nat:4> \land <var:q0> = <nat:4> \} \end{tabular} This is shown to be logically sound by the variable assignmet rule from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:q0> : string := " <var:q0> " . Definition <var:q1> : string := " <var:q1> " . Definition <var:q2> : string := " <var:q2> " . Definition <var:q3> : string := " <var:q3> " . Definition <var:q4> : string := " <var:q4> " . Definition <def:poly> := <var:q1> := <var:D> ; <var:q2> := <var:q1> * <var:D> ; <var:q3> := <var:q2> * <var:D> ; <var:q4> := <var:q3> * <var:D> ; <var:q0> := <nat:4> ; <var:q1> := <var:q1> * <nat:4> ; <var:q2> := <var:q2> * <nat:2> ; <var:q3> := <var:q3> * <nat:4> ; <var:q4> := <var:q4> * <nat:2> ; <var:z> := <var:q4> <var:z> := <var:z> + <var:q3> <var:z> := <var:z> + <var:q2> <var:z> := <var:z> + <var:q1> <var:z> := <var:z> + <var:q0> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:D> = <var:G> }} <def:poly> {{ <var:z> = <nat:2> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:q1> = <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:q1> = <var:G> /\ <var:q2> = <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:q1> = <var:G> /\ <var:q2> = <var:G> ^ <nat:2> /\ <var:q3> = <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:q1> = <var:G> /\ <var:q2> = <var:G> ^ <nat:2> /\ <var:q3> = <var:G> ^ <nat:3> /\ <var:q4> = <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:q1> = <var:G> /\ <var:q2> = <var:G> ^ <nat:2> /\ <var:q3> = <var:G> ^ <nat:3> /\ <var:q4> = <var:G> ^ <nat:4> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:q1> = <nat:4> * <var:G> /\ <var:q2> = <var:G> ^ <nat:2> /\ <var:q3> = <var:G> ^ <nat:3> /\ <var:q4> = <var:G> ^ <nat:4> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:q1> = <nat:4> * <var:G> /\ <var:q2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:q3> = <var:G> ^ <nat:3> /\ <var:q4> = <var:G> ^ <nat:4> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:q1> = <nat:4> * <var:G> /\ <var:q2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:q3> = <nat:4> * <var:G> ^ <nat:3> /\ <var:q4> = <var:G> ^ <nat:4> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:q1> = <nat:4> * <var:G> /\ <var:q2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:q3> = <nat:4> * <var:G> ^ <nat:3> /\ <var:q4> = <nat:2> * <var:G> ^ <nat:4> /\ <var:q0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:q1> = <nat:4> * <var:G> /\ <var:q2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:q3> = <nat:4> * <var:G> ^ <nat:3> /\ <var:q0> = <nat:4> /\ <var:z> = <nat:2> * <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:q1> = <nat:4> * <var:G> /\ <var:q2> = <nat:2> * <var:G> ^ <nat:2> /\ <var:q0> = <nat:4> /\ <var:z> = <nat:2> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:q1> = <nat:4> * <var:G> /\ <var:q0> = <nat:4> /\ <var:z> = <nat:2> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:q0> = <nat:4> /\ <var:z> = <nat:2> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:G> /\ <var:z> = <nat:2> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 