\begin{document} \begin{theorem} We define the following series of instructions : \begin{verbatim} <var:e> := <nat:3> ; <var:e> := <nat:2> + <var:e> * <var:o> ; <var:e> := <nat:4> + <var:e> * <var:o> ; <var:e> := <nat:3> + <var:e> * <var:o> ; <var:e> := <nat:3> + <var:e> * <var:o> ; <var:e> := <var:e> * <var:o> ; <var:e> := <nat:2> + <var:e> * <var:o> ; <var:e> := <nat:1> + <var:e> * <var:o> ; <var:e> := <nat:2> + <var:e> * <var:o> \end{verbatim} Given for all integers $ <var:O> $ that $ <var:o> = <var:O> $ prior to executing the series of commands it must be that we have $ <var:e> = <nat:3> * <var:O> ^ <nat:8> + <nat:2> * <var:O> ^ <nat:7> + <nat:4> * <var:O> ^ <nat:6> + <nat:3> * <var:O> ^ <nat:5> + <nat:3> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:o> = <var:O> \} \\ <var:e> := <nat:3> ; \\ \{ <var:o> = <var:O> \land <var:e> = <nat:3> \} \\ <var:e> := <nat:2> + <var:e> * <var:o> ; \\ \{ <var:o> = <var:O> \land <var:e> = <nat:3> \cdot <var:O> + <nat:2> \} \\ <var:e> := <nat:4> + <var:e> * <var:o> ; \\ \{ <var:o> = <var:O> \land <var:e> = <nat:3> \cdot <var:O> ^ <nat:2> + <nat:2> \cdot <var:O> + <nat:4> \} \\ <var:e> := <nat:3> + <var:e> * <var:o> ; \\ \{ <var:o> = <var:O> \land <var:e> = <nat:3> \cdot <var:O> ^ <nat:3> + <nat:2> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:3> \} \\ <var:e> := <nat:3> + <var:e> * <var:o> ; \\ \{ <var:o> = <var:O> \land <var:e> = <nat:3> \cdot <var:O> ^ <nat:4> + <nat:2> \cdot <var:O> ^ <nat:3> + <nat:4> \cdot <var:O> ^ <nat:2> + <nat:3> \cdot <var:O> + <nat:3> \} \\ <var:e> := <var:e> * <var:o> ; \\ \{ <var:o> = <var:O> \land <var:e> = <nat:3> \cdot <var:O> ^ <nat:5> + <nat:2> \cdot <var:O> ^ <nat:4> + <nat:4> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> + <nat:3> \cdot <var:O> + \} \\ <var:e> := <nat:2> + <var:e> * <var:o> ; \\ \{ <var:o> = <var:O> \land <var:e> = <nat:3> \cdot <var:O> ^ <nat:6> + <nat:2> \cdot <var:O> ^ <nat:5> + <nat:4> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> ^ <nat:3> + <nat:3> \cdot <var:O> ^ <nat:2> + <nat:2> \} \\ <var:e> := <nat:1> + <var:e> * <var:o> ; \\ \{ <var:o> = <var:O> \land <var:e> = <nat:3> \cdot <var:O> ^ <nat:7> + <nat:2> \cdot <var:O> ^ <nat:6> + <nat:4> \cdot <var:O> ^ <nat:5> + <nat:3> \cdot <var:O> ^ <nat:4> + <nat:3> \cdot <var:O> ^ <nat:3> + <nat:2> \cdot <var:O> + <nat:1> \} \\ <var:e> := <nat:2> + <var:e> * <var:o> \\ \{ <var:o> = <var:O> \land <var:e> = <nat:3> \cdot <var:O> ^ <nat:8> + <nat:2> \cdot <var:O> ^ <nat:7> + <nat:4> \cdot <var:O> ^ <nat:6> + <nat:3> \cdot <var:O> ^ <nat:5> + <nat:3> \cdot <var:O> ^ <nat:4> + <nat:2> \cdot <var:O> ^ <nat:2> + <nat:1> \cdot <var:O> + <nat:2> \} \end{eqnarray} Applying usual Hoare reasoning finalizes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:o> = <var:O> }} <var:e> := <nat:3> ; <var:e> := <nat:2> + <var:e> * <var:o> ; <var:e> := <nat:4> + <var:e> * <var:o> ; <var:e> := <nat:3> + <var:e> * <var:o> ; <var:e> := <nat:3> + <var:e> * <var:o> ; <var:e> := <var:e> * <var:o> ; <var:e> := <nat:2> + <var:e> * <var:o> ; <var:e> := <nat:1> + <var:e> * <var:o> ; <var:e> := <nat:2> + <var:e> * <var:o> {{ <var:e> = <nat:3> * <var:O> ^ <nat:8> + <nat:2> * <var:O> ^ <nat:7> + <nat:4> * <var:O> ^ <nat:6> + <nat:3> * <var:O> ^ <nat:5> + <nat:3> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:O> /\ <var:e> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:O> /\ <var:e> = <nat:3> * <var:O> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:O> /\ <var:e> = <nat:3> * <var:O> ^ <nat:2> + <nat:2> * <var:O> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:O> /\ <var:e> = <nat:3> * <var:O> ^ <nat:3> + <nat:2> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:O> /\ <var:e> = <nat:3> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:3> + <nat:4> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:O> /\ <var:e> = <nat:3> * <var:O> ^ <nat:5> + <nat:2> * <var:O> ^ <nat:4> + <nat:4> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:3> * <var:O> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:O> /\ <var:e> = <nat:3> * <var:O> ^ <nat:6> + <nat:2> * <var:O> ^ <nat:5> + <nat:4> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> + <nat:3> * <var:O> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:O> /\ <var:e> = <nat:3> * <var:O> ^ <nat:7> + <nat:2> * <var:O> ^ <nat:6> + <nat:4> * <var:O> ^ <nat:5> + <nat:3> * <var:O> ^ <nat:4> + <nat:3> * <var:O> ^ <nat:3> + <nat:2> * <var:O> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:O> /\ <var:e> = <nat:3> * <var:O> ^ <nat:8> + <nat:2> * <var:O> ^ <nat:7> + <nat:4> * <var:O> ^ <nat:6> + <nat:3> * <var:O> ^ <nat:5> + <nat:3> * <var:O> ^ <nat:4> + <nat:2> * <var:O> ^ <nat:2> + <nat:1> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 