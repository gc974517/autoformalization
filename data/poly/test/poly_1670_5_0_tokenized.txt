\begin{document} \begin{theorem} Define a code in \emph{Imp} : \begin{verbatim} <var:I0> := <nat:7> ; <var:I1> := <nat:5> ; <var:I1> := <var:I1> * <var:z> ; <var:Q> := <var:I1> ; <var:Q> := <var:Q> + <var:I0> \end{verbatim} Allow for some integers $ <var:L> $ that we have $ <var:z> = <var:L> $ prior to executing our program it follows that we have $ <var:Q> = <nat:5> * <var:L> + <nat:7> $ when list of commands has executed . \end{theorem} \begin{proof} Utilizing Hoare reasoning gives us : \begin{eqnarray} \{ <var:z> = <var:L> \} \\ <var:I0> := <nat:7> ; \\ \{ <var:z> = <var:L> \land <var:I0> = <nat:7> \} \\ <var:I1> := <nat:5> ; \\ \{ <var:z> = <var:L> \land <var:I0> = <nat:7> \land <var:I1> = <nat:5> \} \\ <var:I1> := <var:I1> * <var:z> ; \\ \{ <var:z> = <var:L> \land <var:I0> = <nat:7> \land <var:I1> = <nat:5> \cdot <var:L> \} \end{eqnarray} Allowing evaluating this series of commands produces : \begin{eqnarray} <var:Q> := <var:I1> ; \\ \{ <var:z> = <var:L> \land <var:I0> = <nat:7> \land <var:Q> = <nat:5> \cdot <var:L> \} \\ <var:Q> := <var:Q> + <var:I0> \\ \{ <var:z> = <var:L> \land <var:Q> = <nat:5> \cdot <var:L> + <nat:7> \} \end{eqnarray} Given the above , this segment of code is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:z> = <var:L> }} <var:I0> := <nat:7> ; <var:I1> := <nat:5> ; <var:I1> := <var:I1> * <var:z> ; <var:Q> := <var:I1> ; <var:Q> := <var:Q> + <var:I0> {{ <var:Q> = <nat:5> * <var:L> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:I0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:I0> = <nat:7> /\ <var:I1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:I0> = <nat:7> /\ <var:I1> = <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:I0> = <nat:7> /\ <var:Q> = <nat:5> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:Q> = <nat:5> * <var:L> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 