\begin{document} \begin{definition} Let the following set of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:H1> := <var:B> ; <var:H2> := <var:H1> * <var:B> ; <var:H0> := <nat:2> ; <var:H1> := <var:H1> * <nat:1> ; <var:H2> := <var:H2> * <nat:8> ; <var:S> := <var:H2> <var:S> := <var:S> + <var:H1> <var:S> := <var:S> + <var:H0> \end{verbatim} \end{definition} \begin{theorem} Consider the following set of instructions <def:poly> . Assuming $ <var:B> = <var:I> $ ahead of interpreting our list of commands it must be that $ <var:S> = <nat:8> \cdot <var:I> ^ <nat:2> + <nat:1> \cdot <var:I> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of this code can be accomplished using standard Hoare techniques . Shifting focus toward the proceeding bit of code contained in our set of commands , \begin{eqnarray} \{ <var:B> = <var:I> \} \, <var:H1> := <var:B> \, \{ <var:B> = <var:I> \land <var:H1> = <var:I> \} \end{eqnarray} This is shown to be logically sound by the variable assignmet rule defined in Hoare techniques . Further , we have \begin{eqnarray} \{ <var:B> = <var:I> \} \, <var:H1> := <var:B> \, \{ <var:B> = <var:I> \land <var:H1> = <var:I> \} \\ \{ <var:B> = <var:I> \land <var:H1> = <var:I> \} \, <var:H2> := <var:H1> * <var:B> \, \{ <var:B> = <var:I> \land <var:H1> = <var:I> \land <var:H2> = <var:I> ^ <nat:2> \} \\ \{ <var:B> = <var:I> \land <var:H1> = <var:I> \land <var:H2> = <var:I> ^ <nat:2> \} \, <var:H0> := <nat:2> \, \{ <var:B> = <var:I> \land <var:H1> = <var:I> \land <var:H2> = <var:I> ^ <nat:2> \land <var:H0> = <nat:2> \} \\ \{ <var:B> = <var:I> \land <var:H1> = <var:I> \land <var:H2> = <var:I> ^ <nat:2> \land <var:H0> = <nat:2> \} \, <var:H1> := <var:H1> * <nat:1> \, \{ <var:B> = <var:I> \land <var:H1> = <nat:1> \times <var:I> \land <var:H2> = <var:I> ^ <nat:2> \land <var:H0> = <nat:2> \} \end{eqnarray} This is guaranteed using the law from usual Hoare logic . Stepping through , we see \begin{eqnarray} \{ <var:B> = <var:I> \} \, <var:H1> := <var:B> \, \{ <var:B> = <var:I> \land <var:H1> = <var:I> \} \\ \{ <var:B> = <var:I> \land <var:H1> = <var:I> \} \, <var:H2> := <var:H1> * <var:B> \, \{ <var:B> = <var:I> \land <var:H1> = <var:I> \land <var:H2> = <var:I> ^ <nat:2> \} \end{eqnarray} This is guaranteed using the environment update inference rule found in standard Hoare techniques . Following , we have \begin{eqnarray} \{ <var:B> = <var:I> \} \, <var:H1> := <var:B> \, \{ <var:B> = <var:I> \land <var:H1> = <var:I> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:H0> : string := " <var:H0> " . Definition <var:H1> : string := " <var:H1> " . Definition <var:H2> : string := " <var:H2> " . Definition <def:poly> := <var:H1> := <var:B> ; <var:H2> := <var:H1> * <var:B> ; <var:H0> := <nat:2> ; <var:H1> := <var:H1> * <nat:1> ; <var:H2> := <var:H2> * <nat:8> ; <var:S> := <var:H2> <var:S> := <var:S> + <var:H1> <var:S> := <var:S> + <var:H0> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:B> = <var:I> }} <def:poly> {{ <var:S> = <nat:8> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:H1> = <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:H1> = <var:I> /\ <var:H2> = <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:H1> = <var:I> /\ <var:H2> = <var:I> ^ <nat:2> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:H1> = <nat:1> * <var:I> /\ <var:H2> = <var:I> ^ <nat:2> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:H1> = <nat:1> * <var:I> /\ <var:H2> = <nat:8> * <var:I> ^ <nat:2> /\ <var:H0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:H1> = <nat:1> * <var:I> /\ <var:H0> = <nat:2> /\ <var:S> = <nat:8> * <var:I> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:H0> = <nat:2> /\ <var:S> = <nat:8> * <var:I> ^ <nat:2> + <nat:1> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:I> /\ <var:S> = <nat:8> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 