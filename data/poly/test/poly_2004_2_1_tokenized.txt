\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} : \begin{verbatim} <var:u0> := <nat:3> ; <var:q> := <var:u0> \end{verbatim} \end{definition} \begin{theorem} Assuming --- taking $ <var:g> \in \mathbb{N} $ --- it to be that $ <var:O> = <var:g> $ prior to running the code segment it must be that $ <var:q> = <nat:3> $ . \end{theorem} \begin{proof} Proving correctness for this code segment is given through usual Hoare techniques . Moving forward , we have \begin{verbatim} { <var:O> = <var:g> } <var:u0> := <nat:3> { <var:O> = <var:g> \land <var:u0> = <nat:3> } \end{verbatim} Going forward , we have \begin{verbatim} { <var:O> = <var:g> } <var:u0> := <nat:3> { <var:O> = <var:g> \land <var:u0> = <nat:3> } \end{verbatim} This is given with the environment update inference rule of usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <def:poly> := <var:u0> := <nat:3> ; <var:q> := <var:u0> . Theorem <genH:poly_code_correct> : forall <var:g> : nat , {{ <var:O> = <var:g> }} <def:poly> {{ <var:q> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:u0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:O> = <var:g> /\ <var:q> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 