\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:Z1> := <var:b> ; <var:Z2> := <var:Z1> * <var:b> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:Z2> := <var:Z2> * <nat:9> ; <var:B> := <var:Z2> <var:B> := <var:B> + <var:Z1> <var:B> := <var:B> + <var:Z0> \end{verbatim} \end{definition} \begin{theorem} Allowing it to hold that $ <var:b> = <var:C> $ ( for positive numbers $ <var:C> $ ) ahead of evaluating the list of commands , it holds that $ <var:B> = <nat:9> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for our set of instructions is demonstrated by typical Hoare techniques . Considering the subsequent command contained in our code segment , we have the variable assignmet code \verb | <var:Z1> := <var:b> ; | . This forwards the condition $ \{ <var:b> = <var:C> \} $ toward the condition $ \{ <var:b> = <var:C> \land <var:Z1> = <var:C> \} $ . This is sound with the assignment rule defined in typical Hoare techniques . Considering the next statement contained in our set of instructions , we have the command binding $ <var:Z1> * <var:b> $ toward $ <var:Z2>$ . This command redefines the condition $ \{ <var:b> = <var:C> \land <var:Z1> = <var:C> \} $ as the postcondition $ \{ <var:b> = <var:C> \land <var:Z1> = <var:C> \land <var:Z2> = <var:C> ^ <nat:2> \} $ . Moving forward to the next step , the variable binding command giving $ <nat:4> $ as $ <var:Z0>$ . This code moves $ \{ <var:b> = <var:C> \land <var:Z1> = <var:C> \land <var:Z2> = <var:C> ^ <nat:2> \} $ toward the condition $ \{ <var:b> = <var:C> \land <var:Z1> = <var:C> \land <var:Z2> = <var:C> ^ <nat:2> \land <var:Z0> = <nat:4> \} $ . Moving forward , the environment update line \verb | <var:Z1> := <var:Z1> * <nat:4> ; | . This takes the condition $ \{ <var:b> = <var:C> \land <var:Z1> = <var:C> \land <var:Z2> = <var:C> ^ <nat:2> \land <var:Z0> = <nat:4> \} $ as $ \{ <var:b> = <var:C> \land <var:Z1> = <nat:4> \times <var:C> \land <var:Z2> = <var:C> ^ <nat:2> \land <var:Z0> = <nat:4> \} $ . Paying attention to the proceeding piece of code found in the program , we have the environment update code assigning $ <var:Z2> * <nat:9> $ to $ <var:Z2>$ . This advances the precondition $ \{ <var:b> = <var:C> \land <var:Z1> = <nat:4> \times <var:C> \land <var:Z2> = <var:C> ^ <nat:2> \land <var:Z0> = <nat:4> \} $ to $ \{ <var:b> = <var:C> \land <var:Z1> = <nat:4> \times <var:C> \land <var:Z2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:Z0> = <nat:4> \} $ . This is guaranteed by the assignment rule found in typical Hoare logic . Going to the next step , we see the assignment statement defining $ <var:Z2$ into $ <var:B>$ . This command transfers $ \{ <var:b> = <var:C> \land <var:Z1> = <nat:4> \times <var:C> \land <var:Z2> = <nat:9> \times <var:C> ^ <nat:2> \land <var:Z0> = <nat:4> \} $ into $ \{ <var:b> = <var:C> \land <var:Z1> = <nat:4> \times <var:C> \land <var:Z0> = <nat:4> \land <var:B> = <nat:9> \times <var:C> ^ <nat:2> \} $ . Taking another step toward the next bit of code seen in our list of commands , we have the environment update line \verb | <var:B> := <var:B> + <var:Z1> | . This forwards $ \{ <var:b> = <var:C> \land <var:Z1> = <nat:4> \times <var:C> \land <var:Z0> = <nat:4> \land <var:B> = <nat:9> \times <var:C> ^ <nat:2> \} $ to $ \{ <var:b> = <var:C> \land <var:Z0> = <nat:4> \land <var:B> = <nat:9> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> \} $ . This is sound through the assignment law in typical Hoare reasoning . Moving forward to the upcoming bit of code in our set of commands , the environment update code \verb | <var:B> := <var:B> + <var:Z0> | . This advances the condition $ \{ <var:b> = <var:C> \land <var:Z0> = <nat:4> \land <var:B> = <nat:9> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> \} $ into $ \{ <var:b> = <var:C> \land <var:B> = <nat:9> \times <var:C> ^ <nat:2> + <nat:4> \times <var:C> + <nat:4> \} $ . This is given with the assignment rule given in Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Definition <var:Z2> : string := " <var:Z2> " . Definition <def:poly> := <var:Z1> := <var:b> ; <var:Z2> := <var:Z1> * <var:b> ; <var:Z0> := <nat:4> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:Z2> := <var:Z2> * <nat:9> ; <var:B> := <var:Z2> <var:B> := <var:B> + <var:Z1> <var:B> := <var:B> + <var:Z0> . Theorem <genH:poly_code_correct> : forall <var:C> : nat , {{ <var:b> = <var:C> }} <def:poly> {{ <var:B> = <nat:9> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:Z1> = <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:Z1> = <var:C> /\ <var:Z2> = <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:Z1> = <var:C> /\ <var:Z2> = <var:C> ^ <nat:2> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:Z1> = <nat:4> * <var:C> /\ <var:Z2> = <var:C> ^ <nat:2> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:Z1> = <nat:4> * <var:C> /\ <var:Z2> = <nat:9> * <var:C> ^ <nat:2> /\ <var:Z0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:Z1> = <nat:4> * <var:C> /\ <var:Z0> = <nat:4> /\ <var:B> = <nat:9> * <var:C> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:Z0> = <nat:4> /\ <var:B> = <nat:9> * <var:C> ^ <nat:2> + <nat:4> * <var:C> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:C> /\ <var:B> = <nat:9> * <var:C> ^ <nat:2> + <nat:4> * <var:C> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 