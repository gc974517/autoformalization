\begin{document} \begin{theorem} Consider the following list of instructions in \emph{Imp} : \begin{verbatim} <var:Q1> := <var:R> ; <var:Q2> := <var:Q1> * <var:R> ; <var:Q3> := <var:Q2> * <var:R> ; <var:Q0> := <nat:1> ; <var:Q3> := <var:Q3> * <nat:1> ; <var:U> := <var:Q3> <var:U> := <var:U> + <var:Q0> \end{verbatim} Assuming that we have $ <var:R> = <var:u> $ ahead of executing this set of instructions it must be that we see $ <var:U> = <nat:1> * <var:u> ^ <nat:3> + <nat:1> $ when code has exited . \end{theorem} \begin{proof} The course of logic for the series of instructions can be accomplished by standard Hoare reasoning . Following , the assignment command \verb | <var:Q1> := <var:R> ; | . This transfers the condition $ \{ <var:R> = <var:u> \} $ toward $ \{ <var:R> = <var:u> \land <var:Q1> = <var:u> \} $ . Moving forward to the next step , the variable binding code letting $ <var:Q1> * <var:R> $ as $ <var:Q2>$ . This code takes the condition $ \{ <var:R> = <var:u> \land <var:Q1> = <var:u> \} $ into the postcondition $ \{ <var:R> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \} $ . This is shown with the assignment law given in typical Hoare reasoning . Stepping forward , we see the assignment statement \verb | <var:Q3> := <var:Q2> * <var:R> ; | . This redefines the precondition $ \{ <var:R> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \} $ into the condition $ \{ <var:R> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \land <var:Q3> = <var:u> ^ <nat:3> \} $ . This is guaranteed through the assignment scheme from Hoare logic . Shifting focus toward the following step found in our set of instructions , we have the variable update line \verb | <var:Q0> := <nat:1> ; | . This command advances the precondition $ \{ <var:R> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \land <var:Q3> = <var:u> ^ <nat:3> \} $ to the condition $ \{ <var:R> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \land <var:Q3> = <var:u> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ . This is guaranteed with the assignment inference rule of standard Hoare techniques . Observing the proceeding statement in our series of instructions , the variable assignmet statement \verb | <var:Q3> := <var:Q3> * <nat:1> ; | . This command moves $ \{ <var:R> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \land <var:Q3> = <var:u> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ to the postcondition $ \{ <var:R> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \land <var:Q3> = <nat:1> \cdot <var:u> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ . This is ensured by the assignment rule defined by typical Hoare reasoning . Jumping to the following bit of code contained in the list of instructions , we see the variable update statement \verb | <var:U> := <var:Q3> | . This forwards the precondition $ \{ <var:R> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \land <var:Q3> = <nat:1> \cdot <var:u> ^ <nat:3> \land <var:Q0> = <nat:1> \} $ as the postcondition $ \{ <var:R> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \land <var:Q0> = <nat:1> \land <var:U> = <nat:1> \cdot <var:u> ^ <nat:3> \} $ . This is sound by the assignment law given by typical Hoare logic . Moving on to the next line in our series of instructions , we see the assignment command letting $ <var:U> + <var:Q0$ into $ <var:U>$ . This command advances $ \{ <var:R> = <var:u> \land <var:Q1> = <var:u> \land <var:Q2> = <var:u> ^ <nat:2> \land <var:Q0> = <nat:1> \land <var:U> = <nat:1> \cdot <var:u> ^ <nat:3> \} $ toward the postcondition $ \{ <var:R> = <var:u> \land <var:U> = <nat:1> \cdot <var:u> ^ <nat:3> + <nat:1> \} $ . This is guaranteed by the assignment inference rule given by typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Q0> : string := " <var:Q0> " . Definition <var:Q1> : string := " <var:Q1> " . Definition <var:Q2> : string := " <var:Q2> " . Definition <var:Q3> : string := " <var:Q3> " . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:R> = <var:u> }} <var:Q1> := <var:R> ; <var:Q2> := <var:Q1> * <var:R> ; <var:Q3> := <var:Q2> * <var:R> ; <var:Q0> := <nat:1> ; <var:Q3> := <var:Q3> * <nat:1> ; <var:U> := <var:Q3> <var:U> := <var:U> + <var:Q0> {{ <var:U> = <nat:1> * <var:u> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:Q1> = <var:u> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:Q1> = <var:u> /\ <var:Q2> = <var:u> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:Q1> = <var:u> /\ <var:Q2> = <var:u> ^ <nat:2> /\ <var:Q3> = <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:Q1> = <var:u> /\ <var:Q2> = <var:u> ^ <nat:2> /\ <var:Q3> = <var:u> ^ <nat:3> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:Q1> = <var:u> /\ <var:Q2> = <var:u> ^ <nat:2> /\ <var:Q3> = <nat:1> * <var:u> ^ <nat:3> /\ <var:Q0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:Q1> = <var:u> /\ <var:Q2> = <var:u> ^ <nat:2> /\ <var:Q0> = <nat:1> /\ <var:U> = <nat:1> * <var:u> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:u> /\ <var:U> = <nat:1> * <var:u> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 