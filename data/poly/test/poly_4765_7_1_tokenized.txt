\begin{document} \begin{theorem} Define a list of instructions in \emph{Imp} such that \begin{verbatim} <var:y1> := <var:c> ; <var:y2> := <var:y1> * <var:c> ; <var:y3> := <var:y2> * <var:c> ; <var:y0> := <nat:1> ; <var:y3> := <var:y3> * <nat:3> ; <var:j> := <var:y3> <var:j> := <var:j> + <var:y0> \end{verbatim} Allow it to be that $ <var:c> = <var:z> $ ahead of the evaluation of this series of commands it follows that we see $ <var:j> = <nat:3> * <var:z> ^ <nat:3> + <nat:1> $ after code has finished . \end{theorem} \begin{proof} The method of proof for this list of commands is done using usual Hoare logic . Taking a look at the upcoming step seen in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:c> = <var:z> \} & <var:y1> := <var:c> & \{ <var:c> = <var:z> \land <var:y1> = <var:z> \} \end{tabular} Advancing on , we have \[ \begin{tabular} {rcl} \{ <var:c> = <var:z> \} & <var:y1> := <var:c> & \{ <var:c> = <var:z> \land <var:y1> = <var:z> \} \\ \{ <var:c> = <var:z> \land <var:y1> = <var:z> \} & <var:y2> := <var:y1> * <var:c> & \{ <var:c> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \} \\ \{ <var:c> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \} & <var:y3> := <var:y2> * <var:c> & \{ <var:c> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \} \end{tabular} This is sound by the variable assignmet scheme given by Hoare reasoning . Considering the subsequent commands seen in our list of commands , we see \[ \begin{tabular} {rcl} \{ <var:c> = <var:z> \} & <var:y1> := <var:c> & \{ <var:c> = <var:z> \land <var:y1> = <var:z> \} \\ \{ <var:c> = <var:z> \land <var:y1> = <var:z> \} & <var:y2> := <var:y1> * <var:c> & \{ <var:c> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \} \\ \{ <var:c> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \} & <var:y3> := <var:y2> * <var:c> & \{ <var:c> = <var:z> \land <var:y1> = <var:z> \land <var:y2> = <var:z> ^ <nat:2> \land <var:y3> = <var:z> ^ <nat:3> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:c> = <var:z> }} <var:y1> := <var:c> ; <var:y2> := <var:y1> * <var:c> ; <var:y3> := <var:y2> * <var:c> ; <var:y0> := <nat:1> ; <var:y3> := <var:y3> * <nat:3> ; <var:j> := <var:y3> <var:j> := <var:j> + <var:y0> {{ <var:j> = <nat:3> * <var:z> ^ <nat:3> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:y1> = <var:z> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:y1> = <var:z> /\ <var:y2> = <var:z> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:y1> = <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y3> = <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:y1> = <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y3> = <var:z> ^ <nat:3> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:y1> = <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y3> = <nat:3> * <var:z> ^ <nat:3> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:y1> = <var:z> /\ <var:y2> = <var:z> ^ <nat:2> /\ <var:y0> = <nat:1> /\ <var:j> = <nat:3> * <var:z> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:z> /\ <var:j> = <nat:3> * <var:z> ^ <nat:3> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 