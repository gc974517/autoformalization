\begin{document} \begin{definition} Define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:m0> := <nat:4> ; <var:m1> := <nat:7> ; <var:m1> := <var:m1> * <var:P> ; <var:m2> := <nat:8> ; <var:m2> := <var:m2> * <var:P> ; <var:m2> := <var:m2> * <var:P> ; <var:m3> := <nat:1> ; <var:m3> := <var:m3> * <var:P> ; <var:m3> := <var:m3> * <var:P> ; <var:m3> := <var:m3> * <var:P> ; <var:q> := <var:m3> ; <var:q> := <var:q> + <var:m2> ; <var:q> := <var:q> + <var:m1> ; <var:q> := <var:q> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Let the following list of commands <def:poly> in \emph{Imp} . Assume that we have $ <var:P> = <var:M> $ ahead of the execution of the list of commands , it follows that we have $ <var:q> = <nat:1> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:4> $ . \end{theorem} \begin{proof} The proof of this code segment can be done through standard Hoare logic . Taking a look at the proceeding line of code found in our series of commands , we see the variable binding code giving $ <nat:4> $ to $ <var:m0>$ . This line forwards the condition $ \{ <var:P> = <var:M> \} $ to the postcondition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \} $ . This is given by the assignment inference rule of standard Hoare logic . Taking another step toward the subsequent command contained in the set of commands , the assignment code yielding $ <nat:7> $ as $ <var:m1>$ . This moves $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \} $ as the condition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \} $ . This is known to be sound by the assignment inference rule found in Hoare reasoning . Observing the subsequent step seen in our set of instructions , we see the variable binding line yielding $ <var:m1> * <var:P> $ to $ <var:m1>$ . This code advances the precondition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \} $ toward $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \} $ . Moving on , the assignment code \verb | <var:m2> := <nat:8> ; | . This transfers the condition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \} $ toward the condition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \} $ . This is sound using the assignment inference rule obtained from standard Hoare techniques . Moving onward , we see the variable assignmet code \verb | <var:m2> := <var:m2> * <var:P> ; | . This takes the condition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \} $ as the postcondition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> \} $ . This is given with the assignment inference rule from standard Hoare logic . Shifting focus toward the next command contained in the series of instructions , we see the assignment command assigning $ <var:m2> * <var:P> $ into $ <var:m2>$ . This advances the condition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> \} $ into $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> ^ <nat:2> \} $ . Going to the next step , the assignment statement binding $ <nat:1> $ into $ <var:m3>$ . This takes the condition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> ^ <nat:2> \} $ into the postcondition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:m3> = <nat:1> \} $ . Honing in on the next statement contained in the code segment , we have the binding command \verb | <var:m3> := <var:m3> * <var:P> ; | . This code takes the precondition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:m3> = <nat:1> \} $ into the condition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:M> \} $ . Immediately following , we have the binding command \verb | <var:m3> := <var:m3> * <var:P> ; | . This line moves $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:M> \} $ toward the condition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:M> ^ <nat:2> \} $ . This is given by the assignment scheme defined in typical Hoare reasoning . Focusing on the following line seen in the series of instructions , the line letting $ <var:m3> * <var:P> $ toward $ <var:m3>$ . This command moves the condition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:M> ^ <nat:2> \} $ toward the condition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:M> ^ <nat:3> \} $ . Paying attention to the following bit of code seen in our series of commands , the assignment command letting $ <var:m3> $ to $ <var:q>$ . This transfers the condition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:m3> = <nat:1> \cdot <var:M> ^ <nat:3> \} $ to the condition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:q> = <nat:1> \cdot <var:M> ^ <nat:3> \} $ . Now , the environment update line yielding $ <var:q> + <var:m2> $ toward $ <var:q>$ . This redefines $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:m2> = <nat:8> \cdot <var:M> ^ <nat:2> \land <var:q> = <nat:1> \cdot <var:M> ^ <nat:3> \} $ toward the condition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:q> = <nat:1> \cdot <var:M> ^ <nat:3> + <nat:8> \cdot <var:M> ^ <nat:2> \} $ . Taking a look at the next statement in the code segment , the variable update statement yielding $ <var:q> + <var:m1> $ as $ <var:q>$ . This statement takes the precondition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:m1> = <nat:7> \cdot <var:M> \land <var:q> = <nat:1> \cdot <var:M> ^ <nat:3> + <nat:8> \cdot <var:M> ^ <nat:2> \} $ into the postcondition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:q> = <nat:1> \cdot <var:M> ^ <nat:3> + <nat:8> \cdot <var:M> ^ <nat:2> + <nat:7> \cdot <var:M> \} $ . This is deduced through the assignment inference rule found in typical Hoare logic . Immediately following , the line defining $ <var:q> + <var:m0$ toward $ <var:q>$ . This moves the precondition $ \{ <var:P> = <var:M> \land <var:m0> = <nat:4> \land <var:q> = <nat:1> \cdot <var:M> ^ <nat:3> + <nat:8> \cdot <var:M> ^ <nat:2> + <nat:7> \cdot <var:M> \} $ as $ \{ <var:P> = <var:M> \land <var:q> = <nat:1> \cdot <var:M> ^ <nat:3> + <nat:8> \cdot <var:M> ^ <nat:2> + <nat:7> \cdot <var:M> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <var:m3> : string := " <var:m3> " . Definition <def:poly> := <var:m0> := <nat:4> ; <var:m1> := <nat:7> ; <var:m1> := <var:m1> * <var:P> ; <var:m2> := <nat:8> ; <var:m2> := <var:m2> * <var:P> ; <var:m2> := <var:m2> * <var:P> ; <var:m3> := <nat:1> ; <var:m3> := <var:m3> * <var:P> ; <var:m3> := <var:m3> * <var:P> ; <var:m3> := <var:m3> * <var:P> ; <var:q> := <var:m3> ; <var:q> := <var:q> + <var:m2> ; <var:q> := <var:q> + <var:m1> ; <var:q> := <var:q> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:M> : nat , {{ <var:P> = <var:M> }} <def:poly> {{ <var:q> = <nat:1> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:m0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:7> * <var:M> /\ <var:m2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:7> * <var:M> /\ <var:m2> = <nat:8> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:7> * <var:M> /\ <var:m2> = <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:7> * <var:M> /\ <var:m2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:m3> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:7> * <var:M> /\ <var:m2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:7> * <var:M> /\ <var:m2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:7> * <var:M> /\ <var:m2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:m3> = <nat:1> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:7> * <var:M> /\ <var:m2> = <nat:8> * <var:M> ^ <nat:2> /\ <var:q> = <nat:1> * <var:M> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:m0> = <nat:4> /\ <var:m1> = <nat:7> * <var:M> /\ <var:q> = <nat:1> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:m0> = <nat:4> /\ <var:q> = <nat:1> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> + <nat:7> * <var:M> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:M> /\ <var:q> = <nat:1> * <var:M> ^ <nat:3> + <nat:8> * <var:M> ^ <nat:2> + <nat:7> * <var:M> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 