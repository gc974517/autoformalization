\begin{document} \begin{theorem} We define the following program : \begin{verbatim} <var:B> := <nat:3> ; <var:B> := <nat:3> + <var:B> * <var:i> ; <var:B> := <var:B> * <var:i> ; <var:B> := <var:B> * <var:i> ; <var:B> := <nat:1> + <var:B> * <var:i> ; <var:B> := <nat:1> + <var:B> * <var:i> \end{verbatim} Allowing that $ <var:i> = <var:J> $ ahead of evaluating this list of commands , then $ <var:B> = <nat:3> \cdot <var:J> ^ <nat:5> + <nat:3> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:i> = <var:J> \} \\ <var:B> := <nat:3> ; \\ \{ <var:i> = <var:J> \land <var:B> = <nat:3> \} \\ <var:B> := <nat:3> + <var:B> * <var:i> ; \\ \{ <var:i> = <var:J> \land <var:B> = <nat:3> \cdot <var:J> + <nat:3> \} \\ <var:B> := <var:B> * <var:i> ; \\ \{ <var:i> = <var:J> \land <var:B> = <nat:3> \cdot <var:J> ^ <nat:2> + <nat:3> \cdot <var:J> + \} \\ <var:B> := <var:B> * <var:i> ; \\ \{ <var:i> = <var:J> \land <var:B> = <nat:3> \cdot <var:J> ^ <nat:3> + <nat:3> \cdot <var:J> ^ <nat:2> + \} \\ <var:B> := <nat:1> + <var:B> * <var:i> ; \\ \{ <var:i> = <var:J> \land <var:B> = <nat:3> \cdot <var:J> ^ <nat:4> + <nat:3> \cdot <var:J> ^ <nat:3> + <nat:1> \} \\ <var:B> := <nat:1> + <var:B> * <var:i> \\ \{ <var:i> = <var:J> \land <var:B> = <nat:3> \cdot <var:J> ^ <nat:5> + <nat:3> \cdot <var:J> ^ <nat:4> + <nat:1> \cdot <var:J> + <nat:1> \} \end{eqnarray} The application of Hoare logic resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:i> = <var:J> }} <var:B> := <nat:3> ; <var:B> := <nat:3> + <var:B> * <var:i> ; <var:B> := <var:B> * <var:i> ; <var:B> := <var:B> * <var:i> ; <var:B> := <nat:1> + <var:B> * <var:i> ; <var:B> := <nat:1> + <var:B> * <var:i> {{ <var:B> = <nat:3> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:1> * <var:J> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:J> /\ <var:B> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:J> /\ <var:B> = <nat:3> * <var:J> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:J> /\ <var:B> = <nat:3> * <var:J> ^ <nat:2> + <nat:3> * <var:J> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:J> /\ <var:B> = <nat:3> * <var:J> ^ <nat:3> + <nat:3> * <var:J> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:J> /\ <var:B> = <nat:3> * <var:J> ^ <nat:4> + <nat:3> * <var:J> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:J> /\ <var:B> = <nat:3> * <var:J> ^ <nat:5> + <nat:3> * <var:J> ^ <nat:4> + <nat:1> * <var:J> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 