\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:g0> := <nat:8> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:l> ; <var:m> := <var:g1> ; <var:m> := <var:m> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Consider a set of instructions <def:poly> . Assume it to be that $ <var:l> = <var:H> $ before the execution of our code , then we see $ <var:m> = <nat:7> * <var:H> + <nat:8> $ after list of instructions has finished executing . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:H> \} \\ <var:g0> := <nat:8> ; \\ \{ <var:l> = <var:H> \land <var:g0> = <nat:8> \} \\ <var:g1> := <nat:7> ; \\ \{ <var:l> = <var:H> \land <var:g0> = <nat:8> \land <var:g1> = <nat:7> \} \\ <var:g1> := <var:g1> * <var:l> ; \\ \{ <var:l> = <var:H> \land <var:g0> = <nat:8> \land <var:g1> = <nat:7> * <var:H> \} \\ <var:m> := <var:g1> ; \\ \{ <var:l> = <var:H> \land <var:g0> = <nat:8> \land <var:m> = <nat:7> * <var:H> \} \\ <var:m> := <var:m> + <var:g0> \\ \{ <var:l> = <var:H> \land <var:m> = <nat:7> * <var:H> + <nat:8> \} \end{eqnarray} Utilizing Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:8> ; <var:g1> := <nat:7> ; <var:g1> := <var:g1> * <var:l> ; <var:m> := <var:g1> ; <var:m> := <var:m> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:l> = <var:H> }} <def:poly> {{ <var:m> = <nat:7> * <var:H> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:g0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:g0> = <nat:8> /\ <var:g1> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:g0> = <nat:8> /\ <var:m> = <nat:7> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:H> /\ <var:m> = <nat:7> * <var:H> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 