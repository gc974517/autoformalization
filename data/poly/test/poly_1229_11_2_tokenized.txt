\begin{document} \begin{theorem} Take the following series of instructions in \emph{Imp} : \begin{verbatim} <var:w> := <nat:4> ; <var:w> := <nat:2> + <var:w> * <var:h> ; <var:w> := <nat:2> + <var:w> * <var:h> ; <var:w> := <var:w> * <var:h> ; <var:w> := <nat:1> + <var:w> * <var:h> ; <var:w> := <nat:3> + <var:w> * <var:h> ; <var:w> := <nat:2> + <var:w> * <var:h> ; <var:w> := <nat:4> + <var:w> * <var:h> ; <var:w> := <nat:2> + <var:w> * <var:h> ; <var:w> := <nat:3> + <var:w> * <var:h> ; <var:w> := <nat:3> + <var:w> * <var:h> \end{verbatim} Assuming ( assuming some positive numbers $ <var:t> $ ) that we have $ <var:h> = <var:t> $ prior to running the code it follows that we see $ <var:w> = <nat:4> \times <var:t> ^ <nat:10> + <nat:2> \times <var:t> ^ <nat:9> + <nat:2> \times <var:t> ^ <nat:8> + <nat:1> \times <var:t> ^ <nat:6> + <nat:3> \times <var:t> ^ <nat:5> + <nat:2> \times <var:t> ^ <nat:4> + <nat:4> \times <var:t> ^ <nat:3> + <nat:2> \times <var:t> ^ <nat:2> + <nat:3> \times <var:t> + <nat:3> $ . \end{theorem} \begin{proof} The method of proof for the set of instructions can be done through standard Hoare techniques . Jumping to the upcoming command contained in our code segment , the variable binding code assigning $ <nat:4> $ toward $ <var:w>$ . This line transfers the condition $ \{ <var:h> = <var:t> \} $ toward the condition $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \} $ . This is ensured with the assignment inference rule given in typical Hoare techniques . Going to the next step , we have the command defining $ <nat:2> + <var:w> * <var:h> $ as $ <var:w>$ . This command takes $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \} $ into the condition $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> + <nat:2> \} $ . Going forward , we see the line \verb | <var:w> := <nat:2> + <var:w> * <var:h> ; | . This command takes $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> + <nat:2> \} $ to the condition $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:2> \} $ . This is ensured using the assignment scheme given by standard Hoare reasoning . Immediately after , we have the variable binding command binding $ <var:w> * <var:h> $ to $ <var:w>$ . This line transfers the precondition $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:2> \} $ to $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + \} $ . Taking a look at the following statement contained in the list of instructions , we see the variable update statement giving $ <nat:1> + <var:w> * <var:h> $ as $ <var:w>$ . This code takes $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + \} $ toward $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:4> + <nat:2> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:1> \} $ . Observing the next piece of code contained in the list of commands , we have the variable update line \verb | <var:w> := <nat:3> + <var:w> * <var:h> ; | . This advances the precondition $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:4> + <nat:2> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:1> \} $ to the condition $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:5> + <nat:2> \cdot <var:t> ^ <nat:4> + <nat:2> \cdot <var:t> ^ <nat:3> + <nat:1> \cdot <var:t> + <nat:3> \} $ . This is deduced using the assignment inference rule given in usual Hoare reasoning . Paying attention to the next statement seen in the segment of code , we have the variable binding code \verb | <var:w> := <nat:2> + <var:w> * <var:h> ; | . This line redefines the condition $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:5> + <nat:2> \cdot <var:t> ^ <nat:4> + <nat:2> \cdot <var:t> ^ <nat:3> + <nat:1> \cdot <var:t> + <nat:3> \} $ into the postcondition $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:6> + <nat:2> \cdot <var:t> ^ <nat:5> + <nat:2> \cdot <var:t> ^ <nat:4> + <nat:1> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:2> \} $ . Moving on to the subsequent line of code seen in our code segment , the variable binding line binding $ <nat:4> + <var:w> * <var:h> $ to $ <var:w>$ . This code advances $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:6> + <nat:2> \cdot <var:t> ^ <nat:5> + <nat:2> \cdot <var:t> ^ <nat:4> + <nat:1> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:2> \} $ as the postcondition $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:7> + <nat:2> \cdot <var:t> ^ <nat:6> + <nat:2> \cdot <var:t> ^ <nat:5> + <nat:1> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:4> \} $ . Jumping to the next bit of code contained in our list of commands , we see the binding statement assigning $ <nat:2> + <var:w> * <var:h> $ to $ <var:w>$ . This command redefines the precondition $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:7> + <nat:2> \cdot <var:t> ^ <nat:6> + <nat:2> \cdot <var:t> ^ <nat:5> + <nat:1> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:4> \} $ as $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:8> + <nat:2> \cdot <var:t> ^ <nat:7> + <nat:2> \cdot <var:t> ^ <nat:6> + <nat:1> \cdot <var:t> ^ <nat:4> + <nat:3> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:2> \} $ . Taking another step toward the next piece of code contained in the list of commands , the environment update code \verb | <var:w> := <nat:3> + <var:w> * <var:h> ; | . This statement moves $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:8> + <nat:2> \cdot <var:t> ^ <nat:7> + <nat:2> \cdot <var:t> ^ <nat:6> + <nat:1> \cdot <var:t> ^ <nat:4> + <nat:3> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:4> \cdot <var:t> + <nat:2> \} $ to $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:9> + <nat:2> \cdot <var:t> ^ <nat:8> + <nat:2> \cdot <var:t> ^ <nat:7> + <nat:1> \cdot <var:t> ^ <nat:5> + <nat:3> \cdot <var:t> ^ <nat:4> + <nat:2> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:3> \} $ . This is sound through the assignment rule defined by usual Hoare logic . Focusing on the proceeding piece of code found in the set of instructions , we have the variable update command yielding $ <nat:3> + <var:w> * <var:h$ to $ <var:w>$ . This takes $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:9> + <nat:2> \cdot <var:t> ^ <nat:8> + <nat:2> \cdot <var:t> ^ <nat:7> + <nat:1> \cdot <var:t> ^ <nat:5> + <nat:3> \cdot <var:t> ^ <nat:4> + <nat:2> \cdot <var:t> ^ <nat:3> + <nat:4> \cdot <var:t> ^ <nat:2> + <nat:2> \cdot <var:t> + <nat:3> \} $ as $ \{ <var:h> = <var:t> \land <var:w> = <nat:4> \cdot <var:t> ^ <nat:10> + <nat:2> \cdot <var:t> ^ <nat:9> + <nat:2> \cdot <var:t> ^ <nat:8> + <nat:1> \cdot <var:t> ^ <nat:6> + <nat:3> \cdot <var:t> ^ <nat:5> + <nat:2> \cdot <var:t> ^ <nat:4> + <nat:4> \cdot <var:t> ^ <nat:3> + <nat:2> \cdot <var:t> ^ <nat:2> + <nat:3> \cdot <var:t> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:h> = <var:t> }} <var:w> := <nat:4> ; <var:w> := <nat:2> + <var:w> * <var:h> ; <var:w> := <nat:2> + <var:w> * <var:h> ; <var:w> := <var:w> * <var:h> ; <var:w> := <nat:1> + <var:w> * <var:h> ; <var:w> := <nat:3> + <var:w> * <var:h> ; <var:w> := <nat:2> + <var:w> * <var:h> ; <var:w> := <nat:4> + <var:w> * <var:h> ; <var:w> := <nat:2> + <var:w> * <var:h> ; <var:w> := <nat:3> + <var:w> * <var:h> ; <var:w> := <nat:3> + <var:w> * <var:h> {{ <var:w> = <nat:4> * <var:t> ^ <nat:10> + <nat:2> * <var:t> ^ <nat:9> + <nat:2> * <var:t> ^ <nat:8> + <nat:1> * <var:t> ^ <nat:6> + <nat:3> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:w> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:w> = <nat:4> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:w> = <nat:4> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:w> = <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:w> = <nat:4> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:w> = <nat:4> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:1> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:w> = <nat:4> * <var:t> ^ <nat:6> + <nat:2> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:1> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:w> = <nat:4> * <var:t> ^ <nat:7> + <nat:2> * <var:t> ^ <nat:6> + <nat:2> * <var:t> ^ <nat:5> + <nat:1> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:w> = <nat:4> * <var:t> ^ <nat:8> + <nat:2> * <var:t> ^ <nat:7> + <nat:2> * <var:t> ^ <nat:6> + <nat:1> * <var:t> ^ <nat:4> + <nat:3> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:4> * <var:t> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:w> = <nat:4> * <var:t> ^ <nat:9> + <nat:2> * <var:t> ^ <nat:8> + <nat:2> * <var:t> ^ <nat:7> + <nat:1> * <var:t> ^ <nat:5> + <nat:3> * <var:t> ^ <nat:4> + <nat:2> * <var:t> ^ <nat:3> + <nat:4> * <var:t> ^ <nat:2> + <nat:2> * <var:t> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:t> /\ <var:w> = <nat:4> * <var:t> ^ <nat:10> + <nat:2> * <var:t> ^ <nat:9> + <nat:2> * <var:t> ^ <nat:8> + <nat:1> * <var:t> ^ <nat:6> + <nat:3> * <var:t> ^ <nat:5> + <nat:2> * <var:t> ^ <nat:4> + <nat:4> * <var:t> ^ <nat:3> + <nat:2> * <var:t> ^ <nat:2> + <nat:3> * <var:t> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 