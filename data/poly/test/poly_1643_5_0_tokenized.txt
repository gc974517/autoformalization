\begin{document} \begin{theorem} We define a segment of code such that \begin{verbatim} <var:d0> := <nat:4> ; <var:d1> := <nat:8> ; <var:d1> := <var:d1> * <var:F> ; <var:O> := <var:d1> ; <var:O> := <var:O> + <var:d0> \end{verbatim} Assume it to hold that $ <var:F> = <var:I> $ --- given all whole numbers $ <var:I> $ --- ahead of running the series of instructions , then we see $ <var:O> = <nat:8> \cdot <var:I> + <nat:4> $ after program exits . \end{theorem} \begin{proof} Utilizing Hoare logic gives us : \begin{eqnarray} \{ <var:F> = <var:I> \} \\ <var:d0> := <nat:4> ; \\ \{ <var:F> = <var:I> \land <var:d0> = <nat:4> \} \\ <var:d1> := <nat:8> ; \\ \{ <var:F> = <var:I> \land <var:d0> = <nat:4> \land <var:d1> = <nat:8> \} \\ <var:d1> := <var:d1> * <var:F> ; \\ \{ <var:F> = <var:I> \land <var:d0> = <nat:4> \land <var:d1> = <nat:8> \times <var:I> \} \\ <var:O> := <var:d1> ; \\ \{ <var:F> = <var:I> \land <var:d0> = <nat:4> \land <var:O> = <nat:8> \times <var:I> \} \\ <var:O> := <var:O> + <var:d0> \\ \{ <var:F> = <var:I> \land <var:O> = <nat:8> \times <var:I> + <nat:4> \} \end{eqnarray} As a consequence , the segment of code has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:d0> : string := " <var:d0> " . Definition <var:d1> : string := " <var:d1> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:F> = <var:I> }} <var:d0> := <nat:4> ; <var:d1> := <nat:8> ; <var:d1> := <var:d1> * <var:F> ; <var:O> := <var:d1> ; <var:O> := <var:O> + <var:d0> {{ <var:O> = <nat:8> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:d0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:d0> = <nat:4> /\ <var:d1> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:d0> = <nat:4> /\ <var:O> = <nat:8> * <var:I> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:F> = <var:I> /\ <var:O> = <nat:8> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 