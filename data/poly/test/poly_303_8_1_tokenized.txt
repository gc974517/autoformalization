\begin{document} \begin{theorem} Define the following series of instructions as \begin{verbatim} <var:N1> := <var:t> ; <var:N2> := <var:N1> * <var:t> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:2> ; <var:N2> := <var:N2> * <nat:1> ; <var:y> := <var:N2> <var:y> := <var:y> + <var:N1> <var:y> := <var:y> + <var:N0> \end{verbatim} Assuming it to hold that $ <var:t> = <var:r> $ before evaluating this code , it must be that we see $ <var:y> = <nat:1> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:3> $ when series of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:t> = <var:r> \} \\ <var:N1> := <var:t> ; \\ \{ <var:t> = <var:r> \land <var:N1> = <var:r> \} \end{eqnarray} Continuing the evaluation of our list of instructions results in : \begin{eqnarray} <var:N2> := <var:N1> * <var:t> ; \\ \{ <var:t> = <var:r> \land <var:N1> = <var:r> \land <var:N2> = <var:r> ^ <nat:2> \} \\ <var:N0> := <nat:3> ; \\ \{ <var:t> = <var:r> \land <var:N1> = <var:r> \land <var:N2> = <var:r> ^ <nat:2> \land <var:N0> = <nat:3> \} \\ <var:N1> := <var:N1> * <nat:2> ; \\ \{ <var:t> = <var:r> \land <var:N1> = <nat:2> \cdot <var:r> \land <var:N2> = <var:r> ^ <nat:2> \land <var:N0> = <nat:3> \} \\ <var:N2> := <var:N2> * <nat:1> ; \\ \{ <var:t> = <var:r> \land <var:N1> = <nat:2> \cdot <var:r> \land <var:N2> = <nat:1> \cdot <var:r> ^ <nat:2> \land <var:N0> = <nat:3> \} \\ <var:y> := <var:N2> \\ \{ <var:t> = <var:r> \land <var:N1> = <nat:2> \cdot <var:r> \land <var:N0> = <nat:3> \land <var:y> = <nat:1> \cdot <var:r> ^ <nat:2> \} \\ <var:y> := <var:y> + <var:N1> \\ \{ <var:t> = <var:r> \land <var:N0> = <nat:3> \land <var:y> = <nat:1> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> \} \\ <var:y> := <var:y> + <var:N0> \\ \{ <var:t> = <var:r> \land <var:y> = <nat:1> \cdot <var:r> ^ <nat:2> + <nat:2> \cdot <var:r> + <nat:3> \} \end{eqnarray} Applying typical Hoare logic ends the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:t> = <var:r> }} <var:N1> := <var:t> ; <var:N2> := <var:N1> * <var:t> ; <var:N0> := <nat:3> ; <var:N1> := <var:N1> * <nat:2> ; <var:N2> := <var:N2> * <nat:1> ; <var:y> := <var:N2> <var:y> := <var:y> + <var:N1> <var:y> := <var:y> + <var:N0> {{ <var:y> = <nat:1> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:N1> = <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:N1> = <var:r> /\ <var:N2> = <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:N1> = <var:r> /\ <var:N2> = <var:r> ^ <nat:2> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:N1> = <nat:2> * <var:r> /\ <var:N2> = <var:r> ^ <nat:2> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:N1> = <nat:2> * <var:r> /\ <var:N2> = <nat:1> * <var:r> ^ <nat:2> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:N1> = <nat:2> * <var:r> /\ <var:N0> = <nat:3> /\ <var:y> = <nat:1> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:N0> = <nat:3> /\ <var:y> = <nat:1> * <var:r> ^ <nat:2> + <nat:2> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:r> /\ <var:y> = <nat:1> * <var:r> ^ <nat:2> + <nat:2> * <var:r> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 