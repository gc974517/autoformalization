\begin{document} \begin{theorem} Take the following segment of code as follows \begin{verbatim} <var:N0> := <nat:7> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:c> ; <var:N2> := <nat:5> ; <var:N2> := <var:N2> * <var:c> ; <var:N2> := <var:N2> * <var:c> ; <var:N3> := <nat:2> ; <var:N3> := <var:N3> * <var:c> ; <var:N3> := <var:N3> * <var:c> ; <var:N3> := <var:N3> * <var:c> ; <var:q> := <var:N3> ; <var:q> := <var:q> + <var:N2> ; <var:q> := <var:q> + <var:N1> ; <var:q> := <var:q> + <var:N0> \end{verbatim} Allow it to hold that $ <var:c> = <var:v> $ ahead of running our series of commands , it holds that we see $ <var:q> = <nat:2> \cdot <var:v> ^ <nat:3> + <nat:5> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:7> $ . \end{theorem} \begin{proof} Using typical Hoare reasoning yields : \begin{eqnarray} \{ <var:c> = <var:v> \} \\ <var:N0> := <nat:7> ; \\ \{ <var:c> = <var:v> \land <var:N0> = <nat:7> \} \\ <var:N1> := <nat:3> ; \\ \{ <var:c> = <var:v> \land <var:N0> = <nat:7> \land <var:N1> = <nat:3> \} \\ <var:N1> := <var:N1> * <var:c> ; \\ \{ <var:c> = <var:v> \land <var:N0> = <nat:7> \land <var:N1> = <nat:3> \cdot <var:v> \} \\ <var:N2> := <nat:5> ; \\ \{ <var:c> = <var:v> \land <var:N0> = <nat:7> \land <var:N1> = <nat:3> \cdot <var:v> \land <var:N2> = <nat:5> \} \\ <var:N2> := <var:N2> * <var:c> ; \\ \{ <var:c> = <var:v> \land <var:N0> = <nat:7> \land <var:N1> = <nat:3> \cdot <var:v> \land <var:N2> = <nat:5> \cdot <var:v> \} \\ <var:N2> := <var:N2> * <var:c> ; \\ \{ <var:c> = <var:v> \land <var:N0> = <nat:7> \land <var:N1> = <nat:3> \cdot <var:v> \land <var:N2> = <nat:5> \cdot <var:v> ^ <nat:2> \} \\ <var:N3> := <nat:2> ; \\ \{ <var:c> = <var:v> \land <var:N0> = <nat:7> \land <var:N1> = <nat:3> \cdot <var:v> \land <var:N2> = <nat:5> \cdot <var:v> ^ <nat:2> \land <var:N3> = <nat:2> \} \\ <var:N3> := <var:N3> * <var:c> ; \\ \{ <var:c> = <var:v> \land <var:N0> = <nat:7> \land <var:N1> = <nat:3> \cdot <var:v> \land <var:N2> = <nat:5> \cdot <var:v> ^ <nat:2> \land <var:N3> = <nat:2> \cdot <var:v> \} \\ <var:N3> := <var:N3> * <var:c> ; \\ \{ <var:c> = <var:v> \land <var:N0> = <nat:7> \land <var:N1> = <nat:3> \cdot <var:v> \land <var:N2> = <nat:5> \cdot <var:v> ^ <nat:2> \land <var:N3> = <nat:2> \cdot <var:v> ^ <nat:2> \} \\ <var:N3> := <var:N3> * <var:c> ; \\ \{ <var:c> = <var:v> \land <var:N0> = <nat:7> \land <var:N1> = <nat:3> \cdot <var:v> \land <var:N2> = <nat:5> \cdot <var:v> ^ <nat:2> \land <var:N3> = <nat:2> \cdot <var:v> ^ <nat:3> \} \\ <var:q> := <var:N3> ; \\ \{ <var:c> = <var:v> \land <var:N0> = <nat:7> \land <var:N1> = <nat:3> \cdot <var:v> \land <var:N2> = <nat:5> \cdot <var:v> ^ <nat:2> \land <var:q> = <nat:2> \cdot <var:v> ^ <nat:3> \} \\ <var:q> := <var:q> + <var:N2> ; \\ \{ <var:c> = <var:v> \land <var:N0> = <nat:7> \land <var:N1> = <nat:3> \cdot <var:v> \land <var:q> = <nat:2> \cdot <var:v> ^ <nat:3> + <nat:5> \cdot <var:v> ^ <nat:2> \} \\ <var:q> := <var:q> + <var:N1> ; \\ \{ <var:c> = <var:v> \land <var:N0> = <nat:7> \land <var:q> = <nat:2> \cdot <var:v> ^ <nat:3> + <nat:5> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> \} \\ <var:q> := <var:q> + <var:N0> \\ \{ <var:c> = <var:v> \land <var:q> = <nat:2> \cdot <var:v> ^ <nat:3> + <nat:5> \cdot <var:v> ^ <nat:2> + <nat:3> \cdot <var:v> + <nat:7> \} \end{eqnarray} Thusly , the code has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:c> = <var:v> }} <var:N0> := <nat:7> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:c> ; <var:N2> := <nat:5> ; <var:N2> := <var:N2> * <var:c> ; <var:N2> := <var:N2> * <var:c> ; <var:N3> := <nat:2> ; <var:N3> := <var:N3> * <var:c> ; <var:N3> := <var:N3> * <var:c> ; <var:N3> := <var:N3> * <var:c> ; <var:q> := <var:N3> ; <var:q> := <var:q> + <var:N2> ; <var:q> := <var:q> + <var:N1> ; <var:q> := <var:q> + <var:N0> {{ <var:q> = <nat:2> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:3> * <var:v> /\ <var:N2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:3> * <var:v> /\ <var:N2> = <nat:5> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:3> * <var:v> /\ <var:N2> = <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:3> * <var:v> /\ <var:N2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:N3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:3> * <var:v> /\ <var:N2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:3> * <var:v> /\ <var:N2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:3> * <var:v> /\ <var:N2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:3> * <var:v> /\ <var:N2> = <nat:5> * <var:v> ^ <nat:2> /\ <var:q> = <nat:2> * <var:v> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:N0> = <nat:7> /\ <var:N1> = <nat:3> * <var:v> /\ <var:q> = <nat:2> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:N0> = <nat:7> /\ <var:q> = <nat:2> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:3> * <var:v> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:c> = <var:v> /\ <var:q> = <nat:2> * <var:v> ^ <nat:3> + <nat:5> * <var:v> ^ <nat:2> + <nat:3> * <var:v> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 