\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} as \begin{verbatim} <var:k0> := <nat:9> ; <var:O> := <var:k0> \end{verbatim} Given $ <var:o> = <var:H> $ before evaluating this program it must be that $ <var:O> = <nat:9> $ after series of instructions is done executing . \end{theorem} \begin{proof} Proving correctness for the list of instructions is accomplished with the below decorated list of instructions . \begin{eqnarray} \{ <var:o> = <var:H> \} \\ <var:k0> := <nat:9> ; \\ \{ <var:o> = <var:H> \land <var:k0> = <nat:9> \} \\ <var:O> := <var:k0> \\ \{ <var:o> = <var:H> \land <var:O> = <nat:9> \} \end{eqnarray} Utilizing typical Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:o> = <var:H> }} <var:k0> := <nat:9> ; <var:O> := <var:k0> {{ <var:O> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:k0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:o> = <var:H> /\ <var:O> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 