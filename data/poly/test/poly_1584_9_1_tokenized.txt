\begin{document} \begin{theorem} Define the following series of instructions : \begin{verbatim} <var:K1> := <var:C> ; <var:K2> := <var:K1> * <var:C> ; <var:K3> := <var:K2> * <var:C> ; <var:K0> := <nat:4> ; <var:K1> := <var:K1> * <nat:6> ; <var:K3> := <var:K3> * <nat:8> ; <var:T> := <var:K3> <var:T> := <var:T> + <var:K1> <var:T> := <var:T> + <var:K0> \end{verbatim} Allowing $ <var:C> = <var:Y> $ , with some $ <var:Y> \in \mathbb{Z}^+ $ , before running our program it must be that we see $ <var:T> = <nat:8> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> + <nat:4> $ when series of commands is done . \end{theorem} \begin{proof} The course of logic for our segment of code can be shown with standard Hoare techniques . Going forward , \begin{verbatim} { <var:C> = <var:Y> } <var:K1> := <var:C> { <var:C> = <var:Y> \land <var:K1> = <var:Y> } { <var:C> = <var:Y> \land <var:K1> = <var:Y> } <var:K2> := <var:K1> * <var:C> { <var:C> = <var:Y> \land <var:K1> = <var:Y> \land <var:K2> = <var:Y> ^ <nat:2> } { <var:C> = <var:Y> \land <var:K1> = <var:Y> \land <var:K2> = <var:Y> ^ <nat:2> } <var:K3> := <var:K2> * <var:C> { <var:C> = <var:Y> \land <var:K1> = <var:Y> \land <var:K2> = <var:Y> ^ <nat:2> \land <var:K3> = <var:Y> ^ <nat:3> } { <var:C> = <var:Y> \land <var:K1> = <var:Y> \land <var:K2> = <var:Y> ^ <nat:2> \land <var:K3> = <var:Y> ^ <nat:3> } <var:K0> := <nat:4> { <var:C> = <var:Y> \land <var:K1> = <var:Y> \land <var:K2> = <var:Y> ^ <nat:2> \land <var:K3> = <var:Y> ^ <nat:3> \land <var:K0> = <nat:4> } { <var:C> = <var:Y> \land <var:K1> = <var:Y> \land <var:K2> = <var:Y> ^ <nat:2> \land <var:K3> = <var:Y> ^ <nat:3> \land <var:K0> = <nat:4> } <var:K1> := <var:K1> * <nat:6> { <var:C> = <var:Y> \land <var:K1> = <nat:6> \cdot <var:Y> \land <var:K2> = <var:Y> ^ <nat:2> \land <var:K3> = <var:Y> ^ <nat:3> \land <var:K0> = <nat:4> } { <var:C> = <var:Y> \land <var:K1> = <nat:6> \cdot <var:Y> \land <var:K2> = <var:Y> ^ <nat:2> \land <var:K3> = <var:Y> ^ <nat:3> \land <var:K0> = <nat:4> } <var:K3> := <var:K3> * <nat:8> { <var:C> = <var:Y> \land <var:K1> = <nat:6> \cdot <var:Y> \land <var:K2> = <var:Y> ^ <nat:2> \land <var:K3> = <nat:8> \cdot <var:Y> ^ <nat:3> \land <var:K0> = <nat:4> } { <var:C> = <var:Y> \land <var:K1> = <nat:6> \cdot <var:Y> \land <var:K2> = <var:Y> ^ <nat:2> \land <var:K3> = <nat:8> \cdot <var:Y> ^ <nat:3> \land <var:K0> = <nat:4> } <var:T> := <var:K3{ <var:C> = <var:Y> \land <var:K1> = <nat:6> \cdot <var:Y> \land <var:K2> = <var:Y> ^ <nat:2> \land <var:K0> = <nat:4> \land <var:T> = <nat:8> \cdot <var:Y> ^ <nat:3> } \end{verbatim} Keeping momentum , we see \begin{verbatim} { <var:C> = <var:Y> } <var:K1> := <var:C> { <var:C> = <var:Y> \land <var:K1> = <var:Y> } \end{verbatim} This is guaranteed using the assignment rule from typical Hoare reasoning . Focusing on the following command in our set of commands , \begin{verbatim} { <var:C> = <var:Y> } <var:K1> := <var:C> { <var:C> = <var:Y> \land <var:K1> = <var:Y> } \end{verbatim} This is deduced using the environment update rule in typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:K0> : string := " <var:K0> " . Definition <var:K1> : string := " <var:K1> " . Definition <var:K2> : string := " <var:K2> " . Definition <var:K3> : string := " <var:K3> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:C> = <var:Y> }} <var:K1> := <var:C> ; <var:K2> := <var:K1> * <var:C> ; <var:K3> := <var:K2> * <var:C> ; <var:K0> := <nat:4> ; <var:K1> := <var:K1> * <nat:6> ; <var:K3> := <var:K3> * <nat:8> ; <var:T> := <var:K3> <var:T> := <var:T> + <var:K1> <var:T> := <var:T> + <var:K0> {{ <var:T> = <nat:8> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:K1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:K1> = <var:Y> /\ <var:K2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:K1> = <var:Y> /\ <var:K2> = <var:Y> ^ <nat:2> /\ <var:K3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:K1> = <var:Y> /\ <var:K2> = <var:Y> ^ <nat:2> /\ <var:K3> = <var:Y> ^ <nat:3> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:K1> = <nat:6> * <var:Y> /\ <var:K2> = <var:Y> ^ <nat:2> /\ <var:K3> = <var:Y> ^ <nat:3> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:K1> = <nat:6> * <var:Y> /\ <var:K2> = <var:Y> ^ <nat:2> /\ <var:K3> = <nat:8> * <var:Y> ^ <nat:3> /\ <var:K0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:K1> = <nat:6> * <var:Y> /\ <var:K2> = <var:Y> ^ <nat:2> /\ <var:K0> = <nat:4> /\ <var:T> = <nat:8> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:K0> = <nat:4> /\ <var:T> = <nat:8> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:Y> /\ <var:T> = <nat:8> * <var:Y> ^ <nat:3> + <nat:6> * <var:Y> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 