\begin{document} \begin{theorem} Define a segment of code as follows \begin{verbatim} <var:I1> := <var:v> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:2> ; <var:w> := <var:I1> <var:w> := <var:w> + <var:I0> \end{verbatim} Allow that we have $ <var:v> = <var:b> $ ahead of executing this list of commands it must be that we have $ <var:w> = <nat:2> * <var:b> + <nat:4> $ once list of commands terminates . \end{theorem} \begin{proof} The application of usual Hoare reasoning returns : \begin{eqnarray} \{ <var:v> = <var:b> \} \\ <var:I1> := <var:v> ; \\ \{ <var:v> = <var:b> \land <var:I1> = <var:b> \} \\ <var:I0> := <nat:4> ; \\ \{ <var:v> = <var:b> \land <var:I1> = <var:b> \land <var:I0> = <nat:4> \} \\ <var:I1> := <var:I1> * <nat:2> ; \\ \{ <var:v> = <var:b> \land <var:I1> = <nat:2> \times <var:b> \land <var:I0> = <nat:4> \} \\ <var:w> := <var:I1> \\ \{ <var:v> = <var:b> \land <var:I0> = <nat:4> \land <var:w> = <nat:2> \times <var:b> \} \\ <var:w> := <var:w> + <var:I0> \\ \{ <var:v> = <var:b> \land <var:w> = <nat:2> \times <var:b> + <nat:4> \} \end{eqnarray} Therefore , our set of instructions is validated as correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Theorem <genH:poly_code_correct> : forall <var:b> : nat , {{ <var:v> = <var:b> }} <var:I1> := <var:v> ; <var:I0> := <nat:4> ; <var:I1> := <var:I1> * <nat:2> ; <var:w> := <var:I1> <var:w> := <var:w> + <var:I0> {{ <var:w> = <nat:2> * <var:b> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:I1> = <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:I1> = <var:b> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:I1> = <nat:2> * <var:b> /\ <var:I0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:I0> = <nat:4> /\ <var:w> = <nat:2> * <var:b> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:v> = <var:b> /\ <var:w> = <nat:2> * <var:b> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 