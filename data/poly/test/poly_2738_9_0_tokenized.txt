\begin{document} \begin{theorem} Define the following code segment as follows \begin{verbatim} <var:a0> := <nat:8> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:T> ; <var:a2> := <nat:1> ; <var:a2> := <var:a2> * <var:T> ; <var:a2> := <var:a2> * <var:T> ; <var:W> := <var:a2> ; <var:W> := <var:W> + <var:a1> ; <var:W> := <var:W> + <var:a0> \end{verbatim} Allow it to be that $ <var:T> = <var:D> $ ahead of the evaluation of the list of commands , then $ <var:W> = <nat:1> \cdot <var:D> ^ <nat:2> + <nat:7> \cdot <var:D> + <nat:8> $ once series of commands finishes . \end{theorem} \begin{proof} The course of logic for this code segment is accomplished through usual Hoare logic . Immediately following , we see the environment update command \verb | <var:a0> := <nat:8> ; | . This moves $ \{ <var:T> = <var:D> \} $ into $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \} $ . Advancing to the next line of code found in our series of instructions , the line binding $ <nat:7> $ as $ <var:a1>$ . This code advances the precondition $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \} $ into the condition $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> \} $ . Immediately following , we have the variable assignmet statement assigning $ <var:a1> * <var:T> $ as $ <var:a1>$ . This code moves the condition $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> \} $ as the postcondition $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> \cdot <var:D> \} $ . Now , we have the environment update command yielding $ <nat:1> $ as $ <var:a2>$ . This line forwards $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> \cdot <var:D> \} $ into $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> \cdot <var:D> \land <var:a2> = <nat:1> \} $ . Advancing to the upcoming statement seen in our code , we have the environment update statement binding $ <var:a2> * <var:T> $ as $ <var:a2>$ . This advances the condition $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> \cdot <var:D> \land <var:a2> = <nat:1> \} $ toward $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> \cdot <var:D> \land <var:a2> = <nat:1> \cdot <var:D> \} $ . This is given using the assignment scheme given by typical Hoare reasoning . Moving forward to the next step , we have the assignment command letting $ <var:a2> * <var:T> $ into $ <var:a2>$ . This command takes the precondition $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> \cdot <var:D> \land <var:a2> = <nat:1> \cdot <var:D> \} $ toward the postcondition $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> \cdot <var:D> \land <var:a2> = <nat:1> \cdot <var:D> ^ <nat:2> \} $ . This is shown by the assignment scheme found in usual Hoare techniques . Following , we see the assignment line defining $ <var:a2> $ into $ <var:W>$ . This redefines the precondition $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> \cdot <var:D> \land <var:a2> = <nat:1> \cdot <var:D> ^ <nat:2> \} $ to the postcondition $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> \cdot <var:D> \land <var:W> = <nat:1> \cdot <var:D> ^ <nat:2> \} $ . Considering the following piece of code found in our code , we have the variable binding line defining $ <var:W> + <var:a1> $ toward $ <var:W>$ . This redefines the condition $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:a1> = <nat:7> \cdot <var:D> \land <var:W> = <nat:1> \cdot <var:D> ^ <nat:2> \} $ to $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:W> = <nat:1> \cdot <var:D> ^ <nat:2> + <nat:7> \cdot <var:D> \} $ . This is ensured through the assignment scheme defined by Hoare logic . Jumping to the following line contained in the code , the variable update code \verb | <var:W> := <var:W> + <var:a0> | . This code takes the condition $ \{ <var:T> = <var:D> \land <var:a0> = <nat:8> \land <var:W> = <nat:1> \cdot <var:D> ^ <nat:2> + <nat:7> \cdot <var:D> \} $ toward the postcondition $ \{ <var:T> = <var:D> \land <var:W> = <nat:1> \cdot <var:D> ^ <nat:2> + <nat:7> \cdot <var:D> + <nat:8> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:a0> : string := " <var:a0> " . Definition <var:a1> : string := " <var:a1> " . Definition <var:a2> : string := " <var:a2> " . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:T> = <var:D> }} <var:a0> := <nat:8> ; <var:a1> := <nat:7> ; <var:a1> := <var:a1> * <var:T> ; <var:a2> := <nat:1> ; <var:a2> := <var:a2> * <var:T> ; <var:a2> := <var:a2> * <var:T> ; <var:W> := <var:a2> ; <var:W> := <var:W> + <var:a1> ; <var:W> := <var:W> + <var:a0> {{ <var:W> = <nat:1> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:8> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:a0> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:D> /\ <var:a2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:D> /\ <var:a2> = <nat:1> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:D> /\ <var:a2> = <nat:1> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:a0> = <nat:8> /\ <var:a1> = <nat:7> * <var:D> /\ <var:W> = <nat:1> * <var:D> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:a0> = <nat:8> /\ <var:W> = <nat:1> * <var:D> ^ <nat:2> + <nat:7> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:D> /\ <var:W> = <nat:1> * <var:D> ^ <nat:2> + <nat:7> * <var:D> + <nat:8> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 