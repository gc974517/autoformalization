\begin{document} \begin{theorem} Let the following list of instructions in \emph{Imp} as \begin{verbatim} <var:r0> := <nat:5> ; <var:C> := <var:r0> \end{verbatim} Allow given some natural coefficients $ <var:i> $ that we have $ <var:G> = <var:i> $ prior to executing our series of instructions then we have $ <var:C> = <nat:5> $ when code segment has terminated . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:G> = <var:i> \} \\ <var:r0> := <nat:5> ; \\ \{ <var:G> = <var:i> \land <var:r0> = <nat:5> \} \\ <var:C> := <var:r0> \\ \{ <var:G> = <var:i> \land <var:C> = <nat:5> \} \end{eqnarray} Applying standard Hoare reasoning resolves the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:G> = <var:i> }} <var:r0> := <nat:5> ; <var:C> := <var:r0> {{ <var:C> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:r0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:i> /\ <var:C> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 