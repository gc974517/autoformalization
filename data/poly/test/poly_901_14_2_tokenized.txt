\begin{document} \begin{definition} Consider the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:U> := <nat:3> ; <var:U> := <var:U> * <var:M> ; <var:U> := <nat:4> + <var:U> * <var:M> ; <var:U> := <nat:1> + <var:U> * <var:M> ; <var:U> := <var:U> * <var:M> ; <var:U> := <nat:2> + <var:U> * <var:M> ; <var:U> := <nat:1> + <var:U> * <var:M> ; <var:U> := <nat:4> + <var:U> * <var:M> ; <var:U> := <var:U> * <var:M> ; <var:U> := <nat:3> + <var:U> * <var:M> ; <var:U> := <var:U> * <var:M> ; <var:U> := <nat:1> + <var:U> * <var:M> ; <var:U> := <nat:4> + <var:U> * <var:M> ; <var:U> := <nat:4> + <var:U> * <var:M> \end{verbatim} \end{definition} \begin{theorem} Allow that we have $ <var:M> = <var:I> $ before executing the list of commands , then we see $ <var:U> = <nat:3> \times <var:I> ^ <nat:13> + <nat:4> \times <var:I> ^ <nat:11> + <nat:1> \times <var:I> ^ <nat:10> + <nat:2> \times <var:I> ^ <nat:8> + <nat:1> \times <var:I> ^ <nat:7> + <nat:4> \times <var:I> ^ <nat:6> + <nat:3> \times <var:I> ^ <nat:4> + <nat:1> \times <var:I> ^ <nat:2> + <nat:4> \times <var:I> + <nat:4> $ after code executes . \end{theorem} \begin{proof} The way to prove correctness for this code segment is clear using typical Hoare techniques . Focusing on the following bits of codeseen in the segment of code , we have \begin{eqnarray} \{ <var:M> = <var:I> \} \, <var:U> := <nat:3> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> \} \\ \{ <var:M> = <var:I> \land <var:U> = <nat:3> \} \, <var:U> := <var:U> * <var:M> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> + \} \\ \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> + \} \, <var:U> := <nat:4> + <var:U> * <var:M> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> ^ <nat:2> + <nat:4> \} \end{eqnarray} Moving on , we have \begin{eqnarray} \{ <var:M> = <var:I> \} \, <var:U> := <nat:3> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> \} \\ \{ <var:M> = <var:I> \land <var:U> = <nat:3> \} \, <var:U> := <var:U> * <var:M> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> + \} \\ \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> + \} \, <var:U> := <nat:4> + <var:U> * <var:M> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> ^ <nat:2> + <nat:4> \} \\ \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> ^ <nat:2> + <nat:4> \} \, <var:U> := <nat:1> + <var:U> * <var:M> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:1> \} \end{eqnarray} Going forward , we see \begin{eqnarray} \{ <var:M> = <var:I> \} \, <var:U> := <nat:3> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> \} \\ \{ <var:M> = <var:I> \land <var:U> = <nat:3> \} \, <var:U> := <var:U> * <var:M> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> + \} \\ \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> + \} \, <var:U> := <nat:4> + <var:U> * <var:M> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> ^ <nat:2> + <nat:4> \} \\ \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> ^ <nat:2> + <nat:4> \} \, <var:U> := <nat:1> + <var:U> * <var:M> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:1> \} \\ \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:1> \} \, <var:U> := <var:U> * <var:M> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + \} \\ \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + \} \, <var:U> := <nat:2> + <var:U> * <var:M> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> \} \end{eqnarray} After , \begin{eqnarray} \{ <var:M> = <var:I> \} \, <var:U> := <nat:3> \, \{ <var:M> = <var:I> \land <var:U> = <nat:3> \} \end{eqnarray} This is shown with the environment update rule found in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:U> := <nat:3> ; <var:U> := <var:U> * <var:M> ; <var:U> := <nat:4> + <var:U> * <var:M> ; <var:U> := <nat:1> + <var:U> * <var:M> ; <var:U> := <var:U> * <var:M> ; <var:U> := <nat:2> + <var:U> * <var:M> ; <var:U> := <nat:1> + <var:U> * <var:M> ; <var:U> := <nat:4> + <var:U> * <var:M> ; <var:U> := <var:U> * <var:M> ; <var:U> := <nat:3> + <var:U> * <var:M> ; <var:U> := <var:U> * <var:M> ; <var:U> := <nat:1> + <var:U> * <var:M> ; <var:U> := <nat:4> + <var:U> * <var:M> ; <var:U> := <nat:4> + <var:U> * <var:M> . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:M> = <var:I> }} <def:poly> {{ <var:U> = <nat:3> * <var:I> ^ <nat:13> + <nat:4> * <var:I> ^ <nat:11> + <nat:1> * <var:I> ^ <nat:10> + <nat:2> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> * <var:I> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> * <var:I> ^ <nat:3> + <nat:4> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:2> * <var:I> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:2> * <var:I> ^ <nat:2> + <nat:1> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> * <var:I> ^ <nat:8> + <nat:4> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:2> * <var:I> ^ <nat:3> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> * <var:I> ^ <nat:9> + <nat:4> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:2> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:3> + <nat:4> * <var:I> ^ <nat:2> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> * <var:I> ^ <nat:10> + <nat:4> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:2> * <var:I> ^ <nat:5> + <nat:1> * <var:I> ^ <nat:4> + <nat:4> * <var:I> ^ <nat:3> + <nat:3> * <var:I> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> * <var:I> ^ <nat:11> + <nat:4> * <var:I> ^ <nat:9> + <nat:1> * <var:I> ^ <nat:8> + <nat:2> * <var:I> ^ <nat:6> + <nat:1> * <var:I> ^ <nat:5> + <nat:4> * <var:I> ^ <nat:4> + <nat:3> * <var:I> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> * <var:I> ^ <nat:12> + <nat:4> * <var:I> ^ <nat:10> + <nat:1> * <var:I> ^ <nat:9> + <nat:2> * <var:I> ^ <nat:7> + <nat:1> * <var:I> ^ <nat:6> + <nat:4> * <var:I> ^ <nat:5> + <nat:3> * <var:I> ^ <nat:3> + <nat:1> * <var:I> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:M> = <var:I> /\ <var:U> = <nat:3> * <var:I> ^ <nat:13> + <nat:4> * <var:I> ^ <nat:11> + <nat:1> * <var:I> ^ <nat:10> + <nat:2> * <var:I> ^ <nat:8> + <nat:1> * <var:I> ^ <nat:7> + <nat:4> * <var:I> ^ <nat:6> + <nat:3> * <var:I> ^ <nat:4> + <nat:1> * <var:I> ^ <nat:2> + <nat:4> * <var:I> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 