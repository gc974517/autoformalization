\begin{document} \begin{theorem} Define a program in \emph{Imp} as \begin{verbatim} <var:d> := <nat:1> ; <var:d> := <nat:2> + <var:d> * <var:i> ; <var:d> := <nat:1> + <var:d> * <var:i> ; <var:d> := <nat:2> + <var:d> * <var:i> ; <var:d> := <nat:3> + <var:d> * <var:i> ; <var:d> := <nat:1> + <var:d> * <var:i> ; <var:d> := <nat:3> + <var:d> * <var:i> ; <var:d> := <var:d> * <var:i> ; <var:d> := <nat:1> + <var:d> * <var:i> ; <var:d> := <nat:1> + <var:d> * <var:i> ; <var:d> := <nat:1> + <var:d> * <var:i> \end{verbatim} Allow that $ <var:i> = <var:z> $ ahead of the execution of this list of instructions it must be that $ <var:d> = <nat:1> * <var:z> ^ <nat:10> + <nat:2> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> $ when segment of code has terminated . \end{theorem} \begin{proof} Applying Hoare reasoning yields : \begin{eqnarray} \{ <var:i> = <var:z> \} \\ <var:d> := <nat:1> ; \\ \{ <var:i> = <var:z> \land <var:d> = <nat:1> \} \\ <var:d> := <nat:2> + <var:d> * <var:i> ; \\ \{ <var:i> = <var:z> \land <var:d> = <nat:1> \cdot <var:z> + <nat:2> \} \\ <var:d> := <nat:1> + <var:d> * <var:i> ; \\ \{ <var:i> = <var:z> \land <var:d> = <nat:1> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:1> \} \\ <var:d> := <nat:2> + <var:d> * <var:i> ; \\ \{ <var:i> = <var:z> \land <var:d> = <nat:1> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:2> \} \\ <var:d> := <nat:3> + <var:d> * <var:i> ; \\ \{ <var:i> = <var:z> \land <var:d> = <nat:1> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> ^ <nat:2> + <nat:2> \cdot <var:z> + <nat:3> \} \\ <var:d> := <nat:1> + <var:d> * <var:i> ; \\ \{ <var:i> = <var:z> \land <var:d> = <nat:1> \cdot <var:z> ^ <nat:5> + <nat:2> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> + <nat:2> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + <nat:1> \} \\ <var:d> := <nat:3> + <var:d> * <var:i> ; \\ \{ <var:i> = <var:z> \land <var:d> = <nat:1> \cdot <var:z> ^ <nat:6> + <nat:2> \cdot <var:z> ^ <nat:5> + <nat:1> \cdot <var:z> ^ <nat:4> + <nat:2> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:3> \} \\ <var:d> := <var:d> * <var:i> ; \\ \{ <var:i> = <var:z> \land <var:d> = <nat:1> \cdot <var:z> ^ <nat:7> + <nat:2> \cdot <var:z> ^ <nat:6> + <nat:1> \cdot <var:z> ^ <nat:5> + <nat:2> \cdot <var:z> ^ <nat:4> + <nat:3> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> ^ <nat:2> + <nat:3> \cdot <var:z> + \} \\ <var:d> := <nat:1> + <var:d> * <var:i> ; \\ \{ <var:i> = <var:z> \land <var:d> = <nat:1> \cdot <var:z> ^ <nat:8> + <nat:2> \cdot <var:z> ^ <nat:7> + <nat:1> \cdot <var:z> ^ <nat:6> + <nat:2> \cdot <var:z> ^ <nat:5> + <nat:3> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:3> + <nat:3> \cdot <var:z> ^ <nat:2> + <nat:1> \} \\ <var:d> := <nat:1> + <var:d> * <var:i> ; \\ \{ <var:i> = <var:z> \land <var:d> = <nat:1> \cdot <var:z> ^ <nat:9> + <nat:2> \cdot <var:z> ^ <nat:8> + <nat:1> \cdot <var:z> ^ <nat:7> + <nat:2> \cdot <var:z> ^ <nat:6> + <nat:3> \cdot <var:z> ^ <nat:5> + <nat:1> \cdot <var:z> ^ <nat:4> + <nat:3> \cdot <var:z> ^ <nat:3> + <nat:1> \cdot <var:z> + <nat:1> \} \\ <var:d> := <nat:1> + <var:d> * <var:i> \\ \{ <var:i> = <var:z> \land <var:d> = <nat:1> \cdot <var:z> ^ <nat:10> + <nat:2> \cdot <var:z> ^ <nat:9> + <nat:1> \cdot <var:z> ^ <nat:8> + <nat:2> \cdot <var:z> ^ <nat:7> + <nat:3> \cdot <var:z> ^ <nat:6> + <nat:1> \cdot <var:z> ^ <nat:5> + <nat:3> \cdot <var:z> ^ <nat:4> + <nat:1> \cdot <var:z> ^ <nat:2> + <nat:1> \cdot <var:z> + <nat:1> \} \end{eqnarray} Continuing executing this program returns : \begin{eqnarray} \end{eqnarray} As a result , this list of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:z> : nat , {{ <var:i> = <var:z> }} <var:d> := <nat:1> ; <var:d> := <nat:2> + <var:d> * <var:i> ; <var:d> := <nat:1> + <var:d> * <var:i> ; <var:d> := <nat:2> + <var:d> * <var:i> ; <var:d> := <nat:3> + <var:d> * <var:i> ; <var:d> := <nat:1> + <var:d> * <var:i> ; <var:d> := <nat:3> + <var:d> * <var:i> ; <var:d> := <var:d> * <var:i> ; <var:d> := <nat:1> + <var:d> * <var:i> ; <var:d> := <nat:1> + <var:d> * <var:i> ; <var:d> := <nat:1> + <var:d> * <var:i> {{ <var:d> = <nat:1> * <var:z> ^ <nat:10> + <nat:2> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:z> /\ <var:d> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:z> /\ <var:d> = <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:2> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:2> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:2> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:2> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> ^ <nat:2> + <nat:3> * <var:z> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:7> + <nat:1> * <var:z> ^ <nat:6> + <nat:2> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:3> + <nat:3> * <var:z> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:9> + <nat:2> * <var:z> ^ <nat:8> + <nat:1> * <var:z> ^ <nat:7> + <nat:2> * <var:z> ^ <nat:6> + <nat:3> * <var:z> ^ <nat:5> + <nat:1> * <var:z> ^ <nat:4> + <nat:3> * <var:z> ^ <nat:3> + <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:z> /\ <var:d> = <nat:1> * <var:z> ^ <nat:10> + <nat:2> * <var:z> ^ <nat:9> + <nat:1> * <var:z> ^ <nat:8> + <nat:2> * <var:z> ^ <nat:7> + <nat:3> * <var:z> ^ <nat:6> + <nat:1> * <var:z> ^ <nat:5> + <nat:3> * <var:z> ^ <nat:4> + <nat:1> * <var:z> ^ <nat:2> + <nat:1> * <var:z> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 