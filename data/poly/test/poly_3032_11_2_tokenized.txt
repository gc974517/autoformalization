\begin{document} \begin{theorem} Define a program in \emph{Imp} as follows \begin{verbatim} <var:H> := <nat:2> ; <var:H> := <nat:1> + <var:H> * <var:m> ; <var:H> := <nat:2> + <var:H> * <var:m> ; <var:H> := <nat:2> + <var:H> * <var:m> ; <var:H> := <nat:2> + <var:H> * <var:m> ; <var:H> := <nat:1> + <var:H> * <var:m> ; <var:H> := <nat:3> + <var:H> * <var:m> ; <var:H> := <nat:2> + <var:H> * <var:m> ; <var:H> := <nat:4> + <var:H> * <var:m> ; <var:H> := <nat:3> + <var:H> * <var:m> ; <var:H> := <nat:4> + <var:H> * <var:m> \end{verbatim} Allowing ( taking whole numbers $ <var:e> $ ) that we have $ <var:m> = <var:e> $ ahead of the execution of the series of instructions then we have $ <var:H> = <nat:2> \times <var:e> ^ <nat:10> + <nat:1> \times <var:e> ^ <nat:9> + <nat:2> \times <var:e> ^ <nat:8> + <nat:2> \times <var:e> ^ <nat:7> + <nat:2> \times <var:e> ^ <nat:6> + <nat:1> \times <var:e> ^ <nat:5> + <nat:3> \times <var:e> ^ <nat:4> + <nat:2> \times <var:e> ^ <nat:3> + <nat:4> \times <var:e> ^ <nat:2> + <nat:3> \times <var:e> + <nat:4> $ after set of commands has finished executing . \end{theorem} \begin{proof} Utilizing typical Hoare logic returns : \begin{eqnarray} \{ <var:m> = <var:e> \} \\ <var:H> := <nat:2> ; \\ \{ <var:m> = <var:e> \land <var:H> = <nat:2> \} \\ <var:H> := <nat:1> + <var:H> * <var:m> ; \\ \{ <var:m> = <var:e> \land <var:H> = <nat:2> \cdot <var:e> + <nat:1> \} \\ <var:H> := <nat:2> + <var:H> * <var:m> ; \\ \{ <var:m> = <var:e> \land <var:H> = <nat:2> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:2> \} \\ <var:H> := <nat:2> + <var:H> * <var:m> ; \\ \{ <var:m> = <var:e> \land <var:H> = <nat:2> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:2> \} \\ <var:H> := <nat:2> + <var:H> * <var:m> ; \\ \{ <var:m> = <var:e> \land <var:H> = <nat:2> \cdot <var:e> ^ <nat:4> + <nat:1> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:2> \} \\ <var:H> := <nat:1> + <var:H> * <var:m> ; \\ \{ <var:m> = <var:e> \land <var:H> = <nat:2> \cdot <var:e> ^ <nat:5> + <nat:1> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:1> \} \\ <var:H> := <nat:3> + <var:H> * <var:m> ; \\ \{ <var:m> = <var:e> \land <var:H> = <nat:2> \cdot <var:e> ^ <nat:6> + <nat:1> \cdot <var:e> ^ <nat:5> + <nat:2> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:1> \cdot <var:e> + <nat:3> \} \\ <var:H> := <nat:2> + <var:H> * <var:m> ; \\ \{ <var:m> = <var:e> \land <var:H> = <nat:2> \cdot <var:e> ^ <nat:7> + <nat:1> \cdot <var:e> ^ <nat:6> + <nat:2> \cdot <var:e> ^ <nat:5> + <nat:2> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + <nat:1> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> + <nat:2> \} \\ <var:H> := <nat:4> + <var:H> * <var:m> ; \\ \{ <var:m> = <var:e> \land <var:H> = <nat:2> \cdot <var:e> ^ <nat:8> + <nat:1> \cdot <var:e> ^ <nat:7> + <nat:2> \cdot <var:e> ^ <nat:6> + <nat:2> \cdot <var:e> ^ <nat:5> + <nat:2> \cdot <var:e> ^ <nat:4> + <nat:1> \cdot <var:e> ^ <nat:3> + <nat:3> \cdot <var:e> ^ <nat:2> + <nat:2> \cdot <var:e> + <nat:4> \} \\ <var:H> := <nat:3> + <var:H> * <var:m> ; \\ \{ <var:m> = <var:e> \land <var:H> = <nat:2> \cdot <var:e> ^ <nat:9> + <nat:1> \cdot <var:e> ^ <nat:8> + <nat:2> \cdot <var:e> ^ <nat:7> + <nat:2> \cdot <var:e> ^ <nat:6> + <nat:2> \cdot <var:e> ^ <nat:5> + <nat:1> \cdot <var:e> ^ <nat:4> + <nat:3> \cdot <var:e> ^ <nat:3> + <nat:2> \cdot <var:e> ^ <nat:2> + <nat:4> \cdot <var:e> + <nat:3> \} \\ <var:H> := <nat:4> + <var:H> * <var:m> \\ \{ <var:m> = <var:e> \land <var:H> = <nat:2> \cdot <var:e> ^ <nat:10> + <nat:1> \cdot <var:e> ^ <nat:9> + <nat:2> \cdot <var:e> ^ <nat:8> + <nat:2> \cdot <var:e> ^ <nat:7> + <nat:2> \cdot <var:e> ^ <nat:6> + <nat:1> \cdot <var:e> ^ <nat:5> + <nat:3> \cdot <var:e> ^ <nat:4> + <nat:2> \cdot <var:e> ^ <nat:3> + <nat:4> \cdot <var:e> ^ <nat:2> + <nat:3> \cdot <var:e> + <nat:4> \} \end{eqnarray} Given the preceding argument , the series of instructions has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:m> = <var:e> }} <var:H> := <nat:2> ; <var:H> := <nat:1> + <var:H> * <var:m> ; <var:H> := <nat:2> + <var:H> * <var:m> ; <var:H> := <nat:2> + <var:H> * <var:m> ; <var:H> := <nat:2> + <var:H> * <var:m> ; <var:H> := <nat:1> + <var:H> * <var:m> ; <var:H> := <nat:3> + <var:H> * <var:m> ; <var:H> := <nat:2> + <var:H> * <var:m> ; <var:H> := <nat:4> + <var:H> * <var:m> ; <var:H> := <nat:3> + <var:H> * <var:m> ; <var:H> := <nat:4> + <var:H> * <var:m> {{ <var:H> = <nat:2> * <var:e> ^ <nat:10> + <nat:1> * <var:e> ^ <nat:9> + <nat:2> * <var:e> ^ <nat:8> + <nat:2> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:H> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:H> = <nat:2> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:1> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:7> + <nat:1> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:1> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:8> + <nat:1> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:2> * <var:e> ^ <nat:4> + <nat:1> * <var:e> ^ <nat:3> + <nat:3> * <var:e> ^ <nat:2> + <nat:2> * <var:e> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:9> + <nat:1> * <var:e> ^ <nat:8> + <nat:2> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:6> + <nat:2> * <var:e> ^ <nat:5> + <nat:1> * <var:e> ^ <nat:4> + <nat:3> * <var:e> ^ <nat:3> + <nat:2> * <var:e> ^ <nat:2> + <nat:4> * <var:e> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:e> /\ <var:H> = <nat:2> * <var:e> ^ <nat:10> + <nat:1> * <var:e> ^ <nat:9> + <nat:2> * <var:e> ^ <nat:8> + <nat:2> * <var:e> ^ <nat:7> + <nat:2> * <var:e> ^ <nat:6> + <nat:1> * <var:e> ^ <nat:5> + <nat:3> * <var:e> ^ <nat:4> + <nat:2> * <var:e> ^ <nat:3> + <nat:4> * <var:e> ^ <nat:2> + <nat:3> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 