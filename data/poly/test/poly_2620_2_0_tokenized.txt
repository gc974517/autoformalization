\begin{document} \begin{theorem} Let the following segment of code in \emph{Imp} such that \begin{verbatim} <var:l0> := <nat:6> ; <var:i> := <var:l0> \end{verbatim} Allowing it to hold that $ <var:X> = <var:I> $ prior to running the list of commands , then we see $ <var:i> = <nat:6> $ once program has finished executing . \end{theorem} \begin{proof} Using typical Hoare techniques produces : \begin{eqnarray} \{ <var:X> = <var:I> \} \\ <var:l0> := <nat:6> ; \\ \{ <var:X> = <var:I> \land <var:l0> = <nat:6> \} \\ <var:i> := <var:l0> \\ \{ <var:X> = <var:I> \land <var:i> = <nat:6> \} \end{eqnarray} Considering the preceding argument , this list of instructions is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:l0> : string := " <var:l0> " . Theorem <genH:poly_code_correct> : forall <var:I> : nat , {{ <var:X> = <var:I> }} <var:l0> := <nat:6> ; <var:i> := <var:l0> {{ <var:i> = <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:l0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:X> = <var:I> /\ <var:i> = <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 