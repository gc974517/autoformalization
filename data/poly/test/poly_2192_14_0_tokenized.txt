\begin{document} \begin{theorem} Take the following set of commands in \emph{Imp} : \begin{verbatim} <var:b0> := <nat:4> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:Y> ; <var:b2> := <nat:3> ; <var:b2> := <var:b2> * <var:Y> ; <var:b2> := <var:b2> * <var:Y> ; <var:b3> := <nat:4> ; <var:b3> := <var:b3> * <var:Y> ; <var:b3> := <var:b3> * <var:Y> ; <var:b3> := <var:b3> * <var:Y> ; <var:M> := <var:b3> ; <var:M> := <var:M> + <var:b2> ; <var:M> := <var:M> + <var:b1> ; <var:M> := <var:M> + <var:b0> \end{verbatim} Allowing --- given natural coefficients $ <var:r> $ --- $ <var:Y> = <var:r> $ before executing the segment of code , it holds that $ <var:M> = <nat:4> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Y> = <var:r> \} \\ <var:b0> := <nat:4> ; \\ \{ <var:Y> = <var:r> \land <var:b0> = <nat:4> \} \\ <var:b1> := <nat:4> ; \\ \{ <var:Y> = <var:r> \land <var:b0> = <nat:4> \land <var:b1> = <nat:4> \} \\ <var:b1> := <var:b1> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:b0> = <nat:4> \land <var:b1> = <nat:4> \cdot <var:r> \} \\ <var:b2> := <nat:3> ; \\ \{ <var:Y> = <var:r> \land <var:b0> = <nat:4> \land <var:b1> = <nat:4> \cdot <var:r> \land <var:b2> = <nat:3> \} \\ <var:b2> := <var:b2> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:b0> = <nat:4> \land <var:b1> = <nat:4> \cdot <var:r> \land <var:b2> = <nat:3> \cdot <var:r> \} \\ <var:b2> := <var:b2> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:b0> = <nat:4> \land <var:b1> = <nat:4> \cdot <var:r> \land <var:b2> = <nat:3> \cdot <var:r> ^ <nat:2> \} \\ <var:b3> := <nat:4> ; \\ \{ <var:Y> = <var:r> \land <var:b0> = <nat:4> \land <var:b1> = <nat:4> \cdot <var:r> \land <var:b2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:b3> = <nat:4> \} \\ <var:b3> := <var:b3> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:b0> = <nat:4> \land <var:b1> = <nat:4> \cdot <var:r> \land <var:b2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:b3> = <nat:4> \cdot <var:r> \} \\ <var:b3> := <var:b3> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:b0> = <nat:4> \land <var:b1> = <nat:4> \cdot <var:r> \land <var:b2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:b3> = <nat:4> \cdot <var:r> ^ <nat:2> \} \\ <var:b3> := <var:b3> * <var:Y> ; \\ \{ <var:Y> = <var:r> \land <var:b0> = <nat:4> \land <var:b1> = <nat:4> \cdot <var:r> \land <var:b2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:b3> = <nat:4> \cdot <var:r> ^ <nat:3> \} \end{eqnarray} Continuing the execution of this program produces : \begin{eqnarray} <var:M> := <var:b3> ; \\ \{ <var:Y> = <var:r> \land <var:b0> = <nat:4> \land <var:b1> = <nat:4> \cdot <var:r> \land <var:b2> = <nat:3> \cdot <var:r> ^ <nat:2> \land <var:M> = <nat:4> \cdot <var:r> ^ <nat:3> \} \\ <var:M> := <var:M> + <var:b2> ; \\ \{ <var:Y> = <var:r> \land <var:b0> = <nat:4> \land <var:b1> = <nat:4> \cdot <var:r> \land <var:M> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> \} \\ <var:M> := <var:M> + <var:b1> ; \\ \{ <var:Y> = <var:r> \land <var:b0> = <nat:4> \land <var:M> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> \} \\ <var:M> := <var:M> + <var:b0> \\ \{ <var:Y> = <var:r> \land <var:M> = <nat:4> \cdot <var:r> ^ <nat:3> + <nat:3> \cdot <var:r> ^ <nat:2> + <nat:4> \cdot <var:r> + <nat:4> \} \end{eqnarray} The application of usual Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:Y> = <var:r> }} <var:b0> := <nat:4> ; <var:b1> := <nat:4> ; <var:b1> := <var:b1> * <var:Y> ; <var:b2> := <nat:3> ; <var:b2> := <var:b2> * <var:Y> ; <var:b2> := <var:b2> * <var:Y> ; <var:b3> := <nat:4> ; <var:b3> := <var:b3> * <var:Y> ; <var:b3> := <var:b3> * <var:Y> ; <var:b3> := <var:b3> * <var:Y> ; <var:M> := <var:b3> ; <var:M> := <var:M> + <var:b2> ; <var:M> := <var:M> + <var:b1> ; <var:M> := <var:M> + <var:b0> {{ <var:M> = <nat:4> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:b0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:4> * <var:r> /\ <var:b2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:4> * <var:r> /\ <var:b2> = <nat:3> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:4> * <var:r> /\ <var:b2> = <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:4> * <var:r> /\ <var:b2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:b3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:4> * <var:r> /\ <var:b2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:b3> = <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:4> * <var:r> /\ <var:b2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:b3> = <nat:4> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:4> * <var:r> /\ <var:b2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:b3> = <nat:4> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:4> * <var:r> /\ <var:b2> = <nat:3> * <var:r> ^ <nat:2> /\ <var:M> = <nat:4> * <var:r> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:b0> = <nat:4> /\ <var:b1> = <nat:4> * <var:r> /\ <var:M> = <nat:4> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:b0> = <nat:4> /\ <var:M> = <nat:4> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:r> /\ <var:M> = <nat:4> * <var:r> ^ <nat:3> + <nat:3> * <var:r> ^ <nat:2> + <nat:4> * <var:r> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 