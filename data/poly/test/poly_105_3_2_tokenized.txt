\begin{document} \begin{theorem} Take the following code such that \begin{verbatim} <var:A> := <nat:3> ; <var:A> := <nat:2> + <var:A> * <var:P> ; <var:A> := <nat:1> + <var:A> * <var:P> \end{verbatim} Allowing that $ <var:P> = <var:S> $ , for some whole numbers $ <var:S> $ , prior to running our segment of code it must be that we have $ <var:A> = <nat:3> \cdot <var:S> ^ <nat:2> + <nat:2> \cdot <var:S> + <nat:1> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:P> = <var:S> \} \\ <var:A> := <nat:3> ; \\ \{ <var:P> = <var:S> \land <var:A> = <nat:3> \} \\ <var:A> := <nat:2> + <var:A> * <var:P> ; \\ \{ <var:P> = <var:S> \land <var:A> = <nat:3> \times <var:S> + <nat:2> \} \\ <var:A> := <nat:1> + <var:A> * <var:P> \\ \{ <var:P> = <var:S> \land <var:A> = <nat:3> \times <var:S> ^ <nat:2> + <nat:2> \times <var:S> + <nat:1> \} \end{eqnarray} Using Hoare logic resolves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:P> = <var:S> }} <var:A> := <nat:3> ; <var:A> := <nat:2> + <var:A> * <var:P> ; <var:A> := <nat:1> + <var:A> * <var:P> {{ <var:A> = <nat:3> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:S> /\ <var:A> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:S> /\ <var:A> = <nat:3> * <var:S> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:S> /\ <var:A> = <nat:3> * <var:S> ^ <nat:2> + <nat:2> * <var:S> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 