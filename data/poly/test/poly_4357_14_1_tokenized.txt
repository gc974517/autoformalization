\begin{document} \begin{definition} Define the following set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:N1> := <var:k> ; <var:N2> := <var:N1> * <var:k> ; <var:N3> := <var:N2> * <var:k> ; <var:N4> := <var:N3> * <var:k> ; <var:N0> := <nat:7> ; <var:N1> := <var:N1> * <nat:2> ; <var:N2> := <var:N2> * <nat:9> ; <var:N3> := <var:N3> * <nat:2> ; <var:N4> := <var:N4> * <nat:1> ; <var:F> := <var:N4> <var:F> := <var:F> + <var:N3> <var:F> := <var:F> + <var:N2> <var:F> := <var:F> + <var:N1> <var:F> := <var:F> + <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assume that $ <var:k> = <var:Y> $ ahead of executing the list of commands it holds that $ <var:F> = <nat:1> \times <var:Y> ^ <nat:4> + <nat:2> \times <var:Y> ^ <nat:3> + <nat:9> \times <var:Y> ^ <nat:2> + <nat:2> \times <var:Y> + <nat:7> $ once series of commands terminates . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:Y> \} \\ <var:N1> := <var:k> ; \\ \{ <var:k> = <var:Y> \land <var:N1> = <var:Y> \} \\ <var:N2> := <var:N1> * <var:k> ; \\ \{ <var:k> = <var:Y> \land <var:N1> = <var:Y> \land <var:N2> = <var:Y> ^ <nat:2> \} \\ <var:N3> := <var:N2> * <var:k> ; \\ \{ <var:k> = <var:Y> \land <var:N1> = <var:Y> \land <var:N2> = <var:Y> ^ <nat:2> \land <var:N3> = <var:Y> ^ <nat:3> \} \\ <var:N4> := <var:N3> * <var:k> ; \\ \{ <var:k> = <var:Y> \land <var:N1> = <var:Y> \land <var:N2> = <var:Y> ^ <nat:2> \land <var:N3> = <var:Y> ^ <nat:3> \land <var:N4> = <var:Y> ^ <nat:4> \} \\ <var:N0> := <nat:7> ; \\ \{ <var:k> = <var:Y> \land <var:N1> = <var:Y> \land <var:N2> = <var:Y> ^ <nat:2> \land <var:N3> = <var:Y> ^ <nat:3> \land <var:N4> = <var:Y> ^ <nat:4> \land <var:N0> = <nat:7> \} \\ <var:N1> := <var:N1> * <nat:2> ; \\ \{ <var:k> = <var:Y> \land <var:N1> = <nat:2> \cdot <var:Y> \land <var:N2> = <var:Y> ^ <nat:2> \land <var:N3> = <var:Y> ^ <nat:3> \land <var:N4> = <var:Y> ^ <nat:4> \land <var:N0> = <nat:7> \} \\ <var:N2> := <var:N2> * <nat:9> ; \\ \{ <var:k> = <var:Y> \land <var:N1> = <nat:2> \cdot <var:Y> \land <var:N2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:N3> = <var:Y> ^ <nat:3> \land <var:N4> = <var:Y> ^ <nat:4> \land <var:N0> = <nat:7> \} \\ <var:N3> := <var:N3> * <nat:2> ; \\ \{ <var:k> = <var:Y> \land <var:N1> = <nat:2> \cdot <var:Y> \land <var:N2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:N3> = <nat:2> \cdot <var:Y> ^ <nat:3> \land <var:N4> = <var:Y> ^ <nat:4> \land <var:N0> = <nat:7> \} \\ <var:N4> := <var:N4> * <nat:1> ; \\ \{ <var:k> = <var:Y> \land <var:N1> = <nat:2> \cdot <var:Y> \land <var:N2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:N3> = <nat:2> \cdot <var:Y> ^ <nat:3> \land <var:N4> = <nat:1> \cdot <var:Y> ^ <nat:4> \land <var:N0> = <nat:7> \} \\ <var:F> := <var:N4> \\ \{ <var:k> = <var:Y> \land <var:N1> = <nat:2> \cdot <var:Y> \land <var:N2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:N3> = <nat:2> \cdot <var:Y> ^ <nat:3> \land <var:N0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Y> ^ <nat:4> \} \\ <var:F> := <var:F> + <var:N3> \\ \{ <var:k> = <var:Y> \land <var:N1> = <nat:2> \cdot <var:Y> \land <var:N2> = <nat:9> \cdot <var:Y> ^ <nat:2> \land <var:N0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> \} \\ <var:F> := <var:F> + <var:N2> \\ \{ <var:k> = <var:Y> \land <var:N1> = <nat:2> \cdot <var:Y> \land <var:N0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:9> \cdot <var:Y> ^ <nat:2> \} \\ <var:F> := <var:F> + <var:N1> \\ \{ <var:k> = <var:Y> \land <var:N0> = <nat:7> \land <var:F> = <nat:1> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:9> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> \} \\ <var:F> := <var:F> + <var:N0> \\ \{ <var:k> = <var:Y> \land <var:F> = <nat:1> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> ^ <nat:3> + <nat:9> \cdot <var:Y> ^ <nat:2> + <nat:2> \cdot <var:Y> + <nat:7> \} \end{eqnarray} Utilizing standard Hoare reasoning finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Definition <var:N3> : string := " <var:N3> " . Definition <var:N4> : string := " <var:N4> " . Definition <def:poly> := <var:N1> := <var:k> ; <var:N2> := <var:N1> * <var:k> ; <var:N3> := <var:N2> * <var:k> ; <var:N4> := <var:N3> * <var:k> ; <var:N0> := <nat:7> ; <var:N1> := <var:N1> * <nat:2> ; <var:N2> := <var:N2> * <nat:9> ; <var:N3> := <var:N3> * <nat:2> ; <var:N4> := <var:N4> * <nat:1> ; <var:F> := <var:N4> <var:F> := <var:F> + <var:N3> <var:F> := <var:F> + <var:N2> <var:F> := <var:F> + <var:N1> <var:F> := <var:F> + <var:N0> . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:k> = <var:Y> }} <def:poly> {{ <var:F> = <nat:1> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:N1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:N1> = <var:Y> /\ <var:N2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:N1> = <var:Y> /\ <var:N2> = <var:Y> ^ <nat:2> /\ <var:N3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:N1> = <var:Y> /\ <var:N2> = <var:Y> ^ <nat:2> /\ <var:N3> = <var:Y> ^ <nat:3> /\ <var:N4> = <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:N1> = <var:Y> /\ <var:N2> = <var:Y> ^ <nat:2> /\ <var:N3> = <var:Y> ^ <nat:3> /\ <var:N4> = <var:Y> ^ <nat:4> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:N1> = <nat:2> * <var:Y> /\ <var:N2> = <var:Y> ^ <nat:2> /\ <var:N3> = <var:Y> ^ <nat:3> /\ <var:N4> = <var:Y> ^ <nat:4> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:N1> = <nat:2> * <var:Y> /\ <var:N2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:N3> = <var:Y> ^ <nat:3> /\ <var:N4> = <var:Y> ^ <nat:4> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:N1> = <nat:2> * <var:Y> /\ <var:N2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:Y> ^ <nat:3> /\ <var:N4> = <var:Y> ^ <nat:4> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:N1> = <nat:2> * <var:Y> /\ <var:N2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:Y> ^ <nat:3> /\ <var:N4> = <nat:1> * <var:Y> ^ <nat:4> /\ <var:N0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:N1> = <nat:2> * <var:Y> /\ <var:N2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:N3> = <nat:2> * <var:Y> ^ <nat:3> /\ <var:N0> = <nat:7> /\ <var:F> = <nat:1> * <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:N1> = <nat:2> * <var:Y> /\ <var:N2> = <nat:9> * <var:Y> ^ <nat:2> /\ <var:N0> = <nat:7> /\ <var:F> = <nat:1> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:N1> = <nat:2> * <var:Y> /\ <var:N0> = <nat:7> /\ <var:F> = <nat:1> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:N0> = <nat:7> /\ <var:F> = <nat:1> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:F> = <nat:1> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ^ <nat:3> + <nat:9> * <var:Y> ^ <nat:2> + <nat:2> * <var:Y> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 