\begin{document} \begin{definition} We define a series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:U1> := <var:x> ; <var:U0> := <nat:6> ; <var:U1> := <var:U1> * <nat:8> ; <var:F> := <var:U1> <var:F> := <var:F> + <var:U0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:x> = <var:e> $ before the evaluation of our segment of code it must be that $ <var:F> = <nat:8> * <var:e> + <nat:6> $ after set of commands has finished executing . \end{theorem} \begin{proof} Observe this decorated program . \begin{eqnarray} \{ <var:x> = <var:e> \} \\ <var:U1> := <var:x> ; \\ \{ <var:x> = <var:e> \land <var:U1> = <var:e> \} \\ <var:U0> := <nat:6> ; \\ \{ <var:x> = <var:e> \land <var:U1> = <var:e> \land <var:U0> = <nat:6> \} \\ <var:U1> := <var:U1> * <nat:8> ; \\ \{ <var:x> = <var:e> \land <var:U1> = <nat:8> * <var:e> \land <var:U0> = <nat:6> \} \\ <var:F> := <var:U1> \\ \{ <var:x> = <var:e> \land <var:U0> = <nat:6> \land <var:F> = <nat:8> * <var:e> \} \\ <var:F> := <var:F> + <var:U0> \\ \{ <var:x> = <var:e> \land <var:F> = <nat:8> * <var:e> + <nat:6> \} \end{eqnarray} Utilizing Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:U0> : string := " <var:U0> " . Definition <var:U1> : string := " <var:U1> " . Definition <def:poly> := <var:U1> := <var:x> ; <var:U0> := <nat:6> ; <var:U1> := <var:U1> * <nat:8> ; <var:F> := <var:U1> <var:F> := <var:F> + <var:U0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:x> = <var:e> }} <def:poly> {{ <var:F> = <nat:8> * <var:e> + <nat:6> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:U1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:U1> = <var:e> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:U1> = <nat:8> * <var:e> /\ <var:U0> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:U0> = <nat:6> /\ <var:F> = <nat:8> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:e> /\ <var:F> = <nat:8> * <var:e> + <nat:6> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 