\begin{document} \begin{definition} Consider a set of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:9> ; <var:o2> := <nat:3> ; <var:o2> := <var:o2> * <var:G> ; <var:o2> := <var:o2> * <var:G> ; <var:l> := <var:o2> ; <var:l> := <var:l> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Define the following series of commands <def:poly> in \emph{Imp} . Allow $ <var:G> = <var:T> $ ( taking positive integers $ <var:T> $ ) prior to the execution of the code it follows that $ <var:l> = <nat:3> * <var:T> ^ <nat:2> + <nat:9> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the code is shown by Hoare reasoning . Moving onward , we see \[ \begin{tabular} {rcl} \{ <var:G> = <var:T> \} & <var:o0> := <nat:9> & \{ <var:G> = <var:T> \land <var:o0> = <nat:9> \} \\ \{ <var:G> = <var:T> \land <var:o0> = <nat:9> \} & <var:o2> := <nat:3> & \{ <var:G> = <var:T> \land <var:o0> = <nat:9> \land <var:o2> = <nat:3> \} \\ \{ <var:G> = <var:T> \land <var:o0> = <nat:9> \land <var:o2> = <nat:3> \} & <var:o2> := <var:o2> * <var:G> & \{ <var:G> = <var:T> \land <var:o0> = <nat:9> \land <var:o2> = <nat:3> \cdot <var:T> \} \end{tabular} Focusing on the following steps contained in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:G> = <var:T> \} & <var:o0> := <nat:9> & \{ <var:G> = <var:T> \land <var:o0> = <nat:9> \} \\ \{ <var:G> = <var:T> \land <var:o0> = <nat:9> \} & <var:o2> := <nat:3> & \{ <var:G> = <var:T> \land <var:o0> = <nat:9> \land <var:o2> = <nat:3> \} \\ \{ <var:G> = <var:T> \land <var:o0> = <nat:9> \land <var:o2> = <nat:3> \} & <var:o2> := <var:o2> * <var:G> & \{ <var:G> = <var:T> \land <var:o0> = <nat:9> \land <var:o2> = <nat:3> \cdot <var:T> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o2> : string := " <var:o2> " . Definition <def:poly> := <var:o0> := <nat:9> ; <var:o2> := <nat:3> ; <var:o2> := <var:o2> * <var:G> ; <var:o2> := <var:o2> * <var:G> ; <var:l> := <var:o2> ; <var:l> := <var:l> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:T> : nat , {{ <var:G> = <var:T> }} <def:poly> {{ <var:l> = <nat:3> * <var:T> ^ <nat:2> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:T> /\ <var:o0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:T> /\ <var:o0> = <nat:9> /\ <var:o2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:T> /\ <var:o0> = <nat:9> /\ <var:o2> = <nat:3> * <var:T> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:T> /\ <var:o0> = <nat:9> /\ <var:o2> = <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:T> /\ <var:o0> = <nat:9> /\ <var:l> = <nat:3> * <var:T> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:T> /\ <var:l> = <nat:3> * <var:T> ^ <nat:2> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 