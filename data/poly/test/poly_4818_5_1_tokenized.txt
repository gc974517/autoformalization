\begin{document} \begin{theorem} Take the following segment of code in \emph{Imp} such that \begin{verbatim} <var:Z1> := <var:C> ; <var:Z0> := <nat:5> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:l> := <var:Z1> <var:l> := <var:l> + <var:Z0> \end{verbatim} Allowing , taking whole numbers $ <var:y> $ , $ <var:C> = <var:y> $ before executing this program then we see $ <var:l> = <nat:4> \times <var:y> + <nat:5> $ once list of commands exits . \end{theorem} \begin{proof} Utilizing Hoare techniques returns : \begin{eqnarray} \{ <var:C> = <var:y> \} \\ <var:Z1> := <var:C> ; \\ \{ <var:C> = <var:y> \land <var:Z1> = <var:y> \} \\ <var:Z0> := <nat:5> ; \\ \{ <var:C> = <var:y> \land <var:Z1> = <var:y> \land <var:Z0> = <nat:5> \} \\ <var:Z1> := <var:Z1> * <nat:4> ; \\ \{ <var:C> = <var:y> \land <var:Z1> = <nat:4> \times <var:y> \land <var:Z0> = <nat:5> \} \\ <var:l> := <var:Z1> \\ \{ <var:C> = <var:y> \land <var:Z0> = <nat:5> \land <var:l> = <nat:4> \times <var:y> \} \\ <var:l> := <var:l> + <var:Z0> \\ \{ <var:C> = <var:y> \land <var:l> = <nat:4> \times <var:y> + <nat:5> \} \end{eqnarray} Considering the above , the list of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:C> = <var:y> }} <var:Z1> := <var:C> ; <var:Z0> := <nat:5> ; <var:Z1> := <var:Z1> * <nat:4> ; <var:l> := <var:Z1> <var:l> := <var:l> + <var:Z0> {{ <var:l> = <nat:4> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:Z1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:Z1> = <var:y> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:Z1> = <nat:4> * <var:y> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:Z0> = <nat:5> /\ <var:l> = <nat:4> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:C> = <var:y> /\ <var:l> = <nat:4> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 