\begin{document} \begin{theorem} Take the following list of commands such that \begin{verbatim} <var:u0> := <nat:5> ; <var:u1> := <nat:7> ; <var:u1> := <var:u1> * <var:s> ; <var:H> := <var:u1> ; <var:H> := <var:H> + <var:u0> \end{verbatim} Assume that $ <var:s> = <var:l> $ ahead of running this series of instructions then we see $ <var:H> = <nat:7> \times <var:l> + <nat:5> $ when segment of code has executed . \end{theorem} \begin{proof} Notice the following decorated list of instructions . \begin{eqnarray} \{ <var:s> = <var:l> \} \\ <var:u0> := <nat:5> ; \\ \{ <var:s> = <var:l> \land <var:u0> = <nat:5> \} \\ <var:u1> := <nat:7> ; \\ \{ <var:s> = <var:l> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> \} \\ <var:u1> := <var:u1> * <var:s> ; \\ \{ <var:s> = <var:l> \land <var:u0> = <nat:5> \land <var:u1> = <nat:7> \times <var:l> \} \\ <var:H> := <var:u1> ; \\ \{ <var:s> = <var:l> \land <var:u0> = <nat:5> \land <var:H> = <nat:7> \times <var:l> \} \\ <var:H> := <var:H> + <var:u0> \\ \{ <var:s> = <var:l> \land <var:H> = <nat:7> \times <var:l> + <nat:5> \} \end{eqnarray} Using usual Hoare techniques accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:u0> : string := " <var:u0> " . Definition <var:u1> : string := " <var:u1> " . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:s> = <var:l> }} <var:u0> := <nat:5> ; <var:u1> := <nat:7> ; <var:u1> := <var:u1> * <var:s> ; <var:H> := <var:u1> ; <var:H> := <var:H> + <var:u0> {{ <var:H> = <nat:7> * <var:l> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:u0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:u0> = <nat:5> /\ <var:u1> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:u0> = <nat:5> /\ <var:H> = <nat:7> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:s> = <var:l> /\ <var:H> = <nat:7> * <var:l> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 