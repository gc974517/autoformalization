\begin{document} \begin{theorem} Define the following code segment such that \begin{verbatim} <var:J1> := <var:i> ; <var:J2> := <var:J1> * <var:i> ; <var:J3> := <var:J2> * <var:i> ; <var:J4> := <var:J3> * <var:i> ; <var:J0> := <nat:1> ; <var:J1> := <var:J1> * <nat:2> ; <var:J4> := <var:J4> * <nat:8> ; <var:D> := <var:J4> <var:D> := <var:D> + <var:J1> <var:D> := <var:D> + <var:J0> \end{verbatim} Assume that we have $ <var:i> = <var:Y> $ before evaluating the code it must be that we have $ <var:D> = <nat:8> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> + <nat:1> $ . \end{theorem} \begin{proof} The flow of logic for our segment of code can be done with Hoare reasoning . Taking a look at the upcoming commands seen in the list of commands , \verb | { <var:i> = <var:Y> } <var:J1> := <var:i> { <var:i> = <var:Y> \land <var:J1> = <var:Y> } | , \verb | { <var:i> = <var:Y> \land <var:J1> = <var:Y> } <var:J2> := <var:J1> * <var:i> { <var:i> = <var:Y> \land <var:J1> = <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> } | , \verb | { <var:i> = <var:Y> \land <var:J1> = <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> } <var:J3> := <var:J2> * <var:i> { <var:i> = <var:Y> \land <var:J1> = <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> \land <var:J3> = <var:Y> ^ <nat:3> } | , \verb | { <var:i> = <var:Y> \land <var:J1> = <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> \land <var:J3> = <var:Y> ^ <nat:3> } <var:J4> := <var:J3> * <var:i> { <var:i> = <var:Y> \land <var:J1> = <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> \land <var:J3> = <var:Y> ^ <nat:3> \land <var:J4> = <var:Y> ^ <nat:4> } | , \verb | { <var:i> = <var:Y> \land <var:J1> = <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> \land <var:J3> = <var:Y> ^ <nat:3> \land <var:J4> = <var:Y> ^ <nat:4> } <var:J0> := <nat:1> { <var:i> = <var:Y> \land <var:J1> = <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> \land <var:J3> = <var:Y> ^ <nat:3> \land <var:J4> = <var:Y> ^ <nat:4> \land <var:J0> = <nat:1> } | , \verb | { <var:i> = <var:Y> \land <var:J1> = <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> \land <var:J3> = <var:Y> ^ <nat:3> \land <var:J4> = <var:Y> ^ <nat:4> \land <var:J0> = <nat:1> } <var:J1> := <var:J1> * <nat:2> { <var:i> = <var:Y> \land <var:J1> = <nat:2> \cdot <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> \land <var:J3> = <var:Y> ^ <nat:3> \land <var:J4> = <var:Y> ^ <nat:4> \land <var:J0> = <nat:1> } | , \verb | { <var:i> = <var:Y> \land <var:J1> = <nat:2> \cdot <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> \land <var:J3> = <var:Y> ^ <nat:3> \land <var:J4> = <var:Y> ^ <nat:4> \land <var:J0> = <nat:1> } <var:J4> := <var:J4> * <nat:8> { <var:i> = <var:Y> \land <var:J1> = <nat:2> \cdot <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> \land <var:J3> = <var:Y> ^ <nat:3> \land <var:J4> = <nat:8> \cdot <var:Y> ^ <nat:4> \land <var:J0> = <nat:1> } | , \verb | { <var:i> = <var:Y> \land <var:J1> = <nat:2> \cdot <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> \land <var:J3> = <var:Y> ^ <nat:3> \land <var:J4> = <nat:8> \cdot <var:Y> ^ <nat:4> \land <var:J0> = <nat:1> } <var:D> := <var:J4{ <var:i> = <var:Y> \land <var:J1> = <nat:2> \cdot <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> \land <var:J3> = <var:Y> ^ <nat:3> \land <var:J0> = <nat:1> \land <var:D> = <nat:8> \cdot <var:Y> ^ <nat:4> } | , \verb | { <var:i> = <var:Y> \land <var:J1> = <nat:2> \cdot <var:Y> \land <var:J2> = <var:Y> ^ <nat:2> \land <var:J3> = <var:Y> ^ <nat:3> \land <var:J0> = <nat:1> \land <var:D> = <nat:8> \cdot <var:Y> ^ <nat:4> } <var:D> := <var:D> + <var:J1{ <var:i> = <var:Y> \land <var:J0> = <nat:1> \land <var:D> = <nat:8> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> } | and \verb | { <var:i> = <var:Y> \land <var:J0> = <nat:1> \land <var:D> = <nat:8> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> } <var:D> := <var:D> + <var:J0{ <var:i> = <var:Y> \land <var:D> = <nat:8> \cdot <var:Y> ^ <nat:4> + <nat:2> \cdot <var:Y> + <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:J0> : string := " <var:J0> " . Definition <var:J1> : string := " <var:J1> " . Definition <var:J2> : string := " <var:J2> " . Definition <var:J3> : string := " <var:J3> " . Definition <var:J4> : string := " <var:J4> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:i> = <var:Y> }} <var:J1> := <var:i> ; <var:J2> := <var:J1> * <var:i> ; <var:J3> := <var:J2> * <var:i> ; <var:J4> := <var:J3> * <var:i> ; <var:J0> := <nat:1> ; <var:J1> := <var:J1> * <nat:2> ; <var:J4> := <var:J4> * <nat:8> ; <var:D> := <var:J4> <var:D> := <var:D> + <var:J1> <var:D> := <var:D> + <var:J0> {{ <var:D> = <nat:8> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:J1> = <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:J1> = <var:Y> /\ <var:J2> = <var:Y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:J1> = <var:Y> /\ <var:J2> = <var:Y> ^ <nat:2> /\ <var:J3> = <var:Y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:J1> = <var:Y> /\ <var:J2> = <var:Y> ^ <nat:2> /\ <var:J3> = <var:Y> ^ <nat:3> /\ <var:J4> = <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:J1> = <var:Y> /\ <var:J2> = <var:Y> ^ <nat:2> /\ <var:J3> = <var:Y> ^ <nat:3> /\ <var:J4> = <var:Y> ^ <nat:4> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:J1> = <nat:2> * <var:Y> /\ <var:J2> = <var:Y> ^ <nat:2> /\ <var:J3> = <var:Y> ^ <nat:3> /\ <var:J4> = <var:Y> ^ <nat:4> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:J1> = <nat:2> * <var:Y> /\ <var:J2> = <var:Y> ^ <nat:2> /\ <var:J3> = <var:Y> ^ <nat:3> /\ <var:J4> = <nat:8> * <var:Y> ^ <nat:4> /\ <var:J0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:J1> = <nat:2> * <var:Y> /\ <var:J2> = <var:Y> ^ <nat:2> /\ <var:J3> = <var:Y> ^ <nat:3> /\ <var:J0> = <nat:1> /\ <var:D> = <nat:8> * <var:Y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:J0> = <nat:1> /\ <var:D> = <nat:8> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:Y> /\ <var:D> = <nat:8> * <var:Y> ^ <nat:4> + <nat:2> * <var:Y> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 