\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:2> ; <var:k> := <var:G0> \end{verbatim} \end{definition} \begin{theorem} Assuming it to hold that $ <var:z> = <var:J> $ ahead of running this series of commands it must be that we see $ <var:k> = <nat:2> $ . \end{theorem} \begin{proof} Showing our claim about correctness for the program can be shown with typical Hoare reasoning . Shifting focus toward the proceeding bit of code contained in the series of commands , we have the variable binding code giving $ <nat:2> $ to $ <var:G0>$ . This transfers the precondition $ \{ <var:z> = <var:J> \} $ as the condition $ \{ <var:z> = <var:J> \land <var:G0> = <nat:2> \} $ . Focusing on the proceeding statement found in the code , we see the environment update statement letting $ <var:G0$ toward $ <var:k>$ . This redefines the precondition $ \{ <var:z> = <var:J> \land <var:G0> = <nat:2> \} $ to $ \{ <var:z> = <var:J> \land <var:k> = <nat:2> \} $ . This is sound through the assignment law in usual Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <def:poly> := <var:G0> := <nat:2> ; <var:k> := <var:G0> . Theorem <genH:poly_code_correct> : forall <var:J> : nat , {{ <var:z> = <var:J> }} <def:poly> {{ <var:k> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:G0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:J> /\ <var:k> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 