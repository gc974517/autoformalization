\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:v0> := <nat:1> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:p> ; <var:v3> := <nat:2> ; <var:v3> := <var:v3> * <var:p> ; <var:v3> := <var:v3> * <var:p> ; <var:v3> := <var:v3> * <var:p> ; <var:i> := <var:v3> ; <var:i> := <var:i> + <var:v1> ; <var:i> := <var:i> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Given it to be that $ <var:p> = <var:s> $ taking $ <var:s> \in \mathbb{Z}^+ $ before running the set of commands , it must be that we have $ <var:i> = <nat:2> \cdot <var:s> ^ <nat:3> + <nat:3> \cdot <var:s> + <nat:1> $ . \end{theorem} \begin{proof} The proof of the program can be done using Hoare reasoning . After , we see \verb | { <var:p> = <var:s> } <var:v0> := <nat:1> { <var:p> = <var:s> \land <var:v0> = <nat:1> } | , \verb | { <var:p> = <var:s> \land <var:v0> = <nat:1> } <var:v1> := <nat:3> { <var:p> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:3> } | , \verb | { <var:p> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:3> } <var:v1> := <var:v1> * <var:p> { <var:p> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:3> \cdot <var:s> } | , \verb | { <var:p> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:3> \cdot <var:s> } <var:v3> := <nat:2> { <var:p> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:3> \cdot <var:s> \land <var:v3> = <nat:2> } | , \verb | { <var:p> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:3> \cdot <var:s> \land <var:v3> = <nat:2> } <var:v3> := <var:v3> * <var:p> { <var:p> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:3> \cdot <var:s> \land <var:v3> = <nat:2> \cdot <var:s> } | and \verb | { <var:p> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:3> \cdot <var:s> \land <var:v3> = <nat:2> \cdot <var:s> } <var:v3> := <var:v3> * <var:p> { <var:p> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:3> \cdot <var:s> \land <var:v3> = <nat:2> \cdot <var:s> ^ <nat:2> } | . Moving on to the subsequent statements contained in our code segment , we see \verb | { <var:p> = <var:s> } <var:v0> := <nat:1> { <var:p> = <var:s> \land <var:v0> = <nat:1> } | and \verb | { <var:p> = <var:s> \land <var:v0> = <nat:1> } <var:v1> := <nat:3> { <var:p> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:3> } | . This is ensured through the inference rule defined in usual Hoare reasoning . Considering the next bits of codefound in our list of commands , \verb | { <var:p> = <var:s> } <var:v0> := <nat:1> { <var:p> = <var:s> \land <var:v0> = <nat:1> } | and \verb | { <var:p> = <var:s> \land <var:v0> = <nat:1> } <var:v1> := <nat:3> { <var:p> = <var:s> \land <var:v0> = <nat:1> \land <var:v1> = <nat:3> } | . This is known to be sound with the assignment inference rule from standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v3> : string := " <var:v3> " . Definition <def:poly> := <var:v0> := <nat:1> ; <var:v1> := <nat:3> ; <var:v1> := <var:v1> * <var:p> ; <var:v3> := <nat:2> ; <var:v3> := <var:v3> * <var:p> ; <var:v3> := <var:v3> * <var:p> ; <var:v3> := <var:v3> * <var:p> ; <var:i> := <var:v3> ; <var:i> := <var:i> + <var:v1> ; <var:i> := <var:i> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:p> = <var:s> }} <def:poly> {{ <var:i> = <nat:2> * <var:s> ^ <nat:3> + <nat:3> * <var:s> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:3> * <var:s> /\ <var:v3> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:3> * <var:s> /\ <var:v3> = <nat:2> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:3> * <var:s> /\ <var:v3> = <nat:2> * <var:s> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:3> * <var:s> /\ <var:v3> = <nat:2> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:v0> = <nat:1> /\ <var:v1> = <nat:3> * <var:s> /\ <var:i> = <nat:2> * <var:s> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:v0> = <nat:1> /\ <var:i> = <nat:2> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:p> = <var:s> /\ <var:i> = <nat:2> * <var:s> ^ <nat:3> + <nat:3> * <var:s> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 