\begin{document} \begin{theorem} We define a code segment as follows \begin{verbatim} <var:s> := <nat:3> ; <var:s> := <nat:1> + <var:s> * <var:w> ; <var:s> := <nat:4> + <var:s> * <var:w> \end{verbatim} Given , taking $ <var:v> $ , that $ <var:w> = <var:v> $ prior to the execution of the code segment , it holds that we see $ <var:s> = <nat:3> \cdot <var:v> ^ <nat:2> + <nat:1> \cdot <var:v> + <nat:4> $ after segment of code has finished executing . \end{theorem} \begin{proof} Using typical Hoare techniques returns : \begin{eqnarray} \{ <var:w> = <var:v> \} \\ <var:s> := <nat:3> ; \\ \{ <var:w> = <var:v> \land <var:s> = <nat:3> \} \\ <var:s> := <nat:1> + <var:s> * <var:w> ; \\ \{ <var:w> = <var:v> \land <var:s> = <nat:3> * <var:v> + <nat:1> \} \\ <var:s> := <nat:4> + <var:s> * <var:w> \\ \{ <var:w> = <var:v> \land <var:s> = <nat:3> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:4> \} \end{eqnarray} Considering the above , this list of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:w> = <var:v> }} <var:s> := <nat:3> ; <var:s> := <nat:1> + <var:s> * <var:w> ; <var:s> := <nat:4> + <var:s> * <var:w> {{ <var:s> = <nat:3> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:s> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:s> = <nat:3> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:w> = <var:v> /\ <var:s> = <nat:3> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 