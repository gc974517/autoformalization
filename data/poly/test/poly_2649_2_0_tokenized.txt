\begin{document} \begin{theorem} We define a series of instructions : \begin{verbatim} <var:Z0> := <nat:9> ; <var:p> := <var:Z0> \end{verbatim} Assume it to hold that $ <var:q> = <var:F> $ , for all positive numbers $ <var:F> $ , before interpreting the list of instructions , it holds that we see $ <var:p> = <nat:9> $ after segment of code finishes . \end{theorem} \begin{proof} The argument for the list of instructions can be accomplished by Hoare reasoning . Shifting focus toward the proceeding command in the series of commands , \begin{eqnarray} \{ <var:q> = <var:F> \} \, <var:Z0> := <nat:9> \, \{ <var:q> = <var:F> \land <var:Z0> = <nat:9> \} \end{eqnarray} Taking another step toward the next bit of code seen in the list of instructions , \begin{eqnarray} \{ <var:q> = <var:F> \} \, <var:Z0> := <nat:9> \, \{ <var:q> = <var:F> \land <var:Z0> = <nat:9> \} \end{eqnarray} This is shown with the environment update inference rule in typical Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Theorem <genH:poly_code_correct> : forall <var:F> : nat , {{ <var:q> = <var:F> }} <var:Z0> := <nat:9> ; <var:p> := <var:Z0> {{ <var:p> = <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:F> /\ <var:Z0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:F> /\ <var:p> = <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 