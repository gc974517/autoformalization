\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as \begin{verbatim} <var:r0> := <nat:3> ; <var:r1> := <nat:4> ; <var:r1> := <var:r1> * <var:b> ; <var:r4> := <nat:1> ; <var:r4> := <var:r4> * <var:b> ; <var:r4> := <var:r4> * <var:b> ; <var:r4> := <var:r4> * <var:b> ; <var:r4> := <var:r4> * <var:b> ; <var:g> := <var:r4> ; <var:g> := <var:g> + <var:r1> ; <var:g> := <var:g> + <var:r0> \end{verbatim} Assuming $ <var:b> = <var:X> $ ahead of the evaluation of this series of commands , it must be that we see $ <var:g> = <nat:1> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> + <nat:3> $ . \end{theorem} \begin{proof} The application of usual Hoare techniques returns : \begin{eqnarray} \{ <var:b> = <var:X> \} \\ <var:r0> := <nat:3> ; \\ \{ <var:b> = <var:X> \land <var:r0> = <nat:3> \} \\ <var:r1> := <nat:4> ; \\ \{ <var:b> = <var:X> \land <var:r0> = <nat:3> \land <var:r1> = <nat:4> \} \\ <var:r1> := <var:r1> * <var:b> ; \\ \{ <var:b> = <var:X> \land <var:r0> = <nat:3> \land <var:r1> = <nat:4> \cdot <var:X> \} \\ <var:r4> := <nat:1> ; \\ \{ <var:b> = <var:X> \land <var:r0> = <nat:3> \land <var:r1> = <nat:4> \cdot <var:X> \land <var:r4> = <nat:1> \} \\ <var:r4> := <var:r4> * <var:b> ; \\ \{ <var:b> = <var:X> \land <var:r0> = <nat:3> \land <var:r1> = <nat:4> \cdot <var:X> \land <var:r4> = <nat:1> \cdot <var:X> \} \\ <var:r4> := <var:r4> * <var:b> ; \\ \{ <var:b> = <var:X> \land <var:r0> = <nat:3> \land <var:r1> = <nat:4> \cdot <var:X> \land <var:r4> = <nat:1> \cdot <var:X> ^ <nat:2> \} \\ <var:r4> := <var:r4> * <var:b> ; \\ \{ <var:b> = <var:X> \land <var:r0> = <nat:3> \land <var:r1> = <nat:4> \cdot <var:X> \land <var:r4> = <nat:1> \cdot <var:X> ^ <nat:3> \} \\ <var:r4> := <var:r4> * <var:b> ; \\ \{ <var:b> = <var:X> \land <var:r0> = <nat:3> \land <var:r1> = <nat:4> \cdot <var:X> \land <var:r4> = <nat:1> \cdot <var:X> ^ <nat:4> \} \\ <var:g> := <var:r4> ; \\ \{ <var:b> = <var:X> \land <var:r0> = <nat:3> \land <var:r1> = <nat:4> \cdot <var:X> \land <var:g> = <nat:1> \cdot <var:X> ^ <nat:4> \} \\ <var:g> := <var:g> + <var:r1> ; \\ \{ <var:b> = <var:X> \land <var:r0> = <nat:3> \land <var:g> = <nat:1> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> \} \\ <var:g> := <var:g> + <var:r0> \\ \{ <var:b> = <var:X> \land <var:g> = <nat:1> \cdot <var:X> ^ <nat:4> + <nat:4> \cdot <var:X> + <nat:3> \} \end{eqnarray} As a consequence , our code has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Definition <var:r1> : string := " <var:r1> " . Definition <var:r4> : string := " <var:r4> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:b> = <var:X> }} <var:r0> := <nat:3> ; <var:r1> := <nat:4> ; <var:r1> := <var:r1> * <var:b> ; <var:r4> := <nat:1> ; <var:r4> := <var:r4> * <var:b> ; <var:r4> := <var:r4> * <var:b> ; <var:r4> := <var:r4> * <var:b> ; <var:r4> := <var:r4> * <var:b> ; <var:g> := <var:r4> ; <var:g> := <var:g> + <var:r1> ; <var:g> := <var:g> + <var:r0> {{ <var:g> = <nat:1> * <var:X> ^ <nat:4> + <nat:4> * <var:X> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:r0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:4> * <var:X> /\ <var:r4> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:4> * <var:X> /\ <var:r4> = <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:4> * <var:X> /\ <var:r4> = <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:4> * <var:X> /\ <var:r4> = <nat:1> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:4> * <var:X> /\ <var:r4> = <nat:1> * <var:X> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:r0> = <nat:3> /\ <var:r1> = <nat:4> * <var:X> /\ <var:g> = <nat:1> * <var:X> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:r0> = <nat:3> /\ <var:g> = <nat:1> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:X> /\ <var:g> = <nat:1> * <var:X> ^ <nat:4> + <nat:4> * <var:X> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 