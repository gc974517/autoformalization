\begin{document} \begin{theorem} Consider a program such that \begin{verbatim} <var:S1> := <var:a> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:4> ; <var:l> := <var:S1> <var:l> := <var:l> + <var:S0> \end{verbatim} Assuming it to hold that $ <var:a> = <var:m> $ --- for some natural numbers $ <var:m> $ --- prior to interpreting this list of commands it must be that we see $ <var:l> = <nat:4> \times <var:m> + <nat:2> $ . \end{theorem} \begin{proof} The proof of this segment of code can be given with typical Hoare logic . Following , we see \verb | { <var:a> = <var:m> } <var:S1> := <var:a> { <var:a> = <var:m> \land <var:S1> = <var:m> } | . Moving forward , \verb | { <var:a> = <var:m> } <var:S1> := <var:a> { <var:a> = <var:m> \land <var:S1> = <var:m> } | and \verb | { <var:a> = <var:m> \land <var:S1> = <var:m> } <var:S0> := <nat:2> { <var:a> = <var:m> \land <var:S1> = <var:m> \land <var:S0> = <nat:2> } | . Moving on , we see \verb | { <var:a> = <var:m> } <var:S1> := <var:a> { <var:a> = <var:m> \land <var:S1> = <var:m> } | and \verb | { <var:a> = <var:m> \land <var:S1> = <var:m> } <var:S0> := <nat:2> { <var:a> = <var:m> \land <var:S1> = <var:m> \land <var:S0> = <nat:2> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:S0> : string := " <var:S0> " . Definition <var:S1> : string := " <var:S1> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:a> = <var:m> }} <var:S1> := <var:a> ; <var:S0> := <nat:2> ; <var:S1> := <var:S1> * <nat:4> ; <var:l> := <var:S1> <var:l> := <var:l> + <var:S0> {{ <var:l> = <nat:4> * <var:m> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:m> /\ <var:S1> = <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:m> /\ <var:S1> = <var:m> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:m> /\ <var:S1> = <nat:4> * <var:m> /\ <var:S0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:m> /\ <var:S0> = <nat:2> /\ <var:l> = <nat:4> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:m> /\ <var:l> = <nat:4> * <var:m> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 