\begin{document} \begin{theorem} Define the following list of instructions : \begin{verbatim} <var:C0> := <nat:4> ; <var:p> := <var:C0> \end{verbatim} Allowing it to hold that $ <var:d> = <var:t> $ ahead of running this series of commands it holds that $ <var:p> = <nat:4> $ after segment of code has terminated . \end{theorem} \begin{proof} Applying Hoare reasoning gives : \begin{eqnarray} \{ <var:d> = <var:t> \} \\ <var:C0> := <nat:4> ; \\ \{ <var:d> = <var:t> \land <var:C0> = <nat:4> \} \\ <var:p> := <var:C0> \\ \{ <var:d> = <var:t> \land <var:p> = <nat:4> \} \end{eqnarray} As a result , this list of commands is proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:d> = <var:t> }} <var:C0> := <nat:4> ; <var:p> := <var:C0> {{ <var:p> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:p> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 