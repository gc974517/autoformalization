\begin{document} \begin{definition} Let the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:s1> := <var:k> ; <var:s0> := <nat:9> ; <var:s1> := <var:s1> * <nat:2> ; <var:i> := <var:s1> <var:i> := <var:i> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Take the following program <def:poly> . Assume , for natural numbers $ <var:D> $ , that we have $ <var:k> = <var:D> $ before evaluating this list of instructions , then we see $ <var:i> = <nat:2> \times <var:D> + <nat:9> $ after set of commands finishes . \end{theorem} \begin{proof} Let this decorated program . \begin{eqnarray} \{ <var:k> = <var:D> \} \\ <var:s1> := <var:k> ; \\ \{ <var:k> = <var:D> \land <var:s1> = <var:D> \} \\ <var:s0> := <nat:9> ; \\ \{ <var:k> = <var:D> \land <var:s1> = <var:D> \land <var:s0> = <nat:9> \} \\ <var:s1> := <var:s1> * <nat:2> ; \\ \{ <var:k> = <var:D> \land <var:s1> = <nat:2> \times <var:D> \land <var:s0> = <nat:9> \} \\ <var:i> := <var:s1> \\ \{ <var:k> = <var:D> \land <var:s0> = <nat:9> \land <var:i> = <nat:2> \times <var:D> \} \\ <var:i> := <var:i> + <var:s0> \\ \{ <var:k> = <var:D> \land <var:i> = <nat:2> \times <var:D> + <nat:9> \} \end{eqnarray} Using usual Hoare logic finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <def:poly> := <var:s1> := <var:k> ; <var:s0> := <nat:9> ; <var:s1> := <var:s1> * <nat:2> ; <var:i> := <var:s1> <var:i> := <var:i> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:D> : nat , {{ <var:k> = <var:D> }} <def:poly> {{ <var:i> = <nat:2> * <var:D> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:D> /\ <var:s1> = <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:D> /\ <var:s1> = <var:D> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:D> /\ <var:s1> = <nat:2> * <var:D> /\ <var:s0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:D> /\ <var:s0> = <nat:9> /\ <var:i> = <nat:2> * <var:D> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:D> /\ <var:i> = <nat:2> * <var:D> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 