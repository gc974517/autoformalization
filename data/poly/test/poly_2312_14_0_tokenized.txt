\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as \begin{verbatim} <var:o0> := <nat:1> ; <var:o1> := <nat:4> ; <var:o1> := <var:o1> * <var:D> ; <var:o2> := <nat:3> ; <var:o2> := <var:o2> * <var:D> ; <var:o2> := <var:o2> * <var:D> ; <var:o3> := <nat:6> ; <var:o3> := <var:o3> * <var:D> ; <var:o3> := <var:o3> * <var:D> ; <var:o3> := <var:o3> * <var:D> ; <var:a> := <var:o3> ; <var:a> := <var:a> + <var:o2> ; <var:a> := <var:a> + <var:o1> ; <var:a> := <var:a> + <var:o0> \end{verbatim} Assuming it to hold that $ <var:D> = <var:P> $ before evaluating the program , it holds that we have $ <var:a> = <nat:6> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> $ . \end{theorem} \begin{proof} Proving correctness for this series of commands is shown through Hoare logic . Focusing on the upcoming statements seen in our series of commands , \begin{verbatim} { <var:D> = <var:P> } <var:o0> := <nat:1> { <var:D> = <var:P> \land <var:o0> = <nat:1> } { <var:D> = <var:P> \land <var:o0> = <nat:1> } <var:o1> := <nat:4> { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> } { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> } <var:o1> := <var:o1> * <var:D> { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> } { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> } <var:o2> := <nat:3> { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> } { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> } <var:o2> := <var:o2> * <var:D> { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> } { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> } <var:o2> := <var:o2> * <var:D> { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> ^ <nat:2> } { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> ^ <nat:2> } <var:o3> := <nat:6> { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> ^ <nat:2> \land <var:o3> = <nat:6> } { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> ^ <nat:2> \land <var:o3> = <nat:6> } <var:o3> := <var:o3> * <var:D> { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> ^ <nat:2> \land <var:o3> = <nat:6> * <var:P> } { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> ^ <nat:2> \land <var:o3> = <nat:6> * <var:P> } <var:o3> := <var:o3> * <var:D> { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> ^ <nat:2> \land <var:o3> = <nat:6> * <var:P> ^ <nat:2> } { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> ^ <nat:2> \land <var:o3> = <nat:6> * <var:P> ^ <nat:2> } <var:o3> := <var:o3> * <var:D> { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> ^ <nat:2> \land <var:o3> = <nat:6> * <var:P> ^ <nat:3> } { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> ^ <nat:2> \land <var:o3> = <nat:6> * <var:P> ^ <nat:3> } <var:a> := <var:o3> { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> ^ <nat:2> \land <var:a> = <nat:6> * <var:P> ^ <nat:3> } { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:o2> = <nat:3> * <var:P> ^ <nat:2> \land <var:a> = <nat:6> * <var:P> ^ <nat:3> } <var:a> := <var:a> + <var:o2> { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:a> = <nat:6> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> } { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:o1> = <nat:4> * <var:P> \land <var:a> = <nat:6> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> } <var:a> := <var:a> + <var:o1> { <var:D> = <var:P> \land <var:o0> = <nat:1> \land <var:a> = <nat:6> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> } \end{verbatim} This is sound with the inference rule given by standard Hoare techniques . Stepping forward , \begin{verbatim} { <var:D> = <var:P> } <var:o0> := <nat:1> { <var:D> = <var:P> \land <var:o0> = <nat:1> } \end{verbatim} This is known to be sound using the law defined in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:D> = <var:P> }} <var:o0> := <nat:1> ; <var:o1> := <nat:4> ; <var:o1> := <var:o1> * <var:D> ; <var:o2> := <nat:3> ; <var:o2> := <var:o2> * <var:D> ; <var:o2> := <var:o2> * <var:D> ; <var:o3> := <nat:6> ; <var:o3> := <var:o3> * <var:D> ; <var:o3> := <var:o3> * <var:D> ; <var:o3> := <var:o3> * <var:D> ; <var:a> := <var:o3> ; <var:a> := <var:a> + <var:o2> ; <var:a> := <var:a> + <var:o1> ; <var:a> := <var:a> + <var:o0> {{ <var:a> = <nat:6> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:4> * <var:P> /\ <var:o2> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:4> * <var:P> /\ <var:o2> = <nat:3> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:4> * <var:P> /\ <var:o2> = <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:4> * <var:P> /\ <var:o2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:o3> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:4> * <var:P> /\ <var:o2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:o3> = <nat:6> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:4> * <var:P> /\ <var:o2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:o3> = <nat:6> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:4> * <var:P> /\ <var:o2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:o3> = <nat:6> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:4> * <var:P> /\ <var:o2> = <nat:3> * <var:P> ^ <nat:2> /\ <var:a> = <nat:6> * <var:P> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:1> /\ <var:o1> = <nat:4> * <var:P> /\ <var:a> = <nat:6> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:o0> = <nat:1> /\ <var:a> = <nat:6> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:P> /\ <var:a> = <nat:6> * <var:P> ^ <nat:3> + <nat:3> * <var:P> ^ <nat:2> + <nat:4> * <var:P> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 