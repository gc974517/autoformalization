\begin{document} \begin{definition} Define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:2> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:R> ; <var:s2> := <nat:8> ; <var:s2> := <var:s2> * <var:R> ; <var:s2> := <var:s2> * <var:R> ; <var:E> := <var:s2> ; <var:E> := <var:E> + <var:s1> ; <var:E> := <var:E> + <var:s0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:R> = <var:q> $ --- given all positive integers $ <var:q> $ --- prior to evaluating the series of instructions then $ <var:E> = <nat:8> \times <var:q> ^ <nat:2> + <nat:3> \times <var:q> + <nat:2> $ . \end{theorem} \begin{proof} The application of standard Hoare techniques produces : \begin{eqnarray} \{ <var:R> = <var:q> \} \\ <var:s0> := <nat:2> ; \\ \{ <var:R> = <var:q> \land <var:s0> = <nat:2> \} \\ <var:s1> := <nat:3> ; \\ \{ <var:R> = <var:q> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \} \\ <var:s1> := <var:s1> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \cdot <var:q> \} \\ <var:s2> := <nat:8> ; \\ \{ <var:R> = <var:q> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \cdot <var:q> \land <var:s2> = <nat:8> \} \\ <var:s2> := <var:s2> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \cdot <var:q> \land <var:s2> = <nat:8> \cdot <var:q> \} \\ <var:s2> := <var:s2> * <var:R> ; \\ \{ <var:R> = <var:q> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \cdot <var:q> \land <var:s2> = <nat:8> \cdot <var:q> ^ <nat:2> \} \\ <var:E> := <var:s2> ; \\ \{ <var:R> = <var:q> \land <var:s0> = <nat:2> \land <var:s1> = <nat:3> \cdot <var:q> \land <var:E> = <nat:8> \cdot <var:q> ^ <nat:2> \} \\ <var:E> := <var:E> + <var:s1> ; \\ \{ <var:R> = <var:q> \land <var:s0> = <nat:2> \land <var:E> = <nat:8> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> \} \\ <var:E> := <var:E> + <var:s0> \\ \{ <var:R> = <var:q> \land <var:E> = <nat:8> \cdot <var:q> ^ <nat:2> + <nat:3> \cdot <var:q> + <nat:2> \} \end{eqnarray} Hence , the set of instructions has been shown to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Definition <def:poly> := <var:s0> := <nat:2> ; <var:s1> := <nat:3> ; <var:s1> := <var:s1> * <var:R> ; <var:s2> := <nat:8> ; <var:s2> := <var:s2> * <var:R> ; <var:s2> := <var:s2> * <var:R> ; <var:E> := <var:s2> ; <var:E> := <var:E> + <var:s1> ; <var:E> := <var:E> + <var:s0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:R> = <var:q> }} <def:poly> {{ <var:E> = <nat:8> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:s0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> * <var:q> /\ <var:s2> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> * <var:q> /\ <var:s2> = <nat:8> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> * <var:q> /\ <var:s2> = <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:s0> = <nat:2> /\ <var:s1> = <nat:3> * <var:q> /\ <var:E> = <nat:8> * <var:q> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:s0> = <nat:2> /\ <var:E> = <nat:8> * <var:q> ^ <nat:2> + <nat:3> * <var:q> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:q> /\ <var:E> = <nat:8> * <var:q> ^ <nat:2> + <nat:3> * <var:q> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 