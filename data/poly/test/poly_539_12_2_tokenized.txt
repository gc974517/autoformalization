\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o> := <nat:2> ; <var:o> := <nat:1> + <var:o> * <var:g> ; <var:o> := <nat:2> + <var:o> * <var:g> ; <var:o> := <nat:2> + <var:o> * <var:g> ; <var:o> := <nat:4> + <var:o> * <var:g> ; <var:o> := <nat:1> + <var:o> * <var:g> ; <var:o> := <nat:2> + <var:o> * <var:g> ; <var:o> := <nat:3> + <var:o> * <var:g> ; <var:o> := <nat:3> + <var:o> * <var:g> ; <var:o> := <nat:2> + <var:o> * <var:g> ; <var:o> := <nat:4> + <var:o> * <var:g> ; <var:o> := <nat:1> + <var:o> * <var:g> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:g> = <var:p> $ prior to the evaluation of our series of instructions , it follows that $ <var:o> = <nat:2> \cdot <var:p> ^ <nat:11> + <nat:1> \cdot <var:p> ^ <nat:10> + <nat:2> \cdot <var:p> ^ <nat:9> + <nat:2> \cdot <var:p> ^ <nat:8> + <nat:4> \cdot <var:p> ^ <nat:7> + <nat:1> \cdot <var:p> ^ <nat:6> + <nat:2> \cdot <var:p> ^ <nat:5> + <nat:3> \cdot <var:p> ^ <nat:4> + <nat:3> \cdot <var:p> ^ <nat:3> + <nat:2> \cdot <var:p> ^ <nat:2> + <nat:4> \cdot <var:p> + <nat:1> $ . \end{theorem} \begin{proof} Showing our claim about correctness for this series of instructions can be demonstrated by usual Hoare logic . Looking at the upcoming lines of codecontained in the series of instructions , we have \begin{verbatim} { <var:g> = <var:p> } <var:o> := <nat:2> { <var:g> = <var:p> \land <var:o> = <nat:2> } { <var:g> = <var:p> \land <var:o> = <nat:2> } <var:o> := <nat:1> + <var:o> * <var:g> { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> + <nat:1> } { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> + <nat:1> } <var:o> := <nat:2> + <var:o> * <var:g> { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:2> } { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:2> } <var:o> := <nat:2> + <var:o> * <var:g> { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:2> } { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> ^ <nat:3> + <nat:1> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:2> } <var:o> := <nat:4> + <var:o> * <var:g> { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:4> } { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> ^ <nat:4> + <nat:1> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:2> \times <var:p> + <nat:4> } <var:o> := <nat:1> + <var:o> * <var:g> { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:1> } { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> ^ <nat:5> + <nat:1> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:2> \times <var:p> ^ <nat:2> + <nat:4> \times <var:p> + <nat:1> } <var:o> := <nat:2> + <var:o> * <var:g> { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> ^ <nat:6> + <nat:1> \times <var:p> ^ <nat:5> + <nat:2> \times <var:p> ^ <nat:4> + <nat:2> \times <var:p> ^ <nat:3> + <nat:4> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:2> } \end{verbatim} This is known to be sound with the environment update inference rule defined by standard Hoare reasoning . Stepping through , we see \begin{verbatim} { <var:g> = <var:p> } <var:o> := <nat:2> { <var:g> = <var:p> \land <var:o> = <nat:2> } \end{verbatim} Considering the next steps seen in the series of commands , we have \begin{verbatim} { <var:g> = <var:p> } <var:o> := <nat:2> { <var:g> = <var:p> \land <var:o> = <nat:2> } { <var:g> = <var:p> \land <var:o> = <nat:2> } <var:o> := <nat:1> + <var:o> * <var:g> { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> + <nat:1> } { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> + <nat:1> } <var:o> := <nat:2> + <var:o> * <var:g> { <var:g> = <var:p> \land <var:o> = <nat:2> \times <var:p> ^ <nat:2> + <nat:1> \times <var:p> + <nat:2> } \end{verbatim} Keeping momentum , we have \begin{verbatim} { <var:g> = <var:p> } <var:o> := <nat:2> { <var:g> = <var:p> \land <var:o> = <nat:2> } \end{verbatim} This is ensured using the variable binding rule found in Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:o> := <nat:2> ; <var:o> := <nat:1> + <var:o> * <var:g> ; <var:o> := <nat:2> + <var:o> * <var:g> ; <var:o> := <nat:2> + <var:o> * <var:g> ; <var:o> := <nat:4> + <var:o> * <var:g> ; <var:o> := <nat:1> + <var:o> * <var:g> ; <var:o> := <nat:2> + <var:o> * <var:g> ; <var:o> := <nat:3> + <var:o> * <var:g> ; <var:o> := <nat:3> + <var:o> * <var:g> ; <var:o> := <nat:2> + <var:o> * <var:g> ; <var:o> := <nat:4> + <var:o> * <var:g> ; <var:o> := <nat:1> + <var:o> * <var:g> . Theorem <genH:poly_code_correct> : forall <var:p> : nat , {{ <var:g> = <var:p> }} <def:poly> {{ <var:o> = <nat:2> * <var:p> ^ <nat:11> + <nat:1> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:o> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:o> = <nat:2> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:o> = <nat:2> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:o> = <nat:2> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:o> = <nat:2> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:o> = <nat:2> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:o> = <nat:2> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:4> * <var:p> ^ <nat:2> + <nat:1> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:o> = <nat:2> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:4> * <var:p> ^ <nat:3> + <nat:1> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:o> = <nat:2> * <var:p> ^ <nat:8> + <nat:1> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:4> * <var:p> ^ <nat:4> + <nat:1> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:o> = <nat:2> * <var:p> ^ <nat:9> + <nat:1> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:2> * <var:p> ^ <nat:6> + <nat:4> * <var:p> ^ <nat:5> + <nat:1> * <var:p> ^ <nat:4> + <nat:2> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:3> * <var:p> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:o> = <nat:2> * <var:p> ^ <nat:10> + <nat:1> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:2> * <var:p> ^ <nat:7> + <nat:4> * <var:p> ^ <nat:6> + <nat:1> * <var:p> ^ <nat:5> + <nat:2> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:3> * <var:p> ^ <nat:2> + <nat:2> * <var:p> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:p> /\ <var:o> = <nat:2> * <var:p> ^ <nat:11> + <nat:1> * <var:p> ^ <nat:10> + <nat:2> * <var:p> ^ <nat:9> + <nat:2> * <var:p> ^ <nat:8> + <nat:4> * <var:p> ^ <nat:7> + <nat:1> * <var:p> ^ <nat:6> + <nat:2> * <var:p> ^ <nat:5> + <nat:3> * <var:p> ^ <nat:4> + <nat:3> * <var:p> ^ <nat:3> + <nat:2> * <var:p> ^ <nat:2> + <nat:4> * <var:p> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 