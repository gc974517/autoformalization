\begin{document} \begin{definition} We define the following series of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:m1> := <var:g> ; <var:m2> := <var:m1> * <var:g> ; <var:m0> := <nat:9> ; <var:m1> := <var:m1> * <nat:1> ; <var:m2> := <var:m2> * <nat:7> ; <var:x> := <var:m2> <var:x> := <var:x> + <var:m1> <var:x> := <var:x> + <var:m0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code <def:poly> . Assume it to be that $ <var:g> = <var:V> $ ahead of the execution of the code segment , it holds that we have $ <var:x> = <nat:7> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:9> $ once code segment terminates . \end{theorem} \begin{proof} Arguing the correctness of this segment of code is accomplished by usual Hoare reasoning . Paying attention to the next lines of codecontained in the series of commands , we have \[ \begin{tabular} {rcl} \{ <var:g> = <var:V> \} & <var:m1> := <var:g> & \{ <var:g> = <var:V> \land <var:m1> = <var:V> \} \\ \{ <var:g> = <var:V> \land <var:m1> = <var:V> \} & <var:m2> := <var:m1> * <var:g> & \{ <var:g> = <var:V> \land <var:m1> = <var:V> \land <var:m2> = <var:V> ^ <nat:2> \} \\ \{ <var:g> = <var:V> \land <var:m1> = <var:V> \land <var:m2> = <var:V> ^ <nat:2> \} & <var:m0> := <nat:9> & \{ <var:g> = <var:V> \land <var:m1> = <var:V> \land <var:m2> = <var:V> ^ <nat:2> \land <var:m0> = <nat:9> \} \\ \{ <var:g> = <var:V> \land <var:m1> = <var:V> \land <var:m2> = <var:V> ^ <nat:2> \land <var:m0> = <nat:9> \} & <var:m1> := <var:m1> * <nat:1> & \{ <var:g> = <var:V> \land <var:m1> = <nat:1> \cdot <var:V> \land <var:m2> = <var:V> ^ <nat:2> \land <var:m0> = <nat:9> \} \\ \{ <var:g> = <var:V> \land <var:m1> = <nat:1> \cdot <var:V> \land <var:m2> = <var:V> ^ <nat:2> \land <var:m0> = <nat:9> \} & <var:m2> := <var:m2> * <nat:7> & \{ <var:g> = <var:V> \land <var:m1> = <nat:1> \cdot <var:V> \land <var:m2> = <nat:7> \cdot <var:V> ^ <nat:2> \land <var:m0> = <nat:9> \} \\ \{ <var:g> = <var:V> \land <var:m1> = <nat:1> \cdot <var:V> \land <var:m2> = <nat:7> \cdot <var:V> ^ <nat:2> \land <var:m0> = <nat:9> \} & <var:x> := <var:m2& \{ <var:g> = <var:V> \land <var:m1> = <nat:1> \cdot <var:V> \land <var:m0> = <nat:9> \land <var:x> = <nat:7> \cdot <var:V> ^ <nat:2> \} \\ \{ <var:g> = <var:V> \land <var:m1> = <nat:1> \cdot <var:V> \land <var:m0> = <nat:9> \land <var:x> = <nat:7> \cdot <var:V> ^ <nat:2> \} & <var:x> := <var:x> + <var:m1& \{ <var:g> = <var:V> \land <var:m0> = <nat:9> \land <var:x> = <nat:7> \cdot <var:V> ^ <nat:2> + <nat:1> \cdot <var:V> \} \end{tabular} This is ensured through the environment update scheme obtained from typical Hoare logic . Next , \[ \begin{tabular} {rcl} \{ <var:g> = <var:V> \} & <var:m1> := <var:g> & \{ <var:g> = <var:V> \land <var:m1> = <var:V> \} \end{tabular} This is known to be sound through the variable binding scheme found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:m0> : string := " <var:m0> " . Definition <var:m1> : string := " <var:m1> " . Definition <var:m2> : string := " <var:m2> " . Definition <def:poly> := <var:m1> := <var:g> ; <var:m2> := <var:m1> * <var:g> ; <var:m0> := <nat:9> ; <var:m1> := <var:m1> * <nat:1> ; <var:m2> := <var:m2> * <nat:7> ; <var:x> := <var:m2> <var:x> := <var:x> + <var:m1> <var:x> := <var:x> + <var:m0> . Theorem <genH:poly_code_correct> : forall <var:V> : nat , {{ <var:g> = <var:V> }} <def:poly> {{ <var:x> = <nat:7> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:m1> = <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:m1> = <var:V> /\ <var:m2> = <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:m1> = <var:V> /\ <var:m2> = <var:V> ^ <nat:2> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:m1> = <nat:1> * <var:V> /\ <var:m2> = <var:V> ^ <nat:2> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:m1> = <nat:1> * <var:V> /\ <var:m2> = <nat:7> * <var:V> ^ <nat:2> /\ <var:m0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:m1> = <nat:1> * <var:V> /\ <var:m0> = <nat:9> /\ <var:x> = <nat:7> * <var:V> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:m0> = <nat:9> /\ <var:x> = <nat:7> * <var:V> ^ <nat:2> + <nat:1> * <var:V> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:g> = <var:V> /\ <var:x> = <nat:7> * <var:V> ^ <nat:2> + <nat:1> * <var:V> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 