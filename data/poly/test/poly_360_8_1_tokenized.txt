\begin{document} \begin{definition} We define the following set of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:n1> := <var:l> ; <var:n2> := <var:n1> * <var:l> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:9> ; <var:n2> := <var:n2> * <nat:8> ; <var:a> := <var:n2> <var:a> := <var:a> + <var:n1> <var:a> := <var:a> + <var:n0> \end{verbatim} \end{definition} \begin{theorem} We define the following code segment <def:poly> . Allowing that $ <var:l> = <var:e> $ before interpreting our segment of code it must be that we have $ <var:a> = <nat:8> \times <var:e> ^ <nat:2> + <nat:9> \times <var:e> + <nat:4> $ after series of commands exits . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:l> = <var:e> \} \\ <var:n1> := <var:l> ; \\ \{ <var:l> = <var:e> \land <var:n1> = <var:e> \} \\ <var:n2> := <var:n1> * <var:l> ; \\ \{ <var:l> = <var:e> \land <var:n1> = <var:e> \land <var:n2> = <var:e> ^ <nat:2> \} \\ <var:n0> := <nat:4> ; \\ \{ <var:l> = <var:e> \land <var:n1> = <var:e> \land <var:n2> = <var:e> ^ <nat:2> \land <var:n0> = <nat:4> \} \\ <var:n1> := <var:n1> * <nat:9> ; \\ \{ <var:l> = <var:e> \land <var:n1> = <nat:9> \cdot <var:e> \land <var:n2> = <var:e> ^ <nat:2> \land <var:n0> = <nat:4> \} \\ <var:n2> := <var:n2> * <nat:8> ; \\ \{ <var:l> = <var:e> \land <var:n1> = <nat:9> \cdot <var:e> \land <var:n2> = <nat:8> \cdot <var:e> ^ <nat:2> \land <var:n0> = <nat:4> \} \\ <var:a> := <var:n2> \\ \{ <var:l> = <var:e> \land <var:n1> = <nat:9> \cdot <var:e> \land <var:n0> = <nat:4> \land <var:a> = <nat:8> \cdot <var:e> ^ <nat:2> \} \\ <var:a> := <var:a> + <var:n1> \\ \{ <var:l> = <var:e> \land <var:n0> = <nat:4> \land <var:a> = <nat:8> \cdot <var:e> ^ <nat:2> + <nat:9> \cdot <var:e> \} \\ <var:a> := <var:a> + <var:n0> \\ \{ <var:l> = <var:e> \land <var:a> = <nat:8> \cdot <var:e> ^ <nat:2> + <nat:9> \cdot <var:e> + <nat:4> \} \end{eqnarray} The application of typical Hoare logic finalizes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Definition <def:poly> := <var:n1> := <var:l> ; <var:n2> := <var:n1> * <var:l> ; <var:n0> := <nat:4> ; <var:n1> := <var:n1> * <nat:9> ; <var:n2> := <var:n2> * <nat:8> ; <var:a> := <var:n2> <var:a> := <var:a> + <var:n1> <var:a> := <var:a> + <var:n0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:l> = <var:e> }} <def:poly> {{ <var:a> = <nat:8> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:n1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:n1> = <var:e> /\ <var:n2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:n1> = <var:e> /\ <var:n2> = <var:e> ^ <nat:2> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:n1> = <nat:9> * <var:e> /\ <var:n2> = <var:e> ^ <nat:2> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:n1> = <nat:9> * <var:e> /\ <var:n2> = <nat:8> * <var:e> ^ <nat:2> /\ <var:n0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:n1> = <nat:9> * <var:e> /\ <var:n0> = <nat:4> /\ <var:a> = <nat:8> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:n0> = <nat:4> /\ <var:a> = <nat:8> * <var:e> ^ <nat:2> + <nat:9> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:l> = <var:e> /\ <var:a> = <nat:8> * <var:e> ^ <nat:2> + <nat:9> * <var:e> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 