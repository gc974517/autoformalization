\begin{document} \begin{definition} Define the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:G0> := <nat:7> ; <var:G1> := <nat:7> ; <var:G1> := <var:G1> * <var:I> ; <var:w> := <var:G1> ; <var:w> := <var:w> + <var:G0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of instructions <def:poly> in \emph{Imp} . Allowing that $ <var:I> = <var:a> $ ahead of executing the program , it follows that we have $ <var:w> = <nat:7> * <var:a> + <nat:7> $ when set of instructions has executed . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:I> = <var:a> \} \\ <var:G0> := <nat:7> ; \\ \{ <var:I> = <var:a> \land <var:G0> = <nat:7> \} \\ <var:G1> := <nat:7> ; \\ \{ <var:I> = <var:a> \land <var:G0> = <nat:7> \land <var:G1> = <nat:7> \} \\ <var:G1> := <var:G1> * <var:I> ; \\ \{ <var:I> = <var:a> \land <var:G0> = <nat:7> \land <var:G1> = <nat:7> * <var:a> \} \\ <var:w> := <var:G1> ; \\ \{ <var:I> = <var:a> \land <var:G0> = <nat:7> \land <var:w> = <nat:7> * <var:a> \} \\ <var:w> := <var:w> + <var:G0> \\ \{ <var:I> = <var:a> \land <var:w> = <nat:7> * <var:a> + <nat:7> \} \end{eqnarray} Applying typical Hoare techniques solves the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <def:poly> := <var:G0> := <nat:7> ; <var:G1> := <nat:7> ; <var:G1> := <var:G1> * <var:I> ; <var:w> := <var:G1> ; <var:w> := <var:w> + <var:G0> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:I> = <var:a> }} <def:poly> {{ <var:w> = <nat:7> * <var:a> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:G0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:G0> = <nat:7> /\ <var:G1> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:G0> = <nat:7> /\ <var:w> = <nat:7> * <var:a> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:a> /\ <var:w> = <nat:7> * <var:a> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 