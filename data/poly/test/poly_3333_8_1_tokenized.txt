\begin{document} \begin{theorem} Consider the following set of commands : \begin{verbatim} <var:E1> := <var:G> ; <var:E2> := <var:E1> * <var:G> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:4> ; <var:E2> := <var:E2> * <nat:5> ; <var:D> := <var:E2> <var:D> := <var:D> + <var:E1> <var:D> := <var:D> + <var:E0> \end{verbatim} Assuming it to hold that $ <var:G> = <var:K> $ ahead of running this code segment it must be that $ <var:D> = <nat:5> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> + <nat:9> $ after set of instructions is done executing . \end{theorem} \begin{proof} Notice the below decorated program . \begin{eqnarray} \{ <var:G> = <var:K> \} \\ <var:E1> := <var:G> ; \\ \{ <var:G> = <var:K> \land <var:E1> = <var:K> \} \\ <var:E2> := <var:E1> * <var:G> ; \\ \{ <var:G> = <var:K> \land <var:E1> = <var:K> \land <var:E2> = <var:K> ^ <nat:2> \} \\ <var:E0> := <nat:9> ; \\ \{ <var:G> = <var:K> \land <var:E1> = <var:K> \land <var:E2> = <var:K> ^ <nat:2> \land <var:E0> = <nat:9> \} \\ <var:E1> := <var:E1> * <nat:4> ; \\ \{ <var:G> = <var:K> \land <var:E1> = <nat:4> \times <var:K> \land <var:E2> = <var:K> ^ <nat:2> \land <var:E0> = <nat:9> \} \\ <var:E2> := <var:E2> * <nat:5> ; \\ \{ <var:G> = <var:K> \land <var:E1> = <nat:4> \times <var:K> \land <var:E2> = <nat:5> \times <var:K> ^ <nat:2> \land <var:E0> = <nat:9> \} \\ <var:D> := <var:E2> \\ \{ <var:G> = <var:K> \land <var:E1> = <nat:4> \times <var:K> \land <var:E0> = <nat:9> \land <var:D> = <nat:5> \times <var:K> ^ <nat:2> \} \\ <var:D> := <var:D> + <var:E1> \\ \{ <var:G> = <var:K> \land <var:E0> = <nat:9> \land <var:D> = <nat:5> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> \} \\ <var:D> := <var:D> + <var:E0> \\ \{ <var:G> = <var:K> \land <var:D> = <nat:5> \times <var:K> ^ <nat:2> + <nat:4> \times <var:K> + <nat:9> \} \end{eqnarray} The application of typical Hoare reasoning finalizes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:E0> : string := " <var:E0> " . Definition <var:E1> : string := " <var:E1> " . Definition <var:E2> : string := " <var:E2> " . Theorem <genH:poly_code_correct> : forall <var:K> : nat , {{ <var:G> = <var:K> }} <var:E1> := <var:G> ; <var:E2> := <var:E1> * <var:G> ; <var:E0> := <nat:9> ; <var:E1> := <var:E1> * <nat:4> ; <var:E2> := <var:E2> * <nat:5> ; <var:D> := <var:E2> <var:D> := <var:D> + <var:E1> <var:D> := <var:D> + <var:E0> {{ <var:D> = <nat:5> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:E1> = <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:E1> = <var:K> /\ <var:E2> = <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:E1> = <var:K> /\ <var:E2> = <var:K> ^ <nat:2> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:E1> = <nat:4> * <var:K> /\ <var:E2> = <var:K> ^ <nat:2> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:E1> = <nat:4> * <var:K> /\ <var:E2> = <nat:5> * <var:K> ^ <nat:2> /\ <var:E0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:E1> = <nat:4> * <var:K> /\ <var:E0> = <nat:9> /\ <var:D> = <nat:5> * <var:K> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:E0> = <nat:9> /\ <var:D> = <nat:5> * <var:K> ^ <nat:2> + <nat:4> * <var:K> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:G> = <var:K> /\ <var:D> = <nat:5> * <var:K> ^ <nat:2> + <nat:4> * <var:K> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 