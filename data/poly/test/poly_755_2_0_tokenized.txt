\begin{document} \begin{theorem} Take a set of instructions such that \begin{verbatim} <var:x0> := <nat:1> ; <var:J> := <var:x0> \end{verbatim} Assuming $ <var:Q> = <var:c> $ for $ <var:c> \in \mathbb{Z}^+ $ prior to evaluating the set of instructions , it must be that $ <var:J> = <nat:1> $ . \end{theorem} \begin{proof} The way to prove correctness for our set of commands can be shown using Hoare techniques . Taking a look at the following step found in our set of commands , the variable assignmet code assigning $ <nat:1> $ as $ <var:x0>$ . This code transfers the condition $ \{ <var:Q> = <var:c> \} $ to the postcondition $ \{ <var:Q> = <var:c> \land <var:x0> = <nat:1> \} $ . Further , we see the variable update command \verb | <var:J> := <var:x0> | . This transfers $ \{ <var:Q> = <var:c> \land <var:x0> = <nat:1> \} $ as $ \{ <var:Q> = <var:c> \land <var:J> = <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:x0> : string := " <var:x0> " . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Q> = <var:c> }} <var:x0> := <nat:1> ; <var:J> := <var:x0> {{ <var:J> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:x0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:c> /\ <var:J> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 