\begin{document} \begin{theorem} Take a code as follows \begin{verbatim} <var:f> := <nat:3> ; <var:f> := <nat:3> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <var:f> * <var:Z> ; <var:f> := <nat:1> + <var:f> * <var:Z> ; <var:f> := <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <nat:3> + <var:f> * <var:Z> ; <var:f> := <nat:1> + <var:f> * <var:Z> \end{verbatim} Allow it to hold that $ <var:Z> = <var:N> $ ( with some whole numbers $ <var:N> $ ) ahead of evaluating this list of commands it holds that we see $ <var:f> = <nat:3> \times <var:N> ^ <nat:12> + <nat:3> \times <var:N> ^ <nat:11> + <nat:2> \times <var:N> ^ <nat:10> + <nat:2> \times <var:N> ^ <nat:9> + <nat:1> \times <var:N> ^ <nat:7> + <nat:2> \times <var:N> ^ <nat:5> + <nat:2> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:1> $ . \end{theorem} \begin{proof} Arguing the correctness of this series of commands can be accomplished by Hoare reasoning . Stepping through , the assignment code \verb | <var:f> := <nat:3> ; | . This code transfers $ \{ <var:Z> = <var:N> \} $ into the condition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \} $ . This is guaranteed with the assignment scheme given by usual Hoare reasoning . Advancing , we have the environment update line \verb | <var:f> := <nat:3> + <var:f> * <var:Z> ; | . This moves the precondition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \} $ to the condition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> + <nat:3> \} $ . This is known to be sound with the assignment inference rule given in typical Hoare techniques . Jumping to the following line of code contained in the set of instructions , the assignment command \verb | <var:f> := <nat:2> + <var:f> * <var:Z> ; | . This redefines the condition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> + <nat:3> \} $ toward the condition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:2> \} $ . Advancing to the next piece of code contained in the code segment , we have the variable assignmet line \verb | <var:f> := <nat:2> + <var:f> * <var:Z> ; | . This forwards $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:2> \} $ toward the condition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:2> \} $ . This is ensured through the assignment inference rule obtained from typical Hoare techniques . Observing the proceeding bit of code found in our code segment , we have the binding line \verb | <var:f> := <var:f> * <var:Z> ; | . This redefines the condition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:3> + <nat:3> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:2> \} $ into $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:4> + <nat:3> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + \} $ . Advancing to the next step , the environment update line defining $ <nat:1> + <var:f> * <var:Z> $ toward $ <var:f>$ . This transfers $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:4> + <nat:3> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + \} $ to $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:5> + <nat:3> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:1> \} $ . This is rigorously given through the assignment scheme defined by standard Hoare techniques . Keeping momentum , the command letting $ <var:f> * <var:Z> $ toward $ <var:f>$ . This line forwards the condition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:5> + <nat:3> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:1> \} $ as the postcondition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:6> + <nat:3> \times <var:N> ^ <nat:5> + <nat:2> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> + \} $ . Going forward , the variable binding statement yielding $ <nat:2> + <var:f> * <var:Z> $ as $ <var:f>$ . This line moves the precondition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:6> + <nat:3> \times <var:N> ^ <nat:5> + <nat:2> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:1> \times <var:N> + \} $ into the condition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:7> + <nat:3> \times <var:N> ^ <nat:6> + <nat:2> \times <var:N> ^ <nat:5> + <nat:2> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:2> + <nat:2> \} $ . This is deduced with the assignment rule defined by usual Hoare reasoning . Stepping forward , we have the variable binding statement \verb | <var:f> := <nat:2> + <var:f> * <var:Z> ; | . This statement advances $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:7> + <nat:3> \times <var:N> ^ <nat:6> + <nat:2> \times <var:N> ^ <nat:5> + <nat:2> \times <var:N> ^ <nat:4> + <nat:1> \times <var:N> ^ <nat:2> + <nat:2> \} $ to the condition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:8> + <nat:3> \times <var:N> ^ <nat:7> + <nat:2> \times <var:N> ^ <nat:6> + <nat:2> \times <var:N> ^ <nat:5> + <nat:1> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> + <nat:2> \} $ . Advancing on , we have the code assigning $ <nat:2> + <var:f> * <var:Z> $ as $ <var:f>$ . This advances the precondition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:8> + <nat:3> \times <var:N> ^ <nat:7> + <nat:2> \times <var:N> ^ <nat:6> + <nat:2> \times <var:N> ^ <nat:5> + <nat:1> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> + <nat:2> \} $ toward $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:9> + <nat:3> \times <var:N> ^ <nat:8> + <nat:2> \times <var:N> ^ <nat:7> + <nat:2> \times <var:N> ^ <nat:6> + <nat:1> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:2> \} $ . Following , we see the binding command \verb | <var:f> := <nat:2> + <var:f> * <var:Z> ; | . This takes the precondition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:9> + <nat:3> \times <var:N> ^ <nat:8> + <nat:2> \times <var:N> ^ <nat:7> + <nat:2> \times <var:N> ^ <nat:6> + <nat:1> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:2> \} $ into $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:10> + <nat:3> \times <var:N> ^ <nat:9> + <nat:2> \times <var:N> ^ <nat:8> + <nat:2> \times <var:N> ^ <nat:7> + <nat:1> \times <var:N> ^ <nat:5> + <nat:2> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:2> \} $ . Paying attention to the upcoming step found in our set of commands , the command \verb | <var:f> := <nat:3> + <var:f> * <var:Z> ; | . This code redefines the precondition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:10> + <nat:3> \times <var:N> ^ <nat:9> + <nat:2> \times <var:N> ^ <nat:8> + <nat:2> \times <var:N> ^ <nat:7> + <nat:1> \times <var:N> ^ <nat:5> + <nat:2> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:2> \} $ toward the postcondition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:11> + <nat:3> \times <var:N> ^ <nat:10> + <nat:2> \times <var:N> ^ <nat:9> + <nat:2> \times <var:N> ^ <nat:8> + <nat:1> \times <var:N> ^ <nat:6> + <nat:2> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:3> \} $ . This is guaranteed by the assignment scheme from Hoare techniques . Advancing on , we have the variable binding statement \verb | <var:f> := <nat:1> + <var:f> * <var:Z> | . This code forwards the precondition $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:11> + <nat:3> \times <var:N> ^ <nat:10> + <nat:2> \times <var:N> ^ <nat:9> + <nat:2> \times <var:N> ^ <nat:8> + <nat:1> \times <var:N> ^ <nat:6> + <nat:2> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:2> \times <var:N> + <nat:3> \} $ toward $ \{ <var:Z> = <var:N> \land <var:f> = <nat:3> \times <var:N> ^ <nat:12> + <nat:3> \times <var:N> ^ <nat:11> + <nat:2> \times <var:N> ^ <nat:10> + <nat:2> \times <var:N> ^ <nat:9> + <nat:1> \times <var:N> ^ <nat:7> + <nat:2> \times <var:N> ^ <nat:5> + <nat:2> \times <var:N> ^ <nat:4> + <nat:2> \times <var:N> ^ <nat:3> + <nat:2> \times <var:N> ^ <nat:2> + <nat:3> \times <var:N> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:N> : nat , {{ <var:Z> = <var:N> }} <var:f> := <nat:3> ; <var:f> := <nat:3> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <var:f> * <var:Z> ; <var:f> := <nat:1> + <var:f> * <var:Z> ; <var:f> := <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <nat:2> + <var:f> * <var:Z> ; <var:f> := <nat:3> + <var:f> * <var:Z> ; <var:f> := <nat:1> + <var:f> * <var:Z> {{ <var:f> = <nat:3> * <var:N> ^ <nat:12> + <nat:3> * <var:N> ^ <nat:11> + <nat:2> * <var:N> ^ <nat:10> + <nat:2> * <var:N> ^ <nat:9> + <nat:1> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:f> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:f> = <nat:3> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:3> + <nat:3> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:4> + <nat:3> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:5> + <nat:3> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:6> + <nat:3> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:1> * <var:N> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:7> + <nat:3> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:1> * <var:N> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:8> + <nat:3> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:5> + <nat:1> * <var:N> ^ <nat:3> + <nat:2> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:9> + <nat:3> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:6> + <nat:1> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:10> + <nat:3> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:2> * <var:N> ^ <nat:7> + <nat:1> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:11> + <nat:3> * <var:N> ^ <nat:10> + <nat:2> * <var:N> ^ <nat:9> + <nat:2> * <var:N> ^ <nat:8> + <nat:1> * <var:N> ^ <nat:6> + <nat:2> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:2> * <var:N> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Z> = <var:N> /\ <var:f> = <nat:3> * <var:N> ^ <nat:12> + <nat:3> * <var:N> ^ <nat:11> + <nat:2> * <var:N> ^ <nat:10> + <nat:2> * <var:N> ^ <nat:9> + <nat:1> * <var:N> ^ <nat:7> + <nat:2> * <var:N> ^ <nat:5> + <nat:2> * <var:N> ^ <nat:4> + <nat:2> * <var:N> ^ <nat:3> + <nat:2> * <var:N> ^ <nat:2> + <nat:3> * <var:N> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 