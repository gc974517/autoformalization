\begin{document} \begin{theorem} Define the following code in \emph{Imp} as follows \begin{verbatim} <var:N0> := <nat:3> ; <var:N1> := <nat:7> ; <var:N1> := <var:N1> * <var:J> ; <var:N2> := <nat:1> ; <var:N2> := <var:N2> * <var:J> ; <var:N2> := <var:N2> * <var:J> ; <var:T> := <var:N2> ; <var:T> := <var:T> + <var:N1> ; <var:T> := <var:T> + <var:N0> \end{verbatim} Allow it to hold that $ <var:J> = <var:h> $ before executing this set of commands it holds that we see $ <var:T> = <nat:1> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:3> $ when program has terminated . \end{theorem} \begin{proof} The proof of the code can be done using usual Hoare reasoning . Moving on to the proceeding lines contained in the code , we have \begin{eqnarray} \{ <var:J> = <var:h> \} \, <var:N0> := <nat:3> \, \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \} \\ \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \} \, <var:N1> := <nat:7> \, \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \land <var:N1> = <nat:7> \} \\ \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \land <var:N1> = <nat:7> \} \, <var:N1> := <var:N1> * <var:J> \, \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \land <var:N1> = <nat:7> \times <var:h> \} \\ \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \land <var:N1> = <nat:7> \times <var:h> \} \, <var:N2> := <nat:1> \, \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \land <var:N1> = <nat:7> \times <var:h> \land <var:N2> = <nat:1> \} \\ \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \land <var:N1> = <nat:7> \times <var:h> \land <var:N2> = <nat:1> \} \, <var:N2> := <var:N2> * <var:J> \, \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \land <var:N1> = <nat:7> \times <var:h> \land <var:N2> = <nat:1> \times <var:h> \} \end{eqnarray} This is rigorously given through the assignment inference rule defined in Hoare reasoning . Stepping through , we see \begin{eqnarray} \{ <var:J> = <var:h> \} \, <var:N0> := <nat:3> \, \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \} \\ \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \} \, <var:N1> := <nat:7> \, \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \land <var:N1> = <nat:7> \} \\ \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \land <var:N1> = <nat:7> \} \, <var:N1> := <var:N1> * <var:J> \, \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \land <var:N1> = <nat:7> \times <var:h> \} \end{eqnarray} Advancing to the next step , \begin{eqnarray} \{ <var:J> = <var:h> \} \, <var:N0> := <nat:3> \, \{ <var:J> = <var:h> \land <var:N0> = <nat:3> \} \end{eqnarray} This is shown to be logically sound by the variable assignmet scheme found in standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N2> : string := " <var:N2> " . Theorem <genH:poly_code_correct> : forall <var:h> : nat , {{ <var:J> = <var:h> }} <var:N0> := <nat:3> ; <var:N1> := <nat:7> ; <var:N1> := <var:N1> * <var:J> ; <var:N2> := <nat:1> ; <var:N2> := <var:N2> * <var:J> ; <var:N2> := <var:N2> * <var:J> ; <var:T> := <var:N2> ; <var:T> := <var:T> + <var:N1> ; <var:T> := <var:T> + <var:N0> {{ <var:T> = <nat:1> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:N0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:7> * <var:h> /\ <var:N2> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:7> * <var:h> /\ <var:N2> = <nat:1> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:7> * <var:h> /\ <var:N2> = <nat:1> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:N0> = <nat:3> /\ <var:N1> = <nat:7> * <var:h> /\ <var:T> = <nat:1> * <var:h> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:N0> = <nat:3> /\ <var:T> = <nat:1> * <var:h> ^ <nat:2> + <nat:7> * <var:h> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:J> = <var:h> /\ <var:T> = <nat:1> * <var:h> ^ <nat:2> + <nat:7> * <var:h> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 