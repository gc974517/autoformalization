\begin{document} \begin{theorem} Define a code segment as \begin{verbatim} <var:I0> := <nat:9> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:P> ; <var:I4> := <nat:6> ; <var:I4> := <var:I4> * <var:P> ; <var:I4> := <var:I4> * <var:P> ; <var:I4> := <var:I4> * <var:P> ; <var:I4> := <var:I4> * <var:P> ; <var:v> := <var:I4> ; <var:v> := <var:v> + <var:I1> ; <var:v> := <var:v> + <var:I0> \end{verbatim} Assume it to hold that $ <var:P> = <var:G> $ before running our code then we see $ <var:v> = <nat:6> * <var:G> ^ <nat:4> + <nat:4> * <var:G> + <nat:9> $ when set of commands exits . \end{theorem} \begin{proof} Notice this decorated list of commands . \begin{eqnarray} \{ <var:P> = <var:G> \} \\ <var:I0> := <nat:9> ; \\ \{ <var:P> = <var:G> \land <var:I0> = <nat:9> \} \\ <var:I1> := <nat:4> ; \\ \{ <var:P> = <var:G> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> \} \\ <var:I1> := <var:I1> * <var:P> ; \\ \{ <var:P> = <var:G> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> * <var:G> \} \\ <var:I4> := <nat:6> ; \\ \{ <var:P> = <var:G> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> * <var:G> \land <var:I4> = <nat:6> \} \\ <var:I4> := <var:I4> * <var:P> ; \\ \{ <var:P> = <var:G> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> * <var:G> \land <var:I4> = <nat:6> * <var:G> \} \\ <var:I4> := <var:I4> * <var:P> ; \\ \{ <var:P> = <var:G> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> * <var:G> \land <var:I4> = <nat:6> * <var:G> ^ <nat:2> \} \\ <var:I4> := <var:I4> * <var:P> ; \\ \{ <var:P> = <var:G> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> * <var:G> \land <var:I4> = <nat:6> * <var:G> ^ <nat:3> \} \\ <var:I4> := <var:I4> * <var:P> ; \\ \{ <var:P> = <var:G> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> * <var:G> \land <var:I4> = <nat:6> * <var:G> ^ <nat:4> \} \\ <var:v> := <var:I4> ; \\ \{ <var:P> = <var:G> \land <var:I0> = <nat:9> \land <var:I1> = <nat:4> * <var:G> \land <var:v> = <nat:6> * <var:G> ^ <nat:4> \} \\ <var:v> := <var:v> + <var:I1> ; \\ \{ <var:P> = <var:G> \land <var:I0> = <nat:9> \land <var:v> = <nat:6> * <var:G> ^ <nat:4> + <nat:4> * <var:G> \} \\ <var:v> := <var:v> + <var:I0> \\ \{ <var:P> = <var:G> \land <var:v> = <nat:6> * <var:G> ^ <nat:4> + <nat:4> * <var:G> + <nat:9> \} \end{eqnarray} Utilizing Hoare logic finishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I4> : string := " <var:I4> " . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:P> = <var:G> }} <var:I0> := <nat:9> ; <var:I1> := <nat:4> ; <var:I1> := <var:I1> * <var:P> ; <var:I4> := <nat:6> ; <var:I4> := <var:I4> * <var:P> ; <var:I4> := <var:I4> * <var:P> ; <var:I4> := <var:I4> * <var:P> ; <var:I4> := <var:I4> * <var:P> ; <var:v> := <var:I4> ; <var:v> := <var:v> + <var:I1> ; <var:v> := <var:v> + <var:I0> {{ <var:v> = <nat:6> * <var:G> ^ <nat:4> + <nat:4> * <var:G> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:G> /\ <var:I0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:G> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:G> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:G> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> * <var:G> /\ <var:I4> = <nat:6> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:G> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> * <var:G> /\ <var:I4> = <nat:6> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:G> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> * <var:G> /\ <var:I4> = <nat:6> * <var:G> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:G> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> * <var:G> /\ <var:I4> = <nat:6> * <var:G> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:G> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> * <var:G> /\ <var:I4> = <nat:6> * <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:G> /\ <var:I0> = <nat:9> /\ <var:I1> = <nat:4> * <var:G> /\ <var:v> = <nat:6> * <var:G> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:G> /\ <var:I0> = <nat:9> /\ <var:v> = <nat:6> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:G> /\ <var:v> = <nat:6> * <var:G> ^ <nat:4> + <nat:4> * <var:G> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 