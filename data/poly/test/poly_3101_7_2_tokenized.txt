\begin{document} \begin{definition} Define a program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:H> := <nat:3> ; <var:H> := <nat:2> + <var:H> * <var:L> ; <var:H> := <nat:4> + <var:H> * <var:L> ; <var:H> := <var:H> * <var:L> ; <var:H> := <nat:2> + <var:H> * <var:L> ; <var:H> := <nat:4> + <var:H> * <var:L> ; <var:H> := <nat:1> + <var:H> * <var:L> \end{verbatim} \end{definition} \begin{theorem} Define a set of instructions <def:poly> . Given that $ <var:L> = <var:X> $ for some positive coefficients $ <var:X> $ ahead of the execution of this code then we have $ <var:H> = <nat:3> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:1> $ after code segment has finished executing . \end{theorem} \begin{proof} Applying standard Hoare techniques produces : \begin{eqnarray} \{ <var:L> = <var:X> \} \\ <var:H> := <nat:3> ; \\ \{ <var:L> = <var:X> \land <var:H> = <nat:3> \} \\ <var:H> := <nat:2> + <var:H> * <var:L> ; \\ \{ <var:L> = <var:X> \land <var:H> = <nat:3> * <var:X> + <nat:2> \} \\ <var:H> := <nat:4> + <var:H> * <var:L> ; \\ \{ <var:L> = <var:X> \land <var:H> = <nat:3> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> \} \\ <var:H> := <var:H> * <var:L> ; \\ \{ <var:L> = <var:X> \land <var:H> = <nat:3> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + \} \\ <var:H> := <nat:2> + <var:H> * <var:L> ; \\ \{ <var:L> = <var:X> \land <var:H> = <nat:3> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> \} \\ <var:H> := <nat:4> + <var:H> * <var:L> ; \\ \{ <var:L> = <var:X> \land <var:H> = <nat:3> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:2> * <var:X> + <nat:4> \} \\ <var:H> := <nat:1> + <var:H> * <var:L> \\ \{ <var:L> = <var:X> \land <var:H> = <nat:3> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:1> \} \end{eqnarray} Considering the preceding argument , our set of commands has been proven correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:H> := <nat:3> ; <var:H> := <nat:2> + <var:H> * <var:L> ; <var:H> := <nat:4> + <var:H> * <var:L> ; <var:H> := <var:H> * <var:L> ; <var:H> := <nat:2> + <var:H> * <var:L> ; <var:H> := <nat:4> + <var:H> * <var:L> ; <var:H> := <nat:1> + <var:H> * <var:L> . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:L> = <var:X> }} <def:poly> {{ <var:H> = <nat:3> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:H> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:H> = <nat:3> * <var:X> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:H> = <nat:3> * <var:X> ^ <nat:2> + <nat:2> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:H> = <nat:3> * <var:X> ^ <nat:3> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:H> = <nat:3> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:3> + <nat:4> * <var:X> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:H> = <nat:3> * <var:X> ^ <nat:5> + <nat:2> * <var:X> ^ <nat:4> + <nat:4> * <var:X> ^ <nat:3> + <nat:2> * <var:X> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:X> /\ <var:H> = <nat:3> * <var:X> ^ <nat:6> + <nat:2> * <var:X> ^ <nat:5> + <nat:4> * <var:X> ^ <nat:4> + <nat:2> * <var:X> ^ <nat:2> + <nat:4> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 