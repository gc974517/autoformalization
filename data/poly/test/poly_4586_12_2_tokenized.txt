\begin{document} \begin{theorem} Take a segment of code in \emph{Imp} : \begin{verbatim} <var:U> := <nat:2> ; <var:U> := <nat:1> + <var:U> * <var:i> ; <var:U> := <nat:3> + <var:U> * <var:i> ; <var:U> := <nat:2> + <var:U> * <var:i> ; <var:U> := <nat:2> + <var:U> * <var:i> ; <var:U> := <nat:4> + <var:U> * <var:i> ; <var:U> := <nat:4> + <var:U> * <var:i> ; <var:U> := <nat:2> + <var:U> * <var:i> ; <var:U> := <nat:4> + <var:U> * <var:i> ; <var:U> := <nat:2> + <var:U> * <var:i> ; <var:U> := <nat:2> + <var:U> * <var:i> ; <var:U> := <nat:4> + <var:U> * <var:i> \end{verbatim} Assuming --- given any $ <var:s> \in \mathbb{N} $ --- that we have $ <var:i> = <var:s> $ prior to the evaluation of our program it follows that $ <var:U> = <nat:2> * <var:s> ^ <nat:11> + <nat:1> * <var:s> ^ <nat:10> + <nat:3> * <var:s> ^ <nat:9> + <nat:2> * <var:s> ^ <nat:8> + <nat:2> * <var:s> ^ <nat:7> + <nat:4> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this list of commands is done using typical Hoare reasoning . Moving forward to the next bits of codefound in our series of commands , we see \begin{eqnarray} \{ <var:i> = <var:s> \} \, <var:U> := <nat:2> \, \{ <var:i> = <var:s> \land <var:U> = <nat:2> \} \\ \{ <var:i> = <var:s> \land <var:U> = <nat:2> \} \, <var:U> := <nat:1> + <var:U> * <var:i> \, \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> + <nat:1> \} \\ \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> + <nat:1> \} \, <var:U> := <nat:3> + <var:U> * <var:i> \, \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + <nat:3> \} \\ \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + <nat:3> \} \, <var:U> := <nat:2> + <var:U> * <var:i> \, \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:2> \} \\ \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:2> \} \, <var:U> := <nat:2> + <var:U> * <var:i> \, \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:4> + <nat:1> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:2> \} \\ \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:4> + <nat:1> \times <var:s> ^ <nat:3> + <nat:3> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:2> \} \, <var:U> := <nat:4> + <var:U> * <var:i> \, \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:5> + <nat:1> \times <var:s> ^ <nat:4> + <nat:3> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:4> \} \\ \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:5> + <nat:1> \times <var:s> ^ <nat:4> + <nat:3> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + <nat:4> \} \, <var:U> := <nat:4> + <var:U> * <var:i> \, \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:6> + <nat:1> \times <var:s> ^ <nat:5> + <nat:3> \times <var:s> ^ <nat:4> + <nat:2> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> + <nat:4> \} \\ \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:6> + <nat:1> \times <var:s> ^ <nat:5> + <nat:3> \times <var:s> ^ <nat:4> + <nat:2> \times <var:s> ^ <nat:3> + <nat:2> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> + <nat:4> \} \, <var:U> := <nat:2> + <var:U> * <var:i> \, \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:7> + <nat:1> \times <var:s> ^ <nat:6> + <nat:3> \times <var:s> ^ <nat:5> + <nat:2> \times <var:s> ^ <nat:4> + <nat:2> \times <var:s> ^ <nat:3> + <nat:4> \times <var:s> ^ <nat:2> + <nat:4> \times <var:s> + <nat:2> \} \end{eqnarray} This is shown to be logically sound through the assignment inference rule obtained from typical Hoare techniques . After , \begin{eqnarray} \{ <var:i> = <var:s> \} \, <var:U> := <nat:2> \, \{ <var:i> = <var:s> \land <var:U> = <nat:2> \} \\ \{ <var:i> = <var:s> \land <var:U> = <nat:2> \} \, <var:U> := <nat:1> + <var:U> * <var:i> \, \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> + <nat:1> \} \\ \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> + <nat:1> \} \, <var:U> := <nat:3> + <var:U> * <var:i> \, \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + <nat:3> \} \\ \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:2> + <nat:1> \times <var:s> + <nat:3> \} \, <var:U> := <nat:2> + <var:U> * <var:i> \, \{ <var:i> = <var:s> \land <var:U> = <nat:2> \times <var:s> ^ <nat:3> + <nat:1> \times <var:s> ^ <nat:2> + <nat:3> \times <var:s> + <nat:2> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:i> = <var:s> }} <var:U> := <nat:2> ; <var:U> := <nat:1> + <var:U> * <var:i> ; <var:U> := <nat:3> + <var:U> * <var:i> ; <var:U> := <nat:2> + <var:U> * <var:i> ; <var:U> := <nat:2> + <var:U> * <var:i> ; <var:U> := <nat:4> + <var:U> * <var:i> ; <var:U> := <nat:4> + <var:U> * <var:i> ; <var:U> := <nat:2> + <var:U> * <var:i> ; <var:U> := <nat:4> + <var:U> * <var:i> ; <var:U> := <nat:2> + <var:U> * <var:i> ; <var:U> := <nat:2> + <var:U> * <var:i> ; <var:U> := <nat:4> + <var:U> * <var:i> {{ <var:U> = <nat:2> * <var:s> ^ <nat:11> + <nat:1> * <var:s> ^ <nat:10> + <nat:3> * <var:s> ^ <nat:9> + <nat:2> * <var:s> ^ <nat:8> + <nat:2> * <var:s> ^ <nat:7> + <nat:4> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:U> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:U> = <nat:2> * <var:s> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:U> = <nat:2> * <var:s> ^ <nat:2> + <nat:1> * <var:s> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:U> = <nat:2> * <var:s> ^ <nat:3> + <nat:1> * <var:s> ^ <nat:2> + <nat:3> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:U> = <nat:2> * <var:s> ^ <nat:4> + <nat:1> * <var:s> ^ <nat:3> + <nat:3> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:U> = <nat:2> * <var:s> ^ <nat:5> + <nat:1> * <var:s> ^ <nat:4> + <nat:3> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:U> = <nat:2> * <var:s> ^ <nat:6> + <nat:1> * <var:s> ^ <nat:5> + <nat:3> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:U> = <nat:2> * <var:s> ^ <nat:7> + <nat:1> * <var:s> ^ <nat:6> + <nat:3> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:U> = <nat:2> * <var:s> ^ <nat:8> + <nat:1> * <var:s> ^ <nat:7> + <nat:3> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:U> = <nat:2> * <var:s> ^ <nat:9> + <nat:1> * <var:s> ^ <nat:8> + <nat:3> * <var:s> ^ <nat:7> + <nat:2> * <var:s> ^ <nat:6> + <nat:2> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:4> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:U> = <nat:2> * <var:s> ^ <nat:10> + <nat:1> * <var:s> ^ <nat:9> + <nat:3> * <var:s> ^ <nat:8> + <nat:2> * <var:s> ^ <nat:7> + <nat:2> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:4> * <var:s> ^ <nat:4> + <nat:2> * <var:s> ^ <nat:3> + <nat:4> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:s> /\ <var:U> = <nat:2> * <var:s> ^ <nat:11> + <nat:1> * <var:s> ^ <nat:10> + <nat:3> * <var:s> ^ <nat:9> + <nat:2> * <var:s> ^ <nat:8> + <nat:2> * <var:s> ^ <nat:7> + <nat:4> * <var:s> ^ <nat:6> + <nat:4> * <var:s> ^ <nat:5> + <nat:2> * <var:s> ^ <nat:4> + <nat:4> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 