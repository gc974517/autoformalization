\begin{document} \begin{theorem} We define the following set of instructions as follows \begin{verbatim} <var:o1> := <var:i> ; <var:o2> := <var:o1> * <var:i> ; <var:o3> := <var:o2> * <var:i> ; <var:o4> := <var:o3> * <var:i> ; <var:o0> := <nat:3> ; <var:o1> := <var:o1> * <nat:2> ; <var:o2> := <var:o2> * <nat:4> ; <var:o4> := <var:o4> * <nat:4> ; <var:O> := <var:o4> <var:O> := <var:O> + <var:o2> <var:O> := <var:O> + <var:o1> <var:O> := <var:O> + <var:o0> \end{verbatim} Assuming ( given all integers $ <var:x> $ ) that $ <var:i> = <var:x> $ before running the code segment then we have $ <var:O> = <nat:4> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> + <nat:3> $ when program executes . \end{theorem} \begin{proof} Proving correctness for the program can be demonstrated through standard Hoare techniques . Jumping to the upcoming line of code contained in the code segment , we see the variable assignmet line defining $ <var:i> $ to $ <var:o1>$ . This forwards $ \{ <var:i> = <var:x> \} $ as $ \{ <var:i> = <var:x> \land <var:o1> = <var:x> \} $ . Advancing , the environment update command \verb | <var:o2> := <var:o1> * <var:i> ; | . This command redefines $ \{ <var:i> = <var:x> \land <var:o1> = <var:x> \} $ to the condition $ \{ <var:i> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \} $ . Paying attention to the upcoming line of code contained in the series of instructions , we have the variable update line yielding $ <var:o2> * <var:i> $ as $ <var:o3>$ . This transfers the condition $ \{ <var:i> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \} $ as the postcondition $ \{ <var:i> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \} $ . Considering the subsequent command seen in our code , the assignment command \verb | <var:o4> := <var:o3> * <var:i> ; | . This statement redefines $ \{ <var:i> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \} $ to the condition $ \{ <var:i> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o4> = <var:x> ^ <nat:4> \} $ . Taking a look at the next line of code in our list of commands , we have the variable assignmet code \verb | <var:o0> := <nat:3> ; | . This redefines the condition $ \{ <var:i> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o4> = <var:x> ^ <nat:4> \} $ toward the postcondition $ \{ <var:i> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o4> = <var:x> ^ <nat:4> \land <var:o0> = <nat:3> \} $ . This is rigorously given by the assignment scheme given in typical Hoare techniques . Next , we have the assignment command assigning $ <var:o1> * <nat:2> $ into $ <var:o1>$ . This statement forwards $ \{ <var:i> = <var:x> \land <var:o1> = <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o4> = <var:x> ^ <nat:4> \land <var:o0> = <nat:3> \} $ as $ \{ <var:i> = <var:x> \land <var:o1> = <nat:2> \times <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o4> = <var:x> ^ <nat:4> \land <var:o0> = <nat:3> \} $ . Further , we see the line \verb | <var:o2> := <var:o2> * <nat:4> ; | . This redefines the precondition $ \{ <var:i> = <var:x> \land <var:o1> = <nat:2> \times <var:x> \land <var:o2> = <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o4> = <var:x> ^ <nat:4> \land <var:o0> = <nat:3> \} $ into $ \{ <var:i> = <var:x> \land <var:o1> = <nat:2> \times <var:x> \land <var:o2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o4> = <var:x> ^ <nat:4> \land <var:o0> = <nat:3> \} $ . This is shown to be logically sound using the assignment scheme defined by Hoare logic . Looking at the subsequent line in our segment of code , we see the variable assignmet line \verb | <var:o4> := <var:o4> * <nat:4> ; | . This line advances the condition $ \{ <var:i> = <var:x> \land <var:o1> = <nat:2> \times <var:x> \land <var:o2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o4> = <var:x> ^ <nat:4> \land <var:o0> = <nat:3> \} $ to $ \{ <var:i> = <var:x> \land <var:o1> = <nat:2> \times <var:x> \land <var:o2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o4> = <nat:4> \times <var:x> ^ <nat:4> \land <var:o0> = <nat:3> \} $ . This is deduced using the assignment inference rule in Hoare techniques . Going to the next step , we have the variable assignmet code \verb | <var:O> := <var:o4> | . This forwards the precondition $ \{ <var:i> = <var:x> \land <var:o1> = <nat:2> \times <var:x> \land <var:o2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o4> = <nat:4> \times <var:x> ^ <nat:4> \land <var:o0> = <nat:3> \} $ into $ \{ <var:i> = <var:x> \land <var:o1> = <nat:2> \times <var:x> \land <var:o2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o0> = <nat:3> \land <var:O> = <nat:4> \times <var:x> ^ <nat:4> \} $ . Moving on to the following piece of code found in our list of instructions , we have the binding line defining $ <var:O> + <var:o2$ toward $ <var:O>$ . This advances the condition $ \{ <var:i> = <var:x> \land <var:o1> = <nat:2> \times <var:x> \land <var:o2> = <nat:4> \times <var:x> ^ <nat:2> \land <var:o3> = <var:x> ^ <nat:3> \land <var:o0> = <nat:3> \land <var:O> = <nat:4> \times <var:x> ^ <nat:4> \} $ toward the condition $ \{ <var:i> = <var:x> \land <var:o1> = <nat:2> \times <var:x> \land <var:o0> = <nat:3> \land <var:O> = <nat:4> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:2> \} $ . Honing in on the next statement contained in the set of commands , we have the code letting $ <var:O> + <var:o1$ to $ <var:O>$ . This statement forwards $ \{ <var:i> = <var:x> \land <var:o1> = <nat:2> \times <var:x> \land <var:o0> = <nat:3> \land <var:O> = <nat:4> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:2> \} $ as the condition $ \{ <var:i> = <var:x> \land <var:o0> = <nat:3> \land <var:O> = <nat:4> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> \} $ . Advancing to the next step seen in the set of instructions , we have the binding code letting $ <var:O> + <var:o0$ into $ <var:O>$ . This command transfers $ \{ <var:i> = <var:x> \land <var:o0> = <nat:3> \land <var:O> = <nat:4> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> \} $ to the postcondition $ \{ <var:i> = <var:x> \land <var:O> = <nat:4> \times <var:x> ^ <nat:4> + <nat:4> \times <var:x> ^ <nat:2> + <nat:2> \times <var:x> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <var:o3> : string := " <var:o3> " . Definition <var:o4> : string := " <var:o4> " . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:i> = <var:x> }} <var:o1> := <var:i> ; <var:o2> := <var:o1> * <var:i> ; <var:o3> := <var:o2> * <var:i> ; <var:o4> := <var:o3> * <var:i> ; <var:o0> := <nat:3> ; <var:o1> := <var:o1> * <nat:2> ; <var:o2> := <var:o2> * <nat:4> ; <var:o4> := <var:o4> * <nat:4> ; <var:O> := <var:o4> <var:O> := <var:O> + <var:o2> <var:O> := <var:O> + <var:o1> <var:O> := <var:O> + <var:o0> {{ <var:O> = <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:i> = <var:x> /\ <var:o1> = <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:x> /\ <var:o1> = <var:x> /\ <var:o2> = <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:x> /\ <var:o1> = <var:x> /\ <var:o2> = <var:x> ^ <nat:2> /\ <var:o3> = <var:x> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:x> /\ <var:o1> = <var:x> /\ <var:o2> = <var:x> ^ <nat:2> /\ <var:o3> = <var:x> ^ <nat:3> /\ <var:o4> = <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:x> /\ <var:o1> = <var:x> /\ <var:o2> = <var:x> ^ <nat:2> /\ <var:o3> = <var:x> ^ <nat:3> /\ <var:o4> = <var:x> ^ <nat:4> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:x> /\ <var:o1> = <nat:2> * <var:x> /\ <var:o2> = <var:x> ^ <nat:2> /\ <var:o3> = <var:x> ^ <nat:3> /\ <var:o4> = <var:x> ^ <nat:4> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:x> /\ <var:o1> = <nat:2> * <var:x> /\ <var:o2> = <nat:4> * <var:x> ^ <nat:2> /\ <var:o3> = <var:x> ^ <nat:3> /\ <var:o4> = <var:x> ^ <nat:4> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:x> /\ <var:o1> = <nat:2> * <var:x> /\ <var:o2> = <nat:4> * <var:x> ^ <nat:2> /\ <var:o3> = <var:x> ^ <nat:3> /\ <var:o4> = <nat:4> * <var:x> ^ <nat:4> /\ <var:o0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:x> /\ <var:o1> = <nat:2> * <var:x> /\ <var:o2> = <nat:4> * <var:x> ^ <nat:2> /\ <var:o3> = <var:x> ^ <nat:3> /\ <var:o0> = <nat:3> /\ <var:O> = <nat:4> * <var:x> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:x> /\ <var:o1> = <nat:2> * <var:x> /\ <var:o0> = <nat:3> /\ <var:O> = <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:x> /\ <var:o0> = <nat:3> /\ <var:O> = <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:i> = <var:x> /\ <var:O> = <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 