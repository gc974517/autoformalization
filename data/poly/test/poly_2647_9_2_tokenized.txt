\begin{document} \begin{theorem} Take the following list of instructions as \begin{verbatim} <var:w> := <nat:1> ; <var:w> := <var:w> * <var:q> ; <var:w> := <var:w> * <var:q> ; <var:w> := <nat:1> + <var:w> * <var:q> ; <var:w> := <var:w> * <var:q> ; <var:w> := <nat:2> + <var:w> * <var:q> ; <var:w> := <nat:3> + <var:w> * <var:q> ; <var:w> := <nat:1> + <var:w> * <var:q> ; <var:w> := <nat:1> + <var:w> * <var:q> \end{verbatim} Given $ <var:q> = <var:B> $ ahead of running this program it holds that we see $ <var:w> = <nat:1> \times <var:B> ^ <nat:8> + <nat:1> \times <var:B> ^ <nat:5> + <nat:2> \times <var:B> ^ <nat:3> + <nat:3> \times <var:B> ^ <nat:2> + <nat:1> \times <var:B> + <nat:1> $ when list of instructions has finished executing . \end{theorem} \begin{proof} The way to prove correctness for the program is shown with usual Hoare reasoning . Looking at the next lines of codecontained in our list of commands , we see \verb | { <var:q> = <var:B> } <var:w> := <nat:1> { <var:q> = <var:B> \land <var:w> = <nat:1> } | , \verb | { <var:q> = <var:B> \land <var:w> = <nat:1> } <var:w> := <var:w> * <var:q> { <var:q> = <var:B> \land <var:w> = <nat:1> * <var:B> + } | , \verb | { <var:q> = <var:B> \land <var:w> = <nat:1> * <var:B> + } <var:w> := <var:w> * <var:q> { <var:q> = <var:B> \land <var:w> = <nat:1> * <var:B> ^ <nat:2> + } | , \verb | { <var:q> = <var:B> \land <var:w> = <nat:1> * <var:B> ^ <nat:2> + } <var:w> := <nat:1> + <var:w> * <var:q> { <var:q> = <var:B> \land <var:w> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> } | and \verb | { <var:q> = <var:B> \land <var:w> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> } <var:w> := <var:w> * <var:q> { <var:q> = <var:B> \land <var:w> = <nat:1> * <var:B> ^ <nat:4> + <nat:1> * <var:B> + } | . Advancing on , \verb | { <var:q> = <var:B> } <var:w> := <nat:1> { <var:q> = <var:B> \land <var:w> = <nat:1> } | , \verb | { <var:q> = <var:B> \land <var:w> = <nat:1> } <var:w> := <var:w> * <var:q> { <var:q> = <var:B> \land <var:w> = <nat:1> * <var:B> + } | and \verb | { <var:q> = <var:B> \land <var:w> = <nat:1> * <var:B> + } <var:w> := <var:w> * <var:q> { <var:q> = <var:B> \land <var:w> = <nat:1> * <var:B> ^ <nat:2> + } | . Jumping to the subsequent step contained in our list of commands , \verb | { <var:q> = <var:B> } <var:w> := <nat:1> { <var:q> = <var:B> \land <var:w> = <nat:1> } | . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:q> = <var:B> }} <var:w> := <nat:1> ; <var:w> := <var:w> * <var:q> ; <var:w> := <var:w> * <var:q> ; <var:w> := <nat:1> + <var:w> * <var:q> ; <var:w> := <var:w> * <var:q> ; <var:w> := <nat:2> + <var:w> * <var:q> ; <var:w> := <nat:3> + <var:w> * <var:q> ; <var:w> := <nat:1> + <var:w> * <var:q> ; <var:w> := <nat:1> + <var:w> * <var:q> {{ <var:w> = <nat:1> * <var:B> ^ <nat:8> + <nat:1> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:w> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:w> = <nat:1> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:w> = <nat:1> * <var:B> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:w> = <nat:1> * <var:B> ^ <nat:3> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:w> = <nat:1> * <var:B> ^ <nat:4> + <nat:1> * <var:B> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:w> = <nat:1> * <var:B> ^ <nat:5> + <nat:1> * <var:B> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:w> = <nat:1> * <var:B> ^ <nat:6> + <nat:1> * <var:B> ^ <nat:3> + <nat:2> * <var:B> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:w> = <nat:1> * <var:B> ^ <nat:7> + <nat:1> * <var:B> ^ <nat:4> + <nat:2> * <var:B> ^ <nat:2> + <nat:3> * <var:B> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:B> /\ <var:w> = <nat:1> * <var:B> ^ <nat:8> + <nat:1> * <var:B> ^ <nat:5> + <nat:2> * <var:B> ^ <nat:3> + <nat:3> * <var:B> ^ <nat:2> + <nat:1> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 