\begin{document} \begin{definition} Take the following set of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:q> := <nat:3> ; <var:q> := <nat:2> + <var:q> * <var:t> ; <var:q> := <nat:4> + <var:q> * <var:t> ; <var:q> := <nat:1> + <var:q> * <var:t> ; <var:q> := <nat:2> + <var:q> * <var:t> ; <var:q> := <nat:1> + <var:q> * <var:t> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:t> = <var:G> $ ahead of executing this series of commands , it holds that we see $ <var:q> = <nat:3> \cdot <var:G> ^ <nat:5> + <nat:2> \cdot <var:G> ^ <nat:4> + <nat:4> \cdot <var:G> ^ <nat:3> + <nat:1> \cdot <var:G> ^ <nat:2> + <nat:2> \cdot <var:G> + <nat:1> $ when set of commands has exited . \end{theorem} \begin{proof} The way to prove correctness for our code segment is shown using typical Hoare techniques . Now , we have the environment update statement \verb | <var:q> := <nat:3> ; | . This command advances $ \{ <var:t> = <var:G> \} $ toward the postcondition $ \{ <var:t> = <var:G> \land <var:q> = <nat:3> \} $ . This is guaranteed with the assignment inference rule given in typical Hoare logic . Moving on to the upcoming line in our segment of code , we have the binding statement yielding $ <nat:2> + <var:q> * <var:t> $ as $ <var:q>$ . This forwards the condition $ \{ <var:t> = <var:G> \land <var:q> = <nat:3> \} $ into the postcondition $ \{ <var:t> = <var:G> \land <var:q> = <nat:3> \times <var:G> + <nat:2> \} $ . After , we see the variable update command giving $ <nat:4> + <var:q> * <var:t> $ into $ <var:q>$ . This code takes the condition $ \{ <var:t> = <var:G> \land <var:q> = <nat:3> \times <var:G> + <nat:2> \} $ to the postcondition $ \{ <var:t> = <var:G> \land <var:q> = <nat:3> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:4> \} $ . Observing the upcoming command contained in our series of instructions , we have the command \verb | <var:q> := <nat:1> + <var:q> * <var:t> ; | . This takes $ \{ <var:t> = <var:G> \land <var:q> = <nat:3> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:4> \} $ to the condition $ \{ <var:t> = <var:G> \land <var:q> = <nat:3> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> ^ <nat:2> + <nat:4> \times <var:G> + <nat:1> \} $ . This is shown by the assignment scheme of standard Hoare reasoning . Keeping momentum , we have the binding command binding $ <nat:2> + <var:q> * <var:t> $ as $ <var:q>$ . This moves the precondition $ \{ <var:t> = <var:G> \land <var:q> = <nat:3> \times <var:G> ^ <nat:3> + <nat:2> \times <var:G> ^ <nat:2> + <nat:4> \times <var:G> + <nat:1> \} $ to $ \{ <var:t> = <var:G> \land <var:q> = <nat:3> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> + <nat:4> \times <var:G> ^ <nat:2> + <nat:1> \times <var:G> + <nat:2> \} $ . Stepping forward , the environment update statement assigning $ <nat:1> + <var:q> * <var:t$ into $ <var:q>$ . This transfers the condition $ \{ <var:t> = <var:G> \land <var:q> = <nat:3> \times <var:G> ^ <nat:4> + <nat:2> \times <var:G> ^ <nat:3> + <nat:4> \times <var:G> ^ <nat:2> + <nat:1> \times <var:G> + <nat:2> \} $ to the postcondition $ \{ <var:t> = <var:G> \land <var:q> = <nat:3> \times <var:G> ^ <nat:5> + <nat:2> \times <var:G> ^ <nat:4> + <nat:4> \times <var:G> ^ <nat:3> + <nat:1> \times <var:G> ^ <nat:2> + <nat:2> \times <var:G> + <nat:1> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:q> := <nat:3> ; <var:q> := <nat:2> + <var:q> * <var:t> ; <var:q> := <nat:4> + <var:q> * <var:t> ; <var:q> := <nat:1> + <var:q> * <var:t> ; <var:q> := <nat:2> + <var:q> * <var:t> ; <var:q> := <nat:1> + <var:q> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:G> : nat , {{ <var:t> = <var:G> }} <def:poly> {{ <var:q> = <nat:3> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:q> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:q> = <nat:3> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:q> = <nat:3> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:q> = <nat:3> * <var:G> ^ <nat:3> + <nat:2> * <var:G> ^ <nat:2> + <nat:4> * <var:G> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:q> = <nat:3> * <var:G> ^ <nat:4> + <nat:2> * <var:G> ^ <nat:3> + <nat:4> * <var:G> ^ <nat:2> + <nat:1> * <var:G> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:G> /\ <var:q> = <nat:3> * <var:G> ^ <nat:5> + <nat:2> * <var:G> ^ <nat:4> + <nat:4> * <var:G> ^ <nat:3> + <nat:1> * <var:G> ^ <nat:2> + <nat:2> * <var:G> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 