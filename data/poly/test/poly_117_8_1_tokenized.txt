\begin{document} \begin{theorem} Consider the following list of instructions as follows \begin{verbatim} <var:n1> := <var:E> ; <var:n2> := <var:n1> * <var:E> ; <var:n0> := <nat:1> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:1> ; <var:l> := <var:n2> <var:l> := <var:l> + <var:n1> <var:l> := <var:l> + <var:n0> \end{verbatim} Assuming that we have $ <var:E> = <var:d> $ prior to running this list of instructions then we have $ <var:l> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + <nat:1> $ when list of commands has finished . \end{theorem} \begin{proof} We can see that the following decorated list of commands . \begin{eqnarray} \{ <var:E> = <var:d> \} \\ <var:n1> := <var:E> ; \\ \{ <var:E> = <var:d> \land <var:n1> = <var:d> \} \end{eqnarray} Advancing executing the code results in : \begin{eqnarray} <var:n2> := <var:n1> * <var:E> ; \\ \{ <var:E> = <var:d> \land <var:n1> = <var:d> \land <var:n2> = <var:d> ^ <nat:2> \} \\ <var:n0> := <nat:1> ; \\ \{ <var:E> = <var:d> \land <var:n1> = <var:d> \land <var:n2> = <var:d> ^ <nat:2> \land <var:n0> = <nat:1> \} \end{eqnarray} Continuing executing the series of instructions gives : \begin{eqnarray} <var:n1> := <var:n1> * <nat:3> ; \\ \{ <var:E> = <var:d> \land <var:n1> = <nat:3> \cdot <var:d> \land <var:n2> = <var:d> ^ <nat:2> \land <var:n0> = <nat:1> \} \end{eqnarray} Allowing the execution of our program produces : \begin{eqnarray} <var:n2> := <var:n2> * <nat:1> ; \\ \{ <var:E> = <var:d> \land <var:n1> = <nat:3> \cdot <var:d> \land <var:n2> = <nat:1> \cdot <var:d> ^ <nat:2> \land <var:n0> = <nat:1> \} \end{eqnarray} Allowing the execution of this segment of code gives us : \begin{eqnarray} <var:l> := <var:n2> \\ \{ <var:E> = <var:d> \land <var:n1> = <nat:3> \cdot <var:d> \land <var:n0> = <nat:1> \land <var:l> = <nat:1> \cdot <var:d> ^ <nat:2> \} \\ <var:l> := <var:l> + <var:n1> \\ \{ <var:E> = <var:d> \land <var:n0> = <nat:1> \land <var:l> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> \} \\ <var:l> := <var:l> + <var:n0> \\ \{ <var:E> = <var:d> \land <var:l> = <nat:1> \cdot <var:d> ^ <nat:2> + <nat:3> \cdot <var:d> + <nat:1> \} \end{eqnarray} The application of standard Hoare techniques completes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:n0> : string := " <var:n0> " . Definition <var:n1> : string := " <var:n1> " . Definition <var:n2> : string := " <var:n2> " . Theorem <genH:poly_code_correct> : forall <var:d> : nat , {{ <var:E> = <var:d> }} <var:n1> := <var:E> ; <var:n2> := <var:n1> * <var:E> ; <var:n0> := <nat:1> ; <var:n1> := <var:n1> * <nat:3> ; <var:n2> := <var:n2> * <nat:1> ; <var:l> := <var:n2> <var:l> := <var:l> + <var:n1> <var:l> := <var:l> + <var:n0> {{ <var:l> = <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:n1> = <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:n1> = <var:d> /\ <var:n2> = <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:n1> = <var:d> /\ <var:n2> = <var:d> ^ <nat:2> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:n1> = <nat:3> * <var:d> /\ <var:n2> = <var:d> ^ <nat:2> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:n1> = <nat:3> * <var:d> /\ <var:n2> = <nat:1> * <var:d> ^ <nat:2> /\ <var:n0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:n1> = <nat:3> * <var:d> /\ <var:n0> = <nat:1> /\ <var:l> = <nat:1> * <var:d> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:n0> = <nat:1> /\ <var:l> = <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:E> = <var:d> /\ <var:l> = <nat:1> * <var:d> ^ <nat:2> + <nat:3> * <var:d> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 