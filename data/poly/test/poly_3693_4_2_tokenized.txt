\begin{document} \begin{theorem} Let the following set of commands as follows \begin{verbatim} <var:t> := <nat:1> ; <var:t> := <nat:2> + <var:t> * <var:I> ; <var:t> := <var:t> * <var:I> ; <var:t> := <nat:2> + <var:t> * <var:I> \end{verbatim} Assuming that $ <var:I> = <var:s> $ ahead of running our program , then we see $ <var:t> = <nat:1> \cdot <var:s> ^ <nat:3> + <nat:2> \cdot <var:s> ^ <nat:2> + <nat:2> $ when list of commands is done . \end{theorem} \begin{proof} Proving correctness for the list of commands can be shown with Hoare logic . Advancing , \[ \begin{tabular} {rcl} \{ <var:I> = <var:s> \} & <var:t> := <nat:1> & \{ <var:I> = <var:s> \land <var:t> = <nat:1> \} \end{tabular} This is guaranteed by the law of usual Hoare techniques . Moving forward , we see \[ \begin{tabular} {rcl} \{ <var:I> = <var:s> \} & <var:t> := <nat:1> & \{ <var:I> = <var:s> \land <var:t> = <nat:1> \} \\ \{ <var:I> = <var:s> \land <var:t> = <nat:1> \} & <var:t> := <nat:2> + <var:t> * <var:I> & \{ <var:I> = <var:s> \land <var:t> = <nat:1> \times <var:s> + <nat:2> \} \\ \{ <var:I> = <var:s> \land <var:t> = <nat:1> \times <var:s> + <nat:2> \} & <var:t> := <var:t> * <var:I> & \{ <var:I> = <var:s> \land <var:t> = <nat:1> \times <var:s> ^ <nat:2> + <nat:2> \times <var:s> + \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:s> : nat , {{ <var:I> = <var:s> }} <var:t> := <nat:1> ; <var:t> := <nat:2> + <var:t> * <var:I> ; <var:t> := <var:t> * <var:I> ; <var:t> := <nat:2> + <var:t> * <var:I> {{ <var:t> = <nat:1> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:t> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:t> = <nat:1> * <var:s> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:t> = <nat:1> * <var:s> ^ <nat:2> + <nat:2> * <var:s> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:I> = <var:s> /\ <var:t> = <nat:1> * <var:s> ^ <nat:3> + <nat:2> * <var:s> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 