\begin{document} \begin{definition} Consider the following series of instructions <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:v1> := <var:U> ; <var:v2> := <var:v1> * <var:U> ; <var:v3> := <var:v2> * <var:U> ; <var:v4> := <var:v3> * <var:U> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:4> ; <var:v2> := <var:v2> * <nat:3> ; <var:v3> := <var:v3> * <nat:5> ; <var:v4> := <var:v4> * <nat:2> ; <var:H> := <var:v4> <var:H> := <var:H> + <var:v3> <var:H> := <var:H> + <var:v2> <var:H> := <var:H> + <var:v1> <var:H> := <var:H> + <var:v0> \end{verbatim} \end{definition} \begin{theorem} Given ( with some $ <var:f> \in \mathbb{N} $ ) that we have $ <var:U> = <var:f> $ prior to evaluating this list of commands then we have $ <var:H> = <nat:2> \times <var:f> ^ <nat:4> + <nat:5> \times <var:f> ^ <nat:3> + <nat:3> \times <var:f> ^ <nat:2> + <nat:4> \times <var:f> + <nat:1> $ . \end{theorem} \begin{proof} Using standard Hoare reasoning produces : \begin{eqnarray} \{ <var:U> = <var:f> \} \\ <var:v1> := <var:U> ; \\ \{ <var:U> = <var:f> \land <var:v1> = <var:f> \} \\ <var:v2> := <var:v1> * <var:U> ; \\ \{ <var:U> = <var:f> \land <var:v1> = <var:f> \land <var:v2> = <var:f> ^ <nat:2> \} \\ <var:v3> := <var:v2> * <var:U> ; \\ \{ <var:U> = <var:f> \land <var:v1> = <var:f> \land <var:v2> = <var:f> ^ <nat:2> \land <var:v3> = <var:f> ^ <nat:3> \} \\ <var:v4> := <var:v3> * <var:U> ; \\ \{ <var:U> = <var:f> \land <var:v1> = <var:f> \land <var:v2> = <var:f> ^ <nat:2> \land <var:v3> = <var:f> ^ <nat:3> \land <var:v4> = <var:f> ^ <nat:4> \} \\ <var:v0> := <nat:1> ; \\ \{ <var:U> = <var:f> \land <var:v1> = <var:f> \land <var:v2> = <var:f> ^ <nat:2> \land <var:v3> = <var:f> ^ <nat:3> \land <var:v4> = <var:f> ^ <nat:4> \land <var:v0> = <nat:1> \} \\ <var:v1> := <var:v1> * <nat:4> ; \\ \{ <var:U> = <var:f> \land <var:v1> = <nat:4> \cdot <var:f> \land <var:v2> = <var:f> ^ <nat:2> \land <var:v3> = <var:f> ^ <nat:3> \land <var:v4> = <var:f> ^ <nat:4> \land <var:v0> = <nat:1> \} \\ <var:v2> := <var:v2> * <nat:3> ; \\ \{ <var:U> = <var:f> \land <var:v1> = <nat:4> \cdot <var:f> \land <var:v2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:v3> = <var:f> ^ <nat:3> \land <var:v4> = <var:f> ^ <nat:4> \land <var:v0> = <nat:1> \} \\ <var:v3> := <var:v3> * <nat:5> ; \\ \{ <var:U> = <var:f> \land <var:v1> = <nat:4> \cdot <var:f> \land <var:v2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:v3> = <nat:5> \cdot <var:f> ^ <nat:3> \land <var:v4> = <var:f> ^ <nat:4> \land <var:v0> = <nat:1> \} \\ <var:v4> := <var:v4> * <nat:2> ; \\ \{ <var:U> = <var:f> \land <var:v1> = <nat:4> \cdot <var:f> \land <var:v2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:v3> = <nat:5> \cdot <var:f> ^ <nat:3> \land <var:v4> = <nat:2> \cdot <var:f> ^ <nat:4> \land <var:v0> = <nat:1> \} \\ <var:H> := <var:v4> \\ \{ <var:U> = <var:f> \land <var:v1> = <nat:4> \cdot <var:f> \land <var:v2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:v3> = <nat:5> \cdot <var:f> ^ <nat:3> \land <var:v0> = <nat:1> \land <var:H> = <nat:2> \cdot <var:f> ^ <nat:4> \} \\ <var:H> := <var:H> + <var:v3> \\ \{ <var:U> = <var:f> \land <var:v1> = <nat:4> \cdot <var:f> \land <var:v2> = <nat:3> \cdot <var:f> ^ <nat:2> \land <var:v0> = <nat:1> \land <var:H> = <nat:2> \cdot <var:f> ^ <nat:4> + <nat:5> \cdot <var:f> ^ <nat:3> \} \\ <var:H> := <var:H> + <var:v2> \\ \{ <var:U> = <var:f> \land <var:v1> = <nat:4> \cdot <var:f> \land <var:v0> = <nat:1> \land <var:H> = <nat:2> \cdot <var:f> ^ <nat:4> + <nat:5> \cdot <var:f> ^ <nat:3> + <nat:3> \cdot <var:f> ^ <nat:2> \} \\ <var:H> := <var:H> + <var:v1> \\ \{ <var:U> = <var:f> \land <var:v0> = <nat:1> \land <var:H> = <nat:2> \cdot <var:f> ^ <nat:4> + <nat:5> \cdot <var:f> ^ <nat:3> + <nat:3> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> \} \\ <var:H> := <var:H> + <var:v0> \\ \{ <var:U> = <var:f> \land <var:H> = <nat:2> \cdot <var:f> ^ <nat:4> + <nat:5> \cdot <var:f> ^ <nat:3> + <nat:3> \cdot <var:f> ^ <nat:2> + <nat:4> \cdot <var:f> + <nat:1> \} \end{eqnarray} Hence , the series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Definition <var:v1> : string := " <var:v1> " . Definition <var:v2> : string := " <var:v2> " . Definition <var:v3> : string := " <var:v3> " . Definition <var:v4> : string := " <var:v4> " . Definition <def:poly> := <var:v1> := <var:U> ; <var:v2> := <var:v1> * <var:U> ; <var:v3> := <var:v2> * <var:U> ; <var:v4> := <var:v3> * <var:U> ; <var:v0> := <nat:1> ; <var:v1> := <var:v1> * <nat:4> ; <var:v2> := <var:v2> * <nat:3> ; <var:v3> := <var:v3> * <nat:5> ; <var:v4> := <var:v4> * <nat:2> ; <var:H> := <var:v4> <var:H> := <var:H> + <var:v3> <var:H> := <var:H> + <var:v2> <var:H> := <var:H> + <var:v1> <var:H> := <var:H> + <var:v0> . Theorem <genH:poly_code_correct> : forall <var:f> : nat , {{ <var:U> = <var:f> }} <def:poly> {{ <var:H> = <nat:2> * <var:f> ^ <nat:4> + <nat:5> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:v1> = <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:v1> = <var:f> /\ <var:v2> = <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:v1> = <var:f> /\ <var:v2> = <var:f> ^ <nat:2> /\ <var:v3> = <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:v1> = <var:f> /\ <var:v2> = <var:f> ^ <nat:2> /\ <var:v3> = <var:f> ^ <nat:3> /\ <var:v4> = <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:v1> = <var:f> /\ <var:v2> = <var:f> ^ <nat:2> /\ <var:v3> = <var:f> ^ <nat:3> /\ <var:v4> = <var:f> ^ <nat:4> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:v1> = <nat:4> * <var:f> /\ <var:v2> = <var:f> ^ <nat:2> /\ <var:v3> = <var:f> ^ <nat:3> /\ <var:v4> = <var:f> ^ <nat:4> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:v1> = <nat:4> * <var:f> /\ <var:v2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:v3> = <var:f> ^ <nat:3> /\ <var:v4> = <var:f> ^ <nat:4> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:v1> = <nat:4> * <var:f> /\ <var:v2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:v3> = <nat:5> * <var:f> ^ <nat:3> /\ <var:v4> = <var:f> ^ <nat:4> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:v1> = <nat:4> * <var:f> /\ <var:v2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:v3> = <nat:5> * <var:f> ^ <nat:3> /\ <var:v4> = <nat:2> * <var:f> ^ <nat:4> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:v1> = <nat:4> * <var:f> /\ <var:v2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:v3> = <nat:5> * <var:f> ^ <nat:3> /\ <var:v0> = <nat:1> /\ <var:H> = <nat:2> * <var:f> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:v1> = <nat:4> * <var:f> /\ <var:v2> = <nat:3> * <var:f> ^ <nat:2> /\ <var:v0> = <nat:1> /\ <var:H> = <nat:2> * <var:f> ^ <nat:4> + <nat:5> * <var:f> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:v1> = <nat:4> * <var:f> /\ <var:v0> = <nat:1> /\ <var:H> = <nat:2> * <var:f> ^ <nat:4> + <nat:5> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:v0> = <nat:1> /\ <var:H> = <nat:2> * <var:f> ^ <nat:4> + <nat:5> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:4> * <var:f> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:f> /\ <var:H> = <nat:2> * <var:f> ^ <nat:4> + <nat:5> * <var:f> ^ <nat:3> + <nat:3> * <var:f> ^ <nat:2> + <nat:4> * <var:f> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 