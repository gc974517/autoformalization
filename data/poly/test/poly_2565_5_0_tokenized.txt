\begin{document} \begin{definition} Consider a program <def:poly> in \emph{Imp} as \begin{verbatim} <var:L0> := <nat:9> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:D> ; <var:Q> := <var:L1> ; <var:Q> := <var:Q> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Allow it to be that $ <var:D> = <var:w> $ ahead of executing our list of instructions it follows that we have $ <var:Q> = <nat:1> * <var:w> + <nat:9> $ . \end{theorem} \begin{proof} Arguing the correctness of our program can be seen through standard Hoare reasoning . Moving forward to the next step , we see the variable binding statement binding $ <nat:9> $ as $ <var:L0>$ . This advances the condition $ \{ <var:D> = <var:w> \} $ to $ \{ <var:D> = <var:w> \land <var:L0> = <nat:9> \} $ . This is deduced through the assignment rule given in standard Hoare reasoning . Moving on to the following bit of code seen in the code segment , we see the variable binding statement yielding $ <nat:1> $ as $ <var:L1>$ . This command forwards $ \{ <var:D> = <var:w> \land <var:L0> = <nat:9> \} $ as the condition $ \{ <var:D> = <var:w> \land <var:L0> = <nat:9> \land <var:L1> = <nat:1> \} $ . This is given by the assignment rule in typical Hoare reasoning . Stepping forward , the command binding $ <var:L1> * <var:D> $ to $ <var:L1>$ . This code takes the condition $ \{ <var:D> = <var:w> \land <var:L0> = <nat:9> \land <var:L1> = <nat:1> \} $ to $ \{ <var:D> = <var:w> \land <var:L0> = <nat:9> \land <var:L1> = <nat:1> \times <var:w> \} $ . Stepping forward , we see the assignment line \verb | <var:Q> := <var:L1> ; | . This command takes the precondition $ \{ <var:D> = <var:w> \land <var:L0> = <nat:9> \land <var:L1> = <nat:1> \times <var:w> \} $ as $ \{ <var:D> = <var:w> \land <var:L0> = <nat:9> \land <var:Q> = <nat:1> \times <var:w> \} $ . Now , we have the assignment statement assigning $ <var:Q> + <var:L0$ into $ <var:Q>$ . This statement advances the precondition $ \{ <var:D> = <var:w> \land <var:L0> = <nat:9> \land <var:Q> = <nat:1> \times <var:w> \} $ as the condition $ \{ <var:D> = <var:w> \land <var:Q> = <nat:1> \times <var:w> + <nat:9> \} $ . This is guaranteed using the assignment scheme in usual Hoare techniques . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <def:poly> := <var:L0> := <nat:9> ; <var:L1> := <nat:1> ; <var:L1> := <var:L1> * <var:D> ; <var:Q> := <var:L1> ; <var:Q> := <var:Q> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:D> = <var:w> }} <def:poly> {{ <var:Q> = <nat:1> * <var:w> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:L0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:L0> = <nat:9> /\ <var:L1> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:L0> = <nat:9> /\ <var:Q> = <nat:1> * <var:w> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:D> = <var:w> /\ <var:Q> = <nat:1> * <var:w> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 