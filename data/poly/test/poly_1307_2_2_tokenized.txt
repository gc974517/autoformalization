\begin{document} \begin{definition} Take the following segment of code <def:poly> in \emph{Imp} as \begin{verbatim} <var:d> := <nat:1> ; <var:d> := <nat:2> + <var:d> * <var:Q> \end{verbatim} \end{definition} \begin{theorem} Take a series of instructions <def:poly> in \emph{Imp} . Allow it to hold that $ <var:Q> = <var:w> $ ( for all natural numbers $ <var:w> $ ) before running the code , then $ <var:d> = <nat:1> \cdot <var:w> + <nat:2> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:Q> = <var:w> \} \\ <var:d> := <nat:1> ; \\ \{ <var:Q> = <var:w> \land <var:d> = <nat:1> \} \\ <var:d> := <nat:2> + <var:d> * <var:Q> \\ \{ <var:Q> = <var:w> \land <var:d> = <nat:1> \times <var:w> + <nat:2> \} \end{eqnarray} The application of typical Hoare logic accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:d> := <nat:1> ; <var:d> := <nat:2> + <var:d> * <var:Q> . Theorem <genH:poly_code_correct> : forall <var:w> : nat , {{ <var:Q> = <var:w> }} <def:poly> {{ <var:d> = <nat:1> * <var:w> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:d> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Q> = <var:w> /\ <var:d> = <nat:1> * <var:w> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 