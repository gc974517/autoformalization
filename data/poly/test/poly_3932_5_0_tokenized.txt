\begin{document} \begin{definition} Take a series of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:g0> := <nat:9> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:z> ; <var:r> := <var:g1> ; <var:r> := <var:r> + <var:g0> \end{verbatim} \end{definition} \begin{theorem} Allow it to hold that $ <var:z> = <var:L> $ ahead of executing this series of instructions it holds that we see $ <var:r> = <nat:2> \times <var:L> + <nat:9> $ . \end{theorem} \begin{proof} Using Hoare reasoning returns : \begin{eqnarray} \{ <var:z> = <var:L> \} \\ <var:g0> := <nat:9> ; \\ \{ <var:z> = <var:L> \land <var:g0> = <nat:9> \} \\ <var:g1> := <nat:2> ; \\ \{ <var:z> = <var:L> \land <var:g0> = <nat:9> \land <var:g1> = <nat:2> \} \\ <var:g1> := <var:g1> * <var:z> ; \\ \{ <var:z> = <var:L> \land <var:g0> = <nat:9> \land <var:g1> = <nat:2> \cdot <var:L> \} \\ <var:r> := <var:g1> ; \\ \{ <var:z> = <var:L> \land <var:g0> = <nat:9> \land <var:r> = <nat:2> \cdot <var:L> \} \\ <var:r> := <var:r> + <var:g0> \\ \{ <var:z> = <var:L> \land <var:r> = <nat:2> \cdot <var:L> + <nat:9> \} \end{eqnarray} As a consequence , our series of commands is shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:g0> : string := " <var:g0> " . Definition <var:g1> : string := " <var:g1> " . Definition <def:poly> := <var:g0> := <nat:9> ; <var:g1> := <nat:2> ; <var:g1> := <var:g1> * <var:z> ; <var:r> := <var:g1> ; <var:r> := <var:r> + <var:g0> . Theorem <genH:poly_code_correct> : forall <var:L> : nat , {{ <var:z> = <var:L> }} <def:poly> {{ <var:r> = <nat:2> * <var:L> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:g0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:g0> = <nat:9> /\ <var:g1> = <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:g0> = <nat:9> /\ <var:r> = <nat:2> * <var:L> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:L> /\ <var:r> = <nat:2> * <var:L> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 