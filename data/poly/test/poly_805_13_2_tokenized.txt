\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:c> := <nat:4> ; <var:c> := <var:c> * <var:z> ; <var:c> := <nat:2> + <var:c> * <var:z> ; <var:c> := <nat:2> + <var:c> * <var:z> ; <var:c> := <nat:2> + <var:c> * <var:z> ; <var:c> := <nat:4> + <var:c> * <var:z> ; <var:c> := <nat:4> + <var:c> * <var:z> ; <var:c> := <nat:1> + <var:c> * <var:z> ; <var:c> := <var:c> * <var:z> ; <var:c> := <nat:4> + <var:c> * <var:z> ; <var:c> := <nat:1> + <var:c> * <var:z> ; <var:c> := <nat:4> + <var:c> * <var:z> ; <var:c> := <nat:2> + <var:c> * <var:z> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:z> = <var:x> $ for some natural coefficients $ <var:x> $ before evaluating the code , it must be that we see $ <var:c> = <nat:4> \times <var:x> ^ <nat:12> + <nat:2> \times <var:x> ^ <nat:10> + <nat:2> \times <var:x> ^ <nat:9> + <nat:2> \times <var:x> ^ <nat:8> + <nat:4> \times <var:x> ^ <nat:7> + <nat:4> \times <var:x> ^ <nat:6> + <nat:1> \times <var:x> ^ <nat:5> + <nat:4> \times <var:x> ^ <nat:3> + <nat:1> \times <var:x> ^ <nat:2> + <nat:4> \times <var:x> + <nat:2> $ when set of commands has executed . \end{theorem} \begin{proof} Demonstrating correctness of this code segment is given by Hoare techniques . Shifting focus toward the proceeding bits of codeseen in our list of instructions , we have \[ \begin{tabular} {rcl} \{ <var:z> = <var:x> \} & <var:c> := <nat:4> & \{ <var:z> = <var:x> \land <var:c> = <nat:4> \} \\ \{ <var:z> = <var:x> \land <var:c> = <nat:4> \} & <var:c> := <var:c> * <var:z> & \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> + \} \\ \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> + \} & <var:c> := <nat:2> + <var:c> * <var:z> & \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:2> + <nat:2> \} \\ \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:2> + <nat:2> \} & <var:c> := <nat:2> + <var:c> * <var:z> & \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + <nat:2> \} \\ \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + <nat:2> \} & <var:c> := <nat:2> + <var:c> * <var:z> & \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> \} \\ \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> \} & <var:c> := <nat:4> + <var:c> * <var:z> & \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> \} \\ \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> \} & <var:c> := <nat:4> + <var:c> * <var:z> & \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> \} \\ \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> \} & <var:c> := <nat:1> + <var:c> * <var:z> & \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:1> \} \\ \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:1> \} & <var:c> := <var:c> * <var:z> & \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:8> + <nat:2> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + \} \\ \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:8> + <nat:2> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + \} & <var:c> := <nat:4> + <var:c> * <var:z> & \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> ^ <nat:9> + <nat:2> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> \} \end{tabular} This is guaranteed by the variable assignmet scheme of Hoare techniques . Focusing on the following step in our set of commands , we see \[ \begin{tabular} {rcl} \{ <var:z> = <var:x> \} & <var:c> := <nat:4> & \{ <var:z> = <var:x> \land <var:c> = <nat:4> \} \end{tabular} This is shown to be logically sound using the environment update rule defined in Hoare techniques . Advancing on , \[ \begin{tabular} {rcl} \{ <var:z> = <var:x> \} & <var:c> := <nat:4> & \{ <var:z> = <var:x> \land <var:c> = <nat:4> \} \\ \{ <var:z> = <var:x> \land <var:c> = <nat:4> \} & <var:c> := <var:c> * <var:z> & \{ <var:z> = <var:x> \land <var:c> = <nat:4> * <var:x> + \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:c> := <nat:4> ; <var:c> := <var:c> * <var:z> ; <var:c> := <nat:2> + <var:c> * <var:z> ; <var:c> := <nat:2> + <var:c> * <var:z> ; <var:c> := <nat:2> + <var:c> * <var:z> ; <var:c> := <nat:4> + <var:c> * <var:z> ; <var:c> := <nat:4> + <var:c> * <var:z> ; <var:c> := <nat:1> + <var:c> * <var:z> ; <var:c> := <var:c> * <var:z> ; <var:c> := <nat:4> + <var:c> * <var:z> ; <var:c> := <nat:1> + <var:c> * <var:z> ; <var:c> := <nat:4> + <var:c> * <var:z> ; <var:c> := <nat:2> + <var:c> * <var:z> . Theorem <genH:poly_code_correct> : forall <var:x> : nat , {{ <var:z> = <var:x> }} <def:poly> {{ <var:c> = <nat:4> * <var:x> ^ <nat:12> + <nat:2> * <var:x> ^ <nat:10> + <nat:2> * <var:x> ^ <nat:9> + <nat:2> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:c> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:c> = <nat:4> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:3> + <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:2> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:2> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:2> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:8> + <nat:2> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:2> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:9> + <nat:2> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:6> + <nat:2> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:10> + <nat:2> * <var:x> ^ <nat:8> + <nat:2> * <var:x> ^ <nat:7> + <nat:2> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:4> + <nat:1> * <var:x> ^ <nat:3> + <nat:4> * <var:x> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:11> + <nat:2> * <var:x> ^ <nat:9> + <nat:2> * <var:x> ^ <nat:8> + <nat:2> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:4> * <var:x> ^ <nat:5> + <nat:1> * <var:x> ^ <nat:4> + <nat:4> * <var:x> ^ <nat:2> + <nat:1> * <var:x> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:x> /\ <var:c> = <nat:4> * <var:x> ^ <nat:12> + <nat:2> * <var:x> ^ <nat:10> + <nat:2> * <var:x> ^ <nat:9> + <nat:2> * <var:x> ^ <nat:8> + <nat:4> * <var:x> ^ <nat:7> + <nat:4> * <var:x> ^ <nat:6> + <nat:1> * <var:x> ^ <nat:5> + <nat:4> * <var:x> ^ <nat:3> + <nat:1> * <var:x> ^ <nat:2> + <nat:4> * <var:x> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 