\begin{document} \begin{theorem} We define the following set of commands in \emph{Imp} as \begin{verbatim} <var:c0> := <nat:3> ; <var:y> := <var:c0> \end{verbatim} Assume $ <var:n> = <var:r> $ prior to running the series of commands , it holds that we see $ <var:y> = <nat:3> $ once series of commands has finished executing . \end{theorem} \begin{proof} The argument for the series of commands can be demonstrated through typical Hoare reasoning . Taking another step toward the proceeding bit of code in our set of instructions , we have the variable binding code yielding $ <nat:3> $ to $ <var:c0>$ . This forwards the condition $ \{ <var:n> = <var:r> \} $ as the postcondition $ \{ <var:n> = <var:r> \land <var:c0> = <nat:3> \} $ . Honing in on the next command contained in our program , the assignment command defining $ <var:c0$ as $ <var:y>$ . This redefines $ \{ <var:n> = <var:r> \land <var:c0> = <nat:3> \} $ as $ \{ <var:n> = <var:r> \land <var:y> = <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:c0> : string := " <var:c0> " . Theorem <genH:poly_code_correct> : forall <var:r> : nat , {{ <var:n> = <var:r> }} <var:c0> := <nat:3> ; <var:y> := <var:c0> {{ <var:y> = <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:c0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:n> = <var:r> /\ <var:y> = <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 