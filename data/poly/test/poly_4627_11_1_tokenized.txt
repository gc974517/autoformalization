\begin{document} \begin{theorem} Take the following program as follows \begin{verbatim} <var:G1> := <var:m> ; <var:G2> := <var:G1> * <var:m> ; <var:G3> := <var:G2> * <var:m> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:1> ; <var:G2> := <var:G2> * <nat:1> ; <var:G3> := <var:G3> * <nat:9> ; <var:O> := <var:G3> <var:O> := <var:O> + <var:G2> <var:O> := <var:O> + <var:G1> <var:O> := <var:O> + <var:G0> \end{verbatim} Allow that we have $ <var:m> = <var:X> $ ( for every natural numbers $ <var:X> $ ) before interpreting our set of commands , it holds that we see $ <var:O> = <nat:9> \cdot <var:X> ^ <nat:3> + <nat:1> \cdot <var:X> ^ <nat:2> + <nat:1> \cdot <var:X> + <nat:1> $ . \end{theorem} \begin{proof} The course of logic for our code segment can be given through the below decorated code segment . \begin{eqnarray} \{ <var:m> = <var:X> \} \\ <var:G1> := <var:m> ; \\ \{ <var:m> = <var:X> \land <var:G1> = <var:X> \} \\ <var:G2> := <var:G1> * <var:m> ; \\ \{ <var:m> = <var:X> \land <var:G1> = <var:X> \land <var:G2> = <var:X> ^ <nat:2> \} \\ <var:G3> := <var:G2> * <var:m> ; \\ \{ <var:m> = <var:X> \land <var:G1> = <var:X> \land <var:G2> = <var:X> ^ <nat:2> \land <var:G3> = <var:X> ^ <nat:3> \} \\ <var:G0> := <nat:1> ; \\ \{ <var:m> = <var:X> \land <var:G1> = <var:X> \land <var:G2> = <var:X> ^ <nat:2> \land <var:G3> = <var:X> ^ <nat:3> \land <var:G0> = <nat:1> \} \\ <var:G1> := <var:G1> * <nat:1> ; \\ \{ <var:m> = <var:X> \land <var:G1> = <nat:1> \times <var:X> \land <var:G2> = <var:X> ^ <nat:2> \land <var:G3> = <var:X> ^ <nat:3> \land <var:G0> = <nat:1> \} \\ <var:G2> := <var:G2> * <nat:1> ; \\ \{ <var:m> = <var:X> \land <var:G1> = <nat:1> \times <var:X> \land <var:G2> = <nat:1> \times <var:X> ^ <nat:2> \land <var:G3> = <var:X> ^ <nat:3> \land <var:G0> = <nat:1> \} \\ <var:G3> := <var:G3> * <nat:9> ; \\ \{ <var:m> = <var:X> \land <var:G1> = <nat:1> \times <var:X> \land <var:G2> = <nat:1> \times <var:X> ^ <nat:2> \land <var:G3> = <nat:9> \times <var:X> ^ <nat:3> \land <var:G0> = <nat:1> \} \\ <var:O> := <var:G3> \\ \{ <var:m> = <var:X> \land <var:G1> = <nat:1> \times <var:X> \land <var:G2> = <nat:1> \times <var:X> ^ <nat:2> \land <var:G0> = <nat:1> \land <var:O> = <nat:9> \times <var:X> ^ <nat:3> \} \\ <var:O> := <var:O> + <var:G2> \\ \{ <var:m> = <var:X> \land <var:G1> = <nat:1> \times <var:X> \land <var:G0> = <nat:1> \land <var:O> = <nat:9> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> \} \\ <var:O> := <var:O> + <var:G1> \\ \{ <var:m> = <var:X> \land <var:G0> = <nat:1> \land <var:O> = <nat:9> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> \} \\ <var:O> := <var:O> + <var:G0> \\ \{ <var:m> = <var:X> \land <var:O> = <nat:9> \times <var:X> ^ <nat:3> + <nat:1> \times <var:X> ^ <nat:2> + <nat:1> \times <var:X> + <nat:1> \} \end{eqnarray} Applying typical Hoare reasoning finishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:G0> : string := " <var:G0> " . Definition <var:G1> : string := " <var:G1> " . Definition <var:G2> : string := " <var:G2> " . Definition <var:G3> : string := " <var:G3> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:m> = <var:X> }} <var:G1> := <var:m> ; <var:G2> := <var:G1> * <var:m> ; <var:G3> := <var:G2> * <var:m> ; <var:G0> := <nat:1> ; <var:G1> := <var:G1> * <nat:1> ; <var:G2> := <var:G2> * <nat:1> ; <var:G3> := <var:G3> * <nat:9> ; <var:O> := <var:G3> <var:O> := <var:O> + <var:G2> <var:O> := <var:O> + <var:G1> <var:O> := <var:O> + <var:G0> {{ <var:O> = <nat:9> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:G1> = <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:G1> = <var:X> /\ <var:G2> = <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:G1> = <var:X> /\ <var:G2> = <var:X> ^ <nat:2> /\ <var:G3> = <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:G1> = <var:X> /\ <var:G2> = <var:X> ^ <nat:2> /\ <var:G3> = <var:X> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:G1> = <nat:1> * <var:X> /\ <var:G2> = <var:X> ^ <nat:2> /\ <var:G3> = <var:X> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:G1> = <nat:1> * <var:X> /\ <var:G2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:G3> = <var:X> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:G1> = <nat:1> * <var:X> /\ <var:G2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:G3> = <nat:9> * <var:X> ^ <nat:3> /\ <var:G0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:G1> = <nat:1> * <var:X> /\ <var:G2> = <nat:1> * <var:X> ^ <nat:2> /\ <var:G0> = <nat:1> /\ <var:O> = <nat:9> * <var:X> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:G1> = <nat:1> * <var:X> /\ <var:G0> = <nat:1> /\ <var:O> = <nat:9> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:G0> = <nat:1> /\ <var:O> = <nat:9> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:m> = <var:X> /\ <var:O> = <nat:9> * <var:X> ^ <nat:3> + <nat:1> * <var:X> ^ <nat:2> + <nat:1> * <var:X> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 