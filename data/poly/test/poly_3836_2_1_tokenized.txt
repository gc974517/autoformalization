\begin{document} \begin{definition} We define a code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:O0> := <nat:4> ; <var:B> := <var:O0> \end{verbatim} \end{definition} \begin{theorem} Let the following series of commands <def:poly> in \emph{Imp} . Given it to hold that $ <var:L> = <var:H> $ before executing this list of instructions , it must be that $ <var:B> = <nat:4> $ . \end{theorem} \begin{proof} The course of logic for this list of instructions is given through this decorated program . \begin{eqnarray} \{ <var:L> = <var:H> \} \\ <var:O0> := <nat:4> ; \\ \{ <var:L> = <var:H> \land <var:O0> = <nat:4> \} \\ <var:B> := <var:O0> \\ \{ <var:L> = <var:H> \land <var:B> = <nat:4> \} \end{eqnarray} Using Hoare techniques resolves the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:O0> : string := " <var:O0> " . Definition <def:poly> := <var:O0> := <nat:4> ; <var:B> := <var:O0> . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:L> = <var:H> }} <def:poly> {{ <var:B> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:O0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:L> = <var:H> /\ <var:B> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 