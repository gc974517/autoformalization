\begin{document} \begin{theorem} Define a code as \begin{verbatim} <var:P0> := <nat:4> ; <var:T> := <var:P0> \end{verbatim} Allowing it to hold that $ <var:h> = <var:Y> $ before interpreting this code , it must be that we see $ <var:T> = <nat:4> $ once code terminates . \end{theorem} \begin{proof} We can see that the below decorated set of instructions . \begin{eqnarray} \{ <var:h> = <var:Y> \} \\ <var:P0> := <nat:4> ; \\ \{ <var:h> = <var:Y> \land <var:P0> = <nat:4> \} \\ <var:T> := <var:P0> \\ \{ <var:h> = <var:Y> \land <var:T> = <nat:4> \} \end{eqnarray} Applying standard Hoare logic accomplishes the proof . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:P0> : string := " <var:P0> " . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:h> = <var:Y> }} <var:P0> := <nat:4> ; <var:T> := <var:P0> {{ <var:T> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:P0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:h> = <var:Y> /\ <var:T> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 