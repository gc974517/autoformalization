\begin{document} \begin{definition} Take the following code <def:poly> in \emph{Imp} as \begin{verbatim} <var:e> := <nat:4> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:1> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> \end{verbatim} \end{definition} \begin{theorem} Assume $ <var:q> = <var:a> $ taking $ <var:a> $ prior to running our code it must be that we have $ <var:e> = <nat:4> \cdot <var:a> ^ <nat:9> + <nat:3> \cdot <var:a> ^ <nat:8> + <nat:2> \cdot <var:a> ^ <nat:7> + <nat:2> \cdot <var:a> ^ <nat:6> + <nat:2> \cdot <var:a> ^ <nat:5> + <nat:1> \cdot <var:a> ^ <nat:4> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:3> $ . \end{theorem} \begin{proof} The argument for this series of commands is evident by Hoare reasoning . Moving forward to the subsequent piece of code seen in our series of instructions , we see the variable update statement \verb | <var:e> := <nat:4> ; | . This line forwards the condition $ \{ <var:q> = <var:a> \} $ into $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \} $ . Taking another step toward the upcoming command found in the program , the binding code giving $ <nat:3> + <var:e> * <var:q> $ as $ <var:e>$ . This code transfers $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \} $ toward the postcondition $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> + <nat:3> \} $ . This is ensured with the assignment scheme of usual Hoare techniques . Taking another step toward the subsequent line contained in our code segment , the environment update statement \verb | <var:e> := <nat:2> + <var:e> * <var:q> ; | . This statement advances the condition $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> + <nat:3> \} $ to $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:2> \} $ . This is ensured with the assignment scheme given by typical Hoare techniques . Immediately after , the code \verb | <var:e> := <nat:2> + <var:e> * <var:q> ; | . This line redefines the precondition $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:2> \} $ into the postcondition $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:2> \cdot <var:a> + <nat:2> \} $ . Taking another step toward the proceeding statement seen in our program , we have the variable assignmet statement giving $ <nat:2> + <var:e> * <var:q> $ to $ <var:e>$ . This line takes $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:3> + <nat:3> \cdot <var:a> ^ <nat:2> + <nat:2> \cdot <var:a> + <nat:2> \} $ to the postcondition $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> ^ <nat:2> + <nat:2> \cdot <var:a> + <nat:2> \} $ . Advancing , we have the variable update command defining $ <nat:1> + <var:e> * <var:q> $ toward $ <var:e>$ . This statement forwards the precondition $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:4> + <nat:3> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> ^ <nat:2> + <nat:2> \cdot <var:a> + <nat:2> \} $ toward $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:5> + <nat:3> \cdot <var:a> ^ <nat:4> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> ^ <nat:2> + <nat:2> \cdot <var:a> + <nat:1> \} $ . Shifting focus toward the following line seen in the set of commands , we see the binding statement letting $ <nat:2> + <var:e> * <var:q> $ as $ <var:e>$ . This takes the condition $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:5> + <nat:3> \cdot <var:a> ^ <nat:4> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> ^ <nat:2> + <nat:2> \cdot <var:a> + <nat:1> \} $ to $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:6> + <nat:3> \cdot <var:a> ^ <nat:5> + <nat:2> \cdot <var:a> ^ <nat:4> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + <nat:2> \} $ . This is known to be sound by the assignment law obtained from typical Hoare techniques . Looking at the following bit of code in our series of instructions , we see the command letting $ <nat:4> + <var:e> * <var:q> $ toward $ <var:e>$ . This moves the condition $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:6> + <nat:3> \cdot <var:a> ^ <nat:5> + <nat:2> \cdot <var:a> ^ <nat:4> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> ^ <nat:2> + <nat:1> \cdot <var:a> + <nat:2> \} $ into $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:7> + <nat:3> \cdot <var:a> ^ <nat:6> + <nat:2> \cdot <var:a> ^ <nat:5> + <nat:2> \cdot <var:a> ^ <nat:4> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> ^ <nat:2> + <nat:2> \cdot <var:a> + <nat:4> \} $ . This is rigorously given using the assignment scheme given in Hoare reasoning . Taking a look at the proceeding piece of code seen in the list of commands , we have the line assigning $ <nat:3> + <var:e> * <var:q> $ as $ <var:e>$ . This line advances the condition $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:7> + <nat:3> \cdot <var:a> ^ <nat:6> + <nat:2> \cdot <var:a> ^ <nat:5> + <nat:2> \cdot <var:a> ^ <nat:4> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:1> \cdot <var:a> ^ <nat:2> + <nat:2> \cdot <var:a> + <nat:4> \} $ toward $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:8> + <nat:3> \cdot <var:a> ^ <nat:7> + <nat:2> \cdot <var:a> ^ <nat:6> + <nat:2> \cdot <var:a> ^ <nat:5> + <nat:2> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> ^ <nat:2> + <nat:4> \cdot <var:a> + <nat:3> \} $ . This is shown to be logically sound with the assignment rule defined by typical Hoare techniques . Paying attention to the subsequent statement seen in the segment of code , we have the line giving $ <nat:3> + <var:e> * <var:q$ to $ <var:e>$ . This transfers the precondition $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:8> + <nat:3> \cdot <var:a> ^ <nat:7> + <nat:2> \cdot <var:a> ^ <nat:6> + <nat:2> \cdot <var:a> ^ <nat:5> + <nat:2> \cdot <var:a> ^ <nat:4> + <nat:1> \cdot <var:a> ^ <nat:3> + <nat:2> \cdot <var:a> ^ <nat:2> + <nat:4> \cdot <var:a> + <nat:3> \} $ into the postcondition $ \{ <var:q> = <var:a> \land <var:e> = <nat:4> \cdot <var:a> ^ <nat:9> + <nat:3> \cdot <var:a> ^ <nat:8> + <nat:2> \cdot <var:a> ^ <nat:7> + <nat:2> \cdot <var:a> ^ <nat:6> + <nat:2> \cdot <var:a> ^ <nat:5> + <nat:1> \cdot <var:a> ^ <nat:4> + <nat:2> \cdot <var:a> ^ <nat:3> + <nat:4> \cdot <var:a> ^ <nat:2> + <nat:3> \cdot <var:a> + <nat:3> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:e> := <nat:4> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:1> + <var:e> * <var:q> ; <var:e> := <nat:2> + <var:e> * <var:q> ; <var:e> := <nat:4> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> ; <var:e> := <nat:3> + <var:e> * <var:q> . Theorem <genH:poly_code_correct> : forall <var:a> : nat , {{ <var:q> = <var:a> }} <def:poly> {{ <var:e> = <nat:4> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:8> + <nat:2> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:q> = <var:a> /\ <var:e> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:a> /\ <var:e> = <nat:4> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:a> /\ <var:e> = <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:a> /\ <var:e> = <nat:4> * <var:a> ^ <nat:3> + <nat:3> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:a> /\ <var:e> = <nat:4> * <var:a> ^ <nat:4> + <nat:3> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:a> /\ <var:e> = <nat:4> * <var:a> ^ <nat:5> + <nat:3> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:a> /\ <var:e> = <nat:4> * <var:a> ^ <nat:6> + <nat:3> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:1> * <var:a> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:a> /\ <var:e> = <nat:4> * <var:a> ^ <nat:7> + <nat:3> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:1> * <var:a> ^ <nat:2> + <nat:2> * <var:a> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:a> /\ <var:e> = <nat:4> * <var:a> ^ <nat:8> + <nat:3> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:5> + <nat:2> * <var:a> ^ <nat:4> + <nat:1> * <var:a> ^ <nat:3> + <nat:2> * <var:a> ^ <nat:2> + <nat:4> * <var:a> + <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:q> = <var:a> /\ <var:e> = <nat:4> * <var:a> ^ <nat:9> + <nat:3> * <var:a> ^ <nat:8> + <nat:2> * <var:a> ^ <nat:7> + <nat:2> * <var:a> ^ <nat:6> + <nat:2> * <var:a> ^ <nat:5> + <nat:1> * <var:a> ^ <nat:4> + <nat:2> * <var:a> ^ <nat:3> + <nat:4> * <var:a> ^ <nat:2> + <nat:3> * <var:a> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 