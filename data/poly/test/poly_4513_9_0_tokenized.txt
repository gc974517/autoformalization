\begin{document} \begin{theorem} Take a series of commands in \emph{Imp} : \begin{verbatim} <var:s0> := <nat:1> ; <var:s1> := <nat:5> ; <var:s1> := <var:s1> * <var:R> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:R> ; <var:s2> := <var:s2> * <var:R> ; <var:n> := <var:s2> ; <var:n> := <var:n> + <var:s1> ; <var:n> := <var:n> + <var:s0> \end{verbatim} Allowing $ <var:R> = <var:B> $ before the evaluation of this set of commands , it must be that we see $ <var:n> = <nat:7> \cdot <var:B> ^ <nat:2> + <nat:5> \cdot <var:B> + <nat:1> $ . \end{theorem} \begin{proof} Using Hoare techniques results in : \begin{eqnarray} \{ <var:R> = <var:B> \} \\ <var:s0> := <nat:1> ; \\ \{ <var:R> = <var:B> \land <var:s0> = <nat:1> \} \\ <var:s1> := <nat:5> ; \\ \{ <var:R> = <var:B> \land <var:s0> = <nat:1> \land <var:s1> = <nat:5> \} \\ <var:s1> := <var:s1> * <var:R> ; \\ \{ <var:R> = <var:B> \land <var:s0> = <nat:1> \land <var:s1> = <nat:5> \times <var:B> \} \\ <var:s2> := <nat:7> ; \\ \{ <var:R> = <var:B> \land <var:s0> = <nat:1> \land <var:s1> = <nat:5> \times <var:B> \land <var:s2> = <nat:7> \} \\ <var:s2> := <var:s2> * <var:R> ; \\ \{ <var:R> = <var:B> \land <var:s0> = <nat:1> \land <var:s1> = <nat:5> \times <var:B> \land <var:s2> = <nat:7> \times <var:B> \} \\ <var:s2> := <var:s2> * <var:R> ; \\ \{ <var:R> = <var:B> \land <var:s0> = <nat:1> \land <var:s1> = <nat:5> \times <var:B> \land <var:s2> = <nat:7> \times <var:B> ^ <nat:2> \} \end{eqnarray} Furthering the execution of this code gives us : \begin{eqnarray} <var:n> := <var:s2> ; \\ \{ <var:R> = <var:B> \land <var:s0> = <nat:1> \land <var:s1> = <nat:5> \times <var:B> \land <var:n> = <nat:7> \times <var:B> ^ <nat:2> \} \\ <var:n> := <var:n> + <var:s1> ; \\ \{ <var:R> = <var:B> \land <var:s0> = <nat:1> \land <var:n> = <nat:7> \times <var:B> ^ <nat:2> + <nat:5> \times <var:B> \} \\ <var:n> := <var:n> + <var:s0> \\ \{ <var:R> = <var:B> \land <var:n> = <nat:7> \times <var:B> ^ <nat:2> + <nat:5> \times <var:B> + <nat:1> \} \end{eqnarray} Considering the preceding argument , our list of commands is demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:s0> : string := " <var:s0> " . Definition <var:s1> : string := " <var:s1> " . Definition <var:s2> : string := " <var:s2> " . Theorem <genH:poly_code_correct> : forall <var:B> : nat , {{ <var:R> = <var:B> }} <var:s0> := <nat:1> ; <var:s1> := <nat:5> ; <var:s1> := <var:s1> * <var:R> ; <var:s2> := <nat:7> ; <var:s2> := <var:s2> * <var:R> ; <var:s2> := <var:s2> * <var:R> ; <var:n> := <var:s2> ; <var:n> := <var:n> + <var:s1> ; <var:n> := <var:n> + <var:s0> {{ <var:n> = <nat:7> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:s0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:5> * <var:B> /\ <var:s2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:5> * <var:B> /\ <var:s2> = <nat:7> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:5> * <var:B> /\ <var:s2> = <nat:7> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:s0> = <nat:1> /\ <var:s1> = <nat:5> * <var:B> /\ <var:n> = <nat:7> * <var:B> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:s0> = <nat:1> /\ <var:n> = <nat:7> * <var:B> ^ <nat:2> + <nat:5> * <var:B> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:R> = <var:B> /\ <var:n> = <nat:7> * <var:B> ^ <nat:2> + <nat:5> * <var:B> + <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 