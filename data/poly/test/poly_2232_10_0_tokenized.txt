\begin{document} \begin{theorem} Define the following series of instructions as follows \begin{verbatim} <var:N0> := <nat:4> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:S> ; <var:N3> := <nat:4> ; <var:N3> := <var:N3> * <var:S> ; <var:N3> := <var:N3> * <var:S> ; <var:N3> := <var:N3> * <var:S> ; <var:B> := <var:N3> ; <var:B> := <var:B> + <var:N1> ; <var:B> := <var:B> + <var:N0> \end{verbatim} Assume $ <var:S> = <var:t> $ , for all positive coefficients $ <var:t> $ , ahead of running the series of commands , it must be that we have $ <var:B> = <nat:4> \times <var:t> ^ <nat:3> + <nat:3> \times <var:t> + <nat:4> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:S> = <var:t> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:S> = <var:t> \land <var:N0> = <nat:4> \} \\ <var:N1> := <nat:3> ; \\ \{ <var:S> = <var:t> \land <var:N0> = <nat:4> \land <var:N1> = <nat:3> \} \\ <var:N1> := <var:N1> * <var:S> ; \\ \{ <var:S> = <var:t> \land <var:N0> = <nat:4> \land <var:N1> = <nat:3> \cdot <var:t> \} \\ <var:N3> := <nat:4> ; \\ \{ <var:S> = <var:t> \land <var:N0> = <nat:4> \land <var:N1> = <nat:3> \cdot <var:t> \land <var:N3> = <nat:4> \} \\ <var:N3> := <var:N3> * <var:S> ; \\ \{ <var:S> = <var:t> \land <var:N0> = <nat:4> \land <var:N1> = <nat:3> \cdot <var:t> \land <var:N3> = <nat:4> \cdot <var:t> \} \\ <var:N3> := <var:N3> * <var:S> ; \\ \{ <var:S> = <var:t> \land <var:N0> = <nat:4> \land <var:N1> = <nat:3> \cdot <var:t> \land <var:N3> = <nat:4> \cdot <var:t> ^ <nat:2> \} \\ <var:N3> := <var:N3> * <var:S> ; \\ \{ <var:S> = <var:t> \land <var:N0> = <nat:4> \land <var:N1> = <nat:3> \cdot <var:t> \land <var:N3> = <nat:4> \cdot <var:t> ^ <nat:3> \} \\ <var:B> := <var:N3> ; \\ \{ <var:S> = <var:t> \land <var:N0> = <nat:4> \land <var:N1> = <nat:3> \cdot <var:t> \land <var:B> = <nat:4> \cdot <var:t> ^ <nat:3> \} \\ <var:B> := <var:B> + <var:N1> ; \\ \{ <var:S> = <var:t> \land <var:N0> = <nat:4> \land <var:B> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> \} \\ <var:B> := <var:B> + <var:N0> \\ \{ <var:S> = <var:t> \land <var:B> = <nat:4> \cdot <var:t> ^ <nat:3> + <nat:3> \cdot <var:t> + <nat:4> \} \end{eqnarray} Applying typical Hoare techniques finishes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <var:N1> : string := " <var:N1> " . Definition <var:N3> : string := " <var:N3> " . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:S> = <var:t> }} <var:N0> := <nat:4> ; <var:N1> := <nat:3> ; <var:N1> := <var:N1> * <var:S> ; <var:N3> := <nat:4> ; <var:N3> := <var:N3> * <var:S> ; <var:N3> := <var:N3> * <var:S> ; <var:N3> := <var:N3> * <var:S> ; <var:B> := <var:N3> ; <var:B> := <var:B> + <var:N1> ; <var:B> := <var:B> + <var:N0> {{ <var:B> = <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:S> = <var:t> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:t> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:t> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:t> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:3> * <var:t> /\ <var:N3> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:t> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:3> * <var:t> /\ <var:N3> = <nat:4> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:t> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:3> * <var:t> /\ <var:N3> = <nat:4> * <var:t> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:t> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:3> * <var:t> /\ <var:N3> = <nat:4> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:t> /\ <var:N0> = <nat:4> /\ <var:N1> = <nat:3> * <var:t> /\ <var:B> = <nat:4> * <var:t> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:t> /\ <var:N0> = <nat:4> /\ <var:B> = <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:S> = <var:t> /\ <var:B> = <nat:4> * <var:t> ^ <nat:3> + <nat:3> * <var:t> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 