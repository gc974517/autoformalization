\begin{document} \begin{theorem} We define the following code segment as follows \begin{verbatim} <var:y0> := <nat:1> ; <var:o> := <var:y0> \end{verbatim} Assume that $ <var:e> = <var:m> $ given some positive numbers $ <var:m> $ before interpreting this code then we see $ <var:o> = <nat:1> $ once list of instructions executes . \end{theorem} \begin{proof} The flow of logic for this program can be done by standard Hoare techniques . Taking a look at the next steps seen in our segment of code , we see \begin{verbatim} { <var:e> = <var:m> } <var:y0> := <nat:1> { <var:e> = <var:m> \land <var:y0> = <nat:1> } { <var:e> = <var:m> \land <var:y0> = <nat:1> } <var:o> := <var:y0{ <var:e> = <var:m> \land <var:o> = <nat:1> } \end{verbatim} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:e> = <var:m> }} <var:y0> := <nat:1> ; <var:o> := <var:y0> {{ <var:o> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:e> = <var:m> /\ <var:y0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:e> = <var:m> /\ <var:o> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 