\begin{document} \begin{definition} We define a series of instructions <def:poly> in \emph{Imp} : \begin{verbatim} <var:L0> := <nat:4> ; <var:L1> := <nat:9> ; <var:L1> := <var:L1> * <var:f> ; <var:L2> := <nat:5> ; <var:L2> := <var:L2> * <var:f> ; <var:L2> := <var:L2> * <var:f> ; <var:L3> := <nat:3> ; <var:L3> := <var:L3> * <var:f> ; <var:L3> := <var:L3> * <var:f> ; <var:L3> := <var:L3> * <var:f> ; <var:h> := <var:L3> ; <var:h> := <var:h> + <var:L2> ; <var:h> := <var:h> + <var:L1> ; <var:h> := <var:h> + <var:L0> \end{verbatim} \end{definition} \begin{theorem} We define a segment of code <def:poly> . Assume it to hold that $ <var:f> = <var:l> $ ( given some $ <var:l> \in \mathbb{N} $ ) prior to interpreting the segment of code then we have $ <var:h> = <nat:3> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:4> $ when series of instructions has finished . \end{theorem} \begin{proof} See that the below decorated segment of code . \begin{eqnarray} \{ <var:f> = <var:l> \} \\ <var:L0> := <nat:4> ; \\ \{ <var:f> = <var:l> \land <var:L0> = <nat:4> \} \\ <var:L1> := <nat:9> ; \\ \{ <var:f> = <var:l> \land <var:L0> = <nat:4> \land <var:L1> = <nat:9> \} \\ <var:L1> := <var:L1> * <var:f> ; \\ \{ <var:f> = <var:l> \land <var:L0> = <nat:4> \land <var:L1> = <nat:9> * <var:l> \} \\ <var:L2> := <nat:5> ; \\ \{ <var:f> = <var:l> \land <var:L0> = <nat:4> \land <var:L1> = <nat:9> * <var:l> \land <var:L2> = <nat:5> \} \\ <var:L2> := <var:L2> * <var:f> ; \\ \{ <var:f> = <var:l> \land <var:L0> = <nat:4> \land <var:L1> = <nat:9> * <var:l> \land <var:L2> = <nat:5> * <var:l> \} \\ <var:L2> := <var:L2> * <var:f> ; \\ \{ <var:f> = <var:l> \land <var:L0> = <nat:4> \land <var:L1> = <nat:9> * <var:l> \land <var:L2> = <nat:5> * <var:l> ^ <nat:2> \} \\ <var:L3> := <nat:3> ; \\ \{ <var:f> = <var:l> \land <var:L0> = <nat:4> \land <var:L1> = <nat:9> * <var:l> \land <var:L2> = <nat:5> * <var:l> ^ <nat:2> \land <var:L3> = <nat:3> \} \\ <var:L3> := <var:L3> * <var:f> ; \\ \{ <var:f> = <var:l> \land <var:L0> = <nat:4> \land <var:L1> = <nat:9> * <var:l> \land <var:L2> = <nat:5> * <var:l> ^ <nat:2> \land <var:L3> = <nat:3> * <var:l> \} \\ <var:L3> := <var:L3> * <var:f> ; \\ \{ <var:f> = <var:l> \land <var:L0> = <nat:4> \land <var:L1> = <nat:9> * <var:l> \land <var:L2> = <nat:5> * <var:l> ^ <nat:2> \land <var:L3> = <nat:3> * <var:l> ^ <nat:2> \} \\ <var:L3> := <var:L3> * <var:f> ; \\ \{ <var:f> = <var:l> \land <var:L0> = <nat:4> \land <var:L1> = <nat:9> * <var:l> \land <var:L2> = <nat:5> * <var:l> ^ <nat:2> \land <var:L3> = <nat:3> * <var:l> ^ <nat:3> \} \\ <var:h> := <var:L3> ; \\ \{ <var:f> = <var:l> \land <var:L0> = <nat:4> \land <var:L1> = <nat:9> * <var:l> \land <var:L2> = <nat:5> * <var:l> ^ <nat:2> \land <var:h> = <nat:3> * <var:l> ^ <nat:3> \} \\ <var:h> := <var:h> + <var:L2> ; \\ \{ <var:f> = <var:l> \land <var:L0> = <nat:4> \land <var:L1> = <nat:9> * <var:l> \land <var:h> = <nat:3> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> \} \\ <var:h> := <var:h> + <var:L1> ; \\ \{ <var:f> = <var:l> \land <var:L0> = <nat:4> \land <var:h> = <nat:3> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> + <nat:9> * <var:l> \} \\ <var:h> := <var:h> + <var:L0> \\ \{ <var:f> = <var:l> \land <var:h> = <nat:3> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:4> \} \end{eqnarray} The application of standard Hoare logic completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:L0> : string := " <var:L0> " . Definition <var:L1> : string := " <var:L1> " . Definition <var:L2> : string := " <var:L2> " . Definition <var:L3> : string := " <var:L3> " . Definition <def:poly> := <var:L0> := <nat:4> ; <var:L1> := <nat:9> ; <var:L1> := <var:L1> * <var:f> ; <var:L2> := <nat:5> ; <var:L2> := <var:L2> * <var:f> ; <var:L2> := <var:L2> * <var:f> ; <var:L3> := <nat:3> ; <var:L3> := <var:L3> * <var:f> ; <var:L3> := <var:L3> * <var:f> ; <var:L3> := <var:L3> * <var:f> ; <var:h> := <var:L3> ; <var:h> := <var:h> + <var:L2> ; <var:h> := <var:h> + <var:L1> ; <var:h> := <var:h> + <var:L0> . Theorem <genH:poly_code_correct> : forall <var:l> : nat , {{ <var:f> = <var:l> }} <def:poly> {{ <var:h> = <nat:3> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:L0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:9> * <var:l> /\ <var:L2> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:9> * <var:l> /\ <var:L2> = <nat:5> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:9> * <var:l> /\ <var:L2> = <nat:5> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:9> * <var:l> /\ <var:L2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:L3> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:9> * <var:l> /\ <var:L2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:L3> = <nat:3> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:9> * <var:l> /\ <var:L2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:L3> = <nat:3> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:9> * <var:l> /\ <var:L2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:L3> = <nat:3> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:9> * <var:l> /\ <var:L2> = <nat:5> * <var:l> ^ <nat:2> /\ <var:h> = <nat:3> * <var:l> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:L0> = <nat:4> /\ <var:L1> = <nat:9> * <var:l> /\ <var:h> = <nat:3> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:L0> = <nat:4> /\ <var:h> = <nat:3> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> + <nat:9> * <var:l> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:f> = <var:l> /\ <var:h> = <nat:3> * <var:l> ^ <nat:3> + <nat:5> * <var:l> ^ <nat:2> + <nat:9> * <var:l> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 