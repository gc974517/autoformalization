\begin{document} \begin{theorem} We define a code segment in \emph{Imp} : \begin{verbatim} <var:C1> := <var:j> ; <var:C2> := <var:C1> * <var:j> ; <var:C3> := <var:C2> * <var:j> ; <var:C4> := <var:C3> * <var:j> ; <var:C0> := <nat:4> ; <var:C1> := <var:C1> * <nat:1> ; <var:C3> := <var:C3> * <nat:3> ; <var:C4> := <var:C4> * <nat:1> ; <var:S> := <var:C4> <var:S> := <var:S> + <var:C3> <var:S> := <var:S> + <var:C1> <var:S> := <var:S> + <var:C0> \end{verbatim} Allow ( for every positive integer coefficients $ <var:k> $ ) it to hold that $ <var:j> = <var:k> $ prior to interpreting the code segment , it must be that we have $ <var:S> = <nat:1> \times <var:k> ^ <nat:4> + <nat:3> \times <var:k> ^ <nat:3> + <nat:1> \times <var:k> + <nat:4> $ once set of commands is done . \end{theorem} \begin{proof} The application of typical Hoare techniques gives : \begin{eqnarray} \{ <var:j> = <var:k> \} \\ <var:C1> := <var:j> ; \\ \{ <var:j> = <var:k> \land <var:C1> = <var:k> \} \\ <var:C2> := <var:C1> * <var:j> ; \\ \{ <var:j> = <var:k> \land <var:C1> = <var:k> \land <var:C2> = <var:k> ^ <nat:2> \} \\ <var:C3> := <var:C2> * <var:j> ; \\ \{ <var:j> = <var:k> \land <var:C1> = <var:k> \land <var:C2> = <var:k> ^ <nat:2> \land <var:C3> = <var:k> ^ <nat:3> \} \\ <var:C4> := <var:C3> * <var:j> ; \\ \{ <var:j> = <var:k> \land <var:C1> = <var:k> \land <var:C2> = <var:k> ^ <nat:2> \land <var:C3> = <var:k> ^ <nat:3> \land <var:C4> = <var:k> ^ <nat:4> \} \\ <var:C0> := <nat:4> ; \\ \{ <var:j> = <var:k> \land <var:C1> = <var:k> \land <var:C2> = <var:k> ^ <nat:2> \land <var:C3> = <var:k> ^ <nat:3> \land <var:C4> = <var:k> ^ <nat:4> \land <var:C0> = <nat:4> \} \\ <var:C1> := <var:C1> * <nat:1> ; \\ \{ <var:j> = <var:k> \land <var:C1> = <nat:1> * <var:k> \land <var:C2> = <var:k> ^ <nat:2> \land <var:C3> = <var:k> ^ <nat:3> \land <var:C4> = <var:k> ^ <nat:4> \land <var:C0> = <nat:4> \} \\ <var:C3> := <var:C3> * <nat:3> ; \\ \{ <var:j> = <var:k> \land <var:C1> = <nat:1> * <var:k> \land <var:C2> = <var:k> ^ <nat:2> \land <var:C3> = <nat:3> * <var:k> ^ <nat:3> \land <var:C4> = <var:k> ^ <nat:4> \land <var:C0> = <nat:4> \} \\ <var:C4> := <var:C4> * <nat:1> ; \\ \{ <var:j> = <var:k> \land <var:C1> = <nat:1> * <var:k> \land <var:C2> = <var:k> ^ <nat:2> \land <var:C3> = <nat:3> * <var:k> ^ <nat:3> \land <var:C4> = <nat:1> * <var:k> ^ <nat:4> \land <var:C0> = <nat:4> \} \\ <var:S> := <var:C4> \\ \{ <var:j> = <var:k> \land <var:C1> = <nat:1> * <var:k> \land <var:C2> = <var:k> ^ <nat:2> \land <var:C3> = <nat:3> * <var:k> ^ <nat:3> \land <var:C0> = <nat:4> \land <var:S> = <nat:1> * <var:k> ^ <nat:4> \} \\ <var:S> := <var:S> + <var:C3> \\ \{ <var:j> = <var:k> \land <var:C1> = <nat:1> * <var:k> \land <var:C2> = <var:k> ^ <nat:2> \land <var:C0> = <nat:4> \land <var:S> = <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> \} \\ <var:S> := <var:S> + <var:C1> \\ \{ <var:j> = <var:k> \land <var:C0> = <nat:4> \land <var:S> = <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> \} \\ <var:S> := <var:S> + <var:C0> \\ \{ <var:j> = <var:k> \land <var:S> = <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> + <nat:4> \} \end{eqnarray} Thusly , our series of instructions has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <var:C1> : string := " <var:C1> " . Definition <var:C2> : string := " <var:C2> " . Definition <var:C3> : string := " <var:C3> " . Definition <var:C4> : string := " <var:C4> " . Theorem <genH:poly_code_correct> : forall <var:k> : nat , {{ <var:j> = <var:k> }} <var:C1> := <var:j> ; <var:C2> := <var:C1> * <var:j> ; <var:C3> := <var:C2> * <var:j> ; <var:C4> := <var:C3> * <var:j> ; <var:C0> := <nat:4> ; <var:C1> := <var:C1> * <nat:1> ; <var:C3> := <var:C3> * <nat:3> ; <var:C4> := <var:C4> * <nat:1> ; <var:S> := <var:C4> <var:S> := <var:S> + <var:C3> <var:S> := <var:S> + <var:C1> <var:S> := <var:S> + <var:C0> {{ <var:S> = <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:C1> = <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:C1> = <var:k> /\ <var:C2> = <var:k> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:C1> = <var:k> /\ <var:C2> = <var:k> ^ <nat:2> /\ <var:C3> = <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:C1> = <var:k> /\ <var:C2> = <var:k> ^ <nat:2> /\ <var:C3> = <var:k> ^ <nat:3> /\ <var:C4> = <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:C1> = <var:k> /\ <var:C2> = <var:k> ^ <nat:2> /\ <var:C3> = <var:k> ^ <nat:3> /\ <var:C4> = <var:k> ^ <nat:4> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:C1> = <nat:1> * <var:k> /\ <var:C2> = <var:k> ^ <nat:2> /\ <var:C3> = <var:k> ^ <nat:3> /\ <var:C4> = <var:k> ^ <nat:4> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:C1> = <nat:1> * <var:k> /\ <var:C2> = <var:k> ^ <nat:2> /\ <var:C3> = <nat:3> * <var:k> ^ <nat:3> /\ <var:C4> = <var:k> ^ <nat:4> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:C1> = <nat:1> * <var:k> /\ <var:C2> = <var:k> ^ <nat:2> /\ <var:C3> = <nat:3> * <var:k> ^ <nat:3> /\ <var:C4> = <nat:1> * <var:k> ^ <nat:4> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:C1> = <nat:1> * <var:k> /\ <var:C2> = <var:k> ^ <nat:2> /\ <var:C3> = <nat:3> * <var:k> ^ <nat:3> /\ <var:C0> = <nat:4> /\ <var:S> = <nat:1> * <var:k> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:C1> = <nat:1> * <var:k> /\ <var:C2> = <var:k> ^ <nat:2> /\ <var:C0> = <nat:4> /\ <var:S> = <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:C0> = <nat:4> /\ <var:S> = <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:j> = <var:k> /\ <var:S> = <nat:1> * <var:k> ^ <nat:4> + <nat:3> * <var:k> ^ <nat:3> + <nat:1> * <var:k> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 