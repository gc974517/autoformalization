\begin{document} \begin{theorem} Define a set of instructions such that \begin{verbatim} <var:j0> := <nat:9> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:r> ; <var:j2> := <nat:7> ; <var:j2> := <var:j2> * <var:r> ; <var:j2> := <var:j2> * <var:r> ; <var:f> := <var:j2> ; <var:f> := <var:f> + <var:j1> ; <var:f> := <var:f> + <var:j0> \end{verbatim} Allow that $ <var:r> = <var:m> $ --- for any positive numbers $ <var:m> $ --- prior to interpreting this series of commands then we see $ <var:f> = <nat:7> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:9> $ . \end{theorem} \begin{proof} Proving correctness for the code segment is demonstrated by Hoare reasoning . Moving forward to the proceeding lines in the series of commands , we see \begin{verbatim} { <var:r> = <var:m> } <var:j0> := <nat:9> { <var:r> = <var:m> \land <var:j0> = <nat:9> } { <var:r> = <var:m> \land <var:j0> = <nat:9> } <var:j1> := <nat:1> { <var:r> = <var:m> \land <var:j0> = <nat:9> \land <var:j1> = <nat:1> } \end{verbatim} This is deduced using the variable assignmet rule defined in standard Hoare logic . After , we have \begin{verbatim} { <var:r> = <var:m> } <var:j0> := <nat:9> { <var:r> = <var:m> \land <var:j0> = <nat:9> } \end{verbatim} Honing in on the proceeding bits of codecontained in the set of commands , we have \begin{verbatim} { <var:r> = <var:m> } <var:j0> := <nat:9> { <var:r> = <var:m> \land <var:j0> = <nat:9> } { <var:r> = <var:m> \land <var:j0> = <nat:9> } <var:j1> := <nat:1> { <var:r> = <var:m> \land <var:j0> = <nat:9> \land <var:j1> = <nat:1> } \end{verbatim} This is rigorously given using the assignment rule given by standard Hoare techniques . Paying attention to the next piece of code seen in the series of instructions , we have \begin{verbatim} { <var:r> = <var:m> } <var:j0> := <nat:9> { <var:r> = <var:m> \land <var:j0> = <nat:9> } \end{verbatim} This is guaranteed using the assignment law obtained from Hoare techniques . Moving on , we see \begin{verbatim} { <var:r> = <var:m> } <var:j0> := <nat:9> { <var:r> = <var:m> \land <var:j0> = <nat:9> } \end{verbatim} This is shown by the variable update rule given in Hoare logic . Looking at the proceeding statement in the program , \begin{verbatim} { <var:r> = <var:m> } <var:j0> := <nat:9> { <var:r> = <var:m> \land <var:j0> = <nat:9> } \end{verbatim} This is rigorously given with the binding law given in standard Hoare logic . Observing the proceeding statement contained in our set of commands , \begin{verbatim} { <var:r> = <var:m> } <var:j0> := <nat:9> { <var:r> = <var:m> \land <var:j0> = <nat:9> } \end{verbatim} This is shown by the variable assignmet law of typical Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:j0> : string := " <var:j0> " . Definition <var:j1> : string := " <var:j1> " . Definition <var:j2> : string := " <var:j2> " . Theorem <genH:poly_code_correct> : forall <var:m> : nat , {{ <var:r> = <var:m> }} <var:j0> := <nat:9> ; <var:j1> := <nat:1> ; <var:j1> := <var:j1> * <var:r> ; <var:j2> := <nat:7> ; <var:j2> := <var:j2> * <var:r> ; <var:j2> := <var:j2> * <var:r> ; <var:f> := <var:j2> ; <var:f> := <var:f> + <var:j1> ; <var:f> := <var:f> + <var:j0> {{ <var:f> = <nat:7> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:9> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:j0> = <nat:9> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:1> * <var:m> /\ <var:j2> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:1> * <var:m> /\ <var:j2> = <nat:7> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:1> * <var:m> /\ <var:j2> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:j0> = <nat:9> /\ <var:j1> = <nat:1> * <var:m> /\ <var:f> = <nat:7> * <var:m> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:j0> = <nat:9> /\ <var:f> = <nat:7> * <var:m> ^ <nat:2> + <nat:1> * <var:m> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:r> = <var:m> /\ <var:f> = <nat:7> * <var:m> ^ <nat:2> + <nat:1> * <var:m> + <nat:9> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 