\begin{document} \begin{theorem} Take the following series of commands such that \begin{verbatim} <var:Z0> := <nat:5> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:d> ; <var:Q> := <var:Z1> ; <var:Q> := <var:Q> + <var:Z0> \end{verbatim} Assume it to hold that $ <var:d> = <var:X> $ --- given any positive coefficients $ <var:X> $ --- ahead of evaluating the list of commands then we have $ <var:Q> = <nat:8> \times <var:X> + <nat:5> $ . \end{theorem} \begin{proof} Demonstrating correctness of our code is clear with the following decorated set of commands . \begin{eqnarray} \{ <var:d> = <var:X> \} \\ <var:Z0> := <nat:5> ; \\ \{ <var:d> = <var:X> \land <var:Z0> = <nat:5> \} \\ <var:Z1> := <nat:8> ; \\ \{ <var:d> = <var:X> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:8> \} \end{eqnarray} Allowing running the series of instructions results in : \begin{eqnarray} <var:Z1> := <var:Z1> * <var:d> ; \\ \{ <var:d> = <var:X> \land <var:Z0> = <nat:5> \land <var:Z1> = <nat:8> * <var:X> \} \\ <var:Q> := <var:Z1> ; \\ \{ <var:d> = <var:X> \land <var:Z0> = <nat:5> \land <var:Q> = <nat:8> * <var:X> \} \\ <var:Q> := <var:Q> + <var:Z0> \\ \{ <var:d> = <var:X> \land <var:Q> = <nat:8> * <var:X> + <nat:5> \} \end{eqnarray} Using typical Hoare logic ends the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:Z0> : string := " <var:Z0> " . Definition <var:Z1> : string := " <var:Z1> " . Theorem <genH:poly_code_correct> : forall <var:X> : nat , {{ <var:d> = <var:X> }} <var:Z0> := <nat:5> ; <var:Z1> := <nat:8> ; <var:Z1> := <var:Z1> * <var:d> ; <var:Q> := <var:Z1> ; <var:Q> := <var:Q> + <var:Z0> {{ <var:Q> = <nat:8> * <var:X> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Z0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:8> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Z0> = <nat:5> /\ <var:Z1> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Z0> = <nat:5> /\ <var:Q> = <nat:8> * <var:X> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:X> /\ <var:Q> = <nat:8> * <var:X> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 