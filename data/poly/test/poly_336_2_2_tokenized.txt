\begin{document} \begin{theorem} Let the following series of instructions as \begin{verbatim} <var:u> := <nat:4> ; <var:u> := <nat:2> + <var:u> * <var:k> \end{verbatim} Allowing $ <var:k> = <var:Y> $ prior to evaluating our set of commands then $ <var:u> = <nat:4> * <var:Y> + <nat:2> $ after series of commands is done executing . \end{theorem} \begin{proof} Utilizing typical Hoare reasoning results in : \begin{eqnarray} \{ <var:k> = <var:Y> \} \\ <var:u> := <nat:4> ; \\ \{ <var:k> = <var:Y> \land <var:u> = <nat:4> \} \\ <var:u> := <nat:2> + <var:u> * <var:k> \\ \{ <var:k> = <var:Y> \land <var:u> = <nat:4> \cdot <var:Y> + <nat:2> \} \end{eqnarray} Given the preceding argument , our set of commands has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Y> : nat , {{ <var:k> = <var:Y> }} <var:u> := <nat:4> ; <var:u> := <nat:2> + <var:u> * <var:k> {{ <var:u> = <nat:4> * <var:Y> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:u> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:Y> /\ <var:u> = <nat:4> * <var:Y> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 