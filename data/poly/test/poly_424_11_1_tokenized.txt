\begin{document} \begin{definition} We define the following list of commands <def:poly> in \emph{Imp} : \begin{verbatim} <var:y1> := <var:T> ; <var:y2> := <var:y1> * <var:T> ; <var:y3> := <var:y2> * <var:T> ; <var:y0> := <nat:3> ; <var:y1> := <var:y1> * <nat:4> ; <var:y2> := <var:y2> * <nat:6> ; <var:y3> := <var:y3> * <nat:5> ; <var:D> := <var:y3> <var:D> := <var:D> + <var:y2> <var:D> := <var:D> + <var:y1> <var:D> := <var:D> + <var:y0> \end{verbatim} \end{definition} \begin{theorem} Assume --- given any natural numbers $ <var:S> $ --- it to be that $ <var:T> = <var:S> $ ahead of running this code segment then we see $ <var:D> = <nat:5> \times <var:S> ^ <nat:3> + <nat:6> \times <var:S> ^ <nat:2> + <nat:4> \times <var:S> + <nat:3> $ . \end{theorem} \begin{proof} The argument for this code segment is done with standard Hoare reasoning . Further , \begin{eqnarray} \{ <var:T> = <var:S> \} \, <var:y1> := <var:T> \, \{ <var:T> = <var:S> \land <var:y1> = <var:S> \} \\ \{ <var:T> = <var:S> \land <var:y1> = <var:S> \} \, <var:y2> := <var:y1> * <var:T> \, \{ <var:T> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \} \\ \{ <var:T> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \} \, <var:y3> := <var:y2> * <var:T> \, \{ <var:T> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \} \\ \{ <var:T> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \} \, <var:y0> := <nat:3> \, \{ <var:T> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y0> = <nat:3> \} \\ \{ <var:T> = <var:S> \land <var:y1> = <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y0> = <nat:3> \} \, <var:y1> := <var:y1> * <nat:4> \, \{ <var:T> = <var:S> \land <var:y1> = <nat:4> \cdot <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y0> = <nat:3> \} \\ \{ <var:T> = <var:S> \land <var:y1> = <nat:4> \cdot <var:S> \land <var:y2> = <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y0> = <nat:3> \} \, <var:y2> := <var:y2> * <nat:6> \, \{ <var:T> = <var:S> \land <var:y1> = <nat:4> \cdot <var:S> \land <var:y2> = <nat:6> \cdot <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y0> = <nat:3> \} \\ \{ <var:T> = <var:S> \land <var:y1> = <nat:4> \cdot <var:S> \land <var:y2> = <nat:6> \cdot <var:S> ^ <nat:2> \land <var:y3> = <var:S> ^ <nat:3> \land <var:y0> = <nat:3> \} \, <var:y3> := <var:y3> * <nat:5> \, \{ <var:T> = <var:S> \land <var:y1> = <nat:4> \cdot <var:S> \land <var:y2> = <nat:6> \cdot <var:S> ^ <nat:2> \land <var:y3> = <nat:5> \cdot <var:S> ^ <nat:3> \land <var:y0> = <nat:3> \} \\ \{ <var:T> = <var:S> \land <var:y1> = <nat:4> \cdot <var:S> \land <var:y2> = <nat:6> \cdot <var:S> ^ <nat:2> \land <var:y3> = <nat:5> \cdot <var:S> ^ <nat:3> \land <var:y0> = <nat:3> \} \, <var:D> := <var:y3\, \{ <var:T> = <var:S> \land <var:y1> = <nat:4> \cdot <var:S> \land <var:y2> = <nat:6> \cdot <var:S> ^ <nat:2> \land <var:y0> = <nat:3> \land <var:D> = <nat:5> \cdot <var:S> ^ <nat:3> \} \\ \{ <var:T> = <var:S> \land <var:y1> = <nat:4> \cdot <var:S> \land <var:y2> = <nat:6> \cdot <var:S> ^ <nat:2> \land <var:y0> = <nat:3> \land <var:D> = <nat:5> \cdot <var:S> ^ <nat:3> \} \, <var:D> := <var:D> + <var:y2\, \{ <var:T> = <var:S> \land <var:y1> = <nat:4> \cdot <var:S> \land <var:y0> = <nat:3> \land <var:D> = <nat:5> \cdot <var:S> ^ <nat:3> + <nat:6> \cdot <var:S> ^ <nat:2> \} \end{eqnarray} Looking at the subsequent bit of code found in our set of instructions , we see \begin{eqnarray} \{ <var:T> = <var:S> \} \, <var:y1> := <var:T> \, \{ <var:T> = <var:S> \land <var:y1> = <var:S> \} \end{eqnarray} This is given by the variable assignmet law obtained from usual Hoare reasoning . Now , \begin{eqnarray} \{ <var:T> = <var:S> \} \, <var:y1> := <var:T> \, \{ <var:T> = <var:S> \land <var:y1> = <var:S> \} \end{eqnarray} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:y0> : string := " <var:y0> " . Definition <var:y1> : string := " <var:y1> " . Definition <var:y2> : string := " <var:y2> " . Definition <var:y3> : string := " <var:y3> " . Definition <def:poly> := <var:y1> := <var:T> ; <var:y2> := <var:y1> * <var:T> ; <var:y3> := <var:y2> * <var:T> ; <var:y0> := <nat:3> ; <var:y1> := <var:y1> * <nat:4> ; <var:y2> := <var:y2> * <nat:6> ; <var:y3> := <var:y3> * <nat:5> ; <var:D> := <var:y3> <var:D> := <var:D> + <var:y2> <var:D> := <var:D> + <var:y1> <var:D> := <var:D> + <var:y0> . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:T> = <var:S> }} <def:poly> {{ <var:D> = <nat:5> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:y1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:y1> = <var:S> /\ <var:y2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:y1> = <var:S> /\ <var:y2> = <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:y1> = <var:S> /\ <var:y2> = <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:y1> = <nat:4> * <var:S> /\ <var:y2> = <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:y1> = <nat:4> * <var:S> /\ <var:y2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:y3> = <var:S> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:y1> = <nat:4> * <var:S> /\ <var:y2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:y3> = <nat:5> * <var:S> ^ <nat:3> /\ <var:y0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:y1> = <nat:4> * <var:S> /\ <var:y2> = <nat:6> * <var:S> ^ <nat:2> /\ <var:y0> = <nat:3> /\ <var:D> = <nat:5> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:y1> = <nat:4> * <var:S> /\ <var:y0> = <nat:3> /\ <var:D> = <nat:5> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:y0> = <nat:3> /\ <var:D> = <nat:5> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> + <nat:4> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:S> /\ <var:D> = <nat:5> * <var:S> ^ <nat:3> + <nat:6> * <var:S> ^ <nat:2> + <nat:4> * <var:S> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 