\begin{document} \begin{theorem} We define a program in \emph{Imp} : \begin{verbatim} <var:i1> := <var:k> ; <var:i2> := <var:i1> * <var:k> ; <var:i0> := <nat:7> ; <var:i1> := <var:i1> * <nat:8> ; <var:i2> := <var:i2> * <nat:7> ; <var:o> := <var:i2> <var:o> := <var:o> + <var:i1> <var:o> := <var:o> + <var:i0> \end{verbatim} Given , given all $ <var:H> $ , that $ <var:k> = <var:H> $ prior to the execution of the list of commands it follows that we see $ <var:o> = <nat:7> \times <var:H> ^ <nat:2> + <nat:8> \times <var:H> + <nat:7> $ . \end{theorem} \begin{proof} \begin{eqnarray} \{ <var:k> = <var:H> \} \\ <var:i1> := <var:k> ; \\ \{ <var:k> = <var:H> \land <var:i1> = <var:H> \} \\ <var:i2> := <var:i1> * <var:k> ; \\ \{ <var:k> = <var:H> \land <var:i1> = <var:H> \land <var:i2> = <var:H> ^ <nat:2> \} \\ <var:i0> := <nat:7> ; \\ \{ <var:k> = <var:H> \land <var:i1> = <var:H> \land <var:i2> = <var:H> ^ <nat:2> \land <var:i0> = <nat:7> \} \\ <var:i1> := <var:i1> * <nat:8> ; \\ \{ <var:k> = <var:H> \land <var:i1> = <nat:8> \times <var:H> \land <var:i2> = <var:H> ^ <nat:2> \land <var:i0> = <nat:7> \} \\ <var:i2> := <var:i2> * <nat:7> ; \\ \{ <var:k> = <var:H> \land <var:i1> = <nat:8> \times <var:H> \land <var:i2> = <nat:7> \times <var:H> ^ <nat:2> \land <var:i0> = <nat:7> \} \\ <var:o> := <var:i2> \\ \{ <var:k> = <var:H> \land <var:i1> = <nat:8> \times <var:H> \land <var:i0> = <nat:7> \land <var:o> = <nat:7> \times <var:H> ^ <nat:2> \} \\ <var:o> := <var:o> + <var:i1> \\ \{ <var:k> = <var:H> \land <var:i0> = <nat:7> \land <var:o> = <nat:7> \times <var:H> ^ <nat:2> + <nat:8> \times <var:H> \} \end{eqnarray} Continuing executing the list of instructions gives : \begin{eqnarray} <var:o> := <var:o> + <var:i0> \\ \{ <var:k> = <var:H> \land <var:o> = <nat:7> \times <var:H> ^ <nat:2> + <nat:8> \times <var:H> + <nat:7> \} \end{eqnarray} The application of standard Hoare logic completes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:i0> : string := " <var:i0> " . Definition <var:i1> : string := " <var:i1> " . Definition <var:i2> : string := " <var:i2> " . Theorem <genH:poly_code_correct> : forall <var:H> : nat , {{ <var:k> = <var:H> }} <var:i1> := <var:k> ; <var:i2> := <var:i1> * <var:k> ; <var:i0> := <nat:7> ; <var:i1> := <var:i1> * <nat:8> ; <var:i2> := <var:i2> * <nat:7> ; <var:o> := <var:i2> <var:o> := <var:o> + <var:i1> <var:o> := <var:o> + <var:i0> {{ <var:o> = <nat:7> * <var:H> ^ <nat:2> + <nat:8> * <var:H> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:i1> = <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:i1> = <var:H> /\ <var:i2> = <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:i1> = <var:H> /\ <var:i2> = <var:H> ^ <nat:2> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:i1> = <nat:8> * <var:H> /\ <var:i2> = <var:H> ^ <nat:2> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:i1> = <nat:8> * <var:H> /\ <var:i2> = <nat:7> * <var:H> ^ <nat:2> /\ <var:i0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:i1> = <nat:8> * <var:H> /\ <var:i0> = <nat:7> /\ <var:o> = <nat:7> * <var:H> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:i0> = <nat:7> /\ <var:o> = <nat:7> * <var:H> ^ <nat:2> + <nat:8> * <var:H> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:k> = <var:H> /\ <var:o> = <nat:7> * <var:H> ^ <nat:2> + <nat:8> * <var:H> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 