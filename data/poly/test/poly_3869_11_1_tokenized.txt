\begin{document} \begin{theorem} Take a series of instructions such that \begin{verbatim} <var:b1> := <var:P> ; <var:b2> := <var:b1> * <var:P> ; <var:b3> := <var:b2> * <var:P> ; <var:b0> := <nat:5> ; <var:b1> := <var:b1> * <nat:8> ; <var:b2> := <var:b2> * <nat:2> ; <var:b3> := <var:b3> * <nat:2> ; <var:M> := <var:b3> <var:M> := <var:M> + <var:b2> <var:M> := <var:M> + <var:b1> <var:M> := <var:M> + <var:b0> \end{verbatim} Allowing , letting positive coefficients $ <var:i> $ , $ <var:P> = <var:i> $ before the execution of the segment of code , it must be that we have $ <var:M> = <nat:2> \times <var:i> ^ <nat:3> + <nat:2> \times <var:i> ^ <nat:2> + <nat:8> \times <var:i> + <nat:5> $ . \end{theorem} \begin{proof} Proving correctness for the set of commands is done through standard Hoare logic . Focusing on the following piece of code contained in the list of commands , we see the command \verb | <var:b1> := <var:P> ; | . This moves the condition $ \{ <var:P> = <var:i> \} $ as the postcondition $ \{ <var:P> = <var:i> \land <var:b1> = <var:i> \} $ . This is deduced with the assignment scheme found in typical Hoare reasoning . Shifting focus toward the next bit of code contained in our set of commands , the command \verb | <var:b2> := <var:b1> * <var:P> ; | . This line forwards $ \{ <var:P> = <var:i> \land <var:b1> = <var:i> \} $ into $ \{ <var:P> = <var:i> \land <var:b1> = <var:i> \land <var:b2> = <var:i> ^ <nat:2> \} $ . This is shown to be logically sound through the assignment scheme in Hoare logic . Moving forward to the next step , we have the variable update command \verb | <var:b3> := <var:b2> * <var:P> ; | . This transfers the precondition $ \{ <var:P> = <var:i> \land <var:b1> = <var:i> \land <var:b2> = <var:i> ^ <nat:2> \} $ to the condition $ \{ <var:P> = <var:i> \land <var:b1> = <var:i> \land <var:b2> = <var:i> ^ <nat:2> \land <var:b3> = <var:i> ^ <nat:3> \} $ . Moving forward , we see the variable update statement giving $ <nat:5> $ as $ <var:b0>$ . This command redefines the precondition $ \{ <var:P> = <var:i> \land <var:b1> = <var:i> \land <var:b2> = <var:i> ^ <nat:2> \land <var:b3> = <var:i> ^ <nat:3> \} $ toward the postcondition $ \{ <var:P> = <var:i> \land <var:b1> = <var:i> \land <var:b2> = <var:i> ^ <nat:2> \land <var:b3> = <var:i> ^ <nat:3> \land <var:b0> = <nat:5> \} $ . Paying attention to the proceeding line of code found in the code , we see the variable binding code yielding $ <var:b1> * <nat:8> $ as $ <var:b1>$ . This transfers $ \{ <var:P> = <var:i> \land <var:b1> = <var:i> \land <var:b2> = <var:i> ^ <nat:2> \land <var:b3> = <var:i> ^ <nat:3> \land <var:b0> = <nat:5> \} $ as $ \{ <var:P> = <var:i> \land <var:b1> = <nat:8> \times <var:i> \land <var:b2> = <var:i> ^ <nat:2> \land <var:b3> = <var:i> ^ <nat:3> \land <var:b0> = <nat:5> \} $ . Considering the subsequent step contained in the code segment , the assignment statement \verb | <var:b2> := <var:b2> * <nat:2> ; | . This moves $ \{ <var:P> = <var:i> \land <var:b1> = <nat:8> \times <var:i> \land <var:b2> = <var:i> ^ <nat:2> \land <var:b3> = <var:i> ^ <nat:3> \land <var:b0> = <nat:5> \} $ toward the postcondition $ \{ <var:P> = <var:i> \land <var:b1> = <nat:8> \times <var:i> \land <var:b2> = <nat:2> \times <var:i> ^ <nat:2> \land <var:b3> = <var:i> ^ <nat:3> \land <var:b0> = <nat:5> \} $ . This is given by the assignment law defined in typical Hoare logic . Moving on , we see the binding command \verb | <var:b3> := <var:b3> * <nat:2> ; | . This forwards the condition $ \{ <var:P> = <var:i> \land <var:b1> = <nat:8> \times <var:i> \land <var:b2> = <nat:2> \times <var:i> ^ <nat:2> \land <var:b3> = <var:i> ^ <nat:3> \land <var:b0> = <nat:5> \} $ into the condition $ \{ <var:P> = <var:i> \land <var:b1> = <nat:8> \times <var:i> \land <var:b2> = <nat:2> \times <var:i> ^ <nat:2> \land <var:b3> = <nat:2> \times <var:i> ^ <nat:3> \land <var:b0> = <nat:5> \} $ . This is shown with the assignment rule defined by typical Hoare logic . Moving forward to the upcoming bit of code contained in the set of instructions , we have the binding code binding $ <var:b3$ into $ <var:M>$ . This command takes $ \{ <var:P> = <var:i> \land <var:b1> = <nat:8> \times <var:i> \land <var:b2> = <nat:2> \times <var:i> ^ <nat:2> \land <var:b3> = <nat:2> \times <var:i> ^ <nat:3> \land <var:b0> = <nat:5> \} $ into the condition $ \{ <var:P> = <var:i> \land <var:b1> = <nat:8> \times <var:i> \land <var:b2> = <nat:2> \times <var:i> ^ <nat:2> \land <var:b0> = <nat:5> \land <var:M> = <nat:2> \times <var:i> ^ <nat:3> \} $ . This is deduced using the assignment law obtained from typical Hoare logic . Observing the proceeding command found in our set of commands , we have the environment update code yielding $ <var:M> + <var:b2$ into $ <var:M>$ . This line redefines $ \{ <var:P> = <var:i> \land <var:b1> = <nat:8> \times <var:i> \land <var:b2> = <nat:2> \times <var:i> ^ <nat:2> \land <var:b0> = <nat:5> \land <var:M> = <nat:2> \times <var:i> ^ <nat:3> \} $ to $ \{ <var:P> = <var:i> \land <var:b1> = <nat:8> \times <var:i> \land <var:b0> = <nat:5> \land <var:M> = <nat:2> \times <var:i> ^ <nat:3> + <nat:2> \times <var:i> ^ <nat:2> \} $ . Moving forward to the next step , we have the assignment command \verb | <var:M> := <var:M> + <var:b1> | . This redefines $ \{ <var:P> = <var:i> \land <var:b1> = <nat:8> \times <var:i> \land <var:b0> = <nat:5> \land <var:M> = <nat:2> \times <var:i> ^ <nat:3> + <nat:2> \times <var:i> ^ <nat:2> \} $ into $ \{ <var:P> = <var:i> \land <var:b0> = <nat:5> \land <var:M> = <nat:2> \times <var:i> ^ <nat:3> + <nat:2> \times <var:i> ^ <nat:2> + <nat:8> \times <var:i> \} $ . Moving on to the next step , the binding line letting $ <var:M> + <var:b0$ toward $ <var:M>$ . This code advances the condition $ \{ <var:P> = <var:i> \land <var:b0> = <nat:5> \land <var:M> = <nat:2> \times <var:i> ^ <nat:3> + <nat:2> \times <var:i> ^ <nat:2> + <nat:8> \times <var:i> \} $ toward $ \{ <var:P> = <var:i> \land <var:M> = <nat:2> \times <var:i> ^ <nat:3> + <nat:2> \times <var:i> ^ <nat:2> + <nat:8> \times <var:i> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:b0> : string := " <var:b0> " . Definition <var:b1> : string := " <var:b1> " . Definition <var:b2> : string := " <var:b2> " . Definition <var:b3> : string := " <var:b3> " . Theorem <genH:poly_code_correct> : forall <var:i> : nat , {{ <var:P> = <var:i> }} <var:b1> := <var:P> ; <var:b2> := <var:b1> * <var:P> ; <var:b3> := <var:b2> * <var:P> ; <var:b0> := <nat:5> ; <var:b1> := <var:b1> * <nat:8> ; <var:b2> := <var:b2> * <nat:2> ; <var:b3> := <var:b3> * <nat:2> ; <var:M> := <var:b3> <var:M> := <var:M> + <var:b2> <var:M> := <var:M> + <var:b1> <var:M> := <var:M> + <var:b0> {{ <var:M> = <nat:2> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:8> * <var:i> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:b1> = <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:b1> = <var:i> /\ <var:b2> = <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:b1> = <var:i> /\ <var:b2> = <var:i> ^ <nat:2> /\ <var:b3> = <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:b1> = <var:i> /\ <var:b2> = <var:i> ^ <nat:2> /\ <var:b3> = <var:i> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:b1> = <nat:8> * <var:i> /\ <var:b2> = <var:i> ^ <nat:2> /\ <var:b3> = <var:i> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:b1> = <nat:8> * <var:i> /\ <var:b2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:b3> = <var:i> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:b1> = <nat:8> * <var:i> /\ <var:b2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:b3> = <nat:2> * <var:i> ^ <nat:3> /\ <var:b0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:b1> = <nat:8> * <var:i> /\ <var:b2> = <nat:2> * <var:i> ^ <nat:2> /\ <var:b0> = <nat:5> /\ <var:M> = <nat:2> * <var:i> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:b1> = <nat:8> * <var:i> /\ <var:b0> = <nat:5> /\ <var:M> = <nat:2> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:b0> = <nat:5> /\ <var:M> = <nat:2> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:8> * <var:i> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:P> = <var:i> /\ <var:M> = <nat:2> * <var:i> ^ <nat:3> + <nat:2> * <var:i> ^ <nat:2> + <nat:8> * <var:i> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 