\begin{document} \begin{definition} Take a list of commands <def:poly> in \emph{Imp} as \begin{verbatim} <var:N0> := <nat:4> ; <var:m> := <var:N0> \end{verbatim} \end{definition} \begin{theorem} Assuming that we have $ <var:b> = <var:q> $ given all positive integers $ <var:q> $ ahead of running this list of instructions , it holds that we have $ <var:m> = <nat:4> $ . \end{theorem} \begin{proof} The application of typical Hoare reasoning yields : \begin{eqnarray} \{ <var:b> = <var:q> \} \\ <var:N0> := <nat:4> ; \\ \{ <var:b> = <var:q> \land <var:N0> = <nat:4> \} \\ <var:m> := <var:N0> \\ \{ <var:b> = <var:q> \land <var:m> = <nat:4> \} \end{eqnarray} Thus , this program has been demonstrated to be correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:N0> : string := " <var:N0> " . Definition <def:poly> := <var:N0> := <nat:4> ; <var:m> := <var:N0> . Theorem <genH:poly_code_correct> : forall <var:q> : nat , {{ <var:b> = <var:q> }} <def:poly> {{ <var:m> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:N0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:b> = <var:q> /\ <var:m> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 