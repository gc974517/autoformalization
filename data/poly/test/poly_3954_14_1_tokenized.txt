\begin{document} \begin{theorem} We define a list of instructions such that \begin{verbatim} <var:k1> := <var:x> ; <var:k2> := <var:k1> * <var:x> ; <var:k3> := <var:k2> * <var:x> ; <var:k4> := <var:k3> * <var:x> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:4> ; <var:k4> := <var:k4> * <nat:2> ; <var:r> := <var:k4> <var:r> := <var:r> + <var:k3> <var:r> := <var:r> + <var:k2> <var:r> := <var:r> + <var:k1> <var:r> := <var:r> + <var:k0> \end{verbatim} Assume it to hold that $ <var:x> = <var:S> $ given positive integers $ <var:S> $ ahead of evaluating our set of commands it follows that $ <var:r> = <nat:2> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:2> $ after list of commands has terminated . \end{theorem} \begin{proof} The argument for this set of instructions can be given with standard Hoare techniques . Following , we see the variable assignmet statement yielding $ <var:x> $ toward $ <var:k1>$ . This line advances the precondition $ \{ <var:x> = <var:S> \} $ as the postcondition $ \{ <var:x> = <var:S> \land <var:k1> = <var:S> \} $ . This is guaranteed with the assignment law of standard Hoare reasoning . Advancing on , we have the statement binding $ <var:k1> * <var:x> $ to $ <var:k2>$ . This code transfers the precondition $ \{ <var:x> = <var:S> \land <var:k1> = <var:S> \} $ as the postcondition $ \{ <var:x> = <var:S> \land <var:k1> = <var:S> \land <var:k2> = <var:S> ^ <nat:2> \} $ . This is shown to be logically sound with the assignment scheme from standard Hoare techniques . Looking at the following step found in our segment of code , the variable update line \verb | <var:k3> := <var:k2> * <var:x> ; | . This redefines $ \{ <var:x> = <var:S> \land <var:k1> = <var:S> \land <var:k2> = <var:S> ^ <nat:2> \} $ toward $ \{ <var:x> = <var:S> \land <var:k1> = <var:S> \land <var:k2> = <var:S> ^ <nat:2> \land <var:k3> = <var:S> ^ <nat:3> \} $ . Moving forward to the next step , we see the variable assignmet line letting $ <var:k3> * <var:x> $ toward $ <var:k4>$ . This redefines the condition $ \{ <var:x> = <var:S> \land <var:k1> = <var:S> \land <var:k2> = <var:S> ^ <nat:2> \land <var:k3> = <var:S> ^ <nat:3> \} $ toward $ \{ <var:x> = <var:S> \land <var:k1> = <var:S> \land <var:k2> = <var:S> ^ <nat:2> \land <var:k3> = <var:S> ^ <nat:3> \land <var:k4> = <var:S> ^ <nat:4> \} $ . Taking another step toward the upcoming line of code found in our code , we have the variable update command assigning $ <nat:2> $ to $ <var:k0>$ . This code moves $ \{ <var:x> = <var:S> \land <var:k1> = <var:S> \land <var:k2> = <var:S> ^ <nat:2> \land <var:k3> = <var:S> ^ <nat:3> \land <var:k4> = <var:S> ^ <nat:4> \} $ into the postcondition $ \{ <var:x> = <var:S> \land <var:k1> = <var:S> \land <var:k2> = <var:S> ^ <nat:2> \land <var:k3> = <var:S> ^ <nat:3> \land <var:k4> = <var:S> ^ <nat:4> \land <var:k0> = <nat:2> \} $ . This is given by the assignment inference rule from typical Hoare techniques . Moving on , we see the variable assignmet code giving $ <var:k1> * <nat:3> $ into $ <var:k1>$ . This moves the condition $ \{ <var:x> = <var:S> \land <var:k1> = <var:S> \land <var:k2> = <var:S> ^ <nat:2> \land <var:k3> = <var:S> ^ <nat:3> \land <var:k4> = <var:S> ^ <nat:4> \land <var:k0> = <nat:2> \} $ as $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k2> = <var:S> ^ <nat:2> \land <var:k3> = <var:S> ^ <nat:3> \land <var:k4> = <var:S> ^ <nat:4> \land <var:k0> = <nat:2> \} $ . This is shown with the assignment inference rule from typical Hoare logic . Advancing to the subsequent statement found in the set of commands , we have the environment update statement \verb | <var:k2> := <var:k2> * <nat:3> ; | . This forwards $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k2> = <var:S> ^ <nat:2> \land <var:k3> = <var:S> ^ <nat:3> \land <var:k4> = <var:S> ^ <nat:4> \land <var:k0> = <nat:2> \} $ toward $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:k3> = <var:S> ^ <nat:3> \land <var:k4> = <var:S> ^ <nat:4> \land <var:k0> = <nat:2> \} $ . Moving on to the upcoming bit of code contained in our series of instructions , the variable assignmet line \verb | <var:k3> := <var:k3> * <nat:4> ; | . This line transfers $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:k3> = <var:S> ^ <nat:3> \land <var:k4> = <var:S> ^ <nat:4> \land <var:k0> = <nat:2> \} $ toward the postcondition $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:k3> = <nat:4> \times <var:S> ^ <nat:3> \land <var:k4> = <var:S> ^ <nat:4> \land <var:k0> = <nat:2> \} $ . This is known to be sound through the assignment law obtained from typical Hoare reasoning . Following , we have the variable binding command letting $ <var:k4> * <nat:2> $ toward $ <var:k4>$ . This line redefines $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:k3> = <nat:4> \times <var:S> ^ <nat:3> \land <var:k4> = <var:S> ^ <nat:4> \land <var:k0> = <nat:2> \} $ into the postcondition $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:k3> = <nat:4> \times <var:S> ^ <nat:3> \land <var:k4> = <nat:2> \times <var:S> ^ <nat:4> \land <var:k0> = <nat:2> \} $ . Immediately after , we have the environment update code binding $ <var:k4$ toward $ <var:r>$ . This advances $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:k3> = <nat:4> \times <var:S> ^ <nat:3> \land <var:k4> = <nat:2> \times <var:S> ^ <nat:4> \land <var:k0> = <nat:2> \} $ to the postcondition $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:k3> = <nat:4> \times <var:S> ^ <nat:3> \land <var:k0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> \} $ . Moving onward , the variable assignmet statement \verb | <var:r> := <var:r> + <var:k3> | . This advances the condition $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:k3> = <nat:4> \times <var:S> ^ <nat:3> \land <var:k0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> \} $ into the postcondition $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:k0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> \} $ . Observing the following statement seen in the set of commands , we have the variable update line \verb | <var:r> := <var:r> + <var:k2> | . This code forwards the precondition $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k2> = <nat:3> \times <var:S> ^ <nat:2> \land <var:k0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> \} $ as $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> \} $ . This is ensured with the assignment law defined in usual Hoare reasoning . Moving forward to the next step , the assignment code letting $ <var:r> + <var:k1$ toward $ <var:r>$ . This transfers the precondition $ \{ <var:x> = <var:S> \land <var:k1> = <nat:3> \times <var:S> \land <var:k0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> \} $ into the postcondition $ \{ <var:x> = <var:S> \land <var:k0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> \} $ . Jumping to the following statement contained in our segment of code , we see the variable binding code giving $ <var:r> + <var:k0$ into $ <var:r>$ . This transfers the precondition $ \{ <var:x> = <var:S> \land <var:k0> = <nat:2> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> \} $ toward the postcondition $ \{ <var:x> = <var:S> \land <var:r> = <nat:2> \times <var:S> ^ <nat:4> + <nat:4> \times <var:S> ^ <nat:3> + <nat:3> \times <var:S> ^ <nat:2> + <nat:3> \times <var:S> + <nat:2> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:k0> : string := " <var:k0> " . Definition <var:k1> : string := " <var:k1> " . Definition <var:k2> : string := " <var:k2> " . Definition <var:k3> : string := " <var:k3> " . Definition <var:k4> : string := " <var:k4> " . Theorem <genH:poly_code_correct> : forall <var:S> : nat , {{ <var:x> = <var:S> }} <var:k1> := <var:x> ; <var:k2> := <var:k1> * <var:x> ; <var:k3> := <var:k2> * <var:x> ; <var:k4> := <var:k3> * <var:x> ; <var:k0> := <nat:2> ; <var:k1> := <var:k1> * <nat:3> ; <var:k2> := <var:k2> * <nat:3> ; <var:k3> := <var:k3> * <nat:4> ; <var:k4> := <var:k4> * <nat:2> ; <var:r> := <var:k4> <var:r> := <var:r> + <var:k3> <var:r> := <var:r> + <var:k2> <var:r> := <var:r> + <var:k1> <var:r> := <var:r> + <var:k0> {{ <var:r> = <nat:2> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:k1> = <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:k1> = <var:S> /\ <var:k2> = <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:k1> = <var:S> /\ <var:k2> = <var:S> ^ <nat:2> /\ <var:k3> = <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:k1> = <var:S> /\ <var:k2> = <var:S> ^ <nat:2> /\ <var:k3> = <var:S> ^ <nat:3> /\ <var:k4> = <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:k1> = <var:S> /\ <var:k2> = <var:S> ^ <nat:2> /\ <var:k3> = <var:S> ^ <nat:3> /\ <var:k4> = <var:S> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:k1> = <nat:3> * <var:S> /\ <var:k2> = <var:S> ^ <nat:2> /\ <var:k3> = <var:S> ^ <nat:3> /\ <var:k4> = <var:S> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:k1> = <nat:3> * <var:S> /\ <var:k2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:k3> = <var:S> ^ <nat:3> /\ <var:k4> = <var:S> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:k1> = <nat:3> * <var:S> /\ <var:k2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:k3> = <nat:4> * <var:S> ^ <nat:3> /\ <var:k4> = <var:S> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:k1> = <nat:3> * <var:S> /\ <var:k2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:k3> = <nat:4> * <var:S> ^ <nat:3> /\ <var:k4> = <nat:2> * <var:S> ^ <nat:4> /\ <var:k0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:k1> = <nat:3> * <var:S> /\ <var:k2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:k3> = <nat:4> * <var:S> ^ <nat:3> /\ <var:k0> = <nat:2> /\ <var:r> = <nat:2> * <var:S> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:k1> = <nat:3> * <var:S> /\ <var:k2> = <nat:3> * <var:S> ^ <nat:2> /\ <var:k0> = <nat:2> /\ <var:r> = <nat:2> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:k1> = <nat:3> * <var:S> /\ <var:k0> = <nat:2> /\ <var:r> = <nat:2> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:k0> = <nat:2> /\ <var:r> = <nat:2> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:x> = <var:S> /\ <var:r> = <nat:2> * <var:S> ^ <nat:4> + <nat:4> * <var:S> ^ <nat:3> + <nat:3> * <var:S> ^ <nat:2> + <nat:3> * <var:S> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 