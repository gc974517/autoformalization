\begin{document} \begin{definition} Consider the following program <def:poly> in \emph{Imp} such that \begin{verbatim} <var:K> := <nat:4> ; <var:K> := <var:K> * <var:t> ; <var:K> := <nat:2> + <var:K> * <var:t> ; <var:K> := <nat:1> + <var:K> * <var:t> ; <var:K> := <nat:1> + <var:K> * <var:t> ; <var:K> := <nat:2> + <var:K> * <var:t> ; <var:K> := <nat:2> + <var:K> * <var:t> ; <var:K> := <nat:4> + <var:K> * <var:t> ; <var:K> := <nat:4> + <var:K> * <var:t> \end{verbatim} \end{definition} \begin{theorem} Define the following series of instructions <def:poly> . Assume $ <var:t> = <var:v> $ prior to the execution of this series of instructions then $ <var:K> = <nat:4> \times <var:v> ^ <nat:8> + <nat:2> \times <var:v> ^ <nat:6> + <nat:1> \times <var:v> ^ <nat:5> + <nat:1> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:4> $ . \end{theorem} \begin{proof} The flow of logic for the series of commands is accomplished using standard Hoare techniques . Next , the assignment command \verb | <var:K> := <nat:4> ; | . This moves the condition $ \{ <var:t> = <var:v> \} $ toward $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \} $ . Focusing on the proceeding piece of code in the list of instructions , we have the variable assignmet command \verb | <var:K> := <var:K> * <var:t> ; | . This statement forwards $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \} $ as $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> + \} $ . This is known to be sound using the assignment law defined in Hoare techniques . Stepping forward , we see the variable binding command binding $ <nat:2> + <var:K> * <var:t> $ as $ <var:K>$ . This redefines the precondition $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> + \} $ into $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> ^ <nat:2> + <nat:2> \} $ . Considering the next step found in our series of commands , we have the binding code giving $ <nat:1> + <var:K> * <var:t> $ to $ <var:K>$ . This advances the condition $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> ^ <nat:2> + <nat:2> \} $ toward the condition $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> + <nat:1> \} $ . This is given by the assignment inference rule in typical Hoare reasoning . Now , we see the variable binding command yielding $ <nat:1> + <var:K> * <var:t> $ into $ <var:K>$ . This takes the precondition $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> + <nat:1> \} $ into the condition $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:1> \} $ . Taking a look at the upcoming statement contained in our code , we have the variable update command giving $ <nat:2> + <var:K> * <var:t> $ to $ <var:K>$ . This statement moves the precondition $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:1> \} $ to the postcondition $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> ^ <nat:5> + <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:2> \} $ . Focusing on the upcoming piece of code seen in our code segment , the environment update line \verb | <var:K> := <nat:2> + <var:K> * <var:t> ; | . This redefines $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> ^ <nat:5> + <nat:2> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:1> \times <var:v> + <nat:2> \} $ to $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> ^ <nat:6> + <nat:2> \times <var:v> ^ <nat:4> + <nat:1> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:2> \} $ . This is sound using the assignment inference rule found in typical Hoare techniques . Immediately after , we have the variable binding command \verb | <var:K> := <nat:4> + <var:K> * <var:t> ; | . This command forwards the condition $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> ^ <nat:6> + <nat:2> \times <var:v> ^ <nat:4> + <nat:1> \times <var:v> ^ <nat:3> + <nat:1> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:2> \} $ into $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> ^ <nat:7> + <nat:2> \times <var:v> ^ <nat:5> + <nat:1> \times <var:v> ^ <nat:4> + <nat:1> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:4> \} $ . Considering the subsequent command contained in our code segment , the variable assignmet code \verb | <var:K> := <nat:4> + <var:K> * <var:t> | . This line redefines the condition $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> ^ <nat:7> + <nat:2> \times <var:v> ^ <nat:5> + <nat:1> \times <var:v> ^ <nat:4> + <nat:1> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:2> \times <var:v> + <nat:4> \} $ to $ \{ <var:t> = <var:v> \land <var:K> = <nat:4> \times <var:v> ^ <nat:8> + <nat:2> \times <var:v> ^ <nat:6> + <nat:1> \times <var:v> ^ <nat:5> + <nat:1> \times <var:v> ^ <nat:4> + <nat:2> \times <var:v> ^ <nat:3> + <nat:2> \times <var:v> ^ <nat:2> + <nat:4> \times <var:v> + <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:K> := <nat:4> ; <var:K> := <var:K> * <var:t> ; <var:K> := <nat:2> + <var:K> * <var:t> ; <var:K> := <nat:1> + <var:K> * <var:t> ; <var:K> := <nat:1> + <var:K> * <var:t> ; <var:K> := <nat:2> + <var:K> * <var:t> ; <var:K> := <nat:2> + <var:K> * <var:t> ; <var:K> := <nat:4> + <var:K> * <var:t> ; <var:K> := <nat:4> + <var:K> * <var:t> . Theorem <genH:poly_code_correct> : forall <var:v> : nat , {{ <var:t> = <var:v> }} <def:poly> {{ <var:K> = <nat:4> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:K> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:K> = <nat:4> * <var:v> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:K> = <nat:4> * <var:v> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:K> = <nat:4> * <var:v> ^ <nat:3> + <nat:2> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:K> = <nat:4> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:K> = <nat:4> * <var:v> ^ <nat:5> + <nat:2> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:1> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:K> = <nat:4> * <var:v> ^ <nat:6> + <nat:2> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:1> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:K> = <nat:4> * <var:v> ^ <nat:7> + <nat:2> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:1> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:2> * <var:v> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:t> = <var:v> /\ <var:K> = <nat:4> * <var:v> ^ <nat:8> + <nat:2> * <var:v> ^ <nat:6> + <nat:1> * <var:v> ^ <nat:5> + <nat:1> * <var:v> ^ <nat:4> + <nat:2> * <var:v> ^ <nat:3> + <nat:2> * <var:v> ^ <nat:2> + <nat:4> * <var:v> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 