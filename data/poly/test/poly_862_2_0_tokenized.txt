\begin{document} \begin{theorem} Define the following list of instructions in \emph{Imp} as \begin{verbatim} <var:r0> := <nat:2> ; <var:j> := <var:r0> \end{verbatim} Allowing it to hold that $ <var:T> = <var:Q> $ prior to the execution of this segment of code , it follows that $ <var:j> = <nat:2> $ . \end{theorem} \begin{proof} Let the following decorated series of instructions . \begin{eqnarray} \{ <var:T> = <var:Q> \} \\ <var:r0> := <nat:2> ; \\ \{ <var:T> = <var:Q> \land <var:r0> = <nat:2> \} \\ <var:j> := <var:r0> \\ \{ <var:T> = <var:Q> \land <var:j> = <nat:2> \} \end{eqnarray} Utilizing usual Hoare techniques completes the argument . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:r0> : string := " <var:r0> " . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:T> = <var:Q> }} <var:r0> := <nat:2> ; <var:j> := <var:r0> {{ <var:j> = <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:r0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:T> = <var:Q> /\ <var:j> = <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 