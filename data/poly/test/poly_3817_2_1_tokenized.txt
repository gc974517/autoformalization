\begin{document} \begin{theorem} We define a code in \emph{Imp} such that \begin{verbatim} <var:v0> := <nat:1> ; <var:I> := <var:v0> \end{verbatim} Allow that $ <var:z> = <var:e> $ prior to executing the series of instructions it holds that we have $ <var:I> = <nat:1> $ . \end{theorem} \begin{proof} The proof of our set of commands is demonstrated through standard Hoare reasoning . Further , we see \begin{eqnarray} \{ <var:z> = <var:e> \} \, <var:v0> := <nat:1> \, \{ <var:z> = <var:e> \land <var:v0> = <nat:1> \} \\ \{ <var:z> = <var:e> \land <var:v0> = <nat:1> \} \, <var:I> := <var:v0\, \{ <var:z> = <var:e> \land <var:I> = <nat:1> \} \end{eqnarray} This is given by the variable assignmet rule of standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:v0> : string := " <var:v0> " . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:z> = <var:e> }} <var:v0> := <nat:1> ; <var:I> := <var:v0> {{ <var:I> = <nat:1> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:z> = <var:e> /\ <var:v0> = <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:z> = <var:e> /\ <var:I> = <nat:1> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 