\begin{document} \begin{definition} We define the following code segment <def:poly> in \emph{Imp} : \begin{verbatim} <var:e0> := <nat:5> ; <var:t> := <var:e0> \end{verbatim} \end{definition} \begin{theorem} Assuming , given some positive integer coefficients $ <var:P> $ , it to hold that $ <var:a> = <var:P> $ prior to the evaluation of this code segment , it must be that we have $ <var:t> = <nat:5> $ . \end{theorem} \begin{proof} The proof of our series of commands can be done using Hoare logic . Now , we see the variable binding line \verb | <var:e0> := <nat:5> ; | . This code takes $ \{ <var:a> = <var:P> \} $ into $ \{ <var:a> = <var:P> \land <var:e0> = <nat:5> \} $ . Taking another step toward the next piece of code in our series of commands , we have the assignment command \verb | <var:t> := <var:e0> | . This command advances $ \{ <var:a> = <var:P> \land <var:e0> = <nat:5> \} $ toward the condition $ \{ <var:a> = <var:P> \land <var:t> = <nat:5> \} $ . This is shown to be logically sound through the assignment law found in standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <def:poly> := <var:e0> := <nat:5> ; <var:t> := <var:e0> . Theorem <genH:poly_code_correct> : forall <var:P> : nat , {{ <var:a> = <var:P> }} <def:poly> {{ <var:t> = <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:e0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:P> /\ <var:t> = <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 