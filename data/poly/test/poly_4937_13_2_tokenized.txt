\begin{document} \begin{theorem} Define the following code in \emph{Imp} : \begin{verbatim} <var:m> := <nat:2> ; <var:m> := <var:m> * <var:y> ; <var:m> := <nat:2> + <var:m> * <var:y> ; <var:m> := <nat:2> + <var:m> * <var:y> ; <var:m> := <nat:1> + <var:m> * <var:y> ; <var:m> := <nat:2> + <var:m> * <var:y> ; <var:m> := <nat:4> + <var:m> * <var:y> ; <var:m> := <nat:1> + <var:m> * <var:y> ; <var:m> := <nat:2> + <var:m> * <var:y> ; <var:m> := <nat:2> + <var:m> * <var:y> ; <var:m> := <nat:4> + <var:m> * <var:y> ; <var:m> := <nat:4> + <var:m> * <var:y> ; <var:m> := <nat:4> + <var:m> * <var:y> \end{verbatim} Given that we have $ <var:y> = <var:Q> $ before the execution of our set of commands it holds that $ <var:m> = <nat:2> \times <var:Q> ^ <nat:12> + <nat:2> \times <var:Q> ^ <nat:10> + <nat:2> \times <var:Q> ^ <nat:9> + <nat:1> \times <var:Q> ^ <nat:8> + <nat:2> \times <var:Q> ^ <nat:7> + <nat:4> \times <var:Q> ^ <nat:6> + <nat:1> \times <var:Q> ^ <nat:5> + <nat:2> \times <var:Q> ^ <nat:4> + <nat:2> \times <var:Q> ^ <nat:3> + <nat:4> \times <var:Q> ^ <nat:2> + <nat:4> \times <var:Q> + <nat:4> $ when series of instructions has terminated . \end{theorem} \begin{proof} Utilizing usual Hoare logic gives : \begin{eqnarray} \{ <var:y> = <var:Q> \} \\ <var:m> := <nat:2> ; \\ \{ <var:y> = <var:Q> \land <var:m> = <nat:2> \} \\ <var:m> := <var:m> * <var:y> ; \\ \{ <var:y> = <var:Q> \land <var:m> = <nat:2> \cdot <var:Q> + \} \\ <var:m> := <nat:2> + <var:m> * <var:y> ; \\ \{ <var:y> = <var:Q> \land <var:m> = <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:2> \} \\ <var:m> := <nat:2> + <var:m> * <var:y> ; \\ \{ <var:y> = <var:Q> \land <var:m> = <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> + <nat:2> \} \\ <var:m> := <nat:1> + <var:m> * <var:y> ; \\ \{ <var:y> = <var:Q> \land <var:m> = <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:1> \} \\ <var:m> := <nat:2> + <var:m> * <var:y> ; \\ \{ <var:y> = <var:Q> \land <var:m> = <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:2> \} \\ <var:m> := <nat:4> + <var:m> * <var:y> ; \\ \{ <var:y> = <var:Q> \land <var:m> = <nat:2> \cdot <var:Q> ^ <nat:6> + <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:4> \} \\ <var:m> := <nat:1> + <var:m> * <var:y> ; \\ \{ <var:y> = <var:Q> \land <var:m> = <nat:2> \cdot <var:Q> ^ <nat:7> + <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:1> \} \\ <var:m> := <nat:2> + <var:m> * <var:y> ; \\ \{ <var:y> = <var:Q> \land <var:m> = <nat:2> \cdot <var:Q> ^ <nat:8> + <nat:2> \cdot <var:Q> ^ <nat:6> + <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:1> \cdot <var:Q> + <nat:2> \} \\ <var:m> := <nat:2> + <var:m> * <var:y> ; \\ \{ <var:y> = <var:Q> \land <var:m> = <nat:2> \cdot <var:Q> ^ <nat:9> + <nat:2> \cdot <var:Q> ^ <nat:7> + <nat:2> \cdot <var:Q> ^ <nat:6> + <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:4> \cdot <var:Q> ^ <nat:3> + <nat:1> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:2> \} \\ <var:m> := <nat:4> + <var:m> * <var:y> ; \\ \{ <var:y> = <var:Q> \land <var:m> = <nat:2> \cdot <var:Q> ^ <nat:10> + <nat:2> \cdot <var:Q> ^ <nat:8> + <nat:2> \cdot <var:Q> ^ <nat:7> + <nat:1> \cdot <var:Q> ^ <nat:6> + <nat:2> \cdot <var:Q> ^ <nat:5> + <nat:4> \cdot <var:Q> ^ <nat:4> + <nat:1> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:2> \cdot <var:Q> + <nat:4> \} \\ <var:m> := <nat:4> + <var:m> * <var:y> ; \\ \{ <var:y> = <var:Q> \land <var:m> = <nat:2> \cdot <var:Q> ^ <nat:11> + <nat:2> \cdot <var:Q> ^ <nat:9> + <nat:2> \cdot <var:Q> ^ <nat:8> + <nat:1> \cdot <var:Q> ^ <nat:7> + <nat:2> \cdot <var:Q> ^ <nat:6> + <nat:4> \cdot <var:Q> ^ <nat:5> + <nat:1> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:2> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:4> \} \\ <var:m> := <nat:4> + <var:m> * <var:y> \\ \{ <var:y> = <var:Q> \land <var:m> = <nat:2> \cdot <var:Q> ^ <nat:12> + <nat:2> \cdot <var:Q> ^ <nat:10> + <nat:2> \cdot <var:Q> ^ <nat:9> + <nat:1> \cdot <var:Q> ^ <nat:8> + <nat:2> \cdot <var:Q> ^ <nat:7> + <nat:4> \cdot <var:Q> ^ <nat:6> + <nat:1> \cdot <var:Q> ^ <nat:5> + <nat:2> \cdot <var:Q> ^ <nat:4> + <nat:2> \cdot <var:Q> ^ <nat:3> + <nat:4> \cdot <var:Q> ^ <nat:2> + <nat:4> \cdot <var:Q> + <nat:4> \} \end{eqnarray} Considering the above , our set of instructions has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:Q> : nat , {{ <var:y> = <var:Q> }} <var:m> := <nat:2> ; <var:m> := <var:m> * <var:y> ; <var:m> := <nat:2> + <var:m> * <var:y> ; <var:m> := <nat:2> + <var:m> * <var:y> ; <var:m> := <nat:1> + <var:m> * <var:y> ; <var:m> := <nat:2> + <var:m> * <var:y> ; <var:m> := <nat:4> + <var:m> * <var:y> ; <var:m> := <nat:1> + <var:m> * <var:y> ; <var:m> := <nat:2> + <var:m> * <var:y> ; <var:m> := <nat:2> + <var:m> * <var:y> ; <var:m> := <nat:4> + <var:m> * <var:y> ; <var:m> := <nat:4> + <var:m> * <var:y> ; <var:m> := <nat:4> + <var:m> * <var:y> {{ <var:m> = <nat:2> * <var:Q> ^ <nat:12> + <nat:2> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:m> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:m> = <nat:2> * <var:Q> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:m> = <nat:2> * <var:Q> ^ <nat:2> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:m> = <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:m> = <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:m> = <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:m> = <nat:2> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:m> = <nat:2> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:1> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:m> = <nat:2> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:1> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:m> = <nat:2> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:4> * <var:Q> ^ <nat:3> + <nat:1> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:m> = <nat:2> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:1> * <var:Q> ^ <nat:6> + <nat:2> * <var:Q> ^ <nat:5> + <nat:4> * <var:Q> ^ <nat:4> + <nat:1> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:2> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:m> = <nat:2> * <var:Q> ^ <nat:11> + <nat:2> * <var:Q> ^ <nat:9> + <nat:2> * <var:Q> ^ <nat:8> + <nat:1> * <var:Q> ^ <nat:7> + <nat:2> * <var:Q> ^ <nat:6> + <nat:4> * <var:Q> ^ <nat:5> + <nat:1> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:2> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:Q> /\ <var:m> = <nat:2> * <var:Q> ^ <nat:12> + <nat:2> * <var:Q> ^ <nat:10> + <nat:2> * <var:Q> ^ <nat:9> + <nat:1> * <var:Q> ^ <nat:8> + <nat:2> * <var:Q> ^ <nat:7> + <nat:4> * <var:Q> ^ <nat:6> + <nat:1> * <var:Q> ^ <nat:5> + <nat:2> * <var:Q> ^ <nat:4> + <nat:2> * <var:Q> ^ <nat:3> + <nat:4> * <var:Q> ^ <nat:2> + <nat:4> * <var:Q> + <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 