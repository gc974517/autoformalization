\begin{document} \begin{definition} We define a set of instructions <def:poly> in \emph{Imp} such that \begin{verbatim} <var:e0> := <nat:7> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:d> ; <var:b> := <var:e1> ; <var:b> := <var:b> + <var:e0> \end{verbatim} \end{definition} \begin{theorem} Consider a segment of code <def:poly> in \emph{Imp} . Given that $ <var:d> = <var:t> $ prior to the execution of our set of commands then we have $ <var:b> = <nat:3> * <var:t> + <nat:7> $ . \end{theorem} \begin{proof} Proving correctness for this list of instructions is given through standard Hoare logic . Stepping forward , we see the environment update code yielding $ <nat:7> $ toward $ <var:e0>$ . This command moves the condition $ \{ <var:d> = <var:t> \} $ to the condition $ \{ <var:d> = <var:t> \land <var:e0> = <nat:7> \} $ . Taking a look at the upcoming line of code seen in the list of instructions , we have the variable update line yielding $ <nat:3> $ to $ <var:e1>$ . This moves $ \{ <var:d> = <var:t> \land <var:e0> = <nat:7> \} $ to the condition $ \{ <var:d> = <var:t> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> \} $ . This is ensured with the assignment scheme obtained from usual Hoare logic . Looking at the following command found in our program , we see the environment update code defining $ <var:e1> * <var:d> $ into $ <var:e1>$ . This statement transfers the precondition $ \{ <var:d> = <var:t> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> \} $ into the condition $ \{ <var:d> = <var:t> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> \times <var:t> \} $ . Advancing , the binding code assigning $ <var:e1> $ to $ <var:b>$ . This advances the condition $ \{ <var:d> = <var:t> \land <var:e0> = <nat:7> \land <var:e1> = <nat:3> \times <var:t> \} $ to the condition $ \{ <var:d> = <var:t> \land <var:e0> = <nat:7> \land <var:b> = <nat:3> \times <var:t> \} $ . This is ensured with the assignment law from standard Hoare logic . Moving forward to the next step , we see the binding line assigning $ <var:b> + <var:e0$ into $ <var:b>$ . This statement transfers $ \{ <var:d> = <var:t> \land <var:e0> = <nat:7> \land <var:b> = <nat:3> \times <var:t> \} $ into the postcondition $ \{ <var:d> = <var:t> \land <var:b> = <nat:3> \times <var:t> + <nat:7> \} $ . This is ensured with the assignment law defined by standard Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:e0> : string := " <var:e0> " . Definition <var:e1> : string := " <var:e1> " . Definition <def:poly> := <var:e0> := <nat:7> ; <var:e1> := <nat:3> ; <var:e1> := <var:e1> * <var:d> ; <var:b> := <var:e1> ; <var:b> := <var:b> + <var:e0> . Theorem <genH:poly_code_correct> : forall <var:t> : nat , {{ <var:d> = <var:t> }} <def:poly> {{ <var:b> = <nat:3> * <var:t> + <nat:7> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:e0> = <nat:7> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:e0> = <nat:7> /\ <var:e1> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:e0> = <nat:7> /\ <var:b> = <nat:3> * <var:t> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:t> /\ <var:b> = <nat:3> * <var:t> + <nat:7> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 