\begin{document} \begin{definition} We define the following program <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:C0> := <nat:4> ; <var:g> := <var:C0> \end{verbatim} \end{definition} \begin{theorem} Take a list of instructions <def:poly> in \emph{Imp} . Given it to hold that $ <var:a> = <var:y> $ before the evaluation of our list of instructions , then $ <var:g> = <nat:4> $ . \end{theorem} \begin{proof} Arguing the correctness of the set of commands can be shown using Hoare reasoning . Honing in on the following bit of code in our list of instructions , we have the environment update statement defining $ <nat:4> $ toward $ <var:C0>$ . This statement redefines the precondition $ \{ <var:a> = <var:y> \} $ toward the condition $ \{ <var:a> = <var:y> \land <var:C0> = <nat:4> \} $ . Paying attention to the upcoming bit of code seen in our list of instructions , we have the code defining $ <var:C0$ into $ <var:g>$ . This forwards the condition $ \{ <var:a> = <var:y> \land <var:C0> = <nat:4> \} $ to the condition $ \{ <var:a> = <var:y> \land <var:g> = <nat:4> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:C0> : string := " <var:C0> " . Definition <def:poly> := <var:C0> := <nat:4> ; <var:g> := <var:C0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:a> = <var:y> }} <def:poly> {{ <var:g> = <nat:4> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:a> = <var:y> /\ <var:C0> = <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:a> = <var:y> /\ <var:g> = <nat:4> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 