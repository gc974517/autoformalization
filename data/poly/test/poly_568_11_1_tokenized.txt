\begin{document} \begin{definition} Define a segment of code <def:poly> in \emph{Imp} such that \begin{verbatim} <var:I1> := <var:y> ; <var:I2> := <var:I1> * <var:y> ; <var:I3> := <var:I2> * <var:y> ; <var:I0> := <nat:2> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:6> ; <var:I3> := <var:I3> * <nat:6> ; <var:Q> := <var:I3> <var:Q> := <var:Q> + <var:I2> <var:Q> := <var:Q> + <var:I1> <var:Q> := <var:Q> + <var:I0> \end{verbatim} \end{definition} \begin{theorem} Consider the following code segment <def:poly> in \emph{Imp} . Assume it to hold that $ <var:y> = <var:O> $ ( given some whole numbers $ <var:O> $ ) before running this list of commands it must be that we have $ <var:Q> = <nat:6> \times <var:O> ^ <nat:3> + <nat:6> \times <var:O> ^ <nat:2> + <nat:4> \times <var:O> + <nat:2> $ . \end{theorem} \begin{proof} Applying standard Hoare logic gives us : \begin{eqnarray} \{ <var:y> = <var:O> \} \\ <var:I1> := <var:y> ; \\ \{ <var:y> = <var:O> \land <var:I1> = <var:O> \} \\ <var:I2> := <var:I1> * <var:y> ; \\ \{ <var:y> = <var:O> \land <var:I1> = <var:O> \land <var:I2> = <var:O> ^ <nat:2> \} \\ <var:I3> := <var:I2> * <var:y> ; \\ \{ <var:y> = <var:O> \land <var:I1> = <var:O> \land <var:I2> = <var:O> ^ <nat:2> \land <var:I3> = <var:O> ^ <nat:3> \} \\ <var:I0> := <nat:2> ; \\ \{ <var:y> = <var:O> \land <var:I1> = <var:O> \land <var:I2> = <var:O> ^ <nat:2> \land <var:I3> = <var:O> ^ <nat:3> \land <var:I0> = <nat:2> \} \\ <var:I1> := <var:I1> * <nat:4> ; \\ \{ <var:y> = <var:O> \land <var:I1> = <nat:4> \cdot <var:O> \land <var:I2> = <var:O> ^ <nat:2> \land <var:I3> = <var:O> ^ <nat:3> \land <var:I0> = <nat:2> \} \end{eqnarray} Furthering executing the code segment returns : \begin{eqnarray} <var:I2> := <var:I2> * <nat:6> ; \\ \{ <var:y> = <var:O> \land <var:I1> = <nat:4> \cdot <var:O> \land <var:I2> = <nat:6> \cdot <var:O> ^ <nat:2> \land <var:I3> = <var:O> ^ <nat:3> \land <var:I0> = <nat:2> \} \\ <var:I3> := <var:I3> * <nat:6> ; \\ \{ <var:y> = <var:O> \land <var:I1> = <nat:4> \cdot <var:O> \land <var:I2> = <nat:6> \cdot <var:O> ^ <nat:2> \land <var:I3> = <nat:6> \cdot <var:O> ^ <nat:3> \land <var:I0> = <nat:2> \} \\ <var:Q> := <var:I3> \\ \{ <var:y> = <var:O> \land <var:I1> = <nat:4> \cdot <var:O> \land <var:I2> = <nat:6> \cdot <var:O> ^ <nat:2> \land <var:I0> = <nat:2> \land <var:Q> = <nat:6> \cdot <var:O> ^ <nat:3> \} \\ <var:Q> := <var:Q> + <var:I2> \\ \{ <var:y> = <var:O> \land <var:I1> = <nat:4> \cdot <var:O> \land <var:I0> = <nat:2> \land <var:Q> = <nat:6> \cdot <var:O> ^ <nat:3> + <nat:6> \cdot <var:O> ^ <nat:2> \} \\ <var:Q> := <var:Q> + <var:I1> \\ \{ <var:y> = <var:O> \land <var:I0> = <nat:2> \land <var:Q> = <nat:6> \cdot <var:O> ^ <nat:3> + <nat:6> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> \} \\ <var:Q> := <var:Q> + <var:I0> \\ \{ <var:y> = <var:O> \land <var:Q> = <nat:6> \cdot <var:O> ^ <nat:3> + <nat:6> \cdot <var:O> ^ <nat:2> + <nat:4> \cdot <var:O> + <nat:2> \} \end{eqnarray} Thus , our list of commands has been shown correct . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:I0> : string := " <var:I0> " . Definition <var:I1> : string := " <var:I1> " . Definition <var:I2> : string := " <var:I2> " . Definition <var:I3> : string := " <var:I3> " . Definition <def:poly> := <var:I1> := <var:y> ; <var:I2> := <var:I1> * <var:y> ; <var:I3> := <var:I2> * <var:y> ; <var:I0> := <nat:2> ; <var:I1> := <var:I1> * <nat:4> ; <var:I2> := <var:I2> * <nat:6> ; <var:I3> := <var:I3> * <nat:6> ; <var:Q> := <var:I3> <var:Q> := <var:Q> + <var:I2> <var:Q> := <var:Q> + <var:I1> <var:Q> := <var:Q> + <var:I0> . Theorem <genH:poly_code_correct> : forall <var:O> : nat , {{ <var:y> = <var:O> }} <def:poly> {{ <var:Q> = <nat:6> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:I1> = <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:I1> = <var:O> /\ <var:I2> = <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:I1> = <var:O> /\ <var:I2> = <var:O> ^ <nat:2> /\ <var:I3> = <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:I1> = <var:O> /\ <var:I2> = <var:O> ^ <nat:2> /\ <var:I3> = <var:O> ^ <nat:3> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:I1> = <nat:4> * <var:O> /\ <var:I2> = <var:O> ^ <nat:2> /\ <var:I3> = <var:O> ^ <nat:3> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:I1> = <nat:4> * <var:O> /\ <var:I2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:I3> = <var:O> ^ <nat:3> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:I1> = <nat:4> * <var:O> /\ <var:I2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:I3> = <nat:6> * <var:O> ^ <nat:3> /\ <var:I0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:I1> = <nat:4> * <var:O> /\ <var:I2> = <nat:6> * <var:O> ^ <nat:2> /\ <var:I0> = <nat:2> /\ <var:Q> = <nat:6> * <var:O> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:I1> = <nat:4> * <var:O> /\ <var:I0> = <nat:2> /\ <var:Q> = <nat:6> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:I0> = <nat:2> /\ <var:Q> = <nat:6> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:4> * <var:O> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:y> = <var:O> /\ <var:Q> = <nat:6> * <var:O> ^ <nat:3> + <nat:6> * <var:O> ^ <nat:2> + <nat:4> * <var:O> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 