\begin{document} \begin{theorem} Consider a segment of code in \emph{Imp} as follows \begin{verbatim} <var:f> := <nat:2> ; <var:f> := <nat:4> + <var:f> * <var:Y> ; <var:f> := <var:f> * <var:Y> ; <var:f> := <nat:2> + <var:f> * <var:Y> \end{verbatim} Assuming , for $ <var:c> $ , that we have $ <var:Y> = <var:c> $ ahead of running our list of commands it follows that we see $ <var:f> = <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> $ . \end{theorem} \begin{proof} Demonstrating correctness of the list of commands can be given using usual Hoare techniques . Taking another step toward the upcoming lines in our segment of code , we see \[ \begin{tabular} {rcl} \{ <var:Y> = <var:c> \} & <var:f> := <nat:2> & \{ <var:Y> = <var:c> \land <var:f> = <nat:2> \} \\ \{ <var:Y> = <var:c> \land <var:f> = <nat:2> \} & <var:f> := <nat:4> + <var:f> * <var:Y> & \{ <var:Y> = <var:c> \land <var:f> = <nat:2> \cdot <var:c> + <nat:4> \} \end{tabular} This is ensured through the variable binding law of standard Hoare techniques . Moving forward to the following command in our set of instructions , we have \[ \begin{tabular} {rcl} \{ <var:Y> = <var:c> \} & <var:f> := <nat:2> & \{ <var:Y> = <var:c> \land <var:f> = <nat:2> \} \end{tabular} Moving forward to the next step , we have \[ \begin{tabular} {rcl} \{ <var:Y> = <var:c> \} & <var:f> := <nat:2> & \{ <var:Y> = <var:c> \land <var:f> = <nat:2> \} \end{tabular} This is shown using the variable assignmet inference rule from Hoare logic . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Theorem <genH:poly_code_correct> : forall <var:c> : nat , {{ <var:Y> = <var:c> }} <var:f> := <nat:2> ; <var:f> := <nat:4> + <var:f> * <var:Y> ; <var:f> := <var:f> * <var:Y> ; <var:f> := <nat:2> + <var:f> * <var:Y> {{ <var:f> = <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:f> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:f> = <nat:2> * <var:c> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:f> = <nat:2> * <var:c> ^ <nat:2> + <nat:4> * <var:c> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:Y> = <var:c> /\ <var:f> = <nat:2> * <var:c> ^ <nat:3> + <nat:4> * <var:c> ^ <nat:2> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 