\begin{document} \begin{definition} Consider the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:j> := <nat:3> ; <var:j> := <var:j> * <var:K> ; <var:j> := <var:j> * <var:K> ; <var:j> := <nat:4> + <var:j> * <var:K> ; <var:j> := <nat:2> + <var:j> * <var:K> ; <var:j> := <nat:2> + <var:j> * <var:K> \end{verbatim} \end{definition} \begin{theorem} Assume that we have $ <var:K> = <var:u> $ --- given any positive numbers $ <var:u> $ --- ahead of evaluating the segment of code then we see $ <var:j> = <nat:3> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:2> $ . \end{theorem} \begin{proof} The proof of our code is clear using standard Hoare reasoning . Going to the next step , we have \[ \begin{tabular} {rcl} \{ <var:K> = <var:u> \} & <var:j> := <nat:3> & \{ <var:K> = <var:u> \land <var:j> = <nat:3> \} \end{tabular} This is given by the variable binding scheme given by usual Hoare techniques . Keeping momentum , we have \[ \begin{tabular} {rcl} \{ <var:K> = <var:u> \} & <var:j> := <nat:3> & \{ <var:K> = <var:u> \land <var:j> = <nat:3> \} \\ \{ <var:K> = <var:u> \land <var:j> = <nat:3> \} & <var:j> := <var:j> * <var:K> & \{ <var:K> = <var:u> \land <var:j> = <nat:3> * <var:u> + \} \\ \{ <var:K> = <var:u> \land <var:j> = <nat:3> * <var:u> + \} & <var:j> := <var:j> * <var:K> & \{ <var:K> = <var:u> \land <var:j> = <nat:3> * <var:u> ^ <nat:2> + \} \\ \{ <var:K> = <var:u> \land <var:j> = <nat:3> * <var:u> ^ <nat:2> + \} & <var:j> := <nat:4> + <var:j> * <var:K> & \{ <var:K> = <var:u> \land <var:j> = <nat:3> * <var:u> ^ <nat:3> + <nat:4> \} \\ \{ <var:K> = <var:u> \land <var:j> = <nat:3> * <var:u> ^ <nat:3> + <nat:4> \} & <var:j> := <nat:2> + <var:j> * <var:K> & \{ <var:K> = <var:u> \land <var:j> = <nat:3> * <var:u> ^ <nat:4> + <nat:4> * <var:u> + <nat:2> \} \end{tabular} \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <def:poly> := <var:j> := <nat:3> ; <var:j> := <var:j> * <var:K> ; <var:j> := <var:j> * <var:K> ; <var:j> := <nat:4> + <var:j> * <var:K> ; <var:j> := <nat:2> + <var:j> * <var:K> ; <var:j> := <nat:2> + <var:j> * <var:K> . Theorem <genH:poly_code_correct> : forall <var:u> : nat , {{ <var:K> = <var:u> }} <def:poly> {{ <var:j> = <nat:3> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:j> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:j> = <nat:3> * <var:u> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:j> = <nat:3> * <var:u> ^ <nat:2> + ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:j> = <nat:3> * <var:u> ^ <nat:3> + <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:j> = <nat:3> * <var:u> ^ <nat:4> + <nat:4> * <var:u> + <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:K> = <var:u> /\ <var:j> = <nat:3> * <var:u> ^ <nat:5> + <nat:4> * <var:u> ^ <nat:2> + <nat:2> * <var:u> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 