\begin{document} \begin{definition} Let the following set of commands <def:poly> in \emph{Imp} as follows \begin{verbatim} <var:f1> := <var:B> ; <var:f2> := <var:f1> * <var:B> ; <var:f3> := <var:f2> * <var:B> ; <var:f4> := <var:f3> * <var:B> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:1> ; <var:f3> := <var:f3> * <nat:6> ; <var:f4> := <var:f4> * <nat:8> ; <var:o> := <var:f4> <var:o> := <var:o> + <var:f3> <var:o> := <var:o> + <var:f2> <var:o> := <var:o> + <var:f1> <var:o> := <var:o> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Assume it to be that $ <var:B> = <var:y> $ ( letting positive numbers $ <var:y> $ ) before interpreting our series of commands , then we have $ <var:o> = <nat:8> \times <var:y> ^ <nat:4> + <nat:6> \times <var:y> ^ <nat:3> + <nat:1> \times <var:y> ^ <nat:2> + <nat:8> \times <var:y> + <nat:5> $ when code has finished . \end{theorem} \begin{proof} The flow of logic for the program can be done through standard Hoare reasoning . Considering the following statement found in the code segment , we see the variable binding line yielding $ <var:B> $ as $ <var:f1>$ . This command moves $ \{ <var:B> = <var:y> \} $ into $ \{ <var:B> = <var:y> \land <var:f1> = <var:y> \} $ . Shifting focus toward the upcoming line of code seen in our list of commands , the code letting $ <var:f1> * <var:B> $ to $ <var:f2>$ . This advances the precondition $ \{ <var:B> = <var:y> \land <var:f1> = <var:y> \} $ toward the postcondition $ \{ <var:B> = <var:y> \land <var:f1> = <var:y> \land <var:f2> = <var:y> ^ <nat:2> \} $ . This is shown by the assignment rule found in typical Hoare reasoning . Moving on to the proceeding statement seen in our list of commands , we see the variable update code defining $ <var:f2> * <var:B> $ as $ <var:f3>$ . This redefines the condition $ \{ <var:B> = <var:y> \land <var:f1> = <var:y> \land <var:f2> = <var:y> ^ <nat:2> \} $ toward $ \{ <var:B> = <var:y> \land <var:f1> = <var:y> \land <var:f2> = <var:y> ^ <nat:2> \land <var:f3> = <var:y> ^ <nat:3> \} $ . Immediately following , we see the variable update command assigning $ <var:f3> * <var:B> $ toward $ <var:f4>$ . This moves the condition $ \{ <var:B> = <var:y> \land <var:f1> = <var:y> \land <var:f2> = <var:y> ^ <nat:2> \land <var:f3> = <var:y> ^ <nat:3> \} $ toward the postcondition $ \{ <var:B> = <var:y> \land <var:f1> = <var:y> \land <var:f2> = <var:y> ^ <nat:2> \land <var:f3> = <var:y> ^ <nat:3> \land <var:f4> = <var:y> ^ <nat:4> \} $ . Following , we have the variable update line yielding $ <nat:5> $ into $ <var:f0>$ . This advances $ \{ <var:B> = <var:y> \land <var:f1> = <var:y> \land <var:f2> = <var:y> ^ <nat:2> \land <var:f3> = <var:y> ^ <nat:3> \land <var:f4> = <var:y> ^ <nat:4> \} $ to $ \{ <var:B> = <var:y> \land <var:f1> = <var:y> \land <var:f2> = <var:y> ^ <nat:2> \land <var:f3> = <var:y> ^ <nat:3> \land <var:f4> = <var:y> ^ <nat:4> \land <var:f0> = <nat:5> \} $ . Focusing on the proceeding line in the series of instructions , we see the code defining $ <var:f1> * <nat:8> $ to $ <var:f1>$ . This moves the precondition $ \{ <var:B> = <var:y> \land <var:f1> = <var:y> \land <var:f2> = <var:y> ^ <nat:2> \land <var:f3> = <var:y> ^ <nat:3> \land <var:f4> = <var:y> ^ <nat:4> \land <var:f0> = <nat:5> \} $ as the postcondition $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f2> = <var:y> ^ <nat:2> \land <var:f3> = <var:y> ^ <nat:3> \land <var:f4> = <var:y> ^ <nat:4> \land <var:f0> = <nat:5> \} $ . Further , we have the command \verb | <var:f2> := <var:f2> * <nat:1> ; | . This transfers the condition $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f2> = <var:y> ^ <nat:2> \land <var:f3> = <var:y> ^ <nat:3> \land <var:f4> = <var:y> ^ <nat:4> \land <var:f0> = <nat:5> \} $ as the condition $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:f3> = <var:y> ^ <nat:3> \land <var:f4> = <var:y> ^ <nat:4> \land <var:f0> = <nat:5> \} $ . Focusing on the proceeding piece of code found in our code , the binding command \verb | <var:f3> := <var:f3> * <nat:6> ; | . This advances the condition $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:f3> = <var:y> ^ <nat:3> \land <var:f4> = <var:y> ^ <nat:4> \land <var:f0> = <nat:5> \} $ as $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:f3> = <nat:6> \cdot <var:y> ^ <nat:3> \land <var:f4> = <var:y> ^ <nat:4> \land <var:f0> = <nat:5> \} $ . Further , we have the variable assignmet line \verb | <var:f4> := <var:f4> * <nat:8> ; | . This redefines the condition $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:f3> = <nat:6> \cdot <var:y> ^ <nat:3> \land <var:f4> = <var:y> ^ <nat:4> \land <var:f0> = <nat:5> \} $ toward the condition $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:f3> = <nat:6> \cdot <var:y> ^ <nat:3> \land <var:f4> = <nat:8> \cdot <var:y> ^ <nat:4> \land <var:f0> = <nat:5> \} $ . This is guaranteed using the assignment scheme of usual Hoare logic . Stepping forward , we see the assignment code yielding $ <var:f4$ into $ <var:o>$ . This statement transfers $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:f3> = <nat:6> \cdot <var:y> ^ <nat:3> \land <var:f4> = <nat:8> \cdot <var:y> ^ <nat:4> \land <var:f0> = <nat:5> \} $ as the condition $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:f3> = <nat:6> \cdot <var:y> ^ <nat:3> \land <var:f0> = <nat:5> \land <var:o> = <nat:8> \cdot <var:y> ^ <nat:4> \} $ . Taking a look at the proceeding command found in our list of commands , the variable binding command \verb | <var:o> := <var:o> + <var:f3> | . This advances $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:f3> = <nat:6> \cdot <var:y> ^ <nat:3> \land <var:f0> = <nat:5> \land <var:o> = <nat:8> \cdot <var:y> ^ <nat:4> \} $ as $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:f0> = <nat:5> \land <var:o> = <nat:8> \cdot <var:y> ^ <nat:4> + <nat:6> \cdot <var:y> ^ <nat:3> \} $ . This is given through the assignment rule found in usual Hoare reasoning . Going to the next step , we have the variable update code assigning $ <var:o> + <var:f2$ into $ <var:o>$ . This command advances $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f2> = <nat:1> \cdot <var:y> ^ <nat:2> \land <var:f0> = <nat:5> \land <var:o> = <nat:8> \cdot <var:y> ^ <nat:4> + <nat:6> \cdot <var:y> ^ <nat:3> \} $ to $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f0> = <nat:5> \land <var:o> = <nat:8> \cdot <var:y> ^ <nat:4> + <nat:6> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> \} $ . Focusing on the following line seen in the set of commands , the variable binding command \verb | <var:o> := <var:o> + <var:f1> | . This command takes $ \{ <var:B> = <var:y> \land <var:f1> = <nat:8> \cdot <var:y> \land <var:f0> = <nat:5> \land <var:o> = <nat:8> \cdot <var:y> ^ <nat:4> + <nat:6> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> \} $ into the postcondition $ \{ <var:B> = <var:y> \land <var:f0> = <nat:5> \land <var:o> = <nat:8> \cdot <var:y> ^ <nat:4> + <nat:6> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:8> \cdot <var:y> \} $ . Advancing to the next step in the list of instructions , the variable assignmet code letting $ <var:o> + <var:f0$ to $ <var:o>$ . This line moves the precondition $ \{ <var:B> = <var:y> \land <var:f0> = <nat:5> \land <var:o> = <nat:8> \cdot <var:y> ^ <nat:4> + <nat:6> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:8> \cdot <var:y> \} $ into $ \{ <var:B> = <var:y> \land <var:o> = <nat:8> \cdot <var:y> ^ <nat:4> + <nat:6> \cdot <var:y> ^ <nat:3> + <nat:1> \cdot <var:y> ^ <nat:2> + <nat:8> \cdot <var:y> + <nat:5> \} $ . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <var:f4> : string := " <var:f4> " . Definition <def:poly> := <var:f1> := <var:B> ; <var:f2> := <var:f1> * <var:B> ; <var:f3> := <var:f2> * <var:B> ; <var:f4> := <var:f3> * <var:B> ; <var:f0> := <nat:5> ; <var:f1> := <var:f1> * <nat:8> ; <var:f2> := <var:f2> * <nat:1> ; <var:f3> := <var:f3> * <nat:6> ; <var:f4> := <var:f4> * <nat:8> ; <var:o> := <var:f4> <var:o> := <var:o> + <var:f3> <var:o> := <var:o> + <var:f2> <var:o> := <var:o> + <var:f1> <var:o> := <var:o> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:y> : nat , {{ <var:B> = <var:y> }} <def:poly> {{ <var:o> = <nat:8> * <var:y> ^ <nat:4> + <nat:6> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:5> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:f1> = <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:f1> = <var:y> /\ <var:f2> = <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:f1> = <var:y> /\ <var:f2> = <var:y> ^ <nat:2> /\ <var:f3> = <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:f1> = <var:y> /\ <var:f2> = <var:y> ^ <nat:2> /\ <var:f3> = <var:y> ^ <nat:3> /\ <var:f4> = <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:f1> = <var:y> /\ <var:f2> = <var:y> ^ <nat:2> /\ <var:f3> = <var:y> ^ <nat:3> /\ <var:f4> = <var:y> ^ <nat:4> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:f1> = <nat:8> * <var:y> /\ <var:f2> = <var:y> ^ <nat:2> /\ <var:f3> = <var:y> ^ <nat:3> /\ <var:f4> = <var:y> ^ <nat:4> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:f1> = <nat:8> * <var:y> /\ <var:f2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:f3> = <var:y> ^ <nat:3> /\ <var:f4> = <var:y> ^ <nat:4> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:f1> = <nat:8> * <var:y> /\ <var:f2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:f3> = <nat:6> * <var:y> ^ <nat:3> /\ <var:f4> = <var:y> ^ <nat:4> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:f1> = <nat:8> * <var:y> /\ <var:f2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:f3> = <nat:6> * <var:y> ^ <nat:3> /\ <var:f4> = <nat:8> * <var:y> ^ <nat:4> /\ <var:f0> = <nat:5> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:f1> = <nat:8> * <var:y> /\ <var:f2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:f3> = <nat:6> * <var:y> ^ <nat:3> /\ <var:f0> = <nat:5> /\ <var:o> = <nat:8> * <var:y> ^ <nat:4> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:f1> = <nat:8> * <var:y> /\ <var:f2> = <nat:1> * <var:y> ^ <nat:2> /\ <var:f0> = <nat:5> /\ <var:o> = <nat:8> * <var:y> ^ <nat:4> + <nat:6> * <var:y> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:f1> = <nat:8> * <var:y> /\ <var:f0> = <nat:5> /\ <var:o> = <nat:8> * <var:y> ^ <nat:4> + <nat:6> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:f0> = <nat:5> /\ <var:o> = <nat:8> * <var:y> ^ <nat:4> + <nat:6> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:8> * <var:y> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:B> = <var:y> /\ <var:o> = <nat:8> * <var:y> ^ <nat:4> + <nat:6> * <var:y> ^ <nat:3> + <nat:1> * <var:y> ^ <nat:2> + <nat:8> * <var:y> + <nat:5> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 