\begin{document} \begin{definition} We define the following series of instructions <def:poly> in \emph{Imp} as \begin{verbatim} <var:f1> := <var:d> ; <var:f2> := <var:f1> * <var:d> ; <var:f3> := <var:f2> * <var:d> ; <var:f0> := <nat:3> ; <var:f1> := <var:f1> * <nat:1> ; <var:f2> := <var:f2> * <nat:2> ; <var:f3> := <var:f3> * <nat:3> ; <var:t> := <var:f3> <var:t> := <var:t> + <var:f2> <var:t> := <var:t> + <var:f1> <var:t> := <var:t> + <var:f0> \end{verbatim} \end{definition} \begin{theorem} Allow $ <var:d> = <var:E> $ --- letting positive integers $ <var:E> $ --- ahead of running our segment of code , it holds that we have $ <var:t> = <nat:3> \times <var:E> ^ <nat:3> + <nat:2> \times <var:E> ^ <nat:2> + <nat:1> \times <var:E> + <nat:3> $ . \end{theorem} \begin{proof} The proof of our series of instructions can be shown using Hoare reasoning . Next , we have the environment update statement yielding $ <var:d> $ as $ <var:f1>$ . This redefines $ \{ <var:d> = <var:E> \} $ to the condition $ \{ <var:d> = <var:E> \land <var:f1> = <var:E> \} $ . This is ensured by the assignment inference rule of standard Hoare logic . Looking at the upcoming line of code in the code segment , we see the environment update code \verb | <var:f2> := <var:f1> * <var:d> ; | . This command forwards the condition $ \{ <var:d> = <var:E> \land <var:f1> = <var:E> \} $ toward $ \{ <var:d> = <var:E> \land <var:f1> = <var:E> \land <var:f2> = <var:E> ^ <nat:2> \} $ . This is given with the assignment scheme given by usual Hoare techniques . Advancing to the proceeding statement seen in our code , the environment update command \verb | <var:f3> := <var:f2> * <var:d> ; | . This statement forwards the condition $ \{ <var:d> = <var:E> \land <var:f1> = <var:E> \land <var:f2> = <var:E> ^ <nat:2> \} $ toward the postcondition $ \{ <var:d> = <var:E> \land <var:f1> = <var:E> \land <var:f2> = <var:E> ^ <nat:2> \land <var:f3> = <var:E> ^ <nat:3> \} $ . Moving on to the following line of code contained in the series of commands , we see the environment update line yielding $ <nat:3> $ toward $ <var:f0>$ . This takes the precondition $ \{ <var:d> = <var:E> \land <var:f1> = <var:E> \land <var:f2> = <var:E> ^ <nat:2> \land <var:f3> = <var:E> ^ <nat:3> \} $ to the postcondition $ \{ <var:d> = <var:E> \land <var:f1> = <var:E> \land <var:f2> = <var:E> ^ <nat:2> \land <var:f3> = <var:E> ^ <nat:3> \land <var:f0> = <nat:3> \} $ . Moving onward , we have the binding code giving $ <var:f1> * <nat:1> $ toward $ <var:f1>$ . This transfers the condition $ \{ <var:d> = <var:E> \land <var:f1> = <var:E> \land <var:f2> = <var:E> ^ <nat:2> \land <var:f3> = <var:E> ^ <nat:3> \land <var:f0> = <nat:3> \} $ into the condition $ \{ <var:d> = <var:E> \land <var:f1> = <nat:1> * <var:E> \land <var:f2> = <var:E> ^ <nat:2> \land <var:f3> = <var:E> ^ <nat:3> \land <var:f0> = <nat:3> \} $ . Honing in on the next step found in our list of instructions , the command \verb | <var:f2> := <var:f2> * <nat:2> ; | . This statement moves the precondition $ \{ <var:d> = <var:E> \land <var:f1> = <nat:1> * <var:E> \land <var:f2> = <var:E> ^ <nat:2> \land <var:f3> = <var:E> ^ <nat:3> \land <var:f0> = <nat:3> \} $ as the condition $ \{ <var:d> = <var:E> \land <var:f1> = <nat:1> * <var:E> \land <var:f2> = <nat:2> * <var:E> ^ <nat:2> \land <var:f3> = <var:E> ^ <nat:3> \land <var:f0> = <nat:3> \} $ . This is deduced using the assignment rule in usual Hoare techniques . Jumping to the next statement in our list of instructions , the variable binding code binding $ <var:f3> * <nat:3> $ into $ <var:f3>$ . This statement moves the precondition $ \{ <var:d> = <var:E> \land <var:f1> = <nat:1> * <var:E> \land <var:f2> = <nat:2> * <var:E> ^ <nat:2> \land <var:f3> = <var:E> ^ <nat:3> \land <var:f0> = <nat:3> \} $ toward $ \{ <var:d> = <var:E> \land <var:f1> = <nat:1> * <var:E> \land <var:f2> = <nat:2> * <var:E> ^ <nat:2> \land <var:f3> = <nat:3> * <var:E> ^ <nat:3> \land <var:f0> = <nat:3> \} $ . Jumping to the proceeding line contained in the segment of code , we see the variable assignmet line binding $ <var:f3$ into $ <var:t>$ . This code forwards the precondition $ \{ <var:d> = <var:E> \land <var:f1> = <nat:1> * <var:E> \land <var:f2> = <nat:2> * <var:E> ^ <nat:2> \land <var:f3> = <nat:3> * <var:E> ^ <nat:3> \land <var:f0> = <nat:3> \} $ to the condition $ \{ <var:d> = <var:E> \land <var:f1> = <nat:1> * <var:E> \land <var:f2> = <nat:2> * <var:E> ^ <nat:2> \land <var:f0> = <nat:3> \land <var:t> = <nat:3> * <var:E> ^ <nat:3> \} $ . Shifting focus toward the next step in the list of instructions , the line yielding $ <var:t> + <var:f2$ toward $ <var:t>$ . This transfers $ \{ <var:d> = <var:E> \land <var:f1> = <nat:1> * <var:E> \land <var:f2> = <nat:2> * <var:E> ^ <nat:2> \land <var:f0> = <nat:3> \land <var:t> = <nat:3> * <var:E> ^ <nat:3> \} $ as $ \{ <var:d> = <var:E> \land <var:f1> = <nat:1> * <var:E> \land <var:f0> = <nat:3> \land <var:t> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> \} $ . This is sound with the assignment law defined by Hoare logic . Moving forward , we see the binding line \verb | <var:t> := <var:t> + <var:f1> | . This redefines the condition $ \{ <var:d> = <var:E> \land <var:f1> = <nat:1> * <var:E> \land <var:f0> = <nat:3> \land <var:t> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> \} $ into the postcondition $ \{ <var:d> = <var:E> \land <var:f0> = <nat:3> \land <var:t> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> \} $ . This is rigorously given with the assignment law defined by usual Hoare reasoning . Advancing on , we have the assignment command giving $ <var:t> + <var:f0$ toward $ <var:t>$ . This advances $ \{ <var:d> = <var:E> \land <var:f0> = <nat:3> \land <var:t> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> \} $ into the postcondition $ \{ <var:d> = <var:E> \land <var:t> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> \} $ . This is rigorously given using the assignment inference rule obtained from standard Hoare reasoning . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:f0> : string := " <var:f0> " . Definition <var:f1> : string := " <var:f1> " . Definition <var:f2> : string := " <var:f2> " . Definition <var:f3> : string := " <var:f3> " . Definition <def:poly> := <var:f1> := <var:d> ; <var:f2> := <var:f1> * <var:d> ; <var:f3> := <var:f2> * <var:d> ; <var:f0> := <nat:3> ; <var:f1> := <var:f1> * <nat:1> ; <var:f2> := <var:f2> * <nat:2> ; <var:f3> := <var:f3> * <nat:3> ; <var:t> := <var:f3> <var:t> := <var:t> + <var:f2> <var:t> := <var:t> + <var:f1> <var:t> := <var:t> + <var:f0> . Theorem <genH:poly_code_correct> : forall <var:E> : nat , {{ <var:d> = <var:E> }} <def:poly> {{ <var:t> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:f1> = <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:f1> = <var:E> /\ <var:f2> = <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:f1> = <var:E> /\ <var:f2> = <var:E> ^ <nat:2> /\ <var:f3> = <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:f1> = <var:E> /\ <var:f2> = <var:E> ^ <nat:2> /\ <var:f3> = <var:E> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:f1> = <nat:1> * <var:E> /\ <var:f2> = <var:E> ^ <nat:2> /\ <var:f3> = <var:E> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:f1> = <nat:1> * <var:E> /\ <var:f2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:f3> = <var:E> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:f1> = <nat:1> * <var:E> /\ <var:f2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:f3> = <nat:3> * <var:E> ^ <nat:3> /\ <var:f0> = <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:f1> = <nat:1> * <var:E> /\ <var:f2> = <nat:2> * <var:E> ^ <nat:2> /\ <var:f0> = <nat:3> /\ <var:t> = <nat:3> * <var:E> ^ <nat:3> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:f1> = <nat:1> * <var:E> /\ <var:f0> = <nat:3> /\ <var:t> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:f0> = <nat:3> /\ <var:t> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:d> = <var:E> /\ <var:t> = <nat:3> * <var:E> ^ <nat:3> + <nat:2> * <var:E> ^ <nat:2> + <nat:1> * <var:E> + <nat:3> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 