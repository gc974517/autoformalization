\begin{document} \begin{definition} Take the following list of commands <def:poly> in \emph{Imp} such that \begin{verbatim} <var:o1> := <var:U> ; <var:o2> := <var:o1> * <var:U> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:7> ; <var:o2> := <var:o2> * <nat:7> ; <var:t> := <var:o2> <var:t> := <var:t> + <var:o1> <var:t> := <var:t> + <var:o0> \end{verbatim} \end{definition} \begin{theorem} Take the following series of commands <def:poly> . Allow that $ <var:U> = <var:e> $ before evaluating this series of instructions then $ <var:t> = <nat:7> \times <var:e> ^ <nat:2> + <nat:7> \times <var:e> + <nat:2> $ . \end{theorem} \begin{proof} Observe the below decorated segment of code . \begin{eqnarray} \{ <var:U> = <var:e> \} \\ <var:o1> := <var:U> ; \\ \{ <var:U> = <var:e> \land <var:o1> = <var:e> \} \\ <var:o2> := <var:o1> * <var:U> ; \\ \{ <var:U> = <var:e> \land <var:o1> = <var:e> \land <var:o2> = <var:e> ^ <nat:2> \} \\ <var:o0> := <nat:2> ; \\ \{ <var:U> = <var:e> \land <var:o1> = <var:e> \land <var:o2> = <var:e> ^ <nat:2> \land <var:o0> = <nat:2> \} \\ <var:o1> := <var:o1> * <nat:7> ; \\ \{ <var:U> = <var:e> \land <var:o1> = <nat:7> \times <var:e> \land <var:o2> = <var:e> ^ <nat:2> \land <var:o0> = <nat:2> \} \\ <var:o2> := <var:o2> * <nat:7> ; \\ \{ <var:U> = <var:e> \land <var:o1> = <nat:7> \times <var:e> \land <var:o2> = <nat:7> \times <var:e> ^ <nat:2> \land <var:o0> = <nat:2> \} \\ <var:t> := <var:o2> \\ \{ <var:U> = <var:e> \land <var:o1> = <nat:7> \times <var:e> \land <var:o0> = <nat:2> \land <var:t> = <nat:7> \times <var:e> ^ <nat:2> \} \\ <var:t> := <var:t> + <var:o1> \\ \{ <var:U> = <var:e> \land <var:o0> = <nat:2> \land <var:t> = <nat:7> \times <var:e> ^ <nat:2> + <nat:7> \times <var:e> \} \\ <var:t> := <var:t> + <var:o0> \\ \{ <var:U> = <var:e> \land <var:t> = <nat:7> \times <var:e> ^ <nat:2> + <nat:7> \times <var:e> + <nat:2> \} \end{eqnarray} The application of usual Hoare techniques accomplishes the goal . \end{proof} \end{document} 
~
Require Import String . From PLF Require Import Imp . From PLF Require Import Hoare . Definition <var:o0> : string := " <var:o0> " . Definition <var:o1> : string := " <var:o1> " . Definition <var:o2> : string := " <var:o2> " . Definition <def:poly> := <var:o1> := <var:U> ; <var:o2> := <var:o1> * <var:U> ; <var:o0> := <nat:2> ; <var:o1> := <var:o1> * <nat:7> ; <var:o2> := <var:o2> * <nat:7> ; <var:t> := <var:o2> <var:t> := <var:t> + <var:o1> <var:t> := <var:t> + <var:o0> . Theorem <genH:poly_code_correct> : forall <var:e> : nat , {{ <var:U> = <var:e> }} <def:poly> {{ <var:t> = <nat:7> * <var:e> ^ <nat:2> + <nat:7> * <var:e> + <nat:2> }} . Proof . intros . apply hoare_seq with ( Q := ( ( <var:U> = <var:e> /\ <var:o1> = <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:e> /\ <var:o1> = <var:e> /\ <var:o2> = <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:e> /\ <var:o1> = <var:e> /\ <var:o2> = <var:e> ^ <nat:2> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:e> /\ <var:o1> = <nat:7> * <var:e> /\ <var:o2> = <var:e> ^ <nat:2> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:e> /\ <var:o1> = <nat:7> * <var:e> /\ <var:o2> = <nat:7> * <var:e> ^ <nat:2> /\ <var:o0> = <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:e> /\ <var:o1> = <nat:7> * <var:e> /\ <var:o0> = <nat:2> /\ <var:t> = <nat:7> * <var:e> ^ <nat:2> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:e> /\ <var:o0> = <nat:2> /\ <var:t> = <nat:7> * <var:e> ^ <nat:2> + <nat:7> * <var:e> ) ) %assertion ) . apply hoare_seq with ( Q := ( ( <var:U> = <var:e> /\ <var:t> = <nat:7> * <var:e> ^ <nat:2> + <nat:7> * <var:e> + <nat:2> ) ) %assertion ) . all : eapply hoare_consequence_pre ; try ( apply hoare_asgn || assn_auto'' ) . Qed . 